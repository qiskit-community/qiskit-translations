msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-03 12:57+0000\n"
"PO-Revision-Date: 2023-11-03 15:05\n"
"Last-Translator: \n"
"Language: th\n"
"Language-Team: Thai\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: th\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/circuits/01_circuit_basics.po\n"
"X-Crowdin-File-ID: 9498\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:10
msgid "This page was generated from `tutorials/circuits/01_circuit_basics.ipynb`__."
msgstr "หน้านี้ถูกสร้างขึ้นจาก `tutorials/circuits/01_circuit_basics.ipynb`__"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:9
msgid "Circuit Basics"
msgstr "วงจรโดยเบื้องต้น"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:11
msgid "Here, we provide an overview of working with Qiskit. Qiskit provides the basic building blocks necessary to program quantum computers. The fundamental unit of Qiskit is the `quantum circuit <https://en.wikipedia.org/wiki/Quantum_circuit>`__. A basic workflow using Qiskit consists of two stages: **Build** and **Run**. **Build** allows you to make different quantum circuits that represent the problem you are solving, and **Run** that allows you to run them on different backends. After the jobs have been run, the data is collected and postprocessed depending on the desired output."
msgstr "ในที่นี้เราจะพาคุณมาดูวิธีการทำงานกับ Qiskit โดยคร่าวกัน ซึ่ง Qiskit นั้นมีชุดคำสั่งพื้นฐานต่าง ๆ ที่จำเป็นเพียงพอต่อการโปรแกรมควอนตัมคอมพิวเตอร์ โดยมีหน่วยพื้นฐานที่สำคัญคือ`วงจรควอนตัม <https://en.wikipedia.org/wiki/Quantum_circuit>`__ ในการทำงานกับ Qiskit นั้น จะประกอบไปด้วยช่วงการทำงานหลัก ๆ 2 ช่วง: **การสร้างวงจร (Build)** และ **การรันวงจร (Run)** ในการ**การสร้างวงจร**นั้น จะทำให้คุณสามารถสร้างวงจรควอนตัมต่าง ๆ เพื่อใช้สำหรับแก้ปัญหาที่คุณกำลังแก้ไข และ**การรันวงจร**นั้นจะทำให้คุณสามารถรันวงจรของคุณบน Backends ต่าง ๆ ได้ ซึ่งหลังจากที่คุณทำการรันวงจรจนเสร็จแล้ว เราจะทำการเก็บข้อมูลต่าง ๆ เพื่อให้คุณสามารถนำข้อมูลเหล่านี้ไปใช้ต่อได้ตามต้องการ"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:36
msgid "Building the circuit"
msgstr "สร้างวงจร"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:38
msgid "The basic element needed for your first program is the QuantumCircuit. We begin by creating a ``QuantumCircuit`` comprised of three qubits."
msgstr "ส่วนประกอบพื้นฐานที่คุณจำเป็นต้องมีในโปรแกรมของคุณก็คือ QuantumCircuit โดยเราจะเริ่มกันจากการสร้าง ``QuantumCircuit`` ที่ประกอบไปด้วย 3 คิวบิต"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:60
msgid "After you create the circuit with its registers, you can add gates (\"operations\") to manipulate the registers. As you proceed through the tutorials you will find more gates and circuits; below is an example of a quantum circuit that makes a three-qubit GHZ state"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:62
msgid "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}.\n\n"
msgstr "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}\n\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:64
msgid "To create such a state, we start with a three-qubit quantum register. By default, each qubit in the register is initialized to :math:`|0\\rangle`. To make the GHZ state, we apply the following gates: - A Hadamard gate :math:`H` on qubit 0, which puts it into the superposition state :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}`. - A Controlled-NOT operation (:math:`C_{X}`) between qubit 0 and qubit 1. - A Controlled-NOT operation between qubit 0 and qubit 2."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:66
msgid "On an ideal quantum computer, the state produced by running this circuit would be the GHZ state above."
msgstr "บนเครื่องควอนตัมคอมพิวเตอร์ในอุดมคติ สถานะที่เกิดจากการรันวงจรนี้จะเป็นสถานะ GHZ ตามด้านบน"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:68
msgid "In Qiskit, operations can be added to the circuit one by one, as shown below."
msgstr "ใน Qiskit นั้น เราสามารถเพิ่ม Operation ต่าง ๆ ได้ทีละตัวตามตัวอย่างด้านล่าง"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:122
msgid "Visualize Circuit"
msgstr "แสดงผลวงจร"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:124
msgid "You can visualize your circuit using Qiskit ``QuantumCircuit.draw()``, which plots the circuit in the form found in many textbooks."
msgstr "คุณสามารถแสดงวงจรของคุณออกมาได้โดยการใช้คำสั่ง ``QuantumCircuit.draw()`` ซึ่งจะทำการแสดงผลวงจรออกมาในลักษณะที่คุณสามารถพบเห็นได้ตามตำราต่าง ๆ ทั่วไป"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:183
msgid "In this circuit, the qubits are put in order, with qubit zero at the top and qubit two at the bottom. The circuit is read left to right (meaning that gates that are applied earlier in the circuit show up further to the left)."
msgstr "ในวงจรนี้ คิวบิตแต่ละตัวถูกจัดเรียงไว้ตามลำดับ โดยเริ่มจากคิวบิต 0 อยู่ด้านบนสุดและคิวบิต 2 อยู่ด้านล่าง โดยวงจรนี้จะอ่านจากซ้ายไปขวา (หมายความว่าเกตที่ถูกทำงานก่อนจะอยู่ชิดทางด้านซ้ายของวงจร)"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:198
msgid "When representing the state of a multi-qubit system, the tensor order used in Qiskit is different than that used in most physics textbooks. Suppose there are :math:`n` qubits, and qubit :math:`j` is labeled as :math:`Q_{j}`. Qiskit uses an ordering in which the :math:`n^{\\mathrm{th}}` qubit is on the left side of the tensor product, so that the basis vectors are labeled as :math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0`."
msgstr "เวลานำเสนอสถานะของคิวบิตหลาย ๆ ตัวในระบบ ลำดับของ Tensor ใน Qiskit นั้นจะแตกต่างจากที่ใช้ในตำราฟิสิกส์ส่วนใหญ่ สมมติว่ามีคิวบิตจำนวน :math:`n` ตัว และคิวบิตที่ :math:`j` กำกับไว้ว่า :math:`Q_{j}` Qiskit จะเรียงลำดับโดยให้คิวบิตที่ :math:`n^{\\mathrm{th}}` เป็นคิวบิตที่ :math:`n-1` จากทางขวาของ Tensor Product นั่นคือเราจะได้ Basis Vector ว่า :math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0`"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:200
msgid "For example, if qubit zero is in state 0, qubit 1 is in state 0, and qubit 2 is in state 1, Qiskit would represent this state as :math:`|100\\rangle`, whereas many physics textbooks would represent it as :math:`|001\\rangle`."
msgstr "ตัวอย่างเช่น ถ้าคิวบิต 0 อยู่ในสถานะ 0 คิวบิต 1 อยู่ในสถานะ 0 และ คิวบิต 2 อยู่ในสถานะ 1 Qiskit จะแสดงผลสถานะเป็น :math:`|100\\rangle` ในขณะที่ตำราฟิสิกส์ส่วนใหญ่มักจะเขียนอยู่ในรูป :math:`|001\\rangle`"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:202
msgid "This difference in labeling affects the way multi-qubit operations are represented as matrices. For example, Qiskit represents a controlled-X (:math:`C_{X}`) operation with qubit 0 being the control and qubit 1 being the target as"
msgstr "ความแตกต่างนี้ยังส่งผลถึงการเขียนเมทริกซ์สำหรับ Operation บนหลายคิวบิตอีกด้วย ตัวอย่างเช่น คำสั่ง Controlled-X (:math:`C_{X}`) ใน Qiskit จะอยู่ในลักษณะที่คิวบิต 0 เป็นคิวบิตควบคุมและคิวบิต 1 เป็นคิวบิตเป้าหมาย ซึ่งทำให้เมทริกซ์อยู่ในรูป"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:204
msgid "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}.\n\n"
msgstr "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}\n\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:220
msgid "Simulating circuits"
msgstr "จำลองวงจร"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:222
msgid "To simulate a circuit we use the quant_info module in Qiskit. This simulator returns the quantum state, which is a complex vector of dimensions :math:`2^n`, where :math:`n` is the number of qubits (so be careful using this as it will quickly get too large to run on your machine)."
msgstr "เราจะใช้โมดูล quant_info ใน Qiskit เพื่อทำการจำลองวงจร โดยตัวจำลองนี้จะคืนสถานะทางควอนตัมออกมาในรูปของเวกเตอร์เชิงซ้อนขนาด :math:`2^n` มิติ โดยที่ :math:`n` เป็นจำนวนคิวบิต (ดังนั้นกรุณาใช้ความระมัดระวังเมื่อใช้ Backend ตัวนี้ เนื่องจากจำนวนมิติจะใหญ่ขึ้นอย่างรวดเร็วตามจำนวนคิวบิต และจะใหญ่มากเกินไปที่คอมพิวเตอร์ของคุณจะรันไหว)"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:224
msgid "There are two stages to the simulator. The first is to set the input state and the second to evolve the state by the quantum circuit."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:254
msgid "$$\\frac{\\sqrt{2}}{2} |000\\rangle+\\frac{\\sqrt{2}}{2} |111\\rangle$$"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:279
msgid "$$\n\n"
"\\begin{bmatrix}\n"
"\\frac{\\sqrt{2}}{2} & 0 & 0 & 0 & 0 & 0 & 0 & \\frac{\\sqrt{2}}{2}  \\\\\n"
" \\end{bmatrix}\n"
"$$"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:296
msgid "Qiskit also provides a visualization toolbox to allow you to view the state."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:298
msgid "Below, we use the visualization function to plot the qsphere and a hinton representing the real and imaginary components of the state density matrix :math:`\\rho`."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:348
msgid "Unitary representation of a circuit"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:359
msgid "Qiskit's quant_info module also has an operator method which can be used to make a unitary operator for the circuit. This calculates the :math:`2^n \\times 2^n` matrix representing the quantum circuit."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:480
msgid "OpenQASM backend"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:491
msgid "The simulators above are useful because they provide information about the state output by the ideal circuit and the matrix representation of the circuit. However, a real experiment terminates by *measuring* each qubit (usually in the computational :math:`|0\\rangle, |1\\rangle` basis). Without measurement, we cannot gain information about the state. Measurements cause the quantum system to collapse into classical bits."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:493
msgid "For example, suppose we make independent measurements on each qubit of the three-qubit GHZ state"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:495
msgid "|\\psi\\rangle = (|000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:497
msgid "and let :math:`xyz` denote the bitstring that results. Recall that, under the qubit labeling used by Qiskit, :math:`x` would correspond to the outcome on qubit 2, :math:`y` to the outcome on qubit 1, and :math:`z` to the outcome on qubit 0."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:503
msgid "Note: This representation of the bitstring puts the most significant bit (MSB) on the left, and the least significant bit (LSB) on the right. This is the standard ordering of binary bitstrings. We order the qubits in the same way (qubit representing the MSB has index 0), which is why Qiskit uses a non-standard tensor product order."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:509
msgid "Recall the probability of obtaining outcome :math:`xyz` is given by"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:511
msgid "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:513
msgid "and as such for the GHZ state probability of obtaining 000 or 111 are both 1/2."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:515
msgid "To simulate a circuit that includes measurement, we need to add measurements to the original circuit above, and use a different Aer backend."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:586
msgid "This circuit adds a classical register, and three measurements that are used to map the outcome of qubits to the classical bits."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:588
msgid "To simulate this circuit, we use the ``qasm_simulator`` in Qiskit Aer. Each run of this circuit will yield either the bitstring 000 or 111. To build up statistics about the distribution of the bitstrings (to, e.g., estimate :math:`\\mathrm{Pr}(000)`), we need to repeat the circuit many times. The number of times the circuit is repeated can be specified in the ``execute`` function, via the ``shots`` keyword."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:629
msgid "Once you have a result object, you can access the counts via the function ``get_counts(circuit)``. This gives you the *aggregated* binary outcomes of the circuit you submitted."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:675
msgid "Approximately 50 percent of the time, the output bitstring is 000. Qiskit also provides a function ``plot_histogram``, which allows you to view the outcomes."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:706
msgid "The estimated outcome probabilities :math:`\\mathrm{Pr}(000)` and :math:`\\mathrm{Pr}(111)` are computed by taking the aggregate counts and dividing by the number of shots (times the circuit was repeated). Try changing the ``shots`` keyword in the ``execute`` function and see how the estimated probabilities change."
msgstr ""

