msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-14 17:20+0000\n"
"PO-Revision-Date: 2022-07-14 17:58\n"
"Last-Translator: \n"
"Language-Team: Thai\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: th\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/contributing_to_qiskit.po\n"
"X-Crowdin-File-ID: 9532\n"
"Language: th_TH\n"

#: ../../contributing_to_qiskit.rst:4
msgid "Contributing to Qiskit"
msgstr "การมีส่วนร่วมกับ Qiskit"

#: ../../contributing_to_qiskit.rst:6
msgid "Qiskit is an open-source project committed to bringing quantum computing to people of all backgrounds. This page describes how you can join the Qiskit community in this goal."
msgstr "Qiskit เป็นโปรเจกต์แบบโอเพ่นซอร์ส ที่มีเป้าหมายให้คนจากหลากหลายกลุ่มได้เข้าถึงการใช้งาน การคำนวณเชิงควอนตัม โดยเนื้อหาในส่วนนี้จะอธิบายถึงวิธีการต่าง ๆ ในการเข้าร่วมชุมชน Qiskit"

#: ../../contributing_to_qiskit.rst:14
msgid "Where Things Are"
msgstr "โปรเจคต่าง ๆ"

#: ../../contributing_to_qiskit.rst:16
msgid "The code for Qiskit is located in the `Qiskit GitHub organization <https://github.com/Qiskit>`__, where you can find the individual projects that make up Qiskit, including"
msgstr "ตัวอย่างการเขียนโค้ดใน Qiskit จะอยู่ใน `Qiskit GitHub Organization <https://github.com/Qiskit>`__, โดยเรามี โปรเจกต์ต่าง ๆ ภายในประกอบภายใน Qiskit ดังนี้"

#: ../../contributing_to_qiskit.rst:19
msgid "`Qiskit Terra <https://github.com/Qiskit/qiskit-terra>`__"
msgstr "`Qiskit Terra <https://github.com/Qiskit/qiskit-terra>`_ <"

#: ../../contributing_to_qiskit.rst:20
msgid "`Qiskit Aer <https://github.com/Qiskit/qiskit-aer>`__"
msgstr "`Qiskit Aer <https://github.com/Qiskit/qiskit-aer>`_"

#: ../../contributing_to_qiskit.rst:21
msgid "`Qiskit IBMQ Provider <https://github.com/Qiskit/qiskit-ibmq-provider>`__"
msgstr "`Qiskit IBM Q Provider <https://github.com/Qiskit/qiskit-ibmq-provider>`_ _"

#: ../../contributing_to_qiskit.rst:22
msgid "`Qiskit Tutorials <https://github.com/Qiskit/qiskit-tutorials>`__"
msgstr "`Qiskit Tutorials <https://github.com/Qiskit/qiskit-tutorials>`_ _ _"

#: ../../contributing_to_qiskit.rst:23
msgid "`Qiskit API Documentation <https://github.com/Qiskit/qiskit/tree/master/docs>`__"
msgstr "`คู่มือ Qiskit API <https://github.com/Qiskit/qiskit/tree/master/docs>`_ _"

#: ../../contributing_to_qiskit.rst:28
msgid "Getting Started"
msgstr "เริ่มต้นการใช้งาน"

#: ../../contributing_to_qiskit.rst:30
msgid "Learn how members of the Qiskit community"
msgstr "วิธีการมีส่วนร่วมในโปรเจกต์ของ Qiskit"

#: ../../contributing_to_qiskit.rst:32
msgid "`Relate to one another <https://github.com/Qiskit/qiskit/blob/master/CODE_OF_CONDUCT.md>`__"
msgstr "การปฏิบัติต่อสมาชิกคนอื่นๆ <https://github.com/Qiskit/qiskit/blob/master/CODE_OF_CONDUCT.md>`__"

#: ../../contributing_to_qiskit.rst:33
msgid "`Discuss ideas <https://qiskit.slack.com/>`__"
msgstr "`แลกเปลี่ยนความรู้ <https://qiskit.slack.com/>`__"

#: ../../contributing_to_qiskit.rst:34
msgid "`Get help when we're stuck <https://quantumcomputing.stackexchange.com/questions/tagged/qiskit>`__"
msgstr "`ขอความช่วยเหลือเวลาที่ติดปัญหา <https://quantumcomputing.stackexchange.com/questions/tagged/qiskit>`__"

#: ../../contributing_to_qiskit.rst:35
msgid "`Stay informed of news in the community <https://medium.com/qiskit>`__"
msgstr "`ติดตามข่าวสารใหม่ ๆ ของชุมชน <https://medium.com/qiskit>`__"

#: ../../contributing_to_qiskit.rst:36
msgid "`Keep a consistent style <https://www.python.org/dev/peps/pep-0008>`__"
msgstr "`รักษารูปแบบการเขียนโค้ด <https://www.python.org/dev/peps/pep-0008>`__"

#: ../../contributing_to_qiskit.rst:37
msgid ":ref:`Build Qiskit packages from source <install_install_from_source_label>`"
msgstr ":ref:`สร้างแพ็กเกจ Qiskit จาก ต้นฉบับ <install_install_from_source_label>`"

#: ../../contributing_to_qiskit.rst:43
msgid "Reporting Bugs and Requesting Enhancements"
msgstr "การรายงานข้อผิดพลาดและการแจ้งปรับปรุงแก้ไข"

#: ../../contributing_to_qiskit.rst:45
msgid "When you encounter a problem, please open an issue in the appropriate element's issue tracker:"
msgstr "หากคุณพบปัญหาในการใช้งาน คุณสามารถแจ้งปัญหาได้ตามหมวดต่าง ๆ :"

#: ../../contributing_to_qiskit.rst:50 ../../contributing_to_qiskit.rst:137
msgid "Element"
msgstr "หมวดหมู่"

#: ../../contributing_to_qiskit.rst:50
msgid "Issue Tracker"
msgstr "ติดตามปัญหา"

#: ../../contributing_to_qiskit.rst:52 ../../contributing_to_qiskit.rst:139
msgid "qiskit-terra"
msgstr "qiskit-terra"

#: ../../contributing_to_qiskit.rst:52
msgid "https://github.com/Qiskit/qiskit-terra/issues"
msgstr "https://github.com/Qiskit/qiskit-terra/issues"

#: ../../contributing_to_qiskit.rst:53 ../../contributing_to_qiskit.rst:140
msgid "qiskit-aer"
msgstr "qiskit-aer"

#: ../../contributing_to_qiskit.rst:53
msgid "https://github.com/Qiskit/qiskit-aer/issues"
msgstr "https://github.com/Qiskit/qiskit-aer/issues"

#: ../../contributing_to_qiskit.rst:54 ../../contributing_to_qiskit.rst:141
msgid "Docs or Qiskit Meta-package"
msgstr "เอกสาร หรือ Qiskit Meta-package"

#: ../../contributing_to_qiskit.rst:54
msgid "https://github.com/Qiskit/qiskit/issues"
msgstr "https://github.com/Qiskit/qiskit/issues"

#: ../../contributing_to_qiskit.rst:57
msgid "If you have an idea for a new feature, please open an **Enhancement** issue in the appropriate element's issue tracker. Opening an issue starts a discussion with the team about your idea, how it fits in with the project, how it can be implemented, etc."
msgstr "ถ้าคุณอยากเสนอคุณสมบัติใหม่ คุณสามารถเสนอประเด็นในการปรับปรุง * *Enhancement * * ตามหมาวดต่างๆที่เหมาะสมได้ ซึ่งการเสนอประเด็นต่างๆ จะทำให้เกิดการเริ่มพูดคุยเกี่ยวกับแนวคิดใหม่กับคนอื่นในทีม และสามารถพิจารณาได้ว่าเหมาะสมกับโครงการหรือไม่ หรือจะนำมาใช้งานได้อย่างไร ฯลฯ"

#: ../../contributing_to_qiskit.rst:65
msgid "Contributing Code"
msgstr "มีส่วนร่วมในการพัฒนาโค้ด"

#: ../../contributing_to_qiskit.rst:70
msgid "Style Guide"
msgstr "คู่มือการออกแบบ"

#: ../../contributing_to_qiskit.rst:72
msgid "To enforce a consistent code style in the project, we use `Pylint <https://www.pylint.org>`__ and `pycodestyle <https://pycodestyle.readthedocs.io/en/latest/>`__ to verify that code contributions conform to and respect the project's style guide. To verify that your changes conform to the style guide, run: ``tox -elint``"
msgstr "เพื่อให้ในโปรเจกต์มีลักษณะของการเขียนโค้ดที่สม่ำเสมอ เราจึงใช้ `Pylint <https://www.pylint.org>`__ และ `pycodestyle <https://pycodestyle.readthedocs.io/en/latest/>`__ สำหรับการตรวจสอบว่าโค้ดนั้นมีความสอดคล้อง และ เป็นไปตามคู่มือการออกแบบของโครงการหรือไม่ สำหรับการตรวจสอบว่าโค้ดเป็นไปตามคู่มือการออกแบบหรือไม่ ทำได้โดยการใช้คำสั่ง: ``tox -elint``"

#: ../../contributing_to_qiskit.rst:81
msgid "Contributor License Agreement"
msgstr "Contributor License Agreement"

#: ../../contributing_to_qiskit.rst:83
msgid "Before you can submit any code, all contributors must sign a contributor license agreement (CLA). By signing a CLA, you're attesting that you are the author of the contribution, and that you're freely contributing it under the terms of the Apache-2.0 license."
msgstr "ก่อนที่จะส่งมอบโค้ด ผู้มีส่วนร่วมทุกคนต้องเซ็น Contributor License Agreement (CLA) การเซ็น CLA จะเป็นการรับรองว่าคุณเป็นเจ้าของโค้ด และ ได้มีส่วนร่วมกับโครงการภายใต้ Apache-2.0 license"

#: ../../contributing_to_qiskit.rst:88
msgid "When you contribute to the Qiskit project with a new pull request, a bot will evaluate whether you have signed the CLA. If required, the bot will comment on the pull request, including a link to accept the agreement. The `individual CLA <https://qiskit.org/license/qiskit-cla.pdf>`__ document is available for review as a PDF."
msgstr "เมื่อคุณมีส่วนร่วมกับโปรเจกต์ต่าง ๆ ของ Qiskit ด้วยการส่ง Pull Request บอทจะทำการตรวจสอบว่าคุณได้เซ็น CLA ไว้หรือไม่ หากคุณยังไม่ได้เซ็น CLA บอทจะแจ้งรายละเอียดใน Pull Request พร้อมลิงค์สำหรับยอมรับข้อตกลง โดยเอกสาร `CLA รายบุคคล <https://qiskit.org/license/qiskit-cla.pdf>`__ มีให้ตรวจทานในลักษณะ PDF"

#: ../../contributing_to_qiskit.rst:95
msgid "If your contribution is part of your employment or your contribution is the property of your employer, then you will more than likely need to sign a `corporate CLA <https://qiskit.org/license/qiskit-corporate-cla.pdf>`__ too and email it to us at <qiskit@us.ibm.com>."
msgstr "ถ้าคุณมาเข้าร่วมโปรเจกต์นี้ในลักษณะการจ้างงาน หรือ การมีส่วนร่วมของคุณนั้นเป็นทรัพย์สินของผู้จ้าง คุณจะต้องเซ็น `CLA ระดับองค์กร <https://qiskit.org/license/qiskit-corporate-cla.pdf>`__ แทน และ ส่งอีเมลให้พวกเราที่ <qiskit@us.ibm.com>"

#: ../../contributing_to_qiskit.rst:103 ../../contributing_to_qiskit.rst:137
msgid "Pull Requests"
msgstr "Pull Request"

#: ../../contributing_to_qiskit.rst:105
msgid "We use `GitHub pull requests <https://help.github.com/articles/about-pull-requests>`__ to accept contributions."
msgstr "เราใช้ `GitHub Pull Request <https://help.github.com/articles/about-pull-requests>`__ ในการยอมรับการเข้าร่วม"

#: ../../contributing_to_qiskit.rst:109
msgid "While not required, opening a new issue about the bug you're fixing or the feature you're working on before you open a pull request is an important step in starting a discussion with the community about your work. The issue gives us a place to talk about the idea and how we can work together to implement it in the code. It also lets the community know what you're working on, and if you need help, you can reference the issue when discussing it with other community and team members."
msgstr "การเปิด Issue ใหม่เกี่ยวกับเรื่องของบั๊กที่คุณกำลังแก้ไข หรือ คุณสมบัติใหม่ ๆ ที่คุณกำลังสร้างมันขึ้นมาก่อนที่จะเปิด Pull Request นั้นเป็นขั้นตอนที่สำคัญในการเริ่มต้นการสนทนาระหว่างคุณ และ สมาชิกในชุมชนเกี่ยวกับสิ่งที่คุณกำลังทำ Issue เป็นสถานที่ ที่ใช้พูดคุยเกี่ยวกับแนวคิด และ วิธีการที่จะนำงานของเราไปรวมในโค้ด นอกจากนี้ยังทำให้ชุมชนรู้ว่าคุณกำลังทำอะไร และ คุณสามารถใช้ในการสอบถาม โดยการอ้างอิงเนื้อหาที่สอบถามไปกับ Issue ที่เกี่ยวข้อง"

#: ../../contributing_to_qiskit.rst:117
msgid "If you've written some code but need help finishing it, want to get initial feedback on it prior to finishing it, or want to share it and discuss prior to finishing the implementation, you can open a *Work in Progress* pull request. When you create the pull request, prepend the title with the **\\[WIP\\]** tag (for Work In Progress). This will indicate to reviewers that the code in the PR isn't in its final state and will change. It also means that we will not merge the commit until it is finished. You or a reviewer can remove the [WIP] tag when the code is ready to be fully reviewed for merging."
msgstr "ถ้าคุณได้เขียนโค้ด และ ต้องการความช่วยเหลือ ต้องการข้อเสนอแนะ ต้องการแบ่งปัน หรือ ถกเถียงเกี่ยวกับโค้ดก่อนที่จะนำไปทำงานจริง คุณสามารถเปิด *Work In Progress* Pull Request โดยให้คุณสร้าง Pull Request ที่มีหัวข้อเป็นแท็ก **\\[WIP\\]** (สำหรับ Work In Progress) สิ่งนี้จะระบุให้ผู้ตรวจทานรู้ว่าโค้ดใน PR นั้น ยังไม่ใช่โค้ดที่สมบูรณ์ และ อาจจะมีการเปลี่ยนแปลง นอกจากนี้ยังมีความหมายว่า เราจะไม่รวม Commit นั้นเข้าจนกว่าจะเสร็จสมบูรณ์ คุณ หรือ ผู้ตรวจทานสามารถลบแท็ก [WIP] ออกเมื่อโค้ดเสร็จสมบูรณ์ พร้อมที่จะรวม"

#: ../../contributing_to_qiskit.rst:129
msgid "Code Review"
msgstr "การตรวจทานโค้ด"

#: ../../contributing_to_qiskit.rst:131
msgid "Code review is done in the open and is open to anyone. While only maintainers have access to merge commits, community feedback on pull requests is extremely valuable. It is also a good mechanism to learn about the code base. You can view a list of all open pull requests here:"
msgstr "การตรวจทานโค้ดสามารถทำได้โดยทุก ๆ คน แต่จะมีเพียงผู้ดูแล ที่สามารถการรวม Commit ได้ ข้อเสนอแนะของชุมชนบน Pull Request นั้นมีค่าอย่างมาก และ ยังเป็นกลไกที่ดีในการเรียนรู้เกี่ยวกับ Codebase คุณสามารถดูรายการของ Pull Request ที่เปิดทั้งหมดได้ที่:"

#: ../../contributing_to_qiskit.rst:139
msgid "https://github.com/Qiskit/qiskit-terra/pulls"
msgstr "https://github.com/Qiskit/qiskit-terra/pulls"

#: ../../contributing_to_qiskit.rst:140
msgid "https://github.com/Qiskit/qiskit-aer/pulls"
msgstr "https://github.com/Qiskit/qiskit-aer/pulls"

#: ../../contributing_to_qiskit.rst:141
msgid "https://github.com/Qiskit/qiskit/pulls"
msgstr "https://github.com/Qiskit/qiskit/pulls"

#: ../../contributing_to_qiskit.rst:148
msgid "Commit Messages"
msgstr "Commit Message"

#: ../../contributing_to_qiskit.rst:150
msgid "The content of the commit message describing a change is just as important as the change itself. The commit message provides the context for not only code review but also the change history in the git log. A detailed commit message will make it easier for your code to be reviewed, and will also provide context to the change when someone looks at it in the future. When writing a commit message, remember these important details:"
msgstr "เนื้อหาของ Commit Message เป็นการอธิบายถึงสิ่งที่เปลี่ยนแปลงซึ่งเป็นสิ่งที่สำคัญ Commit Message ทำให้เราทราบบริบท ไม่ใช่แค่สำหรับการตรวจทานโค้ดเท่านั้น ยังเป็นประวิติที่เก็บไว้ใน Git Log อีกด้วย โดยรายละเอียดของ Commit Message จะทำให้การตรวจทานโค้ดทำได้ง่ายขึ้น และ ยังบอกบริบทของการเปลี่ยนแปลง ให้ผู้อื่นสามารถเข้าใจได้ในอนาคต เมื่อเขียน Commit Message พึงระลึกถึงรายละเอียดที่สำคัญดังนี้:"

#: ../../contributing_to_qiskit.rst:163
msgid "Do not assume the reviewer understands what the original problem was."
msgstr "ไม่คิดไปเองว่าผู้ตรวจทานจะเข้าใจจุดเริ่มต้นของปัญหา"

#: ../../contributing_to_qiskit.rst:158
msgid "When reading an issue, after a number of back & forth comments, it is often clear what the root cause problem is. The commit message should have a clear statement as to what the original problem is. The bug is merely interesting for historical background on *how* the problem was identified. It should be possible to review a proposed patch for correctness from the commit message, without needing to read the bug ticket."
msgstr "เมื่ออ่าน Issue หลังจากที่แสดงความคิดเห็นคุยกันจนพบตันตอของปัญหาแล้ว Commit Message ควรที่จะมีคำอธิบายถึงต้นตอขอบปัญหาด้วย บั๊กนั้นเป็นสิ่งที่ถูกสนใจในลักษณะของ ประวัติของปัญหาที่พบ มันควรจะสามารถตรวจสอบวิธีที่เราแก้ไขได้ด้วย เพื่อให้เราสามารถตรวจสอบความถูกต้องจาก Commit Message โดยที่ไม่ต้องอ่านรายละเอียดภายในบั๊ก"

#: ../../contributing_to_qiskit.rst:168
msgid "Do not assume the code is self-evident/self-documenting."
msgstr "ไม่คิดไปเองว่าโค้ดนั้นอ่านเข้าใจ ชัดเจนในตัวมันเองอยู่แล้ว"

#: ../../contributing_to_qiskit.rst:166
msgid "What is self-evident to one person, might not be clear to another person. Always document what the original problem was and how it is being fixed, for any change except the most obvious typos, or whitespace-only commits."
msgstr "การที่สิ่งหนึ่งมีความชัดเจนในตัวมันเองสำหรับคน ๆ หนึ่ง ไม่ได้แปลว่าชัดเจนสำหรับคนอื่น ดังนั้นจำเป็นต้องเขียนคำอธิบายไว้ในทุก ๆ การแก้ไขว่าต้นตอของปัญหาคืออะไร และ มันถูกแก้ไขอย่างไร ยกเว้นการแก้ไขคำผิดที่ชัดเจน หรือ การแก้ไข Whitespace"

#: ../../contributing_to_qiskit.rst:174
msgid "Describe why a change is being made."
msgstr "อธิบายว่าทำไมถึงมีการเปลี่ยนแปลงนี้"

#: ../../contributing_to_qiskit.rst:171
msgid "A common mistake is only to document how the code has been written, without describing *why* the developer chose to do it that way. Certainly, you should describe the overall code structure, particularly for large changes, but more importantly, be sure to describe the intent/motivation behind the changes."
msgstr "ข้อผิดพลาดที่มักจะเกิดขึ้นคือการเขียนโค้ดโดยที่ไม่อธิบายว่า *ทำไม* ผู้สร้างถึงเลือกที่จะทำในลักษณะนี้ สิ่งที่สำคัญคือ คุณควรอธิบายโครงสร้างโค้ดทั้งหมดโดยเฉพาะในกรณีที่เป็นการเปลี่ยนแปลงขนาดใหญ่ แต่สิ่งที่สำคัญกว่านั้นคือ อย่าลืมที่จะอธิบายเหตุผลของการเปลี่ยนแปลง"

#: ../../contributing_to_qiskit.rst:179
msgid "Read the commit message to see if it hints at improved code structure."
msgstr "อ่าน Commit Message เพื่อดูว่ามีคำใบ้อะไรให้เราสามารถนำมาเพิ่มคุณภาพของโครงสร้างโค้ดได้"

#: ../../contributing_to_qiskit.rst:177
msgid "Often when describing a large commit message, it becomes obvious that a commit should have been split into two or more parts. Don't be afraid to go back and rebase the change to split it up into separate pull requests."
msgstr "เวลาอธิบาย Commit Message ขนาดใหญ่มันจะง่ายกว่าถ้าเราแบ่ง Commit Message ออกมาเป็น 2 ส่วน อย่ากังวลที่จะย้อนกลับไป Rebase การเปลี่ยนแปลง เพื่อแบ่ง Pull Request ออกเป็นหลายส่วน"

#: ../../contributing_to_qiskit.rst:186
msgid "Ensure sufficient information to decide whether to review."
msgstr "ทำให้มั่นใจว่ามีข้อมูลเพียงพอสำหรับการตรวจสอบ"

#: ../../contributing_to_qiskit.rst:182
msgid "When GitHub sends out email alerts for new pull request submissions, there is minimal information included - usually just the commit message and the list of files changes. Because of the high volume of patches, a commit message must contain sufficient information for potential reviewers to find the patch that they need to review."
msgstr "เมื่อ GitHub ส่ง อีเมลแจ้งเตือนสำหรับ Pull Request ใหม่ ในอีเมลนั้นจะมีข้อมูลเล็กน้อย เช่น โดยทั่วไปจะมี Commit Message และ รายการไฟล์ที่เปลี่ยนแปลงไป เนื่องจากมี Patch จำนวนมาก Commit Message จึงต้องมีปริมาณของข้อมูลมากพอสำหรับผู้ตรวจทานเพื่อ ค้นหา Patch ที่เขาต้องการตรวจสอบ"

#: ../../contributing_to_qiskit.rst:197
msgid "The first commit line is the most important."
msgstr "บรรทัดแรกของ Commit Message นั้นสำคัญที่สุด"

#: ../../contributing_to_qiskit.rst:189
msgid "In Git commits, the first line of the commit message has special significance. It is used as the default pull request title, email notification subject line, git annotate messages, gitk viewer annotations, merge commit messages, and many more places where space is at a premium. As well as summarizing the change itself, it should take care to detail what part of the code is affected."
msgstr "ใน Git Commit บรรทัดแรกของ Commit Message มีความสำคัญเป็นพิเศษเนื่องจาก มันคือค่าเริ่มต้นของหัวข้อ Pull Request, หัวข้อของอีเมลแจ้งเตือน, Git Annotate Message, Gitk Viewer, Merge Commit Message, และ อีกหลาย ๆ ที่ รวมถึงเป็นสรุปของการเปลี่ยนแปลงในตัวมันเองอีกด้วย ดังนั้นเราควรให้ความใส่ใจว่าโค้ดส่วนไหนบ้างที่ได้รับผลกระทบ"

#: ../../contributing_to_qiskit.rst:195
msgid "In addition, the first line of the commit message becomes an entry in the generated changelog if the PR is tagged as being included in the changelog. It is critically important that you write clear and succinct summary lines."
msgstr "นอกจากนี้ บรรทัดแรกของ Commit Message กลายเป็นข้อมูลใน Changelog เมื่อ PR ถูกแท็ก ดังนั้นมันจำเป็นอย่างมากที่จะเขียนสรุปให้ชัดเจน และ รวบรัด"

#: ../../contributing_to_qiskit.rst:203
msgid "Describe any limitations of the current code."
msgstr "อธิบายข้อจำกัดของโค้ดปัจจุบัน"

#: ../../contributing_to_qiskit.rst:200
msgid "If the code being changed still has future scope for improvements, or any known limitations, mention these in the commit message. This demonstrates to the reviewer that the broader picture has been considered, and what tradeoffs have been done in terms of short-term goals versus long-term wishes."
msgstr "ถ้าโค้ดที่ถูกเปลี่ยนแปลง ยังคงมีสิ่งที่สามารถพัฒนาได้ หรือ มีข้อจำกัดที่เกิดขึ้น ให้พูดถึงสิ่งเหล่านี้ใน Commit Message เพื่อแสดงให้ผู้ตรวจทานเห็นภาพกว้างของสิ่งที่ควรใส่ใจ และ อะไรคือ Trade-Off ที่เกิดขึ้น ในแง่ของเป้าหมายระยะสั้น เทียบกับ เป้าหมายระยะยาว"

#: ../../contributing_to_qiskit.rst:211
msgid "Include references to issues."
msgstr "เพิ่มเติมอ้างอิงไว้ใน Issue"

#: ../../contributing_to_qiskit.rst:206
msgid "If the commit fixes are related to an issue, make sure you annotate that in the commit message. Use the syntax::"
msgstr "ถ้าเป็น Commit สำหรับการแก้ไข เกี่ยวข้องกับ Issue หนึ่ง ให้เขียนในคำอธิบายของ Commit Message ด้วยไวยากรณ์ดังนี้::"

#: ../../contributing_to_qiskit.rst:211
msgid "if it fixes the issue (GitHub will close the issue when the PR merges)."
msgstr "ถ้าเป็นการแก้ไข Issue (GitHub จะปิด Issue เมื่อรวม PR)"

#: ../../contributing_to_qiskit.rst:213
msgid "The main rule to follow is:"
msgstr "ข้อบังคับหลักคือ:"

#: ../../contributing_to_qiskit.rst:215
msgid "The commit message must contain all the information required to fully understand and review the patch for correctness. Less is not more."
msgstr "Commit Message ต้องประกอบไปด้วยข้อมูลทั้งหมดที่จำเป็นสำหรับการทำความเข้าใจ และ ตรวจทานความถูกต้องของ Patch"

#: ../../contributing_to_qiskit.rst:221
msgid "Documenting Your Code"
msgstr "การเขียนคำอธิบายโค้ด"

#: ../../contributing_to_qiskit.rst:223
msgid "If you make a change to an element, make sure you update the associated *docstrings* and parts of the documentation under ``docs/apidocs`` in the corresponding repo. To locally build the element-specific documentation, run ``tox -edocs`` to compile and build the documentation locally and save the output to ``docs/_build/html``. Additionally, the Docs CI job on azure pipelines will run this and host a zip file of the output that you can download and view locally."
msgstr "ถ้าคุณทำการเปลี่ยนแปลงโค้ดส่วนใด ให้ยืนยันให้มั่นใจว่าคุณได้อัปเดต *Docstring* ที่เกี่ยวข้อง และ อัปเดตเอกสาร ``docs/apidocs`` ในที่เก็บข้อมูลที่ตรงกัน ในการสร้างเฉพาะบางส่วนในเอกสารแบบ Local ให้ใช้คำสั่ง ``tox -edocs`` สำหรับการ Compile และ สร้างเอกสารแบบ Local และ บันทึกผลลัพธ์ไว้ใน ``docs/_build/html`` นอกจากนี้ Docs CI Job บน Azure Pipeline จะทำงาน และ Host ไฟล์ Zip ของผลลัพธ์ไว้ โดยคุณสามารถดาวน์โหลด และ ดูแบบ Local ได้"

#: ../../contributing_to_qiskit.rst:231
msgid "If you have an issue with the `combined documentation <https://qiskit.org/documentation/>`__ that is maintained in the `Qiskit/qiskit repo <https://github.com/Qiskit/qiskit>`__, you can open a `documentation issue <https://github.com/Qiskit/qiskit/issues/new/choose>`__ if you see doc bugs, have a new feature that needs to be documented, or think that material could be added to the existing docs."
msgstr "ถ้าคุณมีปัญหากับ `เอกสารที่ถูกรวมเข้าแล้ว <https://qiskit.org/documentation/>`__ \n"
"ที่อยู่ใน `Qiskit/qiskit Repo <https://github.com/Qiskit/qiskit>`__ คุณสามารถเปิด `Issue เอกสาร <https://github.com/Qiskit/qiskit/issues/new/choose>`__ ถ้าคุณเจอบั๊กในเอกสาร การเพิ่มคุณสมบัติใหม่จำเป็นต้องมีการเขียนรายละเอียด หรือ หาวิธีเพิ่มเนื้อหาเข้าไปในเอกสารเดิม"

#: ../../contributing_to_qiskit.rst:240
msgid "Good First Contributions"
msgstr "การมีส่วนร่วมครั้งแรก"

#: ../../contributing_to_qiskit.rst:242
msgid "If you would like to contribute to Qiskit, but aren't sure where to get started, the ``good first issue`` label on issues for a project highlights items appropriate for people new to the project. These are all issues that have been reviewed and tagged by contributors as something a new contributor should be able to work on. In other words, intimate familiarity with Qiskit is not a requirement to develop a fix for the issue."
msgstr "ถ้าคุณต้องการมีส่วนร่วมกับ Qiskit แต่ยังไม่แน่ใจว่าจะเริ่มอย่างไร ``good first issue`` เป็นแท็กบน Issue สำหรับผู้ที่เพิ่งจะเคยมีส่วนร่วมกับโปรเจกต์ โดยผู้มาใหม่สามารถดู Issue ในแท็กนี้ไว้เป็นตัวอย่างงานที่เหมาะกับผู้เริ่มต้น หรือ อีกนัยหนึ่งคือเราไม่จำเป็นต้องเชี่ยวชาญใน Qiskit ก็สามารถมีส่วนร่วมแก้ไขปัญหาใน Qiskit ได้"

#: ../../contributing_to_qiskit.rst:253
msgid "Deprecation Policy"
msgstr "นโยบายสำหรับการยกเลิกการให้บริการ"

#: ../../contributing_to_qiskit.rst:255
msgid "Qiskit users need to know if a feature or an API they rely upon will continue to be supported by the software tomorrow. Knowing under which conditions the project can remove (or change in a backwards-incompatible manner) a feature or API is important to the user. To manage expectations, the following policy is how API and feature deprecation/removal is handled by Qiskit:"
msgstr "ผู้ใช้งาน Qiskit จำเป็นต้องรู้ว่า คุณสมบัติ หรือ API ที่พวกเขาใช้งานอยู่นั้นจะได้รับการสนับสนุนต่อไปหรือไม่ การทำความเข้าใจว่าโปรเจกต์จะนำ คุณสมบัติ หรือ API ออกเมื่อไร (หรือ การเปลี่ยนแปลงในลักษณะ Backwards-incompatible) เป็นสิ่งที่สำคัญสำหรับผู้ใช้งาน เพื่อให้ผลลัพธ์เป็นไปตามที่เราคาดหวัง Qiskit มีวิธีการจัดการกับการยกเลิก หรือ นำ API และ คุณสมบัติออก ดังนี้:"

#: ../../contributing_to_qiskit.rst:261
msgid "1. Features, APIs, or configuration options are marked deprecated in the code. Appropriate ``DeprecationWarning`` class warnings will be sent to the user. The deprecated code will be frozen and receive only minimal maintenance (just so that it continues to work as-is)."
msgstr "1. คุณสมบัติ, API, หรือ ตัวเลือกการตั้งค่า จะถูกทำเครื่องหมายเลิกใช้ในโค้ด และ หมวดของการแจ้งเตือน ``DeprecationWarning`` ที่เหมาะสมจะถูกส่งไปให้ผู้ใช้งาน โค้ดที่ถูกยกเลิกจะถูกแช่แข็ง และ มีการดูแลเพียงเล็กน้อยเท่านั้น (เพื่อให้สามารถทำงานได้ปกติเท่านั้น)"

#: ../../contributing_to_qiskit.rst:266
msgid "2. A migration path will be documented for current users of the feature. This will be outlined in the both the release notes adding the deprecation, and the release notes removing the feature at the completion of the deprecation cycle. If feasible, the warning message will also include the migration path. A migration path might be \"stop using that feature\", but in such cases it is necessary to first judge how widely used and/or important the feature is to users, in order to determine a reasonable obsolescence date."
msgstr "2. Path ที่จะโอนย้ายจะถูกจดบันทึกไว้ให้สำหรับผู้ใช้งานปัจจุบัน สิ่งนี้จะกลายเป็นรายการของการเปลี่ยนแปลงทั้งใน โน้ตประกาศ สำหรับเพิ่มการยกเลิกสนับสนุน และ โน้ตประกาศ สำหรับการนำคุณสมบัติออกเมื่อครบกำหนดการยกเลิกสนับสนุน ถ้าเป็นไปได้ ข้อความแจ้งเตือนจะบอก Path ที่โอนย้ายด้วย การโอนย้าย Path อาจจะหมายถึง \"หยุดการใช้งานคุณสมบัตินั้น\" แต่ในบางกรณีจำเป็นต้องลองคำนึงว่าคุณสมบัตินั้นมีความนิยม และ ความสำคัญในผู้ใช้งานมากแค่ไหน ก่อนที่จะให้เหตุผลที่เหมาะสมกับการกำหนดวันหมดอายุของคุณสมบัติ"

#: ../../contributing_to_qiskit.rst:274
msgid "2a. The migration path must have existed in a least a prior release before the new feature can be deprecated. For example, if you have a function ``foo()`` which is going to be replaced with ``bar()`` you can't deprecate the ``foo()`` function in the same release that introduces ``bar()``. The ``bar()`` function needs to be available in a release prior to the deprecation of ``foo()``. This is necessary to enable downstream consumers of Qiskit that maintain their own libraries to write code that works with > 1 release at a time, which is important for the entire ecosystem. If you would like to indicate that a deprecation will be coming in a future release you can use the ``PendingDeprecationWarning``  warning to signal this. But, the deprecation period only begins after a ``DeprecationWarning`` is being emitted."
msgstr "2a. จะต้องมี Path สำหรับโอนย้ายอยู่อย่างน้อยก่อนการประกาศ ในเรื่องที่คุณสมบัติจะถูกยกเลิก ตัวอย่างเช่น ถ้าคุณมีฟังก์ชัน ``foo()`` ซึ่งจะถูกแทนที่ด้วย ``bar()`` คุณไม่สามารถยกเลิกฟังก์ชัน ``foo()`` ในประกาศเดียวกับการประกาศเรื่องฟังก์ชัน ``bar()`` ได้ ฟังก์ชัน ``bar()`` จำเป็นต้องสามารถใช้งานได้ก่อนการยกเลิกฟังก์ชัน ``foo()`` สิ่งนี้จำเป็นสำหรับผู้ใช้งาน Downstream ของ Qiskit เพื่อให้สามารถดูแลไลบรารีให้โค้ดสามารถทำงานได้ > 1 จำนวนประกาศ ซึ่งสำคัญต่อทั้งระบบ ถ้าคุณต้องการจะระบุว่า การยกเลิกจะเกิดขึ้นในการประกาศในอนาคต คุณสามารถใช้ ``PendingDeprecationWarning`` แจ้งเตือนเพื่อนบอกเหตุนี้ได้ แต่ช่วงเวลาการยกเลิกจะเริ่มก็ต่อเมื่อมีการแจ้งเตือน ``DeprecationWarning``"

#: ../../contributing_to_qiskit.rst:286
msgid "3. An obsolescence date for the feature will be set. The feature must remain intact and working (although with the proper warning being emitted) in all releases pushed until after that obsolescence date. At the very minimum, the feature (or API, or configuration option) should be marked as deprecated (and continue to be supported) for at least three months of linear time from the release date of the first release to include the deprecation warning. For example, if a feature were deprecated in the 0.9.0 release of Terra, which was released on August 22, 2019, then that feature should still appear in all releases until at least November 22, 2019."
msgstr "3. ในตอนที่วันหมดอายุสำหรับคุณสมบัติกำลังจะถูกตั้งค่า คุณสมบัตินั้น ๆ จะต้องยังคงสามารถใช้งานได้ปกติ (แม้ว่าจะมีการแจ้งเตือนเกิดขึ้น) ในทุก ๆ ประกาศจนกว่าจะถึงวันหมดอายุ อย่างน้อยที่สุด คุณสมบัตินั้น (หรือ API หรือ ตัวเลือกการตั้งค่า) ควรที่จะมีสัญลักษณ์บอกว่าถูกยกเลิก (และ สนับสนุนการทำงานต่อไป) อย่าน้อย 3 เดือนต่อเนื่องจากวันที่เริ่มประกาศยกเลิกการใช้งาน ตัวอย่างเช่น ถ้าคุณสมบัตินั้นจะถูกยกเลิกในประกาศ 0.9.0 ของ Terra ซึ่งเคยถูกประกาศไว้เมื่อ 22 สิงหาคม 2019 หมายความว่าคุณสมบัตินั้นควรที่จะยังปรากฏอยู่ในทุก ๆ ประกาศจนถึงอย่างน้อย 22 พฤษจิกายน 2019"

#: ../../contributing_to_qiskit.rst:296
msgid "Note that this delay is a minimum. For significant features, it is recommended that the deprecated feature appears for at least double that time. Also, per the stable branch policy, deprecation removals can only occur during minor version releases; they are not appropriate for backporting."
msgstr "หมายเหตุ เวลาที่กล่าวถึงนั้นเป็นขั้นต่ำ ถ้าเป็นคุณสมบัติที่สำคัญ เวลาล่าช้านั้นอาจจะมีมากขึ้นอย่างน้อยสองเท่า และ จาก นโยบาย Stable Branch การนำการยกเลิกออกสามารถเกิดขึ้นได้ในการปล่อยเวอร์ชันรองเท่านั้น ซึ่งไม่เหมาะสำหรับการ Backport"

#: ../../contributing_to_qiskit.rst:301
msgid "3a. A deprecated feature can not be removed unless it is deprecated in more than one release even if the minimum deprecation period has elapsed. For example, if a feature is deprecated in 0.20.0 which is released on January 20, 2022 and the next minor version release 0.21.0 is released on June 16, 2022 the deprecated feature can't be removed until the 0.22.0 release, even though 0.21.0 was more than three months after the 0.20.0 release. This is important because the point of the deprecation warnings are to inform users that a potentially breaking API change is coming and to give them a chance to adapt their code. However, many users skip versions (especially if there are a large numbers of changes in each release) and don't upgrade to every release, so might miss the warning if it's only present for a single minor version release."
msgstr "3a. คุณสมบัติที่เลิกใช้แล้ว ไม่สามารถจะถูกนำออกไปได้ จนกว่ามันจะถูกยกเลิกไปมากกว่า 1 ประกาศ แม้ว่าจะผ่านไปมากว่าเวลาขั้นต่ำในการยกเลิกแล้วก็ตาม ตัวอย่างเช่น ถ้ามีคุณสมบัติหนึ่งที่จะถูกยกเลิกในประกาศ 0.20.0 ตอน 20 มกราคม 2022 และ ในเวอร์ชันย่อยถัดไป 0.21.0 จะถูกประกาศตอน 16 มิถุนายน 2022 การยกเลิกนั้นจะไม่สามารถเกิดขึ้นได้จนกว่าจะถึง ประกาศที่ 0.22.0 แม้ว่า 0.21.0 จะผ่านมาเกิน 3 เดือนแล้วก็ตามหลังจากประกาศ 0.20.0 สิ่งนี้เป็นสิ่งสำคัญเพราะว่า จุดประสงค์ของการแจ้งเตือนการยกเลิก เพื่อแจ้งให้ผู้ใช้งานทราบว่าอาจจะเกิดการเปลี่ยนแปลงที่ส่งผลกระทบต่อ API ได้ และ ให้โอกาสผู้ใช้งานได้แก้ไขโค้ด อย่างไรก็ตามผู้ใช้งานหลายคน ข้ามเวอร์ชัน (โดยเฉพาะ ถ้ามีจำนวนการเปลี่ยนแปลงมาก ในแต่ละประกาศ) และ ไม่ได้อัพเกรดในทุก ๆ ประกาศ ทำให้อาจจะพลาดการแจ้งเตือนบางอย่างที่มีเฉพาะในประกาศของเวอร์ชันรอง"

#: ../../contributing_to_qiskit.rst:315
msgid "Deprecation Warnings"
msgstr "คำเตือนการยกเลิก"

#: ../../contributing_to_qiskit.rst:317
msgid "The proper way to raise a deprecation warning is to use the ``warn`` function from the `warnings module <https://docs.python.org/3/library/warnings.html>`__ in the Python standard library. The warning category class should be a ``DeprecationWarning``. An example would be::"
msgstr "วิธีที่เหมาะสมกับการแสดงคำเตือนการยกเลิก คือ การใช้ฟังก์ชัน ``warn`` จาก `โมดูล warnings <https://docs.python.org/3/library/warnings.html>`__ ใน Library มาตรฐานของภาษา Python หมวดของการแจ้งเตือนควรจะเป็น ``DeprecationWarning`` ตัวอย่าง::"

#: ../../contributing_to_qiskit.rst:330
msgid "One thing to note here is the ``stack_level`` kwarg on the warn() call. This argument is used to specify which level in the call stack will be used as the line initiating the warning. Typically, ``stack_level`` should be set to 2, as this will show the line calling the context where the warning was raised. In the above example, it would be the caller of ``foo()``. If you did not set this, the warning would show that it was caused by the line in the foo() function, which is not helpful for users trying to determine the origin of a deprecated call. However, this value may be adjusted, depending on the call stack and where ``warn()`` gets called from. For example, if the warning is always raised by a private method that only has one caller, ``stack_level=3`` might be appropriate."
msgstr "สิ่งหนึ่งที่ต้องพึงระลึกไว้คือ ตัวแปร ``stack_level`` ในฟังก์ชัน warn() ตัวแปร kwarg นี้จะถูกใช้เพื่อกำหนดว่า จะใช้การแจ้งเตือนระดับไหนเป็นบรรทัดเริ่มต้นของการแจ้งเตือน โดยทั่วไป ``stack_level`` ควรจะตั้งค่าเป็น 2 เนื่องจากจะเป็นการบอกในบรรทัดแรกของการแจ้งเตือน ถึงส่วนที่ทำให้เกิดการแจ้งเตือนขึ้น จากตัวอย่างด้านบนจะเป็นการแจ้งเตือนตัวผู้เรียกคือ ``foo()`` ถ้าคุณไม่ได้ตั้งค่าเป็น 2 ไว้การแจ้งเตือนจะบอกแค่ว่าเกิดจากบรรทัดหนึ่งในฟังก์ชัน foo() ซึ่งไม่มีประโยชน์สำหรับผู้ใช้งานเพื่อที่จะระบุจุดที่แจ้งเตือนการยกเลิกสักเท่าไร อย่างไรก็ตามค่านี้สามารถปรับแต่ได้ขึ้นอยู่กับว่า ``warn()`` นั้นมาจากจุดไหน ตัวอย่างเช่น ถ้าการแจ้งเตือนนั้นมาจาก Private Method ที่มีแค่ผู้เรียกเดียว เราใช้ ``stack_level=3`` จะเหมาะสมที่สุด"

#: ../../contributing_to_qiskit.rst:346
msgid "Stable Branch Policy"
msgstr "นโยบาย Stable Branch"

#: ../../contributing_to_qiskit.rst:348
msgid "The stable branch is intended to be a safe source of fixes for high-impact bugs and security issues that have been fixed on master since a release. When reviewing a stable branch PR, we must balance the risk of any given patch with the value that it will provide to users of the stable branch. Only a limited class of changes are appropriate for inclusion on the stable branch. A large, risky patch for a major issue might make sense, as might a trivial fix for a fairly obscure error-handling case. A number of factors must be weighed when considering a change:"
msgstr "Stable Branch เป็นความตั้งใจให้เป็นต้นฉบับที่ปลอดภัยสำหรับการแก้ไขบั๊กที่รุนแรง และ ปัญหาด้านความปลอดภัย ตั้งแต่การประกาศแก้ไขใน Master เมื่อทำการตรวจทาน PR ของ Stable Branch เราต้องคำนึงถึงความเสี่ยงระหว่างผลกระทบที่เกิดขึ้นของ Patch นั้น ๆ กับ มูลค่าของสิ่งที่ Stable Branch มีให้กับผู้ใช้งาน มีเพียงแค่บางลักษณะของการเปลี่ยนแปลงเท่านั้นที่อยู่ใน Stable Branch ลักษณะของปัญหาที่ใหญ่, Patch ที่มีความเสี่ยงสูงสำหรับปัญหาใหญ่ เช่นเดียวกับการจัดการกับข้อผิดพลาดที่ไม่ชัดเจน ปัจจัยต่าง ๆ ที่ต้องให้ความสำคัญในการเปลี่ยนแปลงมีดังนี้:"

#: ../../contributing_to_qiskit.rst:358
msgid "The risk of regression: even the tiniest changes carry some risk of breaking something, and we really want to avoid regressions on the stable branch."
msgstr "ความเสี่ยงของการลดประสิทธิภาพ: แม้จะเป็นการเปลี่ยนแปลงที่เล็กที่สุด ก็มีความเสี่ยงที่จะทำให้การทำงานบางส่วนเสียหาย และ เราต้องการหลีกเลี่ยงการลดประสิทธิภาพเหล่านั้นบน Stable Branch"

#: ../../contributing_to_qiskit.rst:361
msgid "The user visibility benefit: are we fixing something that users might actually notice, and if so, how important is it?"
msgstr "ประโยชน์ที่ผู้ใช้งานได้รับ: ในขณะที่เรากำลังแก้ไขบางอย่าง ผู้ใช้งานสามารถสัมผัสผลกระทบได้หรือไม่? ถ้าใช่ผลกระทบนั้นสำคัญแค่ไหน"

#: ../../contributing_to_qiskit.rst:363
msgid "How self-contained the fix is: if it fixes a significant issue but also refactors a lot of code, it's probably worth thinking about what a less risky fix might look like."
msgstr "การแก้ไขนั้นส่งผลกระทบมากแค่ไหน: ถ้าเป็นการแก้ไขปัญหาสำคัญ แต่จำเป็นต้องมีการปรับปรุงโค้ดจำนวนมาก เราอาจจะต้องคิดให้ดีอีกรอบถึงวิธีการแก้ไขที่มีความเสี่ยงต่ำกว่านี้"

#: ../../contributing_to_qiskit.rst:366
msgid "Whether the fix is already on master: a change must be a backport of a change already merged onto master, unless the change simply does not make sense on master."
msgstr "ไม่ว่าการแก้ไขนั้นจะอยู่บน Master แล้วหรือไม่: การเปลี่ยนแปลงจะต้อง Backport สิ่งที่เคยถูกรวมบน Master เว้นแต่ว่าการเปลี่ยนแปลงนั้นไม่สมเหตุสมผลบน Master"

#: ../../contributing_to_qiskit.rst:373
msgid "Backporting procedure:"
msgstr "ขั้นตอนการ Backport:"

#: ../../contributing_to_qiskit.rst:375
msgid "When backporting a patch from master to stable, we want to keep a reference to the change on master. When you create the branch for the stable PR, use::"
msgstr "เมื่อทำการ Backport Patch จาก Master ไปเป็น Stable เราต้องการเก็บแหล่งอ้างอิงสำหรับการเปลี่ยนแปลงนี้ไวบน Master เมื่อคุณสร้าง Branch สำหรับ Stable PR ให้ใช้::"

#: ../../contributing_to_qiskit.rst:381
msgid "However, this only works for small self-contained patches from master. If you need to backport a subset of a larger commit (from a squashed PR, for example) from master, do this manually. In these cases, add::"
msgstr "อย่างไรก็ตามสิ่งนี้ใช้ได้กับ Patch ขนาดเล็กที่ง่ายต่อการดูแลบน Master เท่านั้น ถ้าคุณต้องการ Backport แค่ส่วนหนึ่งของ Commit ขนาดใหญ่ (เช่น PR ที่ถูกบีบเป็นต้น) จาก Master ให้ทำทีละส่วน ในกรณีนี้ เพิ่ม::"

#: ../../contributing_to_qiskit.rst:387
msgid "so that we can track the source of the change subset, even if a strict cherry-pick doesn\\'t make sense."
msgstr "เพื่อให้เราสามารถติดตามต้นกำเนิดของส่วนที่มีการเปลี่ยนแปลงได้ แม้ว่าการเลือก Commit ใน Branch หนึ่งไปใช้กับอีก Branch อาจจะไม่เหมาะสมสักเท่าไร"

#: ../../contributing_to_qiskit.rst:390
msgid "If the patch you're proposing will not cherry-pick cleanly, you can help by resolving the conflicts yourself and proposing the resulting patch. Please keep Conflicts lines in the commit message to help review of the stable patch."
msgstr "ถ้า Patch ที่คุณกำลังนำเสนอจะไม่สามารถนำ Commit ใน Branch หนึ่งไปใช้กับอีก Branch ที่ต้องการได้อย่างเหมาะสม คุณสามารถแก้ไขความขัดแย้งที่เกิดขึ้นด้วยตนเองได้ และ นำเสนอ Patch ที่แก้ไขเรียบร้อย กรุณาระบุข้อมูลส่วนที่เกิดความขัดแย้งไว้ใน Commit Message เพื่อช่วยผู้ตรวจทานสำหรับ Patch ที่เสถียรแล้ว"

#: ../../contributing_to_qiskit.rst:398
msgid "Backport labels"
msgstr "คำกำกับ Backport"

#: ../../contributing_to_qiskit.rst:400
msgid "Bugs or PRs tagged with ``stable backport potential`` are bugs that apply to the stable release too and may be suitable for backporting once a fix lands in master. Once the backport has been proposed, the tag should be removed."
msgstr "บั๊ก หรือ PR ที่มีแท็ก ``stable backport potential`` คือ บั๊กที่มีอยู่ในประกาศที่เสถียรแล้วด้วย และ อาจจะเหมาะสำหรับการทำ Backport เมื่อมีการแก้ไขใน Master เมื่อมีการ Backport แล้ว ควรจะนำแท็กออก"

#: ../../contributing_to_qiskit.rst:405
msgid "Include ``[Stable]`` in the title of the PR against the stable branch, as a sign that setting the target branch as stable was not a mistake. Also, reference to the PR number in master that you are porting."
msgstr "ใส่ ``[Stable]`` ไว้ในหัวข้อของ PR เมื่อเป็น Stable Branch ในลักษณะของสัญลักษณ์ที่ใช้บอกว่าการที่เราใช้ Stable Branch เป็นเป้าหมายไม่ใช้ข้อผิดพลาด และ ให้อ้างอิงถึงจำนวน PR ใน Master ที่เราจะย้ายมาด้วย"

#: ../../contributing_to_qiskit.rst:414
msgid "Contributing to Documentation"
msgstr "การมีส่วนร่วมในเอกสาร"

#: ../../contributing_to_qiskit.rst:416
msgid "Qiskit documentation is shaped by the `docs as code <https://www.writethedocs.org/guide/docs-as-code/>`__ philosophy, primarily drawn from Qiskit code comments in the `style of API documentation <https://alistapart.com/article/the-ten-essentials-for-good-api-documentation/>`__."
msgstr "เอกสารของ Qiskit ถูกทำตามหลักการ`Docs As Code <https://www.writethedocs.org/guide/docs-as-code/>`__ ซึ่งนำคอมเมนต์ในโค้ด Qiskit ที่ได้มากจาก `การออกแบบเอกสาร API <https://alistapart.com/article/the-ten-essentials-for-good-api-documentation/>`__"

#: ../../contributing_to_qiskit.rst:421
msgid "The documentation is built from the master branch of `Qiskit/qiskit/docs <https://github.com/Qiskit/qiskit/tree/master/docs>`__ using `Sphinx <http://www.sphinx-doc.org/en/master/>`__. The majority of documentation, under `API Reference <https://qiskit.org/documentation/apidoc/qiskit.html>`__, is drawn from code comments in the repositories listed in :ref:`where_things_are`."
msgstr "เอกสารนี้ถูกสร้างขึ้นมาจาก Master Branch ของ `Qiskit/qiskit/docs <https://github.com/Qiskit/qiskit/tree/master/docs>`__ ด้วย `Sphinx <http://www.sphinx-doc.org/en/master/>`__ ข้อมูลส่วนใหญ่ภายในเอกสาร `API Reference <https://qiskit.org/documentation/apidoc/qiskit.html>`__ มาจากคอมเมนต์ในโค้ดในที่เก็บข้อมูลตามรายการ :ref:`where_things_are`"

#: ../../contributing_to_qiskit.rst:430
msgid "Documentation Structure"
msgstr "โครงสร้างเอกสาร"

#: ../../contributing_to_qiskit.rst:432
msgid "The way documentation is structured in Qiskit is to push as much of the actual documentation into the docstrings as possible. This makes it easier for additions and corrections to be made during development, because the majority of the documentation lives near the code being changed. There are three levels in the normal documentation structure in Terra:"
msgstr ""

#: ../../contributing_to_qiskit.rst:460
msgid "The ``.rst`` files in the ``docs/apidocs``"
msgstr ""

#: ../../contributing_to_qiskit.rst:439
msgid "These files are used to tell Sphinx which modules to include in the rendered documentation. This contains two pieces of information: an `internal reference <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#reference-names>`__ or `cross reference <https://www.sphinx-doc.org/en/latest/usage/restructuredtext/roles.html#ref-role>`__ to the module, which can be used for internal links inside the documentation, and an `automodule directive <http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`__ used to parse the module docstrings from a specified import path. For example, the ``dagcircuit.rst`` file contains::"
msgstr ""

#: ../../contributing_to_qiskit.rst:457
msgid "The only ``.rst`` file outside of this is ``qiskit.rst``, which contains the table of contents. If you're adding a new ``.rst`` file for a new module's documentation, make sure to add it to the `toctree <https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#table-of-contents>`__ in that file."
msgstr ""

#: ../../contributing_to_qiskit.rst:505
msgid "The module-level docstring"
msgstr ""

#: ../../contributing_to_qiskit.rst:463
msgid "This docstring is at the module level for the module specified in the ``automodule`` directive in the rst file. If the module specified is a directory/namespace, the docstring should be specified in the ``__init__.py`` file for that directory. This module-level docstring contains more details about the module being documented. The normal structure to this docstring is to outline all the classes and functions of the public API that are contained in that module. This is typically done using the `autosummary directive <https://www.sphinx-doc.org/en/master/usage/extensions/autosummary.html>`__ (or `autodoc directives <http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`__ directly if the module is simple, such as in the case of ``qiskit.execute``). The autosummary directive is used to autodoc a list of different Python elements (classes, functions, etc.) directly without having to manually call out the autodoc directives for each one. The module-level docstring is where to provide a high-level overview of what functionality the module provides. This is normally done by grouping the different components of the public API together into multiple subsections."
msgstr ""

#: ../../contributing_to_qiskit.rst:480
msgid "For example, as in the previous dagcircuit module example, the contents of the module docstring for ``qiskit/dagcircuit/__init__.py`` would be::"
msgstr ""

#: ../../contributing_to_qiskit.rst:504
msgid "This is just an example and the actual module docstring for the dagcircuit module might diverge from this."
msgstr ""

#: ../../contributing_to_qiskit.rst:522
msgid "The actual docstring for the elements listed in the module docstring"
msgstr ""

#: ../../contributing_to_qiskit.rst:508
msgid "You should strive to document thoroughly all the public interfaces exposed using examples when necessary. For docstrings, `Google Python Style Docstrings <https://google.github.io/styleguide/pyguide.html?showone=Comments#38-comments-and-docstrings>`__ are used. This is parsed using the `napoleon sphinx extension <https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html>`__. The `napoleon documentation <https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html>`__ contains a good example of how docstrings should be formatted."
msgstr ""

#: ../../contributing_to_qiskit.rst:517
msgid "You can use any Sphinx directive or rst formatting in a docstring as it makes sense. For example, one common extension used is the ``jupyter-execute`` directive, which is used to execute a code block in Jupyter and display both the code and output. This is particularly useful for visualizations."
msgstr ""

#: ../../contributing_to_qiskit.rst:525
msgid "Documentation Integration"
msgstr ""

#: ../../contributing_to_qiskit.rst:527
msgid "The hosted documentation at https://qiskit.org/documentation/ covers the entire Qiskit project; Terra is just one component of that. As such, the documentation builds for the hosted version are built by the Qiskit meta-package repository https://github.com/Qiskit/qiskit. When commits are merged to that repo, the output of Sphinx builds are uploaded to the qiskit.org website. Those Sphinx builds are configured to pull in the documentation from the version of the Qiskit elements installed by the meta-package at that point. For example, if the meta-package version is currently 0.13.0, then that will copy the documentation from Terra's 0.10.0 release. When the meta-package's requirements are bumped, then it will start pulling documentation from the new version. This means that fixes for incorrect API documentation will need to be included in a new release. Documentation fixes are valid backports for a stable patch release per the stable branch policy (see :ref:`stable_branch_policy`)."
msgstr ""

#: ../../contributing_to_qiskit.rst:541
msgid "During the build process, the contents of each element's ``docs/apidocs/`` are recursively copied into a shared copy of ``doc/apidocs/`` in the meta-package repository along with all the other elements. This means that what is in the root of docs/apidocs on each element at a release will end up on the root of https://qiskit.org/documentation/apidoc/."
msgstr ""

#: ../../contributing_to_qiskit.rst:550
msgid "Translating Documentation"
msgstr ""

#: ../../contributing_to_qiskit.rst:552
msgid "Qiskit documentation is translated (localized) using Crowdin, a software and web localization platform that allows organizations to coordinate translation projects and collaborate with communities to translate materials. Crowdin allows our community of translators to amplify their impact by automatically reusing the work invested translating one sentence to translate other, similar sentences. Crowdin also makes translations resilient to many types of changes to the original material, such as moving sentences around, even across files."
msgstr ""

#: ../../contributing_to_qiskit.rst:560
msgid "Qiskit localization requests are handled in `Qiskit Translations <https://github.com/Qiskit/qiskit-translations>`__ repository. To contribute to Qiskit localization, please follow these steps:"
msgstr ""

#: ../../contributing_to_qiskit.rst:563
msgid "Add your name (or ID) to the `LOCALIZATION_CONTRIBUTORS <https://github.com/qiskit-community/qiskit-translations/blob/master/LOCALIZATION_CONTRIBUTORS>`__ file."
msgstr ""

#: ../../contributing_to_qiskit.rst:566
msgid "Create a pull request (PR) to merge your change. Make sure to follow the template to open a Pull Request."
msgstr ""

#: ../../contributing_to_qiskit.rst:571
msgid "Each contributor has to create their own PR and sign the CLA."
msgstr ""

#: ../../contributing_to_qiskit.rst:572
msgid "Please mention the language that you'd like to contribute to in the PR summary."
msgstr ""

#: ../../contributing_to_qiskit.rst:574
msgid "If you have an open issue for a language request, **add the issue link to the PR**."
msgstr ""

#: ../../contributing_to_qiskit.rst:576
msgid "You will be asked to sign the Qiskit Contributors License Agreement (CLA); please do so."
msgstr ""

#: ../../contributing_to_qiskit.rst:578
msgid "A minimum of **three contributors** per language are necessary for any new languages to be added, to receive official support from the administrators of the localization project."
msgstr ""

#: ../../contributing_to_qiskit.rst:581
msgid "Among the group of contributors, a translation lead must be identified to serve as a liaison with the administrators of the localization project. The lead must contact: Yuri Kobayashi (yurik@jp.ibm.com) by email."
msgstr ""

#: ../../contributing_to_qiskit.rst:584
msgid "In the `Qiskit-Docs <https://crowdin.com/project/qiskit-docs>`__ Crowdin project, choose the language that you want to contribute to."
msgstr ""

#: ../../contributing_to_qiskit.rst:589
msgid "As mentioned in the blog post, `Qiskit in my language is Qiskit <https://medium.com/qiskit/qiskit-in-my-language-is-qiskit-73d4626a99d3>`__, we want to make sure that translated languages have enough community support to build a translation team with translators, proofreaders, and translation leads. If you want to be a translation lead or would be willing to join a new translation project team, you can open a `GitHub issue <https://github.com/qiskit-community/qiskit-translations/issues/new/choose>`__ to start a discussion with the Qiskit team and recruit translation project members."
msgstr ""

#: ../../contributing_to_qiskit.rst:595
msgid "Click the **Join** button and **paste the URL of your PR** in the dialog box where you are asked why you want to join the Crowdin project."
msgstr ""

#: ../../contributing_to_qiskit.rst:598
msgid "The administrators of the Crowdin project will review your request and give you access as quickly as they can."
msgstr ""

#: ../../contributing_to_qiskit.rst:602
msgid "Building from Source"
msgstr ""

#: ../../contributing_to_qiskit.rst:604
msgid "You can build a local copy of the documentation from your local clone of the `Qiskit/qiskit` repository as follows:"
msgstr ""

#: ../../contributing_to_qiskit.rst:607
msgid "Clone the Qiskit repository."
msgstr ""

#: ../../contributing_to_qiskit.rst:613
msgid "Cloning the repository creates a local folder called ``qiskit``."
msgstr ""

#: ../../contributing_to_qiskit.rst:619
msgid "Build the documentation by navigating to your local clone of `Qiskit/qiskit` and running the following command in a terminal window."
msgstr ""

#: ../../contributing_to_qiskit.rst:626
msgid "If you do not already have the `tox <https://tox.readthedocs.io/en/latest/>`_ command installed, install it by running:"
msgstr ""

#: ../../contributing_to_qiskit.rst:633
msgid "As you make changes to your local RST files, you can update your HTML files by navigating to `/doc/` and running the following in a terminal window:"
msgstr ""

#: ../../contributing_to_qiskit.rst:641
msgid "This will build a styled, HTML version of your local documentation repository in the subdirectory `/docs/_build/html/`."
msgstr ""

#: ../../contributing_to_qiskit.rst:648
msgid "Installing from Source"
msgstr ""

#: ../../contributing_to_qiskit.rst:650
msgid "Installing the elements from source allows you to access the most recently updated version of Qiskit instead of using the version in the Python Package Index (PyPI) repository. This will give you the ability to inspect and extend the latest version of the Qiskit code more efficiently."
msgstr ""

#: ../../contributing_to_qiskit.rst:655
msgid "When installing the elements and components from source, by default their ``development`` version (which corresponds to the ``master`` git branch) will be used, as opposed to the ``stable`` version (which contains the same codebase as the published ``pip`` packages). Since the ``development`` versions of an element or component usually include new features and changes, they generally require using the ``development`` version of the rest of the items as well."
msgstr ""

#: ../../contributing_to_qiskit.rst:664
msgid "The Terra and Aer packages both require a compiler to build from source before you can install. Ignis, Aqua, and the IBM Quantum Provider backend do not require a compiler."
msgstr ""

#: ../../contributing_to_qiskit.rst:668
msgid "Installing elements from source requires the following order of installation to prevent installing versions of elements that may be lower than those desired if the ``pip`` version is behind the source versions:"
msgstr ""

#: ../../contributing_to_qiskit.rst:672
msgid ":ref:`qiskit-terra <install-qiskit-terra>`"
msgstr ""

#: ../../contributing_to_qiskit.rst:673
msgid ":ref:`qiskit-aer <install-qiskit-aer>`"
msgstr ""

#: ../../contributing_to_qiskit.rst:674
msgid ":ref:`qiskit-ibmq-provider <install-qiskit-ibmq-provider>` (if you want to connect to the IBM Quantum devices or online simulator)"
msgstr ""

#: ../../contributing_to_qiskit.rst:678
msgid "To work with several components and elements simultaneously, use the following steps for each element."
msgstr ""

#: ../../contributing_to_qiskit.rst:683
msgid "Due to the use of namespace packaging in Python, care must be taken in how you install packages. If you're planning to install any element from source, do not use the ``qiskit`` meta-package. Also, follow this guide and use a separate virtual environment for development. If you do choose to mix an existing installation with your development, refer to https://github.com/pypa/sample-namespace-packages/blob/master/table.md for the set of combinations of installation methods that work together."
msgstr ""

#: ../../contributing_to_qiskit.rst:692
msgid "Set up the Virtual Development Environment"
msgstr ""

#: ../../contributing_to_qiskit.rst:694
msgid "Virtual environments are used for Qiskit development to isolate the development environment from system-wide packages. This way, we avoid inadvertently becoming dependent on a particular system configuration. For developers, this also makes it easy to maintain multiple environments (e.g. one per supported Python version, for older versions of Qiskit, etc.)."
msgstr ""

#: ../../contributing_to_qiskit.rst
msgid "Python venv"
msgstr ""

#: ../../contributing_to_qiskit.rst:703
msgid "All Python versions supported by Qiskit include built-in virtual environment module `venv <https://docs.python.org/3/tutorial/venv.html>`__."
msgstr ""

#: ../../contributing_to_qiskit.rst:706
msgid "Start by creating a new virtual environment with ``venv``. The resulting environment will use the same version of Python that created it and will not inherit installed system-wide packages by default. The specified folder will be created and is used to hold the environment's installation. It can be placed anywhere. For more detail, see the official Python documentation, `Creation of virtual environments <https://docs.python.org/3/library/venv.html>`__."
msgstr ""

#: ../../contributing_to_qiskit.rst:716
msgid "Activate the environment by invoking the appropriate activation script for your system, which can be found within the environment folder. For example, for bash/zsh:"
msgstr ""

#: ../../contributing_to_qiskit.rst:723
msgid "Upgrade pip within the environment to ensure Qiskit dependencies installed in the subsequent sections can be located for your system."
msgstr ""

#: ../../contributing_to_qiskit.rst
msgid "Conda"
msgstr ""

#: ../../contributing_to_qiskit.rst:732
msgid "For Conda users, a new environment can be created as follows."
msgstr ""

#: ../../contributing_to_qiskit.rst:743
msgid "Installing Terra from Source"
msgstr ""

#: ../../contributing_to_qiskit.rst:745
msgid "Installing from source requires that you have the Rust compiler on your system. To install the Rust compiler the recommended path is to use rustup, which is a cross-platform Rust installer. To use rustup you can go to:"
msgstr ""

#: ../../contributing_to_qiskit.rst:749
msgid "https://rustup.rs/"
msgstr ""

#: ../../contributing_to_qiskit.rst:751
msgid "which will provide instructions for how to install rust on your platform. Besides rustup there are `other installation methods <https://forge.rust-lang.org/infra/other-installation-methods.html>`__ available too."
msgstr ""

#: ../../contributing_to_qiskit.rst:755
msgid "Once the Rust compiler is installed, you are ready to install Qiskit Terra."
msgstr ""

#: ../../contributing_to_qiskit.rst:757
msgid "Clone the Terra repository."
msgstr ""

#: ../../contributing_to_qiskit.rst:763
msgid "Cloning the repository creates a local folder called ``qiskit-terra``."
msgstr ""

#: ../../contributing_to_qiskit.rst:769
msgid "If you want to run tests or linting checks, install the developer requirements."
msgstr ""

#: ../../contributing_to_qiskit.rst:775
msgid "Install ``qiskit-terra``."
msgstr ""

#: ../../contributing_to_qiskit.rst:781
msgid "If you want to install it in editable mode, meaning that code changes to the project don't require a reinstall to be applied, you can do this with:"
msgstr ""

#: ../../contributing_to_qiskit.rst:788
msgid "Installing in editable mode will build the compiled extensions in debug mode without optimizations. This will affect the runtime performance of the compiled code. If you'd like to use editable mode and build the compiled code in release with optimizations enabled you can run:"
msgstr ""

#: ../../contributing_to_qiskit.rst:797
msgid "after you run pip and that will rebuild the binary in release mode."
msgstr ""

#: ../../contributing_to_qiskit.rst:799
msgid "If you are working on Rust code in Qiskit you will need to rebuild the extension code every time you make a local change. ``pip install -e .`` will only build the Rust extension when it's called, so any local changes you make to the Rust code after running pip will not be reflected in the installed package unless you rebuild the extension. You can leverage the above ``build_rust`` command to do this (with or without ``--release`` based on whether you want to build in debug mode or release mode)."
msgstr ""

#: ../../contributing_to_qiskit.rst:807
msgid "You can then run the code examples after installing Terra. You can run an example script with the following command."
msgstr ""

#: ../../contributing_to_qiskit.rst:818
msgid "Installing Aer from Source"
msgstr ""

#: ../../contributing_to_qiskit.rst:820
msgid "Clone the Aer repository."
msgstr ""

#: ../../contributing_to_qiskit.rst:826
msgid "Install build requirements."
msgstr ""

#: ../../contributing_to_qiskit.rst:832
msgid "After this, the steps to install Aer depend on which operating system you are using. Since Aer is a compiled C++ program with a Python interface, there are non-Python dependencies for building the Aer binary which can't be installed universally depending on operating system."
msgstr ""

#: ../../contributing_to_qiskit.rst ../../contributing_to_qiskit.rst:1016
msgid "Linux"
msgstr ""

#: ../../contributing_to_qiskit.rst:841 ../../contributing_to_qiskit.rst:906
msgid "Install compiler requirements."
msgstr ""

#: ../../contributing_to_qiskit.rst:843
msgid "Building Aer requires a C++ compiler and development headers."
msgstr ""

#: ../../contributing_to_qiskit.rst:845 ../../contributing_to_qiskit.rst:860
msgid "If you're using Fedora or an equivalent Linux distribution, install using:"
msgstr ""

#: ../../contributing_to_qiskit.rst:852 ../../contributing_to_qiskit.rst:867
msgid "For Ubuntu/Debian install it using:"
msgstr ""

#: ../../contributing_to_qiskit.rst:858
msgid "Install OpenBLAS development headers."
msgstr ""

#: ../../contributing_to_qiskit.rst
msgid "macOS"
msgstr ""

#: ../../contributing_to_qiskit.rst:877
msgid "Install dependencies."
msgstr ""

#: ../../contributing_to_qiskit.rst:879
msgid "To use the `Clang <https://clang.llvm.org/>`__ compiler on macOS, you need to install an extra library for supporting `OpenMP <https://www.openmp.org/>`__.  You can use `brew <https://brew.sh/>`__ to install this and other dependencies."
msgstr ""

#: ../../contributing_to_qiskit.rst:887
msgid "Then install a BLAS implementation; `OpenBLAS <https://www.openblas.net/>`__ is the default choice."
msgstr ""

#: ../../contributing_to_qiskit.rst:894
msgid "Next, install ``Xcode Command Line Tools``."
msgstr ""

#: ../../contributing_to_qiskit.rst
msgid "Windows"
msgstr ""

#: ../../contributing_to_qiskit.rst:902
msgid "On Windows you need to use `Anaconda3 <https://www.anaconda.com/distribution/#windows>`__ or `Miniconda3 <https://docs.conda.io/en/latest/miniconda.html>`__ to install all the dependencies."
msgstr ""

#: ../../contributing_to_qiskit.rst:912
msgid "Install binary and build dependencies."
msgstr ""

#: ../../contributing_to_qiskit.rst:919
msgid "Build and install qiskit-aer directly"
msgstr ""

#: ../../contributing_to_qiskit.rst:921
msgid "If you have pip <19.0.0 installed and your environment doesn't require a custom build, run:"
msgstr ""

#: ../../contributing_to_qiskit.rst:929
msgid "This will both build the binaries and install Aer."
msgstr ""

#: ../../contributing_to_qiskit.rst:931
msgid "Alternatively, if you have a newer pip installed, or have some custom requirement, you can build a Python wheel manually."
msgstr ""

#: ../../contributing_to_qiskit.rst:939
msgid "If you need to set a custom option during the wheel build, refer to :ref:`aer_wheel_build_options`."
msgstr ""

#: ../../contributing_to_qiskit.rst:942
msgid "After you build the Python wheel, it will be stored in the ``dist/`` dir in the Aer repository. The exact version will depend"
msgstr ""

#: ../../contributing_to_qiskit.rst:950
msgid "The exact filename of the output wheel file depends on the current version of Aer under development."
msgstr ""

#: ../../contributing_to_qiskit.rst:956
msgid "Custom options during wheel builds"
msgstr ""

#: ../../contributing_to_qiskit.rst:958
msgid "The Aer build system uses `scikit-build <https://scikit-build.readthedocs.io/en/latest/index.html>`__ to run the compilation when building it with the Python interface. It acts as an interface for `setuptools <https://setuptools.readthedocs.io/en/latest/>`__ to call `CMake <https://cmake.org/>`__ and compile the binaries for your local system."
msgstr ""

#: ../../contributing_to_qiskit.rst:963
msgid "Due to the complexity of compiling the binaries, you may need to pass options to a certain part of the build process. The way to pass variables is:"
msgstr ""

#: ../../contributing_to_qiskit.rst:970
msgid "where the elements within square brackets `[]` are optional, and ``skbuild_opts``, ``cmake_opts``, ``build_tool_opts`` are to be replaced by flags of your choice. A list of *CMake* options is available here: https://cmake.org/cmake/help/v3.6/manual/cmake.1.html#options. For example, you could run something like:"
msgstr ""

#: ../../contributing_to_qiskit.rst:980
msgid "This is passing the flag `-j8` to the underlying build system (which in this case is `Automake <https://www.gnu.org/software/automake/>`__), telling it that you want to build in parallel using 8 processes."
msgstr ""

#: ../../contributing_to_qiskit.rst:984
msgid "For example, a common use case for these flags on linux is to specify a specific version of the C++ compiler to use (normally if the default is too old):"
msgstr ""

#: ../../contributing_to_qiskit.rst:992
msgid "which will tell CMake to use the g++-7 command instead of the default g++ when compiling Aer."
msgstr ""

#: ../../contributing_to_qiskit.rst:995
msgid "Another common use case for this, depending on your environment, is that you may need to specify your platform name and turn off static linking."
msgstr ""

#: ../../contributing_to_qiskit.rst:1003
msgid "Here ``--plat-name`` is a flag to setuptools, to specify the platform name to use in the package metadata, ``-DSTATIC_LINKING`` is a flag for using CMake to disable static linking, and ``-j8`` is a flag for using Automake to use 8 processes for compilation."
msgstr ""

#: ../../contributing_to_qiskit.rst:1008
msgid "A list of common options depending on platform are:"
msgstr ""

#: ../../contributing_to_qiskit.rst:1011
msgid "Platform"
msgstr ""

#: ../../contributing_to_qiskit.rst:1011
msgid "Tool"
msgstr ""

#: ../../contributing_to_qiskit.rst:1011
msgid "Option"
msgstr ""

#: ../../contributing_to_qiskit.rst:1011
msgid "Use Case"
msgstr ""

#: ../../contributing_to_qiskit.rst:1013
msgid "All"
msgstr ""

#: ../../contributing_to_qiskit.rst:1013
msgid "Automake"
msgstr ""

#: ../../contributing_to_qiskit.rst:1013
msgid "``-j``"
msgstr ""

#: ../../contributing_to_qiskit.rst:1013
msgid "Followed by a number, sets the number of processes to use for compilation."
msgstr ""

#: ../../contributing_to_qiskit.rst:1016 ../../contributing_to_qiskit.rst:1023
msgid "CMake"
msgstr ""

#: ../../contributing_to_qiskit.rst:1016
msgid "``-DCMAKE_CXX_COMPILER``"
msgstr ""

#: ../../contributing_to_qiskit.rst:1016
msgid "Used to specify a specific C++ compiler; this is often needed if your default g++ is too old."
msgstr ""

#: ../../contributing_to_qiskit.rst:1020 ../../contributing_to_qiskit.rst:1023
msgid "OSX"
msgstr ""

#: ../../contributing_to_qiskit.rst:1020
msgid "setuptools"
msgstr ""

#: ../../contributing_to_qiskit.rst:1020
msgid "``--plat-name``"
msgstr ""

#: ../../contributing_to_qiskit.rst:1020
msgid "Used to specify the platform name in the output Python package."
msgstr ""

#: ../../contributing_to_qiskit.rst:1023
msgid "``-DSTATIC_LINKING``"
msgstr ""

#: ../../contributing_to_qiskit.rst:1023
msgid "Used to specify whether or not static linking should be used."
msgstr ""

#: ../../contributing_to_qiskit.rst:1028
msgid "Some of these options are not platform-specific. These particular platforms are listed because they are commonly used in the environment. Refer to the tool documentation for more information."
msgstr ""

#: ../../contributing_to_qiskit.rst:1035
msgid "Installing IBM Quantum Provider from Source"
msgstr ""

#: ../../contributing_to_qiskit.rst:1037
msgid "Clone the qiskit-ibmq-provider repository."
msgstr ""

#: ../../contributing_to_qiskit.rst:1043
msgid "Cloning the repository creates a local directory called ``qiskit-ibmq-provider``."
msgstr ""

#: ../../contributing_to_qiskit.rst:1049
msgid "If you want to run tests or linting checks, install the developer requirements. This is not required to install or use the qiskit-ibmq-provider package when installing from source."
msgstr ""

#: ../../contributing_to_qiskit.rst:1057
msgid "Install qiskit-ibmq-provider."
msgstr ""

#: ../../contributing_to_qiskit.rst:1063
msgid "If you want to install it in editable mode, meaning that code changes to the project don't require a reinstall to be applied:"
msgstr ""

#: ../../contributing_to_qiskit.rst:1074
msgid "Qiskit Versioning"
msgstr ""

#: ../../contributing_to_qiskit.rst:1076
msgid "The Qiskit project is made up of several elements each performing different functionality. Each is independently useful and can be used on their own, but for convenience we provide this repository and meta-package to provide a single entrypoint to install all the elements at once. This is to simplify the install process and provide a unified interface to end users. However, because each Qiskit element has its own releases and versions, some care is needed when dealing with versions between the different repositories. This document outlines the guidelines for dealing with versions and releases of both Qiskit elements and the meta-package."
msgstr ""

#: ../../contributing_to_qiskit.rst:1086
msgid "For the rest of this guide the standard Semantic Versioning nomenclature will be used of: ``Major.Minor.Patch`` to refer to the different components of a version number. For example, if the version number was ``0.7.1``, then the major version is ``0``, the minor version ``7``, and the patch version ``1``."
msgstr ""

#: ../../contributing_to_qiskit.rst:1093
msgid "Meta-package Version"
msgstr ""

#: ../../contributing_to_qiskit.rst:1095
msgid "The Qiskit meta-package version is an independent value that is determined by the releases of each of the elements being tracked. Each time we push a release to a tracked component (or add an element) the meta-package requirements, and version will need to be updated and a new release published. The timing should be coordinated with the release of elements to ensure that the meta-package releases track with element releases."
msgstr ""

#: ../../contributing_to_qiskit.rst:1103
msgid "Adding New Tracked Elements"
msgstr ""

#: ../../contributing_to_qiskit.rst:1105
msgid "When a new Qiskit element is being added to the meta-package requirements, we need to increase the **Minor** version of the meta-package."
msgstr ""

#: ../../contributing_to_qiskit.rst:1108
msgid "For example, if the meta-package is tracking 2 elements ``qiskit-aer`` and ``qiskit-terra`` and its version is ``0.7.4``. Then we release a new element ``qiskit-ignis`` that we intend to also have included in the meta-package. When we add the new element to the meta-package we increase the version to ``0.8.0``."
msgstr ""

#: ../../contributing_to_qiskit.rst:1116
msgid "Patch Version Increases"
msgstr ""

#: ../../contributing_to_qiskit.rst:1118
msgid "When any Qiskit element that is being already tracked by the meta-package releases a patch version to fix bugs in a release, we need also bump the requirement in the ``setup.py`` and then increase the patch version of the meta-package."
msgstr ""

#: ../../contributing_to_qiskit.rst:1123
msgid "For example, if the meta-package is tracking 3 elements ``qiskit-terra==0.8.1``, ``qiskit-aer==0.2.1``, and ``qiskit-ignis==0.1.4`` with the current version ``0.9.6``. When qiskit-terra release a new patch version to fix a bug ``0.8.2`` the meta-package will also need to increase its patch version and release, becoming ``0.9.7``."
msgstr ""

#: ../../contributing_to_qiskit.rst:1129
msgid "Additionally, there are occasionally packaging or other bugs in the meta-package itself that need to be fixed by pushing new releases. When those are encountered we should increase the patch version to differentiate it from the broken release. Do **not** delete the broken or any old releases from pypi in any situation, instead just increase the patch version and upload a new release."
msgstr ""

#: ../../contributing_to_qiskit.rst:1137
msgid "Minor Version Increases"
msgstr ""

#: ../../contributing_to_qiskit.rst:1139
msgid "Besides when adding a new element to the meta-package, the minor version of the meta-package should also be increased anytime a minor version is increased in a tracked element."
msgstr ""

#: ../../contributing_to_qiskit.rst:1143
msgid "For example, if the meta-package is tracking 2 elements ``qiskit-terra==0.7.0`` and ``qiskit-aer==0.1.1`` and the current version is ``0.7.5``. When the ``qiskit-aer`` element releases ``0.2.0`` then we need to increase the meta-package version to be ``0.8.0`` to correspond to the new release."
msgstr ""

#: ../../contributing_to_qiskit.rst:1149
msgid "Major Version Increases"
msgstr ""

#: ../../contributing_to_qiskit.rst:1151
msgid "The major version is different from the other version number components. Unlike the other version number components, which are updated in lock step with each tracked element, the major version is only increased when all tracked versions are bumped (at least before ``1.0.0``). Right now, all the elements still have a major version number component of ``0``, and until each tracked element in the meta-repository is marked as stable by bumping the major version to be ``>=1``, then the meta-package version should not increase the major version."
msgstr ""

#: ../../contributing_to_qiskit.rst:1159
msgid "The behavior of the major version number component tracking after when all the elements are at >=1.0.0 has not been decided yet."
msgstr ""

#: ../../contributing_to_qiskit.rst:1163
msgid "Optional Extras"
msgstr ""

#: ../../contributing_to_qiskit.rst:1165
msgid "In addition to the tracked elements, there are additional packages built on top of Qiskit which are developed in tandem with Qiskit, for example, the application repositories like qiskit-optimization. For convienence these packages are tracked by the Qiskit metapackage as optional extras that can be installed with Qiskit. Releases of these optional downstream projects do not trigger a metapackage release as they are unpinned and do not affect the metapackage version. If there is a compatibility issue between Qiskit and these downstream optional dependencies and the minimum version needs to be adjusted in a standalone release, this will only be done as a patch version release as it's a packaging bugfix."
msgstr ""

#: ../../contributing_to_qiskit.rst:1177
msgid "Qiskit Element Requirement Tracking"
msgstr ""

#: ../../contributing_to_qiskit.rst:1179
msgid "While not strictly related to the meta-package and Qiskit versioning, how we track the element versions in the meta-package's requirements list is important. Each element listed in the ``setup.py`` should be pinned to a single version. This means that each version of Qiskit should only install a single version for each tracked element. For example, the requirements list at any given point should look something like::"
msgstr ""

#: ../../contributing_to_qiskit.rst:1191
msgid "This is to aid in debugging, but also make tracking the versions across multiple elements more transparent."
msgstr ""

