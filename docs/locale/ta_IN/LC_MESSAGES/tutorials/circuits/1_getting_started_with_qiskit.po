msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-29 18:58+0000\n"
"PO-Revision-Date: 2021-04-29 19:44\n"
"Last-Translator: \n"
"Language-Team: Tamil\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits/1_getting_started_with_qiskit.po\n"
"X-Crowdin-File-ID: 9114\n"
"Language: ta_IN\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:10
msgid "This page was generated from `tutorials/circuits/1_getting_started_with_qiskit.ipynb`__."
msgstr "இந்த பக்கம் ` tutorials/circuits/1_getting_started_with_qiskit.ipynb ` __ இருந்து உருவாக்கப்பட்டது."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/circuits/1_getting_started_with_qiskit.ipynb>`_."
msgstr "கருப்பொருளில் ஊடாடும் வகையில் இயக்கவும் ` IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/circuits/1_getting_started_with_qiskit.ipynb>` _."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:9
msgid "Getting Started with Qiskit"
msgstr "Qiskit மூலம் முதலில் தொடங்குதல்"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:11
msgid "Here, we provide an overview of working with Qiskit. The fundamental package of Qiskit is Terra that provides the basic building blocks necessary to program quantum computers. The fundamental unit of Qiskit is the `quantum circuit <https://en.wikipedia.org/wiki/Quantum_circuit>`__. A basic workflow using Qiskit consists of two stages: **Build** and **Execute**. **Build** allows you to make different quantum circuits that represent the problem you are solving, and **Execute** that allows you to run them on different backends. After the jobs have been run, the data is collected and postprocessed depending on the desired output."
msgstr "இங்கு, நாங்கள் Qiskit யுடன் பணிபுரிந்த ஒரு மேலோட்டை வழங்குங்கள். Qiskit (Qiskit) அடிப்படை தொகுப்பு டெர்ரா (Terra) அதாவது நிரல் குண்டம் கணினிகளுக்கு தேவையான அடிப்படை கட்டிடக்கலை வழங்குகிறது. Qiskit இன் அடிப்படை அலகு ` ക്வாண்டம் சுழல் <https://en.wikipedia.org/wiki/Quantum_circuit>` _. Qiskit பயன்படுத்தி ஒரு அடிப்படை பணிமேடை இரண்டு நிலைகளைக் கொண்டுள்ளது: ** Build** and ** Execute**. ** Build** சிக்கலைக் குறிக்கும் வெவ்வேறு குவாண்டம் சுற்றுகளை நீங்கள் செய்ய வேண்டும், மற்றும்** Execute** இது வெவ்வேறு பின்தளத்தில் அவற்றை இயக்க உங்களை அனுமதிக்கிறது. வேலைகள் இயங்குவதற்கு பிறகு, தேவையான வெளியீட்டைப் பொறுத்து, தரவு தொகுக்கப்பட்டு பதவியேற்றுகிறது."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:36
msgid "Circuit Basics"
msgstr "மின்சுற்று அடிப்படை"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:39
msgid "Building the circuit"
msgstr "சுற்றுப்பாதை கட்டிடம்"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:41
msgid "The basic element needed for your first program is the QuantumCircuit. We begin by creating a ``QuantumCircuit`` comprised of three qubits."
msgstr "உங்கள் முதல் திட்டத்திற்கு தேவையான அடிப்படை உறுப்பு குவாண்டம் சிர்குட் ஆகும். மூன்று குவிட்களைக் கொண்ட `` குவாண்டம் சர்க்யூட்`` ஐ உருவாக்குவதன் மூலம் தொடங்குவோம்."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:63
msgid "After you create the circuit with its registers, you can add gates (“operations”) to manipulate the registers. As you proceed through the tutorials you will find more gates and circuits; below is an example of a quantum circuit that makes a three-qubit GHZ state"
msgstr "நீங்கள் அதன் பதிவேடுகளுடன் சுற்று உருவாக்கிய பிறகு, பதிவேடுகளை கையாள வாயில்களை (“செயல்பாடுகள்”) சேர்க்கலாம். நீங்கள் பயிற்சிகள் வழியாக செல்லும்போது அதிக வாயில்கள் மற்றும் சுற்றுகள் இருப்பதைக் காண்பீர்கள்; மூன்று குவிட் GHZ நிலையை உருவாக்கும் குவாண்டம் சுற்றுக்கு ஒரு எடுத்துக்காட்டு கீழே"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:65
msgid "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}.\n\n"
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:67
msgid "To create such a state, we start with a three-qubit quantum register. By default, each qubit in the register is initialized to :math:`|0\\rangle`. To make the GHZ state, we apply the following gates: - A Hadamard gate :math:`H` on qubit 0, which puts it into the superposition state :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}`. - A controlled-Not operation (:math:`C_{X}`) between qubit 0 and qubit 1. - A controlled-Not operation between qubit 0 and qubit 2."
msgstr "இந ் த மாநிலத ் தை உருவாக ் க வேண ் டும ், நாங ் கள ் மூன ் று கட ் டத ் தில ் தொடங ் கும ். முன்னிருப்பாக, பதிவு செய்யப்பட்ட ஒவ்வொரு குறும்படம் :math:`. 0\\rகோணம் `. GHZ மாநிலத்தை செய்ய, நாம் பின்வரும் வாயில்களை பயன்படுத்தி: - A Hadamard gate :math:` H ` on qubit 0, which puts it into the superposition state :math:` \\left (| 0\\rகோணம் + | 1\\rangle\\right)/\\sqrt{2}`. -Not operation (:math:` C_{X}`) qubit 0 and qubit 1. -ஒரு கட்டுப்பாடு-0 மற்றும் பிட் 2 இடையே செயல்பாடு."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:69
msgid "On an ideal quantum computer, the state produced by running this circuit would be the GHZ state above."
msgstr "ஒரு சாதாரண வானிலை கணினியில், இந்த சுற்றுப்பாதை இயங்கும் மாநிலம் மேலே GHZ மாநிலமாக இருப்பது."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:71
msgid "In Qiskit, operations can be added to the circuit one by one, as shown below."
msgstr "Qiskit இல், செயல்பாடுகள் ஒன்றை ஒன்று, கீழே காட்டப்பட்ட ஒன்று சேகரிக்கு சேர்க்கலாம்."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:120
msgid "Visualize Circuit"
msgstr "சுற்றுப்பாதை காட்சிப்படுத்தவும்"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:122
msgid "You can visualize your circuit using Qiskit ``QuantumCircuit.draw()``, which plots the circuit in the form found in many textbooks."
msgstr "Qiskit ` `QuantumCircuit.draw () ` ` ` `, பல உரைநூல்களில் காணப்பட்ட மாதிரிகளில் சுற்றுப்பயணத்தை வரையறுக்கிறது."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:152
msgid "In this circuit, the qubits are put in order, with qubit zero at the top and qubit two at the bottom. The circuit is read left to right (meaning that gates that are applied earlier in the circuit show up further to the left)."
msgstr "இந்த சுற்றுப்பாதையில், க்யூட்டுகள் வரிசையில் வைக்கப்பட்டு, மேலே குறும்படத்துடன், கீழே இரண்டு மேல் விட்டு. சுற்றுச்சூழல் வலது இடமாக வாசிக்கப்பட்டுள்ளது (அதாவது முந்தைய சுற்றுப்பாதையில் பயன்படுத்தப்பட்டிருக்கும் கோடுகள் மேலும் இடது வரை காட்டுகின்றன)."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:167
msgid "When representing the state of a multi-qubit system, the tensor order used in Qiskit is different than that used in most physics textbooks. Suppose there are :math:`n` qubits, and qubit :math:`j` is labeled as :math:`Q_{j}`. Qiskit uses an ordering in which the :math:`n^{\\mathrm{th}}` qubit is on the left side of the tensor product, so that the basis vectors are labeled as :math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0`."
msgstr "ஒரு பலவித முறைமையை பிரதிநிதித்துவப் படுத்தும்போது, Qiskit யில் பயன்படுத்தப்படும் டென்சர் ஆணை, பெரும்பாலான இயற்பியல் பாடநூல்களில் பயன்படும் வேறுபடுகிறது. :math:` n ` qubits, and qubit :math:` j ` is labeled as :math:` Q_{j}`. Qiskit uses an ordering in which the :math:` n ^ {\\mathrm{th}} ` qubit is on the left side of the tensor product, so that the basis vectors are labeled as :math:` Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0 `."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:169
msgid "For example, if qubit zero is in state 0, qubit 1 is in state 0, and qubit 2 is in state 1, Qiskit would represent this state as :math:`|100\\rangle`, whereas many physics textbooks would represent it as :math:`|001\\rangle`."
msgstr "எடுத்துக்காட்டாக, குவிட் பூஜ்ஜியம் 0 மாநிலத்திலும், குவிட் 1 நிலை 0 ஆகவும், க்விட் 2 நிலை 1 ஆகவும் இருந்தால், கிஸ்கிட் இந்த நிலையை பின்வருமாறு குறிக்கும்: math: `| 100 \\ ரேங்கிள்`, அதே நேரத்தில் பல இயற்பியல் பாடப்புத்தகங்கள் இதைக் குறிக்கும் : math: `| 001 \\ rangle`."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:171
msgid "This difference in labeling affects the way multi-qubit operations are represented as matrices. For example, Qiskit represents a controlled-X (:math:`C_{X}`) operation with qubit 0 being the control and qubit 1 being the target as"
msgstr "இந்த வேறுபாட்டில் வேறுபாடு பாதிக்கப்படாமல் பல விரிவான செயல்பாடுகள் மடங்குகளாக பிரதிபலிக்கும். எடுத்துக்காட்டாக, Qiskit ஒரு கட்டுப்பாட்டை-X (:math:` C_{X}`) செயல்பாடு 0 ஆக இருப்பது கட்டுப்பாட்டை மற்றும் கிட் 1 என்று இலக்கு என்று."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:173
msgid "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}.\n\n"
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:189
msgid "Simulating circuits using Qiskit Aer"
msgstr "Qiskit Aer பயன்படுத்தி சிம்லேட்டிங் குறும்படங்கள்"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:191
msgid "Qiskit Aer is our package for simulating quantum circuits. It provides many different backends for doing a simulation. There is also a basic, Python only, implementation called ``BasicAer`` in Terra that can be used as a drop-in replacement for ``Aer`` in the examples below."
msgstr "குவாண்டம் சுற்றுகளை உருவகப்படுத்துவதற்கான எங்கள் தொகுப்பு கிஸ்கிட் ஏர். இது ஒரு உருவகப்படுத்துதலைச் செய்வதற்கு பல்வேறு பின்தளத்தில் வழங்குகிறது. டெர்ராவில் `` பேசிக் ஏர்`` எனப்படும் அடிப்படை, பைதான் மட்டும், செயல்படுத்தல் உள்ளது, இது கீழேயுள்ள எடுத்துக்காட்டுகளில் `` ஏர்`` க்கு மாற்றாக பயன்படுத்தப்படலாம்."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:194
msgid "Statevector backend"
msgstr "Statevector பின்னணி"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:196
msgid "The most common backend in Qiskit Aer is the ``statevector_simulator``. This simulator returns the quantum state, which is a complex vector of dimensions :math:`2^n`, where :math:`n` is the number of qubits (so be careful using this as it will quickly get too large to run on your machine)."
msgstr "கிஸ்கிட் ஏரில் மிகவும் பொதுவான பின்தளத்தில் `` ஸ்டேட்வெக்டர்_ சிமுலேட்டர்`` உள்ளது. இந்த சிமுலேட்டர் குவாண்டம் நிலையை அளிக்கிறது, இது பரிமாணங்களின் சிக்கலான திசையன் ஆகும்: math: `2 ^ n`, எங்கே: math:` n` என்பது குவிட்களின் எண்ணிக்கை (எனவே இதைப் பயன்படுத்துவதில் கவனமாக இருங்கள், ஏனெனில் இது விரைவாக இயங்க முடியாத அளவுக்கு பெரிதாகிவிடும் உங்கள் கணினியில்)."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:207
msgid "To run the above circuit using the statevector simulator, first you need to import Aer and then set the backend to ``statevector_simulator``."
msgstr "Statevector simulator பயன்படுத்தி மேலே சுற்றை இயக்க, முதலில் நீங்கள் ஏர் இறக்குமதி செய்யவேண்டும் மற்றும் பின்னர் ` statevector_simulator ` ` க்கு பின்னணியை அமைக்க வேண்டும்."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:232
msgid "Now that we have chosen the backend, it’s time to compile and run the quantum circuit. In Qiskit we provide the ``execute`` function for this. ``execute`` returns a ``job`` object that encapsulates information about the job submitted to the backend."
msgstr "இப்போது நாங்கள் பின்தளத்தில் தேர்வு செய்துள்ளோம், குவாண்டம் சுற்று தொகுத்து இயக்க வேண்டிய நேரம் இது. கிஸ்கிட்டில் இதற்காக `` இயக்க`` செயல்பாட்டை வழங்குகிறோம். `` செயல்படுத்து`` பின்தளத்தில் சமர்ப்பிக்கப்பட்ட வேலை பற்றிய தகவல்களை இணைக்கும் `` வேலை`` பொருளை வழங்குகிறது."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:238
msgid "Tip: You can obtain the above parameters in Jupyter. Simply place the text cursor on a function and press Shift+Tab."
msgstr "குறிப்பு: ஜூப்யூட்டர் இல் மேற்கோள் அளபுருக்களைப் பெற்றுக் கொள்ளலாம். ஒரு செயல்கூறு மற்றும் Shift + Tab ஐ அழுத்தவும்."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:264
msgid "When you run a program, a job object is made that has the following two useful methods: ``job.status()`` and ``job.result()``, which return the status of the job and a result object, respectively."
msgstr "நீங்கள் ஒரு நிரலை இயக்கும்போது, ​​பின்வரும் இரண்டு பயனுள்ள முறைகளைக் கொண்ட ஒரு வேலை பொருள் தயாரிக்கப்படுகிறது: `` job.status () `` மற்றும் `` job.result () ``, இது வேலையின் நிலை மற்றும் ஒரு முடிவு பொருளைத் தருகிறது, முறையே."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:270
msgid "Note: Jobs run asynchronously, but when the result method is called, it switches to synchronous and waits for it to finish before moving on to another task."
msgstr "குறிப்பு: வேலைகள் ஒத்திசைவில்லாமல் இயங்குகின்றன, ஆனால் முடிவு முறை என்று அழைக்கப்படும் போது, ​​அது ஒத்திசைவுக்கு மாறுகிறது மற்றும் மற்றொரு பணிக்குச் செல்வதற்கு முன்பு அது முடிவடையும் வரை காத்திருக்கிறது."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:295
msgid "The results object contains the data and Qiskit provides the method ``result.get_statevector(circ)`` to return the state vector for the quantum circuit."
msgstr "முடிவுகளின் பொருள் தரவைக் கொண்டுள்ளது மற்றும் குவாண்டம் சுற்றுக்கான மாநில திசையனைத் திருப்பித் தர `` result.get_statevector (circ) `` முறையை கிஸ்கிட் வழங்குகிறது."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:338
msgid "Qiskit also provides a visualization toolbox to allow you to view these results."
msgstr "இந்த முடிவுகளைக் காண உங்களை அனுமதிக்க கிஸ்கிட் ஒரு காட்சிப்படுத்தல் கருவிப்பெட்டியையும் வழங்குகிறது."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:340
msgid "Below, we use the visualization function to plot the real and imaginary components of the state density matrix :math:`\\rho`."
msgstr "கீழே, நிலை அடர்த்தி மேட்ரிக்ஸின் :math:`\\rho`. உண்மையான மற்றும் கற்பனையான கூறுகளைத் திட்டமிட காட்சிப்படுத்தல் செயல்பாட்டைப் பயன்படுத்துகிறோம்."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:372
msgid "Unitary backend"
msgstr "தனிப்பட்ட பின்னணி"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:383
msgid "Qiskit Aer also includes a ``unitary_simulator`` that works *provided all the elements in the circuit are unitary operations*. This backend calculates the :math:`2^n \\times 2^n` matrix representing the gates in the quantum circuit."
msgstr "Qiskit Aer ஒரு ` ` unitary_simulator ` ` that works * வழங்கும் அனைத்து தனிமங்களும் ஒருங்கிணைந்த செயல்பாடுகள் *. இந்த பின்னணி :math:` 2 ^ n \\times 2 ^ n ` matrix போன்றவற்றை குவாண்டம் சுற்றுப்பகுதியில் பிரதிபடுத்தும்."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:460
msgid "OpenQASM backend"
msgstr "OpenQASM பின்னணி"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:471
msgid "The simulators above are useful because they provide information about the state output by the ideal circuit and the matrix representation of the circuit. However, a real experiment terminates by *measuring* each qubit (usually in the computational :math:`|0\\rangle, |1\\rangle` basis). Without measurement, we cannot gain information about the state. Measurements cause the quantum system to collapse into classical bits."
msgstr "மேலேயுள்ள சிமுலேட்டர்கள் பயனுள்ளதாக இருக்கும், ஏனெனில் அவை மாநில சுற்று பற்றிய தகவல்களை இலட்சிய சுற்று மற்றும் சுற்றுகளின் மேட்ரிக்ஸ் பிரதிநிதித்துவத்தால் வழங்குகின்றன. இருப்பினும், ஒரு உண்மையான சோதனை ஒவ்வொரு குவிட்டையும் * அளவிடுவதன் மூலம் முடிவடைகிறது (வழக்கமாக கணக்கீட்டில்:math: `| 0 \\rangle, | 1 \\rangle` அடிப்படையில்). அளவீடு இல்லாமல், நாங்கள் மாநிலத்தைப் பற்றிய தகவல்களைப் பெற முடியாது. அளவீடுகள் குவாண்டம் அமைப்பு கிளாசிக்கல் பிட்களில் சரிவதற்கு காரணமாகின்றன."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:473
msgid "For example, suppose we make independent measurements on each qubit of the three-qubit GHZ state"
msgstr "எடுத்துக்காட்டாக, நாம் மூன்று-கிட் GHZ மாநிலத்தின் ஒவ்வொரு விகிதத்தில் சுதந்திரமான அளவீடுகள் செய்யும்"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:475
msgid "|\\psi\\rangle = (|000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"
msgstr "| \\psi\\rகோணம் = (| 000\\rகோணம் + | 111\\rகோணம்)/\\sqrt{2},\n\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:477
msgid "and let :math:`xyz` denote the bitstring that results. Recall that, under the qubit labeling used by Qiskit, :math:`x` would correspond to the outcome on qubit 2, :math:`y` to the outcome on qubit 1, and :math:`z` to the outcome on qubit 0."
msgstr "மற்றும் :math:` xyz ` xyz ` என்று முடிவடைந்த பிட்ஸிங்கை குறிக்கிறது. Qiskit, :math:` x ` க்கு பயன்படுத்தப்படும் குறும்படத்தின் கீழ், குவிட் 2, :math:` y ` 1, மற்றும் :math:` z ` க்கு குறும்படத்தில் முடிவுக்கு தெரியும்."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:483
msgid "Note: This representation of the bitstring puts the most significant bit (MSB) on the left, and the least significant bit (LSB) on the right. This is the standard ordering of binary bitstrings. We order the qubits in the same way (qubit representing the MSB has index 0), which is why Qiskit uses a non-standard tensor product order."
msgstr "குறிப்பு: பிட்ரசின் இந்த பிரதிநிதிப்பு இடது மிகவும் குறிப்பிடத்தக்க பிட் (MSB), மற்றும் குறைந்தது குறிப்பிடத்தக்க பிட் (LSB) வலது. இது இரும bitstrings-யின் நிலையான ஒழுங்குபடுத்தும். நாம் ஒரே வழியில் qubits வரிசையில் வரிசைப்படுத்துகிறது (MSB குறித்த குறும்படம் சுட்டி 0), அதனால் Qiskit ஒரு நிலையான tensor தயாரிப்பு வரிசை பயன்படுத்துகிறது."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:489
msgid "Recall the probability of obtaining outcome :math:`xyz` is given by"
msgstr "முடிவைப் பெறுவதற்கான நிகழ்தகவை நினைவுகூருங்கள்: math: `xyz` வழங்கியது"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:491
msgid "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:493
msgid "and as such for the GHZ state probability of obtaining 000 or 111 are both 1/2."
msgstr "ஆயிரக்கணக்கான GHZ மாநில உற்பத்தி மாநில அளவிலான ஆயிரம் அல்லது 111 இரண்டும்."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:495
msgid "To simulate a circuit that includes measurement, we need to add measurements to the original circuit above, and use a different Aer backend."
msgstr "அளவீடுகளைக் கொண்டிருக்கும் ஒரு சுற்றுச்சூழல், நாம் மேலே மூல சுற்றுப்பாதைக்கு அளவுகோல்களை சேர்க்க வேண்டும், மற்றும் வேறுபடும் ஆர் பின்னணியை பயன்படுத்தவும்."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:572
msgid "This circuit adds a classical register, and three measurements that are used to map the outcome of qubits to the classical bits."
msgstr "இந்த சுற்றுப்பாதை ஒரு கிளாசிரியர் பதிப்பு சேர்க்கிறது, மற்றும் மூன்று அளவுகள் that are used to map to map to map to the classical bits."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:574
msgid "To simulate this circuit, we use the ``qasm_simulator`` in Qiskit Aer. Each run of this circuit will yield either the bitstring 000 or 111. To build up statistics about the distribution of the bitstrings (to, e.g., estimate :math:`\\mathrm{Pr}(000)`), we need to repeat the circuit many times. The number of times the circuit is repeated can be specified in the ``execute`` function, via the ``shots`` keyword."
msgstr "இந்த சுற்றுப்பாதை பாதிப்பதற்கு, நாங்கள் Qiskit Aer ` ` qasm_simulator ` ` பயன்படுத்தும். இந்த சுற்றுச்சூழல் ஒவ்வொரு ஓட்டும் பிட்ரேட் 000 அல்லது 111. Bitstrings (to, எ. கா, கணக்கெடுப்பு :math:` \\mathrm{Pr}(000) `) பற்றிய புள்ளிவிவரங்கள் பற்றிய புள்ளிவிவரங்கள் உருவாக்க வேண்டும். இந்த சாதனத்தின் எண்ணிக்கை மறுபடியும், ` ` சுட்டுச்சொல் ` ` என்ற சொல் வழியாக, ` ` செயல்பாடு ` ` செயல்பாட்டில் குறிப்பிடலாம்."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:604
msgid "Once you have a result object, you can access the counts via the function ``get_counts(circuit)``. This gives you the *aggregated* binary outcomes of the circuit you submitted."
msgstr "உங்களிடம் result பொருள் கிடைத்ததும், `` get_counts (circuit) `` முறை மூலம் எண்ணிக்கையை அணுகலாம். இது நீங்கள் ஓடிய சோதனையின் மொத்த விளைவுகளை வழங்குகிறது."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:645
msgid "Approximately 50 percent of the time, the output bitstring is 000. Qiskit also provides a function ``plot_histogram``, which allows you to view the outcomes."
msgstr "ஏறத்தாழ 50 சதவீதம் நேரம், வெளியீடு பிட்ரம் 000. Qiskit also provides a function ` ` plot_histogram ` `, which allows you to view the outcomes."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:676
msgid "The estimated outcome probabilities :math:`\\mathrm{Pr}(000)` and :math:`\\mathrm{Pr}(111)` are computed by taking the aggregate counts and dividing by the number of shots (times the circuit was repeated). Try changing the ``shots`` keyword in the ``execute`` function and see how the estimated probabilities change."
msgstr "கணக்கெடுப்பு முடிவு :math:` \\mathrm{Pr}(000) ` and :math:` \\mathrm{Pr}(111) ` வருவாயில் கணக்கெடுப்பின் எண்ணிக்கை எடுத்துக்கொள்ளும் விகிதத்தினால் (சுற்றுச்சூழல் முறை). ` ` keyword in the ` திற ` ` செயல்திறன் மற்றும் கண்காணிப்பு சான்றுகள் எப்படி மாறுபடும் என்று பார்க்கவும்."

