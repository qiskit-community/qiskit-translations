msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-17 18:35+0000\n"
"PO-Revision-Date: 2021-06-26 11:09\n"
"Last-Translator: \n"
"Language-Team: Tamil\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/9_entanglement_verification.po\n"
"X-Crowdin-File-ID: 9380\n"
"Language: ta_IN\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:10
msgid "This page was generated from `tutorials/noise/9_entanglement_verification.ipynb`__."
msgstr "இந்த பக்கம் `tutorials/noise/9_entanglement_verification.ipynb`__ இலிருந்து உருவாக்கப்பட்டது."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/noise/9_entanglement_verification.ipynb>`_."
msgstr "`IBM குவாண்டம் ஆய்வகம் <https://quantum-computing.ibm.com/jupyter/tutorial/noise/9_entanglement_verification.ipynb>`_ இல் ஊடாடும் வகையில் இயக்கவும்."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:9
msgid "Entanglement Verification"
msgstr "என்டான்கில்மெண்ட் சரிபார்ப்பு"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:12
msgid "Introduction to the GHZ state"
msgstr "GHZ நிலையின் முன்னுரை"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:14
msgid "**The Greenberger-Horne-Zeilinger (GHZ)** State is a :math:`n`-qubit entangled state best defined by the following state vector:"
msgstr "**The Greenberger-Horne-Zeilinger (GHZ)** நிலை ஒரு :math:`n`-குபிட் எண்டங்கள் நிலை சிறப்பாக வரையறுக்கப்படுகிறது பின்வரும் ஸ்டேட் வெக்டர்:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:16
msgid "|{\\rm GHZ} \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}} , n > 2\n\n"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:18
msgid "Characterization of the GHZ state is very useful in assessing multi-qubit interactions, whose robustness is key to developing large scale quantum computers."
msgstr "மல்டி-க்யூபிட் இடைவினைகளை மதிப்பிடுவதற்கு GHZ நிலையின் தன்மை மிகவும் பயனுள்ளதாக இருக்கும், பெரிய அளவிலான குவாண்டம் கணினிகளை உருவாக்குவதற்கு அதன் வலிமை முக்கியமானது."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:21
msgid "Characterizing a quantum state"
msgstr "ஒரு குவாண்டம் நிலையின் சிறப்பியல்பு"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:23
msgid "Any mixed quantum state can be identified by a density matrix, defined as :math:`\\rho = \\sum_{i} p_i |\\psi_{i} \\rangle \\langle \\psi_{i}|`, where :math:`|\\psi_{i} \\rangle` are the pure quantum states forming the mixture and :math:`0 < p_i \\le 1`, :math:`\\sum_{i} p_i = 1` are the classical probabilities to be in state :math:`|\\psi_{i} \\rangle`. We denote the pure density matrix of an ideal GHZ State by :math:`\\rho_{p} \\equiv |{\\rm GHZ} \\rangle \\langle {\\rm GHZ}|`. We want to see how close this matrix is to the density matrix of a GHZ State as produced in an experiment, :math:`\\rho_{T}`. One method to quantify this similarity is to calculate the fidelity between the states, :math:`F(\\rho_{p},\\rho_{T})`"
msgstr "எந்த கலப்பு குவாண்டம் நிலையையும் டென்சிட்டி மேட்ரிஸ் மூலம் அடையாளம் காணலாம், இது வரையறுக்கப்படுகிறது :math:`\\rho = \\sum_{i} p_i |\\psi_{i} \\rangle \\langle \\psi_{i}|`, எங்கே :math:`|\\psi_{i} \\rangle` என்பது கலவையை உருவாக்கும் தூய குவாண்டம் நிலைகள் மற்றும் :math:`0 < p_i \\le 1`, :math:`\\sum_{i} p_i = 1` என்பது கிளாசிக்கல் நிகழ்தகவுகள் நிலை :math:`|\\psi_{i} \\rangle`. ஒரு சிறந்த GHZ மாநிலத்தின் தூய டென்சிட்டி மேட்ரிஸ் நாங்கள் குறிக்கிறோம் :math:`\\rho_{p} \\equiv |{\\rm GHZ} \\rangle \\langle {\\rm GHZ}|`. ஒரு பரிசோதனையில் தயாரிக்கப்பட்ட GHZ நிலையின் டென்சிட்டி மேட்ரிஸுடன் இந்த அணி எவ்வளவு நெருக்கமாக உள்ளது என்பதைப் பார்க்க விரும்புகிறோம் :math:`\\rho_{T}`. இந்த ஒற்றுமையை அளவிடுவதற்காக நிலைகளுக்கிடையிலான சரிபார்த்தல்யைக் கணக்கிடும் ஒரு வகை, :math:`F(\\rho_{p},\\rho_{T})`"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:26
msgid "F = \\Big[ Tr \\sqrt{\\sqrt{\\rho_{p}}\\rho_{T}\\sqrt{\\rho_{p}}} \\Big] ^{2}\n\n"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:28
msgid "The aim of this tutorial is two-fold: we will explore ways in which we can characterize the GHZ state, and ways in which we can use Ignis’ error mitigation tools to increase readout fidelity, regardless of characterization method"
msgstr "இந்த பயிற்சிகயின் நோக்கம் இரண்டு மடங்கு ஆகும்: GHZ நிலையை நாம் வகைப்படுத்தக்கூடிய வழிகளையும், மற்றும் தன்மை முறையைப் பொருட்படுத்தாமல், வாசிப்பு சரிபார்த்தலை அதிகரிக்க Ignis’ பிழை குறைத்தல் கருவிகளைப் பயன்படுத்தக்கூடிய வழிகளையும் ஆராய்வோம்"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:30
msgid "Before we go further, let us import everything we will need from basic Qiskit:"
msgstr "நாம் மேலும் செல்வதற்கு முன், நமக்கு தேவையான அனைத்தையும் அடிப்படை Qiskitலிருந்து இறக்குமதி செய்வோம்:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:63
msgid "The next two functions are from ignis. The first is for the general error mitigation technique, and the second is specifically for quantum tomography"
msgstr "அடுத்த இரண்டு செயல்பாடுகள் Ignisலிருந்து வந்தவை. முதலாவது பொதுவான பிழையை குறைத்தல் நுட்பத்திற்காகவும், மற்றும் இரண்டாவது குறிப்பாக குவாண்டம் முப்பரிமாண வரவிகஂகாகவும் ஆகுமஂ"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:86
msgid "The following import from the ``entanglement`` package contains information needed to create, parallelize and analyze GHZ State circuits"
msgstr "``என்டான்கில்மெண்ட்`` பேக்கேஜிலிருந்து பின்வரும் இறக்குமதி GHZ நிலை சர்கூட்களை உருவாக்க இணையாக மற்றும் பகுப்பாய்வு செய்யத் தேவையான தகவல்களைக் கொண்டுள்ளது"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:110
msgid "Preparing a GHZ State"
msgstr "GHZ நிலையைத் தயாரித்தல்"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:112
msgid "Let us first go over how to prepare a GHZ State:"
msgstr "GHZ நிலையை எவ்வாறு தயாரிப்பது என்பதை முதலில் பார்ப்போம்:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:114
msgid "Say we have a system of :math:`n` qubits, all prepared in the :math:`|0\\rangle` state:"
msgstr "எங்களிடம் :math:`n` க்யூபிட்ஸ் அமைப்பு இருப்பதாக வைத்திருங்கள், அனைத்தும் :math:`|0\\rangle` நிலையில் தயாரிக்கப்பட்டுள்ளன:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:116
msgid "|\\psi \\rangle = |00...0\\rangle\n\n"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:118
msgid "We apply a Hadamard gate to the first qubit: :math:`|0\\rangle \\longrightarrow \\frac{1}{\\sqrt{2}}(|0\\rangle + |1\\rangle)`. Our state now looks like:"
msgstr "முதல் க்யூபிட்டிற்கு நாம் ஒரு ஹாட்மார்ட் கேட் பயன்படுத்துகிறோம் :math:`|0\\rangle \\longrightarrow \\frac{1}{\\sqrt{2}}(|0\\rangle + |1\\rangle)` . நம் நிலை இப்போது:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:120
msgid "|\\psi \\rangle = \\frac{|00...0\\rangle + |10...0\\rangle}{\\sqrt{2}}\n\n"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:122
msgid "Applying on this state a sequence of :math:`n-1` CNOT gate between the :math:`n^{th}` and :math:`(n+1)^{th}` qubits for :math:`n = 0 \\ldots n-1` leaves the :math:`n+1` qubit at :math:`|0\\rangle` if the :math:`n^{th}` is in :math:`|0\\rangle`, and at :math:`|1\\rangle` if the :math:`n^{th}` is in :math:`|1\\rangle`, thus creating the GHZ State:"
msgstr "இந்த நிலையில் :math:`n-1` CNOT கேடின் வரிசையின் மூலம் :math:`n^{th}` மற்றும் :math:`(n+1)^{th}` க்யூபிட்ஸ்களுக்கு இடையில் :math:`n = 0 \\ldots n-1` யில் :math:`n+1` க்யூபிட்ஸ் வெளியேறுகிறது என்றால் அது :math:`|0\\rangle` யில் :math:`n^{th}` :math:`|0\\rangle` ஆகவும் மற்றும் அது :math:`|1\\rangle` யில் :math:`n^{th}` :math:`|1\\rangle` ஆகவும் இருக்கும், இதனால் GHZ நிலையை உருவாக்குகிறது:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:124
msgid "|GHZ \\rangle = \\frac{|00...0\\rangle + |11...1\\rangle}{\\sqrt{2}} \\equiv \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}}\n\n"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:126
msgid "The following function creates this “linear” circuit that can measure the GHZ state:"
msgstr "பின்வரும் செயல்பாடு GHZ நிலையை அளவிடக்கூடிய இந்த “நேரியல்” சர்கூட்களை உருவாக்குகிறது:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:203
msgid "Characterization, Part I"
msgstr "தன்மை, பகுதி I"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:206
msgid "Multiple Quantum Coherence (MQC)"
msgstr "Multiple Quantum Coherence (MQC)"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:208
msgid "Multiple Quantum Coherence (MQC) works by taking the preliminary preparation of an :math:`n` qubit GHZ State, and rotating each of the qubit states around the z axis by a phase :math:`\\phi`. After that, we apply a X gate, i.e., a :math:`\\pi` pulse around the x axis. Then, we apply the inverse of the operations we originally applied to get the GHZ state. In an ideal situation the final state is :math:`|\\psi \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + e^{i n \\phi}|1 \\rangle ^{\\otimes n}}{\\sqrt{2}}`. We can ideally observe the phase collected by projecting :math:`|\\psi \\rangle` onto the state :math:`|0 \\rangle ^{\\otimes n}`. This technique is reminiscent of an echo sequence, and has been shown to substantially improve the fidelity during readout."
msgstr "Multiple Quantum Coherence(MQC), ஒரு கணிதத்தின் ஆரம்ப தயாரிப்பை எடுத்துக்கொள்வதன் மூலம் செயல்படுகிறது :math:`n` க்யூபிட் GHZ நிலை, மற்றும் ஒவ்வொரு க்யூபிட் நிலைகளையும் z அச்சில் ஒரு நிலைமயாக சுழற்றுகிறது :math:`\\phi`. அதன் பிறகு, நாங்கள் ஒரு X கேட் பயன்படுத்துகிறோம், அதாவது, ஒரு :math:`\\pi` x அச்சைச் சுற்றி பல்ஸ். பின்னர், GHZ நிலையைப் பெற நாங்கள் முதலில் பயன்படுத்திய செயல்பாடுகளின் தலைகீழாக பயன்படுத்துகிறோம். ஒரு சிறந்த சூழ்நிலையில் இறுதி நிலை :math:`|\\psi \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + e^{i n \\phi}|1 \\rangle ^{\\otimes n}}{\\sqrt{2}} `. :math:`|\\psi \\rangle` நிலைக்கு :math:`|0 \\rangle ^{\\otimes n}`. இந்த நுட்பம் ஒரு எதிரொலி வரிசையை நினைவூட்டுகிறது, மேலும் வாசிப்பின் போது சரிபார்த்தலையை கணிசமாக மேம்படுத்துவதாகக் காட்டப்பட்டுள்ளது."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:211
msgid "The function below creates a linear MQC circuit. As with every circuit from here on, you can change the ``full_measurement`` argument to toggle between full measurement of all qubits or measurement of only the control qubit. Full measurement yields the most accurate results, but for more than 7 qubits, it is recommended to set it to false, and observe only the oscillations between the ``'0'`` and ``'1'`` states."
msgstr "கீழே உள்ள செயல்பாடு ஒரு நேரியல் MQC சர்கூட் உருவாக்குகிறது. இங்கிருந்து ஒவ்வொரு சர்கூட்களையும் போலவே, எல்லா க்யூபிட்ஸ்களின் முழு அளவீட்டுக்கும் அல்லது கட்டுப்பாட்டு குவிட்டின் அளவீட்டுக்கும் இடையில் மாறுவதற்கு ``முழு_அளவீடு`` விவாதத்தை மாற்றலாம். முழு அளவீட்டு மிகவும் துல்லியமான முடிவுகளைத் தருகிறது, ஆனால் 7 க்கும் மேற்பட்ட க்யூபிட்ஸ்களுக்கு, அதை பொய்யாக அமைக்க பரிந்துரைக்கப்படுகிறது, மேலும் ``'0'`` மற்றும் ``'1'`` நிலைகளுக்கு இடையிலான ஊசலாட்டங்களை மட்டுமே கவனிக்கவும்."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:286
msgid "After running experiments on this MQC circuit, we can pick a state to observe oscillations as we sweep :math:`\\phi` from :math:`0` to :math:`2 \\pi`. Our signal in theory should follow :math:`S(\\phi) = \\frac{1}{2}(1+\\cos(n \\phi))`. We then perform a Discrete Fourier Transform (DFT: :math:`I_{v}=(1/N)|\\sum_{\\phi}e^{iv\\phi}S(\\phi)`) to extract the Fidelity of the state, defined by the bounds :math:`2\\sqrt{I_{n}} \\leq F \\leq \\sqrt{I_{0}/2}+ \\sqrt{I_{n}}`; if desired, an actual value for the fidelity can be obtained: :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1})+\\sqrt{I_{n}})` (arXiv:1905.05720)."
msgstr "இந்த MQC சர்க்யூட்டில் சோதனைகளை இயக்கிய பிறகு, நாம் துடைக்கும்போது ஊசலாட்டங்களைக் கவனிக்க ஒரு மாநிலத்தைத் தேர்வு செய்யலாம் :math:`\\phi` from :math:`0` to :math:`2 \\pi`. கோட்பாட்டில் எங்கள் சமிக்ஞை பின்வருமாறு :math:`S(\\phi) = \\frac{1}{2}(1+\\cos(n \\phi))`. நம்பகத்தன்மையை பிரித்தெடுக்க ஒரு தனித்துவமான ஃபோரியர் உருமாற்றத்தை (DFT: :math:`I_{v}=(1/N)|\\sum_{\\phi}e^{iv\\phi}S(\\phi)`) செய்கிறோம். எல்லைகளால் வரையறுக்கப்பட்ட நிலை :math:`2\\sqrt{I_{n}} \\leq F \\leq \\sqrt{I_{0}/2}+ \\sqrt{I_{n}}`; விரும்பினால், நம்பகத்தன்மைக்கான உண்மையான மதிப்பைப் பெறலாம்: :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1})+\\sqrt{I_{n}})` (arXiv:1905.05720)."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:299
msgid "Parity Oscillations"
msgstr "பரிதி ஊசலாட்டங்கள்"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:301
msgid "The next method we use to characterize the GHZ state is parity oscillations. After preparing a GHZ state, we apply a combination of rotations about the x and y axes to create various superposition states as a function of :math:`\\phi`: :math:`U(\\phi) = \\otimes_{j}^{N} e^{i\\frac{\\pi}{4}(\\cos(\\phi)\\sigma_{x}^{j}+\\sin(\\phi)\\sigma_{y}^{j})}`. We then measure the expectation value :math:`\\langle \\otimes_{j}^{N} \\sigma_{z}^{j} \\rangle_{\\phi}` as a function of :math:`\\phi`, which in theory should lead to parity oscillations between 1 and -1."
msgstr "GHZ நிலையை வகைப்படுத்த நாம் பயன்படுத்தும் அடுத்த முறை பரிதி ஊசலாட்டங்கள். ஒரு GHZ நிலையைத் தயாரித்த பிறகு, x மற்றும் y அச்சுகளைப் பற்றிய சுழற்சிகளின் கலவையை பல்வேறு சூப்பர்போசிஷன் நிலைகளை ஒரு செயல்பாடாக உருவாக்குகிறோம் :math:`\\phi`: :math:`U(\\phi) = \\otimes_{j}^{N} e^{i\\frac{\\pi}{4}(\\cos(\\phi)\\sigma_{x}^{j}+\\sin(\\phi)\\sigma_{y}^{j})}`. நாங்கள் எதிர்பார்ப்பு மதிப்பை அளவிடுகிறோம் :math:`\\langle \\otimes_{j}^{N} \\sigma_{z}^{j} \\rangle_{\\phi}` இன் செயல்பாடாக :math:`\\phi`, இது கோட்பாட்டில் 1 மற்றும் -1 க்கு இடையில் பரிதி ஊசலாட்டங்களுக்கு வழிவகுக்கும்."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:304
msgid "The following function generates a circuit which is the Parity Oscillation equivalent of the MQC circuit given above"
msgstr "பின்வரும் செயல்பாடு ஒரு சர்கூட் ஒன்றை உருவாக்குகிறது, இது மேலே கொடுக்கப்பட்ட MQC சர்கூட்டுக்கு பரிதி ஊசலாட்டமாகும்"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:353
msgid "We can obtain fidelity for parity oscillations :math:`S_{\\phi}` from :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1}+C)`, where :math:`C`, the coherence is defined as :math:`2\\sqrt{I_{n}}`, following the same convention for the DFT as with the MQC method."
msgstr "பரிதி ஊசலாட்டங்களுக்கான சரிபார்த்தலை நாம் :math:`S_{\\phi}` from :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1}+C)` பெறலாம், :math:`C`,ஒத்திசைவு பின்வருமாறு வரையறுக்கப்படுகிறது :math:`2\\sqrt{I_{n}}`, MQC முறையைப் போலவே DFTக்கான அதே இணக்கத்தைப் பின்பற்றுகிறது."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:365
msgid "Tomography"
msgstr "முப்பரிமாண வரவி"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:367
msgid "Tomography measures the density matrix by producing many nominally identical states and measuring the state instances in different bases. The ideal result of a GHZ state is four equal density matrix elements at the 4 corners of the tensor-product basis, with all other elements vanishing. Although the fidelity can be readily calculated by this method, the method is slow (requires exponential number of measurements in n), and takes prohibitively long times if n is larger than 7 or so. Nevertheless, we will show below how to perform this method as it is relevant for small numbers of qubits."
msgstr "முப்பரிமாண வரவி பல பெயரளவில் ஒரே மாதிரியான நிலைகளை உருவாக்குவதன் மூலமும், வெவ்வேறு நிகழ்வுகளில் நிலை நிகழ்வுகளை அளவிடுவதன் மூலமும் டென்சிட்டி மேட்ரிஸை அளவிடுகிறது. GHZ நிலையின் சிறந்த முடிவு டென்சர்-தயாரிப்பு அடிப்படையில் 4 மூலைகளில் நான்கு சம டென்சிட்டி மேட்ரிஸ் உறுப்புகள், மற்ற அனைத்து உறுப்புகளும் மறைந்துவிடும். இந்த முறையால் சரிபார்த்தலை உடனடியாகக் கணக்கிட முடியும் என்றாலும், இந்த முறை மெதுவாக உள்ளது (n இல் அதிவேக எண்ணிக்கையிலான அளவீடுகள் தேவை), மேலும் n 7 அல்லது அதற்கு மேற்பட்டதாக இருந்தால் தடைசெய்யப்பட்ட நீண்ட நேரம் எடுக்கும். ஆயினும்கூட, இந்த முறையை சிறிய எண்ணிக்கையிலான க்யூபிட்ஸ்களுக்குப் பொருத்தமாக இருப்பதால் அதை எவ்வாறு செய்வது என்று கீழே காண்பிப்போம்."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:380
msgid "Parallelizing circuits"
msgstr "இணையான சர்கூட்"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:382
msgid "The above “linear” circuits are good to perform simulations, but what do we do when we use real devices, where the system can have an arbitrary topology and various errors? We are specifically targeting real hardware here, not just Aer simulation. One technique to reduce real-hardware effects is to parallelize the CNOT gates and thus create a shorter-depth circuit. This can be hugely beneficial efficiency wise, and fidelity wise. The class ``BConfig`` from the module ``parallelize`` does exactly this."
msgstr "மேலே உள்ள “நேரியல்r” சுற்றுகள் உருவகப்படுத்துதல்களைச் செய்வது நல்லது, ஆனால் உண்மையான devices பயன்படுத்தும் போது நாம் என்ன செய்வது, அங்கு கணினி தன்னிச்சையான இடவியல் மற்றும் பல்வேறு பிழைகள் இருக்கக்கூடும்? Aer உருவகப்படுத்துதல் மட்டுமல்லாமல், உண்மையான வன்பொருளை இங்கு இலக்கு வைக்கிறோம். உண்மையான-வன்பொருள் விளைவுகளை குறைப்பதற்கான ஒரு நுட்பம், CNOT கேட்ஸ்களை இணைத்து, குறுகிய-ஆழ சர்கூட் ஒன்றை உருவாக்குவதாகும். இது மிகவும் பயனுள்ள செயல்திறன் வாரியாகவும், சரிபார்த்தல் வாரியாகவும் இருக்கும். ``parallelize`` தொகுதியிலிருந்து ``BConfig`` வகுப்பு இதைச் சரியாகச் செய்கிறது."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:385
msgid "First we must configure the optimal backend we want to use. We will consider a simulation backend, ``'ibmq_qasm_simulator'``, disguised as a real device, ``'ibmq_16_melbourne'`` by using a the mock backend ``'FakeMelbourne'``"
msgstr "முதலில் நாம் பயன்படுத்த விரும்பும் உகந்த பின்தளத்தில் உள்ளமைக்க வேண்டும். ஒரு உண்மையான device மாறுவேடமிட்டுள்ள ``'ibmq_qasm_simulator'`` என்ற உருவகப்படுத்துதல் பின்தளத்தில், ``'ibmq_16_melbourne'`` ஒரு போலி பின்தளத்தில் ``'FakeMelbourne'`` ஐப் பயன்படுத்துவோம்"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:409
msgid "Using the ``noise`` module, we can now define a noise model from ``'ibmq_16_melbourne'`` to “assign” to ``'ibmq_qasm_simulator'``."
msgstr "``இரைச்சல்`` தொகுதியைப் பயன்படுத்தி, இப்போது ``'ibmq_16_melbourne'`` இலிருந்து ``'ibmq_qasm_simulator'`` க்கு \"ஒதுக்க\" ஒரு இரைச்சல் மாதிரியை வரையறுக்கலாம்."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:432
msgid "And there we have it. From now on, in the tutorial, when using a real device, not a simulation, just take out every mention and assignment of ``noise_model`` and ``coupling_map``, and assign the real device to ``backend``. The simulator used from now on is no substitute for running a real device."
msgstr "அங்கே நாம் அதை வைத்திருக்கிறோம். இனிமேல், பயிற்சிகளில், ஒரு உண்மையான device பயன்படுத்தும் போது, ​​ஒரு உருவகப்படுத்துதல் அல்ல, ``noise_model`` மற்றும் ``coupling_map`` ஆகியவற்றின் ஒவ்வொரு குறிப்பையும் ஒதுக்கீட்டையும் எடுத்து, உண்மையான device ``backend`` ஒதுக்கவும். இனிமேல் பயன்படுத்தப்படும் சிமுலேட்டர் உண்மையான device இயக்குவதற்கு மாற்றாக இல்லை."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:443
msgid "``BConfig`` lays the blueprint for creating parallelized circuits. Let us initialize an object taking in the real device we just defined, and name it ``protocirc``. All of our experiments will use it:"
msgstr "இணையான சர்கூடை உருவாக்குவதற்கான வரைபடத்தை ``BConfig`` வைக்கிறது. நாம் இப்போது வரையறுத்துள்ள உண்மையான device ஒரு பொருளை எடுத்துக்கொள்வதைத் துவக்கி, அதற்கு ``protocirc`` என்று பெயரிடுவோம். எங்கள் பரிசோதனைகள் அனைத்தும் இதைப் பயன்படுத்தும்:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:465
msgid "Error Mitigation"
msgstr "பிழை குறைத்தல்"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:467
msgid "Qiskit Ignis provides very accurate tools to take raw data and return calibrated data. This is done by getting the raw data, in the form of a vector :math:`v_{raw}` and getting a calibration matrix :math:`A`. The output is then the solution to the optimization problem: :math:`argmin_{v_{cal}} ||Av_{cal}-v_{raw}||^{2}`"
msgstr "பதனிடப்படாத தரவுகளை எடுத்து அளவீடு செய்யப்பட்ட தரவைத் தர Qiskit Ignis மிகவும் துல்லியமான கருவிகளை வழங்குகிறது. பதனிடப்படாத தரவுகளை ஒரு vector வடிவத்தில் பெறுவதன் மூலம் இது செய்யப்படுகிறது :math:`v_{raw}` மற்றும் ஒரு அளவொப்புமை அணி :math:`A`. வெளியீடு பின்னர் தேர்வுமுறை சிக்கலுக்கான தீர்வாகும் :math:`argmin_{v_{cal}} ||Av_{cal}-v_{raw}||^{2}`"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:479
msgid "Experiment Time"
msgstr "பரிசோதனை நேரம்"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:482
msgid "Preliminary Steps"
msgstr "பூர்வாங்க படிகள்"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:484
msgid "The probabilities of measuring :math:`|0\\rangle ^{\\otimes n}` and :math:`|1\\rangle^{\\otimes n}` in the GHZ state are important in calculating fidelity. For this, we need to run the following test"
msgstr "அளவிடுவதற்கான நிகழ்தகவுகள் :math:`|0\\rangle ^{\\otimes n}` மற்றும் :math:`|1\\rangle^{\\otimes n}` GHZ நிலையில் சரிபார்த்தலை கணக்கிடுவதில் முக்கியம். இதற்காக, பின்வரும் சோதனையை இயக்க வேண்டும்"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:495
msgid "We begin by defining standard execution parameters:"
msgstr "நிலையான செயல்படுத்தல் ஆர்குமென்ட்க்களை வரையறுப்பதன் மூலம் நாங்கள் தொடங்குகிறோம்:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:845
msgid "Now with error mitigation:"
msgstr "இப்போது பிழை குறைத்தலுடன்:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:975
msgid "We will load these values in a dictionary for assessing fidelity later on:"
msgstr "சரிபார்த்தலை மதிப்பிடுவதற்கு இந்த மதிப்புகளை ஒரு அகராதியில் ஏற்றுவோம்:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:997
msgid "Part 1 : MQC"
msgstr "பகுதி 1: MQC"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:999
msgid "We now retrieve a parallelized MQC circuit for the n qubit device"
msgstr "இப்போது n க்யூபிட் deviceக்கான இணையான MQC சர்கூட் மீட்டெடுகிறோம்"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1057
msgid "We now execute the MQC experiment:"
msgstr "நாங்கள் இப்போது MQC பரிசோதனையை இயக்குகிறோம்:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1100
msgid "Now we will plot the amount of counts measured for :math:`|0 \\rangle ^{\\otimes n}` as a function of phase. It is important to note that when using a parametrized circuit like the one here, the method ``get_counts()`` accepts an **index** and not a **circuit**. In any other type of experiment, ``get_counts()`` accepts a **circuit**."
msgstr "நிலையின் செயல்பாடாக :math:`|0 \\rangle ^{\\otimes n}` அளவிடப்பட்ட எண்ணிக்கையின் அளவை இப்போது வரைவோம். இங்குள்ளதைப் போன்ற அளவுருப்படுத்தப்பட்ட சர்கூட்யை பயன்படுத்தும் போது, ``get_counts()`` முறை ஒரு **அட்டவணை** ஏற்றுக்கொள்கிறது, ஆனால் **சர்கூட்** அல்ல என்பதை கவனத்தில் கொள்ள வேண்டும். வேறு எந்த வகை பரிசோதனையிலும், ``get_counts()`` ஒரு **circuit** ஐ ஏற்றுக்கொள்கிறது."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1131
msgid "Now we get started on error mitigation. We create an identical quantum register and use complete_meas_cal from Ignis, to create circuits for calibrated measurements to be executed, and a calibration matrix."
msgstr "இப்போது பிழை குறைத்தலை தொடங்குவோம். நாங்கள் ஒரே மாதிரியான quantum register உருவாக்கி, Ignisலிருந்து complete_meas_cal பயன்படுத்துகிறோம், அளவீடு செய்யப்பட்ட அளவீடுகள் செயல்படுத்தப்பட வேண்டிய சர்கூட்கள் மற்றும் ஒரு அளவொப்புமை அணி."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1197
msgid "Finally, we have our error mitigated results:"
msgstr "இறுதியாக, எங்கள் பிழையைக்குறைக்கும் முடிவுகள் உள்ளன:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1218
msgid "We can see how the error mitigated results yield a far greater fidelity than the raw data"
msgstr "பிழையைக்குறைக்கும் முடிவுகள் பதனிடப்படாத தரவை விட மிகப் பெரிய சரிபார்த்தலையை எவ்வாறு தருகின்றன என்பதை நாம் காணலாம்"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1333
msgid "We now plot the DFT and compare the heights of the peaks to give bounds for the fidelity"
msgstr "நாங்கள் இப்போது DFTயை வரைகிறோம் மற்றும் சிகரங்களின் உயரங்களை ஒப்பிட்டு சரிபார்த்தலுக்கு எல்லைக்குட்பட்டு வழங்குகிறோம்"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1344
msgid "Statistical bootstrapping has found that the error on these measurements is at most 1.5% (arXiv 1905.05720), so these result fall within error bounds, despite the fidelity being slightly higher than the upper bound, and show how error mitigation dramatically increases fidelity"
msgstr "புள்ளிவிவர பூட்ஸ்ட்ராப்பிங் இந்த அளவீடுகளில் பிழை அதிகபட்சம் 1.5% (arXiv 1905.05720) இருப்பதைக் கண்டறிந்துள்ளது, எனவே இந்த முடிவு பிழையின் எல்லைக்குட்பட்டு வருகிறது, சரிபார்த்தல் மேல் வரம்பை விட சற்றே அதிகமாக இருந்தாலும், பிழை குறைத்தல் எவ்வாறு வியத்தகு முறையில் சரிபார்த்தலையை அதிகரிக்கிறது என்பதைக் காட்டுகிறது"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1356
msgid "Part 2: Parity Oscillation"
msgstr "பகுதி 2: பரிதி ஊசலாட்டங்கள்"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1358
msgid "We now retrieve a parallelized Parity Oscillation circuit for the n qubit device, and run experiments in the same fashion as we did in MQC."
msgstr "நாங்கள் இப்போது n க்யூபிட் deviceற்கான ஒரு இணையான பரிதி ஊசலாட்டங்கள் சர்கூட்டை மீட்டெடுக்கிறோம், மேலும் MQC இல் செய்ததைப் போலவே பரிசோதனைகளையும் இயக்குகிறோம்."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1449
msgid "Now we construct the :math:`\\otimes _{j}^{N} \\sigma_z^{j}` matrix for instruction, although this is already taken into account in the following method, ``entanglement.analysis.composite_pauli_z_expvalue()``:"
msgstr "இப்போது நாம் :math:`\\otimes _{j}^{N} \\sigma_z^{j}` வழிமுறைகளுக்கான அணி கட்டமைக்கிறோம், இது ஏற்கனவே பின்வரும் முறையில் கணக்கில் எடுத்துக்கொள்ளப்பட்டாலும், ``entanglement.analysis.composite_pauli_z_expvalue()``:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1472
msgid "Now we want to make sure that our list of counts is correctly ordered so that it coincides with the states of the :math:`\\otimes _{j}^{N} \\sigma_z^{j}`, so that calculating :math:`\\langle \\otimes _{j}^{N} \\sigma_z^{j} \\rangle` will be as simple as taking the dot product of this ordered list with the diagonal of :math:`\\otimes _{j}^{N} \\sigma_z^{j}`. The ``composite_pauli_z_expvalue`` function does just that; it takes a circuit and appropriately orders the state vector counts. We can plot this dot product as a function of :math:`\\phi` to observe parity oscillations."
msgstr "இப்போது எங்கள் எண்ணிக்கையின் பட்டியல் சரியாக வரிசைப்படுத்தப்பட்டுள்ளதா என்பதை உறுதிப்படுத்த விரும்புகிறோம், இதனால் அது நிலைகளுடன் ஒத்துப்போகிறது :math:`\\otimes _{j}^{N} \\sigma_z^{j}`, so that calculating :math:`\\langle \\otimes _{j}^{N} \\sigma_z^{j} \\rangle` இந்த ஆர்டர் செய்யப்பட்ட பட்டியலின் புள்ளி தயாரிப்பை மூலைவிட்டத்துடன் எடுத்துக்கொள்வது போல எளிமையாக இருக்கும் :math:`\\otimes _{j}^{N} \\sigma_z^{j}`. ``composite_pauli_z_expvalue`` செயல்பாடு அதை செய்கிறது; இது ஒரு சர்கூட் எடுத்து, ஸ்டேட் வெக்டர் எண்ணிக்கையை சரியான முறையில் ஆர்டர் செய்கிறது. இந்த புள்ளி தயாரிப்பை நாம் ஒரு செயல்பாடாக வரையலாம் :math:`\\phi` பரிதி ஊசலாட்டங்களைக் கவனிக்க."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1523
msgid "Now for standard error mitigation:"
msgstr "இப்போது நிலையான பிழை குறைத்தலுக்கு:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1618
msgid "We can see how error mitigation dramatically improves our measurement (much more so in PO than in MQC). Let us quantify this using the same DFT method we used in MQC, and calculating the actual fidelities:"
msgstr "பிழை குறைத்தல் எவ்வாறு எங்கள் அளவீட்டை வியத்தகு முறையில் மேம்படுத்துகிறது என்பதைக் காணலாம் (MQC ஐ விட PO இல் அதிகம்). MQC இல் நாங்கள் பயன்படுத்திய அதே DFT முறையைப் பயன்படுத்தி இதை அளவிடுவோம், மேலும் உண்மையான சரிபார்த்தலையைக் கணக்கிடுவோம்:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1696
msgid "As we see, the raw fidelity is much lower than what is achieved with MQC, but the error mitigated result is about the same."
msgstr "நாம் பார்ப்பது போல், பதனிடப்படாத சரிபார்த்தல் MQC உடன் அடையப்பட்டதை விட மிகக் குறைவு, ஆனால் பிழையைத் தணிக்கும் முடிவு ஒரே மாதிரியாக இருக்கும்."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1708
msgid "Part 3: Tomography"
msgstr "பகுதி 3: முப்பரிமாண வரவி"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1710
msgid "The first step in this experiment to just pass a simple GHZ state with *no* measurements. Also, the circuit cannot be transpiled; the ``transpiled`` argument in the ``getGHZChecker()`` method can be turned on and off as is shown"
msgstr "* no * அளவீடுகள் இல்லாத எளிய GHZ நிலையை கடக்க இந்த சோதனையின் முதல் படி. மேலும், சுற்று மாற்ற முடியாது; `` getGHZChecker () `` முறையின் ``transpiled`` வாதம் காட்டப்பட்டுள்ளபடி இயக்கப்படலாம் மற்றும் அணைக்கப்படலாம்"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1745
msgid "We now pass a simulated backend from ``Aer`` to get theoretical statevector counts"
msgstr "இப்போது தத்துவார்த்த நிலைவெக்டர் எண்ணிக்கையைப் பெற `` Aer`` இலிருந்து உருவகப்படுத்தப்பட்ட பின்தளத்தில் அனுப்புகிறோம்"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1788
msgid "This following code runs tomography experiments on the circuit we defined first, which is then compared to the theoretical statevector to generate a density matrix"
msgstr "இந்த பின்வரும் குறியீடு நாம் முதலில் வரையப்பட்ட சுற்றுவட்டத்தில் டோமோகிராபி சோதனைகளை இயக்குகிறது, பின்னர் இது அடர்த்தி மேட்ரிக்ஸை உருவாக்க கோட்பாட்டு ஸ்டேட்வெக்டருடன் ஒப்பிடப்படுகிறது"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1840
msgid "From here we can get the fidelity, although this method is not as fool proof as the one we will get to eventually:"
msgstr "இங்கிருந்து நாம் நம்பகத்தன்மையைப் பெறலாம், இருப்பினும் இந்த முறை முட்டாள்தனமான ஆதாரம் அல்ல என்றாலும், இறுதியில் நாம் பெறுவோம்:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1861
msgid "…And now for error mitigation…"
msgstr "… இப்போது பிழை குறைப்புக்காக…"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1939
msgid "Now, using ``qiskit.visualization``, we can plot the raw density matrix, real, and imaginary parts being on separate plots,…"
msgstr "இப்போது, ​​`` qiskit.visualization`` ஐப் பயன்படுத்தி, மூல அடர்த்தி மேட்ரிக்ஸ், உண்மையான மற்றும் கற்பனை பாகங்கள் தனித்தனி அடுக்குகளில் இருப்பதை நாங்கள் திட்டமிடலாம்,…"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1978
msgid "And also the error mitigated density matrix,…"
msgstr "மேலும் பிழை தணிக்கப்பட்ட அடர்த்தி அணி,…"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2017
msgid "The actual density matrices can be obtained using the ``fit()`` method. Once we have the density matrix, we can compute the fidelity, which is nothing but half the sum of the four corners of the density matrix; the following method helps us:"
msgstr "உண்மையான அடர்த்தி மெட்ரிக்குகளை `` fit () `` முறையைப் பயன்படுத்தி பெறலாம். அடர்த்தி மேட்ரிக்ஸைக் கொண்டவுடன், நம்பகத்தன்மையை நாம் கணக்கிட முடியும், இது அடர்த்தி மேட்ரிக்ஸின் நான்கு மூலைகளின் பாதித் தொகையைத் தவிர வேறில்லை; பின்வரும் முறை நமக்கு உதவுகிறது:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2091
msgid "As we see, the raw fidelity is much lower than what is achieved with either MQC or Parity Oscillations, but the error mitigated result is about the same."
msgstr "நாம் பார்ப்பது போல், மூல நம்பகத்தன்மை MQC அல்லது பரிதி அலைவுகளுடன் அடையப்படுவதை விட மிகக் குறைவு, ஆனால் பிழையைத் தணிக்கும் முடிவு ஒரே மாதிரியாக இருக்கும்."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2093
msgid "**A note on tomography**"
msgstr "**A note on tomography**"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2095
msgid "Do not perform quantum tomography with >5 qubits"
msgstr "> 5 குவிட்களுடன் குவாண்டம் டோமோகிராஃபி செய்ய வேண்டாம்"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2107
msgid "Conclusion"
msgstr "முடிவுரை"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2109
msgid "In conclusion, we see that without error mitigation, MQC is the superior method for characterizing the GHZ state. However, with error mitigation, all methods can, at least for a small number of qubits, achieve a much greater fidelity, and all near the same value. To get more accurate results, aside from using a real device, it is worth increasing the number of shots four to eight-fold. It may be worth comparing how the parallelized circuits used in this notebook perform fidelity-wise versus linearized circuits."
msgstr "முடிவில், பிழையைத் தணிக்காமல், MQC என்பது GHZ நிலையை வகைப்படுத்துவதற்கான சிறந்த முறையாகும். இருப்பினும், பிழையைத் தணிப்பதன் மூலம், அனைத்து முறைகளும், குறைந்த பட்சம் ஒரு சிறிய எண்ணிக்கையிலான வினாடிகளுக்கு, அதிக நம்பகத்தன்மையை அடையலாம், மேலும் அனைத்தும் ஒரே மதிப்பிற்கு அருகில் இருக்கும். மிகவும் துல்லியமான முடிவுகளைப் பெற, ஒரு உண்மையான சாதனத்தைப் பயன்படுத்துவதைத் தவிர, காட்சிகளின் எண்ணிக்கையை நான்கு முதல் எட்டு மடங்கு அதிகரிப்பது மதிப்பு. இந்த நோட்புக்கில் பயன்படுத்தப்படும் இணையான சுற்றுகள் நம்பகத்தன்மை வாரியாக மற்றும் நேர்கோட்டுப்படுத்தப்பட்ட சுற்றுகளை எவ்வாறு செய்கின்றன என்பதை ஒப்பிடுவது மதிப்புக்குரியதாக இருக்கலாம்."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2122
msgid "External collaborators"
msgstr "வெளிப்புற ஒத்துழைப்பாளர்கள்"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2124
msgid "Rohith Karur"
msgstr "ரோஹித் கருர்"

