msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 17:09+0000\n"
"PO-Revision-Date: 2021-06-28 18:37\n"
"Last-Translator: \n"
"Language-Team: Tamil\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/6_repetition_code.po\n"
"X-Crowdin-File-ID: 9142\n"
"Language: ta_IN\n"

#: ../../tutorials/noise/6_repetition_code.ipynb:10
msgid "This page was generated from `tutorials/noise/6_repetition_code.ipynb`__."
msgstr "இந்த பக்கம் `tutorials/noise/6_repetition_code.ipynb`__ லிருந்து உருவாக்கப்பட்டது."

#: ../../tutorials/noise/6_repetition_code.ipynb:9
msgid "Repetition Codes"
msgstr "மறுபடியும் குறியீடுகள்"

#: ../../tutorials/noise/6_repetition_code.ipynb:21
msgid "Introduction"
msgstr "முன்னுரை"

#: ../../tutorials/noise/6_repetition_code.ipynb:23
msgid "In quantum error correction we take many noisy qubits (which we call *physical qubits*) and use them to store a smaller number of *logical qubits*. The error correction procedure is designed to detect and correct for the effects of noise. This makes the logical qubits much less noisy and more reliable than the physical ones from which they are built."
msgstr "குவாண்டம் பிழை திருத்தத்தில் நாம் பல சத்தமில்லாத குவிட்களை எடுத்துக்கொள்கிறோம் (அவற்றை * physical qubits* என்று அழைக்கிறோம்) மற்றும் குறைந்த எண்ணிக்கையிலான *logical qubits* சேமிக்க அவற்றைப் பயன்படுத்துகிறோம். பிழை திருத்தும் செயல்முறை சத்தத்தின் விளைவுகளை கண்டறிந்து சரிசெய்ய வடிவமைக்கப்பட்டுள்ளது. இது தர்க்கரீதியான வினாடிகளை அவை கட்டியெழுப்பிய தீகங்களைக் காட்டிலும் மிகக் குறைவான சத்தமாகவும் நம்பகத்தன்மையுடனும் ஆக்குகிறது."

#: ../../tutorials/noise/6_repetition_code.ipynb:25
msgid "The repetition code is a simple example of quantum error correction, in which a logical *bit* is stored rather than a logical *qubit*. A given instance of the repetition code is defined by two numbers, which we call :math:`d` and :math:`T`."
msgstr "மறுபடியும் குறியீடு குவாண்டம் பிழை திருத்தம் செய்வதற்கான எளிய எடுத்துக்காட்டு, இதில் ஒரு தருக்க *bit* ஒரு தருக்க *quibit* ஐ விட சேமிக்கப்படுகிறது. மறுபடியும் குறியீட்டின் கொடுக்கப்பட்ட நிகழ்வு இரண்டு எண்களால் வரையறுக்கப்படுகிறது, இதை நாம் அழைக்கிறோம் :math:`d` மற்றும் :math:`T`."

#: ../../tutorials/noise/6_repetition_code.ipynb:27
msgid "The :math:`d` parameter determines how many physical qubits are used. The actual information about the logical bit is stored in :math:`d` qubits (which we’ll call *code qubits*). The encoding is done in a very simple way: to encode a ``0``, all these qubits are set in the state :math:`|0\\rangle`, to encode a ``1`` they are set to :math:`|1\\rangle`. To readout the value, you can just look at any qubit. To read it out in a way that protects against single qubit errors, you can read out all the qubits and take a majority vote."
msgstr ":math:`d` அளவுரு எத்தனை உடல் வினாக்கள் பயன்படுத்தப்படுகின்றன என்பதை தீர்மானிக்கிறது. தருக்க பிட் பற்றிய உண்மையான தகவல்கள் இதில் சேமிக்கப்பட்டுள்ளன: :math:`d` குவிட்ஸ் (இதை நாங்கள் *code qubits* என்று அழைக்கிறோம்). குறியாக்கம் மிகவும் எளிமையான முறையில் செய்யப்படுகிறது: ``0`` ஐ குறியாக்க, இந்த வினாடிகள் அனைத்தும் மாநிலத்தில் அமைக்கப்பட்டுள்ளன :math:`| 0 \\rangle`, அவை அமைக்கப்பட்ட ``1`` ஐ குறியாக்க :math:`| 1 \\rangle`. மதிப்பைப் படிக்க, நீங்கள் எந்த குவிட்டையும் பார்க்கலாம். ஒற்றை குவிட் பிழைகள் இருந்து பாதுகாக்கும் வகையில் இதைப் படிக்க, நீங்கள் அனைத்து வினாடிகளையும் படித்து பெரும்பான்மை வாக்குகளைப் பெறலாம்."

#: ../../tutorials/noise/6_repetition_code.ipynb:30
msgid "It is not only at readout that we can extract useful information that will help us correct errors. We can also extract information while the logical bit sits idle, or even while it is involved in computation."
msgstr "பிழைகளை சரிசெய்ய உதவும் பயனுள்ள தகவல்களைப் பிரித்தெடுக்க முடியும் என்பது வாசிப்பில் மட்டுமல்ல. தருக்க பிட் செயலற்ற நிலையில் இருக்கும்போது அல்லது கணக்கீட்டில் ஈடுபடும்போது கூட தகவல்களைப் பிரித்தெடுக்க முடியும்."

#: ../../tutorials/noise/6_repetition_code.ipynb:32
msgid "Since this is an exercise in quantum error correction, we will do this in a way that would also work for logical *qubits*. Specifically, our method of extracting information about errors must not extract any information regarding the stored logical information. In the quantum case, this is required so that we do not disturb superposition states of the stored qubits."
msgstr "இது குவாண்டம் பிழை திருத்தம் செய்வதற்கான ஒரு பயிற்சி என்பதால், இதை நாங்கள் தர்க்கரீதியான * qubits * வேலை செய்யும் வகையில் செய்வோம். குறிப்பாக, பிழைகள் பற்றிய தகவல்களைப் பிரித்தெடுக்கும் எங்கள் முறை சேமிக்கப்பட்ட தர்க்கரீதியான தகவல்களைப் பற்றிய எந்த தகவலையும் பிரித்தெடுக்கக்கூடாது. குவாண்டம் வழக்கில், இது தேவைப்படுகிறது, இதனால் சேமிக்கப்பட்ட குவிட்களின் சூப்பர் பொசிஷன் நிலைகளை நாம் தொந்தரவு செய்யக்கூடாது."

#: ../../tutorials/noise/6_repetition_code.ipynb:34
msgid "We will extract information over :math:`T` rounds of *syndrome measurements*. For the repetition code, these are based on the fact that all code qubits should be in the same state (all :math:`|0\\rangle` or all :math:`|1\\rangle`). Any departure from this is therefore a signature of error. Specifically, we imagine our :math:`d` code qubits sitting along a line. We will then perform a measurement on each pair of neighboring code qubits. This will tell us whether they are the same or different, without extracting any information on what their values are."
msgstr ":math:`T` *syndrome measurements*. மறுபடியும் குறியீட்டைப் பொறுத்தவரை, இவை எல்லா குறியீடு வினாக்களும் ஒரே நிலையில் இருக்க வேண்டும் என்ற உண்மையை அடிப்படையாகக் கொண்டவை (அனைத்தும் :math:`| 0 \\rangle` அல்லது அனைத்தும் :math:`| 1 \\rangle`). இதிலிருந்து எந்தவொரு புறப்பாடும் பிழையின் கையொப்பமாகும். குறிப்பாக, எங்கள் :math:`d` குறியீடு ஒரு வரியுடன் அமர்ந்திருப்பதை நாங்கள் கற்பனை செய்கிறோம். ஒவ்வொரு ஜோடி அண்டை குறியீடு வினாடிகளிலும் ஒரு அளவீடு செய்வோம். அவற்றின் மதிப்புகள் என்ன என்பது பற்றிய எந்த தகவலையும் பிரித்தெடுக்காமல், அவை ஒரே மாதிரியானவை அல்லது வேறுபட்டவை என்பதை இது நமக்குத் தெரிவிக்கும்."

#: ../../tutorials/noise/6_repetition_code.ipynb:37
msgid "The implementation of these measurements requires :math:`d-1` additional qubits, which we will call *link qubits* for the repetition code. By performing two CNOTs between the pair of code qubits and a corresponding link qubit, the required information (and only the required information) is placed on the link qubit and can then be measured."
msgstr "இந்த அளவீடுகளை செயல்படுத்துவதற்கு இது தேவைப்படுகிறது :math:`d-1` கூடுதல் குவிட்கள், அவை மீண்டும் குறியீட்டு குறியீட்டிற்கு *link qubits* என்று அழைக்கிறோம். ஜோடி குறியீட்டு குவிட்டுகளுக்கும் அதனுடன் தொடர்புடைய இணைப்பு குவிட்டிற்கும் இடையில் இரண்டு CNOT களைச் செய்வதன் மூலம், தேவையான தகவல்கள் (மற்றும் தேவையான தகவல்கள் மட்டுமே) இணைப்பு குவிட்டில் வைக்கப்பட்டு பின்னர் அளவிடப்படலாம்."

#: ../../tutorials/noise/6_repetition_code.ipynb:95
msgid "Here we provide tools for creating and testing repetition codes. The first thing we need to do is import them."
msgstr "மறுபடியும் குறியீடுகளை உருவாக்குவதற்கும் சோதனை செய்வதற்கும் இங்கே கருவிகளை வழங்குகிறோம். நாம் செய்ய வேண்டிய முதல் விஷயம் அவற்றை இறக்குமதி செய்வதுதான்."

#: ../../tutorials/noise/6_repetition_code.ipynb:119
msgid "Creating a repetition code"
msgstr "மீண்டும் ஒரு குறியீட்டை உருவாக்குதல்"

#: ../../tutorials/noise/6_repetition_code.ipynb:121
msgid "The ``repetition_code`` class creates a code for given values of :math:`d` and :math:`T`."
msgstr "``repetition_code`` வகுப்பு கொடுக்கப்பட்ட மதிப்புகளுக்கு ஒரு குறியீட்டை உருவாக்குகிறது :math:`d` மற்றும் :math:`T`."

#: ../../tutorials/noise/6_repetition_code.ipynb:144
msgid "With this we can inspect various properties of the code, such as the names of the qubit registers used for the code and ancilla qubits."
msgstr "இதன் மூலம் குறியீட்டின் பல்வேறு பண்புகளை நாம் ஆராயலாம், அதாவது குறியீட்டிற்கு பயன்படுத்தப்படும் குவிட் பதிவேடுகளின் பெயர்கள் மற்றும் துணை குவிட்கள்."

#: ../../tutorials/noise/6_repetition_code.ipynb:185
msgid "These registers are also attributes of the ``repetition_code`` object."
msgstr "இந்த பதிவேடுகள்``repetition_code``` பொருளின் பண்புகளாகும்."

#: ../../tutorials/noise/6_repetition_code.ipynb:226
msgid "You can also access the quantum circuits that implement the code. Two of these are produced: one for each of the two possible logical bit values."
msgstr "குறியீட்டை செயல்படுத்தும் குவாண்டம் சுற்றுகளையும் நீங்கள் அணுகலாம். இவற்றில் இரண்டு தயாரிக்கப்படுகின்றன: சாத்தியமான இரண்டு தருக்க பிட் மதிப்புகள் ஒவ்வொன்றிற்கும் ஒன்று."

#: ../../tutorials/noise/6_repetition_code.ipynb:479
msgid "Building a custom repetition code"
msgstr "தனிப்பயன் மறுபடியும் குறியீட்டை உருவாக்குதல்"

#: ../../tutorials/noise/6_repetition_code.ipynb:481
msgid "You can also implement measurement rounds and logical ``X`` gates yourself. For example, let’s set up a code with no syndrome measurement rounds."
msgstr "அளவீட்டு சுற்றுகள் மற்றும் தர்க்கரீதியான ``X`` வாயில்களையும் நீங்களே செயல்படுத்தலாம். எடுத்துக்காட்டாக, நோய்க்குறி அளவீட்டு சுற்றுகள் இல்லாத குறியீட்டை அமைப்போம்."

#: ../../tutorials/noise/6_repetition_code.ipynb:502
msgid "This does nothing but set up two circuits for the two logical encoded states. There are no syndrome measurement rounds, and no final readout."
msgstr "இது இரண்டு தருக்க குறியாக்க நிலைகளுக்கு இரண்டு சுற்றுகளை அமைப்பதைத் தவிர வேறு எதுவும் செய்யாது. நோய்க்குறி அளவீட்டு சுற்றுகள் இல்லை, இறுதி வாசிப்பு இல்லை."

#: ../../tutorials/noise/6_repetition_code.ipynb:601
msgid "We can add a round using the ``syndrome_measurement()`` method."
msgstr "``syndrome_measurement()`` முறையைப் பயன்படுத்தி ஒரு சுற்று சேர்க்கலாம்."

#: ../../tutorials/noise/6_repetition_code.ipynb:712
msgid "A logical ``X`` operation can be added using the ``x()`` method."
msgstr "``x()`` முறையைப் பயன்படுத்தி ஒரு தர்க்கரீதியான ``X`` செயல்பாட்டைச் சேர்க்கலாம்."

#: ../../tutorials/noise/6_repetition_code.ipynb:823
msgid "This also has a ``logs`` kwarg, which is a list of the circuits for which ``X`` is applied. This is ``['0','1']`` by default."
msgstr "இது ஒரு ``logs`` குவார்க்கையும் கொண்டுள்ளது, இது ``X`` பயன்படுத்தப்படும் சுற்றுகளின் பட்டியல். இது முன்னிருப்பாக ``['0', '1']``."

#: ../../tutorials/noise/6_repetition_code.ipynb:834
msgid "Final readout is then done with the ``readout()`` method."
msgstr "இறுதி வாசிப்பு பின்னர் ``readout()`` முறை மூலம் செய்யப்படுகிறது."

#: ../../tutorials/noise/6_repetition_code.ipynb:1012
msgid "Running a repetition code"
msgstr "மறுபடியும் குறியீட்டை இயக்குகிறது"

#: ../../tutorials/noise/6_repetition_code.ipynb:1014
msgid "The code object produces the circuits required for the code. The user can then run them using any method they prefer, allowing full control over compilation, backends, noise models and so on."
msgstr "குறியீடு பொருள் குறியீட்டிற்கு தேவையான சுற்றுகளை உருவாக்குகிறது. பயனர் பின்னர் அவர்கள் விரும்பும் எந்தவொரு முறையையும் பயன்படுத்தி அவற்றை இயக்க முடியும், இது தொகுப்பு, பின்தளத்தில், சத்தம் மாதிரிகள் மற்றும் பலவற்றில் முழு கட்டுப்பாட்டை அனுமதிக்கிறது."

#: ../../tutorials/noise/6_repetition_code.ipynb:1016
msgid "For example, here we run them without noise on the ``qasm_simulator``."
msgstr "எடுத்துக்காட்டாக, இங்கே ``qasm_simulator`` இல் சத்தமின்றி அவற்றை இயக்குகிறோம்."

#: ../../tutorials/noise/6_repetition_code.ipynb:1076
msgid "Here the strings from right to left represent the outputs of the syndrome measurement rounds, followed by the final measurement of the code qubits."
msgstr "இங்கே வலமிருந்து இடமாக உள்ள சரங்கள் நோய்க்குறி அளவீட்டு சுற்றுகளின் வெளியீடுகளைக் குறிக்கின்றன, அதைத் தொடர்ந்து குறியீட்டு வினாடிகளின் இறுதி அளவீடு."

#: ../../tutorials/noise/6_repetition_code.ipynb:1078
msgid "These results need to be rewritten in a different form in order to be decoded. To do this we can use the ``process_results`` method of the code object."
msgstr "டிகோட் செய்ய இந்த முடிவுகளை வேறு வடிவத்தில் மீண்டும் எழுத வேண்டும். இதைச் செய்ய, குறியீடு பொருளின் ``process_results`` முறையைப் பயன்படுத்தலாம்."

#: ../../tutorials/noise/6_repetition_code.ipynb:1119
msgid "The result is a dictionary whose keys are bit strings that represent outputs of the circuit, and the values represent the number of shots for which this output occurred."
msgstr "இதன் விளைவாக ஒரு அகராதி அதன் விசைகள் பிட் சரங்களாக இருக்கின்றன, அவை சுற்றுகளின் வெளியீடுகளைக் குறிக்கின்றன, மேலும் மதிப்புகள் இந்த வெளியீடு நிகழ்ந்த காட்சிகளின் எண்ணிக்கையைக் குறிக்கும்."

#: ../../tutorials/noise/6_repetition_code.ipynb:1121
msgid "The strings are not the direct output from the circuits. They have been processed to take the form that helps us correct errors. Here’s a short guided tour."
msgstr "சரங்கள் சுற்றுகளிலிருந்து நேரடி வெளியீடு அல்ல. பிழைகளை சரிசெய்ய உதவும் படிவத்தை எடுக்க அவை செயலாக்கப்பட்டுள்ளன. ஒரு குறுகிய வழிகாட்டுதல் சுற்றுப்பயணம் இங்கே."

#: ../../tutorials/noise/6_repetition_code.ipynb:1123
msgid "The ``0 0`` to the far left for the logical ``0`` result, and the ``1 1`` to the far left of the logical ``1``, are the logical readout. Any code qubit could be used for this readout, since they should (without errors) all be equal. So we could have just one result here, for one arbitrarily chosen code qubit. Or we could have :math:`d`, one for each qubit. Instead we have two, from the two qubits at either end of the line. This is because it works best with the decoder (which we’ll use later). In the absence of errors, these two values will always be equal."
msgstr "தர்க்கரீதியான ``0`` முடிவுக்கு இடதுபுறத்தில் உள்ள ``0 0``, மற்றும் தர்க்கரீதியான ``1`` இன் இடதுபுறத்தில் உள்ள ``1 1`` ஆகியவை தர்க்கரீதியான வாசிப்பு ஆகும். எந்தவொரு குறியீடு குவிட்டையும் இந்த வாசிப்புக்கு பயன்படுத்தலாம், ஏனெனில் அவை (பிழைகள் இல்லாமல்) அனைத்தும் சமமாக இருக்க வேண்டும். எனவே ஒரு தன்னிச்சையாக தேர்ந்தெடுக்கப்பட்ட குறியீடு குவிட்டிற்கு இங்கே ஒரு முடிவை மட்டுமே நாம் பெற முடியும். அல்லது நம்மிடம் இருக்க முடியும் :math:`d`, ஒவ்வொரு குவிட்டிற்கும் ஒன்று. அதற்கு பதிலாக, வரியின் இரு முனைகளிலும் உள்ள இரண்டு குவிட்களிலிருந்து இரண்டு உள்ளன. இது டிகோடருடன் சிறப்பாக செயல்படுவதால் (இது பின்னர் பயன்படுத்துவோம்). பிழைகள் இல்லாத நிலையில், இந்த இரண்டு மதிப்புகள் எப்போதும் சமமாக இருக்கும்."

#: ../../tutorials/noise/6_repetition_code.ipynb:1126
msgid "The following ``0000`` is the :math:`d-1` results of the syndrome measurements for the first round.A ``0`` implies that the corresponding pair of qubits where the same, and ``1`` implies different. There are :math:`d-1` results because the line of :math:`d` code qubits has :math:`d-1` possible neighboring pairs. In the absence of errors, they will all be ``0``."
msgstr "பின்வரும் ``0000`` :math:`d-1` முதல் சுற்றுக்கான நோய்க்குறி அளவீடுகளின் முடிவுகள். ஒரு ``0`` என்பது தொடர்புடைய ஜோடி குவிட்கள் ஒரே இடத்தில் இருப்பதையும், ``1`` என்பதையும் குறிக்கிறது. வேறுபட்டதைக் குறிக்கிறது. :math:`d-1` முடிவுகள் :math:`d` குறியீடு வினாக்கள் :math:`d-1` சாத்தியமான அண்டை ஜோடிகள் உள்ளன. பிழைகள் இல்லாத நிலையில், அவை அனைத்தும் ``0`` ஆக இருக்கும்."

#: ../../tutorials/noise/6_repetition_code.ipynb:1128
msgid "The ``0000`` that follows that is the syndrome change between the first and second rounds. It is therefore the bitwise ``OR`` of the syndrome measurement results from the second round with those from the first. In the absence of errors, they will all be ``0``."
msgstr "அதைத் தொடர்ந்து வரும் `` 0000`` என்பது முதல் மற்றும் இரண்டாவது சுற்றுகளுக்கு இடையிலான நோய்க்குறி மாற்றமாகும். எனவே இது நோய்க்குறி அளவீட்டின் பிட்வைஸ் `` OR`` என்பது இரண்டாவது சுற்றில் இருந்து முதல்வர்களுடன் முடிவடைகிறது. பிழைகள் இல்லாத நிலையில், அவை அனைத்தும் `` 0`` ஆக இருக்கும்."

#: ../../tutorials/noise/6_repetition_code.ipynb:1130
msgid "Subsequent blocks follow the same formula, though the last requires some comment. This is not measured using the standard method (with a link qubit). Instead it is calculated from the final readout measurement of all code qubits. Again it is presented as a syndrome change, and will be all ``0`` in the absence of errors. This is the :math:`T+1`-th block of syndrome measurements since, as it is not done in the same way as the others, it is not counted among the :math:`T` syndrome measurement rounds."
msgstr "கடைசியாக சில கருத்துக்கள் தேவைப்பட்டாலும், அடுத்தடுத்த தொகுதிகள் அதே சூத்திரத்தைப் பின்பற்றுகின்றன. இது நிலையான முறையைப் பயன்படுத்தி அளவிடப்படவில்லை (இணைப்பு குவிட்டுடன்). அதற்கு பதிலாக இது அனைத்து குறியீடு வினாடிகளின் இறுதி வாசிப்பு அளவிலிருந்து கணக்கிடப்படுகிறது. மீண்டும் இது ஒரு நோய்க்குறி மாற்றமாக வழங்கப்படுகிறது, மேலும் பிழைகள் இல்லாத நிலையில் அனைத்தும் ``0`` ஆக இருக்கும். இது :math:`T+1`-வது நோய்க்குறி அளவீடுகள் என்பதால், இது மற்றவர்களைப் போலவே செய்யப்படாததால், இது கணக்கிடப்படவில்லை :math:`T` நோய்க்குறி அளவீட்டு சுற்றுகள்."

#: ../../tutorials/noise/6_repetition_code.ipynb:1133
msgid "**Example 1:** ``0 0  0110 0000 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``0``. The syndrome shows that (most likely) the middle code qubit was flipped by an error before the first measurement round. This causes it to disagree with both neighboring code qubits for the rest of the circuit. This is shown by the syndrome in the first round, but the blocks for subsequent rounds do not report it as it no longer represents a change. Other sets of errors could also have caused this syndrome, but they would need to be more complex and so presumably less likely."
msgstr "**Example 1:** ``0 0 0110 0000 0000`` என்பது ஒரு :math:`d=5`, :math:`T=2` குறியாக்கப்பட்ட ``0`` உடன் மீண்டும் குறியீடு. முதல் அளவீட்டு சுற்றுக்கு முன் நடுத்தர குறியீடு குவிட் ஒரு பிழையால் புரட்டப்பட்டதாக (பெரும்பாலும்)நோய்க்குறி காட்டுகிறது. இது மீதமுள்ள சுற்றுக்கான அண்டை குறியீடு க்விட்களுடன் உடன்படவில்லை. இது முதல் சுற்றில் நோய்க்குறியால் காட்டப்படுகிறது, ஆனால் அடுத்தடுத்த சுற்றுகளுக்கான தொகுதிகள் அதைப் புகாரளிக்காது, ஏனெனில் இது இனி மாற்றத்தைக் குறிக்காது. பிற பிழைகள் இந்த நோய்க்குறியை ஏற்படுத்தியிருக்கலாம், ஆனால் அவை மிகவும் சிக்கலானதாக இருக்க வேண்டும், எனவே அவை குறைவாகவே இருக்கும்."

#: ../../tutorials/noise/6_repetition_code.ipynb:1136
msgid "**Example 2:** ``0 0  0010 0010 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``0``. Here one of the syndrome measurements reported a difference between two code qubits in the first round, leading to a ``1``. The next round did not see the same effect, and so resulted in a ``0``. However, since this disagreed with the previous result for the same syndrome measurement, and since we track syndrome changes, this change results in another ``1``. Subsequent rounds also do not detect anything, but this no longer represents a change and hence results in a ``0`` in the same position. Most likely the measurement result leading to the first ``1`` was an error."
msgstr "**Example 2:** ``0 0 0010 0010 0000`` என்பது ஒரு :math:`d=5`, :math:`T=2`குறியாக்கப்பட்ட ``0`` உடன் மீண்டும் குறியீடு. இங்கே நோய்க்குறி அளவீடுகளில் ஒன்று முதல் சுற்றில் இரண்டு குறியீடு வினாடிகளுக்கு இடையிலான வேறுபாட்டைப் புகாரளித்தது, இது ``1`` க்கு வழிவகுத்தது. அடுத்த சுற்று அதே விளைவைக் காணவில்லை, இதனால் ``0`` கிடைத்தது. இருப்பினும், இதே நோய்க்குறி அளவீட்டுக்கான முந்தைய முடிவுடன் இது உடன்படவில்லை என்பதால், நோய்க்குறி மாற்றங்களை நாங்கள் கண்காணிப்பதால், இந்த மாற்றம் மற்றொரு ``1`` இல் விளைகிறது. அடுத்தடுத்த சுற்றுகளும் எதையும் கண்டறியவில்லை, ஆனால் இது இனி ஒரு மாற்றத்தைக் குறிக்காது, எனவே அதே நிலையில் ``0`` விளைகிறது. முதல் ``1`` க்கு வழிவகுக்கும் அளவீட்டு முடிவு பிழையாக இருக்கலாம்."

#: ../../tutorials/noise/6_repetition_code.ipynb:1139
msgid "**Example 3:** ``0 1  0000 0001 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``1``. A code qubit on the end of the line is flipped before the second round of syndrome measurements. This is detected by only a single syndrome measurement, because it is on the end of the line. For the same reason, it also disturbs one of the logical readouts."
msgstr "**Example 3:** ``0 1 0000 0001 0000`` என்பது ஒரு :math:`d=5`, :math:`T=2` குறியாக்கப்பட்ட ``1`` உடன் மீண்டும் குறியீடு. நோய்க்குறி அளவீடுகளின் இரண்டாவது சுற்றுக்கு முன் கோட்டின் முடிவில் ஒரு குறியீடு குவிட் புரட்டப்படுகிறது. இது ஒரு நோய்க்குறி அளவீடு மூலம் மட்டுமே கண்டறியப்படுகிறது, ஏனெனில் இது கோட்டின் முடிவில் உள்ளது. அதே காரணத்திற்காக, இது தர்க்கரீதியான வாசிப்புகளில் ஒன்றையும் தொந்தரவு செய்கிறது."

#: ../../tutorials/noise/6_repetition_code.ipynb:1141
msgid "Note that in all these examples, a single error causes exactly two characters in the string to change from the value it would have with no errors. This is, in fact, the reason why the logical output consists of both endpoints. It is a property that will be used by the decoder."
msgstr "இந்த எல்லா எடுத்துக்காட்டுகளிலும், ஒரு பிழையானது சரம் சரியாக இரண்டு எழுத்துக்களை பிழைகள் இல்லாமல் இருக்கும் மதிப்பிலிருந்து மாற்றுவதற்கு காரணமாகிறது என்பதை நினைவில் கொள்க. உண்மையில், இது தருக்க வெளியீடு இரு முனைப்புள்ளிகளையும் கொண்டிருப்பதற்கான காரணம். இது டிகோடரால் பயன்படுத்தப்படும் ஒரு சொத்து."

#: ../../tutorials/noise/6_repetition_code.ipynb:1152
msgid "To see the effects of noise, we need to specify a noise model. For example, let’s set up a simple noise model with gate and measurement errors."
msgstr "சத்தத்தின் விளைவுகளைக் காண, நாங்கள் ஒரு சத்தம் மாதிரியைக் குறிப்பிட வேண்டும். எடுத்துக்காட்டாக, கேட் மற்றும் அளவீட்டு பிழைகள் கொண்ட எளிய இரைச்சல் மாதிரியை அமைப்போம்."

#: ../../tutorials/noise/6_repetition_code.ipynb:1197
msgid "This can then be run to generate noisy results. Let’s make a quick function to do this, and then run it."
msgstr "சத்தமான முடிவுகளை உருவாக்க இதை இயக்கலாம். இதைச் செய்ய விரைவான செயல்பாட்டைச் செய்வோம், பின்னர் அதை இயக்கவும்."

#: ../../tutorials/noise/6_repetition_code.ipynb:1457
msgid "Here the non-noisy results are the most likely. The rest of the samples are distributed among other possibilities with non-trivial syndromes."
msgstr "இங்கே சத்தமில்லாத முடிவுகள் பெரும்பாலும். மீதமுள்ள மாதிரிகள் அற்பமற்ற நோய்க்குறிகளுடன் பிற சாத்தியக்கூறுகளுக்கு இடையே விநியோகிக்கப்படுகின்றன."

#: ../../tutorials/noise/6_repetition_code.ipynb:1469
msgid "Decoding a repetition code"
msgstr "மறுபடியும் குறியீட்டை டிகோடிங் செய்கிறது"

#: ../../tutorials/noise/6_repetition_code.ipynb:1471
msgid "Noisy results can change the logical value at readout, and so affect our ability to read out the logical qubit. This can be mitigated by looking at the syndrome values. These can tell us whether or not the logical values are most likely to have changed, and so allow us to correct for the errors. The process of analyzing the syndrome to correct for the errors is called ‘decoding’. We do this by building a decoding object for our code."
msgstr "சத்தமில்லாத முடிவுகள் வாசிப்பில் தர்க்கரீதியான மதிப்பை மாற்றக்கூடும், எனவே தருக்க குவிட்டைப் படிக்கும் திறனை பாதிக்கும். நோய்க்குறி மதிப்புகளைப் பார்த்து இதைத் தணிக்க முடியும். தர்க்கரீதியான மதிப்புகள் பெரும்பாலும் மாறியிருக்கிறதா இல்லையா என்பதை இவை நமக்குச் சொல்லக்கூடும், எனவே பிழைகளை சரிசெய்ய அனுமதிக்கும். பிழைகளை சரிசெய்ய நோய்க்குறியை பகுப்பாய்வு செய்யும் செயல்முறையை ‘டிகோடிங்’ என்று அழைக்கப்படுகிறது. எங்கள் குறியீட்டிற்கான டிகோடிங் பொருளை உருவாக்குவதன் மூலம் இதைச் செய்கிறோம்."

#: ../../tutorials/noise/6_repetition_code.ipynb:1492
msgid "This analyzes the code by seeing how different kinds of error change the output. With this information, along with a decoding algorithm, we can determine what the logical value is most likely to have been."
msgstr "பல்வேறு வகையான பிழைகள் வெளியீட்டை எவ்வாறு மாற்றுகின்றன என்பதைப் பார்த்து இது குறியீட்டை பகுப்பாய்வு செய்கிறது. இந்த தகவலுடன், டிகோடிங் வழிமுறையுடன், தருக்க மதிப்பு என்னவாக இருக்கும் என்பதை நாம் தீர்மானிக்க முடியும்."

#: ../../tutorials/noise/6_repetition_code.ipynb:1494
msgid "For example, let’s use the ‘matching’ algorithm to decode, which is based on minimum weight perfect matching. This takes specific output strings as input. We’ll give it the simple example string ``'1 0  001 100 100'``, for a logical ``1`` that has suffered two errors."
msgstr "எடுத்துக்காட்டாக, டிகோட் செய்ய ‘பொருந்தும்’ வழிமுறையைப் பயன்படுத்தலாம், இது குறைந்தபட்ச எடை சரியான பொருத்தத்தை அடிப்படையாகக் கொண்டது. இது குறிப்பிட்ட வெளியீட்டு சரங்களை உள்ளீடாக எடுக்கும். இரண்டு பிழைகளை சந்தித்த தர்க்கரீதியான ``1`` க்கு எளிய எடுத்துக்காட்டு சரம் ``'1 0 001 100 100'`` ஐ வழங்குவோம்."

#: ../../tutorials/noise/6_repetition_code.ipynb:1535
msgid "The output is what the logical part should have been. As you can see, the decoder correctly determined that the readout should have been of a logical ``1``."
msgstr "வெளியீடு என்பது தர்க்கரீதியான பகுதியாக இருந்திருக்க வேண்டும். நீங்கள் பார்க்க முடியும் என, டிகோடர் சரியாக வாசிப்பு ஒரு தர்க்கரீதியான ``1`` ஆக இருக்க வேண்டும் என்று தீர்மானித்தது."

#: ../../tutorials/noise/6_repetition_code.ipynb:1546
msgid "When we take many samples, we can determine the probability with which the decoder is incorrect. This should decrease exponentially as the code size is increased, since the configurations of noise that fool the decoder become less likely. The probability of a logical error is calculated using the ``logical_prob()`` method. This runs matching by default, but other algorithms can be specified by the ``algorithm`` kwarg."
msgstr "நாம் பல மாதிரிகளை எடுக்கும்போது, ​​டிகோடர் தவறாக இருக்கும் நிகழ்தகவை நாம் தீர்மானிக்க முடியும். குறியீட்டு அளவு அதிகரிக்கப்படுவதால் இது அதிவேகமாகக் குறைய வேண்டும், ஏனெனில் டிகோடரை முட்டாளாக்கும் சத்தத்தின் உள்ளமைவுகள் குறைவாகவே இருக்கும். ஒரு தருக்க பிழையின் நிகழ்தகவு ``logical_prob()`` முறையைப் பயன்படுத்தி கணக்கிடப்படுகிறது. இது இயல்பாக பொருந்தக்கூடியதாக இயங்குகிறது, ஆனால் பிற வழிமுறைகளை ``algorithm`` குவார்க் மூலம் குறிப்பிடலாம்."

