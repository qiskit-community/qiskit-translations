msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-07 17:08+0000\n"
"PO-Revision-Date: 2021-04-07 18:21\n"
"Last-Translator: \n"
"Language-Team: Tamil\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/06_qaoa.po\n"
"X-Crowdin-File-ID: 9454\n"
"Language: ta_IN\n"

#: ../../tutorials/algorithms/06_qaoa.ipynb:10
msgid "This page was generated from `tutorials/algorithms/06_qaoa.ipynb`__."
msgstr "இந்த பக்கம் `tutorials/algorithms/06_qaoa.ipynb`__இலிருந்து உருவாக்கப்பட்டது."

#: ../../tutorials/algorithms/06_qaoa.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/06_qaoa.ipynb>`_."
msgstr "`IBM குவாண்டம் ஆய்வகத்தில் <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/06_qaoa.ipynb>` _ இல் ஊடாடும் வகையில் இயக்கவும்."

#: ../../tutorials/algorithms/06_qaoa.ipynb:9
msgid "Quantum Approximate Optimization Algorithm"
msgstr "குவாண்டம் தோராயமான உகப்பாக்கம் அல்காரிதம்"

#: ../../tutorials/algorithms/06_qaoa.ipynb:11
msgid "Qiskit has an implementation of the Quantum Approximate Optimization Algorithm `QAOA <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.QAOA.html>`__ and this notebook demonstrates using it for a graph partition problem."
msgstr "குவாண்டம் தோராயமான உகப்பாக்கம் அல்காரிதம் `QAOA <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.QAOA.html>` __ இன் செயல்பாட்டை Qiskit கொண்டுள்ளது, மேலும் இந்த நோட்புக் ஒரு வரைபட பகிர்வு சிக்கலுக்கு அதைப் பயன்படுத்துவதை நிரூபிக்கிறது."

#: ../../tutorials/algorithms/06_qaoa.ipynb:13
msgid "While QAOA can be directly used it often more convenient to use it in conjunction with the Optimization module. See the Optimization tutorials for more information."
msgstr "QAOA ஐ நேரடியாகப் பயன்படுத்தலாம் என்றாலும், உகப்பாக்கம் தொகுதிடன் இணைந்து அதைப் பயன்படுத்துவது பெரும்பாலும் வசதியானது. மேலும் தகவலுக்கு உகப்பாக்கம் பயிற்சிகளைப் பார்க்கவும்."

#: ../../tutorials/algorithms/06_qaoa.ipynb:40
msgid "First we create a random graph and draw it so it can be seen."
msgstr "முதலில் நாம் ஒரு சீரற்ற வரைபடத்தை உருவாக்கி அதை வரைகிறோம், எனவே அதைக் காணலாம்."

#: ../../tutorials/algorithms/06_qaoa.ipynb:111
msgid "The brute-force method is as follows. Basically, we exhaustively try all the binary assignments. In each binary assignment, the entry of a vertex is either 0 (meaning the vertex is in the first partition) or 1 (meaning the vertex is in the second partition). We print the binary assignment that satisfies the definition of the graph partition and corresponds to the minimal number of crossing edges."
msgstr "முரட்டு-சக்தி முறை பின்வருமாறு. அடிப்படையில், அனைத்து பைனரி பணிகளையும் நாங்கள் முழுமையாக முயற்சிக்கிறோம். ஒவ்வொரு பைனரி ஒதுக்கீட்டிலும், ஒரு வெர்டெக்ஸின் நுழைவு 0 (அதாவது வெர்டெக்ஸ் முதல் பகிர்வில் உள்ளது) அல்லது 1 (அதாவது வெர்டெக்ஸ் இரண்டாவது பகிர்வில் உள்ளது). வரைபட பகிர்வின் வரையறையை பூர்த்திசெய்யும் பைனரி அசைன்மென்ட்டை நாங்கள் அச்சிடுகிறோம், மேலும் குறைந்த எண்ணிக்கையிலான குறுக்கு விளிம்புகளுக்கு ஒத்திருக்கிறது."

#: ../../tutorials/algorithms/06_qaoa.ipynb:173
msgid "The graph partition problem can be converted to an Ising Hamiltonian. Qiskit has different capabilities in the Optimization module to do this. Here, since the goal is to show QAOA, the module is used without further explanation to create the operator. The paper `Ising formulations of many NP problems <https://arxiv.org/abs/1302.5843>`__ may be of interest if you would like to understand the technique further."
msgstr ""

#: ../../tutorials/algorithms/06_qaoa.ipynb:194
msgid "So lets use the QAOA algorithm to find the solution."
msgstr "எனவே தீர்வைக் காண QAOA வழிமுறையைப் பயன்படுத்தலாம்."

#: ../../tutorials/algorithms/06_qaoa.ipynb:252
msgid "The outcome can be seen to match to the value computed above by brute force. But we can also use the classical ``NumPyMinimumEigensolver`` to do the computation, which may be useful as a reference without doing things by brute force."
msgstr "முரட்டு சக்தியால் மேலே கணக்கிடப்பட்ட மதிப்புடன் பொருந்தக்கூடிய விளைவைக் காணலாம். ஆனால் கணக்கீட்டைச் செய்ய கிளாசிக்கல் `` NumPyMinimumEigensolver`` ஐப் பயன்படுத்தலாம், இது முரட்டுத்தனமாக விஷயங்களைச் செய்யாமல் ஒரு குறிப்பாக பயனுள்ளதாக இருக்கும்."

#: ../../tutorials/algorithms/06_qaoa.ipynb:301
msgid "It is also possible to use VQE as is shown below"
msgstr "கீழே காட்டப்பட்டுள்ளபடி VQE ஐப் பயன்படுத்தவும் முடியும்"

