msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-06 18:37+0000\n"
"PO-Revision-Date: 2021-08-06 19:14\n"
"Last-Translator: \n"
"Language-Team: Tamil\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/09_IQPE.po\n"
"X-Crowdin-File-ID: 9546\n"
"Language: ta_IN\n"

#: ../../tutorials/algorithms/09_IQPE.ipynb:10
msgid "This page was generated from `tutorials/algorithms/09_IQPE.ipynb`__."
msgstr "இந்த பக்கம் `tutorials/algorithms/09_IQPE.ipynb`__\n"
"இலிருந்து உருவாக்கப்பட்டது."

#: ../../tutorials/algorithms/09_IQPE.ipynb:9
msgid "Iterative Quantum Phase Estimation Algorithm"
msgstr "மறுபயன்பாட்டு குவாண்டம் கட்ட மதிப்பீடு அல்காரிதம்"

#: ../../tutorials/algorithms/09_IQPE.ipynb:11
msgid "The goal of this tutorial is to understand how the Iterative Phase Estimation (IPE) algorithm works, why would we use the IPE algorithm instead of the QPE (Quantum Phase Estimation) algorithm and how to build it with Qiskit using the same circuit exploiting reset gate and the ``c_if`` method that allows to apply gates conditioned by the values stored in a classical register, resulting from previous measurements."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:13
msgid "**References**"
msgstr "** குறிப்புகள் **"

#: ../../tutorials/algorithms/09_IQPE.ipynb:15
msgid "`Section 2 of Lab 4: Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__"
msgstr "`Section 2 of Lab 4: Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__"

#: ../../tutorials/algorithms/09_IQPE.ipynb:17
msgid "`Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__"
msgstr "`Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__"

#: ../../tutorials/algorithms/09_IQPE.ipynb:42
msgid "Conditioned gates: the c_if method"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:53
msgid "Before starting the IPE algorithm, we will give a brief tutorial about the Qiskit conditional method, c_if, as it goes into building the IPE circuit."
msgstr "IPE வழிமுறையைத் தொடங்குவதற்கு முன், Qiskit நிபந்தனை முறை, c_if பற்றி ஒரு சுருக்கமான டுடோரியலைக் கொடுப்போம், இது IPE சுற்று கட்டமைக்கும்போது."

#: ../../tutorials/algorithms/09_IQPE.ipynb:55
msgid "``c_if`` is a function (actually a method of the gate class) to perform conditioned operations based on the value stored previously in a classical register. With this feature you can apply gates after a measurement in the same circuit conditioned by the measurement outcome."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:57
msgid "For example, the following code will execute the :math:`X` gate if the value of the classical register is :math:`0`."
msgstr "எடுத்துக்காட்டாக, பின்வரும் code கிளாசிக்கல் பதிவின் மதிப்பு என்றால் :math:`X` கேட் :math:`0`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:93
msgid "We highlight that the method c_if expects as the first argument a whole classical register, not a single classical bit (or a list of classical bits), and as the second argument a value in decimal representation (a non-negative integer), not the value of a single bit, 0, or 1 (or a list/string of binary digits)."
msgstr "C_if முறை முதல் கிளாசிக்கல் பதிவேடு, ஒரு கிளாசிக்கல் பிட் (அல்லது கிளாசிக்கல் பிட்களின் பட்டியல்) அல்ல, இரண்டாவது வாதமாக தசம பிரதிநிதித்துவத்தில் ஒரு மதிப்பு (எதிர்மறை அல்லாத முழு எண்) எதிர்பார்க்கிறது என்பதை நாங்கள் முன்னிலைப்படுத்துகிறோம். ஒற்றை பிட், 0, அல்லது 1 (அல்லது பைனரி இலக்கங்களின் பட்டியல் / சரம்) மதிப்பு."

#: ../../tutorials/algorithms/09_IQPE.ipynb:95
msgid "Let’s make another example. Consider that we want to perform a bit flip on the third qubit after the measurements in the following circuit, when the results of the measurement of :math:`q_0` and :math:`q_1` are both :math:`1`."
msgstr "மற்றொரு உதாரணத்தை உருவாக்குவோம், பின்வரும் :math:`q_0` மற்றும் :math:`q_1` இரண்டும் :math:`1` என சுற்றுவட்டத்தின் அளவீடுகளுக்குப் பிறகு, மூன்றாவது குவிட்டில் ஒரு பிட் புரட்டலைச் செய்ய விரும்புகிறோம் என்பதைக் கவனியுங்கள்."

#: ../../tutorials/algorithms/09_IQPE.ipynb:133
msgid "We want to apply the :math:`X` gate, only if both the results of the measurement of :math:`q_1` and :math:`q_2` are :math:`1`. We can do this using the c_if method, conditioning the application of :math:`X` depending on the value passed as argument to c_if."
msgstr ":math:`q_1` மற்றும் :math:`q_2` :math:`1` என்ற அளவீட்டின் முடிவுகள் இரண்டுமே இருந்தால் மட்டுமே :math:`X` வாயிலைப் பயன்படுத்த விரும்புகிறோம். c_if முறையைப் பயன்படுத்தி இதை நாம் செய்யலாம்: கணிதத்தின் பயன்பாட்டை சீராக்குகிறது c_if க்கு வாதமாக அனுப்பப்பட்ட மதிப்பைப் பொறுத்து :math:`X`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:135
msgid "We will have to encode the value to pass to the c_if method such that it will check the values 011 and 111 (in binary representation), since it does not matter what is in the rightmost position."
msgstr "C_if முறைக்கு அனுப்ப மதிப்பை நாம் குறியாக்கம் செய்ய வேண்டும், இது 011 மற்றும் 111 மதிப்புகளை (பைனரி பிரதிநிதித்துவத்தில்) சரிபார்க்கும், ஏனெனில் இது சரியான நிலையில் இருப்பதைப் பொருட்படுத்தாது."

#: ../../tutorials/algorithms/09_IQPE.ipynb:137
msgid "The 2 integer values in decimal representation:"
msgstr "தசம பிரதிநிதித்துவத்தில் 2 முழு எண் மதிப்புகள்:"

#: ../../tutorials/algorithms/09_IQPE.ipynb:148
msgid "|efa0a8d1906f44cfb7070754e6f48d1f|"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:161
msgid "We can check the solutions using the bin() method in python (the prefix ``0b`` indicates the binary format)."
msgstr "Python bin() முறையைப் பயன்படுத்தி தீர்வுகளை நாம் சரிபார்க்கலாம் (``0b`` முன்னொட்டு பைனரி வடிவமைப்பைக் குறிக்கிறது)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:204
msgid "So we have to apply :math:`X` to :math:`q_2` using c_if two times, one for each value corresponding to 011 and 111."
msgstr "எனவே நாம் விண்ணப்பிக்க வேண்டும் :math:`X`` முதல் :math:`q_2` இரண்டு முறை c_if பயன்படுத்துகிறது, 011 மற்றும் 111 உடன் தொடர்புடைய ஒவ்வொரு மதிப்புக்கும் ஒன்று."

#: ../../tutorials/algorithms/09_IQPE.ipynb:247
msgid "IPE"
msgstr "IPE"

#: ../../tutorials/algorithms/09_IQPE.ipynb:249
msgid "The motivation for using the IPE algorithm is that QPE algorithm works fine for short depth circuits but when the circuit starts to grow, it doesn’t work properly due to gate noise and decoherence times."
msgstr "IPE வழிமுறையைப் பயன்படுத்துவதற்கான உந்துதல் என்னவென்றால், குறுகிய ஆழம் சுற்றுகளுக்கு QPE வழிமுறை நன்றாக வேலை செய்கிறது, ஆனால் சுற்று வளரத் தொடங்கும் போது, கேட் சத்தம் மற்றும் டிகோஹரன்ஸ் நேரங்கள் காரணமாக அது சரியாக வேலை செய்யாது."

#: ../../tutorials/algorithms/09_IQPE.ipynb:251
msgid "The detailed explanation of how the algorithm works can be found in `Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__. To understand QPE in depth, you can see also `Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__."
msgstr "வழிமுறை எவ்வாறு செயல்படுகிறது என்பதற்கான விரிவான விளக்கத்தை `Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__. QPE ஐ ஆழமாக புரிந்து கொள்ள, நீங்கள் `Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__ ஐயும் காணலாம்."

#: ../../tutorials/algorithms/09_IQPE.ipynb:254
msgid "IPE example with a 1-qubit gate for :math:`U`"
msgstr "IPE உதாரணம் :math:` U ` க்கு 1-qubit வாய்ப்பாடு"

#: ../../tutorials/algorithms/09_IQPE.ipynb:256
msgid "We want to apply the IPE algorithm to estimate the phase for a 1-qubit operator :math:`U`. For example, here we use the :math:`S`-gate."
msgstr "1-குவிட் ஆபரேட்டருக்கான கட்டத்தை மதிப்பிடுவதற்கு IPE வழிமுறையைப் பயன்படுத்த விரும்புகிறோம் :math:`U` எடுத்துக்காட்டாக, இங்கே நாம் :math:`S`-கேட் பயன்படுத்துகிறோம்."

#: ../../tutorials/algorithms/09_IQPE.ipynb:258
msgid "Let’s apply the IPE algorithm to estimate the phase for :math:`S`-gate. Its matrix is"
msgstr "இதற்கான கட்டத்தை மதிப்பிடுவதற்கு IPE வழிமுறையைப் பயன்படுத்துவோம் :math:`S`-கேட். அதன் அணி"

#: ../../tutorials/algorithms/09_IQPE.ipynb:260
msgid " S =\n"
"\\begin{bmatrix}\n"
"1 & 0\\\\\n"
"0 & e^\\frac{i\\pi}{2}\\\\\n"
"\\end{bmatrix}"
msgstr " S =\n"
"\\begin{bmatrix}\n"
"1 & 0\\\\\n"
"0 & e^\\frac{i\\pi}{2}\\\\\n"
"\\end{bmatrix}"

#: ../../tutorials/algorithms/09_IQPE.ipynb:268
msgid "That is, the :math:`S`-gate adds a phase :math:`\\pi/2` to the state :math:`|1\\rangle`, leaving unchanged the phase of the state :math:`|0\\rangle`"
msgstr "அதாவது, :math:`S`-கேட் ஒரு கட்டத்தை சேர்க்கிறது :math:`\\pi/2` மாநிலத்திற்கு :math:`|1\\rangle`, மாநிலத்தின் கட்டத்தை மாற்றாமல் விட்டுவிடுகிறது :math:`|0\\rangle"

#: ../../tutorials/algorithms/09_IQPE.ipynb:270
msgid "S|1\\rangle = e^\\frac{i\\pi}{2}|1\\rangle\n\n"
msgstr "S|1\\rangle = e^\\frac{i\\pi}{2}|1\\rangle\n\n"

#: ../../tutorials/algorithms/09_IQPE.ipynb:272
msgid "In the following, we will use the notation and terms used in `Section 2 of lab 4 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__."
msgstr "பின்வருவனவற்றில், `Section 2 of lab 4 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__ இல் பயன்படுத்தப்படும் குறியீடு மற்றும் சொற்களைப் பயன்படுத்துவோம்."

#: ../../tutorials/algorithms/09_IQPE.ipynb:274
msgid "Let’s consider to estimate the phase :math:`\\phi=\\frac{\\pi}{2}` for the eigenstate :math:`|1\\rangle`, we should find :math:`\\varphi=\\frac{1}{4}` (where :math:`\\phi = 2 \\pi \\varphi`). Therefore to estimate the phase we need exactly 2 phase bits, i.e. \\ :math:`m=2`, since :math:`1/2^2=1/4`. So :math:`\\varphi=0.\\varphi_1\\varphi_2`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:276
msgid "Remember from the theory that for the IPE algorithm, :math:`m` is also the number of iterations, so we need only :math:`2` iterations or steps."
msgstr "IPE வழிமுறையைப் பொறுத்தவரை, :math:`m` என்பது மறு செய்கைகளின் எண்ணிக்கையாகும், எனவே நமக்கு மட்டும் தேவை :math:`2` மறு செய்கைகள் அல்லது படிகள்."

#: ../../tutorials/algorithms/09_IQPE.ipynb:278
msgid "First, we initialize the circuit. IPE works with only 1 auxiliary qubit, instead of :math:`m` counting qubits of the QPE algorithm. Therefore, we need 2 qubits, 1 auxiliary qubit and 1 for the eigenstate of :math:`U`-gate, and a classical register of 2 bits, for the phase bits :math:`\\varphi_1`, :math:`\\varphi_2`."
msgstr "முதலில், நாங்கள் சுற்று துவக்குகிறோம். IPE வழிமுறையின் :math:`m` எண்ணும் குவிட்களுக்குப் பதிலாக, 1 துணை துணைக் கருவியுடன் மட்டுமே IPE செயல்படுகிறது. ஆகையால், கட்டத்தின் பிட்களுக்கு :math:`\\varphi_1` , :math:`U`- கேட் மற்றும் 2 பிட்களின் கிளாசிக்கல் பதிவு :math:`\\varphi_2`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:305
#: ../../tutorials/algorithms/09_IQPE.ipynb:704
msgid "First step"
msgstr "முதல் படி"

#: ../../tutorials/algorithms/09_IQPE.ipynb:307
msgid "Now we build the quantum circuit for the first step, that is, the first iteration of the algorithm, to estimate the least significant phase bit :math:`\\varphi_m`, in this case :math:`\\varphi_2`. For the first step we have 3 sub-steps: - initialization - application of the Controlled-\\ :math:`U` gates - measure of the auxiliary qubit in x-basis"
msgstr "இப்போது நாம் முதல் கட்டத்திற்கான குவாண்டம் சுற்றுவட்டத்தை உருவாக்குகிறோம், அதாவது, வழிமுறையின் முதல் மறு செய்கை, குறைந்த குறிப்பிடத்தக்க கட்ட பிட்டை மதிப்பிடுவதற்கு :math:`\\varphi_m`, இந்த விஷயத்தில் :math:`\\varphi_2`. முதல் கட்டத்திற்கு எங்களிடம் 3 துணை படிகள் உள்ளன: - துவக்கம் - கட்டுப்படுத்தப்பட்ட பயன்பாடு-\\ :math:`U` வாயில்கள் - எக்ஸ்-அடிப்படையில் துணை குவிட்டின் அளவு"

#: ../../tutorials/algorithms/09_IQPE.ipynb:310
#: ../../tutorials/algorithms/09_IQPE.ipynb:709
msgid "Initialization"
msgstr "துவக்கம்"

#: ../../tutorials/algorithms/09_IQPE.ipynb:312
msgid "The initialization consists of application the Hadamard gate to the auxiliary qubit and the preparation of the eigenstate :math:`|1\\rangle`."
msgstr "துவக்கத்தில் ஹடமார்ட் வாயிலை துணை குவிட்டிற்குப் பயன்படுத்துவதும், ஐஜென்ஸ்டேட் தயாரிப்பதும் அடங்கும் :math:`|1\\rangle`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:345
#: ../../tutorials/algorithms/09_IQPE.ipynb:744
msgid "Application of the Controlled-\\ :math:`U` gates"
msgstr "கட்டுப்படுத்தப்பட்ட பயன்பாடு- :math:`U` வாயில்கள்"

#: ../../tutorials/algorithms/09_IQPE.ipynb:347
msgid "Then we have to apply :math:`2^t` times the Controlled-\\ :math:`U` operators (see also in the docs `Two qubit gates <https://qiskit.org/documentation/tutorials/circuits/3_summary_of_quantum_operations.html#Two-qubit-gates>`__), that, in this example, is the Controlled-\\ :math:`S` gate (:math:`CS` for short)."
msgstr "பின்னர் நாம் விண்ணப்பிக்க வேண்டும் :math:`2^t` முறை கட்டுப்படுத்தப்பட்ட- \\ :math:`U` ஆபரேட்டர்கள் (டாக்ஸிலும் காண்க `Two qubit gates <https://qiskit.org/documentation/tutorials/circuits/3_summary_of_quantum_operations.html#Two-qubit-gates>`__), இது, இந்த எடுத்துக்காட்டில், கட்டுப்படுத்தப்பட்ட- \\ :math:`S` கேட் ( :math:`CS` சுருக்கமாக)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:349
msgid "To implement :math:`CS` in the circuit, since :math:`S` is a phase gate, we can use the controlled phase gate :math:`\\text{CP}(\\theta)`, with :math:`\\theta=\\pi/2`."
msgstr "செயல்படுத்த :math:`CS` சுற்றுவட்டத்தில், என்பதால் :math:`S` என்பது ஒரு கட்ட வாயில், நாம் கட்டுப்படுத்தப்பட்ட கட்ட வாயிலைப் பயன்படுத்தலாம் :math:`\\text{CP}(\\theta)`, உடன் :math:`\\theta=\\pi/2`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:381
msgid "Let’s apply :math:`2^t` times :math:`\\text{CP}(\\pi/2)`. Since for the first step :math:`t=m-1`, and :math:`m=2`, we have :math:`2^t=2`."
msgstr "நாம் :math:`2^t`` முறை :math:`\\text{CP}(\\pi/2)`. முதல் படி :math:`t=m-1`, மற்றும் :math:`m=2`, எங்களிடம் :math:`2^t=2`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:414
#: ../../tutorials/algorithms/09_IQPE.ipynb:813
msgid "Measure in x-basis"
msgstr "X- அடிப்படையில் அளவிடவும்"

#: ../../tutorials/algorithms/09_IQPE.ipynb:416
msgid "Finally, we perform the measurement of the auxiliary qubit in x-basis. So we will define a function to perform the x_measure and then apply it."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:440
msgid "In this way we obtain the phase bit :math:`\\varphi_2` and store it in the classical bit :math:`c_0`."
msgstr "இந்த வழியில் நாம் கட்டம் பிட் :math:`\\varphi_2` ஐப் பெற்று கிளாசிக்கல் பிட்டில் சேமிக்கிறோம் :math:`c_0`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:472
msgid "Subsequent steps (2nd step)"
msgstr "அடுத்தடுத்த படிகள் (2 வது படி)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:474
msgid "Now we build the quantum circuit for the other remaining steps, in this example, only the second one. In these steps we have 4 sub-steps: the 3 sub-steps as in the first step and, in the middle, the additional step of the phase correction - initialization with reset - phase correction - application of the Control-\\ :math:`U` gates - measure of the auxiliary qubit in x-basis"
msgstr "இப்போது நாம் மீதமுள்ள மற்ற படிகளுக்கு குவாண்டம் சுற்று உருவாக்குகிறோம், இந்த எடுத்துக்காட்டில், இரண்டாவது ஒரு. இந்த படிகளில் நமக்கு 4 துணை படிகள் உள்ளன: முதல் படியில் உள்ள 3 துணை படிகள் மற்றும், நடுவில், கட்ட திருத்தத்தின் கூடுதல் படி - மீட்டமைப்போடு துவக்கம் - கட்ட திருத்தம் - கட்டுப்பாட்டின் பயன்பாடு- :math:`U` வாயில்கள் x- அடிப்படையில் துணை குவிட்டின் அளவு"

#: ../../tutorials/algorithms/09_IQPE.ipynb:477
#: ../../tutorials/algorithms/09_IQPE.ipynb:852
msgid "Initialization with reset"
msgstr "மீட்டமைப்போடு துவக்கம்"

#: ../../tutorials/algorithms/09_IQPE.ipynb:479
msgid "As we want to perform an iterative algorithm in the same circuit, we need to reset the auxiliary qubit :math:`q0` after the measument gate and initialize it again as before to recycle the qubit."
msgstr "அதே சுற்றில் ஒரு செயல்பாட்டு வழிமுறையைச் செய்ய நாங்கள் விரும்புவதால், துணை குவிட்டை மீட்டமைக்க வேண்டும் அளவீட்டு வாயிலுக்குப் பிறகு :math:`q0` மற்றும் குவிட்டை மறுசுழற்சி செய்வதற்கு முன்பு மீண்டும் துவக்க வேண்டும்."

#: ../../tutorials/algorithms/09_IQPE.ipynb:512
#: ../../tutorials/algorithms/09_IQPE.ipynb:885
msgid "Phase correction (for step 2)"
msgstr "கட்ட திருத்தம் (படி 2 க்கு)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:514
msgid "As seen in the theory, in order to extract the phase bit :math:`\\varphi_{1}`, we perform a phase correction of :math:`-\\pi\\varphi_2/2`. Of course, we need to apply the phase correction in the circuit only if the phase bit :math:`\\varphi_2=1`, i.e. we have to apply the phase correction of :math:`-\\pi/2` only if the classical bit :math:`c_0` is 1."
msgstr "கோட்பாட்டில் காணப்படுவது போல், கட்டம் பிட் :math:`\\varphi_{1}` பிரித்தெடுப்பதற்காக, :math:`-\\pi\\varphi_2/2` இன் ஒரு கட்ட திருத்தம் செய்கிறோம். நிச்சயமாக, கட்ட பிட் :math:`\\varphi_2=1`, அதாவது கட்ட திருத்தம் :math:`-\\pi/2` என்றால் மட்டுமே நாம் சுற்றில் கட்ட திருத்தம் பயன்படுத்த வேண்டும். கிளாசிக்கல் பிட் :math:`c_0` என்பது 1 ஆகும்."

#: ../../tutorials/algorithms/09_IQPE.ipynb:516
msgid "So, after the reset we apply the phase gate :math:`P(\\theta)` with phase :math:`\\theta=-\\pi/2` conditioned by the classical bit :math:`c_0` (:math:`=\\varphi_2`) using the ``c_if`` method. So as we saw in the first part of this tutorial, we have to use the ``c_if`` method with a value of 1, as :math:`1_{10} = 001_{2}` (the subscripts :math:`_{10}` and :math:`_2` indicate the decimal and binary representations)."
msgstr "எனவே, மீட்டமைத்த பின் கட்டம் :math:`P(\\theta)` கட்டம் :math:`\\theta=-\\pi/2`` கிளாசிக்கல் பிட் :math:`c_0` (:math:`=\\varphi_2`) ``c_if`` முறையைப் பயன்படுத்துகிறது. இந்த டுடோரியலின் முதல் பகுதியில் நாம் பார்த்தது போல், 1 மதிப்புடன் ``c_if`` முறையைப் பயன்படுத்த வேண்டும் :math:`1_{10} = 001_{2}` (சந்தாக்கள் :math:`_{10}` மற்றும் :math:`_2` என்பது தசம மற்றும் பைனரி பிரதிநிதித்துவங்களைக் குறிக்கிறது)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:548
#: ../../tutorials/algorithms/09_IQPE.ipynb:921
msgid "Application of the Control-\\ :math:`U` gates and x-measurement (for step 2)"
msgstr "கட்டுப்பாடு பயன்பாடு-\\ :math:`U` வாயில்கள் மற்றும் எக்ஸ்-அளவீட்டு (படி 2 க்கு)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:550
msgid "We apply the :math:`CU` operations as we did in the first step. For the second step we have :math:`t=m-2`, hence :math:`2^t=1`. So we apply :math:`\\text{CP}(\\pi/2)` once. And then we perform the x-measurment of the qubit :math:`q_0`, storing the result, the phase bit :math:`\\varphi_1`, in the bit :math:`c_1` of classical register."
msgstr "நாங்கள் முதல் கட்டத்தில் செய்ததைப் போல :math:`CU` செயல்பாடுகளைப் பயன்படுத்துகிறோம். இரண்டாவது படிக்கு :math:`t=m-2`, எனவே :math:`2^t=1`. எனவே நாங்கள் விண்ணப்பிக்கிறோம் :math:`\\text{CP}(\\pi/2)` ஒரு முறை. பின்னர் நாம் குவிட்டின் x-அளவீட்டைச் செய்கிறோம் :math:`q_0`, முடிவைச் சேமித்தல், கட்ட பிட் :math:`\\varphi_1`, பிட் கிளாசிக்கல் பதிவின் :math:`c_1`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:575
msgid "Et voilà, we have our final circuit"
msgstr "Et voilà, எங்கள் இறுதி சுற்று உள்ளது"

#: ../../tutorials/algorithms/09_IQPE.ipynb:605
msgid "Let’s execute the circuit with the ``qasm_simulator``, the simulator without noise that run locally."
msgstr "உள்நாட்டில் இயங்கும் சத்தம் இல்லாமல் சிமுலேட்டரான ``qasm_simulator`` உடன் சுற்று இயக்கலாம்."

#: ../../tutorials/algorithms/09_IQPE.ipynb:643
msgid "In the picture we have the same histograms but on the left we have on the x-axis the string with phase bits :math:`\\varphi_1`, :math:`\\varphi_2` and on the right the actual phase :math:`\\varphi` in decimal representation."
msgstr "படத்தில் எங்களிடம் ஒரே ஹிஸ்டோகிராம்கள் உள்ளன, ஆனால் இடதுபுறத்தில் x-அச்சில் கட்ட பிட்கள் கொண்ட சரம் உள்ளது :math:`\\varphi_1`, :math:`\\varphi_2` மற்றும் வலதுபுறத்தில் உண்மையான கட்டம் தசம பிரதிநிதித்துவத்தில் :math:`\\varphi`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:645
msgid "As we expected we have found :math:`\\varphi=\\frac{1}{4}=0.25` with a :math:`100\\%` probability."
msgstr "நாங்கள் எதிர்பார்த்தபடி :math:`\\varphi=\\frac{1}{4}=0.25` உடன் :math:`100\\%` நிகழ்தகவு."

#: ../../tutorials/algorithms/09_IQPE.ipynb:657
msgid "IPE example with a 2-qubit gate"
msgstr "IPE உதாரணம் 2-கிபிட் வாயில்"

#: ../../tutorials/algorithms/09_IQPE.ipynb:659
msgid "Now, we want to apply the IPE algorithm to estimate the phase for a 2-qubit gate :math:`U`. For this example, let’s consider the controlled version of the :math:`T` gate, i.e. the gate :math:`U=\\textrm{Controlled-}T` (that from now we will express more complactly with :math:`CT`). Its matrix is"
msgstr "இப்போது, 2-குவிட் வாயிலுக்கான கட்டத்தை மதிப்பிடுவதற்கு ஐபிஇ வழிமுறையைப் பயன்படுத்த விரும்புகிறோம் :math:`U`. இந்த எடுத்துக்காட்டுக்கு, கணிதத்தின் கட்டுப்படுத்தப்பட்ட பதிப்பைக் கருத்தில் கொள்வோம் :math:`T` கேட், அதாவது கேட் :math:`U=\\textrm{Controlled-}T` (இனிமேல் நாம் கணிதத்துடன்: CT). அதன் அணி"

#: ../../tutorials/algorithms/09_IQPE.ipynb:661
msgid " CT =\n"
"\\begin{bmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^\\frac{i\\pi}{4}\\\\\n"
"\\end{bmatrix}"
msgstr " CT =\n"
"\\begin{bmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^\\frac{i\\pi}{4}\\\\\n"
"\\end{bmatrix}"

#: ../../tutorials/algorithms/09_IQPE.ipynb:671
msgid "That is, the :math:`CT` gate adds a phase :math:`\\pi/4` to the state :math:`|11\\rangle`, leaving unchanged the phase of the other computational basis states :math:`|00\\rangle`, :math:`|01\\rangle`, :math:`|10\\rangle`."
msgstr "அதாவது, :math:`CT` கேட் :math:`\\pi/4` என கட்டத்தை :math:`|11\\rangle` உடன் சேர்க்கிறது, அதை போல :math:`|00\\rangle`, :math:`|01\\rangle`, :math:`|10\\rangle` என பிற கணக்கீட்டு அடிப்படை நிலைகளின் கட்டம் மாறாமல் விடுகிறது."

#: ../../tutorials/algorithms/09_IQPE.ipynb:673
msgid "Let’s consider to estimate the phase :math:`\\phi=\\pi/4` for the eigenstate :math:`|11\\rangle`, we should find :math:`\\varphi=1/8`, since :math:`\\phi = 2 \\pi \\varphi`. Therefore to estimate the phase we need exactly 3 classical bits, i.e. \\ :math:`m=3`, since :math:`1/2^3=1/8`. So :math:`\\varphi=0.\\varphi_1\\varphi_2\\varphi_3`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:675
msgid "As done with the example for the 1-qubit :math:`U` operator we will go through the same steps but this time we will have :math:`3` steps since :math:`m=3`, and we will not repeat all the explanations. So for details see the above example for 1-qubit :math:`U` gate."
msgstr "1-குவிட் எடுத்துக்காட்டுடன் செய்யப்பட்டுள்ளபடி :math:`U` ஆபரேட்டர் நாங்கள் அதே படிகளைச் செல்வோம், ஆனால் இந்த முறை நமக்கு இருக்கும் :math:`3` படிகள் :math:`m=3`, மற்றும் நாங்கள் எல்லா விளக்கங்களையும் மீண்டும் செய்ய வேண்டாம். எனவே விவரங்களுக்கு 1-குவிட் :math:`U` கேட் மேலே உள்ள உதாரணத்தைக் காண்க."

#: ../../tutorials/algorithms/09_IQPE.ipynb:677
msgid "First, we initialize the circuit with 3 qubits, 1 for the auxiliary qubit and 2 for the 2-qubit gate, and 3 classical bits to store the phase bits :math:`\\varphi_1`, :math:`\\varphi_2`, :math:`\\varphi_3`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:706
msgid "Now we build the quantum circuit for the first step, to estimate the least significant phase bit :math:`\\varphi_m=\\varphi_3`."
msgstr "குறைந்த பட்ச குறிப்பிடத்தக்க கட்ட பிட்டை மதிப்பிடுவதற்கு இப்போது முதல் படிக்கு குவாண்டம் சுற்று உருவாக்குகிறோம் :math:`\\varphi_m=\\varphi_3`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:711
msgid "We initialize the auxiliary qubit and the other qubits with the eigenstate :math:`|11\\rangle`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:746
msgid "Then we have to apply multiple times the :math:`CU` operator, that, in this example, is the Controlled-\\ :math:`CT` gate (:math:`CCT` for short)."
msgstr "பின்னர் நாம் பல முறை விண்ணப்பிக்க வேண்டும் :math:`CU` ஆபரேட்டர், இந்த எடுத்துக்காட்டில், கட்டுப்படுத்தப்பட்ட- \\ :math:`CT` வாயில் (:math:`CCT` சுருக்கமாக)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:748
msgid "To implement :math:`CCT` in the circuit, since :math:`T` is a phase gate, we can use the multi-controlled phase gate :math:`\\text{MCP}(\\theta)`, with :math:`\\theta=\\pi/4`."
msgstr "செயல்படுத்த :math:`CCT` சுற்று, என்பதால் :math:`T` என்பது ஒரு கட்ட வாயில், நாம் பல கட்டுப்பாட்டு கட்ட வாயிலைப் பயன்படுத்தலாம் :math:`\\text{MCP}(\\theta)`, உடன் :math:`\\theta=\\pi/4`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:780
msgid "Let’s apply :math:`2^t` times :math:`\\text{MCP}(\\pi/4)`. Since for the first step :math:`t=m-1` and :math:`m=3`, we have :math:`2^t=4`."
msgstr "நாம் :math:`2^t` முறை :math:`\\text{MCP}(\\pi/4)`. முதல் படி :math:`t=m-1` மற்றும் :math:`m=3`, எங்களிடம் :math:`2^t=4`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:815
msgid "Finally, we perform the measurenment of the auxiliary qubit in x-basis. We can use the ``x_measurement`` function defined above in the example for 1-qubit gate. In this way we have obtained the phase bit :math:`\\varphi_3` and stored it in the classical bit :math:`c_0`."
msgstr "இறுதியாக, துணை குவிட்டின் அளவை x- அடிப்படையில் செய்கிறோம். 1-குவிட் கேட்டுக்கான எடுத்துக்காட்டில் மேலே வரையறுக்கப்பட்ட ``x_measurement`` செயல்பாட்டைப் பயன்படுத்தலாம். இந்த வழியில் நாம் கட்டம் பிட் :math:`\\varphi_3` ஐப் பெற்று கிளாசிக்கல் பிட் :math:`c_0` இல் சேமித்துள்ளோம்."

#: ../../tutorials/algorithms/09_IQPE.ipynb:847
msgid "Subsequent steps (2nd, 3rd)"
msgstr "அடுத்தடுத்த படிகள் (2 வது, 3 வது)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:849
msgid "Now we build the quantum circuit for the other remaining steps, the second and the third ones. As said in the first example, in these steps we have the additional sub-step of the phase correction."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:887
msgid "In order to extract the phase bit :math:`\\varphi_{2}`, we perform a phase correction of :math:`-\\pi\\varphi_3/2`."
msgstr "கட்ட பிட் பிரித்தெடுப்பதற்காக :math:`\\varphi_{2}`, :math:`-\\pi\\varphi_3/2` இன் ஒரு கட்ட திருத்தம் செய்கிறோம்."

#: ../../tutorials/algorithms/09_IQPE.ipynb:889
msgid "So, after the reset we apply the phase gate :math:`P(\\theta)` with phase :math:`\\theta=-\\pi/2` conditioned by the classical bit :math:`c_0` (:math:`=\\varphi_3`)."
msgstr "எனவே, மீட்டமைத்த பின் கட்டம் :math:`P(\\theta)` கட்டம் :math:`\\theta=-\\pi/2` கிளாசிக்கல் பிட் :math:`c_0` (:math:`=\\varphi_3`)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:923
msgid "We apply the :math:`CU` operations as we did in the first step. For the second step we have :math:`t=m-2`, hence :math:`2^t=2`. So we apply :math:`\\text{MCP}(\\pi/4)` :math:`2` times. And then we perform the x-measurement of the qubit :math:`q_0`, storing the phase bit :math:`\\varphi_2` in the bit :math:`c_1`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:957
msgid "All substeps of the 3rd step"
msgstr "3 வது படியின் அனைத்து மாற்றுகளும்"

#: ../../tutorials/algorithms/09_IQPE.ipynb:959
msgid "For the 3rd and last step, we perform the reset and initialization of the auxiliary qubit as done in the second step."
msgstr "3 வது மற்றும் கடைசி கட்டத்திற்கு, இரண்டாவது கட்டத்தில் செய்ததைப் போல துணை குவிட்டின் மீட்டமைப்பு மற்றும் துவக்கத்தை நாங்கள் செய்கிறோம்."

#: ../../tutorials/algorithms/09_IQPE.ipynb:961
msgid "Then at the 3rd step we have to perform the phase correction of :math:`-2\\pi 0.0\\varphi_{2}\\varphi_{3}= -2\\pi \\left(\\frac{\\varphi_2}{4}+\\frac{\\varphi_3}{8}\\right)=-\\frac{\\varphi_2\\pi}{2}-\\frac{ \\varphi_3\\pi}{4}`, thus we have to apply 2 conditioned phase corrections, one conditioned by :math:`\\varphi_3` (:math:`=c_0`) and the other by :math:`\\varphi_2`\\ (:math:`=c_1`). To do this we have to apply the following: - gate :math:`P(-\\pi/4)` conditioned by :math:`c_0=1`, that is, by :math:`c=001` (c_if with value 1) - gate :math:`P(-\\pi/2)` conditioned by :math:`c_1=1`, that is, the gate is applied when :math:`c=010` (c_if with values :math:`2`) - gate :math:`P(-3\\pi/4)` conditioned by :math:`c_1=1` and :math:`c_0=1` that is, the gate is applied when :math:`c=011` (c_if with values :math:`3`)"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:964
msgid "Next, the :math:`CU` operations: we apply :math:`2^t` times the :math:`\\text{MCP}(\\pi/4)` gate and since at the 3rd step :math:`t=m-3=0`, we apply the gate only once."
msgstr "அடுத்து, :math:`CU` செயல்பாடுகள்: நாங்கள் விண்ணப்பிக்கிறோம் :math:`2^t` மடங்கு :math:`\\text{MCP}(\\pi/4)` கேட் மற்றும் 3 வது கட்டத்தில் இருந்து :math:`t=m-3=0` , நாங்கள் ஒரு முறை மட்டுமே கேட்டைப் பயன்படுத்துகிறோம்."

#: ../../tutorials/algorithms/09_IQPE.ipynb:1012
msgid "Now, we execute the circuit with the simulator without noise."
msgstr "இப்போது, சத்தம் இல்லாமல் சிமுலேட்டருடன் சுற்று இயக்குகிறோம்."

#: ../../tutorials/algorithms/09_IQPE.ipynb:1049
msgid "We have obtained :math:`100\\%` probability to find :math:`\\varphi=0.125`, that is, :math:`1/8`, as expected."
msgstr "நாங்கள் பெற்றுள்ளோம் :math:`100\\%` கண்டுபிடிக்க நிகழ்தகவு :math:`\\varphi=0.125`, அதாவது, :math:`1/8`, எதிர்பார்த்தபடி."

