msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-10 14:06+0000\n"
"PO-Revision-Date: 2021-06-24 16:38\n"
"Last-Translator: \n"
"Language-Team: Tamil\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/04_vqe_advanced.po\n"
"X-Crowdin-File-ID: 9450\n"
"Language: ta_IN\n"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:10
msgid "This page was generated from `tutorials/algorithms/04_vqe_advanced.ipynb`__."
msgstr "இந்த பக்கம் `tutorials/algorithms/04_vqe_advanced.ipynb`__இலிருந்து உருவாக்கப்பட்டது."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/04_vqe_advanced.ipynb>`_."
msgstr "இயக்குநிலை தொடர்புக்கு `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/04_vqe_advanced.ipynb>`_."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:9
msgid "Advanced VQE usage"
msgstr "மேம்பட்ட VQE பயன்பாடு"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:11
msgid "There exist several parameters for configuring and using more advanced `VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html>`__ capabilities. This tutorial will cover the parameters such as ``initial point``, ``expectation`` and ``gradient``."
msgstr "மேலும் முன்னேற்றப்பட்ட `VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html>`__ திறன்களை பயன்படுத்துவதற்கு பல அளபுருக்கள் இருக்கிறது. இந்த டுடோரியல் ``initial_point``, ``expectation`` மற்றும் ``gradient`` போன்ற அளவுருக்களை உள்ளடக்கும்."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:13
msgid "It will also cover advanced simulator use such as using Aer with the Matrix Product State method."
msgstr "மேட்ரிக்ஸ் தயாரிப்பு நிலை முறையுடன் (Matrix Product State method) ஏர் பயன்படுத்துவது போன்ற மேம்பட்ட சிமுலேட்டர் பயன்பாட்டையும் இது உள்ளடக்கும்."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:39
msgid "Here we will use the same operator as used in the other VQE algorithms tutorials."
msgstr "மற்ற VQE வழிமுறைகளின் பயிற்சிகளில் பயன்படுத்தப்படும் அதே ஆபரேட்டரை இங்கே பயன்படுத்துவோம்."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:65
msgid "Initial point"
msgstr "ஆரம்ப புள்ளி"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:67
msgid "The ``initial_point`` parameter allows the optimization to begin at the given point, where the point is a list of parameters that will configure the ansatz. By default the initial point is ``None`` which means that VQE will choose one. The choice in in this case is if the supplied ansatz has a preferred point, based on the initial state provided to it, then this will be chosen, otherwise a random initial point that fits with any bounds the ansatz has will be chosen. If an initial point is supplied it will take priority though and be used - note though it must match in length to the number of parameters in the ansatz circuit."
msgstr "``initial_point`` பராமீட்டர் கொடுக்கப்பட்ட புள்ளியில் தேர்வுமுறை தொடங்க அனுமதிக்கிறது, அங்கு புள்ளி என்பது அன்சாட்ஸ் (ansatz) உள்ளமைக்கும் பராமீட்டர்களின் பட்டியல். இயல்பாக தொடக்க புள்ளி ``None`` அதாவது VQE ஒன்றைத் தேர்ந்தெடுக்கும். இந்த வழக்கில் தேர்வு என்னவென்றால், வழங்கப்பட்ட அன்சாட்ஸுக்கு வழங்கப்பட்ட ஆரம்ப நிலையின் அடிப்படையில் விருப்பமான புள்ளி இருந்தால், இது தேர்வு செய்யப்படும், இல்லையெனில் அன்சாட்ஸின் எந்த எல்லைகளுக்கும் பொருந்தக்கூடிய ஒரு சீரற்ற ஆரம்ப புள்ளி தேர்வு செய்யப்படும். ஒரு ஆரம்ப புள்ளி வழங்கப்பட்டால், அது முன்னுரிமை எடுக்கும் மற்றும் பயன்படுத்தப்படும் - குறிப்பாக இது அன்சாட்ஸ் சுற்றுகளில் உள்ள அளவுருக்களின் எண்ணிக்கையுடன் நீளத்துடன் பொருந்த வேண்டும்."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:70
msgid "Why to use a initial point? One reason would be if you have guess a reasonable starting point for the problem or perhaps know have information from a prior experiment."
msgstr "ஆரம்ப புள்ளியை ஏன் பயன்படுத்த வேண்டும்? சிக்கலுக்கான ஒரு நியாயமான தொடக்கப் புள்ளியை நீங்கள் யூகித்திருந்தால் அல்லது முந்தைய பரிசோதனையிலிருந்து தகவல் இருந்தால் ஒருவேளை ஒரு காரணமாக இருக்கலாம்."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:72
msgid "To demonstrate the use let’s first simply repeat the first working example from the `algorithms introduction <01_algorithms_introduction.ipynb#A-complete-working-example>`__ tutorial to get a solution’s optimal point."
msgstr "பயன்பாட்டை நிரூபிக்க, முதலில் `algorithms introduction <01_algorithms_introduction.ipynb#A-complete-working-example>`__ டுடோரியலில் இருந்து ஒரு தீர்வின் உகந்த புள்ளியைப் பெறுவதற்கான முதல் வேலை உதாரணத்தை மீண்டும் செய்வோம்."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:155
msgid "Now we can take the ``optimal_point`` from the above result and use it as the ``initial_point`` here."
msgstr "இப்போது நாம் மேலே உள்ள முடிவிலிருந்து ``optimal_point`` -ஐ எடுத்து இங்கே ``initial point`` ஆக பயன்படுத்தலாம்."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:245
msgid "Here we see that result was arrived at much more quickly with ``optimizer_evals`` when it started from a random value when the initial point was not supplied (default of None)."
msgstr "ஆரம்ப புள்ளி வழங்கப்படாதபோது (இயல்புநிலையாக - None) ஒரு சீரற்ற மதிப்பிலிருந்து தொடங்கியபோது, ``optimizer_evals`` உடன் அந்த முடிவு மிக விரைவாக வந்துள்ளது என்பதை இங்கே காண்கிறோம்."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:247
msgid "Where this becomes useful for examples where we the solution to one problem can be used to for a guess for the solution to a very close similar problem. Chemistry is very good example where we change the inter-atomic distance(s) of molecule to plot a dissociation profile. When the distance changes are small we expect the solution to still be nearby the prior one. One technique is to simply use the optimal point from one solution as the starting point for the next step. Now more complex techniques are possible that do some extrapolation to compute an initial position based on prior solution(s) rather than directly use the prior solution."
msgstr "எடுத்துக்காட்டுகளுக்கு இது பயனுள்ளதாக இருக்கும் இடத்தில், ஒரு பிரச்சினைக்கான தீர்வை மிக நெருக்கமான ஒத்த பிரச்சினைக்கான தீர்வுக்கான யூகத்திற்கு பயன்படுத்தலாம். வேதியியல் மிகச் சிறந்த எடுத்துக்காட்டு, அங்கு ஒரு விலகல் சுயவிவரத்தைத் திட்டமிட மூலக்கூறின் இடை-அணு தூரத்தை (களை) மாற்றுகிறோம். தூர மாற்றங்கள் சிறியதாக இருக்கும்போது, தீர்வு இன்னும் முந்தையதை அருகில் இருக்கும் என்று எதிர்பார்க்கிறோம். ஒரு நுட்பம் ஒரு தீர்விலிருந்து உகந்த புள்ளியை அடுத்த கட்டத்திற்கான தொடக்க புள்ளியாகப் பயன்படுத்துவது. இப்போது மிகவும் சிக்கலான நுட்பங்கள் சாத்தியமானவை, அவை முந்தைய தீர்வை நேரடியாகப் பயன்படுத்துவதற்குப் பதிலாக முந்தைய தீர்வை (களை) அடிப்படையாகக் கொண்டு ஒரு ஆரம்ப நிலையை கணக்கிட சில விரிவாக்கங்களைச் செய்கின்றன."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:260
msgid "Expectation"
msgstr "எதிர்பார்ப்பு"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:262
msgid "The energy of the Hamiltonian operator that VQE is working on is the expectation value when evaluated with the parameterized ansatz. To compute the expectation value VQE uses an instance of an `expectation <https://qiskit.org/documentation/apidoc/qiskit.opflow.expectations.html>`__ object. Such an instance may be supplied via the ``expectation`` parameter, or in the default case, where it has a value of ``None``, VQE will use the `ExpectationFactory <https://qiskit.org/documentation/stubs/qiskit.opflow.expectations.ExpectationFactory.html>`__ to create itself a suitable instance based on the supplied backend."
msgstr "VQE பணிபுரியும் ஹாமில்டோனிய ஆபரேட்டரின் ஆற்றல் அளவுருவாக்கப்பட்ட அன்சாட்ஸுடன் மதிப்பீடு செய்யும்போது எதிர்பார்ப்பு மதிப்பு. எதிர்பார்ப்பு மதிப்பைக் கணக்கிட VQE ஒரு `expectation <https://qiskit.org/documentation/apidoc/qiskit.opflow.expectations.html>`__ ஆப்ஜெக்டின் உதாரணத்தைப் பயன்படுத்துகிறது. அத்தகைய நிகழ்வு ``expectation`` பராமீட்டர் வழியாக வழங்கப்படலாம் அல்லது இயல்புநிலை வழக்கில், அது ``None`` என்ற மதிப்பைக் கொண்டிருக்கலாம், VQE `ExpectationFactory <https://qiskit.org/documentation/stubs/qiskit.opflow.expectations.ExpectationFactory.html>`__ வழங்கப்பட்ட பின்தளத்தில் அடிப்படையில் ஒரு பொருத்தமான நிகழ்வை உருவாக்க உதவும்."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:265
msgid "For most cases letting VQE create a suitable instance is sufficient. However the Qiskit Aer aer_simulator supports a snapshot instruction that can be used in conjunction with the operator expectation computation. If used then the outcome is ideal, i.e. like the statevector simulator, and has no shot noise. Since people normally choose the aer_simulator to have shot noise (sampling noise), and be more like a real-device outcome, VQE has an ``include_custom`` flag that is passed on to the ExpectationFactory. When using Aer qasm simulator, and this is set ``True``, the factory will return ``AerPauliExpectation`` which uses the snapshot instruction, when ``False``, default, then the regular ``PauliExpectation`` is returned."
msgstr "பெரும்பாலான சந்தர்ப்பங்களில் VQE ஒரு பொருத்தமான நிகழ்வை உருவாக்க அனுமதித்தால் போதுமானது. இருப்பினும், Qiskit Aer aer_simulator ஒரு ஸ்னாப்ஷாட் அறிவுறுத்தலை ஆதரிக்கிறது, இது ஆபரேட்டர் எதிர்பார்ப்பு கணக்கீட்டுடன் இணைந்து பயன்படுத்தப்படலாம். பயன்படுத்தினால், விளைவு சிறந்தது, அதாவது ஸ்டேட்வெக்டர் சிமுலேட்டரைப் போன்றது, மற்றும் ஷாட் சத்தம் இல்லை. மக்கள் பொதுவாக aer_simulator -ஐ குறைவான சத்தம் (மாதிரி சத்தம்) தேர்வு செய்வதால், மேலும் உண்மையான சாதன விளைவுகளைப் போலவே இருக்க வேண்டும் என்பதால், VQE இல் ``include_custom`` கொடி உள்ளது, இது எதிர்பார்ப்பு செயல்திறனுக்கு அனுப்பப்படுகிறது. Aer qasm சிமுலேட்டரைப் பயன்படுத்தும் போது, இது ``True`` என அமைக்கப்பட்டால், ஃபாக்டரி ஸ்னாப்ஷாட் அறிவுறுத்தலைப் பயன்படுத்தும் ``AerPauliExpectation`` ஐத் தரும், ``False``, இயல்புநிலை, என அமைக்கப்பட்டால் வழக்கமான ``PauliExpectation`` ஐத் தரும்."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:268
msgid "The following example shows ``include_custom=True`` where the outcome matches the statevector simulator. In fact it can be better/faster to do this than use the statevector_simulator directly. This is because in the latter case when the Hamiltonian is a sum of Paulis it must be converted to matrix form, and this is avoided when using the snapshot instruction done when include_custom is True."
msgstr "பின்வரும் எடுத்துக்காட்டு ``include_custom=True`` ஐக் காட்டுகிறது, அங்கு விளைவு, ஸ்டேட்வெக்டர் சிமுலேட்டருடன் பொருந்துகிறது. உண்மையில் statevector_simulator-ஐ நேரடியாகப் பயன்படுத்துவதை விட இதைச் செய்வது நல்லது/வேகமாக இருக்கும். ஏனென்றால், பின்வரும் சந்தர்ப்பத்தில், ஹாமில்டோனியன் Paulis தொகையாக இருக்கும்போது அது மேட்ரிக்ஸ் வடிவமாக மாற்றப்பட வேண்டும், மேலும் include_custom உண்மை எனும்போது செய்யப்படும் ஸ்னாப்ஷாட் அறிவுறுத்தலைப் பயன்படுத்தும்போது இது தவிர்க்கப்படுகிறது."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:350
msgid "In case you have doubts here is the aer_simulator again but include_custom has been left to default to False. The optimization ended abruptly, presumably due to the shot noise confusing the SLSQP optimizer."
msgstr "உங்களுக்கு இங்கே சந்தேகம் இருந்தால் மீண்டும் aer_simulator உள்ளது, ஆனால் include_custom இயல்புநிலையாக தவறுக்கு விடப்பட்டுள்ளது. தேர்வுமுறை திடீரென முடிந்தது, ஷாட் சத்தம் SLSQP ஆப்டிமைசெர் குழப்புவதால் இருக்கலாம்."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:443
msgid "Changing the optimizer to SPSA, which is designed to work in noisy environments, gets us a better result. Though the noise has affected the outcome so it’s not as accurate."
msgstr "சத்தம் அதிகமான சூழலில் வேலை செய்ய வடிவமைக்கப்பட்ட SPSA க்கு ஆப்டிமைசரை மாற்றுவதால் நம்மால் ஒரு சிறந்த முடிவைப் பெற முடிகிறது. சத்தம் முடிவை பாதித்திருந்தாலும், அது அவ்வளவு துல்லியமாக இல்லை."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:524
msgid "As mentioned above, an expectation object can be explicitly given (so the internal ``ExpectationFactory`` and include_custom are never used/needed. Below we create an ``AerPauliExpectation`` and pass this to VQE. We can see the result matches that above where we set include_custom to True and let VQE create its own expectation object."
msgstr "மேலே குறிப்பிட்டுள்ளபடி, ஒரு எதிர்பார்ப்பு ஆப்ஜெக்டை வெளிப்படையாகக் கொடுக்க முடியும் (ஆகவே, உள் ``ExpectationFactory`` மற்றும் include_custom ஒருபோதும் பயன்படுத்தப்படுவதில்லை/தேவையில்லை. கீழே நாம் ஒரு ``AerPauliExpectation`` ஐ உருவாக்கி இதை VQE-க்கு அனுப்புகிறோம். மேலே include_custom உண்மை என அமைத்து, VQE அதன் சொந்த எதிர்பார்ப்பு ஆப்ஜெக்டை உருவாக்க அனுமதிக்கிறோம்."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:606
msgid "By default, the ``PauliExpectation`` object, that would have be chosen when include_custom is False (or when using Aer aer_simulator, or a real device) groups Paulis into commuting sets. This is efficient as it runs less circuits to compute the expectation. However, if for some reason you wanted to run a circuit for each Pauli then then grouping can be turned off when constructing the PauliExpectation. You need to explicitly pass in such an expectation instance to VQE to have it work this way though as shown below."
msgstr "முன்னிருப்பாக, ``PauliExpectation`` பொருள், இதில் include_custom தவறானது (அல்லது Aer aer_simulator அல்லது ஒரு உண்மையான சாதனத்தைப் பயன்படுத்தும் போது) பவுலிஸ் பயணத் தொகுப்புகளாகக் குழுவாகக் கொண்டிருக்கும். எதிர்பார்ப்பைக் கணக்கிடுவதற்கு இது குறைந்த சுற்றுகளை இயக்குவதால் இது திறமையானது. இருப்பினும், சில காரணங்களால் நீங்கள் ஒவ்வொரு பவுலிக்கும் ஒரு சுற்று இயக்க விரும்பினால், பவுலி எக்ஸ்பெக்டேஷனை உருவாக்கும்போது குழுவாக்கத்தை அணைக்க முடியும். கீழே காட்டப்பட்டுள்ளபடி இந்த வழியில் செயல்பட நீங்கள் VQE க்கு இதுபோன்ற எதிர்பார்ப்பு நிகழ்வில் வெளிப்படையாக அனுப்ப வேண்டும்."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:690
msgid "Gradient"
msgstr "சாய்வு"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:692
msgid "Optimizers that use a gradient-based technique can be supplied with a user defined gradient that will be used instead of their default gradient computation which is usually done by simple finite difference. Gradients are passed indirectly via to the optimizer via its ``gradient`` parameter."
msgstr "ஒளிச்சேர்வு ஒரு கிரேடியன்-அடிப்படையிலான நுட்பத்தை பயன்படுத்தி ஒரு பயனர் வரையறுக்கப்பட்ட கிரேடியன்களுடன் கொடுக்கலாம். அவற்றின் முன்னிருப்பு சாய்வு கணிப்புகளுக்கு பதிலாக பயன்படுத்தப்படும். கிரேடியன் அதன் அளபுரு வழியாக ஒப்பீட்டாளர் மூலம் நேரடியாக கடத்தப்படுகின்றன."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:694
msgid "As the use of a user supplied ``gradient`` was shown in the `Monitoring VQE Convergence <02_vqe_convergence.ipynb#Using-Gradient-framework>`__ tutorial I will simply refer you there. Also the `Gradients framework <../operators/02_gradients_framework.ipynb>`__ tutorial has much more about the gradients themselves."
msgstr "`` gradient`` வழங்கப்பட்ட பயனரின் பயன்பாடு `Monitoring VQE Convergence <02_vqe_convergence.ipynb#Using-Gradient-framework>` __ டுடோரியலில் காண்பிக்கப்படுவதால், நான் உங்களை அங்கேயே குறிப்பிடுவேன். `Gradients framework <../operators/02_gradients_framework.ipynb>` __ டுடோரியலில் சாய்வுகளைப் பற்றி அதிகம் உள்ளது."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:706
msgid "Quantum Instance and advanced simulation"
msgstr "குவாண்டம் நிகழ்வு மற்றும் மேம்பட்ட உருவகப்படுத்துதல்"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:708
msgid "While you may be familiar with passing a QuantumInstancen created from a ``aer_simulator_statevector`` a ``aer_simulator`` or real device backend, it is possible to use the advanced simulation modes of Aer too when applicable. For instance we can easily use the Aer `Matrix Product State <../simulators/7_matrix_product_state_method.ipynb>`__ method, that has the potential to scale to larger numbers of qubits."
msgstr "Aer_simulator_statevector`` ஒரு `` aer_simulator`` அல்லது உண்மையான சாதன பின்தளத்தில் இருந்து உருவாக்கப்பட்ட ஒரு குவாண்டம் இன்ஸ்டான்சென் கடந்து செல்வதை நீங்கள் அறிந்திருக்கலாம், பொருந்தும்போது ஏரின் மேம்பட்ட உருவகப்படுத்துதல் முறைகளையும் பயன்படுத்தலாம். உதாரணமாக, ஏர் <../simulators/7_matrix_product_state_method.ipynb>` முறையை நாம் எளிதாகப் பயன்படுத்தலாம், இது அதிக எண்ணிக்கையிலான குவிட்டுகளுக்கு அளவிடக்கூடிய ஆற்றலைக் கொண்டுள்ளது."

