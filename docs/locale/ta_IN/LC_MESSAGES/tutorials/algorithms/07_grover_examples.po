msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 17:09+0000\n"
"PO-Revision-Date: 2021-06-28 18:43\n"
"Last-Translator: \n"
"Language-Team: Tamil\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/07_grover_examples.po\n"
"X-Crowdin-File-ID: 9506\n"
"Language: ta_IN\n"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:10
msgid "This page was generated from `tutorials/algorithms/07_grover_examples.ipynb`__."
msgstr "இந்த பக்கம் `tutorials/algorithms/07_grover_examples.ipynb`__. லிருந்து உருவாக்கப்பட்டது."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:9
msgid "Grover’s algorithm examples"
msgstr "க்ரோவர் வழிமுறையின் எடுத்துக்காட்டுகள்"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:11
msgid "This notebook has examples demonstrating how to use the Qiskit `Grover <https://qiskit.org/documentation/stubs/qiskit.algorithms.Grover.html>`__ search algorithm, with different oracles."
msgstr "இந்த குறிப்பேடு Qiskit `Grover <https://qiskit.org/documentation/stubs/qiskit.algorithms.Grover.html>`__ தேடல் வழிமுறை, வெவ்வேறு ஆரக்கிள்களுடன் எவ்வாறு பயன்படுத்துவது என்பதை விளக்கும் எடுத்துக்காட்டுகள் உள்ளன."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:39
msgid "Finding solutions to 3-SAT problems"
msgstr "3-SAT சிக்கல்களுக்கு தீர்வுகளைக் கண்டறிதல்"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:41
msgid "Let’s look at an example 3-Satisfiability (3-SAT) problem and walk-through how we can use Quantum Search to find its satisfying solutions. 3-SAT problems are usually expressed in `Conjunctive Normal Forms (CNF) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ and written in the `DIMACS-CNF <http://www.satcompetition.org/2009/format-benchmarks2009.html>`__ format. For example:"
msgstr "ஒரு எடுத்துக்காட்டு 3-Satisfiabitlity (3-SAT) சிக்கலைப் பார்ப்போம், அதன் திருப்திகரமான தீர்வுகளைக் கண்டறிய குவாண்டம் தேடலை எவ்வாறு பயன்படுத்தலாம் என்பதைப் பார்ப்போம். 3-SAT சிக்கல்கள் வழக்கமாக `Conjunctive Normal Forms (CNF) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ மற்றும் `DIMACS-CNF <http://www.satcompetition.org/2009/format-benchmarks2009.html>`__ முறையில் வெளிப்படுத்தலாம். உதாரணத்திற்கு:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:70
msgid "The CNF of this 3-SAT instance contains 3 variables and 5 clauses:"
msgstr "இந்த 3-SAT உதாரணம் CNF 3 மாறிகள் மற்றும் 5 உட்பிரிவுகளைக் கொண்டுள்ளது:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:72
msgid ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"
msgstr ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:74
msgid "It can be verified that this 3-SAT problem instance has three satisfying solutions:"
msgstr "இந்த 3-SAT சிக்கல் உதாரணம் மூன்று திருப்திகரமான தீர்வுகளைக் கொண்டுள்ளது என்பதை சரிபார்க்க முடியும்:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:76
msgid ":math:`(v_1, v_2, v_3) = (T, F, T)` or :math:`(F, F, F)` or :math:`(T, T, F)`"
msgstr ":math:`(v_1, v_2, v_3) = (T, F, T)` or :math:`(F, F, F)` or :math:`(T, T, F)`"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:78
msgid "Or, expressed using the DIMACS notation:"
msgstr "அல்லது, DIMACS குறியீட்டைப் பயன்படுத்தி வெளிப்படுத்தப்படுகிறது:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:80
msgid "``1 -2 3``, or ``-1 -2 -3``, or ``1 2 -3``."
msgstr "``1 -2 3``, அல்லது ``-1 -2 -3``, அல்லது ``1 2 -3``."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:82
msgid "With this example problem input, we then create the corresponding ``oracle`` for our ``Grover`` search. In particular, we use the ``PhaseOracle`` component, which supports parsing DIMACS-CNF format strings and constructing the corresponding oracle circuit."
msgstr "இந்த எடுத்துக்காட்டு சிக்கல் உள்ளீட்டைக் கொண்டு, எங்கள் ``Grover`` தேடலுக்கான தொடர்புடைய ``oracle`` ஐ உருவாக்குகிறோம். குறிப்பாக, நாங்கள் ``PhaseOracle`` கூறுகளைப் பயன்படுத்துகிறோம், இது DIMACS-CNF வடிவமைப்பு ஸ்ட்ரிஂங்களைப் பாகுபடுத்துவதற்கும் அதனுடன் தொடர்புடைய ஆரக்கிள் சர்க்யூட்களை உருவாக்குவதற்கும் துணைபுரிகிறது."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:117
msgid "The ``oracle`` can now be used to create an Grover instance:"
msgstr "க்ரோவர் உதாரணத்தை உருவாக்க ``oracle`` இப்போது பயன்படுத்தப்படலாம்:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:140
msgid "We can then configure the backend and run the Grover instance to get the result:"
msgstr "முடிவைப் பெற நாம் பின்தளத்தில் உள்ளமைத்து க்ரோவர் உதாரணத்தை இயக்கலாம்:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:186
msgid "As seen above, a satisfying solution to the specified 3-SAT problem is obtained. And it is indeed one of the three satisfying solutions."
msgstr "மேலே பார்த்தபடி, குறிப்பிட்ட 3-SAT சிக்கலுக்கு திருப்திகரமான தீர்வு பெறப்படுகிறது. இது உண்மையில் மூன்று திருப்திகரமான தீர்வுகளில் ஒன்றாகும்."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:188
msgid "Since we used the ``'aer_simulator'``, the complete measurement result is also returned, as shown in the plot below, where it can be seen that the binary strings ``000``, ``011``, and ``101`` (note the bit order in each string), corresponding to the three satisfying solutions all have high probabilities associated with them."
msgstr "நாங்கள் ``'aer_simulator'`` பயன்படுத்தியதால், கீழேயுள்ள அடுக்கில் காட்டப்பட்டுள்ளபடி, முழுமையான அளவீட்டு முடிவும் திரும்பப் பெறப்படுகிறது, அங்கு பைனரி ஸ்ட்ரிங்கள் ``000``, ``011``, மற்றும் ``101`` (ஒவ்வொரு ஸ்ட்ரிங்கிலும் பிட் வரிசையைக் கவனியுங்கள்), மூன்று திருப்திகரமான தீர்வுகளுடன் தொடர்புடையது, அவற்றுடன் தொடர்புடைய உயர் நிகழ்தகவுகள் உள்ளன."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:219
msgid "Boolean Logical Expressions"
msgstr "பூலியன் தருக்க வெளிப்பாடுகள்"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:221
msgid "Qiskit’s ``Grover`` can also be used to perform Quantum Search on an ``Oracle`` constructed from other means, in addition to DIMACS. For example, the ``PhaseOracle`` can actually be configured using arbitrary Boolean logical expressions, as demonstrated below."
msgstr "DIMACS-உடன் கூடுதலாக, பிற வழிகளிலிருந்து கட்டப்பட்ட ``Oracle`` இல் குவாண்டம் தேடலைச் செய்ய Qiskit-ன் ``Grover`` பயன்படுத்தப்படலாம். எடுத்துக்காட்டாக, ``PhaseOracle`` உண்மையில் கீழே காட்டப்பட்டுள்ளபடி தன்னிச்சையான பூலியன் தருக்க வெளிப்பாடுகளைப் பயன்படுத்தி கட்டமைக்க முடியும்."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:258
msgid "In the example above, the input Boolean logical expression ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` should be quite self-explanatory, where ``^``, ``~``, and ``&`` represent the Boolean logical XOR, NOT, and AND operators, respectively. It should be quite easy to figure out the satisfying solution by examining its parts: ``w ^ x`` calls for ``w`` and ``x`` taking different values; ``~(y ^ z)`` requires ``y`` and ``z`` be the same; ``x & y & z`` dictates all three to be ``True``. Putting these together, we get the satisfying solution ``(w, x, y, z) = (False, True, True, True)``, which our ``Grover``\\ ’s result agrees with."
msgstr "மேலே உள்ள எடுத்துக்காட்டில், பூலியன் தருக்க வெளிப்பாடு ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` மிகவும் சுய விளக்கமாக இருக்க வேண்டும், அங்கு ``^``, ``~``, மற்றும் ``&`` முறையே பூலியன் தருக்க XOR, NOT மற்றும் AND ஆபரேட்டர்களைக் குறிக்கின்றன. அதன் பகுதிகளை ஆராய்வதன் மூலம் திருப்திகரமான தீர்வைக் கண்டறிவது மிகவும் எளிதாக இருக்க வேண்டும்: ``w ^ x``, ``w`` மற்றும் ``x`` வெவ்வேறு மதிப்புகளை எடுத்துக்கொள்வதற்கான அழைப்புகள்; ``~ (y ^ z)`` க்கு ``y`` மற்றும் ``z`` ஆகியவை ஒரே மாதிரியாக இருக்க வேண்டும்; ``x & y & z`` மூன்றையும் ``True`` என்று ஆணையிடுகிறது. இவற்றைச் சேர்த்து, திருப்திகரமான தீர்வைப் பெறுகிறோம் ``(w, x, y, z) = (False, True, True, True)``, இது எங்கள் ``Grover``\\ ’s இன் முடிவு ஒப்புக்கொள்கிறது."

