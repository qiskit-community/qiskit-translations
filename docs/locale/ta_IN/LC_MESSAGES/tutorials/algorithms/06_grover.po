msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-10 14:06+0000\n"
"PO-Revision-Date: 2021-06-24 17:54\n"
"Last-Translator: \n"
"Language-Team: Tamil\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/06_grover.po\n"
"X-Crowdin-File-ID: 9504\n"
"Language: ta_IN\n"

#: ../../tutorials/algorithms/06_grover.ipynb:10
msgid "This page was generated from `tutorials/algorithms/06_grover.ipynb`__."
msgstr "இந்த பக்கம் `tutorials/algorithms/07_grover.ipynb`__ இலிருந்து உருவாக்கப்பட்டது."

#: ../../tutorials/algorithms/06_grover.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/06_grover.ipynb>`_."
msgstr "`IBM குவாண்டம் ஆய்வகத்தில் `<https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/07_grover.ipynb>`இல் இயங்குநிலை தொடர்பாக இயக்கவும்."

#: ../../tutorials/algorithms/06_grover.ipynb:9
msgid "Grover’s Algorithm and Amplitude Amplification"
msgstr "க்ரோவரின் அல்காரிதம் மற்றும் அலைவீச்சு பெருக்கம்"

#: ../../tutorials/algorithms/06_grover.ipynb:11
msgid "Grover’s algorithm is one of the most famous quantum algorithms introduced by Lov Grover in 1996 [1]. It has initially been proposed for unstructured search problems, i.e. for finding a marked element in a unstructured database. However, Grover’s algorithm is now a subroutine to several other algorithms, such as Grover Adaptive Search [2]. For the details of Grover’s algorithm, please see `Grover’s Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ in the Qiskit textbook."
msgstr "க்ரோவரின் வழிமுறை 1996 இல் லோவ் க்ரோவர் அறிமுகப்படுத்திய மிகவும் பிரபலமான குவாண்டம் வழிமுறைகளில் ஒன்றாகும் [1]. இது ஆரம்பத்தில் கட்டமைக்கப்படாத தேடல் சிக்கல்களுக்கு முன்மொழியப்பட்டது, அதாவது கட்டமைக்கப்படாத தரவுத்தளத்தில் குறிக்கப்பட்ட உறுப்பைக் கண்டுபிடிப்பதற்காக. இருப்பினும், க்ரோவரின் வழிமுறை இப்போது க்ரோவர் தகவமைப்பு தேடல் [2] போன்ற பல வழிமுறைகளுக்கு ஒரு சப்ரூட்டீன் ஆகும். க்ரோவரின் வழிமுறையின் விவரங்களுக்கு, Qiskit பாடப்புத்தகத்தில் `Grover’s Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ ஐப் பார்க்கவும்."

#: ../../tutorials/algorithms/06_grover.ipynb:13
msgid "Qiskit implements Grover’s algorithm in the ``Grover`` class. This class also includes the generalized version, Amplitude Amplification [3], and allows setting individual iterations and other meta-settings to Grover’s algorithm."
msgstr "Qiskit க்ரோவரின் வழிமுறையை ``Grover`` வகுப்பில் செயல்படுத்துகிறது. இந்த வகுப்பில் பொதுவான பதிப்பு, அலைவீச்சு பெருக்கம் [3] ஆகியவை அடங்கும், மேலும் க்ரோவரின் வழிமுறைக்கு தனிப்பட்ட மறு செய்கைகள் மற்றும் பிற மெட்டா அமைப்புகளை அமைக்க அனுமதிக்கிறது."

#: ../../tutorials/algorithms/06_grover.ipynb:15
#: ../../tutorials/algorithms/06_grover.ipynb:719
msgid "**References:**"
msgstr "**References:**"

#: ../../tutorials/algorithms/06_grover.ipynb:17
msgid "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"
msgstr "[1]: எல். கே. க்ரோவர், தரவுத்தள தேடலுக்கான வேகமான குவாண்டம் இயந்திர வழிமுறை. செயல்முறைகள் 28 வது வருடாந்திர சிம்போசியம் ஆஃப் தியரி ஆஃப் கம்ப்யூட்டிங் (STOC) 1996, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"

#: ../../tutorials/algorithms/06_grover.ipynb:19
msgid "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"
msgstr "[2]: ஏ. கில்லியம், எஸ். வோர்னர், சி. கோன்சியுலியா, கட்டுப்படுத்தப்பட்ட பல்லுறுப்புறுப்பு பைனரி உகப்பாக்கலுக்கான குரோவர் தகவமைப்பு தேடல். https://arxiv.org/abs/1912.04088"

#: ../../tutorials/algorithms/06_grover.ipynb:21
msgid "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"
msgstr "[3]: பிராஸார்ட், ஜி., ஹோயர், பி., மோஸ்கா, எம்., & டாப், ஏ. (2000). குவாண்டம் அலைவீச்சு பெருக்கம் மற்றும் மதிப்பீடு. http://arxiv.org/abs/quant-ph/0005055"

#: ../../tutorials/algorithms/06_grover.ipynb:33
msgid "Grover’s algorithm"
msgstr "க்ரோவரின் வழிமுறை"

#: ../../tutorials/algorithms/06_grover.ipynb:35
msgid "Grover’s algorithm uses the Grover operator :math:`\\mathcal{Q}` to amplify the amplitudes of the good states:"
msgstr "குரோவரின் வழிமுறை குரோவர் ஆபரேட்டர் :math:`\\mathcal{Q}` பயன்படுத்தி நல்ல நிலைகளின் பெருக்கங்களைப் பெருக்கும்:"

#: ../../tutorials/algorithms/06_grover.ipynb:37
msgid "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"
msgstr "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"

#: ../../tutorials/algorithms/06_grover.ipynb:42
msgid "Here, \\* :math:`\\mathcal{A}` is the initial search state for the algorithm, which is just Hadamards, :math:`H^{\\otimes n}` for the textbook Grover search, but can be more elaborate for Amplitude Amplification \\* :math:`\\mathcal{S_0}` is the reflection about the all 0 state"
msgstr "இங்கே, * A என்பது வழிமுறையின் ஆரம்ப தேடல் நிலை, இது வெறும் ஹடமார்ட்ஸ், H⊗n க்ரோவர் தேடலுக்கான பாடநூல், ஆனால் அலைவீச்சு பெருக்கத்திற்கு இன்னும் விரிவாக இருக்கலாம் * S0 என்பது அனைத்து 0 நிலைகளையும் பற்றிய பிரதிபலிப்பாகும்"

#: ../../tutorials/algorithms/06_grover.ipynb:44
msgid "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"
msgstr "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"

#: ../../tutorials/algorithms/06_grover.ipynb:49
msgid "\\* :math:`\\mathcal{S_f}` is the oracle that applies"
msgstr "\\* :math:`\\mathcal{S_f}` என்பது பொருந்தும் ஆரக்கிள்"

#: ../../tutorials/algorithms/06_grover.ipynb:51
msgid "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"
msgstr "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"

#: ../../tutorials/algorithms/06_grover.ipynb:56
msgid "where :math:`f(x)` is 1 if :math:`x` is a good state and otherwise 0."
msgstr ":math:`x` ஒரு நல்ல நிலை என்றால், :math:`f(x)` என்பது 1, இல்லையெனில் 0."

#: ../../tutorials/algorithms/06_grover.ipynb:58
msgid "In a nutshell, Grover’s algorithm applies different powers of :math:`\\mathcal{Q}` and after each execution checks whether a good solution has been found."
msgstr "சுருக்கமாக, க்ரோவரின் வழிமுறை :math:`\\mathcal{Q}` இன் வெவ்வேறு சக்திகளைப் பயன்படுத்துகிறது மற்றும் ஒவ்வொரு செயல்படுத்தல் முடிந்தபின்னும் ஒரு நல்ல தீர்வு காணப்பட்டதா என்பதை சரிபார்க்கிறது."

#: ../../tutorials/algorithms/06_grover.ipynb:61
msgid "Running Grover’s algorithm"
msgstr "க்ரோவரின் வழிமுறை இயங்குகிறது"

#: ../../tutorials/algorithms/06_grover.ipynb:63
msgid "To run Grover’s algorithm with the ``Grover`` class, firstly, we need to specify an oracle for the circuit of Grover’s algorithm. In the following example, we use ``QuantumCircuit`` as the oracle of Grover’s algorithm. However, there are several other class that we can use as the oracle of Grover’s algorithm. We talk about them later in this tutorial."
msgstr "க்ரோவரின் வழிமுறையை ``Grover`` வகுப்போடு இயக்க, முதலில், க்ரோவரின் வழிமுறையின் சுற்றுக்கு ஒரு ஆரக்கிளைக் குறிப்பிட வேண்டும். பின்வரும் எடுத்துக்காட்டில், க்ரோவரின் வழிமுறையின் ஆரக்கிளாக ``QuantumCircuit`` ஐப் பயன்படுத்துகிறோம். இருப்பினும், க்ரோவரின் வழிமுறையின் ஆரக்கிளாக நாம் பயன்படுத்தக்கூடிய பல வகுப்புகள் உள்ளன. இந்த டுடோரியலில் அவற்றைப் பற்றி பின்னர் பேசுகிறோம்."

#: ../../tutorials/algorithms/06_grover.ipynb:65
msgid "Note that the oracle for ``Grover`` must be a *phase-flip* oracle. That is, it multiplies the amplitudes of the of “good states” by a factor of :math:`-1`. We explain later how to convert a *bit-flip* oracle to a phase-flip oracle."
msgstr "``Grover`` க்கான ஆரக்கிள் ஒரு *phase-flip* ஆரக்கிளாக இருக்க வேண்டும் என்பதை நினைவில் கொள்க. அதாவது, இது “good states” பெருக்கங்களை ஒரு :math:`-1` காரணியால் பெருக்குகிறது. *phase-flip* ஆரக்கிளை ஒரு *bit-flip* ஆரக்கிளாக மாற்றுவது எப்படி என்பதை பின்னர் விளக்குகிறோம்."

#: ../../tutorials/algorithms/06_grover.ipynb:109
msgid "Then, we specify a backend and call the ``run`` method of ``Grover`` with a backend to execute the circuits. The returned result type is a ``GroverResult``."
msgstr "பின்னர், நாங்கள் ஒரு பின்தளத்தில் குறிப்பிடுகிறோம், ``Grover`` இன் ``run`` முறையை ஒரு பின்தளத்தில் சுற்றுகளை இயக்க அழைக்கிறோம். வெளியீட்டு வகை ``GroverResult``."

#: ../../tutorials/algorithms/06_grover.ipynb:111
msgid "If the search was successful, the ``oracle_evaluation`` attribute of the result will be ``True``. In this case, the most sampled measurement, ``top_measurement``, is one of the “good states”. Otherwise, ``oracle_evaluation`` will be False."
msgstr "தேடல் வெற்றிகரமாக இருந்தால், முடிவின் ``oracle_evaluation`` பண்புக்கூறு ``True``. இந்த வழக்கில், மிகவும் மாதிரியான அளவீட்டு, ``top_measurement``,“good states” ஒன்றாகும். இல்லையெனில், ``oracle_evaluation`` தவறானது."

#: ../../tutorials/algorithms/06_grover.ipynb:167
msgid "In the example, the result of ``top_measurement`` is ``11`` which is one of “good state”. Thus, we succeeded to find the answer by using ``Grover``."
msgstr "எடுத்துக்காட்டில், ``top_measurement`` இன் விளைவாக `` 11`` என்பது “good state” ஒன்றாகும். இதனால், ``Grover`` ஐப் பயன்படுத்தி பதிலைக் கண்டுபிடிக்க நாங்கள் வெற்றி பெற்றோம்."

#: ../../tutorials/algorithms/06_grover.ipynb:179
msgid "Using the different types of classes as the oracle of ``Grover``"
msgstr "``Grover`` இன் ஆரக்கிள் என பல்வேறு வகையான வகுப்புகளைப் பயன்படுத்துதல்"

#: ../../tutorials/algorithms/06_grover.ipynb:181
msgid "In the above example, we used ``QuantumCircuit`` as the oracle of ``Grover``. However, we can also use ``qiskit.quantum_info.Statevector`` as oracle. All the following examples are when :math:`|11\\rangle` is “good state”"
msgstr "மேலேயுள்ள எடுத்துக்காட்டில், ``Grover`` இன் ஆரக்கிளாக ``QuantumCircuit`` ஐப் பயன்படுத்தினோம். இருப்பினும் ``qiskit.quantum_info.Statevector`` ஐ ஆரக்கிளாகவும் பயன்படுத்தலாம். பின்வரும் எல்லா எடுத்துக்காட்டுகளும் \n"
":math:`|11\\rangle`` என்பது “good state”ல் இருக்கும்போது"

#: ../../tutorials/algorithms/06_grover.ipynb:236
msgid "Internally, the statevector is mapped to a quantum circuit:"
msgstr "உட்புறமாக, ஸ்டேட்வெக்டர் ஒரு குவாண்டம் சுற்றுக்கு மாற்றப்படுகிறது:"

#: ../../tutorials/algorithms/06_grover.ipynb:266
msgid "Qiskit allows for an easy construction of more complex oracles: \\* ``PhaseOracle``: for parsing logical expressions such as ``'~a | b'``. This is especially useful for solving 3-SAT problems and is shown in the accompanying `Grover Examples <07_grover_examples.ipynb>`__ tutorial."
msgstr "மிகவும் சிக்கலான ஆரக்கிள்களை எளிதாக உருவாக்க Qiskit \\ * ``PhaseOracle``: அனுமதிப்பதன் மூலம்: ``'~a | b'``. போன்ற தருக்க வெளிப்பாடுகளை பாகுபடுத்தப்பட்டது. 3-SAT சிக்கல்களைத் தீர்க்க இது மிகவும் பயனுள்ளதாக இருக்கும், மேலும் அதனுடன் `Grover Examples <07_grover_examples.ipynb>`__ டுடோரியலில் காட்டப்பட்டுள்ளது."

#: ../../tutorials/algorithms/06_grover.ipynb:268
msgid "Here we’ll use the ``PhaseOracle`` for the simple example of finding the state :math:`|11\\rangle`, which corresponds to ``'a & b'``."
msgstr "நிலையைக் கண்டுபிடிப்பதற்கான எளிய எடுத்துக்காட்டுக்கு இங்கே ``PhaseOracle`` ஐப் பயன்படுத்துவோம் :math:`|11\\rangle`, இது ``'a & b'`` உடன் ஒத்திருக்கிறது."

#: ../../tutorials/algorithms/06_grover.ipynb:307
msgid "You can observe, that this oracle is actually implemented with three qubits instead of two!"
msgstr "இந்த ஆரக்கிள் உண்மையில் இரண்டுக்கு பதிலாக மூன்று குயூபிட்களுடன் செயல்படுத்தப்படுகிறது என்பதை நீங்கள் அவதானிக்கலாம்!"

#: ../../tutorials/algorithms/06_grover.ipynb:309
msgid "That is because the ``PhaseOracle`` is not a phase-flip oracle (which flips the phase of the good state) but a bit-flip oracle. This means it flips the state of an auxiliary qubit if the other qubits satisfy the condition. For Grover’s algorithm, however, we require a phase-flip oracle. To convert the bit-flip oracle to a phase-flip oracle we sandwich the controlled-NOT by :math:`X` and :math:`H` gates, as you can see in the circuit above."
msgstr "ஏனென்றால், ``PhaseOracle`` என்பது ஒரு phase-flip ஆரக்கிள் அல்ல (இது நல்ல நிலை கட்டத்தை புரட்டுகிறது). இதன் பொருள் மற்ற குவிட்கள் நிபந்தனையை பூர்த்தி செய்தால் அது ஒரு துணை குயூபிட்டின் நிலையை புரட்டுகிறது. க்ரோவரின் வழிமுறைக்கு, எங்களுக்கு ஒரு phase-flip ஆரக்கிள் தேவைப்படுகிறது. bit-flip ஆரக்கிளை ஒரு phase-flip ஆரக்கிளாக மாற்ற, கட்டுப்படுத்தப்பட்ட- NOT: சாண்ட்விச் :math:`X` மற்றும் :math:`H` வாயில்கள், மேலே உள்ள சுற்றுகளில் நீங்கள் காணக்கூடியது."

#: ../../tutorials/algorithms/06_grover.ipynb:311
msgid "**Note:** This transformation from a bit-flip to a phase-flip oracle holds generally and you can use this to convert your oracle to the right representation."
msgstr "**Note:** ஒரு bit-flip லிருந்து ஒரு phase-flip மாற்றம் ஆரக்கிள் பொதுவாக வைத்திருக்கிறது, மேலும் உங்கள் ஆரக்கிளை சரியான பிரதிநிதித்துவத்திற்கு மாற்ற இதைப் பயன்படுத்தலாம்."

#: ../../tutorials/algorithms/06_grover.ipynb:323
msgid "Amplitude amplification"
msgstr "அலைவீச்சு பெருக்கம்"

#: ../../tutorials/algorithms/06_grover.ipynb:325
msgid "Grover’s algorithm uses Hadamard gates to create the uniform superposition of all the states at the beginning of the Grover operator :math:`\\mathcal{Q}`. If some information on the good states is available, it might be useful to not start in a uniform superposition but only initialize specific states. This, generalized, version of Grover’s algorithm is referred to *Amplitude Amplification*."
msgstr "க்ரோவர் ஆபரேட்டர் :math:`\\mathcal{Q}` இன் தொடக்கத்தில் அனைத்து நிலைகளின் சீரான சூப்பர் போசிஷனை உருவாக்க க்ரோவரின் வழிமுறை ஹடமார்ட் வாயில்களைப் பயன்படுத்துகிறது . நல்ல நிலைகள் குறித்த சில தகவல்கள் கிடைத்தால், ஒரே மாதிரியான சூப்பர் போசிஷனில் தொடங்காமல் இருப்பது பயனுள்ளதாக இருக்கும், ஆனால் குறிப்பிட்ட நிலைகளை மட்டுமே துவக்கலாம். இது, குரோவரின் வழிமுறையின் பொதுமைப்படுத்தப்பட்ட பதிப்பு *Amplitude Amplification* என குறிப்பிடப்படுகிறது."

#: ../../tutorials/algorithms/06_grover.ipynb:327
msgid "In Qiskit, the initial superposition state can easily be adjusted by setting the ``state_preparation`` argument."
msgstr "Qiskit, ``state_preparation`` வாதத்தை அமைப்பதன் மூலம் ஆரம்ப superposition state யை எளிதாக சரிசெய்ய முடியும்."

#: ../../tutorials/algorithms/06_grover.ipynb:330
msgid "State preparation"
msgstr "நிலை தயாரிப்பு"

#: ../../tutorials/algorithms/06_grover.ipynb:332
msgid "A ``state_preparation`` argument is used to specify a quantum circuit that prepares a quantum state for the start point of the amplitude amplification. By default, a circuit with $H^{:nbsphinx-math:`\\otimes `n} $ is used to prepare uniform superposition (so it will be Grover’s search). The diffusion circuit of the amplitude amplification reflects ``state_preparation`` automatically."
msgstr "வீச்சு பெருக்கத்தின் தொடக்கப் புள்ளிக்கு ஒரு குவாண்டம் நிலையைத் தயாரிக்கும் குவாண்டம் சுற்றுவட்டத்தைக் குறிப்பிட ``state_preparation`` வாதம் பயன்படுத்தப்படுகிறது. இயல்பாக,$H^{:nbsphinx-math:`\\otimes `n} $ உடன் ஒரு சுற்று ஒரே மாதிரியான சூப்பர் போசிஷனைத் தயாரிக்கப் பயன்படுகிறது (எனவே இது க்ரோவரின் தேடலாக இருக்கும்). வீச்சு பெருக்கத்தின் பரவல் சுற்று தானாகவே ``state_preparation`` பிரதிபலிக்கிறது."

#: ../../tutorials/algorithms/06_grover.ipynb:438
msgid "Full flexibility"
msgstr "முழு நெகிழ்வுத்தன்மை"

#: ../../tutorials/algorithms/06_grover.ipynb:440
msgid "For more advanced use, it is also possible to specify the entire Grover operator by setting the ``grover_operator`` argument. This might be useful if you know more efficient implementation for :math:`\\mathcal{Q}` than the default construction via zero reflection, oracle and state preparation."
msgstr "மேலும் மேம்பட்ட பயன்பாட்டிற்கு, ``grover_operator`` வாதத்தை அமைப்பதன் மூலம் முழு க்ரோவர் ஆபரேட்டரையும் குறிப்பிடலாம். பூஜ்ஜிய பிரதிபலிப்பு, ஆரக்கிள் மற்றும் மாநில தயாரிப்பு வழியாக இயல்புநிலை கட்டுமானத்தை விட :math:`\\mathcal{Q}` இதற்கான திறமையான செயல்படுத்தல் உங்களுக்குத் தெரிந்தால் இது பயனுள்ளதாக இருக்கும்."

#: ../../tutorials/algorithms/06_grover.ipynb:442
msgid "The ``qiskit.circuit.library.GroverOperator`` can be a good starting point and offers more options for an automated construction of the Grover operator. You can for instance \\* set the ``mcx_mode`` \\* ignore qubits in the zero reflection by setting ``reflection_qubits`` \\* explicitly exchange the :math:`\\mathcal{S_f}, \\mathcal{S_0}` and :math:`\\mathcal{A}` operations using the ``oracle``, ``zero_reflection`` and ``state_preparation`` arguments"
msgstr "``qiskit.circuit.library.GroverOperator`` ஒரு நல்ல தொடக்க புள்ளியாக இருக்கக்கூடும், மேலும் க்ரோவர் ஆபரேட்டரின் தானியங்கி கட்டுமானத்திற்கான கூடுதல் விருப்பங்களை வழங்குகிறது. உதாரணமாக \\ * ``reflection_qubits`` அமைப்பதன் மூலம் பூஜ்ஜிய பிரதிபலிப்பில் உள்ள புறக்கணிப்புகளை புறக்கணிக்க ``mcx_mode`` \\* பயன்படுத்தி ``oracle``, ``zero_reflection`` மற்றும் ``state_preparation`` வாதங்களைப் பயன்படுத்தி :math:`\\mathcal{S_f}, \\mathcal{S_0}` and :math:`\\mathcal{A}` வெளிப்படையாக பரிமாறிக்கொள்ளலாம்"

#: ../../tutorials/algorithms/06_grover.ipynb:453
msgid "For instance, imagine the good state is a three qubit state :math:`|111\\rangle` but we used 2 additional qubits as auxiliary qubits."
msgstr "உதாரணமாக, நல்ல நிலை மூன்று குயூபிட் நிலை என்று கற்பனை செய்து பாருங்கள் :math:`|111\\rangle` ஆனால் நாம் 2 கூடுதல் குயூபிட்களை துணை குயூபிட்களாகப் பயன்படுத்தினோம்."

#: ../../tutorials/algorithms/06_grover.ipynb:487
msgid "Then, per default, the Grover operator implements the zero reflection on all five qubits."
msgstr "பின்னர், இயல்புநிலையாக, க்ரோவர் ஆபரேட்டர் அனைத்து ஐந்து குயூபிட்ளிலும் பூஜ்ஜிய பிரதிபலிப்பை செயல்படுத்துகிறது."

#: ../../tutorials/algorithms/06_grover.ipynb:518
msgid "But we know that we only need to consider the first three:"
msgstr "ஆனால் முதல் மூன்றை மட்டுமே நாம் கருத்தில் கொள்ள வேண்டும் என்பதை நாம் அறிவோம்:"

#: ../../tutorials/algorithms/06_grover.ipynb:550
msgid "Dive into other arguments of ``Grover``"
msgstr "``Grover`` இன் பிற வாதங்களுக்கு முழுக்கு"

#: ../../tutorials/algorithms/06_grover.ipynb:552
msgid "``Grover`` has arguments other than ``oracle`` and ``state_preparation``. We will explain them in this section."
msgstr "``Grover`` க்கு ``oracle`` மற்றும் `` state_preparation`` தவிர வேறு வாதங்கள் உள்ளன. அவற்றை இந்த பகுதியில் விளக்குவோம்."

#: ../../tutorials/algorithms/06_grover.ipynb:555
msgid "Specifying ``good_state``"
msgstr "``good_state`` யை குறிப்பிடுகிறது"

#: ../../tutorials/algorithms/06_grover.ipynb:557
msgid "``good_state`` is used to check whether the measurement result is correct or not internally. It can be a list of binary strings, a list of integer, ``Statevector``, and Callable. If the input is a list of bitstrings, each bitstrings in the list represents a good state. If the input is a list of integer, each integer represent the index of the good state to be :math:`|1\\rangle`. If it is a ``Statevector``, it represents a superposition of all good states."
msgstr "அளவீட்டு முடிவு சரியானதா அல்லது உள்நாட்டில் இல்லையா என்பதைச் சரிபார்க்க ``good_state`` பயன்படுத்தப்படுகிறது. இது பைனரி சரங்களின் பட்டியல், முழு எண்களின் பட்டியல், ``Statevector``, மற்றும் அழைக்கக்கூடியது. உள்ளீடு பிட்ஸ்ட்ரிங்ஸின் பட்டியல் என்றால், பட்டியலில் உள்ள ஒவ்வொரு பிட்ஸ்ட்ரிங்ஸும் ஒரு நல்ல நிலையைக் குறிக்கும். உள்ளீடு முழு எண்ணின் பட்டியலாக இருந்தால், ஒவ்வொரு முழு எண்ணும் நல்ல நிலையின் குறியீட்டைக் குறிக்கும் :math:`|1\\rangle`. இது ஒரு ``Statevector`` என்றால், இது அனைத்து நல்ல மாநிலங்களின் சூப்பர் போசிஷனைக் குறிக்கிறது."

#: ../../tutorials/algorithms/06_grover.ipynb:711
msgid "The number of ``iterations``"
msgstr "``iterations`` எண்ணிக்கை"

#: ../../tutorials/algorithms/06_grover.ipynb:713
msgid "The number of repetition of applying the Grover operator is important to obtain the correct result with Grover’s algorithm. The number of iteration can be set by the ``iteration`` argument of ``Grover``. The following inputs are supported: \\* an integer to specify a single power of the Grover operator that’s applied \\* or a list of integers, in which all these different powers of the Grover operator are run consecutively and after each time we check if a correct solution has been found"
msgstr "க்ரோவரின் வழிமுறையுடன் சரியான முடிவைப் பெற க்ரோவர் ஆபரேட்டரைப் பயன்படுத்துவதற்கான எண்ணிக்கை மீண்டும் முக்கியமானது. மறு செய்கையின் எண்ணிக்கையை ``Grover`` இன் ``iteration`` வாதத்தால் அமைக்கலாம். பின்வரும் உள்ளீடுகள் ஆதரிக்கப்படுகின்றன: \\ * பயன்படுத்தப்படும் க்ரோவர் ஆபரேட்டரின் ஒற்றை சக்தியைக் குறிப்பிடுவதற்கான ஒரு முழு எண் \\ * அல்லது முழு எண்களின் பட்டியல், இதில் க்ரோவர் ஆபரேட்டரின் இந்த வெவ்வேறு சக்திகள் அனைத்தும் தொடர்ச்சியாக இயங்குகின்றன, ஒவ்வொரு முறையும் சரியான தீர்வு காணப்பட்டதா என்பதை நாம் சரிபார்க்கிறோம்"

#: ../../tutorials/algorithms/06_grover.ipynb:715
msgid "Additionally there is the ``sample_from_iterations`` argument. When it is ``True``, instead of the specific power in ``iterations``, a random integer between 0 and the value in ``iteration`` is used as the power Grover’s operator. This approach is useful when we don’t even know the number of solution."
msgstr "கூடுதலாக, ``sample_from_iterations`` வாதம் உள்ளது. இது ``True`` ஆக இருக்கும்போது, ``iterations`` இல் உள்ள குறிப்பிட்ட சக்திக்கு பதிலாக, 0 மற்றும் ``iterations`` இன் மதிப்பு ஆகியவற்றுக்கு இடையேயான ஒரு சீரற்ற முழு எண் பவர் க்ரோவரின் ஆபரேட்டராகப் பயன்படுத்தப்படுகிறது. தீர்வின் எண்ணிக்கை கூட நமக்குத் தெரியாதபோது கூட இந்த அணுகுமுறை பயனுள்ளதாக இருக்கும்."

#: ../../tutorials/algorithms/06_grover.ipynb:717
msgid "For more details of the algorithm using ``sample_from_iterations``, see [4]."
msgstr "``sample_from_iterations``, ஐப் பயன்படுத்தி வழிமுறையின் கூடுதல் விவரங்களுக்கு, [4] ஐப் பார்க்கவும்."

#: ../../tutorials/algorithms/06_grover.ipynb:721
msgid "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"
msgstr "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"

#: ../../tutorials/algorithms/06_grover.ipynb:774
msgid "When the number of solutions is known, we can also use a static method ``optimal_num_iterations`` to find the optimal number of iterations. Note that the output iterations is an approximate value. When the number of qubits is small, the output iterations may not be optimal."
msgstr "தீர்வுகளின் எண்ணிக்கை அறியப்படும்போது, மறு செய்கைகளின் உகந்த எண்ணிக்கையைக் கண்டறிய நிலையான முறையான ``optimal_num_iterations`` ஐப் பயன்படுத்தலாம். வெளியீட்டு மறு செய்கைகள் தோராயமான மதிப்பு என்பதை நினைவில் கொள்க. குயூபிட்டுகளின் எண்ணிக்கை சிறியதாக இருக்கும்போது, வெளியீட்டு மறு செய்கைகள் உகந்ததாக இருக்காது."

#: ../../tutorials/algorithms/06_grover.ipynb:817
msgid "Applying ``post_processing``"
msgstr "``post_processing`` பயன்பாடு"

#: ../../tutorials/algorithms/06_grover.ipynb:819
msgid "We can apply an optional post processing to the top measurement for ease of readability. It can be used e.g. to convert from the bit-representation of the measurement ``[1, 0, 1]`` to a DIMACS CNF format ``[1, -2, 3]``."
msgstr "வாசிப்பு எளிமைக்கு மேல் அளவீட்டுக்கு விருப்பமான இடுகை செயலாக்கத்தை நாங்கள் பயன்படுத்தலாம். இதைப் பயன்படுத்தலாம் எ.கா. அளவீட்டின் பிட்-பிரதிநிதித்துவத்திலிருந்து ``[1, 0, 1]`` DIMACS CNF வடிவத்திற்கு மாற்ற ``[1, -2, 3]``."

