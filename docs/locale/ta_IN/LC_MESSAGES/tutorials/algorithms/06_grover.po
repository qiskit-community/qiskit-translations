msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:25+0000\n"
"PO-Revision-Date: 2023-08-14 19:10\n"
"Last-Translator: \n"
"Language: ta\n"
"Language-Team: Tamil\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/algorithms/06_grover.po\n"
"X-Crowdin-File-ID: 9504\n"

#: ../../tutorials/algorithms/06_grover.ipynb:10
msgid "This page was generated from `tutorials/algorithms/06_grover.ipynb`__."
msgstr "இந்த பக்கம் `tutorials/algorithms/07_grover.ipynb`__ இலிருந்து உருவாக்கப்பட்டது."

#: ../../tutorials/algorithms/06_grover.ipynb:9
msgid "Grover's Algorithm and Amplitude Amplification"
msgstr "க்ரோவரின் அல்காரிதம் மற்றும் அலைவீச்சு பெருக்கம்"

#: ../../tutorials/algorithms/06_grover.ipynb:11
msgid "Grover's algorithm is one of the most famous quantum algorithms introduced by Lov Grover in 1996 [1]. It has initially been proposed for unstructured search problems, i.e. for finding a marked element in a unstructured database. However, Grover's algorithm is now a subroutine to several other algorithms, such as Grover Adaptive Search [2]. For the details of Grover's algorithm, please see `Grover's Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ in the Qiskit textbook."
msgstr "குரோவரின் அல்காரிதம் 1996 இல் லவ் க்ரோவரால் அறிமுகப்படுத்தப்பட்ட மிகவும் பிரபலமான குவாண்டம் அல்காரிதம்களில் ஒன்றாகும் [1]. இது ஆரம்பத்தில் கட்டமைக்கப்படாத தேடல் சிக்கல்களுக்கு முன்மொழியப்பட்டது, அதாவது கட்டமைக்கப்படாத தரவுத்தளத்தில் குறிக்கப்பட்ட உறுப்பைக் கண்டறிவதற்காக. இருப்பினும், க்ரோவரின் அல்காரிதம் இப்போது க்ரோவர் அடாப்டிவ் தேடல் [2] போன்ற பல அல்காரிதங்களுக்கு துணையாக உள்ளது. குரோவரின் அல்காரிதம் பற்றிய விவரங்களுக்கு, Qiskit பாடப்புத்தகத்தில் உள்ள `Grover's Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ ஐப் பார்க்கவும்."

#: ../../tutorials/algorithms/06_grover.ipynb:13
msgid "Qiskit implements Grover's algorithm in the ``Grover`` class. This class also includes the generalized version, Amplitude Amplification [3], and allows setting individual iterations and other meta-settings to Grover's algorithm."
msgstr "கிஸ்கிட் க்ரோவரின் அல்காரிதத்தை ``க்ரோவர்`` வகுப்பில் செயல்படுத்துகிறது. இந்த வகுப்பில் பொதுவான பதிப்பான அலைவீச்சு பெருக்கம் [3] அடங்கும், மேலும் தனிப்பட்ட மறு செய்கைகள் மற்றும் பிற மெட்டா-அமைப்புகளை க்ரோவரின் வழிமுறைக்கு அமைக்க அனுமதிக்கிறது."

#: ../../tutorials/algorithms/06_grover.ipynb:15
#: ../../tutorials/algorithms/06_grover.ipynb:764
msgid "**References:**"
msgstr "**References:**"

#: ../../tutorials/algorithms/06_grover.ipynb:17
msgid "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"
msgstr "[1]: எல்.கே. குரோவர், தரவுத்தள தேடலுக்கான வேகமான குவாண்டம் மெக்கானிக்கல் அல்காரிதம். ப்ரொசீடிங்ஸ் 28வது வருடாந்திர சிம்போசியம் ஆன் தி தியரி ஆஃப் கம்ப்யூட்டிங் (STOC) 1996, பக். 212-219. https://arxiv.org/abs/quant-ph/9605043"

#: ../../tutorials/algorithms/06_grover.ipynb:19
msgid "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"
msgstr "[2]: ஏ. கில்லியம், எஸ். வோர்னர், சி. கோன்சியுலியா, கட்டுப்படுத்தப்பட்ட பல்லுறுப்புறுப்பு பைனரி உகப்பாக்கலுக்கான குரோவர் தகவமைப்பு தேடல். https://arxiv.org/abs/1912.04088"

#: ../../tutorials/algorithms/06_grover.ipynb:21
msgid "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"
msgstr "[3]: பிராஸார்ட், ஜி., ஹோயர், பி., மோஸ்கா, எம்., & டாப், ஏ. (2000). குவாண்டம் அலைவீச்சு பெருக்கம் மற்றும் மதிப்பீடு. http://arxiv.org/abs/quant-ph/0005055"

#: ../../tutorials/algorithms/06_grover.ipynb:33
msgid "Grover's algorithm"
msgstr "குரோவரின் அல்காரிதம்"

#: ../../tutorials/algorithms/06_grover.ipynb:35
msgid "Grover's algorithm uses the Grover operator :math:`\\mathcal{Q}` to amplify the amplitudes of the good states:"
msgstr "குரோவரின் வழிமுறையானது குரோவர் ஆபரேட்டரைப் பயன்படுத்துகிறது :math:`\\mathcal{Q}` நல்ல நிலைகளின் வீச்சுகளைப் பெருக்க:"

#: ../../tutorials/algorithms/06_grover.ipynb:37
msgid "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"
msgstr "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"

#: ../../tutorials/algorithms/06_grover.ipynb:42
msgid "Here, \\* :math:`\\mathcal{A}` is the initial search state for the algorithm, which is just Hadamards, :math:`H^{\\otimes n}` for the textbook Grover search, but can be more elaborate for Amplitude Amplification \\* :math:`\\mathcal{S_0}` is the reflection about the all 0 state"
msgstr "இங்கே, * A என்பது வழிமுறையின் ஆரம்ப தேடல் நிலை, இது வெறும் ஹடமார்ட்ஸ், H⊗n க்ரோவர் தேடலுக்கான பாடநூல், ஆனால் அலைவீச்சு பெருக்கத்திற்கு இன்னும் விரிவாக இருக்கலாம் \\* :math:`\\mathcal{S_0}` என்பது அனைத்து 0 நிலைகளையும் பற்றிய பிரதிபலிப்பாகும்"

#: ../../tutorials/algorithms/06_grover.ipynb:44
msgid "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"
msgstr "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"

#: ../../tutorials/algorithms/06_grover.ipynb:49
msgid "\\* :math:`\\mathcal{S_f}` is the oracle that applies"
msgstr "\\* :math:`\\mathcal{S_f}` என்பது பொருந்தும் ஆரக்கிள்"

#: ../../tutorials/algorithms/06_grover.ipynb:51
msgid "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"
msgstr "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"

#: ../../tutorials/algorithms/06_grover.ipynb:56
msgid "where :math:`f(x)` is 1 if :math:`x` is a good state and otherwise 0."
msgstr ":math:`x` ஒரு நல்ல நிலை என்றால், :math:`f(x)` என்பது 1, இல்லையெனில் 0."

#: ../../tutorials/algorithms/06_grover.ipynb:58
msgid "In a nutshell, Grover's algorithm applies different powers of :math:`\\mathcal{Q}` and after each execution checks whether a good solution has been found."
msgstr "சுருக்கமாக, க்ரோவரின் அல்காரிதம் :math:`\\mathcal{Q}` இன் வெவ்வேறு சக்திகளைப் பயன்படுத்துகிறது மற்றும் ஒவ்வொரு செயல்பாட்டிற்குப் பிறகும் ஒரு நல்ல தீர்வு கண்டுபிடிக்கப்பட்டதா என்பதைச் சரிபார்க்கிறது."

#: ../../tutorials/algorithms/06_grover.ipynb:61
msgid "Running Grover's algorithm"
msgstr "க்ரோவரின் அல்காரிதம் இயங்குகிறது"

#: ../../tutorials/algorithms/06_grover.ipynb:63
msgid "To run Grover's algorithm with the ``Grover`` class, firstly, we need to specify an oracle for the circuit of Grover's algorithm. In the following example, we use ``QuantumCircuit`` as the oracle of Grover's algorithm. However, there are several other class that we can use as the oracle of Grover's algorithm. We talk about them later in this tutorial."
msgstr "க்ரோவரின் அல்காரிதத்தை ``க்ரோவர்`` கிளாஸ் மூலம் இயக்க, முதலில், க்ரோவரின் அல்காரிதத்தின் சுற்றுக்கான ஆரக்கிளைக் குறிப்பிட வேண்டும். பின்வரும் எடுத்துக்காட்டில், குரோவரின் அல்காரிதத்தின் ஆரக்கிளாக ``குவாண்டம் சர்க்யூட்`` ஐப் பயன்படுத்துகிறோம். இருப்பினும், குரோவரின் அல்காரிதத்தின் ஆரக்கிளாக நாம் பயன்படுத்தக்கூடிய பல வகுப்புகள் உள்ளன. இந்த டுடோரியலில் அவற்றைப் பற்றி பின்னர் பேசுவோம்."

#: ../../tutorials/algorithms/06_grover.ipynb:65
msgid "Note that the oracle for ``Grover`` must be a *phase-flip* oracle. That is, it multiplies the amplitudes of the of \"good states\" by a factor of :math:`-1`. We explain later how to convert a *bit-flip* oracle to a phase-flip oracle."
msgstr "``க்ரோவர்``க்கான ஆரக்கிள் கண்டிப்பாக *ஃபேஸ்-ஃபிளிப்* ஆரக்கிளாக இருக்க வேண்டும் என்பதை நினைவில் கொள்ளவும். அதாவது, இது \"நல்ல நிலைகளின்\" வீச்சுகளை :math:`-1` என்ற காரணியால் பெருக்குகிறது. *பிட்-ஃபிளிப்* ஆரக்கிளை எப்படி ஃபேஸ்-ஃபிளிப் ஆரக்கிளாக மாற்றுவது என்பதை பின்னர் விளக்குகிறோம்."

#: ../../tutorials/algorithms/06_grover.ipynb:111
msgid "Then, we specify a backend and call the ``run`` method of ``Grover`` with a backend to execute the circuits. The returned result type is a ``GroverResult``."
msgstr "பின்னர், நாங்கள் ஒரு பின்தளத்தில் குறிப்பிடுகிறோம், ``Grover`` இன் ``run`` முறையை ஒரு பின்தளத்தில் சுற்றுகளை இயக்க அழைக்கிறோம். வெளியீட்டு வகை ``GroverResult``."

#: ../../tutorials/algorithms/06_grover.ipynb:113
msgid "If the search was successful, the ``oracle_evaluation`` attribute of the result will be ``True``. In this case, the most sampled measurement, ``top_measurement``, is one of the \"good states\". Otherwise, ``oracle_evaluation`` will be False."
msgstr "தேடல் வெற்றிகரமாக இருந்தால், முடிவின் ``oracle_evaluation`` பண்பு ``True`` ஆக இருக்கும். இந்த வழக்கில், மிகவும் மாதிரி அளவீடு, ``மேல்_அளவீடு``, \"நல்ல நிலைகளில்\" ஒன்றாகும். இல்லையெனில், ``oracle_evaluation`` தவறானதாக இருக்கும்."

#: ../../tutorials/algorithms/06_grover.ipynb:176
msgid "In the example, the result of ``top_measurement`` is ``11`` which is one of \"good state\". Thus, we succeeded to find the answer by using ``Grover``."
msgstr "எடுத்துக்காட்டில், ``மேல் அளவீடு`` என்பதன் முடிவு ``11`` ஆகும், இது \"நல்ல நிலை\" ஆகும். எனவே, ``க்ரோவர்`` ஐப் பயன்படுத்தி விடையைக் கண்டறிவதில் வெற்றி பெற்றோம்."

#: ../../tutorials/algorithms/06_grover.ipynb:188
msgid "Using the different types of classes as the oracle of ``Grover``"
msgstr "``Grover`` இன் ஆரக்கிள் என பல்வேறு வகையான வகுப்புகளைப் பயன்படுத்துதல்"

#: ../../tutorials/algorithms/06_grover.ipynb:190
msgid "In the above example, we used ``QuantumCircuit`` as the oracle of ``Grover``. However, we can also use ``qiskit.quantum_info.Statevector`` as oracle. All the following examples are when :math:`|11\\rangle` is \"good state\""
msgstr "எடுத்துக்காட்டில், ``மேல் அளவீடு`` என்பதன் முடிவு ``11`` ஆகும், இது \"நல்ல நிலை\" ஆகும். எனவே, ``க்ரோவர்`` ஐப் பயன்படுத்தி விடையைக் கண்டறிவதில் வெற்றி பெற்றோம்"

#: ../../tutorials/algorithms/06_grover.ipynb:253
msgid "Internally, the statevector is mapped to a quantum circuit:"
msgstr "உட்புறமாக, ஸ்டேட்வெக்டர் ஒரு குவாண்டம் சுற்றுக்கு மாற்றப்படுகிறது:"

#: ../../tutorials/algorithms/06_grover.ipynb:283
msgid "Qiskit allows for an easy construction of more complex oracles: \\* ``PhaseOracle``: for parsing logical expressions such as ``'~a | b'``. This is especially useful for solving 3-SAT problems and is shown in the accompanying `Grover Examples <07_grover_examples.ipynb>`__ tutorial."
msgstr "மிகவும் சிக்கலான ஆரக்கிள்களை எளிதாக உருவாக்க Qiskit \\ * ``PhaseOracle``: அனுமதிப்பதன் மூலம்: ``'~a | b'``. போன்ற தருக்க வெளிப்பாடுகளை பாகுபடுத்தப்பட்டது. 3-SAT சிக்கல்களைத் தீர்க்க இது மிகவும் பயனுள்ளதாக இருக்கும், மேலும் அதனுடன் `Grover Examples <07_grover_examples.ipynb>`__ டுடோரியலில் காட்டப்பட்டுள்ளது."

#: ../../tutorials/algorithms/06_grover.ipynb:285
msgid "Here we'll use the ``PhaseOracle`` for the simple example of finding the state :math:`|11\\rangle`, which corresponds to ``'a & b'``."
msgstr "இங்கே நாம் ```A & b''``க்கு ஒத்திருக்கும் மாநிலம் :math:`|11\\rangle` என்பதைக் கண்டறிவதற்கான எளிய உதாரணத்திற்கு ``PhaseOracle`` ஐப் பயன்படுத்துவோம்."

#: ../../tutorials/algorithms/06_grover.ipynb:324
msgid "Which we observe that this oracle implements a phase flip when the state is :math:`|11\\rangle`"
msgstr "மாநிலம் :math:`|11\\rangle` ஆக இருக்கும்போது இந்த ஆரக்கிள் ஒரு ஃபேஸ் ஃபிளிப்பை செயல்படுத்துகிறது என்பதை நாம் கவனிக்கிறோம்"

#: ../../tutorials/algorithms/06_grover.ipynb:326
msgid "As mentioned above, Grover's algorithm requires a *phase-flip* oracle. A bit-flip oracle flips the state of an auxiliary qubit if the other qubits satisfy the condition. To use these types of oracles with Grover's we need to convert the bit-flip oracle to a phase-flip oracle by sandwiching the auxiliary qubit of the bit-flip oracle by :math:`X` and :math:`H` gates."
msgstr "மேலே குறிப்பிட்டுள்ளபடி, க்ரோவரின் வழிமுறைக்கு *ஃபேஸ்-ஃபிளிப்* ஆரக்கிள் தேவைப்படுகிறது. ஒரு பிட்-ஃபிளிப் ஆரக்கிள், மற்ற குவிட்கள் நிபந்தனையை பூர்த்தி செய்தால், துணை குவிட்டின் நிலையை புரட்டுகிறது. க்ரோவருடன் இந்த வகையான ஆரக்கிள்களைப் பயன்படுத்த, பிட்-ஃபிளிப் ஆரக்கிளின் துணை குவிட்டை :math:`X` மற்றும் :math:`H` வாயில்கள் மூலம் சாண்ட்விச் செய்வதன் மூலம் பிட்-ஃபிளிப் ஆரக்கிளை ஃபேஸ்-ஃபிளிப் ஆரக்கிளாக மாற்ற வேண்டும்."

#: ../../tutorials/algorithms/06_grover.ipynb:328
msgid "**Note:** This transformation from a bit-flip to a phase-flip oracle holds generally and you can use this to convert your oracle to the right representation."
msgstr "**Note:** ஒரு bit-flip லிருந்து ஒரு phase-flip மாற்றம் ஆரக்கிள் பொதுவாக வைத்திருக்கிறது, மேலும் உங்கள் ஆரக்கிளை சரியான பிரதிநிதித்துவத்திற்கு மாற்ற இதைப் பயன்படுத்தலாம்."

#: ../../tutorials/algorithms/06_grover.ipynb:340
msgid "Amplitude amplification"
msgstr "அலைவீச்சு பெருக்கம்"

#: ../../tutorials/algorithms/06_grover.ipynb:342
msgid "Grover's algorithm uses Hadamard gates to create the uniform superposition of all the states at the beginning of the Grover operator :math:`\\mathcal{Q}`. If some information on the good states is available, it might be useful to not start in a uniform superposition but only initialize specific states. This, generalized, version of Grover's algorithm is referred to *Amplitude Amplification*."
msgstr "க்ரோவர் ஆபரேட்டர் :math:`\\mathcal{Q}` தொடக்கத்தில் அனைத்து மாநிலங்களின் சீரான சூப்பர்போசிஷனை உருவாக்க க்ரோவரின் வழிமுறை ஹடமார்ட் கேட்களைப் பயன்படுத்துகிறது. நல்ல நிலைகள் குறித்த சில தகவல்கள் கிடைத்தால், ஒரே மாதிரியான சூப்பர்போசிஷனில் தொடங்காமல் குறிப்பிட்ட நிலைகளை மட்டும் துவக்குவது பயனுள்ளதாக இருக்கும். இது, பொதுமைப்படுத்தப்பட்ட, குரோவரின் வழிமுறையின் பதிப்பு *அலைவீச்சு பெருக்கம்* என குறிப்பிடப்படுகிறது."

#: ../../tutorials/algorithms/06_grover.ipynb:344
msgid "In Qiskit, the initial superposition state can easily be adjusted by setting the ``state_preparation`` argument."
msgstr "Qiskit, ``state_preparation`` வாதத்தை அமைப்பதன் மூலம் ஆரம்ப superposition state யை எளிதாக சரிசெய்ய முடியும்."

#: ../../tutorials/algorithms/06_grover.ipynb:347
msgid "State preparation"
msgstr "நிலை தயாரிப்பு"

#: ../../tutorials/algorithms/06_grover.ipynb:349
msgid "A ``state_preparation`` argument is used to specify a quantum circuit that prepares a quantum state for the start point of the amplitude amplification. By default, a circuit with :math:`H^{\\otimes n}` is used to prepare uniform superposition (so it will be Grover's search). The diffusion circuit of the amplitude amplification reflects ``state_preparation`` automatically."
msgstr "வீச்சு பெருக்கத்தின் தொடக்கப் புள்ளிக்கு குவாண்டம் நிலையைத் தயாரிக்கும் குவாண்டம் சர்க்யூட்டைக் குறிப்பிட ``நிலை_தயாரிப்பு`` வாதம் பயன்படுத்தப்படுகிறது. இயல்பாக, சீரான சூப்பர்போசிஷனைத் தயாரிக்க :math:`H^{\\otimes n}` உடன் ஒரு சுற்று பயன்படுத்தப்படுகிறது (எனவே இது க்ரோவரின் தேடலாக இருக்கும்). வீச்சு பெருக்கத்தின் பரவல் சுற்று தானாகவே ``நிலை_தயாரிப்பு`` பிரதிபலிக்கிறது."

#: ../../tutorials/algorithms/06_grover.ipynb:464
msgid "Full flexibility"
msgstr "முழு நெகிழ்வுத்தன்மை"

#: ../../tutorials/algorithms/06_grover.ipynb:466
msgid "For more advanced use, it is also possible to specify the entire Grover operator by setting the ``grover_operator`` argument. This might be useful if you know more efficient implementation for :math:`\\mathcal{Q}` than the default construction via zero reflection, oracle and state preparation."
msgstr "மேலும் மேம்பட்ட பயன்பாட்டிற்கு, ``grover_operator`` வாதத்தை அமைப்பதன் மூலம் முழு க்ரோவர் ஆபரேட்டரையும் குறிப்பிடலாம். பூஜ்ஜிய பிரதிபலிப்பு, ஆரக்கிள் மற்றும் மாநில தயாரிப்பு வழியாக இயல்புநிலை கட்டுமானத்தை விட :math:`\\mathcal{Q}` இதற்கான திறமையான செயல்படுத்தல் உங்களுக்குத் தெரிந்தால் இது பயனுள்ளதாக இருக்கும்."

#: ../../tutorials/algorithms/06_grover.ipynb:468
msgid "The ``qiskit.circuit.library.GroverOperator`` can be a good starting point and offers more options for an automated construction of the Grover operator. You can for instance \\* set the ``mcx_mode`` \\* ignore qubits in the zero reflection by setting ``reflection_qubits`` \\* explicitly exchange the :math:`\\mathcal{S_f}, \\mathcal{S_0}` and :math:`\\mathcal{A}` operations using the ``oracle``, ``zero_reflection`` and ``state_preparation`` arguments"
msgstr "``qiskit.circuit.library.GroverOperator`` ஒரு நல்ல தொடக்க புள்ளியாக இருக்கக்கூடும், மேலும் க்ரோவர் ஆபரேட்டரின் தானியங்கி கட்டுமானத்திற்கான கூடுதல் விருப்பங்களை வழங்குகிறது. உதாரணமாக \\ * ``reflection_qubits`` அமைப்பதன் மூலம் பூஜ்ஜிய பிரதிபலிப்பில் உள்ள புறக்கணிப்புகளை புறக்கணிக்க ``mcx_mode`` \\* பயன்படுத்தி ``oracle``, ``zero_reflection`` மற்றும் ``state_preparation`` வாதங்களைப் பயன்படுத்தி :math:`\\mathcal{S_f}, \\mathcal{S_0}` and :math:`\\mathcal{A}` வெளிப்படையாக பரிமாறிக்கொள்ளலாம்"

#: ../../tutorials/algorithms/06_grover.ipynb:479
msgid "For instance, imagine the good state is a three qubit state :math:`|111\\rangle` but we used 2 additional qubits as auxiliary qubits."
msgstr "உதாரணமாக, நல்ல நிலை மூன்று க்யூபிட் நிலை என்று கற்பனை செய்து பாருங்கள் :math:`|111\\rangle` ஆனால் நாம் 2 கூடுதல் க்யூபிட்களை துணை க்யூபிட்ட்களாகப் பயன்படுத்தினோம்."

#: ../../tutorials/algorithms/06_grover.ipynb:511
msgid "Then, per default, the Grover operator implements the zero reflection on all five qubits."
msgstr "பின்னர், இயல்புநிலையாக, க்ரோவர் ஆபரேட்டர் அனைத்து ஐந்து க்யூபிட்ளிலும் பூஜ்ஜிய பிரதிபலிப்பை செயல்படுத்துகிறது."

#: ../../tutorials/algorithms/06_grover.ipynb:543
msgid "But we know that we only need to consider the first three:"
msgstr "ஆனால் முதல் மூன்றை மட்டுமே நாம் கருத்தில் கொள்ள வேண்டும் என்பதை நாம் அறிவோம்:"

#: ../../tutorials/algorithms/06_grover.ipynb:575
msgid "Dive into other arguments of ``Grover``"
msgstr "``Grover`` இன் பிற வாதங்களுக்கு முழுக்கு"

#: ../../tutorials/algorithms/06_grover.ipynb:577
msgid "``Grover`` has arguments other than ``oracle`` and ``state_preparation``. We will explain them in this section."
msgstr "``Grover`` க்கு ``oracle`` மற்றும் ``state_preparation``.தவிர வேறு வாதங்கள் உள்ளன. அவற்றை இந்த. பகுதியில் விளக்குவோம்"

#: ../../tutorials/algorithms/06_grover.ipynb:580
msgid "Specifying ``good_state``"
msgstr "``good_state`` யை குறிப்பிடுகிறது"

#: ../../tutorials/algorithms/06_grover.ipynb:582
msgid "``good_state`` is used to check whether the measurement result is correct or not internally. It can be a list of binary strings, a list of integer, ``Statevector``, and Callable. If the input is a list of bitstrings, each bitstrings in the list represents a good state. If the input is a list of integer, each integer represent the index of the good state to be :math:`|1\\rangle`. If it is a ``Statevector``, it represents a superposition of all good states."
msgstr "அளவீட்டு முடிவு சரியானதா அல்லது உள்நாட்டில் இல்லையா என்பதைச் சரிபார்க்க ``good_state`` பயன்படுத்தப்படுகிறது. இது பைனரி சரங்களின் பட்டியல், முழு எண்களின் பட்டியல், ``Statevector``, மற்றும் அழைக்கக்கூடியது. உள்ளீடு பிட்ஸ்ட்ரிங்ஸின் பட்டியல் என்றால், பட்டியலில் உள்ள ஒவ்வொரு பிட்ஸ்ட்ரிங்ஸும் ஒரு நல்ல நிலையைக் குறிக்கும். உள்ளீடு முழு எண்ணின் பட்டியலாக இருந்தால், ஒவ்வொரு முழு எண்ணும் நல்ல நிலையின் குறியீட்டைக் குறிக்கும் :math:`|1\\rangle`. இது ஒரு ``Statevector`` என்றால், இது அனைத்து நல்ல மாநிலங்களின் சூப்பர் போசிஷனைக் குறிக்கிறது."

#: ../../tutorials/algorithms/06_grover.ipynb:756
msgid "The number of ``iterations``"
msgstr "``iterations`` எண்ணிக்கை"

#: ../../tutorials/algorithms/06_grover.ipynb:758
msgid "The number of repetition of applying the Grover operator is important to obtain the correct result with Grover's algorithm. The number of iteration can be set by the ``iteration`` argument of ``Grover``. The following inputs are supported: \\* an integer to specify a single power of the Grover operator that's applied \\* or a list of integers, in which all these different powers of the Grover operator are run consecutively and after each time we check if a correct solution has been found"
msgstr "க்ரோவரின் அல்காரிதம் மூலம் சரியான முடிவைப் பெற, க்ரோவர் ஆபரேட்டரைப் பயன்படுத்துவதன் எண்ணிக்கை மிகவும் முக்கியமானது. மறு செய்கையின் எண்ணிக்கையை ``குரோவர்``ன் ``மறு செய்கை`` வாதத்தால் அமைக்கலாம். பின்வரும் உள்ளீடுகள் ஆதரிக்கப்படுகின்றன: \\* பயன்படுத்தப்படும் க்ரோவர் ஆபரேட்டரின் ஒற்றை சக்தியைக் குறிப்பிடுவதற்கான ஒரு முழு எண் \\* அல்லது முழு எண்களின் பட்டியல், இதில் க்ரோவர் ஆபரேட்டரின் இந்த வெவ்வேறு சக்திகள் அனைத்தும் தொடர்ச்சியாக இயக்கப்படுகின்றன, ஒவ்வொரு முறையும் நாங்கள் சரிபார்க்கிறோம் சரியான தீர்வு காணப்பட்டது"

#: ../../tutorials/algorithms/06_grover.ipynb:760
msgid "Additionally there is the ``sample_from_iterations`` argument. When it is ``True``, instead of the specific power in ``iterations``, a random integer between 0 and the value in ``iteration`` is used as the power Grover's operator. This approach is useful when we don't even know the number of solution."
msgstr "கூடுதலாக ``samp_from_iterations`` வாதமும் உள்ளது. ``உண்மை`` ஆக இருக்கும் போது, ``மறுபடி``` இல் உள்ள குறிப்பிட்ட சக்திக்குப் பதிலாக, 0 மற்றும் ``மறு செய்கை`` இல் உள்ள மதிப்புக்கு இடையே உள்ள சீரற்ற முழு எண் பவர் க்ரோவரின் ஆபரேட்டராகப் பயன்படுத்தப்படுகிறது. தீர்வின் எண்ணிக்கை கூட நமக்குத் தெரியாதபோது இந்த அணுகுமுறை பயனுள்ளதாக இருக்கும்."

#: ../../tutorials/algorithms/06_grover.ipynb:762
msgid "For more details of the algorithm using ``sample_from_iterations``, see [4]."
msgstr "``sample_from_iterations``, ஐப் பயன்படுத்தி வழிமுறையின் கூடுதல் விவரங்களுக்கு, [4] ஐப் பார்க்கவும்."

#: ../../tutorials/algorithms/06_grover.ipynb:766
msgid "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"
msgstr "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"

#: ../../tutorials/algorithms/06_grover.ipynb:819
msgid "When the number of solutions is known, we can also use a static method ``optimal_num_iterations`` to find the optimal number of iterations. Note that the output iterations is an approximate value. When the number of qubits is small, the output iterations may not be optimal."
msgstr "தீர்வுகளின் எண்ணிக்கை அறியப்படும்போது, மறு செய்கைகளின் உகந்த எண்ணிக்கையைக் கண்டறிய நிலையான முறையான ``optimal_num_iterations`` ஐப் பயன்படுத்தலாம். வெளியீட்டு மறு செய்கைகள் தோராயமான மதிப்பு என்பதை நினைவில் கொள்க. க்யூபிட்டுகளின் எண்ணிக்கை சிறியதாக இருக்கும்போது, வெளியீட்டு மறு செய்கைகள் உகந்ததாக இருக்காது."

#: ../../tutorials/algorithms/06_grover.ipynb:867
msgid "Applying ``post_processing``"
msgstr "``post_processing`` பயன்பாடு"

#: ../../tutorials/algorithms/06_grover.ipynb:869
msgid "We can apply an optional post processing to the top measurement for ease of readability. It can be used e.g. to convert from the bit-representation of the measurement ``[1, 0, 1]`` to a DIMACS CNF format ``[1, -2, 3]``."
msgstr "படிக்கக்கூடிய வசதிக்காக, மேல் அளவீட்டிற்கு விருப்பமான இடுகை செயலாக்கத்தைப் பயன்படுத்தலாம். இதைப் பயன்படுத்தலாம் எ.கா. ``[1, 0, 1]`` என்ற அளவீட்டின் பிட்-பிரதிநிதித்துவத்திலிருந்து DIMACS CNF வடிவமாக ``[1, -2, 3]``க்கு மாற்ற."

