msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-02 21:04+0000\n"
"PO-Revision-Date: 2023-03-02 22:53\n"
"Last-Translator: \n"
"Language: ta\n"
"Language-Team: Tamil\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/04_vqd.po\n"
"X-Crowdin-File-ID: 9933\n"

#: ../../tutorials/algorithms/04_vqd.ipynb:10
msgid "This page was generated from `tutorials/algorithms/04_vqd.ipynb`__."
msgstr "இந்தப் பக்கம் `tutorials/algorithms/09_IQPE.ipynb`__\n"
"இலிருந்து உருவாக்கப்பட்டது."

#: ../../tutorials/algorithms/04_vqd.ipynb:9
msgid "Variational Quantum Deflation (VQD) Algorithm"
msgstr "மாறுபாடு குவாண்டம் பணவாட்டம் (VQD) அல்காரிதம்"

#: ../../tutorials/algorithms/04_vqd.ipynb:11
msgid "This notebook demostrates how to use Qiskit’s implementation of the `Variational Quantum Deflation (VQD) <https://qiskit.org/documentation/stubs/qiskit.algorithms.eigensolvers.VQD.html>`__ algorithm for computing higher energy states of a Hamiltonian, as introduced in this `reference paper <https://arxiv.org/abs/1805.08138>`__."
msgstr "இந்த நோட்புக், Qiskit இன் `Variational Quantum Deflation (VQD) <https://qiskit.org/documentation/stubs/qiskit.algorithms.eigensolvers.VQD.html>`__ உயர் ஆற்றல் நிலைகளைக் கணக்கிடுவதற்கான வழிமுறையை எவ்வாறு பயன்படுத்துவது என்பதை விளக்குகிறது ஹாமில்டோனியன், இந்த `குறிப்புத் தாளில் <https://arxiv.org/abs/1805.08138>`__ அறிமுகப்படுத்தப்பட்டது."

#: ../../tutorials/algorithms/04_vqd.ipynb:23
msgid "Introduction"
msgstr "அறிமுகம்"

#: ../../tutorials/algorithms/04_vqd.ipynb:25
msgid "VQD is a quantum algorithm that uses a variational technique to find the *k* eigenvalues of the Hamiltonian *H* of a given system."
msgstr "VQD என்பது ஒரு குவாண்டம் அல்காரிதம் ஆகும், இது கொடுக்கப்பட்ட அமைப்பின் ஹாமில்டோனியன் *H* இன் *k* ஐஜென் மதிப்புகளைக் கண்டறிய மாறுபாடு நுட்பத்தைப் பயன்படுத்துகிறது."

#: ../../tutorials/algorithms/04_vqd.ipynb:27
msgid "The algorithm computes excited state energies of generalized hamiltonians by optimizing over a modified cost function. Each successive eigenvalue is calculated iteratively by introducing an overlap term with all the previously computed eigenstates that must be minimized. This ensures that higher energy eigenstates are found."
msgstr "மாற்றியமைக்கப்பட்ட செலவுச் செயல்பாட்டை மேம்படுத்துவதன் மூலம் பொதுமைப்படுத்தப்பட்ட ஹாமில்டோனியர்களின் உற்சாகமான நிலை ஆற்றல்களை அல்காரிதம் கணக்கிடுகிறது. ஒவ்வொரு தொடர்ச்சியான ஐகேன் மதிப்பும், முன்னர் கணக்கிடப்பட்ட அனைத்து ஐகேன்ஸ்டேட்டுகளுடனும் ஒரு மேலெழுதல் சொல்லை அறிமுகப்படுத்துவதன் மூலம் மீண்டும் மீண்டும் கணக்கிடப்படுகிறது, அவை குறைக்கப்பட வேண்டும். இது அதிக ஆற்றல் ஐகேன்ஸ்டேட்டுகள் இருப்பதை உறுதி செய்கிறது."

#: ../../tutorials/algorithms/04_vqd.ipynb:39
msgid "Complete working example for VQD"
msgstr "VQDக்கான முழுமையான வேலை உதாரணம்"

#: ../../tutorials/algorithms/04_vqd.ipynb:50
msgid "The first step of the VQD workflow is to create a qubit operator, ansatz and optimizer. For this example, you can use the H2 molecule, which should already look familiar if you have completed the previous VQE tutorials:"
msgstr "VQD பணிப்பாய்வுக்கான முதல் படி ஒரு குவிட் ஆபரேட்டர், அன்சாட்ஸ் மற்றும் ஆப்டிமைசரை உருவாக்குவதாகும். இந்த எடுத்துக்காட்டில், நீங்கள் H2 மூலக்கூறைப் பயன்படுத்தலாம், முந்தைய VQE டுடோரியல்களை நீங்கள் முடித்திருந்தால் இது ஏற்கனவே நன்கு தெரிந்திருக்கும்:"

#: ../../tutorials/algorithms/04_vqd.ipynb:81
msgid "You can set up, for example, a ``TwoLocal`` ansatz with three qubits, and choose ``SLSQP`` as the optimization method."
msgstr "எடுத்துக்காட்டாக, மூன்று குவிட்களுடன் ``TwoLocal`` ansatz ஐ அமைக்கலாம், மேலும் தேர்வுமுறை முறையாக ``SLSQP`` என்பதைத் தேர்வுசெய்யலாம்."

#: ../../tutorials/algorithms/04_vqd.ipynb:117
msgid "The next step of the workflow is to define the required primitives for running ``VQD``. This algorithm requires two different primitive instances: one ``Estimator`` for computing the expectation values for the “VQE part” of the algorithm, and one ``Sampler``. The sampler will be passed along to the ``StateFidelity`` subroutine that will be used to compute the cost for higher energy states. There are several methods that you can use to compute state fidelities, but to keep things simple, you can use the ``ComputeUncompute`` method already available in ``qiskit.algorithm.state_fidelities``."
msgstr "பணிப்பாய்வுகளின் அடுத்த கட்டம் ``VQD`` இயங்குவதற்குத் தேவையான ப்ரிமிட்டிவ்களை வரையறுப்பதாகும். இந்த அல்காரிதத்திற்கு இரண்டு வெவ்வேறு பழமையான நிகழ்வுகள் தேவைப்படுகின்றன: அல்காரிதத்தின் \"VQE பகுதி\"க்கான எதிர்பார்ப்பு மதிப்புகளைக் கணக்கிடுவதற்கு ஒன்று ``Estimator`` மற்றும் ஒன்று ``Sampler``. அதிக ஆற்றல் நிலைகளுக்கான செலவைக் கணக்கிடப் பயன்படும் ``StateFidelity`` துணைக்கு மாதிரியானது அனுப்பப்படும். மாநில நம்பகத்தன்மையைக் கணக்கிடுவதற்கு நீங்கள் பல முறைகளைப் பயன்படுத்தலாம், ஆனால் விஷயங்களை எளிமையாக வைத்திருக்க, ``qiskit.algorithm.state_fidelities`` இல் ஏற்கனவே கிடைக்கும் ``ComputeUncompute`` முறையைப் பயன்படுத்தலாம்."

#: ../../tutorials/algorithms/04_vqd.ipynb:144
msgid "In order to set up the VQD algorithm, it is important to define two additional inputs: the number of energy states to compute (``k``) and the ``betas`` defined in the original VQD paper. In this example, the number of states (``k``) will be set to three, which indicates that two excited states will be computed in addition to the ground state."
msgstr "VQD அல்காரிதத்தை அமைப்பதற்கு, இரண்டு கூடுதல் உள்ளீடுகளை வரையறுப்பது முக்கியம்: கணக்கிடுவதற்கான ஆற்றல் நிலைகளின் எண்ணிக்கை (``k``) மற்றும் அசல் VQD தாளில் வரையறுக்கப்பட்ட ``betas``. இந்த எடுத்துக்காட்டில், நிலைகளின் எண்ணிக்கை (``k``) மூன்றாக அமைக்கப்படும், இது இரண்டு உற்சாகமான நிலைகள் தரை நிலைக்கு கூடுதலாக கணக்கிடப்படும் என்பதைக் குறிக்கிறது."

#: ../../tutorials/algorithms/04_vqd.ipynb:146
msgid "The ``betas`` balance the contribution of each overlap term to the cost function, and they are an optional argument in the ``VQD`` construction. If not set by the user, they can be autoevaluated for input operators of type ``SparsePauliOp``. Please note that if you want to set your own ``betas``, you should provide a list of values of length ``k``."
msgstr "``betas`` செலவுச் செயல்பாட்டிற்கான ஒவ்வொரு ஒன்றுடன் ஒன்று காலத்தின் பங்களிப்பைச் சமன் செய்கிறது, மேலும் அவை ``VQD`` கட்டுமானத்தில் விருப்ப வாதமாகும். பயனரால் அமைக்கப்படவில்லை எனில், ``SparsePauliOp`` வகையின் உள்ளீட்டு ஆபரேட்டர்களுக்கு அவை தானாக மதிப்பீடு செய்யப்படலாம். உங்கள் சொந்த ``betas`` அமைக்க விரும்பினால், ``k`` நீள மதிப்புகளின் பட்டியலை வழங்க வேண்டும்."

#: ../../tutorials/algorithms/04_vqd.ipynb:168
msgid "You are almost ready to run the VQD algorithm, but let’s define a callback first to store intermediate values:"
msgstr "VQD அல்காரிதத்தை இயக்க நீங்கள் கிட்டத்தட்ட தயாராகிவிட்டீர்கள், ஆனால் இடைநிலை மதிப்புகளைச் சேமிப்பதற்காக முதலில் திரும்ப அழைப்பை வரையறுப்போம்:"

#: ../../tutorials/algorithms/04_vqd.ipynb:196
msgid "You can finally instantiate ``VQD`` and compute the eigenvalues for the chosen operator."
msgstr "VQD அல்காரிதத்தை இயக்க நீங்கள் கிட்டத்தட்ட தயாராகிவிட்டீர்கள், ஆனால் இடைநிலை மதிப்புகளைச் சேமிப்பதற்காக முதலில் திரும்ப அழைப்பை வரையறுப்போம்."

#: ../../tutorials/algorithms/04_vqd.ipynb:221
msgid "You can see the three state energies as part of the ``VQD`` result:"
msgstr "``VQD`` முடிவின் ஒரு பகுதியாக நீங்கள் மூன்று நிலை ஆற்றல்களைக் காணலாம்:"

#: ../../tutorials/algorithms/04_vqd.ipynb:266
msgid "And we can use the values stored by the callback to plot the energy convergence for each state:"
msgstr "மேலும் ஒவ்வொரு மாநிலத்திற்கும் ஆற்றல் ஒருங்கிணைப்பைத் திட்டமிட, கால்பேக் மூலம் சேமிக்கப்பட்ட மதிப்புகளைப் பயன்படுத்தலாம்:"

#: ../../tutorials/algorithms/04_vqd.ipynb:312
msgid "This molecule can be solved exactly using the ``NumPyEigensolver`` class, which will give a reference value that you can compare with the ``VQD`` result:"
msgstr "இந்த மூலக்கூறை ``NumPyEigensolver`` வகுப்பைப் பயன்படுத்தி சரியாகத் தீர்க்க முடியும், இது நீங்கள் ``VQD`` முடிவுடன் ஒப்பிடக்கூடிய ஒரு குறிப்பு மதிப்பைக் கொடுக்கும்:"

#: ../../tutorials/algorithms/04_vqd.ipynb:338
msgid "Let’s see a comparison of the exact result with the previously computed ``VQD`` eigenvalues:"
msgstr "முன்னர் கணக்கிடப்பட்ட ``VQD`` ஐஜென் மதிப்புகளுடன் சரியான முடிவை ஒப்பிடுவதைப் பார்ப்போம்:"

#: ../../tutorials/algorithms/04_vqd.ipynb:387
msgid "As you can see, the result from VQD matches the values from the exact solution, and extends VQE to also compute excited states."
msgstr "நீங்கள் பார்க்க முடியும் என, VQD இன் முடிவு சரியான தீர்விலிருந்து மதிப்புகளுடன் பொருந்துகிறது, மேலும் உற்சாகமான நிலைகளைக் கணக்கிட VQE ஐ நீட்டிக்கிறது."

