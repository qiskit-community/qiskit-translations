msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-02 00:19+0000\n"
"PO-Revision-Date: 2021-04-13 15:27\n"
"Last-Translator: \n"
"Language-Team: Tamil\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/finance/07_asian_barrier_spread_pricing.po\n"
"X-Crowdin-File-ID: 9354\n"
"Language: ta_IN\n"

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:10
msgid "This page was generated from `tutorials/finance/07_asian_barrier_spread_pricing.ipynb`__."
msgstr "இந்த பக்கம் `tutorials/finance/07_asian_barrier_spread_pricing.ipynb`__ இலிருந்து உருவாக்கப்பட்டது."

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/finance/07_asian_barrier_spread_pricing.ipynb>`_."
msgstr "`IBM குவாண்டம் ஆய்வகத்தில் <https://quantum-computing.ibm.com/jupyter/tutorial/finance/07_asian_barrier_spread_pricing.ipynb>` _."

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:9
msgid "*Pricing Asian Barrier Spreads*"
msgstr "* ஆசிய தடை பரவல்களை விலை நிர்ணயம் செய்தல் *"

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:21
msgid "Introduction"
msgstr "அறிமுகம்"

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:23
msgid "An Asian barrier spread is a combination of 3 different option types, and as such, combines multiple possible features that the Qiskit Finance option pricing framework supports:"
msgstr "ஒரு ஆசிய தடை பரவல் என்பது 3 வெவ்வேறு விருப்ப வகைகளின் கலவையாகும், மேலும், qiskit நிதி விருப்ப விலை நிர்ணய கட்டமைப்பை ஆதரிக்கும் பல சாத்தியமான அம்சங்களை ஒருங்கிணைக்கிறது:"

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:25
msgid "Asian option: The payoff depends on the average price over the considered time horizon."
msgstr "ஆசிய விருப்பம்: செலுத்துதல் கருதப்படும் நேர எல்லைக்கு மேல் சராசரி விலையைப் பொறுத்தது."

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:26
msgid "Barrier Option: The payoff is zero if a certain threshold is exceeded at any time within the considered time horizon."
msgstr "தடை விருப்பம்: கருதப்படும் நேர எல்லைக்குள் எந்த நேரத்திலும் ஒரு குறிப்பிட்ட வரம்பு மீறப்பட்டால் செலுத்துதல் பூஜ்ஜியமாகும்."

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:27
msgid "(Bull) Spread: The payoff follows a piecewise linear function (depending on the average price) starting at zero, increasing linear, staying constant."
msgstr "(காளை) பரவல்: பூஜ்ஜியத்திலிருந்து தொடங்கி, நேரியல் அதிகரிக்கும், மாறாமல் இருக்கும் ஒரு piecewise நேரியல் செயல்பாட்டை (சராசரி விலையைப் பொறுத்து) செலுத்துகிறது."

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:29
msgid "Suppose strike prices :math:`K_1 < K_2` and time periods :math:`t=1,2`, with corresponding spot prices :math:`(S_1, S_2)` following a given multivariate distribution (e.g. generated by some stochastic process), and a barrier threshold :math:`B>0`. The corresponding payoff function is defined as"
msgstr "வேலைநிறுத்த விலைகள் என்று வைத்துக்கொள்வோம் :math:`K_1 < K_2` மற்றும் கால அவகாசம் :math:`t=1,2`, தொடர்புடைய ஸ்பாட் விலைகளுடன் :math:`(S_1, S_2)`கொடுக்கப்பட்ட பன்முக விநியோகம் (எ.கா. சில சீரற்ற செயல்முறையால் உருவாக்கப்பட்டது) மற்றும் ஒரு தடை வாசலைத் தொடர்ந்து :math:`B>0`.தொடர்புடைய செலுத்துதல் செயல்பாடு என வரையறுக்கப்படுகிறது"

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:31
msgid "P(S_1, S_2) =\n"
"\\begin{cases}\n"
"\\min\\left\\{\\max\\left\\{\\frac{1}{2}(S_1 + S_2) - K_1, 0\\right\\}, K_2 - K_1\\right\\}, & \\text{ if } S_1, S_2 \\leq B \\\\\n"
"0, & \\text{otherwise.}\n"
"\\end{cases}"
msgstr ""

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:40
msgid "In the following, a quantum algorithm based on amplitude estimation is used to estimate the expected payoff, i.e., the fair price before discounting, for the option"
msgstr "பின்வருவனவற்றில், எதிர்பார்க்கப்பட்ட ஊதியத்தை மதிப்பிடுவதற்கு வீச்சு மதிப்பீட்டை அடிப்படையாகக் கொண்ட ஒரு குவாண்டம் வழிமுறை பயன்படுத்தப்படுகிறது, அதாவது, தள்ளுபடிக்கு முன் நியாயமான விலை, விருப்பத்திற்காக"

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:42
msgid "\\mathbb{E}\\left[ P(S_1, S_2) \\right].\n\n"
msgstr ""

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:44
msgid "The approximation of the objective function and a general introduction to option pricing and risk analysis on quantum computers are given in the following papers:"
msgstr "புறநிலை செயல்பாட்டின் தோராயமும் குவாண்டம் கணினிகளில் விருப்பத்தேர்வு விலை மற்றும் இடர் பகுப்பாய்விற்கான பொதுவான அறிமுகமும் பின்வரும் ஆவணங்களில் கொடுக்கப்பட்டுள்ளன:"

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:46
msgid "Quantum Risk Analysis. Woerner, Egger. 2018."
msgstr "Quantum Risk Analysis. Woerner, Egger. 2018."

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:47
msgid "Option Pricing using Quantum Computers. Stamatopoulos et al. 2019."
msgstr ""

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:77
msgid "Uncertainty Model"
msgstr "நிச்சயமற்ற மாதிரி"

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:79
msgid "We construct a circuit factory to load a multivariate log-normal random distribution into a quantum state on :math:`n` qubits. For every dimension :math:`j = 1,\\ldots,d`, the distribution is truncated to a given interval :math:`[\\text{low}_j, \\text{high}_j]` and discretized using :math:`2^{n_j}` grid points, where :math:`n_j` denotes the number of qubits used to represent dimension :math:`j`, i.e., :math:`n_1+\\ldots+n_d = n`. The unitary operator corresponding to the circuit factory implements the following:"
msgstr ""

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:82
msgid "\\big|0\\rangle_{n} \\mapsto \\big|\\psi\\rangle_{n} = \\sum_{i_1,\\ldots,i_d} \\sqrt{p_{i_1\\ldots i_d}}\\big|i_1\\rangle_{n_1}\\ldots\\big|i_d\\rangle_{n_d},\n\n"
msgstr ""

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:84
msgid "where :math:`p_{i_1\\ldots i_d}` denote the probabilities corresponding to the truncated and discretized distribution and where :math:`i_j` is mapped to the right interval using the affine map:"
msgstr ""

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:86
msgid "\\{0, \\ldots, 2^{n_j}-1\\} \\ni i_j \\mapsto \\frac{\\text{high}_j - \\text{low}_j}{2^{n_j} - 1} * i_j + \\text{low}_j \\in [\\text{low}_j, \\text{high}_j].\n\n"
msgstr ""

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:88
msgid "For simplicity, we assume both stock prices are independent and identically distributed. This assumption just simplifies the parametrization below and can be easily relaxed to more complex and also correlated multivariate distributions. The only important assumption for the current implementation is that the discretization grid of the different dimensions has the same step size."
msgstr ""

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:173
msgid "Payoff Function"
msgstr "செலுத்துதல் செயல்பாடு"

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:175
msgid "For simplicity, we consider the sum of the spot prices instead of their average. The result can be transformed to the average by just dividing it by 2."
msgstr "எளிமைக்காக, ஸ்பாட் விலைகளின் தொகையை அவற்றின் சராசரிக்கு பதிலாக நாங்கள் கருதுகிறோம். முடிவை 2 ஆல் வகுப்பதன் மூலம் சராசரியாக மாற்ற முடியும்."

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:177
msgid "The payoff function equals zero as long as the sum of the spot prices :math:`(S_1 + S_2)` is less than the strike price :math:`K_1` and then increases linearly until the sum of the spot prices reaches :math:`K_2`. Then payoff stays constant to :math:`K_2 - K_1` unless any of the two spot prices exceeds the barrier threshold :math:`B`, then the payoff goes immediately down to zero. The implementation first uses a weighted sum operator to compute the sum of the spot prices into an ancilla register, and then uses a comparator, that flips an ancilla qubit from :math:`\\big|0\\rangle` to :math:`\\big|1\\rangle` if :math:`(S_1 + S_2) \\geq K_1` and another comparator/ancilla to capture the case that :math:`(S_1 + S_2) \\geq K_2`. These ancillas are used to control the linear part of the payoff function."
msgstr ""

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:180
msgid "In addition, we add another ancilla variable for each time step and use additional comparators to check whether :math:`S_1`, respectively :math:`S_2`, exceed the barrier threshold :math:`B`. The payoff function is only applied if :math:`S_1, S_2 \\leq B`."
msgstr ""

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:182
msgid "The linear part itself is approximated as follows. We exploit the fact that :math:`\\sin^2(y + \\pi/4) \\approx y + 1/2` for small :math:`|y|`. Thus, for a given approximation scaling factor :math:`c_\\text{approx} \\in [0, 1]` and :math:`x \\in [0, 1]` we consider"
msgstr ""

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:184
msgid "\\sin^2( \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + \\pi/4) \\approx \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + 1/2\n\n"
msgstr ""

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:186
msgid "\\ for small :math:`c_\\text{approx}`."
msgstr "\\ for small :math:`c_\\text{approx}`."

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:188
msgid "We can easily construct an operator that acts as"
msgstr ""

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:190
msgid "\\big|x\\rangle \\big|0\\rangle \\mapsto \\big|x\\rangle \\left( \\cos(a*x+b) \\big|0\\rangle + \\sin(a*x+b) \\big|1\\rangle \\right),\n\n"
msgstr ""

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:192
msgid "using controlled Y-rotations."
msgstr "கட்டுப்படுத்தப்பட்ட Y- சுழற்சிகளைப் பயன்படுத்துதல்."

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:194
msgid "Eventually, we are interested in the probability of measuring :math:`\\big|1\\rangle` in the last qubit, which corresponds to :math:`\\sin^2(a*x+b)`. Together with the approximation above, this allows to approximate the values of interest. The smaller we choose :math:`c_\\text{approx}`, the better the approximation. However, since we are then estimating a property scaled by :math:`c_\\text{approx}`, the number of evaluation qubits :math:`m` needs to be adjusted accordingly."
msgstr ""

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:196
msgid "For more details on the approximation, we refer to: Quantum Risk Analysis. Woerner, Egger. 2018."
msgstr ""

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:198
msgid "Since the weighted sum operator (in its current implementation) can only sum up integers, we need to map from the original ranges to the representable range to estimate the result, and reverse this mapping before interpreting the result. The mapping essentially corresponds to the affine mapping described in the context of the uncertainty model above."
msgstr ""

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:591
msgid "Evaluate Expected Payoff"
msgstr "எதிர்பார்க்கப்படும் ஊதியத்தை மதிப்பிடுங்கள்"

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:593
msgid "We first verify the quantum circuit by simulating it and analyzing the resulting probability to measure the :math:`|1\\rangle` state in the objective qubit."
msgstr ""

#: ../../tutorials/finance/07_asian_barrier_spread_pricing.ipynb:699
msgid "Next we use amplitude estimation to estimate the expected payoff. Note that this can take a while since we are simulating a large number of qubits. The way we designed the operator (asian_barrier_spread) implies that the number of actual state qubits is significantly smaller, thus, helping to reduce the overall simulation time a bit."
msgstr ""

