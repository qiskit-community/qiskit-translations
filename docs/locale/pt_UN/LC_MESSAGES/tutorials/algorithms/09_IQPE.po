msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-21 17:24+0000\n"
"PO-Revision-Date: 2021-10-21 18:18\n"
"Last-Translator: \n"
"Language-Team: Portuguese (United)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/09_IQPE.po\n"
"X-Crowdin-File-ID: 9546\n"
"Language: pt_UN\n"

#: ../../tutorials/algorithms/09_IQPE.ipynb:10
msgid "This page was generated from `tutorials/algorithms/09_IQPE.ipynb`__."
msgstr "Esta página foi gerada, a partir do `tutorials/algorithms/09_qaoa.ipynb`__."

#: ../../tutorials/algorithms/09_IQPE.ipynb:9
msgid "Iterative Quantum Phase Estimation Algorithm"
msgstr "Algoritmo De Estimação De Fase Quântica Iterativa"

#: ../../tutorials/algorithms/09_IQPE.ipynb:11
msgid "The goal of this tutorial is to understand how the Iterative Phase Estimation (IPE) algorithm works, why would we use the IPE algorithm instead of the QPE (Quantum Phase Estimation) algorithm and how to build it with Qiskit using the same circuit exploiting reset gate and the ``c_if`` method that allows to apply gates conditioned by the values stored in a classical register, resulting from previous measurements."
msgstr "O objetivo desse tutorial é explicar como o algoritmo do Processo Iterativo de Fases (IPE) funciona, porque usaríamos o algoritmo IPE ao invés do QPE (Estimativa de Fase Quântica) e como compilá-lo com o Qiskit usando a porta lógica de reset do circuito exploratório e o método \"c_if\" que permite aplicar portas lógicas resultantes dos valores armazenados em um registrador clássico, obtidos de medições anteriores."

#: ../../tutorials/algorithms/09_IQPE.ipynb:13
msgid "**References**"
msgstr "**Referências:**"

#: ../../tutorials/algorithms/09_IQPE.ipynb:15
msgid "`Section 2 of Lab 4: Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__"
msgstr "Sessão 2 do Laboratório 4: Algoritmo de Estimativa De Fase Iterativa (IPE) Algoritmo <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>` __"

#: ../../tutorials/algorithms/09_IQPE.ipynb:17
msgid "`Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__"
msgstr "`Ch.3.6 Estimativa De Fase Quântica <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>` __"

#: ../../tutorials/algorithms/09_IQPE.ipynb:42
msgid "Conditioned gates: the c_if method"
msgstr "Portões condicionados: o método c_if"

#: ../../tutorials/algorithms/09_IQPE.ipynb:53
msgid "Before starting the IPE algorithm, we will give a brief tutorial about the Qiskit conditional method, c_if, as it goes into building the IPE circuit."
msgstr "Antes de iniciar o algoritmo do IPE, daremos um breve tutorial sobre o método condicional Qiskit, c_if, conforme ele vai para a construção do circuito IPE."

#: ../../tutorials/algorithms/09_IQPE.ipynb:55
msgid "``c_if`` is a function (actually a method of the gate class) to perform conditioned operations based on the value stored previously in a classical register. With this feature you can apply gates after a measurement in the same circuit conditioned by the measurement outcome."
msgstr "``c_if``é uma função (na verdade um método da classe Portão) para realizar operações condicionadas baseadas no valor anteriormente armazenado em um registrador clássico. Com esta funcionalidade você pode aplicar portões após uma medição no mesmo circuito, condicionado pelo resultado da medição."

#: ../../tutorials/algorithms/09_IQPE.ipynb:57
msgid "For example, the following code will execute the :math:`X` gate if the value of the classical register is :math:`0`."
msgstr "Por exemplo, o código a seguir executará a porta :math:` X ` se o valor do registro clássico for de :math:` 0 `."

#: ../../tutorials/algorithms/09_IQPE.ipynb:93
msgid "We highlight that the method c_if expects as the first argument a whole classical register, not a single classical bit (or a list of classical bits), and as the second argument a value in decimal representation (a non-negative integer), not the value of a single bit, 0, or 1 (or a list/string of binary digits)."
msgstr "Destacamos que o método c_if espera como o primeiro argumento todo um registro clássico, não um único bit clássico (ou uma lista de bits clássicos), e como o segundo argumento um valor na representação decimal (um inteiro não negativo), não o valor de um único bit, 0 ou 1 (ou uma lista / cadeia de dígitos binários)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:95
msgid "Let’s make another example. Consider that we want to perform a bit flip on the third qubit after the measurements in the following circuit, when the results of the measurement of :math:`q_0` and :math:`q_1` are both :math:`1`."
msgstr "Vamos fazer outro exemplo. Considere que queremos executar um bit flip no terceiro qubit após as medições no circuito a seguir, quando os resultados da medição de :math:` q_0 ` e :math:` q_1 ` são ambos de :math:` 1 `."

#: ../../tutorials/algorithms/09_IQPE.ipynb:133
msgid "We want to apply the :math:`X` gate, only if both the results of the measurement of :math:`q_1` and :math:`q_2` are :math:`1`. We can do this using the c_if method, conditioning the application of :math:`X` depending on the value passed as argument to c_if."
msgstr "Queremos aplicar a porta :math:\"X\", apenas se ambos os resultados da medição de :math:` q_1 ` e de :math:` q_2 ` forem :math:` 1 `. Podemos fazer isso usando o método c_if, condicionando a aplicação de :math:` X ` dependendo do valor passado como argumento para c_if."

#: ../../tutorials/algorithms/09_IQPE.ipynb:135
msgid "We will have to encode the value to pass to the c_if method such that it will check the values 011 and 111 (in binary representation), since it does not matter what is in the rightmost position."
msgstr "Teremos que codificar o valor para passar para o método c_if tal que ele verificará os valores 011 e 111 (em representação binária), uma vez que não importa o que está na posição mais à direita."

#: ../../tutorials/algorithms/09_IQPE.ipynb:137
msgid "The 2 integer values in decimal representation:"
msgstr "Os 2 valores inteiros em representação decimal:"

#: ../../tutorials/algorithms/09_IQPE.ipynb:148
msgid "|9d0dd25d356044d289b930f8545bd6b4|"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:161
msgid "We can check the solutions using the bin() method in python (the prefix ``0b`` indicates the binary format)."
msgstr "Nós podemos verificar as soluções usando o método bin() em python (o prefixo ` ` 0b ` ` indica o formato binário)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:204
msgid "So we have to apply :math:`X` to :math:`q_2` using c_if two times, one for each value corresponding to 011 and 111."
msgstr "Por isso, temos que aplicar :math:` X ` a :math:` q_2 ` utilizando c_if duas vezes, uma para cada valor correspondente a 011 e 111."

#: ../../tutorials/algorithms/09_IQPE.ipynb:247
msgid "IPE"
msgstr "IPE"

#: ../../tutorials/algorithms/09_IQPE.ipynb:249
msgid "The motivation for using the IPE algorithm is that QPE algorithm works fine for short depth circuits but when the circuit starts to grow, it doesn’t work properly due to gate noise and decoherence times."
msgstr "A motivação para usar o algoritmo do IPE é que o algoritmo QPE funciona bem para circuitos de profundidade curtos mas quando o circuito começa a crescer, ele não funciona adequadamente devido aos tempos de ruído e decoerência da porta."

#: ../../tutorials/algorithms/09_IQPE.ipynb:251
msgid "The detailed explanation of how the algorithm works can be found in `Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__. To understand QPE in depth, you can see also `Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__."
msgstr "A explicação detalhada de como o algoritmo funciona pode ser encontrada em ` Algoritmo Iterativo de Estimação de Fase (IPE) <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>` __. Para entender o QPE em profundidade, você pode ver também `Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>` __."

#: ../../tutorials/algorithms/09_IQPE.ipynb:254
msgid "IPE example with a 1-qubit gate for :math:`U`"
msgstr "Exemplo do IPE com uma porta de 1 bit para :math:`U`"

#: ../../tutorials/algorithms/09_IQPE.ipynb:256
msgid "We want to apply the IPE algorithm to estimate the phase for a 1-qubit operator :math:`U`. For example, here we use the :math:`S`-gate."
msgstr "Queremos aplicar o algoritmo do IPE para estimar a fase para um operador de 1-qubit :math:` U `. Por exemplo, aqui utilizamos a porta :math:`S`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:258
msgid "Let’s apply the IPE algorithm to estimate the phase for :math:`S`-gate. Its matrix is"
msgstr "Vamos aplicar o algoritmo do IPE para estimar a fase para a porta :math:` S `. Sua matriz é"

#: ../../tutorials/algorithms/09_IQPE.ipynb:260
msgid " S =\n"
"\\begin{bmatrix}\n"
"1 & 0\\\\\n"
"0 & e^\\frac{i\\pi}{2}\\\\\n"
"\\end{bmatrix}"
msgstr " S =\n"
"\\begin{bmatrix}\n"
"1 & 0\\\\\n"
"0 & e^\\frac{i\\pi}{2}\\\\\n"
"\\end{bmatrix}"

#: ../../tutorials/algorithms/09_IQPE.ipynb:268
msgid "That is, the :math:`S`-gate adds a phase :math:`\\pi/2` to the state :math:`|1\\rangle`, leaving unchanged the phase of the state :math:`|0\\rangle`"
msgstr "Ou seja, a porta :math:` S ` adiciona uma fase :math:` \\pi/2 ` ao estado :math:` | 1\\rangle`, deixando inalterada a fase do estado :math:` | 0\\rangle `"

#: ../../tutorials/algorithms/09_IQPE.ipynb:270
msgid "S|1\\rangle = e^\\frac{i\\pi}{2}|1\\rangle\n\n"
msgstr "S|1\\rangle = e^\\frac{i\\pi}{2}|1\\rangle\n\n"

#: ../../tutorials/algorithms/09_IQPE.ipynb:272
msgid "In the following, we will use the notation and terms used in `Section 2 of lab 4 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__."
msgstr "No seguinte, utilizaremos a notação e os termos utilizados em `Seção 2 do laboratório 4 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>` __."

#: ../../tutorials/algorithms/09_IQPE.ipynb:274
msgid "Let’s consider to estimate the phase :math:`\\phi=\\frac{\\pi}{2}` for the eigenstate :math:`|1\\rangle`, we should find :math:`\\varphi=\\frac{1}{4}` (where :math:`\\phi = 2 \\pi \\varphi`). Therefore to estimate the phase we need exactly 2 phase bits, i.e. \\ :math:`m=2`, since :math:`1/2^2=1/4`. So :math:`\\varphi=0.\\varphi_1\\varphi_2`."
msgstr "Vamos considerar estimar a fase :math:`\\phi=\\frac{\\pi}{2}` para o autoestado :math:`|1\\rangle`, nós devemos encontrar :math:`\\varphi=\\frac{1}{4}` (where :math:`\\phi = 2 \\pi \\varphi`). Desta forma para estimar a fase precisamos de exatamente 2 bits de fase, ou seja, \\ :math:`m=2`, uma vez que :math:`1/2^2=1/4`. Então :math:`\\varphi=0.\\varphi_1\\varphi_2`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:276
msgid "Remember from the theory that for the IPE algorithm, :math:`m` is also the number of iterations, so we need only :math:`2` iterations or steps."
msgstr "Lembre-se da teoria de que para o algoritmo do IPE, :math:` m ` é também o número de iterações, portanto, precisamos de apenas :math:` 2 ` iterações ou etapas."

#: ../../tutorials/algorithms/09_IQPE.ipynb:278
msgid "First, we initialize the circuit. IPE works with only 1 auxiliary qubit, instead of :math:`m` counting qubits of the QPE algorithm. Therefore, we need 2 qubits, 1 auxiliary qubit and 1 for the eigenstate of :math:`U`-gate, and a classical register of 2 bits, for the phase bits :math:`\\varphi_1`, :math:`\\varphi_2`."
msgstr "Primeiro, inicializamos o circuito. O IPE trabalha com apenas 1 qubit auxiliar, em vez de :math:` m ` contagem de qubits do algoritmo QPE. Por isso, precisamos de 2 qubits, 1 qubit auxiliar e 1 para o autoestado de :math:` U `-gate, e um registrador clássico de 2 bits, para os bits de fase :math:` \\varphi_1 `, :math:` \\varphi_2 `."

#: ../../tutorials/algorithms/09_IQPE.ipynb:305
#: ../../tutorials/algorithms/09_IQPE.ipynb:704
msgid "First step"
msgstr "Primeiro passo"

#: ../../tutorials/algorithms/09_IQPE.ipynb:307
msgid "Now we build the quantum circuit for the first step, that is, the first iteration of the algorithm, to estimate the least significant phase bit :math:`\\varphi_m`, in this case :math:`\\varphi_2`. For the first step we have 3 sub-steps: - initialization - application of the Controlled-\\ :math:`U` gates - measure of the auxiliary qubit in x-basis"
msgstr "Agora construímos o circuito quântico para a primeira etapa, ou seja, a primeira iteração do algoritmo, para estimar a fase menos significativa bit :math:` \\varphi_m `, neste caso :math:` \\varphi_2 `. Para o primeiro passo temos 3 sub-etapas:-inicialização-aplicação das portas Controlled-\\ :math:` U `-medida do qubit auxiliar na base X"

#: ../../tutorials/algorithms/09_IQPE.ipynb:310
#: ../../tutorials/algorithms/09_IQPE.ipynb:709
msgid "Initialization"
msgstr "Inicialização"

#: ../../tutorials/algorithms/09_IQPE.ipynb:312
msgid "The initialization consists of application the Hadamard gate to the auxiliary qubit and the preparation of the eigenstate :math:`|1\\rangle`."
msgstr "A inicialização consiste na aplicação do portão Hadamard no qubit auxiliar e da preparação do autoestado :math:`|1\\rangle`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:345
#: ../../tutorials/algorithms/09_IQPE.ipynb:744
msgid "Application of the Controlled-\\ :math:`U` gates"
msgstr "Aplicação dos portões Controlled-\\ :math:`U`"

#: ../../tutorials/algorithms/09_IQPE.ipynb:347
msgid "Then we have to apply :math:`2^t` times the Controlled-\\ :math:`U` operators (see also in the docs `Two qubit gates <https://qiskit.org/documentation/tutorials/circuits/3_summary_of_quantum_operations.html#Two-qubit-gates>`__), that, in this example, is the Controlled-\\ :math:`S` gate (:math:`CS` for short)."
msgstr "Então, temos que aplicar :math:`2^t` vezes os operadores controlados -\\ :math:`U` (veja também nas documentações `Duas portas qubit <https://qiskit.org/documentation/tutorials/circuits/3_summary_of_quantum_operations.html#Two-qubit-gates>`__), que, neste exemplo, é a porta controlada-\\ :math:`S`(:math:`CS` abreviado)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:349
msgid "To implement :math:`CS` in the circuit, since :math:`S` is a phase gate, we can use the controlled phase gate :math:`\\text{CP}(\\theta)`, with :math:`\\theta=\\pi/2`."
msgstr "Para implementar :math:`CS`, uma vez que :math:`S` é um portão de fase, podemos usar o portão de fase controlada :math:`\\text{CP}(\\theta)`, com :math:`\\theta=\\pi/2`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:381
msgid "Let’s apply :math:`2^t` times :math:`\\text{CP}(\\pi/2)`. Since for the first step :math:`t=m-1`, and :math:`m=2`, we have :math:`2^t=2`."
msgstr "Vamos aplicar :math:`2^t` vezes :math:`\\text{CP}(\\pi/2)`. Dado que para o primeiro passo :math:`t=m-1`, e :math:`m=2`, temos que :math:`2^t=2`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:414
#: ../../tutorials/algorithms/09_IQPE.ipynb:813
msgid "Measure in x-basis"
msgstr "Medida na base-x"

#: ../../tutorials/algorithms/09_IQPE.ipynb:416
msgid "Finally, we perform the measurement of the auxiliary qubit in x-basis. So we will define a function to perform the x_measure and then apply it."
msgstr "Finalmente, procedemos com a medição do qubit auxiliar na base-x. Então definiremos uma função para realizar a medida_x e então aplicá-la."

#: ../../tutorials/algorithms/09_IQPE.ipynb:440
msgid "In this way we obtain the phase bit :math:`\\varphi_2` and store it in the classical bit :math:`c_0`."
msgstr "Desta forma obtemos o bit de fase :math:`\\varphi_2` e armazená-lo na bit clássico :math:`c_0`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:472
msgid "Subsequent steps (2nd step)"
msgstr "Passos subsequentes (segundo passo)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:474
msgid "Now we build the quantum circuit for the other remaining steps, in this example, only the second one. In these steps we have 4 sub-steps: the 3 sub-steps as in the first step and, in the middle, the additional step of the phase correction - initialization with reset - phase correction - application of the Control-\\ :math:`U` gates - measure of the auxiliary qubit in x-basis"
msgstr "Agora construímos o circuito quântico para os outros passos remanescentes, neste exemplo, apenas o segundo passo. Nestes passos temos 4 sub-passos: os 3 sub-passos assim como no primeiro passo e, no meio, o passo adicional da correção de fase - inicialização com reset - correção de fase - aplicação dos portões Control-\\ :math:`U` - medida do qubit auxiliar na base-x"

#: ../../tutorials/algorithms/09_IQPE.ipynb:477
#: ../../tutorials/algorithms/09_IQPE.ipynb:852
msgid "Initialization with reset"
msgstr "Inicialização com reset"

#: ../../tutorials/algorithms/09_IQPE.ipynb:479
msgid "As we want to perform an iterative algorithm in the same circuit, we need to reset the auxiliary qubit :math:`q0` after the measument gate and initialize it again as before to recycle the qubit."
msgstr "Como queremos realizar um algoritmo iterativo no mesmo circuito, precisamos reiniciar o qubit auxiliar :math: `q0` após o portão de medição e inicializá-lo novamente como antes para reciclar o qubit."

#: ../../tutorials/algorithms/09_IQPE.ipynb:512
#: ../../tutorials/algorithms/09_IQPE.ipynb:885
msgid "Phase correction (for step 2)"
msgstr "Correção de fase (para o passo 2)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:514
msgid "As seen in the theory, in order to extract the phase bit :math:`\\varphi_{1}`, we perform a phase correction of :math:`-\\pi\\varphi_2/2`. Of course, we need to apply the phase correction in the circuit only if the phase bit :math:`\\varphi_2=1`, i.e. we have to apply the phase correction of :math:`-\\pi/2` only if the classical bit :math:`c_0` is 1."
msgstr "Claro, precisamos aplicar a correção de fase no circuito apenas se o bit de fase :math:`\\ varphi_{1}`, ou seja, temos que aplicar a correção de fase de :math:`-\\pi\\varphi_2/2`. apenas se o bit clássico :math:`c_0` é 1."

#: ../../tutorials/algorithms/09_IQPE.ipynb:516
msgid "So, after the reset we apply the phase gate :math:`P(\\theta)` with phase :math:`\\theta=-\\pi/2` conditioned by the classical bit :math:`c_0` (:math:`=\\varphi_2`) using the ``c_if`` method. So as we saw in the first part of this tutorial, we have to use the ``c_if`` method with a value of 1, as :math:`1_{10} = 001_{2}` (the subscripts :math:`_{10}` and :math:`_2` indicate the decimal and binary representations)."
msgstr "Então, após o reset aplicamos o portão de fase :math:`P(\\theta)` com fase :math:`\\theta=-\\pi/2` condicionada pelo bit clássico :math:`c_0` (:math:`=\\varphi_2`) usando o método ``c_if``. Então, como vimos na primeira parte deste tutorial, temos que usar o método ``c_if`` com um valor de 1, como em :math:`1_{10} = 001_{2}` (os subscritos :math:`_{10}` e :math:`_2` indicam representações decimais e binárias)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:548
#: ../../tutorials/algorithms/09_IQPE.ipynb:921
msgid "Application of the Control-\\ :math:`U` gates and x-measurement (for step 2)"
msgstr "Aplicação dos portões Control-\\ :math:`U` e x-medições (para o passo 2)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:550
msgid "We apply the :math:`CU` operations as we did in the first step. For the second step we have :math:`t=m-2`, hence :math:`2^t=1`. So we apply :math:`\\text{CP}(\\pi/2)` once. And then we perform the x-measurment of the qubit :math:`q_0`, storing the result, the phase bit :math:`\\varphi_1`, in the bit :math:`c_1` of classical register."
msgstr "Aplicamos as operações :math:`CU` assim como fizemos no primeiro passo. Para o segundo passo temos :math:`t=m-2`, daí :math:`2^t=1`. Então aplicamos :math:`\\text{CP}(\\pi/2)` uma vez. E então realizamos a x-medição do qubit :math:`q_0`, armazenando o resultado, o bit de phase :math:`\\varphi_1`, no bit :math:`c_1` do registrador clássico."

#: ../../tutorials/algorithms/09_IQPE.ipynb:575
msgid "Et voilà, we have our final circuit"
msgstr "Et voilà, temos nosso circuito final"

#: ../../tutorials/algorithms/09_IQPE.ipynb:605
msgid "Let’s execute the circuit with the ``qasm_simulator``, the simulator without noise that run locally."
msgstr "Vamos executar o circuito com o `qasm_simulator``, o simulador sem ruído que funciona localmente."

#: ../../tutorials/algorithms/09_IQPE.ipynb:643
msgid "In the picture we have the same histograms but on the left we have on the x-axis the string with phase bits :math:`\\varphi_1`, :math:`\\varphi_2` and on the right the actual phase :math:`\\varphi` in decimal representation."
msgstr "Na imagem temos os mesmos histogramas mas à esquerda temos no eixo x a string com bits de fase :math:`\\varphi_1`,:math:`\\varphi_2` e à direita a fase real :math:`\\varphi` em representação decimal."

#: ../../tutorials/algorithms/09_IQPE.ipynb:645
msgid "As we expected we have found :math:`\\varphi=\\frac{1}{4}=0.25` with a :math:`100\\%` probability."
msgstr "Como esperávamos encontramos :math:`\\varphi=\\frac{1}{4}=0.25` com uma probabilidade de :math:`100\\%`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:657
msgid "IPE example with a 2-qubit gate"
msgstr "Exemplo de IPE com um portão de 2-qubit"

#: ../../tutorials/algorithms/09_IQPE.ipynb:659
msgid "Now, we want to apply the IPE algorithm to estimate the phase for a 2-qubit gate :math:`U`. For this example, let’s consider the controlled version of the :math:`T` gate, i.e. the gate :math:`U=\\textrm{Controlled-}T` (that from now we will express more complactly with :math:`CT`). Its matrix is"
msgstr "Agora, queremos aplicar o algoritmo IPE para estimar a fase de um portão de 2-qubit :math:`U`. Para este exemplo, vamos considerar a versão controlada do portão :math:`T`, ou seja o portão :math:`U=\\textrm{Controlled-}T`(que a partir de agora iremos expressar de forma mais complacente com :math:`CT`). Sua matriz é"

#: ../../tutorials/algorithms/09_IQPE.ipynb:661
msgid " CT =\n"
"\\begin{bmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^\\frac{i\\pi}{4}\\\\\n"
"\\end{bmatrix}"
msgstr " CT =\n"
"\\begin{bmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^\\frac{i\\pi}{4}\\\\\n"
"\\end{bmatrix}"

#: ../../tutorials/algorithms/09_IQPE.ipynb:671
msgid "That is, the :math:`CT` gate adds a phase :math:`\\pi/4` to the state :math:`|11\\rangle`, leaving unchanged the phase of the other computational basis states :math:`|00\\rangle`, :math:`|01\\rangle`, :math:`|10\\rangle`."
msgstr "Isto é, o portão :math:`CT` adiciona a fase :math:`\\pi/4` para o estado :math:`|11\\rangle`, deixando inalterada a fase dos outros estados de base computacional :math:`|00\\rangle`, :math:`|01\\rangle`, :math:`|10\\rangle`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:673
msgid "Let’s consider to estimate the phase :math:`\\phi=\\pi/4` for the eigenstate :math:`|11\\rangle`, we should find :math:`\\varphi=1/8`, since :math:`\\phi = 2 \\pi \\varphi`. Therefore to estimate the phase we need exactly 3 classical bits, i.e. \\ :math:`m=3`, since :math:`1/2^3=1/8`. So :math:`\\varphi=0.\\varphi_1\\varphi_2\\varphi_3`."
msgstr "Vamos considerar a estimativa da fase :math:`\\phi=\\pi/4` para o autoestado :math:`|11\\rangle`, devemos descobrir :math:`\\varphi=1/8`, uma vez que :math:`\\phi = 2 \\pi \\varphi`. Desta forma para estimar a fase precisamos de exatamente 3 bits clássicos, ou seja, \\ :math:`m=3`, já que :math:`1/2^3=1/8`. Então :math:`\\varphi=0.\\varphi_1\\varphi_2\\varphi_3`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:675
msgid "As done with the example for the 1-qubit :math:`U` operator we will go through the same steps but this time we will have :math:`3` steps since :math:`m=3`, and we will not repeat all the explanations. So for details see the above example for 1-qubit :math:`U` gate."
msgstr "Como feito com o exemplo para o operador de 1-qubit :math:`U`, seguiremos os mesmos passos, mas desta vez teremos passos :math:`3` uma vez que :math:`m=3`, e não vamos repetir todas as explicações. Portanto, para obter detalhes, consulte o exemplo acima para o portão :math:`U`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:677
msgid "First, we initialize the circuit with 3 qubits, 1 for the auxiliary qubit and 2 for the 2-qubit gate, and 3 classical bits to store the phase bits :math:`\\varphi_1`, :math:`\\varphi_2`, :math:`\\varphi_3`."
msgstr "Primeiro, inicializamos o circuito com 3 qubits, 1 para o qubit auxiliar e 2 para o portão de 2-qubit, e 3 bits clássicos para armazenar os bits de fase :math:`\\varphi_1`, :math:`\\varphi_2`, :math:`\\varphi_3`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:706
msgid "Now we build the quantum circuit for the first step, to estimate the least significant phase bit :math:`\\varphi_m=\\varphi_3`."
msgstr "Agora nós construímos o circuito quântico para a primeira etapa, para estimar o bit de fase menos significativo :math:`\\varphi_m=\\varphi_3`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:711
msgid "We initialize the auxiliary qubit and the other qubits with the eigenstate :math:`|11\\rangle`."
msgstr "Nós inicializamos o qubit auxiliar e os outros qubits com o eigenstate (autoestado / estado inerente) :math:`|11\\rangle`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:746
msgid "Then we have to apply multiple times the :math:`CU` operator, that, in this example, is the Controlled-\\ :math:`CT` gate (:math:`CCT` for short)."
msgstr "Temos então que aplicar várias vezes o operador :math:`CU` , o qual, neste exemplo, é o portão Controlled-\\ :math:`CT` (resumidamente :math:`CCT`)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:748
msgid "To implement :math:`CCT` in the circuit, since :math:`T` is a phase gate, we can use the multi-controlled phase gate :math:`\\text{MCP}(\\theta)`, with :math:`\\theta=\\pi/4`."
msgstr "Para implementar :math:`CCT` no circuito, dado que :math:`T` é um portão de fase, podemos usar o portão de fase multi-controlado :math:`\\text{MCP}(\\theta)`, com :math:`\\theta=\\pi/4`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:780
msgid "Let’s apply :math:`2^t` times :math:`\\text{MCP}(\\pi/4)`. Since for the first step :math:`t=m-1` and :math:`m=3`, we have :math:`2^t=4`."
msgstr "Vamos aplicar :math:`2^t` vezes :math:`\\text{MCP}(\\pi/4)`. Uma vez que para o primeiro passo :math:`t=m-1` e :math:`m=3`, temos :math:`2^t=4`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:815
msgid "Finally, we perform the measurenment of the auxiliary qubit in x-basis. We can use the ``x_measurement`` function defined above in the example for 1-qubit gate. In this way we have obtained the phase bit :math:`\\varphi_3` and stored it in the classical bit :math:`c_0`."
msgstr "Finalmente, realizamos a medida do qubit auxiliar na base x. Podemos usar a função ``x_measurement`` definida acima, no exemplo de uma porta de 1 qubit. Dessa forma, obtemos o bit de fase :math:`\\varphi_3` e podemos guardá-lo no bit clássico :math:`c_0`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:847
msgid "Subsequent steps (2nd, 3rd)"
msgstr "Passos subsequentes (segundo, terceiro)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:849
msgid "Now we build the quantum circuit for the other remaining steps, the second and the third ones. As said in the first example, in these steps we have the additional sub-step of the phase correction."
msgstr "Agora, construímos o circuito quântico para os outros passos restantes - o segundo e o terceiro. Como dito no primeiro exemplo, nesses passos temos um \"sub-passo\" adicional de correção de fase."

#: ../../tutorials/algorithms/09_IQPE.ipynb:887
msgid "In order to extract the phase bit :math:`\\varphi_{2}`, we perform a phase correction of :math:`-\\pi\\varphi_3/2`."
msgstr "Para extrair o bit de fase :math:`\\varphi_{2}`, fazemos uma correção de fase de :math:`-\\pi\\varphi_3/2`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:889
msgid "So, after the reset we apply the phase gate :math:`P(\\theta)` with phase :math:`\\theta=-\\pi/2` conditioned by the classical bit :math:`c_0` (:math:`=\\varphi_3`)."
msgstr "Então, após fazer o reset, aplicamos a porta de fase :math:`P(\\theta)` com fase de valor :math:`\\theta=-\\pi/2`, condicionada no bit clássico :math:`c_0` (:math:`=\\varphi_3`)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:923
msgid "We apply the :math:`CU` operations as we did in the first step. For the second step we have :math:`t=m-2`, hence :math:`2^t=2`. So we apply :math:`\\text{MCP}(\\pi/4)` :math:`2` times. And then we perform the x-measurement of the qubit :math:`q_0`, storing the phase bit :math:`\\varphi_2` in the bit :math:`c_1`."
msgstr "Nós aplicamos as operações :math:`CU` como no primeiro passo. Já no segundo passo, temos :math:`t=m-2`, de modo que :math:`2^t=2`. Então aplicamos :math:`\\text{MCP}(\\pi/4)` :math:`2` vezes. E então realizamos a medida em x do qubit :math:`q_0`, guardando o bit de fase :math:`\\varphi_2` no bit :math:`c_1`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:957
msgid "All substeps of the 3rd step"
msgstr "Todos os sub-passos do terceiro passo"

#: ../../tutorials/algorithms/09_IQPE.ipynb:959
msgid "For the 3rd and last step, we perform the reset and initialization of the auxiliary qubit as done in the second step."
msgstr "Para o terceiro e último passo, realizamos o reset e a inicialização do qubit auxiliar como feito no segundo passo."

#: ../../tutorials/algorithms/09_IQPE.ipynb:961
msgid "Then at the 3rd step we have to perform the phase correction of :math:`-2\\pi 0.0\\varphi_{2}\\varphi_{3}= -2\\pi \\left(\\frac{\\varphi_2}{4}+\\frac{\\varphi_3}{8}\\right)=-\\frac{\\varphi_2\\pi}{2}-\\frac{ \\varphi_3\\pi}{4}`, thus we have to apply 2 conditioned phase corrections, one conditioned by :math:`\\varphi_3` (:math:`=c_0`) and the other by :math:`\\varphi_2`\\ (:math:`=c_1`). To do this we have to apply the following: - gate :math:`P(-\\pi/4)` conditioned by :math:`c_0=1`, that is, by :math:`c=001` (c_if with value 1) - gate :math:`P(-\\pi/2)` conditioned by :math:`c_1=1`, that is, the gate is applied when :math:`c=010` (c_if with values :math:`2`) - gate :math:`P(-3\\pi/4)` conditioned by :math:`c_1=1` and :math:`c_0=1` that is, the gate is applied when :math:`c=011` (c_if with values :math:`3`)"
msgstr "Então, no terceiro passo, realizamos uma correção de fase de :math:`-2\\pi 0.0\\varphi_{2}\\varphi_{3}= -2\\pi \\left(\\frac{\\varphi_2}{4}+\\frac{\\varphi_3}{8}\\right)=-\\frac{\\varphi_2\\pi}{2}-\\frac{ \\varphi_3\\pi}{4}`, então precisamos aplicar 2 correções de fase condicionadas, uma por :math:`\\varphi_3` (:math:`=c_0`) e a outra por :math:`\\varphi_2`\\ (:math:`=c_1`). Para fazer isso, precisamos aplicar a seguinte: - porta :math:`P(-\\pi/4)` condicionada por :math:`c_0=1`, ou seja, por :math:`c=001` (c_if com valor 1) - porta :math:`P(-\\pi/2)` condicionada por :math:`c_1=1`, isto é, a porta é aplicada quando :math:`c=010` (c_if com valores :math:`2`) - porta :math:`P(-3\\pi/4)` condicionada por :math:`c_1=1` e :math:`c_0=1` ou seja, a porta é aplicada quando :math:`c=011` (c_if com valores :math:`3`)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:964
msgid "Next, the :math:`CU` operations: we apply :math:`2^t` times the :math:`\\text{MCP}(\\pi/4)` gate and since at the 3rd step :math:`t=m-3=0`, we apply the gate only once."
msgstr "Em seguida, as operações :math:`CU`: aplicamos :math:`2^t` vezes a porta :math:`\\text{MCP}(\\pi/4)` e desde o terceiro passo :math:`t=m-3=0`, nós aplicamos a porta apenas uma vez."

#: ../../tutorials/algorithms/09_IQPE.ipynb:1012
msgid "Now, we execute the circuit with the simulator without noise."
msgstr "Agora, executamos o circuito com o simulador sem ruído."

#: ../../tutorials/algorithms/09_IQPE.ipynb:1049
msgid "We have obtained :math:`100\\%` probability to find :math:`\\varphi=0.125`, that is, :math:`1/8`, as expected."
msgstr "Nós obtivemos probabilidade :math:`100\\%` de encontrar :math:`\\varphi=0.125`, isto é, :math:`1/8`, como esperado."

