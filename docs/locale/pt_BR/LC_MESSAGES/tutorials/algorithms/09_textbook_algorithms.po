msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-29 18:58+0000\n"
"PO-Revision-Date: 2021-04-29 19:57\n"
"Last-Translator: \n"
"Language-Team: Portuguese, Brazilian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pt-BR\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/09_textbook_algorithms.po\n"
"X-Crowdin-File-ID: 9460\n"
"Language: pt_BR\n"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:10
msgid "This page was generated from `tutorials/algorithms/09_textbook_algorithms.ipynb`__."
msgstr "Esta página foi gerada, a partir do `tutorials/algorithms/09_textbook_algorithms.ipynb`__."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/09_textbook_algorithms.ipynb>`_."
msgstr "Execute interativamente no `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/09_textbook_algorithms.ipynb>`_."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:9
msgid "Textbook and Shor’s algorithms"
msgstr "Algoritmos de Shor e de livros didáticos"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:11
msgid "Qiskit contains implementations of the well known textbook quantum algorithms such as the `Deutsch-Jozsa algorithm <https://qiskit.org/textbook/ch-algorithms/deutsch-jozsa.html>`__, the `Bernstein-Vazirani algorithm <https://qiskit.org/textbook/ch-algorithms/bernstein-vazirani.html>`__ and `Simon’s algorithm <https://qiskit.org/textbook/ch-algorithms/simon.html>`__."
msgstr "Qiskit contém implementações dos algoritmos quânticos bem conhecidos da literatura como o `algoritmo de Deutsch-Jozsa <https://qiskit.org/textbook/ch-algorithms/deutsch-jozsa.html>`__, o `algoritmo de Bernstein-Vazirani <https://qiskit.org/textbook/ch-algorithms/bernstein-vazirani.html>`__ e o `algoritmo de Simon <https://qiskit.org/textbook/ch-algorithms/simon.html>`__."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:13
msgid "Qiskit also has an implementation of `Shor’s algorithm <https://qiskit.org/textbook/ch-algorithms/shor.html>`__."
msgstr "Qiskit tem também uma implementação do `algoritmo de Shor <https://qiskit.org/textbook/ch-algorithms/shor.html>`__."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:15
msgid "The preceding references have detailed explanations and build-out of circuits whereas this notebook has examples with the pre-built algorithms in Qiskit that you can use for experimentation and education purposes."
msgstr "As referências anteriores têm explicações detalhadas e a construção de circuitos, enquanto este notebook tem exemplos com os algoritmos pré-construídos no Qiskit que você pode usar para fins educativos e de experimentação."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:42
msgid "Deutsch-Jozsa algorithm"
msgstr "Algoritmo de Deutsch-Jozsa"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:44
msgid "Lets start with the `Deutsch-Jozsa algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.DeutschJozsa.html>`__ which can determine if a function is ``'balanced'`` or ``'constant'`` given such a function as input. We can experiment with it in Qiskit using an oracles created from a truth tables. So for example, we can create a ``TruthTableOracle`` instance as follows."
msgstr "Vamos começar com o `algoritmo de Deutsch-Jozsa <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.DeutschJozsa.html>`__ que pode determinar se uma função é ``'balanceada'`` ou ``'constante'`` dada tal função como entrada. Nós podemos experimentar isso no Qiskit usando um oráculo criado a partir de tabelas verdade. Então, por exemplo, podemos criar uma instância ``TruthTableOracle`` da seguinte forma."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:66
msgid "As shown, the truthtable is specified with the ``bitstr`` containing values of all entries in the table. It has length :math:`8`, so the corresponding truth table is of :math:`3` input bits. We can of course see that this truth table represents a ``'balanced'`` function as half of values are :math:`1` and the other half :math:`0`."
msgstr "Como mostrado, a tabela verdade é especificada com a ``bitstr`` contendo valores de todas as entradas na tabela. Ela tem tamanho :math:`8`, então a tabela verdade correspondente é de :math:`3` bits de entrada. Claro que podemos ver que esta tabela verdade representa uma função ``'balanceada'`` já que metade dos valores são :math:`1` e a outra metade :math:`0`."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:68
msgid "It might seem like a moot point running Deutsch-Jozsa on a truthtable as the function outputs are literally listed as the truthtable’s values. The intention is to create an oracle circuit whose groundtruth information is readily available to us but obviously not to the quantum Deutsch-Jozsa algorithm that is to act upon the oracle circuit. In more realistic situations, the oracle circuit would be provided as a blackbox to the algorithm."
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:70
msgid "Above said, we can inspect the circuit corresponding to the function encoded in the ``TruthTableOracle`` instance."
msgstr "Como mencionado anteriormente, podemos inspecionar o circuito correspondente à função codificada na instância ``TruthTableOracle``."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:100
msgid "As seen, the :math:`v_i`\\ ’s correspond to the 3 input bits; the :math:`o_0` is the oracle’s output qubit; the :math:`a_0` is an ancilla qubit."
msgstr "Como se vê, os :math:`v_i`\\s correspondem aos 3 bits de entrada; o :math:`o_0` é o qubit de saída do oráculo; o :math:`a_0` é um qubit auxiliar."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:102
msgid "Next we can simply create a ``DeutschJozsa`` instance using the oracle, and run it to check the result."
msgstr "Em seguida, podemos simplesmente criar uma instância ``DeutschJozsa`` usando o oráculo e executá-la para verificar o resultado."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:145
msgid "We can of course quickly put together another example for a ``'constant'`` function, as follows."
msgstr "Nós podemos, é claro, rapidamente montar outro exemplo para uma função ``'constante'``, da seguinte forma."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:191
msgid "Bernstein-Vazirani algorithm"
msgstr "Algoritmo de Bernstein-Vazirani"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:193
msgid "Next the `Bernstein-Vazirani algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.BernsteinVazirani.html>`__ which tries to find a hidden string. Again, for the example, we create a TruthTableOracle instance."
msgstr "Em seguida, o `algoritmo de Bernstein-Vazirani <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.BernsteinVazirani.html>`__, que tenta encontrar uma string oculta. Novamente, para o exemplo, criamos uma instância TruthTableOracle."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:215
msgid "As shown, the truthtable is specified with the ``bitstr`` containing values of all entries in the table. It has length :math:`8`, so the corresponding truth table is of :math:`3` input bits. The truthtable represents the function mappings as follows:"
msgstr "Como mostrado, a tabela verdade é especificada com a ``bitstr`` contendo valores de todas as entradas na tabela. Ela tem tamanho :math:`8`, então a tabela verdade correspondente é de :math:`3` bits de entrada. A tabela verdade representa o mapeamento da função do seguinte modo:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:217
msgid ":math:`\\mathbf{a} \\cdot 000 \\mod 2 = 0`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:218
msgid ":math:`\\mathbf{a} \\cdot 001 \\mod 2 = 0`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:219
msgid ":math:`\\mathbf{a} \\cdot 010 \\mod 2 = 1`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:220
msgid ":math:`\\mathbf{a} \\cdot 011 \\mod 2 = 1`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:221
msgid ":math:`\\mathbf{a} \\cdot 100 \\mod 2 = 1`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:222
msgid ":math:`\\mathbf{a} \\cdot 101 \\mod 2 = 1`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:223
msgid ":math:`\\mathbf{a} \\cdot 110 \\mod 2 = 0`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:224
msgid ":math:`\\mathbf{a} \\cdot 111 \\mod 2 = 0`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:226
msgid "And obviously the goal is to find the bitstring :math:`\\mathbf{a}` that satisfies all the inner product equations."
msgstr "E obviamente o objetivo é encontrar a bitstring :math:`\\mathbf{a}` que satisfaz todas as equações de produto interno."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:228
msgid "Lets again look at the oracle circuit, that now corresponds to the binary function encoded in the ``TruthTableOracle`` instance."
msgstr "Vamos olhar novamente para o circuito do oráculo, que agora corresponde à função binária codificada na instância ``TruthTableOracle``."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:258
msgid "Again the :math:`v_i`\\ ’s correspond to the 3 input bits; the :math:`o_0` is the oracle’s output qubit; the :math:`a_0` is an ancilla qubit."
msgstr "Novamente, os :math:`v_i`\\s correspondem aos 3 bits de entrada; o :math:`o_0` é o qubit de saída do oráculo; o :math:`a_0` é um qubit auxiliar."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:260
msgid "Let us first compute the groundtruth :math:`\\mathbf{a}` classically:"
msgstr "Primeiro, vamos calcular a verdade base :math:`\\mathbf{a}` classicamente:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:305
msgid "Next we can create a ``BernsteinVazirani`` instance using the oracle, and run it to check the result against the groundtruth."
msgstr "Em seguida, podemos criar uma instância ``BernsteinVazirani`` usando o oráculo e executá-la para verificar o resultado contra a verdade base."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:350
msgid "Simon’s algorithm"
msgstr "Algoritmo de Simon"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:352
msgid "`Simon’s algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Simon.html>`__ is used to solve `Simon’s problem <https://en.wikipedia.org/wiki/Simon's_problem>`__. Once again, for the example, we create a TruthTableOracle instance, where the construction shows a different form."
msgstr "O `algoritmo de Simon <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Simon.html>`__ é usado para resolver o `problema de Simon <https://en.wikipedia.org/wiki/Simon's_problem>`__. Mais uma vez, para o exemplo, criamos uma instância TruthTableOracle, na qual a construção possui uma forma diferente."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:378
msgid "As shown, the truthtable is specified with three length-8 bitstrings, each containing the values of all entries for a particular output column in the table. Each bitstring has length :math:`8`, so the truthtable has :math:`3` input bits; There are :math:`3` bitstrings, so the truthtable has :math:`3` output bits."
msgstr "Como mostrado, a tabela verdade é especificada com três strings com comprimento de 8 bits, cada uma contendo os valores de todas as entradas para uma coluna específica da saída na tabela. Cada bitstring tem comprimento :math:`8`, então a tabela verdade tem :math:`3` bits de entrada; Há :math:`3` bitstrings, então a tabela verdade tem :math:`3` bits de saída."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:380
msgid "The function :math:`f` represented by the truthtable is promised to be either 1-to-1 or 2-to-1. Our goal is to determine which. For the case of 2-to-1, we also need to compute the mask :math:`\\mathbf{s}`, which satisfies :math:`\\forall \\mathbf{x},\\mathbf{y}`: :math:`\\mathbf{x} \\oplus \\mathbf{y} = \\mathbf{s}` iff :math:`f(\\mathbf{x}) = f(\\mathbf{y})`. Apparently, if :math:`f` is 1-to-1, the corresponding mask :math:`\\mathbf{s} = \\mathbf{0}`."
msgstr "A função :math:`f` representada pela tabela verdade é prometida a ser 1 para 1 (injetora) ou 2 para 1. Nosso objetivo é determinar qual. Para o caso de 2 para 1, também precisamos calcular a máscara :math:`\\mathbf{s}`, que satisfaz :math:`\\forall \\mathbf{x}, mathbf{y}`: :math:`\\mathbf{x} \\oplus \\mathbf{y} = \\mathbf{s}` iff :math:`f(\\mathbf{x}) = f(\\mathbf{y})`. Aparentemente, se :math:`f` for 1 para 1, a máscara correspondente :math:`\\mathbf{s} = \\mathbf{0}`."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:382
msgid "Let us first compute the groundtruth mask :math:`\\mathbf{s}` classically:"
msgstr "Primeiro, vamos calcular a máscara de verdade fundamental :math:`\\mathbf{s}` classicamente:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:468
msgid "We can also quickly try a truthtable that represents a 1-to-1 function (i.e., the corresponding mask is :math:`\\mathbf{0}`), as follows."
msgstr "Também podemos tentar rapidamente uma tabela verdade que representa uma função de 1 para 1 (ou seja, a máscara correspondente é :math:`\\mathbf{0}`), da seguinte maneira."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:523
msgid "Shor’s Factoring algorithm"
msgstr "Algoritmo de Fatoração de Shor"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:525
msgid "`Shor’s Factoring algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Shor.html>`__ is one of the most well-known quantum algorithms and finds the prime factors for input integer :math:`N` in polynomial time. The algorithm implementation in Qiskit is simply provided a target integer to be factored and run, as follows:"
msgstr "`Algoritmo de Fatoração de Shor <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Shor.html>`__ é um dos algoritmos quânticos mais conhecidos e encontra os fatores primos para o valor inteiro de entrada :math:`N` em tempo polinomial. A implementação do algoritmo no Qiskit é simplesmente fornecer um inteiro alvo a ser fatorado e executar, da seguinte forma:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:570
msgid "Note: this implementation of Shor’s algorithm uses :math:`4n + 2` qubits, where :math:`n` is the number of bits representing the integer in binary. So in practice, for now, this implementation is restricted to factorizing small integers. Given the above value of N we compute :math:`4n +2` below and confirm the size from the actual circuit."
msgstr "Nota: essa implementação do algoritmo de Shor usa :math:`4n + 2` qubits, onde :math:`n` é o número de bits representando o inteiro em binário. Por conseguinte, na prática, por enquanto, esta implementação limita-se a fatorar inteiros pequenos. Dado o valor acima de N calculamos :math:`4n +2` abaixo e confirmamos o tamanho do circuito real."

