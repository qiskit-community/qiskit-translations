msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-12 15:01+0000\n"
"PO-Revision-Date: 2020-11-20 10:13\n"
"Last-Translator: \n"
"Language-Team: Portuguese, Brazilian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pt-BR\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/01_grover.po\n"
"X-Crowdin-File-ID: 9398\n"
"Language: pt_BR\n"

#: ../../tutorials/algorithms/01_grover.ipynb:10
msgid "This page was generated from `tutorials/algorithms/01_grover.ipynb`__."
msgstr "Esta página foi gerada, a partir do 'tutorials/simulators/1_aer_provider.ipynb'__."

#: ../../tutorials/algorithms/01_grover.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/01_grover.ipynb>`_."
msgstr "Execute interativamente no `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/01_grover.ipynb>`_."

#: ../../tutorials/algorithms/01_grover.ipynb:9
msgid "Grover's Algorithm and Amplitude Amplification"
msgstr "Algoritmo de Grover e Amplificação De Amplitude"

#: ../../tutorials/algorithms/01_grover.ipynb:11
#, python-format
msgid "Grover's algorithm is one of the most famous quantum algorithms introduced by Lov Grover in 1996 `1 <L.%20K.%20Grover,%20A%20fast%20quantum%20mechanical%20algorithm%20for%20database%20search.%20Proceedings%2028th%20Annual%20Symposium%20on>`__. It has initially been proposed for unstructured search problems, i.e. for finding a marked element in a unstructured database. However, Grover's algorithm is now a subroutine to several other algorithms, such as Grover Adaptive Search `2 <A.%20Gilliam,%20S.%20Woerner,%20C.%20Gonciulea,%20Grover%20Adaptive%20Search%20for%20Constrained%20Polynomial%20Binary%20Optimization.>`__. For the details of Grover's algorithm, please see `Grover's Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ in the Qiskit textbook."
msgstr "O algoritmo de Grover é um dos algoritmos quânticos mais famosos introduzidos por Lov Grover em 1996 ` 1 <L.%20K.%20Grover,%20A%20fast%20quantum%20mechanical%20algorithm%20for%20database%20search.%20Proceedings%2028th%20Annual%20Symposium%20on>` __. Foi inicialmente proposto para problemas de busca não estruturados, ou seja, para encontrar um elemento marcado em um banco de dados não estruturado. No entanto, o algoritmo de Grover é agora uma subrotina para vários outros algoritmos, como o Grover Adaptive Search ` 2 <A.%20Gilliam,%20S.%20Woerner,%20C.%20Gonciulea,%20Grover%20Adaptive%20Search%20for%20Constrained%20Polynomial%20Binary%20Optimization.>` __. Para os detalhes do algoritmo de Grover, por favor, consulte ` Grover's Algoritmo <https://qiskit.org/textbook/ch-algorithms/grover.html>` __ no Qiskit textbook."

#: ../../tutorials/algorithms/01_grover.ipynb:14
msgid "Qiskit implements Grover's algorithm in the ``Grover`` class. This class also includes the generalized version, Amplitude Amplification [3], and allows setting individual iterations and other meta-settings to Grover's algorithm."
msgstr "Qiskit implementa o algoritmo de Grover na classe ``Grover``. Esta classe também inclui a versão generalizada, a Amplificação da Amplitude [3], e permite a configuração de iterações individuais e outras meta-configurações do algoritmo do Grover."

#: ../../tutorials/algorithms/01_grover.ipynb:16
#: ../../tutorials/algorithms/01_grover.ipynb:866
msgid "**References:**"
msgstr "**Referências:**"

#: ../../tutorials/algorithms/01_grover.ipynb:18
msgid "the Theory of Computing (STOC) 1996, pp. 212-219."
msgstr "the Theory of Computing (STOC) 1996, pp. 212-219."

#: ../../tutorials/algorithms/01_grover.ipynb:20
msgid "https://arxiv.org/abs/1912.04088"
msgstr "https://arxiv.org/abs/1912.04088"

#: ../../tutorials/algorithms/01_grover.ipynb:22
msgid "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"
msgstr "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"

#: ../../tutorials/algorithms/01_grover.ipynb:34
msgid "Grover's algorithm"
msgstr "Algoritmo de Grover"

#: ../../tutorials/algorithms/01_grover.ipynb:36
msgid "Grover's algorithm uses the Grover operator :math:`\\mathcal{Q}` to amplify the amplitudes of the good states:"
msgstr "O algoritmo de Grover usa o operador Grover :math:` \\mathcal{Q}` para amplificar as amplitudes dos bons estados:"

#: ../../tutorials/algorithms/01_grover.ipynb:38
msgid "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"
msgstr "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"

#: ../../tutorials/algorithms/01_grover.ipynb:43
msgid "Here, \\* :math:`\\mathcal{A}` is the initial search state for the algorithm, which is just Hadamards, :math:`H^{\\otimes n}` for the textbook Grover search, but can be more elaborate for Amplitude Amplification \\* :math:`\\mathcal{S_0}` is the reflection about the all 0 state"
msgstr "Aqui, \\* :math:`\\mathcal{A}` é o estado de busca inicial do algoritmo, que é apenas Hadamards, :math:`H^{\\otimes n}` no documento de Busca de Grover, mas pode ser mais elaborada para Amplificação de Amplitude \\* :math:`\\mathcal{S_0}` é a reflexão sobre o estado 0"

#: ../../tutorials/algorithms/01_grover.ipynb:45
msgid "      |x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}\n\n"
"\\* :math:`\\mathcal{S_f}` is the oracle that applies"
msgstr "      |x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}\n\n"
"\\* :math:`\\mathcal{S_f}` é o oráculo que aplica"

#: ../../tutorials/algorithms/01_grover.ipynb:52
msgid " |x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle\n\n"
"where :math:`f(x)` is 1 if :math:`x` is a good state and otherwise 0."
msgstr " |x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle\n\n"
"where :math:`f(x)` is 1 if :math:`x` é um bom estado e, caso contrário, 0."

#: ../../tutorials/algorithms/01_grover.ipynb:59
msgid "In a nutshell, Grover's algorithm applies different powers of :math:`\\mathcal{Q}` and after each execution checks whether a good solution has been found."
msgstr "Em poucas palavras, o algoritmo de Grover aplica pesos diferentes de :math:`\\mathcal{Q}` e depois de cada execução verifica se uma boa solução foi encontrada."

#: ../../tutorials/algorithms/01_grover.ipynb:62
msgid "Running Grover's algorithm"
msgstr "Executando o algoritmo de Grover"

#: ../../tutorials/algorithms/01_grover.ipynb:64
msgid "To run Grover's algorithm with the ``Grover`` class, firstly, we need to specify an oracle for the circuit of Grover's algorithm. In the following example, we use ``QuantumCircuit`` as the oracle of Grover's algorithm. However, there are several other class that we can use as the oracle of Grover's algorithm. We talk about them later in this tutorial."
msgstr "Para executar o algoritmo de Grover com a classe ` ` Grover ` `, em primeiro lugar, precisamos especificar um oráculo para o circuito do algoritmo de Grover. No exemplo a seguir, utilizamos ` ` QuantumCircuit ` ` como o oráculo do algoritmo de Grover. No entanto, existem diversas outras classe que podemos usar como oráculo do algoritmo de Grover. Falamos sobre eles mais tarde neste tutorial."

#: ../../tutorials/algorithms/01_grover.ipynb:66
msgid "Note that the oracle for ``Grover`` mush be a *phase-flip* oracle. That is, it multiplies the amplitudes of the of \"good states\" by a factor of :math:`-1`. We explain later how to convert a *bit-flip* oracle to a phase-flip oracle."
msgstr "Observe que o oráculo para ` ` Grover ` ` precisa ser um oráculo * phase-flip *. Ou seja, multiplica as amplitudes dos \"good states\" por um fator de :math:` -1 `. Explicamos mais tarde como converter um oráculo * bit-flip * para um oráculo phase-flip."

#: ../../tutorials/algorithms/01_grover.ipynb:128
msgid "Then, we specify a backend and call the ``run`` method of ``Grover`` with a backend to execute the circuits. The returned result type is a ``GroverResult``."
msgstr "Em seguida, especificamos um backend e chamamos o método ``run`` de ``Grover`` com um backend para executar os circuitos. O tipo de resultado retornado é um ``GroverResult``."

#: ../../tutorials/algorithms/01_grover.ipynb:130
msgid "If the search was successful, the ``oracle_evaluation`` attribute of the result will be ``True``. In this case, the most sampled measurement, ``top_measurement``, is one of the \"good states\". Otherwise, ``oracle_evaluation`` will be False."
msgstr "Se a pesquisa foi bem-sucedida, o resulado do atributo ``oracle_evaluation`` será ``True``. Neste caso, a medição mais realizada, ``top_measurement``, é um dos \"bons estados\". Caso contrário, ``oracle_evaluation`` será False."

#: ../../tutorials/algorithms/01_grover.ipynb:184
msgid "In the example, the result of ``top_measurement`` is ``11`` which is one of \"good state\". Thus, we succeeded to find the answer by using ``Grover``."
msgstr "No exemplo, o resultado de ``top_measurement`` é ``11`` que é um de \"bom estado\". Assim, nós encontramos a resposta utilizando ``Grover``."

#: ../../tutorials/algorithms/01_grover.ipynb:196
msgid "Using the different types of classes as the oracle of ``Grover``"
msgstr "Utilizando os diferentes tipos de classes como oráculo de ``Grover``"

#: ../../tutorials/algorithms/01_grover.ipynb:198
msgid "In the above example, we used ``QuantumCircuit`` as the oracle of ``Grover``. However, we can also use ``qiskit.aqua.components.oracles.Oracle``, and ``qiskit.quantum_info.Statevector`` as oracles. All the following examples are when :math:`|11\\rangle` is \"good state\""
msgstr "No exemplo acima, utilizamos ``QuantumCircuit`` como o oráculo de ``Grover``. No entanto, podemos também utilizar ``qiskit.aqua.components.oracles.Oracle``, e ``qiskit.quantum_info.Statevector`` como oráculos. Todos os exemplos a seguir são quando :math:` | 11\\rângulo ` é \"bom estado\""

#: ../../tutorials/algorithms/01_grover.ipynb:252
msgid "Internally, the statevector get's mapped to a quantum circuit:"
msgstr "Internamente, o statevector fica mapeado para um circuito quântico:"

#: ../../tutorials/algorithms/01_grover.ipynb:300
msgid "The ``Oracle`` components in Qiskit Aqua allow for an easy construction of more complex oracles. The ``Oracle`` type has the interesting subclasses: \\* ``LogicalExpressionOracle``: for parsing logical expressions such as ``'~a | b'``. This is expecially useful for solving 3-SAT problems (see `Using Grover's Algorithm to Perform Quantum Search <https://github.com/qiskit-community/qiskit-community-tutorials/blob/master/optimization/grover.ipynb>`__ in Qiskit-community-tutorials). \\* ``TrutheTableOracle``: for converting binary truth tables to circuits"
msgstr "Os componentes ` ` Oracle ` ` ` no Qiskit Aqua permitem uma construção fácil de oráculos mais complexos. O tipo ` ` Oracle ` ` tem as subclasses interessantes: \\ * ` ` LogicalExpressionOracle ` `: para análise de expressões lógicas tais como ` ` '~ a | b' ` `. Isto é especialmente útil para solução de problemas de 3-SAT (ver ` Using Grover's Algorithm to Perform Quantum Search <https://github.com/qiskit-community/qiskit-community-tutorials/blob/master/optimization/grover.ipynb>` __ in Qiskit-community-tutoriais). \\ * ` ` TrutheTableOracle ` `: para conversão de tabelas de verdade binária em circuitos"

#: ../../tutorials/algorithms/01_grover.ipynb:303
msgid "Here we'll use the ``LogicalExpressionOracle`` for the simple example of finding the state :math:`|11\\rangle`, which corresponds to ``'a & b'``."
msgstr "Aqui vamos usar o ``LogicalExpressionOracle`` para o exemplo simples de encontrar o estado :math:`├11\\rangle`, que corresponde a ``'a & b'``."

#: ../../tutorials/algorithms/01_grover.ipynb:361
msgid "You can observe, that this oracle is actually implemented with three qubits instead of two!"
msgstr "Podem observar, que este oráculo é efectivamente implementado com três qubits em vez de dois!"

#: ../../tutorials/algorithms/01_grover.ipynb:363
msgid "That is because the ``LogicalExpressionOracle`` is not a phase-flip oracle (which flips the phase of the good state) but a bit-flip oracle. This means it flips the state of an auxiliary qubit if the other qubits satisfy the condition. For Grover's algorithm, however, we require a phase-flip oracle. To convert the bit-flip oracle to a phase-flip oracle we sandwhich the controlled-NOT by :math:`X` and :math:`H` gates, as you can see in the circuit above."
msgstr "Isso porque o ``LogicalExpressionOracle`` não é um oráculo inversor de fase (que inverte a fase do estado bom) mas um oráculo inversor de bit. Isso significa que ele inverte o estado de um qubit auxiliar se os outros qubits satisfazem a condição. Para o algoritmo de Grover, no entanto, exigimos um oráculo de inversão de fase. Para converter o oráculo de inversão de bits para um oráculo de inversão de fase nós envolvemos o NOT-controlado por portas :math:`X` e :math:`H`, como você pode ver no circuito acima."

#: ../../tutorials/algorithms/01_grover.ipynb:365
msgid "**Note:** This transformation from a bit-flip to a phase-flip oracle holds generally and you can use this to convert your oracle to the right representation."
msgstr "**Nota:** Esta transformação de um bit-flip para um oráculo phase-flip geralmente se mantém e você pode usar isso para converter seu oráculo para a representação correta."

#: ../../tutorials/algorithms/01_grover.ipynb:377
msgid "Amplitude amplification"
msgstr "Amplificação de amplitude"

#: ../../tutorials/algorithms/01_grover.ipynb:379
msgid "Grover's algorithm uses Hadamard gates to create the uniform superposition of all the states at the beginning of the Grover operator :math:`\\mathcal{Q}`. If some information on the good states is available, it might be useful to not start in a uniform superposition but only initialize specific states. This, generalized, version of Grover's algorithm is referred to *Amplitude Amplification*."
msgstr "O algoritmo do Grover usa portas Hadamard para criar a superposição uniforme de todos os estados no início do operador Grover :math:`\\mathcal{Q}`. Se estiver disponível alguma informação sobre os bons Estados, poderá ser útil não começar com uma superposição uniforme, mas apenas inicializar os estados específicos. Isto, generalizado a versão do algoritmo de Grover se refere à *Amplificação de Amplitude*."

#: ../../tutorials/algorithms/01_grover.ipynb:381
msgid "In Qiskit, the initial superposition state can easily be adjusted by setting the ``state_preparation`` argument."
msgstr "No Qiskit, o estado inicial de superposição pode facilmente ser ajustado definindo o argumento ``state_preparation``."

#: ../../tutorials/algorithms/01_grover.ipynb:384
msgid "State preparation"
msgstr "Preparação do Estado"

#: ../../tutorials/algorithms/01_grover.ipynb:386
msgid "A ``state_preparation`` argument is used to specify a quantum circuit that prepares a quantum state for the start point of the amplitude amplification. By default, a circuit with $H^{:nbsphinx-math:`\\otimes `n} $ is used to prepare uniform superposition (so it will be Grover's serach). The diffusion circuit of the amplitude amplification relrects ``state_preparation`` automatically."
msgstr "Um argumento ``state_preparation`` é usado para especificar um circuito quântico que prepara um estado quântico para o ponto inicial da amplificação de amplitude. Por padrão, um circuito com $H^{:nbsphinx-math:`\\otimes `n} $ é usado para preparar a superposição uniforme (de modo que será a busca de Grover). O circuito de difusão da amplificação de amplitude reflete o ``state_preparation`` automaticamente."

#: ../../tutorials/algorithms/01_grover.ipynb:495
msgid "Full flexibility"
msgstr "Flexibilidade total"

#: ../../tutorials/algorithms/01_grover.ipynb:497
msgid "For more advanced use, it is also possible to specify the entire Grover operator by setting the ``grover_operator`` argument. This might be useful if you know more efficient implementation for :math:`\\mathcal{Q}` than the default construction via zero reflection, oracle and state preparation."
msgstr "Para uso mais avançado, também é possível especificar o operador de Grover inteiro, configurando o argumento ` ` grover_operator ` ` `. Isso pode ser útil se você souber uma implementação mais eficiente para :math:` \\mathcal{Q}` do que a construção padrão via reflexão zero, oracle e preparação de estado."

#: ../../tutorials/algorithms/01_grover.ipynb:499
msgid "The ``qiskit.circuit.library.GroverOperator`` can be a good starting point and offers more options for an automated construction of the Grover operator. You can for instance \\* set the ``mcx_mode`` \\* ignore qubits in the zero reflection by setting ``reflection_qubits`` \\* explicitly exchange the :math:`\\mathcal{S_f}, \\mathcal{S_0}` and :math:`\\mathcal{A}` operations using the ``oracle``, ``zero_reflection`` and ``state_preparation`` arguments"
msgstr "O ``qiskit.circuit.library.GroverOperator`` pode ser um bom ponto de partida e oferece mais opções para uma construção automatizada do operador de Grover. Você pode, por exemplo, \\* definir o ``mcx_mode`` \\*, ignorar qubits na reflexão zero definindo o ``reflection_qubits``, \\* explicitamente trocar as operações :math:`\\mathcal{S_f}, \\mathcal{S_0}` e :math:`\\mathcal{A}` usando os argumentos ``oracle``, ``zero_reflection`` e ``state_preparation``"

#: ../../tutorials/algorithms/01_grover.ipynb:510
msgid "For instance, imagine the good state is a three qubit state :math:`|111\\rangle` but we used 2 additional qubits as auxiliary qubits."
msgstr "Por exemplo, imagine que o bom estado é um estado de três qubit `:math:` | 111\\rangle ` mas utilizamos 2 qubits adicionais como qubits auxiliares."

#: ../../tutorials/algorithms/01_grover.ipynb:574
msgid "Then, per default, the Grover operator implements the zero reflection on all five qubits."
msgstr "Em seguida, por padrão, o operador Grover implementa a reflexão zero em todos os cinco qubits."

#: ../../tutorials/algorithms/01_grover.ipynb:635
msgid "But we know that we only need to consider the first three:"
msgstr "Mas sabemos que só precisamos considerar os três primeiros:"

#: ../../tutorials/algorithms/01_grover.ipynb:697
msgid "Dive into other arguments of ``Grover``"
msgstr "Mergulhando em outros argumentos de ` ` Grover ` `"

#: ../../tutorials/algorithms/01_grover.ipynb:699
msgid "``Grover`` has arugments other than ``oracle`` and ``state_preparation``. We will explain them in this section."
msgstr "``Grover`` tem argumentos diferentes de ``oracle`` e ``state_preparation``. Explicaremos eles nesta seção."

#: ../../tutorials/algorithms/01_grover.ipynb:702
msgid "Specifying ``good_state``"
msgstr "Especificar ` ` good_state ` `"

#: ../../tutorials/algorithms/01_grover.ipynb:704
msgid "``good_state`` is used to check whether the measument result is correct or not internally. It can be a list of binary strings, a list of integer, ``Statevector``, and Callable. If the input is a list of bitstrings, each bitstrings in the list represents a good state. If the input is a list of integer, each integer represent the index of the good state to be :math:`|1\\rangle`. If it is a ``Statevector``, it represents a superposition of all good states."
msgstr "``good_state`` é usado para verificar se o resultado do medido está correto ou não internamente. Ele pode ser uma lista de strings binárias, uma lista de inteiros, ``Statevector`` e Callable. Se o input for uma lista de bitstrings, cada bitstrings na lista representa um estado bom. Se o valor de entrada for uma lista de inteiros, cada inteiro representa o índice do estado bom como :math:`|1\\rangle`. Se for um ``Statevector``, representa uma superposição de todos os estados bons."

#: ../../tutorials/algorithms/01_grover.ipynb:858
msgid "The number of ``iterations``"
msgstr "O número de ` ` iterações ` `"

#: ../../tutorials/algorithms/01_grover.ipynb:860
msgid "The number of repetition of applying the Grover operator is important to obtain the correct result with Grover's algorithm. The number of iteration can be set by the ``iteration`` argument of ``Grover``. The following inputs are supported: \\* an integer to specify a single power of the Grover operator that's applied \\* or a list of integers, in which all these different powers of the Grover operator are run consecutively and after each time we check if a correct solution has been found"
msgstr "O número de repetições da aplicação do operador de Grover é importante para obter o resultado correto com o algoritmo de Grover. O número de iterações pode ser configurado pelo argumento ``iteration``, do ``Grover``. As entradas a seguir são suportadas: \\* um inteiro para especificar uma única potência do operador de Grover que é aplicada \\ * ou uma lista de inteiros, na qual todas estas diferentes potências do operador de Grover são executadas consecutivamente e depois de cada vez verificamos se uma solução correta foi encontrada"

#: ../../tutorials/algorithms/01_grover.ipynb:862
msgid "Additionally there is the ``sample_from_iterations`` argument. When it is ``True``, instead of the specific power in ``iterations``, a random integer between 0 and the value in ``iteration`` is used as the power Grover's operator. This approach is useful when we don't even know the number of solution."
msgstr "Adicionalmente há o argumento ` ` sample_from_iterations ` `. Quando for ` ` True ` `, em vez de uma potência específica em ` ` iterações ` `, um inteiro aleatório entre 0 e o valor em ` ` interation` ` é usado como operador de força de Grover. Essa abordagem é útil quando nem sequer conhecemos o número de solução."

#: ../../tutorials/algorithms/01_grover.ipynb:864
msgid "For more details of the algorithm using ``sample_from_iterations``, see [4]."
msgstr "Para obter mais detalhes do algoritmo usando ``sample_from_iterations``, consulte [4]."

#: ../../tutorials/algorithms/01_grover.ipynb:868
msgid "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"
msgstr "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"

#: ../../tutorials/algorithms/01_grover.ipynb:918
msgid "When the number of solutions is known, we can also use a static method ``optimal_num_iterations`` to find the optimal number of iterations. Note that the output iterations is an approximate value. When the number of qubits is small, the output iterations may not be optimal."
msgstr "Quando o número de soluções é conhecido, podemos também utilizar um método estático ` ` optimal_num_iterations ` ` para encontrar o número ideal de iterações. Observe que as iterações de saída são um valor aproximado. Quando o número de qubits é pequeno, as iterações de saída podem não ser ótimas."

#: ../../tutorials/algorithms/01_grover.ipynb:961
msgid "Applying ``post_processing``"
msgstr "Aplicando ``post_processing``"

#: ../../tutorials/algorithms/01_grover.ipynb:963
msgid "We can apply an optional post processing to the top measurement for ease of readability. It can be used e.g. to convert from the bit-representation of the measurement ``[1, 0, 1]`` to a DIMACS CNF format ``[1, -2, 3]``."
msgstr "Podemos aplicar um processamento posterior opcional para a medição superior para facilitar a legibilidade. Pode ser utilizado, por exemplo, para converter a partir do bit-representação da medição \" ` [1, 0, 1] ` ` a um formato de DIMACS CNF ` ` [1, -2, 3] ` `."

