msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-16 16:08+0000\n"
"PO-Revision-Date: 2020-10-16 16:39\n"
"Last-Translator: \n"
"Language-Team: Portuguese, Brazilian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pt-BR\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/machine_learning/qgans_for_loading_random_distributions.po\n"
"X-Crowdin-File-ID: 9392\n"
"Language: pt_BR\n"

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:10
msgid "This page was generated from `tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb`__."
msgstr "Esta página foi gerada a partir de `tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb`__."

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:9
msgid "**qGANs for Loading Random Distributions**"
msgstr "**qGANs para o Carregamento de Distribuições Aleatórias**"

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:21
msgid "Introduction"
msgstr "Introdução"

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:23
msgid "Given :math:`k`-dimensional data samples, we employ a quantum Generative Adversarial Network (qGAN) to learn the data's underlying random distribution and to load it directly into a quantum state:"
msgstr "Dado amostras de dados :math:`k`-dimensionais nós empregamos uma Rede Adversária Generativa Quântica (qGAN) para aprender a distribuição aleatória subjacente aos dados e carregá-la diretamente em um estado quântico:"

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:25
msgid "\\big| g_{\\theta}\\rangle = \\sum_{j=0}^{2^n-1} \\sqrt{p_{\\theta}^{j}}\\big| j \\rangle\n\n"
msgstr "\\big| g_{\\theta}\\rangle = \\sum_{j=0}^{2^n-1} \\sqrt{p_{\\theta}^{j}}\\big| j \\rangle\n\n"

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:27
msgid "where :math:`p_{\\theta}^{j}` describe the occurrence probabilities of the basis states :math:`\\big| j\\rangle`."
msgstr "onde :math:`p_{\\theta}^{j}` descreve as probabilidades de ocorrência dos estados base :math:`\\big| j\\rangle`."

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:29
msgid "The aim of the qGAN training is to generate a state :math:`\\big| g_{\\theta}\\rangle` where :math:`p_{\\theta}^{j}`, for :math:`j\\in \\left\\{0, \\ldots, {2^n-1} \\right\\}`, describe a probability distribution that is close to the distribution underlying the training data :math:`X=\\left\\{x^0, \\ldots, x^{k-1} \\right\\}`."
msgstr "O objetivo do treinamento da qGAN é gerar um estado :math:`\\big| g_{\\theta}\\rangle` onde :math:`p_{\\theta}^{j}`, for :math:`j\\in \\left\\{0, \\ldots, {2^n-1} \\right\\}`, descreve uma distribuição de probabilidade que esteja próxima da distribuição subjacente aos dados de treinamento :math:`X=\\left\\{x^0, \\ldots, x^{k-1} \\right\\}`."

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:31
msgid "For further details please refer to Quantum Generative Adversarial Networks for Learning and Loading Random Distributions. Zoufal, Lucchi, Woerner. 2019."
msgstr "Para mais detalhes, consulte Quantum Generative Adversarial Networks for Learning and Loading Random Distributions. Zoufal, Lucchi, Woerner. 2019."

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:33
msgid "How to use a trained qGAN in an application, i.e., pricing of financial derivatives, is illustrated here: qGAN Option Pricing."
msgstr "Como usar uma qGAN treinada em uma aplicação, ou seja, na precificação dos derivativos financeiros, é ilustrado aqui: Precificando Opções com qGAN."

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:71
msgid "Load the Training Data"
msgstr "Carregando os Dados de Treinamento"

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:73
msgid "First, we need to load the :math:`k`-dimensional training data samples (here k=1). Next, the data resolution is set, i.e. the min/max data values and the number of qubits used to represent each data dimension."
msgstr "Primeiro, precisamos carregar as amostras de dados de treinamento :math:`k`-dimensionais (aqui k=1). Em seguida, a resolução dos dados é definida, isto é, os valores mín/máx dos dados e o número de qubits usados para representar cada dimensão dos dados."

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:108
msgid "Initialize the qGAN"
msgstr "Inicialize a qGAN"

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:110
msgid "The qGAN consists of a quantum generator :math:`G_{\\theta}`, a variational quantum circuit, and a classical discriminator :math:`D_{\\phi}`, a neural network. To implement the quantum generator, we choose a depth-\\ :math:`1` variational form that implements :math:`R_Y` rotations and :math:`CZ` gates which takes a uniform distribution as an input state. Notably, for :math:`k>1` the generator's parameters must be chosen carefully. For example, the circuit depth should be :math:`>1` because higher circuit depths enable the representation of more complex structures. The classical discriminator is given by a :math:`3`-layer neural network that applies linear transformations, leaky ReLU functions in the hidden layers and a sigmoid function in the output layer. Notably, the neural network is implemented with PyTorch. Please refer to https://pytorch.org/get-started/locally/ for PyTorch installation instructions. Here, both networks are updated with the ADAM optimization algorithm."
msgstr "A qGAN é constituída de um gerador quântico :math:`G_{\\theta}`, um circuito quântico variacional, e um discriminador clássico :math:`D_{\\phi}`, uma rede neural. Para implementar o gerador quântico, escolhemos uma forma variacional de profundidade :math:`1` que implementa rotações :math:`R_Y` e portas :math:`CZ` que recebe uma distribuição uniforme como um estado de entrada. Notadamente, para :math:`k>1` os parâmetros do gerador devem ser escolhidos cuidadosamente. Por exemplo, a profundidade do circuito deve ser :math:`>1` porque profundidades de circuito maiores permitem a representação de estruturas mais complexas. O discriminador clássico é dado por uma rede neural de :math:`3` camadas que aplica transformações lineares, funções de ReLU vazado (leaky ReLU) nas camadas ocultas e uma função de sigmóide na camada de saída. Notavelmente, a rede neural é implementada com PyTorch. Por favor, consulte https://pytorch.org/get-started/locally/ para instruções de instalação do PyTorch. Aqui, ambas as redes são atualizadas com o algoritmo de otimização ADAM."

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:171
msgid "Run the qGAN Training"
msgstr "Executar o Treinamento da qGAN"

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:173
msgid "During the training the discriminator's and the generator's parameters are updated alternately w.r.t the following loss functions:"
msgstr "Durante o treinamento os parâmetros do discriminador e do gerador são atualizados alternadamente com respeito às seguintes funções de perda:"

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:175
msgid "L_G\\left(\\phi, \\theta\\right) = -\\frac{1}{m}\\sum\\limits_{l=1}^{m}\\left[\\log\\left(D_{\\phi}\\left(g^{l}\\right)\\right)\\right]\n\n"
"and"
msgstr "L_G\\left(\\phi, \\theta\\right) = -\\frac{1}{m}\\sum\\limits_{l=1}^{m}\\left[\\log\\left(D_{\\phi}\\left(g^{l}\\right)\\right)\\right]\n\n"
"e"

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:179
msgid "    L_D\\left(\\phi, \\theta\\right) =\n"
"      \\frac{1}{m}\\sum\\limits_{l=1}^{m}\\left[\\log D_{\\phi}\\left(x^{l}\\right) + \\log\\left(1-D_{\\phi}\\left(g^{l}\\right)\\right)\\right],\n\n"
"with :math:`m` denoting the batch size and :math:`g^l` describing the data samples generated by the quantum generator."
msgstr "    L_D\\left(\\phi, \\theta\\right) =\n"
"      \\frac{1}{m}\\sum\\limits_{l=1}^{m}\\left[\\log D_{\\phi}\\left(x^{l}\\right) + \\log\\left(1-D_{\\phi}\\left(g^{l}\\right)\\right)\\right],\n\n"
"com :math:`m` denotando o tamanho do lote (batch size) e :math:`g^l` descrevendo as amostras de dados geradas pelo gerador quântico."

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:186
msgid "Please note that the training will take a while (:math:`\\sim 20` min)."
msgstr "Por favor, note que o treinamento levará um tempo (:math:`\\sim 20` min)."

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:238
msgid "Training Progress & Outcome"
msgstr "Progresso do Treinamento & Resultados"

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:240
msgid "Now, we plot the evolution of the generator's and the discriminator's loss functions during the training as well as the progress in the relative entropy between the trained and the target distribution. Finally, we also compare the cumulative distribution function (CDF) of the trained distribution to the CDF of the target distribution."
msgstr "Agora, plotamos a evolução das funções de perda do gerador e do discriminador durante o treinamento, bem como o progresso na entropia relativa entre a distribuição treinada e a alvo. Por fim, também comparamos a função de distribuição cumulativa (CDF) da distribuição treinada com a CDF da distribuição alvo."

