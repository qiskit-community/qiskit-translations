msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-14 09:35+0000\n"
"PO-Revision-Date: 2020-09-08 18:27\n"
"Last-Translator: \n"
"Language-Team: Portuguese, Brazilian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pt-BR\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/6_repetition_code.po\n"
"X-Crowdin-File-ID: 9142\n"
"Language: pt_BR\n"

#: ../../tutorials/noise/6_repetition_code.ipynb:10
msgid "This page was generated from `tutorials/noise/6_repetition_code.ipynb`__."
msgstr "Esta página foi gerada, a partir do `tutorials/noise/6_repetition_code.ipynb`__."

#: ../../tutorials/noise/6_repetition_code.ipynb:9
msgid "Repetition Codes"
msgstr "Códigos De Repetição"

#: ../../tutorials/noise/6_repetition_code.ipynb:21
msgid "Introduction"
msgstr "Introdução"

#: ../../tutorials/noise/6_repetition_code.ipynb:23
msgid "In quantum error correction we take many noisy qubits (which we call *physical qubits*) and use them to store a smaller number of *logical qubits*. The error correction procedure is designed to detect and correct for the effects of noise. This makes the logical qubits much less noisy and more reliable than the physical ones from which they are built."
msgstr "Na correção de erros quânticos pegamos muitos qubits ruidosos (que chamamos de *qubits físicos*) e os utilizamos para armazenar um número menor de *qubits lógicos*. O procedimento de correção de erros é projetado para detectar e corrigir os efeitos do ruído. Isto faz com que os qubits lógicos sejam muito menos ruidosos e mais confiáveis, do que os físicos, dos quais são construídos."

#: ../../tutorials/noise/6_repetition_code.ipynb:25
msgid "The repetition code is a simple example of quantum error correction, in which a logical *bit* is stored rather than a logical *qubit*. A given instance of the repetition code is defined by two numbers, which we call :math:`d` and :math:`T`."
msgstr "O código de repetição é um exemplo simples de correção de erro quântico, no qual um *bit* lógico é armazenado em vez de um *qubit* lógico. Uma dada instância do código de repetição é definida por dois números, os quais chamamos de :math:`d` e :math:`T`."

#: ../../tutorials/noise/6_repetition_code.ipynb:27
msgid "The :math:`d` parameter determines how many physical qubits are used. The actual information about the logical bit is stored in :math:`d` qubits (which we'll call *code qubits*). The encoding is done in a very simple way: to encode a ``0``, all these qubits are set in the state :math:`|0\\rangle`, to encode a ``1`` they are set to :math:`|1\\rangle`. To readout the value, you can just look at any qubit. To read it out in a way that protects against single qubit errors, you can read out all the qubits and take a majority vote."
msgstr "O parâmetro :math:`d` determina quantos qubits físicos são usados. As informações reais sobre o bit lógico são armazenadas em :math:`d` qubits (que chamaremos de *code qubits*). A codificação é feita de uma forma muito simples: para codificar um ``0``, todos estes qubits são configurados no estado :math:`|0\\rangle`, para codificar um ``1`` eles são configurados para :math:`|1\\rangle`. Para ler o valor, você pode simplesmente olhar para qualquer qubit. Para lê-lo de uma maneira que o proteja contra erros em um único qubit, você pode ler todos os qubits e escolher o valor que mais aparece."

#: ../../tutorials/noise/6_repetition_code.ipynb:30
msgid "It is not only at readout that we can extract useful information that will help us correct errors. We can also extract information while the logical bit sits idle, or even while it is involved in computation."
msgstr "Não é somente na leitura que podemos extrair informações úteis, que nos ajudarão a corrigir erros. Também podemos extrair informações, enquanto o bit lógico fica ocioso, ou mesmo, enquanto ele está envolvido em uma computação."

#: ../../tutorials/noise/6_repetition_code.ipynb:32
msgid "Since this is an exercise in quantum error correction, we will do this in a way that would also work for logical *qubits*. Specifically, our method of extracting information about errors must not extract any information regarding the stored logical information. In the quantum case, this is required so that we do not disturb superposition states of the stored qubits."
msgstr "Uma vez que este é um exercício de correção de erros quânticos, faremos isto de uma maneira que também funcionaria para os *qubits* lógicos. Especificamente, nosso método de extração de informações sobre erros não deve extrair nenhuma informação, a respeito das informações lógicas armazenadas. No caso quântico, isto é necessário, para que não perturbemos estados de superposição dos qubits armazenados."

#: ../../tutorials/noise/6_repetition_code.ipynb:34
msgid "We will extract information over :math:`T` rounds of *syndrome measurements*. For the repetition code, these are based on the fact that all code qubits should be in the same state (all :math:`|0\\rangle` or all :math:`|1\\rangle`). Any departure from this is therefore a signature of error. Specifically, we imagine our :math:`d` code qubits sitting along a line. We will then perform a measurement on each pair of neighboring code qubits. This will tell us whether they are the same or different, without extracting any information on what their values are."
msgstr "Extrairemos informações ao longo de :math:`T` rodadas de *medições da síndrome*. Para o código de repetição, estes baseiam-se no fato de que todos os qubits de código devem estar no mesmo estado (todos :math:`|0\\rangle` ou todos :math:`|1\\rangle`). Qualquer desvio disto é, portanto, um sinal de erro. Especificamente, imaginamos que nossos :math:`d` qubits de código estão posicionados ao longo de uma linha. Em seguida, realizamos uma medição em cada par de qubits de código vizinhos. Isto nos dirá se eles são iguais ou diferentes, sem extrair nenhuma informação sobre quais são os seus valores."

#: ../../tutorials/noise/6_repetition_code.ipynb:37
msgid "The implementation of these measurements requires :math:`d-1` additional qubits, which we will call *link qubits* for the repetition code. By pefforming two CNOTs between the pair of code qubits and a corresponding link qubit, the required information (and only the required information) is placed on the link qubit and can then be measured."
msgstr "A implementação destas medições requer :math:`d-1` qubits adicionais, que chamaremos *link qubits* para o código de repetição. Ao executar dois CNOTs entre o par de code qubits e um link qubit correspondente, as informações necessárias (e apenas as informações necessárias) são colocadas no link qubit e podem, então, ser medidas."

#: ../../tutorials/noise/6_repetition_code.ipynb:95
msgid "Here we provide tools for creating and testing repetition codes. The first thing we need to do is import them."
msgstr "Aqui, fornecemos ferramentas para a criação e o teste de códigos de repetição. A primeira coisa que precisamos fazer é importá-las."

#: ../../tutorials/noise/6_repetition_code.ipynb:119
msgid "Creating a repetition code"
msgstr "Criando um código de repetição"

#: ../../tutorials/noise/6_repetition_code.ipynb:121
msgid "The ``repetition_code`` class creates a code for given values of :math:`d` and :math:`T`."
msgstr "A classe ``repetition_code`` cria um código para os valores indicados de :math:`d` e :math:`T`."

#: ../../tutorials/noise/6_repetition_code.ipynb:144
msgid "With this we can inspect various properties of the code, such as the names of the qubit registers used for the code and ancilla qubits."
msgstr "Com isto, podemos inspecionar várias propriedades do código, como os nomes dos registradores de qubits utilizados para o código e para os qubits auxiliares."

#: ../../tutorials/noise/6_repetition_code.ipynb:185
msgid "These registers are also attributes of the ``repetition_code`` object."
msgstr "Estes registradores são também atributos do objeto ``repetition_code``."

#: ../../tutorials/noise/6_repetition_code.ipynb:226
msgid "You can also access the quantum circuits that implement the code. Two of these are produced: one for each of the two possible logical bit values."
msgstr "Você também pode acessar os circuitos quânticos que implementam o código. Dois destes são produzidos: um para cada um dos dois valores de bits lógicos possíveis."

#: ../../tutorials/noise/6_repetition_code.ipynb:479
msgid "Building a custom repetition code"
msgstr "Gerando um código de repetição personalizado"

#: ../../tutorials/noise/6_repetition_code.ipynb:481
msgid "You can also implement measurement rounds and logical ``X`` gates yourself. For example, let's set up a code with no syndrome measurement rounds."
msgstr "Você também pode implementar rodadas de medição e portas ``X`` lógicas. Por exemplo, vamos configurar um código sem rodadas de medição da síndrome."

#: ../../tutorials/noise/6_repetition_code.ipynb:502
msgid "This does nothing but set up two circuits for the two logical encoded states. There are no syndrome measurement rounds, and no final readout."
msgstr "Isto não faz nada, além de configurar dois circuitos para os dois estados codificados lógicos. Não há rodadas de medição da síndrome e nenhuma leitura final."

#: ../../tutorials/noise/6_repetition_code.ipynb:601
msgid "We can add a round using the ``syndrome_measurement()`` method."
msgstr "Podemos adicionar uma rodada usando o método ``syndrome_measurement()``."

#: ../../tutorials/noise/6_repetition_code.ipynb:712
msgid "A logical ``X`` operation can be added using the ``x()`` method."
msgstr "Uma operação ``X`` lógica pode ser adicionada utilizando o método ``x()``."

#: ../../tutorials/noise/6_repetition_code.ipynb:823
msgid "This also has a ``logs`` kwarg, which is a list of the circuits for which ``X`` is applied. This is ``['0','1']`` by default."
msgstr "Este também possui um kwarg ``logs``, que é uma lista dos circuitos para os quais ``X`` é aplicado. Ele é ``['0','1']`` por padrão."

#: ../../tutorials/noise/6_repetition_code.ipynb:834
msgid "Final readout is then done with the ``readout()`` method."
msgstr "A leitura final é, então, feita com o método ``readout()``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1012
msgid "Running a repetition code"
msgstr "Executando um código de repetição"

#: ../../tutorials/noise/6_repetition_code.ipynb:1014
msgid "The code object produces the circuits required for the code. The user can then run them using any method they prefer, allowing full control over compilation, backends, noise models and so on."
msgstr "O objeto de código produz os circuitos necessários para o código. O usuário pode, então, executá-los usando qualquer método que preferir, permitindo o controle total sobre compilação, backends, modelos de ruído e, assim por diante."

#: ../../tutorials/noise/6_repetition_code.ipynb:1016
msgid "For example, here we run them without noise on the ``qasm_simulator``."
msgstr "Por exemplo, aqui, os executamos sem ruído no ``qasm_simulator``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1076
msgid "Here the strings from right to left represent the outputs of the syndrome measurement rounds, followed by the final measurement of the code qubits."
msgstr "Aqui, as strings da direita para a esquerda representam as saídas das rodadas de medição da síndrome, seguidas da medição final dos qubits de código."

#: ../../tutorials/noise/6_repetition_code.ipynb:1078
msgid "These results need to be rewritten in a different form in order to be decoded. To do this we can use the ``process_results`` method of the code object."
msgstr "Estes resultados precisam ser reescritos de uma forma diferente para serem decodificados. Para fazer isto, podemos utilizar o método ``process_results`` do objeto."

#: ../../tutorials/noise/6_repetition_code.ipynb:1119
msgid "The result is a dictionary whose keys are bit strings that represent outputs of the circuit, and the values represent the number of shots for which this output occurred."
msgstr "O resultado é um dicionário, cujas chaves são strings de bits que representam saídas do circuito, e os valores representam o número de execuções (shots) para os quais esta saída ocorreu."

#: ../../tutorials/noise/6_repetition_code.ipynb:1121
msgid "The strings are not the direct output from the circuits. They have been processed to take the form that helps us correct errors. Here's a short guided tour."
msgstr "As strings não são a saída direta dos circuitos. Elas foram processados para assumir a forma que nos ajuda a corrigir erros. Aqui está uma curta visita guiada."

#: ../../tutorials/noise/6_repetition_code.ipynb:1123
msgid "The ``0 0`` to the far left for the logical ``0`` result, and the ``1 1`` to the far left of the logical ``1``, are the logical readout. Any code qubit could be used for this readout, since they should (without errors) all be equal. So we could have just one result here, for one arbitrarily chosen code qubit. Or we could have :math:`d`, one for each qubit. Instead we have two, from the two qubits at either end of the line. This is because it works best with the decoder (which we'll use later). In the absence of errors, these two values will always be equal."
msgstr "Os ``0 0`` mais à esquerda para o resultado ``0`` lógico, e o ``1 1`` mais à esquerda do ``1`` lógico são a leitura lógica. Qualquer qubit de código poderia ser usado para esta leitura, uma vez que eles devem (sem erros) ser todos iguais. Assim, poderíamos ter apenas um resultado, aqui, para um qubit de código arbitrariamente escolhido. Ou poderíamos ter :math:`d`, um para cada qubit. Em vez disto, temos dois dos dois qubits em qualquer extremidade da linha. Isto, porque funciona melhor com o decodificador (que usaremos depois). Na ausência de erros, esses dois valores serão sempre iguais."

#: ../../tutorials/noise/6_repetition_code.ipynb:1126
msgid "The following ``0000`` is the :math:`d-1` results of the syndrome measurements for the first round.A ``0`` implies that the corresponding pair of qubits where the same, and ``1`` implies different. There are :math:`d-1` results because the line of :math:`d` code qubits has :math:`d-1` possible neighboring pairs. In the absence of errors, they will all be ``0``."
msgstr "Os ``0000`` seguintes são os :math:`d-1` resultados das medições da síndrome para a primeira rodada. Um ``0`` implica que o par correspondente de qubits era igual, e ``1`` implica que era diferente. Existem :math:`d-1` resultados porque a linha de :math:`d` qubits de código tem :math:`d-1` possíveis pares vizinhos. Na ausência de erros, todos serão ``0``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1128
msgid "The ``0000`` that follows that is the syndrome change between the first and second rounds. It is therefore the bitwise ``OR`` of the syndrome measurement results from the second round with those from the first. In the absence of errors, they will all be ``0``."
msgstr "O ``0000`` que segue, a isto, é a mudança da síndrome entre a primeira e a segunda rodadas. É, portanto, o ``OR`` bitwise dos resultados da medição da síndrome da segunda rodada com aqueles da primeira. Na ausência de erros, todos serão ``0``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1130
msgid "Subsequent blocks follow the same formula, though the last requires some comment. This is not measured using the standard method (with a link qubit). Instead it is calculated from the final readout measurement of all code qubits. Again it is presented as a syndrome change, and will be all ``0`` in the absence of errors. This is the :math:`T+1`-th block of syndrome measurements since, as it is not done in the same way as the others, it is not counted among the :math:`T` syndrome measurement rounds."
msgstr "Os blocos subsequentes seguem a mesma fórmula, embora o último exija algum comentário. Este não é medido usando o método padrão (com um link qubit). Em vez disto, é calculado, a partir da medição da leitura final de todos os qubits de código. Novamente, ela é apresentada como uma mudança da síndrome, e serão todos ``0`` na ausência de erros. Este é o :math:`T+1`-ésimo bloco de medições da síndrome, uma vez que, como não é feito da mesma forma que os outros, não é contado entre as :math:`T` rodadas de medição da síndrome."

#: ../../tutorials/noise/6_repetition_code.ipynb:1133
msgid "**Example 1:** ``0 0  0110 0000 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``0``. The syndrome shows that (most likely) the middle code qubit was flipped by an error before the first measurement round. This causes it to disagree with both neighboring code qubits for the rest of the circuit. This is shown by the syndrome in the first round, but the blocks for subsequent rounds do not report it as it no longer represents a change. Other sets of errors could also have caused this syndrome, but they would need to be more complex and so presumably less likely."
msgstr "**Exemplo 1:** ``0 0  0110 0000 0000`` representaria um código de repetição com :math:`d=5` e :math:`T=2`, tendo um ``0`` codificado. A síndrome mostra que (muito provavelmente) o qubit de código do meio foi invertido por conta de um erro, antes da primeira rodada de medição. Isto faz com que ele discorde de ambos os qubits de código vizinhos, durante o restante do circuito. Isto é mostrado pela síndrome na primeira rodada, mas os blocos para rodadas subsequentes não o reportam, já que ele não representa mais uma mudança. Outros conjuntos de erros, também poderiam ter causado esta síndrome, mas precisariam ser mais complexos e, por consequência, presumivelmente, menos prováveis."

#: ../../tutorials/noise/6_repetition_code.ipynb:1136
msgid "**Example 2:** ``0 0  0010 0010 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``0``. Here one of the syndrome measurements reported a difference between two code qubits in the first round, leading to a ``1``. The next round did not see the same effect, and so resulted in a ``0``. However, since this disagreed with the previous result for the same syndrome measurement, and since we track syndrome changes, this change results in another ``1``. Subsequent rounds also do not detect anything, but this no longer represents a change and hence results in a ``0`` in the same position. Most likely the measurement result leading to the first ``1`` was an error."
msgstr "**Exemplo 2:** ``0 0  0010 0010 0000`` representaria um código de repetição com :math:` d=5 ` e :math:` T=2 `, tendo um ``0`` codificado. Aqui, uma das medições da síndrome relatou uma diferença entre dois qubits de código na primeira rodada, levando a um ``1``. A rodada seguinte não viu o mesmo efeito e, assim, resultou em um ``0``. No entanto, uma vez que isto discorda do resultado anterior para a mesma medição da síndrome e, já que acompanhamos alterações da síndrome, esta alteração resulta em outro ``1``. As rodadas subsequentes também não detectam nada, mas isto não representa mais uma mudança e, portanto, resulta em um ``0`` na mesma posição. Muito, provavelmente, o resultado da medição relacionado ao primeiro ``1`` foi um erro."

#: ../../tutorials/noise/6_repetition_code.ipynb:1139
msgid "**Example 3:** ``0 1  0000 0001 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``1``. A code qubit on the end of the line is flipped before the second round of syndrome measurements. This is detected by only a single syndrome measurement, because it is on the end of the line. For the same reason, it also disturbs one of the logical readouts."
msgstr "**Exemplo 3:** ``0 1  0000 0001 0000`` representaria um código de repetição com :math:`d=5` e :math:`T=2`, com um ``1`` codificado. Um qubit de código no final da linha é invertido, antes da segunda rodada de medições da síndrome. Isto é detectado por, apenas, uma única medição da síndrome, pois ele está no fim da linha. Pela mesma razão, isto, também, perturba uma das leituras lógicas."

#: ../../tutorials/noise/6_repetition_code.ipynb:1141
msgid "Note that in all these examples, a single error causes exactly two characters in the string to change from the value it would have with no errors. This is, in fact, the reason why the logical output consists of both endpoints. It is a property that will be used by the decoder."
msgstr "Note que em todos estes exemplos, um único erro faz com que exatamente dois caracteres na string mudem do valor, que teriam sem erros. Isto é, na verdade, a razão pela qual a saída lógica consiste em ambos os pontos finais. É uma propriedade que será utilizada pelo decodificador."

#: ../../tutorials/noise/6_repetition_code.ipynb:1152
msgid "To see the effects of noise, we need to specify a noise model. For example, let's set up a simple noise model with gate and measurement errors."
msgstr "Para ver os efeitos do ruído, precisamos especificar um modelo de ruído. Por exemplo, vamos configurar um modelo de ruído simples com erros de porta e de medição."

#: ../../tutorials/noise/6_repetition_code.ipynb:1197
msgid "This can then be run to generate noisy results. Let's make a quick function to do this, and then run it."
msgstr "Isto pode, então, ser executado para gerar resultados ruidosos. Vamos criar uma função rápida para fazer isto e, depois executá-la."

#: ../../tutorials/noise/6_repetition_code.ipynb:1457
msgid "Here the non-noisy results are the most likely. The rest of the samples are distributed among other possibilities with non-trivial syndromes."
msgstr "Aqui, os resultados sem ruído são os mais prováveis. O restante das amostras estão distribuídas entre outras possibilidades com síndromes não triviais."

#: ../../tutorials/noise/6_repetition_code.ipynb:1469
msgid "Decoding a repetition code"
msgstr "Decodificando um código de repetição"

#: ../../tutorials/noise/6_repetition_code.ipynb:1471
msgid "Noisy results can change the logical value at readout, and so affect our ability to read out the logical qubit. This can be mitigated by looking at the syndrome values. These can tell us whether or not the logical values are most likely to have changed, and so allow us to correct for the errors. The process of analyzing the syndrome to correct for the errors is called 'decoding'. We do this by building a decoding object for our code."
msgstr "Resultados com ruído podem alterar o valor lógico na leitura e, assim, afetar nossa capacidade de ler o qubit lógico. Isto pode ser mitigado olhando para os valores da síndrome. Estes podem dizer-nos se os valores lógicos são ou não mais propensos a ter mudado e, assim, permitem-nos corrigir os erros. O processo de análise da síndrome para corrigir os erros é chamado de 'decodificação'. Fazemos isto construindo um objeto decodificador para o nosso código."

#: ../../tutorials/noise/6_repetition_code.ipynb:1492
msgid "This analyzes the code by seeing how different kinds of error change the output. With this information, along with a decoding algorithm, we can determine what the logical value is most likely to have been."
msgstr "Isto analisa o código ao ver como diferentes tipos de erro alteram a saída. Com estas informações, juntamente com um algoritmo de decodificação, podemos determinar qual o valor lógico mais provável de ter sido."

#: ../../tutorials/noise/6_repetition_code.ipynb:1494
msgid "For example, let's use the 'matching' algorithm to decode, which is based on minimum weight perfect matching. This takes specific output strings as input. We'll give it the simple example string ``'1 0  001 100 100'``, for a logical ``1`` that has suffered two errors."
msgstr "Por exemplo, vamos usar o algoritmo de  'matching' (correspondência) para decodificar, que é baseado na correspondência perfeita de peso mínimo. Ele recebe strings de saída específicas como entrada. Daremos para ele a simples string de exemplo ``'1 0  001 100 100'``, para um ``1`` lógico que tenha sofrido dois erros."

#: ../../tutorials/noise/6_repetition_code.ipynb:1535
msgid "The output is what the logical part should have been. As you can see, the decoder correctly determined that the readout should have been of a logical ``1``."
msgstr "A saída é o que a parte lógica deveria ter sido. Como se pode ver, o decodificador determinou corretamente que a leitura deveria ter sido de um ``1`` lógico."

#: ../../tutorials/noise/6_repetition_code.ipynb:1546
msgid "When we take many samples, we can determine the probability with which the decoder is incorrect. This should decrease exponentially as the code size is increased, since the configurations of noise that fool the decoder become less likely. The probability of a logical error is calculated using the ``logical_prob()`` method. This runs matching by default, but other algorithms can be specified by the ``algorithm`` kwarg."
msgstr "Quando pegamos muitas amostras, podemos determinar a probabilidade com a qual o decodificador está incorreto. Isto deve diminuir, exponencialmente, à medida que o tamanho do código é aumentado, uma vez que as configurações de ruído que enganam o decodificador tornam-se menos prováveis. A probabilidade de um erro lógico é calculada utilizando o método ``logical_prob()``. Isto executa a correspondência por padrão, mas outros algoritmos podem ser especificados pelo kwarg ``algorithm``."

