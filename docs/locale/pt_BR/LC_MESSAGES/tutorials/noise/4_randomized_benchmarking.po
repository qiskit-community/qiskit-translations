msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-10 19:20+0000\n"
"PO-Revision-Date: 2020-09-08 15:27\n"
"Last-Translator: \n"
"Language-Team: Portuguese, Brazilian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pt-BR\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/4_randomized_benchmarking.po\n"
"X-Crowdin-File-ID: 9138\n"
"Language: pt_BR\n"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:10
msgid "This page was generated from `tutorials/noise/4_randomized_benchmarking.ipynb`__."
msgstr "Esta página foi gerada a partir do `tutorials/noise/4_randomized_benchmarking.ipynb`__."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:9
msgid "Randomized Benchmarking"
msgstr "Benchmarking Randomizado"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:12
msgid "Introduction"
msgstr "Introdução"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:14
msgid "**Randomization benchmarking (RB)** is a well-known technique to measure average gate performance by running sequences of random Clifford gates that should return the qubits to the initial state. Qiskit Ignis has tools to generate one- and two-qubit Clifford gate sequences simultaneously."
msgstr "**benchmarking de randomização (RB)** é uma técnica bem conhecida para medir o desempenho médio do portão, executando sequências de portões Clifford aleatórios que devem devolver os qubits para o estado inicial. O Qiskit Ignis possui ferramentas para gerar sequências de portão Clifford de um e dois qubit simultaneamente."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:16
msgid "This notebook gives an example for how to use the ``ignis.verification.randomized_benchmarking`` module. This particular example shows how to run 2-qubit randomized benchmarking (RB) simultaneous with 1-qubit RB. There are also examples on how to use some of the companion functions for predicting RB fidelity."
msgstr "Este notebook dá um exemplo de como usar o módulo ``ignis.verification.randomized_benchmarking``. Este exemplo específico mostra como executar o benchmarking randomizado 2-qubit (RB) simultâneo com o 1-qubit RB. Há também exemplos sobre como usar algumas funções complementares para prever a fidelidade RB."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:49
msgid "1) Select the Parameters of the RB Run"
msgstr "1) Selecione os Parâmetros da Execução do RB"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:51
msgid "First, wee need to choose the following parameters:"
msgstr "Primeiro, precisamos escolher os seguintes parâmetros:"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:53
msgid "**nseeds:** The number of seeds. For each seed you will get a separate list of output circuits in rb\\_circs."
msgstr "**nseeds:** O número de sequênias. Para cada sequência você receberá uma lista separada de circuitos de saída em rb\\_circs."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:54
msgid "**length\\_vector:** The length vector of Clifford lengths. Must be in ascending order. RB sequences of increasing length grow on top of the previous sequences."
msgstr "**length\\_vector:** O vetor de comprimento dos comprimentos Clifford. Deve estar em ordem crescente. Sequências de RB crescentes incrementam sobre as sequências anteriores."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:55
msgid "**rb\\_pattern:** A list of the form [[i,j],[k],...] which will make simultaneous RB sequences where Qi,Qj are a 2-qubit RB sequence and Qk is a 1-qubit sequence, etc. The number of qubits is the sum of the entries. For 'regular' RB the qubit\\_pattern is just [[0]],[[0,1]]."
msgstr "**rb\\_pattern:** Uma lista da forma [[i,j],[k],...] que fará sequências de RB simultâneas onde Qi,Qj são uma sequência RB de 2 qubits e Qk é uma sequência de 1 qubit, etc. O número de qubits é a soma das entradas. Para um RB 'regular' o qubit\\_pattern é apenas [[0]],[[0,1]]."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:56
msgid "**length\\_multiplier:** If this is an array it scales each rb\\_sequence by the multiplier."
msgstr "**length\\_multiplier:** Se este for uma matriz, ele escala cada rb\\_sequence pelo multiplicador."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:57
msgid "**seed\\_offset:** What to start the seeds at (e.g. if we want to add more seeds later)."
msgstr "**seed\\_offset:** O que inicia as sequências (por exemplo, se quisermos adicionar mais sequências depois)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:58
msgid "**align\\_cliffs:** If true adds a barrier across all qubits in rb\\_pattern after each set of cliffords."
msgstr "** align\\_cliffs:** Se verdadeiro, adiciona uma barreira em todos os qubits do rb\\_pattern após cada conjunto de cliffords."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:60
msgid "In this example we have 3 qubits Q0,Q1,Q2. We are running 2Q RB (on qubits Q0,Q2) and 1Q RB (on qubit Q1) simultaneously, where there are twice as many 1Q Clifford gates."
msgstr "Neste exemplo, temos 3 qubits Q0,Q1,Q2. Estamos executando simultaneamente o 2Q RB (no qubits Q0,Q2) e 1Q RB (no qubit Q1), onde há o dobro de portões Clifford 1Q."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:92
msgid "2) Generate the RB sequences"
msgstr "2) Gere as sequências de RB"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:94
msgid "We generate RB sequences. We start with a small example (so it doesn't take too long to run)."
msgstr "Geramos as sequências de RB. Começamos com um pequeno exemplo (de modo que não leve muito tempo para executar)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:96
msgid "In order to generate the RB sequences **rb\\_circs**, which is a list of lists of quantum circuits, we run the function ``rb.randomized_benchmarking_seq``."
msgstr "A fim de gerar as sequências de RB **rb\\_circs**, que é uma lista de listas de circuitos quânticos, executamos a função``rb.randomized_benchmarking_seq``."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:98
msgid "This function returns:"
msgstr "Esta função retorna:"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:100
msgid "**rb\\_circs:** A list of lists of circuits for the rb sequences (separate list for each seed)."
msgstr "**rb\\_circs:** Uma lista de listas de circuitos para as sequências rb (lista separada para cada sequência)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:101
msgid "**xdata:** The Clifford lengths (with multiplier if applicable)."
msgstr "**xdata:** Os comprimentos Clifford (com multiplicador, se aplicável)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:127
msgid "As an example, we print the circuit corresponding to the first RB sequence:"
msgstr "Como exemplo, imprimimos o circuito correspondente à primeira sequência de RB:"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:218
msgid "Look at the Unitary for 1 Circuit"
msgstr "Veja a Unitária para 1 Circuito"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:229
msgid "The Unitary representing each RB circuit should be the identity (with a global phase), since we multiply random Clifford elements, including a computed reversal gate. We simulate this using an Aer unitary simulator."
msgstr "O Unitário representando cada circuito RB deve ser a identidade (com uma fase global), já que multiplicamos elementos Clifford aleatórios, incluindo um portão de reversão computada. Simulamos isso usando um simulador de unidade Aer."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:301
msgid "Define the noise model"
msgstr "Definir o modelo de ruído"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:312
msgid "We define a noise model for the simulator. To simulate decay, we add depolarizing error probabilities to the CNOT and U gates."
msgstr "Definimos um modelo de ruído para o simulador. Para simular o decaimento, adicionamos probabilidades de erro de despolarizamento às portas CNOT e U."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:339
msgid "3) Execute the RB sequences on Aer simulator"
msgstr "3) Execute as sequências de RB no simulador Aer"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:341
msgid "We can execute the RB sequences either using a Qiskit Aer Simulator (with some noise model) or using an IBMQ provider, and obtain a list of results, ``result_list``."
msgstr "Podemos executar as sequências de RB usando um Qiskit Aer Simulador (com algum modelo de ruído) ou usando um provedor IBMQ, e obter uma lista de resultados, ``result_list``."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:415
msgid "4) Fit the RB results and calculate the gate fidelity"
msgstr "4) Ajuste os resultados do RB e calcule a fidelidade da porta"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:418
msgid "Get statistics about the survival probabilities"
msgstr "Obter estatísticas sobre as probabilidades de sobrevivência"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:420
msgid "The results in **result\\_list** should fit to an exponentially decaying function :math:`A \\cdot \\alpha ^ m + B`, where :math:`m` is the Clifford length."
msgstr "Os resultados em **result\\_list** devem ajustar-se a uma função exponencialmente decrescente :math:`A \\cdot \\alpha ^ m + B`, na qual :math:`m` é o comprimento Clifford."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:422
msgid "From :math:`\\alpha` we can calculate the **Error per Clifford (EPC)**:"
msgstr "A partir de :math:`\\alpha` podemos calcular o **Erro por Clifford (EPC)**:"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:424
msgid "EPC = \\frac{2^n-1}{2^n} (1-\\alpha)\n\n"
"(where :math:`n=nQ` is the number of qubits)."
msgstr "EPC = \\frac{2^n-1}{2^n} (1-\\alpha)\n\n"
"(onde :math:`n=nQ` é o número de qubits)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:449
msgid "Plot After 1 Seed"
msgstr "Gráfico Depois de 1 sequência"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:491
msgid "Plot with the Rest of the Seeds"
msgstr "Gráfico com o resto das sequências"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:493
msgid "The plot is being updated after each seed."
msgstr "O gráfico está sendo atualizado após cada sequência."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:547
msgid "Add more shots to the data"
msgstr "Adicionar mais execuções (shots) aos dados"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:652
msgid "Predicted Gate Fidelity"
msgstr "Fidelidade da Porta Prevista"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:663
msgid "From the known depolarizing errors on the simulation we can predict the **fidelity**. First we need to count the number of **gates per Clifford**."
msgstr "A partir dos erros de despolarização conhecidos na simulação podemos prever a **fidelidade**. Primeiro precisamos contar o número de **portas por Clifford**."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:665
msgid "The function **gates\\_per\\_clifford** takes a list of transpiled RB circuits and outputs the number of basis gates in each circuit."
msgstr "A função **gates\\_per\\_clifford** recebe uma lista de circuitos de RB transpilados e retorna o número de portas da base em cada circuito."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:716
msgid "The function **calculate\\_2q\\_epc** gives measured errors in the basis gates that were used to construct the Clifford. It assumes that the error in the underlying gates is depolarizing. It outputs the error per a 2-qubit Clifford."
msgstr "A função **calculate\\_2q\\_epc** dá erros medidos nas portas da base que foram usadas para construir o Clifford. Ela assume que o erro nas portas subjacentes é despolarizante. Ela tem como saída o erro de um Clifford de 2 qubits."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:718
msgid "The input to this function is: - **gate\\_per\\_cliff:** dictionary of gate per Clifford. - **epg\\_2q:** EPG estimated by error model. - **qubit\\_pair:** index of two qubits to calculate EPC. - **list\\_epgs\\_1q:** list of single qubit EPGs of qubit listed in ``qubit_pair``. - **two\\_qubit\\_name:** name of two qubit gate in ``basis gates`` (default is ``cx``)."
msgstr "A entrada para esta função é: - **gate\\_per\\_cliff:** dicionário de porta por Clifford. - **epg\\_2q:** EPG estimado por modelo de erro. - **qubit\\_pair:** índice de dois qubits para calcular EPC. - **list\\_epgs\\_1q:** lista de EPGs de qubit único do qubit listado em ``qubit_pair``. - **two\\_qubit\\_name:** nome da porta de dois qubits no ``basis gates`` (padrão é ``cx``)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:769
msgid "Run an RB Sequence with T1,T2 Errors"
msgstr "Execute uma Sequência de RB com Erros T1, T2"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:771
msgid "We now choose RB sequences that contain only 2-qubit Cliffords."
msgstr "Escolhemos agora sequências de RB que contêm apenas Cliffords de 2 qubits."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:773
msgid "We execute these sequences as before, but with a noise model extended with T1/T2 thermal relaxation error, and fit the exponentially decaying curve."
msgstr "Executamos essas sequências como antes, mas com um modelo de ruído estendido com erro de relaxamento térmico T1/T2, e ajustamos a curva de decaimento exponencial."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:900
msgid "We count again the number of **gates per Clifford** as before, and calculate the **two-qubit Clifford gate error**, using the predicted primitive gate errors from the coherence limit."
msgstr "Contamos novamente o número de **portas por Clifford** como antes, e calculamos o **erro de porta Clifford de dois bits**, usando os erros das portas primitivas previstos a partir do limite de coerência."

