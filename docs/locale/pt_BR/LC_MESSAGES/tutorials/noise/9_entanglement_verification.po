msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-19 12:13+0000\n"
"PO-Revision-Date: 2020-09-21 18:09\n"
"Last-Translator: \n"
"Language-Team: Portuguese, Brazilian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pt-BR\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/9_entanglement_verification.po\n"
"X-Crowdin-File-ID: 9380\n"
"Language: pt_BR\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:10
msgid "This page was generated from `tutorials/noise/9_entanglement_verification.ipynb`__."
msgstr "Esta página foi gerada a partir de `tutorials/noise/9_entanglement_verification.ipynb`__."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:9
msgid "Entanglement Verification"
msgstr "Verificação De Entrelaçamento"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:12
msgid "Introduction to the GHZ state"
msgstr "Introdução ao Estado GHZ"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:14
msgid "**The Greenberger-Horne-Zeilinger (GHZ)** State is a :math:`n`-qubit entangled state best defined by the following state vector:"
msgstr "O estado **The Greenberger-Horne-Zeilinger (GHZ)** é um entrelaçamento :math:`n`-qubit melhor definido pelo seguinte vetor de estado:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:16
msgid "|{\\rm GHZ} \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}} , n > 2\n\n"
msgstr "|{\\rm GHZ} \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}} , n > 2\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:18
msgid "Characterization of the GHZ state is very useful in assessing multi-qubit interactions, whose robustness is key to developing large scale quantum computers."
msgstr "A caracterização do Estado GHZ é muito útil na avaliação de interações entre múltiplos qubits, cuja robustez é fundamental para o desenvolvimento de computadores quânticos de grande escala."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:21
msgid "Characterizing a quantum state"
msgstr "Caracterizando um estado quântico"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:23
msgid "Any mixed quantum state can be identified by a density matrix, defined as $ :nbsphinx-math:`\\rho `= :nbsphinx-math:`\\Sigma`\\ *{i} p\\_i \\|:nbsphinx-math:`\\psi`*\\ {i} :nbsphinx-math:`\\rangle `:nbsphinx-math:`\\langle `:nbsphinx-math:`\\psi`\\_{i}\\| $, where :math:`|\\psi_{i} \\rangle` are the pure quantum states forming the mixture and :math:`0 < p_i \\le 1`, :math:`\\Sigma_{i} p_i = 1` are the classical probabilities to be in state :math:`|\\psi_{i} \\rangle`. We denote the pure density matrix of an ideal GHZ State by :math:`\\rho_{p} \\equiv |{\\rm GHZ} \\rangle \\langle {\\rm GHZ}|`. We want to see how close this matrix is to the density matrix of a GHZ State as produced in an experiment, :math:`\\rho_{T}`. One method to quantify this similarity is to calculate the fidelity between the states, :math:`F(\\rho_{p},\\rho_{T})`"
msgstr "Qualquer estado quântico misto pode ser identificado por uma matriz densidade definida como $ :nbsphinx-math:`\\rho `= :nbsphinx-math:`\\Sigma`\\ *{i} p\\_i \\|:nbsphinx-math:`\\psi`*\\ {i} :nbsphinx-math:`\\rangle `:nbsphinx-math:`\\langle `:nbsphinx-math:`\\psi`\\_{i}\\| $, onde :math:`|\\psi_{i} \\rangle` são os estados quânticos puros que formam a mistura e :math:`0 < p_i \\le 1`, :math:`\\Sigma_{i} p_i = 1` são as probabilidades clássicas de estar no estado :math:`|\\psi_{i} \\rangle`. Nós denotamos a matriz de densidade pura de um Estado GHZ ideal por :math:`\\rho_{p} \\equiv |{\\rm GHZ} \\rangle \\langle {\\rm GHZ}|`. Queremos ver o quão próxima esta matriz está de uma matriz densidade de um estado GHZ como produzido em um experimento, :math:`\\rho_{T}`. Um método para quantificar esta similaridade é calcular a fidelidade entre os estados, :math:`F(\\rho_{p},\\rho_{T})`"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:26
msgid "F = \\Big[ Tr \\sqrt{\\sqrt{\\rho_{p}}\\rho_{T}\\sqrt{\\rho_{p}}} \\Big] ^{2}\n\n"
msgstr "F = \\Big[ Tr \\sqrt{\\sqrt{\\rho_{p}}\\rho_{T}\\sqrt{\\rho_{p}}} \\Big] ^{2}\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:28
msgid "The aim of this tutorial is two-fold: we will explore ways in which we can characterize the GHZ state, and ways in which we can use Ignis' error mitigation tools to increase readout fidelity, regardless of characterization method"
msgstr "Este tutorial tem dois objetivos: vamos explorar maneiras em que podemos caracterizar o Estado GHZ, e formas nas quais podemos usar ferramentas de mitigação de erros do Ignis para aumentar a fidelidade de leitura, independentemente do método de caracterização"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:30
msgid "Before we go further, let us import everything we will need from basic Qiskit:"
msgstr "Antes de irmos mais longe, vamos importar tudo o que precisaremos do Qiskit básico:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:64
msgid "The next two functions are from ignis. The first is for the general error mitigation technique, and the second is specifically for quantum tomography"
msgstr "As duas próximas funções são do ignis. A primeira é para a técnica geral de mitigação de erros, e a segunda é especificamente para a tomografia quântica"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:87
msgid "The following import from the ``entanglement`` package contains information needed to create, parallellize and analyze GHZ State circuits"
msgstr "A importação a seguir do pacote ``entanglement`` contém informações necessárias para criar, paralelizar e analisar circuitos do Estado GHZ"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:111
msgid "Preparing a GHZ State"
msgstr "Preparando um Estado GHZ"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:113
msgid "Let us first go over how to prepare a GHZ State:"
msgstr "Vamos primeiro ver como preparar um estado GHZ:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:115
msgid "Say we have a system of :math:`n` qubits, all prepared in the :math:`|0\\rangle` state:"
msgstr "Digamos que temos um sistema de :math:`n` qubits, todos preparados no estado :math:`|0\\rangle`:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:117
msgid "|\\psi \\rangle = |00...0\\rangle\n\n"
msgstr "|\\psi \\rangle = |00...0\\rangle\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:119
msgid "We apply a Hadamard gate to the first qubit: :math:`|0\\rangle \\longrightarrow \\frac{1}{\\sqrt{2}}(|0\\rangle + |1\\rangle)`. Our state now looks like:"
msgstr "Aplicamos uma porta Hadamard ao primeiro qubit: :math:`|0\\rangle \\longrightarrow \\frac{1}{\\sqrt{2}}(|0\\rangle + |1\\rangle)`. Nosso estado agora se parece com:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:121
msgid "|\\psi \\rangle = \\frac{|00...0\\rangle + |10...0\\rangle}{\\sqrt{2}}\n\n"
msgstr "|\\psi \\rangle = \\frac{|00...0\\rangle + |10...0\\rangle}{\\sqrt{2}}\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:123
msgid "Applying on this state a sequence of :math:`n-1` CNOT gate between the :math:`n^{th}` and :math:`(n+1)^{th}` qubits for :math:`n = 0 \\ldots n-1` leaves the :math:`n+1` qubit at :math:`|0\\rangle` if the :math:`n^{th}` is in :math:`|0\\rangle`, and at :math:`|1\\rangle` if the :math:`n^{th}` is in :math:`|1\\rangle`, thus creating the GHZ State:"
msgstr "Aplicando neste estado uma sequência de :math:`n-1` portas CNOT entre os qubits :math:`n^{th}` e :math:`(n+1)^{th}` para :math:`n = 0 \\ldots n-1` deixa o qubit :math:`n+1` em :math:`|0\\rangle` se o :math:`n^{th}` estiver em :math:`|0\\rangle`, e em :math:`|1\\rangle` se o :math:`n^{th}` estiver em :math:`|1\\rangle`, criando assim o Estado GHZ:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:125
msgid "|GHZ \\rangle = \\frac{|00...0\\rangle + |11...1\\rangle}{\\sqrt{2}} \\equiv \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}}\n\n"
msgstr "|GHZ \\rangle = \\frac{|00...0\\rangle + |11...1\\rangle}{\\sqrt{2}} \\equiv \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}}\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:127
msgid "The following function creates this \"linear\" circuit that can measure the GHZ state:"
msgstr "A função a seguir cria esse circuito \"linear\" que pode medir o Estado GHZ:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:169
msgid "Characterization, Part I"
msgstr "Caracterização, Parte I"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:172
msgid "Multiple Quantum Coherence (MQC)"
msgstr "Coerência Quântica Múltipla (MQC)"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:174
msgid "Multiple Quantum Coherence (MQC) works by taking the preliminary preparation of an :math:`n` qubit GHZ State, and rotating each of the qubit states around the z axis by a phase :math:`\\phi`. After that, we apply a X gate, i.e., a :math:`\\pi` pulse around the x axis. Then, we apply the inverse of the operations we originally applied to get the GHZ state. In an ideal situation the final state is :math:`|\\psi \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + e^{i n \\phi}|1 \\rangle ^{\\otimes n}}{\\sqrt{2}}`. We can ideally observe the phase collected by projecting :math:`|\\psi \\rangle` onto the state $\\|0 :nbsphinx-math:`\\rangle `^{:nbsphinx-math:`\\otimes `n} $. This technique is reminiscent of an echo sequence, and has been shown to substantially improve the fidelity during readout."
msgstr "A Coerência Quântica Múltipla (MQC) funciona tomando a preparação preliminar de um Estado GHZ de :math:`n` qubits, e girando cada um dos estados dos qubits em torno do eixo z por uma fase :math:`\\phi`. Depois disso, aplicamos uma porta X, ou seja, um pulso de :math:`\\pi` em torno do eixo x. Em seguida, aplicamos o inverso das operações que originalmente aplicamos para obter o Estado GHZ. Em uma situação ideal o estado final é :math:`|\\psi \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + e^{i n \\phi}|1 \\rangle ^{\\otimes n}}{\\sqrt{2}}`. Podemos observar idealmente a fase coletada projetando :math:`|\\psi \\rangle` sobre o estado $\\|0 :nbsphinx-math:`\\rangle `^{:nbsphinx-math:`\\otimes `n} $. Esta técnica é reminiscente de uma sequência de eco, e foi mostrado que ela melhora substancialmente a fidelidade durante a leitura."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:177
msgid "The function below creates a linear MQC circuit. As with every circuit from here on, you can change the ``full_measurement`` argument to toggle between full measurement of all qubits or measurement of only the control qubit. Full measurement yields the most accurate results, but for more than 7 qubits, it is recommended to set it to false, and observe only the oscillations between the ``'0'`` and ``'1'`` states."
msgstr "A função abaixo cria um circuito de MQC linear. Da mesma forma que todos os circuitos daqui em diante, é possível alterar o argumento ``full_measurement`` para alternar entre a medição completa de todos os qubits ou a medição apenas do qubit de controle. A medição completa produz resultados mais precisos, mas para mais de 7 qubits, recomenda-se configurá-la como falso, e observar apenas as oscilações entre os estados ``'0'`` e ``'1'``."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:217
msgid "After running experiments on this MQC circuit, we can pick a state to observe oscillations as we sweep :math:`\\phi` from :math:`0` to :math:`2 \\pi`. Our signal in theory should follow :math:`S(\\phi) = \\frac{1}{2}(1+cos(n \\phi))`. We then perform a Discrete Fourier Transform (DFT: :math:`I_{v}=(1/N)|\\Sigma_{\\phi}e^{iv\\phi}S(\\phi)`) to extract the Fidelity of the state, defined by the bounds :math:`2\\sqrt{I_{n}} \\leq F \\leq \\sqrt{I_{0}/2}+ \\sqrt{I_{n}}`; if desired, an actual value for the fidelity can be obtained: :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1})+\\sqrt{I_{n}})` (arXiv:1905.05720)."
msgstr "Depois de executar experimentos neste circuito MQC, nós podemos escolher um estado para observar oscilações enquanto varremos :math:`\\phi` de :math:`0` a :math:`2 \\pi`. Em teoria, nosso sinal deve seguir :math:`S(\\phi) = \\frac{1}{2}(1+cos(n \\phi))`. Em seguida, realizamos uma Transformada Discreta de Fourier (DFT: :math:`I_{v}=(1/N)|\\Sigma_{\\phi}e^{iv\\phi}S(\\phi)`) para extrair a Fidelidade do estado, definida pelos limites :math:`2\\sqrt{I_{n}} \\leq F \\leq \\sqrt{I_{0}/2}+ \\sqrt{I_{n}}`; caso deseje, um valor real para a fidelidade pode ser obtido: :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1})+\\sqrt{I_{n}})` (arXiv:1905.05720)."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:230
msgid "Parity Oscillations"
msgstr "Oscilações de Paridade"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:232
msgid "The next method we use to characterize the GHZ state is parity oscillations. After preparing a GHZ state, we apply a combination of rotations about the x and y axes to create various superposition states as a function of :math:`\\phi`: :math:`U(\\phi) = \\otimes_{j}^{N} e^{i\\frac{\\pi}{4}(cos(\\phi)\\sigma_{x}^{j}+sin(\\phi)\\sigma_{y}^{j})}`. We then measure the expectation value :math:`\\langle \\otimes_{j}^{N} \\sigma_{z}^{j} \\rangle_{\\phi}` as a function of :math:`\\phi`, which in theory should lead to parity oscillations between 1 and -1."
msgstr "O próximo método que usamos para caracterizar o estado GHZ é as oscilações de paridade. Após preparar um estado GHZ, aplicamos uma combinação de rotações sobre os eixos x e y para criar vários estados de superposição como uma função de :math:`\\phi`: :math:`U(\\phi) = \\otimes_{j}^{N} e^{i\\frac{\\pi}{4}(cos(\\phi)\\sigma_{x}^{j}+sin(\\phi)\\sigma_{y}^{j})}`. Em seguida, medimos o valor esperado :math:`\\langle \\otimes_{j}^{N} \\sigma_{z}^{j} \\rangle_{\\phi}` como uma função de :math:`\\phi`, o que, em teoria, deveria levar a oscilações de paridade entre 1 e -1."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:235
msgid "The following function generates a circuit which is the Parity Oscillation equivalent of the MQC circuit given above"
msgstr "A função a seguir gera um circuito que é o equivalente de Oscilação de Paridade do circuito MQC dado acima"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:275
msgid "We can obtain fidelity for parity oscillations :math:`S_{\\phi}` from :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1}+C)`, where :math:`C`, the coherence is defined as :math:`2\\sqrt{I_{n}}`, following the same convention for the DFT as with the MQC method."
msgstr "Podemos obter a fidelidade para oscilações de paridade :math:`S_{\\phi}` from :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1}+C)`, na qual :math:`C`, a coerência é definida como :math:`2\\sqrt{I_{n}}`, seguindo a mesma convenção para o DFT como com o método MQC."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:287
msgid "Tomography"
msgstr "Tomografia"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:289
msgid "Tomography measures the density matrix by producing many nominally identical states and measuring the state instances in different bases. The ideal result of a GHZ state is four equal density matrix elements at the 4 corners of the tensor-product basis, with all other elements vanishing. Although the fidelity can be readily calculated by this method, the method is slow (requires exponential number of measurements in n), and takes prohibitively long times if n is larger than 7 or so. Nevertheless, we will show below how to perform this method as it is relevant for small numbers of qubits."
msgstr "A tomografia mede a matriz densidade produzindo muitos estados nominalmente idênticos e medindo as instâncias dos estados em diferentes bases. O resultado ideal de um estado GHZ são quatro elementos da matriz densidade iguais nos 4 cantos da base de produto tensorial, com todos os outros elementos desaparecendo. Embora a fidelidade possa ser prontamente calculada por este método, o método é lento (requer um número exponencial de medições em n), e toma tempos proibitivamente longos se n for maior que 7 ou próximo. Não obstante, mostraremos abaixo como executar este método já que ele é relevante para pequenos números de qubits."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:302
msgid "Parallelizing circuits"
msgstr "Paralelizando circuitos"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:304
msgid "The above \"linear\" circuits are good to perform simulations, but what do we do when we use real devices, where the system can have an arbitrary topology and various errors? We are specifically targeting real hardware here, not just Aer simulation. One technique to reduce real-hardware effects is to parallelize the CNOT gates and thus create a shorter-depth circuit. This can be hugely beneficial efficiency wise, and fidelity wise. The class ``BConfig`` from the module ``parallelize`` does exactly this."
msgstr "Os circuitos \"lineares\" acima são bons para realizar simulações, mas o que fazemos quando utilizamos dispositivos reais, onde o sistema pode ter uma topologia arbitrária e vários erros? Estamos especificamente mirando em hardware real aqui, não apenas simulações do Aer. Uma técnica para reduzir efeitos reais de hardware é paralelizar as portas CNOT e, assim, criar um circuito de menor profundidade. Isso pode ser enormemente benéfico com relação à eficiência e à fidelidade. A classe ``BConfig`` do módulo ``parallelize`` faz exatamente isto."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:307
msgid "First we must configure the optimal backend we want to use. We will consider a simulation backend, ``'ibmq_qasm_simulator'``, disguised as a real device, ``'ibmq_16_melbourne'`` by using a the mock backend ``'FakeMelbourne'``"
msgstr "Primeiro devemos configurar o backend ótimo que queremos utilizar. Consideraremos um backend de simulação, ``'ibmq_qasm_simulator'``, disfarçado como um dispositivo real, ``'ibmq_16_melbourne'``, usando um backend falso ``'FakeMelbourne'``"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:331
msgid "Using the ``noise`` module, we can now define a noise model from ``'ibmq_16_melbourne'`` to \"assign\" to ``'ibmq_qasm_simulator'``."
msgstr "Utilizando o módulo ``noise``, podemos agora definir um modelo de ruído a partir do ``'ibmq_16_melbourne'`` para \"atribuir\" ao ``'ibmq_qasm_simulator'``."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:354
msgid "And there we have it. From now on, in the tutorial, when using a real device, not a simulation, just take out every mention and assignment of ``noise_model`` and ``coupling_map``, and assign the real device to ``backend``. The simulator used from now on is no substitute for running a real device."
msgstr "E aqui está. A partir de agora, no tutorial, quando usar um dispositivo real, não uma simulação, basta tirar todas as menções e atribuições de ``noise_model`` e ``coupling_map``, e atribuir o dispositivo real a ``backend``. O simulador usado a partir de agora não é nenhum substituto para a execução em um dispositivo real."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:365
msgid "``BConfig`` lays the blueprint for creating paralellized circuits. Let us initialize an object taking in the real device we just defined, and name it ``protocirc``. All of our experiments will use it:"
msgstr "``BConfig`` estabelece a planta para a criação de circuitos paralelos. Vamos inicializar um objeto pegando o dispositivo real que acabamos de definir, e nomeá-lo ``protocirc``. Todos os nossos experimentos vão usá-lo:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:387
msgid "Error Mitigation"
msgstr "Mitigação De Erros"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:389
msgid "Qiskit Ignis provides very accurate tools to take raw data and return calibrated data. This is done by getting the raw data, in the form of a vector :math:`v_{raw}` and getting a calibration matrix :math:`A`. The output is then the solution to the optimization problem: :math:`argmin_{v_{cal}} ||Av_{cal}-v_{raw}||^{2}`"
msgstr "O Qiskit Ignis fornece ferramentas muito precisas para receber dados brutos e retornar dados calibrados. Isto é feito através da obtenção dos dados brutos, na forma de um vetor :math:`v_{raw}` e obtendo uma matriz de calibração :math:`A`. A saída é, então, a solução para o problema de otimização: :math:`argmin_{v_{cal}} ||Av_{cal}-v_{raw}||^{2}`"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:401
msgid "Experiment Time"
msgstr "Hora do experimento"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:404
msgid "Preliminary Steps"
msgstr "Etapas Preliminares"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:406
msgid "The probabilities of measuring :math:`|0\\rangle ^{\\otimes n}` and :math:`|1\\rangle^{\\otimes n}` in the GHZ state are important in calculating fidelity. For this, we need to run the following test"
msgstr "As probabilidades de medir :math:`|0\\rangle ^{\\otimes n}` e :math:`|1\\rangle^{\\otimes n}` no estado GHZ são importantes no cálculo da fidelidade. Para isso, precisamos executar o teste a seguir"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:417
msgid "We begin by defining standard execution parameters:"
msgstr "Começamos definindo parâmetros de execução padrão:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:815
msgid "Now with error mitigation:"
msgstr "Agora com a mitigação de erros:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:945
msgid "We will load these values in a dictionary for assessing fidelity later on:"
msgstr "Vamos carregar esses valores em um dicionário para avaliar a fidelidade posteriormente em:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:967
msgid "Part 1 : MQC"
msgstr "Parte 1: MQC"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:969
msgid "We now retrieve a parallellized MQC circuit for the n qubit device"
msgstr "Recuperamos agora um circuito de MQC paralelizado para o dispositivo de n qubits"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1025
msgid "We now execute the MQC experiment:"
msgstr "Agora executamos o experimento MQC:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1068
msgid "Now we will plot the amount of counts measured for :math:`|0 \\rangle ^{\\otimes n}` as a function of phase. It is important to note that when using a parametrized circuit like the one here, the method ``get_counts()`` accepts an **index** and not a **circuit**. In any other type of experiment, ``get_counts()`` accepts a **circuit**."
msgstr "Agora vamos representar a quantidade de contagens medidas para :math:`|0 \\rangle ^{\\otimes n}` em função da fase. É importante notar que ao usar um circuito parametrizado como esse, o método ``get_counts()`` aceita um **índice** e não um **circuito**. Em qualquer outro tipo de experimento, ``get_counts()``` aceita um **circuito**."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1099
msgid "Now we get started on error mitigation. We create an identical quantum register and use complete\\_meas\\_cal from Ignis, to create circuits for calibrated measurements to be excecuted, and a calibration matrix."
msgstr "Agora começamos com a mitigação de erros. Criamos um registrador quântico idêntico e usamos complete\\_meas\\_cal do Ignis para criar circuitos para as medições calibradas serem executadas, e uma matriz de calibração."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1165
msgid "Finally, we have our error mitigated results:"
msgstr "Por fim, temos nossos resultados com mitigação de erro:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1186
msgid "We can see how the error mitigated results yield a far greater fidelity than the raw data"
msgstr "Podemos ver como os resultados com mitigação de erro produzem uma fidelidade muito maior do que os dados brutos"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1301
msgid "We now plot the DFT and compare the heights of the peaks to give bounds for the fidelity"
msgstr "Nós agora plotamos o DFT e comparamos as alturas dos picos para definir limites para a fidelidade"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1312
msgid "Statistical bootstrapping has found that the error on these measurements is at most 1.5% (arXiv 1905.05720), so these result fall within error bounds, despite the fidelity being slightly higher than the upper bound, and show how error mitigation dramatically increases fidelity"
msgstr "O bootstrapping estatístico descobriu que o erro nessas medições é no máximo 1.5% (arXiv 1905.05720), portanto, esses resultados caem dentro de limites de erro, apesar da fidelidade ser um pouco maior do que o limite superior, e mostram como a mitigação de erros aumenta drasticamente a fidelidade"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1324
msgid "Part 2: Parity Oscillation"
msgstr "Parte 2: Oscilação de Paridade"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1326
msgid "We now retrieve a parallellized Parity Oscillation circuit for the n qubit device, and run experiments in the same fashion as we did in MQC."
msgstr "Agora nós recuperamos um circuito de Oscilação de Paridade paralelizado para o dispositivo de n qubits, e executamos experimentos da mesma forma que fizemos no MQC."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1415
msgid "Now we construct the :math:`\\otimes _{j}^{N} \\sigma_z^{j}` matrix for instruction, although this is already taken into account in the following method, ``entanglement.analysis.composite_pauli_z_expvalue()``:"
msgstr "Agora nós construímos a matriz :math:`\\otimes _{j}^{N} \\sigma_z^{j}` para instrução, embora isso já seja levado em conta no método a seguir, ``entanglement.analysis.composite_pauli_z_expvalue()``:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1438
msgid "Now we want to make sure that our list of counts is correctly ordered so that it coincides with the states of the :math:`\\otimes _{j}^{N} \\sigma_z^{j}`, so that calculating :math:`\\langle \\otimes _{j}^{N} \\sigma_z^{j} \\rangle` will be as simple as taking the dot product of this ordered list with the diagonal of :math:`\\otimes _{j}^{N} \\sigma_z^{j}`. The ``composite_pauli_z_expvalue`` function does just that; it takes a circuit and appropriately orders the state vector counts. We can plot this dot product as a function of :math:`\\phi` to observe parity oscillations."
msgstr "Agora queremos ter certeza de que nossa lista de contagens está corretamente ordenada para que ela coincida com os estados do :math:`\\otimes _{j}^{N} \\sigma_z^{j}`, de modo que calcular :math:`\\langle \\otimes _{j}^{N} \\sigma_z^{j} \\rangle` será tão simples quanto tomar o produto escalar desta lista ordenada com a diagonal de :math:`\\otimes _{j}^{N} \\sigma_z^{j}`. A função ``composite_pauli_z_expvalue`` faz exatamente isso; ela recebe um circuito e ordena apropriadamente as contagens do vetor de estados. Podemos representar esse produto escalar como uma função de :math:`\\phi` para observar oscilações de paridade."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1489
msgid "Now for standard error mitigation:"
msgstr "Agora para mitigação de erro padrão:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1584
msgid "We can see how error mitigation dramatically improves our measurement (much more so in PO than in MQC). Let us quantify this using the same DFT method we used in MQC, and calulating the actual fidelities:"
msgstr "Podemos ver como a mitigação de erros melhora drasticamente nossa medição (muito mais em PO do que em MQC). Vamos quantificar isso usando o mesmo método DFT que utilizamos em MQC e calculando as fidelidades reais:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1662
msgid "As we see, the raw fidelity is much lower than what is acheived with MQC, but the error mitigated result is about the same."
msgstr "Como vemos, a fidelidade bruta é muito menor do que a obtida com MQC, mas o resultado com erro mitigado é aproximadamente o mesmo."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1674
msgid "Part 3: Tomography"
msgstr "Parte 3: Tomografia"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1676
msgid "The first step in this experiment to just pass a simple GHZ state with *no* measurements. Also, the circuit cannot be transpiled; the ``transpiled`` argument in the ``getGHZChecker()`` method can be turned on and off as is shown"
msgstr "O primeiro passo neste experimento é apenas passar um simples estado GHZ *sem* medições. Também, o circuito não pode ser transpilado; o argumento ``transpiled``, no método ``getGHZChecker()`` pode ser ligado e desligado como é mostrado"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1711
msgid "We now pass a simulated backend from ``Aer`` to get theoretical statevector counts"
msgstr "Passamos agora um backend simulado do ``Aer`` para obter contagens do vetor de estados teórico"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1754
msgid "This following code runs tomography experiments on the circuit we defined first, which is then compared to the theortical statevector to generate a density matrix"
msgstr "Este código a seguir executa experimentos de tomografia no circuito que definimos primeiro, que é então comparado ao vetor de estados teórico para gerar uma matriz densidade"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1806
msgid "From here we can get the fidelity, although this method is not as fool proof as the one we will get to eventually:"
msgstr "A partir daqui podemos obter a fidelidade, embora este método não seja tão infalível como ao que vamos chegar a eventualmente:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1852
msgid "...And now for error mitigation..."
msgstr "...E agora para a mitigação de erros..."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1930
msgid "Now, using ``qiskit.visualization``, we can plot the raw density matrix, real, and imiginary parts being on separate plots,..."
msgstr "Agora, usando ``qiskit.visualization``, podemos representar a matriz de densidade bruta, as partes real e imaginária estando em gráficos separados,..."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1960
msgid "And also the error mitigated density matrix,..."
msgstr "E também a matriz densidade com erros mitigados,..."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1990
msgid "The actual density matrices can be obtained using the ``fit()`` method. Once we have the density matrix, we can compute the fidelity, which is nothing but half the sum of the four corners of the density matrix; the following method helps us:"
msgstr "As matrizes densidade reais podem ser obtidas utilizando o método ``fit()``. Uma vez que temos a matriz de densidade, podemos computar a fidelidade, que é simplesmente a metade da soma dos quatro cantos da matriz densidade; o método a seguir nos ajuda:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2064
msgid "As we see, the raw fidelity is much lower than what is acheived with either MQC or Parity Oscillations, but the error mitigated result is about the same."
msgstr "Como vemos, a fidelidade bruta é muito menor do que o que é obtido com o MQC ou com as Oscilações de Paridade, mas o resultado com erro mitigado é aproximadamente o mesmo."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2066
msgid "**A note on tomography**"
msgstr "**Uma nota sobre a tomografia**"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2068
msgid "Do not perform quantum tomography with >5 qubits"
msgstr "Não realize tomografia quântica com > 5 qubits"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2080
msgid "Conclusion"
msgstr "Conclusão"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2082
msgid "In conclusion, we see that without error mitigation, MQC is the superior method for characterizing the GHZ state. However, with error mitigation, all methods can, at least for a small number of qubits, acheive a much greater fidelity, and all near the same value. To get more accurate results, aside from using a real device, it is worth increasing the number of shots four to eight-fold. It may be worth comparing how the parallellized circutis used in this notebook perform fidelity-wise versus linearized circuits."
msgstr "Concluindo, vemos que sem a mitigação de erros, o MQC é o método superior para caracterizar o estado GHZ. No entanto, com a mitigação de erros, todos os métodos podem, pelo menos para um pequeno número de qubits, alcançar uma fidelidade muito maior, e todos próximos do mesmo valor. Para obter resultados mais precisos, além de usar um dispositivo real, vale a pena aumentar o número de execuções de quatro a oito vezes. Pode valer a pena comparar o desempenho com relação à fidelidade dos circuitos paralelizados utilizados neste notebook com o dos circuitos linearizados."

