msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-12 15:01+0000\n"
"PO-Revision-Date: 2020-11-12 15:36\n"
"Last-Translator: \n"
"Language-Team: Portuguese, Brazilian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pt-BR\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/simulators/1_aer_provider.po\n"
"X-Crowdin-File-ID: 9160\n"
"Language: pt_BR\n"

#: ../../tutorials/simulators/1_aer_provider.ipynb:10
msgid "This page was generated from `tutorials/simulators/1_aer_provider.ipynb`__."
msgstr "Esta página foi gerada, a partir do 'tutorials/simulators/1_aer_provider.ipynb'__."

#: ../../tutorials/simulators/1_aer_provider.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/simulators/1_aer_provider.ipynb>`_."
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:9
msgid "Simulators"
msgstr "Simuladores"

#: ../../tutorials/simulators/1_aer_provider.ipynb:21
msgid "Introduction"
msgstr "Introdução"

#: ../../tutorials/simulators/1_aer_provider.ipynb:23
msgid "This notebook shows how to import *Qiskit Aer* simulator backends and use them to execute ideal (noise free) Qiskit Terra circuits."
msgstr "Este notebook mostra como importar os serviços do simulador *Qiskit Aer * e como usá-los para executar circuitos Qiskit Terra ideais (ruído livre)."

#: ../../tutorials/simulators/1_aer_provider.ipynb:50
msgid "Qiskit Aer simulator backends"
msgstr "Serviços do simulador do Qiskit Aer"

#: ../../tutorials/simulators/1_aer_provider.ipynb:52
msgid "Qiskit Aer currently includes three high performance simulator backends: \\* ``QasmSimulator``: Allows ideal and noisy multi-shot execution of qiskit circuits and returns counts or memory \\* ``StatevectorSimulator``: Allows ideal single-shot execution of qiskit circuits and returns the final statevector of the simulator after application \\* ``UnitarySimulator``: Allows ideal single-shot execution of qiskit circuits and returns the final unitary matrix of the circuit itself. Note that the circuit cannot contain measure or reset operations for this backend"
msgstr "O Qiskit Aer, atualmente, inclui três serviços de simulador de alto desempenho: \\* ``QasmSimulator``: Permite execução com múltiplas repetições (multi-shot) ideal e ruidosa de circuitos qiskit e retorna contagens ou memória \\* ``StatevectorSimulator``: Permite a execução única (single-shot) ideal de circuitos qiskit e retorna o vetor de estados final do simulador, após à aplicação \\* ``UnitarySimulator``: Permite a execução ideal única (single-shot) de circuitos qiskit e retorna a matriz unitária final do próprio circuito. Observe que o circuito não pode conter operações de medição ou de reset para este serviço"

#: ../../tutorials/simulators/1_aer_provider.ipynb:55
msgid "These backends are found in the ``Aer`` provider with the names ``qasm_simulator``, ``statevector_simulator`` and ``unitary_simulator``, respectively."
msgstr "Estes serviços são encontrados no provedor ``Aer`` com os nomes ``qasm_simulator``, ``statevector_simulator`` e ``unitary_simulator``, respectivamente."

#: ../../tutorials/simulators/1_aer_provider.ipynb:105
msgid "The simulator backends can also be directly imported from ``qiskit.providers.aer``"
msgstr "Os serviços de simulador, também podem ser diretamente importados de ``qiskit.providers.aer``"

#: ../../tutorials/simulators/1_aer_provider.ipynb:127
msgid "QasmSimulator"
msgstr "QasmSimulator"

#: ../../tutorials/simulators/1_aer_provider.ipynb:129
msgid "The ``QasmSimulator`` backend is designed to mimic an actual device. It executes a Qiskit ``QuantumCircuit`` and returns a count dictionary containing the final values of any classical registers in the circuit. The circuit may contain *gates*, *measurements*, *resets*, *conditionals*, and other advanced simulator options that will be discussed in another notebook."
msgstr "O serviço ``QasmSimulator`` é projetado para imitar um dispositivo real. Ele executa um Qiskit ``QuantumCircuit`` e retorna um dicionário de contagem contendo os valores finais de quaisquer registradores clássicos no circuito. O circuito pode conter *portas*, * medições*, * resets*, * condicionais*, e outras opções avançadas do simulador, que serão discutidas em outro notebook."

#: ../../tutorials/simulators/1_aer_provider.ipynb:132
#: ../../tutorials/simulators/1_aer_provider.ipynb:285
msgid "Simulating a quantum circuit"
msgstr "Simulando um circuito quântico"

#: ../../tutorials/simulators/1_aer_provider.ipynb:134
#: ../../tutorials/simulators/1_aer_provider.ipynb:287
msgid "The basic operation executes a quantum circuit and returns a counts dictionary of measurement outcomes. Here we execute a simple circuit that prepares a 2-qubit Bell-state :math:`|\\psi\\rangle = \\frac{1}{2}(|0,0\\rangle + |1,1 \\rangle)` and measures both qubits."
msgstr "A operação básica executa um circuito quântico e retorna um dicionário de contagens de resultados de medição. Aqui, executamos um circuito simples, que prepara um Estado de Bell de 2 quibits :math:`|\\psi\\rangle = \\frac{1}{2}(|0,0\\rangle + |1,1 \\rangle)` e mede ambos os qubits."

#: ../../tutorials/simulators/1_aer_provider.ipynb:177
msgid "Returning measurement outcomes for each shot"
msgstr "Retornando resultados de medição para cada repetição (shot)"

#: ../../tutorials/simulators/1_aer_provider.ipynb:179
msgid "The ``QasmSimulator`` also supports returning a list of measurement outcomes for each individual shot. This is enabled by setting the keyword argument ``memory=True`` in the ``assemble`` or ``execute`` function."
msgstr "O ``QasmSimulator``, também suporta retornar uma lista de resultados de medição para cada repetição individual. Isto é habilitado configurando o argumento de palavra-chave ``memory=True`` na função ``assemble`` ou ``execute``."

#: ../../tutorials/simulators/1_aer_provider.ipynb:232
#: ../../tutorials/simulators/1_aer_provider.ipynb:374
msgid "Starting simulation with a custom initial state"
msgstr "Iniciando simulação com um estado inicial personalizado"

#: ../../tutorials/simulators/1_aer_provider.ipynb:234
msgid "The ``QasmSimulator`` allows setting a custom initial statevector for the simulation. This means that all experiments in a Qobj will be executed starting in a state :math:`|\\psi\\rangle` rather than the all zero state :math:`|0,0,..0\\rangle`. The custom state may be set in the circuit using the ``initialize`` method."
msgstr "O ``QasmSimulator`` permite configurar um vetor de estado inicial personalizado para a simulação. Isto significa que todos os experimentos em um Qobj serão executados, a partir de um estado :math:`|\\psi\\rangle`, em vez do estado todo de zeros :math:`|0,0,..0\\rangle`. O estado personalizado pode ser configurado no circuito utilizando o método ``initialize``."

#: ../../tutorials/simulators/1_aer_provider.ipynb:236
msgid "**Note:** \\* The initial statevector must be a valid quantum state :math:`|\\langle\\psi|\\psi\\rangle|=1`. If not, an exception will be raised. \\* The simulator supports this option directly for efficiency, but it can also be unrolled to standard gates for execution on actual devices."
msgstr "**Nota:** \\* O vetor de estado inicial deve ser um estado quântico válido :math:`|\\langle\\psi|\\psi\\rangle|=1`. Se não, uma exceção será gerada. \\* O simulador suporta esta opção, diretamente, para a eficiência, mas ela também pode ser decomposta em portas padrão para execução em dispositivos reais."

#: ../../tutorials/simulators/1_aer_provider.ipynb:238
msgid "We now demonstrate this functionality by setting the simulator to be initialized in the final Bell-state of the previous example:"
msgstr "Agora, demonstramos essa funcionalidade, configurando o simulador para ser inicializado no estado de Bell final do exemplo anterior:"

#: ../../tutorials/simulators/1_aer_provider.ipynb:280
msgid "StatevectorSimulator"
msgstr "StatevectorSimulator"

#: ../../tutorials/simulators/1_aer_provider.ipynb:282
msgid "The ``StatevectorSimulator`` executes a single shot of a Qiskit ``QuantumCircuit`` and returns the final quantum statevector of the simulation. The circuit may contain *gates*, and also *measurements*, *resets*, and *conditional* operations."
msgstr "O ``StatevectorSimulator`` executa uma única repetição de um Qiskit ``QuantumCircuit`` e retorna o vetor de estados quântico final da simulação. O circuito pode conter *portas*, e também *medições*, *resets*, e operações *condicionais*."

#: ../../tutorials/simulators/1_aer_provider.ipynb:329
msgid "Simulating a quantum circuit with measurement"
msgstr "Simulando um circuito quântico com medição"

#: ../../tutorials/simulators/1_aer_provider.ipynb:331
msgid "Note that if a circuit contains *measure* or *reset* the final statevector will be a conditional statevector *after* simulating wave-function collapse to the outcome of a measure or reset. For the Bell-state circuit this means the final statevector will be *either* :math:`|0,0\\rangle` *or* :math:`|1, 1\\rangle`."
msgstr "Observe que, se um circuito contém *medição* ou * reset *, o vetor de estados final será um vetor de estados condicional, *após* simular o colapso da função de onda, para o resultado de uma medição ou reset. Para o circuito do estado de Bell, isto significa, que o vetor de estados final será *ou* :math:`|0,0\\rangle` *ou* :math:`|1, 1\\rangle`."

#: ../../tutorials/simulators/1_aer_provider.ipynb:376
msgid "Like the ``QasmSimulator``, the ``StatevectorSimulator`` also allows setting a custom initial statevector for the simulation. Here we run the previous initial statevector example on the ``StatevectorSimulator`` and initialize it to the Bell state."
msgstr "Assim como o ``QasmSimulator``, o ``StatevectorSimulator`` também permite configurar um vetor de estados inicial personalizado para a simulação. Aqui, executamos o exemplo anterior de vetor de estados inicial no ``StatevectorSimulator`` e inicializamo-lo no estado de Bell."

#: ../../tutorials/simulators/1_aer_provider.ipynb:417
msgid "Unitary Simulator"
msgstr "Simulador Unitário"

#: ../../tutorials/simulators/1_aer_provider.ipynb:419
msgid "The ``UnitarySimulator`` constructs the unitary matrix for a Qiskit ``QuantumCircuit`` by applying each gate matrix to an identity matrix. The circuit may only contain *gates*, if it contains *resets* or *measure* operations an exception will be raised."
msgstr "O ``UnitarySimulator`` constrói a matriz unitária para um Qiskit ``QuantumCircuit`` aplicando cada matriz de porta a uma matriz identidade. O circuito pode conter, apenas *portas*, se ele contiver operações de *reset* ou *medição* uma exceção será levantada."

#: ../../tutorials/simulators/1_aer_provider.ipynb:422
msgid "Simulating a quantum circuit unitary"
msgstr "Simulando a unitária de um circuito quântico"

#: ../../tutorials/simulators/1_aer_provider.ipynb:424
msgid "For this example we will return the unitary matrix corresponding to the previous examples circuit which prepares a bell state."
msgstr "Para este exemplo, retornaremos a matriz unitária correspondente ao circuito dos exemplos anteriores, que prepara um estado de Bell."

#: ../../tutorials/simulators/1_aer_provider.ipynb:492
msgid "Setting a custom initial unitary"
msgstr "Definindo uma unitária inicial personalizada"

#: ../../tutorials/simulators/1_aer_provider.ipynb:494
msgid "We may also set an initial state for the ``UnitarySimulator``, however this state is an initial *unitary matrix* :math:`U_i`, not a statevector. In this case the returned unitary will be :math:`U \\cdot U_i` given by applying the circuit unitary to the initial unitary matrix."
msgstr "Podemos, também, estabelecer um estado inicial para o ``UnitarySimulator``, no entanto, este estado é uma *matriz unitária* inicial :math:`U_i`, não um vetor de estados. Neste caso, a unitária retornada será :math:`U \\cdot U_i` dada pela aplicação da unitária do circuito à matriz unitária inicial."

#: ../../tutorials/simulators/1_aer_provider.ipynb:496
msgid "**Note:** \\* The initial unitary must be a valid unitary matrix :math:`U^\\dagger \\cdot U =\\mathbb{1}`. If not, an exception will be raised. \\* If a ``Qobj`` contains multiple experiments, the initial unitary must be the correct size for *all* experiments in the ``Qobj``, otherwise an exception will be raised."
msgstr "**Nota:** \\* A unitária inicial deve ser uma matriz unitária válida :math:`U^\\dagger \\cdot U =\\mathbb{1}`. Se não, uma exceção será gerada. \\* Se um ``Qobj`` contém vários experimentos, a unitária inicial deve ter o tamanho correto para *todos* os experimentos no ``Qobj``, caso contrário uma exceção será gerada."

#: ../../tutorials/simulators/1_aer_provider.ipynb:498
msgid "Let us consider preparing the output unitary of the previous circuit as the initial state for the simulator:"
msgstr "Vamos considerar a preparação da unitária, resultante do circuito anterior, como o estado inicial para o simulador:"

