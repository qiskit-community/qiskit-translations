msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-02-18 22:08+0000\n"
"PO-Revision-Date: 2021-02-18 22:31\n"
"Last-Translator: \n"
"Language-Team: Portuguese, Brazilian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pt-BR\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/chemistry/04_excited_states_solvers.po\n"
"X-Crowdin-File-ID: 9406\n"
"Language: pt_BR\n"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:10
msgid "This page was generated from `tutorials/chemistry/04_excited_states_solvers.ipynb`__."
msgstr "Esta página foi gerada a partir do `tutorials/chemistry/04_excited_states_solvers.ipynb`__."

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/chemistry/04_excited_states_solvers.ipynb>`_."
msgstr "Execute interativamente no `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/chemistry/04_excited_states_solvers.ipynb>`_."

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:9
msgid "Excited states solvers"
msgstr "Solucionador de estados excitados"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:21
msgid "Introduction"
msgstr "Introdução"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:23
msgid "|a28b9d47f2ec4409b2d5f2c29fa2b2ab|"
msgstr ""

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:25
msgid "In this tutorial we are going to discuss the excited states calculation interface of Qiskit Chemistry. The goal is to compute the excited states of a molecular Hamiltonian. This Hamiltonian can be electronic or vibronic. To know more about the preparation of the Hamiltonian, check out the Electronic structure and Vibronic structure tutorials."
msgstr "Neste tutorial vamos discutir a interface de cálculo de estados excitados do Qiskit Chemistry. O objetivo é computar os estados excitados de um Hamiltoniano molecular. Este Hamiltoniano pode ser eletrônico ou vibrônico. Para saber mais sobre a preparação do Hamiltoniano, confira os tutoriais de Estrutura Eletrônica e Estrutura Vibrônica."

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:27
msgid "The first step is to define the molecular system. In the following we ask for the electronic part of a hydrogen molecule."
msgstr "O primeiro passo é definir o sistema molecular. A seguir, pedimos a parte eletrônica de uma molécula de hidrogênio."

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:80
msgid "The Solver"
msgstr "O Solucionador"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:82
msgid "Then we need to define a solver. The solver is the algorithm through which the ground state is computed."
msgstr "Então precisamos definir um solucionador. O solucionador é o algoritmo através do qual o estado fundamental é computado."

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:84
msgid "Let’s first start with a purely classical example: the NumPy eigensolver. This algorithm exactly diagonalizes the Hamiltonian. Although it scales badely, it can be used on small systems to check the results of the quantum algorithms. Here, we are only interested to look at eigenstates with a given number of particle. To compute only those states a filter function can be passed to the NumPy eigensolver. A default filter function is already implemented in Qiskit and can be used in this way:"
msgstr "Vamos começar primeiramente com um exemplo puramente clássico: o NumPy eigensolver. Este algoritmo diagonaliza o Hamiltoniano exatamente. Apesar de escalar mal, ele pode ser usado em sistemas pequenos para verificar os resultados dos algoritmos quânticos. Aqui, só estamos interessados em olhar para autoestados com um determinado número de partículas. Para computar apenas aqueles estados, uma função de filtro pode ser passada para o NumPy eigensolver. Uma função de filtro padrão já é implementada no Qiskit e pode ser usada desta forma:"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:107
msgid "The excitation energies can also be accessed with the qEOM algorithm [arXiv preprint arXiv:1910.12890 (2019)]. The EOM method finds the excitation energies (differences in energy between the ground state and all :math:`n`\\ th excited states) by solving the following pseudo-eigenvalue problem."
msgstr "As energias de excitação também podem ser acessadas com o algoritmo qEOM [arXiv preprint arXiv:1910.12890 (2019)]. O método EOM encontra as energias de excitação (diferenças de energia entre o estado fundamental e todos os :math:`n`\\ th estados excitados) resolvendo o seguinte problema de pseudo-autovalor."

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:109
msgid "\\begin{pmatrix}\n"
"    \\text{M} & \\text{Q}\\\\\n"
"    \\text{Q*} & \\text{M*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}\n"
"= E_{0n}\n"
"\\begin{pmatrix}\n"
"    \\text{V} & \\text{W}\\\\\n"
"    -\\text{W*} & -\\text{V*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}"
msgstr "\\begin{pmatrix}\n"
"    \\text{M} & \\text{Q}\\\\\n"
"    \\text{Q*} & \\text{M*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}\n"
"= E_{0n}\n"
"\\begin{pmatrix}\n"
"    \\text{V} & \\text{W}\\\\\n"
"    -\\text{W*} & -\\text{V*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:130
msgid "with"
msgstr "com"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:132
msgid "M_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger},\\hat{\\text{H}}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"
msgstr "M_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger},\\hat{\\text{H}}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:137
msgid "Q_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{H}}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"
msgstr "Q_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{H}}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:142
msgid "V_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"
msgstr "V_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:147
msgid "W_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_\\alpha}^{(\\alpha)})^{\\dagger}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"
msgstr "W_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_\\alpha}^{(\\alpha)})^{\\dagger}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:152
msgid "Although the previous equation can be solved classically, each matrix element must be measured on the quantum computer with the corresponding ground state. To use the qEOM as a solver in Qiskit, we have to define a ground state calculation first, explaining the algorithms how to find the ground state. With this the qEOM solver can be initialized:"
msgstr "Embora a equação anterior possa ser resolvida classicamente, cada elemento da matriz deve ser medido no computador quântico com o estado fundamental correspondente. Para usar o qEOM como um solucionador no Qiskit, temos que definir um cálculo do estado fundamental primeiro, explicando aos algoritmos como encontrar o estado fundamental. Com isso o solucionador qEOM pode ser inicializado:"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:187
msgid "The calculation and results"
msgstr "O cálculo e os resultados"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:189
msgid "The results are computed and printed"
msgstr "Os resultados são computados e impressos"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:420
msgid "One can see from these results that one state is missing from the NumPy results. The reason for this is because the spin is also used as a filter and only singlet states are shown. In the following we use a custom filter function to check consistently our results and only filter out states with incorrect number of particle (in this case the number of particle is 2)."
msgstr "Pode-se observar a partir desses resultados que um estado está faltando nos resultados do NumPy. A razão para isso é porque o spin também é usado como um filtro e apenas estados singleto são mostrados. A seguir, utilizamos uma função de filtro personalizada para verificar consistentemente nossos resultados e apenas filtrar estados com números incorretos de partículas (neste caso o número de partículas é 2)."

