msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-13 15:56+0000\n"
"PO-Revision-Date: 2020-09-11 04:16\n"
"Last-Translator: \n"
"Language-Team: Portuguese, Brazilian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pt-BR\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/5_admm_optimizer.po\n"
"X-Crowdin-File-ID: 9156\n"
"Language: pt_BR\n"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:10
msgid "This page was generated from `tutorials/optimization/5_admm_optimizer.ipynb`__."
msgstr "Esta página foi gerada a partir do 'tutoriais/otimizacao/5_otimizador_admm.ipynb'__."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:9
msgid "ADMM Optimizer"
msgstr "Otimizador ADMM"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:21
msgid "Introduction"
msgstr "Introdução"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:32
msgid "The ADMM Optimizer can solve classes of mixed-binary constrained optimization problems, hereafter (MBCO), which often appear in logistic, finance, and operation research. In particular, the ADMM Optimizer here designed can tackle the following optimization problem :math:`(P)`:"
msgstr "O Otimizador ADMM pode resolver classes de problemas de otimização mistos-binários restritos, daqui em diante (MBCO), que geralmente aparecem em pesquisas logísticas, financeiras e de operações. Em particular, o Otimizador ADMM aqui projetado pode resolver o seguinte problema de otimização :math:`(P)`:"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:34
msgid "\\min_{x \\in \\mathcal{X},u\\in\\mathcal{U} \\subseteq \\mathbb{R}^l } \\quad q(x) + \\varphi(u),"
msgstr "\\min_{x \\in \\mathcal{X},u\\in\\mathcal{U} \\subseteq \\mathbb{R}^l } \\quad q(x) + \\varphi(u),"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:39
msgid "subject to the constraints:"
msgstr "sujeito às restrições:"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:41
msgid "\\mathrm{s.t.:~} \\quad G x = b, \\quad  g(x) \\leq 0, \\quad \\ell(x, u) \\leq 0,"
msgstr "\\mathrm{s.t.:~} \\quad G x = b, \\quad  g(x) \\leq 0, \\quad \\ell(x, u) \\leq 0,"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:46
msgid "with the corresponding functional assumptions."
msgstr "com as premissas funcionais correspondentes."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:48
msgid "Function :math:`q: \\mathbb{R}^n \\to \\mathbb{R}` is quadratic, i.e., :math:`q(x) = x^{\\intercal} Q x + a^{\\intercal} x` for a given symmetric squared matrix :math:`Q \\in \\mathbb{R}^n \\times \\mathbb{R}^n, Q = Q^{\\intercal}`, and vector :math:`a \\in \\mathbb{R}^n`;"
msgstr "A função :math:`q: \\mathbb{R}^n \\to \\mathbb{R}` é quadrática, p.ex., :math:`q(x) = x^{\\intercal} Q x + a^{\\intercal} x` para uma determinada matriz quadrada simétrica :math:`Q \\in \\mathbb{R}^n \\times \\mathbb{R}^n, Q = Q^{\\intercal}`, e vetor :math:`a \\in \\mathbb{R}^n`;"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:49
msgid "The set :math:`\\mathcal{X} = \\{0,1\\}^n = \\{x_{(i)} (1-x_{(i)}) = 0, \\forall i\\}` enforces the binary constraints;"
msgstr "O conjunto :math:`\\mathcal{X} = \\{0,1\\}^n = \\{x_{(i)} (1-x_{(i)}) = 0, \\forall i\\}` impõe as restrições binárias;"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:50
msgid "Matrix :math:`G\\in\\mathbb{R}^n \\times \\mathbb{R}^{n'}`, vector :math:`b \\in \\mathbb{R}^{n'}`, and function :math:`g: \\mathbb{R}^n \\to \\mathbb{R}` is convex;"
msgstr "Matriz :math:`G\\in\\mathbb{R}^n \\times \\mathbb{R}^{n'}`, vector :math:`b \\in \\mathbb{R}^{n'}`, e função :math:`g: \\mathbb{R}^n \\to \\mathbb{R}` são convexos;"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:51
msgid "Function :math:`\\varphi: \\mathbb{R}^l \\to \\mathbb{R}` is convex and :math:`\\mathcal{U}` is a convex set;"
msgstr "Função :math:`\\varphi: \\mathbb{R}^l \\to \\mathbb{R}` é convexa e :math:`\\mathcal{U}` é um conjunto convexo;"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:52
msgid "Function :math:`\\ell: \\mathbb{R}^n\\times \\mathbb{R}^l \\to \\mathbb{R}` is *jointly* convex in :math:`x, u`."
msgstr "Função :math:`\\ell: \\mathbb{R}^n\\times \\mathbb{R}^l \\to \\mathbb{R}` é *conjuntamente* convexa em :math:`x, u`."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:63
msgid "In order to solve MBO problems, [1] proposed heuristics for :math:`(P)` based on the Alternating Direction Method of Multipliers (ADMM) [2]. ADMM is an operator splitting algorithm with a long history in convex optimization, and it is known to have residual, objective and dual variable convergence properties, provided that convexity assumptions are holding."
msgstr ""

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:65
msgid "The method of [1] (referred to as 3-ADMM-H) leverages the ADMM operator-splitting procedure to devise a decomposition for certain classes of MBOs into: - a QUBO subproblem to be solved by on the quantum device via variational algorithms, such as VQE or QAOA; - continuous convex constrained subproblem, which can be efficiently solved with classical optimization solvers."
msgstr "O método [1] (referido como 3-ADMM-H) aproveita o procedimento de divisão do operador ADMM para conceber uma decomposição para certas classes de MBOs em: - um subproblema QUBO para ser resolvido no dispositivo quântico através de algoritmos variacionais, tais como VQE ou QAOA; - subproblema contínuo convexo restrítos, que pode ser resolvido eficientemente com os solucionadores de otimização clássica."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:67
msgid "The algorithm 3-ADMM-H works as follows:"
msgstr "O algoritmo 3-ADMM-H funciona da seguinte forma:"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:69
msgid "Initialization phase (set the parameters and the QUBO and convex solvers);"
msgstr "Fase de inicialização (defina os parâmetros, o QUBO e os solucionadores convexos);"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:70
msgid "For each ADMM iterations ($k = 1, 2, :nbsphinx-math:`\\ldots`, $) untill termination:"
msgstr "Para cada iteração ADMM ($k = 1, 2, :nbsphinx-math:`\\ldots`, $) até a finalização:"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:72
msgid "Solve a properly defined QUBO subproblem (with a classical or quantum solver);"
msgstr "Resolva um subproblema QUBO devidamente definido (com um solucionador clássico ou quântico);"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:73
msgid "Solve properly defined convex problems (with a classical solver);"
msgstr "Resolva problemas convexos devidamente definidos (com um solucionador clássico);"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:74
msgid "Update the dual variables."
msgstr "Atualize as variáveis duais."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:76
msgid "Return optimizers and cost."
msgstr "Retornar otimizadores e custo."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:78
msgid "A comprehensive discussion on the conditions for convergence, feasibility and optimality of the algorithm can be found in [1]. A variant with 2 ADMM blocks, namely a QUBO subproblem, and a continuous convex constrained subproblem, is also introduced in [1]."
msgstr "Uma discussão abrangente sobre as condições para a convergência, viabilidade e otimização do algoritmo podem ser encontrados em [1]. Uma variante com 2 blocos ADMM, isto é, um subproblema da QUBO e um subproblema contínuo convexo restrito, também são introduzidos em [1]."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:81
msgid "References"
msgstr "Referências"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:83
msgid "[1] [C. Gambella and A. Simonetto, *Multi-block ADMM heuristics for mixed-binary optimization, on classical and quantum computers,* arXiv preprint arXiv:2001.02069 (2020).](https://arxiv.org/abs/2001.02069)"
msgstr "[1] [C. Gambella and A. Simonetto, *Multi-block ADMM heuristics for mixed-binary optimization, on classical and quantum computers,* arXiv preprint arXiv:2001.02069 (2020).](https://arxiv.org/abs/2001.02069)"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:85
msgid "[2] [S. Boyd, N. Parikh, E. Chu, B. Peleato, and J. Eckstein, *Distributed optimization and statistical learning via the alternating direction method of multipliers,* Foundations and Trends in Machine learning, 3, 1–122 (2011).](https://web.stanford.edu/~boyd/papers/pdf/admm\\_distr\\_stats.pdf)"
msgstr "[2] [S. Boyd, N. Parikh, E. Chu, B. Peleato, and J. Eckstein, *Distributed optimization and statistical learning via the alternating direction method of multipliers,* Foundations and Trends in Machine learning, 3, 1–122 (2011).](https://web.stanford.edu/~boyd/papers/pdf/admm\\_distr\\_stats.pdf)"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:97
msgid "Initialization"
msgstr "Inicialização"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:99
msgid "First of all we load all the packages that we need."
msgstr "Em primeiro lugar, carregamos todos os pacotes de que precisamos."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:137
msgid "We first initialize all the algorithms we plan to use later in this tutorial."
msgstr "Primeiramente, Inicializamos todos os algoritmos que planejamos usar durante este tutorial."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:139
msgid "To solve the QUBO problems we can choose between - ``MinimumEigenOptimizer`` using different ``MinimumEigensolver``, such as ``VQE``, ``QAOA`` or ``NumpyMinimumEigensolver`` (classical) - ``GroverOptimizer`` - ``CplexOptimizer`` (classical, if CPLEX is installed)"
msgstr "Para resolver os problemas QUBO podemos escolher entre - ``MinimumEigenOptimizer`` usando diferentes ``MinimumEigensolver``, tais como ``VQE``, ``QAOA`` ou ``NumpyMinimumEigensolver`` (clássico) - ``GroverOptimizer`` - ``CplexOptimizer`` (clássico, se CPLEX estiver instalado)"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:141
msgid "and to solve the convex continuous problems we can choose between the following classical solvers: - ``CplexOptimizer`` (if CPLEX is installed) - ``CobylaOptimizer``"
msgstr "e para resolver os problemas contínuos convexos, podemos escolher entre os seguintes solucionadores clássicos: - ``CplexOptimizer`` (se o CPLEX estiver instalado) - ``CobylaOptimizer``"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:143
msgid "In case CPLEX is not available, the ``CobylaOptimizer`` (for convex continuous problems) and the ``MinimumEigenOptimizer`` using the ``NumpyMinimumEigensolver`` (for QUBOs) can be used as classical alternatives to CPLEX for testing, validation, and benchmarking."
msgstr "Caso o CPLEX não esteja disponível, o ``CobylaOptimizer`` (para problemas contínuos convexos) e o ``MinimumEigenOptimizer`` usando o ``NumpyMinimumEigensolver`` (para QUBOs) podem ser usados como alternativas clássicas ao CPLEX para teste, validação e benchmarking."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:177
msgid "Example"
msgstr "Exemplo"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:179
msgid "We test 3-ADMM-H algorithm on a simple Mixed-Binary Quadratic Problem with equality and inequality constraints (Example 6 reported in [1]). We first construct a docplex problem and then load it into a ``QuadraticProgram``."
msgstr "Testamos o algoritmo 3-ADMM-H em um problema Quadrático Mixed-Binary simples com restrições de igualdade e desigualdade (Exemplo 6 relatado em [1]). Primeiramente, construímos um problema docplex e, em seguida, carregamos em um ``QuadraticProgram``."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:274
msgid "Classical Solution"
msgstr "Solução clássica"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:276
msgid "3-ADMM-H needs a QUBO optimizer to solve the QUBO subproblem, and a continuous optimizer to solve the continuous convex constrained subproblem. We first solve the problem classically: we use the ``MinimumEigenOptimizer`` with the ``NumPyMinimumEigenSolver`` as a classical and exact QUBO solver and we use the ``CobylaOptimizer`` as a continuous convex solver. 3-ADMM-H supports any other suitable solver available in Qiskit. For instance, VQE, QAOA, and GroverOptimizer can be invoked as quantum solvers, as demonstrated later. If CPLEX is installed, the ``CplexOptimizer`` can also be used as both, a QUBO and convex solver."
msgstr "3-ADMM-H precisa de um otimizador QUBO para resolver o subproblema do QUBO e um otimizador contínuo para resolver o subproblema contínuo convexo restrito. Primeiramente, resolvemos o problema de forma clássica: usamos o ``MinimumEigenOptimizer`` com o ``NumPyMinimumEigenSolver`` como um solucionador QUBO clássico e exato e usamos o ``CobylaOptimizer`` como um solucionador contínuo convexo. 3-ADMM-H suporta qualquer outro solver adequado disponível no Qiskit. Por exemplo, VQE, QAOA e GroverOptimizer podem ser chamados como solucionadores quânticos, como demonstrado mais tarde. Se o CPLEX estiver instalado, o ``CplexOptimizer`` também pode ser usado tanto como um solucionador QUBO ou convexo."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:289
msgid "Parameters"
msgstr "Parâmetros"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:291
msgid "The 3-ADMM-H are wrapped in class ``ADMMParameters``. Customized parameter values can be set as arguments of the class. In this example, parameters :math:`\\rho, \\beta` are initialized to :math:`1001` and :math:`1000`, respectively. The penalization ``factor_c`` of equality constraints :math:`Gx = b` is set to :math:`900`. The tolerance ``tol`` for primal residual convergence is set to ``1.e-6``. In this case, the 3-block implementation is guaranteed to converge for Theorem 4 of [1], because the inequality constraint with the continuous variable is always active. The 2-block implementation can be run by setting ``three_block=False``, and practically converges to a feasible not optimal solution."
msgstr "Os 3-ADMM-H são envolvidos na classe ``ADMMParameters``. Valores de parâmetros customizados podem ser definidos como argumentos da classe. Neste exemplo, os parâmetros :math:`\\rho, \\beta` são inicializados para :math:`1001` e :math:`1000`, respectivamente. A penalização ``factor_c`` das restrições de igualdade :math:`Gx = b` são definidos para :math:`900`. A tolerância ``tol`` para convergência residual primitiva está ajustada para ``1.e-6``. Neste caso, a implementação de 3 blocos está garantida para convergir para o Theorem 4 de [1], porque a restrição de desigualdade com a variável contínua é sempre ativa. A implementação de dois blocos pode ser executada definindo ``three_block=False``, e praticamente converge para uma solução viável e não otimizada."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:342
msgid "Calling 3-ADMM-H algorithm"
msgstr "Chamando algoritmo 3-ADMM-H"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:344
msgid "To invoke the 3-ADMM-H algorithm, an instance of the ``ADMMOptimizer`` class needs to be created. This takes ADMM-specific parameters and the subproblem optimizers separately into the constructor. The solution returned is an instance of ``OptimizationResult`` class."
msgstr "Para invocar o algoritmo 3-ADMM-H, uma instância da classe ``ADMMOptimizer`` precisa ser criada. Isto gera parâmetros específicos de ADMM e otimizadores de subproblemas separadamente para o construtor. A solução retornada é uma instância da classe ``OptimizationResult``."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:388
msgid "Classical Solver Result"
msgstr "Resultado do Solver Clássico"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:390
msgid "The 3-ADMM-H solution can be then printed and visualized. The ``x`` attribute of the solution contains respectively, the values of the binary decision variables and the values of the continuous decision variables. The ``fval`` is the objective value of the solution."
msgstr "A solução 3-ADMM-H pode ser impressa e visualizada. O atributo ``x`` da solução contém respectivamente, os valores das variáveis de decisão binária e os valores das variáveis de decisão contínua. O ``fval`` é o valor objetivo da solução."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:433
msgid "Solution statistics can be accessed in the ``state`` field and visualized. We here display the convergence of 3-ADMM-H, in terms of primal residuals."
msgstr "As estatísticas de solução podem ser acessadas e visualizadas no campo ``state``. Aqui mostramos a convergência de 3-ADMM-H, em termos de resíduos primitivos."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:475
msgid "Quantum Solution"
msgstr "Solução Quântica"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:477
msgid "We now solve the same optimization problem with QAOA as QUBO optimizer, running on simulated quantum device. First, one need to select the classical optimizer of the eigensolver QAOA. Then, the simulation backened is set. Finally, the eigensolver is wrapped into the ``MinimumEigenOptimizer`` class. A new instance of ``ADMMOptimizer`` is populated with QAOA as QUBO optimizer."
msgstr ""

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:520
msgid "Quantum Solver Results"
msgstr "Resultados de Solver Quânticos"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:522
msgid "Here we present the results obtained from the quantum solver. As in the example above ``x`` stands for the solution, the ``fval`` is for objective value."
msgstr ""

