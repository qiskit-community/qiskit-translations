msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-16 19:32+0000\n"
"PO-Revision-Date: 2020-10-16 20:04\n"
"Last-Translator: \n"
"Language-Team: Portuguese, Brazilian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pt-BR\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/4_grover_optimizer.po\n"
"X-Crowdin-File-ID: 9154\n"
"Language: pt_BR\n"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:10
msgid "This page was generated from `tutorials/optimization/4_grover_optimizer.ipynb`__."
msgstr "Esta página foi gerada a partir do 'tutoriais/otimizacao/4_otimizador_grover.ipynb'__."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:9
msgid "Grover Optimizer"
msgstr "Otimizador de Grover"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:21
msgid "Introduction"
msgstr "Introdução"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:23
msgid "Grover Adaptive Search (GAS) has been explored as a possible solution for combinatorial optimization problems, alongside variational algorithms such as Variational Quantum Eigensolver (VQE) and Quantum Approximate Optimization Algorithm (QAOA). The algorithm iteratively applies Grover Search to find the optimum value of an objective function, by using the best-known value from the previous run as a threshold. The adaptive oracle used in GAS recognizes all values above or below the current threshold (for max and min respectively), decreasing the size of the search space every iteration the threshold is updated, until an optimum is found."
msgstr "O GAS (Grover Adaptive Search) tem sido explorado como uma possível solução para problemas de otimização combinatória, ao lado de algoritmos variacionais como o VQE (Variational Quantum Eigensolver) e o QAOA (Quantum Aproximaximate Optimization Algorithm). O algoritmo aplica iterativamente Grover Search para encontrar o valor ótimo de uma função objetivo, ao utilizar o melhor valor conhecido da execução anterior como um limitante. O oráculo adaptado usado no GAS reconhece todos os valores acima ou abaixo do limitante atual (para máximo e mínimo respectivamente), diminuindo o tamanho do espaço de busca a cada iteração o limitante é atualizado, até que seja encontrado um valor ótimo."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:26
msgid "In this notebook we will explore each component of the ``GroverOptimizer``, which utilizes the techniques described in GAS, by minimizing a Quadratic Unconstrained Binary Optimization (QUBO) problem, as described in [1]"
msgstr "Neste notebook exploraremos cada componente do ` ` GroverOptimizer ` `, que utiliza as técnicas descritas no GAS, minimizando um problema do QUBO (Quadratic Unconstrained Binary Optimization), conforme descrito em [1]"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:29
msgid "References"
msgstr "Referências"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:31
msgid "[1] [A. Gilliam, S. Woerner, C. Gonciulea, *Grover Adaptive Search for Constrained Polynomial Binary Optimization,* arXiv preprint arXiv:1912.04088 (2019).](https://arxiv.org/abs/1912.04088)"
msgstr "[1] [A. Gilliam, S. Woerner, C. Gonciulea, *Grover Adaptive Search for Constrained Polynomial Binary Optimization,* arXiv preprint arXiv:1912.04088 (2019).](https://arxiv.org/abs/1912.04088)"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:43
msgid "Grover Adaptive Search"
msgstr "Busca Adaptativa de Grover"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:45
msgid "Grover Search, the core element of GAS, needs three ingredients:"
msgstr "A busca de Grover, elemento principal do GAS, precisa de três ingredientes:"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:47
msgid "A state preparation operator :math:`A` to construct a superposition of all states in the search space."
msgstr "Um operador de preparação de estado :math:` A ` para construir uma superposição de todos os estados no espaço de busca."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:49
msgid "An oracle operator :math:`O`, that recognizes the states of interest and multiplies their amplitudes by -1."
msgstr "Operador do oráculo :math:` O `, que reconhece os estados de interesse e multiplica suas amplitudes por -1."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:51
msgid "The Grover diffusion operator :math:`D`, that multiplies the amplitude of the :math:`|0\\rangle_n` state by -1."
msgstr "O operador de difusão de Grover :math:` D `, que multiplica a amplitude do estado de :math:` | 0\\rangle_n `, por -1."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:53
msgid "While implementations of GAS vary around the specific use case, the general framework still loosely follows the steps described below."
msgstr "Enquanto as implementações de GAS variam em torno de um caso de uso específico, o framework geral ainda segue livremente os passos descritos abaixo."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:59
msgid "|89d9bc7ac9af49eb9cdc972f2cb21bd2|"
msgstr ""

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:65
msgid "``GroverOptimizer`` uses ``QuadraticProgramToNegativeValueOracle`` to construct :math:`A_y` such that it prepares a :math:`n`-qubit register to represent the equal superposition of all :math:`|x\\rangle_n` and a :math:`m`-qubit register to (approximately) represent the corresponding :math:`|Q(x)-y\\rangle_m`. Then, all states with :math:`(Q(x) - y)` negative should be flagged by :math:`O_y`. Note that in the implementation discussed, the oracle operator is actually independent of :math:`y`, but this is not a requirement. For clarity, we will refer to the oracle as :math:`O` when the oracle is independent of :math:`y`."
msgstr "` ` GroverOptimizer ` ` uses ` ` QuadraticProgramToNegativeValueOracle ` ` para construir :math:` A_y ` tal que ele prepara um registo de :math:` n `-qubit para representar a superposição igual de todos os :math:` |x\\rangle_n ` e um registo de :math:` m `-qubit (aproximadamente) que representa o correspondente :math:` | Q (x)-y\\rangle_m `. Em seguida, todos os estados com :math:` (Q (x)-y) ` negativos devem ser sinalizados por :math:` O_y `. Observe que na implementação discutida, o oráculo operador é efetivamente independente de :math:` y `, mas este não é um requisito. Para a clareza, nos referiremos ao oráculo como :math:` O ` quando o oráculo for independente de :math:` y `."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:68
msgid "Put formally, ``QuadraticProgramToNegativeValueOracle`` constructs an :math:`A_y` and :math:`O` such that:"
msgstr "Por formalidade, ` ` QuadraticProgramToNegativeValueOracle ` ` constrói um :math:` A_y ` e :math:` O ` tal que:"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:74
msgid "|eba4fe931f004221a12944a10672751e|"
msgstr ""

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:80
msgid "where :math:`|x\\rangle` is the binary encoding of the integer :math:`x`."
msgstr "onde :math:` |x\\rângulo ` é a codificação binária do número inteiro :math:` x `."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:82
msgid "At each iteration in which the threshold :math:`y` is updated, we adapt :math:`A_y` such that the function values are shifted up or down (for minimum and maximum respectively) by :math:`y`. For example, in the context of finding the minimum, as the value of :math:`y` decreases, the search space (negative values) also decreases, until only the minimum value remains. A concrete example will be explored in the next section."
msgstr "A cada iteração em que o limitante :math:` y ` é atualizado, adaptamos :math:` A_y ` tal que os valores da função são deslocados para cima ou para baixo (para mínimos e máximos, respectivamente) por :math:` y `. Por exemplo, no problema de encontrar o mínimo, como o valor de :math:` y ` diminui, o espaço de busca (valores negativos) também diminui, até que apenas o valor mínimo permaneça. Um exemplo concreto será explorado na próxima seção."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:99
msgid "Find the Minimum of a QUBO Problem using GroverOptimizer"
msgstr "Encontre o Mínimo de um Problema QUBO usando o otimizador de Grover"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:101
msgid "The following is a toy example of a minimization problem."
msgstr "A seguir, um exemplo simples de um problema de minimização."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:103
msgid "\\begin{eqnarray}\n"
"\\min_{x \\in \\{0, 1\\}^3} -2x_1x_3 - x_2x_3 - 1x_1 + 2x_2 - 3x_3.\n"
"\\end{eqnarray}"
msgstr "\\begin{eqnarray}\n"
"\\min_{x \\in \\{0, 1\\}^3} -2x_1x_3 - x_2x_3 - 1x_1 + 2x_2 - 3x_3.\n"
"\\end{eqnarray}"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:110
msgid "For our initial steps, we create a docplex model that defines the problem above, and then use the ``from_docplex()`` function to convert the model to a ``QuadraticProgram``, which can be used to represent a QUBO in Qiskit Optimization."
msgstr "Para as nossas etapas iniciais, criamos um modelo de docplex que define o problema acima e, em então, utilize a função ` ` from_docplex () ` ` para converter o modelo em um ` ` QuadraticProgram ` `, que pode ser usado para representar um QUBO na Otimização do Qiskit."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:205
msgid "Next, we create a ``GroverOptimizer`` that uses 6 qubits to encode the value, and will terminate after there have been 10 iterations of GAS without progress (i.e. the value of :math:`y` does not change). The ``solve()`` function takes the ``QuadraticProgram`` we created earlier, and returns a results object that contains information about the run."
msgstr "Em seguida, criamos um ``GroverOptimizer`` que usa 6 qubits para codificar o valor, e terminaremos depois que houver 10 iterações de GAS sem progresso (ou seja, o valor de :math:`y` não muda). A função ``solve()`` toma o ``QuadraticProgram`` que criamos anteriormente, e retorna um objeto resultante que contém informações sobre a execução."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:250
msgid "This results in the optimal solution :math:`x_0=1`, :math:`x_1=0`, :math:`x_2=1` and the optimal objective value of :math:`-6` (most of the time, since it is a randomized algorithm). In the following, a custom visualization of the quantum state shows a possible run of ``GroverOptimizer`` applied to this QUBO."
msgstr "Este resultado é a solução ótima :math:` x_0 = 1 `, :math:` x_1 = 0 `, :math:` x_2 = 1 ` e o valor objetivo de :math:` -6 ` (na maioria das vezes, considerando que é um algoritmo randomizado). Posteriormente, uma visualização customizada do estado quântico mostra uma possível execução de `` GroverOptimizer `` aplicada a este QUBO."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:256
msgid "|47756c4562204e778814b300a68e2d25|"
msgstr ""

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:262
msgid "Each graph shows a single iteration of GAS, with the current values of :math:`r` (= iteration counter) and :math:`y` (= threshold/offset) shown in the title. The X-axis displays the integer equivalent of the input (e.g. '101' :math:`\\rightarrow` 5), and the Y-axis shows the possible function values. As there are 3 binary variables, there are :math:`2^3=8` possible solutions, which are shown in each graph. The color intensity indicates the probability of measuring a certain result (with bright intensity being the highest), while the actual color indicates the corresponding phase (see phase color-wheel below). Note that as :math:`y` decreases, we shift all of the values up by that amount, meaning there are fewer and fewer negative values in the distribution, until only one remains (the minimum)."
msgstr "Cada gráfico mostra uma única iteração do GAS, com os valores atuais de :math:` r ` (= contador de iteração) e :math:` y ` (= limitante / deslocamento) mostrado no título. O eixo X exibe o equivalente inteiro da entrada (por exemplo, '101' :math:`\\rightarrow ` 5), e o eixo Y mostra os possíveis valores da função. Como existem 3 variáveis binárias, há :math:` 2 ^ 3 = 8 ` possíveis soluções, que são mostradas em cada gráfico. A intensidade da cor indica a probabilidade de medir um determinado resultado (com a maior intensidade de brilho sendo a mais alta), enquanto que a cor atual indica a fase correspondente (veja a roda de cores da fase abaixo). Observe que como :math:` y ` diminui, nós deslocamos todos os valores para cima por essa quantidade, significando que há cada vez menos valores negativos na distribuição, até que apenas um permaneça (o mínimo)."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:269
msgid "|43dcb5e78697486ab40f747e0d99bb6f|"
msgstr ""

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:290
msgid "Check that GroverOptimizer finds the correct value"
msgstr "Verifique se o otimizador de Grover encontra o valor correto"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:292
msgid "We can verify that the algorithm is working correctly using the ``MinimumEigenOptimizer`` in Qiskit."
msgstr "Podemos verificar se o algoritmo está funcionando corretamente usando o ``MinimumEigenOptimizer`` no Qiskit."

