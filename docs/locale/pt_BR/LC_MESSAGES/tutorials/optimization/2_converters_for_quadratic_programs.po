msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-12 15:01+0000\n"
"PO-Revision-Date: 2020-11-12 15:36\n"
"Last-Translator: \n"
"Language-Team: Portuguese, Brazilian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pt-BR\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/2_converters_for_quadratic_programs.po\n"
"X-Crowdin-File-ID: 9150\n"
"Language: pt_BR\n"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:10
msgid "This page was generated from `tutorials/optimization/2_converters_for_quadratic_programs.ipynb`__."
msgstr "Esta página foi gerada a partir do `tutoriais/otimizacao/2_conversores_para_programa_quadratico.ipynb`__."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/optimization/2_converters_for_quadratic_programs.ipynb>`_."
msgstr ""

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:9
msgid "Converters for Quadratic Programs"
msgstr "Conversores para Programas Quadráticos"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:20
msgid "Optimization problems in Qiskit's optimization module are represented with the ``QuadraticProgram`` class, which is generic and powerful representation for optimization problems. In general, optimization algorithms are defined for a certain formulation of a quadratic program and we need to convert our problem to the right type."
msgstr "Problemas de otimização no módulo de otimização do Qiskit são representados com a classe ``QuadraticProgram``, que é uma representação genérica e poderosa para problemas de otimização. Em geral, algoritmos de otimização são definidos para uma determinada formulação de um programa quadrático e precisamos converter o nosso problema para o tipo certo."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:22
msgid "For instance, Qiskit provides several optimization algorithms that can handle Quadratic Unconstrained Binary Optimization (QUBO) problems. These are mapped to Ising Hamiltonians, for which Qiskit uses the ``qiskit.aqua.operators`` module, and then their ground state is approximated. For this optimization commonly known algorithms such as VQE or QAOA can be used as underlying routine. See the following tutorial about the `Minimum Eigen Optimizer <./3_minimum_eigen_optimizer.ipynb>`__ for more detail. Note that also other algorithms exist that work differently, such as the ``GroverOptimizer``."
msgstr "Por exemplo, o Qiskit fornece vários algoritmos de otimização que podem lidar com problemas de Otimização Quadrática Binária Irrestrita (QUBO). Estes são mapeados para Hamiltonianos de Ising, para o qual o Qiskit usa o módulo ``qiskit.aqua.operators``, e então seu estado fundamental é aproximado. Para esta otimização algoritmos comumente conhecidos como VQE ou QAOA podem ser usados como rotinas subjacentes. Veja o tutorial a seguir sobre o `Minimum Eigen Optimizer <./3_minimum_eigen_optimizer.ipynb>`__ para obter mais detalhes. Observe que existem outros algoritmos que funcionam de forma diferente também, como o ``GroverOptimizer``."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:25
msgid "To map a problem to the correct input format, the optimization module of Qiskit offers a variety of converters. In this tutorial we're providing an overview on this functionality. Currently, Qiskit contains the following converters. - ``InequalityToEquality``: converts inequality constraints into equality constraints with additional slack variables. - ``IntegerToBinary``: converts integer variables into binary variables and corresponding coefficients. - ``LinearEqualityToPenalty``: convert equality constraints into additional terms of the object function. - ``QuadraticProgramToQubo``: a wrapper for ``InequalityToEquality``, ``IntegerToBinary``, and ``LinearEqualityToPenalty`` for convenience."
msgstr "Para mapear um problema para o formato de entrada correto, o módulo de otimização do Qiskit oferece uma variedade de conversores. Neste tutorial estamos fornecendo uma visão geral sobre essa funcionalidade. Atualmente, o Qiskit contém os conversores a seguir. - ``InequalityToEquality``: converte restrições de desigualdade em restrições de igualdade com variáveis de folga adicionais. - ``IntegerToBinary``: converte variáveis de número inteiro em variáveis binárias e coeficientes correspondentes. - ``LinearEqualityToPenalty``: converte restrições de igualdade em termos adicionais da função objeto. - ``QuadraticProgramToQubo``: um wrapper para ``InequalityToEquality``, ``IntegerToBinary``, e ``LinearEqualityToPenalty`` por conveniência."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:38
msgid "InequalityToEquality"
msgstr "InequalityToEquality"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:40
msgid "``InequalityToEqualityConverter`` converts inequality constraints into equality constraints with additional slack variables to remove inequality constraints from ``QuadraticProgram``. The upper bounds and the lower bounds of slack variables will be calculated from the difference between the left sides and the right sides of constraints. Signs of slack variables depend on symbols in constraints such as :math:`\\leq` and :math:`\\geq`."
msgstr "``InequalityToEqualityConverter`` converte restrições de desigualdade em restrições de igualdade com variáveis de folga adicionais para remover as restrições de desigualdade do ``QuadraticProgram``. Os limites superiores e inferiores de variáveis de folga serão calculados a partir da diferença entre os lados esquerdo e direito das restrições. Os sinais das variáveis de folga dependem dos símbolos em restrições como :math:`\\leq` e :math:`\\geq`."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:42
msgid "The following is an example of a maximization problem with two inequality constraints. Variable :math:`x` and :math:`y` are binary variables and variable :math:`z` is an integer variable."
msgstr "A seguir, um exemplo de um problema de maximização com duas restrições de desigualdade. As variáveis :math:`x` e :math:`y` são variáveis binárias e variável :math:`z` é uma variável inteira."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:44
msgid "\\begin{aligned}\n"
"   & \\text{maximize}\n"
"       & 2x + y + z\\\\\n"
"   & \\text{subject to:}\n"
"       & x+y+z \\leq 5.5\\\\\n"
"       & & x+y+z \\geq 2.5\\\\\n"
"       & & x, y \\in \\{0,1\\}\\\\\n"
"       & & z \\in \\{0,1,2,3,4,5,6,7\\} \\\\\n"
"\\end{aligned}"
msgstr "\\begin{aligned}\n"
"   & \\text{maximize}\n"
"       & 2x + y + z\\\\\n"
"   & \\text{subject to:}\n"
"       & x+y+z \\leq 5.5\\\\\n"
"       & & x+y+z \\geq 2.5\\\\\n"
"       & & x, y \\in \\{0,1\\}\\\\\n"
"       & & z \\in \\{0,1,2,3,4,5,6,7\\} \\\\\n"
"\\end{aligned}"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:57
msgid "With ``QuadraticProgram``, an optimization model of the problem is written as follows."
msgstr "Com ``QuadraticProgram``, um modelo de otimização do problema é escrito da seguinte forma."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:157
msgid "Call ``convert`` method of ``InequalityToEquality`` to convert."
msgstr "Chame o método ``convert`` da ``InequalityToEquality`` para converter."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:255
msgid "After converting, the formulation of the problem looks like as the follows. As we can see, the inequality constraints are replaced with equality constraints with additional integer slack variables, :math:`xyz\\_leg\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack`."
msgstr "Depois de convertidos, a formulação do problema se parece com a seguinte. Como podemos ver, as restrições de desigualdade são substituídas por restrições de igualdade com variáveis de folga inteiras adicionais, :math:`xyz\\_leg\\text{@}int\\_slack` e :math:`xyz\\_geq\\text{@}int\\_slack`."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:257
msgid "Let us explain how the conversion works. For example, the lower bound of the left side of the first constraint is :math:`0` which is the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Thus, the upperbound of the additional integer variable must be :math:`5` to be able to satisfy even the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Note that we cut off the part after the decimla point in the converted formulation since the left side of the first constraint in the original formulation can be only integer values. For the second constraint, basically we apply the same approach. However, the symol in the second constraint is :math:`\\geq`, so we add minus before :math:`xyz\\_geq\\text{@}int\\_slack` to be able to satisfy even the case of :math:`x=1, y=1`, and :math:`z=7`."
msgstr "Vamos explicar como a conversão funciona. Por exemplo, o limite inferior do lado esquerdo da primeira restrição é :math:`0` que é o caso de :math:`x=0`, :math:`y=0`, e :math:`z=0`. Assim, o limite superior da variável inteira adicional deve ser :math:`5` para ser capaz de satisfazer até mesmo o caso de :math:`x=0`, :math:`y=0`, e :math:`z=0`. Observe que cortamos a parte após o ponto decimal na formulação convertida já que o lado esquerdo da primeira restrição na formulação original pode ser apenas valores inteiros. Para a segunda restrição, basicamente aplicamos a mesma abordagem. No entanto, o símbolo na segunda restrição é :math:`\\geq`, portanto adicionamos um menos antes de :math:`xyz\\_geq\\text{@}int\\_slack` para ser capaz de satisfazer até mesmo o caso de :math:`x=1, y=1`, e :math:`z=7`."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:260
msgid "\\begin{aligned}\n"
"   & \\text{maximize}\n"
"       & 2x + y + z\\\\\n"
"   & \\text{subject to:}\n"
"       & x+y+z+ xyz\\_leg\\text{@}int\\_slack= 5\\\\\n"
"       & & x+y+z+xyz\\_geq\\text{@}int\\_slack= 3\\\\\n"
"       & & x, y \\in \\{0,1\\}\\\\\n"
"       & & z \\in \\{0,1,2,3,4,5,6,7\\} \\\\\n"
"       & & xyz\\_leg\\text{@}int\\_slack \\in \\{0,1,2,3,4,5\\} \\\\\n"
"       & & xyz\\_geq\\text{@}int\\_slack \\in \\{0,1,2,3,4,5,6\\} \\\\\n"
"\\end{aligned}"
msgstr "\\begin{aligned}\n"
"   & \\text{maximize}\n"
"       & 2x + y + z\\\\\n"
"   & \\text{subject to:}\n"
"       & x+y+z+ xyz\\_leg\\text{@}int\\_slack= 5\\\\\n"
"       & & x+y+z+xyz\\_geq\\text{@}int\\_slack= 3\\\\\n"
"       & & x, y \\in \\{0,1\\}\\\\\n"
"       & & z \\in \\{0,1,2,3,4,5,6,7\\} \\\\\n"
"       & & xyz\\_leg\\text{@}int\\_slack \\in \\{0,1,2,3,4,5\\} \\\\\n"
"       & & xyz\\_geq\\text{@}int\\_slack \\in \\{0,1,2,3,4,5,6\\} \\\\\n"
"\\end{aligned}"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:285
msgid "IntegerToBinary"
msgstr "IntegerToBinary"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:296
msgid "``IntegerToBinary`` converts integer variables into binary variables and coefficients to remove integer variables from ``QuadraticProgram``. For converting, bounded-coefficient encoding proposed in `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Eq. (5)) is used. For more detail of the encoding method, please see the paper."
msgstr "``IntegerToBinary`` converte variáveis inteiras em variáveis binárias e coeficientes para remover variáveis inteiras do ``QuadraticProgram``. Para a conversão, a codificação de coeficiente limitado proposta em `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Eq. (5)) é usada. Para obter mais detalhes do método de codificação, por favor, veja o artigo."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:298
msgid "We use the output of ``InequalityToEquality`` as starting point. Variable :math:`x` and :math:`y` are binary variables, while the variable :math:`z` and the slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` are integer variables. We print the problem again for reference."
msgstr "Utilizamos a saída de ``InequalityToEquality`` como ponto de partida. As variáveis :math:`x` e :math:`y` são variáveis binárias, enquanto a variável :math:`z` e as variáveis de folga :math:`xyz\\_leq\\text{@}int\\_slack` e :math:`xyz\\_geq\\text{@}int\\_slack` são variáveis inteiras. Imprimimos o problema novamente para referência."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:384
msgid "Call ``convert`` method of ``IntegerToBinary`` to convert."
msgstr "Chame o método ``convert`` da ``IntegerToBinary`` para converter."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:494
msgid "After converting, integer variables :math:`z` is replaced with three binary variables :math:`z\\text{@}0`, :math:`z\\text{@}1` and :math:`z\\text{@}2` with coefficients 1, 2 and 4, respectively as the above. The slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` that were introduced by ``InequalityToEquality`` are also both replaced with three binary variables with coefficients 1, 2, 2, and 1, 2, 3, respectively."
msgstr "Após a conversão, a variável inteira :math:`z` é substituída por três variáveis binárias :math:`z\\text{@}0`, :math:`z\\text{@}1` e :math:`z\\text{@}2` com coeficientes 1, 2 e 4, respectivamente como as acima. As variáveis de folga :math:`xyz\\_leq\\text{@}int\\_slack` e :math:`xyz\\_geq\\text{@}int\\_slack` que foram introduzidas pela ``InequalityToEquality`` também são ambas substituídas por três variáveis binárias com coeficientes 1, 2, 2 e 1, 2, 3, respectivamente."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:496
msgid "Note: Essentially the coefficients mean that the sum of these binary variables with coefficients can be the sum of a subset of :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, and :math:`\\{1, 2, 3\\}` to represent that acceptable values :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}`, and :math:`\\{0, \\ldots, 6\\}`, which respects the lower bound and the upper bound of original integer variables correctly."
msgstr "Nota: Essencialmente, os coeficientes significam que a soma dessas variáveis binárias com coeficientes pode ser a soma de um subconjunto de :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, e :math:`\\{1, 2, 3\\}` para representar os valores aceitáveis :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}`, e :math:`\\{0, \\ldots, 6\\}`, que respeitam corretamente o limite inferior e o limite superior das variáveis inteiras originais."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:498
msgid "``IntegerToBinary`` also provides ``interpret`` method that is the functionality to translate a given binary result back to the original integer representation."
msgstr "``IntegerToBinary`` também fornece o método ``interpret`` que é a funcionalidade para traduzir um resultado binário de volta para a representação inteira original."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:510
msgid "LinearEqualityToPenalty"
msgstr "LinearEqualityToPenalty"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:521
msgid "``LinearEqualityToPenalty`` converts linear equality constraints into additional quadratic penalty terms of the objective function to map ``QuadraticProgram`` to an unconstrained form. An input to the converter has to be a ``QuadraticProgram`` with only linear equality constraints. Those equality constraints, e.g. :math:`\\sum_i a_i x_i = b` where :math:`a_i` and :math:`b` are numbers and :math:`x_i` is a variable, will be added to the objective function in the form of :math:`M(b - \\sum_i a_i x_i)^2` where :math:`M` is a large number as penalty factor. By default :math:`M= 1e5`. The sign of the term depends on whether the problem type is a maximization or minimization."
msgstr "``LinearEqualityToPenalty`` converte restrições lineares de igualdade em termos quadráticos de penalidade adicionais da função objetiva para mapear ``QuadraticProgram`` para uma forma não restrita. Uma entrada para o conversor tem que ser um ``QuadraticProgram`` apenas com restrições lineares de igualdade. Aquelas restrições de igualdade, por exemplo, :math:`\\sum_i a_i x_i = b` onde :math:`a_i` e :math:`b` são números e :math:`x_i` é uma variável, serão adicionadas à função objetiva na forma de :math:`M(b - \\sum_i a_i x_i)^2` onde :math:`M` é um número grande como fator de penalidade. Por padrão :math:`M= 1e5`. O sinal do termo depende de se o tipo de problema é uma maximização ou minimização."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:524
msgid "We use the output of ``IntegerToBinary`` as starting point, where all variables are binary variables and all inequality constraints have been mapped to equality constraints. We print the problem again for reference."
msgstr "Utilizamos a saída de ``IntegerToBinary`` como ponto de partida, onde todas as variáveis são variáveis binárias e todas as restrições de desigualdade foram mapeadas para restrições de igualdade. Imprimimos o problema novamente para referência."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:622
msgid "Call ``convert`` method of ``LinearEqualityToPenalty`` to convert."
msgstr "Chame o método ``convert`` da ``LinearEqualityToPenalty`` para converter."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:776
msgid "After converting, the equality constraints are added to the objective function as additional terms with the default penalty factor :math:`M=1e5`. The resulting problem is now a QUBO and compatible with many quantum optimization algorithms such as VQE, QAOA and so on."
msgstr "Após a conversão, as restrições de igualdade são adicionadas à função objetiva como termos adicionais com o fator de penalidade padrão :math:`M=1e5`. O problema resultante é agora uma QUBO e compatível com muitos algoritmos de otimização quântica como VQE, QAOA e outros."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:787
msgid "This gives the same result as before."
msgstr "Isso dá o mesmo resultado de antes."

