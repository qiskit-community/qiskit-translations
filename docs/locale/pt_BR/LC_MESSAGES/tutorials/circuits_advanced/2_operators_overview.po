msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-14 09:35+0000\n"
"PO-Revision-Date: 2020-08-17 14:27\n"
"Last-Translator: \n"
"Language-Team: Portuguese, Brazilian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pt-BR\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/2_operators_overview.po\n"
"X-Crowdin-File-ID: 9124\n"
"Language: pt_BR\n"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:10
msgid "This page was generated from `tutorials/circuits_advanced/2_operators_overview.ipynb`__."
msgstr "Esta página foi gerada a partir do `tutorials/circuits_advanced/2_operators_overview.ipynb`__."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:9
msgid "Operators"
msgstr "Operadores"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:39
msgid "Operator Class"
msgstr "Classe do operador"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:41
msgid "The ``Operator`` class is used in Qiskit to represent matrix operators acting on a quantum system. It has several methods to build composite operators using tensor products of smaller operators, and to compose operators."
msgstr "A classe ``Operator`` é usada no Qiskit para representar operadores matriciais que atuam em um sistema quântico. Possui vários métodos para construir operadores compostos utilizando produtos tensoriais de operadores menores e para compor operadores."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:44
msgid "Creating Operators"
msgstr "Criando Operadores"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:46
msgid "The easiest way to create an operator object is to initialize it with a matrix given as a list or a Numpy array. For example, to create a two-qubit Pauli-XX operator:"
msgstr "A maneira mais fácil de criar um objeto operador é inicializá-lo com uma matriz dada como uma lista ou como um arranjo Numpy. Por exemplo, para criar um operador Pauli-XX de dois qubits:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:97
msgid "Operator Properties"
msgstr "Propriedades do operador"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:99
msgid "The operator object stores the underlying matrix, and the input and output dimension of subsystems."
msgstr "O objeto operador armazena a matriz subjacente e a dimensão de entrada e de saída dos subsistemas."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:101
msgid "``data``: To access the underly Numpy array, we may use the ``Operator.data`` property."
msgstr "``data``: Para acessar a matriz Numpy subjacente, nós podemos utilizar a propriedade ``Operator.data``."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:102
msgid "``dims``: To return the total input and output dimension of the operator, we may use the ``Operator.dim`` property. *Note: the output is returned as a tuple ``(input_dim, output_dim)``, which is the reverse of the shape of the underlying matrix.*"
msgstr "``dims``: Para devolver a dimensão total de entrada e saída do operador, podemos usar a propriedade ``Operator.dim``. *Nota: a saída é retornada como um tuple ``(input_dim, output_dim)``, que é o reverso da forma da matriz subjacente.*"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:181
msgid "Input and Output Dimensions"
msgstr "Dimensões de Entrada e Saída"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:183
msgid "The operator class also keeps track of subsystem dimensions, which can be used for composing operators together. These can be accessed using the ``input_dims`` and ``output_dims`` functions."
msgstr "A classe de operador também acompanha as dimensões dos subsistemas, que podem ser utilizadas para a composição conjunta dos operadores. Estes podem ser acessados utilizando as funções ``input_dims`` e ``output_dims``."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:185
msgid "For :math:`2^N` by :math:`2^M` operators, the input and output dimension will be automatically assumed to be M-qubit and N-qubit:"
msgstr "Para os operadores :math:`2^N` por :math:`2^M`, a dimensão de entrada e saída será assumida automaticamente como M-qubit e N-qubit:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:229
msgid "If the input matrix is not divisible into qubit subsystems, then it will be stored as a single-qubit operator. For example, if we have a :math:`6\\times6` matrix:"
msgstr "Se a matriz de entrada não for divisível em subsistemas de qubit, então ela será armazenada como um operador de único qubit. Por exemplo, se tivermos uma matriz :math:`6\\times6`:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:273
msgid "The input and output dimension can also be manually specified when initializing a new operator:"
msgstr "A dimensão de entrada e saída também pode ser especificada manualmente ao inicializar um novo operador:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:353
msgid "We can also extract just the input or output dimensions of a subset of subsystems using the ``input_dims`` and ``output_dims`` functions:"
msgstr "Nós também podemos extrair apenas as dimensões de entrada ou saída de um subconjunto de subsistemas usando as funções ``input_dims`` e ``output_dims``:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:397
msgid "Converting classes to Operators"
msgstr "Convertendo classes para Operadores"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:399
msgid "Several other classes in Qiskit can be directly converted to an ``Operator`` object using the operator initialization method. For example:"
msgstr "Várias outras classes no Qiskit podem ser diretamente convertidas para um objeto ``Operator`` utilizando o método de inicialização do operador. Por exemplo:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:401
msgid "``Pauli`` objects"
msgstr "Objetos ``Pauli``"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:402
msgid "``Gate`` and ``Instruction`` objects"
msgstr "Objetos de ``Gate`` e ``Instruction``"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:403
msgid "``QuantumCircuits`` objects"
msgstr "Objetos ``QuantumCircuits``"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:405
msgid "Note that the last point means we can use the ``Operator`` class as a unitary simulator to compute the final unitary matrix for a quantum circuit, without having to call a simulator backend. If the circuit contains any unsupported operations, an exception will be raised. Unsupported operations are: measure, reset, conditional operations, or a gate that does not have a matrix definition or decomposition in terms of gate with matrix definitions."
msgstr "Note que o último ponto significa que podemos usar a classe ``Operator`` como um simulador unitário para calcular a matriz unitária final para um circuito quântico, sem ter que chamar um simulador de backend. Se o circuito contiver quaisquer operações não suportadas, uma exceção será levantada. Operações não suportadas são: medida, redefinir, operações condicionais, ou um gate que não tenha uma definição de matriz ou decomposição em termos de gate com definição de matriz."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:595
msgid "Using Operators in circuits"
msgstr "Usando Operadores em circuitos"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:597
msgid "Unitary ``Operators`` can be directly inserted into a ``QuantumCircuit`` using the ``QuantumCircuit.append`` method. This converts the ``Operator`` into a ``UnitaryGate`` object, which is added to the circuit."
msgstr "``Operators`` unitários podem ser diretamente inseridos em um ``QuantumCircuit`` usando o método``QuantumCircuito.append``. Isso converte o ``Operator`` em um objeto ``UnitaryGate``, que é adicionado ao circuito."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:599
msgid "If the operator is not unitary, an exception will be raised. This can be checked using the ``Operator.is_unitary()`` function, which will return ``True`` if the operator is unitary and ``False`` otherwise."
msgstr "Se o operador não for unitário, uma exceção será gerada. Isto pode ser verificado usando a função ``Operator.is _unitary()``, que retornará ``True`` se o operador for unitário e ``False``, caso contrário."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:636
msgid "Note that in the above example we initialize the operator from a ``Pauli`` object. However, the ``Pauli`` object may also be directly inserted into the circuit itself and will be converted into a sequence of single-qubit Pauli gates:"
msgstr "Note que no exemplo acima nós inicializamos o operador de um objeto ``Pauli``. No entanto, o objeto ``Pauli`` também pode ser diretamente inserido no próprio circuito e será convertido em uma sequência de gates Pauli de um único qubit:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:745
msgid "Combining Operators"
msgstr "Combinando Operadores"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:747
msgid "Operators my be combined using several methods."
msgstr "Operadores podem ser combinados através de vários métodos."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:750
msgid "Tensor Product"
msgstr "Produto do Tensor"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:752
msgid "Two operators :math:`A` and :math:`B` may be combined into a tensor product operator :math:`A\\otimes B` using the ``Operator.tensor`` function. Note that if both A and B are single-qubit operators, then ``A.tensor(B)`` = :math:`A\\otimes B` will have the subsystems indexed as matrix B on subsystem 0, and matrix :math:`A` on subsystem 1."
msgstr "Dois operadores :math:`A` e :math:`B` podem ser combinados em um operador de produto de tensor :math:`A\\otimes B` usando a função ``Operator.tensor``. Note que se A e B são operadores de um único qubit, então ``A.tensor(B)`` = :math:`A\\otimes B` terão os subsistemas indexados como matriz B no subsistema 0, e a matriz :math:`A` no subsistema 1."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:804
msgid "Tensor Expansion"
msgstr "Expansão de Tensor"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:806
msgid "A closely related operation is ``Operator.expand``, which acts like a tensor product but in the reverse order. Hence, for two operators :math:`A` and :math:`B` we have ``A.expand(B)`` = :math:`B\\otimes A` where the subsystems indexed as matrix A on subsystem 0, and matrix :math:`B` on subsystem 1."
msgstr "Uma operação próxima é a ``Operator.expand``, que atua como um produto de tensor, mas na ordem inversa. Portanto, para os dois operadores :math:`A` e :math:`B` temos``A.expand(B)`` = :math:`B\\otimes A` onde os subsistemas indexaram como matriz A no subsistema 0, e matriz :math:`B` no subsistema 1."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:858
msgid "Composition"
msgstr "Composição"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:860
msgid "We can also compose two operators :math:`A` and :math:`B` to implement matrix multiplication using the ``Operator.compose`` method. We have that ``A.compose(B)`` returns the operator with matrix :math:`B.A`:"
msgstr "Também podemos compor dois operadores :math:`A` e :math:`B` para implementar a multiplicação da matriz usando o método ``Operator.compose``. Temos que o ``A.compose(B)`` retorna o operador com matriz :math:`B.A`:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:907
msgid "We can also compose in the reverse order by applying :math:`B` in front of :math:`A` using the ``front`` kwarg of ``compose``: ``A.compose(B, front=True)`` = :math:`A.B`:"
msgstr "Também podemos compor na ordem inversa aplicando :math:`B` na frente de :math:`A` usando o ``front`` kwarg de ``compose``: ``A. ompose(B, front=True)`` = :math:`A.B`:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:955
msgid "Subsystem Composition"
msgstr "Composição do Subsistema"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:957
msgid "Note that the previous compose requires that the total output dimension of the first operator :math:`A` is equal to total input dimension of the composed operator :math:`B` (and similarly, the output dimension of :math:`B` must be equal to the input dimension of :math:`A` when composing with ``front=True``)."
msgstr "Note que a composição anterior requer que a dimensão de saída total do primeiro operador :math:`A` seja igual à dimensão de entrada total do operador composto :math:`B` (e da mesma forma, a dimensão de saída de :math:`B` deve ser igual à dimensão de entrada de :math:`A` ao compor com ``front=True``)."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:959
msgid "We can also compose a smaller operator with a selection of subsystems on a larger operator using the ``qargs`` kwarg of ``compose``, either with or without ``front=True``. In this case, the relevant input and output dimensions of the subsystems being composed must match. *Note that the smaller operator must always be the argument of ``compose`` method.*"
msgstr "Também podemos compor um operador menor com uma seleção de subsistemas em um operador maior usando o ``qargs`` kwarg de ``compose``, com ou sem ``front=True``. Neste caso, as dimensões relevantes de entrada e saída dos subsistemas que estão a ser compostos devem corresponder. *Observe que o operador menor deve sempre ser o argumento do método ``compose``.*"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:961
msgid "For example, to compose a two-qubit gate with a three-qubit Operator:"
msgstr "Por exemplo, para escrever um gate de dois qubit com um Operador de três qubit:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1103
msgid "Linear combinations"
msgstr "Combinações lineares"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1105
msgid "Operators may also be combined using standard linear operators for addition, subtraction and scalar multiplication by complex numbers."
msgstr "Os operadores também podem ser combinados utilizando operadores lineares padrão para adição, subtração e multiplicação escalar por números complexos."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1159
msgid "An important point is that while ``tensor``, ``expand`` and ``compose`` will preserve the unitarity of unitary operators, linear combinations will not; hence, adding two unitary operators will, in general, result in a non-unitary operator:"
msgstr "Um ponto importante é que, enquanto ``tensor``, ``expand`` e ``compose`` irão preservar a unidade de operadores unitários, combinações lineares não terão o mesmo efeito; portanto, adicionar dois operadores unitários irá, em geral, resultar num operador não unitário:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1201
msgid "Implicit Conversion to Operators"
msgstr "Conversão Implícita para Operadores"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1203
msgid "Note that for all the following methods, if the second object is not already an ``Operator`` object, it will be implicitly converted into one by the method. This means that matrices can be passed in directly without being explicitly converted to an ``Operator`` first. If the conversion is not possible, an exception will be raised."
msgstr "Note que para todos os seguintes métodos, se o segundo objeto não é já um objeto ``Operator``, ela será implicitamente convertida em um pelo método. Isto significa que matrizes podem ser passadas diretamente sem serem explicitamente convertidas para um ``Operator`` primeiro. Se a conversão não for possível, uma exceção será gerada."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1250
msgid "Comparison of Operators"
msgstr "Comparação de Operadores"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1252
msgid "Operators implement an equality method that can be used to check if two operators are approximately equal."
msgstr "Os operadores implementam um método de igualdade que pode ser utilizado para verificar se dois operadores são aproximadamente iguais."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1293
msgid "Note that this checks that each matrix element of the operators is approximately equal; two unitaries that differ by a global phase will not be considered equal:"
msgstr "Note que isso verifica que cada elemento matrix dos operadores é aproximadamente igual; duas unidades que diferem por uma fase global não serão consideradas iguais:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1335
msgid "Process Fidelity"
msgstr "Fidelidade de Processo"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1337
msgid "We may also compare operators using the ``process_fidelity`` function from the *Quantum Information* module. This is an information theoretic quantity for how close two quantum channels are to each other, and in the case of unitary operators it does not depend on global phase."
msgstr "Podemos também comparar operadores usando a função ``process_fidelity`` a partir do módulo *Informações Quânticas*. Esta é uma informação sobre a quantidade teórica de como dois canais quânticos são próximos um do outro, e no caso dos operadores unitários, isso não depende da fase global."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1383
msgid "Note that process fidelity is generally only a valid measure of closeness if the input operators are unitary (or CP in the case of quantum channels), and an exception will be raised if the inputs are not CP."
msgstr "Observe que a fidelidade do processo, geralmente, é apenas uma medida válida de proximidade se os operadores de entrada são unitários (ou CP no caso dos canais quânticos), e uma exceção será levantada se as entradas não forem CP."

