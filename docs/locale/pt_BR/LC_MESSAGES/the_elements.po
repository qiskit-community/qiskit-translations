msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-16 10:37+0000\n"
"PO-Revision-Date: 2020-07-27 18:47\n"
"Last-Translator: \n"
"Language-Team: Portuguese, Brazilian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pt-BR\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/the_elements.po\n"
"X-Crowdin-File-ID: 7220\n"
"Language: pt_BR\n"

#: ../../the_elements.rst:5
msgid "The Qiskit Elements"
msgstr "Os Elementos Qiskit"

#: ../../the_elements.rst:14
msgid "Terra"
msgstr "Terra"

#: ../../the_elements.rst:16
msgid "Terra, the ‘earth’ element, is the foundation on which the rest of Qiskit lies. Terra provides a bedrock for composing quantum programs at the level of circuits and pulses, to optimize them for the constraints of a particular device, and to manage the execution of batches of experiments on remote-access devices. Terra defines the interfaces for a desirable end-user experience, as well as the efficient handling of layers of optimization, pulse scheduling and backend communication."
msgstr "Terra, o elemento 'terra', é a base sobre a qual reside o resto do Qiskit. Terra fornece um alicerce para compor programas quânticos no nível de circuitos e pulsos, para otimizá-los para as restrições de um dispositivo, em particular, e para gerenciar a execução de grupos de experimentos em dispositivos de acesso remoto. Terra define as interfaces para uma experiência de usuário final desejável, bem como, a manipulação eficiente de camadas de otimização, planejamento de pulso e comunicação de backend."

#: ../../the_elements.rst:23
msgid "Qiskit Terra is organized in six main modules:"
msgstr "O Qiskit Terra é organizado em seis módulos principais:"

#: ../../the_elements.rst:25
msgid ":mod:`qiskit.circuit` A quantum circuit is a model for quantum computing in which a computation is done by performing a sequence of quantum operations (usually gates) on a register of qubits. A quantum circuit usually starts with the qubits in the :math:`|0,…,0>` state and these gates evolve the qubits to states that cannot be efficiently represented on a classical computer. To extract information on the state a quantum circuit must have a measurement which maps the outcomes (possible random due to the fundamental nature of quantum systems) to classical registers which can be efficiently represented."
msgstr ":mod:'qiskit.circuit' Um circuito quântico é um modelo para computação quântica em que um cálculo é feito realizando uma sequência de operações quânticas (geralmente portões) em um registro de qubits. Um circuito quântico geralmente começa com os qubits em um estado :math:'|0,…,0>' e esses portões alteram os qubits para estados que não podem ser representados, eficientemente, em um computador clássico. Para extrair informações sobre o estado, um circuito quântico deve ter uma medição que mapeie os resultados (possível aleatório, devido à natureza fundamental dos sistemas quânticos) aos registros clássicos, que assim podem ser eficientemente representados."

#: ../../the_elements.rst:34
msgid ":mod:`qiskit.pulse` A pulse schedule is set of pulses which are sent to a quantum experiment that are applied to a channel (experimental input line). This is a lower level than circuits and requires each gate in the circuit to be  represented as a set of pulses. At this level the experiments can be designed to reduce errors (dynamical decoupling, error mitigation, and optimal pulse shapes)."
msgstr ":mod:` qiskit.pulse ` Um cronograma de pulso é um conjunto de pulsos que são enviados para um experimento quântico e que são aplicados em um canal (linha de entrada experimental). Este é um nível inferior ao de circuitos e requer que cada portão no circuito seja representado como um conjunto de pulsos. Neste nível, os experimentos podem ser projetados para reduzir erros (dissociação dinâmica, mitigação de erros e formas de pulso ideais)."

#: ../../the_elements.rst:40
msgid ":mod:`qiskit.transpiler` A major part of research on quantum computing is working out how to run a quantum circuits on real devices.  In these devices, experimental errors and decoherence introduce errors during computation. Thus, to obtain a robust implementation it is essential to reduce the number of gates and the overall running time of the quantum circuit. The transpiler introduces the concept of a pass manager to allow users to explore optimization and find better quantum circuits for their given algorithm. We call it a transpiler as the end result is still a circuit."
msgstr ":mod:` qiskit.transpiler ` Uma grande parte da pesquisa sobre computação quântica está trabalhando em como executar um circuito quântico em dispositivos reais.  Nestes dispositivos, erros experimentais e de coerência introduzem erros, durante o processamento. Assim, para obter uma implementação robusta, é essencial reduzir o número de portões e o tempo de execução geral do circuito quântico. O transpilador introduz o conceito de um gerenciador de passarelas para permitir que os usuários explorem a otimização e encontrem os melhores circuitos quânticos para dado algoritmo. Chamamos de transpilador já que o resultado final ainda é um circuito."

#: ../../the_elements.rst:49
msgid ":mod:`qiskit.providers` Once the user has made the circuits to run on the backend they need to have a convenient way of working with it. In Terra we do this using four parts:"
msgstr ":mod:` qiskit.providers ` Uma vez que o usuário fez os circuitos para rodar no backend, eles precisam ter uma maneira conveniente de trabalhar com ele. No Terra fazemos isso usando quatro partes:"

#: ../../the_elements.rst:53
msgid "A ``Provider`` is an entity that implements the abstract base class :class:`~qiskit.providers.BaseProvider` and provides access to a group of different backends (for example, backends available through the `IBM Quantum Experience <https://quantum-computing.ibm.com>`__). It interacts with those backends to, for example, find out which ones are available, or retrieve an instance of a particular backend."
msgstr "O ` ` Provider ` ` é uma entidade que implementa a classe de base abstrata :class:` ~qiskit.providers.BaseProvider ` e fornece acesso a um grupo de diferentes backends (por exemplo, backends disponíveis, através do IBM Quantum Experience <https://quantum-computing.ibm.com>` __). Ele interage com aqueles backends para, por exemplo, descobrir quais estão disponíveis, ou recuperar uma instância de um backend particular."

#: ../../the_elements.rst:59
msgid "A ``Backend`` is an entity that implements the abstract base class :class:`~qiskit.providers.Backend` represent either a simulator or a real quantum computer and are responsible for running quantum circuits and returning results. They have a run method which takes in a `qobj` as input and returns a `BaseJob` object. This object allows asynchronous running of jobs for retrieving results from a backend when the job is completed."
msgstr "Um ` ` Backend ` ` é uma entidade que implementa a classe de base abstrata :class:` ~qiskit.providers.Backend ` representam um simulador ou um computador quântico real e são responsáveis por executar circuitos quânticos e retornar os resultados. Eles têm um método de execução que leva um ` qobj ` (objeto quântico) como entrada e retorna um objeto ` BaseJob `. Este objeto permite a execução assíncrona de trabalhos para recuperação de resultados de um backend, quando a tarefa é concluída."

#: ../../the_elements.rst:66
msgid "``Job`` instances are implementations of the abstract base class :class:`~qiskit.providers.BaseJob` and can be thought of as the “ticket” for a submitted job. They find out the execution’s state at a given point in time (for example, if the job is queued, running, or has failed) and also allow control over the job."
msgstr "Instâncias `` Job ` ` são implementações da classe de base abstrata :class:` ~qiskit.providers.BaseJob ` e podem ser pensadas como o \"ticket\" para um trabalho enviado. Eles identificam o estado da execução em um determinado ponto no tempo (por exemplo, se o trabalho foi enfileirado, está executando ou tiver falhado) e também permitem o controle sobre o processo."

#: ../../the_elements.rst:71
msgid ":class:`~qiskit.result.Result` Once the job has finished Terra allows the results to be obtained from the remote backends using ``result = job.result()``. This result object holds the quantum data and the most common way of interacting with it is by using ``result.get_counts(circuit)``. This method allows the user to get the raw counts from the quantum circuit and use them for more analysis with quantum information tools provided by Terra."
msgstr ":class:` ~qiskit.result.Result ` Uma vez que o `job` tenha terminado, o Terra permite que os resultados sejam obtidos, a partir dos backends remotos utilizando ` ` result = job.result () ` `. Este objeto de resultado contém os dados quânticos e a forma mais comum de interagir com ele é utilizando ` ` result.get_counts (circuito) ` `. Este método permite que o usuário consiga as contagens brutas do circuito quântico e use-as para mais análises com ferramentas de informação quânticas fornecidas pelo Terra."

#: ../../the_elements.rst:79
msgid ":mod:`qiskit.quantum_info` To perform more advanced algorithms and analysis of the circuits run on the quantum computer, it is important to have tools to implement simple quantum information tasks. These include methods to both estimate metrics and generate quantum states, operations, and channels."
msgstr ":mod:` qiskit.quantum_info ` Para executar algoritmos mais avançados e análise dos circuitos executados no computador quântico, é importante ter ferramentas para implementar tarefas simples de informação quântica. Estas incluem métodos para estimar métricas e gerar estados quânticos, operações e canais."

#: ../../the_elements.rst:85
msgid ":mod:`qiskit.visualization` In Terra we have many tools to visualize a quantum circuit. This allows a quick inspection of the quantum circuit to make sure it is what the user wanted to implement. There is a text, python and latex version. Once the circuit has run it is important to be able to view the output. There is a simple function (:func:`~qiskit.visualization.plot_histogram`) to plot the results from a quantum circuit including an interactive version. There is also a function :func:`~qiskit.visualization.plot_state` and :func:`~qiskit.visualization.plot_bloch_vector` that allow the plotting of a quantum state."
msgstr ":mod:` qiskit.visualization ` Em Terra temos muitas ferramentas para visualizar um circuito quântico. Isto permite uma inspeção rápida do circuito quântico, para ter certeza, de que é o que o usuário queria implementar. Há uma versão em texto, python e látex. Uma vez que o circuito tenha sido executado, é importante ser capaz de visualizar a saída. Há uma função simples (:func:` ~qiskit.visualization.plot_histogram `) para plotar os resultados de um circuito quântico, incluindo uma versão interativa. Há também uma função :func:` ~qiskit.visualization.plot_state ` e :func:` ~qiskit.visualization.plot_bloch_vetor ` que permite a plotagem de um estado quântico."

#: ../../the_elements.rst:98
msgid "Aer"
msgstr "Aer"

#: ../../the_elements.rst:100
msgid "Aer, the ‘air’ element, permeates all Qiskit elements. To really speed up development of quantum computers we need better simulators, emulators and debuggers. Aer helps us understand the limits of classical processors by demonstrating to what extent they can mimic quantum computation. Furthermore, we can use Aer to verify that current and near-future quantum computers function correctly. This can be done by stretching the limits of simulation, and by simulating the effects of realistic noise on the computation."
msgstr "Aer, o elemento 'ar', permeia todos os elementos Qiskit. Para realmente acelerar o desenvolvimento de computadores quânticos, precisamos de melhores simuladores, emuladores e depuradores. Aer nos ajuda a entender os limites dos processadores clássicos, demonstrando até que ponto eles podem mimetizar a computação quântica. Além disso, podemos usar o Aer para verificar se os computadores quânticos atuais e, os do futuro próximo, funcionam corretamente. Isso pode ser feito esticando os limites da simulação e simulando os efeitos de ruído realista sobre a computação."

#: ../../the_elements.rst:107
msgid "Aer provides a high performance simulator framework for quantum circuits using the Qiskit software stack. It contains optimized C++ simulator backends for executing circuits compiled in Terra. Aer also provides tools for constructing highly configurable noise models for performing realistic noisy simulations of the errors that occur during execution on real devices."
msgstr "O Aer fornece uma estrutura de simulador de alto desempenho para circuitos quânticos usando a pilha de software Qiskit. Ele contém backends de simulador em C++ otimizados para execução de circuitos compilados no Terra. O Aer também fornece ferramentas para a construção de modelos de ruído, altamente configuráveis, para a realização de simulações ruidosas realistas dos erros, que ocorrem, durante a execução em dispositivos reais."

#: ../../the_elements.rst:113
msgid "Qiskit Aer includes three high performance simulator backends:"
msgstr "O Qiskit Aer inclui três backends de simulador de alto desempenho:"

#: ../../the_elements.rst:126
msgid ":class:`~qiskit.providers.aer.QasmSimulator`"
msgstr ":class:` ~qiskit.providers.aer.QasmSimulator `"

#: ../../the_elements.rst:116
msgid "Allows ideal and noisy multi-shot execution of qiskit circuits and returns counts or memory. There are multiple methods that can be used that simulate different circuits more efficiently. These include:"
msgstr "Permite a execução de múltiplos disparos ideais e com ruídos de circuitos qiskit e retorna contagens ou memória. Existem vários métodos que podem ser usados para simular diferentes circuitos de forma mais eficiente. Estes incluem:"

#: ../../the_elements.rst:120
msgid "*statevector* - Uses a dense statevector simulation."
msgstr "*statevector* - Usa uma simulação de estado densa."

#: ../../the_elements.rst:121
msgid "*stabilizer* - Uses a Clifford stabilizer state simulator that is only valid for Clifford circuits and noise models."
msgstr "*stabilizer* - Usa um simulador de estado de estabilização Clifford, que é válido apenas para circuitos Clifford e modelos com ruído."

#: ../../the_elements.rst:123
msgid "*extended_stabilizer* - Uses an approximate simulator that decomposes circuits into stabilizer state terms, the number of which grows with the number of non-Clifford gates."
msgstr "*extended_stabilizer* - Usa um simulador próximo, que decompõe circuitos em termos de estado de estabilização, cujo número cresce com o número de portões que não usam Clifford."

#: ../../the_elements.rst:126
msgid "*matrix_product_state* - Uses a Matrix Product State (MPS) simulator."
msgstr "*matrix_product_state* - Usa um simulador de Matriz de Estado do Produto (MPS)."

#: ../../the_elements.rst:130
msgid ":mod:`~qiskit.providers.aer.StatevectorSimulator`"
msgstr ":mod:` ~qiskit.providers.aer.StatevectorSimulator `"

#: ../../the_elements.rst:129
msgid "Allows ideal single-shot execution of qiskit circuits and returns the final statevector of the simulator after application."
msgstr "Permite a execução de captura única ideal de circuitos qiskit e retorna o estado denso final do simulador, após à aplicação."

#: ../../the_elements.rst:136
msgid ":mod:`~qiskit.providers.UnitarySimulator`"
msgstr ":mod:` ~qiskit.providers.UnitarySimulator `"

#: ../../the_elements.rst:133
msgid "Allows ideal single-shot execution of qiskit circuits and returns the final unitary matrix of the circuit itself. Note that the circuit cannot contain measure or reset operations for this backend."
msgstr "Permite a execução ideal de captura única de circuitos de qiskit e retorna a matriz unitária final do próprio circuito. Note que o circuito não pode conter medidas ou operações de redefinição para este processo interno."

#: ../../the_elements.rst:142
msgid "Ignis"
msgstr "Ignis"

#: ../../the_elements.rst:144
msgid "Ignis, the ‘fire’ element, is dedicated to fighting noise and errors and to forging a new path. This includes better characterization of errors, improving gates, and computing in the presence of noise. Ignis is meant for those who want to design quantum error correction codes, or who wish to study ways to characterize errors through methods such as tomography, or even to find a better way for using gates by exploring dynamical decoupling and optimal control."
msgstr "Ignis, o elemento ‘fogo’, é dedicado ao combate do ruído e dos erros e ao estabelecimento de um novo caminho. Isso inclui melhor caracterização de erros, melhora nas portas e computação na presença de ruído. Ignis é destinado àqueles que desejam projetar códigos de correção de erros quânticos ou que querem estudar maneiras de caracterizar erros, através de métodos, como a tomografia, ou, até mesmo, encontrar maneiras melhores de utilizar as portas, explorando o desacoplamento dinâmico e o controle ótimo."

#: ../../the_elements.rst:151
msgid "Ignis provides code for users to easily generate circuits for specific experiments given a minimal set of user input parameters. Ignis code contains three fundamental building blocks:"
msgstr "O Ignis fornece código para os usuários gerarem, facilmente, circuitos para experimentos específicos, dado um conjunto mínimos de parâmetros de entrada do usuário. O código do Ignis contém três componentes fundamentais:"

#: ../../the_elements.rst:157
msgid "**Circuits**"
msgstr "**Circuitos**"

#: ../../the_elements.rst:156
msgid "The circuits module provides the code to generate the list of circuits for a particular Ignis experiment based on a minimal set of user parameters. These are then run on Terra or Aer."
msgstr "O módulo de circuitos fornece o código para gerar a lista de circuitos para um determinado experimento do Ignis, com base em um conjunto mínimo de parâmetros do usuário. Estes são, então, executados no Terra ou no Aer."

#: ../../the_elements.rst:162
msgid "**Fitters**"
msgstr "**Fitters**"

#: ../../the_elements.rst:160
msgid "The results of an Ignis experiment are passed to the Fitters module where they are analyzed and fit according to the physics model describing the experiment. Fitters can plot the data plus fit and output a list of parameters."
msgstr "Os resultados de um experimento de Ignis são passados para o módulo Fitters onde são analisados e encaixados, de acordo com o modelo físico que descreve o experimento. Os Fitters podem traçar os dados mais ajustados e retornar uma lista de parâmetros."

#: ../../the_elements.rst:167
msgid "**Filters**"
msgstr "**Filtros**"

#: ../../the_elements.rst:165
msgid "For certain Ignis experiments, the fitters can output a Filter object. Filters can be used to mitigate errors in other experiments using the calibration results of an Ignis experiment."
msgstr "Para certos experimentos de Ignis, os fitters podem retornar um objeto Filtro. Filtros podem ser utilizados para mitigar erros em outras experiências, utilizando os resultados de calibração de um experimento Ignis."

#: ../../the_elements.rst:169
msgid "Qiskit Ignis is organized into three types of experiments that can be performed:"
msgstr "O Qiskit Ignis é organizado em três tipos de experimentos, que podem ser realizados:"

#: ../../the_elements.rst:173
msgid ":mod:`qiskit.ignis.characterization` Characterization experiments are designed to measure parameters in the system such as noise parameters (T1, T2-star, T2), Hamiltonian parameters such as the ZZ interaction rate and control errors in the gates."
msgstr ":mod:`qiskit.ignis.characterization` Experimentos de caracterização são projetados para medir parâmetros em um sistema do tipo de parâmetros de ruído (T1, T2-star, T2), parâmetros Hamiltonianos, como a taxa de interação ZZ, e erros de controle nos portões."

#: ../../the_elements.rst:178
msgid ":mod:`qiskit.ignis.verification` Verification experiments are designed to verify gate and small circuit performance. Verification includes state and process tomography, quantum volume and randomized benchmarking (RB). These experiments provide the information to determine performance metrics such as the gate fidelity."
msgstr ":mod:`qiskit.ignis.verification` Os experimentos de verificação são projetados para verificar o portão e o desempenho inferior do circuito. A verificação inclui estado e processo tomográfico, volume quântico e aferição aleatória (RB). Esses experimentos fornecem informações para determinar métricas de desempenho como a fidelidade do portão."

#: ../../the_elements.rst:184
msgid ":mod:`qiskit.ignis.mitigation` Mitigation experiments run calibration circuits that are analyzed to generate mitigation routines that can be applied to arbitrary sets of results run on the same backend. Ignis code will generate a list of circuits that run calibration measurements. The results of these measurements will be processed by a Fitter and will output a Filter than can be used to apply mitigation to other results."
msgstr ":mod:` qiskit.ignis.mitigation ` Os experimentos de Mitigation executam circuitos de calibração, que são analisados para gerar rotinas de mitigação, que podem ser aplicadas a conjuntos arbitrários de resultados executados no mesmo backend. O código do ignis gerará uma lista de circuitos, que executam medições de calibração. Os resultados dessas medições serão processados por um Fitter e produzirão um Filter, que pode ser usado para aplicar mitigação a outros resultados."

#: ../../the_elements.rst:197
msgid "Aqua"
msgstr "Aqua"

#: ../../the_elements.rst:199
msgid "Aqua, the ‘water’ element, is the element of life. To make quantum computing live up to its expectations, we need to find real-world applications. Aqua is where algorithms for quantum computers are built. These algorithms can be used to build applications for quantum computing. Aqua is accessible to domain experts in chemistry, optimization, finance and AI, who want to explore the benefits of using quantum computers as accelerators for specific computational tasks."
msgstr "Aqua, o elemento 'água', é o elemento da vida. Para fazer a computação quântica corresponder às suas expectativas, precisamos encontrar aplicações do mundo real. Aqua é onde os algoritmos para computadores quânticos são construídos. Esses algoritmos podem ser usados para construir aplicativos para computação quântica. Aqua é acessível a especialistas de domínio em química, otimização, finanças e IA, que querem explorar os benefícios do uso de computadores quânticos como aceleradores para tarefas computacionais específicas."

#: ../../the_elements.rst:207
msgid "Problems that may benefit from the power of quantum computing have been identified in numerous domains, such as Chemistry, Artificial Intelligence (AI), Optimization and Finance. Quantum computing, however, requires very specialized skills. To address the needs of the vast population of practitioners who want to use and contribute to quantum computing at various levels of the software stack, we have created Qiskit Aqua."
msgstr "Problemas que podem se beneficiar do poder da computação quântica foram identificados em inúmeros domínios, como Química, Inteligência Artificial (IA), Otimização e Finanças. A computação quântica, no entanto, requer habilidades muito especializadas. Para atender às necessidades da vasta população de profissionais que desejam utilizar e contribuir para a computação quântica em vários níveis da pilha de software, criamos o Qiskit Aqua."

