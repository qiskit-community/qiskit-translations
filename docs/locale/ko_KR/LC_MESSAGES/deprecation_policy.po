msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-29 17:28+0000\n"
"PO-Revision-Date: 2023-11-29 17:53\n"
"Last-Translator: \n"
"Language: ko\n"
"Language-Team: Korean\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/deprecation_policy.po\n"
"X-Crowdin-File-ID: 9836\n"

#: ../../deprecation_policy.rst:3
msgid "Deprecation Policy"
msgstr "지원 중단 정책"

#: ../../deprecation_policy.rst:5
msgid "Many users and other packages depend on different parts of Qiskit.  We must make sure that whenever we make changes to the code, we give users ample time to adjust without breaking code that they have already written."
msgstr "많은 사용자 및 기타 패키지들은 Qiskit의 다른 부분에 의존한다. 따라서 코드를 변경할 때마다 사용자가 이미 작성한 코드를 손상시키지 않고 수정할 수 있는 충분한 시간을 제공해야 한다."

#: ../../deprecation_policy.rst:9
msgid "Most importantly: *do not* change any interface that is public-facing unless we absolutely have to.  Adding things is ok, taking things away is annoying for users but can be handled reasonably with plenty notice, but changing behavior generally means users cannot write code that will work with two subsequent versions of Qiskit, which is not acceptable."
msgstr "가장 중요한 것: 피할 수 없는 경우가 아니면 공개 인터페이스를 변경하지 *않는다*. 간단한 아이템을 추가하는 것은 괜찮지만, 아이템을 삭제하는 것은 사용자에게 번거로운 일이지만 충분히 공지하여 합리적으로 처리할 수 있다. 하지만 일반적으로 코드가 작동하는 방식을 변경하면 사용자가 두 가지 후속 버전의 Qiskit에서 작동하는 코드를 작성할 수 없으므로 허용되지 않는다."

#: ../../deprecation_policy.rst:15
msgid "Beware that users will often be using functions, classes and methods that we, the Qiskit developers, may consider internal or not widely used.  Do not make assumptions that \"this is buried, so nobody will be using it\"; if it is public, it is subject to the policy.  The only exceptions here are functions and modules that are explicitly internal, *i.e.* those whose names begin with a leading underscore (``_``)."
msgstr "사용자들이 종종 Qiskit 코드 개발자들이 내부적이거나, 널리 사용되지 않는 기능이라 생각하는 클래스 및 메소드를 사용한다는 점에 주의한다. \"이것은 잘 보이지 않으니 사용자가 없을 것이다\"라고 가정하면 안된다. 코드나 함수가 공개된 경우는 모두 정책의 적용 대상이 된다. 유일한 예외는 명시적으로 내부에 있는 함수와 모듈로, *즉* 이름이 밑줄로 시작하는 것(``_``)들 이다."

#: ../../deprecation_policy.rst:22
msgid "The guiding principles are:"
msgstr "지침은 다음과 같다."

#: ../../deprecation_policy.rst:24
msgid "we must not remove or change code without active warnings for least three months or two complete version cycles;"
msgstr "최소 3개월 또는 2회의 완전한 버전 주기 동안 적극적으로 경고한 후 코드를 제거하거나 변경한다."

#: ../../deprecation_policy.rst:27
msgid "there must always be a way to achieve valid goals that does not issue any warnings;"
msgstr "경고를 발생시키지 않고 원하는 기능을 구현하기 위한 방법을 항상 마련되어야 한다."

#: ../../deprecation_policy.rst:30
msgid "never assume that a function that isn't explicitly internal isn't in use;"
msgstr "명시적으로 내부적이지 않은 함수들도 사용되고 있을 수 있음을 가정한다."

#: ../../deprecation_policy.rst:32
msgid "all deprecations, changes and removals are considered API changes, and can only occur in minor releases not patch releases, per the :ref:`stable branch policy <stable_branch_policy>`."
msgstr "모든 사용 중단, 변경 및 제거는 API 변경으로 간주되며 :ref:`안정적인 브랜치 정책 <stable_branch_policy>` 에 따라 패치 릴리스가 아닌 마이너 릴리스에서만 발생할 수 있다."

#: ../../deprecation_policy.rst:39
msgid "Removing a feature"
msgstr "기능의 제거"

#: ../../deprecation_policy.rst:41
msgid "When removing a feature (for example a class, function or function parameter), we will follow this procedure:"
msgstr "기능(예: 클래스, 함수 또는 함수 매개변수) 을 제거할 때에는 다음의 절차를 따른다."

#: ../../deprecation_policy.rst:44
msgid "The alternative path must be in place for one minor version before any warnings are issued.  For example, if we want to replace the function ``foo()`` with ``bar()``, we must make at least one release with both functions before issuing any warnings within ``foo()``.  You may issue ``PendingDeprecationWarning``\\ s from the old paths immediately."
msgstr "경고를 이슈로 발행하기 전에 하나의 마이너 버전에 대한 대체 경로가 있어야 한다 . 예를 들어, ``foo()`` 함수를 ``bar()`` 로 교체하려면 ``foo()`` 내에서 경고를 발생시키기 전에 두 함수 모두를 사용하여 최소한 한 번 릴리스해야 한다. 이전 브랜치에서 즉시 ``PendingDeprecationWarning``\\ 을 실행시킨다."

#: ../../deprecation_policy.rst:50
msgid "*Reason*: we need to give people time to swap over without breaking their code as soon as they upgrade."
msgstr "*이유*: 사용자들에게 버젼이 업그레이드된 직 후, 코드를 훼손하지 않고 교체할 시간을 줄 필요가 있다."

#: ../../deprecation_policy.rst:53
msgid "After the alternative path has been in place for at least one minor version, :ref:`issue the deprecation warnings <issuing-deprecation-warnings>`.  Add a release note with a ``deprecations`` section listing all deprecated paths, their alternatives, and the reason for deprecation.  :ref:`Update the tests to test the warnings <testing-deprecated-functionality>`."
msgstr "최소한 하나의 마이너 버전에 대한 대체 경로가 설정되면 :ref:`issue the deprecation warnings <issuing-deprecation-warnings>` 를 발행한다. 더 이상 사용되지 않는 경로, 해당 대안 및 사용 중단 이유를 나열하는 ``deprecations`` 섹션이 있는 릴리스 노트를 추가한다.  :ref:`Update the tests to test the warnings <testing-deprecated-functionality>` 경고를 테스트하기 위해 테스트를 업데이트 한다."

#: ../../deprecation_policy.rst:59
msgid "*Reason*: removals must be highly visible for at least one version, to minimize the surprise to users when they actually go."
msgstr "*이유*: 버젼 이동이 발생했을 때 사용자의 충격을 최고화 하기 위해 제거는 최소한 하나의 버전에서 잘 공지되고 사용자에게 알려져야 한다."

#: ../../deprecation_policy.rst:62
msgid "Set a removal date for the old feature, and remove it (and the warnings) when reached.  This must be at least three months after the version with the warnings was first released, and cannot be the minor version immediately after the warnings.  Add an ``upgrade`` release note that lists all the removals.  For example, if the alternative path was provided in ``0.19.0`` and the warnings were added in ``0.20.0``, the earliest version for removal is ``0.22.0``, even if ``0.21.0`` was released more than three months after ``0.20.0``."
msgstr "이전 기능의 제거 날짜를 설정하고 도달하면 제거(및 경고)한다. 제거 날짜는 경고가 있는 버전이 처음 릴리스된 후 최소 3개월 이후이어야 하며 경고 직후의 마이너 버전이 될 수 없다. 모든 제거를 나열하는 ``upgrade`` 릴리스 노트를 한다. 예를 들어, 대체 경로가 ``0.19.0`` 에 제공되고 경고가 ``0.20.0`` 에 추가된 경우,  ``0.21.0`` 이 ``0.20.0`` 이 발표된 후 3개월 이후에 발표 되었다고 하더라도, 대상이 실질적으로 제거될 가장 빠른 버전은 ``0.22.0`` 이 된다."

#: ../../deprecation_policy.rst:73
msgid "These are *minimum* requirements.  For removal of significant or core features, give users at least an extra minor version if not longer."
msgstr "이것은 *최소* 요구사항 이다. 중요하거나 핵심적인 기능을 제거하려면, 제공이 중단되기 전 사용자에게 최소한 추가적인 마이너 버전을 제공한다."

#: ../../deprecation_policy.rst:76
msgid "*Reason*: there needs to be time for users to see these messages, and to give them time to adjust.  Not all users will update their version of Qiskit immediately, and some may skip minor versions."
msgstr "*이유* : 사용자에게 경고를 확인 한 후 적응할 시간을 제공한다. 모든 사용자가 Qiskit 버전을 최신으로 유지하는 것은 아니며 일부는 마이너 버젼들을 건너뛰기도 한다."

#: ../../deprecation_policy.rst:80
msgid "When a feature is marked as deprecated it is slated for removal, but users should still be able to rely on it to work correctly.  We consider a feature marked \"deprecated\" as frozen; we commit to maintaining it with critical bug fixes until it is removed, but we won't merge new functionality to it."
msgstr "특정 기능이 사용 중지로 표기되면 제거 준비가 진행되지만, 사용자는 여전히 이 기능을 사용해 작업할 수 있어야 한다.  \"deprecated\"로 표시된 기능은 더이상 업데이트되지 않고 고정된 것으로 간주한다. 따라서 제거될 때까지는 기능을 유지하기 위해 치명적인 버그 수정등은 유지하지만, 기능에 새로운 기능을 추가하지는 않는다."

#: ../../deprecation_policy.rst:87
msgid "Changing behavior"
msgstr "변경 작업"

#: ../../deprecation_policy.rst:89
msgid "Changing behavior without a removal is particularly difficult to manage, because we need to have both options available for two versions, and be able to issue warnings.  For example, changing the type of the return value from a function will almost invariably involve making an API break, which is frustrating for users and makes it difficult for them to use Qiskit."
msgstr "제거하지 않고 작동 방식을 변경하는 것은 특히 관리하기 어려운데, 두 가지 버전에 대해 두 가지 옵션을 모두 사용할 수 있어야 하고 경고를 발행시켜야 하기 때문이다. 예를 들어, 함수에서 반환 값의 유형을 변경하는 것은 거의 예외 없이 API 중단을 동반하게 되며, 이는 사용자들이 Qiskit을 사용하기 어렵게 만들고 곤란함을 겪에 만든다."

#: ../../deprecation_policy.rst:95
msgid "The best solution here is often to make a new function, and then use :ref:`the procedures for removal <removing-features>` above."
msgstr "가장 좋은 해결책은 종종 새로운 기능을 만든 다음 위의 :ref:`the procedures for removal <removing-features>`  를 따르는 것이다."

#: ../../deprecation_policy.rst:98
msgid "If you absolutely must change the behavior of existing code (other than fixing bugs), you will need to use your best judgment to apply the guiding principles at the top of this document.  The most appropriate warning for behavioral changes is usually ``FutureWarning``.  Some possibilities for how to effect a change:"
msgstr "기존 코드의 동작을 절대적으로 변경해야 하는 경우(버그 수정 제외) 이 문서의 맨 위에 있는 지침 원칙을 적용하기 위해 최선의 판단을 내려야 한다. 작동 방식의 변화에 대한 가장 적절한 경고는 일반적으로 ``FutureWarning`` 이다. 변경을 적용하는 방법에 대한 몇 가지 가능성은 다음과 같다:"

#: ../../deprecation_policy.rst:104
msgid "If you are changing the default behavior of a function, consider adding a keyword argument to select between old and new behaviors.  When it comes time, you can issue a ``FutureWarning`` if the keyword argument is not given (*e.g.* if it is ``None``), saying that the new value will soon become the default.  You will need to go through the normal deprecation period for removing this keyword argument after you have made the behavior change.  This will take at least six months to go through both cycles."
msgstr "함수의 기본 동작을 변경하는 경우 키워드 인수를 추가하여 이전 동작과 새 동작 중에서 선택하는 것이 좋다. 배포할 시기가 다가왔을 때, 키워드 인수가 지정되지 않은 경우(*예:*  ``None`` 인 경우) ``FutureWarning`` 을 발행하여 새 값이 곧 기본값이 되도록 설정할 수 있다. 동작을 변경한 후 이 키워드 인수를 제거하려면 일반적인 사용 중단 기간을 거쳐야 한다. 두 주기를 모두 거치는 데 최소 6개월이 소요된다."

#: ../../deprecation_policy.rst:112
msgid "If you need to change the return type of a function, consider adding a new function that returns the new type, and then follow the procedures for deprecating the old function."
msgstr "함수의 반환 유형을 변경해야 하는 경우 새 유형을 반환하는 새 함수를 추가한 다음 이전 함수 사용 중단 절차를 따른다."

#: ../../deprecation_policy.rst:116
msgid "If you need to accept a new input that you cannot distinguish from an existing possibility because of its type, consider letting it be passed by a different keyword argument, or add a second function that only accepts the new form."
msgstr "유형 때문에 이미 존재할 확률이 있는 입력과 구별할 수 없는 새 입력을 받아 들여야 하는 경우 다른 키워드 인수로 전달되도록 하거나 새 형식만 수락하는 두 번째 함수를 추가한다."

#: ../../deprecation_policy.rst:124
msgid "Issuing deprecation warnings"
msgstr "사용 중단 경고 발생"

#: ../../deprecation_policy.rst:126
msgid "The proper way to raise a deprecation warning is to use the decorators ``@deprecate_arg`` and ``@deprecate_func`` from ``qiskit.utils.deprecation``. These will generate a standardized message and and add the deprecation to that function's docstring so that it shows up in the docs."
msgstr ""

#: ../../deprecation_policy.rst:142
msgid "Usually, you should set ``additional_msg: str `` with the format ``\"Instead, use ...\"`` so that people know how to migrate. Read those functions' docstrings for additional arguments like ``pending: bool`` and ``predicate``."
msgstr ""

#: ../../deprecation_policy.rst:146
msgid "If you are deprecating outside the main Qiskit repo, set ``package_name`` to match your package. Alternatively, if you prefer to use your own decorator helpers, then have them call ``add_deprecation_to_docstring`` from ``qiskit.utils.deprecation``."
msgstr ""

#: ../../deprecation_policy.rst:150
msgid "If ``@deprecate_func`` and ``@deprecate_arg`` cannot handle your use case, consider improving them. Otherwise, you can directly call the ``warn`` function from the `warnings module in the Python standard library <https://docs.python.org/3/library/warnings.html>`__, using the category ``DeprecationWarning``.  For example:"
msgstr ""

#: ../../deprecation_policy.rst:170
msgid "Make sure you include the version of the package that introduced the deprecation warning (so maintainers can easily see when it is valid to remove it), and what the alternative path is."
msgstr "사용 중단 경고를 도입한 패키지 버전(유지 관리자가 유효한 제거 시기를 쉽게 확인할 수 있도록)과 대체 경로를 포함해야 한다."

#: ../../deprecation_policy.rst:174
msgid "Take note of the ``stacklevel`` argument.  This controls which function is accused of being deprecated.  Setting ``stacklevel=1`` (the default) means the warning will blame the ``warn`` function itself, while ``stacklevel=2`` will correctly blame the containing function.  It is unusual to set this to anything other than ``2``, but can be useful if you use a helper function to issue the same warning in multiple places."
msgstr "``stacklevel`` 인수에 주의하라. 이것은 더 이상 사용되지 않는 것으로 예상되는 기능을 제거한다. ``stacklevel=1`` (기본값)을 설정하면 경고가 ``warn`` 함수 자체를 지우는 반면, ``stacklevel=2`` 는 포함하는 함수를 올바르게 지워진다는 것을 의미 한다. 이것을 ``2`` 이외의 값으로 설정하는 것은 드문 일이지만 도우미 기능을 사용하여 여러 위치에서 동일한 경고를 발행하는 경우 유용할 수 있다."

#: ../../deprecation_policy.rst:185
msgid "Testing deprecated functionality"
msgstr "사용 중지된 기능의 테스트"

#: ../../deprecation_policy.rst:187
msgid "Whenever you add deprecation warnings, you will need to update tests involving the functionality.  The test suite should fail otherwise, because of the new warnings.  We must continue to test deprecated functionality throughout the deprecation period, to ensure that it still works."
msgstr "사용 중단 경고를 추가할 때마다 기능과 관련된 테스트를 업데이트해야 한다. 그렇지 않으면 새로운 경고 때문에 일련의 테스트 들이 실패하게 된다. 사용 중단 기간 동안 사용 중단된 기능을 계속 테스트하여 여전히 작동하는지 확인해야 한다."

#: ../../deprecation_policy.rst:192
msgid "To update the tests, you need to wrap each call of deprecated behavior in its own assertion block.  For subclasses of ``unittest.TestCase`` (which all Qiskit test cases are), this is done by:"
msgstr "테스트를 업데이트하려면 더 이상 사용되지 않는 동작의 각 호출을 자체 가정 설정문 블록(assertion block)으로 래핑해야 한다. ``unittest.TestCase`` 의 서브클래스(모든 Qiskit 테스트 케이스가 있음)의 경우 다음과 같이 수행 된다."

#: ../../deprecation_policy.rst:206
msgid "Documenting deprecations and breaking changes"
msgstr ""

#: ../../deprecation_policy.rst:208
msgid "It is important to warn the user when your breaking changes are coming."
msgstr ""

#: ../../deprecation_policy.rst:210
msgid "``@deprecate_arg`` and ``@deprecate_func`` will automatically add the deprecation to the docstring for the function so that it shows up in docs."
msgstr ""

#: ../../deprecation_policy.rst:213
msgid "If you are not using those decorators, you should directly add a `Sphinx deprecated directive <https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-deprecated>`__:"
msgstr ""

#: ../../deprecation_policy.rst:231
msgid "You should also document the deprecation in the changelog by using Reno. Explain the deprecation and how to migrate."
msgstr ""

#: ../../deprecation_policy.rst:234
msgid "In particular situations where a deprecation or change might be a major disruptor for users, a *migration guide* might be needed. Once the migration guide is written and published, deprecation messages and documentation should link to it (use the ``additional_msg: str`` argument for ``@deprecate_arg`` and ``@deprecate_func``)."
msgstr ""

