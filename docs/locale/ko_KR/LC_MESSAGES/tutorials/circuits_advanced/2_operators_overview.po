msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-14 09:35+0000\n"
"PO-Revision-Date: 2020-07-31 03:52\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/2_operators_overview.po\n"
"X-Crowdin-File-ID: 9124\n"
"Language: ko_KR\n"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:10
msgid "This page was generated from `tutorials/circuits_advanced/2_operators_overview.ipynb`__."
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:9
msgid "Operators"
msgstr "연산자"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:39
msgid "Operator Class"
msgstr "연산자 클래스"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:41
msgid "The ``Operator`` class is used in Qiskit to represent matrix operators acting on a quantum system. It has several methods to build composite operators using tensor products of smaller operators, and to compose operators."
msgstr "Qiskit에서 ``Operator`` 클래스는 양자 시스템에 작용하는 행렬 연산자를 나타내는데 사용된다. 이 클래스는 텐서 곱을 이용한 다중 결합 연산자를 만들거나 연산자를 작성하는데 필요한 다양한 매서드를 포함한다."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:44
msgid "Creating Operators"
msgstr "연산자 만들기"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:46
msgid "The easiest way to create an operator object is to initialize it with a matrix given as a list or a Numpy array. For example, to create a two-qubit Pauli-XX operator:"
msgstr "연산자 객체를 만드는 가장 쉬운 방법은 리스트나 Numpy 배열로 주어진 행렬을 연산자로 초기화 하는 것이다. 예를 들면 두 큐빗 Pauli-XX 연산자를 작성하고자 한다면 다음과 같이 할 수 있다."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:97
msgid "Operator Properties"
msgstr "연산자의 특성"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:99
msgid "The operator object stores the underlying matrix, and the input and output dimension of subsystems."
msgstr "연산자 객체는 그 기반이 되는 행렬과 서브시스템들의 입력 및 출력 차원을 포함한다."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:101
msgid "``data``: To access the underly Numpy array, we may use the ``Operator.data`` property."
msgstr "``data``: 기반이 되는 Numpy 배열에 접근하고자 할 때 사용한다. ``Operator.data`` 속성에 해당한다."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:102
msgid "``dims``: To return the total input and output dimension of the operator, we may use the ``Operator.dim`` property. *Note: the output is returned as a tuple ``(input_dim, output_dim)``, which is the reverse of the shape of the underlying matrix.*"
msgstr "``dims``: 연산자의 전체 입력과 출력의 차원을 반환하고자 할때 사용한다. ``Operator.dim`` 속성에 해당한다. *주의: 출력은 튜플 ``(input_dim, output_dim)``을 반환한다. 이는 기반 행렬*의 모양과 반대이다."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:181
msgid "Input and Output Dimensions"
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:183
msgid "The operator class also keeps track of subsystem dimensions, which can be used for composing operators together. These can be accessed using the ``input_dims`` and ``output_dims`` functions."
msgstr "연산자 클래스는 서브시스템의 차원을 추적하기 때문에 다중결합 연산자를 작성하는데 사용할 수 있다. 이 값은 ``input_dims`` 와``output_dims`` 함수를 이용하여 접근할 수 있다."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:185
msgid "For :math:`2^N` by :math:`2^M` operators, the input and output dimension will be automatically assumed to be M-qubit and N-qubit:"
msgstr "연산자의 행이 :math:`2^M`개이고 열이 :math:`2^M`개이면 입력과 출력 차원이 자동으로 M 큐빗과 N 큐빗으로 가정된다."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:229
msgid "If the input matrix is not divisible into qubit subsystems, then it will be stored as a single-qubit operator. For example, if we have a :math:`6\\times6` matrix:"
msgstr "입력된 행렬을 서브시스템으로 나눌 수 없는 경우 단일 연산자로 저장된다. 예를 들어 입력된 행렬이 :math:`6\\times6` matrix:이면"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:273
msgid "The input and output dimension can also be manually specified when initializing a new operator:"
msgstr "입력과 출력 차원은 새 연산자를 초기화 해 줄 때 수동으로 명시해 줄 수 있다."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:353
msgid "We can also extract just the input or output dimensions of a subset of subsystems using the ``input_dims`` and ``output_dims`` functions:"
msgstr "또한``input_dims``와 ``output_dims`` 함수를 사용하여 일부 서브시스템들의 입력 혹은 출력 차원만을 추출할 수 있다."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:397
msgid "Converting classes to Operators"
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:399
msgid "Several other classes in Qiskit can be directly converted to an ``Operator`` object using the operator initialization method. For example:"
msgstr "Qiskit에서 사용되는 다른 클래스들은 연산자 초기화 매서드를 사용하여 ``Operator`` 객체로 바로 변환 가능하다. 예를 들어"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:401
msgid "``Pauli`` objects"
msgstr "``Pauli`` 객체"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:402
msgid "``Gate`` and ``Instruction`` objects"
msgstr "``Gate`` 와 ``Instruction`` 객체"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:403
msgid "``QuantumCircuits`` objects"
msgstr "``QuantumCircuits`` 객체"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:405
msgid "Note that the last point means we can use the ``Operator`` class as a unitary simulator to compute the final unitary matrix for a quantum circuit, without having to call a simulator backend. If the circuit contains any unsupported operations, an exception will be raised. Unsupported operations are: measure, reset, conditional operations, or a gate that does not have a matrix definition or decomposition in terms of gate with matrix definitions."
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:595
msgid "Using Operators in circuits"
msgstr "회로에서 연산자 사용하기"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:597
msgid "Unitary ``Operators`` can be directly inserted into a ``QuantumCircuit`` using the ``QuantumCircuit.append`` method. This converts the ``Operator`` into a ``UnitaryGate`` object, which is added to the circuit."
msgstr "유니터리 ``Operators``는 매서드 ``QuantumCircuit.append``를 이용하여 ``QuantumCircuit``에 바로 넣을 수 있다. 이는 ``Operator``를 회로에 추가되는 ``UnitaryGate`` 객체로 바꿔준다."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:599
msgid "If the operator is not unitary, an exception will be raised. This can be checked using the ``Operator.is_unitary()`` function, which will return ``True`` if the operator is unitary and ``False`` otherwise."
msgstr "만약 연산자가 유니터리가 아니면 예외 처리 된다.유니터리인지는 함수 ``Operator.is_unitary()``를 사용하면 확인할 수 있다. 만약 연산자가 유니터리이면 ``True``를 그렇지 않으면 ``False``를 반환한다."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:636
msgid "Note that in the above example we initialize the operator from a ``Pauli`` object. However, the ``Pauli`` object may also be directly inserted into the circuit itself and will be converted into a sequence of single-qubit Pauli gates:"
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:745
msgid "Combining Operators"
msgstr "연산자 결합하기"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:747
msgid "Operators my be combined using several methods."
msgstr "연산자들은 다양한 방법으로 결합할 수 있다."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:750
msgid "Tensor Product"
msgstr "텐서 곱"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:752
msgid "Two operators :math:`A` and :math:`B` may be combined into a tensor product operator :math:`A\\otimes B` using the ``Operator.tensor`` function. Note that if both A and B are single-qubit operators, then ``A.tensor(B)`` = :math:`A\\otimes B` will have the subsystems indexed as matrix B on subsystem 0, and matrix :math:`A` on subsystem 1."
msgstr "두 연산자 :math:`A` 와 :math:`B`는 함수 ``Operator.tensor``를 사용하여 텐서곱 연산자 :math:`A\\otimes B` 로 결합할 수 있다. 만약 A와 B가 단일 큐빗 연산자라면 ``A.tensor(B)`` = :math:`A\\otimes B`를 하면 :math:`B`는 서브시스템 0에 :math:`A`는 서브시스템 1에 해당한다."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:804
msgid "Tensor Expansion"
msgstr "텐서 확장"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:806
msgid "A closely related operation is ``Operator.expand``, which acts like a tensor product but in the reverse order. Hence, for two operators :math:`A` and :math:`B` we have ``A.expand(B)`` = :math:`B\\otimes A` where the subsystems indexed as matrix A on subsystem 0, and matrix :math:`B` on subsystem 1."
msgstr "가장 관련된 연산은 ``Operator.expand``으로 텐서 곱과 같이 작용하지만 순서가 반대이다. 두 연산자 :math:`A` 와 :math:`B`에 대해 ``A.expand(B)`` = :math:`B\\otimes A`이다. 여기서 행렬 A는 서브시스템 0에 :math:`B`는 서브시스템 1에 해당한다."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:858
msgid "Composition"
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:860
msgid "We can also compose two operators :math:`A` and :math:`B` to implement matrix multiplication using the ``Operator.compose`` method. We have that ``A.compose(B)`` returns the operator with matrix :math:`B.A`:"
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:907
msgid "We can also compose in the reverse order by applying :math:`B` in front of :math:`A` using the ``front`` kwarg of ``compose``: ``A.compose(B, front=True)`` = :math:`A.B`:"
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:955
msgid "Subsystem Composition"
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:957
msgid "Note that the previous compose requires that the total output dimension of the first operator :math:`A` is equal to total input dimension of the composed operator :math:`B` (and similarly, the output dimension of :math:`B` must be equal to the input dimension of :math:`A` when composing with ``front=True``)."
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:959
msgid "We can also compose a smaller operator with a selection of subsystems on a larger operator using the ``qargs`` kwarg of ``compose``, either with or without ``front=True``. In this case, the relevant input and output dimensions of the subsystems being composed must match. *Note that the smaller operator must always be the argument of ``compose`` method.*"
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:961
msgid "For example, to compose a two-qubit gate with a three-qubit Operator:"
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1103
msgid "Linear combinations"
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1105
msgid "Operators may also be combined using standard linear operators for addition, subtraction and scalar multiplication by complex numbers."
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1159
msgid "An important point is that while ``tensor``, ``expand`` and ``compose`` will preserve the unitarity of unitary operators, linear combinations will not; hence, adding two unitary operators will, in general, result in a non-unitary operator:"
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1201
msgid "Implicit Conversion to Operators"
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1203
msgid "Note that for all the following methods, if the second object is not already an ``Operator`` object, it will be implicitly converted into one by the method. This means that matrices can be passed in directly without being explicitly converted to an ``Operator`` first. If the conversion is not possible, an exception will be raised."
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1250
msgid "Comparison of Operators"
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1252
msgid "Operators implement an equality method that can be used to check if two operators are approximately equal."
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1293
msgid "Note that this checks that each matrix element of the operators is approximately equal; two unitaries that differ by a global phase will not be considered equal:"
msgstr "이는 연산자의 각 행렬 성분들이 대략적으로 동일 한지를 확인한다. 전역 위상이 다른 두 유니터리는 다르게 간주한다."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1335
msgid "Process Fidelity"
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1337
msgid "We may also compare operators using the ``process_fidelity`` function from the *Quantum Information* module. This is an information theoretic quantity for how close two quantum channels are to each other, and in the case of unitary operators it does not depend on global phase."
msgstr "또한, *Quantum Information * 모듈의 \"process_fidelity\" 기능을 사용하여 연산자를 비교할 수도 있다. 이는 두 개의 양자 채널이 얼마나 유사한지를 나타내는 정보이론적 양이며 유니터리 연산자의 경우 글로벌 위상에는 의존하지 않는다."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1383
msgid "Note that process fidelity is generally only a valid measure of closeness if the input operators are unitary (or CP in the case of quantum channels), and an exception will be raised if the inputs are not CP."
msgstr ""

