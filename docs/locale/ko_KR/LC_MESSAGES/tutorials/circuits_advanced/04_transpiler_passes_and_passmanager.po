msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 11:37+0000\n"
"PO-Revision-Date: 2021-06-28 12:16\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.po\n"
"X-Crowdin-File-ID: 9128\n"
"Language: ko_KR\n"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:10
msgid "This page was generated from `tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb`__."
msgstr "이 페이지는 `tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb`__ 로부터 생성되었다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb>`_."
msgstr "`IBM 퀀텀 랩 <https://quantum-computing.ibm.com/jupyter/tutorial/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb>`_ 에서 대화식으로 실행하시오."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:9
msgid "Transpiler Passes and Pass Manager"
msgstr "트랜스파일러 패스 및 패스 매니저"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:21
msgid "Introduction"
msgstr "소개"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:32
msgid "A central component of Qiskit Terra is the transpiler, which is designed for modularity and extensibility. The goal is to be able to easily write new circuit transformations (known as transpiler **passes**), and combine them with other existing passes. Which passes are chained together and in which order has a major effect on the final outcome. This pipeline is determined by a **pass manager**, which schedules the passes and also allows passes to communicate with each other by providing a shared space. In this way, the transpiler opens up the door for research into aggressive optimization of quantum circuits."
msgstr "키스킷 테라의 중심 구성요소는 모듈성과 확장성을 위해 설계된 트랜스파일러다. 새로운 회로 변환(트랜스파일러 **passes** 로 알려져 있음) 을 쉽게 작성할 수 있고, 이를 다른 기존 패스와 결합하는 것이 목표다. 어떤 패스가 체인으로 묶여 있고 어떤 순서가 최종 결과에 큰 영향을 미치는가. 이 파이프라인은 **pass manager** 에 의해 결정되는데, 이 관리자는 패스를 예약하고 공유 공간을 제공하여 패스가 서로 통신할 수 있도록 한다. 이런 식으로 트랜스파일러는 적극적으로 양자 회로의 최적화에 대한 연구의 문을 연다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:35
msgid "In this notebook, we look at the built-in passes, how to use the pass manager, and develop a simple custom transpiler pass. In order to do the latter, we first need to introduce the internal representation of quantum circuits in Qiskit, in the form of a Directed Acyclic Graph, or **DAG**. Then, we illustrate a simple swap mapper pass, which transforms an input circuit to be compatible with a limited-connectivity quantum device."
msgstr "이 노트북에서는 내장된 패스, 패스 매니저 사용법 등을 살펴보고, 간단한 맞춤형 트랜스파일러 패스를 개발한다. 후자를 하기 위해서는 우선 **DAG** (Directed Acyclic Graph) 의 형태로 키스킷으로 양자 회로의 내부를 표현한다. 그런 다음 입력 회로를 제한된 연결 양자 장치와 호환되도록 변환하는 간단한 스왑 매퍼 패스를 설명한다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:37
msgid "**Before you start**: You may need to install the ``pydot`` library and the ``graphviz`` library for the DAG plotting routines. If you are using Anaconda Python, you can install both with the ``conda`` command. If you use your system’s native Python interpreter, install ``pydot`` using the ``pip`` command, and install ``graphviz`` using your system’s native package manager (e.g. ``yum``, ``apt``, ``dnf``, ``brew``, etc.)."
msgstr "**시작하기 전에**: DAG 플로팅 루팅을 위해 ``pydot`` 라이브러리와 ``graphviz`` 라이브러리를 설치가 필요할 수도 있습니다. Anaconda Python을 사용하는 경우 ``conda`` 명렁어를 통해 통해 두 가지 라이브러리를 모두 설치할 수 있습니다. 시스템의 기본 Python 인터프리터를 사용하는 경우 ``pip`` 명령어를 통해 ``pydot`` 를 설치하고 시스템의 기본 패키지 관리자를 사용하여 ``graphviz`` 를 설치합니다. (즉. ``yum``, ``apt``, ``dnf``, ``brew``, 등등)."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:61
msgid "PassManager object"
msgstr "PassManager 객체"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:63
msgid "Lets you specify the set of passes you want."
msgstr "원하는 패스 세트를 지정한다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:118
msgid "All of Qiskit’s transpiler passes are accessible from ``qiskit.transpiler.passes``."
msgstr "모든 키스킷의 트랜스파일러 패스는 ``qiskit.transpiler.passes`` 로 부터 불러올 수 있다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:255
msgid "Different Variants of the Same Pass"
msgstr "동일한 패스의 다양한 변형"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:257
msgid "There can be passes that do the same job, but in different ways. For example, the ``TrivialLayout``, ``DenseLayout`` and ``NoiseAdaptiveLayout`` all choose a layout (binding of virtual qubits to physical qubits), but use different algorithms and objectives. Similarly, the ``BasicSwap``, ``LookaheadSwap`` and ``StochasticSwap`` all insert swaps to make the circuit compatible with the coupling map. The modularity of the transpiler allows plug-and-play replacements for each pass."
msgstr "동일한 기능을 제공하지만 다른 방법으로 구성되는 패스가 있을 수 있다. 예를 들어 ``TrivialLayout``, ``DenseLayout`` 과 ``NoiseAdaptiveLayout`` 은 모두 레이아웃(가상 큐비트를 물리적 큐비트에 바인딩) 을 선택하지만 다른 알고리즘과 목표를 사용한다. 마찬가지로 ```BasicSwap``, ``LookaheadSwap``, ``StochasticSwap`` 등도 회로가 커플링 맵과 호환되도록 스왑을 삽입한다. 트랜스파일러의 모듈화는 각 패스마다 플러그 앤 플레이 교체를 허용한다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:259
msgid "Below, we show the swapper passes all applied to the same circuit, to transform it to match a linear chain topology. You can see differences in performance, where the ``StochasticSwap`` is clearly the best. However, this can vary depending on the input circuit."
msgstr "아래에서는 동일한 회로에 적용된 모든 스왑퍼의 패스를 보여 주며, 선형 체인 토폴로지와 일치하도록 변환한다. ``StochasticSwap`` 이 최고의 성능을 보여주는 것을 포함해 스왑퍼 패스 간의 성능 차이를 확인할 수 있다. 그러나 이것은 입력 회로에 따라 다를 수 있다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:382
msgid "Preset Pass Managers"
msgstr "사전 설정 패스 매니저"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:384
msgid "Qiskit comes with several pre-defined pass managers, corresponding to various levels of optimization achieved through different pipelines of passes. Currently ``optimization_level`` 0 through 3 are supported; the higher the number, the more optimized it is, at the expense of more time. Choosing a good pass manager may take trial and error, as it depends heavily on the circuit being transpiled and the backend being targeted."
msgstr "키스킷에는 여러 개의 사전 정의된 패스 매니저가 함께 제공되며, 이는 서로 다른 패스 파이프라인을 통해 달성되는 다양한 수준의 최적화에 대응한다. 현재 ``optimization_level`` 0에서 3까지 지원되고 있는데 숫자가 높을수록 최적화에 더 많은 시간이 소요된다. 좋은 패스 매니저를 선택하는 것은 시행착오를 동반하며, 이는 트랜스파일링되는 회로와 목표가 되는 백엔드에 크게 좌우되기 때문이다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:386
msgid "Here we illustrate the different levels by looking at a state synthesis circuit. We initialize four qubits to an arbitrary state, and then try to optimize the circuit that achieves this."
msgstr "여기에서는 상태를 인위적으로 조작한 회로를 사용해 다양한 트랜스파일 수준을 설명한다. 네 개의 큐비트를 임의의 상태로 초기화한 다음, 이 상태를 만들어낼 수 있도록 회로를 최적화 한다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:388
msgid "``optimization_level=0``: just maps the circuit to the backend, with no explicit optimization (except whatever optimizations the mapper does)."
msgstr "``optimization_level=0``: 눈에 띄는 최적화 없이 회로를 백엔드에 매핑하기만 한다.(매퍼의 최적화 작업은 제외)."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:390
msgid "``optimization_level=1``: maps the circuit, but also does light-weight optimizations by collapsing adjacent gates."
msgstr "``optimization_level=1``: 회로를 매핑하며 인접한 게이트를 한데 묶어서 가벼운 최적화를 수행한다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:392
msgid "``optimization_level=2``: medium-weight optimization, including a noise-adaptive layout and a gate-cancellation procedure based on gate commutation relationships."
msgstr "``optimization_level=2``: 노이즈-적용 레이아웃을 포함하는 중간-가중치 최적화 및 게이트 명령어 관계에 기초한 게이트-취소 절차를 포함한다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:394
msgid "``optimization_level=3``: heavy-weight optimization, which in addition to previous steps, does resynthesis of two-qubit blocks of gates in the circuit."
msgstr "``optimization_level=3``: 이전의 단계의 최적화에 덧붙여 회로 내 두 개의 큐비트 블록에 대한 게이트의 재조합(resynthesis)을 수행하는 중량 최적화."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:605
msgid "Now map this to the 20-qubit Tokyo device, with different optimization levels:"
msgstr "이제 이를 서로 다른 최적화 레벨을 사용하여 20-큐비트 Tokyo 디바이스에 맵핑하시오."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:749
msgid "Introducing the DAG"
msgstr "DAG 소개"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:760
msgid "In Qiskit, we represent circuits internally using a Directed Acyclic Graph (DAG). The advantage of this representation over a pure list of gates (i.e., *netlist*) is that the flow of information between operations are explicit, making it easier for passes to make transformation decisions without changing the semantics of the circuit."
msgstr "키스킷에서는 DAG (Directed Acyclic Graph)를 사용하여 내부적으로 회로를 나타낸다. 순수한 게이트 목록 (예: * netlist *)에 비하여 이와 같은 표현의 장점은 작업 간의 정보 흐름이 명시적이므로 패스가 회로의 의미를 변경하지 않고 변환 결정을 쉽게 내릴 수 있다는 것이다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:762
msgid "Let’s start by building a simple circuit, and examining its DAG."
msgstr "간단한 회로를 구축하고 DAG를 살펴보겠다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:801
msgid "In the DAG, there are three kinds of graph nodes: qubit/clbit input nodes (green), operation nodes (blue), and output nodes (red). Each edge indicates data flow (or dependency) between two nodes."
msgstr "DAG에는 세 가지 종류의 그래프 노드가 있다: qubit/clbit 입력 노드 (녹색), 연산 노드 (파란색), 출력 노드 (빨간색). 각 엣지(edge) 는 두 노드 간의 데이터 흐름 (또는 종속성) 을 나타낸다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:834
msgid "Therefore, writing a transpiler pass means using Qiskit’s DAGCircuit API to analyze or transform the circuit. Let’s see some examples of this."
msgstr "따라서 트랜스파일러 패스를 작성한다는 것은 키스킷의 DAGCircuit API를 사용하여 회로를 분석하거나 변환하는 것을 의미한다. 이에 대한 몇 가지 예시들을 살펴보자."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:845
msgid "**a. Get all op nodes in the DAG:**"
msgstr "** a. DAG의 모든 op 노드 가져오기: **"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:892
msgid "Each node is an instance of the ``DAGNode`` class. Let’s examine the information stored in the second op node."
msgstr "각 노드는 ``DAGNode`` 클래스의 인스턴스이다. 두 번째 op 노트에 저장된 정보를 살펴보자."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:945
msgid "**b. Add an operation to the back:**"
msgstr "** b. 뒤에 연산 추가하기: **"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:977
msgid "**c. Add an operation to the front:**"
msgstr "** c. 앞에 연산 추가하기: **"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1009
msgid "**d. Substitute a node with a subcircuit:**"
msgstr "** d. 하위 회로를 사용하여 노드를 대체하기 **"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1049
msgid "Finally, after all transformations are complete, we can convert back to a regular QuantumCircuit object. This is what the transpiler does! It takes a circuit, operates on it in DAG form, and outputs a transformed circuit."
msgstr "마지막으로 모든 변환이 완료된 후에는 일반 QuantumCircuit 객체로 다시 변환할 수 있다. 이것이 트랜스파일러가 하는 일이다! 트랜스파일러는 회로를 취하고(take), DAG 형태로 작동하고(operate), 변환된 회로를 출력한다(output)."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1082
msgid "Implementing a BasicMapper Pass"
msgstr "BasicMapper 패스 구현"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1093
msgid "Now that we are familiar with the DAG, let’s use it to write a transpiler pass. Here we will implement a basic pass for mapping an arbitrary circuit to a device with limited qubit connectivity. We call this the BasicMapper. This pass is included in Qiskit Terra as well."
msgstr "이제 DAG에 대하여 익숙해졌으므로 이를 사용하여 트랜스파일러 패스를 작성해보겠다. 여기서는 큐비트 연결이 제한된 장치에 임의의 회로를 매핑하기 위한 기본 패스를 구현한다. 이것을 BasicMapper 라고 한다. 이 패스는 키스킷 테라에도 포함되어 있다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1095
msgid "The first thing to do when writing a transpiler pass is to decide whether the pass class derives from a ``TransformationPass`` or ``AnalysisPass``. Transformation passes modify the circuit, while analysis passes only collect information about a circuit (to be used by other passes). Then, the ``run(dag)`` method is implemented, which does the main task. Finally, the pass is registered inside the ``qiskit.transpiler.passes`` module."
msgstr ""

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1097
msgid "This pass functions as follows: it traverses the DAG layer-by-layer (each layer is a group of operations that does not act on independent qubits, so in theory all operations in a layer can be done independently). For each operation, if it does not already meet the coupling map constraints, the pass identifies a swap path and inserts swaps to bring the two qubits close to each other."
msgstr "이러한 패스는 다음과 같이 함수를 전달한다: 이것은 DAG층별 (각 층은 독립적인 쿼비트로 동작하지 않는 연산의 그룹이므로, 이론적으로 레이어의 모든 연산들은 독립적으로 행해질 수 있다). 각 조작에 대해, 연결 맵 제한조건을 아직 충족하지 않는 경우, 패스는 스왑 경로를 식별하고 스왑을 삽입하여 두 개의 쿼리가 서로 인접하게 한다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1099
msgid "Follow the comments in the code for more details."
msgstr "자세한 내용은 코드의 주석을 따르십시오."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1215
msgid "Let’s test this pass on a small example circuit."
msgstr "간단한 예제 회로에서 이 패스를 테스트해보자."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1264
msgid "Now we construct a pass manager that contains our new pass. We pass the example circuit above to this pass manager, and obtain a new, transformed circuit."
msgstr "이제 새로운 패스를 포함하는 패스 관리자를 구성한다. 위의 예제 회로를 이 패스 관리자에게 전달하고 새로운 변환된 회로를 얻는다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1354
msgid "Note that this pass only inserts the swaps necessary to make every two-qubit interaction conform to the device coupling map. It does not, for example, care about the direction of interactions, or the native gate set supported by the device. This is a design philosophy of Qiskit’s transpiler: every pass performs a small, well-defined action, and the aggressive circuit optimization is achieved by the pass manager through combining multiple passes."
msgstr ""

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1366
msgid "Transpiler Logging"
msgstr "송수신기 로깅"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1368
msgid "Due to the complexity of the internal operations that the transpiler is performing it’s likely that you’ll end up in a situation where you’d like to debug an issue or just understand more of what is happening inside the transpiler when you call it. To facilitate this the transpiler emits log messages as part of its normal operation. This logging uses the Python standard library ``logging`` module to emit the log messages. Python’s standard logging was used because it allows Qiskit-Terra’s logging to integrate in a standard way with other applications and libraries."
msgstr ""

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1371
msgid "For a more thorough introduction to Python logging refer to the `official documentation <https://docs.python.org/3/library/logging.html>`__ and the tutorials and cookbook linked off of there."
msgstr ""

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1386
msgid "Note: Most of the logging module functions used in this section adjust global settings. If you run commands in this section it might effect the output from other cells if they are run in a different order."
msgstr "참고: 이 섹션에서 사용되는 대부분의 로깅 모듈 기능은 글로벌 설정을 조정한다. 이 섹션에서 명령을 실행하면 (다른 셀의 출력이 다른 순서로 실행되는 경우) 해당 출력이 영향을 받을 수 있다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1402
msgid "Configuring Python Standard Library Logging"
msgstr "Python Standard Library 로깅 구성하기"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1404
msgid "By default Python Standard Logging only prints log messages at the ``WARNING``, ``ERROR``, or ``CRITICAL`` log levels. Since none of the logs emitted by the transpiler use these log levels (they’re all informative) you need to configure logging."
msgstr "기본적으로 Python 표준 로깅은 ``WARNING``, ``ERROR``, 혹은 ``CRITICAL`` 로그 수준에서만 로그 메세지를 출력한다. 트랜스파일러에서 내보낸 로그는 이러한 로그 수준을 사용하지 않으므로 (모든 정보를 제공하기에) 로깅을 구성해야 한다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1406
msgid "The simplest way to do this is to just run:"
msgstr "이를 수행하는 가장 간단한 방법은 다음을 실행하는 것이다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1429
msgid "The ``basicConfig()`` function (see the docs here: https://docs.python.org/3/library/logging.html#logging.basicConfig) configures a root handler and formatter. We also specify the `log level <https://docs.python.org/3/library/logging.html#levels>`__ to display with the ``level`` kwarg. Setting it to a level will also include and higher levels. For example, if you set it to ``'INFO'`` in addition to the ``INFO`` level this will also include the ``WARNING``, ``ERROR``, and ``CRITICAL`` log levels."
msgstr "``basicConfig()`` 함수 (다음의 문서를 참고하라: https://docs.python.org/3/library/logging.html#logging.basicConfig) 는 루트 핸들러와 포매터를 구성한다. 또한, `로그 레벨 (log level) <https://docs.python.org/3/library/logging.html#levels>`__ 을 지정해 ``level`` kwarg와 함께 표시할 수 있다. 특정 레벨로 설정한다면 그 레벨의 상위 레벨들도 포함시킬 것이다. 예를 들어, ``'INFO'`` 와 ``INFO`` 레벨로 설정한다면 이는 ``WARNING``, ``ERROR``, 그리고 ``CRITICAL`` 로그 레벨들도 포함시킬 것이다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1431
msgid "Now the python environment in this notebook is configured to emit log messages to stderr when you run the transpiler. For example:"
msgstr "이제 이 노트북의 python 환경은 트랜스파일러를 실행할 때 로그 메세지를 stderr로 내보내도록 구성되었다. 예를 들면:"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1446
msgid "Note: basicConfig() will only work when called the first time it’s called. It detects if a root handler and formatter have already been setup (either by using an earlier basicConfig() call or otherwise) and does nothing if they have. Further adjustments will have to by interacting with the handler directly."
msgstr "참고: basicConfig()는 처음 호출될 때만 작동한다. 이는 루트 핸들러나 포맷터가 이미 설정되어 있는지 (이전의 basicConfig() 호출을 사용하던가 다른 방법으로) 감지하고, 둘 다 이미 설정되어 있는 경우 아무것도 수행하지 않는다. 추가적인 조정은 핸들러와 직접 상호작용하여 이루어질 수 있다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1634
msgid "As you can clearly see here when calling ``transpile()`` it now prints 2 types of log messages. The first is at the ``INFO`` log level and come from the pass manager. These indicate each pass that was executed and how long that took. The second are at the ``DEBUG`` level and come from the StochasticSwap pass and describes the internal operation of that pass. It’s useful for debugging issues in the pass’s operation."
msgstr ""

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1646
msgid "Adjusting the log level for the transpiler"
msgstr "트랜스파일러에 대한 로그 레벨 조정하기"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1648
msgid "The qiskit transpiler uses a single namespace ``qiskit.transpiler``, as used by ``logging.getLogger('qiskit.transpiler')``. This makes it very easy to adjust the log level for just the transpiler. For example if you only wish to see log messages at the INFO level or above you can run:"
msgstr "qiskit transpiler는 ``logging.getLogger('qiskit.transpiler')`` 에서 사용하는 것처럼 단일 네임스페이스 ``qiskit.transpiler`` 를 사용한다. 이렇게 하면 transpiler만을 위해 로그 레벨을 조정하는 것이 매우 쉽다. 예를 들어, INFO 레벨 이상의 로그 메시지만 보려는 경우 다음을 실행할 수 있다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1749
msgid "Setting up logging to deal with parallel execution"
msgstr "병렬 실행을 처리하기 위해 로깅 설정하기"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1751
msgid "When running the transpiler with multiple circuits by default these circuits are transpiled in parallel. If you want to do this with logging enabled and be able to understand the output some additional steps are required."
msgstr "기본적으로 여러 회로에서 트랜스파일러를 실행할 때 이러한 회로들은 병렬로 트랜스파일된다. 로깅이 활성화된 상태에서 이를 수행하고 출력을 이해할 수 있으려면 몇 가지 추가 단계가 필요하다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1753
msgid "If you were just to enable logging as above and then pass ``transpile()`` multiple circuits you’ll get results that are difficult to decipher. For example:"
msgstr "위와 같이 로깅을 활성화한 다음 ``transpile()`` 다중 회로를 통과하면 해독하기 어려운 결과를 얻을 수 있다. 예를 들면:"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:2058
msgid "As you can see here we get log messages from all 3 circuits being transpiled together. There is no way to know which pass is part of which circuit’s transpilation. Luckily Python logging provides tools to deal with this. The simplest one is to just change the `log formatter <https://docs.python.org/3/library/logging.html#logging.Formatter>`__ so that includes additional information so we can associate a log message with the process it came from."
msgstr ""

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:2081
msgid "Then rerun the ``transpile()`` call and see the new log formatter."
msgstr "그런 다음 ``transpile()`` 호출을 다시 실행하고 새 로그 포맷터를 확인한다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:2382
msgid "Now the format for the log messages has been changed and it includes a process name for each of the transpilation processes so it’s at least clear which log messages go together."
msgstr "이제 로그 메시지의 형식이 변경되었으며 각 변환 프로세스에 대한 프로세스 이름이 포함되어 있으므로 적어도 어떤 로그 메시지가 함께 연결되는지 명확하게 알 수 있다."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:2384
msgid "There are many different options for how you can configure, this example is pretty limited. Refer to the documentation for more examples and options to build more sophisticated use cases that suit your specific use case or preferences."
msgstr ""

