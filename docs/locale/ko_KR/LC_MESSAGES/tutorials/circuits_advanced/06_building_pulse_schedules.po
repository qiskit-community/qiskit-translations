msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-02 21:04+0000\n"
"PO-Revision-Date: 2023-03-02 21:47\n"
"Last-Translator: \n"
"Language: ko\n"
"Language-Team: Korean\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/06_building_pulse_schedules.po\n"
"X-Crowdin-File-ID: 9476\n"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:10
msgid "This page was generated from `tutorials/circuits_advanced/06_building_pulse_schedules.ipynb`__."
msgstr "이 페이지는 `tutorials/circuits_advanced/06_building_pulse_schedules.ipynb`__ 에서 생성되었다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:9
msgid "Building Pulse Schedules"
msgstr "펄스 스케줄 구성하기"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:11
msgid "Pulse gates define a low-level, exact representation for a circuit gate. A single operation can be implemented with a pulse program, which is comprised of multiple low-level instructions. To learn more about pulse gates, refer back to the documentation `here <05_pulse_gates.ipynb>`__. This page details how to create pulse programs."
msgstr "펄스 게이트는 회로 게이트에 대한 낮은 레벨(low-level)의 정확한 표현을 정의한다. 하나의 연산은 다수의 낮은 레벨 명령들로 구성된 펄스 프로그램으로 구현될 수 있다. 펄스 게이트에 대해서 자세히 배우려면 이 `문서 <05_pulse_gates.ipynb>`__ 를 참고하라. 이 페이지에서는 펄스 프로그램을 어떻게 만드는지에 대해 자세히 다룬다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:13
msgid "Note: For IBM devices, pulse programs are used as subroutines to describe gates. Previously, some devices accepted full programs in this format, but this is being sunset in December 2021. Other providers may still accept full programs in this format. Regardless of how the program is used, the syntax for building the program is the same. Read on to learn how!"
msgstr "참고: IBM 장치의 경우, 펄스 프로그램들이 게이트를 설명하는 서브루틴으로써 사용되고 있다. 예전에는 일부 장치들만 이 형식으로 전체 프로그램들을 받아들였지만, 이는 2021년 12월에 종료될 것이다. 다른 공급자들은 여전히 이 형식의 프로그램을 받아들일 수도 있다. 프로그램이 어떻게 사용되는지에 상관 없이, 프로그램을 작성하는 구문은 동일하다. 어떻게 하는지 읽어보라!"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:15
msgid "Pulse programs, which are called ``Schedule``\\ s, describe instruction sequences for the control electronics. We build ``Schedule``\\ s using the Pulse Builder. It’s easy to initialize a schedule:"
msgstr "``Schedule``\\ 들이라 불리는 펄스 프로그램은 전자 제어를 위한 명령어 순서이다. Pulse Builder를 사용하여 ``Schedule``\\ 들을 구축한다. 스케줄을 쉽게 시작시킬 수 있다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:67
msgid "You can see that there are no instructions yet. The next section of this page will explain each of the instructions you might add to a schedule, and the last section will describe various *alignment contexts*, which determine how instructions are placed in time relative to one another."
msgstr "아직 명령어가 없다는 것을 알 수 있다. 이 페이지의 다음 절에서는 스케줄에 추가할 수 있는 각 명령어를 설명하고, 마지막 절에서는 다양한 *정렬 컨텍스트* 를 설명하며, 이 컨텍스트는 명령어가 시간 순서에 따라 상대적으로 배치되는 방법을 결정한다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:79
msgid "``Schedule`` Instructions"
msgstr "``Schedule`` 명령어"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:81
msgid "`delay(duration, channel) <#delay>`__"
msgstr "`delay(duration, channel) <#delay>`__"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:82
msgid "`play(pulse, channel) <#play>`__"
msgstr "`play(pulse, channel) <#play>`__"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:83
msgid "`set_frequency(frequency, channel) <#set_frequency>`__"
msgstr "`set_frequency(frequency, channel) <#set_frequency>`__"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:84
msgid "`shift_phase(phase, channel) <#shift_phase>`__"
msgstr "`shift_phase(phase, channel) <#shift_phase>`__"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:85
msgid "`acquire(duration, channel, mem_slot, reg_slot) <#acquire>`__"
msgstr "`acquire(duration, channel, mem_slot, reg_slot) <#acquire>`__"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:87
msgid "Each instruction type has its own set of operands. As you can see above, they each include at least one ``Channel`` to specify where the instruction will be applied."
msgstr "각 명령어 유형은 고유한 피연산자 집합이 있다. 위에서 볼 수 있듯이, 이들은 명령어가 어디에 적용될 것인가를 지정하기 위해 적어도 하나의 ``Channel`` 을 포함하고 있다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:89
msgid "**Channels** are labels for signal lines from the control hardware to the quantum chip."
msgstr "**채널들(Channels)** 은 제어 하드웨어에서 양자 칩까지의 신호 라인에 대한 레이블이다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:91
msgid "``DriveChannel``\\ s are typically used for *driving* single qubit rotations,"
msgstr "``DriveChannel``\\ 들은 일반적으로 단일 큐비트의 회전을 *구동* 하는데 사용되고,"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:92
msgid "``ControlChannel``\\ s are typically used for multi-qubit gates or additional drive lines for tunable qubits,"
msgstr "``ControlChannel``\\ 들은 일반적으로 다중 큐비트 게이트 또는 조정 가능한 큐비트의 추가 드라이브 라인에 사용되고,"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:93
msgid "``MeasureChannel``\\ s are specific to transmitting pulses which stimulate readout, and"
msgstr "``MeasureChannel``\\ 들은 신호를 읽도록 하는 펄스의 전송에 한정되며,"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:94
msgid "``AcquireChannel``\\ s are used to trigger digitizers which collect readout signals."
msgstr "``AcquireChannel``\\ 들은 읽은 (아날로그 신호를 디지털 신호로 바꾸어) 신호를 수집하는 디지타이저(digitizer)를 동작시키는데 사용된다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:96
msgid "``DriveChannel``\\ s, ``ControlChannel``\\ s, and ``MeasureChannel``\\ s are all ``PulseChannel``\\ s; this means that they support *transmitting* pulses, whereas the ``AcquireChannel`` is a receive channel only and cannot play waveforms."
msgstr "``DriveChannel``\\ 들, ``ControlChannel``\\ 들 그리고 ``MeasureChannel``\\ 들은 모두 ``PulseChannel``\\ 들이다. 이는 그들이 펄스의 *전송* 을 지원하는 반면, ``AcquireChannel``\\ 은 수신 채널일 뿐 파형을 발생시킬 수는 없다는 뜻이다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:98
msgid "For the following examples, we will create one ``DriveChannel`` instance for each ``Instruction`` that accepts a ``PulseChannel``. Channels take one integer ``index`` argument. Except for ``ControlChannel``\\ s, the index maps trivially to the qubit label."
msgstr "다음 예제들에서는 ``PulseChannel`` 을 허용하는 각 ``Instruction`` 에 대해 하나의 ``DriveChannel`` 인스턴스를 생성한다. 채널은 하나의 정수로된 ``index`` 인수를 사용한다. ``ControlChannel``\\ 들을 제외하고 인덱스는 큐비트 레이블에 맞추어 매핑된다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:121
msgid "The pulse ``Schedule`` is independent of the backend it runs on. However, we can build our program in a context that is aware of the target backend by supplying it to ``pulse.build``. When possible you should supply a backend. By using the channel accessors ``pulse.<type>_channel(<idx>)`` we can make sure we are only using available device resources."
msgstr "이 펄스의 ``Schedule`` 은 그것이 실행되는 백엔드와는 독립적이다. 그러나 대상 백엔드를 ``pulse.build`` 에 제공함으로써 컨텍스트가 대상 백엔드를 인식하고 있는 상황에서 프로그램을 구현할 수 있다. 가능하면 백엔드를 제공하는 게 좋다. 채널 접근자 ``pulse.<type>_channel(<idx>)`` 를 사용함으로써 사용 가능한 장치 자원들만 사용하고 있는지 확인할 수 있다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:175
msgid "``delay``"
msgstr "``delay``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:177
msgid "One of the simplest instructions we can build is ``delay``. This is a blocking instruction that tells the control electronics to output no signal on the given channel for the duration specified. It is useful for controlling the timing of other instructions."
msgstr "가장 간단한 명령어 중 하나는 ``delay`` 이다. 이것은 제어 전자 장치가 지정된 (지속) 시간 동안 주어진 채널에 신호를 출력하지 않도록 하는 차단 명령이다. 다른 명령어의 타이밍을 조절하는 데 유용하다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:179
msgid "The duration here and elsewhere is in terms of the backend’s cycle time (1 / sample rate), ``dt``. It must take an integer value."
msgstr "여기서 및 다른 곳에서의 지속 시간은 백엔드의 사이클 시간 (샘플링 속도의 역수), ``dt`` 로 나타난다. 이는 정수를 사용해야 한다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:181
msgid "To add a ``delay`` instruction, we pass a duration and a channel, where ``channel`` can be any kind of channel, including ``AcquireChannel``. We use ``pulse.build`` to begin a Pulse Builder context. This automatically schedules our delay into the schedule ``delay_5dt``."
msgstr "``delay`` 명령어를 추가하려면 지속 시간과 채널을 전달하는데, 여기서 ``channel`` 은 ``AcquireChannel`` 을 포함한 어떤 종류의 채널도 될 수 있다. 펄스 빌더 컨텍스트를 시작할 때 ``pulse.build`` 를 사용한다. 이것은 자동으로 ``delay_5dt`` 스케줄에 지연을 예정시킨다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:203
msgid "That’s all there is to it. Any instruction added after this delay on the same channel will execute five timesteps later than it would have without this delay."
msgstr "그게 전부이다. 동일한 채널에서 이 지연 이후에 추가된 모든 명령어들은 이 지연이 없는 경우보다 5개의 시간 간격 이후에 실행된다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:206
msgid "``play``"
msgstr "``play``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:208
msgid "The ``play`` instruction is responsible for executing *pulses*. It’s straightforward to add a play instruction:"
msgstr "``Play`` 명령어는 *펄스* 를 발생시키는 역할을 담당한다. 이 명령어를 추가하는 과정은 간단하다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:215
msgid "Let’s clarify what the ``pulse`` argument is and explore a few different ways to build one."
msgstr "``pulse`` 의 전달인자가 무엇인지를 분명히 하고, 이를 만드는 몇 가지 다른 방법들을 탐구해보자."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:218
msgid "Pulses"
msgstr "펄스"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:220
msgid "A ``Pulse`` specifies an arbitrary pulse *envelope*. The modulation frequency and phase of the output waveform are controlled by the ``set_frequency`` and ``shift_phase`` instructions, which we will cover next."
msgstr "``Pulse`` 는 임의의 펄스 *포락선(envelope)* 을 지정한다. 출력 파형의 변조 주파수와 위상은 다음에 다룰 ``set_frequency`` 와 ``shift_phase`` 로 제어된다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:222
msgid "The image below may provide some intuition for why they are specified separately. Think of the pulses which describe their envelopes as input to an arbitrary waveform generator (AWG), a common lab instrument – this is depicted in the left image. Notice the limited sample rate discritizes the signal. The signal produced by the AWG may be mixed with a continuous sine wave generator. The frequency of its output is controlled by instructions to the sine wave generator; see the middle image. Finally, the signal sent to the qubit is demonstrated by the right side of the image below."
msgstr "아래의 그림은 왜 그들을 따로 지정해야하는지에 대한 직관을 제공할 수 있다. 펄스의 포락선이 일반적인 실험실 장비인 임의 파형 발생기(arbitrary waveform generator, AWG)에 입력되어 왼쪽 그림과 같이 나타나는 것을 생각해 보라. 제한된 샘플링율이 신호를 이산화(디지털화)시키는 것에 유의하라. AWG가 발생시킨 신호는 연속 사인파 발생기와 혼합될 수 있다. 출력 주파수는 사인파 발생기에 주어진 명령으로 제어된다 (가운데 그림을 보라). 마지막으로 큐비트에 전송되는 신호는 아래 그림의 오른쪽 그림으로 설명될 수 있다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:225
msgid "**Note**: The hardware may be implemented in other ways, but if we keep the instructions separate, we avoid losing explicit information, such as the value of the modulation frequency."
msgstr "**Note**: 하드웨어는 다른 방식으로 구현될 수 있지만, 명령어를 분리해서 설정하면 변조 주파수의 값과 같은 명시적 정보가 손실되는 것을 피할 수 있다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:227
msgid "|alt text|"
msgstr "|alt text|"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:233
msgid "alt text"
msgstr "대체 텍스트"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:229
msgid "There are many methods available to us for building up pulses. Our ``library`` within Qiskit Pulse contains helpful methods for building ``Pulse``\\ s. Let’s take for example a simple Gaussian pulse – a pulse with its envelope described by a sampled Gaussian function. We arbitrarily choose an amplitude of 1, standard deviation :math:`\\sigma` of 10, and 128 sample points."
msgstr "펄스를 생성할 수 있는 많은 방법들이 있다. Qiskit Pulse 내의 ``library`` 에는 ``Pulse``\\ 들을 생성하는 유용한 방법이 포함되어 있다. 가우시안 펄스 (Gaussian pulse, 가우스 함수를 샘플링하여 포락선을 갖는다)를 예로 들어보자. 임의로 진폭을 1, 표준 편차 :math:`\\sigma` 를 10으로 하여 128개의 샘플 개수를 선택한다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:231
msgid "**Note**: The amplitude norm is arbitrarily limited to ``1.0``. Each backend system may also impose further constraints – for instance, a minimum pulse size of 64. These additional constraints, if available, would be provided through the ``BackendConfiguration`` which is described `here <08_gathering_system_information.ipynb#Configuration>`__."
msgstr "**참고**: 진폭 크기는 ``1.0`` 로 제한된다. 또한 각 백엔드 시스템은 최소 펄스 크기를 64로 두는 것과 같은 추가적인 제약을 가할 수 있다. 이러한 추가적인 제약 조건들은 `여기 <08_gathering_system_information.ipynb#Configuration>`__ 에 기술된 ``BackendConfiguration`` 를 통해 제공된다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:259
msgid "Parametric pulses"
msgstr "매개변수 펄스"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:261
msgid "Let’s build our Gaussian pulse using the ``Gaussian`` parametric pulse. A parametric pulse sends the name of the function and its parameters to the backend, rather than every individual sample. Using parametric pulses makes the jobs you send to the backend much smaller. IBM Quantum backends limit the maximum job size that they accept, so parametric pulses may allow you to run larger programs."
msgstr "가우시안 펄스를 ``Gaussian`` 매개변수 펄스를 이용해 만들어 보자. 매개변수 펄스는 개별적인 샘플들이 아니라 함수의 이름과 매개변수들을 백엔드에 전송한다. 매개변식 펄스를 사용하면 백엔드에 보내는 작업이 훨씬 작아지게 된다. IBM 양자 백엔드는 수용하는 최대 작업 크기를 제한하므로, 매개변수 펄스로 더 큰 프로그램을 실행할 수 있다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:263
msgid "Other parametric pulses in the ``library`` include ``GaussianSquare``, ``Drag``, and ``Constant``."
msgstr "``library`` 에 포함된 다른 매개변수 펄스들은 ``GaussianSquare``, ``Drag``, 그리고 ``Constant`` 이다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:265
msgid "**Note**: The backend is responsible for deciding exactly how to sample the parametric pulses. It is possible to draw parametric pulses, but the samples displayed are not guaranteed to be the same as those executed on the backend."
msgstr "**참고**: 백엔드가 매개변수 펄스를 샘플링하는 방법을 결정한다. 매개변수 펄스를 그리는 것은 가능하지만, 그려진 샘플들이 백엔드에서 실행된 것과 동일하다는 것은 보장되진 않는다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:298
msgid "Pulse waveforms described by samples"
msgstr "샘플로 묘사되는 펄스 파형"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:300
msgid "A ``Waveform`` is a pulse signal specified as an array of time-ordered complex amplitudes, or *samples*. Each sample is played for one cycle, a timestep ``dt``, determined by the backend. If we want to know the real-time dynamics of our program, we need to know the value of ``dt``. The (zero-indexed) :math:`i^{th}` sample will play from time ``i*dt`` up to ``(i + 1)*dt``, modulated by the qubit frequency."
msgstr "``Waveform`` 은 시간 순서의 복소 진폭이나 *샘플* 들의 배열로 지정된 펄스 신호이다. 각 샘플은 한 주기로 발생하며 시간 간격 ``dt`` 는 백엔드가 결정한다. 프로그램의 실시간 동역학을 알고 싶다면 ``dt`` 의 값을 알아야 한다. (0부터 시작하는) :math:`i^{th}` 번째 샘플은 시간이 ``i*dt`` 일 때부터 ``(i + 1)*dt`` 까지 발생하며, 큐비트 주파수로 변조된다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:337
msgid "Pulse library functions"
msgstr "펄스 라이브러리 함수"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:339
msgid "Our own pulse library has sampling methods to build a ``Waveform`` from common functions."
msgstr "제공되는 펄스 라이브러리는 일반적인 함수로부터 ``Waveform`` 을 만들기 위한 샘플링 방법을 가지고 있다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:370
msgid "Regardless of which method you use to specify your ``pulse``, ``play`` is added to your schedule the same way:"
msgstr "``pulse`` 를 특정하기 위해 어떤 방법을 사용하든 ``play`` 는 같은 방식으로 스케줄에 추가된다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:402
msgid "You may also supply a complex list or array directly to ``play``"
msgstr "또한, 복소수 리스트나 배열을 ``play`` 에 직접 제공할 수도 있다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:434
msgid "The ``play`` instruction gets its duration from its ``Pulse``: the duration of a parametrized pulse is an explicit argument, and the duration of a ``Waveform`` is the number of input samples."
msgstr "``Play`` 명령어의 지속 시간(duration)은 ``Pulse`` 에서 가져온다: 매개변수화된 펄스의 지속 시간은 명시적으로 인자에 전달되고, ``Waveform`` 의 지속 시간은 입력 샘플의 수이다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:437
msgid "``set_frequency``"
msgstr "``set_frequency``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:439
msgid "As explained previously, the output pulse waveform envelope is also modulated by a frequency and phase. Each channel has a `default frequency listed in the backend.defaults() <08_gathering_system_information.ipynb#Defaults>`__."
msgstr "앞서 설명한 바와 같이, 출력 펄스의 파형 포락선 또한 주파수와 위상에 변조된다. 각 채널은 `backend.defaults()에 나열된 기본 주파수 <08_gathering_system_information.ipynb#Defaults>`__ 를 가진다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:441
msgid "The frequency of a channel can be updated at any time within a ``Schedule`` by the ``set_frequency`` instruction. It takes a float ``frequency`` and a ``PulseChannel`` ``channel`` as input. All pulses on a channel following a ``set_frequency`` instruction will be modulated by the given frequency until another ``set_frequency`` instruction is encountered or until the program ends."
msgstr "채널의 주파수는 ``set_frequency`` 명령어를 사용해 ``Schedule`` 내에서 언제든지 갱신할 수 있다. 이는 부동소숫점(float) 타입의 ``frequency`` 와 ``PulseChannel``, ``channel`` 을 입력으로 받는다. ``set_frequency`` 명령어가 적용되는 채널 안의 모든 펄스는 다른 ``set_frequency`` 명령을 만나거나 프로그램이 종료될 때까지 주어진 주파수에 의해 변조된다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:443
msgid "The instruction has an implicit duration of ``0``."
msgstr "명령어는 암묵적으로 ``0`` 의 지속시간을 갖는다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:445
msgid "**Note**: The frequencies that can be requested are limited by the total bandwidth and the instantaneous bandwidth of each hardware channel. In the future, these will be reported by the ``backend``."
msgstr "**참고**: 요청할 수 있는 주파수는 총 대역폭과 각 하드웨어 채널의 순간 대역폭에 의해 제한된다. 향후 이러한 정보는 ``backend`` 를 통해 보고 받을 수 있을 것이다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:468
msgid "``shift_phase``"
msgstr "``shift_phase``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:470
msgid "The ``shift_phase`` instruction will increase the phase of the frequency modulation by ``phase``. Like ``set_frequency``, this phase shift will affect all following instructions on the same channel until the program ends. To undo the affect of a ``shift_phase``, the negative ``phase`` can be passed to a new instruction."
msgstr "``shift_phase`` 명령어는 주파수 변조의 위상을 ``phase`` 만큼 증가시킨다. ``set_frequency`` 와 마찬가지로 이 위상 이동은 프로그램이 끝날 때까지 동일한 채널의 모든 후속 명령에 영향을 미친다. ``shift_phase`` 의 영향을 되돌리려면 음수로 된 ``phase`` 를 새로운 명령어로 전달할 수 있다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:472
msgid "Like ``set_frequency``, the instruction has an implicit duration of ``0``."
msgstr "``set_frequency`` 와 같이, 이 명령어는 암묵적으로 ``0`` 의 지속 시간을 갖는다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:495
msgid "``acquire``"
msgstr "``acquire``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:497
msgid "The ``acquire`` instruction triggers data acquisition for readout. It takes a duration, an ``AcquireChannel`` which maps to the qubit being measured, and a ``MemorySlot`` or a ``RegisterSlot``. The ``MemorySlot`` is classical memory where the readout result will be stored. The ``RegisterSlot`` maps to a register in the control electronics which stores the readout result for fast feedback."
msgstr "``acquire`` 명령어는 읽을 데이터 수집을 촉발한다. 측정될 큐비트에 매핑되는 ``AcquireChannel`` 과, ``MemorySlot`` 또는 ``RegisterSlot`` 을 수행하는 데는 시간이 걸린다. ``MemorySlot`` 은 읽은 결과가 저장될 고전적인 메모리이다. ``RegisterSlot`` 은 빠른 피드백을 위해 읽은 결과를 저장하는 제어 전자 장치의 레지스터에 매핑된다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:499
msgid "The ``acquire`` instructions can also take custom ``Discriminator``\\ s and ``Kernel``\\ s as keyword arguments."
msgstr "``acqurie`` 명령어는 또한 키워드 인수로써 사용자 정의 ``Discriminator``\\ 들과 커널 ``Kernel``\\ 들을 받을 수 있다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:523
msgid "Now that we know how to add ``Schedule`` instructions, let’s learn how to control exactly when they’re played."
msgstr "이제 스케줄 ``Schedule`` 명령어를 추가하는 방법을 알고 있으니, 그들이 발생될 때 정확하게 제어하는 방법을 배운다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:526
msgid "Pulse Builder"
msgstr "펄스 빌더 (Pulse Builder)"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:528
msgid "Here, we will go over the most important Pulse Builder features for learning how to build schedules. This is not exhaustive; for more details about what you can do using the Pulse Builder, check out the `Pulse API reference <https://qiskit.org/documentation/apidoc/pulse.html>`__."
msgstr "여기에서는 스케줄을 작성하는 방법을 학습하고자 가장 중요한 Pulse Builder 기능을 검토한다. 이는 완전하지 않는다. 펄스 빌더를 사용하여 수행할 수 있는 작업에 대한 자세한 내용은 `Pulse API 참조 <https://qiskit.org/documentation/apidoc/pulse.html>`__ 를 확인하라."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:531
msgid "Alignment contexts"
msgstr "정렬 컨텍스트"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:533
msgid "The builder has alignment contexts which influence how a schedule is built. Contexts can also be nested. Try them out, and use ``.draw()`` to see how the pulses are aligned."
msgstr "빌더에는 스케줄 작성 방법에 영향을 주는 정렬 컨텍스트가 있다. 컨텍스트는 다중 구조가 될 수도 있다. 펄스가 어떻게 정렬되었는지 보려면 다중 구조 밖으로 나와서 ``.draw ()`` 를 사용한다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:535
msgid "Regardless of the alignment context, the duration of the resulting schedule is as short as it can be while including every instruction and following the alignment rules. This still allows some degrees of freedom for scheduling instructions off the “longest path”. The examples below illuminate this."
msgstr "정렬 컨텍스트에 관계없이, 결과 스케줄의 지속 시간은 모든 지시사항 및 정렬 규칙을 따르는 한 가능한 짧게 된다. 이는 여전히 “가장 긴 경로” 가 아니라면 소정의 자유도를 허용한다. 아래의 예제들은 이것을 조명한다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:538
msgid "``align_left``"
msgstr "``align_left``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:540
msgid "The builder has alignment contexts that influence how a schedule is built. The default is ``align_left``."
msgstr "빌더에는 스케줄 작성 방법에 영향을 주는 정렬 컨텍스트가 있다. 기본값은 ``align_left`` 이다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:577
msgid "Notice how there is no scheduling freedom for the pulses on ``D1``. The second waveform begins immediately after the first. The pulse on ``D0`` can start at any time between ``t=0`` and ``t=100`` without changing the duration of the overall schedule. The ``align_left`` context sets the start time of this pulse to ``t=0``. You can think of this like left-justification of a text document."
msgstr "``D1`` 의 펄스에는 스케줄링의 자유도가 없다는 것을 주목하라. 두 번째 파형은 첫 번째 파형 직후에 시작된다. ``D0`` 의 펄스는 전반적인 스케줄의 지속 시간을 바꾸지 않고 ``t=0`` 과 ``t=100`` 사이에서 언제든지 시작할 수 있다. ``align_left`` 컨텍스트는 이 펄스의 시작 시간을 ``t=0`` 로 설정하는 것이다. 이것은 마치 글 문서에서의 왼쪽 맞춤과 비슷하게 생각할 수 있다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:580
msgid "``align_right``"
msgstr "``align_right``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:582
msgid "Unsurprisingly, ``align_right`` does the opposite of ``align_left``. It will choose ``t=100`` in the above example to begin the gaussian pulse on ``D0``. Left and right are also sometimes called “as soon as possible” and “as late as possible” scheduling, respectively."
msgstr "당연하게도 ``align_right`` 는 ``align_left`` 와는 반대의 동작을 한다. 이는 ``D0`` 의 가우시안 펄스를 ``t=100`` 일 때 시작하도록 선택할 것이다. 좌우는 때때로 각각 \"가능한 한 빨리\" 와 \"가능한 한 늦은\" 스케줄링으로 불린다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:620
msgid "``align_equispaced(duration)``"
msgstr "``align_equispaced(duration)``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:622
msgid "If the duration of a particular block is known, you can also use ``align_equispaced`` to insert equal duration delays between each instruction."
msgstr "특정 블록의 지속 시간을 알고 있는 경우, 각 명령어 사이에 동일한 지속 시간 지연을 삽입하고자 ``align_equispaced`` 를 사용할 수도 있다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:660
msgid "``align_sequential``"
msgstr "``align_sequential``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:662
msgid "This alignment context does not schedule instructions in parallel. Each instruction will begin at the end of the previously added instruction."
msgstr "이 정렬 컨텍스트는 지시사항을 병렬로 스케줄하지 않는다. 각 명령어는 이전에 추가된 명령어의 끝에서 시작된다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:700
msgid "Phase and frequency offsets"
msgstr "위상 및 주파수 오프셋"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:702
msgid "We can use the builder to help us temporarily offset the frequency or phase of our pulses on a channel."
msgstr "이 빌더를 사용하여 채널의 펄스 주파수나 위상에 일시적인 오프셋을 줄 수 있다."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:738
msgid "We encourage you to visit the `Pulse API reference <https://qiskit.org/documentation/apidoc/pulse.html>`__ to learn more."
msgstr "더 많은 정보를 얻을 수 있도록 `펄스 API 참조 <https://qiskit.org/documentation/apidoc/pulse.html>`__ 를 방문하라."

