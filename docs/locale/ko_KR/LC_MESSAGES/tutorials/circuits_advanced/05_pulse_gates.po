msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 17:09+0000\n"
"PO-Revision-Date: 2021-06-28 18:33\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/05_pulse_gates.po\n"
"X-Crowdin-File-ID: 9474\n"
"Language: ko_KR\n"

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:10
msgid "This page was generated from `tutorials/circuits_advanced/05_pulse_gates.ipynb`__."
msgstr "이 페이지는 `tutorials/circuits_advanced/05_pulse_gates.ipynb`__ 에서 생성되었다."

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:9
msgid "Pulse gates"
msgstr "펄스 게이트들"

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:11
msgid "Most quantum algorithms can be described with circuit operations alone. When we need more control over the low-level implementation of our program, we can use *pulse gates*. Pulse gates remove the constraint of executing circuits with basis gates only, and also allow you to override the default implementation of any basis gate."
msgstr "대부분의 양자 알고리즘은 회로 작동만으로 설명할 수 있다. 프로그램의 저수준 구현에 대한 제어가 필요할 때 *펄스 게이트* 를 사용할 수 있다. 펄스 게이트는 기본 게이트 만을 사용해 회로를 실행하는 제약을 뛰어넘어 어떤 기본 게이트라도 기본 구현된 것을 재정의할 수 있다"

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:13
msgid "Pulse gates allow you to map a logical circuit gate (e.g., ``X``) to a Qiskit Pulse program, called a ``Schedule``. This mapping is referred to as a *calibration*. A high fidelity calibration is one which faithfully implements the logical operation it is mapped from (e.g., whether the ``X`` gate calibration drives :math:`|0\\rangle` to :math:`|1\\rangle`, etc.)."
msgstr "펄스 게이트를 사용하면 논리 회로 게이트(예: ``X`` )를 ``스케쥴`` 이라고 하는 키스킷 펄스 프로그램에 사상할 수 있다. 이 사상 작업을 *교정* 이라고 한다. 높은 정확도의 교정은 사상 된 논리 연산(예: ``X`` 게이트 교정은 :math:`|0\\rangle` 을 :math:`|1\\rangle`  로 바꾼다, 등등)을 충실히 구현하는 교정이다."

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:15
msgid "A schedule specifies the exact time dynamics of the input signals across all input *channels* to the device. There are usually multiple channels per qubit, such as drive and measure. This interface is more powerful, and requires a deeper understanding of the underlying device physics."
msgstr "스케줄은 장치에 대한 모든 입력 *채널들* 에 걸쳐 입력 신호의 정확한 시간 역학을 지정한다. 일반적으로 큐비트 마다드라이브 및 측정과 같은 여러 채널이 있다. 이 인터페이스는 더 강력하며 기본적인 장치의 물리학적 원리를 더 깊이 이해해야 한다."

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:17
msgid "It’s important to note that Pulse programs operate on physical qubits. A drive pulse on qubit :math:`a` will not enact the same logical operation on the state of qubit :math:`b` – in other words, gate calibrations are not interchangeable across qubits. This is in contrast to the circuit level, where an ``X`` gate is defined independent of its qubit operand."
msgstr "펄스 프로그램은 물리적인 큐비트에 작용하는 것임을 기억하는 것이 중요합니다. 큐빗의 드라이브 펄스 :math:`a` 는 큐빗의 상태 :math:`b` 에 같은 논리적 연산을 하지 않습니다 - 바꾸어 말하면 게이트 보정은 큐비트들 사이에 상호 교환이 가능하지 않습니다. 이것은 ``X`` 게이트가 대상 큐비트에 독립적으로 정의되는 회로 레벨과는 대조적입니다."

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:19
msgid "This page shows you how to add a calibration to your circuit."
msgstr "이 페이지는 여러분의 회로에 보정을 추가하는 법을 설명합니다."

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:21
msgid "**Note:** To execute a program with pulse gates, the backend has to be enabled with OpenPulse. You can check via ``backend.configuration().open_pulse``, which is ``True`` when OpenPulse is enabled. If it is enabled and the pulse gates feature is not enabled, you can `schedule <07_pulse_scheduler.ipynb>`__ your input circuit."
msgstr "**주:** 펄스 게이트가 있는 프로그램을 실행하기 위해서는 OpenPulse를 지원하는 벡엔드를 사용해야 한다. ``backend.configuration().open_pulse`` 의 옵션이 ``True`` 인 것으로 OpenPulse를 사용할 수 있는지 확인할 수 있다. 오픈펄스가 활성화 되어 있고 펄스 게이트 기능이 사용하지 않은 경우 입력 회로에 `스케쥴 <07_pulse_scheduler.ipynb>`__ 을 사용할 수 있다."

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:33
msgid "Build your circuit"
msgstr "회로 구축하기"

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:35
msgid "Let’s start with a very simple example, a Bell state circuit."
msgstr "아주 간단한 예인 벨 상태(Bell state) 회로로부터 시작하자."

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:74
msgid "Build your calibrations"
msgstr "교정 구현하기"

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:76
msgid "Now that we have our circuit, let’s define a calibration for the Hadamard gate on qubit 0."
msgstr "이제 회로가 있으므로 큐비트 0에 대한 하다마드 게이트의 교정을 정의하자."

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:78
msgid "In practice, the pulse shape and its parameters would be optimized through a series of Rabi experiments (see the `Qiskit Textbook <https://qiskit.org/textbook/ch-quantum-hardware/calibrating-qubits-openpulse.html>`__ for a walk through). For this demonstration, our Hadamard will be a Gaussian pulse. We will *play* our pulse on the *drive* channel of qubit 0."
msgstr "실제로, 펄스의 형성과 파라미터들은 라비 실험 (Rabi experiments)를 통해 최적화된다. (`키스킷 교과서 <https://qiskit.org/textbook/ch-quantum-hardware/calibrating-qubits-openpulse.html>`__ 를 참조). 이번 데모에서 하다마드는 가우스 (Gaussian) 펄스가 될 것이다. 우리는 펄스를 큐빗 0의 *drive* 채널에서 *play* 할 것이다."

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:80
msgid "Don’t worry too much about the details of building the calibration itself; you can learn all about this on the following page: `building pulse schedules <06_building_pulse_schedules.ipynb>`__."
msgstr "교정을 빌드하는 세부사항 자체에 대해 너무 걱정하지 마라. `펄스 스케줄 작성 <06_building_pulse_schedules.ipynb>`__ 페이지에서 이에 대해 모두 학습할 수 있다."

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:108
msgid "Let’s draw the new schedule to see what we’ve built."
msgstr "우리가 만든 것을 보기 위해 새로운 스케줄을 그리자."

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:139
msgid "Link your calibration to your circuit"
msgstr "회로에 교정을 링크하기"

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:141
msgid "All that remains is to complete the registration. The circuit method ``add_calibration`` needs information about the gate and a reference to the schedule to complete the mapping:"
msgstr "등록을 마무리하는 것만이 남았다. 회로 메소드 ``add_calibration`` 은 매핑을 완료하기 위해 게이트 정보와 스케줄에 대한 참조를 필요로 한다:"

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:147
msgid "The ``gate`` can either be a ``circuit.Gate`` object or the name of the gate. Usually, you’ll need a different schedule for each unique set of ``qubits`` and ``parameters``. Since the Hadamard gate doesn’t have any parameters, we don’t have to supply any."
msgstr ""

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:168
msgid "Lastly, note that the transpiler will respect your calibrations. Use it as you normally would (our example is too simple for the transpiler to optimize, so the output is the same)."
msgstr ""

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:226
msgid "Notice that ``h`` is not a basis gate for the mock backend ``FakeAlmaden``. Since we have added a calibration for it, the transpiler will treat our gate as a basis gate; *but only on the qubits for which it was defined*. A Hadamard applied to a different qubit would be unrolled to the basis gates."
msgstr ""

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:228
msgid "That’s it!"
msgstr ""

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:231
msgid "Custom gates"
msgstr "사용자 설정 게이트"

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:233
msgid "We’ll briefly show the same process for nonstandard, completely custom gates. This demonstration includes a gate with parameters."
msgstr ""

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:286
msgid "If we use the ``Gate`` instance variable ``custom_gate`` to add the calibration, the parameters are derived from that instance. Remember that the order of parameters is meaningful."
msgstr ""

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:317
msgid "Normally, if we tried to transpile our ``circ``, we would get an error. There was no functional definition provided for ``\"my_custom_gate\"``, so the transpiler can’t unroll it to the basis gate set of the target device. We can show this by trying to add ``\"my_custom_gate\"`` to another qubit which hasn’t been calibrated."
msgstr ""

