msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:25+0000\n"
"PO-Revision-Date: 2023-03-16 11:58\n"
"Last-Translator: \n"
"Language: ko\n"
"Language-Team: Korean\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/05_pulse_gates.po\n"
"X-Crowdin-File-ID: 9474\n"

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:10
msgid "This page was generated from `tutorials/circuits_advanced/05_pulse_gates.ipynb`__."
msgstr "이 페이지는 `tutorials/circuits_advanced/05_pulse_gates.ipynb`__ 에서 생성되었다."

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:9
msgid "Pulse gates"
msgstr "펄스 게이트들"

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:11
msgid "Most quantum algorithms can be described with circuit operations alone. When we need more control over the low-level implementation of our program, we can use *pulse gates*. Pulse gates remove the constraint of executing circuits with basis gates only, and also allow you to override the default implementation of any basis gate."
msgstr "대부분의 양자 알고리즘은 회로 작동만으로 설명할 수 있다. 프로그램의 저수준 구현에 대한 제어가 필요할 때 *펄스 게이트* 를 사용할 수 있다. 펄스 게이트는 기본 게이트 만을 사용해 회로를 실행하는 제약을 뛰어넘어 어떤 기본 게이트라도 기본 구현된 것을 재정의할 수 있다"

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:13
msgid "Pulse gates allow you to map a logical circuit gate (e.g., ``X``) to a Qiskit Pulse program, called a ``Schedule``. This mapping is referred to as a *calibration*. A high fidelity calibration is one which faithfully implements the logical operation it is mapped from (e.g., whether the ``X`` gate calibration drives :math:`|0\\rangle` to :math:`|1\\rangle`, etc.)."
msgstr "펄스 게이트를 사용하면 논리 회로 게이트(예: ``X`` )를 ``Schedule`` 이라고 하는 Qiskit 펄스 프로그램에 mapping 할 수 있다. 이 사상 작업을 *교정* 이라고 한다. 높은 정확도의 교정은 mapping 된 논리 연산(예: ``X`` 게이트 교정은 :math:`|0\\rangle` 을 :math:`|1\\rangle` 로 바꾼다, 등등)을 충실히 구현하는 교정이다."

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:15
msgid "A schedule specifies the exact time dynamics of the input signals across all input *channels* to the device. There are usually multiple channels per qubit, such as drive and measure. This interface is more powerful, and requires a deeper understanding of the underlying device physics."
msgstr "스케줄은 장치에 대한 모든 입력 *채널들* 에 걸쳐 입력 신호의 정확한 시간 역학을 지정한다. 일반적으로 큐비트 마다 구동 및 측정과 같은 여러 채널이 있다. 이 인터페이스는 더 강력하며 기본적인 장치의 물리학적 원리를 더 깊이 이해해야 한다."

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:17
msgid "It's important to note that Pulse programs operate on physical qubits. A drive pulse on qubit :math:`a` will not enact the same logical operation on the state of qubit :math:`b` -- in other words, gate calibrations are not interchangeable across qubits. This is in contrast to the circuit level, where an ``X`` gate is defined independent of its qubit operand."
msgstr ""

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:19
msgid "This page shows you how to add a calibration to your circuit."
msgstr "이 페이지는 회로에 교정을 추가하는 법을 보여준다."

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:21
msgid "**Note:** To execute a program with pulse gates, the backend has to be enabled with OpenPulse. You can check via ``backend.configuration().open_pulse``, which is ``True`` when OpenPulse is enabled. If it is enabled and the pulse gates feature is not enabled, you can `schedule <07_pulse_scheduler.ipynb>`__ your input circuit."
msgstr "**참고:** 펄스 게이트가 있는 프로그램을 실행하기 위해서는 OpenPulse를 지원하는 벡엔드를 사용해야 한다. ``backend.configuration().open_pulse`` 의 옵션이 ``True`` 인 것으로 OpenPulse를 사용할 수 있는지 확인할 수 있다. OpenPulse가 활성화 되어 있고 펄스 게이트 기능이 활성화되지 않은 경우, 입력 회로에 `스케쥴 <07_pulse_scheduler.ipynb>`__ 를 사용할 수 있다."

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:33
msgid "Build your circuit"
msgstr "회로 구성하기"

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:35
msgid "Let's start with a very simple example, a Bell state circuit."
msgstr ""

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:74
msgid "Build your calibrations"
msgstr "교정 구성하기"

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:76
msgid "Now that we have our circuit, let's define a calibration for the Hadamard gate on qubit 0."
msgstr ""

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:78
msgid "In practice, the pulse shape and its parameters would be optimized through a series of Rabi experiments (see the `Qiskit Textbook <https://qiskit.org/textbook/ch-quantum-hardware/calibrating-qubits-openpulse.html>`__ for a walk through). For this demonstration, our Hadamard will be a Gaussian pulse. We will *play* our pulse on the *drive* channel of qubit 0."
msgstr "실제로, 펄스의 모양과 매개변수들은 Rabi 실험(Rabi experiments)의 반복을 통해 최적화된다 (`Qiskit 교과서 <https://qiskit.org/textbook/ch-quantum-hardware/calibrating-qubits-openpulse.html>`__ 를 따라가라). 이를 시연하고자 Hadamard는 가우시안(Gaussian)펄스가 될 것이다. 큐비트 0의 *구동* 채널에 펄스를 *발생* 시킬 것이다."

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:80
msgid "Don't worry too much about the details of building the calibration itself; you can learn all about this on the following page: `building pulse schedules <06_building_pulse_schedules.ipynb>`__."
msgstr ""

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:108
msgid "Let's draw the new schedule to see what we've built."
msgstr ""

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:139
msgid "Link your calibration to your circuit"
msgstr "회로에 교정을 링크하기"

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:141
msgid "All that remains is to complete the registration. The circuit method ``add_calibration`` needs information about the gate and a reference to the schedule to complete the mapping:"
msgstr "등록을 마무리하는 것만이 남았다. 회로 메서드 ``add_calibration`` 은 사상을 완료하고자 게이트 정보와 스케줄에 대한 참조를 필요로 한다:"

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:147
msgid "The ``gate`` can either be a ``circuit.Gate`` object or the name of the gate. Usually, you'll need a different schedule for each unique set of ``qubits`` and ``parameters``. Since the Hadamard gate doesn't have any parameters, we don't have to supply any."
msgstr ""

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:168
msgid "Lastly, note that the transpiler will respect your calibrations. Use it as you normally would (our example is too simple for the transpiler to optimize, so the output is the same)."
msgstr "마지막으로 트랜스파일러는 당신의 교정을 준수하다는 걸 주의하자. 그럴 거라고 생각하고 사용하자 (우리의 예는 트랜스파일러가 최적화하기에는 너무 간단하므로 출력이 같다)."

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:231
msgid "Notice that ``h`` is not a basis gate for the mock backend ``FakeHanoi``. Since we have added a calibration for it, the transpiler will treat our gate as a basis gate; *but only on the qubits for which it was defined*. A Hadamard applied to a different qubit would be unrolled to the basis gates."
msgstr "``h`` 가 모조 백엔드 ``FakeHanoi`` 의 기저 게이트가 아닌 것에 주목하자. 보정이 추가되었기 때문에 트랜스파일러는 해당 게이트를 기저 게이트로 취급할 것이다; *하지만 오직 정의되었던 큐비트들에 대해서만 취급할 것이다*. 다른 큐비트에 적용된 Hadamard는 기저 게이트들로 전개될 것이다."

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:233
msgid "That's it!"
msgstr ""

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:236
msgid "Custom gates"
msgstr "사용자 설정 게이트"

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:238
msgid "We'll briefly show the same process for nonstandard, completely custom gates. This demonstration includes a gate with parameters."
msgstr ""

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:291
msgid "If we use the ``Gate`` instance variable ``custom_gate`` to add the calibration, the parameters are derived from that instance. Remember that the order of parameters is meaningful."
msgstr "만약 교정을 추가하고자 ``Gate`` 인스턴스 변수 ``custom_gate`` 를 사용한다면, 그 매개변수들은 인스턴스로부터 도출된다. 매개변수 순서가 의미가 있음을 유념하라."

#: ../../tutorials/circuits_advanced/05_pulse_gates.ipynb:322
msgid "Normally, if we tried to transpile our ``circ``, we would get an error. There was no functional definition provided for ``\"my_custom_gate\"``, so the transpiler can't unroll it to the basis gate set of the target device. We can show this by trying to add ``\"my_custom_gate\"`` to another qubit which hasn't been calibrated."
msgstr ""

