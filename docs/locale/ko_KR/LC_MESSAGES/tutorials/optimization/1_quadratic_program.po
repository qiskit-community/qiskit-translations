msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-07 16:27+0000\n"
"PO-Revision-Date: 2020-12-15 20:25\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/1_quadratic_program.po\n"
"X-Crowdin-File-ID: 9148\n"
"Language: ko_KR\n"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:10
msgid "This page was generated from `tutorials/optimization/1_quadratic_program.ipynb`__."
msgstr "이 페이지는 `tutorials/optimization/1_quadratic_program.ipynb`_ 에서 생성되었다."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/optimization/1_quadratic_program.ipynb>`_."
msgstr "`IBM 퀀텀 랩 <https://quantum-computing.ibm.com/jupyter/tutorial/optimization/1_quadratic_program.ipynb>`_ 에서 대화식으로 실행하십시오."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:9
msgid "Quadratic Programs"
msgstr "이차계획법 문제"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:21
msgid "Introduction"
msgstr "소개"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:32
msgid "In this tutorial, we briefly introduce how to build optimization problems using Qiskit’s optimization module. Qiskit introduces the ``QuadraticProgram`` class to make a model of an optimization problem. More precisely, it deals with quadratically constrained quadratic programs given as follows:"
msgstr "본 사용 지침서에서는, 키스킷의 최적화 모듈을 사용하여 최적화 문제를 빌드하는 방법을 간략하게 소개할 것이다. 키스킷은 최적화 문제의 모델을 생성하기 위하여 ``QuadraticProgram`` 클래스를 소개한다. 엄밀히 말하자면, ``QuadraticProgram`` 는 목적함수와 제약조건이 모두 이차 식으로 주어진 문제들 (quadratically constrained quadratic programs) 을 다룬다. 예를 들어, 다음과 같이 주어진 문제에서:"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:34
msgid "\\begin{align}\n"
"\\text{minimize}\\quad& x^\\top Q_0 x + c^\\top x\\\\\n"
"\\text{subject to}\\quad& A x \\leq b\\\\\n"
"& x^\\top Q_i x + a_i^\\top x \\leq r_i, \\quad 1,\\dots,i,\\dots,q\\\\\n"
"& l_i \\leq x_i \\leq u_i, \\quad 1,\\dots,i,\\dots,n,\n"
"\\end{align}"
msgstr "\\begin{align}\n"
"\\text{minimize}\\quad& x^\\top Q_0 x + c^\\top x\\\\\n"
"\\text{subject to}\\quad& A x \\leq b\\\\\n"
"& x^\\top Q_i x + a_i^\\top x \\leq r_i, \\quad 1,\\dots,i,\\dots,q\\\\\n"
"& l_i \\leq x_i \\leq u_i, \\quad 1,\\dots,i,\\dots,n,\n"
"\\end{align}"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:44
msgid "where the :math:`Q_i` are :math:`n \\times n` matrices, :math:`A` is a :math:`m \\times n` matrix , :math:`x`, and :math:`c` are :math:`n`-dimensional vectors, :math:`b` is an :math:`m`-dimensional vector, and where :math:`x` can defined as binary, integer, or continuous variables. In addition to “:math:`\\leq`” constraints ‘QuadraticProgram’ also supports “:math:`\\geq`” and “:math:`=`”."
msgstr "여기서 :math:`Q_i`는 `i`번째 :math:`n \\times n` 행렬, :math:`A`는 :math:`m \\times n` 행렬, :math:`x`와 :math:`c`는 각각 :math:`n`-차원 벡터이고, :math:`b`는 :math:`m`-차원 벡터일 때, :math:`x`는 바이너리, 정수, 혹은 연속한 변수들로 정의된다. ``QuadraticProgram`` 클래스는 \":math:`\\leq`\" 제약조건 뿐만 아니라 \":math:`\\geq`\" 제약조건과 \":math:`=`\" 제약조건도 지원한다."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:56
msgid "Loading a ``Quadratic Program`` from an LP file"
msgstr "LP (Linear Program) 파일에서 ``Quadratic Program`` 를 불러오기"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:67
msgid "As setup, you need to import the following module."
msgstr "초기 설정을 위하여, 아래와 같이 모듈을 임포트해야 한다."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:88
msgid "You start with an empty model. How to add variables and constraints to a model is explained in the section “Directly constructing a ``QuadraticProgram``”."
msgstr "비어 있는 모델에서 시작한다. 모델에 변수와 제한조건을 추가하는 방법에 대해서는 \" ``QuadraticProgram`` 을 사용하여 직접 모델을 세워보기\" 섹션에서 설명할 것이다."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:99
msgid "Qiskit’s optimization module supports the conversion from Docplex model. You can easily make a model of an optimization problem with Docplex. You can find the documentation of Docplex at https://ibmdecisionoptimization.github.io/docplex-doc/mp/index.html"
msgstr "키스킷의 최적화 모듈은 Docplex 모델과의 변환을 지원한다. Docplex를 활용하면 쉽게 최적화 문제의 모델을 생성할 수 있다. Docplex 문서는 여기 https://ibmdecisionoptimization.github.io/docplex-doc/mp/index.html 에서 찾을 수 있다."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:101
msgid "You can load a Docplex model to ``QuadraticProgram`` by invoking ``from_docplex``."
msgstr "``from_docplex`` 를 호출하여 Docplex 모델을 ``QuadraticProgram`` 에 불러올 수 있다."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:113
msgid "Loading a ``QuadraticProgram`` from a docplex model"
msgstr "Docplex 모델에서 ``QuadraticProgram``을 불러오기"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:275
msgid "Directly constructing a ``QuadraticProgram``"
msgstr "``QuadraticProgram`` 을 사용하여 직접 모델을 세워보기"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:286
msgid "We then explain how to make model of an optimization problem directly using ``QuadraticProgram``. Let’s start from an empty model."
msgstr "우리는 ``QuadraticProgram`` 을 직접 사용하여 어떻게 최적화 문제의 모델을 생성하는지 설명할 것이다. 앞서 언급했듯이 비어 있는 모델에서 시작하자."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:348
msgid "The ``QuadraticProgram`` supports three types of variables: - Binary variable - Integer variable - Continuous variable"
msgstr "``QuadraticProgram`` 는 다음의 세 가지 변수 유형을 지원한다: - 바이너리 변수 - 정수 변수 - 연속형 변수"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:350
msgid "When you add variables, you can specify names, types, lower bounds and upper bounds."
msgstr "변수를 추가할 때, 변수의 이름, 유형, 하계, 상계를 지정할 수 있다."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:352
msgid "When you display your problem as LP format, ``Binaries`` denotes binary variables and ``Generals`` denotes integer variables. If variables are not included in either ``Binaries`` or ``Generals``, such variables are continuous ones with default lower bound = 0 and upper bound = infinity. Note that you cannot use ‘e’ or ‘E’ as the first character of names due to the `specification of LP format <https://www.ibm.com/support/knowledgecenter/SSSA5P_12.7.1/ilog.odms.cplex.help/CPLEX/FileFormats/topics/LP_VariableNames.html>`__."
msgstr "당신의 최적화 문제가 LP 형식으로 표시될 때, ``Binaries`` 는 바이너리 변수들을 나타내고, ``Generals`` 는 정수형 변수들을 나타낸다. 만약 ``Binaries`` 와 ``Generals`` 둘 중에 어디에도 속하지 않는 변수들이 있다면, 이와 같은 변수들은 하계 = 0이고 상계 = infinity를 기본값으로 갖는 연속형 변수들이다. `LP 형식의 명세 <https://www.ibm.com/support/knowledgecenter/SSSA5P_12.7.1/ilog.odms.cplex.help/CPLEX/FileFormats/topics/LP_VariableNames.html>`_ 에 따라, 변수이름 첫 글자로 'e' 또는 'E'가 들어갈 수 없다는 점에 주의하시오."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:435
msgid "You can set the objective function by invoking ``QuadraticProgram.minimize`` or ``QuadraticProgram.maximize``. You can add a constant term as well as linear and quadratic objective function by specifying linear and quadratic terms with either list, matrix or dictionary."
msgstr "``QuadraticProgram.minimize`` 또는 ``QuadraticProgram.maximize`` 를 호출하여 목적함수를 설정할 수 있다. 리스트, 행렬, 혹은 딕셔너리 자료형을 사용해 선형 항과 이차 항을 지정함으로서 상수 항을 추가할 수 있을 뿐만 아니라 선형 목적함수와 이차 목적함수를 추가할 수 있다."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:437
msgid "Note that in the LP format the quadratic part has to be scaled by a factor :math:`1/2`. Thus, when printing as LP format, the quadratic part is first multiplied by 2 and then divided by 2 again."
msgstr "LP 형식에 따라 이차 항은 스케일 팩터 :math:`1/2` 로 스케일링 되어야 한다는 점을 유의하시오. 따라서 LP 형식에 따라 출력할 때, 이차 항에 먼저 2를 곱한 후 2로 나누게 된다."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:439
msgid "For quadratic programs, there are 3 pieces that have to be specified: a constant (offset), a linear term (:math:`c^{T}x`), and a quadratic term (:math:`x^{T}Qx`)."
msgstr "이차 계획법 문제에서는 다음의 3가지 요소가 명시되어야 한다: 상수 항 (offset), 선형 항(:math:`c^{T}x`), 이차 항(:math:`x^{T}Qx`)."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:441
msgid "The cell below shows how to declare an objective function using a dictionary. For the linear term, keys in the dictionary correspond to variable names, and the corresponding values are the coefficients. For the quadratic term, keys in the dictionary correspond to the two variables being multiplied, and the values are again the coefficients."
msgstr "아래의 셀 (cell) 은 딕셔너리 자료형을 사용하여 목적함수를 선언하는 방법을 보여준다. 선형 항의 경우, 자료형의 키 (key) 는 변수 이름에 대응되며 자료형의 값 (value) 은 계수에 대응된다. 이차 항의 경우, 키는 곱한 두 변수를 나타내며, 마찬가지로 값은 계수에 대응된다."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:521
msgid "Another way to specify the quadratic program is using arrays. For the linear term, the array corresponds to the vector :math:`c` in the mathematical formulation. For the quadratic term, the array corresponds to the matrix :math:`Q`. Note that the ordering of the variables (:math:`x` in the mathematical formulation) is the order in which the variables were originally declared in the QuadraticProgram object."
msgstr "이와 더불어, 배열을 사용하여 이차 계획법 문제를 지정하는 방법도 있다. 선형 항의 경우, 배열은 앞서 수학 식의 벡터 :math:`c`에 해당한다. 이차 항의 경우, 배열은 행렬 :math:`Q`에 해당한다. 변수 (수학 식의 :math:`x`) 의 순서는 QuadraticProgram 객체에 변수를 선언했던 순서와 동일함을 유의하시오."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:601
msgid "You can access the constant, the linear term, and the quadratic term by looking at ``Quadratic.objective.{constant, linear, quadratic}``, respectively. As for linear and quadratic terms, you can get a dense matrix (``to_array``), a sparse matrix (``coefficients``), and a dictionary (``to_dict``). For dictionaries, you can specify whether to use variable indices or names as keys. Note that the quadratic terms are stored in a compressed way, e.g., ``{('x', 'y'): 1, ('y', 'x'): 2}`` is stored as ``{('x', 'y'): 3}``. You can get the quadratic term as a symmetric matrix by calling ``to_array(symmetric=True)`` or ``to_dict(symmetric=True)``. If you call ``to_dict(name=True)``, you can get a dictionary whose keys are pairs of variable names."
msgstr "``Quadratic.objective.{constant, linear, quadratic}`` 를 출력함으로써 상수 항, 선형 항, 이차 항에 각각 액세스 (access) 할 수 있다. 선형 항과 이차 항을 출력하고자 할 때는 밀집 행렬( ``to_array``), 희소 행렬( ``coefficients``), 딕셔너리( ``to_dict``) 중에서 선택하여 출력할 수 있다. 딕셔너리의 경우, 자료형의 키를 명시할 때 변수들의 인덱스를 사용하거나 변수들의 이름을 사용하여 명시할 수 있다. 출력된 이차 항은 압축된 형태 (즉, ``{('x', 'y'): 1, ('y', 'x'): 2}`` 는 ``{('x', 'y'): 3}`` 의 형태로 압축) 임에 유의하시오. ``to_array(symmetric=True)`` 또는 ``to_dict(symmetric=True)`` 를 호출하여 이차 항을 대칭 행렬 형태로 출력할 수 있다. 만약 ``to_dict(name=True)`` 를 호출했다면 키가 변수들의 이름인 딕셔너리를 출력할 수 있을 것이다."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:694
msgid "Adding/removing linear and quadratic constraints"
msgstr "선형 제약조건과 이차 제약조건을 추가/제거하기"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:705
msgid "You can add linear constraints by setting name, linear expression, sense and right-hand-side value (rhs). You can use senses ‘EQ’, ‘LE’, and ‘GE’ as Docplex supports."
msgstr "이름, 선형 표현식, 민감도 (sense), 우변 (right-hand-side valuel; rhs) 을 설정함으로써 선형 제약조건을 추가할 수 있다. 민감도의 경우 Docples는 'EQ', 'LE', and 'GE' 를 지원한다."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:793
msgid "You can add quadratic constraints as well as objective function and linear constraints."
msgstr "목적함수와 선형 제약조건 뿐만 아니라 이차 제약조건도 추가할 수 있다."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:887
msgid "You can access linear and quadratic terms of linear and quadratic constraints as in the same way as the objective function."
msgstr "목적함수에 액세스(access) 했던 방법을 그대로 사용하여 선형 제약조건의 선형 항과 이차 제약조건의 이차 항에 각각 액세스할 수 있다."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:932
msgid "You can also remove linear/quadratic constraints by ``remove_linear_constraint`` and ``remove_quadratic_constraint``."
msgstr "또한 ``remove_linear_constraint`` 과 ``remove_quadratic_constraint`` 을 사용하여 선형/이차 제약조건을 제거할 수 있다."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:1021
msgid "You can substitute some of variables with constants or other variables. More precicely, ``QuadraticProgram`` has a method ``substitute_variables(constants=..., variables=...)`` to deal with the following two cases. - :math:`x \\leftarrow c`: when ``constants`` have a dictionary ``{x: c}``. - :math:`x \\leftarrow c y`: when ``variables`` have a dictionary ``{x: (y, c)}``."
msgstr "변수에 상수를 대입하거나 해당 변수를 다른 변수로 대체할 수 있다. 엄밀히 말하자면, ``QuadraticProgram`` 의 ``substitute_variables(constants=..., variables=...)`` 메서드는 다음의 두 가지 경우를 처리할 수 있다. - :math:`x \\leftarrow c`: ``constants`` 가 딕셔너리 ``{x: c}`` 를 가질 때. - :math:`x \\leftarrow c y`: ``variables`` 가 딕셔너리 ``{x: (y, c)}`` 를 가질 때."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:1033
msgid "Substituting Variables"
msgstr "변수 치환"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:1104
msgid "If the resulting problem is infeasible due to lower bounds or upper bounds, the methods returns the status ``Status.INFEASIBLE``. We try to replace variable ``x`` with -1, but -1 is out of range of ``x`` (0 <= ``x`` <= 1). So, it returns ``Status.INFEASIBLE``."
msgstr "상계 혹은 하계의 제약조건을 만족할 수 없는 불가능 (infeasible) 상태에서, 해당 메서드는 ``Status.INFEASIBLE`` 을 반환한다. 우리는 변수 ``x`` 에 -1을 대입하고 있지만, -1 은 ``x`` 의 범위 (0 <= ``x`` <= 1) 를 벗어난다. 따라서 메서드는 ``Status.INFEASIBLE`` 를 반환하는 것이다."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:1148
msgid "You cannot substitute variables multiple times. The method raises an error in such a case."
msgstr "한 번 대체한 변수는 중복하여 대체할 수 없다. 이와 같은 경우 메서드는 오류를 발생시킨다."

