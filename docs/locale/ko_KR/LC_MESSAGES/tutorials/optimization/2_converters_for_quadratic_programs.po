msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-07 16:27+0000\n"
"PO-Revision-Date: 2020-12-15 20:25\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/2_converters_for_quadratic_programs.po\n"
"X-Crowdin-File-ID: 9150\n"
"Language: ko_KR\n"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:10
msgid "This page was generated from `tutorials/optimization/2_converters_for_quadratic_programs.ipynb`__."
msgstr "이 페이지는 `tutorials/optimization/2_converters_for_quadratic_programs.ipynb`_ 에서 생성되었다."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/optimization/2_converters_for_quadratic_programs.ipynb>`_."
msgstr "`IBM 퀀텀 랩 <https://quantum-computing.ibm.com/jupyter/tutorial/optimization/2_converters_for_quadratic_programs.ipynb>`_ 에서 대화식으로 실행하십시오."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:9
msgid "Converters for Quadratic Programs"
msgstr "이차계획법 문제를 위한 변환기"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:20
msgid "Optimization problems in Qiskit’s optimization module are represented with the ``QuadraticProgram`` class, which is generic and powerful representation for optimization problems. In general, optimization algorithms are defined for a certain formulation of a quadratic program and we need to convert our problem to the right type."
msgstr "키스킷의 최적화 모듈에서 최적화 문제는 ``QuadraticProgram`` 클래스로 표현되는데, 이는 최적화 문제에 대한 일반적이고 강력한 표현이다. 일반적으로 최적화 알고리즘은 이차계획법 문제의 특수한 공식화에 의해 정의되고 우리는 우리가 풀 문제를 올바른 유형으로 변환할 필요가 있다."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:22
msgid "For instance, Qiskit provides several optimization algorithms that can handle Quadratic Unconstrained Binary Optimization (QUBO) problems. These are mapped to Ising Hamiltonians, for which Qiskit uses the ``qiskit.aqua.operators`` module, and then their ground state is approximated. For this optimization commonly known algorithms such as VQE or QAOA can be used as underlying routine. See the following tutorial about the `Minimum Eigen Optimizer <./3_minimum_eigen_optimizer.ipynb>`__ for more detail. Note that also other algorithms exist that work differently, such as the ``GroverOptimizer``."
msgstr "예를 들어, 키스킷은 이차 비한정 이진 최적화 (Quadratic Unconstrained Binary Optimization; QUBO) 문제들을 처리할 수 있는 몇 가지 최적화 알고리즘들을 제공한다. 이 문제들은 키스킷의 ``qiskit.aqua.operators`` 모듈을 통해 이징 해밀토니언 (Ising Hamiltonians)에 매핑되며, 이후 이들의 바닥상태 (ground sate) 가 근사화된다. VQE 또는 QAOA와 같이 일반적으로 잘 알려진 알고리즘들에 대하여 위와 같은 방식으로 최적화가 수행된다. 자세한 내용은 다음의 사용 지침서 `Minimum Eigen Optimizer <./3_minimum_eigen_optimizer.ipynb>`__ 를 참조하도록 한다. 물론 ``GroverOptimizer`` 과 같이 다른 방식으로 작동하는 알고리즘들도 있음에 유의하시오."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:25
msgid "To map a problem to the correct input format, the optimization module of Qiskit offers a variety of converters. In this tutorial we’re providing an overview on this functionality. Currently, Qiskit contains the following converters. - ``InequalityToEquality``: converts inequality constraints into equality constraints with additional slack variables. - ``IntegerToBinary``: converts integer variables into binary variables and corresponding coefficients. - ``LinearEqualityToPenalty``: convert equality constraints into additional terms of the object function. - ``QuadraticProgramToQubo``: a wrapper for ``InequalityToEquality``, ``IntegerToBinary``, and ``LinearEqualityToPenalty`` for convenience."
msgstr "문제를 올바른 입력 형식으로 보이기 위하여, 키스킷의 최적화 모듈은 다양한 변환기들을 제공한다. 본 사용 지침서에서는 최적화 모듈이 제공하는 각 변환기의 기능들을 개괄적으로 정리하여 설명할 것이다. 현재 키스킷에 포함되어 있는 변환기들은 다음과 같다 - ``InequalityToEquality``: 부등식 제약조건을 등식 제약조건 및 변환 과정에서 추가된 완화 제약조건들로 변환한다. - ``IntegerToBinary``: 정수형 변수를 바이너리형 변수 및 각 변수에 대응되는 계수로 변환한다. - ``LinearEqualityToPenalty``: 등식 제약조건을 목적함수의 추가 항으로 변환한다. 사용자의 편의를 위화여 ``QuadraticProgramToQubo``는  ``InequalityToEquality``, ``IntegerToBinary``, ``LinearEqualityToPenalty``의 래퍼 (wrapper) 이다."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:38
msgid "InequalityToEquality"
msgstr "InequalityToEquality"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:40
msgid "``InequalityToEqualityConverter`` converts inequality constraints into equality constraints with additional slack variables to remove inequality constraints from ``QuadraticProgram``. The upper bounds and the lower bounds of slack variables will be calculated from the difference between the left sides and the right sides of constraints. Signs of slack variables depend on symbols in constraints such as :math:`\\leq` and :math:`\\geq`."
msgstr "``QuadraticProgram`` 에서 비등식 제약조건을 제거하기 위하여 ``InequalityToEqualityConverter`` 는 비등식 제약조건을 등식제약조건 및 완화 제약조건들로 반환한다. 완화 제약조건의 상계와 하계는 제약조건의 좌변과 우변의 차이로 계산된다. 완화 제약조건의 부호는 :math:`\\leq`와 :math:`\\geq` 같은 제약조건의 부등호에 의하여 결정된다."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:42
msgid "The following is an example of a maximization problem with two inequality constraints. Variable :math:`x` and :math:`y` are binary variables and variable :math:`z` is an integer variable."
msgstr "다음은 부등식 제약조건이 2 개인 최대화 문제의 예이다. 다음은 두 개의 부등식이 있는 최대화 문제의 예입니다. 변수 :math:`x`와 :math:`y`는 바이너리 변수이고 변수 :math:`z` 는 정수 변수이다."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:56
msgid "With ``QuadraticProgram``, an optimization model of the problem is written as follows."
msgstr "``QuadraticProgram`` 을 이용하여 작성한 최적화 문제의 모델은 다음과 같다."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:156
msgid "Call ``convert`` method of ``InequalityToEquality`` to convert."
msgstr "모델을 변환하기 위하여 ``InequalityToEquality`` 의 ``convert`` 메서드를 호출하시오."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:254
msgid "After converting, the formulation of the problem looks like as the follows. As we can see, the inequality constraints are replaced with equality constraints with additional integer slack variables, :math:`xyz\\_leg\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack`."
msgstr "변환 후, 문제의 수식을 세워보면 다음과 같다. 부등식 제약조건이 등식 제약조건 및 정수형 완화 제약조건 (:math:`xyz\\_leg\\text{@}int\\_slack`과 :math:`xyz\\_geq\\text{@}int\\_slack`)으로 대체된 것을 확인할 수 있다."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:256
msgid "Let us explain how the conversion works. For example, the lower bound of the left side of the first constraint is :math:`0` which is the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Thus, the upperbound of the additional integer variable must be :math:`5` to be able to satisfy even the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Note that we cut off the part after the decimla point in the converted formulation since the left side of the first constraint in the original formulation can be only integer values. For the second constraint, basically we apply the same approach. However, the symol in the second constraint is :math:`\\geq`, so we add minus before :math:`xyz\\_geq\\text{@}int\\_slack` to be able to satisfy even the case of :math:`x=1, y=1`, and :math:`z=7`."
msgstr ""

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:283
msgid "IntegerToBinary"
msgstr "IntegerToBinary"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:294
msgid "``IntegerToBinary`` converts integer variables into binary variables and coefficients to remove integer variables from ``QuadraticProgram``. For converting, bounded-coefficient encoding proposed in `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Eq. (5)) is used. For more detail of the encoding method, please see the paper."
msgstr "``QuadraticProgram`` 에서 정수형 변수를 제거하기 위하여 ``IntegerToBinary`` 는 정수형 변수를 바이너리형 변수와 계수로 변환한다. 변환을 위하여, 다음의 논문 `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Eq. (5)) 에서 제안한 유계 계수 인코딩 (bounded-coefficient encoding)이 사용된다. 인코딩 기법과 관련한 자세한 내용은 논문을 참조하시오."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:296
msgid "We use the output of ``InequalityToEquality`` as starting point. Variable :math:`x` and :math:`y` are binary variables, while the variable :math:`z` and the slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` are integer variables. We print the problem again for reference."
msgstr ""

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:382
msgid "Call ``convert`` method of ``IntegerToBinary`` to convert."
msgstr "모델을 변환하기 위하여 ``IntegerToBinary`` 의 ``convert`` 메서드를 호출하시오."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:492
msgid "After converting, integer variables :math:`z` is replaced with three binary variables :math:`z\\text{@}0`, :math:`z\\text{@}1` and :math:`z\\text{@}2` with coefficients 1, 2 and 4, respectively as the above. The slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` that were introduced by ``InequalityToEquality`` are also both replaced with three binary variables with coefficients 1, 2, 2, and 1, 2, 3, respectively."
msgstr ""

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:494
msgid "Note: Essentially the coefficients mean that the sum of these binary variables with coefficients can be the sum of a subset of :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, and :math:`\\{1, 2, 3\\}` to represent that acceptable values :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}`, and :math:`\\{0, \\ldots, 6\\}`, which respects the lower bound and the upper bound of original integer variables correctly."
msgstr ""

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:496
msgid "``IntegerToBinary`` also provides ``interpret`` method that is the functionality to translate a given binary result back to the original integer representation."
msgstr "또한, ``IntegerToBinary`` 는 주어진 바이너리 결과를 다시 원래의 정수 표현으로 변환하는 기능인 ``interpret`` 을 제공한다."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:508
msgid "LinearEqualityToPenalty"
msgstr "LinearEqualityToPenalty"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:519
msgid "``LinearEqualityToPenalty`` converts linear equality constraints into additional quadratic penalty terms of the objective function to map ``QuadraticProgram`` to an unconstrained form. An input to the converter has to be a ``QuadraticProgram`` with only linear equality constraints. Those equality constraints, e.g. \\ :math:`\\sum_i a_i x_i = b` where :math:`a_i` and :math:`b` are numbers and :math:`x_i` is a variable, will be added to the objective function in the form of :math:`M(b - \\sum_i a_i x_i)^2` where :math:`M` is a large number as penalty factor. By default :math:`M= 1e5`. The sign of the term depends on whether the problem type is a maximization or minimization."
msgstr ""

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:522
msgid "We use the output of ``IntegerToBinary`` as starting point, where all variables are binary variables and all inequality constraints have been mapped to equality constraints. We print the problem again for reference."
msgstr "``IntegerToBinary`` 의 결과를 시작 지점으로 사용한다. 여기서 모든 변수는 바이너리 변수이고 모든 부등식 제약조건은 등식 제약조건에 사상되었다. 참조를 위하여 문제를 다시 출력한다."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:620
msgid "Call ``convert`` method of ``LinearEqualityToPenalty`` to convert."
msgstr "모델을 변환하기 위하여 ``LinearEqualityToPenalty`` 의 ``convert`` 메서드를 호출하시오."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:774
msgid "After converting, the equality constraints are added to the objective function as additional terms with the default penalty factor :math:`M=1e5`. The resulting problem is now a QUBO and compatible with many quantum optimization algorithms such as VQE, QAOA and so on."
msgstr ""

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:785
msgid "This gives the same result as before."
msgstr "이는 이전과 동일한 결과를 제공한다."

