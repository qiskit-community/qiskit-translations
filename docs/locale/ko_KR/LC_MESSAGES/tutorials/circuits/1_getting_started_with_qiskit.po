msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-14 09:35+0000\n"
"PO-Revision-Date: 2020-07-31 18:29\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits/1_getting_started_with_qiskit.po\n"
"X-Crowdin-File-ID: 9114\n"
"Language: ko_KR\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:10
msgid "This page was generated from `tutorials/circuits/1_getting_started_with_qiskit.ipynb`__."
msgstr "이 페이지는 `tutorials/회로 /1_getting_started_qiskit.ipynb` __ 에서 생성되었다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:9
msgid "Getting Started with Qiskit"
msgstr "키스킷 시작하기"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:11
msgid "Here, we provide an overview of working with Qiskit. The fundamental package of Qiskit is Terra that provides the basic building blocks necessary to program quantum computers. The fundamental unit of Qiskit is the `**quantum circuit** <https://en.wikipedia.org/wiki/Quantum_circuit>`__. A basic workflow using Qiskit consists of two stages: **Build** and **Execute**. **Build** allows you to make different quantum circuits that represent the problem you are solving, and **Execute** that allows you to run them on different backends. After the jobs have been run, the data is collected and postprocessed depending on the desired output."
msgstr "여기서는 키스킷을 사용하기에 대한 요약을 제공한다. 키스킷의 기반이 되는 패키지는 테라(Terra)이며, 양자 컴퓨터를 프로그램하기 위한 기본 블럭들을 제공한다. 키스킷의 기반 유닛은 `**양자 회로** <https://en.wikipedia.org/wiki/Quantum_circuit>`__ 이다. 키스킷을 사용하는 작업 흐름은 다음의 두 가지 단계로 이루어져 있다. **만들기** and **실행하기**. **만들기** 단계는 풀려고 하는 문제를 표현하는 여러 양자 회로들을 만들수 있게 해주고, **실행하기** 단계는 각각의 회로를 다른 후위 처리 장치에서 실행하게 해준다. 작업이 실행되고 난 후에 원하는 출력에 따라 자료가 수집되고 후 처리되게 된다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:36
msgid "Circuit Basics"
msgstr "회로 기초"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:39
msgid "Building the circuit"
msgstr "회로 만들기"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:41
msgid "The basic element needed for your first program is the QuantumCircuit. We begin by creating a ``QuantumCircuit`` comprised of three qubits."
msgstr "첫 프로그램을 위한 기본 요소는 QuantumCircuit 이며. 우리는 세 개의 큐빗으로 구성된 ``QuantumCircuit``을 만드는 것으로 시작한다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:63
msgid "After you create the circuit with its registers, you can add gates (\"operations\") to manipulate the registers. As you proceed through the tutorials you will find more gates and circuits; below is an example of a quantum circuit that makes a three-qubit GHZ state"
msgstr "레지스터로 구성된 회로를 만든 후 게이트(\"연산\")을 추가 하여 레지스터를 조작할 수 있다. 사용 지침서를 진행하면서, 더 많은 게이트와 회로에 대해 배울 수 있고. 아래는 삼-큐비트 GHZ 상태를 만드는 양자 회로의 예다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:65
msgid "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}."
msgstr "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:67
msgid "To create such a state, we start with a three-qubit quantum register. By default, each qubit in the register is initialized to :math:`|0\\rangle`. To make the GHZ state, we apply the following gates: \\* A Hadamard gate :math:`H` on qubit 0, which puts it into the superposition state :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}`. \\* A controlled-Not operation (:math:`C_{X}`) between qubit 0 and qubit 1. \\* A controlled-Not operation between qubit 0 and qubit 2."
msgstr "위와 같은 상태를 만들기 위해서는 삼-큐비트 양자 레지스터로 시작해야 한다. 기본적으로 레지스터에 있는 각각의 큐비트는 :math:`|0\\rangle` 상태로 초기화 되어 있으며. GHZ 상태로 만들기 위해서는 다음과 같은 게이트를 적용해야 한다. 큐비트 0에 \\* 하다마드 게이트 :math:`H`를 적용하여서 중첩상태 :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}`로 만든다. \\* 그 다음은 조절된 부정 연산 (:math:`C_{X}`)을 큐빗 0과 큐빗 1 사이에 적용. \\* 그리고 조절된 부정 연산을 큐빗 0과 큐빗 2 사이에 적용한다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:69
msgid "On an ideal quantum computer, the state produced by running this circuit would be the GHZ state above."
msgstr "이상적인 양자 컴퓨터에서는 이 회로에 의해 만들어진 상태는 위에 생성된 GHZ 상태이다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:71
msgid "In Qiskit, operations can be added to the circuit one by one, as shown below."
msgstr "키스킷에서는 아래와 같이 연산을 회로에 하나씩 추가 할 수 있다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:120
msgid "Visualize Circuit"
msgstr "회로 가시화하기"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:122
msgid "You can visualize your circuit using Qiskit ``QuantumCircuit.draw()``, which plots the circuit in the form found in many textbooks."
msgstr "키스킷의 ``QuantumCircuit.draw()``를 사용하여 회로를 시각화 할 수 있으며. 여러 교재에 보여진 형태로 회로가 그려진다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:152
msgid "In this circuit, the qubits are put in order, with qubit zero at the top and qubit two at the bottom. The circuit is read left to right (meaning that gates that are applied earlier in the circuit show up further to the left)."
msgstr "이 회로에 있는 큐비트들은 순서 대로 배치되며 큐비트 0은 위쪽에 큐비트 2는 아래쪽에 놓이게 된다. 회로는 왼쪽에서 부터 오른쪽으로 읽는다 (가장 왼쪽에 배치된 게이트들이 회로에서 먼저 적용된다는 것을 의미한다)"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:167
msgid "When representing the state of a multi-qubit system, the tensor order used in Qiskit is different than that used in most physics textbooks. Suppose there are :math:`n` qubits, and qubit :math:`j` is labeled as :math:`Q_{j}`. Qiskit uses an ordering in which the :math:`n^{\\mathrm{th}}` qubit is on the left side of the tensor product, so that the basis vectors are labeled as :math:`Q_n\\otimes \\cdots \\otimes Q_1\\otimes Q_0`."
msgstr "다중 큐비트 시스템의 상태를 나타낼 때에, 키스킷은 대부분의 물리 교재에서 사용되는 텐서(tensor)의 순서와는 반대 되는 순서를 사용한다. 만약 :math:`n`개의 큐빗이 있고, 큐비트 :math:`j`가 :math:`Q_{j}`로 표시되었다고 하자. 키스킷은 :math:`n^{\\mathrm{th}}` 큐비트는 텐서 곱의 왼쪽 편에 있어서 기저 벡터들이 :math:`Q_n\\otimes \\cdots \\otimes Q_1\\otimes Q_0`로 표현되어 진다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:169
msgid "For example, if qubit zero is in state 0, qubit 1 is in state 0, and qubit 2 is in state 1, Qiskit would represent this state as :math:`|100\\rangle`, whereas many physics textbooks would represent it as :math:`|001\\rangle`."
msgstr "예를 들어, 큐빗 0이 0 상태에 있고, 큐비트 1이 0 상태, 큐비트 2가 1 상태에 있을 때, 키스킷은 이 상태를 :math:`|100\\rangle로 표현하는데, 대부분의 물리 교재들을 :math:`|001\\rangle`로 표현한다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:171
msgid "This difference in labeling affects the way multi-qubit operations are represented as matrices. For example, Qiskit represents a controlled-X (:math:`C_{X}`) operation with qubit 0 being the control and qubit 1 being the target as"
msgstr "이러한 표현의 차이는 다중 큐비트 연산이 매트릭스로 표현될 때 나타나게 된다. 예를 들어 큐비트 0이 제어 큐비트이고, 큐비트 1이 목표 큐비트일 때, 조절된 X (:math:`C_{X}`) 연산은 키스킷에서 다음과 같이 표현된다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:173
msgid "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}."
msgstr "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:189
msgid "Simulating circuits using Qiskit Aer"
msgstr "키스킷 아르 (Aer) 를 사용하여 회로 시뮬레이션 하기"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:191
msgid "Qiskit Aer is our package for simulating quantum circuits. It provides many different backends for doing a simulation. There is also a basic, Python only, implementation called ``BasicAer`` in Terra that can be used as a drop-in replacement for ``Aer`` in the examples below."
msgstr "키스킷 아르는 양자 회로를 시뮬레이션 하기 위한 패키지이다. 이것은 시뮬레이션을 실행하기 위한 많은 다양한 후위 처리 장치를 제공한다. 아래에 나타난 예와 같이 테라에서는 ``Aer``를 대체하기 위해 사용될 수 있는 ``BasicAer``라 불리는 파이썬 버전의 구현도 있다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:194
msgid "Statevector backend"
msgstr "상태벡터 후위 처리 장치"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:196
msgid "The most common backend in Qiskit Aer is the ``statevector_simulator``. This simulator returns the quantum state, which is a complex vector of dimensions :math:`2^n`, where :math:`n` is the number of qubits (so be careful using this as it will quickly get too large to run on your machine)."
msgstr "키스킷 아르에 사용되는 가장 일반적인 후위 처리 장치는 ``statevector_simulator``이다. 이 시뮬레이터는 양자 상태를 돌려주는데, 이는 큐비트의 갯수가 :math:`n`일 때, :math:`2^n`의 차원을 가지는 복소수 벡터이다. (따라서 실행시 빠르게 그 크기가 늘어나기 때문에 주의해야 한다.)"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:207
msgid "To run the above circuit using the statevector simulator, first you need to import Aer and then set the backend to ``statevector_simulator``."
msgstr "위의 회로를 상태벡터 시뮬레이터를 이용하여 실행할 때, 우선 아르를 임포트하고 후위 처리 장치를 ``statevector_simulator``로 설정해야 한다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:232
msgid "Now that we have chosen the backend, it's time to compile and run the quantum circuit. In Qiskit we provide the ``execute`` function for this. ``execute`` returns a ``job`` object that encapsulates information about the job submitted to the backend."
msgstr "후위 처리 장치를 정한 이후에 양자 회로를 컴파일하고 실행해야 한다. 이를 위해 키스킷은 ``execute``함수를 제공한다. ``execute``은 후위 처리 장치에 제출된 작업에 대한 정보를 함축하고 있는 ``job`` 객체를 되돌려 준다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:238
msgid "Tip: You can obtain the above parameters in Jupyter. Simply place the text cursor on a function and press Shift+Tab."
msgstr "팁: 주피터에서는 위의 매개 변수들을 손쉽게 얻을 수 있다. 단순히 문자 커서를 함수 위에 놓고 Shift+Tab을 누르면 된다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:264
msgid "When you run a program, a job object is made that has the following two useful methods: ``job.status()`` and ``job.result()``, which return the status of the job and a result object, respectively."
msgstr "프로그램을 실행할 때, 작업 객체는 다음의 두 메소드 ``job.status()`` 와 ``job.result()``를 가지는데, 각각은 작업의 대한 상태와 그 결과를 돌려준다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:270
msgid "Note: Jobs run asynchronously, but when the result method is called, it switches to synchronous and waits for it to finish before moving on to another task."
msgstr "참고: 작업은 비동기화 방식으로 실행되지만, 결과 메소드가 호출되면, 동기화 방식으로 전환되어서 다른 작업으로 옮겨가기 전에 작업이 끝날 때까지 기다리게 된다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:295
msgid "The results object contains the data and Qiskit provides the method ``result.get_statevector(circ)`` to return the state vector for the quantum circuit."
msgstr "결과 객체는 데이터를 가지고 있으며, 키스킷은 양자 회로에 대한 상태 벡터를 돌려주는 ``result.get_statevector(circ)`` 메소드를 제공한다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:338
msgid "Qiskit also provides a visualization toolbox to allow you to view these results."
msgstr "또한 키스킷은 이러한 결과들을 확인할 수 있도록 시각화 도구상자를 제공한다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:340
msgid "Below, we use the visualization function to plot the real and imaginary components of the state density matrix :nbsphinx-math:`\\rho`."
msgstr "아래에는 시각화 함수를 사용하여 상태 밀도 매트릭스 :nbsphinx-math:`\\rho`의 실수와 허수를 나타낸 것이다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:372
msgid "Unitary backend"
msgstr "단일 후위 장치"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:383
msgid "Qiskit Aer also includes a ``unitary_simulator`` that works *provided all the elements in the circuit are unitary operations*. This backend calculates the :math:`2^n \\times 2^n` matrix representing the gates in the quantum circuit."
msgstr "또한 키스킷 아르는 *회로의 모든 요소가 단일 연산일 때에 작동하는* ``unitary_simulator``를 포함하고 있다. 이 후위 처리 장치는 양자 회로에서 게이트를 나타내는 :math:`2^n \\times 2^n` 행렬을 계산한다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:460
msgid "OpenQASM backend"
msgstr "OpenQASM 후위 처리 장치"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:471
msgid "The simulators above are useful because they provide information about the state output by the ideal circuit and the matrix representation of the circuit. However, a real experiment terminates by *measuring* each qubit (usually in the computational :math:`|0\\rangle, |1\\rangle` basis). Without measurement, we cannot gain information about the state. Measurements cause the quantum system to collapse into classical bits."
msgstr "이러한 시뮬레이터들은 회로의 행렬 상태를 나타내고 이상적인 회로의 결과에 대한 정보를 주기 때문에 유용하다. 그러나 실제의 실험은 각각의 큐비트 (보통 계산적인 :math:`|0\\rangle, |1\\rangle` 베이스로 표현되는)를 *측정(measuring)*함으로서 종료 된다. 측정 없이는, 상태에 대한 정보를 얻을 수 없다. 그 이유는 측정을 통해서 양자 시스템은 고전적인 비트로 변환되기 때문이다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:473
msgid "For example, suppose we make independent measurements on each qubit of the three-qubit GHZ state"
msgstr "예를 들어 삼-큐비트인 GHZ 상태의 각각의 큐비트를 독립적으로 측정한다고 가정해 보자."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:475
msgid "|\\psi\\rangle = |000\\rangle +|111\\rangle)/\\sqrt{2},"
msgstr "|\\psi\\rangle = |000\\rangle+|111\\rangle\\right)/\\sqrt{2}."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:477
msgid "and let :math:`xyz` denote the bitstring that results. Recall that, under the qubit labeling used by Qiskit, :math:`x` would correspond to the outcome on qubit 2, :math:`y` to the outcome on qubit 1, and :math:`z` to the outcome on qubit 0."
msgstr "그리고 :math:`xyz`을 결과의 비트 문자열이라고 하자. 키스킷에서 사용되는 큐비트 표기로는 :math:`x`가 큐비트 2의 결과에 해당하고 :math:`y` 는 큐비트 1, 그리고 :math:`z`는 큐비트 0에 해당한다는 사실을 기억하기 바란다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:483
msgid "Note: This representation of the bitstring puts the most significant bit (MSB) on the left, and the least significant bit (LSB) on the right. This is the standard ordering of binary bitstrings. We order the qubits in the same way (qubit representing the MSB has index 0), which is why Qiskit uses a non-standard tensor product order."
msgstr "참고: 이러한 비트열 표기는 가장 중요한 비트 (MSB) 를 왼쪽에 가정 덜 중요한 비트 (LSB) 를 오른쪽에 둔다. 이는 이진 비트열을 표기하는 일반적인 순서이다. 우리는 큐비트도 이 규칙에 따라 배열한다. 따라서 MSB에 해당하는 큐비트는 0으로 인덱스 되며 이는 일반적인 텐서 곱 순서와는 다르다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:489
msgid "Recall the probability of obtaining outcome :math:`xyz` is given by"
msgstr ":math:`xyz` 의 결과를 얻는 확률은 다음과 같이 주어진다"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:491
msgid "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}"
msgstr "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:493
msgid "and as such for the GHZ state probability of obtaining 000 or 111 are both 1/2."
msgstr "그러므로 GHZ 상태에서 000 혹은 111 상태를 얻을 확률은 둘 다 1/2 이다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:495
msgid "To simulate a circuit that includes measurement, we need to add measurements to the original circuit above, and use a different Aer backend."
msgstr "측정이 포함된 회로를 시뮬레이션하기 위해서는, 원래의 회로에 측정 모듈을 추가해야 하며, 이를 위해 다른 아르 후위 처리 장치를 사용한다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:572
msgid "This circuit adds a classical register, and three measurements that are used to map the outcome of qubits to the classical bits."
msgstr "이 회로는 클래식 레지스터와, 큐비트의 결과를 고전 비트에 연결하기 위한 세 개의 측정들을 추가한다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:574
msgid "To simulate this circuit, we use the ``qasm_simulator`` in Qiskit Aer. Each run of this circuit will yield either the bitstring 000 or 111. To build up statistics about the distribution of the bitstrings (to, e.g., estimate :math:`\\mathrm{Pr}(000)`), we need to repeat the circuit many times. The number of times the circuit is repeated can be specified in the ``execute`` function, via the ``shots`` keyword."
msgstr "이 회로를 시뮬레이션하기 위해서는 키스킷 아르에 있는 ``qasm_simulator``를 사용해야 한다. 이 회로 각각의 실행은 비트 문자열 000 혹은 111을 생성하며. 또한 비트 문자열 (예를 들어 :math:`\\mathrm{Pr}(000)`)의 분포에 대한 통계를 얻기 위해서는 회로를 여러 번 실행해야 한다. 회로가 반복되는 횟수를 결정하기 위해서는 ``execute`` 함수에 있는 ``shots`` 키워드를 조정하면 된다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:604
msgid "Once you have a result object, you can access the counts via the function ``get_counts(circuit)``. This gives you the *aggregated* binary outcomes of the circuit you submitted."
msgstr "결과 객체를 얻은 후에는 ``get_counts(circuit)`` 함수를 통해서 시뮬레이션 횟수에 접근할 수 있다. 이를 통해서 지금까지 실행한 시뮬레이션의 *합산된* 결과값을 구할 수 있다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:645
msgid "Approximately 50 percent of the time, the output bitstring is 000. Qiskit also provides a function ``plot_histogram``, which allows you to view the outcomes."
msgstr "대략 50 퍼센트 정도는 000값의 결과 비트 문자열을 가진다. 또한 키스킷의 ``plot_histogram``함수를 통해 결과를 확인할 수 있다."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:676
msgid "The estimated outcome probabilities :math:`\\mathrm{Pr}(000)` and :math:`\\mathrm{Pr}(111)` are computed by taking the aggregate counts and dividing by the number of shots (times the circuit was repeated). Try changing the ``shots`` keyword in the ``execute`` function and see how the estimated probabilities change."
msgstr "예측 값인 확률 :math:`\\mathrm{Pr}(000)`과 :math:`\\mathrm{Pr}(111)`는 유효 카운트를 모두 더한 후에 (회로가 몇 번 실행되었는지를 가르키는) 시뮬레이션 숫자로 나누어서 계산되어진다. ``execute`` 함수에 있는 ``shots`` 키워드를 수정해 보면서 예측 확률 값이 어떻게 변하는지 살펴보기 바란다."

