msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-10 19:20+0000\n"
"PO-Revision-Date: 2020-08-13 02:58\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits/2_plotting_data_in_qiskit.po\n"
"X-Crowdin-File-ID: 9116\n"
"Language: ko_KR\n"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:10
msgid "This page was generated from `tutorials/circuits/2_plotting_data_in_qiskit.ipynb`__."
msgstr "이 페이지는 tutorials/순회 /2_plotting_data_in_qis.ipynb 에서 생성되었다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:9
msgid "Qiskit Visualizations"
msgstr "키스킷 시각화하기"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:33
msgid "Plot histogram"
msgstr "히스토그램 그리기"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:35
msgid "To visualize the data from a quantum circuit run on a real device or ``qasm_simulator`` we have made a simple function"
msgstr "실제 장치 또는 ``qasm_simulator``에서 실행되는 양자 회로의 데이터를 가시화하기 위해서 간단한 함수를 만들었다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:37
msgid "``plot_histogram(data)``"
msgstr "``plot_histogram(data)``"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:39
msgid "As an example we make a 2-qubit Bell state"
msgstr "예를 들어 2-큐비트 벨 (Bell) 상태를 만든다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:112
msgid "Options when plotting a histogram"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:114
msgid "The ``plot_histogram()`` has a few options to adjust the output graph. The first option is the ``legend`` kwarg. This is used to provide a label for the executions. It takes a list of strings use to label each execution's results. This is mostly useful when plotting multiple execution results in the same histogram. The ``sort`` kwarg is used to adjust the order the bars in the histogram are rendered. It can be set to either ascending order with ``asc`` or descending order with ``dsc``. The ``number_to_keep`` kwarg takes an integer for the number of terms to show, the rest are grouped together in a single bar called rest. You can adjust the color of the bars with the ``color`` kwarg which either takes a string or a list of strings for the colors to use for the bars for each execution. You can adjust whether labels are printed above the bars or not with the ``bar_labels`` kwarg. The last option available is the ``figsize`` kwarg which takes a tuple of the size in inches to make the output figure."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:172
msgid "Using the output from plot\\_histogram()"
msgstr "plot\\_histogram()에서 출력된 시각화 사용하기"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:174
msgid "When using the plot\\_histogram() function it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object from ``plot_histogram()`` to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png``. The ``savefig()`` method takes a path so you can adjust the location and filename where you're saving the output."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:187
msgid "Plot State"
msgstr "상태 그리기"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:198
msgid "In many situations you want to see the state of a quantum computer. This could be for debugging. Here we assume you have this state (either from simulation or state tomography) and the goal is to visualize the quantum state. This requires exponential resources, so we advise to only view the state of small quantum systems. There are several functions for generating different types of visualization of a quantum state"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:208
msgid "A quantum state is either a state matrix :math:`\\rho` (Hermitian matrix) or statevector :math:`|\\psi\\rangle` (complex vector). The state matrix is related to the statevector by"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:210
msgid "\\rho = |\\psi\\rangle\\langle \\psi|,\n\n"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:212
msgid "and is more general as it can represent mixed states (positive sum of statevectors)"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:214
msgid "\\rho = \\sum_k p_k |\\psi_k\\rangle\\langle \\psi_k |.\n\n"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:216
msgid "The visualizations generated by the functions are:"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:218
msgid "``'plot_state_city'``: The standard view for quantum states where the real and imaginary (imag) parts of the state matrix are plotted like a city."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:220
msgid "``'plot_state_qsphere'``: The Qiskit unique view of a quantum state where the amplitude and phase of the state vector are plotted in a spherical ball. The amplitude is the thickness of the arrow and the phase is the color. For mixed states it will show different ``'qsphere'`` for each component."
msgstr "``'plot_state_qsphere'``: 상태 벡터의 진폭과 위상이 구체에 그려지는 양자 상태로 키스킷에 특화된 시각화다. 진폭은 화살표의 굵기이며, 위상은 색으로 나타난다. 혼합된 상태에 대해서는 각 컴포넌트에 대해서 다른 ``'qsphere'``를 보여줄 것이다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:222
msgid "``'plot_state_paulivec'``: The representation of the state matrix using Pauli operators as the basis :math:`\\rho=\\sum_{q=0}^{d^2-1}p_jP_j/d`."
msgstr "``'plot_state_paulivec'``: :math:`\\rho=\\sum_{q=0}^{d^2-1}p_jP_j/d` 기저를 파울리 (Pauli) 연산자로 사용하는 상태 행렬을 나타낸다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:224
msgid "``'plot_state_hinton'``: Same as ``'city'`` but where the size of the element represents the value of the matrix element."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:226
msgid "``'plot_bloch_multivector'``: The projection of the quantum state onto the single qubit space and plotting on a bloch sphere."
msgstr "``'plot_bloch_multivector'``: 양자 상태를 하나의 큐비트 공간에 투영하고, 블로흐 구체에 시각화 한다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:357
msgid "Here we see that there is no information about the quantum state in the single qubit space as all vectors are zero."
msgstr "여기서는 모든 벡터가 0이기 때문에 하나의 큐비트 공간에서 양자 상태에 대해서 정보가 없는 것을 확인한다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:369
msgid "Options when using state plotting functions"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:371
msgid "The various functions for plotting quantum states provide a number of options to adjust how the plots are rendered. Which options are available depends on the function being used."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:382
msgid "**plot\\_state\\_city()** options"
msgstr "**plot\\_state\\_city()** 옵션"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:384
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:418
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:451
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:498
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:687
msgid "**title** (str): a string that represents the plot title"
msgstr "**title** (str): 그림 제목을 나타내는 문자열"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:385
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:419
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:452
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:485
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:499
msgid "**figsize** (tuple): figure size in inches (width, height)."
msgstr "**figsize** (tuple): 인치로 나타낸 그림 크기 (넓이, 높이)."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:386
msgid "**color** (list): a list of len=2 giving colors for real and imaginary components of matrix elements."
msgstr "**color** (list): 구성 요소의 실수와 허수 부분에 대한 색을 나타내는 길이=2의 목록."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:416
msgid "**plot\\_state\\_hinton()** options"
msgstr "**plot\\_state\\_hinton()** 옵션"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:449
msgid "**plot\\_state\\_paulivec()** options"
msgstr "**plot\\_state\\_paulivec()** 옵션"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:453
msgid "**color** (list or str): color of the expectation value bars."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:483
msgid "**plot\\_state\\_qsphere()** options"
msgstr "**plot\\_state\\_qsphere()** 옵션"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:496
msgid "**plot\\_bloch\\_multivector()** options"
msgstr "**plot\\_bloch\\_multivector()** 옵션"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:530
msgid "Using the output from state plotting functions"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:532
msgid "When using any of the state plotting functions it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png`` in the current working directory. The ``savefig()`` method takes a path so you can adjust the location and filename where you're saving the output."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:545
msgid "Interactive State Plots for Jupyter Notebooks"
msgstr "주피터 노트북 용 상호작용하는 상태 그래프"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:547
msgid "Just like with ``plot_histogram()`` there is a second set of functions for each of the functions to plot the quantum state. These functions have the same name but with a prepended ``i``:"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:557
msgid "These functions are made using an externally hosted JS library for use in Jupyter notebooks. The interactive plot can only be used if you're running inside a Jupyter notebook and only if you have external connectivity to the host with the JS library. If you use these functions outside of a Jupyter notebook it will fail."
msgstr "이런 함수들은 주피터 노트북에 사용되기 위해서 외부에 호스팅되는 JS 라이브러리를 사용하여 만들어진다. 상호적인 그림은 주피터 노트북 내에서 구동되고, JS 라이브러리를 가진 외부 호스트에 연결이 있는 때에만 사용될 수 있다. 주피터 노트북 외부에서 이 함수들을 사용하면 실패할 것이다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:640
msgid "Plot Bloch Vector"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:642
msgid "A standard way of plotting a quantum system is using the Bloch vector. This only works for a single qubit and takes as input the Bloch vector."
msgstr "양자 시스템을 그리는 표준적인 방법은 블로흐 (Bloch) 벡터를 사용하는 것이다. 이는 하나의 큐비트에 대해서만 동작하고, 블로흐 벡터를 입력으로 받는다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:644
msgid "The Bloch vector is defined as :math:`[x = \\mathrm{Tr}[X \\rho], y = \\mathrm{Tr}[Y \\rho], z = \\mathrm{Tr}[Z \\rho]]`, where :math:`X`, :math:`Y`, and :math:`Z` are the Pauli operators for a single qubit and :math:`\\rho` is the state matrix."
msgstr "블로흐 벡터는 :math:`[x = \\mathrm{Tr}[X \\rho], y = \\mathrm{Tr}[Y \\rho], z = \\mathrm{Tr}[Z \\rho]]`로 정의되고, 여기서 :math:`X`, :math:`Y`, :math:`Z`는 하나의 큐비트에 대한 파울리 (Pauli) 연산자이고, :math:`\\rho`는 상태 행렬이다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:685
msgid "Options for plot\\_bloch\\_vector()"
msgstr "plot\\_bloch\\_vector()의 옵션들"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:688
msgid "**figsize** (tuple): Figure size in inches (width, height)."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:719
msgid "Adjusting the output from plot\\_bloch\\_vector()"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:721
msgid "When using the ``plot_bloch_vector`` function it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png`` in the current working directory. The ``savefig()`` method takes a path so you can adjust the location and filename where you're saving the output."
msgstr ""

