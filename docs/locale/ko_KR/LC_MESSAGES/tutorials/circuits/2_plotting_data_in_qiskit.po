msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-03 12:57+0000\n"
"PO-Revision-Date: 2023-11-03 14:43\n"
"Last-Translator: \n"
"Language: ko\n"
"Language-Team: Korean\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/circuits/2_plotting_data_in_qiskit.po\n"
"X-Crowdin-File-ID: 9116\n"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:10
msgid "This page was generated from `tutorials/circuits/2_plotting_data_in_qiskit.ipynb`__."
msgstr "이 페이지는 `tutorials/circuits/2_plotting_data_in_qiskit.ipynb`__ 에서 생성되었다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:9
msgid "Qiskit Visualizations"
msgstr "Qiskit 시각화하기"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:32
msgid "Plot Histogram"
msgstr "히스토그램 그리기"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:34
msgid "To visualize the data from a quantum circuit run on a real device or ``qasm_simulator`` we have made a simple function"
msgstr "실제 장치 또는 ``qasm_simulator`` 에서 실행되는 양자 회로의 데이터를 가시화하기 위해서 간단한 함수를 만들었다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:36
msgid "``plot_histogram(data)``"
msgstr "``plot_histogram(data)``"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:38
msgid "As an example we make a 2-qubit Bell state"
msgstr "예를 들어 2-큐비트 벨 (Bell) 상태를 만든다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:116
msgid "Options when plotting a histogram"
msgstr "히스토그램 그래프 옵션"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:118
msgid "The ``plot_histogram()`` has a few options to adjust the output graph. The first option is the ``legend`` kwarg. This is used to provide a label for the executions. It takes a list of strings used to label each execution's results. This is mostly useful when plotting multiple execution results in the same histogram. The ``sort`` kwarg is used to adjust the order the bars in the histogram are rendered. It can be set to either ascending order with ``asc`` or descending order with ``desc``. The ``number_to_keep`` kwarg takes an integer for the number of terms to show, the rest are grouped together in a single bar called rest. You can adjust the color of the bars with the ``color`` kwarg which either takes a string or a list of strings for the colors to use for the bars for each execution. You can adjust whether labels are printed above the bars or not with the ``bar_labels`` kwarg. The last option available is the ``figsize`` kwarg which takes a tuple of the size in inches to make the output figure."
msgstr "``plot_histogram()`` 은 출력하는 그래프를 조정하는 몇 가지 옵션이 있다. 첫번째 옵션은 ``legend`` kwarg 이다. 이 옵션은 실행에 대한 그래프 범례(레이블) 를 만드는데 사용된다. 이는 각 실행의 결과에 대한 레이블을 문자열 자료형으로 표현하고 그것들을 원소로 갖는 리스트를 입력으로 받는다. 이는 동일한 히스토그램에 여러 개의 실행 결과를 그릴 때 유용하게 사용된다. ``sort`` kwarg는 히스토그램의 막대들이 그려지는 순서를 조정하는데 사용된다. ``asc`` 으로 오름차순 정렬을 하거나 ``desc``으로 내림차순 정렬을 한다. ``number_to_keep`` kwarg는 보여줄 항목의 수를 결정하고, 만약 그래프에 존재하는 항목의 수가 ``number_to_keep`` 에 입력한 숫자보다 크다면 나머지 항목은 rest로 명시되는 하나의 막대로 그룹지어진다. 그래프 막대의 색깔을 조정하기 위해 ``color`` kwargs를 사용할 수 있고, ``color`` kwarg는 하나의 문자열이나 각 실행에 대한 막대 색깔을 지정하기 위해 문자열로 이루어진 리스트를 입력 받는다. ``bar_labels`` kwarg를 통해 레이블을 막대의 위에 보이도록 할지 여부를 조정할 수 있다. 마지막 옵션은 ``figsize`` kwarg으로, 출력 그림의 크기를 인치(inch) 단위로 나타낸 튜플을 입력으로 받는다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:176
msgid "Using the output from plot_histogram()"
msgstr "plot_histogram() 에서 출력된 시각화 사용하기"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:178
msgid "When using the ``plot_histogram()`` function, it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object from ``plot_histogram()`` to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png``. The ``savefig()`` method takes a path so you can adjust the location and filename where you're saving the output."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:191
msgid "Plot State"
msgstr "상태 그리기"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:202
msgid "In many situations you want to see the state of a quantum computer. This could be for debugging. Here we assume you have this state (either from simulation or state tomography) and the goal is to visualize the quantum state. This requires exponential resources, so we advise to only view the state of small quantum systems. There are several functions for generating different types of visualization of a quantum state"
msgstr "많은 경우에 양자 컴퓨터의 상태를 확인하길 원할 것이다. 디버깅을 위한 확인이 될 수 있다. 에를들어 시뮬레이션을 하거나 단층 촬영(state tomography) 의 상태를 가지고 있고, 그 양자 상태를 시각화하는 것이라고 가정해보자. 이 경우에는 많은 양의 연산이 필요하다, 따라서 작은 양자 시스템의 상태만을 보기를 권한다. 양자 상태를 다른 형태로 시각화하는 여러 함수가 존재한다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:212
msgid "A quantum state is either a density matrix :math:`\\rho` (Hermitian matrix) or statevector :math:`|\\psi\\rangle` (complex vector). The density matrix is related to the statevector by"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:214
msgid "\\rho = |\\psi\\rangle\\langle \\psi|,\n\n"
msgstr "\\rho = |\\psi\\rangle\\langle \\psi|,\n\n"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:216
msgid "and is more general as it can represent mixed states (positive sum of statevectors)"
msgstr "그리고 일반적인 혼합 상태(mixed states) 도 (상태벡터의 양의 합으로) 나타낼 수 있다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:218
msgid "\\rho = \\sum_k p_k |\\psi_k\\rangle\\langle \\psi_k |.\n\n"
msgstr "\\rho = \\sum_k p_k |\\psi_k\\rangle\\langle \\psi_k |.\n\n"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:220
msgid "The visualizations generated by the functions are:"
msgstr "함수에 의해 시각화할 수 있는 것은 다음과 같다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:222
msgid "``'plot_state_city'``: The standard view for quantum states where the real and imaginary (imag) parts of the density matrix are plotted like a city."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:224
msgid "``'plot_state_qsphere'``: The Qiskit unique view of a quantum state where the amplitude and phase of the state vector are plotted in a spherical ball. The amplitude is the thickness of the arrow and the phase is the color. For mixed states it will show different ``'qsphere'`` for each component."
msgstr "``'plot_state_qsphere'``: 상태 벡터의 진폭과 위상이 구체에 그려지는 양자 상태로 Qiskit에 특화된 시각화다. 진폭은 화살표의 굵기이며, 위상은 색으로 나타난다. 혼합된 상태에 대해서는 각 컴포넌트에 대해서 다른 ``'qsphere'`` 를 보여줄 것이다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:226
msgid "``'plot_state_paulivec'``: The representation of the density matrix using Pauli operators as the basis :math:`\\rho=\\sum_{q=0}^{d^2-1}p_jP_j/d`."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:228
msgid "``'plot_state_hinton'``: Same as ``'city'`` but where the size of the element represents the value of the matrix element."
msgstr "``'plot_state_hinton'``: ``'city'`` 형태로 나타내는 것은 동일하지만, 요소의 크기는 행렬 요소의 값을 나타낸다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:230
msgid "``'plot_bloch_multivector'``: The projection of the quantum state onto the single qubit space and plotting on a bloch sphere."
msgstr "``'plot_bloch_multivector'``: 양자 상태를 하나의 큐비트 공간에 투영하고, 블로흐 구체에 시각화 한다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:361
msgid "Here we see that there is no information about the quantum state in the single qubit space as all vectors are zero."
msgstr "여기서는 모든 벡터가 0이기 때문에 하나의 큐비트 공간에서 양자 상태에 대해서 정보가 없는 것을 확인한다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:373
msgid "Options when using state plotting functions"
msgstr "상태 그리기 함수를 이용할때 옵션"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:375
msgid "The various functions for plotting quantum states provide a number of options to adjust how the plots are rendered. Which options are available depends on the function being used."
msgstr "양자 상태를 시각화하는 여러 함수는 그래프가 그려지는 방법을 조율하는 여러 옵션을 제공한다. 사용할 수있는 옵션은 사용중인 함수에 따라 다르다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:386
msgid "**plot_state_city()** options"
msgstr "**plot\\_state\\_city()** 옵션"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:388
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:422
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:455
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:502
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:596
msgid "**title** (str): a string that represents the plot title"
msgstr "**title** (str): 그림 제목을 나타내는 문자열"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:389
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:423
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:456
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:489
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:503
msgid "**figsize** (tuple): figure size in inches (width, height)."
msgstr "**figsize** (tuple): 인치로 나타낸 그림 크기 (넓이, 높이)."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:390
msgid "**color** (list): a list of len=2 giving colors for real and imaginary components of matrix elements."
msgstr "**color** (list): 구성 요소의 실수와 허수 부분에 대한 색을 나타내는 길이=2의 목록."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:420
msgid "**plot_state_hinton()** options"
msgstr "**plot\\_state\\_hinton()** 옵션"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:453
msgid "**plot_state_paulivec()** options"
msgstr "**plot\\_state\\_paulivec()** 옵션"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:457
msgid "**color** (list or str): color of the expectation value bars."
msgstr "**color** (list 또는 str): 기대 값의 막대의 색."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:487
msgid "**plot_state_qsphere()** options"
msgstr "**plot\\_state\\_qsphere()** 옵션"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:500
msgid "**plot_bloch_multivector()** options"
msgstr "**plot\\_bloch\\_multivector()** 옵션"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:534
msgid "Using the output from state plotting functions"
msgstr "양자 상태를 그리는 함수의 출력 사용하기"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:536
msgid "When using any of the state plotting functions it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png`` in the current working directory. The ``savefig()`` method takes a path so you can adjust the location and filename where you're saving the output."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:549
msgid "Plot Bloch Vector"
msgstr "블로흐(Bloch) 벡터 그리기"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:551
msgid "A standard way of plotting a quantum system is using the Bloch vector. This only works for a single qubit and takes as input the Bloch vector."
msgstr "양자 시스템을 그리는 표준적인 방법은 블로흐 (Bloch) 벡터를 사용하는 것이다. 이는 하나의 큐비트에 대해서만 동작하고, 블로흐 벡터를 입력으로 받는다."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:553
msgid "The Bloch vector is defined as :math:`[x = \\mathrm{Tr}[X \\rho], y = \\mathrm{Tr}[Y \\rho], z = \\mathrm{Tr}[Z \\rho]]`, where :math:`X`, :math:`Y`, and :math:`Z` are the Pauli operators for a single qubit and :math:`\\rho` is the density matrix."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:594
msgid "Options for plot_bloch_vector()"
msgstr "plot_bloch_vector() 의 옵션들"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:597
msgid "**figsize** (tuple): Figure size in inches (width, height)."
msgstr "**figsize** (tuple): 인치로 나타낸 그림 크기 (너비, 높이)."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:628
msgid "Adjusting the output from plot_bloch_vector()"
msgstr "plot_bloch_vector() 에서의 output 조정하기"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:630
msgid "When using the ``plot_bloch_vector`` function it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png`` in the current working directory. The ``savefig()`` method takes a path so you can adjust the location and filename where you're saving the output."
msgstr ""

