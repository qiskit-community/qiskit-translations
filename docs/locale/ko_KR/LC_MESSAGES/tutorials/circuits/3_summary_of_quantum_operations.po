msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-10 19:20+0000\n"
"PO-Revision-Date: 2020-08-18 04:45\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits/3_summary_of_quantum_operations.po\n"
"X-Crowdin-File-ID: 9118\n"
"Language: ko_KR\n"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:10
msgid "This page was generated from `tutorials/circuits/3_summary_of_quantum_operations.ipynb`__."
msgstr "이 페이지는 \"tutorials/회로 s/3_요약 _of_quantum_operations.ipynb\" __ 에서 생성되었다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:9
msgid "Summary of Quantum Operations"
msgstr "양자 연산 요약"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:20
msgid "In this section we will go into the different operations that are available in Qiskit Terra. These are: - Single-qubit quantum gates - Multi-qubit quantum gates - Measurements - Reset - Conditionals - State initialization"
msgstr "이 섹션에서는 키스킷 테라에서 사용할 수있는 다양한 연산을 살펴 ​​본다. 그 연산에는 - 단일 큐비트 양자 게이트 - 다중 큐비트 양자 게이트 - 측정 - Reset - Conditionals - 상태 초기화 가 있다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:22
msgid "We will also show you how to use the three different simulators: - unitary\\_simulator - qasm\\_simulator - statevector\\_simulator"
msgstr "또한 세 가지 다른 시뮬레이터를 사용하는 방법을 살펴볼것이다. -단일\\_시뮬레이터-qasm\\_시뮬레이터-상태벡터\\_시뮬레이터"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:63
msgid "Single Qubit Quantum states"
msgstr "단일 큐비트 양자 상태"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:65
msgid "A single qubit quantum state can be written as"
msgstr "단일 큐비트 양자 상태는 다음과 같이 쓸 수 있다"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:67
msgid "\\left|\\psi\\right\\rangle = \\alpha\\left|0\\right\\rangle + \\beta \\left|1\\right\\rangle\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:69
msgid "where :math:`\\alpha` and :math:`\\beta` are complex numbers. In a measurement the probability of the bit being in :math:`\\left|0\\right\\rangle` is :math:`|\\alpha|^2` and :math:`\\left|1\\right\\rangle` is :math:`|\\beta|^2`. As a vector this is"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:71
msgid "\\left|\\psi\\right\\rangle =\n"
"\\begin{pmatrix}\n"
"\\alpha \\\\\n"
"\\beta\n"
"\\end{pmatrix}."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:80
msgid "Note, due to the conservation of probability :math:`|\\alpha|^2+ |\\beta|^2 = 1` and since global phase is undetectable :math:`\\left|\\psi\\right\\rangle := e^{i\\delta} \\left|\\psi\\right\\rangle` we only require two real numbers to describe a single qubit quantum state."
msgstr "확률의 보존으로 인해 :math:`|\\alpha|^2+|\\beta|^2=1`이며 전역 위상이 감지되지 않기 때문에 :math:`\\left|\\psi\\right\\rangle:=e^{i\\delta}\\left|\\psi\\right\\rangle` 단일 큐비트 양자 상태를 설명하기 위해 두 개의 실수 만 필요하다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:82
msgid "A convenient representation is"
msgstr ": math:`0\\leq\\phi<2\\pi` 과: math:`0\\leq\\theta\\leq\\pi`때 다음과 같이 나타낼수 있다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:84
msgid "\\left|\\psi\\right\\rangle = \\cos(\\theta/2)\\left|0\\right\\rangle + \\sin(\\theta/2)e^{i\\phi}\\left|1\\right\\rangle\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:86
msgid "where :math:`0\\leq \\phi < 2\\pi`, and :math:`0\\leq \\theta \\leq \\pi`. From this, it is clear that there is a one-to-one correspondence between qubit states (:math:`\\mathbb{C}^2`) and the points on the surface of a unit sphere (:math:`\\mathbb{R}^3`). This is called the Bloch sphere representation of a qubit state."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:88
msgid "Quantum gates/operations are usually represented as matrices. A gate which acts on a qubit is represented by a :math:`2\\times 2` unitary matrix :math:`U`. The action of the quantum gate is found by multiplying the matrix representing the gate with the vector which represents the quantum state."
msgstr "양자 게이트/연산은 일반적으로 행렬로 표현한다. 특히 큐비트에 작용하는 게이트는 :math:`2\\times2` 유니터리 행렬 :math:`U`로 표현 된다. 그리고 양자 게이트의 작용은 양자 상태를 나타내는 벡터에 게이트를 나타내는 행렬을 곱함으로써 알 수 있다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:90
msgid "\\left|\\psi'\\right\\rangle = U\\left|\\psi\\right\\rangle\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:92
msgid "A general unitary must be able to take the :math:`\\left|0\\right\\rangle` to the above state. That is"
msgstr "일반적인 유니터리는 상태 :math:`\\left|0\\right\\rangle`을 위의 상태로 만들 수 있어야 한다. 따라서 :math:`U` 는 다음과 같다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:94
msgid "U = \\begin{pmatrix}\n"
"\\cos(\\theta/2) & a \\\\\n"
"e^{i\\phi}\\sin(\\theta/2) & b\n"
"\\end{pmatrix}"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:102
msgid "where :math:`a` and :math:`b` are complex numbers constrained such that :math:`U^\\dagger U = I` for all :math:`0\\leq\\theta\\leq\\pi` and :math:`0\\leq \\phi<2\\pi`. This gives 3 constraints and as such :math:`a\\rightarrow -e^{i\\lambda}\\sin(\\theta/2)` and :math:`b\\rightarrow e^{i\\lambda+i\\phi}\\cos(\\theta/2)` where :math:`0\\leq \\lambda<2\\pi` giving"
msgstr "여기서 임의로 주어진 :math:`0\\leq\\theta\\leq\\pi` 와 :math:`0\\leq\\phi<2\\pi` 에 대해 :math:`a` 와 :math:`b`는 :math:`U^\\daggerU=I` 를 만족하는 복소수이다. 이는 세가지 제약 조건을 제공하며 이를 만족하는 :math:`a` 와 :math:`b`는 :math:`0\\leq\\lambda<2\\pi`를 이용하여 :math:`a\\rightarrow-e^{i\\lambda}\\sin(\\theta/2)`와 :math:`b\\rightarrowe^{i\\lambda+i\\phi}\\cos(\\theta/2)` 로 표현할 수 있다. 따라서"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:104
msgid "U = \\begin{pmatrix}\n"
"\\cos(\\theta/2) & -e^{i\\lambda}\\sin(\\theta/2) \\\\\n"
"e^{i\\phi}\\sin(\\theta/2) & e^{i\\lambda+i\\phi}\\cos(\\theta/2)\n"
"\\end{pmatrix}."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:112
msgid "This is the most general form of a single qubit unitary."
msgstr "이는 단일 큐비트에 작용되는 유니터리의 가장 일반적인 꼴이다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:124
msgid "Single-Qubit Gates"
msgstr "단일 큐비트 게이트"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:126
msgid "The single-qubit gates available are: - u gates - Identity gate - Pauli gates - Clifford gates - :math:`C3` gates - Standard rotation gates"
msgstr "사용할 수 있는 단일 큐비트 게이트로는 다음이 있다. -u 게이트 - 항등 (Identity) 게이트 - 파울리 (Pauli) 게이트 - 클리포드 (Clifford) 게이트- :math:`C3` 게이트 - 표준 회전 (Standard rotation) 게이트"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:128
msgid "We have provided a backend: ``unitary_simulator`` to allow you to calculate the unitary matrices."
msgstr "우리는 이러한 유니터리 행렬 계산이 가능하도록 해 주는 백엔드: \"unitary_simulator\" 를 제공한다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:150
msgid "u gates"
msgstr "U 게이트"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:152
msgid "In Qiskit we give you access to the general unitary using the :math:`u3` gate"
msgstr "Qiskit 에서는 일반적인 유니터리를 사용할 수 있도록 :math:'u3' 게이트를 제공한다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:154
msgid "u3(\\theta, \\phi, \\lambda) = U(\\theta, \\phi, \\lambda)"
msgstr "u3(\\theta, \\phi, \\lambda) = U(\\theta, \\phi, \\lambda)"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:252
msgid "The :math:`u2(\\phi, \\lambda) =u3(\\pi/2, \\phi, \\lambda)` gate has the matrix form"
msgstr "게이트 :math:`u2(\\phi,\\lambda)=u3(\\pi/2,\\phi,\\lambda)`는 다음과 같은 행렬로 표현된다"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:254
msgid "u2(\\phi, \\lambda) =\n"
"\\frac{1}{\\sqrt{2}} \\begin{pmatrix}\n"
"1 & -e^{i\\lambda} \\\\\n"
"e^{i\\phi} & e^{i(\\phi + \\lambda)}\n"
"\\end{pmatrix}."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:263
msgid "This is a useful gate as it allows us to create superpositions."
msgstr "이 것은 우리가 중첩을 만들 수 있게 해 주는 유용한 게이트입니다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:358
msgid "The :math:`u1(\\lambda)= u3(0, 0, \\lambda)` gate has the matrix form"
msgstr "게이트 :math:`u1(\\lambda)= u3(0, 0, \\lambda)` 는 다음과 같은 행렬로 표현된다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:360
msgid "u1(\\lambda) =\n"
"\\begin{pmatrix}\n"
"1 & 0 \\\\\n"
"0 & e^{i \\lambda}\n"
"\\end{pmatrix},"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:369
msgid "which is useful as it allows us to apply a quantum phase."
msgstr "이는 양자 위상을 만들어 주므로 유용하다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:465
msgid "Identity gate"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:467
msgid "The identity gate is :math:`Id = u0(1)`."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:563
msgid "Pauli gates"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:566
msgid ":math:`X`: bit-flip gate"
msgstr ":math:`X`: 비트 플립 게이트"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:568
msgid "The bit-flip gate :math:`X` is defined as:"
msgstr "비트 플립 게이트 :math:`X`는 다음과 같이 정의된다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:570
msgid "X   =\n"
"\\begin{pmatrix}\n"
"0 & 1\\\\\n"
"1 & 0\n"
"\\end{pmatrix}= u3(\\pi,0,\\pi)"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:673
msgid ":math:`Y`: bit- and phase-flip gate"
msgstr ":math:`Y`: 비트와 위상 플립 게이트"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:675
msgid "The :math:`Y` gate is defined as:"
msgstr ":math:`Y` 게이트는 다음과 같이 정의된다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:677
msgid "Y  =\n"
"\\begin{pmatrix}\n"
"0 & -i\\\\\n"
"i & 0\n"
"\\end{pmatrix}=u3(\\pi,\\pi/2,\\pi/2)"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:780
msgid ":math:`Z`: phase-flip gate"
msgstr ":math:`Z`: 위상 플립 게이트"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:782
msgid "The phase-flip gate :math:`Z` is defined as:"
msgstr "위상 플립 게이트 :math:`Z` 는 다음과 같이 정의된다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:784
msgid "Z =\n"
"\\begin{pmatrix}\n"
"1 & 0\\\\\n"
"0 & -1\n"
"\\end{pmatrix}=u1(\\pi)"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:887
msgid "Clifford gates"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:890
msgid "Hadamard gate"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:892
msgid "H =\n"
"\\frac{1}{\\sqrt{2}}\n"
"\\begin{pmatrix}\n"
"1 & 1\\\\\n"
"1 & -1\n"
"\\end{pmatrix}= u2(0,\\pi)"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:996
msgid ":math:`S` (or, :math:`\\sqrt{Z}` phase) gate"
msgstr ":math:`S` (or, :math:`\\sqrt{Z}` 위상) 게이트"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:998
msgid "S =\n"
"\\begin{pmatrix}\n"
"1 & 0\\\\\n"
"0 & i\n"
"\\end{pmatrix}= u1(\\pi/2)"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1101
msgid ":math:`S^{\\dagger}` (or, conjugate of :math:`\\sqrt{Z}` phase) gate"
msgstr ":math:`S^{\\dagger}` (또는 :math:`\\sqrt{Z}` 위상의 켤레) 게이트"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1103
msgid "S^{\\dagger} =\n"
"\\begin{pmatrix}\n"
"1 & 0\\\\\n"
"0 & -i\n"
"\\end{pmatrix}= u1(-\\pi/2)"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1206
msgid ":math:`C3` gates"
msgstr ":math:`C3` 게이트"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1209
msgid ":math:`T` (or, :math:`\\sqrt{S}` phase) gate"
msgstr ":math:`T` (혹은, :math:`\\sqrt{S}` 위상) 게이트"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1211
msgid "T =\n"
"\\begin{pmatrix}\n"
"1 & 0\\\\\n"
"0 & e^{i \\pi/4}\n"
"\\end{pmatrix}= u1(\\pi/4)"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1314
msgid ":math:`T^{\\dagger}` (or, conjugate of :math:`\\sqrt{S}` phase) gate"
msgstr ":math:`T^{\\dagger}` (혹은, :math:`\\sqrt{S}` 위상의 켤레) 게이트"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1316
msgid "T^{\\dagger} =\n"
"\\begin{pmatrix}\n"
"1 & 0\\\\\n"
"0 & e^{-i \\pi/4}\n"
"\\end{pmatrix}= u1(-pi/4)"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1419
msgid "Standard Rotations"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1421
msgid "The standard rotation gates are those that define rotations around the Paulis :math:`P=\\{X,Y,Z\\}`. They are defined as"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1423
msgid "R_P(\\theta) = \\exp(-i \\theta P/2) = \\cos(\\theta/2)I -i \\sin(\\theta/2)P\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1426
msgid "Rotation around X-axis"
msgstr "X축에 관한 회전"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1428
msgid "R_x(\\theta) =\n"
"\\begin{pmatrix}\n"
"\\cos(\\theta/2) & -i\\sin(\\theta/2)\\\\\n"
"-i\\sin(\\theta/2) & \\cos(\\theta/2)\n"
"\\end{pmatrix} = u3(\\theta, -\\pi/2,\\pi/2)"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1531
msgid "Rotation around Y-axis"
msgstr "Y축에 관한 회전"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1533
msgid "R_y(\\theta) =\n"
"\\begin{pmatrix}\n"
"\\cos(\\theta/2) & - \\sin(\\theta/2)\\\\\n"
"\\sin(\\theta/2) & \\cos(\\theta/2).\n"
"\\end{pmatrix} =u3(\\theta,0,0)"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1636
msgid "Rotation around Z-axis"
msgstr "Z축에 관한 회전"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1638
msgid "R_z(\\phi) =\n"
"\\begin{pmatrix}\n"
"e^{-i \\phi/2} & 0 \\\\\n"
"0 & e^{i \\phi/2}\n"
"\\end{pmatrix}\\equiv u1(\\phi)"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1647
msgid "Note that here we have used an equivalent as it is different to u1 by a global phase :math:`e^{-i \\phi/2}`."
msgstr "여기서 전역 위상만 :math:`e^{-i \\phi/2}` 만큼 차이난다는 의미에서 동치를 사용하였다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1742
msgid "Note this is different due only to a global phase."
msgstr "이는 전역 위상값만 다를 뿐이라는 사실을 주목하자."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1754
msgid "Multi-Qubit Gates"
msgstr "다중 큐비트 게이트"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1757
msgid "Mathematical Preliminaries"
msgstr "수학적 예비"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1759
msgid "The space of a quantum computer grows exponentially with the number of qubits. For :math:`n` qubits the complex vector space has dimension :math:`d=2^n`. To describe states of a multi-qubit system, the tensor product is used to \"glue together\" operators and basis vectors."
msgstr "양자 컴퓨터를 기술하는 공간의 차원은 큐비트의 개수가 증가함에 따라 지수적으로 증가한다. :math:`n` 큐비트를 기술하는 복소 벡터 공간은 :math:`d=2^n`차원을 가지기 때문이다. 다중 큐비트 시스템의 상태를 표현할 때는 텐서 곱을 사용하여 연산자들이나 기저 벡터들 사이를 붙여줄 수 있다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1761
msgid "Let's start by considering a 2-qubit system. Given two operators :math:`A` and :math:`B` that each act on one qubit, the joint operator :math:`A \\otimes B` acting on two qubits is"
msgstr "우선 두 개의 큐비트으로 구성된 시스템을 생각해 보자. 각 큐비트에 작용하는 두 개의 연산자 :math:`A` 와 :math:`B`가 주어졌을 때 두 개의 큐비트에 동시에 작용하는 연합 연산자 :math:`A \\otimes B`은 다음과 같다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1763
msgid "\\begin{equation}\n"
"    A\\otimes B =\n"
"    \\begin{pmatrix}\n"
"        A_{00} \\begin{pmatrix}\n"
"            B_{00} & B_{01} \\\\\n"
"            B_{10} & B_{11}\n"
"        \\end{pmatrix} & A_{01}  \\begin{pmatrix}\n"
"                B_{00} & B_{01} \\\\\n"
"                B_{10} & B_{11}\n"
"            \\end{pmatrix} \\\\\n"
"        A_{10}  \\begin{pmatrix}\n"
"                    B_{00} & B_{01} \\\\\n"
"                    B_{10} & B_{11}\n"
"                \\end{pmatrix} & A_{11}  \\begin{pmatrix}\n"
"                            B_{00} & B_{01} \\\\\n"
"                            B_{10} & B_{11}\n"
"                        \\end{pmatrix}\n"
"    \\end{pmatrix},\n"
"\\end{equation}"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1785
msgid "where :math:`A_{jk}` and :math:`B_{lm}` are the matrix elements of :math:`A` and :math:`B`, respectively."
msgstr "여기서 :math:`A_{jk}` 와 :math:`B_{lm}` 는 각각 :math:`A` 와 :math:`B`의 행렬 성분이다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1787
msgid "Analogously, the basis vectors for the 2-qubit system are formed using the tensor product of basis vectors for a single qubit:"
msgstr "유사하게 두 큐비트 시스템의 기저 벡터들은 단일 큐비트의 기저 벡터들을 텐서 곱하여 형성된다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1789
msgid "\\begin{equation}\\begin{split}\n"
"    \\left|{00}\\right\\rangle &= \\begin{pmatrix}\n"
"        1 \\begin{pmatrix}\n"
"            1  \\\\\n"
"            0\n"
"        \\end{pmatrix} \\\\\n"
"        0 \\begin{pmatrix}\n"
"            1  \\\\\n"
"            0\n"
"        \\end{pmatrix}\n"
"    \\end{pmatrix} = \\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\\\0 \\end{pmatrix}~~~\\left|{01}\\right\\rangle = \\begin{pmatrix}\n"
"    1 \\begin{pmatrix}\n"
"    0 \\\\\n"
"    1\n"
"    \\end{pmatrix} \\\\\n"
"    0 \\begin{pmatrix}\n"
"    0  \\\\\n"
"    1\n"
"    \\end{pmatrix}\n"
"    \\end{pmatrix} = \\begin{pmatrix}0 \\\\ 1 \\\\ 0 \\\\ 0 \\end{pmatrix}\\end{split}\n"
"\\end{equation}"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1813
msgid "\\begin{equation}\\begin{split}\\left|{10}\\right\\rangle = \\begin{pmatrix}\n"
"    0\\begin{pmatrix}\n"
"    1  \\\\\n"
"    0\n"
"    \\end{pmatrix} \\\\\n"
"    1\\begin{pmatrix}\n"
"    1 \\\\\n"
"    0\n"
"    \\end{pmatrix}\n"
"    \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 0 \\\\ 1 \\\\ 0 \\end{pmatrix}~~~   \\left|{11}\\right\\rangle = \\begin{pmatrix}\n"
"    0 \\begin{pmatrix}\n"
"    0  \\\\\n"
"    1\n"
"    \\end{pmatrix} \\\\\n"
"    1\\begin{pmatrix}\n"
"    0  \\\\\n"
"    1\n"
"    \\end{pmatrix}\n"
"    \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 0 \\\\ 0 \\\\1 \\end{pmatrix}\\end{split}\n"
"\\end{equation}."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1836
msgid "Note we've introduced a shorthand for the tensor product of basis vectors, wherein :math:`\\left|0\\right\\rangle \\otimes \\left|0\\right\\rangle` is written as :math:`\\left|00\\right\\rangle`. The state of an :math:`n`-qubit system can be described using the :math:`n`-fold tensor product of single-qubit basis vectors. Notice that the basis vectors for a 2-qubit system are 4-dimensional; in general, the basis vectors of an :math:`n`-qubit sytsem are :math:`2^{n}`-dimensional, as noted earlier."
msgstr "우리는 기저 벡터의 텐서 곱에서 :math:`\\left|0\\right\\rangle \\otimes \\left|0\\right\\rangle` 를 :math:`\\left|00\\right\\rangle` 와 같이 씀으로써 간략한 표현을 도입하여 사용하였다. :math:`n`-큐빗 시스템의 상태는 단일 큐빗 기저 벡터들을 :math:`n` 번 텐서 곱 하여 표현할 수 있다. 두 큐빗 시스템의 기저 벡터의 차원은 사 차원이며 일반적으로 :math:`n` 큐빗 시스템의 기저 벡터의 차원은 :math:`2^{n}` 임을 주목하자."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1839
msgid "Basis vector ordering in Qiskit"
msgstr "키스킷에 사용되는 기저 벡터의 순서"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1841
msgid "Within the physics community, the qubits of a multi-qubit systems are typically ordered with the first qubit on the left-most side of the tensor product and the last qubit on the right-most side. For instance, if the first qubit is in state :math:`\\left|0\\right\\rangle` and second is in state :math:`\\left|1\\right\\rangle`, their joint state would be :math:`\\left|01\\right\\rangle`. Qiskit uses a slightly different ordering of the qubits, in which the qubits are represented from the most significant bit (MSB) on the left to the least significant bit (LSB) on the right (big-endian). This is similar to bitstring representation on classical computers, and enables easy conversion from bitstrings to integers after measurements are performed. For the example just given, the joint state would be represented as :math:`\\left|10\\right\\rangle`. Importantly, *this change in the representation of multi-qubit states affects the way multi-qubit gates are represented in Qiskit*, as discussed below."
msgstr "물리학계에서는 다중 큐비트 시스템의 큐비트들을 나열할때 대부분 첫번째 큐비트를 텐서 곱의 가장 왼쪽에 놓고 마지막 큐비트를 가장 오른쪽에 놓는 순서를 따른다. 예를 들어, 첫번째 큐비트의 상태가 :math:`\\left|0\\right\\rangle`이고 두번째 큐비트의 상태가 :math:`\\left|1\\right\\rangle` 라면 그들의 전체 상태는 :math:`\\left|01\\right\\rangle`이 된다. Qiskit은 조금 다른 순서로 큐비트를 나열하는데 가장 중요한 비트 (MSB)가 좌측에 있고 가장 덜 중요한 비트 (LSB)가 우측에 놓이는 big-endian 방식을 따른다. 이 것은 고전 컴퓨터에서 사용되는 비트열 표현과 비슷한데, 이는 측정을 한 후에 문자열을 정수로 변환하는 과정을 쉽게 만든다. 앞선 예의 경우 전체 상태는 :math:`\\left|10\\right\\rangle`로 표현된다. 중요한 점은 *이러한 다중 큐비트 상태의 표기법의 차이가 Qiskit에서 표현되는 다중 큐비트 게이트을 나타내는 방법에 변화를 준다*는 것이다. 다음을 살펴보자."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1844
msgid "The representation used in Qiskit enumerates the basis vectors in increasing order of the integers they represent. For instance, the basis vectors for a 2-qubit system would be ordered as :math:`\\left|00\\right\\rangle`, :math:`\\left|01\\right\\rangle`, :math:`\\left|10\\right\\rangle`, and :math:`\\left|11\\right\\rangle`. Thinking of the basis vectors as bit strings, they encode the integers 0,1,2 and 3, respectively."
msgstr "Qiskit에서 사용하는 표현은 기저 벡터를 표현하는 숫자가 증가하는 순으로 숫자를 메긴다. 예를 들어 두 큐비트 시스템의 기저 벡터들은 :math:`\\left|00\\right\\rangle`, :math:`\\left|01\\right\\rangle`, :math:`\\left|10\\right\\rangle`, and :math:`\\left|11\\right\\rangle` 순으로 배열된다. 이때 기저 벡터에 대응하는 비트열을 살펴보면 각각 0,1,2,3이 인코딩 되어 있다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1847
msgid "Controlled operations on qubits"
msgstr "큐비트에 적용되는 조절 연산들"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1849
msgid "A common multi-qubit gate involves the application of a gate to one qubit, conditioned on the state of another qubit. For instance, we might want to flip the state of the second qubit when the first qubit is in :math:`\\left|0\\right\\rangle`. Such gates are known as *controlled gates*. The standard multi-qubit gates consist of two-qubit gates and three-qubit gates. The two-qubit gates are: - controlled Pauli gates - controlled Hadamard gate - controlled rotation gates - controlled phase gate - controlled u3 gate - swap gate"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1852
msgid "The three-qubit gates are: - Toffoli gate - Fredkin gate"
msgstr "세 큐비트 게이트에는 - Toffoli gate - Fredkin gate가 있다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1864
msgid "Two-qubit gates"
msgstr "이중 큐비트 게이트"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1866
msgid "Most of the two-qubit gates are of the controlled type (the SWAP gate being the exception). In general, a controlled two-qubit gate :math:`C_{U}` acts to apply the single-qubit unitary :math:`U` to the second qubit when the state of the first qubit is in :math:`\\left|1\\right\\rangle`. Suppose :math:`U` has a matrix representation"
msgstr "대부분의 두 큐비트 게이트들은 다른 큐비트에 의해 조절되는 유형이다. (SWAP 게이트는 예외) 일반적으로 다른 큐비트에 의해 조절되는 두 큐비트 게이트 :math:`C_{U}`는 첫번째 큐비트의 상태가 :math:`\\left|1\\right\\rangle`일 때 단일 큐비트 유니터리 :math:`U`를 두번째 큐비트에 가하는 식이다. 유니터리 :math:`U`가 다음 행렬이라고 가정하자."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1868
msgid "U = \\begin{pmatrix} u_{00} & u_{01} \\\\ u_{10} & u_{11}\\end{pmatrix}.\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1870
msgid "We can work out the action of :math:`C_{U}` as follows. Recall that the basis vectors for a two-qubit system are ordered as :math:`\\left|00\\right\\rangle, \\left|01\\right\\rangle, \\left|10\\right\\rangle, \\left|11\\right\\rangle`. Suppose the **control qubit** is **qubit 0** (which, according to Qiskit's convention, is one the *right-hand* side of the tensor product). If the control qubit is in :math:`\\left|1\\right\\rangle`, :math:`U` should be applied to the **target** (qubit 1, on the *left-hand* side of the tensor product). Therefore, under the action of :math:`C_{U}`, the basis vectors are transformed according to"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1873
msgid "\\begin{align*}\n"
"C_{U}: \\underset{\\text{qubit}~1}{\\left|0\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|0\\right\\rangle} &\\rightarrow \\underset{\\text{qubit}~1}{\\left|0\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|0\\right\\rangle}\\\\\n"
"C_{U}: \\underset{\\text{qubit}~1}{\\left|0\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|1\\right\\rangle} &\\rightarrow \\underset{\\text{qubit}~1}{U\\left|0\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|1\\right\\rangle}\\\\\n"
"C_{U}: \\underset{\\text{qubit}~1}{\\left|1\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|0\\right\\rangle} &\\rightarrow \\underset{\\text{qubit}~1}{\\left|1\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|0\\right\\rangle}\\\\\n"
"C_{U}: \\underset{\\text{qubit}~1}{\\left|1\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|1\\right\\rangle} &\\rightarrow \\underset{\\text{qubit}~1}{U\\left|1\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|1\\right\\rangle}\\\\\n"
"\\end{align*}."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1882
msgid "In matrix form, the action of :math:`C_{U}` is"
msgstr ":math:`C_{U}`를 행렬로 나타내면 다음과 같다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1884
msgid "\\begin{equation}\n"
"    C_U = \\begin{pmatrix}\n"
"    1 & 0 & 0 & 0 \\\\\n"
"    0 & u_{00} & 0 & u_{01} \\\\\n"
"    0 & 0 & 1 & 0 \\\\\n"
"    0 & u_{10} &0 & u_{11}\n"
"        \\end{pmatrix}.\n"
"\\end{equation}"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1895
msgid "To work out these matrix elements, let"
msgstr "이러한 행렬 성분을 알아내려면,"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1897
msgid "C_{(jk), (lm)} = \\left(\\underset{\\text{qubit}~1}{\\left\\langle j \\right|} \\otimes \\underset{\\text{qubit}~0}{\\left\\langle k \\right|}\\right) C_{U} \\left(\\underset{\\text{qubit}~1}{\\left| l \\right\\rangle} \\otimes \\underset{\\text{qubit}~0}{\\left| k \\right\\rangle}\\right),\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1899
msgid "compute the action of :math:`C_{U}` (given above), and compute the inner products."
msgstr "위에 주어진 :math:`C_{U}`의 작용을 먼저 계산하고 내적을 계산한다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1901
msgid "As shown in the examples below, this operation is implemented in Qiskit as ``cU(q[0],q[1])``."
msgstr "아래 예에서 볼 수 있듯이 이 연산은 Qiskit에서 ``cU(q[0],q[1])``로 구현되어 있다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1903
msgid "If **qubit 1 is the control and qubit 0 is the target**, then the basis vectors are transformed according to"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1905
msgid "\\begin{align*}\n"
"C_{U}: \\underset{\\text{qubit}~1}{\\left|0\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|0\\right\\rangle} &\\rightarrow \\underset{\\text{qubit}~1}{\\left|0\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|0\\right\\rangle}\\\\\n"
"C_{U}: \\underset{\\text{qubit}~1}{\\left|0\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|1\\right\\rangle} &\\rightarrow \\underset{\\text{qubit}~1}{\\left|0\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|1\\right\\rangle}\\\\\n"
"C_{U}: \\underset{\\text{qubit}~1}{\\left|1\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|0\\right\\rangle} &\\rightarrow \\underset{\\text{qubit}~1}{\\left|1\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{U\\left|0\\right\\rangle}\\\\\n"
"C_{U}: \\underset{\\text{qubit}~1}{\\left|1\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|1\\right\\rangle} &\\rightarrow \\underset{\\text{qubit}~1}{\\left|1\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{U\\left|1\\right\\rangle}\\\\\n"
"\\end{align*},"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1914
msgid "which implies the matrix form of :math:`C_{U}` is"
msgstr "이는 :math:`C_{U}`의 행렬 형태가 다음과 같음을 의미한다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1916
msgid "\\begin{equation}\n"
"    C_U = \\begin{pmatrix}\n"
"    1 & 0 & 0  & 0 \\\\\n"
"    0 & 1 & 0 & 0 \\\\\n"
"    0 & 0 & u_{00} & u_{01} \\\\\n"
"    0 & 0 & u_{10} & u_{11}\n"
"        \\end{pmatrix}.\n"
"\\end{equation}"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1947
msgid "Controlled Pauli Gates"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1950
msgid "Controlled-X (or, controlled-NOT) gate"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1952
msgid "The controlled-not gate flips the ``target`` qubit when the control qubit is in the state :math:`\\left|1\\right\\rangle`. If we take the MSB as the control qubit (e.g. ``cx(q[1],q[0])``), then the matrix would look like"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1954
msgid "C_X =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 0 & 1\\\\\n"
"0 & 0 & 1 & 0\n"
"\\end{pmatrix}."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1965
msgid "However, when the LSB is the control qubit, (e.g. ``cx(q[0],q[1])``), this gate is equivalent to the following matrix:"
msgstr "그러나 조절 큐비트가 LSB이면 (e.g. ``cx(q[0],q[1])``), 이 게이트는 다음 행렬과 동일하다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1967
msgid "C_X =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 0 & 0 & 1\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 1 & 0 & 0\n"
"\\end{pmatrix}."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2082
msgid "Controlled :math:`Y` gate"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2084
msgid "Apply the :math:`Y` gate to the target qubit if the control qubit is the MSB"
msgstr "조절 큐비트이 MSB이면 :math:`Y` 게이트를 목표 큐비트에 적용한다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2086
msgid "C_Y =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 0 & -i\\\\\n"
"0 & 0 & i & 0\n"
"\\end{pmatrix},"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2097
msgid "or when the LSB is the control"
msgstr "만약 조절 큐비트이 LSB이면 다음을 적용한다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2099
msgid "C_Y =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 0 & 0 & -i\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & i & 0 & 0\n"
"\\end{pmatrix}."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2214
msgid "Controlled :math:`Z` (or, controlled Phase) gate"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2216
msgid "Similarly, the controlled Z gate flips the phase of the target qubit if the control qubit is :math:`\\left|1\\right\\rangle`. The matrix looks the same regardless of whether the MSB or LSB is the control qubit:"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2218
msgid "C_Z =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & -1\n"
"\\end{pmatrix}"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2333
msgid "Controlled Hadamard gate"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2335
msgid "Apply :math:`H` gate to the target qubit if the control qubit is :math:`\\left|1\\right\\rangle`. Below is the case where the control is the LSB qubit."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2337
msgid "C_H =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & \\frac{1}{\\sqrt{2}} & 0 & \\frac{1}{\\sqrt{2}}\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & \\frac{1}{\\sqrt{2}}  & 0& -\\frac{1}{\\sqrt{2}}\n"
"\\end{pmatrix}"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2452
msgid "Controlled rotation gates"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2455
msgid "Controlled rotation around Z-axis"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2457
msgid "Perform rotation around Z-axis on the target qubit if the control qubit (here LSB) is :math:`\\left|1\\right\\rangle`."
msgstr "만약 조절 큐비트 (여기서는 LSB)가가:math:`\\left|1\\right\\rangle`인 경우 z-축을 중심으로 회전 변환을 실행한다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2459
msgid "C_{Rz}(\\lambda) =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & e^{-i\\lambda/2} & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^{i\\lambda/2}\n"
"\\end{pmatrix}"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2574
msgid "Controlled phase rotation"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2576
msgid "Perform a phase rotation if both qubits are in the :math:`\\left|11\\right\\rangle` state. The matrix looks the same regardless of whether the MSB or LSB is the control qubit."
msgstr "만약 두 큐비트가 모두 :math:`\\left|11\\right\\rangle` 상태에 있으면 위상 회전을 실시한다. 이 경우 조절 큐비트가 MSB나 LSB에 상관없이 행렬은 같은 형태이다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2578
msgid "C_{u1}(\\lambda) =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^{i\\lambda}\n"
"\\end{pmatrix}"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2693
msgid "Controlled :math:`u3` rotation"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2695
msgid "Perform controlled-\\ :math:`u3` rotation on the target qubit if the control qubit (here LSB) is :math:`\\left|1\\right\\rangle`."
msgstr "만약 조절 큐비트 (여기서는 LSB)의 상태가 :math:`\\left|1\\right\\rangle`이면 목표 큐비트에 :math:`u3` 회전을 실시한다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2697
msgid "C_{u3}(\\theta, \\phi, \\lambda) \\equiv\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & e^{-i(\\phi+\\lambda)/2}\\cos(\\theta/2) & 0 & -e^{-i(\\phi-\\lambda)/2}\\sin(\\theta/2)\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & e^{i(\\phi-\\lambda)/2}\\sin(\\theta/2) & 0 & e^{i(\\phi+\\lambda)/2}\\cos(\\theta/2)\n"
"\\end{pmatrix}."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2812
msgid "SWAP gate"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2814
msgid "The SWAP gate exchanges the two qubits. It transforms the basis vectors as"
msgstr "SWAP 게이트는 두 큐비트의 상태를 서로 바꿔 준다. 이는 기저 벡터를 다음과 같이 변환한다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2816
msgid "\\left|00\\right\\rangle \\rightarrow \\left|00\\right\\rangle~,~\\left|01\\right\\rangle \\rightarrow \\left|10\\right\\rangle~,~\\left|10\\right\\rangle \\rightarrow \\left|01\\right\\rangle~,~\\left|11\\right\\rangle \\rightarrow \\left|11\\right\\rangle,\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2818
msgid "which gives a matrix representation of the form"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2820
msgid "\\mathrm{SWAP} =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 0 & 1\n"
"\\end{pmatrix}."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2935
msgid "Three-qubit gates"
msgstr "삼중 큐비트 게이트"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2937
msgid "There are two commonly-used three-qubit gates. For three qubits, the basis vectors are ordered as"
msgstr "일반적으로 사용되는 두 가지 삼중 큐비트 게이트가 있다. 세 큐비트의 경우 기저 벡터는 다음과 같이 정렬된다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2939
msgid "\\left|000\\right\\rangle, \\left|001\\right\\rangle, \\left|010\\right\\rangle, \\left|011\\right\\rangle, \\left|100\\right\\rangle, \\left|101\\right\\rangle, \\left|110\\right\\rangle, \\left|111\\right\\rangle,\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2941
msgid "which, as bitstrings, represent the integers :math:`0,1,2,\\cdots, 7`. Again, Qiskit uses a representation in which the first qubit is on the right-most side of the tensor product and the third qubit is on the left-most side:"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2943
msgid "\\left|abc\\right\\rangle : \\underset{\\text{qubit 2}}{\\left|a\\right\\rangle}\\otimes \\underset{\\text{qubit 1}}{\\left|b\\right\\rangle}\\otimes \\underset{\\text{qubit 0}}{\\left|c\\right\\rangle}.\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2955
msgid "Toffoli gate (:math:`ccx` gate)"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2957
msgid "The `Toffoli gate <https://en.wikipedia.org/wiki/Quantum_logic_gate#Toffoli_(CCNOT)_gate>`__ flips the third qubit if the first two qubits (LSB) are both :math:`\\left|1\\right\\rangle`:"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2959
msgid "\\left|abc\\right\\rangle \\rightarrow \\left|bc\\oplus a\\right\\rangle \\otimes \\left|b\\right\\rangle \\otimes \\left|c\\right\\rangle.\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2961
msgid "In matrix form, the Toffoli gate is"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2963
msgid "C_{CX} =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0 & 0 & 0 & 0 & 0\\\\\n"
"0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\\\\n"
"0 & 0 & 0 & 0 & 1 & 0 & 0 & 0\\\\\n"
"0 & 0 & 0 & 0 & 0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 0 & 0 & 0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & 1 & 0 & 0 & 0 & 0\n"
"\\end{pmatrix}."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3106
msgid "Controlled swap gate (Fredkin Gate)"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3108
msgid "The `Fredkin gate <https://en.wikipedia.org/wiki/Quantum_logic_gate#Fredkin_(CSWAP)_gate>`__, or the *controlled swap gate*, exchanges the second and third qubits if the first qubit (LSB) is :math:`\\left|1\\right\\rangle`:"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3110
msgid "\\left|abc\\right\\rangle \\rightarrow \\begin{cases} \\left|bac\\right\\rangle~~\\text{if}~c=1 \\cr \\left|abc\\right\\rangle~~\\text{if}~c=0 \\end{cases}.\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3112
msgid "In matrix form, the Fredkin gate is"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3114
msgid "C_{\\mathrm{SWAP}} =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0 & 0 & 0 & 0 & 0\\\\\n"
"0 & 0 & 0 & 0 & 0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 0 & 0 & 1 & 0 & 0 & 0\\\\\n"
"0 & 0 & 0 & 1 & 0 & 0 & 0 & 0\\\\\n"
"0 & 0 & 0 & 0 & 0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\n"
"\\end{pmatrix}."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3247
msgid "Non-unitary operations"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3249
msgid "Now that we have gone through all the unitary operations in quantum circuits, we also have access to non-unitary operations. These include measurements, reset of qubits, and classical conditional operations."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3272
msgid "Measurements"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3274
msgid "We don't have access to all the information when we make a measurement in a quantum computer. The quantum state is projected onto the standard basis. Below are two examples showing a circuit that is prepared in a basis state and the quantum computer prepared in a superposition state."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3374
msgid "The simulator predicts that 100 percent of the time the classical register returns 0."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3474
msgid "The simulator predicts that 50 percent of the time the classical register returns 0 or 1."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3486
msgid "Reset"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3488
msgid "It is also possible to ``reset`` qubits to the :math:`\\left|0\\right\\rangle` state in the middle of computation. Note that ``reset`` is not a Gate operation, since it is irreversible."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3678
msgid "Here we see that for both of these circuits the simulator always predicts that the output is 100 percent in the 0 state."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3690
msgid "Conditional operations"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3692
msgid "It is also possible to do operations conditioned on the state of the classical register"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3764
msgid "Here the classical bit always takes the value 0 so the qubit state is always flipped."
msgstr "여기서 고전 비트의 값은 항상 0이라서 큐비트의 상태는 항상 플립된다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3900
msgid "Here the classical bit by the first measurement is random but the conditional operation results in the qubit being deterministically put into :math:`\\left|1\\right\\rangle`."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3912
msgid "Arbitrary initialization"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3914
msgid "What if we want to initialize a qubit register to an arbitrary state? An arbitrary state for :math:`n` qubits may be specified by a vector of :math:`2^n` amplitudes, where the sum of amplitude-norms-squared equals 1. For example, the following three-qubit state can be prepared:"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3916
msgid "\\left|\\psi\\right\\rangle = \\frac{i}{4}\\left|000\\right\\rangle + \\frac{1}{\\sqrt{8}}\\left|001\\right\\rangle + \\frac{1+i}{4}\\left|010\\right\\rangle + \\frac{1+2i}{\\sqrt{8}}\\left|101\\right\\rangle + \\frac{1}{4}\\left|110\\right\\rangle\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4045
msgid "`Fidelity <https://en.wikipedia.org/wiki/Fidelity_of_quantum_states>`__ is useful to check whether two states are the same or not. For quantum (pure) states :math:`\\left|\\psi_1\\right\\rangle` and :math:`\\left|\\psi_2\\right\\rangle`, the fidelity is"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4047
msgid "F\\left(\\left|\\psi_1\\right\\rangle,\\left|\\psi_2\\right\\rangle\\right) = \\left|\\left\\langle\\psi_1\\middle|\\psi_2\\right\\rangle\\right|^2."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4052
msgid "The fidelity is equal to :math:`1` if and only if two states are equal."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4094
msgid "Further details:"
msgstr "자세한 내용:"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4096
msgid "How does the desired state get generated behind the scenes? There are multiple methods for doing this. Qiskit uses a `method proposed by Shende et al <https://arxiv.org/abs/quant-ph/0406176>`__. Here, the idea is to assume the quantum register to have started from our desired state, and construct a circuit that takes it to the :math:`\\left|00..0\\right\\rangle` state. The initialization circuit is then the reverse of such circuit."
msgstr "어떻게 원하는 상태가 준비될 수 있을까? 이를 수행할 수 있는 다양한 방법들이 있지만 Qiskit에서는 `Shende et al이 제안한 방법 <https://arxiv.org/abs/quant-ph/0406176>`__을 사용한다. 이 논문의 아이디어는 양자 레지스터가 애초에 원하는 상태로 시작했다고 가정한 다음 :math:`\\left|00..0\\right\\rangle` 상태로 변환하는 회로를 구성하는 것이다. 그리고 이 회로의 역변환을 하여 초기화 회로를 얻는다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4098
msgid "To take an arbitrary quantum state to the zero state in the computational basis, we perform an iterative procedure that disentangles qubits from the register one-by-one. We know that any arbitrary single-qubit state :math:`\\left|\\rho\\right\\rangle` can be taken to the :math:`\\left|0\\right\\rangle` state using a :math:`\\phi`-degree rotation about the Z axis followed by a :math:`\\theta`-degree rotation about the Y axis:"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4100
msgid "R_y(-\\theta)R_z(-\\phi)\\left|\\rho\\right\\rangle = re^{it}\\left|0\\right\\rangle\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4102
msgid "Since now we are dealing with :math:`n` qubits instead of just 1, we must factorize the state vector to separate the Least Significant Bit (LSB):"
msgstr "우리가 지금 다루고 있는 큐비트은 한 개가 아닌 :math:`n` 개이므로 상태 벡터에서 가정 덜 중요한 비트(LSB)를 분리해 내고자 다음과 같이 성분 별로 묶어 분해 한다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4104
msgid "\\begin{align*}\n"
" \\left|\\psi\\right\\rangle =& \\alpha_{0_0}\\left|00..00\\right\\rangle + \\alpha_{0_1}\\left|00..01\\right\\rangle + \\alpha_{1_0}\\left|00..10\\right\\rangle + \\alpha_{1_1}\\left|00..11\\right\\rangle + ... \\\\&+ \\alpha_{(2^{n-1}-1)_0}\\left|11..10\\right\\rangle + \\alpha_{(2^{n-1}-1)_1}\\left|11..11\\right\\rangle \\\\\n"
"=& \\left|00..0\\right\\rangle (\\alpha_{0_0}\\left|0\\right\\rangle + \\alpha_{0_1}\\left|1\\right\\rangle) + \\left|00..1\\right\\rangle (\\alpha_{1_0}\\left|0\\right\\rangle + \\alpha_{1_1}\\left|1\\right\\rangle) + ... \\\\&+ \\left|11..1\\right\\rangle (\\alpha_{(2^{n-1}-1)_0}(\\left|0\\right\\rangle + \\alpha_{(2^{n-1}-1)_1}\\left|1\\right\\rangle) \\\\\n"
"=& \\left|00..0\\right\\rangle\\left|\\rho_0\\right\\rangle + \\left|00..1\\right\\rangle\\left|\\rho_1\\right\\rangle + ... + \\left|11..1\\right\\rangle\\left|\\rho_{2^{n-1}-1}\\right\\rangle\n"
"\\end{align*}"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4112
msgid "Now each of the single-qubit states :math:`\\left|\\rho_0\\right\\rangle, ..., \\left|\\rho_{2^{n-1}-1}\\right\\rangle` can be taken to :math:`\\left|0\\right\\rangle` by finding appropriate :math:`\\phi` and :math:`\\theta` angles per the equation above. Doing this simultaneously on all states amounts to the following unitary, which disentangles the LSB:"
msgstr "이제 각 단일 큐비트 상태 :math:`\\left|\\rho_0\\right\\rangle, ..., \\left|\\rho_{2^{n-1}-1}\\right\\rangle`는 적절한 각도 :math:`\\phi` and :math:`\\theta`를 찾아내므로써 :math:`\\left|0\\right\\rangle`로 변환할 수 있다. LSB의 얽힘을 풀어 나가는 이 과정을 모든 상태 동시에 수행하는 유니터리는 다음과 같다."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4114
msgid "U = \\begin{pmatrix}\n"
"R_{y}(-\\theta_0)R_{z}(-\\phi_0) & & & &\\\\\n"
"& R_{y}(-\\theta_1)R_{z}(-\\phi_1) & & &\\\\\n"
"& . & & &\\\\\n"
"& & . & &\\\\\n"
"& & & & R_y(-\\theta_{2^{n-1}-1})R_z(-\\phi_{2^{n-1}-1})\n"
"\\end{pmatrix}"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4124
msgid "Hence,"
msgstr "그러므로,"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4126
msgid "U\\left|\\psi\\right\\rangle = \\begin{pmatrix} r_0e^{it_0}\\\\ r_1e^{it_1}\\\\ . \\\\ . \\\\ r_{2^{n-1}-1}e^{it_{2^{n-1}-1}} \\end{pmatrix}\\otimes\\left|0\\right\\rangle\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4128
msgid "U can be implemented as a \"quantum multiplexor\" gate, since it is a block diagonal matrix. In the quantum multiplexor formalism, a block diagonal matrix of size :math:`2^n \\times 2^n`, and consisting of :math:`2^s` blocks, is equivalent to a multiplexor with :math:`s` select qubits and :math:`n-s` data qubits. Depending on the state of the select qubits, the corresponding blocks are applied to the data qubits. A multiplexor of this kind can be implemented after recursive decomposition to primitive gates of cx, rz and ry."
msgstr ""

