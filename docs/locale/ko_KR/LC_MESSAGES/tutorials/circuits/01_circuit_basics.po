msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-29 18:58+0000\n"
"PO-Revision-Date: 2021-06-04 17:48\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits/01_circuit_basics.po\n"
"X-Crowdin-File-ID: 9498\n"
"Language: ko_KR\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:10
msgid "This page was generated from `tutorials/circuits/01_circuit_basics.ipynb`__."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/circuits/01_circuit_basics.ipynb>`_."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:9
msgid "Circuit Basics"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:11
msgid "Here, we provide an overview of working with Qiskit. Qiskit provides the basic building blocks necessary to program quantum computers. The fundamental unit of Qiskit is the `quantum circuit <https://en.wikipedia.org/wiki/Quantum_circuit>`__. A basic workflow using Qiskit consists of two stages: **Build** and **Run**. **Build** allows you to make different quantum circuits that represent the problem you are solving, and **Run** that allows you to run them on different backends. After the jobs have been run, the data is collected and postprocessed depending on the desired output."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:37
msgid "Building the circuit"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:39
msgid "The basic element needed for your first program is the QuantumCircuit. We begin by creating a ``QuantumCircuit`` comprised of three qubits."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:61
msgid "After you create the circuit with its registers, you can add gates (“operations”) to manipulate the registers. As you proceed through the tutorials you will find more gates and circuits; below is an example of a quantum circuit that makes a three-qubit GHZ state"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:63
msgid "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}.\n\n"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:65
msgid "To create such a state, we start with a three-qubit quantum register. By default, each qubit in the register is initialized to :math:`|0\\rangle`. To make the GHZ state, we apply the following gates: - A Hadamard gate :math:`H` on qubit 0, which puts it into the superposition state :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}`. - A controlled-Not operation (:math:`C_{X}`) between qubit 0 and qubit 1. - A controlled-Not operation between qubit 0 and qubit 2."
msgstr "이러한 상태를 만들기 위해서는 우선 세개의 큐비트로 구성된 양자 레지스터를 구성한다. 기본적으로 레지스터의 각 큐비트는 :math:`|0\\rangle` 로 초기화된다. GHZ 상태를 만들기 위해 다음 게이트를 적용한다: - 큐비트 0을 중첩상태 :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}` 로 만들어 주는 하다마드 게이트 :math:`H` 를 큐비트 0에 적용하고, Controlled Not Gate(:math:`C_{X}`)를 큐비트 0과 큐비트 1에, 다시 Controlled Not Gate를 큐비트 0과 큐비트 2에 적용한다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:67
msgid "On an ideal quantum computer, the state produced by running this circuit would be the GHZ state above."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:69
msgid "In Qiskit, operations can be added to the circuit one by one, as shown below."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:118
msgid "Visualize Circuit"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:120
msgid "You can visualize your circuit using Qiskit ``QuantumCircuit.draw()``, which plots the circuit in the form found in many textbooks."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:150
msgid "In this circuit, the qubits are put in order, with qubit zero at the top and qubit two at the bottom. The circuit is read left to right (meaning that gates that are applied earlier in the circuit show up further to the left)."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:165
msgid "When representing the state of a multi-qubit system, the tensor order used in Qiskit is different than that used in most physics textbooks. Suppose there are :math:`n` qubits, and qubit :math:`j` is labeled as :math:`Q_{j}`. Qiskit uses an ordering in which the :math:`n^{\\mathrm{th}}` qubit is on the left side of the tensor product, so that the basis vectors are labeled as :math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0`."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:167
msgid "For example, if qubit zero is in state 0, qubit 1 is in state 0, and qubit 2 is in state 1, Qiskit would represent this state as :math:`|100\\rangle`, whereas many physics textbooks would represent it as :math:`|001\\rangle`."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:169
msgid "This difference in labeling affects the way multi-qubit operations are represented as matrices. For example, Qiskit represents a controlled-X (:math:`C_{X}`) operation with qubit 0 being the control and qubit 1 being the target as"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:171
msgid "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}.\n\n"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:187
msgid "Simulating circuits"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:189
msgid "To simulate a circuit we use the quant-info module in Qiskit. This simulator returns the quantum state, which is a complex vector of dimensions :math:`2^n`, where :math:`n` is the number of qubits (so be careful using this as it will quickly get too large to run on your machine)."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:191
msgid "There are two stages to the simulator. The fist is to set the input state and the second to evolve the state by the quantum circuit."
msgstr "시뮬레이터에는 두 가지 단계가 있다. 첫 번째로는 입력 상태를 설정하는 것이고 두 번째는 양자 회로에 의해 상태를 발전시키는 것이다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:221
msgid "$$\n\n"
"\\begin{bmatrix}\n"
"\\tfrac{1}{\\sqrt{2}} & 0 & 0 & 0 & 0 & 0 & 0 & \\tfrac{1}{\\sqrt{2}}  \\\\\n"
" \\end{bmatrix}\n"
"$$"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:238
msgid "Qiskit also provides a visualization toolbox to allow you to view the state."
msgstr "키스킷은 이러한 결과들을 보여주는 시각화 도구상자를 제공한다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:240
msgid "Below, we use the visualization function to plot the qsphere and a hinton representing the real and imaginary components of the state density matrix :math:`\\rho`."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:290
msgid "Unitary representation of a circuit"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:301
msgid "Qiskit’s quant_info module also has an operator method which can be used to make a unitary operator for the circuit. This calculates the :math:`2^n \\times 2^n` matrix representing the quantum circuit."
msgstr "또한, Qiskit의 quant_info 모듈에는 회로를 위한 단일 연산자를 만들기 위해 사용될 수 있는 오퍼레이터 메서드가 있다. 이는 양자 회로를 나타내는 :math:`2^n \\times 2^n` 행렬을 계산한다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:394
msgid "OpenQASM backend"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:405
msgid "The simulators above are useful because they provide information about the state output by the ideal circuit and the matrix representation of the circuit. However, a real experiment terminates by *measuring* each qubit (usually in the computational :math:`|0\\rangle, |1\\rangle` basis). Without measurement, we cannot gain information about the state. Measurements cause the quantum system to collapse into classical bits."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:407
msgid "For example, suppose we make independent measurements on each qubit of the three-qubit GHZ state"
msgstr "예를 들어 3개의 큐빗을 가진 GHZ 상태의 각각의 큐빗을 독립적으로 측정한다고 가정해 보자."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:409
msgid "|\\psi\\rangle = (|000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:411
msgid "and let :math:`xyz` denote the bitstring that results. Recall that, under the qubit labeling used by Qiskit, :math:`x` would correspond to the outcome on qubit 2, :math:`y` to the outcome on qubit 1, and :math:`z` to the outcome on qubit 0."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:417
msgid "Note: This representation of the bitstring puts the most significant bit (MSB) on the left, and the least significant bit (LSB) on the right. This is the standard ordering of binary bitstrings. We order the qubits in the same way (qubit representing the MSB has index 0), which is why Qiskit uses a non-standard tensor product order."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:423
msgid "Recall the probability of obtaining outcome :math:`xyz` is given by"
msgstr ":math:`xyz` 의 결과를 얻는 확률은 다음과 같이 주어진다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:425
msgid "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:427
msgid "and as such for the GHZ state probability of obtaining 000 or 111 are both 1/2."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:429
msgid "To simulate a circuit that includes measurement, we need to add measurements to the original circuit above, and use a different Aer backend."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:471
msgid "This circuit adds a classical register, and three measurements that are used to map the outcome of qubits to the classical bits."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:473
msgid "To simulate this circuit, we use the ``qasm_simulator`` in Qiskit Aer. Each run of this circuit will yield either the bitstring 000 or 111. To build up statistics about the distribution of the bitstrings (to, e.g., estimate :math:`\\mathrm{Pr}(000)`), we need to repeat the circuit many times. The number of times the circuit is repeated can be specified in the ``execute`` function, via the ``shots`` keyword."
msgstr "이 회로를 시뮬레이트하기 위해서 키스킷 Aer 에 있는 ``qasm_simulator`` 를 사용한다. 이 회로의 각각의 실행은 비트 문자열 000 혹은 111을 생성한다. 비트 문자열 (예를 들어 :math:`\\mathrm{Pr}(000)` )의 분포에 대한 통계를 얻기 위해서는 회로를 여러번 실행해야 한다. 회로가 반복되는 횟수를 결정하기 위해서는 ``execute`` 함수에 있는 ``shots`` 키워드를 조정하면 된다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:514
msgid "Once you have a result object, you can access the counts via the function ``get_counts(circuit)``. This gives you the *aggregated* binary outcomes of the circuit you submitted."
msgstr "결과 객체를 얻은 후에는 이러한 시뮬레이션 횟수를 ``get_counts(circuit)`` 함수를 통해 접근할 수 있다. 이를 통해서 지금까지 실행했던 시뮬레이션의 합산된 결과값을 구할 수 있다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:555
msgid "Approximately 50 percent of the time, the output bitstring is 000. Qiskit also provides a function ``plot_histogram``, which allows you to view the outcomes."
msgstr "대략 50 퍼센트 정도는 결과 비트 문자열이 000인 값을 가진다. 또한 키스킷은 결과를 보여주는 ``plot_histogram`` 함수를 제공한다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:586
msgid "The estimated outcome probabilities :math:`\\mathrm{Pr}(000)` and :math:`\\mathrm{Pr}(111)` are computed by taking the aggregate counts and dividing by the number of shots (times the circuit was repeated). Try changing the ``shots`` keyword in the ``execute`` function and see how the estimated probabilities change."
msgstr "예측값인 확률 :math:`\\mathrm{Pr}(000)`과 :math:`\\mathrm{Pr}(111)`는 유효 카운트를 모두 더한 후에 (회로가 몇번 실행되었는지를 가르키는) 시뮬레이션 숫자로 나누어서 계산되어진다. ``execute`` 함수에 있는 ``shots`` 키워드를 수정해 보면서 예측 확률값이 어떻게 변하는지 살펴보라."

