msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-21 22:19+0000\n"
"PO-Revision-Date: 2022-04-21 23:24\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits/01_circuit_basics.po\n"
"X-Crowdin-File-ID: 9498\n"
"Language: ko_KR\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:10
msgid "This page was generated from `tutorials/circuits/01_circuit_basics.ipynb`__."
msgstr "이 페이지는 `tutorials/circuits/01_circuit_basics.ipynb`__ 에서 생성되었다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:9
msgid "Circuit Basics"
msgstr "회로의 기초"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:11
msgid "Here, we provide an overview of working with Qiskit. Qiskit provides the basic building blocks necessary to program quantum computers. The fundamental unit of Qiskit is the `quantum circuit <https://en.wikipedia.org/wiki/Quantum_circuit>`__. A basic workflow using Qiskit consists of two stages: **Build** and **Run**. **Build** allows you to make different quantum circuits that represent the problem you are solving, and **Run** that allows you to run them on different backends. After the jobs have been run, the data is collected and postprocessed depending on the desired output."
msgstr "여기에서는 Qiskit 사용에 대한 개요를 설명한다. Qiskit은 양자 컴퓨터를 프로그램하기 위해 필수적인 기초 구성 요소들을 제공한다. Qiskit의 기본 단위는 `양자 회로 <https://en.wikipedia.org/wiki/Quantum_circuit>`__ 이다. Qiskit의 작업 흐름은 두 단계로 나뉜다: **빌드** 와 **실행** 이다. **빌드** 는 해결하고픈 문제를 나타내는 다양한 양자회로들을 구축할 수 있게 하며, **실행** 은 이 회로들을 여러 백엔드에서 실행할 수 있게 한다. 작업들이 다 실행되었을 때, 데이터는 원하는 출력에 따라 수집되고 후처리가 된다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:36
msgid "Building the circuit"
msgstr "회로 만들기"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:38
msgid "The basic element needed for your first program is the QuantumCircuit. We begin by creating a ``QuantumCircuit`` comprised of three qubits."
msgstr "첫번째 프로그램을 위해 필요한 제일 기초적인 요소는 QuantumCircuit이다. 세 개의 큐비트으로 이루어진 ``QuantumCircuit`` 을 만드는 것으로 시작하자."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:60
msgid "After you create the circuit with its registers, you can add gates (“operations”) to manipulate the registers. As you proceed through the tutorials you will find more gates and circuits; below is an example of a quantum circuit that makes a three-qubit GHZ state"
msgstr "레지스터를 가진 회로를 만들고 난 후, 레지스터를 조작하기 위해 게이트 (\"연산\") 를 추가할 수 있다. 튜토리얼을 계속 진행하며 더 많은 종류의 게이트들과 회로를 알아갈 수 있을 것이다. 아래는 3-큐비트 GHZ 상태를 만드는 양자 회로의 한 예시이다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:62
msgid "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}.\n\n"
msgstr "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}.\n\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:64
msgid "To create such a state, we start with a three-qubit quantum register. By default, each qubit in the register is initialized to :math:`|0\\rangle`. To make the GHZ state, we apply the following gates: - A Hadamard gate :math:`H` on qubit 0, which puts it into the superposition state :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}`. - A Controlled-NOT operation (:math:`C_{X}`) between qubit 0 and qubit 1. - A Controlled-NOT operation between qubit 0 and qubit 2."
msgstr "이러한 상태를 만들기 위해서는 우선 세개의 큐비트로 양자 레지스터를 구성한다. 기본적으로 레지스터의 각 큐비트는 :math:`|0\\rangle` 로 초기화된다. GHZ 상태를 만들기 위해 다음 게이트를 적용한다: - 중첩 상태 :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}` 로 만들어주는 Hadamard(하다마드) 게이트 :math:`H` 를 큐비트 0에 적용한다. - 큐비트 0과 큐비트 1에 Controlled-NOT 연산 (:math:`C_{X}`)을 적용한다. - 큐비트 0과 큐비트 2에 Controlled-NOT 연산을 적용한다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:66
msgid "On an ideal quantum computer, the state produced by running this circuit would be the GHZ state above."
msgstr "이상적인 양자 컴퓨터에서 이 회로를 실행한다면 위의 GHZ 상태가 만들어질 것이다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:68
msgid "In Qiskit, operations can be added to the circuit one by one, as shown below."
msgstr "Qiskit에서는 아래와 같이 연산들을 회로에 하나씩 추가할 수 있다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:121
msgid "Visualize Circuit"
msgstr "회로 시각화하기"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:123
msgid "You can visualize your circuit using Qiskit ``QuantumCircuit.draw()``, which plots the circuit in the form found in many textbooks."
msgstr "Qiskit ``QuantumCircuit.draw()`` 는 회로를 많은 교재에 나오는 형식으로 그려주는데, 이를 이용해 회로를 시각화할 수 있다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:153
msgid "In this circuit, the qubits are put in order, with qubit zero at the top and qubit two at the bottom. The circuit is read left to right (meaning that gates that are applied earlier in the circuit show up further to the left)."
msgstr "이 회로에서는 큐비트들이 0 큐비트은 위쪽에 1 큐빗은 아래쪽에 놓이도록 순서가 정해져 있다. 회로는 왼쪽에서 오른쪽으로 읽혀지는데, 이것은 가장 왼쪽의 게이트들이 회로에서 먼저 적용된다는 것을 의미한다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:168
msgid "When representing the state of a multi-qubit system, the tensor order used in Qiskit is different than that used in most physics textbooks. Suppose there are :math:`n` qubits, and qubit :math:`j` is labeled as :math:`Q_{j}`. Qiskit uses an ordering in which the :math:`n^{\\mathrm{th}}` qubit is on the left side of the tensor product, so that the basis vectors are labeled as :math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0`."
msgstr "다중 큐비트 시스템의 상태를 나타낼 때, Qiskit은 대부분의 물리 교재에서 사용되는 텐서(tensor)의 순서와는 반대 되는 순서를 사용한다. :math:`n` 개의 큐비트가 있고, 큐비트 :math:`j` 는 :math:`Q_{j}` 로 표시된다고 가정하자. Qiskit에서는 (기저 벡터들을 :math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0` 로 표현하기 위하여) :math:`n^{\\mathrm{th}}` 큐비트를 텐서 곱의 가장 왼편에 위치하도록 만드는 순서체계(ordering)를 사용한다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:170
msgid "For example, if qubit zero is in state 0, qubit 1 is in state 0, and qubit 2 is in state 1, Qiskit would represent this state as :math:`|100\\rangle`, whereas many physics textbooks would represent it as :math:`|001\\rangle`."
msgstr "예를 들어, 큐빗 0이 0 상태에 있고, 큐빗 1이 0 상태, 큐빗 2가 1 상태에 있을 때, Qiskit은 이 상태를 :math:`|100\\rangle` 로 표현하는데, 대부분의 물리 교과서에서는 :math:`|001\\rangle` 로 표현한다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:172
msgid "This difference in labeling affects the way multi-qubit operations are represented as matrices. For example, Qiskit represents a controlled-X (:math:`C_{X}`) operation with qubit 0 being the control and qubit 1 being the target as"
msgstr "이러한 표현의 차이는 다중 큐비트 연산이 행렬로 표현될 때 나타나게 된다. 예를 들어 큐비트 0이 제어 큐비트이고 큐비트 1이 목표 큐비트일 때, controlled-X (:math:`C_{X}`) 연산은 Qiskit에서 다음과 같이 표현된다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:174
msgid "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}.\n\n"
msgstr "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}.\n\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:190
msgid "Simulating circuits"
msgstr "회로 시뮬레이션하기"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:192
msgid "To simulate a circuit we use the quant_info module in Qiskit. This simulator returns the quantum state, which is a complex vector of dimensions :math:`2^n`, where :math:`n` is the number of qubits (so be careful using this as it will quickly get too large to run on your machine)."
msgstr "회로를 시뮬레이션하고자 Qiskit 의 quant_info 모듈을 사용한다. 이 시뮬레이터는 :math:`2^n` 차원의의 복소 벡터인 양자 상태를 반환하는데, 여기서 :math:`n` 은 큐비트의 개수이다 (따라서 로컬 머신에서 돌릴 때 순식간에 너무 큰 용량을 차지하게 될 수 있어 주의해야 한다)."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:194
msgid "There are two stages to the simulator. The first is to set the input state and the second to evolve the state by the quantum circuit."
msgstr "시뮬레이터에는 두 가지 단계가 있다. 첫 번째로는 입력 상태를 설정하는 것이고 두 번째는 양자 회로로 상태를 발전시키는 것이다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:224
#: ../../tutorials/circuits/01_circuit_basics.ipynb:254
msgid "$$\n\n"
"\\begin{bmatrix}\n"
"\\tfrac{1}{\\sqrt{2}} & 0 & 0 & 0 & 0 & 0 & 0 & \\tfrac{1}{\\sqrt{2}}  \\\\\n"
" \\end{bmatrix}\n"
"$$"
msgstr "$$\n\n"
"\\begin{bmatrix}\n"
"\\tfrac{1}{\\sqrt{2}} & 0 & 0 & 0 & 0 & 0 & 0 & \\tfrac{1}{\\sqrt{2}}  \\\\\n"
" \\end{bmatrix}\n"
"$$"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:271
msgid "Qiskit also provides a visualization toolbox to allow you to view the state."
msgstr "Qiskit은 이러한 결과들을 보여주는 시각화 도구상자를 제공한다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:273
msgid "Below, we use the visualization function to plot the qsphere and a hinton representing the real and imaginary components of the state density matrix :math:`\\rho`."
msgstr "아래에서는 시각화 함수를 이용해 qsphere와 상태 밀도 행렬 :math:`\\rho` 의 실수와 허수 부분을 나타내는 힌턴 다이어그램을 그렸다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:323
msgid "Unitary representation of a circuit"
msgstr "회로의 유니터리 표현"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:334
msgid "Qiskit’s quant_info module also has an operator method which can be used to make a unitary operator for the circuit. This calculates the :math:`2^n \\times 2^n` matrix representing the quantum circuit."
msgstr "또한, Qiskit의 quant_info 모듈에는 회로를 위한 단일 연산자를 만들기 위해 사용될 수 있는 연산자 메서드가 있다. 이는 양자 회로를 나타내는 :math:`2^n \\times 2^n` 행렬을 계산한다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:454
msgid "OpenQASM backend"
msgstr "OpenQASM 백엔드"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:465
msgid "The simulators above are useful because they provide information about the state output by the ideal circuit and the matrix representation of the circuit. However, a real experiment terminates by *measuring* each qubit (usually in the computational :math:`|0\\rangle, |1\\rangle` basis). Without measurement, we cannot gain information about the state. Measurements cause the quantum system to collapse into classical bits."
msgstr "이러한 시뮬레이터들은 회로의 행렬 상태를 보여주고 이상적인 회로의 상태 결과에 대한 정보를 주기 때문에 유용하다. 그러나 실제의 실험은 각각의 큐비트(보통 computational :math:`|0\\rangle, |1\\rangle` 기저로 표현된다)를 *측정* 함으로써 끝난다. 측정이 없다면, 상태에 대한 정보를 얻을 수 없다. 또한 측정을 통해 양자 시스템은 고전적인 비트로 붕괴하게 된다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:467
msgid "For example, suppose we make independent measurements on each qubit of the three-qubit GHZ state"
msgstr "예를 들어, 3개의 큐비트를 가진 GHZ 상태의 각각의 큐비트를 독립적으로 측정한다고 가정해 보자."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:469
msgid "|\\psi\\rangle = (|000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"
msgstr "|\\psi\\rangle = (|000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:471
msgid "and let :math:`xyz` denote the bitstring that results. Recall that, under the qubit labeling used by Qiskit, :math:`x` would correspond to the outcome on qubit 2, :math:`y` to the outcome on qubit 1, and :math:`z` to the outcome on qubit 0."
msgstr "그리고 :math:`xyz` 를 결과의 비트 문자열이라고 하자. Qiskit에서 사용되는 큐비트 표기로는 :math:`x` 가 큐비트 2의 결과에 해당하고, :math:`y` 는 큐비트 1, 그리고 :math:`z` 는 큐비트 0에 해당한다는 사실을 기억하자."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:477
msgid "Note: This representation of the bitstring puts the most significant bit (MSB) on the left, and the least significant bit (LSB) on the right. This is the standard ordering of binary bitstrings. We order the qubits in the same way (qubit representing the MSB has index 0), which is why Qiskit uses a non-standard tensor product order."
msgstr "참고: 이러한 비트열 표기는 most significant bit (MSB) 를 왼쪽에 두고 least significant bit (LSB) 를 오른쪽에 둔다. 이는 이진 비트열을 표기하는 일반적인 순서이다. 우리는 큐비트도 이 규칙에 따라 배열한다 (MSB에 해당하는 큐비트는 0으로 인덱스된다). 따라서 Qiskit은 일반적이지 않은 텐서 곱 순서를 사용한다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:483
msgid "Recall the probability of obtaining outcome :math:`xyz` is given by"
msgstr ":math:`xyz` 의 결과를 얻는 확률은 다음과 같이 주어진다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:485
msgid "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"
msgstr "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:487
msgid "and as such for the GHZ state probability of obtaining 000 or 111 are both 1/2."
msgstr "따라서 GHZ 상태에서 000 혹은 111의 결과를 얻을 확률은 둘 다 1/2이다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:489
msgid "To simulate a circuit that includes measurement, we need to add measurements to the original circuit above, and use a different Aer backend."
msgstr "측정을 포함하는 회로를 시뮬레이트하기 위해서는 원래의 회로에 측정들을 추가해야 하고, 다른 Aer 백엔드를 사용해야 한다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:531
msgid "This circuit adds a classical register, and three measurements that are used to map the outcome of qubits to the classical bits."
msgstr "이 회로는 고전 레지스터와, 큐비트의 결과를 고전 비트에 연결하기 위한 세 개의 측정들을 추가한다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:533
msgid "To simulate this circuit, we use the ``qasm_simulator`` in Qiskit Aer. Each run of this circuit will yield either the bitstring 000 or 111. To build up statistics about the distribution of the bitstrings (to, e.g., estimate :math:`\\mathrm{Pr}(000)`), we need to repeat the circuit many times. The number of times the circuit is repeated can be specified in the ``execute`` function, via the ``shots`` keyword."
msgstr "이 회로를 시뮬레이트하기 위해서 Qiskit Aer 에 있는 ``qasm_simulator`` 를 사용한다. 이 회로의 각각의 실행은 비트 문자열 000 혹은 111을 생성한다. 비트 문자열 (예를 들어 :math:`\\mathrm{Pr}(000)` )의 분포에 대한 통계를 얻기 위해서는 회로를 여러번 실행해야 한다. 회로가 반복되는 횟수를 결정하기 위해서는 ``execute`` 함수에 있는 ``shots`` 키워드를 조정하면 된다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:574
msgid "Once you have a result object, you can access the counts via the function ``get_counts(circuit)``. This gives you the *aggregated* binary outcomes of the circuit you submitted."
msgstr "결과 객체를 얻은 후에는 이러한 시뮬레이션 횟수를 ``get_counts(circuit)`` 함수를 통해 접근할 수 있다. 이를 통해서 지금까지 실행했던 시뮬레이션의 합산된 결과 값을 구할 수 있다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:619
msgid "Approximately 50 percent of the time, the output bitstring is 000. Qiskit also provides a function ``plot_histogram``, which allows you to view the outcomes."
msgstr "대략 50 퍼센트 정도는 결과 비트 문자열이 000인 값을 가진다. 또한 Qiskit은 결과를 보여주는 ``plot_histogram`` 함수를 제공한다."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:650
msgid "The estimated outcome probabilities :math:`\\mathrm{Pr}(000)` and :math:`\\mathrm{Pr}(111)` are computed by taking the aggregate counts and dividing by the number of shots (times the circuit was repeated). Try changing the ``shots`` keyword in the ``execute`` function and see how the estimated probabilities change."
msgstr "예측값인 확률 :math:`\\mathrm{Pr}(000)`과 :math:`\\mathrm{Pr}(111)`는 유효 카운트를 모두 더한 후에 (회로가 몇번 실행되었는지를 가르키는) 시뮬레이션 숫자로 나누어서 계산되어진다. ``execute`` 함수에 있는 ``shots`` 키워드를 수정해 보면서 예측 확률값이 어떻게 변하는지 살펴보라."

