msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:25+0000\n"
"PO-Revision-Date: 2023-08-14 19:07\n"
"Last-Translator: \n"
"Language: ko\n"
"Language-Team: Korean\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/algorithms/03_vqe_simulation_with_noise.po\n"
"X-Crowdin-File-ID: 9448\n"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:10
msgid "This page was generated from `tutorials/algorithms/03_vqe_simulation_with_noise.ipynb`__."
msgstr "이 페이지는 `tutorials/algorithms/03_vqe_simulation_with_noise.ipynb`__ 에서 생성되었다."

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:9
msgid "VQE with Qiskit Aer Primitives"
msgstr "Qiskit Aer Primitives를 이용한 VQE"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:11
msgid "This notebook demonstrates how to leverage the `Qiskit Aer Primitives <https://qiskit.org/documentation/apidoc/aer_primitives.html>`__ to run both noiseless and noisy simulations locally. Qiskit Aer not only allows you to define your own custom noise model, but also to easily create a noise model based on the properties of a real quantum device. This notebook will show an example of the latter, to illustrate the general workflow of running algorithms with local noisy simulators."
msgstr "이 노트북은 `Qiskit Aer Primitives <https://qiskit.org/documentation/apidoc/aer_primitives.html>`__ 를 활용하여 로컬에서 노이즈가 없는 시뮬레이션과 노이즈가 있는 시뮬레이션을 모두 실행하는 방법을 보여준다. Qiskit Aer를 사용하면 사용자 정의 노이즈 모델을 정의할 수 있을 뿐만 아니라 실제 양자 장치의 특성을 기반으로 노이즈 모델을 쉽게 만들 수 있다. 이 노트북은 로컬 노이즈 시뮬레이터로 알고리즘을 실행하는 일반적인 워크플로우를 설명하기 위해 후자의 예를 보여준다."

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:13
msgid "For further information on the Qiskit Aer noise model, you can consult the `Qiskit Aer documentation <https://qiskit.org/documentation/apidoc/aer_noise.html>`__, as well the tutorial for `building noise models <../simulators/3_building_noise_models.ipynb>`__."
msgstr "Qiskit Aer 노이즈 모델에 대한 자세한 내용은 온라인 `Qiskit Aer 문서 <https://qiskit.org/documentation/apidoc/aer_noise.html>`__, 에서 찾을 수 있으며 `노이즈 모델을 생성하는 법 <../simulators/3_building_noise_models.ipynb>`__ 과 관련한 튜토리얼도 있으니 참고하도록 한다."

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:24
msgid "The algorithm of choice is once again VQE, where the task consists on finding the minimum (ground state) energy of a Hamiltonian. As shown in previous tutorials, VQE takes in a qubit operator as input. Here, you will take a set of Pauli operators that were originally computed by Qiskit Nature for the H2 molecule, using the ``SparsePauliOp`` class."
msgstr "선택된 알고리듬은 또 다시 VQE이며, 여기서 작업은 해밀토니안의 최소(바닥 상태) 에너지를 찾는 것으로 구성된다. 이전 튜토리얼에 표시된 것처럼 VQE는 큐비트 연산자를 입력으로 받아들인다. 여기서는 ``SparsePauliOp`` 클래스를 사용하여 원래 Qiskit Nature가 H2 분자에 대해 계산했던 파울리 연산자 세트를 사용한다."

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:81
msgid "As the above problem is still easily tractable classically, you can use ``NumPyMinimumEigensolver`` to compute a reference value to compare the results later."
msgstr "위의 문제점이 여전히 쉽게 고전적으로 추적 가능하기 때문에 ``NumPyMinimumEigensolver`` 를 사용하여 참조 값을 계산할 수 있으므로 나중에 결과를 비교할 수 있다."

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:132
msgid "The following examples will all use the same ansatz and optimizer, defined as follows:"
msgstr "다음 예제에서는 모두 다음과 같이 정의된 동일한 ansatz 및 옵티마이저를 사용한다:"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:160
msgid "Performance *without* noise"
msgstr "노이즈를 *포함하지 않은* 성능"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:162
msgid "Let's first run the ``VQE`` on the default Aer simulator without adding noise, with a fixed seed for the run and transpilation to obtain reproducible results. This result should be relatively close to the reference value from the exact computation."
msgstr "먼저 노이즈를 추가하지 않은 기본 Aer 시뮬레이터에서 ``VQE`` 를 실행하여 재현 가능한 결과를 얻기 위해 고정 시드를 사용하여 실행 및 트랜스파일 한다. 이 결과는 정확한 계산의 기준값에 상대적으로 가까워야 한다."

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:259
msgid "You captured the energy values above during the convergence, so you can track the process in the graph below."
msgstr "수렴 중에 위의 에너지 값을 포착하여 아래 그래프에서 무엇이 진행되었는지 추적할 수 있다."

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:321
msgid "Performance *with* noise"
msgstr "노이즈를 *포함한* 성능"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:323
msgid "Now, let's add noise to our simulation. In particular, you will extract a noise model from a (fake) device. As stated in the introduction, it is also possible to create custom noise models from scratch, but this task is beyond the scope of this notebook."
msgstr "이제 시뮬레이션에 노이즈를 추가해 보겠다. 특히 (가짜) 장치에서 노이즈 모델을 추출한다. 서론에서 설명한 바와 같이, 처음부터 사용자 지정 노이즈 모델을 만드는 것도 가능하지만, 이 작업은 이 노트북에서 다루지 않는다."

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:325
msgid "First, you need to get an actual device backend and from its ``configuration`` and ``properties`` you can setup a coupling map and a noise model to match the device. Note: You can also use this coupling map as the entanglement map for the variational form if you choose to."
msgstr "먼저 실제 기기 백엔드를 확보해야하고 ``configuration`` 과 ``properties`` 을 사용하여 기기와 일치하도록 결합 맵(coupling map) 과 노이즈 모델을 설정할 수 있다. 참고: 이 결합 맵을 선택하는 경우 변분 형태의 얽힌 맵으로 사용할 수도 있다."

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:392
msgid "Once the noise model is defined, you can run ``VQE`` using an Aer ``Estimator``, where you can pass the noise model to the underlying simulator using the ``backend_options`` dictionary. Please note that this simulation will take longer than the noiseless one."
msgstr "노이즈 모델이 정의되면 Aer ``Estimator`` 를 사용하여 ``VQE`` 를 실행할 수 있다. 여기서 ``backend_options`` 딕셔너리를 사용하여 노이즈 모델을 기본 시뮬레이터로 전달할 수 있다. 이 시뮬레이션은 노이즈가 없는 시뮬레이션보다 시간이 오래 걸린다."

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:421
msgid "Instead of defining a new instance of the ``VQE`` class, you can now simply assign a new estimator to our previous ``VQE`` instance. As the callback method will be re-used, you will also need to re-start the ``counts`` and ``values`` variables to be able to plot the convergence graph later on."
msgstr "이제 ``VQE`` 클래스의 새 인스턴스를 정의하는 대신 이전 ``VQE`` 인스턴스에 새 estimator를 할당할 수 있다. 콜백 메서드가 다시 사용되므로 나중에 수렴 그래프를 표시하려면 ``counts`` 및 ``values`` 변수도 다시 시작해야 한다."

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:512
msgid "Summary"
msgstr "요약"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:523
msgid "In this tutorial, you compared three calculations for the H2 molecule ground state. First, you produced a reference value using a classical minimum eigensolver. Then, you proceeded to run ``VQE`` using the Qiskit Aer ``Estimator`` with 1024 shots. Finally, you extracted a noise model from a backend and used it to define a new ``Estimator`` for noisy simulations. The results are:"
msgstr "이 튜토리얼에서는 H2 분자 바닥 상태에 대한 세 가지 계산을 비교했다. 먼저 고전적인 최소 교윳값 해석기를 사용하여 기준 값을 생성한다. 그런 다음, 1024개 샷의 Qiskit Air ``Estimator`` 를 사용하여 ``VQE`` 를 실행한다. 마지막으로, 백엔드에서 노이즈 모델을 추출하여 노이즈 시뮬레이션을 위한 새로운 ``Estimator`` 를 정의하는 데 사용한다. 결과는 다음과 같다:"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:576
msgid "You can notice that, while the noiseless simulation's result is closer to the exact reference value, there is still some difference. This is due to the sampling noise, introduced by limiting the number of shots to 1024. A larger number of shots would decrease this sampling error and close the gap between these two values."
msgstr "노이즈 없는 시뮬레이션의 결과가 정확한 기준값에 가깝지만 여전히 약간의 차이가 있다는 것을 알 수 있다. 이는 샷 수를 1024개로 제한함으로써 발생하는 샘플링 노이즈 때문이다. 샷 수가 많을수록 이 샘플링 오류가 줄어들고 이 두 값 사이의 간격이 좁아진다."

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:578
msgid "As for the noise introduced by real devices (or simulated noise models), it could be tackled through a wide variety of error mitigation techniques. The `Qiskit Runtime Primitives <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/>`__ have enabled error mitigation through the ``resilience_level`` option. This option is currently available for remote simulators and real backends accessed via the Runtime Primitives, you can consult `this tutorial <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials/Error-Suppression-and-Error-Mitigation.html>`__ for further information."
msgstr "실제 장치 (또는 시뮬레이션된 노이즈 모델)에 의해 도입된 노이즈의 경우, 다양한 오류 완화 기술을 통해 해결할 수 있다. `Qiskit Runtime Primitives <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/>`__ 는 ``resilience_level`` 옵션을 통해 오류 완화를 활성화했다. 이 옵션은 현재 Runtime Primitives를 통해 액세스하는 원격 시뮬레이터 및 실제 백엔드에 사용할 수 있다. 자세한 내용은 `이 튜토리얼 <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials/Error-Suppression-and-Error-Mitigation.html>`__ 을 참조하라."

