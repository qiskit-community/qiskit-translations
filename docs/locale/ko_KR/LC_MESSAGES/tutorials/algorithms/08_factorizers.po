msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-24 10:41+0000\n"
"PO-Revision-Date: 2022-11-24 11:13\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/08_factorizers.po\n"
"X-Crowdin-File-ID: 9508\n"
"Language: ko_KR\n"

#: ../../tutorials/algorithms/08_factorizers.ipynb:10
msgid "This page was generated from `tutorials/algorithms/08_factorizers.ipynb`__."
msgstr "이 페이지는 `tutorials/algorithms/08_factorizers.ipynb`__ 로부터 생성되었다."

#: ../../tutorials/algorithms/08_factorizers.ipynb:9
msgid "Shor’s algorithms"
msgstr "쇼어 알고리즘"

#: ../../tutorials/algorithms/08_factorizers.ipynb:11
msgid "Qiskit has an implementation of `Shor’s algorithm <https://qiskit.org/textbook/ch-algorithms/shor.html>`__."
msgstr "Qiskit에는 `쇼어 알고리즘(Shor’s algorithm) <https://qiskit.org/textbook/ch-algorithms/shor.html>`__ 이 구현되어 있다."

#: ../../tutorials/algorithms/08_factorizers.ipynb:13
msgid "The preceding reference has detailed explanations and build-out of circuits whereas this notebook has examples with the pre-built algorithms in Qiskit that you can use for experimentation and education purposes."
msgstr "이전 참조들은 회로들의 상세한 설명들 및 build-out of circuits를 가지는 반면, 이 노트북은 실험 및 교육 목적으로 사용할 수 있는 Qiskit에서 사전에 구현된 알고리즘들을 예로 들어 설명한다."

#: ../../tutorials/algorithms/08_factorizers.ipynb:39
msgid "Shor’s Factoring algorithm"
msgstr "쇼어의 소인수분해 알고리즘"

#: ../../tutorials/algorithms/08_factorizers.ipynb:41
msgid "`Shor’s Factoring algorithm <https://qiskit.org/documentation/stubs/qiskit.algorithms.Shor.html>`__ is one of the most well-known quantum algorithms and finds the prime factors for input integer :math:`N` in polynomial time. The algorithm implementation in Qiskit is simply provided a target integer to be factored and run, as follows:"
msgstr "`Shor의 인수분해 알고리즘 <https://qiskit.org/documentation/stubs/qiskit.algorithms.Shor.html>`__ 은 가장 잘 알려진 양자 알고리즘 중 하나로 다항식 시간 내에 입력된 정수 :math:`N` 의 소인수 (prime factor)를 찾는다. Qiskit에서 구현된 알고리즘은 단순히 목표 정수를 입력받아 다음과 같이 실행한다."

#: ../../tutorials/algorithms/08_factorizers.ipynb:91
msgid "Note: this implementation of Shor’s algorithm uses :math:`4n + 2` qubits, where :math:`n` is the number of bits representing the integer in binary. So in practice, for now, this implementation is restricted to factorizing small integers. Given the above value of N we compute :math:`4n +2` below and confirm the size from the actual circuit."
msgstr "참고: Shor's 알고리즘 구현은 :math:`4n + 2` 큐비트를 사용하며 여기서 :math:`n` 은 정수의 바이너리 비트 개수이다. 따라서 실제로 현재 이 구현은 크기가 작은 정수를 소인수 분해하는 것으로 제한된다. 위의 N 값이 주어지면 :math:`4n +2` 를 계산하고 실제 회로에서 크기를 확인한다."

