msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-30 18:31+0000\n"
"PO-Revision-Date: 2020-12-17 22:57\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/06_qaoa.po\n"
"X-Crowdin-File-ID: 9454\n"
"Language: ko_KR\n"

#: ../../tutorials/algorithms/06_qaoa.ipynb:10
msgid "This page was generated from `tutorials/algorithms/06_qaoa.ipynb`__."
msgstr "이 페이지는 `tutorials/algorithms/06_qaoa.ipynb`__ 로부터 생성되었다."

#: ../../tutorials/algorithms/06_qaoa.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/06_qaoa.ipynb>`_."
msgstr "`IBM 퀀텀 랩 <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/06_qaoa.ipynb>`_ 에서 대화식으로 실행하시오."

#: ../../tutorials/algorithms/06_qaoa.ipynb:9
msgid "Quantum Approximate Optimization Algorithm"
msgstr "양자 근사 최적화 알고리즘 (Quantum Approximate Optimization Algorithm)"

#: ../../tutorials/algorithms/06_qaoa.ipynb:11
msgid "Qiskit has an implementation of the Quantum Approximate Optimization Algorithm `QAOA <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.QAOA.html>`__ and this notebook demonstrates using it for a graph partition problem."
msgstr "키스킷에는 양자 근사 최적화 알고리즘 `QAOA <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.QAOA.html>`__ 이 구현되어 있다. 이 노트북은 그래프 분할 (graph partition) 문제에 이를 적용하는 방법을 시연할 것이다."

#: ../../tutorials/algorithms/06_qaoa.ipynb:13
msgid "While QAOA can be directly used it often more convenient to use it in conjunction with the Optimization module. See the Optimization tutorials for more information."
msgstr "QAOA는 직접 사용할 수도 있지만, 최적화 모듈과 함께 사용하는 것이 더 편리하다. 자세한 내용은 최적화 사용 지침서를 참조하라."

#: ../../tutorials/algorithms/06_qaoa.ipynb:40
msgid "First we create a random graph and draw it so it can be seen."
msgstr "먼저 무작위 그래프를 생성하고 이를 그려서 확인해보자."

#: ../../tutorials/algorithms/06_qaoa.ipynb:111
msgid "The brute-force method is as follows. Basically, we exhaustively try all the binary assignments. In each binary assignment, the entry of a vertex is either 0 (meaning the vertex is in the first partition) or 1 (meaning the vertex is in the second partition). We print the binary assignment that satisfies the definition of the graph partition and corresponds to the minimal number of crossing edges."
msgstr "무차별 대입(brute-force) 방법은 다음과 같다. 기본적으로 철저히 모든 경우의 수에 대하여 바이너리 할당(binary assignment) 을 시도한다. 각 바이너리 할당에서 꼭짓점의 항목은 0 (꼭짓점이 첫 번째 분할 영역에 있음을 의미) 또는 1 (꼭짓점이 두 번째 분할 영역에 있음을 의미) 이다. 그래프 분할의 정의를 충족하면서 모서리 교차횟수가 최소인 바이너리 할당 결과를 출력한다."

#: ../../tutorials/algorithms/06_qaoa.ipynb:173
msgid "The graph partition problem can be converted to an Ising Hamitonian. Qiskit has different capabilities in the Optimization module to do this. Here, since the goal is to show QAOA, the module is used without further explanation to create the operator. The paper `Ising formulations of many NP problems <https://arxiv.org/abs/1302.5843>`__ may be of interest if you would like to understand the technique further."
msgstr "그래프 분할 문제는 Ising Hamilonian으로 변환할 수 있다. 키스킷은 이를 수행하기 위하여 최적화 모듈에서 다양한 기능을 제공한다. 여기서 목표는 QAOA를 보여주는 것이므로 추가 설명없이 모듈을 사용하여 연산자를 생성한다. 위의 기술을 더 이해하고 싶다면 다음의 논문 `Ising formulations of many NP problems <https://arxiv.org/abs/1302.5843>`__ 이 흥미로울 수 있다."

#: ../../tutorials/algorithms/06_qaoa.ipynb:194
msgid "So lets use the QAOA algorithm to find the solution."
msgstr "QAOA를 사용하여 솔루션을 찾아보자."

#: ../../tutorials/algorithms/06_qaoa.ipynb:252
msgid "The outcome can be seen to match to the value computed above by brute force. But we can also use the classical ``NumPyMinimumEigensolver`` to do the computation, which may be useful as a reference without doing things by brute force."
msgstr "도출된 결과는 위에서 무차별 대입으로 계산한 값과 일치하는 것을 확인할 수 있다. 그러나 또한 우리는 기존의 ``NumPyMinimumEigensolver`` 를 사용하여 계산을 수행할 수 있는데, 이는 무차별 대입을 수행하지 않는 다는 점에서 참조하면 유용할 것이다."

#: ../../tutorials/algorithms/06_qaoa.ipynb:301
msgid "It is also possible to use VQE as is shown below"
msgstr "아래와 같이 VQE를 사용할 수도 있다."

