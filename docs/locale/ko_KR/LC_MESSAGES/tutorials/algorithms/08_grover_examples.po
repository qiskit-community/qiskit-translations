msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-07 16:27+0000\n"
"PO-Revision-Date: 2020-12-20 20:23\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/08_grover_examples.po\n"
"X-Crowdin-File-ID: 9458\n"
"Language: ko_KR\n"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:10
msgid "This page was generated from `tutorials/algorithms/08_grover_examples.ipynb`__."
msgstr "이 페이지는 `tutorials/algorithms/08_grover_examples.ipynb`__ 로부터 생성되었다."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/08_grover_examples.ipynb>`_."
msgstr "`IBM 퀀텀 랩 <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/08_grover_examples.ipynb>`_ 에서 대화식으로 실행하시오."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:9
msgid "Grover’s algorithm examples"
msgstr "그로버 알고리즘 예제들"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:11
msgid "This notebook has examples demonstrating how to use the Qiskit `Grover <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Grover.html>`__ search algorithm, with different oracles."
msgstr "본 노트북에는 `Grover <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Grover.html>`__ 검색 알고리즘을 다양한 오라클과 함께 사용하는 방법을 설명하는 예제가 있다."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:39
msgid "Finding solutions to 3-SAT problems"
msgstr "3-SAT 문제에 대한 해결책 찾기"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:41
msgid "Let’s look at an example 3-Satisfiability (3-SAT) problem and walk-through how we can use Quantum Search to find its satisfying solutions. 3-SAT problems are usually expressed in `Conjunctive Normal Forms (CNF) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ and written in the `DIMACS-CNF <https://www.satcompetition.org/2009/format-benchmarks2009.html>`__ format. For example:"
msgstr "3-SAT (3-Satisfiability) 문제의 예를 살펴보고 Quantum Search를 사용하여 만족스러운 솔루션을 찾는 방법을 살펴보겠다. 3-SAT 문제는 일반적으로 `Conjunctive Normal Forms (CNF) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ 로 표현되고 `DIMACS-CNF <https://www.satcompetition.org/2009/format-benchmarks2009.html>`__ 형식으로 작성된다. 예를 들면:"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:70
msgid "The CNF of this 3-SAT instance contains 3 variables and 5 clauses:"
msgstr "이 3-SAT 인스턴스의 CNF는 3개의 변수와 5개의 절을 포함한다:"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:72
msgid ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"
msgstr ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:74
msgid "It can be verified that this 3-SAT problem instance has three satisfying solutions:"
msgstr "이 3-SAT 문제 인스턴스는 다음과 같은 세 가지 해결책을 갖고 있다는 것을 확인할 수 있다."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:76
msgid ":math:`(v_1, v_2, v_3) = (T, F, T)` or :math:`(F, F, F)` or :math:`(T, T, F)`"
msgstr ":math:`(v_1, v_2, v_3) = (T, F, T)` or :math:`(F, F, F)` or :math:`(T, T, F)`"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:78
msgid "Or, expressed using the DIMACS notation:"
msgstr "또는 DIMACS 표기법을 사용하여 표현하시오."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:80
msgid "``1 -2 3``, or ``-1 -2 -3``, or ``1 2 -3``."
msgstr "``1 -2 3`` 혹은 ``-1 -2 -3`` 혹은 ``1 2 -3``."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:82
msgid "With this example problem input, we then create the corresponding ``oracle`` for our ``Grover`` search. In particular, we use the ``LogicalExpressionOracle`` component, which supports parsing DIMACS-CNF format strings and constructing the corresponding oracle circuit."
msgstr "이 예제 문제 입력을 통해 우리는 ``Grover`` 검색을 위해 해당 ``oracle`` 을 작성한다. 특히, 여기에는 ``LogicalExpressionOracle`` 성분을 사용하는데, 이는 DIMACS-CNF 포맷 문자열의 파싱 및 대응하는 oracle 회로를 구성하는 것을 지원한다."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:103
msgid "The ``oracle`` can now be used to create an Grover instance:"
msgstr "이제 Grover 인스턴스를 생성하는 데 ``oracle`` 을 사용할 수 있다."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:124
msgid "We can then configure the backend and run the Grover instance to get the result:"
msgstr "그런 다음 백엔드를 구성하고 Grover 인스턴스를 실행하여 결과를 얻을 수 있다."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:167
msgid "As seen above, a satisfying solution to the specified 3-SAT problem is obtained. And it is indeed one of the three satisfying solutions."
msgstr "위에서 볼 수 있듯이 지정된 3-SAT 문제에 대한 만족스러운 솔루션을 얻는다. 그리고 획득한 솔루션은 실제로 세 가지 만족스러운 솔루션 중 하나이다."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:169
msgid "Since we used the ``'qasm_simulator'``, the complete measurement result is also returned, as shown in the plot below, where it can be seen that the binary strings ``000``, ``011``, and ``101`` (note the bit order in each string), corresponding to the three satisfying solutions all have high probabilities associated with them."
msgstr "``'qasm_simulator'`` 를 사용했기 때문에, 아래의 플롯과 같이 전체 측정 결과도 반환된다. 여기서 바이너리 문자열 ``000``과 ``011``과 ``101`` (각 문자열의 비트 순서에 주의) 들은 모두 이에 대응되는 높은 확률을 갖는 3 개의 만족하는 솔루션에 대응한다."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:200
msgid "Boolean Logical Expressions"
msgstr "불리언(Boolean) 논리 표현식"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:202
msgid "Qiskit’s ``Grover`` can also be used to perform Quantum Search on an ``Oracle`` constructed from other means, in addition to DIMACS. For example, the ``LogicalExpressionOracle`` can actually be configured using arbitrary Boolean logical expressions, as demonstrated below."
msgstr "키스킷의 ``Grover`` 는 또한 DIMM외에 다른 방법으로 구성된 ``Oracle`` 에서 퀀텀 서치(Quantum Search) 를 수행하는 데 사용될 수 있다. 예를 들어, ``LogicalExpressionOracle`` 은 실제로 임의의 불리언 논리식을 사용하여 구성할 수 있다."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:236
msgid "In the example above, the input Boolean logical expression ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` should be quite self-explanatory, where ``^``, ``~``, and ``&`` represent the Boolean logical XOR, NOT, and AND operators, respectively. It should be quite easy to figure out the satisfying solution by examining its parts: ``w ^ x`` calls for ``w`` and ``x`` taking different values; ``~(y ^ z)`` requires ``y`` and ``z`` be the same; ``x & y & z`` dictates all three to be ``True``. Putting these together, we get the satisfying solution ``(w, x, y, z) = (False, True, True, True)``, which our ``Grover``\\ ’s result agrees with."
msgstr "위의 예에서, 입련된 불리언 논리 표현식 ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` 은 상당히 스스로 설명가능(self-explanatory) 해야 하는데, ``^``, ``~``, ``&`` 는 각각 불리언 논리 XOR, NOT, AND 오퍼레이터를 나타낸다. 각 요소들을 살펴보면 만족스러운 솔루션을 쉽게 찾을 수 있다: ``w ^ x`` 는 ``w`` 와 ``x`` 가 서로 다른 값을 갖도록; ``~(y ^ z)`` 는 ``y`` 와 ``z`` 가 같은 값을 갖도록; ``x & y & z`` 는 모든 세 값이 반드시 ``True`` 가 되도록 호출한다. 이를 종합해보면, ``Grover`` 들의 결과와 일치하는 만족스러운 솔루션 ``(w, x, y, z) = (False, True, True, True)`` 를 얻는다."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:249
msgid "TruthTable Oracles"
msgstr "오라클의 진리표"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:251
msgid "With Qiskit, ``Oracle``\\ s can also be constructed from truth tables, meaning we can also perform Quantum Search on truth tables. Even though this might seem like a moot point as we would be essentially searching for entries of a truth table with the :math:`1` value, it’s a good example for demonstrative purpose."
msgstr "키스킷을 사용하면 ``Oracle`` 들 또한 진리표에서 구성될 수 있으며, 이는 또한 진리표에서 Quantum Search를 수행할 수 있다는 것을 의미한다. 진리표에서 :math:`1` 값을 탐색하는 것이 논점(moot point)처럼 보여질 수 있지만, 이는 여전히 설명을 위한 좋은 예이다."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:272
msgid "As shown, the ``truthtable`` is specified with a bitstring containing values of all entries in the table. It has length :math:`16`, so the corresponding truth table is of :math:`4` input bits. Since the very first and last values are :math:`1`, the corresponding truth table target entries are ``0000`` and ``1111``."
msgstr "표시된 바와 같이, ``truthtable`` 은 테이블에 있는 모든 항목의 값을 포함하는 비트 문자열로 지정된다. 길이는 :math:`16`이므로 해당 진리표`는 :math:`4` 입력 비트이다. 첫 번째 값과 마지막 값은 :math:`1` 이므로 해당하는 진리표 목표 항목은 ``0000`` 와 ``1111`` 이다."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:274
msgid "Next, we can setup the ``Oracle`` and ``Grover`` objects to perform Quantum Search as usual."
msgstr "다음으로 ``Oracle`` 와 ``Grover`` 객체를 설정하여 평소와 같이 Quantum Search를 수행할 수 있다."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:307
msgid "As seen in the above plot the search result coincides with our expectation."
msgstr "위에서 볼 수 있는 바와 같이, 검색 결과는 우리의 기대와 일치한다."

