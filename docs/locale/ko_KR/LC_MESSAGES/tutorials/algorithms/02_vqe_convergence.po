msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 17:09+0000\n"
"PO-Revision-Date: 2021-07-08 02:38\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/02_vqe_convergence.po\n"
"X-Crowdin-File-ID: 9446\n"
"Language: ko_KR\n"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:10
msgid "This page was generated from `tutorials/algorithms/02_vqe_convergence.ipynb`__."
msgstr "이 페이지는 `tutorials/algorithms/02_vqe_convergence.ipynb`__ 로부터 생성되었다."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:9
msgid "Monitoring VQE convergence"
msgstr "VQE 수렴 모니터링"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:11
msgid "Variational algorithms in Qiskit, like `VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html>`__ and `QAOA <https://qiskit.org/documentation/stubs/qiskit.algorithms.QAOA.html>`__, provide the option for a user to give a callback method that can be used to monitor optimization progress as the algorithm runs and converges to the minimum. The callback is invoked for each functional evaluation by the optimizer and provides the current optimizer value, evaluation count, current optimizer parameters etc. Note that, depending on the specific optimizer this may not be each iteration (step) of the optimizer, so for example if the optimizer is calling the cost function to compute a finite difference based gradient this will be visible via the callback."
msgstr ""

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:14
msgid "This notebook demonstrates using Qiskit’s VQE algorithm to plot graphs of the convergence path to ground state energy with a selected set of optimizers."
msgstr "이 노트북은 Qiskit의 VQE 알고리즘을 사용하여 선택된 세트의 최적화 프로그램으로 바닥 상태 에너지에 대한 수렴 경로 그래프를 구성하는 방법을 설명한다."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:43
msgid "First we create a qubit operator for VQE. Here we will use the same operator as used in the algorithms introduction, which was originally computed by Qiskit Nature for an H2 molecule."
msgstr "먼저, VQE에 대한 큐비트 연산자를 만든다. 여기서는 앞서 키스킷의 알고리즘 소개에서 사용된 것과 동일한 (H2 분자에 대하여 원래 Qiskit Nature에서 계산된) 연산자를 사용할 것이다."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:68
msgid "We will show the callback usage below over a set of optimizers for comparison. The minimum energy of the H2 Hamiltonian can be found quite easily so we are able to set maxiters to a small value"
msgstr "비교를 위해 일련의 옵티마이저에 대한 콜백 사용법을 아래에서 확인할 수 있다. H2 해밀토니안(Hamiltonian) 의 최소 에너지는 아주 쉽게 찾을 수 있으므로 최대 반복회수(maxiters) 를 작은 값으로 설정할 것이다."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:128
msgid "Now from the callback data we stored we can plot the energy value at each objective function call each optimizer makes. An optimizer using a finite difference method for computing gradient has that characteristic step like plot where for a number of evaluations it is computing the value for close by points to establish a gradient (the close by points having very similar values whose difference cannot be seen on the scale of the graph here)."
msgstr "이제 저장한 콜백 데이터에서 각 옵티마이저가 각각의 목적 함수를 호출하여 발생하는 에너지 값을 그려볼 수 있다. 유한 차분법을 사용하여 기울기를 계산하는 옵티마이저는 수 많은 평가에서 기울기를 설정하기 위해 가까운 지점에 대한 값을 계산하는 plot과 같은 특성 단계를 가진다. (여기 그래프의 눈금에서는 차이를 구별하기 힘들 정도로 매우 유사한 값을 가진 가까운 지점임)"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:163
msgid "Finally since the above problem is still easily tractable classically we can use NumPyMinimumEigensolver to compute a reference value for the solution. We can now plot the difference from the resultant exact solution as the energy converges with VQE towards the minimum value which should be that exact classical solution."
msgstr "마지막으로 위의 문제는 여전히 고전적으로 다루기 쉬우므로 NumPyMinimumEigensolver를 사용하여 솔루션에 대한 참조 값을 계산할 수 있다. 이제 에너지가 VQE에 수렴하며 고전적인 정확한 솔루션(exact solution) 인 최소값으로 이동함에 따라, 이 최소값과 도출된 정확한 솔루션 의 차이를 그릴 수 있다."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:232
msgid "Using Gradient framework"
msgstr "점진적인 프레임워크(Gradient framework) 사용하기"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:234
msgid "Qiskit now has a Gradient framework as part of the Opflow capability. With the gradient computed for the optimizer we now see just the optimization steps themselves."
msgstr "이제 Qiskit은 Opflow기능의 일부로서 점진적인 프레임워크를 갖는다. 최적화 계산된 기울기를 사용하여 이제 최적화 단계 자체만 볼 수 있다."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:315
msgid "Monitoring via the logging"
msgstr "로깅(logging) 을 통한 모니터링"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:317
msgid "Much of the code is instrumented with `Python logging <https://docs.python.org/3/library/logging.html>`__ statements. The logging is configurable to adjust level of logging etc. Here we set the logging level to ``INFO``"
msgstr "대부분의 코드는 `Python logging <https://docs.python.org/3/library/logging.html>`__ 문장들로 되어 있다. 로깅 레벨 등을 조정하도록 로깅을 구성할 수 있다. 여기서 로깅 수준을 ``INFO`` 로 설정한다."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:340
msgid "and at INFO level logging VQE will include information on the evaluations, as below."
msgstr "그리고 INFO level logging에서, VQE는 아래와 같이 평가들에 대한 정보를 포함할 것이다."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:342
msgid "INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.07392554] - 116.41884 (ms), eval count: 1 INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.43698938] - 4.05884 (ms), eval count: 2 INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.74596698] - 7.40194 (ms), eval count: 3 INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.75399268] - 6.61016 (ms), eval count: 4"
msgstr "INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.07392554] - 116.41884 (ms), eval count: 1 INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.43698938] - 4.05884 (ms), eval count: 2 INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.74596698] - 7.40194 (ms), eval count: 3 INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.75399268] - 6.61016 (ms), eval count: 4"

