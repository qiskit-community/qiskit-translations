msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-07 16:27+0000\n"
"PO-Revision-Date: 2020-12-08 19:19\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/02_vqe_convergence.po\n"
"X-Crowdin-File-ID: 9446\n"
"Language: ko_KR\n"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:10
msgid "This page was generated from `tutorials/algorithms/02_vqe_convergence.ipynb`__."
msgstr "이 페이지는 'tutorials/algorithms/02_vqe_convergence.ipynb' 로부터 생성되었다."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/02_vqe_convergence.ipynb>`_."
msgstr "\"BM 퀀텀 랩 <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/02_vqe_convergence.ipynb>\" 에서 대화식으로 실행하십시오."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:9
msgid "Monitoring VQE convergence"
msgstr "VQE 수렴 모니터링"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:11
msgid "Variational algorithms in Qiskit, like `VQE <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.html>`__ and `QAOA <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.QAOA.html>`__, provide the option for a user to give a callback method that can be used to monitor optimization progress as the algorithm runs and converges to the minimum. The callback is invoked for each functional evaluation by the optimizer and provides the current optimizer value, evaluation count, current optimizer parameters etc. Note that, depending on the specific optimizer this may not be each iteration (step) of the optimizer, so for example if the optimizer is calling the cost function to compute a finite difference based gradient this will be visible via the callback."
msgstr ""

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:14
msgid "This notebook demonstrates using Qiskit’s VQE algorithm to plot graphs of the convergence path to ground state energy with a selected set of optimizers."
msgstr ""

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:44
msgid "First we create a qubit operator for VQE. Here we will use the same operator as used in the algorithms introduction, which was originally computed by Qiskit Chemistry for an H2 molecule."
msgstr "먼저, VQE에 대한 쿼비트 연산자를 생성한다. 여기에서는 알고리즘 도입에 사용된 것과 동일한 연산자를 사용할 것이며, 이는 원래 H2 분자에 대한 Qiskit Chemistry에 의해 계산되었다."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:69
msgid "We will show the callback usage below over a set of optimizers for comparison. The minimum energy of the H2 Hamiltonian can be found quite easily so we are able to set maxiters to a small value"
msgstr ""

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:129
msgid "Now from the callback data we stored we can plot the energy value at each objective function call each optimizer makes. An optimizer using a finite difference method for computing gradient has that characteristic step like plot where for a number of evaluations it is computing the value for close by points to establish a gradient (the close by points having very similar values whose difference cannot be seen on the scale of the graph here)."
msgstr ""

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:164
msgid "Finally since the above problem is still easily tractable classically we can use NumPyMinimumEigensolver to compute a reference value for the solution. We can now plot the difference from the resultant exact solution as the energy converges with VQE towards the minimum value which should be that exact classical solution."
msgstr ""

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:233
msgid "Using Gradient framework"
msgstr ""

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:235
msgid "Qiskit now has a Gradient framework as part of the Operator capability. With the gradient computed for the optimizer we now see just the optimization steps themselves."
msgstr ""

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:316
msgid "Monitoring via the logging"
msgstr ""

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:318
msgid "Much of the code is instrumented with `Python logging <https://docs.python.org/3/library/logging.html>`__ statements. The logging is configurable to adjust level of logging etc. An easy way to enable logging in the ``qiskit.aqua`` module is to run the following code, where here we set the logging level to ``INFO``"
msgstr ""

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:343
msgid "and at INFO level logging VQE will include information on the evaluations, as below."
msgstr "그리고 정보 레벨 로깅에서, VQE는 아래와 같이 평가들에 대한 정보를 포함할 것이다."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:345
msgid "``020-11-04 16:55:33,450:qiskit.aqua.algorithms.minimum_eigen_solvers.vqe:INFO: Energy evaluation returned [-8.88931977] - 6801.61572 (ms), eval count: 1 2020-11-04 16:55:34,463:qiskit.aqua.algorithms.minimum_eigen_solvers.vqe:INFO: Energy evaluation returned [-8.88931977] - 1012.12025 (ms), eval count: 2 2020-11-04 16:55:35,483:qiskit.aqua.algorithms.minimum_eigen_solvers.vqe:INFO: Energy evaluation returned [-8.88931977] - 1019.99474 (ms), eval count: 3 2020-11-04 16:55:36,646:qiskit.aqua.algorithms.minimum_eigen_solvers.vqe:INFO: Energy evaluation returned [-8.88931977] - 1162.09555 (ms), eval count: 4``"
msgstr ""

