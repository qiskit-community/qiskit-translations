msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-19 21:43+0000\n"
"PO-Revision-Date: 2021-07-19 22:11\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/09_IQPE.po\n"
"X-Crowdin-File-ID: 9546\n"
"Language: ko_KR\n"

#: ../../tutorials/algorithms/09_IQPE.ipynb:10
msgid "This page was generated from `tutorials/algorithms/09_IQPE.ipynb`__."
msgstr "이 페이지는 `tutorials/algorithms/09_IQPE.ipynb`__ 로부터 생성되었다."

#: ../../tutorials/algorithms/09_IQPE.ipynb:9
msgid "Iterative Quantum Phase Estimation Algorithm"
msgstr "Iterative Quantum Phase Estimation (반복 양자 위상 추정) 알고리즘"

#: ../../tutorials/algorithms/09_IQPE.ipynb:11
msgid "The goal of this tutorial is to understand how the Iterative Phase Estimation (IPE) algorithm works, why would we use the IPE algorithm instead of the QPE (Quantum Phase Estimation) algorithm and how to build it with Qiskit using the same circuit exploiting reset gate and the ``c_if`` method that allows to apply gates conditioned by the values stored in a classical register, resulting from previous measurements."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:13
msgid "**References**"
msgstr "**참조**"

#: ../../tutorials/algorithms/09_IQPE.ipynb:15
msgid "`Section 2 of Lab 4: Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__"
msgstr "`랩 4의 2절: Iterative Phase Estimation (IPE, 반복 위상 추정) 알고리즘 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__"

#: ../../tutorials/algorithms/09_IQPE.ipynb:17
msgid "`Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__"
msgstr "`Ch.3.6 Quantum Phase Estimation (양자 위상 추정) <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__"

#: ../../tutorials/algorithms/09_IQPE.ipynb:42
msgid "Conditioned gates: the c_if method"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:53
msgid "Before starting the IPE algorithm, we will give a brief tutorial about the Qiskit conditional method, c_if, as it goes into building the IPE circuit."
msgstr "IPE 알고리즘을 시작하기 전에, IPE 회로를 만들어 내는 Qiskit 조건부 메서드 c_if에 관한 간단한 튜토리얼을 제공할 것이다."

#: ../../tutorials/algorithms/09_IQPE.ipynb:55
msgid "``c_if`` is a function (actually a method of the gate class) to perform conditioned operations based on the value stored previously in a classical register. With this feature you can apply gates after a measurement in the same circuit conditioned by the measurement outcome."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:57
msgid "For example, the following code will execute the :math:`X` gate if the value of the classical register is :math:`0`."
msgstr "예를 들어, 다음의 코드는 고전 레지스터의 값이 :math:`0` 인 경우에 :math:`X` 게이트를 실행한다."

#: ../../tutorials/algorithms/09_IQPE.ipynb:93
msgid "We highlight that the method c_if expects as the first argument a whole classical register, not a single classical bit (or a list of classical bits), and as the second argument a value in decimal representation (a non-negative integer), not the value of a single bit, 0, or 1 (or a list/string of binary digits)."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:95
msgid "Let’s make another example. Consider that we want to perform a bit flip on the third qubit after the measurements in the following circuit, when the results of the measurement of :math:`q_0` and :math:`q_1` are both :math:`1`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:133
msgid "We want to apply the :math:`X` gate, only if both the results of the measurement of :math:`q_1` and :math:`q_2` are :math:`1`. We can do this using the c_if method, conditioning the application of :math:`X` depending on the value passed as argument to c_if."
msgstr ":math:`q_1` 와 :math:`q_2`의 측정값이 모두 :math:`1` 인 경우에만 :math:`X` 게이트를 적용할 것이다. 이것은 c_if 메서드를 이용하여 c_if에 전달되는 인자 값에 따라 조건부로 :math:`X`를 적용하도록 할 수 있다."

#: ../../tutorials/algorithms/09_IQPE.ipynb:135
msgid "We will have to encode the value to pass to the c_if method such that it will check the values 011 and 111 (in binary representation), since it does not matter what is in the rightmost position."
msgstr "가장 오른쪽 위치에 무엇이 오든 중요하지 않기 때문에, (이진수 표현에서) 011 과 111의 값을 확인하도록 c_if 메서드에 전달될 값을 작성해야 한다."

#: ../../tutorials/algorithms/09_IQPE.ipynb:137
msgid "The 2 integer values in decimal representation:"
msgstr "두 정숫값의 십진수 표현은 다음과 같다:"

#: ../../tutorials/algorithms/09_IQPE.ipynb:148
msgid "|77d3dec6d77747c4b65672b125953337|"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:161
msgid "We can check the solutions using the bin() method in python (the prefix ``0b`` indicates the binary format)."
msgstr "Python의 bin() 메서드를 통해 답을 확인할 수 있다 (접두어 ``0b`` 는 이진수 형식을 나타낸다)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:204
msgid "So we have to apply :math:`X` to :math:`q_2` using c_if two times, one for each value corresponding to 011 and 111."
msgstr "그러므로 값 011 and 111 각각에 해당하도록 :math:`q_2` 에 :math:`X` 를 두 번 적용해야 한다."

#: ../../tutorials/algorithms/09_IQPE.ipynb:247
msgid "IPE"
msgstr "IPE"

#: ../../tutorials/algorithms/09_IQPE.ipynb:249
msgid "The motivation for using the IPE algorithm is that QPE algorithm works fine for short depth circuits but when the circuit starts to grow, it doesn’t work properly due to gate noise and decoherence times."
msgstr "IPE 알고리즘을 사용하는 동기는 QPE 알고리즘이 짧은 회로에는 잘 동작하나 회로가 커지기 시작하면서 게이트 잡음과 결깨짐 시간 때문에 올바르게 동작하지 않는데 있다."

#: ../../tutorials/algorithms/09_IQPE.ipynb:251
msgid "The detailed explanation of how the algorithm works can be found in `Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__. To understand QPE in depth, you can see also `Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__."
msgstr "알고리즘이 어떻게 동작하는지에 대한 자세한 설명은 `Iterative Phase Estimation (IPE, 반복 위상 추정) 알고리즘 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__ 에서 찾을 수 있다. QPE를 심도 있게 이해하려면 `Ch.3.6 Quantum Phase Estimation (양자 위상 추정) <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__ 에서 볼 수 있다."

#: ../../tutorials/algorithms/09_IQPE.ipynb:254
msgid "IPE example with a 1-qubit gate for :math:`U`"
msgstr ":math:`U` 에 대한 1-큐비트 게이트의 IPE 예제"

#: ../../tutorials/algorithms/09_IQPE.ipynb:256
msgid "We want to apply the IPE algorithm to estimate the phase for a 1-qubit operator :math:`U`. For example, here we use the :math:`S`-gate."
msgstr "1-큐비트 연산자 :math:`U` 의 위상을 추정하고자 IPE 알고리즘을 적용하고자 한다. 예를 들어, 여기서는 :math:`S`-게이트를 사용한다."

#: ../../tutorials/algorithms/09_IQPE.ipynb:258
msgid "Let’s apply the IPE algorithm to estimate the phase for :math:`S`-gate. Its matrix is"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:260
msgid " S =\n"
"\\begin{bmatrix}\n"
"1 & 0\\\\\n"
"0 & e^\\frac{i\\pi}{2}\\\\\n"
"\\end{bmatrix}"
msgstr " S =\n"
"\\begin{bmatrix}\n"
"1 & 0\\\\\n"
"0 & e^\\frac{i\\pi}{2}\\\\\n"
"\\end{bmatrix}"

#: ../../tutorials/algorithms/09_IQPE.ipynb:268
msgid "That is, the :math:`S`-gate adds a phase :math:`\\pi/2` to the state :math:`|1\\rangle`, leaving unchanged the phase of the state :math:`|0\\rangle`"
msgstr "이 말은 :math:`S`-게이트는 :math:`|1\\rangle` 상태에 위상 :math:`\\pi/2` 을 더하고, :math:`|0\\rangle` 상태의 위상은 변하지 않게 내버려 둔다"

#: ../../tutorials/algorithms/09_IQPE.ipynb:270
msgid "S|1\\rangle = e^\\frac{i\\pi}{2}|1\\rangle\n\n"
msgstr "S|1\\rangle = e^\\frac{i\\pi}{2}|1\\rangle\n\n"

#: ../../tutorials/algorithms/09_IQPE.ipynb:272
msgid "In the following, we will use the notation and terms used in `Section 2 of lab 4 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__."
msgstr "다음부터는 `랩 4의 2절 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__ 의 표기 및 용법을 사용한다."

#: ../../tutorials/algorithms/09_IQPE.ipynb:274
msgid "Let’s consider to estimate the phase :math:`\\phi=\\frac{\\pi}{2}` for the eigenstate :math:`|1\\rangle`, we should find :math:`\\varphi=\\frac{1}{4}` (where :math:`\\phi = 2 \\pi \\varphi`). Therefore to estimate the phase we need exactly 2 phase bits, i.e. \\ :math:`m=2`, since :math:`1/2^2=1/4`. So :math:`\\varphi=0.\\varphi_1\\varphi_2`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:276
msgid "Remember from the theory that for the IPE algorithm, :math:`m` is also the number of iterations, so we need only :math:`2` iterations or steps."
msgstr "IPE 알고리즘에서 :math:`m` 는 반복 회수이기도 한 점을 기억하라. 따라서 :math:`2` 번의 반복 또는 단계가 필요하다."

#: ../../tutorials/algorithms/09_IQPE.ipynb:278
msgid "First, we initialize the circuit. IPE works with only 1 auxiliary qubit, instead of :math:`m` counting qubits of the QPE algorithm. Therefore, we need 2 qubits, 1 auxiliary qubit and 1 for the eigenstate of :math:`U`-gate, and a classical register of 2 bits, for the phase bits :math:`\\varphi_1`, :math:`\\varphi_2`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:305
#: ../../tutorials/algorithms/09_IQPE.ipynb:704
msgid "First step"
msgstr "첫 번째 단계"

#: ../../tutorials/algorithms/09_IQPE.ipynb:307
msgid "Now we build the quantum circuit for the first step, that is, the first iteration of the algorithm, to estimate the least significant phase bit :math:`\\varphi_m`, in this case :math:`\\varphi_2`. For the first step we have 3 sub-steps: - initialization - application of the Controlled-\\ :math:`U` gates - measure of the auxiliary qubit in x-basis"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:310
#: ../../tutorials/algorithms/09_IQPE.ipynb:709
msgid "Initialization"
msgstr "초기화"

#: ../../tutorials/algorithms/09_IQPE.ipynb:312
msgid "The initialization consists of application the Hadamard gate to the auxiliary qubit and the preparation of the eigenstate :math:`|1\\rangle`."
msgstr "초기화는 Hadamard 게이트를 보조 큐비트에 적용하는 것과 고유 상태 :math:`|1\\rangle` 를 준비하는 것으로 구성되어 있다."

#: ../../tutorials/algorithms/09_IQPE.ipynb:345
#: ../../tutorials/algorithms/09_IQPE.ipynb:744
msgid "Application of the Controlled-\\ :math:`U` gates"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:347
msgid "Then we have to apply :math:`2^t` times the Controlled-\\ :math:`U` operators (see also in the docs `Two qubit gates <https://qiskit.org/documentation/tutorials/circuits/3_summary_of_quantum_operations.html#Two-qubit-gates>`__), that, in this example, is the Controlled-\\ :math:`S` gate (:math:`CS` for short)."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:349
msgid "To implement :math:`CS` in the circuit, since :math:`S` is a phase gate, we can use the controlled phase gate :math:`\\text{CP}(\\theta)`, with :math:`\\theta=\\pi/2`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:381
msgid "Let’s apply :math:`2^t` times :math:`\\text{CP}(\\pi/2)`. Since for the first step :math:`t=m-1`, and :math:`m=2`, we have :math:`2^t=2`."
msgstr ":math:`\\text{CP}(\\pi/2)` 를 :math:`2^t` 번 적용해 보자. 첫 번째 단계에서는 :math:`t=m-1` 과 :math:`m=2` 이므로, :math:`2^t=2` 를 얻을 수 있다."

#: ../../tutorials/algorithms/09_IQPE.ipynb:414
#: ../../tutorials/algorithms/09_IQPE.ipynb:813
msgid "Measure in x-basis"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:416
msgid "Finally, we perform the measurement of the auxiliary qubit in x-basis. So we will define a function to perform the x_measure and then apply it."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:440
msgid "In this way we obtain the phase bit :math:`\\varphi_2` and store it in the classical bit :math:`c_0`."
msgstr "이 방법으로 위상 비트 :math:`\\varphi_2` 를 구하고 이를 고전 비트 :math:`c_0` 에 저장할 수 있다."

#: ../../tutorials/algorithms/09_IQPE.ipynb:472
msgid "Subsequent steps (2nd step)"
msgstr "후속 단계 (두 번째 단계)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:474
msgid "Now we build the quantum circuit for the other remaining steps, in this example, only the second one. In these steps we have 4 sub-steps: the 3 sub-steps as in the first step and, in the middle, the additional step of the phase correction - initialization with reset - phase correction - application of the Control-\\ :math:`U` gates - measure of the auxiliary qubit in x-basis"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:477
#: ../../tutorials/algorithms/09_IQPE.ipynb:852
msgid "Initialization with reset"
msgstr "재설정을 통한 초기화"

#: ../../tutorials/algorithms/09_IQPE.ipynb:479
msgid "As we want to perform an iterative algorithm in the same circuit, we need to reset the auxiliary qubit :math:`q0` after the measument gate and initialize it again as before to recycle the qubit."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:512
#: ../../tutorials/algorithms/09_IQPE.ipynb:885
msgid "Phase correction (for step 2)"
msgstr "위상 보정(2단계)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:514
msgid "As seen in the theory, in order to extract the phase bit :math:`\\varphi_{1}`, we perform a phase correction of :math:`-\\pi\\varphi_2/2`. Of course, we need to apply the phase correction in the circuit only if the phase bit :math:`\\varphi_2=1`, i.e. we have to apply the phase correction of :math:`-\\pi/2` only if the classical bit :math:`c_0` is 1."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:516
msgid "So, after the reset we apply the phase gate :math:`P(\\theta)` with phase :math:`\\theta=-\\pi/2` conditioned by the classical bit :math:`c_0` (:math:`=\\varphi_2`) using the ``c_if`` method. So as we saw in the first part of this tutorial, we have to use the ``c_if`` method with a value of 1, as :math:`1_{10} = 001_{2}` (the subscripts :math:`_{10}` and :math:`_2` indicate the decimal and binary representations)."
msgstr "따라서 초기화 후에는 ``c_if`` 매서드를 사용하여 고전 비트 :math:`c_0` (:math:`=\\varphi_2`) 로 조절된 위상 :math:`\\theta=-\\pi/2` 를 사용하여 위상 게이트 :math:`P(\\theta)` 를 적용한다. 이 튜토리얼의 첫 번째 부분에서 확인한 것처럼, 값이 1인 ``c_if`` 매서드를 :math:`1_{10} = 001_{2}` 로 사용해야 한다(아래에 기입한 :math:`_{10}` 및 :math:`_2` 은 십진수 및 이진수를 나타냄)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:548
#: ../../tutorials/algorithms/09_IQPE.ipynb:921
msgid "Application of the Control-\\ :math:`U` gates and x-measurement (for step 2)"
msgstr "Control-\\ :math:`U` 게이트 및 x 측정 적용(2단계)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:550
msgid "We apply the :math:`CU` operations as we did in the first step. For the second step we have :math:`t=m-2`, hence :math:`2^t=1`. So we apply :math:`\\text{CP}(\\pi/2)` once. And then we perform the x-measurment of the qubit :math:`q_0`, storing the result, the phase bit :math:`\\varphi_1`, in the bit :math:`c_1` of classical register."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:575
msgid "Et voilà, we have our final circuit"
msgstr "마침내! 최종회로가 완성되었다."

#: ../../tutorials/algorithms/09_IQPE.ipynb:605
msgid "Let’s execute the circuit with the ``qasm_simulator``, the simulator without noise that run locally."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:643
msgid "In the picture we have the same histograms but on the left we have on the x-axis the string with phase bits :math:`\\varphi_1`, :math:`\\varphi_2` and on the right the actual phase :math:`\\varphi` in decimal representation."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:645
msgid "As we expected we have found :math:`\\varphi=\\frac{1}{4}=0.25` with a :math:`100\\%` probability."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:657
msgid "IPE example with a 2-qubit gate"
msgstr "2-큐비트 게이트의 IPE 예제"

#: ../../tutorials/algorithms/09_IQPE.ipynb:659
msgid "Now, we want to apply the IPE algorithm to estimate the phase for a 2-qubit gate :math:`U`. For this example, let’s consider the controlled version of the :math:`T` gate, i.e. the gate :math:`U=\\textrm{Controlled-}T` (that from now we will express more complactly with :math:`CT`). Its matrix is"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:661
msgid " CT =\n"
"\\begin{bmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^\\frac{i\\pi}{4}\\\\\n"
"\\end{bmatrix}"
msgstr " CT =\n"
"\\begin{bmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^\\frac{i\\pi}{4}\\\\\n"
"\\end{bmatrix}"

#: ../../tutorials/algorithms/09_IQPE.ipynb:671
msgid "That is, the :math:`CT` gate adds a phase :math:`\\pi/4` to the state :math:`|11\\rangle`, leaving unchanged the phase of the other computational basis states :math:`|00\\rangle`, :math:`|01\\rangle`, :math:`|10\\rangle`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:673
msgid "Let’s consider to estimate the phase :math:`\\phi=\\pi/4` for the eigenstate :math:`|11\\rangle`, we should find :math:`\\varphi=1/8`, since :math:`\\phi = 2 \\pi \\varphi`. Therefore to estimate the phase we need exactly 3 classical bits, i.e. \\ :math:`m=3`, since :math:`1/2^3=1/8`. So :math:`\\varphi=0.\\varphi_1\\varphi_2\\varphi_3`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:675
msgid "As done with the example for the 1-qubit :math:`U` operator we will go through the same steps but this time we will have :math:`3` steps since :math:`m=3`, and we will not repeat all the explanations. So for details see the above example for 1-qubit :math:`U` gate."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:677
msgid "First, we initialize the circuit with 3 qubits, 1 for the auxiliary qubit and 2 for the 2-qubit gate, and 3 classical bits to store the phase bits :math:`\\varphi_1`, :math:`\\varphi_2`, :math:`\\varphi_3`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:706
msgid "Now we build the quantum circuit for the first step, to estimate the least significant phase bit :math:`\\varphi_m=\\varphi_3`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:711
msgid "We initialize the auxiliary qubit and the other qubits with the eigenstate :math:`|11\\rangle`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:746
msgid "Then we have to apply multiple times the :math:`CU` operator, that, in this example, is the Controlled-\\ :math:`CT` gate (:math:`CCT` for short)."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:748
msgid "To implement :math:`CCT` in the circuit, since :math:`T` is a phase gate, we can use the multi-controlled phase gate :math:`\\text{MCP}(\\theta)`, with :math:`\\theta=\\pi/4`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:780
msgid "Let’s apply :math:`2^t` times :math:`\\text{MCP}(\\pi/4)`. Since for the first step :math:`t=m-1` and :math:`m=3`, we have :math:`2^t=4`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:815
msgid "Finally, we perform the measurenment of the auxiliary qubit in x-basis. We can use the ``x_measurement`` function defined above in the example for 1-qubit gate. In this way we have obtained the phase bit :math:`\\varphi_3` and stored it in the classical bit :math:`c_0`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:847
msgid "Subsequent steps (2nd, 3rd)"
msgstr "후속 단계 (2차, 3차)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:849
msgid "Now we build the quantum circuit for the other remaining steps, the second and the third ones. As said in the first example, in these steps we have the additional sub-step of the phase correction."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:887
msgid "In order to extract the phase bit :math:`\\varphi_{2}`, we perform a phase correction of :math:`-\\pi\\varphi_3/2`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:889
msgid "So, after the reset we apply the phase gate :math:`P(\\theta)` with phase :math:`\\theta=-\\pi/2` conditioned by the classical bit :math:`c_0` (:math:`=\\varphi_3`)."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:923
msgid "We apply the :math:`CU` operations as we did in the first step. For the second step we have :math:`t=m-2`, hence :math:`2^t=2`. So we apply :math:`\\text{MCP}(\\pi/4)` :math:`2` times. And then we perform the x-measurement of the qubit :math:`q_0`, storing the phase bit :math:`\\varphi_2` in the bit :math:`c_1`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:957
msgid "All substeps of the 3rd step"
msgstr "3단계의 모든 하위 단계"

#: ../../tutorials/algorithms/09_IQPE.ipynb:959
msgid "For the 3rd and last step, we perform the reset and initialization of the auxiliary qubit as done in the second step."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:961
msgid "Then at the 3rd step we have to perform the phase correction of :math:`-2\\pi 0.0\\varphi_{2}\\varphi_{3}= -2\\pi \\left(\\frac{\\varphi_2}{4}+\\frac{\\varphi_3}{8}\\right)=-\\frac{\\varphi_2\\pi}{2}-\\frac{ \\varphi_3\\pi}{4}`, thus we have to apply 2 conditioned phase corrections, one conditioned by :math:`\\varphi_3` (:math:`=c_0`) and the other by :math:`\\varphi_2`\\ (:math:`=c_1`). To do this we have to apply the following: - gate :math:`P(-\\pi/4)` conditioned by :math:`c_0=1`, that is, by :math:`c=001` (c_if with value 1) - gate :math:`P(-\\pi/2)` conditioned by :math:`c_1=1`, that is, the gate is applied when :math:`c=010` (c_if with values :math:`2`) - gate :math:`P(-3\\pi/4)` conditioned by :math:`c_1=1` and :math:`c_0=1` that is, the gate is applied when :math:`c=011` (c_if with values :math:`3`)"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:964
msgid "Next, the :math:`CU` operations: we apply :math:`2^t` times the :math:`\\text{MCP}(\\pi/4)` gate and since at the 3rd step :math:`t=m-3=0`, we apply the gate only once."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:1012
msgid "Now, we execute the circuit with the simulator without noise."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:1049
msgid "We have obtained :math:`100\\%` probability to find :math:`\\varphi=0.125`, that is, :math:`1/8`, as expected."
msgstr ""

