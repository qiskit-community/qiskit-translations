msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-10 14:06+0000\n"
"PO-Revision-Date: 2021-06-18 17:01\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/04_vqe_advanced.po\n"
"X-Crowdin-File-ID: 9450\n"
"Language: ko_KR\n"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:10
msgid "This page was generated from `tutorials/algorithms/04_vqe_advanced.ipynb`__."
msgstr "이 페이지는 `tutorials/algorithms/04_vqe_advanced.ipynb`__ 에서 생성되었다."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/04_vqe_advanced.ipynb>`_."
msgstr "`IBM 퀀텀 랩 <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/04_vqe_advanced.ipynb>`_ 에서 대화식으로 실행하시오."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:9
msgid "Advanced VQE usage"
msgstr "VQE 활용 심화"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:11
msgid "There exist several parameters for configuring and using more advanced `VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html>`__ capabilities. This tutorial will cover the parameters such as ``initial point``, ``expectation`` and ``gradient``."
msgstr "심화된 `VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html>`__ 기능을 구성하고 사용하기 위한 몇 가지 매개변수가 있다. 본 사용 지침서에서는 ``initial_point``, ``expectation``, ``gradient`` 등의 매개변수를 다룰 것이다."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:13
msgid "It will also cover advanced simulator use such as using Aer with the Matrix Product State method."
msgstr "또한 Matrix Product State 방법과 함께 에어(Aer) 를 사용하는 것과 같은 고급 시뮬레이터 사용에 대해서도 다룬다."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:39
msgid "Here we will use the same operator as used in the other VQE algorithms tutorials."
msgstr "여기서는 다른 VQE 알고리즘 사용 지침서에서 사용된 것과 동일한 연산자를 사용한다."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:65
msgid "Initial point"
msgstr "초기 지점"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:67
msgid "The ``initial_point`` parameter allows the optimization to begin at the given point, where the point is a list of parameters that will configure the ansatz. By default the initial point is ``None`` which means that VQE will choose one. The choice in in this case is if the supplied ansatz has a preferred point, based on the initial state provided to it, then this will be chosen, otherwise a random initial point that fits with any bounds the ansatz has will be chosen. If an initial point is supplied it will take priority though and be used - note though it must match in length to the number of parameters in the ansatz circuit."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:70
msgid "Why to use a initial point? One reason would be if you have guess a reasonable starting point for the problem or perhaps know have information from a prior experiment."
msgstr "초기 지점을 사용하는 이유는 무엇인가? 한 가지 이유는 문제에 대한 합리적인 시작 지점을 추측할 수 있었거나 이전 실험을 통해 얻은 정보가 있는 경우일 것이다."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:72
msgid "To demonstrate the use let’s first simply repeat the first working example from the `algorithms introduction <01_algorithms_introduction.ipynb#A-complete-working-example>`__ tutorial to get a solution’s optimal point."
msgstr "사용법을 보여주기 위하여 먼저 `키스킷의 알고리즘 소개 <01_algorithms_introduction.ipynb#A-complete-working-example>`__ 사용 지침서의 첫 번째 예제를 단순 반복하여 솔루션의 최적 지점을 얻는다."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:155
msgid "Now we can take the ``optimal_point`` from the above result and use it as the ``initial_point`` here."
msgstr "이제 위의 결과에서 ``optimal_point`` 를 가져와 여기에서 ``initial_point`` 로 사용할 수 있다."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:245
msgid "Here we see that result was arrived at much more quickly with ``optimizer_evals`` when it started from a random value when the initial point was not supplied (default of None)."
msgstr "여기서 우리는 초기 점(기본값: None) 이 제공되지 않았을 때 임의의 값에서 시작되었을 때 ``optimizer_evals`` 와 함께 결과가 훨씬 더 빨리 도착했음을 알 수 있다."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:247
msgid "Where this becomes useful for examples where we the solution to one problem can be used to for a guess for the solution to a very close similar problem. Chemistry is very good example where we change the inter-atomic distance(s) of molecule to plot a dissociation profile. When the distance changes are small we expect the solution to still be nearby the prior one. One technique is to simply use the optimal point from one solution as the starting point for the next step. Now more complex techniques are possible that do some extrapolation to compute an initial position based on prior solution(s) rather than directly use the prior solution."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:260
msgid "Expectation"
msgstr "기대"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:262
msgid "The energy of the Hamiltonian operator that VQE is working on is the expectation value when evaluated with the parameterized ansatz. To compute the expectation value VQE uses an instance of an `expectation <https://qiskit.org/documentation/apidoc/qiskit.opflow.expectations.html>`__ object. Such an instance may be supplied via the ``expectation`` parameter, or in the default case, where it has a value of ``None``, VQE will use the `ExpectationFactory <https://qiskit.org/documentation/stubs/qiskit.opflow.expectations.ExpectationFactory.html>`__ to create itself a suitable instance based on the supplied backend."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:265
msgid "For most cases letting VQE create a suitable instance is sufficient. However the Qiskit Aer aer_simulator supports a snapshot instruction that can be used in conjunction with the operator expectation computation. If used then the outcome is ideal, i.e. like the statevector simulator, and has no shot noise. Since people normally choose the aer_simulator to have shot noise (sampling noise), and be more like a real-device outcome, VQE has an ``include_custom`` flag that is passed on to the ExpectationFactory. When using Aer qasm simulator, and this is set ``True``, the factory will return ``AerPauliExpectation`` which uses the snapshot instruction, when ``False``, default, then the regular ``PauliExpectation`` is returned."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:268
msgid "The following example shows ``include_custom=True`` where the outcome matches the statevector simulator. In fact it can be better/faster to do this than use the statevector_simulator directly. This is because in the latter case when the Hamiltonian is a sum of Paulis it must be converted to matrix form, and this is avoided when using the snapshot instruction done when include_custom is True."
msgstr "다음 예제는 결과가 상태 벡터 시뮬레이터와 일치하는 ``include_custom=True`` 를 보여준다. 사실 statevector_simulator를 직접 사용하는 것보다 이 작업을 수행하는 것이 더 좋고/빠를 수 있다. 이는 (Pauli 합인 Hamiltonian이 행렬 형식으로 변환되어야 하는) 후자의 경우, include_custom이 True일 때 snapshot 명령을 수행하면 이를 방지할 수 있기 때문이다."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:350
msgid "In case you have doubts here is the aer_simulator again but include_custom has been left to default to False. The optimization ended abruptly, presumably due to the shot noise confusing the SLSQP optimizer."
msgstr "여기에 의문이 있는 경우에는 aer_simulator를 다시 사용하지만 include_custom은 디폴트인 False로 둔다. SLSQP 옵티마이저가 최적화를 수행하던 중 샷 노이즈로 인하여 최적화가 갑자기 종료되었다."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:443
msgid "Changing the optimizer to SPSA, which is designed to work in noisy environments, gets us a better result. Though the noise has affected the outcome so it’s not as accurate."
msgstr "노이즈 환경에서 작동하도록 설계된 SPSA로 옵티마이저를 변경하면 더 좋을 결과를 얻을 수 있다. 그렇지만 노이즈가 결과에 영향을 주었기 때문에 정확하지는 않다."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:524
msgid "As mentioned above, an expectation object can be explicitly given (so the internal ``ExpectationFactory`` and include_custom are never used/needed. Below we create an ``AerPauliExpectation`` and pass this to VQE. We can see the result matches that above where we set include_custom to True and let VQE create its own expectation object."
msgstr "위에서 언급했듯이 expectation 객체는 명시적으로 주어질 수 있다 (따라서 내부의 ``ExpectationFactory`` 와 include_custom은 사용되지 않으며 필요하지도 않음). 아래에서는 ``AerPauliExpectation`` 를 생성하고 이를 VQE에 전달한다. 이때 결과는 include_custom을 True로 설정하고 VQE가 자체적으로 expectation 객체를 생성하도록 설정하였을 때의 결과와 일치하는 것을 확인할 수 있다."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:606
msgid "By default, the ``PauliExpectation`` object, that would have be chosen when include_custom is False (or when using Aer aer_simulator, or a real device) groups Paulis into commuting sets. This is efficient as it runs less circuits to compute the expectation. However, if for some reason you wanted to run a circuit for each Pauli then then grouping can be turned off when constructing the PauliExpectation. You need to explicitly pass in such an expectation instance to VQE to have it work this way though as shown below."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:690
msgid "Gradient"
msgstr "구배"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:692
msgid "Optimizers that use a gradient-based technique can be supplied with a user defined gradient that will be used instead of their default gradient computation which is usually done by simple finite difference. Gradients are passed indirectly via to the optimizer via its ``gradient`` parameter."
msgstr "그래디언트를 기반으로한 기술을 사용하는 옵티마이저는 기본적으로 제공된 단순 유한 차분(simple finite difference) 으로 수행되는 그래디언트 계산 방식 대신에 사용자가 정의한 그래디언트가 제공될 수 있다. 그래디언트는 ``gradient`` 매개 변수를 통해 옵티마이저로 간접적으로 전달된다."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:694
msgid "As the use of a user supplied ``gradient`` was shown in the `Monitoring VQE Convergence <02_vqe_convergence.ipynb#Using-Gradient-framework>`__ tutorial I will simply refer you there. Also the `Gradients framework <../operators/02_gradients_framework.ipynb>`__ tutorial has much more about the gradients themselves."
msgstr "사용자에 의하여 제공된 ``gradient`` 를 사용하는 방법은 `VQE 수렴 모니터링 <02_vqe_convergence.ipynb#Using-Gradient-framework>`__ 사용 지침서를 참조하도록 한다. 또한 `Gradients framework <../operators/02_gradients_framework.ipynb>`__ 사용 지침서에는 그라디언트 자체에 대하여 자세히 설명한다."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:706
msgid "Quantum Instance and advanced simulation"
msgstr "양자 인스턴스 및 고급 시뮬레이션"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:708
msgid "While you may be familiar with passing a QuantumInstancen created from a ``aer_simulator_statevector`` a ``aer_simulator`` or real device backend, it is possible to use the advanced simulation modes of Aer too when applicable. For instance we can easily use the Aer `Matrix Product State <../simulators/7_matrix_product_state_method.ipynb>`__ method, that has the potential to scale to larger numbers of qubits."
msgstr ""

