msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-07 16:27+0000\n"
"PO-Revision-Date: 2020-12-20 20:23\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/07_grover.po\n"
"X-Crowdin-File-ID: 9456\n"
"Language: ko_KR\n"

#: ../../tutorials/algorithms/07_grover.ipynb:10
msgid "This page was generated from `tutorials/algorithms/07_grover.ipynb`__."
msgstr "이 페이지는 `tutorials/algorithms/07_grover.ipynb`__ 에서 생성되었다."

#: ../../tutorials/algorithms/07_grover.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/07_grover.ipynb>`_."
msgstr "`IBM 퀀텀 랩 <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/07_grover.ipynb>`_ 에서 대화식으로 실행하시오."

#: ../../tutorials/algorithms/07_grover.ipynb:9
msgid "Grover’s Algorithm and Amplitude Amplification"
msgstr "Grover 알고리즘 및 확률진폭 증폭"

#: ../../tutorials/algorithms/07_grover.ipynb:11
msgid "Grover’s algorithm is one of the most famous quantum algorithms introduced by Lov Grover in 1996 [1]. It has initially been proposed for unstructured search problems, i.e. for finding a marked element in a unstructured database. However, Grover’s algorithm is now a subroutine to several other algorithms, such as Grover Adaptive Search [2]. For the details of Grover’s algorithm, please see `Grover’s Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ in the Qiskit textbook."
msgstr "Grover의 알고리즘은 1996년 [1]에서 Lov Grover가 도입한 가장 유명한 양자 알고리즘 중 하나이다. 구조화되지 않은 데이터베이스에서 표시된 요소를 찾기 위해 구조화되지 않은 검색 문제점에 대해 처음에 제안되었다. 하지만 Grover의 알고리즘은 이제 Grover Adaptive Search [2]와 같은 여러 다른 알고리즘의 서브루틴이다. Grover의 알고리즘에 대한 자세한 내용은 Qiskit 교재에서 `Grover's Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ 을 참조하기 바란다."

#: ../../tutorials/algorithms/07_grover.ipynb:13
msgid "Qiskit implements Grover’s algorithm in the ``Grover`` class. This class also includes the generalized version, Amplitude Amplification [3], and allows setting individual iterations and other meta-settings to Grover’s algorithm."
msgstr "Qiskit은 ``Grover`` 클래스에서 Grover의 알고리즘을 구현한다. 이 클래스에는 일반화된 버전인 확률진폭 증폭 [3] 이 포함되며, 개별 반복 및 기타 메타 설정을 Grover의 알고리즘으로 설정할 수 있다."

#: ../../tutorials/algorithms/07_grover.ipynb:15
#: ../../tutorials/algorithms/07_grover.ipynb:723
msgid "**References:**"
msgstr "**참조:**"

#: ../../tutorials/algorithms/07_grover.ipynb:17
msgid "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219."
msgstr "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219."

#: ../../tutorials/algorithms/07_grover.ipynb:19
msgid "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"
msgstr "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"

#: ../../tutorials/algorithms/07_grover.ipynb:21
msgid "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"
msgstr "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"

#: ../../tutorials/algorithms/07_grover.ipynb:33
msgid "Grover’s algorithm"
msgstr "그로버 알고리즘"

#: ../../tutorials/algorithms/07_grover.ipynb:35
msgid "Grover’s algorithm uses the Grover operator :math:`\\mathcal{Q}` to amplify the amplitudes of the good states:"
msgstr "Grover의 알고리즘은 Grover 연산자 :math:`\\mathcal{Q}` 를 사용하여 우수한 상태의 진폭을 확대한다."

#: ../../tutorials/algorithms/07_grover.ipynb:37
msgid "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"
msgstr "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"

#: ../../tutorials/algorithms/07_grover.ipynb:42
msgid "Here, \\* :math:`\\mathcal{A}` is the initial search state for the algorithm, which is just Hadamards, :math:`H^{\\otimes n}` for the textbook Grover search, but can be more elaborate for Amplitude Amplification \\* :math:`\\mathcal{S_0}` is the reflection about the all 0 state"
msgstr ""

#: ../../tutorials/algorithms/07_grover.ipynb:44
msgid "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"
msgstr "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"

#: ../../tutorials/algorithms/07_grover.ipynb:49
msgid "\\* :math:`\\mathcal{S_f}` is the oracle that applies"
msgstr "\\* :math:`\\mathcal{S_f}` 는 적용될 오라클을 의미하고"

#: ../../tutorials/algorithms/07_grover.ipynb:51
msgid "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"
msgstr "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"

#: ../../tutorials/algorithms/07_grover.ipynb:56
msgid "where :math:`f(x)` is 1 if :math:`x` is a good state and otherwise 0."
msgstr "여기서 :math:`x` 가 바람직한 상태일 때, :math:`f(x)` 는 1이고, 그렇지 않으면 0이다."

#: ../../tutorials/algorithms/07_grover.ipynb:58
msgid "In a nutshell, Grover’s algorithm applies different powers of :math:`\\mathcal{Q}` and after each execution checks whether a good solution has been found."
msgstr "간단히 말해서, 그로버 알고리즘은 :math:`\\mathcal{Q}` 에 다양한 지수(power)를 적용하여 실행 후, 각 실행에서 좋은 솔루션이 있는지를 확인한다."

#: ../../tutorials/algorithms/07_grover.ipynb:61
msgid "Running Grover’s algorithm"
msgstr "그로버 알고리즘 실행하기"

#: ../../tutorials/algorithms/07_grover.ipynb:63
msgid "To run Grover’s algorithm with the ``Grover`` class, firstly, we need to specify an oracle for the circuit of Grover’s algorithm. In the following example, we use ``QuantumCircuit`` as the oracle of Grover’s algorithm. However, there are several other class that we can use as the oracle of Grover’s algorithm. We talk about them later in this tutorial."
msgstr "Grover의 알고리즘을 ``Grover`` 클래스로 실행하려면 먼저 Grover의 알고리즘 회로에 oracle을 지정해야 한다. 다음 예에서 우리는 ``QuantumCircuit`` 를 Grover의 알고리즘의 장으로 사용한다. 하지만, 우리가 Grover의 알고리즘의 oracle로 사용할 수 있는 몇 가지 다른 클래스가 있다. 이 튜토리얼에서 나중에 설명한다."

#: ../../tutorials/algorithms/07_grover.ipynb:65
msgid "Note that the oracle for ``Grover`` mush be a *phase-flip* oracle. That is, it multiplies the amplitudes of the of “good states” by a factor of :math:`-1`. We explain later how to convert a *bit-flip* oracle to a phase-flip oracle."
msgstr "``Grover`` 오라클에는 *phase-flip* oracle이 있다는 것을 주목하라. 즉, “좋은 상태“ 의 진폭을 :math:`-1` 로 곱하는 것이다. 우리는 나중에 다시 한 번 *비트-플립* oracle을 위상-플립으로 변환하는 방법을 설명한다."

#: ../../tutorials/algorithms/07_grover.ipynb:120
msgid "Then, we specify a backend and call the ``run`` method of ``Grover`` with a backend to execute the circuits. The returned result type is a ``GroverResult``."
msgstr "다음으로, 백엔드를 지정하고 ``Grover`` 의 ``run`` 메서드를 백엔드와 함께 호출하여 회로를 실행한다. 반환된 결과 유형은 ``GroverResult`` 이다."

#: ../../tutorials/algorithms/07_grover.ipynb:122
msgid "If the search was successful, the ``oracle_evaluation`` attribute of the result will be ``True``. In this case, the most sampled measurement, ``top_measurement``, is one of the “good states”. Otherwise, ``oracle_evaluation`` will be False."
msgstr "만약 검색이 성공하면 도출된 결과의 ``oracle_evaluation`` 속성은 ``True`` 가 될 것이다. 이 경우에는, 가장 샘플화된 측정인 ``top_measurement`` 는 “좋은 상태” 중 하나이다. 그렇지 않으면 ``oracle_evaluation`` 은 거짓이 될 것이다."

#: ../../tutorials/algorithms/07_grover.ipynb:176
msgid "In the example, the result of ``top_measurement`` is ``11`` which is one of “good state”. Thus, we succeeded to find the answer by using ``Grover``."
msgstr "예를 들어,``top_measurement`` 의 결과는``11`` 입니다.``11`` 은 좋은 상태 중 하나입니다. 그래서 우리는 ``Grover`` 를 이용해 답을 찾는 데 성공했다."

#: ../../tutorials/algorithms/07_grover.ipynb:188
msgid "Using the different types of classes as the oracle of ``Grover``"
msgstr "다양한 유형의 클래스를 ``Grover`` 의 오라클로 사용하기"

#: ../../tutorials/algorithms/07_grover.ipynb:190
msgid "In the above example, we used ``QuantumCircuit`` as the oracle of ``Grover``. However, we can also use ``qiskit.aqua.components.oracles.Oracle``, and ``qiskit.quantum_info.Statevector`` as oracles. All the following examples are when :math:`|11\\rangle` is “good state”"
msgstr "위의 예에서 우리는 ``QuantumCircuit`` 를 ``Grover`` 의 오라클로 사용했다. 그러나 우리는 또한 ``qiskit.aqua.components.oracles.Oracle`` , 과 ``qiskit.quantum_info.Statevector`` 를 오라클로 사용할 수도 있다. 다음의 예제들은 모두 :math:`|11\\rangle` 가 “좋은 상태” 인 예제들이다."

#: ../../tutorials/algorithms/07_grover.ipynb:244
msgid "Internally, the statevector is mapped to a quantum circuit:"
msgstr "내부적으로 상태 벡터는 다음과 같이 퀀텀 회로에 나타낸다."

#: ../../tutorials/algorithms/07_grover.ipynb:274
msgid "The ``Oracle`` components in Qiskit Aqua allow for an easy construction of more complex oracles. The ``Oracle`` type has the interesting subclasses: \\* ``LogicalExpressionOracle``: for parsing logical expressions such as ``'~a | b'``. This is especially useful for solving 3-SAT problems and is shown in the accompanying `Grover Examples <08_grover_examples.ipynb>`__ tutorial. \\* ``TrutheTableOracle``: for converting binary truth tables to circuits"
msgstr ""

#: ../../tutorials/algorithms/07_grover.ipynb:276
msgid "Here we’ll use the ``LogicalExpressionOracle`` for the simple example of finding the state :math:`|11\\rangle`, which corresponds to ``'a & b'``."
msgstr "여기서는 ``'a & b'`` 에 해당하는 상태 :math:`|11\\rangle` 를 찾는 간단한 예제로 ``LogicalExpressionOracle`` 을 사용한다."

#: ../../tutorials/algorithms/07_grover.ipynb:312
msgid "You can observe, that this oracle is actually implemented with three qubits instead of two!"
msgstr "여러분은 이것이 실제로 2개가 아니라 3개의 큐비트로 구현된다는 것을 관찰할 수 있습니다!"

#: ../../tutorials/algorithms/07_grover.ipynb:314
msgid "That is because the ``LogicalExpressionOracle`` is not a phase-flip oracle (which flips the phase of the good state) but a bit-flip oracle. This means it flips the state of an auxiliary qubit if the other qubits satisfy the condition. For Grover’s algorithm, however, we require a phase-flip oracle. To convert the bit-flip oracle to a phase-flip oracle we sandwich the controlled-NOT by :math:`X` and :math:`H` gates, as you can see in the circuit above."
msgstr ""

#: ../../tutorials/algorithms/07_grover.ipynb:316
msgid "**Note:** This transformation from a bit-flip to a phase-flip oracle holds generally and you can use this to convert your oracle to the right representation."
msgstr "**참고:** 비트-플립에서 위상-플립 오라클로의 이러한 변환은 일반적으로 유지되며, 이를 사용하여 오라클을 올바른 표현으로 변환할 수 있다."

#: ../../tutorials/algorithms/07_grover.ipynb:328
msgid "Amplitude amplification"
msgstr "진폭 증폭"

#: ../../tutorials/algorithms/07_grover.ipynb:330
msgid "Grover’s algorithm uses Hadamard gates to create the uniform superposition of all the states at the beginning of the Grover operator :math:`\\mathcal{Q}`. If some information on the good states is available, it might be useful to not start in a uniform superposition but only initialize specific states. This, generalized, version of Grover’s algorithm is referred to *Amplitude Amplification*."
msgstr ""

#: ../../tutorials/algorithms/07_grover.ipynb:332
msgid "In Qiskit, the initial superposition state can easily be adjusted by setting the ``state_preparation`` argument."
msgstr "키스킷에서 초기 중첩 상태는 ``state_preparation`` 인수를 설정하여 쉽게 조정할 수 있다."

#: ../../tutorials/algorithms/07_grover.ipynb:335
msgid "State preparation"
msgstr "상태 준비"

#: ../../tutorials/algorithms/07_grover.ipynb:337
msgid "A ``state_preparation`` argument is used to specify a quantum circuit that prepares a quantum state for the start point of the amplitude amplification. By default, a circuit with $H^{:nbsphinx-math:`\\otimes `n} $ is used to prepare uniform superposition (so it will be Grover’s search). The diffusion circuit of the amplitude amplification reflects ``state_preparation`` automatically."
msgstr "진폭 증폭의 시작점에 대해 양자 상태를 준비하는 양자 회로를 지정하기 위해 ``state_preparation`` 인수를 사용한다. 기본적으로 $H^{:nbsphinx-math:`\\otimes `n} $ 를 사용하는 회로는 중첩상태 준비하는 데 사용된다 (그로버의 검색이 됨). 진폭 증폭의 확산 회로는 ``state_preparation`` 를 자동적으로 반영한다."

#: ../../tutorials/algorithms/07_grover.ipynb:442
msgid "Full flexibility"
msgstr "유연성"

#: ../../tutorials/algorithms/07_grover.ipynb:444
msgid "For more advanced use, it is also possible to specify the entire Grover operator by setting the ``grover_operator`` argument. This might be useful if you know more efficient implementation for :math:`\\mathcal{Q}` than the default construction via zero reflection, oracle and state preparation."
msgstr "고급 사용을 위해서는``grover_operator`` 인수를 설정하여 전체 Grover 연산자를 지정할 수도 있다. 이는 0을 기준으로 한 반사, oracle및 상태 준비를 통해 기본 구성보다 :math:`\\mathcal{Q}` 의 효율적인 구현을 알고 있는 경우에 유용할 수 있습니다."

#: ../../tutorials/algorithms/07_grover.ipynb:446
msgid "The ``qiskit.circuit.library.GroverOperator`` can be a good starting point and offers more options for an automated construction of the Grover operator. You can for instance \\* set the ``mcx_mode`` \\* ignore qubits in the zero reflection by setting ``reflection_qubits`` \\* explicitly exchange the :math:`\\mathcal{S_f}, \\mathcal{S_0}` and :math:`\\mathcal{A}` operations using the ``oracle``, ``zero_reflection`` and ``state_preparation`` arguments"
msgstr ""

#: ../../tutorials/algorithms/07_grover.ipynb:457
msgid "For instance, imagine the good state is a three qubit state :math:`|111\\rangle` but we used 2 additional qubits as auxiliary qubits."
msgstr "예를 들어, 좋은 상태는 3개의 큐비트 상태 ( :math:`|111\\rangle`) 이지만, 2개의 추가적인 큐비트를 사용했다고 가정하자."

#: ../../tutorials/algorithms/07_grover.ipynb:491
msgid "Then, per default, the Grover operator implements the zero reflection on all five qubits."
msgstr "그 다음, 기본적으로, Grover 연산자는 5개의 모든 큐비트에 대해 0반사를 구현한다."

#: ../../tutorials/algorithms/07_grover.ipynb:522
msgid "But we know that we only need to consider the first three:"
msgstr "하지만 우리는 처음 세 가지를 고려해야 한다는 것을 알고 있다."

#: ../../tutorials/algorithms/07_grover.ipynb:554
msgid "Dive into other arguments of ``Grover``"
msgstr "``Grover`` 의 여러 인수들에 대하여 알아보기"

#: ../../tutorials/algorithms/07_grover.ipynb:556
msgid "``Grover`` has arguments other than ``oracle`` and ``state_preparation``. We will explain them in this section."
msgstr "``Grover`` 는 ``oracle`` 와 ``state_preparation`` 이외에도 여러 인수들을 가지고 있다. 이 섹션에서는 이에 대하여 설명할 것이다."

#: ../../tutorials/algorithms/07_grover.ipynb:559
msgid "Specifying ``good_state``"
msgstr "``good_state`` 를 지정하기"

#: ../../tutorials/algorithms/07_grover.ipynb:561
msgid "``good_state`` is used to check whether the measurement result is correct or not internally. It can be a list of binary strings, a list of integer, ``Statevector``, and Callable. If the input is a list of bitstrings, each bitstrings in the list represents a good state. If the input is a list of integer, each integer represent the index of the good state to be :math:`|1\\rangle`. If it is a ``Statevector``, it represents a superposition of all good states."
msgstr ""

#: ../../tutorials/algorithms/07_grover.ipynb:715
msgid "The number of ``iterations``"
msgstr "``iterations`` 의 횟수"

#: ../../tutorials/algorithms/07_grover.ipynb:717
msgid "The number of repetition of applying the Grover operator is important to obtain the correct result with Grover’s algorithm. The number of iteration can be set by the ``iteration`` argument of ``Grover``. The following inputs are supported: \\* an integer to specify a single power of the Grover operator that’s applied \\* or a list of integers, in which all these different powers of the Grover operator are run consecutively and after each time we check if a correct solution has been found"
msgstr ""

#: ../../tutorials/algorithms/07_grover.ipynb:719
msgid "Additionally there is the ``sample_from_iterations`` argument. When it is ``True``, instead of the specific power in ``iterations``, a random integer between 0 and the value in ``iteration`` is used as the power Grover’s operator. This approach is useful when we don’t even know the number of solution."
msgstr ""

#: ../../tutorials/algorithms/07_grover.ipynb:721
msgid "For more details of the algorithm using ``sample_from_iterations``, see [4]."
msgstr "``sample_from_iterations`` 를 사용하는 알고리즘에 대한 자세한 내용은 [4] 를 참조하시오."

#: ../../tutorials/algorithms/07_grover.ipynb:725
msgid "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"
msgstr "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"

#: ../../tutorials/algorithms/07_grover.ipynb:775
msgid "When the number of solutions is known, we can also use a static method ``optimal_num_iterations`` to find the optimal number of iterations. Note that the output iterations is an approximate value. When the number of qubits is small, the output iterations may not be optimal."
msgstr ""

#: ../../tutorials/algorithms/07_grover.ipynb:818
msgid "Applying ``post_processing``"
msgstr "``post_processing`` 적용하기"

#: ../../tutorials/algorithms/07_grover.ipynb:820
msgid "We can apply an optional post processing to the top measurement for ease of readability. It can be used e.g. to convert from the bit-representation of the measurement ``[1, 0, 1]`` to a DIMACS CNF format ``[1, -2, 3]``."
msgstr ""

