msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-08 16:50+0000\n"
"PO-Revision-Date: 2022-12-27 16:01\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/02_vqe_advanced_options.po\n"
"X-Crowdin-File-ID: 9931\n"
"Language: ko_KR\n"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:10
msgid "This page was generated from `tutorials/algorithms/02_vqe_advanced_options.ipynb`__."
msgstr "이 페이지는 `tutorials/algorithms/02_vqe_advanced_options.ipynb`__ 에서 생성되었다."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:9
msgid "Advanced VQE (algorithm) options"
msgstr "고급 VQE (알고리즘) 옵션"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:11
msgid "In the first algorithms tutorial, you learned how to set up a basic ```VQE`` <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.VQE.html>`__ algorithm. Now, you will see how to provide more advanced configuration parameters to explore the full range of capabilities of Qiskit’s variational algorithms: ```VQE`` <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.VQE.html>`__, ```QAOA`` <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.QAOA.html>`__ and ```VQD`` <https://qiskit.org/documentation/stubs/qiskit.algorithms.eigensolvers.VQD.html>`__ among others. In particular, this tutorial will cover how to set up a ``callback`` to monitor convergence and the use of custom ``initial point``\\ s and ``gradient``\\ s."
msgstr "첫 번째 알고리즘 튜토리얼에서는 기본 ```VQE`` <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.VQE.html>`__ 알고리즘을 설정하는 방법을 배웠다. 이제 ```VQE`` <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.VQE.html>`__, ```QAOA`` <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.QAOA.html>`__, ```VQD`` <https://qiskit.org/documentation/stubs/qiskit.algorithms.eigensolvers.VQD.html>`__ 등 Qiskit의 변이 알고리즘의 모든 기능을 탐색하기 위해 보다 고급 구성 매개 변수를 제공하는 방법을 살펴보겠다. 특히, 이 튜토리얼은 수렴과 맞춤형 ``initial point``\\ s 및 ``gradient``\\ s 의 사용을 모니터링하기 위해 ``callback`` 을 설정하는 방법을 다룰 것이다."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:24
msgid "Callback"
msgstr "콜백"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:35
msgid "Callback methods can be used to monitor optimization progress as the algorithm runs and converges to the minimum. The callback is invoked for each functional evaluation by the optimizer and provides the current optimizer value, evaluation count, current optimizer parameters etc. Note that, depending on the specific optimizer this may not be each iteration (step) of the optimizer, so for example if the optimizer is calling the cost function to compute a finite difference based gradient this will be visible via the callback."
msgstr "콜백 메서드를 사용하여 알고리즘이 실행되고 최소값으로 수렴될 때 최적화 진행률을 모니터링할 수 있다. 콜백은 옵티마이저의 각 기능 평가에 대해 호출되며 현재 옵티마이저 값, 평가 카운트, 현재 옵티마이저 매개변수 등을 제공한다. 특정 옵티마이저에 따라 이 메서드는 옵티마이저의 각 반복(단계)이 아닐 수 있으므로, 예를 들어 옵티마이저 유한차 경사도를 계산하기 위해 비용 함수를 호출하는 경우 콜백을 통해 볼 수 있다."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:38
msgid "This section demonstrates how to leverage callbacks in ``VQE`` to plot the convergence path to the ground state energy with a selected set of optimizers."
msgstr "이 섹션은 ``VQE`` 에서 콜백을 활용하여 선택된 옵티마이저 세트를 사용하여 바닥 상태 에너지에 대한 수렴 경로 도표를 그려 방법을 보여준다."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:49
msgid "First, you need a qubit operator for VQE. For this example, you can use the same operator as used in the algorithms introduction, which was originally computed by Qiskit Nature for an H2 molecule."
msgstr "먼저, VQE에 대한 큐비트 연산자가 필요하다. 이 예제에서는 앞서 Qiskit의 알고리즘 소개에서 사용된 것과 동일한 (H2 분자에 대하여 원래 Qiskit Nature에서 계산된) 연산자를 사용할 것이다."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:80
msgid "The next step is to instantiate the ``Estimator`` of choice for the evaluation of expectation values within ``VQE``. For simplicity, you can select the ``qiskit.primitives.Estimator`` shipped with the default Qiskit Terra installation."
msgstr "다음 단계는 ``VQE`` 내에서 기댓값을 평가하기 위해 선택한 ``Estimator`` 를 인스턴스화하는 것이다. 단순성을 위해 기본 Qiskit Terra 설치와 함께 제공되는 ``qiskit.primitives.Estimator`` 를 선택할 수 있다."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:103
msgid "You are now ready to compare a set of optimizers through the ``VQE`` callback. The minimum energy of the H2 Hamiltonian can be found quite easily, so the maximum number of iterations (``maxiter``) does not have to be very large. You can once again use ``TwoLocal`` as the selected trial wavefunction (i.e. ansatz)."
msgstr "이제 ``VQE`` 콜백을 통해 옵티마이저 세트를 비교할 준비가 되었다. H2 해밀토니안의 최소 에너지는 매우 쉽게 찾을 수 있기 때문에 최대 반복 횟수 (``maxiter``) 는 매우 클 필요가 없다. ``TwoLocal`` 를 선택한 시행 파동 함수 (즉, ansatz)으로 다시 한번 사용할 수 있다."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:176
msgid "Now, from the callback data you stored, you can plot the energy value at each objective function call each optimizer makes. An optimizer using a finite difference method for computing gradient has that characteristic step-like plot where for a number of evaluations it is computing the value for close by points to establish a gradient (the close by points having very similar values whose difference cannot be seen on the scale of the graph here)."
msgstr "이제 저장한 콜백 데이터에서 각 옵티마이저가 각각의 목적 함수를 호출하여 발생하는 에너지 값을 그려볼 수 있다. 유한 차분법을 사용하여 기울기를 계산하는 옵티마이저는 수 많은 평가에서 기울기를 설정하기 위해 가까운 지점에 대한 값을 계산하는 plot과 같은 특성 단계를 가진다. (여기 그래프의 눈금에서는 차이를 구별하기 힘들 정도로 매우 유사한 값을 가진 가까운 지점임)"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:213
msgid "Finally, since the above problem is still easily tractable classically, you can use ``NumPyMinimumEigensolver`` to compute a reference value for the solution."
msgstr "마지막으로, 위의 문제는 고전적으로 여전히 쉽게 다루기 쉽기 때문에, ``NumPyMinimumEigensolver`` 를 사용하여 솔루션에 대한 기준 값을 계산할 수 있다."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:264
msgid "You can now plot the difference between the ``VQE`` solution and this exact reference value as the algorithm converges towards the minimum energy."
msgstr "이제 알고리즘이 최소 에너지로 수렴할 때 ``VQE`` 솔루션과 이 정확한 참조값 사이의 차이를 도표를 그려 표현할 수 있다."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:305
msgid "Gradients"
msgstr "그라디언트"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:307
msgid "In Qiskit’s variational algorithms, if the provided optimizer uses a gradient-based technique, the default gradient method will be finite differences. However, these classes include an option to pass custom gradients via the ``gradient`` parameter, which can be any of the provided methods within Qiskit’s `gradient <https://qiskit.org/documentation/stubs/qiskit.algorithms.gradients.html>`__ framework, which fully supports the use of primitives. This section shows how to use custom gradients in the VQE workflow."
msgstr "Qiskit의 변이 알고리즘에서, 제공된 옵티마이저가 그라디언트 기반 기술을 사용하는 경우, 기본 그라디언트 방법은 유한차가 될 것이다. 그러나 이러한 클래스에는 ``gradient`` 매개 변수를 통해 사용자 지정 그라디언트를 전달하는 옵션이 포함되어 있으며, 이는 primitive의 사용을 완전히 지원하는 Qiskit의 `gradient <https://qiskit.org/documentation/stubs/qiskit.algorithms.gradients.html>`__ 프레임워크 내에서 제공되는 방법 중 하나일 수 있다. 이 섹션에서는 VQE 워크플로우에서 사용자 지정 그라디언트를 사용하는 방법을 보여 준다."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:310
msgid "The first step is to initialize both the corresponding primitive and primitive gradient:"
msgstr "첫 번째 단계는 해당 primitive 및 primitive 그라디언트를 모두 초기화하는 것이다:"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:334
msgid "Now, you can inspect an SLSQP run using the ``FiniteDiffEstimatorGradient`` from above:"
msgstr "이제 위에서 ``FiniteDiffEstimatorGradient`` 를 사용하여 SLSQP 실행을 점검할 수 있다."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:422
msgid "Initial point"
msgstr "초기 지점"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:424
msgid "By default, the optimization begins at a random point within the bounds defined by the ansatz. The ``initial_point`` option allows to override this point with a custom list of values that match the number of ansatz parameters."
msgstr "기본적으로 최적화는 ansatz에 의해 정의된 경계 내의 무작위 점에서 시작된다. ``initial_point`` 옵션을 사용하면 이 점을 ansatz 매개 변수의 수와 일치하는 사용자 지정 값 목록으로 재정의할 수 있다."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:426
msgid "You might wonder… *Why set a custom initial point?* Well, this option can come in handy if you have a guess for a reasonable starting point for the problem, or perhaps know information from a prior experiment."
msgstr "여기서 이와 같은 질문을 던질 수 있다. *사용자 지정 초기 지점을 설정하는 이유는 무엇일까?* 이 옵션은 문제의 합리적인 시작점을 추측하거나 사전 실험의 정보를 알고 있는 경우에 유용할 수 있다."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:428
msgid "To demonstrate this feature, let’s look at the results from our previous VQE run:"
msgstr "이 기능을 시연하기 위해 이전 VQE 실행 결과를 살펴보자:"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:525
msgid "Now, you can take the ``optimal_point`` from the above result and use it as the ``initial_point`` for a follow-up computation."
msgstr "이제 위의 결과에서 ``optimal_point`` 를 가져와 후속 계산을 위해 ``initial_point`` 로 사용할 수 있다."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:527
msgid "**Note:** ``initial_point`` is now a keyword-only argument of the ``VQE`` class (i.e, it must be set following the ``keyword=value`` syntax)."
msgstr "**참고:** ``initial_point`` 는 이제 ``VQE`` 클래스의 키워드 전용 인수이다 (즉, ``keyword=value`` 구문에 따라 설정해야 함)."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:676
msgid "By looking at the ``cost_function_evals`` you can notice how the initial point helped the algorithm converge faster (in just 1 iteration, as we already provided the optimal solution)."
msgstr "``cost_function_evals`` 를 보면 (이미 최적의 솔루션을 제공했기 때문에 단 한 번의 반복으로) 초기 포인트가 알고리즘을 더 빨리 수렴하는 데 어떻게 도움이 되었는지 알 수 있다."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:678
msgid "This can be particularly useful in cases where we have two closely related problems, and the solution to one problem can be used to guess the other’s. A good example might be plotting dissociation profiles in chemistry, where we change the inter-atomic distances of a molecule and compute its minimum eigenvalue for each distance. When the distance changes are small, we expect the solution to still be close to the prior one. Thus, a popular technique is to simply use the optimal point from one solution as the starting point for the next step. There also exist more complex techniques, where we can apply extrapolation to compute an initial position based on prior solution(s) rather than directly use the prior solution."
msgstr "이는 밀접하게 관련된 두 가지 문제를 가지고 있는 경우에 특히 유용할 수 있으며, 한 문제에 대한 해결책은 다른 문제를 추측하는 데 사용될 수 있다. 좋은 예로 화학에서 분자의 원자 간 거리를 변경하고 각 거리에 대한 최소 고유값을 계산하는 해리(dissociation) 프로파일을 그리는 것일 수 있다. 거리 변화가 적을 때 우리는 솔루션이 여전히 이전 솔루션의 근처에 있을 것으로 예상할 수 있다. 따라서 일반적인 테크닉은 단순하게 한 솔루션의 최적점을 다음 단계의 시작 지점으로 사용하는 것이다. 또한 이전 솔루션을 직접 사용하는 대신 이전 솔루션들을 기반으로 초기 위치를 계산하기 위해 외삽법(extrapolation)을 적용할 수 있는 더 복잡한 기술이 있다."

