msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-02 21:04+0000\n"
"PO-Revision-Date: 2023-03-02 22:42\n"
"Last-Translator: \n"
"Language: ko\n"
"Language-Team: Korean\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/04_vqd.po\n"
"X-Crowdin-File-ID: 9933\n"

#: ../../tutorials/algorithms/04_vqd.ipynb:10
msgid "This page was generated from `tutorials/algorithms/04_vqd.ipynb`__."
msgstr "이 페이지는 `tutorials/algorithms/04_vqd.ipynb`__ 로부터 생성되었다."

#: ../../tutorials/algorithms/04_vqd.ipynb:9
msgid "Variational Quantum Deflation (VQD) Algorithm"
msgstr "Variational Quantum Deflation (VQD) 알고리즘"

#: ../../tutorials/algorithms/04_vqd.ipynb:11
msgid "This notebook demostrates how to use Qiskit’s implementation of the `Variational Quantum Deflation (VQD) <https://qiskit.org/documentation/stubs/qiskit.algorithms.eigensolvers.VQD.html>`__ algorithm for computing higher energy states of a Hamiltonian, as introduced in this `reference paper <https://arxiv.org/abs/1805.08138>`__."
msgstr "이 노트북은 'reference paper <https://arxiv.org/abs/1805.08138>`에 소개된 바와 같이 Qiskit의 `Variational Quantum Deflation (VQD)<https://qiskit.org/documentation/stubs/qiskit.algorithms.eigensolvers.VQD.html>`__ 알고리즘을 이용하여 Hamiltonian의 보다 높은 에너지 상태를 계산하는 알고리즘을 사용하는 방법을 시연한다."

#: ../../tutorials/algorithms/04_vqd.ipynb:23
msgid "Introduction"
msgstr "도입"

#: ../../tutorials/algorithms/04_vqd.ipynb:25
msgid "VQD is a quantum algorithm that uses a variational technique to find the *k* eigenvalues of the Hamiltonian *H* of a given system."
msgstr "VQD는 주어진 시스템의 Hamiltonian *H*의 *k* 고유값을 찾기 위해 다양한 기술을 사용하는 양자 알고리즘이다."

#: ../../tutorials/algorithms/04_vqd.ipynb:27
msgid "The algorithm computes excited state energies of generalized hamiltonians by optimizing over a modified cost function. Each successive eigenvalue is calculated iteratively by introducing an overlap term with all the previously computed eigenstates that must be minimized. This ensures that higher energy eigenstates are found."
msgstr "알고리즘은 변형된 함수에 걸쳐 최적화함으로써 일반화된 해밀토니언들의 들뜬 상태 에너지들을 계산한다. 각각의 연속 고유값은 최소화되어야 하는 이전에 계선된 모든 고유 상태를 갖는 중첩 항을 도입함으로써 반복적으로 계산된다. 이를 통해 더 높은 에너지 고유 상태를 찾을 수 있습니다."

#: ../../tutorials/algorithms/04_vqd.ipynb:39
msgid "Complete working example for VQD"
msgstr "VQD에 대한 작업 예제를 완료하자"

#: ../../tutorials/algorithms/04_vqd.ipynb:50
msgid "The first step of the VQD workflow is to create a qubit operator, ansatz and optimizer. For this example, you can use the H2 molecule, which should already look familiar if you have completed the previous VQE tutorials:"
msgstr "VQD 워크플로우의 첫 번째 단계는 큐비트 연산자, 안사츠 및 최적화 도구를 만드는 것이다. 이 예에서는 H2 분자를  사용한다. H2 분자는 이전 VQE 튜토리얼을 완료한 경우 익숙할 것이다."

#: ../../tutorials/algorithms/04_vqd.ipynb:81
msgid "You can set up, for example, a ``TwoLocal`` ansatz with three qubits, and choose ``SLSQP`` as the optimization method."
msgstr "예를 들어, ``TwoLocal`` 안사츠를 세개의 큐비트로 구현하거나, 최적화 방법으로 ``SLSQP``를 선택할 수 있다."

#: ../../tutorials/algorithms/04_vqd.ipynb:117
msgid "The next step of the workflow is to define the required primitives for running ``VQD``. This algorithm requires two different primitive instances: one ``Estimator`` for computing the expectation values for the “VQE part” of the algorithm, and one ``Sampler``. The sampler will be passed along to the ``StateFidelity`` subroutine that will be used to compute the cost for higher energy states. There are several methods that you can use to compute state fidelities, but to keep things simple, you can use the ``ComputeUncompute`` method already available in ``qiskit.algorithm.state_fidelities``."
msgstr "워크플로의 다음 단계는 ``VQD`` 실행에 필요한 프리미티브를 정의하는 것이다. 이 알고리듬은 “VQE part” 에 대한 기대값을 계산하기 위한 ``Estimator``와 ``Sampler``라는 두 가지 기본 인스턴스가 필요하다. 샘플러는 더 높은 에너지 상태에 대한 비용을 계산하는 데 사용되는 ``StateFidelity`` 서브루틴으로 전달된다. 상태 충실도는 여러 방법으로 계산되지만 간단하게 유지하기 위해 ``qiskit.algorithm.state_fidelities``에서 이미 사용 가능한 ``ComputeUncompute`` 방법을 사용할 수 있다."

#: ../../tutorials/algorithms/04_vqd.ipynb:144
msgid "In order to set up the VQD algorithm, it is important to define two additional inputs: the number of energy states to compute (``k``) and the ``betas`` defined in the original VQD paper. In this example, the number of states (``k``) will be set to three, which indicates that two excited states will be computed in addition to the ground state."
msgstr "VQD 알고리듬을 설정하려면 계산할 에너지 상태의 수(``k``)와 원본 VQD 논문에 정의된 ``betas``라는 두 가지 추가 입력을 정의하는 것이 중요하다. 이 예에서 상태 수(``k``)는 3으로 설정되며, 이는 바닥 상태 외에 두 개의 여기 상태가 계산됨을 나타낸다."

#: ../../tutorials/algorithms/04_vqd.ipynb:146
msgid "The ``betas`` balance the contribution of each overlap term to the cost function, and they are an optional argument in the ``VQD`` construction. If not set by the user, they can be autoevaluated for input operators of type ``SparsePauliOp``. Please note that if you want to set your own ``betas``, you should provide a list of values of length ``k``."
msgstr "``betas``는 비용 함수에 대한 각 중첩 항의 기여도의 균형을 맞추며 ``VQD`` 구성의 선택적 인수이다. 사용자가 설정하지 않으면 ``SparsePauliOp`` 유형의 입력 연산자에 대해 자동 평가된다. 자신만의 ``betas``를 설정하려면 길이 ``k`` 값 목록을 제공해야 한다."

#: ../../tutorials/algorithms/04_vqd.ipynb:168
msgid "You are almost ready to run the VQD algorithm, but let’s define a callback first to store intermediate values:"
msgstr "VQD 알고리즘을 실행할 준비가 거의 되었지만, 먼저 중간 값을 저장하기 위한 콜백을 정의하겠다:"

#: ../../tutorials/algorithms/04_vqd.ipynb:196
msgid "You can finally instantiate ``VQD`` and compute the eigenvalues for the chosen operator."
msgstr "최종적으로 ``VQD`` 를 인스턴스화하고 선택한 연산자의 고유값을 계산할 수 있다."

#: ../../tutorials/algorithms/04_vqd.ipynb:221
msgid "You can see the three state energies as part of the ``VQD`` result:"
msgstr "``VQD`` 결과의 일부로 세 가지 상태 에너지를 확인할 수 있다:"

#: ../../tutorials/algorithms/04_vqd.ipynb:266
msgid "And we can use the values stored by the callback to plot the energy convergence for each state:"
msgstr "콜백에 저장된 값을 사용하여 각 상태에 대한 에너지 수렴을 표시할 수 있다:"

#: ../../tutorials/algorithms/04_vqd.ipynb:312
msgid "This molecule can be solved exactly using the ``NumPyEigensolver`` class, which will give a reference value that you can compare with the ``VQD`` result:"
msgstr "이 분자는 ``NumPyEigensolver`` 클래스를 사용하여 정확히 풀 수 있으며, ``VQD`` 결과와 비교를 위한 기준값을 제공한다:"

#: ../../tutorials/algorithms/04_vqd.ipynb:338
msgid "Let’s see a comparison of the exact result with the previously computed ``VQD`` eigenvalues:"
msgstr "정확한 결과를 이전에 계산된 ``VQD`` 고유값과 비교해 보자:"

#: ../../tutorials/algorithms/04_vqd.ipynb:387
msgid "As you can see, the result from VQD matches the values from the exact solution, and extends VQE to also compute excited states."
msgstr "보시다시피 VQD의 결과는 정확한 솔루션의 값과 일치하며 VQE를 확장하여 들뜬 상태도 계산한다."

