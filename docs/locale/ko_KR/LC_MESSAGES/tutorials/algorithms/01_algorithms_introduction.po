msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-07 16:27+0000\n"
"PO-Revision-Date: 2020-12-14 19:00\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/01_algorithms_introduction.po\n"
"X-Crowdin-File-ID: 9444\n"
"Language: ko_KR\n"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:10
msgid "This page was generated from `tutorials/algorithms/01_algorithms_introduction.ipynb`__."
msgstr "이 페이지는 `tutorials/algorithms/01_algorithms_introduction.ipynb`__ 에서 생성되었다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/01_algorithms_introduction.ipynb>`_."
msgstr "`IBM 퀀텀 랩 <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/01_algorithms_introduction.ipynb>`_ 에서 대화식으로 실행하십시오."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:9
msgid "An Introduction to Algorithms in Qiskit"
msgstr "키스킷의 알고리즘 소개"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:11
msgid "This is an introduction to algorithms in Qiskit and provides a high-level overview to help understand the various aspects of the functionality to get started. Other tutorials will provide more in-depth material, on given algorithms, and ways to use them etc."
msgstr "이는 Qiskit의 알고리즘에 대한 소개로, 시작할 기능의 다양한 측면을 이해하는 데 도움이 되는 고급 개요를 제공한다. 다른 학습서에서는 보다 상세한 자료, 주어진 알고리즘 및 이들을 사용하는 방법 등을 제공합니다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:23
msgid "How is the algorithm library structured?"
msgstr "알고리즘 라이브러리는 어떻게 구성되어 있습니까?"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:25
msgid "Qiskit provides a number of `Algorithms <https://qiskit.org/documentation/apidoc/qiskit.aqua.algorithms.html>`__ and they are grouped by category according to the task they can perform. For instance ``Minimum Eigensolvers`` to find the smallest eigen value of an operator, for example ground state energy of a chemistry Hamiltonian or a solution to an optimization problem when expressed as an Ising Hamiltonian. There are ``Classifiers`` for machine learning classification problems and ``Amplitude Estimators`` for value estimation that can be used say in financial applications. The full set of categories can be seen in the Algorithms documentation link above."
msgstr "Qiskit은 다수의 `알고리즘들 <https://qiskit.org/documentation/apidoc/qiskit.aqua.algorithms.html>`__ 을 제공하며, 이들은 수행할 수 있는 작업에 따라 카테고리별로 그룹화되어 있다. 예를 들어, ``Minimum Eigensolvers`` 는 작동/연산자의 가장 작은 고유값, 예를 들어, 화학 해밀턴의 접지 상태 에너지, 또는 Ising Hamiltonian 으로 표현되는 최적화 문제에 대한 해법을 찾는다. 그 중에는 머신러닝의 분류 문제를 해결하기 위한 ``Classifiers`` 와, 금융 애플리케이션에서 활용될 수 있는 ``Amplitude Estimators`` 가 존재한다. 전체 카테고리는 위의 알고리즘 문서 링크에서 확인 가능하다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:28
msgid "Algorithms are configurable and often part of the configuration will be in the form of smaller building blocks, of which different instances of the building block type can be given. For instance with ``VQE``, the Variational Quantum Eigensolver, it takes a trial wavefunction, in the form of a ``QuantumCircuit`` and a classical optimizer among other things. Such building blocks can be found as `Components <https://qiskit.org/documentation/apidoc/qiskit.aqua.components.html>`__ and as circuits from the `Circuit Library <https://qiskit.org/documentation/apidoc/circuit_library.html>`__."
msgstr "알고리즘은 구성 가능하며 구성의 일부는 종종 빌딩블록 유형의 다른 인스턴스를 제공 할 수 있는 더 작은 빌딩블록의 형태로 되어 있다. 예를 들어, Variational Quantum Eigensolver인 ``VQE``는 ``QuantumCircuit`` 형태의 시험 파동(trial wavefunction)과 고전적인 옵티마이저(optimizer)를 인자로 갖는다. 이와 같은 빌딩블록은 `컴포넌트 <https://qiskit.org/documentation/apidoc/qiskit.aqua.components.html>`__ 와 `회로 라이브러리 <https://qiskit.org/documentation/apidoc/circuit_library.html>`__ 의 회로로 찾을 수 있다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:31
msgid "Let’s take a look at an example to construct a VQE instance. Here ``TwoLocal`` is the variational form (trial wavefunction), a parameterized circuit which can be varied, and ``SLSQP`` a classical optimizer. These are created as separate instances and passed to VQE when it is constructed. Trying, for example, a different classical optimizer, or variational form is simply a case of creating an instance of the one you want and passing it into VQE."
msgstr "VQE 인스턴스를 구성하는 예제를 살펴보자. 여기서 ``TwoLocal`` 은 다양한 형태 (시험 파동), 다양할 수 있는 파라미터화된 회로, 그리고 고전적인 최적화 프로그램인 ``SLSQP`` 이다. 이들은 별개의 인스턴스로서 생성되고, 구성될 때 VQE로 전달된다. 예를 들어, 다른 고전적 최적화 프로그램 또는 다양한 양식은 단순히 원하는 것의 인스턴스를 작성하여 VQE에 전달하는 경우이다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:59
msgid "Let’s draw the ansatz so we can see it’s a QuantumCircuit where θ[0] through θ[7] will be the parameters that are varied as VQE optimizer finds the minimum eigenvalue. We’ll come back to the parameters later in a working example below."
msgstr "Ansatz를 그려서(draw) QuantumCircuit임을 확인해 보자. 여기서 θ[0] 부터 θ[7] 는 VQE 옵티마이저가 최소 고유값을 찾음에 따라 변화하는 매개 변수이다. 아래의 작업 예제에서 매개변수로 다시 돌아올 것이다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:125
msgid "But more is needed before we can run the algorithm so let’s get to that next."
msgstr "하지만 알고리즘을 실행하려면 몇 가지 일들이 필요하므로 다음 단계로 넘어가도록 하겠다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:137
msgid "How to run an algorithm?"
msgstr "알고리즘을 실행하는 방법은 무엇입니까?"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:139
msgid "In order to run an algorithm we need to have backend, a simulator or real device, on which the circuits that comprise the algorithm can be run. So for example we can use the ``statevector_simulator`` from the BasicAer provider."
msgstr "알고리즘을 실행하기 위해, 알고리즘을 구성하는 회로가 실행될 수 있는 백엔드, 시뮬레이터 또는 실제 장치가 있어야 한다. 예를 들어, ``statevector_simulator`` 를 BasicAer 에서 가져다 사용할 수 있다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:162
msgid "Now a backend on its own does not have information on how you might want to run the circuits etc. For example how many shots, do you want a noise model, even options around transpiling the circuits. For this Qiskit Aqua has a `QuantumInstance <https://qiskit.org/documentation/stubs/qiskit.aqua.QuantumInstance.html>`__ which is provided both the backend as well as various settings around the circuit processing and execution so for instance:"
msgstr "이제 백엔드 자체에는 회로를 실행하는 방법 등에 대한 정보가 없다. 예를 들어, 얼마나 많은 샷, 노이즈 모델을 원하는가? 회로의 transpiling에 대한 옵션이 필요한가? 키스킷 아쿠아에는 백엔드 뿐만 아니라 회로 처리 및 실행에 대한 다양한 설정을 제공하는 `QuantumInstance <https://qiskit.org/documentation/stubs/qiskit.aqua.QuantumInstance.html>`__ 가 있다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:186
msgid "Note: if you provide the backend directly then internally a QuantumInstance will be created from it, with default settings, so at all times the algorithms are working through a QuantumInstance."
msgstr "참고: 백엔드를 직접적으로 제공하면 내부적으로 QuantumInstance가 기본 설정으로 생성되므로, 알고리즘은 항상 QuantumInstance를 통해 작동한다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:188
msgid "So now we would be able to call the `run() <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.run.html>`__ method, which is common to all algorithms and returns a result specific for the algorithm. In this case since VQE is a MinimumEigensolver we could use the `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.compute_minimum_eigenvalue.html>`__ method. The latter is the interface of choice for the application modules, such as Chemistry and Optimization, in order that they can work interchangeably with any algorithm within the specific category."
msgstr "그래서 이제 모든 알고리즘에 공통적인 `run() <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.run.html>`__ 메서드를 호출하고 알고리즘에 특정한 결과를 반환할 수 있게 되었다. 이 경우, VQE는 MinimumEigensolver 이기 때문에, `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.compute_minimum_eigenvalue.html>`__ 메소드를 사용할 수 있다. 후자는 특정 카테고리 내의 임의의 알고리즘과 상호교환가능하게 동작할 수 있도록, 화학 및 최적화와 같은 애플리케이션 모듈에 대한 선택의 인터페이스이다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:201
msgid "A complete working example"
msgstr "완전한 작업 예제"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:203
msgid "Let’s put what we have learned from above together and create a complete working example. VQE will find the minimum eigenvalue, i.e. minimum energy value of a Hamilitonian operator and hence we need such an operator for VQE to work with. Such an operator is given below. This was originally created by the Chemistry application module as the Hamiltonian for an H2 molecule at 0.735A interatomic distance. It’s a sum of Pauli terms as below, but for now I am not going to say anything further about it since the goal is to run the algorithm, but further information on operators can be found in other tutorials."
msgstr "위에서부터 배운 것을 모아서 완벽한 작업 예제를 만들어 보자. VQE는 최소 고유 값 (eigenvalue), 즉, 해리톤 오퍼레이터의 최소 에너지 값을 찾을 것이며, 따라서, 우리는 VQE에 대해 작업하기 위한 그러한 오퍼레이터가 필요하다. 이러한 오퍼레이터는 아래에 주어진다. 이는 원래의 화학적 적용 모듈에 의해 0.735A원자간 거리에서 H2 분자에 대한 해밀턴으로 생성되었다. 이는 아래와 같은 폴링 용어의 합계입니다. 하지만 지금은 알고리즘을 실행하는 것이 목표이기 때문에 더 이상 아무 말도 하지 않겠지만 운영자에 대한 추가 정보는 다른 학습서에서 찾을 수 있습니다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:231
msgid "So let’s build a VQE instance passing the operator, and a backend using a QuantumInstance, to the constructor. Now VQE does have setters so the operator and backend can also be passed later. Setting them later can be useful when creating an algorithm without this problem specific information and then later using it, say with the chemistry application module, which would create the operator for the specific chemistry problem being solved. which it has to do the same thing."
msgstr "따라서 연산자를 전달하는 VQE 인스턴스와 QuantumInstance를 사용하는 백엔드를 생성자에 빌드하자. 이제 VQE에는 연산자 및 백엔드가 나중에 전달될 수 있도록 설정이 맞추어져 있다. 이들을 나중에 설정하면 이 문제에 대한 특정 정보 없이 알고리즘을 작성한 후 추후 이를 사용할 때 요긴하게 쓰인다. 예를 들어 특정 화학 문제를 해결하는 연산자를 작성하는 화학 애플리케이션 모듈 같은 것이 있다. 결국 해야 하는 일은 동일한 셈이다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:233
msgid "Note: In order that you can run this notebook and see the exact same output the random number generator used throughout Aqua in aqua_globals, as well as the transpiler and simulator, via the QuantumInstance, are seeded. You do not have to do this but if want to be able to reproduce the exact same outcome each time then this is how it’s done."
msgstr "참고: 이 노트북을 실행하고 aqua_globals의 Aqua에서 사용되는 난수 생성기와 정확히 동일한 출력을 확인하려면 QuantumInstance를 통해 전송자 및 시뮬레이터를 시딩한다. 이 작업은 선택사항이며, 매번 정확히 동일한 결과를 재생할 수 있기를 원할 경우에 이 작업을 수행하면 된다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:235
msgid "So let’s run VQE and print the result object it returns."
msgstr "따라서 VQE를 실행하고 반환한 결과 오브젝트를 출력한다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:319
msgid "From the above result we can see it took the optimizer ``72`` evaluations of parameter values until it found the minimum eigenvalue of ``-1.85727`` which is the electronic ground state energy of the given H2 molecule. The optimal parameters of the ansatz can also be seen which are the values that were in the ansatz at the minimum value."
msgstr "위의 결과에서 주어진 H2 분자의 전자 접지 상태 에너지(electronic ground state energy) 인 ``-1.85727``의 최소 고유값을 찾을 때까지, 옵티마이저가 매개 변수 값을 ``72`` 평가한 것을 확인할 수 있다. 또한, Ansatz의 최적 매개 변수는 ansatz의 매개 변수들 중 최소값을 갖는 매개변수 임을 확인할 수 있다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:331
msgid "Using VQE as a MinimumEigensolver"
msgstr "VQE를 MinimumEigensolver로 사용하기"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:333
msgid "To close off let’s use the MinimumEigensolver interface and also create a VQE instance without supplying either the operator or QuantumInstance. We later set the QuantumInstance and finally pass the operator on the ``compute_minimum_eigenvalue`` method (though we could have passed it in earlier via the setter instead, as long as by the time VQE runs it has an operator to work on)."
msgstr "이를 닫기 위해서, 최소치 (MinimumEigensolver) 인터페이스를 사용하고, 오퍼레이터 또는 QuantumInstance를 제공하지 않고 VQE 인스턴스를 생성한다. 나중에 퀀텀 인스턴스를 설정하고 마지막으로 ``compute_minimum_eigenvalue`` 메소드에서 연산자를 전달한다 (이 메소드는 VQE가 실행하는 시간에 의해 작동하는 연산자를 갖는다)."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:415
msgid "As the identical seeding was used as the prior example the result can be seen to be the same."
msgstr "이전 예로서 동일한 시딩(seeding) 이 사용되었기 때문에, 결과는 동일한 것으로 보일 수 있다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:426
msgid "This concludes this introduction to algorithms in Qiskit. Please check out the other algorithm tutorials in this series for both broader as well as more in depth coverage of the algorithms."
msgstr "이로써 Qiskit을 사용한 알고리즘 입문에 대하여 다루었다. 알고리즘에 대한 좀더 깊고 넓은 내용에 흥미가 있다면, 본 시리즈의 다른 알고리즘 사용 지침서들 또한 참고해 주시길 바란다."

