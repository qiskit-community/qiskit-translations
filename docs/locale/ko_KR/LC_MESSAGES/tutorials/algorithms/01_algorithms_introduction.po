msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:25+0000\n"
"PO-Revision-Date: 2023-08-14 19:07\n"
"Last-Translator: \n"
"Language: ko\n"
"Language-Team: Korean\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/algorithms/01_algorithms_introduction.po\n"
"X-Crowdin-File-ID: 9444\n"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:10
msgid "This page was generated from `tutorials/algorithms/01_algorithms_introduction.ipynb`__."
msgstr "이 페이지는 `tutorials/algorithms/01_algorithms_introduction.ipynb`__ 에서 생성되었다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:9
msgid "An Introduction to Algorithms in Qiskit"
msgstr "Qiskit의 알고리즘 소개"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:11
msgid "This is an introduction to algorithms in Qiskit and provides a high-level overview to help understand the various aspects of the functionality to get started. Other tutorials will provide more in-depth material, on given algorithms, and ways to use them etc."
msgstr "이는 Qiskit의 알고리즘에 대한 소개로, 시작할 기능의 다양한 측면을 이해하는 데 도움이 되는 고급 개요를 제공한다. 다른 학습서에서는 보다 상세한 자료, 주어진 알고리즘 및 이들을 사용하는 방법 등을 제공한다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:23
msgid "How is the algorithm library structured?"
msgstr "알고리즘 라이브러리는 어떻게 구성되어 있을까?"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:25
msgid "Qiskit provides a number of `Algorithms <https://qiskit.org/documentation/apidoc/algorithms.html>`__ and they are grouped by category according to the task they can perform. For instance ``Minimum Eigensolvers`` to find the smallest eigen value of an operator, for example ground state energy of a chemistry Hamiltonian or a solution to an optimization problem when expressed as an Ising Hamiltonian. There are ``Time Evolvers`` for the time evolution of quantum systems and ``Amplitude Estimators`` for value estimation that can be used say in financial applications. The full set of categories can be seen in the Algorithms documentation link above."
msgstr "Qiskit은 다양한 `알고리즘 <https://qiskit.org/documentation/apidoc/algorithms.html>`__ 을 제공하며, 목적에 따라 카테고리별로 그룹화되어 있다. 예를 들어, ``Minimum Eigensolvers`` 는 연산자의 가장 작은 고유값, 예를 들어, 화학 Hamiltonian의 바닥 상태 에너지, 또는 Ising Hamiltonian 으로 표현되는 최적화 문제에 대한 해법을 찾는다. 그 중에는 양자 시스템의 시간 진화를 위한 ``Time Evolvers`` 와 금융 애플리케이션 등에서 가치 추정을 위해 활용될 수 있는 ``Amplitude Estimators`` 가 있다. 전체 목차는 위의 알고리즘 문서 링크에서 확인 가능하다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:28
msgid "Algorithms are configurable and often part of the configuration will be in the form of smaller building blocks, of which different instances of the building block type can be given. For instance with ``VQE``, the Variational Quantum Eigensolver, it takes a trial wavefunction, in the form of a ``QuantumCircuit`` and a classical optimizer among other things."
msgstr "알고리즘은 구성 가능하며 구성의 일부는 종종 더 작은 빌딩 블록의 형태로 이루어지며, 그 중 다른 빌딩 블록 유형의 인스턴스들이 제공될 수 있다. 예를 들어 변분화된 양자 고윳값 해석기  (Variational Quantum Eigensolver) 인 ``VQE`` 에서는 시행 파동 함수가 필요한데, 이는 무엇보다도 ``QuantumCircuit`` 와 고전적인 최적화기 형태이다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:30
msgid "Let's take a look at an example to construct a VQE instance. Here ``TwoLocal`` is the variational form (trial wavefunction), a parameterized circuit which can be varied, and ``SLSQP`` a classical optimizer. These are created as separate instances and passed to VQE when it is constructed. Trying, for example, a different classical optimizer, or variational form is simply a case of creating an instance of the one you want and passing it into VQE."
msgstr "VQE 인스턴스를 구성하는 예제를 살펴보자. 여기서 ``TwoLocal`` 은 다양한 형태 (시험 파동), 다양할 수 있는 매개화된 회로, 그리고 고전적인 최적화 프로그램인 ``SLSQP`` 이다. 이들은 별개의 인스턴스로서 생성되고, 구성될 때 VQE로 전달된다. 예를 들어, 다른 고전적 최적화 프로그램 또는 다양한 양식은 단순히 원하는 것의 인스턴스를 작성하여 VQE에 전달하는 경우이다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:56
msgid "Let's draw the ansatz so we can see it's a ``QuantumCircuit`` where θ[0] through θ[7] will be the parameters that are varied as VQE optimizer finds the minimum eigenvalue. We'll come back to the parameters later in a working example below."
msgstr "가설을 그려보면 θ[0] 부터 θ[7] 는 VQE 옵티마이저가 최소 고유값을 찾음에 따라 변화하는 매개 변수 ``QuantumCircuit`` 을 확인 할 수 있다. 아래의 작업 예제에서 매개변수로 다시 돌아올 것이다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:86
msgid "But more is needed before we can run the algorithm so let's get to that next."
msgstr "하지만 알고리즘을 실행하려면 몇 가지 일들이 필요하기 때문에 다음으로 가려고 한다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:98
msgid "How to run an algorithm?"
msgstr "알고리즘을 어떻게 실행할까?"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:100
msgid "Algorithms rely on the primitives to evaluate expectation values or sample circuits. The primitives can be based on a simulator or real device and can be used interchangeably in the algorithms, as they all implement the same interface."
msgstr "알고리즘은 기대값 또는 샘플 회로를 평가하기 위해 pritmitive에 의존한다. Primitive는 시뮬레이터나 실제 장치를 기반으로 할 수 있으며 모두 같은 인터페이스를 구현하기 때문에 알고리즘에서 상호 교환적으로 사용할 수 있다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:102
msgid "In the VQE, we have to evaluate expectation values, so for example we can use the ``qiskit.primitives.Estimator`` which is shipped with the default Qiskit Terra installation."
msgstr "VQE에서는 기대값을 평가해야 하므로, 예를 들면 평가를 위해 기본 Qiskit Terra 설치와 함께 제공되는 ``qiskit.primitives.Estimator`` 를 사용할 수 있다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:125
msgid "This estimator uses an exact, statevector simulation to evaluate the expectation values. We can also use a shot-based and noisy simulators or real backends instead. For more information of the simulators you can check out `Qiskit Aer <https://qiskit.org/documentation/apidoc/aer_primitives.html>`__ and for the actual hardware `Qiskit IBM Runtime <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/>`__."
msgstr "이 estimator은 정확한 상태 벡터 시뮬레이션을 사용하여 기대치를 평가 한다. 또한 샷 기반의 노이즈가 있는 시뮬레이터나 실제 백엔드를 대신 사용할 수 있다. 시뮬레이터에 대한 자세한 내용은 `Qiskit Aer <https://qiskit.org/documentation/apidoc/aer_primitives.html>`__ 와 실제 하드웨어에 대한 내용은 `Qiskit IBM Runtime <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/>`__ 를 확인할 수 있다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:127
msgid "With all the ingredients ready, we can now instantiate the VQE:"
msgstr "모든 준비가 되었으므로 이제 VQE를 인턴스화할 수 있다:"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:150
msgid "Now we can call the `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.VQE.compute_minimum_eigenvalue.html#qiskit.algorithms.minimum_eigensolvers.VQE.compute_minimum_eigenvalue>`__ method. The latter is the interface of choice for the application modules, such as Nature and Optimization, in order that they can work interchangeably with any algorithm within the specific category."
msgstr "이제 `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.VQE.compute_minimum_eigenvalue.html#qiskit.algorithms.minimum_eigensolvers.VQE.compute_minimum_eigenvalue>`__ 메서드를 호출할 수 있다. 후자는 특정 범주 내의 모든 알고리즘과 상호 호환될 수 있도록 네이처 및 최적화와 같은 애플리케이션 모듈들을 위해 선택된 인터페이스이다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:162
msgid "A complete working example"
msgstr "완전한 작업 예제"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:164
msgid "Let's put what we have learned from above together and create a complete working example. VQE will find the minimum eigenvalue, i.e. minimum energy value of a Hamiltonian operator and hence we need such an operator for VQE to work with. Such an operator is given below. This was originally created by the Nature application module as the Hamiltonian for an H2 molecule at 0.735A interatomic distance. It's a sum of Pauli terms as below, but for now I am not going to say anything further about it since the goal is to run the algorithm, but further information on operators can be found in other tutorials."
msgstr "위에서부터 배운 것을 토대로 완벽한 작업 예제를 만들어 보자. VQE는 최소 고윳값 (eigenvalue), 즉,  Hamiltonian 연산자의 최소 에너지 값을 찾을 것이며, 따라서 우리는 VQE와 작업하기 위한 연산자가 필요하다. 이러한 연산자는 아래에 주어진다. 이는 원래의 Nature 적용 모듈에 의해 0.735A 원자간 거리에서 H2 분자에 대한 Hamiltonian으로 생성되었다. 이는 아래와 같은 파울리 용어의 합이지만, 지금은 알고리즘을 실행하는 것이 목표이기 때문에 이에 관한 추가적인 내용을 덧붙이지 않을 것이며, 연산자에 대한 추가 정보는 다른 튜토리얼에서 찾을 수 있다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:194
msgid "So let's run VQE and print the result object it returns."
msgstr "따라서 VQE를 실행하고 반환된 결과 객체를 출력한다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:291
msgid "From the above result we can see the number of cost function (=energy) evaluations the optimizer took until it found the minimum eigenvalue of :math:`\\approx -1.85727` which is the electronic ground state energy of the given H2 molecule. The optimal parameters of the ansatz can also be seen which are the values that were in the ansatz at the minimum value."
msgstr "위의 결과에서 주어진 H2 분자의 전자 바닥 상태 에너지(electronic ground state energy) 인 :math:`\\approx -1.85727` 의 최소 고윳값을 찾을 때까지, 옵티마이저가 비용 함수(=에너지) 평가의 수를 알 수 있다. 또한, Ansatz의 최적 매개변수는 ansatz의 매개변수들 중 최소값을 갖는 매개변수 임을 확인할 수 있다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:303
msgid "Updating the primitive inside VQE"
msgstr "VQE 내부 primitive 업데이트"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:305
msgid "To close off let's also change the estimator primitive inside the a VQE. Maybe you're satisfied with the simulation results and now want to use a shot-based simulator, or run on hardware!"
msgstr "마치기 위해서 VQE 내부의 estimator primitive도 변경해본다. 아마 시뮬레이션 결과에 만족했으니 이제 shot-based 시뮬레이터를 사용하거나, 하드웨어로 실행해보자!"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:307
msgid "In this example we're changing to a shot-based estimator, still using Qiskit Terra's reference primitive. However you could replace the primitive by e.g. Qiskit Aer's estimator (``qiskit_aer.primitives.Estimator``) or even a real backend (``qiskit_ibm_runtime.Estimator``)."
msgstr "이 예시에서 아직 Qiskit Terra 기반인 primitive로 shot-based 추정기로 변경하고 있다. 그러나 primitive 를 예로 들어 Qiskit Aer의 estimator (``qiskit_aer.primitives.Estimator``)  또는 심지어 실제 백엔드 (``qiskit_ibm_runtime.Estimator``) 로도 대체할 수 있다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:309
msgid "For noisy loss functions, the SPSA optimizer typically performs well, so we also update the optimizer. See also the `noisy VQE tutorial <https://qiskit.org/documentation/tutorials/algorithms/03_vqe_simulation_with_noise.html>`__ for more details on shot-based and noisy simulations."
msgstr "노이즈 손실 함수의 경우 일반적으로 SPSA 옵티마이저가 잘 수행되므로 옵티마이저도 업데이트한다. 샷 기반 및 노이즈 시뮬레이션에 대한 자세한 내용은 `noisy VQE tutorial <https://qiskit.org/documentation/tutorials/algorithms/03_vqe_simulation_with_noise.html>`__ 를 참조하자."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:412
msgid "Note: We do not fix the random seed in the simulators here, so re-running gives slightly varying results."
msgstr "참고: 여기서는 시뮬레이터에서 랜덤 시드를 수정하지 않았으므로 재실행을 하게되면 약간 다른 결과가 나타난다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:423
msgid "This concludes this introduction to algorithms in Qiskit. Please check out the other algorithm tutorials in this series for both broader as well as more in depth coverage of the algorithms."
msgstr "이로써 Qiskit을 사용한 알고리즘 입문에 대하여 다루었다. 알고리즘에 대한 좀더 깊고 넓은 내용에 흥미가 있다면, 본 시리즈의 다른 알고리즘 사용 지침서들 또한 참고해 주시길 바란다."

