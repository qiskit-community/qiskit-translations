msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-10 14:06+0000\n"
"PO-Revision-Date: 2021-06-17 19:07\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/01_algorithms_introduction.po\n"
"X-Crowdin-File-ID: 9444\n"
"Language: ko_KR\n"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:10
msgid "This page was generated from `tutorials/algorithms/01_algorithms_introduction.ipynb`__."
msgstr "이 페이지는 `tutorials/algorithms/01_algorithms_introduction.ipynb`__ 에서 생성되었다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/01_algorithms_introduction.ipynb>`_."
msgstr "`IBM 퀀텀 랩 <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/01_algorithms_introduction.ipynb>`_ 에서 대화식으로 실행하십시오."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:9
msgid "An Introduction to Algorithms in Qiskit"
msgstr "키스킷의 알고리즘 소개"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:11
msgid "This is an introduction to algorithms in Qiskit and provides a high-level overview to help understand the various aspects of the functionality to get started. Other tutorials will provide more in-depth material, on given algorithms, and ways to use them etc."
msgstr "이는 Qiskit의 알고리즘에 대한 소개로, 시작할 기능의 다양한 측면을 이해하는 데 도움이 되는 고급 개요를 제공한다. 다른 학습서에서는 보다 상세한 자료, 주어진 알고리즘 및 이들을 사용하는 방법 등을 제공한다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:23
msgid "How is the algorithm library structured?"
msgstr "알고리즘 라이브러리는 어떻게 구성되어 있을까?"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:25
msgid "Qiskit provides a number of `Algorithms <https://qiskit.org/documentation/apidoc/algorithms.html>`__ and they are grouped by category according to the task they can perform. For instance ``Minimum Eigensolvers`` to find the smallest eigen value of an operator, for example ground state energy of a chemistry Hamiltonian or a solution to an optimization problem when expressed as an Ising Hamiltonian. There are ``Linear Solvers`` for linear systems of equations problems and ``Amplitude Estimators`` for value estimation that can be used say in financial applications. The full set of categories can be seen in the Algorithms documentation link above."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:28
msgid "Algorithms are configurable and often part of the configuration will be in the form of smaller building blocks, of which different instances of the building block type can be given. For instance with ``VQE``, the Variational Quantum Eigensolver, it takes a trial wavefunction, in the form of a ``QuantumCircuit`` and a classical optimizer among other things."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:30
msgid "Let’s take a look at an example to construct a VQE instance. Here ``TwoLocal`` is the variational form (trial wavefunction), a parameterized circuit which can be varied, and ``SLSQP`` a classical optimizer. These are created as separate instances and passed to VQE when it is constructed. Trying, for example, a different classical optimizer, or variational form is simply a case of creating an instance of the one you want and passing it into VQE."
msgstr "VQE 인스턴스를 구성하는 예제를 살펴보자. 여기서 ``TwoLocal`` 은 다양한 형태 (시험 파동), 다양할 수 있는 파라미터화된 회로, 그리고 고전적인 최적화 프로그램인 ``SLSQP`` 이다. 이들은 별개의 인스턴스로서 생성되고, 구성될 때 VQE로 전달된다. 예를 들어, 다른 고전적 최적화 프로그램 또는 다양한 양식은 단순히 원하는 것의 인스턴스를 작성하여 VQE에 전달하는 경우이다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:58
msgid "Let’s draw the ansatz so we can see it’s a QuantumCircuit where θ[0] through θ[7] will be the parameters that are varied as VQE optimizer finds the minimum eigenvalue. We’ll come back to the parameters later in a working example below."
msgstr "Ansatz를 그려서(draw) QuantumCircuit임을 확인해 보자. 여기서 θ[0] 부터 θ[7] 는 VQE 옵티마이저가 최소 고유값을 찾음에 따라 변화하는 매개 변수이다. 아래의 작업 예제에서 매개변수로 다시 돌아올 것이다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:124
msgid "But more is needed before we can run the algorithm so let’s get to that next."
msgstr "하지만 알고리즘을 실행하려면 몇 가지 일들이 필요하므로 다음 단계로 넘어가도록 하겠다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:136
msgid "How to run an algorithm?"
msgstr "알고리즘을 어떻게 실행할까?"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:138
msgid "In order to run an algorithm we need to have backend, a simulator or real device, on which the circuits that comprise the algorithm can be run. So for example we can use the ``aer_simulator_statevector`` from the Aer provider."
msgstr "알고리즘을 실행하려면 알고리즘을 구성하는 회로를 실행할 수 있는 백엔드, 시뮬레이터 또는 실제 장치가 있어야 한다. 따라서 예를 들어 우리는 Aer 제공자의 ``aer_simulator_statevector`` 를 사용할 수 있다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:161
msgid "Now a backend on its own does not have information on how you might want to run the circuits etc. For example how many shots, do you want a noise model, even options around transpiling the circuits. For this Qiskit Terra has a `QuantumInstance <https://qiskit.org/documentation/stubs/qiskit.utils.QuantumInstance.html>`__ which is provided both the backend as well as various settings around the circuit processing and execution so for instance:"
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:185
msgid "Note: if you provide the backend directly then internally a QuantumInstance will be created from it, with default settings, so at all times the algorithms are working through a QuantumInstance."
msgstr "참고: 백엔드를 직접적으로 제공하면 내부적으로 QuantumInstance가 기본 설정으로 생성되므로, 알고리즘은 항상 QuantumInstance를 통해 작동한다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:187
msgid "So now we would be able to call the `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html#qiskit.algorithms.VQE.compute_minimum_eigenvalue>`__ method. The latter is the interface of choice for the application modules, such as Nature and Optimization, in order that they can work interchangeably with any algorithm within the specific category."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:199
msgid "A complete working example"
msgstr "완전한 작업 예제"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:201
msgid "Let’s put what we have learned from above together and create a complete working example. VQE will find the minimum eigenvalue, i.e. minimum energy value of a Hamiltonian operator and hence we need such an operator for VQE to work with. Such an operator is given below. This was originally created by the Nature application module as the Hamiltonian for an H2 molecule at 0.735A interatomic distance. It’s a sum of Pauli terms as below, but for now I am not going to say anything further about it since the goal is to run the algorithm, but further information on operators can be found in other tutorials."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:229
msgid "So let’s build a VQE instance passing a backend using a QuantumInstance, to the constructor. Now VQE does have setters so the QuantumInstance can also be passed later."
msgstr "그럼 QuantumInstance을 사용하여 백엔드를 전달하는 VQE 인스턴스를 구성자에 빌드해보자. 이제 VQE에는 세터(setter) 가 있어서QuantumInstance는 나중에 패스될 수도 있다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:231
msgid "Note: In order that you can run this notebook and see the exact same output the random number generator used throughout algorithms in algorithms_globals, as well as the transpiler and simulator, via the QuantumInstance, are seeded. You do not have to do this but if want to be able to reproduce the exact same outcome each time then this is how it’s done."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:233
msgid "So let’s run VQE and print the result object it returns."
msgstr "따라서 VQE를 실행하고 반환한 결과 오브젝트를 출력한다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:316
msgid "From the above result we can see it took the optimizer ``65`` evaluations of parameter values until it found the minimum eigenvalue of ``-1.85727`` which is the electronic ground state energy of the given H2 molecule. The optimal parameters of the ansatz can also be seen which are the values that were in the ansatz at the minimum value."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:328
msgid "Using VQE setting QuantumInstance after Construction"
msgstr "구축 이후 VQE 설정 QuantumInstance 사용"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:330
msgid "To close off let’s also create a VQE instance without supplying the QuantumInstance. We later set it as long as by the time VQE runs it has a QuantumInstance to use."
msgstr "종료하려면 QuantumInstance 을 제공하지 않고 VQE 인스턴스도 생성하자. 나중에 VQE가 실행될 때까지 QuantumInstance를 사용하여 설정한다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:413
msgid "As the identical seeding was used as the prior example the result can be seen to be the same."
msgstr "이전 예로서 동일한 시딩(seeding) 이 사용되었기 때문에, 결과는 동일한 것으로 보일 수 있다."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:424
msgid "This concludes this introduction to algorithms in Qiskit. Please check out the other algorithm tutorials in this series for both broader as well as more in depth coverage of the algorithms."
msgstr "이로써 Qiskit을 사용한 알고리즘 입문에 대하여 다루었다. 알고리즘에 대한 좀더 깊고 넓은 내용에 흥미가 있다면, 본 시리즈의 다른 알고리즘 사용 지침서들 또한 참고해 주시길 바란다."

