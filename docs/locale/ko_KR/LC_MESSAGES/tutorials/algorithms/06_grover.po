msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-10 14:06+0000\n"
"PO-Revision-Date: 2021-06-25 04:51\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/06_grover.po\n"
"X-Crowdin-File-ID: 9504\n"
"Language: ko_KR\n"

#: ../../tutorials/algorithms/06_grover.ipynb:10
msgid "This page was generated from `tutorials/algorithms/06_grover.ipynb`__."
msgstr "이 페이지는 `tutorials/algorithms/06_grover.ipynb`__ 로부터 생성되었다."

#: ../../tutorials/algorithms/06_grover.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/06_grover.ipynb>`_."
msgstr "`IBM 퀀텀 랩 <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/06_grover.ipynb>`_ 에서 대화식으로 실행하십시오."

#: ../../tutorials/algorithms/06_grover.ipynb:9
msgid "Grover’s Algorithm and Amplitude Amplification"
msgstr "그로버 알고리즘과 진폭 증폭"

#: ../../tutorials/algorithms/06_grover.ipynb:11
msgid "Grover’s algorithm is one of the most famous quantum algorithms introduced by Lov Grover in 1996 [1]. It has initially been proposed for unstructured search problems, i.e. for finding a marked element in a unstructured database. However, Grover’s algorithm is now a subroutine to several other algorithms, such as Grover Adaptive Search [2]. For the details of Grover’s algorithm, please see `Grover’s Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ in the Qiskit textbook."
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:13
msgid "Qiskit implements Grover’s algorithm in the ``Grover`` class. This class also includes the generalized version, Amplitude Amplification [3], and allows setting individual iterations and other meta-settings to Grover’s algorithm."
msgstr "키스킷은 ``Grover`` 클래스에서 Grover의 알고리즘을 구현한다. 이 클래스에는 일반화된 버전인 진폭 증폭 [3] 이 포함되며, 개별 반복 및 기타 메타 설정을 Grover의 알고리즘으로 설정할 수 있다."

#: ../../tutorials/algorithms/06_grover.ipynb:15
#: ../../tutorials/algorithms/06_grover.ipynb:719
msgid "**References:**"
msgstr "**참조:**"

#: ../../tutorials/algorithms/06_grover.ipynb:17
msgid "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"
msgstr "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"

#: ../../tutorials/algorithms/06_grover.ipynb:19
msgid "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"
msgstr "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"

#: ../../tutorials/algorithms/06_grover.ipynb:21
msgid "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"
msgstr "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"

#: ../../tutorials/algorithms/06_grover.ipynb:33
msgid "Grover’s algorithm"
msgstr "그로버 알고리즘"

#: ../../tutorials/algorithms/06_grover.ipynb:35
msgid "Grover’s algorithm uses the Grover operator :math:`\\mathcal{Q}` to amplify the amplitudes of the good states:"
msgstr "그로버 알고리즘은 그로버 연산자 :math:`\\mathcal{Q}` 를 사용해서 좋은 상태들의 진폭을 증폭시킨다."

#: ../../tutorials/algorithms/06_grover.ipynb:37
msgid "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"
msgstr "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"

#: ../../tutorials/algorithms/06_grover.ipynb:42
msgid "Here, \\* :math:`\\mathcal{A}` is the initial search state for the algorithm, which is just Hadamards, :math:`H^{\\otimes n}` for the textbook Grover search, but can be more elaborate for Amplitude Amplification \\* :math:`\\mathcal{S_0}` is the reflection about the all 0 state"
msgstr "여기서, \\* :math:`\\mathcal{A}` 는 알고리즘의 초기 탐색 상태이며, 이는 하다마드 (Hadamards), 그로버(Grover) 검색 교과서의 경우 :math:`H^{\\otimes n}` 로도 나타낼 수 있지만 이와 같이 표시할 경우 모든 큐비트가 0인 상태를 나타내는 진폭 증폭 (Amplitude Amplification) \\* :math:`\\mathcal{S_0}` 에 대해 더 자세히 설명할 수 있다."

#: ../../tutorials/algorithms/06_grover.ipynb:44
msgid "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"
msgstr "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"

#: ../../tutorials/algorithms/06_grover.ipynb:49
msgid "\\* :math:`\\mathcal{S_f}` is the oracle that applies"
msgstr "\\* :math:`\\mathcal{S_f}` 는 적용되는 오라클이며"

#: ../../tutorials/algorithms/06_grover.ipynb:51
msgid "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"
msgstr "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"

#: ../../tutorials/algorithms/06_grover.ipynb:56
msgid "where :math:`f(x)` is 1 if :math:`x` is a good state and otherwise 0."
msgstr "여기서 :math:`x` 가 바람직한 상태일 때, :math:`f(x)` 는 1이고, 그렇지 않으면 0이다."

#: ../../tutorials/algorithms/06_grover.ipynb:58
msgid "In a nutshell, Grover’s algorithm applies different powers of :math:`\\mathcal{Q}` and after each execution checks whether a good solution has been found."
msgstr "간단히 말해서, 그로버 알고리즘은 :math:`\\mathcal{Q}` 를 다양한 지수(power)로 적용하여 실행한 후, 각 실행에서 좋은 솔루션이 있는지를 확인한다."

#: ../../tutorials/algorithms/06_grover.ipynb:61
msgid "Running Grover’s algorithm"
msgstr "그로버 알고리즘 실행하기"

#: ../../tutorials/algorithms/06_grover.ipynb:63
msgid "To run Grover’s algorithm with the ``Grover`` class, firstly, we need to specify an oracle for the circuit of Grover’s algorithm. In the following example, we use ``QuantumCircuit`` as the oracle of Grover’s algorithm. However, there are several other class that we can use as the oracle of Grover’s algorithm. We talk about them later in this tutorial."
msgstr "그로버 알고리즘을 ``Grover`` 클래스로 실행하려면 먼저 그로버 알고리즘 회로에 오라클을 지정해야 한다. 다음 예에서 우리는 ``QuantumCircuit`` 을 그로버 알고리즘의 오라클로 사용한다. 하지만, 그로버 알고리즘의 오라클로 사용할 수 있는 몇 가지 다른 클래스가 있다. 이들에 대해 우리는 이 사용 지침서의 뒷부분에서 이야기한다."

#: ../../tutorials/algorithms/06_grover.ipynb:65
msgid "Note that the oracle for ``Grover`` must be a *phase-flip* oracle. That is, it multiplies the amplitudes of the of “good states” by a factor of :math:`-1`. We explain later how to convert a *bit-flip* oracle to a phase-flip oracle."
msgstr "``Grover`` 오라클에는 *phase-flip* 오라클이 있다는 것을 주목하라. 즉, “좋은 상태” 의 진폭을 :math:`-1` 로 곱하는 것이다. 우리는 나중에 다시 한 번 *비트-플립* 오라클을 위상-플립으로 변환하는 방법을 설명한다."

#: ../../tutorials/algorithms/06_grover.ipynb:109
msgid "Then, we specify a backend and call the ``run`` method of ``Grover`` with a backend to execute the circuits. The returned result type is a ``GroverResult``."
msgstr "다음으로, 백엔드를 지정하고 ``Grover`` 의 ``run`` 메서드를 백엔드와 함께 호출하여 회로를 실행한다. 반환된 결과 유형은 ``GroverResult`` 이다."

#: ../../tutorials/algorithms/06_grover.ipynb:111
msgid "If the search was successful, the ``oracle_evaluation`` attribute of the result will be ``True``. In this case, the most sampled measurement, ``top_measurement``, is one of the “good states”. Otherwise, ``oracle_evaluation`` will be False."
msgstr "만약 검색이 성공하면 도출된 결과의 ``oracle_evaluation`` 속성은 ``참`` 이 될 것이다. 이 경우에는, 가장 샘플화된 측정인 ``top_measurement`` 는 “좋은 상태” 중 하나이며 그렇지 않다면 ``oracle_evaluation`` 은 거짓이 될 것이다."

#: ../../tutorials/algorithms/06_grover.ipynb:167
msgid "In the example, the result of ``top_measurement`` is ``11`` which is one of “good state”. Thus, we succeeded to find the answer by using ``Grover``."
msgstr "예를 들어, ``top_measurement`` 의 결과는 ``11`` 이다. ``11`` 은 좋은 상태 중 하나이다. 그래서 우리는 ``Grover`` 를 이용해 답을 찾는 데 성공했다."

#: ../../tutorials/algorithms/06_grover.ipynb:179
msgid "Using the different types of classes as the oracle of ``Grover``"
msgstr "다양한 유형의 클래스를 ``Grover`` 의 오라클로 사용하기"

#: ../../tutorials/algorithms/06_grover.ipynb:181
msgid "In the above example, we used ``QuantumCircuit`` as the oracle of ``Grover``. However, we can also use ``qiskit.quantum_info.Statevector`` as oracle. All the following examples are when :math:`|11\\rangle` is “good state”"
msgstr "위의 예에서 우리는 ``QuantumCircuit`` 을 ``Grover`` 의 오라클로 사용했다. 그러나 우리는 또한 ``qiskit.quantum_info.Statevector`` 를 오라클로 사용할 수도 있다. 다음의 예제들은 모두 :math:`|11\\rangle` 가 “좋은 상태”일때 이다."

#: ../../tutorials/algorithms/06_grover.ipynb:236
msgid "Internally, the statevector is mapped to a quantum circuit:"
msgstr "내부적으로, 상태 벡터는 양자 회로로 대응된다."

#: ../../tutorials/algorithms/06_grover.ipynb:266
msgid "Qiskit allows for an easy construction of more complex oracles: \\* ``PhaseOracle``: for parsing logical expressions such as ``'~a | b'``. This is especially useful for solving 3-SAT problems and is shown in the accompanying `Grover Examples <07_grover_examples.ipynb>`__ tutorial."
msgstr "키스킷을 사용하면 보다 복잡한 오라클을 쉽게 구성할 수 있다. \\* ``PhaseOracle``: ``'~a | b'`` 와 같은 논리 식을 구문 분석하는 데 사용된다. 이는 3-SAT 문제를 해결하는 데 특히 유용하며 `Grover Examples <07_grover_examples.ipynb>`__ 사용 지침서에 나와 있다."

#: ../../tutorials/algorithms/06_grover.ipynb:268
msgid "Here we’ll use the ``PhaseOracle`` for the simple example of finding the state :math:`|11\\rangle`, which corresponds to ``'a & b'``."
msgstr "여기서는 ``'a & b'`` 에 해당하는 상태 :math:`|11\\rangle` 를 찾는 간단한 예제로 ``PhaseOracle`` 을 사용한다."

#: ../../tutorials/algorithms/06_grover.ipynb:307
msgid "You can observe, that this oracle is actually implemented with three qubits instead of two!"
msgstr "이 오라클은 실제로 2개가 아닌 3개의 큐비트로 구현된다는 걸 알 수 있다!"

#: ../../tutorials/algorithms/06_grover.ipynb:309
msgid "That is because the ``PhaseOracle`` is not a phase-flip oracle (which flips the phase of the good state) but a bit-flip oracle. This means it flips the state of an auxiliary qubit if the other qubits satisfy the condition. For Grover’s algorithm, however, we require a phase-flip oracle. To convert the bit-flip oracle to a phase-flip oracle we sandwich the controlled-NOT by :math:`X` and :math:`H` gates, as you can see in the circuit above."
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:311
msgid "**Note:** This transformation from a bit-flip to a phase-flip oracle holds generally and you can use this to convert your oracle to the right representation."
msgstr "**참고:** 비트-플립에서 위상-플립 오라클로의 이러한 변환은 일반적으로 유지되며, 이를 사용하여 오라클을 올바른 표현으로 변환할 수 있다."

#: ../../tutorials/algorithms/06_grover.ipynb:323
msgid "Amplitude amplification"
msgstr "진폭 증폭"

#: ../../tutorials/algorithms/06_grover.ipynb:325
msgid "Grover’s algorithm uses Hadamard gates to create the uniform superposition of all the states at the beginning of the Grover operator :math:`\\mathcal{Q}`. If some information on the good states is available, it might be useful to not start in a uniform superposition but only initialize specific states. This, generalized, version of Grover’s algorithm is referred to *Amplitude Amplification*."
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:327
msgid "In Qiskit, the initial superposition state can easily be adjusted by setting the ``state_preparation`` argument."
msgstr "키스킷에서 초기 중첩 상태는 ``state_preparation`` 전달인자를 설정하여 쉽게 조정할 수 있다."

#: ../../tutorials/algorithms/06_grover.ipynb:330
msgid "State preparation"
msgstr "상태 준비"

#: ../../tutorials/algorithms/06_grover.ipynb:332
msgid "A ``state_preparation`` argument is used to specify a quantum circuit that prepares a quantum state for the start point of the amplitude amplification. By default, a circuit with $H^{:nbsphinx-math:`\\otimes `n} $ is used to prepare uniform superposition (so it will be Grover’s search). The diffusion circuit of the amplitude amplification reflects ``state_preparation`` automatically."
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:438
msgid "Full flexibility"
msgstr "완전한 유연성"

#: ../../tutorials/algorithms/06_grover.ipynb:440
msgid "For more advanced use, it is also possible to specify the entire Grover operator by setting the ``grover_operator`` argument. This might be useful if you know more efficient implementation for :math:`\\mathcal{Q}` than the default construction via zero reflection, oracle and state preparation."
msgstr "고급 사용을 위해서는 ``grover_operator`` 인수를 설정하여 전체 그로버 연산자를 지정할 수도 있다. 이는 0을 기준으로 한 반사, 오라클및 상태 준비를 통해 기본 구성보다 :math:`\\mathcal{Q}` 의 효율적인 구현을 알고 있는 경우에 유용할 수 있다."

#: ../../tutorials/algorithms/06_grover.ipynb:442
msgid "The ``qiskit.circuit.library.GroverOperator`` can be a good starting point and offers more options for an automated construction of the Grover operator. You can for instance \\* set the ``mcx_mode`` \\* ignore qubits in the zero reflection by setting ``reflection_qubits`` \\* explicitly exchange the :math:`\\mathcal{S_f}, \\mathcal{S_0}` and :math:`\\mathcal{A}` operations using the ``oracle``, ``zero_reflection`` and ``state_preparation`` arguments"
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:453
msgid "For instance, imagine the good state is a three qubit state :math:`|111\\rangle` but we used 2 additional qubits as auxiliary qubits."
msgstr "예를 들어, 좋은 상태는 3개의 큐비트 상태 ( :math:`|111\\rangle`) 이지만, 2개의 추가적인 큐비트를 사용했다고 가정해보자."

#: ../../tutorials/algorithms/06_grover.ipynb:487
msgid "Then, per default, the Grover operator implements the zero reflection on all five qubits."
msgstr "그 다음, 기본적으로, 그로버 연산자는 5개의 모든 큐비트에 대해 제로 반사를 구현한다."

#: ../../tutorials/algorithms/06_grover.ipynb:518
msgid "But we know that we only need to consider the first three:"
msgstr "하지만 우리는 처음 세 가지만을 고려해도 된다는 것을 알고 있다."

#: ../../tutorials/algorithms/06_grover.ipynb:550
msgid "Dive into other arguments of ``Grover``"
msgstr "``Grover`` 의 여러 인수들에 대하여 알아보기"

#: ../../tutorials/algorithms/06_grover.ipynb:552
msgid "``Grover`` has arguments other than ``oracle`` and ``state_preparation``. We will explain them in this section."
msgstr "``Grover`` 는 ``oracle`` 과 ``state_preparation`` 이외에도 여러 인수들을 가지고 있다. 이 섹션에서는 이에 대하여 설명할 것이다."

#: ../../tutorials/algorithms/06_grover.ipynb:555
msgid "Specifying ``good_state``"
msgstr "``good_state`` 를 지정하기"

#: ../../tutorials/algorithms/06_grover.ipynb:557
msgid "``good_state`` is used to check whether the measurement result is correct or not internally. It can be a list of binary strings, a list of integer, ``Statevector``, and Callable. If the input is a list of bitstrings, each bitstrings in the list represents a good state. If the input is a list of integer, each integer represent the index of the good state to be :math:`|1\\rangle`. If it is a ``Statevector``, it represents a superposition of all good states."
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:711
msgid "The number of ``iterations``"
msgstr "``iterations`` 의 횟수"

#: ../../tutorials/algorithms/06_grover.ipynb:713
msgid "The number of repetition of applying the Grover operator is important to obtain the correct result with Grover’s algorithm. The number of iteration can be set by the ``iteration`` argument of ``Grover``. The following inputs are supported: \\* an integer to specify a single power of the Grover operator that’s applied \\* or a list of integers, in which all these different powers of the Grover operator are run consecutively and after each time we check if a correct solution has been found"
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:715
msgid "Additionally there is the ``sample_from_iterations`` argument. When it is ``True``, instead of the specific power in ``iterations``, a random integer between 0 and the value in ``iteration`` is used as the power Grover’s operator. This approach is useful when we don’t even know the number of solution."
msgstr "이와 더불어 ``sample_from_iterations`` 인수가 있다. ``True`` 이면 ``iterations`` 의 특정 거듭 제곱 대신 0과 ``iterations`` 의 값 사이의 임의의 정수가 그로버 연산자의 제곱으로 사용된다. 이러한 접근 방식은 솔루션의 개수를 모를 때 조차도 유용하다."

#: ../../tutorials/algorithms/06_grover.ipynb:717
msgid "For more details of the algorithm using ``sample_from_iterations``, see [4]."
msgstr "``sample_from_iterations`` 를 사용하는 알고리즘에 대한 자세한 내용은 [4] 를 참조하라."

#: ../../tutorials/algorithms/06_grover.ipynb:721
msgid "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"
msgstr "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"

#: ../../tutorials/algorithms/06_grover.ipynb:774
msgid "When the number of solutions is known, we can also use a static method ``optimal_num_iterations`` to find the optimal number of iterations. Note that the output iterations is an approximate value. When the number of qubits is small, the output iterations may not be optimal."
msgstr "솔루션의 개수를 알고있는 경우 정적 메서드 ``optimal_num_iterations`` 를 사용하여 최적의 반복 횟수를 찾을 수도 있다. 출력된 반복 횟수는 대략적인(approximate) 값임에 주의하여야 한다. 큐비트 수가 적으면 출력된 값은 최적이 아닐 수도 있다."

#: ../../tutorials/algorithms/06_grover.ipynb:817
msgid "Applying ``post_processing``"
msgstr "``post_processing`` 적용하기"

#: ../../tutorials/algorithms/06_grover.ipynb:819
msgid "We can apply an optional post processing to the top measurement for ease of readability. It can be used e.g. to convert from the bit-representation of the measurement ``[1, 0, 1]`` to a DIMACS CNF format ``[1, -2, 3]``."
msgstr "가독성을 높이기 위해 상단 측정에 선택적 후처리를 적용할 수 있다. 이는 예를 들어 측정된 ``[1, 0, 1]`` 의 비트 표현 형식으로부터 DIMACS CNF 형식의 ``[1, -2, 3]`` 으로 변환하는 데 사용될 수 있다."

