msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-07 16:27+0000\n"
"PO-Revision-Date: 2020-12-21 22:18\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/09_textbook_algorithms.po\n"
"X-Crowdin-File-ID: 9460\n"
"Language: ko_KR\n"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:10
msgid "This page was generated from `tutorials/algorithms/09_textbook_algorithms.ipynb`__."
msgstr "이 페이지는 `tutorials/algorithms/09_textbook_algorithms.ipynb`__ 에서 생성되었다."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/09_textbook_algorithms.ipynb>`_."
msgstr "`IBM 퀀텀 랩 <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/09_textbook_algorithms.ipynb>`_ 에서 대화식으로 실행하시오."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:9
msgid "Textbook and Shor’s algorithms"
msgstr "사용 지침서와 쇼어 알고리즘"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:11
msgid "Qiskit contains implementations of the well known textbook quantum algorithms such as the `Deutsch-Jozsa algorithm <https://qiskit.org/textbook/ch-algorithms/deutsch-jozsa.html>`__, the `Bernstein-Vazirani algorithm <https://qiskit.org/textbook/ch-algorithms/bernstein-vazirani.html>`__ and `Simon’s algorithm <https://qiskit.org/textbook/ch-algorithms/simon.html>`__."
msgstr "키스킷에서는 `Deutsch-Jozsa algorithm <https://qiskit.org/textbook/ch-algorithms/deutsch-jozsa.html>`__, `Bernstein-Vazirani algorithm <https://qiskit.org/textbook/ch-algorithms/bernstein-vazirani.html>`__ 및 `Simon’s algorithm <https://qiskit.org/textbook/ch-algorithms/simon.html>`__ 과 같이 잘 알려진 양자 알고리즘들을 구현해두어 포함하고 있다."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:13
msgid "Qiskit also has an implementation of `Shor’s algorithm <https://qiskit.org/textbook/ch-algorithms/shor.html>`__."
msgstr "키스킷에는 `Shor’s algorithm <https://qiskit.org/textbook/ch-algorithms/shor.html>`__ 이 구현되어 있다."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:15
msgid "The preceding references have detailed explanations and build-out of circuits whereas this notebook has examples with the pre-built algorithms in Qiskit that you can use for experimentation and education purposes."
msgstr "이전 참조들은 회로들의 상세한 설명들 및 build-out of circuits를 가지는 반면, 이 노트북은 실험 및 교육 목적으로 사용할 수 있는 키스킷에서 사전에 구현된 알고리즘들을 예로 들어 설명한다."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:42
msgid "Deutsch-Jozsa algorithm"
msgstr "도이체-조자 (Deutsch-Jozsa) 알고리즘"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:44
msgid "Lets start with the `Deutsch-Jozsa algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.DeutschJozsa.html>`__ which can determine if a function is ``'balanced'`` or ``'constant'`` given such a function as input. We can experiment with it in Qiskit using an oracles created from a truth tables. So for example, we can create a ``TruthTableOracle`` instance as follows."
msgstr "입력과 같은 함수가 주어졌을때, 함수가 ``'balanced'`` 인지 ``'constant'`` 인지를 결정할 수 있는`Deutsch-Jozsa algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.DeutschJozsa.html>`__ 알고리즘 부터 시작해 보자. 진리표에서 생성된 오라클을 사용하여 키스킷에서 실험할 수 있다. 예를 들어, 다음과 같이 ``TruthTableOracle`` 인스턴스를 만들 수 있다."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:66
msgid "As shown, the truthtable is specified with the ``bitstr`` containing values of all entries in the table. It has length :math:`8`, so the corresponding truth table is of :math:`3` input bits. We can of course see that this truth table represents a ``'balanced'`` function as half of values are :math:`1` and the other half :math:`0`."
msgstr "보여지는 바와 같이, 진리표는 테이블의 모든 항목 값을 포함하는 ``bitstr`` 로 지정된다. 길이가 :math:`8` 이므로 해당 진리표는 :math:`3` 입력 비트이다. 물론 값의 절반은 :math:`1` 이고 나머지 절반은 :math:`0` 이므로 이 진리표가 ``'balanced'`` 함수를 나타냄을 알 수 있다."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:68
msgid "It might seem like a moot point running Deutsch-Jozsa on a truthtable as the function outputs are literally listed as the truthtable’s values. The intention is to create an oracle circuit whose groundtruth information is readily available to us but obviously not to the quantum Deutsch-Jozsa algorithm that is to act upon the oracle circuit. In more realistic situations, the oracle circuit would be provided as a blackbox to the algorihtm."
msgstr "함수 출력이 문자 그대로 트루 테이블의 값으로 나열되어 있기 때문에 트루 테이블에 있는 Deutsch-Jozsa를 실행하는 것처럼 보일 수도 있다. 그 의도는, 그 근거의 진실 정보가 우리에게 쉽게 이용가능하지만, oracle 회로에 작용하는 quantum Deutsch-Jozsa 알고리즘에는 명백하지 않은 oracle 회로를 생성하기 위한 것이다. 보다 현실적인 상황에서, oracle 회로는  알고리즘에 대한 블랙박스로서 제공될 것이다."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:70
msgid "Above said, we can inspect the circuit corresponding to the function encoded in the ``TruthTableOracle`` instance."
msgstr "위에서는 `TruthTableOracle`` 인스턴스에서 인코딩된 기능에 해당하는 회로를 검사할 수 있다."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:100
msgid "As seen, the :math:`v_i`\\ ’s correspond to the 3 input bits; the :math:`o_0` is the oracle’s output qubit; the :math:`a_0` is an ancilla qubit."
msgstr "보여지는 바와 같이, :math:`v_i` 는 3 개의 입력 비트에 대응하며; :math:`o_0` 는 오라클의 출력 큐비트이고, :math:`a_0` 는 보조 큐비트(ancilla qubit)이다."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:102
msgid "Next we can simply create a ``DeutschJozsa`` instance using the oracle, and run it to check the result."
msgstr "다음으로, 우리는 단순히 oracle을 생성하여 ``DeutschJozsa`` 인스턴스를 생성하고, 이를 실행하여 결과를 확인할 수 있다."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:145
msgid "We can of course quickly put together another example for a ``'constant'`` function, as follows."
msgstr "우리는 물론 빠르게 다음과 같이 ``'constant'`` 기능에 대한 또 다른 예를 들 수 있다."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:191
msgid "Bernstein-Vazirani algorithm"
msgstr "번스타인-바조니 (Bernstein-Vazirani) 알고리즘"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:193
msgid "Next the `Bernstein-Vazirani algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.BernsteinVazirani.html>`__ which tries to find a hidden string. Again, for the example, we create a TruthTableOracle instance."
msgstr "다음으로 숨겨둔 문자열을 찾는 `Bernstein-Vazirani algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.BernsteinVazirani.html>`__ 이 있다. 이 예제에서는 다시 한번 TruthTableOracle 인스턴스를 작성한다."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:215
msgid "As shown, the truthtable is specified with the ``bitstr`` containing values of all entries in the table. It has length :math:`8`, so the corresponding truth table is of :math:`3` input bits. The truthtable represents the function mappings as follows:"
msgstr "보여지는 바와 같이, 진리표는 테이블의 모든 항목 값을 포함하는 ``bitstr`` 로 지정된다. 길이가 :math:`8` 이므로 해당 진리표는 :math:`3` 입력 비트이다. 진리표는 다음과 같이 함수 매핑을 나타낸다:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:217
msgid ":math:`\\mathbf{a} \\cdot 000 \\mod 2 = 0`"
msgstr ":math:`\\mathbf{a} \\cdot 000 \\mod 2 = 0`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:218
msgid ":math:`\\mathbf{a} \\cdot 001 \\mod 2 = 0`"
msgstr ":math:`\\mathbf{a} \\cdot 001 \\mod 2 = 0`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:219
msgid ":math:`\\mathbf{a} \\cdot 010 \\mod 2 = 1`"
msgstr ":math:` \\mathbf{a} \\cdot 010 \\mod 2 = 1 `"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:220
msgid ":math:`\\mathbf{a} \\cdot 011 \\mod 2 = 1`"
msgstr ":math:` \\mathbf{a} \\cdot 011 \\mod 2 = 1 `"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:221
msgid ":math:`\\mathbf{a} \\cdot 100 \\mod 2 = 1`"
msgstr ":math:`\\mathbf{a} \\cdot 100 \\mod 2 = 1`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:222
msgid ":math:`\\mathbf{a} \\cdot 101 \\mod 2 = 1`"
msgstr ":math:` \\mathbf{a} \\cdot 101 \\mod 2 = 1 `"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:223
msgid ":math:`\\mathbf{a} \\cdot 110 \\mod 2 = 0`"
msgstr ":math:` \\mathbf{a} \\cdot 110 \\mod 2 = 0 `"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:224
msgid ":math:`\\mathbf{a} \\cdot 111 \\mod 2 = 0`"
msgstr ":math:` \\mathbf{a} \\cdot 111 \\mod 2 = 0 `"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:226
msgid "And obviously the goal is to find the bitstring :math:`\\mathbf{a}` that satisfies all the inner product equations."
msgstr "그리고 목표는 모든 내부 제품 방정식을 만족시키는 비트스트링 :math:`\\mathbf{a}` 를 찾는 것이다."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:228
msgid "Lets again look at the oracle circuit, that now corresponds to the binary function encoded in the ``TruthTableOracle`` instance."
msgstr "Oracle 회로를 다시 살펴보면, 이제 ``TruthTableOracle`` 인스턴스에 인코딩된 바이너리 함수에 해당한다."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:258
msgid "Again the :math:`v_i`\\ ’s correspond to the 3 input bits; the :math:`o_0` is the oracle’s output qubit; the :math:`a_0` is an ancilla qubit."
msgstr "마찬가지로, :math:`v_i` 는 3 개의 입력 비트에 대응하며; :math:`o_0` 는 오라클의 출력 큐비트이고, :math:`a_0` 는 보조 큐비트(ancilla qubit)이다."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:260
msgid "Let us first compute the groundtruth :math:`\\mathbf{a}` classically:"
msgstr "먼저 groundtruth :math:`\\mathbf{a}` 를 고전적으로 계산해보자:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:305
msgid "Next we can create a ``BernsteinVazirani`` instance using the oracle, and run it to check the result against the groundtruth."
msgstr "다음으로 오라클을 사용하여 ``BernsteinVazirani`` 인스턴스를 생성하고 이를 실행하여 groundtruth에 대한 결과를 확인할 수 있다."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:350
msgid "Simon’s algorithm"
msgstr "사이먼의 알고리즘"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:352
msgid "`Simon’s algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Simon.html>`__ is used to solve `Simon’s problem <https://en.wikipedia.org/wiki/Simon's_problem>`__. Once again, for the example, we create a TruthTableOracle instance, where the construction shows a different form."
msgstr "`Simon’s algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Simon.html>`__ 은 `Simon’s problem <https://en.wikipedia.org/wiki/Simon's_problem>`__ 를 해결하는 데 사용된다. 이 예제에서는 다시 한번 TruthTableOracle 인스턴스를 작성하며, 여기서는 다른 형태의 구성을 보여준다."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:378
msgid "As shown, the truthtable is specified with three length-8 bitstrings, each containing the values of all entries for a particular output column in the table. Each bitstring has length :math:`8`, so the truthtable has :math:`3` input bits; There are :math:`3` bitstrings, so the truthtable has :math:`3` output bits."
msgstr "보여지는 대로, 진리표는 3 개의 길이-8 비트 문자열로 지정되며, 각각은 테이블에서 특정 출력 열에 대한 모든 항목의 값을 포함한다. 각 비트 문자열의 길이는 :math:`8` 이므로, 진리표에는 :math:`3` 입력 비트가 있으며; :math:`3` 비트 문자열이 있으므로 진리표에는 :math:`3` 출력 비트가 있다."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:380
msgid "The function :math:`f` represented by the truthtable is promised to be either 1-to-1 or 2-to-1. Our goal is to determine which. For the case of 2-to-1, we also need to compute the mask :math:`\\mathbf{s}`, which satisfies :math:`\\forall \\mathbf{x},\\mathbf{y}`: :math:`\\mathbf{x} \\oplus \\mathbf{y} = \\mathbf{s}` iff :math:`f(\\mathbf{x}) = f(\\mathbf{y})`. Apparently, if :math:`f` is 1-to-1, the corresponding mask :math:`\\mathbf{s} = \\mathbf{0}`."
msgstr "진리표로 표현되는 함수 :math:`f` 는 1대1 또는 2대1로 약속된다. 우리의 목표는 주어진 함수가 둘 중 무엇인지를 결정하는 것이다. 주어진 함수가 2대1인 경우, 마스크 :math:`\\mathbf{s}` 도 계산해야 하는데, 이는 :math:`\\forall \\mathbf{x},\\mathbf{y}`: :math:`\\mathbf{x} \\oplus \\mathbf{y} = \\mathbf{s}` iff :math:`f(\\mathbf{x}) = f(\\mathbf{y})` 를 만족한다. 명백하게도, 만약 :math:`f` 가 1대1이면, 이에 해당하는 마스크는 :math:`\\mathbf{s} = \\mathbf{0}` 이다."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:382
msgid "Let us first compute the groundtruth mask :math:`\\mathbf{s}` classically:"
msgstr "먼저 groundtruth mask :math:`\\mathbf{s}` 를 고전적으로 계산해보자:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:468
msgid "We can also quickly try a truthtable that represents a 1-to-1 function (i.e., the corresponding mask is :math:`\\mathbf{0}`), as follows."
msgstr "또한 다음과 같이 일대일 함수 (즉, :math:`\\mathbf{0}` mask에 대응하는) 를 나타내는 진리표를 빠르게 시도해볼 수 있다."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:523
msgid "Shor’s Factoring algorithm"
msgstr "쇼어의 소인수분해 알고리즘"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:525
msgid "`Shor’s Factoring algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Shor.html>`__ is one of the most well-known quantum algorithms and finds the prime factors for input integer :math:`N` in polynomial time. The algorithm implementation in Qiskit is simply provided a target integer to be factored and run, as follows:"
msgstr "`Shor’s Factoring algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Shor.html>`__ 은 가장 잘 알려진 양자 알고리즘 중 하나로 다항식 시간 내에 입력된 정수 :math:`N` 의 소인수(prime factor)를 찾는다. 키스킷에서 구현된 알고리즘은 단순히 목표 정수를 입력받아 실행하는데, 다음과 같이:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:570
msgid "Note: this implementation of Shor’s algorithm uses :math:`4n + 2` qubits, where :math:`n` is the number of bits representing the integer in binary. So in practice, for now, this implementation is restricted to factorizing small integers. Given the above value of N we compute :math:`4n +2` below and confirm the size from the actual circuit."
msgstr "참고: 쇼어의 알고리즘 구현은 :math:`4n + 2` 큐비트를 사용하며 여기서 :math:`n` 은 정수의 바이너리 비트 개수이다. 따라서 실제로 현재 이 구현은 크기가 작은 정수를 소인수 분해하는 것으로 제한된다. 위의 N 값이 주어지면 :math:`4n +2` 를 계산하고 실제 회로에서 크기를 확인한다."

