msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-26 21:24+0000\n"
"PO-Revision-Date: 2023-08-14 19:15\n"
"Last-Translator: \n"
"Language: ko\n"
"Language-Team: Korean\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/textbook/01_IQPE.po\n"
"X-Crowdin-File-ID: 9622\n"

#: ../../tutorials/textbook/01_IQPE.ipynb:10
msgid "This page was generated from `tutorials/textbook/01_IQPE.ipynb`__."
msgstr "이 페이지는 `tutorials/textbook/01_IQPE.ipynb`__ 에서 생성되었다."

#: ../../tutorials/textbook/01_IQPE.ipynb:9
msgid "Iterative Quantum Phase Estimation Algorithm"
msgstr "반복 양자 위상 추정 알고리즘 (IQPE)"

#: ../../tutorials/textbook/01_IQPE.ipynb:11
msgid "The goal of this tutorial is to understand how the Iterative Phase Estimation (IPE) algorithm works, why would we use the IPE algorithm instead of the QPE (Quantum Phase Estimation) algorithm and how to build it with Qiskit using the same circuit exploiting reset gate and the ``c_if`` method that allows to apply gates conditioned by the values stored in a classical register, resulting from previous measurements."
msgstr "이 튜토리얼의 목표는 Iterative Phase Estimation (IPE, 반복 위상 추정) 알고리즘이 어떻게 작동되는지, 왜 우리가 QPE (Quantum Phase Estimation) 가 아니라 IPE 알고리즘을 사용해야 하는지, 그리고 어떻게 Qiskit을 사용해서 이 알고리즘을 생성할 수 있는지를 이해하는 것이다. 이 알고리즘을 생성할 때에는 초기화 게이트와 ``c_if`` 메서드를 포함한 회로를 사용하면 되는데, 이 ``c_if`` 메서드는 이전의 측정들에서 비롯된 고전 레지스터에 저장된 값들로 조절된 게이트들을 적용할 수 있게 한다."

#: ../../tutorials/textbook/01_IQPE.ipynb:13
msgid "**References**"
msgstr "**참조**"

#: ../../tutorials/textbook/01_IQPE.ipynb:15
msgid "`Section 2 of Lab 4: Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__"
msgstr "`랩 4의 2절: 반복 단계 추정 (IPE) 알고리즘 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__"

#: ../../tutorials/textbook/01_IQPE.ipynb:17
msgid "`Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__"
msgstr "`Ch.3.6 양자 위상 추정 <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__"

#: ../../tutorials/textbook/01_IQPE.ipynb:42
msgid "Conditioned gates: the c_if method"
msgstr "조건부 게이트: c_if 메소드"

#: ../../tutorials/textbook/01_IQPE.ipynb:53
msgid "Before starting the IPE algorithm, we will give a brief tutorial about the Qiskit conditional method, c_if, as it goes into building the IPE circuit."
msgstr "IPE 알고리즘을 시작하기 전에, IPE 회로를 만들어 내는 Qiskit 조건부 메서드 c_if에 관한 간단한 튜토리얼을 제공할 것이다."

#: ../../tutorials/textbook/01_IQPE.ipynb:55
msgid "``c_if`` is a function (actually a method of the gate class) to perform conditioned operations based on the value stored previously in a classical register. With this feature you can apply gates after a measurement in the same circuit conditioned by the measurement outcome."
msgstr "(사실상 게이트 클래스의 메서드인) ``c_if`` 는 고전 레지스터에 저장된 값을 기반으로 조건부 연산을 하는 함수이다. 이 기능으로 회로의 측정 이후에 측정 결과를 조건부로 가지는 게이트를 적용할 수 있다."

#: ../../tutorials/textbook/01_IQPE.ipynb:57
msgid "For example, the following code will execute the :math:`X` gate if the value of the classical register is :math:`0`."
msgstr "예를 들어, 다음의 코드는 고전 레지스터의 값이 :math:`0` 인 경우에 :math:`X` 게이트를 실행한다."

#: ../../tutorials/textbook/01_IQPE.ipynb:93
msgid "We highlight that the method c_if expects as the first argument a whole classical register, not a single classical bit (or a list of classical bits), and as the second argument a value in decimal representation (a non-negative integer), not the value of a single bit, 0, or 1 (or a list/string of binary digits)."
msgstr "강조할만한 것은 메서드 c_if는 하나의 고전 비트 (또는 고전 비트의 리스트) 가 아닌, 전체 고전 레지스터를 첫 번째 인수로 가지고, 하나의 비트값 0 또는 1 (또는 이진수 리스트/문자열) 이 아닌 (음수가 아닌) 십진수 표현 값을 두 번째 인수로 가질 것으로 기대한다는 것이다."

#: ../../tutorials/textbook/01_IQPE.ipynb:95
msgid "Let's make another example. Consider that we want to perform a bit flip on the third qubit after the measurements in the following circuit, when the results of the measurement of :math:`q_0` and :math:`q_1` are both :math:`1`."
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:133
msgid "We want to apply the :math:`X` gate, only if both the results of the measurement of :math:`q_0` and :math:`q_1` are :math:`1`. We can do this using the c_if method, conditioning the application of :math:`X` depending on the value passed as argument to c_if."
msgstr ":math:`q_0` 와 :math:`q_1` 의 측정 결과값이 모두 :math:`1` 인 경우에만 :math:`X` 게이트를 적용하고자 한다. c_if에 인수로 전달된 값에 따라 :math:`X` 의 적용을 조정하는 c_if 메서드를 사용하여 이 작업을 수행할 수 있다."

#: ../../tutorials/textbook/01_IQPE.ipynb:135
msgid "We will have to encode the value to pass to the c_if method such that it will check the values 011 and 111 (in binary representation), since it does not matter what :math:`q_2` is measured as."
msgstr ":math:`q_2` 가 무엇으로 측정되는지는 중요하지 않기 때문에 (이진 표현에서) 011 및 111의 값을 확인하도록 c_if 메서드에 전달될 값을 암호화해야 한다."

#: ../../tutorials/textbook/01_IQPE.ipynb:137
msgid "The 2 integer values in decimal representation:"
msgstr "두 정수 값의 십진수 표현은 다음과 같다:"

#: ../../tutorials/textbook/01_IQPE.ipynb:148
msgid "|330e1b62db344e379ea36318476c352d|"
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:150
msgid "330e1b62db344e379ea36318476c352d"
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:161
msgid "We can check the solutions using the bin() method in python (the prefix ``0b`` indicates the binary format)."
msgstr "Python의 bin() 메서드를 통해 답을 확인할 수 있다 (접두어 ``0b`` 는 이진수 형식을 나타낸다)."

#: ../../tutorials/textbook/01_IQPE.ipynb:210
msgid "So we have to apply :math:`X` to :math:`q_2` using c_if two times, one for each value corresponding to 011 and 111."
msgstr "그러므로 값 011 and 111 각각에 해당하도록 :math:`q_2` 에 :math:`X` 를 두 번 적용해야 한다."

#: ../../tutorials/textbook/01_IQPE.ipynb:253
msgid "IPE"
msgstr "IPE"

#: ../../tutorials/textbook/01_IQPE.ipynb:255
msgid "The motivation for using the IPE algorithm is that QPE algorithm works fine for short depth circuits but when the circuit starts to grow, it doesn't work properly due to gate noise and decoherence times."
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:257
msgid "The detailed explanation of how the algorithm works can be found in `Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__. To understand QPE in depth, you can see also `Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__."
msgstr "알고리즘이 어떻게 동작하는지에 대한 자세한 설명은 `Iterative Phase Estimation (IPE, 반복 위상 추정) 알고리즘 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__ 에서 찾을 수 있다. QPE를 심도 있게 이해하려면 `Ch.3.6 Quantum Phase Estimation (양자 위상 추정) <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__ 에서 볼 수 있다."

#: ../../tutorials/textbook/01_IQPE.ipynb:260
msgid "IPE example with a 1-qubit gate for :math:`U`"
msgstr ":math:`U` 에 대한 1-큐비트 게이트의 IPE 예제"

#: ../../tutorials/textbook/01_IQPE.ipynb:262
msgid "We want to apply the IPE algorithm to estimate the phase for a 1-qubit operator :math:`U`. For example, here we use the :math:`S`-gate."
msgstr "1-큐비트 연산자 :math:`U` 의 위상을 추정하고자 IPE 알고리즘을 적용하고자 한다. 예를 들어, 여기서는 :math:`S`-게이트를 사용한다."

#: ../../tutorials/textbook/01_IQPE.ipynb:264
msgid "Let's apply the IPE algorithm to estimate the phase for :math:`S`-gate. Its matrix is"
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:266
msgid " S =\n"
"\\begin{bmatrix}\n"
"1 & 0\\\\\n"
"0 & e^\\frac{i\\pi}{2}\\\\\n"
"\\end{bmatrix}"
msgstr " S =\n"
"\\begin{bmatrix}\n"
"1 & 0\\\\\n"
"0 & e^\\frac{i\\pi}{2}\\\\\n"
"\\end{bmatrix}"

#: ../../tutorials/textbook/01_IQPE.ipynb:274
msgid "That is, the :math:`S`-gate adds a phase :math:`\\pi/2` to the state :math:`|1\\rangle`, leaving unchanged the phase of the state :math:`|0\\rangle`"
msgstr "이 말은 :math:`S`-게이트는 :math:`|1\\rangle` 상태에 위상 :math:`\\pi/2` 을 더하고, :math:`|0\\rangle` 상태의 위상은 변화시키지 않는다"

#: ../../tutorials/textbook/01_IQPE.ipynb:276
msgid "S|1\\rangle = e^\\frac{i\\pi}{2}|1\\rangle\n\n"
msgstr "S|1\\rangle = e^\\frac{i\\pi}{2}|1\\rangle\n\n"

#: ../../tutorials/textbook/01_IQPE.ipynb:278
msgid "In the following, we will use the notation and terms used in `Section 2 of lab 4 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__."
msgstr "다음부터는 `랩 4의 2절 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__ 의 표기 및 용법을 사용한다."

#: ../../tutorials/textbook/01_IQPE.ipynb:280
msgid "Let's consider to estimate the phase :math:`\\phi=\\frac{\\pi}{2}` for the eigenstate :math:`|1\\rangle`, we should find :math:`\\varphi=\\frac{1}{4}` (where :math:`\\phi = 2 \\pi \\varphi`). Therefore to estimate the phase we need exactly 2 phase bits, i.e. :math:`m=2`, since :math:`1/2^2=1/4`. So :math:`\\varphi=0.\\varphi_1\\varphi_2`."
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:282
msgid "Remember from the theory that for the IPE algorithm, :math:`m` is also the number of iterations, so we need only :math:`2` iterations or steps."
msgstr "IPE 알고리즘에서 :math:`m` 은 반복 횟수이기도 한 점을 기억하라. 따라서 :math:`2` 번의 반복 또는 단계가 필요하다."

#: ../../tutorials/textbook/01_IQPE.ipynb:284
msgid "First, we initialize the circuit. IPE works with only 1 auxiliary qubit, instead of :math:`m` counting qubits of the QPE algorithm. Therefore, we need 2 qubits, 1 auxiliary qubit and 1 for the eigenstate of :math:`U`-gate, and a classical register of 2 bits, for the phase bits :math:`\\varphi_1`, :math:`\\varphi_2`."
msgstr "먼저 회로를 초기화한다. IPE는 QPE 알고리즘에서 :math:`m` 개의 카운팅 큐비트 (counting qubit) 대신, 1개의 보조 큐비트로 동작한다. 그러므로 1개의 보조 큐비트와 1개의 :math:`U`-게이트의 고유 상태인 총 2개의 큐비트와 위상 비트 :math:`\\varphi_1`, :math:`\\varphi_2` 를 위한 고전 레지스터 2 비트가 필요하다."

#: ../../tutorials/textbook/01_IQPE.ipynb:311
#: ../../tutorials/textbook/01_IQPE.ipynb:702
msgid "First step"
msgstr "첫 번째 단계"

#: ../../tutorials/textbook/01_IQPE.ipynb:313
msgid "Now we build the quantum circuit for the first step, that is, the first iteration of the algorithm, to estimate the least significant phase bit :math:`\\varphi_m`, in this case :math:`\\varphi_2`. For the first step we have 3 sub-steps: - initialization - application of the Controlled-:math:`U` gates - measure of the auxiliary qubit in x-basis"
msgstr "첫 번째 단계로써 만들 양자 회로, 즉 첫 번째 반복 알고리즘은 최하위 위상 비트 :math:`\\varphi_m` 를 추정하는 것이다. 여기서는 :math:`\\varphi_2` 이다. 첫 번째 단계는 3개의 하위 단계로 나눠진다: - 초기화 - Controlled-:math:`U` 게이트의 적용 - x 축 기반의 보조 큐비트의 측정"

#: ../../tutorials/textbook/01_IQPE.ipynb:316
#: ../../tutorials/textbook/01_IQPE.ipynb:707
msgid "Initialization"
msgstr "초기화"

#: ../../tutorials/textbook/01_IQPE.ipynb:318
msgid "The initialization consists of application the Hadamard gate to the auxiliary qubit and the preparation of the eigenstate :math:`|1\\rangle`."
msgstr "초기화는 Hadamard 게이트를 보조 큐비트에 적용하는 것과 고유 상태 :math:`|1\\rangle` 를 준비하는 것으로 구성되어 있다."

#: ../../tutorials/textbook/01_IQPE.ipynb:351
#: ../../tutorials/textbook/01_IQPE.ipynb:742
msgid "Application of the Controlled-:math:`U` gates"
msgstr "Controlled-:math:`U` 게이트의 적용"

#: ../../tutorials/textbook/01_IQPE.ipynb:353
msgid "Then we have to apply :math:`2^t` times the Controlled-:math:`U` operators (see also in the docs `Two qubit gates <https://qiskit.org/documentation/tutorials/circuits/3_summary_of_quantum_operations.html#Two-qubit-gates>`__), that, in this example, is the Controlled-:math:`S` gate (:math:`CS` for short)."
msgstr "그러면 Controlled-:math:`U` 연산자들을 :math:`2^t` 번 적용해야 한다 (문서 `두 큐비트 게이트 <https://qiskit.org/documentation/tutorials/circuits/3_summary_of_quantum_operations.html#Two-qubit-gates>`__ 를 참조하라). 여기서는 Controlled-:math:`S` 게이트 (줄여서 :math:`CS`) 를 적용한다."

#: ../../tutorials/textbook/01_IQPE.ipynb:355
msgid "To implement :math:`CS` in the circuit, since :math:`S` is a phase gate, we can use the controlled phase gate :math:`\\text{CP}(\\theta)`, with :math:`\\theta=\\pi/2`."
msgstr ":math:`CS` 를 회로에 구현하기 위해선, :math:`S` 가 위상 게이트이므로 제어 위상 게이트 :math:`\\text{CP}(\\theta)` 의 :math:`\\theta=\\pi/2` 인 경우를 사용할 수 있다."

#: ../../tutorials/textbook/01_IQPE.ipynb:387
msgid "Let's apply :math:`2^t` times :math:`\\text{CP}(\\pi/2)`. Since for the first step :math:`t=m-1`, and :math:`m=2`, we have :math:`2^t=2`."
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:420
#: ../../tutorials/textbook/01_IQPE.ipynb:811
msgid "Measure in x-basis"
msgstr "x 기저로 측정"

#: ../../tutorials/textbook/01_IQPE.ipynb:422
msgid "Finally, we perform the measurement of the auxiliary qubit in x-basis. So we will define a function to perform the x_measure and then apply it."
msgstr "마지막으로, 보조 큐비트를 x 기저에서 측정한다. 따라서 x_measure를 수행하는 함수를 정의하고 적용한다."

#: ../../tutorials/textbook/01_IQPE.ipynb:446
msgid "In this way we obtain the phase bit :math:`\\varphi_2` and store it in the classical bit :math:`c_0`."
msgstr "이 방법으로 위상 비트 :math:`\\varphi_2` 를 얻고 이를 고전 비트 :math:`c_0` 에 저장할 수 있다."

#: ../../tutorials/textbook/01_IQPE.ipynb:478
msgid "Subsequent steps (2nd step)"
msgstr "다음 단계(2번째 단계)"

#: ../../tutorials/textbook/01_IQPE.ipynb:480
msgid "Now we build the quantum circuit for the other remaining steps, in this example, only the second one. In these steps we have 4 sub-steps: the 3 sub-steps as in the first step and, in the middle, the additional step of the phase correction - initialization with reset - phase correction - application of the Controlled-:math:`U` gates - measure of the auxiliary qubit in x-basis"
msgstr "이제 남은 단계들을 위한 양자 회로를 만들어 보자. 이 예에서는 두 번째 단계만을 다룬다. 이 단계는 다음의 4개의 하위 단계가 포함된다: 첫 번째 단계와 같은 3개의 하위 단계와 그 중간의 위상 보정을 위한 추가 단계 - 재설정을 포함한 초기화 - 위상 보정 - Controlled-:math:`U` 게이트 적용 - 보조 큐비트의 x 축 측정으로 구성된다."

#: ../../tutorials/textbook/01_IQPE.ipynb:483
#: ../../tutorials/textbook/01_IQPE.ipynb:850
msgid "Initialization with reset"
msgstr "재설정을 통한 초기화"

#: ../../tutorials/textbook/01_IQPE.ipynb:485
msgid "As we want to perform an iterative algorithm in the same circuit, we need to reset the auxiliary qubit :math:`q0` after the measument gate and initialize it again as before to recycle the qubit."
msgstr "동일한 회로에서 반복적 알고리즘을 수행하려는 경우, 측정 게이트 이후에 보조 큐비트 :math:`q0` 를 재설정하고 이전처럼 다시 초기화하여 큐비트를 재활용해야 한다."

#: ../../tutorials/textbook/01_IQPE.ipynb:518
#: ../../tutorials/textbook/01_IQPE.ipynb:883
msgid "Phase correction (for step 2)"
msgstr "위상 보정(2단계를 위한)"

#: ../../tutorials/textbook/01_IQPE.ipynb:520
msgid "As seen in the theory, in order to extract the phase bit :math:`\\varphi_{1}`, we perform a phase correction of :math:`-\\pi\\varphi_2/2`. Of course, we need to apply the phase correction in the circuit only if the phase bit :math:`\\varphi_2=1`, i.e. we have to apply the phase correction of :math:`-\\pi/2` only if the classical bit :math:`c_0` is 1."
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:522
msgid "So, after the reset we apply the phase gate :math:`P(\\theta)` with phase :math:`\\theta=-\\pi/2` conditioned by the classical bit :math:`c_0` (:math:`=\\varphi_2`) using the ``c_if`` method. So as we saw in the first part of this tutorial, we have to use the ``c_if`` method with a value of 1, as :math:`1_{10} = 001_{2}` (the subscripts :math:`_{10}` and :math:`_2` indicate the decimal and binary representations)."
msgstr "따라서 재설정 후에는 ``c_if`` 매서드를 사용한 고전 비트 :math:`c_0` (:math:`=\\varphi_2`) 로 조절된 위상 :math:`\\theta=-\\pi/2` 를 사용하여 위상 게이트 :math:`P(\\theta)` 를 적용한다. 이 튜토리얼의 첫 번째 부분에서는 값이 1인 ``c_if`` 매서드를 :math:`1_{10} = 001_{2}` 로 사용해야 한다(아래에 기입한 :math:`_{10}` 및 :math:`_2` 은 십진수 및 이진수를 나타냄)."

#: ../../tutorials/textbook/01_IQPE.ipynb:554
#: ../../tutorials/textbook/01_IQPE.ipynb:919
msgid "Application of the Controlled-:math:`U` gates and x-measurement (for step 2)"
msgstr "Controlled-:math:`U` 게이트 및 x-측정의 적용 (2단계의 과정)"

#: ../../tutorials/textbook/01_IQPE.ipynb:556
msgid "We apply the :math:`CU` operations as we did in the first step. For the second step we have :math:`t=m-2`, hence :math:`2^t=1`. So we apply :math:`\\text{CP}(\\pi/2)` once. And then we perform the x-measurement of the qubit :math:`q_0`, storing the result, the phase bit :math:`\\varphi_1`, in the bit :math:`c_1` of classical register."
msgstr "첫 단계에서 그랬던 것처럼 :math:`CU` 연산을 적용한다. 두 번째 단계에는 :math:`t=m-2` 이고, 따라서 :math:`2^t=1` 이다. 그래서 우리는 :math:`\\text{CP}(\\pi/2)` 를 한 번 적용한다. 그런 다음 큐비트 :math:`q_0` 의 x 측정을 수행하여 결과, 위상 비트 :math:`\\varphi_1` 를 고전적 레지스터의 비트 :math:`c_1` 에 저장한다."

#: ../../tutorials/textbook/01_IQPE.ipynb:581
msgid "Et voilà, we have our final circuit"
msgstr "마침내! 최종회로가 완성되었다."

#: ../../tutorials/textbook/01_IQPE.ipynb:611
msgid "Let's execute the circuit with the ``qasm_simulator``, the simulator without noise that run locally."
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:641
msgid "In the picture we have the same histograms but on the left we have on the x-axis the string with phase bits :math:`\\varphi_1`, :math:`\\varphi_2` and on the right the actual phase :math:`\\varphi` in decimal representation."
msgstr "그림에서 히스토그램은 동일하지만 왼쪽에는 x축에 위상 비트 :math:`\\varphi_1` , :math:`\\varphi_2` 가 있는 문자열이 있고 오른쪽에는 10진수 표시의 실제 위상 :math:`\\varphi` 가 있다."

#: ../../tutorials/textbook/01_IQPE.ipynb:643
msgid "As we expected we have found :math:`\\varphi=\\frac{1}{4}=0.25` with a :math:`100\\%` probability."
msgstr "예상했던 대로 :math:`100\\%` 확률로 :math:`\\varphi=\\frac{1}{4}=0.25` 를 찾았다."

#: ../../tutorials/textbook/01_IQPE.ipynb:655
msgid "IPE example with a 2-qubit gate"
msgstr "2-큐비트 게이트를 갖는 IPE의 예제"

#: ../../tutorials/textbook/01_IQPE.ipynb:657
msgid "Now, we want to apply the IPE algorithm to estimate the phase for a 2-qubit gate :math:`U`. For this example, let's consider the controlled version of the :math:`T` gate, i.e. the gate :math:`U=\\textrm{Controlled-}T` (that from now we will express more compactly with :math:`CT`). Its matrix is"
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:659
msgid " CT =\n"
"\\begin{bmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^\\frac{i\\pi}{4}\\\\\n"
"\\end{bmatrix}"
msgstr " CT =\n"
"\\begin{bmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^\\frac{i\\pi}{4}\\\\\n"
"\\end{bmatrix}"

#: ../../tutorials/textbook/01_IQPE.ipynb:669
msgid "That is, the :math:`CT` gate adds a phase :math:`\\pi/4` to the state :math:`|11\\rangle`, leaving unchanged the phase of the other computational basis states :math:`|00\\rangle`, :math:`|01\\rangle`, :math:`|10\\rangle`."
msgstr "즉, :math:`CT` 게이트는 상태 :math:`|11\\rangle` 에 위상 :math:`\\pi/4` 를 더하며, 다른 계산 기저 상태들 :math:`|00\\rangle`, :math:`|01\\rangle`, :math:`|10\\rangle` 의 위상은 변경되지 않는다."

#: ../../tutorials/textbook/01_IQPE.ipynb:671
msgid "Let's consider to estimate the phase :math:`\\phi=\\pi/4` for the eigenstate :math:`|11\\rangle`, we should find :math:`\\varphi=1/8`, since :math:`\\phi = 2 \\pi \\varphi`. Therefore to estimate the phase we need exactly 3 classical bits, i.e. :math:`m=3`, since :math:`1/2^3=1/8`. So :math:`\\varphi=0.\\varphi_1\\varphi_2\\varphi_3`."
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:673
msgid "As done with the example for the 1-qubit :math:`U` operator we will go through the same steps but this time we will have :math:`3` steps since :math:`m=3`, and we will not repeat all the explanations. So for details see the above example for 1-qubit :math:`U` gate."
msgstr "1큐비트 :math:`U` 연산자의 예와 마찬가지로 동일한 단계를 거치지만 이번에는 :math:`m=3` 이라서 :math:`3` 단계를 거치게 되며 모든 설명을 반복하지는 않을 것이다. 자세한 내용은 위의 1큐비트 :math:`U` 게이트 예를 참조하자."

#: ../../tutorials/textbook/01_IQPE.ipynb:675
msgid "First, we initialize the circuit with 3 qubits, 1 for the auxiliary qubit and 2 for the 2-qubit gate, and 3 classical bits to store the phase bits :math:`\\varphi_1`, :math:`\\varphi_2`, :math:`\\varphi_3`."
msgstr "먼저, 3개의 큐비트 (보조 큐비트용 1개 및 2-큐비트 게이트용 2개)와 위상 비트 :math:`\\varphi_1`, :math:`\\varphi_2`, :math:`\\varphi_3` 를 저장하는 3개의 고전 비트로 회로를 초기화한다."

#: ../../tutorials/textbook/01_IQPE.ipynb:704
msgid "Now we build the quantum circuit for the first step, to estimate the least significant phase bit :math:`\\varphi_m=\\varphi_3`."
msgstr "이제 최하위 위상 비트 :math:`\\varphi_m=\\varphi_3` 를 추정하기 위해 첫 번째 단계로 양자 회로를 구축한다."

#: ../../tutorials/textbook/01_IQPE.ipynb:709
msgid "We initialize the auxiliary qubit and the other qubits with the eigenstate :math:`|11\\rangle`."
msgstr "고유 상태 :math:`|11\\rangle` 로 보조 큐비트와 다른 큐비트들을 초기화한다."

#: ../../tutorials/textbook/01_IQPE.ipynb:744
msgid "Then we have to apply multiple times the :math:`CU` operator, that, in this example, is the Controlled-:math:`CT` gate (:math:`CCT` for short)."
msgstr "그런 다음 :math:`CU` 연산자를 여러 번 적용해야 한다. 이 예에서는 Controlled-:math:`CT` 게이트(줄여서 :math:`CCT`) 이다."

#: ../../tutorials/textbook/01_IQPE.ipynb:746
msgid "To implement :math:`CCT` in the circuit, since :math:`T` is a phase gate, we can use the multi-controlled phase gate :math:`\\text{MCP}(\\theta)`, with :math:`\\theta=\\pi/4`."
msgstr ":math:`CCT` 를 회로에 구현할 때, :math:`T` 가 위상 게이트이므로 다중 제어 위상 게이트 :math:`\\text{MCP}(\\theta)` 와 :math:`\\theta=\\pi/4` 를 함께 사용한다."

#: ../../tutorials/textbook/01_IQPE.ipynb:778
msgid "Let's apply :math:`2^t` times :math:`\\text{MCP}(\\pi/4)`. Since for the first step :math:`t=m-1` and :math:`m=3`, we have :math:`2^t=4`."
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:813
msgid "Finally, we perform the measurement of the auxiliary qubit in x-basis. We can use the ``x_measurement`` function defined above in the example for 1-qubit gate. In this way we have obtained the phase bit :math:`\\varphi_3` and stored it in the classical bit :math:`c_0`."
msgstr "마지막으로 보조 큐비트의 측정을 x-basis로 수행한다. 1-큐비트 게이트의 예에서 위에 정의된 ``x_measurement`` 함수를 사용할 수 있다. 이 방법으로 얻어진 위상 비트 :math:`\\varphi_3` 는 고전 비트 :math:`c_0` 에 저장된다."

#: ../../tutorials/textbook/01_IQPE.ipynb:845
msgid "Subsequent steps (2nd, 3rd)"
msgstr "다음 단계(2번째, 3번째)"

#: ../../tutorials/textbook/01_IQPE.ipynb:847
msgid "Now we build the quantum circuit for the other remaining steps, the second and the third ones. As said in the first example, in these steps we have the additional sub-step of the phase correction."
msgstr "이제 나머지 단계, 즉 두 번째 단계와 세 번째 단계를 위한 양자 회로를 구축한다. 첫 번째 예에서 말했듯이 이 단계에는 위상 보정의 추가 하위 단계가 있다."

#: ../../tutorials/textbook/01_IQPE.ipynb:885
msgid "In order to extract the phase bit :math:`\\varphi_{2}`, we perform a phase correction of :math:`-\\pi\\varphi_3/2`."
msgstr "위상 비트 :math:`\\varphi_{2}` 를 추출하기 위해 :math:`-\\pi\\varphi_3/2` 의 위상 보정을 실시한다."

#: ../../tutorials/textbook/01_IQPE.ipynb:887
msgid "So, after the reset we apply the phase gate :math:`P(\\theta)` with phase :math:`\\theta=-\\pi/2` conditioned by the classical bit :math:`c_0` (:math:`=\\varphi_3`)."
msgstr "따라서 재설정 후 고전 비트 :math:`c_0` (:math:`=\\varphi_3`) 로 조절된 위상 :math:`\\theta=-\\pi/2` 를 사용하여 위상 게이트 :math:`P(\\theta)` 를 적용한다."

#: ../../tutorials/textbook/01_IQPE.ipynb:921
msgid "We apply the :math:`CU` operations as we did in the first step. For the second step we have :math:`t=m-2`, hence :math:`2^t=2`. So we apply :math:`\\text{MCP}(\\pi/4)` :math:`2` times. And then we perform the x-measurement of the qubit :math:`q_0`, storing the phase bit :math:`\\varphi_2` in the bit :math:`c_1`."
msgstr "첫 단계에서 그랬던 것처럼 :math:`CU` 연산을 적용한다. 두 번째 단계에는 :math:`t=m-2` 가 있고, 따라서 :math:`2^t=2` 이다. 그래서 우리는 :math:`\\text{MCP}(\\pi/4)` 를 :math:`2` 번 적용한다. 그런 다음 큐비트 :math:`q_0` 의 x 측정을 수행하여 결과, 위상 비트 :math:`\\varphi_2` 를 비트 :math:`c_1` 에 저장한다."

#: ../../tutorials/textbook/01_IQPE.ipynb:955
msgid "All substeps of the 3rd step"
msgstr "세 번째 단계의 모든 하위 단계"

#: ../../tutorials/textbook/01_IQPE.ipynb:957
msgid "For the 3rd and last step, we perform the reset and initialization of the auxiliary qubit as done in the second step."
msgstr "세 번째 및 마지막 단계의 경우 두 번째 단계에서 수행된 대로 보조 큐비트의 재설정 및 초기화를 수행한다."

#: ../../tutorials/textbook/01_IQPE.ipynb:959
msgid "Then at the 3rd step we have to perform the phase correction of :math:`-2\\pi 0.0\\varphi_{2}\\varphi_{3}= -2\\pi \\left(\\frac{\\varphi_2}{4}+\\frac{\\varphi_3}{8}\\right)=-\\frac{\\varphi_2\\pi}{2}-\\frac{ \\varphi_3\\pi}{4}`, thus we have to apply 2 conditioned phase corrections, one conditioned by :math:`\\varphi_3` (:math:`=c_0`) and the other by :math:`\\varphi_2`\\ (:math:`=c_1`). To do this we have to apply the following: - gate :math:`P(-\\pi/4)` conditioned by :math:`c_0=1`, that is, by :math:`c=001` (c_if with value :math:`1`) - gate :math:`P(-\\pi/2)` conditioned by :math:`c_1=1`, that is, the gate is applied when :math:`c=010` (c_if with values :math:`2`) - gate :math:`P(-3\\pi/4)` conditioned by :math:`c_1=1` and :math:`c_0=1` that is, the gate is applied when :math:`c=011` (c_if with values :math:`3`)"
msgstr "그런 다음 세 번째 단계에서 :math:`-2\\pi 0.0\\varphi_{2}\\varphi_{3}= -2\\pi \\left(\\frac{\\varphi_2}{4}+\\frac{\\varphi_3}{8}\\right)=-\\frac{\\varphi_2\\pi}{2}-\\frac{ \\varphi_3\\pi}{4}` 의 위상 보정을 수행해야 한다. 따라서 두 개의 조건부 위상 보정을 적용해야 하는데, 하나는 :math:`\\varphi_3` (:math:`=c_0`) 에 의해 적용된 것이고, 다른 하나는 :math:`\\varphi_2` (:math:`=c_1`) 에 의해 적용된 것이다. 이를 위해서는 다음과 같이 실행한다: - 게이트 :math:`P(-\\pi/4)` 는 :math:`c=001` (c 값이 :math:`1`) 일 때 :math:`c_0=1` 로 적용된다. - 게이트 :math:`P(-\\pi/2)` 는 :math:`c=010` (c 값이 :math:`2`) 일 때 :math:`c_1=1` 로 적용된다. - 게이트 :math:`P(-3\\pi/4)` 는 :math:`c=011` (c 값이 :math:`3`) 일 때 :math:`c_1=1` 와 :math:`c_0=1` 로 적용된다."

#: ../../tutorials/textbook/01_IQPE.ipynb:962
msgid "Next, the :math:`CU` operations: we apply :math:`2^t` times the :math:`\\text{MCP}(\\pi/4)` gate and since at the 3rd step :math:`t=m-3=0`, we apply the gate only once."
msgstr "다음으로 :math:`CU` 연산자: :math:`\\text{MCP}(\\pi/4)` 게이트를 :math:`2^t` 번 적용하고 3단계 :math:`t=m-3=0` 에서는 게이트를 한 번만 적용한다."

#: ../../tutorials/textbook/01_IQPE.ipynb:1010
msgid "Now, we execute the circuit with the simulator without noise."
msgstr "이제 잡음 없이 시뮬레이터로 회로를 실행한다."

#: ../../tutorials/textbook/01_IQPE.ipynb:1040
msgid "We have obtained :math:`100\\%` probability to find :math:`\\varphi=0.125`, that is, :math:`1/8`, as expected."
msgstr "예상대로 :math:`100\\%` 확률로 :math:`\\varphi=0.125`, 즉 :math:`1/8` 를 찾을 수 있게 되었다."

