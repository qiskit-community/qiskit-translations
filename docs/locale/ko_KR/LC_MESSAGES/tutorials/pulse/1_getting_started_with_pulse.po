msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-02 15:42+0000\n"
"PO-Revision-Date: 2020-10-02 16:16\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/pulse/1_getting_started_with_pulse.po\n"
"X-Crowdin-File-ID: 9362\n"
"Language: ko_KR\n"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:10
msgid "This page was generated from `tutorials/pulse/1_getting_started_with_pulse.ipynb`__."
msgstr "이 페이지는 `tutorials/pulse/1_getting_started_pulse.ipynb`__ 에서 생성되었다."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:9
msgid "Getting Started with OpenPulse"
msgstr "OpenPulse 시작하기"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:11
msgid "Qiskit Pulse programs give you more control than ``QuantumCircuit``. At this level, you can specify the exact time dynamics of the input signals across all input channels. Most quantum algorithm can be described with circuits alone using gate operations -- typically, it's when you want to apply error mitigation techniques or characterize a time-dependent quality of a quantum system that pulse-level control becomes useful."
msgstr "Qiskit Pulse 프로그램은 ``QuantumCircuit`` 보다 더 많은 제어권을 제공한다. 이 수준에서 모든 입력 채널에 걸쳐 입력 신호의 정확한 시간 역학을 지정할 수 있다. 대부분의 양자 알고리즘은 게이트 연산을 사용하여 회로만으로 설명할 수 있지만 -- 특별히 에러 완화 기법을 적용하거나 양자 시스템의 시간 의존적 특성을 알고 싶을 때 펄스 수준 제어가 유용해진다."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:13
msgid "On this page, we will discover how to build and execute a very basic Pulse program, which is called a schedule."
msgstr "이 페이지에서는 스케줄이라고 하는 매우 기본적인 펄스 프로그램을 구축하고 실행하는 방법을 알아본다."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:16
msgid "Initialize"
msgstr "초기화"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:18
msgid "We import the ``Schedule`` class from the ``qiskit.pulse`` module. To start, we are going to initialize a ``Schedule`` with the name ``\"getting_started\"``."
msgstr "``qiskit.pulse``모듈에서 ``Schedule`` 클래스를 불러온다. 우선 ``getting_start``라는 이름으로 ``Schedule``을 초기화한다."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:41
msgid "Easy! We have an empty schedule now."
msgstr "내용이 비어있는 스케쥴을 쉽게 만들었다."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:44
msgid "Build instructions"
msgstr "명령어(instruction) 만들기"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:46
msgid "The next thing we will want to do is create some instructions to add to our schedule."
msgstr "다음으로 스케쥴에 추가할 명령어(Instruction) 를 만든다."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:48
msgid "Perhaps the most central instruction for building schedules is the ``Waveform``. It is a pulse signal specified as an array of time-ordered complex amplitudes, or *samples*. Each sample is played for one cycle, a timestep ``dt``, determined by the backend. If we want to know the real-time dynamics of our program, we need to know the value of ``dt``. For now, let's focus on how to build the instruction."
msgstr ""

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:81
msgid "There are multiple ways to build pulses, which you can learn about on later pages. This time, we've simply passed the exact amplitudes of the pulse envelope we want to play as an array. The array above is a Gaussian function evaluated at 64 points, with an amplitude of 1 and a standard deviation of 8. The (zero-indexed) :math:`i^{th}` sample will play from time ``i*dt`` up to ``(i + 1)*dt``, modulated by the qubit frequency. Think of this like an arbitrary waveform generator (AWG), playing the samples you give to the ``Waveform``, mixed with a continuous sine wave generator outputting a tone at the qubit frequency."
msgstr ""

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:84
msgid "The values above happen to be real, but they can also be complex. The amplitude norm of any pulse signal is arbitrarily limited to 1. Each backend system may also impose further constraints -- for instance, a minimum pulse size of 64. Learn more about getting information from the backend `here <5_gathering_system_information.ipynb>`__."
msgstr "위의 값은 실제로 발생하지만 복잡할 수도 있다. 임의의 펄스 신호의 진폭은 표준 1로 제한된다. 각 백엔드 시스템은 또한 추가적인 제약들 (예를 들어, 64의 최소 펄스 크기) 을 부과할 수 있다. 여기에서는 백엔드에서 정보를 얻는 것에 대해 자세히 알아본다."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:87
msgid "Schedule instructions"
msgstr "스케쥴 명령어"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:89
msgid "Next, we have to add an instruction to execute the pulse signal we just built. This means specifying not only the *time* that the pulse should be played, but also *where* it should be played. When we build circuits, we specify which qubit a gate operation should be applied to. In Pulse, every qubit has multiple *channels*."
msgstr "다음으로, 방금 만든 펄스 신호를 실행하기 위한 명령어를 추가 한다. 이는 펄스가 재생되어야 하는 *time*을 지정하는 것뿐만 아니라, 펄스가 *where*에서 재생되어야 하는지를 지정하는 것을 의미한다. 우리는 회로를 만들 때 어떤 큐빗에 게이트를 적용해야 하는지를 지정한다. 펄스에서, 모든 큐비트는 다수의 *channels*들을 갖는다."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:91
msgid "We will *play* our pulse on the *drive* channel of qubit 0. The drive channel lets us enact single qubit operations."
msgstr "* drive* 채널로 큐비트0을 재생한다. 드라이브 채널을 사용하여 단일 큐비트 연산을 실행할 수 있다."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:116
msgid "Note that the pulse we defined operates on the ``DriveChannel``, which in turn is initialized with the qubit index. We use ``Schedule.insert`` to play the pulse at timestep ``t = 0``."
msgstr "``DriveChannel``에서 동작하도록 정의한 펄스는, 큐비트 인덱스를 사용해 초기화 된다. 시간 단계가 ``t = 0``일 때 펄스를 재생하기 위해 ``Schedule.insert``를 사용한다."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:118
msgid "Let's review what we've done, using ``Schedule.draw``:"
msgstr "지금까지 ``Schedule.draw``를 사용해 작업한 것을 검토한다:"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:148
msgid "The ways in which schedules can be composed is covered in detail on `this page <3_building_pulse_schedules.ipynb>`__."
msgstr "스케줄을 작성하는 더 자세한 방법은 이 페이지에서<3_building_pulse_schedules.ipynb>`__ 다루고 있다."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:150
msgid "This pulse will drive qubit 0. It is modulated at qubit 0's resonant frequency, so it will drive the :math:`|0\\rangle` to :math:`|1\\rangle` transition. It is not calibrated to stop at a particular state, so we won't know what state we've prepared until we look at the results. For our purposes, we don't mind what state we end up in."
msgstr "이 펄스는 큐비트0을 구동시킬 것이다. 이것은 큐비트 0의 공진 주파수에 맞춰 변조되었으므로 :math:`|0\\rangle` to :math:`|1\\rangle` 전이를 일으킬 것이다.  어떤 상태에서 멈추도록 조정되지 않았기 때문에 결과를 보기 전에는 중간 과정은 알 수 없다. 실험의 목적상, 어떤 상태에서 실험이 마치는지는 신경쓰지 않기로 한다."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:152
msgid "All that's left to do is to add a measurement. There is a convenient utility function for adding measurements, but it requires data from the backend system that the program will be running on. We will also need the backend to execute the program."
msgstr "남은 것은 측정을 더하는 것뿐이다. 측정을 추가할 수 있는 편리한 유틸리티 기능이 있지만 프로그램이 실행될 백엔드 시스템의 데이터가 필요하다. 우리는 또한 프로그램을 실행하기 위해 백엔드가 필요할 것이다."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:155
msgid "Grab a backend"
msgstr "백엔드 선택"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:179
msgid "Add measurements"
msgstr "측정 추가"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:181
msgid "Now we can use this backend to add the measurement instructions for us."
msgstr "이제 이 백엔드를 사용하여 측정 명령을 추가할 수 있다."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:204
msgid "Let's see what the convenience function has added for us, using draw again. The acquisition and measurement pulses are very long compared to our initial pulse, so we can use the ``plot_range`` argument to clip the schedule."
msgstr "\"draw\"에 어떤 편리한 기능이 추가되어있는지 보자. 획득 및 측정 펄스들은 우리의 초기 펄스에 비해 매우 길기 때문에 ``plot_range`` 의 인수를 이용하여 스케줄의 일부를 선택할 수 있다."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:236
msgid "There is a new pulse on ``MeasureChannel`` ``m0``, a shorthand name for ``MeasureChannel(0)``. This channel stimulates readout on qubit 0. Likewise, ``a0`` is shorthand for ``AcquireChannel(0)``. The ``Acquire`` instruction on ``a0`` tells the measurement devices when to begin collecting data on their analog-to-digital converters (ADC), and for how long. It is drawn as an amplitude 1 constant pulse."
msgstr "``MeasureChannel`` ``m0``(``MeasureChannel(0)``) 에 새로운 펄스가 추가되어 있다. 이 채널은 큐비트 0을 읽거나 쓰게 설정되었다. ``a0``(``AcquireChannel(0)``) 도 마찬가지이다. ``a0``의 ``Acquire`` 명령어는 측정 장치의 ADC(아날로그 대 디지털 컨버터) 에 언제 데이터 수집을 시작할지 알려준다. 이것은 크기 1의 상수 펄스로 나타난다."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:239
msgid "Execute"
msgstr "실행"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:241
msgid "Our schedule is done! We can't use our mocked backend to execute programs, but if you have an IBM Quantum account, you could use ``backend = IBMQ.load_account().get_backend(open_pulse=True)`` to see if you have an OpenPulse enabled backend. Once you have such a backend, we can execute it the same way we execute circuits:"
msgstr "스케쥴이 완성되었다. 가상의 백엔드로는 이 프로그램은 실행할 수 없다. IBM Quantum 계정이 있다면 ``backend = IBMQ.load_account().get_backend(open_pulse=True)`` 명령어를 사용해서 OpenPulse를 사용할 수 있는, 가용 백엔드가 있는지 확인할 수 있다. 조건에 맞는 백엔드를 찾았다면, 회로를 실행하는 것과 같은 방법으로 펄스 프로그램을 실행할 수 있다."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:247
msgid "That's it! To get the results, use ``result = job.result()``. You've created a Pulse program schedule, containing an operation on qubit 0 followed by a measurement, executed the experiment on the backend and retrieved the results. Next, we will cover in detail the `different instructions which can be used in Pulse programs <2_building_pulse_instructions.ipynb>`__."
msgstr "다 되었다. 결과를 얻기 위해서 ``result = job.result()``를 사용한다. 여러분은 큐비트 0에 작용하는 실험을 포함하는 작업이 포함된 펄스 프로그램 스케쥴을 작성했으며 백엔드에 이 실험을 실행하고 결과를 받았다. 다음으로,  `펄스 프로그램에서 사용할 수 있는 다양한 명령어 <2_building_pulse_instructions.ipynb>`__를 다룰 것이다."

