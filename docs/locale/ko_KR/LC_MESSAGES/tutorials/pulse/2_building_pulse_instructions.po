msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-02 15:42+0000\n"
"PO-Revision-Date: 2020-10-02 16:17\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/pulse/2_building_pulse_instructions.po\n"
"X-Crowdin-File-ID: 9364\n"
"Language: ko_KR\n"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:10
msgid "This page was generated from `tutorials/pulse/2_building_pulse_instructions.ipynb`__."
msgstr "이 페이지는 `tutorials/pulse/2_building_pulse_instructions.ipynb`__에서 생성되었다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:9
msgid "Building Pulse Instructions"
msgstr "펄스 구축 지침"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:11
msgid "Pulse programs, which are called ``Schedule``\\ s, describe instruction sequences for the control electronics."
msgstr "``Schedule``이라 부르는 펄스 프로그램은, 제어 전자장치에 대한 명령 시퀀스를 기술한다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:13
msgid "On this page, we will cover in depth these ``Instruction``\\ s available through Qiskit Pulse:"
msgstr "이 페이지에서는 키스킷 펄스를 통해 사용할 수 있는 이 ``Instruction``들을 심도 있게 다룰 것이다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:15
msgid "```Delay(duration: int, channel)`` <#delay>`__"
msgstr "```Delay(duration: int, channel)`` <#delay>`__"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:16
msgid "```Play(pulse, channel)`` <#play>`__"
msgstr "```Play(pulse, channel)`` <#play>`__"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:17
msgid "```SetFrequency(frequency, channel)`` <#frequency>`__"
msgstr "```SetFrequency(frequency, channel)`` <#frequency>`__"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:18
msgid "```ShiftPhase(phase, channel)`` <#phase>`__"
msgstr "```ShiftPhase(phase, channel)`` <#phase>`__"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:19
msgid "```Acquire(duration, channel, mem_slot, reg_slot)`` <#acquire>`__"
msgstr "```Acquire(duration, channel, mem_slot, reg_slot)`` <#acquire>`__"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:21
msgid "Each instruction type has its own set of operands. As you can see above, they each include at least one ``Channel`` to specify where the instruction will be applied."
msgstr "각 명령어 유형은 고유한 피연산자 집합이 있다. 위에서 볼 수 있듯이, 이들은 명령어가 어디에 적용될 것인가를 지정하기 위해 적어도 하나의 ``Channel``을 포함하고 있다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:23
msgid "**Channels** are labels for signal lines from the control hardware to the quantum chip."
msgstr "** Channels**는 제어 하드웨어에서 양자 칩까지의 신호 라인에 대한 레이블이다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:25
msgid "``DriveChannel``\\ s are typically used for *driving* single qubit rotations,"
msgstr "``DriveChannel``들은 보통 단일 큐비트의 회전을 *driving* 하는데 사용된다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:26
msgid "``ControlChannel``\\ s are typically used for multi-qubit gates or additional drive lines for tunable qubits,"
msgstr "``ControlChannel``들은 일반적으로 다중 큐비트 게이트 또는 조정 가능한 큐비트의 추가 드라이브 라인에 사용된다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:27
msgid "``MeasureChannel``\\ s are specific to transmitting pulses which stimulate readout, and"
msgstr "``MeasureChannel``들은 해독해야 하는 대상 펄스의 전송에 한정되며,"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:28
msgid "``AcquireChannel``\\ s are used to trigger digitizers which collect readout signals."
msgstr "``AcquireChannel``들은 는 판독 신호를 수집하는 디지털화 장비(digitizer) 의 작동을 촉발시키는데 사용된다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:30
msgid "``DriveChannel``\\ s, ``ControlChannel``\\ s, and ``MeasureChannel``\\ s are all ``PulseChannel``\\ s; this means that they support *transmitting* pulses, whereas the ``AcquireChannel`` is a receive channel only and cannot play waveforms."
msgstr "``DriveChannel``들, ``ControlChannel``들 그리고 ``MeasureChannel``들은 모두 ``PulseChannel``이다. 이는 그들이 펄스의 *transmitting*을 지원하는 반면 ``AcquireChannel``은 수신 채널일 뿐 파형을 발생시킬 수는 없다는 뜻이다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:32
msgid "For the following examples, we will create one ``DriveChannel`` instance for each ``Instruction`` that accepts a ``PulseChannel``. Channels take one integer ``index`` argument. Except for ``ControlChannel``\\ s, the index maps trivially to the qubit label."
msgstr "다음 예제들에서는``PulseChannel``을 허용하는 각``Instruction``에 대해 하나의``DriveChannel`` 인스턴스를 생성한다. 채널은 하나의 정수로된 ``index`` 인수를 사용한다. ``ControlChannel``을 제외하고 인덱스는 큐비트 레이블에 맞추어 매핑된다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:55
msgid "## ``Delay``"
msgstr "## ``Delay``"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:57
msgid "One of the simplest instructions we can build is ``Delay``. This is a blocking instruction that tells the control electronics to output no signal on the given channel for the duration specified. It is useful for controlling the timing of other instructions."
msgstr "우리가 만들 수 있는 가장 간단한 명령어 중 하나는 ``Delay`이다. 이것은 제어 전자 장치가 지정된 기간 동안 지정된 채널에 신호를 출력하지 않도록 하는 차단 명령이다. 다른 명령어의 타이밍을 조절하는 데 유용하다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:59
msgid "The duration here and elsewhere is in terms of the backend's cycle time (1 / sample rate), ``dt``."
msgstr "지속시간(duration) 은 이 부분 뿐 아니라 다른 곳에서도 백엔드의 작동 주기 시간(Cycle time)(1 / sample rate), ``dt``이다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:61
msgid "To build a ``Delay`` instruction, we pass the duration and channel:"
msgstr "``Delay`` 명령어를 구축하기 위해, 지속시간과 채널 정보를 제공한다:"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:84
msgid "where ``channel`` can be any kind of channel, including ``AcquireChannel``."
msgstr "여기서 ``channel``은 ``AcquireChannel``을 포함한 어떤 종류의 채널도 될 수 있다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:86
msgid "That's all there is to it. This instruction, ``delay_5dt``, is ready to be included in a ``Schedule``. Any instruction appended after ``delay_5dt`` on the same channel will execute five timesteps later than it would have without this delay."
msgstr "전부 설정 되었다. ```delay_5dt`라는 이 명령어는 ``delay_5dt``에 포함될 준비를 마쳤다. 같은 채널에서 ``delay_5dt`` 이후 추가된 명령어들은 이 지연 명령어가 없을 때 보다 다섯 타임스탭(dt) 이후에 실행될 것이다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:88
msgid "## ``Play``"
msgstr "## ``Play``"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:90
msgid "The ``Play`` instruction is responsible for executing *pulses*. It's straightforward to build one:"
msgstr " ``Play`` 명령은 *pulses*를 발생시키는 역할을 담당한다. 설정하는 과정은 간단하다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:96
msgid "Let's clarify what the ``pulse`` argument is and explore a few different ways to build one."
msgstr "``pulse`` 구문이 무엇인지 확인하고 이를 작성하는 다양한 몇 가지 방법을 알아보자."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:99
msgid "Pulses"
msgstr "펄스"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:101
msgid "A ``Pulse`` specifies an arbitrary pulse *envelope*. The modulation frequency and phase of the output waveform are controlled by the ``SetFrequency`` and ``ShiftPhase`` instructions, which we will cover next."
msgstr "``Pulse``는 임의의 펄스 *envelope*로 지정한다. 출력 파형의 변조 주파수와 위상은 다음에 다룰 ``SetFrequency``와 ``ShiftPhase``의 명령어 의해 제어된다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:103
msgid "The image below may provide some intuition for why they are specified separately. Think of the pulses which describe their envelopes as input to an arbitrary waveform generator (AWG), a common lab instrument -- this is depicted in the left image. Notice the limited sample rate discritizes the signal. The signal produced by the AWG may be mixed with a continuous sine wave generator. The frequency of its output is controlled by instructions to the sine wave generator; see the middle image. Finally, the signal sent to the qubit is demonstrated by the right side of the image below."
msgstr "아래의 이미지에서 유닛들은 기능에 따라 분리되어 그려졌다. 어떤 펄스가 포락선(envelope)을 임의 파형 발생기(AWG)-왼쪽에 있는 이미지인, 통상적인 실험 장비인- 에 대한 입력으로 갖는 상황을 생각해 보십시오. 샘플링 속도에 제한이 있기 때문에 신호가 끊어질 수 있는 것에 유의한다. AWG에 의해 생성된 신호는 연속 사인파 발생기와 혼합될 수 있다. 출력 주파수는 사인파 발생기에 대한 명령어에 의해 제어된다. 중간 이미지를 참조하십시오. 마지막으로, 큐비트으로 전송되는 신호는 아래 이미지의 우측에 표시되어 있다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:106
msgid "**Note**: The hardware may be implemented in other ways, but if we keep the instructions separate, we avoid losing explicit information, such as the value of the modulation frequency."
msgstr "**Note**: 하드웨어는 다른 방식으로 구현될 수 있지만, 명령어를 분리해서 설정하면 변조 주파수의 값과 같은 명시적 정보가 손실되는 것을 피할 수 있다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:108
msgid "|alt text|"
msgstr "|alt text|"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:110
msgid "There are many methods available to us for building up pulses. Our ``library`` within Qiskit Pulse contains helpful methods for building ``Pulse``\\ s. Let's take for example a simple Gaussian pulse -- a pulse with its envelope described by a sampled Gaussian function. We arbitrarily choose an amplitude of 1, standard deviation :math:`\\sigma` of 10, and 128 sample points."
msgstr "펄스를 구성하는 다양한 방법이 있다. Qiskit Pulse내의 ``library``는 ``Pulse``들을 구성하는데 도움이되는 방법들을 담고 있다. 예를 들어, 간단한 가우시안 펄스(Gaussian pulse)-포락선(envelope)이 샘플링된 가우스 함수를 갖는 펄스-를 살펴보자. 우리는 임의적으로 1의 진폭, 표준편차 :math:`\\sigma`의 10, 그리고 128개의 표본 점을 선택한다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:112
msgid "**Note**: The maximum amplitude allowed is ``1.0``. Most systems also have additional constraints on the minimum and maximum number of samples allowed in a pulse. These additional constraints, if available, would be provided through the ``BackendConfiguration`` which is described `here <5_gathering_system_information.ipynb#Configuration>`__."
msgstr "**Note**: 허용되는 최대 진폭은 ``1.0\"이다. 또한 대부분의 시스템은 펄스 내에서 허용되는 샘플의 최소 및 최대 개수에 대한 추가적인 제약조건을 가지고 있다. 가능하다면 이러한 추가적인 제약조건은 ``BackendConfiguration``을 통해서 제공되며 다음의 튜토리얼에서 세부 내용을 확인 할 수 있다. <5_gathering_system_information.ipynb#Configuration>`__"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:140
msgid "Parametric pulses"
msgstr "매개변수 펄스"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:142
msgid "Let's build our Gaussian pulse using the ``Gaussian`` parametric pulse. A parametric pulse sends the name of the function and its parameters to the backend, rather than every individual sample. Using parametric pulses makes the jobs you send to the backend much smaller. IBM Quantum backends limit the maximum job size that they accept, so parametric pulses may allow you to run larger programs."
msgstr "``Gaussian`` 매개변수(parametric) 펄스를 이용하여 가우시안 펄스를 만들어 봅시다. 매개변수 펄스는 모든 개별 샘플을 백엔드로 보내는 대신 함수의 이름과 매개변수를 백엔드로 전송한다. 매개변수 펄스를 사용하면 백엔드로 보내는 작업이 훨씬 작아진다. IBM Quantum 백엔드들은 수용하는 최대 작업 크기를 제한하므로 매개변수 펄스를 사용하면 더 큰 프로그램을 실행할 수 있다"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:144
msgid "Other parametric pulses in the ``library`` include ``GaussianSquare``, ``Drag``, and ``ConstantPulse``."
msgstr "``library``에 포함된 다른 매개변수(parametric) 펄스들은 ``GaussianSquare``, ``Drag``, ``ConstantPulse``이다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:146
msgid "**Note**: The backend is responsible for deciding exactly how to sample the parametric pulses. It is possible to draw parametric pulses, but the samples displayed are not guaranteed to be the same as those executed on the backend."
msgstr "** Note**: 백엔드에서 매개변수 펄스를 샘플링하는 방법이 결정된다. 매개변수 펄스를 그리는 것은 가능하지만, 백엔드에서 실행된 것과 그려진 펄스 샘플이 동일한 것으로 보장되진 않는다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:179
msgid "**Pulse waveforms described by samples**"
msgstr "** 샘플로 설명되는 펄스 파형 * *"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:181
msgid "It is also possible to specify the waveform as an array of samples. We pass the samples to a ``Waveform``."
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:217
msgid "**Pulse library functions**"
msgstr "**펄스 라이브러리 함수들**"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:219
msgid "Our own pulse library has sampling methods to build a ``Waveform`` from common functions."
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:251
msgid "External libraries"
msgstr "외부 라이브러리"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:253
msgid "Alternatively, you can make use of an external library."
msgstr "다른 방법으로, 외부 라이브러리를 사용할 수 있다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:287
msgid "Regardless of which method you use to specify your ``pulse``, ``Play`` is instantiated the same way:"
msgstr "``pulse``을 특정하기 위해 어떤 방법을 사용하든 ``Play``는 같은 방식으로 인스턴스화된다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:311
msgid "The ``Play`` instruction gets its duration from its ``Pulse``: the duration of a parametrized pulse is an explicit argument, and the duration of a ``Waveform`` is the number of input samples."
msgstr "``Play`` 명령어의 지속시간(duration) 은 ``Pulse``에서 가져온다: 파라미터화된 펄스의 지속시간은 명시적인 전달인자이며, `Waveform`의 지속시간은 입력 샘플의 수이다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:313
msgid "## ``SetFrequency``"
msgstr "## ``SetFrequency``"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:315
msgid "As explained previously, the output pulse waveform envelope is also modulated by a frequency and phase. Each channel has a `default frequency listed in the ``backend.defaults()`` <5_gathering_system_information.ipynb#Defaults>`__."
msgstr "앞서 설명한 바와 같이, 출력 펄스 파형 포락선(envelope)은 주파수 및 위상에 의해 변조된다. 각 채널은 ``backend.defaults()``에 있는 기본 주파수(default frequency)를 가지며 세부 내용은 다음에 있다. <5_gathering_system_information.ipynb#Defaults>`__"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:317
msgid "The frequency of a channel can be updated at any time within a ``Schedule`` by the ``SetFrequency`` instruction. It takes a float ``frequency`` and a ``PulseChannel`` ``channel`` as input. All pulses on a channel following a ``SetFrequency`` instruction will be modulated by the given frequency until another ``SetFrequency`` instruction is encountered or until the program ends."
msgstr "채널의 주파수는 ``SetFrequency`` 명령어를 사용해 ``Schedule``내에서 언제든지 업데이트 할 수 있다. 부동소숫점(float) 타입의 ``frequency``와``PulseChannel``, ``channel``을 입력으로 받는다. ``SetFrequency`` 명령어가 적용되는 채널 안의 모든 펄스는 다른``SetFrequency``명령을 만나거나 프로그램이 종료 될 때까지 주어진 주파수에 의해 변조된다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:319
msgid "The instruction has an implicit duration of ``0``."
msgstr "명령어는 암묵적으로 ``0``의 지속시간(duration) 을 갖는다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:321
msgid "**Note**: The frequencies that can be requested are limited by the total bandwidth and the instantaneous bandwidth of each hardware channel. In the future, these will be reported by the ``backend``."
msgstr "** Note**: 요청할 수있는 주파수는 총 대역폭과 각 하드웨어 채널의 순간 대역폭에 의해 제한된다. 향후 이러한 정보는 ``backend``를 통해 보고받을 수 있을 것이다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:344
msgid "## ``ShiftPhase``"
msgstr "## ``ShiftPhase``"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:346
msgid "The ``ShiftPhase`` instruction will increase the phase of the frequency modulation by ``phase``. Like ``SetFrequency``, this phase shift will affect all following instructions on the same channel until the program ends. To undo the affect of a ``ShiftPhase``, the negative ``phase`` can be passed to a new instruction."
msgstr "``ShiftPhase`` 명령어는 주파수 변조의 위상을 ``phase``으로 증가시킨다. ``SetFrequency``와 마찬가지로 이 위상 변화는 프로그램이 끝날 때까지 동일한 채널의 모든 후속 명령에 영향을 미친다.  ``ShiftPhase``의 영향을 취소하려면 음수로 된  ``phase``'를 새로운 명령어로 전달한다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:348
msgid "Like ``SetFrequency``, the instruction has an implicit duration of ``0``."
msgstr "``SetFrequency``와 같이, ``ShiftPhase`` 명령어는 암묵적으로 ``0``의 지속시간(duration) 을 갖는다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:372
msgid "``Acquire``"
msgstr "``Acquire``"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:374
msgid "The ``Acquire`` instruction triggers data acquisition for readout. It takes a duration, an ``AcquireChannel`` which maps to the qubit being measured, and a ``MemorySlot`` or a ``RegisterSlot``. The ``MemorySlot`` is classical memory where the readout result will be stored. The ``RegisterSlot`` maps to a register in the control electronics which stores the readout result for fast feedback."
msgstr "``Acquire`` 명령어는 판독을 위한 데이터 수집을 촉발한다. 큐비트에 매핑되는 ``AcquireChannel``과 ``MemorySlot`` 또는 ``RegisterSlot``을 측정하는 데는 시간이 걸린다. ``MemorySlot``은 판독 결과가 저장될 고전적인 메모리이다. ``RegisterSlot``은 빠른 피드백을 위해 판독 결과를 저장하는 제어 전자 장치의 레지스터에 매핑된다."

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:376
msgid "``Acquire`` instructions can also take custom ``Discriminator``\\ s and ``Kernel``\\ s as keyword arguments. Read more about building measurements `here <4_adding_measurements.ipynb>`__."
msgstr "``Acquire`` 명령어는 사용자 지정 ``Discriminator``들 및 ``Kernel``들을 키워드 인수로 사용할 수도 있다. 측정(measurement)을 작성하는 세부적인 방법은 여기를 참조한다.<4_adding_measurements.ipynb>`__"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:399
msgid "Now that we know how to build instructions, let's learn how to compose them into ``Schedule``\\ s on the `next page <3_building_pulse_schedules.ipynb>`__!"
msgstr "이제 명령어를 구성하는 방법을 배웠으므로, 다음페이지에서 명령어들을 ``Schedule``에 넣어 작성하는 방법을 알아보자! <3_building_pulse_schedules.ipynb>"

