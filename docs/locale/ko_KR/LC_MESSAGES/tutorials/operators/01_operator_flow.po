msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-21 20:22+0000\n"
"PO-Revision-Date: 2021-02-20 18:39\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/operators/01_operator_flow.po\n"
"X-Crowdin-File-ID: 9472\n"
"Language: ko_KR\n"

#: ../../tutorials/operators/01_operator_flow.ipynb:10
msgid "This page was generated from `tutorials/operators/01_operator_flow.ipynb`__."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/operators/01_operator_flow.ipynb>`_."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:9
msgid "Operator Flow"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:11
msgid "`Introduction <#introduction>`__"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:13
msgid "`Pauli operators, sums, compositions, and tensor products <#paulioperators>`__"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:15
msgid "`Part I: State Functions and Measurements <#statefunctions>`__"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:17
msgid "`Algebraic operations and predicates <#algebraicoperations>`__"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:19
msgid "`Part II: ``PrimitiveOp``\\ s <#primitiveops>`__"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:21
msgid "`Matrix elements <#matrixelements>`__"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:22
msgid "`Applying an operator to a state vector <#applyingoperator>`__"
msgstr "` 상태 벡터에 연산자 적용 <#applyingoperator> ` __"

#: ../../tutorials/operators/01_operator_flow.ipynb:24
msgid "`Part III ``ListOp`` and subclasses <#listopsubclasses>`__"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:26
msgid "`ListOp <#listop>`__"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:27
msgid "`ListOps: ``SummedOp``, ``ComposedOp``, ``TensoredOp`` <#listopssummedop>`__"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:29
msgid "`Part IV: ``OperatorStateFn`` <#operatorstatefn>`__"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:30
msgid "`Part V: Converters <#converters>`__"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:32
msgid "`Evolutions, ``exp_i()``, and the ``EvolvedOp`` <#evolutions>`__"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:34
msgid "`Weighted sum of Pauli operators <#weightedsum>`__"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:36
msgid "`Expectations <#expectations>`__"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:37
msgid "`Executing ``CircuitStateFn``\\ s with the ``CircuitSampler`` <#executing>`__"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:49
msgid "Introduction"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:51
msgid "Qiskit provides classes representing states and operators and sums, tensor products, and compositions thereof. These algebraic constructs allow us to build expressions representing operators."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:53
msgid "We introduce expressions by building them from Pauli operators. In subsequent sections we explore in more detail operators and states, how they are represented, and what we can do with them. In the last section we construct a state, evolve it with a Hamiltonian, and compute expectation values of an observable."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:56
msgid "Pauli operators, sums, compositions, and tensor products"
msgstr "파울리 연산자, 합계, 컴포지션 및 텐서 곱"

#: ../../tutorials/operators/01_operator_flow.ipynb:58
msgid "The most important base operators are the Pauli operators. The Pauli operators are represented like this."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:99
msgid "These operators may also carry a coefficient."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:142
msgid "These coefficients allow the operators to be used as terms in a sum."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:188
msgid "Tensor products are denoted with a caret, like this."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:228
msgid "Composition is denoted by the ``@`` symbol."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:268
msgid "In the preceding two examples, the tensor product and composition of Pauli operators were immediatley reduced to the equivalent (possibly multi-qubit) Pauli operator. If we tensor or compose more complicated objects, the result is objects representing the unevaluated operations. That is, algebraic expressions."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:279
msgid "For example, composing two sums gives"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:337
msgid "And tensoring two sums gives"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:395
msgid "Let’s take a closer look at the types introduced above. First the Pauli operators."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:438
msgid "Each Pauli operator is an instance of ``PauliOp``, which wraps an instance of ``qiskit.quantum_info.Pauli``, and adds a coefficient ``coeff``. In general, a ``PauliOp`` represents a weighted tensor product of Pauli operators."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:479
msgid "For the encoding of the Pauli operators as pairs of Boolean values, see the documentation for ``qiskit.quantum_info.Pauli``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:481
msgid "All of the objects representing operators, whether as “primitive”s such as ``PauliOp``, or algebraic expressions carry a coefficient"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:533
msgid "In the following we take a broader and deeper look at Qiskit’s operators, states, and the building blocks of quantum algorithms."
msgstr "다음으로, Qiskit의 연산자, 상태 및 양자 알고리즘의 빌딩 블록을 보다 광범위하고 심도 있게 살펴봅니다."

#: ../../tutorials/operators/01_operator_flow.ipynb:545
msgid "Part I: State Functions and Measurements"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:547
msgid "Quantum states are represented by subclasses of the class ``StateFn``. There are four representations of quantum states: ``DictStateFn`` is a sparse respresentation in the computational basis, backed by a ``dict``. ``VectorStateFn`` is a dense representation in the computational basis backed by a numpy array. ``CircuitStateFn`` is backed by a circuit and represents the state obtained by executing the circuit on the all-zero computational-basis state. ``OperatorStateFn`` represents mixed states via a density matrix. (As we will see later, ``OperatorStateFn`` is also used to represent observables.)"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:550
msgid "Several ``StateFn`` instances are provided for convenience. For example ``Zero, One, Plus, Minus``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:572
msgid "``Zero`` and ``One`` represent the quantum states :math:`|0\\rangle` and :math:`|1\\rangle`. They are represented via ``DictStateFn``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:612
msgid "``Plus`` and ``Minus``, representing states :math:`(|0\\rangle + |1\\rangle)/\\sqrt{2}` and :math:`(|0\\rangle - |1\\rangle)/\\sqrt{2}` are represented via circuits. ``H`` is a synonym for ``Plus``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:668
msgid "Indexing into quantum states is done with the ``eval`` method. These examples return the coefficients of the ``0`` and ``1`` basis states. (Below, we will see that the ``eval`` method is used for other computations, as well.)"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:720
msgid "The dual vector of a quantum state, that is the *bra* corresponding to a *ket* is obtained via the ``adjoint`` method. The ``StateFn`` carries a flag ``is_measurement``, which is ``False`` if the object is a ket and ``True`` if it is a bra."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:731
msgid "Here, we construct :math:`\\langle 1 |`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:772
msgid "For convenience, one may obtain the dual vector with a tilde, like this"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:814
msgid "Algebraic operations and predicates"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:816
msgid "Many algebraic operations and predicates between ``StateFn``\\ s are supported, including: \\* ``+`` - addition \\* ``-`` - subtraction, negation (scalar multiplication by -1) \\* ``*`` - scalar multiplication \\* ``/`` - scalar division \\* ``@`` - composition \\* ``^`` - tensor product or tensor power (tensor with self n times) \\* ``**`` - composition power (compose with self n times) \\* ``==`` - equality \\* ``~`` - adjoint, alternating between a State Function and Measurement"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:818
msgid "Be aware that parentheses are often neccessary to override **operator precedence**."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:829
msgid "``StateFn``\\ s carry a coefficient. This allows us multiply states by a scalar, and so to construct sums."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:840
msgid "Here, we construct :math:`(2 + 3i)|0\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:881
msgid "Here, we see that adding two ``DictStateFn``\\ s returns an object of the same type. We construct :math:`|0\\rangle + |1\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:921
msgid "Note that you must normalize states by hand. For example, to construct :math:`(|0\\rangle + |1\\rangle)/\\sqrt{2}`, we write"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:964
msgid "In other cases, the result is a symbolic representation of a sum. For example, here is a representation of :math:`|+\\rangle + |-\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1026
msgid "The composistion operator is used to perform an inner product, which by default is held in an unevaluated form. Here is a representation of :math:`\\langle 1 | 1 \\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1072
msgid "Note that the ``is_measurement`` flag causes the (bra) state ``~One`` to be printed ``DictMeasurement``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1083
msgid "Symbolic expressions may be evaluated with the ``eval`` method."
msgstr "상징적 표현은``eval``로 평가할 수 있다."

#: ../../tutorials/operators/01_operator_flow.ipynb:1154
msgid "Here is :math:`\\langle - | 1 \\rangle = \\langle (\\langle 0| - \\langle 1|)/\\sqrt{2} | 1\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1195
msgid "The composition operator ``@`` is equivalent to calling the ``compose`` method."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1241
msgid "Inner products may also be computed using the ``eval`` method directly, without constructing a ``ComposedOp``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1282
msgid "Symbolic tensor products are constructed as follows. Here is :math:`|0\\rangle \\otimes |+\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1336
msgid "This may be represented as a simple (not compound) ``CircuitStateFn``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1388
msgid "Tensor powers are constructed using the caret ``^`` as follows. Here are :math:`600 (|11111\\rangle + |00000\\rangle)`, and :math:`|10\\rangle^{\\otimes 3}`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1431
msgid "The method ``to_matrix_op`` converts to ``VectorStateFn``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1509
msgid "Constructing a StateFn is easy. The ``StateFn`` class also serves as a factory, and can take any applicable primitive in its constructor and return the correct StateFn subclass. Currently the following primitives can be passed into the constructor, listed alongside the ``StateFn`` subclass they produce:"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1511
msgid "str (equal to some basis bitstring) -> DictStateFn"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1512
msgid "dict -> DictStateFn"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1513
msgid "Qiskit Result object -> DictStateFn"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1514
msgid "list -> VectorStateFn"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1515
msgid "np.ndarray -> VectorStateFn"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1516
msgid "Statevector -> VectorStateFn"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1517
msgid "QuantumCircuit -> CircuitStateFn"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1518
msgid "Instruction -> CircuitStateFn"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1519
msgid "OperatorBase -> OperatorStateFn"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1586
msgid "Part II: ``PrimitiveOp``\\ s"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1588
msgid "The basic Operators are subclasses of ``PrimitiveOp``. Just like ``StateFn``, ``PrimitiveOp`` is also a factory for creating the correct type of ``PrimitiveOp`` for a given primitive. Currently, the following primitives can be passed into the constructor, listed alongside the ``PrimitiveOp`` subclass they produce:"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1590
msgid "Terra’s Pauli -> PauliOp"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1591
msgid "Instruction -> CircuitOp"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1592
msgid "QuantumCircuit -> CircuitOp"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1593
msgid "2d List -> MatrixOp"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1594
msgid "np.ndarray -> MatrixOp"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1595
msgid "spmatrix -> MatrixOp"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1596
msgid "Terra’s quantum_info.Operator -> MatrixOp"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1618
msgid "Matrix elements"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1629
msgid "The ``eval`` method returns a column from an operator. For example, the Pauli :math:`X` operator is represented by a ``PauliOp``. Asking for a column returns an instance of the sparse representaion, a ``DictStateFn``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1699
msgid "It follows that indexing into an operator, that is obtaining a matrix element, is performed with two calls to the ``eval`` method."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1710
msgid "We have :math:`X = \\left(\\begin{matrix} 0 & 1 \\\\  1 & 0  \\end{matrix} \\right)`. And the matrix element :math:`\\left\\{X \\right\\}_{0,1}` is"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1751
msgid "Here is an example using the two qubit operator ``CX``, the controlled ``X``, which is represented by a circuit."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1871
msgid "Applying an operator to a state vector"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1882
msgid "Applying an operator to a state vector may be done with the ``compose`` method (equivalently, ``@`` operator). Here is a representation of :math:`X | 1 \\rangle = |0\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1928
msgid "A simpler representation, the ``DictStateFn`` representation of :math:`|0\\rangle`, is obtained with ``eval``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1969
msgid "The intermediate ``ComposedOp`` step may be avoided by using ``eval`` directly."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2010
msgid "Composition and tensor products of operators are effected with ``@`` and ``^``. Here are some examples."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2164
msgid "Part III ``ListOp`` and subclasses"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2176
msgid "ListOp"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2178
msgid "``ListOp`` is a container for effectively vectorizing operations over a list of operators and states."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2238
msgid "For example, the composition above is distributed over the lists (``ListOp``) using the simplification method ``reduce``."
msgstr "예를 들어, 상기 조성물은 단순화 방법의 ``reduce``를 사용하여 목록(``ListOp``) 상에 분포된다."

#: ../../tutorials/operators/01_operator_flow.ipynb:2321
msgid "ListOps: ``SummedOp``, ``ComposedOp``, ``TensoredOp``"
msgstr "ListOps: ``SummedOp``, ``ComposedOp``, ``TensoredOp``"

#: ../../tutorials/operators/01_operator_flow.ipynb:2323
msgid "``ListOp``, introduced above, is useful for vectorizing operations. But, it also serves as the superclass for list-like composite classes. If you’ve already played around with the above, you’ll notice that you can easily perform operations between ``OperatorBase``\\ s which we may not know how to perform efficiently in general (or simply haven’t implemented an efficient procedure for yet), such as addition between ``CircuitOp``\\ s. In those cases, you may receive a ``ListOp`` result (or subclass thereof) from your operation representing the lazy execution of the operation. For example, if you attempt to add together a ``DictStateFn`` and a ``CircuitStateFn``, you’ll receive a ``SummedOp`` representing the sum of the two. This composite State function still has a working ``eval`` (but may need to perform a non-scalable computation under the hood, such as converting both to vectors)."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2326
msgid "These composite ``OperatorBase``\\ s are how we construct increasingly complex and rich computation out of ``PrimitiveOp`` and ``StateFn`` building blocks."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2328
msgid "Every ``ListOp`` has four properties: \\* ``oplist`` - The list of ``OperatorBase``\\ s which may represent terms, factors, etc. \\* ``combo_fn`` - The function taking a list of complex numbers to an output value which defines how to combine the outputs of the ``oplist`` items. For broadcasting simplicity, this function is defined over NumPy arrays. \\* ``coeff`` - A coefficient multiplying the primitive. Note that ``coeff`` can be int, float, complex or a free ``Parameter`` object (from ``qiskit.circuit`` in Terra) to be bound later using ``my_op.bind_parameters``. \\* ``abelian`` - Indicates whether the Operators in ``oplist`` are known to mutually commute (usually set after being converted by the ``AbelianGrouper`` converter)."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2331
msgid "Note that ``ListOp`` supports typical iteration overloads, so you can use indexing like ``my_op[4]`` to access the ``OperatorBase``\\ s in ``oplist``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2343
msgid "``OperatorStateFn``"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2345
msgid "We mentioned above that ``OperatorStateFn`` represents a density operator. But, if the ``is_measurement`` flag is ``True``, then ``OperatorStateFn`` represents an observable. The expectation value of this observable can then be constructed via ``ComposedOp``. Or, directly, using ``eval``. Recall that the ``is_measurement`` flag (property) is set via the ``adjoint`` method."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2356
msgid "Here we construct the observable corresponding to the Pauli :math:`Z` operator. Note that when printing, it is called ``OperatorMeasurement``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2418
msgid "Here, we compute :math:`\\langle 0 | Z | 0 \\rangle`, :math:`\\langle 1 | Z | 1 \\rangle`, and :math:`\\langle + | Z | + \\rangle`, where :math:`|+\\rangle = (|0\\rangle + |1\\rangle)/\\sqrt{2}`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2465
msgid "Part IV: Converters"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2467
msgid "Converters are classes that manipulate operators and states and perform building blocks of algorithms. Examples include changing the basis of operators and Trotterization. Converters traverse an expression and perform a particular manipulation or replacement, defined by the converter’s ``convert()`` method, of the Operators within. Typically, if a converter encounters an ``OperatorBase`` in the recursion which is irrelevant to its conversion purpose, that ``OperatorBase`` is left unchanged."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2492
msgid "Evolutions, ``exp_i()``, and the ``EvolvedOp``"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2494
msgid "Every ``PrimitiveOp`` and ``ListOp`` has an ``.exp_i()`` function such that ``H.exp_i()`` corresponds to :math:`e^{-iH}`. In practice, only a few of these Operators have an efficiently computable exponentiation (such as MatrixOp and the PauliOps with only one non-identity single-qubit Pauli), so we need to return a placeholder, or symbolic representation, (similar to how ``SummedOp`` is a placeholder when we can’t perform addition). This placeholder is called ``EvolvedOp``, and it holds the ``OperatorBase`` to be exponentiated in its ``.primitive`` property."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2497
msgid "Qiskit operators fully support parameterization, so we can use a ``Parameter`` for our evolution time here. Notice that there’s no “evolution time” argument in any function. The Operator flow exponentiates whatever operator we tell it to, and if we choose to multiply the operator by an evolution time, :math:`e^{-iHt}`, that will be reflected in our exponentiation parameters."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2509
msgid "Weighted sum of Pauli operators"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2511
msgid "A Hamiltonian expressed as a linear combination of multi-qubit Pauli operators may be constructed like this."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2536
msgid "Note that ``two_qubit_H2`` is represented as a ``SummedOp`` whose terms are ``PauliOp``\\ s."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2588
msgid "Next, we multiply the Hamiltonian by a ``Parameter``. This ``Parameter`` is stored in the ``coeff`` property of the ``SummedOp``. Calling ``exp_i()`` on the result wraps it in ``EvolvedOp``, representing exponentiation."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2645
msgid "We construct ``h2_measurement``, which represents ``two_qubit_H2`` as an observable."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2698
msgid "We construct a Bell state :math:`|\\Phi_+\\rangle` via :math:`\\text{CX} (H\\otimes I) |00\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2751
msgid "Here is the expression :math:`H e^{-iHt} |\\Phi_+\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2836
msgid "Typically, we want to approximate :math:`e^{-iHt}` using two-qubit gates. We achieve this with the ``convert`` method of ``PauliTrotterEvolution``, which traverses expressions applying trotterization to all ``EvolvedOp``\\ s encountered. Although we use ``PauliTrotterEvolution`` here, there are other possibilities, such as ``MatrixEvolution``, which performs the exponentiation exactly."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2930
msgid "``trotterized_op`` contains a ``Parameter``. The ``bind_parameters`` method traverses the expression binding values to parameter names as specified via a ``dict``. In this case, there is only one parameter."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2951
msgid "``bound`` is a ``ComposedOp``. The second factor is the circuit. Let’s draw it to verify that the binding has taken place."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3066
msgid "Expectations"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3068
msgid "``Expectation``\\ s are converters that enable the computation of expectation values of observables. They traverse an Operator tree, replacing ``OperatorStateFn``\\ s (observables) with equivalent instructions which are more amenable to computation on quantum or classical hardware. For example, if we want to measure the expectation value of an Operator ``o`` expressed as a sum of Paulis with respect to some state function, but can only access diagonal measurements on quantum hardware, we can create an observable ``~StateFn(o)`` and use a ``PauliExpectation`` to convert it to a diagonal measurement and circuit pre-rotations to append to the state."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3071
msgid "Another interesting ``Expectation`` is the ``AerPauliExpectation``, which converts the observable into a ``CircuitStateFn`` containing a special expectation snapshot instruction which ``Aer`` can execute natively with high performance."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3162
msgid "By default ``group_paulis=True``, which will use the ``AbelianGrouper`` to convert the ``SummedOp`` into groups of mutually qubit-wise commuting Paulis. This reduces circuit execution overhead, as each group can share the same circuit execution."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3242
msgid "Note that converters act recursively, that is, they traverse an expression applying their action only where possible. So we can just convert our full evolution and measurement expression. We could have equivalently composed the converted ``h2_measurement`` with our evolution ``CircuitStateFn``. We proceed by applying the conversion on the entire expression."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3383
msgid "Now we bind multiple parameter values into a ``ListOp``, followed by ``eval`` to evaluate the entire expression. We could have used ``eval`` earlier if we bound earlier, but it would not be efficient. Here, ``eval`` will convert our ``CircuitStateFn``\\ s to ``VectorStateFn``\\ s through simulation internally."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3405
msgid "Here are the expectation values :math:`\\langle \\Phi_+| e^{iHt} H e^{-iHt} |\\Phi_+\\rangle` corresponding to the different values of the parameter."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3453
msgid "Executing ``CircuitStateFn``\\ s with the ``CircuitSampler``"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3455
msgid "The ``CircuitSampler`` traverses an Operator and converts any ``CircuitStateFns`` into approximations of the resulting state function by a ``DictStateFn`` or ``VectorStateFn`` using a quantum backend. Note that in order to approximate the value of the ``CircuitStateFn``, it must 1) send the state function through a depolarizing channel, which will destroy all phase information and 2) replace the sampled frequencies with **square roots** of the frequency, rather than the raw probability of sampling (which would be the equivalent of sampling the **square** of the state function, per the Born rule.)"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3504
msgid "Note again that the circuits are replaced by dicts with **square roots** of the circuit sampling probabilities. Take a look at one sub-expression before and after the conversion:"
msgstr ""

