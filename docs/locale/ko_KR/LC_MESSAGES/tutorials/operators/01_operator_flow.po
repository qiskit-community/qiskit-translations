msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-10 14:06+0000\n"
"PO-Revision-Date: 2021-06-24 05:29\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/operators/01_operator_flow.po\n"
"X-Crowdin-File-ID: 9472\n"
"Language: ko_KR\n"

#: ../../tutorials/operators/01_operator_flow.ipynb:10
msgid "This page was generated from `tutorials/operators/01_operator_flow.ipynb`__."
msgstr "이 페이지는 `tutorials/operators/01_operator_flow.ipynb`__ 에서 생성되었다."

#: ../../tutorials/operators/01_operator_flow.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/operators/01_operator_flow.ipynb>`_."
msgstr "`IBM 퀀텀 랩 <https://quantum-computing.ibm.com/jupyter/tutorial/operators/01_operator_flow.ipynb>`_ 에서 대화식으로 실행해라."

#: ../../tutorials/operators/01_operator_flow.ipynb:9
msgid "Operator Flow"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:21
msgid "Introduction"
msgstr "소개"

#: ../../tutorials/operators/01_operator_flow.ipynb:23
msgid "Qiskit provides classes representing states and operators and sums, tensor products, and compositions thereof. These algebraic constructs allow us to build expressions representing operators."
msgstr "Qiskit은 상태와 연산자와 그들의 합, 텐서 곱, 그리고 그들의 합성을 나타내는 클래스들을 제공한다. 이런 대수적 구조들은 연산자들을 나타내는 표현을 빌드할 수 있도록 해 준다."

#: ../../tutorials/operators/01_operator_flow.ipynb:25
msgid "We introduce expressions by building them from Pauli operators. In subsequent sections we explore in more detail operators and states, how they are represented, and what we can do with them. In the last section we construct a state, evolve it with a Hamiltonian, and compute expectation values of an observable."
msgstr "파울리 연산자(Pauli operators)로부터 빌드되는 표현을 소개한다. 후속 절에서는 연산자와 상태, 그들이 어떻게 표현되는지, 그리고 그들로 무엇을 할 수 있는지 더 상세하게 알아본다. 마지막 절에서는 해밀토니안을 따라 변화(time-evolution)하는 상태를 구성하고, 관측가능량(observable)의 기댓값을 계산할 것이다."

#: ../../tutorials/operators/01_operator_flow.ipynb:28
msgid "Pauli operators, sums, compositions, and tensor products"
msgstr "파울리 연산자, 합계, 컴포지션 및 텐서 곱"

#: ../../tutorials/operators/01_operator_flow.ipynb:30
msgid "The most important base operators are the Pauli operators. The Pauli operators are represented like this."
msgstr "가장 중요한 기반 연산자는 파울리 연산자이다. 파울리 연산자는 다음과 같이 표현된다."

#: ../../tutorials/operators/01_operator_flow.ipynb:71
msgid "These operators may also carry a coefficient."
msgstr "이 연산자들은 계수 또한 가져갈 수 있다."

#: ../../tutorials/operators/01_operator_flow.ipynb:114
msgid "These coefficients allow the operators to be used as terms in a sum."
msgstr "이 계수들은 연산자들을 합계의 항들로 사용할 수 있도록 해준다."

#: ../../tutorials/operators/01_operator_flow.ipynb:156
msgid "Tensor products are denoted with a caret, like this."
msgstr "텐서 곱은 이와 같이 캐럿(caret)으로 표시된다."

#: ../../tutorials/operators/01_operator_flow.ipynb:196
msgid "Composition is denoted by the ``@`` symbol."
msgstr "합성은 ``@`` 기호로 표시된다."

#: ../../tutorials/operators/01_operator_flow.ipynb:236
msgid "In the preceding two examples, the tensor product and composition of Pauli operators were immediately reduced to the equivalent (possibly multi-qubit) Pauli operator. If we tensor or compose more complicated objects, the result is objects representing the unevaluated operations. That is, algebraic expressions."
msgstr "앞의 두 예에서, 파울리 연산자들의 텐서 곱과 합성은 즉각 동등한 (다수의 큐비트일 가능성이 있는) 파울리 연산자로 줄여 표현되었다. 텐서 곱과 합성이 포함된 더 복잡한 객체의 경우, 결과는 평가 전의 연산들(unevaluated operations)을 나타내는 객체가 된다. 즉, 대수적 표현으로 나타난다."

#: ../../tutorials/operators/01_operator_flow.ipynb:247
msgid "For example, composing two sums gives"
msgstr "예를 들어, 두 합의 합성은 다음을 주고"

#: ../../tutorials/operators/01_operator_flow.ipynb:293
msgid "And tensoring two sums gives"
msgstr "두 합의 텐서 곱은 다음을 준다"

#: ../../tutorials/operators/01_operator_flow.ipynb:339
msgid "Let’s take a closer look at the types introduced above. First the Pauli operators."
msgstr "위에 소개된 유형을 자세히 살펴보자. 먼저, 파울리 연산자들이 있다."

#: ../../tutorials/operators/01_operator_flow.ipynb:380
msgid "Each Pauli operator is an instance of ``PauliOp``, which wraps an instance of ``qiskit.quantum_info.Pauli``, and adds a coefficient ``coeff``. In general, a ``PauliOp`` represents a weighted tensor product of Pauli operators."
msgstr "각 파울리 연산자는 ``PauliOp`` 인스턴스로써 ``qiskit.quantum_info.Pauli`` 인스턴스를 래핑하고, 계수 ``coeff``를 갖는다. 일반적으로 ``PauliOp``는 파울리 연산자의 가중 탠서 곱을 나타낸다."

#: ../../tutorials/operators/01_operator_flow.ipynb:421
msgid "For the encoding of the Pauli operators as pairs of Boolean values, see the documentation for ``qiskit.quantum_info.Pauli``."
msgstr "파울리 연산자를 불리언 값 쌍으로 인코딩하려면 ``qiskit.quantum_info.Pauli`` 문서를 참조하라."

#: ../../tutorials/operators/01_operator_flow.ipynb:423
msgid "All of the objects representing operators, whether as “primitive”s such as ``PauliOp``, or algebraic expressions carry a coefficient"
msgstr "``PauliOp``의 “primitive”든 대수적 표현이든, 연산자를 나타내는 모든 객체들은 계수를 가진다."

#: ../../tutorials/operators/01_operator_flow.ipynb:469
msgid "In the following we take a broader and deeper look at Qiskit’s operators, states, and the building blocks of quantum algorithms."
msgstr "다음으로, Qiskit의 연산자, 상태 및 양자 알고리즘의 빌딩 블록을 보다 광범위하고 심도 있게 살펴본다."

#: ../../tutorials/operators/01_operator_flow.ipynb:481
msgid "Part I: State Functions and Measurements"
msgstr "파트 I: 상태 함수 및 측정"

#: ../../tutorials/operators/01_operator_flow.ipynb:483
msgid "Quantum states are represented by subclasses of the class ``StateFn``. There are four representations of quantum states: ``DictStateFn`` is a sparse representation in the computational basis, backed by a ``dict``. ``VectorStateFn`` is a dense representation in the computational basis backed by a numpy array. ``CircuitStateFn`` is backed by a circuit and represents the state obtained by executing the circuit on the all-zero computational-basis state. ``OperatorStateFn`` represents mixed states via a density matrix. (As we will see later, ``OperatorStateFn`` is also used to represent observables.)"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:486
msgid "Several ``StateFn`` instances are provided for convenience. For example ``Zero, One, Plus, Minus``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:508
msgid "``Zero`` and ``One`` represent the quantum states :math:`|0\\rangle` and :math:`|1\\rangle`. They are represented via ``DictStateFn``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:548
msgid "``Plus`` and ``Minus``, representing states :math:`(|0\\rangle + |1\\rangle)/\\sqrt{2}` and :math:`(|0\\rangle - |1\\rangle)/\\sqrt{2}` are represented via circuits. ``H`` is a synonym for ``Plus``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:604
msgid "Indexing into quantum states is done with the ``eval`` method. These examples return the coefficients of the ``0`` and ``1`` basis states. (Below, we will see that the ``eval`` method is used for other computations, as well.)"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:656
msgid "The dual vector of a quantum state, that is the *bra* corresponding to a *ket* is obtained via the ``adjoint`` method. The ``StateFn`` carries a flag ``is_measurement``, which is ``False`` if the object is a ket and ``True`` if it is a bra."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:667
msgid "Here, we construct :math:`\\langle 1 |`."
msgstr "여기서 :math:`\\langle 1 |` 을 구성한다."

#: ../../tutorials/operators/01_operator_flow.ipynb:708
msgid "For convenience, one may obtain the dual vector with a tilde, like this"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:750
msgid "Algebraic operations and predicates"
msgstr "Algebraic 오퍼레이션 및 술어"

#: ../../tutorials/operators/01_operator_flow.ipynb:752
msgid "Many algebraic operations and predicates between ``StateFn``\\ s are supported, including: \\* ``+`` - addition \\* ``-`` - subtraction, negation (scalar multiplication by -1) \\* ``*`` - scalar multiplication \\* ``/`` - scalar division \\* ``@`` - composition \\* ``^`` - tensor product or tensor power (tensor with self n times) \\* ``**`` - composition power (compose with self n times) \\* ``==`` - equality \\* ``~`` - adjoint, alternating between a State Function and Measurement"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:754
msgid "Be aware that parentheses are often necessary to override **operator precedence**."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:765
msgid "``StateFn``\\ s carry a coefficient. This allows us multiply states by a scalar, and so to construct sums."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:776
msgid "Here, we construct :math:`(2 + 3i)|0\\rangle`."
msgstr "여기서는 :math:`(2 + 3i)|0\\rangle` 을 구성한다."

#: ../../tutorials/operators/01_operator_flow.ipynb:817
msgid "Here, we see that adding two ``DictStateFn``\\ s returns an object of the same type. We construct :math:`|0\\rangle + |1\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:857
msgid "Note that you must normalize states by hand. For example, to construct :math:`(|0\\rangle + |1\\rangle)/\\sqrt{2}`, we write"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:900
msgid "In other cases, the result is a symbolic representation of a sum. For example, here is a representation of :math:`|+\\rangle + |-\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:962
msgid "The composition operator is used to perform an inner product, which by default is held in an unevaluated form. Here is a representation of :math:`\\langle 1 | 1 \\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1008
msgid "Note that the ``is_measurement`` flag causes the (bra) state ``~One`` to be printed ``DictMeasurement``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1019
msgid "Symbolic expressions may be evaluated with the ``eval`` method."
msgstr "상징적 표현은 ``eval`` 로 평가할 수 있다."

#: ../../tutorials/operators/01_operator_flow.ipynb:1090
msgid "Here is :math:`\\langle - | 1 \\rangle = \\langle (\\langle 0| - \\langle 1|)/\\sqrt{2} | 1\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1131
msgid "The composition operator ``@`` is equivalent to calling the ``compose`` method."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1177
msgid "Inner products may also be computed using the ``eval`` method directly, without constructing a ``ComposedOp``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1218
msgid "Symbolic tensor products are constructed as follows. Here is :math:`|0\\rangle \\otimes |+\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1272
msgid "This may be represented as a simple (not compound) ``CircuitStateFn``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1324
msgid "Tensor powers are constructed using the caret ``^`` as follows. Here are :math:`600 (|11111\\rangle + |00000\\rangle)`, and :math:`|10\\rangle^{\\otimes 3}`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1367
msgid "The method ``to_matrix_op`` converts to ``VectorStateFn``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1445
msgid "Constructing a StateFn is easy. The ``StateFn`` class also serves as a factory, and can take any applicable primitive in its constructor and return the correct StateFn subclass. Currently the following primitives can be passed into the constructor, listed alongside the ``StateFn`` subclass they produce:"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1447
msgid "str (equal to some basis bitstring) -> DictStateFn"
msgstr "str (일부 기저 비트 문자열과 동일) -> DictStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1448
msgid "dict -> DictStateFn"
msgstr "dict -> DictStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1449
msgid "Qiskit Result object -> DictStateFn"
msgstr "Qiskit Result object -> DictStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1450
msgid "list -> VectorStateFn"
msgstr "list -> VectorStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1451
msgid "np.ndarray -> VectorStateFn"
msgstr "np.ndarray -> VectorStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1452
msgid "Statevector -> VectorStateFn"
msgstr "Statevector -> VectorStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1453
msgid "QuantumCircuit -> CircuitStateFn"
msgstr "QuantumCircuit -> CircuitStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1454
msgid "Instruction -> CircuitStateFn"
msgstr "Instruction -> CircuitStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1455
msgid "OperatorBase -> OperatorStateFn"
msgstr "OperatorBase -> OperatorStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1522
msgid "Part II: ``PrimitiveOp``\\ s"
msgstr "파트 II: ``PrimitiveOp``\\ s"

#: ../../tutorials/operators/01_operator_flow.ipynb:1524
msgid "The basic Operators are subclasses of ``PrimitiveOp``. Just like ``StateFn``, ``PrimitiveOp`` is also a factory for creating the correct type of ``PrimitiveOp`` for a given primitive. Currently, the following primitives can be passed into the constructor, listed alongside the ``PrimitiveOp`` subclass they produce:"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1526
msgid "Terra’s Pauli -> PauliOp"
msgstr "Terra’s Pauli -> PauliOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1527
msgid "Instruction -> CircuitOp"
msgstr "Instruction -> CircuitOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1528
msgid "QuantumCircuit -> CircuitOp"
msgstr "QuantumCircuit -> CircuitOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1529
msgid "2d List -> MatrixOp"
msgstr "2d List -> MatrixOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1530
msgid "np.ndarray -> MatrixOp"
msgstr "np.ndarray -> MatrixOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1531
msgid "spmatrix -> MatrixOp"
msgstr "spmatrix -> MatrixOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1532
msgid "Terra’s quantum_info.Operator -> MatrixOp"
msgstr "테라의 (Terra’s) quantum_info.Operator -> MatrixOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1554
msgid "Matrix elements"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1565
msgid "The ``eval`` method returns a column from an operator. For example, the Pauli :math:`X` operator is represented by a ``PauliOp``. Asking for a column returns an instance of the sparse representation, a ``DictStateFn``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1635
msgid "It follows that indexing into an operator, that is obtaining a matrix element, is performed with two calls to the ``eval`` method."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1646
msgid "We have :math:`X = \\left(\\begin{matrix} 0 & 1 \\\\  1 & 0  \\end{matrix} \\right)`. And the matrix element :math:`\\left\\{X \\right\\}_{0,1}` is"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1687
msgid "Here is an example using the two qubit operator ``CX``, the controlled ``X``, which is represented by a circuit."
msgstr "여기에 회로로 나타난 two-qubit 연산자 ``CX`` (controlled ``X``) 를 사용한 예시가 있다."

#: ../../tutorials/operators/01_operator_flow.ipynb:1807
msgid "Applying an operator to a state vector"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1818
msgid "Applying an operator to a state vector may be done with the ``compose`` method (equivalently, ``@`` operator). Here is a representation of :math:`X | 1 \\rangle = |0\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1864
msgid "A simpler representation, the ``DictStateFn`` representation of :math:`|0\\rangle`, is obtained with ``eval``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1905
msgid "The intermediate ``ComposedOp`` step may be avoided by using ``eval`` directly."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1946
msgid "Composition and tensor products of operators are effected with ``@`` and ``^``. Here are some examples."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2100
msgid "Part III ``ListOp`` and subclasses"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2112
msgid "``ListOp``"
msgstr "``ListOp``"

#: ../../tutorials/operators/01_operator_flow.ipynb:2114
msgid "``ListOp`` is a container for effectively vectorizing operations over a list of operators and states."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2174
msgid "For example, the composition above is distributed over the lists (``ListOp``) using the simplification method ``reduce``."
msgstr "예를 들어, 상기 조성물은 단순화 방법의 ``reduce`` 를 사용하여 목록(``ListOp``) 상에 분포된다."

#: ../../tutorials/operators/01_operator_flow.ipynb:2257
msgid "``ListOp``\\ s: ``SummedOp``, ``ComposedOp``, ``TensoredOp``"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2259
msgid "``ListOp``, introduced above, is useful for vectorizing operations. But, it also serves as the superclass for list-like composite classes. If you’ve already played around with the above, you’ll notice that you can easily perform operations between ``OperatorBase``\\ s which we may not know how to perform efficiently in general (or simply haven’t implemented an efficient procedure for yet), such as addition between ``CircuitOp``\\ s. In those cases, you may receive a ``ListOp`` result (or subclass thereof) from your operation representing the lazy execution of the operation. For example, if you attempt to add together a ``DictStateFn`` and a ``CircuitStateFn``, you’ll receive a ``SummedOp`` representing the sum of the two. This composite State function still has a working ``eval`` (but may need to perform a non-scalable computation under the hood, such as converting both to vectors)."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2262
msgid "These composite ``OperatorBase``\\ s are how we construct increasingly complex and rich computation out of ``PrimitiveOp`` and ``StateFn`` building blocks."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2264
msgid "Every ``ListOp`` has four properties: \\* ``oplist`` - The list of ``OperatorBase``\\ s which may represent terms, factors, etc. \\* ``combo_fn`` - The function taking a list of complex numbers to an output value which defines how to combine the outputs of the ``oplist`` items. For broadcasting simplicity, this function is defined over NumPy arrays. \\* ``coeff`` - A coefficient multiplying the primitive. Note that ``coeff`` can be int, float, complex or a free ``Parameter`` object (from ``qiskit.circuit`` in Terra) to be bound later using ``my_op.bind_parameters``. \\* ``abelian`` - Indicates whether the Operators in ``oplist`` are known to mutually commute (usually set after being converted by the ``AbelianGrouper`` converter)."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2267
msgid "Note that ``ListOp`` supports typical iteration overloads, so you can use indexing like ``my_op[4]`` to access the ``OperatorBase``\\ s in ``oplist``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2279
msgid "``OperatorStateFn``"
msgstr "``OperatorStateFn``"

#: ../../tutorials/operators/01_operator_flow.ipynb:2281
msgid "We mentioned above that ``OperatorStateFn`` represents a density operator. But, if the ``is_measurement`` flag is ``True``, then ``OperatorStateFn`` represents an observable. The expectation value of this observable can then be constructed via ``ComposedOp``. Or, directly, using ``eval``. Recall that the ``is_measurement`` flag (property) is set via the ``adjoint`` method."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2292
msgid "Here we construct the observable corresponding to the Pauli :math:`Z` operator. Note that when printing, it is called ``OperatorMeasurement``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2354
msgid "Here, we compute :math:`\\langle 0 | Z | 0 \\rangle`, :math:`\\langle 1 | Z | 1 \\rangle`, and :math:`\\langle + | Z | + \\rangle`, where :math:`|+\\rangle = (|0\\rangle + |1\\rangle)/\\sqrt{2}`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2401
msgid "Part IV: Converters"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2403
msgid "Converters are classes that manipulate operators and states and perform building blocks of algorithms. Examples include changing the basis of operators and Trotterization. Converters traverse an expression and perform a particular manipulation or replacement, defined by the converter’s ``convert()`` method, of the Operators within. Typically, if a converter encounters an ``OperatorBase`` in the recursion which is irrelevant to its conversion purpose, that ``OperatorBase`` is left unchanged."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2428
msgid "Evolutions, ``exp_i()``, and the ``EvolvedOp``"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2430
msgid "Every ``PrimitiveOp`` and ``ListOp`` has an ``.exp_i()`` function such that ``H.exp_i()`` corresponds to :math:`e^{-iH}`. In practice, only a few of these Operators have an efficiently computable exponentiation (such as MatrixOp and the PauliOps with only one non-identity single-qubit Pauli), so we need to return a placeholder, or symbolic representation, (similar to how ``SummedOp`` is a placeholder when we can’t perform addition). This placeholder is called ``EvolvedOp``, and it holds the ``OperatorBase`` to be exponentiated in its ``.primitive`` property."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2433
msgid "Qiskit operators fully support parameterization, so we can use a ``Parameter`` for our evolution time here. Notice that there’s no “evolution time” argument in any function. The Operator flow exponentiates whatever operator we tell it to, and if we choose to multiply the operator by an evolution time, :math:`e^{-iHt}`, that will be reflected in our exponentiation parameters."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2445
msgid "Weighted sum of Pauli operators"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2447
msgid "A Hamiltonian expressed as a linear combination of multi-qubit Pauli operators may be constructed like this."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2472
msgid "Note that ``two_qubit_H2`` is represented as a ``SummedOp`` whose terms are ``PauliOp``\\ s."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2520
msgid "Next, we multiply the Hamiltonian by a ``Parameter``. This ``Parameter`` is stored in the ``coeff`` property of the ``SummedOp``. Calling ``exp_i()`` on the result wraps it in ``EvolvedOp``, representing exponentiation."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2589
msgid "We construct ``h2_measurement``, which represents ``two_qubit_H2`` as an observable."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2638
msgid "We construct a Bell state :math:`|\\Phi_+\\rangle` via :math:`\\text{CX} (H\\otimes I) |00\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2691
msgid "Here is the expression :math:`H e^{-iHt} |\\Phi_+\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2772
msgid "Typically, we want to approximate :math:`e^{-iHt}` using two-qubit gates. We achieve this with the ``convert`` method of ``PauliTrotterEvolution``, which traverses expressions applying trotterization to all ``EvolvedOp``\\ s encountered. Although we use ``PauliTrotterEvolution`` here, there are other possibilities, such as ``MatrixEvolution``, which performs the exponentiation exactly."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2862
msgid "``trotterized_op`` contains a ``Parameter``. The ``bind_parameters`` method traverses the expression binding values to parameter names as specified via a ``dict``. In this case, there is only one parameter."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2883
msgid "``bound`` is a ``ComposedOp``. The second factor is the circuit. Let’s draw it to verify that the binding has taken place."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2998
msgid "Expectations"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3000
msgid "``Expectation``\\ s are converters that enable the computation of expectation values of observables. They traverse an Operator tree, replacing ``OperatorStateFn``\\ s (observables) with equivalent instructions which are more amenable to computation on quantum or classical hardware. For example, if we want to measure the expectation value of an Operator ``o`` expressed as a sum of Paulis with respect to some state function, but can only access diagonal measurements on quantum hardware, we can create an observable ``~StateFn(o)`` and use a ``PauliExpectation`` to convert it to a diagonal measurement and circuit pre-rotations to append to the state."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3003
msgid "Another interesting ``Expectation`` is the ``AerPauliExpectation``, which converts the observable into a ``CircuitStateFn`` containing a special expectation snapshot instruction which ``Aer`` can execute natively with high performance."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3094
msgid "By default ``group_paulis=True``, which will use the ``AbelianGrouper`` to convert the ``SummedOp`` into groups of mutually qubit-wise commuting Paulis. This reduces circuit execution overhead, as each group can share the same circuit execution."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3166
msgid "Note that converters act recursively, that is, they traverse an expression applying their action only where possible. So we can just convert our full evolution and measurement expression. We could have equivalently composed the converted ``h2_measurement`` with our evolution ``CircuitStateFn``. We proceed by applying the conversion on the entire expression."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3299
msgid "Now we bind multiple parameter values into a ``ListOp``, followed by ``eval`` to evaluate the entire expression. We could have used ``eval`` earlier if we bound earlier, but it would not be efficient. Here, ``eval`` will convert our ``CircuitStateFn``\\ s to ``VectorStateFn``\\ s through simulation internally."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3321
msgid "Here are the expectation values :math:`\\langle \\Phi_+| e^{iHt} H e^{-iHt} |\\Phi_+\\rangle` corresponding to the different values of the parameter."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3367
msgid "Executing ``CircuitStateFn``\\ s with the ``CircuitSampler``"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3369
msgid "The ``CircuitSampler`` traverses an Operator and converts any ``CircuitStateFns`` into approximations of the resulting state function by a ``DictStateFn`` or ``VectorStateFn`` using a quantum backend. Note that in order to approximate the value of the ``CircuitStateFn``, it must 1) send the state function through a depolarizing channel, which will destroy all phase information and 2) replace the sampled frequencies with **square roots** of the frequency, rather than the raw probability of sampling (which would be the equivalent of sampling the **square** of the state function, per the Born rule.)"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3418
msgid "Note again that the circuits are replaced by dicts with **square roots** of the circuit sampling probabilities. Take a look at one sub-expression before and after the conversion:"
msgstr ""

