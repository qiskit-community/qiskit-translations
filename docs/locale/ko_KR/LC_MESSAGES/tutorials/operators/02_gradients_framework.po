msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 17:09+0000\n"
"PO-Revision-Date: 2021-07-15 09:10\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/operators/02_gradients_framework.po\n"
"X-Crowdin-File-ID: 9410\n"
"Language: ko_KR\n"

#: ../../tutorials/operators/02_gradients_framework.ipynb:10
msgid "This page was generated from `tutorials/operators/02_gradients_framework.ipynb`__."
msgstr "이 페이지는 `tutorials/operators/02_gradients_framework.ipynb`__ 에서 생성되었다."

#: ../../tutorials/operators/02_gradients_framework.ipynb:9
msgid "Qiskit Gradient Framework"
msgstr "Qiskit 경사 프레임워크 (Gradient Framework)"

#: ../../tutorials/operators/02_gradients_framework.ipynb:11
msgid "The gradient framework enables the evaluation of quantum gradients as well as functions thereof. Besides standard first order gradients of expectation values of the form"
msgstr "경사 프레임워크는 양자 함수 뿐만 아니라 양자 경사를 구할 수 있게 해준다. 게다가 다음 형태의 기댓값의 표준 일차 경사도 가능하다."

#: ../../tutorials/operators/02_gradients_framework.ipynb:13
msgid "\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle\n\n"
msgstr "\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle\n\n"

#: ../../tutorials/operators/02_gradients_framework.ipynb:15
msgid "The gradient framework also supports the evaluation of second order gradients (Hessians), and the Quantum Fisher Information (QFI) of quantum states :math:`|\\psi\\left(\\theta\\right)\\rangle`."
msgstr "경사 프레임워크는 이차 경사(헤세 행렬)를 구하는 것과 양자 상태 :math:`|\\psi\\left(\\theta\\right)\\rangle` 의 양자 Fisher 정보(QFI, Quantum Fisher Information)를 구하는 것도 지원한다."

#: ../../tutorials/operators/02_gradients_framework.ipynb:26
msgid "|gradient_framework.png|"
msgstr "|gradient_framework.png|"

#: ../../tutorials/operators/02_gradients_framework.ipynb:40
msgid "Imports"
msgstr "불러오기"

#: ../../tutorials/operators/02_gradients_framework.ipynb:71
msgid "First Order Gradients"
msgstr "일차 경사 (First Order Gradients)"

#: ../../tutorials/operators/02_gradients_framework.ipynb:73
msgid "Given a parameterized quantum state :math:`|\\psi\\left(\\theta\\right)\\rangle = V\\left(\\theta\\right)|\\psi\\rangle` with input state :math:`|\\psi\\rangle`, parametrized Ansatz :math:`V\\left(\\theta\\right)`, and observable :math:`\\hat{O}\\left(\\omega\\right)=\\sum_{i}\\omega_i\\hat{O}_i`, we want to compute…"
msgstr "주어진 초기 상태가 :math:`|\\psi\\rangle` 이고 매개변수화된 가설이 :math:`V\\left(\\theta\\right)` 인 매개변수화된 양자 상태 :math:`|\\psi\\left(\\theta\\right)\\rangle = V\\left(\\theta\\right)|\\psi\\rangle` 와 관측가능량 :math:`\\hat{O}\\left(\\omega\\right)=\\sum_{i}\\omega_i\\hat{O}_i` 에 대해 다음 경사들을 계산할 것이다."

#: ../../tutorials/operators/02_gradients_framework.ipynb:85
msgid "Gradients w.r.t. Measurement Operator Parameters"
msgstr "측정 연산자 매개변수에 대한 경사"

#: ../../tutorials/operators/02_gradients_framework.ipynb:87
msgid "Gradient of an expectation value w.r.t. a coefficient of the measurement operator respectively observable :math:`\\hat{O}\\left(\\omega\\right)`, i.e."
msgstr "관측가능량 :math:`\\hat{O}\\left(\\omega\\right)` 의 기댓값을 측정 연산자의 계수에 대한 경사는"

#: ../../tutorials/operators/02_gradients_framework.ipynb:89
msgid "\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\omega_i} = \\langle\\psi\\left(\\theta\\right)|\\hat{O}_i\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle.\n\n"
msgstr "\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\omega_i} = \\langle\\psi\\left(\\theta\\right)|\\hat{O}_i\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle.\n\n"

#: ../../tutorials/operators/02_gradients_framework.ipynb:100
msgid "First of all, we define a quantum state :math:`|\\psi\\left(\\theta\\right)\\rangle` and a Hamiltonian :math:`H` acting as observable. Then, the state and the Hamiltonian are wrapped into an object defining the expectation value"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:102
#: ../../tutorials/operators/02_gradients_framework.ipynb:1118
msgid "\\langle\\psi\\left(\\theta\\right)|H|\\psi\\left(\\theta\\right)\\rangle.\n\n"
msgstr "\\langle\\psi\\left(\\theta\\right)|H|\\psi\\left(\\theta\\right)\\rangle.\n\n"

#: ../../tutorials/operators/02_gradients_framework.ipynb:174
msgid "We construct a list of the parameters for which we aim to evaluate the gradient. Now, this list and the expectation value operator are used to generate the operator which represents the gradient."
msgstr "경사(Gradient) 를 평가하기 위해 목표로 하는 매개변수 목록을 구성한다. 이 목록과 기대값 연산자는 경사를 나타내는 연산자를 생성하는 데 사용된다."

#: ../../tutorials/operators/02_gradients_framework.ipynb:361
msgid "All that is left to do is to assign values to the parameters and to evaluate the gradient operators."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:404
msgid "Gradients w.r.t. State Parameters"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:406
msgid "Gradient of an expectation value w.r.t. a state :math:`|\\psi\\left(\\theta\\right)\\rangle` parameter, i.e.\\"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:408
msgid "\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}\n\n"
msgstr "\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}\n\n"

#: ../../tutorials/operators/02_gradients_framework.ipynb:410
msgid "respectively of sampling probabilities w.r.t. a state :math:`|\\psi\\left(\\theta\\right)\\rangle` parameter, i.e."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:412
msgid "\\frac{\\partial p_i}{\\partial\\theta} = \\frac{\\partial\\langle\\psi\\left(\\theta\\right)|i\\rangle\\langle i |\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}.\n\n"
msgstr "\\frac{\\partial p_i}{\\partial\\theta} = \\frac{\\partial\\langle\\psi\\left(\\theta\\right)|i\\rangle\\langle i |\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}.\n\n"

#: ../../tutorials/operators/02_gradients_framework.ipynb:414
msgid "A gradient w.r.t. a state parameter may be evaluated with different methods. Each method has advantages and disadvantages."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:480
msgid "Parameter Shift Gradients"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:482
msgid "Given a Hermitian operator :math:`g` with two unique eigenvalues :math:`\\pm r` which acts as generator for a parameterized quantum gate"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:484
msgid "G(\\theta)= e^{-i\\theta g}.\n\n"
msgstr "G(\\theta)= e^{-i\\theta g}.\n\n"

#: ../../tutorials/operators/02_gradients_framework.ipynb:486
msgid "Then, quantum gradients can be computed by using eigenvalue :math:`r` dependent shifts to parameters. All `standard, parameterized Qiskit gates <https://github.com/Qiskit/qiskit-terra/tree/master/qiskit/circuit/library/standard_gates>`__ can be shifted with :math:`\\pi/2`, i.e.,"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:488
msgid "\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta} =  \\left(\\langle\\psi\\left(\\theta+\\pi/2\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta+\\pi/2\\right)\\rangle -\\partial\\langle\\psi\\left(\\theta-\\pi/2\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta-\\pi/2\\right)\\rangle\\right) / 2.\n\n"
msgstr "\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta} =  \\left(\\langle\\psi\\left(\\theta+\\pi/2\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta+\\pi/2\\right)\\rangle -\\partial\\langle\\psi\\left(\\theta-\\pi/2\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta-\\pi/2\\right)\\rangle\\right) / 2.\n\n"

#: ../../tutorials/operators/02_gradients_framework.ipynb:490
#: ../../tutorials/operators/02_gradients_framework.ipynb:833
msgid "Probability gradients are computed equivalently."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:678
msgid "Linear Combination of Unitaries Gradients"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:680
msgid "Unitaries can be written as :math:`U\\left(\\omega\\right) = e^{iM\\left(\\omega\\right)}`, where :math:`M\\left(\\omega\\right)` denotes a parameterized Hermitian matrix. Further, Hermitian matrices can be decomposed into weighted sums of Pauli terms, i.e., :math:`M\\left(\\omega\\right) = \\sum_pm_p\\left(\\omega\\right)h_p` with :math:`m_p\\left(\\omega\\right)\\in\\mathbb{R}` and :math:`h_p=\\bigotimes\\limits_{j=0}^{n-1}\\sigma_{j, p}` for :math:`\\sigma_{j, p}\\in\\left\\{I, X, Y, Z\\right\\}` acting on the :math:`j^{\\text{th}}` qubit. Thus, the gradients of :math:`U_k\\left(\\omega_k\\right)` are given by :nbsphinx-math:`\\begin{equation*} \\frac{\\partial U_k\\left(\\omega_k\\right)}{\\partial\\omega_k} = \\sum\\limits_pi \\frac{\\partial m_{k,p}\\left(\\omega_k\\right)}{\\partial\\omega_k}U_k\\left(\\omega_k\\right)h_{k_p}. \\end{equation*}`"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:685
msgid "Combining this observation with a circuit structure presented in `Simulating physical phenomena by quantum networks <https://journals.aps.org/pra/abstract/10.1103/PhysRevA.65.042323>`__ allows us to compute the gradient with the evaluation of a single quantum circuit."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:827
msgid "Finite Difference Gradients"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:829
msgid "Unlike the other methods, finite difference gradients are numerical estimations rather than analytical values. This implementation employs a central difference approach with :math:`\\epsilon \\ll 1`"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:831
msgid "\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta} \\approx \\frac{1}{2\\epsilon} \\left(\\langle\\psi\\left(\\theta+\\epsilon\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta+\\epsilon\\right)\\rangle - \\partial\\langle\\psi\\left(\\theta-\\epsilon\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta-\\epsilon\\right)\\rangle\\right).\n\n"
msgstr "\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta} \\approx \\frac{1}{2\\epsilon} \\left(\\langle\\psi\\left(\\theta+\\epsilon\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta+\\epsilon\\right)\\rangle - \\partial\\langle\\psi\\left(\\theta-\\epsilon\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta-\\epsilon\\right)\\rangle\\right).\n\n"

#: ../../tutorials/operators/02_gradients_framework.ipynb:1023
msgid "Natural Gradient"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1025
msgid "A special type of first order gradient is the natural gradient which has proven itself useful in classical machine learning and is already being studied in the quantum context. This quantity represents a gradient that is ‘rescaled’ with the inverse `Quantum Fisher Information matrix <#qfi>`__ (QFI)"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1027
msgid "QFI ^{-1} \\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}.\n\n"
msgstr "QFI ^{-1} \\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}.\n\n"

#: ../../tutorials/operators/02_gradients_framework.ipynb:1038
msgid "Instead of inverting the QFI, one can also use a least-square solver with or without regularization to solve"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1040
msgid "QFI x = \\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}.\n\n"
msgstr "QFI x = \\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}.\n\n"

#: ../../tutorials/operators/02_gradients_framework.ipynb:1042
msgid "The implementation supports ridge and lasso regularization with automatic search for a good parameter using `L-curve corner search <https://arxiv.org/pdf/1608.04571.pdf>`__ as well as two types of perturbations of the diagonal elements of the QFI."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1044
msgid "The natural gradient can be used instead of the standard gradient with any gradient-based optimizer and/or ODE solver."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1093
msgid "Hessians (Second Order Gradients)"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1095
msgid "Four types of second order gradients are supported by the gradient framework."
msgstr "경사 프레임워크는 네 가지 유형의 이차 경사를 지원한다."

#: ../../tutorials/operators/02_gradients_framework.ipynb:1097
msgid "Gradient of an expectation value w.r.t. a coefficient of the measurement operator respectively observable :math:`\\hat{O}\\left(\\omega\\right)`, i.e. :math:`\\frac{\\partial^2\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\omega^2}`"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1098
msgid "Gradient of an expectation value w.r.t. a state :math:`|\\psi\\left(\\theta\\right)\\rangle` parameter, i.e. :math:`\\frac{\\partial^2\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta^2}`"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1099
msgid "Gradient of sampling probabilities w.r.t. a state :math:`|\\psi\\left(\\theta\\right)\\rangle` parameter, i.e. :math:`\\frac{\\partial^2 p_i}{\\partial\\theta^2} = \\frac{\\partial^2\\langle\\psi\\left(\\theta\\right)|i\\rangle\\langle i|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta^2}`"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1100
msgid "Gradient of an expectation value w.r.t. a state :math:`|\\psi\\left(\\theta\\right)\\rangle` parameter and a coefficient of the measurement operator respectively observable :math:`\\hat{O}\\left(\\omega\\right)`, i.e. :math:`\\frac{\\partial^2\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta\\partial\\omega}`"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1102
msgid "In the following examples are given for the first two Hessian types. The remaining Hessians are evaluated analogously."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1114
msgid "Hessians w.r.t. Measurement Operator Parameters"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1116
msgid "Again, we define a quantum state :math:`|\\psi\\left(\\theta\\right)\\rangle` and a Hamiltonian :math:`H` acting as observable. Then, the state and the Hamiltonian are wrapped into an object defining the expectation value"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1153
msgid "Next, we can choose the parameters for which we want to compute second order gradients. - Given a tuple, the ``Hessian`` will evaluate the second order gradient for the two parameters. - Given a list, the ``Hessian`` will evaluate the second order gradient for all possible combinations of tuples of these parameters."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1155
msgid "After binding parameter values to the parameters, the Hessian can be evaluated."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1208
msgid "Hessians w.r.t. State Parameters"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1284
msgid "Quantum Fisher Information (QFI)"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1286
msgid "The Quantum Fisher Information is a metric tensor which is representative for the representation capacity of a parameterized quantum state :math:`|\\psi\\left(\\theta\\right)\\rangle = V\\left(\\theta\\right)|\\psi\\rangle` with input state :math:`|\\psi\\rangle`, parametrized Ansatz :math:`V\\left(\\theta\\right)`."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1288
msgid "The entries of the QFI for a pure state reads"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1290
msgid "QFI_{kl} = 4 * \\text{Re}\\left[\\langle\\partial_k\\psi|\\partial_l\\psi\\rangle-\\langle\\partial_k\\psi|\\psi\\rangle\\langle\\psi|\\partial_l\\psi\\rangle \\right].\n\n"
msgstr "QFI_{kl} = 4 * \\text{Re}\\left[\\langle\\partial_k\\psi|\\partial_l\\psi\\rangle-\\langle\\partial_k\\psi|\\psi\\rangle\\langle\\psi|\\partial_l\\psi\\rangle \\right].\n\n"

#: ../../tutorials/operators/02_gradients_framework.ipynb:1302
msgid "Circuit QFIs"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1304
msgid "The evaluation of the QFI corresponding to a quantum state that is generated by a parameterized quantum circuit can be conducted in different ways."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1307
msgid "Linear Combination Full QFI"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1309
msgid "To compute the full QFI, we use a working qubit as well as intercepting controlled gates. See e.g. \\ `Variational ansatz-based quantum simulation of imaginary time evolution <https://www.nature.com/articles/s41534-019-0187-2>`__."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1364
msgid "Block-diagonal and Diagonal Approximation"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1366
msgid "A block-diagonal resp. diagonal approximation of the QFI can be computed without additional working qubits. This implementation requires the unrolling into Pauli rotations and unparameterized Gates."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1431
msgid "Application Example: VQE with gradient-based optimization"
msgstr "응용 예: 경사 기반 최적화를 사용한 VQE"

#: ../../tutorials/operators/02_gradients_framework.ipynb:1443
msgid "Additional Imports"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1470
msgid "The Gradient Framework can also be used for a gradient-based ``VQE``. First, the Hamiltonian and wavefunction ansatz are initialized."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1516
msgid "Now, we can choose whether the ``VQE`` should use a ``Gradient`` or ``NaturalGradient``, define a ``QuantumInstance`` to execute the quantum circuits and run the algorithm."
msgstr ""

