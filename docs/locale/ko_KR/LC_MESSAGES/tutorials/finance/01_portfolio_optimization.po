msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-03 18:29+0000\n"
"PO-Revision-Date: 2020-10-18 02:45\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/finance/01_portfolio_optimization.po\n"
"X-Crowdin-File-ID: 9342\n"
"Language: ko_KR\n"

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:10
msgid "This page was generated from `tutorials/finance/01_portfolio_optimization.ipynb`__."
msgstr "이 페이지는 \"tutorials/finance/01_portfolio_optimization.ipynb\" __ 에서 생성되었다."

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:9
msgid "**Portfolio Optimization**"
msgstr "** 포트폴리오 최적화 **"

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:21
msgid "Introduction"
msgstr "소개"

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:23
msgid "This tutorial shows how to solve the following mean-variance portfolio optimization problem for :math:`n` assets:"
msgstr "이 학습서는 :math:의 \"n\" 자산에 대한 평균 분산 포트폴리오 최적화 문제점을 해결하는 방법을 보인다."

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:25
msgid ":math:`\\begin{aligned} \\min_{x \\in \\{0, 1\\}^n} q x^T \\Sigma x - \\mu^T x\\\\ \\text{subject to: } 1^T x = B \\end{aligned}`"
msgstr ":math:`\\begin{aligned} \\min_{x \\in \\{0, 1\\}^n} q x^T \\Sigma x - \\mu^T x\\\\ \\text{subject to: } 1^T x = B \\end{aligned}`"

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:27
msgid "where we use the following notation:"
msgstr "여기서 다음과 같은 표기법을 사용한다."

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:29
msgid ":math:`x \\in \\{0, 1\\}^n` denotes the vector of binary decision variables, which indicate which assets to pick (:math:`x[i] = 1`) and which not to pick (:math:`x[i] = 0`),"
msgstr ":math:\" x \\in\\{0, 1\\} ^ n은 어떤 자산을 선택하거나(:math:) x[i] = 1) 선택하지 않는(:math:) x[i] = 0)것을 이진 결정 변수 벡터로 표기한다."

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:30
msgid ":math:`\\mu \\in \\mathbb{R}^n` defines the expected returns for the assets,"
msgstr ":math:'\\mu \\mathbb{R}^n'은 자산에 대한 예상 수익을 정의한다."

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:31
msgid ":math:`\\Sigma \\in \\mathbb{R}^{n \\times n}` specifies the covariances between the assets,"
msgstr ":math:' \\Sigma \\in \\mathbb{R}^ {n \\times n}'는 자산들 사이의 공변량을 나타낸다."

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:32
msgid ":math:`q > 0` controls the risk appetite of the decision maker,"
msgstr ":math:' q> 0은 의사 결정자의 리스크 선호를 제어한다."

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:33
msgid "and :math:`B` denotes the budget, i.e. the number of assets to be selected out of :math:`n`."
msgstr "그리고 :math:\"B\" 는 예산, 즉 :math:'n' 으로부터 선택되는 자산의 수를 나타낸다."

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:35
msgid "We assume the following simplifications: - all assets have the same price (normalized to 1), - the full budget :math:`B` has to be spent, i.e. one has to select exactly :math:`B` assets."
msgstr "다음과 같이 단순화한다: - 모든 자산은 같은 가격(1로 정규화)을 갖는다, - 전체 예산 :math:'B'는 모두 지출한다. 즉, 정확히 :math:'B' 어치의 자산을 선택해야 한다."

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:37
msgid "The equality constraint :math:`1^T x = B` is mapped to a penalty term :math:`(1^T x - B)^2` which is scaled by a parameter and subtracted from the objective function. The resulting problem can be mapped to a Hamiltonian whose ground state corresponds to the optimal solution. This notebook shows how to use the Variational Quantum Eigensolver (VQE) or the Quantum Approximate Optimization Algorithm (QAOA) to find the optimal solution for a given set of parameters."
msgstr "같음 제약 조건 :math: '1 ^ T x = B' 는 매개변수에의해 스케일링되고 대상 함수로부터 차감되는 벌점항 :math:'(1 ^ T x-B)^2' 에 매핑된다. 여기서 도출되는 문제는 바닥 상태가 최적의 솔루션에 해당하는 해밀토니안에 매핑 될 수 있습니다. 이 튜토리얼은 VQE (Variational Quantum Eigensolver) 또는 QAOA (Quantum Approximate Optimization Algorithm)를 사용하여 지정된 매개 변수 세트에 대한 최적의 솔루션을 찾는 방법을 보여준다."

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:39
msgid "Experiments on real quantum hardware for this problem are reported for instance in the following paper: Improving Variational Quantum Optimization using CVaR. Barkoutsos et al. 2019."
msgstr "이 문제에 대한 실제 양자 하드웨어의 실험은 다음의 논문에서 보고되었다: CVaR를 이용한 변화하는 양자 최적화 (Variational Quantum 최적화), Barkoutsos et al. 2019"

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:71
msgid "[Optional] Setup token to run the experiment on a real device"
msgstr "[Optional] 실제 기기에서 실험을 실행하기위한 설정 토큰"

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:73
msgid "If you would like to run the experiment on a real device, you need to setup your account first."
msgstr "실제 장치에서 실험을 실행하려면 먼저 계정을 설정해야 한다."

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:75
msgid "Note: If you do not store your token yet, use ``IBMQ.save_account('MY_API_TOKEN')`` to store it first."
msgstr "참고사항: 아직 토큰을 저장하지 않은 경우``IBMQ.save_account ( 'MY_API_TOKEN')``을 사용하여 저장한다."

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:87
msgid "Define problem instance"
msgstr "문제 인스턴스 정의"

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:89
msgid "Here an Operator instance is created for our Hamiltonian. In this case the paulis are from an Ising Hamiltonian translated from the portfolio problem. We use a random portfolio problem for this notebook. It is straight-forward to extend this to using real financial data as illustrated here: `Loading and Processing Stock-Market Time-Series Data <11_time_series.ipynb>`__"
msgstr ""

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:154
msgid "We define some utility methods to print the results in a nice format."
msgstr "결과를 적절한 포맷으로 인쇄하기 위한 몇 가지 유틸리티 방법을 정의한다."

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:196
msgid "NumPyMinimumEigensolver (as a classical reference)"
msgstr "NumPyMinimumEigensolver (고전적인 참고자)"

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:198
msgid "Lets solve the problem. First classically..."
msgstr "기존의 방식을 이용하여 문제를 풀어보자. "

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:200
msgid "We can now use the Operator we built above without regard to the specifics of how it was created. We set the algorithm for the NumPyMinimumEigensolver so we can have a classical reference. The problem is set for 'ising'. Backend is not required since this is computed classically not using quantum computation. The result is returned as a dictionary."
msgstr "우리는 이제 어떻게 그것이 만들어졌는지에 대한 세부사항과 관계없이 위에 구축한 오퍼레이터를 사용할 수 있다. NumPyMinimumEigensolver에 대한 알고리즘을 설정해서 고전적인 참조를 할 수 있게 했다. 문제는 '이징'으로 정해져 있다. 이것은 양자 연산을 사용하지 않고 고전적으로 계산되기 때문에 백엔드가 필요하지 않다. 그 결과는 '사전(Dictionary)' 타입으로 반환된다."

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:284
msgid "Solution using VQE"
msgstr "VQE를 사용한 솔루션"

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:286
msgid "We can now use the Variational Quantum Eigensolver (VQE) to solve the problem. We will specify the optimizer and variational form to be used."
msgstr "이제 변분법적 양자 알고리즘 (VQE) 를 사용하여 문제를 해결할 수 있다. 사용할 최적화 프로그램 및 분산 양식을 지정 한다."

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:288
msgid "Note: You can switch to different backends by providing the name of backend."
msgstr "노트: 백엔드의 이름을 설정하여 다른 백엔드로 전환할 수 있다."

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:382
msgid "Solution using QAOA"
msgstr "QAOA를 사용한 솔루션"

#: ../../tutorials/finance/01_portfolio_optimization.ipynb:384
msgid "We also show here a result using the Quantum Approximate Optimization Algorithm (QAOA). This is another variational algorithm and it uses an internal variational form that is created based on the problem."
msgstr "또한 양자 근사 최적화 알고리즘(QAOA) 을 사용한 결과를 보여 준다. 이는 다른 분산 알고리즘이며 문제를 기반으로 만들어지는 내부 변수 양식을 사용합니다."

