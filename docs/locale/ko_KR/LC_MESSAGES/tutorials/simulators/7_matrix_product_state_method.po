msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-07 16:27+0000\n"
"PO-Revision-Date: 2020-12-20 03:36\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/simulators/7_matrix_product_state_method.po\n"
"X-Crowdin-File-ID: 9172\n"
"Language: ko_KR\n"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:10
msgid "This page was generated from `tutorials/simulators/7_matrix_product_state_method.ipynb`__."
msgstr "이 페이지는 `tutorials/simulators/7_matrix_product_state_method.ipynb`_ 에서 생성되었다."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/simulators/7_matrix_product_state_method.ipynb>`_."
msgstr "`IBM 퀀텀 랩 <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/01_grover.ipynb>`_ 에서 대화식으로 실행하십시오."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:9
#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:26
msgid "Matrix product state simulation method"
msgstr "행렬 곱 상태 시뮬레이션 방법"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:12
msgid "Simulation methods"
msgstr "시뮬레이션 방법"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:14
msgid "The ``QasmSimulator`` has several simulation methods including ``statevector``, ``stabilizer``, ``extended_stabilizer`` and ``matrix_product_state``. Each of these determines the internal representation of the quantum circuit and the algorithms used to process the quantum operations. They each have advantages and disadvantages, and choosing the best method is a matter of investigation. In this tutorial, we focus on the ``matrix product state simulation method``."
msgstr "``QasmSimulator``에는 ``statevector``, ``stabilizer``, ``extended_stabilizer``, ``matrix_product_state``를 포함하는 다양한 시뮬레이션 방법들이 준비되어 있다. 이는 양자 연산들을 처리할 양자 회로나 알고리즘을 나타내는 다양한 방법을 기반으로 한다. 어떤 방법을 사용하는가에는 각각 장단점이 있으며 가장 좋은 방법은 문제에 따라 다르다. 이번 튜토리얼에서는 ``행렬곱 상태 시뮬레이션 방법``을 알아본다."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:28
msgid "This simulation method is based on the concept of ``matrix product states``. This structure was initially proposed in the paper *Efficient classical simulation of slightly entangled quantum computations* by Vidal in https://arxiv.org/abs/quant-ph/0301063. There are additional papers that describe the structure in more detail, for example *The density-matrix renormalization group in the age of matrix product states* by Schollwoeck https://arxiv.org/abs/1008.3477."
msgstr "이 시뮬레이션 방법은 ``행렬 곱 상태`` 개념을 기반으로 하고 있다. 이 구조를 처음에 제안한 논문은 Vidal의 *Efficient classical simulation of slightly entangled quantum computations*이며 https://arxiv.org/abs/quant-ph/0301063에서 볼 수 있다. 그 구조를 더 세부적으로 설명한 추가 논문은 Schollwoeck의 *The density-matrix renormalization group in the age of matrix product states*로 https://arxiv.org/abs/1008.3477에서 볼 수 있다."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:39
msgid "A pure quantum state is usually described as a state vector, by the expression :math:`|\\psi\\rangle = \\sum_{i_1=0}^1 {\\ldots} \\sum_{i_n=0}^1 c_{i_1 \\ldots i_n} |i_i\\rangle {\\otimes} {\\ldots} {\\otimes} |i_n\\rangle`."
msgstr "Pure 양자 상태는 주로 :math:`|\\psi\\rangle = \\sum_{i_1=0}^1 {\\ldots} \\sum_{i_n=0}^1 c_{i_1 \\ldots i_n} |i_i\\rangle {\\otimes} {\\ldots} {\\otimes} |i_n\\rangle`와 같이 상태 벡터로 묘사된다."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:41
msgid "The state vector representation implies an exponential size representation, regardless of the actual circuit. Every quantum gate operating on this representation requires exponential time and memory."
msgstr "이러한 상태 벡터 표현은 이를 묘사하는데 있어 필요한 수가 기하급수적으로 증가한다. 이는 실제 회로와는 무관하다. 이 방법으로 모든 양자 게이트들의 작동을 표현하면 기하급수적 시간과 메모리가 필요하다."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:43
msgid "The matrix product state (MPS) representation offers a local representation, in the form: :math:`\\Gamma^{[1]} \\lambda^{[1]} \\Gamma^{[2]} \\lambda^{[2]}\\ldots \\Gamma^{[1]} \\lambda^{[n-1]} \\Gamma^{[n]}`, such that all the information contained in the :math:`c_{i_1 \\ldots i_n}`, can be generated out of the MPS representation."
msgstr "행렬 곱 상태 (MPS) 표현은 다음과 같이 국소적 표현을 가능하게 한다.: :math:`\\Gamma^{[1]} \\lambda^{[1]} \\Gamma^{[2]} \\lambda^{[2]}\\ldots \\Gamma^{[1]} \\lambda^{[n-1]} \\Gamma^{[n]}` 즉 :math:`c_{i_1 \\ldots i_n}`에 담긴 모든 정보들은 MPS 표현으로 적을 수 있다."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:54
msgid "Every :math:`\\Gamma^{[i]}` is a tensor of complex numbers that represents qubit :math:`i`. Every :math:`\\lambda^{[i]}` is a matrix of real numbers that is used to normalize the amplitudes of qubits :math:`i` and :math:`i+1`. Single-qubit gates operate only on the relevant tensor."
msgstr "모든 :math:`\\Gamma^{[i]}`는 :math:`i`번째 큐비트를 나타내는 복소 텐서이다. 모든 :math:`\\lambda^{[i]}`는 :math:`i` 번째 큐비트와 :math:`i+1` 번째 큐비트들의 진폭을 정규화하고자 사용하는 실수로 이뤄진 행렬이다. 단일 큐비트 게이트는 특정 관련된 텐서에만 영향을 준다."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:56
msgid "Two-qubit gates operate on consecutive qubits :math:`i` and :math:`i+1`. This involves a tensor-contract operation over :math:`\\lambda^{[i-1]}`, :math:`\\Gamma^{[i-1]}`, :math:`\\lambda^{[i]}`, :math:`\\Gamma^{[i+1]}` and :math:`\\lambda^{[i+1]}`, that creates a single tensor. We apply the gate to this tensor, and then decompose back to the original structure. This operation may increase the size of the respective tensors. Gates that involve two qubits that are not consecutive, require a series of swap gates to bring the two qubits next to each other and then the reverse swaps."
msgstr "2-큐비트 게이트들은 연속한 두 개의 큐비트 :math:`i`와 :math:`i+1`에 동작한다. 이는 :math:`\\lambda^{[i-1]}`, :math:`\\Gamma^{[i-1]}`, :math:`\\lambda^{[i]}`, :math:`\\Gamma^{[i+1]}`, \n"
" 및 :math:`\\lambda^{[i+1]}`에 대한 텐서 계약 조작을 포함하며 이는 단일 텐서를 작성한다. 우리는 게이트를 이 텐서에 적용한 다음 원래의 구조로 다시 분해한다. 이러한 동작은 각각의 텐서들의 크기를 증가시킬 수 있다. 연속적이지 않은 2개의 큐비트를 포함하는 게이트는 서로의 옆에 2개의 큐비트를 가져오고 그 다음에 리버스 스왑 (reverse swaps) 을 가져오기 위해 일련의 스왑 게이트 (swap gate) 를 필요로 한다."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:59
msgid "In the worst case, the tensors may grow exponentially. However, the size of the overall structure remains ‘small’ for circuits that do not have ‘many’ two-qubit gates. This allows much more efficient operations in circuits with relatively ‘low’ entanglement. Characterizing when to use this method over other methods is a subject of current research."
msgstr "최악의 경우, 텐서들은 기하급수적으로 성장할 수 있다. 그러나, 전체 구조의 크기는 '많은' 2개의 게이트 게이트들을 갖지 않는 회로들에 대해 '작은' 으로 남아 있다. 이는 상대적으로 '낮은' 얽힘 (entanglement) 을 갖는 회로들에서 훨씬 더 효율적인 동작들을 허용한다. 다른 방법에 비해 이 방법을 사용하는 것을 특성화하는 것은 현재의 연구의 대상이다."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:71
msgid "Using the matrix product state simulation method"
msgstr "행렬 곱 상태 시뮬레이션 방법을 사용하기"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:73
msgid "The matrix product state simulation method is invoked in the ``QasmSimulator`` by setting the simulation method. Other than that, all operations are controlled by the ``QasmSimulator`` itself, as in the following example:"
msgstr "매트릭스 프로덕트 상태 시뮬레이션 메소드는 시뮬레이션 메소드를 설정하여 ``QasmSimulator``에서 호출된다. 그 외의 모든 작업은 다음 예제와 같이 ``QasmSimulator`` 자체에 의해 제어된다."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:133
msgid "To see the internal state vector of the circuit, we can import the snapshot files:"
msgstr "이 회로 내부의 상태 벡터를 보려면 스냅샷 파일을 import하면 된다."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:227
msgid "Running circuits using the matrix product state simulation method can be fast, relative to other methods. However, if we generate the state vector during the execution, then the conversion to state vector is, of course, exponential in memory and time, and therefore we don’t benefit from using this method. We can benefit if we only do operations that don’t require printing the full state vector. For example, if we run a circuit and then take measurement. The circuit below has 200 qubits. We create an ``EPR state`` involving all these qubits. Although this state is highly entangled, it is handled well by the matrix product state method, because there are effectively only two states."
msgstr "매트릭스 제품 상태 시뮬레이션 방법을 사용하여 회로를 실행하는 것은 다른 방법에 비해 빠른 것일 수 있다. 그러나, 만약 우리가 실행 동안 상태 벡터를 생성한다면, 상태 벡터로의 변환은 당연히, 메모리와 시간에서 기하급수적으로 증가한다. 따라서 우리는 이 방법을 사용하는 것이 이득이 되지 않는다. 전체 상태 벡터를 인쇄할 필요가 없는 조작만 수행하면 이점을 얻을 수 있다. 예를 들어, 회로를 실행한 후 측정을 수행합다. 아래 회로에는 200개의 비트가 있습니다. 우리는 이 모든 쿼트를 포함한  ``EPR 상태 `` 를 만든다. 이 상태는 매우 복잡하지만 효과적으로 두 개의 상태만 있기 때문에 매트릭스곱으로 잘 처리된다."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:230
msgid "We can handle more qubits than this, but execution may take a few minutes. Try running a similar circuit with 500 qubits! Or maybe even 1000 (you can get a cup of coffee while waiting)."
msgstr "우리는 이를 이용하여 더 많은 큐비트을 처리할 수 있지만 실행에는 몇 분이 더 소요될 것이다. 500 큐비트이나 1000 큐비트에서 비슷한 회로를 커피 한 잔을 마시면서 실행해 보라."

