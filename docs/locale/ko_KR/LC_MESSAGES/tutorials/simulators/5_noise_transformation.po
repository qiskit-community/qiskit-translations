msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-01 19:07+0000\n"
"PO-Revision-Date: 2022-11-01 19:37\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/simulators/5_noise_transformation.po\n"
"X-Crowdin-File-ID: 9168\n"
"Language: ko_KR\n"

#: ../../tutorials/simulators/5_noise_transformation.ipynb:10
msgid "This page was generated from `tutorials/simulators/5_noise_transformation.ipynb`__."
msgstr "이 페이지는 `tutorials/simulators/5_noise_transformation.ipynb`__ 에서 생성되었다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:9
msgid "Noise Transformation"
msgstr "노이즈 변환"

#: ../../tutorials/simulators/5_noise_transformation.ipynb:21
msgid "Introduction"
msgstr "소개"

#: ../../tutorials/simulators/5_noise_transformation.ipynb:23
msgid "This notebook shows how to use the Qiskit Aer utility functions ``approximate_quantum_error`` and ``approximate_noise_model`` to transform quantum noise channels into a different, more suitable, noise channel."
msgstr "이 노트북은 양자 노이즈 채널을 보다 적합한 다른 노이즈 채널로 변환하기 위해 Qiskit Aer 효용 함수인 ``approximate_quantum_error`` 와 ``approximate_noise_model`` 을 사용하는 방법을 보여준다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:25
msgid "Our guiding example is Clifford simulation. A Clifford simulator can efficiently simulate quantum computations which include gates only from a limited, non-universal set of gates (the Clifford gates). Not all quantum noises can be added to such simulations; hence, we aim to find a “close” noise channel which can be simulated in a Clifford simulator."
msgstr "안내 예제는 클리포드 시뮬레이션이다. 클리포드 시뮬레이터는 제한된 비 유니버설 게이트 세트 (클리포드 게이트) 의 게이트만 포함하는 양자 계산을 효율적으로 시뮬레이션할 수 있다. 모든 양자 잡음을 이러한 시뮬레이션에 추가할 수 있는 것은 아니다. 따라서 우리는 클리포드 시뮬레이터에서 시뮬레이션할 수 있는 \"닫힌\"잡음 채널을 찾는 것을 목표로 한다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:27
msgid "We begin by importing the transformation functions from the Aer provider utilities"
msgstr "먼저, Aer 공급자 유틸리티에서 변환 함수를 가져온다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:49
msgid "The name “approximate” suggests that these functions generate the closest (in the Hilbert-Schmidt metric) error possible to the given one."
msgstr "\"근사치\"라는 말은 주어진 값에 대해서 이런 함수들은 (힐버트-슈미트 측정에서) 가능한 가장 가까운 오류를 생성하는 생성한다는 것을 의미한다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:51
msgid "We demonstrate the approximation using several standard error channels defined in Qiskit."
msgstr "Qiskit에 정의된 여러 개의 표준 에러 채널을 사용하여 근사를 증명한다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:78
msgid "Overview"
msgstr "개요"

#: ../../tutorials/simulators/5_noise_transformation.ipynb:80
msgid "A 1-qubit quantum channel is a function :math:`\\mathcal{C}:\\mathbb{C}^{2\\times2}\\to\\mathbb{C}^{2\\times2}` mapping density operators to density operators (to ensure the image is a density operator :math:`\\mathcal{C}` is required to be completely positive and trace preserving, **CPTP**)."
msgstr "1-큐비트 양자 채널은 (이미지가 밀도 연산자 :math:`\\mathcal{C}` 가 완전히 양의 값이 되고, 보존을 추적도록) 밀도 연산자를 다른 밀도 연산자공간으로 사상하는 함수 :math:`\\mathcal{C}:\\mathbb{C}^{2\\times2}\\to\\mathbb{C}^{2\\times2}` 이다. 여기서 완전히 양의 값이 되고, 보존을 추적하는 것은 completely positive and trace preserving, **CPTP** 라 한다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:82
msgid "Given quantum channels :math:`\\mathcal{E}_{1},\\dots,\\mathcal{E}_{r}`, and probabilities :math:`p_1, p_2, \\dots, p_r` such that :math:`0\\le p_i \\le 1` and :math:`p_1+\\dots +p_r = 1`, a new quantum channel :math:`\\mathcal{C}_\\mathcal{E}` can be constructed such that :math:`\\mathcal{C}_\\mathcal{E}(\\rho)` has the effect of choosing the channel :math:`\\mathcal{E}_i` with probability :math:`p_i` and applying it to :math:`\\rho`."
msgstr "주어진 양자 채널 :math:`\\mathcal{E}_{1},\\dots,\\mathcal{E}_{r}`, 그리고 :math:`0\\le p_i \\le 1` 와 :math:`p_1+\\dots +p_r = 1` 와 같은 확률 :math:`p_1, p_2, \\dots, p_r` 으로 새로운 양자 채널 :math:`\\mathcal{C}_\\mathcal{E}` 은 :math:`\\mathcal{C}_\\mathcal{E}(\\rho)` 이 확률 :math:`p_i` 으로 채널 :math:`\\mathcal{E}_i` 을 선택하고, :math:`\\rho` 에 적용하는 효과를 가지도록 구성될 수 있다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:84
msgid "The noise transformation function solves the following optimization problem: Given a channel :math:`\\mathcal{C}` (“goal”) and a list of channels :math:`\\mathcal{E}_{1},\\dots,\\mathcal{E}_{r}`, find the probabilities :math:`p_1, p_2, \\dots, p_r` minimizing :math:`D(\\mathcal{C}, \\mathcal{C}_\\mathcal{E})` according to some distance metric :math:`D` (the Hilbert-Schmidt metric is currently used)."
msgstr "잡음 변환 함수는 다음 최적화 문제를 해결한다: 주어진 채널 :math:`\\mathcal{C}` (\"목표(goal)\")와 :math:`\\mathcal{E}_{1},\\dots,\\mathcal{E}_{r}` 채널의 목록으로 거리 측정값 :math:`D` 에 따라서 :math:`D(\\mathcal{C}, \\mathcal{C}_\\mathcal{E})` 을 최소화하는 확률 :math:`p_1, p_2, \\dots, p_r` 을 찾는다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:86
msgid "To ensure the approximation is honest, in the sense that the approximate error channel serves as an “upper bound” for the actual error channel, we add the additional honesty constraint:"
msgstr "근사치가 실제와 근접하도록 하기 위해서 근사치 오류 채널은 실제 오류 채널에 대해서 \"상한(upper bound)\"로서 작동한다는 점에서 추가적인 근접한 제한을 추가한다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:88
msgid "\\text{F}(I,\\mathcal{C})\\ge F(I,\\mathcal{C}_\\mathcal{E})\n\n"
msgstr "\\text{F}(I,\\mathcal{C})\\ge F(I,\\mathcal{C}_\\mathcal{E})\n\n"

#: ../../tutorials/simulators/5_noise_transformation.ipynb:90
msgid "Where :math:`\\text{F}` is a fidelity measure and :math:`I` is the identity channel."
msgstr "여기서 :math:`\\text{F}` 은 정확성 측정이고, :math:`I` 은 단위 채널이다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:102
msgid "Example: Approximating amplitude damping noise with reset noise."
msgstr "예제: 진폭 감폭 노이즈(Amplitude damping noise) 를 초기화 노이즈(reset noise) 로 근사하기"

#: ../../tutorials/simulators/5_noise_transformation.ipynb:104
msgid "**Amplitude damping** noise is described by a single parameter :math:`0\\le \\gamma \\le 1` and given by the Kraus operators:"
msgstr "**진폭 감폭** 노이즈는 단일 파라미터 :math:`0\\le \\gamma \\le 1` 로 설명되며, 크라우스 연산자에 의해 주어진다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:106
msgid "\\left(\\begin{array}{cc}\n"
"1 & 0\\\\\n"
"0 & \\sqrt{1-\\gamma}\n"
"\\end{array}\\right),\\left(\\begin{array}{cc}\n"
"0 & \\sqrt{\\gamma}\\\\\n"
"0 & 0\n"
"\\end{array}\\right)"
msgstr "\\left(\\begin{array}{cc}\n"
"1 & 0\\\\\n"
"0 & \\sqrt{1-\\gamma}\n"
"\\end{array}\\right),\\left(\\begin{array}{cc}\n"
"0 & \\sqrt{\\gamma}\\\\\n"
"0 & 0\n"
"\\end{array}\\right)"

#: ../../tutorials/simulators/5_noise_transformation.ipynb:116
msgid "**Reset** error is described by probabilities :math:`0\\le p, q\\le 1` such that :math:`p+q\\le 1` and given by the Kraus operators:"
msgstr "**초기화** 오류는 :math:`p+q\\le 1` 과 같은 확률 :math:`0\\le p, q\\le 1` 로 설명되며 크라우스 연산자는 다음과 같이 부여한다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:118
msgid "\\left(\\begin{array}{cc}\n"
"\\sqrt{p} & 0\\\\\n"
"0 & 0\n"
"\\end{array}\\right),\\left(\\begin{array}{cc}\n"
"0 & \\sqrt{p}\\\\\n"
"0 & 0\n"
"\\end{array}\\right),\\left(\\begin{array}{cc}\n"
"0 & 0\\\\\n"
"\\sqrt{q} & 0\n"
"\\end{array}\\right),\\left(\\begin{array}{cc}\n"
"0 & 0\\\\\n"
"0 & \\sqrt{q}\n"
"\\end{array}\\right)"
msgstr "\\left(\\begin{array}{cc}\n"
"\\sqrt{p} & 0\\\\\n"
"0 & 0\n"
"\\end{array}\\right),\\left(\\begin{array}{cc}\n"
"0 & \\sqrt{p}\\\\\n"
"0 & 0\n"
"\\end{array}\\right),\\left(\\begin{array}{cc}\n"
"0 & 0\\\\\n"
"\\sqrt{q} & 0\n"
"\\end{array}\\right),\\left(\\begin{array}{cc}\n"
"0 & 0\\\\\n"
"0 & \\sqrt{q}\n"
"\\end{array}\\right)"

#: ../../tutorials/simulators/5_noise_transformation.ipynb:134
msgid "This can be thought of as “resetting” the quantum state of the affected qubit to :math:`\\left|0\\right\\rangle` with probability :math:`p`, to :math:`\\left|1\\right\\rangle` with probability :math:`q`, and do nothing with probability :math:`1-(p+q)`."
msgstr "위와 같은 연산은 연산 대상이 되는 큐비트를 :math:`p` 의 확률로 :math:`\\left|0\\right\\rangle`, :math:`q` 의 확률로 :math:`\\left|1\\right\\rangle`, :math:`1-(p+q)` 의 확률로 아무 것도 수행하지 않는 방식으로 \"초기화 한다\"고 보면 될 것이다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:136
msgid "It is not too difficult to determine analytically the best values of :math:`p,q` to approximate a :math:`\\gamma` amplitude damping channel, see the details `here <https://arxiv.org/abs/1207.0046>`__. The best approximation is:"
msgstr ":math:`p, q` 의 최상의 값을 분석적으로 판별하여 :math:`\\gamma` 진폭 감쇠 채널을 근사화하는 것은 어렵지 않다. 자세한 정보는 ** `여기 <https://arxiv.org/abs/1207.0046>`__ * * 에서 확인할 수 있다. 가장 근사한 값은 다음과 같다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:138
msgid "p=\\frac{1}{2}\\left(1+\\gamma-\\sqrt{1-\\gamma}\\right), q=0\n\n"
msgstr "p=\\frac{1}{2}\\left(1+\\gamma-\\sqrt{1-\\gamma}\\right), q=0\n\n"

#: ../../tutorials/simulators/5_noise_transformation.ipynb:161
msgid "We only needed the above code to perform the actual approximation."
msgstr "우리는 실제 근사치를 수행하기 위해 위의 코드만 필요한다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:236
msgid "We got the results predicted analytically."
msgstr "우리는 그 결과를 분석적으로 예측했다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:239
msgid "Different input types"
msgstr "다양한 입력 유형"

#: ../../tutorials/simulators/5_noise_transformation.ipynb:241
msgid "The approximation function is given two inputs: The error channel to approximate, and a set of error channels that can be used in constructing the approximation."
msgstr "근사 함수에는 두 가지 입력이 있다. 근사할 오류 채널 및 근사치를 구성하는 데 사용할 수 있는 오류 채널 세트이다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:243
msgid "The **error channel** to approximate can be given as any input that can be converted to the ``QuantumError`` object."
msgstr "근사치의 **오류 채널** 은 ``QuantumError`` 객체로 변환할 수 있는 모든 입력으로 지정할 수 있다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:245
msgid "As an example, we explicitly construct the Kraus matrices of amplitude damping and pass to the same approximation function as before:"
msgstr "예를 들어, 우리는 명시적으로 진폭 감폭의 크라우스 행렬을 구성하고 이전과 동일한 근사 함수로 전달한다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:300
msgid "The **error operators** that are used to construct the approximating channel can be either given as a list, a dictionary or a string indicating hard-coded channels."
msgstr "근사 채널을 구성하는 데 사용되는 **오류 연산자** 는 목록, 사전 또는 하드 코딩된 채널을 나타내는 문자열로 지정할 수 있다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:302
msgid "Any channel can be either a list of Kraus operators, or ‘QuantumError’ objects."
msgstr "모든 채널은 Kraus 연산자 또는 'QuantumError' 오브젝트의 목록일 수 있다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:304
msgid "The identity channel does not need to be passed directly; it is always implicitly used."
msgstr "식별 채널을 직접 전달할 필요는 없다. 이는 항상 암묵적으로 사용된다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:306
msgid "As an example, we approximate amplitude damping using an explicit Kraus representation for reset noises:"
msgstr "예를 들어 재설정 노이즈에 대한 명시적 크라우스 표현을 사용하여 진폭 감폭에 근사치를 산출한다."

#: ../../tutorials/simulators/5_noise_transformation.ipynb:370
msgid "Note the difference in the output channel: The probabilities are the same, but the input Kraus operators were converted to general Kraus channels, which cannot be used in a Clifford simulator. Hence, it is always better to pass a ``QuantumError`` object instead of the Kraus matrices, when possible."
msgstr "출력 채널의 차이를 참고하라. 확률은 같지만 입력 크라우스 연산자는 클리포드 시뮬레이터에서 사용할 수 없는 일반 크라우스 채널로 변환되었다. 따라서 가능하면 크라우스 행렬 대신 ``QuantumError`` 객체를 패스하는 것이 항상 더 좋다."

