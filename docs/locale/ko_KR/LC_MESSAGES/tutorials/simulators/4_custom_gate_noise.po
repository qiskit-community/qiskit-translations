msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:25+0000\n"
"PO-Revision-Date: 2023-03-16 11:57\n"
"Last-Translator: \n"
"Language: ko\n"
"Language-Team: Korean\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/simulators/4_custom_gate_noise.po\n"
"X-Crowdin-File-ID: 9166\n"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:10
msgid "This page was generated from `tutorials/simulators/4_custom_gate_noise.ipynb`__."
msgstr "이 페이지는 `tutorials/simulators/4_custom_gate_noise.ipynb`__ 에서 생성되었다."

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:9
msgid "Applying noise to custom unitary gates"
msgstr "맞춤 유니터리 게이트를 노이즈로 적용하기"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:21
msgid "Introduction"
msgstr "소개"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:23
msgid "This notebook shows how to add custom unitary gates to a quantum circuit, and use them for noise simulations in Qiskit Aer."
msgstr "이 노트북에서는 양자 회로에 맞춤 유니터리 게이트를 추가하는 방법을 살펴보고 이를 Qiskit Aer의 노이즈 시뮬레이션에 사용해 본다."

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:51
msgid "Creating matrix operators"
msgstr "행렬 연산자 만들기"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:53
msgid "We can use the ``Operator`` class in ``qiskit.quantum_info`` to represent arbitrary matrix operators. If the operator is unitary it can then be added to a quantum circuit and used for simulation on Qiskit Aer."
msgstr "우리는 임의의 행렬 연산자를 사용할 때 ``qiskit.quantum_info`` 안의 ``Operator`` 클래스를 사용할 수 있다. 그 연산자가 유니터리이면 양자 회로에 추가하여 Qiskit Aer의 시뮬레이션에 사용할 수 있다."

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:55
msgid "Lets create two operators below for a CNOT gate and an iSWAP gate:"
msgstr "다음과 같은 CNOT 게이트와 iSWAP 게이트를 만들어 보자."

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:57
msgid "\\mbox{CNOT} = \\left(\\begin{array}\n"
"& 1 & 0 & 0 & 0 \\\\\n"
"0 & 0 & 0 & 1 \\\\\n"
"0 & 0 & 1 & 0 \\\\\n"
"0 & 1 & 0 & 0\n"
"\\end{array}\\right), \\quad\n"
"\\mbox{iSWAP} = \\left(\\begin{array}\n"
"& 1 & 0 & 0 & 0 \\\\\n"
"0 & 0 & i & 0 \\\\\n"
"0 & i & 0 & 0 \\\\\n"
"0 & 0 & 0 & 1\n"
"\\end{array}\\right)"
msgstr "\\mbox{CNOT} = \\left(\\begin{array}\n"
"& 1 & 0 & 0 & 0 \\\\\n"
"0 & 0 & 0 & 1 \\\\\n"
"0 & 0 & 1 & 0 \\\\\n"
"0 & 1 & 0 & 0\n"
"\\end{array}\\right), \\quad\n"
"\\mbox{iSWAP} = \\left(\\begin{array}\n"
"& 1 & 0 & 0 & 0 \\\\\n"
"0 & 0 & i & 0 \\\\\n"
"0 & i & 0 & 0 \\\\\n"
"0 & 0 & 0 & 1\n"
"\\end{array}\\right)"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:101
msgid "**Note:** The matrix is specified with respect to the tensor product :math:`U_{b}\\otimes U_{a}` for qubits specified by list ``[a, b]``."
msgstr "**참고:** 행렬은 목록 ``[a, b]`` 에 의해 지정된 큐비트에 대한 텐서 곱 :math:`U_{b}\\otimes U_{a}` 과 관련하여 지정된다."

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:113
msgid "Using operators in circuits"
msgstr "회로에서 연산자 사용하기"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:115
msgid "Let us demonstrate how these can be used in a circuit. We will consider an example of implementing a CNOT gate decomposed in terms of single-qubit gates and the iSWAP gate as follows."
msgstr "회로에서 이러한 기능을 사용할 수 있는 방법을 시연해 보겠다. 우리는 단일 쿼비트 게이트와 iSWAP 게이트 측면에서 분해된 CNOT 게이트를 구현하는 예를 다음과 같이 고려할 것이다."

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:186
msgid "Note that we have assigned an optional *label* of ``\"iswap\"`` to the unitary when it is inserted. This allows us to identify this unitary in a Qiskit Aer ``NoiseModel`` so that we can add errors to these custom unitary gates in noisy circuit simulations."
msgstr "단위가 삽입될 때 ``iswap`` 의 선택적인 *레이블* 을 유니테리에 할당했다는 점에 유의한다. 이를 통해 우리는 Qiskit Air ``Noise Model`` 에서 이 유니테리를 식별하여 소음 회로 시뮬레이션에서 이러한 맞춤형 유니터리 게이트에 오류를 추가할 수 있다."

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:197
msgid "We can confirm this circuit returns the correct output using the ``Operator`` class as a simulator for the circuit:"
msgstr "``Operator`` 클래스를 회로의 시뮬레이터로 사용하여 이 회로가 올바른 출력을 반환하는지 확인한다."

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:256
msgid "And to confirm the output is correct we can compute the average gate fidelity:"
msgstr "또한 출력이 올바른지 확인하기 위해 평균 게이트 신뢰도를 계산할 수 있다."

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:303
msgid "Creating a custom unitary in a noise model"
msgstr "노이즈 모델에서 맞춤 유니터리 만들기"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:305
msgid "The Qiskit Aer ``AerSimulator`` supports simulation of arbitrary unitary operators directly as specified by the ``\"unitary\"`` in the basis gates."
msgstr "Qiskit Aer의 ``AerSimulator`` 는 기저 게이트에서 ``\"unitary\"`` 로 지정된 임의의 단위 상태 연산자의 시뮬레이션을 직접 지원한다."

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:351
msgid "This allows us to add noise models to arbitrary unitaries in our simulation when we identify them using the optional ``label`` argument of ``QuantumCircuit.unitary``."
msgstr "이를 통해 ``QuantumCircuit.unitary`` 의 선택적인 ``label`` 인수를 사용하여 이를 식별할 때 시뮬레이션에서 임의 유니터리에 노이즈 모델을 추가할 수 있다."

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:353
msgid "We will now do this by creating a ``NoiseModel`` that includes a quantum error channel on our custom iSWAP gate. For our example we will create a 2-qubit error consisting of two single-qubit amplitude damping channels with different damping parameters. For now we will assume all the other circuit instructions are ideal."
msgstr "이제 사용자 지정 iSWAP 게이트에 양자 오류 채널이 포함된 ``NoiseModel`` 을 만들어 이를 수행할 것이다. 이 예에서는 서로 다른 감폭 매개 변수를 가진 2개의 단일 큐비트 진폭 감폭 채널로 구성된 2-큐비트 오류를 생성한다. 지금은 다른 모든 회로 지침 이상적인 것으로 가정한다."

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:385
msgid "Note that when we add an error to a custom label such as ``\"iswap\"`` the ``NoiseModel`` does not know what gate this label is supposed to apply to, so we must manually add the desired gate string to the noise model ``basis_gates``. This ensures that the compiler will unroll to the correct basis gates for the noise model simulation. This can done using the ``NoiseModel.add_basis_gates`` function:"
msgstr "참고로 ``\"iswap\"`` 과 같은 사용자 정의 레이블에 오류를 추가할 때 ``Noise Model`` 은 이 레이블이 적용되는 게이트를 모르므로 원하는 게이트 문자열을 노이즈 모델 ``basis_gates`` 에 수동으로 추가해야 한다. 이를 통해 컴파일러가 노이즈 모델 시뮬레이션을 위한 올바른 기본 게이트로 롤아웃할 수 있다. 이 작업은 '``NoiseModel.add_basis_gates``' 함수를 사용하여 수행할 수 있다."

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:431
msgid "By default the basis gates of a noise model are ``['cx','id','u3']`` plus any standard ``AerSimulator`` basis gates that are added to the noise model."
msgstr "기본적으로 노이즈 모델의 기저 게이트는 ``['cx','id','u3']`` 과 노이즈 모델에 추가된 기본 ``AerSimulator`` 기저 게이트이다."

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:443
msgid "Simulating a custom unitary noise model"
msgstr "맞춤 유니터리 노이즈 모델의 시뮬레이션"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:454
msgid "Let us first take our previous CX circuit and add an initial Hadamard gate and final measurement to create a Bell-state preparation circuit that we may simulator on the ``AerSimulator`` both for the ideal and noisy case:"
msgstr "먼저 이전 CX 회로를 사용하고 초기 하다마드 게이트와 최종 측정을 추가하여 이상적인 경우와 시끄러운 경우 모두를 ``Aer Simulator`` 에서 시뮬레이터로 사용할 수 있는 벨 상태 준비 회로를 만들자."

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:523
msgid "Ideal output"
msgstr "이상적인 출력"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:525
msgid "Let's first see the ideal output. Since this generates a Bell-state we expect two peaks for 00 and 11."
msgstr ""

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:563
msgid "Noisy circuit execution"
msgstr "노이즈가 있는 회로의 실행"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:565
msgid "Finally, let's now simulate it with our custom noise model. Since there is a small amplitude damping error on the two-qubit gates we expect small additional peaks for the 01 and 10 outcome probabilities."
msgstr ""

