msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-05 21:02+0000\n"
"PO-Revision-Date: 2022-01-05 22:31\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/6_repetition_code.po\n"
"X-Crowdin-File-ID: 9142\n"
"Language: ko_KR\n"

#: ../../tutorials/noise/6_repetition_code.ipynb:10
msgid "This page was generated from `tutorials/noise/6_repetition_code.ipynb`__."
msgstr "이 페이지는 `tutorials/noise/6_repetition_code.ipynb`__ 에서 생성되었다."

#: ../../tutorials/noise/6_repetition_code.ipynb:9
msgid "Repetition Codes"
msgstr "반복 코드"

#: ../../tutorials/noise/6_repetition_code.ipynb:21
msgid "Introduction"
msgstr "소개"

#: ../../tutorials/noise/6_repetition_code.ipynb:23
msgid "In quantum error correction we take many noisy qubits (which we call *physical qubits*) and use them to store a smaller number of *logical qubits*. The error correction procedure is designed to detect and correct for the effects of noise. This makes the logical qubits much less noisy and more reliable than the physical ones from which they are built."
msgstr "양자 오류 수정에서 우리는 잡음이 많은 큐비트 (*물리적 큐비트*) 를 취하고 이를 사용하여 보다 적은 수의 *논리적 큐비트* 를 저장한다. 오류 정정 절차는 노이즈의 효과를 검출하고 보정하기 위해 설계된다. 이것은 논리적 큐비트가 그것들이 구축되는 물리적인 것보다 훨씬 덜 요란하고 신뢰성이 높게 만든다."

#: ../../tutorials/noise/6_repetition_code.ipynb:25
msgid "The repetition code is a simple example of quantum error correction, in which a logical *bit* is stored rather than a logical *qubit*. A given instance of the repetition code is defined by two numbers, which we call :math:`d` and :math:`T`."
msgstr "반복 코드는 논리적 *비트* 가 논리적 *큐비트* 가 아니라 저장되는 양자 오류 정정의 간단한 예이다. 반복 코드의 주어진 사례는 두 개의 숫자 :math:`d` 와 :math:`T` 로 정의된다."

#: ../../tutorials/noise/6_repetition_code.ipynb:27
msgid "The :math:`d` parameter determines how many physical qubits are used. The actual information about the logical bit is stored in :math:`d` qubits (which we’ll call *code qubits*). The encoding is done in a very simple way: to encode a ``0``, all these qubits are set in the state :math:`|0\\rangle`, to encode a ``1`` they are set to :math:`|1\\rangle`. To readout the value, you can just look at any qubit. To read it out in a way that protects against single qubit errors, you can read out all the qubits and take a majority vote."
msgstr ":math:`d` 매개변수는 사용되는 물리적인 비트 수를 결정한다. 논리 비트에 대한 실제 정보는 :math:`d` 큐비트들 (우리가 호출하는 *code qubits*) 에 저장된다. 이러한 인코딩은 매우 단순한 방식으로 행해진다: ``0`` 을 인코딩하기 위해 이 모든 큐비트들은 상태 :math:`|0\\rangle` 에 설정되어 있으며 ``1`` 을 인코딩하기 위해 :math:`|1\\rangle` 로 설정된다. 값을 판독하기 위해서는 약간의 값만 보면 된다. 단일 큐비트 오류로부터 보호하는 방법으로 읽기 위해 모든 큐비트를 읽고 다수의 투표를 수행할 수 있다."

#: ../../tutorials/noise/6_repetition_code.ipynb:30
msgid "It is not only at readout that we can extract useful information that will help us correct errors. We can also extract information while the logical bit sits idle, or even while it is involved in computation."
msgstr "오류를 수정하는 데 도움이 되는 유용한 정보를 추출할 수 있음을 알 수 있다. 논리 비트가 쓸모 없는 상태로 있는 동안 또는 계산에 관련되어 있는 동안에도 정보를 추출할 수 있다."

#: ../../tutorials/noise/6_repetition_code.ipynb:32
msgid "Since this is an exercise in quantum error correction, we will do this in a way that would also work for logical *qubits*. Specifically, our method of extracting information about errors must not extract any information regarding the stored logical information. In the quantum case, this is required so that we do not disturb superposition states of the stored qubits."
msgstr "이것은 양자 오류 정정의 연습이기 때문에 논리적 *큐비트* 를 위해 작동하는 방식으로 이를 수행할 것이다. 특히 오류에 대한 정보를 추출하는 방법은 저장된 논리 정보에 관한 정보를 추출하지 않아야 한다. 양자의 경우에, 저장된 큐비트들의 중첩 상태들을 방해하지 않도록 이것이 요구된다."

#: ../../tutorials/noise/6_repetition_code.ipynb:34
msgid "We will extract information over :math:`T` rounds of *syndrome measurements*. For the repetition code, these are based on the fact that all code qubits should be in the same state (all :math:`|0\\rangle` or all :math:`|1\\rangle`). Any departure from this is therefore a signature of error. Specifically, we imagine our :math:`d` code qubits sitting along a line. We will then perform a measurement on each pair of neighboring code qubits. This will tell us whether they are the same or different, without extracting any information on what their values are."
msgstr ":math:`T` 회의 *신드롬 측정 (syndrome measurements)* 에 대한 정보가 추출될 것이다. 반복 코드의 경우, 모든 코드 큐비트가 동일한 상태(모두 :math:`|0\\rangle` 또는 모두 :math:`|1\\rangle`)에 있어야 한다는 사실을 기반으로 한다. 여기서 벗어난다는 것 전부 오차라는 신호이다. 구체적으로, :math:`d` 개의 코드 큐비트들이 한 직선을 따라 놓여 있는 것을 상상할 수 있다. 그러면 인접한 코드 큐비트 쌍에 대한 측정을 수행한다. 이는 각 쌍이 어떤 값을 갖는지에 대한 정보를 추출하지 않고 그들이 같거나 서로 다른지 여부를 알려줄 것이다."

#: ../../tutorials/noise/6_repetition_code.ipynb:37
msgid "The implementation of these measurements requires :math:`d-1` additional qubits, which we will call *link qubits* for the repetition code. By performing two CNOTs between the pair of code qubits and a corresponding link qubit, the required information (and only the required information) is placed on the link qubit and can then be measured."
msgstr "이러한 측정의 구현에는 :math:`d-1` 추가 큐비트가 필요하며, 우리는 이를 *link qubits* 이라 부를 것이다. 한 쌍의 코드 큐비트들과 대응하는 링크 큐비트들 사이에 2개의 CNOT들을 수행함으로써, 필요한 정보가 (오로지 필요한 정보만이) 링크 큐비트 상에 배치되고 측정될 수 있다."

#: ../../tutorials/noise/6_repetition_code.ipynb:105
msgid "Here we provide tools for creating and testing repetition codes. The first thing we need to do is import them."
msgstr "여기서는 반복 코드를 만들고 테스트하기 위한 도구를 제공한다. 우리가 가장 먼저 할 일은 그것들을 불러오는 것이다."

#: ../../tutorials/noise/6_repetition_code.ipynb:129
msgid "Creating a repetition code"
msgstr "반복 코드 만들기"

#: ../../tutorials/noise/6_repetition_code.ipynb:131
msgid "The ``repetition_code`` class creates a code for given values of :math:`d` and :math:`T`."
msgstr "``repetition_code`` 클래스는 :math:`d` 와 :math:`T` 의 주어진 값에 대한 코드를 생성한다."

#: ../../tutorials/noise/6_repetition_code.ipynb:154
msgid "With this we can inspect various properties of the code, such as the names of the qubit registers used for the code and ancilla qubits."
msgstr "이를 통해 코드의 다양한 특성 (예: 코드 및 보조 비트에 사용되는 qubit 레지스터의 이름) 을 검사할 수 있다."

#: ../../tutorials/noise/6_repetition_code.ipynb:199
msgid "These registers are also attributes of the ``repetition_code`` object."
msgstr "이 레지스터들은 또한 ``repetition_code`` 객체의 속성이다."

#: ../../tutorials/noise/6_repetition_code.ipynb:244
msgid "You can also access the quantum circuits that implement the code. Two of these are produced: one for each of the two possible logical bit values."
msgstr "코드를 구현하는 양자 회로에도 액세스할 수 있다. 이들 중 2개는 가능한 2개의 논리적 비트 값들 각각에 대해 하나씩 생성된다."

#: ../../tutorials/noise/6_repetition_code.ipynb:606
msgid "Building a custom repetition code"
msgstr "사용자 정의 반복 코드 빌드하기"

#: ../../tutorials/noise/6_repetition_code.ipynb:608
msgid "You can also implement measurement rounds and logical ``X`` gates yourself. For example, let’s set up a code with no syndrome measurement rounds."
msgstr "측정 라운드와 논리적 ``X`` 게이트를 직접 구현할 수도 있다. 예를 들어, 증후군 측정 라운드가 없는 코드를 설정하자."

#: ../../tutorials/noise/6_repetition_code.ipynb:629
msgid "This does nothing but set up two circuits for the two logical encoded states. There are no syndrome measurement rounds, and no final readout."
msgstr "이 작업은 두 개의 논리 인코딩 상태에 대해 두 개의 회로를 설정하는 작업만 수행한다. 신드롬 수치(syndrome measurement) 도 없고 최종 판독도 없다."

#: ../../tutorials/noise/6_repetition_code.ipynb:759
msgid "We can add a round using the ``syndrome_measurement()`` method."
msgstr "우리는 ``syndrome_measurement ()`` 방법을 사용하여 라운드를 추가할 수 있다."

#: ../../tutorials/noise/6_repetition_code.ipynb:909
msgid "A logical ``X`` operation can be added using the ``x()`` method."
msgstr "논리적인 ``X`` 의 연산은 ``x()`` 방법을 사용하여 추가될 수 있다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1059
msgid "This also has a ``logs`` kwarg, which is a list of the circuits for which ``X`` is applied. This is ``['0','1']`` by default."
msgstr "이것은 또한 ``X`` 가 적용되는 회로의 목록인 ``logs`` kwarg도 가지고 있다. 이것은 기본적으로 ``['0','1']`` 이다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1070
msgid "Final readout is then done with the ``readout()`` method."
msgstr "그런 다음 최종 판독은 ``readout()`` 방식으로 수행된다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1320
msgid "Running a repetition code"
msgstr "반복 코드 실행하기"

#: ../../tutorials/noise/6_repetition_code.ipynb:1322
msgid "The code object produces the circuits required for the code. The user can then run them using any method they prefer, allowing full control over compilation, backends, noise models and so on."
msgstr "코드 객체는 코드에 필요한 회로를 생성한다. 그런 다음 사용자는 원하는 방법을 사용하여 실행시켜 컴파일, 백엔드, 노이즈 모델 등을 완벽한 제어를 할 수 있다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1324
msgid "For example, here we run them without noise on the ``qasm_simulator``."
msgstr "예를 들어 ``qasm_simulator`` 에서 노이즈 없이 실행한다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1395
msgid "Here the strings from right to left represent the outputs of the syndrome measurement rounds, followed by the final measurement of the code qubits."
msgstr "여기서 오른쪽에서 왼쪽으로 읽는 문자열은 신드롬 측정의 출력을 나타내고, 그 뒤에 코드 큐비트의 최종 측정값이 이어진다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1397
msgid "These results need to be rewritten in a different form in order to be decoded. To do this we can use the ``process_results`` method of the code object."
msgstr "이러한 결과들은 디코딩되기 위해 다른 형태로 개정될 필요가 있다. 이를 위해 코드 객체의 ``process_results`` 방법을 사용할 수 있다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1442
msgid "The result is a dictionary whose keys are bit strings that represent outputs of the circuit, and the values represent the number of shots for which this output occurred."
msgstr "결과는 해당 키가 회로의 출력을 나타내는 비트 스트링(bit string) 인 사전이고, 값은 이 출력이 발생한 샷의 수를 나타낸다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1444
msgid "The strings are not the direct output from the circuits. They have been processed to take the form that helps us correct errors. Here’s a short guided tour."
msgstr "문자열은 회로의 직접 출력이 아니다. 오류를 정정하는 데 도움이 되는 양식을 사용하도록 처리되었다. 여기 짧은 안내 투어가 있다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1446
msgid "The ``0 0`` to the far left for the logical ``0`` result, and the ``1 1`` to the far left of the logical ``1``, are the logical readout. Any code qubit could be used for this readout, since they should (without errors) all be equal. So we could have just one result here, for one arbitrarily chosen code qubit. Or we could have :math:`d`, one for each qubit. Instead we have two, from the two qubits at either end of the line. This is because it works best with the decoder (which we’ll use later). In the absence of errors, these two values will always be equal."
msgstr "``0 0`` 에서 맨 왼쪽에 있는 논리적인 ``0`` 결과와 ``1 1`` 에서 맨 왼쪽에 있는 논리적 ``1`` 은 논리적인 해독이다. 모든 코드는 이 판독에 사용될 수 있는데, 그 이유는 (오류가 없는) 모든 것이 동일해야 하기 때문이다. 그래서 우리는 여기서 한 가지 결과를 얻을 수 있었다. 임의로 선택된 코드를 위해서였다. 아니면 각각의 것에 하나씩 :math:`d` 가 있을 수도 있다. 그 대신에, 양쪽 끝중에 있는 두개의 큐비트가 있다. 이는 디코더 (나중에 사용할) 로 가장 잘 작동하기 때문이다. 오류가 없으면 이 두 값은 항상 동일하다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1449
msgid "The following ``0000`` is the :math:`d-1` results of the syndrome measurements for the first round.A ``0`` implies that the corresponding pair of qubits where the same, and ``1`` implies different. There are :math:`d-1` results because the line of :math:`d` code qubits has :math:`d-1` possible neighboring pairs. In the absence of errors, they will all be ``0``."
msgstr "이 같은 `0000` 은 1차 신드롬 측정 결과인 :math:`d-1` 이다. ``0`` 은 행당하는 큐비트쌍이 동일하다는것을 의미하고 ``1`` 은 다르다는 것을 의미한다. :math:`d` 코드 큐비트 라인에는 :math:`d-1` 가능한 이웃 쌍이 있기 때문에 :math:`d-1` 결과들 나온다. 오류가 없다면 모두 ``0`` 이 될 것이다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1451
msgid "The ``0000`` that follows that is the syndrome change between the first and second rounds. It is therefore the bitwise ``OR`` of the syndrome measurement results from the second round with those from the first. In the absence of errors, they will all be ``0``."
msgstr "그 다음에 나오는 ``0000`` 은 첫 번째와 두 번째 라운드 사이의 신드롬 변화이다. 따라서 이는 1차부터 2라운드까지의 신드롬 측정 결과의 비트와이즈 ``OR`` 로 한 것이다. 오류가 없으면 모두 ``0`` 이 될 것이다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1453
msgid "Subsequent blocks follow the same formula, though the last requires some comment. This is not measured using the standard method (with a link qubit). Instead it is calculated from the final readout measurement of all code qubits. Again it is presented as a syndrome change, and will be all ``0`` in the absence of errors. This is the :math:`T+1`-th block of syndrome measurements since, as it is not done in the same way as the others, it is not counted among the :math:`T` syndrome measurement rounds."
msgstr "마지막으로 일부 주석이 필요하지만 후속 블록은 동일한 수식을 따른다. 이는 표준 방법 (링크 큐비트 포함) 을 사용하여 측정되지 않는다. 대신, 모든 코드 큐비트의 최종 판독 측정으로부터 계산된다. 다시 말해, 그것은 신드롬의 변화로 제시되고 있으며, 오류가 없는 상태에서는 모두 ``0`` 이 될 것이다. 이는 다른것과 동일한 방식으로 이뤄지지 않아 :math:`T` 신드롬 측정 라운드에서 집계되지 않기 때문에 :math:`T+1` 번째 신드롬 측정 블록이다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1456
msgid "**Example 1:** ``0 0  0110 0000 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``0``. The syndrome shows that (most likely) the middle code qubit was flipped by an error before the first measurement round. This causes it to disagree with both neighboring code qubits for the rest of the circuit. This is shown by the syndrome in the first round, but the blocks for subsequent rounds do not report it as it no longer represents a change. Other sets of errors could also have caused this syndrome, but they would need to be more complex and so presumably less likely."
msgstr "**예 1:** ``0 0  0110 0000 0000`` 은 ``0``으로 인코딩된 :math:`T=2` 반복 코드인 :math:`d=5` 를 나타낼 것이다. 이 신드롬은 첫 번째 측정 라운드 이전에 중간 코드 포인트가 오류에 의해 플립되었다는 것을 보여준다. 이로 인해 회로의 나머지 부분에 대해 이웃 코드 조회 모두에 동의하지 않는다. 이는 첫 번째 라운드에서 신드롬에 의해 나타나지만, 이후의 라운드를 위한 블록은 더 이상 변화를 나타내지 않는다고 보고하지 않는다. 다른 세트의 에러들 또한 이러한 신드롬을 야기할 수 있지만, 그것들은 더 복잡하고 아마도 덜 가능성이 있을 것이다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1459
msgid "**Example 2:** ``0 0  0010 0010 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``0``. Here one of the syndrome measurements reported a difference between two code qubits in the first round, leading to a ``1``. The next round did not see the same effect, and so resulted in a ``0``. However, since this disagreed with the previous result for the same syndrome measurement, and since we track syndrome changes, this change results in another ``1``. Subsequent rounds also do not detect anything, but this no longer represents a change and hence results in a ``0`` in the same position. Most likely the measurement result leading to the first ``1`` was an error."
msgstr "**예 2:** ``0 0  0010 0010 0000`` 은 ``0`` 으로 인코딩된 :math:`T=2` 반복 코드인 :math:`d=5` 를 나타낼 것이다. 여기서 신드롬 측정치 중 하나는 1 라운드에서 두 코드 큐비트 간의 차이를 보고하고 이는 ``1`` 로 만든다. 다음 라운드는 같은 효과를 보지 못하여 ``0`` 으로 귀결된다. 그러나 이는 동일한 신드롬 측정의 이전 결과와 일치하지 않고, 신드롬 변화를 추적했기 때문에 이러한 변화 또는 ``1`` 로 귀결된다. 후속 라운드도 아무것도 감지하지 못하지만 이는 더 이상 변화를 나타내지 않으며 따라서 동일한 위치에서 결과는 ``0`` 이 된다. 아마도 첫 번째 ``1`` 로 나온 측정 결과는 오류였을 것이다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1462
msgid "**Example 3:** ``0 1  0000 0001 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``1``. A code qubit on the end of the line is flipped before the second round of syndrome measurements. This is detected by only a single syndrome measurement, because it is on the end of the line. For the same reason, it also disturbs one of the logical readouts."
msgstr "**예 3:** ``0 1  0000 0001 0000`` 은 ``1`` 으로 인코딩된 :math:`T=2` 반복 코드인 :math:`d=5` 를 나타낼 것이다.  두 번째 라운드 신드롬 측정 전에 라인 끝에 있는 코드 큐비트가 플립된다. 이것은 라인의 끝에 있기 때문에 단일 신드롬 측정으로만 감지된다. 같은 이유로, 그것은 또한 논리적 판독 중 하나를 방해한다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1464
msgid "Note that in all these examples, a single error causes exactly two characters in the string to change from the value it would have with no errors. This is, in fact, the reason why the logical output consists of both endpoints. It is a property that will be used by the decoder."
msgstr "이러한 모든 예제에서는 단일 오류로 인해 문자열에 있는 정확히 두 개의 문자가 오류가 없는 값에서 변경된다. 실제로 논리 출력이 두 엔드포인트 모두로 구성되는 이유이다. 이것은 디코더에 의해 사용될 속성이다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1475
msgid "To see the effects of noise, we need to specify a noise model. For example, let’s set up a simple noise model with gate and measurement errors."
msgstr "노이즈의 효과를 보려면 노이즈 모델을 지정해야 한다. 예를 들어, 게이트 및 측정 오류가 있는 단순 노이즈 모델을 설정하자."

#: ../../tutorials/noise/6_repetition_code.ipynb:1520
msgid "This can then be run to generate noisy results. Let’s make a quick function to do this, and then run it."
msgstr "그런 다음 이를 실행하여 노이즈가 많은 결과를 생성할 수 있다. 이를 수행하는 간단한 기능을 만들고 실행하자."

#: ../../tutorials/noise/6_repetition_code.ipynb:1884
msgid "Here the non-noisy results are the most likely. The rest of the samples are distributed among other possibilities with non-trivial syndromes."
msgstr "여기서 잡음이 없는 결과가 가장 유력하다. 나머지 샘플들은 비자명한 신드롬 확률 분포를 따른다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1896
msgid "Decoding a repetition code"
msgstr "반복 코드 분석하기"

#: ../../tutorials/noise/6_repetition_code.ipynb:1898
msgid "Noisy results can change the logical value at readout, and so affect our ability to read out the logical qubit. This can be mitigated by looking at the syndrome values. These can tell us whether or not the logical values are most likely to have changed, and so allow us to correct for the errors. The process of analyzing the syndrome to correct for the errors is called ‘decoding’. We do this by building a decoding object for our code."
msgstr "결과적으로 읽을 수 없는 결과는 논리적인 값을 변경할 수 있으므로 논리적인 값을 읽을 수 있는 우리의 능력에 영향을 미칠 수 있다. 이는 신드롬 값들을 봄으로써 완화될 수 있다. 이들은 논리적 값이 변경되었을 가능성이 가장 높은지 여부를 알 수 있으므로 오류를 정정할 수 dTek. 오류를 정정하기 위해 신드롬을 분석하는 프로세스는 '디코딩' 이라고 불린다. 코드에 대한 디코딩 오브젝트를 빌드하여 이를 수행한다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1919
msgid "This analyzes the code by seeing how different kinds of error change the output. With this information, along with a decoding algorithm, we can determine what the logical value is most likely to have been."
msgstr "이는 서로 다른 종류의 오류가 출력을 어떻게 변화시키는지 보고 코드를 분석한다. 이 정보를 통해 디코딩 알고리즘과 함께 논리적 값이 무엇이었을지를 결정할 수 있다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1921
msgid "For example, let’s use the ‘matching’ algorithm to decode, which is based on minimum weight perfect matching. This takes specific output strings as input. We’ll give it the simple example string ``'1 0  001 100 100'``, for a logical ``1`` that has suffered two errors."
msgstr "예를 들어, 최소 가중치 완벽 일치를 기반으로 하는 '일치' 알고리즘을 사용하자. 이는 특정 출력 문자열을 입력으로 사용한다. 두 개의 오류를 겪은 논리적인 ``1`` 을 위해 간단한 예제 문자열 ``'1 0  001 100 100'`` 을 제공한다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1966
msgid "The output is what the logical part should have been. As you can see, the decoder correctly determined that the readout should have been of a logical ``1``."
msgstr "출력은 논리적인 부분이 되여아 하는 것이다. 보다시피 디코더는 판독값이 논리적 ``1`` 이어야 한다고 올바르게 판단했다."

#: ../../tutorials/noise/6_repetition_code.ipynb:1977
msgid "When we take many samples, we can determine the probability with which the decoder is incorrect. This should decrease exponentially as the code size is increased, since the configurations of noise that fool the decoder become less likely. The probability of a logical error is calculated using the ``logical_prob()`` method. This runs matching by default, but other algorithms can be specified by the ``algorithm`` kwarg."
msgstr "많은 샘플을 채취할 때, 우리는 디코더가 정확하지 않은 확률을 결정할 수 있다. 이는 코드 크기가 증가함에 따라 기하급수적으로 감소해야 하는데, 이는 디코더를 무시하는 잡음의 구성이 더 적게 되기 때문이다. 논리적 오류의 확률은 ``logical_prob()`` 방법을 사용하여 계산된다. 이는 기본적으로 일치하지만 다른 알고리즘은 알고리즘 ``algorithm`` kwarg에 의해 지정될 수 있다."

