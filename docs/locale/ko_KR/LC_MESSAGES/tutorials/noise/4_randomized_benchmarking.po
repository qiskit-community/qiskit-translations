msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 17:09+0000\n"
"PO-Revision-Date: 2021-09-06 07:58\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/4_randomized_benchmarking.po\n"
"X-Crowdin-File-ID: 9138\n"
"Language: ko_KR\n"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:10
msgid "This page was generated from `tutorials/noise/4_randomized_benchmarking.ipynb`__."
msgstr "이 페이지는 `tutorials/noise/4_randomized_benchmarking.ipynb`__ 에서 생성되었다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:9
msgid "Randomized Benchmarking"
msgstr "랜덤화된 벤치마킹"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:12
msgid "Introduction"
msgstr "소개"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:14
msgid "**Randomization benchmarking (RB)** is a well-known technique to measure average gate performance by running sequences of random Clifford gates that should return the qubits to the initial state. Qiskit Ignis has tools to generate one- and two-qubit Clifford gate sequences simultaneously."
msgstr "**랜덤화된 벤치마크 (RB)** 는 초기 상태로 큐비트를 리턴해야 하는 랜덤 클리포드 게이트의 시퀀스를 실행함으로써 평균 게이트 성능을 측정하기 위한 잘 알려진 기술이다. Qiskit Ignis는 1개 및 2개의 큐비트 Clifford 게이트 서열을 동시에 생성하는 툴을 갖는다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:16
msgid "This notebook gives an example for how to use the ``ignis.verification.randomized_benchmarking`` module. This particular example shows how to run 2-qubit randomized benchmarking (RB) simultaneous with 1-qubit RB. There are also examples on how to use some of the companion functions for predicting RB fidelity."
msgstr "이 노트북은 ``ignis.verification.randomized_benchmarking`` 모듈을 사용하는 방법에 대한 예를 제공 한다. 제공되는 예시는 1큐비트 RB(무작위 벤치마킹)와 동시에 2큐비트 RB를 실행하는 방법을 보여준다. RB 정확도를 예측하기 위해 일부 추가 기능을 사용하는 방법에 대한 예시도 제공한다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:49
msgid "1) Select the Parameters of the RB Run"
msgstr "1) RB Run의 파라미터를 선택한다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:51
msgid "First, we need to choose the following parameters:"
msgstr "먼저 다음의 매개 변수를 선택해야 한다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:53
msgid "**nseeds:** The number of seeds. For each seed you will get a separate list of output circuits in rb_circs."
msgstr "**n시드(nseeds)** 시드의 개수. 각 시드에 따른 분리된 출력 회로 목록을 rb_circs에서 가져온다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:54
msgid "**length_vector:** The length vector of Clifford lengths. Must be in ascending order. RB sequences of increasing length grow on top of the previous sequences."
msgstr "**length_vector:** Clifford 길이의 길이 벡터. 오름차순이어야 한다. 길이가 증가하는 RB 서열은 이전 서열의 위에서부터 생성된다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:55
msgid "**rb_pattern:** A list of the form [[i,j],[k],…] which will make simultaneous RB sequences where Qi,Qj are a 2-qubit RB sequence and Qk is a 1-qubit sequence, etc. The number of qubits is the sum of the entries. For ‘regular’ RB the qubit_pattern is just [[0]],[[0,1]]."
msgstr "**rb_pattern:** Qi, Qj가 2-큐비트 RB 시퀀스이고 Qk가 1-큐비트 시퀀스인 동시 RB 시퀀스의 목록으로 [[i, j], [k],…] 형태의 list. 큐비트의 수는 항목들의 합계이다. ‘정규‘ RB의 경우, qubit_pattern은 [[0]], [[0, 1]] 이다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:56
msgid "**length_multiplier:** If this is an array it scales each rb_sequence by the multiplier."
msgstr "**length_multiplier:** 이 값이 배열이면 각 rb_sequence를 곱셈기로 스케일링한다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:57
msgid "**seed_offset:** What to start the seeds at (e.g. if we want to add more seeds later)."
msgstr "**seed_offset:** (예: 나중에 더 많은 시드를 추가하고자 하는 경우) 시드를 시작하는 것."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:58
msgid "**align_cliffs:** If true adds a barrier across all qubits in rb_pattern after each set of cliffords."
msgstr "**align_cliffs:** true이면 각각의 cliffords의 집합 뒤에 rb_pattern의 모든 큐비트에 걸쳐 barrier를 추가한다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:60
msgid "In this example we have 3 qubits Q0,Q1,Q2. We are running 2Q RB (on qubits Q0,Q2) and 1Q RB (on qubit Q1) simultaneously, where there are twice as many 1Q Clifford gates."
msgstr "이 예제에서는 3개의 큐비트(Q0, Q1, Q2)를 사용한다. 2Q RB (큐비트 Q0, Q2) 와 1Q RB (큐비트 Q1)를 동시에 실행하며, 여기서, 1Q 클리포드 게이트가 2배 더 많다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:92
msgid "2) Generate the RB sequences"
msgstr "2) RB 서열을 생성한다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:94
msgid "We generate RB sequences. We start with a small example (so it doesn’t take too long to run)."
msgstr "RB 서열을 생성한다. 작은 예제로 시작할 것이기때문에 실행에 시간이 많이 걸리지는 않을 것이다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:96
msgid "In order to generate the RB sequences **rb_circs**, which is a list of lists of quantum circuits, we run the function ``rb.randomized_benchmarking_seq``."
msgstr "양자 회로 목록들의 목록인 RB 시퀀스 **rb_circs** 를 생성하기 위해 ``rb.randomized_benchmarking_seq`` 를 실행한다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:98
msgid "This function returns:"
msgstr "이 함수는 다음을 리턴한다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:100
msgid "**rb_circs:** A list of lists of circuits for the rb sequences (separate list for each seed)."
msgstr "**rb_circs:** rb 시퀀스에 대한 회로 목록의 목록 (각 시드 별로 생성된 리스트)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:101
msgid "**xdata:** The Clifford lengths (with multiplier if applicable)."
msgstr "**xdata:** Clifford 길이 (mulitplier 가있다면 포함되어 있음)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:127
msgid "As an example, we print the circuit corresponding to the first RB sequence:"
msgstr "예를 들어 다음과 같이 첫 번째 RB 시퀀스에 해당하는 회로를 출력한다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:218
msgid "Look at the Unitary for 1 Circuit"
msgstr "1회로의 유니터리(unitary) 를 보면"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:229
msgid "The Unitary representing each RB circuit should be the identity (with a global phase), since we multiply random Clifford elements, including a computed reversal gate. We simulate this using an Aer unitary simulator."
msgstr "각각의 RB 회로를 나타내는 유니테리는 (global phase와 함께) Identity가 되어야 하며, 그 이유는, 우리가 계산된 반전 게이트를 포함하는 랜덤 클리포드 요소들을 곱하기 때문이다. Aer 유니테리 시뮬레이터를 사용하여 이를 시뮬레이션한다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:301
msgid "Define the noise model"
msgstr "노이즈 모델 정의하기"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:312
msgid "We define a noise model for the simulator. To simulate decay, we add depolarizing error probabilities to the CNOT and U gates."
msgstr "우리는 시뮬레이터에 대한 잡음 모델을 정의한다. 감쇠를 시뮬레이션하기 위해, CNOT과 U 게이트에 편극소거(depolarizing) 에러 확률을 추가한다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:339
msgid "3) Execute the RB sequences on Aer simulator"
msgstr "3) Aer 시뮬레이터에서 RB 시퀀스 실행하기"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:341
msgid "We can execute the RB sequences either using a Qiskit Aer Simulator (with some noise model) or using an IBMQ provider, and obtain a list of results, ``result_list``."
msgstr "Qiskit Aer Simulator를 사용하거나 IBMQ 공급자를 사용하여 RB 시퀀스를 실행하고, 결과 목록 ( ``result_list``) 을 얻을 수 있다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:415
msgid "4) Fit the RB results and calculate the gate fidelity"
msgstr "4) RB 결과 근사와 게이트 충실도 계산"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:418
msgid "Get statistics about the survival probabilities"
msgstr "Survival Probabilities에 대한 통계 얻기"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:420
msgid "The results in **result_list** should fit to an exponentially decaying function :math:`A \\cdot \\alpha ^ m + B`, where :math:`m` is the Clifford length."
msgstr "**result_list** 의 결과는 지수적 감쇠 함수 :math:`A \\cdot \\alpha ^ m + B` 에 맞아 떨어져야 하며, 여기서 :math:`m` 은 클리포드 (Clifford) 길이이다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:422
msgid "From :math:`\\alpha` we can calculate the **Error per Clifford (EPC)**:"
msgstr ":math:`\\alpha` 를 사용해, **Error per Clifford (EPC)** 를 계산한다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:424
msgid "EPC = \\frac{2^n-1}{2^n} (1-\\alpha)\n\n"
msgstr ""

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:426
msgid "(where :math:`n=nQ` is the number of qubits)."
msgstr "(여기서 :math:`n=nQ`는 큐비트의 수)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:449
msgid "Plot After 1 Seed"
msgstr "1 시드 후 그래프"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:491
msgid "Plot with the Rest of the Seeds"
msgstr "나머지 시드들을 사용한 그래프"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:493
msgid "The plot is being updated after each seed."
msgstr "각 시드가 실행될 때마다 그래프가 업데이트 되고 있다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:547
msgid "Add more shots to the data"
msgstr "데이터에 샷 추가하기"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:652
msgid "Predicted Gate Fidelity"
msgstr "예측된 게이트 정확도"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:663
msgid "From the known depolarizing errors on the simulation we can predict the **fidelity**. First we need to count the number of **gates per Clifford**."
msgstr "시뮬레이션을 통해 알게된 편극 소거(depolarizing) 오류를 사용해 **정확도 (fidelity)** 를 예측할 수 있다. 먼저 **gates per Clifford** 를 센다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:665
msgid "The function **gates_per_clifford** takes a list of transpiled RB circuits and outputs the number of basis gates in each circuit."
msgstr "**gates_per_clifford** 함수는 전송된 RB 회로들의 리스트를 취하고, 각각의 회로들의 기저 게이트들의 수를 출력한다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:716
msgid "The function **calculate_2q_epc** gives measured errors in the basis gates that were used to construct the Clifford. It assumes that the error in the underlying gates is depolarizing. It outputs the error per a 2-qubit Clifford."
msgstr "**calculate_2q_epc** 함수는 클리포드를 구성하는 데 사용된 기본 게이트에서 측정된 오류를 제공한다. 사용된 게이트의 오류가 편극 소거(depolarizing) 에 의한 것으로 가정한다. 이 함수는 2-큐비트 클리포드 (Clifford) 의 에러를 출력한다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:718
msgid "The input to this function is: - **gate_per_cliff:** dictionary of gate per Clifford. - **epg_2q:** EPG estimated by error model. - **qubit_pair:** index of two qubits to calculate EPC. - **list_epgs_1q:** list of single qubit EPGs of qubit listed in ``qubit_pair``. - **two_qubit_name:** name of two qubit gate in ``basis gates`` (default is ``cx``)."
msgstr "이 함수에 대한 입력은 - **gate_per_cliff:** 클리퍼드 당 게이트의 사전 - **epg_2q:** 오류 모델에 의해 추정된 EPG. - **qubit_pair:** EPC를 계산하기 위한 2큐비트의 인덱스. - **list_epgs_1q:** ``qubit_pair`` 에 나열된 단일 큐비트 EPG의 목록. - **two_qubit_name:**  ``basis gates`` 에 있는 2큐비트 게이트의 이름 (기본값은 ``cx``)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:769
msgid "Run an RB Sequence with T1,T2 Errors"
msgstr "T1, T2 오류와 함께 RB 시퀀스 실행하기"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:771
msgid "We now choose RB sequences that contain only 2-qubit Cliffords."
msgstr "이제 2-큐비트 Clifford만 포함하는 RB 시퀀스를 선택한다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:773
msgid "We execute these sequences as before, but with a noise model extended with T1/T2 thermal relaxation error, and fit the exponentially decaying curve."
msgstr "T1/T2 열적 완화 오류(thermal relaxation error)를 포함해 확장된 노이즈 모델을 사용해 이전과 같이 시퀀스를 실행하고 지수적으로 감소하는 곡선에 맞춰본다."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:900
msgid "We count again the number of **gates per Clifford** as before, and calculate the **two-qubit Clifford gate error**, using the predicted primitive gate errors from the coherence limit."
msgstr "이전과 같이 **gates per Clifford** 의 수를 다시 세고 결맞음 한계를 사용해 예측된 기본 게이트 오류를 사용하여 **two-qubit Clifford gate error** 를 계산한다."

