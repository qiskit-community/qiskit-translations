msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 17:09+0000\n"
"PO-Revision-Date: 2021-10-15 19:05\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/7_accreditation.po\n"
"X-Crowdin-File-ID: 9144\n"
"Language: ko_KR\n"

#: ../../tutorials/noise/7_accreditation.ipynb:10
msgid "This page was generated from `tutorials/noise/7_accreditation.ipynb`__."
msgstr "이 페이지는 `tutorials/noise/7_accreditation.ipynb`__ 에서 생성되었다."

#: ../../tutorials/noise/7_accreditation.ipynb:9
msgid "Accreditation protocol"
msgstr "인가 프로토콜"

#: ../../tutorials/noise/7_accreditation.ipynb:20
msgid "Accreditation Protocol (AP) is a protocol devised to characterize the reliability of noisy quantum devices."
msgstr ""

#: ../../tutorials/noise/7_accreditation.ipynb:22
msgid "Given a noisy quantum device implementing a “target” quantum circuit, AP certifies an upper-bound on the variation distance between the probability distribution of the outputs returned by the device and the ideal probability distribution. This method is based on Ferracin et al, “Accrediting outputs of noisy intermediate-scale quantum devices”, https://arxiv.org/abs/1811.09709."
msgstr ""

#: ../../tutorials/noise/7_accreditation.ipynb:24
msgid "This notebook gives an example for how to use the ignis.characterization.accreditation module. This particular example shows how to accredit the outputs of a 4-qubit quantum circuit of depth 5. All the circuits are run using the noisy Aer simulator."
msgstr ""

#: ../../tutorials/noise/7_accreditation.ipynb:58
msgid "Input to the protocol"
msgstr "프로토콜 입력"

#: ../../tutorials/noise/7_accreditation.ipynb:69
msgid "AP can accredit the outputs of a **target circuit** that 1) Takes as input :math:`n` qubits in the state :math:`|{0}>`\\  2) Ends with single-qubit measurements in the Pauli-\\ :math:`Z` basis 3) Is made of :math:`m` “bands”, each band containing a round of single-qubit gates and a round of controlled-\\ :math:`Z` gates. The accreditation is made by employing **trap circuits**, circuits that can be efficiently simulated on a classical computer and that whose outputs are used to witness the correct functionality of the device."
msgstr ""

#: ../../tutorials/noise/7_accreditation.ipynb:72
msgid "Let’s now draw a target quantum circuit! We start with a simple circuit to generate and measure 4-qubits GHZ states."
msgstr ""

#: ../../tutorials/noise/7_accreditation.ipynb:126
msgid "Generating accreditation circuits"
msgstr "인가 회로 생성하기"

#: ../../tutorials/noise/7_accreditation.ipynb:137
msgid "The function :math:`accreditation\\_circuits` generates all the circuits required by AP, target and traps. It automatically appends random Pauli gates to the circuits (if the implementation is noisy, these random Pauli gates reduce the noise to Pauli errors ! )"
msgstr ""

#: ../../tutorials/noise/7_accreditation.ipynb:139
msgid "It also returns the list :math:`postp\\_list` of strings required to post-process the outputs, as well as the number :math:`v\\_zero` indicating the circuit implementing the target."
msgstr "또한 출력을 후처리하는 데 필요한 문자열의 리스트 :math:`postp\\_list` 와 대상을 구현하는 회로를 나타내는 숫자 :math:`v\\_zero` 도 반환한다."

#: ../../tutorials/noise/7_accreditation.ipynb:141
msgid "This is the target circuit with randomly chosen Pauli gates:"
msgstr "이것은 랜덤하게 선택된 파울리 게이트들을 갖는 대상 회로이다:"

#: ../../tutorials/noise/7_accreditation.ipynb:176
msgid "This is how a trap looks like:"
msgstr ""

#: ../../tutorials/noise/7_accreditation.ipynb:206
msgid "One can use the optional twoqubitgate argument to switch use cx instead of cz gates and can arbitrarily change the coupling map, in order to compile to the desired device topology (which in this case might lead to more layers than expected)."
msgstr "선택적 twoqubitgate 인수를 사용하여 cz 게이트 대신에 cx를 사용하고 원하는 디바이스 토폴로지로 컴파일하기 위해 임의로 커플링 맵을 변경할 수 있다 (이 경우 예상보다 많은 계층으로 이어질 수 있음)."

#: ../../tutorials/noise/7_accreditation.ipynb:242
msgid "Simulate the ideal circuits"
msgstr "이상적인 회로 시뮬레이션"

#: ../../tutorials/noise/7_accreditation.ipynb:253
msgid "Let’s implement AP."
msgstr "AP를 구현하자."

#: ../../tutorials/noise/7_accreditation.ipynb:255
msgid "We use :math:`accreditation\\_circuits` to generate target and trap circuits. Then, we use the function :math:`single\\_protocol\\_run` to implement all these circuits, keeping the output of the target only if all of the traps return the correct output."
msgstr ""

#: ../../tutorials/noise/7_accreditation.ipynb:311
msgid "In the absence of noise, all traps return the expected output, therefore we always accept the output of the target."
msgstr ""

#: ../../tutorials/noise/7_accreditation.ipynb:313
msgid "To obtain an upper-bound on the variation distance on the outputs of the target circuit, we need to implement AP :math:`d` times, each time with **v** different trap circuits."
msgstr "타겟 회로의 출력 상의 변동 거리 상에서 상부 경계를 획득하기 위해, **v** 개의 상이한 트랩 회로를 이용하여 각각의 시간에 AP :math:`d` 를 구현할 필요가 있다."

#: ../../tutorials/noise/7_accreditation.ipynb:425
msgid "The function :math:`bound\\_variation\\_distance` calculates the upper-bound on the variation distance (VD) using"
msgstr "함수 :math:`bound\\_variation\\_distance` 함수를 사용하여 변동 거리 (VD) 에서 상부 경계를 계산한다"

#: ../../tutorials/noise/7_accreditation.ipynb:427
msgid "VD\\leq \\frac{\\varepsilon}{N_{\\textrm{acc}}/d-\\theta}\\textrm{ ,}\n\n"
msgstr "VD\\leq \\frac{\\varepsilon}{N_{\\textrm{acc}}/d-\\theta}\\textrm{ ,}\n\n"

#: ../../tutorials/noise/7_accreditation.ipynb:429
msgid "where :math:`\\theta\\in[0,1]` is a positive number and"
msgstr "여기서 :math:`\\theta\\in[0,1]` 은 양수이고"

#: ../../tutorials/noise/7_accreditation.ipynb:431
msgid "\\varepsilon= \\frac{1.7}{v+1}\n\n"
msgstr "\\varepsilon= \\frac{1.7}{v+1}\n\n"

#: ../../tutorials/noise/7_accreditation.ipynb:433
msgid "is the maximum probability of accepting an incorrect state for the target. The function :math:`bound\\_variation\\_distance` also calculates the confidence in the bound as"
msgstr "는 대상에 대해 올바르지 않은 상태를 허용할 수 있는 최대 확률이다. 함수 :math:`bound\\_variation\\_distance` 또한 다음과 같이 바인드된의 신뢰도를 계산한다."

#: ../../tutorials/noise/7_accreditation.ipynb:435
msgid "1-2\\textrm{exp}\\big(-2\\theta d^2\\big)\n\n"
msgstr "1-2\\textrm{exp}\\big(-2\\theta d^2\\big) \n\n"

#: ../../tutorials/noise/7_accreditation.ipynb:483
msgid "Defining the noise model"
msgstr "노이즈 모델 정의하기"

#: ../../tutorials/noise/7_accreditation.ipynb:494
msgid "We define a noise model for the simulator. We add depolarizing error probabilities to the controlled-\\ :math:`Z` and single-qubit gates."
msgstr ""

#: ../../tutorials/noise/7_accreditation.ipynb:524
msgid "We then implement noisy circuits and pass their outputs to :math:`single\\_protocol\\_run`."
msgstr "그런 다음, 잡음 회로를 구현하고 그들의 출력을 :math:`single\\_protocol\\_run` 로 전달한다."

#: ../../tutorials/noise/7_accreditation.ipynb:639
msgid "Changing the number of trap circuits per protocol run changes the upper-bound on the VD, but not the confidence."
msgstr "프토콜 실행당 트랩 회로 수를 변경하려면 VD의 상한선이 변경되지만 신뢰도는 변경되지 않는다."

#: ../../tutorials/noise/7_accreditation.ipynb:641
msgid "What number of trap circuits will ensure the minimal upper-bound for your target circuit?"
msgstr ""

