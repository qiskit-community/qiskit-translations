msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-05 21:02+0000\n"
"PO-Revision-Date: 2022-01-05 22:31\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/3_measurement_error_mitigation.po\n"
"X-Crowdin-File-ID: 9136\n"
"Language: ko_KR\n"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:10
msgid "This page was generated from `tutorials/noise/3_measurement_error_mitigation.ipynb`__."
msgstr "이 페이지는 `tutorials/noise/3_measurement_error_mitigation.ipynb`__ 에서 생성되었다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:9
msgid "Measurement Error Mitigation"
msgstr "측정 에러 완화(mitigation)"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:21
msgid "Introduction"
msgstr "소개"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:23
msgid "The measurement calibration is used to mitigate measurement errors. The main idea is to prepare all :math:`2^n` basis input states and compute the probability of measuring counts in the other basis states. From these calibrations, it is possible to correct the average results of another experiment of interest. This notebook gives examples for how to use the ``ignis.mitigation.measurement`` module."
msgstr "측정 교정은 측정 오류를 완화하기 위해 사용된다. 주요 아이디어는 모든 :math:`2^n` 기저 입력 상태를 준비하고 다른 기저 상태에서의 측정 카운트 확률을 계산하는 것이다. 이러한 교정을 사용해 보정을 적용하고자 하는 실험의 평균 결과를 수정할 수 있다. 이 노트북은 ``ignis.mitigation.measurement`` 모듈을 사용하는 방법에 대한 예를 제공한다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:57
msgid "3 Qubit Example of the Calibration Matrices"
msgstr "Calibration 행렬의 세 큐비트 예"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:68
msgid "Assume that we would like to generate a calibration matrix for the 3 qubits Q2, Q3 and Q4 in a 5-qubit Quantum Register [Q0,Q1,Q2,Q3,Q4]."
msgstr "5-큐비트 양자 레지스터 [Q0, Q1, Q2, Q3, Q4] 에서 3개의 큐비트 (Q2, Q3및 Q4) 에 대한 교정 행렬을 생성한다고 가정한다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:70
msgid "Since we have 3 qubits, there are :math:`2^3=8` possible quantum states."
msgstr "세 큐비트을 다루기 때문에 가능한 양자 상태는 :math:`2^3=8`개의 가능한 양자 상태가 있다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:82
msgid "Generating Measurement Calibration Circuits"
msgstr "측정 보정(Calibration) 회로 만들기"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:84
msgid "First, we generate a list of measurement calibration circuits for the full Hilbert space. Each circuit creates a basis state. If there are :math:`n=3` qubits, then we get :math:`2^3=8` calibration circuits."
msgstr "먼저, 전체 힐버트 공간에 대한 측정 교정 회로 목록을 생성한다. 각 회로는 기저 상태를 생성한다. 만일 :math:`n=3` 큐비트가 있다면, :math:`2^3=8` 개의 교정 회로를 얻게 된다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:95
msgid "The following function **complete_meas_cal** returns a list **meas_calibs** of ``QuantumCircuit`` objects containing the calibration circuits, and a list **state_labels** of the calibration state labels."
msgstr "다음 기능 **complete\\_meas\\_cal** 은 교정 회로를 포함하는 ``QuantumCircuit`` 오브젝트의 **meas\\_calibs** 목록과 교정 상태 라벨의 **state\\_labels** 목록을 반환한다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:97
msgid "The input to this function can be given in one of the following three forms:"
msgstr "이 함수의 입력 값은 다음 세 가지 형태 중 하나로 제공된다:"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:99
msgid "**qubit_list:** A list of qubits to perform the measurement correction on, or:"
msgstr "**qubit\\_list:** 측정 보정을 수행할 큐비트의 목록 또는:"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:100
msgid "**qr (QuantumRegister):** A quantum register, or:"
msgstr "**qr (QuantumRegister):** 양자 레지스터, 또는:"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:101
msgid "**cr (ClassicalRegister):** A classical register."
msgstr "**cr (ClassicalRegister):** 고전적(classical) 레지스터"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:103
msgid "In addition, one can provide a string **circlabel**, which is added at the beginning of the circuit names for unique identification."
msgstr "또한 고유 식별을 위해 회로 이름의 시작 부분에 문자열 **circlabel** 을 추가할 수 있다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:105
msgid "For example, in our case, the input is a 5-qubit ``QuantumRegister`` containing the qubits Q2,Q3,Q4:"
msgstr "예를 들어,  이 튜토리얼에서는 Q2, Q3, Q4를 포함하는 5 큐비트 ``QuantumRegister`` 라고 할 수 있다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:129
msgid "Print the :math:`2^3=8` state labels (for the 3 qubits Q2,Q3,Q4):"
msgstr ":math:`2^3=8` 상태 레이블을 출력한다 (Q2, Q3, Q4의 세 큐비트의 레이블):"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:175
msgid "Computing the Calibration Matrix"
msgstr "교정 행렬 계산"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:177
msgid "If we do not apply any noise, then the calibration matrix is expected to be the :math:`8 \\times 8` identity matrix."
msgstr "노이즈를 적용하지 않으면 교정 행렬은 :math:`8 \\times 8` 단위 행렬이 될 것으로 예상된다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:257
msgid "Assume that we apply some noise model from Qiskit Aer to the 5 qubits, then the calibration matrix will have most of its mass on the main diagonal, with some additional ‘noise’."
msgstr "Qiskit Aer의 노이즈 모델을 5개의 큐비트에 적용하고, 보정 매트릭스의 질량의 대부분은 대각선에 있고 일부는 추가적인 '노이즈'가 있다고 가정하자."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:259
msgid "Alternatively, we can execute the calibration circuits using an IBMQ provider."
msgstr "또는 IBMQ 공급자를 사용하여 교정 회로를 실행할 수 있다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:373
msgid "Analyzing the Results"
msgstr "결과 분석"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:375
msgid "We would like to compute the total measurement fidelity, and the measurement fidelity for a specific qubit, for example, Q0."
msgstr "총 측정 정확도와 특정 큐비트, 예를 들어 Q0에 대한 측정 정확도를 계산해보자."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:377
msgid "Since the on-diagonal elements of the calibration matrix are the probabilities of measuring state ‘x’ given preparation of state ‘x’, then the trace of this matrix is the average assignment fidelity."
msgstr "교정 행렬의 대각선상에 있는 요소는 상태 'x'의 준비가 주어졌을 때 상태 'x'를 측정할 확률이기 때문에, 이 행렬의 트레이스는 평균 할당 충실도이다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:430
msgid "Applying the Calibration"
msgstr "보정을 적용하기"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:432
msgid "We now perform another experiment and correct the measured results."
msgstr "이 우리는 다른 실험을 수행하고 측정된 결과를 수정한다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:435
msgid "Correct Measurement Noise on a 3Q GHZ State"
msgstr "3Q GHZ 상태의 잡음 측정 정정"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:437
msgid "As an example, we start with the 3-qubit GHZ state on the qubits Q2,Q3,Q4:"
msgstr "예를 들어, Q2, Q3, Q4 큐비트에 대해 3-큐비트 GHZ 상태로 시작한다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:439
msgid "\\mid GHZ \\rangle = \\frac{\\mid{000} \\rangle + \\mid{111} \\rangle}{\\sqrt{2}}\n\n"
msgstr "\\mid GHZ \\rangle = \\frac{\\mid{000} \\rangle + \\mid{111} \\rangle}{\\sqrt{2}\n\n"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:492
#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:1125
msgid "We now execute the calibration circuits (with the noise model above):"
msgstr "이제 보정 회로 (위의 잡음 모델 포함) 를 실행한다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:514
msgid "We now compute the results without any error mitigation and with the mitigation, namely after applying the calibration matrix to the results."
msgstr "이제 결과에 보정 매트릭스를 적용한 후 에러를 완화하는 것과 전혀 완화하지 않는 결과를 계산한다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:516
msgid "There are two fitting methods for applying the calibration (if no method is defined, then ‘least_squares’ is used). - **‘pseudo_inverse’**, which is a direct inversion of the calibration matrix, - **‘least_squares’**, which constrains to have physical probabilities."
msgstr "보정을 적용하기 위한 두 개의 피팅 방법이 있다 (정의된 메소드가 없는 경우에는 ‘least_squares’ 가 사용된다). - **'pseudo_inverse'** 는 컬리브레이션 매트릭스의 직접 반전인-**'least_squares'** 이며, 이는 물리적 확률을 갖도록 제한한다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:518
msgid "The raw data to be corrected can be given in a number of forms:"
msgstr "정정할 원시 데이터는 다음과 같은 여러 양식으로 제공될 수 있다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:520
msgid "Form1: A counts dictionary from results.get_counts,"
msgstr "Form1: results.get_count 에서 카운트 사전이 있다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:521
msgid "Form2: A list of counts of length=len(state_labels),"
msgstr "Form2: length=len(state_labels) 의 개수의 목록이다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:522
msgid "Form3: A list of counts of length=M*len(state_labels) where M is an integer (e.g. for use with the tomography data),"
msgstr "Form3: length=M*len(state_labels) 의 카운트목록이며, 여기서 M은 정수이다 (예를 들어, 단층 촬영 데이터와 함께 사용하기 위한)."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:523
msgid "Form4: A qiskit Result (e.g. results as above)."
msgstr "Form4: qiskit 결과 (예를 들어, 위와 같은 결과)."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:552
msgid "We can now plot the results with and without error mitigation:"
msgstr "이제 에러 완화 여부와 관계없이 결과를 표시할 수 있다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:584
msgid "Applying to a reduced subset of qubits"
msgstr "축소된 큐비트 부분 집합에 적용하기"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:595
msgid "Consider now that we want to correct a 2Q Bell state, but we have the 3Q calibration matrix. We can reduce the matrix and build a new mitigation object."
msgstr "2Q Bell 상태를 수정하고 싶지만 3Q 보정 매트릭스가 있다는 것을 가정하자. 우리는 매트릭스를 줄이고 새로운 완화 개체를 구축할 수 있다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:742
msgid "Tensored mitigation"
msgstr "Tensored 완화"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:744
msgid "The calibration can be simplified if the error is known to be local. By “local error” we mean that the error can be tensored to subsets of qubits. In this case, less than :math:`2^n` states are needed for the computation of the calibration matrix."
msgstr "오류가 로컬인 것으로 알려져 있는 경우 교정을 단순화할 수 있습니다. \"로컬 오류\" 는 오류가 하위의 서브세트에 연결될 수 있음을 의미한다. 이 경우에, :math:`2^n` 미만의 상태가 교정 행렬의 계산에 필요하다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:746
msgid "Assume that the error acts locally on qubit 2 and the pair of qubits 3 and 4. Construct the calibration circuits by using the function ``tensored_meas_cal``. Unlike before we need to explicitly divide the qubit list up into subset regions."
msgstr "오류 큐비트 2와 큐비트 3및 4 쌍에서 로컬로 작동한다고 가정하자. ``tensored_meas_cal`` 기능을 사용하여 보정 회로를 구성한다. 이전과는 달리 큐비트 목록을 하위 집합 영역으로 명시적으로 나눌 필요가 있다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:770
msgid "We now retrieve the names of the generated circuits. Note that in each label (of length 3), the least significant bit corresponds to qubit 2, the middle bit corresponds to qubit 3, and the most significant bit corresponds to qubit 4."
msgstr "이제 생성된 회로의 이름을 검색한다. 각각의 라벨 (길이 3의) 에서, 최하위 비트는 큐비트 2에 해당하고, 중간 비트는 큐비트 3에 해당하며, 최상위 비트는 큐비트 4에 해당한다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:824
msgid "Let us elaborate on the circuit names. We see that there are only four circuits, instead of eight. The total number of required circuits is :math:`2^m` where :math:`m` is the number of qubits in the target subset (here :math:`m=2`)."
msgstr "회로 이름에 대해 자세히 설명하겠다. 8개가 아닌 4개의 회로만 있다는 것을 볼 수 있다. 필요한 회로의 총 수는 :math:`2^m` 이고, 여기서 :math:`m`은 대상 서브셋의 큐비트 수 (여기서는 :math:`m=2`) 이다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:826
msgid "Each basis state of qubits 3 and 4 appears exactly once. Only two basis states are required for qubit 2, so these are split equally across the four experiments. For example, state ‘0’ of qubit 2 appears in state labels ‘000’ and ‘010’."
msgstr "3 및 4의 각각의 기본 상태는 정확히 한번 나타난다. 2개의 기본 상태만이 4비트에 필요하므로, 이들은 4개의 실험에 걸쳐 균등하게 분할된다. 예를 들어, 4비트 2의 상태 '0' 은 상태 레이블 '000' 및 '010' 에 표시된다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:828
msgid "We now execute the calibration circuits on an Aer simulator, using the same noise model as before. This noise is in fact local to qubits 3 and 4 separately, but assume that we don’t know it, and that we only know that it is local for qubit 2."
msgstr "이제 이전과 동일한 소음 모델을 사용하여 Aer 시뮬레이터에서 보정 회로를 실행한다. 이 노이즈는 사실 큐비트 3과 4에 대해 개별적으로 발생하지만, 이것을 모른다는 것을 가정하고 큐비트 2에 대한 로컬 노이즈만 알고 있다고 가정한다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:876
msgid "The fitter provides two calibration matrices. One matrix is for qubit 2, and the other matrix is for qubits 3 and 4."
msgstr "적합자(fitter) 은 두 가지 보정 매트릭스를 제공한다. 한 행렬은 큐비트 2에 대한 행렬이고 다른 행렬은 큐비트 3과 4에 대한 행렬이다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:932
msgid "We can look at the readout fidelities of the individual tensored components or qubits within a set:"
msgstr "다음과 같이 각 tensored 구성 요소 또는 세트 내 큐비트의 판독 충실도(fidelities) 를 살펴볼 수 있다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:993
msgid "Plot the individual calibration matrices:"
msgstr "개별 보정 행렬을 표시한다:"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:1165
msgid "Plot the raw vs corrected state:"
msgstr "원본과 정정된 상태 그리기:"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:1198
msgid "As a check we should get the same answer if we build the full correction matrix from a tensor product of the subspace calibration matrices:"
msgstr "다음과 같이 하위 공간 보정 매트릭스의 테서 제품에서 전체 정정 매트릭스를 빌드하는 경우 동일한 응답을 받아야 한다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:1235
msgid "Running Qiskit Algorithms with Measurement Error Mitigation"
msgstr "측정 오류를 줄여주는 Qiskit 알고리즘 실행"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:1237
msgid "To use measurement error mitigation when running quantum circuits as part of a Qiskit algorithm, we need to include the respective measurement error fitting instance in the QuantumInstance. This object also holds the specifications for the chosen backend."
msgstr "Qiskit 알고리즘의 일부로서 양자 회로를 실행할 때 측정 오류 완화를 사용하려면, 퀀텀 인스턴스 (QuantumInstance) 에 각각의 측정 에러 피팅 인스턴스를 포함해야 한다. 이 오브젝트는 또한 선택된 백엔드에 대한 스펙을 보유한다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:1239
msgid "In the following, we illustrate measurement error mitigation on the example of searching the ground state of a Hamiltonian with VQE."
msgstr "다음으로, VQE를 사용하여 해밀토니안의 바닥 상태를 탐색하는 예제에 대한 측정 오류 완화를 예시로 보인다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:1250
msgid "First, we need to import the libraries that provide backends as well as the classes that are needed to run the algorithm."
msgstr "먼저, 알고리즘을 실행하는 데 필요한 클래스뿐만 아니라 백엔드를 제공하는 라이브러리를 가져와야 한다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:1281
msgid "Then, we initialize the instances that are required to execute the algorithm."
msgstr "그런 다음, 알고리즘을 실행하는 데 필요한 인스턴스를 초기화한다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:1311
msgid "Here, we choose the Aer ``qasm_simulator`` as backend and also add a custom noise model. The application of an actual quantum backend provided by IBMQ is outlined in the commented code."
msgstr "여기서 우리는 에어(Aer) ``qasm_simulator`` 를 백엔드로 선택하고 커스텀 노이즈 모델도 추가한다. IBMQ에 의해 제공되는 실제 양자 백엔드의 애플리케이션은 주석 코드에 요약되어 있다."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:1348
msgid "Finally, we can run the algorithm and check the results."
msgstr "마지막으로 알고리즘을 실행하여 결과를 확인할 수 있다."

