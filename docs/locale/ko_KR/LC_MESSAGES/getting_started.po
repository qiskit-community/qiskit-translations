msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-22 18:21+0000\n"
"PO-Revision-Date: 2023-05-23 16:49\n"
"Last-Translator: \n"
"Language: ko\n"
"Language-Team: Korean\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/getting_started.po\n"
"X-Crowdin-File-ID: 9536\n"

#: ../../getting_started.rst:5
msgid "Getting started"
msgstr "시작하기"

#: ../../getting_started.rst:10
msgid "Installation"
msgstr "설치하기"

#: ../../getting_started.rst:12
msgid "Let's get started using Qiskit!  The first thing to do is choose how you're going to run and install the packages.  There are three main ways to do this:"
msgstr "Qiskit을 사용해보자! 가장 먼저 해야 할 것은 패키지를 실행하고 설치할 방법을 선택하는 것이다. 여기에는 세 가지 주요 방법이 있다."

#: ../../getting_started.rst
msgid "Start locally"
msgstr "로컬에서 시작"

#: ../../getting_started.rst:19
msgid "Qiskit supports Python 3.7 or later. However, both Python and Qiskit are evolving ecosystems, and sometimes when new releases occur in one or the other, there can be problems with compatibility."
msgstr "Qiskit은 Python 3.7이상을 지원한다. 하지만 Python과 Qiskit 모두 계속 개발중이며, 때때로 새 릴리스가 하나 또는 다른 버전에서 발생하는 경우 호환성에 문제가 발생할 수 있다."

#: ../../getting_started.rst:23
msgid "You will need to `download Python <https://wiki.python.org/moin/BeginnersGuide/Download>`__ on your local system to get started. `Jupyter <https://jupyter.org/install>`__ is recommended for interacting with Qiskit."
msgstr "로컬 시스템에서 시작하기 위해서는 `Python <https://wiki.python.org/moin/BeginnersGuide/Download>`__ 을 다운로드해야 한다. `Jupyter <https://jupyter.org/install>`__ 를 통해 Qiskit을 사용하기를 권장한다."

#: ../../getting_started.rst:27
msgid "We recommend using `Python virtual environments <https://docs.python.org/3.10/tutorial/venv.html>`__ to cleanly separate Qiskit from other applications and improve your experience."
msgstr "Qiskit을 다른 애플리케이션과 분리하고 사용자 경험을 증진시키기 위해 `Python 가상 환경 <https://docs.python.org/3.10/tutorial/venv.html>`__ 을 사용하는 것을 추천한다."

#: ../../getting_started.rst:30
msgid "Create a minimal environment with only Python installed in it."
msgstr "오직 Python 만 설치한 최소한의 환경을 만들고,"

#: ../../getting_started.rst:36
msgid "Activate your new environment."
msgstr "새로운 환경을 활성화하라."

#: ../../getting_started.rst:43
msgid "Note: if you are using Windows, use the following commands in PowerShell."
msgstr "참고: 윈도우를 사용한다면 PowerShell에서 아래의 명령어를 사용하라."

#: ../../getting_started.rst:51
msgid "Next, install the Qiskit package."
msgstr "그런 다음 Qiskit 패키지를 설치한다."

#: ../../getting_started.rst:57
msgid "If the packages were installed correctly, you can run ``pip list`` to see the active packages in your virtual environment."
msgstr "만약 패키지가 제대로 설치되었다면, ``pip list`` 명령어를 사용하여 현재 가상 환경에서 활성화된 패키지를 확인할 수 있다."

#: ../../getting_started.rst:60
msgid "If you intend to use visualization functionality or Jupyter notebooks it is recommended to install Qiskit with the extra ``visualization`` support:"
msgstr "시각화 기능 또는 Jupyter 노트북을 사용하려는 경우 추가 ``visualization`` 을 사용하여 Qiskit을 설치하는 것이 좋다."

#: ../../getting_started.rst:67
msgid "It is worth pointing out that if you're a zsh user (which is the default shell on newer versions of macOS), you'll need to put ``qiskit[visualization]`` in quotes:"
msgstr "zsh 사용자 (최신 버전의 macOS 기본 쉘) 인 경우 ``qiskit[visualization]`` 을 따옴표로 묶어야 한다:"

#: ../../getting_started.rst
msgid "Start on the cloud"
msgstr "클라우드에서 시작하기"

#: ../../getting_started.rst:76
msgid "The following cloud vendors have Qiskit pre-installed in their environments:"
msgstr "다음의 클라우드 환경을 이용하면 별도의 설치 없이 Qiskit을 사용할 수 있다."

#: ../../getting_started.rst
msgid "Install from source"
msgstr "소스 코드로부터 설치"

#: ../../getting_started.rst:108
msgid "Installing the elements from source allows you to access the most recently updated version of Qiskit instead of using the version in the Python Package Index (PyPI) repository. This will give you the ability to inspect and extend the latest version of the Qiskit code more efficiently."
msgstr "소스 코드로부터 구성 요소들을 설치하는 것은 파이썬 패키지 색인 (PyPI) 코드 저장소로 부터 설치하는 것 대신에 가장 최신에 업데이트된 키스킷 버전을 사용하도록 해준다. 이를 통해 손쉽게 키스킷의 최신 코드를 확장하고 검사해 볼 수 있다."

#: ../../getting_started.rst:113
msgid "When installing the elements and components from source, by default their ``development`` version (which corresponds to the ``master`` git branch) will be used, as opposed to the ``stable`` version (which contains the same codebase as the published ``pip`` packages). Since the ``development`` versions of an element or component usually include new features and changes, they generally require using the ``development`` version of the rest of the items as well."
msgstr "소스코드로 부터 구성 요소나 성분을 설치할 때는 기본 설정으로 ``개발``버전 (이것은 깃 브랜치의 ``마스터``에 해당한다) 이 사용되고 ``안정``버전 (``pip`` 패키지로 설치되는 같은 코드를 기반으로 하는) 과 대응을 이룬다. ``개발``버전의 구성요소나 성분들은 보통 새로운 기능과 변화를 가지고 있기 때문에, 나머지 아이템들도 ``개발``버전으로 설치하는 것을 권장한다."

#: ../../getting_started.rst:120
msgid "Installing elements from source requires the following order of installation to prevent installing versions of elements that may be lower than those desired if the ``pip`` version is behind the source versions:"
msgstr "소스 코드로 부터 구성 요소들을 설치하기 위해서는, ``pip`` 버전이 소스 코드 버전보다 오래된 것일 경우 필요로 하는 구성 요소의 버전도 낮을 수 있기 때문에 설치 시에 바른 순서를 따르는 것이 필요하다."

#: ../../getting_started.rst:124
msgid ":ref:`qiskit-terra <install-qiskit-terra>`"
msgstr ":ref:`qiskit-terra <install-qiskit-terra>`"

#: ../../getting_started.rst:125
msgid ":ref:`qiskit-aer <install-qiskit-aer>`"
msgstr ":ref:`qiskit-aer <install-qiskit-aqua>`"

#: ../../getting_started.rst:127
msgid "To work with several components and elements simultaneously, use the following steps for each element."
msgstr "몇몇 개의 구성 요소나 요소를 동시에 사용하고자 한다면 각각의 요소에 대해 다음 단계를 거치도록 하라."

#: ../../getting_started.rst:132
msgid "The Terra and Aer packages both require a compiler to build from source before you can install. Ignis, Aqua, and the IBM Quantum Provider backend do not require a compiler."
msgstr "테라와 아르 패키지 모두 설치하기 전에 소스 코드로 부터 빌드하기 위해 컴파일러가 필요하다. 이그니스, 아쿠아 그리고 아이비엠 양자 시스템 제공자 후위 처리 장치는 컴파일러를 필요로 하지 않는다."

#: ../../getting_started.rst:138
msgid "Due to the use of namespace packaging in Python, care must be taken in how you install packages. If you're planning to install any element from source, do not use the ``qiskit`` meta-package. Also, follow this guide and use a separate virtual environment for development. If you do choose to mix an existing installation with your development, refer to https://github.com/pypa/sample-namespace-packages/blob/master/table.md for the set of combinations of installation methods that work together."
msgstr "Python에서 명칭 공간의 패키지 사용법 때문에 패키지를 설치할 때 주의를 기울여야 한다. 만약 소스로부터 어떤 요소를 설치하고자 할 때, ``Qiskit`` 메타-패키지를 사용하지 말라. 또한 이 가이드를 따라 개발을 위해 따로 마련한 가상 환경을 이용하라. 만약 개발을 위해 이미 존재하고 있는 설치 패키지와 섞어서 사용하기 원한다면, 함께 사용할 수 있는 설치 방법의 조합을 설명한 이 문서 (https://github.com/pypa/sample-namespace-packages/blob/master/table.md)를 참조하라."

#: ../../getting_started.rst:161
msgid "Installing from source requires that you have the Rust compiler on your system. To install the Rust compiler the recommended path is to use rustup, which is a cross-platform Rust installer. To use rustup you can go to:"
msgstr "소스에서 설치하려면 시스템에 Rust 컴파일러가 있어야 한다. Rust 컴파일러를 설치하려면 크로스 플랫폼 Rust 설치 프로그램인 rustup을 사용하는 것이 좋다. rustup을 사용하려면:"

#: ../../getting_started.rst:165
msgid "https://rustup.rs/"
msgstr "https://rustup.rs/"

#: ../../getting_started.rst:167
msgid "which will provide instructions for how to install rust on your platform. Besides rustup there are `other installation methods <https://forge.rust-lang.org/infra/other-installation-methods.html>`__ available too."
msgstr "플랫폼에 rust를 설치하는 방법에 대한 지시사항을 제공한다. rustup 외에 `다른 설치 방법 <https://forge.rust-lang.org/infra/other-installation-methods.html>`__  도 사용할 수 있다."

#: ../../getting_started.rst:171
msgid "Once the Rust compiler is installed, you are ready to install Qiskit Terra."
msgstr "Rust 컴파일러가 설치되고 나면 키스킷 테라를 설치할 준비가 된 것이다."

#: ../../getting_started.rst:173
msgid "Clone the Terra repository."
msgstr "Terra 코드 저장소를 복제하라"

#: ../../getting_started.rst:179
msgid "Cloning the repository creates a local folder called ``qiskit-terra``."
msgstr "저장소 복제는 ``qiskit-terra``라는 이름의 지역 디렉토리를 생성한다."

#: ../../getting_started.rst:185
msgid "If you want to run tests or linting checks, install the developer requirements."
msgstr "만약 테스트 코드를 실행하거나 철자법 검사를 하고자 한다면, 개발자 요구사항 라이브러리를 설치하라."

#: ../../getting_started.rst:191
msgid "Install ``qiskit-terra``."
msgstr "``qiskit-terra``를 설치하기"

#: ../../getting_started.rst:197
msgid "If you want to install it in editable mode, meaning that code changes to the project don't require a reinstall to be applied, you can do this with:"
msgstr "만약, 프로젝트에 코드가 변화하였을 때 재설치가 필요하지 않는, 수정 가능한 모드로 설치하고자 한다면, 다음의 명령어를 사용하라."

#: ../../getting_started.rst:204
msgid "Installing in editable mode will build the compiled extensions in debug mode without optimizations. This will affect the runtime performance of the compiled code. If you'd like to use editable mode and build the compiled code in release with optimizations enabled you can run:"
msgstr "편집 가능 모드에서 설치하면 디버그 모드에서 컴파일된 extension들이 최적화 없이 빌드된다. 이는 컴파일된 코드의 런타임 성능에 영향을 끼친다. 편집 모드에서 최적화를 사용해 컴파일된 코드를 빌드 하고 싶다면 다음을 실행해 보자:"

#: ../../getting_started.rst:213
msgid "after you run pip and that will rebuild the binary in release mode. If you are working on Rust code in Qiskit you will need to rebuild the extension code every time you make a local change. ``pip install -e .`` will only build the Rust extension when it's called, so any local changes you make to the Rust code after running pip will not be reflected in the installed package unless you rebuild the extension. You can leverage the above ``build_rust`` command to do this (with or without ``--release`` based on whether you want to build in debug mode or release mode)."
msgstr "pip를 실행한 후 위 코드가 배포 모드에서 바이너리를 다시 빌드할 것이다. 만약 Qiskit에서 Rust 코드를 작업하는 경우, 로컬에서 변경이 발생할 때마다 확장 코드를 매번 다시 빌드해야 한다. ``pip install -e`` 는 호출될 때만 Rust 확장을 빌드하므로, 확장 코드를 다시 빌드하지 않는 한 pip를 실행한 후의 Rust 코드 작업의 로컬 변경 사항들은 설치된 패키지에 반영되지 않을 것이다. 이를 위해 위의 ``build_rust`` 명령을 사용할 수 있다 (디버그 모드 또는 배포 모드에서 빌드할 것인지 여부에 따라 ``--release`` 사용 여부를 결정한다)."

#: ../../getting_started.rst:222
msgid "You can then run the code examples after installing Terra. You can run the example with the following command."
msgstr "테라를 설치한 이후에 예제 코드들을 실행해 볼 수 있다. 이를 위해서는 다음 명령어를 실행하라."

#: ../../getting_started.rst:237
msgid "Clone the Aer repository."
msgstr "Aer 저장소를 복제합니다."

#: ../../getting_started.rst:243
msgid "To install Aer depend on which operating system you are using. Since Aer is a compiled C++ program with a Python interface, there are non-Python dependencies for building the Aer binary which can't be installed universally depending on operating system."
msgstr "Aer 설치는 사용 중인 운영 체제에 따라 다르다. Aer는 Python 인터페이스가 있는 컴파일 된 C++ 프로그램이므로, Aer 바이너리를 빌드하는데 운영 체제에 보편적으로 설치할 수 없는 Python이 아닌 종속 프로그램/라이브러리들이 있습니다."

#: ../../getting_started.rst ../../getting_started.rst:417
msgid "Linux"
msgstr "리눅스"

#: ../../getting_started.rst:250
msgid "Install compiler requirements."
msgstr "컴파일러 요구사항을 설치하시오."

#: ../../getting_started.rst:252
msgid "Building Aer requires a C++ compiler and development headers."
msgstr "Aer 설치는 C++ 컴파일러와 개발 헤더를 필요로합니다."

#: ../../getting_started.rst:254 ../../getting_started.rst:269
msgid "If you're using Fedora or an equivalent Linux distribution, install using:"
msgstr "만일 당신이 Fedora 나 동등한 리눅스 배포본 을 사용하 는 경우 다음을 사용해 설치하십시오."

#: ../../getting_started.rst:261 ../../getting_started.rst:276
msgid "For Ubuntu/Debian install it using:"
msgstr "유분투나 데비안을 사용하는경우 다음을 사용해 설치하십시오."

#: ../../getting_started.rst:267
msgid "Install OpenBLAS development headers."
msgstr "OpenBLAS 개발 헤더를 설치하십시오."

#: ../../getting_started.rst
msgid "macOS"
msgstr "macOS"

#: ../../getting_started.rst:285
msgid "Install dependencies."
msgstr "설치 종속성:"

#: ../../getting_started.rst:287
msgid "To use the `Clang <https://clang.llvm.org/>`__ compiler on macOS, you need to install an extra library for supporting `OpenMP <https://www.openmp.org/>`__.  You can use `brew <https://brew.sh/>`__ to install this and other dependencies."
msgstr "macOS 에서 `Clang <https://clang.llvm.org/>`__ 컴파일러를 사용할 경우에는, `OpenMP <https://www.openmp.org/>`__지원하기 위해서 추가적인 라이브러리를 설치해야 합니다.  `brew <https://brew.sh/>`__ 를 사용하여 이것을 또는 다른 종속 프로그램/라이브러리 들을 설치 할 수 있습니다."

#: ../../getting_started.rst:295
msgid "Then install a BLAS implementation; `OpenBLAS <https://www.openblas.net/>`__ is the default choice."
msgstr "그다음 BLAS구현을 설치하십시오; `OpenBLAS <https://www.openblas.net/>`__ 가 기본 선택입니다."

#: ../../getting_started.rst:302
msgid "Next, install ``Xcode Command Line Tools``."
msgstr "다음, ``Xcode Command Line Tools`` 을 설치하십시오."

#: ../../getting_started.rst
msgid "Windows"
msgstr "Windows"

#: ../../getting_started.rst:310
msgid "All dependencies are added as part of the Visual C++ compiler installed above, so no additional setup is needed."
msgstr "모든 종속성은 위에서 설치된 Visual C++ 컴파일러의 일부로 추가되므로 별도의 설정이 필요하지 않다."

#: ../../getting_started.rst:314
msgid "Qiskit Aer is a high performance simulator framework for quantum circuits. It provides `several backends <apidoc/aer_provider.html#simulator-backends>`__ to achieve different simulation goals."
msgstr "Qiskit Aer는 양자 회로를 위한 고성능 시뮬레이터 프레임워크이다. 이는 여러가지 시뮬레이션 목적을 이루기 위해서 `다양한 백엔드 <apidoc/aer_provider.html#simulator-backends>`__ 들을 제공한다."

#: ../../getting_started.rst:319
msgid "Build and install qiskit-aer directly"
msgstr "qiskit-aer를 직접 빌드하고 설치하라"

#: ../../getting_started.rst:321
msgid "If you have pip <19.0.0 installed and your environment doesn't require a custom build, run:"
msgstr "만일 당신이 pip 버전 19.0.0 이하를 설치하였고 당신의 환경이 사용자 빌드를 요구하지 않으면 다음을 실행하자:"

#: ../../getting_started.rst:329
msgid "This will both build the binaries and install Aer."
msgstr "이것은 바이너리를 빌드하고 Aer를 설치한다."

#: ../../getting_started.rst:331
msgid "Alternatively, if you have a newer pip installed, or have some custom requirement, you can build a Python wheel manually."
msgstr "또는 최신 pip가 설치되어 있거나 사용자 지정 요구 사항이 있으면 파이썬 휠을 수동으로 만들 수 있다."

#: ../../getting_started.rst:339
msgid "If you need to set a custom option during the wheel build, refer to :ref:`Custom options <aer_wheel_build_options>`."
msgstr "만약 wheel 빌드 하면서 사용자 지정 옵션을 설정해야 된다면, :ref:`사용자 지정 옵션 <aer_wheel_build_options>` 을 참조하자."

#: ../../getting_started.rst:342
msgid "After you build the Python wheel, it will be stored in the ``dist/`` dir in the Aer repository. The exact version will depend"
msgstr "파이선 휠을 빌드 한 후, 그것은 아르 저장소 안의 디렉토리 ``dist/`` 에 저장이 된다. 정확한 버전은 때에따라 다르다"

#: ../../getting_started.rst:350
msgid "The exact filename of the output wheel file depends on the current version of Aer under development."
msgstr "출력 휠 파일의 정확한 파일 이름은 개발중인 Aer의 현재 버전에 따라 다르다."

#: ../../getting_started.rst:359
msgid "The Aer build system uses `scikit-build <https://scikit-build.readthedocs.io/en/latest/index.html>`__ to run the compilation when building it with the Python interface. It acts as an interface for `setuptools <https://setuptools.readthedocs.io/en/latest/>`__ to call `CMake <https://cmake.org/>`__ and compile the binaries for your local system."
msgstr "파이선 인터페이스를 이용해서 Aer를 빌드할 때 컴파일을 실행하기 위해 `scikit-build <https://scikit-build.readthedocs.io/en/latest/index.html>`__ 을 사용한다. 이것은 `CMake <https://cmake.org/>`__ 을 부르기 위해 `setuptools <https://setuptools.readthedocs.io/en/latest/>`__ 의 인터페이스로 작용을 하고, 로컬 시스템을 위해 바이너리를 컴파일한다."

#: ../../getting_started.rst:364
msgid "Due to the complexity of compiling the binaries, you may need to pass options to a certain part of the build process. The way to pass variables is:"
msgstr "바이너리 파일을 컴파일 하는 것은 복잡하기 때문에 빌드 과정 중의 특정 부분에 옵션을 따로 정해줘야 할 수도 있다. 변수들을 전달하는 방법은 다음과 같다."

#: ../../getting_started.rst:371
msgid "where the elements within square brackets `[]` are optional, and ``skbuild_opts``, ``cmake_opts``, ``build_tool_opts`` are to be replaced by flags of your choice. A list of *CMake* options is available here: https://cmake.org/cmake/help/v3.6/manual/cmake.1.html#options. For example, you could run something like:"
msgstr "꺽쇠 괄호 `[]` 안에 있는 요소들은 선택적인 것이고, ``skbuild_opts``, ``cmake_opts``, ``build_tool_opts`` 는 당신의 선택에 따라 참 혹은 거짓 값을 가질 수 있다. *CMake* 의 옵션 리스트는 여기서 (https://cmake.org/cmake/help/v3.6/manual/cmake.1.html#options) 찾아 볼 수 있다. 예를 들어, 다음과 같이 실행할 수 있다."

#: ../../getting_started.rst:381
msgid "This is passing the flag `-j8` to the underlying build system (which in this case is `Automake <https://www.gnu.org/software/automake/>`__), telling it that you want to build in parallel using 8 processes."
msgstr "이 명령어는 기반이 되는 빌드 시스템 (이 경우 `Automake <https://www.gnu.org/software/automake/>`__)에 컴파일 시 8개의 프로세스를 병렬 처리로 사용하라는 `-j8` 이라는 옵션을 건네준다."

#: ../../getting_started.rst:385
msgid "For example, a common use case for these flags on linux is to specify a specific version of the C++ compiler to use (normally if the default is too old):"
msgstr "예를 들어, 리눅스에서 이러한 옵션들의 일반적인 사용법은 사용할 C++ 컴파일러의 특정 버전을 구체적으로 명시하기 위해서이다. (대게 기본 설정으로 쓰이는 컴파일러가 너무 오래된 것일 때 사용한다.)"

#: ../../getting_started.rst:393
msgid "which will tell CMake to use the g++-7 command instead of the default g++ when compiling Aer."
msgstr "이 명령어는 씨메이크 (CMake) 에게 Aer를 컴파일 할 때, 기본으로 쓰이는 g++ 컴파일러를 사용하지 말고 g++-7 컴파일러를 사용하라는 것이다."

#: ../../getting_started.rst:396
msgid "Another common use case for this, depending on your environment, is that you may need to specify your platform name and turn off static linking."
msgstr "환경에 따라 이러한 옵션을 사용하는 또 다른 경우는 당신의 플랫폼 이름을 구체적으로 명시하고 정적 연결(static linking) 을 금지하기 위한 경우이다."

#: ../../getting_started.rst:404
msgid "Here ``--plat-name`` is a flag to setuptools, to specify the platform name to use in the package metadata, ``-DSTATIC_LINKING`` is a flag for using CMake to disable static linking, and ``-j8`` is a flag for using Automake to use 8 processes for compilation."
msgstr "여기서 ``--plat-name`` 은 패키지 메타 정보에서 사용되는 플랫폼 이름을 정해주기 위해 setuptools에 보내지는 옵션이다. 그리고 ``-DSTATIC_LINKING`` 은 씨메이크(CMake) 를 사용하여 정적 연결을 꺼주기 위한 옵션이고, ``-j8`` 은 오토메이크(Automake) 가 컴파일 할 때 8개의 프로세서를 사용하라는 옵션이다."

#: ../../getting_started.rst:409
msgid "A list of common options depending on platform are:"
msgstr "플랫폼에 따라 일반적으로 사용되는 옵션의 목록은 다음과 같다."

#: ../../getting_started.rst:412
msgid "Platform"
msgstr "플랫폼"

#: ../../getting_started.rst:412
msgid "Tool"
msgstr "도구"

#: ../../getting_started.rst:412
msgid "Option"
msgstr "옵션"

#: ../../getting_started.rst:412
msgid "Use Case"
msgstr "활용 예시"

#: ../../getting_started.rst:414
msgid "All"
msgstr "전체"

#: ../../getting_started.rst:414
msgid "Automake"
msgstr "오토메이크(Automake)"

#: ../../getting_started.rst:414
msgid "-j"
msgstr "-j"

#: ../../getting_started.rst:414
msgid "Followed by a number, sets the number of processes to use for compilation."
msgstr "숫자와 함께 사용되어서, 컴파일 시 사용할 프로세서의 수를 결정한다."

#: ../../getting_started.rst:417 ../../getting_started.rst:424
msgid "CMake"
msgstr "씨메이크(CMake)"

#: ../../getting_started.rst:417
msgid "-DCMAKE_CXX_COMPILER"
msgstr "-DCMAKE_CXX_COMPILER"

#: ../../getting_started.rst:417
msgid "Used to specify a specific C++ compiler; this is often needed if your default g++ is too old."
msgstr "특정 C++ 컴파일러를 명시하기 위해 사용된다. 이 옵션은 보통 기본 g++ 컴파일러가 너무 오래 되었을 때 사용된다."

#: ../../getting_started.rst:421 ../../getting_started.rst:424
msgid "OSX"
msgstr "오에스엑스(OSX)"

#: ../../getting_started.rst:421
msgid "setuptools"
msgstr "도구 설정"

#: ../../getting_started.rst:421
msgid "--plat-name"
msgstr "--plat-name"

#: ../../getting_started.rst:421
msgid "Used to specify the platform name in the output Python package."
msgstr "결과 파이썬 패키지에 나타나는 플랫폼 이름을 명시하기 위해 사용된다."

#: ../../getting_started.rst:424
msgid "-DSTATIC_LINKING"
msgstr "-DSTATIC_LINKING"

#: ../../getting_started.rst:424
msgid "Used to specify whether or not static linking should be used."
msgstr "정적 연결을 사용할지 안 사용할지 결정하는데 사용된다."

#: ../../getting_started.rst:429
msgid "Some of these options are not platform-specific. These particular platforms are listed because they are commonly used in the environment. Refer to the tool documentation for more information."
msgstr "이러한 몇몇 옵션들은 플랫폼에 좌우되지 않는다. 이러한 특정 플랫폼이 여기 나열된 이유는 보통 일반적으로 사용되는 환경이기 때문이다. 더 많은 정보를 위해서는 도구 문서화 항목을 참조하라."

#: ../../getting_started.rst:436
msgid "Platform Support"
msgstr "플랫폼 지원"

#: ../../getting_started.rst:438
msgid "Qiskit strives to support as many platforms as possible, but due to limitations in available testing resources and platform availability, not all platforms can be supported. Platform support for Qiskit is broken into 3 tiers with different levels of support for each tier. For platforms outside these, Qiskit is probably still installable, but it's not tested and you will have to build Qiskit (and likely Qiskit's dependencies) from source."
msgstr "Qiskit은 최대한 많은 플랫폼을 지원하기 위해 노력하지만, 사용 가능한 테스트 자원 및 플랫폼 가용성의 한계로 인해 모든 플랫폼을 지원할 수는 없다. Qiskit에 대한 플랫폼 지원은 3개의 계층으로 나뉘며 각 계층마다 지원 수준이 다르다. 이러한 플랫폼 이외의 플랫폼에서 Qiskit은 여전히 설치 가능하지만 테스트되지 않았으며 Qiskit(및 Qiskit의 종속 항목) 을 소스로부터 가져와야 한다."

#: ../../getting_started.rst:445
msgid "Additionally, Qiskit only supports CPython. Running with other Python interpreters isn't currently supported."
msgstr "또한 Qiskit은 CPython만 지원한다. 다른 Python 인터프리터를 사용하는 것은 현재 지원되지 않는다."

#: ../../getting_started.rst:449
msgid "Tier 1"
msgstr "계층 1"

#: ../../getting_started.rst:451
msgid "Tier 1 supported platforms are fully tested upstream as part of the development processes to ensure any proposed change will function correctly. Pre-compiled binaries are built, tested, and published to PyPI as part of the release process. These platforms are expected to be installable with just a functioning Python environment as all dependencies are available on these platforms."
msgstr "계층 1 지원 플랫폼은 제안된 변경사항이 올바르게 작동하는지 확인하기 위해 개발 프로세스의 일부로 테스트된다. 사전 컴파일된 바이너리는 릴리스 프로세스의 일부로 빌드, 테스트 및 PyPI에 공개된다. 이러한 플랫폼은 모든 종속 프로그램을 사용할 수 있기 때문에 작동하는 Python 환경만으로 설치가 가능할 것으로 예상된다."

#: ../../getting_started.rst:457
msgid "Tier 1 platforms are currently:"
msgstr "계층 1 플랫폼은 다음과 같다:"

#: ../../getting_started.rst:459
msgid "Linux x86_64 (distributions compatible with the `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ packaging specification."
msgstr "Linux x86_64 (`manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ 패키징 스펙과 호환 가능한 배포판)."

#: ../../getting_started.rst:462
msgid "macOS x86_64 (10.9 or newer)"
msgstr "macOS x86_64 (10.9 또는 최신 버전)"

#: ../../getting_started.rst:463
msgid "Windows 64 bit"
msgstr "윈도우 64비트"

#: ../../getting_started.rst:466
msgid "Tier 2"
msgstr "계층 2"

#: ../../getting_started.rst:468
msgid "Tier 2 platforms are not tested upstream as part of development process. However, pre-compiled binaries are built, tested, and published to PyPI as part of the release process and these packages can be expected to be installed with just a functioning Python environment."
msgstr "계층 2 플랫폼은 개발 프로세스의 일부로 테스트를 거치지 않는다. 그러나 사전 컴파일된 바이너리는 릴리스 프로세스의 일부로 빌드, 테스트 및 PyPI에 공개되며 이러한 패키지는 단지 작동하는 Python 환경에서 설치가 가능할 것으로 예상된다."

#: ../../getting_started.rst:473
msgid "Tier 2 platforms are currently:"
msgstr "계층 2 플랫폼은 다음과 같다:"

#: ../../getting_started.rst:475
msgid "Linux i686 (distributions compatible with the `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ packaging specification) for Python < 3.10"
msgstr "Linux i686 (Python < 3.10) 용 Linux i686 ( `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__  패키징 스펙과 호환 가능)"

#: ../../getting_started.rst:478
msgid "Windows 32 bit for Python < 3.10"
msgstr "Python <3.10용 윈도우 32비트"

#: ../../getting_started.rst:479
msgid "Linux aarch64 (distributions compatible with the `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ packaging specification)"
msgstr "Linux aarch64 (패키징 사양과 호환되는 배포판 `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`)"

#: ../../getting_started.rst:484
msgid "Tier 3"
msgstr "계층 3"

#: ../../getting_started.rst:486
msgid "Tier 3 platforms are not tested upstream as part of the development process.  Pre-compiled binaries are built and published to PyPI as part of the release process, with no testing at all. They may not be installable with just a functioning Python environment and may require a C/C++ compiler or additional programs to build dependencies from source as part of the installation process. Support for these platforms are best effort only."
msgstr "계층 3 플랫폼은 개발 프로세스의 일부로 테스트되지 않는다. 사전 컴파일된 바이너리는 테스트 없이 릴리스 프로세스의 일부로 PyPI에 빌드되고 공개된다. 단순히 작동하는 Python 환경으로는 설치할 수 없으며, 설치 프로세스의 일부로 소스의 종속 프로그램을 빌드하기 위해 C/C++ 컴파일러 또는 추가 프로그램이 필요할 수 있다. 이러한 플랫폼에 대한 지원은 최선의 노력이다."

#: ../../getting_started.rst:493
msgid "Tier 3 platforms are currently:"
msgstr "계층 3 플랫폼은 다음과 같다:"

#: ../../getting_started.rst:495
msgid "Linux ppc64le (distributions compatible with the `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ packaging specification)"
msgstr "Linux ppc64le (패키징 사양과 호환되는 배포판 `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`)"

#: ../../getting_started.rst:498
msgid "Linux s390x (distributions compatible with the `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ packaging specification)"
msgstr "Linux s390x (패키징 사양과 호환되는 배포판 `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`)"

#: ../../getting_started.rst:501
msgid "macOS arm64 (10.15 or newer)"
msgstr "macOS arm64 (10.15 또는 최신 버전)"

#: ../../getting_started.rst:502
msgid "Linux i686 (distributions compatible with the `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ packaging specification) for Python >= 3.10"
msgstr "Python >= 3.10용 Linux i686 (`manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ 패키징 사양과 호환되는 배포판)"

#: ../../getting_started.rst:505
msgid "Windows 32 bit for Python >= 3.10"
msgstr "Python >= 3.10 용 윈도우 32 비트"

#: ../../getting_started.rst:508
msgid "Ready to get going?..."
msgstr "시작할 준비가 다 되었다면..."

