msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-31 23:52+0000\n"
"PO-Revision-Date: 2022-04-01 00:46\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/getting_started.po\n"
"X-Crowdin-File-ID: 9536\n"
"Language: ko_KR\n"

#: ../../getting_started.rst:5
msgid "Getting started"
msgstr "시작하기"

#: ../../getting_started.rst:8
msgid "Installation"
msgstr "설치하기"

#: ../../getting_started.rst
msgid "Start locally"
msgstr "로컬로 시작"

#: ../../getting_started.rst:12
msgid "Qiskit supports Python 3.7 or later. However, both Python and Qiskit are evolving ecosystems, and sometimes when new releases occur in one or the other, there can be problems with compatibility."
msgstr ""

#: ../../getting_started.rst:16
msgid "We recommend installing `Anaconda <https://www.anaconda.com/download/>`__, a cross-platform Python distribution for scientific computing. Jupyter, included in Anaconda, is recommended for interacting with Qiskit."
msgstr "과학 계산을 위해서 교차 사용이 가능한 Python 배포본인 `아나콘다 (Anaconda) <https://www.anaconda.com/download/>`__ 를 설치하는 것을 추천한다. 아나콘다에 포함된 Jupyter 패키지를 이용하여 Qiskit을 사용하는 것을 추천한다."

#: ../../getting_started.rst:20
msgid "We recommend using Python virtual environments to cleanly separate Qiskit from other applications and improve your experience."
msgstr "Qiskit을 다른 응용 프로그램과 분리해서 설치하고 사용자 경험을 증진시키기 위해서 Python을 가상 환경에 설치하는 것을 추천한다."

#: ../../getting_started.rst:23
msgid "The simplest way to use environments is by using the ``conda`` command, included with Anaconda. A Conda environment allows you to specify a specific version of Python and set of libraries. Open a terminal window in the directory where you want to work."
msgstr "가상 환경을 사용하기 위한 가장 손쉬운 방법은 아나콘다(Anaconda) 에 포함되어 있는 ``conda`` 명령어를 사용하는 것이다. 콘다(Conda) 환경은 특정 버전의 파이썬이나 라이브러리 등을 선택할 수 있게 해준다. 작업하고자 하는 디렉토리에서 터미널 창을 연다."

#: ../../getting_started.rst:28
msgid "It is preferred that you use the Anaconda prompt installed with Anaconda. All you have to do is create a virtual environment inside Anaconda and activate the environment. These commands can be run in the Anaconda prompt irrespective of Windows or Linux machine."
msgstr "아나콘다 (Anaconda) 와 함께 설치된 아나콘다 프롬프트를 사용하는 것을 권장한다. 아나콘다 내에 가상 환경을 만들고, 이 환경을 활성화하기만 하면 된다. 이 명령어들은 윈도우/리눅스인지에 상관없이 아나콘다 프롬프트에서 실행할 수 있다."

#: ../../getting_started.rst:32
msgid "Create a minimal environment with only Python installed in it."
msgstr "Python만 설치된 최소 환경을 작성한다."

#: ../../getting_started.rst:38
msgid "Activate your new environment."
msgstr "새로운 환경을 활성화하라."

#: ../../getting_started.rst:45
msgid "Next, install the Qiskit package."
msgstr "그런 다음 Qiskit 패키지를 설치한다."

#: ../../getting_started.rst:51
msgid "If the packages were installed correctly, you can run ``conda list`` to see the active packages in your virtual environment."
msgstr "만약 패키지가 제대로 설치되었다면, ``conda list`` 명령어를 실행하여 현재 가상 환경에서 설치된 패키지를 볼 수 있다."

#: ../../getting_started.rst:54
msgid "If you intend to use visualization functionality or Jupyter notebooks it is recommended to install Qiskit with the extra ``visualization`` support:"
msgstr "시각화 기능 또는 Jupyter 노트북을 사용하려는 경우 추가 ``visualization`` 을 사용하여 Qiskit을 설치하는 것이 좋다."

#: ../../getting_started.rst:61
msgid "It is worth pointing out that if you're a zsh user (which is the default shell on newer versions of macOS), you'll need to put ``qiskit[visualization]`` in quotes:"
msgstr "Zsh 사용자 (최신 버전의 macOS 기본 쉘) 인 경우 ``qiskit[visualization]`` 을 따옴표로 묶어야 한다:"

#: ../../getting_started.rst
msgid "Start on the cloud"
msgstr "클라우드에서 시작하기"

#: ../../getting_started.rst:71
msgid "The following cloud vendors have Qiskit pre-installed in their environments:"
msgstr "다음의 클라우드 환경을 이용하면 별도의 설치 없이 Qiskit을 사용할 수 있다."

#: ../../getting_started.rst
msgid "Install from source"
msgstr "소스 코드로부터 설치"

#: ../../getting_started.rst:103
msgid "Installing the elements from source allows you to access the most recently updated version of Qiskit instead of using the version in the Python Package Index (PyPI) repository. This will give you the ability to inspect and extend the latest version of the Qiskit code more efficiently."
msgstr "소스 코드로부터 구성 요소를 설치하면 PyPI (Python Package Index) 저장소에 있는 버전을 사용하는 대신 가장 최근에 업데이트된 Qiskit 버전에 액세스할 수 있다. 이렇게 하면 Qiskit 코드의 최신 버전을 보다 효율적으로 검사하고 확장할 수 있다."

#: ../../getting_started.rst:108
msgid "When installing the elements and components from source, by default their ``development`` version (which corresponds to the ``master`` git branch) will be used, as opposed to the ``stable`` version (which contains the same codebase as the published ``pip`` packages). Since the ``development`` versions of an element or component usually include new features and changes, they generally require using the ``development`` version of the rest of the items as well."
msgstr "소스의 요소 및 구성 요소를 설치할 때 기본적으로 안정된 ``stable`` 버전 (공개된 ``pip`` 패키지들과 동일한 코드베이스를 포함한다)이 아니라 개발 ``development`` 버전(마스터 ``master`` 깃 브랜치에 해당한다)이 사용된다. 요소나 구성 요소의 ``development`` 버전은 대개 새로운 특징들과 변화들을 포함하기 때문에 일반적으로 나머지 항목들도 ``development`` 버전을 사용해야 한다."

#: ../../getting_started.rst:117
msgid "The Terra and Aer packages both require a compiler to build from source before you can install. Ignis, Aqua, and the IBM Quantum Provider backend do not require a compiler."
msgstr "Terra 및 Aer 패키지에는 설치하기 전에 소스에서 빌드하는 데 필요한 컴파일러가 필요하다. Ignis, Aqua 및 IBM Quantum Provider 백엔드는 컴파일러를 필요로 하지 않는다."

#: ../../getting_started.rst:121
msgid "Installing elements from source requires the following order of installation to prevent installing versions of elements that may be lower than those desired if the ``pip`` version is behind the source versions:"
msgstr "소스 코드로 부터 구성 요소를 설치하려면 다음과 같은 설치 순서가 필요하며 ``pip`` 버전이 소스 버전 뒤에 있는 경우에는 원하는구성 요소보다 낮을 수 있는 요소의 버전을 설치하지 않아도 된다."

#: ../../getting_started.rst:125
msgid ":ref:`qiskit-terra <install-qiskit-terra>`"
msgstr ":ref:`qiskit-terra <install-qiskit-terra>`"

#: ../../getting_started.rst:126
msgid ":ref:`qiskit-aer <install-qiskit-aer>`"
msgstr ":ref:`qiskit-aer <install-qiskit-aer>`"

#: ../../getting_started.rst:127
msgid ":ref:`qiskit-ignis <install-qiskit-ignis>`"
msgstr ":ref:`qiskit-ignis <install-qiskit-ignis>`"

#: ../../getting_started.rst:128
msgid ":ref:`qiskit-ibmq-provider <install-qiskit-ibmq-provider>` (if you want to connect to the IBM Quantum devices or online simulator)"
msgstr ":ref:`qiskit-ibmq-provider <install-qiskit-ibmq-provider>` (만약 IBM Quantum 장치나 온라인 시뮬레이터 장치에 접속하려면)"

#: ../../getting_started.rst:132
msgid "To work with several components and elements simultaneously, use the following steps for each element."
msgstr "몇몇 개의 구성 요소나 요소를 동시에 사용하고자 한다면 각각의 요소에 대해 다음 단계를 거치도록 하라."

#: ../../getting_started.rst:137
msgid "Due to the use of namespace packaging in Python, care must be taken in how you install packages. If you're planning to install any element from source, do not use the ``qiskit`` meta-package. Also, follow this guide and use a separate virtual environment for development. If you do choose to mix an existing installation with your development, refer to https://github.com/pypa/sample-namespace-packages/blob/master/table.md for the set of combinations of installation methods that work together."
msgstr "Python에서 명칭 공간의 패키지 사용법 때문에 패키지를 설치할 때 주의를 기울여야 한다. 만약 소스로부터 어떤 요소를 설치하고자 할 때, ``Qiskit`` 메타-패키지를 사용하지 말라. 또한 이 가이드를 따라 개발을 위해 따로 마련한 가상 환경을 이용하라. 만약 개발을 위해 이미 존재하고 있는 설치 패키지와 섞어서 사용하기 원한다면, 함께 사용할 수 있는 설치 방법의 조합을 설명한 이 문서 (https://github.com/pypa/sample-namespace-packages/blob/master/table.md)를 참조하라."

#: ../../getting_started.rst:160
msgid "Installing from source requires that you have a C++ compiler on your system that supports C++11."
msgstr "소스 코드에서 설치하려면 C++11을 지원하는 시스템에서 C++ 컴파일러가 있어야 한다."

#: ../../getting_started.rst
msgid "Compiler for Linux"
msgstr "리눅스용 컴파일러"

#: ../../getting_started.rst:166
msgid "On most Linux platforms, the necessary GCC compiler is already installed."
msgstr "대부분의 Linux 플랫폼에서는 필요한 GCC 컴파일러가 이미 설치되어 있다."

#: ../../getting_started.rst
msgid "Compiler for macOS"
msgstr "맥오에스용 컴파일러"

#: ../../getting_started.rst:170
msgid "If you use macOS, you can install the Clang compiler by installing XCode. Check if you have XCode and Clang installed by opening a terminal window and entering the following."
msgstr "만약 macOS를 사용하고 있다면, XCode를 설치하면 Clang 컴파일러를 설치할 수 있다. XCode와 Clang이 설치되어 있는지 확인하기 위해서는 터미널를 열고 다음 명령어를 입력하라."

#: ../../getting_started.rst:178
msgid "Install XCode and Clang by using the following command."
msgstr "다음 명령어를 사용하여 XCode와 Clang을 설치한다."

#: ../../getting_started.rst
msgid "Compiler for Windows"
msgstr "Windows용 컴파일러"

#: ../../getting_started.rst:186
msgid "On Windows, it is easiest to install the Visual C++ compiler from the `Build Tools for Visual Studio 2019 <https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2019>`__. You can instead install Visual Studio version 2015 or 2017, making sure to select the options for installing the C++ compiler."
msgstr "Windows에서는 `Build Tools for Visual Studio 2019 <https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2019>`__ 에서 비주얼 C++ 컴파일러를 설치하기가 가장 쉽다. Visual Studio 버전 2015 또는 2017을 대신 설치하여 C++ 컴파일러 설치 옵션을 선택할 수도 있다."

#: ../../getting_started.rst:192
msgid "Once the compilers are installed, you are ready to install Qiskit Terra."
msgstr "일단 컴파일러가 설치되면, Qiskit Terra를 설치할 준비가 된 것이다."

#: ../../getting_started.rst:194
msgid "Clone the Terra repository."
msgstr "Terra 코드 저장소를 복제한다."

#: ../../getting_started.rst:200
msgid "Cloning the repository creates a local folder called ``qiskit-terra``."
msgstr "저장소를 복제하면 ``qiskit-terra`` 라고 하는 로컬 폴더가 작성된다."

#: ../../getting_started.rst:206
msgid "Install the Python requirements libraries from your ``qiskit-terra`` directory."
msgstr "``qiskit-terra`` 디렉토리에서 Python 요구사항 라이브러리를 설치한다."

#: ../../getting_started.rst:212
msgid "If you want to run tests or linting checks, install the developer requirements."
msgstr "만약 테스트 코드를 실행하거나 철자법 검사를 하고자 한다면, 개발자 요구사항 라이브러리를 설치하라."

#: ../../getting_started.rst:218
msgid "Install ``qiskit-terra``."
msgstr "``qiskit-terra`` 를 설치."

#: ../../getting_started.rst:224
msgid "If you want to install it in editable mode, meaning that code changes to the project don't require a reinstall to be applied, you can do this with:"
msgstr "편집 가능한 모드(프로젝트에서 코드를 변경할 때 재설치할 필요 없는 경우)로 설치하려면 다음의 명령어를 사용하여 설치하면 된다."

#: ../../getting_started.rst:231
msgid "You can then run the code examples after installing Terra. You can run the example with the following command."
msgstr "Terra를 설치한 이후에 예제 코드들을 실행해 볼 수 있다. 이를 위해서는 다음 명령어를 실행한다."

#: ../../getting_started.rst:241
msgid "If you do not intend to install any other components, qiskit-terra will emit a ``RuntimeWarning`` warning that both qiskit-aer and qiskit-ibmq-provider are not installed. This is done because users commonly intend to use the additional elements, but do not realize they are not installed, or that the installation of either Aer or the IBM Quantum Provider failed for some reason. If you wish to suppress these warnings, add::"
msgstr "다른 구성 요소를 설치하지 않으려는 경우 Qiskit-terra는 Qiskit-aer와 Qiskit-ibmq 제공자가 모두 설치되지 않았다는 ``RuntimeWarning`` 경고를 표시한다. 이는 사용자가 일반적으로 추가 요소를 사용하려고 하지만, 추가 요소가 설치되지 않았거나, Aer 또는 IBM Quantum Provider의 설치가 어떤 이유로 실패했다는 것을 인식하지 못하기 때문이다. 이러한 경고를 표시하지 않으려면 다음을 추가한다."

#: ../../getting_started.rst:253
msgid "before any ``qiskit`` imports in your code. This will suppress the warning about the missing qiskit-aer and qiskit-ibmq-provider, but will continue to display any other warnings from qiskit or other packages."
msgstr "위의 코드는 ``qiskit`` 을 가져오는 부분 전에 추가되어야 한다. 이렇게 하면 누락된 qiskit-aer 및 qiskit-ibmq 제공자에 대한 경고가 표시되지 않지만, qiskit 또는 다른 패키지에 대한 경고들은 계속 표시될 것이다."

#: ../../getting_started.rst:263
msgid "Clone the Aer repository."
msgstr "Aer 저장소를 복제한다."

#: ../../getting_started.rst:269
msgid "Install build requirements."
msgstr "빌드 요구사항을 설치한다."

#: ../../getting_started.rst:275
msgid "After this, the steps to install Aer depend on which operating system you are using. Since Aer is a compiled C++ program with a Python interface, there are non-Python dependencies for building the Aer binary which can't be installed universally depending on operating system."
msgstr "이 후 Aer를 설치하는 단계는 사용 중인 운영 체제에 따라 달라진다. Aer는 Python 인터페이스를 갖춘 컴파일된 C++ 프로그램이기 때문에 운영체제에 따라 보편적으로 설치가 불가능한 Aer 바이너리를 구축하기 위한 non-Python 의존성이 존재한다."

#: ../../getting_started.rst:283 ../../getting_started.rst:347
msgid "Install compiler requirements."
msgstr "컴파일러 요구사항을 설치한다."

#: ../../getting_started.rst:285
msgid "Building Aer requires a C++ compiler and development headers."
msgstr "Aer 를 빌드하려면 C++ 컴파일러와 개발 헤더들이 필요하다."

#: ../../getting_started.rst:287 ../../getting_started.rst:302
msgid "If you're using Fedora or an equivalent Linux distribution, install using:"
msgstr "Fedora 또는 동등한 Linux 배포판을 사용하는 경우에는 다음을 사용하여 설치한다."

#: ../../getting_started.rst:294 ../../getting_started.rst:309
msgid "For Ubuntu/Debian install it using:"
msgstr "Ubuntu/Debian 에서 다음을 사용하여 설치한다:"

#: ../../getting_started.rst:300
msgid "Install OpenBLAS development headers."
msgstr "OpenBLAS 개발 헤더를 설치한다."

#: ../../getting_started.rst:318
msgid "Install dependencies."
msgstr "종속 라이브러리 설치."

#: ../../getting_started.rst:320
msgid "To use the `Clang <https://clang.llvm.org/>`__ compiler on macOS, you need to install an extra library for supporting `OpenMP <https://www.openmp.org/>`__.  You can use `brew <https://brew.sh/>`__ to install this and other dependencies."
msgstr "MacOS에서 `Clang <https://clang.llvm.org/>`__ 컴파일러를 사용하려면 `OpenMP <https://www.openmp.org/>`__ 을 지원하는 추가 라이브러리를 설치해야 한다. `brew <https://brew.sh/>`__ 를 사용하여 이와 기타 종속 프로그램들을 설치할 수 있다."

#: ../../getting_started.rst:328
msgid "Then install a BLAS implementation; `OpenBLAS <https://www.openblas.net/>`__ is the default choice."
msgstr "다음으로 BLAS 구현을 설치한다; `OpenBLAS <https://www.openblas.net/>`__ 가 기본 선택이다."

#: ../../getting_started.rst:335
msgid "Next, install ``Xcode Command Line Tools``."
msgstr "다음으로 ``Xcode Command Line Tools`` 을 설치한다."

#: ../../getting_started.rst:343
msgid "On Windows you need to use `Anaconda3 <https://www.anaconda.com/distribution/#windows>`__ or `Miniconda3 <https://docs.conda.io/en/latest/miniconda.html>`__ to install all the dependencies."
msgstr "Windows에서는 모든 종속 프로그램/라이브러리 를 설치하기 위해 `Anaconda3 <https://www.anaconda.com/distribution/#windows>`__ 나 `Miniconda3 <https://docs.conda.io/en/latest/miniconda.html>`__ 를 사용한다."

#: ../../getting_started.rst:353
msgid "Qiskit Aer is a high performance simulator framework for quantum circuits. It provides `several backends <apidoc/aer_provider.html#simulator-backends>`__ to achieve different simulation goals."
msgstr "Qiskit Aer는 양자 회로를 위한 고성능 시뮬레이터 프레임워크이다. 이는 여러가지 시뮬레이션 목적을 이루기 위해서 `다양한 백엔드 <apidoc/aer_provider.html#simulator-backends>`__ 들을 제공한다."

#: ../../getting_started.rst:362
msgid "Build and install qiskit-aer directly"
msgstr "qiskit-aer를 직접 빌드하고 설치한다."

#: ../../getting_started.rst:364
msgid "If you have pip <19.0.0 installed and your environment doesn't require a custom build, run:"
msgstr "Pip 버전 19.0.0 이하를 설치하였고, 본인의 환경이 사용자 빌드를 요구하지 않으면 다음을 실행한다:"

#: ../../getting_started.rst:372
msgid "This will both build the binaries and install Aer."
msgstr "이렇게 하면 바이너리가 빌드되고 Aer가 설치된다."

#: ../../getting_started.rst:374
msgid "Alternatively, if you have a newer pip installed, or have some custom requirement, you can build a Python wheel manually."
msgstr "또는 더 최신인 pip가 설치되어 있거나 사용자 지정 요구 사항이 있는 경우 Python 휠을 수동으로 빌드할 수 있다."

#: ../../getting_started.rst:382
msgid "If you need to set a custom option during the wheel build, refer to :ref:`aer_wheel_build_options`."
msgstr "휠 빌드 중에 사용자 지정 옵션을 설정해야 하는 경우 :ref:`aer_wheel_build_options` 를 참조하라."

#: ../../getting_started.rst:385
msgid "After you build the Python wheel, it will be stored in the ``dist/`` dir in the Aer repository. The exact version will depend"
msgstr "Python 휠을 만든 후에는 Aer 저장소의 ``dist/`` dir에 저장된다. 정확한 버전은"

#: ../../getting_started.rst:393
msgid "The exact filename of the output wheel file depends on the current version of Aer under development."
msgstr "출력 휠 파일의 정확한 파일 이름은 개발 중인 Aer의 현재 버전에 의존한다."

#: ../../getting_started.rst:402
msgid "The Aer build system uses `scikit-build <https://scikit-build.readthedocs.io/en/latest/index.html>`__ to run the compilation when building it with the Python interface. It acts as an interface for `setuptools <https://setuptools.readthedocs.io/en/latest/>`__ to call `CMake <https://cmake.org/>`__ and compile the binaries for your local system."
msgstr "Aer 빌드 시스템은 Python 인터페이스로 컴파일을 빌드할 때 `scikit-build <https://scikit-build.readthedocs.io/en/latest/index.html>`__ 을 사용하여 컴파일을 실행한다. 이것은 `setuptools <https://setuptools.readthedocs.io/en/latest/>`__ 의 인터페이스 역할을 하여 `CMake <https://cmake.org/>`__ 를 호출하고 로컬 시스템의 바이너리를 컴파일한다."

#: ../../getting_started.rst:407
msgid "Due to the complexity of compiling the binaries, you may need to pass options to a certain part of the build process. The way to pass variables is:"
msgstr "바이너리를 컴파일하는 복잡성으로 인해 빌드 프로세스의 특정 부분에 옵션을 전달해야 할 수 있다. 변수를 패스하는 방법은 다음과 같다."

#: ../../getting_started.rst:414
msgid "where the elements within square brackets `[]` are optional, and ``skbuild_opts``, ``cmake_opts``, ``build_tool_opts`` are to be replaced by flags of your choice. A list of *CMake* options is available here: https://cmake.org/cmake/help/v3.6/manual/cmake.1.html#options. For example, you could run something like:"
msgstr "여기서 대괄호 `[]` 안에 있는 요소들은 선택적이며 ``skbuild_opts``, ``cmake_opts``, ``build_tool_opts`` 는 사용자의 선택에 대한 플래그로 대체된다. *CMake* 옵션 목록은 https://cmake.org/cmake/help/v3.6/manual/cmake.1.html#options 에서 사용할 수 있다. 예를 들어, 다음과 같이 실행할 수 있다:"

#: ../../getting_started.rst:424
msgid "This is passing the flag `-j8` to the underlying build system (which in this case is `Automake <https://www.gnu.org/software/automake/>`__), telling it that you want to build in parallel using 8 processes."
msgstr "이것은 기본 빌드 시스템(이 경우 `Automake <https://www.gnu.org/software/automake/>`__)에 플래그 `-j8` 을 전달하여 8개의 프로세스를 사용하여 병렬로 빌드하고 싶다는 것을 알려준다."

#: ../../getting_started.rst:428
msgid "For example, a common use case for these flags on linux is to specify a specific version of the C++ compiler to use (normally if the default is too old):"
msgstr "예를 들어, Linux에서 이러한 플래그에 대한 일반적인 사용 사례는 (기본값이 너무 오래된 경우) 사용할 C++ 컴파일러의 특정 버전을 지정하는 것이다:"

#: ../../getting_started.rst:436
msgid "which will tell CMake to use the g++-7 command instead of the default g++ when compiling Aer."
msgstr "위의 코드는 Aer를 컴파일할 때 기본 g++ 대신 g++-7 명령어를 사용하도록 CMake에게 지시한다."

#: ../../getting_started.rst:439
msgid "Another common use case for this, depending on your environment, is that you may need to specify your platform name and turn off static linking."
msgstr "다른 이의 흔한 활용 예로써 환경에 따라 플랫폼 이름을 지정하고 정적 연결을 해제해야 할 수도 있다."

#: ../../getting_started.rst:447
msgid "Here ``--plat-name`` is a flag to setuptools, to specify the platform name to use in the package metadata, ``-DSTATIC_LINKING`` is a flag for using CMake to disable static linking, and ``-j8`` is a flag for using Automake to use 8 processes for compilation."
msgstr "여기서 ``--plat-name`` 은 패키지 메타데이터에 사용할 플랫폼 이름을 지정하기 위한, setuptools를 위한 플래그이다. ``-DSTATIC_LINKING`` 은 CMake를 사용하여 정적 연결을 비활성화하는 플래그이며, ``-j8`` 은 오토메이크를 사용하여 8개의 프로세스를 컴파일에 사용하는 플래그이다."

#: ../../getting_started.rst:452
msgid "A list of common options depending on platform are:"
msgstr "플랫폼에 따라 일반적으로 사용되는 옵션의 목록은 다음과 같다."

#: ../../getting_started.rst:455
msgid "Platform"
msgstr "플랫폼"

#: ../../getting_started.rst:455
msgid "Tool"
msgstr "도구"

#: ../../getting_started.rst:455
msgid "Option"
msgstr "옵션"

#: ../../getting_started.rst:455
msgid "Use Case"
msgstr "활용 예시"

#: ../../getting_started.rst:457
msgid "All"
msgstr "전체"

#: ../../getting_started.rst:457
msgid "Automake"
msgstr "오토메이크(Automake)"

#: ../../getting_started.rst:457
msgid "-j"
msgstr "-j"

#: ../../getting_started.rst:457
msgid "Followed by a number, sets the number of processes to use for compilation."
msgstr "숫자와 함께 사용되어서, 컴파일 시 사용할 프로세서의 수를 결정한다."

#: ../../getting_started.rst:460
msgid "Linux"
msgstr "Linux"

#: ../../getting_started.rst:460 ../../getting_started.rst:467
msgid "CMake"
msgstr "CMake"

#: ../../getting_started.rst:460
msgid "-DCMAKE_CXX_COMPILER"
msgstr "-DCMAKE_CXX_COMPILER"

#: ../../getting_started.rst:460
msgid "Used to specify a specific C++ compiler; this is often needed if your default g++ is too old."
msgstr "특정 C++ 컴파일러를 명시하기 위해 사용된다. 이 옵션은 보통 기본 g++ 컴파일러가 너무 오래 되었을 때 사용된다."

#: ../../getting_started.rst:464 ../../getting_started.rst:467
msgid "OSX"
msgstr "OSX"

#: ../../getting_started.rst:464
msgid "setuptools"
msgstr "셋업툴 (setuptools)"

#: ../../getting_started.rst:464
msgid "--plat-name"
msgstr "--plat-name"

#: ../../getting_started.rst:464
msgid "Used to specify the platform name in the output Python package."
msgstr "출력 Python 패키지에서 플랫폼 이름을 명시하기 위해 사용된다."

#: ../../getting_started.rst:467
msgid "-DSTATIC_LINKING"
msgstr "-DSTATIC_LINKING"

#: ../../getting_started.rst:467
msgid "Used to specify whether or not static linking should be used."
msgstr "정적 연결을 사용할지 안 사용할지 결정하는데 사용된다."

#: ../../getting_started.rst:472
msgid "Some of these options are not platform-specific. These particular platforms are listed because they are commonly used in the environment. Refer to the tool documentation for more information."
msgstr "이러한 몇몇 옵션들은 플랫폼에 좌우되지 않는다. 이러한 특정 플랫폼들은 환경에서 일반적으로 사용되기 때문에 여기 나열되었다. 더 많은 정보를 위해서는 도구 문서를 참조하라."

#: ../../getting_started.rst:482
msgid "Clone the Ignis repository."
msgstr "Ignis 코드 저장소를 복제한다."

#: ../../getting_started.rst:488
msgid "Cloning the repository creates a local directory called ``qiskit-ignis``."
msgstr "저장소를 복제하면 ``qiskit-ignis`` 라는 이름의 로컬 디렉토리가 생성된다."

#: ../../getting_started.rst:494
msgid "If you want to run tests or linting checks, install the developer requirements. This is not required to install or use the qiskit-ignis package when installing from source."
msgstr "만약 테스트를 하거나 철자법 검사를 하려면, 개발자 필수 요소를 설치하라. 이것은 소스로 부터 qiskit-ignis 패키지를 설치하거나 사용할 때는 필요하지 않다."

#: ../../getting_started.rst:502
msgid "Install Ignis."
msgstr "Ignis 설치하기."

#: ../../getting_started.rst:508 ../../getting_started.rst:547
msgid "If you want to install it in editable mode, meaning that code changes to the project don't require a reinstall to be applied:"
msgstr "수정 가능한 모드로 설치하고 싶은 경우, 즉 프로젝트의 코드가 변화하였을 때 적용시키기 위해 재설치가 필요 없는 경우:"

#: ../../getting_started.rst:521
msgid "Clone the qiskit-ibmq-provider repository."
msgstr "qiskit-ibmq-provider 코드 저장소를 복제한다."

#: ../../getting_started.rst:527
msgid "Cloning the repository creates a local directory called ``qiskit-ibmq-provider``."
msgstr "저장소 복제는 ``qiskit-ibmq-provider`` 이라는 이름의 로컬 디렉토리를 생성한다."

#: ../../getting_started.rst:533
msgid "If you want to run tests or linting checks, install the developer requirements. This is not required to install or use the qiskit-ibmq-provider package when installing from source."
msgstr "만약 테스트를 하거나 스타일(linting) 검사를 하려면, 개발자 필수 요소를 설치하라. 이때 소스로부터 설치하는 경우에는 qiskit-ibmq-provider 패키지를 설치하거나 사용할 필요가 없다."

#: ../../getting_started.rst:541
msgid "Install qiskit-ibmq-provider."
msgstr "qiskit-ibmq-provider 설치하기."

#: ../../getting_started.rst:555
msgid "Platform Support"
msgstr "플랫폼 지원"

#: ../../getting_started.rst:557
msgid "Qiskit strives to support as many platforms as possible, but due to limitations in available testing resources and platform availability, not all platforms can be supported. Platform support for Qiskit is broken into 3 tiers with different levels of support for each tier. For platforms outside these, Qiskit is probably still installable, but it's not tested and you will have to build Qiskit (and likely Qiskit's dependencies) from source."
msgstr "Qiskit은 최대한 많은 플랫폼을 지원하기 위해 노력하지만, 사용 가능한 테스트 자원 및 플랫폼 가용성의 한계로 인해 모든 플랫폼을 지원할 수는 없다. Qiskit에 대한 플랫폼 지원은 3개의 계층으로 나뉘며 각 계층마다 지원 수준이 다르다. 이러한 플랫폼 이외의 플랫폼에서 Qiskit은 여전히 설치 가능하지만 테스트되지 않았으며 Qiskit(및 Qiskit의 종속 항목) 을 소스로부터 가져와야 한다."

#: ../../getting_started.rst:564
msgid "Additionally, Qiskit only supports CPython. Running with other Python interpreters isn't currently supported."
msgstr "또한 Qiskit은 CPython만 지원한다. 다른 Python 인터프리터를 사용하는 것은 현재 지원되지 않는다."

#: ../../getting_started.rst:568
msgid "Tier 1"
msgstr "계층 1"

#: ../../getting_started.rst:570
msgid "Tier 1 supported platforms are fully tested upstream as part of the development processes to ensure any proposed change will function correctly. Pre-compiled binaries are built, tested, and published to PyPI as part of the release process. These platforms are expected to be installable with just a functioning Python environment as all dependencies are available on these platforms."
msgstr "계층 1 지원 플랫폼은 제안된 변경사항이 올바르게 작동하는지 확인하기 위해 개발 프로세스의 일부로 테스트된다. 사전 컴파일된 바이너리는 릴리스 프로세스의 일부로 빌드, 테스트 및 PyPI에 공개된다. 이러한 플랫폼은 모든 종속 프로그램을 사용할 수 있기 때문에 작동하는 Python 환경만으로 설치가 가능할 것으로 예상된다."

#: ../../getting_started.rst:576
msgid "Tier 1 platforms are currently:"
msgstr "계층 1 플랫폼은 다음과 같다:"

#: ../../getting_started.rst:578
msgid "Linux x86_64 (distributions compatible with the `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ packaging specification."
msgstr ""

#: ../../getting_started.rst:581
msgid "macOS x86_64 (10.9 or newer)"
msgstr "macOS x86_64 (10.9 또는 최신 버전)"

#: ../../getting_started.rst:582
msgid "Windows 64 bit"
msgstr "윈도우 64비트"

#: ../../getting_started.rst:585
msgid "Tier 2"
msgstr "계층 2"

#: ../../getting_started.rst:587
msgid "Tier 2 platforms are not tested upstream as part of development process. However, pre-compiled binaries are built, tested, and published to PyPI as part of the release process and these packages can be expected to be installed with just a functioning Python environment."
msgstr "계층 2 플랫폼은 개발 프로세스의 일부로 테스트를 거치지 않는다. 그러나 사전 컴파일된 바이너리는 릴리스 프로세스의 일부로 빌드, 테스트 및 PyPI에 공개되며 이러한 패키지는 단지 작동하는 Python 환경에서 설치가 가능할 것으로 예상된다."

#: ../../getting_started.rst:592
msgid "Tier 2 platforms are currently:"
msgstr "계층 2 플랫폼은 다음과 같다:"

#: ../../getting_started.rst:594
msgid "Linux i686 (distributions compatible with the `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ packaging specification) for Python < 3.10"
msgstr ""

#: ../../getting_started.rst:597
msgid "Windows 32 bit for Python < 3.10"
msgstr "Python <3.10용 윈도우 32비트"

#: ../../getting_started.rst:598
msgid "Linux aarch64 (distributions compatible with the `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ packaging specification)"
msgstr "Linux aarch64 (패키징 사양과 호환되는 배포판 `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`)"

#: ../../getting_started.rst:603
msgid "Tier 3"
msgstr "계층 3"

#: ../../getting_started.rst:605
msgid "Tier 3 platforms are not tested upstream as part of the development process.  Pre-compiled binaries are built and published to PyPI as part of the release process, with no testing at all. They may not be installable with just a functioning Python environment and may require a C/C++ compiler or additional programs to build dependencies from source as part of the installation process. Support for these platforms are best effort only."
msgstr "계층 3 플랫폼은 개발 프로세스의 일부로 테스트되지 않는다. 사전 컴파일된 바이너리는 테스트 없이 릴리스 프로세스의 일부로 PyPI에 빌드되고 공개된다. 단순히 작동하는 Python 환경으로는 설치할 수 없으며, 설치 프로세스의 일부로 소스의 종속 프로그램을 빌드하기 위해 C/C++ 컴파일러 또는 추가 프로그램이 필요할 수 있다. 이러한 플랫폼에 대한 지원은 최선의 노력이다."

#: ../../getting_started.rst:612
msgid "Tier 3 platforms are currently:"
msgstr "계층 3 플랫폼은 다음과 같다:"

#: ../../getting_started.rst:614
msgid "Linux i686 (distributions compatible with the `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ packaging specification) for Python >= 3.10"
msgstr "Python >= 3.10용 Linux i686 (`manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ 패키징 사양과 호환되는 배포판)"

#: ../../getting_started.rst:617
msgid "Windows 32bit for Python >= 3.10"
msgstr "Python >=3.10용 윈도우 32비트"

#: ../../getting_started.rst:618
msgid "macOS arm64 (10.15 or newer)"
msgstr "macOS arm64 (10.15 또는 최신 버전)"

#: ../../getting_started.rst:621
msgid "Ready to get going?..."
msgstr "시작할 준비가 다 되었다면..."

