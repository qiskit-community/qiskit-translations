msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-11 13:41+0000\n"
"PO-Revision-Date: 2020-10-11 14:27\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/development_strategy.po\n"
"X-Crowdin-File-ID: 7206\n"
"Language: ko_KR\n"

#: ../../development_strategy.rst:2
msgid "Development Strategy"
msgstr "개발 전략"

#: ../../development_strategy.rst:7
msgid "Versioning"
msgstr "버전"

#: ../../development_strategy.rst:9
msgid "The Qiskit project is made up of several elements each performing different functionality. Each is independently useful and can be used on their own, but for convenience we provide this repository and meta-package to provide a single entrypoint to install all the elements at once. This is to simplify the install process and provide a unified interface to end users. However, because each Qiskit element has it's own releases and versions some care is needed when dealing with versions between the different repositories. This document outlines the guidelines for dealing with versions and releases of both Qiskit elements and the meta-package."
msgstr "키스킷 프로젝트는 각각 다른 기능을 수행하는 몇몇 요소들로 구성되어 있다. 각각은 독립적으로 유용하며 따로 사용될 수 있다. 그러나 우리는 편의를 위해 모든 요소들을 한번에 설치할 수 있도록 하나의 진입점으로서 이 코드 저장소와 메타 패키지들 제공한다. 이는 설치 과정을 간단화하고 최종 사용자들에게 통일된 인터페이스를 제공하기 위함이다. 하지만, 각각의 키스킷 요소들은 자신만의 배포 버전을 가지고 있기 때문에 다른 코드 저장소간의 버전을 다룰 때에는 주의가 필요하다. 이 문서는 키스킷 구성 요소들과 메타 패키지의 버전과 배포본을 다룰때 필요한 가이드라인을 설명한다."

#: ../../development_strategy.rst:19
msgid "For the rest of this guide the standard Semantic Versioning nomenclature will be used of: ``Major.Minor.Patch`` to refer to the different components of a version number. For example, if the version number was ``0.7.1``, then the major version is ``0``, the minor version ``7``, and the patch version ``1``."
msgstr "이 안내서의 나머지 부분에서 표준 의미상의 버전 명명법은 ``주 버전.부 버전.패치버전``으로 표기된다. 예를 들어 버전 번호가 ``0.7.1``이라면 주 버전은 ``0``이고 부 버전 ``7``이고 패치 버전은 ``1``이다."

#: ../../development_strategy.rst:26
msgid "Meta-package Version"
msgstr "메타-패키지 버전"

#: ../../development_strategy.rst:28
msgid "The Qiskit meta-package version is an independent value that is determined by the releases of each of the elements being tracked. Each time we push a release to a tracked component (or add an element) the meta-package requirements, and version will need to be updated and a new release published. The timing should be coordinated with the release of elements to ensure that the meta-package releases track with element releases."
msgstr "키스킷 메타-패키지 버전은 각각의 구성 요소들의 배포본에 따라 결정되는 독립적인 값이다. 매번 우리가 어떤 요소를 추가하거나 추적되는 요소를 발표하면 메타-패키지의 필요 항목이나 버전은 새로 업데이트 되야 하고 새 버전이 발표되게 된다. 메타-패키지 공개 버전이 각각의 구성 요소와 일치하도록 일정을 조정하여서 발표를 한다."

#: ../../development_strategy.rst:36
msgid "Adding New Elements"
msgstr "새 구성요소 추가하기"

#: ../../development_strategy.rst:38
msgid "When a new Qiskit element is being added to the meta-package requirements, we need to increase the **Minor** version of the meta-package."
msgstr "새로운 키스킷 구성 요소가 메타-패키지 필요항목에 추가되면, 우리는 **부 버전**의 숫자를 올려야 한다."

#: ../../development_strategy.rst:41
msgid "For example, if the meta-package is tracking 2 elements ``qiskit-aer`` and ``qiskit-terra`` and it's version is ``0.7.4``. Then we release a new element ``qiskit-ignis`` that we intend to also have included in the meta-package. When we add the new element to the meta-package we increase the version to ``0.8.0``."
msgstr "예를 들어, 메타-패키지가 ``키스킷-아르`` 와 ``키스킷-테라``를 가지고 있으며 버전이 ``0.7.4``라고 해보자. 그리고 만약 우리가 메타-패키지에 추가할 계획으로 새 구성요소 ``키스킷-이그니스``를 출시했다고 하자. 그러면 이 새 요소를 메타-패키지에 추가할 때 마지막 버전은 ``0.8.0``로 증가하게 된다."

#: ../../development_strategy.rst:49
msgid "Patch Version Increases"
msgstr "패치 버전 증가"

#: ../../development_strategy.rst:51
msgid "When any Qiskit element that is being already tracked by the meta-package releases a patch version to fix bugs in a release we need also bump the requirement in the setup.py and then increase the patch version of the meta-package."
msgstr "만약 어떤 키스킷 구성요소가 메타-패키지에 등록되어 있고 버그를 고치기 위해 패치 버전을 공개했다면, setup.py 파일에 있는 필요 항목을 고치고 메타-패키지의 패지 버전을 증가시켜야 한다."

#: ../../development_strategy.rst:56
msgid "For example, if the meta-package is tracking 3 elements ``qiskit-terra==0.8.1``, ``qiskit-aer==0.2.1``, and ``qiskit-ignis==0.1.4`` with the current version ``0.9.6``. When qiskit-terra release a new patch version to fix a bug ``0.8.2`` the meta-package will also need to increase it's patch version and release, becoming ``0.9.7``."
msgstr "예를 들어, 현재 ``0.9.6`` 버전을 가지고 있는 메타-패키지에 ``키스킷-테라 0.8.1 버전``, ``키스킷-아르 0.2.1 버전``, ``키스킷-이그니스 0.1.4 버전``이 등록되어 있다고 하자. 이 때 키스킷-테라 패키지에 버그를 고치기 위한 패치 버전 ``0.8.2``가 공개되었다면, 메타-패키지도 이에 따라 패치 버전을 증가시켜 버전 ``0.9.7``이 되어야 한다."

#: ../../development_strategy.rst:62
msgid "Additionally, there are occasionally packaging or other bugs in the meta-package itself that need to be fixed by pushing new releases. When those are encountered we should increase the patch version to differentiate it from the broken release. Do **not** delete the broken or any old releases from pypi in any situation, instead just increase the patch version and upload a new release."
msgstr "추가적으로 때때로 메타-패키지 자체에 버그가 있어서 이를 고치고 새 버전을 내놓아야 할 때가 있다. 이러한 경우가 발생하면, 이전의 불완전한 버전과 구별하기 위해 패치 버전을 증가시켜야 한다. 어떤 상황에서도 pypi에서 예전 버전 혹은 불완전한 버전을 **지우지 말라**. 대신 단순히 패치 버전을 증가시키고 새로운 버전을 업로드하라."

#: ../../development_strategy.rst:71
msgid "Minor Version Increases"
msgstr "부 버전 증가"

#: ../../development_strategy.rst:73
msgid "Besides adding a new element to the meta-package the minor version of the meta-package should also be increased anytime a minor version is increased in a tracked element."
msgstr "새로운 요소를 메타-패키지에 추가하는 것 이외에, 등록된 구성 요소의 부 버전이 올라갈 때 메타-패키지의 부 버전도 함께 증가해야 한다."

#: ../../development_strategy.rst:77
msgid "For example, if the meta-package is tracking 2 elements ``qiskit-terra==0.7.0`` and ``qiskit-aer==0.1.1`` and the current version is ``0.7.5``. When the ``qiskit-aer`` element releases ``0.2.0`` then we need to increase the meta-package version to be ``0.8.0`` to correspond to the new release."
msgstr "예를 들어, 메타-패키지가 ``0.7.5`` 버전이고 2개의 구성 요소 ``키스킷-테라 0.7.0 버전``과 ``키스킷-아르 0.1.1 버전``이 등록되어 있다고 하자. 이 때 ``키스킷-아르``의 버전이 ``0.2.0``으로 업데이트되면, 이에 맞추어 메타-패키지의 버전도 ``0.8.0``으로 올려주어야 한다."

#: ../../development_strategy.rst:84
msgid "Major Version Increases"
msgstr "주 버전 증가"

#: ../../development_strategy.rst:86
msgid "The major version is different from the other version number components. Unlike the other version number components, which are updated in lock step with each tracked element, the major version is only increased when all tracked versions are bumped (at least before ``1.0.0``). Right now all the elements still have a major version number component of ``0`` and until each tracked element in the meta-repository is marked as stable by bumping the major version to be ``>=1`` then the meta-package version should not increase the major version."
msgstr "주 버전은 다른 버전 구성요소들과는 다르다. 각각의 등록된 요소들과 연동해서 업데이트되는 다른 버전 숫자들과는 달리 주 버전은 모든 등록 요소가 한계에 다다랐을 때 (적어도 ``1.0.0`` 전에) 에만 증가하게 된다. 현재는 모든 구성 요소의 주 버전이 ``0``이며, 메타-패키지에 등록된 각각의 요소들이 주 버전이 ``>=1``로 되어 안정적이라고 판단되는 한, 메타-패키지의 주 버전은 올라가지 않는다."

#: ../../development_strategy.rst:94
msgid "The behavior of the major version number component tracking after when all the elements are at >=1.0.0 has not been decided yet."
msgstr "모든 구성 요소들의 버전이 1.0.0 이상이 될 경우 주 버전 번호가 어떻게 바뀌어야 할 지에 대해서는 아직 정해지지 않았다."

#: ../../development_strategy.rst:99
msgid "Qiskit Element Requirement Tracking"
msgstr "키스킷 구성 요소 필요조건 추적"

#: ../../development_strategy.rst:101
msgid "While not strictly related to the meta-package and Qiskit versioning how we track the element versions in the meta-package's requirements list is important. Each element listed in the setup.py should be pinned to a single version. This means that each version of Qiskit should only install a single version for each tracked element. For example, the requirements list at any given point should look something like::"
msgstr "메타-패키지와 키스킷의 버전이 엄격하게 연동되어 있지 않은 것과 별도로 메타-패키지의 필요 조건 항목들에 나타나는 구성 요소의 버전을 정확하게 추적하는 것은 중요하다. setup.py 파일에 나열된 각각의 구성 요소들은 단일 버전에 고정되어 있어야 한다. 이는 각각의 키스킷 버전은 등록된 구성 요소의 여러가지 버전 중 딱 한가지 버전만 설치해야 한다는 뜻이다. 예를 들어, 특정 버전의 경우 필요 조건 항목들은 다음과 같이 나타날 수 있다."

#: ../../development_strategy.rst:113
msgid "This is to aid in debugging, but also make tracking the versions across multiple elements more transparent."
msgstr "이것은 디버깅을 돕기도 하고, 또한 여러 구성 요소간에 버전을 추척하는 일을 좀 더 명확하게 해 준다."

#: ../../development_strategy.rst:116
msgid "It is also worth pointing out that the order we install the elements is critically important too. ``pip`` does not have a real dependency solver which means the installation order matters. So if there are overlapping requirements versions between elements or dependencies between elements we need to ensure that the order in the requirements list installs everything as expected. If the order needs to be change for some install time incompatibility it should be noted clearly."
msgstr "또한 우리가 구성 요소들을 설치하는 순서가 매우 중요하다. ``pip``는 설치하는 순서가 중요한 의미를 지니는 진정한 의미의 의존도 해결 모듈을 가지고 있지 않다. 그렇기 때문에 구성 요소나 각각의 요소간에 의존도에 관한 필요 조건 버전이 중복되게 되면, 우리는 설치 순서가 의도했던 대로 맞추어 지는지 확인해 주어야 한다. 만약 설치시 호환성 문제로 설치 순서가 바뀌어야 한다면, 이를 명확하게 적어두어야 한다."

#: ../../development_strategy.rst:125
msgid "Community Extensions"
msgstr "커뮤니티 확장 기능"

#: ../../development_strategy.rst:127
msgid "Qiskit has been designed with modularity in mind. It is extensible in many different ways; on the page, we highlight the ways in which the Qiskit community has engaged with Qiskit and developed extensions and packages on top of it."
msgstr "키스킷은 모듈성을 염두해 두고 만들어 졌다. 많은 다른 방식으로 확장될 수 있는데, 다음 페이지에서 키스킷 커뮤니티가 키스킷과 어떻게 연관을 맺고 있으며 확장 기능과 패키지들을 개발하는지에 대해 강조하였다."

#: ../../development_strategy.rst:132
msgid "Providers"
msgstr "공급자"

#: ../../development_strategy.rst:134
msgid "The Qiskit base provider is an entity that provides access to a group of different backends (for example, backends available through IBM Quantum). It interacts with those backends to do many things: find out which ones are available, retrieve an instance of a particular backend, get backend properties and configurations, and handling running and working with jobs."
msgstr "키스킷의 기본 제공자는 다른 후위 처리 장치(예를 들어 아이비엠 양자 시스템을 통해서 제공되는 후위 처리 장치들) 의 그룹에 접근할 수 있는 객체이다. 이는 여러 후위 처리 장치와 상호 작용하여 여러가지 일을 하는데, 어느 후위 처리 장치가 사용 가능한지, 특정 후위 처리 장치의 인스턴스를 회수해 오는 일, 후위 처리 장치의 특성과 설정을 가져오는 일, 여러 작업들을 실행하고 다루는 일들이 포함된다."

#: ../../development_strategy.rst:141
msgid "Additional providers"
msgstr "추가적인 후위 처리 장치"

#: ../../development_strategy.rst:143
msgid "**Decision diagram-based quantum simulator**"
msgstr "**의사결정 다이어그램에 기반한 양자 시뮬레이터**"

#: ../../development_strategy.rst
msgid "- **Organization:** Johannes Kepler University, Linz, Austria (Alwin Zulehner and Robert Wille)"
msgstr "- **기관:** 요하네스 케플러 (Johannes Kepler) 대학, 린즈 (Linz), 오스트리아 (Austria) (알빈 줄레너(Alwin Zulehner) 와 로버트 윌(Robert Wille)"

#: ../../development_strategy.rst
msgid "- **Description:** A local provider which allows Qiskit to use decision diagram-based quantum simulation"
msgstr "- **내용:** 키스킷에서 의사결정 다이어그램 기반의 양자 시뮬레이션을 가능하게 하는 로컬 제공자"

#: ../../development_strategy.rst
msgid "- **Qiskit Version:** 0.7"
msgstr "- **키스킷 버전:** 0.7"

#: ../../development_strategy.rst
msgid "- **More info:**  `Webpage at JKU <http://iic.jku.at/eda/research/quantum_simulation>`__, `Medium Blog <https://medium.com/qiskit/classical-simulators-for-quantum-computers-4b994dad4fa2>`__ and `GitHub Repo <https://github.com/Qiskit/qiskit-jku-provider>`__"
msgstr "- **추가 정보:**  `JKU 웹페이지 <http://iic.jku.at/eda/research/quantum_simulation>`, `미디움 블로그 (Medium Blog) <https://medium.com/qiskit/classical-simulators-for-quantum-computers-4b994dad4fa2>` 그리고 `깃허브 저장소 <https://github.com/Qiskit/qiskit-jku-provider>`"

#: ../../development_strategy.rst:154
msgid "**Quantum Inspire**"
msgstr "**양자 영감 (Quantum Inspire)**"

#: ../../development_strategy.rst
msgid "- **Organization:** QuTech-Delft"
msgstr "- **기관:** 큐테크-델프트 (QuTech-Delft)"

#: ../../development_strategy.rst
msgid "- **Description:** A provider for the Quantum Inspire backend"
msgstr "- **내용:** 양자 영감 후위 처리 장치를 위한 제공자"

#: ../../development_strategy.rst
msgid "- **More info:** `Medium Blog <https://medium.com/qiskit/quantum-inspire-and-qiskit-f1be608f8955>`__ and `GitHub <https://github.com/QuTech-Delft/quantuminspire>`__."
msgstr "- **추가 정보:** `미디엄 블로그 <https://medium.com/qiskit/quantum-inspire-and-qiskit-f1be608f8955>` 그리고 `깃허브 <https://github.com/QuTech-Delft/quantuminspire>`."

#: ../../development_strategy.rst:164
msgid "Transpiler"
msgstr "트랜스파일러(transpiler)"

#: ../../development_strategy.rst:166
msgid "Circuit optimization is at the heart of making quantum computing feasible on actual hardware. A central component of Qiskit is the transpiler, which is a framework for manipulating quantum circuits according to certain transformations (known as transpiler passes). The transpiler enables users to create customized sets of passes, orchestrated by a pass manager, to transform the circuit according to the rules specified by the passes. In addition, the transpiler architecture is designed for modularity and extensibility, enabling Qiskit users to write their own passes, use them in the pass manager, and combine them with existing passes. In this way, the transpiler architecture opens up the door for research into aggressive optimization of quantum circuits."
msgstr "회로 최적화는 양자 계산이 실제 하드웨어에서 가능하게 만들어주는 핵심 요소이다. 키스킷의 가장 중요한 요소는 (트랜스 파일러 패스들로 알려진) 특정 변환들에 따라 양자 회로를 조작하는 프레임 워크인 트랜스 파일러이다. 이는 사용자 들로 하여금 패스 매니저의 감독아래 각각의 패스에 의해 정해진 규칙을 따라 회로들을 변환하는 패스 명령어 세트를 만들수 있게 해준다. 또한 트랜스파일러 아키텍처는 확장성과 모듈성을 염두해 두고 만들어 졌기에 키스킷 사용자들이 자신의 고유 패스들을 만들고 패스 매니저를 통해 그것을 사용하고 또한 기존의 패스와 합쳐서 사용할 수 있게 해준다. 이러한 방식의 트랜스파일러 아키텍처는 연구자들이 양자 회로의 최적화에 공격적으로 참여할 수 있도록 해준다."

#: ../../development_strategy.rst:178
msgid "Additional passes"
msgstr "추가 통로들"

#: ../../development_strategy.rst:180
msgid "**t|ket〉 optimization & routing pass**"
msgstr "**t|ket〉 최적화 & 경로 통로**"

#: ../../development_strategy.rst
msgid "- **Organization:** Cambridge Quantum Computing"
msgstr "- **기관:** 캠브리지 양자 컴퓨팅"

#: ../../development_strategy.rst
msgid "- **Description:** Transpiler pass for circuit optimization and mapping to backend using CQC's t|ket〉compiler."
msgstr "- **내용:** 시큐시(CQC) t|ket> 컴파일러를 이용해서 회로 최적화 및 후위 처리 장치 맵핑을 하는 트랜스패서 통로."

#: ../../development_strategy.rst
msgid "- **More info:** `Tutorial Notebook <https://github.com/Qiskit/qiskit-tutorials/blob/master/community/aqua/chemistry/QSE_pytket.ipynb>`__ and `GitHub <https://github.com/CQCL/pytket>`__."
msgstr "- **추가 정보:** `사용 지침 노트북 <https://github.com/Qiskit/qiskit-tutorials/blob/master/community/aqua/chemistry/QSE_pytket.ipynb>` 그리고 `깃허브 <https://github.com/CQCL/pytket>`."

#: ../../development_strategy.rst:190
msgid "Tools"
msgstr "도구"

#: ../../development_strategy.rst:192
msgid "Extending Qiskit with new tools and functionality is an important part of building a community. These tools can be new visualizations, slack integration, Jupyter extensions and much more."
msgstr "키스킷을 새로운 도구와 기능으로 확장할 수 있는 것은 커뮤니티를 형성하기위한 매우 중요한 요소이다. 이러한 도구들로는 새로운 시각화 도구, 슬랙 (Slack) 연동, 주피터 (Jupyter) 확장툴 등등이 있다."

#: ../../development_strategy.rst:197
msgid "Additional Tools"
msgstr "추가적인 도구들"

#: ../../development_strategy.rst:198
msgid "**OpenControls library**"
msgstr "**열린 통제 (OpenControls) 라이브러리**"

#: ../../development_strategy.rst
msgid "- **Organization:** Q-CTRL"
msgstr "- **기관:** 큐-컨트롤 (Q-CTRL)"

#: ../../development_strategy.rst
msgid "- **Description:** Library of quantum control pulses derived from the open literature."
msgstr "- **내용:** 공개 문헌에 기반한 양자 조절 펄스 라이브러리."

#: ../../development_strategy.rst
msgid "- **More info:**  `GitHub <https://github.com/qctrl/python-open-controls>`__ and `Q-CTRL website <https://q-ctrl.com/products/open-controls/>`__"
msgstr "- **추가 정보:**  `깃허브 <https://github.com/qctrl/python-open-controls>` 그리고 `큐-컨트롤 웹사이트 <https://q-ctrl.com/products/open-controls/>`"

