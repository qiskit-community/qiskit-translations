msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-26 23:06+0000\n"
"PO-Revision-Date: 2023-01-26 23:59\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/maintainers_guide.po\n"
"X-Crowdin-File-ID: 9838\n"
"Language: ko_KR\n"

#: ../../maintainers_guide.rst:4
msgid "Maintainers Guide"
msgstr "관리자 가이드"

#: ../../maintainers_guide.rst:6
msgid "This document defines a *maintainer* as a contributor with merge privileges. The information detailed here is mostly related to Qiskit releases and other internal processes."
msgstr "이 문서는 *관리자* 를 병합 권한을 가진 기여자로 정의한다. 여기에 자세히 설명된 정보는 주로 Qiskit 배포 및 기타 내부 과정과 관련된 것이다."

#: ../../maintainers_guide.rst:12
msgid "Stable Branch Policy"
msgstr "안정된 브랜치 정책"

#: ../../maintainers_guide.rst:14
msgid "The stable branch is intended to be a safe source of fixes for high-impact bugs and security issues that have been fixed on master since a release. When reviewing a stable branch PR, we must balance the risk of any given patch with the value that it will provide to users of the stable branch. Only a limited class of changes are appropriate for inclusion on the stable branch. A large, risky patch for a major issue might make sense, as might a trivial fix for a fairly obscure error-handling case. A number of factors must be weighed when considering a change:"
msgstr "안정된 브랜치는 배포 후 마스터에서 수정된 심각한 버그 및 보안 이슈에 대한 안전한 소스를 유지하는 것을 목표로 한다. 안정된 브랜치의 PR을 검토할 땐, 주어진 패치의 위험과 안정된 브랜치의 사용자에게 제공할 가치 사이의 균형을 맞춰야 한다. 안정된 브랜치에는 한정된 클래스의 변경만 포함하는 것이 적절하다. 상당히 모호한 오류 처리 사례에 대한 사소한 수정과 같이, 주요 이슈에 대한 크고 위험한 패치가 유효한 경우도 있다. 변경을 고려할 때, 다음과 같은 여러 요소를 고려해야 한다:"

#: ../../maintainers_guide.rst:24
msgid "The risk of regression: even the tiniest changes carry some risk of breaking something, and we really want to avoid regressions on the stable branch."
msgstr "회귀의 위험: 아주 작은 변경도 무언가를 망가트릴 위험이 있으며, 안정된 브랜치에서는 최대한 회귀를 제고하고자 한다."

#: ../../maintainers_guide.rst:27
msgid "The user visibility benefit: are we fixing something that users might actually notice, and if so, how important is it?"
msgstr "사용자 가시성 이점: 사용자가 실제로 알아차릴 만한 것을 수정하는가? 그렇다면 그것은 얼마나 중요한가?"

#: ../../maintainers_guide.rst:29
msgid "How self-contained the fix is: if it fixes a significant issue but also refactors a lot of code, it's probably worth thinking about what a less risky fix might look like."
msgstr "수정이 얼마나 자립적인가: 중요한 문제를 해결하지만 동시에 많은 코드를 변경하는 경우, 덜 위험한 수정은 어떤 모습일지 생각해볼 가치가 있다."

#: ../../maintainers_guide.rst:32
msgid "Whether the fix is already on master: a change must be a backport of a change already merged onto master, unless the change simply does not make sense on master."
msgstr "수정 사항이 이미 마스터 브랜치에 있는가: 수정 사항이 마스터 브랜치에 적합하지 않은 경우가 아니라면, 수정 사항은 이미 마스터 브랜치에 병합된 이전 버전을 수정하는 백포트(backport)여야 한다."

#: ../../maintainers_guide.rst:39
msgid "Backporting procedure:"
msgstr "백포팅 절차:"

#: ../../maintainers_guide.rst:41
msgid "When backporting a patch from master to stable, we want to keep a reference to the change on master. When you create the branch for the stable PR, use::"
msgstr "마스터에서 안정적인 패치로 백포팅할 때 마스터의 변경 사항에 대한 참조를 유지하려고 한다. 브랜치에 안정적인 PR을 만드는 경우 다음 명령어를 사용한다::"

#: ../../maintainers_guide.rst:47
msgid "However, this only works for small self-contained patches from master. If you need to backport a subset of a larger commit (from a squashed PR, for example) from master, do this manually. In these cases, add::"
msgstr "아지만 이것은 마스터의 작은 자체 포함 패치에만 작동한다. 마스터에서 더 큰 커밋(예: squashed PR에서)의 하위 집합을 백포트해야 하는 경우 수동으로 진행한다. 이러한 경우 다음을 추가 한다."

#: ../../maintainers_guide.rst:53
msgid "so that we can track the source of the change subset, even if a strict cherry-pick doesn\\'t make sense."
msgstr "특별히 선별된 내용이 의미가 통하지 않더라도 변경된 부분의 원래 소스 코드를 추적할 수 있다."

#: ../../maintainers_guide.rst:56
msgid "If the patch you're proposing will not cherry-pick cleanly, you can help by resolving the conflicts yourself and proposing the resulting patch. Please keep Conflicts lines in the commit message to help review of the stable patch."
msgstr "새롭게 제안하는 패치가 정확히 선별하지 않더라도 스스로 상충되는 부분을 해결하고, 결과로 초래된 패치를 제안함으로써 도움을 줄 수 있다. 안정된 패치의 검토를 돕기 위해서 커밋 메시지에 상충됨(Conflicts) 을 표시하기 바란다."

#: ../../maintainers_guide.rst:64
msgid "Backport labels"
msgstr "이전 버전을 수정하는 백포트(backport) 라벨들"

#: ../../maintainers_guide.rst:66
msgid "Bugs or PRs tagged with ``stable backport potential`` are bugs that apply to the stable release too and may be suitable for backporting once a fix lands in master. Once the backport has been proposed, the tag should be removed."
msgstr "``잠재적인 안정된 백포트(stable backport potential)`` 로 태그된 버그나 풀 리퀘스트는 안정된 릴리즈에 적용되는 버그이며, 마스터 브랜치에 머지되는 순간 이전 버전을 수정하는 백포트(backport) 로써 적합할 수 있다. 백포트가 제안되면, 해당 태그는 제거되어야 한다."

#: ../../maintainers_guide.rst:71
msgid "Include ``[Stable]`` in the title of the PR against the stable branch, as a sign that setting the target branch as stable was not a mistake. Also, reference to the PR number in master that you are porting."
msgstr "대상 브랜치를 안정되었다고 설정하는 표시는 실수가 아니기 때문에 안정된 브랜치에 대한 PR의 제목에는 ``[Stable]`` 을 포함시킨다. 또한, 마스터 브랜치에 머지된 PR 참조번호를 추가한다."

#: ../../maintainers_guide.rst:80
msgid "Qiskit Versioning"
msgstr "Qiskit 버저닝(Versioning)"

#: ../../maintainers_guide.rst:82
msgid "The Qiskit project is made up of several elements each performing different functionality. Each is independently useful and can be used on their own, but for convenience we provide this repository and meta-package to provide a single entrypoint to install all the elements at once. This is to simplify the install process and provide a unified interface to end users. However, because each Qiskit element has its own releases and versions, some care is needed when dealing with versions between the different repositories. This document outlines the guidelines for dealing with versions and releases of both Qiskit elements and the meta-package."
msgstr "Qiskit 프로젝트는 각각 다른 기능을 수행하는 여러 요소들로 구성되어 있다. 각각은 독립적으로 유용하고 사용될 수 있으나, 편의상 저장소와 모든 요소를 한 번에 설치할 수 있는 단일 진입점을 제공하는 메타-패키지를 제공한다. 이는 설치 과정을 간소화하고 사용자에게 통일된 인터페이스를 제공하기 위함이다. 하지만 각 Qiskit 요소들은 자신들만의 배포 버전을 가지고 있기 때문에 다른 저장소의 버전을 다룰 때에는 주의가 필요하다. 이 문서는 Qiskit 요소와 메타-패키지의 배포 버전을 다룰 때의 지침을 설명한다."

#: ../../maintainers_guide.rst:92
msgid "For the rest of this guide the standard Semantic Versioning nomenclature will be used of: ``Major.Minor.Patch`` to refer to the different components of a version number. For example, if the version number was ``0.7.1``, then the major version is ``0``, the minor version ``7``, and the patch version ``1``."
msgstr "이 지침의 남은 부분에서 표준 유의적 버전(Semantic Versioning) 명명법은 서로 다른 버전을 ``Major.Minor.Patch`` 으로 표기할 것이다. 예를 들어 버전 번호가 ``0.7.1`` 라면, 주 버전(major version)은 ``0``, 부 버전(minor version)은 ``7``, 그리고 패치 버전(patch version)은 ``1`` 이다."

#: ../../maintainers_guide.rst:99
msgid "Meta-package Version"
msgstr "메타-패키지 버전"

#: ../../maintainers_guide.rst:101
msgid "The Qiskit meta-package version is an independent value that is determined by the releases of each of the elements being tracked. Each time we push a release to a tracked component (or add an element) the meta-package requirements, and version will need to be updated and a new release published. The timing should be coordinated with the release of elements to ensure that the meta-package releases track with element releases."
msgstr "Qiskit 메타-패키지 버전은 독립적인 값으로 각각의 요소들의 배포 버전에 따라 결정된다. 추적되는 요소 (혹은 새로운 요소를 추가하거나) 를 메타-패키지의 필요 항목에 푸시(push)할 때마다 버전은 갱신되어야 하고 새 배포가 발행된다. 메타-패키지 배포가 각 요소의 배포 버전과 일치하도록 발행 일정을 조율한다."

#: ../../maintainers_guide.rst:109
msgid "Adding New Tracked Elements"
msgstr "새 추적 요소 추가하기"

#: ../../maintainers_guide.rst:111
msgid "When a new Qiskit element is being added to the meta-package requirements, we need to increase the **Minor** version of the meta-package."
msgstr "새로운 Qiskit 요소가 메타-페키지 필요 항목에 추가되면, 메타-패키지의 **부** 버전을 올려야 한다."

#: ../../maintainers_guide.rst:114
msgid "For example, if the meta-package is tracking 2 elements ``qiskit-aer`` and ``qiskit-terra`` and its version is ``0.7.4``. Then we release a new element ``qiskit-new`` that we intend to also have included in the meta-package. When we add the new element to the meta-package we increase the version to ``0.8.0``."
msgstr "예를 들어, 메타 패키지가 ``qiskit-aer`` 및 ``qiskit-terra`` 요소 2개를 추적하고 있고 해당 버전이 ``0.7.4`` 인 경우를 살펴 보자. 그런 다음 메타 패키지에도 포함시키려는 새로운 요소 ``qiskit-new`` 를 릴리즈 한다. 메타 패키지에 새 요소를 추가할 때 버전을 ``0.8.0`` 으로 늘린다."

#: ../../maintainers_guide.rst:122
msgid "Patch Version Increases"
msgstr "패치 버전 증가"

#: ../../maintainers_guide.rst:124
msgid "When any Qiskit element that is being already tracked by the meta-package releases a patch version to fix bugs in a release, we need also bump the requirement in the ``setup.py`` and then increase the patch version of the meta-package."
msgstr "메타-패키지에서 추적 중인 Qiskit 요소가 버그를 고치고자 패치 버전을 공개했다면, ``setup.py`` 파일에 있는 필요 항목을 고치고 메타-패키지의 패치 버전을 증가시켜야 한다."

#: ../../maintainers_guide.rst:129
msgid "For example, if the meta-package is tracking 2 elements ``qiskit-terra==0.8.1`` and ``qiskit-aer==0.2.1``, with the current version ``0.9.6``. When qiskit-terra release a new patch version to fix a bug ``0.8.2`` the meta-package will also need to increase its patch version and release, becoming ``0.9.7``."
msgstr "예를 들어, 메타 패키지가 2개의 요소 ``qiskit-terra==0.8.1`` 및 ``qiskit-aer==0.2.1`` 를 추적하며 현재 버전은 ``0.9.6`` 인 경우를 살펴보자. qiskit-terra가 버그 ``0.8.2`` 를 수정하기 위해 새 패치 버전을 출시할 때 메타 패키지도 패치 버전과 릴리스를 늘려 ``0.9.7`` 이 되어야 한다."

#: ../../maintainers_guide.rst:135
msgid "Additionally, there are occasionally packaging or other bugs in the meta-package itself that need to be fixed by pushing new releases. When those are encountered we should increase the patch version to differentiate it from the broken release. Do **not** delete the broken or any old releases from pypi in any situation, instead just increase the patch version and upload a new release."
msgstr "추가로, 가끔은 패키징이나 메타-패키지 자체의 다른 버그로 이를 고치고 새 버전을 출시해야 할 수 있다. 이러한 상황에서는 잘못된 배포에서 구분되도록 패치 버전을 증가시켜야 한다. 어떤 경우에서도 pypi의 오래되거나 잘못된 배포를 지우지 **말고,** 대신에 패치 버전을 올리고 새 배포를 업로드하라."

#: ../../maintainers_guide.rst:143
msgid "Minor Version Increases"
msgstr "부 버전 증가"

#: ../../maintainers_guide.rst:145
msgid "Besides when adding a new element to the meta-package, the minor version of the meta-package should also be increased anytime a minor version is increased in a tracked element."
msgstr "메타-패키지에 새로운 요소를 추가하는 것 외에도 추적되는 요소의 부 버전이 증가할 때마다 메타-패키지의 부 버전도 증가해야 한다."

#: ../../maintainers_guide.rst:149
msgid "For example, if the meta-package is tracking 2 elements ``qiskit-terra==0.7.0`` and ``qiskit-aer==0.1.1`` and the current version is ``0.7.5``. When the ``qiskit-aer`` element releases ``0.2.0`` then we need to increase the meta-package version to be ``0.8.0`` to correspond to the new release."
msgstr "예를 들어, 메타-패키지가 2개의 요소 ``qiskit-terra==0.7.0`` 과 ``qiskit-aer==0.1.1`` 을 추적하고 버전이 ``0.7.5`` 라고 해보자. ``qiskit-aer`` 요소가 ``0.2.0`` 버전을 공개했다면 메타-패키지 버전도 ``0.8.0`` 로 올려서 새 배포에 일치시켜야 한다."

#: ../../maintainers_guide.rst:155
msgid "Major Version Increases"
msgstr "주 버전 증가"

#: ../../maintainers_guide.rst:157
msgid "The major version is different from the other version number components. Unlike the other version number components, which are updated in lock step with each tracked element, the major version is only increased when all tracked versions are bumped (at least before ``1.0.0``). Right now, all the elements still have a major version number component of ``0``, and until each tracked element in the meta-repository is marked as stable by bumping the major version to be ``>=1``, then the meta-package version should not increase the major version."
msgstr "주 버전은 다른 버전 숫자들과는 다르다. 각각의 추적되는 요소에 맞춰 갱신되는 다른 버전 숫자들과는 달리 주 버전은 모든 추적되는 버전이 새 버전으로 올라갈 때 (적어도 ``1.0.0`` 전에) 에만 증가하게 된다. 현재는 모든 요소의 주 버전이 아직 ``0`` 이고 메타-저장소에 있는 각각의 추적 요소들이 안정적으로 판단되어 주 버전이 ``>=1`` 이 되기 전까진 메타-페키지의 주 버전을 올리지 않는다."

#: ../../maintainers_guide.rst:165
msgid "The behavior of the major version number component tracking after when all the elements are at >=1.0.0 has not been decided yet."
msgstr "모든 요소들이 >=1.0.0일 때 주 버전 숫자가 어떻게 바뀌어야 할 지에 대해서는 아직 정해지지 않았다."

#: ../../maintainers_guide.rst:169
msgid "Optional Extras"
msgstr "추가 옵션"

#: ../../maintainers_guide.rst:171
msgid "In addition to the tracked elements, there are additional packages built on top of Qiskit which are developed in tandem with Qiskit, for example, the application repositories like qiskit-optimization. For convienence these packages are tracked by the Qiskit metapackage as optional extras that can be installed with Qiskit. Releases of these optional downstream projects do not trigger a metapackage release as they are unpinned and do not affect the metapackage version. If there is a compatibility issue between Qiskit and these downstream optional dependencies and the minimum version needs to be adjusted in a standalone release, this will only be done as a patch version release as it's a packaging bugfix."
msgstr "추적되는 요소 외에도 Qiskit과 함께 개발된 Qiskit 위에 설치되는 추가 패키지가 있으며, 예를 들어 qiskit-optimization과 같은 응용 프로그램 저장소가 있다. 편의성을 위해 이 패키지들은 Qiskit과 함께 설치될 수 있는 선택 사양으로써 Qiskit 메타-패키지에 추적된다. 이러한 다운스트림 프로젝트들의 배포는 메타-패키지 배포를 유도하지 않으며 메타-패키지 버전에도 영향을 주지 않는다. 만약 Qiskit과 해당 다운스트림의 선택적 종속성 사이에서 호환성 문제가 있어서 독립적 배포의 최소 버전이 조정되어야 하는 경우, 패키지 버그 수정처럼 패치 버전 배포로만 되어야 한다."

#: ../../maintainers_guide.rst:183
msgid "Qiskit Element Requirement Tracking"
msgstr "Qiskit 요소 요구사항 추적"

#: ../../maintainers_guide.rst:185
msgid "While not strictly related to the meta-package and Qiskit versioning, how we track the element versions in the meta-package's requirements list is important. Each element listed in the ``setup.py`` should be pinned to a single version. This means that each version of Qiskit should only install a single version for each tracked element. For example, the requirements list at any given point should look something like::"
msgstr "메타-패키지와 Qiskit 버저닝과 엄밀하게 관련되어 있는 건 아니지만, 메타-패키지의 요구사항 목록에 있는 요소 버전을 추적하는 것은 중요하다. ``setup.py`` 에 나열된 각각의 요소들은 단일 버전으로 고정되어 있어야 한다. 이는 Qiskit의 각 버전이 추적되는 요소 중에서 단일 버전만 설치해야 한다는 것을 의미한다. 예를 들어서, 어떤 순간에서의 요구사항 목록은 다음과 같이 보일 것이다::"

#: ../../maintainers_guide.rst:197
msgid "This is to aid in debugging, but also make tracking the versions across multiple elements more transparent."
msgstr "이것은 디버깅을 돕기 위한 것이지만, 여러 요소들 간에 버전을 추적하는 일을 더 투명하도록 해 준다."

#: ../../maintainers_guide.rst:201
msgid "Documentation Structure"
msgstr "문서 구조"

#: ../../maintainers_guide.rst:203
msgid "The way documentation is structured in Qiskit is to push as much of the actual documentation into the docstrings as possible. This makes it easier for additions and corrections to be made during development, because the majority of the documentation lives near the code being changed. There are three levels in the normal documentation structure in Terra:"
msgstr "Qiskit에서 문서가 조직된 방식은 가능한 많은 문서를 docstring으로 입력하는 것이다. 이 방식은 문서 자체가 코드와 함께 존재하기 때문에 개발 과정에서 문서를 추가하거나, 수정하는 것을 쉽게 만든다. Terra의 일반적인 문서 구조에는 세 개의 레벨이 있다:"

#: ../../maintainers_guide.rst:231
msgid "The ``.rst`` files in the ``docs/apidocs``"
msgstr "``docs/apidocs`` 에 위치한 ``.rst`` 파일들"

#: ../../maintainers_guide.rst:210
msgid "These files are used to tell Sphinx which modules to include in the rendered documentation. This contains two pieces of information: an `internal reference <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#reference-names>`__ or `cross reference <https://www.sphinx-doc.org/en/latest/usage/restructuredtext/roles.html#ref-role>`__ to the module, which can be used for internal links inside the documentation, and an `automodule directive <http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`__ used to parse the module docstrings from a specified import path. For example, the ``dagcircuit.rst`` file contains::"
msgstr "이 파일들은 Sphinx에게 어떤 모듈이 렌더링된 문서에 포함되는지 알려주는데 사용된다. 이 파일 형식은 두 가지 정보를 가진다: 문서 내에서 내부 링크에 사용될 수 있는 `internal reference (내부 참조) <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#reference-names>`__ 나 `cross reference (교차 참조) <https://www.sphinx-doc.org/en/latest/usage/restructuredtext/roles.html#ref-role>`__ 와 명시된 불러오기 경로 위치의 문서화 구문을 분석하는데 사용되는 `automodule directive <http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`__ 이다. 예를 들어, ``dagcircuit.rst`` 파일은 다음을 포함한다:"

#: ../../maintainers_guide.rst:228
msgid "The only ``.rst`` file outside of this is ``qiskit.rst``, which contains the table of contents. If you're adding a new ``.rst`` file for a new module's documentation, make sure to add it to the `toctree <https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#table-of-contents>`__ in that file."
msgstr "이런 형식과 다른 유일한 ``.rst`` 파일은 목차를 포함하는 ``qiskit.rst`` 이다. 새로운 모듈의 문서에 대한 ``.rst`` 파일을 추가한다면, 해당 파일에 `toctree <https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#table-of-contents>`__ 을 추가해야 한다."

#: ../../maintainers_guide.rst:276
msgid "The module-level docstring"
msgstr "모듈-레벨 docstring"

#: ../../maintainers_guide.rst:234
msgid "This docstring is at the module level for the module specified in the ``automodule`` directive in the rst file. If the module specified is a directory/namespace, the docstring should be specified in the ``__init__.py`` file for that directory. This module-level docstring contains more details about the module being documented. The normal structure to this docstring is to outline all the classes and functions of the public API that are contained in that module. This is typically done using the `autosummary directive <https://www.sphinx-doc.org/en/master/usage/extensions/autosummary.html>`__ (or `autodoc directives <http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`__ directly if the module is simple, such as in the case of ``qiskit.execute``). The autosummary directive is used to autodoc a list of different Python elements (classes, functions, etc.) directly without having to manually call out the autodoc directives for each one. The module-level docstring is where to provide a high-level overview of what functionality the module provides. This is normally done by grouping the different components of the public API together into multiple subsections."
msgstr "이 docstring은 rst 파일의 ``automodule`` 지시자에 명시된 모듈에 대한 모듈 레벨에 있다. 명시된 모듈이 디렉토리/명칭 공간라면, docstring은 그 디렉토리의 ``__init__.py`` 에 명시되어야 한다. 이 모듈-레벨의 docstring은 문서화된 모듈에 대한 더 많은 세부정보를 포함한다. 이 docstring의 일반적인 구조는 모듈에 포함된 공개 API의 모든 클래스와 함수를 나열하는 것이다. 이는 일반적으로 `autosummary directive <https://www.sphinx-doc.org/en/master/usage/extensions/autosummary.html>`__ 에 의해서 실행된다(또는 ``qiskit.execute`` 의 경우와 같이 모듈이 간단한 경우에는 `autodoc directives <http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`__ 로 직접 실행). autosummary directive는 다른 Python 요소들(클래스, 함수 등)을 각각의 autodoc directive를 호출할 필요 없이 직접 이런 요소들의 autodoc을 실행하는데 사용된다. 모듈-레벨 docstring은 모듈이 제공하는 기능에 대한 높은 수준의 개요를 제공한다. 이는 주로 공개 API의 다른 컴포넌트를 여러 세부항목으로 묶음으로서 이루어진다."

#: ../../maintainers_guide.rst:251
msgid "For example, as in the previous dagcircuit module example, the contents of the module docstring for ``qiskit/dagcircuit/__init__.py`` would be::"
msgstr "예를 들어, 이전에 제시된 dagcircuit 모듈 예제에서 ``qiskit/dagcircuit/__init__.py`` 에 대한 모듈 docstring의 내용은 다음과 같을 것이다::"

#: ../../maintainers_guide.rst:275
msgid "This is just an example and the actual module docstring for the dagcircuit module might diverge from this."
msgstr "이것은 예일 뿐이며 dagcircuit 회로 모듈에 대한 실제 모듈 문서 문자열은 이와 다를 수 있다."

#: ../../maintainers_guide.rst:293
msgid "The actual docstring for the elements listed in the module docstring"
msgstr "모듈 docstring에 나열된 요소들에 대한 실제 docstring"

#: ../../maintainers_guide.rst:279
msgid "You should strive to document thoroughly all the public interfaces exposed using examples when necessary. For docstrings, `Google Python Style Docstrings <https://google.github.io/styleguide/pyguide.html?showone=Comments#38-comments-and-docstrings>`__ are used. This is parsed using the `napoleon sphinx extension <https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html>`__. The `napoleon documentation <https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html>`__ contains a good example of how docstrings should be formatted."
msgstr "개발자들은 필요한 경우에 예제를 사용하여 노출된 모든 공개 인터페이스를 철저하게 문서화하기위해 노력해야 한다. docstring은 `Google Python 스타일 Docstring <https://google.github.io/styleguide/pyguide.html?showone=Comments#38-comments-and-docstrings>`__ 이 사용된다. 이후 문서는 `napoleon sphinx 확장판 <https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html>`__ 을 사용하여 분석된다. `napoleon 문서 <https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html>`__ 는 docstring이 어떻게 형식화되어야 하는지에 대한 좋은 예제를 포함한다."

#: ../../maintainers_guide.rst:288
msgid "You can use any Sphinx directive or rst formatting in a docstring as it makes sense. For example, one common extension used is the ``jupyter-execute`` directive, which is used to execute a code block in Jupyter and display both the code and output. This is particularly useful for visualizations."
msgstr "필요한 곳에 Sphinx나 rst 포맷형식을 사용할 수 있다. 예를 들어, 한 가지 공통적으로 사용되는 확장은 ``jupyter-execute`` 지시자이며, 이는 주피터(Jupyter) 에서 코드 블록을 실행하고, 코드와 결과를 보여주는데 사용된다. 이는 시각화에 특히 매우 유용하다."

#: ../../maintainers_guide.rst:296
msgid "Documentation Integration"
msgstr "문서 통합"

#: ../../maintainers_guide.rst:298
msgid "The hosted documentation at https://qiskit.org/documentation/ covers the entire Qiskit project; Terra is just one component of that. As such, the documentation builds for the hosted version are built by the Qiskit meta-package repository https://github.com/Qiskit/qiskit. When commits are merged to that repo, the output of Sphinx builds are uploaded to the qiskit.org website. Those Sphinx builds are configured to pull in the documentation from the version of the Qiskit elements installed by the meta-package at that point. For example, if the meta-package version is currently 0.13.0, then that will copy the documentation from Terra's 0.10.0 release. When the meta-package's requirements are bumped, then it will start pulling documentation from the new version. This means that fixes for incorrect API documentation will need to be included in a new release. Documentation fixes are valid backports for a stable patch release per the stable branch policy (see :ref:`stable_branch_policy`)."
msgstr "https://qiskit.org/documentation/ 에서 제공하는 문서는 전체 Qiskit 프로젝트를 다룬다. Terra는 그 중 하나에 해당한다. 따라서 제공되는 문서 빌드 버전은 Qiskit 메타-패키지 저장소 https://github.com/Qiskit/qiskit 를 따른다. 커밋이 해당 저장소로 병합되면, Sphinx 빌드의 결과물이 qiskit.org 웹사이트에 전송된다. 이 Sphinx 빌드는 그 시점의 메타-패키지로 설치된 Qiskit 요소의 버전으로 문서로 구성된다. 예를 들어, 메타-패키지의 현재 버전이 0.13.0이면 이는 Terra의 0.10.0 릴리즈에서 문서를 가져올 것이다. 메타-패키지의 요구사항이 서로 충돌하는 경우, 새 버전에서 문서를 가져올 것이다. 이는 잘못된 API 문서의 수정 사항들이 새 릴리즈에 포함될 필요가 있음을 의미한다. 문서 수정은 안정된 브랜치 정책 ( :ref:`stable_branch_policy` 을 보라) 마다 안정된 패치 릴리즈에 대한 적합한 백포트이다."

#: ../../maintainers_guide.rst:312
msgid "During the build process, the contents of each element's ``docs/apidocs/`` are recursively copied into a shared copy of ``doc/apidocs/`` in the meta-package repository along with all the other elements. This means that what is in the root of docs/apidocs on each element at a release will end up on the root of https://qiskit.org/documentation/apidoc/."
msgstr "빌드 과정에서 각 요소의 ``docs/apidocs/`` 내용은 모든 다른 요소와 함께 메타-패키지 저장소에 있는 ``doc/apidocs/`` 의 공유된 복사본에 반복적으로 복사된다. 이렇게 함으로써, 릴리즈의 각 요소에서 docs/apidocs의 최상위에 있는 것은 https://qiskit.org/documentation/apidoc/의 최상위에 있게 된다."

