msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-14 09:35+0000\n"
"PO-Revision-Date: 2020-07-20 09:57\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/2_operators_overview.po\n"
"X-Crowdin-File-ID: 9124\n"
"Language: fr_FR\n"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:10
msgid "This page was generated from `tutorials/circuits_advanced/2_operators_overview.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/circuits_advanced/2_operators_overview.ipynb`__."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:9
msgid "Operators"
msgstr "Opérateurs"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:39
msgid "Operator Class"
msgstr "La Classe Opérateurs"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:41
msgid "The ``Operator`` class is used in Qiskit to represent matrix operators acting on a quantum system. It has several methods to build composite operators using tensor products of smaller operators, and to compose operators."
msgstr "La classe ``Operator`` est utilisée dans Qiskit pour représenter toute matrice unitaire agissant sur un système quantique. Elle possède plusieurs méthodes qui permettent de construire des opérateurs composés en utilisant les produits tensoriels avec de plus petits opérateurs, et pour composer des opérateurs."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:44
msgid "Creating Operators"
msgstr "Créer des Opérateurs"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:46
msgid "The easiest way to create an operator object is to initialize it with a matrix given as a list or a Numpy array. For example, to create a two-qubit Pauli-XX operator:"
msgstr "Le moyen le plus simple pour créer un opérateur est de l'initialiser avec une matrice construite par une liste ou un tableau Numpy. Par exemple, pour créer un opérateur Pauli-XX sur deux qubits :"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:97
msgid "Operator Properties"
msgstr "Propriétés de l'objet Operator"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:99
msgid "The operator object stores the underlying matrix, and the input and output dimension of subsystems."
msgstr "L'objet ``operator`` contient la matrice ainsi que les dimensions d'entrée et de sortie d'un système ou d'un sous-système."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:101
msgid "``data``: To access the underly Numpy array, we may use the ``Operator.data`` property."
msgstr "``data`` : Permet d'accéder à la matrice Numpy sous-jacente en utilisant la propriété `Operator.data`."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:102
msgid "``dims``: To return the total input and output dimension of the operator, we may use the ``Operator.dim`` property. *Note: the output is returned as a tuple ``(input_dim, output_dim)``, which is the reverse of the shape of the underlying matrix.*"
msgstr "``dim`` : Renvoie les dimensions d'entrée et de sortie de l'opérateur en utilisant la propriété ``Operator.dim``. *Note : la sortie est un couple `(input_dim, output_dim)`, qui correspond aux dimensions --en ordre inverse : colonnes,lignes-- de la matrice sous-jacente.*"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:181
msgid "Input and Output Dimensions"
msgstr "Dimensions d'entrée et de sortie"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:183
msgid "The operator class also keeps track of subsystem dimensions, which can be used for composing operators together. These can be accessed using the ``input_dims`` and ``output_dims`` functions."
msgstr "La classe ``Operator`` contient également les dimensions du sous-système qui peut être utile pour la composition d'opérateurs. Les valeurs de ces dimensions peuvent être obtenues en utilisant les fonctions ``input_dims`` et ``output_dims``."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:185
msgid "For :math:`2^N` by :math:`2^M` operators, the input and output dimension will be automatically assumed to be M-qubit and N-qubit:"
msgstr "Pour des opérateurs de dimension :math:`2^N` par :math:`2^M`, les dimensions d'entrée et de sortie seront automatiquement interprétées comme représentant M-qubit et N-qubit:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:229
msgid "If the input matrix is not divisible into qubit subsystems, then it will be stored as a single-qubit operator. For example, if we have a :math:`6\\times6` matrix:"
msgstr "Si la matrice d'entrée ne peut être divisée en sous systèmes de qubits, elle sera stockée comme un opérateur sur un seul quibt. Par exemple pour une matrice de taille :math:`6\\times6` :"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:273
msgid "The input and output dimension can also be manually specified when initializing a new operator:"
msgstr "On peut aussi spécifier manuellement les dimensions d'entrée et de sortie au moment de l'initialisation d'un nouvel opérateur :"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:353
msgid "We can also extract just the input or output dimensions of a subset of subsystems using the ``input_dims`` and ``output_dims`` functions:"
msgstr "Les fonctions ``input_dims`` et ``output_dims`` permettent de connaître les dimensions d'entrée ou de sortie d'un sous ensemble du du système :"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:397
msgid "Converting classes to Operators"
msgstr "Conversion de classes en opérateurs"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:399
msgid "Several other classes in Qiskit can be directly converted to an ``Operator`` object using the operator initialization method. For example:"
msgstr "Plusieurs autres types d'objets de Qiskit peuvent être convertis en objets de la classe ``Operator``en utilisant sa méthode d'initialisation. Par exemple :"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:401
msgid "``Pauli`` objects"
msgstr "les objets de type `Pauli`"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:402
msgid "``Gate`` and ``Instruction`` objects"
msgstr "les objets ``Gate`` et ``Instruction``"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:403
msgid "``QuantumCircuits`` objects"
msgstr "ainsi que les objets ``QuantumCircuits``"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:405
msgid "Note that the last point means we can use the ``Operator`` class as a unitary simulator to compute the final unitary matrix for a quantum circuit, without having to call a simulator backend. If the circuit contains any unsupported operations, an exception will be raised. Unsupported operations are: measure, reset, conditional operations, or a gate that does not have a matrix definition or decomposition in terms of gate with matrix definitions."
msgstr "Il est à noter que dans le dernier cas l'utilisation de la classe ``operator`` permet de calculer la matrice unitaire correspondant à un circuit quantique sans avoir besoin d'utiliser un émulateur. Si le circuit contient une operation non supportée la fonction retournera une exception. Ces opérations sont : la mesure, la mise à zero, les opérations conditionnelles, ou toute autre porte qui n'est pas définie par une matrice unitaire ou qui ne peut pas être décomposée en portes définies par une matrice unitaire."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:595
msgid "Using Operators in circuits"
msgstr "Utilisation d'opérateurs dans les circuits"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:597
msgid "Unitary ``Operators`` can be directly inserted into a ``QuantumCircuit`` using the ``QuantumCircuit.append`` method. This converts the ``Operator`` into a ``UnitaryGate`` object, which is added to the circuit."
msgstr "Les ``Operators`` unitaires peuvent être directement ajoutés à un ``QuantumCircuit`` en utilisant la méthode ``QuantumCircuit.append``. Ceci a pour effet de convertir l'`Operator` en objet de type ``UnitaryGate`` et de l'ajouter au circuit."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:599
msgid "If the operator is not unitary, an exception will be raised. This can be checked using the ``Operator.is_unitary()`` function, which will return ``True`` if the operator is unitary and ``False`` otherwise."
msgstr "Si l'opérateur n'est pas unitaire, une exception sera retournée à l'utilisateur. Ceci peut être prévenu par l'utilisation de la fonction ``Operator.is_unitary()`` qui renvoie ``True`` si l'opérateur est unitaire, et ``False`` sinon."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:636
msgid "Note that in the above example we initialize the operator from a ``Pauli`` object. However, the ``Pauli`` object may also be directly inserted into the circuit itself and will be converted into a sequence of single-qubit Pauli gates:"
msgstr "Notons que dans l'exemple ci-dessus, l'opérateur est initialisé à l'aide d'un objet de type ``Pauli``. Cependant l'objet de type ``Pauli`` peut aussi être inséré directement dans le circuit, et sera converti en une séquence de gates de Pauli sur un seul qubit :"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:745
msgid "Combining Operators"
msgstr "Combinaison d'opérateurs"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:747
msgid "Operators my be combined using several methods."
msgstr "Les opérateurs peuvent être combinés au moyen de différentes méthodes."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:750
msgid "Tensor Product"
msgstr "Produit Tensoriel"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:752
msgid "Two operators :math:`A` and :math:`B` may be combined into a tensor product operator :math:`A\\otimes B` using the ``Operator.tensor`` function. Note that if both A and B are single-qubit operators, then ``A.tensor(B)`` = :math:`A\\otimes B` will have the subsystems indexed as matrix B on subsystem 0, and matrix :math:`A` on subsystem 1."
msgstr "Deux opérateurs :math:`A` et :math:`B` peuvent être combinés en un opérateur qui est le produit tensoriel :math:`A\\otimes B` en utilisant la fonction ``Operator.tensor()``. \n"
"Si :math:`A` et :math:`B` sont des opérateurs chacun sur un seul qubit alors ``A.tensor(B)`` = :math:`A\\otimes B` correspondra à l'application de la matrice :math:`B` sur le sous système 0, et la matrice :math:`A` sur le sous système 1."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:804
msgid "Tensor Expansion"
msgstr "Expansion Tensorielle"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:806
msgid "A closely related operation is ``Operator.expand``, which acts like a tensor product but in the reverse order. Hence, for two operators :math:`A` and :math:`B` we have ``A.expand(B)`` = :math:`B\\otimes A` where the subsystems indexed as matrix A on subsystem 0, and matrix :math:`B` on subsystem 1."
msgstr "Une opération très proche de la précédente est ``Operator.expand`` qui agit de la même manière que le produit tensoriel, mais dans l'ordre inverse. C'est à dire que pour deux opérateurs :math:`A` et :math:`B` l'expansion `A.expand(B)` = :math:`B\\otimes A` correspondra à l'application de la matrice :math:`A` sur le sous système 0, et la matrice :math:`B` sur le sous système 1."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:858
msgid "Composition"
msgstr "Composition"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:860
msgid "We can also compose two operators :math:`A` and :math:`B` to implement matrix multiplication using the ``Operator.compose`` method. We have that ``A.compose(B)`` returns the operator with matrix :math:`B.A`:"
msgstr "Il est également possible de faire la composition de deux opérateurs :math:`A` et :math:`B` pour implémenter la multiplication de matrices en utilisant la méthode ``Operator.compose``. Ainsi, `A.compose(B)` retourne l'opérateur correspondant à la matrice :math:`B.A` :"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:907
msgid "We can also compose in the reverse order by applying :math:`B` in front of :math:`A` using the ``front`` kwarg of ``compose``: ``A.compose(B, front=True)`` = :math:`A.B`:"
msgstr "Il est également possible de faire la composition en ordre inverse en appliquant :math:`B` avant :math:`A`, en utilisant l'argument de mot clef front de la méthode compose comme ceci : ``A.compose(B, front=True)``= :math:`A.B` :"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:955
msgid "Subsystem Composition"
msgstr "Composition de sous-systèmes"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:957
msgid "Note that the previous compose requires that the total output dimension of the first operator :math:`A` is equal to total input dimension of the composed operator :math:`B` (and similarly, the output dimension of :math:`B` must be equal to the input dimension of :math:`A` when composing with ``front=True``)."
msgstr "On peut noter que dans les compositions vues précédemment, la dimension totale de sortie du premier opérateur :math:`A` est égale à la dimension totale d'entrée de l'opérateur :math:`B` (et de même, la dimension de sortie de :math:`B` doit être égale à la dimension de l'entrée de :math:`A` lorsque l'on utilise la composition avec l'option ``front=True``)."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:959
msgid "We can also compose a smaller operator with a selection of subsystems on a larger operator using the ``qargs`` kwarg of ``compose``, either with or without ``front=True``. In this case, the relevant input and output dimensions of the subsystems being composed must match. *Note that the smaller operator must always be the argument of ``compose`` method.*"
msgstr "Il est également possible d'effectuer les compositions sur un sous système d'un opérateur plus grand en utilisant l'argument de mot clef ``qargs`` (kwarq) de la méthode compose (avec ou sans l'utilisation de ``front=True``). Dans ce cas, les dimensions correspondant aux sous systèmes faisant l'objet de la composition doivent se correspondre. *Note : l'opérateur du plus petit sous système doit être passé en argument de la méthode ``compose`` appliquée au système*"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:961
msgid "For example, to compose a two-qubit gate with a three-qubit Operator:"
msgstr "Par exemple, pour composer une porte à deux qubits dans un opérateur à trois qubits :"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1103
msgid "Linear combinations"
msgstr "Combinaisons linéaires"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1105
msgid "Operators may also be combined using standard linear operators for addition, subtraction and scalar multiplication by complex numbers."
msgstr "Les opérateurs peuvent aussi être combinés en utilisant les fonctions standards d'addition de soustraction et de multiplication scalaire par des nombres complexes."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1159
msgid "An important point is that while ``tensor``, ``expand`` and ``compose`` will preserve the unitarity of unitary operators, linear combinations will not; hence, adding two unitary operators will, in general, result in a non-unitary operator:"
msgstr "Il est important de noter que si les méthodes ``tensor``, ``expand`` and ``compose`` conservent la propriété d'unitarité des opérateurs, les combinaisons linéaires d'opérateurs par contre ne le feront pas; ainsi l'addition de deux opérateurs unitaires donnera en général un opérateur non unitaire :"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1201
msgid "Implicit Conversion to Operators"
msgstr "Conversion implicite en opérateur"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1203
msgid "Note that for all the following methods, if the second object is not already an ``Operator`` object, it will be implicitly converted into one by the method. This means that matrices can be passed in directly without being explicitly converted to an ``Operator`` first. If the conversion is not possible, an exception will be raised."
msgstr "Notez que pour les méthodes ci-dessous, si le second objet utilisé n'est pas déjà de classe ``Operator``, il sera implicitement converti en objet de classe ``Operator``. \n"
"Ceci signifie que l'on peut passer directement des objets de type matrice en argument, sans avoir à les convertir préalablement et explicitement en opérateur. \n"
"Si la conversion n'est pas possible, une exception sera retournée."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1250
msgid "Comparison of Operators"
msgstr "Comparaison d'opérateurs"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1252
msgid "Operators implement an equality method that can be used to check if two operators are approximately equal."
msgstr "Une méthode de test d'égalité est implémentée pour les objets de type ``Operator``, elle peut être utilisée pour vérifier si deux opérateurs sont approximativement égaux."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1293
msgid "Note that this checks that each matrix element of the operators is approximately equal; two unitaries that differ by a global phase will not be considered equal:"
msgstr "Notons que cette méthode vérifie l'égalité approximative entre les éléments correspondant des matrices représentant les opérateurs ; deux opérateurs unitaires qui diffèreraient par une phase globale ne seront pas considérés comme égaux :"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1335
msgid "Process Fidelity"
msgstr "Fidélité de Process"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1337
msgid "We may also compare operators using the ``process_fidelity`` function from the *Quantum Information* module. This is an information theoretic quantity for how close two quantum channels are to each other, and in the case of unitary operators it does not depend on global phase."
msgstr "Nous pouvons également comparer les opérateurs à l'aide de la fonction ``process_fidelity`` du module *Quantum Information*. Il s'agit d'une notion de la théorie de l'information quantique permettant d'indiquer à quel point deux chemins quantiques sont équivalents, et dans le cas d'opérateurs unitaires, le résultat est indépendant de la phase globale."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1383
msgid "Note that process fidelity is generally only a valid measure of closeness if the input operators are unitary (or CP in the case of quantum channels), and an exception will be raised if the inputs are not CP."
msgstr "Note : la fidélité de process est en général une mesure valide de l'équivalence si les opérateurs considérés sont unitaires (ou CP- complètement positifs- dans le cas de chemins quantiques), et une exception sera retournée si les entrées ne sont pas CP."

