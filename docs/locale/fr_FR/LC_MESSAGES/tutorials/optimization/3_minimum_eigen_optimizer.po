msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-14 09:35+0000\n"
"PO-Revision-Date: 2020-07-31 17:27\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/3_minimum_eigen_optimizer.po\n"
"X-Crowdin-File-ID: 9152\n"
"Language: fr_FR\n"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:10
msgid "This page was generated from `tutorials/optimization/3_minimum_eigen_optimizer.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/optimization/3_minimum_eigen_optimizer.ipynb`__."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:9
msgid "Minimum Eigen Optimizer"
msgstr "Optimiseur de Valeure Propre Minimale"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:21
msgid "Introduction"
msgstr "Introduction"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:32
msgid "An interesting class of optimization problems to be addressed by quantum computing are Quadratic Unconstrained Binary Optimization (QUBO) problems. QUBO is equivalent to finding the ground state of a corresponding Hamiltonian, which is an important problem not only in optimization, but also in quantum chemistry and physics. For this translation, the binary variables taking values in :math:`\\{0, 1\\}` are replaced by spin variables taking values in :math:`\\{-1, +1\\}`, which allows to replace the resulting spin variables by Pauli Z matrices, and thus, an Hamiltonian. For more details on this mapping we refere to [1]."
msgstr "Une classe intéressante de problèmes d'optimisation à résoudre par le calcul quantique est celle des problèmes quadratiques non contraints d'optimisation binaire (Quadratic Unconstrained Binary Optimization ou QUBO). QUBO équivaut à trouver l'état fondamental d'un Hamiltonien correspondant, qui est un problème important non seulement en optimisation, mais aussi en chimie quantique et en physique. Pour cette traduction, les variables binaires qui prennent des valeurs dans :math:`\\{0, 1\\}` sont remplacées par des variables spin prenant des valeurs dans :math:`\\{-1, +1\\}`, qui permet de remplacer les variables de spin obtenues par des matrices de Pauli Z, et donc un Hamiltonien. Pour plus de détails sur ce mappage, nous nous référons à [1]."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:35
msgid "Qiskit provides automatic conversion from a suitable ``QuadraticProgram`` to an Ising Hamiltonian, which then allows to leverage all the ``MinimumEigenSolver`` available in Qiskit Aqua, such as - ``VQE``, - ``QAOA``, or - ``NumpyMinimumEigensolver`` (classical exact method)."
msgstr "Qiskit fournit la conversion automatique d'un ``QuadraticProgram`` approprié à un Hamiltonien Ising, qui permet alors de tirer parti de tous les ``MinimumEigenSolver`` disponibles dans Qiskit Aqua, tels que - ``VQE``, - ``QAOA``, ou - ``NumpyMinimumEigensolver`` (méthode exacte classique)."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:37
msgid "Qiskit wraps the translation to an Ising Hamiltonian (in Qiskit Aqua also called ``Operator``), the call to an ``MinimumEigensolver`` as well as the translation of the results back to ``OptimizationResult`` in the ``MinimumEigenOptimizer``."
msgstr "Qiskit fournit la traduction vers un Hamiltonien Ising (dans Qiskit Aqua également appelé ` ` Operator ` `), l'appel à un ` ` MinimumEigensolver ` ` ainsi que la traduction des résultats vers ` ` OptimizationResult ` ` dans ` ` MinimumEigenOptimizer ` `."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:39
msgid "In the following we first illustrate the conversion from a ``QuadraticProgram`` to an ``Operator`` and then show how to use the ``MinimumEigenOptimizer`` with different ``MinimumEigensolver`` to solve a given ``QuadraticProgram``. The algorithms in Qiskit automatically try to convert a given problem to the supported problem class if possible, for instance, the ``MinimumEigenOptimizer`` will automatically translate integer variables to binary variables or add a linear equality constraints as a quadratic penalty term to the objective. It should be mentioned that Aqua will through a ``QiskitOptimizationError`` if conversion of a quadratic program with integer variable is attempted."
msgstr "Dans ce qui suit, nous illustrons d'abord la conversion d'un ``QuadraticProgram`` à un ``Operator``, puis montrons comment utiliser ``MinimumEigenOptimizer`` avec le ``MinimumEigensolver`` pour résoudre un ``QuadraticProgram`` donné. Les algorithmes de Qiskit tentent automatiquement de convertir un problème donné en classe d'incident prise en charge si possible, par exemple, le ``MinimumEigenOptimizer`` traduira automatiquement les variables entières en variables binaires ou ajoutera une contrainte d'égalité linéaire en tant que terme de pénalité quadratique à l'objectif. Il convient de mentionner que Aqua va passer par une erreur ``QiskitOptimizationError`` si la conversion d'un programme quadratique avec une variable entière est tentée."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:42
msgid "The circuit depth of ``QAOA`` potentially has to be increased with the problem size, which might be prohibitive for near-term quantum devices. A possible workaround is Recursive QAOA, as introduced in [2]. Qiskit generalizes this concept to the ``RecursiveMinimumEigenOptimizer``, which is introduced at the end of this tutorial."
msgstr "La profondeur du circuit ``QAOA`` pourrait augmenter avec la taille du problème, ce qui pourrait être prohibitif à court terme pour les ordinateurs quantiques. Une solution possible est la QAOA récursive, telle qu'elle a été introduite dans le [2]. Qiskit généralise ce concept à ``RecursiveMinimumEigenOptimizer``, qui est introduit à la fin de ce tutoriel."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:45
msgid "References"
msgstr "Références"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:47
msgid "[1] [A. Lucas, *Ising formulations of many NP problems,* Front. Phys., 12 (2014).](https://arxiv.org/abs/1302.5843)"
msgstr "[1] [A. Lucas, *Ising formulations of many NP problems,* Front. Phys., 12 (2014).](https://arxiv.org/abs/1302.5843)"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:49
msgid "[2] [S. Bravyi, A. Kliesch, R. Koenig, E. Tang, *Obstacles to State Preparation and Variational Optimization from Symmetry Protection,* arXiv preprint arXiv:1910.08980 (2019).](https://arxiv.org/abs/1910.08980)"
msgstr "[2] [S. Bravyi, A. Kliesch, R. Koenig, E. Tang, *Obstacles to State Preparation and Variational Optimization from Symmetry Protection,* arXiv preprint arXiv:1910.08980 (2019).](https://arxiv.org/abs/1910.08980)"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:61
msgid "Converting a QUBO to an Operator"
msgstr "Conversion d'un QUBO en opérateur"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:153
msgid "Next we translate this QUBO into an Ising operator. This results not only in an ``Operator`` but also in a constant offset to be taking into account to shift the resulting value."
msgstr "Ensuite, nous traduisons ce QUBO en un opérateur Ising. Le résultat consiste non seulement dans un ``Operator`` mais aussi dans un décalage constant à prendre en compte pour recaler la valeur résultante."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:213
msgid "Sometimes an ``QuadraticProgram`` might also directly be given in the form of an ``Operator``. For such cases, Qiskit also provides a converter from an ``Operator`` back to a ``QuadraticProgram``, which we illustrate in the following."
msgstr "Parfois, un ``QuadraticProgram`` peut également être donné directement sous la forme d'un ``Operator``. Dans de tels cas, Qiskit fournit un convertisseur depuis un ``Operator`` vers un ``QuadraticProgram``, que nous illustrons dans ce qui suit."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:296
msgid "This converter allows, for instance, to translate an ``Operator`` to a ``QuadraticProgram`` and then solve the problem with other algorithms that are not based on the Ising Hamiltonian representation, such as the ``GroverOptimizer``."
msgstr "Ce convertisseur permet, par exemple de traduire un ``Operator`` en un ``QuadraticProgram`` puis de résoudre le problème avec d'autres algorithmes qui ne sont pas basés sur la représentation d'Ising Hamiltonien, comme le ``GroverOptimizer``."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:308
msgid "Solving a QUBO with the ``MinimumEigenOptimizer``"
msgstr "Résoudre un QUBO avec le ``MinimumEigenOptimizer``"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:319
msgid "We start by initializing the ``MinimumEigensolver`` we want to use."
msgstr "Nous commençons par initialiser le ``MinimumEigensolver`` que nous voulons utiliser."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:341
msgid "Then, we use the ``MinimumEigensolver`` to create ``MinimumEigenOptimizer``."
msgstr "Ensuite, nous utilisons le ``MinimumEigensolver`` pour créer ``MinimumEigenOptimizer``."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:363
msgid "We first use the ``MinimumEigenOptimizer`` based on the classical exact ``NumPyMinimumEigensolver`` to get the optimal benchmark solution for this small example."
msgstr "Nous utilisons d'abord le ``MinimumEigenOptimizer`` basé sur le ``NumPyMinimumEigensolver`` classique pour obtenir la solution de benchmark optimale pour ce petit exemple."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:404
msgid "Next we apply the ``MinimumEigenOptimizer`` based on ``QAOA`` to the same problem."
msgstr "Ensuite, nous appliquons le ``MinimumEigenOptimizer`` basé sur ``QAOA`` au même problème."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:446
msgid "``RecursiveMinimumEigenOptimizer``"
msgstr "``RecursiveMinimumEigenOptimizer``"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:457
msgid "The ``RecursiveMinimumEigenOptimizer`` takes a ``MinimumEigenOptimizer`` as input and applies the recursive optimization scheme to reduce the size of the problem one variable at a time. Once the size of the generated intermediate problem is below a given threshold (``min...``), the ``RecursiveMinimumEigenOptimizer`` uses another solver (``...``), e.g., an exact classical solver such as CPLEX or the ``MinimumEigenOptimizer`` based on the ``NumPyMinimumEigensolver``."
msgstr "Le ``RecursiveMinimumEigenOptimizer`` prend un ``MinimumEigenOptimizer`` en entrée et applique le schéma d'optimisation récursive pour réduire la taille du problème une variable à la fois. Une fois que la taille du problème intermédiaire généré est inférieure à un seuil donné (``min. .``), le ``RecursiveMinimumEigenOptimizer`` utilise un autre solveur (``...``), par exemple un solveur classique tel que CPLEX ou le ``MinimumEigenOptimizer`` basé sur le ``NumPyMinimumEigensolver``."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:459
msgid "In the following, we show how to use the ``RecursiveMinimumEigenOptimizer`` using the two ``MinimumEigenOptimizer`` introduced before."
msgstr "Dans ce qui suit, nous montrons comment utiliser le ``RecursiveMinimumEigenOptimizer`` en utilisant les deux ``MinimumEigenOptimizer`` introduits avant."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:470
msgid "First, we construct the ``RecursiveMinimumEigenOptimizer`` such that it reduces the problem size from 3 variables to 1 variable and then uses the exact solver for the last variable. Then we call ``solve`` to optimize the considered problem."
msgstr "Tout d'abord, nous construisons le ``RecursiveMinimumEigenOptimizer`` de telle sorte qu'il réduit la taille du problème de 3 variables à 1 variable et utilise ensuite le solveur exact pour la dernière variable. Puis nous appelons ``solve`` pour optimiser le problème considéré."

