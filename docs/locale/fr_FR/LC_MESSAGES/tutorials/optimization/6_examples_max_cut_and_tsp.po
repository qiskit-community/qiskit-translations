msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-02 15:42+0000\n"
"PO-Revision-Date: 2020-10-26 13:11\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/6_examples_max_cut_and_tsp.po\n"
"X-Crowdin-File-ID: 9360\n"
"Language: fr_FR\n"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:10
msgid "This page was generated from `tutorials/optimization/6_examples_max_cut_and_tsp.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/optimization/1_quadratic_program.ipynb`__."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:9
msgid "**Max-Cut and Traveling Salesman Problem**"
msgstr "** Max-Cut et Problème du Voyageur de Commerce (TSP pour Traveling Salesman Problem) * *"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:21
msgid "Introduction"
msgstr "Introduction"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:23
msgid "Many problems in quantitative fields such as finance and engineering are optimization problems. Optimization problems lie at the core of complex decision-making and definition of strategies."
msgstr "De nombreux problèmes dans des domaines quantitatifs tels que le financement et l'ingénierie sont des problèmes d'optimisation. Ces types de problèmes sont au cœur de la complexité de la prise de décision et de la définition des stratégies."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:25
msgid "Optimization (or combinatorial optimization) means searching for an optimal solution in a finite or countably infinite set of potential solutions. Optimality is defined with respect to some criterion function, which is to be minimized or maximized. This is typically called cost function or objective function."
msgstr "Optimisation (ou optimisation combinatoire) signifie rechercher une solution optimale dans un ensemble fini ou infini dénombrable de solutions potentielles. L'optimalité est définie par rapport à une fonction de critère, qui doit être minimisée ou maximisée. Cette fonction est généralement appelée fonction de coût ou fonction objectif."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:27
msgid "**Typical optimization problems**"
msgstr "** Problèmes d'optimisation typiques **"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:29
msgid "Minimization: cost, distance, length of a traversal, weight, processing time, material, energy consumption, number of objects"
msgstr "Recherche de minimum : coût, distance, longueur d'une traversée, poids, temps de traitement, matériau, consommation d'énergie, nombre d'objets"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:31
msgid "Maximization: profit, value, output, return, yield, utility, efficiency, capacity, number of objects"
msgstr "Recherche de maximum : profit, valeur, rendement, utilité, efficacité, capacité, nombre d'objets"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:33
msgid "We consider here max-cut problems of practical interest in many fields, and show how they can be mapped on quantum computers manually and how Qiskit's optimization module supports this."
msgstr "Nous considérons ici les problèmes de type max-cut qui ont un intérêt pratique dans de nombreux domaines, et nous montrons comment ils peuvent être implémentés manuellement sur les ordinateurs quantiques et comment le module d'optimisation de Qiskit supporte cela."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:36
msgid "Weighted Max-Cut"
msgstr "Max-Cut pondéré"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:38
msgid "Max-Cut is an NP-complete problem, with applications in clustering, network science, and statistical physics. To grasp how practical applications are mapped into given Max-Cut instances, consider a system of many people that can interact and influence each other. Individuals can be represented by vertices of a graph, and their interactions seen as pairwise connections between vertices of the graph, or edges. With this representation in mind, it is easy to model typical marketing problems. For example, suppose that it is assumed that individuals will influence each other's buying decisions, and knowledge is given about how strong they will influence each other. The influence can be modeled by weights assigned on each edge of the graph. It is possible then to predict the outcome of a marketing strategy in which products are offered for free to some individuals, and then ask which is the optimal subset of individuals that should get the free products, in order to maximize revenues."
msgstr "Le problème Max-Cut est de classe NP-complet, avec des applications en recherche de clusters, en sciences des réseaux et en physique statistique. Pour comprendre comment les applications pratiques correspondent à des instances de Max-Cut, pensez à un système de nombreuses personnes qui peuvent interagir et s'influencer mutuellement. Les individus peuvent être représentés par des sommets d'un graphe, et leurs interactions vues comme les connexions entre des sommets du graphe, ou des arêtes. Avec cette représentation à l'esprit, il est facile de modéliser des problèmes de marketing typiques. Par exemple, supposons qu'on suppose que les personnes influeront sur les décisions d'achat de l'autre et que les connaissances sont données sur la force de leur influence. L'influence peut être modélisée par des pondérations affectées à chaque arête du graphique. Il est alors possible de prédire le résultat d'une stratégie de commercialisation dans laquelle les produits sont offerts gratuitement à certains individus, puis de demander quel est le sous-ensemble optimal d'individus qui devraient obtenir les produits gratuits, afin de maximiser les revenus."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:41
msgid "The formal definition of this problem is the following:"
msgstr "La définition formelle de ce problème est la suivante :"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:43
msgid "Consider an :math:`n`-node undirected graph *G = (V, E)* where *\\|V\\| = n* with edge weights :math:`w_{ij}>0`, :math:`w_{ij}=w_{ji}`, for :math:`(i, j)\\in E`. A cut is defined as a partition of the original set V into two subsets. The cost function to be optimized is in this case the sum of weights of edges connecting points in the two different subsets, *crossing* the cut. By assigning :math:`x_i=0` or :math:`x_i=1` to each node :math:`i`, one tries to maximize the global profit function (here and in the following summations run over indices 0,1,...n-1)"
msgstr "Considérons un graphique non orienté à :math:`n`-noeuds *G = (V, E) * où * \\|V\\ | = n * avec des poids d'arête :math:` w_{ij}> 0`, :math:` w_{ij}= w_{ji}`, pour :math:` (i, ) \\in E ` une coupe est définie comme une partition de l'ensemble V d'origine en deux sous-ensembles. La fonction de coût à optimiser est dans ce cas la somme des poids des arêtes qui *croisent* la coupe dans les deux sous-ensembles définis par la coupe. En assignant :math:`x_i=0` ou :math:`x_i=1` à chaque noeud :math:`i`, on essaie de maximiser la fonction de profit global (ici et dans la suite, les sommations s'effectuent sur les indices 0,1, ... n-1)"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:46
msgid "\\tilde{C}(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j).\n\n"
msgstr "\\tilde{C}(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j).\n\n"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:48
msgid "In our simple marketing model, :math:`w_{ij}` represents the probability that the person :math:`j` will buy a product after :math:`i` gets a free one. Note that the weights :math:`w_{ij}` can in principle be greater than :math:`1` (or even negative), corresponding to the case where the individual :math:`j` will buy more than one product. Maximizing the total buying probability corresponds to maximizing the total future revenues. In the case where the profit probability will be greater than the cost of the initial free samples, the strategy is a convenient one. An extension to this model has the nodes themselves carry weights, which can be regarded, in our marketing model, as the likelihood that a person granted with a free sample of the product will buy it again in the future. With this additional information in our model, the objective function to maximize becomes"
msgstr "Dans notre modèle de marketing simplifié :math:`w_{ij}` représente la probabilité que la personne :math:`j` achète un produit après que la personne :math:`i` en ait obtenu un gratuitement. Notez que les poids :math:`w_{ij}` peuvent en principe être supérieurs à :math:`1` (ou même négatifs), ce qui correspond au cas où la personne :math:`j` achètera plus d'un produit. Maximiser le total des probabilités d'achat correspond à la maximisation du total des recettes futures. Dans le cas où la probabilité de profit sera supérieure au coût des échantillons gratuits initiaux, la stratégie est convenable. Une extension de ce modèle consiste à ce que des poids soient aussi attribués aux noeuds eux-même. Dans notre modèle de marketing, ces poids peuvent être considérés comme la probabilité qu'une personne qui a reçu un échantillon gratuit du produit l'achètera à nouveau à l'avenir. Avec cette information supplémentaire dans notre modèle, la fonction objectif à maximiser devient maintenant"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:51
msgid "C(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j)+\\sum_i w_i x_i.\n\n"
msgstr "C(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j)+\\sum_i w_i x_i.\n\n"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:53
msgid "In order to find a solution to this problem on a quantum computer, one needs first to map it to an Ising Hamiltonian. This can be done with the assignment :math:`x_i\\rightarrow (1-Z_i)/2`, where :math:`Z_i` is the Pauli Z operator that has eigenvalues :math:`\\pm 1`. Doing this we find that"
msgstr "Pour trouver une solution à ce problème sur un ordinateur quantique, il faut d'abord l'associer à un hamiltonien de Ising. Ceci peut être fait avec l'affectation :math:`x_i\\rightarrow (1-Z_i) /2`, où :math:`Z_i` est l'opérateur de Pauli Z qui a des valeurs propres :math:`\\pm 1`. Cela nous permet de constater que"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:55
msgid "C(\\textbf{Z}) = \\sum_{i,j} \\frac{w_{ij}}{4} (1-Z_i)(1+Z_j) + \\sum_i \\frac{w_i}{2} (1-Z_i) = -\\frac{1}{2}\\left( \\sum_{i<j} w_{ij} Z_i Z_j +\\sum_i w_i Z_i\\right)+\\mathrm{const},\n\n"
msgstr "C(\\textbf{Z}) = \\sum_{i,j} \\frac{w_{ij}}{4} (1-Z_i)(1+Z_j) + \\sum_i \\frac{w_i}{2} (1-Z_i) = -\\frac{1}{2}\\left( \\sum_{i<j} w_{ij} Z_i Z_j +\\sum_i w_i Z_i\\right)+\\mathrm{const},\n\n"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:57
msgid "where $:nbsphinx-math:`\\mathrm{const}` = :nbsphinx-math:`\\sum`\\ *{i<j}w*\\ {ij}/2+:nbsphinx-math:`\\sum`\\_i w\\_i/2 $. In other terms, the weighted Max-Cut problem is equivalent to minimizing the Ising Hamiltonian"
msgstr "où $:nbsphinx-math:` \\mathrm{const}` = :nbsphinx-math:` \\sum ` \\ * { i <j } w*\\ {ij}/2 +:nbsphinx-math:` \\sum ` \\_i w \\_i/2 $. En d'autres termes, le problème Max-Cut pondéré est équivalent à la minimisation de l'hamiltonien ising"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:59
msgid "H = \\sum_i w_i Z_i + \\sum_{i<j} w_{ij} Z_iZ_j.\n\n"
msgstr "H = \\sum_i w_i Z_i + \\sum_{i<j} w_{ij} Z_iZ_j.\n\n"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:61
msgid "Qiskit's optimization module can generate the Ising Hamiltonian for the first profit function :math:`\\tilde{C}`. To this extent, function :math:`\\tilde{C}` can be modeled as a ``QuadraticProgram``, which provides the ``to_ising()`` method."
msgstr "Le module d'optimisation de Qiskit peut générer l'hamiltonien Ising pour la première fonction de résultat :math:`\\tilde{C}`. Pour cela, la fonction :math:`\\tilde{C}` peut être modélisée comme un ``QuadraticProgram``, qui fournit la méthode ``to_ising ()``."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:64
msgid "Approximate Universal Quantum Computing for Optimization Problems"
msgstr "Calcul Quantique Universel Approximatif pour les Problèmes d'Optimization"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:66
msgid "There has been a considerable amount of interest in recent times about the use of quantum computers to find a solution to combinatorial optimization problems. It is important to say that, given the classical nature of combinatorial problems, exponential speedup in using quantum computers compared to the best classical algorithms is not guaranteed. However, due to the nature and importance of the target problems, it is worth investigating heuristic approaches on a quantum computer that could indeed speed up some problem instances. Here we demonstrate an approach that is based on the *Quantum Approximate Optimization Algorithm* (QAOA) by Farhi, Goldstone, and Gutman (2014). We frame the algorithm in the context of *approximate quantum computing*, given its heuristic nature."
msgstr "Ces derniers temps, on s'est beaucoup intéressé à l'utilisation des ordinateurs quantiques pour trouver une solution aux problèmes d'optimisation combinatoire. Il est important de dire que, compte tenu de la nature classique des problèmes combinatoires, l'accélération exponentielle de l'utilisation des ordinateurs quantiques par rapport aux meilleurs algorithmes classiques n'est pas garantie. Cependant, en raison de la nature et de l'importance des problèmes ciblés, il est utile d'étudier des approches heuristiques sur un ordinateur quantique qui pourraient effectivement accélérer certaines instances de problèmes. Nous démontrons ici une approche basée sur l'algorithme QAOA (*Quantum Approximate Optimization Algorithm *) de Farhi, Goldstone et Gutman (2014). Nous utilisons l'algorithme dans le contexte de *l'informatique quantique approximative*, étant donné sa nature heuristique."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:69
msgid "The algorithm works as follows:"
msgstr "L'algorithme fonctionne comme suit:"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:71
msgid "Choose the :math:`w_i` and :math:`w_{ij}` in the target Ising problem. In principle, even higher powers of Z are allowed."
msgstr "Choisissez les :math:` w_i ` et :math:` w_{ij}` dans le problème Ising cible. En principe, même des puissances plus élevées de Z sont autorisées."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:73
msgid "Choose the depth of the quantum circuit :math:`m`. Note that the depth can be modified adaptively."
msgstr "Choisissez la profondeur du circuit quantique :math:` m `. Notez que la profondeur peut être modifiée de façon adaptative."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:75
msgid "Choose a set of controls :math:`\\theta` and make a trial function :math:`|\\psi(\\boldsymbol\\theta)\\rangle`, built using a quantum circuit made of C-Phase gates and single-qubit Y rotations, parameterized by the components of :math:`\\boldsymbol\\theta`."
msgstr "Choisissez un ensemble de contrôles :math:`\\theta` et créez une fonction d'essai :math:`|\\psi(\\boldsymbol\\theta)\\rangle`, construite à l'aide d'un circuit quantique fait de portes C-Phase et de rotations en Y mono-qubits qui sont paramétrées par les composantes de :math:`\\boldsymbol\\theta`."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:77
msgid "Evaluate"
msgstr "Evaluer"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:79
msgid "C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)~|H|~\\psi(\\boldsymbol\\theta)\\rangle = \\sum_i w_i \\langle\\psi(\\boldsymbol\\theta)~|Z_i|~\\psi(\\boldsymbol\\theta)\\rangle+ \\sum_{i<j} w_{ij} \\langle\\psi(\\boldsymbol\\theta)~|Z_iZ_j|~\\psi(\\boldsymbol\\theta)\\rangle\n\n"
"by sampling the outcome of the circuit in the Z-basis and adding the expectation values of the individual Ising terms together. In general, different control points around :math:`\\boldsymbol\\theta` have to be estimated, depending on the classical optimizer chosen."
msgstr "C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)~|H|~\\psi(\\boldsymbol\\theta)\\rangle = \\sum_i w_i \\langle\\psi(\\boldsymbol\\theta)~|Z_i|~\\psi(\\boldsymbol\\theta)\\rangle+ \\sum_{i<j} w_{ij} \\langle\\psi(\\boldsymbol\\theta)~|Z_iZ_j|~\\psi(\\boldsymbol\\theta)\\rangle\n\n"
"en échantillonnant le résultat du circuit dans la base de mesure Z et en ajoutant les valeurs d'espérance des différents termes d'Ising. En général, différents points de contrôle autour de :math:`\\boldsymbol\\theta` doivent être estimés, selon l'optimiseur classique choisi."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:83
msgid "Use a classical optimizer to choose a new set of controls."
msgstr "Utiliser un optimiseur classique pour choisir un nouvel ensemble de contrôles."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:85
msgid "Continue until :math:`C(\\boldsymbol\\theta)` reaches a minimum, close enough to the solution :math:`\\boldsymbol\\theta^*`."
msgstr "Continuer jusqu'à ce que :math:`C(\\boldsymbol\\theta)` atteigne un minimum, assez proche de la solution :math:`\\boldsymbol\\theta^*`."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:87
msgid "Use the last :math:`\\boldsymbol\\theta` to generate a final set of samples from the distribution :math:`|\\langle z_i~|\\psi(\\boldsymbol\\theta)\\rangle|^2\\;\\forall i` to obtain the answer."
msgstr "Utilisez le dernier :math:`\\boldsymbol\\theta` pour générer un ensemble final d'échantillons de la distribution :math:`|\\langle z_i ~ | \\psi (\\boldsymbol\\theta)\\rangle | ^ 2 \\ ; \\forall i` pour obtenir la réponse."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:89
msgid "It is our belief the difficulty of finding good heuristic algorithms will come down to the choice of an appropriate trial wavefunction. For example, one could consider a trial function whose entanglement best aligns with the target problem, or simply make the amount of entanglement a variable. In this tutorial, we will consider a simple trial function of the form"
msgstr "Nous croyons que la difficulté de trouver de bons algorithmes heuristiques se fera au choix d'une fonction d'onde d'essai appropriée. Par exemple, on pourrait envisager une fonction d'essai dont le caractère d'intrication s'aligne le mieux sur le problème cible, ou simplement faire le montant de l'intrication d'une variable. Dans ce tutoriel, nous considérerons une fonction d'essai simple du formulaire"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:91
msgid "|\\psi(\\theta)\\rangle  = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m |+\\rangle\n\n"
msgstr "|\\psi(\\theta)\\rangle  = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m |+\\rangle\n\n"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:93
msgid "where :math:`U_\\mathrm{entangler}` is a collection of C-Phase gates (fully entangling gates), and :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^n Y(\\theta_{i})`, where :math:`n` is the number of qubits and :math:`m` is the depth of the quantum circuit. The motivation for this choice is that for these classical problems this choice allows us to search over the space of quantum states that have only real coefficients, still exploiting the entanglement to potentially converge faster to the solution."
msgstr "où :math:`U_ \\mathrm{entangler}` est une collection de portes C-Phase (portes entièrement intricantes), et :math:` U_ \\mathrm{single}(\\theta) = \\prod_ { i= 1 } ^ n Y (\\theta_{i}) `, où :math:` n ` est le nombre de qubits et :math:` m ` est la profondeur du circuit quantique. La raison de ce choix est que pour ces problèmes classiques ce choix nous permet de chercher dans l'espace des états quantiques qui n'ont que des coefficients réels, en exploitant encore l'intrication pour potentiellement converger plus vite vers la solution."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:96
msgid "One advantage of using this sampling method compared to adiabatic approaches is that the target Ising Hamiltonian does not have to be implemented directly on hardware, allowing this algorithm not to be limited to the connectivity of the device. Furthermore, higher-order terms in the cost function, such as :math:`Z_iZ_jZ_k`, can also be sampled efficiently, whereas in adiabatic or annealing approaches they are generally impractical to deal with."
msgstr "L'un des avantages de l'utilisation de cette méthode d'échantillonnage par rapport aux approches adiabatiques est que l'hamiltonien d'Ising cible n'a pas à être mis en oeuvre directement sur le matériel, ce qui permet à cet algorithme de être limité par la connectivité de l'appareil. En outre, les termes plus élevés dans la fonction de coût, tels que :math:` Z_iZ_jZ_k `, peuvent également être échantillonnés efficacement, alors que dans les approches adiabatiques ou recuits, ils sont généralement peu pratiques à traiter."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:98
msgid "References: - A. Lucas, Frontiers in Physics 2, 5 (2014) - E. Farhi, J. Goldstone, S. Gutmann e-print arXiv 1411.4028 (2014) - D. Wecker, M. B. Hastings, M. Troyer Phys. Rev. A 94, 022309 (2016) - E. Farhi, J. Goldstone, S. Gutmann, H. Neven e-print arXiv 1703.06199 (2017)"
msgstr "Références:-A. Lucas, Frontiers in Physics 2, 5 (2014)-E. Farhi, J. Goldstone, S. Gutmann e-print arXiv 1411.4028 (2014)-D. Wecker, M. B. Hastings, M. Troyer Phys. Rev. A 94, 022309 (2016)-E. Farhi, J. Goldstone, S. Gutmann, H. Neven e-print arXiv 1703.06199 (2017)"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:142
msgid "Max-Cut problem"
msgstr "Problème Max-Cut"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:232
#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:820
msgid "Brute force approach"
msgstr "Approche de force brute"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:234
msgid "Try all possible :math:`2^n` combinations. For :math:`n = 4`, as in this example, one deals with only 16 combinations, but for n = 1000, one has 1.071509e+30 combinations, which is impractical to deal with by using a brute force approach."
msgstr "Essayez toutes les combinaisons possibles :math:`2^n`. Pour :math:`n = 4`, comme dans cet exemple, on ne traite que de 16 combinaisons, mais pour n = 1000, on a 1,071509e+30 combinaisons, ce qui n'est pas pratique pour traiter avec une approche de force brute."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:332
#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:906
msgid "Mapping to the Ising problem"
msgstr "Transposition vers le problème Ising"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:343
msgid "Qiskit provides functionality to directly generate the Ising Hamiltonian as well as create the corresponding ``QuadraticProgram``."
msgstr "Qiskit fournit une fonctionnalité pour générer directement l'hamiltonien d'Ising ainsi que pour créer le ``QuadraticProgram`` correspondant."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:496
msgid "Since the problem was cast to a minimization problem, the solution of :math:`-4` corresponds to the optimum."
msgstr "Comme le problème a été converti en un problème de minimisation, la solution :math:` -4 ` correspond à l'optimum."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:508
#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:1163
msgid "Checking that the full Hamiltonian gives the right cost"
msgstr "Vérification que l'hamiltonien complet produit le bon coût"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:575
#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:1232
msgid "Running it on quantum computer"
msgstr "L'exécuter sur un ordinateur quantique"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:577
#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:1234
msgid "We run the optimization routine using a feedback loop with a quantum computer that uses trial functions built with Y single-qubit rotations, :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^n Y(\\theta_{i})`, and entangler steps :math:`U_\\mathrm{entangler}`."
msgstr "Nous exécutons la routine d'optimisation à l'aide d'une boucle de rétroaction avec un ordinateur quantique qui utilise des fonctions d'essai construites avec des rotations de Y sur un qubit, :math:` U_ \\mathrm{single}(\\theta) = \\prod_ { i= 1 } ^ n Y (\\theta_{i}) `, et avec des étapes d'intrication :math:` U_ \\mathrm{entangler}`."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:716
msgid "Traveling Salesman Problem"
msgstr "Problème du Voyageur de Commerce"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:718
msgid "In addition to being a notorious NP-complete problem that has drawn the attention of computer scientists and mathematicians for over two centuries, the Traveling Salesman Problem (TSP) has important bearings on finance and marketing, as its name suggests. Colloquially speaking, the traveling salesman is a person that goes from city to city to sell merchandise. The objective in this case is to find the shortest path that would enable the salesman to visit all the cities and return to its hometown, i.e. the city where he started traveling. By doing this, the salesman gets to maximize potential sales in the least amount of time."
msgstr "En plus d'être un problème d'NP-complet notoire, qui a attiré l'attention des informaticiens et des mathématiciens depuis plus de deux siècles, le \"Problème du Voyageur de Commerce ( ou \"Traveling Salesman Problem\" - TSP) a des relations importantes en matière de finance et de marketing. Pour le dire simplement, le vendeur ambulant est une personne qui va de ville en ville pour vendre des marchandises. L'objectif dans ce cas est de trouver le chemin le plus court permettant au vendeur de visiter toutes les villes et de retourner dans sa ville de départ. Ce faisant, le vendeur peut maximiser les ventes potentielles pendant la plus petite durée."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:721
msgid "The problem derives its importance from its \"hardness\" and ubiquitous equivalence to other relevant combinatorial optimization problems that arise in practice."
msgstr "L'importance de ce problème tient d'une part à sa \"difficulté\" et d'autre part à son équivalence avec d'autres problèmes d'optimisation qui se posent dans la pratique."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:723
msgid "The mathematical formulation with some early analysis was proposed by W.R. Hamilton in the early 19th century. Mathematically the problem is, as in the case of Max-Cut, best abstracted in terms of graphs. The TSP on the nodes of a graph asks for the shortest *Hamiltonian cycle* that can be taken through each of the nodes. A Hamilton cycle is a closed path that uses every vertex of a graph once. The general solution is unknown and an algorithm that finds it efficiently (e.g., in polynomial time) is not expected to exist."
msgstr "La formulation mathématique ainsi que des premières analyse sont été proposées par W.R. Hamilton au début du XIXe siècle. Mathématiquement ce problème (comme dans le cas de Max-Cut) est représenté de manière satisfaisante en terme de graphes. Le TSP sur les noeuds d'un graphe correspond à la recherche du plus court *cycle hamiltonien*. Un cycle hamiltonien est un circuit fermé qui utilise tous les sommets d'un graphe une fois. La solution générale est inconnue et l'existence d'un algorithme qui résout ce problème efficacement (par exemple, en temps polynomial) n'est pas démontrée."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:726
msgid "Find the shortest Hamiltonian cycle in a graph :math:`G=(V,E)` with :math:`n=|V|` nodes and distances, :math:`w_{ij}` (distance from vertex :math:`i` to vertex :math:`j`). A Hamiltonian cycle is described by :math:`N^2` variables :math:`x_{i,p}`, where :math:`i` represents the node and :math:`p` represents its order in a prospective cycle. The decision variable takes the value 1 if the solution occurs at node :math:`i` at time order :math:`p`. We require that every node can only appear once in the cycle, and for each time a node has to occur. This amounts to the two constraints (here and in the following, whenever not specified, the summands run over 0,1,...N-1)"
msgstr "Il s'agit de trouver hamiltonien le plus court dans un graphe :math:`G = (V, E)` avec :math:`n = | V |` noeuds et les distances :math:` w_{ij}` (distance du sommet :math:`i` au sommet :math:`j`). Un cycle hamiltonien est décrit par :math:`N^2` variables :math:`x_{i,p}`, où :math:`i` représente le sommet et :math:`p` représente son ordre dans un cycle prospectif. La variable de décision prend la valeur 1 si la solution se produit sur le noeud :math:`i` au rang :math:`p`. Il faut que chaque somment apparaissent une fois et une seule dans le cycle et à chaque rang, il doit y avoir un sommet. Cela équivaut aux deux contraintes (ici et dans la suite, chaque fois que ce n'est pas spécifié, les sommations se font sur 0,1, ...N-1)"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:729
msgid "\\sum_{i} x_{i,p} = 1 ~~\\forall p\n\n"
msgstr "\\sum_{i} x_{i,p} = 1 ~~\\forall p\n\n"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:731
msgid "\\sum_{p} x_{i,p} = 1 ~~\\forall i.\n\n"
msgstr "\\sum_{p} x_{i,p} = 1 ~~\\forall i.\n\n"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:733
msgid "For nodes in our prospective ordering, if :math:`x_{i,p}` and :math:`x_{j,p+1}` are both 1, then there should be an energy penalty if :math:`(i,j) \\notin E` (not connected in the graph). The form of this penalty is"
msgstr "Pour les noeuds de notre cycle prospectif, si :math:`x_{i,p}` et :math:`x_{j, p + 1 }` sont tous deux à 1 et que :math:`(i, j) \\notin E` (i et j ne sont pas connectés dans le graphe), cela devrait se traduire par un coût énergétique . La forme de cette pénalité est"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:735
msgid "\\sum_{i,j\\notin E}\\sum_{p} x_{i,p}x_{j,p+1}>0,\n\n"
msgstr "\\sum_{i,j\\notin E}\\sum_{p} x_{i,p}x_{j,p+1}>0,\n\n"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:737
msgid "where it is assumed the boundary condition of the Hamiltonian cycles :math:`(p=N)\\equiv (p=0)`. However, here it will be assumed a fully connected graph and not include this term. The distance that needs to be minimized is"
msgstr "nous supposons que la condition de limite des cycles hamiltoniens :math:` (p=N) \\equiv (p= 0) ` est vérifiée. Nous supposons également que le graphe est entièrement connecté et n'inclut pas ce terme. La distance qui à réduire est alors"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:739
msgid "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}.\n\n"
msgstr "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}.\n\n"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:741
msgid "Putting this all together in a single objective function to be minimized, we get the following:"
msgstr "En mettant tout cela ensemble dans une seule fonction objectif à minimiser, nous obtenons les éléments suivants:"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:743
msgid "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}+ A\\sum_p\\left(1- \\sum_i x_{i,p}\\right)^2+A\\sum_i\\left(1- \\sum_p x_{i,p}\\right)^2,\n\n"
msgstr "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}+ A\\sum_p\\left(1- \\sum_i x_{i,p}\\right)^2+A\\sum_i\\left(1- \\sum_p x_{i,p}\\right)^2,\n\n"

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:745
msgid "where :math:`A` is a free parameter. One needs to ensure that :math:`A` is large enough so that these constraints are respected. One way to do this is to choose :math:`A` such that :math:`A > \\mathrm{max}(w_{ij})`."
msgstr "où :math:`A` est un paramètre libre. Il faut s'assurer que le :math:`A` est suffisamment grand pour que ces contraintes soient respectées. Une façon de le faire est de choisir :math:`A` tel que :math:`A > \\mathrm{max}(w_{ij})`."

#: ../../tutorials/optimization/6_examples_max_cut_and_tsp.ipynb:747
msgid "Once again, it is easy to map the problem in this form to a quantum computer, and the solution will be found by minimizing a Ising Hamiltonian."
msgstr "Encore une fois, il est facile de relier le problème sous cette forme à un ordinateur quantique, et la solution sera trouvée en minimisant un hamiltonien de Ising."

