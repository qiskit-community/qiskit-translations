msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-14 09:35+0000\n"
"PO-Revision-Date: 2020-07-31 17:27\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/1_quadratic_program.po\n"
"X-Crowdin-File-ID: 9148\n"
"Language: fr_FR\n"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:10
msgid "This page was generated from `tutorials/optimization/1_quadratic_program.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/optimization/1_quadratic_program.ipynb`__."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:9
msgid "Quadratic Programs"
msgstr "Programmes quadratiques"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:21
msgid "Introduction"
msgstr "Introduction"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:32
msgid "In this tutorial, we briefly introduce how to build optimization problems using Qiskit's optimization module. Qiskit introduces the ``QuadraticProgram`` class to make a model of an optimization problem. More precicely, it deals with quadratically constrained quadratic programs given as follows:"
msgstr "Dans ce tutoriel, nous vous présentons brièvement comment générer des problèmes d'optimisation à l'aide du module d'optimisation de Qiskit. Qiskit introduit la classe ``QuadraticProgram`` pour construire un modèle d'un problème d'optimisation. Plus précisément, il traite des programmes quadratiques à contraintes quadratiques données comme suit :"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:34
msgid "\\begin{align} \\text{minimize}\\quad& x^\\top Q_0 x + c^\\top x\\\\ \\text{subject to}\\quad& A x \\leq b\\\\ & x^\\top Q_i x + a_i^\\top x \\leq r_i, \\quad 1,\\dots,i,\\dots,q\\\\ & l_i \\leq x_i \\leq u_i, \\quad 1,\\dots,i,\\dots,n, \\end{align}"
msgstr "\\begin{align} \\text{minimize}\\quad& x^\\top Q_0 x + c^\\top x\\\\ \\text{subject to}\\quad& A x \\leq b\\\\ & x^\\top Q_i x + a_i^\\top x \\leq r_i, \\quad 1,\\dots,i,\\dots,q\\\\ & l_i \\leq x_i \\leq u_i, \\quad 1,\\dots,i,\\dots,n, \\end{align}"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:44
msgid "where the :math:`Q_i` are :math:`n \\times n` matrices, :math:`A` is a :math:`m \\times n` matrix , :math:`x`, and :math:`c` are :math:`n`-dimensional vectors, :math:`b` is an :math:`m`-dimensional vector, and where :math:`x` can defined as binary, integer, or continuous variables. In addition to \":math:`\\leq`\" constraints 'QuadraticProgram' also supports \":math:`\\geq`\" and \":math:`=`\"."
msgstr "où les :math:` Q_i ` sont :math:` n \\t, n ` matrices, :math:` A ` est un :math:` m \\times n ` matrice, :math:` x `, et :math:` c ` sont des vecteurs bidimensionnels :math:` s, :math:` b ` est un vecteur de dimension :math:` m, et où :math:` x ` peut être défini comme des variables binaires, entières ou continues. En plus de la contrainte \":math:` \\leq` 'QuadraticProgram' prend également en charge\":math:` \\geq ` \n"
" et :math:` =` ."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:56
msgid "Loading a ``Quadratic Program`` from an LP file"
msgstr "Chargement d'un ``Quadratic Program`` depuis un fichier LP"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:67
msgid "As setup, you need to import the following module."
msgstr "Pour préparer votre station de travail vous devez importer le module suivant."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:88
msgid "You start with an empty model. How to add variables and constraints to a model is explained in the section \"Directly constructing a ``QuadraticProgram``\"."
msgstr "Vous démarrez avec un modèle vierge. La manière d'ajouter des variables et des contraintes à un modèle est expliqué dans la section \"Construire directement un ``QuadraticProgamme``\" (Programme Quadratique)."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:99
msgid "Qiskit's optimization module supports the conversion from Docplex model. You can easily make a model of an optimization problem with Docplex. You can find the documentation of Docplex at https://ibmdecisionoptimization.github.io/docplex-doc/mp/index.html"
msgstr "Le module d'optimisation de Qiskit prend en charge la conversion à partir du modèle Docplex. Vous pouvez facilement créer un modèle pour un problème d'optimisation avec Docplex. Vous trouverez la documentation de Docplex à l'adresse https://ibmdecisionoptimization.github.io/docplex-doc/mp/index.html"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:101
msgid "You can load a Docplex model to ``QuadraticProgram`` by invoking ``from_docplex``."
msgstr "Vous pouvez charger un modèle Docplex vers le ``QuadraticProgram`` en appelant ``from_docplex``."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:113
msgid "Loading a ``QuadraticProgram`` from a docplex model"
msgstr "Chargement d'un ` ` QuadraticProgram ` ` à partir d'un modèle docplex"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:275
msgid "Directly constructing a ``QuadraticProgram``"
msgstr "Construction directe d'un ``QuadraticProgram``"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:286
msgid "We then explain how to make model of an optimization problem directly using ``QuadraticProgram``. Let's start from an empty model."
msgstr "Nous expliquons ensuite comment modéliser un problème d'optimisation directement en utilisant le ``QuadraticProgram``. Commençons à partir d'un modèle vide."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:348
msgid "The ``QuadraticProgram`` supports three types of variables: - Binary variable - Integer variable - Continuous variable"
msgstr "Le programme ` ` QuadraticProgram ` ` prend en charge trois types de variables : -Variable binaire -Variable de type entier -Variable continue"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:350
msgid "When you add variables, you can specify names, types, lower bounds and upper bounds."
msgstr "Lorsque vous ajoutez des variables, vous pouvez spécifier des noms, des types, des bornes inférieures et supérieures."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:352
msgid "When you display your problem as LP format, ``Binaries`` denotes binary variables and ``Generals`` denotes integer variables. If variables are not included in either ``Binaries`` or ``Generals``, such variables are continuous ones with default lower bound = 0 and upper bound = infinity. Note that you cannot use 'e' or 'E' as the first character of names due to the `specification of LP format <https://www.ibm.com/support/knowledgecenter/SSSA5P_12.7.1/ilog.odms.cplex.help/CPLEX/FileFormats/topics/LP_VariableNames.html>`__."
msgstr "Lorsque vous affichez votre problème sous forme de format LP, ``Binaries`` indique des variables binaires et ``Generals`` indique les variables entières. Si les variables ne figurent pas dans ``Binaries`` ou ``Generals``, ces variables sont continues avec 0 comme limite inférieure par défaut, et l'infinité comme limite supérieure. Notez que vous ne pouvez pas utiliser 'e' ou 'E' comme premier caractère des noms en raison de la spécification du format LP <https://www.ibm.com/support/knowledgecenter/SSSA5P_12.7.1/ilog.odms.cplex.help/CPLEX/FileFormats/topics/LP_VariableNames.html>` __."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:435
msgid "You can set the objective function by invoking ``QuadraticProgram.minimize`` or ``QuadraticProgram.maximize``. You can add a constant term as well as linear and quadratic objective function by specifying linear and quadratic terms with either list, matrix or dictionary."
msgstr "Vous pouvez définir la fonction objectif en appelant ``QuadraticProgram.minimize`` ou ``QuadraticProgram.maximize``. Vous pouvez ajouter un terme constant ainsi qu'une fonction objectif linéaire ou quadratique en spécifiant des termes linéaires et quadratiques avec une liste, une matrice ou un dictionnaire."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:437
msgid "Note that in the LP format the quadratic part has to be scaled by a factor :math:`1/2`. Thus, when printing as LP format, the quadratic part is first multiplied by 2 and then divided by 2 again."
msgstr "Notez que dans le format LP, la partie quadratique doit être réduite par un facteur :math:` 1/2`. Ainsi, lors de l'affichage du résultat en format LP, la partie quadratique est d'abord multipliée par 2, puis divisée par 2."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:586
msgid "You can access the constant, the linear term, and the quadratic term by looking at ``Quadratic.objective.{constant, linear, quadratic}``, respectively. As for linear and quadratic terms, you can get a dense matrix (``to_array``), a sparse matrix (``coefficients``), and a dictionary (``to_dict``). For dictionaries, you can specify whether to use variable indices or names as keys. Note that the quadratic terms are stored in a compressed way, e.g., ``{('x', 'y'): 1, ('y', 'x'): 2}`` is stored as ``{('x', 'y'): 3}``. You can get the quadratic term as a symmetric matrix by calling ``to_array(symmetric=True)`` or ``to_dict(symmetric=True)``. If you call ``to_dict(name=True)``, you can get a dictionary whose keys are pairs of variable names."
msgstr "Vous pouvez accéder au terme constant, au terme linéaire et au terme quadratique en regardant respectivement ``Quadratic.objective.{constant, linear, quadratic}``. Pour ce qui est des termes linéaires et quadratiques, vous pouvez obtenir une matrice dense (``to_array``), une matrice éparse (``coefficients``) et un dictionnaire (``to_dict``). Pour les dictionnaires, vous pouvez spécifier si vous devez utiliser des indices variables ou des noms comme clés. Notez que les termes quadratiques sont stockés de manière compressée, par exemple ``{('x', 'y'): 1, ('y', 'x'): 2}`` est stocké sous la forme ``{('x', 'y'): 3}``. Vous pouvez obtenir le terme quadratique en tant que matrice symétrique en appelant ``to_array(symmetric=True)`` ou ``to_dict(symmetric=True)``. Si vous appelez ``to_dict(name=True)``, vous pouvez obtenir un dictionnaire dont les clés sont des paires de noms de variables."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:675
msgid "Adding/removing linear and quadratic constraints"
msgstr "Ajout/suppression des contraintes linéaires et quadratiques"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:686
msgid "You can add linear constraints by setting name, linear expression, sense and right-hand-side value (rhs). You can use senses 'EQ', 'LE', and 'GE' as Docplex supports."
msgstr "Vous pouvez ajouter des contraintes linéaires en définissant le nom, l'expression linéaire, le sens de l'inégalité et la valeur du côté droit (rhs pour right-hand-side). Vous pouvez utiliser les sens 'EQ', 'LE' et 'GE' comme supporté par Docplex."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:774
msgid "You can add quadratic constraints as well as objective function and linear constraints."
msgstr "Vous pouvez ajouter des contraintes quadratiques ainsi que des fonctions objectives et des contraintes linéaires."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:868
msgid "You can access linear and quadratic terms of linear and quadratic constraints as in the same way as the objective function."
msgstr "Vous pouvez accéder à des termes linéaires et quadratiques de contraintes linéaires et quadratiques de la même manière que la fonction cible."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:913
msgid "You can also remove linear/quadratic constraints by ``remove_linear_constraint`` and ``remove_quadratic_constraint``."
msgstr "Vous pouvez également supprimer les contraintes linéaires/quadratiques par ``remove_linear_constraint`` et ``remove_quadratic_constraint``."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:1002
msgid "You can substitute some of variables with constants or other variables. More precicely, ``QuadraticProgram`` has a method ``substitute_variables(constants=..., variables=...)`` to deal with the following two cases. - :math:`x \\leftarrow c`: when ``constants`` have a dictionary ``{x: c}``. - :math:`x \\leftarrow c y`: when ``variables`` have a dictionary ``{x: (y, c)}``."
msgstr "Vous pouvez remplacer certaines variables par des constantes ou par d'autres variables. Plus précisément, ``QuadraticProgram`` a une méthode ``substitute_variables (constants= ..., variables= ...)`` pour traiter les deux cas suivants. - :math:`x \\leftarrow c`: quand `` constants`` ont un dictionnaire ``{x: c}``.- :math:` x \\leftarrow c y`: quand ``variables`` ont un dictionnaire ``{ x: (y, c) }``."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:1014
msgid "Substituting Variables"
msgstr "Substitution des variables"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:1085
msgid "If the resulting problem is infeasible due to lower bounds or upper bounds, the methods returns the status ``Status.INFEASIBLE``. We try to replace variable ``x`` with -1, but -1 is out of range of ``x`` (0 <= ``x`` <= 1). So, it returns ``Status.INFEASIBLE``."
msgstr "S'il n'est pas possible de résoudre le problème résultant en raison de bornes inférieures ou de bornes supérieures, la méthode renvoie le statut ``Status.INFEASIBLE``. Nous essayons de remplacer la variable ``x`` par -1, mais -1 n'est pas comprise dans la plage de ``x`` (0 < = ``x`` < = 1). Donc, il retourne ``Status.INFEASIBLE ``."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:1147
msgid "You cannot substitute variables multiple times. The method raises an error in such a case."
msgstr "Vous ne pouvez pas substituer plusieurs fois les variables. La méthode renvoie une erreur dans ce cas."

