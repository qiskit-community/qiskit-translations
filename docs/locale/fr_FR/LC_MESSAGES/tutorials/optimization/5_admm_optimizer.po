msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-14 09:35+0000\n"
"PO-Revision-Date: 2020-07-31 17:27\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/5_admm_optimizer.po\n"
"X-Crowdin-File-ID: 9156\n"
"Language: fr_FR\n"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:10
msgid "This page was generated from `tutorials/optimization/5_admm_optimizer.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/optimization/5_admm_optimizer.ipynb`__."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:9
msgid "ADMM Optimizer"
msgstr "Optimiseur ADMM"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:21
msgid "Introduction"
msgstr ""

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:32
msgid "The ADMM Optimizer can solve classes of mixed-binary constrained optimization problems, hereafter (MBCO), which often appear in logistic, finance, and operation research. In particular, the ADMM Optimizer here designed can tackle the following optimization problem :math:`(P)`:"
msgstr "L'optimiseur ADMM permet de résoudre des classes de problèmes d'optimisation à contraintes binaires mixtes (MBCO), qui apparaissent souvent dans les domaines de la logistique, les finances et la recherche opérationnelle. En particulier, l'optimiseur ADMM conçu ici peut résoudre le problème d'optimisation suivant :math:`(P)` :"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:34
msgid "\\min_{x \\in \\mathcal{X},u\\in\\mathcal{U} \\subseteq \\mathbb{R}^l } \\quad q(x) + \\varphi(u),"
msgstr "\\min_{x \\in \\mathcal{X},u\\in\\mathcal{U} \\subseteq \\mathbb{R}^l } \\quad q(x) + \\varphi(u),"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:39
msgid "subject to the constraints:"
msgstr ""

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:41
msgid "\\mathrm{s.t.:~} \\quad G x = b, \\quad  g(x) \\leq 0, \\quad \\ell(x, u) \\leq 0,"
msgstr "\\mathrm{s.t.:~} \\quad G x = b, \\quad  g(x) \\leq 0, \\quad \\ell(x, u) \\leq 0,"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:46
msgid "with the corresponding functional assumptions."
msgstr "avec les hypothèses suivantes :"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:48
msgid "Function :math:`q: \\mathbb{R}^n \\to \\mathbb{R}` is quadratic, i.e., :math:`q(x) = x^{\\intercal} Q x + a^{\\intercal} x` for a given symmetric squared matrix :math:`Q \\in \\mathbb{R}^n \\times \\mathbb{R}^n, Q = Q^{\\intercal}`, and vector :math:`a \\in \\mathbb{R}^n`;"
msgstr "La fonction :math:`q: \\mathbb{R}^pf \\to \\mathbb{R}` est quadratique, donc :math:`q(x) = x^{\\intercal} Q x + a^{\\intercal} x` pour une matrice carrée symétrique donnée :math:`Q \\in \\mathbb{R}^ \\times \\mathbb{R}^n, Q = Q^{\\intercal}`, et un vecteur :math:`a \\in \\mathbb{R}^n`;"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:49
msgid "The set :math:`\\mathcal{X} = \\{0,1\\}^n = \\{x_{(i)} (1-x_{(i)}) = 0, \\forall i\\}` enforces the binary constraints;"
msgstr "L'ensemble :math:`\\mathcal{X} = \\{0,1\\}^M = \\{x_{(i)} (1-x_{(i)}) = 0, \\forall i\\}` impose les contraintes binaires ;"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:50
msgid "Matrix :math:`G\\in\\mathbb{R}^n \\times \\mathbb{R}^{n'}`, vector :math:`b \\in \\mathbb{R}^{n'}`, and function :math:`g: \\mathbb{R}^n \\to \\mathbb{R}` is convex;"
msgstr "La matrice :math:`G\\in\\mathbb{R}^f \\times \\mathbb{R}^{n'}`, le vecteur :math:`b \\in \\mathbb{R}^{n'}`, et la fonction :math:`g: \\mathbb{R}^ \\to \\mathbb{R}` sont convexes;"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:51
msgid "Function :math:`\\varphi: \\mathbb{R}^l \\to \\mathbb{R}` is convex and :math:`\\mathcal{U}` is a convex set;"
msgstr "La fonction :math:`\\varphi: \\mathbb{R}^l \\to \\mathbb{R}` est convexe et :math:`\\mathcal{U}` est un ensemble convexe ;"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:52
msgid "Function :math:`\\ell: \\mathbb{R}^n\\times \\mathbb{R}^l \\to \\mathbb{R}` is *jointly* convex in :math:`x, u`."
msgstr "La fonction :math:`\\ell: \\mathbb{R}^pf\\times \\mathbb{R}^l \\to \\mathbb{R}` est *jointivement* convexe en :math:`x, u`."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:63
msgid "In order to solve MBO problems, [1] proposed heuristics for :math:`(P)` based on the Alternating Direction Method of Multipliers (ADMM) [2]. ADMM is an operator splitting algorithm with a long history in convex optimization, and it is known to have residual, objective and dual variable convergence properties, provided that convexity assumptions are holding."
msgstr "Afin de résoudre les problèmes MBO, [1] a proposé une méthode heuristique pour :math:`(P)` basée sur la méthode de direction alternée des multiplicateurs (ADMM) [2]. ADMM est un algorithme de fractionnement d'opérateurs utilisé depuis longtemps dans l'optimisation convexe. Cette méthode est connue pour avoir des propriétés de convergence résiduelle, objective et à double variable, à condition que les hypothèses de convexité soient vérifiées."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:65
msgid "The method of [1] (referred to as 3-ADMM-H) leverages the ADMM operator-splitting procedure to devise a decomposition for certain classes of MBOs into: - a QUBO subproblem to be solved by on the quantum device via variational algorithms, such as VQE or QAOA; - continuous convex constrained subproblem, which can be efficiently solved with classical optimization solvers."
msgstr "La méthode décrite en [1] (appelée 3-ADMM-H) repose sur la procédure de décomposition des opérateurs pour découper certaines classes de problèmes MBO en: - un sous-problème QUBO qui peut être solutionné par un ordinateur quantique via des algorithmes tels que VQE (Variational-Quantum-Eigensolver) ou QAOA (Quantum Approximate Optimization Algorithm); - des sous-problèmes à contraintes continues convexes qui peuvent être résolus efficacement par des optimisations classiques."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:67
msgid "The algorithm 3-ADMM-H works as follows:"
msgstr "L'algorithme 3-ADMM-H fonctionne ainsi :"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:69
msgid "Initialization phase (set the parameters and the QUBO and convex solvers);"
msgstr "Phase d'initialisation (positionne les paramètres, la QUBO -Quadratic Unconstrained Binary Optimization- et les solveurs convexes);"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:70
msgid "For each ADMM iterations ($k = 1, 2, :nbsphinx-math:`\\ldots`, $) untill termination:"
msgstr "Pour chaque itération ADMM ($k = 1, 2, :nbsphinx-math:`\\ldots`, $) et jusqu'à la fin :"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:72
msgid "Solve a properly defined QUBO subproblem (with a classical or quantum solver);"
msgstr "Résoudre un sous-problème QUBO défini complètement (avec une machine classique ou quantique);"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:73
msgid "Solve properly defined convex problems (with a classical solver);"
msgstr "Résoudre des problèmes convexes correctement définis (avec une machine classique);"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:74
msgid "Update the dual variables."
msgstr "Mettre à jour les variables duales."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:76
msgid "Return optimizers and cost."
msgstr "Retourner les optimiseurs et le coût."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:78
msgid "A comprehensive discussion on the conditions for convergence, feasibility and optimality of the algorithm can be found in [1]. A variant with 2 ADMM blocks, namely a QUBO subproblem, and a continuous convex constrained subproblem, is also introduced in [1]."
msgstr "Une discussion accessible sur les conditions de convergence, la faisabilité et l'optimisation de l'algorithme peut être trouvé dans [1]. Une variante avec deux blocs ADMM, de fait un problème QUBO, et un sous-problème contraint continu convexe est aussi présenté en [1]."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:81
msgid "References"
msgstr "Références"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:83
msgid "[1] [C. Gambella and A. Simonetto, *Multi-block ADMM heuristics for mixed-binary optimization, on classical and quantum computers,* arXiv preprint arXiv:2001.02069 (2020).](https://arxiv.org/abs/2001.02069)"
msgstr "[1] [C. Gambella and A. Simonetto, *Multi-block ADMM heuristics for mixed-binary optimization, on classical and quantum computers,* arXiv preprint arXiv:2001.02069 (2020).](https://arxiv.org/abs/2001.02069)"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:85
msgid "[2] [S. Boyd, N. Parikh, E. Chu, B. Peleato, and J. Eckstein, *Distributed optimization and statistical learning via the alternating direction method of multipliers,* Foundations and Trends in Machine learning, 3, 1–122 (2011).](https://web.stanford.edu/~boyd/papers/pdf/admm\\_distr\\_stats.pdf)"
msgstr "[2] [S. Boyd, N. Parikh, E. Chu, B. Peleato, and J. Eckstein, *Distributed optimization and statistical learning via the alternating direction method of multipliers,* Foundations and Trends in Machine learning, 3, 1–122 (2011).](https://web.stanford.edu/~boyd/papers/pdf/admm\\_distr\\_stats.pdf)"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:97
msgid "Initialization"
msgstr "Initialisation"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:99
msgid "First of all we load all the packages that we need."
msgstr "On commence ici par charger tous les packages nécessaires."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:137
msgid "We first initialize all the algorithms we plan to use later in this tutorial."
msgstr "On initialise ensuite tous les algorithmes prévus pour ce tutoriel."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:139
msgid "To solve the QUBO problems we can choose between - ``MinimumEigenOptimizer`` using different ``MinimumEigensolver``, such as ``VQE``, ``QAOA`` or ``NumpyMinimumEigensolver`` (classical) - ``GroverOptimizer`` - ``CplexOptimizer`` (classical, if CPLEX is installed)"
msgstr "Pour résoudre les problèmes QUBO, on peut choisir entre - ``MinimumEigenOptimizer`` utilisant des ``MinimumEigensolver``, tels que ``VQE``, ``QAOA`` ou ``NumpyMinimumEigensolver`` (classique) - ``GroverOptimizer`` - ``CplexOptimizer`` (classique, nécessite CPLEX installé)"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:141
msgid "and to solve the convex continuous problems we can choose between the following classical solvers: - ``CplexOptimizer`` (if CPLEX is installed) - ``CobylaOptimizer``"
msgstr "et pour résoudre les problèmes convexes continus on peut choisir l'un des choisir classiques suivants : - ``CplexOptimizer`` (nécessite CPLEX installé) - ``CobylaOptimizer``"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:143
msgid "In case CPLEX is not available, the ``CobylaOptimizer`` (for convex continuous problems) and the ``MinimumEigenOptimizer`` using the ``NumpyMinimumEigensolver`` (for QUBOs) can be used as classical alternatives to CPLEX for testing, validation, and benchmarking."
msgstr "Si CPLEX n'est pas disponible, la classe ``CobylaOptimizer`` (pour les problèmes continus convexes) ainsi que ``MinimumEigenOptimizer`` reposant sur ``NumpyMinimumEigensolver`` (pour QUBO) peuvent être utilisées comme alternatives à CPLEX pour tester, valider et mesurer les performances."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:177
msgid "Example"
msgstr "Exemple"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:179
msgid "We test 3-ADMM-H algorithm on a simple Mixed-Binary Quadratic Problem with equality and inequality constraints (Example 6 reported in [1]). We first construct a docplex problem and then load it into a ``QuadraticProgram``."
msgstr "Nous testons maintenant l'algorithme 3-ADMM-H sur un problème simple quadratique binaire mixte avec des contraintes d'égalités et d'inégalités (Exemple 6 décrit dans [1]). Nous commençons par construire un problème docplex puis nous le chargeons dans un ``QuadraticProgram``."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:274
msgid "Classical Solution"
msgstr "Solution classique"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:276
msgid "3-ADMM-H needs a QUBO optimizer to solve the QUBO subproblem, and a continuous optimizer to solve the continuous convex constrained subproblem. We first solve the problem classically: we use the ``MinimumEigenOptimizer`` with the ``NumPyMinimumEigenSolver`` as a classical and exact QUBO solver and we use the ``CobylaOptimizer`` as a continuous convex solver. 3-ADMM-H supports any other suitable solver available in Qiskit. For instance, VQE, QAOA, and GroverOptimizer can be invoked as quantum solvers, as demonstrated later. If CPLEX is installed, the ``CplexOptimizer`` can also be used as both, a QUBO and convex solver."
msgstr "L'algorithme 3-ADMM-H repose sur l'utilisation d'un optimiseur QUBO (pour adresser les sujets QUBO) et d'un optimiseur continu (pour adresser les problèmes contraints continus convexes). En premier lieu, nous résolvons ce problème de manière classique: Nous utilisons la classe ``MinimumEigenOptimizer`` avec un ``NumPyMinimumEigenSolver`` comme solution QUBO classique exacte et nous utilisons la classe ``CobylaOptimizer`` comme solution du problème continu convexe. 3-ADMM-H supporte tout solveur disponible dans Qiskit. Par exemple VQE, QAOA, et GroverOptimizer peuvent être invoqués comme solveurs quantiques comme nous le verrons plus tard. Si CPLEX est installé, le ``CplexOptimizer`` peut être utilisé à la fois comme solveur QUBO et comme solveur continu convexe."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:289
msgid "Parameters"
msgstr "Paramètres"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:291
msgid "The 3-ADMM-H are wrapped in class ``ADMMParameters``. Customized parameter values can be set as arguments of the class. In this example, parameters :math:`\\rho, \\beta` are initialized to :math:`1001` and :math:`1000`, respectively. The penalization ``factor_c`` of equality constraints :math:`Gx = b` is set to :math:`900`. The tolerance ``tol`` for primal residual convergence is set to ``1.e-6``. In this case, the 3-block implementation is guaranteed to converge for Theorem 4 of [1], because the inequality constraint with the continuous variable is always active. The 2-block implementation can be run by setting ``three_block=False``, and practically converges to a feasible not optimal solution."
msgstr "Le 3-ADMM-H est associé à la classe ``ADMMParameters``. Des valeurs particulières de certains paramètres doivent être définis comme arguments de la classe. Dans notre exemple, les paramètres :math:`\\rho, \\beta` sont initialisés à :math:`1001` et :math:`1000` , respectivement. La pénalisation ``factor_c`` associée aux contraintes d'égalité :math:`Gx = b`est définie à :math:`900` . La tolérance ``tol`` de la convergence résiduelle primaire est définie à ``1.e-6``. Dans ce cas, l'implémentation 3-block converge forcément en accord avec le théorème 4 de [1], car la contrainte d'inégalité sur la variable continue est toujours active. L'implémentation 2-block est réalisée en posant ``three_block=False``, et converge vers une solution possible mais non optimale."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:320
msgid "Calling 3-ADMM-H algorithm"
msgstr "Appel de l'algorithme 3-ADMM-H"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:322
msgid "To invoke the 3-ADMM-H algorithm, an instance of the ``ADMMOptimizer`` class needs to be created. This takes ADMM-specific parameters and the subproblem optimizers separately into the constructor. The solution returned is an instance of ``OptimizationResult`` class."
msgstr "Pour invoquer l'algorithme 3-ADMM-H, une instance de la classe ``ADMMOptimizer`` doit être créée. Cette instance accepte des paramètres spécifiques ADMM et les différents optimiseurs dans un constructeur. La solution retournée est une instance de la classe ``OptimizationResult``."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:366
msgid "Classical Solver Result"
msgstr "Résultats avec un solveur classique"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:368
msgid "The 3-ADMM-H solution can be then printed and visualized. The ``x`` attribute of the solution contains respectively, the values of the binary decision variables and the values of the continuous decision variables. The ``fval`` is the objective value of the solution."
msgstr "La solution 3-ADMM-H peut alors être imprimée et visualisée. L'attribut ``x`` de la solution contient respectivement, les valeurs des variables binaires de décision et les valeurs des variables de décision continues. L'objet ``fval`` est une valeur objective de la solution."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:411
msgid "Solution statistics can be accessed in the ``state`` field and visualized. We here display the convergence of 3-ADMM-H, in terms of primal residuals."
msgstr "Les statistiques sur la solution sont accessibles via le champ ``state``. On affiche ici la convergence du 3-ADMM-H, en termes de résidus primaires."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:444
msgid "Quantum Solution"
msgstr "Solution Quantique"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:446
msgid "We now solve the same optimization problem with QAOA as QUBO optimizer, running on simulated quantum device. First, one need to select the classical optimizer of the eigensolver QAOA. Then, the simulation backened is set. Finally, the eigensolver is wrapped into the ``MinimumEigenOptimizer`` class. A new instance of ``ADMMOptimizer`` is populated with QAOA as QUBO optimizer."
msgstr "Nous allons maintenant résoudre le même problème d'optimisation avec QAOA comme optimiseur QUBO via une exécution sur un système quantique simulé. Nous devons, en premier, sélectionner l'optimiseur classique eigensolver QAOA. Le système quantique est défini. Enfin, le eigensolver est associé à la classe ``MinimumEigenOptimizer``. Une nouvelle instance de ``ADMMOptimizer`` est populée avec QAOA."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:489
msgid "Quantum Solver Results"
msgstr "Résultats du solveur quantique"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:491
msgid "Here we present the results obtained from the quantum solver. As in the example above ``x`` stands for the solution, the ``fval`` is for objective value."
msgstr "Nous présentons ici les résultats obtenus avec le solveur quantique. Comme précédemment, `x` est la solution, `fval` est une valeur objective de la solution."

