msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-14 09:35+0000\n"
"PO-Revision-Date: 2020-07-31 17:27\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/2_converters_for_quadratic_programs.po\n"
"X-Crowdin-File-ID: 9150\n"
"Language: fr_FR\n"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:10
msgid "This page was generated from `tutorials/optimization/2_converters_for_quadratic_programs.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/optimization/2_converters_for_quadratic_programs.ipynb`__."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:9
msgid "Converters for Quadratic Programs"
msgstr "Convertisseurs pour les programmes Quadratiques"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:21
msgid "Introduction"
msgstr "Introduction"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:23
msgid "Qiskit Optimization provides with ``QuadraticProgram`` a very generic and powerful representation for optimization problems. However, usually, optimization algorithms cannot handle all possible types of problems that can be modelled, but only a sub-class. Many available quantum optimization algorithms can handle Quadratic Unconstrained Binary Optimization (QUBO) problems. To do so, first, it is necessary to convert a given optimization problem into a QUBO."
msgstr "Qiskit Optimisation fournit avec le ``QuadraticProgram`` une représentation très générique et puissante pour les problèmes d'optimisation. Cependant, en général, les algorithmes d'optimisation ne peuvent pas gérer tous les types possibles de problèmes qui peuvent être modélisés, mais seulement une sous-classe. De nombreux algorithmes d'optimisation quantique disponibles peuvent traiter des problèmes d'optimisation binaire quadratique non contrainte (Quadratic Unconstrained Binary Optimization QUBO). Pour ce faire, il faut d'abord convertir un problème d'optimisation donné en un QUBO."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:25
msgid "Qiskit Optimization provides converters to achieve this conversion whenever possible. More precisely, Qiskit Optimization provides the following converters: - ``InequalityToEquality``: converts inequality constraints into equality constraints with additional slack variables. - ``IntegerToBinary``: converts integer variables into binary variables and corresponding coefficients. - ``LinearEqualityToPenalty``: convert equality constraints into additional terms of the object function. - ``QuadraticProgramToQubo``: a wrapper for ``IntegerToBinary`` and ``LinearEqualityToPenalty`` for convenience."
msgstr "Qiskit Optimization permet aux convertisseurs de réaliser cette conversion dans la mesure du possible. Plus précisément, Qiskit Optimization fournit les convertisseurs suivants:-` ` InequalityToEquality ` `: convertit les contraintes d'inégalité en contraintes d'égalité avec des variables slack (variable d'écart) supplémentaires. -` ` IntegerToBinary ` `: convertit les variables entières en variables binaires et les coefficients correspondants. -` ` LinearEqualityToPénalité ` `: convertir les contraintes d'égalité en termes supplémentaires de la fonction objet. -` ` QuadraticProgramToQubo ` `: un emballage pour ` ` IntegerToBinary ` ` et ` ` LinearEqualityToPénalité ` ` pour des raisons de commodité."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:28
msgid "Qiskit Optimization provides algorithms that convert a QUBO to an Ising Hamiltonian (in Qiskit called ``Operator``) and then try to approximate its ground state, such as the ``MinimumEigenOptimizer`` (which generalizes algorithms such as VQE and QAOA). The QUBO to ``Operator`` converter is introduced in the corresponding tutorial."
msgstr "Qiskit Optimisation fournit des algorithmes qui convertissent un QUBO en un Hamiltonien Ising (dans Qiskit appelé ``Operator``) puis tentent d'approximer son état fondamental, comme le ``MinimumEigenOptimizer`` (qui généralise des algorithmes tels que VQE et QAOA). Le convertisseur QUBO en ``Operator`` est introduit dans le tutoriel correspondant."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:30
msgid "Qiskit Optimization also provides algorithms and converters that are not based on Ising Hamiltonians, e.g., the ``GroverOptimizer``, which is introduced in a separate tutorial."
msgstr "Qiskit Optimisation fournit également des algorithmes et des convertisseurs qui ne sont pas basés sur Hamiltonians d'Ising, par exemple le ``GroverOptimizer``, qui est introduit dans un tutoriel séparé."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:42
msgid "InequalityToEquality"
msgstr "InequalityToEquality"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:44
msgid "``InequalityToEqualityConverter`` converts inequality constraints into equality constraints with additional slack variables to remove inequality constraints from ``QuadraticProgram``. The upper bounds and the lower bounds of slack variables will be calculated from the difference between the left sides and the right sides of constraints. Signs of slack variables depend on symbols in constraints such as :math:`\\leq` and :math:`\\geq`."
msgstr "``InequalityToEqualityConverter`` convertit les contraintes d'inégalité en contraintes d'égalité avec des variables de slack supplémentaires pour supprimer les contraintes d'inégalité du ``QuadraticProgram``. Les limites supérieures et les limites inférieures des variables de slack seront calculées à partir de la différence entre les côtés gauche et les côtés droit des contraintes. Les signes des variables de slack dépendent de symboles dans des contraintes telles que :math:`\\leq` et :math:`\\geq`."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:46
msgid "The following is an example of a maximization problem with two inequality constraints. Variable :math:`x` and :math:`y` are binary variables and variable :math:`z` is an integer variable."
msgstr "Ce qui suit est un exemple de problème de maximisation avec deux contraintes d'inégalité. La variable :math:`x` et :math:`y` sont des variables binaires et la variable :math:`z` est une variable entière."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:48
msgid "\\begin{aligned}    & \\text{maximize}        & 2x + y + z\\\\    & \\text{subject to:}        & x+y+z \\leq 5.5\\\\        & & x+y+z \\geq 2.5\\\\        & & x, y \\in \\{0,1\\}\\\\        & & z \\in \\{0,1,2,3,4,5,6,7\\} \\\\ \\end{aligned}"
msgstr "\\begin{aligned}    & \\text{maximize}        & 2x + y + z\\\\    & \\text{subject to:}        & x+y+z \\leq 5.5\\\\        & & x+y+z \\geq 2.5\\\\        & & x, y \\in \\{0,1\\}\\\\        & & z \\in \\{0,1,2,3,4,5,6,7\\} \\\\ \\end{aligned}"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:61
msgid "With ``QuadraticProgram``, an optimization model of the problem is written as follows."
msgstr "Avec ` ` QuadraticProgram ` `, un modèle d'optimisation du problème est écrit comme suit."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:161
msgid "Call ``encode`` method of ``InequalityToEqualityConverter`` to convert."
msgstr "Appeler la méthode ``encode`` de ``InequalityToEqualityConverter`` pour convertir."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:259
msgid "After converting, the inequality constraints are replaced with equality constraints with additional slack variables."
msgstr "Après la conversion, les contraintes d'inégalité sont remplacées par des contraintes d'égalité avec des variables de slack supplémentaires."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:271
msgid "IntegerToBinary"
msgstr "IntegerToBinary"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:282
msgid "``IntegerToBinary`` converts integer variables into binary variables and coefficients to remove integer variables from ``QuadraticProgram``. For converting, bounded-coefficient encoding proposed in arxiv:1706.01945 (Eq. (5)) is used. For more detail of the encoding method, please see the paper."
msgstr "``IntegerToBinary`` convertit des variables entières en variables binaires et coefficients pour supprimer des variables entières du ``QuadraticProgram``. Pour la conversion, l'encodage de bounded-coefficient (coefficient borné) proposé dans arxiv:1706.01945 (Eq. (5)) est utilisé. Pour plus de détails sur la méthode d'encodage, veuillez consulter le papier."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:284
msgid "We use the output of ``InequalityToEquality`` as starting point. Variable :math:`x` and :math:`y` are binary variables, while the variable :math:`z` and the slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` are integer variables. We print the problem again for reference."
msgstr "Nous utilisons la sortie de ``InequalityToEquality`` comme point de départ. Les variables :math:`x` et :math:`y` sont des variables binaires, alors que la variable :math:`z` et les variables slack :math:`xyz\\_leq\\text{@}int\\_slack` et :math:`xyz\\_geq\\text{@}int\\_slack` sont des variables entières. Nous imprimons à nouveau le problème pour référence."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:370
msgid "Call ``encode`` method of ``IntegerToBinary`` to convert."
msgstr "Appeler la méthode ``encode`` de ``IntegerToBinary`` pour convertir."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:480
msgid "After converting, integer variables :math:`z` is replaced with three binary variables :math:`z\\text{@}0`, :math:`z\\text{@}1` and :math:`z\\text{@}2` with coefficients 1, 2 and 4, respectively as the above. The slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` that were introduced by ``InequalityToEquality`` are also both replaced with three binary variables with coefficients 1, 2, 2, and 1, 2, 3, respectively."
msgstr "Après conversion, les variables entières :math:`z` sont remplacées par trois variables binaires :math:`z\\text{@}0`, :math:`z\\text{@}1` et :math:`z\\text{@}2` avec coefficients 1, 2 et 4, respectivement, comme ci-dessus. Les variables slack :math:`xyz\\_leq\\text{@}int\\_slack` et :math:`xyz\\_geq\\text{@}int\\_slack` introduites par ``InequalityToEquality`` sont également remplacées par trois variables binaires avec des coefficients 1, 2, 2 et 1, 2, 3, respectivement."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:482
msgid "Note: Essentially the coefficients mean that the sum of these binary variables with coefficients can be the sum of a subset of :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, and :math:`\\{1, 2, 3\\}` to represent that acceptable values :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}`, and :math:`\\{0, \\ldots, 6\\}`, which respects the lower bound and the upper bound of original integer variables correctly."
msgstr "Note: Essentiellement les coefficients signifient que la somme de ces variables binaires avec des coefficients peut être la somme d'un sous-ensemble de :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, et :math:`\\{1, 2, 3\\}` pour représenter les valeurs acceptables :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}`, et :math:`\\{0, \\ldots, et \\ldots, 6\\}`, qui respecte correctement la limite inférieure et la limite supérieure des variables entières originales."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:484
msgid "``IntegerToBinary`` also provides functionality to translate a given binary result back to the original integer representation. This is illustrated later in this tutorial when we solve the different problem representations and compare the results."
msgstr "``IntegerToBinary`` fournit également des fonctionnalités pour traduire un résultat binaire donné vers la représentation entière originale. Ceci est illustré plus tard dans ce tutoriel lorsque nous résolvons les différentes représentations de problèmes et comparons les résultats."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:496
msgid "LinearEqualityToPenalty"
msgstr "LinearEqualityToPenalty"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:507
msgid "``LinearEqualityToPenalty`` converts linear equality constraints into additional quadratic penalty terms of the objective function to map ``QuadraticProgram`` to an unconstrained form. An input to the converter has to be a ``QuadraticProgram`` with only linear equality constraints. Those equality constraints, e.g. :math:`\\sum_i a_i x_i = b` where :math:`a_i` and :math:`b` are numbers and :math:`x_i` is a variable, will be added to the objective function in the form of :math:`M(b - \\sum_i a_i x_i)^2` where :math:`M` is a large number as penalty factor. By default :math:`M= 1e5`. A sign of the term will depends on the problem type is maximization or minimization."
msgstr "``LinearEqualityToPenalty`` convertit les contraintes d'égalité linéaire en termes de pénalité quadratique supplémentaires de la fonction objective pour faire correspondre le ``QuadraticProgram`` à une forme non contrainte. Une entrée dans le convertisseur doit être un ``QuadraticProgram`` avec seulement des contraintes linéaires d'égalité. Ces contraintes d'égalité, par ex. :math:`\\sum_i a_i x_i = b` où :math:`a_i` et :math:`b` sont des nombres et :math:`x_i` est une variable, sera ajouté à la fonction objective sous la forme de :math:`M(b - \\sum_i a_i x_i)^2` où :math:`M` est un grand nombre comme facteur de pénalité. Par défaut :math:`M= 1e5`. Un signe du terme dépendra du type de problème qui est maximisation ou minimisation."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:510
msgid "We use the output of ``IntegerToBinary`` as starting point, where all variables are binary variables and all inequality constraints have been mapped to equality constraints. We print the problem again for reference."
msgstr "Nous utilisons la sortie de ``IntegerToBinary`` comme point de départ, où toutes les variables sont des variables binaires et toutes les contraintes d'inégalité ont été mappées aux contraintes d'égalité. Nous imprimons à nouveau le problème pour référence."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:608
msgid "Call encode method of ``LinearEqualityToPenalty`` to convert."
msgstr "Appeler la méthode d'encodage de ``LinearEqualityToPenalty`` pour convertir."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:776
msgid "After converting the equality constraints are added to the objective function as additional terms with the default penalty factor :math:`M=1e5`. The resulting problem is now a QUBO and compatible with many quantum optimization algorithms."
msgstr "Après la conversion des contraintes d'égalité sont ajoutées à la fonction d'objectif en tant que termes supplémentaires avec le facteur de pénalité par défaut :math:`M=1e5`. Le problème qui en résulte est maintenant un QUBO et compatible avec de nombreux algorithmes d'optimisation quantique."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:787
msgid "This gives the same result as before."
msgstr "Cela donne le même résultat qu'auparavant."

