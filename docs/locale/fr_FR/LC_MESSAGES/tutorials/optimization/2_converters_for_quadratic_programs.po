msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-13 15:56+0000\n"
"PO-Revision-Date: 2020-09-10 09:46\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/2_converters_for_quadratic_programs.po\n"
"X-Crowdin-File-ID: 9150\n"
"Language: fr_FR\n"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:10
msgid "This page was generated from `tutorials/optimization/2_converters_for_quadratic_programs.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/optimization/2_converters_for_quadratic_programs.ipynb`__."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:9
msgid "Converters for Quadratic Programs"
msgstr "Convertisseurs pour les programmes Quadratiques"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:20
msgid "Optimization problems in Qiskit's optimization module are represented with the ``QuadraticProgram`` class, which is generic and powerful representation for optimization problems. In general, optimization algorithms are defined for a certain formulation of a quadratic program and we need to convert our problem to the right type."
msgstr "Les problèmes d'optimisation du module d'optimisation de Qiskit sont représentés par la classe ``QuadraticProgram``, qui est une représentation générique et puissante pour les problèmes d'optimisation. En général, les algorithmes d'optimisation sont définis pour une certaine formulation d'un programme quadratique et nous avons besoin de convertir notre problème vers la bonne catégorie."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:22
msgid "For instance, Qiskit provides several optimization algorithms that can handle Quadratic Unconstrained Binary Optimization (QUBO) problems. These are mapped to Ising Hamiltonians, for which Qiskit uses the ``qiskit.aqua.operators`` module, and then their ground state is approximated. For this optimization commonly known algorithms such as VQE or QAOA can be used as underlying routine. See the following tutorial about the `Minimum Eigen Optimizer <./3_minimum_eigen_optimizer.ipynb>`__ for more detail. Note that also other algorithms exist that work differently, such as the ``GroverOptimizer``."
msgstr "Par exemple, Qiskit fournit plusieurs algorithmes d'optimisation qui peuvent gérer les problèmes d'optimisation binaire sans contrainte Quadratique (QUBO). Ceux-ci sont mappés à des hamiltoniens de Ising, pour lesquels Qiskit utilise le module ``qiskit.aqua.operators`` pour trouver une approximation de leur état fondamental. Pour cette optimisation, des algorithmes communément connus tels que VQE ou QAOA peuvent être utilisés comme routine sous-jacente. Voir le tutoriel suivant sur le `Minimum Eigen Optimizer <. 3_minimum_eigen_optimizer.ipynb>`__ pour plus de détails. Notez que d'autres algorithmes existent également qui fonctionnent différemment, comme le ``GroverOptimizer``."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:25
msgid "To map a problem to the correct input format, the optimization module of Qiskit offers a variety of converters. In this tutorial we're providing an overview on this functionality. Currently, Qiskit contains the following converters. - ``InequalityToEquality``: converts inequality constraints into equality constraints with additional slack variables. - ``IntegerToBinary``: converts integer variables into binary variables and corresponding coefficients. - ``LinearEqualityToPenalty``: convert equality constraints into additional terms of the object function. - ``QuadraticProgramToQubo``: a wrapper for ``InequalityToEquality``, ``IntegerToBinary``, and ``LinearEqualityToPenalty`` for convenience."
msgstr "Pour mapper un problème au format d'entrée correct, le module d'optimisation de Qiskit propose une variété de convertisseurs. Dans ce tutoriel, nous donnons une description de cette fonctionnalité. Actuellement, Qiskit contient les convertisseurs suivants. -``InequalityToEquality``: convertit les contraintes d'inégalité en contraintes d'égalité avec des variables de marge supplémentaires. -``IntegerToBinary``: convertit les variables entières en variables binaires ainsi que les coefficients correspondants. -``LinearEqualityToPénalité``: convertir les contraintes d'égalité en termes supplémentaires de la fonction objet. -``QuadraticProgramToQubo``: regroupe `` InequalityToEquality``, `` IntegerToBinary`` et ``LinearEqualityToPénalité`` pour des raisons de commodité."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:38
msgid "InequalityToEquality"
msgstr "InequalityToEquality"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:40
msgid "``InequalityToEqualityConverter`` converts inequality constraints into equality constraints with additional slack variables to remove inequality constraints from ``QuadraticProgram``. The upper bounds and the lower bounds of slack variables will be calculated from the difference between the left sides and the right sides of constraints. Signs of slack variables depend on symbols in constraints such as :math:`\\leq` and :math:`\\geq`."
msgstr "``InequalityToEqualityConverter`` convertit les contraintes d'inégalité en contraintes d'égalité avec des variables de slack supplémentaires pour supprimer les contraintes d'inégalité du ``QuadraticProgram``. Les limites supérieures et les limites inférieures des variables de slack seront calculées à partir de la différence entre les côtés gauche et les côtés droit des contraintes. Les signes des variables de slack dépendent de symboles dans des contraintes telles que :math:`\\leq` et :math:`\\geq`."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:42
msgid "The following is an example of a maximization problem with two inequality constraints. Variable :math:`x` and :math:`y` are binary variables and variable :math:`z` is an integer variable."
msgstr "Ce qui suit est un exemple de problème de maximisation avec deux contraintes d'inégalité. La variable :math:`x` et :math:`y` sont des variables binaires et la variable :math:`z` est une variable entière."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:44
msgid "\\begin{aligned}\n"
"   & \\text{maximize}\n"
"       & 2x + y + z\\\\\n"
"   & \\text{subject to:}\n"
"       & x+y+z \\leq 5.5\\\\\n"
"       & & x+y+z \\geq 2.5\\\\\n"
"       & & x, y \\in \\{0,1\\}\\\\\n"
"       & & z \\in \\{0,1,2,3,4,5,6,7\\} \\\\\n"
"\\end{aligned}"
msgstr "\\begin{aligned}\n"
"   & \\text{maximize}\n"
"       & 2x + y + z\\\\\n"
"   & \\text{subject to:}\n"
"       & x+y+z \\leq 5.5\\\\\n"
"       & & x+y+z \\geq 2.5\\\\\n"
"       & & x, y \\in \\{0,1\\}\\\\\n"
"       & & z \\in \\{0,1,2,3,4,5,6,7\\} \\\\\n"
"\\end{aligned}"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:57
msgid "With ``QuadraticProgram``, an optimization model of the problem is written as follows."
msgstr "Avec ` ` QuadraticProgram ` `, un modèle d'optimisation du problème est écrit comme suit."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:157
msgid "Call ``convert`` method of ``InequalityToEquality`` to convert."
msgstr "Appeler la méthode ``convert`` de ``InequalityToEquality`` pour convertir."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:255
msgid "After converting, the formulation of the problem looks like as the follows. As we can see, the inequality constraints are replaced with equality constraints with additional integer slack variables, :math:`xyz\\_leg\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack`."
msgstr "Après conversion, la formulation du problème se présente comme suit. Comme nous pouvons le voir, les contraintes d'inégalité sont remplacées par des contraintes d'égalité avec des variables de marge supplémentaires entières, :math:` xyz\\_leg\\text { @ } int\\_slack ` et :math:` xyz\\_geq\\text { @ } int\\_slack `."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:257
msgid "Let us explain how the conversion works. For example, the lower bound of the left side of the first constraint is :math:`0` which is the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Thus, the upperbound of the additional integer variable must be :math:`5` to be able to satisfy even the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Note that we cut off the part after the decimla point in the converted formulation since the left side of the first constraint in the original formulation can be only integer values. For the second constraint, basically we apply the same approach. However, the symol in the second constraint is :math:`\\geq`, so we add minus before :math:`xyz\\_geq\\text{@}int\\_slack` to be able to satisfy even the case of :math:`x=1, y=1`, and :math:`z=7`."
msgstr "Expliquons comment fonctionne la conversion. Par exemple, la limite inférieure du côté gauche de la première contrainte est :math:`0` qui est le cas de :math:`x=0`, :math:`y=0`, et :math:`z=0`. Ainsi, la valeur supérieure de la variable entière supplémentaire doit être :math:`5` pour pouvoir satisfaire même le cas de :math:`x=0`, :math:`y=0`, et :math:`z=0`. Notez que nous avons coupé la partie après le point décimal dans la formulation convertie puisque le côté gauche de la première contrainte dans la formulation originale ne peut être qu'en valeurs entières. Pour la deuxième contrainte, nous appliquons fondamentalement la même approche. Cependant, la symbole de la seconde contrainte est :math:`\\geq`, donc nous ajoutons un signe moins avant :math:`xyz\\_geq\\text{@}int\\_slack` pour pouvoir satisfaire même le cas de :math:`x=1, y=1`, et :math:`z=7`."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:260
msgid "\\begin{aligned}\n"
"   & \\text{maximize}\n"
"       & 2x + y + z\\\\\n"
"   & \\text{subject to:}\n"
"       & x+y+z+ xyz\\_leg\\text{@}int\\_slack= 5\\\\\n"
"       & & x+y+z+xyz\\_geq\\text{@}int\\_slack= 3\\\\\n"
"       & & x, y \\in \\{0,1\\}\\\\\n"
"       & & z \\in \\{0,1,2,3,4,5,6,7\\} \\\\\n"
"       & & xyz\\_leg\\text{@}int\\_slack \\in \\{0,1,2,3,4,5\\} \\\\\n"
"       & & xyz\\_geq\\text{@}int\\_slack \\in \\{0,1,2,3,4,5,6\\} \\\\\n"
"\\end{aligned}"
msgstr "\\begin{aligned}\n"
"   & \\text{maximize}\n"
"       & 2x + y + z\\\\\n"
"   & \\text{subject to:}\n"
"       & x+y+z+ xyz\\_leg\\text{@}int\\_slack= 5\\\\\n"
"       & & x+y+z+xyz\\_geq\\text{@}int\\_slack= 3\\\\\n"
"       & & x, y \\in \\{0,1\\}\\\\\n"
"       & & z \\in \\{0,1,2,3,4,5,6,7\\} \\\\\n"
"       & & xyz\\_leg\\text{@}int\\_slack \\in \\{0,1,2,3,4,5\\} \\\\\n"
"       & & xyz\\_geq\\text{@}int\\_slack \\in \\{0,1,2,3,4,5,6\\} \\\\\n"
"\\end{aligned}"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:285
msgid "IntegerToBinary"
msgstr "IntegerToBinary"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:296
msgid "``IntegerToBinary`` converts integer variables into binary variables and coefficients to remove integer variables from ``QuadraticProgram``. For converting, bounded-coefficient encoding proposed in `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Eq. (5)) is used. For more detail of the encoding method, please see the paper."
msgstr "``IntegerToBinary`` convertit des variables entières en variables binaires et coefficients pour supprimer des variables entières du ``QuadraticProgram``. Pour la conversion, l'encodage de bounded-coefficient (coefficient borné) proposé dans `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Eq. (5)) est utilisé. Pour plus de détails sur la méthode d'encodage, veuillez consulter le papier."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:298
msgid "We use the output of ``InequalityToEquality`` as starting point. Variable :math:`x` and :math:`y` are binary variables, while the variable :math:`z` and the slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` are integer variables. We print the problem again for reference."
msgstr "Nous utilisons la sortie de ``InequalityToEquality`` comme point de départ. Les variables :math:`x` et :math:`y` sont des variables binaires, alors que la variable :math:`z` et les variables slack :math:`xyz\\_leq\\text{@}int\\_slack` et :math:`xyz\\_geq\\text{@}int\\_slack` sont des variables entières. Nous imprimons à nouveau le problème pour référence."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:384
msgid "Call ``convert`` method of ``IntegerToBinary`` to convert."
msgstr "Appeler la méthode ``convert`` de ``IntegerToBinary`` pour convertir."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:494
msgid "After converting, integer variables :math:`z` is replaced with three binary variables :math:`z\\text{@}0`, :math:`z\\text{@}1` and :math:`z\\text{@}2` with coefficients 1, 2 and 4, respectively as the above. The slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` that were introduced by ``InequalityToEquality`` are also both replaced with three binary variables with coefficients 1, 2, 2, and 1, 2, 3, respectively."
msgstr "Après conversion, les variables entières :math:`z` sont remplacées par trois variables binaires :math:`z\\text{@}0`, :math:`z\\text{@}1` et :math:`z\\text{@}2` avec coefficients 1, 2 et 4, respectivement, comme ci-dessus. Les variables slack :math:`xyz\\_leq\\text{@}int\\_slack` et :math:`xyz\\_geq\\text{@}int\\_slack` introduites par ``InequalityToEquality`` sont également remplacées par trois variables binaires avec des coefficients 1, 2, 2 et 1, 2, 3, respectivement."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:496
msgid "Note: Essentially the coefficients mean that the sum of these binary variables with coefficients can be the sum of a subset of :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, and :math:`\\{1, 2, 3\\}` to represent that acceptable values :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}`, and :math:`\\{0, \\ldots, 6\\}`, which respects the lower bound and the upper bound of original integer variables correctly."
msgstr "Note: Essentiellement les coefficients signifient que la somme de ces variables binaires avec des coefficients peut être la somme d'un sous-ensemble de :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, et :math:`\\{1, 2, 3\\}` pour représenter les valeurs acceptables :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}`, et :math:`\\{0, \\ldots, et \\ldots, 6\\}`, qui respecte correctement la limite inférieure et la limite supérieure des variables entières originales."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:498
msgid "``IntegerToBinary`` also provides ``interpret`` method that is the functionality to translate a given binary result back to the original integer representation."
msgstr "``IntegerToBinary`` fournit également la méthode ``interpret`` qui est la fonctionnalité permettant de traduire un résultat binaire donné vers la représentation entière d'origine."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:510
msgid "LinearEqualityToPenalty"
msgstr "LinearEqualityToPenalty"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:521
msgid "``LinearEqualityToPenalty`` converts linear equality constraints into additional quadratic penalty terms of the objective function to map ``QuadraticProgram`` to an unconstrained form. An input to the converter has to be a ``QuadraticProgram`` with only linear equality constraints. Those equality constraints, e.g. :math:`\\sum_i a_i x_i = b` where :math:`a_i` and :math:`b` are numbers and :math:`x_i` is a variable, will be added to the objective function in the form of :math:`M(b - \\sum_i a_i x_i)^2` where :math:`M` is a large number as penalty factor. By default :math:`M= 1e5`. The sign of the term depends on whether the problem type is a maximization or minimization."
msgstr "``LinearEqualityToPenalty`` convertit les contraintes d'égalité linéaire en termes de pénalité quadratique supplémentaires de la fonction objective pour faire correspondre le ``QuadraticProgram`` à une forme non contrainte. Une entrée dans le convertisseur doit être un ``QuadraticProgram`` avec seulement des contraintes linéaires d'égalité. Ces contraintes d'égalité, par ex. :math:`\\sum_i a_i x_i = b` où :math:`a_i` et :math:`b` sont des nombres et :math:`x_i` est une variable, seront ajoutées à la fonction objective sous la forme de :math:`M(b - \\sum_i a_i x_i)^2` où :math:`M` est un grand nombre comme facteur de pénalité. Par défaut :math:`M= 1e5`. Le signe du terme dépendra du type de problème qui est maximisation ou minimisation."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:524
msgid "We use the output of ``IntegerToBinary`` as starting point, where all variables are binary variables and all inequality constraints have been mapped to equality constraints. We print the problem again for reference."
msgstr "Nous utilisons la sortie de ``IntegerToBinary`` comme point de départ, où toutes les variables sont des variables binaires et toutes les contraintes d'inégalité ont été mappées aux contraintes d'égalité. Nous imprimons à nouveau le problème pour référence."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:622
msgid "Call ``convert`` method of ``LinearEqualityToPenalty`` to convert."
msgstr "Appeler la méthode ``convert`` de ``LinearEqualityToPenalty`` pour convertir."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:776
msgid "After converting, the equality constraints are added to the objective function as additional terms with the default penalty factor :math:`M=1e5`. The resulting problem is now a QUBO and compatible with many quantum optimization algorithms such as VQE, QAOA and so on."
msgstr "Après conversion, les contraintes d'égalité sont ajoutées à la fonction objectif comme des termes supplémentaires avec le facteur de pénalité par défaut :math:` M=1e5 `. Le problème qui en résulte est maintenant un QUBO et il est compatible avec de nombreux algorithmes d'optimisation quantique tels que VQE, QAOA, etc."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:787
msgid "This gives the same result as before."
msgstr "Cela donne le même résultat qu'auparavant."

