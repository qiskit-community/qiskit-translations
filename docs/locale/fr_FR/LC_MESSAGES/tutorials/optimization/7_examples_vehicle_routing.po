msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-02 15:42+0000\n"
"PO-Revision-Date: 2020-10-19 12:32\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/7_examples_vehicle_routing.po\n"
"X-Crowdin-File-ID: 9382\n"
"Language: fr_FR\n"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:10
msgid "This page was generated from `tutorials/optimization/7_examples_vehicle_routing.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/optimization/7_examples_vehicle_routing.ipynb`__."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:9
msgid "**Vehicle Routing**"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:12
msgid "The Introduction"
msgstr "L'introduction"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:14
msgid "Logistics is a major industry, with some estimates valuing it at USD 8183 billion globally in 2015. Most service providers operate a number of vehicles (e.g., trucks and container ships), a number of depots, where the vehicles are based overnight, and serve a number of client locations with each vehicle during each day. There are many optimization and control problems that consider these parameters. Computationally, the key challenge is how to design routes from depots to a number of client locations and back to the depot, so as to minimize vehicle-miles traveled, time spent, or similar objective functions. In this notebook we formalize an idealized version of the problem and showcase its solution using the quantum approximate optimization approach of Farhi, Goldstone, and Gutman (2014)."
msgstr "Le secteur de la logistique représente une industrie majeure, certaines estimations l'évaluant à 8183 milliards de dollars en 2015. La plupart des fournisseurs de services utilisent un certain nombre de véhicules (par exemple des camions et des porte-conteneurs), un certain nombre de dépôts, où les véhicules sont basés, et desservent chaque jour un certain nombre de destinations avec chaque véhicule. Il existe de nombreux problèmes d'optimisation et de contrôle qui tiennent compte de ces paramètres. Sur le plan informatique, le principal défi consiste à concevoir des routes à partir de dépôts jusqu'à un certain nombre d'emplacements de clients et de retourner au dépôt, de façon à réduire au minimum le nombre de kilomètres parcourus, le temps de parcours, ou des fonctions objectives similaires. Dans ce bloc-notes, nous formalisons une version idéalisée du problème et nous exposons sa solution en utilisant l'approche d'optimisation quantique approximative de Farhi, Goldstone et Gutman (2014)."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:17
msgid "The overall workflow we demonstrate comprises:"
msgstr "Le workflow global que nous allons détailler comprend:"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:19
msgid "establish the client locations. Normally, these would be available ahead of the day of deliveries from a database. In our use case, we generate these randomly."
msgstr "établir les emplacements des clients à livrer : normalement ceux-ci sont disponibles avant le jour des livraisons dans une base de données. Dans notre cas d'utilisation, nous les générons aléatoirement."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:21
msgid "compute the pair-wise distances, travel times, or similar. In our case, we consider the Euclidean distance, \"as the crow flies\", which is perhaps the simplest possible."
msgstr "calculer les distances point à point, les temps de trajet (ou équivalent). Dans notre cas, nous considérons la distance euclidienne, \"à vol d'oiseau\", ce qui est peut-être le plus simple possible."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:23
msgid "compute the actual routes. This step is run twice, actually. First, we obtain a reference value by a run of a classical solver (IBM CPLEX) on the classical computer. Second, we run an alternative, hybrid algorithm partly on the quantum computer."
msgstr "calculer les routes réelles. Cette étape est exécutée deux fois, en fait. Tout d'abord, nous obtenons une valeur de référence par une exécution d'un solveur classique (IBM CPLEX) sur un ordinateur classique. Ensuite, nous avons une alternative, un algorithme hybride en partie sur l'ordinateur quantique."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:25
msgid "visualization of the results. In our case, this is again a simplistic plot."
msgstr "visualisation des résultats, dans notre cas, il s'agit à nouveau d'un graphique simple."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:27
msgid "In the following, we first explain the model, before we proceed with the installation of the pre-requisites and the data loading."
msgstr "Dans ce qui suit, nous expliquons d'abord le modèle utilisé ci-dessus, avant de procéder à l'installation des pré-requis et au chargement des données."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:30
msgid "The Model"
msgstr "Le Modèle"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:32
msgid "Mathematically speaking, the vehicle routing problem (VRP) is a combinatorial problem, wherein the best routes from a depot to a number of clients and back to the depot are sought, given a number of available vehicles. There are a number of formulations possible, extending a number of formulations of the traveling salesman problem [Applegate et al, 2006]. Here, we present a formulation known as MTZ [Miller, Tucker, Zemlin, 1960]."
msgstr "En termes mathématiques, le problème du routage des véhicules (VRP - vehicle routing problem) est un problème de combinatoire où l'on recherche les meilleurs itinéraires d'un dépôt à un certain nombre de clients et retour, étant donné un certain nombre de véhicules disponibles. Il existe plusieurs formulations possibles qui étendent un certain nombre de formulations du problème du voyageur de commerce [Applegate et al, 2006]. Ici, nous présentons une formulation connue sous le nom de MTZ [Miller, Tucker, Zemlin, 1960]."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:34
msgid "Let :math:`n` be the number of clients (indexed as :math:`1,\\dots,n`), and :math:`K` be the number of available vehicles. Let :math:`x_{ij} = \\{0,1\\}` be the binary decision variable which, if it is :math:`1`, activates the segment from node :math:`i` to node :math:`j`. The node index runs from :math:`0` to :math:`n`, where :math:`0` is (by convention) the depot. There are twice as many distinct decision variables as edges. For example, in a fully connected graph, there are :math:`n(n+1)` binary decision variables."
msgstr "Soit :math:`n` s le nombre de clients (indexés par :math:`1, \\dots, n`), et :math:`K` le nombre de véhicules disponibles. Soit :math:`x_{ij} = \\ { 0,1 \\ }` la variable de décision binaire qui, si elle vaut :math:`1`, active le segment du noeud :math:`i` au noeud :math:`j`. L'index du noeud passe de :math:`0` à :math:`n`, où :math:`0` est (par convention) le dépôt. Il existe deux fois plus de variables de décision distinctes que d'arêtes. Par exemple, dans un graphe entièrement connecté, il y a :math:'n(n+1) variables de décision binaires."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:37
msgid "If two nodes :math:`i` and :math:`j` have a link from :math:`i` to :math:`j`, we write :math:`i \\sim j`. We also denote with :math:`\\delta(i)^+` the set of nodes to which :math:`i` has a link, i.e., :math:`j \\in \\delta(i)^+` if and only if :math:`i \\sim j`. Similarly, we denote with :math:`\\delta(i)^-` the set of nodes which are connected to :math:`i`, in the sense that :math:`j \\in \\delta(i)^-` if and only if :math:`j \\sim i`."
msgstr "Si deux noeuds :math:`i` et :math:`j` sont liés de :math:`i` à :math:`j`, nous écrivons :math:`i \\sim j`. Nous notons également :math:`\\delta (i) ^ +` l'ensemble de noeuds avec lesquels le noeud :math:`i` a un lien, c'est-à-dire :math:`j \\in \\delta (i) ^ +` si et seulement si :math:`i \\sim j`. De même, nous notons :math:` \\delta (i) ^-` l'ensemble de noeuds qui sont connectés à :math:`i`, dans le sens où :math:`j \\in \\delta (i) ^-` si et seulement si :math:`j \\sim i`."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:39
msgid "In addition, we consider continuous variables, for all nodes :math:`i = 1,\\dots, n`, denoted :math:`u_i`. These variables are needed in the MTZ formulation of the problem to eliminate sub-tours between clients."
msgstr "En outre, nous considérons que les variables continues, pour tous les noeuds :math:`i = 1, \\dots, n`, sont notées :math:`u_i`. Ces variables sont nécessaires dans la formulation MTZ du problème pour éliminer les sous-circuits entre clients."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:41
msgid "The VRP can be formulated as:"
msgstr "Le VRP peut être formulé ainsi :"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:43
msgid "(VRP) \\quad  f = \\min_{\\{x_{ij}\\}_{i\\sim j}\\in \\{0,1\\}, \\{u_i\\}_{i=1,\\dots,n}\\in \\mathbb{R}} \\quad \\sum_{i \\sim j} w_{ij} x_{ij}"
msgstr "(VRP) \\quad  f = \\min_{\\{x_{ij}\\}_{i\\sim j}\\in \\{0,1\\}, \\{u_i\\}_{i=1,\\dots,n}\\in \\mathbb{R}} \\quad \\sum_{i \\sim j} w_{ij} x_{ij}"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:48
msgid "subject to the node-visiting constraint:"
msgstr "sous réserve de la contrainte de visite des dépots :"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:50
msgid "\\sum_{j \\in \\delta(i)^+} x_{ij} = 1, \\,\\sum_{j \\in \\delta(i)^-} x_{ji} = 1,\\, \\forall i \\in \\{1,\\dots,n\\},"
msgstr "\\sum_{j \\in \\delta(i)^+} x_{ij} = 1, \\,\\sum_{j \\in \\delta(i)^-} x_{ji} = 1,\\, \\forall i \\in \\{1,\\dots,n\\},"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:55
msgid "the depot-visiting constraints:"
msgstr "les contraintes de visite des dépôts :"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:57
msgid "\\sum_{i \\in \\delta(0)^+} x_{0i} = K, \\, \\sum_{j \\in \\delta(0)^+} x_{j0} = K,"
msgstr "\\sum_{i \\in \\delta(0)^+} x_{0i} = K, \\, \\sum_{j \\in \\delta(0)^+} x_{j0} = K,"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:62
msgid "and the sub-tour elimination constraints:"
msgstr "et les contraintes d'élimination des sous-circuits :"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:64
msgid "u_i - u_j + Q x_{ij} \\leq Q-q_j, \\, \\forall i \\sim j, \\,i ,j \\neq 0, \\quad q_i \\leq u_i \\leq Q,\\, \\forall i, i \\neq 0."
msgstr "u_i - u_j + Q x_{ij} \\leq Q-q_j, \\, \\forall i \\sim j, \\,i ,j \\neq 0, \\quad q_i \\leq u_i \\leq Q,\\, \\forall i, i \\neq 0."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:69
msgid "In particular, - The cost function is linear in the cost functions and weighs the different arches based on a positive weight :math:`w_{ij}>0` (typically the distance between node :math:`i` and node :math:`j`); - The first set of constraints enforce that from and to every client, only one link is allowed; - The second set of constraints enforce that from and to the depot, exactly :math:`K` links are allowed; - The third set of constraints enforce the sub-tour elimination constraints and are bounds on :math:`u_i`, with :math:`Q>q_j>0`, and :math:`Q,q_i \\in \\mathbb{R}`."
msgstr "En particulier, -La fonction de coût est une fonction linéaire des fonctions de coût et prend en compte les différents arcs avec un poids positif :math:`w_{ij}> 0` (généralement il s'agit de la distance entre le noeud :math:`i` et le noeud :math:`j`) ; -Le premier ensemble de contraintes impose qu'un seul lien aille sur chaque client ; -Le deuxième ensemble de contraintes impose que, depuis et vers le dépôt, exactement :math:`K` liens sont autorisés ; -Le troisième ensemble de contraintes applique les contraintes d'élimination des cous-circuits et appliquent les limites sur :math:`u_i`, avec :math:`Q > q_j> 0`, et :math:`Q, q_i \\in \\mathbb{R}`."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:73
msgid "Classical solution"
msgstr "Solution classique"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:75
msgid "We can solve the VRP classically, e.g., by using CPLEX. CPLEX uses a branch-and-bound-and-cut method to find an approximate solution of the VRP, which, in this formulation, is a mixed-integer linear program (MILP). For the sake of notation, we pack the decision variables in one vector as"
msgstr "Nous pouvons résoudre le VRP classiquement, par exemple en utilisant CPLEX. Le CPLEX utilise une méthode de branchement et de coupe pour trouver une solution approximative de la VRP, qui, dans cette formulation, est un programme linéaire mixte entier (MILP). Pour des raisons de notation, nous comptons les variables de décision dans un vecteur comme"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:77
msgid "{\\bf z} = [x_{01},x_{02},\\ldots,x_{10}, x_{12},\\ldots,x_{n(n-1)}]^T,"
msgstr "{\\bf z} = [x_{01},x_{02},\\ldots,x_{10}, x_{12},\\ldots,x_{n(n-1)}]^T,"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:82
msgid "wherein :math:`{\\bf z} \\in \\{0,1\\}^N`, with :math:`N = n (n+1)`. So the dimension of the problem scales quadratically with the number of nodes. Let us denote the optimal solution by :math:`{\\bf z}^*`, and the associated optimal cost :math:`f^*`."
msgstr "où :math:`{\\bf z} \\in \\{0,1\\}^N`, avec :math:`N = n (n+1)`. Ainsi, la dimension du problème varie de façon quadratique avec le nombre de nœuds. Désignons la solution optimale de :math:`{\\bf z}^*`, et le coût optimal associé :math:`f^*`."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:85
msgid "Quantum solution"
msgstr "Solution Quantique"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:87
msgid "Here, we demonstrate an approach that combines classical and quantum computing steps, following the quantum approximate optimization approach of Farhi, Goldstone, and Gutman (2014). In particular, we use the variational quantum eigensolver (VQE). We stress that given the use of limited depth of the quantum circuits employed (variational forms), it is hard to discuss the speed-up of the algorithm, as the solution obtained is heuristic in nature. At the same time, due to the nature and importance of the target problems, it is worth investigating heuristic approaches, which may be worthwhile for some problem classes."
msgstr "Dans ce qui suit, nous exposons une approche combinant des étapes d'informatique classique et quantique, en suivant l'approche d'optimisation quantique approximative de Farhi, Goldstone et Gutman (2014). En particulier, nous utilisons l'eigensolver quantique variationnel (VQE). Soulignons que compte tenu du fait que nous utilisons des circuits quantiques de profondeur limitée (formes variationnelles), il est difficile d'évaluer l'accélération apportée par l'algorithme, car la solution obtenue est de nature heuristique. En même temps, en raison de la nature et de l'importance des problèmes ciblés, il est utile d'étudier des approches heuristiques qui peuvent être utiles pour certaines classes de problèmes."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:90
msgid "Following [5], the algorithm can be summarized as follows: - Preparation steps: - Transform the combinatorial problem into a binary polynomial optimization problem with equality constraints only; - Map the resulting problem into an Ising Hamiltonian (:math:`H`) for variables :math:`{\\bf z}` and basis :math:`Z`, via penalty methods if necessary; - Choose the depth of the quantum circuit :math:`m`. Note that the depth can be modified adaptively. - Choose a set of controls :math:`\\theta` and make a trial function :math:`\\big|\\psi(\\boldsymbol\\theta)\\rangle`, built using a quantum circuit made of C-Phase gates and single-qubit Y rotations, parameterized by the components of :math:`\\boldsymbol\\theta`."
msgstr "D'après [5], l'algorithme peut être résumé comme suit: -Etapes de préparation: - Transformation du problème combinatoire en un problème d'optimisation polynomiale binaire avec des contraintes d'égalité uniquement ;- Mapping du problème résultant dans un hamiltonien Ising (:math:`H`) pour les variables :math:`{ \\bf z }` et la base :math:`Z`, via des méthodes de pénalité si nécessaire ; -Choix de la profondeur du circuit quantique :math:`m`. Notez que la profondeur peut être modifiée de façon adaptative. - Choix d'un ensemble de commandes :math:`\\theta` et construction d'une fonction d'essai :math:`\\big | \\psi (\\boldsymbol\\theta)\\rangle`, à l'aide d'un circuit quantique fait de portes C-Phase et de rotations sur un seul qubit selon Y, paramétrées par les composants de :math:` \\boldsymbol\\theta `."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:93
msgid "Algorithm steps:"
msgstr "Etapes de l'algorithme:"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:95
msgid "Evaluate :math:`C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)\\big|H\\big|\\psi(\\boldsymbol\\theta)\\rangle` by sampling the outcome of the circuit in the Z-basis and adding the expectation values of the individual Ising terms together. In general, different control points around :math:`\\boldsymbol\\theta` have to be estimated, depending on the classical optimizer chosen."
msgstr "Évaluer :math:`C( \\boldsymbol\\theta) = \\langle\\psi (\\boldsymbol\\theta) \\big | H \\big | \\psi (\\boldsymbol\\theta)\\rangle` en échantillonant le résultat du circuit selon la base Z et en additionnant les valeurs d'espérance des différent termes d'Ising. En général, différents points de contrôle autour de :math:` \\boldsymbol\\theta doivent être estimés, en fonction de l'optimiseur classique choisi."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:96
msgid "Use a classical optimizer to choose a new set of controls."
msgstr "Utiliser un optimiseur classique pour choisir un nouvel ensemble de contrôles."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:97
msgid "Continue until :math:`C(\\boldsymbol\\theta)` reaches a minimum, close enough to the solution :math:`\\boldsymbol\\theta^*`."
msgstr "Continuer jusqu'à ce que :math:`C(\\boldsymbol\\theta)` atteigne un minimum, assez proche de la solution :math:`\\boldsymbol\\theta^*`."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:98
msgid "Use the last :math:`\\boldsymbol\\theta` to generate a final set of samples from the distribution :math:`\\Big|\\langle z_i\\big|\\psi(\\boldsymbol\\theta)\\rangle\\Big|^2\\;\\forall i` to obtain the answer."
msgstr "Utiliser le dernier :math:`\\boldsymbol\\thet` pour générer un ensemble final d'échantillons à partir de la distribution :math:`\\Big|\\langle z_i\\big|\\psi(\\boldsymbol\\theta)\\rangle\\Big|^2\\; a forall i` afin d'obtenir la réponse."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:100
msgid "There are many parameters throughout, notably the choice of the trial wavefunction. Below, we consider:"
msgstr "Il existe de nombreux paramètres, notamment le choix de la fonction d'onde de l'essai. Ci-dessous, nous considérons:"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:102
msgid "\\big|\\psi(\\theta)\\rangle = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m \\big|+\\rangle"
msgstr "\\big|\\psi(\\theta)\\rangle = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m \\big|+\\rangle"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:107
msgid "where :math:`U_\\mathrm{entangler}` is a collection of C-Phase gates (fully-entangling gates), and :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^N Y(\\theta_{i})`, where :math:`N` is the number of qubits and :math:`m` is the depth of the quantum circuit."
msgstr "où :math:`U_\\mathrm{entangler}` est un ensemble de portes C-Phase (portes d'intrication maximale), :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^N Y(\\theta_{i})`, où :math:`N` est le nombre de qubits et :math:`m` est la profondeur du circuit quantique."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:110
msgid "Construct the Ising Hamiltonian"
msgstr "Construction de l'hamiltonien Ising"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:112
msgid "From :math:`VRP` one can construct a binary polynomial optimization with equality constraints only by considering cases in which :math:`K=n-1`. In these cases the sub-tour elimination constraints are not necessary and the problem is only on the variable :math:`{\\bf z}`. In particular, we can write an augmented Lagrangian as"
msgstr "A partir de :math:` VRP ` on peut construire une optimisation polynomiale binaire avec des contraintes d'égalité en considérant seulement les cas pour lesquels :math:`K=n-1`. Dans ces cas, les contraintes d'élimination de sous-circuits ne sont pas nécessaires et le problème ne dépend que de la variable :math:` { \\bf z } `. En particulier, nous pouvons écrire un lagrangien augmenté comme ceci :"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:114
msgid "(IH) \\quad H = \\sum_{i \\sim j} w_{ij} x_{ij}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big(\\sum_{j \\in \\delta(i)^+} x_{ij} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big(\\sum_{j \\in \\delta(i)^-} x_{ji} - 1\\Big)^2 +A \\Big(\\sum_{i \\in \\delta(0)^+} x_{0i} - K\\Big)^2 + A\\Big(\\sum_{j \\in \\delta(0)^+} x_{j0} - K\\Big)^2"
msgstr "(IH) \\quad H = \\sum_{i \\sim j} w_{ij} x_{ij}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big(\\sum_{j \\in \\delta(i)^+} x_{ij} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big(\\sum_{j \\in \\delta(i)^-} x_{ji} - 1\\Big)^2 +A \\Big(\\sum_{i \\in \\delta(0)^+} x_{0i} - K\\Big)^2 + A\\Big(\\sum_{j \\in \\delta(0)^+} x_{j0} - K\\Big)^2"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:119
msgid "where :math:`A` is a big enough parameter."
msgstr "où :math:`A` est un paramètre suffisamment grand."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:122
msgid "From Hamiltonian to QP formulation"
msgstr "Du hamiltonien à la formulation QP"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:124
msgid "In the vector :math:`{\\bf z}`, and for a complete graph (:math:`\\delta(i)^+ = \\delta(i)^- = \\{0,1,\\dots,i-1,i+1,\\dots,n\\}`), :math:`H` can be written as follows."
msgstr "Par rapport au vecteur :math:`{ \\bf z }`, et pour un graphe complet (:math:` \\delta (i) ^ + = \\delta (i) ^-= \\ { 0 ,1, \\dots, i-1,i + 1, \\dots, n\\ } `), :math:`H` peut être écrit comme suit."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:126
msgid "\\min_{{\\bf z}\\in \\{0,1\\}^{n(n+1)}} {\\bf w}^T {\\bf z}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big({\\bf e}_i \\otimes {\\bf 1}_n^T {\\bf z} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big({\\bf v}_i^T {\\bf z} - 1\\Big)^2 + A \\Big(({\\bf e}_0 \\otimes {\\bf 1}_n)^T{\\bf z} - K\\Big)^2 + A\\Big({\\bf v}_0^T{\\bf z} - K\\Big)^2."
msgstr "\\min_{{\\bf z}\\in \\{0,1\\}^{n(n+1)}} {\\bf w}^T {\\bf z}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big({\\bf e}_i \\otimes {\\bf 1}_n^T {\\bf z} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big({\\bf v}_i^T {\\bf z} - 1\\Big)^2 + A \\Big(({\\bf e}_0 \\otimes {\\bf 1}_n)^T{\\bf z} - K\\Big)^2 + A\\Big({\\bf v}_0^T{\\bf z} - K\\Big)^2."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:131
msgid "That is:"
msgstr "Il s'agit de:"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:133
msgid "\\min_{\\bf z\\in \\{0,1\\}^{n(n+1)}} \\bf z^T {\\bf Q} \\bf z + {\\bf g}^T \\bf z + c,"
msgstr "\\min_{\\bf z\\in \\{0,1\\}^{n(n+1)}} \\bf z^T {\\bf Q} \\bf z + {\\bf g}^T \\bf z + c,"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:138
msgid "Where: first term:"
msgstr "Où: premier terme:"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:140
msgid "{\\bf Q} = A \\sum_{i \\in \\{0,1,\\dots,n\\}}  \\Big[({\\bf e}_i \\otimes {\\bf 1}_n)({\\bf e}_i \\otimes {\\bf 1}_n)^T + {\\bf v}_i{\\bf v}_i^T \\Big]"
msgstr "{\\bf Q} = A \\sum_{i \\in \\{0,1,\\dots,n\\}}  \\Big[({\\bf e}_i \\otimes {\\bf 1}_n)({\\bf e}_i \\otimes {\\bf 1}_n)^T + {\\bf v}_i{\\bf v}_i^T \\Big]"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:145
msgid "Second term:"
msgstr "Deuxième terme:"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:147
msgid "{\\bf g} = {\\bf w} -2 A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big[({\\bf e}_i \\otimes {\\bf 1}_n) + {\\bf v}_i \\Big] -2 A K \\Big[({\\bf e}_0 \\otimes {\\bf 1}_n) + {\\bf v}_0 \\Big]"
msgstr "{\\bf g} = {\\bf w} -2 A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big[({\\bf e}_i \\otimes {\\bf 1}_n) + {\\bf v}_i \\Big] -2 A K \\Big[({\\bf e}_0 \\otimes {\\bf 1}_n) + {\\bf v}_0 \\Big]"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:152
msgid "Third term:"
msgstr "Troisième terme:"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:154
msgid "c = 2An +2AK^2."
msgstr "c = 2An +2AK^2."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:159
msgid "The QP formulation of the Ising Hamiltonian is ready for the use of VQE. We will solve the QP using optimization stack available in Qiskit."
msgstr "La formulation QP du Hamiltonien Ising est prête pour l'utilisation de VQE. Nous allons résoudre le QP en utilisant la pile d'optimisation disponible dans Qiskit."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:162
msgid "References"
msgstr "Références"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:164
msgid "[1] E. Farhi, J. Goldstone, S. Gutmann e-print arXiv 1411.4028, 2014"
msgstr "[1] E. Farhi, J. Goldstone, S. Gutmann e-print arXiv 1411.4028, 2014"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:166
msgid "[2] https://github.com/Qiskit/qiskit-tutorial/blob/master/qiskit/aqua/optimization/maxcut\\_and\\_tsp.ipynb"
msgstr "[2] https://github.com/Qiskit/qiskit-tutorial/blob/master/qiskit/aqua/optimization/maxcut\\_and\\_tsp.ipynb"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:168
msgid "[3] C. E. Miller, E. W. Tucker, and R. A. Zemlin (1960). \"Integer Programming Formulations and Travelling Salesman Problems\". J. ACM. 7: 326–329. doi:10.1145/321043.321046."
msgstr "[3] C. E. Miller, E. W. Tucker, and R. A. Zemlin (1960). \"Integer Programming Formulations and Travelling Salesman Problems\". J. ACM. 7: 326–329. doi:10.1145/321043.321046."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:170
msgid "[4] D. L. Applegate, R. M. Bixby, V. Chvátal, and W. J. Cook (2006). The Traveling Salesman Problem. Princeton University Press, ISBN 978-0-691-12993-8."
msgstr "[4] D. L. Applegate, R. M. Bixby, V. Chvátal, and W. J. Cook (2006). The Traveling Salesman Problem. Princeton University Press, ISBN 978-0-691-12993-8."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:182
msgid "Initialization"
msgstr "Initialisation"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:184
msgid "First of all we load all the packages that we need: - Python 3.6 or greater is required; - CPLEX 12.8 or greater is required for the classical computations; - Latest Qiskit is required for the quantum computations."
msgstr "Tout d'abord, nous chargeons tous les packages dont nous avons besoin : - Python 3.6 ou supérieur; - CPLEX 12.8 ou supérieur sont requis pour les calculs classiques; - Le dernier niveau de Qiskit est requis pour les calculs quantiques."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:233
msgid "We then initialize the variables"
msgstr "Nous initialisons ensuite les variables"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:256
msgid "We define an initializer class that randomly places the nodes in a 2-D plane and computes the distance between them."
msgstr "Nous définissons une classe d'initialisation qui place aléatoirement les nœuds dans un plan en dimension 2 et calcule la distance entre eux."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:312
msgid "Classical solution using IBM ILOG CPLEX"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:314
msgid "For a classical solution, we use IBM ILOG CPLEX. CPLEX is able to find the exact solution of this problem. We first define a ClassicalOptimizer class that encodes the problem in a way that CPLEX can solve, and then instantiate the class and solve it."
msgstr "Pour une solution classique, nous utilisons IBM ILOG CPLEX. CPLEX est capable de trouver la solution exacte pour ce problème. Nous définissons d'abord une classe ClassicalOptimizer qui code le problème d'une manière que CPLEX peut résoudre, puis nous instancions la classe et nous résolvons le problème."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:531
msgid "If you have CPLEX, the solution shows the depot with a star and the selected routes for the vehicles with arrows."
msgstr "Si vous avez CPLEX, la solution marque le dépôt avec une étoile et les routes sélectionnées pour les véhicules avec des flèches."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:543
msgid "Quantum solution from the ground up"
msgstr "Solution quantique depuis le début"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:545
msgid "For the quantum solution, we use Qiskit."
msgstr "Pour la solution quantique, nous utilisons Qiskit."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:547
msgid "First, we derive the solution from the ground up, using a class QuantumOptimizer that encodes the quantum approach to solve the problem and then we instantiate it and solve it. We define the following methods inside the class: - ``binary_representation`` : encodes the problem :math:`(M)` into a QP terms (that's basically linear algebra); - ``construct_problem`` : constructs a QUBO optimization problem as an instance of ``QuadraticProgram``; - ``solve_problem``: solves the problem :math:`(M)` constructed at the previous step via ``MinimunEigenOptimizer`` by using VQE with default parameters;"
msgstr "Tout d'abord, nous construisons la solution en utilisant une classe QuantumOptimizer qui encode l'approche quantique pour résoudre le problème et ensuite nous l'instancions et le résolvons. Nous définissons les méthodes suivantes dans la classe : - ``binary_representation`` : pour encoder le problème :math:`(M)` en termes de QP (il s'agit essentiellement d'algèbre linéaire); - ``construct_problem`` : construit un problème d'optimisation QUBO en tant qu'instance de ``QuadraticProgram`` ; - ``solve_problem`` : résout le problème :math:`(M)` qui a été construit à l'étape précédente via ``MinimunEigenOptimizer`` en utilisant VQE avec des paramètres par défaut ;"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:658
msgid "Step 1"
msgstr "Étape 1"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:660
msgid "Instantiate the quantum optimizer class with parameters: - the instance; - the number of nodes and vehicles ``n`` and ``K``;"
msgstr "Instancions la classe d'optimiseur quantique avec les paramètres suivants : - l'instance ; - le nombre de nœuds et de véhicules ``n`` et ``K`` ;"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:683
msgid "Step 2"
msgstr "Étape 2"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:685
msgid "Encode the problem as a binary formulation (IH-QP)."
msgstr "Encodons le problème en tant que formulation binaire (IH-QP)."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:687
msgid "Sanity check: make sure that the binary formulation in the quantum optimizer is correct (i.e., yields the same cost given the same solution)."
msgstr "Vérification : assurons-nous que la formulation binaire dans l'optimiseur quantique est correcte (c'est-à-dire qu'elle génère le même coût compte tenu de la même solution)."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:744
msgid "Step 3"
msgstr "Étape 3"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:746
msgid "Encode the problem as an instance of ``QuadraticProgram``."
msgstr "Encodons le problème sous la forme d'une instance de ``QuadraticProgram``."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:768
msgid "Step 4"
msgstr "Étape 4"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:770
msgid "Solve the problem via ``MinimumEigenOptimizer`` from the optimization stack. N.B. Depending on the number of qubits, the state-vector simulation can take a while; for example with 12 qubits, it takes more than 12 hours. Logging is useful to see what the program is doing."
msgstr "Résolvons le problème via ``MinimumEigenOptimizer`` depuis la pile d'optimisation. N.B. Selon le nombre de qubits, la simulation par vecteur d'état peut prendre un certain temps ; par exemple avec 12 qubits, elle prend plus de 12 heures. La journalisation est donc utile pour voir ce que fait le programme."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:813
msgid "Step 5"
msgstr "Étape 5"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:815
msgid "Visualize the solution"
msgstr "Visualisons la solution"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:867
msgid "The plots present the depot with a star and the selected routes for the vehicles with arrows. Note that in this particular case, we can find the optimal solution of the QP formulation, which happens to coincide with the optimal solution of the ILP."
msgstr "Les graphique présente le dépôt avec une étoile et les routes sélectionnées pour les véhicules avec des flèches. Notez que dans ce cas particulier, nous pouvons trouver la solution optimale de la formulation QP, qui se trouve coïncider avec la solution optimale de l'ILP."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:869
msgid "Keep in mind that VQE is an heuristic working on the QP formulation of the Ising Hamiltonian, though. For suitable choices of A, local optima of the QP formulation will be feasible solutions to the ILP. While for some small instances, as above, we can find optimal solutions of the QP formulation which coincide with optima of the ILP, finding optimal solutions of the ILP is harder than finding local optima of the QP formulation, in general, which in turn is harder than finding feasible solutions of the ILP. Even within the VQE, one may provide stronger guarantees, for specific variational forms (trial wave functions)."
msgstr "Gardez à l'esprit que VQE est un travail heuristique sur la formulation QP du hamiltonien Ising. Pour les choix appropriés de A, l'optimisation locale de la formulation QP sera une solution réalisable pour l'ILP. Bien que pour des instances de petite taille, comme ci-dessus, nous pouvons trouver des solutions optimales de la formulation QP qui coïncident avec optimum de l'ILP, il est plus difficile de trouver des solutions optimales de l'ILP que de trouver des optimum locaux de la formulation QP, en général, ce qui à son tour est plus difficile que de trouver des solutions réalisables de l'ILP. Ainsi, dans le cadre du VQE, on peut fournir des garanties plus fortes, pour des formes variationnelles spécifiques (fonctions d'onde d'essai)."

