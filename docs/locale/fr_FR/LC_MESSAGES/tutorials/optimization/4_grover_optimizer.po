msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-17 16:46+0000\n"
"PO-Revision-Date: 2020-07-31 17:27\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/4_grover_optimizer.po\n"
"X-Crowdin-File-ID: 9154\n"
"Language: fr_FR\n"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:10
msgid "This page was generated from `tutorials/optimization/4_grover_optimizer.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/optimization/4_grover_optimizer.ipynb`__."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:9
msgid "Grover Optimizer"
msgstr "Optimiseur de Grover"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:21
msgid "Introduction"
msgstr "Introduction"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:23
msgid "Grover Adaptive Search (GAS) has been explored as a possible solution for combinatorial optimization problems, alongside variational algorithms such as Variational Quantum Eigensolver (VQE) and Quantum Approximate Optimization Algorithm (QAOA). The algorithm iteratively applies Grover Search to find the optimum value of an objective function, by using the best-known value from the previous run as a threshold. The adaptive oracle used in GAS recognizes all values above or below the current threshold (for max and min respectively), decreasing the size of the search space every iteration the threshold is updated, until an optimum is found."
msgstr "La recherche adaptative de Grover (Grover Adaptive Search : GAS) a été explorée comme une solution possible aux problèmes d'optimisation combinatoire, aux côtés d'algorithmes variationnels tels que Variational Quantum Eigensolver (VQE) et Quantum Approximate Optimization Algorithm (QAOA). L'algorithme applique de façon itérative Grover Search pour trouver la valeur optimale d'une fonction objectif, en utilisant la meilleure valeur issue de l'exécution précédente comme seuil. L'oracle adaptatif utilisé dans GAS reconnaît toutes les valeurs au-dessus ou au-dessous du seuil actuel (respectivement pour max et min), diminuant la taille de l'espace de recherche à chaque itération pour laquelle le seuil est mis à jour, jusqu'à ce qu'un optimum soit trouvé."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:26
msgid "In this notebook we will explore each component of the ``GroverOptimizer``, which utilizes the techniques described in GAS, by minimizing a Quadratic Unconstrained Binary Optimization (QUBO) problem, as described in [1]"
msgstr "Dans ce bloc-notes, nous explorerons chaque composant de ``GroverOptimizer``, qui utilise les techniques décrites dans le GAS, en minimisant un problème de type QUBO (Quadratic Unconstrained Binary Optimization), tel que décrit dans [1]"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:29
msgid "References"
msgstr "Références"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:31
msgid "[1] [A. Gilliam, S. Woerner, C. Gonciulea, *Grover Adaptive Search for Constrained Polynomial Binary Optimization,* arXiv preprint arXiv:1912.04088 (2019).](https://arxiv.org/abs/1912.04088)"
msgstr "[1] [ A. Gilliam, S. Woerner, C. Gonciulea, *Grover Adaptive Search for Constrained Polynomial Binary Optimization, * arXiv preprint arXiv:1912.04088 (2019). ] (https://arxiv.org/abs/1912.04088)"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:43
msgid "Grover Adaptive Search"
msgstr "Recherche adaptative de Grover"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:45
msgid "Grover Search, the core element of GAS, needs three ingredients:"
msgstr "Grover Search, l'élément central du GAS, a besoin de trois ingrédients :"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:47
msgid "A state preparation operator :math:`A` to construct a superposition of all states in the search space."
msgstr "Un opérateur de préparation d'état :math:` A ` pour construire une superposition de tous les états dans l'espace de recherche."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:49
msgid "An oracle operator :math:`O`, that recognizes the states of interest and multiplies their amplitudes by -1."
msgstr "Un opérateur oracle :math:` O', qui reconnaît les états d'intérêt et multiplie leurs amplitudes par -1."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:51
msgid "The Grover diffusion operator :math:`D`, that multiplies the amplitude of the :math:`|0\\rangle_n` state by -1."
msgstr "L'opérateur de diffusion Grover :math:` D `, qui multiplie l'amplitude du :math:`| 0\\rangle_n` état par -1."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:53
msgid "While implementations of GAS vary around the specific use case, the general framework still loosely follows the steps described below."
msgstr "Bien que les implémentations de GAS varient en fonction du cas d'utilisation spécifique, le cadre général suit généralement les étapes décrites ci-dessous."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:59
msgid "|aaa254e55fa6490dbd96f20c949ecfd1|"
msgstr "|aaa254e55fa6490dbd96f20c949ecfd1|"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:65
msgid "``GroverOptimizer`` uses ``QuadraticProgramToNegativeValueOracle`` to construct :math:`A_y` such that it prepares a :math:`n`-qubit register to represent the equal superposition of all :math:`|x\\rangle_n` and a :math:`m`-qubit register to (approximately) represent the corresponding :math:`|Q(x)-y\\rangle_m`. Then, all states with :math:`(Q(x) - y)` negative should be flagged by :math:`O_y`. Note that in the implementation discussed, the oracle operator is actually independent of :math:`y`, but this is not a requirement. For clarity, we will refer to the oracle as :math:`O` when the oracle is independent of :math:`y`."
msgstr "``GroverOptimizer`` utilise l'oracle ``QuadraticProgramToNegativeValueOracle`` pour construire :math:`A_y` de telle sorte qu'il prépare un registre à :math:`n`-qubit pour représenter la superposition égale de tous les états :math:`|x\\rangle_n` et un registre à :math:`m`-qubit pour (approximativement) représenter l'état :math:`|Q(x)-y\\rangle_m`. Ensuite, tous les états avec :math:`(Q(x) - y)` négatifs devraient être marqués par :math:`O_y`. Notez que dans l'implémentation discutée, l'opérateur Oracle est en fait indépendant de :math:`y`, mais ce n'est pas une exigence. Pour plus de clarté, nous appellerons l'oracle :math:`O` lorsque l'oracle est indépendant de :math:`y`."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:68
msgid "Put formally, ``QuadraticProgramToNegativeValueOracle`` constructs an :math:`A_y` and :math:`O` such that:"
msgstr "En termes plus formels, ` ` QuadraticProgramToNegativeValueOracle ` ` construit un :math:` A_y ` et :math:` O ` tel que:"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:74
msgid "|765fd2e96afa4d97b63fbbb57922ed54|"
msgstr "|765fd2e96afa4d97b63fbbb57922ed54|"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:80
msgid "where :math:`|x\\rangle` is the binary encoding of the integer :math:`x`."
msgstr "où l'état :math:`|x\\rangle` représente l'encodage binaire de l'entier :math:`x`."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:82
msgid "At each iteration in which the threshold :math:`y` is updated, we adapt :math:`A_y` such that the function values are shifted up or down (for minimum and maxmimum respectively) by :math:`y`. For example, in the context of finding the minimum, as the value of :math:`y` decreases, the search space (negative values) also decreases, until only the minimum value remains. A concrete example will be explored in the next section."
msgstr "A chaque itération dans laquelle le seuil :math:`y` est mis à jour, nous adaptons :math:` A_y` de sorte que les valeurs de fonction sont décalées vers le haut ou vers le bas (pour le minimum et le maximum respectivement) par :math:`y`. Par exemple, dans le contexte de la recherche du minimum, comme la valeur de :math:`y` diminue, l'espace de recherche (valeurs négatives) diminue également, jusqu'à ce que seule la valeur minimale reste. Un exemple concret sera examiné dans la prochaine section."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:99
msgid "Find the Minimum of a QUBO Problem using GroverOptimizer"
msgstr "Trouver le minimum d'un problème QUBO en utilisant GroverOptimizer"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:101
msgid "The following is a toy example of a minimization problem."
msgstr "Voici un exemple de taille réduite d'un problème de minimisation."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:103
msgid "\\begin{eqnarray} \\min_{x \\in \\{0, 1\\}^3} -2x_1x_3 - x_2x_3 - 1x_1 + 2x_2 - 3x_3. \\end{eqnarray}"
msgstr "\\begin{eqnarray} \\min_ { x \\in \\ { 0, 1\\ } ^ 3 } -2x_1x_3-x_2x_3-1x_1 + 2x_2-3x_3. \\end{eqnarray}"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:110
msgid "For our initial steps, we create a docplex model that defines the problem above, and then use the ``from_docplex()`` function to convert the model to a ``QuadraticProgram``, which can be used to represent a QUBO in Qiskit Optimization."
msgstr "Pour nos étapes initiales, nous créons un modèle docplex qui définit le problème ci-dessus, puis nous utilisons la fonction ``from_docplex()`` pour convertir le modèle en un ``QuadraticProgram``, qui peut être utilisé pour représenter un QUBO dans Qiskit Optimisation."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:205
msgid "Next, we create a ``GroverOptimizer`` that uses 6 qubits to encode the value, and will terminate after there have been 10 iterations of GAS without progress (i.e. the value of :math:`y` does not change). The ``solve()`` function takes the ``QuadraticProgram`` we created earlier, and returns a results object that contains information about the run."
msgstr "Ensuite, nous créons un ` ` GroverOptimizer ` ` ` qui utilise 6 qubits pour coder la valeur, et se terminera après 10 itérations de GAS sans progression (c'est-à-dire que la valeur de :math:` y'ne change plus). La fonction ` ` solve() ` ` prend le ` ` QuadraticProgram ` ` que nous avons créé plus tôt, et renvoie un objet qui contient les résultats de l'exécution."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:250
msgid "This results in the optimal solution :math:`x_0=1`, :math:`x_1=0`, :math:`x_2=1` and the optimal objective value of :math:`-6` (most of the time, since it is a randomized algorithm). In the following, a custom visualization of the quantum state shows a possible run of ``GroverOptimizer`` applied to this QUBO."
msgstr "Il en résulte la solution optimale :math:`x_0 = 1`, :math:`x_1 = 0`, :math:`x_2 = 1` et la valeur objective optimale de :math:`-6` (la plupart du temps, puisqu'il s'agit d'un algorithme aléatoire). Dans ce qui suit, une visualisation de l'état quantique montre une possible exécution de ``GroverOptimizer`` appliqué à ce QUBO."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:256
msgid "|2134469a97304376ae331a8c2e29f59c|"
msgstr "|2134469a97304376ae331a8c2e29f59c|"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:262
msgid "Each graph shows a single iteration of GAS, with the current values of :math:`r` (= iteration counter) and :math:`y` (= threshold/offset) shown in the title. The X-axis displays the integer equivalent of the input (e.g. '101' :math:`\\rightarrow` 5), and the Y-axis shows the possible function values. As there are 3 binary variables, there are :math:`2^3=8` possible solutions, which are shown in each graph. The color intensity indicates the probability of measuring a certain result (with bright intensity being the highest), while the actual color indicates the corresponding phase (see phase color-wheel below). Note that as :math:`y` decreases, we shift all of the values up by that amount, meaning there are fewer and fewer negative values in the distribution, until only one remains (the minimum)."
msgstr "Chaque graphique montre une seule itération de GAS, avec les valeurs actuelles de :math:`r` (= compteur d'itération) et :math:`y` (= seuil/offset) affichées dans le titre. L'axe X affiche l'équivalent entier de l'entrée (e. . '101' :math:`\\rightarrow` 5), et l'axe Y montre les valeurs possibles de la fonction. Comme il y a 3 variables binaires, il y a :math:`2^3=8` solutions possibles, qui sont affichées dans chaque graphique. L'intensité de la couleur indique la probabilité de mesurer un certain résultat (avec l'intensité la plus élevée), tandis que la couleur elle même indique la phase correspondante (voir la roue de la phase ci-dessous). Notez que puisque :math:`y` diminue, nous déplaçons toutes les valeurs d'autant, signifiant qu'il y a de moins en moins de valeurs négatives dans la distribution, jusqu'à ce qu'il n'en reste qu'une (le minimum)."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:269
msgid "|542e622d9bce4740897838dd11b5b5dc|"
msgstr "|542e622d9bce4740897838dd11b5b5dc|"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:290
msgid "Check that GroverOptimizer finds the correct value"
msgstr "Vérifiez que GroverOptimizer trouve la valeur correcte"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:292
msgid "We can verify that the algorithm is working correctly using the ``MinimumEigenOptimizer`` in Qiskit."
msgstr "Nous pouvons vérifier que l'algorithme fonctionne correctement en utilisant ``MinimumEigenOptimizer`` dans Qiskit."

