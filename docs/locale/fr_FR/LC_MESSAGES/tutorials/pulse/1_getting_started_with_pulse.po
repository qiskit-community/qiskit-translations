msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-02 15:42+0000\n"
"PO-Revision-Date: 2020-10-19 12:33\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/pulse/1_getting_started_with_pulse.po\n"
"X-Crowdin-File-ID: 9362\n"
"Language: fr_FR\n"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:10
msgid "This page was generated from `tutorials/pulse/1_getting_started_with_pulse.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/pulse/1_getting_started_with_pulse.ipynb`__."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:9
msgid "Getting Started with OpenPulse"
msgstr "Démarrer avec OpenPulse"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:11
msgid "Qiskit Pulse programs give you more control than ``QuantumCircuit``. At this level, you can specify the exact time dynamics of the input signals across all input channels. Most quantum algorithm can be described with circuits alone using gate operations -- typically, it's when you want to apply error mitigation techniques or characterize a time-dependent quality of a quantum system that pulse-level control becomes useful."
msgstr "Les programmes Qiskit Pulse vous donnent plus de contrôle que ` ` QuantumCircuit ` `. A ce niveau, vous pouvez spécifier la dynamique de temps exacte des signaux d'entrée sur tous les canaux d'entrée. La plupart des algorithmes quantiques peuvent être généralement décrits avec des circuits qui utilisent seulement des portes (opérations). C'est lorsque vous voulez appliquer des techniques d'atténuation d'erreurs ou caractériser une qualité dépendante du temps d'un système quantique, que le contrôle au niveau des pulses devient utile."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:13
msgid "On this page, we will discover how to build and execute a very basic Pulse program, which is called a schedule."
msgstr "Sur cette page, nous allons découvrir comment construire et exécuter un programme Pulse très basique, qui est appelé un ``schedule`` (horaire d'exécution)."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:16
msgid "Initialize"
msgstr "Initialiser"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:18
msgid "We import the ``Schedule`` class from the ``qiskit.pulse`` module. To start, we are going to initialize a ``Schedule`` with the name ``\"getting_started\"``."
msgstr "Nous importons la classe ` ` Schedule ` ` à partir du module ` `qiskit.pulse ` `. Pour commencer, nous allons initialiser un ` ` Schedule` ` avec le nom ` ` getting_started'` `."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:41
msgid "Easy! We have an empty schedule now."
msgstr "Facile ! Nous avons maintenant un horaire (``schedule``) vide."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:44
msgid "Build instructions"
msgstr "Instructions de construction"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:46
msgid "The next thing we will want to do is create some instructions to add to our schedule."
msgstr "Ensuite nous voulons créer quelques instructions à ajouter à notre horaire (´´schedule´´)."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:48
msgid "Perhaps the most central instruction for building schedules is the ``Waveform``. It is a pulse signal specified as an array of time-ordered complex amplitudes, or *samples*. Each sample is played for one cycle, a timestep ``dt``, determined by the backend. If we want to know the real-time dynamics of our program, we need to know the value of ``dt``. For now, let's focus on how to build the instruction."
msgstr "L'instruction la plus centrale pour construire des horaires (``schedules``), est probalement le ` ` Waveform` `. Il s'agit d'un signal de pulse spécifié sous la forme d'une rangée d'amplitudes complexes ordonnées par le temps, ou * échantillons *. Chaque échantillon est appliqué pour un seul cycle, un intervalle de temps ` ` dt ` `, déterminée par le backend. Si nous voulons connaître la dynamique en temps réel de notre programme, nous devons connaître la valeur de ` ` dt ` `. Pour l'instant, concentrons-nous sur la façon de construire l'instruction."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:81
msgid "There are multiple ways to build pulses, which you can learn about on later pages. This time, we've simply passed the exact amplitudes of the pulse envelope we want to play as an array. The array above is a Gaussian function evaluated at 64 points, with an amplitude of 1 and a standard deviation of 8. The (zero-indexed) :math:`i^{th}` sample will play from time ``i*dt`` up to ``(i + 1)*dt``, modulated by the qubit frequency. Think of this like an arbitrary waveform generator (AWG), playing the samples you give to the ``Waveform``, mixed with a continuous sine wave generator outputting a tone at the qubit frequency."
msgstr "Il y a plusieurs façons de construire des impulsions, comme vous pouvez apprendre sur les pages suivantes. Cette fois, nous avons simplement passé les amplitudes exactes de l'enveloppe d'impulsions, que nous voulons exécuter en tant que rangée (``array``). La rangée ci-dessus est une fonction Gaussienne évaluée à 64 points, avec une amplitude de 1 et une déviation standard de 8. L'échantillon :math:`i^{th}` (indexé à zéro) jouera de temps ``i*dt`` jusqu'à temps ``(i + 1)*dt``, modulé par la fréquence du qubit. Pensez à cela comme un générateur de signaux arbitraire (arbitrary waveform generator ou AWG), jouant les échantillons que vous donnez au ``Waveform``, mélangé à un générateur d'ondes sinusoïdales continu qui donne un ton à la fréquence du qubit."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:84
msgid "The values above happen to be real, but they can also be complex. The amplitude norm of any pulse signal is arbitrarily limited to 1. Each backend system may also impose further constraints -- for instance, a minimum pulse size of 64. Learn more about getting information from the backend `here <5_gathering_system_information.ipynb>`__."
msgstr "Les valeurs ci-dessus sont réelles, mais elles peuvent aussi être complexes. La norme d'amplitude de n'importe quel pulse est arbitrairement limitée à 1. Chaque système dorsal peut également imposer des contraintes supplémentaires -- par exemple, une taille de pulse minimale de 64. Pour en savoir plus sur l'obtention d'informations depuis du système dorsal (``backend``), consultez <5_gathering_system_information.ipynb> ` __."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:87
msgid "Schedule instructions"
msgstr "Ordonnancer des instructions"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:89
msgid "Next, we have to add an instruction to execute the pulse signal we just built. This means specifying not only the *time* that the pulse should be played, but also *where* it should be played. When we build circuits, we specify which qubit a gate operation should be applied to. In Pulse, every qubit has multiple *channels*."
msgstr "Ensuite, nous devons ajouter une instruction pour exécuter le signal de pulse que nous venons de construire. Cela signifie que vous devez spécifier non seulement le *moment de temps* que le pulse doit être effectué, mais aussi * où * il doit être executé. Lorsque nous construisons des circuits, nous spécifions à quel moment une opération de porte doit être appliquée. Dans Pulse, chaque qubit a plusieurs *canaux * (´´channels´´)."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:91
msgid "We will *play* our pulse on the *drive* channel of qubit 0. The drive channel lets us enact single qubit operations."
msgstr "Nous allons * jouer * ou exécuter notre impulsion sur le canal * drive * du qubit 0. Le canal ´´drive´´ permet de mettre en oeuvre des opérations de qubits individuels."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:116
msgid "Note that the pulse we defined operates on the ``DriveChannel``, which in turn is initialized with the qubit index. We use ``Schedule.insert`` to play the pulse at timestep ``t = 0``."
msgstr "Notez que l'e pulse que nous avons défini opère sur le ``DriveChannel``, qui à son tour est initialisé avec l'index qubit. Nous utilisons ``Schedule.insert`` pour exécuter l'impulsion au moment ``t = 0``."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:118
msgid "Let's review what we've done, using ``Schedule.draw``:"
msgstr "Examinons ce que nous avons fait en utilisant ` `Schedule.draw ` `:"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:148
msgid "The ways in which schedules can be composed is covered in detail on `this page <3_building_pulse_schedules.ipynb>`__."
msgstr "La façon dont les horaires (` ` schedules` ` ) peuvent être composés est décrite en détail sur `cette page <3_building_pulse_schedules.ipynb>`__."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:150
msgid "This pulse will drive qubit 0. It is modulated at qubit 0's resonant frequency, so it will drive the :math:`|0\\rangle` to :math:`|1\\rangle` transition. It is not calibrated to stop at a particular state, so we won't know what state we've prepared until we look at the results. For our purposes, we don't mind what state we end up in."
msgstr "Cette impulsion va actionner le qubit 0. Il est modulé à la fréquence de résonance du qubit 0, donc il va piloter le transition :math:` | 0\\rangle ` à :math:` | 1\\rangle ` . Il n'est pas calibré pour s'arrêter à un état particulier, donc nous ne saurons pas quel état nous avons préparé jusqu'à ce que nous examinions les résultats. À nos fins, nous ne nous soucions pas de l'état dans lequel nous finisssons."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:152
msgid "All that's left to do is to add a measurement. There is a convenient utility function for adding measurements, but it requires data from the backend system that the program will be running on. We will also need the backend to execute the program."
msgstr "Tout ce qui reste à faire est d'ajouter une mesure. Il existe une fonction utilitaire pratique pour l'ajout de mesures, mais elle nécessite des données du système dorsal (´´backend´´) sur lequel le programme s'exécutera. Nous aurons aussi besoin du système dorsal pour exécuter le programme."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:155
msgid "Grab a backend"
msgstr "Mettre la main sur un backend (système dorsal)"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:179
msgid "Add measurements"
msgstr "Ajouter des mesures"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:181
msgid "Now we can use this backend to add the measurement instructions for us."
msgstr "Maintenant nous pouvons utiliser ce système dorsal (backend) pour ajouter les instructions de mesure pour nous."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:204
msgid "Let's see what the convenience function has added for us, using draw again. The acquisition and measurement pulses are very long compared to our initial pulse, so we can use the ``plot_range`` argument to clip the schedule."
msgstr "Voyons ce que la fonction pratique a ajouté pour nous, en utilisant à nouveau le tirage. Les impulsions d'acquisition et de mesure sont très longues par rapport à notre impulsion initiale, donc nous pouvons utiliser l'argument ` ` plot_range ` ` pour découper le planning."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:236
msgid "There is a new pulse on ``MeasureChannel`` ``m0``, a shorthand name for ``MeasureChannel(0)``. This channel stimulates readout on qubit 0. Likewise, ``a0`` is shorthand for ``AcquireChannel(0)``. The ``Acquire`` instruction on ``a0`` tells the measurement devices when to begin collecting data on their analog-to-digital converters (ADC), and for how long. It is drawn as an amplitude 1 constant pulse."
msgstr "Il y a une nouvelle impulsion sur ` ` MeasureChannel ` ` ` ` m0 ` `, un nom abrégé pour ` ` MeasureChannel (0) ` `. Ce canal stimule la lecture sur le qubit 0. De même, ` ` a0 ` ` est le nom abrégé pour ` ` AcquireChannel (0) ` `. L'instruction ` ` Acquire ` ` sur ` ` a0 ` ` indique aux appareils de mesure quand ils doivent commencer à collecter des données sur leurs convertisseurs analogique-vers-numérique (analog-to-digital ou ADC), et pendant combien de temps. Il est tiré comme un pulse constant d'amplitude 1."

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:239
msgid "Execute"
msgstr "Exécution"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:241
msgid "Our schedule is done! We can't use our mocked backend to execute programs, but if you have an IBM Quantum account, you could use ``backend = IBMQ.load_account().get_backend(open_pulse=True)`` to see if you have an OpenPulse enabled backend. Once you have such a backend, we can execute it the same way we execute circuits:"
msgstr "Notre horaire (schedule) est terminé ! Nous ne pouvons pas utiliser notre backend simulé pour exécuter des programmes, mais si vous avez un compte IBM Quantum, vous pouvez utiliser ` ` backend = IBMQ.load_account ().get_backend (open_pulse=True) ` ` pour voir si vous avez un backend ouvert à OpenPulse. Une fois que vous avez un tel backend, nous pouvons l'exécuter de la même façon que nous exécutons des circuits:"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:247
msgid "That's it! To get the results, use ``result = job.result()``. You've created a Pulse program schedule, containing an operation on qubit 0 followed by a measurement, executed the experiment on the backend and retrieved the results. Next, we will cover in detail the `different instructions which can be used in Pulse programs <2_building_pulse_instructions.ipynb>`__."
msgstr "C'est tout ! Pour obtenir les résultats, utilisez ``result = job.result()``. Vous avez créé un programme Pulse, contenant une opération sur qubit 0 suivie d'une mesure, vous avez exécuté l'expérience (experiment) sur le système d'exécution (` ` backend` ` ) et récupéré les résultats. Ensuite, nous couvrirons en détail les `différentes instructions qui peuvent être utilisées dans les programmes Pulse <2_building_pulse_instructions.ipynb>`__."

