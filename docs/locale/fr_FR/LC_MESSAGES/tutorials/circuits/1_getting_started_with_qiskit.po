msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-14 09:35+0000\n"
"PO-Revision-Date: 2020-07-20 09:58\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits/1_getting_started_with_qiskit.po\n"
"X-Crowdin-File-ID: 9114\n"
"Language: fr_FR\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:10
msgid "This page was generated from `tutorials/circuits/1_getting_started_with_qiskit.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/circuits/1_getting_started_with_qiskit.ipynb`__."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:9
msgid "Getting Started with Qiskit"
msgstr "Démarrer avec Qiskit"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:11
msgid "Here, we provide an overview of working with Qiskit. The fundamental package of Qiskit is Terra that provides the basic building blocks necessary to program quantum computers. The fundamental unit of Qiskit is the `**quantum circuit** <https://en.wikipedia.org/wiki/Quantum_circuit>`__. A basic workflow using Qiskit consists of two stages: **Build** and **Execute**. **Build** allows you to make different quantum circuits that represent the problem you are solving, and **Execute** that allows you to run them on different backends. After the jobs have been run, the data is collected and postprocessed depending on the desired output."
msgstr "Voici un survol du fonctionnement de Qiskit. L'élément fondamental de Qiskit est Terra qui fournit les blocs de construction basiques nécessaires pour programmer les ordinateurs quantiques. L'unité fondamentale de Qiskit est le **circuit quantique** <https://en.wikipedia.org/wiki/Quantum_circuit>`__. Un flux de travail basique dans l'utilisation de Qiskit contient 2 étapes : **Build** (construire) et **Execute** (exécuter). **Build** vous permet de créer différents circuits quantiques qui représentent le problème que vous souhaitez résoudre, et **Execute** vous permet de le faire tourner sur les différentes plateformes. Après que les tâches soient exécutées, les données sont récupérées et post-traitées en fonction de la sortie désirée."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:36
msgid "Circuit Basics"
msgstr "Les bases des circuits"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:39
msgid "Building the circuit"
msgstr "Construction du circuit"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:41
msgid "The basic element needed for your first program is the QuantumCircuit. We begin by creating a ``QuantumCircuit`` comprised of three qubits."
msgstr "L'élément de base dont vous aurez besoin pour un premier programme est le QuantumCircuit (circuit quantique). Nous commençons par créer un ``QuantumCircuit`` constitué de 3 qubits."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:63
msgid "After you create the circuit with its registers, you can add gates (\"operations\") to manipulate the registers. As you proceed through the tutorials you will find more gates and circuits; below is an example of a quantum circuit that makes a three-qubit GHZ state"
msgstr "Aprés avoir créé le circuit avec ses registres, vous pouvez ajouter les portes (\"opérations\") pour manipuler les registres. En parcourant les tutoriels vous trouverez davantage de portes et de circuits; ci-dessous un exemple de circuit quantique qui crée un état GHZ avec 3 qubits"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:65
msgid "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}."
msgstr "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:67
msgid "To create such a state, we start with a three-qubit quantum register. By default, each qubit in the register is initialized to :math:`|0\\rangle`. To make the GHZ state, we apply the following gates: \\* A Hadamard gate :math:`H` on qubit 0, which puts it into the superposition state :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}`. \\* A controlled-Not operation (:math:`C_{X}`) between qubit 0 and qubit 1. \\* A controlled-Not operation between qubit 0 and qubit 2."
msgstr "Pour créer un tel état, nous démarrons avec un registre quantique de 3 qubits. Par défaut, chaque qubit du registre est initialisé à :math:`|0\\rangle`. Pour créer l'état GHZ, on applique les portes suivantes:\n\n"
"`\\* Une porte Hadamard :math:`H` sur le qubit 0, qui le place dans un état de superposition :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}`.\n"
"\\* Une opération \"controlled-Not\" (NON-contrôlé ou C-not) (:math:`C_{X}`) entre le qubit 0 et le qubit 1.\n"
"\\* Une opération \"controlled-Not\" (C-not) entre le qubit 0 et le qubit 2."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:69
msgid "On an ideal quantum computer, the state produced by running this circuit would be the GHZ state above."
msgstr "Dans un calculateur quantique parfait, l'état produit en lançant ce circuit serait l'état GHZ ci-dessus."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:71
msgid "In Qiskit, operations can be added to the circuit one by one, as shown below."
msgstr "Dans Qiskit, les opérations peuvent être ajoutées au circuit une par une, comme montré ci-dessous."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:120
msgid "Visualize Circuit"
msgstr "Visualisation du circuit"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:122
msgid "You can visualize your circuit using Qiskit ``QuantumCircuit.draw()``, which plots the circuit in the form found in many textbooks."
msgstr "Vous pouvez visualiser le circuit en utilisant Qiskit ``QuantumCircuit.draw()``, qui dessinera le circuit de la façon dont on le voit dans de nombreux ouvrages."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:152
msgid "In this circuit, the qubits are put in order, with qubit zero at the top and qubit two at the bottom. The circuit is read left to right (meaning that gates that are applied earlier in the circuit show up further to the left)."
msgstr "Dans le circuit, les qubits sont mis dans un ordre où le qubit 0 sera en haut et le qubit 2 en bas. Le circuit est lu de gauche à droite (ce qui signifie que les portes appliquées en premiers sont celles de gauche et ainsi de suite)."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:167
msgid "When representing the state of a multi-qubit system, the tensor order used in Qiskit is different than that used in most physics textbooks. Suppose there are :math:`n` qubits, and qubit :math:`j` is labeled as :math:`Q_{j}`. Qiskit uses an ordering in which the :math:`n^{\\mathrm{th}}` qubit is on the left side of the tensor product, so that the basis vectors are labeled as :math:`Q_n\\otimes \\cdots \\otimes Q_1\\otimes Q_0`."
msgstr "Dans la représentation de l'état d'un système multi-qubit, l'ordre des tenseurs utilisé dans Qiskit est différent de celui qu'on trouve dans la plupart des manuels de physique. Supposons qu'on ait :math:`n` qubits, et que le qubit :math:`j` soit nommé :math:`Q_{j}`. Qiskit utilise un affichage tel que le qubit :math:`n^{\\mathrm{th}}` sera sur la gauche du produit de tenseurs, de sorte que les vecteurs de bases seront nommés :math:`Q_n\\otimes \\cdots \\otimes Q_1\\otimes Q_0`."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:169
msgid "For example, if qubit zero is in state 0, qubit 1 is in state 0, and qubit 2 is in state 1, Qiskit would represent this state as :math:`|100\\rangle`, whereas many physics textbooks would represent it as :math:`|001\\rangle`."
msgstr "Par exemple, si le qubit zéro est dans l'état 0, le qubit 1 est dans l'état 0, le qubit 2 dans l'état 1, Qiskit représentera cet état par :math:`|100\\rangle`, tandis que de nombreux manuels de physiques l'auraient représenté par :math:`|001\\rangle`."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:171
msgid "This difference in labeling affects the way multi-qubit operations are represented as matrices. For example, Qiskit represents a controlled-X (:math:`C_{X}`) operation with qubit 0 being the control and qubit 1 being the target as"
msgstr "Cette différence d'affichage affecte la façon dont les opérations multi-qubits sont représentées en tant que matrices. Par exemple, Qiskit représente une opération (Non-contrôlé) controlled-X (:math:`C_{X}`) avec un qubit 0 étant le qubit de contrôle et un qubit 1 qui est la cible par "

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:173
msgid "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}."
msgstr "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:189
msgid "Simulating circuits using Qiskit Aer"
msgstr "Simuler des circuits en utilisant Qiskit Aer"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:191
msgid "Qiskit Aer is our package for simulating quantum circuits. It provides many different backends for doing a simulation. There is also a basic, Python only, implementation called ``BasicAer`` in Terra that can be used as a drop-in replacement for ``Aer`` in the examples below."
msgstr "Qiskit Aer est notre module pour simuler les circuits quantiques. Il fournit plusieurs plateformes différentes pour effectuer une simulation. Il y a aussi une implémentation simple, Python uniquement, appelée ``BasicAer`` dans Terra qui peut être utilisée comme alternative libre à ``Aer`` dans les exemples suivants."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:194
msgid "Statevector backend"
msgstr "Environnement de simulation de vecteur d'état"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:196
msgid "The most common backend in Qiskit Aer is the ``statevector_simulator``. This simulator returns the quantum state, which is a complex vector of dimensions :math:`2^n`, where :math:`n` is the number of qubits (so be careful using this as it will quickly get too large to run on your machine)."
msgstr "L'environnement le plus commun dans Qiskit Aer et le ``statevector_simulator`` (simulateur de vecteur d'état). Ce simulateur retourne l'état quantique, qui est un vecteur complexe de dimensions :math:`2^n`, où:math:`2^n` est le nombre de qubits (Soyez prudent en l'utilisant car il peut vite devenir trop grand pour tourner sur votre machine)."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:207
msgid "To run the above circuit using the statevector simulator, first you need to import Aer and then set the backend to ``statevector_simulator``."
msgstr "Pour exécuter le circuit ci-dessus en utilisant le simulateur de vecteur d'état, vous devez d'abord importer Aer et ensuite paramétrer l'environnement d'exécution sur ``statevector_simulator``."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:232
msgid "Now that we have chosen the backend, it's time to compile and run the quantum circuit. In Qiskit we provide the ``execute`` function for this. ``execute`` returns a ``job`` object that encapsulates information about the job submitted to the backend."
msgstr "Maintenant que vous avez choisi votre environnement, il est temps de compiler et d'exécuter le circuit quantique. Dans Qiskit, nous utilisons la fonction ``execute`` pour cela. ``execute`` retourne un objet ``job`` qui encapsule l'information à propos de la tâche lancée sur la plateforme d'exécution."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:238
msgid "Tip: You can obtain the above parameters in Jupyter. Simply place the text cursor on a function and press Shift+Tab."
msgstr "Astuce: Vous pouvez obtenir les paramètres ci-dessus dans Jupyter. Placez simplement le curseur sur une fonction et pressez Shift+Tab."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:264
msgid "When you run a program, a job object is made that has the following two useful methods: ``job.status()`` and ``job.result()``, which return the status of the job and a result object, respectively."
msgstr "Quand vous lancez un programme, un objet job est créé qui aura les deux méthodes utiles suivantes : ``job.status()`` et ``job.result()``, qui retourneront respectivement l'état du job et un objet résultat."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:270
msgid "Note: Jobs run asynchronously, but when the result method is called, it switches to synchronous and waits for it to finish before moving on to another task."
msgstr "Note: Les tâches tournent de façon asynchrone, mais quand la méthode result est appelée, on bascule en mode synchrone et on attend que la tâche en court soit finie avant de passer à la suivante."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:295
msgid "The results object contains the data and Qiskit provides the method ``result.get_statevector(circ)`` to return the state vector for the quantum circuit."
msgstr "L'objet result contient les données et Qiskit fournit la méthode ``result.get_statevector(circ)`` pour retourner le vecteur d'état du circuit quantique."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:338
msgid "Qiskit also provides a visualization toolbox to allow you to view these results."
msgstr "Qiskit fournit aussi une boite à outil de visualisation qui permet d'afficher ces résultats."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:340
msgid "Below, we use the visualization function to plot the real and imaginary components of the state density matrix :nbsphinx-math:`\\rho`."
msgstr "Ci-dessous, nous utilisons la fonction de visualisation pour afficher les points correspondants aux composantes réelles et imaginaires de la matrice densité :nbsphinx-math:`\\rho`."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:372
msgid "Unitary backend"
msgstr "Environnement unitaire"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:383
msgid "Qiskit Aer also includes a ``unitary_simulator`` that works *provided all the elements in the circuit are unitary operations*. This backend calculates the :math:`2^n \\times 2^n` matrix representing the gates in the quantum circuit."
msgstr "Qiskit Aer inclut également un (simulateur unitaire) ``unitary_simulator`` qui fonctionne *comme si tous les éléments du circuit étaient des opérations unitaires*. Cet environnement calcule la matrice :math:`2^n \\times 2^n` représentant les portes du circuit quantique."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:460
msgid "OpenQASM backend"
msgstr "Environnement OpenQASM"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:471
msgid "The simulators above are useful because they provide information about the state output by the ideal circuit and the matrix representation of the circuit. However, a real experiment terminates by *measuring* each qubit (usually in the computational :math:`|0\\rangle, |1\\rangle` basis). Without measurement, we cannot gain information about the state. Measurements cause the quantum system to collapse into classical bits."
msgstr "Les simulateurs précédents sont utiles car ils fournissent une information sur l'état de sortie d'un circuit idéal et la représentation matricielle de ce circuit. Toutefois, une expérience réelle se termine par la mesure de chaque qubit (habituellement sur une base calculatoire :math:`|0\\rangle, |1\\rangle`). Sans mesure, on ne peut récupérer l'information à propos de l'état. Mais la mesure provoque l'effrondrement du système quantique en un système de bits classiques."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:473
msgid "For example, suppose we make independent measurements on each qubit of the three-qubit GHZ state"
msgstr "Par exemple, supposons qu'on crée une mesure individuelle de chaque qubit dans un état GHZ à 3 qubits"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:475
msgid "|\\psi\\rangle = |000\\rangle +|111\\rangle)/\\sqrt{2},"
msgstr "|\\psi\\rangle = |000\\rangle +|111\\rangle)/\\sqrt{2},"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:477
msgid "and let :math:`xyz` denote the bitstring that results. Recall that, under the qubit labeling used by Qiskit, :math:`x` would correspond to the outcome on qubit 2, :math:`y` to the outcome on qubit 1, and :math:`z` to the outcome on qubit 0."
msgstr "et notons :math:`xyz` la chaîne de bits résultante. Rappelons que, dans la convention de nommage des qubits utilisée par Qiskit, :math:`x` correspond à la sortie du qubit 2, :math:`y` à la sortie du qubit 1 et :math:`z` à la sortie du qubit 0."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:483
msgid "Note: This representation of the bitstring puts the most significant bit (MSB) on the left, and the least significant bit (LSB) on the right. This is the standard ordering of binary bitstrings. We order the qubits in the same way (qubit representing the MSB has index 0), which is why Qiskit uses a non-standard tensor product order."
msgstr "Note: Cette représentation de la chaîne de bits place le bit le plus significatif (MSB) à gauche, et le bit le moins significatif (LSB) sur la droite. Il s'agit de l'ordre standard des bits binaires. Nous commandons les qubits de la même façon (le qubit représentant le MSB a l'index 0), c'est pourquoi Qiskit utilise un ordre de produit tensoriel non standard."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:489
msgid "Recall the probability of obtaining outcome :math:`xyz` is given by"
msgstr "Rappelons que la probabilité d'obtenir un résultat :math:`xyz` est définie par"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:491
msgid "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}"
msgstr "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:493
msgid "and as such for the GHZ state probability of obtaining 000 or 111 are both 1/2."
msgstr "et que pour un état GHZ la probabilité d'obtenir 000 ou 111 est de 1/2."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:495
msgid "To simulate a circuit that includes measurement, we need to add measurements to the original circuit above, and use a different Aer backend."
msgstr "Pour simuler un circuit qui inclut la mesure, nous avons besoin d'ajouter les mesures aux circuits précédents et d'utiliser un environnement Aer différent."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:572
msgid "This circuit adds a classical register, and three measurements that are used to map the outcome of qubits to the classical bits."
msgstr "Ce circuit ajoute un registre classique, et 3 mesures qui sont utilisés pour faire correspondre la mesure des qubits à leur bits classiques."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:574
msgid "To simulate this circuit, we use the ``qasm_simulator`` in Qiskit Aer. Each run of this circuit will yield either the bitstring 000 or 111. To build up statistics about the distribution of the bitstrings (to, e.g., estimate :math:`\\mathrm{Pr}(000)`), we need to repeat the circuit many times. The number of times the circuit is repeated can be specified in the ``execute`` function, via the ``shots`` keyword."
msgstr "Pour simuler ce circuit, nous utilisons ``qasm_simulator`` de Qiskit Aer. Chaque exécution (\"tir\" ou \"shoot\" en anglais) de ce circuit aboutira soit à une séquence 000, soit à 111. Pour obtenir une statistique de la distribution des résultats (par exemple, estimer :math:`\\mathrm{Pr}(000)`), nous devrons exécuter le circuit plusieurs fois. Le nombre de fois où le circuit sera testé peut être spécifier dans la fonction ``execute èè, via le mot-clé ``shots``."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:604
msgid "Once you have a result object, you can access the counts via the function ``get_counts(circuit)``. This gives you the *aggregated* binary outcomes of the circuit you submitted."
msgstr "Une fois que vous avez un objet résultat, vous pouvez obtenir le comptage (counts) via la fonction ``get_counts(circuit)``. Cela vous donne le résultat sous forme **d'agrégats** binaires du circuit testé."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:645
msgid "Approximately 50 percent of the time, the output bitstring is 000. Qiskit also provides a function ``plot_histogram``, which allows you to view the outcomes."
msgstr "Approximativement 50% du temps, le résultat sera 000. Qiskit fournit également une fonction ``plot_histogram`` qui vous permet de visualiser le résultat."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:676
msgid "The estimated outcome probabilities :math:`\\mathrm{Pr}(000)` and :math:`\\mathrm{Pr}(111)` are computed by taking the aggregate counts and dividing by the number of shots (times the circuit was repeated). Try changing the ``shots`` keyword in the ``execute`` function and see how the estimated probabilities change."
msgstr "Les probabilités estimées des résultats :math:`\\mathrm{Pr}(000)` et :math:`\\mathrm{Pr}(111) sont calculées en prenant l'agrégat comptage (counts) et en le divisant par le nombres de \"tirs\" (le nombre de fois que le circuit a été testé). Essayez de modifier la valeur du mot-clé ``shots`` dans la fonction ``execute`` et voyez comment cela affecte la probabilité estimée."

