msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-05 12:44+0000\n"
"PO-Revision-Date: 2023-06-05 13:30\n"
"Last-Translator: \n"
"Language: fr\n"
"Language-Team: French\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/textbook/01_IQPE.po\n"
"X-Crowdin-File-ID: 9622\n"

#: ../../tutorials/textbook/01_IQPE.ipynb:10
msgid "This page was generated from `tutorials/textbook/01_IQPE.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/algorithms/06_qaoa.ipynb`__."

#: ../../tutorials/textbook/01_IQPE.ipynb:9
msgid "Iterative Quantum Phase Estimation Algorithm"
msgstr "Algorithme d'estimation iterative de phase quantique"

#: ../../tutorials/textbook/01_IQPE.ipynb:11
msgid "The goal of this tutorial is to understand how the Iterative Phase Estimation (IPE) algorithm works, why would we use the IPE algorithm instead of the QPE (Quantum Phase Estimation) algorithm and how to build it with Qiskit using the same circuit exploiting reset gate and the ``c_if`` method that allows to apply gates conditioned by the values stored in a classical register, resulting from previous measurements."
msgstr "L'objectif de ce tutoriel est de comprendre comment fonctionne l'algorithme itératif d'estimation de phase quantique (IPE en anglais), pourquoi utiliser cet algorithme au lieu de l'algorithme QPE (Quantum Phase Estimation) et comment le construire avec Qiskit en utilisant le même circuit exploitant la porte de réinitialisation et la méthode ``c_if`` qui permet d'appliquer des portes conditionnées par les valeurs stockées dans un registre classique, résultant de mesures antérieures."

#: ../../tutorials/textbook/01_IQPE.ipynb:13
msgid "**References**"
msgstr "**Références :**"

#: ../../tutorials/textbook/01_IQPE.ipynb:15
msgid "`Section 2 of Lab 4: Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__"
msgstr "Section 2 du Lab 4: Algorithme d'estimation itérative de phase (IPE) <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>` __"

#: ../../tutorials/textbook/01_IQPE.ipynb:17
msgid "`Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__"
msgstr "` Ch. 3.6 Estimation de la phase quantique <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>` __"

#: ../../tutorials/textbook/01_IQPE.ipynb:42
msgid "Conditioned gates: the c_if method"
msgstr "Portes conditionnées : la méthode c_if"

#: ../../tutorials/textbook/01_IQPE.ipynb:53
msgid "Before starting the IPE algorithm, we will give a brief tutorial about the Qiskit conditional method, c_if, as it goes into building the IPE circuit."
msgstr "Avant de commencer l'algorithme IPE, nous allons donner un bref tutoriel sur la méthode Qiskit conditionnelle, c_if, dans la construction du circuit IPE."

#: ../../tutorials/textbook/01_IQPE.ipynb:55
msgid "``c_if`` is a function (actually a method of the gate class) to perform conditioned operations based on the value stored previously in a classical register. With this feature you can apply gates after a measurement in the same circuit conditioned by the measurement outcome."
msgstr "``c_if`` est une fonction (ou plus exactement une méthode de la classe ``Gate``) pour effectuer des opérations conditionnées par la valeur stockée précédemment dans un registre classique. Avec cette fonctionnalité, il est possible d'appliquer des portes après une mesure dans le même circuit conditionnées par le résultat de ladite mesure."

#: ../../tutorials/textbook/01_IQPE.ipynb:57
msgid "For example, the following code will execute the :math:`X` gate if the value of the classical register is :math:`0`."
msgstr "Par exemple, le code suivant exécutera la porte :math:`X` si la valeur du registre classique est :math:`0`."

#: ../../tutorials/textbook/01_IQPE.ipynb:93
msgid "We highlight that the method c_if expects as the first argument a whole classical register, not a single classical bit (or a list of classical bits), and as the second argument a value in decimal representation (a non-negative integer), not the value of a single bit, 0, or 1 (or a list/string of binary digits)."
msgstr "Soulignons que la méthode c_if prévoit comme premier argument un registre classique entier, pas un bit classique simple (ni une liste de bits classiques), et comme second argument une valeur en représentation décimale (un entier non négatif), pas la valeur d'un bit simple, 0, ou 1 (ni une liste / chaîne de chiffres binaires)."

#: ../../tutorials/textbook/01_IQPE.ipynb:95
msgid "Let's make another example. Consider that we want to perform a bit flip on the third qubit after the measurements in the following circuit, when the results of the measurement of :math:`q_0` and :math:`q_1` are both :math:`1`."
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:133
msgid "We want to apply the :math:`X` gate, only if both the results of the measurement of :math:`q_0` and :math:`q_1` are :math:`1`. We can do this using the c_if method, conditioning the application of :math:`X` depending on the value passed as argument to c_if."
msgstr "Nous voulons appliquer la porte :math:`X` seulement si les deux résultats de la mesure de :math:`q_0` et :math:`q_1` sont :math:`1`. Nous pouvons le faire en utilisant la méthode ``c_if``, avec la condition d'application de :math:`X` basée sur la valeur transmise comme argument à ``c_if``."

#: ../../tutorials/textbook/01_IQPE.ipynb:135
msgid "We will have to encode the value to pass to the c_if method such that it will check the values 011 and 111 (in binary representation), since it does not matter what :math:`q_2` is measured as."
msgstr "Nous devrons encoder la valeur à passer à la méthode c_if pour qu'elle vérifie les valeurs 011 et 111 (en représentation binaire), car ce n'est pas important ce que :math:`q_2` est mesuré."

#: ../../tutorials/textbook/01_IQPE.ipynb:137
msgid "The 2 integer values in decimal representation:"
msgstr "Les deux valeurs entières dans la représentation décimale:"

#: ../../tutorials/textbook/01_IQPE.ipynb:148
msgid "|a72cc3910507488fa1b69b9c78ffbf83|"
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:150
msgid "a72cc3910507488fa1b69b9c78ffbf83"
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:161
msgid "We can check the solutions using the bin() method in python (the prefix ``0b`` indicates the binary format)."
msgstr "Nous pouvons vérifier les solutions en utilisant la méthode bin() en python (le préfixe ``0b`` indique le format binaire)."

#: ../../tutorials/textbook/01_IQPE.ipynb:210
msgid "So we have to apply :math:`X` to :math:`q_2` using c_if two times, one for each value corresponding to 011 and 111."
msgstr "Nous devons donc appliquer :math:`X` à :math:`q_2` en utilisant c_if deux fois, une pour chaque valeur correspondant à 011 et 111."

#: ../../tutorials/textbook/01_IQPE.ipynb:253
msgid "IPE"
msgstr "IPE"

#: ../../tutorials/textbook/01_IQPE.ipynb:255
msgid "The motivation for using the IPE algorithm is that QPE algorithm works fine for short depth circuits but when the circuit starts to grow, it doesn't work properly due to gate noise and decoherence times."
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:257
msgid "The detailed explanation of how the algorithm works can be found in `Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__. To understand QPE in depth, you can see also `Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__."
msgstr "L'explication détaillée du fonctionnement de l'algorithme peut être trouvée dans l'algorithme `Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__. Pour comprendre QPE en profondeur, vous pouvez également voir `Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__."

#: ../../tutorials/textbook/01_IQPE.ipynb:260
msgid "IPE example with a 1-qubit gate for :math:`U`"
msgstr "Exemple d'IPE avec un portail 1-qubit pour :math:` U `"

#: ../../tutorials/textbook/01_IQPE.ipynb:262
msgid "We want to apply the IPE algorithm to estimate the phase for a 1-qubit operator :math:`U`. For example, here we use the :math:`S`-gate."
msgstr "Nous voulons appliquer l'algorithme IPE pour estimer la phase pour un opérateur 1-qubit :math:` U `. Par exemple, nous utilisons ici la porte :math:` S'."

#: ../../tutorials/textbook/01_IQPE.ipynb:264
msgid "Let's apply the IPE algorithm to estimate the phase for :math:`S`-gate. Its matrix is"
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:266
msgid " S =\n"
"\\begin{bmatrix}\n"
"1 & 0\\\\\n"
"0 & e^\\frac{i\\pi}{2}\\\\\n"
"\\end{bmatrix}"
msgstr " S =\n"
"\\begin{bmatrix}\n"
"1 & 0 \\ \\\n"
"0 & e ^ \\frac { i\\pi }{2}\\\\\n"
"\\end{bmatrix}"

#: ../../tutorials/textbook/01_IQPE.ipynb:274
msgid "That is, the :math:`S`-gate adds a phase :math:`\\pi/2` to the state :math:`|1\\rangle`, leaving unchanged the phase of the state :math:`|0\\rangle`"
msgstr "C'est-à-dire que la porte :math:` S ajoute une phase :math:` \\pi/2 ` à l'état :math:` | 1\\rangle `, laissant inchangée la phase de l'état :math:` | 0\\rangle `"

#: ../../tutorials/textbook/01_IQPE.ipynb:276
msgid "S|1\\rangle = e^\\frac{i\\pi}{2}|1\\rangle\n\n"
msgstr "S|1\\rangle = e^\\frac{i\\pi}{2}|1\\rangle\n\n"

#: ../../tutorials/textbook/01_IQPE.ipynb:278
msgid "In the following, we will use the notation and terms used in `Section 2 of lab 4 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__."
msgstr "Dans ce qui suit, nous utiliserons la notation et les termes utilisés dans la section 2 du lab 4 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>` __."

#: ../../tutorials/textbook/01_IQPE.ipynb:280
msgid "Let's consider to estimate the phase :math:`\\phi=\\frac{\\pi}{2}` for the eigenstate :math:`|1\\rangle`, we should find :math:`\\varphi=\\frac{1}{4}` (where :math:`\\phi = 2 \\pi \\varphi`). Therefore to estimate the phase we need exactly 2 phase bits, i.e. :math:`m=2`, since :math:`1/2^2=1/4`. So :math:`\\varphi=0.\\varphi_1\\varphi_2`."
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:282
msgid "Remember from the theory that for the IPE algorithm, :math:`m` is also the number of iterations, so we need only :math:`2` iterations or steps."
msgstr "Rappelez-vous de la théorie selon laquelle pour l'algorithme IPE, :math:`m` est aussi le nombre d'itérations, donc nous n'avons besoin que de :math:`2` itérations ou étapes."

#: ../../tutorials/textbook/01_IQPE.ipynb:284
msgid "First, we initialize the circuit. IPE works with only 1 auxiliary qubit, instead of :math:`m` counting qubits of the QPE algorithm. Therefore, we need 2 qubits, 1 auxiliary qubit and 1 for the eigenstate of :math:`U`-gate, and a classical register of 2 bits, for the phase bits :math:`\\varphi_1`, :math:`\\varphi_2`."
msgstr "Tout d'abord, nous initialisons le circuit. IPE fonctionne avec seulement 1 qubit auxiliaire, au lieu de :math:`m` comptant des qubits de l'algorithme QPE. Nous avons donc besoin de 2 qubits, 1 qubit auxiliaire et 1 pour l'état propre de :math:`U`-gate, et un registre classique de 2 bits, pour les bits de phase :math:`\\varphi_1`, :math:`\\varphi_2`."

#: ../../tutorials/textbook/01_IQPE.ipynb:311
#: ../../tutorials/textbook/01_IQPE.ipynb:702
msgid "First step"
msgstr "Première étape"

#: ../../tutorials/textbook/01_IQPE.ipynb:313
msgid "Now we build the quantum circuit for the first step, that is, the first iteration of the algorithm, to estimate the least significant phase bit :math:`\\varphi_m`, in this case :math:`\\varphi_2`. For the first step we have 3 sub-steps: - initialization - application of the Controlled-:math:`U` gates - measure of the auxiliary qubit in x-basis"
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:316
#: ../../tutorials/textbook/01_IQPE.ipynb:707
msgid "Initialization"
msgstr "Initialisation"

#: ../../tutorials/textbook/01_IQPE.ipynb:318
msgid "The initialization consists of application the Hadamard gate to the auxiliary qubit and the preparation of the eigenstate :math:`|1\\rangle`."
msgstr "L'initialisation consiste à appliquer la porte Hadamard au qubit auxiliaire et à préparer l'eigenstate :math:` | 1\\rangle `."

#: ../../tutorials/textbook/01_IQPE.ipynb:351
#: ../../tutorials/textbook/01_IQPE.ipynb:742
msgid "Application of the Controlled-:math:`U` gates"
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:353
msgid "Then we have to apply :math:`2^t` times the Controlled-:math:`U` operators (see also in the docs `Two qubit gates <https://qiskit.org/documentation/tutorials/circuits/3_summary_of_quantum_operations.html#Two-qubit-gates>`__), that, in this example, is the Controlled-:math:`S` gate (:math:`CS` for short)."
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:355
msgid "To implement :math:`CS` in the circuit, since :math:`S` is a phase gate, we can use the controlled phase gate :math:`\\text{CP}(\\theta)`, with :math:`\\theta=\\pi/2`."
msgstr "Pour implémenter :math:` CS ` dans le circuit, puisque :math:` S ` est une porte de phase, nous pouvons utiliser la porte de phase contrôlée :math:`\\text{CP}(\\theta) `, avec :math:`\\theta = \\pi/2 `."

#: ../../tutorials/textbook/01_IQPE.ipynb:387
msgid "Let's apply :math:`2^t` times :math:`\\text{CP}(\\pi/2)`. Since for the first step :math:`t=m-1`, and :math:`m=2`, we have :math:`2^t=2`."
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:420
#: ../../tutorials/textbook/01_IQPE.ipynb:811
msgid "Measure in x-basis"
msgstr "Mesure dans la base : math:`x`"

#: ../../tutorials/textbook/01_IQPE.ipynb:422
msgid "Finally, we perform the measurement of the auxiliary qubit in x-basis. So we will define a function to perform the x_measure and then apply it."
msgstr "Finalement, nous effectuons la mesure du qubit auxiliaire dans la base : math:`X`. Nous allons donc définir une fonction pour effectuer la mesure-: math:`X`, puis l'appliquer."

#: ../../tutorials/textbook/01_IQPE.ipynb:446
msgid "In this way we obtain the phase bit :math:`\\varphi_2` and store it in the classical bit :math:`c_0`."
msgstr "De cette façon, nous obtenons le bit de phase :math:`\\varphi_2` et le stockons dans le bit classique :math:`c_0`."

#: ../../tutorials/textbook/01_IQPE.ipynb:478
msgid "Subsequent steps (2nd step)"
msgstr "Étapes suivantes (2ème étape)"

#: ../../tutorials/textbook/01_IQPE.ipynb:480
msgid "Now we build the quantum circuit for the other remaining steps, in this example, only the second one. In these steps we have 4 sub-steps: the 3 sub-steps as in the first step and, in the middle, the additional step of the phase correction - initialization with reset - phase correction - application of the Controlled-:math:`U` gates - measure of the auxiliary qubit in x-basis"
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:483
#: ../../tutorials/textbook/01_IQPE.ipynb:850
msgid "Initialization with reset"
msgstr "Initialisation avec réinitialisation"

#: ../../tutorials/textbook/01_IQPE.ipynb:485
msgid "As we want to perform an iterative algorithm in the same circuit, we need to reset the auxiliary qubit :math:`q0` after the measument gate and initialize it again as before to recycle the qubit."
msgstr "Comme nous voulons réaliser un algorithme itératif dans le même circuit, nous devons réinitialiser le qubit auxiliaire :math:`q0` après la porte de mesure et l'initialiser à nouveau comme précédemment pour recycler le qubit."

#: ../../tutorials/textbook/01_IQPE.ipynb:518
#: ../../tutorials/textbook/01_IQPE.ipynb:883
msgid "Phase correction (for step 2)"
msgstr "Correction de phase (pour l'étape 2)"

#: ../../tutorials/textbook/01_IQPE.ipynb:520
msgid "As seen in the theory, in order to extract the phase bit :math:`\\varphi_{1}`, we perform a phase correction of :math:`-\\pi\\varphi_2/2`. Of course, we need to apply the phase correction in the circuit only if the phase bit :math:`\\varphi_2=1`, i.e. we have to apply the phase correction of :math:`-\\pi/2` only if the classical bit :math:`c_0` is 1."
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:522
msgid "So, after the reset we apply the phase gate :math:`P(\\theta)` with phase :math:`\\theta=-\\pi/2` conditioned by the classical bit :math:`c_0` (:math:`=\\varphi_2`) using the ``c_if`` method. So as we saw in the first part of this tutorial, we have to use the ``c_if`` method with a value of 1, as :math:`1_{10} = 001_{2}` (the subscripts :math:`_{10}` and :math:`_2` indicate the decimal and binary representations)."
msgstr "Ainsi, après la réinitialisation, nous appliquons la porte de phase :math:`P(\\theta)` avec la phase :math:`\\theta=-\\pi/2` conditionnée par le bit classique :math:`c_0` (:math:`=\\varphi_2`) en utilisant la méthode ``c_if``. Ainsi, comme nous l'avons vu dans la première partie de ce tutoriel, nous devons utiliser la méthode ``c_if`` avec une valeur de 1, comme :math:` 1_{10} = 001 _{2}` (les indices :math:`1_{10}` et :math:`_{2}` indiquent respectivement les représentations décimales et binaires)."

#: ../../tutorials/textbook/01_IQPE.ipynb:554
#: ../../tutorials/textbook/01_IQPE.ipynb:919
msgid "Application of the Controlled-:math:`U` gates and x-measurement (for step 2)"
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:556
msgid "We apply the :math:`CU` operations as we did in the first step. For the second step we have :math:`t=m-2`, hence :math:`2^t=1`. So we apply :math:`\\text{CP}(\\pi/2)` once. And then we perform the x-measurement of the qubit :math:`q_0`, storing the result, the phase bit :math:`\\varphi_1`, in the bit :math:`c_1` of classical register."
msgstr "Nous appliquons alors les portes :math:\"CU\" comme nous l'avons fait lors de la première étape. Pour la deuxième étape, nous avons :math:`t=m-2`, donc :math:`2^t=1`. Nous appliquons donc :math:`\\text{CP}(\\pi/2\\)` une seule fois. Ensuite, nous réalisons la mesure dans la base :math:`X` du qubit :math:`q_0`, et enregistrons le résultat, à savoir le bit de phase :math:`\\varphi_1`, dans le bit :math:`c_1` du registre classique."

#: ../../tutorials/textbook/01_IQPE.ipynb:581
msgid "Et voilà, we have our final circuit"
msgstr "Et voilà ! nous avons notre circuit final"

#: ../../tutorials/textbook/01_IQPE.ipynb:611
msgid "Let's execute the circuit with the ``qasm_simulator``, the simulator without noise that run locally."
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:641
msgid "In the picture we have the same histograms but on the left we have on the x-axis the string with phase bits :math:`\\varphi_1`, :math:`\\varphi_2` and on the right the actual phase :math:`\\varphi` in decimal representation."
msgstr "Sur cette image, nous avons les mêmes histogrammes, à l'exception du fait que sur l'axe X de celui de gauche se trouve la représentation binaire de :math:`\\varphi`, c'est-à-dire les valeurs de :math:`\\varphi_1` et de :math:`\\varphi_2` tandis sa représentation décimale se trouve sur celui de droite."

#: ../../tutorials/textbook/01_IQPE.ipynb:643
msgid "As we expected we have found :math:`\\varphi=\\frac{1}{4}=0.25` with a :math:`100\\%` probability."
msgstr "Comme nous nous y attendions, nous trouvons :math:`\\varphi=\\frac{1}{4}=0,25` avec une probabilité de :math:`100\\%`."

#: ../../tutorials/textbook/01_IQPE.ipynb:655
msgid "IPE example with a 2-qubit gate"
msgstr "Exemple d'IPE avec une porte à deux qubits"

#: ../../tutorials/textbook/01_IQPE.ipynb:657
msgid "Now, we want to apply the IPE algorithm to estimate the phase for a 2-qubit gate :math:`U`. For this example, let's consider the controlled version of the :math:`T` gate, i.e. the gate :math:`U=\\textrm{Controlled-}T` (that from now we will express more compactly with :math:`CT`). Its matrix is"
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:659
msgid " CT =\n"
"\\begin{bmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^\\frac{i\\pi}{4}\\\\\n"
"\\end{bmatrix}"
msgstr " CT =\n"
"\\begin{bmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^\\frac{i\\pi}{4}\\\\\n"
"\\end{bmatrix}"

#: ../../tutorials/textbook/01_IQPE.ipynb:669
msgid "That is, the :math:`CT` gate adds a phase :math:`\\pi/4` to the state :math:`|11\\rangle`, leaving unchanged the phase of the other computational basis states :math:`|00\\rangle`, :math:`|01\\rangle`, :math:`|10\\rangle`."
msgstr "Ainsi, la porte :math:`CT` ajoute une phase de :math:`\\frac{\\pi}{4}` à l'état :math:`|11\\rangle`, et laisse inchangées les phases des autres états de base, à savoir :math:`|00\\rangle`, :math:`|01\\rangle` et :math:`|10\\rangle`."

#: ../../tutorials/textbook/01_IQPE.ipynb:671
msgid "Let's consider to estimate the phase :math:`\\phi=\\pi/4` for the eigenstate :math:`|11\\rangle`, we should find :math:`\\varphi=1/8`, since :math:`\\phi = 2 \\pi \\varphi`. Therefore to estimate the phase we need exactly 3 classical bits, i.e. :math:`m=3`, since :math:`1/2^3=1/8`. So :math:`\\varphi=0.\\varphi_1\\varphi_2\\varphi_3`."
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:673
msgid "As done with the example for the 1-qubit :math:`U` operator we will go through the same steps but this time we will have :math:`3` steps since :math:`m=3`, and we will not repeat all the explanations. So for details see the above example for 1-qubit :math:`U` gate."
msgstr "Comme cela a été fait dans l'exemple pour un opérateur à un qubit :math:`U`, nous allons passer par les mêmes étapes, bien que nous aurons cette fois :math:`3` étapes, étant donné que :math:`m=3` et nous ne répéterons pas toutes les explications. Donc pour plus de détails, nous conseillons de se référer à l'exemple ci-dessus portant sur un opérateur à un qubit :math:`U` gate."

#: ../../tutorials/textbook/01_IQPE.ipynb:675
msgid "First, we initialize the circuit with 3 qubits, 1 for the auxiliary qubit and 2 for the 2-qubit gate, and 3 classical bits to store the phase bits :math:`\\varphi_1`, :math:`\\varphi_2`, :math:`\\varphi_3`."
msgstr "Tout d'abord, nous initialisons le circuit avec 3 qubits, 1 pour le qubit auxiliaire et 2 sur lesquels on appliquera notre opérateur, ainsi qu'avec 3 bits classiques pour stocker les bits de phase :math:`\\varphi_1`, :math:`\\varphi_2` et :math:`\\varphi_3`."

#: ../../tutorials/textbook/01_IQPE.ipynb:704
msgid "Now we build the quantum circuit for the first step, to estimate the least significant phase bit :math:`\\varphi_m=\\varphi_3`."
msgstr "Nous construisons alors le circuit quantique pour la première étape, afin d'estimer le bit de phase le moins significatif :math:`\\varphi_m = \\varphi_3`."

#: ../../tutorials/textbook/01_IQPE.ipynb:709
msgid "We initialize the auxiliary qubit and the other qubits with the eigenstate :math:`|11\\rangle`."
msgstr "Nous initialisons le qubit auxiliaire en appliquant une porte d'Hadamard et les deux autres qubits en les mettant dans l'état propre :math:`|11\\rangle`."

#: ../../tutorials/textbook/01_IQPE.ipynb:744
msgid "Then we have to apply multiple times the :math:`CU` operator, that, in this example, is the Controlled-:math:`CT` gate (:math:`CCT` for short)."
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:746
msgid "To implement :math:`CCT` in the circuit, since :math:`T` is a phase gate, we can use the multi-controlled phase gate :math:`\\text{MCP}(\\theta)`, with :math:`\\theta=\\pi/4`."
msgstr "Afin d'implémenter :math:`CCT`, nous pouvons utiliser le fait que :math:`CT` est une porte de phase. Nous pouvons donc utiliser la porte de phase contrôlée de façon multiple :math:`\\text{MCP}(\\theta)`, avec :math:`\\theta=\\pi/4`."

#: ../../tutorials/textbook/01_IQPE.ipynb:778
msgid "Let's apply :math:`2^t` times :math:`\\text{MCP}(\\pi/4)`. Since for the first step :math:`t=m-1` and :math:`m=3`, we have :math:`2^t=4`."
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:813
msgid "Finally, we perform the measurement of the auxiliary qubit in x-basis. We can use the ``x_measurement`` function defined above in the example for 1-qubit gate. In this way we have obtained the phase bit :math:`\\varphi_3` and stored it in the classical bit :math:`c_0`."
msgstr "Enfin, nous réalisons la mesure du qubit auxiliaire dans la base x. Nous pouvons utiliser la fonction ``x_measurement`` définie précédemment dans l'exemple d'un opérateur à 1 qubit. Ainsi, nous obtenons le bit de phase :math:`\\varphi_3` et l'enregistrons dans le bit classique :math:`c_0`."

#: ../../tutorials/textbook/01_IQPE.ipynb:845
msgid "Subsequent steps (2nd, 3rd)"
msgstr "Étapes suivantes (deuxième et troisième étapes)"

#: ../../tutorials/textbook/01_IQPE.ipynb:847
msgid "Now we build the quantum circuit for the other remaining steps, the second and the third ones. As said in the first example, in these steps we have the additional sub-step of the phase correction."
msgstr "Nous construisons alors le circuit quantique pour les étapes restantes, la seconde et la troisième. Comme expliqué dans le premier exemple, dans ces étapes, nous avons la sous-étape supplémentaire de la correction de la phase."

#: ../../tutorials/textbook/01_IQPE.ipynb:885
msgid "In order to extract the phase bit :math:`\\varphi_{2}`, we perform a phase correction of :math:`-\\pi\\varphi_3/2`."
msgstr "Afin d'extraire le bit de phase :math:`\\varphi_{2}`, nous effectuons une correction de phase de :math:`-\\pi \\varphi_3 /2`."

#: ../../tutorials/textbook/01_IQPE.ipynb:887
msgid "So, after the reset we apply the phase gate :math:`P(\\theta)` with phase :math:`\\theta=-\\pi/2` conditioned by the classical bit :math:`c_0` (:math:`=\\varphi_3`)."
msgstr "Ainsi, après la réinitialisation, nous appliquons la porte de phase :math:`P(\\theta)` avec la phase :math:`\\theta=-\\pi/2` conditionnée par le bit classique :math:`c_0` (:math:`=\\varphi_3`)."

#: ../../tutorials/textbook/01_IQPE.ipynb:921
msgid "We apply the :math:`CU` operations as we did in the first step. For the second step we have :math:`t=m-2`, hence :math:`2^t=2`. So we apply :math:`\\text{MCP}(\\pi/4)` :math:`2` times. And then we perform the x-measurement of the qubit :math:`q_0`, storing the phase bit :math:`\\varphi_2` in the bit :math:`c_1`."
msgstr "Nous appliquons alors les portes :math:\"CU\" comme nous l'avons fait lors de la première étape. Pour la deuxième étape, nous avons :math:`t=m-2`, donc :math:`2^t=2`. Nous appliquons donc :math:`\\text{MCP}\\left(\\frac{\\pi}{4}\\right)` deux fois. Ensuite, nous réalisons la mesure dans la base :math:`X` du qubit :math:`q_0`, stockant le résultat, à savoir le bit de phase :math:`\\varphi_2`, dans le bit :math:`c_1` du registre classique."

#: ../../tutorials/textbook/01_IQPE.ipynb:955
msgid "All substeps of the 3rd step"
msgstr "Toutes les sous-étapes de la 3ème étape"

#: ../../tutorials/textbook/01_IQPE.ipynb:957
msgid "For the 3rd and last step, we perform the reset and initialization of the auxiliary qubit as done in the second step."
msgstr "Pour la troisième et dernière étape, nous effectuons la réinitialisation et l'initialisation du qubit auxiliaire, comme nous l'avons fait lors de la deuxième étape."

#: ../../tutorials/textbook/01_IQPE.ipynb:959
msgid "Then at the 3rd step we have to perform the phase correction of :math:`-2\\pi 0.0\\varphi_{2}\\varphi_{3}= -2\\pi \\left(\\frac{\\varphi_2}{4}+\\frac{\\varphi_3}{8}\\right)=-\\frac{\\varphi_2\\pi}{2}-\\frac{ \\varphi_3\\pi}{4}`, thus we have to apply 2 conditioned phase corrections, one conditioned by :math:`\\varphi_3` (:math:`=c_0`) and the other by :math:`\\varphi_2`\\ (:math:`=c_1`). To do this we have to apply the following: - gate :math:`P(-\\pi/4)` conditioned by :math:`c_0=1`, that is, by :math:`c=001` (c_if with value :math:`1`) - gate :math:`P(-\\pi/2)` conditioned by :math:`c_1=1`, that is, the gate is applied when :math:`c=010` (c_if with values :math:`2`) - gate :math:`P(-3\\pi/4)` conditioned by :math:`c_1=1` and :math:`c_0=1` that is, the gate is applied when :math:`c=011` (c_if with values :math:`3`)"
msgstr "Puis à la 3ème étape, nous devons effectuer la correction de phase de :math:`-2\\pi 0.0\\varphi_{2}\\varphi_{3}= -2\\pi \\left(\\frac{\\varphi_2}{4}+\\frac{\\varphi_3}{8}\\right)=-\\frac{\\varphi_2\\pi}{2}-\\frac{ \\varphi_3\\pi}{4}`, ainsi nous devons appliquer 2 corrections de phases conditionnelles, l'une étant conditionnée par :math:`\\varphi_3` (:math:`=c_0`) et l'autre par :math:`\\varphi_2`\\ (:math:`=c_1`). Pour cela noous appliquons les portes suivantes : - porte :math:`P(-\\pi/4)` conditionné par :math:`c_0=1`, c'est à dire :math:`c=001` (c_if avec la valeur :math:`1`) - porte :math:`P(-\\pi/2)` conditionnée par :math:`c_1=1`, c'est à dire, la porte est appliquée lorsque :math:`c=010` (c_if avec la valeur :math:`2`) - porte :math:`P(-3\\pi/4)` coonditiononée par :math:`c_1=1` et :math:`c_0=1` c'est à dire que la porte est appliquée si :math:`c=011` (c_if avec la valeur :math:`3`)"

#: ../../tutorials/textbook/01_IQPE.ipynb:962
msgid "Next, the :math:`CU` operations: we apply :math:`2^t` times the :math:`\\text{MCP}(\\pi/4)` gate and since at the 3rd step :math:`t=m-3=0`, we apply the gate only once."
msgstr "Ensuite, pour ce qui est des portes :math:`CU`, nous appliquons :math:`2^t` fois la porte :math:`\\text{MCP}\\left(\\frac{\\pi}{4}\\right)`et puisque à la troisième étape :math:` t=m-3 = 0`, nous n'appliquons cette porte qu'une seule fois."

#: ../../tutorials/textbook/01_IQPE.ipynb:1010
msgid "Now, we execute the circuit with the simulator without noise."
msgstr "Nous exécutons ensuite ce circuit avec le simulateur sans erreur."

#: ../../tutorials/textbook/01_IQPE.ipynb:1040
msgid "We have obtained :math:`100\\%` probability to find :math:`\\varphi=0.125`, that is, :math:`1/8`, as expected."
msgstr "Nous avons obtenu :math:`100\\%` de probabilité de trouver :math:`\\varphi=0.125`, c'est-à-dire :math:`1/8`, comme nous nous y attendions."

