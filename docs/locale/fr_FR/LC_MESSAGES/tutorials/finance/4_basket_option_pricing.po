msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-14 09:35+0000\n"
"PO-Revision-Date: 2020-07-14 10:45\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/finance/4_basket_option_pricing.po\n"
"X-Crowdin-File-ID: 9298\n"
"Language: fr_FR\n"

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:10
msgid "This page was generated from `tutorials/finance/4_basket_option_pricing.ipynb`__."
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:9
msgid "**Qiskit Finance: Pricing Basket Options**"
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:11
msgid "The latest version of this notebook is available on https://github.com/Qiskit/qiskit-iqx-tutorials."
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:16
msgid "Contributors"
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:18
msgid "Stefan Woerner[1], Daniel Egger[1] ### Affiliation - [1]IBMQ"
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:30
msgid "Introduction"
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:32
msgid "Suppose a basket option with strike price :math:`K` and two underlying assets whose spot price at maturity :math:`S_T^1`, :math:`S_T^2` follow given random distributions. The corresponding payoff function is defined as:"
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:34
msgid "\\max\\{S_T^1 + S_T^2 - K, 0\\}  In the following, a quantum algorithm based on amplitude estimation is used to estimate the expected payoff, i.e., the fair price before discounting, for the option:"
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:38
msgid "\\mathbb{E}\\left[ \\max\\{S_T^1 + S_T^2 - K, 0\\} \\right].  The approximation of the objective function and a general introduction to option pricing and risk analysis on quantum computers are given in the following papers:"
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:42
msgid "Quantum Risk Analysis. Woerner, Egger. 2018."
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:43
msgid "Option Pricing using Quantum Computers. Stamatopoulos et al. 2019."
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:76
msgid "Uncertainty Model"
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:78
msgid "We construct a circuit factory to load a multivariate log-normal random distribution into a quantum state on :math:`n` qubits. For every dimension :math:`j = 1,\\ldots,d`, the distribution is truncated to a given interval :math:`[low_j, high_j]` and discretized using :math:`2^{n_j}` grid points, where :math:`n_j` denotes the number of qubits used to represent dimension :math:`j`, i.e., :math:`n_1+\\ldots+n_d = n`. The unitary operator corresponding to the circuit factory implements the following:"
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:80
msgid "\\big|0\\rangle_{n} \\mapsto \\big|\\psi\\rangle_{n} = \\sum_{i_1,\\ldots,i_d} \\sqrt{p_{i_1\\ldots i_d}}\\big|i_1\\rangle_{n_1}\\ldots\\big|i_d\\rangle_{n_d},  where :math:`p_{i_1\\ldots i_d}` denote the probabilities corresponding to the truncated and discretized distribution and where :math:`i_j` is mapped to the right interval using the affine map:"
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:84
msgid "\\{0, \\ldots, 2^{n_j}-1\\} \\ni i_j \\mapsto \\frac{high_j - low_j}{2^{n_j} - 1} * i_j + low_j \\in [low_j, high_j]."
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:86
msgid "For simplicity, we assume both stock prices are independent and identically distributed. This assumption just simplifies the parametrization below and can be easily relaxed to more complex and also correlated multivariate distributions. The only important assumption for the current implementation is that the discretization grid of the different dimensions has the same step size."
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:171
msgid "Payoff Function"
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:173
msgid "The payoff function equals zero as long as the sum of the spot prices at maturity :math:`(S_T^1 + S_T^2)` is less than the strike price :math:`K` and then increases linearly. The implementation first uses a weighted sum operator to compute the sum of the spot prices into an ancilla register, and then uses a comparator, that flips an ancilla qubit from :math:`\\big|0\\rangle` to :math:`\\big|1\\rangle` if :math:`(S_T^1 + S_T^2) \\geq K`. This ancilla is used to control the linear part of the payoff function."
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:176
msgid "The linear part itself is approximated as follows. We exploit the fact that :math:`\\sin^2(y + \\pi/4) \\approx y + 1/2` for small :math:`|y|`. Thus, for a given approximation scaling factor :math:`c_{approx} \\in [0, 1]` and :math:`x \\in [0, 1]` we consider"
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:178
msgid "\\sin^2( \\pi/2 * c_{approx} * ( x - 1/2 ) + \\pi/4) \\approx \\pi/2 * c_{approx} * ( x - 1/2 ) + 1/2"
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:180
msgid "for small :math:`c_{approx}`."
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:182
msgid "We can easily construct an operator that acts as"
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:184
msgid "\\big|x\\rangle \\big|0\\rangle \\mapsto \\big|x\\rangle \\left( \\cos(a*x+b) \\big|0\\rangle + \\sin(a*x+b) \\big|1\\rangle \\right),  using controlled Y-rotations."
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:188
msgid "Eventually, we are interested in the probability of measuring :math:`\\big|1\\rangle` in the last qubit, which corresponds to :math:`\\sin^2(a*x+b)`. Together with the approximation above, this allows to approximate the values of interest. The smaller we choose :math:`c_{approx}`, the better the approximation. However, since we are then estimating a property scaled by :math:`c_{approx}`, the number of evaluation qubits :math:`m` needs to be adjusted accordingly."
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:190
msgid "For more details on the approximation, we refer to: Quantum Risk Analysis. Woerner, Egger. 2018."
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:192
msgid "Since the weighted sum operator (in its current implementation) can only sum up integers, we need to map from the original ranges to the representable range to estimate the result, and reverse this mapping before interpreting the result. The mapping essentially corresponds to the affine mapping described in the context of the uncertainty model above."
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:323
msgid "Evaluate Expected Payoff"
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:325
msgid "We first verify the quantum circuit by simulating it and analyzing the resulting probability to measure the :math:`|1\\rangle` state in the objective qubit."
msgstr ""

#: ../../tutorials/finance/4_basket_option_pricing.ipynb:434
msgid "Next we use amplitude estimation to estimate the expected payoff."
msgstr ""

