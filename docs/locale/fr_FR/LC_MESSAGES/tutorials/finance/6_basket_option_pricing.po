msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-16 10:37+0000\n"
"PO-Revision-Date: 2020-07-31 17:27\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/finance/6_basket_option_pricing.po\n"
"X-Crowdin-File-ID: 9332\n"
"Language: fr_FR\n"

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:10
msgid "This page was generated from `tutorials/finance/6_basket_option_pricing.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/finance/6_basket_option_pricing.ipynb`__."

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:9
msgid "**Pricing Basket Options**"
msgstr "**Calcul du prix d'options panier**"

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:21
msgid "Introduction"
msgstr "Introduction"

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:23
msgid "Suppose a basket option with strike price :math:`K` and two underlying assets whose spot price at maturity :math:`S_T^1`, :math:`S_T^2` follow given random distributions. The corresponding payoff function is defined as:"
msgstr "Supposons une option panier avec prix d'exercice :math:`K` et deux actifs sous-jacents dont les prix au comptant à l'échéance :math:`S_T^1`, :math:`S_T^2` suivent des distributions aléatoires données. La fonction de gain correspondante est définie par :"

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:25
msgid "\\max\\{S_T^1 + S_T^2 - K, 0\\}  In the following, a quantum algorithm based on amplitude estimation is used to estimate the expected payoff, i.e., the fair price before discounting, for the option:"
msgstr "\\max\\{S_T^1 + S_T^2 - K, 0\\} Dans ce qui suit, un algorithme quantique basé sur l'estimation d'amplitude est utilisé pour estimer le gain attendu, c'est-à-dire le juste prix avant actualisation, pour l'option :"

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:29
msgid "\\mathbb{E}\\left[ \\max\\{S_T^1 + S_T^2 - K, 0\\} \\right].  The approximation of the objective function and a general introduction to option pricing and risk analysis on quantum computers are given in the following papers:"
msgstr "\\mathbb{E}\\left [ \\max\\ { S_T ^ 1 + S_T ^ 2-K, 0 \\ } \\right ]. L' approximation de la fonction objectif et une introduction générale à la tarification des options et à l'analyse des risques sur les ordinateurs quantiques sont données dans les articles suivants :"

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:33
msgid "Quantum Risk Analysis. Woerner, Egger. 2018."
msgstr "Quantum Risk Analysis. Woerner, Egger. 2018."

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:34
msgid "Option Pricing using Quantum Computers. Stamatopoulos et al. 2019."
msgstr "Option Pricing using Quantum Computers. Stamatopoulos et al. 2019."

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:67
msgid "Uncertainty Model"
msgstr "Modèle d'incertitude"

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:69
msgid "We construct a circuit factory to load a multivariate log-normal random distribution into a quantum state on :math:`n` qubits. For every dimension :math:`j = 1,\\ldots,d`, the distribution is truncated to a given interval :math:`[low_j, high_j]` and discretized using :math:`2^{n_j}` grid points, where :math:`n_j` denotes the number of qubits used to represent dimension :math:`j`, i.e., :math:`n_1+\\ldots+n_d = n`. The unitary operator corresponding to the circuit factory implements the following:"
msgstr "Nous construisons un circuit afin de représenter une distribution aléatoire en log-normale multidimensionnelle dans un état quantique sur :math:`n` qubits. Pour chaque dimension :math:`j = 1,\\ldots,d`, la distribution est limitée à l'intervalle :math:`[low_j, high_j]` et discrétisée en utilisants :math:`2^{n_j}` points, où :math:`n_j` correspond au nombre de qubits utilisés pour représenter la dimension :math:`j`, c'est à dire : :math:`n_1+\\ldots+n_d = n`. L'opérateur unitaire correspondant à ce circuit respecte la relation suivante :"

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:71
msgid "\\big|0\\rangle_{n} \\mapsto \\big|\\psi\\rangle_{n} = \\sum_{i_1,\\ldots,i_d} \\sqrt{p_{i_1\\ldots i_d}}\\big|i_1\\rangle_{n_1}\\ldots\\big|i_d\\rangle_{n_d},"
msgstr "\\big|0\\rangle_{n} \\mapsto \\big|\\psi\\rangle_{n} = \\sum_{i_1,\\ldots,i_d} \\sqrt{p_{i_1\\ldots i_d}}\\big|i_1\\rangle_{n_1}\\ldots\\big|i_d\\rangle_{n_d},"

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:73
msgid "where :math:`p_{i_1\\ldots i_d}` denote the probabilities corresponding to the truncated and discretized distribution and where :math:`i_j` is mapped to the right interval using the affine map:"
msgstr "où :math:`p_{i_1\\ldots i_d}` représentent les probabilités de chaque distribution tronquée et discrétisée et où :math:`i_j` est mappé sur l'intervalle approprié en utilisant la carte affine suivante :"

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:75
msgid "\\{0, \\ldots, 2^{n_j}-1\\} \\ni i_j \\mapsto \\frac{high_j - low_j}{2^{n_j} - 1} * i_j + low_j \\in [low_j, high_j]."
msgstr "\\{0, \\ldots, 2^{n_j}-1\\} \\ni i_j \\mapsto \\frac{high_j - low_j}{2^{n_j} - 1} * i_j + low_j \\in [low_j, high_j]."

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:77
msgid "For simplicity, we assume both stock prices are independent and identically distributed. This assumption just simplifies the parametrization below and can be easily relaxed to more complex and also correlated multivariate distributions. The only important assumption for the current implementation is that the discretization grid of the different dimensions has the same step size."
msgstr "Pour simplifier, nous supposons que les cours des deux actions sont indépendants et répartis de manière identique. Cette hypothèse simplifie la paramétrisation ci-dessous et peut être facilement étendue à des distributions multivariées plus complexes et également corrélées. La seule hypothèse importante pour l'implémentation suivante est que la grille de discrétisation des différentes dimensions a la même taille de pas."

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:162
msgid "Payoff Function"
msgstr "Fonction de gain"

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:164
msgid "The payoff function equals zero as long as the sum of the spot prices at maturity :math:`(S_T^1 + S_T^2)` is less than the strike price :math:`K` and then increases linearly. The implementation first uses a weighted sum operator to compute the sum of the spot prices into an ancilla register, and then uses a comparator, that flips an ancilla qubit from :math:`\\big|0\\rangle` to :math:`\\big|1\\rangle` if :math:`(S_T^1 + S_T^2) \\geq K`. This ancilla is used to control the linear part of the payoff function."
msgstr "La fonction de gain est nulle tant que la somme des prix au comptant à l'échéance :math:`(S_T^1 + S_T^2)` est inférieure au prix d'exercice :math:`K` puis cette fonction augmente linéairement. L'implémentation utilise d'abord un opérateur de somme pondérée pour calculer la somme des prix au comptant dans un registre ancillaire, puis utilise un comparateur qui fait basculer un qubit ancillaire de :math:`\\big|0\\rangle` à :math:`\\big|1\\rangle` si :math:`(S_T^1 + S_T^2) \\geq K`. Ce registre ancillaire est utilisé pour contrôler la partie linéaire de la fonction de gain."

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:167
msgid "The linear part itself is approximated as follows. We exploit the fact that :math:`\\sin^2(y + \\pi/4) \\approx y + 1/2` for small :math:`|y|`. Thus, for a given approximation scaling factor :math:`c_{approx} \\in [0, 1]` and :math:`x \\in [0, 1]` we consider"
msgstr "La partie linéaire proprement dite est approximée de la façon suivante. On exploite le fait que :math:`\\sin^2(y + \\pi/4) \\approx y + 1/2` pour :math:`|y|` petit.\n"
"Ainsi, pour un facteur d'échelle d'approximation :math:`c_{approx} \\in [0, 1]` et :math:`x \\in [0, 1]` on considère"

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:169
msgid "\\sin^2( \\pi/2 * c_{approx} * ( x - 1/2 ) + \\pi/4) \\approx \\pi/2 * c_{approx} * ( x - 1/2 ) + 1/2"
msgstr "\\sin^2( \\pi/2 * c_{approx} * ( x - 1/2 ) + \\pi/4) \\approx \\pi/2 * c_{approx} * ( x - 1/2 ) + 1/2"

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:171
msgid "for small :math:`c_{approx}`."
msgstr "pour :math:`c_{approx}` petit."

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:173
msgid "We can easily construct an operator that acts as"
msgstr "Nous pouvons facilement construire un opérateur qui agit ainsi :"

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:175
msgid "\\big|x\\rangle \\big|0\\rangle \\mapsto \\big|x\\rangle \\left( \\cos(a*x+b) \\big|0\\rangle + \\sin(a*x+b) \\big|1\\rangle \\right),  using controlled Y-rotations."
msgstr "\\big|x\\rangle \\big|0\\rangle \\mapsto \\big|x\\rangle \\left( \\cos(a*x+b) \\big|0\\rangle + \\sin(a*x+b) \\big|1\\rangle \\right),  en employant des portes Rotation-Y."

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:179
msgid "Eventually, we are interested in the probability of measuring :math:`\\big|1\\rangle` in the last qubit, which corresponds to :math:`\\sin^2(a*x+b)`. Together with the approximation above, this allows to approximate the values of interest. The smaller we choose :math:`c_{approx}`, the better the approximation. However, since we are then estimating a property scaled by :math:`c_{approx}`, the number of evaluation qubits :math:`m` needs to be adjusted accordingly."
msgstr "Il est aussi intéressant de connaitre la probabilité de mesurer :math:`\\big|1\\rangle` sur le dernier qubit, correspondant à :math:`\\sin^2(a*x+b)`. En complément de l'approximation précédente, nous pouvons alors estimer la valeurs des intérêts. Plus :math:`c_{approx}` est choisi petit, meilleure est l'approximation. Cependant, puisque nous estimons une propriété dépendant de :math:`c_{approx}`, le nombre de qubits d'évaluation :math:`m` doit être choisi en conséquence."

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:181
msgid "For more details on the approximation, we refer to: Quantum Risk Analysis. Woerner, Egger. 2018."
msgstr "Pour plus de détails sur l'approximation, nous nous référons à: Quantum Risk Analysis. Woerner, Egger. 2018."

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:183
msgid "Since the weighted sum operator (in its current implementation) can only sum up integers, we need to map from the original ranges to the representable range to estimate the result, and reverse this mapping before interpreting the result. The mapping essentially corresponds to the affine mapping described in the context of the uncertainty model above."
msgstr "Étant donné que l'opérateur de somme pondérée (dans son implémentation actuelle) ne peut additionner que des entiers, nous devons mapper depuis les intervalles d'origine vers les intervalles représentables pour estimer le résultat, et inverser cette correspondance avant d'interpréter le résultat. La cartographie correspond essentiellement à la cartographie affine décrite dans le cadre du modèle d'incertitude ci-dessus."

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:314
msgid "Evaluate Expected Payoff"
msgstr "Evaluation du gain attendu"

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:316
msgid "We first verify the quantum circuit by simulating it and analyzing the resulting probability to measure the :math:`|1\\rangle` state in the objective qubit."
msgstr "Nous commençons par vérifier le circuit quantique en le simulant et en analysant la probabilité de mesurer l'état :math:`|1\\rangle` sur le qubit objectif."

#: ../../tutorials/finance/6_basket_option_pricing.ipynb:425
msgid "Next we use amplitude estimation to estimate the expected payoff."
msgstr "Puis nous utilisons une estimation d'amplitude pour déterminer le gain attendu."

