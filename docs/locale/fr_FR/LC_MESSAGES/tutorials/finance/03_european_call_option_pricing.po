msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-21 18:06+0000\n"
"PO-Revision-Date: 2020-10-21 18:44\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/finance/03_european_call_option_pricing.po\n"
"X-Crowdin-File-ID: 9346\n"
"Language: fr_FR\n"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:10
msgid "This page was generated from `tutorials/finance/03_european_call_option_pricing.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/finance/3_european_call_option_pricing.ipynb`__."

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:9
msgid "**Pricing European Call Options**"
msgstr "**Prix des options d'achat européennes**"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:21
msgid "Introduction"
msgstr "Introduction"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:23
msgid "Suppose a European call option with strike price :math:`K` and an underlying asset whose spot price at maturity :math:`S_T` follows a given random distribution. The corresponding payoff function is defined as:"
msgstr "Supposons une option d'achat européenne avec un prix d'exercice :math:`K` et un actif sous-jacent dont le prix au comptant à l'échéance :math:`S_T` suit une distribution aléatoire donnée. La fonction de gain correspondante est définie comme suit:"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:25
msgid "\\max\\{S_T - K, 0\\}\n\n"
msgstr "\\max\\{S_T - K, 0\\}\n\n"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:27
msgid "In the following, a quantum algorithm based on amplitude estimation is used to estimate the expected payoff, i.e., the fair price before discounting, for the option:"
msgstr "Dans ce qui suit, un algorithme quantique basé sur l'estimation d'amplitude est utilisé pour évaluer le gain attendu, c'est-à-dire le juste prix avant remise, pour l'option :"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:29
msgid "\\mathbb{E}\\left[ \\max\\{S_T - K, 0\\} \\right]\n\n"
msgstr "\\mathbb{E}\\left[ \\max\\{K - S_T, 0\\} \\right]\n\n"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:31
msgid "as well as the corresponding :math:`\\Delta`, i.e., the derivative of the option price with respect to the spot price, defined as:"
msgstr "ainsi que le :math:`\\Delta` résultant, c'est-à-dire la différence entre le prix de l'option et le prix au comptant, défini comme :"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:33
msgid "\\Delta = \\mathbb{P}\\left[S_T \\geq K\\right]"
msgstr "\\Delta = \\mathbb{P}\\left[S_T \\geq K\\right]"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:38
msgid "The approximation of the objective function and a general introduction to option pricing and risk analysis on quantum computers are given in the following papers:"
msgstr "L'approximation de la fonction objectif et une introduction générale à la tarification des options et à l'analyse des risques sur les ordinateurs quantiques sont données dans les articles suivants :"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:40
msgid "Quantum Risk Analysis. Woerner, Egger. 2018."
msgstr "Quantum Risk Analysis. Woerner, Egger. 2018."

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:41
msgid "Option Pricing using Quantum Computers. Stamatopoulos et al. 2019."
msgstr "Option Pricing using Quantum Computers. Stamatopoulos et al. 2019."

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:69
msgid "Uncertainty Model"
msgstr "Modèle d'incertitude"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:71
msgid "We construct a circuit factory to load a log-normal random distribution into a quantum state. The distribution is truncated to a given interval :math:`[\\text{low}, \\text{high}]` and discretized using :math:`2^n` grid points, where :math:`n` denotes the number of qubits used. The unitary operator corresponding to the circuit factory implements the following:"
msgstr ""

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:73
msgid "\\big|0\\rangle_{n} \\mapsto \\big|\\psi\\rangle_{n} = \\sum_{i=0}^{2^n-1} \\sqrt{p_i}\\big|i\\rangle_{n},\n\n"
msgstr "\\big|0\\rangle_{n} \\mapsto \\big|\\psi\\rangle_{n} = \\sum_{i=0}^{2^n-1} \\sqrt{p_i}\\big|i\\rangle_{n},\n\n"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:75
msgid "where :math:`p_i` denote the probabilities corresponding to the truncated and discretized distribution and where :math:`i` is mapped to the right interval using the affine map:"
msgstr "où les :math:`p_i` représentent les probabilités de la distribution tronquée et discrétisée et où les :math:`i` sont mappés sur l'intervalle approprié en utilisant la carte affine suivante :"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:77
msgid "\\{0, \\ldots, 2^n-1\\} \\ni i \\mapsto \\frac{\\text{high} - \\text{low}}{2^n - 1} * i + \\text{low} \\in [\\text{low}, \\text{high}].\n\n"
msgstr ""

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:148
msgid "Payoff Function"
msgstr "Fonction de gain"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:150
msgid "The payoff function equals zero as long as the spot price at maturity :math:`S_T` is less than the strike price :math:`K` and then increases linearly. The implementation uses a comparator, that flips an ancilla qubit from :math:`\\big|0\\rangle` to :math:`\\big|1\\rangle` if :math:`S_T \\geq K`, and this ancilla is used to control the linear part of the payoff function."
msgstr "La fonction de gain est nulle tant que la somme des prix au comptant à l'échéance :math:`S_T` est inférieure au prix d'exercice :math:`K` puis cette fonction augmente linéairement. Cette implémentation repose sur un comparateur qui modifie un qubit ancillaire de :math:`\\big|0\\rangle` à :math:`\\big|1\\rangle` si :math:`S_T \\geq K` , puis cet ancillaire est utilisé pour contrôler la partie linéaire de la fonction de gain."

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:152
msgid "The linear part itself is then approximated as follows. We exploit the fact that :math:`\\sin^2(y + \\pi/4) \\approx y + 1/2` for small :math:`|y|`. Thus, for a given approximation rescaling factor :math:`c_\\text{approx} \\in [0, 1]` and :math:`x \\in [0, 1]` we consider"
msgstr ""

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:154
msgid "\\sin^2( \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + \\pi/4) \\approx \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + 1/2\n\n"
msgstr ""

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:156
msgid "for small :math:`c_\\text{approx}`."
msgstr ""

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:158
msgid "We can easily construct an operator that acts as"
msgstr "Nous pouvons facilement construire un opérateur qui agit ainsi :"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:160
msgid "\\big|x\\rangle \\big|0\\rangle \\mapsto \\big|x\\rangle \\left( \\cos(a*x+b) \\big|0\\rangle + \\sin(a*x+b) \\big|1\\rangle \\right),\n\n"
"using controlled Y-rotations."
msgstr "\\big|x\\rangle \\big|0\\rangle \\mapsto \\big|x\\rangle \\left( \\cos(a*x+b) \\big|0\\rangle + \\sin(a*x+b) \\big|1\\rangle \\right),\n\n"
"en employant des portes Y-Rotation."

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:164
msgid "Eventually, we are interested in the probability of measuring :math:`\\big|1\\rangle` in the last qubit, which corresponds to :math:`\\sin^2(a*x+b)`. Together with the approximation above, this allows to approximate the values of interest. The smaller we choose :math:`c_\\text{approx}`, the better the approximation. However, since we are then estimating a property scaled by :math:`c_\\text{approx}`, the number of evaluation qubits :math:`m` needs to be adjusted accordingly."
msgstr ""

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:166
msgid "For more details on the approximation, we refer to: Quantum Risk Analysis. Woerner, Egger. 2018."
msgstr "Pour plus de détails sur l'approximation, nous nous référons à: Quantum Risk Analysis. Woerner, Egger. 2018."

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:356
msgid "Evaluate Expected Payoff"
msgstr "Evaluation du gain attendu"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:431
msgid "Instead of constructing these circuits manually, Qiskit's finance module offers the ``EuropeanCallExpectedValue`` circuit, which already implements this functionality as building block."
msgstr ""

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:508
msgid "Evaluate Delta"
msgstr "Evaluation du Delta"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:510
msgid "The Delta is a bit simpler to evaluate than the expected payoff. Similarly to the expected payoff, we use a comparator circuit and an ancilla qubit to identify the cases where :math:`S_T > K`. However, since we are only interested in the probability of this condition being true, we can directly use this ancilla qubit as the objective qubit in amplitude estimation without any further approximation."
msgstr "Le Delta est un peu plus simple à évaluer que la fonction de gain. Tout comme pour la fonction de gain, nous utilisons un circuit comparateur et un qubit ancillaire pour identifier les cas où :math:`S_T>K`. Cependant, puisque nous ne sommes intéressés que par la probabilité que cette condition soit vraie, nous pouvons utiliser le qubit ancillaire directement comme qubit objectif pour obtenir l'estimation d'amplitude sans approximations supplémentaires."

