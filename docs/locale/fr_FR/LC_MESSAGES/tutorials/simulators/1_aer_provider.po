msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-12 15:01+0000\n"
"PO-Revision-Date: 2020-11-27 10:41\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/simulators/1_aer_provider.po\n"
"X-Crowdin-File-ID: 9160\n"
"Language: fr_FR\n"

#: ../../tutorials/simulators/1_aer_provider.ipynb:10
msgid "This page was generated from `tutorials/simulators/1_aer_provider.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/simulators/1_aer_provider.ipynb`__."

#: ../../tutorials/simulators/1_aer_provider.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/simulators/1_aer_provider.ipynb>`_."
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:9
msgid "Simulators"
msgstr "Simulateurs"

#: ../../tutorials/simulators/1_aer_provider.ipynb:21
msgid "Introduction"
msgstr "Introduction"

#: ../../tutorials/simulators/1_aer_provider.ipynb:23
msgid "This notebook shows how to import *Qiskit Aer* simulator backends and use them to execute ideal (noise free) Qiskit Terra circuits."
msgstr "Ce bloc-notes montre comment importer les backends du simulateur *Qiskit Aer * et les utiliser pour exécuter des circuits Qiskit Terra idéaux (non bruités)."

#: ../../tutorials/simulators/1_aer_provider.ipynb:50
msgid "Qiskit Aer simulator backends"
msgstr "Backends du simulateur Qiskit Aer"

#: ../../tutorials/simulators/1_aer_provider.ipynb:52
msgid "Qiskit Aer currently includes three high performance simulator backends: \\* ``QasmSimulator``: Allows ideal and noisy multi-shot execution of qiskit circuits and returns counts or memory \\* ``StatevectorSimulator``: Allows ideal single-shot execution of qiskit circuits and returns the final statevector of the simulator after application \\* ``UnitarySimulator``: Allows ideal single-shot execution of qiskit circuits and returns the final unitary matrix of the circuit itself. Note that the circuit cannot contain measure or reset operations for this backend"
msgstr "Qiskit Aer inclut actuellement trois backends de simulateur de hautes performances : \\* ``QasmSimulator`` : permet l'exécution multi-shot en mode idéal ou bruité des circuits qiskit et retourne les résultats agrégés ou détaillés des shots \\* ``StatevectorSimulator`` : permet l'exécution en mode idéal à un seul shot et retourne le vecteur d'état final du système après l'application du circuit \\* ``UnitarySimulator`` : permet l'exécution idéale de circuits qiskit en un seul shot et retourne la matrice unitaire du circuit lui-même. Notez que le circuit ne peut pas contenir des opérations de mesure ou de réinitialisation pour ce backend"

#: ../../tutorials/simulators/1_aer_provider.ipynb:55
msgid "These backends are found in the ``Aer`` provider with the names ``qasm_simulator``, ``statevector_simulator`` and ``unitary_simulator``, respectively."
msgstr "Ces backends se trouvent dans le ``fournisseur Aer`` (Aer provider) avec les noms ``qasm_simulator``, ``statevector_simulator`` et ``unitary_simulator``, respectivement."

#: ../../tutorials/simulators/1_aer_provider.ipynb:105
msgid "The simulator backends can also be directly imported from ``qiskit.providers.aer``"
msgstr "Les backends du simulateur peuvent également être importés directement depuis ``qiskit.providers.aer``"

#: ../../tutorials/simulators/1_aer_provider.ipynb:127
msgid "QasmSimulator"
msgstr "Simulateur Qasm"

#: ../../tutorials/simulators/1_aer_provider.ipynb:129
msgid "The ``QasmSimulator`` backend is designed to mimic an actual device. It executes a Qiskit ``QuantumCircuit`` and returns a count dictionary containing the final values of any classical registers in the circuit. The circuit may contain *gates*, *measurements*, *resets*, *conditionals*, and other advanced simulator options that will be discussed in another notebook."
msgstr "Le backend ` ` QasmSimulator'` est conçu pour imiter un dispositif réel. Il exécute un ``QuantumCircuit`` de Qiskit et renvoie un dictionnaire de comptage contenant les valeurs finales de tous les registres classiques du circuit. Le circuit peut contenir des *gates* (portes), *measurements* (mesures) , *resets* (mise à 0), *conditionals* (conditions), et d'autres options de simulation avancées qui seront discutées dans un autre bloc-notes."

#: ../../tutorials/simulators/1_aer_provider.ipynb:132
#: ../../tutorials/simulators/1_aer_provider.ipynb:285
msgid "Simulating a quantum circuit"
msgstr "Simulation d'un circuit quantique"

#: ../../tutorials/simulators/1_aer_provider.ipynb:134
#: ../../tutorials/simulators/1_aer_provider.ipynb:287
msgid "The basic operation executes a quantum circuit and returns a counts dictionary of measurement outcomes. Here we execute a simple circuit that prepares a 2-qubit Bell-state :math:`|\\psi\\rangle = \\frac{1}{2}(|0,0\\rangle + |1,1 \\rangle)` and measures both qubits."
msgstr "L'opération de base exécute un circuit quantique et retourne un dictionnaire de comptage des résultats de mesure. Ici, nous exécutons un circuit simple qui prépare un état de Bell à 2 qubit :math:`|\\psi\\rangle = \\frac{1}{2}(|0,\\rangle + |1,1 \\rangle)` et mesure les deux qubits."

#: ../../tutorials/simulators/1_aer_provider.ipynb:177
msgid "Returning measurement outcomes for each shot"
msgstr "Renvoi des résultats de la mesure pour chaque shot"

#: ../../tutorials/simulators/1_aer_provider.ipynb:179
msgid "The ``QasmSimulator`` also supports returning a list of measurement outcomes for each individual shot. This is enabled by setting the keyword argument ``memory=True`` in the ``assemble`` or ``execute`` function."
msgstr "Le ``QasmSimulator`` prend également en charge le retour d'une liste de résultats de mesure pour chaque shot individuel. Ceci est activé en définissant l'argument de mot clé ``memory=True`` dans la fonction `` assemble`` ou ``execute``."

#: ../../tutorials/simulators/1_aer_provider.ipynb:232
#: ../../tutorials/simulators/1_aer_provider.ipynb:374
msgid "Starting simulation with a custom initial state"
msgstr "Démarrage de la simulation avec un état initial personnalisé"

#: ../../tutorials/simulators/1_aer_provider.ipynb:234
msgid "The ``QasmSimulator`` allows setting a custom initial statevector for the simulation. This means that all experiments in a Qobj will be executed starting in a state :math:`|\\psi\\rangle` rather than the all zero state :math:`|0,0,..0\\rangle`. The custom state may be set in the circuit using the ``initialize`` method."
msgstr "Le ` ` QasmSimulator ` ` permet de définir un état initial personnalisé pour la simulation. Cela signifie que toutes les expériences dans un Qobj seront exécutées à partir d'un angle :math:` | \\psi\\r'plutôt que de l'état zéro sur tous les qubits :math:` | 0,0, .. 0\\rangle'. L'état personnalisé peut être défini dans le circuit à l'aide de la méthode ``initialize``."

#: ../../tutorials/simulators/1_aer_provider.ipynb:236
msgid "**Note:** \\* The initial statevector must be a valid quantum state :math:`|\\langle\\psi|\\psi\\rangle|=1`. If not, an exception will be raised. \\* The simulator supports this option directly for efficiency, but it can also be unrolled to standard gates for execution on actual devices."
msgstr "** Remarque: ** \\ * L'état initial doit être un état quantique valide :math:` | \\langle\\psi | \\psi\\rangle | =1 `. Sinon, une exception sera renvoyée. \\* Le simulateur prend en charge cette option directement pour l'efficacité, mais il peut également être déployé sur des portes standard en vue de l'exécution sur les périphériques réels."

#: ../../tutorials/simulators/1_aer_provider.ipynb:238
msgid "We now demonstrate this functionality by setting the simulator to be initialized in the final Bell-state of the previous example:"
msgstr "Nous démontrons maintenant cette fonctionnalité en définissant le simulateur à initialiser dans l'état Bell de l'exemple précédent:"

#: ../../tutorials/simulators/1_aer_provider.ipynb:280
msgid "StatevectorSimulator"
msgstr "StatevectorSimulator"

#: ../../tutorials/simulators/1_aer_provider.ipynb:282
msgid "The ``StatevectorSimulator`` executes a single shot of a Qiskit ``QuantumCircuit`` and returns the final quantum statevector of the simulation. The circuit may contain *gates*, and also *measurements*, *resets*, and *conditional* operations."
msgstr "``StatevectorSimulator`` exécute un seul shot d'un ``QuantumCircuit`` et retourne l'état final de la simulation. Le circuit peut contenir des *gates*, des * measure*, * resets* et * conditionnals*."

#: ../../tutorials/simulators/1_aer_provider.ipynb:329
msgid "Simulating a quantum circuit with measurement"
msgstr "Simulation d'un circuit quantique avec mesure"

#: ../../tutorials/simulators/1_aer_provider.ipynb:331
msgid "Note that if a circuit contains *measure* or *reset* the final statevector will be a conditional statevector *after* simulating wave-function collapse to the outcome of a measure or reset. For the Bell-state circuit this means the final statevector will be *either* :math:`|0,0\\rangle` *or* :math:`|1, 1\\rangle`."
msgstr "Notez que si un circuit contient des *measure* ou des *reset* le dernier état sera un état conditionnel *après* simulation de l'effondrement de la fonction d'onde comme résultat d'une mesure ou d'une réinitialisation. Pour le circuit de l'état Bell, cela signifie que le dernier état sera *soit* :math:`| 0,0\\rangle` *soit* :math:` | 1, 1\\rangle`."

#: ../../tutorials/simulators/1_aer_provider.ipynb:376
msgid "Like the ``QasmSimulator``, the ``StatevectorSimulator`` also allows setting a custom initial statevector for the simulation. Here we run the previous initial statevector example on the ``StatevectorSimulator`` and initialize it to the Bell state."
msgstr "Comme ``QasmSimulator``, le ``StatevectorSimulator`` permet également de définir un état initial personnalisé pour la simulation. Ici, nous exécutons l'exemple précédent sur le ``StatevectorSimulator`` et l'initialisons à l'état de Bell."

#: ../../tutorials/simulators/1_aer_provider.ipynb:417
msgid "Unitary Simulator"
msgstr "Simulateur unitaire"

#: ../../tutorials/simulators/1_aer_provider.ipynb:419
msgid "The ``UnitarySimulator`` constructs the unitary matrix for a Qiskit ``QuantumCircuit`` by applying each gate matrix to an identity matrix. The circuit may only contain *gates*, if it contains *resets* or *measure* operations an exception will be raised."
msgstr "Le ` ` UnitarySimulator'` construit la matrice unitaire correspondant à un ``QuantumCircuit`` en appliquant la matrice de chaque porte du circuit à une matrice d'identité. Le circuit ne peut contenir que *gates*, s'il contient des opérations *resets* ou *measure* une exception sera levée."

#: ../../tutorials/simulators/1_aer_provider.ipynb:422
msgid "Simulating a quantum circuit unitary"
msgstr "Simulation d'un circuit quantique unitaire"

#: ../../tutorials/simulators/1_aer_provider.ipynb:424
msgid "For this example we will return the unitary matrix corresponding to the previous examples circuit which prepares a bell state."
msgstr "Pour cet exemple, nous retournerons la matrice unitaire correspondant au circuit de l'exemple précédent qui prépare un état de Bell."

#: ../../tutorials/simulators/1_aer_provider.ipynb:492
msgid "Setting a custom initial unitary"
msgstr "Définition d'un unitaire initial personnalisé"

#: ../../tutorials/simulators/1_aer_provider.ipynb:494
msgid "We may also set an initial state for the ``UnitarySimulator``, however this state is an initial *unitary matrix* :math:`U_i`, not a statevector. In this case the returned unitary will be :math:`U \\cdot U_i` given by applying the circuit unitary to the initial unitary matrix."
msgstr "Nous pouvons également définir un état initial pour ``UnitarySimulator``, cet état est une *matrice unitaire* initiale :math:` U_i `, pas un vecteur d'état. Dans ce cas, l'unité retournée sera :math:` U \\cdot U_i ` donnée en appliquant le circuit unitaire à la matrice unitaire initiale."

#: ../../tutorials/simulators/1_aer_provider.ipynb:496
msgid "**Note:** \\* The initial unitary must be a valid unitary matrix :math:`U^\\dagger \\cdot U =\\mathbb{1}`. If not, an exception will be raised. \\* If a ``Qobj`` contains multiple experiments, the initial unitary must be the correct size for *all* experiments in the ``Qobj``, otherwise an exception will be raised."
msgstr "** Remarque: ** \\ * L'unitaire initial doit être une matrice unitaire valide :math:` U ^ \\dagger \\cdot U = \\mathbb{1}`. Si ce n'est pas le cas, une exception sera soulevée. \\ * Si un ``Qobj`` contient plusieurs expériences, le premier unitaire doit être de la taille correcte pour *toutes les expériences* dans le ``Qobj``, sinon une exception sera soulevée."

#: ../../tutorials/simulators/1_aer_provider.ipynb:498
msgid "Let us consider preparing the output unitary of the previous circuit as the initial state for the simulator:"
msgstr "Considérons la préparation de la sortie unitaire du circuit précédent comme état initial du simulateur:"

