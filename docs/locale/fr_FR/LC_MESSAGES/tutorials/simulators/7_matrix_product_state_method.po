msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-02 21:04+0000\n"
"PO-Revision-Date: 2023-03-02 21:44\n"
"Last-Translator: \n"
"Language: fr\n"
"Language-Team: French\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/simulators/7_matrix_product_state_method.po\n"
"X-Crowdin-File-ID: 9172\n"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:10
msgid "This page was generated from `tutorials/simulators/7_matrix_product_state_method.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/simulators/7_matrix_product_state_method.ipynb`__."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:9
#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:26
msgid "Matrix product state simulation method"
msgstr "Méthode de simulation d'état du produit de la matrice"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:12
msgid "Simulation methods"
msgstr "Méthodes de simulation"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:14
msgid "The ``AerSimulator`` has several simulation methods including ``statevector``, ``stabilizer``, ``extended_stabilizer`` and ``matrix_product_state``. Each of these determines the internal representation of the quantum circuit and the algorithms used to process the quantum operations. They each have advantages and disadvantages, and choosing the best method is a matter of investigation. In this tutorial, we focus on the ``matrix product state simulation method``."
msgstr "``AerSimulator``dispose de plusieurs méthodes de simulation, dont ``stateVector``, ``stabilizer``, ``extended_stabilizer`` et ``matrix_product_state``. Chacune de ces méthodes détermine la représentation interne du circuit quantique et les algorithmes utilisés pour traiter les opérations quantiques. Ils ont chacun des avantages et des inconvénients, et le choix de la meilleure méthode est une question d'expérience. Dans ce tutoriel, nous nous concentrons sur la \"méthode de simulation par produit de matrices``."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:28
msgid "This simulation method is based on the concept of ``matrix product states``. This structure was initially proposed in the paper *Efficient classical simulation of slightly entangled quantum computations* by Vidal in https://arxiv.org/abs/quant-ph/0301063. There are additional papers that describe the structure in more detail, for example *The density-matrix renormalization group in the age of matrix product states* by Schollwoeck https://arxiv.org/abs/1008.3477."
msgstr "Cette méthode de simulation est basée sur le concept de ``produits matriciels``. Cette structure a d'abord été proposée dans le document *Efficient classical simulation of slightly entangled quantum computations* par Vidal dans https://arxiv.org/abs/quant-ph/0301063. Il existe des documents additionnels qui décrivent la structure de façon plus détaillée, par exemple *Le groupe de renormalisation de la matrice de densité à l'ère des produits matriciels d'états* par Schollwoeck https://arxiv.org/abs/1008.3477."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:39
msgid "A pure quantum state is usually described as a state vector, by the expression :math:`|\\psi\\rangle = \\sum_{i_1=0}^1 {\\ldots} \\sum_{i_n=0}^1 c_{i_1 \\ldots i_n} |i_i\\rangle {\\otimes} {\\ldots} {\\otimes} |i_n\\rangle`."
msgstr "Un état quantique pur est généralement décrit comme un vecteur d'état, par l'expression :math:`|\\psi\\rangle = \\sum_{i_1=0}^1 {\\ldots} \\sum_ {i_n= 0}^1 c_{i_1 \\ldots i_n } |i_i\\rangle {\\otimes} {\\ldots} {\\otimes} |i_n\\rangle`."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:41
msgid "The state vector representation implies an exponential size representation, regardless of the actual circuit. Every quantum gate operating on this representation requires exponential time and memory."
msgstr "La représentation du vecteur d'état implique une représentation de taille exponentielle, quel que soit le circuit réel. Chaque porte quantique fonctionnant sur cette représentation nécessite un temps et une mémoire exponentiels."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:43
msgid "The matrix product state (MPS) representation offers a local representation, in the form: :math:`\\Gamma^{[1]} \\lambda^{[1]} \\Gamma^{[2]} \\lambda^{[2]}\\ldots \\Gamma^{[1]} \\lambda^{[n-1]} \\Gamma^{[n]}`, such that all the information contained in the :math:`c_{i_1 \\ldots i_n}`, can be generated out of the MPS representation."
msgstr "La représentation de l'état du produit matriciel (MPS) offre une représentation locale, sous la forme : :math:`\\Gamma^{[1]} \\lambda^{[1]} \\Gamma^{[2]} \\lambda^{[2]} \\ldots \\Gamma^{[1]} \\lambda^{[n-1]} \\Gamma^{[n]}`, de sorte que toutes les informations contenues dans :math:`c_{i_1 \\ldots i_n }` peuvent être générées à partir de la représentation MPS."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:54
msgid "Every :math:`\\Gamma^{[i]}` is a tensor of complex numbers that represents qubit :math:`i`. Every :math:`\\lambda^{[i]}` is a matrix of real numbers that is used to normalize the amplitudes of qubits :math:`i` and :math:`i+1`. Single-qubit gates operate only on the relevant tensor."
msgstr "Chaque :math:`\\Gamma^{[i]}` est un tenseur de nombres complexes qui représente le qubit :math:`i`. Chaque :math:`\\lambda^{[i]}` est une matrice de nombres réels qui est utilisée pour normaliser les amplitudes des qubits :math:`i` et :math:`i+1`. Les portes mono-qubit fonctionnent uniquement sur le tenseur approprié."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:56
msgid "Two-qubit gates operate on consecutive qubits :math:`i` and :math:`i+1`. This involves a tensor-contract operation over :math:`\\lambda^{[i-1]}`, :math:`\\Gamma^{[i-1]}`, :math:`\\lambda^{[i]}`, :math:`\\Gamma^{[i+1]}` and :math:`\\lambda^{[i+1]}`, that creates a single tensor. We apply the gate to this tensor, and then decompose back to the original structure. This operation may increase the size of the respective tensors. Gates that involve two qubits that are not consecutive, require a series of swap gates to bring the two qubits next to each other and then the reverse swaps."
msgstr "Les portes deux qubit fonctionnent sur des qubits consécutifs :math:`i` et :math:`i+1`. Il s'agit d'une opération de tenseur sur :math:`\\lambda^{[i-1]}`, :math:`\\Gamma^{[i-1]}`, :math:` \\lambda ^ {[i]} `, :math:`\\Gamma^{[i+1]}` et :math:`\\lambda^{[i+1]}`, qui crée un tenseur unique. Nous appliquons la porte à ce tenseur, puis nous décomposons à la structure originale. Cette opération peut augmenter la taille des tenseurs respectifs. Les portes qui impliquent deux qubits qui ne sont pas consécutifs, nécessitent une série de portes d'échange pour amener les deux qubits les uns à côté des autres, puis les swaps inverse."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:59
msgid "In the worst case, the tensors may grow exponentially. However, the size of the overall structure remains ‘small’ for circuits that do not have ‘many’ two-qubit gates. This allows much more efficient operations in circuits with relatively ‘low’ entanglement. Characterizing when to use this method over other methods is a subject of current research."
msgstr "Dans le pire des cas, les tenseurs peuvent croître de manière exponentielle. Cependant, la taille de la structure globale reste ‘petite’ pour les circuits qui n’ont pas de ‘nombreuses’ portes à deux qubits. Cela permet des opérations beaucoup plus efficaces dans les circuits avec une intrication relativement «faible». Caractériser quand utiliser cette méthode par rapport aux autres méthodes est un sujet de recherche en cours."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:71
msgid "Using the matrix product state simulation method"
msgstr "Utilisation de la méthode de simulation d'état du produit matriciel"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:73
msgid "The matrix product state simulation method is invoked in the ``AerSimulator`` by setting the simulation method. Other than that, all operations are controlled by the ``AerSimulator`` itself, as in the following example:"
msgstr "La méthode de simulation de l'état du produit matriciel est appelée dans ``AerSimulator`` en définissant la méthode de simulation. En dehors de cela, toutes les opérations sont contrôlées par le `` AerSimulator`` lui-même, comme dans l'exemple suivant:"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:138
msgid "To see the internal state vector of the circuit we can use the ``save_statevector`` instruction. To return the full internal MPS structure we can also use the ``save_matrix_product_state`` instruction."
msgstr "Pour voir le vecteur d'état interne du circuit, nous pouvons utiliser l'instruction ``save_statevecteur``. Pour retourner la structure interne du MPS, nous pouvons également utiliser l'instruction ``save_matrix_product_state``."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:220
msgid "Running circuits using the matrix product state simulation method can be fast, relative to other methods. However, if we generate the state vector during the execution, then the conversion to state vector is, of course, exponential in memory and time, and therefore we don’t benefit from using this method. We can benefit if we only do operations that don’t require printing the full state vector. For example, if we run a circuit and then take measurement. The circuit below has 200 qubits. We create an ``EPR state`` involving all these qubits. Although this state is highly entangled, it is handled well by the matrix product state method, because there are effectively only two states."
msgstr "L'execution de circuits utilisant la méthode de simulation d'état du produit de la matrice peut être rapide, par rapport aux autres méthodes. Cependant, si nous générons le vecteur d'état pendant l'exécution, alors la conversion en vecteur d'état est, bien sûr, exponentielle en mémoire et en temps, et par conséquent, nous ne bénéficions pas de cette méthode. Nous pouvons en bénéficier si nous ne faisons que des opérations qui ne nécessitent pas d’imprimer la totalité du vecteur d’état. Par exemple, si nous exécutons un circuit et que nous prenons ensuite des mesures, le circuit ci-dessous a 200 qubits. Nous créons un état ``EPR`` impliquant tous ces qubits. Bien que cet état soit fortement intriqué, il est bien géré par la méthode d'état du produit de la matrice, car il n'y a effectivement que deux états."

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:223
msgid "We can handle more qubits than this, but execution may take a few minutes. Try running a similar circuit with 500 qubits! Or maybe even 1000 (you can get a cup of coffee while waiting)."
msgstr "Nous pouvons gérer plus de qubits que cela, mais l'exécution peut prendre quelques minutes. Essayez de faire tourner un circuit similaire avec 500 qubits ! Ou peut-être même 1000 (vous pouvez prendre une tasse de café en attendant)."

