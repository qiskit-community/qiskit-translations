msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-07 17:08+0000\n"
"PO-Revision-Date: 2021-04-07 18:24\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/09_textbook_algorithms.po\n"
"X-Crowdin-File-ID: 9460\n"
"Language: fr_FR\n"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:10
msgid "This page was generated from `tutorials/algorithms/09_textbook_algorithms.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/algorithms/09_textbook_algorithms.ipynb`__."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/09_textbook_algorithms.ipynb>`_."
msgstr "Exécuter en mode interactif dans le `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/09_textbook_algorithms.ipynb>`_."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:9
msgid "Textbook and Shor’s algorithms"
msgstr "L'algorithme de Shor dans le manuel qiskit"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:11
msgid "Qiskit contains implementations of the well known textbook quantum algorithms such as the `Deutsch-Jozsa algorithm <https://qiskit.org/textbook/ch-algorithms/deutsch-jozsa.html>`__, the `Bernstein-Vazirani algorithm <https://qiskit.org/textbook/ch-algorithms/bernstein-vazirani.html>`__ and `Simon’s algorithm <https://qiskit.org/textbook/ch-algorithms/simon.html>`__."
msgstr "Qiskit contient des implémentations des algorithmes quantiques connus tels que l'algorithme \"Deutsch-Jozsa <https://qiskit.org/textbook/ch-algorithms/deutsch-jozsa.html>` __, l'algorithme\" Bernstein-Vazirani <https://qiskit.org/textbook/ch-algorithms/bernstein-vazirani.html>` __ et l'algorithme de Simon <https://qiskit.org/textbook/ch-algorithms/simon.html>` __."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:13
msgid "Qiskit also has an implementation of `Shor’s algorithm <https://qiskit.org/textbook/ch-algorithms/shor.html>`__."
msgstr "Qiskit dispose également d'une implémentation de l'algorithme de `Shor <https://qiskit.org/textbook/ch-algorithms/shor.html>`__."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:15
msgid "The preceding references have detailed explanations and build-out of circuits whereas this notebook has examples with the pre-built algorithms in Qiskit that you can use for experimentation and education purposes."
msgstr "Les références précédentes ont des explications détaillées et une construction de circuits tandis que ce bloc-note a des exemples avec les algorithmes préconfigurés de Qiskit que vous pouvez utiliser à des fins d'expérimentation et de formation."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:42
msgid "Deutsch-Jozsa algorithm"
msgstr "Algorithme de Deutsch-Jozsa"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:44
msgid "Lets start with the `Deutsch-Jozsa algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.DeutschJozsa.html>`__ which can determine if a function is ``'balanced'`` or ``'constant'`` given such a function as input. We can experiment with it in Qiskit using an oracles created from a truth tables. So for example, we can create a ``TruthTableOracle`` instance as follows."
msgstr "Commençons par l'algorithme `Deutsch-Jozsa <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.DeutschJozsa.html>`__ qui peut déterminer si une fonction est ``'équilibrée'`` ou ``'constante'``. Nous pouvons l’expérimenter dans Qiskit en utilisant un oracle créé à partir d’une table de vérité. Ainsi, par exemple, nous pouvons créer une instance ``TruthTableOracle`` comme suit."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:66
msgid "As shown, the truthtable is specified with the ``bitstr`` containing values of all entries in the table. It has length :math:`8`, so the corresponding truth table is of :math:`3` input bits. We can of course see that this truth table represents a ``'balanced'`` function as half of values are :math:`1` and the other half :math:`0`."
msgstr "Comme indiqué, la table de vérité est spécifiée avec les valeurs ``bitstr`` contenant toutes les entrées. La table de vérité a une longueur de :math:`8`, donc elle correspond à :math:`3` bits d'entrée. Nous pouvons bien sûr constater que cette table de vérité représente une fonction ``'équilibrée'`` car la moitié des valeurs sont :math:`1` et l'autre moitié :math:`0`."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:68
msgid "It might seem like a moot point running Deutsch-Jozsa on a truthtable as the function outputs are literally listed as the truthtable’s values. The intention is to create an oracle circuit whose groundtruth information is readily available to us but obviously not to the quantum Deutsch-Jozsa algorithm that is to act upon the oracle circuit. In more realistic situations, the oracle circuit would be provided as a blackbox to the algorithm."
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:70
msgid "Above said, we can inspect the circuit corresponding to the function encoded in the ``TruthTableOracle`` instance."
msgstr "Comme dit ci-dessus, nous pouvons inspecter le circuit correspondant à la fonction codée dans l'instance de ``TruthTableOracle``."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:100
msgid "As seen, the :math:`v_i`\\ ’s correspond to the 3 input bits; the :math:`o_0` is the oracle’s output qubit; the :math:`a_0` is an ancilla qubit."
msgstr "Comme on l'a vu, les :math:`v_i` correspondent aux 3 bits d'entrée ; le :math:`o_0` est le qubit de sortie de l'oracle ; le :math:`a_0` est un qubit ancillaire."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:102
msgid "Next we can simply create a ``DeutschJozsa`` instance using the oracle, and run it to check the result."
msgstr "Ensuite nous pouvons simplement créer une instance de ``DeutschJozsa`` en utilisant l'oracle, et l'exécuter pour vérifier le résultat."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:145
msgid "We can of course quickly put together another example for a ``'constant'`` function, as follows."
msgstr "Nous pouvons bien sûr rapidement rassembler un autre exemple pour une fonction ``'constante'`` comme suit."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:191
msgid "Bernstein-Vazirani algorithm"
msgstr "Algorithme de Bernstein-Vazirani"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:193
msgid "Next the `Bernstein-Vazirani algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.BernsteinVazirani.html>`__ which tries to find a hidden string. Again, for the example, we create a TruthTableOracle instance."
msgstr "Ensuite, l'algorithme de `Bernstein-Vazirani <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.BernsteinVazirani.html>`__ qui essaie de trouver une chaîne cachée. Encore une fois, pour les besoins de l'exemple, nous créons une instance de ``TruthTableOracle``."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:215
msgid "As shown, the truthtable is specified with the ``bitstr`` containing values of all entries in the table. It has length :math:`8`, so the corresponding truth table is of :math:`3` input bits. The truthtable represents the function mappings as follows:"
msgstr "Comme indiqué, la table de vérité est spécifiée avec les valeurs ``bitstr`` contenant toutes les entrées. La table de vérité a une longueur de :math:`8`, donc elle correspond à :math:`3` bits d'entrée. La table de vérité représente la fonction comme suit:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:217
msgid ":math:`\\mathbf{a} \\cdot 000 \\mod 2 = 0`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:218
msgid ":math:`\\mathbf{a} \\cdot 001 \\mod 2 = 0`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:219
msgid ":math:`\\mathbf{a} \\cdot 010 \\mod 2 = 1`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:220
msgid ":math:`\\mathbf{a} \\cdot 011 \\mod 2 = 1`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:221
msgid ":math:`\\mathbf{a} \\cdot 100 \\mod 2 = 1`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:222
msgid ":math:`\\mathbf{a} \\cdot 101 \\mod 2 = 1`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:223
msgid ":math:`\\mathbf{a} \\cdot 110 \\mod 2 = 0`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:224
msgid ":math:`\\mathbf{a} \\cdot 111 \\mod 2 = 0`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:226
msgid "And obviously the goal is to find the bitstring :math:`\\mathbf{a}` that satisfies all the inner product equations."
msgstr "Et bien sûr, l'objectif est de trouver le bitstring :math:`\\mathbf{a}` qui satisfait toutes les équations du produit scalaire."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:228
msgid "Lets again look at the oracle circuit, that now corresponds to the binary function encoded in the ``TruthTableOracle`` instance."
msgstr "Revoyons le circuit de l'oracle, qui correspond maintenant à la fonction binaire encodée dans l'instance ``TruthTableOracle``."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:258
msgid "Again the :math:`v_i`\\ ’s correspond to the 3 input bits; the :math:`o_0` is the oracle’s output qubit; the :math:`a_0` is an ancilla qubit."
msgstr "De nouveau, les :math:`v_i` correspondent aux 3 bits d'entrée ; le :math:`o_0` est le qubit de sortie de l'oracle ; le :math:`a_0` est un qubit ancillaire."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:260
msgid "Let us first compute the groundtruth :math:`\\mathbf{a}` classically:"
msgstr "Calculons d'abord la vraie valeur de :math:`\\mathbf{a}` de façon classique:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:305
msgid "Next we can create a ``BernsteinVazirani`` instance using the oracle, and run it to check the result against the groundtruth."
msgstr "Ensuite, nous pouvons créer une instance ``BernsteinVazirani`` en utilisant l'oracle, et l'exécuter pour comparer le résultat obtenu avec le résultat attendu."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:350
msgid "Simon’s algorithm"
msgstr "Algorithme de Simon"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:352
msgid "`Simon’s algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Simon.html>`__ is used to solve `Simon’s problem <https://en.wikipedia.org/wiki/Simon's_problem>`__. Once again, for the example, we create a TruthTableOracle instance, where the construction shows a different form."
msgstr "`L'algorithme de Simon <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Simon.html>` __ est utilisé pour résoudre le problème de `Simon <https://en.wikipedia.org/wiki/Simon's_problem>` __. Encore une fois, pour l'exemple, nous créons une instance de ``TruthTableOracle``, où la construction présente une forme différente."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:378
msgid "As shown, the truthtable is specified with three length-8 bitstrings, each containing the values of all entries for a particular output column in the table. Each bitstring has length :math:`8`, so the truthtable has :math:`3` input bits; There are :math:`3` bitstrings, so the truthtable has :math:`3` output bits."
msgstr "Comme on l'a montré, la table de vérité est spécifiée avec trois chaînes de caractères de longueur 8 qui contiennent chacune les valeurs de toutes les entrées pour une colonne de sortie particulière dans la table. Chaque chaîne de caractères a une longueur :math:`8`, donc la table de vérité a :math:`3` bits d'entrée; Il y a :math:`3` chaînes de caractères, donc la table de vérité a :math:`3` bits de sortie."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:380
msgid "The function :math:`f` represented by the truthtable is promised to be either 1-to-1 or 2-to-1. Our goal is to determine which. For the case of 2-to-1, we also need to compute the mask :math:`\\mathbf{s}`, which satisfies :math:`\\forall \\mathbf{x},\\mathbf{y}`: :math:`\\mathbf{x} \\oplus \\mathbf{y} = \\mathbf{s}` iff :math:`f(\\mathbf{x}) = f(\\mathbf{y})`. Apparently, if :math:`f` is 1-to-1, the corresponding mask :math:`\\mathbf{s} = \\mathbf{0}`."
msgstr "La fonction :math:`f` représentée par la table de vérité est garantie d'être soit 1-à-1 ou 2-à-1. Notre objectif est de déterminer lequel de ces 2 choix est vérifié. Pour le cas de 2-à-1, nous devons également calculer le masque :math:`\\mathbf{s}`, qui satisfait :math:`\\forall \\mathbf{x}, mathbf{y}`: :math:`\\mathbf{x} \\oplus \\mathbf{y} = \\mathbf{s}` si et seulement si :math:`f(\\mathbf{x}) = f(\\mathbf{y})`. De façon apparente, si :math:`f` est 1-à-1, le masque correspondant est :math:`\\mathbf{s} = \\mathbf{0}`."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:382
msgid "Let us first compute the groundtruth mask :math:`\\mathbf{s}` classically:"
msgstr "Calculons d'abord la vraie valeur du masque :math:`\\mathbf{s}` de façon classique:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:468
msgid "We can also quickly try a truthtable that represents a 1-to-1 function (i.e., the corresponding mask is :math:`\\mathbf{0}`), as follows."
msgstr "Nous pouvons également essayer rapidement une table de vérité qui représente une fonction de 1-à-1 (c'est-à-dire que le masque correspondant est :math:`\\mathbf{0}`), comme suit."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:523
msgid "Shor’s Factoring algorithm"
msgstr "L'algorithme de factorisation de Shor"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:525
msgid "`Shor’s Factoring algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Shor.html>`__ is one of the most well-known quantum algorithms and finds the prime factors for input integer :math:`N` in polynomial time. The algorithm implementation in Qiskit is simply provided a target integer to be factored and run, as follows:"
msgstr "`L'algorithme de factorisation de Shor <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Shor.html>`__ est l'un des algorithmes quantiques les plus connus et permet de trouver les facteurs premiers d'un entier :math:`N` en temps polynomial. L'implémentation de l'algorithme dans Qiskit n'a besoin que d'un entier cible à factoriser et s'exécute comme suit:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:570
msgid "Note: this implementation of Shor’s algorithm uses :math:`4n + 2` qubits, where :math:`n` is the number of bits representing the integer in binary. So in practice, for now, this implementation is restricted to factorizing small integers. Given the above value of N we compute :math:`4n +2` below and confirm the size from the actual circuit."
msgstr "Note: cette implémentation de l'algorithme de Shor’s utilise :math:`4n + 2`qubits, où :math:`n` est le nombre de bits représentant l'entier à factoriser lorsqu'il est écrit en binaire. Donc, dans la pratique, pour l'instant, cette implémentation est limitée à la factorisation de petits entiers. Étant donné la valeur ci-dessus de N, nous pouvons calculer :math:`4n +2` comme ci-dessous et confirmer le calcul à partir du circuit généré."

