msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 17:09+0000\n"
"PO-Revision-Date: 2021-08-19 16:02\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/04_vqe_advanced.po\n"
"X-Crowdin-File-ID: 9450\n"
"Language: fr_FR\n"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:10
msgid "This page was generated from `tutorials/algorithms/04_vqe_advanced.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/algorithms/04_vqe_advanced.ipynb`__."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:9
msgid "Advanced VQE usage"
msgstr "Utilisation avancée de VQE"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:11
msgid "There exist several parameters for configuring and using more advanced `VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html>`__ capabilities. This tutorial will cover the parameters such as ``initial point``, ``expectation`` and ``gradient``."
msgstr "Il existe plusieurs paramètres permettant de configurer et d'utiliser des fonctionnalités plus avancées de `VQE <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.html>`__ . Ce tutoriel couvrira les paramètres ``initial_point``, ``expectation`` et ``gradient``."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:13
msgid "It will also cover advanced simulator use such as using Aer with the Matrix Product State method."
msgstr "Il couvrira également l'utilisation avancée du simulateur, comme l'utilisation d'Aer avec la méthode Matrix Product State."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:39
msgid "Here we will use the same operator as used in the other VQE algorithms tutorials."
msgstr "Ici, nous utiliserons le même opérateur que dans les autres tutoriels d'algorithmes VQE."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:65
msgid "Initial point"
msgstr "Point initial"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:67
msgid "The ``initial_point`` parameter allows the optimization to begin at the given point, where the point is a list of parameters that will configure the ansatz. By default the initial point is ``None`` which means that VQE will choose one. The choice in in this case is if the supplied ansatz has a preferred point, based on the initial state provided to it, then this will be chosen, otherwise a random initial point that fits with any bounds the ansatz has will be chosen. If an initial point is supplied it will take priority though and be used - note though it must match in length to the number of parameters in the ansatz circuit."
msgstr "Le paramètre ``initial_point`` permet à l'optimisation de commencer au point donné, où le point est une liste de paramètres qui configureront l'ansatz. Par défaut, le point initial est ``None``, auquel cas VQE en choisira un. Le choix dans ce cas est : si l'ansatz fournie a un point préféré, basé sur l'état initial qui lui a été fourni, alors il sera choisi, sinon un point initial aléatoire satisfaisant les limites de l'ansatz sera choisi. Si un point initial est fourni, il prendra la priorité et sera utilisé - notez qu'il doit correspondre en longueur au nombre de paramètres dans le circuit de l'ansatz."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:70
msgid "Why to use a initial point? One reason would be if you have guess a reasonable starting point for the problem or perhaps know have information from a prior experiment."
msgstr "Pourquoi utiliser un point initial ? Si par exemple vous avez deviné un bon point de départ pour le problème ou si des expériences précédentes vous ont déjà permis d'en apprendre un peu sur la solution."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:72
msgid "To demonstrate the use let’s first simply repeat the first working example from the `algorithms introduction <01_algorithms_introduction.ipynb#A-complete-working-example>`__ tutorial to get a solution’s optimal point."
msgstr "Pour démontrer l'utilisation, nous allons tout d'abord répéter le premier exemple de travail à partir du tutoriel `l'introduction d'algorithmes <01_algorithms_introduction.ipynb#A-complete-working-example>`__ pour obtenir le point optimal d'une solution."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:155
msgid "Now we can take the ``optimal_point`` from the above result and use it as the ``initial_point`` here."
msgstr "Maintenant nous pouvons prendre le point optimal ``optimal_point`` depuis le résultat ci-dessus et l'utiliser comme ``initial_point`` ici."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:245
msgid "Here we see that result was arrived at much more quickly with ``optimizer_evals`` when it started from a random value when the initial point was not supplied (default of None)."
msgstr "Ici, nous voyons grâce à ``optimizer_evals`` que le résultat a été obtenu beaucoup plus rapidement en spécifiant le point initial qu'en en choisissant un au hasard (ce qui est le comportement par défaut lorsque l'on lui passe None)."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:247
msgid "Where this becomes useful for examples where we the solution to one problem can be used to for a guess for the solution to a very close similar problem. Chemistry is very good example where we change the inter-atomic distance(s) of molecule to plot a dissociation profile. When the distance changes are small we expect the solution to still be nearby the prior one. One technique is to simply use the optimal point from one solution as the starting point for the next step. Now more complex techniques are possible that do some extrapolation to compute an initial position based on prior solution(s) rather than directly use the prior solution."
msgstr "Cela devient utile pour des exemples où nous pouvons utiliser la solution à un problème pour trouver une solution à un problème similaire très proche. La chimie en est un très bon exemple, où nous changeons la distance interatomique de la molécule pour tracer un profil de dissociation. Lorsque les changements de distance sont faibles, nous nous attendons à ce que la solution reste à proximité de la précédente. L'une des techniques consiste à simplement utiliser le point optimal d'une solution comme point de départ pour l'étape suivante. De plus, des techniques plus complexes sont possibles, qui réalisent une extrapolation pour calculer une position initiale basée sur la(les) solution(s) antérieure(s) plutôt que d'utiliser directement la solution précédente."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:260
msgid "Expectation"
msgstr "Espérance"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:262
msgid "The energy of the Hamiltonian operator that VQE is working on is the expectation value when evaluated with the parameterized ansatz. To compute the expectation value VQE uses an instance of an `expectation <https://qiskit.org/documentation/apidoc/qiskit.opflow.expectations.html>`__ object. Such an instance may be supplied via the ``expectation`` parameter, or in the default case, where it has a value of ``None``, VQE will use the `ExpectationFactory <https://qiskit.org/documentation/stubs/qiskit.opflow.expectations.ExpectationFactory.html>`__ to create itself a suitable instance based on the supplied backend."
msgstr "L'énergie de l'opérateur Hamiltonien sur lequel VQE travaille est la valeur moyenne obtenue lors de l'évaluation de l'ansatz paramétrée. Pour calculer cette valeur moyenne, VQE utilise une instance d'un objet `expectation <https://qiskit.org/documentation/apidoc/qiskit.aqua.operators.expectations.html>`__. Une telle instance peut être fournie via le paramètre ``expectation``, ou via la valeur par défaut ``None``, auquel cas VQE utilisera la `ExpectationFactory <https://qiskit.org/documentation/stubs/qiskit.aqua.operators.expectations.ExpectationFactory.html>`__ pour créer une instance appropriée basée sur le backend fourni."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:265
msgid "For most cases letting VQE create a suitable instance is sufficient. However the Qiskit Aer aer_simulator supports a snapshot instruction that can be used in conjunction with the operator expectation computation. If used then the outcome is ideal, i.e. like the statevector simulator, and has no shot noise. Since people normally choose the aer_simulator to have shot noise (sampling noise), and be more like a real-device outcome, VQE has an ``include_custom`` flag that is passed on to the ExpectationFactory. When using Aer qasm simulator, and this is set ``True``, the factory will return ``AerPauliExpectation`` which uses the snapshot instruction, when ``False``, default, then the regular ``PauliExpectation`` is returned."
msgstr "Dans la plupart des cas, laisser VQE créer une instance appropriée est suffisant. Cependant, le simulateur aer_simulator de Qiskit Aer est capable de réaliser un instantané (snapshot) qui peut être utilisé en conjonction avec le calcul de valeur moyenne de l'opérateur. S'il est utilisé alors le résultat est idéal, c'est-à-dire comme ce que l'on aurait obtenu avec le simulateur statevector, et n'a pas de bruit dû aux mesures. Puisque le simulateur aer_simulator est souvent choisi pour avoir ce bruit de mesure (bruit d'échantillonnage) et être plus proche d'un résultat matériel réel, VQE a un flag ``include_custom`` qui est passé à l'ExpectationFactory. Lorsque vous utilisez le simulateur Aer aer_simulator et que le paramètre ``include_custom`` est défini à ``True``, l'ExpectationFactory retournera ``AerPauliExpectation`` qui utilise l'instantané, tandis que la ``PauliExpectation`` normale sera renvoyée s'il est défini à ``False``."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:268
msgid "The following example shows ``include_custom=True`` where the outcome matches the statevector simulator. In fact it can be better/faster to do this than use the statevector_simulator directly. This is because in the latter case when the Hamiltonian is a sum of Paulis it must be converted to matrix form, and this is avoided when using the snapshot instruction done when include_custom is True."
msgstr "L'exemple suivant montre ``include_custom=True`` où le résultat correspond au simulateur statevector. En fait, il peut être mieux/plus rapide de le faire que d'utiliser directement le simulateur statevector_simulator. C'est parce que dans ce dernier cas lorsque le Hamiltonien est une somme de Paulis, il doit être converti en une matrice, ce qui est évité lors de l'utilisation de l'instruction de snapshot lorsque include_custom est True."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:350
msgid "In case you have doubts here is the aer_simulator again but include_custom has been left to default to False. The optimization ended abruptly, presumably due to the shot noise confusing the SLSQP optimizer."
msgstr "Si vous doutez de ce fait, voici de nouveau le simulateur ``aer_simulator``, cette fois-ci dans le cas où ``include_custom`` a été laissé par défaut à ``False``. L'optimisation s'est arrêtée brusquement, probablement à cause du bruit dû à ma mesure qui perturbe l'optimiseur SLSQP."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:443
msgid "Changing the optimizer to SPSA, which is designed to work in noisy environments, gets us a better result. Though the noise has affected the outcome so it’s not as accurate."
msgstr "Changer l'optimiseur en SPSA, qui est conçu pour fonctionner dans des environnements bruités, nous donne un meilleur résultat, bien que le bruit ait affecté celui-ci, il n’est donc pas aussi précis."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:524
msgid "As mentioned above, an expectation object can be explicitly given (so the internal ``ExpectationFactory`` and include_custom are never used/needed. Below we create an ``AerPauliExpectation`` and pass this to VQE. We can see the result matches that above where we set include_custom to True and let VQE create its own expectation object."
msgstr "Comme mentionné ci-dessus, un objet expectation peut être explicitement donné (donc les ``ExpectationFactory`` internes et include_custom ne sont jamais utilisés ni nécessaires). Ci-dessous nous créons une instance de ``AerPauliExpectation`` et passons celle-ci à VQE. Nous pouvons voir que les résultats correspondent à ceux obtenus plus haut, où nous définissons include_custom à True et laissons VQE créer son propre objet expectation."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:606
msgid "By default, the ``PauliExpectation`` object, that would have be chosen when include_custom is False (or when using Aer aer_simulator, or a real device) groups Paulis into commuting sets. This is efficient as it runs less circuits to compute the expectation. However, if for some reason you wanted to run a circuit for each Pauli then then grouping can be turned off when constructing the PauliExpectation. You need to explicitly pass in such an expectation instance to VQE to have it work this way though as shown below."
msgstr "Par défaut, l'objet ``PauliExpectation``, qui aurait été choisi lorsque ``include_custom`` est ``False`` (ou lors de l'utilisation du simulateur ``aer_simulator`` de BasicAer, ou sur un appareil réel) regroupe les Paulis dans des ensembles qui commutent deux à deux. L'efficacité de cette méthode est assurée par le fait que moins de circuits doivent être exécutés pour calculer la valeur moyenne. Cependant, si pour une raison quelconque vous vouliez exécuter un circuit pour chaque Pauli, alors le regroupement peut être désactivé lors de la construction de l'instance de PauliExpectation. Vous devez pour cela passer explicitement l'instance à VQE en utilisant le paramètre ``expectation``, comme montré ci-dessous."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:690
msgid "Gradient"
msgstr "Gradient"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:692
msgid "Optimizers that use a gradient-based technique can be supplied with a user defined gradient that will be used instead of their default gradient computation which is usually done by simple finite difference. Gradients are passed indirectly via to the optimizer via its ``gradient`` parameter."
msgstr "Les optimiseurs qui utilisent une technique basée sur le gradient peuvent être créés avec un gradient défini par l'utilisateur qui sera utilisé à la place de leur calcul de gradient par défaut, qui est généralement calculé par simple différence finie. Les gradients sont passés indirectement via l'optimiseur au moyen de son paramètre ``gradient``."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:694
msgid "As the use of a user supplied ``gradient`` was shown in the `Monitoring VQE Convergence <02_vqe_convergence.ipynb#Using-Gradient-framework>`__ tutorial I will simply refer you there. Also the `Gradients framework <../operators/02_gradients_framework.ipynb>`__ tutorial has much more about the gradients themselves."
msgstr "Comme l'utilisation d'un ``gradient`` fourni par un utilisateur a été montrée dans le tutoriel `Monitoring VQE Convergence <02_vqe_convergence.ipynb#Using-Gradient-framework>`__ je vais simplement vous y référer. Le `Gradients framework <../operators/02_gradients_framework.ipynb>`__ a aussi beaucoup plus d'informations à propos des gradients eux-mêmes."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:706
msgid "Quantum Instance and advanced simulation"
msgstr "Instance Quantum et simulation avancée"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:708
msgid "While you may be familiar with passing a QuantumInstancen created from a ``aer_simulator_statevector`` a ``aer_simulator`` or real device backend, it is possible to use the advanced simulation modes of Aer too when applicable. For instance we can easily use the Aer `Matrix Product State <../simulators/7_matrix_product_state_method.ipynb>`__ method, that has the potential to scale to larger numbers of qubits."
msgstr "Bien que vous soyez peut-être familiers avec le fait de passer une instance de QuantumInstance créée à partir d'un ``statevector_simulator`` ou d'un ``aer_simulator`` ou d'un backend permettant d'accéder à une machine réelle, il est également possible d'utiliser les modes de simulation avancés d'Aer. Par exemple, nous pouvons facilement utiliser la méthode Aer `Matrix Product State <../simulators/7_matrix_product_state_method.ipynb>`__, qui a le potentiel de simuler un plus grand nombre de qubits."

