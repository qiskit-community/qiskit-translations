msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-27 21:18+0000\n"
"PO-Revision-Date: 2021-02-15 13:32\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/08_grover_examples.po\n"
"X-Crowdin-File-ID: 9458\n"
"Language: fr_FR\n"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:10
msgid "This page was generated from `tutorials/algorithms/08_grover_examples.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/algorithms/08_grover_examples.ipynb`__."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/08_grover_examples.ipynb>`_."
msgstr "Exécuter en mode interactif dans le `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/08_grover_examples.ipynb>`_."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:9
msgid "Grover’s algorithm examples"
msgstr "Exemples avec l'algorithme de Grover"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:11
msgid "This notebook has examples demonstrating how to use the Qiskit `Grover <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Grover.html>`__ search algorithm, with different oracles."
msgstr "Ce bloc-notes présente des exemples montrant comment utiliser l'algorithme de recherche Qiskit `Grover <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Grover.html>'__, en utilisant différents oracles."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:39
msgid "Finding solutions to 3-SAT problems"
msgstr "Trouver des solutions aux problèmes 3-SAT"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:41
msgid "Let’s look at an example 3-Satisfiability (3-SAT) problem and walk-through how we can use Quantum Search to find its satisfying solutions. 3-SAT problems are usually expressed in `Conjunctive Normal Forms (CNF) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ and written in the `DIMACS-CNF <http://www.satcompetition.org/2009/format-benchmarks2009.html>`__ format. For example:"
msgstr "Examinons un exemple de probleme de satisfaction 3-SAT et la façon dont nous pouvons utiliser l'algorithme de recherche quantique pour trouver ses solutions. Les problèmes 3-SAT sont habituellement exprimés dans le format `Conjonctive Normal Forms (CNF) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ et écrit dans le format `DIMACS-CNF <http://www.satcompetition.org/2009/format-benchmarks2009.html>` __. Par exemple :"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:70
msgid "The CNF of this 3-SAT instance contains 3 variables and 5 clauses:"
msgstr "Le CNF de cette instance 3-SAT contient 3 variables et 5 clauses :"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:72
msgid ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"
msgstr ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:74
msgid "It can be verified that this 3-SAT problem instance has three satisfying solutions:"
msgstr "On peut vérifier que l'instance 3-SAT présente trois solutions satisfaisantes :"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:76
msgid ":math:`(v_1, v_2, v_3) = (T, F, T)` or :math:`(F, F, F)` or :math:`(T, T, F)`"
msgstr ":math:`(v_1, v_2, v_3) = (T, F, T)` or :math:`(F, F, F)` or :math:`(T, T, F)`"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:78
msgid "Or, expressed using the DIMACS notation:"
msgstr "Ou, exprimée à l'aide de la notation DIMACS :"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:80
msgid "``1 -2 3``, or ``-1 -2 -3``, or ``1 2 -3``."
msgstr "``1 -2 3``, ou ``-1 -2 -3``, ou ``1 2 -3``."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:82
msgid "With this example problem input, we then create the corresponding ``oracle`` for our ``Grover`` search. In particular, we use the ``LogicalExpressionOracle`` component, which supports parsing DIMACS-CNF format strings and constructing the corresponding oracle circuit."
msgstr "Avec cet exemple d'entrée de problème, nous créons ensuite l'``oracle`` correspondant pour notre recherche ``Grover``. En particulier, nous utilisons le composant ``LogicalExpressionOracle``, qui prend en charge l'analyse syntaxique des chaînes de format DIMACS-CNF et la construction du circuit oracle correspondant."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:103
msgid "The ``oracle`` can now be used to create an Grover instance:"
msgstr "L'``oracle`` peut désormais être utilisé pour créer une instance de Grover:"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:124
msgid "We can then configure the backend and run the Grover instance to get the result:"
msgstr "Nous pouvons alors configurer le backend et exécuter l'instance de Grover pour obtenir le résultat :"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:167
msgid "As seen above, a satisfying solution to the specified 3-SAT problem is obtained. And it is indeed one of the three satisfying solutions."
msgstr "Comme on l'a vu ci-dessus, une solution satisfaisante au problème du 3-SAT est obtenue, et c'est en effet l'une des trois solutions satisfaisantes."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:169
msgid "Since we used the ``'qasm_simulator'``, the complete measurement result is also returned, as shown in the plot below, where it can be seen that the binary strings ``000``, ``011``, and ``101`` (note the bit order in each string), corresponding to the three satisfying solutions all have high probabilities associated with them."
msgstr "Puisque nous avons utilisé le ``'qasm_simulator'``, le résultat de la mesure est également retourné, comme indiqué dans le graphique ci-dessous, où il peut être vu que les chaînes binaires ``000``, ``011``, et ``101`` (notez l'ordre des bits dans chaque chaîne), correspondant aux trois solutions satisfaisantes ont toutes des probabilités élevées associées avec elles."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:200
msgid "Boolean Logical Expressions"
msgstr "Expressions Logiques Booléennes"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:202
msgid "Qiskit’s ``Grover`` can also be used to perform Quantum Search on an ``Oracle`` constructed from other means, in addition to DIMACS. For example, the ``LogicalExpressionOracle`` can actually be configured using arbitrary Boolean logical expressions, as demonstrated below."
msgstr "``Grover`` peut également être utilisé pour effectuer une recherche quantique sur un ``Oracle`` construit à partir d'autres moyens, en plus de DIMACS. Par exemple, ``LogicalExpressionOracle`` peut en fait être configuré à l'aide d'expressions logiques booléennes arbitraires, comme indiqué ci-dessous."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:236
msgid "In the example above, the input Boolean logical expression ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` should be quite self-explanatory, where ``^``, ``~``, and ``&`` represent the Boolean logical XOR, NOT, and AND operators, respectively. It should be quite easy to figure out the satisfying solution by examining its parts: ``w ^ x`` calls for ``w`` and ``x`` taking different values; ``~(y ^ z)`` requires ``y`` and ``z`` be the same; ``x & y & z`` dictates all three to be ``True``. Putting these together, we get the satisfying solution ``(w, x, y, z) = (False, True, True, True)``, which our ``Grover``\\ ’s result agrees with."
msgstr "Dans l'exemple ci-dessus, l'expression logique en entrée Booléenne ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` devrait être assez explicite, où les opérateurs ``^``, ``~`` et ``&`` représentent respectivement les opérateurs Boolean logical XOR, NOT et AND. Il devrait être assez facile de trouver la solution satisfaisante en examinant ses composantes : ``w ^ x`` nécéssite que ``w`` et ``x`` aient des valeurs différents ; ``~(y ^ z)`` impose que que ``y`` et ``z`` aient la même valeur; ``x & y & z`` impose que les trois valeurs soient à ``True``. En combinant ces trois contraintes nous obtenons la solution satisfaisante ``(w, x, y, z) = (False, True, True, True)``, an accord avec notre résultat obtenu avec ``Grover``."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:249
msgid "TruthTable Oracles"
msgstr "Oracles à Table de Vérité"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:251
msgid "With Qiskit, ``Oracle``\\ s can also be constructed from truth tables, meaning we can also perform Quantum Search on truth tables. Even though this might seem like a moot point as we would be essentially searching for entries of a truth table with the :math:`1` value, it’s a good example for demonstrative purpose."
msgstr "Avec Qiskit, les `` Oracle``\\ s peuvent également être construit à partir de tables de vérité, ce qui signifie que nous pouvons également effectuer des recherches quantiques sur les tables de vérité. Même si cela peut sembler un point sans objet puisque nous rechererions essentiellement des entrées d'une table de vérité avec la valeur :math:`1`, c'est un bon exemple à des fins de démonstration."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:272
msgid "As shown, the ``truthtable`` is specified with a bitstring containing values of all entries in the table. It has length :math:`16`, so the corresponding truth table is of :math:`4` input bits. Since the very first and last values are :math:`1`, the corresponding truth table target entries are ``0000`` and ``1111``."
msgstr "Comme indiqué, la valeur ``truthtable`` est spécifiée avec une chaîne de bits contenant les valeurs de toutes les entrées de la table. Il a une longueur de :math:`16`, donc la table de vérité correspondante a :math:`4` bits en entrée. Etant donné que les toutes premières et dernières valeurs sont :math:`1`, les entrées de la table de vérité correspondante sont ``0000`` et ``1111``."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:274
msgid "Next, we can setup the ``Oracle`` and ``Grover`` objects to perform Quantum Search as usual."
msgstr "Ensuite, nous pouvons configurer les objets ``Oracle`` et ``Grover`` pour effectuer l'algorithme de recherche quantique."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:307
msgid "As seen in the above plot the search result coincides with our expectation."
msgstr "Comme nous l'avons vu dans le graphique ci-dessus, le résultat de la recherche coïncide avec nos attentes."

