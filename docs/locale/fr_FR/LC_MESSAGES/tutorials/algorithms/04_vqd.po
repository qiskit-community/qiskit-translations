msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:25+0000\n"
"PO-Revision-Date: 2023-08-14 19:44\n"
"Last-Translator: \n"
"Language: fr\n"
"Language-Team: French\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/algorithms/04_vqd.po\n"
"X-Crowdin-File-ID: 9933\n"

#: ../../tutorials/algorithms/04_vqd.ipynb:10
msgid "This page was generated from `tutorials/algorithms/04_vqd.ipynb`__."
msgstr "Cette page a été générée et traduite à partir de `tutorials/algorithms/04_vqd.ipynb`__."

#: ../../tutorials/algorithms/04_vqd.ipynb:9
msgid "Variational Quantum Deflation (VQD) Algorithm"
msgstr "Algorithme de déflation quantique variante (Variational Quantum Deflation, VQD)"

#: ../../tutorials/algorithms/04_vqd.ipynb:11
msgid "This notebook demostrates how to use Qiskit's implementation of the `Variational Quantum Deflation (VQD) <https://qiskit.org/documentation/stubs/qiskit.algorithms.eigensolvers.VQD.html>`__ algorithm for computing higher energy states of a Hamiltonian, as introduced in this `reference paper <https://arxiv.org/abs/1805.08138>`__."
msgstr "Ce bloc-notes montre comment utiliser l'implémentation de Qiskit de l'algorithme `Variational Quantum Deflation (VQD) <https://qiskit.org/documentation/stubs/qiskit.algorithms.eigensolvers.VQD.html>`__ pour calculer des états d'énergie plus élevés d'un Hamiltonien, tel qu'introduit dans ce `document de référence <https://arxiv.org/abs/1805.08138>`__."

#: ../../tutorials/algorithms/04_vqd.ipynb:23
msgid "Introduction"
msgstr "Introduction"

#: ../../tutorials/algorithms/04_vqd.ipynb:25
msgid "VQD is a quantum algorithm that uses a variational technique to find the *k* eigenvalues of the Hamiltonian *H* of a given system."
msgstr "VQD est un algorithme quantique qui utilise une technique variationnelle pour trouver les valeurs propres *k* et l'Hamiltonien *H* d'un système donné."

#: ../../tutorials/algorithms/04_vqd.ipynb:27
msgid "The algorithm computes excited state energies of generalized hamiltonians by optimizing over a modified cost function. Each successive eigenvalue is calculated iteratively by introducing an overlap term with all the previously computed eigenstates that must be minimized. This ensures that higher energy eigenstates are found."
msgstr "L'algorithme calcule les énergies d'état excitées des hamiltoniens généralisés en optimisant sur une fonction de coût modifiée. Chaque valeur propre successive est calculée itérativement en introduisant un terme de chevauchement avec tous les états propres précédemment calculés qui doivent être minimisés. Cela permet de trouver des états propres énergétiques plus élevés."

#: ../../tutorials/algorithms/04_vqd.ipynb:39
msgid "Complete working example for VQD"
msgstr "Exemple d'implémentation complet de VQD"

#: ../../tutorials/algorithms/04_vqd.ipynb:50
msgid "The first step of the VQD workflow is to create a qubit operator, ansatz and optimizer. For this example, you can use the H2 molecule, which should already look familiar if you have completed the previous VQE tutorials:"
msgstr "La première étape du VQD consiste à créer un qubit opérateur, ansatz et optimiseur. Pour cet exemple, vous pouvez utiliser la molécule H2, qui devrait déjà vous être familière si vous avez terminé les tutoriels VQE précédents :"

#: ../../tutorials/algorithms/04_vqd.ipynb:81
msgid "You can set up, for example, a ``TwoLocal`` ansatz with three qubits, and choose ``SLSQP`` as the optimization method."
msgstr "Vous pouvez configurer, par exemple, une ansatz ``TwoLocal`` avec trois qubits, et choisir ``SLSQP`` comme méthode d'optimisation."

#: ../../tutorials/algorithms/04_vqd.ipynb:117
msgid "The next step of the workflow is to define the required primitives for running ``VQD``. This algorithm requires two different primitive instances: one ``Estimator`` for computing the expectation values for the \"VQE part\" of the algorithm, and one ``Sampler``. The sampler will be passed along to the ``StateFidelity`` subroutine that will be used to compute the cost for higher energy states. There are several methods that you can use to compute state fidelities, but to keep things simple, you can use the ``ComputeUncompute`` method already available in ``qiskit.algorithm.state_fidelities``."
msgstr "La prochaine étape du workflow est de définir les primitives requises pour exécuter ``VQD``. Cet algorithme nécessite deux instances primitives différentes : un ``Estimator`` pour calculer les valeurs d'attentes pour la partie \"VQE\" de l'algorithme, et un ``Sampler``. L'échantillonneur sera passé à la sous-routine ``StateFidelity`` qui sera utilisée pour calculer le coût pour des états d'énergie plus élevés. Il y a plusieurs méthodes que vous pouvez utiliser pour calculer les fidélités d'état, mais pour garder les choses simples, vous pouvez utiliser la méthode ``ComputeUncompute`` déjà disponible dans ``qiskit. lgorithm.state_fidelities``."

#: ../../tutorials/algorithms/04_vqd.ipynb:144
msgid "In order to set up the VQD algorithm, it is important to define two additional inputs: the number of energy states to compute (``k``) and the ``betas`` defined in the original VQD paper. In this example, the number of states (``k``) will be set to three, which indicates that two excited states will be computed in addition to the ground state."
msgstr "Pour configurer l'algorithme VQD, il est important de définir deux entrées supplémentaires : le nombre d'états énergétiques à calculer (``k``) et les ``betas`` définis dans le papier VQD original. Dans cet exemple, le nombre d'états (``k``) sera défini à trois, qui indique que deux états excités seront calculés en plus de l'état fondamental."

#: ../../tutorials/algorithms/04_vqd.ipynb:146
msgid "The ``betas`` balance the contribution of each overlap term to the cost function, and they are an optional argument in the ``VQD`` construction. If not set by the user, they can be autoevaluated for input operators of type ``SparsePauliOp``. Please note that if you want to set your own ``betas``, you should provide a list of values of length ``k``."
msgstr "Les ``betas`` équilibrent la contribution de chaque terme de chevauchement à la fonction de coût, et sont un argument optionnel dans la construction ``VQD``. S'ils ne sont pas définis par l'utilisateur, ils peuvent être autoévalués pour les opérateurs d'entrée de type ``SparsePauliOp``. Veuillez noter que si vous souhaitez définir vos propres ``betas``, vous devez fournir une liste de valeurs de longueur ``k``."

#: ../../tutorials/algorithms/04_vqd.ipynb:168
msgid "You are almost ready to run the VQD algorithm, but let's define a callback first to store intermediate values:"
msgstr "Vous êtes presque prêt à exécuter l'algorithme VQD, mais définissons d'abord un callback pour stocker des valeurs intermédiaires :"

#: ../../tutorials/algorithms/04_vqd.ipynb:196
msgid "You can finally instantiate ``VQD`` and compute the eigenvalues for the chosen operator."
msgstr "Vous pouvez enfin instancier ``VQD`` et calculer les valeurs propres de l'opérateur choisi."

#: ../../tutorials/algorithms/04_vqd.ipynb:221
msgid "You can see the three state energies as part of the ``VQD`` result:"
msgstr "Vous pouvez voir les trois état d'énergies dans le résultat ``VQD``:"

#: ../../tutorials/algorithms/04_vqd.ipynb:266
msgid "And we can use the values stored by the callback to plot the energy convergence for each state:"
msgstr "Et nous pouvons utiliser les valeurs stockées par le callback pour tracer la convergence de l'énergie pour chaque état :"

#: ../../tutorials/algorithms/04_vqd.ipynb:312
msgid "This molecule can be solved exactly using the ``NumPyEigensolver`` class, which will give a reference value that you can compare with the ``VQD`` result:"
msgstr "Cette molécule peut être résolue exactement en utilisant la classe ``NumPyEigensolver``, qui donnera une valeur de référence que vous pouvez comparer avec le résultat du ``VQD`` :"

#: ../../tutorials/algorithms/04_vqd.ipynb:338
msgid "Let's see a comparison of the exact result with the previously computed ``VQD`` eigenvalues:"
msgstr "Voyons une comparaison du résultat exact avec les valeurs propres propres de ``VQD`` précédemment calculées:"

#: ../../tutorials/algorithms/04_vqd.ipynb:387
msgid "As you can see, the result from VQD matches the values from the exact solution, and extends VQE to also compute excited states."
msgstr "Comme vous pouvez le voir, le résultat de VQD correspond aux valeurs de la solution exacte, et étend VQE aux états excités."

