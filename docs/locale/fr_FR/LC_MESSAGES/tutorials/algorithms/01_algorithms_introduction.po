msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-07 16:27+0000\n"
"PO-Revision-Date: 2020-12-13 12:40\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/01_algorithms_introduction.po\n"
"X-Crowdin-File-ID: 9444\n"
"Language: fr_FR\n"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:10
msgid "This page was generated from `tutorials/algorithms/01_algorithms_introduction.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/algorithms/01_algorithms_introduction.ipynb`__."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/01_algorithms_introduction.ipynb>`_."
msgstr "Exécuter en mode interactif dans le `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/01_algorithms_introduction.ipynb>` _."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:9
msgid "An Introduction to Algorithms in Qiskit"
msgstr "Introduction aux algorithmes dans Qiskit"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:11
msgid "This is an introduction to algorithms in Qiskit and provides a high-level overview to help understand the various aspects of the functionality to get started. Other tutorials will provide more in-depth material, on given algorithms, and ways to use them etc."
msgstr "Il s'agit d'une introduction aux algorithmes dans Qiskit et fournit une vue d'ensemble de haut niveau pour aider à comprendre les différents aspects de la fonctionnalité pour commencer. D'autres didacticiels fourniront un matériel plus approfondi, sur des algorithmes donnés, et sur des façons de les utiliser, etc."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:23
msgid "How is the algorithm library structured?"
msgstr "Comment la bibliothèque d'algorithmes est-elle structurée ?"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:25
msgid "Qiskit provides a number of `Algorithms <https://qiskit.org/documentation/apidoc/qiskit.aqua.algorithms.html>`__ and they are grouped by category according to the task they can perform. For instance ``Minimum Eigensolvers`` to find the smallest eigen value of an operator, for example ground state energy of a chemistry Hamiltonian or a solution to an optimization problem when expressed as an Ising Hamiltonian. There are ``Classifiers`` for machine learning classification problems and ``Amplitude Estimators`` for value estimation that can be used say in financial applications. The full set of categories can be seen in the Algorithms documentation link above."
msgstr "Qiskit fournit un certain nombre d'`Algorithmes <https://qiskit.org/documentation/apidoc/qiskit.aqua.algorithms.html>`__ et ils sont regroupés par catégorie en fonction de la tâche qu'ils peuvent accomplir. Par exemple ``Minimum Eigensolvers`` pour trouver la plus petite valeur propre d'un opérateur, par exemple l'énergie de base d'une chimie Hamiltonienne ou une solution à un problème d'optimisation lorsqu'il est exprimé en tant qu'Hamiltonien d'Ising. Il y a des ``Classes`` pour les problèmes de classification d'apprentissage automatique et des ``Estimateurs d'amplitude`` pour l'estimation de la valeur qui peut être utilisée par exemple dans les applications financières. L'ensemble complet des catégories peut être vu dans le lien de documentation des algorithmes ci-dessus."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:28
msgid "Algorithms are configurable and often part of the configuration will be in the form of smaller building blocks, of which different instances of the building block type can be given. For instance with ``VQE``, the Variational Quantum Eigensolver, it takes a trial wavefunction, in the form of a ``QuantumCircuit`` and a classical optimizer among other things. Such building blocks can be found as `Components <https://qiskit.org/documentation/apidoc/qiskit.aqua.components.html>`__ and as circuits from the `Circuit Library <https://qiskit.org/documentation/apidoc/circuit_library.html>`__."
msgstr "Les algorithmes sont configurables et font souvent partie de la configuration sous la forme de blocs de construction plus petits, dont différentes instances du type de bloc de construction peuvent être données. Par exemple avec le ``VQE``, le Variational Quantum Eigensolver, il prend une fonction d'essai d'onde, sous la forme d'un ``QuantumCircuit`` et d'un optimiseur classique, entre autres. De tels blocs de construction peuvent être trouvés en tant que `Components <https://qiskit.org/documentation/apidoc/qiskit.aqua.components.html>`__ et en tant que circuits de la `Bibliothèque Circuit <https://qiskit.org/documentation/apidoc/circuit_library.html>`__."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:31
msgid "Let’s take a look at an example to construct a VQE instance. Here ``TwoLocal`` is the variational form (trial wavefunction), a parameterized circuit which can be varied, and ``SLSQP`` a classical optimizer. These are created as separate instances and passed to VQE when it is constructed. Trying, for example, a different classical optimizer, or variational form is simply a case of creating an instance of the one you want and passing it into VQE."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:59
msgid "Let’s draw the ansatz so we can see it’s a QuantumCircuit where θ[0] through θ[7] will be the parameters that are varied as VQE optimizer finds the minimum eigenvalue. We’ll come back to the parameters later in a working example below."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:125
msgid "But more is needed before we can run the algorithm so let’s get to that next."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:137
msgid "How to run an algorithm?"
msgstr "Comment exécuter un algorithme ?"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:139
msgid "In order to run an algorithm we need to have backend, a simulator or real device, on which the circuits that comprise the algorithm can be run. So for example we can use the ``statevector_simulator`` from the BasicAer provider."
msgstr "Pour exécuter un algorithme, nous devons avoir un arrière plan, un simulateur ou un appareil réel, sur lequel les circuits qui composent l'algorithme peuvent être exécutés. Ainsi, par exemple, nous pouvons utiliser le ``statevector_simulator`` du fournisseur BasicAer."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:162
msgid "Now a backend on its own does not have information on how you might want to run the circuits etc. For example how many shots, do you want a noise model, even options around transpiling the circuits. For this Qiskit Aqua has a `QuantumInstance <https://qiskit.org/documentation/stubs/qiskit.aqua.QuantumInstance.html>`__ which is provided both the backend as well as various settings around the circuit processing and execution so for instance:"
msgstr "Maintenant, un arrière plan seul ne dispose pas d'informations sur la façon dont vous pourriez vouloir exécuter les circuits, etc. Par exemple, combien de tirs, voulez-vous un modèle de bruit, même des options autour du transpileur pour les circuits. Pour cela Qiskit Aqua a un \" QuantumInstance <https://qiskit.org/documentation/stubs/qiskit.aqua.QuantumInstance.html>` __ qui est fourni à la fois avec l'arrière plan ainsi que divers réglages autour du circuit de traitement et d'exécution, par exemple:"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:186
msgid "Note: if you provide the backend directly then internally a QuantumInstance will be created from it, with default settings, so at all times the algorithms are working through a QuantumInstance."
msgstr "Note : si vous fournissez directement le backend, une instance QuantumInstance sera créée à partir de celui-ci, avec les paramètres par défaut, donc en tout temps les algorithmes fonctionnent à travers une QuantumInstance."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:188
msgid "So now we would be able to call the `run() <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.run.html>`__ method, which is common to all algorithms and returns a result specific for the algorithm. In this case since VQE is a MinimumEigensolver we could use the `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.compute_minimum_eigenvalue.html>`__ method. The latter is the interface of choice for the application modules, such as Chemistry and Optimization, in order that they can work interchangeably with any algorithm within the specific category."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:201
msgid "A complete working example"
msgstr "Voici un exemple complet"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:203
msgid "Let’s put what we have learned from above together and create a complete working example. VQE will find the minimum eigenvalue, i.e. minimum energy value of a Hamilitonian operator and hence we need such an operator for VQE to work with. Such an operator is given below. This was originally created by the Chemistry application module as the Hamiltonian for an H2 molecule at 0.735A interatomic distance. It’s a sum of Pauli terms as below, but for now I am not going to say anything further about it since the goal is to run the algorithm, but further information on operators can be found in other tutorials."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:231
msgid "So let’s build a VQE instance passing the operator, and a backend using a QuantumInstance, to the constructor. Now VQE does have setters so the operator and backend can also be passed later. Setting them later can be useful when creating an algorithm without this problem specific information and then later using it, say with the chemistry application module, which would create the operator for the specific chemistry problem being solved. which it has to do the same thing."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:233
msgid "Note: In order that you can run this notebook and see the exact same output the random number generator used throughout Aqua in aqua_globals, as well as the transpiler and simulator, via the QuantumInstance, are seeded. You do not have to do this but if want to be able to reproduce the exact same outcome each time then this is how it’s done."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:235
msgid "So let’s run VQE and print the result object it returns."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:319
msgid "From the above result we can see it took the optimizer ``72`` evaluations of parameter values until it found the minimum eigenvalue of ``-1.85727`` which is the electronic ground state energy of the given H2 molecule. The optimal parameters of the ansatz can also be seen which are the values that were in the ansatz at the minimum value."
msgstr "À partir du résultat ci-dessus, nous pouvons voir qu'il a pris les évaluations de l'optimiseur ``72`` des valeurs des paramètres jusqu'à ce qu'il trouve la valeur propre minimale de ``-1.85727`` qui est l'énergie de l'état fondamental électronique de la molécule H2 donnée. Les paramètres optimaux de l'ansatz peuvent également être vus et sont les valeurs qui étaient dans l'ansatz à la valeur minimale."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:331
msgid "Using VQE as a MinimumEigensolver"
msgstr "Utiliser VQE comme MinimumEigensolver"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:333
msgid "To close off let’s use the MinimumEigensolver interface and also create a VQE instance without supplying either the operator or QuantumInstance. We later set the QuantumInstance and finally pass the operator on the ``compute_minimum_eigenvalue`` method (though we could have passed it in earlier via the setter instead, as long as by the time VQE runs it has an operator to work on)."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:415
msgid "As the identical seeding was used as the prior example the result can be seen to be the same."
msgstr "Comme un amorçage identique a été utilisé comme l'exemple précédent, le résultat peut être considéré comme le même."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:426
msgid "This concludes this introduction to algorithms in Qiskit. Please check out the other algorithm tutorials in this series for both broader as well as more in depth coverage of the algorithms."
msgstr "Ceci conclut cette introduction aux algorithmes dans Qiskit. Veuillez consulter les autres tutoriels d'algorithmes de cette série pour une couverture plus large et plus en profondeur des algorithmes."

