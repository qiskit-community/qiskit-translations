msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-01 19:07+0000\n"
"PO-Revision-Date: 2022-11-01 19:28\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/07_grover_examples.po\n"
"X-Crowdin-File-ID: 9506\n"
"Language: fr_FR\n"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:10
msgid "This page was generated from `tutorials/algorithms/07_grover_examples.ipynb`__."
msgstr "Cette page a été générée puis traduite à partir de `tutorials/algorithms/07_grover_examples.ipynb`__."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:9
msgid "Grover’s algorithm examples"
msgstr "Exemples d'utilisations de l'algorithme de Grover"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:11
msgid "This notebook has examples demonstrating how to use the Qiskit `Grover <https://qiskit.org/documentation/stubs/qiskit.algorithms.Grover.html>`__ search algorithm, with different oracles."
msgstr "Ce notebook présente des exemples montrant comment utiliser l'algorithme de recherche de `Grover <https://qiskit.org/documentation/stubs/qiskit.algorithms.Grover.html>`__ de Qiskit, en utilisant différents oracles."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:39
msgid "Finding solutions to 3-SAT problems"
msgstr "Trouver des solutions à des problèmes 3-SAT"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:41
msgid "Let’s look at an example 3-Satisfiability (3-SAT) problem and walk-through how we can use Quantum Search to find its satisfying solutions. 3-SAT problems are usually expressed in `Conjunctive Normal Forms (CNF) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ and written in the `DIMACS-CNF <http://www.satcompetition.org/2009/format-benchmarks2009.html>`__ format. For example:"
msgstr "Examinons un exemple de problème de satisfaction 3-SAT et la façon dont nous pouvons utiliser l'algorithme de recherche quantique pour trouver ses solutions. Les problèmes 3-SAT sont habituellement exprimés par une `Forme normale conjonctive (FNC) <https://fr.wikipedia.org/wiki/Forme_normale_conjonctive>`__ et écrit dans le format `DIMACS-CNF <http://www.satcompetition.org/2009/format-benchmarks2009.html>` __. Par exemple :"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:70
msgid "The CNF of this 3-SAT instance contains 3 variables and 5 clauses:"
msgstr "La FNC de cette instance 3-SAT contient 3 variables et 5 clauses :"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:72
msgid ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"
msgstr ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:74
msgid "It can be verified that this 3-SAT problem instance has three satisfying solutions:"
msgstr "On peut vérifier que cette instance 3-SAT admet trois solutions satisfaisantes :"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:76
msgid ":math:`(v_1, v_2, v_3) = (T, F, T)` or :math:`(F, F, F)` or :math:`(T, T, F)`"
msgstr ":math:`(v_1, v_2, v_3) = (T, F, T)` or :math:`(F, F, F)` or :math:`(T, T, F)`"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:78
msgid "Or, expressed using the DIMACS notation:"
msgstr "Ou, utilisant la notation DIMACS-CNF :"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:80
msgid "``1 -2 3``, or ``-1 -2 -3``, or ``1 2 -3``."
msgstr "``1 -2 3``, or ``-1 -2 -3``, or ``1 2 -3``."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:82
msgid "With this example problem input, we then create the corresponding ``oracle`` for our ``Grover`` search. In particular, we use the ``PhaseOracle`` component, which supports parsing DIMACS-CNF format strings and constructing the corresponding oracle circuit."
msgstr "En utilisant cet exemple de problème, nous créons ensuite l'``oracle`` correspondant pour notre recherche par algorithme de ``Grover``. En particulier, nous utilisons la classe ``PhaseOracle``, qui prend en charge l'analyse syntaxique des chaînes de caractères au format DIMACS-CNF et la construction du circuit de l'oracle correspondant."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:117
msgid "The ``oracle`` can now be used to create an Grover instance:"
msgstr "La variable ``oracle`` peut alors être utilisée pour créer une instance d'un problème de Grover :"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:140
msgid "We can then configure the backend and run the Grover instance to get the result:"
msgstr "Nous pouvons alors configurer le backend et exécuter l'instance de problème de Grover pour obtenir le résultat :"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:191
msgid "As seen above, a satisfying solution to the specified 3-SAT problem is obtained. And it is indeed one of the three satisfying solutions."
msgstr "Comme on l'a vu ci-dessus, la solution renvoyée est bien l'une des trois solutions satisfaisantes admises par notre problème."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:193
msgid "Since we used the ``'aer_simulator'``, the complete measurement result is also returned, as shown in the plot below, where it can be seen that the binary strings ``000``, ``011``, and ``101`` (note the bit order in each string), corresponding to the three satisfying solutions all have high probabilities associated with them."
msgstr "Puisque nous avons utilisé l'``aer_simulator``, le résultat de chaque mesure est également retourné, comme montré sur le graphique ci-dessous, où l'on peut voir que les chaînes binaires ``000``, ``011``, et ``101`` (notez l'ordre des bits dans chaque chaîne), correspondant aux trois solutions satisfaisantes ont toutes des probabilités associées élevées."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:224
msgid "Boolean Logical Expressions"
msgstr "Expressions logiques booléennes"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:226
msgid "Qiskit’s ``Grover`` can also be used to perform Quantum Search on an ``Oracle`` constructed from other means, in addition to DIMACS. For example, the ``PhaseOracle`` can actually be configured using arbitrary Boolean logical expressions, as demonstrated below."
msgstr "La classe ``Grover`` de Qiskit peut également être utilisée pour effectuer une recherche quantique sur un ``Oracle`` construit à partir d'autres moyens, en plus d'une chaîne de caractères au format DIMACS-CNF. Par exemple, il est possible de configurer le ``PhaseOracle`` à l'aide d'expressions logiques booléennes arbitraires, comme montré ci-dessous."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:263
msgid "In the example above, the input Boolean logical expression ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` should be quite self-explanatory, where ``^``, ``~``, and ``&`` represent the Boolean logical XOR, NOT, and AND operators, respectively. It should be quite easy to figure out the satisfying solution by examining its parts: ``w ^ x`` calls for ``w`` and ``x`` taking different values; ``~(y ^ z)`` requires ``y`` and ``z`` be the same; ``x & y & z`` dictates all three to be ``True``. Putting these together, we get the satisfying solution ``(w, x, y, z) = (False, True, True, True)``, which our ``Grover``\\ ’s result agrees with."
msgstr "Dans l'exemple ci-dessus, l'expression booléenne logique en entrée ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` devrait être assez explicite, où les opérateurs ``^``, ``~`` et ``&`` représentent respectivement les opérateurs logiques XOR, NON et ET. Il devrait être assez facile de trouver la solution satisfaisante en examinant ses composantes : ``w ^ x`` nécessite que ``w`` et ``x`` aient des valeurs différents ; ``~(y ^ z)`` impose que que ``y`` et ``z`` aient la même valeur; ``x & y & z`` impose que les trois valeurs soient à ``True``. En combinant ces trois contraintes nous obtenons la solution satisfaisante ``(w, x, y, z) = (False, True, True, True)``, ce qui est en accord avec notre résultat obtenu avec ``Grover``."

