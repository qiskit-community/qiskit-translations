msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-01 19:07+0000\n"
"PO-Revision-Date: 2022-11-01 19:28\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/06_grover.po\n"
"X-Crowdin-File-ID: 9504\n"
"Language: fr_FR\n"

#: ../../tutorials/algorithms/06_grover.ipynb:10
msgid "This page was generated from `tutorials/algorithms/06_grover.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/algorithms/06_grover.ipynb`__."

#: ../../tutorials/algorithms/06_grover.ipynb:9
msgid "Grover’s Algorithm and Amplitude Amplification"
msgstr "Algorithme de Grover et Amplification d'Amplitude"

#: ../../tutorials/algorithms/06_grover.ipynb:11
msgid "Grover’s algorithm is one of the most famous quantum algorithms introduced by Lov Grover in 1996 [1]. It has initially been proposed for unstructured search problems, i.e. for finding a marked element in a unstructured database. However, Grover’s algorithm is now a subroutine to several other algorithms, such as Grover Adaptive Search [2]. For the details of Grover’s algorithm, please see `Grover’s Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ in the Qiskit textbook."
msgstr "L'algorithme de Grover est l'un des algorithmes quantiques les plus célèbres introduits par Lov Grover en 1996 [1]. Il a d'abord été proposé pour des problèmes de recherche non structurés, c'est-à-dire pour trouver un élément marqué dans une base de données non structurée. Cependant, l'algorithme de Grover est maintenant une sous-routine de plusieurs autres algorithmes, tels que Grover Adaptive Search [2]. Pour les détails de l'algorithme de Grover, veuillez consulter `Grover's Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ dans le manuel Qiskit."

#: ../../tutorials/algorithms/06_grover.ipynb:13
msgid "Qiskit implements Grover’s algorithm in the ``Grover`` class. This class also includes the generalized version, Amplitude Amplification [3], and allows setting individual iterations and other meta-settings to Grover’s algorithm."
msgstr "Qiskit implémente l'algorithme de Grover dans la classe ``Grover``. Cette classe inclut également la version généralisée, Amplitude Amplification [3], et permet de définir des itérations individuelles et d'autres méta-paramètres à l'algorithme de Grover."

#: ../../tutorials/algorithms/06_grover.ipynb:15
#: ../../tutorials/algorithms/06_grover.ipynb:768
msgid "**References:**"
msgstr "**Références :**"

#: ../../tutorials/algorithms/06_grover.ipynb:17
msgid "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"
msgstr "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"

#: ../../tutorials/algorithms/06_grover.ipynb:19
msgid "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"
msgstr "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"

#: ../../tutorials/algorithms/06_grover.ipynb:21
msgid "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"
msgstr "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"

#: ../../tutorials/algorithms/06_grover.ipynb:33
msgid "Grover’s algorithm"
msgstr "Algorithme de Grover"

#: ../../tutorials/algorithms/06_grover.ipynb:35
msgid "Grover’s algorithm uses the Grover operator :math:`\\mathcal{Q}` to amplify the amplitudes of the good states:"
msgstr "L'algorithme de Grover utilise l'opérateur Grover :math:`\\mathcal{Q}` pour amplifier les amplitudes des bons états :"

#: ../../tutorials/algorithms/06_grover.ipynb:37
msgid "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"
msgstr "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^ \\dagger \\mathcal{S_f}"

#: ../../tutorials/algorithms/06_grover.ipynb:42
msgid "Here, \\* :math:`\\mathcal{A}` is the initial search state for the algorithm, which is just Hadamards, :math:`H^{\\otimes n}` for the textbook Grover search, but can be more elaborate for Amplitude Amplification \\* :math:`\\mathcal{S_0}` is the reflection about the all 0 state"
msgstr "Ici, \\ * :math:` \\mathcal{A}` est l'état de recherche initial de l'algorithme, qui est juste un état de superposition de tous les qubits d'entrée obtenu par :math:`H ^ {\\otimes n}` pour la recherche de Grover générale, mais peut être plus élaboré pour l'amplification d'amplitude \\ * :math:` \\mathcal{S_0}` est la réflexion par rapport à l'état où tous les qubits sont à l'état 0"

#: ../../tutorials/algorithms/06_grover.ipynb:44
msgid "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"
msgstr "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rAngle, &x = 0 \\end{cases}"

#: ../../tutorials/algorithms/06_grover.ipynb:49
msgid "\\* :math:`\\mathcal{S_f}` is the oracle that applies"
msgstr "\\*:math:`\\mathcal{S_f}` est l'oracle qui s'applique"

#: ../../tutorials/algorithms/06_grover.ipynb:51
msgid "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"
msgstr "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"

#: ../../tutorials/algorithms/06_grover.ipynb:56
msgid "where :math:`f(x)` is 1 if :math:`x` is a good state and otherwise 0."
msgstr "où :math:`f (x)` vaut 1 si :math:`x` est un état recherché et sinon 0."

#: ../../tutorials/algorithms/06_grover.ipynb:58
msgid "In a nutshell, Grover’s algorithm applies different powers of :math:`\\mathcal{Q}` and after each execution checks whether a good solution has been found."
msgstr "En un mot, l'algorithme de Grover applique différentes puissances de :math:`\\mathcal{Q}` et après chaque exécution vérifie si une bonne solution a été trouvée."

#: ../../tutorials/algorithms/06_grover.ipynb:61
msgid "Running Grover’s algorithm"
msgstr "Exécution de l'algorithme de Grover"

#: ../../tutorials/algorithms/06_grover.ipynb:63
msgid "To run Grover’s algorithm with the ``Grover`` class, firstly, we need to specify an oracle for the circuit of Grover’s algorithm. In the following example, we use ``QuantumCircuit`` as the oracle of Grover’s algorithm. However, there are several other class that we can use as the oracle of Grover’s algorithm. We talk about them later in this tutorial."
msgstr "Pour exécuter l'algorithme de Grover à l'aide de la classe ``Grover``, premièrement, nous devons spécifier un oracle. Dans l'exemple suivant, nous utilisons une instance de la classe ``QuantumCircuit`` comme oracle de l'algorithme de Grover. Cependant, il existe plusieurs autres classes que nous pouvons utiliser comme oracle. Nous en parlons plus loin dans ce tutoriel."

#: ../../tutorials/algorithms/06_grover.ipynb:65
msgid "Note that the oracle for ``Grover`` must be a *phase-flip* oracle. That is, it multiplies the amplitudes of the of “good states” by a factor of :math:`-1`. We explain later how to convert a *bit-flip* oracle to a phase-flip oracle."
msgstr "Notez que l'oracle de ``Grover`` doit être un oracle de *phase-flip*. En d'autres termes, il multiplie les amplitudes des états recherchés par un facteur :math:`-1`. Nous expliquons plus tard comment convertir un oracle de type *bit-flip* en oracle de type phase-flip."

#: ../../tutorials/algorithms/06_grover.ipynb:111
msgid "Then, we specify a backend and call the ``run`` method of ``Grover`` with a backend to execute the circuits. The returned result type is a ``GroverResult``."
msgstr "Ensuite, nous spécifions un backend et nous appelons la méthode ``run`` de ``Grover``. Le type de résultat renvoyé est un ``GroverResult``."

#: ../../tutorials/algorithms/06_grover.ipynb:113
msgid "If the search was successful, the ``oracle_evaluation`` attribute of the result will be ``True``. In this case, the most sampled measurement, ``top_measurement``, is one of the “good states”. Otherwise, ``oracle_evaluation`` will be False."
msgstr "Si la recherche a réussi, l'attribut ``oracle_evaluation`` du résultat sera ``True``. Dans ce cas, la mesure la plus fréquemment obtenue, ``top_measurement``, est l'un des états recherchés. Sinon, ``oracle_evaluation`` sera ``False``."

#: ../../tutorials/algorithms/06_grover.ipynb:177
msgid "In the example, the result of ``top_measurement`` is ``11`` which is one of “good state”. Thus, we succeeded to find the answer by using ``Grover``."
msgstr "Dans cet exemple, le résultat de ``top_measurement`` est ``11`` qui est l'état recherché. Ainsi, nous avons réussi à trouver la réponse en utilisant ``Grover``."

#: ../../tutorials/algorithms/06_grover.ipynb:189
msgid "Using the different types of classes as the oracle of ``Grover``"
msgstr "Utiliser les différents types de classes comme oracle de ``Grover``"

#: ../../tutorials/algorithms/06_grover.ipynb:191
msgid "In the above example, we used ``QuantumCircuit`` as the oracle of ``Grover``. However, we can also use ``qiskit.quantum_info.Statevector`` as oracle. All the following examples are when :math:`|11\\rangle` is “good state”"
msgstr "Dans l'exemple ci-dessus, nous avons utilisé la classe ``QuantumCircuit`` comme l'oracle de ``Grover``. Cependant, nous pouvons également utiliser ``qiskit.aqua.components.oracles.Oracle``, et ``qiskit.quantum_info.Statevector`` comme oracles. Dans les exemples suivants, l'état recherché est :math:`| 11\\rangle`"

#: ../../tutorials/algorithms/06_grover.ipynb:254
msgid "Internally, the statevector is mapped to a quantum circuit:"
msgstr "En interne, le vecteur d'état est projeté sur circuit quantique :"

#: ../../tutorials/algorithms/06_grover.ipynb:284
msgid "Qiskit allows for an easy construction of more complex oracles: \\* ``PhaseOracle``: for parsing logical expressions such as ``'~a | b'``. This is especially useful for solving 3-SAT problems and is shown in the accompanying `Grover Examples <07_grover_examples.ipynb>`__ tutorial."
msgstr "Qiskit permet de construire facilement des oracles plus complexes: \\* ``PhaseOracle`` : pour l'analyse d'expressions logiques telles que ``'~ a | b'``. Ceci est particulièrement utile pour résoudre les problèmes 3-SAT et est démontré dans le tutoriel \" Grover Exemples <07_grover_examples.ipynb> ` __."

#: ../../tutorials/algorithms/06_grover.ipynb:286
msgid "Here we’ll use the ``PhaseOracle`` for the simple example of finding the state :math:`|11\\rangle`, which corresponds to ``'a & b'``."
msgstr "Dans cet exemple simple, nous allons utiliser ``PhaseOracle`` pour trouver l'état :math:`| 11\\rangle`, qui correspond à ``'a & b'``."

#: ../../tutorials/algorithms/06_grover.ipynb:325
msgid "Which we observe that this oracle implements a phase flip when the state is :math:`|11\\rangle`"
msgstr "Nous observons que cet oracle implémente une inversion de phase pour l'état :math:`|11\\rangle `"

#: ../../tutorials/algorithms/06_grover.ipynb:327
msgid "As mentioned above, Grover’s algorithm requires a *phase-flip* oracle. A bit-flip oracle flips the state of an auxiliary qubit if the other qubits satisfy the condition. To use these types of oracles with Grover’s we need to convert the bit-flip oracle to a phase-flip oracle by sandwiching the auxiliary qubit of the bit-flip oracle by :math:`X` and :math:`H` gates."
msgstr "Comme mentionné ci-dessus, l'algorithme de Grover nécessite un oracle *de phase* . Un oracle de bit-flip change l'état d'un qubit auxiliaire si les autres qubits satisfont à la condition. Pour utiliser ces types d'oracles avec Grover's nous avons besoin de convertir l'oracle de bit-flip à un oracle de phase-flip oracle en prenant en sandwich le qubit auxiliaire de l'oracle de bt-fliip par des portes :math:`X` et :math:`H`."

#: ../../tutorials/algorithms/06_grover.ipynb:329
msgid "**Note:** This transformation from a bit-flip to a phase-flip oracle holds generally and you can use this to convert your oracle to the right representation."
msgstr "**Note:** Cette transformation d'un oracle de bit-flip en oracle de phase-flip est valable en general et vous pouvez l'utiliser pour convertir votre oracle vers la bonne représentation."

#: ../../tutorials/algorithms/06_grover.ipynb:341
msgid "Amplitude amplification"
msgstr "Amplification de l'amplitude"

#: ../../tutorials/algorithms/06_grover.ipynb:343
msgid "Grover’s algorithm uses Hadamard gates to create the uniform superposition of all the states at the beginning of the Grover operator :math:`\\mathcal{Q}`. If some information on the good states is available, it might be useful to not start in a uniform superposition but only initialize specific states. This, generalized, version of Grover’s algorithm is referred to *Amplitude Amplification*."
msgstr "L'algorithme de Grover utilise des portes de Hadamard pour créer la superposition uniforme de tous les états au début de l'opérateur de Grover :math:`\\mathcal{Q}`. Si certaines informations sur les états recherchés sont disponibles, il peut être utile de ne pas démarrer dans une superposition uniforme mais d'initialiser uniquement des états spécifiques. Cette version, généralisée, de l'algorithme de Grover est appelée *Amplification d'Amplitude*."

#: ../../tutorials/algorithms/06_grover.ipynb:345
msgid "In Qiskit, the initial superposition state can easily be adjusted by setting the ``state_preparation`` argument."
msgstr "Dans Qiskit, l'état de superposition initial peut facilement être ajusté en définissant l'argument ``state_preparation``."

#: ../../tutorials/algorithms/06_grover.ipynb:348
msgid "State preparation"
msgstr "Préparation de l'état"

#: ../../tutorials/algorithms/06_grover.ipynb:350
msgid "A ``state_preparation`` argument is used to specify a quantum circuit that prepares a quantum state for the start point of the amplitude amplification. By default, a circuit with :math:`H^{\\otimes n}` is used to prepare uniform superposition (so it will be Grover’s search). The diffusion circuit of the amplitude amplification reflects ``state_preparation`` automatically."
msgstr "Un argument ``state_preparation`` est utilisé pour spécifier un circuit quantique préparant un état quantique pour le point de départ de l'amplification de l'amplitude. Par défaut, un circuit avec :math:`H^{\\otimes n}` est utilisé pour préparer une superposition uniforme (ce sera donc l'algorithme de Grover). Le circuit de diffusion de l'amplification d'amplitude est généré automatiquement par ``state_preparation``."

#: ../../tutorials/algorithms/06_grover.ipynb:467
msgid "Full flexibility"
msgstr "Flexibilité totale"

#: ../../tutorials/algorithms/06_grover.ipynb:469
msgid "For more advanced use, it is also possible to specify the entire Grover operator by setting the ``grover_operator`` argument. This might be useful if you know more efficient implementation for :math:`\\mathcal{Q}` than the default construction via zero reflection, oracle and state preparation."
msgstr "Pour une utilisation plus avancée, il est également possible de spécifier l'opérateur Grover en définissant l'argument ``grover_operator``. Cela peut être utile si vous connaissez une implémentation plus efficace pour :math:`\\mathcal{Q}` que la construction par défaut via la réflexion zéro, l'oracle et la préparation de l'état."

#: ../../tutorials/algorithms/06_grover.ipynb:471
msgid "The ``qiskit.circuit.library.GroverOperator`` can be a good starting point and offers more options for an automated construction of the Grover operator. You can for instance \\* set the ``mcx_mode`` \\* ignore qubits in the zero reflection by setting ``reflection_qubits`` \\* explicitly exchange the :math:`\\mathcal{S_f}, \\mathcal{S_0}` and :math:`\\mathcal{A}` operations using the ``oracle``, ``zero_reflection`` and ``state_preparation`` arguments"
msgstr "La classe ``qiskit.circuit.library.GroverOperator`` peut être un bon point de départ et offre plus d'options pour une construction automatisée de l'opérateur de Grover. Vous pouvez par exemple \n"
"\\* définir le ``mcx_mode`` \n"
"\\* ignorer les qubits dans la réflexion autour de zéro en définissant ``reflection_qubits``\n"
"\\* explicitement échanger les opérations :math:`\\mathcal{S_f}, \\mathcal{S_0}` et :math:`\\mathcal{A}` à l'aide des arguments ``oracle``, ``zero_reflection`` et ``state_preparation``"

#: ../../tutorials/algorithms/06_grover.ipynb:482
msgid "For instance, imagine the good state is a three qubit state :math:`|111\\rangle` but we used 2 additional qubits as auxiliary qubits."
msgstr "Par exemple, imaginez que le bon état soit l'état à trois qubits :math:`|111\\rangle` et que nous ayons utilisé 2 qubits supplémentaires en tant que qubits auxiliaires."

#: ../../tutorials/algorithms/06_grover.ipynb:516
msgid "Then, per default, the Grover operator implements the zero reflection on all five qubits."
msgstr "Alors, par défaut, l'opérateur Grover implémentera la réflexion autour de zéro sur les cinq qubits."

#: ../../tutorials/algorithms/06_grover.ipynb:547
msgid "But we know that we only need to consider the first three:"
msgstr "Mais nous savons que nous devons seulement considérer les trois premiers :"

#: ../../tutorials/algorithms/06_grover.ipynb:579
msgid "Dive into other arguments of ``Grover``"
msgstr "Détails sur d'autres arguments de ``Grover``"

#: ../../tutorials/algorithms/06_grover.ipynb:581
msgid "``Grover`` has arguments other than ``oracle`` and ``state_preparation``. We will explain them in this section."
msgstr "``Grover`` admet des arguments autres que ``oracle`` et ``state_preparation``. Nous les expliquerons dans cette section."

#: ../../tutorials/algorithms/06_grover.ipynb:584
msgid "Specifying ``good_state``"
msgstr "Spécification de ``good_state``"

#: ../../tutorials/algorithms/06_grover.ipynb:586
msgid "``good_state`` is used to check whether the measurement result is correct or not internally. It can be a list of binary strings, a list of integer, ``Statevector``, and Callable. If the input is a list of bitstrings, each bitstrings in the list represents a good state. If the input is a list of integer, each integer represent the index of the good state to be :math:`|1\\rangle`. If it is a ``Statevector``, it represents a superposition of all good states."
msgstr "``good_state`` est utilisé pour vérifier si le résultat de mesure est correct ou non. Il peut s'agir d'une liste de chaînes binaires, d'une liste de nombres entiers, d'une instance de ``Statevector`` ou d'un Callable. Si l'entrée est une liste de chaînes de binaire, chaque chaîne de la liste représente un état correct à rechercher. Si l'entrée est une liste d'entiers, chaque entier représente l'indice du qubit qui doit être à :math:`|1\\rangle`. S'il s'agit d'une instance de ``Statevector``alors tous les états à rechercher doivent être en superposition dans l'instance de ``Statevector`` passée."

#: ../../tutorials/algorithms/06_grover.ipynb:760
msgid "The number of ``iterations``"
msgstr "Le nombre d'itérations (``iteration``)"

#: ../../tutorials/algorithms/06_grover.ipynb:762
msgid "The number of repetition of applying the Grover operator is important to obtain the correct result with Grover’s algorithm. The number of iteration can be set by the ``iteration`` argument of ``Grover``. The following inputs are supported: \\* an integer to specify a single power of the Grover operator that’s applied \\* or a list of integers, in which all these different powers of the Grover operator are run consecutively and after each time we check if a correct solution has been found"
msgstr "Le nombre de répétitions d'application de l'opérateur Grover est important pour obtenir le résultat correct avec l'algorithme de Grover. Le nombre d'itérations peut être défini par l'argument ``iteration`` de ``Grover``. Les entrées suivantes sont prises en charge : \n"
"\\* un entier pour spécifier le nombre d'itérations de l'opérateur Grover qui doivent être appliquées \n"
"\\* ou une liste d'entiers, représentant les itérations de l'opérateur Grover à exécuter consécutivement et entre lesquelles nous pouvons vérifier si une solution correcte a été trouvée"

#: ../../tutorials/algorithms/06_grover.ipynb:764
msgid "Additionally there is the ``sample_from_iterations`` argument. When it is ``True``, instead of the specific power in ``iterations``, a random integer between 0 and the value in ``iteration`` is used as the power Grover’s operator. This approach is useful when we don’t even know the number of solution."
msgstr "De plus, il y a l'argument ``sample_from_iterations``. Quand il est à ``True``, au lieu d'appliquer le nombre d'itérations spécifiées, un nombre entier aléatoire compris entre 0 et la valeur de ``iteration`` est utilisé comme nombre d'itérations de l'opérateur de Grover. Cette approche est utile lorsque nous ne connaissons pas le nombre de solutions."

#: ../../tutorials/algorithms/06_grover.ipynb:766
msgid "For more details of the algorithm using ``sample_from_iterations``, see [4]."
msgstr "Pour plus de détails sur l'algorithme utilisant ``sample_from_iterations``, voir [4]."

#: ../../tutorials/algorithms/06_grover.ipynb:770
msgid "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"
msgstr "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"

#: ../../tutorials/algorithms/06_grover.ipynb:823
msgid "When the number of solutions is known, we can also use a static method ``optimal_num_iterations`` to find the optimal number of iterations. Note that the output iterations is an approximate value. When the number of qubits is small, the output iterations may not be optimal."
msgstr "Lorsque le nombre de solutions est connu, nous pouvons également utiliser une méthode statique ``optimal_num_iterations`` pour obtenir le nombre optimal d'itérations. Notez que le nombre d'itérations ainsi obtenu est une valeur approximative. Lorsque le nombre de qubits est faible, ce nombre d'itérations peut ne pas être optimal."

#: ../../tutorials/algorithms/06_grover.ipynb:871
msgid "Applying ``post_processing``"
msgstr "Application du ``post_processing``"

#: ../../tutorials/algorithms/06_grover.ipynb:873
msgid "We can apply an optional post processing to the top measurement for ease of readability. It can be used e.g. to convert from the bit-representation of the measurement ``[1, 0, 1]`` to a DIMACS CNF format ``[1, -2, 3]``."
msgstr "Nous pouvons appliquer un post-traitement optionnel à la mesure la plus courante pour faciliter la lecture. Ce post-traitement peut être utilisé, par exemple, pour convertir la représentation binaire de la mesure ``[ 1, 0, 1 ]`` à un format DIMACS CNF ``[ 1, -2, 3 ]``."

