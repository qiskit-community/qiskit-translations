msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-12 15:01+0000\n"
"PO-Revision-Date: 2020-11-12 15:40\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/01_grover.po\n"
"X-Crowdin-File-ID: 9398\n"
"Language: fr_FR\n"

#: ../../tutorials/algorithms/01_grover.ipynb:10
msgid "This page was generated from `tutorials/algorithms/01_grover.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/simulators/1_aer_provider.ipynb`__."

#: ../../tutorials/algorithms/01_grover.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/01_grover.ipynb>`_."
msgstr ""

#: ../../tutorials/algorithms/01_grover.ipynb:9
msgid "Grover's Algorithm and Amplitude Amplification"
msgstr "Algorithme de Grover et Amplification d'amplitude"

#: ../../tutorials/algorithms/01_grover.ipynb:11
#, python-format
msgid "Grover's algorithm is one of the most famous quantum algorithms introduced by Lov Grover in 1996 `1 <L.%20K.%20Grover,%20A%20fast%20quantum%20mechanical%20algorithm%20for%20database%20search.%20Proceedings%2028th%20Annual%20Symposium%20on>`__. It has initially been proposed for unstructured search problems, i.e. for finding a marked element in a unstructured database. However, Grover's algorithm is now a subroutine to several other algorithms, such as Grover Adaptive Search `2 <A.%20Gilliam,%20S.%20Woerner,%20C.%20Gonciulea,%20Grover%20Adaptive%20Search%20for%20Constrained%20Polynomial%20Binary%20Optimization.>`__. For the details of Grover's algorithm, please see `Grover's Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ in the Qiskit textbook."
msgstr "L'algorithme de Grover est l'un des algorithmes quantiques les plus célèbres introduits par Lov Grover en 1996 ` 1 <L.%20K.%20Grover,%20A%20fast%20quantum%20mechanical%20algorithm%20for%20database%20search.%20Proceedings%2028th%20Annual%20Symposium%20on>` __. Il a d'abord été proposé pour des problèmes de recherche non structurés, c'est-à-dire pour trouver un élément marqué dans une base de données non structurée. Cependant, l'algorithme de Grover est maintenant une sous-routine de plusieurs autres algorithmes, tels que Grover Adaptive Search ` 2 <A.%20Gilliam,%20S.%20Woerner,%20C.%20Gonciulea,%20Grover%20Adaptive%20Search%20for%20Constrained%20Polynomial%20Binary%20Optimization.>` __. Pour les détails de l'algorithme de Grover, veuillez consulter l'algorithme de Grover <https://qiskit.org/textbook/ch-algorithms/grover.html>` __ dans le manuel Qiskit."

#: ../../tutorials/algorithms/01_grover.ipynb:14
msgid "Qiskit implements Grover's algorithm in the ``Grover`` class. This class also includes the generalized version, Amplitude Amplification [3], and allows setting individual iterations and other meta-settings to Grover's algorithm."
msgstr "Qiskit implémente l'algorithme de Grover dans la classe ` ` Grover ` `. Cette classe inclut également la version généralisée : l'amplification d'amplitude [3], et permet de définir des itérations individuelles et d'autres méta-paramètres à l'algorithme de Grover."

#: ../../tutorials/algorithms/01_grover.ipynb:16
#: ../../tutorials/algorithms/01_grover.ipynb:866
msgid "**References:**"
msgstr "**Références :**"

#: ../../tutorials/algorithms/01_grover.ipynb:18
msgid "the Theory of Computing (STOC) 1996, pp. 212-219."
msgstr "the Theory of Computing (STOC) 1996, pp. 212-219."

#: ../../tutorials/algorithms/01_grover.ipynb:20
msgid "https://arxiv.org/abs/1912.04088"
msgstr "https://arxiv.org/abs/1912.04088"

#: ../../tutorials/algorithms/01_grover.ipynb:22
msgid "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"
msgstr "[3]: Brassard, G., Hoyer, P., Mosca, M., et Tapp, A. (2000). Amplitude et estimation de l'amplitude quantique. http://arxiv.org/abs/quant-ph/0005055"

#: ../../tutorials/algorithms/01_grover.ipynb:34
msgid "Grover's algorithm"
msgstr "Algorithme de Grover"

#: ../../tutorials/algorithms/01_grover.ipynb:36
msgid "Grover's algorithm uses the Grover operator :math:`\\mathcal{Q}` to amplify the amplitudes of the good states:"
msgstr "L'algorithme de Grover utilise l'opérateur Grover :math:` \\mathcal{Q}` pour amplifier les amplitudes des états recherchés :"

#: ../../tutorials/algorithms/01_grover.ipynb:38
msgid "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"
msgstr "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^ \\dagger \\mathcal{S_f}"

#: ../../tutorials/algorithms/01_grover.ipynb:43
msgid "Here, \\* :math:`\\mathcal{A}` is the initial search state for the algorithm, which is just Hadamards, :math:`H^{\\otimes n}` for the textbook Grover search, but can be more elaborate for Amplitude Amplification \\* :math:`\\mathcal{S_0}` is the reflection about the all 0 state"
msgstr "Ici, \\ * :math:` \\mathcal{A}` est l'état de recherche initial de l'algorithme, qui est juste un état de superposition de tous les qubits d'entrée obtenu par :math:` H ^ { \\otimes n } ` pour la recherche de Grover de manuel, mais peut être plus élaboré pour l'amplification d'amplitude \\ * :math:` \\mathcal{S_0}` est la réflexion par rapport à l'état où tous les qubits sont à l'état 0"

#: ../../tutorials/algorithms/01_grover.ipynb:45
msgid "      |x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}\n\n"
"\\* :math:`\\mathcal{S_f}` is the oracle that applies"
msgstr "      |x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0 \\end{cases}\n\n"
"\\ * :math:` \\mathcal{S_f}` est l'oracle qui applique"

#: ../../tutorials/algorithms/01_grover.ipynb:52
msgid " |x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle\n\n"
"where :math:`f(x)` is 1 if :math:`x` is a good state and otherwise 0."
msgstr " |x\\rangle \\mapsto (-1) ^ { f (x) } |x\\rangle\n\n"
"où :math:` f (x) ` est 1 si :math:` x ` est l'état rechercher et sinon 0."

#: ../../tutorials/algorithms/01_grover.ipynb:59
msgid "In a nutshell, Grover's algorithm applies different powers of :math:`\\mathcal{Q}` and after each execution checks whether a good solution has been found."
msgstr "En un mot, l'algorithme de Grover applique différentes puissances de :math:` \\mathcal{Q}` et après chaque exécution vérifie si une bonne solution a été trouvée."

#: ../../tutorials/algorithms/01_grover.ipynb:62
msgid "Running Grover's algorithm"
msgstr "Exécution de l'algorithme de Grover"

#: ../../tutorials/algorithms/01_grover.ipynb:64
msgid "To run Grover's algorithm with the ``Grover`` class, firstly, we need to specify an oracle for the circuit of Grover's algorithm. In the following example, we use ``QuantumCircuit`` as the oracle of Grover's algorithm. However, there are several other class that we can use as the oracle of Grover's algorithm. We talk about them later in this tutorial."
msgstr "Pour exécuter l'algorithme de Grover à l'aide de la classe ``Grover``, premièrement, nous devons spécifier un oracle pour le circuit de l'algorithme de Grover. Dans l'exemple suivant, nous utilisons ``QuantumCircuit`` comme oracle de l'algorithme de Grover. Cependant, il existe plusieurs autres classes que nous pouvons utiliser comme oracle de l'algorithme de Grover. Nous en parlons plus loin dans ce tutoriel."

#: ../../tutorials/algorithms/01_grover.ipynb:66
msgid "Note that the oracle for ``Grover`` mush be a *phase-flip* oracle. That is, it multiplies the amplitudes of the of \"good states\" by a factor of :math:`-1`. We explain later how to convert a *bit-flip* oracle to a phase-flip oracle."
msgstr "Notez que l'oracle de ``Grover`` doit être un oracle de *phase-flip*. En d'autres termes, il multiplie les amplitudes des \"bons états\" par un facteur :math:` -1 `. Nous expliquons plus tard comment convertir un oracle * bit-flip * en oracle de phase-flip."

#: ../../tutorials/algorithms/01_grover.ipynb:128
msgid "Then, we specify a backend and call the ``run`` method of ``Grover`` with a backend to execute the circuits. The returned result type is a ``GroverResult``."
msgstr "Ensuite, nous spécifions un backend et nous appelons la méthode ``run`` de ``Grover``. Le type de résultat renvoyé est un ``GroverResult``."

#: ../../tutorials/algorithms/01_grover.ipynb:130
msgid "If the search was successful, the ``oracle_evaluation`` attribute of the result will be ``True``. In this case, the most sampled measurement, ``top_measurement``, is one of the \"good states\". Otherwise, ``oracle_evaluation`` will be False."
msgstr "Si la recherche a réussi, l'attribut ``oracle_evaluation`` du résultat sera ``True``. Dans ce cas, la mesure la plus fréquemment obtenue, ``top_measurement``, est l'un des \"bons états\". Sinon, ``oracle_evaluation`` sera False."

#: ../../tutorials/algorithms/01_grover.ipynb:184
msgid "In the example, the result of ``top_measurement`` is ``11`` which is one of \"good state\". Thus, we succeeded to find the answer by using ``Grover``."
msgstr "Dans notre exemple, le résultat de ``top_measurement`` est ``11`` qui est l'état recherché. Ainsi, nous avons réussi à trouver la réponse en utilisant ``Grover``."

#: ../../tutorials/algorithms/01_grover.ipynb:196
msgid "Using the different types of classes as the oracle of ``Grover``"
msgstr "Utiliser les différents types de classes comme oracle de ``Grover``"

#: ../../tutorials/algorithms/01_grover.ipynb:198
msgid "In the above example, we used ``QuantumCircuit`` as the oracle of ``Grover``. However, we can also use ``qiskit.aqua.components.oracles.Oracle``, and ``qiskit.quantum_info.Statevector`` as oracles. All the following examples are when :math:`|11\\rangle` is \"good state\""
msgstr "Dans l'exemple ci-dessus, nous avons utilisé ``QuantumCircuit`` comme l'oracle de ``Grover``. Cependant, nous pouvons également utiliser ``qiskit.aqua.components.oracles.Oracle``, et ``qiskit.quantum_info.Statevector`` comme oracles. Dans les exemples suivants, l'état à rechercher est :math:` | 11\\rangle `"

#: ../../tutorials/algorithms/01_grover.ipynb:252
msgid "Internally, the statevector get's mapped to a quantum circuit:"
msgstr "En interne, le statevector est mappé à un circuit quantique :"

#: ../../tutorials/algorithms/01_grover.ipynb:300
msgid "The ``Oracle`` components in Qiskit Aqua allow for an easy construction of more complex oracles. The ``Oracle`` type has the interesting subclasses: \\* ``LogicalExpressionOracle``: for parsing logical expressions such as ``'~a | b'``. This is expecially useful for solving 3-SAT problems (see `Using Grover's Algorithm to Perform Quantum Search <https://github.com/qiskit-community/qiskit-community-tutorials/blob/master/optimization/grover.ipynb>`__ in Qiskit-community-tutorials). \\* ``TrutheTableOracle``: for converting binary truth tables to circuits"
msgstr "Les composants ``Oracle`` de Qiskit Aqua permettent une construction facile d'oracles plus complexes. Le type ``Oracle`` a les sous-classes utiles suivantes : \\ * ``LogicalExpressionOracle``: pour l'analyse d'expressions logiques telles que ``'~ a | b'``. Ceci est particulièrement utile pour résoudre les problèmes 3-SAT (voir ` Utilisation de l'algorithme de Grover pour effectuer une recherche quantique <https://github.com/qiskit-community/qiskit-community-tutorials/blob/master/optimization/grover.ipynb>` __ dans Qiskit-community-tutorials). \\ * ``TrutheTableOracle``: pour convertir des tables de vérité binaires en circuits"

#: ../../tutorials/algorithms/01_grover.ipynb:303
msgid "Here we'll use the ``LogicalExpressionOracle`` for the simple example of finding the state :math:`|11\\rangle`, which corresponds to ``'a & b'``."
msgstr "Ici nous allons utiliser ``LogicalExpressionOracle`` pour par exemple marquer l'état à rechercher :math:`| 11\\rangle`, qui correspond à ``'a & b'``."

#: ../../tutorials/algorithms/01_grover.ipynb:361
msgid "You can observe, that this oracle is actually implemented with three qubits instead of two!"
msgstr "Vous pouvez observer, que cet oracle est en fait implémenté avec trois qubits au lieu de deux !"

#: ../../tutorials/algorithms/01_grover.ipynb:363
msgid "That is because the ``LogicalExpressionOracle`` is not a phase-flip oracle (which flips the phase of the good state) but a bit-flip oracle. This means it flips the state of an auxiliary qubit if the other qubits satisfy the condition. For Grover's algorithm, however, we require a phase-flip oracle. To convert the bit-flip oracle to a phase-flip oracle we sandwhich the controlled-NOT by :math:`X` and :math:`H` gates, as you can see in the circuit above."
msgstr "C'est parce que ``LogicalExpressionOracle`` n'est pas un oracle de phase-flip (qui flip la phase de l'état à rechercher) mais un oracle de flip-flip. Cela signifie qu'il retourne l'état d'un qubit auxiliaire si les autres qubits satisfont à la condition. Pour l'algorithme de Grover, cependant, nous avons besoin d'un oracle de phase-flip. Pour convertir l'oracle de bit-flip en un oracle de phase-flip nous entourons les controlled-NOT avec des portes :math:` X ` et :math:` H `, comme on peut le voir sur le circuit ci-dessus."

#: ../../tutorials/algorithms/01_grover.ipynb:365
msgid "**Note:** This transformation from a bit-flip to a phase-flip oracle holds generally and you can use this to convert your oracle to the right representation."
msgstr "**Note:** Cette transformation d'un bit-flip à un oracle de phase-flip est généralement valable et vous pouvez l'utiliser pour convertir votre oracle vers la bonne représentation."

#: ../../tutorials/algorithms/01_grover.ipynb:377
msgid "Amplitude amplification"
msgstr "Amplification de l'amplitude"

#: ../../tutorials/algorithms/01_grover.ipynb:379
msgid "Grover's algorithm uses Hadamard gates to create the uniform superposition of all the states at the beginning of the Grover operator :math:`\\mathcal{Q}`. If some information on the good states is available, it might be useful to not start in a uniform superposition but only initialize specific states. This, generalized, version of Grover's algorithm is referred to *Amplitude Amplification*."
msgstr "L'algorithme de Grover utilise des portes de Hadamard pour créer la superposition uniforme de tous les états au début de l'opérateur de Grover :math:` \\mathcal{Q}`. Si certaines informations sur les bons états sont disponibles, il peut être utile de ne pas démarrer dans une superposition uniforme mais d'initialiser uniquement des états spécifiques. Cette version, généralisée, de l'algorithme de Grover est appelée *Amplification d'Amplitude*."

#: ../../tutorials/algorithms/01_grover.ipynb:381
msgid "In Qiskit, the initial superposition state can easily be adjusted by setting the ``state_preparation`` argument."
msgstr "Dans Qiskit, l'état de superposition initial peut facilement être ajusté en définissant l'argument ``state_preparation``."

#: ../../tutorials/algorithms/01_grover.ipynb:384
msgid "State preparation"
msgstr "Préparation de l'état"

#: ../../tutorials/algorithms/01_grover.ipynb:386
msgid "A ``state_preparation`` argument is used to specify a quantum circuit that prepares a quantum state for the start point of the amplitude amplification. By default, a circuit with $H^{:nbsphinx-math:`\\otimes `n} $ is used to prepare uniform superposition (so it will be Grover's serach). The diffusion circuit of the amplitude amplification relrects ``state_preparation`` automatically."
msgstr "Un argument ``state_préparation`` est utilisé pour spécifier un circuit quantique préparant un état quantique pour le point de départ de l'amplification de l'amplitude. Par défaut, un circuit avec $H^ {:nbsphinx-math:` \\otimes` n } $ est utilisé pour préparer une superposition uniforme (ce sera donc l'algorithme de Grover). Le circuit de diffusion de l'amplification d'amplitude est généré automatiquement par ``state_préparation``."

#: ../../tutorials/algorithms/01_grover.ipynb:495
msgid "Full flexibility"
msgstr "Flexibilité totale"

#: ../../tutorials/algorithms/01_grover.ipynb:497
msgid "For more advanced use, it is also possible to specify the entire Grover operator by setting the ``grover_operator`` argument. This might be useful if you know more efficient implementation for :math:`\\mathcal{Q}` than the default construction via zero reflection, oracle and state preparation."
msgstr "Pour une utilisation plus avancée, il est également possible de spécifier l'opérateur Grover en définissant l'argument ``grover_operator``. Cela peut être utile si vous connaissez une implémentation plus efficace pour :math:` \\mathcal{Q}` que la construction par défaut via la réflexion autour de zéro, l'oracle et la préparation de l'état."

#: ../../tutorials/algorithms/01_grover.ipynb:499
msgid "The ``qiskit.circuit.library.GroverOperator`` can be a good starting point and offers more options for an automated construction of the Grover operator. You can for instance \\* set the ``mcx_mode`` \\* ignore qubits in the zero reflection by setting ``reflection_qubits`` \\* explicitly exchange the :math:`\\mathcal{S_f}, \\mathcal{S_0}` and :math:`\\mathcal{A}` operations using the ``oracle``, ``zero_reflection`` and ``state_preparation`` arguments"
msgstr "La bibliothèque ``qiskit.circuit.library.GroverOperator`` peut être un bon point de départ et offre plus d'options pour une construction automatisée de l'opérateur de Grover. Vous pouvez par exemple \\ * définir le ``mcx_mode`` \\ * ignorer les qubits dans la réflexion autour de zéro en définissant ``reflection_qubits`` \\ * explicitement échanger les :math:` \\mathcal{S_f}, \\mathcal{S_0}` et :math:` \\mathcal{A}`` à l'aide des arguments ``oracle``, ``zero_reflet`` et ``state_preparation``"

#: ../../tutorials/algorithms/01_grover.ipynb:510
msgid "For instance, imagine the good state is a three qubit state :math:`|111\\rangle` but we used 2 additional qubits as auxiliary qubits."
msgstr "Par exemple, imaginez que le bon état est un état trois qubits :math:` | 111\\rangle ` mais que nous avons utilisé 2 qubits supplémentaires en tant que qubits auxiliaires."

#: ../../tutorials/algorithms/01_grover.ipynb:574
msgid "Then, per default, the Grover operator implements the zero reflection on all five qubits."
msgstr "Alors, par défaut, l'opérateur Grover implémentera la réflexion autour de zéro sur les cinq qubits."

#: ../../tutorials/algorithms/01_grover.ipynb:635
msgid "But we know that we only need to consider the first three:"
msgstr "Mais nous savons que nous devons seulement considérer les trois premiers:"

#: ../../tutorials/algorithms/01_grover.ipynb:697
msgid "Dive into other arguments of ``Grover``"
msgstr "Détails sur d'autres arguments de ``Grover``"

#: ../../tutorials/algorithms/01_grover.ipynb:699
msgid "``Grover`` has arugments other than ``oracle`` and ``state_preparation``. We will explain them in this section."
msgstr "` ` Grover ` ` admet des arguments autres que ``oracle`` et ``state_préparation``. Nous les expliquerons dans cette section."

#: ../../tutorials/algorithms/01_grover.ipynb:702
msgid "Specifying ``good_state``"
msgstr "Spécifier ``good_state``"

#: ../../tutorials/algorithms/01_grover.ipynb:704
msgid "``good_state`` is used to check whether the measument result is correct or not internally. It can be a list of binary strings, a list of integer, ``Statevector``, and Callable. If the input is a list of bitstrings, each bitstrings in the list represents a good state. If the input is a list of integer, each integer represent the index of the good state to be :math:`|1\\rangle`. If it is a ``Statevector``, it represents a superposition of all good states."
msgstr "``good_state`` est utilisé pour vérifier si le résultat de mesure est correct ou non. Il peut s'agir d'une liste de chaînes binaires, d'une liste de nombres entiers, ou un ``Statevector``. Si l'entrée est une liste de chaînes de bits, chaque chaîne de bits de la liste représente un état à rechercher. Si l'entrée est une liste d'entiers, chaque entier représente l'indice de l'état à rechercher :math:` | 1\\r'. S'il s'agit d'un ``Statevector``, il représente une superposition de tous les états à rechercher."

#: ../../tutorials/algorithms/01_grover.ipynb:858
msgid "The number of ``iterations``"
msgstr "Le nombre d'``itérations``"

#: ../../tutorials/algorithms/01_grover.ipynb:860
msgid "The number of repetition of applying the Grover operator is important to obtain the correct result with Grover's algorithm. The number of iteration can be set by the ``iteration`` argument of ``Grover``. The following inputs are supported: \\* an integer to specify a single power of the Grover operator that's applied \\* or a list of integers, in which all these different powers of the Grover operator are run consecutively and after each time we check if a correct solution has been found"
msgstr "Le nombre de répétitions d'application de l'opérateur Grover est important pour obtenir le résultat correct avec l'algorithme de Grover. Le nombre d'itérations peut être défini par l'argument ``itération`` de ``Grover``. Les entrées suivantes sont prises en charge: \\ * un entier pour spécifier une seule puissance de l'opérateur Grover qui est appliqué \\ * ou une liste d'entiers, représentant les itérations de l'opérateur Grover à exécuter consécutivement et entre lesquelles nous pouvons vérifier si une solution correcte a été trouvée"

#: ../../tutorials/algorithms/01_grover.ipynb:862
msgid "Additionally there is the ``sample_from_iterations`` argument. When it is ``True``, instead of the specific power in ``iterations``, a random integer between 0 and the value in ``iteration`` is used as the power Grover's operator. This approach is useful when we don't even know the number of solution."
msgstr "De plus, il y a l'argument ``sample_from_iterations``. Quand il est à ``True``, au lieu d'appliquer le nombre d'itérations spécifiées, un nombre entier aléatoire compris entre 0 et la valeur de ``iteration`` est utilisé comme nombre d'itérations de l'opérateur de Grover. Cette approche est utile lorsque nous ne connaissons même pas le nombre de solutions."

#: ../../tutorials/algorithms/01_grover.ipynb:864
msgid "For more details of the algorithm using ``sample_from_iterations``, see [4]."
msgstr "Pour plus de détails sur l'algorithme utilisant ``sample_from_iterations``, voir [4]."

#: ../../tutorials/algorithms/01_grover.ipynb:868
msgid "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"
msgstr "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"

#: ../../tutorials/algorithms/01_grover.ipynb:918
msgid "When the number of solutions is known, we can also use a static method ``optimal_num_iterations`` to find the optimal number of iterations. Note that the output iterations is an approximate value. When the number of qubits is small, the output iterations may not be optimal."
msgstr "Lorsque le nombre de solutions est connu, nous pouvons également utiliser une méthode statique ``optimal_num_iterations`` pour obtenir le nombre optimal d'itérations. Notez que le nombre d'itérations ainsi obtenu est une valeur approximative. Lorsque le nombre de qubits est faible, ce nombre d'itérations peut ne pas être optimal."

#: ../../tutorials/algorithms/01_grover.ipynb:961
msgid "Applying ``post_processing``"
msgstr "Application du ``post_processing``"

#: ../../tutorials/algorithms/01_grover.ipynb:963
msgid "We can apply an optional post processing to the top measurement for ease of readability. It can be used e.g. to convert from the bit-representation of the measurement ``[1, 0, 1]`` to a DIMACS CNF format ``[1, -2, 3]``."
msgstr "Nous pouvons appliquer un post-traitement optionnel à la mesure supérieure pour faciliter la lecture. Il peut être utilisé, par exemple, pour convertir la représentation binaire de la mesure ``[ 1, 0, 1 ]`` à un format DIMACS CNF ``[ 1, -2, 3 ]``."

