msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-14 09:35+0000\n"
"PO-Revision-Date: 2020-07-20 09:57\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/4_randomized_benchmarking.po\n"
"X-Crowdin-File-ID: 9138\n"
"Language: fr_FR\n"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:10
msgid "This page was generated from `tutorials/noise/4_randomized_benchmarking.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/noise/4_randomized_benchmarking.ipynb`__."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:9
msgid "Randomized Benchmarking"
msgstr "Analyse Aomparative Aléatoire (Benchmarking Randomisé)"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:12
msgid "Introduction"
msgstr "Introduction"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:14
msgid "**Randomization benchmarking (RB)** is a well-known technique to measure average gate performance by running sequences of random Clifford gates that should return the qubits to the initial state. Qiskit Ignis has tools to generate one- and two-qubit Clifford gate sequences simultaneously."
msgstr "**Analyse comparative aléatoire (Randomization benchmarking RB)** est une technique bien connue pour mesurer la performance moyenne des portes en exécutant des séquences de portes Clifford aléatoires qui devraient retourner les qubits à l'état initial. Qiskit Ignis a des outils pour générer simultanément des séquences de portes Clifford à un ou deux qubits."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:16
msgid "This notebook gives an example for how to use the ``ignis.verification.randomized_benchmarking`` module. This particular example shows how to run 2-qubit randomized benchmarking (RB) simultaneous with 1-qubit RB. There are also examples on how to use some of the companion functions for predicting RB fidelity."
msgstr "Ce bloc-notes donne un exemple d'utilisation du module ``ignis.verification.randomized_benchmarking``. Cet exemple particulier montre comment exécuter le benchmarking randomisé de 2-qubit (RB) simultanément avec le RB à 1 qubit. Il y a aussi des exemples sur la façon d'utiliser certaines des fonctions complémentaires pour prédire la fidélité du RB."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:49
msgid "1) Select the Parameters of the RB Run"
msgstr "1) Sélectionnez les paramètres de l'exécution RB"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:51
msgid "First, wee need to choose the following parameters:"
msgstr "Tout d'abord, il faut choisir les paramètres suivants:"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:53
msgid "**nseeds:** The number of seeds. For each seed you will get a separate list of output circuits in rb\\_circs."
msgstr "**nseeds:** Le nombre de graines. Pour chaque graine, vous obtiendrez une liste séparée de circuits de sortie dans rb\\_circs."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:54
msgid "**length\\_vector:** The length vector of Clifford lengths. Must be in ascending order. RB sequences of increasing length grow on top of the previous sequences."
msgstr "**length\\_vector:** Le vecteur de longueur de Clifford. Doit être dans un ordre ascendant. Les séquences RB de longueur croissante se développent au-dessus des séquences précédentes."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:55
msgid "**rb\\_pattern:** A list of the form [[i,j],[k],...] which will make simultaneous RB sequences where Qi,Qj are a 2-qubit RB sequence and Qk is a 1-qubit sequence, etc. The number of qubits is the sum of the entries. For 'regular' RB the qubit\\_pattern is just [[0]],[[0,1]]."
msgstr "**rb\\_pattern:** Une liste de la forme [[i,j],[k],... qui fera des séquences RB simultanées où Qi,Qj est une séquence RB de 2 qubits et Qk est une séquence à 1-qubits, etc. Le nombre de qubits est la somme des entrées. Pour le RB 'regular' (régulier) le qubit\\_pattern est juste [[0]],[[0,1]]."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:56
msgid "**length\\_multiplier:** If this is an array it scales each rb\\_sequence by the multiplier."
msgstr "**length\\_multiplier:** Si c'est un tableau, il met à l'échelle chaque rb\\_sequence par le multiplicateur."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:57
msgid "**seed\\_offset:** What to start the seeds at (e.g. if we want to add more seeds later)."
msgstr "**seed\\_offset:** À quoi commencer les graines (par exemple, si nous voulons ajouter plus de graines plus tard)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:58
msgid "**align\\_cliffs:** If true adds a barrier across all qubits in rb\\_pattern after each set of cliffords."
msgstr "**align\\_cliffs:** Si vrai ajouter une barrière à tous les qubits dans rb\\_pattern après chaque ensemble de cliffords."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:60
msgid "In this example we have 3 qubits Q0,Q1,Q2. We are running 2Q RB (on qubits Q0,Q2) and 1Q RB (on qubit Q1) simultaneously, where there are twice as many 1Q Clifford gates."
msgstr "Dans cet exemple, nous avons 3 qubits Q0,Q1,Q2. Nous exécutons 2Q RB (sur qubits Q0,Q2) et 1Q RB (sur qubit Q1) simultanément, où il y a deux fois plus de portes Clifford 1Q."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:92
msgid "2) Generate the RB sequences"
msgstr "2) Générer les séquences RB"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:94
msgid "We generate RB sequences. We start with a small example (so it doesn't take too long to run)."
msgstr "Nous générons des séquences RB. Nous commençons par un petit exemple (pour que cela ne prenne pas trop de temps)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:96
msgid "In order to generate the RB sequences **rb\\_circs**, which is a list of lists of quantum circuits, we run the function ``rb.randomized_benchmarking_seq``."
msgstr "Afin de générer les séquences RB **rb\\_circs**, qui est une liste de listes de circuits quantiques, nous exécutons la fonction ``rb.randomized_benchmarking_seq``."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:98
msgid "This function returns:"
msgstr "Cette fonction renvoie:"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:100
msgid "**rb\\_circs:** A list of lists of circuits for the rb sequences (separate list for each seed)."
msgstr "** rb\\_circs:** Une liste des listes de circuits pour les séquences rb (liste séparée pour chaque graine)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:101
msgid "**xdata:** The Clifford lengths (with multiplier if applicable)."
msgstr "** xdata:** Les longueurs de Clifford (avec multiplicateur le cas échéant)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:127
msgid "As an example, we print the circuit corresponding to the first RB sequence:"
msgstr "Par exemple, nous imprimons le circuit correspondant à la première séquence RB:"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:218
msgid "Look at the Unitary for 1 Circuit"
msgstr "Regardez l'Unitaire pour 1 Circuit"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:229
msgid "The Unitary representing each RB circuit should be the identity (with a global phase), since we multiply random Clifford elements, including a computed reversal gate. We simulate this using an Aer unitary simulator."
msgstr "L'Unitaire représentant chaque circuit RB devrait être l'identité (avec une phase globale), puisque nous multiplions les éléments aléatoires de Clifford, y compris une porte d'inversion calculée. Nous simulons cela à l'aide d'un simulateur unitaire Aer."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:301
msgid "Define the noise model"
msgstr "Définir le modèle de bruit"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:312
msgid "We define a noise model for the simulator. To simulate decay, we add depolarizing error probabilities to the CNOT and U gates."
msgstr "Nous définissons un modèle de bruit pour le simulateur. Pour simuler la décadence, nous ajoutons des probabilités d'erreur dépolarisantes aux portes CNOT et U."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:339
msgid "3) Execute the RB sequences on Aer simulator"
msgstr "3) Exécuter les séquences RB sur le simulateur Aer"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:341
msgid "We can execute the RB sequences either using a Qiskit Aer Simulator (with some noise model) or using an IBMQ provider, and obtain a list of results, ``result_list``."
msgstr "Nous pouvons exécuter les séquences RB soit en utilisant un Qiskit Aer Simulator (avec un modèle de bruit) soit en utilisant un fournisseur de service IBMQ, et obtenir une liste de résultats, ``result_list``."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:415
msgid "4) Fit the RB results and calculate the gate fidelity"
msgstr "4) Ajuster les résultats du RB et calculer la fidélité de la porte"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:418
msgid "Get statistics about the survival probabilities"
msgstr "Obtenir des statistiques sur les probabilités de survie"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:420
msgid "The results in **result\\_list** should fit to an exponentially decaying function :math:`A \\cdot \\alpha ^ m + B`, where :math:`m` is the Clifford length."
msgstr "Les résultats dans **result\\_list** devraient correspondre à une fonction exponentielle de décomposition :math:`A \\cdot \\alpha ^ m + B`, où :math:`m` est la longueur de Clifford."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:422
msgid "From :math:`\\alpha` we can calculate the **Error per Clifford (EPC)**:"
msgstr "De :math:`\\alpha` nous pouvons calculer l'**Erreur par Clifford (EPC)**:"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:424
msgid "EPC = \\frac{2^n-1}{2^n} (1-\\alpha)  (where :math:`n=nQ` is the number of qubits)."
msgstr "EPC = \\frac{2^n-1}{2^n} (1-\\alpha) (où :math:`n=nQ` est le nombre de qubits)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:449
msgid "Plot After 1 Seed"
msgstr "Tracer Après 1 Graine"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:491
msgid "Plot with the Rest of the Seeds"
msgstr "Tracer avec le reste des graines"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:493
msgid "The plot is being updated after each seed."
msgstr "Le tracé est mis à jour après chaque graine."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:547
msgid "Add more shots to the data"
msgstr "Ajouter des images supplémentaires aux données"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:652
msgid "Predicted Gate Fidelity"
msgstr "Fidelity de la Porte Prédite"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:663
msgid "From the known depolarizing errors on the simulation we can predict the **fidelity**. First we need to count the number of **gates per Clifford**."
msgstr "À partir des erreurs de dépolarisation connues sur la simulation, nous pouvons prédire la **fidelity**. Nous devons d'abord compter le nombre de **gates par Clifford**."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:665
msgid "The function **gates\\_per\\_clifford** takes a list of transpiled RB circuits and outputs the number of basis gates in each circuit."
msgstr "La fonction **gates\\_per\\_clifford** prend une liste de circuits RB transpiilés et donne le nombre de portes de base dans chaque circuit."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:716
msgid "The function **calculate\\_2q\\_epc** gives measured errors in the basis gates that were used to construct the Clifford. It assumes that the error in the underlying gates is depolarizing. It outputs the error per a 2-qubit Clifford."
msgstr "La fonction **calculate\\_2q\\_epc** donne des erreurs mesurées dans les portes de base qui ont été utilisées pour construire le Clifford. Il part du principe que l'erreur dans les portes sous-jacentes est dépolarisante. Il génère l'erreur par un Clifford à 2-qubit."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:718
msgid "The input to this function is: - **gate\\_per\\_cliff:** dictionary of gate per Clifford. - **epg\\_2q:** EPG estimated by error model. - **qubit\\_pair:** index of two qubits to calculate EPC. - **list\\_epgs\\_1q:** list of single qubit EPGs of qubit listed in ``qubit_pair``. - **two\\_qubit\\_name:** name of two qubit gate in ``basis gates`` (default is ``cx``)."
msgstr "L'entrée de cette fonction est : - **gate\\_per\\_cliff:** dictionnaire de porte par Clifford. - **epg\\_2q:** EPG estimé par le modèle d'erreur. - **qubit\\_pair:** index de deux qubits pour calculer EPC. - **list\\_epgs\\_1q:** liste de qubit-unique EPGs des qubits listés dans ``qubit_pair``. - **two\\_qubit\\_name:** nom de portes de deux qubit dans ``basis gates`` (par défaut ``cx``)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:769
msgid "Run an RB Sequence with T1,T2 Errors"
msgstr "Exécuter une séquence RB avec des erreurs T1,T2"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:771
msgid "We now choose RB sequences that contain only 2-qubit Cliffords."
msgstr "Nous choisissons maintenant des séquences RB qui ne contiennent que des Cliffords 2-qubits."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:773
msgid "We execute these sequences as before, but with a noise model extended with T1/T2 thermal relaxation error, and fit the exponentially decaying curve."
msgstr "Nous exécutons ces séquences comme avant, mais avec un modèle de bruit étendu avec une erreur de relaxation thermique T1/T2 et ajustons la courbe en dégradation exponentielle."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:900
msgid "We count again the number of **gates per Clifford** as before, and calculate the **two-qubit Clifford gate error**, using the predicted primitive gate errors from the coherence limit."
msgstr "Nous comptons à nouveau le nombre de **gates per Clifford** comme avant, et calculons **two-qubit Clifford gate error**, en utilisant les erreurs de porte primitives prédites à partir de la limite de cohérence."

