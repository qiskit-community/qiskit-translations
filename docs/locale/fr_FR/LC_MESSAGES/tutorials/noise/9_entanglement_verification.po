msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-21 22:19+0000\n"
"PO-Revision-Date: 2022-04-21 23:16\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/9_entanglement_verification.po\n"
"X-Crowdin-File-ID: 9380\n"
"Language: fr_FR\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:10
msgid "This page was generated from `tutorials/noise/9_entanglement_verification.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/noise/9_entanglement_verification.ipynb`__."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:9
msgid "Entanglement Verification"
msgstr "Vérification de l'intrication"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:12
msgid "Introduction to the GHZ state"
msgstr "Introduction à l'état GHZ"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:14
msgid "**The Greenberger-Horne-Zeilinger (GHZ)** State is a :math:`n`-qubit entangled state best defined by the following state vector:"
msgstr "**L'État Greenberger-Horne-Zeilinger (GHZ)** est un état intriqué à :math:`n`-qubit que l'on peut. définir par le vecteur d'état suivant :"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:16
msgid "|{\\rm GHZ} \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}} , n > 2\n\n"
msgstr "|{\\rm GHZ} \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}} , n > 2\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:18
msgid "Characterization of the GHZ state is very useful in assessing multi-qubit interactions, whose robustness is key to developing large scale quantum computers."
msgstr "La caractérisation de l'état GHZ est très utile pour évaluer les interactions multi-qubits, dont la robustesse est une clé du développement d'ordinateurs quantiques à grande échelle."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:21
msgid "Characterizing a quantum state"
msgstr "Caractérisation d'un état quantique"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:23
msgid "Any mixed quantum state can be identified by a density matrix, defined as :math:`\\rho = \\sum_{i} p_i |\\psi_{i} \\rangle \\langle \\psi_{i}|`, where :math:`|\\psi_{i} \\rangle` are the pure quantum states forming the mixture and :math:`0 < p_i \\le 1`, :math:`\\sum_{i} p_i = 1` are the classical probabilities to be in state :math:`|\\psi_{i} \\rangle`. We denote the pure density matrix of an ideal GHZ State by :math:`\\rho_{p} \\equiv |{\\rm GHZ} \\rangle \\langle {\\rm GHZ}|`. We want to see how close this matrix is to the density matrix of a GHZ State as produced in an experiment, :math:`\\rho_{T}`. One method to quantify this similarity is to calculate the fidelity between the states, :math:`F(\\rho_{p},\\rho_{T})`"
msgstr "Tout état quantique mixte peut être identifié par une matrice de densité, définie comme :math:`\\rho = \\sum_{i} p_i |\\psi_{i} \\rangle \\langle \\psi_{i}|`, où :math:`|\\psi_{i} \\rangle` sont les états quantiques purs formant le mélange et :math:`0 < p_i \\le 1`, :math:`\\sum_{i} p_i = 1` sont les probabilités classiques d'être dans l'état :math:`|\\psi_{i} \\rangle`. Nous dénotons la matrice de densité pure d'un état GHZ idéal par :math:`\\rho_{p} \\equiv |{\\rm GHZ} \\rangle \\langle {\\rm GHZ}|`. Nous voulons voir à quel point cette matrice est proche de la matrice de densité d'un état GHZ telle qu'elle est produite dans une expérience, :math:`\\rho_{T}`. Une méthode pour quantifier cette similitude est de calculer la fidélité entre les états, :math:`F(\\rho_{p},\\rho_{T})`"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:26
msgid "F = \\Big[ Tr \\sqrt{\\sqrt{\\rho_{p}}\\rho_{T}\\sqrt{\\rho_{p}}} \\Big] ^{2}\n\n"
msgstr "F = \\Big[ Tr \\sqrt{\\sqrt{\\rho_{p}}\\rho_{T}\\sqrt{\\rho_{p}}} \\Big] ^{2}\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:28
msgid "The aim of this tutorial is two-fold: we will explore ways in which we can characterize the GHZ state, and ways in which we can use Ignis’ error mitigation tools to increase readout fidelity, regardless of characterization method"
msgstr "Le but de ce tutoriel est double: nous allons explorer des façons de caractériser l'état GHZ, et des façons dont nous pouvons utiliser la bibliothèque lgnis et ses outils d'atténuation des erreurs pour augmenter la fidélité de lecture, indépendamment de la méthode de caractérisation utilisée"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:30
msgid "Before we go further, let us import everything we will need from basic Qiskit:"
msgstr "Avant d'aller plus loin, importons tout ce dont nous aurons besoin à partir du Qiskit de base:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:62
msgid "The next two functions are from ignis. The first is for the general error mitigation technique, and the second is specifically for quantum tomography"
msgstr "Les deux fonctions suivantes sont issues dl'ignis. La première concerne la technique générale d'atténuation des erreurs, et la seconde est spécifique pour la tomographie quantique"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:85
msgid "The following import from the ``entanglement`` package contains information needed to create, parallelize and analyze GHZ State circuits"
msgstr "L'importation suivante depuis le package ``entanglement`` contient les informations nécessaires pour créer, paralléliser et analyser les circuits d'état GHZ"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:109
msgid "Preparing a GHZ State"
msgstr "Préparation d'un état GHZ"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:111
msgid "Let us first go over how to prepare a GHZ State:"
msgstr "Voyons d'abord comment préparer un État GHZ:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:113
msgid "Say we have a system of :math:`n` qubits, all prepared in the :math:`|0\\rangle` state:"
msgstr "Disons que nous avons un système de :math:`n` qubits, tous préparés dans l'état :math:` |0\\rangle`:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:115
msgid "|\\psi \\rangle = |00...0\\rangle\n\n"
msgstr "|\\psi \\rangle = |00...0\\rangle\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:117
msgid "We apply a Hadamard gate to the first qubit: :math:`|0\\rangle \\longrightarrow \\frac{1}{\\sqrt{2}}(|0\\rangle + |1\\rangle)`. Our state now looks like:"
msgstr "Nous appliquons une porte Hadamard au premier qubit: :math:`|0\\rangle \\longrightarrow \\frac{1}{ \\sqrt{2}} (| 0\\rangle + | 1\\rangle)`. Notre état se présente maintenant comme suit:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:119
msgid "|\\psi \\rangle = \\frac{|00...0\\rangle + |10...0\\rangle}{\\sqrt{2}}\n\n"
msgstr "|\\psi \\rangle = \\frac{|00...0\\rangle + |10...0\\rangle}{\\sqrt{2}}\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:121
msgid "Applying on this state a sequence of :math:`n-1` CNOT gate between the :math:`n^{th}` and :math:`(n+1)^{th}` qubits for :math:`n = 0 \\ldots n-1` leaves the :math:`n+1` qubit at :math:`|0\\rangle` if the :math:`n^{th}` is in :math:`|0\\rangle`, and at :math:`|1\\rangle` if the :math:`n^{th}` is in :math:`|1\\rangle`, thus creating the GHZ State:"
msgstr "Sur cet état, l'application d'une séquence de :math:`n-1` CNOT entre le :math:`n^{ieme}` et le :math:`(n+1)^{ieme}` qubits pour :math:`n = 0 \\ldots n-1` laisse le qubit :math:`n+1` à :math:`|0\\rangle` si le :math:`n^{th}` est dans l'état :math:`|0\\rangle`, et :math:`|1\\rangle` si le :math:`n^{ieme}` qubit est en :math:`|1\\rangle`, créant ainsi l'état GHZ:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:123
msgid "|GHZ \\rangle = \\frac{|00...0\\rangle + |11...1\\rangle}{\\sqrt{2}} \\equiv \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}}\n\n"
msgstr "|GHZ \\rangle = \\frac{|00...0\\rangle + |11...1\\rangle}{\\sqrt{2}} \\equiv \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}}\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:125
msgid "The following function creates this “linear” circuit that can measure the GHZ state:"
msgstr "La fonction suivante crée ce circuit \"linéaire\" qui peut mesurer l'état GHZ:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:209
msgid "Characterization, Part I"
msgstr "Caractérisation, Partie I"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:212
msgid "Multiple Quantum Coherence (MQC)"
msgstr "Coherence quantique multiple (MQC)"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:214
msgid "Multiple Quantum Coherence (MQC) works by taking the preliminary preparation of an :math:`n` qubit GHZ State, and rotating each of the qubit states around the z axis by a phase :math:`\\phi`. After that, we apply a X gate, i.e., a :math:`\\pi` pulse around the x axis. Then, we apply the inverse of the operations we originally applied to get the GHZ state. In an ideal situation the final state is :math:`|\\psi \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + e^{i n \\phi}|1 \\rangle ^{\\otimes n}}{\\sqrt{2}}`. We can ideally observe the phase collected by projecting :math:`|\\psi \\rangle` onto the state :math:`|0 \\rangle ^{\\otimes n}`. This technique is reminiscent of an echo sequence, and has been shown to substantially improve the fidelity during readout."
msgstr "La Cohérence Quantique Multiple (MQC) fonctionne en faisant la préparation préliminaire d'un état GHZ de :math:`n` qubits et en effectuant une rotation des états des qubits autour de l'axe z par une phase :math:`\\phi`. Après cela, nous appliquons une porte X, c'est-à-dire une impulsion de :math:`\\pi` autour de l'axe x. Ensuite, nous appliquons l'inverse des opérations que nous avons initialement appliquées pour obtenir l'état GHZ. Dans une situation idéale, l'état final est :math:`|\\psi \\rangle = \\frac{|0\\rangle ^{ \\otimes n} + e^{i n \\phi} |1 \\rangle^{\\otimes n}}{\\sqrt{2}}`. Idéalement nous pouvons observer la phase obtenue en projetant :math:`| \\psi \\rangle` sur l'état :math:`|0\\rangle^{\\otimes n}`. Cette technique est la conséquence d'une séquence d'écho et il a été démontré qu'elle améliore considérablement la fidélité au cours de la lecture."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:217
msgid "The function below creates a linear MQC circuit. As with every circuit from here on, you can change the ``full_measurement`` argument to toggle between full measurement of all qubits or measurement of only the control qubit. Full measurement yields the most accurate results, but for more than 7 qubits, it is recommended to set it to false, and observe only the oscillations between the ``'0'`` and ``'1'`` states."
msgstr "La fonction ci-dessous crée un circuit MQC linéaire. Comme pour chaque circuit ici, vous pouvez changer l'argument ``full_measurement`` pour basculer entre la mesure complète de tous les qubits ou la mesure de seulement le qubit de contrôle. La mesure complète donne les résultats les plus précis, mais pour plus de 7 qubits, il est recommandé de la définir à false et d'observer uniquement les oscillations entre les états ``0`` et ``1``."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:299
msgid "After running experiments on this MQC circuit, we can pick a state to observe oscillations as we sweep :math:`\\phi` from :math:`0` to :math:`2 \\pi`. Our signal in theory should follow :math:`S(\\phi) = \\frac{1}{2}(1+\\cos(n \\phi))`. We then perform a Discrete Fourier Transform (DFT: :math:`I_{v}=(1/N)|\\sum_{\\phi}e^{iv\\phi}S(\\phi)`) to extract the Fidelity of the state, defined by the bounds :math:`2\\sqrt{I_{n}} \\leq F \\leq \\sqrt{I_{0}/2}+ \\sqrt{I_{n}}`; if desired, an actual value for the fidelity can be obtained: :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1})+\\sqrt{I_{n}})` (arXiv:1905.05720)."
msgstr "Après avoir exécuté les expériences sur ce circuit MQC, nous pouvons choisir un état pour observer les oscillations lorsque nous faisons varier :math:`\\phi` de :math:`0` à :math:`2 \\pi`. Notre signal devrait en théorie suivre :math:`S(\\phi) = \\frac{1}{2}(1+\\cos(n \\phi)`. Nous effectuons ensuite une Transformation de Fourier Discrète (TFD: :math:`I_{v}=(1/N)|\\sum_{\\phi}e^{iv\\phi}S(\\\\phi)`) pour extraire la fidélité de l'état, définie par les limites :math:`2\\sqrt{I_{n}} \\leq F \\leq \\sqrt{I_{0}/2}+ \\sqrt{I_{n}}`; si désiré, une valeur réelle pour la fidélité peut être obtenue : :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1})+\\sqrt{I_{n}})` (arXiv:1905. 5720)."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:312
msgid "Parity Oscillations"
msgstr "Oscillations de parité"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:314
msgid "The next method we use to characterize the GHZ state is parity oscillations. After preparing a GHZ state, we apply a combination of rotations about the x and y axes to create various superposition states as a function of :math:`\\phi`: :math:`U(\\phi) = \\otimes_{j}^{N} e^{i\\frac{\\pi}{4}(\\cos(\\phi)\\sigma_{x}^{j}+\\sin(\\phi)\\sigma_{y}^{j})}`. We then measure the expectation value :math:`\\langle \\otimes_{j}^{N} \\sigma_{z}^{j} \\rangle_{\\phi}` as a function of :math:`\\phi`, which in theory should lead to parity oscillations between 1 and -1."
msgstr "L'autre méthode que nous utilisons pour caractériser l'état GHZ est l'oscillation de parité. Après avoir préparé l'état GHZ, nous appliquons une combinaison de rotations sur les axes x et y pour créer différents états de superposition en fonction de :math:`\\phi`: :math:`U(\\phi) = \\otimes_{j}^{N}e^{i\\frac{\\pi}{4}(\\cos(\\phi)\\sigma_{x}^{j}+\\sin(\\phi)\\sigma_{y}^{j})}`. Ensuite nous mesurons la valeur attendue :math:`\\langle \\otimes_{j}^{N} \\sigma_{z}^{j} \\rangle_{\\phi}` en fonction de :math:`\\phi`, Ce qui en théorie devrait amener les oscillations de parité à être entre 1 et -1."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:317
msgid "The following function generates a circuit which is the Parity Oscillation equivalent of the MQC circuit given above"
msgstr "La fonction suivante génère un circuit qui est l'équivalent en oscillation de parité du circuit MQC indiqué ci-dessus"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:366
msgid "We can obtain fidelity for parity oscillations :math:`S_{\\phi}` from :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1}+C)`, where :math:`C`, the coherence is defined as :math:`2\\sqrt{I_{n}}`, following the same convention for the DFT as with the MQC method."
msgstr "Nous pouvons obtenir la fidélité pour les oscillations de parité :math:` S_ { \\phi } ` de :math:` F = \\frac{1}{2}(P_{00...0}+ P_{11...1}+ C) `, où :math:` C `, la cohérence est définie comme :math:` 2\\sqrt { I_{n}} `, suivant la même convention pour la DFT que pour la méthode MQC."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:378
msgid "Tomography"
msgstr "Tomographie"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:380
msgid "Tomography measures the density matrix by producing many nominally identical states and measuring the state instances in different bases. The ideal result of a GHZ state is four equal density matrix elements at the 4 corners of the tensor-product basis, with all other elements vanishing. Although the fidelity can be readily calculated by this method, the method is slow (requires exponential number of measurements in n), and takes prohibitively long times if n is larger than 7 or so. Nevertheless, we will show below how to perform this method as it is relevant for small numbers of qubits."
msgstr "La tomographie mesure la matrice de densité en produisant de nombreux états nominalement identiques et en mesurant les instances d'état dans différentes bases. Le résultat idéal d'un état GHZ est de quatre éléments de matrice de densité égale aux 4 coins de la base du produit tensoriel, tous les autres éléments disparaissent. Bien que la fidélité puisse être facilement calculée par cette méthode, la méthode est lente (nécessite un nombre exponentiel de mesures par rapport à n), et devient très longue au delà de 7. Néanmoins, nous montrerons ci-dessous comment effectuer cette méthode car elle est pertinente pour un petit nombre de qubits."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:393
msgid "Parallelizing circuits"
msgstr "Parallélisation des circuits"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:395
msgid "The above “linear” circuits are good to perform simulations, but what do we do when we use real devices, where the system can have an arbitrary topology and various errors? We are specifically targeting real hardware here, not just Aer simulation. One technique to reduce real-hardware effects is to parallelize the CNOT gates and thus create a shorter-depth circuit. This can be hugely beneficial efficiency wise, and fidelity wise. The class ``BConfig`` from the module ``parallelize`` does exactly this."
msgstr "Les circuits \"linéaires\" ci-dessus conviennent pour effectuer des simulations, mais comment faire lorsque nous utilisons des dispositifs réels, où le système peut avoir une topologie arbitraire et diverses erreurs ? Nous ciblons spécifiquement le matériel réel ici, pas seulement la simulation Aer. Une technique pour réduire les effets du matériel réel est de paralléliser les portes CNOT et ainsi créer un circuit plus court. Cela peut être extrêmement bénéfique en termes d'efficacité et de fidélité. La classe ``BConfig`` du module ``parallelize`` fait justement cela."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:398
msgid "First we must configure the optimal backend we want to use. We will consider a simulation backend, ``'ibmq_qasm_simulator'``, disguised as a real device, ``'ibmq_16_melbourne'`` by using a the mock backend ``'FakeMelbourne'``"
msgstr "Tout d'abord, nous devons configurer le backend optimal que nous voulons utiliser. Nous considérerons un backend de simulation, ``ibmq_qasm_simulateur``, déguisé en un véritable appareil, ``ibmq_16_melbourne`` en utilisant un faux backend ``FakeMelbourne``"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:422
msgid "Using the ``noise`` module, we can now define a noise model from ``'ibmq_16_melbourne'`` to “assign” to ``'ibmq_qasm_simulator'``."
msgstr "A l'aide du module ``noise``, nous pouvons maintenant définir un modèle de bruit issu de `` ibmq_16_melbourne`` pour l'assigner sur l'émulateur : ``ibmq_qasm_simulateur``."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:445
msgid "And there we have it. From now on, in the tutorial, when using a real device, not a simulation, just take out every mention and assignment of ``noise_model`` and ``coupling_map``, and assign the real device to ``backend``. The simulator used from now on is no substitute for running a real device."
msgstr "Et là, nous l'avons. A partir de maintenant, dans le tutoriel, lors de l'utilisation d'un véritable appareil, pas d'une simulation, il suffit de mentionner le ``noise_model`` et ``coupling_map``, et d'assigner le vrai dispositif à ``backend``. Le simulateur utilisé à partir de maintenant n'est pas un substitut à l'exécution d'un véritable appareil."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:456
msgid "``BConfig`` lays the blueprint for creating parallelized circuits. Let us initialize an object taking in the real device we just defined, and name it ``protocirc``. All of our experiments will use it:"
msgstr "''BConfig'' pose le modèle pour la création des circuits parallélisés. Nous permettant d'initialiser un objet tiré d'un appareil réel que nous avons défini, et nommé ``protocirc``. Toutes nos expériences vont l'utiliser :"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:478
msgid "Error Mitigation"
msgstr "Atténuation d'erreurs"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:480
msgid "Qiskit Ignis provides very accurate tools to take raw data and return calibrated data. This is done by getting the raw data, in the form of a vector :math:`v_{raw}` and getting a calibration matrix :math:`A`. The output is then the solution to the optimization problem: :math:`argmin_{v_{cal}} ||Av_{cal}-v_{raw}||^{2}`"
msgstr "Qiskit Ignis fournit des outils très précis pour prendre des données brutes et retourner les données calibrées. Pour ce faire, on obtient les données brutes, sous la forme d'un vecteur :math:` v_{raw}` et on obtient une matrice d'étalonnage :math:`A`. La sortie est alors la solution au problème d'optimisation: :math:` argmin_ { v_{cal}} | | Av_{cal}-v_{raw}| | ^{2}`"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:492
msgid "Experiment Time"
msgstr "Phase d'expérimentation"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:495
msgid "Preliminary Steps"
msgstr "Étapes préliminaires"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:497
msgid "The probabilities of measuring :math:`|0\\rangle ^{\\otimes n}` and :math:`|1\\rangle^{\\otimes n}` in the GHZ state are important in calculating fidelity. For this, we need to run the following test"
msgstr "Les probabilités de mesurer :math:`|0\\rangle ^ { \\otimes n }` et :math:` | 1\\rangle ^ { \\otimes n }` dans l'état GHZ sont importantes pour le calcul de la fidélité. Pour cela, nous devons exécuter le test suivant :"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:508
msgid "We begin by defining standard execution parameters:"
msgstr "Nous commençons par définir les paramètres d'exécution standard :"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:936
msgid "Now with error mitigation:"
msgstr "Maintenant, avec l'atténuation des erreurs :"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1079
msgid "We will load these values in a dictionary for assessing fidelity later on:"
msgstr "Nous allons charger ces valeurs dans un dictionnaire pour pouvoir évaluer la fidélité par la suite :"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1101
msgid "Part 1 : MQC"
msgstr "Partie 1 : MQC"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1103
msgid "We now retrieve a parallelized MQC circuit for the n qubit device"
msgstr "Nous avons maintenant récupéré le circuit parallélisé MQC pour l'appareil à n qubits"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1166
msgid "We now execute the MQC experiment:"
msgstr "Nous exécutons maintenant l'expérience MQC :"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1213
msgid "Now we will plot the amount of counts measured for :math:`|0 \\rangle ^{\\otimes n}` as a function of phase. It is important to note that when using a parametrized circuit like the one here, the method ``get_counts()`` accepts an **index** and not a **circuit**. In any other type of experiment, ``get_counts()`` accepts a **circuit**."
msgstr "Nous allons maintenant tracer la quantité d'occurrences mesurées pour :math:`| 0 \\rangle ^ { \\otimes n }` en fonction de la phase. Il est important de noter que lors de l'utilisation d'un circuit paramétré comme celui ici, la méthode ``get_counts()`` accepte un **index** et non un **circuit**. Dans tout autre type d'expérience, ``get_counts()`` accepte un ** circuit**."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1244
msgid "Now we get started on error mitigation. We create an identical quantum register and use complete_meas_cal from Ignis, to create circuits for calibrated measurements to be executed, and a calibration matrix."
msgstr "Maintenant nous commençons avec l'atténuation des erreurs. Nous créons un registre quantique identique et utilisons complete_meas_cal de Ignis, pour créer les circuits pour les mesures calibrées à exécuter, ainsi qu'une matrice d'étalonnage."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1314
msgid "Finally, we have our error mitigated results:"
msgstr "Enfin, nous avons nos résultats avec les erreurs atténuées :"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1335
msgid "We can see how the error mitigated results yield a far greater fidelity than the raw data"
msgstr "Nous pouvons voir comment les résultats utilisant l'atténuation d'erreur produisent une fidélité beaucoup plus grande que les données brutes"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1470
msgid "We now plot the DFT and compare the heights of the peaks to give bounds for the fidelity"
msgstr "Nous traçons maintenant la DFT et comparons les hauteurs des pics pour donner des bornes pour la fidélité"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1481
msgid "Statistical bootstrapping has found that the error on these measurements is at most 1.5% (arXiv 1905.05720), so these result fall within error bounds, despite the fidelity being slightly higher than the upper bound, and show how error mitigation dramatically increases fidelity"
msgstr "Le bootstrap statistique a permis de constater que l'erreur sur ces mesures est au plus de 1,5% (arXiv 1905.05720), de sorte que ces résultats se situent à l'intérieur des limites d'erreur, malgré la fidélité légèrement supérieure à la limite haute, et montrent comment l'atténuation des erreurs augmente considérablement la fidélité"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1493
msgid "Part 2: Parity Oscillation"
msgstr "Partie 2 : Oscillation de parité"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1495
msgid "We now retrieve a parallelized Parity Oscillation circuit for the n qubit device, and run experiments in the same fashion as we did in MQC."
msgstr "Nous récupérons maintenant un circuit d'Oscillation de Parité parallélisé pour l'appareil à n qubits, et nous exécutons les expériences de la même façon dont nous l'avions fait dans MQC."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1595
msgid "Now we construct the :math:`\\otimes _{j}^{N} \\sigma_z^{j}` matrix for instruction, although this is already taken into account in the following method, ``entanglement.analysis.composite_pauli_z_expvalue()``:"
msgstr "Nous construisons à présent a matrice :math:` \\otimes _{j}^{N} \\sigma_z ^{j}` pour l'instruction, bien que cette méthode soit déjà prise en compte dans la méthode suivante: ``entanglement.analysis.composite_pauli_z_expvalue ()``:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1618
msgid "Now we want to make sure that our list of counts is correctly ordered so that it coincides with the states of the :math:`\\otimes _{j}^{N} \\sigma_z^{j}`, so that calculating :math:`\\langle \\otimes _{j}^{N} \\sigma_z^{j} \\rangle` will be as simple as taking the dot product of this ordered list with the diagonal of :math:`\\otimes _{j}^{N} \\sigma_z^{j}`. The ``composite_pauli_z_expvalue`` function does just that; it takes a circuit and appropriately orders the state vector counts. We can plot this dot product as a function of :math:`\\phi` to observe parity oscillations."
msgstr "Maintenant nous voulons nous assurer que notre liste de compteurs est correctement ordonnée afin qu'elle coïncide avec les états des :math:`\\otimes _{j}^{N} \\sigma_z ^{j}`, de sorte que le calcul de :math:`\\langle \\otimes _{j}^{N} \\sigma_z^{j} \\rangle` sera aussi simple que de prendre le produit à points de cette liste ordonnée avec la diagonale de :math:`\\otimes _{j}^{N} \\sigma_z ^{j}`. La fonction ``composite_pauli_z_expvalue`` fait exactement cela ; elle prend un circuit et ordonne correctement le nombre de vecteurs d'état. Nous pouvons tracer ce produit en tant que fonction de :math:`\\phi` pour observer les oscillations de parité."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1669
msgid "Now for standard error mitigation:"
msgstr "Maintenant, pour l'atténuation standard des erreurs :"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1768
msgid "We can see how error mitigation dramatically improves our measurement (much more so in PO than in MQC). Let us quantify this using the same DFT method we used in MQC, and calculating the actual fidelities:"
msgstr "Nous pouvons voir comment l'atténuation des erreurs améliore considérablement notre mesure (beaucoup mieux dans PO que dans MQC). Quantifions ceci en utilisant la même méthode DFT que nous avons utilisée dans MQC, et calculons les fidélités effectives :"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1858
msgid "As we see, the raw fidelity is much lower than what is achieved with MQC, but the error mitigated result is about the same."
msgstr "Comme nous le voyons, la fidélité brute est plus petite que ce qui est obtenu avec MQC, mais le résultat provenant de l'atténuation des erreurs est du même ordre."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1870
msgid "Part 3: Tomography"
msgstr "Partie 3: Tomographie"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1872
msgid "The first step in this experiment to just pass a simple GHZ state with *no* measurements. Also, the circuit cannot be transpiled; the ``transpiled`` argument in the ``getGHZChecker()`` method can be turned on and off as is shown"
msgstr "La première étape de cette expérience est de passer un état GHZ simple *sans* opération de mesure. De plus, le circuit ne peut pas être transpilé ; l'argument ``transpiled`` dans la méthode ``getGHZChecker ()`` peut être activé et désactivé comme indiqué"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1907
msgid "We now pass a simulated backend from ``Aer`` to get theoretical statevector counts"
msgstr "Nous avons maintenant un backend simulé par ``Aer`` pour obtenir les quantités théoriques des états vectoriels"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1954
msgid "This following code runs tomography experiments on the circuit we defined first, which is then compared to the theoretical statevector to generate a density matrix"
msgstr "Le code suivant exécute les expériences de tomographie sur le circuit défini préalablement, ceci est ensuite comparé au vecteur d'état théorique pour générer une matrice de densité"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2010
msgid "From here we can get the fidelity, although this method is not as fool proof as the one we will get to eventually:"
msgstr "De là, nous pouvons obtenir la fidélité, bien que cette méthode ne soit pas aussi robuste que celle à laquelle nous arriverons à la fin :"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2031
msgid "…And now for error mitigation…"
msgstr "…Et maintenant pour l'atténuation des erreurs…"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2113
msgid "Now, using ``qiskit.visualization``, we can plot the raw density matrix, real, and imaginary parts being on separate plots,…"
msgstr "Maintenant, en utilisant ``qiskit.visualization``, nous pouvons tracer la matrice de densité brute, les parties réelles et imaginaires, sur des tracés séparés…"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2152
msgid "And also the error mitigated density matrix,…"
msgstr "Et aussi la matrice de densité après l'atténuation des erreurs …"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2191
msgid "The actual density matrices can be obtained using the ``fit()`` method. Once we have the density matrix, we can compute the fidelity, which is nothing but half the sum of the four corners of the density matrix; the following method helps us:"
msgstr "Les matrices de densité réelles peuvent être obtenues à l'aide de la méthode ``fit ()``. Une fois que nous avons la matrice de densité, nous pouvons calculer la fidélité, qui n'est que la moitié de la somme des quatre coins de la matrice de densité ; la méthode suivante nous aide:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2270
msgid "As we see, the raw fidelity is much lower than what is achieved with either MQC or Parity Oscillations, but the error mitigated result is about the same."
msgstr "Comme nous le voyons, la fidélité brute est plus petite que ce qui est obtenu avec MQC, mais le résultat provenant de l'atténuation des erreurs est similaire."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2272
msgid "**A note on tomography**"
msgstr "**Une note sur la tomographie**"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2274
msgid "Do not perform quantum tomography with >5 qubits"
msgstr "Ne pas effectuer de tomographie quantique avec > 5 qubits"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2286
msgid "Conclusion"
msgstr "Conclusion"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2288
msgid "In conclusion, we see that without error mitigation, MQC is the superior method for characterizing the GHZ state. However, with error mitigation, all methods can, at least for a small number of qubits, achieve a much greater fidelity, and all near the same value. To get more accurate results, aside from using a real device, it is worth increasing the number of shots four to eight-fold. It may be worth comparing how the parallelized circuits used in this notebook perform fidelity-wise versus linearized circuits."
msgstr "En conclusion, nous voyons que sans atténuation des erreurs, le MQC est la meilleure méthode pour caractériser l'état GHZ. Cependant, avec l'atténuation des erreurs, toutes les méthodes peuvent, au moins pour un petit nombre de qubits, réaliser une fidélité beaucoup plus grande, toutes dans le même ordre de grandeur. Pour obtenir des résultats plus précis, mis à part l'utilisation d'un dispositif réel, il est utile d'augmenter le nombre d'executions par un facteur de quatre à huit fois. Il peut aussi être utile de comparer la façon dont les circuits parallèles utilisés dans ce bloc-notes se comportent du point de vue de la fidélité par rapport à des circuits linéarisés."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2301
msgid "External collaborators"
msgstr "Collaborateurs externes"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2303
msgid "Rohith Karur"
msgstr "Rohith Karur"

