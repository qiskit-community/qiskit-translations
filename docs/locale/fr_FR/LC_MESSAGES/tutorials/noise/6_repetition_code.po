msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-14 09:35+0000\n"
"PO-Revision-Date: 2020-07-20 09:57\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/6_repetition_code.po\n"
"X-Crowdin-File-ID: 9142\n"
"Language: fr_FR\n"

#: ../../tutorials/noise/6_repetition_code.ipynb:10
msgid "This page was generated from `tutorials/noise/6_repetition_code.ipynb`__."
msgstr "Cette page a été générée à partir de `tutorials/noise/6_repetition_code.ipynb`__."

#: ../../tutorials/noise/6_repetition_code.ipynb:9
msgid "Repetition Codes"
msgstr "Codes de répétition"

#: ../../tutorials/noise/6_repetition_code.ipynb:21
msgid "Introduction"
msgstr "Introduction"

#: ../../tutorials/noise/6_repetition_code.ipynb:23
msgid "In quantum error correction we take many noisy qubits (which we call *physical qubits*) and use them to store a smaller number of *logical qubits*. The error correction procedure is designed to detect and correct for the effects of noise. This makes the logical qubits much less noisy and more reliable than the physical ones from which they are built."
msgstr "Dans la correction des erreurs quantiques, nous prenons beaucoup de qubits bruyants (que nous appelons *physical qubits*) et nous les utilisons pour stocker un nombre plus petit de *logical qubits*. La procédure de correction des erreurs est conçue pour détecter et corriger les effets du bruit. Cela rend les qubits logiques beaucoup moins bruyants et plus fiables que les qubits physiques à partir desquels ils sont construits."

#: ../../tutorials/noise/6_repetition_code.ipynb:25
msgid "The repetition code is a simple example of quantum error correction, in which a logical *bit* is stored rather than a logical *qubit*. A given instance of the repetition code is defined by two numbers, which we call :math:`d` and :math:`T`."
msgstr "Le code de répétition est un exemple simple de correction d'erreur quantique, dans lequel un *bit* logique est stocké plutôt qu'un *qubit* logique. Une instance donnée du code de répétition est définie par deux nombres, que nous appelons :math:`d` et :math:`T`."

#: ../../tutorials/noise/6_repetition_code.ipynb:27
msgid "The :math:`d` parameter determines how many physical qubits are used. The actual information about the logical bit is stored in :math:`d` qubits (which we'll call *code qubits*). The encoding is done in a very simple way: to encode a ``0``, all these qubits are set in the state :math:`|0\\rangle`, to encode a ``1`` they are set to :math:`|1\\rangle`. To readout the value, you can just look at any qubit. To read it out in a way that protects against single qubit errors, you can read out all the qubits and take a majority vote."
msgstr "Le paramètre :math:`d` détermine le nombre de qubits physiques utilisés. Les informations réelles sur le bit logique sont stockées dans les qubits :math:`d` (que nous appellerons *code qubits*). L'encodage se fait de manière très simple : encoder un ``0``, tous ces qubits sont définis dans l'état :math:`|0\\rangle`, pour encoder un ``1``, ils sont définis à :math:`|1\\rangle`. Pour lire la valeur, vous pouvez juste regarder n'importe quel qubit. Pour le lire d'une manière qui protège contre les erreurs de qubit-uniques, vous pouvez lire tous les qubits et prendre un vote à la majorité."

#: ../../tutorials/noise/6_repetition_code.ipynb:30
msgid "It is not only at readout that we can extract useful information that will help us correct errors. We can also extract information while the logical bit sits idle, or even while it is involved in computation."
msgstr "Ce n'est pas seulement à la lecture que nous pouvons extraire des informations utiles qui nous aideront à corriger les erreurs. Nous pouvons également extraire des informations alors que le bit logique est inactif, ou même lorsqu'il est impliqué dans le calcul."

#: ../../tutorials/noise/6_repetition_code.ipynb:32
msgid "Since this is an exercise in quantum error correction, we will do this in a way that would also work for logical *qubits*. Specifically, our method of extracting information about errors must not extract any information regarding the stored logical information. In the quantum case, this is required so that we do not disturb superposition states of the stored qubits."
msgstr "Comme il s'agit d'un exercice de correction d'erreurs quantiques, nous le ferons d'une manière qui fonctionnerait également pour les *qubits* logiques. Plus précisément, notre méthode d'extraction d'informations sur les erreurs ne doit pas extraire d'informations concernant les informations logiques stockées. Dans le cas de quantique, cela est nécessaire pour que nous ne perturbions pas les états de superposition des qubits stockés."

#: ../../tutorials/noise/6_repetition_code.ipynb:34
msgid "We will extract information over :math:`T` rounds of *syndrome measurements*. For the repetition code, these are based on the fact that all code qubits should be in the same state (all :math:`|0\\rangle` or all :math:`|1\\rangle`). Any departure from this is therefore a signature of error. Specifically, we imagine our :math:`d` code qubits sitting along a line. We will then perform a measurement on each pair of neighboring code qubits. This will tell us whether they are the same or different, without extracting any information on what their values are."
msgstr "Nous allons extraire des informations sur les :math:`T` tours de *syndrome measurements* (mesures du syndrome). Pour le code de répétition, elles sont basées sur le fait que toutes les qubits de code doivent être dans le même état (tous :math:`|0\\rangle` ou tous :math:`|1\\rangle`). Toute dérogation est donc une signature d'erreur. Plus précisément, nous imaginons nos :math:`d` code qubits assis le long d'une ligne. Nous procéderons alors à une mesure sur chaque paire de qubits de code voisins. Cela nous dira si elles sont identiques ou différentes, sans extraire aucune information sur leurs valeurs."

#: ../../tutorials/noise/6_repetition_code.ipynb:37
msgid "The implementation of these measurements requires :math:`d-1` additional qubits, which we will call *link qubits* for the repetition code. By pefforming two CNOTs between the pair of code qubits and a corresponding link qubit, the required information (and only the required information) is placed on the link qubit and can then be measured."
msgstr "L'implémentation de ces mesures nécessite :math:`d-1` qubits supplémentaires, que nous appellerons *link qubits* (qubit de lien) pour le code de répétition. En pefformant deux CNOT entre la paire de qubits de code et un qubit de lien correspondant, les informations requises (et seulement les informations requises) sont placées sur le qubit de lien et peuvent ensuite être mesurées."

#: ../../tutorials/noise/6_repetition_code.ipynb:95
msgid "Here we provide tools for creating and testing repetition codes. The first thing we need to do is import them."
msgstr "Ici, nous fournissons des outils pour créer et tester les codes de répétition. La première chose à faire est de les importer."

#: ../../tutorials/noise/6_repetition_code.ipynb:119
msgid "Creating a repetition code"
msgstr "Création d'un code de répétition"

#: ../../tutorials/noise/6_repetition_code.ipynb:121
msgid "The ``repetition_code`` class creates a code for given values of :math:`d` and :math:`T`."
msgstr "La classe ``repetition_code`` crée un code pour les valeurs données de :math:`d` et :math:`T`."

#: ../../tutorials/noise/6_repetition_code.ipynb:144
msgid "With this we can inspect various properties of the code, such as the names of the qubit registers used for the code and ancilla qubits."
msgstr "Avec cela, nous pouvons inspecter diverses propriétés du code, comme les noms des registres de qubit utilisés pour le code et les qubits de ancilla."

#: ../../tutorials/noise/6_repetition_code.ipynb:185
msgid "These registers are also attributes of the ``repetition_code`` object."
msgstr "Ces registres sont aussi des attributs de l'objet ``repetition_code``."

#: ../../tutorials/noise/6_repetition_code.ipynb:226
msgid "You can also access the quantum circuits that implement the code. Two of these are produced: one for each of the two possible logical bit values."
msgstr "Vous pouvez également accéder aux circuits quantiques qui implémentent le code. Deux d'entre eux sont donnés: un pour chacune des deux valeurs possibles de bits logiques."

#: ../../tutorials/noise/6_repetition_code.ipynb:479
msgid "Building a custom repetition code"
msgstr "Génération d'un code de répétition personnalisé"

#: ../../tutorials/noise/6_repetition_code.ipynb:481
msgid "You can also implement measurement rounds and logical ``X`` gates yourself. For example, let's set up a code with no syndrome measurement rounds."
msgstr "Vous pouvez également implémenter des tours de mesure et des portes logiques ``X`` vous-même. Par exemple, mettons en place un code sans cycles de mesure du syndrome."

#: ../../tutorials/noise/6_repetition_code.ipynb:502
msgid "This does nothing but set up two circuits for the two logical encoded states. There are no syndrome measurement rounds, and no final readout."
msgstr "Cela ne fait que mettre en place deux circuits pour les deux états codés logiquement. Il n'y a pas de cycle de mesure du syndrome et pas de lecture finale."

#: ../../tutorials/noise/6_repetition_code.ipynb:601
msgid "We can add a round using the ``syndrome_measurement()`` method."
msgstr "Nous pouvons ajouter un cycle en utilisant la méthode ``syndrome_measurement()``."

#: ../../tutorials/noise/6_repetition_code.ipynb:712
msgid "A logical ``X`` operation can be added using the ``x()`` method."
msgstr "Une opération logique ``X`` peut être ajoutée en utilisant la méthode ``x()``."

#: ../../tutorials/noise/6_repetition_code.ipynb:823
msgid "This also has a ``logs`` kwarg, which is a list of the circuits for which ``X`` is applied. This is ``['0','1']`` by default."
msgstr "Ceci a également un kwarg (argument), ``logs``, qui est une liste des circuits pour lesquels ``X`` est appliqué. C'est ``['0','1']`` par défaut."

#: ../../tutorials/noise/6_repetition_code.ipynb:834
msgid "Final readout is then done with the ``readout()`` method."
msgstr "La lecture finale est alors faite avec la méthode ``readout()``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1012
msgid "Running a repetition code"
msgstr "Exécution d'un code de répétition"

#: ../../tutorials/noise/6_repetition_code.ipynb:1014
msgid "The code object produces the circuits required for the code. The user can then run them using any method they prefer, allowing full control over compilation, backends, noise models and so on."
msgstr "L'objet code produit les circuits requis pour le code. L'utilisateur peut ensuite les exécuter en utilisant n'importe quelle méthode qu'il préfère, en permettant un contrôle total de la compilation, des backends (plateformes quantiques), des modèles de bruit, etc."

#: ../../tutorials/noise/6_repetition_code.ipynb:1016
msgid "For example, here we run them without noise on the ``qasm_simulator``."
msgstr "Par exemple, ici nous les exécutons sans bruit sur le ``qasm_simulator``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1076
msgid "Here the strings from right to left represent the outputs of the syndrome measurement rounds, followed by the final measurement of the code qubits."
msgstr "Ici, les chaînes de droite à gauche représentent les sorties des cycles de mesure du syndrome, suivies de la mesure finale des qubits de code."

#: ../../tutorials/noise/6_repetition_code.ipynb:1078
msgid "These results need to be rewritten in a different form in order to be decoded. To do this we can use the ``process_results`` method of the code object."
msgstr "Ces résultats doivent être réécrits sous une forme différente pour être décodés. Pour cela, nous pouvons utiliser la méthode ``process_results`` de l'objet code."

#: ../../tutorials/noise/6_repetition_code.ipynb:1119
msgid "The result is a dictionary whose keys are bit strings that represent outputs of the circuit, and the values represent the number of shots for which this output occurred."
msgstr "Le résultat est un dictionnaire dont les clés sont des chaînes de bits qui représentent les sorties du circuit, et les valeurs représentent le nombre d'exécutions pour lesquelles cette sortie s'est produite."

#: ../../tutorials/noise/6_repetition_code.ipynb:1121
msgid "The strings are not the direct output from the circuits. They have been processed to take the form that helps us correct errors. Here's a short guided tour."
msgstr "Les chaînes de caractères ne sont pas la sortie directe des circuits. Ils ont été traités pour prendre la forme qui nous aide à corriger les erreurs. Voici une courte visite guidée."

#: ../../tutorials/noise/6_repetition_code.ipynb:1123
msgid "The ``0 0`` to the far left for the logical ``0`` result, and the ``1 1`` to the far left of the logical ``1``, are the logical readout. Any code qubit could be used for this readout, since they should (without errors) all be equal. So we could have just one result here, for one arbitrarily chosen code qubit. Or we could have :math:`d`, one for each qubit. Instead we have two, from the two qubits at either end of the line. This is because it works best with the decoder (which we'll use later). In the absence of errors, these two values will always be equal."
msgstr "Le ``0 0`` à l'extrême gauche pour le résultat logique ``0`` et le ``1 1`` à l'extrême gauche de la logique ``1``, sont les lectures logiques. N'importe quel qubit de code peut être utilisé pour cette lecture, car ils devraient tous être égaux (sans erreurs). Nous pourrions donc avoir un seul résultat ici, pour un qubit de code arbitrairement choisi. Ou nous pourrions avoir :math:`d`, un pour chaque qubits. Au lieu de cela, nous en avons deux, à chaque extrémité de la ligne. C'est parce qu'il fonctionne mieux avec le décodeur (que nous utiliserons plus tard). En l'absence d'erreurs, ces deux valeurs seront toujours égales."

#: ../../tutorials/noise/6_repetition_code.ipynb:1126
msgid "The following ``0000`` is the :math:`d-1` results of the syndrome measurements for the first round.A ``0`` implies that the corresponding pair of qubits where the same, and ``1`` implies different. There are :math:`d-1` results because the line of :math:`d` code qubits has :math:`d-1` possible neighboring pairs. In the absence of errors, they will all be ``0``."
msgstr "Le ``0000`` suivant est le résultat :math:`d-1` des mesures du syndrome pour le premier cycle. ``0`` implique que la paire correspondante de qubits sont le même et ``1`` implique différent. Il y a :math:`d-1` résultats parce que la ligne de :math:`d` qubits de code a :math:`d-1` paires voisines possibles. En l'absence d'erreurs, ils seront tous ``0``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1128
msgid "The ``0000`` that follows that is the syndrome change between the first and second rounds. It is therefore the bitwise ``OR`` of the syndrome measurement results from the second round with those from the first. In the absence of errors, they will all be ``0``."
msgstr "Le ``0000`` qui suit est le changement de syndrome entre le premier et le second cycle. C'est donc le ``OR`` au niveau du bit des résultats de la mesure du syndrome du deuxième cycle avec ceux du premier. En l'absence d'erreurs, ils seront tous ``0``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1130
msgid "Subsequent blocks follow the same formula, though the last requires some comment. This is not measured using the standard method (with a link qubit). Instead it is calculated from the final readout measurement of all code qubits. Again it is presented as a syndrome change, and will be all ``0`` in the absence of errors. This is the :math:`T+1`-th block of syndrome measurements since, as it is not done in the same way as the others, it is not counted among the :math:`T` syndrome measurement rounds."
msgstr "Les blocs suivants suivent la même formule, bien que le dernier nécessite un commentaire. Ceci n'est pas mesuré à l'aide de la méthode standard (avec un qubit de lien). Au lieu de cela, il est calculé à partir de la mesure de lecture finale de tous les qubits de code. Encore une fois, il est présenté comme un changement de syndrome, et sera tout ``0`` en l'absence d'erreurs. Ceci est le :math:`T+1`-ème bloc des mesures du syndrome puisqu'il n'est pas compté parmi les cycles de mesure du syndrome :math:`T`, car il n'est pas fait de la même manière que les autres."

#: ../../tutorials/noise/6_repetition_code.ipynb:1133
msgid "**Example 1:** ``0 0  0110 0000 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``0``. The syndrome shows that (most likely) the middle code qubit was flipped by an error before the first measurement round. This causes it to disagree with both neighboring code qubits for the rest of the circuit. This is shown by the syndrome in the first round, but the blocks for subsequent rounds do not report it as it no longer represents a change. Other sets of errors could also have caused this syndrome, but they would need to be more complex and so presumably less likely."
msgstr "**Exemple 1:** ``0 0 0110 0000 0000`` représenterait un code de répétition :math:`d=5`, :math:`T=2` avec un code de répétition encodé ``0``. Le syndrome montre que (très probablement) le qubit de code au milieu a été retourné par une erreur avant le premier cycle de mesure. Cela le fait en désaccord avec les deux qubits de code voisins pour le reste du circuit. Ceci est montré par le syndrome dans le premier cycle, mais les blocs pour les cycles suivants ne le signalent pas car il ne représente plus un changement. D'autres séries d'erreurs auraient également pu causer ce syndrome, mais elles auraient besoin d'être plus complexes et donc probablement moins probables."

#: ../../tutorials/noise/6_repetition_code.ipynb:1136
msgid "**Example 2:** ``0 0  0010 0010 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``0``. Here one of the syndrome measurements reported a difference between two code qubits in the first round, leading to a ``1``. The next round did not see the same effect, and so resulted in a ``0``. However, since this disagreed with the previous result for the same syndrome measurement, and since we track syndrome changes, this change results in another ``1``. Subsequent rounds also do not detect anything, but this no longer represents a change and hence results in a ``0`` in the same position. Most likely the measurement result leading to the first ``1`` was an error."
msgstr "**Exemple 2:** ``0 0 0010 0010 0000`` représenterait un code de répétition :math:`d=5`, :math:`T=2` avec un code de répétition encodé ``0``. Ici, une des mesures du syndrome a rapporté une différence entre deux qubits de code au premier cycle, conduisant à un ``1``. Le cycle suivant n'a pas vu le même effet, et a donc abouti à un ``0``. Cependant, étant donné que cela n'est pas en accord avec le résultat précédent pour la même mesure du syndrome, et que nous suivons les changements du syndrome, ce changement entraîne un autre ``1``. Les cycles suivants ne détectent rien non plus, mais cela ne représente plus un changement et donne donc un ``0`` dans la même position. Le résultat de mesure conduisant au premier ``1`` est probablement une erreur."

#: ../../tutorials/noise/6_repetition_code.ipynb:1139
msgid "**Example 3:** ``0 1  0000 0001 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``1``. A code qubit on the end of the line is flipped before the second round of syndrome measurements. This is detected by only a single syndrome measurement, because it is on the end of the line. For the same reason, it also disturbs one of the logical readouts."
msgstr "**Exemple 3:** ``0 1 0000 0001 0000`` représenterait un code de répétition :math:`d=5`, :math:`T=2` avec un code de répétition encodé ``1``. Un qubit de code à la fin de la ligne est retourné avant le deuxième cycle de mesures du syndrome. Ceci est détecté par une seule mesure de syndrome, car il est à la fin de la ligne. Pour la même raison, il perturbe aussi une des lectures logiques."

#: ../../tutorials/noise/6_repetition_code.ipynb:1141
msgid "Note that in all these examples, a single error causes exactly two characters in the string to change from the value it would have with no errors. This is, in fact, the reason why the logical output consists of both endpoints. It is a property that will be used by the decoder."
msgstr "Notez que dans tous ces exemples, une seule erreur entraîne exactement deux caractères dans la chaîne de caractères à changer de la valeur qu'elle aurait sans erreur. C'est en fait la raison pour laquelle la sortie logique se compose des deux extrémités. C'est une propriété qui sera utilisée par le décodeur."

#: ../../tutorials/noise/6_repetition_code.ipynb:1152
msgid "To see the effects of noise, we need to specify a noise model. For example, let's set up a simple noise model with gate and measurement errors."
msgstr "Pour voir les effets du bruit, il faut spécifier un modèle de bruit. Par exemple, mettons en place un modèle de bruit simple avec des erreurs de porte et de mesure."

#: ../../tutorials/noise/6_repetition_code.ipynb:1197
msgid "This can then be run to generate noisy results. Let's make a quick function to do this, and then run it."
msgstr "Cela peut alors être exécuté pour générer des résultats bruyants. Faisons une fonction rapide pour faire cela, puis exécutez-le."

#: ../../tutorials/noise/6_repetition_code.ipynb:1457
msgid "Here the non-noisy results are the most likely. The rest of the samples are distributed among other possibilities with non-trivial syndromes."
msgstr "Ici, les résultats non bruyants sont les plus probables. Le reste des échantillons est réparti entre autres possibilités avec des syndromes non triviaux."

#: ../../tutorials/noise/6_repetition_code.ipynb:1469
msgid "Decoding a repetition code"
msgstr "Décodage d'un code de répétition"

#: ../../tutorials/noise/6_repetition_code.ipynb:1471
msgid "Noisy results can change the logical value at readout, and so affect our ability to read out the logical qubit. This can be mitigated by looking at the syndrome values. These can tell us whether or not the logical values are most likely to have changed, and so allow us to correct for the errors. The process of analyzing the syndrome to correct for the errors is called 'decoding'. We do this by building a decoding object for our code."
msgstr "Les résultats bruyants peuvent changer la valeur logique lors de la lecture et donc affecter notre capacité à lire le qubit logique. Cela peut être atténué en regardant les valeurs du syndrome. Ils peuvent nous dire si oui ou non les valeurs logiques sont les plus susceptibles d'avoir changé, et donc nous permettre de corriger les erreurs. Le processus d'analyse du syndrome pour corriger les erreurs est appelé 'decoding' (décodage). Nous le faisons en construisant un objet de décodage pour notre code."

#: ../../tutorials/noise/6_repetition_code.ipynb:1492
msgid "This analyzes the code by seeing how different kinds of error change the output. With this information, along with a decoding algorithm, we can determine what the logical value is most likely to have been."
msgstr "Cela permet d'analyser le code en regardant comment différents types d'erreur modifient la sortie. Avec cette information, ainsi qu'un algorithme de décodage, nous pouvons déterminer quelle est la valeur logique la plus probable."

#: ../../tutorials/noise/6_repetition_code.ipynb:1494
msgid "For example, let's use the 'matching' algorithm to decode, which is based on minimum weight perfect matching. This takes specific output strings as input. We'll give it the simple example string ``'1 0  001 100 100'``, for a logical ``1`` that has suffered two errors."
msgstr "Par exemple, utilisons l'algorithme de 'matching' (correspondance) pour décoder, qui est basé sur le poids minimum de la correspondance parfaite. Cela prend des chaînes de sortie spécifiques en entrée. Nous lui donnerons l'exemple d'une simple chaîne de caractères ``'1 0 001 100 100'``, pour une ``1`` logique qui a subi deux erreurs."

#: ../../tutorials/noise/6_repetition_code.ipynb:1535
msgid "The output is what the logical part should have been. As you can see, the decoder correctly determined that the readout should have been of a logical ``1``."
msgstr "La sortie est ce que la partie logique aurait dû être. Comme vous pouvez le voir, le décodeur a correctement déterminé que la lecture aurait dû être d'un ``1`` logique."

#: ../../tutorials/noise/6_repetition_code.ipynb:1546
msgid "When we take many samples, we can determine the probability with which the decoder is incorrect. This should decrease exponentially as the code size is increased, since the configurations of noise that fool the decoder become less likely. The probability of a logical error is calculated using the ``logical_prob()`` method. This runs matching by default, but other algorithms can be specified by the ``algorithm`` kwarg."
msgstr "Lorsque nous prenons plusieurs échantillons, nous pouvons déterminer avec quelle probabilité le décodeur est incorrect. Cela devrait diminuer de façon exponentielle car la taille du code est augmentée, car les configurations de bruit qui trompent le décodeur deviennent moins probables. La probabilité d'une erreur logique est calculée en utilisant la méthode ``logical_prob()``. Cela exécute la correspondance par défaut, mais d'autres algorithmes peuvent être spécifiés par l'``algorithm`` kwarg (argument)."

