msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-03 02:48+0000\n"
"PO-Revision-Date: 2023-08-14 19:51\n"
"Last-Translator: \n"
"Language: fr\n"
"Language-Team: French\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/migration_guides/algorithms_migration.po\n"
"X-Crowdin-File-ID: 9995\n"

#: ../../migration_guides/algorithms_migration.rst:3
msgid "Algorithms Migration Guide"
msgstr "Guide de migration des algorithmes"

#: ../../migration_guides/algorithms_migration.rst:6
msgid "TL;DR"
msgstr "En bref :"

#: ../../migration_guides/algorithms_migration.rst:8
msgid "The :mod:`qiskit.algorithms` module has been fully refactored to use the :mod:`~qiskit.primitives`, for circuit execution, instead of the :class:`~qiskit.utils.QuantumInstance`, which is now deprecated."
msgstr "Le module :mod:`qiskit.algorithms` a été entièrement restructuré pour utiliser le :mod:`~qiskit.primitives`, pour l'exécution du circuit, au lieu de :class:`~qiskit.utils.QuantumInstance`, qui est désormais obsolète."

#: ../../migration_guides/algorithms_migration.rst:10
msgid "There have been **3 types of refactoring**:"
msgstr "Il y a eu **3 types de refactoring** :"

#: ../../migration_guides/algorithms_migration.rst:12
msgid "Algorithms refactored in a new location to support :mod:`~qiskit.primitives`. These algorithms have the same class names as the :class:`~qiskit.utils.QuantumInstance`\\-based ones but are in a new sub-package."
msgstr "Algorithmes refactorisés dans un nouvel emplacement pour supporter :mod:`~qiskit.primitives`. Ces algorithmes ont les mêmes noms de classes que les classes :class:`~qiskit.utils.QuantumInstance`\\ correspondantes mais sont dans un nouveau sous-paquet."

#: ../../migration_guides/algorithms_migration.rst:17
msgid "**Careful with import paths!!** The legacy algorithms are still importable directly from :mod:`qiskit.algorithms`. Until the legacy imports are removed, this convenience import is not available for the refactored algorithms. Thus, to import the refactored algorithms you must always **specify the full import path** (e.g., ``from qiskit.algorithms.eigensolvers import VQD``)"
msgstr "**Attention aux chemins d'importation!!** Les algorithmes hérités sont toujours importables directement depuis :mod:`qiskit.algorithms`. Tant que les importations héritées ne sont pas supprimées, cette importation de commodité n'est pas disponible pour les algorithmes refactorisés. Ainsi, pour importer les algorithmes refactorisés, vous devez toujours **spécifier le chemin complet d'importation** (par exemple, ``from qiskit.algorithms.eigensolvers import VQD``)"

#: ../../migration_guides/algorithms_migration.rst:22
msgid "`Minimum Eigensolvers`_"
msgstr "`Minimum Eigensolvers`_"

#: ../../migration_guides/algorithms_migration.rst:23
msgid "`Eigensolvers`_"
msgstr "`Eigensolvers`_"

#: ../../migration_guides/algorithms_migration.rst:24
msgid "`Time Evolvers`_"
msgstr "`Évolution dans le temps`_"

#: ../../migration_guides/algorithms_migration.rst:26
msgid "Algorithms refactored in-place (same namespace) to support both :class:`~qiskit.utils.QuantumInstance` and :mod:`~qiskit.primitives`. In the future, the use of :class:`~qiskit.utils.QuantumInstance` will be removed."
msgstr "Algorithmes refactorisés en place (même espace de nom) pour prendre en charge les valeurs :class:`~qiskit.utils.QuantumInstance` et :mod:`~qiskit.primitives`. A l'avenir, l'utilisation de :class:`~qiskit.utils.QuantumInstance` sera supprimée."

#: ../../migration_guides/algorithms_migration.rst:29
msgid "`Amplitude Amplifiers`_"
msgstr "`Amplification d'amplitude`_"

#: ../../migration_guides/algorithms_migration.rst:30
msgid "`Amplitude Estimators`_"
msgstr "`Estimateurs d'amplitude`_"

#: ../../migration_guides/algorithms_migration.rst:31
msgid "`Phase Estimators`_"
msgstr "`Estimateurs de phase`_"

#: ../../migration_guides/algorithms_migration.rst:34
msgid "Algorithms that were deprecated and are now removed entirely from :mod:`qiskit.algorithms`. These are algorithms that do not currently serve as building blocks for applications. Their main value is educational, and as such, will be kept as tutorials in the qiskit textbook. You can consult the tutorials in the following links:"
msgstr "Algorithmes dépréciés et maintenant entièrement supprimés de :mod:`qiskit.algorithms`. Ce sont des algorithmes qui ne servent pas actuellement de blocs de construction pour les applications. Leur valeur principale est éducative et, en tant que telle, sera conservée comme tutoriels dans le manuel de qiskit. Vous pouvez consulter les tutoriels dans les liens suivants :"

#: ../../migration_guides/algorithms_migration.rst:38
msgid "`Linear Solvers (HHL) <https://learn.qiskit.org/course/ch-applications/solving-linear-systems-of-equations-using-hhl-and-its-qiskit-implementation>`_ ,"
msgstr "` Linear Solvers (HHL) <https://learn.qiskit.org/course/ch-applications/solving-linear-systems-of-equations-using-hhl-and-its-qiskit-implementation>` _,"

#: ../../migration_guides/algorithms_migration.rst:39
msgid "`Factorizers (Shor) <https://learn.qiskit.org/course/ch-algorithms/shors-algorithm>`_"
msgstr "` Factorizers (Shor) <https://learn.qiskit.org/course/ch-algorithms/shors-algorithm>` _"

#: ../../migration_guides/algorithms_migration.rst:42
msgid "The remainder of this migration guide will focus on the algorithms with migration alternatives within :mod:`qiskit.algorithms`, that is, those under refactoring types 1 and 2."
msgstr "Le reste de ce guide de migration se concentrera sur les algorithmes avec des alternatives de migration au sein de :mod:` qiskit.algorithmes `, c'est-à-dire les algorithmes de restructuration des types 1 et 2."

#: ../../migration_guides/algorithms_migration.rst:46
msgid "Background"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:48
#: ../../migration_guides/algorithms_migration.rst:75
#: ../../migration_guides/algorithms_migration.rst:160
#: ../../migration_guides/algorithms_migration.rst:529
#: ../../migration_guides/algorithms_migration.rst:719
#: ../../migration_guides/algorithms_migration.rst:819
#: ../../migration_guides/algorithms_migration.rst:859
#: ../../migration_guides/algorithms_migration.rst:906
msgid "*Back to* `TL;DR`_"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:50
msgid "The :mod:`qiskit.algorithms` module was originally built on top of the :mod:`qiskit.opflow` library and the :class:`~qiskit.utils.QuantumInstance` utility. The development of the :mod:`~qiskit.primitives` introduced a higher-level execution paradigm, with the ``Estimator`` for computation of expectation values for observables, and ``Sampler`` for executing circuits and returning probability distributions. These tools allowed to refactor the :mod:`qiskit.algorithms` module, and deprecate both :mod:`qiskit.opflow` and :class:`~qiskit.utils.QuantumInstance`."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:59
msgid "The transition away from :mod:`qiskit.opflow` affects the classes that algorithms take as part of the problem setup. As a rule of thumb, most :mod:`qiskit.opflow` dependencies have a direct :mod:`qiskit.quantum_info` replacement. One common example is the class :mod:`qiskit.opflow.PauliSumOp`, used to define Hamiltonians (for example, to plug into VQE), that can be replaced by :mod:`qiskit.quantum_info.SparsePauliOp`. For information on how to migrate other :mod:`~qiskit.opflow` objects, you can refer to the `Opflow migration guide <https://qisk.it/opflow_migration>`_."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:66
msgid "For further background and detailed migration steps, see the:"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:68
msgid "`Opflow migration guide <https://qisk.it/opflow_migration>`_"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:69
msgid "`Quantum Instance migration guide <https://qisk.it/qi_migration>`_"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:73
msgid "How to choose a primitive configuration for your algorithm"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:77
msgid "The classes in :mod:`qiskit.algorithms` are initialized with any implementation of :class:`qiskit.primitive.BaseSampler` or class:`qiskit.primitive.BaseEstimator`."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:80
msgid "Once the kind of primitive is known, you can choose between the primitive implementations that better adjust to your case. For example:"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:82
msgid "For quick prototyping, you can use the **reference implementations of primitives** included in Qiskit: :class:`qiskit.primitives.Sampler` and :class:`qiskit.primitives.Estimator`."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:83
msgid "For finer algorithm tuning, a local simulator such as the **primitive implementation in Aer**: :class:`qiskit_aer.primitives.Sampler` and :class:`qiskit_aer.primitives.Estimator`."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:84
msgid "For executing in quantum hardware you can:"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:86
msgid "access services with native primitive implementations, such as **IBM's Qiskit Runtime service** via :class:`qiskit_ibm_runtime.Sampler` and :class:`qiskit_ibm_runtime.Estimator`"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:87
msgid "Wrap any backend with **Backend Primitives** (:class:`~qiskit.primitives.BackendSampler` and :class:`~qiskit.primitives.BackendEstimator`). These wrappers implement a primitive interface on top of a backend that only supports ``Backend.run()``."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:89
msgid "For more detailed information and examples, particularly on the use of the **Backend Primitives**, please refer to the `Quantum Instance migration guide <https://qisk.it/qi_migration>`_."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:92
msgid "In this guide, we will cover 3 different common configurations for algorithms that determine **which primitive import** you should be selecting:"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:95
msgid "Running an algorithm with a statevector simulator (i.e., using :mod:`qiskit.opflow`\\'s legacy :class:`.MatrixExpectation`), when you want the ideal outcome without shot noise:"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:98
msgid "Reference Primitives with default configuration (see `QAOA`_ example):"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:104
msgid "Aer Primitives **with statevector simulator** (see `QAOA`_ example):"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:113
msgid "Running an algorithm using a simulator/device with shot noise (i.e., using :mod:`qiskit.opflow`\\'s legacy :class:`.PauliExpectation`):"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:116
msgid "Reference Primitives **with shots** (see `VQE`_ examples):"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:132
msgid "Aer Primitives with default configuration (see `VQE`_ examples):"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:138
msgid "IBM's Qiskit Runtime Primitives with default configuration (see `VQD`_ example):"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:145
msgid "3. Running an algorithm on an Aer simulator using a custom instruction (i.e., using :mod:`qiskit.opflow`\\'s legacy :class:`.AerPauliExpectation`):"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:148
msgid "Aer Primitives with ``shots=None``, ``approximation=True`` (see `TrotterQRTE`_ example):"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:159
msgid "Minimum Eigensolvers"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:162
msgid "The minimum eigensolver algorithms belong to the first type of refactoring listed above (Algorithms refactored in a new location to support :mod:`~qiskit.primitives`). Instead of a :class:`~qiskit.utils.QuantumInstance`, :mod:`qiskit.algorithms.minimum_eigensolvers` are now initialized using an instance of the :mod:`~qiskit.primitives.Sampler` or :mod:`~qiskit.primitives.Estimator` primitive, depending on the algorithm. The legacy classes can still be found in :mod:`qiskit.algorithms.minimum_eigen_solvers`."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:170
msgid "For the :mod:`qiskit.algorithms.minimum_eigensolvers` classes, depending on the import path, you will access either the primitive-based or the quantum-instance-based implementation. You have to be extra-careful, because the class name does not change."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:174
msgid "Old import (Quantum Instance based): ``from qiskit.algorithms import VQE, QAOA, NumPyMinimumEigensolver``"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:175
msgid "New import (Primitives based): ``from qiskit.algorithms.minimum_eigensolvers import VQE, SamplingVQE, QAOA, NumPyMinimumEigensolver``"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:178
msgid "VQE"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:180
msgid "The legacy :class:`qiskit.algorithms.minimum_eigen_solvers.VQE` class has now been split according to the use-case:"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:182
msgid "For general-purpose Hamiltonians, you can use the Estimator-based :class:`qiskit.algorithms.minimum_eigensolvers.VQE` class."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:184
msgid "If you have a diagonal Hamiltonian, and would like the algorithm to return a sampling of the state, you can use the new Sampler-based :class:`qiskit.algorithms.minimum_eigensolvers.SamplingVQE` algorithm. This could formerly be realized using the legacy :class:`~qiskit.algorithms.minimum_eigen_solvers.VQE` with :class:`~qiskit.opflow.expectations.CVaRExpectation`."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:191
msgid "In addition to taking in an :mod:`~qiskit.primitives.Estimator` instance instead of a :class:`~qiskit.utils.QuantumInstance`, the new :class:`~qiskit.algorithms.minimum_eigensolvers.VQE` signature has undergone the following changes:"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:194
#: ../../migration_guides/algorithms_migration.rst:560
msgid "The ``expectation`` and ``include_custom`` parameters have been removed, as this functionality is now defined at the ``Estimator`` level."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:196
#: ../../migration_guides/algorithms_migration.rst:377
msgid "The ``gradient`` parameter now takes in an instance of a primitive-based gradient class from :mod:`qiskit.algorithms.gradients` instead of the legacy :mod:`qiskit.opflow.gradients.Gradient` class."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:198
#: ../../migration_guides/algorithms_migration.rst:379
#: ../../migration_guides/algorithms_migration.rst:565
msgid "The ``max_evals_grouped`` parameter has been removed, as it can be set directly on the optimizer class."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:199
msgid "The ``estimator``, ``ansatz`` and ``optimizer`` are the only parameters that can be defined positionally (and in this order), all others have become keyword-only arguments."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:204
msgid "The new :class:`~qiskit.algorithms.minimum_eigensolvers.VQEResult` class does not include the state anymore, as this output was only useful in the case of diagonal operators. However, if it is available as part of the new :class:`~qiskit.algorithms.minimum_eigensolvers.SamplingVQE`'s :class:`~qiskit.algorithms.minimum_eigensolvers.SamplingVQEResult`."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst
msgid "VQE Example"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:212
#: ../../migration_guides/algorithms_migration.rst:284
#: ../../migration_guides/algorithms_migration.rst:393
#: ../../migration_guides/algorithms_migration.rst:477
#: ../../migration_guides/algorithms_migration.rst:580
#: ../../migration_guides/algorithms_migration.rst:754
#: ../../migration_guides/algorithms_migration.rst:832
#: ../../migration_guides/algorithms_migration.rst:873
#: ../../migration_guides/algorithms_migration.rst:920
msgid "**[Legacy] Using Quantum Instance:**"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:245
#: ../../migration_guides/algorithms_migration.rst:319
#: ../../migration_guides/algorithms_migration.rst:427
#: ../../migration_guides/algorithms_migration.rst:500
#: ../../migration_guides/algorithms_migration.rst:615
#: ../../migration_guides/algorithms_migration.rst:788
#: ../../migration_guides/algorithms_migration.rst:843
#: ../../migration_guides/algorithms_migration.rst:887
#: ../../migration_guides/algorithms_migration.rst:933
msgid "**[Updated] Using Primitives:**"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst
msgid "VQE applying CVaR (SamplingVQE) Example"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:356
#: ../../migration_guides/algorithms_migration.rst:462
#: ../../migration_guides/algorithms_migration.rst:523
#: ../../migration_guides/algorithms_migration.rst:852
#: ../../migration_guides/algorithms_migration.rst:900
#: ../../migration_guides/algorithms_migration.rst:945
msgid "For complete code examples, see the following updated tutorials:"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:358
msgid "`VQE Introduction <https://qiskit.org/documentation/tutorials/algorithms/01_algorithms_introduction.html>`_"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:359
#: ../../migration_guides/algorithms_migration.rst:525
msgid "`VQE, Callback, Gradients, Initial Point <https://qiskit.org/documentation/tutorials/algorithms/02_vqe_advanced_options.html>`_"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:360
msgid "`VQE with Aer Primitives <https://qiskit.org/documentation/tutorials/algorithms/03_vqe_simulation_with_noise.html>`_"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:363
msgid "QAOA"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:365
msgid "The legacy :class:`qiskit.algorithms.minimum_eigen_solvers.QAOA` class used to extend :class:`qiskit.algorithms.minimum_eigen_solvers.VQE`, but now, :class:`qiskit.algorithms.minimum_eigensolvers.QAOA` extends :class:`qiskit.algorithms.minimum_eigensolvers.SamplingVQE`. For this reason, **the new QAOA only supports diagonal operators**."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:372
msgid "In addition to taking in an :mod:`~qiskit.primitives.Sampler` instance instead of a :class:`~qiskit.utils.QuantumInstance`, the new :class:`~qiskit.algorithms.minimum_eigensolvers.QAOA` signature has undergone the following changes:"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:375
msgid "The ``expectation`` and ``include_custom`` parameters have been removed. In return, the ``aggregation`` parameter has been added (it used to be defined through a custom ``expectation``)."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:380
msgid "The ``sampler`` and ``optimizer`` are the only parameters that can be defined positionally (and in this order), all others have become keyword-only arguments."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:385
msgid "If you want to run QAOA on a non-diagonal operator, you can use the :class:`.QAOAAnsatz` with :class:`qiskit.algorithms.minimum_eigensolvers.VQE`, but bear in mind there will be no state result. If your application requires the final probability distribution, you can instantiate a ``Sampler`` and run it with the optimal circuit after :class:`~qiskit.algorithms.minimum_eigensolvers.VQE`."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst
msgid "QAOA Example"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:464
msgid "`QAOA <https://qiskit.org/documentation/tutorials/algorithms/05_qaoa.html>`_"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:467
msgid "NumPyMinimumEigensolver"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:469
msgid "Because this is a classical solver, the workflow has not changed between the old and new implementation. The import has however changed from :class:`qiskit.algorithms.minimum_eigen_solvers.NumPyMinimumEigensolver` to :class:`qiskit.algorithms.minimum_eigensolvers.NumPyMinimumEigensolver` to conform to the new interfaces and result classes."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst
msgid "NumPyMinimumEigensolver Example"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:528
msgid "Eigensolvers"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:531
msgid "The eigensolver algorithms also belong to the first type of refactoring (Algorithms refactored in a new location to support :mod:`~qiskit.primitives`). Instead of a :class:`~qiskit.utils.QuantumInstance`, :mod:`qiskit.algorithms.eigensolvers` are now initialized using an instance of the :class:`~qiskit.primitives.Sampler` or :class:`~qiskit.primitives.Estimator` primitive, or **a primitive-based subroutine**, depending on the algorithm. The legacy classes can still be found in :mod:`qiskit.algorithms.eigen_solvers`."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:540
msgid "For the :mod:`qiskit.algorithms.eigensolvers` classes, depending on the import path, you will access either the primitive-based or the quantum-instance-based implementation. You have to be extra-careful, because the class name does not change."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:544
msgid "Old import path (Quantum Instance): ``from qiskit.algorithms import VQD, NumPyEigensolver``"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:545
msgid "New import path (Primitives): ``from qiskit.algorithms.eigensolvers import VQD, NumPyEigensolver``"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:548
msgid "VQD"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:550
msgid "The new :class:`qiskit.algorithms.eigensolvers.VQD` class is initialized with an instance of the :class:`~qiskit.primitives.Estimator` primitive instead of a :class:`~qiskit.utils.QuantumInstance`. In addition to this, it takes an instance of a state fidelity class from mod:`qiskit.algorithms.state_fidelities`, such as the :class:`~qiskit.primitives.Sampler`-based :class:`~qiskit.algorithms.state_fidelities.ComputeUncompute`."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:557
#: ../../migration_guides/algorithms_migration.rst:743
msgid "In addition to taking in an :mod:`~qiskit.primitives.Estimator` instance instead of a :class:`~qiskit.utils.QuantumInstance`, the new :class:`~qiskit.algorithms.eigensolvers.VQD` signature has undergone the following changes:"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:562
msgid "The custom ``fidelity`` parameter has been added, and the custom ``gradient`` parameter has been removed, as current classes in :mod:`qiskit.algorithms.gradients` cannot deal with state fidelity gradients."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:566
msgid "The ``estimator``, ``fidelity``, ``ansatz`` and ``optimizer`` are the only parameters that can be defined positionally (and in this order), all others have become keyword-only arguments."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:571
msgid "Similarly to VQE, the new :class:`~qiskit.algorithms.eigensolvers.VQDResult` class does not include the state anymore. If your application requires the final probability distribution, you can instantiate a ``Sampler`` and run it with the optimal circuit for the desired excited state after running :class:`~qiskit.algorithms.eigensolvers.VQD`."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst
msgid "VQD Example"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:657
msgid "For complete code examples, see the following updated tutorial:"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:659
msgid "`VQD <https://qiskit.org/documentation/tutorials/algorithms/04_vqd.html>`_"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:662
msgid "NumPyEigensolver"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:663
msgid "Similarly to its minimum eigensolver counterpart, because this is a classical solver, the workflow has not changed between the old and new implementation. The import has however changed from :class:`qiskit.algorithms.eigen_solvers.NumPyEigensolver` to :class:`qiskit.algorithms.eigensolvers.MinimumEigensolver` to conform to the new interfaces and result classes."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst
msgid "NumPyEigensolver Example"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:671
msgid "**[Legacy]:**"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:694
msgid "**[Updated]:**"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:718
msgid "Time Evolvers"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:721
msgid "The time evolvers are the last group of algorithms to undergo the first type of refactoring (Algorithms refactored in a new location to support :mod:`~qiskit.primitives`). Instead of a :class:`~qiskit.utils.QuantumInstance`, :mod:`qiskit.algorithms.time_evolvers` are now initialized using an instance of the :class:`~qiskit.primitives.Estimator` primitive. The legacy classes can still be found in :mod:`qiskit.algorithms.evolvers`."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:727
msgid "On top of the migration, the module has been substantially expanded to include **Variational Quantum Time Evolution** (:class:`~qiskit.algorithms.time_evolvers.VarQTE`\\) solvers."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:731
msgid "TrotterQRTE"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:734
msgid "For the :class:`qiskit.algorithms.time_evolvers.TrotterQRTE` class, depending on the import path, you will access either the primitive-based or the quantum-instance-based implementation. You have to be extra-careful, because the class name does not change."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:738
msgid "Old import path (Quantum Instance): ``from qiskit.algorithms import TrotterQRTE``"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:739
msgid "New import path (Primitives): ``from qiskit.algorithms.time_evolvers import TrotterQRTE``"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:746
msgid "The ``expectation`` parameter has been removed, as this functionality is now defined at the ``Estimator`` level."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:748
msgid "The ``num_timesteps`` parameters has been added, to allow to define the number of steps the full evolution time is divided into."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst
msgid "TrotterQRTE Example"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:818
msgid "Amplitude Amplifiers"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:821
msgid "The amplitude amplifier algorithms belong to the second type of refactoring (Algorithms refactored in-place). Instead of a :class:`~qiskit.utils.QuantumInstance`, :mod:`qiskit.algorithms.amplitude_amplifiers` are now initialized using an instance of any \"Sampler\" primitive e.g. :mod:`~qiskit.primitives.Sampler`."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:826
msgid "The full :mod:`qiskit.algorithms.amplitude_amplifiers` module has been refactored in place. No need to change import paths."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst
msgid "Grover Example"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:854
msgid "`Amplitude Amplification and Grover <https://qiskit.org/documentation/tutorials/algorithms/06_grover.html>`_"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:855
msgid "`Grover Examples <https://qiskit.org/documentation/tutorials/algorithms/07_grover_examples.html>`_"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:858
msgid "Amplitude Estimators"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:861
msgid "Similarly to the amplitude amplifiers, the amplitude estimators also belong to the second type of refactoring (Algorithms refactored in-place). Instead of a :class:`~qiskit.utils.QuantumInstance`, :mod:`qiskit.algorithms.amplitude_estimators` are now initialized using an instance of any \"Sampler\" primitive e.g. :mod:`~qiskit.primitives.Sampler`."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:867
msgid "The full :mod:`qiskit.algorithms.amplitude_estimators` module has been refactored in place. No need to change import paths."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst
msgid "IAE Example"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:902
msgid "`Amplitude Estimation <https://qiskit.org/documentation/finance/tutorials/00_amplitude_estimation.html>`_"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:905
msgid "Phase Estimators"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:908
msgid "Finally, the phase estimators are the last group of algorithms to undergo the first type of refactoring (Algorithms refactored in-place). Instead of a :class:`~qiskit.utils.QuantumInstance`, :mod:`qiskit.algorithms.phase_estimators` are now initialized using an instance of any \"Sampler\" primitive e.g. :mod:`~qiskit.primitives.Sampler`."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:914
msgid "The full :mod:`qiskit.algorithms.phase_estimators` module has been refactored in place. No need to change import paths."
msgstr ""

#: ../../migration_guides/algorithms_migration.rst
msgid "IPE Example"
msgstr ""

#: ../../migration_guides/algorithms_migration.rst:947
msgid "`Iterative Phase Estimation <https://qiskit.org/documentation/tutorials/algorithms/09_IQPE.html>`_"
msgstr ""

