msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-21 18:06+0000\n"
"PO-Revision-Date: 2020-10-21 18:43\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/machine_learning/qgans_for_loading_random_distributions.po\n"
"X-Crowdin-File-ID: 9392\n"
"Language: es_ES\n"

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:7
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:167
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:183
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:211
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:319
msgid "{"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:183
msgid "\"cells\": ["
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:4
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:11
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:50
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:81
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:136
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:198
msgid "\"cell_type\": \"markdown\", \"metadata\": {}, \"source\": ["
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:7
msgid "\"# _*qGANs for Loading Random Distributions*_ \""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:8
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:27
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:47
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:56
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:78
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:89
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:133
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:148
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:164
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:174
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:190
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:195
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:204
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:220
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:236
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:252
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:306
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:331
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:343
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:353
msgid "]"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:9
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:28
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:48
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:57
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:79
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:90
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:134
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:149
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:175
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:196
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:205
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:226
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:242
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:307
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:335
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:354
msgid "}, {"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:14
msgid "\"### Introduction\\n\", \"Given $k$-dimensional data samples, we employ a quantum Generative Adversarial Network (qGAN) to learn the data's underlying random distribution and to load it directly into a quantum state:\\n\", \"\\n\", \"$$ \\\\big| g_{\\\\theta}\\\\rangle = \\\\sum_{j=0}^{2^n-1} \\\\sqrt{p_{\\\\theta}^{j}}\\\\big| j \\\\rangle $$\\n\", \"\\n\", \"where $p_{\\\\theta}^{j}$ describe the occurrence probabilities of the basis states $\\\\big| j\\\\rangle$. \\n\", \"\\n\", \"The aim of the qGAN training is to generate a state $\\\\big| g_{\\\\theta}\\\\rangle$ where $p_{\\\\theta}^{j}$, for $j\\\\in \\\\left\\\\{0, \\\\ldots, {2^n-1} \\\\right\\\\}$, describe a probability distribution that is close to the distribution underlying the training data $X=\\\\left\\\\{x^0, \\\\ldots, x^{k-1} \\\\right\\\\}$.\\n\", \"\\n\", \"For further details please refer to <a href=\\\"https://arxiv.org/abs/1904.00043\\\">Quantum Generative Adversarial Networks for Learning and Loading Random Distributions. Zoufal, Lucchi, Woerner. 2019.</a>\\n\", \"\\n\", \"How to use a trained qGAN in an application, i.e., pricing of financial derivatives, is illustrated here:\\n\", \"<a href=\\\"../finance/machine_learning/qgan_option_pricing.ipynb\\\">qGAN Option Pricing</a>.\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:30
msgid "\"cell_type\": \"code\", \"execution_count\": 12, \"metadata\": {}, \"outputs\": [], \"source\": ["
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:35
msgid "\"import numpy as np\\n\", \"np.random.seed = 71\\n\", \"\\n\", \"import matplotlib.pyplot as plt\\n\", \"%matplotlib inline\\n\", \"\\n\", \"from qiskit import QuantumRegister, QuantumCircuit, BasicAer\\n\", \"from qiskit.circuit.library import TwoLocal, UniformDistribution\\n\", \"\\n\", \"from qiskit.aqua import QuantumInstance\\n\", \"from qiskit.aqua.algorithms import QGAN\\n\", \"from qiskit.aqua.components.neural_networks import NumPyDiscriminator\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:53
msgid "\"### Load the Training Data\\n\", \"First, we need to load the $k$-dimensional training data samples (here k=1). <br/>\\n\", \"Next, the data resolution is set, i.e. the min/max data values and the number of qubits used to represent each data dimension.\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:59
msgid "\"cell_type\": \"code\", \"execution_count\": 13, \"metadata\": {}, \"outputs\": [], \"source\": ["
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:64
msgid "\"# Number training data samples\\n\", \"N = 1000 \\n\", \"\\n\", \"# Load data samples from log-normal distribution with mean=1 and standard deviation=1\\n\", \"mu = 1\\n\", \"sigma = 1\\n\", \"real_data = np.random.lognormal(mean=mu, sigma=sigma, size=N)\\n\", \"\\n\", \"# Set the data resolution\\n\", \"# Set upper and lower data values as list of k min/max data values [[min_0,max_0],...,[min_k-1,max_k-1]]\\n\", \"bounds = np.array([0., 3.]) \\n\", \"# Set number of qubits per data dimension as list of k qubit values[#q_0,...,#q_k-1]\\n\", \"num_qubits = [2]\\n\", \"k = len(num_qubits)\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:84
msgid "\"### Initialize the qGAN\\n\", \"The qGAN consists of a quantum generator $G_{\\\\theta}$, a variational quantum circuit, and a classical discriminator $D_{\\\\phi}$, a neural network. <br/>\\n\", \"To implement the quantum generator, we choose a depth-$1$ variational form that implements $R_Y$ rotations and $CZ$ gates which takes a uniform distribution as an input state. Notably, for $k>1$ the generator's parameters must be chosen carefully. For example, the circuit depth should be $>1$ because higher circuit depths enable the representation of more complex structures.<br/>\\n\", \"The classical discriminator is given by a $3$-layer neural network that applies linear transformations, leaky ReLU functions in the hidden layers and a sigmoid function in the output layer. Notably, the neural network is implemented with PyTorch. Please refer to https://pytorch.org/get-started/locally/ for PyTorch installation instructions.<br/>\\n\", \"Here, both networks are updated with the ADAM optimization algorithm.\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:92
msgid "\"cell_type\": \"code\", \"execution_count\": 14, \"metadata\": {}, \"outputs\": [], \"source\": ["
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:97
msgid "\"# Set number of training epochs\\n\", \"# Note: The algorithm's runtime can be shortened by reducing the number of training epochs.\\n\", \"num_epochs = 10\\n\", \"# Batch size\\n\", \"batch_size = 100\\n\", \"\\n\", \" # Initialize qGAN\\n\", \"qgan = QGAN(real_data, bounds, num_qubits, batch_size, num_epochs, snapshot_dir=None)\\n\", \"qgan.seed = 1\\n\", \"# Set quantum instance to run the quantum generator\\n\", \"quantum_instance = QuantumInstance(backend=BasicAer.get_backend('statevector_simulator'))\\n\", \"\\n\", \"# Set entangler map\\n\", \"entangler_map = [[0, 1]]\\n\", \"\\n\", \"\\n\", \"# Set an initial state for the generator circuit\\n\", \"init_dist = UniformDistribution(sum(num_qubits))\\n\", \"\\n\", \"# Set the ansatz circuit\\n\", \"var_form = TwoLocal(int(np.sum(num_qubits)), 'ry', 'cz', entanglement=entangler_map, reps=1)\\n\", \"\\n\", \"# Set generator's initial parameters - In order to reduce the training time those parameters\\n\", \"init_params = [3., 1., 0.6, 1.6]\\n\", \"\\n\", \"# You can increase the number of training epochs and use random initial parameters.\\n\", \"# init_params = np.random.rand(var_form.num_parameters_settable) * 2 * np.pi\\n\", \"\\n\", \"# Set generator circuit by adding the initial distribution infront of the ansatz\\n\", \"g_circuit = var_form.compose(init_dist, front=True)\\n\", \"\\n\", \"# Set quantum generator\\n\", \"qgan.set_generator(generator_circuit=g_circuit)\\n\", \"# Set classical discriminator neural network\\n\", \"discriminator = NumPyDiscriminator(len(num_qubits))\\n\", \"qgan.set_discriminator(discriminator)\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:139
msgid "\"### Run the qGAN Training\\n\", \"During the training the discriminator's and the generator's parameters are updated alternately w.r.t the following loss functions:\\n\", \"$$ L_G\\\\left(\\\\phi, \\\\theta\\\\right) = -\\\\frac{1}{m}\\\\sum\\\\limits_{l=1}^{m}\\\\left[\\\\log\\\\left(D_{\\\\phi}\\\\left(g^{l}\\\\right)\\\\right)\\\\right] $$\\n\", \"and\\n\", \"$$  L_D\\\\left(\\\\phi, \\\\theta\\\\right) =\\n\", \"\\t\\\\frac{1}{m}\\\\sum\\\\limits_{l=1}^{m}\\\\left[\\\\log D_{\\\\phi}\\\\left(x^{l}\\\\right) + \\\\log\\\\left(1-D_{\\\\phi}\\\\left(g^{l}\\\\right)\\\\right)\\\\right], $$\\n\", \"with $m$ denoting the batch size and $g^l$ describing the data samples generated by the quantum generator.\\n\", \"\\n\", \"Please note that the training will take a while ($\\\\sim 20$ min).\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:151
msgid "\"cell_type\": \"code\", \"execution_count\": 15, \"metadata\": {}, \"outputs\": ["
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:163
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:212
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:228
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:244
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:319
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:342
msgid "\"data\": {"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:162
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:218
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:234
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:250
msgid "\"text/plain\": ["
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:158
msgid "\"{'params_d': array([ 0.03732976,  0.6098062 , -0.48218306, ..., -0.1658034 ,\\n\", \"        -0.2020696 , -0.08679652]),\\n\", \" 'params_g': array([2.95007728, 0.95005228, 0.55004668, 1.64998305]),\\n\", \" 'loss_d': 0.6923,\\n\", \" 'loss_g': array([0.73]),\\n\", \" 'rel_entr': 0.1409}\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:165
msgid "}, \"execution_count\": 15, \"metadata\": {}, \"output_type\": \"execute_result\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:169
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:191
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:258
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:315
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:347
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:361
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:399
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:409
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:413
msgid "}"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:170
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:192
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:259
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:348
msgid "], \"source\": ["
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:172
msgid "\"# Run qGAN\\n\", \"qgan.run(quantum_instance)\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:177
msgid "\"cell_type\": \"code\", \"execution_count\": 16, \"metadata\": {}, \"outputs\": ["
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:182
msgid "\"name\": \"stdout\", \"output_type\": \"stream\", \"text\": ["
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:185
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:213
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:229
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:245
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:322
msgid "<<<<<<< Updated upstream"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:186
msgid "\"Trained parameters:  [2.95007728 0.95005228 0.55004668 1.64998305]\\n\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:194
msgid "\"print('Trained parameters: ', qgan.generator.generator_circuit.params)\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:201
msgid "\"### Training Progress & Outcome\\n\", \"Now, we plot the evolution of the generator's and the discriminator's loss functions during the training as well as the progress in the relative entropy between the trained and the target distribution.\\n\", \"<br/> Finally, we also compare the cumulative distribution function (CDF) of the trained distribution to the CDF of the target distribution.\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:207
msgid "\"cell_type\": \"code\", \"execution_count\": 17, \"metadata\": {}, \"outputs\": ["
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:214
msgid "\"image/png\": \"\\n\","
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:219
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:235
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:251
msgid "\"<Figure size 432x360 with 1 Axes>\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:221
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:237
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:253
msgid "}, \"metadata\": {"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:223
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:239
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:255
msgid "\"needs_background\": \"light\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:224
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:240
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:256
msgid "}, \"output_type\": \"display_data\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:230
msgid "\"image/png\": \"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\\n\","
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:246
msgid "\"image/png\": \"\\n\","
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:261
msgid "\"# Plot progress w.r.t the generator's and the discriminator's loss function\\n\", \"t_steps = np.arange(num_epochs)\\n\", \"plt.figure(figsize=(6,5))\\n\", \"plt.title(\\\"Progress in the loss function\\\")\\n\", \"plt.plot(t_steps, qgan.g_loss, label='Generator loss function', color='mediumvioletred', linewidth=2)\\n\", \"plt.plot(t_steps, qgan.d_loss, label='Discriminator loss function', color='rebeccapurple', linewidth=2)\\n\", \"plt.grid()\\n\", \"plt.legend(loc='best')\\n\", \"plt.xlabel('time steps')\\n\", \"plt.ylabel('loss')\\n\", \"plt.show()\\n\", \"\\n\", \"\\n\", \"# Plot progress w.r.t relative entropy\\n\", \"plt.figure(figsize=(6,5))\\n\", \"plt.title('Relative Entropy')\\n\", \"plt.plot(np.linspace(0, num_epochs, len(qgan.rel_entr)), qgan.rel_entr, color='mediumblue', lw=4, ls=':')\\n\", \"plt.grid()\\n\", \"plt.xlabel('time steps')\\n\", \"plt.ylabel('relative entropy')\\n\", \"plt.show()\\n\", \"\\n\", \"#Plot the PDF of the resulting distribution against the target distribution, i.e. log-normal\\n\", \"log_normal = np.random.lognormal(mean=1, sigma=1, size=100000)\\n\", \"log_normal = np.round(log_normal)\\n\", \"log_normal = log_normal[log_normal <= bounds[1]]\\n\", \"temp = []\\n\", \"for i in range(int(bounds[1] + 1)):\\n\", \"    temp += [np.sum(log_normal==i)]\\n\", \"log_normal = np.array(temp / sum(temp))\\n\", \"\\n\", \"plt.figure(figsize=(6,5))\\n\", \"plt.title('CDF')\\n\", \"samples_g, prob_g = qgan.generator.get_output(qgan.quantum_instance, shots=10000)\\n\", \"samples_g = np.array(samples_g)\\n\", \"samples_g = samples_g.flatten()\\n\", \"num_bins = len(prob_g)\\n\", \"plt.bar(samples_g,  np.cumsum(prob_g), color='royalblue', width= 0.8, label='simulation')\\n\", \"plt.plot( np.cumsum(log_normal),'-o', label='log-normal', color='deepskyblue', linewidth=4, markersize=12)\\n\", \"plt.xticks(np.arange(min(samples_g), max(samples_g)+1, 1.0))\\n\", \"plt.grid()\\n\", \"plt.xlabel('x')\\n\", \"plt.ylabel('p(x)')\\n\", \"plt.legend(loc='best')\\n\", \"plt.show()\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:309
msgid "\"cell_type\": \"code\", \"execution_count\": 18, \"metadata\": {"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:313
msgid "\"ExecuteTime\": {"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:313
msgid "\"end_time\": \"2019-08-22T01:49:13.439275Z\", \"start_time\": \"2019-08-22T01:49:13.430311Z\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:316
msgid "}, \"outputs\": ["
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:320
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:338
msgid "\"text/html\": ["
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:322
msgid "\"<h3>Version Information</h3><table><tr><th>Qiskit Software</th><th>Version</th></tr><tr><td>Qiskit</td><td>None</td></tr><tr><td>Terra</td><td>0.16.0.dev0+56a42ce</td></tr><tr><td>Aer</td><td>0.6.0</td></tr><tr><td>Ignis</td><td>0.5.0.dev0+9fefa96</td></tr><tr><td>Aqua</td><td>0.8.0.dev0+c9478e7</td></tr><tr><td>IBM Q Provider</td><td>0.9.0</td></tr><tr><th>System information</th></tr><tr><td>Python</td><td>3.7.3 (default, Mar 27 2019, 16:54:48) \\n\", \"[Clang 4.0.1 (tags/RELEASE_401/final)]</td></tr><tr><td>OS</td><td>Darwin</td></tr><tr><td>CPUs</td><td>2</td></tr><tr><td>Memory (Gb)</td><td>16.0</td></tr><tr><td colspan='2'>Mon Sep 28 15:24:50 2020 CEST</td></tr></table>\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:411
msgid ">>>>>>> Stashed changes"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:328
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:340
msgid "], \"text/plain\": ["
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:330
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:342
msgid "\"<IPython.core.display.HTML object>\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:332
#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:344
msgid "}, \"metadata\": {}, \"output_type\": \"display_data\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:339
msgid "\"<div style='width: 100%; background-color:#d5d9e0;padding-left: 10px; padding-bottom: 10px; padding-right: 10px; padding-top: 5px'><h3>This code is a part of Qiskit</h3><p>&copy; Copyright IBM 2017, 2020.</p><p>This code is licensed under the Apache License, Version 2.0. You may<br>obtain a copy of this license in the LICENSE.txt file in the root directory<br> of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.<p>Any modifications or derivative works of this code must retain this<br>copyright notice, and modified files need to carry a notice indicating<br>that they have been altered from the originals.</p></div>\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:350
msgid "\"import qiskit.tools.jupyter\\n\", \"%qiskit_version_table\\n\", \"%qiskit_copyright\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:356
msgid "\"cell_type\": \"code\", \"execution_count\": null, \"metadata\": {}, \"outputs\": [], \"source\": []"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:362
msgid "], \"metadata\": {"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:366
msgid "\"kernelspec\": {"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:365
msgid "\"display_name\": \"Python 3\", \"language\": \"python\", \"name\": \"python3\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:368
msgid "}, \"language_info\": {"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:371
msgid "\"codemirror_mode\": {"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:371
msgid "\"name\": \"ipython\", \"version\": 3"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:373
msgid "}, \"file_extension\": \".py\", \"mimetype\": \"text/x-python\", \"name\": \"python\", \"nbconvert_exporter\": \"python\", \"pygments_lexer\": \"ipython3\", \"version\": \"3.7.3\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:380
msgid "}, \"varInspector\": {"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:384
msgid "\"cols\": {"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:383
msgid "\"lenName\": 16, \"lenType\": 16, \"lenVar\": 40"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:386
msgid "}, \"kernels_config\": {"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:391
msgid "\"python\": {"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:389
msgid "\"delete_cmd_postfix\": \"\", \"delete_cmd_prefix\": \"del \", \"library\": \"var_list.py\", \"varRefreshCmd\": \"print(var_dic_list())\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:393
msgid "}, \"r\": {"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:395
msgid "\"delete_cmd_postfix\": \") \", \"delete_cmd_prefix\": \"rm(\", \"library\": \"var_list.r\", \"varRefreshCmd\": \"cat(var_dic_list()) \""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:400
msgid "}, \"types_to_exclude\": ["
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:402
msgid "\"module\", \"function\", \"builtin_function_or_method\", \"instance\", \"_Feature\""
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:407
msgid "], \"window_display\": false"
msgstr ""

#: ../../tutorials/machine_learning/qgans_for_loading_random_distributions.ipynb:410
msgid "}, \"nbformat\": 4, \"nbformat_minor\": 1"
msgstr ""

