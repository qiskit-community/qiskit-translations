msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-05 21:02+0000\n"
"PO-Revision-Date: 2022-04-07 04:20\n"
"Last-Translator: \n"
"Language-Team: Chinese Simplified\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: zh-CN\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits/2_plotting_data_in_qiskit.po\n"
"X-Crowdin-File-ID: 9116\n"
"Language: zh_CN\n"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:10
msgid "This page was generated from `tutorials/circuits/2_plotting_data_in_qiskit.ipynb`__."
msgstr "此页面是从 `tutorials/circuits/2_plotting_data_in_qiskit.ipynb`__中生成的。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:9
msgid "Qiskit Visualizations"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:33
msgid "Plot histogram"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:35
msgid "To visualize the data from a quantum circuit run on a real device or ``qasm_simulator`` we have made a simple function"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:37
msgid "``plot_histogram(data)``"
msgstr "``plot_histogram(data)``"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:39
msgid "As an example we make a 2-qubit Bell state"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:116
msgid "Options when plotting a histogram"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:118
msgid "The ``plot_histogram()`` has a few options to adjust the output graph. The first option is the ``legend`` kwarg. This is used to provide a label for the executions. It takes a list of strings use to label each execution’s results. This is mostly useful when plotting multiple execution results in the same histogram. The ``sort`` kwarg is used to adjust the order the bars in the histogram are rendered. It can be set to either ascending order with ``asc`` or descending order with ``desc``. The ``number_to_keep`` kwarg takes an integer for the number of terms to show, the rest are grouped together in a single bar called rest. You can adjust the color of the bars with the ``color`` kwarg which either takes a string or a list of strings for the colors to use for the bars for each execution. You can adjust whether labels are printed above the bars or not with the ``bar_labels`` kwarg. The last option available is the ``figsize`` kwarg which takes a tuple of the size in inches to make the output figure."
msgstr "``plot_histogram()`` 有几个选项可调整输出图形。第一个选项是 ``legend``，用来提供执行的标签。它会取得字串清单，以标示每一个执行的结果。在同一个直方图中绘制多个执行结果时很好用。第二个是 ``sort`` ，用来调整直方图中的条形的呈现顺序。它可以设为 ``asc`` 表示升序或 ``desc`` 表示降序。第三个是 ``number_to_keep`` ，该参数为整型，表示要显示的词汇数量，其余则会在一个称为 rest 的单条中分组显示。第四个是``color`` ，您可以使用关键字参数 ``color`` 来调整条形的颜色，该参数需要使用关键字或关键字列表，以用于每个条形的颜色。第四个是``bar_labels``，您可以调整标签是否显示在列上方，或不使用关键字参数 ``bar_labels`` 。最后一个可用选项是关键字参数是 ``figsize``，它需要英寸为单位的元组，用于绘制输出图形。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:176
msgid "Using the output from plot_histogram()"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:178
msgid "When using the plot_histogram() function it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object from ``plot_histogram()`` to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png``. The ``savefig()`` method takes a path so you can adjust the location and filename where you’re saving the output."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:191
msgid "Plot State"
msgstr "绘制状态图"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:202
msgid "In many situations you want to see the state of a quantum computer. This could be for debugging. Here we assume you have this state (either from simulation or state tomography) and the goal is to visualize the quantum state. This requires exponential resources, so we advise to only view the state of small quantum systems. There are several functions for generating different types of visualization of a quantum state"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:212
msgid "A quantum state is either a state matrix :math:`\\rho` (Hermitian matrix) or statevector :math:`|\\psi\\rangle` (complex vector). The state matrix is related to the statevector by"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:214
msgid "\\rho = |\\psi\\rangle\\langle \\psi|,\n\n"
msgstr "\\rho = |\\psi\\rangle\\langle \\psi|,\n\n"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:216
msgid "and is more general as it can represent mixed states (positive sum of statevectors)"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:218
msgid "\\rho = \\sum_k p_k |\\psi_k\\rangle\\langle \\psi_k |.\n\n"
msgstr "\\rho = \\sum_k p_k |\\psi_k\\rangle\\langle \\psi_k |.\n\n"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:220
msgid "The visualizations generated by the functions are:"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:222
msgid "``'plot_state_city'``: The standard view for quantum states where the real and imaginary (imag) parts of the state matrix are plotted like a city."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:224
msgid "``'plot_state_qsphere'``: The Qiskit unique view of a quantum state where the amplitude and phase of the state vector are plotted in a spherical ball. The amplitude is the thickness of the arrow and the phase is the color. For mixed states it will show different ``'qsphere'`` for each component."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:226
msgid "``'plot_state_paulivec'``: The representation of the state matrix using Pauli operators as the basis :math:`\\rho=\\sum_{q=0}^{d^2-1}p_jP_j/d`."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:228
msgid "``'plot_state_hinton'``: Same as ``'city'`` but where the size of the element represents the value of the matrix element."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:230
msgid "``'plot_bloch_multivector'``: The projection of the quantum state onto the single qubit space and plotting on a bloch sphere."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:361
msgid "Here we see that there is no information about the quantum state in the single qubit space as all vectors are zero."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:373
msgid "Options when using state plotting functions"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:375
msgid "The various functions for plotting quantum states provide a number of options to adjust how the plots are rendered. Which options are available depends on the function being used."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:386
msgid "**plot_state_city()** options"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:388
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:422
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:455
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:502
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:596
msgid "**title** (str): a string that represents the plot title"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:389
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:423
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:456
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:489
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:503
msgid "**figsize** (tuple): figure size in inches (width, height)."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:390
msgid "**color** (list): a list of len=2 giving colors for real and imaginary components of matrix elements."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:420
msgid "**plot_state_hinton()** options"
msgstr "**plot_state_hinton()** 选项"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:453
msgid "**plot_state_paulivec()** options"
msgstr "**plot_state_paulivec()** 选项"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:457
msgid "**color** (list or str): color of the expectation value bars."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:487
msgid "**plot_state_qsphere()** options"
msgstr "**plot_state_qsphere()** 选项"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:500
msgid "**plot_bloch_multivector()** options"
msgstr "**plot_bloch_multivector()** 选项"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:534
msgid "Using the output from state plotting functions"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:536
msgid "When using any of the state plotting functions it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png`` in the current working directory. The ``savefig()`` method takes a path so you can adjust the location and filename where you’re saving the output."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:549
msgid "Plot Bloch Vector"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:551
msgid "A standard way of plotting a quantum system is using the Bloch vector. This only works for a single qubit and takes as input the Bloch vector."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:553
msgid "The Bloch vector is defined as :math:`[x = \\mathrm{Tr}[X \\rho], y = \\mathrm{Tr}[Y \\rho], z = \\mathrm{Tr}[Z \\rho]]`, where :math:`X`, :math:`Y`, and :math:`Z` are the Pauli operators for a single qubit and :math:`\\rho` is the state matrix."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:594
msgid "Options for plot_bloch_vector()"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:597
msgid "**figsize** (tuple): Figure size in inches (width, height)."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:628
msgid "Adjusting the output from plot_bloch_vector()"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:630
msgid "When using the ``plot_bloch_vector`` function it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png`` in the current working directory. The ``savefig()`` method takes a path so you can adjust the location and filename where you’re saving the output."
msgstr ""

