msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-09 12:18+0000\n"
"PO-Revision-Date: 2020-06-21 18:45\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/the_elements.po\n"
"X-Crowdin-File-ID: 7220\n"
"Language: tr_TR\n"

#: ../../the_elements.rst:5
msgid "The Qiskit Elements"
msgstr "Qiskit Elementleri"

#: ../../the_elements.rst:14
msgid "Terra"
msgstr "Terra"

#: ../../the_elements.rst:16
msgid "Terra, the ‘earth’ element, is the foundation on which the rest of Qiskit lies. Terra provides a bedrock for composing quantum programs at the level of circuits and pulses, to optimize them for the constraints of a particular device, and to manage the execution of batches of experiments on remote-access devices. Terra defines the interfaces for a desirable end-user experience, as well as the efficient handling of layers of optimization, pulse scheduling and backend communication."
msgstr "‘Toprak’ elementi olan Terra, Qiskit'in geri kalanının üzerine oturduğu temel elementtir. Terra, devreler ve sinyal atımları seviyesinde kuantum programlar oluşturmak, oluşturulan programları kullanılacak donanıma göre optimize etmek ve uzaktan erişilebilir cihazlarda çalıştırılacak olan deneylerin yönetimi için bir zemin sağlar. Terra hem iyi bir son kullanıcı deneyimi hem de optimizasyon, sinyal atım zamanlaması ve backend iletişimi katmanlarının verimli kullanımı için arayüzleri tanımlar."

#: ../../the_elements.rst:23
msgid "Qiskit Terra is organized in six main modules:"
msgstr "Qiskit Terra 6 ana modülden oluşur:"

#: ../../the_elements.rst:25
msgid "`Circuit <https://qiskit.org/documentation/apidoc/circuit.html>`__ A quantum circuit is a model for quantum computing in which a computation is done by performing a sequence of quantum operations (usually gates) on a register of qubits. A quantum circuit usually starts with the qubits in the :math:`|0,…,0>` state and these gates evolve the qubits to states that cannot be efficiently represented on a classical computer. To extract information on the state a quantum circuit must have a measurement which maps the outcomes (possible random due to the fundamental nature of quantum systems) to classical registers which can be efficiently represented."
msgstr "`Devre <https://qiskit.org/documentation/apidoc/circuit.html>`__ Kuantum devresi, kubitlerin kaydında bir dizi işlem (genellikle mantık kapıları) gerçekleştirilerek yapılan hesaplamalardaki kuantum hesaplamaya uygun bir modeldir. Bir kuantum devre genellikle :math:`|0,…,0>` hali ile başlar ve bu kapılar klasik bilgisayarlarda verimli bir şekilde temsil edilemeyen haller için kubitleri geliştirir. Belirli bir hal üzerinden bilgi almak için bir kuantum devre verimli bir şekilde temsil edilebilen klasik kaydedicilere gelen sonuçları planlayan bir ölçüm (kuantum sistemlerin temel doğası nedeniyle olası rastgele) yapmak zorundadır."

#: ../../the_elements.rst:34
msgid "`Pulse <https://qiskit.org/documentation/apidoc/pulse.html>`__ A pulse schedule is set of pulses which are sent to a quantum experiment that are applied to a channel (experimental input line). This is a lower level than circuits and requires each gate in the circuit to be  represented as a set of pulses. At this level the experiments can be designed to reduce errors (dynamical decoupling, error mitigation, and optimal pulse shapes)."
msgstr "`Atım <https://qiskit.org/documentation/apidoc/pulse.html>`__ Bir atım takvimi, bir kanala (deneysel giriş hattı) başvuran kuantum deneye gönderilen atımların kümesidir. Bu devrelerden daha alt bir seviyedir ve devredeki her kapının atımlar kümesi olarak temsil edilmesi gerekir. Bu seviyede deneyler hataları azaltmak için tasarlanabilir (dinamik ayrıklaştırma, hata azaltma ve uygun atım şekilleri)."

#: ../../the_elements.rst:40
msgid "`Transpiler <https://qiskit.org/documentation/apidoc/transpiler.html>`__ A major part of research on quantum computing is working out how to run a quantum circuits on real devices.  In these devices, experimental errors and decoherence introduce errors during computation. Thus, to obtain a robust implementation it is essential to reduce the number of gates and the overall running time of the quantum circuit. The transpiler introduces the concept of a pass manager to allow users to explore optimization and find better quantum circuits for their given algorithm. We call it a transpiler as the end result is still a circuit."
msgstr "`Transpiler <https://qiskit.org/documentation/apidoc/transpiler.html>`__ Transpiler bir programlama dilinden diğerine çevirerek kaynak kodu derler.  Kuantum hesaplama üzerindeki araştırmanın büyük bir kısmı kuantum devrelerin gerçek cihazlarda nasıl çalıştığını çözmek üzerinedir. Bu cihazlarda, deneysel hatalar ve eşevresizlik, hesaplama esnasında hatalara neden olurlar. Bu yüzden, güçlü bir uygulama elde etmek için kapı sayısını ve kuantum devrenin genel çalışma süresini azaltmak gereklidir. 'The transpiler' kullanıcılara optimizasyonu keşfetmelerini ve verilen algoritmaya uygun daha iyi kuantum devreler sağlamak için geçiş yöneticisi kavramını tanımlar. Son sonuç bir devreyse biz onu 'transpiler' olarak adlandırıyoruz."

#: ../../the_elements.rst:49
msgid "`Providers <https://qiskit.org/documentation/apidoc/providers.html>`__ Once the user has made the circuits to run on the backend they need to have a convenient way of working with it. In Terra we do this using four parts:"
msgstr "`Sağlayıcılar <https://qiskit.org/documentation/apidoc/providers.html>`__ Kullanıcı backendde çalıştırmak için devreleri yapmadan önce, sağlayıcılar onunla çalışmanın uygun bir yolunu bulmak zorundadır. Terra'da bunu 4 bölüm kullanarak yapıyoruz:"

#: ../../the_elements.rst:53
msgid "A `Provider <https://qiskit.org/documentation/api/qiskit.providers.BaseProvider.html>`__ is an entity that provides access to a group of different backends (for example, backends available through the `IBM Quantum Experience <https://quantum-computing.ibm.com>`__). It interacts with those backends to, for example, find out which ones are available, or retrieve an instance of a particular backend."
msgstr "Bir `Sağlayıcı <https://qiskit.org/documentation/api/qiskit.providers.BaseProvider.html>`__ farklı backend gruplarına erişim sağlayan elemandır (örneğin, `IBM Quantum Experience <https://quantum-computing.ibm.com>`__ aracılığıyla kullanılabilen backendler). O, bu backendlerle, örneğin, hangilerinin kullanılabilir olduğunu bulmak, veya özel bir backendin durumunu yeniden elde etmek için etkileşime girer."

#: ../../the_elements.rst:59
msgid "`Backend <https://qiskit.org/documentation/api/qiskit.providers.BaseBackend.html>`__ represent either a simulator or a real quantum computer and are responsible for running quantum circuits and returning results. They have a run method which takes in a `qobj` as input and returns a `BaseJob` object. This object allows asynchronous running of jobs for retrieving results from a backend when the job is completed."
msgstr "`Backend <https://qiskit.org/documentation/api/qiskit.providers.BaseBackend.html>`__ bir simülatörü veya gerçek bir kuantum bilgisayarı temsil eder ve kuantum devrelerin çalıştırılmasından ve sonuçların dönüşünden sorumludur. Backendlerin girdi olarak `qobj` alan ve bir `BaseJob` objesi geri döndüren bir çalıştırma metodları vardır. Bu obje iş tamamlandığında bir backendden sonuç almak için işlerin eşzamanlı olmayan çalışmasına izin verir."

#: ../../the_elements.rst:65
msgid "`Job <https://qiskit.org/documentation/api/qiskit.providers.BaseJob.html>`__ instances can be thought of as the “ticket” for a submitted job. They find out the execution’s state at a given point in time (for example, if the job is queued, running, or has failed) and also allow control over the job."
msgstr "`İş <https://qiskit.org/documentation/api/qiskit.providers.BaseJob.html>`__ örnekleri sunulmuş bir iş için \"bilet\" olarak düşünülebilir. Onlar zamanda verilen bir noktada uygulamanın durumunu ortaya çıkarırlar (örneğin, işin kuyrukta olması, çalışması veya başarısız olması) ve ayrıca iş üzerinde kontrol imkanı sunarlar."

#: ../../the_elements.rst:70
msgid "`Result <https://qiskit.org/documentation/stubs/qiskit.result.Result.html>`__. Once the job has finished Terra allows the results to be obtained from the remote backends using `result = job.result()`. This result object holds the quantum data and the most common way of interacting with it is by using `result.get_counts(circuit)`. This method allows the user to get the raw counts from the quantum circuit and use them for more analysis with quantum information tools provided by Terra."
msgstr "`Sonuç <https://qiskit.org/documentation/stubs/qiskit.result.Result.html>`__ İş tamamlanmadan önce, Terra `result = job.result()` kullanarak kontrol backendlerindenn sonuçların alınmasına izin verir. Bu sonuç objesi quantum verisini tutar ve bu veri ile etkileşimin en yaygın yöntemi `result.get_counts(circuit)` kullanmaktır. Bu yöntem kullanıcının kuantum devresinden ham sayılanları almasına ve onları Terra tarafından sağlanan kuantum bilgi araçlarıyla birlikte daha fazla analiz için kullanmasına izin verir."

#: ../../the_elements.rst:78
msgid "`Quantum Information <https://qiskit.org/documentation/apidoc/quantum_info.html>`__ To perform more advanced algorithms and analysis of the circuits run on the quantum computer, it is important to have tools to implement simple quantum information tasks. These include methods to both estimate metrics and generate quantum states, operations, and channels."
msgstr "`Kuantum Bilgi <https://qiskit.org/documentation/apidoc/quantum_info.html>`__ Daha gelişmiş algoritmalar ve kuantum bilgisayarda çalışan devrelerin analizini göstermek için, basit kuantum bilgi görevlerini yerine getirmek için araçlara sahip olmak önemlidir. Bunlar hem ölçüleri hesaplamak hem de kuantum haller, işlemler ve kanallar oluşturmak için yöntemler içerir."

#: ../../the_elements.rst:84
msgid "`Visualization <https://qiskit.org/documentation/apidoc/visualization.html>`__ In Terra we have many tools to visualize a quantum circuit. This allows a quick inspection of the quantum circuit to make sure it is what the user wanted to implement. There is a text, python and latex version. Once the circuit has run it is important to be able to view the output. There is a simple function (`plot_histogram`) to plot the results from a quantum circuit including an interactive version. There is also a function `plot_state` and `plot_bloch_vector` that allow the plotting of a quantum state. These functions are usually only used when using the `statevector_simulator` backend but can also be used on real data after running state tomography experiments (Ignis)."
msgstr "Görselleştirme `Visualization <https://qiskit.org/documentation/apidoc/visualization.html>`__ Terra'da bir kuantum devreyi görselleştirmek için çok aracımız var. Bu kullanıcının uygulamak istediğinin bu olduğuna emin olması için kuantum devresinin hızlı bir şekilde incelenmesini sağlar. Bir metin, python ve latex sürümü vardır. Devre çalıştırıldıktan sonra çıktıyı görebilmek önemlidir. Etkileşimli sürümü içeren bir kuantum devreden sonuçları çizmek için basit bir fonksiyon (`plot_histogram`) vardır. Ayrıca kuantum halini çizmeye olanak sağlayan `plot_state` ve `plot_bloch_vector` fonksiyonları vardır. Bu fonksiyonlar genelde sadece `statevector_simulator` backendi kullanıldığı zaman kullanılır fakat hal tomografisi deneyleri (Ignis) yapıldıktan sonra gerçek veriler üzerinde de kullanılabilir."

#: ../../the_elements.rst:98
msgid "Aer"
msgstr "Aer"

#: ../../the_elements.rst:100
msgid "Aer, the ‘air’ element, permeates all Qiskit elements. To really speed up development of quantum computers we need better simulators, emulators and debuggers. Aer helps us understand the limits of classical processors by demonstrating to what extent they can mimic quantum computation. Furthermore, we can use Aer to verify that current and near-future quantum computers function correctly. This can be done by stretching the limits of simulation, and by simulating the effects of realistic noise on the computation."
msgstr "Aer, ‘hava’ elementi, bütün Qiskit elementlerini barındırır. Kuantum bilgisayarların gelişimini gerçekten hızlandırmak için, daha iyi simülatörlere, emülatörlere ve hata ayıklayıcılara ihtiyacımız var. Aer, kuantum hesaplamasını ne ölçüde taklit edebileceklerini göstererek klasik işlemcilerin sınırlarını anlamamıza yardımcı olur. Ayrıca, mevcut ve yakın gelecekte kuantum bilgisayarların doğru bir şekilde çalışmasını doğrulamak için Aer'i kullanabiliriz. Bu simülasyon sınırlarını gererek ve hesaplama üzerinde gerçekçi gürültünün etkilerini simüle ederek yapılabilir."

#: ../../the_elements.rst:107
msgid "Aer provides a high performance simulator framework for quantum circuits using the Qiskit software stack. It contains optimized C++ simulator backends for executing circuits compiled in Terra. Aer also provides tools for constructing highly configurable noise models for performing realistic noisy simulations of the errors that occur during execution on real devices."
msgstr "Aer Qiskit software stack kullanarak kuantum devrelerine uygun, yüksek performanslı simülatör çatısına olanak sağlar. Terra'da derlenen devreleri yürütmek için optimize edilmiş C simülatörü backendi içerir. Aer ayrıca gerçek aygıtlarda yürütme sırasında meydana gelen hataların gerçekçi gürültülü simülasyonlarını gerçekleştirmeye uygun son derece yapılandırılabilir gürültü modelleri oluşturmak için araçlar sağlar."

#: ../../the_elements.rst:113
msgid "Qiskit Aer includes three high performance simulator backends:"
msgstr "Qiskit Aer üç yüksek performanslı simülatör backendi içerir:"

#: ../../the_elements.rst:126
msgid "`Qasm Simulator <https://qiskit.org/documentation/stubs/qiskit.providers.aer.QasmSimulator.html>`__"
msgstr "`Qasm Simülatörü <https://qiskit.org/documentation/stubs/qiskit.providers.aer.QasmSimulator.html>`__"

#: ../../the_elements.rst:116
msgid "Allows ideal and noisy multi-shot execution of qiskit circuits and returns counts or memory. There are multiple methods that can be used that simulate different circuits more efficiently. These include:"
msgstr "Qiskit devrelerinin ideal ve gürültülü çok-atımlı uygulanmasına olanak sağlar ve sayıları veya belleği geri verir. Farklı devreleri daha verimli bir şekilde simüle eden birden fazla yöntem vardır. Bunlar arasında:"

#: ../../the_elements.rst:120
msgid "*statevector* - Uses a dense statevector simulation."
msgstr "*statevector* - Yoğun bir hal vektörü simülasyonu kullanır."

#: ../../the_elements.rst:121
msgid "*stabilizer* - Uses a Clifford stabilizer state simulator that is only valid for Clifford circuits and noise models."
msgstr "*stabilizer* - Sadece Clifford devreleri ve gürültülü modeller için geçerli olan Clifford sabitleyici hal simülatörü kullanır."

#: ../../the_elements.rst:123
msgid "*extended_stabilizer* - Uses an approximate simulator that decomposes circuits into stabilizer state terms, the number of which grows with the number of non-Clifford gates."
msgstr "*extended_stabilizer* - Devreleri sabitleyici durum terimlerine ayrıştıran bir yaklaşık simülatörü kullanır, sayısı Clifford olmayan kapıların sayısı ile büyür."

#: ../../the_elements.rst:126
msgid "*matrix_product_state* - Uses a Matrix Product State (MPS) simulator."
msgstr "*matrix_product_state* - Bir Matris Çarpım Hali (MPS) simülatörü kullanır."

#: ../../the_elements.rst:130
msgid "`Statevector Simulator <https://qiskit.org/documentation/stubs/qiskit.providers.aer.StatevectorSimulator.html>`__"
msgstr "`Hal Vektörü Simülatörü <https://qiskit.org/documentation/stubs/qiskit.providers.aer.StatevectorSimulator.html>`__"

#: ../../the_elements.rst:129
msgid "Allows ideal single-shot execution of qiskit circuits and returns the final statevector of the simulator after application."
msgstr "Qiskit devrelerinin ideal tek seferlik yürütülmesini sağlar ve uygulamadan sonra simülatörün son hal vektörünü döndürür."

#: ../../the_elements.rst:136
msgid "`Unitary Simulator <https://qiskit.org/documentation/stubs/qiskit.providers.aer.UnitarySimulator.html>`__"
msgstr "`Uniter Simülatör <https://qiskit.org/documentation/stubs/qiskit.providers.aer.UnitarySimulator.html>`__"

#: ../../the_elements.rst:133
msgid "Allows ideal single-shot execution of qiskit circuits and returns the final unitary matrix of the circuit itself. Note that the circuit cannot contain measure or reset operations for this backend."
msgstr "Qiskit devrelerinin ideal tek seferlik yürütmesini sağlar ve devrenin son üniter matrisini kendi kendine döndürür. Devrenin bu backende uygun ölçü veya sıfırlama işlemleri içeremeyeceğini unutmayın."

#: ../../the_elements.rst:142
msgid "Ignis"
msgstr "Ignis"

#: ../../the_elements.rst:144
msgid "Ignis, the ‘fire’ element, is dedicated to fighting noise and errors and to forging a new path. This includes better characterization of errors, improving gates, and computing in the presence of noise. Ignis is meant for those who want to design quantum error correction codes, or who wish to study ways to characterize errors through methods such as tomography, or even to find a better way for using gates by exploring dynamical decoupling and optimal control."
msgstr "Ignis, ‘ateş’ elementi, gürültü ve hatalarla mücadele etmeye ve yeni bir yol çizmeye kendini adamıştır. Bu, gürültü varlığında hataların daha iyi karakterizasyonunu, kapıların iyileştirilmesini ve hesaplamaları içerir. Ignis kuantum hata düzeltme kodlarını dizayn etmek isteyenler veya tomografi gibi yöntemlerle hataları karakterize etmenin yollarını incelemek isteyenler, hatta dinamik ayrışmayı keşfederek ve optimum kontrol ile kapıları kullanmaya uygun daha iyi bir yol bulmak isteyenler içindir."

#: ../../the_elements.rst:151
msgid "Ignis provides code for users to easily generate circuits for specific experiments given a minimal set of user input parameters. Ignis code contains three fundamental building blocks:"
msgstr "Ignis, minimal bir kullanıcı girdi parametre kümesi verilen özel deneylere uygun devreleri kolay bir şekilde oluşturması için kullanıcılara kod sağlar. Ignis kodu üç temel yapı taşı içerir:"

#: ../../the_elements.rst:157
msgid "**Circuits**"
msgstr "**Circuits**"

#: ../../the_elements.rst:156
msgid "The circuits module provides the code to generate the list of circuits for a particular Ignis experiment based on a minimal set of user parameters. These are then run on Terra or Aer."
msgstr "Devreler modülü, minimal bir kullanıcı parametre kümesi temelli özel bir Ignis deneyine uygun devrelerin listesini oluşturmak için kod sağlar. Bunlar daha sonra Terra ve Aer üzerinde çalıştırılır."

#: ../../the_elements.rst:162
msgid "**Fitters**"
msgstr "**Fitters**"

#: ../../the_elements.rst:160
msgid "The results of an Ignis experiment are passed to the Fitters module where they are analyzed and fit according to the physics model describing the experiment. Fitters can plot the data plus fit and output a list of parameters."
msgstr "Ignis deneyinin sonuçları, analiz edildikleri ve deneyi tanımlayan fizik modeline fit edildikleri Fitters modülüne geçirilir. Fitters datayı ve fiti çizer ve parametrelerin bir listesini çıktı verir."

#: ../../the_elements.rst:167
msgid "**Filters**"
msgstr "**Filters**"

#: ../../the_elements.rst:165
msgid "For certain Ignis experiments, the fitters can output a Filter object. Filters can be used to mitigate errors in other experiments using the calibration results of an Ignis experiment."
msgstr "Belirli Ignis deneyleri için, fitters bir Filtre objesi çıktı verir. Filtreler bir Ignis deneyinin kalibrasyon sonuçlarını kullanan diğer deneylerdeki hataları azaltmak için kullanılabilir."

#: ../../the_elements.rst:169
msgid "Qiskit Ignis is organized into three types of experiments that can be performed:"
msgstr "Qiskit Ignis gerçekleştirilebilen üç tip deney üzerine düzenlenmiştir:"

#: ../../the_elements.rst:176
msgid "`Characterization <https://qiskit.org/documentation/apidoc_legacy/ignis/characterization/characterization.html>`__"
msgstr "`Karakterizasyon <https://qiskit.org/documentation/apidoc_legacy/ignis/characterization/characterization.html>`__"

#: ../../the_elements.rst:174
msgid "Characterization experiments are designed to measure parameters in the system such as noise parameters (T1, T2-star, T2), Hamiltonian parameters such as the ZZ interaction rate and control errors in the gates."
msgstr "Karakterizasyon deneyleri sistemdeki gürültü parametreleri (T1, T2-star, T2 gibi) ve ZZ etkileşim oranını gibi Hamiltonyen parametreleri ölçmek ve kapılardaki hataları kontrol etmek için tasarlanmıştır."

#: ../../the_elements.rst:182
msgid "`Verification <https://qiskit.org/documentation/apidoc_legacy/ignis/verification/verification.html>`__"
msgstr "`Doğrulama <https://qiskit.org/documentation/apidoc_legacy/ignis/verification/verification.html>`__"

#: ../../the_elements.rst:179
msgid "Verification experiments are designed to verify gate and small circuit performance. Verification includes state and process tomography, quantum volume and randomized benchmarking (RB). These experiments provide the information to determine performance metrics such as the gate fidelity."
msgstr "Doğrulama deneyleri kapı ve küçük devre performansını doğrulamak için tasarlanmıştır. Doğrulama, hal ve süreç tomografisini, kuantum hacmini ve rastgele kıyaslama (RB) içerir. Bu deneyler, kapıların doğruluğu gibi performans ölçümlerini belirlemek için bilgi sağlar."

#: ../../the_elements.rst:191
msgid "`Mitigation <https://qiskit.org/documentation/apidoc_legacy/ignis/mitigation/mitigation.html>`__"
msgstr "`Azaltma <https://qiskit.org/documentation/apidoc_legacy/ignis/mitigation/mitigation.html>`__"

#: ../../the_elements.rst:185
msgid "Mitigation experiments run calibration circuits that are analyzed to generate mitigation routines that can be applied to arbitrary sets of results run on the same backend. Ignis code will generate a list of circuits that run calibration measurements. The results of these measurements will be processed by a Fitter and will output a Filter than can be used to apply mitigation to other results."
msgstr "Azaltma deneyleri aynı backendde çalıştırılan rasgele sonuçlar kümesine uygulanabilen azaltma rutinleri oluşturmak için analiz edilmiş kalibrasyon devrelerini çalıştırır. Ignis kodu, kalibrasyon ölçümlerini çalıştıran devrelerin bir listesini oluşturur. Bu ölçümlerin sonuçları bir Fitter tarafından işlenecek ve diğer sonuçlara azaltma uygulamak için kullanılabilen bir filtre çıktısı verecektir."

#: ../../the_elements.rst:197
msgid "Aqua"
msgstr "Aqua"

#: ../../the_elements.rst:199
msgid "Aqua, the ‘water’ element, is the element of life. To make quantum computing live up to its expectations, we need to find real-world applications. Aqua is where algorithms for quantum computers are built. These algorithms can be used to build applications for quantum computing. Aqua is accessible to domain experts in chemistry, optimization, finance and AI, who want to explore the benefits of using quantum computers as accelerators for specific computational tasks."
msgstr "Aqua, ‘su’ elementi, yaşam elementidir. Kuantum hesaplamanın beklentileri karşılamasını sağlamak için, gerçek dünya uygulamaları bulmak zorundayız. Aqua, kuantum bilgisayarlar için algoritmalar inşa edilen yerdir. Bu algoritmalar kuantum hesaplamaya uygun uygulamalar inşa etmek için kullanılabilir. Aqua, belrli hesaplama görevleri için hızlandırıcı olarak kuantum bilgisayarları kullanmanın yararlarını keşfetmek isteyen kimya, optimizasyon, finans ve yapay zeka alanlarındaki ihtisas uzmanları tarafından erişilebilirdir."

#: ../../the_elements.rst:207
msgid "Problems that may benefit from the power of quantum computing have been identified in numerous domains, such as Chemistry, Artificial Intelligence (AI), Optimization and Finance. Quantum computing, however, requires very specialized skills. To address the needs of the vast population of practitioners who want to use and contribute to quantum computing at various levels of the software stack, we have created Qiskit Aqua."
msgstr "Kuantum hesaplamanın gücünden yararlanabilecek sorunlar Kimya, Yapay zeka(AI), Optimizasyon ve Finans gibi birçok alanda tanımlanmıştır. Fakat kuantum hesaplama, çok özelleşmiş beceriler gerektirir. Software stack'ın çeşitli seviyelerinde kuantum hesaplamayı kullanmak ve kuantum hesaplamaya katkı sağlamak isteyen uygulayıcıların geniş nüfusunun ihtiyaçlarını karşılamak için Qiskit Aqua'yı oluşturduk."

