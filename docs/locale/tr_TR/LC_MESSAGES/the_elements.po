msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-16 10:37+0000\n"
"PO-Revision-Date: 2020-07-26 18:06\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/the_elements.po\n"
"X-Crowdin-File-ID: 7220\n"
"Language: tr_TR\n"

#: ../../the_elements.rst:5
msgid "The Qiskit Elements"
msgstr "Qiskit Elementleri"

#: ../../the_elements.rst:14
msgid "Terra"
msgstr "Terra"

#: ../../the_elements.rst:16
msgid "Terra, the ‘earth’ element, is the foundation on which the rest of Qiskit lies. Terra provides a bedrock for composing quantum programs at the level of circuits and pulses, to optimize them for the constraints of a particular device, and to manage the execution of batches of experiments on remote-access devices. Terra defines the interfaces for a desirable end-user experience, as well as the efficient handling of layers of optimization, pulse scheduling and backend communication."
msgstr "‘Toprak’ elementi olan Terra, Qiskit'in geri kalanının üzerine oturduğu temel elementtir. Terra, devreler ve sinyal atımları seviyesinde kuantum programlar oluşturmak, oluşturulan programları kullanılacak donanıma göre optimize etmek ve uzaktan erişilebilir cihazlarda çalıştırılacak olan deneylerin yönetimi için bir zemin sağlar. Terra hem iyi bir son kullanıcı deneyimi hem de optimizasyon, sinyal atım zamanlaması ve backend iletişimi katmanlarının verimli kullanımı için arayüzleri tanımlar."

#: ../../the_elements.rst:23
msgid "Qiskit Terra is organized in six main modules:"
msgstr "Qiskit Terra 6 ana modülden oluşur:"

#: ../../the_elements.rst:25
msgid ":mod:`qiskit.circuit` A quantum circuit is a model for quantum computing in which a computation is done by performing a sequence of quantum operations (usually gates) on a register of qubits. A quantum circuit usually starts with the qubits in the :math:`|0,…,0>` state and these gates evolve the qubits to states that cannot be efficiently represented on a classical computer. To extract information on the state a quantum circuit must have a measurement which maps the outcomes (possible random due to the fundamental nature of quantum systems) to classical registers which can be efficiently represented."
msgstr ":mod:`qiskit.circuit` Bir kuantum devre, kuantum hesaplama için, kübitlerin bir yazmacı (register) üzerinde bir kuantum işlemi (genellikle kapılar) dizisi gerçekleştirerek bir hesaplama yapıldığı bir modeldir. Bir kuantum devresi genellikle :math:`| 0,…, 0>` durumundaki kubitlerle başlar ve bu kapılar, kübitleri klasik bir bilgisayarda verimli bir şekilde temsil edilemeyen durumlara dönüştürür. Durum hakkında bilgi elde etmek için bir kuantum devresi, sonuçları (kuantum sistemlerinin temel doğası nedeniyle olası rastgele sonuçlar) etkili bir şekilde temsil edilebilen klasik kayıtlarla eşleyen bir ölçüme sahip olmalıdır."

#: ../../the_elements.rst:34
msgid ":mod:`qiskit.pulse` A pulse schedule is set of pulses which are sent to a quantum experiment that are applied to a channel (experimental input line). This is a lower level than circuits and requires each gate in the circuit to be  represented as a set of pulses. At this level the experiments can be designed to reduce errors (dynamical decoupling, error mitigation, and optimal pulse shapes)."
msgstr ":mod: `qiskit.pulse` Bir atım programı, bir kanala (deneysel giriş hattı) uygulanan bir kuantum deneyine gönderilen atımlar kümesidir. Bu, devrelerden daha düşük bir seviyedir ve devredeki her bir kapının bir dizi atım olarak temsil edilmesini gerektirir. Bu seviyede deneyler hataları azaltmak için tasarlanabilir (dinamik ayırma, hata azaltma ve en uygun atım şekilleri)."

#: ../../the_elements.rst:40
msgid ":mod:`qiskit.transpiler` A major part of research on quantum computing is working out how to run a quantum circuits on real devices.  In these devices, experimental errors and decoherence introduce errors during computation. Thus, to obtain a robust implementation it is essential to reduce the number of gates and the overall running time of the quantum circuit. The transpiler introduces the concept of a pass manager to allow users to explore optimization and find better quantum circuits for their given algorithm. We call it a transpiler as the end result is still a circuit."
msgstr ":mod: `qiskit.transpiler` Kuantum hesaplama üzerine yapılan araştırmaların büyük bir kısmı, gerçek cihazlarda kuantum devrelerinin nasıl çalıştırılacağı üzerinedir. Bu cihazlarda deneysel hatalar ve eşevreliliğin kaybolması, hesaplama sırasında hatalar yaratır. Bu nedenle, sağlam bir uygulama elde etmek için kapıların sayısını ve kuantum devresinin toplam çalışma süresini azaltmak önemlidir. Transpiler, kullanıcıların optimizasyonu keşfetmelerine ve verilen algoritmaları için daha iyi kuantum devreleri bulmasına olanak tanıyan bir geçiş yöneticisi kavramını sunar. Sonuç hala bir devre olduğu için buna bir transpiler diyoruz."

#: ../../the_elements.rst:49
msgid ":mod:`qiskit.providers` Once the user has made the circuits to run on the backend they need to have a convenient way of working with it. In Terra we do this using four parts:"
msgstr ":mod: `qiskit.providers` Kullanıcı devreleri yaptıktan sonra arka uçta çalıştırmak için onunla uygun bir yola sahip olması gerekir. Terra'da bunu dört parça kullanarak yapıyoruz:"

#: ../../the_elements.rst:53
msgid "A ``Provider`` is an entity that implements the abstract base class :class:`~qiskit.providers.BaseProvider` and provides access to a group of different backends (for example, backends available through the `IBM Quantum Experience <https://quantum-computing.ibm.com>`__). It interacts with those backends to, for example, find out which ones are available, or retrieve an instance of a particular backend."
msgstr "``Sağlayıcı``, soyut tabanlı sınıf :class:`~qiskit.providers.BaseProvider` uygulayan bir varlıktır ve bir grup farklı arka uca erişim sağlar (örneğin,`IBM Quantum Experience <https://quantum-computing.ibm.com>`__). Örneğin, hangilerinin kullanılabilir olduğunu bulmak veya belirli bir arka ucun bir örneğini almak için bu arka uçlarla etkileşime girer."

#: ../../the_elements.rst:59
msgid "A ``Backend`` is an entity that implements the abstract base class :class:`~qiskit.providers.Backend` represent either a simulator or a real quantum computer and are responsible for running quantum circuits and returning results. They have a run method which takes in a `qobj` as input and returns a `BaseJob` object. This object allows asynchronous running of jobs for retrieving results from a backend when the job is completed."
msgstr "``Arka uç`` soyut tabanlı sınıf :class:`~qiskit.providers.Backend` uygulayan bir varlıktır ya bir simülatörü ya da gerçek bir kuantum bilgisayarı temsil eder ve kuantum devreleri çalıştırıp sonuçları döndürmekten sorumludur. Girdi olarak bir qobj alıp bir BaseJob nesnesi döndüren bir çalıştırma yöntemine sahiptir. Bu nesne, iş tamamlandığında arka uçtan sonuç almak için işlerin eşzamansız (asenkron) olarak çalıştırılmasına izin verir."

#: ../../the_elements.rst:66
msgid "``Job`` instances are implementations of the abstract base class :class:`~qiskit.providers.BaseJob` and can be thought of as the “ticket” for a submitted job. They find out the execution’s state at a given point in time (for example, if the job is queued, running, or has failed) and also allow control over the job."
msgstr "``Job`` örnekleri, soyut tabanlı sınıfın :class:`~ qiskit.providers.BaseJob` uygulamalarıdır ve gönderilen bir iş için “bilet” olarak düşünülebilir. Yürütmenin durumunu belirli bir zamanda bulurlar (örneğin, iş sıraya alındıysa, çalışıyorsa veya başarısız olduysa) ve ayrıca iş üzerinde denetime izin verirler."

#: ../../the_elements.rst:71
msgid ":class:`~qiskit.result.Result` Once the job has finished Terra allows the results to be obtained from the remote backends using ``result = job.result()``. This result object holds the quantum data and the most common way of interacting with it is by using ``result.get_counts(circuit)``. This method allows the user to get the raw counts from the quantum circuit and use them for more analysis with quantum information tools provided by Terra."
msgstr ":class:`~qiskit.result.Result` İş bittikten sonra Terra, sonuçların ``result = job.result()`` kullanılarak uzak arka uçlardan alınmasına izin verir. Bu sonuç nesnesi kuantum verilerini tutar ve onunla etkileşime girmenin en yaygın yolu ``result.get_counts(circuit)`` kullanmaktır. Bu yöntem, kullanıcının ham sayıları kuantum devresinden almasına ve Terra tarafından sağlanan kuantum bilgi araçlarıyla daha fazla analiz için kullanmasına izin verir."

#: ../../the_elements.rst:79
msgid ":mod:`qiskit.quantum_info` To perform more advanced algorithms and analysis of the circuits run on the quantum computer, it is important to have tools to implement simple quantum information tasks. These include methods to both estimate metrics and generate quantum states, operations, and channels."
msgstr ":mod:`qiskit.quantum_info` Kuantum bilgisayarda çalıştırılan devrelerin daha gelişmiş algoritmalarını ve analizlerini yapmak için, basit kuantum bilgi görevlerini uygulamak için araçlara sahip olmak önemlidir. Bu element, hem metrikleri tahmin etme hem de kuantum durumları, işlemleri ve kanalları oluşturma gibi yöntemleri barındırır."

#: ../../the_elements.rst:85
msgid ":mod:`qiskit.visualization` In Terra we have many tools to visualize a quantum circuit. This allows a quick inspection of the quantum circuit to make sure it is what the user wanted to implement. There is a text, python and latex version. Once the circuit has run it is important to be able to view the output. There is a simple function (:func:`~qiskit.visualization.plot_histogram`) to plot the results from a quantum circuit including an interactive version. There is also a function :func:`~qiskit.visualization.plot_state` and :func:`~qiskit.visualization.plot_bloch_vector` that allow the plotting of a quantum state."
msgstr ":mod:`qiskit.visualization` Terra'da bir kuantum devresini görselleştirmek için birçok aracımız bulunmaktadır. Bu araç , kullanıcının uygulamak istediği şey olduğundan emin olmak için kuantum devresinin hızlı bir şekilde incelenmesini sağlar. Metin, python ve latex versiyonu bulunur. Devre çalıştıktan sonra, çıkışı görebilmek önemlidir. Etkileşimli bir sürüm içeren bir kuantum devresinden sonuçları çizmek için basit bir işlev (: func:`~qiskit.visualization.plot_histogram`) vardır. Ayrıca eksta işlev olarak: func:`~qiskit.visualization.plot_state` ve: func:` ~qiskit.visualization.plot_bloch_vector` bir kuantum durumunun çizilmesine izin verir."

#: ../../the_elements.rst:98
msgid "Aer"
msgstr "Aer"

#: ../../the_elements.rst:100
msgid "Aer, the ‘air’ element, permeates all Qiskit elements. To really speed up development of quantum computers we need better simulators, emulators and debuggers. Aer helps us understand the limits of classical processors by demonstrating to what extent they can mimic quantum computation. Furthermore, we can use Aer to verify that current and near-future quantum computers function correctly. This can be done by stretching the limits of simulation, and by simulating the effects of realistic noise on the computation."
msgstr "Aer, ‘hava’ elementi, bütün Qiskit elementlerini barındırır. Kuantum bilgisayarların gelişimini gerçekten hızlandırmak için, daha iyi simülatörlere, emülatörlere ve hata ayıklayıcılara ihtiyacımız var. Aer, kuantum hesaplamasını ne ölçüde taklit edebileceklerini göstererek klasik işlemcilerin sınırlarını anlamamıza yardımcı olur. Ayrıca, mevcut ve yakın gelecekte kuantum bilgisayarların doğru bir şekilde çalışmasını doğrulamak için Aer'i kullanabiliriz. Bu simülasyon sınırlarını gererek ve hesaplama üzerinde gerçekçi gürültünün etkilerini simüle ederek yapılabilir."

#: ../../the_elements.rst:107
msgid "Aer provides a high performance simulator framework for quantum circuits using the Qiskit software stack. It contains optimized C++ simulator backends for executing circuits compiled in Terra. Aer also provides tools for constructing highly configurable noise models for performing realistic noisy simulations of the errors that occur during execution on real devices."
msgstr "Aer Qiskit software stack kullanarak kuantum devrelerine uygun, yüksek performanslı simülatör çatısına olanak sağlar. Terra'da derlenen devreleri yürütmek için optimize edilmiş C simülatörü backendi içerir. Aer ayrıca gerçek aygıtlarda yürütme sırasında meydana gelen hataların gerçekçi gürültülü simülasyonlarını gerçekleştirmeye uygun son derece yapılandırılabilir gürültü modelleri oluşturmak için araçlar sağlar."

#: ../../the_elements.rst:113
msgid "Qiskit Aer includes three high performance simulator backends:"
msgstr "Qiskit Aer üç yüksek performanslı simülatör backendi içerir:"

#: ../../the_elements.rst:126
msgid ":class:`~qiskit.providers.aer.QasmSimulator`"
msgstr ":class:`~qiskit.providers.aer.QasmSimulator`"

#: ../../the_elements.rst:116
msgid "Allows ideal and noisy multi-shot execution of qiskit circuits and returns counts or memory. There are multiple methods that can be used that simulate different circuits more efficiently. These include:"
msgstr "Qiskit devrelerinin ideal ve gürültülü çok-atımlı uygulanmasına olanak sağlar ve sayıları veya belleği geri verir. Farklı devreleri daha verimli bir şekilde simüle eden birden fazla yöntem vardır. Bunlar arasında:"

#: ../../the_elements.rst:120
msgid "*statevector* - Uses a dense statevector simulation."
msgstr "*statevector* - Yoğun bir hal vektörü simülasyonu kullanır."

#: ../../the_elements.rst:121
msgid "*stabilizer* - Uses a Clifford stabilizer state simulator that is only valid for Clifford circuits and noise models."
msgstr "*stabilizer* - Sadece Clifford devreleri ve gürültülü modeller için geçerli olan Clifford sabitleyici hal simülatörü kullanır."

#: ../../the_elements.rst:123
msgid "*extended_stabilizer* - Uses an approximate simulator that decomposes circuits into stabilizer state terms, the number of which grows with the number of non-Clifford gates."
msgstr "*extended_stabilizer* - Devreleri sabitleyici durum terimlerine ayrıştıran bir yaklaşık simülatörü kullanır, sayısı Clifford olmayan kapıların sayısı ile büyür."

#: ../../the_elements.rst:126
msgid "*matrix_product_state* - Uses a Matrix Product State (MPS) simulator."
msgstr "*matrix_product_state* - Bir Matris Çarpım Hali (MPS) simülatörü kullanır."

#: ../../the_elements.rst:130
msgid ":mod:`~qiskit.providers.aer.StatevectorSimulator`"
msgstr ":mod:`~qiskit.providers.aer.StatevectorSimulator`"

#: ../../the_elements.rst:129
msgid "Allows ideal single-shot execution of qiskit circuits and returns the final statevector of the simulator after application."
msgstr "Qiskit devrelerinin ideal tek seferlik yürütülmesini sağlar ve uygulamadan sonra simülatörün son hal vektörünü döndürür."

#: ../../the_elements.rst:136
msgid ":mod:`~qiskit.providers.UnitarySimulator`"
msgstr ":mod:`~qiskit.providers.UnitarySimulator`"

#: ../../the_elements.rst:133
msgid "Allows ideal single-shot execution of qiskit circuits and returns the final unitary matrix of the circuit itself. Note that the circuit cannot contain measure or reset operations for this backend."
msgstr "Qiskit devrelerinin ideal tek seferlik yürütmesini sağlar ve devrenin son üniter matrisini kendi kendine döndürür. Devrenin bu backende uygun ölçü veya sıfırlama işlemleri içeremeyeceğini unutmayın."

#: ../../the_elements.rst:142
msgid "Ignis"
msgstr "Ignis"

#: ../../the_elements.rst:144
msgid "Ignis, the ‘fire’ element, is dedicated to fighting noise and errors and to forging a new path. This includes better characterization of errors, improving gates, and computing in the presence of noise. Ignis is meant for those who want to design quantum error correction codes, or who wish to study ways to characterize errors through methods such as tomography, or even to find a better way for using gates by exploring dynamical decoupling and optimal control."
msgstr "Ignis, ‘ateş’ elementi, gürültü ve hatalarla mücadele etmeye ve yeni bir yol çizmeye kendini adamıştır. Bu, gürültü varlığında hataların daha iyi karakterizasyonunu, kapıların iyileştirilmesini ve hesaplamaları içerir. Ignis kuantum hata düzeltme kodlarını dizayn etmek isteyenler veya tomografi gibi yöntemlerle hataları karakterize etmenin yollarını incelemek isteyenler, hatta dinamik ayrışmayı keşfederek ve optimum kontrol ile kapıları kullanmaya uygun daha iyi bir yol bulmak isteyenler içindir."

#: ../../the_elements.rst:151
msgid "Ignis provides code for users to easily generate circuits for specific experiments given a minimal set of user input parameters. Ignis code contains three fundamental building blocks:"
msgstr "Ignis, minimal bir kullanıcı girdi parametre kümesi verilen özel deneylere uygun devreleri kolay bir şekilde oluşturması için kullanıcılara kod sağlar. Ignis kodu üç temel yapı taşı içerir:"

#: ../../the_elements.rst:157
msgid "**Circuits**"
msgstr "**Circuits**"

#: ../../the_elements.rst:156
msgid "The circuits module provides the code to generate the list of circuits for a particular Ignis experiment based on a minimal set of user parameters. These are then run on Terra or Aer."
msgstr "Devreler modülü, minimal bir kullanıcı parametre kümesi temelli özel bir Ignis deneyine uygun devrelerin listesini oluşturmak için kod sağlar. Bunlar daha sonra Terra ve Aer üzerinde çalıştırılır."

#: ../../the_elements.rst:162
msgid "**Fitters**"
msgstr "**Fitters**"

#: ../../the_elements.rst:160
msgid "The results of an Ignis experiment are passed to the Fitters module where they are analyzed and fit according to the physics model describing the experiment. Fitters can plot the data plus fit and output a list of parameters."
msgstr "Ignis deneyinin sonuçları, analiz edildikleri ve deneyi tanımlayan fizik modeline fit edildikleri Fitters modülüne geçirilir. Fitters datayı ve fiti çizer ve parametrelerin bir listesini çıktı verir."

#: ../../the_elements.rst:167
msgid "**Filters**"
msgstr "**Filters**"

#: ../../the_elements.rst:165
msgid "For certain Ignis experiments, the fitters can output a Filter object. Filters can be used to mitigate errors in other experiments using the calibration results of an Ignis experiment."
msgstr "Belirli Ignis deneyleri için, fitters bir Filtre objesi çıktı verir. Filtreler bir Ignis deneyinin kalibrasyon sonuçlarını kullanan diğer deneylerdeki hataları azaltmak için kullanılabilir."

#: ../../the_elements.rst:169
msgid "Qiskit Ignis is organized into three types of experiments that can be performed:"
msgstr "Qiskit Ignis gerçekleştirilebilen üç tip deney üzerine düzenlenmiştir:"

#: ../../the_elements.rst:173
msgid ":mod:`qiskit.ignis.characterization` Characterization experiments are designed to measure parameters in the system such as noise parameters (T1, T2-star, T2), Hamiltonian parameters such as the ZZ interaction rate and control errors in the gates."
msgstr ":mod:`qiskit.ignis.characterization` Karakterizasyon deneyleri sistemdeki gürültü parametreleri (T1, T2-star, T2 gibi) ve ZZ etkileşim oranı gibi Hamiltonyen parametreleri ölçmek ve kapılardaki hataları kontrol etmek için tasarlanmıştır."

#: ../../the_elements.rst:178
msgid ":mod:`qiskit.ignis.verification` Verification experiments are designed to verify gate and small circuit performance. Verification includes state and process tomography, quantum volume and randomized benchmarking (RB). These experiments provide the information to determine performance metrics such as the gate fidelity."
msgstr ":mod:`qiskit.ignis.verification` Doğrulama deneyleri kapı ve küçük devre performansını doğrulamak için tasarlanmıştır. Doğrulama, hal ve süreç tomografisini, kuantum hacmini ve rastgele kıyaslama (RB) içerir. Bu deneyler, kapıların doğruluğu gibi performans ölçümlerini belirlemek için bilgi sağlar."

#: ../../the_elements.rst:184
msgid ":mod:`qiskit.ignis.mitigation` Mitigation experiments run calibration circuits that are analyzed to generate mitigation routines that can be applied to arbitrary sets of results run on the same backend. Ignis code will generate a list of circuits that run calibration measurements. The results of these measurements will be processed by a Fitter and will output a Filter than can be used to apply mitigation to other results."
msgstr ":mod:`qiskit.ignis.mitigation` Etki azaltma deneyleri, aynı arka uçta rasgele sonuç kümelerine uygulanabilecek etki azaltma rutinleri oluşturmak için analiz edilen kalibrasyon devreleri çalıştırır. Ignis kodu, kalibrasyon ölçümlerini çalıştıran devrelerin bir listesini oluşturur. Bu ölçümlerin sonuçları bir Fitter tarafından işlenecek ve diğer sonuçlara hafifletme uygulamak için kullanılabilecek bir filtre sunabilecektir."

#: ../../the_elements.rst:197
msgid "Aqua"
msgstr "Aqua"

#: ../../the_elements.rst:199
msgid "Aqua, the ‘water’ element, is the element of life. To make quantum computing live up to its expectations, we need to find real-world applications. Aqua is where algorithms for quantum computers are built. These algorithms can be used to build applications for quantum computing. Aqua is accessible to domain experts in chemistry, optimization, finance and AI, who want to explore the benefits of using quantum computers as accelerators for specific computational tasks."
msgstr "Aqua, ‘su’ elementi, yaşam elementidir. Kuantum hesaplamanın beklentileri karşılamasını sağlamak için, gerçek dünya uygulamaları bulmak zorundayız. Aqua, kuantum bilgisayarlar için algoritmalar inşa edilen yerdir. Bu algoritmalar kuantum hesaplamaya uygun uygulamalar inşa etmek için kullanılabilir. Aqua, belrli hesaplama görevleri için hızlandırıcı olarak kuantum bilgisayarları kullanmanın yararlarını keşfetmek isteyen kimya, optimizasyon, finans ve yapay zeka alanlarındaki ihtisas uzmanları tarafından erişilebilirdir."

#: ../../the_elements.rst:207
msgid "Problems that may benefit from the power of quantum computing have been identified in numerous domains, such as Chemistry, Artificial Intelligence (AI), Optimization and Finance. Quantum computing, however, requires very specialized skills. To address the needs of the vast population of practitioners who want to use and contribute to quantum computing at various levels of the software stack, we have created Qiskit Aqua."
msgstr "Kuantum hesaplamanın gücünden yararlanabilecek sorunlar Kimya, Yapay zeka(AI), Optimizasyon ve Finans gibi birçok alanda tanımlanmıştır. Fakat kuantum hesaplama, çok özelleşmiş beceriler gerektirir. Software stack'ın çeşitli seviyelerinde kuantum hesaplamayı kullanmak ve kuantum hesaplamaya katkı sağlamak isteyen uygulayıcıların geniş nüfusunun ihtiyaçlarını karşılamak için Qiskit Aqua'yı oluşturduk."

