msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-21 22:19+0000\n"
"PO-Revision-Date: 2022-04-21 23:28\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.po\n"
"X-Crowdin-File-ID: 9128\n"
"Language: tr_TR\n"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:10
msgid "This page was generated from `tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb`__."
msgstr "Bu sayfa `tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb`__ adresinden oluşturuldu."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:9
msgid "Transpiler Passes and Pass Manager"
msgstr "Aktarıcı Geçişleri ve Geçiş Yöneticisi"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:21
msgid "Introduction"
msgstr "Giriş"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:32
msgid "A central component of Qiskit Terra is the transpiler, which is designed for modularity and extensibility. The goal is to be able to easily write new circuit transformations (known as transpiler **passes**), and combine them with other existing passes. Which passes are chained together and in which order has a major effect on the final outcome. This pipeline is determined by a **pass manager**, which schedules the passes and also allows passes to communicate with each other by providing a shared space. In this way, the transpiler opens up the door for research into aggressive optimization of quantum circuits."
msgstr "Qiskit Terra'nın merkezi bir bileşeni, modülerlik ve genişletilebilirlik için tasarlanmış aktarıcıdır. Amaç, yeni devre dönüşümlerini (aktarıcı **geçişleri** olarak bilinir) kolayca yazabilmek ve mevcut diğer geçişlerle birleştirmektir. Hangi geçişler birlikte zincirlenir ve hangi düzenin nihai sonuç üzerinde büyük etkisi vardır. Bu ardışık düzen, geçişleri programlayan ve geçişlerin ortak bir alan sağlayarak birbirleriyle iletişim kurmasına olanak tanıyan bir **geçiş yöneticisi** tarafından belirlenir. Bu şekilde, aktarıcı kuantum devrelerinin agresif optimizasyonuna yönelik araştırma için kapı açar."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:35
msgid "In this notebook, we look at the built-in passes, how to use the pass manager, and develop a simple custom transpiler pass. In order to do the latter, we first need to introduce the internal representation of quantum circuits in Qiskit, in the form of a Directed Acyclic Graph, or **DAG**. Then, we illustrate a simple swap mapper pass, which transforms an input circuit to be compatible with a limited-connectivity quantum device."
msgstr "Bu not defterinde, yerleşik geçişlere, geçiş yöneticisinin nasıl kullanılacağına ve basit bir özel transpiler geçişi geliştireceğine bakıyoruz. Sonuncusunu yapmak için önce Qiskit'teki kuantum devrelerinin dahili temsilini Yönlendirilmiş Bir Asiklik Graf veya **DAG** şeklinde tanıtmamız gerekir. Daha sonra, bir giriş devresini sınırlı bağlantılı bir kuantum cihazı ile uyumlu olacak şekilde dönüştüren basit bir takas eşleyici geçişini gösteririz."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:37
msgid "**Before you start**: You may need to install the ``pydot`` library and the ``graphviz`` library for the DAG plotting routines. If you are using Anaconda Python, you can install both with the ``conda`` command. If you use your system’s native Python interpreter, install ``pydot`` using the ``pip`` command, and install ``graphviz`` using your system’s native package manager (e.g. ``yum``, ``apt``, ``dnf``, ``brew``, etc.)."
msgstr "***Başlamadan önce***: DAG çizim yordamı için ``pydot`` ve ``graphviz`` kütüphanelerini kurmanız gerekebilir. Eğer Anaconda Python kullanıyorsanız ``conda`` komutu ile ikisini de kurabilirsiniz. Eğer sisteminizin yerel Python yorumlayıcısını kullanıyorsanız ``pip`` komutu kullanarak ``pydot`` u ve sisteminizin yerel paket yöneticisini (örneğin ``yum``, ``apt``, ``dnf``, ``brew``, vb.) kullanarak ``graphviz`` i kurun."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:61
msgid "PassManager object"
msgstr "PassManager nesnesi"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:63
msgid "Lets you specify the set of passes you want."
msgstr "İstediğiniz geçiş kümesini belirtmenize izin verir."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:118
msgid "All of Qiskit’s transpiler passes are accessible from ``qiskit.transpiler.passes``."
msgstr "Tüm Qiskit'in transpiler geçişlerine ``qiskit.transpiler.passes`` adresinden erişilebilmektedir."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:306
msgid "Different Variants of the Same Pass"
msgstr "Aynı Geçişin Farklı Çeşitleri"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:308
msgid "There can be passes that do the same job, but in different ways. For example, the ``TrivialLayout``, ``DenseLayout`` and ``NoiseAdaptiveLayout`` all choose a layout (binding of virtual qubits to physical qubits), but use different algorithms and objectives. Similarly, the ``BasicSwap``, ``LookaheadSwap`` and ``StochasticSwap`` all insert swaps to make the circuit compatible with the coupling map. The modularity of the transpiler allows plug-and-play replacements for each pass."
msgstr "Aynı işi fakat farklı yollarla yapan geçişler olabilir. Örneğin, ``TrivialLayout``, ``DenseLayout`` ve ``NoiseAdaptiveLayout`` hepsi farklı bir layout/yerleşim (sanal kubitlerin fiziksel kubitler bağlanması) seçer fakat farklı algoritmalar ve objeler kullanır. Benzer şekilde, ``BasicSwap``, ``LookaheadSwap`` ve ``StochasticSwap`` hepsi devreyi bağlantılı harita ile uyumlu hale getirmek için değişimler(swap) ekler. Transpiler modularitesi, her geçiş için tak ve çalıştır değiştirmelerine izin verir."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:310
msgid "Below, we show the swapper passes all applied to the same circuit, to transform it to match a linear chain topology. You can see differences in performance, where the ``StochasticSwap`` is clearly the best. However, this can vary depending on the input circuit."
msgstr "Aşağıda, bir lineer zincir topolojisine uyacak şekilde dönüştürmek için aynı devreye uygulanan bütün takas geçişlerini gösteriyoruz. ``StochasticSwap`` ın net bir şekilde en iyi olduğu performans farklarını görebilirsiniz. Ancak, bu girilen devreye göre değişiklik gösterebilir."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:433
msgid "Preset Pass Managers"
msgstr "Ön Ayarlı Geçiş Yöneticileri"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:435
msgid "Qiskit comes with several pre-defined pass managers, corresponding to various levels of optimization achieved through different pipelines of passes. Currently ``optimization_level`` 0 through 3 are supported; the higher the number, the more optimized it is, at the expense of more time. Choosing a good pass manager may take trial and error, as it depends heavily on the circuit being transpiled and the backend being targeted."
msgstr "Qiskit, farklı pipeline/veri hattı geçişleri ile elde edilen çeşitli seviyelerde optimizasyona karşılık gelen birçok önceden tanımlı geçiş yöneticileri ile gelir. Şu anda ``optimization_level`` 0 ile 3 arasında destekleniyor; sayı ne kadar yüksek olursa daha fazla zaman harcayarak o kadar iyi bir optimizasyon elde edilir. İyi bir geçiş yöneticisi seçmek, ağırlıklı olarak aktarılan devreye ve hedeflenilen backende bağlı olduğu için deneme yanılma gerektirebilir."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:437
msgid "Here we illustrate the different levels by looking at a state synthesis circuit. We initialize four qubits to an arbitrary state, and then try to optimize the circuit that achieves this."
msgstr "Burada, bir durum sentez devresine bakarak farklı seviyeleri gözümüzde canlandırıyoruz. 4 kübiti rastgele durum haline getiririz ve daha sonra bunu elde eden devreyi optimize etmeye çalışırız."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:439
msgid "``optimization_level=0``: just maps the circuit to the backend, with no explicit optimization (except whatever optimizations the mapper does)."
msgstr "``optimization_level=0``: sadece devreyi backende eşler, belirli bir optimizasyon olmadan (eşleştiren kişinin yaptığı optimizasyonlar hariç)."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:441
msgid "``optimization_level=1``: maps the circuit, but also does light-weight optimizations by collapsing adjacent gates."
msgstr "``optimization_level=1``: devreyi eşler, fakat ayrıca komşu kapıları daraltarak hafif optimizasyonlar yapar."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:443
msgid "``optimization_level=2``: medium-weight optimization, including a noise-adaptive layout and a gate-cancellation procedure based on gate commutation relationships."
msgstr "``optimization_level=2``: orta ağırlıklı optimizasyon, kapı değişme ilkeleri temeline dayalı bir kapı iptali ve gürültü-adaptif layout/yerleşim dahil."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:445
msgid "``optimization_level=3``: heavy-weight optimization, which in addition to previous steps, does resynthesis of two-qubit blocks of gates in the circuit."
msgstr "``optimization_level=3``: ağır optimizasyon, önceki adımlara ek olarak devredeki iki kübitli kapı bloklarının yeniden sentezini yapar."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:701
msgid "Now map this to the 20-qubit Tokyo device, with different optimization levels:"
msgstr "Şimdi bunu 20-kübitli Tokyo cihazı ile farklı optimizasyon seviyelerinde eşleştirelim:"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:865
msgid "Introducing the DAG"
msgstr "DAG'nin tanıtılması"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:876
msgid "In Qiskit, we represent circuits internally using a Directed Acyclic Graph (DAG). The advantage of this representation over a pure list of gates (i.e., *netlist*) is that the flow of information between operations are explicit, making it easier for passes to make transformation decisions without changing the semantics of the circuit."
msgstr "Qiskit'te, devreleri bir Yönlendirilmiş Asiklik Grafı(DAG) kullanarak dahili olarak temsil ediyoruz. Bu gösterimin saf bir kapı listesine (yani, *netlist*) göre avantajı, işlemler arasındaki bilgi akışının açık olması ve geçişlerin devrenin anlamını değiştirmeden dönüşüm kararları almasını kolaylaştırmasıdır."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:878
msgid "Let’s start by building a simple circuit, and examining its DAG."
msgstr "Basit bir devre kurarak ve DAG'ı inceleyerek başlayalım."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:917
msgid "In the DAG, there are three kinds of graph nodes: qubit/clbit input nodes (green), operation nodes (blue), and output nodes (red). Each edge indicates data flow (or dependency) between two nodes."
msgstr "DAG'da üç çeşit grafik düğümü vardır: kübit/clbit giriş düğümleri (yeşil), işlem düğümleri (mavi) ve çıkış düğümleri (kırmızı). Her kenar, iki düğüm arasındaki veri akışını (veya bağımlılığını) gösterir."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:950
msgid "Therefore, writing a transpiler pass means using Qiskit’s DAGCircuit API to analyze or transform the circuit. Let’s see some examples of this."
msgstr "Bu nedenle, bir aktarııc geçişi yazmak, devreyi analiz etmek veya dönüştürmek için Qiskit'in DAGCircuit API'sini kullanmak anlamına gelir. Bunun bazı örneklerini görelim."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:961
msgid "**a. Get all op nodes in the DAG:**"
msgstr "**a. DAG'daki tüm op düğümlerini alın:**"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1015
msgid "Each node is an instance of the ``DAGOpNode`` class. Let’s examine the information stored in the second op node."
msgstr ""

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1076
msgid "**b. Add an operation to the back:**"
msgstr "**b. Arkaya bir işlem ekleyin:**"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1108
msgid "**c. Add an operation to the front:**"
msgstr "**c. Add an operation to the front:**"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1140
msgid "**d. Substitute a node with a subcircuit:**"
msgstr "**d. Bir düğümü bir alt devre ile değiştirin:**"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1180
msgid "Finally, after all transformations are complete, we can convert back to a regular QuantumCircuit object. This is what the transpiler does! It takes a circuit, operates on it in DAG form, and outputs a transformed circuit."
msgstr "Son olarak, tüm dönüşümler tamamlandıktan sonra, normal bir QuantumCircuit nesnesine geri dönüş yapabiliriz. Aktarıcının yaptığı iş budur! Bir devre alır, üzerinde DAG formunda çalışır ve çıktı olarak dönüştürülmüş bir devre verir."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1213
msgid "Implementing a BasicMapper Pass"
msgstr "Bir BasicMapper Geçişinin uygulanması"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1224
msgid "Now that we are familiar with the DAG, let’s use it to write a transpiler pass. Here we will implement a basic pass for mapping an arbitrary circuit to a device with limited qubit connectivity. We call this the BasicMapper. This pass is included in Qiskit Terra as well."
msgstr "Şimdi DAG'ı bildiğimize göre, bunu bir transpiler geçişi yazmak için kullanalım. Burada, sınırlı kübit bağlantısı olan bir cihaza keyfi bir devre eşlemek için temel bir geçiş yapacağız. Buna BasicMapper diyoruz. Bu geçiş Qiskit Terra'da da mevcuttur."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1226
msgid "The first thing to do when writing a transpiler pass is to decide whether the pass class derives from a ``TransformationPass`` or ``AnalysisPass``. Transformation passes modify the circuit, while analysis passes only collect information about a circuit (to be used by other passes). Then, the ``run(dag)`` method is implemented, which does the main task. Finally, the pass is registered inside the ``qiskit.transpiler.passes`` module."
msgstr "Bir transpiler geçişi yazarken yapılacak ilk şey, geçiş sınıfının ``TransformationPass`` veya ``AnalysisPass`` dan türetilmiş olup olmadığına karar vermektir. Analiz geçişleri sadece bir devre (diğer geçişler tarafından kullanılacak) hakkında bilgi toplarken, dönüşüm geçişleri devreyi değiştirir. Ardından, ana görevi yapan ``run(dag)`` yöntemi uygulanır. Son olarak, geçiş ``qiskit.transpiler.passes`` modülüne kaydedilir."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1228
msgid "This pass functions as follows: it traverses the DAG layer-by-layer (each layer is a group of operations that does not act on independent qubits, so in theory all operations in a layer can be done independently). For each operation, if it does not already meet the coupling map constraints, the pass identifies a swap path and inserts swaps to bring the two qubits close to each other."
msgstr "Bu geçiş aşağıdaki gibi işlev görür: DAG katman katman-geçiş yapar (her katman bağımsız kübitlere etki etmeyen bir işlem grubudur, bu nedenle teoride bir katmandaki tüm işlemler bağımsız olarak yapılabilir). Her işlem için, bağlantı haritası kısıtlamalarını karşılamıyorsa, geçiş bir takas yolunu tanımlar ve iki kübiti birbirine yakınlaştırmak için takaslar ekler."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1230
msgid "Follow the comments in the code for more details."
msgstr "Daha fazla ayrıntı için koddaki yorumları izleyin."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1346
msgid "Let’s test this pass on a small example circuit."
msgstr "Bu geçişi küçük bir örnek devre üzerinde test edelim."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1399
msgid "Now we construct a pass manager that contains our new pass. We pass the example circuit above to this pass manager, and obtain a new, transformed circuit."
msgstr "Şimdi yeni geçişimizi içeren bir geçiş yöneticisi oluşturuyoruz. Yukarıdaki örnek devreyi bu geçiş yöneticisine aktarıyoruz ve yeni, dönüştürülmüş bir devre elde ediyoruz."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1494
msgid "Note that this pass only inserts the swaps necessary to make every two-qubit interaction conform to the device coupling map. It does not, for example, care about the direction of interactions, or the native gate set supported by the device. This is a design philosophy of Qiskit’s transpiler: every pass performs a small, well-defined action, and the aggressive circuit optimization is achieved by the pass manager through combining multiple passes."
msgstr "Bu geçişin yalnızca her iki-kübit etkileşiminin cihaz bağlantı haritasına uymasını sağlamak için gerekli olan takasları eklediğini unutmayın. Örneğin, etkileşimlerin yönünü veya aygıt tarafından desteklenen yerel kapı kümesini önemsemez. Bu, Qiskit'in transpiler'ının bir tasarım felsefesidir: her geçiş küçük, iyi tanımlanmış bir eylem gerçekleştirir ve agresif devre optimizasyonu, geçiş yöneticisi tarafından çoklu geçişleri birleştirerek elde edilir."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1506
msgid "Transpiler Logging"
msgstr "Aktarıcı Günlüğü"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1508
msgid "Due to the complexity of the internal operations that the transpiler is performing it’s likely that you’ll end up in a situation where you’d like to debug an issue or just understand more of what is happening inside the transpiler when you call it. To facilitate this the transpiler emits log messages as part of its normal operation. This logging uses the Python standard library ``logging`` module to emit the log messages. Python’s standard logging was used because it allows Qiskit-Terra’s logging to integrate in a standard way with other applications and libraries."
msgstr "Transpiler'ın gerçekleştirdiği dahili işlemlerin karmaşıklığı nedeniyle, bir sorunu ayıklamak veya yalnızca aradığınızda transpiler içinde neler olduğunu daha fazla anlamak istediğiniz bir duruma geleceksiniz. Bunu kolaylaştırmak için, transpiler normal çalışmasının bir parçası olarak günlük mesajları yayar. Bu günlük kaydı, günlük iletilerini göndermek için Python standart kütüphane ``logging`` modülünü kullanır. Python'un standart günlüğü burada kullanıldı çünkü Qiskit-Terra günlüğünün diğer uygulamalar ve kütüphanelerle standart bir şekilde bütünleşmesine izin veriyor."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1511
msgid "For a more thorough introduction to Python logging refer to the `official documentation <https://docs.python.org/3/library/logging.html>`__ and the tutorials and cookbook linked off of there."
msgstr "Python günlüğüne daha ayrıntılı bir giriş için `official documentation <https://docs.python.org/3/library/logging.html>`__'e ve oradan bağlantılı eğitimlere ve tarif kitabına bakın."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1526
msgid "Note: Most of the logging module functions used in this section adjust global settings. If you run commands in this section it might effect the output from other cells if they are run in a different order."
msgstr "Not: Bu bölümde kullanılan günlük modülü işlevlerinin çoğu genel ayarları düzenler. Bu bölümdeki komutları çalıştırırsanız, farklı bir sırayla çalıştırılırlarsa diğer hücrelerden gelen çıktıyı etkileyebilir."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1542
msgid "Configuring Python Standard Library Logging"
msgstr "Python Standart Kütüphane Günlük Kaydını Yapılandırma"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1544
msgid "By default Python Standard Logging only prints log messages at the ``WARNING``, ``ERROR``, or ``CRITICAL`` log levels. Since none of the logs emitted by the transpiler use these log levels (they’re all informative) you need to configure logging."
msgstr "Varsayılan olarak Python Standart Günlük Kaydı, günlük iletilerini yalnızca ``WARNING``, ``ERROR`` veya ``CRITICAL`` günlük düzeylerinde yazdırır. Transpiler tarafından yayılan günlüklerin hiçbiri bu günlük düzeylerini kullanmadığından (hepsi bilgilendirici) günlük kaydını yapılandırmanız gerekir."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1546
msgid "The simplest way to do this is to just run:"
msgstr "Bunu yapmanın en basit yolu sadece şunu çalıştırmaktır:"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1569
msgid "The ``basicConfig()`` function (see the docs here: https://docs.python.org/3/library/logging.html#logging.basicConfig) configures a root handler and formatter. We also specify the `log level <https://docs.python.org/3/library/logging.html#levels>`__ to display with the ``level`` kwarg. Setting it to a level will also include and higher levels. For example, if you set it to ``'INFO'`` in addition to the ``INFO`` level this will also include the ``WARNING``, ``ERROR``, and ``CRITICAL`` log levels."
msgstr "``basicConfig()`` işlevi (buradaki dokümanlara bakın: https://docs.python.org/3/library/logging.html#logging.basicConfig) bir kök işleyici ve biçimlendirici yapılandırır. Ayrıca ``level`` kwarg ile görüntülenmesi için ``log level <https://docs.python.org/3/library/logging.html#levels>`__ belirtiyoruz. Bir düzeye ayarlamak da daha yüksek seviyeleri içerecektir. Örneğin, ``INFO`` seviyesine ek olarak ``'INFO'`` a ayarlarsanız, bu ``WARNING``, ``ERROR``, ve ``CRITICAL`` kayıt seviyelerini de içerecektir."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1571
msgid "Now the python environment in this notebook is configured to emit log messages to stderr when you run the transpiler. For example:"
msgstr "Artık bu not defterindeki python ortamı, transpiler'ı çalıştırdığınızda günlük mesajlarını stderr'a gönderecek şekilde yapılandırılmıştır. Örneğin:"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1586
msgid "Note: basicConfig() will only work when called the first time it’s called. It detects if a root handler and formatter have already been setup (either by using an earlier basicConfig() call or otherwise) and does nothing if they have. Further adjustments will have to by interacting with the handler directly."
msgstr "Not: basicConfig() yalnızca ilk kez çağrıldığında çalışır. Bir kök işleyici ve biçimlendiricinin önceden kurulmuş olup olmadığını algılar (önceki bir basicConfig() çağrısı kullanarak veya başka bir şekilde) ve varsa hiçbir şey yapmaz. Daha fazla ayarlamanın, işleyiciyle doğrudan etkileşime girerek yapılması gerekecektir."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1843
msgid "As you can clearly see here when calling ``transpile()`` it now prints 2 types of log messages. The first is at the ``INFO`` log level and come from the pass manager. These indicate each pass that was executed and how long that took. The second are at the ``DEBUG`` level and come from the StochasticSwap pass and describes the internal operation of that pass. It’s useful for debugging issues in the pass’s operation."
msgstr "Burada açık bir şekilde görebileceğiniz gibi, ``transpile ()`` çağrılırken artık 2 tür günlük mesajı yazdırıyor. Bunlardan ilki, ``INFO`` kayıt seviyesindedir ve geçiş yöneticisinden gelir. Bunlar, gerçekleştirilen her geçişi ve bunun ne kadar sürdüğünü gösterir. İkincisi, ``DEBUG`` seviyesindedir ve StochasticSwap geçişinden gelir ve bu geçişin iç çalışmasını açıklar. Geçiş işlemindeki sorunları gidermek için kullanışlıdır."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1855
msgid "Adjusting the log level for the transpiler"
msgstr "Aktarıcı için günlük seviyesini ayarlama"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1857
msgid "The qiskit transpiler uses a single namespace ``qiskit.transpiler``, as used by ``logging.getLogger('qiskit.transpiler')``. This makes it very easy to adjust the log level for just the transpiler. For example if you only wish to see log messages at the INFO level or above you can run:"
msgstr "Qiskit aktarıcı, ``logging.getLogger('qiskit.transpiler')`` tarafından kullanılan tek bir ``qiskit.transpiler`` ad alanı kullanır. Bu, sadece aktarıcı için günlük seviyesini ayarlamayı kolaylaştırmaktadır. Örneğin, günlük iletilerini yalnızca INFO düzeyinde veya üstünde görmek istiyorsanız şunları çalıştırabilirsiniz:"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1991
msgid "Setting up logging to deal with parallel execution"
msgstr "Paralel yürütme ile başa çıkmak için günlüğe kaydetmeyi ayarlama"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1993
msgid "When running the transpiler with multiple circuits by default these circuits are transpiled in parallel. If you want to do this with logging enabled and be able to understand the output some additional steps are required."
msgstr "Transpiler çoklu devrelerle çalıştırıldığında varsayılan olarak bu devreler paralel olarak aktarılır. Bunu günlüğe kaydetme etkinken yapmak ve çıktıyı anlayabilmek istiyorsanız bazı ek adımlar gereklidir."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1995
msgid "If you were just to enable logging as above and then pass ``transpile()`` multiple circuits you’ll get results that are difficult to decipher. For example:"
msgstr "Sadece yukarıdaki gibi günlüğe kaydetmeyi etkinleştirip ``transpile()``ı birden daha fazla devreye geçerseniz, deşifrelemesi zor sonuçlar alırsınız. Örneğin:"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:2434
msgid "As you can see here we get log messages from all 3 circuits being transpiled together. There is no way to know which pass is part of which circuit’s transpilation. Luckily Python logging provides tools to deal with this. The simplest one is to just change the `log formatter <https://docs.python.org/3/library/logging.html#logging.Formatter>`__ so that includes additional information so we can associate a log message with the process it came from."
msgstr "Burada görebileceğiniz gibi, birlikte transpile edilen 3 devrenin tümünden günlük mesajları alıyoruz. Hangi geçişin hangi devrenin transpilasyonunun bir parçası olduğunu bilmenin bir yolu yoktur. Neyse ki Python günlüğü bununla başa çıkmak için araçlar sağlamaktadır. Bunlardan en basit olanı `log formatter <https://docs.python.org/3/library/logging.html#logging.Formatter>`__ değiştirmektir, böylece bir günlük iletisini kaynaklandığı süreç ile ilişkilendirebiliriz."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:2457
msgid "Then rerun the ``transpile()`` call and see the new log formatter."
msgstr "Ardından ``transpile()`` çağrısını yeniden çalıştırın ve yeni günlük biçimlendiricisini görün."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:2892
msgid "Now the format for the log messages has been changed and it includes a process name for each of the transpilation processes so it’s at least clear which log messages go together."
msgstr "Artık günlük mesajlarının formatı değiştirildi ve aktarım işlemlerinin her biri için bir işlem adı içeriyor, bu nedenle en azından hangi günlük mesajlarının bir araya geldiği açık."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:2894
msgid "There are many different options for how you can configure, this example is pretty limited. Refer to the documentation for more examples and options to build more sophisticated use cases that suit your specific use case or preferences."
msgstr "Nasıl yapılandırabileceğiniz konusunda birçok farklı seçenek vardır, bu örnek oldukça sınırlıdır. Özel kullanım durumunuza veya tercihlerinize uygun daha karmaşık kullanım örnekleri oluşturmak için daha fazla örnek ve seçenek için belgelere bakın."

