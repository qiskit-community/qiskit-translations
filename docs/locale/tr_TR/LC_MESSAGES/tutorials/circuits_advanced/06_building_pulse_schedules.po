msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-21 22:19+0000\n"
"PO-Revision-Date: 2022-04-21 23:28\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/06_building_pulse_schedules.po\n"
"X-Crowdin-File-ID: 9476\n"
"Language: tr_TR\n"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:10
msgid "This page was generated from `tutorials/circuits_advanced/06_building_pulse_schedules.ipynb`__."
msgstr "Bu sayfa `tutorials/circuits_advanced/06_building_pulse_schedules.ipynb`__ adresinden oluşturulmuştur."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:9
msgid "Building Pulse Schedules"
msgstr "Atım Zamanlamalarını Oluşturma"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:11
msgid "Pulse gates define a low-level, exact representation for a circuit gate. A single operation can be implemented with a pulse program, which is comprised of multiple low-level instructions. To learn more about pulse gates, refer back to the documentation `here <05_pulse_gates.ipynb>`__. This page details how to create pulse programs."
msgstr "Atım geçitlerini, bir devre kapısı için düşük seviyeli, kesin bir temsili tanımlar. Çoklu düşük seviyeli komutlardan oluşan bir atım programı ile tek bir işlem gerçekleştirilebilir. Atım kapıları hakkında daha fazla bilgi edinmek için `here <05_pulse_gates.ipynb>`__ belgelerine bakın. Bu sayfa, atım programlarının nasıl oluşturulacağını ayrıntılarıyla anlatır."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:13
msgid "Note: For IBM devices, pulse programs are used as subroutines to describe gates. Previously, some devices accepted full programs in this format, but this is being sunset in December 2021. Other providers may still accept full programs in this format. Regardless of how the program is used, the syntax for building the program is the same. Read on to learn how!"
msgstr "Not: IBM aygıtları için, kapıları tanımlamak için alt rutinler olarak atım programları kullanılır. Önceden, bazı cihazlar bu biçimdeki tam programları kabul ediyordu, ancak bu Aralık 2021'de sona eriyor. Diğer sağlayıcılar yine de bu biçimde tam programları kabul edebilir. Programın nasıl kullanıldığına bakılmaksızın, programı oluşturmak için kullanılan sözdizimi aynıdır. Nasıl olduğunu öğrenmek için okumaya devam edin!"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:15
msgid "Pulse programs, which are called ``Schedule``\\ s, describe instruction sequences for the control electronics. We build ``Schedule``\\ s using the Pulse Builder. It’s easy to initialize a schedule:"
msgstr "``Schedule``\\ olarak adlandırılan atım programları, kontrol elektroniği için talimat dizilerini tanımlar. Atım derlericisi kullanarak `Schedule``\\'ları oluşturuyoruz. Programı başlatmak kolaydır:"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:66
msgid "You can see that there are no instructions yet. The next section of this page will explain each of the instructions you might add to a schedule, and the last section will describe various *alignment contexts*, which determine how instructions are placed in time relative to one another."
msgstr "Henüz talimat olmadığını görebilirsiniz. Bu sayfanın bir sonraki bölümü, bir programa ekleyebileceğiniz talimatların her birini açıklayacak ve son bölüm, talimatların birbirine göre zaman içinde nasıl yerleştirildiğini belirleyen çeşitli *hizalama bağlamlarını* açıklayacaktır."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:78
msgid "``Schedule`` Instructions"
msgstr "``Schedule`` Talimatları"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:80
msgid "`delay(duration, channel) <#delay>`__"
msgstr "```delay(duration, channel)`` <#delay>`__"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:81
msgid "`play(pulse, channel) <#play>`__"
msgstr "```play(pulse, channel)`` <#play>`__"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:82
msgid "`set_frequency(frequency, channel) <#set_frequency>`__"
msgstr "`set_frequency(frequency, channel) <#set_frequency>`__"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:83
msgid "`shift_phase(phase, channel) <#shift_phase>`__"
msgstr "`shift_phase(phase, channel) <#shift_phase>`__"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:84
msgid "`acquire(duration, channel, mem_slot, reg_slot) <#acquire>`__"
msgstr "`acquire(duration, channel, mem_slot, reg_slot) <#acquire>`__"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:86
msgid "Each instruction type has its own set of operands. As you can see above, they each include at least one ``Channel`` to specify where the instruction will be applied."
msgstr "Her komut tipinin kendi işlenen seti vardır. Yukarıda görebileceğiniz gibi, her biri talimatın nereye uygulanacağını belirtmek için en az bir ``Channel`` içerir."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:88
msgid "**Channels** are labels for signal lines from the control hardware to the quantum chip."
msgstr "**Kanallar**, kontrol donanımından kuantum çipine giden sinyal hatları için etiketlerdir."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:90
msgid "``DriveChannel``\\ s are typically used for *driving* single qubit rotations,"
msgstr "``DriveChannel``\\ s genellikle *enerjik* tek kübit dönüşler için kullanılır,"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:91
msgid "``ControlChannel``\\ s are typically used for multi-qubit gates or additional drive lines for tunable qubits,"
msgstr "``ControlChannel``\\ s genellikle çoklu kübit kapıları veya ayarlanabilir kübitler için ek sürücü hatları için kullanılır,"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:92
msgid "``MeasureChannel``\\ s are specific to transmitting pulses which stimulate readout, and"
msgstr "``MeasureChannel``\\ s, okumayı uyaran atımları iletmeye özeldir ve"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:93
msgid "``AcquireChannel``\\ s are used to trigger digitizers which collect readout signals."
msgstr "``AcquireChannel``\\ s, okuma sinyallerini toplayan sayısallaştırıcıları tetiklemek için kullanılır."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:95
msgid "``DriveChannel``\\ s, ``ControlChannel``\\ s, and ``MeasureChannel``\\ s are all ``PulseChannel``\\ s; this means that they support *transmitting* pulses, whereas the ``AcquireChannel`` is a receive channel only and cannot play waveforms."
msgstr "``DriveChannel``\\ s, ``ControlChannel``\\ s ve ``MeasureChannel``\\ s, tümü ``PulseChannel``\\ s; bu, *gönderici* atımları destekledikleri anlamına gelir, oysa ``AcquireChannel`` yalnızca bir alma kanalıdır ve dalga biçimlerini canlandıramaz."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:97
msgid "For the following examples, we will create one ``DriveChannel`` instance for each ``Instruction`` that accepts a ``PulseChannel``. Channels take one integer ``index`` argument. Except for ``ControlChannel``\\ s, the index maps trivially to the qubit label."
msgstr "Aşağıdaki örnekler için, bir ``PulseChannel`` kabul eden her ``Instruction`` için bir ``DriveChannel`` örneği oluşturacağız. Kanallar bir tamsayı ``index`` argümanı alır. ``ControlChannel``\\ s dışında, dizin önemsiz bir şekilde qubit etiketiyle eşleşir."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:120
msgid "The pulse ``Schedule`` is independent of the backend it runs on. However, we can build our program in a context that is aware of the target backend by supplying it to ``pulse.build``. When possible you should supply a backend. By using the channel accessors ``pulse.<type>_channel(<idx>)`` we can make sure we are only using available device resources."
msgstr "``Schedule`` atımı, üzerinde çalıştığı backendden bağımsızdır. Ancak programımızı, ``pulse.build``e vererek hedef arka ucunun farkında olan bir bağlamda inşa edebiliriz. Mümkün olduğunda bir arka uç sağlamalısınız. ``pulse.<type>_channel(<idx>)`` kanal erişimcilerini kullanarak, yalnızca mevcut cihaz kaynaklarını kullandığımızdan emin olabiliriz."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:173
msgid "``delay``"
msgstr "``delay``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:175
msgid "One of the simplest instructions we can build is ``delay``. This is a blocking instruction that tells the control electronics to output no signal on the given channel for the duration specified. It is useful for controlling the timing of other instructions."
msgstr "Oluşturabileceğimiz en basit komutlardan biri ``delay``'dır. Bu, kontrol elektroniğine belirtilen süre boyunca verilen kanalda sinyal vermemesini söyleyen bir engelleme talimatıdır. Diğer talimatların zamanlamasını kontrol etmek için kullanışlıdır."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:177
msgid "The duration here and elsewhere is in terms of the backend’s cycle time (1 / sample rate), ``dt``. It must take an integer value."
msgstr "Buradaki ve diğer yerlerdeki süre, arka ucun döngü süresi (1 / örnek oranı), ``dt`` cinsindendir. Bir tamsayı değeri almalıdır."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:179
msgid "To add a ``delay`` instruction, we pass a duration and a channel, where ``channel`` can be any kind of channel, including ``AcquireChannel``. We use ``pulse.build`` to begin a Pulse Builder context. This automatically schedules our delay into the schedule ``delay_5dt``."
msgstr "Bir ``delay`` talimatı eklemek için, bir süre ve bir kanal geçiyoruz, burada ``channel``, ``AcquireChannel`` dahil olmak üzere herhangi bir kanal olabilir. Atım derleyici bağlamını başlatmak için ``pulse.build`` kullanıyoruz. Bu, gecikmemizi otomatik olarak ``delay_5dt`` zamanlamasına ayarlar."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:201
msgid "That’s all there is to it. Any instruction added after this delay on the same channel will execute five timesteps later than it would have without this delay."
msgstr "Hepsi bu kadar. Aynı kanalda bu gecikmeden sonra eklenen herhangi bir talimat, bu gecikme olmasaydı gerçekleşecek olan durumdan beş adım daha geç gerçekleştirecektir."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:204
msgid "``play``"
msgstr "``play``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:206
msgid "The ``play`` instruction is responsible for executing *pulses*. It’s straightforward to add a play instruction:"
msgstr "``play`` talimatı *atımların* yürütülmesinden sorumludur. Bir hareket talimatı eklemek kolaydır:"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:213
msgid "Let’s clarify what the ``pulse`` argument is and explore a few different ways to build one."
msgstr "``pulse`` argümanının ne olduğunu açıklığa kavuşturalım ve bir tane oluşturmanın birkaç farklı yolunu keşfedelim."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:216
msgid "Pulses"
msgstr "Atımlar"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:218
msgid "A ``Pulse`` specifies an arbitrary pulse *envelope*. The modulation frequency and phase of the output waveform are controlled by the ``set_frequency`` and ``shift_phase`` instructions, which we will cover next."
msgstr "``Pulse``, rastgele bir atım *zarfı* belirtir. Çıkış dalga formunun modülasyon frekansı ve fazı, daha sonra ele alacağımız ``set_frequency`` ve ``shift_phase`` talimatları tarafından kontrol edilir."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:220
msgid "The image below may provide some intuition for why they are specified separately. Think of the pulses which describe their envelopes as input to an arbitrary waveform generator (AWG), a common lab instrument – this is depicted in the left image. Notice the limited sample rate discritizes the signal. The signal produced by the AWG may be mixed with a continuous sine wave generator. The frequency of its output is controlled by instructions to the sine wave generator; see the middle image. Finally, the signal sent to the qubit is demonstrated by the right side of the image below."
msgstr "Aşağıdaki görüntü, neden ayrı olarak belirtildiklerine dair bazı sezgiler sağlayabilir. Zarflarını, yaygın bir laboratuvar aleti olan rastgele bir dalga biçimi üretecine (AWG) girdi olarak tanımlayan atımları düşünün - bu, soldaki resimde gösterilmektedir. Sınırlı örnekleme hızının sinyali ayırt ettiğine dikkat edin. AWG tarafından üretilen sinyal, sürekli bir sinüs dalgası üreteci ile karıştırılabilir. Çıkışının frekansı, sinüs dalgası üretecine verilen talimatlarla kontrol edilir; ortadaki resme bakın. Son olarak, kübite gönderilen sinyal aşağıdaki görüntünün sağ tarafında gösterilmiştir."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:223
msgid "**Note**: The hardware may be implemented in other ways, but if we keep the instructions separate, we avoid losing explicit information, such as the value of the modulation frequency."
msgstr "**Not**: Donanım başka şekillerde uygulanabilir, ancak talimatları ayrı tutarsak, modülasyon frekansının değeri gibi açık bilgileri kaybetmekten kaçınırız."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:225
msgid "|alt text|"
msgstr "|alt text|"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:227
msgid "There are many methods available to us for building up pulses. Our ``library`` within Qiskit Pulse contains helpful methods for building ``Pulse``\\ s. Let’s take for example a simple Gaussian pulse – a pulse with its envelope described by a sampled Gaussian function. We arbitrarily choose an amplitude of 1, standard deviation :math:`\\sigma` of 10, and 128 sample points."
msgstr "Atımları oluşturmak için elimizde birçok yöntem var. Qiskit Pulse içindeki ``library`` ``Pulse``\\ 'lar oluşturmak için yararlı yöntemler içerir. Örneğin, basit bir Gauss atımını ele alalım - örneklenmiş bir Gauss işleviyle tanımlanan zarfı olan bir atım. İsteğe bağlı olarak 1 genlik, standart sapma :math:`\\sigma` 10 ve 128 örnek nokta seçiyoruz."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:229
msgid "**Note**: The amplitude norm is arbitrarily limited to ``1.0``. Each backend system may also impose further constraints – for instance, a minimum pulse size of 64. These additional constraints, if available, would be provided through the ``BackendConfiguration`` which is described `here <08_gathering_system_information.ipynb#Configuration>`__."
msgstr "**Not**: Genlik normu keyfi olarak ``1.0`` ile sınırlıdır. Her arka uç sistemi ayrıca başka kısıtlamalar da uygulayabilir – örneğin, minimum 64 atım boyutu. Bu ek kısıtlamalar, varsa, burada açıklanan ``BackendConfiguration`` aracılığıyla sağlanır `here <08_gathering_system_information.ipynb#Configuration>`__."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:257
msgid "Parametric pulses"
msgstr "Parametrik atımlar"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:259
msgid "Let’s build our Gaussian pulse using the ``Gaussian`` parametric pulse. A parametric pulse sends the name of the function and its parameters to the backend, rather than every individual sample. Using parametric pulses makes the jobs you send to the backend much smaller. IBM Quantum backends limit the maximum job size that they accept, so parametric pulses may allow you to run larger programs."
msgstr "Gauss atımımızı ``Gaussian`` parametrik atımını kullanarak oluşturalım. Parametrik bir atım, işlevin adını ve parametrelerini her bir ayrı örnek yerine arkayüzeye gönderir. Parametrik atımları kullanmak, arkayüzeye gönderdiğiniz işleri çok daha küçük hale getirir. IBM Kuantum arkayüzleri, kabul ettikleri maksimum iş boyutunu sınırlar, bu nedenle parametrik atımlar daha büyük programları çalıştırmanıza izin verebilir."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:261
msgid "Other parametric pulses in the ``library`` include ``GaussianSquare``, ``Drag``, and ``Constant``."
msgstr "``library``deki diğer parametrik darbeler arasında ``GaussianSquare``, ``Constant`` ve ``Drag`` bulunur."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:263
msgid "**Note**: The backend is responsible for deciding exactly how to sample the parametric pulses. It is possible to draw parametric pulses, but the samples displayed are not guaranteed to be the same as those executed on the backend."
msgstr "**Not**: Arkayüzey parametrik atımların tam olarak nasıl örnekleneceğine karar vermekten sorumludur. Parametrik atımlar çizmek mümkündür, ancak görüntülenen örneklerin arkayüzeyde yürütülenlerle aynı olması garanti edilmez."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:296
msgid "Pulse waveforms described by samples"
msgstr "Örnekler tarafından açıklanan atım dalga biçimleri"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:298
msgid "A ``Waveform`` is a pulse signal specified as an array of time-ordered complex amplitudes, or *samples*. Each sample is played for one cycle, a timestep ``dt``, determined by the backend. If we want to know the real-time dynamics of our program, we need to know the value of ``dt``. The (zero-indexed) :math:`i^{th}` sample will play from time ``i*dt`` up to ``(i + 1)*dt``, modulated by the qubit frequency."
msgstr "``Waveform``, zamana göre sıralı karmaşık genlikler veya *örnekler* dizisi olarak belirtilen bir atım sinyalidir. Her örnek, arka uç tarafından belirlenen bir ``dt`` zaman adımı olan bir döngü için oynatılır. Programımızın gerçek zamanlı dinamiklerini bilmek istiyorsak ``dt`` değerini bilmemiz gerekir. (Sıfır dizinli) :math:`i^{th}` örneği, ``i*dt`` zamanından ``(i + 1)*dt``ye kadar, kübit frekansı tarafından modüle edilmiş olarak gösterecektir."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:335
msgid "Pulse library functions"
msgstr "Atım kütüphanesi işlevleri"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:337
msgid "Our own pulse library has sampling methods to build a ``Waveform`` from common functions."
msgstr "Kendi darbe kitaplığımız, ortak işlevlerden bir ``Waveform`` derlemek için örnekleme yöntemlerine sahiptir."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:368
msgid "Regardless of which method you use to specify your ``pulse``, ``play`` is added to your schedule the same way:"
msgstr "``pulse``yi belirlemek için hangi yöntemi kullanırsanız kullanın, ``play`` programınıza aynı şekilde eklenir:"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:400
msgid "You may also supply a complex list or array directly to ``play``"
msgstr "Ayrıca doğrudan ``play`` için karmaşık bir liste veya dizi de sağlayabilirsiniz"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:432
msgid "The ``play`` instruction gets its duration from its ``Pulse``: the duration of a parametrized pulse is an explicit argument, and the duration of a ``Waveform`` is the number of input samples."
msgstr "``play`` komutu, süresini ``Pulse``den alır: parametreli bir atım süresi açık bir argümandır ve ``Waveform``un süresi girdi örneklerinin sayısıdır."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:435
msgid "``set_frequency``"
msgstr "``set_frequency``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:437
msgid "As explained previously, the output pulse waveform envelope is also modulated by a frequency and phase. Each channel has a `default frequency listed in the backend.defaults() <08_gathering_system_information.ipynb#Defaults>`__."
msgstr "Daha önce açıklandığı gibi, çıkış atımları dalga biçimi zarfı da bir frekans ve faz tarafından modüle edilir. Her kanalın `default frequency listed in the backend.defaults() <08_gathering_system_information.ipynb#Defaults>`__ içinde listelenen varsayılan bir frekansı vardır."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:439
msgid "The frequency of a channel can be updated at any time within a ``Schedule`` by the ``set_frequency`` instruction. It takes a float ``frequency`` and a ``PulseChannel`` ``channel`` as input. All pulses on a channel following a ``set_frequency`` instruction will be modulated by the given frequency until another ``set_frequency`` instruction is encountered or until the program ends."
msgstr "Bir kanalın frekansı, ``set_frequency`` komutuyla ``Schedule`` dahilinde herhangi bir zamanda güncellenebilir. Girdi olarak bir kayan nokta ``frequency`` ve bir ``PulseChannel`` ``channel`` alır. Bir ``set_frequency`` komutunu izleyen bir kanaldaki tüm atımlar, başka bir ``set_frequency`` komutuyla karşılaşılıncaya veya program bitene kadar verilen frekans tarafından modüle edilecektir."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:441
msgid "The instruction has an implicit duration of ``0``."
msgstr "Talimatın mutlak süresi ``0``dır."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:443
msgid "**Note**: The frequencies that can be requested are limited by the total bandwidth and the instantaneous bandwidth of each hardware channel. In the future, these will be reported by the ``backend``."
msgstr "**Not**: Talep edilebilecek frekanslar, her bir donanım kanalının toplam bant genişliği ve anlık bant genişliği ile sınırlıdır. Gelecekte, bunlar ``backend`` tarafından rapor edilecektir."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:466
msgid "``shift_phase``"
msgstr "``shift_phase``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:468
msgid "The ``shift_phase`` instruction will increase the phase of the frequency modulation by ``phase``. Like ``set_frequency``, this phase shift will affect all following instructions on the same channel until the program ends. To undo the affect of a ``shift_phase``, the negative ``phase`` can be passed to a new instruction."
msgstr "``shift_phase`` komutu, frekans modülasyonunun fazını ``phase`` kadar artıracaktır. ``set_frequency`` gibi, bu faz kayması, program bitene kadar aynı kanaldaki tüm takip eden talimatları etkileyecektir. Bir ``shift_phase``'in etkisini geri almak için, negatif ``phase`` yeni bir komuta geçirilebilir."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:470
msgid "Like ``set_frequency``, the instruction has an implicit duration of ``0``."
msgstr "``set_frequency`` gibi, talimatın mutlak süresi ``0``dır."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:493
msgid "``acquire``"
msgstr "``acquire``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:495
msgid "The ``acquire`` instruction triggers data acquisition for readout. It takes a duration, an ``AcquireChannel`` which maps to the qubit being measured, and a ``MemorySlot`` or a ``RegisterSlot``. The ``MemorySlot`` is classical memory where the readout result will be stored. The ``RegisterSlot`` maps to a register in the control electronics which stores the readout result for fast feedback."
msgstr "``acquire`` komutu, okuma için veri alımını tetikler. Bir süre, ölçülen kübitle eşleşen bir ``AcquireChannel`` ve bir ``MemorySlot`` veya ``RegisterSlot`` alır. ``MemorySlot`` okuma sonucunun saklanacağı klasik hafızadır. ``RegisterSlot``, hızlı geri bildirim için okuma sonucunu saklayan kontrol elektroniğindeki bir kayıtla eşlenir."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:497
msgid "The ``acquire`` instructions can also take custom ``Discriminator``\\ s and ``Kernel``\\ s as keyword arguments."
msgstr "``acquire`` talimatları ayrıca özel ``Discriminator``\\ s ve ``Kernel``\\ s anahtar kelime bağımsız değişkenlerini alabilir."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:521
msgid "Now that we know how to add ``Schedule`` instructions, let’s learn how to control exactly when they’re played."
msgstr "Artık \"Schedule\" talimatlarının nasıl ekleneceğini bildiğimize göre, tam olarak ne zaman haraket edeceğini, nasıl kontrol edeceğimizi öğrenelim."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:524
msgid "Pulse Builder"
msgstr "Atım Oluşturucu"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:526
msgid "Here, we will go over the most important Pulse Builder features for learning how to build schedules. This is not exhaustive; for more details about what you can do using the Pulse Builder, check out the `Pulse API reference <https://qiskit.org/documentation/apidoc/pulse.html>`__."
msgstr "Burada, çizelgelerin nasıl oluşturulacağını öğrenmek için en önemli Atım Derleyici özelliklerini gözden geçireceğiz. Bu kapsamlı değildir; Atım Derleyiciyi kullanarak neler yapabileceğiniz hakkında daha fazla ayrıntı için `Pulse API reference <https://qiskit.org/documentation/apidoc/pulse.html>`__ adresine bakın."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:529
msgid "Alignment contexts"
msgstr "Hizalama bağlamları"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:531
msgid "The builder has alignment contexts which influence how a schedule is built. Contexts can also be nested. Try them out, and use ``.draw()`` to see how the pulses are aligned."
msgstr "Oluşturucu, bir çizelgenin nasıl oluşturulacağını etkileyen hizalama bağlamlarına sahiptir. Bağlamlar da iç içe olabilir. Bunları deneyin ve atımların nasıl hizalandığını görmek için ``.draw()`` kullanın."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:533
msgid "Regardless of the alignment context, the duration of the resulting schedule is as short as it can be while including every instruction and following the alignment rules. This still allows some degrees of freedom for scheduling instructions off the “longest path”. The examples below illuminate this."
msgstr "Hizalama bağlamından bağımsız olarak, ortaya çıkan programın süresi, her talimatı dahil ederken ve hizalama kurallarını takip ederken olabildiğince kısadır. Bu yine de “longest path” dışındaki talimatları planlamak için bir dereceye kadar serbestlik sağlar. Aşağıdaki örnekler bunu aydınlatmaktadır."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:536
msgid "``align_left``"
msgstr "``align_left``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:538
msgid "The builder has alignment contexts that influence how a schedule is built. The default is ``align_left``."
msgstr "Oluşturucu, bir çizelgenin nasıl oluşturulacağını etkileyen hizalama bağlamlarına sahiptir. Varsayılan ``align_left`` şeklindedir."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:575
msgid "Notice how there is no scheduling freedom for the pulses on ``D1``. The second waveform begins immediately after the first. The pulse on ``D0`` can start at any time between ``t=0`` and ``t=100`` without changing the duration of the overall schedule. The ``align_left`` context sets the start time of this pulse to ``t=0``. You can think of this like left-justification of a text document."
msgstr "``D1`` üzerindeki atımlar için nasıl zamanlama özgürlüğü olmadığına dikkat edin. İkinci dalga biçimi birinciden hemen sonra başlar. ``D0`` üzerindeki atım, genel programın süresini değiştirmeden ``t=0`` ile ``t=100`` arasında herhangi bir zamanda başlayabilir. ``align_left`` bağlamı, bu atımın başlangıç zamanını ``t=0`` olarak ayarlar. Bunu bir metin belgesinin sola yaslaması gibi düşünebilirsiniz."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:578
msgid "``align_right``"
msgstr "``align_right``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:580
msgid "Unsurprisingly, ``align_right`` does the opposite of ``align_left``. It will choose ``t=100`` in the above example to begin the gaussian pulse on ``D0``. Left and right are also sometimes called “as soon as possible” and “as late as possible” scheduling, respectively."
msgstr "Şaşırtıcı olmayan bir şekilde, ``align_right``, ``align_left``in tersini yapar. Gauss atımını ``D0`` üzerinde başlatmak için yukarıdaki örnekte ``t=100``ü seçecektir. Sol ve sağ bazen sırasıyla “as soon as possible” ve “as late as possible” zamanlama olarak da adlandırılır."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:618
msgid "``align_equispaced(duration)``"
msgstr "``align_equispaced(duration)``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:620
msgid "If the duration of a particular block is known, you can also use ``align_equispaced`` to insert equal duration delays between each instruction."
msgstr "Belirli bir bloğun süresi biliniyorsa, her komut arasına eşit süreli gecikmeler eklemek için ``align_equispaced`` kullanabilirsiniz."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:658
msgid "``align_sequential``"
msgstr "``align_sequential``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:660
msgid "This alignment context does not schedule instructions in parallel. Each instruction will begin at the end of the previously added instruction."
msgstr "Bu hizalama bağlamı, talimatları paralel olarak zamanlamaz. Her talimat, daha önce eklenen talimatın sonunda başlayacaktır."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:698
msgid "Phase and frequency offsets"
msgstr "Faz ve frekans kesintileri"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:700
msgid "We can use the builder to help us temporarily offset the frequency or phase of our pulses on a channel."
msgstr "Bir kanaldaki atımlarımızın frekansını veya fazını geçici olarak dengelememize yardımcı olması için oluşturucuyu kullanabiliriz."

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:736
msgid "We encourage you to visit the `Pulse API reference <https://qiskit.org/documentation/apidoc/pulse.html>`__ to learn more."
msgstr "Daha fazla bilgi edinmek için `Pulse API reference <https://qiskit.org/documentation/apidoc/pulse.html>`__ adresini ziyaret etmenizi öneririz."

