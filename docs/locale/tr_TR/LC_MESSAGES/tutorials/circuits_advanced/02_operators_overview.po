msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-27 13:03+0000\n"
"PO-Revision-Date: 2023-10-27 13:34\n"
"Last-Translator: \n"
"Language: tr\n"
"Language-Team: Turkish\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/02_operators_overview.po\n"
"X-Crowdin-File-ID: 9124\n"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:10
msgid "This page was generated from `tutorials/circuits_advanced/02_operators_overview.ipynb`__."
msgstr "Bu sayfa `tutorials/circuits_advanced/02_operators_overview.ipynb`__ adresinden oluşturulmuştur."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:9
msgid "Operators"
msgstr "Operatörler"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:39
msgid "Operator Class"
msgstr "Operatör Sınıfı"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:41
msgid "The ``Operator`` class is used in Qiskit to represent matrix operators acting on a quantum system. It has several methods to build composite operators using tensor products of smaller operators, and to compose operators."
msgstr "``Operatör`` sınıfı, Qiskit'te bir kuantum sisteme etki eden matris operatörlerini temsil etmek için kullanılır. Daha küçük operatörlerin tensör çarpımlarını kullanarak bileşik operatörler tasarlamak ve operatörleri oluşturmak için çeşitli yöntemleri vardır."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:44
msgid "Creating Operators"
msgstr "Operatör Oluşturma"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:46
msgid "The easiest way to create an operator object is to initialize it with a matrix given as a list or a Numpy array. For example, to create a two-qubit Pauli-XX operator:"
msgstr "Bir operatör nesnesi oluşturmanın en kolay yolu, onu liste veya Numpy dizisi olarak verilen bir matrisle başlatmaktır. Örneğin, iki kubitli bir Pauli-XX operatörü oluşturmak için:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:106
msgid "Operator Properties"
msgstr "Operatör Özellikleri"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:108
msgid "The operator object stores the underlying matrix, and the input and output dimension of subsystems."
msgstr "Operatör nesnesi, temel alınan matrisi ve alt sistemlerin giriş ve çıkış boyutlarını depolar."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:110
msgid "``data``: To access the underlying Numpy array, we may use the ``Operator.data`` property."
msgstr "``data``: Altındaki Numpy dizisine erişmek için ``Operator.data`` özelliğini kullanabiliriz."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:111
msgid "``dims``: To return the total input and output dimension of the operator, we may use the ``Operator.dim`` property. *Note: the output is returned as a tuple* ``(input_dim, output_dim)``, *which is the reverse of the shape of the underlying matrix.*"
msgstr "``dims``: Operatörün toplam girdi ve çıktı boyutunu döndürmek için ``Operator.dim`` özelliğini kullanabiliriz.\n"
"*Not: Çıktı, altında yatan matrisin şeklinin tersi olan bir tuple* ``(input_dim, output_dim)`` *olarak döndürülür.*"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:203
msgid "Input and Output Dimensions"
msgstr "Giriş ve Çıkış Boyutları"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:205
msgid "The operator class also keeps track of subsystem dimensions, which can be used for composing operators together. These can be accessed using the ``input_dims`` and ``output_dims`` functions."
msgstr "Operatör sınıfı ayrıca operatörleri bir araya getirmek için kullanılabilecek alt sistem boyutlarını da izler. Bunlara ``input_dims`` ve ``output_dims`` fonksiyonlarını kullanarak erişilebilir."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:207
msgid "For :math:`2^N` by :math:`2^M` operators, the input and output dimension will be automatically assumed to be M-qubit and N-qubit:"
msgstr ":math:`2^N`'ye :math:`2^M`' boyutlu operatörleri için, giriş ve çıkış boyutları otomatik olarak M-kubit ve N-kubit olarak kabul edilecektir:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:257
msgid "If the input matrix is not divisible into qubit subsystems, then it will be stored as a single-qubit operator. For example, if we have a :math:`6\\times6` matrix:"
msgstr "Eğer girdi matrisi, kübit alt sistemlerine bölünebilir değilse, o zaman tek-kübitli operatör olarak depolanır. Örneğin, :math:`6\\times6` matrisimiz varsa:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:307
msgid "The input and output dimension can also be manually specified when initializing a new operator:"
msgstr "Yeni bir operatör başlatılırken giriş ve çıkış boyutları manuel olarak da belirtilebilir:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:399
msgid "We can also extract just the input or output dimensions of a subset of subsystems using the ``input_dims`` and ``output_dims`` functions:"
msgstr "Ayrıca ``input_dims`` ve ``output_dims`` fonksiyonlarını kullanarak alt sistemlerin alt kümelerinin yalnızca giriş ve çıkış boyutlarını çıkarabiliriz:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:449
msgid "Converting classes to Operators"
msgstr "Sınıfları Operatörlere Dönüştürme"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:451
msgid "Several other classes in Qiskit can be directly converted to an ``Operator`` object using the operator initialization method. For example:"
msgstr "Qiskit'teki birkaç diğer sınıf, operatör başlatma yöntemini kullanarak doğrudan bir ``Operator`` objesine dönüştürülebilir. Örneğin:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:453
msgid "``Pauli`` objects"
msgstr "``Pauli`` nesneleri"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:454
msgid "``Gate`` and ``Instruction`` objects"
msgstr "``Gate`` ve ``Instruction`` nesneleri"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:455
msgid "``QuantumCircuit`` objects"
msgstr "``QuantumCircuit``nesneleri"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:457
msgid "Note that the last point means we can use the ``Operator`` class as a unitary simulator to compute the final unitary matrix for a quantum circuit, without having to call a simulator backend. If the circuit contains any unsupported operations, an exception will be raised. Unsupported operations are: measure, reset, conditional operations, or a gate that does not have a matrix definition or decomposition in terms of gate with matrix definitions."
msgstr "Son noktanın, bir simülatör backendi çağırmaya gerek kalmadan bir kuantum devreye ait son birim matrisi hesaplamak için ``Operator`` sınıfını birimsel bir simülatör olarak kullanabileceğimiz anlamına geldiğine dikkat edin. Eğer devre herhangi desteklenmeyen bir işlem içeriyorsa bir istisna ortaya çıkacaktır. Desteklenmeyen işlemler: ölçü, sıfırlama, koşullu işlemler ya da bir matris tanımına sahip olmayan veya matris tanımlarıyla kapı açısından ayrışmayan bir kapıdır."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:690
msgid "Using Operators in circuits"
msgstr "Devrelerde Operatörlerin Kullanılması"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:692
msgid "Unitary ``Operators`` can be directly inserted into a ``QuantumCircuit`` using the ``QuantumCircuit.append`` method. This converts the ``Operator`` into a ``UnitaryGate`` object, which is added to the circuit."
msgstr "Üniter ``Operators``, ``QuantumCircuit.append`` yöntemi kullanılarak doğrudan bir ``QuantumCircuit``eklenebilir. Bu, ``Operator``ü devreye eklenen bir ``UnitaryGate`` objesine dönüştürür."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:694
msgid "If the operator is not unitary, an exception will be raised. This can be checked using the ``Operator.is_unitary()`` function, which will return ``True`` if the operator is unitary and ``False`` otherwise."
msgstr "Eğer operatör üniter değilse, bir istisna ortaya çıkacaktır. Bu, eğer operatör birimsel ise ``True`` ve değilse ``False`` döndürecek ``Operator.is_unitary()`` fonksiyonunu kullanarak kontrol edilebilir."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:731
msgid "Note that in the above example we initialize the operator from a ``Pauli`` object. However, the ``Pauli`` object may also be directly inserted into the circuit itself and will be converted into a sequence of single-qubit Pauli gates:"
msgstr "Yukarıdaki örnekte, bir ``Pauli`` objesinden operatörü başlatmış olduğumuza dikkat edin. Ancak, ``Pauli`` objesi doğrudan devrenin kendisine eklenebilir ve yüksek ihtimalle tek-kubitli Pauli kapılar dizisine dönüştürülecektir:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:857
msgid "Combining Operators"
msgstr "Operatörleri Birleştirme"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:859
msgid "Operators may be combined using several methods."
msgstr "Operatörler birkaç yöntem kullanılarak birleştirilebilirler."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:862
msgid "Tensor Product"
msgstr "Tensör Çarpımı"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:864
msgid "Two operators :math:`A` and :math:`B` may be combined into a tensor product operator :math:`A\\otimes B` using the ``Operator.tensor`` function. Note that if both :math:`A` and :math:`B` are single-qubit operators, then ``A.tensor(B)`` = :math:`A\\otimes B` will have the subsystems indexed as matrix :math:`B` on subsystem 0, and matrix :math:`A` on subsystem 1."
msgstr ":math:`A` ve :math:`B` adlı iki operatör, ``Operator.tensor`` fonksiyonu kullanılarak bir tensör çarpımına :math:`A\\otimes B` birleştirilebilir. :math:`A` ve :math:`B` tek-kubitli operatörler ise o zaman ``A.tensor(B)`` = :math:`A\\otimes B` nın 0 alt sistemlerinde :math:`B` matrisi olarak ve 1 alt sistemlerinde :math:`A` matrisi olarak indeksleneceğine dikkat edin."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:925
msgid "Tensor Expansion"
msgstr "Tensör Açılımı"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:927
msgid "A closely related operation is ``Operator.expand``, which acts like a tensor product but in the reverse order. Hence, for two operators :math:`A` and :math:`B` we have ``A.expand(B)`` = :math:`B\\otimes A` where the subsystems indexed as matrix :math:`A` on subsystem 0, and matrix :math:`B` on subsystem 1."
msgstr "Yakından ilişkili bir işlem, tensör çarpımı gibi fakat ters sırada hareket eden ``Operator.expand`` dir. Bu nedenle, :math:`A` ve :math:`B` isimli iki operatör için alt sistemlerin, 0 alt sisteminde :math:`A` matrisi olarak ve 1 alt sisteminde :math:`B` matrisi olarak indeksleneceği yerde ``A.expand(B)`` = :math:`B\\otimes A` miz var."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:988
msgid "Composition"
msgstr "Bileşim"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:990
msgid "We can also compose two operators :math:`A` and :math:`B` to implement matrix multiplication using the ``Operator.compose`` method. We have that ``A.compose(B)`` returns the operator with matrix :math:`B.A`:"
msgstr ":math:`A` ve :math:`B` isimli iki matrisi ayrıca ``Operator.compose`` yöntemini kullanarak matris çarpımı uygulayıp birleştirebiliriz. Sahip olduğumuz ``A.compose(B)``, :math:`B.A` matrisi ile birlikte operatörü döndürür:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1044
msgid "We can also compose in the reverse order by applying :math:`B` in front of :math:`A` using the ``front`` kwarg of ``compose``: ``A.compose(B, front=True)`` = :math:`A.B`:"
msgstr "Ayrıca, ``compose`` un ``front`` argümanını kullanıp :math:`A` matrisinin önüne :math:`B` matrisini uygulayarak ters sıra ile birleştirebiliriz: ``A.compose(B, front=True)`` = :math:`A.B`:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1099
msgid "Subsystem Composition"
msgstr "Alt Sistem Bileşimi"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1101
msgid "Note that the previous compose requires that the total output dimension of the first operator :math:`A` is equal to total input dimension of the composed operator :math:`B` (and similarly, the output dimension of :math:`B` must be equal to the input dimension of :math:`A` when composing with ``front=True``)."
msgstr "Önceki bileşimin, ilk operatörü :math:`A` matrisinin toplam çıkış boyutunun, birleşen operatör :math:`B` matrisinin toplam giriş boyutuna eşit olması gerektiğine dikkat edin. (Ve benzer şekilde, :math:`B` matrisinin çıkış boyutu, ``front=True`` ile birleşim olduğunda, :math:`A` matrisinin giriş boyutuna eşit olmak zorundadır.)."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1103
msgid "We can also compose a smaller operator with a selection of subsystems on a larger operator using the ``qargs`` kwarg of ``compose``, either with or without ``front=True``. In this case, the relevant input and output dimensions of the subsystems being composed must match. *Note that the smaller operator must always be the argument of* ``compose`` *method.*"
msgstr "Ayrıca, ``front=True`` ile birlikte ya da değil, ``compose`` un ``qargs`` argümanını kullanarak daha büyük bir operatör üzerindeki alt sistemlerin bir seçmesiyle birlikte daha küçük bir operatörü birleştirebiliriz. Bu durumda, birleştirilen alt sistemlerin uygun giriş ve çıkış boyutları eşleşmelidir. *Daha küçük olan operatörün her zaman* ``compose`` *yönteminin argümanı olmasına dikkat edin.*"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1105
msgid "For example, to compose a two-qubit gate with a three-qubit Operator:"
msgstr "Örneğin, iki kubitli bir kapıyı, üç kubitli bir operatör ile birleştirmek için:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1265
msgid "Linear combinations"
msgstr "Doğrusal birleşimler"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1267
msgid "Operators may also be combined using standard linear operators for addition, subtraction and scalar multiplication by complex numbers."
msgstr "Operatörler ayrıca toplama, çıkarma ve karmaşık sayılarla skaler çarpım işlemleri için standart lineer operatörler kullanılarak birleştirilebilir."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1330
msgid "An important point is that while ``tensor``, ``expand`` and ``compose`` will preserve the unitarity of unitary operators, linear combinations will not; hence, adding two unitary operators will, in general, result in a non-unitary operator:"
msgstr "Önemli bir nokta, ``tensor``, ``expand`` ve ``compose`` üniter operatörlerin üniterliğini korurken, lineer kombinasyonlar korumayacak; dolayısıyla, iki üniter operatör toplamak genel olarak üniter olmayan bir operatör ile sonuçlanacaktır:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1377
msgid "Implicit Conversion to Operators"
msgstr "Operatörlere Örtülü Dönüşüm"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1379
msgid "Note that for all the following methods, if the second object is not already an ``Operator`` object, it will be implicitly converted into one by the method. This means that matrices can be passed in directly without being explicitly converted to an ``Operator`` first. If the conversion is not possible, an exception will be raised."
msgstr "Aşağıdaki tüm yöntemler için, ikinci nesne zaten bir ``Operatör`` nesnesi değilse, yöntem tarafından örtülü olarak bir ``Operatör`` nesnesine dönüştürüleceğini unutmayın. Bu, matrislerin açıkça bir ``Operatör`` e dönüştürülmeden doğrudan aktarılabileceği anlamına gelir. Dönüştürme mümkün değilse, exception ortaya çıkar."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1433
msgid "Comparison of Operators"
msgstr "Operatörlerin Karşılaştırılması"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1435
msgid "Operators implement an equality method that can be used to check if two operators are approximately equal."
msgstr "Operatörler, iki operatörün yaklaşık olarak eşit olup olmadığını kontrol etmek için kullanılabilecek bir eşitlik yöntemine sahiptir."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1481
msgid "Note that this checks that each matrix element of the operators is approximately equal; two unitaries that differ by a global phase will not be considered equal:"
msgstr "Bunun, operatörlerin her bir matris elemanının yaklaşık olarak eşit olduğunu kontrol ettiğini unutmayın; genel bir faza göre farklılık gösteren iki üniter eşit kabul edilmeyecektir:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1528
msgid "Process Fidelity"
msgstr "İşlem Doğruluğu"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1530
msgid "We may also compare operators using the ``process_fidelity`` function from the *Quantum Information* module. This is an information theoretic quantity for how close two quantum channels are to each other, and in the case of unitary operators it does not depend on global phase."
msgstr "*Kuantum Bilgi* modülünden ``process_fidelity`` işlevini kullanarak operatörleri karşılaştırabiliriz. Bu, iki kuantum kanalın birbirine ne kadar yakın olduğuna dair bir bilgi teorisi miktarıdır ve üniter operatörler durumunda, küresel faza bağlı değildir."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1581
msgid "Note that process fidelity is generally only a valid measure of closeness if the input operators are unitary (or CP in the case of quantum channels), and an exception will be raised if the inputs are not CP."
msgstr "İşlem doğruluğunun genellikle girdi operatörleri üniter (veya kuantum kanalları durumunda CP) ise yalnızca geçerli bir yakınlık ölçüsü olduğunu ve girdiler CP değilse bir istisna oluşacağını unutmayın."

