msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-21 18:06+0000\n"
"PO-Revision-Date: 2020-10-21 18:42\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/operators/02_gradients_framework.po\n"
"X-Crowdin-File-ID: 9410\n"
"Language: tr_TR\n"

#: ../../tutorials/operators/02_gradients_framework.ipynb:10
msgid "This page was generated from `tutorials/operators/02_gradients_framework.ipynb`__."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:9
msgid "Qiskit Gradient Framework"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:11
msgid "The gradient framework enables the evaluation of quantum gradients as well as functions thereof. Besides standard first order gradients of expectation values of the form"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:13
msgid "\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle\n\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:15
msgid "The gradient framework also supports the evaluation of second order gradients (Hessians), and the Quantum Fisher Information (QFI) of quantum states :math:`|\\psi\\left(\\theta\\right)\\rangle`."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:18
msgid "Table of Contents"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:20
msgid "`First Order Gradients <#grad>`__"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:21
msgid "`Gradients w.r.t. Measurement Operator Parameters <#grad_meas>`__"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:22
msgid "`Gradients w.r.t. State Parameters <#grad_state>`__"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:23
msgid "`Natural Gradient <#nat_grad>`__"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:24
msgid "`Hessians <#hess>`__"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:25
msgid "`Hessians w.r.t. Measurement Operator Parameters <#hess_meas>`__"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:26
msgid "`Hessians w.r.t. State Parameters <#hess_state>`__"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:27
msgid "`Quantum Fisher Information <#qfi>`__"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:28
msgid "`Application Example: VQE with gradient-based optimization <#apps>`__"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:39
msgid "|gradient\\_framework.png|"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:53
msgid "Imports"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:83
msgid "First Order Gradients"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:86
msgid "Given a parameterized quantum state :math:`|\\psi\\left(\\theta\\right)\\rangle = V\\left(\\theta\\right)|\\psi\\rangle` with input state :math:`|\\psi\\rangle`, parametrized Ansatz :math:`V\\left(\\theta\\right)`, and observable :math:`\\hat{O}\\left(\\omega\\right)=\\sum_{i}\\omega_i\\hat{O}_i`, we want to compute..."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:97
msgid "Gradients w.r.t. Measurement Operator Parameters"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:100
msgid "Gradient of an expectation value w.r.t. a coefficient of the measurement operator respectively observable :math:`\\hat{O}\\left(\\omega\\right)`, i.e."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:102
msgid "\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\omega_i} = \\langle\\psi\\left(\\theta\\right)|\\hat{O}_i\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle.\n\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:113
msgid "First of all, we define a quantum state :math:`|\\psi\\left(\\theta\\right)\\rangle` and a Hamiltonian :math:`H` acting as observable. Then, the state and the Hamiltonian are wrapped into an object defining the expectation value"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:115
#: ../../tutorials/operators/02_gradients_framework.ipynb:1034
msgid "\\langle\\psi\\left(\\theta\\right)|H|\\psi\\left(\\theta\\right)\\rangle.\n\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:193
msgid "We construct a list of the parameters for which we aim to evaluate the gradient. In this case, the parameters are given as the coefficients of :math:`H`. Now, this list and the expectation value operator are used to generate the operator which represents the gradient."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:277
msgid "All that is left to do is to assign values to the pararameters and to evaluate the gradient operators."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:319
msgid "Gradients w.r.t. State Parameters"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:322
msgid "Gradient of an expectation value w.r.t. a state :math:`|\\psi\\left(\\theta\\right)\\rangle` parameter, i.e.\\"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:324
msgid "\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}\n\n"
"respectively of sampling probabilities w.r.t. a state :math:`|\\psi\\left(\\theta\\right)\\rangle` parameter, i.e."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:328
msgid "\\frac{\\partial p_i}{\\partial\\theta} = \\frac{\\partial\\langle\\psi\\left(\\theta\\right)|i\\rangle\\langle i |\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}.\n\n"
"A gradient w.r.t. a state parameter may be evaluated with different methods. Each method has advantages and disadvantages."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:400
msgid "Parameter Shift Gradients"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:402
msgid "Given a Hermitian operator :math:`g` with two unique eigenvalues :math:`\\pm r` which acts as generator for a parameterized quantum gate"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:404
msgid "G(\\theta)= e^{-i\\theta g}.\n\n"
"Then, quantum gradients can be computed by using eigenvalue :math:`r` dependent shifts to parameters. All `standard, parameterized Qiskit gates <https://github.com/Qiskit/qiskit-terra/tree/master/qiskit/circuit/library/standard_gates>`__ can be shifted with :math:`\\pi/2`, i.e.,"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:408
msgid "\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta} =  \\left(\\langle\\psi\\left(\\theta+\\pi/2\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta+\\pi/2\\right)\\rangle -\\partial\\langle\\psi\\left(\\theta-\\pi/2\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta-\\pi/2\\right)\\rangle\\right) / 2.\n\n"
"Probability gradients are computed equivalently."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:597
msgid "#### Linear Combination of Unitaries Gradients Unitaries can be written as :math:`U\\left(\\omega\\right) = e^{iM\\left(\\omega\\right)}`, where :math:`M\\left(\\omega\\right)` denotes a parameterized Hermitian matrix. Further, Hermitian matrices can be decomposed into weighted sums of Pauli terms, i.e., :math:`M\\left(\\omega\\right) = \\sum_pm_p\\left(\\omega\\right)h_p` with :math:`m_p\\left(\\omega\\right)\\in\\mathbb{R}` and :math:`h_p=\\bigotimes\\limits_{j=0}^{n-1}\\sigma_{j, p}` for :math:`\\sigma_{j, p}\\in\\left\\{I, X, Y, Z\\right\\}` acting on the :math:`j^{\\text{th}}` qubit. Thus, the gradients of :math:`U_k\\left(\\omega_k\\right)` are given by"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:600
msgid "\\begin{equation*}\n"
"\\frac{\\partial U_k\\left(\\omega_k\\right)}{\\partial\\omega_k} = \\sum\\limits_pi \\frac{\\partial m_{k,p}\\left(\\omega_k\\right)}{\\partial\\omega_k}U_k\\left(\\omega_k\\right)h_{k_p}.\n"
"\\end{equation*}"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:607
msgid "Combining this observation with a circuit structure presented in `Simulating physical phenomena by quantum networks <https://journals.aps.org/pra/abstract/10.1103/PhysRevA.65.042323>`__ allows us to compute the gradient with the evaluation of a single quantum circuit."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:748
msgid "#### Finite Difference Gradients"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:750
msgid "Unlike the other methods, finite difference gradients are numerical estimations rather than analytical values. This implementation employs a central difference approach with :math:`\\epsilon << 1` $ :nbsphinx-math:`\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}` :nbsphinx-math:`\\approx `:nbsphinx-math:`\\frac{1}{2\\epsilon}` :nbsphinx-math:`\\left`(:nbsphinx-math:`\\langle`:nbsphinx-math:`\\psi`:nbsphinx-math:`\\left`(:nbsphinx-math:`\\theta`+:nbsphinx-math:`\\epsilon`:nbsphinx-math:`\\right`)\\|:nbsphinx-math:`\\hat{O}`:nbsphinx-math:`\\left`(:nbsphinx-math:`\\omega`:nbsphinx-math:`\\right`)\\|:nbsphinx-math:`\\psi`:nbsphinx-math:`\\left`(:nbsphinx-math:`\\theta`+:nbsphinx-math:`\\epsilon`:nbsphinx-math:`\\right`):nbsphinx-math:`\\rangle `- :nbsphinx-math:`\\partial`:nbsphinx-math:`\\langle`:nbsphinx-math:`\\psi`:nbsphinx-math:`\\left`(:nbsphinx-math:`\\theta`-:nbsphinx-math:`\\epsilon`:nbsphinx-math:`\\right`)\\|:nbsphinx-math:`\\hat{O}`:nbsphinx-math:`\\left`(:nbsphinx-math:`\\omega`:nbsphinx-math:`\\right`)\\|:nbsphinx-math:`\\psi`:nbsphinx-math:`\\left`(:nbsphinx-math:`\\theta`-:nbsphinx-math:`\\epsilon`:nbsphinx-math:`\\right`):nbsphinx-math:`\\rangle`:nbsphinx-math:`\\right`).$ Probability gradients are computed equivalently."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:941
msgid "Natural Gradient"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:944
msgid "A special type of first order gradient is the natural gradient which has proven itself useful in classical machine learning and is already being studied in the quantum context. This quantity represents a gradient that is 'rescaled' with the inverse `Quantum Fisher Information matrix <#qfi>`__ (QFI)"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:946
msgid "QFI ^{-1} \\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}.\n\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:957
msgid "Instead of inverting the QFI, one can also use a least-square solver with or without regularization to solve"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:959
msgid "QFI x = \\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}.\n\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:961
msgid "The implementation supports ridge and lasso regularization with automatic search for a good parameter using `L-curve corner search <https://arxiv.org/pdf/1608.04571.pdf>`__ as well as two types of perturbations of the diagonal elements of the QFI."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:963
msgid "The natural gradient can be used instead of the standard gradient with any gradient-based optimizer and/or ODE solver."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1011
msgid "Hessians (Second Order Gradients)"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1014
msgid "Four types of second order gradients are supported by the gradient framework. 1. Gradient of an expectation value w.r.t. a coefficient of the measurement operator respectively observable :math:`\\hat{O}\\left(\\omega\\right)`, i.e. $ :nbsphinx-math:`\\frac{\\partial^2\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\omega^2}` $ 2. Gradient of an expectation value w.r.t. a state :math:`|\\psi\\left(\\theta\\right)\\rangle` parameter, i.e. $ :nbsphinx-math:`\\frac{\\partial^2\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta^2}` $ 3. Gradient of sampling probabilities w.r.t. a state :math:`|\\psi\\left(\\theta\\right)\\rangle` parameter, i.e. $ :nbsphinx-math:`\\frac{\\partial^2 p_i}{\\partial\\theta^2}` = :nbsphinx-math:`\\frac{\\partial^2\\langle\\psi\\left(\\theta\\right)|i\\rangle\\langle i|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta^2}` $ 4. Gradient of an expectation value w.r.t. a state :math:`|\\psi\\left(\\theta\\right)\\rangle` parameter and a coefficient of the measurement operator respectively observable :math:`\\hat{O}\\left(\\omega\\right)`, i.e. $ :nbsphinx-math:`\\frac{\\partial^2\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta\\partial\\omega}` $"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1018
msgid "In the following examples are given for the first two Hessian types. The remainig Hessians are evaluated analogously."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1029
msgid "Hessians w.r.t. Measurement Operator Parameters"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1032
msgid "Again, we define a quantum state :math:`|\\psi\\left(\\theta\\right)\\rangle` and a Hamiltonian :math:`H` acting as observable. Then, the state and the Hamiltonian are wrapped into an object defining the expectation value"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1071
msgid "Next, we can choose the parameters for which we want to compute second order gradients. - Given a tuple, the ``Hessian`` will evaluate the second order gradient for the two parameters. - Given a list, the ``Hessian`` will evaluate the second order gradient for all possible combinations of tuples of these parameters."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1073
msgid "After binding parameter values to the parameters, the Hessian can be evaluated."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1128
msgid "Hessians w.r.t. State Parameters"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1204
msgid "Quantum Fisher Information (QFI)"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1207
msgid "The Quantum Fisher Information is a metric tensor which is representative for the representation capacity of a parameterized quantum state :math:`|\\psi\\left(\\theta\\right)\\rangle = V\\left(\\theta\\right)|\\psi\\rangle` with input state :math:`|\\psi\\rangle`, parametrized Ansatz :math:`V\\left(\\theta\\right)`."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1209
msgid "The entries of the QFI for a pure state reads"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1211
msgid "QFI_{kl} = 4 * \\text{Re}\\left[\\langle\\partial_k\\psi|\\partial_l\\psi\\rangle-\\langle\\partial_k\\psi|\\psi\\rangle\\langle\\psi|\\partial_l\\psi\\rangle \\right].\n\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1223
msgid "Circuit QFIs"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1225
msgid "The evaluation of the QFI corresponding to a quantum state that is generated by a parameterized quantum circuit can be conducted in different ways."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1228
msgid "Linear Combination Full QFI"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1230
msgid "To compute the full QFI, we use a working qubit as well as intercepting controlled gates. See e.g. `Variational ansatz-based quantum simulation of imaginary time evolution <https://www.nature.com/articles/s41534-019-0187-2>`__."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1285
msgid "Block-diagonal and Diagonal Approximation"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1287
msgid "A block-diagonal resp. diagonal approximation of the QFI can be computed without additional working qubits. This implementation requires the unrolling into Pauli rotations and unparameterized Gates."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1351
msgid "Application Example: VQE with gradient-based optimization"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1364
msgid "Additional Imports"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1391
msgid "The Gradient Framework can also be used for a gradient-based ``VQE``. First, the Hamiltonian and wavefunction ansatz are initialized."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1437
msgid "Now, we can choose whether the ``VQE`` should use a ``Gradient`` or ``NaturalGradient``, define a ``QuantumInstance`` to execute the quantum circuits and run the algorithm."
msgstr ""

