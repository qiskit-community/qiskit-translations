msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-05 21:02+0000\n"
"PO-Revision-Date: 2022-01-05 22:37\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/6_repetition_code.po\n"
"X-Crowdin-File-ID: 9142\n"
"Language: tr_TR\n"

#: ../../tutorials/noise/6_repetition_code.ipynb:10
msgid "This page was generated from `tutorials/noise/6_repetition_code.ipynb`__."
msgstr "Bu sayfa `tutorials/noise/6_repetition_code.ipynb`__ sayfasından oluşturulmuştur."

#: ../../tutorials/noise/6_repetition_code.ipynb:9
msgid "Repetition Codes"
msgstr "Tekrarlama Kodları"

#: ../../tutorials/noise/6_repetition_code.ipynb:21
msgid "Introduction"
msgstr "Giriş"

#: ../../tutorials/noise/6_repetition_code.ipynb:23
msgid "In quantum error correction we take many noisy qubits (which we call *physical qubits*) and use them to store a smaller number of *logical qubits*. The error correction procedure is designed to detect and correct for the effects of noise. This makes the logical qubits much less noisy and more reliable than the physical ones from which they are built."
msgstr "Kuantum hata düzeltmesinde birçok gürültülü kübiti (buna *fiziksel kübit* diyoruz) alırız ve bunları daha az sayıda *mantıksal kübit* 'e depolamak için kullanırız. Hata düzeltme prosedürü, gürültünün etkilerini tespit etmek ve düzeltmek için tasarlanmıştır. Bu, mantıksal kübitleri inşa edildikleri fiziksel kübitlerden çok daha az gürültülü ve daha güvenilir kılar."

#: ../../tutorials/noise/6_repetition_code.ipynb:25
msgid "The repetition code is a simple example of quantum error correction, in which a logical *bit* is stored rather than a logical *qubit*. A given instance of the repetition code is defined by two numbers, which we call :math:`d` and :math:`T`."
msgstr "Tekrarlama kodu, mantıksal bir *kübit* yerine mantıksal *bit* 'in depolandığı kuantum hata düzeltmesinin basit bir örneğidir. Tekrarlama kodunun belirli bir örneği, :math:`d` ve :math:`T` adını verdiğimiz iki sayı ile tanımlanır."

#: ../../tutorials/noise/6_repetition_code.ipynb:27
msgid "The :math:`d` parameter determines how many physical qubits are used. The actual information about the logical bit is stored in :math:`d` qubits (which we’ll call *code qubits*). The encoding is done in a very simple way: to encode a ``0``, all these qubits are set in the state :math:`|0\\rangle`, to encode a ``1`` they are set to :math:`|1\\rangle`. To readout the value, you can just look at any qubit. To read it out in a way that protects against single qubit errors, you can read out all the qubits and take a majority vote."
msgstr ":math:`d parametre fiziksel kübitlerinin nasıl kullanıldıklarını belirtiyor. Logical bitin güncel bilgisi (*kod kübitleri* adlandırdığımız) :math:`d kübitlerinde saklıdır. Kodlama çok basit bir şekilde yapılır: \"0\"ı kodlamak için, bütün bu kübitlerin :math:`|0\\rangle` durumda, \"1\"i kodlamak için de :math:`|1\\rangle` durumlarında kuruluyor. Sonucu okumak için her hangi bir kübite bakmak yeterdir. Tek kübit hatalarına karşı koruma sağlayacak şekilde okumak için tüm kübitleri okuyabilir ve çoğunluk oyu alabilirsin."

#: ../../tutorials/noise/6_repetition_code.ipynb:30
msgid "It is not only at readout that we can extract useful information that will help us correct errors. We can also extract information while the logical bit sits idle, or even while it is involved in computation."
msgstr "Hataları düzeltmemize yardımcı olacak yararlı bilgileri çıkarabilmemiz yalnızca okuma aşamasında değildir. Mantıksal bit boştayken veya hesaplamaya dahil olduğunda bile bilgi çıkarabiliriz."

#: ../../tutorials/noise/6_repetition_code.ipynb:32
msgid "Since this is an exercise in quantum error correction, we will do this in a way that would also work for logical *qubits*. Specifically, our method of extracting information about errors must not extract any information regarding the stored logical information. In the quantum case, this is required so that we do not disturb superposition states of the stored qubits."
msgstr "Bu kuantum hata düzeltme alıştırması olduğundan, bunu mantıksal *kübitler* için de işe yarayacak şekilde yapacağız. Özellikle, hatalar hakkında bilgi alma yöntemimiz, saklanan mantıksal bilgilerle ilgili herhangi bir bilgi çıkarmamalıdır. Kuantum durumunda, depolanan kübitlerin süperpozisyon durumlarını bozmamak için bu gereklidir."

#: ../../tutorials/noise/6_repetition_code.ipynb:34
msgid "We will extract information over :math:`T` rounds of *syndrome measurements*. For the repetition code, these are based on the fact that all code qubits should be in the same state (all :math:`|0\\rangle` or all :math:`|1\\rangle`). Any departure from this is therefore a signature of error. Specifically, we imagine our :math:`d` code qubits sitting along a line. We will then perform a measurement on each pair of neighboring code qubits. This will tell us whether they are the same or different, without extracting any information on what their values are."
msgstr "Bilgiyi *sendrom ölçümleri* 'nin :math:`T` turları üzerinden çıkaracağız. Tekrarlama kodu için bunlar, tüm kod kübitlerinin aynı durumda olması gerektiği gerçeğine dayanmaktadır (tümü :math:`|0\\rangle` veya tümü :math:`|1\\rangle`). Bundan dolayı herhangi bir sapma, bir hata işaretidir. Özellikle, :math:`d` kod kübitlerimizin bir çizgi boyunca oturduğunu hayal ediyoruz. Daha sonra her bir komşu kod kübiti çifti için bir ölçüm yapacağız. Bu bize, değerlerinin ne olduğuna dair herhangi bir bilgi çıkarmadan, aynı mı yoksa farklı mı olduklarını söyleyecektir."

#: ../../tutorials/noise/6_repetition_code.ipynb:37
msgid "The implementation of these measurements requires :math:`d-1` additional qubits, which we will call *link qubits* for the repetition code. By performing two CNOTs between the pair of code qubits and a corresponding link qubit, the required information (and only the required information) is placed on the link qubit and can then be measured."
msgstr "Bu ölçmelerin uygulaması tekrarlama kodu için *bağlama kübitleri* adlandıracağımız :math:`d-1` ek kübitler gerektirir. Kod kübiti çifti ile karşılık gelen bir bağlama kübiti arasında iki CNOT gerçekleştirerek, gerekli bilgi (ve sadece gerekli bilgi) bağlama kübitine yerleştirilir ve daha sonra ölçülebilir."

#: ../../tutorials/noise/6_repetition_code.ipynb:105
msgid "Here we provide tools for creating and testing repetition codes. The first thing we need to do is import them."
msgstr "Burada, tekrarlama kodlarını oluşturmak ve test etmek için araçlar sağlıyoruz. Yapmamız gereken ilk şey onları içe aktarmak."

#: ../../tutorials/noise/6_repetition_code.ipynb:129
msgid "Creating a repetition code"
msgstr "Tekrarlama kodu oluşturma"

#: ../../tutorials/noise/6_repetition_code.ipynb:131
msgid "The ``repetition_code`` class creates a code for given values of :math:`d` and :math:`T`."
msgstr "``repetition_code`` sınıfı, :math:`d` ve :math:`T` 'nin verilen değerleri için bir kod oluşturur."

#: ../../tutorials/noise/6_repetition_code.ipynb:154
msgid "With this we can inspect various properties of the code, such as the names of the qubit registers used for the code and ancilla qubits."
msgstr "Bununla, kod ve yardımcı kübitler için kullanılan kübit yazmaçlarının isimleri gibi kodun çeşitli özelliklerini inceleyebiliriz."

#: ../../tutorials/noise/6_repetition_code.ipynb:199
msgid "These registers are also attributes of the ``repetition_code`` object."
msgstr "Bu yazmaçlar aynı zamanda ``repetition_code`` nesnesinin özellikleridir."

#: ../../tutorials/noise/6_repetition_code.ipynb:244
msgid "You can also access the quantum circuits that implement the code. Two of these are produced: one for each of the two possible logical bit values."
msgstr "Kodu uygulayan kuantum devrelerine de erişebilirsiniz. Bunlardan ikisi üretilir: iki olası mantıksal bit değerinin her biri için bir tane."

#: ../../tutorials/noise/6_repetition_code.ipynb:606
msgid "Building a custom repetition code"
msgstr "Özel bir tekrarlama kodu oluşturma"

#: ../../tutorials/noise/6_repetition_code.ipynb:608
msgid "You can also implement measurement rounds and logical ``X`` gates yourself. For example, let’s set up a code with no syndrome measurement rounds."
msgstr "Ölçüm turları ve \"X\" geçitlerini kendin de uygulayabilirsin. Örnek olarak, ölçüm turları sendromu olmayan bir kodu oluşturalım."

#: ../../tutorials/noise/6_repetition_code.ipynb:629
msgid "This does nothing but set up two circuits for the two logical encoded states. There are no syndrome measurement rounds, and no final readout."
msgstr "Bu, iki mantıksal kodlanmış durum için iki devre kurmaktan başka bir şey yapmaz. Sendrom ölçüm turları ve son okuma yoktur."

#: ../../tutorials/noise/6_repetition_code.ipynb:759
msgid "We can add a round using the ``syndrome_measurement()`` method."
msgstr "``syndrome_measurement()`` metodunu kullanarak bir tur ekleyebiliriz."

#: ../../tutorials/noise/6_repetition_code.ipynb:909
msgid "A logical ``X`` operation can be added using the ``x()`` method."
msgstr "``x()`` metodunu kullanılarak mantıksal bir ``X`` işlemi eklenebilir."

#: ../../tutorials/noise/6_repetition_code.ipynb:1059
msgid "This also has a ``logs`` kwarg, which is a list of the circuits for which ``X`` is applied. This is ``['0','1']`` by default."
msgstr "Bunda ayrıca, ``X`` in uygulandığı devrelerin bir listesi olan bir ``logs`` kwarg'ı vardır. Bu, varsayılan olarak ``['0', '1']`` dir."

#: ../../tutorials/noise/6_repetition_code.ipynb:1070
msgid "Final readout is then done with the ``readout()`` method."
msgstr "Son okuma daha sonra ``readout()`` metoduyla yapılır."

#: ../../tutorials/noise/6_repetition_code.ipynb:1320
msgid "Running a repetition code"
msgstr "Tekrarlama kodu çalıştırma"

#: ../../tutorials/noise/6_repetition_code.ipynb:1322
msgid "The code object produces the circuits required for the code. The user can then run them using any method they prefer, allowing full control over compilation, backends, noise models and so on."
msgstr "Kod nesnesi, kod için gerekli devreleri üretir. Kullanıcı daha sonra, derleme, arka uçlar, gürültü modelleri vb. üzerinde tam kontrole izin vererek tercih ettikleri herhangi bir yöntemi kullanarak bunları çalıştırabilir."

#: ../../tutorials/noise/6_repetition_code.ipynb:1324
msgid "For example, here we run them without noise on the ``qasm_simulator``."
msgstr "Örneğin, burada onları ``qasm_simulator`` üzerinde gürültü olmadan çalıştırıyoruz."

#: ../../tutorials/noise/6_repetition_code.ipynb:1395
msgid "Here the strings from right to left represent the outputs of the syndrome measurement rounds, followed by the final measurement of the code qubits."
msgstr "Burada sağdan sola dizeler, sendrom ölçüm turlarının çıktılarını ve ardından kod kübitlerinin son ölçümünü temsil eder."

#: ../../tutorials/noise/6_repetition_code.ipynb:1397
msgid "These results need to be rewritten in a different form in order to be decoded. To do this we can use the ``process_results`` method of the code object."
msgstr "Bu sonuçların kodunun çözülebilmesi için farklı bir biçimde yeniden yazılması gerekir. Bunu yapmak için kod nesnesinin ``process_results`` metodunu kullanabiliriz."

#: ../../tutorials/noise/6_repetition_code.ipynb:1442
msgid "The result is a dictionary whose keys are bit strings that represent outputs of the circuit, and the values represent the number of shots for which this output occurred."
msgstr "Sonuç, anahtarları devrenin çıktılarını temsil eden bit dizileri olan bir sözlüktür ve değerler, bu çıktının meydana geldiği deneme sayısını temsil eder."

#: ../../tutorials/noise/6_repetition_code.ipynb:1444
msgid "The strings are not the direct output from the circuits. They have been processed to take the form that helps us correct errors. Here’s a short guided tour."
msgstr "Dizeler, devrelerin doğrudan çıktısı değildir. Hataları düzeltmemize yardımcı olacak formu alacak şekilde işlendiler. Burada kısa bir rehber sunuluyor."

#: ../../tutorials/noise/6_repetition_code.ipynb:1446
msgid "The ``0 0`` to the far left for the logical ``0`` result, and the ``1 1`` to the far left of the logical ``1``, are the logical readout. Any code qubit could be used for this readout, since they should (without errors) all be equal. So we could have just one result here, for one arbitrarily chosen code qubit. Or we could have :math:`d`, one for each qubit. Instead we have two, from the two qubits at either end of the line. This is because it works best with the decoder (which we’ll use later). In the absence of errors, these two values will always be equal."
msgstr "Mantıksal ``0`` sonucunun en solundaki ``0 0`` ve mantıksal ``1``in en solundaki ``1 1`` mantıksal okumadır. Bu okuma için herhangi bir kod kübiti kullanılabilir, çünkü (hatasız) hepsinin eşit olması gerekir. Yani burada isteğe bağlı seçilmiş bir kod kübiti için tek bir sonuç elde edebiliriz. Ya da her kübit için bir tane :math:`d` alabilirdik. Bunun yerine, satırın her iki ucundaki iki kübitten iki tane var. Bunun nedeni, kod çözücüyle (daha sonra kullanacağımız) en iyi şekilde çalışmasıdır. Hata olmaması durumunda bu iki değer her zaman eşit olacaktır."

#: ../../tutorials/noise/6_repetition_code.ipynb:1449
msgid "The following ``0000`` is the :math:`d-1` results of the syndrome measurements for the first round.A ``0`` implies that the corresponding pair of qubits where the same, and ``1`` implies different. There are :math:`d-1` results because the line of :math:`d` code qubits has :math:`d-1` possible neighboring pairs. In the absence of errors, they will all be ``0``."
msgstr "Aşağıdaki ``0000``, ilk tur için sendrom ölçümlerinin :math:`d-1` sonuçlarıdır.Bir ``0``, kübit çiftinin aynı ve ``1`` farklı olduğunu ima eder. :math:`d-1` sayıda sonuç vardır çünkü :math:`d` kod kübitlerinin satırı :math:`d-1` olası komşu çiftlere sahiptir. Hataların olmaması durumunda hepsi ``0`` olacaktır."

#: ../../tutorials/noise/6_repetition_code.ipynb:1451
msgid "The ``0000`` that follows that is the syndrome change between the first and second rounds. It is therefore the bitwise ``OR`` of the syndrome measurement results from the second round with those from the first. In the absence of errors, they will all be ``0``."
msgstr "Bunu takip eden ``0000``, birinci ve ikinci turlar arasındaki sendrom değişikliğidir. Bu nedenle, birinci turdan olanlarla ikinci turdan alınan sendrom ölçüm sonuçlarının bitsel ``OR`` 'udur. Hataların olmaması durumunda hepsi ``0`` olacaktır."

#: ../../tutorials/noise/6_repetition_code.ipynb:1453
msgid "Subsequent blocks follow the same formula, though the last requires some comment. This is not measured using the standard method (with a link qubit). Instead it is calculated from the final readout measurement of all code qubits. Again it is presented as a syndrome change, and will be all ``0`` in the absence of errors. This is the :math:`T+1`-th block of syndrome measurements since, as it is not done in the same way as the others, it is not counted among the :math:`T` syndrome measurement rounds."
msgstr "Sonraki bloklar aynı formülü izler, ancak sonuncusu biraz yorum gerektirir. Bu, standart yöntem (bağlantı kübiti ile) kullanılarak ölçülmez. Bunun yerine, tüm kod kübitlerinin son okuma ölçümünden hesaplanır. Yine bir sendrom değişikliği olarak sunulmuştur ve hata yoksa tamamı ``0`` olacaktır. Bu :math:`T+1`-inci sendrom ölçümlerinin bloğudur, çünkü diğerleri ile aynı şekilde yapılmadığından, :math:`T` sendrom ölçüm turları arasında sayılmaz."

#: ../../tutorials/noise/6_repetition_code.ipynb:1456
msgid "**Example 1:** ``0 0  0110 0000 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``0``. The syndrome shows that (most likely) the middle code qubit was flipped by an error before the first measurement round. This causes it to disagree with both neighboring code qubits for the rest of the circuit. This is shown by the syndrome in the first round, but the blocks for subsequent rounds do not report it as it no longer represents a change. Other sets of errors could also have caused this syndrome, but they would need to be more complex and so presumably less likely."
msgstr "**Örnek 1:** ``0 0 0110 0000 0000``, bir :math:`d=5` 'i, :math:`T=2` ``0`` kodlu tekrar kodunu temsil eder. Sendrom, (büyük olasılıkla) orta kod kübitinin ilk ölçüm turundan önce bir hatayla ters çevrildiğini gösterir. Bu, devrenin geri kalanı için her iki komşu kod kübitiyle uyuşmamasına neden olur. Bu, ilk turdaki sendromla gösterilir, ancak sonraki turlardaki bloklar, artık bir değişikliği temsil etmediği için bunu bildirmez. Diğer hatalar da bu sendroma neden olmuş olabilir, ancak bunların daha karmaşık ve muhtemelen daha az olası olması gerekir."

#: ../../tutorials/noise/6_repetition_code.ipynb:1459
msgid "**Example 2:** ``0 0  0010 0010 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``0``. Here one of the syndrome measurements reported a difference between two code qubits in the first round, leading to a ``1``. The next round did not see the same effect, and so resulted in a ``0``. However, since this disagreed with the previous result for the same syndrome measurement, and since we track syndrome changes, this change results in another ``1``. Subsequent rounds also do not detect anything, but this no longer represents a change and hence results in a ``0`` in the same position. Most likely the measurement result leading to the first ``1`` was an error."
msgstr "**Örnek 2:** ``0 0  0010 0010 0000``, bir :math:`d=5` 'i, :math:`T=2` ``0`` kodlu tekrar kodunu temsil eder. Burada, sendrom ölçümlerinden biri, ilk turdaki iki kod kübiti arasında bir ``1`` 'e yol açan bir fark bildirdi. Bir sonraki tur aynı etkiyi görmedi ve bu nedenle ``0`` ile sonuçlandı. Bununla birlikte, bu aynı sendrom ölçümü için önceki sonuçla uyuşmadığından ve sendrom değişikliklerini izlediğimiz için, bu değişiklik başka bir ``1`` ile sonuçlanır. Sonraki turlar da hiçbir şey tespit etmez, ancak bu artık bir değişikliği temsil etmez ve dolayısıyla aynı konumda bir ``0``' ile sonuçlanır. Büyük ihtimalle ilk ``1`` e götüren ölçüm sonucu bir hataydı."

#: ../../tutorials/noise/6_repetition_code.ipynb:1462
msgid "**Example 3:** ``0 1  0000 0001 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``1``. A code qubit on the end of the line is flipped before the second round of syndrome measurements. This is detected by only a single syndrome measurement, because it is on the end of the line. For the same reason, it also disturbs one of the logical readouts."
msgstr "**Örnek 3:** ``0 1  0000 0001 0000``, bir :math:`d=5` 'i, :math:`T=2` ``1`` kodlu tekrar kodunu temsil eder. Satırın sonundaki bir kod kübiti, ikinci tur sendrom ölçümlerinden önce çevrilir. Bu, satırın sonunda olduğu için yalnızca tek bir sendrom ölçümüyle tespit edilir. Aynı nedenle, mantıksal okumalardan birini de bozar."

#: ../../tutorials/noise/6_repetition_code.ipynb:1464
msgid "Note that in all these examples, a single error causes exactly two characters in the string to change from the value it would have with no errors. This is, in fact, the reason why the logical output consists of both endpoints. It is a property that will be used by the decoder."
msgstr "Tüm bu örneklerde, tek bir hatanın, dizedeki tam olarak iki karakterin, hiçbir hata olmadan sahip olacağı değerin değişmesine neden olduğuna dikkat edin. Aslında mantıksal çıktının her iki uç noktadan oluşmasının nedeni budur. Bu kod çözücü tarafından kullanılacak bir özelliktir."

#: ../../tutorials/noise/6_repetition_code.ipynb:1475
msgid "To see the effects of noise, we need to specify a noise model. For example, let’s set up a simple noise model with gate and measurement errors."
msgstr "Gürültünün etkilerini görmek için bir gürültü modeli belirlememiz gerekiyor. Örneğin, geçit ve ölçüm hataları içeren basit bir gürültü modeli oluşturalım."

#: ../../tutorials/noise/6_repetition_code.ipynb:1520
msgid "This can then be run to generate noisy results. Let’s make a quick function to do this, and then run it."
msgstr "Bu daha sonra gürültülü sonuçlar oluşturmak için çalıştırılabilir. Bunu yapmak için hızlı bir işlev yapalım ve sonra çalıştıralım."

#: ../../tutorials/noise/6_repetition_code.ipynb:1884
msgid "Here the non-noisy results are the most likely. The rest of the samples are distributed among other possibilities with non-trivial syndromes."
msgstr "Burada gürültülü olmayan sonuçlar en olasıdır. Örneklerin geri kalanı, önemsiz olmayan sendromlarla diğer olasılıklar arasında dağıtılır."

#: ../../tutorials/noise/6_repetition_code.ipynb:1896
msgid "Decoding a repetition code"
msgstr "Tekrarlama kodunun çözülmesi"

#: ../../tutorials/noise/6_repetition_code.ipynb:1898
msgid "Noisy results can change the logical value at readout, and so affect our ability to read out the logical qubit. This can be mitigated by looking at the syndrome values. These can tell us whether or not the logical values are most likely to have changed, and so allow us to correct for the errors. The process of analyzing the syndrome to correct for the errors is called ‘decoding’. We do this by building a decoding object for our code."
msgstr "Gürültülü sonuçlar, okuma sırasında mantıksal değeri değiştirebilir ve bu nedenle mantıksal kübiti okuma yeteneğimizi etkiler. Bu, sendrom değerlerine bakarak hafifletilebilir. Bunlar bize mantıksal değerlerin büyük olasılıkla değişip değişmediğini söyleyebilir ve bu nedenle hataları düzeltmemize izin verir. Hataları düzeltmek için sendromu analiz etme sürecine 'decoding' (kodu çözümleme) denir. Bunu kodumuz için bir kod çözme nesnesi oluşturarak yapıyoruz."

#: ../../tutorials/noise/6_repetition_code.ipynb:1919
msgid "This analyzes the code by seeing how different kinds of error change the output. With this information, along with a decoding algorithm, we can determine what the logical value is most likely to have been."
msgstr "Bu, farklı hata türlerinin çıktıyı nasıl değiştirdiğini görerek kodu analiz eder. Bu bilgilerle, bir kod çözme algoritması ile birlikte, mantıksal değerin büyük olasılıkla ne olduğunu belirleyebiliriz."

#: ../../tutorials/noise/6_repetition_code.ipynb:1921
msgid "For example, let’s use the ‘matching’ algorithm to decode, which is based on minimum weight perfect matching. This takes specific output strings as input. We’ll give it the simple example string ``'1 0  001 100 100'``, for a logical ``1`` that has suffered two errors."
msgstr "Örneğin, kod çözme için minimum ağırlık mükemmel eşleşmesine dayanan 'eşleştirme' algoritmasını kullanalım. Bu, belirli çıktı dizelerini girdi olarak alır. İki hatadan muzdarip bir mantıksal ``1`` için  ``'1 0  001 100 100'`` basit örnek dizisini vereceğiz."

#: ../../tutorials/noise/6_repetition_code.ipynb:1966
msgid "The output is what the logical part should have been. As you can see, the decoder correctly determined that the readout should have been of a logical ``1``."
msgstr "Çıktı, mantıksal kısmın olması gereken şeydir. Gördüğünüz gibi, kod çözücü, okumanın mantıksal bir ``1`` olması gerektiğini doğru bir şekilde belirledi."

#: ../../tutorials/noise/6_repetition_code.ipynb:1977
msgid "When we take many samples, we can determine the probability with which the decoder is incorrect. This should decrease exponentially as the code size is increased, since the configurations of noise that fool the decoder become less likely. The probability of a logical error is calculated using the ``logical_prob()`` method. This runs matching by default, but other algorithms can be specified by the ``algorithm`` kwarg."
msgstr "Çok sayıda örnek aldığımızda, kod çözücünün hatalı olma olasılığını belirleyebiliriz. Bu, kod boyutu arttıkça katlanarak azalmalıdır, çünkü kod çözücüyü kandıran gürültü konfigürasyonları daha az olası hale gelir. Mantıksal bir hata olasılığı, ``logical_prob()`` metodu kullanılarak hesaplanır. Bu, varsayılan olarak eşleşmeyi çalıştırır, ancak diğer algoritmalar ``algorithm`` kwarg'ı ile belirtilebilir."

