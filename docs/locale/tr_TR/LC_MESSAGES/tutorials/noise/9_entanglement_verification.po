msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-21 22:19+0000\n"
"PO-Revision-Date: 2022-04-21 23:29\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/9_entanglement_verification.po\n"
"X-Crowdin-File-ID: 9380\n"
"Language: tr_TR\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:10
msgid "This page was generated from `tutorials/noise/9_entanglement_verification.ipynb`__."
msgstr "Bu sayfa `tutorials/noise/9_entanglement_verification.ipynb`__ adresinden oluşturuldu."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:9
msgid "Entanglement Verification"
msgstr "Dolanıklık Doğrulaması"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:12
msgid "Introduction to the GHZ state"
msgstr "GHZ durumuna giriş"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:14
msgid "**The Greenberger-Horne-Zeilinger (GHZ)** State is a :math:`n`-qubit entangled state best defined by the following state vector:"
msgstr "**Greenberger-Horne-Zeilinger (GHZ)** Durumu :math:`n`-kübitli dolaşık durumdur, en iyi aşağıdaki durum vektörü ile tanımlanır:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:16
msgid "|{\\rm GHZ} \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}} , n > 2\n\n"
msgstr "|{\\rm GHZ} \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}} , n > 2\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:18
msgid "Characterization of the GHZ state is very useful in assessing multi-qubit interactions, whose robustness is key to developing large scale quantum computers."
msgstr "GHZ durumunun karakterizasyonu, sağlamlığı büyük ölçekli kuantum bilgisayarları geliştirmenin anahtarı olan çoklu qubit etkileşimleri değerlendirmede çok kullanışlıdır."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:21
msgid "Characterizing a quantum state"
msgstr "Kuantum durumunu karakterize etme"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:23
msgid "Any mixed quantum state can be identified by a density matrix, defined as :math:`\\rho = \\sum_{i} p_i |\\psi_{i} \\rangle \\langle \\psi_{i}|`, where :math:`|\\psi_{i} \\rangle` are the pure quantum states forming the mixture and :math:`0 < p_i \\le 1`, :math:`\\sum_{i} p_i = 1` are the classical probabilities to be in state :math:`|\\psi_{i} \\rangle`. We denote the pure density matrix of an ideal GHZ State by :math:`\\rho_{p} \\equiv |{\\rm GHZ} \\rangle \\langle {\\rm GHZ}|`. We want to see how close this matrix is to the density matrix of a GHZ State as produced in an experiment, :math:`\\rho_{T}`. One method to quantify this similarity is to calculate the fidelity between the states, :math:`F(\\rho_{p},\\rho_{T})`"
msgstr "Herhangi bir karışık kuantum durumu, $ :nbsphinx-math:`\\rho `= :nbsphinx-math:`\\Sigma`\\ *{i} p\\_i \\|:nbsphinx-math:`\\psi`*\\ {i} :nbsphinx-math:`\\rangle `:nbsphinx-math:`\\langle `:nbsphinx-math:`\\psi`\\_{i}\\| $ olarak tanımlanan bir yoğunluk matrisi ile tanımlanabilmektedir. Burada :math:`|\\psi_{i} \\rangle`, karışımı oluşturan saf kuantum durumlarıdır ve :math:`0 < p_i \\le 1`, :math:`\\Sigma_{i} p_i = 1` :math:`|\\psi_{i} \\rangle` \n"
" durumundaki klasik olasılıklardır. İdeal bir GHZ Durumunun saf yoğunluk matrisini :math:`\\rho_{p} \\equiv |{\\rm GHZ} \\rangle \\langle {\\rm GHZ}|` şeklinde ifade ediyoruz. Bu matrisin, bir deneyde üretilen GHZ Durumunun yoğunluk matrisine ne kadar yakın olduğunu görmek istiyoruz, :math:`\\rho_{T}`. Bu benzerliği ölçmenin bir yöntemi, durumlar arasındaki aslına doğruluğu hesaplamaktır, :math:`F(\\rho_{p},\\rho_{T})`"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:26
msgid "F = \\Big[ Tr \\sqrt{\\sqrt{\\rho_{p}}\\rho_{T}\\sqrt{\\rho_{p}}} \\Big] ^{2}\n\n"
msgstr "F = \\Big[ Tr \\sqrt{\\sqrt{\\rho_{p}}\\rho_{T}\\sqrt{\\rho_{p}}} \\Big] ^{2}\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:28
msgid "The aim of this tutorial is two-fold: we will explore ways in which we can characterize the GHZ state, and ways in which we can use Ignis’ error mitigation tools to increase readout fidelity, regardless of characterization method"
msgstr "Bu eğitimin amacı iki yönlüdür: GHZ durumunu karakterize edebileceğimiz yolları ve karakterizasyon yönteminden bağımsız olarak okuma ve doğruluğunu artırmak için Ignis'in hata azaltma araçlarını kullanabileceğimiz yolları keşfedeceğiz"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:30
msgid "Before we go further, let us import everything we will need from basic Qiskit:"
msgstr "Daha fazla ilerlemeden önce, temel Qiskit'ten ihtiyacımız olan her şeyi içe aktaralım:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:62
msgid "The next two functions are from ignis. The first is for the general error mitigation technique, and the second is specifically for quantum tomography"
msgstr "Sonraki iki fonksiyon ignis'den. Birincisi genel hata azaltma tekniği için, ikincisi ise özellikle kuantum tomografisi içindir"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:85
msgid "The following import from the ``entanglement`` package contains information needed to create, parallelize and analyze GHZ State circuits"
msgstr "Aşağıdaki ``entanglement``(dolanıklık) paketinden içe aktarma, GHZ Durum devrelerini oluşturmak, paralelleştirmek ve analiz etmek için gereken bilgileri içermektedir"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:109
msgid "Preparing a GHZ State"
msgstr "Bir GHZ durumu hazırlama"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:111
msgid "Let us first go over how to prepare a GHZ State:"
msgstr "İlk olarak GHZ durumunun nasıl hazırlanacağını ele alalım:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:113
msgid "Say we have a system of :math:`n` qubits, all prepared in the :math:`|0\\rangle` state:"
msgstr "Hepsi  :math:`|0\\rangle` durumunda hazırlanmış  :math:`n` kübitli bir sistemimiz oldugunu varsayalım."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:115
msgid "|\\psi \\rangle = |00...0\\rangle\n\n"
msgstr "|\\psi \\rangle = |00...0\\rangle\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:117
msgid "We apply a Hadamard gate to the first qubit: :math:`|0\\rangle \\longrightarrow \\frac{1}{\\sqrt{2}}(|0\\rangle + |1\\rangle)`. Our state now looks like:"
msgstr "İlk kübite Hadamard kapısı uygularız: :math:`|0\\rangle \\longrightarrow \\frac{1}{\\sqrt{2}}(|0\\rangle + |1\\rangle)`. Böylece şimdiki durumumuz şöyle görünüyor:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:119
msgid "|\\psi \\rangle = \\frac{|00...0\\rangle + |10...0\\rangle}{\\sqrt{2}}\n\n"
msgstr "|\\psi \\rangle = \\frac{|00...0\\rangle + |10...0\\rangle}{\\sqrt{2}}\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:121
msgid "Applying on this state a sequence of :math:`n-1` CNOT gate between the :math:`n^{th}` and :math:`(n+1)^{th}` qubits for :math:`n = 0 \\ldots n-1` leaves the :math:`n+1` qubit at :math:`|0\\rangle` if the :math:`n^{th}` is in :math:`|0\\rangle`, and at :math:`|1\\rangle` if the :math:`n^{th}` is in :math:`|1\\rangle`, thus creating the GHZ State:"
msgstr ":math:`n^{th}` ve :math:`(n+1)^{th}` kübitleri arasında bu duruma bir seri :math:`n-1` CNOT kapısı uygulamak, eğer :math:`n^{th}` , :math:`|0\\rangle` da ise :math:`n+1` kübitini :math:`|0\\rangle` da ve eğer :math:`n^{th}` , :math:`|1\\rangle` da ise :math:`n+1` kübitini, :math:`|1\\rangle` da bırakır. Bu nedenle GHZ durumunun oluşturulması:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:123
msgid "|GHZ \\rangle = \\frac{|00...0\\rangle + |11...1\\rangle}{\\sqrt{2}} \\equiv \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}}\n\n"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:125
msgid "The following function creates this “linear” circuit that can measure the GHZ state:"
msgstr "Aşağıdaki fonksiyon, GHZ durumunu ölçebilecek bu \"doğrusal\" devreyi oluşturur:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:209
msgid "Characterization, Part I"
msgstr "Karakterizasyon, Bölüm 1"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:212
msgid "Multiple Quantum Coherence (MQC)"
msgstr "Çoklu Kuantum Eşfazlılık (MQC)"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:214
msgid "Multiple Quantum Coherence (MQC) works by taking the preliminary preparation of an :math:`n` qubit GHZ State, and rotating each of the qubit states around the z axis by a phase :math:`\\phi`. After that, we apply a X gate, i.e., a :math:`\\pi` pulse around the x axis. Then, we apply the inverse of the operations we originally applied to get the GHZ state. In an ideal situation the final state is :math:`|\\psi \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + e^{i n \\phi}|1 \\rangle ^{\\otimes n}}{\\sqrt{2}}`. We can ideally observe the phase collected by projecting :math:`|\\psi \\rangle` onto the state :math:`|0 \\rangle ^{\\otimes n}`. This technique is reminiscent of an echo sequence, and has been shown to substantially improve the fidelity during readout."
msgstr "Çoklu Kuantum Eşfazlılığı (MQC), bir :math:`n` kübitlik GHZ Durumunun ön hazırlığını alarak ve kübit durumlarının her birini z ekseni etrafında bir :math:`\\phi` fazı ile döndürerek çalışmaktadır. Bundan sonra, bir X kapısı, yani x ekseni etrafında bir :math:`\\pi` atımı uygularız. Ardından, GHZ durumunu elde etmek için başlangıçta uyguladığımız işlemlerin tersini uygularız. İdeal bir durumda son durum :math:`|\\psi \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + e^{i n \\phi}|1 \\rangle ^{\\otimes n}}{\\sqrt{2}}` 'dir. :math:`|\\psi \\rangle` 'yi $\\|0 :nbsphinx-math:`\\rangle `^{:nbsphinx-math:`\\otimes `n} $ durumuna izdüşürerek toplanan fazı ideal olarak gözlemleyebiliriz. Bu teknik, bir yankı dizisini çağrıştırır ve okuma sırasında doğruluğu büyük ölçüde geliştirdiği gösterilmiştir."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:217
msgid "The function below creates a linear MQC circuit. As with every circuit from here on, you can change the ``full_measurement`` argument to toggle between full measurement of all qubits or measurement of only the control qubit. Full measurement yields the most accurate results, but for more than 7 qubits, it is recommended to set it to false, and observe only the oscillations between the ``'0'`` and ``'1'`` states."
msgstr "Aşağıdaki fonksiyon, doğrusal bir ÇKE devresi oluşturur. Bundan sonra her devrede olduğu gibi, tüm kübitlerin tam ölçümü veya yalnızca kontrol kübitinin ölçümü arasında geçiş yapmak için ``full_measurement`` bağımsız değişkenini değiştirebilirsiniz. Tam ölçüm en doğru sonuçları sağlar ancak 7 kübitten fazlası için, yanlış olarak ayarlanması ve yalnızca `` 0 '' ve `` 1 '' durumları arasındaki salınımların gözlemlenmesi önerilir."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:299
msgid "After running experiments on this MQC circuit, we can pick a state to observe oscillations as we sweep :math:`\\phi` from :math:`0` to :math:`2 \\pi`. Our signal in theory should follow :math:`S(\\phi) = \\frac{1}{2}(1+\\cos(n \\phi))`. We then perform a Discrete Fourier Transform (DFT: :math:`I_{v}=(1/N)|\\sum_{\\phi}e^{iv\\phi}S(\\phi)`) to extract the Fidelity of the state, defined by the bounds :math:`2\\sqrt{I_{n}} \\leq F \\leq \\sqrt{I_{0}/2}+ \\sqrt{I_{n}}`; if desired, an actual value for the fidelity can be obtained: :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1})+\\sqrt{I_{n}})` (arXiv:1905.05720)."
msgstr "Bu MQC devresinde deneyleri çalıştırdıktan sonra, :math:`0` den :math:`2 \\pi` e :math:`\\phi` i taradığımız esnada salınımları gözlemlemek için bir durum seçebiliriz. Teorik olarak bizim sinyalimiz :math:`S(\\phi) = \\frac{1}{2}(1+cos(n \\phi))` ni takip etmeli. O zaman sınırları :math:`2\\sqrt{I_{n}} \\leq F \\leq \\sqrt{I_{0}/2}+ \\sqrt{I_{n}}` olarak tanımlanmış durumun doğruluğunu arttırmak için Ayrık Fourier Dönüşümü (DFT: :math:`I_{v}=(1/N)|\\Sigma_{\\phi}e^{iv\\phi}S(\\phi)`) yürütebiliriz; eğer istenirse; doğruluk için gerçek bir değer elde edilebilir: :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1})+\\sqrt{I_{n}})` (arXiv:1905.05720)."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:312
msgid "Parity Oscillations"
msgstr "Parite Salınımları"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:314
msgid "The next method we use to characterize the GHZ state is parity oscillations. After preparing a GHZ state, we apply a combination of rotations about the x and y axes to create various superposition states as a function of :math:`\\phi`: :math:`U(\\phi) = \\otimes_{j}^{N} e^{i\\frac{\\pi}{4}(\\cos(\\phi)\\sigma_{x}^{j}+\\sin(\\phi)\\sigma_{y}^{j})}`. We then measure the expectation value :math:`\\langle \\otimes_{j}^{N} \\sigma_{z}^{j} \\rangle_{\\phi}` as a function of :math:`\\phi`, which in theory should lead to parity oscillations between 1 and -1."
msgstr "GHZ durumunu karakterize etmek için kullanacağımız bir sonraki yöntem, parite salınımlarıdır. Bir GHZ durumu hazırladıktan sonra, bir :math:`\\phi`: :math:`U(\\phi) = \\otimes_{j}^{N} e^{i\\frac{\\pi}{4}(cos(\\phi)\\sigma_{x}^{j}+sin(\\phi)\\sigma_{y}^{j})}` fonksiyonu olarak çeşitli süperpozisyon durumları oluşturmak için x ve y eksenleri etrafında bir dönüş kombinasyonu uyguluyoruz. Daha sonra bir :math:`\\phi` fonksiyonu olarak beklenen değeri :math:`\\langle \\otimes_{j}^{N} \\sigma_{z}^{j} \\rangle_{\\phi} ölçüyoruz, ki teoride 1 ve -1 arasındaki parite salınımlarına neden olmalı."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:317
msgid "The following function generates a circuit which is the Parity Oscillation equivalent of the MQC circuit given above"
msgstr "Aşağıdaki fonksiyon, yukarıda verilen MQC devresinin Parite Salınım eşdeğeri olan bir devre oluşturur."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:366
msgid "We can obtain fidelity for parity oscillations :math:`S_{\\phi}` from :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1}+C)`, where :math:`C`, the coherence is defined as :math:`2\\sqrt{I_{n}}`, following the same convention for the DFT as with the MQC method."
msgstr ":math:`C` de, eş fazlı olma durumu :math:`2\\sqrt{I_{n}}` olarak tanımlandığında, Parite salınımları için doğruluğu :math:`S_{\\phi}` from :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1}+C)` olarak elde edebiliriz, MQC yöntemiyle olduğu gibi DFT için de aynı kural izlenir."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:378
msgid "Tomography"
msgstr "Tomografi"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:380
msgid "Tomography measures the density matrix by producing many nominally identical states and measuring the state instances in different bases. The ideal result of a GHZ state is four equal density matrix elements at the 4 corners of the tensor-product basis, with all other elements vanishing. Although the fidelity can be readily calculated by this method, the method is slow (requires exponential number of measurements in n), and takes prohibitively long times if n is larger than 7 or so. Nevertheless, we will show below how to perform this method as it is relevant for small numbers of qubits."
msgstr "Tomografi, nominal olarak özdeş birçok durumu üreterek ve farklı temellerdeki durum örneklerini ölçerek yoğunluk matrisini ölçer. Bir GHZ durumunun ideal sonucu, tensör-çarpımı temelinin 4 köşesindeki dört eşit yoğunluklu matris elemanıdır ve diğer tüm elemanlar kaybolur. Aslına uygunluk bu yöntemle kolayca hesaplanabilse de, yöntem yavaştır (n cinsinden üstel ölçüm sayısı gerektirir) ve n'nin 7'den büyük olması halinde engelleyici şekilde uzun süreler alır. Ancak, az sayıdaki kübitlerle ilgili olduğundan, bu yöntemin nasıl gerçekleştirileceğini aşağıda göstereceğiz."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:393
msgid "Parallelizing circuits"
msgstr "Devrelerin Paralelleştirilmesi"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:395
msgid "The above “linear” circuits are good to perform simulations, but what do we do when we use real devices, where the system can have an arbitrary topology and various errors? We are specifically targeting real hardware here, not just Aer simulation. One technique to reduce real-hardware effects is to parallelize the CNOT gates and thus create a shorter-depth circuit. This can be hugely beneficial efficiency wise, and fidelity wise. The class ``BConfig`` from the module ``parallelize`` does exactly this."
msgstr "Yukarıdaki \"lineer\" devreler simülasyon yapmak için iyidir, ancak sistemin keyfi bir topolojiye ve çeşitli hatalara sahip olabileceği gerçek aygıtları kullandığımızda ne yaparız? Burada sadece Aer simülasyonunu değil, gerçek donanımı hedeflemekteyiz. Gerçek donanım etkilerini azaltmak için bir teknik, CNOT kapılarını paralel hale getirmek ve böylece daha kısa derinlikli bir devre oluşturmaktır. Bu, verimlilik açısından ve doğruluk açısından oldukça faydalı olabilir. ``parallelize`` modülündeki ``BConfig`` sınıfı tam olarak bunu yapar."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:398
msgid "First we must configure the optimal backend we want to use. We will consider a simulation backend, ``'ibmq_qasm_simulator'``, disguised as a real device, ``'ibmq_16_melbourne'`` by using a the mock backend ``'FakeMelbourne'``"
msgstr "Öncelikle kullanmak istediğimiz en uygun arka ucu yapılandırmalıyız. Sahte bir arka uç ``FakeMelbourne '' kullanarak gerçek bir cihaz olan ``'ibmq_16_melbourne'`` görünümüne bürünmüş ``'ibmq_qasm_simulator'`` simülasyon arka ucunu ele alacağız"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:422
msgid "Using the ``noise`` module, we can now define a noise model from ``'ibmq_16_melbourne'`` to “assign” to ``'ibmq_qasm_simulator'``."
msgstr "``noise`` modülünü kullanarak ``'ibmq_qasm_simulator'``'e gönderilmek üzere ``'ibmq_16_melbourne'``'dan bir gürültü modeli tanımlayabiliriz."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:445
msgid "And there we have it. From now on, in the tutorial, when using a real device, not a simulation, just take out every mention and assignment of ``noise_model`` and ``coupling_map``, and assign the real device to ``backend``. The simulator used from now on is no substitute for running a real device."
msgstr "Ve işte burada. Şu andan itibaren, öğreticide bir simülasyon değil, gerçek bir cihaz kullanırken, ``noise_model´´ ve ``coupling_map´´ ile ilgili her sözü ve atamayı çıkarın ve gerçek cihazı ``backend´´e atayın. Şu andan itibaren kullanılan simülatör, gerçek bir cihazı çalıştırmanın yerini tutamaz."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:456
msgid "``BConfig`` lays the blueprint for creating parallelized circuits. Let us initialize an object taking in the real device we just defined, and name it ``protocirc``. All of our experiments will use it:"
msgstr "``BConfig``, paralelleştirilmiş devreler oluşturmanın planını oluşturmaktadır. Az önce tanımladığımız gerçek cihazı alan bir nesneyi başlatalım ve ona ``protocirc´´ adını verelim. Tüm deneylerimiz bunu kullanacak:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:478
msgid "Error Mitigation"
msgstr "Hata Azaltma"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:480
msgid "Qiskit Ignis provides very accurate tools to take raw data and return calibrated data. This is done by getting the raw data, in the form of a vector :math:`v_{raw}` and getting a calibration matrix :math:`A`. The output is then the solution to the optimization problem: :math:`argmin_{v_{cal}} ||Av_{cal}-v_{raw}||^{2}`"
msgstr "Qiskit Ignis, işlenmemiş verileri almak ve kalibre edilmiş verileri döndürmek için çok doğru araçlar sağlar. Bu işlem, işlenmemiş verileri bir vektör :math:` v_{raw}` ve bir kalibrasyon matrisi :math:` A ' biçiminde elde etmek suretiyle yapılır. Daha sonra sonuç, şu optimizasyon problemine çözüm olur: :math:` argmin_ { v_{cal}} | | Av_{cal}-v_{raw}| | ^{2}`"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:492
msgid "Experiment Time"
msgstr "Deney Süresi"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:495
msgid "Preliminary Steps"
msgstr "Ön Adımlar"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:497
msgid "The probabilities of measuring :math:`|0\\rangle ^{\\otimes n}` and :math:`|1\\rangle^{\\otimes n}` in the GHZ state are important in calculating fidelity. For this, we need to run the following test"
msgstr "GHZ durumundaki :math:`|0\\rangle ^{\\otimes n}` ve :math:`|1\\rangle^{\\otimes n}` ölçüm olasılıkları, doğruluk hesaplamasında önemlidir. Bunun için aşağıdaki testi yapmamız gerekiyor"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:508
msgid "We begin by defining standard execution parameters:"
msgstr "Standart uygulama parametrelerini tanımlayarak başlıyoruz:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:936
msgid "Now with error mitigation:"
msgstr "Şimdi hata azaltma ile:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1079
msgid "We will load these values in a dictionary for assessing fidelity later on:"
msgstr "Daha sonra aslına uygunluğu değerlendirmek için bu değerleri bir sözlüğe yükleyeceğiz:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1101
msgid "Part 1 : MQC"
msgstr "Bölüm 1: MQC"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1103
msgid "We now retrieve a parallelized MQC circuit for the n qubit device"
msgstr "Şimdi, n kübit aygıtı için paralellenmiş bir MQC devresi elde ediyoruz"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1166
msgid "We now execute the MQC experiment:"
msgstr "MQC deneyini şimdi yürütüyoruz:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1213
msgid "Now we will plot the amount of counts measured for :math:`|0 \\rangle ^{\\otimes n}` as a function of phase. It is important to note that when using a parametrized circuit like the one here, the method ``get_counts()`` accepts an **index** and not a **circuit**. In any other type of experiment, ``get_counts()`` accepts a **circuit**."
msgstr "Şimdi, :math:`|0 \\rangle ^{\\otimes n}` için ölçülen sayımların miktarını fazın bir fonksiyonu olarak çizeceğiz. Buradaki gibi parametreleştirilmiş bir devre kullanırken, ``get_counts()`` yönteminin bir **devre** değil bir **indeks** kabul ettiğine dikkat etmek önemlidir. Diğer tüm deney türlerinde, ``get_counts()`` bir **devre** kabul eder."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1244
msgid "Now we get started on error mitigation. We create an identical quantum register and use complete_meas_cal from Ignis, to create circuits for calibrated measurements to be executed, and a calibration matrix."
msgstr "Şimdi hata azaltmaya başlıyoruz. Özdeş bir kuantum yazmacı oluşturuyoruz ve kalibre edilecek ölçümler için devreler ve bir kalibrasyon matrisi oluşturmak için Ignis'ten complete\\_meas\\_cal kullanıyoruz."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1314
msgid "Finally, we have our error mitigated results:"
msgstr "Son olarak, hata azaltılmış sonuçlarımızı elde ettik:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1335
msgid "We can see how the error mitigated results yield a far greater fidelity than the raw data"
msgstr "Hataları azaltılmış sonuçların ham verilerden çok daha fazla doğruluk sağladığını görebiliriz"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1470
msgid "We now plot the DFT and compare the heights of the peaks to give bounds for the fidelity"
msgstr "Şimdi DFT'yi çiziyoruz ve doğruluk sınırlarını vermek için piklerin yüksekliklerini karşılaştırıyoruz"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1481
msgid "Statistical bootstrapping has found that the error on these measurements is at most 1.5% (arXiv 1905.05720), so these result fall within error bounds, despite the fidelity being slightly higher than the upper bound, and show how error mitigation dramatically increases fidelity"
msgstr "İstatistiksel önyükleme, bu ölçümlerdeki hatanın en fazla %1,5 olduğunu buldu (arXiv 1905.05720), bu nedenle bu sonuçlar, aslına uygunluğun üst sınırdan biraz daha yüksek olmasına rağmen hata sınırları içinde kalıyor ve hata azaltmanın doğruluğu nasıl önemli ölçüde artırdığını gösteriyor"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1493
msgid "Part 2: Parity Oscillation"
msgstr "Bölüm 2: Eşlik Salınımı"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1495
msgid "We now retrieve a parallelized Parity Oscillation circuit for the n qubit device, and run experiments in the same fashion as we did in MQC."
msgstr "Şimdi n kübitlik cihaz için paralelleştirilmiş bir Eşlik Salınım devresi alıyoruz ve MQC'de yaptığımızla aynı şekilde deneyler yapıyoruz."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1595
msgid "Now we construct the :math:`\\otimes _{j}^{N} \\sigma_z^{j}` matrix for instruction, although this is already taken into account in the following method, ``entanglement.analysis.composite_pauli_z_expvalue()``:"
msgstr "Şimdi, aşağıdaki yöntemde dikkate alınmış olmasına rağmen talimat için :math:`\\otimes _{j}^{N} \\sigma_z^{j}` matrisini oluşturuyoruz, ``entanglement.analysis.composite_pauli_z_expvalue()``:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1618
msgid "Now we want to make sure that our list of counts is correctly ordered so that it coincides with the states of the :math:`\\otimes _{j}^{N} \\sigma_z^{j}`, so that calculating :math:`\\langle \\otimes _{j}^{N} \\sigma_z^{j} \\rangle` will be as simple as taking the dot product of this ordered list with the diagonal of :math:`\\otimes _{j}^{N} \\sigma_z^{j}`. The ``composite_pauli_z_expvalue`` function does just that; it takes a circuit and appropriately orders the state vector counts. We can plot this dot product as a function of :math:`\\phi` to observe parity oscillations."
msgstr "Şimdi sayım listemizin doğru sıralandığından emin olmak istiyoruz ki :math:`\\otimes _{j}^{N} \\sigma_z^{j}` durumlarıyla tutarlı olsun, böylece hesaplama :math:`\\langle \\otimes _{j}^{N} \\sigma_z^{j} \\rangle` bu sıralanmış liste ile :math:`\\otimes _{j}^{N} \\sigma_z^{j}` matrisinin köşegeninin nokta çarpımını almak kadar kolay olacaktır. ``composite_pauli_z_expvalue`` fonksiyonu sadece bunu yapar; bir devre alır ve durum vektörleri sayımını uygun bir şekilde sıralar. Bu nokta çarpımını, eşlik salınımlarını keşfetmek için bir :math:`\\phi` fonksiyonu olarak çizebiliriz."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1669
msgid "Now for standard error mitigation:"
msgstr "Şimdi standart hata azaltma için:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1768
msgid "We can see how error mitigation dramatically improves our measurement (much more so in PO than in MQC). Let us quantify this using the same DFT method we used in MQC, and calculating the actual fidelities:"
msgstr "Hata azaltmasının ölçümümüzü önemli ölçüde nasıl geliştirdiğini görebiliyoruz (PO'da MQC'den çok daha fazla). Bunu, MQC'de kullandığımız aynı DFT yöntemini kullanarak ve gerçek doğrulukları hesaplayarak ölçelim:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1858
msgid "As we see, the raw fidelity is much lower than what is achieved with MQC, but the error mitigated result is about the same."
msgstr "Gördüğümüz gibi, saf doğruluğu MQC'de elde ettiğimizden çok daha düşük fakat hata azaltılmış sonuç ile neredeyse aynı."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1870
msgid "Part 3: Tomography"
msgstr "3. Bölüm: Tomografi"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1872
msgid "The first step in this experiment to just pass a simple GHZ state with *no* measurements. Also, the circuit cannot be transpiled; the ``transpiled`` argument in the ``getGHZChecker()`` method can be turned on and off as is shown"
msgstr "Bu deneyde ilk adım *ölçümsüz* basit bir GHZ durumuna geçmek. Ayrıca, devre çevrilemez (transpile); ``getGHZChecker()`` yöntemindeki ``transpile`` argümanı gösterildiği gibi açılıp kapanabilir"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1907
msgid "We now pass a simulated backend from ``Aer`` to get theoretical statevector counts"
msgstr "Şimdi teorik durum vektörü sayımlarını elde etmek için ``Aer`` den bir simülasyon arka ucunu giriyoruz"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1954
msgid "This following code runs tomography experiments on the circuit we defined first, which is then compared to the theoretical statevector to generate a density matrix"
msgstr "Bu aşağıdaki kod, ilk olarak tanımladığımız devre üzerinde tomografi deneylerini çalıştırır, bu daha sonra bir yoğunluk matrisi oluşturmak için teorik durum vektörü ile karşılaştırılır"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2010
msgid "From here we can get the fidelity, although this method is not as fool proof as the one we will get to eventually:"
msgstr "Buradan doğruluğu elde edebiliriz, ancak bu yöntem, neticede alacağımız yöntem kadar sağlam değil:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2031
msgid "…And now for error mitigation…"
msgstr "... Ve şimdi hata azaltma için..."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2113
msgid "Now, using ``qiskit.visualization``, we can plot the raw density matrix, real, and imaginary parts being on separate plots,…"
msgstr "Şimdi, ``qiskit.visualization`` ı kullanarak şunları çizebiliriz: saf yoğunluk matrisini, ayrı çizimler üzerindeki hayali ve gerçek parçaları…"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2152
msgid "And also the error mitigated density matrix,…"
msgstr "Ve aynı zamanda hata azaltılmış yoğunluk matrisi,…"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2191
msgid "The actual density matrices can be obtained using the ``fit()`` method. Once we have the density matrix, we can compute the fidelity, which is nothing but half the sum of the four corners of the density matrix; the following method helps us:"
msgstr "Gerçek yoğunluk matrisleri ``fit()`` yöntemi kullanılarak elde edilebilir. Bir kez yoğunluk matrisine sahip olduğumuzda, yoğunluk matrisinin dört köşesinin toplamının yarısından başka bir şey olmayan doğruluğu hesaplayabiliriz; aşağıdaki bize yardımcı olur:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2270
msgid "As we see, the raw fidelity is much lower than what is achieved with either MQC or Parity Oscillations, but the error mitigated result is about the same."
msgstr "Gördüğümüz gibi, saf doğruluğu MQC'de elde ettiğimizden çok daha düşük fakat hata azaltılmış sonuç ile neredeyse aynı."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2272
msgid "**A note on tomography**"
msgstr "** Tomografi üzerine bir not *"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2274
msgid "Do not perform quantum tomography with >5 qubits"
msgstr "> 5 kübit ile kuantum tomografisi gerçekleştirmeyin"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2286
msgid "Conclusion"
msgstr "Sonuç"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2288
msgid "In conclusion, we see that without error mitigation, MQC is the superior method for characterizing the GHZ state. However, with error mitigation, all methods can, at least for a small number of qubits, achieve a much greater fidelity, and all near the same value. To get more accurate results, aside from using a real device, it is worth increasing the number of shots four to eight-fold. It may be worth comparing how the parallelized circuits used in this notebook perform fidelity-wise versus linearized circuits."
msgstr "Sonuç olarak, hata azaltma olmadan, MQC'nin GHZ durumunu karakterize etmek için üstün bir yöntem olduğunu görüyoruz. Bununla birlikte, hata azaltma ile, tüm yöntemler, en azından az sayıda kübit için, çok daha yüksek bir doğruluk elde edebilir ve hepsi aynı değere yakın olabilmektedir. Daha kesin sonuçlar elde etmek için, gerçek bir cihaz kullanmanın yanı sıra, deneme sayısını dört ila sekiz kat artırmaya değer. Bu not defterinde kullanılan paralel devrelerin, lineer devrelere karşı doğruluk açısından nasıl performans gösterdiğini karşılaştırmaya değer olabilir."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2301
msgid "External collaborators"
msgstr "Harici işbirlikçiler"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2303
msgid "Rohith Karur"
msgstr "Rohith Karur"

