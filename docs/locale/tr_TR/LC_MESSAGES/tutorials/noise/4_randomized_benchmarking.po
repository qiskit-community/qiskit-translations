msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-07 16:27+0000\n"
"PO-Revision-Date: 2020-12-19 07:36\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/4_randomized_benchmarking.po\n"
"X-Crowdin-File-ID: 9138\n"
"Language: tr_TR\n"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:10
msgid "This page was generated from `tutorials/noise/4_randomized_benchmarking.ipynb`__."
msgstr "Bu sayfa `tutorials/noise/4_randomized_benchmarking.ipynb`__ sayfasından oluşturulmuştur."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/noise/4_randomized_benchmarking.ipynb>`_."
msgstr "`IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/noise/4_randomized_benchmarking.ipynb>`_ içinde etkileşimli olarak çalıştırın."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:9
msgid "Randomized Benchmarking"
msgstr "Rastgele Benchmarking(Değerlendirme deneyi)"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:12
msgid "Introduction"
msgstr "Giriş"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:14
msgid "**Randomization benchmarking (RB)** is a well-known technique to measure average gate performance by running sequences of random Clifford gates that should return the qubits to the initial state. Qiskit Ignis has tools to generate one- and two-qubit Clifford gate sequences simultaneously."
msgstr "**Rastgele benchmarking (RB)**, kübitleri başlangıç durumuna döndürmesi gereken rastgele Clifford kapı dizilerini çalıştırarak ortalama kapı performansını ölçmek için iyi bilinen bir tekniktir. Qiskit Ignis, aynı anda bir ve iki kübitlik Clifford kapı dizileri oluşturmak için gerekli araçlara sahiptir."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:16
msgid "This notebook gives an example for how to use the ``ignis.verification.randomized_benchmarking`` module. This particular example shows how to run 2-qubit randomized benchmarking (RB) simultaneous with 1-qubit RB. There are also examples on how to use some of the companion functions for predicting RB fidelity."
msgstr "Bu defter, ``ignis.verification.randomized_benchmarking`` modülünün nasıl kullanılacağına dair bir örnek verir. Bu özel örnek, 1 kübitlik RB ile eş zamanlı olarak 2 kübitlik RB'nin nasıl çalıştırılacağını göstermektedir. RB uygunluğunu tahmin etmek için bazı tamamlayıcı işlevlerin nasıl kullanılacağına dair örnekler de vardır."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:49
msgid "1) Select the Parameters of the RB Run"
msgstr "1) RB Çalıştırmasının Parametrelerini Seçin"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:51
msgid "First, wee need to choose the following parameters:"
msgstr "Öncelikle aşağıdaki parametreleri seçmemiz gerekiyor:"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:53
msgid "**nseeds:** The number of seeds. For each seed you will get a separate list of output circuits in rb_circs."
msgstr ""

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:54
msgid "**length_vector:** The length vector of Clifford lengths. Must be in ascending order. RB sequences of increasing length grow on top of the previous sequences."
msgstr ""

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:55
msgid "**rb_pattern:** A list of the form [[i,j],[k],…] which will make simultaneous RB sequences where Qi,Qj are a 2-qubit RB sequence and Qk is a 1-qubit sequence, etc. The number of qubits is the sum of the entries. For ‘regular’ RB the qubit_pattern is just [[0]],[[0,1]]."
msgstr ""

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:56
msgid "**length_multiplier:** If this is an array it scales each rb_sequence by the multiplier."
msgstr ""

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:57
msgid "**seed_offset:** What to start the seeds at (e.g. if we want to add more seeds later)."
msgstr ""

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:58
msgid "**align_cliffs:** If true adds a barrier across all qubits in rb_pattern after each set of cliffords."
msgstr ""

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:60
msgid "In this example we have 3 qubits Q0,Q1,Q2. We are running 2Q RB (on qubits Q0,Q2) and 1Q RB (on qubit Q1) simultaneously, where there are twice as many 1Q Clifford gates."
msgstr "Bu örnekte 3 kübitimiz Q1,Q2,Q3 var. Aynı anda 2Q RB (Q0, Q2 kübitlerinde) ve 1Q RB'yi (Q1 kübitinde) çalıştırıyoruz, iki kat daha fazla 1Q Clifford kapısının olduğu yerde."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:92
msgid "2) Generate the RB sequences"
msgstr "2) RB dizilerini oluşturun"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:94
msgid "We generate RB sequences. We start with a small example (so it doesn’t take too long to run)."
msgstr ""

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:96
msgid "In order to generate the RB sequences **rb_circs**, which is a list of lists of quantum circuits, we run the function ``rb.randomized_benchmarking_seq``."
msgstr ""

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:98
msgid "This function returns:"
msgstr "Bu işlev şunları döndürür:"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:100
msgid "**rb_circs:** A list of lists of circuits for the rb sequences (separate list for each seed)."
msgstr ""

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:101
msgid "**xdata:** The Clifford lengths (with multiplier if applicable)."
msgstr "**xdata:** Clifford uzunlukları (varsa çarpanıyla birlikte)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:127
msgid "As an example, we print the circuit corresponding to the first RB sequence:"
msgstr "Örnek olarak, ilk RB dizisine karşılık gelen devreyi yazdırıyoruz:"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:218
msgid "Look at the Unitary for 1 Circuit"
msgstr ""

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:229
msgid "The Unitary representing each RB circuit should be the identity (with a global phase), since we multiply random Clifford elements, including a computed reversal gate. We simulate this using an Aer unitary simulator."
msgstr "Her RB devresini temsil eden üniter, hesaplanmış bir ters kapı da dahil olmak üzere rastgele Clifford ögelerini çarptığımız için, birim matris (global faz ile birlikte) olmalıdır."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:301
msgid "Define the noise model"
msgstr "Gürültü modelini tanımlayın"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:312
msgid "We define a noise model for the simulator. To simulate decay, we add depolarizing error probabilities to the CNOT and U gates."
msgstr "Simülatör için bir gürültü modeli tanımlıyoruz. Bozulmayı simüle etmek için, CNOT ve U kapılarına depolarize edici hata olasılıkları ekliyoruz."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:339
msgid "3) Execute the RB sequences on Aer simulator"
msgstr "3) Aer simülatöründe RB dizilerini yürütün"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:341
msgid "We can execute the RB sequences either using a Qiskit Aer Simulator (with some noise model) or using an IBMQ provider, and obtain a list of results, ``result_list``."
msgstr "RB dizilerini bir Qiskit Aer Simülatörü (bazı gürültü modelleriyle) ya da bir IBMQ sağlayıcısı kullanarak yürütebilir ve sonuçların bir listesini elde edebiliriz, ``result_list``."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:415
msgid "4) Fit the RB results and calculate the gate fidelity"
msgstr "4) RB sonuçlarını fit edin ve kapı doğruluğunu hesaplayın"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:418
msgid "Get statistics about the survival probabilities"
msgstr "Hayatta kalma ihtimali hakkında istatistikleri alın"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:420
msgid "The results in **result_list** should fit to an exponentially decaying function :math:`A \\cdot \\alpha ^ m + B`, where :math:`m` is the Clifford length."
msgstr ""

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:422
msgid "From :math:`\\alpha` we can calculate the **Error per Clifford (EPC)**:"
msgstr ":math:`\\alpha` dan **Error per Clifford (EPC)** 'ı (Clifford başına hata) hesaplayabiliriz:"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:424
msgid "EPC = \\frac{2^n-1}{2^n} (1-\\alpha)\n\n"
msgstr ""

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:426
msgid "(where :math:`n=nQ` is the number of qubits)."
msgstr ""

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:449
msgid "Plot After 1 Seed"
msgstr "1 Başlangıç Değerinden Sonra Çizim"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:491
msgid "Plot with the Rest of the Seeds"
msgstr "Geri Kalan Başlangıç Değerleriyle Birlikte Çizim"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:493
msgid "The plot is being updated after each seed."
msgstr "Çizim, her başlangıç değerinden sonra güncellenir."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:547
msgid "Add more shots to the data"
msgstr "Veriye daha fazla deneme ekleyin"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:652
msgid "Predicted Gate Fidelity"
msgstr "Öngörülen Kapı Doğruluğu"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:663
msgid "From the known depolarizing errors on the simulation we can predict the **fidelity**. First we need to count the number of **gates per Clifford**."
msgstr "Simülasyonda bilinen depolarize (kutuplaştırılmış) hatalardan **fidelity** 'yi (doğruluk) ön görebiliyoruz. İlk önce, **gates per Clifford** 'ı (Clifford başına hata) saymak zorundayız."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:665
msgid "The function **gates_per_clifford** takes a list of transpiled RB circuits and outputs the number of basis gates in each circuit."
msgstr ""

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:716
msgid "The function **calculate_2q_epc** gives measured errors in the basis gates that were used to construct the Clifford. It assumes that the error in the underlying gates is depolarizing. It outputs the error per a 2-qubit Clifford."
msgstr ""

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:718
msgid "The input to this function is: - **gate_per_cliff:** dictionary of gate per Clifford. - **epg_2q:** EPG estimated by error model. - **qubit_pair:** index of two qubits to calculate EPC. - **list_epgs_1q:** list of single qubit EPGs of qubit listed in ``qubit_pair``. - **two_qubit_name:** name of two qubit gate in ``basis gates`` (default is ``cx``)."
msgstr ""

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:769
msgid "Run an RB Sequence with T1,T2 Errors"
msgstr "T1, T2 Hatalarıyla RB dizisinin çalıştırılması"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:771
msgid "We now choose RB sequences that contain only 2-qubit Cliffords."
msgstr "Şimdi sadece 2 kübitlik Cliffords içeren RB dizilerini seçiyoruz."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:773
msgid "We execute these sequences as before, but with a noise model extended with T1/T2 thermal relaxation error, and fit the exponentially decaying curve."
msgstr "Bu dizileri daha önce olduğu gibi, ancak T1 / T2 termal durulma hatasıyla genişletilmiş bir gürültü modeliyle çalıştırıyoruz ve üssel olarak bozunma eğrisine fit ediyoruz."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:900
msgid "We count again the number of **gates per Clifford** as before, and calculate the **two-qubit Clifford gate error**, using the predicted primitive gate errors from the coherence limit."
msgstr "Önceki gibi **gates per Clifford** (Clifford başına kapı) sayısını tekrar sayıyoruz ve eş fazlı olma durumu sınırından tahmin edilen ilksel kapı hatalarını kullanarak **two-qubit Clifford gate error** 'ı hesaplıyoruz."

