msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-07 16:27+0000\n"
"PO-Revision-Date: 2020-12-15 22:28\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/3_measurement_error_mitigation.po\n"
"X-Crowdin-File-ID: 9136\n"
"Language: tr_TR\n"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:10
msgid "This page was generated from `tutorials/noise/3_measurement_error_mitigation.ipynb`__."
msgstr "Bu sayfa `tutorials/noise/3_measurement_error_mitigation.ipynb`__ adresinden oluşturuldu."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/noise/3_measurement_error_mitigation.ipynb>`_."
msgstr "`IBM Quantum lab `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/noise/3_measurement_error_mitigation.ipynb>`_ içinde etkileşimli olarak çalıştırın."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:9
msgid "Measurement Error Mitigation"
msgstr "Ölçüm Hatası Azaltma"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:21
msgid "Introduction"
msgstr "Giriş"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:23
msgid "The measurement calibration is used to mitigate measurement errors. The main idea is to prepare all :math:`2^n` basis input states and compute the probability of measuring counts in the other basis states. From these calibrations, it is possible to correct the average results of another experiment of interest. This notebook gives examples for how to use the ``ignis.mitigation.measurement`` module."
msgstr "Ölçüm kalibrasyonu, ölçüm hatalarını azaltmak için kullanılır. Ana fikir tüm :math:`2^n` temel giriş durumlarını hazırlamak ve diğer temel durumlardaki sayıların ölçüm olasılığını hesaplamaktır. Bu kalibrasyonlardan, ilgilenilen başka bir deneyin ortalama sonuçlarını düzeltmek mümkündür. Bu not defteri ``ignis.mitigation.measurement`` modülünün nasıl kullanılacağına ilişkin örnekler verir."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:57
msgid "3 Qubit Example of the Calibration Matrices"
msgstr "Kalibrasyon Matrislerinin 3 Kübitli Örneği"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:68
msgid "Assume that we would like to generate a calibration matrix for the 3 qubits Q2, Q3 and Q4 in a 5-qubit Quantum Register [Q0,Q1,Q2,Q3,Q4]."
msgstr "5 kübitlik [Q0, Q1, Q2, Q3, Q4] Kuantum Yazmacında Q2, Q3 ve Q4 için 3 kübitlik bir kalibrasyon matrisi oluşturmak istediğimizi varsayın."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:70
msgid "Since we have 3 qubits, there are :math:`2^3=8` possible quantum states."
msgstr "3 kübitimiz olduğundan, :math:`2^3=8` olası kuantum durum var."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:82
msgid "Generating Measurement Calibration Circuits"
msgstr "Ölçüm Kalibrasyon Devreleri Üretme"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:84
msgid "First, we generate a list of measurement calibration circuits for the full Hilbert space. Each circuit creates a basis state. If there are :math:`n=3` qubits, then we get :math:`2^3=8` calibration circuits."
msgstr "İlk olarak, tüm Hilbert uzayı için bir ölçüm kalibrasyon devresi listesi üretiyoruz. Her devre bir temel durum oluşturur. Eğer :math:`n=3` kübit varsa, o zaman :math:`2^3=8` kalibrasyon devresi elde ederiz."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:95
msgid "The following function **complete_meas_cal** returns a list **meas_calibs** of ``QuantumCircuit`` objects containing the calibration circuits, and a list **state_labels** of the calibration state labels."
msgstr ""

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:97
msgid "The input to this function can be given in one of the following three forms:"
msgstr "Bu işlevin girdisi aşağıdaki üç formdan birinde verilebilir:"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:99
msgid "**qubit_list:** A list of qubits to perform the measurement correction on, or:"
msgstr ""

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:100
msgid "**qr (QuantumRegister):** A quantum register, or:"
msgstr "**qr (QuantumRegister):** Bir kuantum yazmacı veya:"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:101
msgid "**cr (ClassicalRegister):** A classical register."
msgstr "**cr (ClassicalRegister):** Bir klasik yazmaç."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:103
msgid "In addition, one can provide a string **circlabel**, which is added at the beginning of the circuit names for unique identification."
msgstr "Buna ek olarak, benzersiz tanımlama için devre adlarının başına eklenen bir **circlabel** dizgi de sağlanabilir."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:105
msgid "For example, in our case, the input is a 5-qubit ``QuantumRegister`` containing the qubits Q2,Q3,Q4:"
msgstr "Örneğin, bizim durumumuzda, girdi Q2, Q3, Q4 kübitlerini içeren 5-kübit ``QuantumRegister`` dir:"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:129
msgid "Print the :math:`2^3=8` state labels (for the 3 qubits Q2,Q3,Q4):"
msgstr "Yazdır :math:`2^3=8` durum etiketleri (3 kübit Q2, Q3, Q4 için):"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:171
msgid "Computing the Calibration Matrix"
msgstr "Kalibrasyon Matrisini Hesaplama"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:173
msgid "If we do not apply any noise, then the calibration matrix is expected to be the :math:`8 \\times 8` identity matrix."
msgstr "Eğer herhangi bir gürültü uygulamazsak o zaman kalibrasyon matrisinin :math:`8 \\times 8` birim matris olması beklenir."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:242
msgid "Assume that we apply some noise model from Qiskit Aer to the 5 qubits, then the calibration matrix will have most of its mass on the main diagonal, with some additional ‘noise’."
msgstr ""

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:244
msgid "Alternatively, we can execute the calibration circuits using an IBMQ provider."
msgstr "Alternatif olarak, bir IBMQ sağlayıcısı kullanarak kalibrasyon devrelerini yürütebiliriz."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:347
msgid "Analyzing the Results"
msgstr "Sonuçları Analiz Etme"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:349
msgid "We would like to compute the total measurement fidelity, and the measurement fidelity for a specific qubit, for example, Q0."
msgstr "Toplam ölçüm doğruluğunu ve belirli bir kübit için ölçüm doğruluğunu hesaplamak istiyoruz, örneğin, Q0."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:351
msgid "Since the on-diagonal elements of the calibration matrix are the probabilities of measuring state ‘x’ given preparation of state ‘x’, then the trace of this matrix is the average assignment fidelity."
msgstr ""

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:399
msgid "Applying the Calibration"
msgstr "Kalibrasyonun Uygulanması"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:401
msgid "We now perform another experiment and correct the measured results."
msgstr "Şimdi başka bir deney gerçekleştirip ölçülen sonuçları düzeltiyoruz."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:404
msgid "Correct Measurement Noise on a 3Q GHZ State"
msgstr "Bir 3Q GHZ Durumu Üzerindeki Ölçüm Gürültüsünü Düzelt"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:406
msgid "As an example, we start with the 3-qubit GHZ state on the qubits Q2,Q3,Q4:"
msgstr "Örneğin, Q2,Q3,Q4 kübitlerinde 3 kübitli GHZ durumu ile başlıyoruz:"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:408
msgid "\\mid GHZ \\rangle = \\frac{\\mid{000} \\rangle + \\mid{111} \\rangle}{\\sqrt{2}}\n\n"
msgstr "\\mid GHZ \\rangle = \\frac{\\mid{000} \\rangle + \\mid{111} \\rangle}{\\sqrt{2}}\n\n"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:457
#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:1045
msgid "We now execute the calibration circuits (with the noise model above):"
msgstr "Şimdi kalibrasyon devrelerini yürütüyoruz (Yukarıdaki gürültü modeliyle birlikte):"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:479
msgid "We now compute the results without any error mitigation and with the mitigation, namely after applying the calibration matrix to the results."
msgstr "Şimdi de sonuçları hiç bir hata azaltması olmadan ve azaltmayla birlikte, yani sonuçlara kalibrasyon matrisini uyguladıktan sonra hesaplıyoruz."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:481
msgid "There are two fitting methods for applying the calibration (if no method is defined, then ‘least_squares’ is used). - **‘pseudo_inverse’**, which is a direct inversion of the calibration matrix, - **‘least_squares’**, which constrains to have physical probabilities."
msgstr ""

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:483
msgid "The raw data to be corrected can be given in a number of forms:"
msgstr "Düzeltilecek işlenmemiş veriler, çeşitli biçimlerde verilebilir:"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:485
msgid "Form1: A counts dictionary from results.get_counts,"
msgstr ""

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:486
msgid "Form2: A list of counts of length=len(state_labels),"
msgstr ""

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:487
msgid "Form3: A list of counts of length=M*len(state_labels) where M is an integer (e.g. for use with the tomography data),"
msgstr ""

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:488
msgid "Form4: A qiskit Result (e.g. results as above)."
msgstr ""

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:517
msgid "We can now plot the results with and without error mitigation:"
msgstr "Artık sonuçları hata azaltma ile ve hata azaltma olmadan çizebiliriz:"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:549
msgid "Applying to a reduced subset of qubits"
msgstr "İndirgenmiş bir kübit alt kümesine uygulama"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:560
msgid "Consider now that we want to correct a 2Q Bell state, but we have the 3Q calibration matrix. We can reduce the matrix and build a new mitigation object."
msgstr "Şimdi bir 2Q Bell durumunu düzeltmek istediğimizi düşünün, ancak 3Q kalibrasyon matrisimiz var. Matrisi indirgeyebilir ve yeni bir azaltma nesnesi oluşturabiliriz."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:696
msgid "Tensored mitigation"
msgstr "Tensörle azaltma"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:698
msgid "The calibration can be simplified if the error is known to be local. By “local error” we mean that the error can be tensored to subsets of qubits. In this case, less than :math:`2^n` states are needed for the computation of the calibration matrix."
msgstr ""

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:700
msgid "Assume that the error acts locally on qubit 2 and the pair of qubits 3 and 4. Construct the calibration circuits by using the function ``tensored_meas_cal``. Unlike before we need to explicitly divide the qubit list up into subset regions."
msgstr "Hatanın yerel olarak kübit 2 ve kübit 3 ve 4 çifti üzerinde etkili olduğunu varsayın. Kalibrasyon devrelerini ``tensored_meas_cal`` işlevini kullanarak yapılandırın. Öncekinden farklı olarak, kübit listesini alt küme bölgelerine açıkça bölmemiz gerekiyor."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:724
msgid "We now retrieve the names of the generated circuits. Note that in each label (of length 3), the least significant bit corresponds to qubit 2, the middle bit corresponds to qubit 3, and the most significant bit corresponds to qubit 4."
msgstr "Şimdi üretilen devrelerin adlarını alıyoruz. Her etikette (3 uzunlukta), en az anlamlı bit kübit 2'ye, orta bit kübit 3'e ve en önemli bit kübit 4'e karşılık gelir."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:771
msgid "Let us elaborate on the circuit names. We see that there are only four circuits, instead of eight. The total number of required circuits is :math:`2^m` where :math:`m` is the number of qubits in the larget subset (here :math:`m=2`)."
msgstr "Devre isimlerini detaylandıralım. Sekiz yerine sadece dört devre olduğunu görüyoruz. Toplam gerekli devre sayısı :math:`2^m` burada :math:`m`, hedef alt kümedeki kübit sayısıdır (burada :math:`m=2`)."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:773
msgid "Each basis state of qubits 3 and 4 appears exactly once. Only two basis states are required for qubit 2, so these are split equally across the four experiments. For example, state ‘0’ of qubit 2 appears in state labels ‘000’ and ‘010’."
msgstr ""

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:775
msgid "We now execute the calibration circuits on an Aer simulator, using the same noise model as before. This noise is in fact local to qubits 3 and 4 separately, but assume that we don’t know it, and that we only know that it is local for qubit 2."
msgstr ""

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:823
msgid "The fitter provides two calibration matrices. One matrix is for qubit 2, and the other matrix is for qubits 3 and 4."
msgstr "Birleştirici iki kalibrasyon matrisi sağlar. Bir matris kübit 2 içindir ve diğer matris kübit 3 ve 4 içindir."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:871
msgid "We can look at the readout fidelities of the individual tensored components or qubits within a set:"
msgstr "Bir küme içindeki tek tek tensörlenmiş bileşenlerin veya kübitlerin okuma doğruluklarına bakabiliriz:"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:925
msgid "Plot the individual calibration matrices:"
msgstr "Ayrı kalibrasyon matrislerinin çizimi:"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:1085
msgid "Plot the raw vs corrected state:"
msgstr "Ham durumun çizimine karşı düzeltilmiş durumun çizimi:"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:1118
msgid "As a check we should get the same answer if we build the full correction matrix from a tensor product of the subspace calibration matrices:"
msgstr "Bir kontrol olarak, tam düzeltme matrisini alt uzay kalibrasyon matrislerinin bir tensör çarpımından oluşturursak aynı cevabı almalıyız:"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:1155
msgid "Running Aqua Algorithms with Measurement Error Mitigation"
msgstr "Aqua Algorithmasını Ölçüm Hatası Azaltma ile Çalıştırma"

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:1157
msgid "To use measurement error mitigation when running quantum circuits as part of an Aqua algorithm, we need to include the respective measurement error fitting instance in the QuantumInstance. This object also holds the specifications for the chosen backend."
msgstr "Bir Aqua algoritmasının parçası olarak kuantum devrelerini çalıştırırken ölçüm hatası azaltmayı kullanmak için, QuantumInstance'a ilgili ölçüm hatası uydurma örneğini eklememiz gerekir. Bu nesne aynı zamanda seçilen arka uç özelliklerini de barındırır."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:1159
msgid "In the following, we illustrate measurement error mitigation of Aqua algorithms on the example of searching the ground state of a Hamiltonian with VQE."
msgstr "Aşağıda, VQE ile bir Hamiltonyen'in temel durumunu arama örneği üzerinde Aqua algoritmalarının ölçüm hatası azaltımını gösteriyoruz."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:1170
msgid "First, we need to import the libraries that provide backends as well as the classes that are needed to run the algorithm."
msgstr "Öncelikle, algoritmayı çalıştırmak için gerekli olan sınıfların yanı sıra arka uçları sağlayan kitaplıkları içe aktarmamız gerekir."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:1201
msgid "Then, we initialize the instances that are required to execute the algorithm."
msgstr "Ardından, algoritmayı yürütmek için gerekli olan örnekleri başlatıyoruz."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:1233
msgid "Here, we choose the Aer ``qasm_simulator`` as backend and also add a custom noise model. The application of an actual quantum backend provided by IBMQ is outlined in the commented code."
msgstr "Burada arka uç olarak Aer ``qasm_simulator`` u seçiyoruz ve ayrıca özel bir gürültü modeli ekliyoruz. IBMQ tarafından sağlanan gerçek bir kuantum arka uç uygulaması, yorumlanan kodda ana hatlarıyla belirtilmiştir."

#: ../../tutorials/noise/3_measurement_error_mitigation.ipynb:1268
msgid "Finally, we can run the algorithm and check the results."
msgstr "Son olarak, algoritmayı çalıştırıp sonuçları kontrol edebiliriz."

