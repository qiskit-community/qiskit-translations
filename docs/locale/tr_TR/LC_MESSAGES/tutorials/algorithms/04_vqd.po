msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-02 21:04+0000\n"
"PO-Revision-Date: 2023-03-02 22:46\n"
"Last-Translator: \n"
"Language: tr\n"
"Language-Team: Turkish\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/04_vqd.po\n"
"X-Crowdin-File-ID: 9933\n"

#: ../../tutorials/algorithms/04_vqd.ipynb:10
msgid "This page was generated from `tutorials/algorithms/04_vqd.ipynb`__."
msgstr "Bu sayfa,`tutorials/algorithms/04_vqd.ipynb`__ sayfasından oluşturulmuştur."

#: ../../tutorials/algorithms/04_vqd.ipynb:9
msgid "Variational Quantum Deflation (VQD) Algorithm"
msgstr "Değişimsel Kuantum Söndürme (VQD) Algoritması"

#: ../../tutorials/algorithms/04_vqd.ipynb:11
msgid "This notebook demostrates how to use Qiskit’s implementation of the `Variational Quantum Deflation (VQD) <https://qiskit.org/documentation/stubs/qiskit.algorithms.eigensolvers.VQD.html>`__ algorithm for computing higher energy states of a Hamiltonian, as introduced in this `reference paper <https://arxiv.org/abs/1805.08138>`__."
msgstr "Bu not defteri, Qiskit'in `Değişimsel Kuantum Söndürme (VQD) <https://qiskit.org/documentation/stubs/qiskit.algorithms.eigensolvers.VQD.html>`__ algoritması gerçekleştiriminin, bu `kaynakta <https://arxiv.org/abs/1805.08138>`__ tanıtıldığı şekliyle bir Hamiltonyen'in daha yüksek enerji durumlarını hesaplamak için nasıl kullanılacağını gösterir."

#: ../../tutorials/algorithms/04_vqd.ipynb:23
msgid "Introduction"
msgstr "Giriş"

#: ../../tutorials/algorithms/04_vqd.ipynb:25
msgid "VQD is a quantum algorithm that uses a variational technique to find the *k* eigenvalues of the Hamiltonian *H* of a given system."
msgstr "VQD, belirli bir sistemin Hamiltonyen *H*'sinin *k* özdeğerlerini bulmak için değişimsel bir teknik kullanan bir kuantum algoritmasıdır."

#: ../../tutorials/algorithms/04_vqd.ipynb:27
msgid "The algorithm computes excited state energies of generalized hamiltonians by optimizing over a modified cost function. Each successive eigenvalue is calculated iteratively by introducing an overlap term with all the previously computed eigenstates that must be minimized. This ensures that higher energy eigenstates are found."
msgstr "Algoritma, değiştirilmiş bir maliyet fonksiyonu üzerinde optimizasyon yaparak genelleştirilmiş hamiltonyenlerin uyarılmış durum enerjilerini hesaplar. Ardışık her özdeğer, en aza indirilmesi gereken önceden hesaplanmış tüm özdurumlarla bir örtüşme terimi getirilerek yinelemeli olarak hesaplanır. Bu, daha yüksek enerji özdurumlarının bulunmasını sağlar."

#: ../../tutorials/algorithms/04_vqd.ipynb:39
msgid "Complete working example for VQD"
msgstr "VQD için çalışma örneği"

#: ../../tutorials/algorithms/04_vqd.ipynb:50
msgid "The first step of the VQD workflow is to create a qubit operator, ansatz and optimizer. For this example, you can use the H2 molecule, which should already look familiar if you have completed the previous VQE tutorials:"
msgstr "VQD iş akışının ilk adımı, bir kübit operatörü, ansatz ve optimize edici oluşturmaktır. Bu örnek için, önceki VQE eğitimlerini tamamladıysanız zaten tanıdık gelmesi gereken H2 molekülünü kullanabilirsiniz:"

#: ../../tutorials/algorithms/04_vqd.ipynb:81
msgid "You can set up, for example, a ``TwoLocal`` ansatz with three qubits, and choose ``SLSQP`` as the optimization method."
msgstr "Örneğin, üç kübitlik bir ``TwoLocal`` ansatz ayarlayabilir ve optimizasyon yöntemi olarak ``SLSQP``'yi seçebilirsiniz."

#: ../../tutorials/algorithms/04_vqd.ipynb:117
msgid "The next step of the workflow is to define the required primitives for running ``VQD``. This algorithm requires two different primitive instances: one ``Estimator`` for computing the expectation values for the “VQE part” of the algorithm, and one ``Sampler``. The sampler will be passed along to the ``StateFidelity`` subroutine that will be used to compute the cost for higher energy states. There are several methods that you can use to compute state fidelities, but to keep things simple, you can use the ``ComputeUncompute`` method already available in ``qiskit.algorithm.state_fidelities``."
msgstr "İş akışının bir sonraki adımı, ``VQD`` çalıştırmak için gerekli temel öğeleri tanımlamaktır. Bu algoritma iki farklı temel öğe örneği gerektirir: algoritmanın “VQE kısmı“ için beklenti değerlerinin hesaplanması için bir ``Estimator`` ve bir ``Sampler``. Örnekleyici, daha yüksek enerji durumlarının maliyetini hesaplamak için kullanılacak olan ``StateFidelity`` alt programına geçirilecektir. Durum doğruluğunu hesaplamak için kullanabileceğiniz birkaç yöntem vardır, ancak işleri basit tutmak için ``qiskit.algorithm.state_fidelities`` içinde zaten bulunan ``ComputeUncompute`` metodunu kullanabilirsiniz."

#: ../../tutorials/algorithms/04_vqd.ipynb:144
msgid "In order to set up the VQD algorithm, it is important to define two additional inputs: the number of energy states to compute (``k``) and the ``betas`` defined in the original VQD paper. In this example, the number of states (``k``) will be set to three, which indicates that two excited states will be computed in addition to the ground state."
msgstr "VQD algoritmasını kurmak için iki ek girdi tanımlamak önemlidir: hesaplanacak enerji durumlarının sayısı (``k``) ve orijinal VQD belgesinde tanımlanan ``beta``lar. Bu örnekte, durum sayısı (``k``) üçe ayarlanacaktır; bu, temel duruma ek olarak iki uyarılmış durumun hesaplanacağını gösterir."

#: ../../tutorials/algorithms/04_vqd.ipynb:146
msgid "The ``betas`` balance the contribution of each overlap term to the cost function, and they are an optional argument in the ``VQD`` construction. If not set by the user, they can be autoevaluated for input operators of type ``SparsePauliOp``. Please note that if you want to set your own ``betas``, you should provide a list of values of length ``k``."
msgstr "``beta``lar, her örtüşen terimin maliyet işlevine katkısını dengeler ve ``VQD`` yapısında isteğe bağlı bir bağımsız değişkenlerdir. Kullanıcı tarafından ayarlanmazlarsa, ``SparsePauliOp`` türündeki girdi operatörleri için otomatik olarak değerlendirilebilirler. Kendi ``beta``larınızı ayarlamak istiyorsanız, ``k`` uzunluk değerlerinin bir listesini sağlamanız gerektiğini lütfen unutmayın."

#: ../../tutorials/algorithms/04_vqd.ipynb:168
msgid "You are almost ready to run the VQD algorithm, but let’s define a callback first to store intermediate values:"
msgstr "VQD algoritmasını çalıştırmaya neredeyse hazırsınız, ancak önce ara değerleri depolamak için bir geri çağırma tanımlayalım:"

#: ../../tutorials/algorithms/04_vqd.ipynb:196
msgid "You can finally instantiate ``VQD`` and compute the eigenvalues for the chosen operator."
msgstr "Sonunda ``VQD``'yi başlatabilir ve seçilen operatör için özdeğerleri hesaplayabilirsiniz."

#: ../../tutorials/algorithms/04_vqd.ipynb:221
msgid "You can see the three state energies as part of the ``VQD`` result:"
msgstr "``VQD`` sonucunun bir parçası olarak üç durum enerjisini görebilirsiniz:"

#: ../../tutorials/algorithms/04_vqd.ipynb:266
msgid "And we can use the values stored by the callback to plot the energy convergence for each state:"
msgstr "Ve geri çağırma ile depolanan değerleri, her durum için enerji yakınsamasını çizmek için kullanabiliriz:"

#: ../../tutorials/algorithms/04_vqd.ipynb:312
msgid "This molecule can be solved exactly using the ``NumPyEigensolver`` class, which will give a reference value that you can compare with the ``VQD`` result:"
msgstr "Bu molekül, ``VQD`` sonucuyla karşılaştırabileceğiniz bir referans değeri verecek olan ``NumPyEigensolver`` sınıfı kullanılarak tam olarak çözülebilir:"

#: ../../tutorials/algorithms/04_vqd.ipynb:338
msgid "Let’s see a comparison of the exact result with the previously computed ``VQD`` eigenvalues:"
msgstr "Kesin sonucun önceden hesaplanan ``VQD`` özdeğerleriyle karşılaştırmasını görelim:"

#: ../../tutorials/algorithms/04_vqd.ipynb:387
msgid "As you can see, the result from VQD matches the values from the exact solution, and extends VQE to also compute excited states."
msgstr "Gördüğünüz gibi, VQD'den elde edilen sonuç, tam çözümdeki değerlerle eşleşir ve VQE'yi uyarılmış durumları da hesaplamak için genişletir."

