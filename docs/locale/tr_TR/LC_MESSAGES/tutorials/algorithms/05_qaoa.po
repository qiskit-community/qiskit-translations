msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 17:09+0000\n"
"PO-Revision-Date: 2021-07-06 15:53\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/05_qaoa.po\n"
"X-Crowdin-File-ID: 9502\n"
"Language: tr_TR\n"

#: ../../tutorials/algorithms/05_qaoa.ipynb:10
msgid "This page was generated from `tutorials/algorithms/05_qaoa.ipynb`__."
msgstr "Bu sayfa, `tutorials/algorithms/05_qaoa.ipynb`__ sayfasından oluşturulmuştur."

#: ../../tutorials/algorithms/05_qaoa.ipynb:9
msgid "Quantum Approximate Optimization Algorithm"
msgstr "Kuantum Yaklaşık Optimizasyon Algoritması"

#: ../../tutorials/algorithms/05_qaoa.ipynb:11
msgid "Qiskit has an implementation of the Quantum Approximate Optimization Algorithm `QAOA <https://qiskit.org/documentation/stubs/qiskit.algorithms.QAOA.html>`__ and this notebook demonstrates using it for a graph partition problem."
msgstr "Qiskit, Kuantum Yaklaşım Optimizasyon Algoritmasının `QAOA <https://qiskit.org/documentation/stubs/qiskit.algorithms.QAOA.html>`__ bir uygulamasına sahiptir ve bu not defteri, bir grafik bölme problemi için bu algoritmanın nasıl kullanıldığını göstermektedir."

#: ../../tutorials/algorithms/05_qaoa.ipynb:36
msgid "First we create a graph and draw it so it can be seen."
msgstr "Öncelikle, bir grafik oluşturuyor ve görülebilmesi için onu çiziyoruz."

#: ../../tutorials/algorithms/05_qaoa.ipynb:84
msgid "The brute-force method is as follows. Basically, we exhaustively try all the binary assignments. In each binary assignment, the entry of a vertex is either 0 (meaning the vertex is in the first partition) or 1 (meaning the vertex is in the second partition). We print the binary assignment that satisfies the definition of the graph partition and corresponds to the minimal number of crossing edges."
msgstr "Kaba kuvvet metodu şu şekildedir: Temelde, bütün ikili atamaları kapsamlı olacak şekilde deniyoruz. Her ikili atamada bir tepe noktasının girdisi ya 0'dır (Yani, tepe noktası ilk bölmededir.) ya da 1'dir (Yani, tepe noktası ikinci bölmededir.). Grafik bölmenin tanımını karşılayan ve en küçük kenar kesişim sayısına tekabül eden ikili atamayı yazdırıyoruz."

#: ../../tutorials/algorithms/05_qaoa.ipynb:151
msgid "The graph partition problem can be converted to an Ising Hamiltonian. Qiskit has different capabilities in the Optimization module to do this. Here, since the goal is to show QAOA, the module is used without further explanation to create the operator. The paper `Ising formulations of many NP problems <https://arxiv.org/abs/1302.5843>`__ may be of interest if you would like to understand the technique further."
msgstr "Grafik bölme problemi Ising Modeline dönüştürülebilir. Qiskit, bunu yapmak için Optimizasyon modülünde farklı yeteneklere sahiptir. Burada amaç Kuantum Yaklaşım Opzimizasyon Algoritmasını göstermek olduğundan modül, operatörü oluşturmak için ilave açıklama yapılmadan kullanılır. Eğer tekniği ayrıca anlamak isterseniz `Ising formulations of many NP problems <https://arxiv.org/abs/1302.5843>`__ makalesi ilginizi çekebilir."

#: ../../tutorials/algorithms/05_qaoa.ipynb:220
msgid "So lets use the QAOA algorithm to find the solution."
msgstr "Öyleyse, çözümü bulmak için Kuantum Yaklaşım Optimizasyon Algoritmasını kullanalım."

#: ../../tutorials/algorithms/05_qaoa.ipynb:316
msgid "The outcome can be seen to match to the value computed above by brute force. But we can also use the classical ``NumPyMinimumEigensolver`` to do the computation, which may be useful as a reference without doing things by brute force."
msgstr "Sonuç görüldüğü üzere yukarıda kaba kuvvet ile hesaplanan değerle uyuşmaktadır. Ancak hesaplamayı yapmak için, işleri kaba kuvvet ile yapmadan, kaynak olarak faydalı olabilecek klasik ``NumPyMinimumEigensolver``ı da kullanabiliriz."

#: ../../tutorials/algorithms/05_qaoa.ipynb:364
msgid "It is also possible to use VQE as is shown below"
msgstr "Aşağıda gösterildiği gibi, VQE (Değişken Kuantum Özdeğer Hesaplayıcı)'yi kullanmak da mümkündür."

