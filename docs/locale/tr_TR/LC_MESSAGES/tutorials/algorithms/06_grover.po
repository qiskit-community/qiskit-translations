msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 17:09+0000\n"
"PO-Revision-Date: 2021-07-06 14:49\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/06_grover.po\n"
"X-Crowdin-File-ID: 9504\n"
"Language: tr_TR\n"

#: ../../tutorials/algorithms/06_grover.ipynb:10
msgid "This page was generated from `tutorials/algorithms/06_grover.ipynb`__."
msgstr "Bu sayfa `tutorials/algorithms/06_grover.ipynb`__ adresinden oluşturulmuştur."

#: ../../tutorials/algorithms/06_grover.ipynb:9
msgid "Grover’s Algorithm and Amplitude Amplification"
msgstr "Grover Algoritması ve Genlik Amplifikasyonu"

#: ../../tutorials/algorithms/06_grover.ipynb:11
msgid "Grover’s algorithm is one of the most famous quantum algorithms introduced by Lov Grover in 1996 [1]. It has initially been proposed for unstructured search problems, i.e. for finding a marked element in a unstructured database. However, Grover’s algorithm is now a subroutine to several other algorithms, such as Grover Adaptive Search [2]. For the details of Grover’s algorithm, please see `Grover’s Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ in the Qiskit textbook."
msgstr "Grover algoritması, 1996 yılında Lov Grover tarafından tanıtılan en ünlü kuantum algoritmalarından biridir [1]. Başlangıçta yapılandırılmamış arama problemleri için, yani yapılandırılmamış bir veritabanında işaretli bir öğe bulmak için önerilmiştir. Bununla birlikte, Grover'ın algoritması artık Grover Adaptive Search [2] gibi diğer birçok algoritmanın bir alt rutinidir. Grover'ın algoritmasının ayrıntıları için lütfen Qiskit ders kitabında `Grover’s Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ bölümüne bakın."

#: ../../tutorials/algorithms/06_grover.ipynb:13
msgid "Qiskit implements Grover’s algorithm in the ``Grover`` class. This class also includes the generalized version, Amplitude Amplification [3], and allows setting individual iterations and other meta-settings to Grover’s algorithm."
msgstr "Qiskit, Grover'ın algoritmasını ``Grover`` sınıfında uygular. Bu sınıf ayrıca genelleştirilmiş bir sürüm olan Genlik Amplifikasyonunu [3] içerir ve bireysel yinelemelerin ve diğer meta-ayarların Grover'ın algoritmasına ayarlanmasına izin verir."

#: ../../tutorials/algorithms/06_grover.ipynb:15
#: ../../tutorials/algorithms/06_grover.ipynb:719
msgid "**References:**"
msgstr "**Referanslar:**"

#: ../../tutorials/algorithms/06_grover.ipynb:17
msgid "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"
msgstr "[1]: L. K. Grover, Veritabanı araması için hızlı bir kuantum mekanik algoritması. Bildiriler 28. Yıllık Bilgisayar Teorisi Sempozyumu (STOC) 1996, s. 212-219. https://arxiv.org/abs/quant-ph/9605043"

#: ../../tutorials/algorithms/06_grover.ipynb:19
msgid "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"
msgstr "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Kısıtlı Polinom İkili Optimizasyon için Grover Uyarlamalı Arama. https://arxiv.org/abs/1912.04088"

#: ../../tutorials/algorithms/06_grover.ipynb:21
msgid "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"
msgstr "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Kuantum Genlik Amplifikasyonu ve Tahmini. http://arxiv.org/abs/quant-ph/0005055"

#: ../../tutorials/algorithms/06_grover.ipynb:33
msgid "Grover’s algorithm"
msgstr "Grover'ın algoritması"

#: ../../tutorials/algorithms/06_grover.ipynb:35
msgid "Grover’s algorithm uses the Grover operator :math:`\\mathcal{Q}` to amplify the amplitudes of the good states:"
msgstr "Grover'ın algoritması, iyi durumların genliklerini yükseltmek için Grover operatörünü  :math:`\\mathcal{Q}` kullanır:"

#: ../../tutorials/algorithms/06_grover.ipynb:37
msgid "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"
msgstr "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"

#: ../../tutorials/algorithms/06_grover.ipynb:42
msgid "Here, \\* :math:`\\mathcal{A}` is the initial search state for the algorithm, which is just Hadamards, :math:`H^{\\otimes n}` for the textbook Grover search, but can be more elaborate for Amplitude Amplification \\* :math:`\\mathcal{S_0}` is the reflection about the all 0 state"
msgstr "Burada, \\* :math:`\\mathcal{A}`, Grover arama ders kitabı için yalnızca Hadamardlar, :math:`H^{\\otimes n}` olan algoritmanın ilk arama durumudur, ancak daha fazlası olabilir Genlik Amplifikasyonu için ayrıntılı \\* :math:`\\mathcal{S_0}` tümü 0 durumunun yansımasıdır"

#: ../../tutorials/algorithms/06_grover.ipynb:44
msgid "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"
msgstr "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"

#: ../../tutorials/algorithms/06_grover.ipynb:49
msgid "\\* :math:`\\mathcal{S_f}` is the oracle that applies"
msgstr "\\* :math:`\\mathcal{S_f}` geçerli olan ayrıcalıktır"

#: ../../tutorials/algorithms/06_grover.ipynb:51
msgid "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"
msgstr "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"

#: ../../tutorials/algorithms/06_grover.ipynb:56
msgid "where :math:`f(x)` is 1 if :math:`x` is a good state and otherwise 0."
msgstr "burada :math:`f(x)` 1 ise :math:`x` yararlı bir durumdur ve aksi takdirde 0'dır."

#: ../../tutorials/algorithms/06_grover.ipynb:58
msgid "In a nutshell, Grover’s algorithm applies different powers of :math:`\\mathcal{Q}` and after each execution checks whether a good solution has been found."
msgstr "Özetle, Grover'ın algoritması farklı :math:`\\mathcal{Q}` yetkilerini uygular ve her yürütmeden sonra iyi bir çözüm bulunup bulunmadığını kontrol eder."

#: ../../tutorials/algorithms/06_grover.ipynb:61
msgid "Running Grover’s algorithm"
msgstr "Grover'ın algoritmasını çalıştırma"

#: ../../tutorials/algorithms/06_grover.ipynb:63
msgid "To run Grover’s algorithm with the ``Grover`` class, firstly, we need to specify an oracle for the circuit of Grover’s algorithm. In the following example, we use ``QuantumCircuit`` as the oracle of Grover’s algorithm. However, there are several other class that we can use as the oracle of Grover’s algorithm. We talk about them later in this tutorial."
msgstr "Grover'ın algoritmasını ``Grover`` sınıfı ile çalıştırmak için öncelikle Grover algoritmasının devresi için bir ayrıcalık belirlememiz gerekiyor. Aşağıdaki örnekte, Grover algoritmasının kara kutusu olarak ``QuantumCircuit`` kullanıyoruz. Ancak, Grover'ın algoritmasının kara kutusu olarak kullanabileceğimiz birkaç sınıf daha var. Bu eğitimde daha sonra onlar hakkında konuşacağız."

#: ../../tutorials/algorithms/06_grover.ipynb:65
msgid "Note that the oracle for ``Grover`` must be a *phase-flip* oracle. That is, it multiplies the amplitudes of the of “good states” by a factor of :math:`-1`. We explain later how to convert a *bit-flip* oracle to a phase-flip oracle."
msgstr "``Grover`` için kara kutunun bir *faz çevirme* kara kutusu olması gerektiğini unutmayın. Yani, “good states” genliklerini bir :math:`-1` faktörü ile çarpar. Daha sonra bir *bit-flip* kahininin bir faz çevirme kahinine nasıl dönüştürüleceğini açıklayacağız."

#: ../../tutorials/algorithms/06_grover.ipynb:109
msgid "Then, we specify a backend and call the ``run`` method of ``Grover`` with a backend to execute the circuits. The returned result type is a ``GroverResult``."
msgstr "Daha sonra bir backend belirleriz ve devreleri yürütmek için bir backend ile ``Grover``ın ``run`` metodunu çağırırız. Döndürülen sonuç türü bir ``GroverResult``dır."

#: ../../tutorials/algorithms/06_grover.ipynb:111
msgid "If the search was successful, the ``oracle_evaluation`` attribute of the result will be ``True``. In this case, the most sampled measurement, ``top_measurement``, is one of the “good states”. Otherwise, ``oracle_evaluation`` will be False."
msgstr "Arama başarılı olursa, sonucun ``oracle_evaluation`` özelliği ``True`` olacaktır. Bu durumda en çok örneklenen ölçüm olan ``top_measurement``, “good states” biridir. Aksi takdirde, ``oracle_evaluation`` False olacaktır."

#: ../../tutorials/algorithms/06_grover.ipynb:167
msgid "In the example, the result of ``top_measurement`` is ``11`` which is one of “good state”. Thus, we succeeded to find the answer by using ``Grover``."
msgstr "Örnekte, ``top_measurement`` sonucu, “good state”den biri olan ``11``dir. Böylece ``Grover`` kullanarak cevabı bulmayı başardık."

#: ../../tutorials/algorithms/06_grover.ipynb:179
msgid "Using the different types of classes as the oracle of ``Grover``"
msgstr "Farklı sınıf türlerini ``Grover``ın kara kutusu olarak kullanma"

#: ../../tutorials/algorithms/06_grover.ipynb:181
msgid "In the above example, we used ``QuantumCircuit`` as the oracle of ``Grover``. However, we can also use ``qiskit.quantum_info.Statevector`` as oracle. All the following examples are when :math:`|11\\rangle` is “good state”"
msgstr "Yukarıdaki örnekte, ``Grover``ın kara kutusu olarak``QuantumCircuit``i kullandık. Ancak oracle olarak ``qiskit.quantum_info.Statevector`` da kullanabiliriz. Aşağıdaki örneklerin tümü :math:`|11\\rangle` “good state” olduğunda geçerlidir"

#: ../../tutorials/algorithms/06_grover.ipynb:236
msgid "Internally, the statevector is mapped to a quantum circuit:"
msgstr "Dahili olarak, durum vektörü bir kuantum devresine eşlenir:"

#: ../../tutorials/algorithms/06_grover.ipynb:266
msgid "Qiskit allows for an easy construction of more complex oracles: \\* ``PhaseOracle``: for parsing logical expressions such as ``'~a | b'``. This is especially useful for solving 3-SAT problems and is shown in the accompanying `Grover Examples <07_grover_examples.ipynb>`__ tutorial."
msgstr "Qiskit, daha karmaşık kara kutuların kolayca oluşturulmasını sağlar: \\* ``PhaseOracle``: ``'~a | b'`` gibi mantıksal ifadeleri ayrıştırmak için. Bu özellikle 3-SAT problemlerini çözmek için kullanışlıdır ve beraberindeki `Grover Examples <07_grover_examples.ipynb>`__ öğreticisinde gösterilmiştir."

#: ../../tutorials/algorithms/06_grover.ipynb:268
msgid "Here we’ll use the ``PhaseOracle`` for the simple example of finding the state :math:`|11\\rangle`, which corresponds to ``'a & b'``."
msgstr "Burada, ``'a & b'``ye karşılık gelen :math:`|11\\rangle` durumunu bulmanın basit örneği için ``PhaseOracle``ı kullanacağız."

#: ../../tutorials/algorithms/06_grover.ipynb:307
msgid "You can observe, that this oracle is actually implemented with three qubits instead of two!"
msgstr "Bu kara kutunun, aslında iki yerine üç kübit ile uygulandığını gözlemleyebilirsiniz!"

#: ../../tutorials/algorithms/06_grover.ipynb:309
msgid "That is because the ``PhaseOracle`` is not a phase-flip oracle (which flips the phase of the good state) but a bit-flip oracle. This means it flips the state of an auxiliary qubit if the other qubits satisfy the condition. For Grover’s algorithm, however, we require a phase-flip oracle. To convert the bit-flip oracle to a phase-flip oracle we sandwich the controlled-NOT by :math:`X` and :math:`H` gates, as you can see in the circuit above."
msgstr "Bunun nedeni,``PhaseOracle``ın bir faz-çevirme kara kutusu değil (iyi durumun fazını çeviren) değil, bir bit-çevirme kara kutu olmasıdır. Bu, diğer kübitler koşulu sağlıyorsa, yardımcı kübitin durumunu ters çevirdiği anlamına gelir. Ancak Grover'ın algoritması için bir faz-çevirme kara kutusuna ihtiyacımız var. Bit-çevirme kara kutusunu bir faz çevirme kara kutusuna dönüştürmek için, yukarıdaki devrede görebileceğiniz gibi, kontrollü-NOT'u :math:`X` ve :math:`H` kapıları ile şıkıştırıyoruz."

#: ../../tutorials/algorithms/06_grover.ipynb:311
msgid "**Note:** This transformation from a bit-flip to a phase-flip oracle holds generally and you can use this to convert your oracle to the right representation."
msgstr "**Not:** Bir bit çevirmeden faz-çevirme kara kutusuna dönüşüm genel olarak geçerlidir ve bunu, kara kutunuzun doğru temsile dönüştürmek için kullanabilirsiniz."

#: ../../tutorials/algorithms/06_grover.ipynb:323
msgid "Amplitude amplification"
msgstr "Genlik amplifikasyonu"

#: ../../tutorials/algorithms/06_grover.ipynb:325
msgid "Grover’s algorithm uses Hadamard gates to create the uniform superposition of all the states at the beginning of the Grover operator :math:`\\mathcal{Q}`. If some information on the good states is available, it might be useful to not start in a uniform superposition but only initialize specific states. This, generalized, version of Grover’s algorithm is referred to *Amplitude Amplification*."
msgstr "Grover algoritması, Grover operatörünün :math:`\\mathcal{Q}` başlangıcında bütün durumların tek tip süperpozisyonunu oluşturmak için Hadamard kapılarını kullanmaktadır. Eğer istenilen durumların bazı bilgileri mevcutsa tek tip bir süperpozisyondan başlamamak ancak sadece belirli durumları başlatmak yararlı olabilir. Grover algoritmasının bu, genelleştirilmiş, sürümü *Amplitude Amplification* (Genlik Yükseltme) olarak adlandırılır."

#: ../../tutorials/algorithms/06_grover.ipynb:327
msgid "In Qiskit, the initial superposition state can easily be adjusted by setting the ``state_preparation`` argument."
msgstr "Qiskit'te, ilk süperpozisyon durumu ``state_preparation`` argümanını ayarlanarak kolayca ayarlanabilir."

#: ../../tutorials/algorithms/06_grover.ipynb:330
msgid "State preparation"
msgstr "Durum hazırlığı"

#: ../../tutorials/algorithms/06_grover.ipynb:332
msgid "A ``state_preparation`` argument is used to specify a quantum circuit that prepares a quantum state for the start point of the amplitude amplification. By default, a circuit with $H^{:nbsphinx-math:`\\otimes `n} $ is used to prepare uniform superposition (so it will be Grover’s search). The diffusion circuit of the amplitude amplification reflects ``state_preparation`` automatically."
msgstr "Bir ``state_preparation`` argümanı, genlik yükseltmesi başlangıç noktasına uygun bir kuantum durumu hazırlayan kuantum devresi belirlemek için kullanılır. Varsayılan olarak, $H^{:nbsphinx-math:`\\otimes `n} $ li bir devre, tek tip süperpozisyon hazırlamak için kullanılır (yani Grover araması olacak). Genlik yükseltmenin difüzyon devresi ``state_preparation`` argümanını otomatik olarak yansıtır."

#: ../../tutorials/algorithms/06_grover.ipynb:438
msgid "Full flexibility"
msgstr "Tam esneklik"

#: ../../tutorials/algorithms/06_grover.ipynb:440
msgid "For more advanced use, it is also possible to specify the entire Grover operator by setting the ``grover_operator`` argument. This might be useful if you know more efficient implementation for :math:`\\mathcal{Q}` than the default construction via zero reflection, oracle and state preparation."
msgstr "Daha ileri düzeyde kullanım için, ``grover_operator`` argümanını ayarlayarak bütün Grover operatörünü belirtmek de mümkündür. Bu, :math:`\\mathcal{Q}` için sıfır yansıma, kara kutu (oracle) ve durum hazırlama yoluyla varsayılan yapımdan daha verimli bir uygulama biliyorsanız kullanışlı olabilir."

#: ../../tutorials/algorithms/06_grover.ipynb:442
msgid "The ``qiskit.circuit.library.GroverOperator`` can be a good starting point and offers more options for an automated construction of the Grover operator. You can for instance \\* set the ``mcx_mode`` \\* ignore qubits in the zero reflection by setting ``reflection_qubits`` \\* explicitly exchange the :math:`\\mathcal{S_f}, \\mathcal{S_0}` and :math:`\\mathcal{A}` operations using the ``oracle``, ``zero_reflection`` and ``state_preparation`` arguments"
msgstr "``qiskit.circuit.library.GroverOperator`` iyi bir başlangıç noktası olabilir ve Grover operatörünün otomatik yapımı için bize daha fazla seçenek sunar. Örneğin \\* ``mcx_mode`` u ayarlayabilirsiniz \\* ``reflection_qubits`` i ayarlayarak sıfır yansımadaki kübitleri yoksayabilirsiniz \\* ``oracle``, ``zero_reflection`` ve ``state_preparation`` argümanlarını kullanarak :math:`\\mathcal{S_f}, \\mathcal{S_0}` ve :math:`\\mathcal{A}` işlemlerini açıkça karşılıklı olarak değiştirebilirsiniz"

#: ../../tutorials/algorithms/06_grover.ipynb:453
msgid "For instance, imagine the good state is a three qubit state :math:`|111\\rangle` but we used 2 additional qubits as auxiliary qubits."
msgstr "Örneğin, iyi durumun üç kübitlik bir durum olduğunu hayal edin :math:`|111\\rangle` ama yardımcı kübitler olarak 2 ek kübit kullandık."

#: ../../tutorials/algorithms/06_grover.ipynb:487
msgid "Then, per default, the Grover operator implements the zero reflection on all five qubits."
msgstr "Ardından, varsayılan olarak, Grover operatörü sıfır yansımayı beş kübitin tümüne uygular."

#: ../../tutorials/algorithms/06_grover.ipynb:518
msgid "But we know that we only need to consider the first three:"
msgstr "Ama sadece ilk üçünü dikkate almamız gerektiğini biliyoruz:"

#: ../../tutorials/algorithms/06_grover.ipynb:550
msgid "Dive into other arguments of ``Grover``"
msgstr "``Grover``ın diğer argümanlarına dalın"

#: ../../tutorials/algorithms/06_grover.ipynb:552
msgid "``Grover`` has arguments other than ``oracle`` and ``state_preparation``. We will explain them in this section."
msgstr "\"Grover\", \"oracle\" ve ``state_preparation`` dışında bağımsız değişkenlere sahip. Bunları bu bölümde açıklayacağız."

#: ../../tutorials/algorithms/06_grover.ipynb:555
msgid "Specifying ``good_state``"
msgstr "``good_state`` belirtilmesi"

#: ../../tutorials/algorithms/06_grover.ipynb:557
msgid "``good_state`` is used to check whether the measurement result is correct or not internally. It can be a list of binary strings, a list of integer, ``Statevector``, and Callable. If the input is a list of bitstrings, each bitstrings in the list represents a good state. If the input is a list of integer, each integer represent the index of the good state to be :math:`|1\\rangle`. If it is a ``Statevector``, it represents a superposition of all good states."
msgstr "``good_state`` ölçüm sonucunun doğru olup olmadığını veya dahili olmadığını kontrol etmek için kullanılır. İkili karakter dizilerinin listesi, tam sayı (integer) listesi, ``Statevector`` ve çağrılabilir olabilir. Eğer girdi bit dizisi listesi ise listedeki her bit dizisi bir istenilen durumu temsil eder. Eğer girdi bir tam sayı listesi ise her tam sayı, :math:`|1\\rangle` olması için istenilen durumun indeksini temsil eder. Eğer bir ``Statevector`` ise istenilen bütün durumların süperpozisyonunu temsil eder."

#: ../../tutorials/algorithms/06_grover.ipynb:711
msgid "The number of ``iterations``"
msgstr "``iterations`` sayısı"

#: ../../tutorials/algorithms/06_grover.ipynb:713
msgid "The number of repetition of applying the Grover operator is important to obtain the correct result with Grover’s algorithm. The number of iteration can be set by the ``iteration`` argument of ``Grover``. The following inputs are supported: \\* an integer to specify a single power of the Grover operator that’s applied \\* or a list of integers, in which all these different powers of the Grover operator are run consecutively and after each time we check if a correct solution has been found"
msgstr "Grover operatörünün uygulanmasının tekrar sayısı, Grover algoritması ile doğru sonuç elde etmek için önemlidir. İterasyon sayısı ``Grover`` ın ``iteration`` argümanı ile ayarlanabilmektedir. Aşağıdaki girdiler desteklenir: \\* uygulanan Grover operatörünün tek bir kuvvetini belirtmek için bir tam sayı \\* veya Grover operatörünün tüm bu farklı kuvvetlerinin arka arkaya çalıştırıldığı ve her seferinde doğru bir çözüm bulunup bulunmadığını kontrol ettiğimiz tam sayıların bir listesi"

#: ../../tutorials/algorithms/06_grover.ipynb:715
msgid "Additionally there is the ``sample_from_iterations`` argument. When it is ``True``, instead of the specific power in ``iterations``, a random integer between 0 and the value in ``iteration`` is used as the power Grover’s operator. This approach is useful when we don’t even know the number of solution."
msgstr "Ek olarak ``sample_from_iterations`` argümanı vardır. ``True`` olduğunda, ``iterations`` içerisinde özel bir kuvvet yerine 0 ve ``iteration`` içindeki değer arasında rasgele bir tam sayı, Grover operatörünün kuvveti olarak kullanılır. Bu yaklaşım, çözüm sayısını bile bilmediğimiz zaman kullanışlı olmaktadır."

#: ../../tutorials/algorithms/06_grover.ipynb:717
msgid "For more details of the algorithm using ``sample_from_iterations``, see [4]."
msgstr "``sample_from_iterations`` kullanan algoritma hakkında daha fazla ayrıntı için bakınız [4]."

#: ../../tutorials/algorithms/06_grover.ipynb:721
msgid "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"
msgstr "[4]: Boyer et al., Boyer ve diğerleri, Kuantum aramasında sıkı sınırlar `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"

#: ../../tutorials/algorithms/06_grover.ipynb:774
msgid "When the number of solutions is known, we can also use a static method ``optimal_num_iterations`` to find the optimal number of iterations. Note that the output iterations is an approximate value. When the number of qubits is small, the output iterations may not be optimal."
msgstr "Çözüm sayısı bilindiğinde, ideal iterasyon sayısını bulmak için bir statik metod ``optimal_num_iterations`` kullanabiliriz. Çıktı iterasyonlarının yaklaşık bir değer olduğunu unutmayın. Kübitlerin sayısı küçük olduğunda, çıktı iterasyonları ideal olmayabilir."

#: ../../tutorials/algorithms/06_grover.ipynb:817
msgid "Applying ``post_processing``"
msgstr "``post_processing`` uygulama"

#: ../../tutorials/algorithms/06_grover.ipynb:819
msgid "We can apply an optional post processing to the top measurement for ease of readability. It can be used e.g. to convert from the bit-representation of the measurement ``[1, 0, 1]`` to a DIMACS CNF format ``[1, -2, 3]``."
msgstr "En üst ölçüme okuma kolaylığı için isteğe bağlı bir rötuş uygulayabiliriz. Örneğin, ölçümün bit gösteriminden ``[1, 0, 1]`` DIMACS CNF formatına ``[1, -2, 3]`` dönüştürülmesi için kullanılabilir."

