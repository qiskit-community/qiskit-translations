msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-01 19:07+0000\n"
"PO-Revision-Date: 2022-11-01 19:44\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/07_grover_examples.po\n"
"X-Crowdin-File-ID: 9506\n"
"Language: tr_TR\n"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:10
msgid "This page was generated from `tutorials/algorithms/07_grover_examples.ipynb`__."
msgstr "Bu sayfa, `tutorials/algorithms/07_grover_examples.ipynb`__ adresinden oluşturulmuştur."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:9
msgid "Grover’s algorithm examples"
msgstr "Grover algoritması örnekleri"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:11
msgid "This notebook has examples demonstrating how to use the Qiskit `Grover <https://qiskit.org/documentation/stubs/qiskit.algorithms.Grover.html>`__ search algorithm, with different oracles."
msgstr "Bu not defteri, Qiskit `Grover <https://qiskit.org/documentation/stubs/qiskit.algorithms.Grover.html>`__ arama algoritmasının nasıl kullanılacağını farklı kara kutularla (oracle) gösteren örnekleri içerir."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:39
msgid "Finding solutions to 3-SAT problems"
msgstr "3-SAT problemlerine çözümler üretme"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:41
msgid "Let’s look at an example 3-Satisfiability (3-SAT) problem and walk-through how we can use Quantum Search to find its satisfying solutions. 3-SAT problems are usually expressed in `Conjunctive Normal Forms (CNF) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ and written in the `DIMACS-CNF <http://www.satcompetition.org/2009/format-benchmarks2009.html>`__ format. For example:"
msgstr "Örnek bir 3-Satisfiability (3-SAT, 3-Tatmin-Edilebilirlik) problemine göz gezdirelim ve problemin tatmin edici çözümlerini bulmak için Kuantum Arama'yı nasıl kullanabileceğimizi inceleyelim. 3-SAT problemleri genellikle `Conjunctive Normal Forms (CNF) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ biçiminde ifade edilir ve `DIMACS-CNF <http://www.satcompetition.org/2009/format-benchmarks2009.html>`__ şeklinde yazılır. Örneğin:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:70
msgid "The CNF of this 3-SAT instance contains 3 variables and 5 clauses:"
msgstr "Bu 3-SAT örneğinin CNF'si 3 değişken ve 5 madde içerir:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:72
msgid ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"
msgstr ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:74
msgid "It can be verified that this 3-SAT problem instance has three satisfying solutions:"
msgstr "Bu 3-SAT problem örneğinin üç tane tatmin edici çözümünün olduğu doğrulanabilir:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:76
msgid ":math:`(v_1, v_2, v_3) = (T, F, T)` or :math:`(F, F, F)` or :math:`(T, T, F)`"
msgstr ":math:`(v_1, v_2, v_3) = (T, F, T)` veya :math:`(F, F, F)` veya :math:`(T, T, F)`"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:78
msgid "Or, expressed using the DIMACS notation:"
msgstr "Veya, DIMACS gösterimi kullanılarak ifade edilir:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:80
msgid "``1 -2 3``, or ``-1 -2 -3``, or ``1 2 -3``."
msgstr "``1 -2 3``, veya ``-1 -2 -3``, veya ``1 2 -3``."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:82
msgid "With this example problem input, we then create the corresponding ``oracle`` for our ``Grover`` search. In particular, we use the ``PhaseOracle`` component, which supports parsing DIMACS-CNF format strings and constructing the corresponding oracle circuit."
msgstr "Bu örnek problem girdisiyle ``Grover`` aramamız için ilgili ``oracle``ı oluşturuyoruz. Özellikle, DIMACS-CNF biçimindeki karakter dizilerini parçalamayı ve ilgili kara kutu (oracle) devresini oluşturmayı destekleyen ``PhaseOracle`` bileşenini kullanıyoruz."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:117
msgid "The ``oracle`` can now be used to create an Grover instance:"
msgstr "Şimdi, bir Grover örneği oluşturmak için ``oracle`` kullanılabilir:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:140
msgid "We can then configure the backend and run the Grover instance to get the result:"
msgstr "Sonrasında arka-yüzü yapılandırabilir ve sonucu elde etmek için Grover örneğini çalıştırabiliriz:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:191
msgid "As seen above, a satisfying solution to the specified 3-SAT problem is obtained. And it is indeed one of the three satisfying solutions."
msgstr "Yukarıda görüldüğü gibi, belirtilen 3-SAT problemine tatmin edici bir çözüm elde edilmiştir. Ve bu gerçekten de tatmin edici üç çözümden biridir."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:193
msgid "Since we used the ``'aer_simulator'``, the complete measurement result is also returned, as shown in the plot below, where it can be seen that the binary strings ``000``, ``011``, and ``101`` (note the bit order in each string), corresponding to the three satisfying solutions all have high probabilities associated with them."
msgstr "``'aer_simulator'`` kullandığımız için, aşağıdaki grafikte gösterildiği gibi, tam ölçüm sonucu da döndürülür. Bu grafikte, üç tatmin edici çözüme tekabül eden ``000``, ``011``, and ``101`` (Her karakter dizisindeki bit sıralamasına dikkat edin.) ikili karakter dizilerinin hepsinin kendileriyle ilişkilendirilmiş yüksek olasılıklara sahip olduğu görülmektedir."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:224
msgid "Boolean Logical Expressions"
msgstr "Boole Mantıksal İfadeler"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:226
msgid "Qiskit’s ``Grover`` can also be used to perform Quantum Search on an ``Oracle`` constructed from other means, in addition to DIMACS. For example, the ``PhaseOracle`` can actually be configured using arbitrary Boolean logical expressions, as demonstrated below."
msgstr "Qiskit'in ``Grover``ı, DIMACS'nin yanı sıra başka yöntemlerle oluşturulan bir ``Oracle`` üzerinde de Kuantum Arama gerçekleştirilmesinde kullanılabilir. Örneğin, aşağıda gösterildiği gibi, ``PhaseOracle`` aslında isteğe bağlı Boole mantıksal ifadeler kullanılarak yapılandırılabilir."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:263
msgid "In the example above, the input Boolean logical expression ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` should be quite self-explanatory, where ``^``, ``~``, and ``&`` represent the Boolean logical XOR, NOT, and AND operators, respectively. It should be quite easy to figure out the satisfying solution by examining its parts: ``w ^ x`` calls for ``w`` and ``x`` taking different values; ``~(y ^ z)`` requires ``y`` and ``z`` be the same; ``x & y & z`` dictates all three to be ``True``. Putting these together, we get the satisfying solution ``(w, x, y, z) = (False, True, True, True)``, which our ``Grover``\\ ’s result agrees with."
msgstr "Yukarıdaki örnekte, ``^``, ``~``, and ``&`` sembollerinin sırasıyla XOR, NOT, ve AND operatörlerini temsil ettiği ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` Boole mantıksal ifade girdisinin kendisi aslında gayet açıklayıcıdır. Bölümlerini tek tek inceleyerek tatmin edici çözümü anlamak oldukça basittir: ``w ^ x`` ifadesi ``w`` ve ``x``in farklı değerler almasını gerektirir; ``~(y ^ z)`` ifadesi ``y`` ve ``z``nin aynı olmasını gerektirir; ``x & y & z`` ifadesi üçünün de ``True`` olduğuna işaret eder. Bunları birleştirirsek, ``Grover``ımızın sonucuyla örtüşen ``(w, x, y, z) = (False, True, True, True)`` tatmin edici çözümünü elde etmiş oluyoruz."

