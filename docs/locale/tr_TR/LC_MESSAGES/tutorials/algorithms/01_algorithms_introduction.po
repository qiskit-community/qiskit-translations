msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-05 21:02+0000\n"
"PO-Revision-Date: 2022-01-05 22:36\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/01_algorithms_introduction.po\n"
"X-Crowdin-File-ID: 9444\n"
"Language: tr_TR\n"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:10
msgid "This page was generated from `tutorials/algorithms/01_algorithms_introduction.ipynb`__."
msgstr "Bu sayfa `tutorials/algorithms/01_algorithms_introduction.ipynb`__ sayfasından oluşturulmuştur."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:9
msgid "An Introduction to Algorithms in Qiskit"
msgstr "Qiskit'te Algoritmalara Giriş"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:11
msgid "This is an introduction to algorithms in Qiskit and provides a high-level overview to help understand the various aspects of the functionality to get started. Other tutorials will provide more in-depth material, on given algorithms, and ways to use them etc."
msgstr "Bu, Qiskit'teki algoritmalara giriş niteliğindedir ve başlarken işlevselliğin çeşitli yönlerini anlamanıza yardımcı olmak için üst düzey bir genel bakış sağlar. Diğer tutoriallar, verilen algoritmalar üzerinde daha derinlemesine materyal ve bunları kullanma yöntemlerini vb. sağlayacaktır."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:23
msgid "How is the algorithm library structured?"
msgstr "Algoritma kütüphanesi nasıl yapılandırılmıştır?"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:25
msgid "Qiskit provides a number of `Algorithms <https://qiskit.org/documentation/apidoc/algorithms.html>`__ and they are grouped by category according to the task they can perform. For instance ``Minimum Eigensolvers`` to find the smallest eigen value of an operator, for example ground state energy of a chemistry Hamiltonian or a solution to an optimization problem when expressed as an Ising Hamiltonian. There are ``Linear Solvers`` for linear systems of equations problems and ``Amplitude Estimators`` for value estimation that can be used say in financial applications. The full set of categories can be seen in the Algorithms documentation link above."
msgstr "Qiskit bir çok `Algorithms <https://qiskit.org/documentation/apidoc/algorithms.html>` sunar ve bu algoritmalar, gerçekleştirebilecekleri görevlere göre belirlenen kategorilere gruplandırılırlar. Örneğin, bir operatörün en küçük öz değerini bulmak için ``Minimum Eigensolvers``, örneğin bir kimyada Moleküler Hamilton'un temel durumundaki enerjisi ya da Ising Hamilton olarak ifade edildiğinde, bir optimizasyon problemi çözümüdür. Problemlerin denklemlerinin doğrusal sistemleri için ``Linear Solvers`` ve finansal uygulamalarda kullanılabilecek değer tahmini için ``Amplitude Estimators`` vardır. Kategorilerin tamamı yukarıdaki Algoritmalar dokümantasyon bağlantısında görülebilir."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:28
msgid "Algorithms are configurable and often part of the configuration will be in the form of smaller building blocks, of which different instances of the building block type can be given. For instance with ``VQE``, the Variational Quantum Eigensolver, it takes a trial wavefunction, in the form of a ``QuantumCircuit`` and a classical optimizer among other things."
msgstr "Algoritmalar yapılandırılabilir ve genellikle yapılandırmanın bir parçası, yapı taşı türünün farklı örneklerinin verilebileceği daha küçük yapı taşları biçiminde olacaktır. Örneğin, \"VQE\", Variational Quantum Eigensolver ile, diğer şeylerin yanı sıra \"QuantumCircuit\" ve klasik bir optimize edici biçiminde bir deneme dalga fonksiyonu alır."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:30
msgid "Let’s take a look at an example to construct a VQE instance. Here ``TwoLocal`` is the variational form (trial wavefunction), a parameterized circuit which can be varied, and ``SLSQP`` a classical optimizer. These are created as separate instances and passed to VQE when it is constructed. Trying, for example, a different classical optimizer, or variational form is simply a case of creating an instance of the one you want and passing it into VQE."
msgstr "Bir VQE örneği oluşturmak için bir örneğe göz atalım. Burada ``TwoLocal`` değişimsel formdur (deneme dalga fonksiyonu), değiştirilebilen parametreli bir devre ve ``SLSQP`` klasik bir eniyileştiricidir. Bunlar ayrı örnekler olarak oluşturulur ve yapılandırıldığında VQE'ye aktarılır. Örneğin, farklı bir klasik eniyileştiriciyi veya değişimsel formu denemek, basitçe istediğiniz bir örneğini oluşturup bunu VQE'ye aktarmanın bir örneğidir."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:58
msgid "Let’s draw the ansatz so we can see it’s a QuantumCircuit where θ[0] through θ[7] will be the parameters that are varied as VQE optimizer finds the minimum eigenvalue. We’ll come back to the parameters later in a working example below."
msgstr "Ansatz'ı çizelim, böylece onun bir QuantumCircuit olduğunu görebiliriz, burada θ[0]'dan θ[7]'ye kadar olan parametreler, VQE eniyileştirici minimum özdeğeri buldukça değişen parametreler olacaktır. Aşağıdaki çalışma örneğinde parametrelere daha sonra geri döneceğiz."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:132
msgid "But more is needed before we can run the algorithm so let’s get to that next."
msgstr "Ancak algoritmayı çalıştırmadan önce daha fazlasına ihtiyaç var, o yüzden bir sonraki aşamaya geçelim."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:144
msgid "How to run an algorithm?"
msgstr "Bir algoritma nasıl çalıştırılır?"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:146
msgid "In order to run an algorithm we need to have backend, a simulator or real device, on which the circuits that comprise the algorithm can be run. So for example we can use the ``aer_simulator_statevector`` from the Aer provider."
msgstr "Bir algoritma çalıştırmak için, algoritmayı oluşturan devrelerin çalıştırılabileceği bir backende, bir simülatöre veya gerçek bir cihaza ihtiyacımız var. Yani örneğin BasicAer sağlayıcısından ``statevector_simulator`` kullanabiliriz."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:169
msgid "Now a backend on its own does not have information on how you might want to run the circuits etc. For example how many shots, do you want a noise model, even options around transpiling the circuits. For this Qiskit Terra has a `QuantumInstance <https://qiskit.org/documentation/stubs/qiskit.utils.QuantumInstance.html>`__ which is provided both the backend as well as various settings around the circuit processing and execution so for instance:"
msgstr "Artık bir backend, devreleri ve benzerlerini nasıl çalıştırmak isteyebileceğinizle ilgili bilgiye sahip değildir. Örneğin, ölçüm sayısı, bir gürültü modeli, hatta devrelerin aktarılmasıyla ilgili seçenekler mi istiyorsunuz? Bunun için Qiskit Aqua, hem backend hem de devre işleme ve yürütme etrafında çeşitli ayarlar sağlanan bir ``QuantumInstance <https://qiskit.org/documentation/stubs/qiskit.aqua.QuantumInstance.html>`__ 'a sahiptir. Örnek Olarak:"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:193
msgid "Note: if you provide the backend directly then internally a QuantumInstance will be created from it, with default settings, so at all times the algorithms are working through a QuantumInstance."
msgstr "Not: backendi doğrudan sağlarsanız, varsayılan ayarlarla dahili olarak bir QuantumInstance oluşturulacaktır, bu nedenle algoritmalar her zaman bir QuantumInstance üzerinden çalışır."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:195
msgid "So now we would be able to call the `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html#qiskit.algorithms.VQE.compute_minimum_eigenvalue>`__ method. The latter is the interface of choice for the application modules, such as Nature and Optimization, in order that they can work interchangeably with any algorithm within the specific category."
msgstr "Artık `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html#qiskit.algorithms.VQE.compute_minimum_eigenvalue>`__ yöntemini kullanabileceğiz. İkincisi, belirli kategorideki herhangi bir algoritma ile birbirinin yerine geçebilmeleri amacıyla Nature ve Optimizasyon gibi uygulama modülleri için tercih edilmekte olan arayüzdür."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:207
msgid "A complete working example"
msgstr "Tam çalışan bir örnek"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:209
msgid "Let’s put what we have learned from above together and create a complete working example. VQE will find the minimum eigenvalue, i.e. minimum energy value of a Hamiltonian operator and hence we need such an operator for VQE to work with. Such an operator is given below. This was originally created by the Nature application module as the Hamiltonian for an H2 molecule at 0.735A interatomic distance. It’s a sum of Pauli terms as below, but for now I am not going to say anything further about it since the goal is to run the algorithm, but further information on operators can be found in other tutorials."
msgstr "Yukarıdan öğrendiklerimizi bir araya getirelim ve eksiksiz bir çalışma örneği oluşturalım. VQE minimum özdeğeri yani bir Hamilitonian operatörünün minimum enerji değerini bulacaktır ve dolayısıyla VQE'nin birlikte çalışması için böyle bir operatöre ihtiyacımız vardır. Böyle bir operatör aşağıda verilmiştir. Bu, başlangıçta Kimya uygulama modülü tarafından 0.735A atomlararası mesafede bir H2 molekülü için Hamiltonian olarak oluşturulmuştur. Bu Pauli terimlerinin toplamı aşağıdaki gibidir, fakat şimdilik bu konuda daha fazla bir şey söylemeyeceğim çünkü asıl amaç algoritmayı çalıştırmaktır, ancak operatörler hakkında daha fazla bilgiyi diğer eğitimlerde bulabilirsiniz."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:237
msgid "So let’s build a VQE instance passing a backend using a QuantumInstance, to the constructor. Now VQE does have setters so the QuantumInstance can also be passed later."
msgstr "Öyleyse, haydi bir QuantumInstance kullanarak yapılandırıcıya bir arka uç ileten bir VQE örneği oluşturalım. Şimdi VQE'nin ayarlayıcıları var, böylece QuantumInstance daha sonra da geçirilebilir."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:239
msgid "Note: In order that you can run this notebook and see the exact same output the random number generator used throughout algorithms in algorithms_globals, as well as the transpiler and simulator, via the QuantumInstance, are seeded. You do not have to do this but if want to be able to reproduce the exact same outcome each time then this is how it’s done."
msgstr "Not: Bu defteri çalıştırıp aynı çıktıyı görebilmeniz için, Aqua'da aqua_globals'da kullanılan rasgele sayı üretecinin yanı sıra, aktarıcı ve simülatör, QuantumInstance aracılığıyla başlatılır. Bunu yapmak zorunda değilsiniz, ancak her seferinde aynı sonucu yeniden üretebilmek istiyorsanız, o zaman böyle yapılır."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:241
msgid "So let’s run VQE and print the result object it returns."
msgstr "Öyleyse VQE'yi çalıştıralım ve döndürdüğü sonuç nesnesini yazdıralım."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:345
msgid "From the above result we can see it took the optimizer ``65`` evaluations of parameter values until it found the minimum eigenvalue of ``-1.85727`` which is the electronic ground state energy of the given H2 molecule. The optimal parameters of the ansatz can also be seen which are the values that were in the ansatz at the minimum value."
msgstr "Yukarıdaki sonuçtan, verilen H2 molekülünün elektronik temel durum enerjisi olan ``-1.85727``nin minimum özdeğerini bulana kadar optimize edicinin parametre değerlerinin ``65`` değerlendirmelerini aldığını görebiliriz. Minimum değerde ansatz'da bulunan değerler olan ansatz'ın optimal parametreleri de görülebilir."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:357
msgid "Using VQE setting QuantumInstance after Construction"
msgstr "Yapım Sonrası QuantumInstance ayarını VQE ile kullanmak"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:359
msgid "To close off let’s also create a VQE instance without supplying the QuantumInstance. We later set it as long as by the time VQE runs it has a QuantumInstance to use."
msgstr "Kapatmak için, QuantumInstance'ı sağlamadan bir VQE örneği de oluşturalım. Daha sonra, VQE çalıştığında kullanmak için bir QuantumInstance'ı olduğu sürece ayarladık."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:463
msgid "As the identical seeding was used as the prior example the result can be seen to be the same."
msgstr "Önceki örnek olarak özdeş tohumlama kullanıldığından, aynı sonuç görülebilir."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:474
msgid "This concludes this introduction to algorithms in Qiskit. Please check out the other algorithm tutorials in this series for both broader as well as more in depth coverage of the algorithms."
msgstr "Bu, Qiskit'teki algoritmalara girişi tamamlıyor. Algoritmaların hem daha geniş hem de derinlemesine kapsamı için lütfen bu serideki diğer algoritma eğitsellerine göz atın."

