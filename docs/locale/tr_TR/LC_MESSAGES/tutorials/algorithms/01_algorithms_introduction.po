msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-02 21:04+0000\n"
"PO-Revision-Date: 2023-03-02 21:46\n"
"Last-Translator: \n"
"Language: tr\n"
"Language-Team: Turkish\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/01_algorithms_introduction.po\n"
"X-Crowdin-File-ID: 9444\n"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:10
msgid "This page was generated from `tutorials/algorithms/01_algorithms_introduction.ipynb`__."
msgstr "Bu sayfa `tutorials/algorithms/01_algorithms_introduction.ipynb`__ sayfasından oluşturulmuştur."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:9
msgid "An Introduction to Algorithms in Qiskit"
msgstr "Qiskit'te Algoritmalara Giriş"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:11
msgid "This is an introduction to algorithms in Qiskit and provides a high-level overview to help understand the various aspects of the functionality to get started. Other tutorials will provide more in-depth material, on given algorithms, and ways to use them etc."
msgstr "Bu, Qiskit'teki algoritmalara giriş niteliğindedir ve başlarken işlevselliğin çeşitli yönlerini anlamanıza yardımcı olmak için üst düzey bir genel bakış sağlar. Diğer tutoriallar, verilen algoritmalar üzerinde daha derinlemesine materyal ve bunları kullanma yöntemlerini vb. sağlayacaktır."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:23
msgid "How is the algorithm library structured?"
msgstr "Algoritma kütüphanesi nasıl yapılandırılmıştır?"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:25
msgid "Qiskit provides a number of `Algorithms <https://qiskit.org/documentation/apidoc/algorithms.html>`__ and they are grouped by category according to the task they can perform. For instance ``Minimum Eigensolvers`` to find the smallest eigen value of an operator, for example ground state energy of a chemistry Hamiltonian or a solution to an optimization problem when expressed as an Ising Hamiltonian. There are ``Time Evolvers`` for the time evolution of quantum systems and ``Amplitude Estimators`` for value estimation that can be used say in financial applications. The full set of categories can be seen in the Algorithms documentation link above."
msgstr "Qiskit birçok `Algorithma <https://qiskit.org/documentation/apidoc/algorithms.html>`__ sunar ve bu algoritmalar, gerçekleştirebilecekleri görevlere göre belirlenen kategorilerle gruplandırılırlar. Örneğin, bir operatörün en küçük öz değerini bulmak için ``Minimum Eigensolvers``, örneğin bir kimya Hamiltonyen'inin temel durumundaki enerjisi ya da Ising Hamiltonyen olarak ifade edildiğinde, bir optimizasyon problemi çözümüdür. Kuantum sistemlerinin zaman evrimi için ``Time Evolvers`` ve finansal uygulamalarda kullanılabilecek değer tahmini için ``Amplitude Estimators`` vardır. Kategorilerin tamamı yukarıdaki Algoritmalar dokümantasyon bağlantısında görülebilir."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:28
msgid "Algorithms are configurable and often part of the configuration will be in the form of smaller building blocks, of which different instances of the building block type can be given. For instance with ``VQE``, the Variational Quantum Eigensolver, it takes a trial wavefunction, in the form of a ``QuantumCircuit`` and a classical optimizer among other things."
msgstr "Algoritmalar yapılandırılabilir ve genellikle yapılandırmanın bir parçası, yapı taşı türünün farklı örneklerinin verilebileceği daha küçük yapı taşları biçiminde olacaktır. Örneğin, \"VQE\", Variational Quantum Eigensolver ile, diğer şeylerin yanı sıra \"QuantumCircuit\" ve klasik bir optimize edici biçiminde bir deneme dalga fonksiyonu alır."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:30
msgid "Let’s take a look at an example to construct a VQE instance. Here ``TwoLocal`` is the variational form (trial wavefunction), a parameterized circuit which can be varied, and ``SLSQP`` a classical optimizer. These are created as separate instances and passed to VQE when it is constructed. Trying, for example, a different classical optimizer, or variational form is simply a case of creating an instance of the one you want and passing it into VQE."
msgstr "Bir VQE örneği oluşturmak için bir örneğe göz atalım. Burada ``TwoLocal`` değişimsel formdur (deneme dalga fonksiyonu), değiştirilebilen parametreli bir devre ve ``SLSQP`` klasik bir eniyileştiricidir. Bunlar ayrı örnekler olarak oluşturulur ve yapılandırıldığında VQE'ye aktarılır. Örneğin, farklı bir klasik eniyileştiriciyi veya değişimsel formu denemek, basitçe istediğiniz bir örneğini oluşturup bunu VQE'ye aktarmanın bir örneğidir."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:56
msgid "Let’s draw the ansatz so we can see it’s a ``QuantumCircuit`` where θ[0] through θ[7] will be the parameters that are varied as VQE optimizer finds the minimum eigenvalue. We’ll come back to the parameters later in a working example below."
msgstr "Ansatz'ı çizelim, böylece onun bir ``QuantumCircuit`` olduğunu görebiliriz, burada θ[0]'dan θ[7]'ye kadar olan parametreler, VQE eniyileştirici minimum özdeğeri buldukça değişen parametreler olacaktır. Aşağıdaki çalışma örneğinde parametrelere daha sonra geri döneceğiz."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:86
msgid "But more is needed before we can run the algorithm so let’s get to that next."
msgstr "Ancak algoritmayı çalıştırmadan önce daha fazlasına ihtiyaç var, o yüzden bir sonraki aşamaya geçelim."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:98
msgid "How to run an algorithm?"
msgstr "Bir algoritma nasıl çalıştırılır?"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:100
msgid "Algorithms rely on the primitives to evaluate expectation values or sample circuits. The primitives can be based on a simulator or real device and can be used interchangeably in the algorithms, as they all implement the same interface."
msgstr "Algoritmalar, beklenti değerlerini veya örnek devreleri değerlendirmek için temel öğelere güvenir. Temel öğeler, bir simülatöre veya gerçek bir cihaza dayalı olabilir ve hepsi aynı arayüzü uyguladığı için algoritmalarda birbirinin yerine kullanılabilir."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:102
msgid "In the VQE, we have to evaluate expectation values, so for example we can use the ``qiskit.primitives.Estimator`` which is shipped with the default Qiskit Terra installation."
msgstr "VQE'de beklenti değerlerini değerlendirmemiz gerekir, örneğin varsayılan Qiskit Terra kurulumuyla birlikte gelen ``qiskit.primitives.Estimator``'ı kullanabiliriz."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:125
msgid "This estimator uses an exact, statevector simulation to evaluate the expectation values. We can also use a shot-based and noisy simulators or real backends instead. For more information of the simulators you can check out `Qiskit Aer <https://qiskit.org/documentation/apidoc/aer_primitives.html>`__ and for the actual hardware `Qiskit IBM Runtime <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/>`__."
msgstr "Bu tahminci, beklenti değerlerini değerlendirmek için tam bir durum vektörü simülasyonu kullanır. Bunun yerine deneme tabanlı ve gürültülü simülatörler veya gerçek arka uçlar da kullanabiliriz. Simülatörler hakkında daha fazla bilgi için `Qiskit Aer <https://qiskit.org/documentation/apidoc/aer_primitives.html>`__ ve gerçek donanım için `Qiskit IBM Runtime <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/>`__'a göz atabilirsiniz."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:127
msgid "With all the ingredients ready, we can now instantiate the VQE:"
msgstr "Tüm bileşenler hazır olduğunda, artık VQE'yi başlatabiliriz:"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:150
msgid "Now we can call the `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.VQE.compute_minimum_eigenvalue.html#qiskit.algorithms.minimum_eigensolvers.VQE.compute_minimum_eigenvalue>`__ method. The latter is the interface of choice for the application modules, such as Nature and Optimization, in order that they can work interchangeably with any algorithm within the specific category."
msgstr "Artık `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.VQE.compute_minimum_eigenvalue.html#qiskit.algorithms.minimum_eigensolvers.VQE.compute_minimum_eigenvalue>`__ metodunu çağırabiliriz. İkincisi ise, belirli kategorideki herhangi bir algoritma ile birbirinin yerine geçebilmeleri amacıyla Nature ve Optimizasyon gibi uygulama modülleri için tercih edilmekte olan arayüzdür."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:162
msgid "A complete working example"
msgstr "Tam çalışan bir örnek"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:164
msgid "Let’s put what we have learned from above together and create a complete working example. VQE will find the minimum eigenvalue, i.e. minimum energy value of a Hamiltonian operator and hence we need such an operator for VQE to work with. Such an operator is given below. This was originally created by the Nature application module as the Hamiltonian for an H2 molecule at 0.735A interatomic distance. It’s a sum of Pauli terms as below, but for now I am not going to say anything further about it since the goal is to run the algorithm, but further information on operators can be found in other tutorials."
msgstr "Yukarıdan öğrendiklerimizi bir araya getirelim ve eksiksiz bir çalışma örneği oluşturalım. VQE minimum özdeğeri yani bir Hamilitonian operatörünün minimum enerji değerini bulacaktır ve dolayısıyla VQE'nin birlikte çalışması için böyle bir operatöre ihtiyacımız vardır. Böyle bir operatör aşağıda verilmiştir. Bu, başlangıçta Kimya uygulama modülü tarafından 0.735A atomlararası mesafede bir H2 molekülü için Hamiltonian olarak oluşturulmuştur. Bu Pauli terimlerinin toplamı aşağıdaki gibidir, fakat şimdilik bu konuda daha fazla bir şey söylemeyeceğim çünkü asıl amaç algoritmayı çalıştırmaktır, ancak operatörler hakkında daha fazla bilgiyi diğer eğitimlerde bulabilirsiniz."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:194
msgid "So let’s run VQE and print the result object it returns."
msgstr "Öyleyse VQE'yi çalıştıralım ve döndürdüğü sonuç nesnesini yazdıralım."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:291
msgid "From the above result we can see the number of cost function (=energy) evaluations the optimizer took until it found the minimum eigenvalue of :math:`\\approx -1.85727` which is the electronic ground state energy of the given H2 molecule. The optimal parameters of the ansatz can also be seen which are the values that were in the ansatz at the minimum value."
msgstr "Yukarıdaki sonuçtan, verilen H2 molekülünün elektronik temel durum enerjisi olan :math:`\\approx -1.85727`nin minimum özdeğerini bulana kadar optimize edicinin maliyet fonksiyonu (=enerji) değerlendirmeleri sayısını görebiliriz. Minimum değerde ansatz'da bulunan değerler olan ansatz'ın optimal parametreleri de görülebilir."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:303
msgid "Updating the primitive inside VQE"
msgstr "VQE içindeki temel öğeyi güncelleme"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:305
msgid "To close off let’s also change the estimator primitive inside the a VQE. Maybe you’re satisfied with the simulation results and now want to use a shot-based simulator, or run on hardware!"
msgstr "Konuyu sonlandırmadan önce, bir VQE içindeki tahminci temel öğesini de değiştirelim. Belki de simülasyon sonuçlarından memnunsunuz ve şimdi deneme tabanlı bir simülatör kullanmak veya donanım üzerinde çalışmak istiyorsunuz!"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:307
msgid "In this example we’re changing to a shot-based estimator, still using Qiskit Terra’s reference primitive. However you could replace the primitive by e.g. Qiskit Aer’s estimator (``qiskit_aer.primitives.Estimator``) or even a real backend (``qiskit_ibm_runtime.Estimator``)."
msgstr "Bu örnekte, hala Qiskit Terra'nın referans temel öğesini kullanan, deneme tabanlı bir tahminciye geçiyoruz. Bununla birlikte, temel öğeyi ör. Qiskit Aer'in tahmincisi (``qiskit_aer.primitives.Estimator``) ile veya hatta gerçek bir arka uç (``qiskit_ibm_runtime.Estimator``) ile değiştirebilirsiniz."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:309
msgid "For noisy loss functions, the SPSA optimizer typically performs well, so we also update the optimizer. See also the `noisy VQE tutorial <https://qiskit.org/documentation/tutorials/algorithms/03_vqe_simulation_with_noise.html>`__ for more details on shot-based and noisy simulations."
msgstr "Gürültülü kayıp fonksiyonları için, SPSA optimize edicisi genellikle iyi performans gösterir, bu nedenle optimize ediciyi de güncelleriz. Deneme tabanlı ve gürültülü simülasyonlar hakkında daha fazla ayrıntı için ayrıca `gürültülü VQE eğitimine <https://qiskit.org/documentation/tutorials/algorithms/03_vqe_simulation_with_noise.html>` bakın."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:412
msgid "Note: We do not fix the random seed in the simulators here, so re-running gives slightly varying results."
msgstr "Not: Burada simülatörlerdeki rastgele başlangıç değerini düzeltmiyoruz, bu nedenle yeniden çalıştırma biraz farklı sonuçlar veriyor."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:423
msgid "This concludes this introduction to algorithms in Qiskit. Please check out the other algorithm tutorials in this series for both broader as well as more in depth coverage of the algorithms."
msgstr "Bu, Qiskit'teki algoritmalara girişi tamamlıyor. Algoritmaların hem daha geniş hem de derinlemesine kapsamı için lütfen bu serideki diğer algoritma eğitsellerine göz atın."

