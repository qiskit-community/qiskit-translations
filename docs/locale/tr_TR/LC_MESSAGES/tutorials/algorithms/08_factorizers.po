msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-05 21:02+0000\n"
"PO-Revision-Date: 2022-01-05 22:38\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/08_factorizers.po\n"
"X-Crowdin-File-ID: 9508\n"
"Language: tr_TR\n"

#: ../../tutorials/algorithms/08_factorizers.ipynb:10
msgid "This page was generated from `tutorials/algorithms/08_factorizers.ipynb`__."
msgstr "Bu sayfa `tutorials/algorithms/07_grover.ipynb`__ sayfasından oluşturulmuştur."

#: ../../tutorials/algorithms/08_factorizers.ipynb:9
msgid "Shor’s algorithms"
msgstr "Shor algoritması"

#: ../../tutorials/algorithms/08_factorizers.ipynb:11
msgid "Qiskit has an implementation of `Shor’s algorithm <https://qiskit.org/textbook/ch-algorithms/shor.html>`__."
msgstr "Qiskit, `Shor’s algorithm <https://qiskit.org/textbook/ch-algorithms/shor.html>`__ uygulamasına sahiptir."

#: ../../tutorials/algorithms/08_factorizers.ipynb:13
msgid "The preceding reference has detailed explanations and build-out of circuits whereas this notebook has examples with the pre-built algorithms in Qiskit that you can use for experimentation and education purposes."
msgstr "Önceki referans ayrıntılı açıklama ve deneyin oluşturulmasına sahipir, ancak bu not defteri Qiskit'te önceden oluşturulmuş deney ve eğitim için kullanabileceğiniz algoritmalarla ilgili örneklere sahiptir."

#: ../../tutorials/algorithms/08_factorizers.ipynb:39
msgid "Shor’s Factoring algorithm"
msgstr "Shor'un Asal Çarpanlara Ayırma algoritması"

#: ../../tutorials/algorithms/08_factorizers.ipynb:41
msgid "`Shor’s Factoring algorithm <https://qiskit.org/documentation/stubs/qiskit.algorithms.Shor.html>`__ is one of the most well-known quantum algorithms and finds the prime factors for input integer :math:`N` in polynomial time. The algorithm implementation in Qiskit is simply provided a target integer to be factored and run, as follows:"
msgstr "`Shor’s Factoring algorithm <https://qiskit.org/documentation/stubs/qiskit.algorithms.Shor.html>`__ en iyi bilinen kuantum algoritmalarından biridir ve girdi olan :math:`N` tamsayısı için polinom zamanında asal çarpanlarını bulur. Qiskit'teki algoritma uygulaması, çarpanlara ayrılacak ve çalıştırılacak bir hedef tamsayı aşağıdaki gibi sağlanır:"

#: ../../tutorials/algorithms/08_factorizers.ipynb:90
msgid "Note: this implementation of Shor’s algorithm uses :math:`4n + 2` qubits, where :math:`n` is the number of bits representing the integer in binary. So in practice, for now, this implementation is restricted to factorizing small integers. Given the above value of N we compute :math:`4n +2` below and confirm the size from the actual circuit."
msgstr "Not: :math:`n` ikili tamsayıyı temsil eden bit olmak üzere, Shor algoritması :math:`4n + 2 kübitlerini kullanarak uygulanmaktadır. Pratikte, şimdilik bu uygulama küçük tamsayıları çarpanlarına ayırmakla sınırlıdır. Yukarıdaki N değeri için, aşağıdaki :math:`4n +2` değerini hesaplarız ve gerçek devreden boyutunu onaylarız."

