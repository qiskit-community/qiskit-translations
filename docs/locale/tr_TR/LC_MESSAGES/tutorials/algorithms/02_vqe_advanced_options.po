msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-26 23:06+0000\n"
"PO-Revision-Date: 2023-01-27 15:43\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/02_vqe_advanced_options.po\n"
"X-Crowdin-File-ID: 9931\n"
"Language: tr_TR\n"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:10
msgid "This page was generated from `tutorials/algorithms/02_vqe_advanced_options.ipynb`__."
msgstr "Bu sayfa `tutorials/algorithms/02_vqe_advanced_options.ipynb`__ adresinden oluşturulmuştur."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:9
msgid "Advanced VQE Options"
msgstr "Gelişmiş VQE Seçenekleri"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:11
msgid "In the first algorithms tutorial, you learned how to set up a basic `VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.VQE.html>`__ algorithm. Now, you will see how to provide more advanced configuration parameters to explore the full range of capabilities of Qiskit’s variational algorithms: `VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.VQE.html>`__, `QAOA <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.QAOA.html>`__ and `VQD <https://qiskit.org/documentation/stubs/qiskit.algorithms.eigensolvers.VQD.html>`__ among others. In particular, this tutorial will cover how to set up a ``callback`` to monitor convergence and the use of custom ``initial point``\\ s and ``gradient``\\ s."
msgstr ""

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:24
msgid "Callback"
msgstr "Geri çağırma"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:35
msgid "Callback methods can be used to monitor optimization progress as the algorithm runs and converges to the minimum. The callback is invoked for each functional evaluation by the optimizer and provides the current optimizer value, evaluation count, current optimizer parameters etc. Note that, depending on the specific optimizer this may not be each iteration (step) of the optimizer, so for example if the optimizer is calling the cost function to compute a finite difference based gradient this will be visible via the callback."
msgstr "Geri çağırma metodları, algoritma çalışırken ve minimuma yaklaştıkça optimizasyon ilerlemesini izlemek için kullanılabilir. Geri çağırma, optimize edici tarafından her işlevsel değerlendirme için çağrılır ve mevcut optimize edici değerini, değerlendirme sayısını, mevcut optimize edici parametreleri vb. sağlar. Belirli optimize ediciye bağlı olarak bunun optimize edicinin her yinelemesi (adım) olmayabileceğini unutmayın; optimize edici, sonlu fark tabanlı bir gradyanı hesaplamak için maliyet işlevini çağırıyorsa, bu, geri çağırma aracılığıyla görünür olacaktır."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:38
msgid "This section demonstrates how to leverage callbacks in ``VQE`` to plot the convergence path to the ground state energy with a selected set of optimizers."
msgstr "Bu bölüm, seçili optimize edici seti ile temel durum enerjisine yakınsama yolunu çizmek için ``VQE``de geri çağırmalardan nasıl yararlanılacağını gösteriyor."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:49
msgid "First, you need a qubit operator for VQE. For this example, you can use the same operator as used in the algorithms introduction, which was originally computed by Qiskit Nature for an H2 molecule."
msgstr "İlk önce VQE için bir kübit operatörüne ihtiyacınız var. Bu örnekte, bir Hidrojen molekülü için orijinal olarak Qiskit Nature tarafından hesaplanan, algoritmalara girişte kullanılan operatörün aynısını kullanabilirsiniz."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:80
msgid "The next step is to instantiate the ``Estimator`` of choice for the evaluation of expectation values within ``VQE``. For simplicity, you can select the ``qiskit.primitives.Estimator`` shipped with the default Qiskit Terra installation."
msgstr "Bir sonraki adım, ``VQE`` içindeki beklenti değerlerinin değerlendirilmesi için tercih edilen ``Estimator``'u başlatmaktır. Basit olması için, varsayılan Qiskit Terra kurulumuyla birlikte gelen ``qiskit.primitives.Estimator``'u seçebilirsiniz."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:103
msgid "You are now ready to compare a set of optimizers through the ``VQE`` callback. The minimum energy of the H2 Hamiltonian can be found quite easily, so the maximum number of iterations (``maxiter``) does not have to be very large. You can once again use ``TwoLocal`` as the selected trial wavefunction (i.e. ansatz)."
msgstr "Artık ``VQE`` geri çağırma yoluyla bir dizi optimize ediciyi karşılaştırmaya hazırsınız. H2 Hamiltoniyenin minimum enerjisi oldukça kolay bir şekilde bulunabilir, \n"
"dolayısıyla maksimum iterasyon sayısının (``maxiter``) çok büyük olması gerekmez. Seçilen deneme dalga fonksiyonu (yani ansatz) olarak bir kez daha ``TwoLocal`` kullanabilirsiniz."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:176
msgid "Now, from the callback data you stored, you can plot the energy value at each objective function call each optimizer makes. An optimizer using a finite difference method for computing gradient has that characteristic step-like plot where for a number of evaluations it is computing the value for close by points to establish a gradient (the close by points having very similar values whose difference cannot be seen on the scale of the graph here)."
msgstr "Şimdi, depoladığınız geri arama verilerinden, her bir optimize edici yaptığı her amaç fonksiyondaki enerji değerini çizebilirsiniz. Gradyan hesaplaması için sonlu bir fark metodu kullanan optimize edicinin bir dizi değerlendirmeye uygun bir gradyan oluşturmak için yakın noktaların değerini hesapladığı çizime benzer karakteristik adımları vardır (farkı buradaki grafiğin ölçeğinde görülemeyen çok benzer değerlere sahip noktalara yakın)."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:213
msgid "Finally, since the above problem is still easily tractable classically, you can use ``NumPyMinimumEigensolver`` to compute a reference value for the solution."
msgstr "Son olarak, yukarıdaki problem klasik olarak kolayca izlenebilir olduğundan, çözüm için bir referans değeri hesaplamak üzere ``NumPyMinimumEigensolver`` kullanabilirsiniz."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:264
msgid "You can now plot the difference between the ``VQE`` solution and this exact reference value as the algorithm converges towards the minimum energy."
msgstr "Algoritma minimum enerjiye doğru yaklaşırken artık ``VQE`` çözümü ile bu tam referans değeri arasındaki farkı çizebilirsiniz."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:305
msgid "Gradients"
msgstr "Gradyanlar"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:307
msgid "In Qiskit’s variational algorithms, if the provided optimizer uses a gradient-based technique, the default gradient method will be finite differences. However, these classes include an option to pass custom gradients via the ``gradient`` parameter, which can be any of the provided methods within Qiskit’s `gradient <https://qiskit.org/documentation/stubs/qiskit.algorithms.gradients.html>`__ framework, which fully supports the use of primitives. This section shows how to use custom gradients in the VQE workflow."
msgstr "Qiskit'in değişimsel algoritmalarında, sağlanan optimize edici gradyan tabanlı bir teknik kullanıyorsa, varsayılan gradyan metodu sonlu farklar olacaktır. Ancak bu sınıflar, temel öğelerin kullanımını tamamen destekleyen Qiskit'in `gradyan <https://qiskit.org/documentation/stubs/qiskit.algorithms.gradients.html>`__ çerçevesi içindeki sağlanan yöntemlerden herhangi biri olabilen ``gradient`` parametresi aracılığıyla özel gradyan geçirme seçeneği içerir. Bu bölüm, VQE iş akışında özel gradyanların nasıl kullanılacağını gösterir."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:310
msgid "The first step is to initialize both the corresponding primitive and primitive gradient:"
msgstr "İlk adım, karşılık gelen temel öğe ve temel öğe gradyanını başlatmaktır:"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:334
msgid "Now, you can inspect an SLSQP run using the ``FiniteDiffEstimatorGradient`` from above:"
msgstr "Artık yukarıdan ``FiniteDiffEstimatorGradient`` kullanarak bir SLSQP çalıştırmasını inceleyebilirsiniz:"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:422
msgid "Initial point"
msgstr "Başlangıç noktası"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:424
msgid "By default, the optimization begins at a random point within the bounds defined by the ansatz. The ``initial_point`` option allows to override this point with a custom list of values that match the number of ansatz parameters."
msgstr "Varsayılan olarak, optimizasyon ansatz tarafından tanımlanan sınırlar içinde rastgele bir noktada başlar. ``initial_point`` seçeneği, ansatz parametrelerinin sayısıyla eşleşen özel bir değerler listesiyle bu noktayı geçersiz kılmaya izin verir."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:426
msgid "You might wonder… *Why set a custom initial point?* Well, this option can come in handy if you have a guess for a reasonable starting point for the problem, or perhaps know information from a prior experiment."
msgstr "Merak edebilirsiniz... *Neden özel bir başlangıç noktası ayarladınız?* Sorun için makul bir başlangıç noktası tahmininiz varsa veya önceki bir deneyden bilginiz varsa bu seçenek kullanışlı olabilir."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:428
msgid "To demonstrate this feature, let’s look at the results from our previous VQE run:"
msgstr "Bu özelliği göstermek için, önceki VQE çalışmamızın sonuçlarına bakalım:"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:525
msgid "Now, you can take the ``optimal_point`` from the above result and use it as the ``initial_point`` for a follow-up computation."
msgstr "Şimdi, yukarıdaki sonuçtan ``optimal_point``'i alabilir ve takip eden hesaplama için ``initial_point`` olarak kullanabilirsiniz."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:527
msgid "**Note:** ``initial_point`` is now a keyword-only argument of the ``VQE`` class (i.e, it must be set following the ``keyword=value`` syntax)."
msgstr "**Not:** ``initial_point`` artık ``VQE`` sınıfının yalnızca anahtar kelime argümanıdır (yani, ``keyword=value`` sözdizimine göre ayarlanmalıdır)."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:676
msgid "By looking at the ``cost_function_evals`` you can notice how the initial point helped the algorithm converge faster (in just 1 iteration, as we already provided the optimal solution)."
msgstr "``cost_function_evals``'a bakarak, başlangıç noktasının algoritmanın daha hızlı yakınsama yapmasına nasıl yardımcı olduğunu fark edebilirsiniz (yalnızca 1 yinelemede en uygun çözümü zaten sağladığımız için)."

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:678
msgid "This can be particularly useful in cases where we have two closely related problems, and the solution to one problem can be used to guess the other’s. A good example might be plotting dissociation profiles in chemistry, where we change the inter-atomic distances of a molecule and compute its minimum eigenvalue for each distance. When the distance changes are small, we expect the solution to still be close to the prior one. Thus, a popular technique is to simply use the optimal point from one solution as the starting point for the next step. There also exist more complex techniques, where we can apply extrapolation to compute an initial position based on prior solution(s) rather than directly use the prior solution."
msgstr "Bu, özellikle birbiriyle yakından ilişkili iki problemimiz olduğu ve bir problemin çözümünün diğerini tahmin etmek için kullanılabildiği durumlarda yararlı olabilir. İyi bir örnek, bir molekülün atomlar arası mesafelerini değiştirdiğimiz ve her mesafe için minimum özdeğerini hesapladığımız kimyadaki ayrışma profillerini çizmek olabilir. Mesafe değişiklikleri küçük olduğunda, çözümün bir öncekine yakın olmasını bekleriz. Bu nedenle, popüler bir teknik, bir çözümdeki en uygun noktayı bir sonraki adım için başlangıç noktası olarak kullanmaktır. Doğrudan önceki çözümü kullanmak yerine önceki çözüm(ler)e dayalı bir başlangıç konumunu hesaplamak için ekstrapolasyon uygulayabileceğimiz daha karmaşık teknikler de vardır."

