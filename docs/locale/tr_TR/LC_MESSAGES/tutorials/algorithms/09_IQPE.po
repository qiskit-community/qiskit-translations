msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-08 16:50+0000\n"
"PO-Revision-Date: 2022-12-08 17:49\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/09_IQPE.po\n"
"X-Crowdin-File-ID: 9546\n"
"Language: tr_TR\n"

#: ../../tutorials/algorithms/09_IQPE.ipynb:10
msgid "This page was generated from `tutorials/algorithms/09_IQPE.ipynb`__."
msgstr "Bu sayfa, `tutorials/algorithms/09_IQPE.ipynb`__ adresinden oluşturulmuştur."

#: ../../tutorials/algorithms/09_IQPE.ipynb:9
msgid "Iterative Quantum Phase Estimation Algorithm"
msgstr "Yinelemeli Kuantum Faz Tahmini Algoritması"

#: ../../tutorials/algorithms/09_IQPE.ipynb:11
msgid "The goal of this tutorial is to understand how the Iterative Phase Estimation (IPE) algorithm works, why would we use the IPE algorithm instead of the QPE (Quantum Phase Estimation) algorithm and how to build it with Qiskit using the same circuit exploiting reset gate and the ``c_if`` method that allows to apply gates conditioned by the values stored in a classical register, resulting from previous measurements."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:13
msgid "**References**"
msgstr "**Kaynaklar**"

#: ../../tutorials/algorithms/09_IQPE.ipynb:15
msgid "`Section 2 of Lab 4: Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__"
msgstr "`Section 2 of Lab 4: Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__"

#: ../../tutorials/algorithms/09_IQPE.ipynb:17
msgid "`Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__"
msgstr "`Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__"

#: ../../tutorials/algorithms/09_IQPE.ipynb:42
msgid "Conditioned gates: the c_if method"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:53
msgid "Before starting the IPE algorithm, we will give a brief tutorial about the Qiskit conditional method, c_if, as it goes into building the IPE circuit."
msgstr "IPE algoritmasına başlamadan önce, IPE devresini kurarken Qiskit koşullu yöntemi c_if hakkında kısa bir eğitim vereceğiz."

#: ../../tutorials/algorithms/09_IQPE.ipynb:55
msgid "``c_if`` is a function (actually a method of the gate class) to perform conditioned operations based on the value stored previously in a classical register. With this feature you can apply gates after a measurement in the same circuit conditioned by the measurement outcome."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:57
msgid "For example, the following code will execute the :math:`X` gate if the value of the classical register is :math:`0`."
msgstr "Örneğin, klasik kaydın değeri :math:`0` ise, aşağıdaki kod :math:`X` kapısını çalıştıracaktır."

#: ../../tutorials/algorithms/09_IQPE.ipynb:93
msgid "We highlight that the method c_if expects as the first argument a whole classical register, not a single classical bit (or a list of classical bits), and as the second argument a value in decimal representation (a non-negative integer), not the value of a single bit, 0, or 1 (or a list/string of binary digits)."
msgstr "c_if yönteminin ilk argüman olarak tek bir klasik bit (veya bir klasik bit listesi) değil, bütün bir klasik kayıt beklediğini ve ikinci argüman olarak ondalık gösterimde bir değer (negatif olmayan bir tam sayı) beklediğini vurguluyoruz. tek bir bitin değeri, 0 veya 1 (veya ikili rakamlar listesi/dizisi)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:95
msgid "Let’s make another example. Consider that we want to perform a bit flip on the third qubit after the measurements in the following circuit, when the results of the measurement of :math:`q_0` and :math:`q_1` are both :math:`1`."
msgstr "Başka bir örnek yapalım. :math:`q_0` ve :math:`q_1` ölçüm sonuçlarının her ikisi de :math:`1` olduğunda, aşağıdaki devredeki ölçümlerden sonra üçüncü kübit üzerinde biraz çevirme yapmak istediğimizi düşünün."

#: ../../tutorials/algorithms/09_IQPE.ipynb:133
msgid "We want to apply the :math:`X` gate, only if both the results of the measurement of :math:`q_0` and :math:`q_1` are :math:`1`. We can do this using the c_if method, conditioning the application of :math:`X` depending on the value passed as argument to c_if."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:135
msgid "We will have to encode the value to pass to the c_if method such that it will check the values 011 and 111 (in binary representation), since it does not matter what :math:`q_2` is measured as."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:137
msgid "The 2 integer values in decimal representation:"
msgstr "Ondalık gösterimde 2 tam sayı değeri:"

#: ../../tutorials/algorithms/09_IQPE.ipynb:148
msgid "|0eda8b103b3b4299adc70a05d4f316d3|"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:150
msgid "0eda8b103b3b4299adc70a05d4f316d3"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:161
msgid "We can check the solutions using the bin() method in python (the prefix ``0b`` indicates the binary format)."
msgstr "Python'da bin() yöntemini kullanarak çözümleri kontrol edebiliriz ( ``0b`` öntakısı ikili formatı belirtir)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:210
msgid "So we have to apply :math:`X` to :math:`q_2` using c_if two times, one for each value corresponding to 011 and 111."
msgstr "Bu yüzden :math:`X` ile :math:`q_2` arasında c_if kullanarak 011 ve 111'e karşılık gelen her değer için bir tane olmak üzere iki kez uygulamamız gerekir."

#: ../../tutorials/algorithms/09_IQPE.ipynb:253
msgid "IPE"
msgstr "IPE"

#: ../../tutorials/algorithms/09_IQPE.ipynb:255
msgid "The motivation for using the IPE algorithm is that QPE algorithm works fine for short depth circuits but when the circuit starts to grow, it doesn’t work properly due to gate noise and decoherence times."
msgstr "IPE algoritmasını kullanma motivasyonu, QPE algoritmasının kısa derinlikli devreler için iyi çalışması, ancak devre büyümeye başladığında kapı gürültüsü ve eşevresizlik süreleri nedeniyle düzgün çalışmamasıdır."

#: ../../tutorials/algorithms/09_IQPE.ipynb:257
msgid "The detailed explanation of how the algorithm works can be found in `Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__. To understand QPE in depth, you can see also `Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__."
msgstr "Algoritmanın nasıl çalıştığına ilişkin ayrıntılı açıklama, `Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__. QPE'yi derinlemesine anlamak için, ayrıca `Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__ bölümünü de inceleyebilirsiniz."

#: ../../tutorials/algorithms/09_IQPE.ipynb:260
msgid "IPE example with a 1-qubit gate for :math:`U`"
msgstr ":math:`U` için 1 kübit geçitli IPE örneği"

#: ../../tutorials/algorithms/09_IQPE.ipynb:262
msgid "We want to apply the IPE algorithm to estimate the phase for a 1-qubit operator :math:`U`. For example, here we use the :math:`S`-gate."
msgstr "1 kübitlik bir operatör :math:`U` için fazı tahmin etmek için IPE algoritmasını uygulamak istiyoruz. Örneğin, burada :math:`S`-kapısını kullanıyoruz."

#: ../../tutorials/algorithms/09_IQPE.ipynb:264
msgid "Let’s apply the IPE algorithm to estimate the phase for :math:`S`-gate. Its matrix is"
msgstr ":math:`S`-geçiş fazını tahmin etmek için IPE algoritmasını uygulayalım. Onun matrisi"

#: ../../tutorials/algorithms/09_IQPE.ipynb:266
msgid " S =\n"
"\\begin{bmatrix}\n"
"1 & 0\\\\\n"
"0 & e^\\frac{i\\pi}{2}\\\\\n"
"\\end{bmatrix}"
msgstr " S =\n"
"\\begin{bmatrix}\n"
"1 & 0\\\\\n"
"0 & e^\\frac{i\\pi}{2}\\\\\n"
"\\end{bmatrix}"

#: ../../tutorials/algorithms/09_IQPE.ipynb:274
msgid "That is, the :math:`S`-gate adds a phase :math:`\\pi/2` to the state :math:`|1\\rangle`, leaving unchanged the phase of the state :math:`|0\\rangle`"
msgstr "Yani, :math:`S` geçiti, :math:`\\pi/2` durumuna bir faz ekler ve :math:`|1\\rangle` durumunun fazını değiştirmeden bırakır :math:`|0 \\rangle`"

#: ../../tutorials/algorithms/09_IQPE.ipynb:276
msgid "S|1\\rangle = e^\\frac{i\\pi}{2}|1\\rangle\n\n"
msgstr "S|1\\rangle = e^\\frac{i\\pi}{2}|1\\rangle\n\n"

#: ../../tutorials/algorithms/09_IQPE.ipynb:278
msgid "In the following, we will use the notation and terms used in `Section 2 of lab 4 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__."
msgstr "Aşağıda, `Section 2 of lab 4 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__ kullanılan gösterim ve terimleri kullanacağız."

#: ../../tutorials/algorithms/09_IQPE.ipynb:280
msgid "Let’s consider to estimate the phase :math:`\\phi=\\frac{\\pi}{2}` for the eigenstate :math:`|1\\rangle`, we should find :math:`\\varphi=\\frac{1}{4}` (where :math:`\\phi = 2 \\pi \\varphi`). Therefore to estimate the phase we need exactly 2 phase bits, i.e. :math:`m=2`, since :math:`1/2^2=1/4`. So :math:`\\varphi=0.\\varphi_1\\varphi_2`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:282
msgid "Remember from the theory that for the IPE algorithm, :math:`m` is also the number of iterations, so we need only :math:`2` iterations or steps."
msgstr "Teoriden hatırlayın ki, IPE algoritması için :math:`m` aynı zamanda yinelemelerin sayısıdır, bu nedenle yalnızca :math:`2` yinelemelere veya adımlara ihtiyacımız var."

#: ../../tutorials/algorithms/09_IQPE.ipynb:284
msgid "First, we initialize the circuit. IPE works with only 1 auxiliary qubit, instead of :math:`m` counting qubits of the QPE algorithm. Therefore, we need 2 qubits, 1 auxiliary qubit and 1 for the eigenstate of :math:`U`-gate, and a classical register of 2 bits, for the phase bits :math:`\\varphi_1`, :math:`\\varphi_2`."
msgstr "İlk olarak devreyi başlatıyoruz. IPE, QPE algoritmasının :math:`m` kübitlerini saymak yerine yalnızca 1 yardımcı kübit ile çalışır. Bu nedenle, :math:`U`-geçişinin öz durumu için 2 kübit, 1 yardımcı kübit ve 1'e ve faz bitleri :math:`\\varphi_1`, :math:`\\varphi_2` için 2 bitlik klasik bir kayıta ihtiyacımız var."

#: ../../tutorials/algorithms/09_IQPE.ipynb:311
#: ../../tutorials/algorithms/09_IQPE.ipynb:710
msgid "First step"
msgstr "Birinci Adım"

#: ../../tutorials/algorithms/09_IQPE.ipynb:313
msgid "Now we build the quantum circuit for the first step, that is, the first iteration of the algorithm, to estimate the least significant phase bit :math:`\\varphi_m`, in this case :math:`\\varphi_2`. For the first step we have 3 sub-steps: - initialization - application of the Controlled-:math:`U` gates - measure of the auxiliary qubit in x-basis"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:316
#: ../../tutorials/algorithms/09_IQPE.ipynb:715
msgid "Initialization"
msgstr "Başlatma"

#: ../../tutorials/algorithms/09_IQPE.ipynb:318
msgid "The initialization consists of application the Hadamard gate to the auxiliary qubit and the preparation of the eigenstate :math:`|1\\rangle`."
msgstr "Başlatma, Hadamard kapısının yardımcı kübite uygulanmasından ve özdurumun :math:`|1\\rangle` hazırlanmasından oluşur."

#: ../../tutorials/algorithms/09_IQPE.ipynb:351
#: ../../tutorials/algorithms/09_IQPE.ipynb:750
msgid "Application of the Controlled-:math:`U` gates"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:353
msgid "Then we have to apply :math:`2^t` times the Controlled-:math:`U` operators (see also in the docs `Two qubit gates <https://qiskit.org/documentation/tutorials/circuits/3_summary_of_quantum_operations.html#Two-qubit-gates>`__), that, in this example, is the Controlled-:math:`S` gate (:math:`CS` for short)."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:355
msgid "To implement :math:`CS` in the circuit, since :math:`S` is a phase gate, we can use the controlled phase gate :math:`\\text{CP}(\\theta)`, with :math:`\\theta=\\pi/2`."
msgstr "Devrede :math:`CS` uygulamak için, :math:`S` bir faz geçiti olduğundan, kontrollü faz geçiti :math:`\\text{CP}(\\theta)` kullanabiliriz, :math: `\\theta=\\pi/2`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:387
msgid "Let’s apply :math:`2^t` times :math:`\\text{CP}(\\pi/2)`. Since for the first step :math:`t=m-1`, and :math:`m=2`, we have :math:`2^t=2`."
msgstr ":math:`2^t` kere :math:`\\text{CP}(\\pi/2)` uygulayalım. İlk adım için :math:`t=m-1` ve :math:`m=2` olduğundan, elimizde :math:`2^t=2` var."

#: ../../tutorials/algorithms/09_IQPE.ipynb:420
#: ../../tutorials/algorithms/09_IQPE.ipynb:819
msgid "Measure in x-basis"
msgstr "x-bazında ölçün"

#: ../../tutorials/algorithms/09_IQPE.ipynb:422
msgid "Finally, we perform the measurement of the auxiliary qubit in x-basis. So we will define a function to perform the x_measure and then apply it."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:446
msgid "In this way we obtain the phase bit :math:`\\varphi_2` and store it in the classical bit :math:`c_0`."
msgstr "Bu şekilde :math:`\\varphi_2` faz bitini elde ederiz ve onu klasik bit :math:`c_0` içinde saklarız."

#: ../../tutorials/algorithms/09_IQPE.ipynb:478
msgid "Subsequent steps (2nd step)"
msgstr "Sonraki adımlar (2. adım)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:480
msgid "Now we build the quantum circuit for the other remaining steps, in this example, only the second one. In these steps we have 4 sub-steps: the 3 sub-steps as in the first step and, in the middle, the additional step of the phase correction - initialization with reset - phase correction - application of the Control-:math:`U` gates - measure of the auxiliary qubit in x-basis"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:483
#: ../../tutorials/algorithms/09_IQPE.ipynb:858
msgid "Initialization with reset"
msgstr "Sıfırlayarak başlatma"

#: ../../tutorials/algorithms/09_IQPE.ipynb:485
msgid "As we want to perform an iterative algorithm in the same circuit, we need to reset the auxiliary qubit :math:`q0` after the measument gate and initialize it again as before to recycle the qubit."
msgstr "Aynı devrede yinelemeli bir algoritma gerçekleştirmek istediğimiz için, yardımcı kübit :math:`q0` ölçüm kapısından sonra sıfırlamamız ve kübiti geri dönüştürmek için eskisi gibi yeniden başlatmamız gerekiyor."

#: ../../tutorials/algorithms/09_IQPE.ipynb:518
#: ../../tutorials/algorithms/09_IQPE.ipynb:891
msgid "Phase correction (for step 2)"
msgstr "Faz düzeltme (2. adım için)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:520
msgid "As seen in the theory, in order to extract the phase bit :math:`\\varphi_{1}`, we perform a phase correction of :math:`-\\pi\\varphi_2/2`. Of course, we need to apply the phase correction in the circuit only if the phase bit :math:`\\varphi_2=1`, i.e. we have to apply the phase correction of :math:`-\\pi/2` only if the classical bit :math:`c_0` is 1."
msgstr "Teoride gördüğümüz gibi, :math:`\\varphi_{1}` fazı çıkarmak için biz, bir :math:`-\\pi\\varphi_2/2` faz düzeltme gerçekleştiriyoruz. Elbette biz sadece eğer faz biti :math:`\\varphi_2=1` ise faz düzeltmesini devreye uygulamamız gerek, örneğin, eğer sadece :math:`c_0` klasik biti 1 ise biz :math:`-\\pi/2` faz düzeltmesini uygulamalıyız."

#: ../../tutorials/algorithms/09_IQPE.ipynb:522
msgid "So, after the reset we apply the phase gate :math:`P(\\theta)` with phase :math:`\\theta=-\\pi/2` conditioned by the classical bit :math:`c_0` (:math:`=\\varphi_2`) using the ``c_if`` method. So as we saw in the first part of this tutorial, we have to use the ``c_if`` method with a value of 1, as :math:`1_{10} = 001_{2}` (the subscripts :math:`_{10}` and :math:`_2` indicate the decimal and binary representations)."
msgstr "Böylelikle, sıfırlamadan sonra, :math:`P(\\theta)` faz kapısını klasik bit :math:`c_0` (:math:`=\\varphi_2`) tarafından koşullandırılan :math:`\\theta=-\\pi/2` fazı ile ``c_if`` metodunu kullanarak çalıştırıyoruz. Bu öğreticinin ilk bölümünde gördüğümüz gibi, ``c_if`` metodunu 1 değerinde :math:`1_{10} = 001_{2}` olarak kullanmamız gerekiyor (alt simgeler :math:`_{10}` ve :math:`_2` ondalık ve ikili temsilleri gösterir)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:554
#: ../../tutorials/algorithms/09_IQPE.ipynb:927
msgid "Application of the Control-:math:`U` gates and x-measurement (for step 2)"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:556
msgid "We apply the :math:`CU` operations as we did in the first step. For the second step we have :math:`t=m-2`, hence :math:`2^t=1`. So we apply :math:`\\text{CP}(\\pi/2)` once. And then we perform the x-measurment of the qubit :math:`q_0`, storing the result, the phase bit :math:`\\varphi_1`, in the bit :math:`c_1` of classical register."
msgstr "İlk adımda yaptığımız gibi :math:`CU` işlemlerini uyguluyoruz. İkinci adım için :math:`t=m-2`, dolayısıyla :math:`2^t=1` var. Yani bir kez :math:`\\text{CP}(\\pi/2)` uygularız. Ve sonra :math:`q_0` kübitinin x-ölçümünü gerçekleştiririz, sonucu, faz biti :math:`\\varphi_1`yi klasik kaydın :math:`c_1` bitinde saklarız."

#: ../../tutorials/algorithms/09_IQPE.ipynb:581
msgid "Et voilà, we have our final circuit"
msgstr "Ve buyrun! Artık nihai devremiz elimizde"

#: ../../tutorials/algorithms/09_IQPE.ipynb:611
msgid "Let’s execute the circuit with the ``qasm_simulator``, the simulator without noise that run locally."
msgstr "Lokal olarak çalışan gürültüsüz simülatör olan ``qasm_simulator`` ile devreyi çalıştıralım."

#: ../../tutorials/algorithms/09_IQPE.ipynb:649
msgid "In the picture we have the same histograms but on the left we have on the x-axis the string with phase bits :math:`\\varphi_1`, :math:`\\varphi_2` and on the right the actual phase :math:`\\varphi` in decimal representation."
msgstr "Resimde aynı histogramlara sahibiz ama solda x ekseninde :math:`\\varphi_1`, :math:`\\varphi_2` faz bitlerine sahip dize ve sağda ondalık gösterimde gerçek faz :math:`\\varphi` var."

#: ../../tutorials/algorithms/09_IQPE.ipynb:651
msgid "As we expected we have found :math:`\\varphi=\\frac{1}{4}=0.25` with a :math:`100\\%` probability."
msgstr "Beklediğimiz gibi :math:`\\varphi=\\frac{1}{4}=0.25` değerini :math:`100\\%` olasılıkla bulduk."

#: ../../tutorials/algorithms/09_IQPE.ipynb:663
msgid "IPE example with a 2-qubit gate"
msgstr "2 kübit geçitli IPE örneği"

#: ../../tutorials/algorithms/09_IQPE.ipynb:665
msgid "Now, we want to apply the IPE algorithm to estimate the phase for a 2-qubit gate :math:`U`. For this example, let’s consider the controlled version of the :math:`T` gate, i.e. the gate :math:`U=\\textrm{Controlled-}T` (that from now we will express more compactly with :math:`CT`). Its matrix is"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:667
msgid " CT =\n"
"\\begin{bmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^\\frac{i\\pi}{4}\\\\\n"
"\\end{bmatrix}"
msgstr " CT =\n"
"\\begin{bmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^\\frac{i\\pi}{4}\\\\\n"
"\\end{bmatrix}"

#: ../../tutorials/algorithms/09_IQPE.ipynb:677
msgid "That is, the :math:`CT` gate adds a phase :math:`\\pi/4` to the state :math:`|11\\rangle`, leaving unchanged the phase of the other computational basis states :math:`|00\\rangle`, :math:`|01\\rangle`, :math:`|10\\rangle`."
msgstr "Yani, :math:`CT` kapısı, :math:`|11\\rangle` durumuna bir faz :math:`\\pi/4` ekler ve diğer hesaplama temelli durumların fazını değiştirmeden bırakır :math:` |00\\rangle`, :math:`|01\\rangle`, :math:`|10\\rangle`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:679
msgid "Let’s consider to estimate the phase :math:`\\phi=\\pi/4` for the eigenstate :math:`|11\\rangle`, we should find :math:`\\varphi=1/8`, since :math:`\\phi = 2 \\pi \\varphi`. Therefore to estimate the phase we need exactly 3 classical bits, i.e. :math:`m=3`, since :math:`1/2^3=1/8`. So :math:`\\varphi=0.\\varphi_1\\varphi_2\\varphi_3`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:681
msgid "As done with the example for the 1-qubit :math:`U` operator we will go through the same steps but this time we will have :math:`3` steps since :math:`m=3`, and we will not repeat all the explanations. So for details see the above example for 1-qubit :math:`U` gate."
msgstr "1 kübitli :math:`U` operatörün örneğinde yapıldığı gibi aynı adımları izleyeceğiz ama bu sefer  :math:`m=3` :math:`3` adım olacak, açıklamaları tekrar etmeyeceğiz. Detaylar için 1 kübitli :math:`U` kapısının örneğine bakınız."

#: ../../tutorials/algorithms/09_IQPE.ipynb:683
msgid "First, we initialize the circuit with 3 qubits, 1 for the auxiliary qubit and 2 for the 2-qubit gate, and 3 classical bits to store the phase bits :math:`\\varphi_1`, :math:`\\varphi_2`, :math:`\\varphi_3`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:712
msgid "Now we build the quantum circuit for the first step, to estimate the least significant phase bit :math:`\\varphi_m=\\varphi_3`."
msgstr "Şimdi en az anlamlı faz bitini tahmin etmek için ilk adım için kuantum devresini oluşturuyoruz :math:`\\varphi_m=\\varphi_3`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:717
msgid "We initialize the auxiliary qubit and the other qubits with the eigenstate :math:`|11\\rangle`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:752
msgid "Then we have to apply multiple times the :math:`CU` operator, that, in this example, is the Controlled-:math:`CT` gate (:math:`CCT` for short)."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:754
msgid "To implement :math:`CCT` in the circuit, since :math:`T` is a phase gate, we can use the multi-controlled phase gate :math:`\\text{MCP}(\\theta)`, with :math:`\\theta=\\pi/4`."
msgstr "Devrede :math:`CCT`yi yürütmek için, mademki :math:`T` bir faz kapısıdır, çok-kontrollü faz geçidi olan :math:`\\text{MCP}(\\theta)`ı :math:`\\theta=\\pi/4` ile kullanabiliriz."

#: ../../tutorials/algorithms/09_IQPE.ipynb:786
msgid "Let’s apply :math:`2^t` times :math:`\\text{MCP}(\\pi/4)`. Since for the first step :math:`t=m-1` and :math:`m=3`, we have :math:`2^t=4`."
msgstr ":math:`2^t` kere :math:`\\text{MCP}(\\pi/4) uygulayalım. İlk adım :math:`t=m-1` ve :math:`m=3`, o zaman artık elimizde :math:`2^t=4` var."

#: ../../tutorials/algorithms/09_IQPE.ipynb:821
msgid "Finally, we perform the measurenment of the auxiliary qubit in x-basis. We can use the ``x_measurement`` function defined above in the example for 1-qubit gate. In this way we have obtained the phase bit :math:`\\varphi_3` and stored it in the classical bit :math:`c_0`."
msgstr "Son olarak, x-bazında yardımcı kübitinin ölçümünü yürütüyoruz. Yukarıda 1-kübit geçidi için olan örnekte tanımlanan ``x_measurement`` fonksiyonunu ölçmek için kullanabiliriz. Bu şekilde :math:`\\varphi_3` elde etmiş olup :math:`c_0` klasik bitinde bunu saklamalıyız."

#: ../../tutorials/algorithms/09_IQPE.ipynb:853
msgid "Subsequent steps (2nd, 3rd)"
msgstr "Sonraki adımlar (2., 3.)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:855
msgid "Now we build the quantum circuit for the other remaining steps, the second and the third ones. As said in the first example, in these steps we have the additional sub-step of the phase correction."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:893
msgid "In order to extract the phase bit :math:`\\varphi_{2}`, we perform a phase correction of :math:`-\\pi\\varphi_3/2`."
msgstr ":math:`\\varphi_{2}` faz bitini çıkarmak için, :math:`-\\pi\\varphi_3/2` faz düzeltmesini yapıyoruz."

#: ../../tutorials/algorithms/09_IQPE.ipynb:895
msgid "So, after the reset we apply the phase gate :math:`P(\\theta)` with phase :math:`\\theta=-\\pi/2` conditioned by the classical bit :math:`c_0` (:math:`=\\varphi_3`)."
msgstr "O zaman bu sıfırlamadan sonra, :math:`c_0` (:math:`=\\varphi_3`) klasik bitiyle şartlandırılmış :math:`\\theta=-\\pi/2` fazına sahip :math:`P(\\theta)` faz kapısını uygularız."

#: ../../tutorials/algorithms/09_IQPE.ipynb:929
msgid "We apply the :math:`CU` operations as we did in the first step. For the second step we have :math:`t=m-2`, hence :math:`2^t=2`. So we apply :math:`\\text{MCP}(\\pi/4)` :math:`2` times. And then we perform the x-measurement of the qubit :math:`q_0`, storing the phase bit :math:`\\varphi_2` in the bit :math:`c_1`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:963
msgid "All substeps of the 3rd step"
msgstr "3. adımın tüm alt adımları"

#: ../../tutorials/algorithms/09_IQPE.ipynb:965
msgid "For the 3rd and last step, we perform the reset and initialization of the auxiliary qubit as done in the second step."
msgstr "3. ve son adım için ikinci adımda yaptığımız gibi yardımcı kübitin resetlenmesi ve başlatılmasını gerçekleştiriyoruz."

#: ../../tutorials/algorithms/09_IQPE.ipynb:967
msgid "Then at the 3rd step we have to perform the phase correction of :math:`-2\\pi 0.0\\varphi_{2}\\varphi_{3}= -2\\pi \\left(\\frac{\\varphi_2}{4}+\\frac{\\varphi_3}{8}\\right)=-\\frac{\\varphi_2\\pi}{2}-\\frac{ \\varphi_3\\pi}{4}`, thus we have to apply 2 conditioned phase corrections, one conditioned by :math:`\\varphi_3` (:math:`=c_0`) and the other by :math:`\\varphi_2`\\ (:math:`=c_1`). To do this we have to apply the following: - gate :math:`P(-\\pi/4)` conditioned by :math:`c_0=1`, that is, by :math:`c=001` (c_if with value :math:`1`) - gate :math:`P(-\\pi/2)` conditioned by :math:`c_1=1`, that is, the gate is applied when :math:`c=010` (c_if with values :math:`2`) - gate :math:`P(-3\\pi/4)` conditioned by :math:`c_1=1` and :math:`c_0=1` that is, the gate is applied when :math:`c=011` (c_if with values :math:`3`)"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:970
msgid "Next, the :math:`CU` operations: we apply :math:`2^t` times the :math:`\\text{MCP}(\\pi/4)` gate and since at the 3rd step :math:`t=m-3=0`, we apply the gate only once."
msgstr "Sonra, :math:`CU` işlemleri: :math:`2^t` çarpı :math:`\\text{MCP}(\\pi/4)` geçitini uygularız ve 3. adımdan itibaren :math:` t=m-3=0`, geçidi sadece bir kez uyguluyoruz."

#: ../../tutorials/algorithms/09_IQPE.ipynb:1018
msgid "Now, we execute the circuit with the simulator without noise."
msgstr "Şimdi, devreyi simülatörle gürültüsüz olarak çalıştırıyoruz."

#: ../../tutorials/algorithms/09_IQPE.ipynb:1055
msgid "We have obtained :math:`100\\%` probability to find :math:`\\varphi=0.125`, that is, :math:`1/8`, as expected."
msgstr "Beklendiği gibi :math:`\\varphi=0.125` yani :math:`1/8` bulmak için :math:`100\\%` olasılığını elde ettik."

