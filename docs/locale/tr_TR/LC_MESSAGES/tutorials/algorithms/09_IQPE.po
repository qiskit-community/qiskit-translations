msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-05 13:41+0000\n"
"PO-Revision-Date: 2023-06-05 14:35\n"
"Last-Translator: \n"
"Language: tr\n"
"Language-Team: Turkish\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/09_IQPE.po\n"
"X-Crowdin-File-ID: 9546\n"

#: ../../tutorials/algorithms/09_IQPE.ipynb:10
msgid "This page was generated from `tutorials/algorithms/09_IQPE.ipynb`__."
msgstr "Bu sayfa, `tutorials/algorithms/09_IQPE.ipynb`__ adresinden oluşturulmuştur."

#: ../../tutorials/algorithms/09_IQPE.ipynb:9
msgid "Iterative Quantum Phase Estimation Algorithm"
msgstr "Yinelemeli Kuantum Faz Tahmini Algoritması"

#: ../../tutorials/algorithms/09_IQPE.ipynb:11
msgid "The goal of this tutorial is to understand how the Iterative Phase Estimation (IPE) algorithm works, why would we use the IPE algorithm instead of the QPE (Quantum Phase Estimation) algorithm and how to build it with Qiskit using the same circuit exploiting reset gate and the ``c_if`` method that allows to apply gates conditioned by the values stored in a classical register, resulting from previous measurements."
msgstr "Bu eğitimin hedefi, Yinelemeli Faz Tahmini (IPE) algoritmasının nasıl çalıştığını, neden QPE (Kuantum Faz Tahmini) algoritması yerine IPE algoritmasını kullanabileceğimizi ve onu, sıfırlama kapısından ve bir klasik yazmaçta daha önceki ölçümlerden elde edilip depolanmış değerler ile şartlandırılmış kapılar uygulamamızı sağlayan``c_if`` metodundan faydalanan aynı devreyi kullanarak Qiskit ile nasıl derlendiğini anlamak."

#: ../../tutorials/algorithms/09_IQPE.ipynb:13
msgid "**References**"
msgstr "**Kaynaklar**"

#: ../../tutorials/algorithms/09_IQPE.ipynb:15
msgid "`Section 2 of Lab 4: Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__"
msgstr "`Section 2 of Lab 4: Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__"

#: ../../tutorials/algorithms/09_IQPE.ipynb:17
msgid "`Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__"
msgstr "`Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__"

#: ../../tutorials/algorithms/09_IQPE.ipynb:29
msgid "Conditioned gates: the ``c_if`` method"
msgstr "Koşullandırılmış kapılar: ``c_if`` metodu"

#: ../../tutorials/algorithms/09_IQPE.ipynb:40
msgid "Before starting the IPE algorithm, we will give a brief tutorial about the Qiskit conditional method, ``c_if``, as it goes into building the IPE circuit."
msgstr "IPE algoritmasına başlamadan önce, IPE devresini kurarken Qiskit koşullu metodu ``c_if`` hakkında kısa bir eğitim vereceğiz."

#: ../../tutorials/algorithms/09_IQPE.ipynb:42
msgid "``c_if`` is a function (actually a method of the gate class) to perform conditioned operations based on the value stored previously in a classical register. With this feature you can apply gates after a measurement in the same circuit conditioned by the measurement outcome."
msgstr "``c_if`` bir klasik bitte daha önceden depolanmış değere dayanarak şartlandırılmış işlemler uygulamayı sağlayan bir fonksiyondur (aslında, kapı sınıfının bir metodu). Bu özellik sayesinde, aynı devrede bir ölçümden sonra ölçüm sonuçlarıyla şartlandırılmış kapılar uygulayabilirsiniz."

#: ../../tutorials/algorithms/09_IQPE.ipynb:44
msgid "For example, the following code will execute the :math:`X` gate if the value of the classical register is :math:`0`."
msgstr "Örneğin, klasik kaydın değeri :math:`0` ise, aşağıdaki kod :math:`X` kapısını çalıştıracaktır."

#: ../../tutorials/algorithms/09_IQPE.ipynb:80
msgid "We highlight that the method ``c_if`` expects as the first argument a whole classical register, not a single classical bit (or a list of classical bits), and as the second argument a value in decimal representation (a non-negative integer), not the value of a single bit, 0, or 1 (or a list/string of binary digits)."
msgstr "``c_if`` metodunun ilk argüman olarak tek bir klasik bit (veya bir klasik bit listesi) değil, bütün bir klasik yazmaç beklediğini ve ikinci argüman olarak ondalık gösterimde bir değer (negatif olmayan bir tam sayı) beklediğini vurguluyoruz. tek bir bitin değeri, 0 veya 1 (veya ikili rakamlar listesi/dizisi)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:82
msgid "Let's make another example. Consider that we want to perform a bit flip on the third qubit after the measurements in the following circuit, when the results of the measurement of :math:`q_0` and :math:`q_1` are both :math:`1`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:122
msgid "We want to apply the :math:`X` gate, only if both the results of the measurement of :math:`q_0` and :math:`q_1` are :math:`1`. We can do this using the ``c_if`` method, conditioning the application of :math:`X` depending on the value passed as argument to ``c_if``."
msgstr "Yalnızca :math:`q_0` ve :math:`q_1` ölçümünün sonuçları :math:`1` ise :math:`X` kapısını uygulamak istiyoruz. Bunu ``c_if`` metodunu kullanarak, ``c_if``'e bağımsız değişken olarak iletilen değere bağlı olarak :math:`X` uygulamasını koşullandırarak yapabiliriz."

#: ../../tutorials/algorithms/09_IQPE.ipynb:124
msgid "We will have to encode the value to pass to the ``c_if`` method such that it will check the values 011 and 111 (in binary representation), since it does not matter what :math:`q_2` is measured as."
msgstr "``c_if`` metoduna geçirmek için değeri 011 ve 111 değerlerini (ikili gösterimde) kontrol edecek şekilde kodlamamız gerekecek, çünkü :math:`q_2`'nin ne ölçüldüğü önemli değil."

#: ../../tutorials/algorithms/09_IQPE.ipynb:126
msgid "The 2 integer values in decimal representation:"
msgstr "Ondalık gösterimde 2 tam sayı değeri:"

#: ../../tutorials/algorithms/09_IQPE.ipynb:137
msgid "|bac51564cc9d41db989da12b4753eb8d|"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:139
msgid "bac51564cc9d41db989da12b4753eb8d"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:150
msgid "We can check the solutions using the ``bin()`` method in python (the prefix ``0b`` indicates the binary format)."
msgstr "Python'da ``bin()`` metodunu kullanarak çözümleri kontrol edebiliriz ( ``0b`` ön takısı ikili formatı belirtir)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:199
msgid "So we have to apply :math:`X` to :math:`q_2` using ``c_if`` two times, one for each value corresponding to 011 and 111."
msgstr "Bu yüzden :math:`X` ile :math:`q_2` arasında ``c_if`` kullanarak 011 ve 111'e karşılık gelen her değer için bir tane olmak üzere iki kez uygulamamız gerekir."

#: ../../tutorials/algorithms/09_IQPE.ipynb:233
msgid "IPE"
msgstr "IPE"

#: ../../tutorials/algorithms/09_IQPE.ipynb:235
msgid "The motivation for using the IPE algorithm is that QPE algorithm works fine for short depth circuits but when the circuit starts to grow, it doesn't work properly due to gate noise and decoherence times."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:237
msgid "The detailed explanation of how the algorithm works can be found in `Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__. To understand QPE in depth, you can see also `Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__."
msgstr "Algoritmanın nasıl çalıştığına ilişkin ayrıntılı açıklama, `Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__. QPE'yi derinlemesine anlamak için, ayrıca `Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__ bölümünü de inceleyebilirsiniz."

#: ../../tutorials/algorithms/09_IQPE.ipynb:240
msgid "IPE example with a 1-qubit gate for :math:`U`"
msgstr ":math:`U` için 1 kübit geçitli IPE örneği"

#: ../../tutorials/algorithms/09_IQPE.ipynb:242
msgid "We want to apply the IPE algorithm to estimate the phase for a 1-qubit operator :math:`U`. For example, here we use the :math:`S`-gate."
msgstr "1 kübitlik bir operatör :math:`U` için fazı tahmin etmek için IPE algoritmasını uygulamak istiyoruz. Örneğin, burada :math:`S`-kapısını kullanıyoruz."

#: ../../tutorials/algorithms/09_IQPE.ipynb:244
msgid "Let's apply the IPE algorithm to estimate the phase for :math:`S`-gate. Its matrix is"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:246
msgid " S =\n"
"\\begin{bmatrix}\n"
"1 & 0\\\\\n"
"0 & e^\\frac{i\\pi}{2}\\\\\n"
"\\end{bmatrix}"
msgstr " S =\n"
"\\begin{bmatrix}\n"
"1 & 0\\\\\n"
"0 & e^\\frac{i\\pi}{2}\\\\\n"
"\\end{bmatrix}"

#: ../../tutorials/algorithms/09_IQPE.ipynb:254
msgid "That is, the :math:`S`-gate adds a phase :math:`\\pi/2` to the state :math:`|1\\rangle`, leaving unchanged the phase of the state :math:`|0\\rangle`"
msgstr "Yani, :math:`S` geçiti, :math:`\\pi/2` durumuna bir faz ekler ve :math:`|1\\rangle` durumunun fazını değiştirmeden bırakır :math:`|0 \\rangle`"

#: ../../tutorials/algorithms/09_IQPE.ipynb:256
msgid "S|1\\rangle = e^\\frac{i\\pi}{2}|1\\rangle\n\n"
msgstr "S|1\\rangle = e^\\frac{i\\pi}{2}|1\\rangle\n\n"

#: ../../tutorials/algorithms/09_IQPE.ipynb:258
msgid "In the following, we will use the notation and terms used in `Section 2 of lab 4 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__."
msgstr "Aşağıda, `Section 2 of lab 4 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__ kullanılan gösterim ve terimleri kullanacağız."

#: ../../tutorials/algorithms/09_IQPE.ipynb:260
msgid "Let's consider to estimate the phase :math:`\\phi=\\frac{\\pi}{2}` for the eigenstate :math:`|1\\rangle`, we should find :math:`\\varphi=\\frac{1}{4}` (where :math:`\\phi = 2 \\pi \\varphi`). Therefore to estimate the phase we need exactly 2 phase bits, i.e. :math:`m=2`, since :math:`1/2^2=1/4`. So :math:`\\varphi=0.\\varphi_1\\varphi_2`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:262
msgid "Remember from the theory that for the IPE algorithm, :math:`m` is also the number of iterations, so we need only :math:`2` iterations or steps."
msgstr "Teoriden hatırlayın ki, IPE algoritması için :math:`m` aynı zamanda yinelemelerin sayısıdır, bu nedenle yalnızca :math:`2` yinelemelere veya adımlara ihtiyacımız var."

#: ../../tutorials/algorithms/09_IQPE.ipynb:264
msgid "First, we initialize the circuit. IPE works with only 1 auxiliary qubit, instead of :math:`m` counting qubits of the QPE algorithm. Therefore, we need 2 qubits, 1 auxiliary qubit and 1 for the eigenstate of :math:`U`-gate, and a classical register of 2 bits, for the phase bits :math:`\\varphi_1`, :math:`\\varphi_2`."
msgstr "İlk olarak devreyi başlatıyoruz. IPE, QPE algoritmasının :math:`m` kübitlerini saymak yerine yalnızca 1 yardımcı kübit ile çalışır. Bu nedenle, :math:`U`-geçişinin öz durumu için 2 kübit, 1 yardımcı kübit ve 1'e ve faz bitleri :math:`\\varphi_1`, :math:`\\varphi_2` için 2 bitlik klasik bir kayıta ihtiyacımız var."

#: ../../tutorials/algorithms/09_IQPE.ipynb:291
#: ../../tutorials/algorithms/09_IQPE.ipynb:701
msgid "First step"
msgstr "Birinci Adım"

#: ../../tutorials/algorithms/09_IQPE.ipynb:293
msgid "Now we build the quantum circuit for the first step, that is, the first iteration of the algorithm, to estimate the least significant phase bit :math:`\\varphi_m`, in this case :math:`\\varphi_2`. For the first step we have 3 sub-steps: - initialization - application of the Controlled-:math:`U` gates - measure of the auxiliary qubit in X-basis"
msgstr "Şimdi, en az anlamlı faz bitini :math:`\\varphi_m` tahmin etmek için ilk adım, yani algoritmanın ilk yinelemesi için kuantum devresini oluşturuyoruz, bu durumda :math:`\\varphi_2`. İlk adım için 3 alt adımımız var: - başlatma - Kontrollü-:math:`U` kapılarının uygulanması - X-bazında yardımcı kübitin ölçümü"

#: ../../tutorials/algorithms/09_IQPE.ipynb:296
#: ../../tutorials/algorithms/09_IQPE.ipynb:706
msgid "Initialization"
msgstr "Başlatma"

#: ../../tutorials/algorithms/09_IQPE.ipynb:298
msgid "The initialization consists of application the Hadamard gate to the auxiliary qubit and the preparation of the eigenstate :math:`|1\\rangle`."
msgstr "Başlatma, Hadamard kapısının yardımcı kübite uygulanmasından ve özdurumun :math:`|1\\rangle` hazırlanmasından oluşur."

#: ../../tutorials/algorithms/09_IQPE.ipynb:331
#: ../../tutorials/algorithms/09_IQPE.ipynb:741
msgid "Application of the Controlled-:math:`U` gates"
msgstr "Kontrollü-:math:`U` kapılarının uygulanması"

#: ../../tutorials/algorithms/09_IQPE.ipynb:333
msgid "Then we have to apply :math:`2^t` times the Controlled-:math:`U` operators (see also in the docs `Two qubit gates <https://qiskit.org/documentation/tutorials/circuits/3_summary_of_quantum_operations.html#Two-qubit-gates>`__), that, in this example, is the Controlled-:math:`S` gate (:math:`CS` for short)."
msgstr "Bundan sonra biz :math:`2^t` kez kontrollü-:math:`U` operatörü uygulamalıyız (`İki kübitlik kapılar <https://qiskit.org/documentation/tutorials/circuits/3_summary_of_quantum_operations.html#Two-qubit-gates>`__ ayrıca bu belgelere bakın), bu örnekte, kontrollü-:math:`S` (kısaca :math:`CS`) kapısıdır."

#: ../../tutorials/algorithms/09_IQPE.ipynb:335
msgid "To implement :math:`CS` in the circuit, since :math:`S` is a phase gate, we can use the controlled phase gate :math:`\\text{CP}(\\theta)`, with :math:`\\theta=\\pi/2`."
msgstr "Devrede :math:`CS` uygulamak için, :math:`S` bir faz geçiti olduğundan, kontrollü faz geçiti :math:`\\text{CP}(\\theta)` kullanabiliriz, :math: `\\theta=\\pi/2`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:369
msgid "Let's apply :math:`2^t` times :math:`\\text{CP}(\\pi/2)`. Since for the first step :math:`t=m-1`, and :math:`m=2`, we have :math:`2^t=2`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:402
#: ../../tutorials/algorithms/09_IQPE.ipynb:810
msgid "Measure in X-basis"
msgstr "X-Bazında Ölçüm"

#: ../../tutorials/algorithms/09_IQPE.ipynb:404
msgid "Finally, we perform the measurement of the auxiliary qubit in X-basis. So we will define a function to perform the ``x_measurement`` and then apply it."
msgstr "Son olarak, X-bazında yardımcı kübitin ölçümünü gerçekleştiriyoruz. Yani ``x_measurement`` gerçekleştirecek bir fonksiyon tanımlayacak ve sonra onu uygulayacağız."

#: ../../tutorials/algorithms/09_IQPE.ipynb:428
msgid "In this way we obtain the phase bit :math:`\\varphi_2` and store it in the classical bit :math:`c_0`."
msgstr "Bu şekilde :math:`\\varphi_2` faz bitini elde ederiz ve onu klasik bit :math:`c_0` içinde saklarız."

#: ../../tutorials/algorithms/09_IQPE.ipynb:460
msgid "Subsequent steps (2nd step)"
msgstr "Sonraki adımlar (2. adım)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:462
msgid "Now we build the quantum circuit for the other remaining steps, in this example, only the second one. In these steps we have 4 sub-steps: the 3 sub-steps as in the first step and, in the middle, the additional step of the phase correction - initialization with reset - phase correction - application of the Control-:math:`U` gates - measure of the auxiliary qubit in X-basis"
msgstr "Şimdi kalan diğer adımlar için kuantum devresini oluşturuyoruz, bu örnek sadece ikincisi için. Bu adımlarda 4 alt adımımız var: ilk adımdaki gibi 3 alt adım ve ortada, faz düzeltmenin ek adımı - sıfırlama ile başlatma - faz düzeltme - Kontrollü-:math:`U` kapılarının uygulanması - X-bazında yardımcı kübitin ölçümü"

#: ../../tutorials/algorithms/09_IQPE.ipynb:465
#: ../../tutorials/algorithms/09_IQPE.ipynb:849
msgid "Initialization with reset"
msgstr "Sıfırlayarak başlatma"

#: ../../tutorials/algorithms/09_IQPE.ipynb:467
msgid "As we want to perform an iterative algorithm in the same circuit, we need to reset the auxiliary qubit :math:`q_0` after the measument gate and initialize it again as before to recycle the qubit."
msgstr "Aynı devrede yinelemeli bir algoritma gerçekleştirmek istediğimiz için, yardımcı kübiti :math:`q_0` ölçüm kapısından sonra sıfırlamamız ve kübiti geri dönüştürmek için eskisi gibi yeniden başlatmamız gerekiyor."

#: ../../tutorials/algorithms/09_IQPE.ipynb:500
#: ../../tutorials/algorithms/09_IQPE.ipynb:882
msgid "Phase correction (for step 2)"
msgstr "Faz düzeltme (2. adım için)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:502
msgid "As seen in the theory, in order to extract the phase bit :math:`\\varphi_{1}`, we perform a phase correction of :math:`-\\pi\\varphi_2/2`. Of course, we need to apply the phase correction in the circuit only if the phase bit :math:`\\varphi_2=1`, i.e. we have to apply the phase correction of :math:`-\\pi/2` only if the classical bit :math:`c_0` is 1."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:504
msgid "So, after the reset we apply the phase gate :math:`P(\\theta)` with phase :math:`\\theta=-\\pi/2` conditioned by the classical bit :math:`c_0` (:math:`=\\varphi_2`) using the ``c_if`` method. So as we saw in the first part of this tutorial, we have to use the ``c_if`` method with a value of 1, as :math:`1_{10} = 001_{2}` (the subscripts :math:`_{10}` and :math:`_2` indicate the decimal and binary representations)."
msgstr "Böylelikle, sıfırlamadan sonra, :math:`P(\\theta)` faz kapısını klasik bit :math:`c_0` (:math:`=\\varphi_2`) tarafından koşullandırılan :math:`\\theta=-\\pi/2` fazı ile ``c_if`` metodunu kullanarak çalıştırıyoruz. Bu öğreticinin ilk bölümünde gördüğümüz gibi, ``c_if`` metodunu 1 değerinde :math:`1_{10} = 001_{2}` olarak kullanmamız gerekiyor (alt simgeler :math:`_{10}` ve :math:`_2` ondalık ve ikili temsilleri gösterir)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:536
#: ../../tutorials/algorithms/09_IQPE.ipynb:918
msgid "Application of the Control-:math:`U` gates and x-measurement (for step 2)"
msgstr "Kontrollü-:math:`U` kapıları ve x-ölçümünün uygulanması (2. adım için)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:538
msgid "We apply the :math:`CU` operations as we did in the first step. For the second step we have :math:`t=m-2`, hence :math:`2^t=1`. So we apply :math:`\\text{CP}(\\pi/2)` once. And then we perform the X-measurement of the qubit :math:`q_0`, storing the result, the phase bit :math:`\\varphi_1`, in the bit :math:`c_1` of classical register."
msgstr "İlk adımda yaptığımız gibi :math:`CU` işlemini uygularız. İkinci adımda :math:`2^t=1` olduğundan dolayı :math:`t=m-2`'ye sahibiz. Böylece bir kere :math:`\\text{CP}(\\pi/2)` uygularız ve sonra kübit :math:`q_0`ın X-ölçümünü gerçekleştiririz ardından sonucunda faz bitini :math:`\\varphi_1` klasik yazmacın :math:`c_1` biti içinde saklarız."

#: ../../tutorials/algorithms/09_IQPE.ipynb:563
msgid "Et voilà, we have our final circuit"
msgstr "Ve buyrun! Artık nihai devremiz elimizde"

#: ../../tutorials/algorithms/09_IQPE.ipynb:593
msgid "Let's sample the circuit with Qiskit Aer's ``Sampler`` primitive, a local simulator without noise that runs locally."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:640
msgid "In the picture we have the same histograms but on the left we have on the x-axis the string with phase bits :math:`\\varphi_1`, :math:`\\varphi_2` and on the right the actual phase :math:`\\varphi` in decimal representation."
msgstr "Resimde aynı histogramlara sahibiz ama solda x ekseninde :math:`\\varphi_1`, :math:`\\varphi_2` faz bitlerine sahip dize ve sağda ondalık gösterimde gerçek faz :math:`\\varphi` var."

#: ../../tutorials/algorithms/09_IQPE.ipynb:642
msgid "As we expected we have found :math:`\\varphi=\\frac{1}{4}=0.25` with a :math:`100\\%` probability."
msgstr "Beklediğimiz gibi :math:`\\varphi=\\frac{1}{4}=0.25` değerini :math:`100\\%` olasılıkla bulduk."

#: ../../tutorials/algorithms/09_IQPE.ipynb:654
msgid "IPE example with a 2-qubit gate"
msgstr "2 kübit geçitli IPE örneği"

#: ../../tutorials/algorithms/09_IQPE.ipynb:656
msgid "Now, we want to apply the IPE algorithm to estimate the phase for a 2-qubit gate :math:`U`. For this example, let's consider the controlled version of the :math:`T` gate, i.e. the gate :math:`U=\\textrm{Controlled-}T` (that from now we will express more compactly with :math:`CT`). Its matrix is"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:658
msgid " CT =\n"
"\\begin{bmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^\\frac{i\\pi}{4}\\\\\n"
"\\end{bmatrix}"
msgstr " CT =\n"
"\\begin{bmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^\\frac{i\\pi}{4}\\\\\n"
"\\end{bmatrix}"

#: ../../tutorials/algorithms/09_IQPE.ipynb:668
msgid "That is, the :math:`CT` gate adds a phase :math:`\\pi/4` to the state :math:`|11\\rangle`, leaving unchanged the phase of the other computational basis states :math:`|00\\rangle`, :math:`|01\\rangle`, :math:`|10\\rangle`."
msgstr "Yani, :math:`CT` kapısı, :math:`|11\\rangle` durumuna bir faz :math:`\\pi/4` ekler ve diğer hesaplama temelli durumların fazını değiştirmeden bırakır :math:` |00\\rangle`, :math:`|01\\rangle`, :math:`|10\\rangle`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:670
msgid "Let's consider to estimate the phase :math:`\\phi=\\pi/4` for the eigenstate :math:`|11\\rangle`, we should find :math:`\\varphi=1/8`, since :math:`\\phi = 2 \\pi \\varphi`. Therefore to estimate the phase we need exactly 3 classical bits, i.e. :math:`m=3`, since :math:`1/2^3=1/8`. So :math:`\\varphi=0.\\varphi_1\\varphi_2\\varphi_3`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:672
msgid "As done with the example for the 1-qubit :math:`U` operator we will go through the same steps but this time we will have :math:`3` steps since :math:`m=3`, and we will not repeat all the explanations. So for details see the above example for 1-qubit :math:`U` gate."
msgstr "1 kübitli :math:`U` operatörün örneğinde yapıldığı gibi aynı adımları izleyeceğiz ama bu sefer  :math:`m=3` :math:`3` adım olacak, açıklamaları tekrar etmeyeceğiz. Detaylar için 1 kübitli :math:`U` kapısının örneğine bakınız."

#: ../../tutorials/algorithms/09_IQPE.ipynb:674
msgid "First, we initialize the circuit with 3 qubits, 1 for the auxiliary qubit and 2 for the 2-qubit gate, and 3 classical bits to store the phase bits :math:`\\varphi_1`, :math:`\\varphi_2`, :math:`\\varphi_3`."
msgstr "Öncelikle devreyi, yardımcı kübit için 1 tane ve iki kübitli kapılar için 2 tane olmak üzere toplamda 3 kübitle ve :math:`\\varphi_1`, :math:`\\varphi_2`, :math:`\\varphi_3` faz bitlerini depolamak için 3 klasik bitle ilklendiriyoruz."

#: ../../tutorials/algorithms/09_IQPE.ipynb:703
msgid "Now we build the quantum circuit for the first step, to estimate the least significant phase bit :math:`\\varphi_m=\\varphi_3`."
msgstr "Şimdi en az anlamlı faz bitini tahmin etmek için ilk adım için kuantum devresini oluşturuyoruz :math:`\\varphi_m=\\varphi_3`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:708
msgid "We initialize the auxiliary qubit and the other qubits with the eigenstate :math:`|11\\rangle`."
msgstr "Yardımcı kübiti ve diğer kübitleri :math:`|11\\rangle` özdurumuyla ilklendiriyoruz."

#: ../../tutorials/algorithms/09_IQPE.ipynb:743
msgid "Then we have to apply multiple times the :math:`CU` operator, that, in this example, is the Controlled-:math:`CT` gate (:math:`CCT` for short)."
msgstr "Bundan sonra :math:`CU` operatörünü birden fazla uygulamamız gerekiyor. Bu da, bu örnekte, Kontrollü-:math:`CT` kapısıdır (kısaca :math:`CCT`)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:745
msgid "To implement :math:`CCT` in the circuit, since :math:`T` is a phase gate, we can use the multi-controlled phase gate :math:`\\text{MCP}(\\theta)`, with :math:`\\theta=\\pi/4`."
msgstr "Devrede :math:`CCT`yi yürütmek için, mademki :math:`T` bir faz kapısıdır, çok-kontrollü faz geçidi olan :math:`\\text{MCP}(\\theta)`ı :math:`\\theta=\\pi/4` ile kullanabiliriz."

#: ../../tutorials/algorithms/09_IQPE.ipynb:777
msgid "Let's apply :math:`2^t` times :math:`\\text{MCP}(\\pi/4)`. Since for the first step :math:`t=m-1` and :math:`m=3`, we have :math:`2^t=4`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:812
msgid "Finally, we perform the measurement of the auxiliary qubit in X-basis. We can use the ``x_measurement`` function defined above in the example for 1-qubit gate. In this way we have obtained the phase bit :math:`\\varphi_3` and stored it in the classical bit :math:`c_0`."
msgstr "Son olarak yardımcı kübitin ölçümünü X-bazında gerçekleştiriyoruz. 1-kübitlik kapı için örnekte yukarıda tanımlanan ``x_measurement`` fonksiyonunu kullanabiliriz. Bu şekilde :math:`\\varphi_3` faz bitini elde ettik ve onu klasik :math:`c_0` bitinde sakladık."

#: ../../tutorials/algorithms/09_IQPE.ipynb:844
msgid "Subsequent steps (2nd, 3rd)"
msgstr "Sonraki adımlar (2., 3.)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:846
msgid "Now we build the quantum circuit for the other remaining steps, the second and the third ones. As said in the first example, in these steps we have the additional sub-step of the phase correction."
msgstr "Şimdi diğer kalan ikinci ve üçüncü adımlar için kuantum devresini oluşturuyoruz. İlk örnekte de söylendiği gibi, bu adımlarda, faz düzeltmesinin ek alt adımı mevcut."

#: ../../tutorials/algorithms/09_IQPE.ipynb:884
msgid "In order to extract the phase bit :math:`\\varphi_{2}`, we perform a phase correction of :math:`-\\pi\\varphi_3/2`."
msgstr ":math:`\\varphi_{2}` faz bitini çıkarmak için, :math:`-\\pi\\varphi_3/2` faz düzeltmesini yapıyoruz."

#: ../../tutorials/algorithms/09_IQPE.ipynb:886
msgid "So, after the reset we apply the phase gate :math:`P(\\theta)` with phase :math:`\\theta=-\\pi/2` conditioned by the classical bit :math:`c_0` (:math:`=\\varphi_3`)."
msgstr "O zaman bu sıfırlamadan sonra, :math:`c_0` (:math:`=\\varphi_3`) klasik bitiyle şartlandırılmış :math:`\\theta=-\\pi/2` fazına sahip :math:`P(\\theta)` faz kapısını uygularız."

#: ../../tutorials/algorithms/09_IQPE.ipynb:920
msgid "We apply the :math:`CU` operations as we did in the first step. For the second step we have :math:`t=m-2`, hence :math:`2^t=2`. So we apply :math:`\\text{MCP}(\\pi/4)` :math:`2` times. And then we perform the X-measurement of the qubit :math:`q_0`, storing the phase bit :math:`\\varphi_2` in the bit :math:`c_1`."
msgstr "İlk adımda yaptığımız gibi yine :math:`CU` işlemlerini uyguluyoruz. İkinci adım için elimizde :math:`t=m-2` var, dolayısıyla :math:`2^t=2`. Yani, :math:`2` kere :math:`\\text{MCP}(\\pi/4)` uyguluyoruz. Ve sonra, :math:`q_0` kübitinin X-ölçümünü gerçekleştiriyoruz ve :math:`\\varphi_2` faz bitini :math:`c_1` bitinde depoluyoruz."

#: ../../tutorials/algorithms/09_IQPE.ipynb:954
msgid "All substeps of the 3rd step"
msgstr "3. adımın tüm alt adımları"

#: ../../tutorials/algorithms/09_IQPE.ipynb:956
msgid "For the 3rd and last step, we perform the reset and initialization of the auxiliary qubit as done in the second step."
msgstr "3. ve son adım için ikinci adımda yaptığımız gibi yardımcı kübitin resetlenmesi ve başlatılmasını gerçekleştiriyoruz."

#: ../../tutorials/algorithms/09_IQPE.ipynb:958
msgid "Then at the 3rd step we have to perform the phase correction of :math:`-2\\pi 0.0\\varphi_{2}\\varphi_{3}= -2\\pi \\left(\\frac{\\varphi_2}{4}+\\frac{\\varphi_3}{8}\\right)=-\\frac{\\varphi_2\\pi}{2}-\\frac{ \\varphi_3\\pi}{4}`, thus we have to apply 2 conditioned phase corrections, one conditioned by :math:`\\varphi_3` (:math:`=c_0`) and the other by :math:`\\varphi_2`\\ (:math:`=c_1`). To do this we have to apply the following: - gate :math:`P(-\\pi/4)` conditioned by :math:`c_0=1`, that is, by :math:`c=001` (``c_if`` with value :math:`1`) - gate :math:`P(-\\pi/2)` conditioned by :math:`c_1=1`, that is, the gate is applied when :math:`c=010` (``c_if`` with values :math:`2`) - gate :math:`P(-3\\pi/4)` conditioned by :math:`c_1=1` and :math:`c_0=1` that is, the gate is applied when :math:`c=011` (``c_if`` with values :math:`3`)"
msgstr "Ardından, üçüncü adımda :math:`-2\\pi 0.0\\varphi_{2}\\varphi_{3}= -2\\pi \\left(\\frac{\\varphi_2}{4}+\\frac{\\varphi_3}{8}\\right)=-\\frac{\\varphi_2\\pi}{2}-\\frac{ \\varphi_3\\pi}{4}` faz düzeltmesini uygulamamız gerekiyor, dolayısıyla, biri :math:`\\varphi_3` (:math:`=c_0`) ile ve diğeri :math:`\\varphi_2`\\ (:math:`=c_1`) ile koşullandırılmış olan 2 koşullandırılmış faz düzeltmesi uygulamamız gerekiyor. Bunu yapmak için şunu uygulamamız gerekir: - :math:`c_0=1` ile, yani :math:`c=001` ile (:math:`1` değeriyle ``c_if``) koşullandırılmış :math:`P(-\\pi/4)` kapısı - :math:`c_1=1` ile, yani :math:`c=010` (:math:`2` değerleriyle ``c_if``) iken uygulanacak şekilde koşullandırılmış :math:`P(-\\pi/2)` kapısı - :math:`c_1=1` ve :math:`c_0=1` ile koşullandırılmış, yani :math:`c=011` (:math:`3` değerleriyle ``c_if``) iken uygulanacak şekilde koşullandırılmış :math:`P(-3\\pi/4)` kapısı"

#: ../../tutorials/algorithms/09_IQPE.ipynb:961
msgid "Next, the :math:`CU` operations: we apply :math:`2^t` times the :math:`\\text{MCP}(\\pi/4)` gate and since at the 3rd step :math:`t=m-3=0`, we apply the gate only once."
msgstr "Sonra, :math:`CU` işlemleri: :math:`2^t` çarpı :math:`\\text{MCP}(\\pi/4)` geçitini uygularız ve 3. adımdan itibaren :math:` t=m-3=0`, geçidi sadece bir kez uyguluyoruz."

#: ../../tutorials/algorithms/09_IQPE.ipynb:1009
msgid "Now, we execute the circuit with the simulator without noise."
msgstr "Şimdi, devreyi simülatörle gürültüsüz olarak çalıştırıyoruz."

#: ../../tutorials/algorithms/09_IQPE.ipynb:1047
msgid "We have obtained :math:`100\\%` probability to find :math:`\\varphi=0.125`, that is, :math:`1/8`, as expected."
msgstr "Beklendiği gibi :math:`\\varphi=0.125` yani :math:`1/8` bulmak için :math:`100\\%` olasılığını elde ettik."

