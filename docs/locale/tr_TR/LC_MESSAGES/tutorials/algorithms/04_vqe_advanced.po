msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-24 10:41+0000\n"
"PO-Revision-Date: 2023-08-14 19:07\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/algorithms/04_vqe_advanced.po\n"
"X-Crowdin-File-ID: 9450\n"
"Language: tr_TR\n"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:10
msgid "This page was generated from `tutorials/algorithms/04_vqe_advanced.ipynb`__."
msgstr "Bu sayfa `tutorials/algorithms/04_vqe_advanced.ipynb`__ adresinden oluşturulmuştur."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:9
msgid "Advanced VQE usage"
msgstr "Gelişmiş VQE kullanımı"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:11
msgid "There exist several parameters for configuring and using more advanced `VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html>`__ capabilities. This tutorial will cover the parameters such as ``initial point``, ``expectation`` and ``gradient``."
msgstr "Daha gelişmiş `VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html>`__ özelliklerini yapılandırmak ve kullanmak için birkaç parametre vardır. Bu eğitimde``initial point``, ``expectation`` ve ``gradient`` gibi parametreler ele alınacaktır."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:13
msgid "It will also cover advanced simulator use such as using Aer with the Matrix Product State method."
msgstr "Ayrıca, Aer'i Matris Çarpım Durumu yöntemiyle kullanmak gibi gelişmiş simülatör kullanımını da kapsayacaktır."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:39
msgid "Here we will use the same operator as used in the other VQE algorithms tutorials."
msgstr "Burada diğer VQE algoritmalarının eğitimlerinde kullanılan operatörün aynısını kullanacağız."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:65
msgid "Initial point"
msgstr "Başlangıç noktası"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:67
msgid "The ``initial_point`` parameter allows the optimization to begin at the given point, where the point is a list of parameters that will configure the ansatz. By default the initial point is ``None`` which means that VQE will choose one. The choice in in this case is if the supplied ansatz has a preferred point, based on the initial state provided to it, then this will be chosen, otherwise a random initial point that fits with any bounds the ansatz has will be chosen. If an initial point is supplied it will take priority though and be used - note though it must match in length to the number of parameters in the ansatz circuit."
msgstr "``initial_point`` parametresi, optimizasyonun verilen noktada başlamasına izin verir; burada nokta, ansatz'ı yapılandıracak bir parametre listesidir. Varsayılan olarak başlangıç noktası ``None``, bu da VQE'nin birini seçeceği anlamına gelir. Bu durumda seçim, sağlanan ansatz'ın kendisine sağlanan ilk duruma bağlı olarak tercih edilen bir noktası varsa, o zaman bu seçilecektir, aksi takdirde ansatz'ın herhangi bir sınırına uyan rastgele bir başlangıç noktası seçilecektir. Bir başlangıç noktası sağlanmışsa, yine de öncelik kazanacak ve kullanılacaktır - ansatz devresindeki parametre sayısıyla uzunluk olarak eşleşmesi gerektiğine dikkat edin."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:70
msgid "Why to use a initial point? One reason would be if you have guess a reasonable starting point for the problem or perhaps know have information from a prior experiment."
msgstr "Neden bir başlangıç noktası kullanmalı? Bunun bir nedeni, problem için makul bir başlangıç noktası tahmin etmeniz veya belki de önceki bir deneyden bilgi sahibi olmanız olabilir."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:72
msgid "To demonstrate the use let’s first simply repeat the first working example from the `algorithms introduction <01_algorithms_introduction.ipynb#A-complete-working-example>`__ tutorial to get a solution’s optimal point."
msgstr "Kullanımı göstermek için önce, çözümün optimal noktasını elde etmek için `algorithms introduction <01_algorithms_introduction.ipynb#A-complete-working-example>`__ öğreticisindeki ilk çalışma örneğini tekrarlayalım."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:177
msgid "Now we can take the ``optimal_point`` from the above result and use it as the ``initial_point`` here."
msgstr "Şimdi yukarıdaki sonuçtan ``optimal_point``i alıp burada ``initial_point`` olarak kullanabiliriz."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:291
msgid "Here we see that result was arrived at much more quickly with ``optimizer_evals`` when it started from a random value when the initial point was not supplied (default of None)."
msgstr "Burada ilk nokta sağlanmadığında rastgele bir değerden başladığında (varsayılan Hiçbiri) ``optimizer_evals`` ile sonuca çok daha hızlı ulaşıldığını görüyoruz."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:293
msgid "Where this becomes useful for examples where we the solution to one problem can be used to for a guess for the solution to a very close similar problem. Chemistry is very good example where we change the inter-atomic distance(s) of molecule to plot a dissociation profile. When the distance changes are small we expect the solution to still be nearby the prior one. One technique is to simply use the optimal point from one solution as the starting point for the next step. Now more complex techniques are possible that do some extrapolation to compute an initial position based on prior solution(s) rather than directly use the prior solution."
msgstr "Bunun, bir problemin çözümünün, çok yakın benzer bir problemin çözümü için bir tahminde bulunmak için kullanılabileceği örnekler için yararlı olduğu yerlerde. Kimya, bir ayrışma profili çizmek için molekülün atomlar arası uzaklık(lar)ını değiştirdiğimiz çok iyi bir örnektir. Mesafe değişiklikleri küçük olduğunda, çözümün hala öncekine yakın olmasını bekleriz. Bir teknik, bir sonraki adım için başlangıç noktası olarak bir çözümdeki en uygun noktayı kullanmaktır. Şimdi, önceki çözümü doğrudan kullanmak yerine önceki çözüm(ler) e dayalı bir başlangıç pozisyonu hesaplamak için bazı ekstrapolasyonlar yapan daha karmaşık teknikler mümkündür."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:306
msgid "Expectation"
msgstr "Beklenti"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:308
msgid "The energy of the Hamiltonian operator that VQE is working on is the expectation value when evaluated with the parameterized ansatz. To compute the expectation value VQE uses an instance of an `expectation <https://qiskit.org/documentation/apidoc/qiskit.opflow.expectations.html>`__ object. Such an instance may be supplied via the ``expectation`` parameter, or in the default case, where it has a value of ``None``, VQE will use the `ExpectationFactory <https://qiskit.org/documentation/stubs/qiskit.opflow.expectations.ExpectationFactory.html>`__ to create itself a suitable instance based on the supplied backend."
msgstr "VQE'nin üzerinde çalıştığı Hamilton operatörünün enerjisi, parametreli ansatz ile değerlendirildiğinde beklenen değerdir. Beklenti değerini hesaplamak için VQE, bir `expectation <https://qiskit.org/documentation/apidoc/qiskit.opflow.expectations.html>`__ nesnesinin bir örneğini kullanır. Böyle bir örnek, ``expectation`` parametresi aracılığıyla sağlanabilir veya ``None`` değerine sahip olduğu varsayılan durumda, VQE, sağlanan arka uca dayalı olarak kendisine uygun bir örnek oluşturmak için `ExpectationFactory <https://qiskit.org/documentation/stubs/qiskit.opflow.expectations.ExpectationFactory.html>`__ kullanacaktır."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:311
msgid "For most cases letting VQE create a suitable instance is sufficient. However the Qiskit Aer aer_simulator supports a snapshot instruction that can be used in conjunction with the operator expectation computation. If used then the outcome is ideal, i.e. like the statevector simulator, and has no shot noise. Since people normally choose the aer_simulator to have shot noise (sampling noise), and be more like a real-device outcome, VQE has an ``include_custom`` flag that is passed on to the ExpectationFactory. When using Aer qasm simulator, and this is set ``True``, the factory will return ``AerPauliExpectation`` which uses the snapshot instruction, when ``False``, default, then the regular ``PauliExpectation`` is returned."
msgstr "Çoğu durumda, VQE'nin uygun bir örnek oluşturmasına izin vermek yeterlidir. Ancak Qiskit Aer aer_simulator, operatör beklenti hesaplamasıyla birlikte kullanılabilen bir anlık görüntü talimatını destekler. Kullanılırsa sonuç idealdir, yani durum vektörü simülatörü gibidir ve deneme gürültüsü yoktur. İnsanlar normalde aer_simülatörü deneme gürültüsü (örnekleme gürültüsü) için seçtiklerinden ve daha çok gerçek cihaz sonucu gibi olduğundan, VQE'nin ExpectationFactory  ile iletilen bir ``include_custom`` geçiş bayrağı vardır. Aer qasm simülatörünü kullanırken ve bu ``True`` olarak ayarlandığında, fabrika anlık görüntü talimatını kullanan``AerPauliExpectation``ı döndürür, ``False`` varsayılan olduğunda, normal ``PauliExpectation`` döndürülür."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:314
msgid "The following example shows ``include_custom=True`` where the outcome matches the statevector simulator. In fact it can be better/faster to do this than use the statevector_simulator directly. This is because in the latter case when the Hamiltonian is a sum of Paulis it must be converted to matrix form, and this is avoided when using the snapshot instruction done when include_custom is True."
msgstr "Aşağıdaki örnek, sonucun ``include_custom=True`` ile eşleştiği durum vektör simülatörünü gösterir. Aslında bu, statevector_simulator'ü doğrudan kullanmadan daha iyi/daha hızlı olabilir. Bunun nedeni, Hamiltonyen'in, Pauli'lerin toplamı olduğu ikinci durumda matris formuna dönüştürülmesi gerektiğidir ve include_custom True olduğunda yapılan anlık görüntü talimatı kullanılırken bundan kaçınılır."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:417
msgid "In case you have doubts here is the aer_simulator again but include_custom has been left to default to False. The optimization ended abruptly, presumably due to the shot noise confusing the SLSQP optimizer."
msgstr "Şüpheniz varsa, burada yine aer_simulator var, ancak include_custom varsayılan olarak False olarak bırakıldı. Optimizasyon, muhtemelen SLSQP optimize edicinin kafasını karıştıran atış gürültüsü nedeniyle aniden sona erdi."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:536
msgid "Changing the optimizer to SPSA, which is designed to work in noisy environments, gets us a better result. Though the noise has affected the outcome so it’s not as accurate."
msgstr "Optimize ediciyi gürültülü ortamlarda çalışmak üzere tasarlanmış SPSA olarak değiştirmek bize daha iyi bir sonuç verir. Gürültü sonucu etkilemiş olsa da, o kadar doğru değil."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:638
msgid "As mentioned above, an expectation object can be explicitly given (so the internal ``ExpectationFactory`` and include_custom are never used/needed. Below we create an ``AerPauliExpectation`` and pass this to VQE. We can see the result matches that above where we set include_custom to True and let VQE create its own expectation object."
msgstr "Yukarıda belirtildiği gibi, bir beklenti nesnesi açıkça verilebilir (böylece dahili ``ExpectationFactory`` ve include_custom asla kullanılmaz/gerekli değildir. Aşağıda bir ``AerPauliExpectation`` oluştururuz ve bunu VQE'ye iletiriz. Yukarıdaki include_custom öğesini True olarak ayarladık ve VQE'nin kendi beklenti nesnesini oluşturmasına izin verdik."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:741
msgid "By default, the ``PauliExpectation`` object, that would have be chosen when include_custom is False (or when using Aer aer_simulator, or a real device) groups Paulis into commuting sets. This is efficient as it runs less circuits to compute the expectation. However, if for some reason you wanted to run a circuit for each Pauli then then grouping can be turned off when constructing the PauliExpectation. You need to explicitly pass in such an expectation instance to VQE to have it work this way though as shown below."
msgstr "Varsayılan olarak, include_custom öğesi False olduğunda (veya Aer aer_simulator veya gerçek bir aygıt kullanılırken) seçilecek olan ``PauliExpectation`` nesnesi, Paulis'i gidip gelme kümeleri halinde gruplandırır. Bu, beklentiyi hesaplamak için daha az devre çalıştırdığı için verimlidir. Ancak, herhangi bir nedenle her Pauli için bir devre çalıştırmak isterseniz, o zaman PauliExpectation oluşturulurken gruplama kapatılabilir. Aşağıda gösterildiği gibi, bu şekilde çalışmasını sağlamak için böyle bir beklenti örneğini açıkça VQE'ye iletmeniz gerekir."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:846
msgid "Gradient"
msgstr "Gradyan"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:848
msgid "Optimizers that use a gradient-based technique can be supplied with a user defined gradient that will be used instead of their default gradient computation which is usually done by simple finite difference. Gradients are passed indirectly via to the optimizer via its ``gradient`` parameter."
msgstr "Gradyan tabanlı bir teknik kullanan optimize ediciler, genellikle basit sonlu fark ile yapılan varsayılan gradyan hesaplamaları yerine kullanılacak kullanıcı tanımlı bir gradyan ile sağlanabilir. Gradyanlar, ``gradient`` parametresi aracılığıyla optimize ediciye dolaylı olarak aktarılır."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:850
msgid "As the use of a user supplied ``gradient`` was shown in the `Monitoring VQE Convergence <02_vqe_convergence.ipynb#Using-Gradient-framework>`__ tutorial I will simply refer you there. Also the `Gradients framework <../operators/02_gradients_framework.ipynb>`__ tutorial has much more about the gradients themselves."
msgstr "Kullanıcı tarafından sağlanan bir ``gradient`` kullanımı, `Monitoring VQE Convergence <02_vqe_convergence.ipynb#Using-Gradient-framework>`__ eğitselinde gösterildiğinden, sizi oraya yönlendireceğim. Ayrıca, `Gradients framework <../operators/02_gradients_framework.ipynb>`__ eğitseli, gradyanların kendileri hakkında çok daha fazla bilgiyi içerir."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:862
msgid "Quantum Instance and advanced simulation"
msgstr "Kuantum Örneği ve gelişmiş simülasyon"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:864
msgid "While you may be familiar with passing a QuantumInstancen created from a ``aer_simulator_statevector`` a ``aer_simulator`` or real device backend, it is possible to use the advanced simulation modes of Aer too when applicable. For instance we can easily use the Aer `Matrix Product State <../simulators/7_matrix_product_state_method.ipynb>`__ method, that has the potential to scale to larger numbers of qubits."
msgstr "Bir ``aer_simulator_statevector``dan ``aer_simulator`` veya gerçek cihaz arka ucundan oluşturulan bir QuantumInstancen'i geçirmeye aşina olsanız da, uygun olduğunda Aer'in gelişmiş simülasyon modlarını kullanmak da mümkündür. Örneğin, daha fazla sayıda kübite ölçekleme potansiyeline sahip Aer `Matrix Product State <../simulators/7_matrix_product_state_method.ipynb>`__ yöntemini kolayca kullanabiliriz."

