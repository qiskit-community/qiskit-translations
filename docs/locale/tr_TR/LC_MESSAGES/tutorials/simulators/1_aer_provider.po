msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-12 15:01+0000\n"
"PO-Revision-Date: 2020-12-19 06:39\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/simulators/1_aer_provider.po\n"
"X-Crowdin-File-ID: 9160\n"
"Language: tr_TR\n"

#: ../../tutorials/simulators/1_aer_provider.ipynb:10
msgid "This page was generated from `tutorials/simulators/1_aer_provider.ipynb`__."
msgstr "Bu sayfa `tutorials/simulators/1_aer_provider.ipynb`__ adresinden oluşturulmuştur."

#: ../../tutorials/simulators/1_aer_provider.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/simulators/1_aer_provider.ipynb>`_."
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:9
msgid "Simulators"
msgstr "Simülatörler"

#: ../../tutorials/simulators/1_aer_provider.ipynb:21
msgid "Introduction"
msgstr "Giriş"

#: ../../tutorials/simulators/1_aer_provider.ipynb:23
msgid "This notebook shows how to import *Qiskit Aer* simulator backends and use them to execute ideal (noise free) Qiskit Terra circuits."
msgstr "Bu not defteri *Qiskit Aer* simülatör arka uçlarının nasıl içe aktarılacağını ve ideal (gürültüsüz) Qiskit Terra devrelerini yürütmek için nasıl kullanılacağını gösterir."

#: ../../tutorials/simulators/1_aer_provider.ipynb:50
msgid "Qiskit Aer simulator backends"
msgstr "Qiskit Aer simülatörü arka uçları"

#: ../../tutorials/simulators/1_aer_provider.ipynb:52
msgid "Qiskit Aer currently includes three high performance simulator backends: \\* ``QasmSimulator``: Allows ideal and noisy multi-shot execution of qiskit circuits and returns counts or memory \\* ``StatevectorSimulator``: Allows ideal single-shot execution of qiskit circuits and returns the final statevector of the simulator after application \\* ``UnitarySimulator``: Allows ideal single-shot execution of qiskit circuits and returns the final unitary matrix of the circuit itself. Note that the circuit cannot contain measure or reset operations for this backend"
msgstr "Qiskit Aer şu anda üç yüksek performanslı simülatör arka ucu içeriyor: \\*``QasmSimulator``: qiskit devrelerinin ideal ve gürültülü çoklu denemeyle yürütülmesine izin verir ve sayıları veya belleği döndürür \\*``StatevectorSimulator``: Qiskit devrelerinin ideal tek denemeyle yürütülmesine izin verir, uygulamadan sonra simülatörün son statevektörünü döndürür \\*``UnitarySimulator``: Qiskit devrelerinin ideal tek adımda yürütülmesine izin verir ve devrenin kendisinin nihai üniter matrisini döndürür. Devrenin bu arka uç için ölçüm veya sıfırlama işlemleri içeremeyeceğini unutmayın"

#: ../../tutorials/simulators/1_aer_provider.ipynb:55
msgid "These backends are found in the ``Aer`` provider with the names ``qasm_simulator``, ``statevector_simulator`` and ``unitary_simulator``, respectively."
msgstr "Bu arka uçlar, sırasıyla ``qasm_simulator``, ``statevector_simulator`` ve ``unitary_simulator`` adlarıyla ``Aer`` sağlayıcısında bulunur."

#: ../../tutorials/simulators/1_aer_provider.ipynb:105
msgid "The simulator backends can also be directly imported from ``qiskit.providers.aer``"
msgstr "Simülatör arka uçları doğrudan ``qiskit.providers.aer`` adresinden de içe aktarılabilir"

#: ../../tutorials/simulators/1_aer_provider.ipynb:127
msgid "QasmSimulator"
msgstr "QasmSimulator"

#: ../../tutorials/simulators/1_aer_provider.ipynb:129
msgid "The ``QasmSimulator`` backend is designed to mimic an actual device. It executes a Qiskit ``QuantumCircuit`` and returns a count dictionary containing the final values of any classical registers in the circuit. The circuit may contain *gates*, *measurements*, *resets*, *conditionals*, and other advanced simulator options that will be discussed in another notebook."
msgstr "``QasmSimulator`` arka ucu, gerçek bir cihazı taklit edecek şekilde tasarlanmıştır. Bir Qiskit ``QuantumCircuit`` i yürütür ve devredeki klasik yazmaçların son değerlerini içeren bir sayım sözlüğü döndürür. Devre *kapılar*, *ölçümler*, *sıfırlamalar*, *şartlar* ve başka bir not defterinde ele alınacak diğer gelişmiş simülatör seçeneklerini içerebilir."

#: ../../tutorials/simulators/1_aer_provider.ipynb:132
#: ../../tutorials/simulators/1_aer_provider.ipynb:285
msgid "Simulating a quantum circuit"
msgstr "Bir kuantum devresini simüle etme"

#: ../../tutorials/simulators/1_aer_provider.ipynb:134
#: ../../tutorials/simulators/1_aer_provider.ipynb:287
msgid "The basic operation executes a quantum circuit and returns a counts dictionary of measurement outcomes. Here we execute a simple circuit that prepares a 2-qubit Bell-state :math:`|\\psi\\rangle = \\frac{1}{2}(|0,0\\rangle + |1,1 \\rangle)` and measures both qubits."
msgstr "Temel işlem bir kuantum devresi yürütür ve ölçüm sonuçlarının bir sayım sözlüğünü döndürür. Burada 2 qubit Bell durumu :math:`|\\psi\\rangle = \\frac{1}{2}(|0,0\\rangle + |1,1 \\rangle)` hazırlayan ve her iki kübiti de ölçen basit bir devre yürütüyoruz."

#: ../../tutorials/simulators/1_aer_provider.ipynb:177
msgid "Returning measurement outcomes for each shot"
msgstr "Her deneme için ölçüm sonuçlarını geri döndürme"

#: ../../tutorials/simulators/1_aer_provider.ipynb:179
msgid "The ``QasmSimulator`` also supports returning a list of measurement outcomes for each individual shot. This is enabled by setting the keyword argument ``memory=True`` in the ``assemble`` or ``execute`` function."
msgstr "``QasmSimulator`` ayrıca her bir deneme için bir ölçüm sonuçları listesi döndürmeyi de destekler. Bu, ``assemble`` veya ``execute`` fonksiyonunda anahtar kelime argümanı ``memory=True`` ayarlanarak etkinleştirilir."

#: ../../tutorials/simulators/1_aer_provider.ipynb:232
#: ../../tutorials/simulators/1_aer_provider.ipynb:374
msgid "Starting simulation with a custom initial state"
msgstr "Özel bir başlangıç durumuyla simülasyon başlatma"

#: ../../tutorials/simulators/1_aer_provider.ipynb:234
msgid "The ``QasmSimulator`` allows setting a custom initial statevector for the simulation. This means that all experiments in a Qobj will be executed starting in a state :math:`|\\psi\\rangle` rather than the all zero state :math:`|0,0,..0\\rangle`. The custom state may be set in the circuit using the ``initialize`` method."
msgstr "``QasmSimulator``, simülasyon için özel bir başlangıç statevector ayarlamasına izin verir. Bu, bir Qobj'deki tüm deneylerin tümü sıfır durumu :math:`|0,0,..0\\rangle` yerine bir :math:`|\\psi\\rangle` durumunda başlayarak yürütüleceği anlamına gelir. Özel durum devrede ``initialize`` yöntemi kullanılarak ayarlanabilir."

#: ../../tutorials/simulators/1_aer_provider.ipynb:236
msgid "**Note:** \\* The initial statevector must be a valid quantum state :math:`|\\langle\\psi|\\psi\\rangle|=1`. If not, an exception will be raised. \\* The simulator supports this option directly for efficiency, but it can also be unrolled to standard gates for execution on actual devices."
msgstr "**Not:**\\* İlk durum vektörü geçerli bir kuantum durumu :math:`|\\langle\\psi|\\psi\\rangle|=1` olmalıdır. Aksi takdirde, bir kuraldışılık ortaya çıkar. \\* Simülatör, bu seçeneği doğrudan verimlilik için destekler, ancak gerçek cihazlarda yürütme için standart geçitlere de açılabilir."

#: ../../tutorials/simulators/1_aer_provider.ipynb:238
msgid "We now demonstrate this functionality by setting the simulator to be initialized in the final Bell-state of the previous example:"
msgstr "Şimdi bu işlevselliği, simülatörü önceki örneğin nihai Bell durumunda başlatılacak şekilde ayarlayarak gösteriyoruz:"

#: ../../tutorials/simulators/1_aer_provider.ipynb:280
msgid "StatevectorSimulator"
msgstr "StatevectorSimulator"

#: ../../tutorials/simulators/1_aer_provider.ipynb:282
msgid "The ``StatevectorSimulator`` executes a single shot of a Qiskit ``QuantumCircuit`` and returns the final quantum statevector of the simulation. The circuit may contain *gates*, and also *measurements*, *resets*, and *conditional* operations."
msgstr "``StatevectorSimulator``, tek bir Qiskit ``QuantumCircuit`` denemesini yürütür ve simülasyonun son kuantum durum vektörünü döndürür. Devre *kapıları* ve ayrıca *ölçümleri*, *sıfırlamaları* ve *koşullu* işlemleri içerebilir."

#: ../../tutorials/simulators/1_aer_provider.ipynb:329
msgid "Simulating a quantum circuit with measurement"
msgstr "Ölçümle bir kuantum devresinin simülasyonunu yapma"

#: ../../tutorials/simulators/1_aer_provider.ipynb:331
msgid "Note that if a circuit contains *measure* or *reset* the final statevector will be a conditional statevector *after* simulating wave-function collapse to the outcome of a measure or reset. For the Bell-state circuit this means the final statevector will be *either* :math:`|0,0\\rangle` *or* :math:`|1, 1\\rangle`."
msgstr "Bir devrenin *ölçüm* veya *sıfırlama* içermesi durumunda, son durum vektörünün, bir ölçüm veya sıfırlamanın sonucuna göre dalga fonksiyonu çöküşünü simüle ettikten *sonra* koşullu bir durum vektörü olacağını unutmayın. Bell durumu devresi için bu, son durum vektörünün *ya* :math:`|0,0\\rangle` *veya* :math:`|1, 1\\rangle` olacağı anlamına gelir."

#: ../../tutorials/simulators/1_aer_provider.ipynb:376
msgid "Like the ``QasmSimulator``, the ``StatevectorSimulator`` also allows setting a custom initial statevector for the simulation. Here we run the previous initial statevector example on the ``StatevectorSimulator`` and initialize it to the Bell state."
msgstr "``QasmSimulator`` gibi, ``StatevectorSimulator`` de simülasyon için özel bir başlangıç durum vektörü ayarlamaya izin verir. Burada önceki durum vektörü örneğini ``StatevectorSimulator`` üzerinde çalıştırıp Bell durumuna başlatıyoruz."

#: ../../tutorials/simulators/1_aer_provider.ipynb:417
msgid "Unitary Simulator"
msgstr "UnitarySimulator"

#: ../../tutorials/simulators/1_aer_provider.ipynb:419
msgid "The ``UnitarySimulator`` constructs the unitary matrix for a Qiskit ``QuantumCircuit`` by applying each gate matrix to an identity matrix. The circuit may only contain *gates*, if it contains *resets* or *measure* operations an exception will be raised."
msgstr "``UnitarySimulator``, her bir kapı matrisini bir üniter matrisine uygulayarak Qiskit ``QuantumCircuit`` için üniter matrisi oluşturur. Devre sadece *kapıları* içerebilir, eğer *sıfırlama* veya *ölçüm* işlemleri içeriyorsa bir kuraldışılık ortaya çıkar."

#: ../../tutorials/simulators/1_aer_provider.ipynb:422
msgid "Simulating a quantum circuit unitary"
msgstr "Bir kuantum devre üniteri simülasyonu"

#: ../../tutorials/simulators/1_aer_provider.ipynb:424
msgid "For this example we will return the unitary matrix corresponding to the previous examples circuit which prepares a bell state."
msgstr "Bu örnek için, bir Bell durumu hazırlayan önceki örnekler devresine karşılık gelen üniter matrisi döndüreceğiz."

#: ../../tutorials/simulators/1_aer_provider.ipynb:492
msgid "Setting a custom initial unitary"
msgstr "Özel bir başlangıç üniteri ayarlama"

#: ../../tutorials/simulators/1_aer_provider.ipynb:494
msgid "We may also set an initial state for the ``UnitarySimulator``, however this state is an initial *unitary matrix* :math:`U_i`, not a statevector. In this case the returned unitary will be :math:`U \\cdot U_i` given by applying the circuit unitary to the initial unitary matrix."
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:496
msgid "**Note:** \\* The initial unitary must be a valid unitary matrix :math:`U^\\dagger \\cdot U =\\mathbb{1}`. If not, an exception will be raised. \\* If a ``Qobj`` contains multiple experiments, the initial unitary must be the correct size for *all* experiments in the ``Qobj``, otherwise an exception will be raised."
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:498
msgid "Let us consider preparing the output unitary of the previous circuit as the initial state for the simulator:"
msgstr "Bir önceki devrenin üniter çıktısını simülatörün başlangıç durumu olarak hazırlamayı düşünelim:"

