msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-05 21:02+0000\n"
"PO-Revision-Date: 2022-01-05 22:37\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits/01_circuit_basics.po\n"
"X-Crowdin-File-ID: 9498\n"
"Language: tr_TR\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:10
msgid "This page was generated from `tutorials/circuits/01_circuit_basics.ipynb`__."
msgstr "Bu sayfa `tutorials/circuits/01_circuit_basics.ipynb`__ adresinden oluşturulmuştur."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:9
msgid "Circuit Basics"
msgstr "Devre Temelleri"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:11
msgid "Here, we provide an overview of working with Qiskit. Qiskit provides the basic building blocks necessary to program quantum computers. The fundamental unit of Qiskit is the `quantum circuit <https://en.wikipedia.org/wiki/Quantum_circuit>`__. A basic workflow using Qiskit consists of two stages: **Build** and **Run**. **Build** allows you to make different quantum circuits that represent the problem you are solving, and **Run** that allows you to run them on different backends. After the jobs have been run, the data is collected and postprocessed depending on the desired output."
msgstr "Burada, Qiskit ile çalışmaya genel bir bakış sunuyoruz. Qiskit, kuantum bilgisayarları programlamak için gerekli temel yapı taşlarını sağlar. Qiskit'in temel birimi `quantum circuit <https://en.wikipedia.org/wiki/Quantum_circuit>`__'dir. Qiskit kullanan temel bir iş akışı iki aşamadan oluşur: **Oluştur** ve **Çalıştır**. **Yap**, çözdüğünüz sorunu temsil eden farklı kuantum devreleri oluşturmanıza ve bunları farklı arkayüzeylerde çalıştırmanıza olanak tanıyan **Çalıştır** yapmanıza olanak tanır. İşler çalıştırıldıktan sonra veriler toplanır ve istenen çıktıya bağlı olarak sonradan işlenir."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:36
msgid "Building the circuit"
msgstr "Devrenin oluşturulması"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:38
msgid "The basic element needed for your first program is the QuantumCircuit. We begin by creating a ``QuantumCircuit`` comprised of three qubits."
msgstr "İlk programınız için gereken temel unsur QuantumCircuit'dir. Üç kübitten oluşan bir ``QuantumCircuit`` oluşturarak başlıyoruz."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:60
msgid "After you create the circuit with its registers, you can add gates (“operations”) to manipulate the registers. As you proceed through the tutorials you will find more gates and circuits; below is an example of a quantum circuit that makes a three-qubit GHZ state"
msgstr "Devreyi yazmaçları ile oluşturduktan sonra, kayıtları işlemek için kapılar (“operations”) ekleyebilirsiniz. Eğitici Belgelerde ilerledikçe daha fazla kapı ve devre bulacaksınız; aşağıda, üç kübitlik bir GHZ durumu oluşturan bir kuantum devresi örneği verilmiştir"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:62
msgid "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}.\n\n"
msgstr "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}.\n\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:64
msgid "To create such a state, we start with a three-qubit quantum register. By default, each qubit in the register is initialized to :math:`|0\\rangle`. To make the GHZ state, we apply the following gates: - A Hadamard gate :math:`H` on qubit 0, which puts it into the superposition state :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}`. - A controlled-Not operation (:math:`C_{X}`) between qubit 0 and qubit 1. - A controlled-Not operation between qubit 0 and qubit 2."
msgstr "Böyle bir durum yaratmak için üç kübitlik bir kuantum yazmaçıyla başlıyoruz. Varsayılan olarak, yazmaçtaki her kübit :math:`|0\\rangle` olarak başlatılır. GHZ durumunu yapmak için takip eden kapıları uygularız: - Kübit 0'da bir Hadamard kapısı :math:`H`, bu kübiti süperpozisyon durumuna sokar :math:`\\left(|0\\rangle+|1\\rangle\\right )/\\sqrt{2}`. - kübit 0 ve kübit 1 arasında kontrollü-Not işlemi (:math:`C_{X}`). - Kübit 0 ve kübit 2 arasında kontrollü-Not işlemi."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:66
msgid "On an ideal quantum computer, the state produced by running this circuit would be the GHZ state above."
msgstr "İdeal bir kuantum bilgisayarda, bu devre çalıştırılarak üretilen durum, yukarıdaki GHZ durumu olacaktır."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:68
msgid "In Qiskit, operations can be added to the circuit one by one, as shown below."
msgstr "Qiskit'te işlemler aşağıda gösterildiği gibi tek tek devreye eklenebilir."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:121
msgid "Visualize Circuit"
msgstr "Devreyi Görselleştirme"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:123
msgid "You can visualize your circuit using Qiskit ``QuantumCircuit.draw()``, which plots the circuit in the form found in many textbooks."
msgstr "Devreyi birçok ders kitabında bulunan biçimde çizen Qiskit ``QuantumCircuit.draw()`` kullanarak devrenizi görselleştirebilirsiniz."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:153
msgid "In this circuit, the qubits are put in order, with qubit zero at the top and qubit two at the bottom. The circuit is read left to right (meaning that gates that are applied earlier in the circuit show up further to the left)."
msgstr "Bu devrede, kübitler üstte kübit sıfır ve altta kübit iki olacak şekilde sıralanır. Devre soldan sağa okunur (yani devrede daha önce uygulanan kapılar daha solda görünür)."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:168
msgid "When representing the state of a multi-qubit system, the tensor order used in Qiskit is different than that used in most physics textbooks. Suppose there are :math:`n` qubits, and qubit :math:`j` is labeled as :math:`Q_{j}`. Qiskit uses an ordering in which the :math:`n^{\\mathrm{th}}` qubit is on the left side of the tensor product, so that the basis vectors are labeled as :math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0`."
msgstr "Çok kübitli bir sistemin durumunu temsil ederken, Qiskit'te kullanılan tensör sırası, çoğu fizik ders kitabında kullanılandan farklıdır. Diyelim ki :math:`n` kübitler var ve kübit :math:`j` :math:`Q_{j}` olarak etiketlendi. Qiskit, :math:`n^{\\mathrm{th}}` kübitinin tensör ürününün sol tarafında olduğu bir sıralama kullanır, böylece temel vektörler :math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0` olarak etiketlenir."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:170
msgid "For example, if qubit zero is in state 0, qubit 1 is in state 0, and qubit 2 is in state 1, Qiskit would represent this state as :math:`|100\\rangle`, whereas many physics textbooks would represent it as :math:`|001\\rangle`."
msgstr "Örneğin, 0.kübit, 0 durumundaysa, 1.kübit 0 durumundaysa ve 2.kübit 1 durumundaysa, Qiskit bu durumu :math:`|100\\rangle' olarak gösterirken; birçok fizik ders kitabı bunu  :math:`|001\\rangle` şeklinde temsil eder."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:172
msgid "This difference in labeling affects the way multi-qubit operations are represented as matrices. For example, Qiskit represents a controlled-X (:math:`C_{X}`) operation with qubit 0 being the control and qubit 1 being the target as"
msgstr "Etiketlemedeki bu fark, çoklu kübitli işlemlerin matrisler olarak temsil edilme şeklini etkiler. Örneğin, Qiskit bir kontrollü-X (:math:`C_{X}`) işlemini, kübit 0'ın kontrol olduğu ve kübit 1'in hedef olduğu işlem olarak temsil eder."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:174
msgid "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}.\n\n"
msgstr "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}.\n\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:190
msgid "Simulating circuits"
msgstr "Devrelerin simülasyonu"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:192
msgid "To simulate a circuit we use the quant_info module in Qiskit. This simulator returns the quantum state, which is a complex vector of dimensions :math:`2^n`, where :math:`n` is the number of qubits (so be careful using this as it will quickly get too large to run on your machine)."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:194
msgid "There are two stages to the simulator. The first is to set the input state and the second to evolve the state by the quantum circuit."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:224
#: ../../tutorials/circuits/01_circuit_basics.ipynb:254
msgid "$$\n\n"
"\\begin{bmatrix}\n"
"\\tfrac{1}{\\sqrt{2}} & 0 & 0 & 0 & 0 & 0 & 0 & \\tfrac{1}{\\sqrt{2}}  \\\\\n"
" \\end{bmatrix}\n"
"$$"
msgstr "$$\n\n"
"\\begin{bmatrix}\n"
"\\tfrac{1}{\\sqrt{2}} & 0 & 0 & 0 & 0 & 0 & 0 & \\tfrac{1}{\\sqrt{2}}  \\\\\n"
" \\end{bmatrix}\n"
"$$"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:271
msgid "Qiskit also provides a visualization toolbox to allow you to view the state."
msgstr "Qiskit ayrıca bu sonuçları görüntülemenize izin veren bir görselleştirme araç kutusu da sağlar."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:273
msgid "Below, we use the visualization function to plot the qsphere and a hinton representing the real and imaginary components of the state density matrix :math:`\\rho`."
msgstr "Aşağıda, durum yoğunluk matrisinin gerçek ve hayali bileşenlerini çizmek için görselleştirme işlevini kullanıyoruz :math:`\\rho`."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:323
msgid "Unitary representation of a circuit"
msgstr "Bir devrenin üniter temsili"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:334
msgid "Qiskit’s quant_info module also has an operator method which can be used to make a unitary operator for the circuit. This calculates the :math:`2^n \\times 2^n` matrix representing the quantum circuit."
msgstr "Qiskit'in quant_info modülü ayrıca devreyi üniter bir operatör yapmak için kullanılabilecek bir operatör metoduna sahiptir. Bu, kuantum devresini temsil eden :math:`2^n \\times 2^n` matrisini hesaplamaktadır."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:454
msgid "OpenQASM backend"
msgstr "OpenQASM arka ucu"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:465
msgid "The simulators above are useful because they provide information about the state output by the ideal circuit and the matrix representation of the circuit. However, a real experiment terminates by *measuring* each qubit (usually in the computational :math:`|0\\rangle, |1\\rangle` basis). Without measurement, we cannot gain information about the state. Measurements cause the quantum system to collapse into classical bits."
msgstr "Yukarıdaki simülatörler yararlıdır çünkü ideal devre tarafından durum çıktısı ve devrenin matris gösterimi hakkında bilgi sağlarlar. Bununla birlikte, gerçek bir deney her bir kübitin *ölçülmesiyle* sona erer (genellikle hesaplama :math:`|0\\rangle, |1\\rangle` tabanında). Ölçüm olmadan, durum hakkında bilgi edinemeyiz. Ölçümler, kuantum sisteminin klasik bitlere çökmesine neden olur."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:467
msgid "For example, suppose we make independent measurements on each qubit of the three-qubit GHZ state"
msgstr "Örneğin, üç-kübitlik GHZ durumunun her bir kübiti üzerinde bağımsız ölçümler yaptığımızı varsayalım"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:469
msgid "|\\psi\\rangle = (|000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"
msgstr "|\\psi\\rangle = (|000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:471
msgid "and let :math:`xyz` denote the bitstring that results. Recall that, under the qubit labeling used by Qiskit, :math:`x` would correspond to the outcome on qubit 2, :math:`y` to the outcome on qubit 1, and :math:`z` to the outcome on qubit 0."
msgstr "ve :math:`xyz` sonuç bit dizisini göstersin. Qiskit tarafından kullanılan kübit etiketlemesinin altında şunu hatırlayın :math:`x` kübit 2'deki sonuca, :math:`y` kübit 1'deki sonuca, ve :math:`z` kübit 0'daki sonucuna karşılık gelir."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:477
msgid "Note: This representation of the bitstring puts the most significant bit (MSB) on the left, and the least significant bit (LSB) on the right. This is the standard ordering of binary bitstrings. We order the qubits in the same way (qubit representing the MSB has index 0), which is why Qiskit uses a non-standard tensor product order."
msgstr "Not: Bit dizisinin bu gösterimi en anlamlı biti (MSB) sola, en az anlamlı biti (LSB) sağa yerleştirir. Bu ikili bit dizilerinin standart sıralamasıdır. Kübitleri aynı şekilde sıralıyoruz (en anlamlı biti temsil eden kübit indeksi 0'dir), bu yüzden Qiskit standart olmayan bir tensör çarpımı sıralaması kullanıyor."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:483
msgid "Recall the probability of obtaining outcome :math:`xyz` is given by"
msgstr ":math:`xyz` çıktısının elde edilme olasılığının şu şekilde verildiğini hatırlayın"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:485
msgid "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"
msgstr "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:487
msgid "and as such for the GHZ state probability of obtaining 000 or 111 are both 1/2."
msgstr "ve bu şekilde GHZ durumu için 000 veya 111 elde etme olasılığı her ikisi için de 1/2'dir."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:489
msgid "To simulate a circuit that includes measurement, we need to add measurements to the original circuit above, and use a different Aer backend."
msgstr "Ölçümü içeren bir devreyi simüle etmek için yukarıdaki orijinal devreye ölçümler eklememiz ve farklı bir Aer arka ucu kullanmamız gerekir."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:531
msgid "This circuit adds a classical register, and three measurements that are used to map the outcome of qubits to the classical bits."
msgstr "Bu devre, klasik bir saklayıcı ve kübitlerin sonuçlarını klasik bitlerle eşleştirmek için kullanılan üç ölçüm ekler."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:533
msgid "To simulate this circuit, we use the ``qasm_simulator`` in Qiskit Aer. Each run of this circuit will yield either the bitstring 000 or 111. To build up statistics about the distribution of the bitstrings (to, e.g., estimate :math:`\\mathrm{Pr}(000)`), we need to repeat the circuit many times. The number of times the circuit is repeated can be specified in the ``execute`` function, via the ``shots`` keyword."
msgstr "Bu devreyi simüle etmek için Qiskit Aer'deki ``qasm_simulator``ı kullanıyoruz. Bu devrenin her çalışması 000 veya 111 bit dizisini verir. Bit dizelerinin dağılımı hakkında istatistik oluşturmak için (örneğin, :math:`\\mathrm{Pr}(000)`ı tahmin etmek için), devreyi birçok kez tekrar ettirmemiz gerekir. Devrenin tekrarlanma sayısı, ``shots`` anahtar kelimesi ile ``execute`` işlevinde belirlenebilir."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:574
msgid "Once you have a result object, you can access the counts via the function ``get_counts(circuit)``. This gives you the *aggregated* binary outcomes of the circuit you submitted."
msgstr "Bir sonuca sahip olduğunuzda, sayılara ``get_counts(circuit)`` işlevi üzerinden erişebilirsiniz. Bu, gönderdiğiniz devrenin *toplanmış* ikili sonuçlarını verir."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:619
msgid "Approximately 50 percent of the time, the output bitstring is 000. Qiskit also provides a function ``plot_histogram``, which allows you to view the outcomes."
msgstr "Zamanın yaklaşık yüzde 50'sinde, çıktı bit dizisi 000'dır. Qiskit ayrıca sonuçları görmenizi sağlayan bir ``plot_histogram`` fonksiyonu da sağlamaktadır."

#: ../../tutorials/circuits/01_circuit_basics.ipynb:650
msgid "The estimated outcome probabilities :math:`\\mathrm{Pr}(000)` and :math:`\\mathrm{Pr}(111)` are computed by taking the aggregate counts and dividing by the number of shots (times the circuit was repeated). Try changing the ``shots`` keyword in the ``execute`` function and see how the estimated probabilities change."
msgstr "Tahmini sonuç olasılıkları :math:`\\mathrm{Pr}(000)` ve :math:`\\mathrm{Pr}(111)` kümesindeki toplam sayıları alarak ve bunları deneme sayısına (devrenin tekrarlanma sayısı) bölünerek hesaplanır. ``execute`` işlevindeki ``shots`` anahtar kelimesini değiştirmeyi deneyin ve tahmini olasılıkların nasıl değiştiğini görün."

