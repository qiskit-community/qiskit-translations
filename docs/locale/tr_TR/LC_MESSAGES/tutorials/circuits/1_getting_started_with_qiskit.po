msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-02 15:42+0000\n"
"PO-Revision-Date: 2020-10-02 16:17\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits/1_getting_started_with_qiskit.po\n"
"X-Crowdin-File-ID: 9114\n"
"Language: tr_TR\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:10
msgid "This page was generated from `tutorials/circuits/1_getting_started_with_qiskit.ipynb`__."
msgstr "Bu sayfa `tutorials/circuits/1_getting_started_with_qiskit.ipynb`__ adresinden oluşturulmuştur."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:9
msgid "Getting Started with Qiskit"
msgstr "Qiskit'e Başlarken"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:11
msgid "Here, we provide an overview of working with Qiskit. The fundamental package of Qiskit is Terra that provides the basic building blocks necessary to program quantum computers. The fundamental unit of Qiskit is the `quantum circuit <https://en.wikipedia.org/wiki/Quantum_circuit>`__. A basic workflow using Qiskit consists of two stages: **Build** and **Execute**. **Build** allows you to make different quantum circuits that represent the problem you are solving, and **Execute** that allows you to run them on different backends. After the jobs have been run, the data is collected and postprocessed depending on the desired output."
msgstr "Burada, Qiskit ile çalışmaya genel bir bakış sunuyoruz. Qiskit'in temel paketi, kuantum bilgisayarları programlamak için gerekli temel yapı taşlarını sağlayan Terra'dır. Qiskit'in temel birimi `kuantum devresidir <https://en.wikipedia.org/wiki/Quantum_circuit>`__. Qiskit kullanan temel bir iş akışı iki aşamadan oluşur: **Oluşturma** ve **Yürütme**. **Oluşturma**, çözmekte olduğunuz sorunu temsil eden farklı kuantum devreleri oluşturmanıza ve bunları farklı arka uçlarda çalıştırmanıza izin veren **Yürütme** yapmanıza olanak tanır. İşler çalıştırıldıktan sonra, veriler toplanır ve istenen çıktıya bağlı olarak son işlemden geçirilir."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:36
msgid "Circuit Basics"
msgstr "Devre Temelleri"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:39
msgid "Building the circuit"
msgstr "Devrenin oluşturulması"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:41
msgid "The basic element needed for your first program is the QuantumCircuit. We begin by creating a ``QuantumCircuit`` comprised of three qubits."
msgstr "İlk programınız için gereken temel öğe QuantumCircuit'dir. Üç kübitten oluşan bir ``QuantumCircuit`` oluşturarak başlıyoruz."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:63
msgid "After you create the circuit with its registers, you can add gates (\"operations\") to manipulate the registers. As you proceed through the tutorials you will find more gates and circuits; below is an example of a quantum circuit that makes a three-qubit GHZ state"
msgstr "Devreyi saklayıcıları ile birlikte oluşturduktan sonra, saklayıcıları değiştirmek için kapılar (\"işlemler\") ekleyebilirsiniz. Eğitimlerde ilerledikçe daha fazla kapı ve devre bulacaksınız; aşağıda, üç-kübitlik GHZ durumunu yapan bir kuantum devresine bir örnek verilmiştir"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:65
msgid "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}.\n\n"
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:67
msgid "To create such a state, we start with a three-qubit quantum register. By default, each qubit in the register is initialized to :math:`|0\\rangle`. To make the GHZ state, we apply the following gates: - A Hadamard gate :math:`H` on qubit 0, which puts it into the superposition state :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}`. - A controlled-Not operation (:math:`C_{X}`) between qubit 0 and qubit 1. - A controlled-Not operation between qubit 0 and qubit 2."
msgstr "Böyle bir durum yaratmak için üç kübitlik bir kuantum yazmacı ile başlarız. Varsayılan olarak, yazmaçtaki her bir kübit :math:`|0\\rangle` ile başlatılır. GHZ durumunu yapmak için, aşağıdaki kapıları uygularız: - Kübit 0'a bir Hadamard kapısı :math:`H`, onu süperpozisyon durumuna :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}` getirir. - Kübit 0 ve kübit 1 arasında bir kontrollü-Değil işlemi (:math:`C_{X}`). - Kübit 0 ve kübit 2 arasında kontrollü-Değil işlemi."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:69
msgid "On an ideal quantum computer, the state produced by running this circuit would be the GHZ state above."
msgstr "İdeal bir kuantum bilgisayarında, bu devrenin çalıştırılmasıyla üretilen durum yukarıdaki GHZ durumu olacaktır."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:71
msgid "In Qiskit, operations can be added to the circuit one by one, as shown below."
msgstr "Qiskit'te işlemler, aşağıda gösterildiği gibi devreye birer birer eklenebilir."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:120
msgid "Visualize Circuit"
msgstr "Devreyi Görselleştir"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:122
msgid "You can visualize your circuit using Qiskit ``QuantumCircuit.draw()``, which plots the circuit in the form found in many textbooks."
msgstr "Devrenizi birçok ders kitabında bulunan formda çizen Qiskit ``QuantumCircuit.draw()`` kullanarak görselleştirebilirsiniz."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:152
msgid "In this circuit, the qubits are put in order, with qubit zero at the top and qubit two at the bottom. The circuit is read left to right (meaning that gates that are applied earlier in the circuit show up further to the left)."
msgstr "Bu devrede, kübitler, kübit sıfır üstte ve kübit iki altta olacak şekilde sıraya konur. Devre soldan sağa okunur (yani devrede daha önce uygulanan kapılar daha solda görünür)."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:167
msgid "When representing the state of a multi-qubit system, the tensor order used in Qiskit is different than that used in most physics textbooks. Suppose there are :math:`n` qubits, and qubit :math:`j` is labeled as :math:`Q_{j}`. Qiskit uses an ordering in which the :math:`n^{\\mathrm{th}}` qubit is on the left side of the tensor product, so that the basis vectors are labeled as :math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0`."
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:169
msgid "For example, if qubit zero is in state 0, qubit 1 is in state 0, and qubit 2 is in state 1, Qiskit would represent this state as :math:`|100\\rangle`, whereas many physics textbooks would represent it as :math:`|001\\rangle`."
msgstr "Örneğin, kübit sıfır 0 durumunda, kübit 1 0 durumunda ve kübit 2 1 durumunda ise, Qiskit bu durumu şu şekilde temsil eder :math:`|100\\rangle`, oysa birçok fizik ders kitabı bunu :math:`|001\\rangle` şeklinde temsil eder ."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:171
msgid "This difference in labeling affects the way multi-qubit operations are represented as matrices. For example, Qiskit represents a controlled-X (:math:`C_{X}`) operation with qubit 0 being the control and qubit 1 being the target as"
msgstr "Etiketlemedeki bu fark, çoklu-kübit işlemlerinin matris olarak temsil edilme şeklini etkiler. Örneğin, Qiskit kontrollü-X işlemini (:math:`C_ {X}`) kübit 0'ın kontrol ve kübit 1'in hedef olduğu bir şekilde temsil eder"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:173
msgid "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}.\n\n"
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:189
msgid "Simulating circuits using Qiskit Aer"
msgstr "Qiskit Aer kullanarak devreleri simüle etme"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:191
msgid "Qiskit Aer is our package for simulating quantum circuits. It provides many different backends for doing a simulation. There is also a basic, Python only, implementation called ``BasicAer`` in Terra that can be used as a drop-in replacement for ``Aer`` in the examples below."
msgstr "Qiskit Aer, kuantum devreleri simüle etmek için kullandığımız paketimizdir. Bir simülasyon yapmak için birçok farklı arka uç sağlar. Terra'da ``BasicAer`` adı verilen ve aşağıdaki örneklerde ``Aer`` için bir yedek olarak kullanılabilecek basit bir Python uygulaması da vardır."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:194
msgid "Statevector backend"
msgstr "Hal vektörü (statevector) arka ucu"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:196
msgid "The most common backend in Qiskit Aer is the ``statevector_simulator``. This simulator returns the quantum state, which is a complex vector of dimensions :math:`2^n`, where :math:`n` is the number of qubits (so be careful using this as it will quickly get too large to run on your machine)."
msgstr "Qiskit Aer'deki en yaygın arka uç ``statevector_simulator`` dür. Bu simülatör, karmaşık bir vektörü olan kuantum durumunu döndürür boyutunu :math:`2^n` olan, burada :math:`n`, kübit sayısıdır (bu yüzden bunu kullanırken dikkat edin çünkü bu makinenizde çalışabilmesi için hızlıca fazla büyük hale gelecektir)."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:207
msgid "To run the above circuit using the statevector simulator, first you need to import Aer and then set the backend to ``statevector_simulator``."
msgstr "Durum vektörü simülatörünü kullanarak yukarıdaki devreyi çalıştırmak için, önce Aer'i içe aktarmanız ve ardından arka ucu ``statevector_simulator`` olarak ayarlamanız gerekir."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:232
msgid "Now that we have chosen the backend, it's time to compile and run the quantum circuit. In Qiskit we provide the ``execute`` function for this. ``execute`` returns a ``job`` object that encapsulates information about the job submitted to the backend."
msgstr "Şimdi arka ucu seçtiğimize göre, kuantum devresini derleme ve çalıştırma zamanı. Qiskit'te bunun için ``execute`` işlevini sağlıyoruz. ``execute``, arka uca gönderilen iş hakkında bilgi içeren bir ``job`` nesnesi döndürür."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:238
msgid "Tip: You can obtain the above parameters in Jupyter. Simply place the text cursor on a function and press Shift+Tab."
msgstr "İpucu: Yukarıdaki parametreleri Jupyter'de elde edebilirsiniz. Metin imlecini bir işlevin üzerine getirin ve Shift+Tab tuşlarına basın."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:264
msgid "When you run a program, a job object is made that has the following two useful methods: ``job.status()`` and ``job.result()``, which return the status of the job and a result object, respectively."
msgstr "Bir programı çalıştırdığınızda, sırasıyla işin durumunu ve bir sonuç nesnesini döndüren ``job.status()`` ve ``job.result()`` iki yararlı metoda sahip bir iş nesnesi oluşturulur."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:270
msgid "Note: Jobs run asynchronously, but when the result method is called, it switches to synchronous and waits for it to finish before moving on to another task."
msgstr "Not: İşler eşzamansız olarak çalışır, ancak sonuç metodu çağrıldığında eşzamanlı duruma geçer ve başka bir göreve geçmeden önce işlemin tamamlanmasını bekler."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:295
msgid "The results object contains the data and Qiskit provides the method ``result.get_statevector(circ)`` to return the state vector for the quantum circuit."
msgstr "Sonuç nesnesi verileri içerir ve Qiskit, kuantum devresinin durum vektörünü döndürmek için ``result.get_statevector(circ)`` metodunu sağlar."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:338
msgid "Qiskit also provides a visualization toolbox to allow you to view these results."
msgstr "Qiskit ayrıca bu sonuçları görüntülemenize izin veren bir görselleştirme araç kutusu da sunar."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:340
msgid "Below, we use the visualization function to plot the real and imaginary components of the state density matrix $ :nbsphinx-math:`\\rho`$."
msgstr "Aşağıda, durum yoğunluk matrisinin $ :nbsphinx-math:`\\rho`$ gerçek ve sanal bileşenlerini çizmek için görselleştirme işlevini kullanıyoruz."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:372
msgid "Unitary backend"
msgstr "Üniter arka uç"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:383
msgid "Qiskit Aer also includes a ``unitary_simulator`` that works *provided all the elements in the circuit are unitary operations*. This backend calculates the :math:`2^n \\times 2^n` matrix representing the gates in the quantum circuit."
msgstr "Qiskit Aer ayrıca, *devredeki tüm elemanların üniter işlemler olması koşuluyla* çalışan bir ``unitary_simulator`` içerir. Bu arka uç, kuantum devresindeki kapıları temsil eden :math:`2^n\\times2^n` matrisini hesaplar."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:460
msgid "OpenQASM backend"
msgstr "OpenQASM arka ucu"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:471
msgid "The simulators above are useful because they provide information about the state output by the ideal circuit and the matrix representation of the circuit. However, a real experiment terminates by *measuring* each qubit (usually in the computational :math:`|0\\rangle, |1\\rangle` basis). Without measurement, we cannot gain information about the state. Measurements cause the quantum system to collapse into classical bits."
msgstr "Yukarıdaki simülatörler yararlıdır çünkü ideal devre tarafından durum çıktısı ve devrenin matris gösterimi hakkında bilgi sağlarlar. Bununla birlikte, gerçek bir deney her bir kübitin *ölçülmesiyle* sona erer (genellikle hesaplama :math:`|0\\rangle, |1\\rangle` tabanında). Ölçüm olmadan, durum hakkında bilgi edinemeyiz. Ölçümler, kuantum sisteminin klasik bitlere çökmesine neden olur."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:473
msgid "For example, suppose we make independent measurements on each qubit of the three-qubit GHZ state"
msgstr "Örneğin, üç-kübit GHZ durumunun her bir kübiti üzerinde bağımsız ölçümler yaptığımızı varsayalım"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:475
msgid "|\\psi\\rangle = |000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:477
msgid "and let :math:`xyz` denote the bitstring that results. Recall that, under the qubit labeling used by Qiskit, :math:`x` would correspond to the outcome on qubit 2, :math:`y` to the outcome on qubit 1, and :math:`z` to the outcome on qubit 0."
msgstr "ve :math:`xyz` sonuç bit dizisini göstersin. Qiskit tarafından kullanılan kübit etiketlemesinin altında şunu hatırlayın :math:`x` kübit 2'deki sonuca, :math:`y` kübit 1'deki sonuca, ve :math:`z` kübit 0'daki sonucuna karşılık gelir."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:483
msgid "Note: This representation of the bitstring puts the most significant bit (MSB) on the left, and the least significant bit (LSB) on the right. This is the standard ordering of binary bitstrings. We order the qubits in the same way (qubit representing the MSB has index 0), which is why Qiskit uses a non-standard tensor product order."
msgstr "Not: Bit dizisinin bu gösterimi en anlamlı biti (MSB) sola, en az anlamlı biti (LSB) sağa yerleştirir. Bu ikili bit dizilerinin standart sıralamasıdır. Kübitleri aynı şekilde sıralıyoruz (en anlamlı biti temsil eden kübit indeksi 0'dir), bu yüzden Qiskit standart olmayan bir tensör çarpımı sıralaması kullanıyor."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:489
msgid "Recall the probability of obtaining outcome :math:`xyz` is given by"
msgstr ":math:`xyz` çıktısının elde edilme olasılığının şu şekilde verildiğini hatırlayın"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:491
msgid "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"
msgstr "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:493
msgid "and as such for the GHZ state probability of obtaining 000 or 111 are both 1/2."
msgstr "ve böylelikle GHZ durumu için 000 veya 111 elde etme olasılığı her ikisi için de 1/2'dir."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:495
msgid "To simulate a circuit that includes measurement, we need to add measurements to the original circuit above, and use a different Aer backend."
msgstr "Ölçümü içeren bir devreyi simüle etmek için yukarıdaki orijinal devreye ölçümler eklememiz ve farklı bir Aer arka ucu kullanmamız gerekir."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:572
msgid "This circuit adds a classical register, and three measurements that are used to map the outcome of qubits to the classical bits."
msgstr "Bu devre, klasik bir saklayıcı ve kübitlerin sonuçlarını klasik bitlerle eşleştirmek için kullanılan üç ölçüm ekler."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:574
msgid "To simulate this circuit, we use the ``qasm_simulator`` in Qiskit Aer. Each run of this circuit will yield either the bitstring 000 or 111. To build up statistics about the distribution of the bitstrings (to, e.g., estimate :math:`\\mathrm{Pr}(000)`), we need to repeat the circuit many times. The number of times the circuit is repeated can be specified in the ``execute`` function, via the ``shots`` keyword."
msgstr "Bu devreyi simüle etmek için Qiskit Aer'deki ``qasm_simulator``ü kullanıyoruz. Bu devrenin her çalışması 000 veya 111 bit dizisini verir. Bit dizelerinin dağılımı hakkında istatistik oluşturmak için (örneğin, :math:`\\mathrm{Pr}(000)`ı tahmin etmek için), devreyi birçok kez tekrar etmemiz gerekir. Devrenin tekrarlanma sayısı, ``shots`` anahtar kelimesi ile ``execute`` işlevinde belirlenebilir."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:604
msgid "Once you have a result object, you can access the counts via the function ``get_counts(circuit)``. This gives you the *aggregated* binary outcomes of the circuit you submitted."
msgstr "Bir sonuç nesnesine sahip olduğunuzda, sayılara ``get_counts(circuit)`` işlevi üzerinden erişebilirsiniz. Bu, gönderdiğiniz devrenin *toplanmış* ikili sonuçlarını verir."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:645
msgid "Approximately 50 percent of the time, the output bitstring is 000. Qiskit also provides a function ``plot_histogram``, which allows you to view the outcomes."
msgstr "Zamanın yaklaşık yüzde 50'sinde, çıktı bit dizisi 000'dir. Qiskit ayrıca sonuçları görmenizi sağlayan bir ``plot_histogram`` işlevi de sağlar."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:676
msgid "The estimated outcome probabilities :math:`\\mathrm{Pr}(000)` and :math:`\\mathrm{Pr}(111)` are computed by taking the aggregate counts and dividing by the number of shots (times the circuit was repeated). Try changing the ``shots`` keyword in the ``execute`` function and see how the estimated probabilities change."
msgstr "Tahmini sonuç olasılıkları :math:`\\mathrm{Pr}(000)` ve :math:`\\mathrm{Pr}(111)` toplam sayıları alarak ve deneme sayısına (devrenin tekrarlanma sayısı) bölünerek hesaplanır. ``execute`` işlevindeki ``shots`` anahtar kelimesini değiştirmeyi deneyin ve tahmini olasılıkların nasıl değiştiğini görün."

