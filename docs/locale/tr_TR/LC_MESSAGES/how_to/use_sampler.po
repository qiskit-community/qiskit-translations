msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-27 13:03+0000\n"
"PO-Revision-Date: 2023-10-27 14:02\n"
"Last-Translator: \n"
"Language: tr\n"
"Language-Team: Turkish\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/how_to/use_sampler.po\n"
"X-Crowdin-File-ID: 10028\n"

#: ../../how_to/use_sampler.rst:3
msgid "Compute circuit output probabilities with ``Sampler`` primitive"
msgstr ""

#: ../../how_to/use_sampler.rst:5
msgid "This guide shows how to get the probability distribution of a quantum circuit with the :class:`~qiskit.primitives.Sampler` primitive."
msgstr ""

#: ../../how_to/use_sampler.rst:9
msgid "While this guide uses Qiskitâ€™s reference implementation, the ``Sampler`` primitive can be run with any provider using :class:`~qiskit.primitives.BackendSampler`."
msgstr ""

#: ../../how_to/use_sampler.rst:20
msgid "There are some providers that implement primitives natively (see `this page <http://qiskit.org/providers/#primitives>`_ for more details)."
msgstr ""

#: ../../how_to/use_sampler.rst:23
msgid "Initialize quantum circuits"
msgstr ""

#: ../../how_to/use_sampler.rst:25
msgid "The first step is to create the :class:`~qiskit.circuit.QuantumCircuit`\\ s from which you want to obtain the probability distribution."
msgstr ""

#: ../../how_to/use_sampler.rst:15
msgid "(:download:`Source code <../_build/gettext/plot_directive/how_to/use_sampler-1.py>`)"
msgstr ""

#: ../../how_to/use_sampler.rst:53
msgid "The :class:`~qiskit.circuit.QuantumCircuit` you pass to :class:`~qiskit.primitives.Sampler` has to include measurements."
msgstr ""

#: ../../how_to/use_sampler.rst:56
msgid "Initialize the ``Sampler``"
msgstr ""

#: ../../how_to/use_sampler.rst:58
msgid "Then, you need to create a :class:`~qiskit.primitives.Sampler` instance."
msgstr ""

#: ../../how_to/use_sampler.rst:67
msgid "Run and get results"
msgstr ""

#: ../../how_to/use_sampler.rst:69
msgid "Now that you have defined your ``sampler``, you can run it by calling the :meth:`~qiskit.primitives.Sampler.run` method, which returns an instance of :class:`~.PrimitiveJob` (subclass of :class:`~qiskit.providers.JobV1`). You can get the results from the job (as a :class:`~qiskit.primitives.SamplerResult` object) with the :meth:`~qiskit.providers.JobV1.result` method."
msgstr ""

#: ../../how_to/use_sampler.rst:83
msgid "While this example only uses one :class:`~qiskit.circuit.QuantumCircuit`, if you want to sample multiple circuits you can pass a ``list`` of :class:`~qiskit.circuit.QuantumCircuit` instances to the :meth:`~qiskit.primitives.Sampler.run` method."
msgstr ""

#: ../../how_to/use_sampler.rst:87
msgid "Get the probability distribution"
msgstr ""

#: ../../how_to/use_sampler.rst:89
msgid "From these results you can extract the quasi-probability distributions with the attribute :attr:`~qiskit.primitives.SamplerResult.quasi_dists`."
msgstr ""

#: ../../how_to/use_sampler.rst:91
msgid "Even though there is only one circuit in this example, :attr:`~qiskit.primitives.SamplerResult.quasi_dists` returns a list of :class:`~qiskit.result.QuasiDistribution`\\ s. ``result.quasi_dists[i]`` is the quasi-probability distribution of the ``i``-th circuit."
msgstr ""

#: ../../how_to/use_sampler.rst:96
msgid "A quasi-probability distribution differs from a probability distribution in that negative values are also allowed. However the quasi-probabilities must sum up to 1 like probabilities. Negative quasi-probabilities may appear when using error mitigation techniques."
msgstr ""

#: ../../how_to/use_sampler.rst:110
msgid "Probability distribution with binary outputs"
msgstr ""

#: ../../how_to/use_sampler.rst:112
msgid "If you prefer to see the output keys as binary strings instead of decimal numbers, you can use the :meth:`~qiskit.result.QuasiDistribution.binary_probabilities` method."
msgstr ""

#: ../../how_to/use_sampler.rst:124
msgid "Parameterized circuit with ``Sampler``"
msgstr ""

#: ../../how_to/use_sampler.rst:126
msgid "The :class:`~qiskit.primitives.Sampler` primitive can be run with unbound parameterized circuits like the one below. You can also manually bind values to the parameters of the circuit and follow the steps of the previous example."
msgstr ""

#: ../../how_to/use_sampler.rst:151
msgid "The main difference from the previous case is that now you need to specify the sets of parameter values for which you want to evaluate the expectation value as a ``list`` of ``list``\\ s of ``float``\\ s. The ``i``-th element of the outer ``list`` is the set of parameter values that corresponds to the ``i``-th circuit."
msgstr ""

#: ../../how_to/use_sampler.rst:175
msgid "Change run options"
msgstr ""

#: ../../how_to/use_sampler.rst:177
msgid "Your workflow might require tuning primitive run options, such as the amount of shots."
msgstr ""

#: ../../how_to/use_sampler.rst:179
msgid "By default, the reference :class:`~qiskit.primitives.Sampler` class performs an exact statevector calculation based on the :class:`~qiskit.quantum_info.Statevector` class. However, this can be modified to include shot noise if the number of ``shots`` is set. For reproducibility purposes, a ``seed`` will also be set in the following examples."
msgstr ""

#: ../../how_to/use_sampler.rst:184
msgid "There are two main ways of setting options in the :class:`~qiskit.primitives.Sampler`:"
msgstr ""

#: ../../how_to/use_sampler.rst:186
msgid "Set keyword arguments in the :meth:`~qiskit.primitives.Sampler.run` method."
msgstr ""

#: ../../how_to/use_sampler.rst:187
msgid "Modify :class:`~qiskit.primitives.Sampler` options."
msgstr ""

#: ../../how_to/use_sampler.rst:190
msgid "Set keyword arguments for :meth:`~qiskit.primitives.Sampler.run`"
msgstr ""

#: ../../how_to/use_sampler.rst:192
msgid "If you only want to change the settings for a specific run, it can be more convenient to set the options inside the :meth:`~qiskit.primitives.Sampler.run` method. You can do this by passing them as keyword arguments."
msgstr ""

#: ../../how_to/use_sampler.rst:207
msgid "Modify :class:`~qiskit.primitives.Sampler` options"
msgstr ""

#: ../../how_to/use_sampler.rst:209
msgid "If you want to keep some configuration values for several runs, it can be better to change the :class:`~qiskit.primitives.Sampler` options. That way you can use the same :class:`~qiskit.primitives.Sampler` object as many times as you wish without having to rewrite the configuration values every time you use :meth:`~qiskit.primitives.Sampler.run`."
msgstr ""

#: ../../how_to/use_sampler.rst:215
msgid "Modify existing :class:`~qiskit.primitives.Sampler`"
msgstr ""

#: ../../how_to/use_sampler.rst:217
msgid "If you prefer to change the options of an already-defined :class:`~qiskit.primitives.Sampler`, you can use :meth:`~qiskit.primitives.Sampler.set_options` and introduce the new options as keyword arguments."
msgstr ""

#: ../../how_to/use_sampler.rst:233
msgid "Define a new :class:`~qiskit.primitives.Sampler` with the options"
msgstr ""

#: ../../how_to/use_sampler.rst:235
msgid "If you prefer to define a new :class:`~qiskit.primitives.Sampler` with new options, you need to define a ``dict`` like this one:"
msgstr ""

#: ../../how_to/use_sampler.rst:242
msgid "And then you can introduce it into your new :class:`~qiskit.primitives.Sampler` with the ``options`` argument."
msgstr ""

