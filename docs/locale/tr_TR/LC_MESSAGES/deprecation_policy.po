msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-24 10:41+0000\n"
"PO-Revision-Date: 2022-12-27 07:29\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/deprecation_policy.po\n"
"X-Crowdin-File-ID: 9836\n"
"Language: tr_TR\n"

#: ../../deprecation_policy.rst:3
msgid "Deprecation Policy"
msgstr "Kullanımdan Kaldırma Politikası"

#: ../../deprecation_policy.rst:5
msgid "Many users and other packages depend on different parts of Qiskit.  We must make sure that whenever we make changes to the code, we give users ample time to adjust without breaking code that they have already written."
msgstr "Birçok kullanıcı ve diğer paketler, Qiskit'in farklı bölümlerine bağlımdır. Kodda her değişiklik yaptığımızda, kullanıcılara zaten yazdıkları kodu bozmadan ayarlamaları için yeterli zaman verdiğimizden emin olmalıyız."

#: ../../deprecation_policy.rst:9
msgid "Most importantly: *do not* change any interface that is public-facing unless we absolutely have to.  Adding things is ok, taking things away is annoying for users but can be handled reasonably with plenty notice, but changing behavior generally means users cannot write code that will work with two subsequent versions of Qiskit, which is not acceptable."
msgstr "En önemlisi: Kesinlikle mecbur kalmadıkça halka açık herhangi bir arayüzü *değiştirmeyin*. Bir şeyler eklemek sorun değil, bir şeyleri çıkarmak kullanıcılar için can sıkıcıdır, ancak çok fazla uyarı ile makul bir şekilde ele alınabilir, ancak davranışı değiştirmek genellikle kullanıcıların Qiskit'in sonraki iki sürümüyle çalışacak kod yazamayacağı anlamına gelir ki bu kabul edilemez."

#: ../../deprecation_policy.rst:15
msgid "Beware that users will often be using functions, classes and methods that we, the Qiskit developers, may consider internal or not widely used.  Do not make assumptions that \"this is buried, so nobody will be using it\"; if it is public, it is subject to the policy.  The only exceptions here are functions and modules that are explicitly internal, *i.e.* those whose names begin with a leading underscore (``_``)."
msgstr "Kullanıcıların, Qiskit geliştiricileri olarak bizlerin dahili veya yaygın olarak kullanılmadığını düşünebileceğimiz fonksiyonları, sınıfları ve metodları sık sık kullanıyor olacaklarına dikkat edin. \"Bu gömülü, yani kimse kullanmayacak\" gibi varsayımlarda bulunmayın; halka açıksa, bu politikaya tabidir. Buradaki tek istisna, açıkça dahili olan fonksiyonlar ve modüllerdir, *yani* adları önde bir alt çizgi (``_``) ile başlayanlar."

#: ../../deprecation_policy.rst:22
msgid "The guiding principles are:"
msgstr "Yol gösterici prensipler şunlardır:"

#: ../../deprecation_policy.rst:24
msgid "we must not remove or change code without active warnings for least three months or two complete version cycles;"
msgstr "en az üç ay veya iki tam sürüm döngüsü boyunca etkin uyarılar olmadan kodu kaldırmamalı veya değiştirmemeliyiz;"

#: ../../deprecation_policy.rst:27
msgid "there must always be a way to achieve valid goals that does not issue any warnings;"
msgstr "her zaman herhangi bir uyarı vermeyen geçerli hedeflere ulaşmanın bir yolu olmalıdır;"

#: ../../deprecation_policy.rst:30
msgid "never assume that a function that isn't explicitly internal isn't in use;"
msgstr "açıkça iç işlev görmeyen bir fonksiyonuın kullanımda olmadığını asla varsaymayın;"

#: ../../deprecation_policy.rst:32
msgid "all deprecations, changes and removals are considered API changes, and can only occur in minor releases not patch releases, per the :ref:`stable branch policy <stable_branch_policy>`."
msgstr "tüm kullanımdan kaldırmalar, değişiklikler ve kaldırmalar API değişiklikleri olarak kabul edilir ve :ref:`kararlı dal politikası <stable_branch_policy>` uyarınca yalnızca küçük sürümlerde gerçekleşebilir, yama sürümlerinde değil."

#: ../../deprecation_policy.rst:39
msgid "Removing a feature"
msgstr "Özelliğin kaldırılması"

#: ../../deprecation_policy.rst:41
msgid "When removing a feature (for example a class, function or function parameter), we will follow this procedure:"
msgstr "Bir özelliği (örneğin bir sınıf, fonksiyon veya fonksiyon parametresi) kaldırırken şu prosedürü izleyeceğiz:"

#: ../../deprecation_policy.rst:44
msgid "The alternative path must be in place for one minor version before any warnings are issued.  For example, if we want to replace the function ``foo()`` with ``bar()``, we must make at least one release with both functions before issuing any warnings within ``foo()``.  You may issue ``PendingDeprecationWarning``\\ s from the old paths immediately."
msgstr "Herhangi bir uyarı verilmeden önce bir alt sürüm için alternatif yol mevcut olmalıdır. Örneğin, ``foo()`` fonksiyonunu ``bar()`` ile değiştirmek istiyorsak, ``foo()`` içinde herhangi bir uyarı vermeden önce her iki işlevle en az bir sürüm yapmalıyız. Eski yollardan hemen ``PendingDeprecationWarning``\\ ler verebilirsiniz."

#: ../../deprecation_policy.rst:50
msgid "*Reason*: we need to give people time to swap over without breaking their code as soon as they upgrade."
msgstr "*Sebep*: İnsanlara yükseltme yaptıkları anda kodlarını bozmadan geçiş yapmaları için zaman vermemiz gerekiyor."

#: ../../deprecation_policy.rst:53
msgid "After the alternative path has been in place for at least one minor version, :ref:`issue the deprecation warnings <issuing-deprecation-warnings>`.  Add a release note with a ``deprecations`` section listing all deprecated paths, their alternatives, and the reason for deprecation.  :ref:`Update the tests to test the warnings <testing-deprecated-functionality>`."
msgstr "En az bir alt sürüm için alternatif yol uygulandıktan sonra, :ref:`kullanımdan kaldırma uyarılarını yayınlayın <issuing-deprecation-warnings>`. Kullanımdan kaldırılan tüm yolları, bunların alternatiflerini ve kullanımdan kaldırma nedenini listeleyen bir ``deprecations`` bölümü içeren bir sürüm notu ekleyin. :ref:`Uyarılarını test etmek için testleri güncelleyin <testing-deprecated-functionality>`."

#: ../../deprecation_policy.rst:59
msgid "*Reason*: removals must be highly visible for at least one version, to minimize the surprise to users when they actually go."
msgstr "*Sebep*: Kaldırma işlemleri, gerçekten gittiklerinde kullanıcıların karşılaşacağı sürprizi en aza indirmek için en az bir sürümde oldukça görünür olmalıdır."

#: ../../deprecation_policy.rst:62
msgid "Set a removal date for the old feature, and remove it (and the warnings) when reached.  This must be at least three months after the version with the warnings was first released, and cannot be the minor version immediately after the warnings.  Add an ``upgrade`` release note that lists all the removals.  For example, if the alternative path was provided in ``0.19.0`` and the warnings were added in ``0.20.0``, the earliest version for removal is ``0.22.0``, even if ``0.21.0`` was released more than three months after ``0.20.0``."
msgstr "Eski özellik için bir kaldırma tarihi belirleyin ve ulaşıldığında onu (ve uyarıları) kaldırın. Bu, uyarıların bulunduğu sürümün ilk yayınlanmasından en az üç ay sonra olmalıdır ve uyarılardan hemen sonraki alt sürüm olamaz. Tüm kaldırmaları listeleyen bir ``upgrade`` sürüm notu ekleyin. Örneğin, ``0.19.0``'da alternatif yol sağlandıysa ve ``0.20.0``'da uyarılar eklendiyse, ``0.21.0`` sürümü ``0.20.0``dan üç aydan fazla bir süre sonra yayınlanmış olsa bile, kaldırma için en erken sürüm ``0.22.0`` olur."

#: ../../deprecation_policy.rst:73
msgid "These are *minimum* requirements.  For removal of significant or core features, give users at least an extra minor version if not longer."
msgstr "Bunlar *minimum* gereksinimlerdir. Önemli veya temel özelliklerin kaldırılması için, kullanıcılara en azından ekstra küçük bir sürüm verin."

#: ../../deprecation_policy.rst:76
msgid "*Reason*: there needs to be time for users to see these messages, and to give them time to adjust.  Not all users will update their version of Qiskit immediately, and some may skip minor versions."
msgstr "*Sebep*: Kullanıcıların bu mesajları görmesi ve uyum sağlaması için onlara zaman tanınması gerekir. Tüm kullanıcılar Qiskit sürümlerini hemen güncellemeyecek ve bazıları küçük sürümleri atlayabilir."

#: ../../deprecation_policy.rst:80
msgid "When a feature is marked as deprecated it is slated for removal, but users should still be able to rely on it to work correctly.  We consider a feature marked \"deprecated\" as frozen; we commit to maintaining it with critical bug fixes until it is removed, but we won't merge new functionality to it."
msgstr "Bir özellik kullanımdan kaldırıldı olarak işaretlendiğinde, kaldırılması planlanır, ancak kullanıcılar yine de düzgün çalışacağına güvenebilmelidir. \"deprecated\" olarak işaretlenen bir özelliği donmuş olarak kabul ediyoruz; kaldırılana kadar kritik hataları düzelterek sürdürmeyi taahhüt ediyoruz, ancak yeni fonksiyonları onunla birleştirmeyeceğiz."

#: ../../deprecation_policy.rst:87
msgid "Changing behavior"
msgstr "Davranışı değiştirme"

#: ../../deprecation_policy.rst:89
msgid "Changing behavior without a removal is particularly difficult to manage, because we need to have both options available for two versions, and be able to issue warnings.  For example, changing the type of the return value from a function will almost invariably involve making an API break, which is frustrating for users and makes it difficult for them to use Qiskit."
msgstr "Kaldırma olmadan davranışı değiştirmeyi yönetmek özellikle zordur, çünkü iki sürüm için her iki seçeneğe de sahip olmamız ve uyarılar verebilmemiz gerekir. Örneğin, bir fonksiyonun dönüş değerinin türünü değiştirmek, neredeyse her zaman, kullanıcılar için sinir bozucu olan ve Qiskit'i kullanmalarını zorlaştıran bir API kesintisi yapmayı içerecektir."

#: ../../deprecation_policy.rst:95
msgid "The best solution here is often to make a new function, and then use :ref:`the procedures for removal <removing-features>` above."
msgstr "Buradaki en iyi çözüm genellikle yeni bir fonksiyon oluşturmak ve ardından yukarıdaki :ref:`kaldırma prosedürlerini <removing-features>` kullanmaktır."

#: ../../deprecation_policy.rst:98
msgid "If you absolutely must change the behavior of existing code (other than fixing bugs), you will need to use your best judgment to apply the guiding principles at the top of this document.  The most appropriate warning for behavioral changes is usually ``FutureWarning``.  Some possibilities for how to effect a change:"
msgstr "Mevcut kodun davranışını (hataları düzeltmek dışında) kesinlikle değiştirmeniz gerekiyorsa, bu belgenin başındaki yol gösterici ilkeleri uygulamak için sağduyunuzu kullanmanız gerekecektir. Davranış değişiklikleri için en uygun uyarı genellikle ``FutureWarning``dir. Bir değişikliğin nasıl gerçekleştirileceğine ilişkin bazı olasılıklar:"

#: ../../deprecation_policy.rst:104
msgid "If you are changing the default behavior of a function, consider adding a keyword argument to select between old and new behaviors.  When it comes time, you can issue a ``FutureWarning`` if the keyword argument is not given (*e.g.* if it is ``None``), saying that the new value will soon become the default.  You will need to go through the normal deprecation period for removing this keyword argument after you have made the behavior change.  This will take at least six months to go through both cycles."
msgstr "Bir fonksiyonun varsayılan davranışını değiştiriyorsanız, eski ve yeni davranışlar arasında seçim yapmak için bir anahtar sözcük bağımsız değişkeni eklemeyi düşünün. Zamanı geldiğinde, anahtar sözcük bağımsız değişkeni verilmezse (*örn.* ``None`` ise), yeni değerin yakında varsayılan olacağını söyleyerek bir ``FutureWarning`` yayınlayabilirsiniz. Davranış değişikliğini yaptıktan sonra bu anahtar sözcük argümanını kaldırmak için normal kullanımdan kaldırma sürecinden geçmeniz gerekecek. Bu, her iki döngüden geçmek için en az altı ay sürecektir."

#: ../../deprecation_policy.rst:112
msgid "If you need to change the return type of a function, consider adding a new function that returns the new type, and then follow the procedures for deprecating the old function."
msgstr "Bir fonksiyonun döndürme türünü değiştirmeniz gerekirse, yeni türü döndüren yeni bir fonksiyon eklemeyi düşünün ve ardından eski fonksiyonu kullanımdan kaldırma prosedürlerini izleyin."

#: ../../deprecation_policy.rst:116
msgid "If you need to accept a new input that you cannot distinguish from an existing possibility because of its type, consider letting it be passed by a different keyword argument, or add a second function that only accepts the new form."
msgstr "Türü nedeniyle mevcut bir olasılıktan ayırt edemediğiniz yeni bir girdiyi kabul etmeniz gerekiyorsa, bunun farklı bir anahtar sözcük bağımsız değişkeni tarafından geçirilmesine izin verin veya yalnızca yeni biçimi kabul eden ikinci bir fonksiyon ekleyin."

#: ../../deprecation_policy.rst:124
msgid "Issuing deprecation warnings"
msgstr "Kullanımdan kaldırma uyarıları yayınlama"

#: ../../deprecation_policy.rst:126
msgid "The proper way to raise a deprecation warning is to use the ``warn`` function from the `warnings module in the Python standard library <https://docs.python.org/3/library/warnings.html>`__, using the category ``DeprecationWarning``.  For example::"
msgstr "Kullanımdan kaldırma uyarısı vermenin uygun yolu, ``DeprecationWarning`` kategorisini kullanarak Python standart kütüphanesinde `warnings modülünden <https://docs.python.org/3/library/warnings.html>`__ `` warn`` fonksiyonunu kullanmaktır. Örnek olarak şu verilebilir::"

#: ../../deprecation_policy.rst:143
msgid "Make sure you include the version of the package that introduced the deprecation warning (so maintainers can easily see when it is valid to remove it), and what the alternative path is."
msgstr "Kullanımdan kaldırma uyarısını getiren paketin sürümünü ve alternatif yolun ne olduğunu eklediğinizden emin olun (böylece sürdürücüler paketi kaldırmanın ne zaman geçerli olduğunu kolayca görebilirler)."

#: ../../deprecation_policy.rst:147
msgid "Take note of the ``stacklevel`` argument.  This controls which function is accused of being deprecated.  Setting ``stacklevel=1`` (the default) means the warning will blame the ``warn`` function itself, while ``stacklevel=2`` will correctly blame the containing function.  It is unusual to set this to anything other than ``2``, but can be useful if you use a helper function to issue the same warning in multiple places."
msgstr "``stacklevel`` bağımsız değişkenine dikkat edin. Bu, hangi fonksiyonun kullanımdan kaldırılıyor gösterileceğini kontrol eder. ``stacklevel=1`` (varsayılan) ayarı, uyarının ``warn`` fonksiyonunun kendisini gösterir, ``stacklevel=2`` ise doğru şekilde kapsayan fonksiyonu göstereceği anlamına gelir. Bunu ``2`` dışında bir değere ayarlamak alışılmadık bir durumdur, ancak aynı uyarıyı birden fazla yerde yayınlamak için bir yardımcı fonksiyon kullanırsanız yararlı olabilir."

#: ../../deprecation_policy.rst:158
msgid "Testing deprecated functionality"
msgstr "Kullanımdan kaldırılan işlevselliği test etme"

#: ../../deprecation_policy.rst:160
msgid "Whenever you add deprecation warnings, you will need to update tests involving the functionality.  The test suite should fail otherwise, because of the new warnings.  We must continue to test deprecated functionality throughout the deprecation period, to ensure that it still works."
msgstr "Kullanımdan kaldırma uyarıları eklediğinizde, işlevselliği içeren testleri güncellemeniz gerekecektir. Aksi takdirde, yeni uyarılar nedeniyle test paketi başarısız olacaktır. Hâlâ çalıştığından emin olmak için kullanımdan kaldırılan işlevselliği kullanımdan kaldırma süresi boyunca test etmeye devam etmeliyiz."

#: ../../deprecation_policy.rst:165
msgid "To update the tests, you need to wrap each call of deprecated behavior in its own assertion block.  For subclasses of ``unittest.TestCase`` (which all Qiskit test cases are), this is done by:"
msgstr "Testleri güncellemek için, kullanımdan kaldırılan her davranış çağrısını kendi onaylama bloğuna sarmanız gerekir. ``unittest.TestCase`` alt sınıfları için (ki bunlar tüm Qiskit test senaryolarıdır), bu şu şekilde yapılır:"

