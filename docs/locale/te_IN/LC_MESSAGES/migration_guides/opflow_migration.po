msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-03 02:48+0000\n"
"PO-Revision-Date: 2023-09-01 04:44\n"
"Last-Translator: \n"
"Language: te\n"
"Language-Team: Telugu\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: te\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/migration_guides/opflow_migration.po\n"
"X-Crowdin-File-ID: 9999\n"

#: ../../migration_guides/opflow_migration.rst:3
msgid "Opflow Migration Guide"
msgstr "Opflow మైగ్రేషన్ గైడ్"

#: ../../migration_guides/opflow_migration.rst:6
msgid "TL;DR"
msgstr "TL;DR"

#: ../../migration_guides/opflow_migration.rst:7
msgid "The new :mod:`~qiskit.primitives`, in combination with the :mod:`~qiskit.quantum_info` module, have superseded functionality of :mod:`~qiskit.opflow`. Thus, the latter is being deprecated."
msgstr "కొత్త :mod:`~qiskit.primitives`, :mod:`~qiskit.quantum_info` మాడ్యూల్‌తో కలిపి, :mod:`~qiskit.opflow` కార్యాచరణను అధిగమించింది. అందువలన, రెండవది నిరాకరణ చేయబడుతోంది."

#: ../../migration_guides/opflow_migration.rst:10
msgid "In this migration guide, you will find instructions and code examples for how to migrate your code based on the :mod:`~qiskit.opflow` module to the :mod:`~qiskit.primitives` and :mod:`~qiskit.quantum_info` modules."
msgstr "ఈ మైగ్రేషన్ గైడ్‌లో, :mod:`~qiskit.opflow` మాడ్యూల్ ఆధారంగా మీ కోడ్‌ని :mod:`~qiskit.primitives` మరియు :mod:`~qiskit.quantum_info` కి ఎలా మైగ్రేట్ చేయాలో సూచనలను మరియు కోడ్ ఉదాహరణలను మీరు కనుగొంటారు."

#: ../../migration_guides/opflow_migration.rst:15
msgid "The use of :mod:`~qiskit.opflow` was tightly coupled to the :class:`~qiskit.utils.QuantumInstance` class, which is also being deprecated. For more information on migrating the :class:`~qiskit.utils.QuantumInstance`, please read the `quantum instance migration guide <http://qisk.it/qi_migration>`_."
msgstr ":mod:`~qiskit.opflow` యొక్క ఉపయోగం :class:`~qiskit.utils.QuantumInstance` క్లాస్కి బలముగా జతచేయబడింది, ఇది కూడా నిలిపివేయబడుతోంది. :class:`~qiskit.utils.QuantumInstance`ని తరలించడం గురించి మరింత సమాచారం కోసం, దయచేసి `quantum instance migration guide <http://qisk.it/qi_migration>`_ చదవండి."

#: ../../migration_guides/opflow_migration.rst:23
msgid "Most references to the :class:`qiskit.primitives.Sampler` or :class:`qiskit.primitives.Estimator` in this guide can be replaced with instances of any primitive implementation. For example Aer primitives (:class:`qiskit_aer.primitives.Sampler`/:class:`qiskit_aer.primitives.Estimator`) or IBM's Qiskit Runtime primitives (:class:`qiskit_ibm_runtime.Sampler`/:class:`qiskit_ibm_runtime.Estimator`). Specific backends can be wrapped with (:class:`qiskit.primitives.BackendSampler`, :class:`qiskit.primitives.BackendEstimator`) to also present primitive-compatible interfaces."
msgstr "ఈ గైడ్‌లోని :class:`qiskit.primitives.Sampler` లేదా :class:`qiskit.primitives.Estimator`కి సంబంధించిన చాలా రిఫరెన్స్‌లు ఏదైనా ప్రిమిటివ్ ఇంప్లిమెంటేషన్కి సంబంధించిన ఉదాహరణలతో భర్తీ చేయబడతాయి. ఉదాహరణకు Aer ప్రిమిటివ్లు (:class:`qiskit_aer.primitives.Sampler`/:class:`qiskit_aer.primitives.Estimator`) లేదా IBM యొక్క Qiskit రన్‌టైమ్ ప్రిమిటివ్లు (:class:`qiskit_ibm_runtime.Sampler`/:class:`qiskit_ibm_runtime.Estimator` ) ప్రిమిటివ్-అనుకూల ఇంటర్‌ఫేస్‌లను కూడా ప్రదర్శించడానికి నిర్దిష్ట బ్యాకెండ్‌లను (:class:`qiskit.primitives.BackendSampler`, :class:`qiskit.primitives.BackendEstimator`)తో వ్రాప్ చేయవచ్చు."

#: ../../migration_guides/opflow_migration.rst:27
msgid "Certain classes, such as the :class:`~qiskit.opflow.expectations.AerPauliExpectation`, can only be replaced by a specific primitive instance (in this case, :class:`qiskit_aer.primitives.Estimator`), or require a specific option configuration. If this is the case, it will be explicitly indicated in the corresponding section."
msgstr ":class:`~qiskit.opflow.expectations.AerPauliExpectation` వంటి నిర్దిష్ట క్లాస్లు ఒక నిర్దిష్ట ప్రిమిటివ్ ఉదాహరణ ద్వారా మాత్రమే భర్తీ చేయబడతాయి (ఈ సందర్భంలో, :class:`qiskit_aer.primitives.Estimator`), లేదా నిర్దిష్ట ఎంపిక కాన్ఫిగరేషన్ అవసరం . ఇదే జరిగితే, అది సంబంధిత విభాగంలో స్పష్టంగా సూచించబడుతుంది."

#: ../../migration_guides/opflow_migration.rst:34
msgid "Background"
msgstr "బ్యాక్గ్రౌండ్"

#: ../../migration_guides/opflow_migration.rst:36
msgid "The :mod:`~qiskit.opflow` module was originally introduced as a layer between circuits and algorithms, a series of building blocks for quantum algorithms research and development."
msgstr "క్వాంటం అల్గారిథమ్‌ల పరిశోధన మరియు అభివృద్ధి కోసం బిల్డింగ్ బ్లాక్‌ల శ్రేణి, :mod:`~qiskit.opflow` మాడ్యూల్ వాస్తవానికి సర్క్యూట్‌లు మరియు అల్గారిథమ్‌ల మధ్య పొరగా పరిచయం చేయబడింది."

#: ../../migration_guides/opflow_migration.rst:39
msgid "The recent release of the :mod:`qiskit.primitives` introduced a new paradigm for interacting with backends. Now, instead of preparing a circuit to execute with a ``backend.run()`` type of method, the algorithms can leverage the :class:`.Sampler` and :class:`.Estimator` primitives, send parametrized circuits and observables, and directly receive quasi-probability distributions or expectation values (respectively). This workflow simplifies considerably the pre-processing and post-processing steps that previously relied on this module; encouraging us to move away from :mod:`~qiskit.opflow` and find new paths for developing algorithms based on the :mod:`~qiskit.primitives` interface and the :mod:`~qiskit.quantum_info` module."
msgstr "ఇటీవల విడుదలైన :mod:`qiskit.primitives` బ్యాకెండ్‌లతో ఇంటరాక్ట్ కావడానికి కొత్త నమూనాను పరిచయం చేసింది. ఇప్పుడు, ``backend.run()`` పద్ధతి యొక్క పద్ధతితో అమలు చేయడానికి సర్క్యూట్‌ని సిద్ధం చేయడానికి బదులుగా, అల్గారిథమ్‌లు :class:`.Sampler` మరియు :class:`.Estimator` ఆదిమాంశాలను ప్రభావితం చేయగలవు, పారామెట్రైజ్డ్ సర్క్యూట్‌లను పంపుతాయి మరియు పరిశీలించదగినవి, మరియు నేరుగా పాక్షిక-సంభావ్యత డిస్ట్రిబ్యూషన్లు లేదా నిరీక్షణ విలువలను (వరుసగా) పొందుతాయి. ఈ వర్క్‌ఫ్లో గతంలో ఈ మాడ్యూల్‌పై ఆధారపడిన ప్రీ-ప్రాసెసింగ్ మరియు పోస్ట్-ప్రాసెసింగ్ దశలను గణనీయంగా సులభతరం చేస్తుంది; :mod:`~qiskit.opflow` నుండి దూరంగా వెళ్లమని మరియు :mod:`~qiskit.primitives` ఇంటర్‌ఫేస్ మరియు :mod:`~qiskit.quantum_info` మాడ్యూల్ ఆధారంగా అల్గారిథమ్‌లను అభివృద్ధి చేయడానికి కొత్త మార్గాలను కనుగొనమని మమ్మల్ని ప్రోత్సహిస్తుంది."

#: ../../migration_guides/opflow_migration.rst:47
msgid "This guide traverses the opflow submodules and provides either a direct alternative (i.e., using :mod:`~qiskit.quantum_info`), or an explanation of how to replace their functionality in algorithms."
msgstr "ఈ గైడ్ ఆప్‌ఫ్లో సబ్‌మాడ్యూల్‌లను ట్రావర్స్ చేస్తుంది మరియు ప్రత్యక్ష ప్రత్యామ్నాయాన్ని అందిస్తుంది (అనగా :mod:`~qiskit.quantum_info` ని ఉపయోగించడం), లేదా అల్గారిథమ్‌లలో వాటి కార్యాచరణను ఎలా భర్తీ చేయాలనే వివరణను అందిస్తుంది."

#: ../../migration_guides/opflow_migration.rst:50
msgid "The functional equivalency can be roughly summarized as follows:"
msgstr "ఫంక్షనాలిటి సమానత్వాన్ని ఈ క్రింది విధంగా స్థూలంగా సంగ్రహించవచ్చు:"

#: ../../migration_guides/opflow_migration.rst:55
msgid "Opflow Module"
msgstr "Opflow Module"

#: ../../migration_guides/opflow_migration.rst:56
#: ../../migration_guides/opflow_migration.rst:110
#: ../../migration_guides/opflow_migration.rst:158
#: ../../migration_guides/opflow_migration.rst:259
#: ../../migration_guides/opflow_migration.rst:341
#: ../../migration_guides/opflow_migration.rst:448
#: ../../migration_guides/opflow_migration.rst:620
#: ../../migration_guides/opflow_migration.rst:677
#: ../../migration_guides/opflow_migration.rst:790
#: ../../migration_guides/opflow_migration.rst:1018
#: ../../migration_guides/opflow_migration.rst:1040
#: ../../migration_guides/opflow_migration.rst:1208
#: ../../migration_guides/opflow_migration.rst:1346
#: ../../migration_guides/opflow_migration.rst:1481
#: ../../migration_guides/opflow_migration.rst:1497
#: ../../migration_guides/opflow_migration.rst:1511
msgid "Alternative"
msgstr "ప్రత్యామ్నాయాలు"

#: ../../migration_guides/opflow_migration.rst:57
msgid "Operators (:class:`~qiskit.opflow.OperatorBase`, :ref:`operator_globals`, :mod:`~qiskit.opflow.primitive_ops`, :mod:`~qiskit.opflow.list_ops`)"
msgstr "ఆపరేటర్లు (:class:` ~ qiskit.opflow.OperatorBase `, :ref:` operator_globals `, :mod:` ~ qiskit.opflow.primitive_ops `, :mod:` ~ qiskit.opflow.list_ops `)"

#: ../../migration_guides/opflow_migration.rst:59
msgid "``qiskit.quantum_info`` :ref:`Operators <quantum_info_operators>`"
msgstr "``qiskit.quantum_info`` :ref:`Operators <quantum_info_operators>`"

#: ../../migration_guides/opflow_migration.rst:61
msgid ":mod:`qiskit.opflow.state_fns`"
msgstr ":mod:`qiskit.opflow.state_fns`"

#: ../../migration_guides/opflow_migration.rst:62
msgid "``qiskit.quantum_info`` :ref:`States <quantum_info_states>`"
msgstr "``qiskit.quantum_info`` :ref:`States <quantum_info_states>`"

#: ../../migration_guides/opflow_migration.rst:64
msgid ":mod:`qiskit.opflow.converters`"
msgstr ":mod:`qiskit.opflow.converters`"

#: ../../migration_guides/opflow_migration.rst:65
msgid ":mod:`qiskit.primitives`"
msgstr ":mod:`qiskit.primitives`"

#: ../../migration_guides/opflow_migration.rst:67
msgid ":mod:`qiskit.opflow.evolutions`"
msgstr ":mod:`qiskit.opflow.evolutions`"

#: ../../migration_guides/opflow_migration.rst:68
msgid "``qiskit.synthesis`` :ref:`Evolution <evolution_synthesis>`"
msgstr "``qiskit.synthesis`` :ref:`Evolution <evolution_synthesis>`"

#: ../../migration_guides/opflow_migration.rst:70
msgid ":mod:`qiskit.opflow.expectations`"
msgstr ":mod:`qiskit.opflow.expectations`"

#: ../../migration_guides/opflow_migration.rst:71
msgid ":class:`qiskit.primitives.Estimator`"
msgstr ":class:`qiskit.primitives.Estimator`"

#: ../../migration_guides/opflow_migration.rst:73
msgid ":mod:`qiskit.opflow.gradients`"
msgstr ":mod:`qiskit.opflow.gradients`"

#: ../../migration_guides/opflow_migration.rst:74
msgid ":mod:`qiskit.algorithms.gradients`"
msgstr ":mod:`qiskit.algorithms.gradients`"

#: ../../migration_guides/opflow_migration.rst:77
msgid "Contents"
msgstr "విషయసూచిక"

#: ../../migration_guides/opflow_migration.rst:79
msgid "This document covers the migration from these opflow submodules:"
msgstr "ఈ డాక్యుమెంట్ ఈ ఆప్‌ఫ్లో సబ్‌మాడ్యూల్స్ నుండి మైగ్రేషన్‌ను కవర్ చేస్తుంది:"

#: ../../migration_guides/opflow_migration.rst:81
msgid "**Operators**"
msgstr "**Operators**"

#: ../../migration_guides/opflow_migration.rst:83
msgid "`Operator Base Class`_"
msgstr "`Operator Base Class`_"

#: ../../migration_guides/opflow_migration.rst:84
msgid "`Operator Globals`_"
msgstr "`Operator Globals`_"

#: ../../migration_guides/opflow_migration.rst:85
msgid "`Primitive and List Ops`_"
msgstr "`Primitive and List Ops`_"

#: ../../migration_guides/opflow_migration.rst:86
msgid "`State Functions`_"
msgstr "`స్టేట్ ఫంక్షన్లు`_"

#: ../../migration_guides/opflow_migration.rst:88
msgid "**Converters**"
msgstr "**Converters**"

#: ../../migration_guides/opflow_migration.rst:90
msgid "`Converters`_"
msgstr "`Converters`_"

#: ../../migration_guides/opflow_migration.rst:91
msgid "`Evolutions`_"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:92
msgid "`Expectations`_"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:94
msgid "**Gradients**"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:96
msgid "`Gradients`_"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:100
msgid "Operator Base Class"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:101
#: ../../migration_guides/opflow_migration.rst:134
#: ../../migration_guides/opflow_migration.rst:146
#: ../../migration_guides/opflow_migration.rst:253
#: ../../migration_guides/opflow_migration.rst:335
#: ../../migration_guides/opflow_migration.rst:406
#: ../../migration_guides/opflow_migration.rst:416
#: ../../migration_guides/opflow_migration.rst:610
#: ../../migration_guides/opflow_migration.rst:640
#: ../../migration_guides/opflow_migration.rst:778
#: ../../migration_guides/opflow_migration.rst:980
#: ../../migration_guides/opflow_migration.rst:1012
#: ../../migration_guides/opflow_migration.rst:1034
#: ../../migration_guides/opflow_migration.rst:1194
#: ../../migration_guides/opflow_migration.rst:1202
#: ../../migration_guides/opflow_migration.rst:1340
#: ../../migration_guides/opflow_migration.rst:1409
msgid "*Back to* `Contents`_"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:103
msgid "The :class:`qiskit.opflow.OperatorBase` abstract class can be replaced with :class:`qiskit.quantum_info.BaseOperator` , keeping in mind that :class:`qiskit.quantum_info.BaseOperator` is more generic than its opflow counterpart."
msgstr ":class:`qiskit.quantum_info.BaseOperator` అబ్స్ట్రాక్ట్ క్లాస్ని\n"
" :class:`qiskit.quantum_info.BaseOperator`తో భర్తీ చేయవచ్చు, ఇది దాని ఆప్‌ఫ్లో కౌంటర్‌పార్ట్ :class:`qiskit.quantum_info.BaseOperator` కంటే చాలా సాధారణమైనది."

#: ../../migration_guides/opflow_migration.rst:109
#: ../../migration_guides/opflow_migration.rst:157
#: ../../migration_guides/opflow_migration.rst:258
#: ../../migration_guides/opflow_migration.rst:340
#: ../../migration_guides/opflow_migration.rst:447
#: ../../migration_guides/opflow_migration.rst:619
#: ../../migration_guides/opflow_migration.rst:676
#: ../../migration_guides/opflow_migration.rst:789
#: ../../migration_guides/opflow_migration.rst:1017
#: ../../migration_guides/opflow_migration.rst:1039
#: ../../migration_guides/opflow_migration.rst:1207
#: ../../migration_guides/opflow_migration.rst:1345
#: ../../migration_guides/opflow_migration.rst:1480
#: ../../migration_guides/opflow_migration.rst:1496
#: ../../migration_guides/opflow_migration.rst:1510
msgid "Opflow"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:111
msgid ":class:`qiskit.opflow.OperatorBase`"
msgstr ":class:`qiskit.opflow.OperatorBase`"

#: ../../migration_guides/opflow_migration.rst:112
msgid ":class:`qiskit.quantum_info.BaseOperator`"
msgstr ":class:`qiskit.quantum_info.BaseOperator`"

#: ../../migration_guides/opflow_migration.rst:116
msgid "Despite the similar class names, :class:`qiskit.opflow.OperatorBase` and :class:`qiskit.quantum_info.BaseOperator` are not completely equivalent to each other, and the transition should be handled with care. Namely:"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:120
msgid "1. :class:`qiskit.opflow.OperatorBase` implements a broader algebra mixin. Some operator overloads that were commonly used :mod:`~qiskit.opflow` (for example ``~`` for ``.adjoint()``) are not defined for :class:`qiskit.quantum_info.BaseOperator`. You might want to check the specific :mod:`~qiskit.quantum_info` subclass instead."
msgstr "1. :class:`qiskit.opflow.OperatorBase` విస్తృత ఆల్జీబ్రా మిక్సిన్‌ని అమలు చేస్తుంది. సాధారణంగా ఉపయోగించే కొన్ని ఆపరేటర్ ఓవర్‌లోడ్‌లు :mod:`~qiskit.opflow` (ఉదాహరణకు ```~`` ``.adjoint()`` కోసం) :class:`qiskit.quantum_info.BaseOperator` కోసం నిర్వచించబడలేదు. బదులుగా మీరు నిర్దిష్ట :mod:`~qiskit.quantum_info` సబ్‌క్లాస్‌ని తనిఖీ చేసుకోవచ్చు."

#: ../../migration_guides/opflow_migration.rst:125
msgid "2. :class:`qiskit.opflow.OperatorBase` also implements methods such as ``.to_matrix()`` or ``.to_spmatrix()``, which are only found in some of the :class:`qiskit.quantum_info.BaseOperator` subclasses."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:128
msgid "See :class:`~qiskit.opflow.OperatorBase` and :class:`~qiskit.quantum_info.BaseOperator` API references for more information."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:133
msgid "Operator Globals"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:136
msgid "Opflow provided shortcuts to define common single qubit states, operators, and non-parametrized gates in the :ref:`operator_globals` module."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:139
msgid "These were mainly used for didactic purposes or quick prototyping, and can easily be replaced by their corresponding :mod:`~qiskit.quantum_info` class: :class:`~qiskit.quantum_info.Pauli`, :class:`~qiskit.quantum_info.Clifford` or :class:`~qiskit.quantum_info.Statevector`."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:145
msgid "1-Qubit Paulis"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:148
msgid "The 1-qubit paulis were commonly used for quick testing of algorithms, as they could be combined to create more complex operators (for example, ``0.39 * (I ^ Z) + 0.5 * (X ^ X)``). These operations implicitly created operators of type  :class:`~qiskit.opflow.primitive_ops.PauliSumOp`, and can be replaced by directly creating a corresponding :class:`~qiskit.quantum_info.SparsePauliOp`, as shown in the examples below."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:159
msgid ":class:`~qiskit.opflow.X`, :class:`~qiskit.opflow.Y`, :class:`~qiskit.opflow.Z`, :class:`~qiskit.opflow.I`"
msgstr ":class:` ~ qiskit.opflow.X `, :class:` ~ qiskit.opflow.Y `, :class:` ~ qiskit.opflow.Z `, :class:` ~ qiskit.opflow.I `"

#: ../../migration_guides/opflow_migration.rst:160
#: ../../migration_guides/opflow_migration.rst:432
msgid ":class:`~qiskit.quantum_info.Pauli`"
msgstr ":class:` ~ qiskit.quantum_info.Pauli `"

#: ../../migration_guides/opflow_migration.rst:164
msgid "For direct compatibility with classes in :mod:`~qiskit.algorithms`, wrap in :class:`~qiskit.quantum_info.SparsePauliOp`."
msgstr ""

#: ../../migration_guides/opflow_migration.rst
msgid "Example 1: Defining the XX operator"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:173
#: ../../migration_guides/opflow_migration.rst:212
#: ../../migration_guides/opflow_migration.rst:276
#: ../../migration_guides/opflow_migration.rst:354
#: ../../migration_guides/opflow_migration.rst:481
#: ../../migration_guides/opflow_migration.rst:515
#: ../../migration_guides/opflow_migration.rst:708
#: ../../migration_guides/opflow_migration.rst:817
#: ../../migration_guides/opflow_migration.rst:884
#: ../../migration_guides/opflow_migration.rst:935
#: ../../migration_guides/opflow_migration.rst:1058
#: ../../migration_guides/opflow_migration.rst:1102
#: ../../migration_guides/opflow_migration.rst:1152
#: ../../migration_guides/opflow_migration.rst:1231
#: ../../migration_guides/opflow_migration.rst:1286
#: ../../migration_guides/opflow_migration.rst:1356
#: ../../migration_guides/opflow_migration.rst:1535
#: ../../migration_guides/opflow_migration.rst:1614
msgid "**Opflow**"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:186
#: ../../migration_guides/opflow_migration.rst:230
#: ../../migration_guides/opflow_migration.rst:293
#: ../../migration_guides/opflow_migration.rst:378
#: ../../migration_guides/opflow_migration.rst:496
#: ../../migration_guides/opflow_migration.rst:568
#: ../../migration_guides/opflow_migration.rst:747
#: ../../migration_guides/opflow_migration.rst:849
#: ../../migration_guides/opflow_migration.rst:909
#: ../../migration_guides/opflow_migration.rst:954
#: ../../migration_guides/opflow_migration.rst:1077
#: ../../migration_guides/opflow_migration.rst:1123
#: ../../migration_guides/opflow_migration.rst:1171
#: ../../migration_guides/opflow_migration.rst:1257
#: ../../migration_guides/opflow_migration.rst:1311
#: ../../migration_guides/opflow_migration.rst:1382
#: ../../migration_guides/opflow_migration.rst:1573
#: ../../migration_guides/opflow_migration.rst:1644
msgid "**Alternative**"
msgstr ""

#: ../../migration_guides/opflow_migration.rst
msgid "Example 2: Defining a more complex operator"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:252
msgid "Common non-parametrized gates (Clifford)"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:261
msgid ":class:`~qiskit.opflow.CX`, :class:`~qiskit.opflow.S`, :class:`~qiskit.opflow.H`, :class:`~qiskit.opflow.T`, :class:`~qiskit.opflow.CZ`, :class:`~qiskit.opflow.Swap`"
msgstr ":class:`~qiskit.opflow.CX`, :class:`~qiskit.opflow.S`, :class:`~qiskit.opflow.H`, :class:`~qiskit.opflow.T`, :class:`~qiskit.opflow.CZ`, :class:`~qiskit.opflow.Swap`"

#: ../../migration_guides/opflow_migration.rst:263
msgid "Append corresponding gate to :class:`~qiskit.circuit.QuantumCircuit`. If necessary, :class:`qiskit.quantum_info.Operator`\\s can be directly constructed from quantum circuits. Another alternative is to wrap the circuit in :class:`~qiskit.quantum_info.Clifford` and call ``Clifford.to_operator()``."
msgstr "సంబంధిత గేట్‌ను :class:`~qiskit.circuit.QuantumCircuit`కి జత చేయండి. అవసరమైతే, :class:`qiskit.quantum_info.Operator`\\sని నేరుగా క్వాంటం సర్క్యూట్‌ల నుండి నిర్మించవచ్చు. మరొక ప్రత్యామ్నాయం ఏమిటంటే సర్క్యూట్‌ను :class:`~qiskit.quantum_info.Clifford`లో వ్రాప్ చేసి, ``Clifford.to_operator()``కి కాల్ చేయడం."

#: ../../migration_guides/opflow_migration.rst:270
msgid "Constructing :mod:`~qiskit.quantum_info` operators from circuits is not efficient, as it is a dense operation and scales exponentially with the size of the circuit, use with care."
msgstr ""

#: ../../migration_guides/opflow_migration.rst
msgid "Example 1: Defining the HH operator"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:313
msgid "If we want to turn this circuit into an operator, we can do:"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:334
msgid "1-Qubit States"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:343
msgid ":class:`~qiskit.opflow.Zero`, :class:`~qiskit.opflow.One`, :class:`~qiskit.opflow.Plus`, :class:`~qiskit.opflow.Minus`"
msgstr ":class:`~qiskit.opflow.Zero`, :class:`~qiskit.opflow.One`, :class:`~qiskit.opflow.Plus`, :class:`~qiskit.opflow.Minus`"

#: ../../migration_guides/opflow_migration.rst:344
msgid ":class:`~qiskit.quantum_info.Statevector` or simply :class:`~qiskit.circuit.QuantumCircuit`, depending on the use case."
msgstr ":class:`~qiskit.quantum_info.Statevector` or simply :class:`~qiskit.circuit.QuantumCircuit`, depending on the use case."

#: ../../migration_guides/opflow_migration.rst:348
msgid "For efficient simulation of stabilizer states, :mod:`~qiskit.quantum_info` includes a :class:`~qiskit.quantum_info.StabilizerState` class. See API reference of :class:`~qiskit.quantum_info.StabilizerState` for more info."
msgstr ""

#: ../../migration_guides/opflow_migration.rst
msgid "Example 1: Working with stabilizer states"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:405
msgid "Primitive and List Ops"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:408
msgid "Most of the workflows that previously relied on components from :mod:`~qiskit.opflow.primitive_ops` and :mod:`~qiskit.opflow.list_ops` can now leverage elements from :mod:`~qiskit.quantum_info`\\'s operators instead. Some of these classes do not require a 1-1 replacement because they were created to interface with other opflow components."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:415
msgid "Primitive Ops"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:418
msgid ":class:`~qiskit.opflow.primitive_ops.PrimitiveOp` is the :mod:`~qiskit.opflow.primitive_ops` module's base class. It also acts as a factory to instantiate a corresponding sub-class depending on the computational primitive used to initialize it."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:424
msgid "Interpreting :class:`~qiskit.opflow.primitive_ops.PrimitiveOp` as a factory class:"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:429
msgid "Class passed to :class:`~qiskit.opflow.primitive_ops.PrimitiveOp`"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:430
msgid "Subclass returned"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:433
#: ../../migration_guides/opflow_migration.rst:460
msgid ":class:`~qiskit.opflow.primitive_ops.PauliOp`"
msgstr ":class:`~qiskit.opflow.primitive_ops.PauliOp`"

#: ../../migration_guides/opflow_migration.rst:435
msgid ":class:`~qiskit.circuit.Instruction`, :class:`~qiskit.circuit.QuantumCircuit`"
msgstr ":class:`~qiskit.circuit.Instruction`, :class:`~qiskit.circuit.QuantumCircuit`"

#: ../../migration_guides/opflow_migration.rst:436
#: ../../migration_guides/opflow_migration.rst:454
msgid ":class:`~qiskit.opflow.primitive_ops.CircuitOp`"
msgstr ":class:`~qiskit.opflow.primitive_ops.CircuitOp`"

#: ../../migration_guides/opflow_migration.rst:438
msgid "``list``, ``np.ndarray``, ``scipy.sparse.spmatrix``, :class:`~qiskit.quantum_info.Operator`"
msgstr "``list``, ``np.ndarray``, ``scipy.sparse.spmatrix``, :class:`~qiskit.quantum_info.Operator`"

#: ../../migration_guides/opflow_migration.rst:439
#: ../../migration_guides/opflow_migration.rst:457
msgid ":class:`~qiskit.opflow.primitive_ops.MatrixOp`"
msgstr ":class:`~qiskit.opflow.primitive_ops.MatrixOp`"

#: ../../migration_guides/opflow_migration.rst:441
msgid "Thus, when migrating opflow code, it is important to look for alternatives to replace the specific subclasses that are used \"under the hood\" in the original code:"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:450
msgid ":class:`~qiskit.opflow.primitive_ops.PrimitiveOp`"
msgstr ":class:`~qiskit.opflow.primitive_ops.PrimitiveOp`"

#: ../../migration_guides/opflow_migration.rst:451
msgid "As mentioned above, this class is used to generate an instance of one of the classes below, so there is no direct replacement."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:455
msgid ":class:`~qiskit.circuit.QuantumCircuit`"
msgstr ":class:`~qiskit.circuit.QuantumCircuit`"

#: ../../migration_guides/opflow_migration.rst:458
msgid ":class:`~qiskit.quantum_info.Operator`"
msgstr ":class:`~qiskit.quantum_info.Operator`"

#: ../../migration_guides/opflow_migration.rst:461
msgid ":class:`~qiskit.quantum_info.Pauli`. For direct compatibility with classes in :mod:`qiskit.algorithms`, wrap in :class:`~qiskit.quantum_info.SparsePauliOp`."
msgstr ":class:`~qiskit.quantum_info.Pauli`. For direct compatibility with classes in :mod:`qiskit.algorithms`, wrap in :class:`~qiskit.quantum_info.SparsePauliOp`."

#: ../../migration_guides/opflow_migration.rst:464
msgid ":class:`~qiskit.opflow.primitive_ops.PauliSumOp`"
msgstr ":class:`~qiskit.opflow.primitive_ops.PauliSumOp`"

#: ../../migration_guides/opflow_migration.rst:465
msgid ":class:`~qiskit.quantum_info.SparsePauliOp`. See example :ref:`below <example_pauli_sum_op>`."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:467
msgid ":class:`~qiskit.opflow.primitive_ops.TaperedPauliSumOp`"
msgstr ":class:`~qiskit.opflow.primitive_ops.TaperedPauliSumOp`"

#: ../../migration_guides/opflow_migration.rst:468
msgid "This class was used to combine a :class:`.PauliSumOp` with its identified symmetries in one object. This functionality is not currently used in any workflow, and has been deprecated without replacement. See :class:`qiskit.quantum_info.analysis.Z2Symmetries` example for updated workflow."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:472
msgid ":class:`qiskit.opflow.primitive_ops.Z2Symmetries`"
msgstr ":class:`qiskit.opflow.primitive_ops.Z2Symmetries`"

#: ../../migration_guides/opflow_migration.rst:473
msgid ":class:`qiskit.quantum_info.analysis.Z2Symmetries`. See example :ref:`below <example_z2_sym>`."
msgstr ""

#: ../../migration_guides/opflow_migration.rst
msgid "Example 1: ``PauliSumOp``"
msgstr ""

#: ../../migration_guides/opflow_migration.rst
msgid "Example 2: ``Z2Symmetries`` and ``TaperedPauliSumOp``"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:609
msgid "ListOps"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:612
msgid "The :mod:`~qiskit.opflow.list_ops` module contained classes for manipulating lists of :mod:`~qiskit.opflow.primitive_ops` or :mod:`~qiskit.opflow.state_fns`. The :mod:`~qiskit.quantum_info` alternatives for this functionality are the :class:`~qiskit.quantum_info.PauliList` and :class:`~qiskit.quantum_info.SparsePauliOp` (for sums of :class:`~qiskit.quantum_info.Pauli`\\s)."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:622
msgid ":class:`~qiskit.opflow.list_ops.ListOp`"
msgstr ":class:`~qiskit.opflow.list_ops.ListOp`"

#: ../../migration_guides/opflow_migration.rst:623
msgid "No direct replacement. This is the base class for operator lists. In general, these could be replaced with Python ``list``\\s. For :class:`~qiskit.quantum_info.Pauli` operators, there are a few alternatives, depending on the use-case. One alternative is :class:`~qiskit.quantum_info.PauliList`."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:627
msgid ":class:`~qiskit.opflow.list_ops.ComposedOp`"
msgstr ":class:`~qiskit.opflow.list_ops.ComposedOp`"

#: ../../migration_guides/opflow_migration.rst:628
msgid "No direct replacement. Current workflows do not require composition of states and operators within one object (no lazy evaluation)."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:631
msgid ":class:`~qiskit.opflow.list_ops.SummedOp`"
msgstr ":class:`~qiskit.opflow.list_ops.SummedOp`"

#: ../../migration_guides/opflow_migration.rst:632
#: ../../migration_guides/opflow_migration.rst:635
msgid "No direct replacement. For :class:`~qiskit.quantum_info.Pauli` operators, use :class:`~qiskit.quantum_info.SparsePauliOp`."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:634
msgid ":class:`~qiskit.opflow.list_ops.TensoredOp`"
msgstr ":class:`~qiskit.opflow.list_ops.TensoredOp`"

#: ../../migration_guides/opflow_migration.rst:639
msgid "State Functions"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:642
msgid "The :mod:`~qiskit.opflow.state_fns` module can be generally replaced by subclasses of :mod:`~qiskit.quantum_info`\\'s :class:`qiskit.quantum_info.QuantumState`."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:645
msgid "Similarly to :class:`~qiskit.opflow.primitive_ops.PrimitiveOp`, :class:`~qiskit.opflow.state_fns.StateFn` acts as a factory to create the corresponding subclass depending on the computational primitive used to initialize it."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:650
msgid "Interpreting :class:`~qiskit.opflow.state_fns.StateFn` as a factory class:"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:655
msgid "Class passed to :class:`~qiskit.opflow.state_fns.StateFn`"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:656
msgid "Sub-class returned"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:658
msgid "``str``, ``dict``, :class:`~qiskit.result.Result`"
msgstr "``str``, ``dict``, :class:`~qiskit.result.Result`"

#: ../../migration_guides/opflow_migration.rst:659
#: ../../migration_guides/opflow_migration.rst:685
msgid ":class:`~qiskit.opflow.state_fns.DictStateFn`"
msgstr ":class:`~qiskit.opflow.state_fns.DictStateFn`"

#: ../../migration_guides/opflow_migration.rst:661
msgid "``list``, ``np.ndarray``, :class:`~qiskit.quantum_info.Statevector`"
msgstr "``list``, ``np.ndarray``, :class:`~qiskit.quantum_info.Statevector`"

#: ../../migration_guides/opflow_migration.rst:662
#: ../../migration_guides/opflow_migration.rst:690
msgid ":class:`~qiskit.opflow.state_fns.VectorStateFn`"
msgstr ":class:`~qiskit.opflow.state_fns.VectorStateFn`"

#: ../../migration_guides/opflow_migration.rst:664
msgid ":class:`~qiskit.circuit.QuantumCircuit`, :class:`~qiskit.circuit.Instruction`"
msgstr ":class:`~qiskit.circuit.QuantumCircuit`, :class:`~qiskit.circuit.Instruction`"

#: ../../migration_guides/opflow_migration.rst:665
#: ../../migration_guides/opflow_migration.rst:682
msgid ":class:`~qiskit.opflow.state_fns.CircuitStateFn`"
msgstr ":class:`~qiskit.opflow.state_fns.CircuitStateFn`"

#: ../../migration_guides/opflow_migration.rst:667
msgid ":class:`~qiskit.opflow.OperatorBase`"
msgstr ":class:`~qiskit.opflow.OperatorBase`"

#: ../../migration_guides/opflow_migration.rst:668
#: ../../migration_guides/opflow_migration.rst:697
msgid ":class:`~qiskit.opflow.state_fns.OperatorStateFn`"
msgstr ":class:`~qiskit.opflow.state_fns.OperatorStateFn`"

#: ../../migration_guides/opflow_migration.rst:670
msgid "This means that references to :class:`~qiskit.opflow.state_fns.StateFn` in opflow code should be examined to identify the subclass that is being used, to then look for an alternative."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:679
msgid ":class:`~qiskit.opflow.state_fns.StateFn`"
msgstr ":class:`~qiskit.opflow.state_fns.StateFn`"

#: ../../migration_guides/opflow_migration.rst:680
msgid "In most cases, :class:`~qiskit.quantum_info.Statevector`. However, please remember that :class:`~qiskit.opflow.state_fns.StateFn` is a factory class."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:683
msgid ":class:`~qiskit.quantum_info.Statevector`"
msgstr ":class:`~qiskit.quantum_info.Statevector`"

#: ../../migration_guides/opflow_migration.rst:686
msgid "This class was used to store efficient representations of sparse measurement results. The :class:`~qiskit.primitives.Sampler` now returns the measurements as an instance of :class:`~qiskit.result.QuasiDistribution` (see example in `Converters`_)."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:691
msgid "This class can be replaced with :class:`~qiskit.quantum_info.Statevector` or :class:`~qiskit.quantum_info.StabilizerState` (for Clifford-based vectors)."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:694
msgid ":class:`~qiskit.opflow.state_fns.SparseVectorStateFn`"
msgstr ":class:`~qiskit.opflow.state_fns.SparseVectorStateFn`"

#: ../../migration_guides/opflow_migration.rst:695
msgid "No direct replacement. This class was used for sparse statevector representations."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:698
msgid "No direct replacement. This class was used to represent measurements against operators."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:700
msgid ":class:`~qiskit.opflow.state_fns.CVaRMeasurement`"
msgstr ":class:`~qiskit.opflow.state_fns.CVaRMeasurement`"

#: ../../migration_guides/opflow_migration.rst:701
msgid "Used in :class:`~qiskit.opflow.expectations.CVaRExpectation`. Functionality now covered by :class:`.SamplingVQE`. See example in `Expectations`_."
msgstr ""

#: ../../migration_guides/opflow_migration.rst
msgid "Example 1: Applying an operator to a state"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:772
msgid "See more applied examples in `Expectations`_  and `Converters`_."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:776
msgid "Converters"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:780
msgid "The role of the :class:`qiskit.opflow.converters` submodule was to convert the operators into other opflow operator classes (:class:`~qiskit.opflow.converters.TwoQubitReduction`, :class:`~qiskit.opflow.converters.PauliBasisChange`...). In the case of the :class:`~qiskit.opflow.converters.CircuitSampler`, it traversed an operator and outputted approximations of its state functions using a quantum backend. Notably, this functionality has been replaced by the :mod:`~qiskit.primitives`."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:792
msgid ":class:`~qiskit.opflow.converters.CircuitSampler`"
msgstr ":class:`~qiskit.opflow.converters.CircuitSampler`"

#: ../../migration_guides/opflow_migration.rst:793
msgid ":class:`~qiskit.primitives.Sampler` or :class:`~qiskit.primitives.Estimator` if used with :class:`~qiskit.oflow.expectations`. See examples :ref:`below <example_convert_state>`."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:795
msgid ":class:`~qiskit.opflow.converters.AbelianGrouper`"
msgstr ":class:`~qiskit.opflow.converters.AbelianGrouper`"

#: ../../migration_guides/opflow_migration.rst:796
msgid "This class allowed a sum a of Pauli operators to be grouped, a similar functionality can be achieved through the :meth:`~qiskit.quantum_info.SparsePauliOp.group_commuting` method of :class:`qiskit.quantum_info.SparsePauliOp`, although this is not a 1-1 replacement, as you can see in the example :ref:`below <example_commuting>`."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:800
msgid ":class:`~qiskit.opflow.converters.DictToCircuitSum`"
msgstr ":class:`~qiskit.opflow.converters.DictToCircuitSum`"

#: ../../migration_guides/opflow_migration.rst:801
msgid "No direct replacement. This class was used to convert from :class:`~qiskit.opflow.state_fns.DictStateFn`\\s or :class:`~qiskit.opflow.state_fns.VectorStateFn`\\s to equivalent :class:`~qiskit.opflow.state_fns.CircuitStateFn`\\s."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:803
msgid ":class:`~qiskit.opflow.converters.PauliBasisChange`"
msgstr ":class:`~qiskit.opflow.converters.PauliBasisChange`"

#: ../../migration_guides/opflow_migration.rst:804
msgid "No direct replacement. This class was used for changing Paulis into other bases."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:805
msgid ":class:`~qiskit.opflow.converters.TwoQubitReduction`"
msgstr ":class:`~qiskit.opflow.converters.TwoQubitReduction`"

#: ../../migration_guides/opflow_migration.rst:806
msgid "No direct replacement. This class implements a chemistry-specific reduction for the :class:`.ParityMapper` class in :mod:`qiskit_nature`. The general symmetry logic this mapper depends on has been refactored to other classes in :mod:`~qiskit.quantum_info`, so this specific :mod:`~qiskit.opflow` implementation is no longer necessary."
msgstr ""

#: ../../migration_guides/opflow_migration.rst
msgid "Example 1: ``CircuitSampler`` for sampling parametrized circuits"
msgstr ""

#: ../../migration_guides/opflow_migration.rst
msgid "Example 2: ``CircuitSampler`` for computing expectation values"
msgstr ""

#: ../../migration_guides/opflow_migration.rst
msgid "Example 3: ``AbelianGrouper`` for grouping operators"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:979
msgid "Evolutions"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:982
msgid "The :mod:`qiskit.opflow.evolutions` submodule was created to provide building blocks for Hamiltonian simulation algorithms, including various methods for Trotterization. The original opflow workflow for Hamiltonian simulation did not allow for delayed synthesis of the gates or efficient transpilation of the circuits, so this functionality was migrated to the ``qiskit.synthesis`` :ref:`Evolution <evolution_synthesis>` module."
msgstr "హామిల్టోనియన్ అనుకరణ అల్గారిథమ్‌ల కోసం బిల్డింగ్ బ్లాక్‌లను అందించడానికి :mod:`qiskit.opflow.evolutions` సబ్‌మాడ్యూల్ సృష్టించబడింది, ఇందులో ట్రోటెరైజేషన్ కోసం వివిధ పద్ధతులు ఉన్నాయి. హామిల్టోనియన్ అనుకరణ కోసం అసలైన ఆప్‌ఫ్లో వర్క్‌ఫ్లో గేట్‌ల ఆలస్యం సంశ్లేషణ లేదా సర్క్యూట్‌ల సమర్థవంతమైన ట్రాన్స్‌పిలేషన్‌ను అనుమతించలేదు, కాబట్టి ఈ కార్యాచరణ ``qiskit.synthesis`` :ref:`Evolution <evolution_synthesis>` మాడ్యూల్‌కి మార్చబడింది."

#: ../../migration_guides/opflow_migration.rst:989
msgid "The :class:`qiskit.opflow.evolutions.PauliTrotterEvolution` class computes evolutions for exponentiated sums of Paulis by converting to the Z basis, rotating with an RZ, changing back, and Trotterizing. When calling ``.convert()``, the class follows a recursive strategy that involves creating :class:`~qiskit.opflow.evolutions.EvolvedOp` placeholders for the operators, constructing :class:`.PauliEvolutionGate`\\s out of the operator primitives, and supplying one of the desired synthesis methods to perform the Trotterization. The methods can be specified via ``string``, which is then inputted into a :class:`~qiskit.opflow.evolutions.TrotterizationFactory`, or by supplying a method instance of :class:`qiskit.opflow.evolutions.Trotter`, :class:`qiskit.opflow.evolutions.Suzuki` or :class:`qiskit.opflow.evolutions.QDrift`."
msgstr ":class:`qiskit.opflow.evolutions.PauliTrotterEvolution` తరగతి Z బేసిస్ ఆధారంగా, RZతో తిప్పడం, వెనుకకు మార్చడం మరియు ట్రాటెరైజింగ్ చేయడం ద్వారా పౌలిస్ యొక్క ఘాతాంక మొత్తాల కోసం పరిణామాలను గణిస్తుంది. ``.convert()`` అని కాల్ చేస్తున్నప్పుడు, క్లాస్ ఆపరేటర్‌ల కోసం :class:`~qiskit.opflow.evolutions.EvolvedOp` ప్లేస్‌హోల్డర్‌లను సృష్టించడం,ఆపరేటర్ ప్రైమిటివ్స్తో :class:`.PauliEvolutionGate`\\sని నిర్మించడం వంటి పునరావృత వ్యూహాన్ని అనుసరిస్తుంది , మరియు ట్రోటెరైజేషన్ చేయడానికి కావలసిన సంశ్లేషణ పద్ధతులని సరఫరా చేస్తుంది. పద్దతులను ``string`` ద్వారా పేర్కొనవచ్చు, అది :class:`~qiskit.opflow.evolutions.TrotterizationFactory`కి ఇన్‌పుట్ చేయబడుతుంది లేదా :class:`qiskit.opflow.evolutions.Trotter యొక్క మెథడ్ ఉదాహరణను అందించడం ద్వారా `, :class:`qiskit.opflow.evolutions.Suzuki` లేదా :class:`qiskit.opflow.evolutions.QDrift`."

#: ../../migration_guides/opflow_migration.rst:999
msgid "The different Trotterization methods that extend :class:`qiskit.opflow.evolutions.TrotterizationBase` were migrated to :mod:`qiskit.synthesis`, and now extend the :class:`qiskit.synthesis.ProductFormula` base class. They no longer contain a ``.convert()`` method for standalone use, but are now designed to be plugged into the :class:`.PauliEvolutionGate` and called via ``.synthesize()``. In this context, the job of the :class:`qiskit.opflow.evolutions.PauliTrotterEvolution` class can now be handled directly by the algorithms (for example, :class:`~qiskit.algorithms.time_evolvers.trotterization.TrotterQRTE`\\)."
msgstr ":class:`qiskit.opflow.evolutions.TrotterizationBase`ని విస్తరించే వివిధ ట్రోటరైజేషన్ పద్ధతులు :mod:`qiskit.synthesis`కి తరలించబడ్డాయి మరియు ఇప్పుడు :class:`qiskit.synthesis.ProductFormula` బేస్ క్లాస్‌ని విస్తరించింది. అవి ఇకపై స్వతంత్ర ఉపయోగం కోసం ``.convert()`` పద్ధతిని కలిగి ఉండవు, కానీ ఇప్పుడు :class:`.PauliEvolutionGate`కి ప్లగ్ చేయబడి, ``.synthesize()`` ద్వారా పిలవబడేలా రూపొందించబడ్డాయి. ఈ సందర్భంలో, :class:`qiskit.opflow.evolutions.PauliTrotterEvolution` క్లాస్ యొక్క జాబ్ ఇప్పుడు నేరుగా అల్గారిథమ్‌ల ద్వారా నిర్వహించబడుతుంది (ఉదాహరణకు, :class:`~qiskit.algorithms.time_evolvers.trotterization.TrotterQRTE`\\) ."

#: ../../migration_guides/opflow_migration.rst:1006
msgid "In a similar manner, the :class:`qiskit.opflow.evolutions.MatrixEvolution` class performs evolution by classical matrix exponentiation, constructing a circuit with :class:`.UnitaryGate`\\s or :class:`.HamiltonianGate`\\s containing the exponentiation of the operator. This class is no longer necessary, as the :class:`.HamiltonianGate`\\s can be directly handled by the algorithms."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1011
msgid "Trotterizations"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1020
msgid ":class:`~qiskit.opflow.evolutions.TrotterizationFactory`"
msgstr ":class:`~qiskit.opflow.evolutions.TrotterizationFactory`"

#: ../../migration_guides/opflow_migration.rst:1021
#: ../../migration_guides/opflow_migration.rst:1043
#: ../../migration_guides/opflow_migration.rst:1211
msgid "No direct replacement. This class was used to create instances of one of the classes listed below."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1023
msgid ":class:`~qiskit.opflow.evolutions.Trotter`"
msgstr ":class:`~qiskit.opflow.evolutions.Trotter`"

#: ../../migration_guides/opflow_migration.rst:1024
msgid ":class:`qiskit.synthesis.SuzukiTrotter` or :class:`qiskit.synthesis.LieTrotter`"
msgstr ":class:`qiskit.synthesis.SuzukiTrotter` లేదా :class:`qiskit.synthesis.LieTrotter`"

#: ../../migration_guides/opflow_migration.rst:1026
msgid ":class:`~qiskit.opflow.evolutions.Suzuki`"
msgstr ":class:`~qiskit.opflow.evolutions.Suzuki`"

#: ../../migration_guides/opflow_migration.rst:1027
msgid ":class:`qiskit.synthesis.SuzukiTrotter`"
msgstr ":class:`qiskit.synthesis.SuzukiTrotter`"

#: ../../migration_guides/opflow_migration.rst:1029
msgid ":class:`~qiskit.opflow.evolutions.QDrift`"
msgstr ":class:`~qiskit.opflow.evolutions.QDrift`"

#: ../../migration_guides/opflow_migration.rst:1030
msgid ":class:`qiskit.synthesis.QDrift`"
msgstr ":class:`qiskit.synthesis.QDrift`"

#: ../../migration_guides/opflow_migration.rst:1033
msgid "Other Evolution Classes"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1042
msgid ":class:`~qiskit.opflow.evolutions.EvolutionFactory`"
msgstr ":class:`~qiskit.opflow.evolutions.EvolutionFactory`"

#: ../../migration_guides/opflow_migration.rst:1045
msgid ":class:`~qiskit.opflow.evolutions.EvolvedOp`"
msgstr ":class:`~qiskit.opflow.evolutions.EvolvedOp`"

#: ../../migration_guides/opflow_migration.rst:1046
msgid "No direct replacement. The workflow no longer requires a specific operator for evolutions."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1048
msgid ":class:`~qiskit.opflow.evolutions.MatrixEvolution`"
msgstr ":class:`~qiskit.opflow.evolutions.MatrixEvolution`"

#: ../../migration_guides/opflow_migration.rst:1049
msgid ":class:`.HamiltonianGate`"
msgstr ":class:`.HamiltonianGate`"

#: ../../migration_guides/opflow_migration.rst:1051
msgid ":class:`~qiskit.opflow.evolutions.PauliTrotterEvolution`"
msgstr ":class:`~qiskit.opflow.evolutions.PauliTrotterEvolution`"

#: ../../migration_guides/opflow_migration.rst:1052
msgid ":class:`.PauliEvolutionGate`"
msgstr ":class:`.PauliEvolutionGate`"

#: ../../migration_guides/opflow_migration.rst
msgid "Example 1: Trotter evolution"
msgstr ""

#: ../../migration_guides/opflow_migration.rst
msgid "Example 2: Evolution with time-dependent Hamiltonian"
msgstr ""

#: ../../migration_guides/opflow_migration.rst
msgid "Example 3: Matrix evolution"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1193
msgid "Expectations"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1196
msgid "Expectations are converters which enable the computation of the expectation value of an observable with respect to some state function. This functionality can now be found in the :class:`~qiskit.primitives.Estimator` primitive. Please remember that there are different ``Estimator`` implementations, as noted :ref:`here <attention_primitives>`"
msgstr "ఎక్స్‌పెక్టేషన్‌లు కన్వర్టర్‌లు, ఇవి కొన్ని స్టేట్ ఫంక్షన్‌కు సంబంధించి పరిశీలించదగిన అంచనా విలువ యొక్క గణనను ప్రారంభిస్తాయి. ఈ ఫంక్షనాలిటీని ఇప్పుడు :class:`~qiskit.primitives.Estimator` ప్రిమిటివ్‌లో కనుగొనవచ్చు. దయచేసి :ref:`here <attention_primitives>` లో గుర్తించినట్లుగా, విభిన్న ``Estimator`` అమలులు ఉన్నాయని గుర్తుంచుకోండి"

#: ../../migration_guides/opflow_migration.rst:1201
msgid "Algorithm-Agnostic Expectations"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1210
msgid ":class:`~qiskit.opflow.expectations.ExpectationFactory`"
msgstr ":class:`~qiskit.opflow.expectations.ExpectationFactory`"

#: ../../migration_guides/opflow_migration.rst:1213
msgid ":class:`~qiskit.opflow.expectations.AerPauliExpectation`"
msgstr ":class:`~qiskit.opflow.expectations.AerPauliExpectation`"

#: ../../migration_guides/opflow_migration.rst:1214
msgid "Use :class:`qiskit_aer.primitives.Estimator`  with ``approximation=True`` and ``shots=None`` as ``run_options``. See example below."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1217
msgid ":class:`~qiskit.opflow.expectations.MatrixExpectation`"
msgstr ":class:`~qiskit.opflow.expectations.MatrixExpectation`"

#: ../../migration_guides/opflow_migration.rst:1218
msgid "Use :class:`qiskit.primitives.Estimator` primitive (if no shots are set, it performs an exact Statevector calculation). See example below."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1221
msgid ":class:`~qiskit.opflow.expectations.PauliExpectation`"
msgstr ":class:`~qiskit.opflow.expectations.PauliExpectation`"

#: ../../migration_guides/opflow_migration.rst:1222
msgid "Use any Estimator primitive (for :class:`qiskit.primitives.Estimator`, set ``shots!=None`` for a shot-based simulation, for :class:`qiskit_aer.primitives.Estimator` , this is the default)."
msgstr ""

#: ../../migration_guides/opflow_migration.rst
msgid "Example 1: Aer Pauli expectation"
msgstr ""

#: ../../migration_guides/opflow_migration.rst
msgid "Example 2: Matrix expectation"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1339
msgid "CVaRExpectation"
msgstr "CVaRExpectation"

#: ../../migration_guides/opflow_migration.rst:1348
msgid ":class:`~qiskit.opflow.expectations.CVaRExpectation`"
msgstr ":class:`~qiskit.opflow.expectations.CVaRExpectation`"

#: ../../migration_guides/opflow_migration.rst:1349
msgid "Functionality migrated into new VQE algorithm: :class:`~qiskit.algorithms.minimum_eigensolvers.SamplingVQE`"
msgstr ""

#: ../../migration_guides/opflow_migration.rst
msgid "Example 1: VQE with CVaR"
msgstr ""

#: ../../migration_guides/opflow_migration.rst
#: ../../migration_guides/opflow_migration.rst:1408
msgid "Gradients"
msgstr "Gradients"

#: ../../migration_guides/opflow_migration.rst:1411
msgid "The opflow :mod:`~qiskit.opflow.gradients` framework has been replaced by the new :mod:`qiskit.algorithms.gradients` module. The new gradients are **primitive-based subroutines** commonly used by algorithms and applications, which can also be executed in a standalone manner. For this reason, they now reside under :mod:`qiskit.algorithms`."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1415
msgid "The former gradient framework contained base classes, converters and derivatives. The \"derivatives\" followed a factory design pattern, where different methods could be provided via string identifiers to each of these classes. The new gradient framework contains two main families of subroutines: **Gradients** and **QGT/QFI**. The **Gradients** can either be Sampler or Estimator based, while the current **QGT/QFI** implementations are Estimator-based."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1421
msgid "This leads to a change in the workflow, where instead of doing:"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1431
msgid "We now import explicitly the desired class, depending on the target primitive (Sampler/Estimator) and target method:"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1442
msgid "This works similarly for the QFI class, where instead of doing:"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1452
msgid "You now have a generic QFI implementation that can be initialized with different QGT (Quantum Gradient Tensor) implementations:"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1467
msgid "Here is a quick guide for migrating the most common gradient settings. Please note that all new gradient imports follow the format:"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1483
msgid "``Gradient(method=\"lin_comb\")``"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1484
msgid "``LinCombEstimatorGradient(estimator=estimator)`` or ``LinCombSamplerGradient(sampler=sampler)``"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1485
msgid "``Gradient(method=\"param_shift\")``"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1486
msgid "``ParamShiftEstimatorGradient(estimator=estimator)`` or ``ParamShiftSamplerGradient(sampler=sampler)``"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1487
msgid "``Gradient(method=\"fin_diff\")``"
msgstr "``Gradient(method=\"fin_diff\")``"

#: ../../migration_guides/opflow_migration.rst:1488
msgid "``FiniteDiffEstimatorGradient(estimator=estimator)`` or ``ParamShiftSamplerGradient(sampler=sampler)``"
msgstr "``FiniteDiffEstimatorGradient(estimator=estimator)`` or ``ParamShiftSamplerGradient(sampler=sampler)``"

#: ../../migration_guides/opflow_migration.rst
msgid "QFI/QGT"
msgstr "QFI/QGT"

#: ../../migration_guides/opflow_migration.rst:1499
msgid "``QFI(method=\"lin_comb_full\")``"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1500
msgid "``qgt=LinCombQGT(Estimator())`` ``QFI(qgt=qgt)``"
msgstr "``qgt=LinCombQGT(Estimator())`` ``QFI(qgt=qgt)``"

#: ../../migration_guides/opflow_migration.rst:1504
msgid "Other auxiliary classes in the legacy gradient framework have now been deprecated. Here is the complete migration list:"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1513
msgid ":class:`~qiskit.opflow.gradients.DerivativeBase`"
msgstr ":class:`~qiskit.opflow.gradients.DerivativeBase`"

#: ../../migration_guides/opflow_migration.rst:1514
msgid "No replacement. This was the base class for the gradient, hessian and QFI base classes."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1515
msgid ":class:`.GradientBase` and :class:`~qiskit.opflow.gradients.Gradient`"
msgstr ":class:`.GradientBase` మరియు :class:`~qiskit.opflow.gradients.Gradient`"

#: ../../migration_guides/opflow_migration.rst:1516
msgid ":class:`.BaseSamplerGradient` or :class:`.BaseEstimatorGradient`, and specific subclasses per method, as explained above."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1518
msgid ":class:`.HessianBase` and :class:`~qiskit.opflow.gradients.Hessian`"
msgstr ":class:`.HessianBase` మరియు :class:`~qiskit.opflow.gradients.Hessian`"

#: ../../migration_guides/opflow_migration.rst:1519
msgid "No replacement. The new gradient framework does not work with hessians as independent objects."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1520
msgid ":class:`.QFIBase` and :class:`~qiskit.opflow.gradients.QFI`"
msgstr ":class:`.QFIBase` మరియు :class:`~qiskit.opflow.gradients.QFI`"

#: ../../migration_guides/opflow_migration.rst:1521
msgid "The new :class:`~qiskit.algorithms.gradients.QFI` class extends :class:`~qiskit.algorithms.gradients.QGT`, so the corresponding base class is :class:`~qiskit.algorithms.gradients.BaseQGT`"
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1523
msgid ":class:`~qiskit.opflow.gradients.CircuitGradient`"
msgstr ":class:`~qiskit.opflow.gradients.CircuitGradient`"

#: ../../migration_guides/opflow_migration.rst:1524
msgid "No replacement. This class was used to convert between circuit and gradient :class:`~qiskit.opflow.primitive_ops.PrimitiveOp`, and this functionality is no longer necessary."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1526
msgid ":class:`~qiskit.opflow.gradients.CircuitQFI`"
msgstr ":class:`~qiskit.opflow.gradients.CircuitQFI`"

#: ../../migration_guides/opflow_migration.rst:1527
msgid "No replacement. This class was used to convert between circuit and QFI :class:`~qiskit.opflow.primitive_ops.PrimitiveOp`, and this functionality is no longer necessary."
msgstr ""

#: ../../migration_guides/opflow_migration.rst:1529
msgid ":class:`~qiskit.opflow.gradients.NaturalGradient`"
msgstr ":class:`~qiskit.opflow.gradients.NaturalGradient`"

#: ../../migration_guides/opflow_migration.rst:1530
msgid "No replacement. The same functionality can be achieved with the QFI module."
msgstr ""

#: ../../migration_guides/opflow_migration.rst
msgid "Example 1: Finite Differences Batched Gradient"
msgstr ""

#: ../../migration_guides/opflow_migration.rst
msgid "Example 2: QFI"
msgstr ""

