msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-04 20:09+0000\n"
"PO-Revision-Date: 2023-09-02 07:25\n"
"Last-Translator: \n"
"Language: te\n"
"Language-Team: Telugu\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: te\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/algorithms/07_grover_examples.po\n"
"X-Crowdin-File-ID: 9506\n"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:10
msgid "This page was generated from `tutorials/algorithms/07_grover_examples.ipynb`__."
msgstr "ఈ పేజీ `tutorials/algorithms/07_grover_examples.ipynb`__ నుండి రూపొందించబడింది."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:9
msgid "Grover's algorithm examples"
msgstr "గ్రోవర్ యొక్క అల్గోరిథం ఉదాహరణలు"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:11
msgid "This notebook has examples demonstrating how to use the Qiskit `Grover <https://qiskit.org/documentation/stubs/qiskit.algorithms.Grover.html>`__ search algorithm, with different oracles."
msgstr "వివిధ ఒరాకిల్స్‌తో Qiskit `Grover <https://qiskit.org/documentation/stubs/qiskit.algorithms.Grover.html>`__ శోధన అల్గారిథమ్‌ను ఎలా ఉపయోగించాలో వివరించే ఉదాహరణలు ఈ నోట్‌బుక్‌లో ఉన్నాయి."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:23
msgid "Finding solutions to 3-SAT problems"
msgstr "3-SAT సమస్యలకు పరిష్కారాలను కనుగొనడం"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:25
msgid "Let's look at an example 3-Satisfiability (3-SAT) problem and walk-through how we can use Quantum Search to find its satisfying solutions. 3-SAT problems are usually expressed in `Conjunctive Normal Forms (CNF) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ and written in the `DIMACS-CNF <http://www.satcompetition.org/2009/format-benchmarks2009.html>`__ format. For example:"
msgstr "3-సంతృప్తి (3-SAT) సమస్యను ఉదాహరణగా పరిశీలిద్దాం మరియు దాని సంతృప్తికరమైన పరిష్కారాలను కనుగొనడానికి క్వాంటం శోధనను ఎలా ఉపయోగించవచ్చో చూద్దాం. 3-SAT సమస్యలు సాధారణంగా `కంజుంక్టివ్ నార్మల్ ఫారమ్‌లు (CNF) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__లో వ్యక్తీకరించబడతాయి మరియు `DIMACS-CNF <http://www.satcompetition.org/2009/format-benchmarks2009.html>`__ ఫార్మాట్‌లో వ్రాయబడతాయి. ఉదాహరణకి:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:54
msgid "The CNF of this 3-SAT instance contains 3 variables and 5 clauses:"
msgstr "ఈ 3-SAT ఉదాహరణ యొక్క CNF 3 వేరియబుల్స్ మరియు 5 క్లాజులను కలిగి ఉంది:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:56
msgid ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"
msgstr ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:58
msgid "It can be verified that this 3-SAT problem instance has three satisfying solutions:"
msgstr "ఈ 3-SAT సమస్య ఉదాహరణ మూడు సంతృప్తికరమైన పరిష్కారాలను కలిగి ఉందని ధృవీకరించవచ్చు:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:60
msgid ":math:`(v_1, v_2, v_3) = (T, F, T)` or :math:`(F, F, F)` or :math:`(T, T, F)`"
msgstr ":math:`(v_1, v_2, v_3) = (T, F, T)` or :math:`(F, F, F)` or :math:`(T, T, F)`"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:62
msgid "Or, expressed using the DIMACS notation:"
msgstr "లేదా, DIMACS సంజ్ఞామానాన్ని ఉపయోగించి వ్యక్తీకరించబడింది:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:64
msgid "``1 -2 3``, or ``-1 -2 -3``, or ``1 2 -3``."
msgstr "``1 -2 3``, or ``-1 -2 -3``, or ``1 2 -3``."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:66
msgid "With this example problem input, we then create the corresponding ``oracle`` for our ``Grover`` search. In particular, we use the ``PhaseOracle`` component, which supports parsing DIMACS-CNF format strings and constructing the corresponding oracle circuit."
msgstr "ఈ ఉదాహరణ సమస్య ఇన్‌పుట్‌తో, మేము మా ``గ్రోవర్`` శోధన కోసం సంబంధిత ``ఒరాకిల్``ని సృష్టిస్తాము. ప్రత్యేకించి, మేము DIMACS-CNF ఫార్మాట్ స్ట్రింగ్‌లను అన్వయించడానికి మరియు సంబంధిత ఒరాకిల్ సర్క్యూట్‌ను రూపొందించడానికి మద్దతిచ్చే ``ఫేజ్‌ఒరాకిల్`` కాంపోనెంట్‌ని ఉపయోగిస్తాము."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:127
msgid "The ``oracle`` can now be used to create an Grover instance:"
msgstr "గ్రోవర్ ఉదాహరణను సృష్టించడానికి ఇప్పుడు ``ఒరాకిల్``ని ఉపయోగించవచ్చు:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:152
msgid "We can then configure the backend and run the Grover instance to get the result:"
msgstr "మేము బ్యాకెండ్‌ను కాన్ఫిగర్ చేయవచ్చు మరియు ఫలితాన్ని పొందడానికి గ్రోవర్ ఉదాహరణను అమలు చేయవచ్చు:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:180
msgid "As seen above, a satisfying solution to the specified 3-SAT problem is obtained. And it is indeed one of the three satisfying solutions."
msgstr "పైన చూసినట్లుగా, పేర్కొన్న 3-SAT సమస్యకు సంతృప్తికరమైన పరిష్కారం లభిస్తుంది. మరియు ఇది నిజానికి మూడు సంతృప్తికరమైన పరిష్కారాలలో ఒకటి."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:182
msgid "Since we used the ``Sampler``, the complete measurement result is also returned, as shown in the plot below, where it can be seen that the binary strings ``000``, ``011``, and ``101`` (note the bit order in each string), corresponding to the three satisfying solutions all have high probabilities associated with them."
msgstr "మేము ``మాదిరి``ని ఉపయోగించినందున, దిగువ ప్లాట్‌లో చూపిన విధంగా పూర్తి కొలత ఫలితం కూడా అందించబడుతుంది, ఇక్కడ బైనరీ స్ట్రింగ్‌లు ``000``, ``011`` మరియు ``101 ``అని చూడవచ్చు. (ప్రతి స్ట్రింగ్‌లోని బిట్ క్రమాన్ని గమనించండి), మూడు సంతృప్తికరమైన పరిష్కారాలకు అనుగుణంగా అన్నింటికీ వాటితో అనుబంధించబడిన అధిక సంభావ్యత ఉంటుంది."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:207
msgid "Boolean Logical Expressions"
msgstr "బూలియన్ లాజికల్ ఎక్స్ప్రెషన్స్"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:209
msgid "Qiskit's ``Grover`` can also be used to perform Quantum Search on an ``Oracle`` constructed from other means, in addition to DIMACS. For example, the ``PhaseOracle`` can actually be configured using arbitrary Boolean logical expressions, as demonstrated below."
msgstr "Qiskit యొక్క ``గ్రోవర్`` DIMACSతో పాటు ఇతర మార్గాల నుండి నిర్మించిన ``Oracle``పై క్వాంటం శోధనను నిర్వహించడానికి కూడా ఉపయోగించవచ్చు. ఉదాహరణకు, దిగువ ప్రదర్శించిన విధంగా, ``PhaseOracle`` నిజానికి ఏకపక్ష బూలియన్ లాజికల్ ఎక్స్‌ప్రెషన్‌లను ఉపయోగించి కాన్ఫిగర్ చేయవచ్చు."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:262
msgid "In the example above, the input Boolean logical expression ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` should be quite self-explanatory, where ``^``, ``~``, and ``&`` represent the Boolean logical XOR, NOT, and AND operators, respectively. It should be quite easy to figure out the satisfying solution by examining its parts: ``w ^ x`` calls for ``w`` and ``x`` taking different values; ``~(y ^ z)`` requires ``y`` and ``z`` be the same; ``x & y & z`` dictates all three to be ``True``. Putting these together, we get the satisfying solution ``(w, x, y, z) = (False, True, True, True)``, which our ``Grover``'s result agrees with."
msgstr "పై ఉదాహరణలో, ఇన్‌పుట్ బూలియన్ లాజికల్ ఎక్స్‌ప్రెషన్ ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` చాలా స్వీయ వివరణాత్మకంగా ఉండాలి, ఇక్కడ ``^``, ``~``, మరియు ``&`` వరుసగా బూలియన్ లాజికల్ XOR, NOT మరియు AND ఆపరేటర్‌లను సూచిస్తాయి. దాని భాగాలను పరిశీలించడం ద్వారా సంతృప్తికరమైన పరిష్కారాన్ని గుర్తించడం చాలా సులభం: ``w ^ x`` విభిన్న విలువలను తీసుకొని ``w`` మరియు ``x`` కోసం కాల్ చేస్తుంది; ``~(y ^ z)``కి ``y`` మరియు ``z`` ఒకేలా ఉండాలి; ``x & y & z`` మూడింటిని ``నిజం`` అని నిర్దేశిస్తుంది. వీటిని కలిపి ఉంచితే, మన ``గ్రోవర్`` ఫలితం అంగీకరించే ``(w, x, y, z) = (False, True, True, True)`` అనే సంతృప్తికరమైన పరిష్కారం లభిస్తుంది."

