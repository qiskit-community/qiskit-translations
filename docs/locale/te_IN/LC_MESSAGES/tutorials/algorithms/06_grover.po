msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:25+0000\n"
"PO-Revision-Date: 2023-09-02 07:25\n"
"Last-Translator: \n"
"Language: te\n"
"Language-Team: Telugu\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: te\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/algorithms/06_grover.po\n"
"X-Crowdin-File-ID: 9504\n"

#: ../../tutorials/algorithms/06_grover.ipynb:10
msgid "This page was generated from `tutorials/algorithms/06_grover.ipynb`__."
msgstr "ఈ పేజీ `tutorials/algorithms/06_grover.ipynb`__ నుండి రూపొందించబడింది."

#: ../../tutorials/algorithms/06_grover.ipynb:9
msgid "Grover's Algorithm and Amplitude Amplification"
msgstr "గ్రోవర్స్ అల్గోరిథం మరియు యాంప్లిట్యూడ్ యాంప్లిఫికేషన్"

#: ../../tutorials/algorithms/06_grover.ipynb:11
msgid "Grover's algorithm is one of the most famous quantum algorithms introduced by Lov Grover in 1996 [1]. It has initially been proposed for unstructured search problems, i.e. for finding a marked element in a unstructured database. However, Grover's algorithm is now a subroutine to several other algorithms, such as Grover Adaptive Search [2]. For the details of Grover's algorithm, please see `Grover's Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ in the Qiskit textbook."
msgstr "1996లో లోవ్ గ్రోవర్ ప్రవేశపెట్టిన అత్యంత ప్రసిద్ధ క్వాంటం అల్గారిథమ్‌లలో గ్రోవర్స్ అల్గోరిథం ఒకటి [1]. ఇది ప్రారంభంలో నిర్మాణాత్మక శోధన సమస్యల కోసం ప్రతిపాదించబడింది, అనగా నిర్మాణాత్మక డేటాబేస్లో గుర్తించబడిన మూలకాన్ని కనుగొనడం కోసం. అయినప్పటికీ, గ్రోవర్స్ అల్గోరిథం ఇప్పుడు గ్రోవర్ అడాప్టివ్ సెర్చ్ [2] వంటి అనేక ఇతర అల్గారిథమ్‌లకు సబ్ రొటీన్ ఉంది. గ్రోవర్స్ అల్గారిథమ్ వివరాల కోసం, దయచేసి Qiskit పాఠ్యపుస్తకంలోని `గ్రోవర్స్ అల్గారిథమ్ <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ని చూడండి."

#: ../../tutorials/algorithms/06_grover.ipynb:13
msgid "Qiskit implements Grover's algorithm in the ``Grover`` class. This class also includes the generalized version, Amplitude Amplification [3], and allows setting individual iterations and other meta-settings to Grover's algorithm."
msgstr "Qiskit గ్రోవర్స్ అల్గారిథమ్‌ను ``గ్రోవర్`` క్లాస్లో అమలు చేస్తుంది. ఈ క్లాస్ సాధారణీకరించిన సంస్కరణ, యాంప్లిట్యూడ్ యాంప్లిఫికేషన్ [3] ని కూడా కలిగి ఉంది మరియు గ్రోవర్స్ అల్గారిథమ్‌కు ఇండివిడ్యుఅల్ ఇట్రేషన్స్ మరియు ఇతర మెటా-సెట్టింగ్‌లను సెట్ చేయడానికి అనుమతిస్తుంది."

#: ../../tutorials/algorithms/06_grover.ipynb:15
#: ../../tutorials/algorithms/06_grover.ipynb:764
msgid "**References:**"
msgstr "**ప్రస్తావనలు:**"

#: ../../tutorials/algorithms/06_grover.ipynb:17
msgid "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"
msgstr "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"

#: ../../tutorials/algorithms/06_grover.ipynb:19
msgid "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"
msgstr "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"

#: ../../tutorials/algorithms/06_grover.ipynb:21
msgid "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"
msgstr "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"

#: ../../tutorials/algorithms/06_grover.ipynb:33
msgid "Grover's algorithm"
msgstr "గ్రోవర్స్ అల్గోరిథం"

#: ../../tutorials/algorithms/06_grover.ipynb:35
msgid "Grover's algorithm uses the Grover operator :math:`\\mathcal{Q}` to amplify the amplitudes of the good states:"
msgstr "గ్రోవర్స్ అల్గోరిథం గ్రోవర్ ఆపరేటర్ :math:`\\mathcal{Q}`ని మంచి స్టేట్ల వ్యాప్తిని అంప్లిఫై చేయడానికి ఉపయోగిస్తుంది:"

#: ../../tutorials/algorithms/06_grover.ipynb:37
msgid "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"
msgstr "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"

#: ../../tutorials/algorithms/06_grover.ipynb:42
msgid "Here, \\* :math:`\\mathcal{A}` is the initial search state for the algorithm, which is just Hadamards, :math:`H^{\\otimes n}` for the textbook Grover search, but can be more elaborate for Amplitude Amplification \\* :math:`\\mathcal{S_0}` is the reflection about the all 0 state"
msgstr "ఇక్కడ, \\* :math:`\\mathcal{A}` అనేది అల్గోరిథం కోసం ప్రారంభ శోధన స్టేట్, ఇది కేవలం Hadamards, :math:`H^{\\otimes n}` పాఠ్యపుస్తకం గ్రోవర్ శోధన కోసం, కానీ మరింత ఉండవచ్చు యాంప్లిట్యూడ్ యాంప్లిఫికేషన్ కోసం విశదీకరించు \\* :math:`\\mathcal{S_0}` అనేది మొత్తం 0 స్థితికి సంబంధించిన ప్రతిబింబం"

#: ../../tutorials/algorithms/06_grover.ipynb:44
msgid "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"
msgstr "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"

#: ../../tutorials/algorithms/06_grover.ipynb:49
msgid "\\* :math:`\\mathcal{S_f}` is the oracle that applies"
msgstr "\\* :math:`\\mathcal{S_f}` అనేది వర్తించే ఒరాకిల్"

#: ../../tutorials/algorithms/06_grover.ipynb:51
msgid "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"
msgstr "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"

#: ../../tutorials/algorithms/06_grover.ipynb:56
msgid "where :math:`f(x)` is 1 if :math:`x` is a good state and otherwise 0."
msgstr "ఇక్కడ :math:`x` మంచి స్టేట్ అయితే :math:`f(x)` 1 లేదా 0."

#: ../../tutorials/algorithms/06_grover.ipynb:58
msgid "In a nutshell, Grover's algorithm applies different powers of :math:`\\mathcal{Q}` and after each execution checks whether a good solution has been found."
msgstr "క్లుప్తంగా, గ్రోవర్స్ అల్గోరిథం విభిన్న :math:`\\mathcal{Q}` యొక్క ఘాతాంకాలని వర్తింపజేస్తుంది మరియు ప్రతి అమలు తర్వాత మంచి పరిష్కారం కనుగొనబడిందో లేదో తనిఖీ చేస్తుంది."

#: ../../tutorials/algorithms/06_grover.ipynb:61
msgid "Running Grover's algorithm"
msgstr "గ్రోవర్స్ అల్గోరిథంను అమలు చేయడం"

#: ../../tutorials/algorithms/06_grover.ipynb:63
msgid "To run Grover's algorithm with the ``Grover`` class, firstly, we need to specify an oracle for the circuit of Grover's algorithm. In the following example, we use ``QuantumCircuit`` as the oracle of Grover's algorithm. However, there are several other class that we can use as the oracle of Grover's algorithm. We talk about them later in this tutorial."
msgstr "గ్రోవర్స్ అల్గారిథమ్‌ను ``Grover`` క్లాస్‌తో రన్ చేయడానికి, ముందుగా, గ్రోవర్ అల్గారిథమ్ సర్క్యూట్ కోసం మనం ఒరాకిల్‌ను పేర్కొనాలి. కింది ఉదాహరణలో, మనము గ్రోవర్ యొక్క అల్గోరిథం యొక్క ఒరాకిల్‌గా ``QuantumCircuit``ని ఉపయోగిస్తాము. అయినప్పటికీ, గ్రోవర్స్ అల్గోరిథం యొక్క ఒరాకిల్‌గా మనం ఉపయోగించగల అనేక ఇతర క్లాస్లు ఉన్నాయి. మనము ఈ ట్యుటోరియల్‌లో వాటి గురించి తరువాత మాట్లాడుతాము."

#: ../../tutorials/algorithms/06_grover.ipynb:65
msgid "Note that the oracle for ``Grover`` must be a *phase-flip* oracle. That is, it multiplies the amplitudes of the of \"good states\" by a factor of :math:`-1`. We explain later how to convert a *bit-flip* oracle to a phase-flip oracle."
msgstr "``గ్రోవర్`` కోసం ఒరాకిల్ తప్పనిసరిగా *ఫేస్-ఫ్లిప్* ఒరాకిల్ అయి ఉంటుందని గమనించండి. అంటే, ఇది \"మంచి స్థితుల\" యొక్క వ్యాప్తిని :math:`-1` కారకంతో గుణిస్తుంది. *బిట్-ఫ్లిప్* ఒరాకిల్‌ను ఫేస్-ఫ్లిప్ ఒరాకిల్‌గా ఎలా మార్చాలో మేము తరువాత వివరిస్తాము."

#: ../../tutorials/algorithms/06_grover.ipynb:111
msgid "Then, we specify a backend and call the ``run`` method of ``Grover`` with a backend to execute the circuits. The returned result type is a ``GroverResult``."
msgstr "అప్పుడు, మేము బ్యాకెండ్‌ను పేర్కొని, సర్క్యూట్‌లను అమలు చేయడానికి బ్యాకెండ్‌తో ``గ్రోవర్`` యొక్క ``రన్`` పద్ధతిని కాల్ చేస్తాము. తిరిగి వచ్చిన ఫలితం రకం ``GroverResult``."

#: ../../tutorials/algorithms/06_grover.ipynb:113
msgid "If the search was successful, the ``oracle_evaluation`` attribute of the result will be ``True``. In this case, the most sampled measurement, ``top_measurement``, is one of the \"good states\". Otherwise, ``oracle_evaluation`` will be False."
msgstr "శోధన విజయవంతమైతే, ఫలితం యొక్క ``oracle_evaluation`` లక్షణం ``నిజం`` అవుతుంది. ఈ సందర్భంలో, అత్యంత నమూనా కొలత, ``top_measurement``, \"మంచి స్థితులలో\" ఒకటి. లేదంటే, ``oracle_evaluation`` తప్పు అవుతుంది."

#: ../../tutorials/algorithms/06_grover.ipynb:176
msgid "In the example, the result of ``top_measurement`` is ``11`` which is one of \"good state\". Thus, we succeeded to find the answer by using ``Grover``."
msgstr "ఉదాహరణలో, ``top_measurement`` ఫలితం ``11``, ఇది \"మంచి స్థితి\"లో ఒకటి. ఆ విధంగా, మేము ``గ్రోవర్``ని ఉపయోగించడం ద్వారా సమాధానాన్ని కనుగొనడంలో విజయం సాధించాము."

#: ../../tutorials/algorithms/06_grover.ipynb:188
msgid "Using the different types of classes as the oracle of ``Grover``"
msgstr "విభిన్న రకాల తరగతులను ``గ్రోవర్`` యొక్క ఒరాకిల్‌గా ఉపయోగించడం"

#: ../../tutorials/algorithms/06_grover.ipynb:190
msgid "In the above example, we used ``QuantumCircuit`` as the oracle of ``Grover``. However, we can also use ``qiskit.quantum_info.Statevector`` as oracle. All the following examples are when :math:`|11\\rangle` is \"good state\""
msgstr "పై ఉదాహరణలో, మేము ``గ్రోవర్`` యొక్క ఒరాకిల్‌గా ``QuantumCircuit``ని ఉపయోగించాము. అయినప్పటికీ, మనం ``qiskit.quantum_info.Statevector``ని ఒరాకిల్‌గా కూడా ఉపయోగించవచ్చు. కింది ఉదాహరణలన్నీ :math:`|11\\rangle` \"మంచి స్థితి\" అయినప్పుడు"

#: ../../tutorials/algorithms/06_grover.ipynb:253
msgid "Internally, the statevector is mapped to a quantum circuit:"
msgstr "అంతర్గతంగా, స్టేట్‌వెక్టర్ క్వాంటం సర్క్యూట్‌కు మ్యాప్ చేయబడింది:"

#: ../../tutorials/algorithms/06_grover.ipynb:283
msgid "Qiskit allows for an easy construction of more complex oracles: \\* ``PhaseOracle``: for parsing logical expressions such as ``'~a | b'``. This is especially useful for solving 3-SAT problems and is shown in the accompanying `Grover Examples <07_grover_examples.ipynb>`__ tutorial."
msgstr "Qiskit మరింత సంక్లిష్టమైన ఒరాకిల్స్‌ను సులభంగా నిర్మించడానికి అనుమతిస్తుంది: \\* ``ఫేజ్‌ఒరాకిల్``: ``'~a | b'`` వంటి తార్కిక వ్యక్తీకరణలను అన్వయించడం కోసం. ఇది 3-SAT సమస్యలను పరిష్కరించడానికి ప్రత్యేకంగా ఉపయోగపడుతుంది మరియు దానితో పాటుగా ఉన్న `గ్రోవర్ ఉదాహరణలు <07_grover_examples.ipynb>`__ ట్యుటోరియల్‌లో చూపబడింది."

#: ../../tutorials/algorithms/06_grover.ipynb:285
msgid "Here we'll use the ``PhaseOracle`` for the simple example of finding the state :math:`|11\\rangle`, which corresponds to ``'a & b'``."
msgstr "ఇక్కడ మనం ``'a & b'``కి అనుగుణంగా ఉండే స్థితి :math:`|11\\rangle`ని కనుగొనే సాధారణ ఉదాహరణ కోసం ``PhaseOracle``ని ఉపయోగిస్తాము."

#: ../../tutorials/algorithms/06_grover.ipynb:324
msgid "Which we observe that this oracle implements a phase flip when the state is :math:`|11\\rangle`"
msgstr "స్టేట్ :math:`|11\\rangle` అయినప్పుడు ఈ ఒరాకిల్ ఫేస్ ఫ్లిప్‌ను అమలు చేస్తుందని గమనించవచ్చు"

#: ../../tutorials/algorithms/06_grover.ipynb:326
msgid "As mentioned above, Grover's algorithm requires a *phase-flip* oracle. A bit-flip oracle flips the state of an auxiliary qubit if the other qubits satisfy the condition. To use these types of oracles with Grover's we need to convert the bit-flip oracle to a phase-flip oracle by sandwiching the auxiliary qubit of the bit-flip oracle by :math:`X` and :math:`H` gates."
msgstr "పైన పేర్కొన్నట్లుగా, గ్రోవర్ యొక్క అల్గారిథమ్‌కు *ఫేజ్-ఫ్లిప్* ఒరాకిల్ అవసరం. ఇతర క్విట్‌లు షరతును సంతృప్తిపరిచినట్లయితే, ఒక బిట్-ఫ్లిప్ ఒరాకిల్ సహాయక క్విట్ స్థితిని తిప్పుతుంది. గ్రోవర్స్‌తో ఈ రకమైన ఒరాకిల్‌లను ఉపయోగించడానికి మనం బిట్-ఫ్లిప్ ఒరాకిల్ యొక్క సహాయక క్విట్‌ను :math:`X` మరియు :math:`H` గేట్‌ల ద్వారా శాండ్‌విచ్ చేయడం ద్వారా ఫేజ్-ఫ్లిప్ ఒరాకిల్‌గా మార్చాలి."

#: ../../tutorials/algorithms/06_grover.ipynb:328
msgid "**Note:** This transformation from a bit-flip to a phase-flip oracle holds generally and you can use this to convert your oracle to the right representation."
msgstr "**గమనిక:** బిట్-ఫ్లిప్ నుండి ఫేజ్-ఫ్లిప్ ఒరాకిల్‌కు ఈ రూపాంతరం సాధారణంగా ఉంటుంది మరియు మీరు మీ ఒరాకిల్‌ను సరైన ప్రాతినిధ్యంగా మార్చడానికి దీన్ని ఉపయోగించవచ్చు."

#: ../../tutorials/algorithms/06_grover.ipynb:340
msgid "Amplitude amplification"
msgstr "Amplitude amplification"

#: ../../tutorials/algorithms/06_grover.ipynb:342
msgid "Grover's algorithm uses Hadamard gates to create the uniform superposition of all the states at the beginning of the Grover operator :math:`\\mathcal{Q}`. If some information on the good states is available, it might be useful to not start in a uniform superposition but only initialize specific states. This, generalized, version of Grover's algorithm is referred to *Amplitude Amplification*."
msgstr "గ్రోవర్ యొక్క అల్గోరిథం గ్రోవర్ ఆపరేటర్ :math:`\\mathcal{Q}` ప్రారంభంలో అన్ని రాష్ట్రాల యొక్క ఏకరీతి సూపర్‌పొజిషన్‌ను సృష్టించడానికి హడమర్డ్ గేట్‌లను ఉపయోగిస్తుంది. మంచి స్థితులపై కొంత సమాచారం అందుబాటులో ఉన్నట్లయితే, ఏకరీతి సూపర్‌పొజిషన్‌లో ప్రారంభించకుండా నిర్దిష్ట స్థితులను మాత్రమే ప్రారంభించడం ఉపయోగకరంగా ఉండవచ్చు. ఇది సాధారణీకరించబడిన, గ్రోవర్ యొక్క అల్గోరిథం యొక్క సంస్కరణను *యాంప్లిట్యూడ్ యాంప్లిఫికేషన్*గా సూచిస్తారు."

#: ../../tutorials/algorithms/06_grover.ipynb:344
msgid "In Qiskit, the initial superposition state can easily be adjusted by setting the ``state_preparation`` argument."
msgstr "Qiskitలో, ``state_preparation`` వాదనను సెట్ చేయడం ద్వారా ప్రారంభ సూపర్‌పొజిషన్ స్థితిని సులభంగా సర్దుబాటు చేయవచ్చు."

#: ../../tutorials/algorithms/06_grover.ipynb:347
msgid "State preparation"
msgstr "స్టేట్ ప్రిపరేషన్"

#: ../../tutorials/algorithms/06_grover.ipynb:349
msgid "A ``state_preparation`` argument is used to specify a quantum circuit that prepares a quantum state for the start point of the amplitude amplification. By default, a circuit with :math:`H^{\\otimes n}` is used to prepare uniform superposition (so it will be Grover's search). The diffusion circuit of the amplitude amplification reflects ``state_preparation`` automatically."
msgstr "యాంప్లిట్యూడ్ యాంప్లిఫికేషన్ యొక్క ప్రారంభ స్థానం కోసం క్వాంటం స్థితిని సిద్ధం చేసే క్వాంటం సర్క్యూట్‌ను పేర్కొనడానికి ``స్టేట్_ప్రిపరేషన్`` ఆర్గ్యుమెంట్ ఉపయోగించబడుతుంది. డిఫాల్ట్‌గా, ఏకరీతి సూపర్‌పొజిషన్‌ను సిద్ధం చేయడానికి :math:`H^{\\otimes n}`తో సర్క్యూట్ ఉపయోగించబడుతుంది (కాబట్టి ఇది గ్రోవర్ యొక్క శోధన అవుతుంది). యాంప్లిట్యూడ్ యాంప్లిఫికేషన్ యొక్క డిఫ్యూజన్ సర్క్యూట్ ``స్టేట్_ప్రిపరేషన్``ని స్వయంచాలకంగా ప్రతిబింబిస్తుంది."

#: ../../tutorials/algorithms/06_grover.ipynb:464
msgid "Full flexibility"
msgstr "పూర్ణ నాణ్యత"

#: ../../tutorials/algorithms/06_grover.ipynb:466
msgid "For more advanced use, it is also possible to specify the entire Grover operator by setting the ``grover_operator`` argument. This might be useful if you know more efficient implementation for :math:`\\mathcal{Q}` than the default construction via zero reflection, oracle and state preparation."
msgstr "మరింత అధునాతన ఉపయోగం కోసం, ``grover_operator`` ఆర్గ్యుమెంట్‌ని సెట్ చేయడం ద్వారా మొత్తం గ్రోవర్ ఆపరేటర్‌ను పేర్కొనడం కూడా సాధ్యమవుతుంది. జీరో రిఫ్లెక్షన్, ఒరాకిల్ మరియు స్టేట్ ప్రిపరేషన్ ద్వారా డిఫాల్ట్ నిర్మాణం కంటే :math:`\\mathcal{Q}` కోసం మరింత సమర్థవంతమైన అమలు మీకు తెలిస్తే ఇది ఉపయోగకరంగా ఉండవచ్చు."

#: ../../tutorials/algorithms/06_grover.ipynb:468
msgid "The ``qiskit.circuit.library.GroverOperator`` can be a good starting point and offers more options for an automated construction of the Grover operator. You can for instance \\* set the ``mcx_mode`` \\* ignore qubits in the zero reflection by setting ``reflection_qubits`` \\* explicitly exchange the :math:`\\mathcal{S_f}, \\mathcal{S_0}` and :math:`\\mathcal{A}` operations using the ``oracle``, ``zero_reflection`` and ``state_preparation`` arguments"
msgstr "``qiskit.circuit.library.GroverOperator`` అనేది మంచి ప్రారంభ స్థానం మరియు గ్రోవర్ ఆపరేటర్ యొక్క స్వయంచాలక నిర్మాణం కోసం మరిన్ని ఎంపికలను అందిస్తుంది. ఉదాహరణకు మీరు \\* ``reflection_qubits`` \\*ని సెట్ చేయడం ద్వారా సున్నా ప్రతిబింబంలో ``mcx_mode`` \\* విస్మరించండి క్విట్‌లను సెట్ చేయవచ్చు:math:`\\mathcal{S_f}, \\mathcal{S_0}` మరియు :math:`\\mathcal{A}` కార్యకలాపాలు ``ఒరాకిల్``, ``zero_reflection`` మరియు ``state_preparation`` ఆర్గ్యుమెంట్‌లను ఉపయోగిస్తాయి"

#: ../../tutorials/algorithms/06_grover.ipynb:479
msgid "For instance, imagine the good state is a three qubit state :math:`|111\\rangle` but we used 2 additional qubits as auxiliary qubits."
msgstr "ఉదాహరణకు, మంచి స్థితి మూడు క్విట్‌ల స్థితిని ఊహించుకోండి :math:`|111\\rangle` కానీ మేము 2 అదనపు క్విట్‌లను సహాయక క్విట్‌లుగా ఉపయోగించాము."

#: ../../tutorials/algorithms/06_grover.ipynb:511
msgid "Then, per default, the Grover operator implements the zero reflection on all five qubits."
msgstr "అప్పుడు, డిఫాల్ట్‌గా, గ్రోవర్ ఆపరేటర్ మొత్తం ఐదు క్విట్‌లపై సున్నా ప్రతిబింబాన్ని అమలు చేస్తుంది."

#: ../../tutorials/algorithms/06_grover.ipynb:543
msgid "But we know that we only need to consider the first three:"
msgstr "కానీ మనం మొదటి మూడింటిని మాత్రమే పరిగణించాల్సిన అవసరం ఉందని మాకు తెలుసు:"

#: ../../tutorials/algorithms/06_grover.ipynb:575
msgid "Dive into other arguments of ``Grover``"
msgstr "``గ్రోవర్`` యొక్క ఇతర వాదనలలోకి ప్రవేశించండి"

#: ../../tutorials/algorithms/06_grover.ipynb:577
msgid "``Grover`` has arguments other than ``oracle`` and ``state_preparation``. We will explain them in this section."
msgstr "``గ్రోవర్``కు ``ఒరాకిల్`` మరియు ``స్టేట్_ప్రిపరేషన్`` కాకుండా ఇతర వాదనలు ఉన్నాయి. మేము వాటిని ఈ విభాగంలో వివరిస్తాము."

#: ../../tutorials/algorithms/06_grover.ipynb:580
msgid "Specifying ``good_state``"
msgstr "``మంచి_స్టేట్``ని పేర్కొంటోంది"

#: ../../tutorials/algorithms/06_grover.ipynb:582
msgid "``good_state`` is used to check whether the measurement result is correct or not internally. It can be a list of binary strings, a list of integer, ``Statevector``, and Callable. If the input is a list of bitstrings, each bitstrings in the list represents a good state. If the input is a list of integer, each integer represent the index of the good state to be :math:`|1\\rangle`. If it is a ``Statevector``, it represents a superposition of all good states."
msgstr "కొలత ఫలితం సరైనదేనా లేదా అంతర్గతంగా కాదా అని తనిఖీ చేయడానికి ``గుడ్_స్టేట్`` ఉపయోగించబడుతుంది. ఇది బైనరీ స్ట్రింగ్‌ల జాబితా, పూర్ణాంకాల జాబితా, ``స్టేవెక్టర్`` మరియు కాల్ చేయదగినది కావచ్చు. ఇన్‌పుట్ బిట్‌స్ట్రింగ్‌ల జాబితా అయితే, జాబితాలోని ప్రతి బిట్‌స్ట్రింగ్‌లు మంచి స్థితిని సూచిస్తాయి. ఇన్‌పుట్ పూర్ణాంకాల జాబితా అయితే, ప్రతి పూర్ణాంకం మంచి స్థితి యొక్క సూచికను సూచిస్తుంది :math:`|1\\rangle`. ఇది ``స్టేవెక్టర్`` అయితే, ఇది అన్ని మంచి రాష్ట్రాల సూపర్‌పొజిషన్‌ను సూచిస్తుంది."

#: ../../tutorials/algorithms/06_grover.ipynb:756
msgid "The number of ``iterations``"
msgstr "`` పునరావృత్తులు`` సంఖ్య"

#: ../../tutorials/algorithms/06_grover.ipynb:758
msgid "The number of repetition of applying the Grover operator is important to obtain the correct result with Grover's algorithm. The number of iteration can be set by the ``iteration`` argument of ``Grover``. The following inputs are supported: \\* an integer to specify a single power of the Grover operator that's applied \\* or a list of integers, in which all these different powers of the Grover operator are run consecutively and after each time we check if a correct solution has been found"
msgstr "గ్రోవర్ యొక్క అల్గారిథమ్‌తో సరైన ఫలితాన్ని పొందడానికి గ్రోవర్ ఆపరేటర్‌ని వర్తింపజేయడం యొక్క పునరావృత సంఖ్య చాలా ముఖ్యం. పునరావృత సంఖ్యను ``గ్రోవర్`` యొక్క `` పునరావృతం`` ఆర్గ్యుమెంట్ ద్వారా సెట్ చేయవచ్చు. కింది ఇన్‌పుట్‌లకు మద్దతు ఉంది: \\* వర్తింపజేయబడిన గ్రోవర్ ఆపరేటర్ యొక్క ఒకే శక్తిని పేర్కొనడానికి ఒక పూర్ణాంకం \\* లేదా పూర్ణాంకాల జాబితా, దీనిలో గ్రోవర్ ఆపరేటర్ యొక్క ఈ విభిన్న శక్తులన్నీ వరుసగా అమలు చేయబడతాయి మరియు ప్రతిసారీ సరైన పరిష్కారం కనుగొనబడిందో లేదో తనిఖీ చేస్తాము"

#: ../../tutorials/algorithms/06_grover.ipynb:760
msgid "Additionally there is the ``sample_from_iterations`` argument. When it is ``True``, instead of the specific power in ``iterations``, a random integer between 0 and the value in ``iteration`` is used as the power Grover's operator. This approach is useful when we don't even know the number of solution."
msgstr "అదనంగా ``నమూనా_నుండి_మళ్లీ`` వాదన ఉంది. ఇది ``ట్రూ`` అయినప్పుడు, ``ఇటరేషన్‌లు``లోని నిర్దిష్ట శక్తికి బదులుగా, 0 మరియు ``ఇటరేషన్``లోని విలువ మధ్య యాదృచ్ఛిక పూర్ణాంకం పవర్ గ్రోవర్ ఆపరేటర్‌గా ఉపయోగించబడుతుంది. పరిష్కారం యొక్క సంఖ్య కూడా మనకు తెలియనప్పుడు ఈ విధానం ఉపయోగపడుతుంది."

#: ../../tutorials/algorithms/06_grover.ipynb:762
msgid "For more details of the algorithm using ``sample_from_iterations``, see [4]."
msgstr "అల్గోరిథం యొక్క మరిన్ని వివరాల కోసం ``సాంపిల్_ఫ్రమ్_ఇటరేషన్స్``ని ఉపయోగించి, [4] చూడండి."

#: ../../tutorials/algorithms/06_grover.ipynb:766
msgid "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"
msgstr "[4]: బోయర్ మరియు ఇతరులు., క్వాంటం శోధనపై గట్టి హద్దులు `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"

#: ../../tutorials/algorithms/06_grover.ipynb:819
msgid "When the number of solutions is known, we can also use a static method ``optimal_num_iterations`` to find the optimal number of iterations. Note that the output iterations is an approximate value. When the number of qubits is small, the output iterations may not be optimal."
msgstr "పరిష్కారాల సంఖ్య తెలిసినప్పుడు, మేము పునరావృతాల యొక్క సరైన సంఖ్యను కనుగొనడానికి స్టాటిక్ పద్ధతి ``optimal_num_iterations``ని కూడా ఉపయోగించవచ్చు. అవుట్‌పుట్ పునరావృత్తులు సుమారుగా విలువ అని గమనించండి. క్విట్‌ల సంఖ్య తక్కువగా ఉన్నప్పుడు, అవుట్‌పుట్ పునరావృత్తులు సరైనవి కాకపోవచ్చు."

#: ../../tutorials/algorithms/06_grover.ipynb:867
msgid "Applying ``post_processing``"
msgstr "``పోస్ట్_ప్రాసెసింగ్``ని వర్తింపజేస్తోంది"

#: ../../tutorials/algorithms/06_grover.ipynb:869
msgid "We can apply an optional post processing to the top measurement for ease of readability. It can be used e.g. to convert from the bit-representation of the measurement ``[1, 0, 1]`` to a DIMACS CNF format ``[1, -2, 3]``."
msgstr "చదవగలిగే సౌలభ్యం కోసం మేము టాప్ మెజర్‌మెంట్‌కు ఐచ్ఛిక పోస్ట్ ప్రాసెసింగ్‌ని వర్తింపజేయవచ్చు. దీనిని ఉపయోగించవచ్చు ఉదా. కొలత ``[1, 0, 1]`` యొక్క బిట్-ప్రాతినిధ్యం నుండి DIMACS CNF ఫార్మాట్ ``[1, -2, 3]``కి మార్చడానికి."

