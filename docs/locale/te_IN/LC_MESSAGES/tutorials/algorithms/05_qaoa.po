msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:25+0000\n"
"PO-Revision-Date: 2023-09-02 07:25\n"
"Last-Translator: \n"
"Language: te\n"
"Language-Team: Telugu\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: te\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/algorithms/05_qaoa.po\n"
"X-Crowdin-File-ID: 9502\n"

#: ../../tutorials/algorithms/05_qaoa.ipynb:10
msgid "This page was generated from `tutorials/algorithms/05_qaoa.ipynb`__."
msgstr "ఈ పేజీ `tutorials/algorithms/05_qaoa.ipynb`__ నుండి రూపొందించబడింది."

#: ../../tutorials/algorithms/05_qaoa.ipynb:9
msgid "Quantum Approximate Optimization Algorithm"
msgstr "క్వాంటం ఉజ్జాయింపు ఆప్టిమైజేషన్ అల్గోరిథం"

#: ../../tutorials/algorithms/05_qaoa.ipynb:11
msgid "Qiskit has an implementation of the Quantum Approximate Optimization Algorithm `QAOA <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.QAOA.html>`__ and this notebook demonstrates using it for a graph partition problem."
msgstr "Qiskit క్వాంటం ఉజ్జాయింపు ఆప్టిమైజేషన్ అల్గారిథమ్ `QAOA <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.QAOA.html>`__ అమలును కలిగి ఉంది మరియు ఈ నోట్‌బుక్ దానిని ఒక సమస్య కోసం ఉపయోగించడాన్ని ప్రదర్శిస్తుంది."

#: ../../tutorials/algorithms/05_qaoa.ipynb:13
msgid "Before we begin, let's import the ``annotations`` module from ``__future__`` to allow postponed evaluation of annotations. This enables us to use simpler type hints throughout the notebook."
msgstr "మేము ప్రారంభించడానికి ముందు, ఉల్లేఖనాల వాయిదా మూల్యాంకనాన్ని అనుమతించడానికి ``__future__`` నుండి ``ఉల్లేఖనాలు`` మాడ్యూల్‌ని దిగుమతి చేద్దాం. ఇది నోట్‌బుక్ అంతటా సరళమైన టైప్ సూచనలను ఉపయోగించడానికి మాకు వీలు కల్పిస్తుంది."

#: ../../tutorials/algorithms/05_qaoa.ipynb:34
msgid "First we create a graph and draw it so it can be seen."
msgstr "మొదట మనం ఒక గ్రాఫ్‌ని సృష్టించి, దానిని చూడగలిగేలా గీస్తాము."

#: ../../tutorials/algorithms/05_qaoa.ipynb:85
msgid "The brute-force method is as follows. Basically, we exhaustively try all the binary assignments. In each binary assignment, the entry of a vertex is either 0 (meaning the vertex is in the first partition) or 1 (meaning the vertex is in the second partition). We print the binary assignment that satisfies the definition of the graph partition and corresponds to the minimal number of crossing edges."
msgstr "బ్రూట్-ఫోర్స్ పద్ధతి క్రింది విధంగా ఉంది. ప్రాథమికంగా, మేము అన్ని బైనరీ అసైన్‌మెంట్‌లను సమగ్రంగా ప్రయత్నిస్తాము. ప్రతి బైనరీ అసైన్‌మెంట్‌లో, శీర్షం యొక్క ప్రవేశం 0 (అంటే శీర్షం మొదటి విభజనలో ఉంది) లేదా 1 (అంటే శీర్షం రెండవ విభజనలో ఉందని అర్థం). మేము గ్రాఫ్ విభజన యొక్క నిర్వచనాన్ని సంతృప్తిపరిచే బైనరీ అసైన్‌మెంట్‌ను ప్రింట్ చేస్తాము మరియు క్రాసింగ్ అంచుల కనీస సంఖ్యకు అనుగుణంగా ఉంటుంది."

#: ../../tutorials/algorithms/05_qaoa.ipynb:161
msgid "The graph partition problem can be converted to an Ising Hamiltonian. Qiskit has different capabilities in the Optimization module to do this. Here, since the goal is to show QAOA, the module is used without further explanation to create the operator. The paper `Ising formulations of many NP problems <https://arxiv.org/abs/1302.5843>`__ may be of interest if you would like to understand the technique further."
msgstr "గ్రాఫ్ విభజన సమస్యను ఐసింగ్ హామిల్టోనియన్‌గా మార్చవచ్చు. దీన్ని చేయడానికి ఆప్టిమైజేషన్ మాడ్యూల్‌లో Qiskit విభిన్న సామర్థ్యాలను కలిగి ఉంది. ఇక్కడ, QAOAని చూపడం లక్ష్యం కాబట్టి, ఆపరేటర్‌ని సృష్టించడానికి మాడ్యూల్ తదుపరి వివరణ లేకుండా ఉపయోగించబడుతుంది. మీరు సాంకేతికతను మరింత అర్థం చేసుకోవాలనుకుంటే `అనేక NP సమస్యలకు సంబంధించిన సూత్రీకరణలు <https://arxiv.org/abs/1302.5843>`__ అనే పేపర్ ఆసక్తిని కలిగిస్తుంది."

#: ../../tutorials/algorithms/05_qaoa.ipynb:231
msgid "So lets use the QAOA algorithm to find the solution."
msgstr "కాబట్టి పరిష్కారాన్ని కనుగొనడానికి QAOA అల్గారిథమ్‌ని ఉపయోగించండి."

#: ../../tutorials/algorithms/05_qaoa.ipynb:318
msgid "The outcome can be seen to match to the value computed above by brute force. But we can also use the classical ``NumPyMinimumEigensolver`` to do the computation, which may be useful as a reference without doing things by brute force."
msgstr "బ్రూట్ ఫోర్స్ ద్వారా పైన లెక్కించబడిన విలువకు ఫలితం సరిపోలినట్లు చూడవచ్చు. కానీ గణన చేయడానికి మనం క్లాసికల్ ``NumPyMinimumEigensolver``ని కూడా ఉపయోగించవచ్చు, ఇది క్రూరమైన శక్తితో పనులు చేయకుండా సూచనగా ఉపయోగపడుతుంది."

#: ../../tutorials/algorithms/05_qaoa.ipynb:375
msgid "It is also possible to use VQE as is shown below"
msgstr "దిగువ చూపిన విధంగా VQEని ఉపయోగించడం కూడా సాధ్యమే"

