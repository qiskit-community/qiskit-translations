msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-16 14:17+0000\n"
"PO-Revision-Date: 2023-09-08 10:28\n"
"Last-Translator: \n"
"Language: te\n"
"Language-Team: Telugu\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: te\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/algorithms/11_VarQTE.po\n"
"X-Crowdin-File-ID: 10011\n"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:10
msgid "This page was generated from `tutorials/algorithms/11_VarQTE.ipynb`__."
msgstr "ఈ పేజీ `tutorials/algorithms/11_VarQTE.ipynb`__ నుండి రూపొందించబడింది."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:9
msgid "Variational Quantum Time Evolution"
msgstr "వేరియేషనల్ క్వాంటం టైమ్ ఎవల్యూషన్"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:11
msgid "This notebook demostrates how to use Qiskit’s implementation of the Variational Quantum Time Evolution (VarQTE) algorithm for computing the time evolving state under a given Hamiltonian. Specifically, it introduces variational quantum imaginary and real time evolution based on McLachlan's variational principle, and shows how this can be leveraged using the ``algorithms.time_evolvers.variational`` sub-module."
msgstr "ఇచ్చిన హామిల్టోనియన్ కింద సమయం అభివృద్ధి చెందుతున్న స్థితిని గణించడం కోసం వేరియేషనల్ క్వాంటం టైమ్ ఎవల్యూషన్ (VarQTE) అల్గోరిథం యొక్క Qiskit అమలును ఎలా ఉపయోగించాలో ఈ నోట్‌బుక్ వివరిస్తుంది. ప్రత్యేకంగా, ఇది మెక్‌లాక్లాన్ యొక్క వైవిధ్య సూత్రం ఆధారంగా వైవిధ్యమైన క్వాంటం ఇమాజినరీ మరియు రియల్ టైమ్ ఎవల్యూషన్‌ను పరిచయం చేస్తుంది మరియు ఇది ``algorithms.time_evolvers.variational`` ఉప-మాడ్యూల్‌ని ఉపయోగించి ఎలా పరపతి పొందవచ్చో చూపిస్తుంది."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:23
msgid "Introduction"
msgstr "పరిచయం"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:25
msgid "``VarQTE`` is a quantum algorithm that simulates the time evolving state under given Hamiltonian (`Yuan et al. Quantum 3, 191 <https://quantum-journal.org/papers/q-2019-10-07-191/>`__). For a quantum closed system's Hamiltonian :math:`H`, the time evolving :math:`\\rho` density matrix follows the equation below"
msgstr "``VarQTE`` అనేది హామిల్టోనియన్ (`యువాన్ మరియు ఇతరులు. క్వాంటం 3, 191 <https://quantum-journal.org/papers/q-2019-10-07-191/>`__) కింద సమయం అభివృద్ధి చెందుతున్న స్థితిని అనుకరించే క్వాంటం అల్గారిథమ్. క్వాంటం క్లోజ్డ్ సిస్టమ్ యొక్క హామిల్టోనియన్ :math:`H` కోసం, పరిణామం చెందుతున్న సమయం :math:`\\rho` సాంద్రత మాతృక క్రింది సమీకరణాన్ని అనుసరిస్తుంది"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:27
msgid "\\frac{d\\rho}{dt}=\\mathcal{L}\\left(\\rho\\right)\n\n"
msgstr "\\frac {d\\rho}{dt}= \\mathcal{L}\\left (\\rho\\right)\n\n"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:29
msgid "where :math:`\\mathcal{L}\\left(\\rho\\right)=-i[H,\\rho]` for real time dynamics and :math:`\\mathcal{L}\\left(\\rho\\right)=-[H,\\rho]` for imaginary time dynamics. The corresponding state :math:`\\psi[\\theta(t)]` is parameterized by time dependent :math:`\\theta(t)`. Using McLachlan variational principle, the algorithm updates the parameters by minimizing the distance between the right hand side and left hand side of the equation above. This is called the McLachlan's distance :math:`L` , and defined as"
msgstr "ఇక్కడ :math:`\\mathcal{L}\\left(\\rho\\right)=-i[H,\\rho]` రియల్ టైమ్ డైనమిక్స్ మరియు :math:`\\mathcal{L}\\left(\\rho\\right) =-[H,\\rho]` ఊహాత్మక సమయ డైనమిక్స్ కోసం. సంబంధిత స్థితి :math:`\\psi[\\theta(t)]` సమయం ఆధారితం :math:`\\theta(t)` ద్వారా పరామితి చేయబడింది. McLachlan వైవిధ్య సూత్రాన్ని ఉపయోగించి, అల్గోరిథం ఎగువ సమీకరణం యొక్క కుడి వైపు మరియు ఎడమ వైపు మధ్య దూరాన్ని తగ్గించడం ద్వారా పారామితులను నవీకరిస్తుంది. దీనిని మెక్‌లాచ్‌లాన్ దూరం అని పిలుస్తారు :math:`L` , మరియు నిర్వచించబడింది"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:31
msgid "L\\equiv\\left\\Vert \\sum_{i}\\frac{\\partial\\rho\\left[\\theta\\right]}{\\partial\\theta_{i}}\\dot{\\theta}_{i}-\\mathcal{L}\\left(\\rho\\right)\\right\\Vert _{F}\n\n"
msgstr "L\\equiv\\left\\Vert \\sum_{i}\\frac{\\partial\\rho\\left[\\theta\\right]}{\\partial\\theta_{i}}\\dot{\\theta}_{i}-\\mathcal{L}\\left(\\rho\\right)\\right\\Vert _{F}\n\n"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:33
msgid "where :math:`\\left\\Vert M\\right\\Vert _{F}=\\sqrt{M^{\\dagger}M}` is the Frobenius norm of the matrix :math:`M`. The equivalent way is to minimize the squared distance"
msgstr "ఇక్కడ :math:`\\left\\Vert M\\right\\Vert _{F}=\\sqrt{M^{\\dagger}M}` అనేది మాతృక యొక్క ఫ్రోబెనియస్ ప్రమాణం :math:`M`. సమానమైన మార్గం స్క్వేర్డ్ దూరాన్ని తగ్గించడం"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:35
msgid "\\left\\Vert \\sum_{i}\\frac{\\partial\\rho\\left[\\theta\\right]}{\\partial\\theta_{i}}\\dot{\\theta}_{i}-\\mathcal{L}\\left(\\rho\\right)\\right\\Vert _{F}^{2}=\\sum_{i,j}F_{ij}\\dot{\\theta}_{i}\\dot{\\theta}_{j}-2\\sum_{i}V_{i}\\dot{\\theta}_{i}+\\text{Tr}\\left[\\mathcal{L}^{2}\\left(\\rho\\right)\\right]\n\n"
msgstr "\\left\\Vert \\sum_{i}\\frac{\\partial\\rho\\left[\\theta\\right]}{\\partial\\theta_{i}}\\dot{\\theta}_{i}-\\mathcal{L}\\left(\\rho\\right)\\right\\Vert _{F}^{2}=\\sum_{i,j}F_{ij}\\dot{\\theta}_{i}\\dot{\\theta}_{j}-2\\sum_{i}V_{i}\\dot{\\theta}_{i}+\\text{Tr}\\left[\\mathcal{L}^{2}\\left(\\rho\\right)\\right]\n\n"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:37
msgid "where"
msgstr "ఎక్కడ"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:39
msgid "F_{ij}=2\\text{Re}\\left[\\frac{\\partial\\left\\langle \\psi\\left[\\theta\\right]\\right|}{\\partial\\theta_{i}}\\frac{\\partial\\left|\\psi\\left[\\theta\\right]\\right\\rangle }{\\partial\\theta_{j}}+\\frac{\\partial\\left\\langle \\psi\\left[\\theta\\right]\\right|}{\\partial\\theta_{i}}\\left|\\psi\\left[\\theta\\right]\\right\\rangle \\left\\langle \\psi\\left[\\theta\\right]\\right|\\frac{\\partial\\left|\\psi\\left[\\theta\\right]\\right\\rangle }{\\partial\\theta_{j}}\\right]\n\n"
msgstr "F_{ij}=2\\text{Re}\\left[\\frac{\\partial\\left\\langle \\psi\\left[\\theta\\right]\\right|}{\\partial\\theta_{i}}\\frac{\\partial\\left|\\psi\\left[\\theta\\right]\\right\\rangle }{\\partial\\theta_{j}}+\\frac{\\partial\\left\\langle \\psi\\left[\\theta\\right]\\right|}{\\partial\\theta_{i}}\\left|\\psi\\left[\\theta\\right]\\right\\rangle \\left\\langle \\psi\\left[\\theta\\right]\\right|\\frac{\\partial\\left|\\psi\\left[\\theta\\right]\\right\\rangle }{\\partial\\theta_{j}}\\right]\n\n"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:41
msgid ","
msgstr ","

#: ../../tutorials/algorithms/11_VarQTE.ipynb:43
msgid "and"
msgstr "మరియు"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:45
msgid "V_{i}=\\begin{cases}\n"
"2\\text{Im}\\left[\\frac{\\partial\\left\\langle \\psi\\left[\\theta\\right]\\right|}{\\partial\\theta_{i}}H\\left|\\psi\\left[\\theta\\right]\\right\\rangle +\\left\\langle \\psi\\left[\\theta\\right]\\right|\\frac{\\partial\\left|\\psi\\left[\\theta\\right]\\right\\rangle }{\\partial\\theta_{i}}\\left\\langle H\\right\\rangle _{\\theta}\\right] & \\text{Real time}\\\\\n"
"2\\text{Re}\\left[\\frac{\\partial\\left\\langle \\psi\\left[\\theta\\right]\\right|}{\\partial\\theta_{i}}H\\left|\\psi\\left[\\theta\\right]\\right\\rangle \\right] & \\text{Imaginary time}\n"
"\\end{cases}"
msgstr "V_{i}=\\begin{cases}\n"
"2\\text{Im}\\left[\\frac{\\partial\\left\\langle \\psi\\left[\\theta\\right]\\right|}{\\partial\\theta_{i}}H\\left|\\psi\\left[\\theta\\right]\\right\\rangle +\\left\\langle \\psi\\left[\\theta\\right]\\right|\\frac{\\partial\\left|\\psi\\left[\\theta\\right]\\right\\rangle }{\\partial\\theta_{i}}\\left\\langle H\\right\\rangle _{\\theta}\\right] & \\text{Real time}\\\\\n"
"2\\text{Re}\\left[\\frac{\\partial\\left\\langle \\psi\\left[\\theta\\right]\\right|}{\\partial\\theta_{i}}H\\left|\\psi\\left[\\theta\\right]\\right\\rangle \\right] & \\text{Imaginary time}\n"
"\\end{cases}"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:52
msgid "."
msgstr "."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:54
msgid "Minimizing :math:`L^2` with respect to :math:`\\dot{\\theta}` can lead to the equation of motion for :math:`\\theta`"
msgstr ":math:`\\dot{\\theta}`కి సంబంధించి :math:`L^2`ని కనిష్టీకరించడం :math:`\\theta` కోసం చలన సమీకరణానికి దారితీయవచ్చు"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:56
msgid "\\sum_{ij}F_{ij}\\dot{\\theta}_{i}=V_{j}\n\n"
msgstr "\\sum_{ij}F_{ij}\\dot{\\theta}_{i}=V_{j}\n\n"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:58
msgid "Solving this equation is equivalent to minimizing :math:`L^2`, a variational approach that is more stable in simulation (`Yuan et al. Quantum 3, 191 <https://quantum-journal.org/papers/q-2019-10-07-191/>`__). :math:`F_{i,j}` and :math:`V_{j}` can be calculated using a quantum circuit (more details in `Zoufal et al. <https://arxiv.org/abs/2108.00022>`__ and `Yao et al. <https://journals.aps.org/prxquantum/abstract/10.1103/PRXQuantum.2.030307>`__), and the classical computer can minimize :math:`L^2` to get the variational parameters for the next time step. In this tutorial, we focus on how to use Qiskit's implementation of the ``VarQTE`` algorithm."
msgstr "ఈ సమీకరణాన్ని పరిష్కరించడం అనేది కనిష్టీకరించడానికి సమానం :math:`L^2`, అనుకరణలో మరింత స్థిరంగా ఉండే వైవిధ్య విధానం (`యువాన్ మరియు ఇతరులు. క్వాంటం 3, 191 <https://quantum-journal.org/papers/q- 2019-10-07-191/>`__). :math:`F_{i,j}` మరియు :math:`V_{j}`ని క్వాంటం సర్క్యూట్ ఉపయోగించి లెక్కించవచ్చు (మరిన్ని వివరాలు `Zoufal et al. <https://arxiv.org/abs/2108.00022> `__ మరియు `యావో et al. <https://journals.aps.org/prxquantum/abstract/10.1103/PRXQuantum.2.030307>`__), మరియు క్లాసికల్ కంప్యూటర్ :math:`L^2`ని కనిష్టీకరించవచ్చు తదుపరి దశ దశ కోసం వైవిధ్య పారామితులు. ఈ ట్యుటోరియల్‌లో, ``VarQTE`` అల్గోరిథం యొక్క Qiskit అమలును ఎలా ఉపయోగించాలనే దానిపై మేము దృష్టి పెడతాము."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:71
msgid "Running VarQTE"
msgstr "VarQTE అమలవుతోంది"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:82
msgid "In this tutorial, we will use two Qiskit classes that extend ``VarQTE``, ``VarQITE`` (`Variational Quantum Imaginary Time Evolution <https://qiskit.org/documentation/stubs/qiskit.algorithms.VarQITE.html#qiskit.algorithms.VarQITE>`__) and ``VarQRTE`` (`Variational Quantum Real Time Evolution <https://qiskit.org/documentation/stubs/qiskit.algorithms.VarQRTE.html#qiskit.algorithms.VarQRTE>`__) for time evolution. We can use a simple Ising model on a spin chain to illustrate this. Let us consider the following Hamiltonian:"
msgstr "ఈ ట్యుటోరియల్‌లో, మేము ``VarQTE``, ``VarQITE`` (`వేరియేషనల్ క్వాంటం ఇమాజినరీ టైమ్ ఎవల్యూషన్ <https://qiskit.org/documentation/stubs/qiskit.algorithms.VarQITE.html విస్తరించే రెండు Qiskit తరగతులను ఉపయోగిస్తాము #qiskit.algorithms.VarQITE>`__) మరియు ``VarQRTE`` (`వేరియేషనల్ క్వాంటం రియల్ టైమ్ ఎవల్యూషన్ <https://qiskit.org/documentation/stubs/qiskit.algorithms.VarQRTE.html#qiskit.algorithm>VarQRTE. `__) కాల పరిణామం కోసం. దీన్ని వివరించడానికి మనం స్పిన్ చైన్‌పై సరళమైన ఐసింగ్ మోడల్‌ని ఉపయోగించవచ్చు. కింది హామిల్టోనియన్‌ను పరిశీలిద్దాం:"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:85
msgid "H = -J\\sum_{i=0}^{L-2}Z_{i}Z_{i+1} - h\\sum_{i=0}^{L-1}X_i\n\n"
msgstr "H = -J\\sum_{i=0}^{L-2}Z_{i}Z_{i+1} - h\\sum_{i=0}^{L-1}X_i\n\n"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:87
msgid "where :math:`J` stands for the interaction energy, and :math:`h` represents an external field which is orthogonal to the transverse direction. :math:`Z_i` and :math:`X_i` are the Pauli operators on the spins. Taking :math:`L=2`, :math:`J=0.2`, and :math:`h =1`, the Hamiltonian and the magnetization :math:`\\sum_i Z_i` can be constructed using ``SparsePauliOp`` as follows:"
msgstr "ఇక్కడ :math:`J` అనేది పరస్పర శక్తిని సూచిస్తుంది మరియు :math:`h` అనేది విలోమ దిశకు ఆర్తోగోనల్‌గా ఉండే బాహ్య క్షేత్రాన్ని సూచిస్తుంది. :math:`Z_i` మరియు :math:`X_i` స్పిన్‌లపై పౌలీ ఆపరేటర్లు. :math:`L=2`, :math:`J=0.2`, మరియు :math:`h =1` తీసుకొని, హామిల్టోనియన్ మరియు మాగ్నెటైజేషన్ :math:`\\sum_i Z_i`ని ``SparsePauliOp` ఉపయోగించి నిర్మించవచ్చు `ఈ క్రింది విధంగా:"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:114
msgid "Imaginary Time Evolution"
msgstr "ఇమేజరీ టైమ్ ఎవల్యూషన్"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:116
msgid "Imaginary time evolution can be used, for example, to find the ground state or calculate the finite temperature expectation value of the system. Here, we will use the ``VarQITE`` class from ``algorithms.time_evolvers.variational`` to compute a ground state energy. Firstly, we need to choose an ansatz. We can use ``EfficientSU2`` to easily construct an ansatz, setting the number of repetitions using ``reps``."
msgstr "ఊహాత్మక సమయ పరిణామాన్ని ఉపయోగించవచ్చు, ఉదాహరణకు, భూమి స్థితిని కనుగొనడానికి లేదా సిస్టమ్ యొక్క పరిమిత ఉష్ణోగ్రత అంచనా విలువను లెక్కించడానికి. ఇక్కడ, మేము భూమి స్థితి శక్తిని గణించడానికి ``algorithms.time_evolvers.variational`` నుండి ``VarQITE`` తరగతిని ఉపయోగిస్తాము. ముందుగా, మనం ansatzని ఎంచుకోవాలి. మేము ఒక ansatzని సులభంగా నిర్మించడానికి ``EfficientSU2``ని ఉపయోగించవచ్చు, ``reps``ని ఉపయోగించి పునరావృతాల సంఖ్యను సెట్ చేయవచ్చు."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:149
msgid "Here, we prepare a dictionary to store the initial parameters we set up, which determine the initial state."
msgstr "ఇక్కడ, మేము సెటప్ చేసిన ప్రారంభ పారామితులను నిల్వ చేయడానికి నిఘంటువును సిద్ధం చేస్తాము, ఇది ప్రారంభ స్థితిని నిర్ణయిస్తుంది."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:174
msgid "Note that the initial state should be in overlap with the ground state."
msgstr "ప్రారంభ స్థితి భూమి స్థితితో అతివ్యాప్తిలో ఉండాలని గమనించండి."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:176
msgid "Next, we choose ``ImaginaryMcLachlanPrinciple`` as the variational principle we'll use later."
msgstr "తర్వాత, మేము తర్వాత ఉపయోగించే వైవిధ్య సూత్రంగా ``ImaginaryMcLachlanPrinciple``ని ఎంచుకుంటాము."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:199
msgid "We set a target imaginary time :math:`t=5`, and set the Hamiltonian as an auxiliary operator. We create a ``TimeEvolutionProblem`` instance with ``hamiltonian``, ``time``, and ``aux_operators`` as arguments."
msgstr "మేము లక్ష్యం ఊహాత్మక సమయాన్ని సెట్ చేసాము :math:`t=5`, మరియు హామిల్టోనియన్‌ను సహాయక ఆపరేటర్‌గా సెట్ చేసాము. మేము ఆర్గ్యుమెంట్‌లుగా ``హామిల్టోనియన్``, ``టైమ్`` మరియు ``ఆక్స్_ఆపరేటర్స్``తో ``TimeEvolutionProblem`` ఉదాహరణని సృష్టిస్తాము."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:224
msgid "We now use the ``VarQITE`` class to calculate the imaginary time evolving state. We can use ``VarQITE.evolve`` to get the results. Note this cell may take around :math:`1.5` minutes to finish."
msgstr "మేము ఇప్పుడు ఊహాత్మక సమయం అభివృద్ధి చెందుతున్న స్థితిని లెక్కించడానికి ``VarQITE`` తరగతిని ఉపయోగిస్తాము. ఫలితాలను పొందడానికి మనం ``VarQITE.evolve``ని ఉపయోగించవచ్చు. ఈ సెల్ పూర్తి కావడానికి దాదాపు :math:`1.5` నిమిషాలు పట్టవచ్చని గమనించండి."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:251
msgid "Exact Classical Solution"
msgstr "ఖచ్చితమైన క్లాసికల్ సొల్యూషన్"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:253
msgid "In order to check whether our calculation using ``VarQITE`` is correct or not, we also call ``SciPyImaginaryEvolver`` to help us calculate the exact solution."
msgstr "``VarQITE``ని ఉపయోగించి మా గణన సరైనదా కాదా అని తనిఖీ చేయడానికి, ఖచ్చితమైన పరిష్కారాన్ని లెక్కించడంలో మాకు సహాయపడటానికి మేము ``SciPyImaginaryEvolver`` అని కూడా పిలుస్తాము."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:255
msgid "Firstly, we can use ``qiskit.quantum_info.Statevector`` to help us get the statevector from the quantum circuit."
msgstr "ముందుగా, క్వాంటం సర్క్యూట్ నుండి స్టేట్‌వెక్టర్‌ను పొందడంలో మాకు సహాయపడటానికి మనం ``qiskit.quantum_info.Statevector``ని ఉపయోగించవచ్చు."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:278
msgid "Then we can set up the evolving problem using ``SciPyImaginaryEvolver``. Here we set number of time steps as :math:`501`."
msgstr "అప్పుడు మనం ``SciPyImaginaryEvolver``ని ఉపయోగించి అభివృద్ధి చెందుతున్న సమస్యను సెటప్ చేయవచ్చు. ఇక్కడ మేము సమయ దశల సంఖ్యను :math:`501`గా సెట్ చేస్తాము."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:303
msgid "Results and Comparison"
msgstr "ఫలితాలు మరియు పోలిక"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:305
msgid "We use ``evolution_result.observables`` to get the variation over time of the expectation values of the Hamiltonian."
msgstr "హామిల్టోనియన్ యొక్క అంచనా విలువల కాలానుగుణంగా వైవిధ్యాన్ని పొందడానికి మేము ``evolution_result.observables``ని ఉపయోగిస్తాము."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:379
msgid "As the above figure indicates, we have obtained the converged ground state energy."
msgstr "పై బొమ్మ సూచించినట్లుగా, మేము కన్వర్జ్డ్ గ్రౌండ్ స్టేట్ ఎనర్జీని పొందాము."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:391
msgid "Efficient classical calculation of gradients with VarQITE"
msgstr "VarQITEతో ప్రవణతల యొక్క సమర్థవంతమైన శాస్త్రీయ గణన"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:393
msgid "You can use classically efficient gradient calculations to speed up the time evolution simulation by setting ``qgt`` to ``ReverseQGT()`` and ``gradient`` to ``ReverseEstimatorGradient()``."
msgstr "మీరు ``qgt``ని ``ReverseQGT()``కి మరియు ``గ్రేడియంట్``ని ``ReverseEstimatorGradient()``కి సెట్ చేయడం ద్వారా సమయ పరిణామ అనుకరణను వేగవంతం చేయడానికి శాస్త్రీయంగా సమర్థవంతమైన ప్రవణత గణనలను ఉపయోగించవచ్చు."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:419
msgid "In this example, it takes only :math:`1` minute to calculate imaginary time evolution. The execution time is reduced by about 33% (this may vary for each execution, but generally results in a speedup)."
msgstr "ఈ ఉదాహరణలో, ఊహాత్మక సమయ పరిణామాన్ని లెక్కించడానికి కేవలం :math:`1` నిమిషం పడుతుంది. అమలు సమయం దాదాపు 33% తగ్గింది (ఇది ప్రతి అమలుకు మారవచ్చు, కానీ సాధారణంగా వేగం పెరుగుతుంది)."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:457
msgid "We can also get a converged result, which is consistent with the previous one."
msgstr "మేము ఒక కన్వర్జ్డ్ ఫలితాన్ని కూడా పొందవచ్చు, ఇది మునుపటి దానికి అనుగుణంగా ఉంటుంది."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:502
msgid "Let us compare the performance of different methods. The error is defined as the difference between the results and exact solution for each method."
msgstr "వివిధ పద్ధతుల పనితీరును పోల్చి చూద్దాం. ప్రతి పద్ధతికి ఫలితాలు మరియు ఖచ్చితమైన పరిష్కారం మధ్య వ్యత్యాసంగా లోపం నిర్వచించబడింది."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:535
msgid "In this task, the accuracies of ``VarQITE`` with both gradient methods are very close, but ``ReverseEstimatorGradient()`` takes a considerably shorter time to run."
msgstr "ఈ టాస్క్‌లో, రెండు గ్రేడియంట్ పద్ధతులతో ``VarQITE` యొక్క ఖచ్చితత్వాలు చాలా దగ్గరగా ఉంటాయి, కానీ ``ReverseEstimatorGradient()`` అమలు చేయడానికి చాలా తక్కువ సమయం పడుతుంది."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:537
msgid "We can do the same comparison for ``VarQRTE`` for simulating the magnetization of the Ising model."
msgstr "ఐసింగ్ మోడల్ యొక్క అయస్కాంతీకరణను అనుకరించడం కోసం మనం ``VarQRTE`` కోసం అదే పోలికను చేయవచ్చు."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:549
msgid "Real Time Evolution"
msgstr "రియల్ టైమ్ ఎవల్యూషన్"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:551
msgid "Real time evolution is more suitable for tasks such as simulating quantum dynamics. For example, one can use ``VarQRTE`` to get time evolving expectation values of the magnetization."
msgstr "క్వాంటం డైనమిక్స్‌ను అనుకరించడం వంటి పనులకు రియల్ టైం ఎవల్యూషన్ మరింత అనుకూలంగా ఉంటుంది."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:563
msgid "VarQRTE"
msgstr "VarQRTE"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:565
msgid "Again, the first step is to select an ansatz."
msgstr "మళ్ళీ, మొదటి దశ అన్సట్జ్ని ఎంచుకోవడం."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:596
msgid "We set all initial parameters as :math:`\\frac{\\pi}{2}`."
msgstr "మనం అన్ని ప్రారంభ పారామితులను :math:`\\frac{\\pi}{2}`గా సెట్ చేసాము."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:620
msgid "We also define an initial state:"
msgstr "మనం ప్రారంభ స్థితిని కూడా నిర్వచించాము:"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:678
msgid "In order to use the real time McLachlan principle, we instantiate the ``RealMcLachlanPrinciple`` class."
msgstr "రియల్ టైమ్ మెక్‌లాచ్లాన్ సూత్రాన్ని ఉపయోగించడానికి, మేము ``RealMcLachlanPrinciple`` తరగతిని ఇన్‌స్టాంటియేట్ చేస్తాము."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:701
msgid "We also set the target time as :math:`t=10`, and set the auxiliary operator to be the magnetization operator. The following steps are similar to ``VarQITE``."
msgstr "మేము లక్ష్య సమయాన్ని కూడా :math:`t=10`గా సెట్ చేసాము మరియు సహాయక ఆపరేటర్‌ను మాగ్నెటైజేషన్ ఆపరేటర్‌గా సెట్ చేసాము. కింది దశలు ``VarQITE``ని పోలి ఉంటాయి."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:737
msgid "We can also obtain the exact solution with ``SciPyRealEvolver``. We first create the corresponding initial state for the exact classical method."
msgstr "మనం ``SciPyRealEvolver``తో కూడా ఖచ్చితమైన పరిష్కారాన్ని పొందవచ్చు. మేము మొదట ఖచ్చితమైన క్లాసికల్ పద్ధతి కోసం సంబంధిత ప్రారంభ స్థితిని సృష్టిస్తాము."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:758
msgid "``SciPyRealEvolver`` can help us get the classical exact result."
msgstr "``SciPyRealEvolver`` శాస్త్రీయ ఖచ్చితమైన ఫలితాన్ని పొందడానికి మాకు సహాయపడుతుంది."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:783
msgid "We can compare the results, where :math:`m_z` represents the magnetization."
msgstr "మేము ఫలితాలను పోల్చవచ్చు, ఇక్కడ :math:`m_z` అయస్కాంతీకరణను సూచిస్తుంది."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:820
msgid "Efficient Way to run VarQRTE"
msgstr "VarQRTEని అమలు చేయడానికి సమర్థవంతమైన మార్గం"

#: ../../tutorials/algorithms/11_VarQTE.ipynb:822
msgid "Similarly, we can set ``qpt`` as ``ReverseQGT()`` and ``gradient`` as ``ReverseEstimatorGradient()`` to speed up the calculation."
msgstr "అదేవిధంగా, గణనను వేగవంతం చేయడానికి మనం ``qpt``ని ``ReverseQGT()`` మరియు ``గ్రేడియంట్``ని ``ReverseEstimatorGradient()``గా సెట్ చేయవచ్చు."

#: ../../tutorials/algorithms/11_VarQTE.ipynb:870
msgid "Again, the accuracies of ``VarQRTE`` with both gradient methods are very similar, while the ``ReverseEstimatorGradient()`` shows a speedup of about :math:`21\\%` in this execution."
msgstr "మళ్లీ, రెండు గ్రేడియంట్ పద్ధతులతో ``VarQRTE` యొక్క ఖచ్చితత్వాలు చాలా పోలి ఉంటాయి, అయితే ``ReverseEstimatorGradient()`` ఈ ఎగ్జిక్యూషన్‌లో దాదాపు :math:`21\\%` వేగం చూపుతుంది."

