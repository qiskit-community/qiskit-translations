msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-26 21:24+0000\n"
"PO-Revision-Date: 2023-09-08 10:28\n"
"Last-Translator: \n"
"Language: te\n"
"Language-Team: Telugu\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: te\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/algorithms/12_gradients_framework.po\n"
"X-Crowdin-File-ID: 10013\n"

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:10
msgid "This page was generated from `tutorials/algorithms/12_gradients_framework.ipynb`__."
msgstr "ఈ పేజీ `tutorials/algorithms/12_gradients_framework.ipynb`__నుండి రూపొందించబడింది."

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:9
msgid "Qiskit Gradient Framework using Primitives"
msgstr "ప్రిమిటివ్‌లను ఉపయోగించి క్విస్కిట్ గ్రేడియంట్ ఫ్రేమ్‌వర్క్"

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:11
msgid "This tutorial demonstrates the use of the ``qiskit.algorithms.gradients`` module to evaluate quantum gradients using the `Qiskit Primitives <https://qiskit.org/documentation/apidoc/primitives.html>`__."
msgstr "ఈ ట్యుటోరియల్ `Qiskit Primitives <https://qiskit.org/documentation/apidoc/primitives.html>`__ని ఉపయోగించి క్వాంటం గ్రేడియంట్‌లను మూల్యాంకనం చేయడానికి ``qiskit.algorithms.gradients`` మాడ్యూల్ యొక్క ఉపయోగాన్ని ప్రదర్శిస్తుంది."

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:14
msgid "Introduction"
msgstr "పరిచయం"

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:16
msgid "The gradient frameworks allows the evaluation of quantum gradients (see `Schuld et al. <https://journals.aps.org/pra/abstract/10.1103/PhysRevA.99.032331>`__ and `Mari et al. <https://journals.aps.org/pra/abstract/10.1103/PhysRevA.103.012405>`__). Besides gradients of expectation values of the form"
msgstr "గ్రేడియంట్ ఫ్రేమ్‌వర్క్‌లు క్వాంటం గ్రేడియంట్ల మూల్యాంకనాన్ని అనుమతిస్తుంది (`Schuld et al. <https://journals.aps.org/pra/abstract/10.1103/PhysRevA.99.032331>`__ మరియు `Mari et al. <https:// journals.aps.org/pra/abstract/10.1103/PhysRevA.103.012405>`__). ఫారమ్ యొక్క అంచనా విలువల ప్రవణతలతో పాటు"

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:18
msgid "\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle\n\n"
msgstr "\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle\n\n"

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:20
msgid "and sampling probabilities of the form"
msgstr "మరియు రూపం యొక్క నమూనా సంభావ్యత"

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:22
msgid "p_j(\\theta) = |\\langle j | \\psi(\\theta)\\rangle|^2\n\n"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:24
msgid "the gradient frameworks also support the evaluation of the `Quantum Geometric Tensor <https://quantum-journal.org/papers/q-2020-05-25-269/>`__ (QGT) and `Quantum Fisher Information <https://quantum-journal.org/papers/q-2021-09-09-539/>`__ (QFI) of quantum states :math:`|\\psi\\left(\\theta\\right)\\rangle`."
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:36
msgid "A quick refresher on Qiskit Primitives"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:38
msgid "The Qiskit Primitives work as an abstraction level between algorithms and (real/simulated) quantum devices. Instead of having to manually deal with tasks such as parameter binding or circuit transpilation, the ``primitives`` module offers a ``Sampler`` and an ``Estimator`` class that take the circuits, the observable Hamiltonians, and the circuit parameters and return the sampling distribution and the computed expectation values respectively."
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:40
msgid "``qiskit.primitives`` provides two classes for evaluating the circuit: - The ``Estimator`` class allows to evaluate expectation values of observables with respect to states prepared by quantum circuits. - The ``Sampler`` class returns quasi-probability distributions as a result of sampling quantum circuits."
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:52
msgid "The ``algorithms.gradients`` Framework"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:54
msgid "The ``algorithms.gradients`` module contains tools to compute both circuit gradients and circuit metrics. The gradients extend the ``BaseEstimatorGradient`` and ``BaseSamplerGradient`` base classes. These are abstract classes on top of which different gradient methods have been implemented. The methods currently available in this module are: - Parameter Shift Gradients - Finite Difference Gradients - Linear Combination of Unitaries Gradients - Simultaneous Perturbation Stochastic Approximation (SPSA) Gradients"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:57
msgid "Additionally, the module offers reverse gradients for efficient classical computations."
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:59
msgid "The metrics available are based on the notion of the Quantum Geometric Tensor (QGT). There is a ``BaseQGT`` class (``Estimator``-based) on top of which different QGT methods have been implemented: - Linear Comination of Unitaries QGT - Reverse QGT (classical) As well as a Quantum Fisher Information class (QFI) that is initialized with a reference QGT implementation from the above list."
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:70
msgid "|gradients_qiskit_algorithms.png|"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:72
msgid "gradients_qiskit_algorithms.png"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:87
msgid "The outline of the qiskit.algorithms.gradients framework"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:103
msgid "Gradients"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:105
msgid "Given a parameterized quantum state :math:`|\\psi\\left(\\theta\\right)\\rangle = V\\left(\\theta\\right)|\\psi\\rangle` with input state :math:`|\\psi\\rangle`, , we want to compute either its expectation gradient :math:`\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle` or the gradient of the sampling probability :math:`p_j(\\theta) = |\\langle j | \\psi(\\theta)\\rangle|^2`"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:108
msgid "Sampling gradients"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:110
msgid "The formula for the gradient of sampling is:"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:112
msgid "\\frac{\\partial}{\\partial \\theta} p_j(\\theta) = \\frac{\\partial}{\\partial \\theta} |\\langle j | \\psi(\\theta)\\rangle|^2\n\n"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:114
msgid "Thus, the output of the sampler gradient is a list of dictionaries, where each dictionary has entries for different values of :math:`j` in the formula above:"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:121
msgid "Expectation gradients"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:123
msgid "The formula for expectation gradient is:"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:125
msgid "\\frac{\\partial}{\\partial \\theta} \\langle E \\rangle = \\frac{\\partial}{\\partial \\theta} \\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle\n\n"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:127
msgid "Thus, the output format of the estimator gradient is a list of derivatives:"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:143
msgid "Gradient Evaluation of Quantum Circuits"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:145
msgid "Let's say that we want to use one of our ``Estimator`` gradients classes, then we need a quantum state :math:`\\vert\\psi(\\theta)\\rangle` and a Hamiltonian H acting as an observable. For the Sampler gradients, we just need a quantum state."
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:156
msgid "We then construct a list of the parameters for which we aim to evaluate the gradient."
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:204
msgid "We can now choose a gradient type to evaluate the gradient of the circuit ansatz."
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:216
msgid "Parameter Shift Gradients"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:219
msgid "Using Estimator"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:221
msgid "Given a Hermitian operator :math:`g` with two unique eigenvalues :math:`\\pm r` which acts as generator for a parameterized quantum gate"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:223
msgid "G(\\theta)= e^{-i\\theta g}.\n\n"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:225
msgid "Then, quantum gradients can be computed by using eigenvalue :math:`r` dependent shifts to parameters. All `standard, parameterized Qiskit gates <https://github.com/Qiskit/qiskit-terra/tree/master/qiskit/circuit/library/standard_gates>`__ can be shifted with :math:`\\pi/2`, i.e.,"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:227
msgid "\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta} =\n"
"\\frac{\\langle\\psi\\left(\\theta+\\pi/2\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta+\\pi/2\\right)\\rangle -\\langle\\psi\\left(\\theta-\\pi/2\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta-\\pi/2\\right)\\rangle }{ 2}."
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:287
msgid "Using Sampler"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:289
msgid "Following a similar logic to the estimator gradient, when we have a quantum state prepared by a quantum circuit, we can shift the parametrized gates by :math:`\\pm \\pi/2` and sample to compute the gradient of the sampling probability."
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:371
msgid "**Note:** All the following methods in this tutorial are explained using the ``Estimator`` class to evaluate the gradients, but, in an analogous way to the Parameter Shift gradients just introduced, the method explanation can also be applied to ``Sampler``-based gradients. Both versions are available in ``algorithms.gradients``."
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:383
msgid "Linear Combination of Unitaries Gradients"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:385
msgid "Unitaries can be written as :math:`U\\left(\\omega\\right) = e^{iM\\left(\\omega\\right)}`, where :math:`M\\left(\\omega\\right)` denotes a parameterized Hermitian matrix. Further, Hermitian matrices can be decomposed into weighted sums of Pauli terms, i.e., :math:`M\\left(\\omega\\right) = \\sum_pm_p\\left(\\omega\\right)h_p` with :math:`m_p\\left(\\omega\\right)\\in\\mathbb{R}` and :math:`h_p=\\bigotimes\\limits_{j=0}^{n-1}\\sigma_{j, p}` for :math:`\\sigma_{j, p}\\in\\left\\{I, X, Y, Z\\right\\}` acting on the :math:`j^{\\text{th}}` qubit. Thus, the gradients of :math:`U_k\\left(\\omega_k\\right)` are given by"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:388
msgid "\\frac{\\partial U_k\\left(\\omega_k\\right)}{\\partial\\omega_k} = \\sum\\limits_pi \\frac{\\partial m_{k,p}\\left(\\omega_k\\right)}{\\partial\\omega_k}U_k\\left(\\omega_k\\right)h_{k_p}\n\n"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:390
msgid "Combining this observation with a circuit structure presented in `Simulating physical phenomena by quantum networks <https://journals.aps.org/pra/abstract/10.1103/PhysRevA.65.042323>`__ allows us to compute the gradient with the evaluation of a single quantum circuit."
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:443
msgid "Finite Difference Gradients"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:445
msgid "Unlike the other methods, finite difference gradients are numerical estimations rather than analytical values. This implementation employs a central difference approach with :math:`\\epsilon \\ll 1`"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:447
msgid "\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta} \\approx \\frac{1}{2\\epsilon} \\left(\\langle\\psi\\left(\\theta+\\epsilon\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta+\\epsilon\\right)\\rangle - \\partial\\langle\\psi\\left(\\theta-\\epsilon\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta-\\epsilon\\right)\\rangle\\right).\n\n"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:449
msgid "Probability gradients are computed equivalently."
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:501
msgid "SPSA Gradients"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:503
msgid "SPSA gradients compute the gradients of the expectation value by the `Simultaneous Perturbation Stochastic Approximation (SPSA) algorithm <https://ieeexplore.ieee.org/document/880982>`__. ``epsilon`` is the amount of offset, ``batch_size`` is the number of times the circuit is executed to estimate the gradient. As SPSA is a random process, use the ``seed`` value to avoid randomization."
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:555
msgid "Circuit Quantum Geometric Tensor (QGTs)"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:557
msgid "`Quantum Geometric Tensor <https://arxiv.org/abs/1012.1337>`__ is a metric in geometric quantum computing and can be regarded as a metric measuring the geodesic distance of points lying on the Bloch sphere. Its real and imaginary parts give different informations about the quantum state."
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:559
msgid "The entries of the QGT for a pure state is given by"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:561
msgid "QGT_{kl}(\\theta) = \\langle\\partial_k\\psi(\\theta)|\\partial_l\\psi(\\theta)\\rangle-\\langle\\partial_k\\psi(\\theta)|\\psi(\\theta)\\rangle\\langle\\psi(\\theta)|\\partial_l\\psi(\\theta)\\rangle.\n\n"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:564
msgid "Linear Combination QGT"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:566
msgid "This method employs a linear combination of unitaries, as explained in the **Gradients** section."
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:627
msgid "Quantum Fisher Information (QFI)"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:629
msgid "`Quantum Fisher Information <https://quantum-journal.org/papers/q-2020-05-25-269/>`__ is a metric tensor which is representative for the representation capacity of a parameterized quantum state :math:`|\\psi\\left(\\theta\\right)\\rangle = V\\left(\\theta\\right)|\\psi\\rangle` with input state :math:`|\\psi\\rangle`, parametrized Ansatz :math:`V\\left(\\theta\\right)`."
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:631
msgid "The QFI can thus be evaluated from QGT as"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:633
msgid "\\begin{align*}\n"
"QFI_{kl} &= 4 * \\text{Re}(QGT_{kl}) \\\\\n"
"         &=4 *\\text{Re}\\left[\\langle\\partial_k\\psi|\\partial_l\\psi\\rangle-\\langle\\partial_k\\psi|\\psi\\rangle\\langle\\psi|\\partial_l\\psi\\rangle \\right].\n"
"\\end{align*}"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:699
msgid "Application Example: VQE with gradient-based optimization"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:711
msgid "Estimator"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:722
msgid "Let's see an application of these gradient classes in a gradient-based optimization. We will use the Variational Quantum Eigensolver (VQE) algorith. First, the Hamiltonian and wavefunction ansatz are initialized."
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:789
msgid "The ``VQE`` will take an ``Estimator``, the ansatz and optimizer, and an optional gradient. We will use the ``LinCombEstimatorGradient`` gradient to compute the VQE."
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:850
msgid "Classical Optimizer"
msgstr ""

#: ../../tutorials/algorithms/12_gradients_framework.ipynb:861
msgid "We can also use a classical optimizer to optimize the VQE. We'll use the ``minimize`` function from SciPy."
msgstr ""

