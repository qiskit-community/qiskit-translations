msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:25+0000\n"
"PO-Revision-Date: 2023-05-31 12:47\n"
"Last-Translator: \n"
"Language: te\n"
"Language-Team: Telugu\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: te\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/07_pulse_scheduler.po\n"
"X-Crowdin-File-ID: 9478\n"

#: ../../tutorials/circuits_advanced/07_pulse_scheduler.ipynb:10
msgid "This page was generated from `tutorials/circuits_advanced/07_pulse_scheduler.ipynb`__."
msgstr ""

#: ../../tutorials/circuits_advanced/07_pulse_scheduler.ipynb:9
msgid "Using the Scheduler"
msgstr ""

#: ../../tutorials/circuits_advanced/07_pulse_scheduler.ipynb:11
msgid "The scheduler will translate a ``QuantumCircuit`` into a Pulse ``Schedule``, using gate and measurement *calibrations*: an optimized pulse-level description of an operation on particular qubits."
msgstr ""

#: ../../tutorials/circuits_advanced/07_pulse_scheduler.ipynb:13
msgid "Backends that are OpenPulse enabled will typically have calibrations defined for measurements and for each of its basis gates. Calibrations can also be defined or updated by the user."
msgstr ""

#: ../../tutorials/circuits_advanced/07_pulse_scheduler.ipynb:16
msgid "Basic usage"
msgstr ""

#: ../../tutorials/circuits_advanced/07_pulse_scheduler.ipynb:18
msgid "To start, build a quantum circuit as you would normally. For our example below, we create a simple Bell state."
msgstr ""

#: ../../tutorials/circuits_advanced/07_pulse_scheduler.ipynb:55
msgid "We'll use the mocked backend, ``FakeHanoi``, to demonstrate how to use the scheduler. It contains default calibrations for measurement and for its basis gates. The Hadamard operation is not one of those basis gates, so we use the transpiler to compile our input circuit to an equivalent circuit in terms of the basis gates of the device."
msgstr ""

#: ../../tutorials/circuits_advanced/07_pulse_scheduler.ipynb:82
msgid "Let's see how our schedule ``schedule`` built from the circuit ``transpiled_circ`` looks."
msgstr ""

#: ../../tutorials/circuits_advanced/07_pulse_scheduler.ipynb:112
msgid "That covers the basics! We used the transpiler to rewrite the circuit in terms of the basis gates, and then used the backend's default calibrations to schedule the transpiled circuit. Next we will go through scheduling with calibrations we will build ourselves."
msgstr ""

#: ../../tutorials/circuits_advanced/07_pulse_scheduler.ipynb:115
msgid "Scheduling with custom gate definitions"
msgstr ""

#: ../../tutorials/circuits_advanced/07_pulse_scheduler.ipynb:117
msgid "If your input circuit has calibrations defined, it will use those calibrations when scheduling your circuit."
msgstr ""

#: ../../tutorials/circuits_advanced/07_pulse_scheduler.ipynb:156
msgid "Notice that the initial pulse on ``D0``, the Hadamard gate, is now implemented with our custom pulse."
msgstr ""

#: ../../tutorials/circuits_advanced/07_pulse_scheduler.ipynb:159
msgid "Scheduler methods"
msgstr ""

#: ../../tutorials/circuits_advanced/07_pulse_scheduler.ipynb:161
msgid "The scheduler can follow multiple routines. By default, it follows an *as late as possible* (ALAP) rule. Another scheduling method is *as soon as possible*, (ASAP). For both methods, the output schedule is minimal: in the longest-duration operation path of the input circuit, the start time of each operation is the end time of the proceeding operation. The methods determine how to schedule operations outside that longest path."
msgstr ""

#: ../../tutorials/circuits_advanced/07_pulse_scheduler.ipynb:163
msgid "This is made clear through an example:"
msgstr ""

#: ../../tutorials/circuits_advanced/07_pulse_scheduler.ipynb:199
msgid "For our mocked backend, these :math:`X` gate operations are each the same duration (``duration = 160 dt``). For the schedule to be minimal, the two :math:`X` operations on qubit 0 will be scheduled back-to-back, and the measurement pulse will immediately follow the second of those pulses."
msgstr ""

#: ../../tutorials/circuits_advanced/07_pulse_scheduler.ipynb:201
msgid "ALAP will choose the latest valid time to schedule lesser-constrained operations, so the :math:`X` gate on qubit 1 will play in sync with the second :math:`X` gate on qubit 0."
msgstr ""

#: ../../tutorials/circuits_advanced/07_pulse_scheduler.ipynb:232
msgid "On the other hand, as the name suggests, ASAP will schedule operations as soon as its resources are free. Thus, the :math:`X` gate on qubit 1 will be scheduled at ``time=0``, in sync with the first :math:`X` gate on qubit 0."
msgstr ""

#: ../../tutorials/circuits_advanced/07_pulse_scheduler.ipynb:263
msgid "ALAP is the default because it allows qubits to remain idle as long as possible. In this case, the difference between ALAP and ASAP may be negligible, but in ALAP, qubit 0 has *no* time to decay from the excited state before measurement."
msgstr ""

