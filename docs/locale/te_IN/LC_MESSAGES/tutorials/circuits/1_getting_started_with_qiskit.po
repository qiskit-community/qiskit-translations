msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-03 12:57+0000\n"
"PO-Revision-Date: 2023-11-03 15:10\n"
"Last-Translator: \n"
"Language: te\n"
"Language-Team: Telugu\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: te\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/circuits/1_getting_started_with_qiskit.po\n"
"X-Crowdin-File-ID: 9114\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:10
msgid "This page was generated from `tutorials/circuits/1_getting_started_with_qiskit.ipynb`__."
msgstr "ఈ పేజీ `tutorials/circuits/1_getting_started_with_qiskit.ipynb`__ నుండి రూపొందించబడింది."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:9
msgid "Getting Started with Qiskit"
msgstr "క్విస్కిట్‌తో ప్రారంభించడం"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:11
msgid "Here, we provide an overview of working with Qiskit. The fundamental package of Qiskit is Terra that provides the basic building blocks necessary to program quantum computers. The fundamental unit of Qiskit is the `quantum circuit <https://en.wikipedia.org/wiki/Quantum_circuit>`__. A basic workflow using Qiskit consists of two stages: **Build** and **Execute**. **Build** allows you to make different quantum circuits that represent the problem you are solving, and **Execute** that allows you to run them on different backends. After the jobs have been run, the data is collected and postprocessed depending on the desired output."
msgstr "ఇక్కడ, మేము Qiskitతో పని చేసే అవలోకనాన్ని అందిస్తాము. Qiskit యొక్క ప్రాథమిక ప్యాకేజీ Terra, ఇది క్వాంటం కంప్యూటర్‌లను ప్రోగ్రామ్ చేయడానికి అవసరమైన ప్రాథమిక బిల్డింగ్ బ్లాక్‌లను అందిస్తుంది. Qiskit యొక్క ప్రాథమిక యూనిట్ `క్వాంటం సర్క్యూట్ <https://en.wikipedia.org/wiki/Quantum_circuit>`__. Qiskitని ఉపయోగించే ప్రాథమిక వర్క్‌ఫ్లో రెండు దశలను కలిగి ఉంటుంది: **బిల్డ్** మరియు **ఎగ్జిక్యూట్**. **బిల్డ్** మీరు పరిష్కరిస్తున్న సమస్యను సూచించే విభిన్న క్వాంటం సర్క్యూట్‌లను తయారు చేయడానికి మిమ్మల్ని అనుమతిస్తుంది మరియు **ఎగ్జిక్యూట్**ని వివిధ బ్యాకెండ్‌లలో అమలు చేయడానికి మిమ్మల్ని అనుమతిస్తుంది. జాబ్‌లు అమలు చేయబడిన తర్వాత, కావలసిన అవుట్‌పుట్‌పై ఆధారపడి డేటా సేకరించబడుతుంది మరియు పోస్ట్‌ప్రాసెస్ చేయబడుతుంది."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:36
msgid "Circuit Basics"
msgstr "సర్క్యూట్ బేసిక్స్"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:39
msgid "Building the circuit"
msgstr "సర్క్యూట్ నిర్మించడం"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:41
msgid "The basic element needed for your first program is the QuantumCircuit. We begin by creating a ``QuantumCircuit`` comprised of three qubits."
msgstr "మీ మొదటి ప్రోగ్రామ్‌కు అవసరమైన ప్రాథమిక మూలకం QuantumCircuit. మేము మూడు క్విట్‌లతో కూడిన ``QuantumCircuit``ని సృష్టించడం ద్వారా ప్రారంభిస్తాము."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:63
msgid "After you create the circuit with its registers, you can add gates (\"operations\") to manipulate the registers. As you proceed through the tutorials you will find more gates and circuits; below is an example of a quantum circuit that makes a three-qubit GHZ state"
msgstr "మీరు దాని రిజిస్టర్‌లతో సర్క్యూట్‌ను సృష్టించిన తర్వాత, రిజిస్టర్‌లను మార్చటానికి మీరు గేట్‌లను (\"ఆపరేషన్స్\") జోడించవచ్చు. మీరు ట్యుటోరియల్స్ ద్వారా కొనసాగినప్పుడు మీరు మరిన్ని గేట్లు మరియు సర్క్యూట్‌లను కనుగొంటారు; మూడు-క్విట్ GHZ స్థితిని చేసే క్వాంటం సర్క్యూట్ యొక్క ఉదాహరణ క్రింద ఉంది"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:65
msgid "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}.\n\n"
msgstr "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}.\n\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:67
msgid "To create such a state, we start with a three-qubit quantum register. By default, each qubit in the register is initialized to :math:`|0\\rangle`. To make the GHZ state, we apply the following gates: - A Hadamard gate :math:`H` on qubit :math:`q_{0}`, which puts it into the superposition state :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}`. - A controlled-Not operation (:math:`C_{X}`) between qubit :math:`q_{0}` and qubit :math:`q_{1}`. - A controlled-Not operation between qubit :math:`q_{0}` and qubit :math:`q_{2}`."
msgstr "అటువంటి స్థితిని సృష్టించడానికి, మేము మూడు-క్విట్ క్వాంటం రిజిస్టర్‌తో ప్రారంభిస్తాము. డిఫాల్ట్‌గా, రిజిస్టర్‌లోని ప్రతి క్విట్ :math:`|0\\rangle`కి ప్రారంభించబడుతుంది. GHZ స్థితిని చేయడానికి, మేము ఈ క్రింది గేట్‌లను వర్తింపజేస్తాము: - క్విట్:math:`q_{0}`పై హడమార్డ్ గేట్ :math:`H`, ఇది సూపర్‌పొజిషన్ స్థితి :math:`\\left(|0 \\rangle+|1\\rangle\\right)/\\sqrt{2}`. - qubit :math:`q_{0}` మరియు qubit :math:`q_{1}` మధ్య నియంత్రిత-కాని ఆపరేషన్ (:math:`C_{X}`). - qubit :math:`q_{0}` మరియు qubit :math:`q_{2}` మధ్య నియంత్రిత-కాని ఆపరేషన్."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:70
msgid "On an ideal quantum computer, the state produced by running this circuit would be the GHZ state above."
msgstr "ఆదర్శవంతమైన క్వాంటం కంప్యూటర్‌లో, ఈ సర్క్యూట్‌ని అమలు చేయడం ద్వారా ఉత్పత్తి చేయబడిన స్థితి పైన ఉన్న GHZ స్థితిగా ఉంటుంది."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:72
msgid "In Qiskit, operations can be added to the circuit one by one, as shown below."
msgstr "Qiskitలో, క్రింద చూపిన విధంగా కార్యకలాపాలు ఒక్కొక్కటిగా సర్క్యూట్‌కు జోడించబడతాయి."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:126
msgid "Visualize Circuit"
msgstr "సర్క్యూట్ దృశ్యమానం"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:128
msgid "You can visualize your circuit using Qiskit ``QuantumCircuit.draw()``, which plots the circuit in the form found in many textbooks."
msgstr "మీరు Qiskitని ఉపయోగించి మీ సర్క్యూట్‌ను దృశ్యమానం చేయవచ్చు ``QuantumCircuit.draw()``, ఇది అనేక పాఠ్యపుస్తకాలలో కనిపించే రూపంలో సర్క్యూట్‌ను ప్లాట్ చేస్తుంది."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:187
msgid "In this circuit, the qubits are put in order, with qubit :math:`q_{0}` at the top and qubit :math:`q_{2}` at the bottom. The circuit is read left to right (meaning that gates that are applied earlier in the circuit show up further to the left)."
msgstr "ఈ సర్క్యూట్‌లో, క్విట్‌లు ఎగువన qubit :math:`q_{0}` మరియు దిగువన qubit :math:`q_{2}`తో క్రమంలో ఉంచబడతాయి. సర్క్యూట్ ఎడమ నుండి కుడికి చదవబడుతుంది (అంటే సర్క్యూట్‌లో ముందుగా వర్తింపజేసిన గేట్‌లు మరింత ఎడమ వైపుకు చూపబడతాయి)."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:202
msgid "When representing the state of a multi-qubit system, the tensor order used in Qiskit is different than that used in most physics textbooks. Suppose there are :math:`n` qubits, and qubit :math:`j` is labeled as :math:`Q_{j}`. Qiskit uses an ordering in which the :math:`n^{\\mathrm{th}}` qubit is on the left side of the tensor product, so that the basis vectors are labeled as :math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0`."
msgstr "బహుళ-క్విట్ సిస్టమ్ యొక్క స్థితిని సూచించేటప్పుడు, క్విస్కిట్‌లో ఉపయోగించే టెన్సర్ క్రమం చాలా ఫిజిక్స్ పాఠ్యపుస్తకాలలో ఉపయోగించిన దానికంటే భిన్నంగా ఉంటుంది. ఉన్నాయి అనుకుందాం :math:`n` క్విట్‌లు మరియు క్విట్ :math:`j` గా లేబుల్ చేయబడింది :math:`Q_{j}`. క్విస్కిట్ ఆర్డరింగ్‌ని ఉపయోగిస్తుంది :math:`n^{\\mathrm{th}}` qubit టెన్సర్ ఉత్పత్తికి ఎడమ వైపున ఉంటుంది, తద్వారా ప్రాతిపదిక వెక్టర్‌లు ఇలా లేబుల్ చేయబడతాయి :math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0`."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:204
msgid "For example, if qubit :math:`Q_{0}` is in state 0, qubit :math:`Q_{1}` is in state 0, and qubit :math:`Q_{2}` is in state 1, Qiskit would represent this state as :math:`|100\\rangle`, whereas many physics textbooks would represent it as :math:`|001\\rangle`."
msgstr "ఉదాహరణకు, qubit :math:`Q_{0}` స్థితి 0లో ఉంటే, qubit :math:`Q_{1}` స్థితి 0లో మరియు qubit :math:`Q_{2}` స్థితి 1లో ఉంటే, Qiskit ఈ స్థితిని :math:`|100\\rangle`గా సూచిస్తుంది, అయితే అనేక భౌతిక శాస్త్ర పాఠ్యపుస్తకాలు దీనిని :math:`|001\\rangle`గా సూచిస్తాయి."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:206
msgid "This difference in labeling affects the way multi-qubit operations are represented as matrices. For example, Qiskit represents a controlled-X (:math:`C_{X}`) operation with qubit :math:`Q_{0}` being the control and qubit :math:`Q_{1}` being the target as"
msgstr "లేబులింగ్‌లోని ఈ వ్యత్యాసం బహుళ-క్విట్ ఆపరేషన్‌లను మాత్రికల వలె సూచించే విధానాన్ని ప్రభావితం చేస్తుంది. ఉదాహరణకు, Qiskit నియంత్రిత-Xని సూచిస్తుంది (:math:`C_{X}`) క్విట్‌తో ఆపరేషన్ :math:`Q_{0}` నియంత్రణ మరియు క్విట్ :math:`Q_{1}` వంటి లక్ష్యంగా ఉండటం"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:208
msgid "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}.\n\n"
msgstr "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\\\\end{pmatrix}.\n\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:224
msgid "Simulating circuits using Qiskit Aer"
msgstr "Qiskit Aer ఉపయోగించి సర్క్యూట్‌లను అనుకరించడం"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:226
msgid "Qiskit Aer is our package for simulating quantum circuits. It provides many different backends for doing a simulation. There is also a basic, Python only, implementation called ``BasicAer`` in Terra that can be used as a drop-in replacement for ``Aer`` in the examples below."
msgstr "Qiskit Aer అనేది క్వాంటం సర్క్యూట్‌లను అనుకరించే మా ప్యాకేజీ. ఇది అనుకరణ చేయడానికి అనేక విభిన్న బ్యాకెండ్‌లను అందిస్తుంది. దిగువ ఉదాహరణల్లో ``Aer``కి డ్రాప్-ఇన్ రీప్లేస్‌మెంట్‌గా ఉపయోగించబడుతుంది, టెర్రాలో ``BasicAer`` అనే ప్రాథమిక, పైథాన్ మాత్రమే అమలు చేయబడింది."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:229
msgid "Statevector backend"
msgstr "స్టేట్‌వెక్టర్ బ్యాకెండ్"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:231
msgid "The most common backend in Qiskit Aer is the ``statevector_simulator``. This simulator returns the quantum state, which is a complex vector of dimensions :math:`2^n`, where :math:`n` is the number of qubits (so be careful using this as it will quickly get too large to run on your machine)."
msgstr "Qiskit Aerలో అత్యంత సాధారణ బ్యాకెండ్ ది statevector_simulator. ఈ సిమ్యులేటర్ క్వాంటం స్థితిని అందిస్తుంది, ఇది పరిమాణాల సంక్లిష్ట వెక్టర్ :math:`2^n`, ఎక్కడ :math:`n` అనేది క్విట్‌ల సంఖ్య (కాబట్టి దీన్ని ఉపయోగించి జాగ్రత్తగా ఉండండి, ఎందుకంటే ఇది మీ మెషీన్‌లో రన్ చేయడానికి చాలా పెద్దదిగా మారుతుంది)."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:242
msgid "To run the above circuit using the statevector simulator, first you need to import Aer and then set the backend to ``statevector_simulator``."
msgstr "స్టేట్‌వెక్టర్ సిమ్యులేటర్‌ని ఉపయోగించి పై సర్క్యూట్‌ను అమలు చేయడానికి, ముందుగా మీరు Aerని దిగుమతి చేసి, ఆపై బ్యాకెండ్‌ను ``statevector_simulator``కి సెట్ చేయాలి."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:267
msgid "Now that we have chosen the backend, it's time to compile and run the quantum circuit. In Qiskit we provide the ``run`` method for this. ``run`` returns a ``job`` object that encapsulates information about the job submitted to the backend."
msgstr "ఇప్పుడు మేము బ్యాకెండ్‌ని ఎంచుకున్నాము, ఇది క్వాంటం సర్క్యూట్‌ను కంపైల్ చేయడానికి మరియు అమలు చేయడానికి సమయం ఆసన్నమైంది. Qiskitలో మేము దీని కోసం ``run`` పద్ధతిని అందిస్తాము. ``run`` బ్యాకెండ్‌కు సమర్పించిన జాబ్ గురించి సమాచారాన్ని సంగ్రహించే ``job`` ఆబ్జెక్ట్‌ని అందిస్తుంది."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:273
msgid "Tip: You can obtain the above parameters in Jupyter. Simply place the text cursor on a function and press Shift+Tab."
msgstr "చిట్కా: మీరు పై పారామితులను జూపిటర్‌లో పొందవచ్చు. టెక్స్ట్ కర్సర్‌ను ఫంక్షన్‌పై ఉంచండి మరియు Shift+Tab నొక్కండి."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:299
msgid "When you run a program, a job object is made that has the following two useful methods: ``job.status()`` and ``job.result()``, which return the status of the job and a result object, respectively."
msgstr "మీరు ప్రోగ్రామ్‌ను అమలు చేసినప్పుడు, జాబ్ ఆబ్జెక్ట్ ఈ క్రింది రెండు ఉపయోగకరమైన పద్ధతులను కలిగి ఉంటుంది: ``job.status()`` మరియు ``job.result()``, ఇది ఉద్యోగం యొక్క స్థితిని మరియు ఫలిత వస్తువును అందిస్తుంది, వరుసగా."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:305
msgid "Note: Jobs run asynchronously, but when the result method is called, it switches to synchronous and waits for it to finish before moving on to another task."
msgstr "గమనిక: జాబ్స్ అసమకాలికంగా నడుస్తాయి, కానీ ఫలిత పద్ధతిని పిలిచినప్పుడు, అది సింక్రోనస్‌కి మారుతుంది మరియు మరొక పనికి వెళ్లే ముందు అది పూర్తయ్యే వరకు వేచి ఉంటుంది."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:330
msgid "The results object contains the data and Qiskit provides the method ``result.get_statevector(circ)`` to return the state vector for the quantum circuit."
msgstr "ఫలితాల ఆబ్జెక్ట్ డేటాను కలిగి ఉంది మరియు Qiskit క్వాంటం సర్క్యూట్ కోసం స్టేట్ వెక్టర్‌ను తిరిగి ఇవ్వడానికి ``result.get_statevector(circ)`` పద్ధతిని అందిస్తుంది."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:382
msgid "Qiskit also provides a visualization toolbox to allow you to view these results."
msgstr "Qiskit ఈ ఫలితాలను వీక్షించడానికి మిమ్మల్ని అనుమతించడానికి విజువలైజేషన్ టూల్‌బాక్స్‌ను కూడా అందిస్తుంది."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:384
msgid "Below, we use the visualization function to plot the real and imaginary components of the state density matrix :math:`\\rho`."
msgstr "దిగువన, మేము స్టేట్ డెన్సిటీ మ్యాట్రిక్స్ :math:`\\rho` యొక్క వాస్తవ మరియు ఊహాత్మక భాగాలను ప్లాట్ చేయడానికి విజువలైజేషన్ ఫంక్షన్‌ని ఉపయోగిస్తాము."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:416
msgid "Unitary backend"
msgstr "యూనిటరీ బ్యాకెండ్"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:427
msgid "Qiskit Aer also includes a ``unitary_simulator`` that works *provided all the elements in the circuit are unitary operations*. This backend calculates the :math:`2^n \\times 2^n` matrix representing the gates in the quantum circuit."
msgstr "Qiskit Aer ఒక ``unitary_simulator`` ని కూడా కలిగి ఉంటుంది, ఇది పని చేస్తుంది *సర్క్యూట్‌లోని అన్ని మూలకాలు ఏకీకృత కార్యకలాపాలను అందించినట్లయితే*. ఈ బ్యాకెండ్ క్వాంటం సర్క్యూట్‌లోని గేట్‌లను సూచించే :math:`2^n \\times 2^n` మాతృకను గణిస్తుంది."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:527
msgid "OpenQASM backend"
msgstr "OpenQASM backend"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:538
msgid "The simulators above are useful because they provide information about the state output by the ideal circuit and the matrix representation of the circuit. However, a real experiment terminates by *measuring* each qubit (usually in the computational :math:`|0\\rangle, |1\\rangle` basis). Without measurement, we cannot gain information about the state. Measurements cause the quantum system to collapse into classical bits."
msgstr "పై సిమ్యులేటర్‌లు ఉపయోగకరంగా ఉంటాయి ఎందుకంటే అవి ఆదర్శ సర్క్యూట్ మరియు సర్క్యూట్ యొక్క మ్యాట్రిక్స్ ప్రాతినిధ్యం ద్వారా స్టేట్ అవుట్‌పుట్ గురించి సమాచారాన్ని అందిస్తాయి. అయినప్పటికీ, ప్రతి క్విట్‌ను *కొలవడం* ద్వారా నిజమైన ప్రయోగం ముగుస్తుంది (సాధారణంగా గణన :math:`|0\\rangle, |1\\rangle` ఆధారంగా). కొలత లేకుండా, మేము రాష్ట్రం గురించి సమాచారాన్ని పొందలేము. కొలతలు క్వాంటం వ్యవస్థను క్లాసికల్ బిట్స్‌గా కూలిపోయేలా చేస్తాయి."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:540
msgid "For example, suppose we make independent measurements on each qubit of the three-qubit GHZ state"
msgstr "ఉదాహరణకు, మూడు-క్విట్ GHZ స్థితి యొక్క ప్రతి క్విట్‌పై మనం స్వతంత్ర కొలతలు చేసామని అనుకుందాం"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:542
msgid "|\\psi\\rangle = (|000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"
msgstr "|\\psi\\rangle = (|000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:544
msgid "and let :math:`xyz` denote the bitstring that results. Recall that, under the qubit labeling used by Qiskit, :math:`x` would correspond to the outcome on qubit :math:`q_{2}`, :math:`y` to the outcome on qubit :math:`q_{1}`, and :math:`z` to the outcome on qubit :math:`q_{0}`."
msgstr "మరియు :math:`xyz` ఫలితాన్నిచ్చే బిట్‌స్ట్రింగ్‌ని సూచిస్తాయి. Qiskit ఉపయోగించిన క్విట్ లేబులింగ్ క్రింద, :math:`x` qubit :math:`q_{2}`, :math:`y` qubitపై ఫలితానికి అనుగుణంగా ఉంటుంది :math:`q_ qubit :math:`q_{0}`పై ఫలితానికి {1}`, మరియు :math:`z`."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:550
msgid "Note: This representation of the bitstring puts the most significant bit (MSB) on the left, and the least significant bit (LSB) on the right. This is the standard ordering of binary bitstrings. We order the qubits in the same way (qubit representing the MSB has index 0), which is why Qiskit uses a non-standard tensor product order."
msgstr "గమనిక: బిట్‌స్ట్రింగ్ యొక్క ఈ ప్రాతినిధ్యం ఎడమవైపున అత్యంత ముఖ్యమైన బిట్ (MSB) ని మరియు కుడివైపున కనీసం ముఖ్యమైన బిట్ (LSB) ని ఉంచుతుంది. ఇది బైనరీ బిట్‌స్ట్రింగ్‌ల ప్రామాణిక క్రమం. మేము క్విట్‌లను అదే విధంగా ఆర్డర్ చేస్తాము (MSBని సూచించే క్విట్‌లో ఇండెక్స్ 0 ఉంది), అందుకే Qiskit ప్రామాణికం కాని టెన్సర్ ఉత్పత్తి క్రమాన్ని ఉపయోగిస్తుంది."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:556
msgid "Recall the probability of obtaining outcome :math:`xyz` is given by"
msgstr "ఫలితం పొందే సంభావ్యతను గుర్తుకు తెచ్చుకోండి :math:`xyz` ద్వారా ఇవ్వబడింది"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:558
msgid "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"
msgstr "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:560
msgid "and as such for the GHZ state probability of obtaining 000 or 111 are both 1/2."
msgstr "మరియు 000 లేదా 111 పొందే GHZ స్థితి సంభావ్యత రెండూ 1/2."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:562
msgid "To simulate a circuit that includes measurement, we need to add measurements to the original circuit above, and use a different Aer backend."
msgstr "కొలతను కలిగి ఉన్న సర్క్యూట్‌ను అనుకరించడానికి, పైన ఉన్న అసలు సర్క్యూట్‌కు మేము కొలతలను జోడించాలి మరియు వేరే Aer బ్యాకెండ్‌ని ఉపయోగించాలి. కొలత."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:665
msgid "This circuit adds a classical register, and three measurements that are used to map the outcome of qubits to the classical bits."
msgstr "ఈ సర్క్యూట్ క్లాసికల్ రిజిస్టర్‌ను జోడిస్తుంది మరియు క్విట్‌ల ఫలితాన్ని క్లాసికల్ బిట్‌లకు మ్యాప్ చేయడానికి ఉపయోగించే మూడు కొలతలు."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:667
msgid "To simulate this circuit, we use the ``qasm_simulator`` in Qiskit Aer. Each run of this circuit will yield either the bitstring 000 or 111. To build up statistics about the distribution of the bitstrings (to, e.g., estimate :math:`\\mathrm{Pr}(000)`), we need to repeat the circuit many times. The number of times the circuit is repeated can be specified in the ``run`` method, via the ``shots`` keyword."
msgstr "ఈ సర్క్యూట్‌ను అనుకరించడానికి, మేము Qiskit Aerలో ``qasm_simulator``ని ఉపయోగిస్తాము. ఈ సర్క్యూట్ యొక్క ప్రతి పరుగు బిట్‌స్ట్రింగ్ 000 లేదా 111ని ఇస్తుంది. బిట్‌స్ట్రింగ్‌ల పంపిణీ గురించి గణాంకాలను రూపొందించడానికి (ఉదా., అంచనా :math:`\\mathrm{Pr}(000)`), మేము దీన్ని పునరావృతం చేయాలి చాలా సార్లు సర్క్యూట్. సర్క్యూట్ ఎన్నిసార్లు పునరావృతం చేయబడుతుందో ``run`` పద్ధతిలో, ``shots`` కీవర్డ్ ద్వారా పేర్కొనవచ్చు."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:697
msgid "Once you have a result object, you can access the counts via the function ``get_counts(circuit)``. This gives you the *aggregated* binary outcomes of the circuit you submitted."
msgstr "మీరు ఫలిత వస్తువును కలిగి ఉన్న తర్వాత, మీరు ``get_counts(circuit)`` ఫంక్షన్ ద్వారా గణనలను యాక్సెస్ చేయవచ్చు. ఇది మీరు సమర్పించిన సర్క్యూట్ యొక్క *సమగ్ర* బైనరీ ఫలితాలను అందిస్తుంది."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:743
msgid "Approximately 50 percent of the time, the output bitstring is 000. Qiskit also provides a function ``plot_histogram``, which allows you to view the outcomes."
msgstr "దాదాపు 50 శాతం సమయం, అవుట్‌పుట్ బిట్‌స్ట్రింగ్ 000. Qiskit కూడా ``plot_histogram`` ఫంక్షన్‌ను అందిస్తుంది, ఇది ఫలితాలను వీక్షించడానికి మిమ్మల్ని అనుమతిస్తుంది."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:774
msgid "The estimated outcome probabilities :math:`\\mathrm{Pr}(000)` and :math:`\\mathrm{Pr}(111)` are computed by taking the aggregate counts and dividing by the number of shots (times the circuit was repeated). Try changing the ``shots`` keyword in the ``run`` method and see how the estimated probabilities change."
msgstr "అంచనా వేసిన ఫలితం సంభావ్యత :math:`\\mathrm{Pr}(000)` మరియు :math:`\\mathrm{Pr}(111)` మొత్తం గణనలను తీసుకొని మరియు షాట్‌ల సంఖ్యతో విభజించడం ద్వారా గణించబడతాయి (సర్క్యూట్ పునరావృతమయ్యే సమయాలు). ``shots`` పద్ధతిలో కీవర్డ్‌ని మార్చడానికి ప్రయత్నించండి `` run`` మరియు అంచనా వేయబడిన సంభావ్యత ఎలా మారుతుందో చూడండి."

