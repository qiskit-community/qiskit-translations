msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-03 12:57+0000\n"
"PO-Revision-Date: 2023-11-03 15:13\n"
"Last-Translator: \n"
"Language: te\n"
"Language-Team: Telugu\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: te\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/how_to/use_estimator.po\n"
"X-Crowdin-File-ID: 10026\n"

#: ../../how_to/use_estimator.rst:3
msgid "Compute an expectation value with ``Estimator`` primitive"
msgstr ""

#: ../../how_to/use_estimator.rst:5
msgid "This guide shows how to get the expected value of an observable for a given quantum circuit with the :class:`~qiskit.primitives.Estimator` primitive."
msgstr ""

#: ../../how_to/use_estimator.rst:9
msgid "While this guide uses Qiskitâ€™s reference implementation, the ``Estimator`` primitive can be run with any provider using :class:`~qiskit.primitives.BackendEstimator` ."
msgstr ""

#: ../../how_to/use_estimator.rst:20
msgid "There are some providers that implement primitives natively (see `this page <http://qiskit.org/providers/#primitives>`_ for more details)."
msgstr ""

#: ../../how_to/use_estimator.rst:24
msgid "Initialize observables"
msgstr ""

#: ../../how_to/use_estimator.rst:26
msgid "The first step is to define the observables whose expected value you want to compute. Each observable can be any ``BaseOperator``, like the operators from :mod:`qiskit.quantum_info`. Among them it is preferable to use :class:`~qiskit.quantum_info.SparsePauliOp`."
msgstr ""

#: ../../how_to/use_estimator.rst:36
msgid "Initialize quantum circuit"
msgstr ""

#: ../../how_to/use_estimator.rst:38
msgid "Then you need to create the :class:`~qiskit.circuit.QuantumCircuit`\\ s for which you want to obtain the expected value."
msgstr ""

#: ../../how_to/use_estimator.rst:14
msgid "(:download:`Source code <../_build/gettext/plot_directive/how_to/use_estimator-1.py>`)"
msgstr ""

#: ../../how_to/use_estimator.rst:64
msgid "The :class:`~qiskit.circuit.QuantumCircuit` you pass to :class:`~qiskit.primitives.Estimator` must not include any measurements."
msgstr ""

#: ../../how_to/use_estimator.rst:67
msgid "Initialize the ``Estimator``"
msgstr ""

#: ../../how_to/use_estimator.rst:69
msgid "Then, you need to instantiate an :class:`~qiskit.primitives.Estimator`."
msgstr ""

#: ../../how_to/use_estimator.rst:78
msgid "Run and get results"
msgstr ""

#: ../../how_to/use_estimator.rst:80
msgid "Now that you have defined your ``estimator``, you can run your estimation by calling the :meth:`~qiskit.primitives.Estimator.run` method, which returns an instance of :class:`~.PrimitiveJob` (subclass of :class:`~qiskit.providers.JobV1`). You can get the results from the job (as a :class:`~qiskit.primitives.EstimatorResult` object) with the :meth:`~qiskit.providers.JobV1.result` method."
msgstr ""

#: ../../how_to/use_estimator.rst:94
msgid "While this example only uses one :class:`~qiskit.circuit.QuantumCircuit` and one observable, if you want to get expectation values for multiple circuits and observables you can pass a ``list`` of :class:`~qiskit.circuit.QuantumCircuit`\\ s and a list of ``BaseOperator``\\ s to the :meth:`~qiskit.primitives.Estimator.run` method. Both ``list``\\ s must have the same length."
msgstr ""

#: ../../how_to/use_estimator.rst:99
msgid "Get the expected value"
msgstr ""

#: ../../how_to/use_estimator.rst:101
msgid "From these results you can extract the expected values with the attribute :attr:`~qiskit.primitives.EstimatorResult.values`."
msgstr ""

#: ../../how_to/use_estimator.rst:103
msgid ":attr:`~qiskit.primitives.EstimatorResult.values` returns a :class:`numpy.ndarray` whose ``i``-th element is the expectation value corresponding to the ``i``-th circuit and ``i``-th observable."
msgstr ""

#: ../../how_to/use_estimator.rst:116
msgid "Parameterized circuit with ``Estimator``"
msgstr ""

#: ../../how_to/use_estimator.rst:118
msgid "The :class:`~qiskit.primitives.Estimator` primitive can be run with unbound parameterized circuits like the one below. You can also manually bind values to the parameters of the circuit and follow the steps of the previous example."
msgstr ""

#: ../../how_to/use_estimator.rst:140
msgid "The main difference with the previous case is that now you need to specify the sets of parameter values for which you want to evaluate the expectation value as a ``list`` of ``list``\\ s of ``float``\\ s. The ``i``-th element of the outer``list`` is the set of parameter values that corresponds to the ``i``-th circuit and observable."
msgstr ""

#: ../../how_to/use_estimator.rst:164
msgid "Change run options"
msgstr ""

#: ../../how_to/use_estimator.rst:166
msgid "Your workflow might require tuning primitive run options, such as the amount of shots."
msgstr ""

#: ../../how_to/use_estimator.rst:168
msgid "By default, the reference :class:`~qiskit.primitives.Estimator` class performs an exact statevector calculation based on the :class:`~qiskit.quantum_info.Statevector` class. However, this can be modified to include shot noise if the number of ``shots`` is set. For reproducibility purposes, a ``seed`` will also be set in the following examples."
msgstr ""

#: ../../how_to/use_estimator.rst:173
msgid "There are two main ways of setting options in the :class:`~qiskit.primitives.Estimator`:"
msgstr ""

#: ../../how_to/use_estimator.rst:175
msgid "Set keyword arguments in the :meth:`~qiskit.primitives.Estimator.run` method."
msgstr ""

#: ../../how_to/use_estimator.rst:176
msgid "Modify :class:`~qiskit.primitives.Estimator` options."
msgstr ""

#: ../../how_to/use_estimator.rst:179
msgid "Set keyword arguments for :meth:`~qiskit.primitives.Estimator.run`"
msgstr ""

#: ../../how_to/use_estimator.rst:181
msgid "If you only want to change the settings for a specific run, it can be more convenient to set the options inside the :meth:`~qiskit.primitives.Estimator.run` method. You can do this by passing them as keyword arguments."
msgstr ""

#: ../../how_to/use_estimator.rst:204
msgid "Modify :class:`~qiskit.primitives.Estimator` options"
msgstr ""

#: ../../how_to/use_estimator.rst:206
msgid "If you want to keep some configuration values for several runs, it can be better to change the :class:`~qiskit.primitives.Estimator` options. That way you can use the same :class:`~qiskit.primitives.Estimator` object as many times as you wish without having to rewrite the configuration values every time you use :meth:`~qiskit.primitives.Estimator.run`."
msgstr ""

#: ../../how_to/use_estimator.rst:212
msgid "Modify existing :class:`~qiskit.primitives.Estimator`"
msgstr ""

#: ../../how_to/use_estimator.rst:214
msgid "If you prefer to change the options of an already-defined :class:`~qiskit.primitives.Estimator`, you can use :meth:`~qiskit.primitives.Estimator.set_options` and introduce the new options as keyword arguments."
msgstr ""

#: ../../how_to/use_estimator.rst:239
msgid "Define a new :class:`~qiskit.primitives.Estimator` with the options"
msgstr ""

#: ../../how_to/use_estimator.rst:241
msgid "If you prefer to define a new :class:`~qiskit.primitives.Estimator` with new options, you need to define a ``dict`` like this one:"
msgstr ""

#: ../../how_to/use_estimator.rst:248
msgid "And then you can introduce it into your new :class:`~qiskit.primitives.Estimator` with the ``options`` argument."
msgstr ""

