msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-04 21:21+0000\n"
"PO-Revision-Date: 2023-05-04 21:55\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/migration_guides/qi_migration.po\n"
"X-Crowdin-File-ID: 10001\n"

#: ../../migration_guides/qi_migration.rst:3
msgid "Quantum Instance Migration Guide"
msgstr ""

#: ../../migration_guides/qi_migration.rst:5
msgid "The :class:`~qiskit.utils.QuantumInstance` is a utility class that allows the joint configuration of the circuit transpilation and execution steps, and provides functions at a higher level of abstraction for a more convenient integration with algorithms. These include measurement error mitigation, splitting/combining execution to conform to job limits, and ensuring reliable execution of circuits with additional job management tools."
msgstr ""

#: ../../migration_guides/qi_migration.rst:12
msgid "The :class:`~qiskit.utils.QuantumInstance` is being deprecated for several reasons: On one hand, the functionality of :meth:`~qiskit.utils.QuantumInstance.execute` has now been delegated to the different implementations of the :mod:`~qiskit.primitives` base classes. On the other hand, with the direct implementation of transpilation at the primitives level, the algorithms no longer need to manage that aspect of execution, and thus :meth:`~qiskit.utils.QuantumInstance.transpile` is no longer required by the workflow. If desired, custom transpilation routines can still be performed at the user level through the :mod:`~qiskit.transpiler` module (see table below)."
msgstr ""

#: ../../migration_guides/qi_migration.rst:22
msgid "The following table summarizes the migration alternatives for the :class:`~qiskit.utils.QuantumInstance` class:"
msgstr ""

#: ../../migration_guides/qi_migration.rst:27
msgid "QuantumInstance method"
msgstr ""

#: ../../migration_guides/qi_migration.rst:28
msgid "Alternative"
msgstr ""

#: ../../migration_guides/qi_migration.rst:29
msgid ":meth:`.QuantumInstance.execute`"
msgstr ""

#: ../../migration_guides/qi_migration.rst:30
msgid ":meth:`qiskit.primitives.Sampler.run` or :meth:`qiskit.primitives.Estimator.run`"
msgstr ""

#: ../../migration_guides/qi_migration.rst:31
msgid ":meth:`.QuantumInstance.transpile`"
msgstr ""

#: ../../migration_guides/qi_migration.rst:32
msgid ":meth:`qiskit.compiler.transpile`"
msgstr ""

#: ../../migration_guides/qi_migration.rst:33
msgid ":meth:`.QuantumInstance.assemble`"
msgstr ""

#: ../../migration_guides/qi_migration.rst:34
msgid ":meth:`qiskit.compiler.assemble`"
msgstr ""

#: ../../migration_guides/qi_migration.rst:36
msgid "The remainder of this guide will focus on the :meth:`.QuantumInstance.execute` to :mod:`~qiskit.primitives` migration path."
msgstr ""

#: ../../migration_guides/qi_migration.rst:40
msgid "Contents"
msgstr ""

#: ../../migration_guides/qi_migration.rst:42
msgid "`Choosing the right primitive for your task`_"
msgstr ""

#: ../../migration_guides/qi_migration.rst:43
msgid "`Choosing the right primitive for your settings`_"
msgstr ""

#: ../../migration_guides/qi_migration.rst:44
msgid "`Code examples`_"
msgstr ""

#: ../../migration_guides/qi_migration.rst:48
msgid "**Background on the Qiskit Primitives**"
msgstr ""

#: ../../migration_guides/qi_migration.rst:50
msgid "The Qiskit Primitives are algorithmic abstractions that encapsulate the access to backends or simulators for an easy integration into algorithm workflows."
msgstr ""

#: ../../migration_guides/qi_migration.rst:53
msgid "The current pool of primitives includes **two** different **classes** (:class:`~qiskit.primitives.Sampler` and :class:`~qiskit.primitives.Estimator`) that can be imported from **three** different locations ( :mod:`qiskit.primitives`, :mod:`qiskit_aer.primitives` and :mod:`qiskit_ibm_runtime` ). In addition to the reference Sampler and Estimator, :mod:`qiskit.primitives` also contains a :class:`~qiskit.primitives.BackendSampler` and a :class:`~qiskit.primitives.BackendEstimator` class. These are wrappers for ``backend.run()`` that follow the primitives interface."
msgstr ""

#: ../../migration_guides/qi_migration.rst:60
msgid "This guide uses the following naming standard to refer to the primitives:"
msgstr ""

#: ../../migration_guides/qi_migration.rst:62
msgid "*Primitives* - Any Sampler/Estimator implementation"
msgstr ""

#: ../../migration_guides/qi_migration.rst:63
msgid "*Reference Primitives* - The Sampler and Estimator in :mod:`qiskit.primitives` --> ``from qiskit.primitives import Sampler/Estimator``"
msgstr ""

#: ../../migration_guides/qi_migration.rst:64
msgid "*Aer Primitives* - The Sampler and Estimator in :mod:`qiskit_aer.primitives` --> ``from qiskit_aer.primitives import Sampler/Estimator``"
msgstr ""

#: ../../migration_guides/qi_migration.rst:65
msgid "*Runtime Primitives* - The Sampler and Estimator in :mod:`qiskit_ibm_runtime` --> ``from qiskit_ibm_runtime import Sampler/Estimator``"
msgstr ""

#: ../../migration_guides/qi_migration.rst:66
msgid "*Backend Primitives* - The BackendSampler and BackendEstimator in :mod:`qiskit.primitives` --> ``from qiskit import BackendSampler/BackendEstimator``"
msgstr ""

#: ../../migration_guides/qi_migration.rst:68
msgid "For guidelines on which primitives to choose for your task, please continue reading."
msgstr ""

#: ../../migration_guides/qi_migration.rst:71
msgid "Choosing the right primitive for your task"
msgstr ""

#: ../../migration_guides/qi_migration.rst:73
msgid "The :class:`~qiskit.utils.QuantumInstance` was designed to be an abstraction over transpile/run. It took inspiration from :func:`~qiskit.execute_function.execute`, but retained config information that could be set at the algorithm level, to save the user from defining the same parameters for every transpile/execute call."
msgstr ""

#: ../../migration_guides/qi_migration.rst:77
msgid "The :mod:`qiskit.primitives` share some of these features, but unlike the :class:`~qiskit.utils.QuantumInstance`, there are multiple primitive classes, and each is optimized for a specific purpose. Selecting the right primitive (``Sampler`` or ``Estimator``) requires some knowledge about **what** it is expected to do and **where/how** it is expected to run."
msgstr ""

#: ../../migration_guides/qi_migration.rst:84
msgid "The role of the primitives is two-fold. On one hand, they act as access points to backends and simulators. On the other hand, they are **algorithmic** abstractions with defined tasks:"
msgstr ""

#: ../../migration_guides/qi_migration.rst:87
msgid "The ``Estimator`` takes in circuits and observables and returns **expectation values**."
msgstr ""

#: ../../migration_guides/qi_migration.rst:88
msgid "The ``Sampler`` takes in circuits, measures them, and returns their  **quasi-probability distributions**."
msgstr ""

#: ../../migration_guides/qi_migration.rst:90
msgid "In order to know which primitive to use instead of :class:`~qiskit.utils.QuantumInstance`, you should ask yourself two questions:"
msgstr ""

#: ../../migration_guides/qi_migration.rst:95
msgid "What is the minimal unit of information used by your algorithm?"
msgstr ""

#: ../../migration_guides/qi_migration.rst:94
msgid "**Expectation value** - you will need an ``Estimator``"
msgstr ""

#: ../../migration_guides/qi_migration.rst:95
msgid "**Probability distribution** (from sampling the device) - you will need a ``Sampler``"
msgstr ""

#: ../../migration_guides/qi_migration.rst:97
msgid "How do you want to execute your circuits?"
msgstr ""

#: ../../migration_guides/qi_migration.rst:99
msgid "This question is not new. In the legacy algorithm workflow, you would have to decide to set up a :class:`~qiskit.utils.QuantumInstance` with either a real backend from a provider, or a simulator. Now, this \"backend selection\" process is translated to **where** do you import your primitives from:"
msgstr ""

#: ../../migration_guides/qi_migration.rst:104
msgid "Using **local** statevector simulators for quick prototyping: **Reference Primitives**"
msgstr ""

#: ../../migration_guides/qi_migration.rst:105
msgid "Using **local** noisy simulations for finer algorithm tuning: **Aer Primitives**"
msgstr ""

#: ../../migration_guides/qi_migration.rst:106
msgid "Accessing **runtime-enabled backends** (or cloud simulators): **Runtime Primitives**"
msgstr ""

#: ../../migration_guides/qi_migration.rst:107
msgid "Accessing **non runtime-enabled backends** : **Backend Primitives**"
msgstr ""

#: ../../migration_guides/qi_migration.rst:109
msgid "Arguably, the ``Sampler`` is the closest primitive to :class:`~qiskit.utils.QuantumInstance`, as they both execute circuits and provide a result back. However, with the :class:`~qiskit.utils.QuantumInstance`, the result data was backend dependent (it could be a counts ``dict``, a :class:`numpy.array` for statevector simulations, etc), while the ``Sampler`` normalizes its ``SamplerResult`` to return a :class:`~qiskit.result.QuasiDistribution` object with the resulting quasi-probability distribution."
msgstr ""

#: ../../migration_guides/qi_migration.rst:115
msgid "The ``Estimator`` provides a specific abstraction for the expectation value calculation that can replace the use of :class:`.QuantumInstance` as well as the associated pre- and post-processing steps, usually performed with an additional library such as :mod:`qiskit.opflow`."
msgstr ""

#: ../../migration_guides/qi_migration.rst:120
msgid "Choosing the right primitive for your settings"
msgstr ""

#: ../../migration_guides/qi_migration.rst:122
msgid "Certain :class:`~qiskit.utils.QuantumInstance` features are only available in certain primitive implementations. The following table summarizes the most common :class:`~qiskit.utils.QuantumInstance` settings and which primitives **expose a similar setting through their interface**:"
msgstr ""

#: ../../migration_guides/qi_migration.rst:128
msgid "In some cases, a setting might not be exposed through the interface, but there might an alternative path to make it work. This is the case for custom transpiler passes, which cannot be set through the primitives interface, but pre-transpiled circuits can be sent if setting the option ``skip_transpilation=True``. For more information, please refer to the API reference or source code of the desired primitive implementation."
msgstr ""

#: ../../migration_guides/qi_migration.rst:136
msgid "QuantumInstance"
msgstr ""

#: ../../migration_guides/qi_migration.rst:137
msgid "Reference Primitives"
msgstr ""

#: ../../migration_guides/qi_migration.rst:138
msgid "Aer Primitives"
msgstr ""

#: ../../migration_guides/qi_migration.rst:139
msgid "Runtime Primitives"
msgstr ""

#: ../../migration_guides/qi_migration.rst:140
msgid "Backend Primitives"
msgstr ""

#: ../../migration_guides/qi_migration.rst:141
msgid "Select ``backend``"
msgstr ""

#: ../../migration_guides/qi_migration.rst:142
#: ../../migration_guides/qi_migration.rst:143
#: ../../migration_guides/qi_migration.rst:152
#: ../../migration_guides/qi_migration.rst:157
#: ../../migration_guides/qi_migration.rst:158
#: ../../migration_guides/qi_migration.rst:162
#: ../../migration_guides/qi_migration.rst:163
#: ../../migration_guides/qi_migration.rst:167
#: ../../migration_guides/qi_migration.rst:168
#: ../../migration_guides/qi_migration.rst:169
#: ../../migration_guides/qi_migration.rst:172
#: ../../migration_guides/qi_migration.rst:173
#: ../../migration_guides/qi_migration.rst:175
#: ../../migration_guides/qi_migration.rst:178
#: ../../migration_guides/qi_migration.rst:179
#: ../../migration_guides/qi_migration.rst:181
#: ../../migration_guides/qi_migration.rst:186
msgid "No"
msgstr ""

#: ../../migration_guides/qi_migration.rst:144
#: ../../migration_guides/qi_migration.rst:145
#: ../../migration_guides/qi_migration.rst:147
#: ../../migration_guides/qi_migration.rst:148
#: ../../migration_guides/qi_migration.rst:149
#: ../../migration_guides/qi_migration.rst:150
#: ../../migration_guides/qi_migration.rst:153
#: ../../migration_guides/qi_migration.rst:154
#: ../../migration_guides/qi_migration.rst:170
msgid "Yes"
msgstr ""

#: ../../migration_guides/qi_migration.rst:146
msgid "Set ``shots``"
msgstr ""

#: ../../migration_guides/qi_migration.rst:151
msgid "Simulator settings: ``basis_gates``, ``coupling_map``, ``initial_layout``, ``noise_model``, ``backend_options``"
msgstr ""

#: ../../migration_guides/qi_migration.rst:155
msgid "No (inferred from internal ``backend``)"
msgstr ""

#: ../../migration_guides/qi_migration.rst:156
msgid "Transpiler settings: ``seed_transpiler``, ``optimization_level``"
msgstr ""

#: ../../migration_guides/qi_migration.rst:159
msgid "Yes (via ``options``) (*)"
msgstr ""

#: ../../migration_guides/qi_migration.rst:160
msgid "Yes (via ``.set_transpile_options()``)"
msgstr ""

#: ../../migration_guides/qi_migration.rst:161
msgid "Set unbound ``pass_manager``"
msgstr ""

#: ../../migration_guides/qi_migration.rst:164
#: ../../migration_guides/qi_migration.rst:165
msgid "No (but can ``skip_transpilation``)"
msgstr ""

#: ../../migration_guides/qi_migration.rst:166
msgid "Set ``bound_pass_manager``"
msgstr ""

#: ../../migration_guides/qi_migration.rst:171
msgid "Set ``backend_options``: common ones were ``memory`` and ``meas_level``"
msgstr ""

#: ../../migration_guides/qi_migration.rst:174
msgid "No (only ``qubit_layout``)"
msgstr ""

#: ../../migration_guides/qi_migration.rst:176
msgid "Measurement error mitigation: ``measurement_error_mitigation_cls``, ``cals_matrix_refresh_period``, ``measurement_error_mitigation_shots``, ``mit_pattern``"
msgstr ""

#: ../../migration_guides/qi_migration.rst:180
msgid "Sampler default -> M3 (*)"
msgstr ""

#: ../../migration_guides/qi_migration.rst:182
msgid "Job management: ``job_callback``, ``max_job_retries``, ``timeout``, ``wait``"
msgstr ""

#: ../../migration_guides/qi_migration.rst:183
#: ../../migration_guides/qi_migration.rst:184
msgid "Does not apply"
msgstr ""

#: ../../migration_guides/qi_migration.rst:185
msgid "Sessions, callback (**)"
msgstr ""

#: ../../migration_guides/qi_migration.rst:189
msgid "(*) For more information on error mitigation and setting options on Runtime Primitives, visit `this link <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.options.Options.html#qiskit_ibm_runtime.options.Options>`_."
msgstr ""

#: ../../migration_guides/qi_migration.rst:192
msgid "(**) For more information on Runtime sessions, visit `this how-to <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/how_to/run_session.html>`_."
msgstr ""

#: ../../migration_guides/qi_migration.rst:195
msgid "Code examples"
msgstr ""

#: ../../migration_guides/qi_migration.rst
msgid "Example 1: Circuit Sampling with Local Simulation"
msgstr ""

#: ../../migration_guides/qi_migration.rst:200
#: ../../migration_guides/qi_migration.rst:320
#: ../../migration_guides/qi_migration.rst:412
#: ../../migration_guides/qi_migration.rst:528
msgid "**Using Quantum Instance**"
msgstr ""

#: ../../migration_guides/qi_migration.rst:202
msgid "The only alternative for local simulations using the quantum instance was using an Aer simulator backend. If no simulation method is specified, the Aer simulator will default to an exact simulation (statevector/stabilizer), if shots are specified, it will add shot noise. Please note that ``QuantumInstance.execute()`` returned the counts in hexadecimal format."
msgstr ""

#: ../../migration_guides/qi_migration.rst:234
#: ../../migration_guides/qi_migration.rst:365
#: ../../migration_guides/qi_migration.rst:448
#: ../../migration_guides/qi_migration.rst:597
msgid "**Using Primitives**"
msgstr ""

#: ../../migration_guides/qi_migration.rst:236
msgid "The primitives offer two alternatives for local simulation, one with the Reference primitives and one with the Aer primitives. As mentioned above the closest alternative to ``QuantumInstance.execute()`` for sampling is the ``Sampler`` primitive."
msgstr ""

#: ../../migration_guides/qi_migration.rst:240
msgid "**a. Using the Reference Primitives**"
msgstr ""

#: ../../migration_guides/qi_migration.rst:242
msgid "Basic simulation implemented using the :mod:`qiskit.quantum_info` module. If shots are specified, the results will include shot noise. Please note that the resulting quasi-probability distribution does not use bitstrings but **integers** to identify the states."
msgstr ""

#: ../../migration_guides/qi_migration.rst:268
msgid "**b. Using the Aer Primitives**"
msgstr ""

#: ../../migration_guides/qi_migration.rst:270
msgid "Aer simulation following the statevector method. This would be the closer replacement of the :class:`~qiskit.utils.QuantumInstance` example, as they are both accessing the same simulator. For this reason, the output metadata is closer to the Quantum Instance's output. Please note that the resulting quasi-probability distribution does not use bitstrings but **integers** to identify the states."
msgstr ""

#: ../../migration_guides/qi_migration.rst:278
msgid "The :class:`qiskit.result.QuasiDistribution` class returned as part of the :class:`qiskit.primitives.SamplerResult` exposes two methods to convert the result keys from integer to binary strings/hexadecimal:"
msgstr ""

#: ../../migration_guides/qi_migration.rst:281
msgid ":meth:`qiskit.result.QuasiDistribution.binary_probabilities`"
msgstr ""

#: ../../migration_guides/qi_migration.rst:282
msgid ":meth:`qiskit.result.QuasiDistribution.hex_probabilities`"
msgstr ""

#: ../../migration_guides/qi_migration.rst
msgid "Example 2: Expectation Value Calculation with Local Noisy Simulation"
msgstr ""

#: ../../migration_guides/qi_migration.rst:316
msgid "While this example does not include a direct call to ``QuantumInstance.execute()``, it shows how to migrate from a :class:`~qiskit.utils.QuantumInstance`-based to a :mod:`~qiskit.primitives`-based workflow."
msgstr ""

#: ../../migration_guides/qi_migration.rst:322
msgid "The most common use case for computing expectation values with the Quantum Instance was as in combination with the :mod:`~qiskit.opflow` library. You can see more information in the `opflow migration guide <http://qisk.it/opflow_migration>`_."
msgstr ""

#: ../../migration_guides/qi_migration.rst:367
msgid "The primitives now allow the combination of the opflow and quantum instance functionality in a single ``Estimator``. In this case, for local noisy simulation, this will be the Aer Estimator."
msgstr ""

#: ../../migration_guides/qi_migration.rst
msgid "Example 3: Circuit Sampling on IBM Backend with Error Mitigation"
msgstr ""

#: ../../migration_guides/qi_migration.rst:414
msgid "The ``QuantumInstance`` interface allowed the configuration of measurement error mitigation settings such as the method, the matrix refresh period or the mitigation pattern. This configuration is no longer available in the primitives interface."
msgstr ""

#: ../../migration_guides/qi_migration.rst:450
msgid "The Runtime Primitives offer a suite of error mitigation methods that can be easily turned on with the ``resilience_level`` option. These are, however, not configurable. The sampler's ``resilience_level=1`` is the closest alternative to the Quantum Instance's measurement error mitigation implementation, but this is not a 1-1 replacement."
msgstr ""

#: ../../migration_guides/qi_migration.rst:455
msgid "For more information on the error mitigation options in the Runtime Primitives, you can check out the following `link <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.options.Options.html#qiskit_ibm_runtime.options.Options>`_."
msgstr ""

#: ../../migration_guides/qi_migration.rst
msgid "Example 4: Circuit Sampling with Custom Bound and Unbound Pass Managers"
msgstr ""

#: ../../migration_guides/qi_migration.rst:488
msgid "The management of transpilation is different between the ``QuantumInstance`` and the Primitives."
msgstr ""

#: ../../migration_guides/qi_migration.rst:490
msgid "The Quantum Instance allowed you to:"
msgstr ""

#: ../../migration_guides/qi_migration.rst:492
msgid "Define bound and unbound pass managers that will be called during ``.execute()``."
msgstr ""

#: ../../migration_guides/qi_migration.rst:493
msgid "Explicitly call its ``.transpile()`` method with a specific pass manager."
msgstr ""

#: ../../migration_guides/qi_migration.rst:495
msgid "However:"
msgstr ""

#: ../../migration_guides/qi_migration.rst:497
msgid "The Quantum Instance **did not** manage parameter bindings on parametrized quantum circuits. This would mean that if a ``bound_pass_manager`` was set, the circuit sent to ``QuantumInstance.execute()`` could not have any free parameters."
msgstr ""

#: ../../migration_guides/qi_migration.rst:501
msgid "On the other hand, when using the primitives:"
msgstr ""

#: ../../migration_guides/qi_migration.rst:503
msgid "You cannot explicitly access their transpilation routine."
msgstr ""

#: ../../migration_guides/qi_migration.rst:504
msgid "The mechanism to apply custom transpilation passes to the Aer, Runtime and Backend primitives is to pre-transpile locally and set ``skip_transpilation=True`` in the corresponding primitive."
msgstr ""

#: ../../migration_guides/qi_migration.rst:506
msgid "The only primitives that currently accept a custom **bound** transpiler pass manager are the **Backend Primitives**. If a ``bound_pass_manager`` is defined, the ``skip_transpilation=True`` option will **not** skip this bound pass."
msgstr ""

#: ../../migration_guides/qi_migration.rst:511
msgid "Care is needed when setting ``skip_transpilation=True`` with the ``Estimator`` primitive. Since operator and circuit size need to match for the Estimator, should the custom transpilation change the circuit size, then the operator must be adapted before sending it to the Estimator, as there is no currently no mechanism to identify the active qubits it should consider."
msgstr ""

#: ../../migration_guides/qi_migration.rst:520
msgid "Note that the primitives **do** handle parameter bindings, meaning that even if a ``bound_pass_manager`` is defined in a Backend Primitive, you do not have to manually assign parameters as expected in the Quantum Instance workflow."
msgstr ""

#: ../../migration_guides/qi_migration.rst:523
msgid "The use-case that motivated the addition of the two-stage transpilation to the ``QuantumInstance`` was to allow running pulse-efficient transpilation passes with the :class:`~qiskit.opflow.CircuitSampler` class. The following example shows to migrate this particular use-case, where the ``QuantumInstance.execute()`` method is called under the hood by the :class:`~qiskit.opflow.CircuitSampler`."
msgstr ""

#: ../../migration_guides/qi_migration.rst:599
msgid "Let's see how the workflow changes with the Backend Sampler:"
msgstr ""

