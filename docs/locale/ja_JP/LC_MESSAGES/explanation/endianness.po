msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-03 12:57+0000\n"
"PO-Revision-Date: 2023-11-03 14:42\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/explanation/endianness.po\n"
"X-Crowdin-File-ID: 10022\n"

#: ../../explanation/endianness.rst:3
msgid "Order of qubits in Qiskit"
msgstr ""

#: ../../explanation/endianness.rst:5
msgid "While most physics textbooks represent an :math:`n`-qubit system as the tensor product :math:`Q_0\\otimes Q_1 \\otimes ... \\otimes Q_{n-1}`, where :math:`Q_j` is the :math:`j^{\\mathrm{th}}` qubit, Qiskit uses the inverse order, that is, :math:`Q_{n-1}\\otimes ... \\otimes Q_1 \\otimes Q_{0}`. As explained in `this video <https://www.youtube.com/watch?v=EiqHj3_Avps>`_ from `Qiskit's YouTube channel <https://www.youtube.com/@qiskit>`_, this is done to follow the convention in classical computing, in which the :math:`n^{\\mathrm{th}}` bit or most significant bit (MSB) is placed on the left (with index 0) while the least significant bit (LSB) is placed on the right (index :math:`n-1`). This ordering convention is called little-endian while the one from the physics textbooks is called big-endian."
msgstr ""

#: ../../explanation/endianness.rst:7
msgid "This means that if we have, for example, a 3-qubit system with qubit 0 in state :math:`|1\\rangle` and qubits 1 and 2 in state :math:`|0\\rangle`, Qiskit would represent this state as :math:`|001\\rangle` while most physics textbooks would represent this state as :math:`|100\\rangle`."
msgstr ""

#: ../../explanation/endianness.rst:9
msgid "The matrix representation of any multi-qubit gate is also affected by this different qubit ordering. For example, if we consider the single-qubit gate"
msgstr ""

#: ../../explanation/endianness.rst:11
msgid "U = \\begin{pmatrix} u_{00} & u_{01} \\\\ u_{10} & u_{11} \\end{pmatrix}"
msgstr ""

#: ../../explanation/endianness.rst:15
msgid "And we want a controlled version :math:`C_U` whose control qubit is qubit 0 and whose target is qubit 1, following Qiskit's ordering its matrix representation would be"
msgstr ""

#: ../../explanation/endianness.rst:17
msgid "C_U = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\0 & u_{00} & 0 & u_{01} \\\\ 0 & 0 & 1 & 0 \\\\ 0 & u_{10} & 0& u_{11} \\end{pmatrix}"
msgstr ""

#: ../../explanation/endianness.rst:21
msgid "while in a physics textbook it would be written as"
msgstr ""

#: ../../explanation/endianness.rst:23
msgid "C_U = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\0 & 1 & 0 & 0 \\\\ 0 & 0 & u_{00} & u_{01} \\\\ 0 & 0 & u_{00} & u_{01} \\end{pmatrix}"
msgstr ""

#: ../../explanation/endianness.rst:28
msgid "For more details about how this ordering of MSB and LSB affects the matrix representation of any particular gate, check its entry in the circuit :mod:`~qiskit.circuit.library`."
msgstr ""

#: ../../explanation/endianness.rst:30
msgid "This different order can also make the circuit corresponding to an algorithm from a textbook a bit more complicated to visualize. Fortunately, Qiskit provides a way to represent a :class:`~.QuantumCircuit` with the most significant qubits on top, just like in the textbooks. This can be done by setting the ``reverse_bits`` argument of the :meth:`~.QuantumCircuit.draw` method to ``True``."
msgstr ""

#: ../../explanation/endianness.rst:32
msgid "Let's try this for a 3-qubit Quantum Fourier Transform (:class:`~.QFT`)."
msgstr ""

#: ../../explanation/endianness.rst:12
msgid "(:download:`Source code <../_build/gettext/plot_directive/explanation/endianness-1.py>`)"
msgstr ""

#: ../../explanation/endianness.rst:9
msgid "(:download:`Source code <../_build/gettext/plot_directive/explanation/endianness-2.py>`)"
msgstr ""

