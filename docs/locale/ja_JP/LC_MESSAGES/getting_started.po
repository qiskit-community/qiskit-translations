msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-12 09:25+0000\n"
"PO-Revision-Date: 2023-05-12 09:53\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/getting_started.po\n"
"X-Crowdin-File-ID: 9536\n"

#: ../../getting_started.rst:5
msgid "Getting started"
msgstr "はじめに"

#: ../../getting_started.rst:10
msgid "Installation"
msgstr "インストール"

#: ../../getting_started.rst:12
msgid "Let's get started using Qiskit!  The first thing to do is choose how you're going to run and install the packages.  There are three main ways to do this:"
msgstr "Qiskitを使い始めましょう！ 最初に行うことは、パッケージの実行方法とインストール方法を選択することです。 これを行うには、主に3つの方法があります。"

#: ../../getting_started.rst
msgid "Start locally"
msgstr "ローカルからの開始"

#: ../../getting_started.rst:19
msgid "Qiskit supports Python 3.7 or later. However, both Python and Qiskit are evolving ecosystems, and sometimes when new releases occur in one or the other, there can be problems with compatibility."
msgstr "Qiskit は Python 3.7 以降をサポートしています。ただし、Python と Qiskit はどちらも進化しているエコシステムであり、どちらか一方で新しいリリースが発生すると、互換性に問題が生じる場合があります。"

#: ../../getting_started.rst:23
msgid "You will need to `download Python <https://wiki.python.org/moin/BeginnersGuide/Download>`__ on your local system to get started. `Jupyter <https://jupyter.org/install>`__ is recommended for interacting with Qiskit."
msgstr "始めるには `Python <https://wiki.python.org/moin/BeginnersGuide/Download>`__ をローカルシステムにダウンロードする必要があります。 `Jupyter <https://jupyter.org/install>`__ は Qiskit とのやり取りに推奨されます。"

#: ../../getting_started.rst:27
msgid "We recommend using `Python virtual environments <https://docs.python.org/3.10/tutorial/venv.html>`__ to cleanly separate Qiskit from other applications and improve your experience."
msgstr "Qiskitを他のアプリケーションから明確に分離して、経験をよりよいものにするため、 `Python仮想環境 <https://docs.python.org/3.10/tutorial/venv.html>`__ を使用することをおすすめします。"

#: ../../getting_started.rst:30
msgid "Create a minimal environment with only Python installed in it."
msgstr "Pythonのみをインストールした最小環境を作ります。"

#: ../../getting_started.rst:36
msgid "Activate your new environment."
msgstr "新しい環境をアクティブにします。"

#: ../../getting_started.rst:43
msgid "Note: if you are using Windows, use the following commands in PowerShell."
msgstr "注: Windowsを使用している場合は、 PowerShellで以下のコマンドを使用します。"

#: ../../getting_started.rst:51
msgid "Next, install the Qiskit package."
msgstr "次に、 Qiskit パッケージをインストールします。"

#: ../../getting_started.rst:57
msgid "If the packages were installed correctly, you can run ``pip list`` to see the active packages in your virtual environment."
msgstr "パッケージが正しくインストールされている場合は、 ``pip list`` を実行して、仮想環境でアクティブなパッケージを確認できます。"

#: ../../getting_started.rst:60
msgid "If you intend to use visualization functionality or Jupyter notebooks it is recommended to install Qiskit with the extra ``visualization`` support:"
msgstr "可視化機能やJupyter notebookを使用する場合は、Qiskitに ``visualization`` 機能を追加してインストールすることをお勧めします。"

#: ../../getting_started.rst:67
msgid "It is worth pointing out that if you're a zsh user (which is the default shell on newer versions of macOS), you'll need to put ``qiskit[visualization]`` in quotes:"
msgstr "zshユーザー（新しいバージョンのmacOSのデフォルトシェル）の場合は、 ``qiskit[visualization]`` を引用符で囲む必要があります。"

#: ../../getting_started.rst
msgid "Start on the cloud"
msgstr "クラウドで始める"

#: ../../getting_started.rst:76
msgid "The following cloud vendors have Qiskit pre-installed in their environments:"
msgstr "以下のクラウドベンダーの環境では、Qiskitがプレインストールされています。"

#: ../../getting_started.rst
msgid "Install from source"
msgstr "ソースからのインストール"

#: ../../getting_started.rst:108
msgid "Installing the elements from source allows you to access the most recently updated version of Qiskit instead of using the version in the Python Package Index (PyPI) repository. This will give you the ability to inspect and extend the latest version of the Qiskit code more efficiently."
msgstr "ソースからエレメントをインストールすることにより、Python Package Index (PyPI) リポジトリのバージョンを使う代わりに、最新のQiskitバージョンにアクセスすることが出来ます。これにより、Qiskit コードの最新版を調査したり、拡張することがより効果的にできるようになります。"

#: ../../getting_started.rst:113
msgid "When installing the elements and components from source, by default their ``development`` version (which corresponds to the ``master`` git branch) will be used, as opposed to the ``stable`` version (which contains the same codebase as the published ``pip`` packages). Since the ``development`` versions of an element or component usually include new features and changes, they generally require using the ``development`` version of the rest of the items as well."
msgstr "ソースからエレメントやコンポーネントをインストールする時には、デフォルトでは、``安定`` バージョン( ``pip``パッケージとして公開されているコードベースと同じもの) ではなく、 ``開発`` バージョン( ``master`` git ブランチに該当) が使われます。 エレメントやコンポーネントの ``開発`` バージョンは通常新しい機能や変更が含まれているため、一般的には他の項目についても ``開発`` バージョンを利用することが求められています。"

#: ../../getting_started.rst:122
msgid "The Terra and Aer packages both require a compiler to build from source before you can install. Ignis, Aqua, and the IBM Quantum Provider backend do not require a compiler."
msgstr "Terraと Aerのパッケージはソースからビルドするためにコンパイラーが必要なため、インストール前に準備します。Ignis、Aqua、IBM Quantum Provider バックエンドにはコンパイラーは必要ありません。"

#: ../../getting_started.rst:126
msgid "Installing elements from source requires the following order of installation to prevent installing versions of elements that may be lower than those desired if the ``pip`` version is behind the source versions:"
msgstr "``pip`` のバージョンがソースバージョンより古い場合に、要求するものよりも古いバージョンをインストールしてしまうことを防ぐため、ソースからエレメントをインストールするには以下の順番で実施します："

#: ../../getting_started.rst:130
msgid ":ref:`qiskit-terra <install-qiskit-terra>`"
msgstr ":ref:`qiskit-terra <install-qiskit-terra>`"

#: ../../getting_started.rst:131
msgid ":ref:`qiskit-aer <install-qiskit-aer>`"
msgstr ":ref:`qiskit-aer <install-qiskit-aer>`"

#: ../../getting_started.rst:133
msgid "To work with several components and elements simultaneously, use the following steps for each element."
msgstr "いくつかのコンポーネントとエレメントで同時に作業したい場合には、各エレメントに対して以下のステップを踏みます。"

#: ../../getting_started.rst:138
msgid "Due to the use of namespace packaging in Python, care must be taken in how you install packages. If you're planning to install any element from source, do not use the ``qiskit`` meta-package. Also, follow this guide and use a separate virtual environment for development. If you do choose to mix an existing installation with your development, refer to https://github.com/pypa/sample-namespace-packages/blob/master/table.md for the set of combinations of installation methods that work together."
msgstr "Pythonの名前空間パッケージを使用しているため、パッケージのインストール方法には注意する必要がります。もしソースからエレメントをインストールすることを考えている場合は、``qiskit`` メタパッケージを使用しないでください。また、このガイドに従って、開発用に別の仮想環境を使用してください。もし、既存のインストールと開発環境を混在させる場合は、https://github.com/pypa/sample-namespace-packages/blob/master/table.md を参照して、連携するインストール方法の組み合わせを確認してください。"

#: ../../getting_started.rst:161
msgid "Installing from source requires that you have the Rust compiler on your system. To install the Rust compiler the recommended path is to use rustup, which is a cross-platform Rust installer. To use rustup you can go to:"
msgstr "ソースからインストールするには、システムにRustコンパイラがインストールされている必要があります。Rustコンパイラをインストールするには、クロスプラットフォームのRustインストーラである rustup を使用することをお勧めします。rustup を使用するには、次のURLにアクセスできます。"

#: ../../getting_started.rst:165
msgid "https://rustup.rs/"
msgstr "https://rustup.rs/"

#: ../../getting_started.rst:167
msgid "which will provide instructions for how to install rust on your platform. Besides rustup there are `other installation methods <https://forge.rust-lang.org/infra/other-installation-methods.html>`__ available too."
msgstr "これは、プラットフォームに rust をインストールする方法の説明を提供します。rustup の他に、 `他のインストール方法 <https://forge.rust-lang.org/infra/other-installation-methods.html>`__ も利用できます。"

#: ../../getting_started.rst:171
msgid "Once the Rust compiler is installed, you are ready to install Qiskit Terra."
msgstr "Rust コンパイラがインストールされると、Qiskit Terra をインストールする準備が整います。"

#: ../../getting_started.rst:173
msgid "Clone the Terra repository."
msgstr "Terraレポジトリをクローンします。"

#: ../../getting_started.rst:179
msgid "Cloning the repository creates a local folder called ``qiskit-terra``."
msgstr "レポジトリをクローンすると、``qiskit-terra``という名前のローカル・フォルダが作成されます。"

#: ../../getting_started.rst:185
msgid "If you want to run tests or linting checks, install the developer requirements."
msgstr "もし、テストを実行したり文法をチェックしたい場合は、開発者向けライブラリーをインストールします。"

#: ../../getting_started.rst:191
msgid "Install ``qiskit-terra``."
msgstr "``qiskit-terra`` をインストールします。"

#: ../../getting_started.rst:197
msgid "If you want to install it in editable mode, meaning that code changes to the project don't require a reinstall to be applied, you can do this with:"
msgstr "編集可能モード(プロジェクトのコードを変更しても再インストールする必要なし) でインストールする場合は、次の手順を実行します:"

#: ../../getting_started.rst:204
msgid "Installing in editable mode will build the compiled extensions in debug mode without optimizations. This will affect the runtime performance of the compiled code. If you'd like to use editable mode and build the compiled code in release with optimizations enabled you can run:"
msgstr "編集可能モードでインストールすると、コンパイルされた拡張機能が最適化なしでデバッグモードでビルドされます。これは、コンパイルされたコードの実行時のパフォーマンスに影響します。編集可能モードを使用し、最適化を有効にしてリリースでコンパイルされたコードをビルドする場合は、次を実行できます。"

#: ../../getting_started.rst:213
msgid "after you run pip and that will rebuild the binary in release mode. If you are working on Rust code in Qiskit you will need to rebuild the extension code every time you make a local change. ``pip install -e .`` will only build the Rust extension when it's called, so any local changes you make to the Rust code after running pip will not be reflected in the installed package unless you rebuild the extension. You can leverage the above ``build_rust`` command to do this (with or without ``--release`` based on whether you want to build in debug mode or release mode)."
msgstr "pip を実行すると、バイナリーがリリース モードで再構築されます。Qiskit で Rust コードを使用している場合は、ローカルで変更を加えるたびに拡張コードを再構築する必要があります。 ``pip install -e .`` は、呼び出されたときにのみRust拡張機能をビルドするため、拡張機能を再構築しない限り、pip の実行後に Rust コードに加えたローカル変更はインストールされたパッケージに反映されません。上記の ``build_rust`` コマンドを利用してこれを行うことができます（ ``--release`` の有無にかかわらず、デバッグモードとリリースモードのどちらでビルドするかに基づきます）。"

#: ../../getting_started.rst:222
msgid "You can then run the code examples after installing Terra. You can run the example with the following command."
msgstr "Terraのインストール後、サンプル・コードを実行することができます。サンプルを実行するには以下のコマンドを使用します:"

#: ../../getting_started.rst:237
msgid "Clone the Aer repository."
msgstr "Aerリポジトリをクローンします。"

#: ../../getting_started.rst:243
msgid "To install Aer depend on which operating system you are using. Since Aer is a compiled C++ program with a Python interface, there are non-Python dependencies for building the Aer binary which can't be installed universally depending on operating system."
msgstr "Aerをインストールする手順は、使用しているオペレーティングシステムによって異なります。 AerはPythonインターフェイスを備えたコンパイル済みのC++プログラムであるため、Aer バイナリを構築するための Python 以外の依存関係があり、オペレーティング システムによっては一般的にインストールすることはできません。"

#: ../../getting_started.rst ../../getting_started.rst:417
msgid "Linux"
msgstr "Linux"

#: ../../getting_started.rst:250
msgid "Install compiler requirements."
msgstr "ビルドの必要要件をインストールします。"

#: ../../getting_started.rst:252
msgid "Building Aer requires a C++ compiler and development headers."
msgstr "AerをビルドするにはC++コンパイラと開発ヘッダーが必要です。"

#: ../../getting_started.rst:254 ../../getting_started.rst:269
msgid "If you're using Fedora or an equivalent Linux distribution, install using:"
msgstr "Fedoraもしくは同等のLinux ディストリビューションを使っている場合は、次のコマンドでインストールできます:"

#: ../../getting_started.rst:261 ../../getting_started.rst:276
msgid "For Ubuntu/Debian install it using:"
msgstr "Ubuntu/Debianを使っている場合は以下の通りです："

#: ../../getting_started.rst:267
msgid "Install OpenBLAS development headers."
msgstr "OpenBLASの開発ヘッダーをインストールします。"

#: ../../getting_started.rst
msgid "macOS"
msgstr "macOS"

#: ../../getting_started.rst:285
msgid "Install dependencies."
msgstr "依存関係をインストールします。"

#: ../../getting_started.rst:287
msgid "To use the `Clang <https://clang.llvm.org/>`__ compiler on macOS, you need to install an extra library for supporting `OpenMP <https://www.openmp.org/>`__.  You can use `brew <https://brew.sh/>`__ to install this and other dependencies."
msgstr "macOSで `Clang <https://clang.llvm.org/>` コンパイラを使用するには、 `OpenMP <https://www.openmp.org/>` をサポートするための追加のライブラリをインストールする必要があります。 `brew <https://brew.sh/>` __を使用して、この依存関係およびその他の依存関係をインストールできます。"

#: ../../getting_started.rst:295
msgid "Then install a BLAS implementation; `OpenBLAS <https://www.openblas.net/>`__ is the default choice."
msgstr "次にBLAS実装をインストールします。`OpenBLAS <https://www.openblas.net/>`__ が一般的な選択です。"

#: ../../getting_started.rst:302
msgid "Next, install ``Xcode Command Line Tools``."
msgstr "次に、``Xcode Command Line Tools`` をインストールします。"

#: ../../getting_started.rst
msgid "Windows"
msgstr "Windows"

#: ../../getting_started.rst:310
msgid "All dependencies are added as part of the Visual C++ compiler installed above, so no additional setup is needed."
msgstr "すべての依存関係は、上にインストールした Visual C++ コンパイラーの一部として追加されるため、追加のセットアップは必要ありません。"

#: ../../getting_started.rst:314
msgid "Qiskit Aer is a high performance simulator framework for quantum circuits. It provides `several backends <apidoc/aer_provider.html#simulator-backends>`__ to achieve different simulation goals."
msgstr "Qiskit Aerは、量子回路のための高性能なシミュレータフレームワークです。様々なシミュレーションの目的を達成するために、いくつかの `バックエンド <apidoc/aer_provider.html#simulator-backends>`__ を提供しています。"

#: ../../getting_started.rst:319
msgid "Build and install qiskit-aer directly"
msgstr "qiskit-aerを直接ビルドしインストールします。"

#: ../../getting_started.rst:321
msgid "If you have pip <19.0.0 installed and your environment doesn't require a custom build, run:"
msgstr "pip 19.0.0 より前がインストールされていて、カスタム・ビルドが不要な環境の場合は、次を実行します:"

#: ../../getting_started.rst:329
msgid "This will both build the binaries and install Aer."
msgstr "これにより、バイナリーのビルドとAerのインストールが行われます。"

#: ../../getting_started.rst:331
msgid "Alternatively, if you have a newer pip installed, or have some custom requirement, you can build a Python wheel manually."
msgstr "別な手法として、より新しいpipがインストールされている場合、もしくはカスタム要件がある環境の場合、手動でPython wheelをビルドすることができます。"

#: ../../getting_started.rst:339
msgid "If you need to set a custom option during the wheel build, refer to :ref:`aer_wheel_build_options`."
msgstr "wheelのビルドにカスタム・オプションを指定する必要がある場合は、:ref:`aer_wheel_build_options`を参照してください。"

#: ../../getting_started.rst:342
msgid "After you build the Python wheel, it will be stored in the ``dist/`` dir in the Aer repository. The exact version will depend"
msgstr "Python wheelは、ビルド後Aerレポジトリの ``dist/`` ディレクトリに保存されます。正確なバージョンは場合に依ります。"

#: ../../getting_started.rst:350
msgid "The exact filename of the output wheel file depends on the current version of Aer under development."
msgstr "作成されたwheelの正確なファイル名は、開発中であるAerの現在のバージョンに依存します。"

#: ../../getting_started.rst:359
msgid "The Aer build system uses `scikit-build <https://scikit-build.readthedocs.io/en/latest/index.html>`__ to run the compilation when building it with the Python interface. It acts as an interface for `setuptools <https://setuptools.readthedocs.io/en/latest/>`__ to call `CMake <https://cmake.org/>`__ and compile the binaries for your local system."
msgstr "Aerビルドシステムは、 `scikit-build <https://scikit-build.readthedocs.io/en/latest/index.html>` __ を使用して、Pythonインターフェイスでビルドするときにコンパイルを実行します。 これは、 `setuptools <https://setuptools.readthedocs.io/en/latest/>` __ のインターフェースとして機能し、 `CMake <https://cmake.org/>` __ を呼び出して、ローカルシステムのバイナリをコンパイルします。"

#: ../../getting_started.rst:364
msgid "Due to the complexity of compiling the binaries, you may need to pass options to a certain part of the build process. The way to pass variables is:"
msgstr "バイナリのコンパイルは複雑なため、ビルド・プロセスの特定の部分にオプションを渡す必要があるかもしれません。 変数を渡す方法は次のとおりです:"

#: ../../getting_started.rst:371
msgid "where the elements within square brackets `[]` are optional, and ``skbuild_opts``, ``cmake_opts``, ``build_tool_opts`` are to be replaced by flags of your choice. A list of *CMake* options is available here: https://cmake.org/cmake/help/v3.6/manual/cmake.1.html#options. For example, you could run something like:"
msgstr "ここで、角括弧`[]`内の要素はオプションで、``skbuild_opts``と ``cmake_opts``、 ``build_tool_opts`` はあなたの選択したフラグに置き換えます。*CMake*のオプションはこちら(https://cmake.org/cmake/help/v3.6/manual/cmake.1.html#options)にあります。例えば、以下のようなコマンドを実行できます:"

#: ../../getting_started.rst:381
msgid "This is passing the flag `-j8` to the underlying build system (which in this case is `Automake <https://www.gnu.org/software/automake/>`__), telling it that you want to build in parallel using 8 processes."
msgstr "これは基礎となるビルド・システム(この場合 `Automake <https://www.gnu.org/software/automake/>`__ ) に `-j8` フラグを渡して、8プロセッサを使って並列にビルドしたいことを伝えています。"

#: ../../getting_started.rst:385
msgid "For example, a common use case for these flags on linux is to specify a specific version of the C++ compiler to use (normally if the default is too old):"
msgstr "例えば、Linuxでのこれらのフラグの一般的な使用例は、使用するC++コンパイラのバージョン(通常デフォルトが古すぎる) を特定のものに指定することがあげられます:"

#: ../../getting_started.rst:393
msgid "which will tell CMake to use the g++-7 command instead of the default g++ when compiling Aer."
msgstr "ここでは、Aerをコンパイルするとき、デフォルトのg++ではなくg++-7コマンドを使うようCMakeに伝えています。"

#: ../../getting_started.rst:396
msgid "Another common use case for this, depending on your environment, is that you may need to specify your platform name and turn off static linking."
msgstr "他の一般的な使用例は、環境によって、プラットフォーム名を指定したり、静的リンクを無効にしたりする必要がある場合が考えられます。"

#: ../../getting_started.rst:404
msgid "Here ``--plat-name`` is a flag to setuptools, to specify the platform name to use in the package metadata, ``-DSTATIC_LINKING`` is a flag for using CMake to disable static linking, and ``-j8`` is a flag for using Automake to use 8 processes for compilation."
msgstr "ここで、``--plat-name`` はsetuptoolsのフラグでパッケージのメタデータ内で使用されるプラットフォーム名を指定します。``-DSTATIC_LINKING`` はCMakeのフラグで静的リンクを無効にするために使用されます。``-j8`` はAutomakeのフラグで、コンパイラに8プロセッサを使用するよう伝えます。"

#: ../../getting_started.rst:409
msgid "A list of common options depending on platform are:"
msgstr "プラットフォームに依存する共通オプションのリストは以下の通りです。"

#: ../../getting_started.rst:412
msgid "Platform"
msgstr "プラットフォーム"

#: ../../getting_started.rst:412
msgid "Tool"
msgstr "ツール"

#: ../../getting_started.rst:412
msgid "Option"
msgstr "オプション"

#: ../../getting_started.rst:412
msgid "Use Case"
msgstr "ユースケース"

#: ../../getting_started.rst:414
msgid "All"
msgstr "すべて"

#: ../../getting_started.rst:414
msgid "Automake"
msgstr "Automake"

#: ../../getting_started.rst:414
msgid "-j"
msgstr "-j"

#: ../../getting_started.rst:414
msgid "Followed by a number, sets the number of processes to use for compilation."
msgstr "後ろに数字が続くこのオプションは、コンパイラが使用するプロセッサの数を指定します。"

#: ../../getting_started.rst:417 ../../getting_started.rst:424
msgid "CMake"
msgstr "CMake"

#: ../../getting_started.rst:417
msgid "-DCMAKE_CXX_COMPILER"
msgstr "-DCMAKE_CXX_COMPILER"

#: ../../getting_started.rst:417
msgid "Used to specify a specific C++ compiler; this is often needed if your default g++ is too old."
msgstr "特定のC++コンパイラーを指定するときに使用します。デフォルトのg++が古すぎる場合は、しばしば必要になります。"

#: ../../getting_started.rst:421 ../../getting_started.rst:424
msgid "OSX"
msgstr "OSX"

#: ../../getting_started.rst:421
msgid "setuptools"
msgstr "セットアップツール"

#: ../../getting_started.rst:421
msgid "--plat-name"
msgstr "--plat-name"

#: ../../getting_started.rst:421
msgid "Used to specify the platform name in the output Python package."
msgstr "出力Pythonパッケージ内のプラットフォーム名を指定する時に使用します。"

#: ../../getting_started.rst:424
msgid "-DSTATIC_LINKING"
msgstr "-DSTATIC_LINKING"

#: ../../getting_started.rst:424
msgid "Used to specify whether or not static linking should be used."
msgstr "静的リンクを使用するか否かを指定する時に使用します。"

#: ../../getting_started.rst:429
msgid "Some of these options are not platform-specific. These particular platforms are listed because they are commonly used in the environment. Refer to the tool documentation for more information."
msgstr "これらのオプションの中にはプラットフォーム固有ではないものがあります。これらの特定のプラットフォームは、環境で一般的に使用されるためリストされています。 詳しくはツールの資料を参照してください。"

#: ../../getting_started.rst:436
msgid "Platform Support"
msgstr "プラットフォーム・サポート"

#: ../../getting_started.rst:438
msgid "Qiskit strives to support as many platforms as possible, but due to limitations in available testing resources and platform availability, not all platforms can be supported. Platform support for Qiskit is broken into 3 tiers with different levels of support for each tier. For platforms outside these, Qiskit is probably still installable, but it's not tested and you will have to build Qiskit (and likely Qiskit's dependencies) from source."
msgstr "Qiskit は可能な限り多くのプラットフォームをサポートするよう努めていますが、利用可能なテストリソースとプラットフォームの可用性に制限があるため、すべてのプラットフォームをサポートできるわけではありません。Qiskit のプラットフォーム・サポートは3つの層に分かれており、各層のサポートレベルは異なります。これら以外のプラットフォームの場合、Qiskit はおそらくまだインストール可能ですが、テストされていないため、ソースから Qiskit（およびおそらく Qiskit の依存関係）を構築する必要があります。"

#: ../../getting_started.rst:445
msgid "Additionally, Qiskit only supports CPython. Running with other Python interpreters isn't currently supported."
msgstr "さらに、 Qiskit は CPython のみをサポートします。他の Python インタプリタとの実行は現在サポートされていません。"

#: ../../getting_started.rst:449
msgid "Tier 1"
msgstr "ティア 1"

#: ../../getting_started.rst:451
msgid "Tier 1 supported platforms are fully tested upstream as part of the development processes to ensure any proposed change will function correctly. Pre-compiled binaries are built, tested, and published to PyPI as part of the release process. These platforms are expected to be installable with just a functioning Python environment as all dependencies are available on these platforms."
msgstr "ティア１がサポートするプラットフォームは、開発プロセスの一環としてアップストリームで完全にテストされ、提案された変更が正しく機能することを確認します。コンパイル済みのバイナリは、リリースプロセスの一部としてビルド、テスト、および PyPI に公開されます。これらのプラットフォームではすべての依存関係が利用可能であるため、これらのプラットフォームは、機能している Python環境だけでインストール可能であることが期待されます。"

#: ../../getting_started.rst:457
msgid "Tier 1 platforms are currently:"
msgstr "ティア１プラットフォームの現在："

#: ../../getting_started.rst:459
msgid "Linux x86_64 (distributions compatible with the `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ packaging specification."
msgstr "Linux x86_64（ `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ パッケージ仕様と互換性のあるディストリビューション）。"

#: ../../getting_started.rst:462
msgid "macOS x86_64 (10.9 or newer)"
msgstr "macOS x86_64 (10.9 以降 )"

#: ../../getting_started.rst:463
msgid "Windows 64 bit"
msgstr "Windows 64ビット"

#: ../../getting_started.rst:466
msgid "Tier 2"
msgstr "ティア２"

#: ../../getting_started.rst:468
msgid "Tier 2 platforms are not tested upstream as part of development process. However, pre-compiled binaries are built, tested, and published to PyPI as part of the release process and these packages can be expected to be installed with just a functioning Python environment."
msgstr "ティア２プラットフォームは、開発プロセスの一部としてアップストリームでテストされていません。ただし、プリコンパイルされたバイナリは、リリースプロセスの一部としてビルド、テスト、および PyPI に公開され、これらのパッケージは、機能している Python環境のみでインストールされることが期待できます。"

#: ../../getting_started.rst:473
msgid "Tier 2 platforms are currently:"
msgstr "ティア２プラットフォームの現在："

#: ../../getting_started.rst:475
msgid "Linux i686 (distributions compatible with the `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ packaging specification) for Python < 3.10"
msgstr "Python < 3.10 向けの Linux i686（ `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ パッケージ仕様と互換性のあるディストリビューション）。"

#: ../../getting_started.rst:478
msgid "Windows 32 bit for Python < 3.10"
msgstr "Python < 3.10 向けの Windows 32ビット"

#: ../../getting_started.rst:479
msgid "Linux aarch64 (distributions compatible with the `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ packaging specification)"
msgstr "Linux aarch64（ `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ パッケージ仕様と互換性のあるディストリビューション）"

#: ../../getting_started.rst:484
msgid "Tier 3"
msgstr "ティア３"

#: ../../getting_started.rst:486
msgid "Tier 3 platforms are not tested upstream as part of the development process.  Pre-compiled binaries are built and published to PyPI as part of the release process, with no testing at all. They may not be installable with just a functioning Python environment and may require a C/C++ compiler or additional programs to build dependencies from source as part of the installation process. Support for these platforms are best effort only."
msgstr "ティア３プラットフォームは、開発プロセスの一部としてアップストリームでテストされていません。コンパイル済みのバイナリは、リリースプロセスの一部としてビルドされ、PyPI に公開されます。テストはまったく行われません。Python環境が機能しているだけではインストールできない場合があり、インストールプロセスの一部としてソースから依存関係を構築するためにC / C ++コンパイラまたは追加のプログラムが必要になる場合があります。これらのプラットフォームのサポートは最善の努力のみです。"

#: ../../getting_started.rst:493
msgid "Tier 3 platforms are currently:"
msgstr "ティア３プラットフォームの現在："

#: ../../getting_started.rst:495
msgid "Linux ppc64le (distributions compatible with the `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ packaging specification)"
msgstr "Linux ppc64le （ `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ パッケージ仕様と互換性のあるディストリビューション）"

#: ../../getting_started.rst:498
msgid "Linux s390x (distributions compatible with the `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ packaging specification)"
msgstr "Linux s390x （ `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ パッケージ仕様と互換性のあるディストリビューション）"

#: ../../getting_started.rst:501
msgid "macOS arm64 (10.15 or newer)"
msgstr "macOS arm64 (10.15 以降)"

#: ../../getting_started.rst:502
msgid "Linux i686 (distributions compatible with the `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ packaging specification) for Python >= 3.10"
msgstr "Python >= 3.10 向けの Linux i686（ `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ パッケージ仕様と互換性のあるディストリビューション）"

#: ../../getting_started.rst:505
msgid "Windows 32 bit for Python >= 3.10"
msgstr "Python >= 3.10 向けの Windows 32ビット版"

#: ../../getting_started.rst:508
msgid "Ready to get going?..."
msgstr "準備はいいですか？..."

