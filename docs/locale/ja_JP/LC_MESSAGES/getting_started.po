msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-09 19:26+0000\n"
"PO-Revision-Date: 2022-02-09 20:47\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/getting_started.po\n"
"X-Crowdin-File-ID: 9536\n"
"Language: ja_JP\n"

#: ../../getting_started.rst:5
msgid "Getting started"
msgstr "はじめに"

#: ../../getting_started.rst:8
msgid "Installation"
msgstr "インストール"

#: ../../getting_started.rst
msgid "Start locally"
msgstr "ローカルで始める"

#: ../../getting_started.rst:12
msgid "Qiskit supports Python 3.6 or later. However, both Python and Qiskit are evolving ecosystems, and sometimes when new releases occur in one or the other, there can be problems with compatibility."
msgstr "QiskitはPython3.6以降をサポートしています。 ただし、PythonとQiskitはどちらもエコシステムを進化させており、どちらか一方で新しいリリースが発生すると、互換性に問題が生じる場合があります。"

#: ../../getting_started.rst:16
msgid "We recommend installing `Anaconda <https://www.anaconda.com/download/>`__, a cross-platform Python distribution for scientific computing. Jupyter, included in Anaconda, is recommended for interacting with Qiskit."
msgstr "科学技術計算用クロスプラットフォームのPythonディストリビューションである `Anaconda <https://www.anaconda.com/download/>`__ をインストールすることをおすすめします。`Qiskit tutorials <https://github.com/Qiskit/qiskit-tutorial>`__ とのやり取りには、Anacondaに含まれるJupyter Notebookをおすすめします。"

#: ../../getting_started.rst:20
msgid "We recommend using Python virtual environments to cleanly separate Qiskit from other applications and improve your experience."
msgstr "Qiskitを他のアプリケーションから明確に分離して、経験をよりよいものにするため、Python仮想環境を使用することをおすすめします。"

#: ../../getting_started.rst:23
msgid "The simplest way to use environments is by using the ``conda`` command, included with Anaconda. A Conda environment allows you to specify a specific version of Python and set of libraries. Open a terminal window in the directory where you want to work."
msgstr "環境を使用するもっともシンプルな方法は、Anacondaに含まれている ``conda`` コマンドを使う方法です。Conda環境では、Pythonの特定のバージョンおよびライブラリを指定することができます。作業したいディレクトリでターミナルウィンドウを開きます。"

#: ../../getting_started.rst:28
msgid "It is preferred that you use Anaconda prompt installed with the Anaconda. All you have to do is create a virtual environment inside Anaconda and activate the environment. These commands can be run in Anaconda prompt irrespective of Windows or Linux machine."
msgstr "Anaconda に同梱されているAnaconda プロンプトを使用することをお勧めします。 ユーザーはAnaconda 内に仮想環境を構築して、その環境をアクティベートする必要があります。 これらのコマンドは、 Windows または linux マシンに関係なく、 Anaconda プロンプトで実行できます。"

#: ../../getting_started.rst:32
msgid "Create a minimal environment with only Python installed in it."
msgstr "Pythonのみをインストールした最小環境を作ります。"

#: ../../getting_started.rst:38
msgid "Activate your new environment."
msgstr "新しい環境をアクティブにします。"

#: ../../getting_started.rst:45
msgid "Next, install the Qiskit package."
msgstr "次に、 Qiskit パッケージをインストールします。"

#: ../../getting_started.rst:51
msgid "If the packages were installed correctly, you can run ``conda list`` to see the active packages in your virtual environment."
msgstr "パッケージが正しくインストールされている場合は、 ``conda list`` を実行して、仮想環境でアクティブなパッケージを確認できます。"

#: ../../getting_started.rst:54
msgid "If you intend to use visualization functionality or Jupyter notebooks it is recommended to install Qiskit with the extra ``visualization`` support:"
msgstr "可視化機能やJupyter notebookを使用する場合は、Qiskitに ``visualization`` 機能を追加してインストールすることをお勧めします。"

#: ../../getting_started.rst:61
msgid "It is worth pointing out that if you're a zsh user (which is the default shell on newer versions of macOS), you'll need to put ``qiskit[visualization]`` in quotes:"
msgstr "zshユーザー（新しいバージョンのmacOSのデフォルトシェル）の場合は、 ``qiskit[visualization]`` を引用符で囲む必要があります。"

#: ../../getting_started.rst
msgid "Start on the cloud"
msgstr "クラウドで始める"

#: ../../getting_started.rst:71
msgid "The following cloud vendors have Qiskit pre-installed in their environments:"
msgstr "以下のクラウドベンダーの環境では、Qiskitがプレインストールされています。"

#: ../../getting_started.rst
msgid "Install from source"
msgstr "ソースからインストールする"

#: ../../getting_started.rst:103
msgid "Installing the elements from source allows you to access the most recently updated version of Qiskit instead of using the version in the Python Package Index (PyPI) repository. This will give you the ability to inspect and extend the latest version of the Qiskit code more efficiently."
msgstr "ソースからエレメントをインストールすることにより、Python Package Index (PyPI) リポジトリのバージョンを使う代わりに、最新のQiskitバージョンにアクセスすることが出来ます。これにより、Qiskit コードの最新版を調査したり、拡張することがより効果的にできるようになります。"

#: ../../getting_started.rst:108
msgid "When installing the elements and components from source, by default their ``development`` version (which corresponds to the ``master`` git branch) will be used, as opposed to the ``stable`` version (which contains the same codebase as the published ``pip`` packages). Since the ``development`` versions of an element or component usually include new features and changes, they generally require using the ``development`` version of the rest of the items as well."
msgstr "ソースからエレメントやコンポーネントをインストールする時には、デフォルトでは、``stable`` バージョン( ``pip`` パッケージとして公開されているコードベースと同じもの) ではなく、 ``development`` バージョン( ``master`` git ブランチに該当) が使われます。 エレメントやコンポーネントの ``development`` バージョンは通常新しい機能や変更が含まれているため、一般的には他の項目についても ``development`` バージョンを利用することが求められています。"

#: ../../getting_started.rst:117
msgid "The Terra and Aer packages both require a compiler to build from source before you can install. Ignis, Aqua, and the IBM Quantum Provider backend do not require a compiler."
msgstr "TerraとAerのパッケージは、インストールする前にソースからビルドするためのコンパイラーが必要です。Ignis、Aqua、および IBM Quantum Provider バックエンドは、コンパイラーを必要としません。"

#: ../../getting_started.rst:121
msgid "Installing elements from source requires the following order of installation to prevent installing versions of elements that may be lower than those desired if the ``pip`` version is behind the source versions:"
msgstr "``pip`` のバージョンがソースバージョンより古い場合に、要求するものよりも古いバージョンをインストールしてしまうことを防ぐため、ソースからエレメントをインストールするには以下の順番で実施します："

#: ../../getting_started.rst:125
msgid ":ref:`qiskit-terra <install-qiskit-terra>`"
msgstr ":ref:`qiskit-terra <install-qiskit-terra>`"

#: ../../getting_started.rst:126
msgid ":ref:`qiskit-aer <install-qiskit-aer>`"
msgstr ":ref:`qiskit-aer <install-qiskit-aer>`"

#: ../../getting_started.rst:127
msgid ":ref:`qiskit-ignis <install-qiskit-ignis>`"
msgstr ":ref:`qiskit-ignis <install-qiskit-ignis>`"

#: ../../getting_started.rst:128
msgid ":ref:`qiskit-ibmq-provider <install-qiskit-ibmq-provider>` (if you want to connect to the IBM Quantum devices or online simulator)"
msgstr ":ref:`qiskit-ibmq-provider <install-qiskit-ibmq-provider>` (IBM Quantum デバイスやオンライン・シミュレーターに接続する場合)"

#: ../../getting_started.rst:132
msgid "To work with several components and elements simultaneously, use the following steps for each element."
msgstr "いくつかのコンポーネントとエレメントで同時に作業したい場合には、各エレメントに対して以下のステップを踏みます。"

#: ../../getting_started.rst:137
msgid "Due to the use of namespace packaging in Python, care must be taken in how you install packages. If you're planning to install any element from source, do not use the ``qiskit`` meta-package. Also, follow this guide and use a separate virtual environment for development. If you do choose to mix an existing installation with your development, refer to https://github.com/pypa/sample-namespace-packages/blob/master/table.md for the set of combinations of installation methods that work together."
msgstr "Pythonの名前空間パッケージを使用しているため、パッケージのインストール方法には注意する必要があります。もしソースからエレメントをインストールすることを考えている場合は、``qiskit`` メタパッケージを使用しないでください。また、このガイドに従って、開発用に別の仮想環境を使用してください。もし、既存のインストールと開発環境を混在させる場合は、https://github.com/pypa/sample-namespace-packages/blob/master/table.md を参照して、連携するインストール方法の組み合わせを確認してください。"

#: ../../getting_started.rst:160
msgid "Installing from source requires that you have a C++ compiler on your system that supports C++11."
msgstr "ソースからインストールするには、お使いのシステム上にC++11をサポートするC++コンパイラが必要です。"

#: ../../getting_started.rst
msgid "Compiler for Linux"
msgstr "Linuxのコンパイラー"

#: ../../getting_started.rst:166
msgid "On most Linux platforms, the necessary GCC compiler is already installed."
msgstr "ほとんどのLinuxプラットフォームには、必要なGCCコンパイラーがインストール済みです。"

#: ../../getting_started.rst
msgid "Compiler for macOS"
msgstr "macOSのコンパイラー"

#: ../../getting_started.rst:170
msgid "If you use macOS, you can install the Clang compiler by installing XCode. Check if you have XCode and Clang installed by opening a terminal window and entering the following."
msgstr "macOSを使用している場合は、XCodeをインストールすることで、Clangのコンパイラーをインストールすることができます。ターミナル・ウィンドウを開き以下のコマンドを入力して、XCodeとClangがイントールされていることを確認します。"

#: ../../getting_started.rst:178
msgid "Install XCode and Clang by using the following command."
msgstr "以下のコマンドでXCodeとClandをインストールします。"

#: ../../getting_started.rst
msgid "Compiler for Windows"
msgstr "Windowsのコンパイラー"

#: ../../getting_started.rst:186
msgid "On Windows, it is easiest to install the Visual C++ compiler from the `Build Tools for Visual Studio 2019 <https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2019>`__. You can instead install Visual Studio version 2015 or 2017, making sure to select the options for installing the C++ compiler."
msgstr "Windowsでは、Visual C++ Compilerを `Build Tools for Visual Studio 2019 <https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2019>`__ からインストールする方法が最も簡単です。その他に Visual Studio 2015 あるいは 2017 をインストールする方法もありますが、その際にはインストール・オプションの C++ compiler を選択することを忘れない様にしてください。"

#: ../../getting_started.rst:192
msgid "Once the compilers are installed, you are ready to install Qiskit Terra."
msgstr "コンパイラーがインストールされたら、Qiskit Terraのイントール準備完了です。"

#: ../../getting_started.rst:194
msgid "Clone the Terra repository."
msgstr "Terraリポジトリーをクローンします。"

#: ../../getting_started.rst:200
msgid "Cloning the repository creates a local folder called ``qiskit-terra``."
msgstr "リポジトリーをクローンすると、``qiskit-terra`` という名前のローカル・フォルダーが作成されます。"

#: ../../getting_started.rst:206
msgid "Install the Python requirements libraries from your ``qiskit-terra`` directory."
msgstr "作成された ``qiskit-terra`` ディレクトリーから、Pythonの必要なライブラリーをインストールします。"

#: ../../getting_started.rst:212
msgid "If you want to run tests or linting checks, install the developer requirements."
msgstr "もし、テストを実行したり文法をチェックしたい場合は、開発者向けライブラリーをインストールします。"

#: ../../getting_started.rst:218
msgid "Install ``qiskit-terra``."
msgstr "``qiskit-terra`` をインストールします。"

#: ../../getting_started.rst:224
msgid "If you want to install it in editable mode, meaning that code changes to the project don't require a reinstall to be applied, you can do this with:"
msgstr "編集可能モード(プロジェクトのコードを変更しても再インストールする必要なし) でインストールする場合は、次の手順を実行します:"

#: ../../getting_started.rst:231
msgid "You can then run the code examples after installing Terra. You can run the example with the following command."
msgstr "Terraのインストール後、サンプル・コードを実行することができます。サンプルを実行するには以下のコマンドを使用します:"

#: ../../getting_started.rst:241
msgid "If you do not intend to install any other components, qiskit-terra will emit a ``RuntimeWarning`` warning that both qiskit-aer and qiskit-ibmq-provider are not installed. This is done because users commonly intend to use the additional elements, but do not realize they are not installed, or that the installation of either Aer or the IBM Quantum Provider failed for some reason. If you wish to suppress these warnings, add::"
msgstr "他のコンポーネントをインストールしない場合、qiskit-terraはqiskit-aerとqiskit-ibmq-providerの両方がインストールされていないことを示す ``RuntimeWarning`` を発します。これは追加要素を使用するつもりだが、インストールされていないことに気づかなかったり、AerやIBM Quantum Providerのインストールが何らかの理由でインストールが失敗しているために警告を発します。これらの警告を抑制したい場合は、以下を追加してください:"

#: ../../getting_started.rst:253
msgid "before any ``qiskit`` imports in your code. This will suppress the warning about the missing qiskit-aer and qiskit-ibmq-provider, but will continue to display any other warnings from qiskit or other packages."
msgstr "コード内にて、``qiskit`` をまず最初にインポートするように指定します。 これにより、欠落しているqiskit-aerおよびqiskit-ibmq-providerに関する警告が抑制されますが、qiskitまたは他のパッケージからのその他の警告は継続して表示されます。"

#: ../../getting_started.rst:263
msgid "Clone the Aer repository."
msgstr "Aerリポジトリをクローンします。"

#: ../../getting_started.rst:269
msgid "Install build requirements."
msgstr "ビルドの必要要件をインストールします。"

#: ../../getting_started.rst:275
msgid "After this, the steps to install Aer depend on which operating system you are using. Since Aer is a compiled C++ program with a Python interface, there are non-Python dependencies for building the Aer binary which can't be installed universally depending on operating system."
msgstr "この後、Aerをインストールする手順は、使用しているオペレーティングシステムによって異なります。 AerはPythonインターフェイスを備えたコンパイル済みのC++プログラムであるため、オペレーティングシステムによっては、普遍的にインストールできないAerバイナリを構築するためのPython以外の依存関係があります。"

#: ../../getting_started.rst:283 ../../getting_started.rst:347
msgid "Install compiler requirements."
msgstr "コンパイラーの要件をインストールします。"

#: ../../getting_started.rst:285
msgid "Building Aer requires a C++ compiler and development headers."
msgstr "Aerの構築には、C++コンパイラーと開発ヘッダーが必要です。"

#: ../../getting_started.rst:287 ../../getting_started.rst:302
msgid "If you're using Fedora or an equivalent Linux distribution, install using:"
msgstr "Fedoraまたは同等のLinuxディストリビューションを使用している場合は、以下の方法でインストールします。"

#: ../../getting_started.rst:294 ../../getting_started.rst:309
msgid "For Ubuntu/Debian install it using:"
msgstr "Ubuntu/Debianの場合は、以下の方法でインストールします。"

#: ../../getting_started.rst:300
msgid "Install OpenBLAS development headers."
msgstr "OpenBLASの開発ヘッダーをインストールします。"

#: ../../getting_started.rst:318
msgid "Install dependencies."
msgstr "依存関係をインストールします。"

#: ../../getting_started.rst:320
msgid "To use the `Clang <https://clang.llvm.org/>`__ compiler on macOS, you need to install an extra library for supporting `OpenMP <https://www.openmp.org/>`__.  You can use `brew <https://brew.sh/>`__ to install this and other dependencies."
msgstr "macOSで `Clang <https://clang.llvm.org/>`__ コンパイラーを使用するには、`OpenMP <https://www.openmp.org/>`__ をサポートするための追加ライブラリーをインストールする必要があります。`brew <https://brew.sh/>`__ を使って、このライブラリーとその他の依存関係をインストールすることができます。"

#: ../../getting_started.rst:328
msgid "Then install a BLAS implementation; `OpenBLAS <https://www.openblas.net/>`__ is the default choice."
msgstr "そして、BLASの実装をインストールします。`OpenBLAS <https://www.openblas.net/>`__ がデフォルトの選択です。"

#: ../../getting_started.rst:335
msgid "Next, install ``Xcode Command Line Tools``."
msgstr "次に、``Xcode Command Line Tools`` をインストールします。"

#: ../../getting_started.rst:343
msgid "On Windows you need to use `Anaconda3 <https://www.anaconda.com/distribution/#windows>`__ or `Miniconda3 <https://docs.conda.io/en/latest/miniconda.html>`__ to install all the dependencies."
msgstr "Windowsでは、`Anaconda3 <https://www.anaconda.com/distribution/#windows>`__ または `Miniconda3 <https://docs.conda.io/en/latest/miniconda.html>`__ を使用して、すべての依存関係をインストールする必要があります。"

#: ../../getting_started.rst:353
msgid "Qiskit Aer is a high performance simulator framework for quantum circuits. It provides `several backends <apidoc/aer_provider.html#simulator-backends>`__ to achieve different simulation goals."
msgstr "Qiskit Aerは、量子回路のための高性能なシミュレータフレームワークです。様々なシミュレーションの目的を達成するために、いくつかの `バックエンド <apidoc/aer_provider.html#simulator-backends>`__ を提供しています。"

#: ../../getting_started.rst:362
msgid "Build and install qiskit-aer directly"
msgstr "qiskit-aerを直接ビルドしてインストールする"

#: ../../getting_started.rst:364
msgid "If you have pip <19.0.0 installed and your environment doesn't require a custom build, run:"
msgstr "pip <19.0.0がインストールされていて、カスタムビルドを必要としない環境であれば、以下を実行してください。"

#: ../../getting_started.rst:372
msgid "This will both build the binaries and install Aer."
msgstr "これにより、バイナリーのビルドとAerのインストールが行われます。"

#: ../../getting_started.rst:374
msgid "Alternatively, if you have a newer pip installed, or have some custom requirement, you can build a Python wheel manually."
msgstr "また、より新しいpipがインストールされている場合や、何らかのカスタム要件がある場合には、手動でPythonホイールを構築することもできます。"

#: ../../getting_started.rst:382
msgid "If you need to set a custom option during the wheel build, refer to :ref:`aer_wheel_build_options`."
msgstr "ホイールビルド中にカスタムオプションを設定する必要がある場合は、 :ref:`aer_wheel_build_options` を参照してください。"

#: ../../getting_started.rst:385
msgid "After you build the Python wheel, it will be stored in the ``dist/`` dir in the Aer repository. The exact version will depend"
msgstr "Python ホイールをビルドすると、Aer リポジトリの dist/ dir に格納されます。正確なバージョンは、以下に依存します。"

#: ../../getting_started.rst:393
msgid "The exact filename of the output wheel file depends on the current version of Aer under development."
msgstr "出力されるホイールファイルの正確なファイル名は、現在開発中のAerのバージョンによって異なります。"

#: ../../getting_started.rst:402
msgid "The Aer build system uses `scikit-build <https://scikit-build.readthedocs.io/en/latest/index.html>`__ to run the compilation when building it with the Python interface. It acts as an interface for `setuptools <https://setuptools.readthedocs.io/en/latest/>`__ to call `CMake <https://cmake.org/>`__ and compile the binaries for your local system."
msgstr "Aerのビルドシステムは、Pythonインターフェイスでビルドする際に、 `scikit-build <https://scikit-build.readthedocs.io/en/latest/index.html>`__ を使用してコンパイルを実行します。これは、 `CMakeCMake`setuptools <https://setuptools.readthedocs.io/en/latest/>`__  が `CMake <https://cmake.org/>`__ を呼び出し、ローカルシステム用にバイナリーをコンパイルするためのインターフェースとして機能します。"

#: ../../getting_started.rst:407
msgid "Due to the complexity of compiling the binaries, you may need to pass options to a certain part of the build process. The way to pass variables is:"
msgstr "バイナリーのコンパイルが複雑なため、ビルドプロセスの特定の部分にオプションを渡す必要がある場合があります。変数を渡す方法は、"

#: ../../getting_started.rst:414
msgid "where the elements within square brackets `[]` are optional, and ``skbuild_opts``, ``cmake_opts``, ``build_tool_opts`` are to be replaced by flags of your choice. A list of *CMake* options is available here: https://cmake.org/cmake/help/v3.6/manual/cmake.1.html#options. For example, you could run something like:"
msgstr "ここで、角括弧 [] 内の要素はオプションであり、 ``skbuild_opts`` 、 ``cmake_opts`` 、 ``build_tool_opts`` は任意のフラグに置き換えられます。 *CMake* のオプションのリストは https://cmake.org/cmake/help/v3.6/manual/cmake.1.html#options にあります。例えば、次のように実行することができます。"

#: ../../getting_started.rst:424
msgid "This is passing the flag `-j8` to the underlying build system (which in this case is `Automake <https://www.gnu.org/software/automake/>`__), telling it that you want to build in parallel using 8 processes."
msgstr "これは、基礎となるビルドシステム（ここでは `Automake <https://www.gnu.org/software/automake/>`__ ）に `-j8` というフラグを渡し、8つのプロセスを使って並行してビルドしたいことを伝えるものです。"

#: ../../getting_started.rst:428
msgid "For example, a common use case for these flags on linux is to specify a specific version of the C++ compiler to use (normally if the default is too old):"
msgstr "例えば、LINUXにおけるこれらのフラグの一般的な使用例は、使用するC++コンパイラーの特定のバージョンを指定することです（通常、デフォルトでは古すぎる場合）。"

#: ../../getting_started.rst:436
msgid "which will tell CMake to use the g++-7 command instead of the default g++ when compiling Aer."
msgstr "これはCMakeに、Aerのコンパイル時にデフォルトのg++ではなくg++-7コマンドを使用するように指示するものです。"

#: ../../getting_started.rst:439
msgid "Another common use case for this, depending on your environment, is that you may need to specify your platform name and turn off static linking."
msgstr "また、環境にもよりますが、プラットフォーム名を指定して静的リンクをオフにするというのもよくある使用例です。"

#: ../../getting_started.rst:447
msgid "Here ``--plat-name`` is a flag to setuptools, to specify the platform name to use in the package metadata, ``-DSTATIC_LINKING`` is a flag for using CMake to disable static linking, and ``-j8`` is a flag for using Automake to use 8 processes for compilation."
msgstr "ここで ``--plat-name`` は setuptools のフラグで、パッケージのメタデータで使用するプラットフォーム名を指定します。 ``-DSTATIC_LINKING`` は CMake を使用してスタティックリンクを無効にするためのフラグで、 ``-j8`` は Automake を使用してコンパイルに 8 プロセスを使用するためのフラグです。"

#: ../../getting_started.rst:452
msgid "A list of common options depending on platform are:"
msgstr "プラットフォームに応じた一般的なオプションのリストは以下の通りです。"

#: ../../getting_started.rst:455
msgid "Platform"
msgstr "プラットフォーム"

#: ../../getting_started.rst:455
msgid "Tool"
msgstr "ツール"

#: ../../getting_started.rst:455
msgid "Option"
msgstr "オプション"

#: ../../getting_started.rst:455
msgid "Use Case"
msgstr "ユースケース"

#: ../../getting_started.rst:457
msgid "All"
msgstr "全て"

#: ../../getting_started.rst:457
msgid "Automake"
msgstr "Automake"

#: ../../getting_started.rst:457
msgid "-j"
msgstr "-j"

#: ../../getting_started.rst:457
msgid "Followed by a number, sets the number of processes to use for compilation."
msgstr "後ろに数字が続くこのオプションは、コンパイラが使用するプロセッサの数を指定します。"

#: ../../getting_started.rst:460
msgid "Linux"
msgstr "Linux"

#: ../../getting_started.rst:460 ../../getting_started.rst:467
msgid "CMake"
msgstr "CMake"

#: ../../getting_started.rst:460
msgid "-DCMAKE_CXX_COMPILER"
msgstr "-DCMAKE_CXX_COMPILER"

#: ../../getting_started.rst:460
msgid "Used to specify a specific C++ compiler; this is often needed if your default g++ is too old."
msgstr "特定のC++コンパイラを指定するときに使用します。デフォルトのg++が古すぎる場合は、しばしば必要になります。"

#: ../../getting_started.rst:464 ../../getting_started.rst:467
msgid "OSX"
msgstr "OSX"

#: ../../getting_started.rst:464
msgid "setuptools"
msgstr "setuptools"

#: ../../getting_started.rst:464
msgid "--plat-name"
msgstr "--plat-name"

#: ../../getting_started.rst:464
msgid "Used to specify the platform name in the output Python package."
msgstr "出力Pythonパッケージ内のプラットフォーム名を指定する時に使用します。"

#: ../../getting_started.rst:467
msgid "-DSTATIC_LINKING"
msgstr "-DSTATIC_LINKING"

#: ../../getting_started.rst:467
msgid "Used to specify whether or not static linking should be used."
msgstr "静的リンクを使用するか否かを指定する時に使用します。"

#: ../../getting_started.rst:472
msgid "Some of these options are not platform-specific. These particular platforms are listed because they are commonly used in the environment. Refer to the tool documentation for more information."
msgstr "これらのオプションの中には、プラットフォームに依存しないものもあります。これらの特定のプラットフォームがリストアップされているのは、その環境でよく使われているからです。詳細については、ツールのドキュメントを参照してください。"

#: ../../getting_started.rst:482
msgid "Clone the Ignis repository."
msgstr "Ignisリポジトリーをクローンします。"

#: ../../getting_started.rst:488
msgid "Cloning the repository creates a local directory called ``qiskit-ignis``."
msgstr "リポジトリーをクローンすると、 ``qiskit-ignis`` という名前のローカル・フォルダーが作成されます。"

#: ../../getting_started.rst:494
msgid "If you want to run tests or linting checks, install the developer requirements. This is not required to install or use the qiskit-ignis package when installing from source."
msgstr "テストや文法チェックを実行したい場合は、開発者向けの要件をインストールしてください。ソースからインストールする場合、qiskit-ignisパッケージのインストールおよび使用の際には必要ありません。"

#: ../../getting_started.rst:502
msgid "Install Ignis."
msgstr "Ignisをインストールします。"

#: ../../getting_started.rst:508 ../../getting_started.rst:547
msgid "If you want to install it in editable mode, meaning that code changes to the project don't require a reinstall to be applied:"
msgstr "編集可能モード(プロジェクトのコードを変更しても再インストールする必要なし) でインストールする場合:"

#: ../../getting_started.rst:521
msgid "Clone the qiskit-ibmq-provider repository."
msgstr "qiskit-ibmq-providerリポジトリーをクローンします。"

#: ../../getting_started.rst:527
msgid "Cloning the repository creates a local directory called ``qiskit-ibmq-provider``."
msgstr "リポジトリーをクローンすると、 ``qiskit-ibmq-provider`` という名前のローカル・フォルダーが作成されます。"

#: ../../getting_started.rst:533
msgid "If you want to run tests or linting checks, install the developer requirements. This is not required to install or use the qiskit-ibmq-provider package when installing from source."
msgstr "テストやリンティングチェックを実行したい場合は、開発者向けの要件をインストールしてください。ソースからインストールする場合、qiskit-ibmq-providerパッケージのインストールおよび使用の際には必要ありません。"

#: ../../getting_started.rst:541
msgid "Install qiskit-ibmq-provider."
msgstr "qiskit-ibmq-providerをインストールします。"

#: ../../getting_started.rst:555
msgid "Platform Support"
msgstr "プラットフォーム・サポート"

#: ../../getting_started.rst:557
msgid "Qiskit strives to support as many platforms as possible, but due to limitations in available testing resources and platform availability, not all platforms can be supported. Platform support for Qiskit is broken into 3 tiers with different levels of support for each tier. For platforms outside these, Qiskit is probably still installable, but it's not tested and you will have to build Qiskit (and likely Qiskit's dependencies) from source."
msgstr "Qiskit は可能な限り多くのプラットフォームをサポートするよう努めていますが、利用可能なテストリソースとプラットフォームの可用性に制限があるため、すべてのプラットフォームをサポートできるわけではありません。Qiskit のプラットフォーム・サポートは3つの層に分かれており、各層のサポートレベルは異なります。これら以外のプラットフォームの場合、Qiskit はおそらくまだインストール可能ですが、テストされていないため、ソースから Qiskit（およびおそらく Qiskit の依存関係）を構築する必要があります。"

#: ../../getting_started.rst:564
msgid "Additionally, Qiskit only supports CPython. Running with other Python interpreters isn't currently supported."
msgstr "さらに、 Qiskit は CPython のみをサポートします。他の Python インタプリタとの実行は現在サポートされていません。"

#: ../../getting_started.rst:568
msgid "Tier 1"
msgstr "ティア 1"

#: ../../getting_started.rst:570
msgid "Tier 1 supported platforms are fully tested upstream as part of the development processes to ensure any proposed change will function correctly. Pre-compiled binaries are built, tested, and published to PyPI as part of the release process. These platforms are expected to be installable with just a functioning Python environment as all dependencies are available on these platforms."
msgstr "ティア１がサポートするプラットフォームは、開発プロセスの一環としてアップストリームで完全にテストされ、提案された変更が正しく機能することを確認します。コンパイル済みのバイナリは、リリースプロセスの一部としてビルド、テスト、および PyPI に公開されます。これらのプラットフォームではすべての依存関係が利用可能であるため、これらのプラットフォームは、機能している Python環境だけでインストール可能であることが期待されます。"

#: ../../getting_started.rst:576
msgid "Tier 1 platforms are currently:"
msgstr "ティア１プラットフォームの現在："

#: ../../getting_started.rst:578
msgid "Linux x86_64 (distributions compatible with the `manylinux 2010 <https://www.python.org/dev/peps/pep-0571/>`__ packaging specification for Python < 3.10 and `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ for Python >= 3.10)"
msgstr ""

#: ../../getting_started.rst:583
msgid "macOS x86_64 (10.9 or newer)"
msgstr "macOS x86_64 (10.9 以降 )"

#: ../../getting_started.rst:584
msgid "Windows 64 bit"
msgstr "Windows 64ビット"

#: ../../getting_started.rst:587
msgid "Tier 2"
msgstr "ティア２"

#: ../../getting_started.rst:589
msgid "Tier 2 platforms are not tested upstream as part of development process. However, pre-compiled binaries are built, tested, and published to PyPI as part of the release process and these packages can be expected to be installed with just a functioning Python environment."
msgstr "ティア２プラットフォームは、開発プロセスの一部としてアップストリームでテストされていません。ただし、プリコンパイルされたバイナリは、リリースプロセスの一部としてビルド、テスト、および PyPI に公開され、これらのパッケージは、機能している Python環境のみでインストールされることが期待できます。"

#: ../../getting_started.rst:594
msgid "Tier 2 platforms are currently:"
msgstr "ティア２プラットフォームの現在："

#: ../../getting_started.rst:596
msgid "Linux i686 (distributions compatible with the `manylinux 2010 <https://www.python.org/dev/peps/pep-0571/>`__ packaging specification) for Python < 3.10"
msgstr "Python < 3.10 向けの Linux i686 （ `manylinux 2010 <https://www.python.org/dev/peps/pep-0571/>`__ パッケージ仕様と互換性のあるディストリビューション）"

#: ../../getting_started.rst:599
msgid "Windows 32 bit for Python < 3.10"
msgstr "Python < 3.10 向けの Windows 32ビット"

#: ../../getting_started.rst:600
msgid "Linux aarch64 (distributions compatible with the `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ packaging specification)"
msgstr "Linux aarch64（ `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ パッケージ仕様と互換性のあるディストリビューション）"

#: ../../getting_started.rst:605
msgid "Tier 3"
msgstr "ティア３"

#: ../../getting_started.rst:607
msgid "Tier 3 platforms are not tested upstream as part of the development process.  Pre-compiled binaries are built and published to PyPI as part of the release process, with no testing at all. They may not be installable with just a functioning Python environment and may require a C/C++ compiler or additional programs to build dependencies from source as part of the installation process. Support for these platforms are best effort only."
msgstr "ティア３プラットフォームは、開発プロセスの一部としてアップストリームでテストされていません。コンパイル済みのバイナリは、リリースプロセスの一部としてビルドされ、PyPI に公開されます。テストはまったく行われません。Python環境が機能しているだけではインストールできない場合があり、インストールプロセスの一部としてソースから依存関係を構築するためにC / C ++コンパイラまたは追加のプログラムが必要になる場合があります。これらのプラットフォームのサポートは最善の努力のみです。"

#: ../../getting_started.rst:614
msgid "Tier 3 platforms are currently:"
msgstr "ティア３プラットフォームの現在："

#: ../../getting_started.rst:616
msgid "Linux i686 (distributions compatible with the `manylinux 2014 <https://www.python.org/dev/peps/pep-0599/>`__ packaging specification) for Python >= 3.10"
msgstr ""

#: ../../getting_started.rst:619
msgid "Windows 32bit for Python >= 3.10"
msgstr "Python >= 3.10 向けの Windows 32ビット"

#: ../../getting_started.rst:620
msgid "macOS arm64 (10.15 or newer)"
msgstr "macOS arm64 (10.15 以降)"

#: ../../getting_started.rst:623
msgid "Ready to get going?..."
msgstr "準備はいいですか？..."

