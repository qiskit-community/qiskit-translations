msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-29 15:27+0000\n"
"PO-Revision-Date: 2021-06-30 01:36\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/contributing_to_qiskit.po\n"
"X-Crowdin-File-ID: 9532\n"
"Language: ja_JP\n"

#: ../../contributing_to_qiskit.rst:4
msgid "Contributing to Qiskit"
msgstr ""

#: ../../contributing_to_qiskit.rst:6
msgid "Qiskit is an open-source project committed to bringing quantum computing to people of all backgrounds. This page describes how you can join the Qiskit community in this goal."
msgstr ""

#: ../../contributing_to_qiskit.rst:14
msgid "Where Things Are"
msgstr ""

#: ../../contributing_to_qiskit.rst:16
msgid "The code for Qiskit is located in the `Qiskit GitHub organization <https://github.com/Qiskit>`__, where you can find the individual projects that make up Qiskit, including"
msgstr ""

#: ../../contributing_to_qiskit.rst:19
msgid "`Qiskit Terra <https://github.com/Qiskit/qiskit-terra>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:20
msgid "`Qiskit Aer <https://github.com/Qiskit/qiskit-aer>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:21
msgid "`Qiskit Ignis <https://github.com/Qiskit/qiskit-ignis>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:22
msgid "`Qiskit Aqua <https://github.com/Qiskit/qiskit-aqua>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:23
msgid "`Qiskit IBMQ Provider <https://github.com/Qiskit/qiskit-ibmq-provider>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:24
msgid "`Qiskit Tutorials <https://github.com/Qiskit/qiskit-tutorials>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:25
msgid "`Qiskit API Documentation <https://github.com/Qiskit/qiskit/tree/master/docs>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:30
msgid "Getting Started"
msgstr ""

#: ../../contributing_to_qiskit.rst:32
msgid "Learn how members of the Qiskit community"
msgstr ""

#: ../../contributing_to_qiskit.rst:34
msgid "`Relate to one another <https://github.com/Qiskit/qiskit/blob/master/CODE_OF_CONDUCT.md>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:35
msgid "`Discuss ideas <https://qiskit.slack.com/>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:36
msgid "`Get help when we're stuck <https://quantumcomputing.stackexchange.com/questions/tagged/qiskit>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:37
msgid "`Stay informed of news in the community <https://medium.com/qiskit>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:38
msgid "`Keep a consistent style <https://www.python.org/dev/peps/pep-0008>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:39
msgid ":ref:`Build Qiskit packages from source <install_install_from_source_label>`"
msgstr ""

#: ../../contributing_to_qiskit.rst:45
msgid "Reporting Bugs and Requesting Enhancements"
msgstr ""

#: ../../contributing_to_qiskit.rst:47
msgid "When you encounter a problem, please open an issue in the appropriate element's issue tracker:"
msgstr ""

#: ../../contributing_to_qiskit.rst:52 ../../contributing_to_qiskit.rst:141
msgid "Element"
msgstr ""

#: ../../contributing_to_qiskit.rst:52
msgid "Issue Tracker"
msgstr ""

#: ../../contributing_to_qiskit.rst:54 ../../contributing_to_qiskit.rst:143
msgid "qiskit-terra"
msgstr ""

#: ../../contributing_to_qiskit.rst:54
msgid "https://github.com/Qiskit/qiskit-terra/issues"
msgstr ""

#: ../../contributing_to_qiskit.rst:55 ../../contributing_to_qiskit.rst:144
msgid "qiskit-aer"
msgstr ""

#: ../../contributing_to_qiskit.rst:55
msgid "https://github.com/Qiskit/qiskit-aer/issues"
msgstr ""

#: ../../contributing_to_qiskit.rst:56 ../../contributing_to_qiskit.rst:145
msgid "qiskit-ignis"
msgstr ""

#: ../../contributing_to_qiskit.rst:56
msgid "https://github.com/Qiskit/qiskit-ignis/issues"
msgstr ""

#: ../../contributing_to_qiskit.rst:57 ../../contributing_to_qiskit.rst:146
msgid "qiskit-aqua"
msgstr ""

#: ../../contributing_to_qiskit.rst:57
msgid "https://github.com/Qiskit/qiskit-aqua/issues"
msgstr ""

#: ../../contributing_to_qiskit.rst:58 ../../contributing_to_qiskit.rst:147
msgid "Docs or Qiskit Meta-package"
msgstr ""

#: ../../contributing_to_qiskit.rst:58
msgid "https://github.com/Qiskit/qiskit/issues"
msgstr ""

#: ../../contributing_to_qiskit.rst:61
msgid "If you have an idea for a new feature, please open an **Enhancement** issue in the appropriate element's issue tracker. Opening an issue starts a discussion with the team about your idea, how it fits in with the project, how it can be implemented, etc."
msgstr ""

#: ../../contributing_to_qiskit.rst:69
msgid "Contributing Code"
msgstr ""

#: ../../contributing_to_qiskit.rst:74
msgid "Style Guide"
msgstr ""

#: ../../contributing_to_qiskit.rst:76
msgid "To enforce a consistent code style in the project, we use `Pylint <https://www.pylint.org>`__ and `pycodesytle <https://pycodestyle.readthedocs.io/en/latest/>`__ to verify that code contributions conform to and respect the project's style guide. To verify that your changes conform to the style guide, run: ``tox -elint``"
msgstr ""

#: ../../contributing_to_qiskit.rst:85
msgid "Contributor License Agreement"
msgstr ""

#: ../../contributing_to_qiskit.rst:87
msgid "Before you can submit any code, all contributors must sign a contributor license agreement (CLA). By signing a CLA, you're attesting that you are the author of the contribution, and that you're freely contributing it under the terms of the Apache-2.0 license."
msgstr ""

#: ../../contributing_to_qiskit.rst:92
msgid "When you contribute to the Qiskit project with a new pull request, a bot will evaluate whether you have signed the CLA. If required, the bot will comment on the pull request, including a link to accept the agreement. The `individual CLA <https://qiskit.org/license/qiskit-cla.pdf>`__ document is available for review as a PDF."
msgstr ""

#: ../../contributing_to_qiskit.rst:99
msgid "If your contribution is part of your employment or your contribution is the property of your employer, then you will more than likely need to sign a `corporate CLA <https://qiskit.org/license/qiskit-corporate-cla.pdf>`__ too and email it to us at <qiskit@us.ibm.com>."
msgstr ""

#: ../../contributing_to_qiskit.rst:107 ../../contributing_to_qiskit.rst:141
msgid "Pull Requests"
msgstr ""

#: ../../contributing_to_qiskit.rst:109
msgid "We use `GitHub pull requests <https://help.github.com/articles/about-pull-requests>`__ to accept contributions."
msgstr ""

#: ../../contributing_to_qiskit.rst:113
msgid "While not required, opening a new issue about the bug you're fixing or the feature you're working on before you open a pull request is an important step in starting a discussion with the community about your work. The issue gives us a place to talk about the idea and how we can work together to implement it in the code. It also lets the community know what you're working on, and if you need help, you can reference the issue when discussing it with other community and team members."
msgstr ""

#: ../../contributing_to_qiskit.rst:121
msgid "If you've written some code but need help finishing it, want to get initial feedback on it prior to finishing it, or want to share it and discuss prior to finishing the implementation, you can open a *Work in Progress* pull request. When you create the pull request, prepend the title with the **\\[WIP\\]** tag (for Work In Progress). This will indicate to reviewers that the code in the PR isn't in its final state and will change. It also means that we will not merge the commit until it is finished. You or a reviewer can remove the [WIP] tag when the code is ready to be fully reviewed for merging."
msgstr ""

#: ../../contributing_to_qiskit.rst:133
msgid "Code Review"
msgstr ""

#: ../../contributing_to_qiskit.rst:135
msgid "Code review is done in the open and is open to anyone. While only maintainers have access to merge commits, community feedback on pull requests is extremely valuable. It is also a good mechanism to learn about the code base. You can view a list of all open pull requests here:"
msgstr ""

#: ../../contributing_to_qiskit.rst:143
msgid "https://github.com/Qiskit/qiskit-terra/pulls"
msgstr ""

#: ../../contributing_to_qiskit.rst:144
msgid "https://github.com/Qiskit/qiskit-aer/pulls"
msgstr ""

#: ../../contributing_to_qiskit.rst:145
msgid "https://github.com/Qiskit/qiskit-ignis/pulls"
msgstr ""

#: ../../contributing_to_qiskit.rst:146
msgid "https://github.com/Qiskit/qiskit-aqua/pulls"
msgstr "https://github.com/Qiskit/qiskit-aqua/pulls"

#: ../../contributing_to_qiskit.rst:147
msgid "https://github.com/Qiskit/qiskit/pulls"
msgstr "https://github.com/Qiskit/qiskit/pulls"

#: ../../contributing_to_qiskit.rst:154
msgid "Commit Messages"
msgstr "コミットメッセージ"

#: ../../contributing_to_qiskit.rst:156
msgid "The content of the commit message describing a change is just as important as the change itself. The commit message provides the context for not only code review but also the change history in the git log. A detailed commit message will make it easier for your code to be reviewed, and will also provide context to the change when someone looks at it in the future. When writing a commit message, remember these important details:"
msgstr "変更を説明するコミットメッセージの内容は、変更自体と同じくらい重要です。 コミットメッセージは、コードレビューだけでなく、gitログの変更履歴の前後関係も提供します。 詳細なコミットメッセージによって、コードのレビューが容易になり、将来誰かが変更を確認したときに変更の背景も分かります。 コミットメッセージを書くときは、次の重要な詳細を覚えておいてください。"

#: ../../contributing_to_qiskit.rst:169
msgid "Do not assume the reviewer understands what the original problem was."
msgstr "レビュアーが元の問題が何であるかを理解していると思い込まないでください。"

#: ../../contributing_to_qiskit.rst:164
msgid "When reading an issue, after a number of back & forth comments, it is often clear what the root cause problem is. The commit message should have a clear statement as to what the original problem is. The bug is merely interesting historical background on *how* the problem was identified. It should be possible to review a proposed patch for correctness from the commit message, without needing to read the bug ticket."
msgstr "多くの前後のコメントの後にイシューを読むと、しばしば根本的な原因の問題が何か明確になります。 コミットメッセージには、元の問題が何であるかを明確に記載する必要があります。 バグは、問題の特定方法に関する興味深い歴史的背景にすぎません。 バグチケットを読む必要なく、コミットメッセージから提案されたパッチの正確性をレビューすることが可能であるべきです。"

#: ../../contributing_to_qiskit.rst:174
msgid "Do not assume the code is self-evident/self-documenting."
msgstr "コードが自明/自己文書化されていると想定しないでください。"

#: ../../contributing_to_qiskit.rst:172
msgid "What is self-evident to one person, might not be clear to another person. Always document what the original problem was and how it is being fixed, for any change except the most obvious typos, or whitespace-only commits."
msgstr "ある人にとって自明なことは、他の人にとっては明らかではないかもしれません。 最も明白なタイプミスまたは空白のみのコミットを除くすべての変更について、元の問題が何であったか、どのように修正されているかを常に文書化します。"

#: ../../contributing_to_qiskit.rst:180
msgid "Describe why a change is being made."
msgstr "変更が行われている理由を説明してください。"

#: ../../contributing_to_qiskit.rst:177
msgid "A common mistake is only to document how the code has been written, without describing *why* the developer chose to do it that way. Certainly, you should describe the overall code structure, particularly for large changes, but more importantly, be sure to describe the intent/motivation behind the changes."
msgstr "よくある間違いは、開発者がそのように選択した理由を説明せずに、コードの記述方法を文書化することだけです。 確かに、特に大規模な変更の場合は、全体的なコード構造を記述する必要がありますが、さらに重要なことは、変更の背後にある意図/動機を必ず記述してください。"

#: ../../contributing_to_qiskit.rst:185
msgid "Read the commit message to see if it hints at improved code structure."
msgstr "コミットメッセージを読んで、コード構造の改善を示唆しているかどうかを確認します。"

#: ../../contributing_to_qiskit.rst:183
msgid "Often when describing a large commit message, it becomes obvious that a commit should have been split into two or more parts. Don't be afraid to go back and rebase the change to split it up into separate pull requests."
msgstr "多くの場合、大きなコミットメッセージを記述するとき、コミットが2つ以上の部分に分割されるべきであることが明らかになります。 戻って変更をリベースし、それを個別のプルリクエストに分割することを恐れないでください。"

#: ../../contributing_to_qiskit.rst:192
msgid "Ensure sufficient information to decide whether to review."
msgstr "レビューするかどうかを決定するのに十分な情報を確保します。"

#: ../../contributing_to_qiskit.rst:188
msgid "When GitHub sends out email alerts for new pull request submissions, there is minimal information included - usually just the commit message and the list of files changes. Because of the high volume of patches, a commit message must contain sufficient information for potential reviewers to find the patch that they need to review."
msgstr "Githubが新しいプルリクエストに対して送信するメールアラートには、最小限の情報しか含まれません。通常は、コミットメッセージと更新ファイルのリストだけです。 パッチの量が多いため、コミットメッセージにはレビュー担当者がレビューする必要のあるパッチを見つけるのに十分な情報が含まれている必要があります。"

#: ../../contributing_to_qiskit.rst:203
msgid "The first commit line is the most important."
msgstr "最初のコミット行が最も重要です。"

#: ../../contributing_to_qiskit.rst:195
msgid "In Git commits, the first line of the commit message has special significance. It is used as the default pull request title, email notification subject line, git annotate messages, gitk viewer annotations, merge commit messages, and many more places where space is at a premium. As well as summarizing the change itself, it should take care to detail what part of the code is affected."
msgstr "Gitコミットでは、コミットメッセージの最初の行に特別な意味があります。 デフォルトのプルリクエストタイトル、電子メール通知の件名、gitアノテーションメッセージ、gitkビューアーアノテーション、マージコミットメッセージ、およびスペースが貴重なその他の多くの場所として使用されます。 変更自体を要約するだけでなく、コードのどの部分が影響を受けるかを詳細に注意する必要があります。"

#: ../../contributing_to_qiskit.rst:201
msgid "In addition, the first line of the commit message becomes an entry in the generated changelog if the PR is tagged as being included in the changelog. It is critically important that you write clear and succinct summary lines."
msgstr "さらに、PRが変更ログに含まれているとタグ付けされている場合、コミットメッセージの最初の行は、生成された変更ログのエントリになります。 明確で簡潔な要約行を書くことが非常に重要です。"

#: ../../contributing_to_qiskit.rst:209
msgid "Describe any limitations of the current code."
msgstr "現在のコードの制限を説明します。"

#: ../../contributing_to_qiskit.rst:206
msgid "If the code being changed still has future scope for improvements, or any known limitations, mention these in the commit message. This demonstrates to the reviewer that the broader picture has been considered, and what tradeoffs have been done in terms of short-term goals versus long-term wishes."
msgstr "変更中のコードに、将来的な改善の余地や既知の制限がある場合には、それらについてコミットメッセージで触れてください。そうすることで、レビューアに対して、より大局的な視点が考慮されていること、長期的な展望に対して短期的目標の観点からどのようなトレードオフが行われたかを示すことになります。"

#: ../../contributing_to_qiskit.rst:217
msgid "Include references to issues."
msgstr "イシューへの参照を含めてください。"

#: ../../contributing_to_qiskit.rst:212
msgid "If the commit fixes are related to an issue, make sure you annotate that in the commit message. Use the syntax::"
msgstr "コミットする修正がイシューに関係している場合は、コミットメッセージでそのことを忘れずに注釈してください。次の構文を使用してください。"

#: ../../contributing_to_qiskit.rst:217
msgid "if it fixes the issue (GitHub will close the issue when the PR merges)."
msgstr "問題が修正された場合（PRがマージされるとGitHubは問題をクローズします）。"

#: ../../contributing_to_qiskit.rst:219
msgid "The main rule to follow is:"
msgstr "守るべき主なルールは次の通りです。"

#: ../../contributing_to_qiskit.rst:221
msgid "The commit message must contain all the information required to fully understand and review the patch for correctness. Less is not more."
msgstr "コミットメッセージには、パッチの正確性を完全に理解して確認するために必要なすべての情報が含まれている必要があります。少ないことは多いことではありません。"

#: ../../contributing_to_qiskit.rst:227
msgid "Documenting Your Code"
msgstr "コードの文書化"

#: ../../contributing_to_qiskit.rst:229
msgid "If you make a change to an element, make sure you update the associated *docstrings* and parts of the documentation under ``docs/apidocs`` in the corresponding repo. To locally build the element-specific documentation, run ``tox -edocs`` to compile and build the documentation locally and save the output to ``docs/_build/html``. Additionally, the Docs CI job on azure pipelines will run this and host a zip file of the output that you can download and view locally."
msgstr "要素に変更を加える場合、関連する * docstrings* と、対応するリポジトリの ``docs/ apidocs`` の下にあるドキュメントの一部を必ず更新してください。\n"
"要素固有のドキュメントをローカルでビルドするには、``tox -edocs`` を実行してドキュメントをコンパイルしてローカルにビルドし、出力を ``docs / _build / html`` に保存します。 さらに、azureパイプラインのDocs CIジョブはこれを実行し、ダウンロードしてローカルで表示できる出力のzipファイルをホストします。"

#: ../../contributing_to_qiskit.rst:237
msgid "If you have an issue with the `combined documentation <https://qiskit.org/documentation/>`__ that is maintained in the `Qiskit/qiskit repo <https://github.com/Qiskit/qiskit>`__, you can open a `documentation issue <https://github.com/Qiskit/qiskit/issues/new/choose>`__ if you see doc bugs, have a new feature that needs to be documented, or think that material could be added to the existing docs."
msgstr "`Qiskit/qiskit repo <https://github.com/Qiskit/qiskit>`__ でメンテナンスされている `combined documentation <https://qiskit.org/documentation/>`__ に問題がある場合、つまりドキュメントに間違いがあったり、ドキュメントすべき新機能があったり、既存のドキュメントに資料を追加できるような場合には、`documentation issue <https://github.com/Qiskit/qiskit/issues/new/choose>`__ を起こすことができます。"

#: ../../contributing_to_qiskit.rst:246
msgid "Good First Contributions"
msgstr "上手な最初の貢献"

#: ../../contributing_to_qiskit.rst:248
msgid "If you would like to contribute to Qiskit, but aren't sure where to get started, the ``good first issue`` label on issues for a project highlights items appropriate for people new to the project. These are all issues that have been reviewed and tagged by contributors as something a new contributor should be able to work on. In other words, intimate familiarity with Qiskit is not a requirement to develop a fix for the issue."
msgstr "Qiskit に貢献したいけれどもどこから始めたらよいかわからない、というときは、プロジェクトについている ``good first issue`` というラベルがプロジェクトへの新規参加者にとって適していることを示します。これらのイシューはすべて、新しい貢献者が作業することができるものとして、貢献者によってレビューされタグ付けされたものです。言い換えると、イシューの解決を進めるのに、Qiskit によく精通していることが要求されるわけではありません。"

#: ../../contributing_to_qiskit.rst:259
msgid "Deprecation Policy"
msgstr "非推奨に関する方針"

#: ../../contributing_to_qiskit.rst:261
msgid "Qiskit users need to know if a feature or an API they rely upon will continue to be supported by the software tomorrow. Knowing under which conditions the project can remove (or change in a backwards-incompatible manner) a feature or API is important to the user. To manage expectations, the following policy is how API and feature deprecation/removal is handled by Qiskit:"
msgstr "Qiskit ユーザは、自分が依存している機能やAPIが将来のソフトウェアでも引き続きサポートされるかどうかを知る必要があります。どのような条件のもとで、プロジェクトが機能やAPIを削除（または後方互換性がないようなやり方で変更）してよいとしているかを知ることは、ユーザにとって重要です。Qiskit は期待を管理するため、以下のポリシーにしたがって、APIおよび機能の廃止／削除を扱っています。"

#: ../../contributing_to_qiskit.rst:267
msgid "1. Features, APIs, or configuration options are marked deprecated in the code. Appropriate ``DeprecationWarning`` class warnings will be sent to the user. The deprecated code will be frozen and receive only minimal maintenance (just so that it continues to work as-is)."
msgstr "1. 機能、API、構成オプションがコード中で非推奨とマークされます。適切な``DeprecationWarning`` クラスの警告がユーザーに送信されます。非推奨のコードはフリーズされ、最低限のメンテナンスしか受けられません(この時点では、as-isで動作し続けます)。"

#: ../../contributing_to_qiskit.rst:272
msgid "2. A migration path will be documented for current users of the feature. This will be outlined in the both the release notes adding the deprecation, and the release notes removing the feature at the completion of the deprecation cycle. If feasible, the warning message will also include the migration path. A migration path might be \"stop using that feature\", but in such cases it is necessary to first judge how widely used and/or important the feature is to users, in order to determine a reasonable obsolescence date."
msgstr "2. 機能の現ユーザーのためにマイグレーション・パスが文書化されます。これは、非推奨化を追加するリリース・ノートと、非推奨サイクルの完了時にフィーチャーを除去するリリース・ノートの両方で説明されます。 可能な場合は、警告メッセージにマイグレーション・パスも含まれます。 マイグレーション・パスは、「その機能を使用することをやめる」という場合がありますが、そのような場合には、まずその機能の使用頻度や重要度を判断する必要があります。これにより、妥当な廃止の日付を決定することができます。"

#: ../../contributing_to_qiskit.rst:280
msgid "3. An obsolescence date for the feature will be set. The feature must remain intact and working (although with the proper warning being emitted) in all releases pushed until after that obsolescence date. At the very minimum, the feature (or API, or configuration option) should be marked as deprecated (and continue to be supported) for at least three months of linear time from the release date of the first release to include the deprecation warning. For example, if a feature were deprecated in the 0.9.0 release of Terra, which was released on August 22, 2019, then that feature should still appear in all releases until at least November 22, 2019. Since releases do not occur at fixed time intervals, a deprecation warning may only occur in one release prior to removal."
msgstr "3. その機能の廃止日を設定します。廃止日まで、全てのリリースにおいて、その機能は完全なまま(適切な警告が表示されますが) 動作し続けます。最低限、機能(APIまたは構成オプション) は、最初のリリース日から少なくとも線形時間で3 カ月間、非推奨の警告を表示することで、非推奨(かつサポートされ続ける) としてマークされている必要があります。 例えば、ある機能が2019年8月22日にリリースされたTerraの0.9.0リリースで非推奨となった場合、その機能は少なくとも2019年11月22日まですべてのリリースで使用できるはずです。 リリースは一定の間隔では発生しないため、非推奨の警告は、削除の1つ前のリリースでしか発生しない可能性があります。"

#: ../../contributing_to_qiskit.rst:291
msgid "Note that this delay is a minimum. For significant features, it is recommended that the deprecated feature appears for at least double that time. Also, per the stable branch policy, deprecation removals can only occur during minor version releases; they are not appropriate for backporting."
msgstr "この遅延は最小値であることに注意してください。 重要な機能については、非推奨の機能であると少なくとも 2 回は表示されることを推奨します。 また、ブランチの安定化ポリシーによって、非推奨の削除は、マイナー・バージョンのリリース中にのみ発生することがあります。これらはバックポーティングには不適です。"

#: ../../contributing_to_qiskit.rst:299
msgid "Deprecation Warnings"
msgstr "非推奨の警告"

#: ../../contributing_to_qiskit.rst:301
msgid "The proper way to raise a deprecation warning is to use the ``warn`` function from the `warnings module <https://docs.python.org/3/library/warnings.html>`__ in the Python standard library. The warning category class should be a ``DeprecationWarning``. An example would be::"
msgstr "非推奨の警告を出すのに適切な方法は、 Python 標準ライブラリの`warnings module <https://docs.python.org/3/library/warnings.html>`__ から``warn`` 機能を使用することです。 警告カテゴリー・クラスは ``DeprecationWarning`` でなければなりません。例として、次のようなものがあります:"

#: ../../contributing_to_qiskit.rst:314
msgid "One thing to note here is the ``stack_level`` kwarg on the warn() call. This argument is used to specify which level in the call stack will be used as the line initiating the warning. Typically, ``stack_level`` should be set to 2, as this will show the line calling the context where the warning was raised. In the above example, it would be the caller of ``foo()``. If you did not set this, the warning would show that it was caused by the line in the foo() function, which is not helpful for users trying to determine the origin of a deprecated call. However, this value may be adjusted, depending on the call stack and where ``warn()`` gets called from. For example, if the warning is always raised by a private method that only has one caller, ``stack_level=3`` might be appropriate."
msgstr "ここで注目すべき点は、 warn() メソッドの ``stack_level`` kwarg です。 この引数は、呼び出しスタック内のどのレベルが、警告を開始する行として使用されるかを指定するために使用されます。 通常、``stack_level`` は 2に設定する必要があります。これにより、警告が出されたコンテキストを呼び出す行が表示されます。 上記の例では、``foo()``の呼び出し元になります。これを設定しなかった場合は、 foo() 関数内の行で発生したと警告が表示されます。これは、非推奨の呼び出しの起点を判別しようとしているユーザーにとっては役に立ちません。 ただし、この値は、コール・スタックや ``warn()`` が呼び出される場所によって調整されることがあります。 例えば、警告が常に 1 つの呼び出し元のみを持つ private メソッドによって生成される場合は、 ``stack_level=3`` が適切である場合があります。"

#: ../../contributing_to_qiskit.rst:329
msgid "Stable Branch Policy"
msgstr "ブランチの安定化ポリシー"

#: ../../contributing_to_qiskit.rst:331
msgid "The stable branch is intended to be a safe source of fixes for high-impact bugs and security issues that have been fixed on master since a release. When reviewing a stable branch PR, we must balance the risk of any given patch with the value that it will provide to users of the stable branch. Only a limited class of changes are appropriate for inclusion on the stable branch. A large, risky patch for a major issue might make sense, as might a trivial fix for a fairly obscure error-handling case. A number of factors must be weighed when considering a change:"
msgstr "Stableブランチは、リリース後にマスター上で修正された、影響の大きいバグやセキュリティー問題に対応する修正の安全なソースになることを目的としています。 安定ブランチのプルリクエスト(PR) をレビューする時、与えられたパッチのリスクと安定ブランチを提供する価値のバランスを取る必要があります。 安定したブランチへ組み込むには、限定されたクラスのみへの変更が適しています。 大きな問題に対する大きくリスクの高いパッチは、あまり目立たないのエラー処理のための些細な修正同様、理にかなっているかもしれません。 変更をレビューする際には、多くの要因を検討する必要があります。"

#: ../../contributing_to_qiskit.rst:341
msgid "The risk of regression: even the tiniest changes carry some risk of breaking something, and we really want to avoid regressions on the stable branch."
msgstr "リグレッションのリスク: 最も小さな変更でも何かを壊すリスクがあり、stableブランチ上でのリグレッションは本当に避けたいです。"

#: ../../contributing_to_qiskit.rst:344
msgid "The user visibility benefit: are we fixing something that users might actually notice, and if so, how important is it?"
msgstr "ユーザーに見える利益: ユーザーが本当に気が付く修正していますか？そうであれば、その重要性はどのくらいですか？"

#: ../../contributing_to_qiskit.rst:346
msgid "How self-contained the fix is: if it fixes a significant issue but also refactors a lot of code, it's probably worth thinking about what a less risky fix might look like."
msgstr "修正の自己完結度:　重要な問題を修正するだけでなく多くのコードをリファクタリングしている場合は、リスクの低い修正がどのようなものになるかを検討する価値があると考えられます。"

#: ../../contributing_to_qiskit.rst:349
msgid "Whether the fix is already on master: a change must be a backport of a change already merged onto master, unless the change simply does not make sense on master."
msgstr "修正がすでにマスターブランチにあるかどうか: 変更がマスターに対して意味を持っていない場合、変更は既にマスターにマージされた変更のバックポートでなければなりません。"

#: ../../contributing_to_qiskit.rst:356
msgid "Backporting procedure:"
msgstr "バックポーティングの方法"

#: ../../contributing_to_qiskit.rst:358
msgid "When backporting a patch from master to stable, we want to keep a reference to the change on master. When you create the branch for the stable PR, use::"
msgstr "マスターから安定ブランチへパッチをバックポーティングする際には、マスター上の変更の参照を保持します。 安定したプルリクエスト(PR) のブランチを作成する場合、以下を使用して下さい:"

#: ../../contributing_to_qiskit.rst:364
msgid "However, this only works for small self-contained patches from master. If you need to backport a subset of a larger commit (from a squashed PR, for example) from master, do this manually. In these cases, add::"
msgstr "ただし、これはマスターからの小さな自己完結型パッチのみに対応しています。 マスターから、より大きなコミットのサブセット (例えば、squashされた PRなど) をバックポートする必要がある場合は、手動で行います。 このような場合には、以下を追加します:"

#: ../../contributing_to_qiskit.rst:370
msgid "so that we can track the source of the change subset, even if a strict cherry-pick doesn\\'t make sense."
msgstr "そうすれば、厳格なcherry-pickの意味が分からなくても、変更サブセットのソースを追跡できるようになります。"

#: ../../contributing_to_qiskit.rst:373
msgid "If the patch you're proposing will not cherry-pick cleanly, you can help by resolving the conflicts yourself and proposing the resulting patch. Please keep Conflicts lines in the commit message to help review of the stable patch."
msgstr "提案するパッチがきれいにcherry-pickしない場合は、競合を自分で解決し、その結果のパッチを提案することができます。 安定したパッチのレビューをサポートするために、コミット・メッセージ内の競合行を保持してください。"

#: ../../contributing_to_qiskit.rst:381
msgid "Backport labels"
msgstr "バックポート・ラベル"

#: ../../contributing_to_qiskit.rst:383
msgid "Bugs or PRs tagged with ``stable backport potential`` are bugs that apply to the stable release too and may be suitable for backporting once a fix lands in master. Once the backport has been proposed, the tag should be removed."
msgstr ""

#: ../../contributing_to_qiskit.rst:388
msgid "Include ``[Stable]`` in the title of the PR against the stable branch, as a sign that setting the target branch as stable was not a mistake. Also, reference to the PR number in master that you are porting."
msgstr ""

#: ../../contributing_to_qiskit.rst:397
msgid "Contributing to Documentation"
msgstr ""

#: ../../contributing_to_qiskit.rst:399
msgid "Qiskit documentation is shaped by the `docs as code <https://www.writethedocs.org/guide/docs-as-code/>`__ philosophy, primarily drawn from Qiskit code comments in the `style of API documentation <https://alistapart.com/article/the-ten-essentials-for-good-api-documentation/>`__."
msgstr ""

#: ../../contributing_to_qiskit.rst:404
msgid "The documentation is built from the master branch of `Qiskit/qiskit/docs <https://github.com/Qiskit/qiskit/tree/master/docs>`__ using `Sphinx <http://www.sphinx-doc.org/en/master/>`__. The majority of documentation, under `API Reference <https://qiskit.org/documentation/apidoc/qiskit.html>`__, is drawn from code comments in the repositories listed in :ref:`where_things_are`."
msgstr ""

#: ../../contributing_to_qiskit.rst:413
msgid "Documentation Structure"
msgstr ""

#: ../../contributing_to_qiskit.rst:415
msgid "The way documentation is structured in Qiskit is to push as much of the actual documentation into the docstrings as possible. This makes it easier for additions and corrections to be made during development, because the majority of the documentation lives near the code being changed. There are three levels in the normal documentation structure in Terra:"
msgstr ""

#: ../../contributing_to_qiskit.rst:443
msgid "The ``.rst`` files in the ``docs/apidocs``"
msgstr ""

#: ../../contributing_to_qiskit.rst:422
msgid "These files are used to tell Sphinx which modules to include in the rendered documentation. This contains two pieces of information: an `internal reference <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#reference-names>`__ or `cross reference <https://www.sphinx-doc.org/en/latest/usage/restructuredtext/roles.html#ref-role>`__ to the module, which can be used for internal links inside the documentation, and an `automodule directive <http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`__ used to parse the module docstrings from a specified import path. For example, the dagcircuit.rst file contains::"
msgstr ""

#: ../../contributing_to_qiskit.rst:440
msgid "The only ``.rst`` file outside of this is ``qiskit.rst``, which contains the table of contents. If you're adding a new ``.rst`` file for a new module's documentation, make sure to add it to the `toctree <https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#table-of-contents>`__ in that file."
msgstr ""

#: ../../contributing_to_qiskit.rst:488
msgid "The module-level docstring"
msgstr ""

#: ../../contributing_to_qiskit.rst:446
msgid "This docstring is at the module level for the module specified in the ``automodule`` directive in the rst file. If the module specified is a directory/namespace, the docstring should be specified in the ``__init__.py`` file for that directory. This module-level docstring contains more details about the module being documented. The normal structure to this docstring is to outline all the classes and functions of the public API that are contained in that module. This is typically done using the `autosummary directive <https://www.sphinx-doc.org/en/master/usage/extensions/autosummary.html>`__ (or `autodoc directives <http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`__ directly if the module is simple, such as in the case of ``qiskit.execute``). The autosummary directive is used to autodoc a list of different Python elements (classes, functions, etc.) directly without having to manually call out the autodoc directives for each one. The module-level docstring is where to provide a high-level overview of what functionality the module provides. This is normally done by grouping the different components of the public API together into multiple subsections."
msgstr ""

#: ../../contributing_to_qiskit.rst:463
msgid "For example, as in the previous dagcircuit module example, the contents of the module docstring for ``qiskit/dagcircuit/__init__.py`` would be::"
msgstr ""

#: ../../contributing_to_qiskit.rst:487
msgid "This is just an example and the actual module docstring for the dagcircuit module might diverge from this."
msgstr ""

#: ../../contributing_to_qiskit.rst:505
msgid "The actual docstring for the elements listed in the module docstring"
msgstr ""

#: ../../contributing_to_qiskit.rst:491
msgid "You should strive to document thoroughly all the public interfaces exposed using examples when necessary. For docstrings, `Google Python Style Docstrings <https://google.github.io/styleguide/pyguide.html?showone=Comments#38-comments-and-docstrings>`__ are used. This is parsed using the `napoleon sphinx extension <https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html>`__. The `napoleon documentation <https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html>`__ contains a good example of how docstrings should be formatted."
msgstr ""

#: ../../contributing_to_qiskit.rst:500
msgid "You can use any Sphinx directive or rst formatting in a docstring as it makes sense. For example, one common extension used is the ``jupyter-execute`` directive, which is used to execute a code block in Jupyter and display both the code and output. This is particularly useful for visualizations."
msgstr ""

#: ../../contributing_to_qiskit.rst:508
msgid "Documentation Integration"
msgstr ""

#: ../../contributing_to_qiskit.rst:510
msgid "The hosted documentation at https://qiskit.org/documentation/ covers the entire Qiskit project; Terra is just one component of that. As such, the documentation builds for the hosted version are built by the Qiskit meta-package repository https://github.com/Qiskit/qiskit. When commits are merged to that repo, the output of Sphinx builds are uploaded to the qiskit.org website. Those Sphinx builds are configured to pull in the documentation from the version of the Qiskit elements installed by the meta-package at that point. For example, if the meta-package version is currently 0.13.0, then that will copy the documentation from Terra's 0.10.0 release. When the meta-package's requirements are bumped, then it will start pulling documentation from the new version. This means that fixes for incorrect API documentation will need to be included in a new release. Documentation fixes are valid backports for a stable patch release per the stable branch policy (see that section below)."
msgstr ""

#: ../../contributing_to_qiskit.rst:524
msgid "During the build process, the contents of each element's ``docs/apidocs/`` are recursively copied into a shared copy of ``doc/apidocs/`` in the meta-package repository along with all the other elements. This means that what is in the root of docs/apidocs on each element at a release will end up on the root of https://qiskit.org/documentation/apidoc/."
msgstr ""

#: ../../contributing_to_qiskit.rst:533
msgid "Translating Documentation"
msgstr ""

#: ../../contributing_to_qiskit.rst:535
msgid "Qiskit documentation is translated (localized) using Crowdin, a software and web localization platform that allows organizations to coordinate translation projects and collaborate with communities to translate materials. Crowdin allows our community of translators to amplify their impact by automatically reusing the work invested translating one sentence to translate other, similar sentences. Crowdin also makes translations resilient to many types of changes to the original material, such as moving sentences around, even across files."
msgstr ""

#: ../../contributing_to_qiskit.rst:543
msgid "Qiskit localization requests are handled in `Qiskit Translations <https://github.com/Qiskit/qiskit-translations>`__ repository. To contribute to Qiskit localization, please follow these steps:"
msgstr ""

#: ../../contributing_to_qiskit.rst:546
msgid "Add your name (or ID) to the `LOCALIZATION_CONTRIBUTORS <https://github.com/qiskit-community/qiskit-translations/blob/master/LOCALIZATION_CONTRIBUTORS>`__ file."
msgstr ""

#: ../../contributing_to_qiskit.rst:549
msgid "Create a pull request (PR) to merge your change. Make sure to follow the template to open a Pull Request."
msgstr ""

#: ../../contributing_to_qiskit.rst:554
msgid "Each contributor has to create their own PR and sign the CLA."
msgstr ""

#: ../../contributing_to_qiskit.rst:555
msgid "Please mention the language that you'd like to contribute to in the PR summary."
msgstr ""

#: ../../contributing_to_qiskit.rst:557
msgid "If you have an open issue for a language request, **add the issue link to the PR**."
msgstr ""

#: ../../contributing_to_qiskit.rst:559
msgid "You will be asked to sign the Qiskit Contributors License Agreement (CLA); please do so."
msgstr ""

#: ../../contributing_to_qiskit.rst:561
msgid "A minimum of **three contributors** per language are necessary for any new languages to be added, to receive official support from the administrators of the localization project."
msgstr ""

#: ../../contributing_to_qiskit.rst:564
msgid "Among the group of contributors, a translation lead must be identified to serve as a liaison with the administrators of the localization project. The lead must contact: Yuri Kobayashi (yurik@jp.ibm.com) by email."
msgstr ""

#: ../../contributing_to_qiskit.rst:567
msgid "In the `Qiskit-Docs <https://crowdin.com/project/qiskit-docs>`__ Crowdin project, choose the language that you want to contribute to."
msgstr ""

#: ../../contributing_to_qiskit.rst:572
msgid "As mentioned in the blog post, `Qiskit in my language is Qiskit <https://medium.com/qiskit/qiskit-in-my-language-is-qiskit-73d4626a99d3>`__, we want to make sure that translated languages have enough community support to build a translation team with translators, proofreaders, and translation leads. If you want to be a translation lead or would be willing to join a new translation project team, you can open a `GitHub issue <https://github.com/qiskit-community/qiskit-translations/issues/new/choose>`__ to start a discussion with the Qiskit team and recruit translation project members."
msgstr ""

#: ../../contributing_to_qiskit.rst:578
msgid "Click the **Join** button and **paste the URL of your PR** in the dialog box where you are asked why you want to join the Crowdin project."
msgstr ""

#: ../../contributing_to_qiskit.rst:581
msgid "The administrators of the Crowdin project will review your request and give you access as quickly as they can."
msgstr ""

#: ../../contributing_to_qiskit.rst:585
msgid "Building from Source"
msgstr ""

#: ../../contributing_to_qiskit.rst:587
msgid "You can build a local copy of the documentation from your local clone of the `Qiskit/qiskit` repository as follows:"
msgstr ""

#: ../../contributing_to_qiskit.rst:590
msgid "Clone the Qiskit repository."
msgstr ""

#: ../../contributing_to_qiskit.rst:596
msgid "Cloning the repository creates a local folder called ``qiskit``."
msgstr ""

#: ../../contributing_to_qiskit.rst:602
msgid "Build the documentation by navigating to your local clone of `Qiskit/qiskit` and running the following command in a terminal window."
msgstr ""

#: ../../contributing_to_qiskit.rst:609
msgid "If you do not already have the `tox <https://tox.readthedocs.io/en/latest/>`_ command installed, install it by running:"
msgstr ""

#: ../../contributing_to_qiskit.rst:616
msgid "As you make changes to your local RST files, you can update your HTML files by navigating to `/doc/` and running the following in a terminal window:"
msgstr ""

#: ../../contributing_to_qiskit.rst:624
msgid "This will build a styled, HTML version of your local documentation repository in the subdirectory `/docs/_build/html/`."
msgstr ""

#: ../../contributing_to_qiskit.rst:631
msgid "Installing from Source"
msgstr ""

#: ../../contributing_to_qiskit.rst:633
msgid "Installing the elements from source allows you to access the most recently updated version of Qiskit instead of using the version in the Python Package Index (PyPI) repository. This will give you the ability to inspect and extend the latest version of the Qiskit code more efficiently."
msgstr ""

#: ../../contributing_to_qiskit.rst:638
msgid "When installing the elements and components from source, by default their ``development`` version (which corresponds to the ``master`` git branch) will be used, as opposed to the ``stable`` version (which contains the same codebase as the published ``pip`` packages). Since the ``development`` versions of an element or component usually include new features and changes, they generally require using the ``development`` version of the rest of the items as well."
msgstr ""

#: ../../contributing_to_qiskit.rst:647
msgid "The Terra and Aer packages both require a compiler to build from source before you can install. Ignis, Aqua, and the IBM Quantum Provider backend do not require a compiler."
msgstr ""

#: ../../contributing_to_qiskit.rst:651
msgid "Installing elements from source requires the following order of installation to prevent installing versions of elements that may be lower than those desired if the ``pip`` version is behind the source versions:"
msgstr ""

#: ../../contributing_to_qiskit.rst:655
msgid ":ref:`qiskit-terra <install-qiskit-terra>`"
msgstr ""

#: ../../contributing_to_qiskit.rst:656
msgid ":ref:`qiskit-aer <install-qiskit-aer>`"
msgstr ""

#: ../../contributing_to_qiskit.rst:657
msgid ":ref:`qiskit-ignis <install-qiskit-ignis>`"
msgstr ""

#: ../../contributing_to_qiskit.rst:658
msgid ":ref:`qiskit-aqua <install-qiskit-aqua>`"
msgstr ""

#: ../../contributing_to_qiskit.rst:659
msgid ":ref:`qiskit-ibmq-provider <install-qiskit-ibmq-provider>` (if you want to connect to the IBM Quantum devices or online simulator)"
msgstr ""

#: ../../contributing_to_qiskit.rst:663
msgid "To work with several components and elements simultaneously, use the following steps for each element."
msgstr ""

#: ../../contributing_to_qiskit.rst:668
msgid "Due to the use of namespace packaging in Python, care must be taken in how you install packages. If you're planning to install any element from source, do not use the ``qiskit`` meta-package. Also, follow this guide and use a separate virtual environment for development. If you do choose to mix an existing installation with your development, refer to https://github.com/pypa/sample-namespace-packages/blob/master/table.md for the set of combinations of installation methods that work together."
msgstr ""

#: ../../contributing_to_qiskit.rst:677
msgid "Set up the Virtual Development Environment"
msgstr ""

#: ../../contributing_to_qiskit.rst:687
msgid "Installing Terra from Source"
msgstr ""

#: ../../contributing_to_qiskit.rst:689
msgid "Installing from source requires that you have a C++ compiler on your system that supports C++11."
msgstr ""

#: ../../contributing_to_qiskit.rst
msgid "Compiler for Linux"
msgstr ""

#: ../../contributing_to_qiskit.rst:695
msgid "On most Linux platforms, the necessary GCC compiler is already installed."
msgstr ""

#: ../../contributing_to_qiskit.rst
msgid "Compiler for macOS"
msgstr ""

#: ../../contributing_to_qiskit.rst:699
msgid "If you use macOS, you can install the Clang compiler by installing XCode. Check if you have XCode and Clang installed by opening a terminal window and entering the following."
msgstr ""

#: ../../contributing_to_qiskit.rst:707
msgid "Install XCode and Clang by using the following command."
msgstr ""

#: ../../contributing_to_qiskit.rst
msgid "Compiler for Windows"
msgstr ""

#: ../../contributing_to_qiskit.rst:715
msgid "On Windows, it is easiest to install the Visual C++ compiler from the `Build Tools for Visual Studio 2017 <https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2017>`__. You can instead install Visual Studio version 2015 or 2017, making sure to select the options for installing the C++ compiler."
msgstr ""

#: ../../contributing_to_qiskit.rst:721
msgid "Once the compilers are installed, you are ready to install Qiskit Terra."
msgstr ""

#: ../../contributing_to_qiskit.rst:723
msgid "Clone the Terra repository."
msgstr ""

#: ../../contributing_to_qiskit.rst:729
msgid "Cloning the repository creates a local folder called ``qiskit-terra``."
msgstr ""

#: ../../contributing_to_qiskit.rst:735
msgid "Install the Python requirements libraries from your ``qiskit-terra`` directory."
msgstr ""

#: ../../contributing_to_qiskit.rst:741
msgid "If you want to run tests or linting checks, install the developer requirements."
msgstr ""

#: ../../contributing_to_qiskit.rst:747
msgid "Install ``qiskit-terra``."
msgstr ""

#: ../../contributing_to_qiskit.rst:753
msgid "If you want to install it in editable mode, meaning that code changes to the project don't require a reinstall to be applied, you can do this with:"
msgstr ""

#: ../../contributing_to_qiskit.rst:760
msgid "You can then run the code examples after installing Terra. You can run the example with the following command."
msgstr ""

#: ../../contributing_to_qiskit.rst:770
msgid "If you do not intend to install any other components, qiskit-terra will emit a ``RuntimeWarning`` warning that both qiskit-aer and qiskit-ibmq-provider are not installed. This is done because users commonly intend to use the additional elements, but do not realize they are not installed, or that the installation of either Aer or the IBM Quantum Provider failed for some reason. If you wish to suppress these warnings, add::"
msgstr ""

#: ../../contributing_to_qiskit.rst:782
msgid "before any ``qiskit`` imports in your code. This will suppress the warning about the missing qiskit-aer and qiskit-ibmq-provider, but will continue to display any other warnings from qiskit or other packages."
msgstr ""

#: ../../contributing_to_qiskit.rst:789
msgid "Installing Aer from Source"
msgstr ""

#: ../../contributing_to_qiskit.rst:791
msgid "Clone the Aer repository."
msgstr ""

#: ../../contributing_to_qiskit.rst:797
msgid "Install build requirements."
msgstr ""

#: ../../contributing_to_qiskit.rst:803
msgid "After this, the steps to install Aer depend on which operating system you are using. Since Aer is a compiled C++ program with a Python interface, there are non-Python dependencies for building the Aer binary which can't be installed universally depending on operating system."
msgstr ""

#: ../../contributing_to_qiskit.rst ../../contributing_to_qiskit.rst:984
msgid "Linux"
msgstr ""

#: ../../contributing_to_qiskit.rst:810 ../../contributing_to_qiskit.rst:874
msgid "Install compiler requirements."
msgstr ""

#: ../../contributing_to_qiskit.rst:812
msgid "Building Aer requires a C++ compiler and development headers."
msgstr ""

#: ../../contributing_to_qiskit.rst:814 ../../contributing_to_qiskit.rst:829
msgid "If you're using Fedora or an equivalent Linux distribution, install using:"
msgstr ""

#: ../../contributing_to_qiskit.rst:821 ../../contributing_to_qiskit.rst:836
msgid "For Ubuntu/Debian install it using:"
msgstr ""

#: ../../contributing_to_qiskit.rst:827
msgid "Install OpenBLAS development headers."
msgstr ""

#: ../../contributing_to_qiskit.rst
msgid "macOS"
msgstr ""

#: ../../contributing_to_qiskit.rst:845
msgid "Install dependencies."
msgstr ""

#: ../../contributing_to_qiskit.rst:847
msgid "To use the `Clang <https://clang.llvm.org/>`__ compiler on macOS, you need to install an extra library for supporting `OpenMP <https://www.openmp.org/>`__.  You can use `brew <https://brew.sh/>`__ to install this and other dependencies."
msgstr ""

#: ../../contributing_to_qiskit.rst:855
msgid "Then install a BLAS implementation; `OpenBLAS <https://www.openblas.net/>`__ is the default choice."
msgstr ""

#: ../../contributing_to_qiskit.rst:862
msgid "Next, install ``Xcode Command Line Tools``."
msgstr ""

#: ../../contributing_to_qiskit.rst
msgid "Windows"
msgstr ""

#: ../../contributing_to_qiskit.rst:870
msgid "On Windows you need to use `Anaconda3 <https://www.anaconda.com/distribution/#windows>`__ or `Miniconda3 <https://docs.conda.io/en/latest/miniconda.html>`__ to install all the dependencies."
msgstr ""

#: ../../contributing_to_qiskit.rst:880
msgid "Install binary and build dependencies."
msgstr ""

#: ../../contributing_to_qiskit.rst:887
msgid "Build and install qiskit-aer directly"
msgstr ""

#: ../../contributing_to_qiskit.rst:889
msgid "If you have pip <19.0.0 installed and your environment doesn't require a custom build, run:"
msgstr ""

#: ../../contributing_to_qiskit.rst:897
msgid "This will both build the binaries and install Aer."
msgstr ""

#: ../../contributing_to_qiskit.rst:899
msgid "Alternatively, if you have a newer pip installed, or have some custom requirement, you can build a Python wheel manually."
msgstr ""

#: ../../contributing_to_qiskit.rst:907
msgid "If you need to set a custom option during the wheel build, refer to :ref:`aer_wheel_build_options`."
msgstr ""

#: ../../contributing_to_qiskit.rst:910
msgid "After you build the Python wheel, it will be stored in the ``dist/`` dir in the Aer repository. The exact version will depend"
msgstr ""

#: ../../contributing_to_qiskit.rst:918
msgid "The exact filename of the output wheel file depends on the current version of Aer under development."
msgstr ""

#: ../../contributing_to_qiskit.rst:924
msgid "Custom options during wheel builds"
msgstr ""

#: ../../contributing_to_qiskit.rst:926
msgid "The Aer build system uses `scikit-build <https://scikit-build.readthedocs.io/en/latest/index.html>`__ to run the compilation when building it with the Python interface. It acts as an interface for `setuptools <https://setuptools.readthedocs.io/en/latest/>`__ to call `CMake <https://cmake.org/>`__ and compile the binaries for your local system."
msgstr ""

#: ../../contributing_to_qiskit.rst:931
msgid "Due to the complexity of compiling the binaries, you may need to pass options to a certain part of the build process. The way to pass variables is:"
msgstr ""

#: ../../contributing_to_qiskit.rst:938
msgid "where the elements within square brackets `[]` are optional, and ``skbuild_opts``, ``cmake_opts``, ``build_tool_opts`` are to be replaced by flags of your choice. A list of *CMake* options is available here: https://cmake.org/cmake/help/v3.6/manual/cmake.1.html#options. For example, you could run something like:"
msgstr ""

#: ../../contributing_to_qiskit.rst:948
msgid "This is passing the flag `-j8` to the underlying build system (which in this case is `Automake <https://www.gnu.org/software/automake/>`__), telling it that you want to build in parallel using 8 processes."
msgstr ""

#: ../../contributing_to_qiskit.rst:952
msgid "For example, a common use case for these flags on linux is to specify a specific version of the C++ compiler to use (normally if the default is too old):"
msgstr ""

#: ../../contributing_to_qiskit.rst:960
msgid "which will tell CMake to use the g++-7 command instead of the default g++ when compiling Aer."
msgstr ""

#: ../../contributing_to_qiskit.rst:963
msgid "Another common use case for this, depending on your environment, is that you may need to specify your platform name and turn off static linking."
msgstr ""

#: ../../contributing_to_qiskit.rst:971
msgid "Here ``--plat-name`` is a flag to setuptools, to specify the platform name to use in the package metadata, ``-DSTATIC_LINKING`` is a flag for using CMake to disable static linking, and ``-j8`` is a flag for using Automake to use 8 processes for compilation."
msgstr ""

#: ../../contributing_to_qiskit.rst:976
msgid "A list of common options depending on platform are:"
msgstr ""

#: ../../contributing_to_qiskit.rst:979
msgid "Platform"
msgstr ""

#: ../../contributing_to_qiskit.rst:979
msgid "Tool"
msgstr ""

#: ../../contributing_to_qiskit.rst:979
msgid "Option"
msgstr ""

#: ../../contributing_to_qiskit.rst:979
msgid "Use Case"
msgstr ""

#: ../../contributing_to_qiskit.rst:981
msgid "All"
msgstr ""

#: ../../contributing_to_qiskit.rst:981
msgid "Automake"
msgstr ""

#: ../../contributing_to_qiskit.rst:981
msgid "-j"
msgstr ""

#: ../../contributing_to_qiskit.rst:981
msgid "Followed by a number, sets the number of processes to use for compilation."
msgstr ""

#: ../../contributing_to_qiskit.rst:984 ../../contributing_to_qiskit.rst:991
msgid "CMake"
msgstr ""

#: ../../contributing_to_qiskit.rst:984
msgid "-DCMAKE_CXX_COMPILER"
msgstr ""

#: ../../contributing_to_qiskit.rst:984
msgid "Used to specify a specific C++ compiler; this is often needed if your default g++ is too old."
msgstr ""

#: ../../contributing_to_qiskit.rst:988 ../../contributing_to_qiskit.rst:991
msgid "OSX"
msgstr ""

#: ../../contributing_to_qiskit.rst:988
msgid "setuptools"
msgstr ""

#: ../../contributing_to_qiskit.rst:988
msgid "--plat-name"
msgstr ""

#: ../../contributing_to_qiskit.rst:988
msgid "Used to specify the platform name in the output Python package."
msgstr ""

#: ../../contributing_to_qiskit.rst:991
msgid "-DSTATIC_LINKING"
msgstr ""

#: ../../contributing_to_qiskit.rst:991
msgid "Used to specify whether or not static linking should be used."
msgstr ""

#: ../../contributing_to_qiskit.rst:996
msgid "Some of these options are not platform-specific. These particular platforms are listed because they are commonly used in the environment. Refer to the tool documentation for more information."
msgstr ""

#: ../../contributing_to_qiskit.rst:1003
msgid "Installing Ignis from Source"
msgstr ""

#: ../../contributing_to_qiskit.rst:1005
msgid "Clone the Ignis repository."
msgstr ""

#: ../../contributing_to_qiskit.rst:1011
msgid "Cloning the repository creates a local directory called ``qiskit-ignis``."
msgstr ""

#: ../../contributing_to_qiskit.rst:1017
msgid "If you want to run tests or linting checks, install the developer requirements. This is not required to install or use the qiskit-ignis package when installing from source."
msgstr ""

#: ../../contributing_to_qiskit.rst:1025
msgid "Install Ignis."
msgstr ""

#: ../../contributing_to_qiskit.rst:1031 ../../contributing_to_qiskit.rst:1069
#: ../../contributing_to_qiskit.rst:1107
msgid "If you want to install it in editable mode, meaning that code changes to the project don't require a reinstall to be applied:"
msgstr ""

#: ../../contributing_to_qiskit.rst:1041
msgid "Installing Aqua from Source"
msgstr ""

#: ../../contributing_to_qiskit.rst:1043
msgid "Clone the Aqua repository."
msgstr ""

#: ../../contributing_to_qiskit.rst:1049
msgid "Cloning the repository creates a local directory called ``qiskit-aqua``."
msgstr ""

#: ../../contributing_to_qiskit.rst:1055
msgid "If you want to run tests or linting checks, install the developer requirements. This is not required to install or use the qiskit-aqua package when installing from source."
msgstr ""

#: ../../contributing_to_qiskit.rst:1063
msgid "Install Aqua."
msgstr ""

#: ../../contributing_to_qiskit.rst:1079
msgid "Installing IBM Quantum Provider from Source"
msgstr ""

#: ../../contributing_to_qiskit.rst:1081
msgid "Clone the qiskit-ibmq-provider repository."
msgstr ""

#: ../../contributing_to_qiskit.rst:1087
msgid "Cloning the repository creates a local directory called ``qiskit-ibmq-provider``."
msgstr ""

#: ../../contributing_to_qiskit.rst:1093
msgid "If you want to run tests or linting checks, install the developer requirements. This is not required to install or use the qiskit-ibmq-provider package when installing from source."
msgstr ""

#: ../../contributing_to_qiskit.rst:1101
msgid "Install qiskit-ibmq-provider."
msgstr ""

