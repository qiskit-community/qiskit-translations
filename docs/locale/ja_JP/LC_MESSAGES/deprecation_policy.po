msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-24 10:41+0000\n"
"PO-Revision-Date: 2022-11-24 11:12\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/deprecation_policy.po\n"
"X-Crowdin-File-ID: 9836\n"
"Language: ja_JP\n"

#: ../../deprecation_policy.rst:3
msgid "Deprecation Policy"
msgstr "非推奨に関する方針"

#: ../../deprecation_policy.rst:5
msgid "Many users and other packages depend on different parts of Qiskit.  We must make sure that whenever we make changes to the code, we give users ample time to adjust without breaking code that they have already written."
msgstr "多くのユーザーやその他のパッケージは、Qiskit のさまざまな部分に依存しています。 コードに変更を加えるときはいつでも、ユーザーがすでに作成したコードを壊すことなく調整するための十分な時間をユーザーに与えるようにする必要があります。"

#: ../../deprecation_policy.rst:9
msgid "Most importantly: *do not* change any interface that is public-facing unless we absolutely have to.  Adding things is ok, taking things away is annoying for users but can be handled reasonably with plenty notice, but changing behavior generally means users cannot write code that will work with two subsequent versions of Qiskit, which is not acceptable."
msgstr "最も重要なことは、どうしても必要な場合を除いて、公開されているインターフェースを *変更しない* ことです。 物事を追加することは問題ありません。物事を取り除くことはユーザーにとって迷惑ですが、十分な注意を払って合理的に処理できます。動作を変更すると一般的に、ユーザーはQiskitの後続の2つのバージョンで動作するコードを記述できなくなり、これは受け入れられません。"

#: ../../deprecation_policy.rst:15
msgid "Beware that users will often be using functions, classes and methods that we, the Qiskit developers, may consider internal or not widely used.  Do not make assumptions that \"this is buried, so nobody will be using it\"; if it is public, it is subject to the policy.  The only exceptions here are functions and modules that are explicitly internal, *i.e.* those whose names begin with a leading underscore (``_``)."
msgstr "ユーザーは、Qiskit 開発者が内部または広く使用されていないと見なす関数、クラス、およびメソッドを使用することが多いことに注意してください。 「これは埋もれているので、誰も使用しないだろう」と思い込まないでください。 公開されている場合は、ポリシーに従います。 ここでの唯一の例外は、明示的に内部的な関数とモジュールです。つまり、名前の先頭がアンダースコア (_) で始まるものです。"

#: ../../deprecation_policy.rst:22
msgid "The guiding principles are:"
msgstr "指針は次のとおりです。"

#: ../../deprecation_policy.rst:24
msgid "we must not remove or change code without active warnings for least three months or two complete version cycles;"
msgstr "少なくとも3か月または2つの完全なバージョンサイクルの間、有効な警告なしにコードを削除または変更してはなりません。"

#: ../../deprecation_policy.rst:27
msgid "there must always be a way to achieve valid goals that does not issue any warnings;"
msgstr "警告を出さない有効な目標を達成する方法が常になければなりません。"

#: ../../deprecation_policy.rst:30
msgid "never assume that a function that isn't explicitly internal isn't in use;"
msgstr "明示的に内部に存在しない関数が使用されていないと思い込まないでください。"

#: ../../deprecation_policy.rst:32
msgid "all deprecations, changes and removals are considered API changes, and can only occur in minor releases not patch releases, per the :ref:`stable branch policy <stable_branch_policy>`."
msgstr "すべての非推奨、変更、および削除は API の変更と見なされ、 :ref:`安定版ブランチポリシー <stable_branch_policy>` に従って、パッチ リリースではなくマイナー リリースでのみ発生する可能性があります。"

#: ../../deprecation_policy.rst:39
msgid "Removing a feature"
msgstr "機能の削除"

#: ../../deprecation_policy.rst:41
msgid "When removing a feature (for example a class, function or function parameter), we will follow this procedure:"
msgstr "機能 (クラス、関数、関数パラメーターなど) を削除する場合は、次の手順に従います。"

#: ../../deprecation_policy.rst:44
msgid "The alternative path must be in place for one minor version before any warnings are issued.  For example, if we want to replace the function ``foo()`` with ``bar()``, we must make at least one release with both functions before issuing any warnings within ``foo()``.  You may issue ``PendingDeprecationWarning``\\ s from the old paths immediately."
msgstr "警告が発行される前に、1 つのマイナー バージョンに対して代替パスを設定する必要があります。 たとえば、関数 ``foo()`` を ``bar()`` に置き換えたい場合、 ``foo()`` 内で警告を発行する前に、両方の関数を少なくとも 1 回リリースする必要があります。 古いパスからすぐに ``PendingDeprecationWarning`` を発行できます。"

#: ../../deprecation_policy.rst:50
msgid "*Reason*: we need to give people time to swap over without breaking their code as soon as they upgrade."
msgstr "*理由* : アップグレードしたらすぐに、コードを壊さずにスワップする時間を与える必要があります。"

#: ../../deprecation_policy.rst:53
msgid "After the alternative path has been in place for at least one minor version, :ref:`issue the deprecation warnings <issuing-deprecation-warnings>`.  Add a release note with a ``deprecations`` section listing all deprecated paths, their alternatives, and the reason for deprecation.  :ref:`Update the tests to test the warnings <testing-deprecated-functionality>`."
msgstr "少なくとも 1 つのマイナー バージョンの代替パスが設定されたら、 :ref:`非推奨の警告を発行 <issuing-deprecation-warnings>` します。 非推奨のすべてのパス、代替パス、および非推奨の理由を記載した ``deprecations`` セクションを含むリリース ノートを追加します。 :ref:`テストを更新して、警告をテスト <testing-deprecated-functionality>` します。"

#: ../../deprecation_policy.rst:59
msgid "*Reason*: removals must be highly visible for at least one version, to minimize the surprise to users when they actually go."
msgstr "*理由* : ユーザーが実際に行ったときの驚きを最小限に抑えるために、削除は少なくとも 1 つのバージョンで目立つようにする必要があります。"

#: ../../deprecation_policy.rst:62
msgid "Set a removal date for the old feature, and remove it (and the warnings) when reached.  This must be at least three months after the version with the warnings was first released, and cannot be the minor version immediately after the warnings.  Add an ``upgrade`` release note that lists all the removals.  For example, if the alternative path was provided in ``0.19.0`` and the warnings were added in ``0.20.0``, the earliest version for removal is ``0.22.0``, even if ``0.21.0`` was released more than three months after ``0.20.0``."
msgstr "古い機能の削除日を設定し、到達したらそれ (および警告) を削除します。 これは、警告のあるバージョンが最初にリリースされてから 3 か月以上経過している必要があり、警告の直後のマイナー バージョンであってはなりません。 すべての削除を一覧表示する ``upgrade`` リリースノートを追加します。 たとえば、代替パスが ``0.19.0`` で提供され、警告が ``0.20.0`` で追加された場合、 ``0.20.0`` から 3 か月以上後に ``0.21.0`` がリリースされたとしても、削除される最も古いバージョンは ``0.22.0`` です。"

#: ../../deprecation_policy.rst:73
msgid "These are *minimum* requirements.  For removal of significant or core features, give users at least an extra minor version if not longer."
msgstr "これらは最小要件です。 重要な機能またはコア機能を削除する場合は、少なくとも追加のマイナー バージョンをユーザーに提供してください。"

#: ../../deprecation_policy.rst:76
msgid "*Reason*: there needs to be time for users to see these messages, and to give them time to adjust.  Not all users will update their version of Qiskit immediately, and some may skip minor versions."
msgstr "*理由* : ユーザーがこれらのメッセージを見て、調整する時間が必要です。 すべてのユーザーが Qiskit のバージョンをすぐに更新するわけではなく、一部のユーザーはマイナー バージョンをスキップする場合があります。"

#: ../../deprecation_policy.rst:80
msgid "When a feature is marked as deprecated it is slated for removal, but users should still be able to rely on it to work correctly.  We consider a feature marked \"deprecated\" as frozen; we commit to maintaining it with critical bug fixes until it is removed, but we won't merge new functionality to it."
msgstr "機能が非推奨としてマークされている場合、その機能は削除される予定ですが、ユーザーは引き続き正しく機能するために信頼できるはずです。 「非推奨」とマークされた機能は凍結されていると見なされます。 削除されるまで重要なバグ修正を維持することを約束しますが、新しい機能をマージすることはありません。"

#: ../../deprecation_policy.rst:87
msgid "Changing behavior"
msgstr "動作の変更"

#: ../../deprecation_policy.rst:89
msgid "Changing behavior without a removal is particularly difficult to manage, because we need to have both options available for two versions, and be able to issue warnings.  For example, changing the type of the return value from a function will almost invariably involve making an API break, which is frustrating for users and makes it difficult for them to use Qiskit."
msgstr "2 つのバージョンで両方のオプションを利用可能にし、警告を発行できるようにする必要があるため、削除せずに動作を変更することは特に管理が困難です。 たとえば、関数からの戻り値の型を変更すると、ほとんどの場合、API が中断されます。これは、ユーザーにとってイライラし、Qiskit の使用を困難にします。"

#: ../../deprecation_policy.rst:95
msgid "The best solution here is often to make a new function, and then use :ref:`the procedures for removal <removing-features>` above."
msgstr "ここでの最善の解決策は、多くの場合、新しい関数を作成してから、上記の :ref:`削除手順 <removing-features>` を使用することです。"

#: ../../deprecation_policy.rst:98
msgid "If you absolutely must change the behavior of existing code (other than fixing bugs), you will need to use your best judgment to apply the guiding principles at the top of this document.  The most appropriate warning for behavioral changes is usually ``FutureWarning``.  Some possibilities for how to effect a change:"
msgstr "既存のコードの動作を絶対に変更する必要がある場合 (バグの修正以外) は、このドキュメントの上部にある指針を適用するために最善の判断を下す必要があります。 通常、動作の変化に対する最も適切な警告は ``FutureWarning`` です。 変更を行う方法のいくつかの可能性:"

#: ../../deprecation_policy.rst:104
msgid "If you are changing the default behavior of a function, consider adding a keyword argument to select between old and new behaviors.  When it comes time, you can issue a ``FutureWarning`` if the keyword argument is not given (*e.g.* if it is ``None``), saying that the new value will soon become the default.  You will need to go through the normal deprecation period for removing this keyword argument after you have made the behavior change.  This will take at least six months to go through both cycles."
msgstr "関数のデフォルトの動作を変更する場合は、キーワード引数を追加して、古い動作と新しい動作を選択することを検討してください。 時が来たら、キーワード引数が指定されていない場合 (たとえば、 ``None`` の場合)、新しい値がすぐにデフォルトになることを示す ``FutureWarning`` を発行できます。 動作を変更した後、このキーワード引数を削除するには、通常の非推奨期間を経過する必要があります。 これには、両方のサイクルを完了するのに少なくとも 6 か月かかります。"

#: ../../deprecation_policy.rst:112
msgid "If you need to change the return type of a function, consider adding a new function that returns the new type, and then follow the procedures for deprecating the old function."
msgstr "関数の戻り値の型を変更する必要がある場合は、新しい型を返す新しい関数を追加することを検討してから、古い関数を非推奨にする手順に従ってください。"

#: ../../deprecation_policy.rst:116
msgid "If you need to accept a new input that you cannot distinguish from an existing possibility because of its type, consider letting it be passed by a different keyword argument, or add a second function that only accepts the new form."
msgstr "タイプが原因で既存の可能性と区別できない新しい入力を受け入れる必要がある場合は、別のキーワード引数で渡すことを検討するか、新しい形式のみを受け入れる 2 番目の関数を追加します。"

#: ../../deprecation_policy.rst:124
msgid "Issuing deprecation warnings"
msgstr "非推奨警告の発行"

#: ../../deprecation_policy.rst:126
msgid "The proper way to raise a deprecation warning is to use the ``warn`` function from the `warnings module in the Python standard library <https://docs.python.org/3/library/warnings.html>`__, using the category ``DeprecationWarning``.  For example::"
msgstr "非推奨の警告を発生させる適切な方法は、カテゴリ ``DeprecationWarning`` を使用して、 `Python 標準ライブラリの warnings モジュール <https://docs.python.org/3/library/warnings.html>`__ の ``warn`` 関数を使用することです。 例えば："

#: ../../deprecation_policy.rst:143
msgid "Make sure you include the version of the package that introduced the deprecation warning (so maintainers can easily see when it is valid to remove it), and what the alternative path is."
msgstr "非推奨の警告を導入したパッケージのバージョンを必ず含めてください (メンテナーがそれを削除することが有効な時期を簡単に確認できるようにするため)、および代替パスが何であるかを確認してください。"

#: ../../deprecation_policy.rst:147
msgid "Take note of the ``stacklevel`` argument.  This controls which function is accused of being deprecated.  Setting ``stacklevel=1`` (the default) means the warning will blame the ``warn`` function itself, while ``stacklevel=2`` will correctly blame the containing function.  It is unusual to set this to anything other than ``2``, but can be useful if you use a helper function to issue the same warning in multiple places."
msgstr "``stacklevel`` 引数に注意してください。 これは、非推奨であると非難される関数を制御します。 ``stacklevel=1`` (デフォルト) を設定すると、警告は ``warn`` 関数自体を非難し、``stacklevel=2`` はそれを含む関数を正しく非難することを意味します。 これを ``2`` 以外に設定することはまれですが、ヘルパー関数を使用して複数の場所で同じ警告を発行する場合に役立ちます。"

#: ../../deprecation_policy.rst:158
msgid "Testing deprecated functionality"
msgstr "非推奨機能のテスト"

#: ../../deprecation_policy.rst:160
msgid "Whenever you add deprecation warnings, you will need to update tests involving the functionality.  The test suite should fail otherwise, because of the new warnings.  We must continue to test deprecated functionality throughout the deprecation period, to ensure that it still works."
msgstr "非推奨の警告を追加するたびに、機能に関連するテストを更新する必要があります。 それ以外の場合、新しい警告により、テスト スイートは失敗するはずです。 廃止された機能が引き続き機能することを確認するために、廃止期間を通じて廃止された機能を引き続きテストする必要があります。"

#: ../../deprecation_policy.rst:165
msgid "To update the tests, you need to wrap each call of deprecated behavior in its own assertion block.  For subclasses of ``unittest.TestCase`` (which all Qiskit test cases are), this is done by:"
msgstr "テストを更新するには、非推奨の動作の各呼び出しを独自のアサーション ブロックでラップする必要があります。 ``unittest.TestCase`` (すべての Qiskit テスト ケース) のサブクラスの場合、これは次のように行われます。"

