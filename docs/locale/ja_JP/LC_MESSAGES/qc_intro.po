msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-14 00:20+0000\n"
"PO-Revision-Date: 2020-12-21 07:09\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/qc_intro.po\n"
"X-Crowdin-File-ID: 9418\n"
"Language: ja_JP\n"

#: ../../qc_intro.rst:9
msgid "Quantum computing in a nutshell"
msgstr "量子コンピューティングの概要"

#: ../../qc_intro.rst:11
msgid "Quantum computing represents a new paradigm in computation that utilizes the fundamental principles of quantum mechanics to perform calculations.  If you are reading this then you have undoubtedly heard that the promise of quantum computation lies in the possibility of efficiently performing a handful of tasks such as prime factorization, quantum simulation, and optimization; computations that at size are beyond the capabilities of even the largest of classical computers."
msgstr "量子計算は、量子力学の基本原理を利用して計算を行う、新しい計算のパラダイムです。これを読んでいる方は量子計算の将来性が、素因数分解、量子シミュレーション、最適化といった古典的なコンピュータの能力を超える一部のタスクを、効率的に実行できる可能性にあるということを聞いたことがあるでしょう。"

#: ../../qc_intro.rst:18
msgid "The power of quantum computing rests on two cornerstones of quantum mechanics, namely :ref:`superposition <qc-intro-superposition>` and :ref:`entanglement <qc-intro-entanglement>` that highlight the wave- and particle-like aspects of quantum computation, respectively.  Qiskit is an SDK for performing quantum computations that utilize these quantum mechanical principles using the language of :ref:`quantum circuits <qc-intro-circuits>`.  Comprised of quantum gates, instructions, and classical control logic, quantum circuits allow for expressing complex algorithms and applications in a abstract manner that can be executed on a quantum computer.  At its core, Qiskit is a quantum circuit construction, optimization, and execution engine. Additional algorithm and application layers leverage quantum circuits, often in concert with classical computing resources, to solve problems in optimization, quantum chemistry, physics, machine learning, and finance.  In what follows, we give a very brief overview of quantum computing, and how Qiskit is used at each step.  Interested readers are directed to additional in-depth materials for further insights."
msgstr "量子計算の強みは、量子力学の二つの原理、すなわち :ref:`重ね合わせ <qc-intro-superposition>` と :ref:`エンタングルメント <qc-intro-entanglement>` に基づいています。 Qiskit は、 :ref:`量子回路 <qc-intro-circuits>` の枠組みでこうした量子力学の原理を活用して、量子計算を実行するための SDK です。量子ゲート、命令、古典的な制御ロジックから構成される量子回路は、複雑なアルゴリズムやアプリケーションを抽象的に表現し、量子コンピュータ上で実行することができます。その中核をなす Qiskit は、量子回路の構築、最適化、実行エンジンです。また、アルゴリズムやアプリケーションのレイヤーでは、古典的な計算リソースを連携させながら量子回路を利用することで、最適化、量子化学、物理学、機械学習、金融などの問題を解きます。"

#: ../../qc_intro.rst:37
msgid "Superposition"
msgstr "重ね合わせ"

#: ../../qc_intro.rst:39
msgid "Like a classical computer, a quantum computer operates on bits.  However, while classical bits can only be found in the states 0 and 1, a quantum bit, or qubit, can represent the values 0 and 1, or linear combinations of both.  These linear combinations are known as **superpositions** (or superposition states) and allow for representing, and processing, exponentially many logical states simultaneously."
msgstr "古典的なコンピューターと同様に、量子コンピューターもビット上で動作します。しかし、古典ビットは 0 と 1 の状態しか取りませんが、量子ビットは 0 と 1 の値およびそれらの線形結合を表現することができます。これらの線形結合は **重ね合わせ** (あるいは重ね合わせ状態) と呼ばれ、指数関数的に多くの論理状態を同時に表現し、処理することができます。"

#: ../../qc_intro.rst:45
msgid "To see how this resource is utilized in quantum computation we first turn to a classical analog: noise cancellation.  Noise cancellation, as done in noise cancelling headphones for example, is performed by employing the principle of superposition along with interference to reduce the amplitude of unwanted noise by generating a tone of approximately the same frequency and amplitude, but out of phase by a value of :math:`\\pi` (or any other odd integer of :math:`\\pi`)."
msgstr "このリソースが量子計算でどのように利用されているかをみるために、まず古典的なアナログである、ノイズキャンセリングに目を向けます。ノイズキャンセリングは、例えばノイズキャンセリング・ヘッドフォンで行われているように、 :math:`\\pi` (あるいは :math:`\\pi` の奇数倍) だけ位相のずれた、ほぼ同じ周波数と振幅の音波を生成して、重ね合わせの原理と干渉を活用することで、不要なノイズの振幅を小さくしています。"

#: ../../qc_intro.rst:56
msgid "Approximate cancellation of a noise signal by a tone of nearly equal amplitude and offset by a phase of :math:`\\sim \\pi`."
msgstr "およそ :math:`\\pi` だけ位相のずれた、振幅のほぼ等しい音波による、ノイズ信号の近似的な打ち消し合い"

#: ../../qc_intro.rst:59
msgid "As shown above, when the phase difference is close to an odd multiple of :math:`\\pi`, the superposition of the two waves results in interference, and an output that is significantly reduced compared to the original.  The result is the signal of interest unincumbered by noise. Although this processing is done by digital circuits, the amplitude and phase are continuous variables that can never be matched perfectly, resulting in incomplete correction."
msgstr "上記のように、位相差が :math:`\\pi` の奇数倍に近い場合、二つの波の重ね合わせは干渉をもたらし、元の波と比べて振幅が大幅に減少した出力が得られます。その結果、ノイズの影響を受けない信号が得られます。この処理はデジタル回路で行われますが、振幅と思想は連続変数であるため、完全に一致することはなく、不完全な補正となってしまいます。"

#: ../../qc_intro.rst:66
msgid "A general computation on a quantum computer proceeds in very much the same way as noise cancellation. To begin, one prepares a superposition of all possible computation states.  This is then used as an input to a :ref:`quantum circuit <qc-intro-circuits>` that selectively interferes the components of the superposition according to a prescribed algorithm. What remains after cancelling the relative amplitudes and phases of the input state is the solution to the computation performed by the quantum circuit."
msgstr "量子コンピューター上での一般的な計算は、ノイズキャンセリングとよく似ています。まず、すべての計算状態の重ね合わせを準備します。これは、所定のアルゴリズムにしたがって、重ね合わせの成分を選択的に干渉させる :ref:`量子回路 <qc-intro-circuits>` への入力として使用されます。入力状態の相対的な振幅と位相を打ち消した後に残るのは、量子回路によって実行される計算の解となっています。"

#: ../../qc_intro.rst:76
msgid "Quantum computation as an interference generation process."
msgstr "干渉発生過程としての量子計算"

#: ../../qc_intro.rst:81
msgid "Entanglement"
msgstr "エンタングルメント"

#: ../../qc_intro.rst:83
msgid "The second principle of quantum mechanics that quantum computation can utilize is the phenomena of **entanglement**.  Entanglement refers to states of more than one qubit (or particles in general) in which the combined state of the qubits contains more information than the qubits do independently.  The overwhelming majority of multi-qubit quantum states are entangled, and represent a valuable resource.  For example, entangled states between qubits can be used for quantum teleportation, where a shared entangled state of two qubits can be manipulated to transfer information from one qubit to another, regardless of the relative physical proximity of the qubits. Entangled states, as natural states of quantum systems, are also of importance in disciplines such as quantum chemistry and quantum simulation where the solution(s) often take the form of entangled multi-qubit states.  One can also utilize highly-entangled quantum states of multiple qubits to, for example, generate certifiably random numbers.  There is even a `Qiskit package <https://qiskit-rng.readthedocs.io/en/latest/>`_ to do this!"
msgstr "量子計算が利用することのできる量子力学の第二原理は、 **エンタングルメント** という現象です。エンタングルメントとは、二つ以上の量子ビット (あるいは一般に複数粒子) の状態のことで、量子ビットの結合した状態は、単独の量子ビットよりも多くの情報を含んでいます。複数量子ビットの量子状態の圧倒的多数はエンタングルした状態であり、貴重なリソースとなっています。例えば、量子ビット間のエンタングル状態は量子テレポーテーションに用いることができます。量子テレポーテーションでは、二つの量子ビット間に共有されたエンタングル状態を操作することで、物理世界における相対的な近さによらず、一方の量子ビットからもう一方の量子ビットへ情報を転送することができます。量子系の自然な状態としてのエンタングル状態は、多くの場合に解がエンタングルした複数量子ビット状態となる量子化学や量子シミュレーションのような分野でも重要です。また例えば、複数量子ビットの非常にエンタングルした量子状態を利用することで、正真正銘の乱数を生成することもできます。これを行うための `Qiskit パッケージ <https://qiskit-rng.readthedocs.io/en/latest/>`_ さえ用意されています。"

#: ../../qc_intro.rst:101
msgid "Quantum circuits"
msgstr "量子回路"

#: ../../qc_intro.rst:103
msgid "Algorithms and applications that utilize quantum mechanical resources can be easily and efficiently written in the language of **quantum circuits**. A quantum circuit is a computational routine consisting of coherent quantum operations on quantum data, such as that held in qubits, and concurrent real-time classical computation. Each horizontal line, or wire in a circuit represents a qubit, with the left end of the wire being the initial quantum data, and the right being the final quantum data generated by the quantum circuit's computation. Operations on qubits can be placed on these wires, and are represented by boxes."
msgstr "量子力学的なリソースを利用するアルゴリズムやアプリケーションは、 **量子回路** の枠組みで簡単かつ効率的に記述することができます。量子回路とは、量子ビットに保持されているような量子データに対するコヒーレントな量子演算と、リアルタイムの古典計算を同時に行う計算ルーチンのことです。回路内の各水平線は量子ビットを表し、線の左端が初期の量子データ、右端が量子回路の計算によって生成される最終的な量子データとなっています。量子ビットに対する演算は、これらの線上に配置することができ、箱として表されます。"

#: ../../qc_intro.rst:115
msgid "Quantum state teleportation circuit revisited."
msgstr "量子状態テレポーテーション回路再訪"

#: ../../qc_intro.rst:117
msgid "Quantum circuits enable a quantum computer to take in classical information and output a classical solution, leveraging quantum principles such as :ref:`superposition <qc-intro-superposition>` and :ref:`entanglement <qc-intro-entanglement>` to perform the computation."
msgstr "量子回路は、量子コンピューターが古典的な情報を取り込んで、古典的な解を出力することを可能にし、 :ref:`重ね合わせ <qc-intro-superposition>` や :ref:`エンタングルメント <qc-intro-entanglement>` といった量子力学の原理を利用して計算を実行します。"

#: ../../qc_intro.rst:122
msgid "A typical quantum algorithm workflow consists of:"
msgstr "典型的な量子アルゴリズムのワークフローは、以下のように構成されています。"

#: ../../qc_intro.rst:124
msgid "The problem we want to solve,"
msgstr "解決したい問題"

#: ../../qc_intro.rst:125
msgid "A classical algorithm that generates a description of a quantum circuit,"
msgstr "量子回路の記述を生成する古典的なアルゴリズム"

#: ../../qc_intro.rst:126
msgid "The quantum circuit that needs to be run on quantum hardware,"
msgstr "量子ハードウェア上で実行される量子回路"

#: ../../qc_intro.rst:127
msgid "And the output classical solution to the problem that it produces."
msgstr "それが生成する問題に対しての古典的な出力解"

#: ../../qc_intro.rst:129
msgid "Quantum gates form the primitive operations on quantum data.  Quantum gates represent information preserving, reversible transformations on the quantum data stored in qubits. These \"unitary\" transformations represent the quantum mechanical core of a quantum circuit.  Some gates such as :math:`X` (also written as :math:`\\oplus`) and :math:`CX` have classical analogs such as bit-flip and :math:`XOR` operations, respectively, while others do not.  The Hadamand (:math:`H`) gate, along with the parameterized rotates :math:`rX(\\theta)` and :math:`rY(\\theta)`, generate non-classical superposition states, while gates such as :math:`Z`, :math:`rZ(\\theta)`, :math:`S`, and :math:`T` impart phases that can be used for interference.  Two-qubit gates like the :math:`CX` gate are used to generate entanglement between pairs of qubits, or to \"kick\" the phase from one qubit ot another.   In contrast to gates, operations like \"measurement\", represented by the meter symbol in a box with a line connecting to a \"target\" wire, extract enough information about a qubit's state, including the phase, to be able to represent it as a classical bit and write that classical bit onto the target wire (often a fully classical wire in some readout device). This is the typical way to take information from the quantum data into a classical device.  Note that with only :math:`H`, :math:`rZ(\\theta)`, :math:`CX`, and measurement gates, i.e. a universal gate set, we can construct any quantum circuit, including those efficiently computing the dynamics of any physical system in nature."
msgstr "量子ゲートは、量子データの最も基本的な操作をなしています。量子ゲートは量子ビットに格納された量子データの情報保存および可逆的な変換を表現しています。これらの「ユニタリー」変換は量子回路の量子力学的な本質を表しています。 :math:`X` (:math:`\\oplus` とも書かれる) や :math:`CX` といったいくつかのゲートは、それぞれビット反転や :math:`XOR` 演算のような古典的なアナログを持っていますが、他のゲートにはそれがありません。アダマール (:math:`H`) ゲートは、パラメータ表示された回転 :math:`rX(\\theta)` や :math:`rY(\\theta)` とともに、非古典的な重ね合わせ状態を生成します。 :math:`Z` や :math:`rZ(\\theta)` , :math:`S` , :math:`T` といったゲートは、干渉に用いることのできる位相に影響を与えます。 :math:`CX` ゲートのような二量子ビットゲートは、量子ビット対の間にエンタングルメントを生成したり、ある量子ビットから別の量子ビットへ位相を「キック」したりするために用いられます。ゲートとは対照的に、「測定」のような操作は、線が「ターゲット」ワイヤに接続されている、箱の中のメーターシンボルで表され、位相を含む量子ビットの状態に関する十分な情報を抽出し、それを古典ビットとして表現して、その古典ビットをターゲットワイヤ (多くの場合、読み出しデバイスでこれは完全に古典的なワイヤです) に書き込むことができます。これが、量子データから古典デバイスに情報を取り込む典型的な方法です。 :math:`H`, :math:`rZ(\\theta)`, :math:`CX` と測定ゲート、すなわちユニバーサルゲートセットだけによって、自然界の任意の物理システムのダイナミクスを効率的に計算できるものを含む、あらゆる量子回路を構築できるということに注意してください。"

#: ../../qc_intro.rst:148
msgid "Some workloads contain an extended sequence of interleaved quantum circuits and classical computation, for example variational quantum algorithms execute quantum circuits within an optimization loop. For these workloads, system performance increases substantially if the quantum circuits are parameterized, and transitions between circuit execution and non-current classical computation are made efficient. Consequently, we define **near-time computation** to refer to computations with algorithms that make repeated use of quantum circuits with hardware developed to speed up the computation time. In near-time computation, the classical computation occurs on a time scale longer than the coherence of the quantum computation. Contrast this with **real-time computation**, where the classical computation occurs within the decoherence time of the quantum device."
msgstr "ワークロードの中には、量子回路と古典計算を交互に配置した、拡張シーケンスを含むものがあり、例えば変分量子アルゴリズムでは最適化ループ内で量子回路を実行します。このようなワークロードでは、量子回路をパラメータ化し、回路実行と古典計算の間の遷移を効率的に行うことで、システムの性能を大幅に向上させることができます。そこで、計算時間を高速化するために開発されたハードウェアを用いて、量子回路を繰り返し利用するアルゴリズムを用いた計算を **near-time computation** と定義します。 near-time computation では、古典計算は量子計算のコヒーレンスよりも長い時間スケールで行われます。これは、古典的な計算が量子デバイスのデコヒーレンス時間内に行われる **real-time computation** とは対照的です。"

#: ../../qc_intro.rst:159
msgid "Constructing complex quantum circuits with minimal effort is at the heart of Qiskit. With only a few lines of code, is it possible to construct complex circuits like the one above"
msgstr "最小限の労力で、複雑な量子回路を構築することが、 Qiskit の核心です。たった数行のコードで、上記のような複雑な回路を構築することができるでしょうか。"

#: ../../qc_intro.rst:185
msgid "that support a rich feature set of operations, and can be passed to a range of :ref:`quantum computers <qc-intro-computers>` or classical simulators."
msgstr "豊富な操作の機能セットをサポートしており、 :ref:`量子コンピューター <qc-intro-computers>` や古典的なシミュレーターに渡すことができます。"

#: ../../qc_intro.rst:191
msgid "Quantum computers"
msgstr "量子コンピューター"

#: ../../qc_intro.rst:197
msgid "A view inside the IBM Quantum System One."
msgstr "IBM Quantum System Oneの内側"

#: ../../qc_intro.rst:199
msgid "Quantum computers that are programmed using quantum circuits are called **gate-based quantum computers**. Such systems can be constructed out of any quantum technology that allows for defining qubit elements, and can implement single- and multi-qubit gate operations with high-fidelity. At present, architectures based on superconducting circuits, trapped-ions, semiconducting quantum-dots, photons, and neutral atoms, are actively being developed, and many are accessible to users over the internet. Qiskit is agnostic with respect to the underlying architecture of a given quantum system, and can compile a quantum circuit to match the entangling gate topology of a quantum device, map the circuit instructions into the native gate set of the device, and optimize the resulting quantum circuit for enhanced fidelity."
msgstr "量子回路を用いてプログラムされた量子コンピューターは、 **ゲートベースの量子コンピューター** と呼ばれています。このようなシステムは、量子ビット素子を定義することのできる量子技術を用いて構成することができ、単一および複数量子ビットのゲート演算を高精度に実装することができます。現在、超伝導回路、トラップイオン、半導体量子ドット、光子、中性原子に基づいたアーキテクチャーが積極的に開発されており、その多くはインターネットを介してユーザーがアクセスできるようになっています。 Qiskit は与えられた量子システムの基礎となるアーキテクチャーにとらわれず、量子デバイスのエンタングルゲートトポロジーに合わせて量子回路をコンパイルして、回路命令をデバイスのネイティブゲートセットにマッピングし、結果として得られた量子回路を最適化することで忠実度を高めることができます。"

#: ../../qc_intro.rst:210
msgid "As with the noise cancellation example above, the amplitude and phase of qubits are continuous degrees of freedom upon which operations can never be done exactly.  These gates errors, along with noise from the environment in which a quantum computer resides, can conspire to ruin a computation if not accounted for in the compilation process, and may require additional mitigation procedures in order to obtain a high-fidelity output on present day quantum systems susceptible to noise.  Qiskit is capable of taking into account a wide range of device calibration metrics (see figure below) in its compilation strategy, and can select an optimal set of qubits on which to run a given quantum circuit.  In addition, Qiskit hosts a collection of noise mitigation techniques for extracting a faithful representation of a quantum circuits output."
msgstr "上述のノイズキャンセリングの例と同様に、量子ビットの振幅と位相は連続的な自由度であるため、演算が正確に行われることはありません。これらのゲートエラーは、量子コンピューターの置かれた環境からのノイズとともに、コンパイル以外の段階において計算を台無しにする可能性があります。そのため、ノイズの影響を受けやすい現在の量子システムで高忠実度の出力を得るためには、追加の緩和手順が必要になります。 Qiskit ではそのコンパイル戦略において、様々なデバイス較正指標 (下図参照) を考慮することができ、量子回路を実行するために最適な量子ビットのセットを選択することができます。さらに Qiskit には、量子回路の出力の忠実な表現を得るための、ノイズ緩和テクニックが集められています。"

#: ../../qc_intro.rst:224
msgid "Topology and error rates for the IBM Quantum *ibmq_manhattan* system."
msgstr "IBM Quantum *ibmq_manhattan* システムのトポロジーとエラー率"

#: ../../qc_intro.rst:228
msgid "Where to go from here"
msgstr "次なる学び"

#: ../../qc_intro.rst:230
msgid "Hopefully we have given the reader a taste of what quantum computation has to offer and you are hungry for more.  If so, there are several resources that may be of interest:"
msgstr "量子計算が提供するものを読者の皆さんに体験してもらい、さらに多くのことを知りたいと思ってもらえたことを期待しています。もしそのようであれば、興味のあるかもしれない資料がいくつか用意されています。"

#: ../../qc_intro.rst:234
msgid "`Getting started with Qiskit <getting_started.html>`_ - Dive right into Qiskit."
msgstr "`Getting started with Qiskit <getting_started.html>`_ - Qiskit に飛び込んでみましょう。"

#: ../../qc_intro.rst:236
msgid "`Field guide to quantum computing <https://quantum-computing.ibm.com/docs/iqx/guide/>`_ : A gentle physics-based introduction written by some of the founders of quantum computation that makes use of the interactive circuit composer."
msgstr "`Field guide to quantum computing <https://quantum-computing.ibm.com/docs/iqx/guide/>`_ : 量子計算の創始者たちが、対話型の回路コンポーザーを利用して書いた、物理学に基づく易しい入門"

#: ../../qc_intro.rst:240
msgid "`Qiskit textbook <https://qiskit.org/textbook>`_ : A university quantum algorithms/computation course supplement based on Qiskit."
msgstr "`Qiskit textbook <https://qiskit.org/textbook>`_ : Qiskit に基づいた大学における量子アルゴリズム・計算コースの補助教材"

