msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-02 21:04+0000\n"
"PO-Revision-Date: 2023-03-02 22:40\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/maintainers_guide.po\n"
"X-Crowdin-File-ID: 9838\n"

#: ../../maintainers_guide.rst:4
msgid "Maintainers Guide"
msgstr "メンテナーガイド"

#: ../../maintainers_guide.rst:6
msgid "This document defines a *maintainer* as a contributor with merge privileges. The information detailed here is mostly related to Qiskit releases and other internal processes."
msgstr "このドキュメントでは、 *メンテナー* をマージ権限を持つ貢献者として定義しています。 ここで詳しく説明する情報は、主にQiskitのリリースやその他の内部プロセスに関連しています。"

#: ../../maintainers_guide.rst:12
msgid "Stable Branch Policy"
msgstr "ブランチの安定化ポリシー"

#: ../../maintainers_guide.rst:14
msgid "The stable branch is intended to be a safe source of fixes for high-impact bugs and security issues that have been fixed on master since a release. When reviewing a stable branch PR, we must balance the risk of any given patch with the value that it will provide to users of the stable branch. Only a limited class of changes are appropriate for inclusion on the stable branch. A large, risky patch for a major issue might make sense, as might a trivial fix for a fairly obscure error-handling case. A number of factors must be weighed when considering a change:"
msgstr "安定ブランチは、リリース後にマスター上で修正された、影響の大きいバグやセキュリティー問題に対応する修正の安全なソースになることを目的としています。 安定ブランチのプルリクエスト(PR) をレビューする時、与えられたパッチのリスクと安定ブランチの価値のバランスを取る必要があります。 安定ブランチへの取り込みは、限定されたクラスのみの変更が適しています。 大きな問題に対する大きくリスクの高いパッチは、あまり目立たないのエラー処理のための些細な修正同様、理にかなっているかもしれません。 変更をレビューする際には、多くの要因を検討する必要があります。"

#: ../../maintainers_guide.rst:24
msgid "The risk of regression: even the tiniest changes carry some risk of breaking something, and we really want to avoid regressions on the stable branch."
msgstr "リグレッションのリスク: 最も小さな変更でも何かを壊すリスクがあり、stableブランチ上でのリグレッションは本当に避けたいです。"

#: ../../maintainers_guide.rst:27
msgid "The user visibility benefit: are we fixing something that users might actually notice, and if so, how important is it?"
msgstr "ユーザーに見える利益: ユーザーが本当に気が付く修正していますか？そうであれば、その重要性はどのくらいですか？"

#: ../../maintainers_guide.rst:29
msgid "How self-contained the fix is: if it fixes a significant issue but also refactors a lot of code, it's probably worth thinking about what a less risky fix might look like."
msgstr "修正の自己完結度:　重要な問題を修正するだけでなく多くのコードをリファクタリングしている場合は、リスクの低い修正がどのようなものになるかを検討する価値があると考えられます。"

#: ../../maintainers_guide.rst:32
msgid "Whether the fix is already on master: a change must be a backport of a change already merged onto master, unless the change simply does not make sense on master."
msgstr "修正がすでにマスターブランチにあるかどうか: 変更がマスターに対して意味を持っていない場合、変更は既にマスターにマージされた変更のバックポートでなければなりません。"

#: ../../maintainers_guide.rst:39
msgid "Backporting procedure:"
msgstr "バックポーティングの方法"

#: ../../maintainers_guide.rst:41
msgid "When backporting a patch from master to stable, we want to keep a reference to the change on master. When you create the branch for the stable PR, use::"
msgstr "マスターから安定ブランチへパッチをバックポーティングする際には、マスター上の変更の参照を保持します。 安定したプルリクエスト(PR) のブランチを作成する場合、以下を使用して下さい:"

#: ../../maintainers_guide.rst:47
msgid "However, this only works for small self-contained patches from master. If you need to backport a subset of a larger commit (from a squashed PR, for example) from master, do this manually. In these cases, add::"
msgstr "ただし、これはマスターからの小さな自己完結型パッチのみに対応しています。 マスターから、より大きなコミットのサブセット (例えば、squashされた PRなど) をバックポートする必要がある場合は、手動で行います。 このような場合には、以下を追加します:"

#: ../../maintainers_guide.rst:53
msgid "so that we can track the source of the change subset, even if a strict cherry-pick doesn\\'t make sense."
msgstr "そうすれば、厳格なcherry-pickの意味が分からなくても、変更サブセットのソースを追跡できるようになります。"

#: ../../maintainers_guide.rst:56
msgid "If the patch you're proposing will not cherry-pick cleanly, you can help by resolving the conflicts yourself and proposing the resulting patch. Please keep Conflicts lines in the commit message to help review of the stable patch."
msgstr "提案するパッチがきれいにcherry-pickしない場合は、競合を自分で解決し、その結果のパッチを提案することができます。 安定したパッチのレビューをサポートするために、コミット・メッセージ内の競合行を保持してください。"

#: ../../maintainers_guide.rst:64
msgid "Backport labels"
msgstr "バックポート・ラベル"

#: ../../maintainers_guide.rst:66
msgid "Bugs or PRs tagged with ``stable backport potential`` are bugs that apply to the stable release too and may be suitable for backporting once a fix lands in master. Once the backport has been proposed, the tag should be removed."
msgstr "``stable backport potential`` とタグ付けされたバグやプルリクエスト (PR) は、安定したリリースにも適用されるバグであり、マスターの一時修正が行われると、バックポーティングに適している可能性があります。 バックポートが提案されると、タグを削除する必要があります。"

#: ../../maintainers_guide.rst:71
msgid "Include ``[Stable]`` in the title of the PR against the stable branch, as a sign that setting the target branch as stable was not a mistake. Also, reference to the PR number in master that you are porting."
msgstr "ターゲット・ブランチを安定と設定したことが間違いないようにするために、安定ブランチに対するプルリクエスト (PR) のタイトルに ``[Stable]`` を含めて下さい。また、ポーティングしているマスター中のプルリクエスト (PR) 番号を参照して下さい。"

#: ../../maintainers_guide.rst:80
msgid "Qiskit Versioning"
msgstr "Qiskit バージョン管理"

#: ../../maintainers_guide.rst:82
msgid "The Qiskit project is made up of several elements each performing different functionality. Each is independently useful and can be used on their own, but for convenience we provide this repository and meta-package to provide a single entrypoint to install all the elements at once. This is to simplify the install process and provide a unified interface to end users. However, because each Qiskit element has its own releases and versions, some care is needed when dealing with versions between the different repositories. This document outlines the guidelines for dealing with versions and releases of both Qiskit elements and the meta-package."
msgstr "Qiskitプロジェクトは、それぞれが異なる機能を実行するいくつかの要素で構成されています。それぞれが独立して有用であり、単独で使用できますが、便宜上、このリポジトリとメタパッケージを提供して、すべての要素を一度にインストールするための単一のエントリポイントを提供します。 これは、インストールプロセスを簡素化し、エンドユーザーに統一されたインターフェイスを提供するためです。 ただし、各Qiskit要素には独自のリリースとバージョンがあるため、異なるリポジトリ間でバージョンを処理する場合は注意が必要です。 このドキュメントでは、Qiskit要素とメタパッケージの両方のバージョンとリリースを処理するためのガイドラインの概要を説明します。"

#: ../../maintainers_guide.rst:92
msgid "For the rest of this guide the standard Semantic Versioning nomenclature will be used of: ``Major.Minor.Patch`` to refer to the different components of a version number. For example, if the version number was ``0.7.1``, then the major version is ``0``, the minor version ``7``, and the patch version ``1``."
msgstr "このガイドの残りでは、異なるコンポーネントのバージョン番号を参照するのに、標準のセマンティック バージョニング (Semantic Versioning) 命名規則: ``Major.Minor.Patch`` を採用します。例えば、バージョン番号が ``0.7.1`` だった場合、メジャーバージョンは ``0`` 、マイナーバージョンが ``7``、そしてパッチバージョンが ``1`` です。"

#: ../../maintainers_guide.rst:99
msgid "Meta-package Version"
msgstr "メタパッケージバージョン"

#: ../../maintainers_guide.rst:101
msgid "The Qiskit meta-package version is an independent value that is determined by the releases of each of the elements being tracked. Each time we push a release to a tracked component (or add an element) the meta-package requirements, and version will need to be updated and a new release published. The timing should be coordinated with the release of elements to ensure that the meta-package releases track with element releases."
msgstr "Qiskitメタパッケージバージョンは、追跡対象の各要素のリリースによって決定される独立した値です。\n"
"リリースを追跡対象コンポーネントにプッシュする(または要素を追加する)たびに、メタパッケージの要件とバージョンを更新し、新しいリリースを公開する必要があります。 タイミングを要素のリリースと調整して、メタパッケージのリリースが要素のリリースを追跡するようにします。"

#: ../../maintainers_guide.rst:109
msgid "Adding New Tracked Elements"
msgstr "新しい追跡要素の追加"

#: ../../maintainers_guide.rst:111
msgid "When a new Qiskit element is being added to the meta-package requirements, we need to increase the **Minor** version of the meta-package."
msgstr "新しいQiskit要素がメタパッケージ要件に追加されると、メタパッケージのマイナーバージョンを増やす必要があります。"

#: ../../maintainers_guide.rst:114
msgid "For example, if the meta-package is tracking 2 elements ``qiskit-aer`` and ``qiskit-terra`` and its version is ``0.7.4``. Then we release a new element ``qiskit-new`` that we intend to also have included in the meta-package. When we add the new element to the meta-package we increase the version to ``0.8.0``."
msgstr "たとえば、メタパッケージが2つの要素 ``qiskit-aer`` と ``qiskit-terra`` を追跡しており、そのバージョンが ``0.7.4`` であるとします。次に、メタパッケージに含める予定の新しい要素 ``qiskit-new`` をリリースします。メタパッケージに新しい要素を追加するとき、バージョンを ``0.8.0`` に増やします。"

#: ../../maintainers_guide.rst:122
msgid "Patch Version Increases"
msgstr "パッチバージョンの増加"

#: ../../maintainers_guide.rst:124
msgid "When any Qiskit element that is being already tracked by the meta-package releases a patch version to fix bugs in a release, we need also bump the requirement in the ``setup.py`` and then increase the patch version of the meta-package."
msgstr "メタパッケージによって既に追跡されているQiskit要素が、バグを修正するためのパッチ・バージョンをリリースする際は、``setup.py`` の要件を上げてから、メタパッケージのパッチ・バージョンを増やす必要もあります。"

#: ../../maintainers_guide.rst:129
msgid "For example, if the meta-package is tracking 2 elements ``qiskit-terra==0.8.1`` and ``qiskit-aer==0.2.1``, with the current version ``0.9.6``. When qiskit-terra release a new patch version to fix a bug ``0.8.2`` the meta-package will also need to increase its patch version and release, becoming ``0.9.7``."
msgstr "たとえば、メタパッケージが2つの要素 ``qiskit-terra == 0.8.1`` 、 ``qiskit-aer == 0.2.1`` を追跡していて 現在のバージョンが ``0.9.6`` だとします。 qiskit-terra がバグ ``0.8.2`` を修正するための新しいパッチ・バージョンをリリースすると、メタパッケージもパッチ・バージョンとリリースを増やして ``0.9.7`` にする必要があります。"

#: ../../maintainers_guide.rst:135
msgid "Additionally, there are occasionally packaging or other bugs in the meta-package itself that need to be fixed by pushing new releases. When those are encountered we should increase the patch version to differentiate it from the broken release. Do **not** delete the broken or any old releases from pypi in any situation, instead just increase the patch version and upload a new release."
msgstr "さらに、メタパッケージ自体には、新しいリリースをプッシュすることで修正する必要があるパッケージングまたはその他のバグが時々あります。 それらがおきたら、パッチバージョンを増やして、破損したリリースと区別する必要があります。 いかなる状況でもpypiから壊れたリリースや古いリリースを削除しないでください。代わりに、パッチバージョンを増やして新しいリリースをアップロードしてください。"

#: ../../maintainers_guide.rst:143
msgid "Minor Version Increases"
msgstr "マイナーバージョンの増加"

#: ../../maintainers_guide.rst:145
msgid "Besides when adding a new element to the meta-package, the minor version of the meta-package should also be increased anytime a minor version is increased in a tracked element."
msgstr "メタパッケージに新しい要素を追加することに加え、追跡される要素のマイナー・バージョンが増加するたびに、メタパッケージのマイナー・バージョンも増加させる必要があります。"

#: ../../maintainers_guide.rst:149
msgid "For example, if the meta-package is tracking 2 elements ``qiskit-terra==0.7.0`` and ``qiskit-aer==0.1.1`` and the current version is ``0.7.5``. When the ``qiskit-aer`` element releases ``0.2.0`` then we need to increase the meta-package version to be ``0.8.0`` to correspond to the new release."
msgstr "たとえば、メタパッケージが2つの要素 ``qiskit-terra == 0.7.0`` および ``qiskit-aer == 0.1.1`` を追跡しており、現在のバージョンが``0.7.5``であるとします。``qiskit-aer`` 要素が ``0.2.0`` をリリースしたら、新しいリリースに対応するためにメタパッケージのバージョンを ``0.8.0`` に増やす必要があります。"

#: ../../maintainers_guide.rst:155
msgid "Major Version Increases"
msgstr "メジャーバージョンの増加"

#: ../../maintainers_guide.rst:157
msgid "The major version is different from the other version number components. Unlike the other version number components, which are updated in lock step with each tracked element, the major version is only increased when all tracked versions are bumped (at least before ``1.0.0``). Right now, all the elements still have a major version number component of ``0``, and until each tracked element in the meta-repository is marked as stable by bumping the major version to be ``>=1``, then the meta-package version should not increase the major version."
msgstr "メジャー・バージョンは、他のバージョン番号コンポーネントとは異なります。追跡対象の各要素でロックステップで更新される他のバージョン番号コンポーネントとは異なり、メジャー・バージョンは、すべての追跡対象バージョンがバンプされたとき（少なくとも ``1.0.0`` の前に）にのみ増加します。現在、すべての要素のメジャー・バージョン番号コンポーネントは ``0`` であり、メジャー・バージョンを ``>= 1`` にバンプしてメタリポジトリ内の各追跡要素が安定しているとマークされるまでは、 パッケージ・バージョンは、メジャー・バージョンを増やすべきではありません。"

#: ../../maintainers_guide.rst:165
msgid "The behavior of the major version number component tracking after when all the elements are at >=1.0.0 has not been decided yet."
msgstr "すべての要素が> = 1.0.0になった後のメジャーバージョン番号コンポーネントトラッキングの動作はまだ決定されていません。"

#: ../../maintainers_guide.rst:169
msgid "Optional Extras"
msgstr "追加オプション"

#: ../../maintainers_guide.rst:171
msgid "In addition to the tracked elements, there are additional packages built on top of Qiskit which are developed in tandem with Qiskit, for example, the application repositories like qiskit-optimization. For convienence these packages are tracked by the Qiskit metapackage as optional extras that can be installed with Qiskit. Releases of these optional downstream projects do not trigger a metapackage release as they are unpinned and do not affect the metapackage version. If there is a compatibility issue between Qiskit and these downstream optional dependencies and the minimum version needs to be adjusted in a standalone release, this will only be done as a patch version release as it's a packaging bugfix."
msgstr "追跡された要素に加えて、Qiskitの上に構築された追加のパッケージがあります。これらはQiskitと連携して開発されます。たとえば、qiskit-optimizationなどのアプリケーションリポジトリです。 便宜上、これらのパッケージは、Qiskitとともにインストールできる追加オプションとしてQiskitメタパッケージによって追跡されます。 これらのオプションのダウンストリームプロジェクトのリリースは、固定が解除され、メタパッケージのバージョンに影響を与えないため、メタパッケージのリリースをトリガーしません。 Qiskitとこれらのダウンストリームのオプションの依存関係の間に互換性の問題があり、スタンドアロンリリースで最小バージョンを調整する必要がある場合、これはパッケージングのバグ修正であるため、パッチバージョンリリースとしてのみ行われます。"

#: ../../maintainers_guide.rst:183
msgid "Qiskit Element Requirement Tracking"
msgstr "Qiskit要素の要件の追跡"

#: ../../maintainers_guide.rst:185
msgid "While not strictly related to the meta-package and Qiskit versioning, how we track the element versions in the meta-package's requirements list is important. Each element listed in the ``setup.py`` should be pinned to a single version. This means that each version of Qiskit should only install a single version for each tracked element. For example, the requirements list at any given point should look something like::"
msgstr "メタパッケージとQiskitのバージョン管理に厳密に関連しているわけではありませんが、メタパッケージの要件リストで要素のバージョンを追跡する方法が重要です。 ``setup.py`` にリストされている各要素は、単一のバージョンに固定する必要があります。 つまり、Qiskitの各バージョンでは、追跡対象の要素ごとに1つのバージョンのみをインストールする必要があります。 たとえば、特定の時点での要件リストは次のようになります。"

#: ../../maintainers_guide.rst:197
msgid "This is to aid in debugging, but also make tracking the versions across multiple elements more transparent."
msgstr "これはデバッグに役立つだけでなく、複数の要素にわたるバージョンの追跡をより透明にするためでもあります。"

#: ../../maintainers_guide.rst:201
msgid "Documentation Structure"
msgstr "文書構造"

#: ../../maintainers_guide.rst:203
msgid "The way documentation is structured in Qiskit is to push as much of the actual documentation into the docstrings as possible. This makes it easier for additions and corrections to be made during development, because the majority of the documentation lives near the code being changed. There are three levels in the normal documentation structure in Terra:"
msgstr "Qiskitでドキュメントを構造化する方法は、できるだけ多くの実際のドキュメントをdocstringにプッシュすることです。 ドキュメントの大部分は変更されるコードの近くにあるため、これにより、開発中に追加や修正が簡単になります。 Terraの通常のドキュメント構造には3つのレベルがあります。"

#: ../../maintainers_guide.rst:231
msgid "The ``.rst`` files in the ``docs/apidocs``"
msgstr "``docs/apidocs`` の中の ``.rst`` ファイル"

#: ../../maintainers_guide.rst:210
msgid "These files are used to tell Sphinx which modules to include in the rendered documentation. This contains two pieces of information: an `internal reference <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#reference-names>`__ or `cross reference <https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#ref-role>`__ to the module, which can be used for internal links inside the documentation, and an `automodule directive <http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`__ used to parse the module docstrings from a specified import path. For example, the ``dagcircuit.rst`` file contains::"
msgstr "これらのファイルは、レンダリングされたドキュメントに含めるモジュールをSphinxに伝えるために使用されます。これには、ドキュメント内の内部リンクに使用できるモジュールへの `内部参照 <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#reference-names>`__ 、 `相互参照 <https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#ref-role>`__ および指定された挿入パスからモジュールのdocstringを解析するために使用される `自動モジュール・ディレクティブ <http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`__ の2つの情報が含まれます。 たとえば、``dagcircuit.rst`` ファイルには以下が含まれます。"

#: ../../maintainers_guide.rst:228
msgid "The only ``.rst`` file outside of this is ``qiskit.rst``, which contains the table of contents. If you're adding a new ``.rst`` file for a new module's documentation, make sure to add it to the `toctree <https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#table-of-contents>`__ in that file."
msgstr "これ以外の唯一の ``.rst`` ファイルは ``qiskit.rst`` で、目次が含まれています。 新しいモジュールのドキュメント用に新しい ``.rst`` ファイルを追加する場合は、そのファイルの `toctree <https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#table-of-contents>`__ に必ず追加してください。"

#: ../../maintainers_guide.rst:276
msgid "The module-level docstring"
msgstr "モジュール・レベルdocstring"

#: ../../maintainers_guide.rst:234
msgid "This docstring is at the module level for the module specified in the ``automodule`` directive in the rst file. If the module specified is a directory/namespace, the docstring should be specified in the ``__init__.py`` file for that directory. This module-level docstring contains more details about the module being documented. The normal structure to this docstring is to outline all the classes and functions of the public API that are contained in that module. This is typically done using the `autosummary directive <https://www.sphinx-doc.org/en/master/usage/extensions/autosummary.html>`__ (or `autodoc directives <http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`__ directly if the module is simple, such as in the case of ``qiskit.execute``). The autosummary directive is used to autodoc a list of different Python elements (classes, functions, etc.) directly without having to manually call out the autodoc directives for each one. The module-level docstring is where to provide a high-level overview of what functionality the module provides. This is normally done by grouping the different components of the public API together into multiple subsections."
msgstr "このdocstringは、rstファイルの ``automodule`` ディレクティブで指定されたモジュールのモジュール・レベルにあります。指定されたモジュールがディレクトリ/名前空間である場合、docstringはそのディレクトリの ``__init__.py`` ファイルで指定する必要があります。このモジュール・レベルのdocstringには、ドキュメント化されるモジュールに関する詳細が含まれています。このdocstringの通常の構造は、そのモジュールに含まれているパブリックAPIのすべてのクラスと関数の概要を説明することです。これは通常、`autosummary ディレクティブ <https://www.sphinx-doc.org/en/master/usage/extensions/autosummary.html>`__ を使用（または、``qiskit.execute`` の場合のようにモジュールが単純な場合は `autodoc ディレクティブ <http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`__ を直接使用）して行われます。 autosummaryディレクティブは、さまざまなPython要素（クラス、関数など）のリストを直接autodocするために使用されます。それぞれのautodocディレクティブを手動で呼び出す必要はありません。モジュールレベルのdocstringは、モジュールが提供する機能の概要を提供する場所です。これは通常、パブリックAPIのさまざまなコンポーネントを複数のサブセクションにグループ化することによって行われます"

#: ../../maintainers_guide.rst:251
msgid "For example, as in the previous dagcircuit module example, the contents of the module docstring for ``qiskit/dagcircuit/__init__.py`` would be::"
msgstr "例えば、前のdagcircuitモジュールの例と同様に、``qiskit/dagcircuit/__init__.py`` のdocstringモジュールの内容は次のようになります："

#: ../../maintainers_guide.rst:275
msgid "This is just an example and the actual module docstring for the dagcircuit module might diverge from this."
msgstr "これは単なる例であり、dagcircuitモジュールの実際のdocstringモジュールはこれとは異なる場合があります。"

#: ../../maintainers_guide.rst:293
msgid "The actual docstring for the elements listed in the module docstring"
msgstr "docstringモジュールにリストされる要素の実際のdocstring"

#: ../../maintainers_guide.rst:279
msgid "You should strive to document thoroughly all the public interfaces exposed using examples when necessary. For docstrings, `Google Python Style Docstrings <https://google.github.io/styleguide/pyguide.html?showone=Comments#38-comments-and-docstrings>`__ are used. This is parsed using the `napoleon sphinx extension <https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html>`__. The `napoleon documentation <https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html>`__ contains a good example of how docstrings should be formatted."
msgstr "必要に応じて、例を使って公開されているすべてのパブリック・インターフェイスを徹底的に文書化するように努める必要があります。 docstringsには、`Google Python Style Docstrings <https://google.github.io/styleguide/pyguide.html?showone=Comments#38-comments-and-docstrings>`__ が使用されます。 これは、 `napoleon sphinx extension <https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html>`__ を使用して解析されます。 `napoleon documentation <https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html>`__ には、docstringのフォーマット法の良い例が掲載されています。"

#: ../../maintainers_guide.rst:288
msgid "You can use any Sphinx directive or rst formatting in a docstring as it makes sense. For example, one common extension used is the ``jupyter-execute`` directive, which is used to execute a code block in Jupyter and display both the code and output. This is particularly useful for visualizations."
msgstr "理にかなっているように、docstringには、任意のSphinxディレクティブまたはrstフォーマットを使用できます。 例えば、一般的な拡張機能の1つに、Jupyterでコードブロックを実行し、コードと出力の両方を表示するために使用される ``jupyter-execute`` ディレクティブがあります。 これは特に視覚化に役立ちます。"

#: ../../maintainers_guide.rst:296
msgid "Documentation Integration"
msgstr "ドキュメントの統合"

#: ../../maintainers_guide.rst:298
msgid "The hosted documentation at https://qiskit.org/documentation/ covers the entire Qiskit project; Terra is just one component of that. As such, the documentation builds for the hosted version are built by the Qiskit meta-package repository https://github.com/Qiskit/qiskit. When commits are merged to that repo, the output of Sphinx builds are uploaded to the qiskit.org website. Those Sphinx builds are configured to pull in the documentation from the version of the Qiskit elements installed by the meta-package at that point. For example, if the meta-package version is currently 0.13.0, then that will copy the documentation from Terra's 0.10.0 release. When the meta-package's requirements are bumped, then it will start pulling documentation from the new version. This means that fixes for incorrect API documentation will need to be included in a new release. Documentation fixes are valid backports for a stable patch release per the stable branch policy (see :ref:`stable_branch_policy`)."
msgstr "https://qiskit.org/documentation/ でホストされているドキュメントは、Qiskitプロジェクト全体をカバーしています； Terraはその1つのコンポーネントにすぎません。 そのため、ホストされたバージョンのドキュメントのビルドは、Qiskitのメタパッケージ・リポジトリー https://github.com/Qiskit/qiskit によってビルドされます。 コミットがそのリポジトリにマージされると、Sphinxビルドの出力がqiskit.orgのウェブサイトにアップロードされます。 これらのSphinxビルドは、その時点でメタパッケージによってインストールされたQiskit要素のバージョンからドキュメントを取り込むように構成されています。 例えば、メタパッケージのバージョンが現在0.13.0である場合、Terraの0.10.0リリースからドキュメントをコピーします。 メタパッケージから要求があると、新しいバージョンからドキュメントが取得され始めます。 これは、間違っているAPIドキュメントを修正して新しいリリースに含める必要があることを意味します。 ドキュメントの修正は、安定版ブランチ・ポリシー（下記のセクションを参照）ごとに安定版パッチをリリースする有効なバックポートとなります。"

#: ../../maintainers_guide.rst:312
msgid "During the build process, the contents of each element's ``docs/apidocs/`` are recursively copied into a shared copy of ``doc/apidocs/`` in the meta-package repository along with all the other elements. This means that what is in the root of docs/apidocs on each element at a release will end up on the root of https://qiskit.org/documentation/apidoc/."
msgstr "ビルドプロセス中に、各要素の ``docs/apidocs/`` のコンテンツは、他のすべての要素とともに、メタパッケージ・リポジトリー内の ``doc/apidocs/`` の共有コピーに再帰的にコピーされます。 つまり、リリースの各要素のdocs/apidocsのルートにあるものは、最終的にはhttps://qiskit.org/documentation/apidoc/のルートになります。"

