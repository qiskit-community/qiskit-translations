msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-02 15:32+0000\n"
"PO-Revision-Date: 2021-04-02 16:37\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/chemistry/03_ground_state_solvers.po\n"
"X-Crowdin-File-ID: 9404\n"
"Language: ja_JP\n"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:10
msgid "This page was generated from `tutorials/chemistry/03_ground_state_solvers.ipynb`__."
msgstr "当ページは `tutorials/chemistry/03_ground_state_solvers.ipynb`__ から生成されました。"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/chemistry/03_ground_state_solvers.ipynb>`_."
msgstr "`IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/chemistry/03_ground_state_solvers.ipynb>`_ でインタラクティブに実行します。"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:9
msgid "Ground state solvers"
msgstr "基底状態ソルバー"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:21
msgid "Introduction"
msgstr "はじめに"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:23
msgid "|01256bec9fa84ea3a4cbbef5d9343005|"
msgstr ""

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:25
msgid "In this tutorial we are going to discuss the ground state calculation interface of Qiskit Chemistry. The goal is to compute the ground state of a molecular Hamiltonian. This Hamiltonian can be electronic or vibronic. To know more about the preparation of the Hamiltonian, check out the Electronic structure and Vibronic structure tutorials."
msgstr "このチュートリアルでは、 Qiskit Chemistry の基底状態計算インターフェースについて説明します。目標は、分子ハミルトニアンの基底状態を計算することです。このハミルトニアンは、電子的あるいは振動的なものである可能性があります。ハミルトニアンの準備についての詳細は、電子構造と振動構造のチュートリアルをチェックしてください。"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:27
msgid "The first step is to define the molecular system. In the following we ask for the electronic part of a hydrogen molecule."
msgstr "まず分子系の定義から始めます。以下では、水素分子の電子部分を求めています。"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:58
msgid "The Solver"
msgstr "ソルバー"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:60
msgid "Then we need to define a solver. The solver is the algorithm through which the ground state is computed."
msgstr "次に、ソルバーを定義する必要があります。ソルバーとは、基底状態を求めるアルゴリズムのことです。"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:62
msgid "Let’s first start with a purely classical example: the NumPy minimum eigensolver. This algorithm exactly diagonalizes the Hamiltonian. Although it scales badely, it can be used on small systems to check the results of the quantum algorithms."
msgstr "まず、純粋に古典的な NumPy の最小固有値ソルバーの例から始めましょう。このアルゴリズムは、ハミルトニアンを正確に対角化します。これは規模の大きな問題には適用できませんが、小さな系で量子アルゴリズムの結果を確認するために用いることができます。"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:85
msgid "To find the ground state we coul also use the Variational Quantum Eigensolver (VQE) algorithm. The VQE algorithms works by exchanging information between a classical and a quantum computer as depicted in the following figure."
msgstr "基底状態を見つけるために、変分量子固有ソルバー (VQE) アルゴリズムを用いることもできます。 VQE アルゴリズムは次の図に示すように、古典コンピューターと量子コンピューターの間で情報を交換することによって動作します。"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:87
msgid "|a673c2a4f01d45d3bba8bea594d659c0|"
msgstr ""

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:89
msgid "Let’s initialize a VQE solver."
msgstr "VQE ソルバーを初期化しましょう。"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:116
msgid "To define the VQE solver one needs two essential elements:"
msgstr "VQE ソルバーを定義するには、二つの重要な要素が必要です。"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:118
msgid "A variational form: here we use the Unitary Coupled Cluster (UCC) ansatz (see for instance [Physical Review A 98.2 (2018): 022322]). Since it is a chemistry standard, a factory is already available allowing a fast initialization of a VQE with UCC. The default is to use all single and double excitations. However, the excitation type (S, D, SD) as well as other parameters can be selected."
msgstr "変分形式: ここでは、ユニタリー結合クラスター (UCC) のansatz (例として、[Physical Review A 98.2 (2018): 022322] を参照してください) を使用します。これは化学の標準なので、UCC を用いた VQE の高速な初期化を可能にするファクトリーが既に利用できます。デフォルトでは、全ての一電子励起と二電子励起を使用します。しかし、励起タイプ (S, D, SD) だけでなく、他のパラメーターを選択することもできます。"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:119
msgid "An initial state: the initial state of the qubits. In the factory used above, the qubits are initialized in the Hartree-Fock (see the electronic structure tutorial) initial state (the qubits corresponding to occupied MOs are :math:`|1\\rangle` and those corresponding to virtual MOs are :math:`|0\\rangle`."
msgstr "量子ビットの初期状態: 上記のファクトリーで、量子ビットは Hartree-Fock (電子構造チュートリアルを参照) の初期状態で初期化されています (被占軌道に対応する量子ビットは :math:`|1\\rangle` 、空軌道に対応する量子ビットは :math:`|0\\rangle` です) 。"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:120
msgid "The backend: this is the quantum machine on which the right part of the figure above will be performed. Here we ask for the perfect quantum emulator (``statevector_simulator``)."
msgstr "バックエンド: これは上図の右の部分が実行される量子マシンです。ここでは、完璧な量子エミュレーター (``statevector_simulator``) を用います。"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:122
msgid "One could also use any available variational form / initial state or even define one’s own. For instance,"
msgstr "また、任意の利用可能な変分形式・初期状態を使用することもできますし、独自に定義することも可能です。以下にその例を示します。"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:154
msgid "The calculation and results"
msgstr "計算と結果"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:156
msgid "We are now ready to run the calculation."
msgstr "これで計算を実行する準備が整いました。"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:249
msgid "We can compare the VQE results to the NumPy exact solver and see that they match."
msgstr "NumPy の正確なソルバーと比較して、VQE の結果が一致していることを確認できます。"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:340
msgid "Using a filter function"
msgstr "フィルター関数の使用"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:351
msgid "Sometimes the true ground state of the Hamiltonian is not of interest because it lies in a different symmetry sector of the Hilbert space. In this case the NumPy eigensolver can take a filter function to return only the eigenstates with for example the correct number of particles. This is of particular importance in the case of vibronic structure calculations where the true ground state of the Hamiltonian is the vacuum state. A default filter function to check the number of particles is implemented in the different transformations and can be used as"
msgstr "ハミルトニアンの真の基底状態がヒルベルト空間の異なる対称性領域にあるため、そうした解に興味がないという場合もあります。こうした場合に NumPy 固有値ソルバーは、フィルター関数を取って、正しい粒子数をもつ固有状態だけを返すようにすることが可能です。これは特に、ハミルトニアンの真の基底状態が真空状態となる、振動構造計算の場合に重要です。粒子数をチェックするためのデフォルトのフィルター関数は、様々な変換に実装されており、以下のように用いることができます。"

