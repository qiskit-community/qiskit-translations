msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-05 19:23+0000\n"
"PO-Revision-Date: 2021-05-05 19:58\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/chemistry/04_excited_states_solvers.po\n"
"X-Crowdin-File-ID: 9406\n"
"Language: ja_JP\n"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:10
msgid "This page was generated from `tutorials/chemistry/04_excited_states_solvers.ipynb`__."
msgstr "当ページは `tutorials/chemistry/04_excited_states_solvers.ipynb`__ から生成されました。"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/chemistry/04_excited_states_solvers.ipynb>`_."
msgstr "`IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/chemistry/04_excited_states_solvers.ipynb>`_ でインタラクティブに実行します。"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:9
msgid "Excited states solvers"
msgstr "励起状態ソルバー"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:21
msgid "Introduction"
msgstr "はじめに"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:23
msgid "|f85d0d091c444517a2957374483c5df3|"
msgstr ""

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:25
msgid "In this tutorial we are going to discuss the excited states calculation interface of Qiskit Chemistry. The goal is to compute the excited states of a molecular Hamiltonian. This Hamiltonian can be electronic or vibronic. To know more about the preparation of the Hamiltonian, check out the Electronic structure and Vibronic structure tutorials."
msgstr "このチュートリアルでは、 Qiskit Chemistry の励起状態計算インターフェースについて説明します。目標は、分子ハミルトニアンの励起状態を計算することです。このハミルトニアンは、電子的あるいは振動的なものである可能性があります。ハミルトニアンの準備についての詳細は、電子構造と振動構造のチュートリアルをチェックしてください。"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:27
msgid "The first step is to define the molecular system. In the following we ask for the electronic part of a hydrogen molecule."
msgstr "まず分子系の定義から始めます。以下では、水素分子の電子部分を求めています。"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:80
msgid "The Solver"
msgstr "ソルバー"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:82
msgid "Then we need to define a solver. The solver is the algorithm through which the ground state is computed."
msgstr "次に、ソルバーを定義する必要があります。ソルバーとは、基底状態を求めるアルゴリズムのことです。"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:84
msgid "Let’s first start with a purely classical example: the NumPy eigensolver. This algorithm exactly diagonalizes the Hamiltonian. Although it scales badly, it can be used on small systems to check the results of the quantum algorithms. Here, we are only interested to look at eigenstates with a given number of particle. To compute only those states a filter function can be passed to the NumPy eigensolver. A default filter function is already implemented in Qiskit and can be used in this way:"
msgstr ""

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:107
msgid "The excitation energies can also be accessed with the qEOM algorithm [arXiv preprint arXiv:1910.12890 (2019)]. The EOM method finds the excitation energies (differences in energy between the ground state and all :math:`n`\\ th excited states) by solving the following pseudo-eigenvalue problem."
msgstr "励起エネルギーは、 qEOM アルゴリズム [arXiv preprint arXiv:1910.12890 (2019)] によっても求めることができます。 EOM 法は、以下の擬似固有値問題を解くことにより、励起エネルギー (基底状態と全ての第 :math:`n` 励起状態との間のエネルギー差) を求めます。"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:109
msgid "\\begin{pmatrix}\n"
"    \\text{M} & \\text{Q}\\\\\n"
"    \\text{Q*} & \\text{M*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}\n"
"= E_{0n}\n"
"\\begin{pmatrix}\n"
"    \\text{V} & \\text{W}\\\\\n"
"    -\\text{W*} & -\\text{V*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}"
msgstr "\\begin{pmatrix}\n"
"    \\text{M} & \\text{Q}\\\\\n"
"    \\text{Q*} & \\text{M*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}\n"
"= E_{0n}\n"
"\\begin{pmatrix}\n"
"    \\text{V} & \\text{W}\\\\\n"
"    -\\text{W*} & -\\text{V*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:130
msgid "with"
msgstr "ただし"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:132
msgid "M_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger},\\hat{\\text{H}}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"
msgstr "M_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger},\\hat{\\text{H}}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:137
msgid "Q_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{H}}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"
msgstr "Q_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{H}}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:142
msgid "V_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"
msgstr "V_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:147
msgid "W_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_\\alpha}^{(\\alpha)})^{\\dagger}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"
msgstr "W_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_\\alpha}^{(\\alpha)})^{\\dagger}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:152
msgid "Although the previous equation can be solved classically, each matrix element must be measured on the quantum computer with the corresponding ground state. To use the qEOM as a solver in Qiskit, we have to define a ground state calculation first, explaining the algorithms how to find the ground state. With this the qEOM solver can be initialized:"
msgstr "上の方程式は古典的に解くことができますが、各行列要素は対応する基底状態を量子コンピューター上で測定しなければなりません。 qEOM を Qiskit のソルバーとして使用するには、まず基底状態の計算を定義し、基底状態を得るためのアルゴリズムを設定します。これにより、 qEOM ソルバーを初期化することができます。"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:187
msgid "The calculation and results"
msgstr "計算と結果"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:189
msgid "The results are computed and printed"
msgstr "結果が計算されて、表示されます。"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:420
msgid "One can see from these results that one state is missing from the NumPy results. The reason for this is because the spin is also used as a filter and only singlet states are shown. In the following we use a custom filter function to check consistently our results and only filter out states with incorrect number of particle (in this case the number of particle is 2)."
msgstr "これらの結果から、NumPy の結果と比べて状態が一つ足りないことがわかります。これは、スピンもフィルターとして使用され、一重項状態のみが表示されているためです。以下では、一貫性をもって結果を確認し、粒子数が正しくない状態 (今回は粒子数が 2) だけをフィルタリングするように、カスタムのフィルター関数を用いています。"

