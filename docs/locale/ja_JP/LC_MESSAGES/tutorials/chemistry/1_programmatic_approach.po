msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-02 15:42+0000\n"
"PO-Revision-Date: 2020-10-09 05:33\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/chemistry/1_programmatic_approach.po\n"
"X-Crowdin-File-ID: 9288\n"
"Language: ja_JP\n"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:10
msgid "This page was generated from `tutorials/chemistry/1_programmatic_approach.ipynb`__."
msgstr "当ページは `tutorials/chemistry/1_programmatic_approach.ipynb`__ から生成されました。"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:9
msgid "**Qiskit Chemistry, Programmatic Approach**"
msgstr "**Qiskit Chemistryにおけるプログラム的アプローチ**"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:21
msgid "Introduction"
msgstr "はじめに"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:23
msgid "This notebook illustrates how to use Qiskit Chemistry's programmatic APIs."
msgstr "このノートブックでは、Qiskit ChemistryのプログラムAPIを使用する方法を説明します。"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:25
msgid "In this notebook, we decompose the computation of the ground state energy of a molecule into 4 steps: 1. Define a molecule and get integrals from a computational chemistry driver (PySCF in this case) 2. Construct a Fermionic Hamiltonian and map it onto a qubit Hamiltonian 3. Instantiate and initialize dynamically-loaded algorithmic components, such as the quantum algorithm VQE, the optimizer and variational form it will use, and the initial\\_state to initialize the variational form 4. Run the algorithm on a quantum backend and retrieve the results"
msgstr "このノートでは、分子の基底状態エネルギーの計算を 4 つのステップに分解します。 1. 分子を定義し、計算化学ドライバー (この場合には PySCF) から積分値を得ます。 2. フェルミオン・ハミルトニアンを構成し、それを量子ビットハミルトニアンにマップします。3. 動的にロードされたアルゴリズム・コンポーネントをインスタンス化して初期化します。例えば、量子アルゴリズムの「 VQE」、最適化プログラム、および変分フォームが使用され、initial\\_state が変分フォームの初期化に利用されます。4. 量子バックエンドでアルゴリズムを実行し、結果を取得します。"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:63
msgid "Step 1: Define a molecule"
msgstr "ステップ 1: 分子の定義"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:65
msgid "Here, we use LiH in the sto3g basis with the PySCF driver as an example. The ``molecule`` object records the information from the PySCF driver."
msgstr "ここでは、例として PySCF ドライバを使用して、 STO3g 基底での LiH を扱います。``molecule`` オブジェクトはPySCFドライバーからの情報を記録します。"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:91
msgid "Step 2: Prepare qubit Hamiltonian"
msgstr "ステップ 2: 量子ビットのハミルトニアンを準備する"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:93
msgid "Here, we setup the **to-be-frozen** and **to-be-removed** orbitals to reduce the problem size when we map to the qubit Hamiltonian. Furthermore, we define the **mapping type** for the qubit Hamiltonian. For the particular ``parity`` mapping, we can further reduce the problem size."
msgstr "ここでは、 **to-be-frozen** と **to-be - removed** 軌道をセットアップして、ハミルトニアンにマップするときの問題サイズを小さくします。 さらにハミルトニアンの **mapping type** を定義します。 特定の ``parity`` マッピングについては、問題サイズをさらに小さくすることができます。"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:409
msgid "We use the classical eigen decomposition to get the smallest eigenvalue as a reference."
msgstr "古典的な固有値分解を用いて、最小固有値を参照します。"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:456
msgid "Step 3: Initiate and configure dynamically-loaded instances"
msgstr "ステップ 3: 動的にロードされたインスタンスを開始および構成する"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:458
msgid "To run VQE with the UCCSD variational form, we require:"
msgstr "UCCSD の変分フォームを使用して VQE を実行するには、以下のものが必要です。"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:460
msgid "VQE algorithm"
msgstr "VQE アルゴリズム"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:461
msgid "Classical Optimizer"
msgstr "古典オプティマイザー"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:462
msgid "UCCSD variational form"
msgstr "UCCSD 変分フォーム"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:463
msgid "Prepare the initial state in the HartreeFock state"
msgstr "初期状態を HartreeFock 状態で準備します。"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:475
msgid "[Optional] Setup token to run the experiment on a real device"
msgstr "[Optional] 実デバイスで実験を実行するためのトークンを設定します。"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:477
msgid "If you would like to run the experiment on a real device, you need to setup your account first."
msgstr "実際のデバイスでテストを実行したい場合は、最初にアカウントをセットアップする必要があります。"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:479
msgid "Note: If you did not store your token yet, use ``IBMQ.save_account('MY_API_TOKEN')`` to store it first."
msgstr "注: トークンをまだ保存していない場合は、 ``IBMQ.save_account('MY_API_TOKEN')`` を使用してトークンを保存してください。"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:538
msgid "Step 4: Run algorithm and retrieve the results"
msgstr "ステップ 4: アルゴリズムを実行し、結果を取得する"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:549
msgid "results = vqe.run(quantum\\_instance) print('The computed ground state energy is: {:.12f}'.format(results.eigenvalue.real)) print('The total ground state energy is: {:.12f}'.format(results.eigenvalue.real + energy\\_shift + nuclear\\_repulsion\\_energy)) print(\"Parameters: {}\".format(results.optimal\\_point))"
msgstr "results = vqe.run(quantum\\_instance) print('計算された基底エネルギーは {:.12f}'.format(results.eigenvalue.real)) print('基底エネルギーの合計は {:.12f}'.format(results.eigenvalue.real + energy\\_shift + nuclear\\_repulsion\\_energy)) print(\"Parameters: {}\".format(results.optimal\\_point))"

