msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-08 17:23+0000\n"
"PO-Revision-Date: 2021-03-12 02:39\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/finance/06_basket_option_pricing.po\n"
"X-Crowdin-File-ID: 9352\n"
"Language: ja_JP\n"

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:10
msgid "This page was generated from `tutorials/finance/06_basket_option_pricing.ipynb`__."
msgstr "当ページは `tutorials/finance/06_basket_option_pricing.ipynb`__. から生成されました。"

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/finance/06_basket_option_pricing.ipynb>`_."
msgstr "`IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/finance/06_basket_option_pricing.ipynb>`_ でインタラクティブに実行します。"

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:9
msgid "*Pricing Basket Options*"
msgstr "*バスケット・オプションの価格推定*"

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:21
msgid "Introduction"
msgstr "はじめに"

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:23
msgid "Suppose a basket option with strike price :math:`K` and two underlying assets whose spot price at maturity :math:`S_T^1`, :math:`S_T^2` follow given random distributions. The corresponding payoff function is defined as:"
msgstr "権利行使価格 :math:`K` で、２つの原資産の満期時のスポット価格 :math:`S_T^1`, :math:`S_T^2` がある確率分布に従うバスケット・オプションを考えます。その時のペイオフ関数は次のように定義されます："

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:25
msgid "\\max\\{S_T^1 + S_T^2 - K, 0\\}\n\n"
msgstr ""

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:27
msgid "In the following, a quantum algorithm based on amplitude estimation is used to estimate the expected payoff, i.e., the fair price before discounting, for the option:"
msgstr "以下では、振幅推定に基づく量子アルゴリズムを使用して、期待されるペイオフ、すなわちオプションの割引前の適正価格を見積もります。"

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:29
msgid "\\mathbb{E}\\left[ \\max\\{S_T^1 + S_T^2 - K, 0\\} \\right].\n\n"
msgstr ""

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:31
msgid "The approximation of the objective function and a general introduction to option pricing and risk analysis on quantum computers are given in the following papers:"
msgstr "目的関数の近似と量子コンピューターによる一般的なオプション価格設定とリスク分析は、以下の論文で紹介されています。"

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:33
msgid "Quantum Risk Analysis. Woerner, Egger. 2018."
msgstr "Quantum Risk Analysis. Woerner, Egger. 2018."

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:34
msgid "Option Pricing using Quantum Computers. Stamatopoulos et al. 2019."
msgstr "Option Pricing using Quantum Computers. Stamatopoulos et al. 2019."

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:64
msgid "Uncertainty Model"
msgstr "不確実性モデル"

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:66
msgid "We construct a circuit factory to load a multivariate log-normal random distribution into a quantum state on :math:`n` qubits. For every dimension :math:`j = 1,\\ldots,d`, the distribution is truncated to a given interval :math:`[\\text{low}_j, \\text{high}_j]` and discretized using :math:`2^{n_j}` grid points, where :math:`n_j` denotes the number of qubits used to represent dimension :math:`j`, i.e., :math:`n_1+\\ldots+n_d = n`. The unitary operator corresponding to the circuit factory implements the following:"
msgstr "多変量対数正規ランダム分布を :math:`n` 量子ビットの量子状態にロードする回路ファクトリを構築します。 すべての次元 :math:`j = 1,\\ldots,d` について、分布は指定された区間 :math:`[\\text{low}_j, \\text{high}_j]` に切り捨てられ、 :math:`2^{n_j}` グリッドポイントを使用して離散化されます。ここで、 :math:`n_j` は次元 :math:`j` を表すために使用される量子ビットの数を示します。つまり :math:`n_1+\\ldots+n_d = n` です。 回路ファクトリに対応するユニタリー演算子は、以下のように実装されます:"

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:69
msgid "\\big|0\\rangle_{n} \\mapsto \\big|\\psi\\rangle_{n} = \\sum_{i_1,\\ldots,i_d} \\sqrt{p_{i_1\\ldots i_d}}\\big|i_1\\rangle_{n_1}\\ldots\\big|i_d\\rangle_{n_d},\n\n"
msgstr ""

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:71
msgid "where :math:`p_{i_1\\ldots i_d}` denote the probabilities corresponding to the truncated and discretized distribution and where :math:`i_j` is mapped to the right interval using the affine map:"
msgstr "ここで :math:`p_{i_1\\ldots i_d}` は、切り捨てられ離散化された分布を与える確率を表し、 :math:`i_j` はアフィン写像で得られた正しい区間です。"

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:73
msgid "\\{0, \\ldots, 2^{n_j}-1\\} \\ni i_j \\mapsto \\frac{\\text{high}_j - \\text{low}_j}{2^{n_j} - 1} * i_j + \\text{low}_j \\in [\\text{low}_j, \\text{high}_j].\n\n"
msgstr ""

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:75
msgid "For simplicity, we assume both stock prices are independent and identically distributed. This assumption just simplifies the parametrization below and can be easily relaxed to more complex and also correlated multivariate distributions. The only important assumption for the current implementation is that the discretization grid of the different dimensions has the same step size."
msgstr "簡単のため、株価はどちらも独立同分布とします。この仮定は以下のパラメータ化を単純にするだけのものであり、簡単に緩和することができ、多変量分布でも関連します。現在の実装で唯一の重要な仮定は、異なる次元の離散化グリッドが同じステップサイズであるということです。"

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:160
msgid "Payoff Function"
msgstr "ペイオフ関数"

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:162
msgid "The payoff function equals zero as long as the sum of the spot prices at maturity :math:`(S_T^1 + S_T^2)` is less than the strike price :math:`K` and then increases linearly. The implementation first uses a weighted sum operator to compute the sum of the spot prices into an ancilla register, and then uses a comparator, that flips an ancilla qubit from :math:`\\big|0\\rangle` to :math:`\\big|1\\rangle` if :math:`(S_T^1 + S_T^2) \\geq K`. This ancilla is used to control the linear part of the payoff function."
msgstr "ペイオフ関数は、満期時のスポット価格合計 :math:`(S_T^1 + S_T^2)` が権利行使価格 :math:`K` よりも小さい間ゼロであり、その後線形に増加します。実装は、初め加重合計演算子で補助量子ビットにスポット価格の合計を計算し、その後コンパレーターを使用して、もし :math:`(S_T^1 + S_T^2) \\geq K` ならば補助量子ビットを :math:`\\big|0\\rangle` から :math:`\\big|1\\rangle` にフリップします。この補助量子ビットはペイオフ関数の線形部分を制御するのに使われます。"

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:165
msgid "The linear part itself is approximated as follows. We exploit the fact that :math:`\\sin^2(y + \\pi/4) \\approx y + 1/2` for small :math:`|y|`. Thus, for a given approximation rescaling factor :math:`c_\\text{approx} \\in [0, 1]` and :math:`x \\in [0, 1]` we consider"
msgstr "線形部分自体は次のように近似されます。 小さい :math:`|y|` に対して :math:`\\sin^2(y + \\pi/4) \\approx y + 1/2` という事実を利用します。 したがって、与えられた近似再スケーリング係数 :math:`c_\\text{approx} \\in [0, 1]` および :math:`x \\in [0, 1]` に対して、次を考えます。"

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:167
msgid "\\sin^2( \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + \\pi/4) \\approx \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + 1/2\n\n"
msgstr ""

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:169
msgid "\\ for small :math:`c_\\text{approx}`."
msgstr ":math:`c_\\text{approx}` は十分小さいものとします。"

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:171
msgid "We can easily construct an operator that acts as"
msgstr "次のように機能する演算子を簡単に構築できます"

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:173
msgid "\\big|x\\rangle \\big|0\\rangle \\mapsto \\big|x\\rangle \\left( \\cos(a*x+b) \\big|0\\rangle + \\sin(a*x+b) \\big|1\\rangle \\right),\n\n"
msgstr ""

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:175
msgid "using controlled Y-rotations."
msgstr "制御 Y 回転を用いています。"

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:177
msgid "Eventually, we are interested in the probability of measuring :math:`\\big|1\\rangle` in the last qubit, which corresponds to :math:`\\sin^2(a*x+b)`. Together with the approximation above, this allows to approximate the values of interest. The smaller we choose :math:`c_\\text{approx}`, the better the approximation. However, since we are then estimating a property scaled by :math:`c_\\text{approx}`, the number of evaluation qubits :math:`m` needs to be adjusted accordingly."
msgstr "最終的には、 :math:`\\sin^2(a*x+b)` に対応する最後の量子ビットで :math:`\\big|1\\rangle` を測定する確率に関心があります。 上記の近似と合わせて、対象の値を近似できます。小さい :math:`c_\\text{approx}` を選択するほど、近似は良くなります。 ただし、 :math:`c_\\text{approx}` でスケーリングされたプロパティを推定しているため、それに応じて評価量子ビットの数 :math:`m` を調整する必要があります。"

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:179
msgid "For more details on the approximation, we refer to: Quantum Risk Analysis. Woerner, Egger. 2018."
msgstr "近似の詳細については、以下を参照してください: Quantum Risk Analysis, Woerner, Egger. 2018."

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:181
msgid "Since the weighted sum operator (in its current implementation) can only sum up integers, we need to map from the original ranges to the representable range to estimate the result, and reverse this mapping before interpreting the result. The mapping essentially corresponds to the affine mapping described in the context of the uncertainty model above."
msgstr "(現在実装中の) 加重合計演算子は整数のみを合計することができるため、結果を推定するために元の範囲から表現可能な範囲に写像し、結果を解釈する前に逆写像する必要があります。このマッピングは不確定性モデルのコンテキストに出てきたアフィン写像に一致します。"

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:396
msgid "Evaluate Expected Payoff"
msgstr "期待ペイオフの評価"

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:398
msgid "We first verify the quantum circuit by simulating it and analyzing the resulting probability to measure the :math:`|1\\rangle` state in the objective qubit."
msgstr "我々は、まず量子回路を検証します。シミュレーションで目的量子ビットの :math:`|1\\rangle` 状態の観測確率を分析します。"

#: ../../tutorials/finance/06_basket_option_pricing.ipynb:501
msgid "Next we use amplitude estimation to estimate the expected payoff."
msgstr "次に、振幅推定を使用して期待ペイオフを推定します。"

