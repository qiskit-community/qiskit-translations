msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:25+0000\n"
"PO-Revision-Date: 2023-03-18 03:28\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/05_qaoa.po\n"
"X-Crowdin-File-ID: 9502\n"

#: ../../tutorials/algorithms/05_qaoa.ipynb:10
msgid "This page was generated from `tutorials/algorithms/05_qaoa.ipynb`__."
msgstr "このページは `tutorials/algorithms/05_qaoa.ipynb`__ から生成されました。"

#: ../../tutorials/algorithms/05_qaoa.ipynb:9
msgid "Quantum Approximate Optimization Algorithm"
msgstr "量子近似最適化アルゴリズム"

#: ../../tutorials/algorithms/05_qaoa.ipynb:11
msgid "Qiskit has an implementation of the Quantum Approximate Optimization Algorithm `QAOA <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.QAOA.html>`__ and this notebook demonstrates using it for a graph partition problem."
msgstr "Qiskit には量子近似最適化アルゴリズム `QAOA <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.QAOA.html>`__ の実装があり、このノートブックではグラフ分割問題への適用方法を示します。"

#: ../../tutorials/algorithms/05_qaoa.ipynb:13
msgid "Before we begin, let's import the ``annotations`` module from ``__future__`` to allow postponed evaluation of annotations. This enables us to use simpler type hints throughout the notebook."
msgstr "始める前に、 ``__future__`` から ``annotations`` モジュールをインポートして、アノテーションの評価を延期できるようにしましょう。これにより、ノートブック全体でよりシンプルな型ヒントを使用できるようになります。"

#: ../../tutorials/algorithms/05_qaoa.ipynb:34
msgid "First we create a graph and draw it so it can be seen."
msgstr "まずランダムなグラフを作成し、可視化します。"

#: ../../tutorials/algorithms/05_qaoa.ipynb:85
msgid "The brute-force method is as follows. Basically, we exhaustively try all the binary assignments. In each binary assignment, the entry of a vertex is either 0 (meaning the vertex is in the first partition) or 1 (meaning the vertex is in the second partition). We print the binary assignment that satisfies the definition of the graph partition and corresponds to the minimal number of crossing edges."
msgstr "総当たり法は以下の通りです。基本的には、あらゆる二進数の割り当てを網羅的に試します。それぞれの二進数の割り当てでは、頂点の値は 0 (その頂点が第一パーティションにあることを示す) か、 1 (その頂点が第二パーティションにあることを示す) のいずれかとなっています。グラフ分割の定義を満たし、パーティション間の辺の数が最小となる場合に対応する二進数の割り当てを表示します。"

#: ../../tutorials/algorithms/05_qaoa.ipynb:161
msgid "The graph partition problem can be converted to an Ising Hamiltonian. Qiskit has different capabilities in the Optimization module to do this. Here, since the goal is to show QAOA, the module is used without further explanation to create the operator. The paper `Ising formulations of many NP problems <https://arxiv.org/abs/1302.5843>`__ may be of interest if you would like to understand the technique further."
msgstr "グラフ分割問題は、イジング・ハミルトニアンに変換することができます。 Qiskit では、これを実行するため最適化モジュールに別の機能が用意されています。ここでは QAOA を実演することが目的なので、演算子を作成するためのモジュールについては、これ以上説明せずに用いることとします。 `Ising formulations of many NP problems <https://arxiv.org/abs/1302.5843>`__ という論文は、この手法をより理解したいという方に興味深いかもしれません。"

#: ../../tutorials/algorithms/05_qaoa.ipynb:231
msgid "So lets use the QAOA algorithm to find the solution."
msgstr "では QAOA アルゴリズムを用いて、解を求めましょう。"

#: ../../tutorials/algorithms/05_qaoa.ipynb:318
msgid "The outcome can be seen to match to the value computed above by brute force. But we can also use the classical ``NumPyMinimumEigensolver`` to do the computation, which may be useful as a reference without doing things by brute force."
msgstr "結果は、上記の総当たり法で計算された値に一致していることがわかります。一方、古典的な ``NumPyMinimumEigensolver`` によって計算を行うこともできます。この方法は、総当たり法を用いずに参照値を得る上で役に立つでしょう。"

#: ../../tutorials/algorithms/05_qaoa.ipynb:375
msgid "It is also possible to use VQE as is shown below"
msgstr "また、以下のようにして VQE を用いることも可能です。"

