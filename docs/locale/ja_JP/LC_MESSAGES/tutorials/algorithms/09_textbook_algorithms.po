msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-07 16:27+0000\n"
"PO-Revision-Date: 2020-12-24 06:07\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/09_textbook_algorithms.po\n"
"X-Crowdin-File-ID: 9460\n"
"Language: ja_JP\n"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:10
msgid "This page was generated from `tutorials/algorithms/09_textbook_algorithms.ipynb`__."
msgstr "このページは `tutorials/algorithms/09_textbook_algorithms.ipynb`__ から生成されました。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/09_textbook_algorithms.ipynb>`_."
msgstr "`IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/09_textbook_algorithms.ipynb>`_ でインタラクティブに実行します。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:9
msgid "Textbook and Shor’s algorithms"
msgstr "教科書的なアルゴリズムと Shor のアルゴリズム"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:11
msgid "Qiskit contains implementations of the well known textbook quantum algorithms such as the `Deutsch-Jozsa algorithm <https://qiskit.org/textbook/ch-algorithms/deutsch-jozsa.html>`__, the `Bernstein-Vazirani algorithm <https://qiskit.org/textbook/ch-algorithms/bernstein-vazirani.html>`__ and `Simon’s algorithm <https://qiskit.org/textbook/ch-algorithms/simon.html>`__."
msgstr "Qiskit には `Deutsch-Jozsa のアルゴリズム <https://qiskit.org/textbook/ch-algorithms/deutsch-jozsa.html>`__, `Bernstein-Vazirani のアルゴリズム <https://qiskit.org/textbook/ch-algorithms/bernstein-vazirani.html>`__, `Simon のアルゴリズム <https://qiskit.org/textbook/ch-algorithms/simon.html>`__ などの、よく知られている教科書的な量子アルゴリズムの実装が含まれています。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:13
msgid "Qiskit also has an implementation of `Shor’s algorithm <https://qiskit.org/textbook/ch-algorithms/shor.html>`__."
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:15
msgid "The preceding references have detailed explanations and build-out of circuits whereas this notebook has examples with the pre-built algorithms in Qiskit that you can use for experimentation and education purposes."
msgstr "上記の参照先では回路の配置と詳細な説明を行っていますが、このノートブックでは Qiskit であらかじめ構築されたアルゴリズムの例を示しているので、実験や教育の目的で用いることができます。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:42
msgid "Deutsch-Jozsa algorithm"
msgstr "Deutsch-Jozsa のアルゴリズム"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:44
msgid "Lets start with the `Deutsch-Jozsa algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.DeutschJozsa.html>`__ which can determine if a function is ``'balanced'`` or ``'constant'`` given such a function as input. We can experiment with it in Qiskit using an oracles created from a truth tables. So for example, we can create a ``TruthTableOracle`` instance as follows."
msgstr "まず `Deutsch-Jozsa のアルゴリズム <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.DeutschJozsa.html>`__ から始めてみましょう。これは関数が入力として与えられたときに、その関数が ``balanced`` なのか ``constant`` なのかの判定ができるものとなっています。 Qiskit では、真理値表から作成したオラクルを用いてその実験を行うことが可能です。例えば以下のように、 ``TruthTableOracle`` インスタンスを作成することができます。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:66
msgid "As shown, the truthtable is specified with the ``bitstr`` containing values of all entries in the table. It has length :math:`8`, so the corresponding truth table is of :math:`3` input bits. We can of course see that this truth table represents a ``'balanced'`` function as half of values are :math:`1` and the other half :math:`0`."
msgstr "このように、真理値表は表内の全てのエントリーの値を含む ``bitstr`` で指定されます。長さは :math:`8` となっているので、対応する真理値表は :math:`3` ビットの入力から構成されています。もちろんこの真理値表は、値の半分が :math:`1` 、 残りの半分は :math:`0` であることから、 ``balanced`` 関数を表していることがわかります。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:68
msgid "It might seem like a moot point running Deutsch-Jozsa on a truthtable as the function outputs are literally listed as the truthtable’s values. The intention is to create an oracle circuit whose groundtruth information is readily available to us but obviously not to the quantum Deutsch-Jozsa algorithm that is to act upon the oracle circuit. In more realistic situations, the oracle circuit would be provided as a blackbox to the algorihtm."
msgstr "関数の出力が真理値表の値としてリスト化されているので、真理値表に対して Deutsch-Jozsa のアルゴリズムを実行することは無意味に思えるかもしれません。その目的は、正解の情報に我々は容易にアクセスできるが、 Deutsch-Jozsa のアルゴリズムは容易にアクセスできないようなオラクル回路を作成することです。より現実的な状況では、オラクル回路はアルゴリズムのブラックボックスとして与えられます。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:70
msgid "Above said, we can inspect the circuit corresponding to the function encoded in the ``TruthTableOracle`` instance."
msgstr "``TruthTableOracle`` インスタンスでエンコードされた関数に対応する回路を調べることができます。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:100
msgid "As seen, the :math:`v_i`\\ ’s correspond to the 3 input bits; the :math:`o_0` is the oracle’s output qubit; the :math:`a_0` is an ancilla qubit."
msgstr "見ての通り、 :math:`v_i` は三つの入力ビットに、 :math:`o_0` はオラクルの出力ビットに、 :math:`a_0` は補助ビットにそれぞれ対応しています。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:102
msgid "Next we can simply create a ``DeutschJozsa`` instance using the oracle, and run it to check the result."
msgstr "次に、オラクルを用いて ``DeutschJozsa`` インスタンスを作成し、実行して結果を確認します。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:145
msgid "We can of course quickly put together another example for a ``'constant'`` function, as follows."
msgstr "もちろん、以下のように定数関数の例を用意することもできます。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:191
msgid "Bernstein-Vazirani algorithm"
msgstr "Bernstein-Vazirani のアルゴリズム"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:193
msgid "Next the `Bernstein-Vazirani algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.BernsteinVazirani.html>`__ which tries to find a hidden string. Again, for the example, we create a TruthTableOracle instance."
msgstr "次に `Bernstein-Vazirani のアルゴリズム<https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.BernsteinVazirani.html>`__ を用いて、隠された文字列の発見を試みます。ここでも例のために TruthTableOracle インスタンスを作成します。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:215
msgid "As shown, the truthtable is specified with the ``bitstr`` containing values of all entries in the table. It has length :math:`8`, so the corresponding truth table is of :math:`3` input bits. The truthtable represents the function mappings as follows:"
msgstr "このように、真理値表は表内の全てのエントリーの値を含む ``bitstr`` で指定されます。長さは :math:`8` となっているので、対応する真理値表は :math:`3` ビットの入力から構成されています。真理値表は以下のように関数のマッピングを表しています。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:217
msgid ":math:`\\mathbf{a} \\cdot 000 \\mod 2 = 0`"
msgstr ":math:`\\mathbf{a} \\cdot 000 \\mod 2 = 0`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:218
msgid ":math:`\\mathbf{a} \\cdot 001 \\mod 2 = 0`"
msgstr ":math:`\\mathbf{a} \\cdot 001 \\mod 2 = 0`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:219
msgid ":math:`\\mathbf{a} \\cdot 010 \\mod 2 = 1`"
msgstr ":math:`\\mathbf{a} \\cdot 010 \\mod 2 = 1`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:220
msgid ":math:`\\mathbf{a} \\cdot 011 \\mod 2 = 1`"
msgstr ":math:`\\mathbf{a} \\cdot 011 \\mod 2 = 1`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:221
msgid ":math:`\\mathbf{a} \\cdot 100 \\mod 2 = 1`"
msgstr ":math:`\\mathbf{a} \\cdot 100 \\mod 2 = 1`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:222
msgid ":math:`\\mathbf{a} \\cdot 101 \\mod 2 = 1`"
msgstr ":math:`\\mathbf{a} \\cdot 101 \\mod 2 = 1`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:223
msgid ":math:`\\mathbf{a} \\cdot 110 \\mod 2 = 0`"
msgstr ":math:`\\mathbf{a} \\cdot 110 \\mod 2 = 0`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:224
msgid ":math:`\\mathbf{a} \\cdot 111 \\mod 2 = 0`"
msgstr ":math:`\\mathbf{a} \\cdot 111 \\mod 2 = 0`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:226
msgid "And obviously the goal is to find the bitstring :math:`\\mathbf{a}` that satisfies all the inner product equations."
msgstr "目標は、全ての内積方程式を満たすビット列 :math:`\\mathbf{a}` を見つけることです。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:228
msgid "Lets again look at the oracle circuit, that now corresponds to the binary function encoded in the ``TruthTableOracle`` instance."
msgstr "もう一度 ``TruthTableOracle`` インスタンスでエンコードされたバイナリ関数に対応するオラクル回路を見てみましょう。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:258
msgid "Again the :math:`v_i`\\ ’s correspond to the 3 input bits; the :math:`o_0` is the oracle’s output qubit; the :math:`a_0` is an ancilla qubit."
msgstr "ここでも :math:`v_i` は三つの入力ビットに、 :math:`o_0` はオラクルの出力ビットに、 :math:`a_0` は補助ビットにそれぞれ対応しています。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:260
msgid "Let us first compute the groundtruth :math:`\\mathbf{a}` classically:"
msgstr "まず 正解 :math:`\\mathbf{a}` を古典的に計算してみましょう。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:305
msgid "Next we can create a ``BernsteinVazirani`` instance using the oracle, and run it to check the result against the groundtruth."
msgstr "次に、オラクルを使って ``BernsteinVazirani`` インスタンスを作成し、それを実行して結果を正解と照合します。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:350
msgid "Simon’s algorithm"
msgstr "Simon のアルゴリズム"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:352
msgid "`Simon’s algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Simon.html>`__ is used to solve `Simon’s problem <https://en.wikipedia.org/wiki/Simon's_problem>`__. Once again, for the example, we create a TruthTableOracle instance, where the construction shows a different form."
msgstr "`Simon のアルゴリズム <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Simon.html>`__ によって、 `Simon の問題 <https://en.wikipedia.org/wiki/Simon's_problem>`__ を解いてみましょう。改めて例のために TruthTableOracle インスタンスを作成していますが、ここでの構造は異なる形式を取っています。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:378
msgid "As shown, the truthtable is specified with three length-8 bitstrings, each containing the values of all entries for a particular output column in the table. Each bitstring has length :math:`8`, so the truthtable has :math:`3` input bits; There are :math:`3` bitstrings, so the truthtable has :math:`3` output bits."
msgstr "このように、真理値表は長さ 8 のビット列 3 つによって指定されており、それぞれが表の出力列に対する全てのエントリーの値を含んでいます。各ビット列の長さは :math:`8` なので、真理値表は :math:`3` ビットの入力をもちます。また :math:`3` つのビット列があるので、真理値表は :math:`3` ビットの出力をもちます。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:380
msgid "The function :math:`f` represented by the truthtable is promised to be either 1-to-1 or 2-to-1. Our goal is to determine which. For the case of 2-to-1, we also need to compute the mask :math:`\\mathbf{s}`, which satisfies :math:`\\forall \\mathbf{x},\\mathbf{y}`: :math:`\\mathbf{x} \\oplus \\mathbf{y} = \\mathbf{s}` iff :math:`f(\\mathbf{x}) = f(\\mathbf{y})`. Apparently, if :math:`f` is 1-to-1, the corresponding mask :math:`\\mathbf{s} = \\mathbf{0}`."
msgstr "真理値で表される関数 :math:`f` は、1 対 1 か 2 対 1 のどちらかであることが保証されています。我々の目的は、そのどちらであるかを決定することです。 2 対 1 の場合には、 :math:`\\forall \\mathbf{x},\\mathbf{y}`: :math:`\\mathbf{x} \\oplus \\mathbf{y} = \\mathbf{s}` iff :math:`f(\\mathbf{x}) = f(\\mathbf{y})` を満たすマスク :math:`\\mathbf{s}` を計算する必要があります。 :math:`f` が 1 対 1 ならば、明らかに対応するマスクは :math:`\\mathbf{s} = \\mathbf{0}` となります。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:382
msgid "Let us first compute the groundtruth mask :math:`\\mathbf{s}` classically:"
msgstr "まず 正解のマスク :math:`\\mathbf{s}` を古典的に計算してみましょう。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:468
msgid "We can also quickly try a truthtable that represents a 1-to-1 function (i.e., the corresponding mask is :math:`\\mathbf{0}`), as follows."
msgstr "また 1 対 1 関数を表す真理値表 (対応するマスクは :math:`\\mathbf{0}` ) は、以下のように手軽に試すこともできます。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:523
msgid "Shor’s Factoring algorithm"
msgstr "Shor の素因数分解アルゴリズム"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:525
msgid "`Shor’s Factoring algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Shor.html>`__ is one of the most well-known quantum algorithms and finds the prime factors for input integer :math:`N` in polynomial time. The algorithm implementation in Qiskit is simply provided a target integer to be factored and run, as follows:"
msgstr "`Shor の素因数分解アルゴリズム <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Shor.html>`__ は最もよく知られた量子アルゴリズムの一つであり、入力された整数 :math:`N` の素因数を多項式時間で求めます。 Qiskit でのアルゴリズムの実装では、以下のように素因数分解する整数を与えるだけで実行できます。"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:570
msgid "Note: this implementation of Shor’s algorithm uses :math:`4n + 2` qubits, where :math:`n` is the number of bits representing the integer in binary. So in practice, for now, this implementation is restricted to factorizing small integers. Given the above value of N we compute :math:`4n +2` below and confirm the size from the actual circuit."
msgstr "注: Shor のアルゴリズムのこの実装は、:math:`n` を二進表示された入力整数のビット数として、 :math:`4n + 2` 量子ビット用いています。したがって実際には今のところ、小さな整数の素因数分解に限定されています。上記の N の値があたえられているので、以下に :math:`4n +2` を計算し、実際の回路サイズを確認します。"

