msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:25+0000\n"
"PO-Revision-Date: 2023-08-14 19:07\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/algorithms/03_vqe_simulation_with_noise.po\n"
"X-Crowdin-File-ID: 9448\n"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:10
msgid "This page was generated from `tutorials/algorithms/03_vqe_simulation_with_noise.ipynb`__."
msgstr "このページは `tutorials/algorithms/03_vqe_simulation_with_noise.ipynb`__ から生成されました。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:9
msgid "VQE with Qiskit Aer Primitives"
msgstr "Qiskit Aer Primitivesを使ったVQE"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:11
msgid "This notebook demonstrates how to leverage the `Qiskit Aer Primitives <https://qiskit.org/documentation/apidoc/aer_primitives.html>`__ to run both noiseless and noisy simulations locally. Qiskit Aer not only allows you to define your own custom noise model, but also to easily create a noise model based on the properties of a real quantum device. This notebook will show an example of the latter, to illustrate the general workflow of running algorithms with local noisy simulators."
msgstr "このノートブックでは、`Qiskit Aer Primitives <https://qiskit.org/documentation/apidoc/aer_primitives.html>`__ を活用して、ノイズのないシミュレーションとノイズのあるシミュレーションの両方をローカルで実行する方法を紹介します。Qiskit Aerは独自のノイズモデルを定義できるだけでなく、実際の量子デバイスの特性に基づいて簡単にノイズモデルを作成することができます。このノートブックでは、ローカルノイズシミュレーターでアルゴリズムを実行する一般的なワークフローを説明するために、後者の例を紹介します。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:13
msgid "For further information on the Qiskit Aer noise model, you can consult the `Qiskit Aer documentation <https://qiskit.org/documentation/apidoc/aer_noise.html>`__, as well the tutorial for `building noise models <../simulators/3_building_noise_models.ipynb>`__."
msgstr "Qiskit Aerのノイズモデルの詳細については、`Qiskit Aer のドキュメンテーション <https://qiskit.org/documentation/apidoc/aer_noise.html>`__ や `ノイズモデルの構築 <../simulators/3_building_noise_models.ipynb>`__ のチュートリアルを参照することが可能です。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:24
msgid "The algorithm of choice is once again VQE, where the task consists on finding the minimum (ground state) energy of a Hamiltonian. As shown in previous tutorials, VQE takes in a qubit operator as input. Here, you will take a set of Pauli operators that were originally computed by Qiskit Nature for the H2 molecule, using the ``SparsePauliOp`` class."
msgstr "アルゴリズムは再びVQEを使い、ハミルトニアンの最小（基底状態）エネルギーを見つけるタスクです。以前のチュートリアルで示したように、VQEは入力として量子ビット演算子を取り込みます。ここでは、``SparsePauliOp`` クラスを用いてQiskit NatureがH2分子に対して計算したパウリ演算子のセットを受け取ります。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:81
msgid "As the above problem is still easily tractable classically, you can use ``NumPyMinimumEigensolver`` to compute a reference value to compare the results later."
msgstr "上記の問題はまだ古典的に扱いやすいので、後で結果を比較するために ``NumPyMinimumEigensolver`` を使用して参照値を計算することができます。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:132
msgid "The following examples will all use the same ansatz and optimizer, defined as follows:"
msgstr "以下の例では、すべて同じansatzとoptimizerを使用し、以下のように定義します。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:160
msgid "Performance *without* noise"
msgstr "*ノイズがない場合* のパフォーマンス"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:162
msgid "Let's first run the ``VQE`` on the default Aer simulator without adding noise, with a fixed seed for the run and transpilation to obtain reproducible results. This result should be relatively close to the reference value from the exact computation."
msgstr "まず、ノイズを加えないデフォルトのAerシミュレーターで ``VQE`` を実行し、再現性のある結果を得るために、実行のためのseedを固定し、transpilationを行ってみましょう。この結果は、厳密な計算による基準値に比較的近いはずです。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:259
msgid "You captured the energy values above during the convergence, so you can track the process in the graph below."
msgstr "収束時に上のようにエネルギー値を保存した、下のグラフでその過程を追うことができます。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:321
msgid "Performance *with* noise"
msgstr "*ノイズがある場合* のパフォーマンス"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:323
msgid "Now, let's add noise to our simulation. In particular, you will extract a noise model from a (fake) device. As stated in the introduction, it is also possible to create custom noise models from scratch, but this task is beyond the scope of this notebook."
msgstr "では、シミュレーションにノイズを加えてみましょう。特に、（フェイク）デバイスからノイズモデルを抽出することになります。イントロダクションで述べたように、ゼロからカスタムノイズモデルを作成することも可能ですが、この作業はこのノートブックの範囲外です。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:325
msgid "First, you need to get an actual device backend and from its ``configuration`` and ``properties`` you can setup a coupling map and a noise model to match the device. Note: You can also use this coupling map as the entanglement map for the variational form if you choose to."
msgstr "まず、実際のデバイスのバックエンドを取得し、その ``configuration`` と ``properties`` から、デバイスにマッチしたカップリングマップとノイズモデルをセットアップすることが必要です。注意：このカップリングマップを変分形式のエンタングルメントマップとして使用することも可能です。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:392
msgid "Once the noise model is defined, you can run ``VQE`` using an Aer ``Estimator``, where you can pass the noise model to the underlying simulator using the ``backend_options`` dictionary. Please note that this simulation will take longer than the noiseless one."
msgstr "ノイズモデルを定義すると、Aer ``Estimator`` を使用して ``VQE`` を実行することができます。このとき、 ``backend_options`` ディクショナリーを使用して、ノイズモデルを基にしたシミュレーターに渡すことができます。この場合、ノイズモデルを ``backend_options`` ディクショナリーを使ってシミュレーターに渡すことができます。このシミュレーションは、ノイズなしのシミュレーションよりも時間がかかることに注意してください。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:421
msgid "Instead of defining a new instance of the ``VQE`` class, you can now simply assign a new estimator to our previous ``VQE`` instance. As the callback method will be re-used, you will also need to re-start the ``counts`` and ``values`` variables to be able to plot the convergence graph later on."
msgstr "``VQE`` クラスの新しいインスタンスを定義する代わりに、以前の ``VQE`` インスタンスに新しい推定値を代入するだけでよいです。コールバックメソッドは再利用されるので、後で収束グラフを描画するために、 ``counts`` と ``values`` 変数も再スタートする必要があります。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:512
msgid "Summary"
msgstr "まとめ"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:523
msgid "In this tutorial, you compared three calculations for the H2 molecule ground state. First, you produced a reference value using a classical minimum eigensolver. Then, you proceeded to run ``VQE`` using the Qiskit Aer ``Estimator`` with 1024 shots. Finally, you extracted a noise model from a backend and used it to define a new ``Estimator`` for noisy simulations. The results are:"
msgstr "このチュートリアルでは、H2分子の基底状態について、3つの計算を比較しました。まず、古典的な最小固有値ソルバーで参照値を生成しました。次に、Qiskit Aerの ``Estimator`` を使用して、1024ショットの ``VQE`` を実行しました。最後に、バックエンドからノイズモデルを抽出し、それを使ってノイズのあるシミュレーションのための新しい ``Estimator`` を定義しました。その結果は"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:576
msgid "You can notice that, while the noiseless simulation's result is closer to the exact reference value, there is still some difference. This is due to the sampling noise, introduced by limiting the number of shots to 1024. A larger number of shots would decrease this sampling error and close the gap between these two values."
msgstr "ノイズレスシミュレーションの結果は正確な基準値に近いものの、まだ若干の差があることがわかります。これは、ショット数を1024に制限したことで発生するサンプリングノイズによるものです。ショット数を増やせば、このサンプリング誤差が減少し、2つの値の差は縮まります。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:578
msgid "As for the noise introduced by real devices (or simulated noise models), it could be tackled through a wide variety of error mitigation techniques. The `Qiskit Runtime Primitives <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/>`__ have enabled error mitigation through the ``resilience_level`` option. This option is currently available for remote simulators and real backends accessed via the Runtime Primitives, you can consult `this tutorial <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials/Error-Suppression-and-Error-Mitigation.html>`__ for further information."
msgstr "実デバイス（またはシミュレーションされたノイズモデル）からもたらされるノイズについては、さまざまなエラー緩和技術によって対処することができます。Qiskit Runtime Primitives <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/>`__ は ``resilience_level`` オプションによってエラー緩和を可能にしています。このオプションは現在、リモートシミュレーターとruntime primitive 経由でアクセスするリアルバックエンドで利用可能です。詳細については、`このチュートリアル <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials/Error-Suppression-and-Error-Mitigation.html>`__ を参照してください。"

