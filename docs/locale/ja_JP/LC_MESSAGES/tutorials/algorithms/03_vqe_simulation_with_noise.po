msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-07 16:27+0000\n"
"PO-Revision-Date: 2020-12-23 05:39\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/03_vqe_simulation_with_noise.po\n"
"X-Crowdin-File-ID: 9448\n"
"Language: ja_JP\n"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:10
msgid "This page was generated from `tutorials/algorithms/03_vqe_simulation_with_noise.ipynb`__."
msgstr "このページは `tutorials/algorithms/03_vqe_simulation_with_noise.ipynb`__ から生成されました。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/03_vqe_simulation_with_noise.ipynb>`_."
msgstr "`IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/03_vqe_simulation_with_noise.ipynb>`_ でインタラクティブに実行します。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:9
msgid "VQE on Aer simulator with noise"
msgstr "ノイズのある Aer シミュレーターでのVQE"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:11
msgid "This notebook demonstrates using the `Qiskit Aer <https://qiskit.org/aer>`__ ``qasm_simulator`` to run a simulation with noise, based on a given noise model. This can be useful to investigate behavior under different noise conditions. Aer not only allows you to define your own custom noise model, but also allows a noise model to be easily created based on the properties of a real quantum device. The latter is what this notebook will demonstrate since the goal is to show VQE with noise and not the more complex task of how to build custom noise models."
msgstr "このノートブックでは、`Qiskit Aer <https://qiskit.org/aer>`__ の ``qasm_simulator`` を使用し、与えられたノイズ・モデルに基づいて、ノイズを伴うシミュレーションの実行方法を示します。これは、異なるノイズ条件下での挙動を調べる際に役立ちます。 Aer では、独自のノイズ・モデルを定義できるだけでなく、実際の量子デバイスの特性に基づいたノイズ・モデルを簡単に作成することができます。後者は、独自のノイズ・モデルをどのように構築するかということよりも複雑なタスクではなく、今回はノイズを伴う VQE を実演することが目的であるので、このノートブックでは後者を扱います。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:14
msgid "`Qiskit Ignis <https://qiskit.org/ignis>`__ provides a solution to mitigate the measurement error when running on a noisy simulation or a real quantum device. This solution is leveraged by the ``QuantumInstance`` module which allows any algorithm using it to automatically have measurement noise mitigation applied."
msgstr "`Qiskit Ignis <https://qiskit.org/ignis>`__ は、ノイズの多いシミュレーションや、実際の量子デバイス上で実行した場合の測定誤差を緩和するソリューションを提供します。このソリューションは、 ``QuantumInstance`` モジュールによって活用され、これを用いたアルゴリズムが測定ノイズの緩和を自動的に適用できるようになっています。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:16
msgid "Further information on Qiskit Aer noise model can be found in the online `Qiskit Aer documentation <https://qiskit.org/documentation/apidoc/aer_noise.html>`__, also there is tutorial for `building noise models <../simulators/3_building_noise_models.ipynb>`__."
msgstr "Qiskit Aer によるノイズ・モデルの詳細については、`Qiskit Aer documentation <https://qiskit.org/documentation/apidoc/aer_noise.html>`__ を参照してください。また `building noise models <../simulators/3_building_noise_models.ipynb>`__ というチュートリアルも用意されています。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:18
msgid "Further information on measurement error mitigation in Qiskit Ignis can be found in the tutorial for `measurement error mitigation <https://qiskit.org/documentation/tutorials/noise/3_measurement_error_mitigation.html>`__."
msgstr "Qiskit Ignisによる測定誤差軽減の詳細については、`measurement error mitigation <https://qiskit.org/documentation/tutorials/noise/3_measurement_error_mitigation.html>`__ というチュートリアルを参照してください。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:47
msgid "Noisy simulation will be demonstrated here with VQE, finding the minimum (ground state) energy of an Hamiltonian, but the technique applies to any quantum algorithm from Qiskit Aqua."
msgstr "ここでは、ハミルトニアンの最小 (基底) エネルギーを求める VQE を用いてノイズを伴うシミュレーションを示しますが、この手法はQiskit Aquaのいかなる量子アルゴリズムにも適用することが可能です。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:49
msgid "So for VQE we need a qubit operator as input. Here, once again, we will take a set of paulis that were originally computed by Qiskit Chemistry, for an H2 molecule, so we can quickly create an Operator."
msgstr "VQE は、入力として量子ビット演算子が必要です。ここでもう一度 Qiskit Chemistry によって計算された H2 分子用のパウリ演算子のセットを選ぶことで、すぐに演算子を作成することができます。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:95
msgid "As the above problem is still easily tractable classically we can use NumPyMinimumEigensolver to compute a reference value so we can compare later the results."
msgstr "上記の問題は古典手法によって簡単に解けるので、後で結果を比較できるように、 NumPyMinimumEigensolver を用いて参照値を計算しておきます。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:139
msgid "Performance *without* noise"
msgstr "*ノイズがない場合* のパフォーマンス"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:141
msgid "First we will run on the simulator without adding noise to see the result. I have created the backend and QuantumInstance, which holds the backend as well as various other run time configuration, which are defaulted here, so it easy to compare when we get to the next section where noise is added. There is no attempt to mitigate noise or anything in this notebook so the latter setup and running of VQE is identical."
msgstr "まずは結果を見るため、ノイズを加えずにシミュレーター上で実行してみます。バックエンドとその他のランタイム設定が与えられた QuantumInstance を作成しましたが、次のセクションでノイズを加えた場合と比較がしやすいように、ここではデフォルトの設定となっています。このノートブックではノイズの緩和手法を試していないので、後半部分の設定と VQE の実行は同じです。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:200
msgid "We captured the energy values above during the convergence so we can see what went on in the graph below."
msgstr "上記のエネルギー値が収束とともに得られ、以下のグラフにその挙動を見て取ることができます。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:255
msgid "Performance *with* noise"
msgstr "*ノイズがある場合* のパフォーマンス"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:257
msgid "Now we will add noise. Here we will create a noise model for Aer from an actual device. You can create custom noise models with Aer but that goes beyond the scope of this notebook. Links to further information on Aer noise model, for those that may be interested in doing this, were given above."
msgstr "次に、ノイズを加えます。ここでは、実際のデバイスから Aer のノイズ・モデルを作成します。 Aer ではカスタムのノイズ・モデルを作成することができますが、このノートブックでは取り上げません。 Aer ノイズ・モデルに関する詳細は、上記のリンクを参照してください。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:259
msgid "First we need to get an actual device backend and from its ``configuration`` and ``properties`` we can setup a coupling map and a noise model to match the device. While we could leave the simulator with the default all to all map, this shows how to set the coupling map too. Note: We can also use this coupling map as the entanglement map for the variational form if we choose."
msgstr "まず、実際のデバイスのバックエンドを取得し、その ``configuration`` と ``properties`` から、デバイスに合うようカップリング・マップとノイズ・モデルを設定します。シミュレーターをデフォルトの全結合マップのままにしておくこともできますが、ここではカップリング・マップの設定方法を示しています。注: 変分形式のエンタングルメント・マップとして、このカップリング・マップを用いることもできます。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:261
#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:379
msgid "Note: simulation with noise will take longer than without noise."
msgstr "注: ノイズを伴うシミュレーションには、ノイズを含まない場合に比べて時間がかかります。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:263
msgid "Terra Mock Backends:"
msgstr "Terra 擬似バックエンド:"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:265
msgid "We will use real noise data for an IBM Quantum device using the date stored in Qiskit Terra. Specifically, in this tutorial, the device is ibmq_vigo."
msgstr "Qiskit Terra に保存されているデータを用いて、IBM Quantum デバイスの実ノイズ・データを使用します。具体的に、このチュートリアルでのデバイスは ibmq_vigo です。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:375
msgid "Performance *with* noise and measurement error mitigation"
msgstr "*ノイズおよび測定誤差緩和がある場合* のパフォーマンス"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:377
msgid "Now we will add method for measurement error mitigation, which increases the fidelity of measurement. Here we choose ``CompleteMeasFitter`` to mitigate the measurement error. The calibration matrix will be auto-refresh every 30 minute (default value)."
msgstr "測定誤差の軽減手法を追加し、測定の忠実度を高めます。ここでは、測定誤差を軽減するために ``CompleteMeasFitter`` を選択します。較正行列は 30 分ごと (デフォルト値) に自動更新されます。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:464
msgid "Lets bring the results together here for a summary."
msgstr "ここで、結果をまとめてみましょう。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:466
msgid "We produced a reference value using a classical algorithm and then proceeded to run VQE on a qasm simulator. While the simulation is ideal (no noise) there is so called shot-noise due to sampling - increasing the number of shots reduces this as more and more samples are taken, but shots was left at the default of 1024 and we see a small effect in the outcome."
msgstr "古典アルゴリズムを用いて参照値を求め、 qasm シミュレーター上で VQE を実行しました。 シミュレーションは理想的な (ノイズがない) ものですが 、サンプリングに起因するショットノイズと呼ばれるものがあります。ショット数を増やすとより多くのサンプルが得られるのでこれは減少しますが、ショット数は 1024 のままであり、結果には小さな影響が見られます。"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:468
msgid "Then we added noise using a model taken off a real device and can see the result is affected. Finally we added measurement noise mitigation which adjusts the results in an attempt to alleviate the affect of noise in the classical equipment measuring the qubits."
msgstr "次に、実際のデバイスから取り出したモデルを使用してノイズを加え、結果が影響を受けることを確認できます。最後に、古典的な装置で量子ビットを測定する際の、ノイズの影響を軽減するために、測定結果を調整する測定ノイズ緩和を追加しました。"

