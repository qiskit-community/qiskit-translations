msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 17:09+0000\n"
"PO-Revision-Date: 2021-08-30 06:26\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/04_vqe_advanced.po\n"
"X-Crowdin-File-ID: 9450\n"
"Language: ja_JP\n"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:10
msgid "This page was generated from `tutorials/algorithms/04_vqe_advanced.ipynb`__."
msgstr "このページは `tutorials/algorithms/04_vqe_advanced.ipynb`__ から生成されました。"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:9
msgid "Advanced VQE usage"
msgstr "VQE の高度な使い方"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:11
msgid "There exist several parameters for configuring and using more advanced `VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html>`__ capabilities. This tutorial will cover the parameters such as ``initial point``, ``expectation`` and ``gradient``."
msgstr "`VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html>`__ のより高度な機能を設定して使用するために、いくつかのパラメーターが用意されています。このチュートリアルでは、 ``initial_point``, ``expectation``, ``gradient`` などのパラメーターについて説明します。"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:13
msgid "It will also cover advanced simulator use such as using Aer with the Matrix Product State method."
msgstr "また、 Matrix Product State 法による Aer の利用法など、シミュレーターの高度な使用法についても解説します。"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:39
msgid "Here we will use the same operator as used in the other VQE algorithms tutorials."
msgstr "ここでは、他の VQE アルゴリズムのチュートリアルで用いたものと同じ演算子を使用します。"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:65
msgid "Initial point"
msgstr "初期点(Initial point)"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:67
msgid "The ``initial_point`` parameter allows the optimization to begin at the given point, where the point is a list of parameters that will configure the ansatz. By default the initial point is ``None`` which means that VQE will choose one. The choice in in this case is if the supplied ansatz has a preferred point, based on the initial state provided to it, then this will be chosen, otherwise a random initial point that fits with any bounds the ansatz has will be chosen. If an initial point is supplied it will take priority though and be used - note though it must match in length to the number of parameters in the ansatz circuit."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:70
msgid "Why to use a initial point? One reason would be if you have guess a reasonable starting point for the problem or perhaps know have information from a prior experiment."
msgstr "なぜ初期点を使うのでしょうか。理由としては、問題にとって合理的な出発点が推測される場合や、過去の実験から得られた情報がある場合などが考えられます。"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:72
msgid "To demonstrate the use let’s first simply repeat the first working example from the `algorithms introduction <01_algorithms_introduction.ipynb#A-complete-working-example>`__ tutorial to get a solution’s optimal point."
msgstr "使い方を説明するために、まず `algorithms introduction <01_algorithms_introduction.ipynb#A-complete-working-example>`__ チュートリアルの最初の作業例を繰り返して、解を与える最適点を求めてみましょう。"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:155
msgid "Now we can take the ``optimal_point`` from the above result and use it as the ``initial_point`` here."
msgstr "上の結果から ``optimal_point`` を取り出して、これを ``initial_point`` として用います。"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:245
msgid "Here we see that result was arrived at much more quickly with ``optimizer_evals`` when it started from a random value when the initial point was not supplied (default of None)."
msgstr "``optimizer_evals`` を見ると、初期値が与えられず (デフォルトでNone) ランダムな値から開始した場合より、結果がより早く得られているのがわかります。"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:247
msgid "Where this becomes useful for examples where we the solution to one problem can be used to for a guess for the solution to a very close similar problem. Chemistry is very good example where we change the inter-atomic distance(s) of molecule to plot a dissociation profile. When the distance changes are small we expect the solution to still be nearby the prior one. One technique is to simply use the optimal point from one solution as the starting point for the next step. Now more complex techniques are possible that do some extrapolation to compute an initial position based on prior solution(s) rather than directly use the prior solution."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:260
msgid "Expectation"
msgstr "期待値(Expectation)"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:262
msgid "The energy of the Hamiltonian operator that VQE is working on is the expectation value when evaluated with the parameterized ansatz. To compute the expectation value VQE uses an instance of an `expectation <https://qiskit.org/documentation/apidoc/qiskit.opflow.expectations.html>`__ object. Such an instance may be supplied via the ``expectation`` parameter, or in the default case, where it has a value of ``None``, VQE will use the `ExpectationFactory <https://qiskit.org/documentation/stubs/qiskit.opflow.expectations.ExpectationFactory.html>`__ to create itself a suitable instance based on the supplied backend."
msgstr "VQE が求めるハミルトニアン演算子のエネルギーは、パラメータ化された ansatz で評価された場合の期待値です。期待値を計算するために VQE は `expectation <https://qiskit.org/documentation/apidoc/qiskit.opflow.expectations.html>`__ オブジェクトのインスタンスを使います。これは ``expectation`` パラメーターで与えられるか、デフォルトの ``None`` の値を持っている場合には、VQE は `ExpectationFactory <https://qiskit.org/documentation/stubs/qiskit.opflow.expectations.ExpectationFactory.html>`__ を使って、与えられたバックエンドに基づき適切なインスタンスを作ります。"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:265
msgid "For most cases letting VQE create a suitable instance is sufficient. However the Qiskit Aer aer_simulator supports a snapshot instruction that can be used in conjunction with the operator expectation computation. If used then the outcome is ideal, i.e. like the statevector simulator, and has no shot noise. Since people normally choose the aer_simulator to have shot noise (sampling noise), and be more like a real-device outcome, VQE has an ``include_custom`` flag that is passed on to the ExpectationFactory. When using Aer qasm simulator, and this is set ``True``, the factory will return ``AerPauliExpectation`` which uses the snapshot instruction, when ``False``, default, then the regular ``PauliExpectation`` is returned."
msgstr "ほとんどの場合は VQE に作成させるだけで十分です。しかし Qiskit Aer の qasm_simulator はスナップショット命令をサポートしており、演算子の期待値計算と組み合わせて用いることができます。これを使えば、状態ベクトル・シミュレーターのように、出力はショット・ノイズの乗らない理想的なものとなります。通常はショット・ノイズ (サンプリング・ノイズ) を乗せて、より実デバイスに近い結果が得られるよう、 qasm_simulator を選択するので、 VQE には ExpectationFactory に渡される ``include_custom`` フラグが用意されています。これを True に設定すると、スナップショット命令を使用した ``AerPauliExpectation`` が返され、デフォルトの False に設定すると、通常の ``PauliExpectation`` が返されます。"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:268
msgid "The following example shows ``include_custom=True`` where the outcome matches the statevector simulator. In fact it can be better/faster to do this than use the statevector_simulator directly. This is because in the latter case when the Hamiltonian is a sum of Paulis it must be converted to matrix form, and this is avoided when using the snapshot instruction done when include_custom is True."
msgstr "以下の例では、結果が statevector_simulator と一致する、 ``include_custom=True`` の場合を示しています。実際は、 statevector_simulator を直接使うよりもこちらの方法の方が、実行がより速くなることがあります。これは、 Pauli 行列の和として表されたハミルトニアンは行列形式に変換される必要がありますが、include_custom をTrue としてスナップショット命令を使うことで、これを回避できるからです。"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:350
msgid "In case you have doubts here is the aer_simulator again but include_custom has been left to default to False. The optimization ended abruptly, presumably due to the shot noise confusing the SLSQP optimizer."
msgstr "念のため、ここで再度 aer_simulator を実行しますが、include_custom をデフォルトの False のままにしておきます。おそらくSLSQPオプティマイザーのショットノイズが原因で、最適化が突然終了してしまいます。"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:443
msgid "Changing the optimizer to SPSA, which is designed to work in noisy environments, gets us a better result. Though the noise has affected the outcome so it’s not as accurate."
msgstr "オプティマイザーをノイズの多い環境で動作するよう設計された SPSA に変更すると、より良い結果が得られます。ただし、ノイズが結果に影響を与えているため、正確性は劣ります。"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:524
msgid "As mentioned above, an expectation object can be explicitly given (so the internal ``ExpectationFactory`` and include_custom are never used/needed. Below we create an ``AerPauliExpectation`` and pass this to VQE. We can see the result matches that above where we set include_custom to True and let VQE create its own expectation object."
msgstr "上述のように、期待値オブジェクトは明示的に与えることができます。 (そのため、内部の ``ExpectationFactory`` や include_custom は決して使用されることも、必要とされることはありません) 以下では ``AerPauliExpectation`` を作成し、 VQE に渡しています。結果は、 include_custom を True として VQE に独自の期待値オブジェクトを作成させた、上の結果と一致していることが確認できます。"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:606
msgid "By default, the ``PauliExpectation`` object, that would have be chosen when include_custom is False (or when using Aer aer_simulator, or a real device) groups Paulis into commuting sets. This is efficient as it runs less circuits to compute the expectation. However, if for some reason you wanted to run a circuit for each Pauli then then grouping can be turned off when constructing the PauliExpectation. You need to explicitly pass in such an expectation instance to VQE to have it work this way though as shown below."
msgstr "デフォルトでは、 include_custom が False の場合 (あるいは Aer のaer_simulator や実デバイスを使用している場合) に選ばれる ``PauliExpectation`` オブジェクトは、 Pauli 行列を交換演算子の組としてグループ化します。これは、期待値を計算するための回路数を減らすことができるので、効率的です。しかし何らかの理由で、Pauli 演算子ごとに回路を実行したい場合には、 PauliExpectation を作成する際に、グループ化をオフにすることができます。以下に示すように、この方法で動作させるためには、明示的に VQE へこのような期待値インスタンスを渡す必要があります。"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:690
msgid "Gradient"
msgstr "勾配(Gradient)"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:692
msgid "Optimizers that use a gradient-based technique can be supplied with a user defined gradient that will be used instead of their default gradient computation which is usually done by simple finite difference. Gradients are passed indirectly via to the optimizer via its ``gradient`` parameter."
msgstr "勾配ベースの手法を用いるオプティマイザーには、通常は単純な有限差分で求められるデフォルトの勾配の代わりとして、ユーザー定義の勾配を与えることができます。勾配はオプティマイザーの ``gradient`` パラメーターを介して、間接的にオプティマイザーに渡されます。"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:694
msgid "As the use of a user supplied ``gradient`` was shown in the `Monitoring VQE Convergence <02_vqe_convergence.ipynb#Using-Gradient-framework>`__ tutorial I will simply refer you there. Also the `Gradients framework <../operators/02_gradients_framework.ipynb>`__ tutorial has much more about the gradients themselves."
msgstr "`Monitoring VQE Convergence <02_vqe_convergence.ipynb#Using-Gradient-framework>`__ チュートリアルでは、ユーザー定義の ``gradient`` の使用法が示されているので、そちらを参照してください。また `Gradients framework <../operators/02_gradients_framework.ipynb>`__ チュートリアルには、勾配そのものについての詳細が示されています。"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:706
msgid "Quantum Instance and advanced simulation"
msgstr "Quantum Instance と高度なシミュレーション"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:708
msgid "While you may be familiar with passing a QuantumInstancen created from a ``aer_simulator_statevector`` a ``aer_simulator`` or real device backend, it is possible to use the advanced simulation modes of Aer too when applicable. For instance we can easily use the Aer `Matrix Product State <../simulators/7_matrix_product_state_method.ipynb>`__ method, that has the potential to scale to larger numbers of qubits."
msgstr "``aer_simulator_statevector`` や ``aer_simulator`` 、実デバイスのバックエンドから作成された QuantumInstance を渡す方法が一般的ですが、 Aer の高度なシミュレーション・モードを使用することも可能です。例えば、 Aer の `Matrix Product State <../simulators/7_matrix_product_state_method.ipynb>`__ メソッドは簡単に用いることができて、より多くの量子ビットに拡張できる可能性をもっています。"

