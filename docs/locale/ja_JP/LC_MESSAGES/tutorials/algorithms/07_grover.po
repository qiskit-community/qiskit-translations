msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-07 16:27+0000\n"
"PO-Revision-Date: 2020-12-24 05:06\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/07_grover.po\n"
"X-Crowdin-File-ID: 9456\n"
"Language: ja_JP\n"

#: ../../tutorials/algorithms/07_grover.ipynb:10
msgid "This page was generated from `tutorials/algorithms/07_grover.ipynb`__."
msgstr "このページは `tutorials/algorithms/07_grover.ipynb`__ から生成されました。"

#: ../../tutorials/algorithms/07_grover.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/07_grover.ipynb>`_."
msgstr "`IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/07_grover.ipynb>`_ でインタラクティブに実行します。"

#: ../../tutorials/algorithms/07_grover.ipynb:9
msgid "Grover’s Algorithm and Amplitude Amplification"
msgstr "Grover のアルゴリズムと振幅増幅"

#: ../../tutorials/algorithms/07_grover.ipynb:11
msgid "Grover’s algorithm is one of the most famous quantum algorithms introduced by Lov Grover in 1996 [1]. It has initially been proposed for unstructured search problems, i.e. for finding a marked element in a unstructured database. However, Grover’s algorithm is now a subroutine to several other algorithms, such as Grover Adaptive Search [2]. For the details of Grover’s algorithm, please see `Grover’s Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ in the Qiskit textbook."
msgstr "Grover のアルゴリズムは、 1996 年に Lov Grover によって提案された、最も有名な量子アルゴリズムの一つです [1] 。最初は非構造検索問題、すなわち非構造化データベース内のマークされた要素を見つける問題のために提案されました。しかし Grover のアルゴリズムは、現在 Grover Adaptive Search [2] のような他のいくつかのアルゴリズムのサブルーチンとなっています。 Grover のアルゴリズムの詳細については、 Qiskit textbook の `Grover's Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ を参照してください。"

#: ../../tutorials/algorithms/07_grover.ipynb:13
msgid "Qiskit implements Grover’s algorithm in the ``Grover`` class. This class also includes the generalized version, Amplitude Amplification [3], and allows setting individual iterations and other meta-settings to Grover’s algorithm."
msgstr "Qiskitは、 ``Grover`` クラスにGroverのアルゴリズムを実装します。 このクラスには、一般化されたバージョンである振幅増幅 [3] も含まれており、個々の反復やその他のメタ設定をグローバーのアルゴリズムに設定できます。"

#: ../../tutorials/algorithms/07_grover.ipynb:15
#: ../../tutorials/algorithms/07_grover.ipynb:723
msgid "**References:**"
msgstr "**参考文献: **"

#: ../../tutorials/algorithms/07_grover.ipynb:17
msgid "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219."
msgstr "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219."

#: ../../tutorials/algorithms/07_grover.ipynb:19
msgid "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"
msgstr "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"

#: ../../tutorials/algorithms/07_grover.ipynb:21
msgid "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"
msgstr "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"

#: ../../tutorials/algorithms/07_grover.ipynb:33
msgid "Grover’s algorithm"
msgstr "Grover のアルゴリズム"

#: ../../tutorials/algorithms/07_grover.ipynb:35
msgid "Grover’s algorithm uses the Grover operator :math:`\\mathcal{Q}` to amplify the amplitudes of the good states:"
msgstr "Grover のアルゴリズムは、 Grover 演算子 :math:`\\mathcal{Q}` を用いて、所望の状態の振幅を増幅します。"

#: ../../tutorials/algorithms/07_grover.ipynb:37
msgid "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"
msgstr "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"

#: ../../tutorials/algorithms/07_grover.ipynb:42
msgid "Here, \\* :math:`\\mathcal{A}` is the initial search state for the algorithm, which is just Hadamards, :math:`H^{\\otimes n}` for the textbook Grover search, but can be more elaborate for Amplitude Amplification \\* :math:`\\mathcal{S_0}` is the reflection about the all 0 state"
msgstr ""

#: ../../tutorials/algorithms/07_grover.ipynb:44
msgid "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"
msgstr "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"

#: ../../tutorials/algorithms/07_grover.ipynb:49
msgid "\\* :math:`\\mathcal{S_f}` is the oracle that applies"
msgstr "\\* :math:`\\mathcal{S_f}` は適用するオラクルです。"

#: ../../tutorials/algorithms/07_grover.ipynb:51
msgid "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"
msgstr "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"

#: ../../tutorials/algorithms/07_grover.ipynb:56
msgid "where :math:`f(x)` is 1 if :math:`x` is a good state and otherwise 0."
msgstr ":math:`f(x)` は :math:`x` が所望の状態の場合 1 となり、それ以外の場合は 0 になります。"

#: ../../tutorials/algorithms/07_grover.ipynb:58
msgid "In a nutshell, Grover’s algorithm applies different powers of :math:`\\mathcal{Q}` and after each execution checks whether a good solution has been found."
msgstr "一言で言えば、グローバーのアルゴリズムは異なる :math:`\\mathcal{Q}` の累乗を適用し、各実行後に適切な解が見つかったかどうかをチェックします。"

#: ../../tutorials/algorithms/07_grover.ipynb:61
msgid "Running Grover’s algorithm"
msgstr "Grover のアルゴリズムの実行"

#: ../../tutorials/algorithms/07_grover.ipynb:63
msgid "To run Grover’s algorithm with the ``Grover`` class, firstly, we need to specify an oracle for the circuit of Grover’s algorithm. In the following example, we use ``QuantumCircuit`` as the oracle of Grover’s algorithm. However, there are several other class that we can use as the oracle of Grover’s algorithm. We talk about them later in this tutorial."
msgstr "``Grover`` クラスでGroverのアルゴリズムを実行するには、まず、Groverのアルゴリズムの回路にオラクルを指定する必要があります。次の例では、グローバーのアルゴリズムのオラクルとして ``QuantumCircuit`` を使用しています。 ただし、グローバーのアルゴリズムのオラクルとして使用できるクラスは他にもいくつかあります。 これらについては、このチュートリアルの後半で説明します。"

#: ../../tutorials/algorithms/07_grover.ipynb:65
msgid "Note that the oracle for ``Grover`` mush be a *phase-flip* oracle. That is, it multiplies the amplitudes of the of “good states” by a factor of :math:`-1`. We explain later how to convert a *bit-flip* oracle to a phase-flip oracle."
msgstr "Grover のアルゴリズムのためのオラクルは、 *位相反転* オラクルであることに注意してください。つまり **所望の状態** の振幅に :math:`-1` の係数を乗じています。 *ビット反転* オラクルを位相反転オラクルに変換する方法については後述します。"

#: ../../tutorials/algorithms/07_grover.ipynb:120
msgid "Then, we specify a backend and call the ``run`` method of ``Grover`` with a backend to execute the circuits. The returned result type is a ``GroverResult``."
msgstr "次にバックエンドを指定し、 ``Grover`` の ``run`` メソッドを呼び出して回路を実行します。返される結果の型は ``GroverResult`` です。"

#: ../../tutorials/algorithms/07_grover.ipynb:122
msgid "If the search was successful, the ``oracle_evaluation`` attribute of the result will be ``True``. In this case, the most sampled measurement, ``top_measurement``, is one of the “good states”. Otherwise, ``oracle_evaluation`` will be False."
msgstr "探索が成功した場合は、 ``oracle_evaluation`` 属性が ``True`` となります。この場合、最も多くサンプリングされた測定値である ``top_measurement`` が「所望の状態」の一つであることを示します。そうでなければ、 ``oracle_evaluation`` は False となります。"

#: ../../tutorials/algorithms/07_grover.ipynb:176
msgid "In the example, the result of ``top_measurement`` is ``11`` which is one of “good state”. Thus, we succeeded to find the answer by using ``Grover``."
msgstr "この例では、 ``top_measurement`` の結果が ``11`` となっており、これは「所望の状態」の一つとなっています。このように、 ``Grover`` を用いて解を見つけることに成功しました。"

#: ../../tutorials/algorithms/07_grover.ipynb:188
msgid "Using the different types of classes as the oracle of ``Grover``"
msgstr "``Grover`` オラクルとしての様々なクラスの使用"

#: ../../tutorials/algorithms/07_grover.ipynb:190
msgid "In the above example, we used ``QuantumCircuit`` as the oracle of ``Grover``. However, we can also use ``qiskit.aqua.components.oracles.Oracle``, and ``qiskit.quantum_info.Statevector`` as oracles. All the following examples are when :math:`|11\\rangle` is “good state”"
msgstr "上の例では、 ``Grover`` のオラクルとして ``QuantumCircuit`` を用いました。しかし、 ``qiskit.aqua.components.oracles.Oracle`` や ``qiskit.quantum_info.Statevector`` をオラクルとして用いることも可能です。以下の例は全て、:math:`|11\\rangle` が「所望の状態」である場合です。"

#: ../../tutorials/algorithms/07_grover.ipynb:244
msgid "Internally, the statevector is mapped to a quantum circuit:"
msgstr "内部的には、状態ベクトルが量子回路にマッピングされています。"

#: ../../tutorials/algorithms/07_grover.ipynb:274
msgid "The ``Oracle`` components in Qiskit Aqua allow for an easy construction of more complex oracles. The ``Oracle`` type has the interesting subclasses: \\* ``LogicalExpressionOracle``: for parsing logical expressions such as ``'~a | b'``. This is especially useful for solving 3-SAT problems and is shown in the accompanying `Grover Examples <08_grover_examples.ipynb>`__ tutorial. \\* ``TrutheTableOracle``: for converting binary truth tables to circuits"
msgstr "Qiskit Aqua の ``Oracle`` コンポーネントを用いれば、より複雑なオラクルを簡単に構築することが可能です。 ``Oracle`` 型には興味深いサブクラスがあります。 \\* ``LogicalExpressionOracle``: ``'~a | b'`` のような論理式を解析するためのものです。これは特に 3-SAT 問題を解くのに便利で、 `Grover Examples <08_grover_examples.ipynb>`__ チュートリアルで説明されています。 \\* ``TrutheTableOracle``: 真理値表を回路に変換するための関数です。"

#: ../../tutorials/algorithms/07_grover.ipynb:276
msgid "Here we’ll use the ``LogicalExpressionOracle`` for the simple example of finding the state :math:`|11\\rangle`, which corresponds to ``'a & b'``."
msgstr "ここでは ``LogicalExpressionOracle`` を用い、``'a & b'`` に対応する状態である :math:`|11\\rangle` を見つける、簡単な例を示します。"

#: ../../tutorials/algorithms/07_grover.ipynb:312
msgid "You can observe, that this oracle is actually implemented with three qubits instead of two!"
msgstr "このオラクルは、実際には二つではなく三つの量子ビットで実装されていることがわかります。"

#: ../../tutorials/algorithms/07_grover.ipynb:314
msgid "That is because the ``LogicalExpressionOracle`` is not a phase-flip oracle (which flips the phase of the good state) but a bit-flip oracle. This means it flips the state of an auxiliary qubit if the other qubits satisfy the condition. For Grover’s algorithm, however, we require a phase-flip oracle. To convert the bit-flip oracle to a phase-flip oracle we sandwich the controlled-NOT by :math:`X` and :math:`H` gates, as you can see in the circuit above."
msgstr "これは、 ``LogicalExpressionOracle`` が位相反転オラクル (所望の状態の位相を判定させる) ではなく、ビット反転オラクルだからです。これは他のビットが条件を満たしていれば、補助ビットの状態を反転させることというを意味しています。しかし、 Grover のアルゴリズムでは、位相反転オラクルが必要です。ビット反転オラクルを位相反転オラクルに変換するために、上記の回路で見られるように、 :math:`X` ゲートと :math:`H` ゲートでCNOT ゲートを挟みます。"

#: ../../tutorials/algorithms/07_grover.ipynb:316
msgid "**Note:** This transformation from a bit-flip to a phase-flip oracle holds generally and you can use this to convert your oracle to the right representation."
msgstr "**注: ** このビット反転から位相反転への変換は一般的なものであり、これを用いてオラクルを正しい表現に変換することができます。"

#: ../../tutorials/algorithms/07_grover.ipynb:328
msgid "Amplitude amplification"
msgstr "振幅増幅"

#: ../../tutorials/algorithms/07_grover.ipynb:330
msgid "Grover’s algorithm uses Hadamard gates to create the uniform superposition of all the states at the beginning of the Grover operator :math:`\\mathcal{Q}`. If some information on the good states is available, it might be useful to not start in a uniform superposition but only initialize specific states. This, generalized, version of Grover’s algorithm is referred to *Amplitude Amplification*."
msgstr ""

#: ../../tutorials/algorithms/07_grover.ipynb:332
msgid "In Qiskit, the initial superposition state can easily be adjusted by setting the ``state_preparation`` argument."
msgstr "Qiskit では ``state_preparation`` 引数を設定することで、重ね合わせの初期状態を簡単に調整することができます。"

#: ../../tutorials/algorithms/07_grover.ipynb:335
msgid "State preparation"
msgstr "状態の準備"

#: ../../tutorials/algorithms/07_grover.ipynb:337
msgid "A ``state_preparation`` argument is used to specify a quantum circuit that prepares a quantum state for the start point of the amplitude amplification. By default, a circuit with $H^{:nbsphinx-math:`\\otimes `n} $ is used to prepare uniform superposition (so it will be Grover’s search). The diffusion circuit of the amplitude amplification reflects ``state_preparation`` automatically."
msgstr "引数 ``state_preparation`` は、振幅増幅における開始点の量子状態を準備する量子回路の指定のために用いられます。デフォルトでは $H^{:nbsphinx-math:`\\otimes `n} $ の回路が、一様な重ね合わせを準備するために用いられています (これにより Grover 探索となります) 。振幅増幅における拡散回路は ``state_preparation`` を自動的に反映します。"

#: ../../tutorials/algorithms/07_grover.ipynb:442
msgid "Full flexibility"
msgstr "完全な柔軟性"

#: ../../tutorials/algorithms/07_grover.ipynb:444
msgid "For more advanced use, it is also possible to specify the entire Grover operator by setting the ``grover_operator`` argument. This might be useful if you know more efficient implementation for :math:`\\mathcal{Q}` than the default construction via zero reflection, oracle and state preparation."
msgstr "より高度な使用法としては、 ``grover_operator`` 引数を設定することで、 Grover 演算子全体を指定することもできます。これはゼロ状態まわりの反転、オラクル、状態準備を介したデフォルトの構成よりも、 :math:`\\mathcal{Q}` のより効率的な実装がわかっている場合に便利かもしれません。"

#: ../../tutorials/algorithms/07_grover.ipynb:446
msgid "The ``qiskit.circuit.library.GroverOperator`` can be a good starting point and offers more options for an automated construction of the Grover operator. You can for instance \\* set the ``mcx_mode`` \\* ignore qubits in the zero reflection by setting ``reflection_qubits`` \\* explicitly exchange the :math:`\\mathcal{S_f}, \\mathcal{S_0}` and :math:`\\mathcal{A}` operations using the ``oracle``, ``zero_reflection`` and ``state_preparation`` arguments"
msgstr "``qiskit.circuit.library.GroverOperator`` は良い出発点であり、 Grover 演算子の自動構築のためのオプションを提供しています。例えば、 ``mcx_mode`` を設定したり、 ``reflection_qubits`` を設定してゼロ状態まわりの反射における量子ビットを無視したり、 ``oracle``, ``zero_reflection``, ``state_preparation`` 引数を用いて :math:`\\mathcal{S_f} , \\mathcal{S_0}` , :math:`\\mathcal{A}` を明示的に取り換えることができます。"

#: ../../tutorials/algorithms/07_grover.ipynb:457
msgid "For instance, imagine the good state is a three qubit state :math:`|111\\rangle` but we used 2 additional qubits as auxiliary qubits."
msgstr "例えば、所望の状態は三量子ビットの :math:`|111\\rangle` ですが、補助量子ビットとして二量子ビットを追加するとします。"

#: ../../tutorials/algorithms/07_grover.ipynb:491
msgid "Then, per default, the Grover operator implements the zero reflection on all five qubits."
msgstr "デフォルトでは、 Grover 演算子は五つの量子ビット全てにゼロ状態まわりの反射を実装します。"

#: ../../tutorials/algorithms/07_grover.ipynb:522
msgid "But we know that we only need to consider the first three:"
msgstr "しかし、最初の三つだけを考えればよいということがわかっています。"

#: ../../tutorials/algorithms/07_grover.ipynb:554
msgid "Dive into other arguments of ``Grover``"
msgstr "``Grover`` の他の引数について"

#: ../../tutorials/algorithms/07_grover.ipynb:556
msgid "``Grover`` has arguments other than ``oracle`` and ``state_preparation``. We will explain them in this section."
msgstr "``Grover`` には ``oracle`` と ``state_prepartion`` 以外にも引数があります。このセクションでは、それらについて説明します。"

#: ../../tutorials/algorithms/07_grover.ipynb:559
msgid "Specifying ``good_state``"
msgstr "``good_state`` の指定"

#: ../../tutorials/algorithms/07_grover.ipynb:561
msgid "``good_state`` is used to check whether the measurement result is correct or not internally. It can be a list of binary strings, a list of integer, ``Statevector``, and Callable. If the input is a list of bitstrings, each bitstrings in the list represents a good state. If the input is a list of integer, each integer represent the index of the good state to be :math:`|1\\rangle`. If it is a ``Statevector``, it represents a superposition of all good states."
msgstr "``good_state`` は測定結果が正しいかどうかを内部的にチェックするために使用します。これは、バイナリ文字列のリスト、整数のリスト、 ``Statevector`` 、 Callable のいずれかになります。入力がビット列のリストの場合、リスト内の各ビット列が所望の状態を表します。入力が整数のリストならば、それぞれの整数は所望の状態で :math:`|1\\rangle` となる桁のインデックスを表します。 ``Statevector`` の場合は、全ての所望の状態の重ね合わせを表します。"

#: ../../tutorials/algorithms/07_grover.ipynb:715
msgid "The number of ``iterations``"
msgstr "``iterations`` の数"

#: ../../tutorials/algorithms/07_grover.ipynb:717
msgid "The number of repetition of applying the Grover operator is important to obtain the correct result with Grover’s algorithm. The number of iteration can be set by the ``iteration`` argument of ``Grover``. The following inputs are supported: \\* an integer to specify a single power of the Grover operator that’s applied \\* or a list of integers, in which all these different powers of the Grover operator are run consecutively and after each time we check if a correct solution has been found"
msgstr "Grover 演算子のアルゴリズムで正しい結果を得るためには、 Grover 演算子を適用する際の繰り返し回数が重要です。繰り返し回数は ``Grover`` の引数 ``iterations`` で設定することができます。次の入力がサポートされています。入力が整数ならば、適用される Grover 演算子 の指数を表します。入力が整数のリストならば、 Grover 演算子がそれらの回数だけ連続して適用され、各回の実行後に正しい解が見つかったかどうかチェックされます。"

#: ../../tutorials/algorithms/07_grover.ipynb:719
msgid "Additionally there is the ``sample_from_iterations`` argument. When it is ``True``, instead of the specific power in ``iterations``, a random integer between 0 and the value in ``iteration`` is used as the power Grover’s operator. This approach is useful when we don’t even know the number of solution."
msgstr "これらに加えて、 ``sample_from_iterations`` という引数もあります。これが ``True`` になっている場合、 ``iterations`` で指定された指数の代わりに、 0 と ``iterations`` の間のランダムな整数を Grover 演算子の指数として用いることができます。この方法は、解の個数すら分からない場合に有用です。"

#: ../../tutorials/algorithms/07_grover.ipynb:721
msgid "For more details of the algorithm using ``sample_from_iterations``, see [4]."
msgstr "``sample_from_iterations`` を用いたアルゴリズムの詳細は [4] を参照してください。"

#: ../../tutorials/algorithms/07_grover.ipynb:725
msgid "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"
msgstr "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"

#: ../../tutorials/algorithms/07_grover.ipynb:775
msgid "When the number of solutions is known, we can also use a static method ``optimal_num_iterations`` to find the optimal number of iterations. Note that the output iterations is an approximate value. When the number of qubits is small, the output iterations may not be optimal."
msgstr "解の個数がわかっている場合には、静的メソッド ``optimal_num_iterations`` を用いて最適な反復回数を求めることもできます。出力される反復回数は、近似値であることに注意してください。量子ビット数が少ない場合には、出力される反復回数が最適でない可能性があります。"

#: ../../tutorials/algorithms/07_grover.ipynb:818
msgid "Applying ``post_processing``"
msgstr "``post_processing`` の適用"

#: ../../tutorials/algorithms/07_grover.ipynb:820
msgid "We can apply an optional post processing to the top measurement for ease of readability. It can be used e.g. to convert from the bit-representation of the measurement ``[1, 0, 1]`` to a DIMACS CNF format ``[1, -2, 3]``."
msgstr "読みやすさのために、最も多く得られた測定値に後処理を適用することができます。これは例えば、測定値のビット表現 ``[1, 0, 1]`` を DIMACS CNF 形式 ``[1, -2, 3]`` に変換するために使用可能です。"

