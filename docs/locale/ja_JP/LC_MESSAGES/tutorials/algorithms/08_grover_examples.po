msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-07 16:27+0000\n"
"PO-Revision-Date: 2020-12-24 06:07\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/08_grover_examples.po\n"
"X-Crowdin-File-ID: 9458\n"
"Language: ja_JP\n"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:10
msgid "This page was generated from `tutorials/algorithms/08_grover_examples.ipynb`__."
msgstr "このページは `tutorials/algorithms/08_grover_examples.ipynb`__ から生成されました。"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/08_grover_examples.ipynb>`_."
msgstr "`IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/08_grover_examples.ipynb>`_ でインタラクティブに実行します。"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:9
msgid "Grover’s algorithm examples"
msgstr "Grover のアルゴリズムの例"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:11
msgid "This notebook has examples demonstrating how to use the Qiskit `Grover <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Grover.html>`__ search algorithm, with different oracles."
msgstr "このノートブックでは、 Qiskit の `Grover <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Grover.html>`__ 探索アルゴリズムを様々なオラクルで使用する方法を示しています。"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:39
msgid "Finding solutions to 3-SAT problems"
msgstr "3-SAT 問題の求解"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:41
msgid "Let’s look at an example 3-Satisfiability (3-SAT) problem and walk-through how we can use Quantum Search to find its satisfying solutions. 3-SAT problems are usually expressed in `Conjunctive Normal Forms (CNF) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ and written in the `DIMACS-CNF <https://www.satcompetition.org/2009/format-benchmarks2009.html>`__ format. For example:"
msgstr "3-Satisfiability (3-SAT) 問題の例を取り上げ、量子探索を用いて充足解を見つける方法を説明します。 3-SAT 問題は通常 `Conjunctive Normal Forms (CNF) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ で表現され、 `DIMACS-CNF <https://www.satcompetition.org/2009/format-benchmarks2009.html>`__ 形式で書かれています。例えば、以下のようになります。"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:70
msgid "The CNF of this 3-SAT instance contains 3 variables and 5 clauses:"
msgstr "この 3-SAT インスタンスの CNF には、 3 つの変数と 5 つの節が含まれています。"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:72
msgid ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"
msgstr ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:74
msgid "It can be verified that this 3-SAT problem instance has three satisfying solutions:"
msgstr "この 3-SAT 問題のインスタンスには、以下の 3 つの充足解があることが確認できます。"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:76
msgid ":math:`(v_1, v_2, v_3) = (T, F, T)` or :math:`(F, F, F)` or :math:`(T, T, F)`"
msgstr ":math:`(v_1, v_2, v_3) = (T, F, T)` or :math:`(F, F, F)` or :math:`(T, T, F)`"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:78
msgid "Or, expressed using the DIMACS notation:"
msgstr "あるいは、 DIMACS 表記を用いて表現すれば、以下のようになります。"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:80
msgid "``1 -2 3``, or ``-1 -2 -3``, or ``1 2 -3``."
msgstr "``1 -2 3``, or ``-1 -2 -3``, or ``1 2 -3``."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:82
msgid "With this example problem input, we then create the corresponding ``oracle`` for our ``Grover`` search. In particular, we use the ``LogicalExpressionOracle`` component, which supports parsing DIMACS-CNF format strings and constructing the corresponding oracle circuit."
msgstr "この例題を入力として、 ``Grover`` 探索に対応する ``oracle`` を作成します。特に DIMACS-CNF 形式の文字列を解析し、対応するオラクル回路を構築するために、 ``LogicalExpressionOracle`` コンポーネントを用います。"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:103
msgid "The ``oracle`` can now be used to create an Grover instance:"
msgstr "これで ``oracle`` を用い、 Grover のインスタンスを作成できるようになりました。"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:124
msgid "We can then configure the backend and run the Grover instance to get the result:"
msgstr "そしてバックエンドを設定し、 Grover インスタンスを実行して結果を得ることができます。"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:167
msgid "As seen above, a satisfying solution to the specified 3-SAT problem is obtained. And it is indeed one of the three satisfying solutions."
msgstr "上記のように、与えられた 3-SAT 問題の充足解が得られています。そして、それは確かに三つある充足解のうちの一つとなっています。"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:169
msgid "Since we used the ``'qasm_simulator'``, the complete measurement result is also returned, as shown in the plot below, where it can be seen that the binary strings ``000``, ``011``, and ``101`` (note the bit order in each string), corresponding to the three satisfying solutions all have high probabilities associated with them."
msgstr "``qasm_simulator`` を用いたので、以下に示すように完全な測定結果も返されます。三つの解に対応するバイナリ文字列 ``000``, ``011``, ``101`` (それぞれの文字列のビット順に注意してください) は、全て高い確率ももっていることがわかります。"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:200
msgid "Boolean Logical Expressions"
msgstr "ブール論理表現"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:202
msgid "Qiskit’s ``Grover`` can also be used to perform Quantum Search on an ``Oracle`` constructed from other means, in addition to DIMACS. For example, the ``LogicalExpressionOracle`` can actually be configured using arbitrary Boolean logical expressions, as demonstrated below."
msgstr "Qiskit の ``Grover`` は DIMACS 以外にも、他の手段で構築された ``oracle`` に基づいた量子探索を実行することが可能です。例えば ``LogicalExpressionOracle`` は、以下に示すように、任意のブール論理表現を用いて実際に設定することができます。"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:236
msgid "In the example above, the input Boolean logical expression ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` should be quite self-explanatory, where ``^``, ``~``, and ``&`` represent the Boolean logical XOR, NOT, and AND operators, respectively. It should be quite easy to figure out the satisfying solution by examining its parts: ``w ^ x`` calls for ``w`` and ``x`` taking different values; ``~(y ^ z)`` requires ``y`` and ``z`` be the same; ``x & y & z`` dictates all three to be ``True``. Putting these together, we get the satisfying solution ``(w, x, y, z) = (False, True, True, True)``, which our ``Grover``\\ ’s result agrees with."
msgstr "上の例では、``^``, ``~``, ``&`` がそれぞれブール論理における XOR, NOT, AND 演算を表しており、入力されたブール論理表現 ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` は非常にわかりやすいはずです。それぞれの部分を調べることで、充足解を見つけるのはとても簡単なはずです。 ``w ^ x`` は ``w`` と ``x`` が異なる値を取ることを、 ``~(y ^ z)`` は ``y`` と ``z`` が同じであることを、``x & y & z`` は三つが全て ``True`` であることをそれぞれ必要とします。これらを組み合わせると、充足解 ``(w, x, y, z) = (False, True, True, True)`` が得られ、これは ``Grover`` の結果と一致しています。"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:249
msgid "TruthTable Oracles"
msgstr "TruthTable オラクル"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:251
msgid "With Qiskit, ``Oracle``\\ s can also be constructed from truth tables, meaning we can also perform Quantum Search on truth tables. Even though this might seem like a moot point as we would be essentially searching for entries of a truth table with the :math:`1` value, it’s a good example for demonstrative purpose."
msgstr "Qiskit を用いると、 ``Oracle`` は真理値表からも構築することができ、言い換えると真理値表に基づいて量子探索を実行することができます。これは本質的には、 :math:`1` の値をもつ真理値表のエントリーを検索することになるので、意味がないように思えるかもしれませんが、実演のためには良い例となっています。"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:272
msgid "As shown, the ``truthtable`` is specified with a bitstring containing values of all entries in the table. It has length :math:`16`, so the corresponding truth table is of :math:`4` input bits. Since the very first and last values are :math:`1`, the corresponding truth table target entries are ``0000`` and ``1111``."
msgstr "このように ``truthtable`` は表内の全てのエントリーの値を含むビット列で指定されます。この長さは :math:`16` であるので、対応する真理値表は :math:`4` の入力ビットで構成されます。最初と最後の値が :math:`1` であるため、対応する真理値表のエントリは ``0000``` と ``1111`` です。"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:274
msgid "Next, we can setup the ``Oracle`` and ``Grover`` objects to perform Quantum Search as usual."
msgstr "次に ``Oracle`` と ``Grover`` オブジェクトを設定して、従来通りに量子探索を実行します。"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:307
msgid "As seen in the above plot the search result coincides with our expectation."
msgstr "上のプロットに見られるように、探索結果は予想と一致しています。"

