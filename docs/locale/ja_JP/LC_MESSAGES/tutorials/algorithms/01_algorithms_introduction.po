msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-01 19:07+0000\n"
"PO-Revision-Date: 2022-11-01 19:36\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/01_algorithms_introduction.po\n"
"X-Crowdin-File-ID: 9444\n"
"Language: ja_JP\n"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:10
msgid "This page was generated from `tutorials/algorithms/01_algorithms_introduction.ipynb`__."
msgstr "このページは  `tutorials/algorithms/01_algorithms_introduction.ipynb`__ から生成されました。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:9
msgid "An Introduction to Algorithms in Qiskit"
msgstr "Qiskit におけるアルゴリズム入門"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:11
msgid "This is an introduction to algorithms in Qiskit and provides a high-level overview to help understand the various aspects of the functionality to get started. Other tutorials will provide more in-depth material, on given algorithms, and ways to use them etc."
msgstr "このチュートリアルは Qiskit によるアルゴリズムの入門編となっており、入門にあたって様々な機能の理解に役立つ高水準の概観を提供しています。その他のチュートリアルでは、アルゴリズムやその使用方法などについて、より詳細な資料を提供します。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:23
msgid "How is the algorithm library structured?"
msgstr "アルゴリズム・ライブラリの構成"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:25
msgid "Qiskit provides a number of `Algorithms <https://qiskit.org/documentation/apidoc/algorithms.html>`__ and they are grouped by category according to the task they can perform. For instance ``Minimum Eigensolvers`` to find the smallest eigen value of an operator, for example ground state energy of a chemistry Hamiltonian or a solution to an optimization problem when expressed as an Ising Hamiltonian. There are ``Linear Solvers`` for linear systems of equations problems and ``Amplitude Estimators`` for value estimation that can be used say in financial applications. The full set of categories can be seen in the Algorithms documentation link above."
msgstr "Qiskit は、多くの `アルゴリズム <https://qiskit.org/documentation/apidoc/algorithms.html>`__ を提供しており、それらは適用可能なタスクに応じてカテゴリーごとにグループ分けされています。例えば、化学的なハミルトニアンの基底エネルギーや、イジング・ハミルトニアンとして表現された最適化問題の解といった、演算子の最小固有値を求めるための ``Minimum Eigensolvers`` があります。また、線形方程式問題のための ``Linear Solvers`` や、金融アプリケーションなどに用いられる推定のための ``Amplitude Estimators`` があります。カテゴリーの全セットは、上記リンク先のアルゴリズム・ドキュメンテーションで見ることができます。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:28
msgid "Algorithms are configurable and often part of the configuration will be in the form of smaller building blocks, of which different instances of the building block type can be given. For instance with ``VQE``, the Variational Quantum Eigensolver, it takes a trial wavefunction, in the form of a ``QuantumCircuit`` and a classical optimizer among other things."
msgstr "アルゴリズムは設定可能で、多くの場合構成の一部は小さなブロックの形になり、構成ブロック・タイプの異なるインスタンスを与えることができます。例えば、変数量子固有ソルバーである ``VQE`` の場合、``QuantumCircuit`` と古典的なオプティマイザーの形で、試行波動方程式を取ります。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:30
msgid "Let’s take a look at an example to construct a VQE instance. Here ``TwoLocal`` is the variational form (trial wavefunction), a parameterized circuit which can be varied, and ``SLSQP`` a classical optimizer. These are created as separate instances and passed to VQE when it is constructed. Trying, for example, a different classical optimizer, or variational form is simply a case of creating an instance of the one you want and passing it into VQE."
msgstr "VQE インスタンスを構築する例を見てみましょう。ここで ``TwoLocal`` は変分形式 (試行波動関数) 、つまりパラメーター表示されている変分可能な回路であり、 ``SLSQP`` は古典的なオプティマイザーです。これらは別々のインスタンスとして作成され、 VQE の構築時に渡されます。例えば、別の古典的なオプティマイザーや変分形式を試す場合には、単純に所望のインスタンスを作成して、 VQE に渡すだけでよいです。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:58
msgid "Let’s draw the ansatz so we can see it’s a ``QuantumCircuit`` where θ[0] through θ[7] will be the parameters that are varied as VQE optimizer finds the minimum eigenvalue. We’ll come back to the parameters later in a working example below."
msgstr "VQE オプティマイザーが最小固有値を求める際の変分パラメーターが θ[0] から θ[7] であるような ``QuantumCircuit`` となっていることを確認するため、 ansatz を描画してみましょう。パラメータについては、後ほど作業例で説明します。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:133
msgid "But more is needed before we can run the algorithm so let’s get to that next."
msgstr "しかしアルゴリズムの実行には、これだけではまだ不十分です。次に進みましょう。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:145
msgid "How to run an algorithm?"
msgstr "アルゴリズムの実行"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:147
msgid "In order to run an algorithm we need to have backend, a simulator or real device, on which the circuits that comprise the algorithm can be run. So for example we can use the ``aer_simulator_statevector`` from the Aer provider."
msgstr "アルゴリズムを実行するためには、そのアルゴリズムを構成する回路の実行が可能なバックエンド、シミュレーター、実デバイスが必要です。例えば、 Aer プロバイダーの ``aer_simulator_statevector`` を用いることができます。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:170
msgid "Now a backend on its own does not have information on how you might want to run the circuits etc. For example how many shots, do you want a noise model, even options around transpiling the circuits. For this Qiskit Terra has a ```QuantumInstance`` <https://qiskit.org/documentation/stubs/qiskit.utils.QuantumInstance.html>`__ which is provided both the backend as well as various settings around the circuit processing and execution so for instance:"
msgstr "この時点で、バックエンド単体はどのように回路を動作させるかといった情報をもっていません。例えば、ショット数、ノイズモデルを使うかどうか、回路のトランスパイル周りのオプションなどです。そのため、Qiskit Terraには `QuantumInstance <https://qiskit.org/documentation/stubs/qiskit.utils.QuantumInstance.html>`__ があり、バックエンドだけでなく、回路の処理や実行に関する様々な設定を提供しています。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:194
msgid "Note: if you provide the backend directly then internally a ``QuantumInstance`` will be created from it, with default settings, so at all times the algorithms are working through a ``QuantumInstance``."
msgstr "注: バックエンドを直接提供した場合は、デフォルト設定で内部的に ``QuantumInstance`` が作成されるので、アルゴリズムは常に ``QuantumInstance`` を通して動作します。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:196
msgid "So now we would be able to call the `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html#qiskit.algorithms.VQE.compute_minimum_eigenvalue>`__ method. The latter is the interface of choice for the application modules, such as Nature and Optimization, in order that they can work interchangeably with any algorithm within the specific category."
msgstr "これで、`compute_minimum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html#qiskit.algorithms.VQE.compute_minimum_eigenvalue>`__ メソッドを呼び出せるようになりました。 後者は、NatureやOptimizationなどのアプリケーション・モジュール用のインターフェースです。 特定のカテゴリ内のあらゆるアルゴリズムとの相互作用を可能にするためのものです。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:208
msgid "A complete working example"
msgstr "完全な実例"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:210
msgid "Let’s put what we have learned from above together and create a complete working example. VQE will find the minimum eigenvalue, i.e. minimum energy value of a Hamiltonian operator and hence we need such an operator for VQE to work with. Such an operator is given below. This was originally created by the Nature application module as the Hamiltonian for an H2 molecule at 0.735A interatomic distance. It’s a sum of Pauli terms as below, but for now I am not going to say anything further about it since the goal is to run the algorithm, but further information on operators can be found in other tutorials."
msgstr "これまでに学んだことをまとめ、完全な実例を作成します。 VQE は、最小の固有値、つまり、ハミルトニアン演算子の最小エネルギー値を検出するので、 VQE の操作を行うためのオペレーターが必要となります。 そのような作用素は以下のようになります。 これは元々Natureアプリケーションモジュールによって、原子間距離 0.735A の H2 分子のハミルトニアンとして作成されたものです。 これは、 Pauli項の合計です。アルゴリズムを実行することが目標であるため、これ以上のことを明言しませんが、他のチュートリアルで演算子についてより深く説明しています。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:238
msgid "So let’s build a VQE instance passing a backend using a ``QuantumInstance``, to the constructor. Now VQE does have setters so the ``QuantumInstance`` can also be passed later."
msgstr "では、 ``QuantumInstance`` を使用してバックエンドをコンストラクターに渡すVQEインスタンスを構築しましょう。 VQEにはセッターがあるので、 ``QuantumInstance`` を後で渡すこともできます。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:240
msgid "Note: In order that you can run this notebook and see the exact same output the random number generator used throughout algorithms in ``algorithms_globals``, as well as the transpiler and simulator, via the ``QuantumInstance``, are seeded. You do not have to do this but if want to be able to reproduce the exact same outcome each time then this is how it’s done."
msgstr "注: このノートブックを実行して全く同じ出力が得られるようにするため、アルゴリズム全体で用いられている乱数生成器は ``algorithms_globals`` で、トランスパイラーとシミュレーターは ``QuantumInstance`` を通して、それぞれシード値が固定されています。このようにする必要は必ずしもありませんが、毎回全く同じ結果を再現したい場合にはこのようにします。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:242
msgid "So let’s run VQE and print the result object it returns."
msgstr "それでは VQE を実行して、その返り値を表示してみましょう。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:347
msgid "From the above result we can see it took the optimizer ``65`` evaluations of parameter values until it found the minimum eigenvalue of ``-1.85727`` which is the electronic ground state energy of the given H2 molecule. The optimal parameters of the ansatz can also be seen which are the values that were in the ansatz at the minimum value."
msgstr "上記の結果から、与えられた H2 分子の電子の基底エネルギーである ``-1.85727`` という最小固有値を得るまで、オプティマイザーが ``65`` 回のパラメーター評価を要したことがわかります。また、 ansatz の最適パラメーターは、 ansatz が最小値であったときの値を見ればわかります。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:359
msgid "Using VQE setting ``QuantumInstance`` after Construction"
msgstr "作成後に ``QuantumInstance`` を設定する VQE の使用"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:361
msgid "To close off let’s also create a VQE instance without supplying the ``QuantumInstance``. We later set it as long as by the time VQE runs it has a ``QuantumInstance`` to use."
msgstr "最後に ``QuantumInstance`` を与えずにVQEインスタンスを作成してみましょう。 ``QuantumInstance`` を使用するVQEを実行する前までに、それを設定すればよいです。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:466
msgid "As the identical seeding was used as the prior example the result can be seen to be the same."
msgstr "先ほどの例と同じシード値が使われているので、結果は同じであることがわかります。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:477
msgid "This concludes this introduction to algorithms in Qiskit. Please check out the other algorithm tutorials in this series for both broader as well as more in depth coverage of the algorithms."
msgstr "これで Qiskit におけるアルゴリズムの入門編は終了です。このシリーズの他のアルゴリズム・チュートリアルでは、より広い範囲のアルゴリズムをより詳細に学ぶことができます。"

