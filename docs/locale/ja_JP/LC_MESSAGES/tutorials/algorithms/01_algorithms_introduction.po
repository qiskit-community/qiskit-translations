msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:25+0000\n"
"PO-Revision-Date: 2023-08-14 19:07\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/algorithms/01_algorithms_introduction.po\n"
"X-Crowdin-File-ID: 9444\n"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:10
msgid "This page was generated from `tutorials/algorithms/01_algorithms_introduction.ipynb`__."
msgstr "このページは  `tutorials/algorithms/01_algorithms_introduction.ipynb`__ から生成されました。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:9
msgid "An Introduction to Algorithms in Qiskit"
msgstr "Qiskit におけるアルゴリズム入門"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:11
msgid "This is an introduction to algorithms in Qiskit and provides a high-level overview to help understand the various aspects of the functionality to get started. Other tutorials will provide more in-depth material, on given algorithms, and ways to use them etc."
msgstr "このチュートリアルは Qiskit によるアルゴリズムの入門編となっており、入門にあたって様々な機能の理解に役立つ高水準の概観を提供しています。その他のチュートリアルでは、アルゴリズムやその使用方法などについて、より詳細な資料を提供します。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:23
msgid "How is the algorithm library structured?"
msgstr "アルゴリズム・ライブラリの構成"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:25
msgid "Qiskit provides a number of `Algorithms <https://qiskit.org/documentation/apidoc/algorithms.html>`__ and they are grouped by category according to the task they can perform. For instance ``Minimum Eigensolvers`` to find the smallest eigen value of an operator, for example ground state energy of a chemistry Hamiltonian or a solution to an optimization problem when expressed as an Ising Hamiltonian. There are ``Time Evolvers`` for the time evolution of quantum systems and ``Amplitude Estimators`` for value estimation that can be used say in financial applications. The full set of categories can be seen in the Algorithms documentation link above."
msgstr "Qiskit は、多くの `アルゴリズム <https://qiskit.org/documentation/apidoc/algorithms.html>`__ を提供しており、それらは適用可能なタスクに応じてカテゴリーごとにグループ分けされています。例えば、化学的なハミルトニアンの基底エネルギーや、イジング・ハミルトニアンとして表現された最適化問題の解といった、演算子の最小固有値を求めるための ``Minimum Eigensolvers`` があります。また、量子系の時間発展を解くための ``Time Evolvers`` や、金融アプリケーションなどに用いられる推定のための ``Amplitude Estimators`` があります。カテゴリーの全セットは、上記リンク先のアルゴリズム・ドキュメンテーションで見ることができます。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:28
msgid "Algorithms are configurable and often part of the configuration will be in the form of smaller building blocks, of which different instances of the building block type can be given. For instance with ``VQE``, the Variational Quantum Eigensolver, it takes a trial wavefunction, in the form of a ``QuantumCircuit`` and a classical optimizer among other things."
msgstr "アルゴリズムは設定可能で、多くの場合構成の一部は小さなブロックの形になり、構成ブロック・タイプの異なるインスタンスを与えることができます。例えば、変数量子固有ソルバーである ``VQE`` の場合、``QuantumCircuit`` と古典的なオプティマイザーの形で、試行波動方程式を取ります。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:30
msgid "Let's take a look at an example to construct a VQE instance. Here ``TwoLocal`` is the variational form (trial wavefunction), a parameterized circuit which can be varied, and ``SLSQP`` a classical optimizer. These are created as separate instances and passed to VQE when it is constructed. Trying, for example, a different classical optimizer, or variational form is simply a case of creating an instance of the one you want and passing it into VQE."
msgstr "VQE インスタンスを構築する例を見てみましょう。ここで ``TwoLocal`` は変分形式 (試行波動関数) 、つまりパラメーター表示されている変分可能な回路であり、 ``SLSQP`` は古典的なオプティマイザーです。これらは別々のインスタンスとして作成され、 VQE の構築時に渡されます。例えば、別の古典的なオプティマイザーや変分形式を試す場合には、単純に所望のインスタンスを作成して、 VQE に渡すだけでよいです。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:56
msgid "Let's draw the ansatz so we can see it's a ``QuantumCircuit`` where θ[0] through θ[7] will be the parameters that are varied as VQE optimizer finds the minimum eigenvalue. We'll come back to the parameters later in a working example below."
msgstr "VQE オプティマイザーが最小固有値を求める際の変分パラメーターが θ[0] から θ[7] であるような ``QuantumCircuit`` となっていることを確認するため、 ansatz を描画してみましょう。パラメータについては、後ほど作業例で説明します。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:86
msgid "But more is needed before we can run the algorithm so let's get to that next."
msgstr "しかしアルゴリズムの実行には、これだけではまだ不十分です。次に進みましょう。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:98
msgid "How to run an algorithm?"
msgstr "アルゴリズムの実行"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:100
msgid "Algorithms rely on the primitives to evaluate expectation values or sample circuits. The primitives can be based on a simulator or real device and can be used interchangeably in the algorithms, as they all implement the same interface."
msgstr "アルゴリズムは、Primitiveを利用して期待値やサンプル回路を評価します。Primitiveはシミュレーターや実機に基づいており、同じインタフェースを実装しているため、アルゴリズムで互換性を持って使用することができます。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:102
msgid "In the VQE, we have to evaluate expectation values, so for example we can use the ``qiskit.primitives.Estimator`` which is shipped with the default Qiskit Terra installation."
msgstr "VQEでは、期待値を評価する必要があります。例えば、デフォルトの Qiskit Terra インストール済み環境に同梱されている ``qiskit.primitives.Estimator`` を使用することができます。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:125
msgid "This estimator uses an exact, statevector simulation to evaluate the expectation values. We can also use a shot-based and noisy simulators or real backends instead. For more information of the simulators you can check out `Qiskit Aer <https://qiskit.org/documentation/apidoc/aer_primitives.html>`__ and for the actual hardware `Qiskit IBM Runtime <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/>`__."
msgstr "このEstimetorは、正確な状態ベクトルシミュレーションを使用して期待値を評価します。また、ショットベースでノイズシミュレーターや実際のバックエンドを使用することもできます。 シミュレーターの詳細については、`Qiskit Aer <https://qiskit.org/documentation/apidoc/aer_primitives.html>`__ を実際のハードウェアについては `Qiskit IBM Runtime <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/>`__ を参照してください。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:127
msgid "With all the ingredients ready, we can now instantiate the VQE:"
msgstr "すべての成分が用意されてたので、VQEをインスタンス化できます:"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:150
msgid "Now we can call the `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.VQE.compute_minimum_eigenvalue.html#qiskit.algorithms.minimum_eigensolvers.VQE.compute_minimum_eigenvalue>`__ method. The latter is the interface of choice for the application modules, such as Nature and Optimization, in order that they can work interchangeably with any algorithm within the specific category."
msgstr "これで `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.VQE.compute_minimum_eigenvalue.html#qiskit.algorithms.minimum_eigensolvers.VQE.compute_minimum_eigenvalue>`__ メソッドを呼び出すことができるようになりました。後者は、NatureやOptimizationなどのアプリケーションモジュールで選択されるインターフェースで、特定のカテゴリ内の任意のアルゴリズムと互換性を持って動作できるようにするためのものです。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:162
msgid "A complete working example"
msgstr "完全な実例"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:164
msgid "Let's put what we have learned from above together and create a complete working example. VQE will find the minimum eigenvalue, i.e. minimum energy value of a Hamiltonian operator and hence we need such an operator for VQE to work with. Such an operator is given below. This was originally created by the Nature application module as the Hamiltonian for an H2 molecule at 0.735A interatomic distance. It's a sum of Pauli terms as below, but for now I am not going to say anything further about it since the goal is to run the algorithm, but further information on operators can be found in other tutorials."
msgstr "これまでに学んだことをまとめ、完全な実例を作成します。 VQE は、最小の固有値、つまり、ハミルトニアン演算子の最小エネルギー値を検出するので、 VQE の操作を行うためのオペレーターが必要となります。 そのような作用素は以下のようになります。 これは元々Natureアプリケーションモジュールによって、原子間距離 0.735A の H2 分子のハミルトニアンとして作成されたものです。 これは、 Pauli項の合計です。アルゴリズムを実行することが目標であるため、これ以上のことを明言しませんが、他のチュートリアルで演算子についてより深く説明しています。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:194
msgid "So let's run VQE and print the result object it returns."
msgstr "それでは VQE を実行して、その返り値を表示してみましょう。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:291
msgid "From the above result we can see the number of cost function (=energy) evaluations the optimizer took until it found the minimum eigenvalue of :math:`\\approx -1.85727` which is the electronic ground state energy of the given H2 molecule. The optimal parameters of the ansatz can also be seen which are the values that were in the ansatz at the minimum value."
msgstr "上記の結果から、与えられたH2分子の電子基底状態エネルギーである最小固有値 :math:`\\approx -1.85727` を見つけるまで、オプティマイザーが行ったコスト関数（=エネルギー）評価の回数を見ることができます。また、ansatzの最適パラメーターは、ansatzが最小値であった時の値を見ればわかります。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:303
msgid "Updating the primitive inside VQE"
msgstr "VQE内部のprimitiveを更新します"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:305
msgid "To close off let's also change the estimator primitive inside the a VQE. Maybe you're satisfied with the simulation results and now want to use a shot-based simulator, or run on hardware!"
msgstr "最後に、VQE内部のestimator primitiveも変更してみましょう。シミュレーションの結果に満足して、今度はショットベースのシミュレーターを使ったり、ハードウェアで実行したくなったのではないでしょうか？"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:307
msgid "In this example we're changing to a shot-based estimator, still using Qiskit Terra's reference primitive. However you could replace the primitive by e.g. Qiskit Aer's estimator (``qiskit_aer.primitives.Estimator``) or even a real backend (``qiskit_ibm_runtime.Estimator``)."
msgstr "この例では、Qiskit Terraの参照primitiveを使用して、ショットベースのestimatorに変更します。しかし、このprimitiveを例えばQiskit Aerのestimator (``qiskit_aer.primitives.Estimator``) や、実際のバックエンド (``qiskit_ibm_runtime.Estimator``) で置き換えることができます。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:309
msgid "For noisy loss functions, the SPSA optimizer typically performs well, so we also update the optimizer. See also the `noisy VQE tutorial <https://qiskit.org/documentation/tutorials/algorithms/03_vqe_simulation_with_noise.html>`__ for more details on shot-based and noisy simulations."
msgstr "ノイズの多い損失関数に対しては、SPSAオプティマイザが一般的に良い性能を示すので、オプティマイザーも更新します。ショットベースとノイズの多いシミュレーションの詳細については、`noisy VQE tutorial <https://qiskit.org/documentation/tutorials/algorithms/03_vqe_simulation_with_noise.html>`__ も参照してください。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:412
msgid "Note: We do not fix the random seed in the simulators here, so re-running gives slightly varying results."
msgstr "注：ここではシミュレーターのランダムシードを固定していないため、再実行すると若干結果が異なります。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:423
msgid "This concludes this introduction to algorithms in Qiskit. Please check out the other algorithm tutorials in this series for both broader as well as more in depth coverage of the algorithms."
msgstr "これで Qiskit におけるアルゴリズムの入門編は終了です。このシリーズの他のアルゴリズム・チュートリアルでは、より広い範囲のアルゴリズムをより詳細に学ぶことができます。"

