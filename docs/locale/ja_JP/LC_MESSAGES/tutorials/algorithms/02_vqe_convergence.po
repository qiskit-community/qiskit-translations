msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-21 22:19+0000\n"
"PO-Revision-Date: 2022-04-21 23:22\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/02_vqe_convergence.po\n"
"X-Crowdin-File-ID: 9446\n"
"Language: ja_JP\n"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:10
msgid "This page was generated from `tutorials/algorithms/02_vqe_convergence.ipynb`__."
msgstr "このページは `tutorials/algorithms/02_vqe_convergence.ipynb`__ から生成されました。"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:9
msgid "Monitoring VQE convergence"
msgstr "VQE の収束性モニタリング"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:11
msgid "Variational algorithms in Qiskit, like `VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html>`__ and `QAOA <https://qiskit.org/documentation/stubs/qiskit.algorithms.QAOA.html>`__, provide the option for a user to give a callback method that can be used to monitor optimization progress as the algorithm runs and converges to the minimum. The callback is invoked for each functional evaluation by the optimizer and provides the current optimizer value, evaluation count, current optimizer parameters etc. Note that, depending on the specific optimizer this may not be each iteration (step) of the optimizer, so for example if the optimizer is calling the cost function to compute a finite difference based gradient this will be visible via the callback."
msgstr "`VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html>`__ や `QAOA <https://qiskit.org/documentation/stubs/qiskit.algorithms.QAOA.html>`__ といった Qiskit における変分アルゴリズムでは、アルゴリズムが実行されて最小値に収束するまでの最適化の進捗状況を監視することができ、そのためのコールバック・メソッドをユーザーに提供するオプションが用意されています。このコールバックは、オプティマイザーによる関数評価ごとに呼び出され、現在のオプティマイザーのパラメーターや関数値、評価回数などを返します。オプティマイザーによっては、これが各反復 (ステップ) ごとでない場合があることに注意してください。"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:14
msgid "This notebook demonstrates using Qiskit’s VQE algorithm to plot graphs of the convergence path to ground state energy with a selected set of optimizers."
msgstr "このノートブックでは Qiskit の VQE アルゴリズムを用いて、選択したオプティマイザーのセットによる基底エネルギーへの収束の様子を、グラフにプロットする方法を示します。"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:43
msgid "First we create a qubit operator for VQE. Here we will use the same operator as used in the algorithms introduction, which was originally computed by Qiskit Nature for an H2 molecule."
msgstr "まず、 VQE用の量子ビット演算子を作成します。ここでは、アルゴリズム入門で用いたものと同じ演算子を使用します。この演算子は元々 H2 分子用に Qiskit Nature によって計算されたものです。"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:68
msgid "We will show the callback usage below over a set of optimizers for comparison. The minimum energy of the H2 Hamiltonian can be found quite easily so we are able to set maxiters to a small value"
msgstr "比較するためのオプティマイザーのセットにおける、コールバックの使用法を以下に示します。 H2 ハミルトニアンの最小エネルギーは非常に容易に見つけることができるので、 maxiters を小さな値に設定することができます。"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:132
msgid "Now from the callback data we stored we can plot the energy value at each objective function call each optimizer makes. An optimizer using a finite difference method for computing gradient has that characteristic step like plot where for a number of evaluations it is computing the value for close by points to establish a gradient (the close by points having very similar values whose difference cannot be seen on the scale of the graph here)."
msgstr "保存されたコールバック・データから、各オプティマイザーが行う目的関数の呼び出しごとのエネルギー値をプロットすることができます。勾配の計算に有限差分法を用いたオプティマイザーでは、勾配を得るために多くの評価では近くにある点の値を計算していて、プロットのように特徴的なステップを示します。 (近くにある点は非常に似た値をもち、その差を今回のグラフのスケールで見ることはできません。)"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:167
msgid "Finally since the above problem is still easily tractable classically we can use NumPyMinimumEigensolver to compute a reference value for the solution. We can now plot the difference from the resultant exact solution as the energy converges with VQE towards the minimum value which should be that exact classical solution."
msgstr "最後に、上記の問題は古典的な手法で容易に解くことができるので、 NumPyMinimumEigensolver を用いて厳密解を計算しておきます。このようにすることで、 VQE によってエネルギーが古典的な厳密解である最小値へ収束していく過程において、厳密解との差をプロットすることができるようになります。"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:240
msgid "Using Gradient framework"
msgstr "勾配フレームワークの利用"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:242
msgid "Qiskit now has a Gradient framework as part of the Opflow capability. With the gradient computed for the optimizer we now see just the optimization steps themselves."
msgstr "Qiskitには、 Opflow 機能の一部として Gradient フレームワークがあります。オプティマイザー用に計算された勾配によって、最適化ステップそのものを可視化することができます。"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:327
msgid "Monitoring via the logging"
msgstr "ログによるモニタリング"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:329
msgid "Much of the code is instrumented with `Python logging <https://docs.python.org/3/library/logging.html>`__ statements. The logging is configurable to adjust level of logging etc. Here we set the logging level to ``INFO``"
msgstr "多くのコードは Python の `logging <https://docs.python.org/3/library/logging.html>`__ ステートメントを用いて実装します。ロギングの際、ログ・レベルなどの構成を変更することができます。 ここでは、ログ・レベルを ``INFO`` に設定します。"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:352
msgid "and at INFO level logging VQE will include information on the evaluations, as below."
msgstr "また INFO レベルのロギングでは、 VQE は評価に関する以下のような情報を含んでいます。"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:354
msgid "INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.07392554] - 116.41884 (ms), eval count: 1 INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.43698938] - 4.05884 (ms), eval count: 2 INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.74596698] - 7.40194 (ms), eval count: 3 INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.75399268] - 6.61016 (ms), eval count: 4"
msgstr "INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.07392554] - 116.41884 (ms), eval count: 1 INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.43698938] - 4.05884 (ms), eval count: 2 INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.74596698] - 7.40194 (ms), eval count: 3 INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.75399268] - 6.61016 (ms), eval count: 4"

