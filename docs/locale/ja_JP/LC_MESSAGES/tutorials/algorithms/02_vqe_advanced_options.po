msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-26 23:06+0000\n"
"PO-Revision-Date: 2023-02-01 12:48\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/02_vqe_advanced_options.po\n"
"X-Crowdin-File-ID: 9931\n"
"Language: ja_JP\n"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:10
msgid "This page was generated from `tutorials/algorithms/02_vqe_advanced_options.ipynb`__."
msgstr "このページは `tutorials/algorithms/02_vqe_advanced_options.ipynb`__から生成されました。"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:9
msgid "Advanced VQE Options"
msgstr "高度なVQEオプション"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:11
msgid "In the first algorithms tutorial, you learned how to set up a basic `VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.VQE.html>`__ algorithm. Now, you will see how to provide more advanced configuration parameters to explore the full range of capabilities of Qiskit’s variational algorithms: `VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.VQE.html>`__, `QAOA <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.QAOA.html>`__ and `VQD <https://qiskit.org/documentation/stubs/qiskit.algorithms.eigensolvers.VQD.html>`__ among others. In particular, this tutorial will cover how to set up a ``callback`` to monitor convergence and the use of custom ``initial point``\\ s and ``gradient``\\ s."
msgstr "最初のアルゴリズムチュートリアルでは、基本的な `VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.VQE.html>`__ アルゴリズムをどのように設定するかを学びました。`VQE`` <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.VQE.html>`__, `QAOA <https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.QAOA.html>`__, `VQD <https://qiskit.org/documentation/stubs/qiskit.algorithms.eigensolvers.VQD.html>`__ など、Qiskitの変分アルゴリズムの能力をフルに発揮するために、より高度な設定パラメーターの与え方をみていただきます。特に、収束を監視するための ``callback`` のセットアップ方法と、カスタム ``initial point`` と ``gradient`` の使用方法について説明します。"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:24
msgid "Callback"
msgstr "コールバック"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:35
msgid "Callback methods can be used to monitor optimization progress as the algorithm runs and converges to the minimum. The callback is invoked for each functional evaluation by the optimizer and provides the current optimizer value, evaluation count, current optimizer parameters etc. Note that, depending on the specific optimizer this may not be each iteration (step) of the optimizer, so for example if the optimizer is calling the cost function to compute a finite difference based gradient this will be visible via the callback."
msgstr "コールバック・メソッドを使用すると、アルゴリズムの実行と最小値への収束に伴い、最適化の進捗状況を監視することができます。コールバックは、オプティマイザーによる機能評価ごとに呼び出され、現在のオプティマイザー値、評価回数、現在のオプティマイザー・パラメータなどを提供します。特定のオプティマイザーによっては、オプティマイザーの各反復（ステップ）とは限らないので、例えば、オプティマイザーが有限差分ベースの勾配を計算するためにコスト関数を呼び出している場合、コールバックを通じてこれが見えるようになることに注意してください。"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:38
msgid "This section demonstrates how to leverage callbacks in ``VQE`` to plot the convergence path to the ground state energy with a selected set of optimizers."
msgstr "このセクションでは、``VQE`` のコールバックを利用して、選択したオプティマイザーのセットで基底状態のエネルギーへの収束パスをプロットする方法を示します。"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:49
msgid "First, you need a qubit operator for VQE. For this example, you can use the same operator as used in the algorithms introduction, which was originally computed by Qiskit Nature for an H2 molecule."
msgstr "まず、VQE用の量子ビット演算子が必要です。この例では、アルゴリズム紹介で使用したものと同じ演算子を使用することができます。これは、もともとQiskit NatureによってH2分子に対して計算されたものです。"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:80
msgid "The next step is to instantiate the ``Estimator`` of choice for the evaluation of expectation values within ``VQE``. For simplicity, you can select the ``qiskit.primitives.Estimator`` shipped with the default Qiskit Terra installation."
msgstr "次のステップでは、``VQE`` 内で期待値を評価するための ``Estimator`` をインスタンス化します。簡単のために、Qiskit Terraのデフォルトインストールに同梱されている ``qiskit.primitives.Estimator`` を選択することができます。"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:103
msgid "You are now ready to compare a set of optimizers through the ``VQE`` callback. The minimum energy of the H2 Hamiltonian can be found quite easily, so the maximum number of iterations (``maxiter``) does not have to be very large. You can once again use ``TwoLocal`` as the selected trial wavefunction (i.e. ansatz)."
msgstr "これで ``VQE`` コールバックを使用してオプティマイザーを比較する準備が整いました。H2ハミルトニアンの最小エネルギーは非常に簡単に求めることができるので、最大反復回数(``maxiter``)はあまり大きくする必要はありません。選択した試行波動関数（つまりansatz）として、再び ``TwoLocal`` を使用することができます。"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:176
msgid "Now, from the callback data you stored, you can plot the energy value at each objective function call each optimizer makes. An optimizer using a finite difference method for computing gradient has that characteristic step-like plot where for a number of evaluations it is computing the value for close by points to establish a gradient (the close by points having very similar values whose difference cannot be seen on the scale of the graph here)."
msgstr "保存されたコールバック・データから、各オプティマイザーが行う目的関数の呼び出しごとのエネルギー値をプロットすることができます。勾配の計算に有限差分法を用いたオプティマイザーでは、勾配を得るために多くの評価では近くにある点の値を計算していて、プロットのように特徴的なステップを示します。 (近くにある点は非常に似た値をもち、その差を今回のグラフのスケールで見ることはできません。)"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:213
msgid "Finally, since the above problem is still easily tractable classically, you can use ``NumPyMinimumEigensolver`` to compute a reference value for the solution."
msgstr "最後に、上記の問題はまだ古典的に簡単に扱えるので、 ``NumPyMinimumEigensolver`` を使って解の参照値を計算することができます。"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:264
msgid "You can now plot the difference between the ``VQE`` solution and this exact reference value as the algorithm converges towards the minimum energy."
msgstr "アルゴリズムが最小エネルギーに収束していく過程で、``VQE`` の解とこの正確な参照値との差をプロットすることができるようになりました。"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:305
msgid "Gradients"
msgstr "勾配"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:307
msgid "In Qiskit’s variational algorithms, if the provided optimizer uses a gradient-based technique, the default gradient method will be finite differences. However, these classes include an option to pass custom gradients via the ``gradient`` parameter, which can be any of the provided methods within Qiskit’s `gradient <https://qiskit.org/documentation/stubs/qiskit.algorithms.gradients.html>`__ framework, which fully supports the use of primitives. This section shows how to use custom gradients in the VQE workflow."
msgstr "Qiskit の変分アルゴリズムにおいて、提供されるオプティマイザーが勾配ベースの手法を使用する場合、デフォルトの勾配メソッドは有限差分法となります。しかし、これらのクラスには ``gradient`` パラメーターを介してカスタム勾配を渡すオプションがあり、primitiveの使用を完全にサポートする Qiskit の `gradient <https://qiskit.org/documentation/stubs/qiskit.algorithms.gradients.html>`__ フレームワーク内で提供されるメソッドのいずれかを使用することが可能です。このセクションでは、VQEワークフローでカスタムgradients を使用する方法について説明します。"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:310
msgid "The first step is to initialize both the corresponding primitive and primitive gradient:"
msgstr "まず、対応するprimitive とprimitive gradient の両方を初期化します。"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:334
msgid "Now, you can inspect an SLSQP run using the ``FiniteDiffEstimatorGradient`` from above:"
msgstr "さて、上記の ``FiniteDiffEstimatorGradient`` を用いて SLSQP の実行を検査することができます。"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:422
msgid "Initial point"
msgstr "初期点(Initial point)"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:424
msgid "By default, the optimization begins at a random point within the bounds defined by the ansatz. The ``initial_point`` option allows to override this point with a custom list of values that match the number of ansatz parameters."
msgstr "デフォルトでは、最適化はansatzで定義された境界内のランダムな点から開始されます。 ``initial_point`` オプションを使用すると、この点を、ansatz のパラメーター数に応じたカスタムリストで上書きすることができます。"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:426
msgid "You might wonder… *Why set a custom initial point?* Well, this option can come in handy if you have a guess for a reasonable starting point for the problem, or perhaps know information from a prior experiment."
msgstr "*なぜカスタム初期点を設定するの?* と思うかもしれません。このオプションは、問題の妥当な開始点についての推測がある場合、あるいは以前の実験からの情報を知っている場合に便利です。"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:428
msgid "To demonstrate this feature, let’s look at the results from our previous VQE run:"
msgstr "この機能を実証するために、前回のVQEの実行結果を見てみましょう。"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:525
msgid "Now, you can take the ``optimal_point`` from the above result and use it as the ``initial_point`` for a follow-up computation."
msgstr "上記の結果から ``optimal_point`` を取り出し、それを ``initial_point`` として後続の計算に使用することができます。"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:527
msgid "**Note:** ``initial_point`` is now a keyword-only argument of the ``VQE`` class (i.e, it must be set following the ``keyword=value`` syntax)."
msgstr "**注記:** ``initial_point`` は ``VQE`` クラスのキーワードのみの引数になりました (つまり、 ``keyword=value`` 構文に従って設定する必要があります)。"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:676
msgid "By looking at the ``cost_function_evals`` you can notice how the initial point helped the algorithm converge faster (in just 1 iteration, as we already provided the optimal solution)."
msgstr "``cost_function_evals`` を見ると、初期点がいかにアルゴリズムの収束を早めたかがわかります（すでに最適解を提供しているため、わずか1回の反復です）。"

#: ../../tutorials/algorithms/02_vqe_advanced_options.ipynb:678
msgid "This can be particularly useful in cases where we have two closely related problems, and the solution to one problem can be used to guess the other’s. A good example might be plotting dissociation profiles in chemistry, where we change the inter-atomic distances of a molecule and compute its minimum eigenvalue for each distance. When the distance changes are small, we expect the solution to still be close to the prior one. Thus, a popular technique is to simply use the optimal point from one solution as the starting point for the next step. There also exist more complex techniques, where we can apply extrapolation to compute an initial position based on prior solution(s) rather than directly use the prior solution."
msgstr "これは、特に、密接に関連した2つの問題があり、一方の問題の解から他方の問題を推測できるような場合に有効です。例えば、化学の解離プロファイルのプロットでは、分子の原子間距離を変化させ、それぞれの距離に対する最小固有値を計算することがよくあります。距離の変化が小さい場合、解はやはり以前の解に近いと考えられます。そのため、ある解の最適点を次のステップの出発点として利用するという手法が一般的です。また、より複雑な手法として、先行解を直接利用するのではなく、外挿を適用して先行解に基づく初期位置を計算する方法もあります。"

