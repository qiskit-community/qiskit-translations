msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:25+0000\n"
"PO-Revision-Date: 2023-03-16 11:55\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/04_vqd.po\n"
"X-Crowdin-File-ID: 9933\n"

#: ../../tutorials/algorithms/04_vqd.ipynb:10
msgid "This page was generated from `tutorials/algorithms/04_vqd.ipynb`__."
msgstr "このページは `tutorials/algorithms/04_vqd.ipynb`__ から生成されました。"

#: ../../tutorials/algorithms/04_vqd.ipynb:9
msgid "Variational Quantum Deflation (VQD) Algorithm"
msgstr "変分量子収縮(Variational Quantum Deflation, VQD) アルゴリズム"

#: ../../tutorials/algorithms/04_vqd.ipynb:11
msgid "This notebook demostrates how to use Qiskit's implementation of the `Variational Quantum Deflation (VQD) <https://qiskit.org/documentation/stubs/qiskit.algorithms.eigensolvers.VQD.html>`__ algorithm for computing higher energy states of a Hamiltonian, as introduced in this `reference paper <https://arxiv.org/abs/1805.08138>`__."
msgstr ""

#: ../../tutorials/algorithms/04_vqd.ipynb:23
msgid "Introduction"
msgstr "はじめに"

#: ../../tutorials/algorithms/04_vqd.ipynb:25
msgid "VQD is a quantum algorithm that uses a variational technique to find the *k* eigenvalues of the Hamiltonian *H* of a given system."
msgstr "VQDは変分法を用いて、与えられた系のハミルトニアン *H* の *k* 個の固有値を求める量子アルゴリズムです。"

#: ../../tutorials/algorithms/04_vqd.ipynb:27
msgid "The algorithm computes excited state energies of generalized hamiltonians by optimizing over a modified cost function. Each successive eigenvalue is calculated iteratively by introducing an overlap term with all the previously computed eigenstates that must be minimized. This ensures that higher energy eigenstates are found."
msgstr "このアルゴリズムは、一般化されたハミルトニアンの励起状態エネルギーを、修正されたコスト関数上で最適化することによって計算します。各連続固有値は、最小化されなければならない以前に計算されたすべての固有値との重複項を導入することによって、繰り返し計算されます。これにより、より高いエネルギーの固有値が発見されるようになります。"

#: ../../tutorials/algorithms/04_vqd.ipynb:39
msgid "Complete working example for VQD"
msgstr "VQDの完全な動作例"

#: ../../tutorials/algorithms/04_vqd.ipynb:50
msgid "The first step of the VQD workflow is to create a qubit operator, ansatz and optimizer. For this example, you can use the H2 molecule, which should already look familiar if you have completed the previous VQE tutorials:"
msgstr "VQDワークフローの最初のステップは、量子ビット演算子、Ansatz、オプティマイザーを作成することです。この例では、H2分子を使用します。以前のVQEチュートリアルを終了していれば、すでに見慣れた分子であるはずです。"

#: ../../tutorials/algorithms/04_vqd.ipynb:81
msgid "You can set up, for example, a ``TwoLocal`` ansatz with three qubits, and choose ``SLSQP`` as the optimization method."
msgstr "例えば、3つの量子ビットを持つ ``TwoLocal`` ansatzを設定し、最適化手法として ``SLSQP`` を選択することが可能です。"

#: ../../tutorials/algorithms/04_vqd.ipynb:117
msgid "The next step of the workflow is to define the required primitives for running ``VQD``. This algorithm requires two different primitive instances: one ``Estimator`` for computing the expectation values for the \"VQE part\" of the algorithm, and one ``Sampler``. The sampler will be passed along to the ``StateFidelity`` subroutine that will be used to compute the cost for higher energy states. There are several methods that you can use to compute state fidelities, but to keep things simple, you can use the ``ComputeUncompute`` method already available in ``qiskit.algorithm.state_fidelities``."
msgstr ""

#: ../../tutorials/algorithms/04_vqd.ipynb:144
msgid "In order to set up the VQD algorithm, it is important to define two additional inputs: the number of energy states to compute (``k``) and the ``betas`` defined in the original VQD paper. In this example, the number of states (``k``) will be set to three, which indicates that two excited states will be computed in addition to the ground state."
msgstr "VQDアルゴリズムをセットアップするためには、計算するエネルギー状態の数（``k``）と、オリジナルのVQD論文で定義された``betas``という2つの追加入力を定義することが重要です。この例では、状態数(``k``) は3つに設定され、基底状態に加えて2つの励起状態が計算されることを示しています。"

#: ../../tutorials/algorithms/04_vqd.ipynb:146
msgid "The ``betas`` balance the contribution of each overlap term to the cost function, and they are an optional argument in the ``VQD`` construction. If not set by the user, they can be autoevaluated for input operators of type ``SparsePauliOp``. Please note that if you want to set your own ``betas``, you should provide a list of values of length ``k``."
msgstr "``betas`` は，各オーバーラップ項のコスト関数への寄与度のバランスをとるもので， ``VQD`` の構築においてオプションの引数として利用することができます。ユーザが設定しない場合は、 ``SparsePauliOp`` 型の入力演算子に対して自動評価されます。もし、独自の ``betas`` を設定したい場合は、長さ ``k`` の値のリストを指定してください。"

#: ../../tutorials/algorithms/04_vqd.ipynb:168
msgid "You are almost ready to run the VQD algorithm, but let's define a callback first to store intermediate values:"
msgstr ""

#: ../../tutorials/algorithms/04_vqd.ipynb:196
msgid "You can finally instantiate ``VQD`` and compute the eigenvalues for the chosen operator."
msgstr "最後に ``VQD`` のインスタンスを作成し、選択した演算子に対する固有値を計算します。"

#: ../../tutorials/algorithms/04_vqd.ipynb:221
msgid "You can see the three state energies as part of the ``VQD`` result:"
msgstr "``VQD`` の結果の一部として、3つの状態のエネルギーを見ることができます。"

#: ../../tutorials/algorithms/04_vqd.ipynb:266
msgid "And we can use the values stored by the callback to plot the energy convergence for each state:"
msgstr "そして、コールバックで格納された値を用いて、各状態のエネルギー収束をプロットすることができます。"

#: ../../tutorials/algorithms/04_vqd.ipynb:312
msgid "This molecule can be solved exactly using the ``NumPyEigensolver`` class, which will give a reference value that you can compare with the ``VQD`` result:"
msgstr "この分子は ``NumPyEigensolver`` クラスを使って正確に解くことができ、 ``VQD`` の結果と比較できる参照値を得ることができます。"

#: ../../tutorials/algorithms/04_vqd.ipynb:338
msgid "Let's see a comparison of the exact result with the previously computed ``VQD`` eigenvalues:"
msgstr ""

#: ../../tutorials/algorithms/04_vqd.ipynb:387
msgid "As you can see, the result from VQD matches the values from the exact solution, and extends VQE to also compute excited states."
msgstr "ご覧のように、VQDの結果は厳密解からの値と一致し、VQEを拡張して励起状態も計算できるようになりました。"

