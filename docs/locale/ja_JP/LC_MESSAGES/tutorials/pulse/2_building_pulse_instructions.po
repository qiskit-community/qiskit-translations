msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-02 15:42+0000\n"
"PO-Revision-Date: 2020-10-02 16:18\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/pulse/2_building_pulse_instructions.po\n"
"X-Crowdin-File-ID: 9364\n"
"Language: ja_JP\n"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:10
msgid "This page was generated from `tutorials/pulse/2_building_pulse_instructions.ipynb`__."
msgstr "当ページは `tutorials/pulse/2_building_pulse_instructions.ipynb`__ から生成されました。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:9
msgid "Building Pulse Instructions"
msgstr "パルス命令の構築"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:11
msgid "Pulse programs, which are called ``Schedule``\\ s, describe instruction sequences for the control electronics."
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:13
msgid "On this page, we will cover in depth these ``Instruction``\\ s available through Qiskit Pulse:"
msgstr "このページでは、Qiskit Pulseで利用可能なこれらの ``Instruction`` （命令）の詳細について説明します:"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:15
msgid "```Delay(duration: int, channel)`` <#delay>`__"
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:16
msgid "```Play(pulse, channel)`` <#play>`__"
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:17
msgid "```SetFrequency(frequency, channel)`` <#frequency>`__"
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:18
msgid "```ShiftPhase(phase, channel)`` <#phase>`__"
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:19
msgid "```Acquire(duration, channel, mem_slot, reg_slot)`` <#acquire>`__"
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:21
msgid "Each instruction type has its own set of operands. As you can see above, they each include at least one ``Channel`` to specify where the instruction will be applied."
msgstr "各命令タイプは、独自のオペランドセットを持ちます。上記のように、それぞれに少なくとも1つの ``Channel`` が含まれており、命令の適用先を特定しています。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:23
msgid "**Channels** are labels for signal lines from the control hardware to the quantum chip."
msgstr "**Channels** は、制御ハードウェアから量子チップへの信号線のラベルです。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:25
msgid "``DriveChannel``\\ s are typically used for *driving* single qubit rotations,"
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:26
msgid "``ControlChannel``\\ s are typically used for multi-qubit gates or additional drive lines for tunable qubits,"
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:27
msgid "``MeasureChannel``\\ s are specific to transmitting pulses which stimulate readout, and"
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:28
msgid "``AcquireChannel``\\ s are used to trigger digitizers which collect readout signals."
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:30
msgid "``DriveChannel``\\ s, ``ControlChannel``\\ s, and ``MeasureChannel``\\ s are all ``PulseChannel``\\ s; this means that they support *transmitting* pulses, whereas the ``AcquireChannel`` is a receive channel only and cannot play waveforms."
msgstr "``DriveChannel`` 、 ``ControlChannel`` 、 ``MeasureChannel`` は、すべて ``PulseChannel`` です。これは、これらが *送信* パルスをサポートしていることを意味します。一方、 ``AcquireChannel`` は受信チャンネルのみであり、波形を出すことはできません。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:32
msgid "For the following examples, we will create one ``DriveChannel`` instance for each ``Instruction`` that accepts a ``PulseChannel``. Channels take one integer ``index`` argument. Except for ``ControlChannel``\\ s, the index maps trivially to the qubit label."
msgstr "以下の例では、``PulseChannel`` を受け取る ``Instruction`` ごとに、ひとつの ``DriveChannel`` インスタンスを生成しています。チャンネルは、ひとつの数値 ``index`` 引数を取ります。 `` ControlChannel`` を除き、インデックスは、量子ビットラベルへ簡単にマッピングされます。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:55
msgid "## ``Delay``"
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:57
msgid "One of the simplest instructions we can build is ``Delay``. This is a blocking instruction that tells the control electronics to output no signal on the given channel for the duration specified. It is useful for controlling the timing of other instructions."
msgstr "最も簡単な命令のひとつは ``Delay`` です。これはブロッキング命令で、指定された継続時間中、指定されたチャンネルに信号を出力しないように、制御電子装置に対して指示を出します。他の命令のタイミングを制御するのに便利です。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:59
msgid "The duration here and elsewhere is in terms of the backend's cycle time (1 / sample rate), ``dt``."
msgstr "ここやその他の場所における期間は、バックエンドのサイクル時間（1 / サンプルレート）を表す `` dt`` という用語を使います。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:61
msgid "To build a ``Delay`` instruction, we pass the duration and channel:"
msgstr "``Delay`` 命令を構築するには、継続時間とチャンネルを渡します。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:84
msgid "where ``channel`` can be any kind of channel, including ``AcquireChannel``."
msgstr "ここでの ``channel`` は、 ``AcquireChannel`` を含む、あらゆる種類のチャンネルになります。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:86
msgid "That's all there is to it. This instruction, ``delay_5dt``, is ready to be included in a ``Schedule``. Any instruction appended after ``delay_5dt`` on the same channel will execute five timesteps later than it would have without this delay."
msgstr "これですべてです。この命令 `` delay_5dt`` は、 `` Schedule`` に含める準備ができています。同じチャンネルで ``delay_5dt`` の後に追加された命令は、この遅延がない場合よりも5タイムステップ遅れて実行されます。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:88
msgid "## ``Play``"
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:90
msgid "The ``Play`` instruction is responsible for executing *pulses*. It's straightforward to build one:"
msgstr "``Play`` 命令はパルスの実行を担当します。構築は簡単です。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:96
msgid "Let's clarify what the ``pulse`` argument is and explore a few different ways to build one."
msgstr "``pulse`` の引数が何であるかを明確にして、それを構築するいくつかの異なる方法を探りましょう。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:99
msgid "Pulses"
msgstr "パルス"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:101
msgid "A ``Pulse`` specifies an arbitrary pulse *envelope*. The modulation frequency and phase of the output waveform are controlled by the ``SetFrequency`` and ``ShiftPhase`` instructions, which we will cover next."
msgstr "``Pulse`` は、任意のパルス *エンベロープ* を指定します。出力波形の変調周波数と位相は、次に説明する ``SetFrequency`` と ``ShiftPhase`` 命令によって制御されます。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:103
msgid "The image below may provide some intuition for why they are specified separately. Think of the pulses which describe their envelopes as input to an arbitrary waveform generator (AWG), a common lab instrument -- this is depicted in the left image. Notice the limited sample rate discritizes the signal. The signal produced by the AWG may be mixed with a continuous sine wave generator. The frequency of its output is controlled by instructions to the sine wave generator; see the middle image. Finally, the signal sent to the qubit is demonstrated by the right side of the image below."
msgstr "以下の画像は、なぜそれらが個別に指定されているかを直感的に示しています。一般的な研究機器である任意波形発生器（arbitrary waveform generator、AWG）への入力として、エンベロープを表すパルスを考えてください。これは左の画像に示されています。制限されたサンプルレートが信号を区別していることに注意してください。AWGによって生成された信号は、連続正弦波ジェネレータと混合されます。その出力の周波数は、正弦波発生器への指示によって制御されます。中央の画像を参照してください。最後に、量子ビットに送信された信号は、下の画像の右側に示されています。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:106
msgid "**Note**: The hardware may be implemented in other ways, but if we keep the instructions separate, we avoid losing explicit information, such as the value of the modulation frequency."
msgstr "**注記** ：ハードウェアは他の方法で実装することもできますが、命令を別々にしておけば、変調周波数の値などの明示的な情報が失われるのを回避できます。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:108
msgid "|alt text|"
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:110
msgid "There are many methods available to us for building up pulses. Our ``library`` within Qiskit Pulse contains helpful methods for building ``Pulse``\\ s. Let's take for example a simple Gaussian pulse -- a pulse with its envelope described by a sampled Gaussian function. We arbitrarily choose an amplitude of 1, standard deviation :math:`\\sigma` of 10, and 128 sample points."
msgstr "パルスを構築するために利用できる方法は多くあります。Qiskit Pulse 内の ``library`` には、 ``Pulse`` を構築するための便利なメソッドが含まれています。たとえば、単純なガウスパルス、つまりサンプリングされたガウス関数によって記述されたエンベロープを持つパルスを考えてみましょう。振幅1、標準偏差10 :math:`\\sigma` 、および128サンプルポイントを任意に選択します。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:112
msgid "**Note**: The maximum amplitude allowed is ``1.0``. Most systems also have additional constraints on the minimum and maximum number of samples allowed in a pulse. These additional constraints, if available, would be provided through the ``BackendConfiguration`` which is described `here <5_gathering_system_information.ipynb#Configuration>`__."
msgstr "注記：許容される最大振幅は ``1.0`` です。ほとんどのシステムでは、パルスで許可されるサンプルの最小数と最大数にも追加の制約があります。これらの追加の制約は、利用可能な場合、 `ここ <5_gathering_system_information.ipynb#Configuration>`__ で説明する ``BackendConfiguration`` を通じて提供されます。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:140
msgid "Parametric pulses"
msgstr "パラメトリックパルス"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:142
msgid "Let's build our Gaussian pulse using the ``Gaussian`` parametric pulse. A parametric pulse sends the name of the function and its parameters to the backend, rather than every individual sample. Using parametric pulses makes the jobs you send to the backend much smaller. IBM Quantum backends limit the maximum job size that they accept, so parametric pulses may allow you to run larger programs."
msgstr " ``Gaussian`` パラメトリックパルスを使用してガウスパルスを作成してみましょう。パラメトリックパルスは、個々のサンプルごとではなく、関数の名前とそのパラメーターをバックエンドに送信します。 パラメトリックパルスを使用すると、バックエンドに送信するジョブがはるかに小さくなります。 IBM Quantum バックエンドは、それらが受け入れる最大ジョブサイズを制限するため、パラメトリックパルスを使うことで、より大きなプログラムを実行できる場合があります。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:144
msgid "Other parametric pulses in the ``library`` include ``GaussianSquare``, ``Drag``, and ``ConstantPulse``."
msgstr "``library`` の他のパラメトリックパルスには、``GaussianSquare`` 、 ``Drag`` 、および ``ConstantPulse`` が含まれます。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:146
msgid "**Note**: The backend is responsible for deciding exactly how to sample the parametric pulses. It is possible to draw parametric pulses, but the samples displayed are not guaranteed to be the same as those executed on the backend."
msgstr "**注記** ：バックエンドには、パラメトリックパルスをサンプリングする方法を正確に決定する責任があります。パラメトリックパルスを描画することは可能ですが、表示されるサンプルがバックエンドで実行されたものと同じであるとは限りません。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:179
msgid "**Pulse waveforms described by samples**"
msgstr "**サンプルによって記述されたパルス波 **"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:181
msgid "It is also possible to specify the waveform as an array of samples. We pass the samples to a ``Waveform``."
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:217
msgid "**Pulse library functions**"
msgstr "**パルス ライブラリー関数**"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:219
msgid "Our own pulse library has sampling methods to build a ``Waveform`` from common functions."
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:251
msgid "External libraries"
msgstr "外部ライブラリー"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:253
msgid "Alternatively, you can make use of an external library."
msgstr "あるいは、外部ライブラリーを使用することもできます。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:287
msgid "Regardless of which method you use to specify your ``pulse``, ``Play`` is instantiated the same way:"
msgstr "``pulse`` の指定に使用する方法に関係なく、``Play`` は同じ方法でインスタンス化されます。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:311
msgid "The ``Play`` instruction gets its duration from its ``Pulse``: the duration of a parametrized pulse is an explicit argument, and the duration of a ``Waveform`` is the number of input samples."
msgstr "``Play`` 命令は、``Pulse`` から持続時間を取得します。パラメータ化されたパルスの持続時間は明示的な引数であり、波形の持続時間は入力サンプルの数です。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:313
msgid "## ``SetFrequency``"
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:315
msgid "As explained previously, the output pulse waveform envelope is also modulated by a frequency and phase. Each channel has a `default frequency listed in the ``backend.defaults()`` <5_gathering_system_information.ipynb#Defaults>`__."
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:317
msgid "The frequency of a channel can be updated at any time within a ``Schedule`` by the ``SetFrequency`` instruction. It takes a float ``frequency`` and a ``PulseChannel`` ``channel`` as input. All pulses on a channel following a ``SetFrequency`` instruction will be modulated by the given frequency until another ``SetFrequency`` instruction is encountered or until the program ends."
msgstr "チャンネルの周波数は、 ``SetFrequency`` 命令により ``Schedule`` 内でいつでも更新できます。浮動小数点の ``frequency`` と ``PulseChannel`` ``channel`` を入力として受け取ります。 ``SetFrequency`` 命令に続くチャンネル上のすべてのパルスは、別の ``SetFrequency`` 命令が検出されるまで、またはプログラムが終了するまで、指定された周波数で変調されます。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:319
msgid "The instruction has an implicit duration of ``0``."
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:321
msgid "**Note**: The frequencies that can be requested are limited by the total bandwidth and the instantaneous bandwidth of each hardware channel. In the future, these will be reported by the ``backend``."
msgstr "**注記** ：要求できる周波数は、各ハードウェアチャンネルの合計帯域幅と瞬時帯域幅によって制限されます。将来的には、これらは ``backend`` によって報告されます。"

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:344
msgid "## ``ShiftPhase``"
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:346
msgid "The ``ShiftPhase`` instruction will increase the phase of the frequency modulation by ``phase``. Like ``SetFrequency``, this phase shift will affect all following instructions on the same channel until the program ends. To undo the affect of a ``ShiftPhase``, the negative ``phase`` can be passed to a new instruction."
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:348
msgid "Like ``SetFrequency``, the instruction has an implicit duration of ``0``."
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:372
msgid "``Acquire``"
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:374
msgid "The ``Acquire`` instruction triggers data acquisition for readout. It takes a duration, an ``AcquireChannel`` which maps to the qubit being measured, and a ``MemorySlot`` or a ``RegisterSlot``. The ``MemorySlot`` is classical memory where the readout result will be stored. The ``RegisterSlot`` maps to a register in the control electronics which stores the readout result for fast feedback."
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:376
msgid "``Acquire`` instructions can also take custom ``Discriminator``\\ s and ``Kernel``\\ s as keyword arguments. Read more about building measurements `here <4_adding_measurements.ipynb>`__."
msgstr ""

#: ../../tutorials/pulse/2_building_pulse_instructions.ipynb:399
msgid "Now that we know how to build instructions, let's learn how to compose them into ``Schedule``\\ s on the `next page <3_building_pulse_schedules.ipynb>`__!"
msgstr ""

