msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-02 15:42+0000\n"
"PO-Revision-Date: 2020-10-26 04:46\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/pulse/1_getting_started_with_pulse.po\n"
"X-Crowdin-File-ID: 9362\n"
"Language: ja_JP\n"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:10
msgid "This page was generated from `tutorials/pulse/1_getting_started_with_pulse.ipynb`__."
msgstr "当ページは `tutorials/pulse/1_getting_started_with_pulse.ipynb`__ から生成されました。"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:9
msgid "Getting Started with OpenPulse"
msgstr "OpenPulse入門"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:11
msgid "Qiskit Pulse programs give you more control than ``QuantumCircuit``. At this level, you can specify the exact time dynamics of the input signals across all input channels. Most quantum algorithm can be described with circuits alone using gate operations -- typically, it's when you want to apply error mitigation techniques or characterize a time-dependent quality of a quantum system that pulse-level control becomes useful."
msgstr "Qiskit Pulse プログラムは ``QuantumCircuit`` よりも多くのコントロールを提供します。このレベルでは、すべての入力チャンネルで入力信号の正確な時間ダイナミクスを指定できます。ほとんどの量子アルゴリズムは、ゲート操作を使った回路だけで記述することができます。－通常、パルスレベル制御が役立つのは、誤り軽減技術を適用するとき、または量子系の時間依存品質を特徴付けるときです。"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:13
msgid "On this page, we will discover how to build and execute a very basic Pulse program, which is called a schedule."
msgstr "このページでは、スケジュールと呼ばれる、とても基本的な Pulse プログラムを構築して実行する方法を説明します。"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:16
msgid "Initialize"
msgstr "初期化"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:18
msgid "We import the ``Schedule`` class from the ``qiskit.pulse`` module. To start, we are going to initialize a ``Schedule`` with the name ``\"getting_started\"``."
msgstr "``qiskit.pulse`` モジュールから、 ``Schedule`` クラスをインポートします。そして、 ``\"getting_started\"`` という名前で ``Schedule`` を初期化します。"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:41
msgid "Easy! We have an empty schedule now."
msgstr "簡単でしょ！これで空のスケジュールが得られました。"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:44
msgid "Build instructions"
msgstr "ビルド手順"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:46
msgid "The next thing we will want to do is create some instructions to add to our schedule."
msgstr "次にやりたいことは、スケジュールに追加するための命令を作ることです。"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:48
msgid "Perhaps the most central instruction for building schedules is the ``Waveform``. It is a pulse signal specified as an array of time-ordered complex amplitudes, or *samples*. Each sample is played for one cycle, a timestep ``dt``, determined by the backend. If we want to know the real-time dynamics of our program, we need to know the value of ``dt``. For now, let's focus on how to build the instruction."
msgstr "おそらく、スケジュールを作成するための最も中心的な命令は ``Waveform`` です。これは、時間順に並べられた複素振幅または *サンプル* の配列として指定されたパルス信号です。各サンプルは、バックエンドによって決定される1サイクル、タイムステップ ``dt`` で再生されます。プログラムのリアルタイムダイナミクスを知りたい場合は、 ``dt`` の値を知る必要があります。とりあえず、命令の作成方法に焦点を当てましょう。"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:81
msgid "There are multiple ways to build pulses, which you can learn about on later pages. This time, we've simply passed the exact amplitudes of the pulse envelope we want to play as an array. The array above is a Gaussian function evaluated at 64 points, with an amplitude of 1 and a standard deviation of 8. The (zero-indexed) :math:`i^{th}` sample will play from time ``i*dt`` up to ``(i + 1)*dt``, modulated by the qubit frequency. Think of this like an arbitrary waveform generator (AWG), playing the samples you give to the ``Waveform``, mixed with a continuous sine wave generator outputting a tone at the qubit frequency."
msgstr "パルスを構築する方法は複数あり、後のページで学習することができます。今回は単に、実行したいパルスエンベロープの正確な振幅を、配列として渡しました。上記の配列は、64ポイントで評価されたガウス関数で、振幅は1、標準偏差は8です。（ゼロからインデックス付けされた） :math:`i` 番目のサンプルは、時間 ``i*dt`` から ``(i + 1)*dt`` まで実行され、量子ビット周波数により変調されます。これを任意波形発生器（arbitrary waveform generator、AWG）と考えて、 ``Waveform`` に与えたサンプルを実行し、量子ビット周波数でトーンを出力する連続正弦波発生器と混合します。"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:84
msgid "The values above happen to be real, but they can also be complex. The amplitude norm of any pulse signal is arbitrarily limited to 1. Each backend system may also impose further constraints -- for instance, a minimum pulse size of 64. Learn more about getting information from the backend `here <5_gathering_system_information.ipynb>`__."
msgstr "上記は実数ですが、複素数になる場合もあります。パルス信号の振幅ノルムは任意の1に制限されます。各バックエンドシステムは、さらに制約を課す場合があります。たとえば、最小パルスサイズは64です。バックエンドから情報を取得する方法の詳細については、 `こちら <5_gathering_system_information.ipynb>`__ をご覧ください 。"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:87
msgid "Schedule instructions"
msgstr "スケジュール命令"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:89
msgid "Next, we have to add an instruction to execute the pulse signal we just built. This means specifying not only the *time* that the pulse should be played, but also *where* it should be played. When we build circuits, we specify which qubit a gate operation should be applied to. In Pulse, every qubit has multiple *channels*."
msgstr "次に、先ほど作ったパルス信号を実行する命令を追加しなければなりません。これは、パルスが再生される *時間* だけでなく、 *どこで* 再生されるべきかということを意味します。 回路を構築するときには、ゲート操作を適用する必要のある量子ビットを指定します。パルスでは、すべての量子ビットに複数の *チャンネル* があります。"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:91
msgid "We will *play* our pulse on the *drive* channel of qubit 0. The drive channel lets us enact single qubit operations."
msgstr "量子ビット0の *ドライブ* チャンネル上でパルスを *再生* します。ドライブチャンネルでは単一量子ビット演算が実行できます。"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:116
msgid "Note that the pulse we defined operates on the ``DriveChannel``, which in turn is initialized with the qubit index. We use ``Schedule.insert`` to play the pulse at timestep ``t = 0``."
msgstr "私たちが定義したパルスは ``DriveChannel`` で動作し、順番に量子ビットインデックスで初期化されることに注意してください。 ``Schedule.insert`` を使用して、タイムステップ ``t = 0`` でパルスを再生します。"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:118
msgid "Let's review what we've done, using ``Schedule.draw``:"
msgstr "``Schedule.draw`` を使用して、実行した内容を確認します。"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:148
msgid "The ways in which schedules can be composed is covered in detail on `this page <3_building_pulse_schedules.ipynb>`__."
msgstr "スケジュールを作成する方法については、 `このページ <3_building_pulse_schedules.ipynb>`__ で詳しく説明します。"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:150
msgid "This pulse will drive qubit 0. It is modulated at qubit 0's resonant frequency, so it will drive the :math:`|0\\rangle` to :math:`|1\\rangle` transition. It is not calibrated to stop at a particular state, so we won't know what state we've prepared until we look at the results. For our purposes, we don't mind what state we end up in."
msgstr "このパルスは量子ビット0を駆動します。量子ビット0の共振周波数で変調されるため、 :math:`|0\\rangle` から :math:`|1\\rangle` への遷移を駆動します。特定の状態で停止するようにキャリブレーションされていないため、結果を見るまでどの状態を準備したかは分かりません。 私たちの目的においては、最終的にどのような状態になるかは問題ではありません。"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:152
msgid "All that's left to do is to add a measurement. There is a convenient utility function for adding measurements, but it requires data from the backend system that the program will be running on. We will also need the backend to execute the program."
msgstr "あとは、測定値を追加するだけです。測定値を追加するための便利なユーティリティ関数がありますが、プログラムを実行するバックエンドシステムからのデータが必要です。プログラムを実行するには、バックエンドも必要です。"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:155
msgid "Grab a backend"
msgstr "バックエンドを取得する"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:179
msgid "Add measurements"
msgstr "測定の追加"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:181
msgid "Now we can use this backend to add the measurement instructions for us."
msgstr "これで、このバックエンドを使用して測定命令を追加できます。"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:204
msgid "Let's see what the convenience function has added for us, using draw again. The acquisition and measurement pulses are very long compared to our initial pulse, so we can use the ``plot_range`` argument to clip the schedule."
msgstr "もう一度 draw を使用して、便利な関数が追加したものを見てみましょう。取得パルスと測定パルスは最初のパルスと比べて非常に長いため、 ``plot_range`` 引数を使用してスケジュールをクリップできます。"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:236
msgid "There is a new pulse on ``MeasureChannel`` ``m0``, a shorthand name for ``MeasureChannel(0)``. This channel stimulates readout on qubit 0. Likewise, ``a0`` is shorthand for ``AcquireChannel(0)``. The ``Acquire`` instruction on ``a0`` tells the measurement devices when to begin collecting data on their analog-to-digital converters (ADC), and for how long. It is drawn as an amplitude 1 constant pulse."
msgstr " ``MeasureChannel(0)`` の略称である ``MeasureChannel`` ``m0`` に新しいパルスがあります。このチャンネルは、量子ビット0での読み出しを促します。同様に、 ``a0`` は ``AcquireChannel(0)`` の省略形です。 ``a0`` の ``Acquire`` 命令は、測定デバイスに、A / Dコンバーター（ADC）で、データの収集を開始するタイミングと期間を通知します。振幅1の一定パルスとして描画されます。"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:239
msgid "Execute"
msgstr "実行"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:241
msgid "Our schedule is done! We can't use our mocked backend to execute programs, but if you have an IBM Quantum account, you could use ``backend = IBMQ.load_account().get_backend(open_pulse=True)`` to see if you have an OpenPulse enabled backend. Once you have such a backend, we can execute it the same way we execute circuits:"
msgstr "スケジュールが完了しました。モックのバックエンドを使用してプログラムを実行することはできませんが、IBM Quantumアカウントを持っている場合は、 ``backend = IBMQ.load_account().get_backend(open_pulse=True)`` を使用して、OpenPulse が有効になっているかどうかを確認できます。このようなバックエンドがあれば、回路を実行するのと同じように実行できます。"

#: ../../tutorials/pulse/1_getting_started_with_pulse.ipynb:247
msgid "That's it! To get the results, use ``result = job.result()``. You've created a Pulse program schedule, containing an operation on qubit 0 followed by a measurement, executed the experiment on the backend and retrieved the results. Next, we will cover in detail the `different instructions which can be used in Pulse programs <2_building_pulse_instructions.ipynb>`__."
msgstr "これでおしまいです！ 結果を取得するには、 ``result = job.result()`` を使用します。量子ビット0での操作とそれに続く測定を含むPulseプログラムスケジュールを作成し、バックエンドで実験を実行して結果を取得しました。次に、 `Pulseプログラムで使用できるさまざまな命令 <2_building_pulse_instructions.ipynb>`__ について詳しく説明します。"

