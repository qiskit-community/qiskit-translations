msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-29 19:20+0000\n"
"PO-Revision-Date: 2023-03-29 19:38\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/textbook/01_IQPE.po\n"
"X-Crowdin-File-ID: 9622\n"

#: ../../tutorials/textbook/01_IQPE.ipynb:10
msgid "This page was generated from `tutorials/textbook/01_IQPE.ipynb`__."
msgstr "このページは `tutorials/textbook/01_IQPE.ipynb`__ から生成されました。"

#: ../../tutorials/textbook/01_IQPE.ipynb:9
msgid "Iterative Quantum Phase Estimation Algorithm"
msgstr "反復量子相推定アルゴリズム"

#: ../../tutorials/textbook/01_IQPE.ipynb:11
msgid "The goal of this tutorial is to understand how the Iterative Phase Estimation (IPE) algorithm works, why would we use the IPE algorithm instead of the QPE (Quantum Phase Estimation) algorithm and how to build it with Qiskit using the same circuit exploiting reset gate and the ``c_if`` method that allows to apply gates conditioned by the values stored in a classical register, resulting from previous measurements."
msgstr "このチュートリアルの目的は、反復位相推定 (IPE) アルゴリズムがどのように機能するか、なぜQPE (Quantum Phase Estimation) アルゴリズムではなくIPEアルゴリズムを使うのか、そしてどうやって Qiskit で構築するか、を理解することです。リセットゲートと ``c_if`` メソッドは、古典レジスタに格納した前回の測定結果の値で、条件付きゲートを適用することができます。"

#: ../../tutorials/textbook/01_IQPE.ipynb:13
msgid "**References**"
msgstr "**参考文献**"

#: ../../tutorials/textbook/01_IQPE.ipynb:15
msgid "`Section 2 of Lab 4: Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__"
msgstr "`Lab 4のセクション2: 反復位相推定 (IPE) アルゴリズム <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__"

#: ../../tutorials/textbook/01_IQPE.ipynb:17
msgid "`Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__"
msgstr "`Ch.3.6 量子位相推定 <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__"

#: ../../tutorials/textbook/01_IQPE.ipynb:42
msgid "Conditioned gates: the c_if method"
msgstr "条件付きゲート: c_if メソッド"

#: ../../tutorials/textbook/01_IQPE.ipynb:53
msgid "Before starting the IPE algorithm, we will give a brief tutorial about the Qiskit conditional method, c_if, as it goes into building the IPE circuit."
msgstr "IPEアルゴリズムを始める前に、Qiskitの条件付きメソッドであるc_ifについて、IPE回路を構築する際の簡単なチュートリアルを行います。"

#: ../../tutorials/textbook/01_IQPE.ipynb:55
msgid "``c_if`` is a function (actually a method of the gate class) to perform conditioned operations based on the value stored previously in a classical register. With this feature you can apply gates after a measurement in the same circuit conditioned by the measurement outcome."
msgstr "``c_if`` は、古典レジスタに以前格納された値に基づいて条件付きの演算を行う関数（実際にはゲートクラスのメソッド）です。この機能を使えば測定後に測定結果を条件にしたゲートを、同じ回路に適用することができます。"

#: ../../tutorials/textbook/01_IQPE.ipynb:57
msgid "For example, the following code will execute the :math:`X` gate if the value of the classical register is :math:`0`."
msgstr "例えば、次のコードでは、古典レジスターの値が :math:`0` の場合、 :math:`X` ゲートが実行されます。"

#: ../../tutorials/textbook/01_IQPE.ipynb:93
msgid "We highlight that the method c_if expects as the first argument a whole classical register, not a single classical bit (or a list of classical bits), and as the second argument a value in decimal representation (a non-negative integer), not the value of a single bit, 0, or 1 (or a list/string of binary digits)."
msgstr "強調しておきたいことは、メソッド c_if がとる第1引数は、古典レジスタ全体であり、単一の古典ビット (または古典ビットのリスト) ではないことです。また第2引数は、十進数の値 (非負の整数) であり、単一ビットの 0、1の値 (または2進数のリスト/文字列) ではありません。"

#: ../../tutorials/textbook/01_IQPE.ipynb:95
msgid "Let's make another example. Consider that we want to perform a bit flip on the third qubit after the measurements in the following circuit, when the results of the measurement of :math:`q_0` and :math:`q_1` are both :math:`1`."
msgstr "別の例を見てみましょう。次の回路の測定後、 :math:`q_0` と :math:`q_1` の測定結果が両方とも :math:`1` のとき3番目の量子ビットにビットフリップを実行したいとします。"

#: ../../tutorials/textbook/01_IQPE.ipynb:133
msgid "We want to apply the :math:`X` gate, only if both the results of the measurement of :math:`q_0` and :math:`q_1` are :math:`1`. We can do this using the c_if method, conditioning the application of :math:`X` depending on the value passed as argument to c_if."
msgstr ":math:`q_0` と :math:`q_1` の測定結果が両方とも :math:`1` である場合にのみ、 :math:`X` ゲートを適用します。 これは、c_ifメソッドを使用して、c_ifに引数として渡された値に応じて :math:`X` のアプリケーションを条件付けて行うことができます。"

#: ../../tutorials/textbook/01_IQPE.ipynb:135
msgid "We will have to encode the value to pass to the c_if method such that it will check the values 011 and 111 (in binary representation), since it does not matter what :math:`q_2` is measured as."
msgstr ":math:`q_2` が何として測定されるかは問題ではないため、値 011 と 111（バイナリー表現）をチェックするように、c_if メソッドに渡す値をエンコードする必要があります。"

#: ../../tutorials/textbook/01_IQPE.ipynb:137
msgid "The 2 integer values in decimal representation:"
msgstr "2つの整数の10 進数表記は以下:"

#: ../../tutorials/textbook/01_IQPE.ipynb:148
msgid "|889dccefb2d546c79d1e5b08ed14a046|"
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:150
msgid "889dccefb2d546c79d1e5b08ed14a046"
msgstr ""

#: ../../tutorials/textbook/01_IQPE.ipynb:161
msgid "We can check the solutions using the bin() method in python (the prefix ``0b`` indicates the binary format)."
msgstr "Python の bin() メソッドを使って結果を確認することができます (prefix ``0b`` はバイナリフォーマットを示します)。"

#: ../../tutorials/textbook/01_IQPE.ipynb:210
msgid "So we have to apply :math:`X` to :math:`q_2` using c_if two times, one for each value corresponding to 011 and 111."
msgstr "そのため、011と111 に対して :math:`X` を :math:`q_2` に c_if で 2 回適用しなければなりません。"

#: ../../tutorials/textbook/01_IQPE.ipynb:253
msgid "IPE"
msgstr "IPE"

#: ../../tutorials/textbook/01_IQPE.ipynb:255
msgid "The motivation for using the IPE algorithm is that QPE algorithm works fine for short depth circuits but when the circuit starts to grow, it doesn't work properly due to gate noise and decoherence times."
msgstr "IPE アルゴリズムを使用する動機は QPE アルゴリズムが、短い回路ではうまく動作するが、大きくなるとゲートノイズやデコヒーレンス時間のためにちゃんと動作しなくなることです。"

#: ../../tutorials/textbook/01_IQPE.ipynb:257
msgid "The detailed explanation of how the algorithm works can be found in `Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__. To understand QPE in depth, you can see also `Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__."
msgstr "アルゴリズムがどのように動作するかについての詳細な説明は、「 `反復位相推定 (IPE) アルゴリズム <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__ 」にあります。より深く QPE を理解するには、「 `Ch.3.6 量子位相推定 <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__」も参照してください。"

#: ../../tutorials/textbook/01_IQPE.ipynb:260
msgid "IPE example with a 1-qubit gate for :math:`U`"
msgstr ":math:`U` の1量子ビットゲートでの IPE の例"

#: ../../tutorials/textbook/01_IQPE.ipynb:262
msgid "We want to apply the IPE algorithm to estimate the phase for a 1-qubit operator :math:`U`. For example, here we use the :math:`S`-gate."
msgstr "1量子ビット演算子 :math:`U` の位相を推定するために、IPEアルゴリズムを適用したいとします。例えば、 :math:`S`-ゲートを使用します。"

#: ../../tutorials/textbook/01_IQPE.ipynb:264
msgid "Let's apply the IPE algorithm to estimate the phase for :math:`S`-gate. Its matrix is"
msgstr ":math:`S` ゲートの位相を推定するために、IPE アルゴリズムを適用しましょう。その行列は"

#: ../../tutorials/textbook/01_IQPE.ipynb:266
msgid " S =\n"
"\\begin{bmatrix}\n"
"1 & 0\\\\\n"
"0 & e^\\frac{i\\pi}{2}\\\\\n"
"\\end{bmatrix}"
msgstr " S =\n"
"\\begin{bmatrix}\n"
"1 & 0\\\\\n"
"0 & e^\\frac{i\\pi}{2}\\\\\n"
"\\end{bmatrix}"

#: ../../tutorials/textbook/01_IQPE.ipynb:274
msgid "That is, the :math:`S`-gate adds a phase :math:`\\pi/2` to the state :math:`|1\\rangle`, leaving unchanged the phase of the state :math:`|0\\rangle`"
msgstr "つまり、 :math:`S`-ゲートは :math:`|0\\rangle` 状態の位相はそのままにし、 :math:`|1\\rangle` 状態に位相 :math:`\\pi/2` を加えます。"

#: ../../tutorials/textbook/01_IQPE.ipynb:276
msgid "S|1\\rangle = e^\\frac{i\\pi}{2}|1\\rangle\n\n"
msgstr "S|1\\rangle = e^\\frac{i\\pi}{2}|1\\rangle\n\n"

#: ../../tutorials/textbook/01_IQPE.ipynb:278
msgid "In the following, we will use the notation and terms used in `Section 2 of lab 4 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__."
msgstr "以下では、 `Section 2 of lab 4 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__ と同じ表記と用語を使用します。"

#: ../../tutorials/textbook/01_IQPE.ipynb:280
msgid "Let's consider to estimate the phase :math:`\\phi=\\frac{\\pi}{2}` for the eigenstate :math:`|1\\rangle`, we should find :math:`\\varphi=\\frac{1}{4}` (where :math:`\\phi = 2 \\pi \\varphi`). Therefore to estimate the phase we need exactly 2 phase bits, i.e. :math:`m=2`, since :math:`1/2^2=1/4`. So :math:`\\varphi=0.\\varphi_1\\varphi_2`."
msgstr "固有状態 :math:`|1\\rangle` の位相 :math:`\\phi=\\frac{\\pi}{2}` の位相推定を考えましょう。 :math:`\\varphi=\\frac{1}{4}` を得るはずです ( :math:`\\phi = 2 \\pi \\varphi` のため) 。:math:`1/2^2=1/4` なので位相推定のためにちょうど 2 つの位相ビット、すなわち :math:`m=2` が必要になります。\n"
"そして :math:`\\varphi=0.\\varphi_1\\varphi_2` です。"

#: ../../tutorials/textbook/01_IQPE.ipynb:282
msgid "Remember from the theory that for the IPE algorithm, :math:`m` is also the number of iterations, so we need only :math:`2` iterations or steps."
msgstr "IPEアルゴリズムの理論を思い出してください。 :math:`m` は繰り返し数でもありますので、 :math:`2`の繰り返し数またはステップだけが必要です。"

#: ../../tutorials/textbook/01_IQPE.ipynb:284
msgid "First, we initialize the circuit. IPE works with only 1 auxiliary qubit, instead of :math:`m` counting qubits of the QPE algorithm. Therefore, we need 2 qubits, 1 auxiliary qubit and 1 for the eigenstate of :math:`U`-gate, and a classical register of 2 bits, for the phase bits :math:`\\varphi_1`, :math:`\\varphi_2`."
msgstr "最初に回路を初期化します。 IPE は、 QPE アルゴリズムでの量子ビット数 :math:`m` ではなく、たった1 つの補助量子ビットを使用します。 そのため補助量子ビットに１、 :math:`U` ゲート の固有状態に１、合計２量子ビットを必要とします。そして位相ビット :math:`\\varphi_1`, :math:`\\varphi_2` のために、古典レジスタが２ビット必要です。"

#: ../../tutorials/textbook/01_IQPE.ipynb:311
#: ../../tutorials/textbook/01_IQPE.ipynb:702
msgid "First step"
msgstr "第１ステップ"

#: ../../tutorials/textbook/01_IQPE.ipynb:313
msgid "Now we build the quantum circuit for the first step, that is, the first iteration of the algorithm, to estimate the least significant phase bit :math:`\\varphi_m`, in this case :math:`\\varphi_2`. For the first step we have 3 sub-steps: - initialization - application of the Controlled-:math:`U` gates - measure of the auxiliary qubit in x-basis"
msgstr "さて、最初のステップの量子回路を構築します。つまりアルゴリズムの最初の反復として、位相ビットの最下位ビット :math:`\\varphi_m` 、今の場合 :math:`\\varphi_2` を推定します。最初のステップには３つのサブステップがあります: - 初期化 - 制御-:math:`U` ゲート適用 - x 基底での補助量子ビットの測定。"

#: ../../tutorials/textbook/01_IQPE.ipynb:316
#: ../../tutorials/textbook/01_IQPE.ipynb:707
msgid "Initialization"
msgstr "初期化"

#: ../../tutorials/textbook/01_IQPE.ipynb:318
msgid "The initialization consists of application the Hadamard gate to the auxiliary qubit and the preparation of the eigenstate :math:`|1\\rangle`."
msgstr "初期化は、補助量子ビットへのアダマールゲートの適用と、固有状態 :math:`|1\\rangle` の準備から構成されます。"

#: ../../tutorials/textbook/01_IQPE.ipynb:351
#: ../../tutorials/textbook/01_IQPE.ipynb:742
msgid "Application of the Controlled-:math:`U` gates"
msgstr "制御-:math:`U` ゲートの適用"

#: ../../tutorials/textbook/01_IQPE.ipynb:353
msgid "Then we have to apply :math:`2^t` times the Controlled-:math:`U` operators (see also in the docs `Two qubit gates <https://qiskit.org/documentation/tutorials/circuits/3_summary_of_quantum_operations.html#Two-qubit-gates>`__), that, in this example, is the Controlled-:math:`S` gate (:math:`CS` for short)."
msgstr "次に制御- :math:`U` 演算子を :math:`2^t` 回適用しなければなりません( `２量子ビットゲート <https://qiskit.org/documentation/tutorials/circuits/3_summary_of_quantum_operations.html#Two-qubit-gates>`__ も参照)。 今回の例では制御- :math:`S` ゲート (略して :math:`CS`)です。"

#: ../../tutorials/textbook/01_IQPE.ipynb:355
msgid "To implement :math:`CS` in the circuit, since :math:`S` is a phase gate, we can use the controlled phase gate :math:`\\text{CP}(\\theta)`, with :math:`\\theta=\\pi/2`."
msgstr "回路に :math:`CS` を実装するため、 :math:`S` は位相ゲートなので制御位相ゲート :math:`\\text{CP}(\\theta)` が使えます。ここで :math:`\\theta=\\pi/2` です。"

#: ../../tutorials/textbook/01_IQPE.ipynb:387
msgid "Let's apply :math:`2^t` times :math:`\\text{CP}(\\pi/2)`. Since for the first step :math:`t=m-1`, and :math:`m=2`, we have :math:`2^t=2`."
msgstr "それでは :math:`\\text{CP}(\\pi/2)` を :math:`2^t` 回適用しましょう。最初のステップは :math:`t=m-1`、そして :math:`m=2` なので、 :math:`2^t=2` です。"

#: ../../tutorials/textbook/01_IQPE.ipynb:420
#: ../../tutorials/textbook/01_IQPE.ipynb:811
msgid "Measure in x-basis"
msgstr "X 基底の測定"

#: ../../tutorials/textbook/01_IQPE.ipynb:422
msgid "Finally, we perform the measurement of the auxiliary qubit in x-basis. So we will define a function to perform the x_measure and then apply it."
msgstr "最後に、補助量子ビットをX基底で測定します。 そのため、X測定を実行する関数を定義し、それを適用します。"

#: ../../tutorials/textbook/01_IQPE.ipynb:446
msgid "In this way we obtain the phase bit :math:`\\varphi_2` and store it in the classical bit :math:`c_0`."
msgstr "この方法で位相ビット :math:`\\varphi_2` を取得し、古典ビット :math:`c_0` に保存します。"

#: ../../tutorials/textbook/01_IQPE.ipynb:478
msgid "Subsequent steps (2nd step)"
msgstr "次のステップ (第２ステップ)"

#: ../../tutorials/textbook/01_IQPE.ipynb:480
msgid "Now we build the quantum circuit for the other remaining steps, in this example, only the second one. In these steps we have 4 sub-steps: the 3 sub-steps as in the first step and, in the middle, the additional step of the phase correction - initialization with reset - phase correction - application of the Controlled-:math:`U` gates - measure of the auxiliary qubit in x-basis"
msgstr "ここで、最初のステップ、つまりアルゴリズムの最初の反復の量子回路を構築して、最下位の位相ビットφm（この場合はφ2）を推定します。 最初のステップには、3つのサブステップがあります。 - 初期化 - Controlled-:math:`U` ゲートの適用 - x基底での補助量子ビットの測定"

#: ../../tutorials/textbook/01_IQPE.ipynb:483
#: ../../tutorials/textbook/01_IQPE.ipynb:850
msgid "Initialization with reset"
msgstr "リセットによる初期化"

#: ../../tutorials/textbook/01_IQPE.ipynb:485
msgid "As we want to perform an iterative algorithm in the same circuit, we need to reset the auxiliary qubit :math:`q0` after the measument gate and initialize it again as before to recycle the qubit."
msgstr "反復アルゴリズムを同じ回路で実行したいので、補助量子ビット :math:`q0` をリサイクルする前に、測定の後でにリセットして初期化する必要があります。"

#: ../../tutorials/textbook/01_IQPE.ipynb:518
#: ../../tutorials/textbook/01_IQPE.ipynb:883
msgid "Phase correction (for step 2)"
msgstr "位相補正 (ステップ 2 の場合)"

#: ../../tutorials/textbook/01_IQPE.ipynb:520
msgid "As seen in the theory, in order to extract the phase bit :math:`\\varphi_{1}`, we perform a phase correction of :math:`-\\pi\\varphi_2/2`. Of course, we need to apply the phase correction in the circuit only if the phase bit :math:`\\varphi_2=1`, i.e. we have to apply the phase correction of :math:`-\\pi/2` only if the classical bit :math:`c_0` is 1."
msgstr "理論で見てきたように、位相ビット :math:`\\varphi_{1}` を展開するために :math:`-\\pi\\varphi_2/2` の位相補正をします。もちろん位相ビットが :math:`\\varphi_2=1` の場合だけ、位相補正が必要です。すなわち、古典ビット :math:`c_0` が 1 の場合のみ、位相補正 :math:`-\\pi/2` を実行します。"

#: ../../tutorials/textbook/01_IQPE.ipynb:522
msgid "So, after the reset we apply the phase gate :math:`P(\\theta)` with phase :math:`\\theta=-\\pi/2` conditioned by the classical bit :math:`c_0` (:math:`=\\varphi_2`) using the ``c_if`` method. So as we saw in the first part of this tutorial, we have to use the ``c_if`` method with a value of 1, as :math:`1_{10} = 001_{2}` (the subscripts :math:`_{10}` and :math:`_2` indicate the decimal and binary representations)."
msgstr "そのため、リセット後に位相ゲート :math:`P(\\theta)` を位相 :math:`\\theta=-\\pi/2` で条件付きで適用します。古典ビット :math:`c_0` (:math:`=\\varphi_2`) を ``c_if`` メソッドを使って条件付けます。このチュートリアルの最初の部分で見たように、:math:`1_{10} = 001_{2}` なので値が 1 の ``c_if`` メソッドを使用します。(下付き :math:`_{10}` と :math:`_2` は10進数と2進数表現を示します)"

#: ../../tutorials/textbook/01_IQPE.ipynb:554
#: ../../tutorials/textbook/01_IQPE.ipynb:919
msgid "Application of the Controlled-:math:`U` gates and x-measurement (for step 2)"
msgstr "Controlled-:math:`U` と x-基底測定の適用（ステップ２の場合）"

#: ../../tutorials/textbook/01_IQPE.ipynb:556
msgid "We apply the :math:`CU` operations as we did in the first step. For the second step we have :math:`t=m-2`, hence :math:`2^t=1`. So we apply :math:`\\text{CP}(\\pi/2)` once. And then we perform the x-measurement of the qubit :math:`q_0`, storing the result, the phase bit :math:`\\varphi_1`, in the bit :math:`c_1` of classical register."
msgstr ":math:`CU` 演算子を最初のステップでやったように適用します。第2ステップでは :math:`t=m-2` のため :math:`2^t=1` です。そのため、 :math:`\\text{CP}(\\pi/2)` を一回適用します。そして量子ビット :math:`q_0` の X基底測定をして、位相ビット :math:`\\varphi_1` を古典レジスター :math:`c_1` に格納します。"

#: ../../tutorials/textbook/01_IQPE.ipynb:581
msgid "Et voilà, we have our final circuit"
msgstr "ついに、最終的な回路が得られました。"

#: ../../tutorials/textbook/01_IQPE.ipynb:611
msgid "Let's execute the circuit with the ``qasm_simulator``, the simulator without noise that run locally."
msgstr "``qasm_simulator`` を使って回路を実行しましょう。これはローカルで動作するノイズのないシミュレータです。"

#: ../../tutorials/textbook/01_IQPE.ipynb:641
msgid "In the picture we have the same histograms but on the left we have on the x-axis the string with phase bits :math:`\\varphi_1`, :math:`\\varphi_2` and on the right the actual phase :math:`\\varphi` in decimal representation."
msgstr "図のヒストグラムは同じものですが、左側は x軸に位相ビットが :math:`\\varphi_1`、 :math:`\\varphi_2` の文字列で、右側は実際の位相 :math:`\\varphi` が10 進表記になっています。"

#: ../../tutorials/textbook/01_IQPE.ipynb:643
msgid "As we expected we have found :math:`\\varphi=\\frac{1}{4}=0.25` with a :math:`100\\%` probability."
msgstr "予想通り :math:`\\varphi=\\frac{1}{4}=0.25` が確率 :math:`100\\%` になっています。"

#: ../../tutorials/textbook/01_IQPE.ipynb:655
msgid "IPE example with a 2-qubit gate"
msgstr "2量子ビットゲートの IPE の例"

#: ../../tutorials/textbook/01_IQPE.ipynb:657
msgid "Now, we want to apply the IPE algorithm to estimate the phase for a 2-qubit gate :math:`U`. For this example, let's consider the controlled version of the :math:`T` gate, i.e. the gate :math:`U=\\textrm{Controlled-}T` (that from now we will express more compactly with :math:`CT`). Its matrix is"
msgstr "ここで、IPEアルゴリズムを適用して、2量子ビットゲート :math:`U` の位相を推定します。この例では、 :math:`T` ゲートの制御バージョン、つまりゲート :math:`U=\\textrm{Controlled-}T` （これからは :math:`CT` でもっとコンパクトに表現していきます）について考えてみましょう。その行列は、"

#: ../../tutorials/textbook/01_IQPE.ipynb:659
msgid " CT =\n"
"\\begin{bmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^\\frac{i\\pi}{4}\\\\\n"
"\\end{bmatrix}"
msgstr " CT =\n"
"\\begin{bmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^\\frac{i\\pi}{4}\\\\\n"
"\\end{bmatrix}"

#: ../../tutorials/textbook/01_IQPE.ipynb:669
msgid "That is, the :math:`CT` gate adds a phase :math:`\\pi/4` to the state :math:`|11\\rangle`, leaving unchanged the phase of the other computational basis states :math:`|00\\rangle`, :math:`|01\\rangle`, :math:`|10\\rangle`."
msgstr "これは、:math:`CT` ゲートが状態 :math:`|11\\rangle` に位相 :math:`\\pi/4` を加え、その他の計算基底状態 :math:`|00\\rangle`, :math:`|01\\rangle`, :math:`|10\\rangle` はそのままにする、ということです。"

#: ../../tutorials/textbook/01_IQPE.ipynb:671
msgid "Let's consider to estimate the phase :math:`\\phi=\\pi/4` for the eigenstate :math:`|11\\rangle`, we should find :math:`\\varphi=1/8`, since :math:`\\phi = 2 \\pi \\varphi`. Therefore to estimate the phase we need exactly 3 classical bits, i.e. :math:`m=3`, since :math:`1/2^3=1/8`. So :math:`\\varphi=0.\\varphi_1\\varphi_2\\varphi_3`."
msgstr "固有状態 :math:`|11\\rangle` の位相 :math:`\\phi=\\pi/4` の位相推定を考えましょう。 :math:`\\phi = 2 \\pi \\varphi` なので :math:`\\varphi=1/8` を得るはずです。そのため位相推定に、ちょうど３つの古典ビットが必要です。つまり :math:`1/2^3=1/8` なので :math:`m=3`。従って :math:`\\varphi=0.\\varphi_1\\varphi_2\\varphi_3` となります。"

#: ../../tutorials/textbook/01_IQPE.ipynb:673
msgid "As done with the example for the 1-qubit :math:`U` operator we will go through the same steps but this time we will have :math:`3` steps since :math:`m=3`, and we will not repeat all the explanations. So for details see the above example for 1-qubit :math:`U` gate."
msgstr "1-量子ビット :math:`U` 演算子の例でみたように、同じステップを実行します。しかし今回は :math:`m=3` なので :math:`3` ステップありますが、同じ説明は繰り返しません。そのため詳細は上記1-量子ビット :math:`U` ゲートの例を参照してください。"

#: ../../tutorials/textbook/01_IQPE.ipynb:675
msgid "First, we initialize the circuit with 3 qubits, 1 for the auxiliary qubit and 2 for the 2-qubit gate, and 3 classical bits to store the phase bits :math:`\\varphi_1`, :math:`\\varphi_2`, :math:`\\varphi_3`."
msgstr "最初に、３つの量子ビットの回路を初期化します。１つは補助量子ビット、２つは２量子ビットゲート。そして位相ビット :math:`\\varphi_1`, :math:`\\varphi_2`, :math:`\\varphi_3` を格納する３つの古典ビット初期化します。"

#: ../../tutorials/textbook/01_IQPE.ipynb:704
msgid "Now we build the quantum circuit for the first step, to estimate the least significant phase bit :math:`\\varphi_m=\\varphi_3`."
msgstr "ここでは最初のステップの量子回路を構築し、位相ビットの最下位ビット :math:`\\varphi_m=\\varphi_3` を推定します。"

#: ../../tutorials/textbook/01_IQPE.ipynb:709
msgid "We initialize the auxiliary qubit and the other qubits with the eigenstate :math:`|11\\rangle`."
msgstr "補助量子ビットを初期化し、その他の量子ビットを固有状態 :math:`|11\\rangle` で初期化します。"

#: ../../tutorials/textbook/01_IQPE.ipynb:744
msgid "Then we have to apply multiple times the :math:`CU` operator, that, in this example, is the Controlled-:math:`CT` gate (:math:`CCT` for short)."
msgstr "この場合、 :math:`CU` 演算子を複数回適用する必要があります。この例では、制御 -:math:`CT` ゲート (短縮して :math:`CCT`) です。"

#: ../../tutorials/textbook/01_IQPE.ipynb:746
msgid "To implement :math:`CCT` in the circuit, since :math:`T` is a phase gate, we can use the multi-controlled phase gate :math:`\\text{MCP}(\\theta)`, with :math:`\\theta=\\pi/4`."
msgstr ":math:`CCT` を回路に実装するには、 :math:`T` は位相ゲートなので、マルチ制御位相ゲート :math:`\\text{MCP}(\\theta)` を :math:`\\theta=\\pi/4` で使用できます。"

#: ../../tutorials/textbook/01_IQPE.ipynb:778
msgid "Let's apply :math:`2^t` times :math:`\\text{MCP}(\\pi/4)`. Since for the first step :math:`t=m-1` and :math:`m=3`, we have :math:`2^t=4`."
msgstr "それでは :math:`\\text{MCP}(\\pi/4)` を :math:`2^t` 回適用しましょう。最初のステップは :math:`t=m-1`、そして :math:`m=3` なので、 :math:`2^t=4` です。"

#: ../../tutorials/textbook/01_IQPE.ipynb:813
msgid "Finally, we perform the measurement of the auxiliary qubit in x-basis. We can use the ``x_measurement`` function defined above in the example for 1-qubit gate. In this way we have obtained the phase bit :math:`\\varphi_3` and stored it in the classical bit :math:`c_0`."
msgstr "最後に、補助量子ビットをX基底で測定します。上の1量子ビットの例で定義した ``x_measurement`` 関数が使えます。この方法で位相ビット :math:`\\varphi_3` を古典ビット :math:`c_0` に取得することができます。"

#: ../../tutorials/textbook/01_IQPE.ipynb:845
msgid "Subsequent steps (2nd, 3rd)"
msgstr "次のステップ (第２、第３)"

#: ../../tutorials/textbook/01_IQPE.ipynb:847
msgid "Now we build the quantum circuit for the other remaining steps, the second and the third ones. As said in the first example, in these steps we have the additional sub-step of the phase correction."
msgstr "さて、残りの第２と第３のステップのために量子回路を作ります。最初の例で述べたように、ここでは位相補正のサブステップの追加があります。"

#: ../../tutorials/textbook/01_IQPE.ipynb:885
msgid "In order to extract the phase bit :math:`\\varphi_{2}`, we perform a phase correction of :math:`-\\pi\\varphi_3/2`."
msgstr "位相ビット :math:`\\varphi_{2}` を抽出するために、 :math:`-\\pi\\varphi_3/2` の位相補正を行います。"

#: ../../tutorials/textbook/01_IQPE.ipynb:887
msgid "So, after the reset we apply the phase gate :math:`P(\\theta)` with phase :math:`\\theta=-\\pi/2` conditioned by the classical bit :math:`c_0` (:math:`=\\varphi_3`)."
msgstr "したがって、リセット後に位相ゲート :math:`P(\\theta)` を位相 :math:`\\theta=-\\pi/2` で古典ビット :math:`c_0` (:math:`=\\varphi_3`)の条件付きで適用します。"

#: ../../tutorials/textbook/01_IQPE.ipynb:921
msgid "We apply the :math:`CU` operations as we did in the first step. For the second step we have :math:`t=m-2`, hence :math:`2^t=2`. So we apply :math:`\\text{MCP}(\\pi/4)` :math:`2` times. And then we perform the x-measurement of the qubit :math:`q_0`, storing the phase bit :math:`\\varphi_2` in the bit :math:`c_1`."
msgstr ":math:`CU` 演算子を最初のステップでやったように適用します。第２ステップでは :math:`t=m-2` のため :math:`2^t=2` です。そのため、 :math:`\\text{MCP}(\\pi/2)` を :math:`2` 回適用します。そして量子ビット :math:`q_0` の X基底測定をして、位相ビット :math:`\\varphi_2` を古典レジスター :math:`c_1` に格納します。"

#: ../../tutorials/textbook/01_IQPE.ipynb:955
msgid "All substeps of the 3rd step"
msgstr "第３ステップの全てのサブステップ"

#: ../../tutorials/textbook/01_IQPE.ipynb:957
msgid "For the 3rd and last step, we perform the reset and initialization of the auxiliary qubit as done in the second step."
msgstr "第３と最後のステップでは、補助量子ビットのリセットと初期化を、第２ステップでしたのと同じようにします。"

#: ../../tutorials/textbook/01_IQPE.ipynb:959
msgid "Then at the 3rd step we have to perform the phase correction of :math:`-2\\pi 0.0\\varphi_{2}\\varphi_{3}= -2\\pi \\left(\\frac{\\varphi_2}{4}+\\frac{\\varphi_3}{8}\\right)=-\\frac{\\varphi_2\\pi}{2}-\\frac{ \\varphi_3\\pi}{4}`, thus we have to apply 2 conditioned phase corrections, one conditioned by :math:`\\varphi_3` (:math:`=c_0`) and the other by :math:`\\varphi_2`\\ (:math:`=c_1`). To do this we have to apply the following: - gate :math:`P(-\\pi/4)` conditioned by :math:`c_0=1`, that is, by :math:`c=001` (c_if with value :math:`1`) - gate :math:`P(-\\pi/2)` conditioned by :math:`c_1=1`, that is, the gate is applied when :math:`c=010` (c_if with values :math:`2`) - gate :math:`P(-3\\pi/4)` conditioned by :math:`c_1=1` and :math:`c_0=1` that is, the gate is applied when :math:`c=011` (c_if with values :math:`3`)"
msgstr "第３のステップでは、 :math:`-2\\pi 0.0\\varphi_{2}\\varphi_{3}= -2\\pi \\left(\\frac{\\varphi_2}{4}+\\frac{\\varphi_3}{8}\\right)=-\\frac{\\varphi_2\\pi}{2}-\\frac{ \\varphi_3\\pi}{4}` の位相補正を行う必要があります。これには２つの条件付き位相補正が必要です。一つは :math:`\\varphi_3` (:math:`=c_0`) 、もう一つは :math:`\\varphi_2`\\ (:math:`=c_1`) による条件です。これを行うには次のように適用する必要があります。 :math:`c_0=1` による条件付きゲート :math:`P(-\\pi/4)` すなわち :math:`c=001` (値 :math:`1` の c_if) による条件、 :math:`c_1=1` による条件付きゲート :math:`P(-\\pi/2)` すなわち :math:`c=010` (値 :math:`2` の c_if) の時ゲートが適用、 :math:`c_1=1` と :math:`c_0=1` での条件付きゲート :math:`P(-3\\pi/4)` すなわち :math:`c=011` (値 :math:`3` の c_if) の時ゲートが適用されるようにします。"

#: ../../tutorials/textbook/01_IQPE.ipynb:962
msgid "Next, the :math:`CU` operations: we apply :math:`2^t` times the :math:`\\text{MCP}(\\pi/4)` gate and since at the 3rd step :math:`t=m-3=0`, we apply the gate only once."
msgstr "次に、 :math:`CU` 演算: :math:`\\text{MCP}(\\pi/4)` ゲートを :math:`2^t` を回適用します。第３のステップでは :math:`t=m-3=0` のため、ゲートを適用するのは一度だけです。"

#: ../../tutorials/textbook/01_IQPE.ipynb:1010
msgid "Now, we execute the circuit with the simulator without noise."
msgstr "では、ノイズのないシミュレータで回路を実行します。"

#: ../../tutorials/textbook/01_IQPE.ipynb:1040
msgid "We have obtained :math:`100\\%` probability to find :math:`\\varphi=0.125`, that is, :math:`1/8`, as expected."
msgstr ":math:`100\\%` の確率で :math:`\\varphi=0.125` 、つまり期待通り :math:`1/8` を見つけることができました。"

