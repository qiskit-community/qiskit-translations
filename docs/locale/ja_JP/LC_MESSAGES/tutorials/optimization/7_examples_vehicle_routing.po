msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-21 20:22+0000\n"
"PO-Revision-Date: 2021-03-08 06:09\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/7_examples_vehicle_routing.po\n"
"X-Crowdin-File-ID: 9382\n"
"Language: ja_JP\n"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:10
msgid "This page was generated from `tutorials/optimization/7_examples_vehicle_routing.ipynb`__."
msgstr "当ページは `tutorials/optimization/7_examples_vehicle_routing.ipynb`__ から生成されました。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/optimization/7_examples_vehicle_routing.ipynb>`_."
msgstr "`IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/optimization/7_examples_vehicle_routing.ipynb>`_ でインタラクティブに実行します。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:9
msgid "*Vehicle Routing*"
msgstr "*配車ルーティング*"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:12
msgid "The Introduction"
msgstr "はじめに"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:14
msgid "Logistics is a major industry, with some estimates valuing it at USD 8183 billion globally in 2015. Most service providers operate a number of vehicles (e.g., trucks and container ships), a number of depots, where the vehicles are based overnight, and serve a number of client locations with each vehicle during each day. There are many optimization and control problems that consider these parameters. Computationally, the key challenge is how to design routes from depots to a number of client locations and back to the depot, so as to minimize vehicle-miles traveled, time spent, or similar objective functions. In this notebook we formalize an idealized version of the problem and showcase its solution using the quantum approximate optimization approach of Farhi, Goldstone, and Gutman (2014)."
msgstr "ロジスティクスは主要産業であり、2015年には世界全体で8183億米ドルと評価されています。ほとんどのサービスプロバイダーは、多数の車両（トラックやコンテナ船など）、多数のデポを運営しています。 車両は夜間に拠点を置き、毎日、各車両で多くのクライアントの場所にサービスを提供します。 これらのパラメータを考慮した最適化と制御の問題はたくさんあります。 計算上、重要な課題は、車両の走行距離、費やした時間、または同様の目的関数を最小限に抑えるために、デポから多数のクライアントの場所に戻ってデポに戻るルートをどのように設計するかです。 このノートブックでは、問題の理想化されたバージョンを形式化し、Farhi、Goldstone、およびGutman（2014）の量子近似最適化アプローチを使用してその解決策を紹介します。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:17
msgid "The overall workflow we demonstrate comprises:"
msgstr "私たちが示す全体的なワークフローは次のとおりです。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:19
msgid "establish the client locations. Normally, these would be available ahead of the day of deliveries from a database. In our use case, we generate these randomly."
msgstr "クライアントの場所を確立します。 通常、これらはデータベースからの配信日の前に利用可能です。 私たちのユースケースでは、これらをランダムに生成します。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:21
msgid "compute the pair-wise distances, travel times, or similar. In our case, we consider the Euclidean distance, “as the crow flies”, which is perhaps the simplest possible."
msgstr "ペアワイズ距離、移動時間などを計算します。 私たちの場合、「カラスが飛ぶように」ユークリッド距離を考慮します。これはおそらく最も単純な距離です。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:23
msgid "compute the actual routes. This step is run twice, actually. First, we obtain a reference value by a run of a classical solver (IBM CPLEX) on the classical computer. Second, we run an alternative, hybrid algorithm partly on the quantum computer."
msgstr "実際のルートを計算します。 このステップは、実際には2回実行されます。 最初に、古典的なコンピューターで古典的なソルバー（IBM CPLEX）を実行して参照値を取得します。 次に、量子コンピューターで部分的に代替のハイブリッドアルゴリズムを実行します。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:25
msgid "visualization of the results. In our case, this is again a simplistic plot."
msgstr "結果の視覚化。 私たちの場合、これも単純なプロットです。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:27
msgid "In the following, we first explain the model, before we proceed with the installation of the pre-requisites and the data loading."
msgstr "以下では、前提条件のインストールとデータのロードに進む前に、まずモデルについて説明します。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:30
msgid "The Model"
msgstr "モデル"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:32
msgid "Mathematically speaking, the vehicle routing problem (VRP) is a combinatorial problem, wherein the best routes from a depot to a number of clients and back to the depot are sought, given a number of available vehicles. There are a number of formulations possible, extending a number of formulations of the traveling salesman problem [Applegate et al, 2006]. Here, we present a formulation known as MTZ [Miller, Tucker, Zemlin, 1960]."
msgstr "数学的に言えば、配車ルート問題（vehicle routing problem、VRP）は組み合わせ問題であり、利用可能な車両の数を考慮して、デポから多数のクライアントに戻り、デポに戻る最適なルートが求められます。 巡回セールスマン問題の多くの定式化を拡張して、可能な多くの定式化があります [Applegate et al, 2006] 。 ここでは、MTZ [Miller, Tucker, Zemlin, 1960] として知られる定式化を紹介します。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:34
msgid "Let :math:`n` be the number of clients (indexed as :math:`1,\\dots,n`), and :math:`K` be the number of available vehicles. Let :math:`x_{ij} = \\{0,1\\}` be the binary decision variable which, if it is :math:`1`, activates the segment from node :math:`i` to node :math:`j`. The node index runs from :math:`0` to :math:`n`, where :math:`0` is (by convention) the depot. There are twice as many distinct decision variables as edges. For example, in a fully connected graph, there are :math:`n(n+1)` binary decision variables."
msgstr ":math:`n` をクライアントの数（ :math:`1,\\dots,n` としてインデックス付け）、 :math:`K` を利用可能な車両の数とします。 :math:`x_{ij} = \\{0,1\\}` をバイナリ決定変数とします。これが :math:`1` の場合、ノード :math:`i` からノード :math:`j` へのセグメントをアクティブにします。 ノードインデックスは :math:`0` から :math:`n` まで実行されます。ここで、 :math:`0` は（慣例により）デポです。 エッジの2倍の異なる決定変数があります。 たとえば、完全接続されたグラフには、 :math:`n(n+1)` 個のバイナリ決定変数があります。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:37
msgid "If two nodes :math:`i` and :math:`j` have a link from :math:`i` to :math:`j`, we write :math:`i \\sim j`. We also denote with :math:`\\delta(i)^+` the set of nodes to which :math:`i` has a link, i.e., :math:`j \\in \\delta(i)^+` if and only if :math:`i \\sim j`. Similarly, we denote with :math:`\\delta(i)^-` the set of nodes which are connected to :math:`i`, in the sense that :math:`j \\in \\delta(i)^-` if and only if :math:`j \\sim i`."
msgstr "2つのノード :math:`i` と :math:`j` に :math:`i` から :math:`j` へのリンクがある場合、 :math:`i \\sim j` と記述します。 また、 :math:`i \\sim j` の場合に限り、 :math:`i` がリンクしているノードのセットを :math:`\\delta(i)^+` で表します。つまり、:math:`j \\in \\delta(i)^+` です。 同様に、 :math:`j \\sim i` の場合に限り、 :math:`j \\in \\delta(i)^-` という意味で、iに接続されているノードのセットをδ（i）-で表します。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:39
msgid "In addition, we consider continuous variables, for all nodes :math:`i = 1,\\dots, n`, denoted :math:`u_i`. These variables are needed in the MTZ formulation of the problem to eliminate sub-tours between clients."
msgstr "さらに、 :math:`u_i` で表されるすべてのノード :math:`i = 1,\\dots, n` について、連続変数を検討します。 これらの変数は、クライアント間のサブツアーを排除するために、問題のMTZ定式化で必要です。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:41
msgid "The VRP can be formulated as:"
msgstr "VRPは以下のように定式化できます:"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:43
msgid "(VRP) \\quad  f = \\min_{\\{x_{ij}\\}_{i\\sim j}\\in \\{0,1\\}, \\{u_i\\}_{i=1,\\dots,n}\\in \\mathbb{R}} \\quad \\sum_{i \\sim j} w_{ij} x_{ij}"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:48
msgid "subject to the node-visiting constraint:"
msgstr "ノード訪問制約の対象："

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:50
msgid "\\sum_{j \\in \\delta(i)^+} x_{ij} = 1, \\,\\sum_{j \\in \\delta(i)^-} x_{ji} = 1,\\, \\forall i \\in \\{1,\\dots,n\\},"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:55
msgid "the depot-visiting constraints:"
msgstr "デポ訪問の制約："

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:57
msgid "\\sum_{i \\in \\delta(0)^+} x_{0i} = K, \\, \\sum_{j \\in \\delta(0)^+} x_{j0} = K,"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:62
msgid "and the sub-tour elimination constraints:"
msgstr "およびサブツアー除去の制約："

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:64
msgid "u_i - u_j + Q x_{ij} \\leq Q-q_j, \\, \\forall i \\sim j, \\,i ,j \\neq 0, \\quad q_i \\leq u_i \\leq Q,\\, \\forall i, i \\neq 0."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:69
msgid "In particular, - The cost function is linear in the cost functions and weighs the different arches based on a positive weight :math:`w_{ij}>0` (typically the distance between node :math:`i` and node :math:`j`); - The first set of constraints enforce that from and to every client, only one link is allowed; - The second set of constraints enforce that from and to the depot, exactly :math:`K` links are allowed; - The third set of constraints enforce the sub-tour elimination constraints and are bounds on :math:`u_i`, with :math:`Q>q_j>0`, and :math:`Q,q_i \\in \\mathbb{R}`."
msgstr "特に、 - コスト関数はコスト関数で線形であり、正の重み :math:`w_{ij}>0` （通常はノード :math:`i` とノード :math:`j` の間の距離）に基づいてさまざまなアーチの重みを付けます。 - 最初の一連の制約により、すべてのクライアントとの間で、1つのリンクのみが許可されます。 - 制約の2番目のセットは、デポとの間で正確に :math:`K` 個のリンクが許可されることを強制します。 - 制約の3番目のセットは、サブツアー除去制約を適用し、 :math:`Q>q_j>0` 、および :math:`Q,q_i \\in \\mathbb{R}`の :math:`u_i` の境界です。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:73
msgid "Classical solution"
msgstr "古典的なソリューション"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:75
msgid "We can solve the VRP classically, e.g., by using CPLEX. CPLEX uses a branch-and-bound-and-cut method to find an approximate solution of the VRP, which, in this formulation, is a mixed-integer linear program (MILP). For the sake of notation, we pack the decision variables in one vector as"
msgstr "CPLEXを使用するなどして、VRPを古典的に解決できます。 CPLEXは、branch-and-bound-and-cut 法を使用して、VRPの近似解を見つけます。これは、この定式化では、混合整数線形計画（mixed-integer linear program、MILP）です。 表記のために、決定変数を1つのベクトルに次のようにパックします。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:77
msgid "{\\bf z} = [x_{01},x_{02},\\ldots,x_{10}, x_{12},\\ldots,x_{n(n-1)}]^T,"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:82
msgid "wherein :math:`{\\bf z} \\in \\{0,1\\}^N`, with :math:`N = n (n+1)`. So the dimension of the problem scales quadratically with the number of nodes. Let us denote the optimal solution by :math:`{\\bf z}^*`, and the associated optimal cost :math:`f^*`."
msgstr "ここでは、 :math:`{\\bf z} \\in \\{0,1\\}^N` 、 :math:`N = n (n+1)` です。 したがって、問題の次元はノードの数に比例して二次関数的にスケーリングします。 最適解を :math:`{\\bf z}^*` で表し、関連する最適コストを :math:`f^*` で表します。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:85
msgid "Quantum solution"
msgstr "量子ソリューション"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:87
msgid "Here, we demonstrate an approach that combines classical and quantum computing steps, following the quantum approximate optimization approach of Farhi, Goldstone, and Gutman (2014). In particular, we use the variational quantum eigensolver (VQE). We stress that given the use of limited depth of the quantum circuits employed (variational forms), it is hard to discuss the speed-up of the algorithm, as the solution obtained is heuristic in nature. At the same time, due to the nature and importance of the target problems, it is worth investigating heuristic approaches, which may be worthwhile for some problem classes."
msgstr "ここでは、Farhi、Goldstone、およびGutman（2014）の量子近似最適化アプローチに従って、古典的なコンピューティングステップと量子コンピューティングステップを組み合わせたアプローチを示します。 特に、変分量子固有値ソルバー（variational quantum eigensolver、VQE）を使用します。 使用される量子回路の深さが限られていること（変分形式）を考えると、得られる解は本質的にヒューリスティックであるため、アルゴリズムの高速化について説明するのは難しいことを強調します。 同時に、対象となる問題の性質と重要性のため、ヒューリスティックなアプローチを調査する価値があります。これは、一部の問題クラスにとって価値がある場合があります。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:90
msgid "Following [5], the algorithm can be summarized as follows: - Preparation steps: - Transform the combinatorial problem into a binary polynomial optimization problem with equality constraints only; - Map the resulting problem into an Ising Hamiltonian (:math:`H`) for variables :math:`{\\bf z}` and basis :math:`Z`, via penalty methods if necessary; - Choose the depth of the quantum circuit :math:`m`. Note that the depth can be modified adaptively. - Choose a set of controls :math:`\\theta` and make a trial function :math:`\\big|\\psi(\\boldsymbol\\theta)\\rangle`, built using a quantum circuit made of C-Phase gates and single-qubit Y rotations, parameterized by the components of :math:`\\boldsymbol\\theta`."
msgstr "[5] に従い、アルゴリズムは次のように要約できます。 - 準備手順： - 組み合わせ問題を等式制約のみのバイナリ多項式最適化問題に変換します。 - 必要に応じてペナルティ法を使用して、結果の問題を変数 :math:`{\\bf z}` と基底 :math:`Z` のイジングハミルトニアン（ :math:`H` ）にマッピングします。 - 量子回路の深さ :math:`m` を選択します。 深さは適応的に変更できることに注意してください。 - コントロール :math:`\\theta` のセットを選択し、 :math:`\\boldsymbol\\theta` の成分によってパラメータ化された制御位相ゲートと単一量子ビットY回転で構成される量子回路を使用して構築された試行関数 :math:`\\big|\\psi(\\boldsymbol\\theta)\\rangle` を作成します。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:93
msgid "Algorithm steps:"
msgstr "アルゴリズムの手順："

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:95
msgid "Evaluate :math:`C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)\\big|H\\big|\\psi(\\boldsymbol\\theta)\\rangle` by sampling the outcome of the circuit in the Z-basis and adding the expectation values of the individual Ising terms together. In general, different control points around :math:`\\boldsymbol\\theta` have to be estimated, depending on the classical optimizer chosen."
msgstr "Zベースで回路の結果をサンプリングし、個々のIsing項の期待値を合計して、 :math:`C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)\\big|H\\big|\\psi(\\boldsymbol\\theta)\\rangle` を評価します。 一般に、選択した古典的なオプティマイザに応じて、 :math:`\\boldsymbol\\theta` 周辺のさまざまな制御点を推定する必要があります。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:96
msgid "Use a classical optimizer to choose a new set of controls."
msgstr "従来のオプティマイザを使用して、新しいコントロールのセットを選択します。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:97
msgid "Continue until :math:`C(\\boldsymbol\\theta)` reaches a minimum, close enough to the solution :math:`\\boldsymbol\\theta^*`."
msgstr ":math:`C(\\boldsymbol\\theta)` が最小値に達するまで続け、解 :math:`\\boldsymbol\\theta^*` に十分に近づけます。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:98
msgid "Use the last :math:`\\boldsymbol\\theta` to generate a final set of samples from the distribution :math:`\\Big|\\langle z_i\\big|\\psi(\\boldsymbol\\theta)\\rangle\\Big|^2\\;\\forall i` to obtain the answer."
msgstr "最後の :math:`\\boldsymbol\\theta` を使用して、分布 :math:`\\Big|\\langle z_i\\big|\\psi(\\boldsymbol\\theta)\\rangle\\Big|^2\\;\\forall i` からサンプルの最終セットを生成し、答えを取得します。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:100
msgid "There are many parameters throughout, notably the choice of the trial wavefunction. Below, we consider:"
msgstr "全体を通して多くのパラメータがあり、特に試行波動関数の選択があります。 以下では、次を検討します。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:102
msgid "\\big|\\psi(\\theta)\\rangle = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m \\big|+\\rangle"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:107
msgid "where :math:`U_\\mathrm{entangler}` is a collection of C-Phase gates (fully-entangling gates), and :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^N Y(\\theta_{i})`, where :math:`N` is the number of qubits and :math:`m` is the depth of the quantum circuit."
msgstr "ここで、 :math:`U_\\mathrm{entangler}` は制御位相ゲート（完全にエンタングルしたゲート）の集合であり、 :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^N Y(\\theta_{i})` です。ここで、 :math:`N` は量子ビットの数、 :math:`m` は量子回路の深さです。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:110
msgid "Construct the Ising Hamiltonian"
msgstr "イジングハミルトニアンを構築する"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:112
msgid "From :math:`VRP` one can construct a binary polynomial optimization with equality constraints only by considering cases in which :math:`K=n-1`. In these cases the sub-tour elimination constraints are not necessary and the problem is only on the variable :math:`{\\bf z}`. In particular, we can write an augmented Lagrangian as"
msgstr ":math:`VRP` から、 :math:`K=n-1` の場合を考慮することによってのみ、等式制約を使用して二値多項式最適化を構築できます。 これらの場合、サブツアー除去制約は必要なく、問題は変数 :math:`{\\bf z}` にのみあります。 特に、拡張ラグランジュは次のように書くことができます。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:114
msgid "(IH) \\quad H = \\sum_{i \\sim j} w_{ij} x_{ij}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big(\\sum_{j \\in \\delta(i)^+} x_{ij} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big(\\sum_{j \\in \\delta(i)^-} x_{ji} - 1\\Big)^2 +A \\Big(\\sum_{i \\in \\delta(0)^+} x_{0i} - K\\Big)^2 + A\\Big(\\sum_{j \\in \\delta(0)^+} x_{j0} - K\\Big)^2"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:119
msgid "where :math:`A` is a big enough parameter."
msgstr "ここで、 :math:`A` は十分に大きいパラメーターです。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:122
msgid "From Hamiltonian to QP formulation"
msgstr "ハミルトニアンからQP定式化へ"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:124
msgid "In the vector :math:`{\\bf z}`, and for a complete graph (:math:`\\delta(i)^+ = \\delta(i)^- = \\{0,1,\\dots,i-1,i+1,\\dots,n\\}`), :math:`H` can be written as follows."
msgstr "ベクトル :math:`{\\bf z}` で、完全グラフ（ :math:`\\delta(i)^+ = \\delta(i)^- = \\{0,1,\\dots,i-1,i+1,\\dots,n\\}` ）の場合、 :math:`H` は次のように記述できます。 。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:126
msgid "\\min_{{\\bf z}\\in \\{0,1\\}^{n(n+1)}} {\\bf w}^T {\\bf z}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big({\\bf e}_i \\otimes {\\bf 1}_n^T {\\bf z} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big({\\bf v}_i^T {\\bf z} - 1\\Big)^2 + A \\Big(({\\bf e}_0 \\otimes {\\bf 1}_n)^T{\\bf z} - K\\Big)^2 + A\\Big({\\bf v}_0^T{\\bf z} - K\\Big)^2."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:131
msgid "That is:"
msgstr "それは："

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:133
msgid "\\min_{\\bf z\\in \\{0,1\\}^{n(n+1)}} \\bf z^T {\\bf Q} \\bf z + {\\bf g}^T \\bf z + c,"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:138
msgid "Where: first term:"
msgstr "ここで：最初の項："

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:140
msgid "{\\bf Q} = A \\sum_{i \\in \\{0,1,\\dots,n\\}}  \\Big[({\\bf e}_i \\otimes {\\bf 1}_n)({\\bf e}_i \\otimes {\\bf 1}_n)^T + {\\bf v}_i{\\bf v}_i^T \\Big]"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:145
msgid "Second term:"
msgstr "第二の項："

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:147
msgid "{\\bf g} = {\\bf w} -2 A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big[({\\bf e}_i \\otimes {\\bf 1}_n) + {\\bf v}_i \\Big] -2 A K \\Big[({\\bf e}_0 \\otimes {\\bf 1}_n) + {\\bf v}_0 \\Big]"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:152
msgid "Third term:"
msgstr "第三の項："

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:154
msgid "c = 2An +2AK^2."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:159
msgid "The QP formulation of the Ising Hamiltonian is ready for the use of VQE. We will solve the QP using optimization stack available in Qiskit."
msgstr "イジングハミルトニアンのQP定式化はVQEの使用の準備ができています。 Qiskitで利用可能な最適化スタックを使用してQPを解決します。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:162
msgid "References"
msgstr "参考文献"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:164
msgid "[1] E. Farhi, J. Goldstone, S. Gutmann e-print arXiv 1411.4028, 2014"
msgstr "[1] E. Farhi, J. Goldstone, S. Gutmann e-print arXiv 1411.4028, 2014"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:166
msgid "[2] https://github.com/Qiskit/qiskit-tutorials/blob/master/tutorials/optimization/6_examples_max_cut_and_tsp.ipynb"
msgstr "[2] https://github.com/Qiskit/qiskit-tutorials/blob/master/tutorials/optimization/6_examples_max_cut_and_tsp.ipynb"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:168
msgid "[3] C. E. Miller, E. W. Tucker, and R. A. Zemlin (1960). “Integer Programming Formulations and Travelling Salesman Problems”. J. ACM. 7: 326–329. doi:10.1145/321043.321046."
msgstr "[3] C. E. Miller, E. W. Tucker, and R. A. Zemlin (1960). “Integer Programming Formulations and Travelling Salesman Problems”. J. ACM. 7: 326–329. doi:10.1145/321043.321046."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:170
msgid "[4] D. L. Applegate, R. M. Bixby, V. Chvátal, and W. J. Cook (2006). The Traveling Salesman Problem. Princeton University Press, ISBN 978-0-691-12993-8."
msgstr "[4] D. L. Applegate, R. M. Bixby, V. Chvátal, and W. J. Cook (2006). The Traveling Salesman Problem. Princeton University Press, ISBN 978-0-691-12993-8."

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:182
msgid "Initialization"
msgstr "初期化"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:184
msgid "First of all we load all the packages that we need: - Python 3.6 or greater is required; - CPLEX 12.8 or greater is required for the classical computations; - Latest Qiskit is required for the quantum computations."
msgstr "まず、必要なすべてのパッケージをロードします。 - Python3.6以降が必要です。 - 従来の計算にはCPLEX12.8以上が必要です。 - 量子計算には最新のQiskitが必要です。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:233
msgid "We then initialize the variables"
msgstr "次に、変数を初期化します"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:256
msgid "We define an initializer class that randomly places the nodes in a 2-D plane and computes the distance between them."
msgstr "ノードを2次元平面にランダムに配置し、ノード間の距離を計算する初期化子クラスを定義します。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:312
msgid "Classical solution using IBM ILOG CPLEX"
msgstr "IBM ILOGCPLEX を使用した従来のソリューション"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:314
msgid "For a classical solution, we use IBM ILOG CPLEX. CPLEX is able to find the exact solution of this problem. We first define a ClassicalOptimizer class that encodes the problem in a way that CPLEX can solve, and then instantiate the class and solve it."
msgstr "従来のソリューションでは、IBM ILOGCPLEX を使用します。 CPLEX は、この問題の正確な解決策を見つけることができます。 まず、CPLEX が解決できる方法で問題をエンコードする ClassicalOptimizer クラスを定義し、次にクラスをインスタンス化して解決します。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:531
msgid "If you have CPLEX, the solution shows the depot with a star and the selected routes for the vehicles with arrows."
msgstr "CPLEXを使用している場合、ソリューションには星付きのデポと矢印付きの車両用に選択されたルートが表示されます。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:543
msgid "Quantum solution from the ground up"
msgstr "ゼロからの量子ソリューション"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:545
msgid "For the quantum solution, we use Qiskit."
msgstr "量子ソリューションには、Qiskitを使用します。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:547
msgid "First, we derive the solution from the ground up, using a class QuantumOptimizer that encodes the quantum approach to solve the problem and then we instantiate it and solve it. We define the following methods inside the class: - ``binary_representation`` : encodes the problem :math:`(M)` into a QP terms (that’s basically linear algebra); - ``construct_problem`` : constructs a QUBO optimization problem as an instance of ``QuadraticProgram``; - ``solve_problem``: solves the problem :math:`(M)` constructed at the previous step via ``MinimunEigenOptimizer`` by using VQE with default parameters;"
msgstr "まず、問題を解決するために量子アプローチをエンコードするクラスQuantumOptimizerを使用して、ゼロからソリューションを導き出し、次にそれをインスタンス化して解決します。 クラス内で次のメソッドを定義します。-- ``binary_representation`` ：問題 :math:`(M)` をQP項 (基本的に線形代数) にエンコードします。 -- ``construct_problem`` ： ``QuadraticProgram`` のインスタンスとしてQUBO最適化問題を構築します。 -- ``solve_problem`` ：デフォルトのパラメーターでVQEを使用することにより、 ``MinimunEigenOptimizer`` を介して前のステップで構築された問題 :math:`(M)` を解決します。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:658
msgid "Step 1"
msgstr "ステップ 1"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:660
msgid "Instantiate the quantum optimizer class with parameters: - the instance; - the number of nodes and vehicles ``n`` and ``K``;"
msgstr "パラメータを使用して量子オプティマイザクラスをインスタンス化します。 - インスタンス。 - ノードと車両の数 ``n`` と ``K`` ;"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:683
msgid "Step 2"
msgstr "ステップ２"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:685
msgid "Encode the problem as a binary formulation (IH-QP)."
msgstr "問題をバイナリ定式化（IH-QP）としてエンコードします。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:687
msgid "Sanity check: make sure that the binary formulation in the quantum optimizer is correct (i.e., yields the same cost given the same solution)."
msgstr "サニティチェック：量子オプティマイザのバイナリ定式化が正しいことを確認します（つまり、同じソリューションで同じコストが得られることを確認します）。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:744
msgid "Step 3"
msgstr "ステップ３"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:746
msgid "Encode the problem as an instance of ``QuadraticProgram``."
msgstr "``QuadraticProgram`` のインスタンスとして問題をエンコードします。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:768
msgid "Step 4"
msgstr "ステップ 4"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:770
msgid "Solve the problem via ``MinimumEigenOptimizer`` from the optimization stack. N.B. Depending on the number of qubits, the state-vector simulation can take a while; for example with 12 qubits, it takes more than 12 hours. Logging is useful to see what the program is doing."
msgstr "最適化スタックから ``MinimumEigenOptimizer`` を介して問題を解決します。 N.B. 量子ビットの数によっては、状態ベクトルシミュレーションに時間がかかる場合があります。 たとえば、12量子ビットの場合、12時間以上かかります。 ロギングは、プログラムが何をしているかを確認するのに役立ちます。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:813
msgid "Step 5"
msgstr "ステップ5"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:815
msgid "Visualize the solution"
msgstr "ソリューションを視覚化する"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:867
msgid "The plots present the depot with a star and the selected routes for the vehicles with arrows. Note that in this particular case, we can find the optimal solution of the QP formulation, which happens to coincide with the optimal solution of the ILP."
msgstr "プロットには、デポに星が表示され、車両用に選択されたルートが矢印で表示されます。 この特定のケースでは、QP定式化の最適解を見つけることができます。これはたまたまILPの最適解と一致します。"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:869
msgid "Keep in mind that VQE is an heuristic working on the QP formulation of the Ising Hamiltonian, though. For suitable choices of A, local optima of the QP formulation will be feasible solutions to the ILP. While for some small instances, as above, we can find optimal solutions of the QP formulation which coincide with optima of the ILP, finding optimal solutions of the ILP is harder than finding local optima of the QP formulation, in general, which in turn is harder than finding feasible solutions of the ILP. Even within the VQE, one may provide stronger guarantees, for specific variational forms (trial wave functions)."
msgstr "ただし、VQEはイジングハミルトニアンのQP定式化に取り組んでいるヒューリスティックであることに注意してください。 Aの適切な選択については、QP定式化の局所最適点がILPの実行可能解になります。 いくつかの小さな例では、上記のように、ILPの最適化と一致するQP公式の最適解を見つけることができますが、ILPの最適解を見つけることは、一般にQP公式の局所最適を見つけることよりも困難です。 ILPの実行可能な解決策を見つけるよりも難しい。 VQE内でも、特定の変分形式（試行波動関数）に対してより強力な保証を提供する場合があります。"

