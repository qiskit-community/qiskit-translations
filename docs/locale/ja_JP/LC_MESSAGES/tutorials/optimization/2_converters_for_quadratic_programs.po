msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-08 17:23+0000\n"
"PO-Revision-Date: 2021-03-04 08:35\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/2_converters_for_quadratic_programs.po\n"
"X-Crowdin-File-ID: 9150\n"
"Language: ja_JP\n"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:10
msgid "This page was generated from `tutorials/optimization/2_converters_for_quadratic_programs.ipynb`__."
msgstr "このページは `tutorials/optimization/2_converters_for_quadratic_programs.ipynb`__ から生成されました。"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/optimization/2_converters_for_quadratic_programs.ipynb>`_."
msgstr "`IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/optimization/2_converters_for_quadratic_programs.ipynb>`_ でインタラクティブに実行します。"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:9
msgid "Converters for Quadratic Programs"
msgstr "二次計画法のコンバーター"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:20
msgid "Optimization problems in Qiskit’s optimization module are represented with the ``QuadraticProgram`` class, which is generic and powerful representation for optimization problems. In general, optimization algorithms are defined for a certain formulation of a quadratic program and we need to convert our problem to the right type."
msgstr "Qiskitの最適化モジュールの最適化問題は、 ``QuadraticProgram`` クラスで表されます。これは、最適化問題の一般的で強力な表現です。一般に、最適化アルゴリズムは二次計画法の特定の定式化に対して定義されており、問題を適切なタイプに変換する必要があります。"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:22
msgid "For instance, Qiskit provides several optimization algorithms that can handle Quadratic Unconstrained Binary Optimization (QUBO) problems. These are mapped to Ising Hamiltonians, for which Qiskit uses the ``qiskit.aqua.operators`` module, and then their ground state is approximated. For this optimization commonly known algorithms such as VQE or QAOA can be used as underlying routine. See the following tutorial about the `Minimum Eigen Optimizer <./3_minimum_eigen_optimizer.ipynb>`__ for more detail. Note that also other algorithms exist that work differently, such as the ``GroverOptimizer``."
msgstr "たとえば、Qiskitは、Quadratic Unconstrained Binary Optimization (QUBO) 問題を処理できるいくつかの最適化アルゴリズムを提供します。これらは、Qiskitが ``qiskit.aqua.operators`` モジュールを使用するイジングハミルトニアン(Ising Hamiltonian)にマッピングされ、基底状態が近似されます。この最適化では、VQEやQAOAなどの一般的に知られているアルゴリズムを基礎となるルーチンとして使用できます。詳細については、 `Minimum Eigen Optimizer <./3_minimum_eigen_optimizer.ipynb>`__ に関する次のチュートリアルを参照してください。 ``GroverOptimizer`` など、動作が異なる他のアルゴリズムも存在することに注意してください。"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:25
msgid "To map a problem to the correct input format, the optimization module of Qiskit offers a variety of converters. In this tutorial we’re providing an overview on this functionality. Currently, Qiskit contains the following converters. - ``InequalityToEquality``: converts inequality constraints into equality constraints with additional slack variables. - ``IntegerToBinary``: converts integer variables into binary variables and corresponding coefficients. - ``LinearEqualityToPenalty``: convert equality constraints into additional terms of the object function. - ``QuadraticProgramToQubo``: a wrapper for ``InequalityToEquality``, ``IntegerToBinary``, and ``LinearEqualityToPenalty`` for convenience."
msgstr "問題を正しい入力形式にマッピングするために、Qiskit の最適化モジュールは様々なコンバータを提供します。このチュートリアルでは、この機能の概要を説明します。現在、Qiskit には以下のコンバータが含まれています。 - ``InequalityToEquality``: 不等式制約を追加のスラック 変数を使って等式制約に変換します。 - ``IntegerToBinary``: 整数変数をバイナリ変数と対応する係数に変換します。 - ``LinearEqualityToPenalty``: 等式制約をオブジェクト関数の追加条件に変換します。 - ``QuadraticProgramToQubo``: ``InqualityToQuality`` 、 ``IntegerToBinary`` 、 ``LinearEnqualityToPenalty`` のための便宜的なラッパーです。"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:38
msgid "InequalityToEquality"
msgstr "InequalityToEquality"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:40
msgid "``InequalityToEqualityConverter`` converts inequality constraints into equality constraints with additional slack variables to remove inequality constraints from ``QuadraticProgram``. The upper bounds and the lower bounds of slack variables will be calculated from the difference between the left sides and the right sides of constraints. Signs of slack variables depend on symbols in constraints such as :math:`\\leq` and :math:`\\geq`."
msgstr "``InequalityToEqualityConverter`` は、不等式制約を追加のスラック変数を使用して等式制約に変換し、 ``QuadraticProgram`` から不等式制約を削除します。スラック変数の上限と下限は、制約の左側と右側の差から計算されます。スラック変数の符号は、 :math:`\\leq` や :math:`\\geq` などの制約内の記号に依存します。"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:42
msgid "The following is an example of a maximization problem with two inequality constraints. Variable :math:`x` and :math:`y` are binary variables and variable :math:`z` is an integer variable."
msgstr "以下は、2つの不等式制約がある最大化問題の例です。 変数 :math:`x` と :math:`y` はバイナリ変数であり、変数 :math:`z` は整数変数です。"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:56
msgid "With ``QuadraticProgram``, an optimization model of the problem is written as follows."
msgstr "``QuadraticProgram`` では、問題の最適化モデルを次のように記述します。"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:156
msgid "Call ``convert`` method of ``InequalityToEquality`` to convert."
msgstr "変換するには ``IntegerToBinary`` の ``convert`` メソッドを呼び出します。"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:254
msgid "After converting, the formulation of the problem looks like as the follows. As we can see, the inequality constraints are replaced with equality constraints with additional integer slack variables, :math:`xyz\\_leg\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack`."
msgstr ""

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:256
msgid "Let us explain how the conversion works. For example, the lower bound of the left side of the first constraint is :math:`0` which is the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Thus, the upperbound of the additional integer variable must be :math:`5` to be able to satisfy even the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Note that we cut off the part after the decimla point in the converted formulation since the left side of the first constraint in the original formulation can be only integer values. For the second constraint, basically we apply the same approach. However, the symol in the second constraint is :math:`\\geq`, so we add minus before :math:`xyz\\_geq\\text{@}int\\_slack` to be able to satisfy even the case of :math:`x=1, y=1`, and :math:`z=7`."
msgstr ""

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:283
msgid "IntegerToBinary"
msgstr "IntegerToBinary"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:294
msgid "``IntegerToBinary`` converts integer variables into binary variables and coefficients to remove integer variables from ``QuadraticProgram``. For converting, bounded-coefficient encoding proposed in `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Eq. (5)) is used. For more detail of the encoding method, please see the paper."
msgstr ""

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:296
msgid "We use the output of ``InequalityToEquality`` as starting point. Variable :math:`x` and :math:`y` are binary variables, while the variable :math:`z` and the slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` are integer variables. We print the problem again for reference."
msgstr ""

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:382
msgid "Call ``convert`` method of ``IntegerToBinary`` to convert."
msgstr "変換するには ``IntegerToBinary`` の ``convert`` メソッドを呼び出します。"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:492
msgid "After converting, integer variables :math:`z` is replaced with three binary variables :math:`z\\text{@}0`, :math:`z\\text{@}1` and :math:`z\\text{@}2` with coefficients 1, 2 and 4, respectively as the above. The slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` that were introduced by ``InequalityToEquality`` are also both replaced with three binary variables with coefficients 1, 2, 2, and 1, 2, 3, respectively."
msgstr ""

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:494
msgid "Note: Essentially the coefficients mean that the sum of these binary variables with coefficients can be the sum of a subset of :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, and :math:`\\{1, 2, 3\\}` to represent that acceptable values :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}`, and :math:`\\{0, \\ldots, 6\\}`, which respects the lower bound and the upper bound of original integer variables correctly."
msgstr ""

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:496
msgid "``IntegerToBinary`` also provides ``interpret`` method that is the functionality to translate a given binary result back to the original integer representation."
msgstr ""

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:508
msgid "LinearEqualityToPenalty"
msgstr ""

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:519
msgid "``LinearEqualityToPenalty`` converts linear equality constraints into additional quadratic penalty terms of the objective function to map ``QuadraticProgram`` to an unconstrained form. An input to the converter has to be a ``QuadraticProgram`` with only linear equality constraints. Those equality constraints, e.g. \\ :math:`\\sum_i a_i x_i = b` where :math:`a_i` and :math:`b` are numbers and :math:`x_i` is a variable, will be added to the objective function in the form of :math:`M(b - \\sum_i a_i x_i)^2` where :math:`M` is a large number as penalty factor. By default :math:`M= 1e5`. The sign of the term depends on whether the problem type is a maximization or minimization."
msgstr ""

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:522
msgid "We use the output of ``IntegerToBinary`` as starting point, where all variables are binary variables and all inequality constraints have been mapped to equality constraints. We print the problem again for reference."
msgstr ""

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:620
msgid "Call ``convert`` method of ``LinearEqualityToPenalty`` to convert."
msgstr ""

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:774
msgid "After converting, the equality constraints are added to the objective function as additional terms with the default penalty factor :math:`M=1e5`. The resulting problem is now a QUBO and compatible with many quantum optimization algorithms such as VQE, QAOA and so on."
msgstr ""

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:785
msgid "This gives the same result as before."
msgstr ""

