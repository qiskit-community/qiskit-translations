msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-22 20:51+0000\n"
"PO-Revision-Date: 2021-04-22 21:18\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/4_grover_optimizer.po\n"
"X-Crowdin-File-ID: 9154\n"
"Language: ja_JP\n"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:10
msgid "This page was generated from `tutorials/optimization/4_grover_optimizer.ipynb`__."
msgstr "このページは `tutorials/optimization/4_grover_optimizer.ipynb`__ から生成されました。"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/optimization/4_grover_optimizer.ipynb>`_."
msgstr "`IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/optimization/4_grover_optimizer.ipynb>`_ でインタラクティブに実行します。"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:9
msgid "Grover Optimizer"
msgstr "グローバーオプティマイザー"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:21
msgid "Introduction"
msgstr "はじめに"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:23
msgid "Grover Adaptive Search (GAS) has been explored as a possible solution for combinatorial optimization problems, alongside variational algorithms such as Variational Quantum Eigensolver (VQE) and Quantum Approximate Optimization Algorithm (QAOA). The algorithm iteratively applies Grover Search to find the optimum value of an objective function, by using the best-known value from the previous run as a threshold. The adaptive oracle used in GAS recognizes all values above or below the current threshold (for max and min respectively), decreasing the size of the search space every iteration the threshold is updated, until an optimum is found."
msgstr "グローバー適応探索（Grover Adaptive Search、GAS）は、変分量子固有ソルバー（Variational Quantum Eigensolver、VQE）や量子近似最適化アルゴリズム（Quantum Approximate Optimization Algorithm、QAOA）などの変分アルゴリズムとともに、組み合わせ最適化問題における可能な解決策として検討されてきました。アルゴリズムは、グローバー検索を繰り返し適用し、直前の実行までで最もよいと思われる値をしきい値として使用して、目的関数の最適値を見つけます。GASで使用されるアダプティブオラクルは、現在のしきい値より上または下のすべての値（それぞれ最大および最小）を認識し、最適値が見つかるまで、しきい値が更新されるたびに検索スペースのサイズを縮小します。"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:26
msgid "In this notebook we will explore each component of the ``GroverOptimizer``, which utilizes the techniques described in GAS, by minimizing a Quadratic Unconstrained Binary Optimization (QUBO) problem, as described in [1]"
msgstr "このノートブックでは、 [1] に記載されているように、制約なし二値変数二次計画問題(QUBO)を最小化することで、GASで記述されている手法を活用した ``GroverOptimizer`` の各コンポーネントを探索します。"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:29
msgid "References"
msgstr "参考文献"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:31
msgid "[1] `A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization, arXiv preprint arXiv:1912.04088 (2019). <https://arxiv.org/abs/1912.04088>`__"
msgstr "[1] `A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization, arXiv preprint arXiv:1912.04088 (2019). <https://arxiv.org/abs/1912.04088>`__"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:43
msgid "Grover Adaptive Search"
msgstr "グローバー適応探索"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:45
msgid "Grover Search, the core element of GAS, needs three ingredients:"
msgstr "GASのコア要素であるグローバー探索には、3つの材料が必要です:"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:47
msgid "A state preparation operator :math:`A` to construct a superposition of all states in the search space."
msgstr "探索スペース内の全ての状態を重ね合わせるための状態準備演算子 :math:`A` 。"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:49
msgid "An oracle operator :math:`O`, that recognizes the states of interest and multiplies their amplitudes by -1."
msgstr "関心のある状態を認識し、その振幅を-1で乗算するオラクル演算子 :math:`O` 。"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:51
msgid "The Grover diffusion operator :math:`D`, that multiplies the amplitude of the :math:`|0\\rangle_n` state by -1."
msgstr ":math:`|0\\rangle_n` 状態の振幅に -1 を掛けるグローバー拡散演算子 :math:`D` 。"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:53
msgid "While implementations of GAS vary around the specific use case, the general framework still loosely follows the steps described below."
msgstr "GASの実装は特定のユースケースによって異なりますが、一般的なフレームワークは、以下で説明する手順に大まかに従います。"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:59
msgid "|ded6c253f3b847a09cd85979c100cc37|"
msgstr ""

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:65
msgid "``GroverOptimizer`` uses ``QuadraticProgramToNegativeValueOracle`` to construct :math:`A_y` such that it prepares a :math:`n`-qubit register to represent the equal superposition of all :math:`|x\\rangle_n` and a :math:`m`-qubit register to (approximately) represent the corresponding :math:`|Q(x)-y\\rangle_m`. Then, all states with :math:`(Q(x) - y)` negative should be flagged by :math:`O_y`. Note that in the implementation discussed, the oracle operator is actually independent of :math:`y`, but this is not a requirement. For clarity, we will refer to the oracle as :math:`O` when the oracle is independent of :math:`y`."
msgstr "``GroverOptimizer`` は ``QuadraticProgramToNegativeValueOracle`` を使用して :math:`A_y` を構築し、 :math:`n`-qubitレジスタを準備し、 :math:`|x\\rangle_n` と :math:`m`-qubitレジスタは対応する :math:`|Q(x)-y\\rangle_m` を表します。 次に、 :math:`(Q(x) - y)` 負のすべての状態に :math:`O_y` のフラグが付けられます。 実装では、オラクル演算子は :math:`y` から独立していますが、これは必須ではありません。 明確にするために、オラクルが :math:`y` から独立している場合は、オラクルを :math:`O` として参照します。"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:68
msgid "Put formally, ``QuadraticProgramToNegativeValueOracle`` constructs an :math:`A_y` and :math:`O` such that:"
msgstr "正式に言えば、 ``QuadraticProgramToNegativeValueOracle`` は、次のような :math:`A_y` と :math:`O` を構成します。"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:74
msgid "|26cf802cff1e45f1aebd89870eccf323|"
msgstr ""

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:80
msgid "where :math:`|x\\rangle` is the binary encoding of the integer :math:`x`."
msgstr "ここで、 :math:`|x\\rangle` は整数 :math:`x` のバイナリーエンコーディングです。"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:82
msgid "At each iteration in which the threshold :math:`y` is updated, we adapt :math:`A_y` such that the function values are shifted up or down (for minimum and maximum respectively) by :math:`y`. For example, in the context of finding the minimum, as the value of :math:`y` decreases, the search space (negative values) also decreases, until only the minimum value remains. A concrete example will be explored in the next section."
msgstr "閾値 :math:`y` が更新される毎に、関数値が（それぞれ最小値と最大値に対して）上または下に :math:`y` だけシフトするように  :math:`A_y` を適応させます。 たとえば、最小値を見つけるコンテキストでは、:math:`y` の値が減少すると、最小値のみが残るまで、探索空間（負の値）も減少します。 具体的な例については、次のセクションで説明します。"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:99
msgid "Find the Minimum of a QUBO Problem using GroverOptimizer"
msgstr "GroverOptimizerを使用してQUBO問題の最小値を見つける"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:101
msgid "The following is a toy example of a minimization problem."
msgstr "以下は最小化問題のおもちゃの例です。"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:103
msgid ":nbsphinx-math:`\\begin{eqnarray} \\min_{x \\in \\{0, 1\\}^3} -2x_1x_3 - x_2x_3 - 1x_1 + 2x_2 - 3x_3. \\end{eqnarray}`"
msgstr ""

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:107
msgid "For our initial steps, we create a docplex model that defines the problem above, and then use the ``from_docplex()`` function to convert the model to a ``QuadraticProgram``, which can be used to represent a QUBO in Qiskit Optimization."
msgstr "最初のステップでは、上記の問題を定義するdocplexモデルを作成します。 そして、``from_docplex()`` 関数を使用してモデルを ``QuadraticProgram`` に変換し、Qiskit Optimization で QUBO を表すために使用できます。"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:202
msgid "Next, we create a ``GroverOptimizer`` that uses 6 qubits to encode the value, and will terminate after there have been 10 iterations of GAS without progress (i.e. the value of :math:`y` does not change). The ``solve()`` function takes the ``QuadraticProgram`` we created earlier, and returns a results object that contains information about the run."
msgstr "次に、6 qubit で値をエンコードする ``GroverOptimizer`` を作成します。 そして、進行なしでGASが10回繰り返された後に終了します (つまり :math:`y` の値は変化しません) 。 ``solve()`` 関数は先ほど作成した ``QuadraticProgram`` を受け取り、実行に関する情報を含む結果オブジェクトを返します。"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:247
msgid "This results in the optimal solution :math:`x_0=1`, :math:`x_1=0`, :math:`x_2=1` and the optimal objective value of :math:`-6` (most of the time, since it is a randomized algorithm). In the following, a custom visualization of the quantum state shows a possible run of ``GroverOptimizer`` applied to this QUBO."
msgstr "この結果、最適解 :math:`x_0=1` 、 :math:`x_1=0` 、:math:`x_2=1` および、 :math:`-6` の最適な目的値となる（ほとんどの時間は、ランダム化されたアルゴリズムによる）。 以下の例では、量子状態のカスタム可視化は、このQUBOに適用される ``GroverOptimizer`` の実行可能性が示されています。"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:253
msgid "|b00d883cd82b4a8fadae3d29c365075d|"
msgstr ""

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:259
msgid "Each graph shows a single iteration of GAS, with the current values of :math:`r` (= iteration counter) and :math:`y` (= threshold/offset) shown in the title. The X-axis displays the integer equivalent of the input (e.g. ‘101’ :math:`\\rightarrow` 5), and the Y-axis shows the possible function values. As there are 3 binary variables, there are :math:`2^3=8` possible solutions, which are shown in each graph. The color intensity indicates the probability of measuring a certain result (with bright intensity being the highest), while the actual color indicates the corresponding phase (see phase color-wheel below). Note that as :math:`y` decreases, we shift all of the values up by that amount, meaning there are fewer and fewer negative values in the distribution, until only one remains (the minimum)."
msgstr "各グラフはGASの単一の反復を示しており、 :math:`r` (= 反復カウンター) と :math:`y` (= 閾値 / オフセット) の現在の値がタイトルに示されています。X軸は入力に相当する整数 (例: '101' :math:`\\rightarrow` 5) を表示し、Y軸は可能な関数値を表示します。3つのバイナリ変数があるため、 :math:`2^3=8` の可能な解決策があり、各グラフに示されています。色の強度は特定の結果を測定する確率を示し (明るい強度が最も高い) 、実際の色は対応するフェーズを示します (以下のフェーズのカラーホイールを参照) 。 :math:`y` が減少すると、すべての値がその量だけ上にシフトすることに注意してください。つまり、1つだけが残る (最小) まで、分布内の負の値はますます少なくなります。"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:266
msgid "|f5aed61f2845430796e7df54c080b9f1|"
msgstr ""

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:287
msgid "Check that GroverOptimizer finds the correct value"
msgstr "GroverOptimizerが正しい値を見つけることの確認"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:289
msgid "We can verify that the algorithm is working correctly using the ``MinimumEigenOptimizer`` in Qiskit."
msgstr "Qiskitの ``MinimumEigenOptimizer`` を使用してアルゴリズムが正しく動作していることを確認できます。"

