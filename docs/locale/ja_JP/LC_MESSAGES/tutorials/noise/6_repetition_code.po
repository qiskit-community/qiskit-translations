msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 17:09+0000\n"
"PO-Revision-Date: 2021-11-12 15:23\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/6_repetition_code.po\n"
"X-Crowdin-File-ID: 9142\n"
"Language: ja_JP\n"

#: ../../tutorials/noise/6_repetition_code.ipynb:10
msgid "This page was generated from `tutorials/noise/6_repetition_code.ipynb`__."
msgstr "このページは `tutorials/noise/6_repetition_code.ipynb`__ から生成されました。"

#: ../../tutorials/noise/6_repetition_code.ipynb:9
msgid "Repetition Codes"
msgstr "反復符号"

#: ../../tutorials/noise/6_repetition_code.ipynb:21
msgid "Introduction"
msgstr "はじめに"

#: ../../tutorials/noise/6_repetition_code.ipynb:23
msgid "In quantum error correction we take many noisy qubits (which we call *physical qubits*) and use them to store a smaller number of *logical qubits*. The error correction procedure is designed to detect and correct for the effects of noise. This makes the logical qubits much less noisy and more reliable than the physical ones from which they are built."
msgstr "量子エラー訂正では、ノイズの多い量子ビット( *物理量子ビット* と呼ばれる)を多数取り、それらを使って、より少ない数の *論理量子ビット* を格納します。 エラー訂正手順は、ノイズの影響を検出して修正するように設計されています。 これにより、論理量子ビットは、元の物理量子ビットよりもはるかにノイズが少なく、信頼性が高くなります。"

#: ../../tutorials/noise/6_repetition_code.ipynb:25
msgid "The repetition code is a simple example of quantum error correction, in which a logical *bit* is stored rather than a logical *qubit*. A given instance of the repetition code is defined by two numbers, which we call :math:`d` and :math:`T`."
msgstr "反復符号は量子エラー訂正の単純な例であり、論理的な *量子ビット* ではなく、論理的な *ビット* が格納されます。反復符号のインスタンスは、:math:`d` および :math:`T` と呼んでいる2つの数値で定義されています。"

#: ../../tutorials/noise/6_repetition_code.ipynb:27
msgid "The :math:`d` parameter determines how many physical qubits are used. The actual information about the logical bit is stored in :math:`d` qubits (which we’ll call *code qubits*). The encoding is done in a very simple way: to encode a ``0``, all these qubits are set in the state :math:`|0\\rangle`, to encode a ``1`` they are set to :math:`|1\\rangle`. To readout the value, you can just look at any qubit. To read it out in a way that protects against single qubit errors, you can read out all the qubits and take a majority vote."
msgstr "パラメータ :math:`d` は、どれくらいの物理量子ビットが使われるかを決定します。論理ビットに関する実際の情報は、:math:`d` 量子ビット (これを符号量子ビットと呼びます) に格納されます。エンコーディングは非常に簡単な方法で行われます：``0`` をエンコードするには、これらすべての量子ビットを状態 :math:`|0\\rangle` に設定し、``1`` をエンコードするには、それらを :math:`|1\\rangle` に設定します。値を読み取るには、任意の量子ビットを見るだけです。単一量子ビットエラーから保護する方法でそれを読み取るには、すべての量子ビットを読み取って多数決を取ることができます。"

#: ../../tutorials/noise/6_repetition_code.ipynb:30
msgid "It is not only at readout that we can extract useful information that will help us correct errors. We can also extract information while the logical bit sits idle, or even while it is involved in computation."
msgstr "エラーの修正に役立つ有用な情報を抽出できるのは、読み出し時だけではありません。 また、論理ビットがアイドル状態のときや、計算に関与しているときでも、情報を抽出できます。"

#: ../../tutorials/noise/6_repetition_code.ipynb:32
msgid "Since this is an exercise in quantum error correction, we will do this in a way that would also work for logical *qubits*. Specifically, our method of extracting information about errors must not extract any information regarding the stored logical information. In the quantum case, this is required so that we do not disturb superposition states of the stored qubits."
msgstr "これは量子エラー訂正の練習なので、論理 *量子ビット* でも動作するような方法で行います。具体的には、エラーに関する情報の抽出方法において、保存された論理情報を抽出しないようにします。量子の場合は、格納されている量子ビットの重ね合わせ状態を妨げないようにするする必要があります。"

#: ../../tutorials/noise/6_repetition_code.ipynb:34
msgid "We will extract information over :math:`T` rounds of *syndrome measurements*. For the repetition code, these are based on the fact that all code qubits should be in the same state (all :math:`|0\\rangle` or all :math:`|1\\rangle`). Any departure from this is therefore a signature of error. Specifically, we imagine our :math:`d` code qubits sitting along a line. We will then perform a measurement on each pair of neighboring code qubits. This will tell us whether they are the same or different, without extracting any information on what their values are."
msgstr ":math:`T` ラウンドの *シンドローム測定* に関する情報を抽出します。反復符号の場合、これらはすべての符号量子ビットが同じ状態であるべきという事実に基づいています (すべて :math:`|0\\rangle` またはすべて :math:`|1\\rangle`)。したがって、ここからの逸脱はエラーのサインです。具体的には、私たちは :math:`d` 符号量子ビットがラインに沿って留まっていることを想像します。次に、隣接する符号量子ビットの各ペアの測定を行います。これにより、これらの値が何であるかという情報を抽出せずに、それらの値が同じか異なるかがわかります。"

#: ../../tutorials/noise/6_repetition_code.ipynb:37
msgid "The implementation of these measurements requires :math:`d-1` additional qubits, which we will call *link qubits* for the repetition code. By performing two CNOTs between the pair of code qubits and a corresponding link qubit, the required information (and only the required information) is placed on the link qubit and can then be measured."
msgstr "これらの測定を実装するには、:math:`d-1` の追加量子ビットが必要であり、これを反復符号における *リンク量子ビット* と呼んでいます。符号量子ビットと対応するリンク量子ビットのペアの間で、2つのCNOTを作動させることにより、必要な情報（必要な情報のみ）がリンク量子ビットに配置され、測定することができるようになります。"

#: ../../tutorials/noise/6_repetition_code.ipynb:95
msgid "Here we provide tools for creating and testing repetition codes. The first thing we need to do is import them."
msgstr "ここでは、反復符号を作成およびテストするためのツールを提供します。はじめに、これらをインポートする必要があります。"

#: ../../tutorials/noise/6_repetition_code.ipynb:119
msgid "Creating a repetition code"
msgstr "反復符号を作成する"

#: ../../tutorials/noise/6_repetition_code.ipynb:121
msgid "The ``repetition_code`` class creates a code for given values of :math:`d` and :math:`T`."
msgstr "``repetition_code`` クラスは、指定された :math:`d` と :math:`T` の値のコードを作成します。"

#: ../../tutorials/noise/6_repetition_code.ipynb:144
msgid "With this we can inspect various properties of the code, such as the names of the qubit registers used for the code and ancilla qubits."
msgstr "これにより、コードや補助量子ビットに使用される量子ビットレジスタの名前など、コードのさまざまなプロパティを調べることができます。"

#: ../../tutorials/noise/6_repetition_code.ipynb:185
msgid "These registers are also attributes of the ``repetition_code`` object."
msgstr "これらのレジスタは ``repetition_code`` オブジェクトの属性でもあります。"

#: ../../tutorials/noise/6_repetition_code.ipynb:226
msgid "You can also access the quantum circuits that implement the code. Two of these are produced: one for each of the two possible logical bit values."
msgstr "コードで実装する量子回路にもアクセスできます。これらのうち2つを生成します:取り得る2つの論理ビット値から、それぞれ1つずつです。"

#: ../../tutorials/noise/6_repetition_code.ipynb:479
msgid "Building a custom repetition code"
msgstr "カスタム反復符号を構築する"

#: ../../tutorials/noise/6_repetition_code.ipynb:481
msgid "You can also implement measurement rounds and logical ``X`` gates yourself. For example, let’s set up a code with no syndrome measurement rounds."
msgstr "また、測定ラウンドや論理 ``X`` ゲートを自分で実装することもできます。例として、シンドローム測定ラウンドなしでコードを設定してみましょう。"

#: ../../tutorials/noise/6_repetition_code.ipynb:502
msgid "This does nothing but set up two circuits for the two logical encoded states. There are no syndrome measurement rounds, and no final readout."
msgstr "これは、2つの論理的にエンコードされた状態に2つの回路を設定するだけです。シンドローム測定ラウンドはなく、最終的な読み出しもありません。"

#: ../../tutorials/noise/6_repetition_code.ipynb:601
msgid "We can add a round using the ``syndrome_measurement()`` method."
msgstr "``syndrome_measurement()`` メソッドを使うことでラウンドを追加できます。"

#: ../../tutorials/noise/6_repetition_code.ipynb:712
msgid "A logical ``X`` operation can be added using the ``x()`` method."
msgstr "論理 ``X`` 操作は ``x()`` メソッドを使用して追加できます。"

#: ../../tutorials/noise/6_repetition_code.ipynb:823
msgid "This also has a ``logs`` kwarg, which is a list of the circuits for which ``X`` is applied. This is ``['0','1']`` by default."
msgstr "これは ``logs`` kwarg を持ち、``X`` が適用される回路のリストです。デフォルトでは ``['0','1']`` です。"

#: ../../tutorials/noise/6_repetition_code.ipynb:834
msgid "Final readout is then done with the ``readout()`` method."
msgstr "最終的な読み出しは ``readout()`` メソッドで行います。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1012
msgid "Running a repetition code"
msgstr "反復符号を実行する"

#: ../../tutorials/noise/6_repetition_code.ipynb:1014
msgid "The code object produces the circuits required for the code. The user can then run them using any method they prefer, allowing full control over compilation, backends, noise models and so on."
msgstr "コードオブジェクトは、コードに必要な回路を生成します。 ユーザーは、任意の方法を使用してそれらを実行し、コンパイル、バックエンド、ノイズモデルなどを完全に制御できます。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1016
msgid "For example, here we run them without noise on the ``qasm_simulator``."
msgstr "例えば、ここでは ``qasm_simulator`` 上でノイズなしで実行します。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1076
msgid "Here the strings from right to left represent the outputs of the syndrome measurement rounds, followed by the final measurement of the code qubits."
msgstr "ここで、右から左への文字列は、シンドローム測定ラウンドの出力を表し、その後に符号量子ビットの最終測定が続きます。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1078
msgid "These results need to be rewritten in a different form in order to be decoded. To do this we can use the ``process_results`` method of the code object."
msgstr "これらの結果は、デコードするために別の形式で書き換える必要があります。 これを行うには、符号オブジェクトの ``process_results`` メソッドを使用します。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1119
msgid "The result is a dictionary whose keys are bit strings that represent outputs of the circuit, and the values represent the number of shots for which this output occurred."
msgstr "結果は、回路の出力を表すビット文字列をキーとする辞書です。 値は、この出力が発生したショットの数を表します。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1121
msgid "The strings are not the direct output from the circuits. They have been processed to take the form that helps us correct errors. Here’s a short guided tour."
msgstr "文字列は回路からの直接出力ではありません。エラー修正に役立つ形式を取るために処理されています。ここでは、短いガイドツアーが用意されています。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1123
msgid "The ``0 0`` to the far left for the logical ``0`` result, and the ``1 1`` to the far left of the logical ``1``, are the logical readout. Any code qubit could be used for this readout, since they should (without errors) all be equal. So we could have just one result here, for one arbitrarily chosen code qubit. Or we could have :math:`d`, one for each qubit. Instead we have two, from the two qubits at either end of the line. This is because it works best with the decoder (which we’ll use later). In the absence of errors, these two values will always be equal."
msgstr "論理 ``0`` の結果の左端の ``0 0`` 、および論理 ``1`` の左端の ``1 1`` は論理読み出しです。 これらはすべて (エラーがなければ) 等しくなり、読み出しには任意の符号量子ビットを使用できます。したがって、ここでは任意に選択した1つの符号量子ビットに対して1つの結果しか得られません。あるいは、各量子ビットのひとつに :math:`d` を設定することもできます。代わりに、ラインの両端にある2つの量子ビットから2つを得られます。これは、デコーダー (後で使用します) で最適に動作させるためのものです。エラーがない場合、これらの2つの値は常に等しくなります。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1126
msgid "The following ``0000`` is the :math:`d-1` results of the syndrome measurements for the first round.A ``0`` implies that the corresponding pair of qubits where the same, and ``1`` implies different. There are :math:`d-1` results because the line of :math:`d` code qubits has :math:`d-1` possible neighboring pairs. In the absence of errors, they will all be ``0``."
msgstr "次の ``0000`` は、最初のラウンドのシンドローム測定の :math:`d-1` 結果です。 ``0`` は対応する量子ビットのペアが同じであることを意味し、 ``1`` は異なることを意味します。 :math:`d` 符号量子ビットの行に :math:`d-1` の可能な隣接ペアがあるため、 :math:`d-1` の結果があります。エラーがない場合、それらはすべて ``0`` になります。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1128
msgid "The ``0000`` that follows that is the syndrome change between the first and second rounds. It is therefore the bitwise ``OR`` of the syndrome measurement results from the second round with those from the first. In the absence of errors, they will all be ``0``."
msgstr "その後の``0000`` は、第1ラウンドと第2ラウンドの間のシンドロームの変化です。 したがって、最初からのものと2番目のラウンドからのシンドローム測定結果のビット単位の ``OR`` です。 エラーがなければ、それらはすべて ``0`` になります。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1130
msgid "Subsequent blocks follow the same formula, though the last requires some comment. This is not measured using the standard method (with a link qubit). Instead it is calculated from the final readout measurement of all code qubits. Again it is presented as a syndrome change, and will be all ``0`` in the absence of errors. This is the :math:`T+1`-th block of syndrome measurements since, as it is not done in the same way as the others, it is not counted among the :math:`T` syndrome measurement rounds."
msgstr "後続のブロックも同じ式に従いますが、最後のブロックにはコメントが必要です。これは、標準的な方法（リンク量子ビットによる）を使用しても測定されません。代わりに、すべての符号量子ビットの最後の読出測定から計算されます。この場合もシンドロームの変化として表示され、エラーがない場合はすべて``0``になります。これはシンドローム測定の :math:`T+1`番目のブロックで、他の方法と同じようには行われないのは、 :math:`T` シンドローム測定ラウンドには含まれないためです。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1133
msgid "**Example 1:** ``0 0  0110 0000 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``0``. The syndrome shows that (most likely) the middle code qubit was flipped by an error before the first measurement round. This causes it to disagree with both neighboring code qubits for the rest of the circuit. This is shown by the syndrome in the first round, but the blocks for subsequent rounds do not report it as it no longer represents a change. Other sets of errors could also have caused this syndrome, but they would need to be more complex and so presumably less likely."
msgstr "**例 1:** ``0 0110 0000`` は :math:`d=5`、 :math:`T=2`繰り返しコードでエンコードされた ``0`` を表します。 このシンドロームは、最初の測定ラウンドの前に(おそらく)ミドルコード量子ビットがエラーによって反転されたことを示しています。 これにより、回路の残りの部分について、隣接する両方のコード量子ビットと矛盾することになります。 これは、最初のラウンドでシンドロームによって表示されます。 しかし、その後のラウンドのブロックは、もはや変化を表していないので、それを報告しません。 他の一連のエラーもまたこのシンドロームを引き起こしている可能性がありますが、それらはより複雑で、おそらくそれほど起こらないでしょう。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1136
msgid "**Example 2:** ``0 0  0010 0010 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``0``. Here one of the syndrome measurements reported a difference between two code qubits in the first round, leading to a ``1``. The next round did not see the same effect, and so resulted in a ``0``. However, since this disagreed with the previous result for the same syndrome measurement, and since we track syndrome changes, this change results in another ``1``. Subsequent rounds also do not detect anything, but this no longer represents a change and hence results in a ``0`` in the same position. Most likely the measurement result leading to the first ``1`` was an error."
msgstr "**例 2:** ``0 0010 0000`` は :math:`d=5`、エンコードされた ``0`` を含む :math:`T=2`繰り返しコードを表します。 ここで、シンドロームの測定値の1つは、1ラウンド目で2つのコード量子ビット間の差異を報告し、``1``につながりました。 次のラウンドでは同じ効果が得られず、結果として ``0`` になりました。 しかし、これは同じシンドローム測定の前の結果と一致しないため、我々はシンドロームの変化を追跡するので、この変化は別の ``1`` になります。 後続のラウンドでも何も検出されませんが、変更は表示されなくなり、同じ位置に ``0`` になります。 最初の ``1`` に至る測定結果はエラーであった可能性があります。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1139
msgid "**Example 3:** ``0 1  0000 0001 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``1``. A code qubit on the end of the line is flipped before the second round of syndrome measurements. This is detected by only a single syndrome measurement, because it is on the end of the line. For the same reason, it also disturbs one of the logical readouts."
msgstr "**例 3:** ``0 001 0000`` は :math:`d=5`、 :math:`T=2`繰り返しコードで ``1`` を表します。 行末のコード量子ビットは、シンドローム測定の第二ラウンドの前に反転されます。 これは、ラインの終わりにあるので、単一のシンドローム測定で検出されます。 同じ理由で、それはまた論理的な読み出しのいずれかを妨げます。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1141
msgid "Note that in all these examples, a single error causes exactly two characters in the string to change from the value it would have with no errors. This is, in fact, the reason why the logical output consists of both endpoints. It is a property that will be used by the decoder."
msgstr "これらすべての例では、 1つのエラーが発生すると、文字列中の2文字だけが、エラーのない値から変更されます。 これは、実際には、論理出力が両方のエンドポイントで構成されている理由です。デコーダーが使用するプロパティです。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1152
msgid "To see the effects of noise, we need to specify a noise model. For example, let’s set up a simple noise model with gate and measurement errors."
msgstr "ノイズの影響を見るためには、ノイズ・モデルを指定する必要があります。例えば、ゲート誤差と測定誤差のある簡単なノイズ・モデルを設定してみましょう。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1197
msgid "This can then be run to generate noisy results. Let’s make a quick function to do this, and then run it."
msgstr "これを実行することで、ノイズの多い結果を出すことができます。そのための簡単な関数を作成して、実行してみましょう。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1457
msgid "Here the non-noisy results are the most likely. The rest of the samples are distributed among other possibilities with non-trivial syndromes."
msgstr "ノイズ無しの結果は、最も可能性が高いです。サンプルの残りの部分は、非自明なシンドロームの他の可能性に分布しています。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1469
msgid "Decoding a repetition code"
msgstr "反復符号をデコードする"

#: ../../tutorials/noise/6_repetition_code.ipynb:1471
msgid "Noisy results can change the logical value at readout, and so affect our ability to read out the logical qubit. This can be mitigated by looking at the syndrome values. These can tell us whether or not the logical values are most likely to have changed, and so allow us to correct for the errors. The process of analyzing the syndrome to correct for the errors is called ‘decoding’. We do this by building a decoding object for our code."
msgstr "ノイズの多い結果では、読み出し時の論理値が変わりうるので、論理量子ビットの読み出し能力に影響を与えます。この影響は、シンドローム値を見ることで軽減することができます。これらは、論理値が変化した可能性が高いかどうかを教えてくれるので、エラーを修正することができます。エラーを修正するためにシンドロームを分析するプロセスは、デコーディング」と呼ばれています。これを行うには、コード用のデコーディング・オブジェクトを構築します。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1492
msgid "This analyzes the code by seeing how different kinds of error change the output. With this information, along with a decoding algorithm, we can determine what the logical value is most likely to have been."
msgstr "これは、エラーの種類によって出力がどのように変化するかを見ることによってコードを分析します。 この情報と、デコードアルゴリズムを組み合わせることで、論理値が何であった可能性が最も高いのかを判断できます。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1494
msgid "For example, let’s use the ‘matching’ algorithm to decode, which is based on minimum weight perfect matching. This takes specific output strings as input. We’ll give it the simple example string ``'1 0  001 100 100'``, for a logical ``1`` that has suffered two errors."
msgstr "例えば、最小重みの完全一致に基づいた「マッチング」アルゴリズムを使ってデコードしてみましょう。このアルゴリズムは特定の出力文字列を入力として受け取ります。ここでは単純な文字列 ``'1 0 001 100 100'`` の例を示します。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1535
msgid "The output is what the logical part should have been. As you can see, the decoder correctly determined that the readout should have been of a logical ``1``."
msgstr "出力は論理的な部分が何であるべきかである。 ご覧のとおり、デコーダは読み出しが論理的な ``1`` であるべきだと正しく判断しました。"

#: ../../tutorials/noise/6_repetition_code.ipynb:1546
msgid "When we take many samples, we can determine the probability with which the decoder is incorrect. This should decrease exponentially as the code size is increased, since the configurations of noise that fool the decoder become less likely. The probability of a logical error is calculated using the ``logical_prob()`` method. This runs matching by default, but other algorithms can be specified by the ``algorithm`` kwarg."
msgstr "多くのサンプルを採取すると、デコーダが正しくない確率を特定することができます。 これは、デコーダをだますノイズの構成が低くなるため、コードサイズが大きくなるにつれて指数関数的に減少するはずです。 論理エラーの確率は、``logical_prob()`` メソッドを使用して計算されます。 これはデフォルトでマッチングされますが、他のアルゴリズムは ``algorithm`` kwarg で指定できます。"

