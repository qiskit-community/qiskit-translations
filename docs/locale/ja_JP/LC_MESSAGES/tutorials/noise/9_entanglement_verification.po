msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-05 21:02+0000\n"
"PO-Revision-Date: 2022-02-10 16:59\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/9_entanglement_verification.po\n"
"X-Crowdin-File-ID: 9380\n"
"Language: ja_JP\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:10
msgid "This page was generated from `tutorials/noise/9_entanglement_verification.ipynb`__."
msgstr "当ページは `tutorials/noise/9_entanglement_verification.ipynb`__ から生成されました。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:9
msgid "Entanglement Verification"
msgstr "エンタングルメント検証"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:12
msgid "Introduction to the GHZ state"
msgstr "GHZ 状態の概要"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:14
msgid "**The Greenberger-Horne-Zeilinger (GHZ)** State is a :math:`n`-qubit entangled state best defined by the following state vector:"
msgstr "**Greenberger-Horne-Zeilinger (GHZ)** 状態は、次の状態ベクトルで定義された :math:`n`-qubit のエンタングル状態です。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:16
msgid "|{\\rm GHZ} \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}} , n > 2\n\n"
msgstr "|{\\rm GHZ} \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}} , n > 2\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:18
msgid "Characterization of the GHZ state is very useful in assessing multi-qubit interactions, whose robustness is key to developing large scale quantum computers."
msgstr "GHZ状態の特性は、複数量子ビットの相互作用を評価するのにとても役立ちます。そして、その堅牢性は大規模な量子コンピュータの開発での鍵となります。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:21
msgid "Characterizing a quantum state"
msgstr "量子状態の特徴"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:23
msgid "Any mixed quantum state can be identified by a density matrix, defined as :math:`\\rho = \\sum_{i} p_i |\\psi_{i} \\rangle \\langle \\psi_{i}|`, where :math:`|\\psi_{i} \\rangle` are the pure quantum states forming the mixture and :math:`0 < p_i \\le 1`, :math:`\\sum_{i} p_i = 1` are the classical probabilities to be in state :math:`|\\psi_{i} \\rangle`. We denote the pure density matrix of an ideal GHZ State by :math:`\\rho_{p} \\equiv |{\\rm GHZ} \\rangle \\langle {\\rm GHZ}|`. We want to see how close this matrix is to the density matrix of a GHZ State as produced in an experiment, :math:`\\rho_{T}`. One method to quantify this similarity is to calculate the fidelity between the states, :math:`F(\\rho_{p},\\rho_{T})`"
msgstr "任意の混合量子状態は、 :math:`\\rho = \\sum_{i} p_i |\\psi_{i} \\rangle \\langle \\psi_{i}|` として定義された密度行列で識別できます。このとき :math:`|\\psi_{i} \\rangle` は混合状態を形成する純粋状態を表し、 :math:`0 < p_i \\le 1`, :math:`\\sum_{i} p_i = 1` は :math:`|\\psi_{i} \\rangle` の状態をとる古典の確率を示しています。理想的なGHZ状態の純粋密度行列を :math:`\\rho_{p} \\equiv |{\\rm GHZ} \\rangle \\langle {\\rm GHZ}|` で表します。この行列が実験で生成されたGHZ状態の密度行列 :math:`\\rho_{T}` にどれだけ近いかを見るために、この類似性を定量化する一つの方法として、状態間の忠実度 :math:`F(\\rho_{p},\\rho_{T})` を計算します。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:26
msgid "F = \\Big[ Tr \\sqrt{\\sqrt{\\rho_{p}}\\rho_{T}\\sqrt{\\rho_{p}}} \\Big] ^{2}\n\n"
msgstr "F = \\Big[ Tr \\sqrt{\\sqrt{\\rho_{p}}\\rho_{T}\\sqrt{\\rho_{p}}} \\Big] ^{2}\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:28
msgid "The aim of this tutorial is two-fold: we will explore ways in which we can characterize the GHZ state, and ways in which we can use Ignis’ error mitigation tools to increase readout fidelity, regardless of characterization method"
msgstr "このチュートリアルの目的は2つあります。 GHZ 状態を特徴付ける方法と、特性評価方法に関係なく、 Ignis の誤り軽減ツールを使用して読み出しの忠実度を向上させる方法を探ります。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:30
msgid "Before we go further, let us import everything we will need from basic Qiskit:"
msgstr "先に進む前に、基本的なQiskitから必要なものをすべてインポートしてみましょう。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:62
msgid "The next two functions are from ignis. The first is for the general error mitigation technique, and the second is specifically for quantum tomography"
msgstr "次の2つの機能は、Ignisからのものです。1つ目は一般的な誤り軽減手法、2つ目は量子トモグラフィー用です。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:85
msgid "The following import from the ``entanglement`` package contains information needed to create, parallelize and analyze GHZ State circuits"
msgstr "次の、``entanglement`` パッケージからのインポートには、GHZ状態回路の作成、並列化、分析に必要な情報が含まれています。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:109
msgid "Preparing a GHZ State"
msgstr "GHZ状態の準備"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:111
msgid "Let us first go over how to prepare a GHZ State:"
msgstr "まず、GHZ状態を準備する方法について説明します。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:113
msgid "Say we have a system of :math:`n` qubits, all prepared in the :math:`|0\\rangle` state:"
msgstr "すべて :math:`|0\\rangle` 状態で準備された :math:`n` 量子ビットのシステムがあるとします。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:115
msgid "|\\psi \\rangle = |00...0\\rangle\n\n"
msgstr "|\\psi \\rangle = |00...0\\rangle\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:117
msgid "We apply a Hadamard gate to the first qubit: :math:`|0\\rangle \\longrightarrow \\frac{1}{\\sqrt{2}}(|0\\rangle + |1\\rangle)`. Our state now looks like:"
msgstr "最初の量子ビットにアダマールゲートを適用します：  :math:`|0\\rangle \\longrightarrow \\frac{1}{\\sqrt{2}}(|0\\rangle + |1\\rangle)` 。状態は次のようになります。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:119
msgid "|\\psi \\rangle = \\frac{|00...0\\rangle + |10...0\\rangle}{\\sqrt{2}}\n\n"
msgstr "|\\psi \\rangle = \\frac{|00...0\\rangle + |10...0\\rangle}{\\sqrt{2}}\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:121
msgid "Applying on this state a sequence of :math:`n-1` CNOT gate between the :math:`n^{th}` and :math:`(n+1)^{th}` qubits for :math:`n = 0 \\ldots n-1` leaves the :math:`n+1` qubit at :math:`|0\\rangle` if the :math:`n^{th}` is in :math:`|0\\rangle`, and at :math:`|1\\rangle` if the :math:`n^{th}` is in :math:`|1\\rangle`, thus creating the GHZ State:"
msgstr "この状態に、 :math:`n = 0 \\ldots n-1` の :math:`n` 番目と :math:`(n+1)` 番目の量子ビットの間に :math:`n-1` CNOTゲートのシーケンスを適用すると、 :math:`n` 番目が :math:`|0\\rangle` の場合は :math:`n+1` 番目の量子ビットは :math:`|0\\rangle` のまま、 :math:`n` 番目が :math:`|1\\rangle` の場合は :math:`|1\\rangle` になるGHZ状態が作成されます。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:123
msgid "|GHZ \\rangle = \\frac{|00...0\\rangle + |11...1\\rangle}{\\sqrt{2}} \\equiv \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}}\n\n"
msgstr "|GHZ \\rangle = \\frac{|00...0\\rangle + |11...1\\rangle}{\\sqrt{2}} \\equiv \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}}\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:125
msgid "The following function creates this “linear” circuit that can measure the GHZ state:"
msgstr "次の関数は、GHZ状態を測定できる “線形” 回路を生成します。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:209
msgid "Characterization, Part I"
msgstr "特性、Part I"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:212
msgid "Multiple Quantum Coherence (MQC)"
msgstr "マルチ量子コヒーレンス（Multiple Quantum Coherence、MQC）"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:214
msgid "Multiple Quantum Coherence (MQC) works by taking the preliminary preparation of an :math:`n` qubit GHZ State, and rotating each of the qubit states around the z axis by a phase :math:`\\phi`. After that, we apply a X gate, i.e., a :math:`\\pi` pulse around the x axis. Then, we apply the inverse of the operations we originally applied to get the GHZ state. In an ideal situation the final state is :math:`|\\psi \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + e^{i n \\phi}|1 \\rangle ^{\\otimes n}}{\\sqrt{2}}`. We can ideally observe the phase collected by projecting :math:`|\\psi \\rangle` onto the state :math:`|0 \\rangle ^{\\otimes n}`. This technique is reminiscent of an echo sequence, and has been shown to substantially improve the fidelity during readout."
msgstr "多重量子コヒーレンス(MQC)は、 :math:`n` 量子ビットGHZ状態の事前準備を行い、各量子ビット状態をz軸周りに位相 :math:`\\phi` で回転させることで動作します。その後、Xゲート、すなわちX軸周りに :math:`\\pi` パルスを適用します。その後、最初に適用した演算の逆を適用して、GHZ状態を得ます。理想的な状態では終状態は次のようになります。 :math:`|\\psi \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + e^{i n \\phi}|1 \\rangle ^{\\otimes n}}{\\sqrt{2}}` 理想的には :math:`|\\psi \\rangle` を :math:`|0 \\rangle ^{\\otimes n}` 状態に射影して、位相を観測することができます。この技術は、エコーシーケンスを連想させるもので、読み出し時の忠実度を大幅に向上させることが示されています。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:217
msgid "The function below creates a linear MQC circuit. As with every circuit from here on, you can change the ``full_measurement`` argument to toggle between full measurement of all qubits or measurement of only the control qubit. Full measurement yields the most accurate results, but for more than 7 qubits, it is recommended to set it to false, and observe only the oscillations between the ``'0'`` and ``'1'`` states."
msgstr "以下の関数は、線形MQC回路を生成します。これ以降のすべての回路と同様に、 ``full_measurement`` 引数を変更して、すべての量子ビットの完全な測定と制御量子ビットのみの測定を切り替えることができます。完全な測定によって最も正確な結果が得られますが、7量子ビットを超える場合はfalseに設定し、 ``'0'`` 状態と ``'1'`` 状態の間の振動のみを観察することをお勧めします。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:299
msgid "After running experiments on this MQC circuit, we can pick a state to observe oscillations as we sweep :math:`\\phi` from :math:`0` to :math:`2 \\pi`. Our signal in theory should follow :math:`S(\\phi) = \\frac{1}{2}(1+\\cos(n \\phi))`. We then perform a Discrete Fourier Transform (DFT: :math:`I_{v}=(1/N)|\\sum_{\\phi}e^{iv\\phi}S(\\phi)`) to extract the Fidelity of the state, defined by the bounds :math:`2\\sqrt{I_{n}} \\leq F \\leq \\sqrt{I_{0}/2}+ \\sqrt{I_{n}}`; if desired, an actual value for the fidelity can be obtained: :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1})+\\sqrt{I_{n}})` (arXiv:1905.05720)."
msgstr "このMQC回路で実験を行った後、 :math:`\\phi` を :math:`0` から :math:`2 \\pi` までスイープしたときの振動を観察するための状態を選択できます。理論的には、信号は :math:`S(\\phi) = \\frac{1}{2}(1+\\cos(n \\phi))` に従う必要があります。 次に、離散フーリエ変換（DFT：  :math:`I_{v}=(1/N)|\\sum_{\\phi}e^{iv\\phi}S(\\phi)` ）を実行して、境界 :math:`2\\sqrt{I_{n}} \\leq F \\leq \\sqrt{I_{0}/2}+ \\sqrt{I_{n}}` で定義される状態の忠実度を抽出します。必要に応じて、忠実度の実際の値を取得できます： :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1})+\\sqrt{I_{n}})` （arXiv：1905.05720）。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:312
msgid "Parity Oscillations"
msgstr "パリティ振動"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:314
msgid "The next method we use to characterize the GHZ state is parity oscillations. After preparing a GHZ state, we apply a combination of rotations about the x and y axes to create various superposition states as a function of :math:`\\phi`: :math:`U(\\phi) = \\otimes_{j}^{N} e^{i\\frac{\\pi}{4}(\\cos(\\phi)\\sigma_{x}^{j}+\\sin(\\phi)\\sigma_{y}^{j})}`. We then measure the expectation value :math:`\\langle \\otimes_{j}^{N} \\sigma_{z}^{j} \\rangle_{\\phi}` as a function of :math:`\\phi`, which in theory should lead to parity oscillations between 1 and -1."
msgstr "GHZ状態を特徴づけるために使用する次の方法は、パリティ振動です。GHZ状態を準備した後、x軸とy軸を中心とした回転の組み合わせを適用して、 :math:`\\phi` ： :math:`U(\\phi) = \\otimes_{j}^{N} e^{i\\frac{\\pi}{4}(\\cos(\\phi)\\sigma_{x}^{j}+\\sin(\\phi)\\sigma_{y}^{j})}` の関数としてさまざまな重ね合わせ状態を作成します。次に、期待値 :math:`\\langle \\otimes_{j}^{N} \\sigma_{z}^{j} \\rangle_{\\phi}` を :math:`\\phi` の関数として測定します。これにより、理論的には1と-1の間のパリティ振動が発生するはずです。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:317
msgid "The following function generates a circuit which is the Parity Oscillation equivalent of the MQC circuit given above"
msgstr "次の関数は、上記のMQC回路と同等のパリティ発振である回路を生成します。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:366
msgid "We can obtain fidelity for parity oscillations :math:`S_{\\phi}` from :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1}+C)`, where :math:`C`, the coherence is defined as :math:`2\\sqrt{I_{n}}`, following the same convention for the DFT as with the MQC method."
msgstr ":math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1}+C)` からパリティ振動 :math:`S_{\\phi}` の忠実度を取得できます。ここでの :math:`C` について、コヒーレンスは :math:`2\\sqrt{I_{n}}` として定義され、MQCメソッドの場合と同じDFTの規則に従います。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:378
msgid "Tomography"
msgstr "トモグラフィー"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:380
msgid "Tomography measures the density matrix by producing many nominally identical states and measuring the state instances in different bases. The ideal result of a GHZ state is four equal density matrix elements at the 4 corners of the tensor-product basis, with all other elements vanishing. Although the fidelity can be readily calculated by this method, the method is slow (requires exponential number of measurements in n), and takes prohibitively long times if n is larger than 7 or so. Nevertheless, we will show below how to perform this method as it is relevant for small numbers of qubits."
msgstr "トモグラフィーは、多くの名目上同一の状態を生成し、異なる基底の状態インスタンスを測定することによって密度行列を測定します。GHZ状態の理想的な結果は、他のすべての要素が消失するテンソル積基底の4つのコーナーで4つの等しい密度行列要素である。この方法で忠実度を容易に計算することができますが、この方法は遅く（指数関数的な数の測定を必要とします）、nが7よりも大きい場合には法外に長い時間がかかります。とはいえ、この方法は少数の量子ビットに対しても有効であるため、以下にその方法を紹介します。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:393
msgid "Parallelizing circuits"
msgstr "回路の並列化"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:395
msgid "The above “linear” circuits are good to perform simulations, but what do we do when we use real devices, where the system can have an arbitrary topology and various errors? We are specifically targeting real hardware here, not just Aer simulation. One technique to reduce real-hardware effects is to parallelize the CNOT gates and thus create a shorter-depth circuit. This can be hugely beneficial efficiency wise, and fidelity wise. The class ``BConfig`` from the module ``parallelize`` does exactly this."
msgstr "上記の「線形」回路は、シミュレーションを実行するのに適していますが、実際のデバイスを使用するときはどうすれば良いでしょうか。各システムは任意のトポロジーをもち、さまざまなエラーが発生するため、どうすればよいでしょうか。 ここではAer シミュレーションだけではなく、実際のハードウェアをターゲットにしています。 実際のハードウェアに起因する影響を減らすための 1 つの方法は、 CNOT ゲートを並列化することで、より短い回路を作成することです。 これは効率の観点からも忠実度の観点からも非常に有益です。モジュール ``parallelize`` のクラス ``BConfig`` はまさにこれを行います。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:398
msgid "First we must configure the optimal backend we want to use. We will consider a simulation backend, ``'ibmq_qasm_simulator'``, disguised as a real device, ``'ibmq_16_melbourne'`` by using a the mock backend ``'FakeMelbourne'``"
msgstr "まず、使用するバックエンドを最適なものに設定しなければなりません。ここではシミュレーションバックエンドである ``'ibmq_qasm_simulator'`` を実際のデバイスである ``'ibmq_16_melbourne'`` に見立てて、モックバックエンドである ``'FakeMelbourne'`` を使用します。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:422
msgid "Using the ``noise`` module, we can now define a noise model from ``'ibmq_16_melbourne'`` to “assign” to ``'ibmq_qasm_simulator'``."
msgstr "``noise`` モジュールを使用して、``'ibmq_16_melbourne'`` から ``'ibmq_qasm_simulator'`` への割り当てまでノイズモデルを定義することができます。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:445
msgid "And there we have it. From now on, in the tutorial, when using a real device, not a simulation, just take out every mention and assignment of ``noise_model`` and ``coupling_map``, and assign the real device to ``backend``. The simulator used from now on is no substitute for running a real device."
msgstr "これで完成です。今後のチュートリアルでは、シミュレーションではなく実デバイスを使う場合は、 ``noise_model`` と ``coupling_map`` の記述と割り当てをすべて削除し、実デバイスを ``backend`` に割り当ててください。これから使うシミュレータは、実デバイスを動かすことに代わるものではありません。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:456
msgid "``BConfig`` lays the blueprint for creating parallelized circuits. Let us initialize an object taking in the real device we just defined, and name it ``protocirc``. All of our experiments will use it:"
msgstr "``BConfig`` は、並列化された回路を作成するための設計図を示します。 先ほど定義した実際のデバイスを取り込んだオブジェクトを初期化し、``protocirc`` という名前を付けましょう。すべての実験で使用します:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:478
msgid "Error Mitigation"
msgstr "エラー軽減"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:480
msgid "Qiskit Ignis provides very accurate tools to take raw data and return calibrated data. This is done by getting the raw data, in the form of a vector :math:`v_{raw}` and getting a calibration matrix :math:`A`. The output is then the solution to the optimization problem: :math:`argmin_{v_{cal}} ||Av_{cal}-v_{raw}||^{2}`"
msgstr "Qiskit Ignisは、生データを取得して較正済みデータを返すための非常に正確なツールを提供しています。これは，生データをベクトル :math:`v_{raw}` の形式で取得し，較正行列 :math:`A` を取得することで行われます．出力は，最適化問題の解となります： :math:`argmin_{v_{cal}}}．||Av_{cal}-v_{raw}||^{2}`"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:492
msgid "Experiment Time"
msgstr "実験時間"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:495
msgid "Preliminary Steps"
msgstr "事前ステップ"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:497
msgid "The probabilities of measuring :math:`|0\\rangle ^{\\otimes n}` and :math:`|1\\rangle^{\\otimes n}` in the GHZ state are important in calculating fidelity. For this, we need to run the following test"
msgstr "GHZ 状態の :math:`|0\\rangle^{\\otimes n}` と :math:`|1\\rangle ^{\\otimes n}` を測定する確率は、忠実度を計算する上で重要です。 このためには、次のテストを実行する必要があります"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:508
msgid "We begin by defining standard execution parameters:"
msgstr "標準の実行パラメータを定義することから始めます。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:936
msgid "Now with error mitigation:"
msgstr "エラー軽減："

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1079
msgid "We will load these values in a dictionary for assessing fidelity later on:"
msgstr "後で忠実度を評価するために、これらの値を辞書にロードします。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1101
msgid "Part 1 : MQC"
msgstr "Part 1 : MQC"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1103
msgid "We now retrieve a parallelized MQC circuit for the n qubit device"
msgstr "ここで、n量子ビットデバイスの並列化されたMQC回路を取得します。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1166
msgid "We now execute the MQC experiment:"
msgstr "MQC実験を実行します。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1213
msgid "Now we will plot the amount of counts measured for :math:`|0 \\rangle ^{\\otimes n}` as a function of phase. It is important to note that when using a parametrized circuit like the one here, the method ``get_counts()`` accepts an **index** and not a **circuit**. In any other type of experiment, ``get_counts()`` accepts a **circuit**."
msgstr "ここで、 :math:`|0 \\rangle ^{\\otimes n}` について測定されたカウントの量を位相の関数としてプロットします。ここにあるようなパラメータ化された回路を使用する場合、メソッド ``get_counts()`` は **回路** ではなく **インデックス** を受け入れることに注意することが重要です。他のタイプの実験では、 ``get_counts()`` は **回路** を受け入れます。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1244
msgid "Now we get started on error mitigation. We create an identical quantum register and use complete_meas_cal from Ignis, to create circuits for calibrated measurements to be executed, and a calibration matrix."
msgstr "ここで、エラーの軽減を開始します。同一の量子レジスタを作成し、Ignisの complete_meas_cal を使用して、実行する較正済み測定用の回路と較正マトリックスを作成します。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1314
msgid "Finally, we have our error mitigated results:"
msgstr "最後に、エラーを軽減した結果が得られました。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1335
msgid "We can see how the error mitigated results yield a far greater fidelity than the raw data"
msgstr "エラーが軽減された結果が、生データよりもはるかに忠実であることがわかります。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1470
msgid "We now plot the DFT and compare the heights of the peaks to give bounds for the fidelity"
msgstr "ここで、DFTをプロットし、ピークの高さを比較して、忠実度の境界を示します。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1481
msgid "Statistical bootstrapping has found that the error on these measurements is at most 1.5% (arXiv 1905.05720), so these result fall within error bounds, despite the fidelity being slightly higher than the upper bound, and show how error mitigation dramatically increases fidelity"
msgstr "統計的ブートストラップにより、これらの測定値の誤差は最大1.5％（arXiv 1905.05720）であることがわかったため、忠実度が上限よりわずかに高いにもかかわらず、これらの結果は誤差範囲内に収まり、誤差の軽減によって忠実度が劇的に向上することがわかります。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1493
msgid "Part 2: Parity Oscillation"
msgstr "パート2：パリティ振動"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1495
msgid "We now retrieve a parallelized Parity Oscillation circuit for the n qubit device, and run experiments in the same fashion as we did in MQC."
msgstr "ここで、n量子ビットデバイスの並列化されたパリティ発振回路を取得し、MQCで行ったのと同じ方法で実験を実行します。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1595
msgid "Now we construct the :math:`\\otimes _{j}^{N} \\sigma_z^{j}` matrix for instruction, although this is already taken into account in the following method, ``entanglement.analysis.composite_pauli_z_expvalue()``:"
msgstr "ここで、命令用の :math:`\\otimes _{j}^{N} \\sigma_z^{j}` 行列を作成しますが、これは次のメソッド ``entanglement.analysis.composite_pauli_z_expvalue()`` ですでに考慮されています。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1618
msgid "Now we want to make sure that our list of counts is correctly ordered so that it coincides with the states of the :math:`\\otimes _{j}^{N} \\sigma_z^{j}`, so that calculating :math:`\\langle \\otimes _{j}^{N} \\sigma_z^{j} \\rangle` will be as simple as taking the dot product of this ordered list with the diagonal of :math:`\\otimes _{j}^{N} \\sigma_z^{j}`. The ``composite_pauli_z_expvalue`` function does just that; it takes a circuit and appropriately orders the state vector counts. We can plot this dot product as a function of :math:`\\phi` to observe parity oscillations."
msgstr "ここで、カウントのリストが :math:`\\otimes _{j}^{N} \\sigma_z^{j}` の状態と一致するように正しく順序付けられていることを確認します。これにより、 :math:`\\langle \\otimes _{j}^{N} \\sigma_z^{j} \\rangle` の計算は、この順序付けられたリストの対角線が :math:`\\otimes _{j}^{N} \\sigma_z^{j}` の内積を取るのと同じくらい簡単になります。 ``composite_pauli_z_expvalue`` 関数はまさにそれを行います。 回路を取り、状態ベクトルカウントを適切に順序付けます。 この内積を :math:`\\phi` の関数としてプロットして、パリティの振動を観察できます。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1669
msgid "Now for standard error mitigation:"
msgstr "次に、標準エラーを軽減します。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1768
msgid "We can see how error mitigation dramatically improves our measurement (much more so in PO than in MQC). Let us quantify this using the same DFT method we used in MQC, and calculating the actual fidelities:"
msgstr "エラーの軽減によって測定が劇的に改善されることがわかります（MQCよりもPOの方がはるかに優れています）。 MQCで使用したのと同じDFT法を使用してこれを定量化し、実際の忠実度を計算してみましょう。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1858
msgid "As we see, the raw fidelity is much lower than what is achieved with MQC, but the error mitigated result is about the same."
msgstr "ご覧のとおり、生の忠実度はMACで達成されるものよりもはるかに低いですが、エラーが軽減された結果はほぼ同じです。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1870
msgid "Part 3: Tomography"
msgstr "パート3：トモグラフィー"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1872
msgid "The first step in this experiment to just pass a simple GHZ state with *no* measurements. Also, the circuit cannot be transpiled; the ``transpiled`` argument in the ``getGHZChecker()`` method can be turned on and off as is shown"
msgstr "この実験の最初のステップは、測定 *なし* で単純なGHZ状態を通過させることです。 また、回路をトランスパイルすることはできません。 ``getGHZChecker()`` メソッドの ``transpiled`` 引数は、示されているようにオンとオフを切り替えることができます。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1907
msgid "We now pass a simulated backend from ``Aer`` to get theoretical statevector counts"
msgstr "ここで、 ``Aer`` からシミュレートされたバックエンドを渡して、理論的な状態ベクトルカウントを取得します。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1954
msgid "This following code runs tomography experiments on the circuit we defined first, which is then compared to the theoretical statevector to generate a density matrix"
msgstr "この次のコードは、最初に定義した回路でトモグラフィー実験を実行し、次にそれを理論的な状態ベクトルと比較して密度行列を生成します"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2010
msgid "From here we can get the fidelity, although this method is not as fool proof as the one we will get to eventually:"
msgstr "ここから忠実度を得ることができますが、この方法は最終的に得られる方法ほど確実ではありません。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2031
msgid "…And now for error mitigation…"
msgstr "そしてエラー軽減のために、"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2113
msgid "Now, using ``qiskit.visualization``, we can plot the raw density matrix, real, and imaginary parts being on separate plots,…"
msgstr "これで ``qiskit.visualization`` を用い、密度行列そのまま、実部、および虚部を別々にプロットすることができます。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2152
msgid "And also the error mitigated density matrix,…"
msgstr "また、エラーが軽減された密度行列は、"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2191
msgid "The actual density matrices can be obtained using the ``fit()`` method. Once we have the density matrix, we can compute the fidelity, which is nothing but half the sum of the four corners of the density matrix; the following method helps us:"
msgstr "実際の密度行列は、 ``fit()`` メソッドを使用して取得できます。 密度行列ができたら、忠実度を計算できます。これは、密度行列の4つの角の合計の半分にすぎません。 次の方法が役立ちます。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2270
msgid "As we see, the raw fidelity is much lower than what is achieved with either MQC or Parity Oscillations, but the error mitigated result is about the same."
msgstr "ご覧のとおり、生の忠実度はMICまたはパリティオシレーションのいずれかで達成されるものよりもはるかに低くなりますが、エラーが軽減された結果はほぼ同じです。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2272
msgid "**A note on tomography**"
msgstr "**トモグラフィーに関する注記**"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2274
msgid "Do not perform quantum tomography with >5 qubits"
msgstr "5量子ビットを超える量子トモグラフィーを実行しないでください。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2286
msgid "Conclusion"
msgstr "結論"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2288
msgid "In conclusion, we see that without error mitigation, MQC is the superior method for characterizing the GHZ state. However, with error mitigation, all methods can, at least for a small number of qubits, achieve a much greater fidelity, and all near the same value. To get more accurate results, aside from using a real device, it is worth increasing the number of shots four to eight-fold. It may be worth comparing how the parallelized circuits used in this notebook perform fidelity-wise versus linearized circuits."
msgstr "結論として、エラーを軽減することなく、MQCがGHZ状態を特徴付ける優れた方法であることがわかります。 ただし、エラーを軽減することで、すべてのメソッドは、少なくとも少数の量子ビットに対して、はるかに高い忠実度を達成でき、すべてほぼ同じ値になります。 より正確な結果を得るには、実際のデバイスを使用する以外に、ショット数を4倍から8倍に増やす価値があります。 このノートブックで使用されている並列化された回路が、忠実度に関して線形化された回路とどのように機能するかを比較する価値があるかもしれません。"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2301
msgid "External collaborators"
msgstr "外部共同編集者"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2303
msgid "Rohith Karur"
msgstr "Rohith Karur"

