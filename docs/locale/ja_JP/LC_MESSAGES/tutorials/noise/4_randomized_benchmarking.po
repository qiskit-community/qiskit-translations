msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-05 21:02+0000\n"
"PO-Revision-Date: 2022-01-25 19:50\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/4_randomized_benchmarking.po\n"
"X-Crowdin-File-ID: 9138\n"
"Language: ja_JP\n"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:10
msgid "This page was generated from `tutorials/noise/4_randomized_benchmarking.ipynb`__."
msgstr "当ページは`tutorials/noise/4_randomized_benchmarking.ipynb`__から生成されました。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:9
msgid "Randomized Benchmarking"
msgstr "ランダマイズド・ベンチマーキング"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:12
msgid "Introduction"
msgstr "はじめに"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:14
msgid "**Randomization benchmarking (RB)** is a well-known technique to measure average gate performance by running sequences of random Clifford gates that should return the qubits to the initial state. Qiskit Ignis has tools to generate one- and two-qubit Clifford gate sequences simultaneously."
msgstr "**ランダムマイズド・ベンチマーキング（RB）** は、量子ビットを初期状態に戻すランダムクリフォードゲートのシーケンスを実行して、平均ゲートパフォーマンスを測定するためのよく知られた手法です。Qiskit Ignis には、1および2量子ビットのクリフォードゲートシーケンスを同時に生成するツールがあります。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:16
msgid "This notebook gives an example for how to use the ``ignis.verification.randomized_benchmarking`` module. This particular example shows how to run 2-qubit randomized benchmarking (RB) simultaneous with 1-qubit RB. There are also examples on how to use some of the companion functions for predicting RB fidelity."
msgstr "このノートブックでは、``ignis.verification.randomized_benchmarking`` モジュールの使用方法を示します。 ここでの例として、1量子ビットRBと同時に2量子ビットRBを実行する方法を示します。また、RBの忠実度を予測するためのコンパニオン関数の一部を使用する方法についての例も示します。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:49
msgid "1) Select the Parameters of the RB Run"
msgstr "1) RB実行におけるパラメータの選択"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:51
msgid "First, we need to choose the following parameters:"
msgstr "最初に、以下のパラメータを選択する必要があります。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:53
msgid "**nseeds:** The number of seeds. For each seed you will get a separate list of output circuits in rb_circs."
msgstr "**nseeds:** シード値。シードごとに、rb_circs の出力回路の個別リストが得られます。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:54
msgid "**length_vector:** The length vector of Clifford lengths. Must be in ascending order. RB sequences of increasing length grow on top of the previous sequences."
msgstr "**length\\_vector:** クリフォードの長さベクトル。昇順にする必要があります。長さが増えるRBシーケンスは、前のシーケンスの上に増えていきます。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:55
msgid "**rb_pattern:** A list of the form [[i,j],[k],…] which will make simultaneous RB sequences where Qi,Qj are a 2-qubit RB sequence and Qk is a 1-qubit sequence, etc. The number of qubits is the sum of the entries. For ‘regular’ RB the qubit_pattern is just [[0]],[[0,1]]."
msgstr "**rb\\_pattern:** [[i,j],[k],…] 形式のリスト。これにより、RBシーケンスが同時に生成されます。Qi、Qj は2量子ビットRBシーケンスで、Qk は1量子ビットシーケンスです。量子ビット数はエントリの合計です。'通常'のRBの場合、量子ビットパターンは [[0]],[[0,1]] です。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:56
msgid "**length_multiplier:** If this is an array it scales each rb_sequence by the multiplier."
msgstr "**length_multiplier:** これが配列の場合、それぞれ rb_sequence の乗算でスケールします。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:57
msgid "**seed_offset:** What to start the seeds at (e.g. if we want to add more seeds later)."
msgstr "**seed_offset:** シードの開始位置 (例: 後でシードを追加したい場合)。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:58
msgid "**align_cliffs:** If true adds a barrier across all qubits in rb_pattern after each set of cliffords."
msgstr "**align_cliffs:** trueの場合、クリフォードの各セットの後に、rb_pattern のすべての量子ビットにバリアが追加されます。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:60
msgid "In this example we have 3 qubits Q0,Q1,Q2. We are running 2Q RB (on qubits Q0,Q2) and 1Q RB (on qubit Q1) simultaneously, where there are twice as many 1Q Clifford gates."
msgstr "この例では、3つの量子ビットQ0、Q1、Q2があります。2Q RB（量子ビット Q0、Q2）と1Q RB（量子ビットQ1）を同時に実行しています。1Qクリフォードゲートの数は2倍です。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:92
msgid "2) Generate the RB sequences"
msgstr "2) RBシーケンスを生成する"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:94
msgid "We generate RB sequences. We start with a small example (so it doesn’t take too long to run)."
msgstr "RBシーケンスを生成します。まずは (実行に時間がかかり過ぎないように) 小さな例から始めます。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:96
msgid "In order to generate the RB sequences **rb_circs**, which is a list of lists of quantum circuits, we run the function ``rb.randomized_benchmarking_seq``."
msgstr "量子回路リストのリストであるRBシーケンス **rb_circs** を生成するため、関数 ``rb.randomized_benchmarking_seq`` を実行します。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:98
msgid "This function returns:"
msgstr "この関数は次を返します:"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:100
msgid "**rb_circs:** A list of lists of circuits for the rb sequences (separate list for each seed)."
msgstr "**rb_circs:** rbシーケンスの回路リストのリスト (シードごとの個別リスト) 。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:101
msgid "**xdata:** The Clifford lengths (with multiplier if applicable)."
msgstr "**xdata:** クリフォードの長さ（該当する場合は乗数を含む）。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:127
msgid "As an example, we print the circuit corresponding to the first RB sequence:"
msgstr "例として、最初のRBシーケンスに対応する回路を出力します。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:247
msgid "Look at the Unitary for 1 Circuit"
msgstr "1回路のユニタリーを見る"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:258
msgid "The Unitary representing each RB circuit should be the identity (with a global phase), since we multiply random Clifford elements, including a computed reversal gate. We simulate this using an Aer unitary simulator."
msgstr "計算された反転ゲートを含むランダムなクリフォード要素をかけているため、各RB回路を表すユニタリー行列は（グローバル位相で）恒等変換である必要があります。Aerユニタリーシミュレータを使用してこれをシミュレートします。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:341
msgid "Define the noise model"
msgstr "ノイズモデルを定義する"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:352
msgid "We define a noise model for the simulator. To simulate decay, we add depolarizing error probabilities to the CNOT and U gates."
msgstr "シミュレータのノイズモデルを定義します。減衰をシミュレートするために、CNOTおよびUゲートに脱分極誤差確率を追加します。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:379
msgid "3) Execute the RB sequences on Aer simulator"
msgstr "3）AerシミュレータでRBシーケンスを実行する"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:381
msgid "We can execute the RB sequences either using a Qiskit Aer Simulator (with some noise model) or using an IBMQ provider, and obtain a list of results, ``result_list``."
msgstr "Qiskit Aer シミュレーター（ノイズモデル版）またはIBMQプロバイダーを使用してRBシーケンスを実行し、結果のリスト ``result_list`` を取得できます。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:469
msgid "4) Fit the RB results and calculate the gate fidelity"
msgstr "4）RB結果を当てはめ、ゲート忠実度を計算する"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:472
msgid "Get statistics about the survival probabilities"
msgstr "生存確率に関する統計を取得する"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:474
msgid "The results in **result_list** should fit to an exponentially decaying function :math:`A \\cdot \\alpha ^ m + B`, where :math:`m` is the Clifford length."
msgstr "**result_list** の結果は、指数関数的に減衰する関数 :math:`A \\cdot \\alpha ^ m + B` に適合する必要があります。ここでの :math:`m` はクリフォード長です。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:476
msgid "From :math:`\\alpha` we can calculate the **Error per Clifford (EPC)**:"
msgstr ":math:`\\alpha`から、**クリフォードあたりの誤差（Error per Clifford、EPC）** が計算できます。:"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:478
msgid "EPC = \\frac{2^n-1}{2^n} (1-\\alpha)\n\n"
msgstr "EPC = \\frac{2^n-1}{2^n} (1-\\alpha)\n\n"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:480
msgid "(where :math:`n=nQ` is the number of qubits)."
msgstr "(ここで :math:`n=nQ` は量子ビット数です。)"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:503
msgid "Plot After 1 Seed"
msgstr "1シードの​​プロット"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:545
msgid "Plot with the Rest of the Seeds"
msgstr "残りのシードのプロット"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:547
msgid "The plot is being updated after each seed."
msgstr "プロットは各シードの後に​​更新されます。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:601
msgid "Add more shots to the data"
msgstr "データにショットを追加する"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:720
msgid "Predicted Gate Fidelity"
msgstr "ゲート忠実度の予測"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:731
msgid "From the known depolarizing errors on the simulation we can predict the **fidelity**. First we need to count the number of **gates per Clifford**."
msgstr "シミュレーションにおける既知の脱分極誤差から、**忠実度** を予測できます。まず、**クリフォードあたりのゲート数** を数える必要があります。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:733
msgid "The function **gates_per_clifford** takes a list of transpiled RB circuits and outputs the number of basis gates in each circuit."
msgstr "関数 **gates_per_clifford** は、トランスパイルされたRB回路のリストを取得し、各回路の基本ゲートの数を出力します。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:791
msgid "The function **calculate_2q_epc** gives measured errors in the basis gates that were used to construct the Clifford. It assumes that the error in the underlying gates is depolarizing. It outputs the error per a 2-qubit Clifford."
msgstr "関数 **calculate_2q_epc** は、クリフォードの構築に使用された基本ゲートの測定誤差を提供します。置かれたゲートのエラーが脱分極であることを前提としています。2量子ビットのクリフォードあたりのエラーを出力します。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:793
msgid "The input to this function is: - **gate_per_cliff:** dictionary of gate per Clifford. - **epg_2q:** EPG estimated by error model. - **qubit_pair:** index of two qubits to calculate EPC. - **list_epgs_1q:** list of single qubit EPGs of qubit listed in ``qubit_pair``. - **two_qubit_name:** name of two qubit gate in ``basis gates`` (default is ``cx``)."
msgstr "この関数への入力は次のとおりです。**gate_per_cliff:** クリフォードごとのゲートのディクショナリ。 - **epg_2q:** 誤差モデルにより推定されるEPG。 - **qubit_pair:** EPCを計算するための2量子ビットのインデックス。 - **list_epgs_1q:** ``qubit_pair``にリストされた量子ビットの単一量子ビットのEPGのリスト。 - **two_qubit_name:** ``basis gates``にある2量子ビットゲートの名前 (デフォルトは``cx``) 。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:848
msgid "Run an RB Sequence with T1,T2 Errors"
msgstr "T1、T2エラーのあるRBシーケンスを実行する"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:850
msgid "We now choose RB sequences that contain only 2-qubit Cliffords."
msgstr "次に、2量子ビットのクリフォードのみを含むRBシーケンスを選択します。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:852
msgid "We execute these sequences as before, but with a noise model extended with T1/T2 thermal relaxation error, and fit the exponentially decaying curve."
msgstr "以前のようにこれらのシーケンスを実行しますが、T1/T2熱緩和エラーで拡張されたノイズモデルを使用して、指数関数的に減衰する曲線を近似します。"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:993
msgid "We count again the number of **gates per Clifford** as before, and calculate the **two-qubit Clifford gate error**, using the predicted primitive gate errors from the coherence limit."
msgstr "以前と同様に、**クリフォードあたりのゲート数** を再度カウントし、コヒーレンス限界から予測されるプリミティブゲートエラーを使用して、**2量子ビットのクリフォードゲートエラー** を計算します。"

