msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-07 17:08+0000\n"
"PO-Revision-Date: 2021-04-07 18:12\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/operators/01_operator_flow.po\n"
"X-Crowdin-File-ID: 9472\n"
"Language: ja_JP\n"

#: ../../tutorials/operators/01_operator_flow.ipynb:10
msgid "This page was generated from `tutorials/operators/01_operator_flow.ipynb`__."
msgstr "このページは `tutorials/operators/01_operator_flow.ipynb`__ から生成されました。"

#: ../../tutorials/operators/01_operator_flow.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/operators/01_operator_flow.ipynb>`_."
msgstr "`IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/operators/01_operator_flow.ipynb>`_ でインタラクティブに実行します。"

#: ../../tutorials/operators/01_operator_flow.ipynb:9
msgid "Operator Flow"
msgstr "Operator Flow"

#: ../../tutorials/operators/01_operator_flow.ipynb:21
msgid "Introduction"
msgstr "はじめに"

#: ../../tutorials/operators/01_operator_flow.ipynb:23
msgid "Qiskit provides classes representing states and operators and sums, tensor products, and compositions thereof. These algebraic constructs allow us to build expressions representing operators."
msgstr "Qiskit には、状態と演算子、合計、テンソル積、合成を表すクラスが用意されています。これらの代数的構成物により、演算子を表す式を構築することができます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:25
msgid "We introduce expressions by building them from Pauli operators. In subsequent sections we explore in more detail operators and states, how they are represented, and what we can do with them. In the last section we construct a state, evolve it with a Hamiltonian, and compute expectation values of an observable."
msgstr "まずパウリ演算子を用いて構築する式を紹介します。 後続のセクションでは、より詳細な演算子と状態、それらがどのように表現されるか、そしてそれらを使って何ができるかについて説明します。 最後のセクションでは、状態を構築し、ハミルトニアンでそれを発展させ、観測可能な期待値を計算します。"

#: ../../tutorials/operators/01_operator_flow.ipynb:28
msgid "Pauli operators, sums, compositions, and tensor products"
msgstr "パウリ演算子、和、合成、およびテンソル積"

#: ../../tutorials/operators/01_operator_flow.ipynb:30
msgid "The most important base operators are the Pauli operators. The Pauli operators are represented like this."
msgstr "最も重要な基礎的演算子は、パウリ演算子です。パウリ演算子は、このように表現されます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:71
msgid "These operators may also carry a coefficient."
msgstr "これらの演算子は係数を持つこともできます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:114
msgid "These coefficients allow the operators to be used as terms in a sum."
msgstr "これらの係数により、演算子は和の項として使用できます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:160
msgid "Tensor products are denoted with a caret, like this."
msgstr "テンソル積は、次のようにキャレット(脱字記号) で表されます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:200
msgid "Composition is denoted by the ``@`` symbol."
msgstr "合成は``@`` 記号で表されます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:240
msgid "In the preceding two examples, the tensor product and composition of Pauli operators were immediately reduced to the equivalent (possibly multi-qubit) Pauli operator. If we tensor or compose more complicated objects, the result is objects representing the unevaluated operations. That is, algebraic expressions."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:251
msgid "For example, composing two sums gives"
msgstr "例えば、2つの和を合成すると："

#: ../../tutorials/operators/01_operator_flow.ipynb:309
msgid "And tensoring two sums gives"
msgstr "また、2つの和のテンソル積を取ると："

#: ../../tutorials/operators/01_operator_flow.ipynb:367
msgid "Let’s take a closer look at the types introduced above. First the Pauli operators."
msgstr "上記の種類を詳しく見てみましょう。まずはパウリ演算子です。"

#: ../../tutorials/operators/01_operator_flow.ipynb:410
msgid "Each Pauli operator is an instance of ``PauliOp``, which wraps an instance of ``qiskit.quantum_info.Pauli``, and adds a coefficient ``coeff``. In general, a ``PauliOp`` represents a weighted tensor product of Pauli operators."
msgstr "各パウリ演算子は ``PauliOp`` のインスタンスで、``qiskit.quantum_info.Pauli`` のインスタンスをラップし、係数``coeff`` を追加します。一般的に, ``PauliOp`` はパウリ演算子の加重テンソル積を表します."

#: ../../tutorials/operators/01_operator_flow.ipynb:451
msgid "For the encoding of the Pauli operators as pairs of Boolean values, see the documentation for ``qiskit.quantum_info.Pauli``."
msgstr "パウリ演算子をブール値のペアとしてエンコーディングするには、``qiskit.quantum_info.Pauli`` のドキュメントを参照してください。"

#: ../../tutorials/operators/01_operator_flow.ipynb:453
msgid "All of the objects representing operators, whether as “primitive”s such as ``PauliOp``, or algebraic expressions carry a coefficient"
msgstr "演算子を表現する全てのオブジェクトは、``PauliOp``のような「プリミティブ」でも代数式でも、係数を持ちます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:505
msgid "In the following we take a broader and deeper look at Qiskit’s operators, states, and the building blocks of quantum algorithms."
msgstr "以下では、Qiskitの演算子、状態、および量子アルゴリズムの構成要素をより幅広く詳しく見ていきます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:517
msgid "Part I: State Functions and Measurements"
msgstr "パートI: 状態関数と測定"

#: ../../tutorials/operators/01_operator_flow.ipynb:519
msgid "Quantum states are represented by subclasses of the class ``StateFn``. There are four representations of quantum states: ``DictStateFn`` is a sparse representation in the computational basis, backed by a ``dict``. ``VectorStateFn`` is a dense representation in the computational basis backed by a numpy array. ``CircuitStateFn`` is backed by a circuit and represents the state obtained by executing the circuit on the all-zero computational-basis state. ``OperatorStateFn`` represents mixed states via a density matrix. (As we will see later, ``OperatorStateFn`` is also used to represent observables.)"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:522
msgid "Several ``StateFn`` instances are provided for convenience. For example ``Zero, One, Plus, Minus``."
msgstr "便宜上、いくつかの``StateFn`` インスタンスが用意されています。例えば、``Zero, One, Plus, Minus`` です。"

#: ../../tutorials/operators/01_operator_flow.ipynb:544
msgid "``Zero`` and ``One`` represent the quantum states :math:`|0\\rangle` and :math:`|1\\rangle`. They are represented via ``DictStateFn``."
msgstr "``Zero`` と ``One`` は量子状態 :math:`|0\\rangle` と :math:`|1\\rangle` を表します。これらは ``DictStateFn`` で表されます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:584
msgid "``Plus`` and ``Minus``, representing states :math:`(|0\\rangle + |1\\rangle)/\\sqrt{2}` and :math:`(|0\\rangle - |1\\rangle)/\\sqrt{2}` are represented via circuits. ``H`` is a synonym for ``Plus``."
msgstr "``Plus`` と ``Minus``は、状態 :math:`(|0\\rangle + |1\\rangle)/\\sqrt{2}` と :math:`(|0\\rangle - |1\\rangle)/\\sqrt{2}` であり、回路を介して表されます。 ``H`` は ``Plus`` と同義です。"

#: ../../tutorials/operators/01_operator_flow.ipynb:640
msgid "Indexing into quantum states is done with the ``eval`` method. These examples return the coefficients of the ``0`` and ``1`` basis states. (Below, we will see that the ``eval`` method is used for other computations, as well.)"
msgstr "量子状態のインデックス作成は``eval`` メソッドで行われます。これらの例は``0`` と ``1`` 基底状態の係数を返します。(以降、``eval`` メソッドが他の計算でも使用されることを示します。)"

#: ../../tutorials/operators/01_operator_flow.ipynb:692
msgid "The dual vector of a quantum state, that is the *bra* corresponding to a *ket* is obtained via the ``adjoint`` method. The ``StateFn`` carries a flag ``is_measurement``, which is ``False`` if the object is a ket and ``True`` if it is a bra."
msgstr "量子状態の双対ベクトル( *ket* に対応する *bra* ) は、``adjoint`` メソッドによって得られます。 ``StateFn`` は ``is_measurement`` フラグを持ちます。オブジェクトが ket の場合は ``False`` で、ブラの場合は ``True`` です。"

#: ../../tutorials/operators/01_operator_flow.ipynb:703
msgid "Here, we construct :math:`\\langle 1 |`."
msgstr "ここでは :math:`\\langle 1 |` を作成します。"

#: ../../tutorials/operators/01_operator_flow.ipynb:744
msgid "For convenience, one may obtain the dual vector with a tilde, like this"
msgstr "便宜上、以下のように、チルダを使用して双対ベクトルを得ることができます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:786
msgid "Algebraic operations and predicates"
msgstr "代数演算と述語"

#: ../../tutorials/operators/01_operator_flow.ipynb:788
msgid "Many algebraic operations and predicates between ``StateFn``\\ s are supported, including: \\* ``+`` - addition \\* ``-`` - subtraction, negation (scalar multiplication by -1) \\* ``*`` - scalar multiplication \\* ``/`` - scalar division \\* ``@`` - composition \\* ``^`` - tensor product or tensor power (tensor with self n times) \\* ``**`` - composition power (compose with self n times) \\* ``==`` - equality \\* ``~`` - adjoint, alternating between a State Function and Measurement"
msgstr "``StateFn`` 間の代数演算と述語が数多くサポートされています: \\* ``+`` - 加算 \\* ``-`` - 減算もしくは否定 (-1のスカラー乗算) \\* ``*`` - スカラー乗算 \\* ``/`` - スカラー除算 \\* ``@`` - 合成 \\* ``^`` - テンソル積もしくはテンソル乗 (自己n倍テンソル) \\* ``**`` - 合成乗 (自己n回合成) \\* ``==`` - 等式 \\* ``~`` - 随伴、状態関数と測定値の切り替え"

#: ../../tutorials/operators/01_operator_flow.ipynb:790
msgid "Be aware that parentheses are often necessary to override **operator precedence**."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:801
msgid "``StateFn``\\ s carry a coefficient. This allows us multiply states by a scalar, and so to construct sums."
msgstr "``StateFn`` は係数を持ちます。これにより状態にスカラーを掛けることができ、和を構築することができます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:812
msgid "Here, we construct :math:`(2 + 3i)|0\\rangle`."
msgstr "ここでは、:math:`(2 + 3i)|0\\rangle` を構成します。"

#: ../../tutorials/operators/01_operator_flow.ipynb:853
msgid "Here, we see that adding two ``DictStateFn``\\ s returns an object of the same type. We construct :math:`|0\\rangle + |1\\rangle`."
msgstr "ここでは、2 つの ``DictStateFn`` を足すと、同じ型のオブジェクトが返されることを見ましょう。 :math:`|0\\rangle + |1\\rangle` を構築します。"

#: ../../tutorials/operators/01_operator_flow.ipynb:893
msgid "Note that you must normalize states by hand. For example, to construct :math:`(|0\\rangle + |1\\rangle)/\\sqrt{2}`, we write"
msgstr "状態を手動で正規化する必要があることに注意してください。例えば、:math:`(|0\\rangle + |1\\rangle)/\\sqrt{2}` を構築するには、次のように記述します。"

#: ../../tutorials/operators/01_operator_flow.ipynb:936
msgid "In other cases, the result is a symbolic representation of a sum. For example, here is a representation of :math:`|+\\rangle + |-\\rangle`."
msgstr "他の場合では、結果は和の記号表現になります。 例えば、次は :math:`|+\\rangle + |-\\rangle` の表現です。"

#: ../../tutorials/operators/01_operator_flow.ipynb:998
msgid "The composition operator is used to perform an inner product, which by default is held in an unevaluated form. Here is a representation of :math:`\\langle 1 | 1 \\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1044
msgid "Note that the ``is_measurement`` flag causes the (bra) state ``~One`` to be printed ``DictMeasurement``."
msgstr "``is_measurement`` フラグは、 (ブラ) 状態 ``~One`` に ``DictMeasurement`` を表示させることに注意してください。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1055
msgid "Symbolic expressions may be evaluated with the ``eval`` method."
msgstr "記号式は``eval`` メソッドで評価することができます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1126
msgid "Here is :math:`\\langle - | 1 \\rangle = \\langle (\\langle 0| - \\langle 1|)/\\sqrt{2} | 1\\rangle`."
msgstr "次は、:math:`\\langle - | 1 \\rangle = \\langle (\\langle 0| - \\langle 1|)/\\sqrt{2} | 1\\rangle` です。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1167
msgid "The composition operator ``@`` is equivalent to calling the ``compose`` method."
msgstr "合成演算子 ``@`` は、``compose`` メソッドを呼び出すのと同等です。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1213
msgid "Inner products may also be computed using the ``eval`` method directly, without constructing a ``ComposedOp``."
msgstr "内積は、``ComposedOp``を構築せずに、``eval`` メソッドを直接使用して計算することもできます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1254
msgid "Symbolic tensor products are constructed as follows. Here is :math:`|0\\rangle \\otimes |+\\rangle`."
msgstr "テンソル積の記号は次のように構築されます。次は :math:`|0\\rangle \\otimes |+\\rangle` です。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1308
msgid "This may be represented as a simple (not compound) ``CircuitStateFn``."
msgstr "これは、シンプルな(複合していない)``CircuitStateFn`` として表現されています。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1360
msgid "Tensor powers are constructed using the caret ``^`` as follows. Here are :math:`600 (|11111\\rangle + |00000\\rangle)`, and :math:`|10\\rangle^{\\otimes 3}`."
msgstr "テンソル乗はキャレット ``^`` を使用して、以下のように構築されます。次は、 :math:`600 (|11111\\rangle + |00000\\rangle)` と :math:`|10\\rangle^{\\otimes 3}` です。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1403
msgid "The method ``to_matrix_op`` converts to ``VectorStateFn``."
msgstr "``to_matrix_op`` メソッドは ``VectorStateFn`` に変換します。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1481
msgid "Constructing a StateFn is easy. The ``StateFn`` class also serves as a factory, and can take any applicable primitive in its constructor and return the correct StateFn subclass. Currently the following primitives can be passed into the constructor, listed alongside the ``StateFn`` subclass they produce:"
msgstr "StateFnを構築するのは簡単です。 ``StateFn`` クラスはファクトリーとしても機能し、該当するプリミティブをコンストラクターに取り込み、正しい StateFn サブクラスを返すことができます。 現在、以下のプリミティブをコンストラクタに渡すことができ、生成される ``StateFn`` サブクラスと一緒にリストしています。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1483
msgid "str (equal to some basis bitstring) -> DictStateFn"
msgstr "str (ある基底ビット文字列に等しい) -> DictStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1484
msgid "dict -> DictStateFn"
msgstr "dict -> DictStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1485
msgid "Qiskit Result object -> DictStateFn"
msgstr "QisKitのResultオブジェクト -> DictStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1486
msgid "list -> VectorStateFn"
msgstr "list -> VectorStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1487
msgid "np.ndarray -> VectorStateFn"
msgstr "np.ndarray -> VectorStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1488
msgid "Statevector -> VectorStateFn"
msgstr "Statevector -> VectorStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1489
msgid "QuantumCircuit -> CircuitStateFn"
msgstr "QuantumCircuit -> CircuitStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1490
msgid "Instruction -> CircuitStateFn"
msgstr "Instruction -> CircuitStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1491
msgid "OperatorBase -> OperatorStateFn"
msgstr "OperatorBase -> OperatorStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1558
msgid "Part II: ``PrimitiveOp``\\ s"
msgstr "パート II: ``PrimitiveOp``"

#: ../../tutorials/operators/01_operator_flow.ipynb:1560
msgid "The basic Operators are subclasses of ``PrimitiveOp``. Just like ``StateFn``, ``PrimitiveOp`` is also a factory for creating the correct type of ``PrimitiveOp`` for a given primitive. Currently, the following primitives can be passed into the constructor, listed alongside the ``PrimitiveOp`` subclass they produce:"
msgstr "基本的な演算子は ``PrimitiveOp`` のサブクラスです。 ``StateFn``と同じように、``PrimitiveOp``は与えられたプリミティブに対して正しい型の``PrimitiveOp``を作成するためのファクトリーでもあります。 現在、以下のプリミティブをコンストラクタに渡すことができ、生成される ``PrimitiveOp`` サブクラスと一緒にリストしています。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1562
msgid "Terra’s Pauli -> PauliOp"
msgstr "TerraのPauli -> PauliOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1563
msgid "Instruction -> CircuitOp"
msgstr "Instruction -> CircuitOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1564
msgid "QuantumCircuit -> CircuitOp"
msgstr "QuantumCircuit -> CircuitOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1565
msgid "2d List -> MatrixOp"
msgstr "2d List -> MatrixOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1566
msgid "np.ndarray -> MatrixOp"
msgstr "np.ndarray -> MatrixOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1567
msgid "spmatrix -> MatrixOp"
msgstr "spmatrix -> MatrixOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1568
msgid "Terra’s quantum_info.Operator -> MatrixOp"
msgstr "Terra の quantum_info.Operator -> MatrixOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1590
msgid "Matrix elements"
msgstr "行列要素"

#: ../../tutorials/operators/01_operator_flow.ipynb:1601
msgid "The ``eval`` method returns a column from an operator. For example, the Pauli :math:`X` operator is represented by a ``PauliOp``. Asking for a column returns an instance of the sparse representation, a ``DictStateFn``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1671
msgid "It follows that indexing into an operator, that is obtaining a matrix element, is performed with two calls to the ``eval`` method."
msgstr "演算子のインデックス生成、すなわち行列要素の取得は、2回``eval`` メソッドを呼び出すことで実行されます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1682
msgid "We have :math:`X = \\left(\\begin{matrix} 0 & 1 \\\\  1 & 0  \\end{matrix} \\right)`. And the matrix element :math:`\\left\\{X \\right\\}_{0,1}` is"
msgstr ":math:`X = \\left(\\begin{matrix} 0 & 1 \\\\  1 & 0  \\end{matrix} \\right)` であるので、行列要素 :math:`\\left\\{X \\right\\}_{0,1}` は、以下の通りです。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1723
msgid "Here is an example using the two qubit operator ``CX``, the controlled ``X``, which is represented by a circuit."
msgstr "回路で示したように、2量子ビット演算子 ``CX``、制御``X`` を使用した例は以下の通りです。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1843
msgid "Applying an operator to a state vector"
msgstr "状態ベクトルに演算子を適用する"

#: ../../tutorials/operators/01_operator_flow.ipynb:1854
msgid "Applying an operator to a state vector may be done with the ``compose`` method (equivalently, ``@`` operator). Here is a representation of :math:`X | 1 \\rangle = |0\\rangle`."
msgstr "状態ベクトルに演算子を適用するには、 ``compose``メソッド ( ``@`` 演算子と同等)を使用します。:math:`X | 1 \\rangle = |0\\rangle` は次のように表されます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1900
msgid "A simpler representation, the ``DictStateFn`` representation of :math:`|0\\rangle`, is obtained with ``eval``."
msgstr ":math:`|0\\rangle`のよりシンプルな表現、``DictStateFn``表現は``eval``で取得できます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1941
msgid "The intermediate ``ComposedOp`` step may be avoided by using ``eval`` directly."
msgstr "``eval`` を直接使用することで、中間の ``ComposedOp`` ステップを回避することができます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1982
msgid "Composition and tensor products of operators are effected with ``@`` and ``^``. Here are some examples."
msgstr "演算子の合成とテンソル積は ``@`` と ``^`` で表現されます。以下にいくつかの例を示します。"

#: ../../tutorials/operators/01_operator_flow.ipynb:2136
msgid "Part III ``ListOp`` and subclasses"
msgstr "パート III ``ListOp`` とサブクラス"

#: ../../tutorials/operators/01_operator_flow.ipynb:2148
msgid "``ListOp``"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2150
msgid "``ListOp`` is a container for effectively vectorizing operations over a list of operators and states."
msgstr "``ListOp`` は、演算子と状態のリストに対し、効果的に演算をベクトル化するためのコンテナです。"

#: ../../tutorials/operators/01_operator_flow.ipynb:2210
msgid "For example, the composition above is distributed over the lists (``ListOp``) using the simplification method ``reduce``."
msgstr "例えば、上記の合成は簡約化メソッド``reduce``を使用してリスト(``ListOp``) に分配されます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:2293
msgid "``ListOp``\\ s: ``SummedOp``, ``ComposedOp``, ``TensoredOp``"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2295
msgid "``ListOp``, introduced above, is useful for vectorizing operations. But, it also serves as the superclass for list-like composite classes. If you’ve already played around with the above, you’ll notice that you can easily perform operations between ``OperatorBase``\\ s which we may not know how to perform efficiently in general (or simply haven’t implemented an efficient procedure for yet), such as addition between ``CircuitOp``\\ s. In those cases, you may receive a ``ListOp`` result (or subclass thereof) from your operation representing the lazy execution of the operation. For example, if you attempt to add together a ``DictStateFn`` and a ``CircuitStateFn``, you’ll receive a ``SummedOp`` representing the sum of the two. This composite State function still has a working ``eval`` (but may need to perform a non-scalable computation under the hood, such as converting both to vectors)."
msgstr "上記で紹介した ``ListOp`` はベクトル化演算に役立ちますが、リストのような複合クラスのスーパークラスとしても機能します。 すでに上記の演算を行っている場合、 ``CircuitOp`` の加算など、一般的に効率的に実行する方法がわからない``OperatorBase`` の演算を簡単にできることに気づくでしょう (あるいはまだ効率的な手順を実装していないだけです)。そのような場合、演算の遅延実行を表す演算から ``ListOp`` の結果 (またはそれらのサブクラス) を受け取ることができます。 例えば、``DictStateFn`` と ``CircuitStateFn`` を加算しようとした場合、2つの合計を表す ``SummedOp`` を受け取ります。 この 合成状態関数は ``eval`` が作用できます (ただし、両方をベクトルに変換するなど、内部でスケーラブルでない計算を実行する必要があるかもしれません) 。"

#: ../../tutorials/operators/01_operator_flow.ipynb:2298
msgid "These composite ``OperatorBase``\\ s are how we construct increasingly complex and rich computation out of ``PrimitiveOp`` and ``StateFn`` building blocks."
msgstr "これらの合成 ``OperatorBase`` は、``PrimitiveOp`` と ``StateFn`` の構成要素から、ますます複雑で豊富な計算を構築する方法です。"

#: ../../tutorials/operators/01_operator_flow.ipynb:2300
msgid "Every ``ListOp`` has four properties: \\* ``oplist`` - The list of ``OperatorBase``\\ s which may represent terms, factors, etc. \\* ``combo_fn`` - The function taking a list of complex numbers to an output value which defines how to combine the outputs of the ``oplist`` items. For broadcasting simplicity, this function is defined over NumPy arrays. \\* ``coeff`` - A coefficient multiplying the primitive. Note that ``coeff`` can be int, float, complex or a free ``Parameter`` object (from ``qiskit.circuit`` in Terra) to be bound later using ``my_op.bind_parameters``. \\* ``abelian`` - Indicates whether the Operators in ``oplist`` are known to mutually commute (usually set after being converted by the ``AbelianGrouper`` converter)."
msgstr "すべての ``ListOp`` には以下の 4 つのプロパティがあります: \\* ``oplist`` - 項、因数などを表すことができる ``OperatorBase`` のリスト。 \\* ``combo_fn`` - 複素数のリストを出力値として、``oplist`` の出力の組み合わせ方法を定義する関数。 簡便化のため、この関数は Numpy 配列で定義されています。 \\* ``coeff`` - プリミティブに掛ける係数。 ``coeff`` は、int、float、complex または ``my_op.bind_parameters``を使ってあとからバインドする(Terra の ``qiskit.circuit`` の) ``Parameter`` オブジェクトを取り得ることに注意してください。 \\* ``abelian`` - ``oplist`` のOperatorが相互に可換と知られているかどうかを示します (通常は ``AbelianGrouper`` コンバーターによって変換された後に設定されます)。"

#: ../../tutorials/operators/01_operator_flow.ipynb:2303
msgid "Note that ``ListOp`` supports typical iteration overloads, so you can use indexing like ``my_op[4]`` to access the ``OperatorBase``\\ s in ``oplist``."
msgstr "``ListOp`` は、典型的なイテレーターのオーバーロードをサポートしているので、``my_op[4]`` のように添字を使って、``oplist``中の``OperatorBase``にアクセスすることができます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:2315
msgid "``OperatorStateFn``"
msgstr "``OperatorStateFn``"

#: ../../tutorials/operators/01_operator_flow.ipynb:2317
msgid "We mentioned above that ``OperatorStateFn`` represents a density operator. But, if the ``is_measurement`` flag is ``True``, then ``OperatorStateFn`` represents an observable. The expectation value of this observable can then be constructed via ``ComposedOp``. Or, directly, using ``eval``. Recall that the ``is_measurement`` flag (property) is set via the ``adjoint`` method."
msgstr "前述のように ``OperatorStateFn`` は密度演算子を表していますが、``is_measurement`` フラグが ``True`` の場合、``OperatorStateFn`` は 観測量を表します。 この観測量の期待値は ``ComposedOp`` を用いて構築することもできます。または、直接 ``eval`` を使用して構築することもできます。 ``is_measurement`` フラグ(プロパティ) が ``adjoint`` メソッドで設定されることを思い出してください。"

#: ../../tutorials/operators/01_operator_flow.ipynb:2328
msgid "Here we construct the observable corresponding to the Pauli :math:`Z` operator. Note that when printing, it is called ``OperatorMeasurement``."
msgstr "ここでは、 パウリ :math:`Z` 演算子に対応する観測量を構築します。 出力時には、``OperatorMeasurement`` と呼ばれることに注意してください。"

#: ../../tutorials/operators/01_operator_flow.ipynb:2390
msgid "Here, we compute :math:`\\langle 0 | Z | 0 \\rangle`, :math:`\\langle 1 | Z | 1 \\rangle`, and :math:`\\langle + | Z | + \\rangle`, where :math:`|+\\rangle = (|0\\rangle + |1\\rangle)/\\sqrt{2}`."
msgstr "ここでは、:math:`\\langle 0 | Z | 0 \\rangle`と :math:`\\langle 1 | Z | 1 \\rangle`、:math:`\\langle + | Z | + \\rangle` を計算します。ここで、:math:`|+\\rangle = (|0\\rangle + |1\\rangle)/\\sqrt{2}` です。"

#: ../../tutorials/operators/01_operator_flow.ipynb:2437
msgid "Part IV: Converters"
msgstr "パートIV: コンバーター"

#: ../../tutorials/operators/01_operator_flow.ipynb:2439
msgid "Converters are classes that manipulate operators and states and perform building blocks of algorithms. Examples include changing the basis of operators and Trotterization. Converters traverse an expression and perform a particular manipulation or replacement, defined by the converter’s ``convert()`` method, of the Operators within. Typically, if a converter encounters an ``OperatorBase`` in the recursion which is irrelevant to its conversion purpose, that ``OperatorBase`` is left unchanged."
msgstr "コンバーターは、演算子と状態を操作し、アルゴリズムの構成要素を実行するクラスです。例えば、演算子とトロッター化の基底を変更することなどがあります。 コンバーターは式をトラバースし、演算子内のコンバーターの ``convert()`` メソッドによって定義された特定の操作または置き換えを実行します。 通常、コンバーターが `変換目的とは関係のない再帰中に`OperatorBase`` に遭遇した場合、``OperatorBase`` は変更されません。"

#: ../../tutorials/operators/01_operator_flow.ipynb:2464
msgid "Evolutions, ``exp_i()``, and the ``EvolvedOp``"
msgstr "時間発展と``exp_i()``、``EvolvedOp``"

#: ../../tutorials/operators/01_operator_flow.ipynb:2466
msgid "Every ``PrimitiveOp`` and ``ListOp`` has an ``.exp_i()`` function such that ``H.exp_i()`` corresponds to :math:`e^{-iH}`. In practice, only a few of these Operators have an efficiently computable exponentiation (such as MatrixOp and the PauliOps with only one non-identity single-qubit Pauli), so we need to return a placeholder, or symbolic representation, (similar to how ``SummedOp`` is a placeholder when we can’t perform addition). This placeholder is called ``EvolvedOp``, and it holds the ``OperatorBase`` to be exponentiated in its ``.primitive`` property."
msgstr "全ての``PrimitiveOp`` と ``ListOp`` は、``H.exp_i()`` が :math:`e^{-iH}`に対応するような ``.exp_i()`` 関数を持ちます。 実際には、効率的に計算可能な指数を持つ演算子は数個しかありません (単位行列ではない単一量子ビットのパウリのみを持つMatrixOp や PauliOpsのように)。 ですから、プレースホルダーや記号表現を返す必要があります (加算できない場合 ``SummedOp`` がプレースホルダーであることに似ています)。 このプレースホルダーは ``EvolvedOp`` と呼ばれ、``.primitive`` プロパティで指数化される ``OperatorBase`` を保持します。"

#: ../../tutorials/operators/01_operator_flow.ipynb:2469
msgid "Qiskit operators fully support parameterization, so we can use a ``Parameter`` for our evolution time here. Notice that there’s no “evolution time” argument in any function. The Operator flow exponentiates whatever operator we tell it to, and if we choose to multiply the operator by an evolution time, :math:`e^{-iHt}`, that will be reflected in our exponentiation parameters."
msgstr "Qiskit 演算子はパラメーター化を完全にサポートしているため、ここでは発展時間に ``Parameter`` を使用できます。 どの関数にも「発展時間」引数がないことに注意してください。 どのような演算子でも、指数パラメーターに反映される発展時間 :math:`e^{-iHt}` を演算子にかけることを選択した場合、Operator flowは指数関数に取ります。"

#: ../../tutorials/operators/01_operator_flow.ipynb:2481
msgid "Weighted sum of Pauli operators"
msgstr "パウリ演算子の加重和"

#: ../../tutorials/operators/01_operator_flow.ipynb:2483
msgid "A Hamiltonian expressed as a linear combination of multi-qubit Pauli operators may be constructed like this."
msgstr "多量子ビットパウリ演算子の線型結合として表現されるハミルトニアンは、次のように構築することができます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:2508
msgid "Note that ``two_qubit_H2`` is represented as a ``SummedOp`` whose terms are ``PauliOp``\\ s."
msgstr "ここで、``two_qubit_H2`` は、項が ``PauliOp`` である ``SummedOp`` として表現されます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:2560
msgid "Next, we multiply the Hamiltonian by a ``Parameter``. This ``Parameter`` is stored in the ``coeff`` property of the ``SummedOp``. Calling ``exp_i()`` on the result wraps it in ``EvolvedOp``, representing exponentiation."
msgstr "次に、ハミルトニアンに``Parameter`` を掛けます。この ``Parameter`` は ``SummedOp`` の ``coeff`` プロパティに保存されています。 結果に対し ``exp_i()`` を呼び出すと、指数化を表す ``EvolvedOp`` でラップされます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:2617
msgid "We construct ``h2_measurement``, which represents ``two_qubit_H2`` as an observable."
msgstr "``two_qubit_H2`` の観測量として、``h2_measurement`` を構築しましょう。"

#: ../../tutorials/operators/01_operator_flow.ipynb:2670
msgid "We construct a Bell state :math:`|\\Phi_+\\rangle` via :math:`\\text{CX} (H\\otimes I) |00\\rangle`."
msgstr ":math:`\\text{CX} (H\\otimes I) |00\\rangle` を用いて、ベル状態 :math:`|\\Phi_+\\rangle` を構築します。"

#: ../../tutorials/operators/01_operator_flow.ipynb:2723
msgid "Here is the expression :math:`H e^{-iHt} |\\Phi_+\\rangle`."
msgstr "次は、 :math:`H e^{-iHt} |\\Phi_+\\rangle` の式です。"

#: ../../tutorials/operators/01_operator_flow.ipynb:2808
msgid "Typically, we want to approximate :math:`e^{-iHt}` using two-qubit gates. We achieve this with the ``convert`` method of ``PauliTrotterEvolution``, which traverses expressions applying trotterization to all ``EvolvedOp``\\ s encountered. Although we use ``PauliTrotterEvolution`` here, there are other possibilities, such as ``MatrixEvolution``, which performs the exponentiation exactly."
msgstr "通常、2量子ビットゲートを使用して、 :math:`e^{-iHt}` を近似します。 これは 、出現する全ての``EvolvedOp``をトロッター化した式をトラバースする``PauliTrotterEvolution`` の ``convert`` メソッドによって達成されます。 ここでは ``PauliTrotterEvolution`` を使用していますが、他にも正確に指数化を実行する ``MatrixEvolution`` のような可能性があります。"

#: ../../tutorials/operators/01_operator_flow.ipynb:2902
msgid "``trotterized_op`` contains a ``Parameter``. The ``bind_parameters`` method traverses the expression binding values to parameter names as specified via a ``dict``. In this case, there is only one parameter."
msgstr "``trotterized_op`` は ``Parameter`` を含んでいます。``bind_parameters`` メソッドは、``dict`` で指定されたパラメータ名をバインドする式をトラバースします。 この場合、パラメータは一つしかありません。"

#: ../../tutorials/operators/01_operator_flow.ipynb:2923
msgid "``bound`` is a ``ComposedOp``. The second factor is the circuit. Let’s draw it to verify that the binding has taken place."
msgstr "``bound`` は ``ComposedOp`` です。2番目の因子は回路です。バインディングが行われたことを確認するために、描画してみましょう。"

#: ../../tutorials/operators/01_operator_flow.ipynb:3038
msgid "Expectations"
msgstr "期待値"

#: ../../tutorials/operators/01_operator_flow.ipynb:3040
msgid "``Expectation``\\ s are converters that enable the computation of expectation values of observables. They traverse an Operator tree, replacing ``OperatorStateFn``\\ s (observables) with equivalent instructions which are more amenable to computation on quantum or classical hardware. For example, if we want to measure the expectation value of an Operator ``o`` expressed as a sum of Paulis with respect to some state function, but can only access diagonal measurements on quantum hardware, we can create an observable ``~StateFn(o)`` and use a ``PauliExpectation`` to convert it to a diagonal measurement and circuit pre-rotations to append to the state."
msgstr "``Expectation`` は、観測量の期待値の計算を可能にするコンバーターです。 これらは ``OperatorStateFn`` (観測量) を、量子ハードウェアや古典ハードウェア上の計算により適している等価な命令に置き換えるよう、Operator構造をトラバースします。 例えば、 ある状態関数に対するパウリ行列の合計として表現されたOperator ``o`` の期待値を測定したいけれど、量子ハードウェア上の対角化された測定にしかアクセスできない場合、 観測可能な``~StateFn(o)`` を作成し``PauliExpectation`` を使用して、対角化測定と状態に追加する回路のプリローテーションに変換します。"

#: ../../tutorials/operators/01_operator_flow.ipynb:3043
msgid "Another interesting ``Expectation`` is the ``AerPauliExpectation``, which converts the observable into a ``CircuitStateFn`` containing a special expectation snapshot instruction which ``Aer`` can execute natively with high performance."
msgstr "興味深いもう一つの ``Expectation`` は ``AerPauliExpectation`` です。 これは、期待値を、``Aer`` が高性能でネイティブに実行できる特別な期待値スナップショットの命令を含む ``CircuitStateFn`` に変換します。"

#: ../../tutorials/operators/01_operator_flow.ipynb:3134
msgid "By default ``group_paulis=True``, which will use the ``AbelianGrouper`` to convert the ``SummedOp`` into groups of mutually qubit-wise commuting Paulis. This reduces circuit execution overhead, as each group can share the same circuit execution."
msgstr "デフォルトの``group_paulis=True``では、 ``AbrianGrouper`` を使用して ``SummedOp`` を互いに量子的に可換なパウリのグループに変換します。 これにより、各グループが同じ回路実行を共有できるため、回路の実行オーバーヘッドが低減されます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:3214
msgid "Note that converters act recursively, that is, they traverse an expression applying their action only where possible. So we can just convert our full evolution and measurement expression. We could have equivalently composed the converted ``h2_measurement`` with our evolution ``CircuitStateFn``. We proceed by applying the conversion on the entire expression."
msgstr "コンバーターは再帰的に動作することに注意してください。つまり、可能な限りアクションを適用する式にトラバースします。 時間発展と測定の完全な表現を変換することができます。 変換された ``h2_measurement`` を 時間発展``CircuitStateFn`` と同等に構成することができます。式全体を変換して進めます。"

#: ../../tutorials/operators/01_operator_flow.ipynb:3355
msgid "Now we bind multiple parameter values into a ``ListOp``, followed by ``eval`` to evaluate the entire expression. We could have used ``eval`` earlier if we bound earlier, but it would not be efficient. Here, ``eval`` will convert our ``CircuitStateFn``\\ s to ``VectorStateFn``\\ s through simulation internally."
msgstr "次に、複数のパラメータ値を ``ListOp`` にバインドし、式全体を評価するために ``eval`` を追加します。 先にバインドすれば ``eval`` を使えたかもしれませんが、効率的ではありません。 ここで、``eval`` は内部シミュレーションを通じて``CircuitStateFn``を``VectorStateFn``に変換します。"

#: ../../tutorials/operators/01_operator_flow.ipynb:3377
msgid "Here are the expectation values :math:`\\langle \\Phi_+| e^{iHt} H e^{-iHt} |\\Phi_+\\rangle` corresponding to the different values of the parameter."
msgstr "パラメータの異なる値に対応する :math:`\\langle \\Phi_+| e^{iHt} H e^{-iHt} |\\Phi_+\\rangle` の期待値は次のとおりです。"

#: ../../tutorials/operators/01_operator_flow.ipynb:3425
msgid "Executing ``CircuitStateFn``\\ s with the ``CircuitSampler``"
msgstr "``CircuitSampler`` を用いて ``CircuitStateFn`` を実行する"

#: ../../tutorials/operators/01_operator_flow.ipynb:3427
msgid "The ``CircuitSampler`` traverses an Operator and converts any ``CircuitStateFns`` into approximations of the resulting state function by a ``DictStateFn`` or ``VectorStateFn`` using a quantum backend. Note that in order to approximate the value of the ``CircuitStateFn``, it must 1) send the state function through a depolarizing channel, which will destroy all phase information and 2) replace the sampled frequencies with **square roots** of the frequency, rather than the raw probability of sampling (which would be the equivalent of sampling the **square** of the state function, per the Born rule.)"
msgstr "``CircuitSampler`` はOperatorをトラバースし、``CircuitStateFns`` を量子バックエンドを使用して、``DictStateFn`` または ``VectorStateFn`` により結果の状態関数の近似に変換します。 ``CircuitStateFn`` の値を近似するには、1) 全ての位相情報を破壊する脱分極チャネルを介して状態関数を送信、2) サンプルした周波数を、サンプリングした生の確率 ではなく、周波数の **平方根** に置き換える(Bornの規則により、状態関数の **平方** をサンプリングするのと同等です)、必要があることに注意してください。"

#: ../../tutorials/operators/01_operator_flow.ipynb:3476
msgid "Note again that the circuits are replaced by dicts with **square roots** of the circuit sampling probabilities. Take a look at one sub-expression before and after the conversion:"
msgstr "回路は、回路のサンプリング確率の**平方根** のdictに置き換えられることに再度注意してください。 変換前と変換後のひとつの部分式を見てみましょう。"

