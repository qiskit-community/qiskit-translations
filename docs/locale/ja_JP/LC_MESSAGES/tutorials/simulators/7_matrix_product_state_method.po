msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-10 19:20+0000\n"
"PO-Revision-Date: 2020-10-02 06:57\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/simulators/7_matrix_product_state_method.po\n"
"X-Crowdin-File-ID: 9172\n"
"Language: ja_JP\n"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:10
msgid "This page was generated from `tutorials/simulators/7_matrix_product_state_method.ipynb`__."
msgstr "このページは `tutorials/simulators/7_matrix_product_state_method.ipynb`__ から生成されました。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:9
#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:26
msgid "Matrix product state simulation method"
msgstr "行列積状態を用いたシミュレーション法"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:12
msgid "Simulation methods"
msgstr "シミュレーション方法"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:14
msgid "The ``QasmSimulator`` has several simulation methods including ``statevector``, ``stabilizer``, ``extended_stabilizer`` and ``matrix_product_state``. Each of these determines the internal representation of the quantum circuit and the algorithms used to process the quantum operations. They each have advantages and disadvantages, and choosing the best method is a matter of investigation. In this tutorial, we focus on the ``matrix product state simulation method``."
msgstr "``QasmSimulator`` には、``stateevector`` 、 ``stabilizer`` 、 ``extended_stabilizer`` 、 ``matrix_product_state`` などのいくつかのシミュレーションメソッドがあります。 それぞれが量子回路の内部表現と、量子演算を処理するために使用されるアルゴリズムを決定します。 それぞれに長所と短所があり、最良の方法を選ぶことは調査の問題です。 このチュートリアルでは、``行列積状態を用いたシミュレーション法`` に焦点を当てます。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:28
msgid "This simulation method is based on the concept of ``matrix product states``. This structure was initially proposed in the paper *Efficient classical simulation of slightly entangled quantum computations* by Vidal in https://arxiv.org/abs/quant-ph/0301063. There are additional papers that describe the structure in more detail, for example *The density-matrix renormalization group in the age of matrix product states* by Schollwoeck https://arxiv.org/abs/1008.3477."
msgstr "このシミュレーション方法は ``matrix product states`` の概念に基づいています。 この構造は、最初に Vidal の *Efficient classical simulation of slightly entangled quantum computations*(https://arxiv.org/abs/quant-ph/0301063) で提案されました。構造をより詳細に説明する論文として、例えば Schollwoeck の *The density-matrix renormalization group in the age of matrix product states* (https://arxiv.org/abs/1008.3477) があります。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:39
msgid "A pure quantum state is usually described as a state vector, by the expression :math:`|\\psi\\rangle = \\sum_{i_1=0}^1 {\\ldots} \\sum_{i_n=0}^1 c_{i_1 \\ldots i_n} |i_i\\rangle {\\otimes} {\\ldots} {\\otimes} |i_n\\rangle`."
msgstr "純粋な量子状態は通常、状態ベクトルとして記述されます。 式で書くと、 :math:`|\\psi\\rangle = \\sum_{i_1=0}^1 {\\ldots} \\sum_{i_n=0}^1 c_{i_1 \\ldots i_n} |i_i\\rangle {\\otimes} {\\ldots} |i_n\\rangle` です。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:41
msgid "The state vector representation implies an exponential size representation, regardless of the actual circuit. Every quantum gate operating on this representation requires exponential time and memory."
msgstr "状態ベクトル表現は、実際の回路に関係なく、指数サイズ表現を伴います。 この表現で動作するすべての量子ゲートには、指数時間と指数メモリが必要です。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:43
msgid "The matrix product state (MPS) representation offers a local representation, in the form: :math:`\\Gamma^{[1]} \\lambda^{[1]} \\Gamma^{[2]} \\lambda^{[2]}\\ldots \\Gamma^{[1]} \\lambda^{[n-1]} \\Gamma^{[n]}`, such that all the information contained in the :math:`c_{i_1 \\ldots i_n}`, can be generated out of the MPS representation."
msgstr "行列積状態（Matrix Product State、MPS）表示は、形式:  :math:`\\Gamma^{[1]} \\lambda^{[1]} \\Gamma^{[2]} \\lambda^{[2]}\\ldots \\Gamma^{[1]} \\lambda^{[n-1]} \\Gamma^{[n]}` にてローカル表示を提供します。 :math:`c_{i_1 \\ldots i_n}` に含まれるすべての情報を、MPS表現から生成できるようにします。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:54
msgid "Every :math:`\\Gamma^{[i]}` is a tensor of complex numbers that represents qubit :math:`i`. Every :math:`\\lambda^{[i]}` is a matrix of real numbers that is used to normalize the amplitudes of qubits :math:`i` and :math:`i+1`. Single-qubit gates operate only on the relevant tensor."
msgstr "すべての :math:`\\Gamma^{[i]}` は qubit :math:`i` を表す複素数のテンソルです。 :math:`\\lambda^{[i]}` は実数の行列で、量子ビット :math:`i` と :math:`i+1` の振幅を正規化するために使用されます。 単一量子ビットゲートは、該当するテンソルでのみ動作します。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:56
msgid "Two-qubit gates operate on consecutive qubits :math:`i` and :math:`i+1`. This involves a tensor-contract operation over :math:`\\lambda^{[i-1]}`, :math:`\\Gamma^{[i-1]}`, :math:`\\lambda^{[i]}`, :math:`\\Gamma^{[i+1]}` and :math:`\\lambda^{[i+1]}`, that creates a single tensor. We apply the gate to this tensor, and then decompose back to the original structure. This operation may increase the size of the respective tensors. Gates that involve two qubits that are not consecutive, require a series of swap gates to bring the two qubits next to each other and then the reverse swaps."
msgstr "２量子ビットゲートは連続した量子ビット :math:`i` and :math:`i+1` に作用します。これには :math:`\\lambda^{[i-1]}`, :math:`\\Gamma^{[i-1]}`, :math:`\\lambda^{[i]}`, :math:`\\Gamma^{[i+1]}` および :math:`\\lambda^{[i+1]}` のテンソル縮約が含まれ、単一のテンソルが作成されます。ゲートにはこのテンソルが適用され、次に元の構造にデコンポーズ(decompose) されます。この操作は各テンソルの大きさを増やすかも知れません。２つの量子ビットが連続していない場合には、swap ゲートをいくつか適用し２量子ビットが連続するようにし、再び swap を適応して元に戻します。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:59
msgid "In the worst case, the tensors may grow exponentially. However, the size of the overall structure remains 'small' for circuits that do not have 'many' two-qubit gates. This allows much more efficient operations in circuits with relatively 'low' entanglement. Characterizing when to use this method over other methods is a subject of current research."
msgstr "最悪の場合、テンソルは指数関数的に成長する可能性があります。 しかし、構造全体の大きさは、 '多くの' 2量子ビットゲートを持たない回路では '小さい' ままです。これにより、比較的 '低い' もつれの回路では、はるかに効率的な演算が可能になります。 他の方法ではなく、この方法を使うタイミングを特徴づけることは、現在の研究の対象です。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:71
msgid "Using the matrix product state simulation method"
msgstr "行列積状態シミュレーション方法を利用する"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:73
msgid "The matrix product state simulation method is invoked in the ``QasmSimulator`` by setting the ``simulation_method``. Other than that, all operations are controlled by the ``QasmSimulator`` itself, as in the following example:"
msgstr "行列積状態シミュレーション方法は、``simulation_method`` を設定することにより、``QasmSimulator`` で呼び出されます。 以下の例にありますように、それ以外の操作は ``QasmSimulator`` 自体によって制御されます。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:136
msgid "To see the internal state vector of the circuit, we can import the snapshot files:"
msgstr "回路の内部状態ベクトルを見るために、スナップショットファイルをインポートすることができます。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:231
msgid "Running circuits using the matrix product state simulation method can be fast, relative to other methods. However, if we generate the state vector during the execution, then the conversion to state vector is, of course, exponential in memory and time, and therefore we don't benefit from using this method. We can benefit if we only do operations that don't require printing the full state vector. For example, if we run a circuit and then take measurement. The circuit below has 200 qubits. We create an ``EPR state`` involving all these qubits. Although this state is highly entangled, it is handled well by the matrix product state method, because there are effectively only two states."
msgstr "行列積状態シミュレーション方法を使用した実行回路は、他の方法と比較して高速である可能性があります。 しかし、実行中に状態ベクトルを生成した場合、状態ベクトルへの変換は もちろんメモリーと時間の指数関数的なものです したがって我々はこの方法を使う恩恵を受けることはできません。 完全な状態ベクトルを出力する必要のない操作のみを行うことで利益を得ることができます。 例えば、回路を動かしてから測定する場合があげられます。以下の回路は200量子ビットです。 これらすべての量子ビットを含む ``EPR 状態`` を作成します。 この状態は非常にエンタングルしていますが、実質的には2つの状態しか存在しないため、行列積状態法によってうまく処理されます。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:234
msgid "We can handle more qubits than this, but execution may take a few minutes. Try running a similar circuit with 500 qubits! Or maybe even 1000 (you can get a cup of coffee while waiting)."
msgstr "これよりも多くの量子ビットを扱うことができますが、実行には数分かかる場合があります。 500量子ビットで同じような回路を実行してみてください! または、1000など (待っている間にコーヒーを1杯飲むことができます)。"

