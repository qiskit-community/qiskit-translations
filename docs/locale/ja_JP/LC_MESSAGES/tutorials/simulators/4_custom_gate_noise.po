msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-10 19:20+0000\n"
"PO-Revision-Date: 2020-09-28 14:42\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/simulators/4_custom_gate_noise.po\n"
"X-Crowdin-File-ID: 9166\n"
"Language: ja_JP\n"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:10
msgid "This page was generated from `tutorials/simulators/4_custom_gate_noise.ipynb`__."
msgstr "このページは `tutorials/simulators/4_custom_gate_noise.ipynb`__ から生成されました。"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:9
msgid "Applying noise to custom unitary gates"
msgstr "カスタムユニタリーゲートにノイズを適用する"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:21
msgid "Introduction"
msgstr "はじめに"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:23
msgid "This notebook shows how to add custom unitary gates to a quantum circuit, and use them for noise simulations in Qiskit Aer."
msgstr "このノートブックでは、量子回路にカスタムのユニタリーゲートを追加し、Qiskit Aer でノイズシミュレーションに使用する方法を説明します。"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:50
msgid "Creating matrix operators"
msgstr "行列演算子の作成"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:52
msgid "We can use the ``Operator`` class in ``qiskit.quantum_info`` to represent arbitrary matrix operators. If the operator is unitary it can then be added to a quantum circuit and used for simulation on Qiskit Aer."
msgstr "``qiskit.quantum_info`` の ``Operator`` クラスを使用して、任意の行列演算子を表現できます。 演算子がユニタリーの場合、量子回路に追加し、Qiskit Aer でのシミュレーションに使用することができます。"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:54
msgid "Lets create two operators below for a CNOT gate and an iSWAP gate:"
msgstr "CNOTゲートとiSWAPゲート用の2つの演算子を以下で作成してみましょう。"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:56
msgid "\\mbox{CNOT} = \\left(\\begin{array}\n"
"& 1 & 0 & 0 & 0 \\\\\n"
"0 & 0 & 0 & 1 \\\\\n"
"0 & 0 & 1 & 0 \\\\\n"
"0 & 1 & 0 & 0\n"
"\\end{array}\\right), \\quad\n"
"\\mbox{iSWAP} = \\left(\\begin{array}\n"
"& 1 & 0 & 0 & 0 \\\\\n"
"0 & 0 & i & 0 \\\\\n"
"0 & i & 0 & 0 \\\\\n"
"0 & 0 & 0 & 1\n"
"\\end{array}\\right)"
msgstr ""

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:100
msgid "**Note:** The matrix is specified with respect to the tensor product :math:`U_{b}\\otimes U_{a}` for qubits specified by list ``[a, b]``."
msgstr "**注意:** 行列はリスト ``[a, b]`` で指定された量子ビットに対して、テンソル積 :math:`U_{b}\\otimes U_{a}` として指定されます。"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:112
msgid "Using operators in circuits"
msgstr "回路で演算子を使用する"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:114
msgid "Let us demonstrate how these can be used in a circuit. We will consider an example of implementing a CNOT gate decomposed in terms of single-qubit gates and the iSWAP gate as follows."
msgstr "これらを回路でどのように使用できるかを示しましょう。 ここでは、単一量子ビットゲートとiSWAPゲートで分解されたCNOTゲートの実装例を次のように検討します。"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:176
msgid "Note that we have assigned an optional *label* of ``\"iswap\"`` to the unitary when it is inserted. This allows us to identify this unitary in a Qiskit Aer ``NoiseModel`` so that we can add errors to these custom unitary gates in noisy circuit simulations."
msgstr "ユニタリーを追加した際に、オプションの *label* に ``\"iswap\"`` を指定したことに着目してください。これにより、Qiskit Aer ``NoiseModel`` でこのユニタリーを識別することができ、ノイズがある回路シミュレーションでこれらのカスタムユニタリーゲートにエラーを追加することができます。"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:187
msgid "We can confirm this circuit returns the correct output using the ``Operator`` class as a simulator for the circuit:"
msgstr "回路のシミュレーターとして、 ``Operator`` クラスを使用して正しい出力を返すことを確認できます："

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:237
msgid "And to confirm the output is correct we can compute the average gate fidelity:"
msgstr "出力が正しいことを確認するために、平均ゲート忠実度を計算することができます。"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:279
msgid "Creating a custom unitary in a noise model"
msgstr "ノイズモデルでカスタムユニタリーを作成する"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:281
msgid "The Qiskit Aer ``QasmSimulator`` supports simulation of arbitrary unitary operators directly as specified by the ``\"unitary\"`` in the basis gates."
msgstr "Qiskit Aer ``QasmSimulator`` は、ベースゲート内の ``\"unitary\"`` で指定された任意のユニタリー演算子のシミュレーションを直接サポートします。"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:322
msgid "This allows us to add noise models to arbitrary unitaries in our simulation when we identify them using the optional ``label`` argument of ``QuantumCircuit.unitary``."
msgstr "これにより、オプションの ``QuantumCircuit.unitary`` の ``label`` 引数を使用して、シミュレーション内の任意のユニタリーにノイズモデルを追加することができます。"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:324
msgid "We will now do this by creating a ``NoiseModel`` that includes a quantum error channel on our custom iSWAP gate. For our example we will create a 2-qubit error consisting of two single-qubit amplitude damping channels with different damping parameters. For now we will assume all the other circuit instructions are ideal."
msgstr "これを行うには、カスタムiSWAPゲートに量子エラーチャネルを含む ``NoiseModel`` を作成します。 この例では、異なる減衰パラメータを持つ2つの単一量子ビット振幅減衰チャネルからなる2量子ビット誤差を作成します。 今のところ、他のすべての回路命令が理想的であると仮定します。"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:356
msgid "Note that when we add an error to a custom label such as ``\"iswap\"`` the ``NoiseModel`` does not know what gate this label is supposed to apply to, so we must manually add the desired gate string to the noise model ``basis_gates``. This ensures that the compiler will unroll to the correct basis gates for the noise model simulation. This can done using the ``NoiseModel.add_basis_gates`` function:"
msgstr "``\"iswap\"`` のようなカスタムラベルにエラーを追加すると、``NoiseModel`` はこのラベルが適用されるべきゲートを知らないことに注意してください。 ですから、ノイズモデルの ``basis_gates`` に手動でゲート文字列を追加する必要があります。 これにより、コンパイラーはノイズモデルシミュレーションの正しいベース・ゲートにアンロールします。これは ``NoiseModel.add_basis_gates`` 関数を使用して行うことができます。"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:397
msgid "By default the basis gates of a noise model are ``['cx','id','u3']`` plus any standard ``QasmSimulator`` basis gates that are added to the noise model."
msgstr "デフォルトでは、ノイズモデルの基底ゲートは ``['cx','id','u3']`` に加えて、ノイズモデルに追加される標準の ``QasmSimulator`` ベースゲートがあります。"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:409
msgid "Simulating a custom unitary noise model"
msgstr "カスタムユニタリーノイズモデルのシミュレーション"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:420
msgid "Let us first take our previous CX circuit and add an initial Hadamard gate and final measurement to create a Bell-state preparation circuit that we may simulator on the ``QasmSimulator`` both for the ideal and noisy case:"
msgstr "以前のCX回路を取り上げて、最初のアダマールゲートと最後の測定を追加して、理想的な場合とノイズがある場合について ``QasmSimulator`` 上でシミュレートできるベル状態準備回路を作成しましょう。"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:482
msgid "Ideal output"
msgstr "理想的な出力"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:484
msgid "Let's first see the ideal output. Since this generates a Bell-state we expect two peaks for 00 and 11."
msgstr "最初に理想的な出力を見てみましょう。これがBell-stateを生成するので、00と11の2つのピークを期待します。"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:520
msgid "Noisy circuit execution"
msgstr "ノイズがある回路の実行"

#: ../../tutorials/simulators/4_custom_gate_noise.ipynb:522
msgid "Finally, let's now simulate it with our custom noise model. Since there is a small amplitude damping error on the two-qubit gates we expect small additional peaks for the 01 and 10 outcome probabilities."
msgstr "最後に、カスタムノイズモデルでシミュレートしましょう。 2量子ビットゲートには小さな振幅減衰誤差があるので、01および10の結果の可能性については、小さなピークが追加されることが予想されます。"

