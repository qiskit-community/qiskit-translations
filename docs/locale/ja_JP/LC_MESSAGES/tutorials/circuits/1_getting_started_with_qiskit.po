msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-26 23:06+0000\n"
"PO-Revision-Date: 2023-01-26 23:30\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits/1_getting_started_with_qiskit.po\n"
"X-Crowdin-File-ID: 9114\n"
"Language: ja_JP\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:10
msgid "This page was generated from `tutorials/circuits/1_getting_started_with_qiskit.ipynb`__."
msgstr "このページは `tutorials/circuits/1_getting_started_with_qiskit.ipynb`__ から生成されました。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:9
msgid "Getting Started with Qiskit"
msgstr "Qiskit 入門"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:11
msgid "Here, we provide an overview of working with Qiskit. The fundamental package of Qiskit is Terra that provides the basic building blocks necessary to program quantum computers. The fundamental unit of Qiskit is the `quantum circuit <https://en.wikipedia.org/wiki/Quantum_circuit>`__. A basic workflow using Qiskit consists of two stages: **Build** and **Execute**. **Build** allows you to make different quantum circuits that represent the problem you are solving, and **Execute** that allows you to run them on different backends. After the jobs have been run, the data is collected and postprocessed depending on the desired output."
msgstr "ここでは、Qiskit での作業概要を説明します。Qiskit の基本パッケージは Terra です。これは、量子コンピューターのプログラミングに必要な、基本構成要素を提供します。Qiskit の基本単位は `量子回路 <https://en.wikipedia.org/wiki/Quantum_circuit>`__ です。Qiskit を使用した基本的なワークフローは、 **構築** と **実行** の2つのステージで構成されます。 **構築** では、あなたが解きたい問題を表現するさまざまな量子回路を構築でき、 **実行** では、その量子回路をさまざまなバックエンドで実行します。ジョブが実行された後、目的とする出力に応じたデータが収集され、後処理されます。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:36
msgid "Circuit Basics"
msgstr "回路の基本"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:39
msgid "Building the circuit"
msgstr "回線の構築"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:41
msgid "The basic element needed for your first program is the QuantumCircuit. We begin by creating a ``QuantumCircuit`` comprised of three qubits."
msgstr "最初のプログラムに必要な基本要素は、QuantumCircuitです。まず、3つの量子ビットで構成される ``QuantumCircuit`` を作成します。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:63
msgid "After you create the circuit with its registers, you can add gates (“operations”) to manipulate the registers. As you proceed through the tutorials you will find more gates and circuits; below is an example of a quantum circuit that makes a three-qubit GHZ state"
msgstr "レジスタで回路を作成した後、レジスタを操作するためのゲート (\"演算\") を追加することができます。チュートリアルを進めていくと、さらに多くのゲートと回路が見つかります。以下は3量子ビットのGHZ状態を作る量子回路の例です。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:65
msgid "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}.\n\n"
msgstr "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}.\n\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:67
msgid "To create such a state, we start with a three-qubit quantum register. By default, each qubit in the register is initialized to :math:`|0\\rangle`. To make the GHZ state, we apply the following gates: - A Hadamard gate :math:`H` on qubit :math:`q_{0}`, which puts it into the superposition state :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}`. - A controlled-Not operation (:math:`C_{X}`) between qubit :math:`q_{0}` and qubit :math:`q_{1}`. - A controlled-Not operation between qubit :math:`q_{0}` and qubit :math:`q_{2}`."
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:70
msgid "On an ideal quantum computer, the state produced by running this circuit would be the GHZ state above."
msgstr "理想的な量子コンピューターでは、この回路を実行することによって生成される状態は、上記のGHZ状態になります。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:72
msgid "In Qiskit, operations can be added to the circuit one by one, as shown below."
msgstr "Qiskit では、以下に示すように、回路に操作を1つずつ追加することができます。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:126
msgid "Visualize Circuit"
msgstr "回路の可視化"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:128
msgid "You can visualize your circuit using Qiskit ``QuantumCircuit.draw()``, which plots the circuit in the form found in many textbooks."
msgstr "Qiskitの ``QuantumCircuit.draw()`` を使うことで、多くの教科書で見られるような形式に回路をプロットし、可視化することができます。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:158
msgid "In this circuit, the qubits are put in order, with qubit :math:`q_{0}` at the top and qubit :math:`q_{2}` at the bottom. The circuit is read left to right (meaning that gates that are applied earlier in the circuit show up further to the left)."
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:173
msgid "When representing the state of a multi-qubit system, the tensor order used in Qiskit is different than that used in most physics textbooks. Suppose there are :math:`n` qubits, and qubit :math:`j` is labeled as :math:`Q_{j}`. Qiskit uses an ordering in which the :math:`n^{\\mathrm{th}}` qubit is on the left side of the tensor product, so that the basis vectors are labeled as :math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0`."
msgstr "複数の量子ビットのシステムの状態を表現する際に Qiskit で使われるテンソル積の順番は、多くの物理の教科書で使われる順番と異なります。:math:`n` 個の量子ビットがあり、:math:`j` 番目の量子ビットは :math:`Q_{j}` とラベル付けされていると仮定します。Qiskitでは、 :math:`n` 番目の量子ビットはテンソル積の左側にあるので、基底ベクトルは、:math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0` とラベル付けされます。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:175
msgid "For example, if qubit :math:`Q_{0}` is in state 0, qubit :math:`Q_{1}` is in state 0, and qubit :math:`Q_{2}` is in state 1, Qiskit would represent this state as :math:`|100\\rangle`, whereas many physics textbooks would represent it as :math:`|001\\rangle`."
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:177
msgid "This difference in labeling affects the way multi-qubit operations are represented as matrices. For example, Qiskit represents a controlled-X (:math:`C_{X}`) operation with qubit :math:`Q_{0}` being the control and qubit :math:`Q_{1}` being the target as"
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:179
msgid "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}.\n\n"
msgstr "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}.\n\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:195
msgid "Simulating circuits using Qiskit Aer"
msgstr "Qiskit Aer を使った回路のシミュレーション"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:197
msgid "Qiskit Aer is our package for simulating quantum circuits. It provides many different backends for doing a simulation. There is also a basic, Python only, implementation called ``BasicAer`` in Terra that can be used as a drop-in replacement for ``Aer`` in the examples below."
msgstr "Qiskit Aer は、量子回路をシミュレーションするパッケージです。シミュレーションするためのバックエンドは複数あります。以下の例にあるように ``Aer`` の完全互換性部品として使うことのできるTerraの ``BasicAer`` と呼ばれるベーシックな Python のみの実装もあります。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:200
msgid "Statevector backend"
msgstr "状態ベクトル・バックエンド"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:202
msgid "The most common backend in Qiskit Aer is the ``statevector_simulator``. This simulator returns the quantum state, which is a complex vector of dimensions :math:`2^n`, where :math:`n` is the number of qubits (so be careful using this as it will quickly get too large to run on your machine)."
msgstr "Qiskit Aer における最も一般的なバックエンドは、``statevector_simulator`` です。このシミュレーターは、 :math:`2^n` 次元の複素ベクトルである量子状態を返します。ここで :math:`n` は量子ビットの数です(ですので、ご自身のマシンで実行するには大きすぎる数にすぐ到達してしまうことに注意してください)。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:213
msgid "To run the above circuit using the statevector simulator, first you need to import Aer and then set the backend to ``statevector_simulator``."
msgstr "状態ベクトル・シミュレーターを使って、上記の回路を実行するためには、最初に Aer をインポートしてから、バックエンドを ``statevector_simulator`` に設定する必要があります。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:238
msgid "Now that we have chosen the backend, it’s time to compile and run the quantum circuit. In Qiskit we provide the ``run`` method for this. ``run`` returns a ``job`` object that encapsulates information about the job submitted to the backend."
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:244
msgid "Tip: You can obtain the above parameters in Jupyter. Simply place the text cursor on a function and press Shift+Tab."
msgstr "ヒント：上記のパラメータは Jupyter で取得できます。関数にテキストカーソルを置いて、Shift+Tab を押すだけです。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:270
msgid "When you run a program, a job object is made that has the following two useful methods: ``job.status()`` and ``job.result()``, which return the status of the job and a result object, respectively."
msgstr "プログラムを実行すると、二つの便利なメソッドをもったジョブ・オブジェクトが作られます： ``job.status()`` と ``job.result()`` です。これらは、ジョブのステータスと結果オブジェクトをそれぞれ返します。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:276
msgid "Note: Jobs run asynchronously, but when the result method is called, it switches to synchronous and waits for it to finish before moving on to another task."
msgstr "注記：ジョブは非同期に実行されますが、result メソッドが呼び出されると同期に切り替わり、終了するのを待ってから別のタスクに進みます。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:301
msgid "The results object contains the data and Qiskit provides the method ``result.get_statevector(circ)`` to return the state vector for the quantum circuit."
msgstr "Result オブジェクトにはデータが含まれており、Qiskit は量子回路の状態ベクトルを返す ``result.get_statevector(circ)`` メソッドを提供しています。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:350
msgid "Qiskit also provides a visualization toolbox to allow you to view these results."
msgstr "Qiskitは、これらの結果を見るための可視化ツールボックスも提供しています。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:352
msgid "Below, we use the visualization function to plot the real and imaginary components of the state density matrix :math:`\\rho`."
msgstr "以下のように、状態の密度行列である :math:`\\rho` の実数部と虚数部をプロットする可視化関数が使えます。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:384
msgid "Unitary backend"
msgstr "ユニタリー・バックエンド"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:395
msgid "Qiskit Aer also includes a ``unitary_simulator`` that works *provided all the elements in the circuit are unitary operations*. This backend calculates the :math:`2^n \\times 2^n` matrix representing the gates in the quantum circuit."
msgstr "Qiskit Aer には、 *回路のすべての要素をユニタリー演算* にする ``unitary_simulator`` も含まれます。このバックエンドは、量子回路のゲートを表す :math:`2^n \\times 2^n` の行列を計算します。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:492
msgid "OpenQASM backend"
msgstr "OpenQASMバックエンド"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:503
msgid "The simulators above are useful because they provide information about the state output by the ideal circuit and the matrix representation of the circuit. However, a real experiment terminates by *measuring* each qubit (usually in the computational :math:`|0\\rangle, |1\\rangle` basis). Without measurement, we cannot gain information about the state. Measurements cause the quantum system to collapse into classical bits."
msgstr "上記のシミュレーターは、理想的な回路から出力される状態と、回路の行列表現に関する情報を提供してくれるため便利です。 ただし、実際の実験は、各量子ビット (通常は、計算基底 :math:`|0\\rangle, |1\\rangle`) を *測定* することで終了します。 測定なしでは、状態に関する情報を得ることができません。 測定は、量子システムに古典的なビットへの崩壊を引き起こします。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:505
msgid "For example, suppose we make independent measurements on each qubit of the three-qubit GHZ state"
msgstr "例えば、3量子ビットのGHZ状態の各量子ビットを独立に測定するとしましょう。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:507
msgid "|\\psi\\rangle = (|000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"
msgstr "|\\psi\\rangle = (|000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:509
msgid "and let :math:`xyz` denote the bitstring that results. Recall that, under the qubit labeling used by Qiskit, :math:`x` would correspond to the outcome on qubit :math:`q_{2}`, :math:`y` to the outcome on qubit :math:`q_{1}`, and :math:`z` to the outcome on qubit :math:`q_{0}`."
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:515
msgid "Note: This representation of the bitstring puts the most significant bit (MSB) on the left, and the least significant bit (LSB) on the right. This is the standard ordering of binary bitstrings. We order the qubits in the same way (qubit representing the MSB has index 0), which is why Qiskit uses a non-standard tensor product order."
msgstr "注記：このビット文字列の表現では最上位ビット (MSB) が左側、最下位ビット (LSB) が右側に配置されます。これは、バイナリビット文字列における標準的な順序です。そのため、同じ方法で量子ビットも並べます (最上位ビットを表す量子ビットのインデックスは0です)。これが、Qiskit が非標準的なテンソル積の順序を使用する理由です。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:521
msgid "Recall the probability of obtaining outcome :math:`xyz` is given by"
msgstr ":math:`xyz` の結果が得られる確率は、以下のように与えられることを思い出してください。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:523
msgid "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"
msgstr "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:525
msgid "and as such for the GHZ state probability of obtaining 000 or 111 are both 1/2."
msgstr "そして、GHZ状態の場合、000または111が得られる確率はどちらも1/2です。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:527
msgid "To simulate a circuit that includes measurement, we need to add measurements to the original circuit above, and use a different Aer backend."
msgstr "測定を含む回路をシミュレートするためには、上記の回路に測定を追加し、異なる Aer バックエンドを使用する必要があります。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:630
msgid "This circuit adds a classical register, and three measurements that are used to map the outcome of qubits to the classical bits."
msgstr "この回路は古典レジスタと３つの測定を追加して、量子ビットの結果を古典ビットにマッピングします。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:632
msgid "To simulate this circuit, we use the ``qasm_simulator`` in Qiskit Aer. Each run of this circuit will yield either the bitstring 000 or 111. To build up statistics about the distribution of the bitstrings (to, e.g., estimate :math:`\\mathrm{Pr}(000)`), we need to repeat the circuit many times. The number of times the circuit is repeated can be specified in the ``run`` method, via the ``shots`` keyword."
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:662
msgid "Once you have a result object, you can access the counts via the function ``get_counts(circuit)``. This gives you the *aggregated* binary outcomes of the circuit you submitted."
msgstr "result オブジェクトを取得できたら、``get_counts(circuit)`` 関数を使用して回数を取得することができます。これにより、送信した回路の *集計* されたバイナリ結果が得られます。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:708
msgid "Approximately 50 percent of the time, the output bitstring is 000. Qiskit also provides a function ``plot_histogram``, which allows you to view the outcomes."
msgstr "約50％の出力ビット文字列は000です。Qiskit は、結果を表示できる関数 ``plot_histogram`` も提供します。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:739
msgid "The estimated outcome probabilities :math:`\\mathrm{Pr}(000)` and :math:`\\mathrm{Pr}(111)` are computed by taking the aggregate counts and dividing by the number of shots (times the circuit was repeated). Try changing the ``shots`` keyword in the ``run`` method and see how the estimated probabilities change."
msgstr ""

