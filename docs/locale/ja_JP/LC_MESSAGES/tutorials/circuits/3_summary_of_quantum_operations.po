msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:25+0000\n"
"PO-Revision-Date: 2023-03-17 23:15\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits/3_summary_of_quantum_operations.po\n"
"X-Crowdin-File-ID: 9118\n"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:10
msgid "This page was generated from `tutorials/circuits/3_summary_of_quantum_operations.ipynb`__."
msgstr "当ページは `tutorials/circuits/3_summary_of_quantum_operations.ipynb`__ から生成されました。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:9
msgid "Summary of Quantum Operations"
msgstr "量子操作の概要"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:20
msgid "In this section we will go into the different operations that are available in Qiskit Terra. These are:"
msgstr "このセクションでは、Qiskit Terraで利用可能なさまざまな操作について説明します。これらは次のとおりです。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:22
msgid "Single-qubit quantum gates"
msgstr "単一量子ビットゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:23
msgid "Multi-qubit quantum gates"
msgstr "複数量子ビットゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:24
#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3586
msgid "Measurements"
msgstr "測定"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:25
#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3828
msgid "Reset"
msgstr "リセット"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:26
msgid "Conditionals"
msgstr "条件文"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:27
msgid "State initialization"
msgstr "状態の初期化"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:29
msgid "We will also show you how to use the three different simulators:"
msgstr "また、以下の 3 つの異なるシミュレーターの使用方法についても説明します。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:31
msgid "unitary_simulator"
msgstr "unitary_simulator"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:32
msgid "qasm_simulator"
msgstr "qasm_simulator"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:33
msgid "statevector_simulator"
msgstr "statevector_simulator"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:73
msgid "Single Qubit Quantum states"
msgstr "単一量子ビット量子状態"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:75
msgid "A single qubit quantum state can be written as"
msgstr "単一量子ビット量子状態は次のように記述できます。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:77
msgid "\\left|\\psi\\right\\rangle = \\alpha\\left|0\\right\\rangle + \\beta \\left|1\\right\\rangle\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:79
msgid "where :math:`\\alpha` and :math:`\\beta` are complex numbers. In a measurement the probability of the bit being in :math:`\\left|0\\right\\rangle` is :math:`|\\alpha|^2` and :math:`\\left|1\\right\\rangle` is :math:`|\\beta|^2`. As a vector this is"
msgstr "ここでの :math:`\\alpha` と :math:`\\beta` は複素数です。測定において、ビットが :math:`\\left|0\\right\\rangle` になる確率は :math:`|\\alpha|^2` 、:math:`\\left|1\\right\\rangle` になる確率は :math:`|\\beta|^2` です。ベクトルとしては、次のように記述できます。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:81
msgid "\\left|\\psi\\right\\rangle =\n"
"\\begin{pmatrix}\n"
"\\alpha \\\\\n"
"\\beta\n"
"\\end{pmatrix}."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:90
msgid "Note, due to the conservation of probability :math:`|\\alpha|^2+ |\\beta|^2 = 1` and since global phase is undetectable :math:`\\left|\\psi\\right\\rangle := e^{i\\delta} \\left|\\psi\\right\\rangle` we only require two real numbers to describe a single qubit quantum state."
msgstr "注記、確率の保存の :math:`|\\alpha|^2+ |\\beta|^2 = 1` と、 :math:`\\left|\\psi\\right\\rangle := e^{i\\delta} \\left|\\psi\\right\\rangle` により絶対的な位相は検出できないことから、単一量子ビットの量子状態を記述するためには２つの実数のみを必要とします。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:92
msgid "A convenient representation is"
msgstr "便利な表現として、"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:94
msgid "\\left|\\psi\\right\\rangle = \\cos(\\theta/2)\\left|0\\right\\rangle + \\sin(\\theta/2)e^{i\\phi}\\left|1\\right\\rangle\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:96
msgid "where :math:`0\\leq \\phi < 2\\pi`, and :math:`0\\leq \\theta \\leq \\pi`. From this, it is clear that there is a one-to-one correspondence between qubit states (:math:`\\mathbb{C}^2`) and the points on the surface of a unit sphere (:math:`\\mathbb{R}^3`). This is called the Bloch sphere representation of a qubit state."
msgstr "ただし、:math:`0\\leq \\phi < 2\\pi` 、および :math:`0\\leq \\theta \\leq \\pi` とします。これより、量子ビット状態（ :math:`\\mathbb{C}^2` ）と、単位球面上の点（ :math:`\\mathbb{R}^3` ）との間に 1 対 1 の対応があることが明らかとなっています。 これは量子ビット状態のブロッホ球表現と呼ばれます。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:98
msgid "Quantum gates/operations are usually represented as matrices. A gate which acts on a qubit is represented by a :math:`2\\times 2` unitary matrix :math:`U`. The action of the quantum gate is found by multiplying the matrix representing the gate with the vector which represents the quantum state."
msgstr "通常、量子ゲート/操作は行列として表されます。1量子ビットに作用するゲートは、 :math:`2\\times 2` ユニタリ行列 :math:`U` によって表されます。 量子ゲートの作用は、ゲートを表す行列を量子状態を表すベクトルにかけることによって分かります。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:100
msgid "\\left|\\psi'\\right\\rangle = U\\left|\\psi\\right\\rangle\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:102
msgid "A general unitary must be able to take the :math:`\\left|0\\right\\rangle` to the above state. That is"
msgstr "一般的なユニタリは、:math:`\\left|0\\right\\rangle` を上記の状態にできなければなりません。 これは、"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:104
msgid "U = \\begin{pmatrix}\n"
"\\cos(\\theta/2) & a \\\\\n"
"e^{i\\phi}\\sin(\\theta/2) & b\n"
"\\end{pmatrix}"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:112
msgid "where :math:`a` and :math:`b` are complex numbers constrained such that :math:`U^\\dagger U = I` for all :math:`0\\leq\\theta\\leq\\pi` and :math:`0\\leq \\phi<2\\pi`. This gives 3 constraints and as such :math:`a\\rightarrow -e^{i\\lambda}\\sin(\\theta/2)` and :math:`b\\rightarrow e^{i\\lambda+i\\phi}\\cos(\\theta/2)` where :math:`0\\leq \\lambda<2\\pi` giving"
msgstr "ここでの :math:`a` および :math:`b` は、すべての :math:`0\\leq\\theta\\leq\\pi` および :math:`0\\leq \\phi<2\\pi` に対して :math:`U^\\dagger U = I` となるような制約を持つ複素数です。これにより３つの制約が与えられ、:math:`0\\leq \\lambda<2\\pi` において :math:`a\\rightarrow -e^{i\\lambda}\\sin(\\theta/2)` および :math:`b\\rightarrow e^{i\\lambda+i\\phi}\\cos(\\theta/2)` となり、次式が得られます。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:114
#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:165
msgid "U(\\theta, \\phi, \\lambda) =\n"
"    \\begin{pmatrix}\n"
"        \\cos\\left(\\frac{\\theta}{2}\\right)          & -e^{i\\lambda}\\sin\\left(\\frac{\\theta}{2}\\right) \\\\\n"
"        e^{i\\phi}\\sin\\left(\\frac{\\theta}{2}\\right) & e^{i(\\phi+\\lambda)}\\cos\\left(\\frac{\\theta}{2}\\right)\n"
"    \\end{pmatrix}"
msgstr "U(\\theta, \\phi, \\lambda) =\n"
"    \\begin{pmatrix}\n"
"        \\cos\\left(\\frac{\\theta}{2}\\right)          & -e^{i\\lambda}\\sin\\left(\\frac{\\theta}{2}\\right) \\\\\n"
"        e^{i\\phi}\\sin\\left(\\frac{\\theta}{2}\\right) & e^{i(\\phi+\\lambda)}\\cos\\left(\\frac{\\theta}{2}\\right)\n"
"    \\end{pmatrix}"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:123
msgid "This is the most general form of a single qubit unitary."
msgstr "これは単一量子ビットユニタリの最も一般的な形式です。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:135
msgid "Single-Qubit Gates"
msgstr "単一量子ビットゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:137
msgid "The single-qubit gates available are: - U gate - P gate - Identity gate - Pauli gates - Clifford gates - :math:`C3` gates - Standard rotation gates"
msgstr "使用可能な単一量子ビットゲートは次のとおりです。- Uゲート - Pゲート - 恒等ゲート - パウリゲート - クリフォードゲート - :math:`C3` ゲート - 標準回転ゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:139
msgid "We have provided a backend: ``unitary_simulator`` to allow you to calculate the unitary matrices."
msgstr "ユニタリ行列を計算するためのバックエンドである ``unitary_simulator`` が用意されています。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:161
msgid "U gate"
msgstr "Uゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:163
msgid "In Qiskit we give you access to the general unitary using the :math:`u` gate, which has the following matrix form"
msgstr "Qiskit では、 :math:`u` ゲートを使用して一般のユニタリーにアクセスできます。このゲートには、次の行列形式があります。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:284
msgid "Note on U gate deprecation"
msgstr "Uゲート非推奨のメモ"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:286
msgid "The QuantumCircuit methods :math:`u1`, :math:`u2` and :math:`u3` are now deprecated. Instead, the following replacements should be used."
msgstr "QuantumCircuitメソッド :math:`u1` 、 :math:`u2` 、および :math:`u3` は非推奨になりました。代わりに、次の代替品を使用する必要があります。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:288
msgid ":math:`u1(\\lambda) = p(\\lambda) = u(0, 0, \\lambda)`"
msgstr ":math:`u1(\\lambda) = p(\\lambda) = u(0, 0, \\lambda)`"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:290
msgid ":math:`u2(\\phi, \\lambda) = u(\\frac{\\pi}{2}, \\phi, \\lambda) = p(\\frac{\\pi}{2} + \\phi) \\cdot sx \\cdot p(\\frac{\\pi}{2} - \\lambda)`"
msgstr ":math:`u2(\\phi, \\lambda) = u(\\frac{\\pi}{2}, \\phi, \\lambda) = p(\\frac{\\pi}{2} + \\phi) \\cdot sx \\cdot p(\\frac{\\pi}{2} - \\lambda)`"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:292
msgid ":math:`u3(\\theta, \\phi, \\lambda) = u(\\theta, \\phi, \\lambda) = p(\\phi + \\pi) \\cdot sx \\cdot p(\\theta + \\pi) \\cdot sx \\cdot p(\\lambda)`"
msgstr ":math:`u3(\\theta, \\phi, \\lambda) = u(\\theta, \\phi, \\lambda) = p(\\phi + \\pi) \\cdot sx \\cdot p(\\theta + \\pi) \\cdot sx \\cdot p(\\lambda)`"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:319
msgid "P gate"
msgstr "P ゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:321
msgid "The :math:`p(\\lambda)= u(0, 0, \\lambda)` gate has the matrix form"
msgstr ":math:`p(\\lambda)= u(0, 0, \\lambda)` ゲートは次の行列形式を持ちます。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:323
msgid "p(\\lambda) =\n"
"\\begin{pmatrix}\n"
"1 & 0 \\\\\n"
"0 & e^{i \\lambda}\n"
"\\end{pmatrix},"
msgstr "p(\\lambda) =\n"
"\\begin{pmatrix}\n"
"1 & 0 \\\\\n"
"0 & e^{i \\lambda}\n"
"\\end{pmatrix},"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:332
msgid "which is useful as it allows us to apply a quantum phase."
msgstr "これは、量子位相の適用に役立ちます。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:441
msgid "Identity gate"
msgstr "恒等ゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:443
msgid "The identity gate is :math:`Id = p(0)`."
msgstr "恒等ゲートは、 :math:`Id = p(0)` です。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:552
msgid "Pauli gates"
msgstr "パウリゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:555
msgid ":math:`X`: bit-flip gate"
msgstr ":math:`X`: ビット・フリップ・ゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:557
msgid "The bit-flip gate :math:`X` is defined as:"
msgstr "ビット・フリップ・ゲート :math:`X` は次のように定義されています。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:559
msgid "X   =\n"
"\\begin{pmatrix}\n"
"0 & 1\\\\\n"
"1 & 0\n"
"\\end{pmatrix}= u(\\pi,0,\\pi)"
msgstr "X   =\n"
"\\begin{pmatrix}\n"
"0 & 1\\\\\n"
"1 & 0\n"
"\\end{pmatrix}= u(\\pi,0,\\pi)"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:675
msgid ":math:`Y`: bit- and phase-flip gate"
msgstr ":math:`Y` : ビット・アンド・フェーズ・フリップ・ゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:677
msgid "The :math:`Y` gate is defined as:"
msgstr ":math:`Y` ゲートは次のように定義されています。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:679
msgid "Y  =\n"
"\\begin{pmatrix}\n"
"0 & -i\\\\\n"
"i & 0\n"
"\\end{pmatrix}=u(\\pi,\\pi/2,\\pi/2)"
msgstr "Y  =\n"
"\\begin{pmatrix}\n"
"0 & -i\\\\\n"
"i & 0\n"
"\\end{pmatrix}=u(\\pi,\\pi/2,\\pi/2)"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:795
msgid ":math:`Z`: phase-flip gate"
msgstr ":math:`Z`: フェーズ・フリップ・ゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:797
msgid "The phase-flip gate :math:`Z` is defined as:"
msgstr "フェーズ・フリップ・ゲート :math:`Z` は、次のように定義されます。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:799
msgid "Z =\n"
"\\begin{pmatrix}\n"
"1 & 0\\\\\n"
"0 & -1\n"
"\\end{pmatrix}=p(\\pi)"
msgstr "Z =\n"
"\\begin{pmatrix}\n"
"1 & 0\\\\\n"
"0 & -1\n"
"\\end{pmatrix}=p(\\pi)"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:915
msgid "Clifford gates"
msgstr "クリフォードゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:918
msgid "Hadamard gate"
msgstr "アダマールゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:920
msgid "H =\n"
"\\frac{1}{\\sqrt{2}}\n"
"\\begin{pmatrix}\n"
"1 & 1\\\\\n"
"1 & -1\n"
"\\end{pmatrix}= u(\\pi/2,0,\\pi)"
msgstr "H =\n"
"\\frac{1}{\\sqrt{2}}\n"
"\\begin{pmatrix}\n"
"1 & 1\\\\\n"
"1 & -1\n"
"\\end{pmatrix}= u(\\pi/2,0,\\pi)"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1037
msgid ":math:`S` (or, :math:`\\sqrt{Z}` phase) gate"
msgstr ":math:`S` (または、 :math:`\\sqrt{Z}` フェーズ) ゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1039
msgid "S =\n"
"\\begin{pmatrix}\n"
"1 & 0\\\\\n"
"0 & i\n"
"\\end{pmatrix}= p(\\pi/2)"
msgstr "S =\n"
"\\begin{pmatrix}\n"
"1 & 0\\\\\n"
"0 & i\n"
"\\end{pmatrix}= p(\\pi/2)"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1155
msgid ":math:`S^{\\dagger}` (or, conjugate of :math:`\\sqrt{Z}` phase) gate"
msgstr ":math:`S^{\\dagger}` (または :math:`\\sqrt{Z}` フェーズの共役 ) ゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1157
msgid "S^{\\dagger} =\n"
"\\begin{pmatrix}\n"
"1 & 0\\\\\n"
"0 & -i\n"
"\\end{pmatrix}= p(-\\pi/2)"
msgstr "S^{\\dagger} =\n"
"\\begin{pmatrix}\n"
"1 & 0\\\\\n"
"0 & -i\n"
"\\end{pmatrix}= p(-\\pi/2)"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1273
msgid ":math:`C3` gates"
msgstr ":math:`C3` ゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1276
msgid ":math:`T` (or, :math:`\\sqrt{S}` phase) gate"
msgstr ":math:`T` (または、 :math:`\\sqrt{S}` フェーズ) ゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1278
msgid "T =\n"
"\\begin{pmatrix}\n"
"1 & 0\\\\\n"
"0 & e^{i \\pi/4}\n"
"\\end{pmatrix}= p(\\pi/4)"
msgstr "T =\n"
"\\begin{pmatrix}\n"
"1 & 0\\\\\n"
"0 & e^{i \\pi/4}\n"
"\\end{pmatrix}= p(\\pi/4)"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1394
msgid ":math:`T^{\\dagger}` (or, conjugate of :math:`\\sqrt{S}` phase) gate"
msgstr ":math:`T^{\\dagger}` (または :math:`\\sqrt{S}` フェーズの共役 ) ゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1396
msgid "T^{\\dagger} =\n"
"\\begin{pmatrix}\n"
"1 & 0\\\\\n"
"0 & e^{-i \\pi/4}\n"
"\\end{pmatrix}= p(-\\pi/4)"
msgstr "T^{\\dagger} =\n"
"\\begin{pmatrix}\n"
"1 & 0\\\\\n"
"0 & e^{-i \\pi/4}\n"
"\\end{pmatrix}= p(-\\pi/4)"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1512
msgid "Standard Rotations"
msgstr "標準回転"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1514
msgid "The standard rotation gates are those that define rotations around the Paulis :math:`P=\\{X,Y,Z\\}`. They are defined as"
msgstr "標準回転ゲートは、パウリ :math:`P=\\{X,Y,Z\\}` の周囲で回転を定義するゲートが定義されているものです。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1516
msgid "R_P(\\theta) = \\exp(-i \\theta P/2) = \\cos(\\theta/2)I -i \\sin(\\theta/2)P\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1519
msgid "Rotation around X-axis"
msgstr "X 軸まわりの回転"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1521
msgid "R_x(\\theta) =\n"
"\\begin{pmatrix}\n"
"\\cos(\\theta/2) & -i\\sin(\\theta/2)\\\\\n"
"-i\\sin(\\theta/2) & \\cos(\\theta/2)\n"
"\\end{pmatrix} = u(\\theta, -\\pi/2,\\pi/2)"
msgstr "R_x(\\theta) =\n"
"\\begin{pmatrix}\n"
"\\cos(\\theta/2) & -i\\sin(\\theta/2)\\\\\n"
"-i\\sin(\\theta/2) & \\cos(\\theta/2)\n"
"\\end{pmatrix} = u(\\theta, -\\pi/2,\\pi/2)"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1637
msgid "Rotation around Y-axis"
msgstr "Y 軸まわりの回転"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1639
msgid "R_y(\\theta) =\n"
"\\begin{pmatrix}\n"
"\\cos(\\theta/2) & - \\sin(\\theta/2)\\\\\n"
"\\sin(\\theta/2) & \\cos(\\theta/2).\n"
"\\end{pmatrix} =u(\\theta,0,0)"
msgstr "R_y(\\theta) =\n"
"\\begin{pmatrix}\n"
"\\cos(\\theta/2) & - \\sin(\\theta/2)\\\\\n"
"\\sin(\\theta/2) & \\cos(\\theta/2).\n"
"\\end{pmatrix} =u(\\theta,0,0)"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1755
msgid "Rotation around Z-axis"
msgstr "Z 軸まわりの回転"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1757
msgid "R_z(\\phi) =\n"
"\\begin{pmatrix}\n"
"e^{-i \\phi/2} & 0 \\\\\n"
"0 & e^{i \\phi/2}\n"
"\\end{pmatrix}\\equiv p(\\phi)"
msgstr "R_z(\\phi) =\n"
"\\begin{pmatrix}\n"
"e^{-i \\phi/2} & 0 \\\\\n"
"0 & e^{i \\phi/2}\n"
"\\end{pmatrix}\\equiv p(\\phi)"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1766
msgid "Note that here we have used an equivalent as it is different to :math:`p` by a global phase :math:`e^{-i \\phi/2}`."
msgstr "ここでは、グローバル位相 :math:`e^{-i \\phi/2}` によって :math:`p` とは異なるため、同等のものを使用していることに注意してください。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1874
msgid "Note this is different due only to a global phase."
msgstr "これは、グローバル・フェーズのみ異なることに注意してください。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1886
msgid "Multi-Qubit Gates"
msgstr "複数量子ビットゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1889
msgid "Mathematical Preliminaries"
msgstr "数学的準備"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1891
msgid "The space of a quantum computer grows exponentially with the number of qubits. For :math:`n` qubits the complex vector space has dimension :math:`d=2^n`. To describe states of a multi-qubit system, the tensor product is used to \"glue together\" operators and basis vectors."
msgstr "量子コンピューターの次元は、量子ビットの数に対して指数関数的に大きくなります。:math:`n` 量子ビットの場合、複素数ベクトル空間は :math:`d=2^n` 次元になります。複数量子ビット系の状態を表すためには、テンソル積が演算子と基底ベクトルの”結合”として使われます。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1893
msgid "Let's start by considering a 2-qubit system. Given two operators :math:`A` and :math:`B` that each act on one qubit, the joint operator :math:`A \\otimes B` acting on two qubits is"
msgstr "2量子ビットシステムを考える所から始めてみましょう。それぞれ片方の量子ビットに作用する :math:`A` と :math:`B` という2つの演算子を用意し、2つの量子ビットに作用する結合演算子 :math:`A \\otimes B` は、"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1895
msgid "\\begin{equation}\n"
"    A\\otimes B =\n"
"    \\begin{pmatrix}\n"
"        A_{00} \\begin{pmatrix}\n"
"            B_{00} & B_{01} \\\\\n"
"            B_{10} & B_{11}\n"
"        \\end{pmatrix} & A_{01}  \\begin{pmatrix}\n"
"                B_{00} & B_{01} \\\\\n"
"                B_{10} & B_{11}\n"
"            \\end{pmatrix} \\\\\n"
"        A_{10}  \\begin{pmatrix}\n"
"                    B_{00} & B_{01} \\\\\n"
"                    B_{10} & B_{11}\n"
"                \\end{pmatrix} & A_{11}  \\begin{pmatrix}\n"
"                            B_{00} & B_{01} \\\\\n"
"                            B_{10} & B_{11}\n"
"                        \\end{pmatrix}\n"
"    \\end{pmatrix},\n"
"\\end{equation}"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1917
msgid "where :math:`A_{jk}` and :math:`B_{lm}` are the matrix elements of :math:`A` and :math:`B`, respectively."
msgstr "ここでは、 :math:`A_{jk}` と :math:`B_{lm}` は :math:`A` と :math:`B` それぞれの行列成分になります。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1919
msgid "Analogously, the basis vectors for the 2-qubit system are formed using the tensor product of basis vectors for a single qubit:"
msgstr "類似的に、2量子ビット系の基底ベクトルは、単一量子ビットでの基底ベクトルのテンソル積を使って形成されます。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1921
msgid "\\begin{equation}\\begin{split}\n"
"    \\left|{00}\\right\\rangle &= \\begin{pmatrix}\n"
"        1 \\begin{pmatrix}\n"
"            1  \\\\\n"
"            0\n"
"        \\end{pmatrix} \\\\\n"
"        0 \\begin{pmatrix}\n"
"            1  \\\\\n"
"            0\n"
"        \\end{pmatrix}\n"
"    \\end{pmatrix} = \\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\\\0 \\end{pmatrix}~~~\\left|{01}\\right\\rangle = \\begin{pmatrix}\n"
"    1 \\begin{pmatrix}\n"
"    0 \\\\\n"
"    1\n"
"    \\end{pmatrix} \\\\\n"
"    0 \\begin{pmatrix}\n"
"    0  \\\\\n"
"    1\n"
"    \\end{pmatrix}\n"
"    \\end{pmatrix} = \\begin{pmatrix}0 \\\\ 1 \\\\ 0 \\\\ 0 \\end{pmatrix}\\end{split}\n"
"\\end{equation}"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1945
msgid "\\begin{equation}\\begin{split}\\left|{10}\\right\\rangle = \\begin{pmatrix}\n"
"    0\\begin{pmatrix}\n"
"    1  \\\\\n"
"    0\n"
"    \\end{pmatrix} \\\\\n"
"    1\\begin{pmatrix}\n"
"    1 \\\\\n"
"    0\n"
"    \\end{pmatrix}\n"
"    \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 0 \\\\ 1 \\\\ 0 \\end{pmatrix}~~~   \\left|{11}\\right\\rangle = \\begin{pmatrix}\n"
"    0 \\begin{pmatrix}\n"
"    0  \\\\\n"
"    1\n"
"    \\end{pmatrix} \\\\\n"
"    1\\begin{pmatrix}\n"
"    0  \\\\\n"
"    1\n"
"    \\end{pmatrix}\n"
"    \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 0 \\\\ 0 \\\\1 \\end{pmatrix}\\end{split}\n"
"\\end{equation}."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1968
msgid "Note we've introduced a shorthand for the tensor product of basis vectors, wherein :math:`\\left|0\\right\\rangle \\otimes \\left|0\\right\\rangle` is written as :math:`\\left|00\\right\\rangle`. The state of an :math:`n`-qubit system can be described using the :math:`n`-fold tensor product of single-qubit basis vectors. Notice that the basis vectors for a 2-qubit system are 4-dimensional; in general, the basis vectors of an :math:`n`-qubit system are :math:`2^{n}`-dimensional, as noted earlier."
msgstr "ここでは、基底ベクトルの略記を導入します。:math:`\\left|0\\right\\rangle \\otimes \\left|0\\right\\rangle` は :math:`\\left|00\\right\\rangle` と表現されます。 :math:`n` 量子ビット系の状態は、単一量子ビットベクトルの :math:`n` 階のテンソル積を使って書き下すことができます。2量子ビット系の基底ベクトルは、4次元になります。前に述べたように、一般に、 :math:`n` 量子ビット系の基底ベクトルは、 :math:`2^{n}` 次元になります。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1971
msgid "Basis vector ordering in Qiskit"
msgstr "Qiskitにおける基底ベクトル表記の順番"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1973
msgid "Within the physics community, the qubits of a multi-qubit systems are typically ordered with the first qubit on the left-most side of the tensor product and the last qubit on the right-most side. For instance, if the first qubit is in state :math:`\\left|0\\right\\rangle` and second is in state :math:`\\left|1\\right\\rangle`, their joint state would be :math:`\\left|01\\right\\rangle`. Qiskit uses a slightly different ordering of the qubits, in which the qubits are represented from the most significant bit (MSB) on the left to the least significant bit (LSB) on the right (little-endian). This is similar to bitstring representation on classical computers, and enables easy conversion from bitstrings to integers after measurements are performed. For the example just given, the joint state would be represented as :math:`\\left|10\\right\\rangle`. Importantly, *this change in the representation of multi-qubit states affects the way multi-qubit gates are represented in Qiskit*, as discussed below."
msgstr "物理コミュニティでは、複数量子ビット系の量子ビットは通常、テンソル積の左端に最初の量子ビットがあり、右端に最後の量子ビットが来るように順序づけられています。例えば、最初の量子ビットの状態が :math:`\\left|0\\right\\rangle` で、2番目のものが :math:`\\left|1\\right\\rangle` の状態のとき、それらの結合状態は :math:`\\left|01\\right\\rangle` のようになります。Qiskitでは少し異なる量子ビットの順番をとります。左に最上位ビット(most significant bit、MSB)をとり、右に最下位ビット(least significant bit、LSB)をとるように表されます(リトルエンディアン)。これは古典コンピュータにおけるビット列表現と似ていて、測定が行われた後のビット列から整数への変換が容易になります。上記の例では、結合状態は :math:`\\left|10\\right\\rangle` と表されます。重要なのは、以下で説明されるように、*複数量子ビットの状態の表現のこの変更が、Qiskitでの複数量子ビットゲートの表現方法に影響がある*ということです。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1976
msgid "The representation used in Qiskit enumerates the basis vectors in increasing order of the integers they represent. For instance, the basis vectors for a 2-qubit system would be ordered as :math:`\\left|00\\right\\rangle`, :math:`\\left|01\\right\\rangle`, :math:`\\left|10\\right\\rangle`, and :math:`\\left|11\\right\\rangle`. Thinking of the basis vectors as bit strings, they encode the integers 0,1,2 and 3, respectively."
msgstr "Qiskitで使用される表現は、基底ベクトルをそれらが表す整数の昇順で列挙します。たとえば、2量子ビット系の基底ベクトルは、:math:`\\left|00\\right\\rangle`、:math:`\\left|01\\right\\rangle`、:math:`\\left|10\\right\\rangle`、および :math:`\\left|11\\right\\rangle` の順序になります。基底ベクトルをビット文字列と見なし、それぞれを整数の 0、1、2、3 にエンコードします。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1979
msgid "Controlled operations on qubits"
msgstr "量子ビットに対する制御操作"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1981
msgid "A common multi-qubit gate involves the application of a gate to one qubit, conditioned on the state of another qubit. For instance, we might want to flip the state of the second qubit when the first qubit is in :math:`\\left|0\\right\\rangle`. Such gates are known as *controlled gates*. The standard multi-qubit gates consist of two-qubit gates and three-qubit gates. The two-qubit gates are: - controlled Pauli gates - controlled Hadamard gate - controlled rotation gates - controlled phase gate - controlled u3 gate - swap gate"
msgstr "複数 qubit ゲートに共通なものとして、一つの qubit にゲートを適用し、別の qubit の状態に応じて制御するというものがあります。例えば、最初の qubit が :math:`\\left|0\\right\\rangle` の時に、2つ目の qubit の状態をフリップしたい場合があります。このようなゲートは *制御ゲート* と知られています。標準的な複数 qubit ゲートは 2 qubit ゲートと 3 qubit ゲートから構成されています。2 qubit ゲートは： - 制御パウリゲート -制御アダマールゲート - 制御回転ゲート - 制御位相ゲート - 制御 u3 ゲート -スワップゲート です。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1984
msgid "The three-qubit gates are: - Toffoli gate - Fredkin gate"
msgstr "3量子ビットゲートは: - トフォリゲート -フレドキンゲートです。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1996
msgid "Two-qubit gates"
msgstr "2量子ビット(two-qubit) ゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:1998
msgid "Most of the two-qubit gates are of the controlled type (the SWAP gate being the exception). In general, a controlled two-qubit gate :math:`C_{U}` acts to apply the single-qubit unitary :math:`U` to the second qubit when the state of the first qubit is in :math:`\\left|1\\right\\rangle`. Suppose :math:`U` has a matrix representation"
msgstr "多くの2量子ビットゲートは制御タイプのものです（SWAP ゲートは例外になります）。一般的に、制御2量子ビットゲート :math:`C_{U}` は　最初の量子ビットが :math:`\\left|1\\right\\rangle` の時に、2つ目の量子ビットに対して単独量子ビット :math:`U` を適用します。 :math:`U` が以下の行列表示であるとします。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2000
msgid "U = \\begin{pmatrix} u_{00} & u_{01} \\\\ u_{10} & u_{11}\\end{pmatrix}.\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2002
msgid "We can work out the action of :math:`C_{U}` as follows. Recall that the basis vectors for a two-qubit system are ordered as :math:`\\left|00\\right\\rangle, \\left|01\\right\\rangle, \\left|10\\right\\rangle, \\left|11\\right\\rangle`. Suppose the **control qubit** is **qubit 0** (which, according to Qiskit's convention, is one the *right-hand* side of the tensor product). If the control qubit is in :math:`\\left|1\\right\\rangle`, :math:`U` should be applied to the **target** (qubit 1, on the *left-hand* side of the tensor product). Therefore, under the action of :math:`C_{U}`, the basis vectors are transformed according to"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2005
msgid "\\begin{align*}\n"
"C_{U}: \\underset{\\text{qubit}~1}{\\left|0\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|0\\right\\rangle} &\\rightarrow \\underset{\\text{qubit}~1}{\\left|0\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|0\\right\\rangle}\\\\\n"
"C_{U}: \\underset{\\text{qubit}~1}{\\left|0\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|1\\right\\rangle} &\\rightarrow \\underset{\\text{qubit}~1}{U\\left|0\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|1\\right\\rangle}\\\\\n"
"C_{U}: \\underset{\\text{qubit}~1}{\\left|1\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|0\\right\\rangle} &\\rightarrow \\underset{\\text{qubit}~1}{\\left|1\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|0\\right\\rangle}\\\\\n"
"C_{U}: \\underset{\\text{qubit}~1}{\\left|1\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|1\\right\\rangle} &\\rightarrow \\underset{\\text{qubit}~1}{U\\left|1\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|1\\right\\rangle}\\\\\n"
"\\end{align*}."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2014
msgid "In matrix form, the action of :math:`C_{U}` is"
msgstr "行列形式では、 :math:`C_{U}` の作用は"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2016
msgid "\\begin{equation}\n"
"    C_U = \\begin{pmatrix}\n"
"    1 & 0 & 0 & 0 \\\\\n"
"    0 & u_{00} & 0 & u_{01} \\\\\n"
"    0 & 0 & 1 & 0 \\\\\n"
"    0 & u_{10} &0 & u_{11}\n"
"        \\end{pmatrix}.\n"
"\\end{equation}"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2027
msgid "To work out these matrix elements, let"
msgstr "これらのマトリックス要素を処理するには、"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2029
msgid "C_{(jk), (lm)} = \\left(\\underset{\\text{qubit}~1}{\\left\\langle j \\right|} \\otimes \\underset{\\text{qubit}~0}{\\left\\langle k \\right|}\\right) C_{U} \\left(\\underset{\\text{qubit}~1}{\\left| l \\right\\rangle} \\otimes \\underset{\\text{qubit}~0}{\\left| m \\right\\rangle}\\right),\n\n"
msgstr "C_{(jk), (lm)} = \\left(\\underset{\\text{qubit}~1}{\\left\\langle j \\right|} \\otimes \\underset{\\text{qubit}~0}{\\left\\langle k \\right|}\\right) C_{U} \\left(\\underset{\\text{qubit}~1}{\\left| l \\right\\rangle} \\otimes \\underset{\\text{qubit}~0}{\\left| m \\right\\rangle}\\right),\n\n"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2031
msgid "compute the action of :math:`C_{U}` (given above), and compute the inner products."
msgstr "として、 :math:`C_{U}` (上記のもの)を作用させ、内積を計算することで導出されます。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2033
msgid "As shown in the examples below, this operation is implemented in Qiskit as ``cU(q[0],q[1])``."
msgstr "以下の例に示すように、この操作は Qiskit では ``cU(q[0],q[1])`` として実装されています。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2035
msgid "If **qubit 1 is the control and qubit 0 is the target**, then the basis vectors are transformed according to"
msgstr "もし **量子ビット1 が制御で、量子ビット 0 が ターゲット** の場合には、基底ベクトルは次のもので変換されます。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2037
msgid "\\begin{align*}\n"
"C_{U}: \\underset{\\text{qubit}~1}{\\left|0\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|0\\right\\rangle} &\\rightarrow \\underset{\\text{qubit}~1}{\\left|0\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|0\\right\\rangle}\\\\\n"
"C_{U}: \\underset{\\text{qubit}~1}{\\left|0\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|1\\right\\rangle} &\\rightarrow \\underset{\\text{qubit}~1}{\\left|0\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|1\\right\\rangle}\\\\\n"
"C_{U}: \\underset{\\text{qubit}~1}{\\left|1\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|0\\right\\rangle} &\\rightarrow \\underset{\\text{qubit}~1}{\\left|1\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{U\\left|0\\right\\rangle}\\\\\n"
"C_{U}: \\underset{\\text{qubit}~1}{\\left|1\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{\\left|1\\right\\rangle} &\\rightarrow \\underset{\\text{qubit}~1}{\\left|1\\right\\rangle}\\otimes \\underset{\\text{qubit}~0}{U\\left|1\\right\\rangle}\\\\\n"
"\\end{align*},"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2046
msgid "which implies the matrix form of :math:`C_{U}` is"
msgstr "この場合の :math:`C_{U}` の行列表示は次のようになります。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2048
msgid "\\begin{equation}\n"
"    C_U = \\begin{pmatrix}\n"
"    1 & 0 & 0  & 0 \\\\\n"
"    0 & 1 & 0 & 0 \\\\\n"
"    0 & 0 & u_{00} & u_{01} \\\\\n"
"    0 & 0 & u_{10} & u_{11}\n"
"        \\end{pmatrix}.\n"
"\\end{equation}"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2079
msgid "Controlled Pauli Gates"
msgstr "制御パウリゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2082
msgid "Controlled-X (or, Controlled-NOT) gate"
msgstr "制御 X (制御NOT) ゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2084
msgid "The Controlled-NOT gate flips the ``target`` qubit when the control qubit is in the state :math:`\\left|1\\right\\rangle`. If we take the MSB as the control qubit (e.g. ``cx(q[1],q[0])``), then the matrix would look like"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2086
msgid "C_X =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 0 & 1\\\\\n"
"0 & 0 & 1 & 0\n"
"\\end{pmatrix}."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2097
msgid "However, when the LSB is the control qubit, (e.g. ``cx(q[0],q[1])``), this gate is equivalent to the following matrix:"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2099
msgid "C_X =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 0 & 0 & 1\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 1 & 0 & 0\n"
"\\end{pmatrix}."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2231
msgid "Controlled :math:`Y` gate"
msgstr "制御 :math:`Y` ゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2233
msgid "Apply the :math:`Y` gate to the target qubit if the control qubit is the MSB"
msgstr "制御量子ビットが MSB の場合、ターゲット量子ビットに :math:`Y` ゲートを適用します。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2235
msgid "C_Y =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 0 & -i\\\\\n"
"0 & 0 & i & 0\n"
"\\end{pmatrix},"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2246
msgid "or when the LSB is the control"
msgstr "あるいはLSBを制御にした場合"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2248
msgid "C_Y =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 0 & 0 & -i\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & i & 0 & 0\n"
"\\end{pmatrix}."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2380
msgid "Controlled :math:`Z` (or, controlled Phase-Flip) gate"
msgstr "制御 :math:`Z` （または、制御位相反転）ゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2382
msgid "Similarly, the controlled Z gate flips the phase of the target qubit if the control qubit is :math:`\\left|1\\right\\rangle`. The matrix looks the same regardless of whether the MSB or LSB is the control qubit:"
msgstr "同様に、制御量子ビットが :math:`\\left|1\\right\\rangle` である場合には、制御された Z ゲートがターゲット量子ビットの位相を反転させます。 この行列は、 MSB または LSB が制御量子ビットかどうかに関係なく、同じになります。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2384
msgid "C_Z =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & -1\n"
"\\end{pmatrix}"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2516
msgid "Controlled Hadamard gate"
msgstr "制御アダマールゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2518
msgid "Apply :math:`H` gate to the target qubit if the control qubit is :math:`\\left|1\\right\\rangle`. Below is the case where the control is the LSB qubit."
msgstr "制御量子ビットが :math:`\\left|1\\right\\rangle` のとき、ターゲット量子ビットに :math:`H` ゲートを適用します。制御がLSB量子ビットの時、以下の通りになります。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2520
msgid "C_H =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & \\frac{1}{\\sqrt{2}} & 0 & \\frac{1}{\\sqrt{2}}\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & \\frac{1}{\\sqrt{2}}  & 0& -\\frac{1}{\\sqrt{2}}\n"
"\\end{pmatrix}"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2652
msgid "Controlled rotation gates"
msgstr "制御回転ゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2655
msgid "Controlled rotation around Z-axis"
msgstr "Z軸周りの制御された回転"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2657
msgid "Perform rotation around Z-axis on the target qubit if the control qubit (here LSB) is :math:`\\left|1\\right\\rangle`."
msgstr "制御量子ビット(ここではLSB)が :math:`\\left|1\\right\\rangle` の場合、ターゲット量子ビットでZ軸周りの回転を実行します。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2659
msgid "C_{Rz}(\\lambda) =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & e^{-i\\lambda/2} & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^{i\\lambda/2}\n"
"\\end{pmatrix}"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2791
msgid "Controlled phase rotation"
msgstr "制御位相回転"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2793
msgid "Perform a phase rotation if both qubits are in the :math:`\\left|11\\right\\rangle` state. The matrix looks the same regardless of whether the MSB or LSB is the control qubit."
msgstr "両方の量子ビットが :math:`\\left|11\\right\\rangle` の状態の場合、位相の回転を実行します。 行列は、MSBまたはLSBが制御量子ビットであるかどうかに関係なく同じに見えます。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2795
msgid "C_{p}(\\lambda) =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^{i\\lambda}\n"
"\\end{pmatrix}"
msgstr "C_{p}(\\lambda) =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^{i\\lambda}\n"
"\\end{pmatrix}"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2927
msgid "Controlled :math:`u` rotation"
msgstr "制御 :math:`u` 回転"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2929
msgid "Perform controlled-:math:`u` rotation on the target qubit if the control qubit (here LSB) is :math:`\\left|1\\right\\rangle`."
msgstr "制御量子ビット（ここではLSB）が :math:`\\left|1\\right\\rangle` の場合、ターゲット量子ビットに対して制御-:math:`u` 回転を実行します。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:2931
msgid "C_{u}(\\theta, \\phi, \\lambda) \\equiv\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & e^{-i(\\phi+\\lambda)/2}\\cos(\\theta/2) & 0 & -e^{-i(\\phi-\\lambda)/2}\\sin(\\theta/2)\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & e^{i(\\phi-\\lambda)/2}\\sin(\\theta/2) & 0 & e^{i(\\phi+\\lambda)/2}\\cos(\\theta/2)\n"
"\\end{pmatrix}."
msgstr "C_{u}(\\theta, \\phi, \\lambda) \\equiv\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & e^{-i(\\phi+\\lambda)/2}\\cos(\\theta/2) & 0 & -e^{-i(\\phi-\\lambda)/2}\\sin(\\theta/2)\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & e^{i(\\phi-\\lambda)/2}\\sin(\\theta/2) & 0 & e^{i(\\phi+\\lambda)/2}\\cos(\\theta/2)\n"
"\\end{pmatrix}."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3063
msgid "SWAP gate"
msgstr "SWAP ゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3065
msgid "The SWAP gate exchanges the two qubits. It transforms the basis vectors as"
msgstr "SWAPゲートは2つの量子ビットを交換します。それは次のように基底ベクトルを変換します。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3067
msgid "\\left|00\\right\\rangle \\rightarrow \\left|00\\right\\rangle~,~\\left|01\\right\\rangle \\rightarrow \\left|10\\right\\rangle~,~\\left|10\\right\\rangle \\rightarrow \\left|01\\right\\rangle~,~\\left|11\\right\\rangle \\rightarrow \\left|11\\right\\rangle,\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3069
msgid "which gives a matrix representation of the form"
msgstr "行列表現は以下の通りです。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3071
msgid "\\mathrm{SWAP} =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 0 & 1\n"
"\\end{pmatrix}."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3203
msgid "Three-qubit gates"
msgstr "3量子ビット・ゲート"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3205
msgid "There are two commonly-used three-qubit gates. For three qubits, the basis vectors are ordered as"
msgstr "一般に使用されている2つの3量子ビット・ゲートがあります。3量子ビットにおいて、基底ベクトルは以下の順番になります。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3207
msgid "\\left|000\\right\\rangle, \\left|001\\right\\rangle, \\left|010\\right\\rangle, \\left|011\\right\\rangle, \\left|100\\right\\rangle, \\left|101\\right\\rangle, \\left|110\\right\\rangle, \\left|111\\right\\rangle,\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3209
msgid "which, as bitstrings, represent the integers :math:`0,1,2,\\cdots, 7`. Again, Qiskit uses a representation in which the first qubit is on the right-most side of the tensor product and the third qubit is on the left-most side:"
msgstr "ビット・ストリングは、整数 :math:`0,1,2,\\cdots, 7` を表します。繰り返しになりますが、Qiskitは最初の量子ビットがテンソル積の右端にあり、3番目の量子ビットが左端にあるという表現を使用します:"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3211
msgid "\\left|abc\\right\\rangle : \\underset{\\text{qubit 2}}{\\left|a\\right\\rangle}\\otimes \\underset{\\text{qubit 1}}{\\left|b\\right\\rangle}\\otimes \\underset{\\text{qubit 0}}{\\left|c\\right\\rangle}.\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3223
msgid "Toffoli gate (:math:`ccx` gate)"
msgstr "Toffoliゲート( :math:`ccx` ゲート)"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3225
msgid "The `Toffoli gate <https://en.wikipedia.org/wiki/Quantum_logic_gate#Toffoli_(CCNOT)_gate>`__ flips the third qubit if the first two qubits (LSB) are both :math:`\\left|1\\right\\rangle`:"
msgstr "`Toffoliゲート <https://en.wikipedia.org/wiki/Quantum_logic_gate#Toffoli_(CCNOT)_gate>`__ は、最初の2つの量子ビット(LSB)がどちらも :math:`\\left|1\\right\\rangle` のとき、3番目の量子ビットを反転します:"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3227
msgid "\\left|abc\\right\\rangle \\rightarrow \\left|bc\\oplus a\\right\\rangle \\otimes \\left|b\\right\\rangle \\otimes \\left|c\\right\\rangle.\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3229
msgid "In matrix form, the Toffoli gate is"
msgstr "行列形式では、トフォリゲートは"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3231
msgid "C_{CX} =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0 & 0 & 0 & 0 & 0\\\\\n"
"0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\\\\n"
"0 & 0 & 0 & 0 & 1 & 0 & 0 & 0\\\\\n"
"0 & 0 & 0 & 0 & 0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 0 & 0 & 0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & 1 & 0 & 0 & 0 & 0\n"
"\\end{pmatrix}."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3397
msgid "Controlled swap gate (Fredkin Gate)"
msgstr "制御SWAPゲート (Fredkinゲート)"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3399
msgid "The `Fredkin gate <https://en.wikipedia.org/wiki/Quantum_logic_gate#Fredkin_(CSWAP)_gate>`__, or the *controlled swap gate*, exchanges the second and third qubits if the first qubit (LSB) is :math:`\\left|1\\right\\rangle`:"
msgstr "`Fredkinゲート <https://en.wikipedia.org/wiki/Quantum_logic_gate#Fredkin_(CSWAP)_gate>`__、または *制御SWAPゲート* は、最初の量子ビット(LSB)が :math:`\\left|1\\right\\rangle` のとき、2番目と3番目の量子ビットを交換します:"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3401
msgid "\\left|abc\\right\\rangle \\rightarrow \\begin{cases} \\left|bac\\right\\rangle~~\\text{if}~c=1 \\cr \\left|abc\\right\\rangle~~\\text{if}~c=0 \\end{cases}.\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3403
msgid "In matrix form, the Fredkin gate is"
msgstr "行列形式では、Fredkinゲートは以下の通りになります。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3405
msgid "C_{\\mathrm{SWAP}} =\n"
"\\begin{pmatrix}\n"
"1 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0 & 0 & 0 & 0 & 0\\\\\n"
"0 & 0 & 0 & 0 & 0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 0 & 0 & 1 & 0 & 0 & 0\\\\\n"
"0 & 0 & 0 & 1 & 0 & 0 & 0 & 0\\\\\n"
"0 & 0 & 0 & 0 & 0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\n"
"\\end{pmatrix}."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3561
msgid "Non-unitary operations"
msgstr "非ユニタリ操作"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3563
msgid "Now that we have gone through all the unitary operations in quantum circuits, we also have access to non-unitary operations. These include measurements, reset of qubits, and classical conditional operations."
msgstr "ここまで、量子回路におけるすべてのユニタリ操作について見てきましたが、非ユニタリ操作についても見ていきましょう。ここでは、測定、キュービットのリセット、そして古典的条件付き操作が含まれます。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3588
msgid "We don't have access to all the information when we make a measurement in a quantum computer. The quantum state is projected onto the standard basis. Below are two examples showing a circuit that is prepared in a basis state and the quantum computer prepared in a superposition state."
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3702
msgid "The simulator predicts that 100 percent of the time the classical register returns 0."
msgstr "シミュレーターは古典レジスタが0を返す確率が100%であることを予測しています。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3816
msgid "The simulator predicts that 50 percent of the time the classical register returns 0 or 1."
msgstr "シミュレーターは古典レジスタが0もしくは1を返す確率が50%であることを予測しています。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:3830
msgid "It is also possible to ``reset`` qubits to the :math:`\\left|0\\right\\rangle` state in the middle of computation. Note that ``reset`` is not a Gate operation, since it is irreversible."
msgstr "リセット演算子はキュービットを計算の途中で :math:`\\left|0\\right\\rangle` 状態に ``リセット`` することができます。ここでの ``リセット`` は、不可逆なのでゲート操作ではないことに注意してください。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4048
msgid "Here we see that for both of these circuits the simulator always predicts that the output is 100 percent in the 0 state."
msgstr "ここで、両方の回路においてシミュレーターは出力が100%の確率で0状態であることを常に予測することが確認できます。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4060
msgid "Conditional operations"
msgstr "条件付き操作"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4062
msgid "It is also possible to do operations conditioned on the state of the classical register"
msgstr "古典レジスタの状態に応じて操作を行うことも可能です。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4144
msgid "Here the classical bit always takes the value 0 so the qubit state is always flipped."
msgstr "ここでは古典ビットは常に値0をとるので、量子ビットの状態は常に反転されます。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4300
msgid "Here the classical bit by the first measurement is random but the conditional operation results in the qubit being deterministically put into :math:`\\left|1\\right\\rangle`."
msgstr "ここで、最初の測定による古典ビットはランダムですが、条件付きの演算の結果は、量子ビットは決定論的に :math:`\\left|1\\right\\rangle` になります。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4312
msgid "Arbitrary initialization"
msgstr "任意の初期化"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4314
msgid "What if we want to initialize a qubit register to an arbitrary state? An arbitrary state for :math:`n` qubits may be specified by a vector of :math:`2^n` amplitudes, where the sum of amplitude-norms-squared equals 1. For example, the following three-qubit state can be prepared:"
msgstr "量子ビットのレジスターを任意の状態に初期化したい場合はどうなりますか？ :math:`n` 量子ビットの任意の状態は、:math:`2^n` の振幅のベクトルで指定できます。ここで、振幅 - ノルム - 平方の合計は1です。例えば、次の3量子ビットの状態を用意するには以下のようにします："

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4316
msgid "\\left|\\psi\\right\\rangle = \\frac{i}{4}\\left|000\\right\\rangle + \\frac{1}{\\sqrt{8}}\\left|001\\right\\rangle + \\frac{1+i}{4}\\left|010\\right\\rangle + \\frac{1+2i}{\\sqrt{8}}\\left|101\\right\\rangle + \\frac{1}{4}\\left|110\\right\\rangle\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4464
msgid "`Fidelity <https://en.wikipedia.org/wiki/Fidelity_of_quantum_states>`__ is useful to check whether two states are the same or not. For quantum (pure) states :math:`\\left|\\psi_1\\right\\rangle` and :math:`\\left|\\psi_2\\right\\rangle`, the fidelity is"
msgstr "`Fidelity(忠実度) <https://en.wikipedia.org/wiki/Fidelity_of_quantum_states>`_ は、2つの状態が同じかどうかを確認するのに役立ちます。 （純粋な）量子状態 :math:`\\left|\\psi_1\\right\\rangle` と :math:`\\left|\\psi_2\\right\\rangle`,の場合、Fidelity (忠実度) 度は"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4466
msgid "F\\left(\\left|\\psi_1\\right\\rangle,\\left|\\psi_2\\right\\rangle\\right) = \\left|\\left\\langle\\psi_1\\middle|\\psi_2\\right\\rangle\\right|^2."
msgstr "F\\left(\\left|\\psi_1\\right\\rangle,\\left|\\psi_2\\right\\rangle\\right) = \\left|\\left\\langle\\psi_1\\middle|\\psi_2\\right\\rangle\\right|^2."

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4471
msgid "The fidelity is equal to :math:`1` if and only if two states are equal."
msgstr "2つの状態が同じ場合に限り、忠実度は :math:`1` に等しくなります。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4518
msgid "Further details:"
msgstr "更に詳細な説明："

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4520
msgid "How does the desired state get generated behind the scenes? There are multiple methods for doing this. Qiskit uses a `method proposed by Shende et al <https://arxiv.org/abs/quant-ph/0406176>`__. Here, the idea is to assume the quantum register to have started from our desired state, and construct a circuit that takes it to the :math:`\\left|00..0\\right\\rangle` state. The initialization circuit is then the reverse of such circuit."
msgstr "裏では、どのようにして目的の状態が生成されるのでしょうか。 複数の方法がありますが、 Qiskitは `Shendeらによって提案された方法 <https://arxiv.org/abs/quant-ph/0406176>`__ を使っています。 これは、量子レジスタが我々の望む状態から始まったと仮定し、それを :math:`\\left|00..0\\right\\rangle` の状態にする回路を構築するアイデイアです。 初期化回路はこの回路の逆になります。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4522
msgid "To take an arbitrary quantum state to the zero state in the computational basis, we perform an iterative procedure that disentangles qubits from the register one-by-one. We know that any arbitrary single-qubit state :math:`\\left|\\rho\\right\\rangle` can be taken to the :math:`\\left|0\\right\\rangle` state using a :math:`\\phi`-degree rotation about the Z axis followed by a :math:`\\theta`-degree rotation about the Y axis:"
msgstr "任意の量子状態を計算基底のゼロ状態にするために、1つずつレジスターから量子ビットのもつれをほどく反復的な手順を行ないます。任意の1量子ビット状態 :math:`\\left|\\rho\\right\\rangle` は次のようにZ軸まわりの :math:`\\phi` 度回転とY軸まわりの :math:`\\theta` 度回転を用いることで :math:`\\left|0\\right\\rangle` 状態にすることができます。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4524
msgid "R_y(-\\theta)R_z(-\\phi)\\left|\\rho\\right\\rangle = re^{it}\\left|0\\right\\rangle\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4526
msgid "Since now we are dealing with :math:`n` qubits instead of just 1, we must factorize the state vector to separate the Least Significant Bit (LSB):"
msgstr "ここからは、1量子ビットの代わりに :math:`n` 量子ビットを扱うと、状態ベクトルを分解して最下位ビット(LSB)方式で分離する必要があります。"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4528
msgid "\\begin{align*}\n"
" \\left|\\psi\\right\\rangle =& \\alpha_{0_0}\\left|00..00\\right\\rangle + \\alpha_{0_1}\\left|00..01\\right\\rangle + \\alpha_{1_0}\\left|00..10\\right\\rangle + \\alpha_{1_1}\\left|00..11\\right\\rangle + ... \\\\&+ \\alpha_{(2^{n-1}-1)_0}\\left|11..10\\right\\rangle + \\alpha_{(2^{n-1}-1)_1}\\left|11..11\\right\\rangle \\\\\n"
"=& \\left|00..0\\right\\rangle (\\alpha_{0_0}\\left|0\\right\\rangle + \\alpha_{0_1}\\left|1\\right\\rangle) + \\left|00..1\\right\\rangle (\\alpha_{1_0}\\left|0\\right\\rangle + \\alpha_{1_1}\\left|1\\right\\rangle) + ... \\\\&+ \\left|11..1\\right\\rangle (\\alpha_{(2^{n-1}-1)_0}(\\left|0\\right\\rangle + \\alpha_{(2^{n-1}-1)_1}\\left|1\\right\\rangle) \\\\\n"
"=& \\left|00..0\\right\\rangle\\left|\\rho_0\\right\\rangle + \\left|00..1\\right\\rangle\\left|\\rho_1\\right\\rangle + ... + \\left|11..1\\right\\rangle\\left|\\rho_{2^{n-1}-1}\\right\\rangle\n"
"\\end{align*}"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4536
msgid "Now each of the single-qubit states :math:`\\left|\\rho_0\\right\\rangle, ..., \\left|\\rho_{2^{n-1}-1}\\right\\rangle` can be taken to :math:`\\left|0\\right\\rangle` by finding appropriate :math:`\\phi` and :math:`\\theta` angles per the equation above. Doing this simultaneously on all states amounts to the following unitary, which disentangles the LSB:"
msgstr "ここで、それぞれの1量子ビット状態 :math:`\\left|\\rho_0\\right\\rangle, ..., \\left|\\rho_{2^{n-1}-1}\\right\\rangle` は、 上の式に従って適切な角度 :math:`\\phi` と :math:`\\theta` を見つけることで :math:`\\left|0\\right\\rangle` に取れます。 すべての状態でこれを同時に行うことは、最下位ビットの量子もつれをほどくユニタリ行列は次のようになります："

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4538
msgid "U = \\begin{pmatrix}\n"
"R_{y}(-\\theta_0)R_{z}(-\\phi_0) & & & &\\\\\n"
"& R_{y}(-\\theta_1)R_{z}(-\\phi_1) & & &\\\\\n"
"& . & & &\\\\\n"
"& & . & &\\\\\n"
"& & & & R_y(-\\theta_{2^{n-1}-1})R_z(-\\phi_{2^{n-1}-1})\n"
"\\end{pmatrix}"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4548
msgid "Hence,"
msgstr "よって"

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4550
msgid "U\\left|\\psi\\right\\rangle = \\begin{pmatrix} r_0e^{it_0}\\\\ r_1e^{it_1}\\\\ . \\\\ . \\\\ r_{2^{n-1}-1}e^{it_{2^{n-1}-1}} \\end{pmatrix}\\otimes\\left|0\\right\\rangle\n\n"
msgstr ""

#: ../../tutorials/circuits/3_summary_of_quantum_operations.ipynb:4552
msgid "U can be implemented as a \"quantum multiplexor\" gate, since it is a block diagonal matrix. In the quantum multiplexor formalism, a block diagonal matrix of size :math:`2^n \\times 2^n`, and consisting of :math:`2^s` blocks, is equivalent to a multiplexor with :math:`s` select qubits and :math:`n-s` data qubits. Depending on the state of the select qubits, the corresponding blocks are applied to the data qubits. A multiplexor of this kind can be implemented after recursive decomposition to primitive gates of cx, rz and ry."
msgstr ""

