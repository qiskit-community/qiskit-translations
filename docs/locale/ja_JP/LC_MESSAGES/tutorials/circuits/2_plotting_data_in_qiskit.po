msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-07 16:27+0000\n"
"PO-Revision-Date: 2020-12-10 20:58\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits/2_plotting_data_in_qiskit.po\n"
"X-Crowdin-File-ID: 9116\n"
"Language: ja_JP\n"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:10
msgid "This page was generated from `tutorials/circuits/2_plotting_data_in_qiskit.ipynb`__."
msgstr "当ページは `tutorials/circuits/2_plotting_data_in_qiskit.ipynb`__ から生成されました。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/circuits/2_plotting_data_in_qiskit.ipynb>`_."
msgstr "`IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/circuits/2_plotting_data_in_qiskit.ipynb>`_ でインタラクティブに実行します。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:9
msgid "Qiskit Visualizations"
msgstr "Qiskit 可視化ツール"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:33
msgid "Plot histogram"
msgstr "ヒストグラムのプロット"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:35
msgid "To visualize the data from a quantum circuit run on a real device or ``qasm_simulator`` we have made a simple function"
msgstr "実デバイスまたは ``qasm_simulator`` 上で実行される量子回路からのデータを可視化するために、シンプルな関数を用意しています。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:37
msgid "``plot_histogram(data)``"
msgstr "``plot_histogram(data)``"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:39
msgid "As an example we make a 2-qubit Bell state"
msgstr "例として、2量子ビットのベル状態を作ります。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:112
msgid "Options when plotting a histogram"
msgstr "ヒストグラムをプロットするときのオプション"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:114
msgid "The ``plot_histogram()`` has a few options to adjust the output graph. The first option is the ``legend`` kwarg. This is used to provide a label for the executions. It takes a list of strings use to label each execution’s results. This is mostly useful when plotting multiple execution results in the same histogram. The ``sort`` kwarg is used to adjust the order the bars in the histogram are rendered. It can be set to either ascending order with ``asc`` or descending order with ``dsc``. The ``number_to_keep`` kwarg takes an integer for the number of terms to show, the rest are grouped together in a single bar called rest. You can adjust the color of the bars with the ``color`` kwarg which either takes a string or a list of strings for the colors to use for the bars for each execution. You can adjust whether labels are printed above the bars or not with the ``bar_labels`` kwarg. The last option available is the ``figsize`` kwarg which takes a tuple of the size in inches to make the output figure."
msgstr "``plot_histogram()`` には出力グラフの調整のためのいくつかのオプションがあります。最初のオプションは ``legend`` kwarg (可変長引数) です。これは実行のラベル指定に利用します。特に同じヒストグラム中の複数の実行結果をプロットする場合に有益です。``sort`` kwarg はヒストグラム描画においてバーの順番を調整します。 ``asc`` 昇順 か ``dsc`` 降順のどちらかを指定できます。 ``number_to_keep`` kwarg は表示の項目数を指定します。それ以外は rest と呼ばれるバーに集約されます。``color`` kwarg はバーの配色を調整します。各実行のバーに利用される配色の文字列か文字列のリストを指定します。``bar_labels`` kwarg ではバーの上にラベルを表示するかを調整できます。最後のオプションは ``figsize`` kwarg で、出力図形のサイズをインチで指定したタプルです。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:172
msgid "Using the output from plot_histogram()"
msgstr "plot_histogram() による出力の使用"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:174
msgid "When using the plot_histogram() function it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object from ``plot_histogram()`` to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png``. The ``savefig()`` method takes a path so you can adjust the location and filename where you’re saving the output."
msgstr "視覚化のために plot_histogram() 関数を呼び出した場合の返り値は ``matplotlib.Figure`` です。Jupyter notebook は返り値の型を理解するので、このチュートリアルでは表示されますが、Jupyter 以外で実行する場合にはこの機能は自動的には使えません。``matplotlib.Figure`` クラス自体は視覚化されたものを表示、保存する機能をもともと持っています。``plot_histogram()`` からの返り値オブジェクトに対して ``.show()`` を呼び出すとイメージが新しいウィンドウで開きます (matplotlib バックエンドをインタラクティブに設定していることを想定)。あるいは ``.savefig('out.png')`` で 図を ``out.png`` に保存できます。``savefig()`` メソッドはパスを引数に取り、保存しようとしている図の場所やファイル名を指定できます。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:187
msgid "Plot State"
msgstr "状態のプロット"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:198
msgid "In many situations you want to see the state of a quantum computer. This could be for debugging. Here we assume you have this state (either from simulation or state tomography) and the goal is to visualize the quantum state. This requires exponential resources, so we advise to only view the state of small quantum systems. There are several functions for generating different types of visualization of a quantum state"
msgstr "多くの状況において、量子コンピューターの状態を見たいことがあるでしょう。デバッグ用途などが考えられます。ここでは、ある状態（シミュレーションまたは状態トモグラフィーから得られたもの）があり、この量子状態を可視化することが目的であるものと仮定します。可視化には指数関数的なリソースが必要になるため、小さな量子システムの状態表示までに留めてください。量子状態のさまざまなタイプの可視化を生成するため、いくつかの関数があります。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:208
msgid "A quantum state is either a state matrix :math:`\\rho` (Hermitian matrix) or statevector :math:`|\\psi\\rangle` (complex vector). The state matrix is related to the statevector by"
msgstr "量子状態は、状態行列 :math:`\\rho` (エルミート行列) または状態ベクトル :math:`|\\psi\\rangle` (複素ベクトル)で記述されます。状態行列は状態ベクトルと次式の関係にあります。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:210
msgid "\\rho = |\\psi\\rangle\\langle \\psi|,\n\n"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:212
msgid "and is more general as it can represent mixed states (positive sum of statevectors)"
msgstr "そして、混合状態（状態ベクトルの正の和）で表すのが、より一般的です。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:214
msgid "\\rho = \\sum_k p_k |\\psi_k\\rangle\\langle \\psi_k |.\n\n"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:216
msgid "The visualizations generated by the functions are:"
msgstr "関数によって生成される可視化は、以下のとおりです。:"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:218
msgid "``'plot_state_city'``: The standard view for quantum states where the real and imaginary (imag) parts of the state matrix are plotted like a city."
msgstr "``'plot_state_city'``: 状態行列の実部と虚部が都市のようにプロットされている、量子状態の標準的なビュー。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:220
msgid "``'plot_state_qsphere'``: The Qiskit unique view of a quantum state where the amplitude and phase of the state vector are plotted in a spherical ball. The amplitude is the thickness of the arrow and the phase is the color. For mixed states it will show different ``'qsphere'`` for each component."
msgstr "``'plot_state_qsphere'``: 状態ベクトルの振幅と位相が球体にプロットされる、量子状態のQiskit独自ビュー。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:222
msgid "``'plot_state_paulivec'``: The representation of the state matrix using Pauli operators as the basis :math:`\\rho=\\sum_{q=0}^{d^2-1}p_jP_j/d`."
msgstr "``'plot_state_paulivec'``: :math:`\\rho=\\sum_{q=0}^{d^2-1}p_jP_j/d` を基底としたパウリ演算子による状態行列の表現。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:224
msgid "``'plot_state_hinton'``: Same as ``'city'`` but where the size of the element represents the value of the matrix element."
msgstr "``'plot_state_hinton'``: ``'city'`` と同様だが、要素の大きさは行列要素の値を表す。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:226
msgid "``'plot_bloch_multivector'``: The projection of the quantum state onto the single qubit space and plotting on a bloch sphere."
msgstr "``'plot_bloch_multivector'``: 量子状態を単一量子ビット空間へ射影し、ブロッホ球上にプロットする。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:357
msgid "Here we see that there is no information about the quantum state in the single qubit space as all vectors are zero."
msgstr "ここでは、すべてのベクトルがゼロであるため、単一量子ビット空間内には、量子状態に関する情報がないことがわかります。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:369
msgid "Options when using state plotting functions"
msgstr "状態プロット関数を使用するときのオプション"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:371
msgid "The various functions for plotting quantum states provide a number of options to adjust how the plots are rendered. Which options are available depends on the function being used."
msgstr "量子状態をプロットするためのさまざまな関数は、プロットのレンダリング方法を調整するための多くのオプションを提供します。 使用できるオプションは、使用している関数により異なります。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:382
msgid "**plot_state_city()** options"
msgstr "**plot_state_city()** オプション"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:384
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:418
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:451
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:498
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:687
msgid "**title** (str): a string that represents the plot title"
msgstr "**title** (str): プロットのタイトルを表す文字列"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:385
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:419
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:452
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:485
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:499
msgid "**figsize** (tuple): figure size in inches (width, height)."
msgstr "**figsize** (tuple): 図のサイズ。単位はインチ (幅, 高さ)。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:386
msgid "**color** (list): a list of len=2 giving colors for real and imaginary components of matrix elements."
msgstr "**color** (list): 行列要素の実部と虚部の色を指定する、長さ2のリスト。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:416
msgid "**plot_state_hinton()** options"
msgstr "**plot_state_hinton()** オプション"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:449
msgid "**plot_state_paulivec()** options"
msgstr "**plot_state_paulivec()** オプション"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:453
msgid "**color** (list or str): color of the expectation value bars."
msgstr "**color** (list または str): 期待値バーの色。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:483
msgid "**plot_state_qsphere()** options"
msgstr "**plot_state_qsphere()** オプション"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:496
msgid "**plot_bloch_multivector()** options"
msgstr "**plot_bloch_multivector()** オプション"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:530
msgid "Using the output from state plotting functions"
msgstr "状態プロット関数からの出力の使用"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:532
msgid "When using any of the state plotting functions it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png`` in the current working directory. The ``savefig()`` method takes a path so you can adjust the location and filename where you’re saving the output."
msgstr "視覚化のために plot_histogram() 関数を呼び出した場合の返り値は ``matplotlib.Figure`` です。Jupyter notebook は返り値の型を理解するので、このチュートリアルでは表示されますが、Jupyter 以外で実行する場合にはこの機能は自動的には使えません。``matplotlib.Figure`` クラス自体は視覚化されたものを表示、保存する機能をもともと持っています。``plot_histogram()`` から返されたオブジェクトに対して ``.show()`` を呼び出すとイメージが新しいウィンドウで開きます (このときmatplotlib バックエンドをインタラクティブに設定していることを想定) 。あるいは ``.savefig('out.png')`` で 図を ``out.png`` に保存できます。 ``savefig()`` メソッドはパスを引数に取り、保存しようとしている図の場所やファイル名を指定できます。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:545
msgid "Interactive State Plots for Jupyter Notebooks"
msgstr "Jupyter Notebook でのインタラクティブな状態プロット"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:547
msgid "Just like with ``plot_histogram()`` there is a second set of functions for each of the functions to plot the quantum state. These functions have the same name but with a prepended ``i``:"
msgstr "``plot_histogram()`` と同じように、量子状態をプロットする関数ごとに、2番目の関数があります。 これらの関数の名前は同じですが、先頭に ``i`` が追加されます。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:557
msgid "These functions are made using an externally hosted JS library for use in Jupyter notebooks. The interactive plot can only be used if you’re running inside a Jupyter notebook and only if you have external connectivity to the host with the JS library. If you use these functions outside of a Jupyter notebook it will fail."
msgstr "これらの関数は、Jupyter Notebook で使用するために外部でホストされた JSライブラリを使用して作成されます。インタラクティブなプロットは Jupyter Notebook 内での実行かつ、JSライブラリを使用しホストに外部接続している場合のみ使用できます。Jupyter Notebook 外でこれらの関数を使用すると失敗するでしょう。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:640
msgid "Plot Bloch Vector"
msgstr "ブロッホ・ベクトルのプロット"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:642
msgid "A standard way of plotting a quantum system is using the Bloch vector. This only works for a single qubit and takes as input the Bloch vector."
msgstr "量子系をプロットする標準的な方法は、ブロッホ・ベクトルを使用することです。ブロッホ・ベクトルを入力値とするこの方法は、単一の量子ビットにしか適用できません。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:644
msgid "The Bloch vector is defined as :math:`[x = \\mathrm{Tr}[X \\rho], y = \\mathrm{Tr}[Y \\rho], z = \\mathrm{Tr}[Z \\rho]]`, where :math:`X`, :math:`Y`, and :math:`Z` are the Pauli operators for a single qubit and :math:`\\rho` is the state matrix."
msgstr "ブロッホ・ベクトルは :math:`[x = \\mathrm{Tr}[X \\rho], y = \\mathrm{Tr}[Y \\rho], z = \\mathrm{Tr}[Z \\rho]]` として定義されます。:math:`X`、:math:`Y` および :math:`Z` は単一量子ビットのパウリ演算子、:math:`\\rho` は状態行列です。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:685
msgid "Options for plot_bloch_vector()"
msgstr "plot_bloch_vector() のオプション"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:688
msgid "**figsize** (tuple): Figure size in inches (width, height)."
msgstr "**figsize** (tuple): 図のサイズ。単位はインチ (幅, 高さ)。"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:719
msgid "Adjusting the output from plot_bloch_vector()"
msgstr "plot_bloch_vector() の出力の調整"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:721
msgid "When using the ``plot_bloch_vector`` function it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png`` in the current working directory. The ``savefig()`` method takes a path so you can adjust the location and filename where you’re saving the output."
msgstr "視覚化のために ``plot_bloch_vector`` 関数を呼び出した場合の返り値は ``matplotlib.Figure`` です。Jupyter notebook は返り値の型を理解するので、このチュートリアルでは表示されますが、Jupyter 以外で実行する場合にはこの機能は自動的には使えません。``matplotlib.Figure`` クラス自体は視覚化されたものを表示、保存する機能をもともと持っています。返されたオブジェクトに対して ``.show()`` を呼び出すとイメージが新しいウィンドウで開きます (このときmatplotlib バックエンドをインタラクティブに設定していることを想定) 。あるいは ``.savefig('out.png')`` で 図を ``out.png`` に保存できます。 ``savefig()`` メソッドはパスを引数に取り、保存しようとしている図の場所やファイル名を指定できます。"

