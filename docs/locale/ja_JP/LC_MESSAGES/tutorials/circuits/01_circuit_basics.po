msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:25+0000\n"
"PO-Revision-Date: 2023-08-14 19:09\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/circuits/01_circuit_basics.po\n"
"X-Crowdin-File-ID: 9498\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:10
msgid "This page was generated from `tutorials/circuits/01_circuit_basics.ipynb`__."
msgstr "このページは `tutorials/circuits/01_circuit_basics.ipynb`__ から生成されました。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:9
msgid "Circuit Basics"
msgstr "回路の基本"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:11
msgid "Here, we provide an overview of working with Qiskit. Qiskit provides the basic building blocks necessary to program quantum computers. The fundamental unit of Qiskit is the `quantum circuit <https://en.wikipedia.org/wiki/Quantum_circuit>`__. A basic workflow using Qiskit consists of two stages: **Build** and **Run**. **Build** allows you to make different quantum circuits that represent the problem you are solving, and **Run** that allows you to run them on different backends. After the jobs have been run, the data is collected and postprocessed depending on the desired output."
msgstr "ここでは、Qiskitでの作業概要を説明します。Qiskitは、量子コンピューターのプログラミングに必要な、基本構成要素を提供します。Qiskitの基本単位は `量子回路（quantum circuit） <https://en.wikipedia.org/wiki/Quantum_circuit>`__ です。Qiskitを使用した基本的なワークフローは、 **構築** と **実行** の2つのステージで構成されます。 **構築** では、あなたが解きたい問題を表現するさまざまな量子回路を構築でき、 **実行** では、その量子回路をさまざまなバックエンドで実行します。ジョブが実行された後、目的とする出力に応じたデータが収集され、後処理されます。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:36
msgid "Building the circuit"
msgstr "回線の構築"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:38
msgid "The basic element needed for your first program is the QuantumCircuit. We begin by creating a ``QuantumCircuit`` comprised of three qubits."
msgstr "最初のプログラムに必要な基本要素は、QuantumCircuitです。まず、3つの量子ビットで構成される ``QuantumCircuit`` を作成します。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:60
msgid "After you create the circuit with its registers, you can add gates (\"operations\") to manipulate the registers. As you proceed through the tutorials you will find more gates and circuits; below is an example of a quantum circuit that makes a three-qubit GHZ state"
msgstr "レジスタで回路を作成した後、レジスタを操作するためのゲート (\"演算\") を追加することができます。チュートリアルを進めていくと、さらに多くのゲートと回路が見つかります。以下は3量子ビットのGHZ状態を作る量子回路の例です。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:62
msgid "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}.\n\n"
msgstr "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}.\n\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:64
msgid "To create such a state, we start with a three-qubit quantum register. By default, each qubit in the register is initialized to :math:`|0\\rangle`. To make the GHZ state, we apply the following gates: - A Hadamard gate :math:`H` on qubit 0, which puts it into the superposition state :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}`. - A Controlled-NOT operation (:math:`C_{X}`) between qubit 0 and qubit 1. - A Controlled-NOT operation between qubit 0 and qubit 2."
msgstr "このような状態を作成するには、3量子ビットの量子レジスタから始めます。デフォルトでは、レジスタの各量子ビットは :math:`|0\\rangle` に初期化されています。GHZ状態を作成するには、次のゲートを適用します: - 量子ビット0にアダマールゲート :math:`H` を適用して、重ね合わせ状態 :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}` にする。 - 0量子ビットと1量子ビットの間に、制御NOT演算子（ :math:`C_{X}` ）を適用する。 - 0量子ビットと2量子ビットの間に、制御NOT演算子を適用する。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:66
msgid "On an ideal quantum computer, the state produced by running this circuit would be the GHZ state above."
msgstr "理想的な量子コンピューターでは、この回路を実行することによって生成される状態は、上記のGHZ状態になります。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:68
msgid "In Qiskit, operations can be added to the circuit one by one, as shown below."
msgstr "Qiskitでは、以下に示すように、回路に操作を1つずつ追加することができます。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:122
msgid "Visualize Circuit"
msgstr "回路の可視化"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:124
msgid "You can visualize your circuit using Qiskit ``QuantumCircuit.draw()``, which plots the circuit in the form found in many textbooks."
msgstr "Qiskitの ``QuantumCircuit.draw()`` を使うことで、多くの教科書で見られるような形式に回路をプロットし、可視化することができます。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:154
msgid "In this circuit, the qubits are put in order, with qubit zero at the top and qubit two at the bottom. The circuit is read left to right (meaning that gates that are applied earlier in the circuit show up further to the left)."
msgstr "この回路では、量子ビットが順番に配置されており、一番上が量子ビット0、一番下が量子ビット2です。回路は左から右に読みます（つまり、回路の初めに適用されたゲートが左側に表示されます）。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:169
msgid "When representing the state of a multi-qubit system, the tensor order used in Qiskit is different than that used in most physics textbooks. Suppose there are :math:`n` qubits, and qubit :math:`j` is labeled as :math:`Q_{j}`. Qiskit uses an ordering in which the :math:`n^{\\mathrm{th}}` qubit is on the left side of the tensor product, so that the basis vectors are labeled as :math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0`."
msgstr "複数の量子ビットのシステムの状態を表現する際にQiskitで使われるテンソル積の順番は、多くの物理の教科書で使われる順番と異なります。:math:`n` 個の量子ビットがあり、:math:`j` 番目の量子ビットは :math:`Q_{j}` とラベル付けされていると仮定します。Qiskitでは、 :math:`n^{\\mathrm{th}}` 番目の量子ビットはテンソル積の左側にあるので、基底ベクトルは、:math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0` とラベル付けされます。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:171
msgid "For example, if qubit zero is in state 0, qubit 1 is in state 0, and qubit 2 is in state 1, Qiskit would represent this state as :math:`|100\\rangle`, whereas many physics textbooks would represent it as :math:`|001\\rangle`."
msgstr "例えば、量子ビットゼロが0、量子ビット1が0、量子ビット2が1のとき、Qiskitはこの状態を :math:`|100\\rangle` と表現します。一方で、多くの物理の教科書はこの状態を :math:`|001\\rangle` と表現します。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:173
msgid "This difference in labeling affects the way multi-qubit operations are represented as matrices. For example, Qiskit represents a controlled-X (:math:`C_{X}`) operation with qubit 0 being the control and qubit 1 being the target as"
msgstr "このラベリングの違いは、複数量子ビットの演算子が行列として表現されるときの方法に影響します。例えば、Qiskitは制御X (:math:`C_{X}`) 演算子で量子ビット0を制御ビット、量子ビット1をターゲット・ビットとするとき、以下のように表現します。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:175
msgid "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}.\n\n"
msgstr "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}.\n\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:191
msgid "Simulating circuits"
msgstr "回路のシミュレーション"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:193
msgid "To simulate a circuit we use the quant_info module in Qiskit. This simulator returns the quantum state, which is a complex vector of dimensions :math:`2^n`, where :math:`n` is the number of qubits (so be careful using this as it will quickly get too large to run on your machine)."
msgstr "回路をシミュレートするには、Qiskitのquant_infoモジュールを使います。このシミュレーターは、 :math:`2^n` 次元の複素ベクトルである量子状態を返します。ここで :math:`n` は量子ビットの数です（ですので、ご自身のマシンで実行するには大きすぎる数にすぐ到達してしまうことに注意してください）。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:195
msgid "There are two stages to the simulator. The first is to set the input state and the second to evolve the state by the quantum circuit."
msgstr "シミュレーターには 2 つのステージがあります。 1つ目は、入力状態を設定し、2つ目は量子回路で状態を進化させます。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:225
#: ../../tutorials/circuits/01_circuit_basics.ipynb:255
msgid "$$\n\n"
"\\begin{bmatrix}\n"
"\\tfrac{1}{\\sqrt{2}} & 0 & 0 & 0 & 0 & 0 & 0 & \\tfrac{1}{\\sqrt{2}}  \\\\\n"
" \\end{bmatrix}\n"
"$$"
msgstr "$$\n\n"
"\\begin{bmatrix}\n"
"\\tfrac{1}{\\sqrt{2}} & 0 & 0 & 0 & 0 & 0 & 0 & \\tfrac{1}{\\sqrt{2}}  \\\\\n"
" \\end{bmatrix}\n"
"$$"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:272
msgid "Qiskit also provides a visualization toolbox to allow you to view the state."
msgstr "Qiskitには、この結果を見るための視覚化ツールボックスも用意されています。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:274
msgid "Below, we use the visualization function to plot the qsphere and a hinton representing the real and imaginary components of the state density matrix :math:`\\rho`."
msgstr "以下のように、qsphereのプロット、また状態の密度行列である :math:`\\rho` の実数部と虚数部をhinton表示でプロットする機能が使えます。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:324
msgid "Unitary representation of a circuit"
msgstr "回路のユニタリー表現"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:335
msgid "Qiskit's quant_info module also has an operator method which can be used to make a unitary operator for the circuit. This calculates the :math:`2^n \\times 2^n` matrix representing the quantum circuit."
msgstr "Qiskitのquant_infoモジュールには、回路のユニタリー演算子を作成するために使用できる演算子メソッドもあります。 これにより、量子回路を表す :math:`2^n \\times 2^n` 行列が計算されます。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:456
msgid "OpenQASM backend"
msgstr "OpenQASM バックエンド"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:467
msgid "The simulators above are useful because they provide information about the state output by the ideal circuit and the matrix representation of the circuit. However, a real experiment terminates by *measuring* each qubit (usually in the computational :math:`|0\\rangle, |1\\rangle` basis). Without measurement, we cannot gain information about the state. Measurements cause the quantum system to collapse into classical bits."
msgstr "上記のシミュレーションは、理想的な回路と回路の行列表示で状態の情報を出力してくれるため便利です。しかし、実際の実験は、各量子ビットを *測定* することで終了します（一般には計算基底 :math:`|0\\rangle, |1\\rangle` を測定に使います）。測定なしでは、状態の情報を得ることはできません。測定により、量子システムは古典的なビットに崩壊します。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:469
msgid "For example, suppose we make independent measurements on each qubit of the three-qubit GHZ state"
msgstr "例えば、3量子ビットのGHZ状態の各量子ビットを独立に測定するとしましょう。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:471
msgid "|\\psi\\rangle = (|000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"
msgstr "|\\psi\\rangle = (|000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:473
msgid "and let :math:`xyz` denote the bitstring that results. Recall that, under the qubit labeling used by Qiskit, :math:`x` would correspond to the outcome on qubit 2, :math:`y` to the outcome on qubit 1, and :math:`z` to the outcome on qubit 0."
msgstr ":math:`xyz` が結果のビット列を示すとしましょう。 Qiskitで使用される量子ビットのラベリング方法では、:math:`x` は量子ビット2の結果に対応し、:math:`y` は量子ビット1の結果に対応し、そして、 :math:`z` は量子ビット0の結果に対応します。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:479
msgid "Note: This representation of the bitstring puts the most significant bit (MSB) on the left, and the least significant bit (LSB) on the right. This is the standard ordering of binary bitstrings. We order the qubits in the same way (qubit representing the MSB has index 0), which is why Qiskit uses a non-standard tensor product order."
msgstr "注記：このビット文字列の表現では最上位ビットが左側、最下位ビットが右側に配置されます。これは、バイナリビット文字列における標準的な順序です。そのため、同じ方法で量子ビットも並べます（最上位ビットを表す量子ビットのインデックスは0です）。これが、Qiskitが非標準的なテンソル積の順序を使用する理由です。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:485
msgid "Recall the probability of obtaining outcome :math:`xyz` is given by"
msgstr ":math:`xyz` の結果が得られる確率は、以下のように与えられることを思い出してください。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:487
msgid "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"
msgstr "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:489
msgid "and as such for the GHZ state probability of obtaining 000 or 111 are both 1/2."
msgstr "そして、GHZ状態の場合、000または111が得られる確率はどちらも1/2です。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:491
msgid "To simulate a circuit that includes measurement, we need to add measurements to the original circuit above, and use a different Aer backend."
msgstr "測定を含む回路をシミュレートするためには、上記の回路に測定を追加し、異なるAerバックエンドを使用する必要があります。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:533
msgid "This circuit adds a classical register, and three measurements that are used to map the outcome of qubits to the classical bits."
msgstr "この回路は古典レジスターと３つの測定を追加して、量子ビットの結果を古典ビットにマップします。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:535
msgid "To simulate this circuit, we use the ``qasm_simulator`` in Qiskit Aer. Each run of this circuit will yield either the bitstring 000 or 111. To build up statistics about the distribution of the bitstrings (to, e.g., estimate :math:`\\mathrm{Pr}(000)`), we need to repeat the circuit many times. The number of times the circuit is repeated can be specified in the ``execute`` function, via the ``shots`` keyword."
msgstr "この回路をシミュレートするためには、Qiskit Aerの ``qasm_simulator`` を使います。この回路を実行するたびに000または111が生成されます。ビット列の分布についての統計を取るために(例えば、:math:`\\mathrm{Pr}(000)` を見積もるために)、何回も回路を繰り返す必要があります。回路の繰り返し回数は ``execute`` 関数の ``shots`` キーワードで指定できます。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:576
msgid "Once you have a result object, you can access the counts via the function ``get_counts(circuit)``. This gives you the *aggregated* binary outcomes of the circuit you submitted."
msgstr "result オブジェクトを取得できたら、``get_counts(circuit)`` 関数を使用して回数を取得することができます。これにより、送信した回路の *集計* されたバイナリー結果が得られます。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:622
msgid "Approximately 50 percent of the time, the output bitstring is 000. Qiskit also provides a function ``plot_histogram``, which allows you to view the outcomes."
msgstr "約50％の回数で、出力ビット文字列は000です。Qiskitは、結果を表示できる関数 ``plot_histogram`` も提供します。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:653
msgid "The estimated outcome probabilities :math:`\\mathrm{Pr}(000)` and :math:`\\mathrm{Pr}(111)` are computed by taking the aggregate counts and dividing by the number of shots (times the circuit was repeated). Try changing the ``shots`` keyword in the ``execute`` function and see how the estimated probabilities change."
msgstr "推定された結果の確率 :math:`\\mathrm{Pr}(000)` と :math:`\\mathrm{Pr}(111)` は、カウントを集計し、ショット数（回路が繰り返された回数）で割ることによって計算されます。 ``execute`` 関数の ``shots`` キーワードを変更してみて、推定される確率がどのように変化するか確認してください。"

