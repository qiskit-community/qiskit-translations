msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 17:09+0000\n"
"PO-Revision-Date: 2021-07-06 06:29\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/06_building_pulse_schedules.po\n"
"X-Crowdin-File-ID: 9476\n"
"Language: ja_JP\n"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:10
msgid "This page was generated from `tutorials/circuits_advanced/06_building_pulse_schedules.ipynb`__."
msgstr "当ページは `tutorials/circuits_advanced/06_building_pulse_schedules.ipynb`__ から生成されました。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:9
msgid "Building Pulse Schedules"
msgstr "Pulseスケジュールの構築"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:11
msgid "Pulse gates define a low-level, exact representation for a circuit gate. A single operation can be implemented with a pulse program, which is comprised of multiple low-level instructions. To learn more about pulse gates, refer back to the documentation `here <05_pulse_gates.ipynb>`__. This page details how to create pulse programs."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:13
msgid "Note: For IBM devices, pulse programs are used as subroutines to describe gates. Previously, some devices accepted full programs in this format, but this is being sunset in December 2021. Other providers may still accept full programs in this format. Regardless of how the program is used, the syntax for building the program is the same. Read on to learn how!"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:15
msgid "Pulse programs, which are called ``Schedule``\\ s, describe instruction sequences for the control electronics. We build ``Schedule``\\ s using the Pulse Builder. It’s easy to initialize a schedule:"
msgstr "パルス・プログラムは、``Schedule`` と呼ばれ、制御エレクトロニクスの命令シーケンスを記述します。 Pulse Builder を使用して ``Schedule`` を作成します。スケジュールを初期化するのは簡単です："

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:62
msgid "You can see that there are no instructions yet. The next section of this page will explain each of the instructions you might add to a schedule, and the last section will describe various *alignment contexts*, which determine how instructions are placed in time relative to one another."
msgstr "命令がまだないことがわかります。 このページの次のセクションでは、スケジュールに追加する各命令について説明します。 そして最後のセクションでは、さまざまな *配置コンテキスト* について説明します。これにより、命令が互いに相対的にどのように時間内に配置されるかが決まります。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:74
msgid "``Schedule`` Instructions"
msgstr "``Schedule``命令"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:76
msgid "`delay(duration, channel) <#delay>`__"
msgstr "`delay(duration, channel) <#delay>`__"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:77
msgid "`play(pulse, channel) <#play>`__"
msgstr "`play(pulse, channel) <#play>`__"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:78
msgid "`set_frequency(frequency, channel) <#set_frequency>`__"
msgstr "`set_frequency(frequency, channel) <#set_frequency>`__"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:79
msgid "`shift_phase(phase, channel) <#shift_phase>`__"
msgstr "`shift_phase(phase, channel) <#shift_phase>`__"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:80
msgid "`acquire(duration, channel, mem_slot, reg_slot) <#acquire>`__"
msgstr "`acquire(duration, channel, mem_slot, reg_slot) <#acquire>`__"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:82
msgid "Each instruction type has its own set of operands. As you can see above, they each include at least one ``Channel`` to specify where the instruction will be applied."
msgstr "各命令タイプは、独自のオペランドセットを持ちます。上記のように、それぞれに少なくとも1つの ``Channel`` が含まれており、命令の適用先を特定しています。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:84
msgid "**Channels** are labels for signal lines from the control hardware to the quantum chip."
msgstr "**Channels** は、制御ハードウェアから量子チップへの信号線のラベルです。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:86
msgid "``DriveChannel``\\ s are typically used for *driving* single qubit rotations,"
msgstr "``DriveChannel`` は通常、単一量子ビットの回転を *ドライブ* するのに使用されます。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:87
msgid "``ControlChannel``\\ s are typically used for multi-qubit gates or additional drive lines for tunable qubits,"
msgstr "``ControlChannel`` は通常、複数量子ビットゲートや、調整可能な量子ビットの追加ドライブ線に使用されます。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:88
msgid "``MeasureChannel``\\ s are specific to transmitting pulses which stimulate readout, and"
msgstr "``MeasureChannel`` は、読み出しを促す送信パルスに特化しています。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:89
msgid "``AcquireChannel``\\ s are used to trigger digitizers which collect readout signals."
msgstr "``AcquireChannel`` は、読み出し信号を収集するデジタイザーをトリガーするために使用されます。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:91
msgid "``DriveChannel``\\ s, ``ControlChannel``\\ s, and ``MeasureChannel``\\ s are all ``PulseChannel``\\ s; this means that they support *transmitting* pulses, whereas the ``AcquireChannel`` is a receive channel only and cannot play waveforms."
msgstr "``DriveChannel`` 、 ``ControlChannel`` 、 ``MeasureChannel`` は、すべて ``PulseChannel`` です。これは、これらが *送信* パルスをサポートしていることを意味します。一方、 ``AcquireChannel`` は受信チャンネルのみであり、波形を出すことはできません。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:93
msgid "For the following examples, we will create one ``DriveChannel`` instance for each ``Instruction`` that accepts a ``PulseChannel``. Channels take one integer ``index`` argument. Except for ``ControlChannel``\\ s, the index maps trivially to the qubit label."
msgstr "以下の例では、``PulseChannel`` を受け取る ``Instruction`` ごとに、ひとつの ``DriveChannel`` インスタンスを生成しています。チャンネルは、ひとつの数値 ``index`` 引数を取ります。 `` ControlChannel`` を除き、インデックスが量子ビットラベルにマッピングされるのは自明です。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:116
msgid "The pulse ``Schedule`` is independent of the backend it runs on. However, we can build our program in a context that is aware of the target backend by supplying it to ``pulse.build``. When possible you should supply a backend. By using the channel accessors ``pulse.<type>_channel(<idx>)`` we can make sure we are only using available device resources."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:165
msgid "``delay``"
msgstr "``delay``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:167
msgid "One of the simplest instructions we can build is ``delay``. This is a blocking instruction that tells the control electronics to output no signal on the given channel for the duration specified. It is useful for controlling the timing of other instructions."
msgstr "最も簡単な命令のひとつは ``delay`` です。これはブロッキング命令で、指定された継続時間中、指定されたチャンネルに信号を出力しないように、制御電子装置に対して指示を出します。他の命令のタイミングを制御するのに便利です。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:169
msgid "The duration here and elsewhere is in terms of the backend’s cycle time (1 / sample rate), ``dt``. It must take an integer value."
msgstr "ここやその他の場所における期間は、バックエンドのサイクル時間 (1 / サンプルレート) を単位とした `` dt`` です。整数値をとります。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:171
msgid "To add a ``delay`` instruction, we pass a duration and a channel, where ``channel`` can be any kind of channel, including ``AcquireChannel``. We use ``pulse.build`` to begin a Pulse Builder context. This automatically schedules our delay into the schedule ``delay_5dt``."
msgstr "``delay`` 命令を追加するには、期間とチャンネルを渡します。ここで、``channel`` は ``AcquireChannel`` を含む任意の種類のチャンネルになります。 Pulse Builder コンテキストを開始するには ``pulse.build`` を使用します。これにより、スケジュール ``delay_5dt`` に遅延が自動的にスケジュールされます。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:193
msgid "That’s all there is to it. Any instruction added after this delay on the same channel will execute five timesteps later than it would have without this delay."
msgstr "これがすべてです。 同じチャンネルでこの遅延の後に追加された命令は、この遅延がない場合よりも 5 タイムステップ遅れて実行されます。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:196
msgid "``play``"
msgstr "``play``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:198
msgid "The ``play`` instruction is responsible for executing *pulses*. It’s straightforward to add a play instruction:"
msgstr "``play`` 命令は*パルス*の実行を担当します。``play`` 命令を追加するのは簡単です。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:205
msgid "Let’s clarify what the ``pulse`` argument is and explore a few different ways to build one."
msgstr "``pulse`` の引数が何であるかを明確にして、それを構築するいくつかの異なる方法を探りましょう。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:208
msgid "Pulses"
msgstr "パルス"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:210
msgid "A ``Pulse`` specifies an arbitrary pulse *envelope*. The modulation frequency and phase of the output waveform are controlled by the ``set_frequency`` and ``shift_phase`` instructions, which we will cover next."
msgstr "``Pulse`` は、任意のパルス *エンベロープ* を指定します。出力波形の変調周波数と位相は、次に説明する ``setFrequency`` と ``shiftPhase`` 命令によって制御されます。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:212
msgid "The image below may provide some intuition for why they are specified separately. Think of the pulses which describe their envelopes as input to an arbitrary waveform generator (AWG), a common lab instrument – this is depicted in the left image. Notice the limited sample rate discritizes the signal. The signal produced by the AWG may be mixed with a continuous sine wave generator. The frequency of its output is controlled by instructions to the sine wave generator; see the middle image. Finally, the signal sent to the qubit is demonstrated by the right side of the image below."
msgstr "以下の画像は、なぜそれらが個別に指定されているかを直感的に示しています。一般的な研究機器である任意波形発生器 (arbitrary waveform generator、AWG) への入力として、エンベロープを表すパルスを考えてください。これは左の画像に示されています。制限されたサンプルレートが信号を区別していることに注意してください。AWGによって生成された信号は、連続正弦波ジェネレータと混合されます。その出力の周波数は、正弦波発生器への指示によって制御されます。中央の画像を参照してください。最後に、量子ビットに送信された信号は、下の画像の右側に示されています。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:215
msgid "**Note**: The hardware may be implemented in other ways, but if we keep the instructions separate, we avoid losing explicit information, such as the value of the modulation frequency."
msgstr "**注記** ：ハードウェアは他の方法で実装することもできますが、命令を別々にしておけば、変調周波数の値などの明示的な情報が失われるのを回避できます。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:217
msgid "|alt text|"
msgstr "|alt text|"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:219
msgid "There are many methods available to us for building up pulses. Our ``library`` within Qiskit Pulse contains helpful methods for building ``Pulse``\\ s. Let’s take for example a simple Gaussian pulse – a pulse with its envelope described by a sampled Gaussian function. We arbitrarily choose an amplitude of 1, standard deviation :math:`\\sigma` of 10, and 128 sample points."
msgstr "パルスを構築するために利用できる方法は多くあります。Qiskit Pulse 内の ``library`` には、 ``Pulse`` を構築するための便利なメソッドが含まれています。たとえば、単純なガウスパルス、つまりサンプリングされたガウス関数によって記述されたエンベロープを持つパルスを考えてみましょう。振幅1、標準偏差10 :math:`\\sigma` 、および128サンプルポイントを任意に選択します。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:221
msgid "**Note**: The amplitude norm is arbitrarily limited to ``1.0``. Each backend system may also impose further constraints – for instance, a minimum pulse size of 64. These additional constraints, if available, would be provided through the ``BackendConfiguration`` which is described `here <08_gathering_system_information.ipynb#Configuration>`__."
msgstr "注記：振幅ノルムは ``1.0`` に制限されています。個々のバックエンドシステムは、更なる制約、例えば最小パルスサイズは64など、も課しています。これらの追加の制約は、利用可能な場合、 `ここ <08_gathering_system_information.ipynb#Configuration>`__ で説明する ``BackendConfiguration`` を通じて提供されます。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:249
msgid "Parametric pulses"
msgstr "パラメトリック・パルス"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:251
msgid "Let’s build our Gaussian pulse using the ``Gaussian`` parametric pulse. A parametric pulse sends the name of the function and its parameters to the backend, rather than every individual sample. Using parametric pulses makes the jobs you send to the backend much smaller. IBM Quantum backends limit the maximum job size that they accept, so parametric pulses may allow you to run larger programs."
msgstr "``Gaussian`` パラメトリック・パルスを使用してガウスパルスを作成してみましょう。パラメトリック・パルスは、個々のサンプルごとではなく、関数の名前とそのパラメーターをバックエンドに送信します。 パラメトリック・パルスを使用すると、バックエンドに送信するジョブがはるかに小さくなります。 IBM Quantum バックエンドは、それらが受け入れる最大ジョブサイズを制限するため、パラメトリック・パルスを使うことで、より大きなプログラムを実行できる場合があります。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:253
msgid "Other parametric pulses in the ``library`` include ``GaussianSquare``, ``Drag``, and ``Constant``."
msgstr "``library`` の他のパラメトリック・パルスには、``GaussianSquare`` 、 ``Drag`` 、および ``Constant`` が含まれます。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:255
msgid "**Note**: The backend is responsible for deciding exactly how to sample the parametric pulses. It is possible to draw parametric pulses, but the samples displayed are not guaranteed to be the same as those executed on the backend."
msgstr "**注記** ：バックエンドには、パラメトリック・パルスをサンプリングする方法を正確に決定する責任があります。パラメトリック・パルスを描画することは可能ですが、表示されるサンプルがバックエンドで実行されたものと同じであるとは限りません。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:288
msgid "Pulse waveforms described by samples"
msgstr "サンプルによって記述されたパルス波形"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:290
msgid "A ``Waveform`` is a pulse signal specified as an array of time-ordered complex amplitudes, or *samples*. Each sample is played for one cycle, a timestep ``dt``, determined by the backend. If we want to know the real-time dynamics of our program, we need to know the value of ``dt``. The (zero-indexed) :math:`i^{th}` sample will play from time ``i*dt`` up to ``(i + 1)*dt``, modulated by the qubit frequency."
msgstr "``Waveform`` は、時間順に並べられた複素振幅または *サンプル* の配列として指定されたパルス信号です。各サンプルは、バックエンドによって決定される1サイクル、タイムステップ ``dt`` で再生されます。プログラムのリアルタイムダイナミクスを知りたい場合は、 ``dt`` の値を知る必要があります。:math:`i^{th}` サンプル(インデックスは0開始)を、量子ビット周波数によって調節された、時間`i*dt`` から ``(i + 1)*dt``まで再生します。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:327
msgid "Pulse library functions"
msgstr "パルス・ライブラリー関数"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:329
msgid "Our own pulse library has sampling methods to build a ``Waveform`` from common functions."
msgstr "独自のパルス・ライブラリーには、一般的な関数から ``Waveform`` を作成するためのサンプリング・メソッドがあります。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:360
msgid "Regardless of which method you use to specify your ``pulse``, ``play`` is added to your schedule the same way:"
msgstr "``pulse`` を指定する方法に関係なく、``play`` は同じ方法でスケジュールに追加されます:"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:392
msgid "You may also supply a complex list or array directly to ``play``"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:424
msgid "The ``play`` instruction gets its duration from its ``Pulse``: the duration of a parametrized pulse is an explicit argument, and the duration of a ``Waveform`` is the number of input samples."
msgstr "``play`` 命令は、``Pulse`` から期間を取得します。パラメーター化されたパルスの期間は明示的な引数であり、``Waveform``の期間は入力サンプルの数です。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:427
msgid "``set_frequency``"
msgstr "``set_frequency``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:429
msgid "As explained previously, the output pulse waveform envelope is also modulated by a frequency and phase. Each channel has a `default frequency listed in the backend.defaults() <08_gathering_system_information.ipynb#Defaults>`__."
msgstr "前述したように、出力パルス波形エンベロープも周波数と位相によって変調されます。各チャンネルには、 backend.defaults() にリストされているデフォルトの周波数があります（`参照 <08_gathering_system_information.ipynb#Defaults>`__ ）。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:431
msgid "The frequency of a channel can be updated at any time within a ``Schedule`` by the ``set_frequency`` instruction. It takes a float ``frequency`` and a ``PulseChannel`` ``channel`` as input. All pulses on a channel following a ``set_frequency`` instruction will be modulated by the given frequency until another ``set_frequency`` instruction is encountered or until the program ends."
msgstr "チャンネルの周波数は、 ``set_frequency`` 命令により ``Schedule`` 内でいつでも更新できます。浮動小数点の ``frequency`` と ``PulseChannel`` ``channel`` を入力として受け取ります。 ``set_frequency`` 命令に続くチャンネル上のすべてのパルスは、別の ``set_frequency`` 命令が検出されるまで、またはプログラムが終了するまで、指定された周波数で変調されます。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:433
msgid "The instruction has an implicit duration of ``0``."
msgstr "命令の暗黙の期間は ``0`` です。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:435
msgid "**Note**: The frequencies that can be requested are limited by the total bandwidth and the instantaneous bandwidth of each hardware channel. In the future, these will be reported by the ``backend``."
msgstr "**注記** ：要求できる周波数は、各ハードウェア・チャンネルの合計帯域幅と瞬時帯域幅によって制限されます。将来的には、これらは ``backend`` によって報告されます。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:458
msgid "``shift_phase``"
msgstr "``shift_phase``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:460
msgid "The ``shift_phase`` instruction will increase the phase of the frequency modulation by ``phase``. Like ``set_frequency``, this phase shift will affect all following instructions on the same channel until the program ends. To undo the affect of a ``shift_phase``, the negative ``phase`` can be passed to a new instruction."
msgstr "``shift_phase`` 命令は、周波数変調の位相を ``phase`` ごとに増やします。 ``set_frequency`` と同様に、この位相シフトは、プログラムが終了するまで、同じチャンネル上のすべての後続の命令に影響します。 ``shift_phase`` の影響を元に戻すには、負の ``phase`` を新しい命令に渡すことができます。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:462
msgid "Like ``set_frequency``, the instruction has an implicit duration of ``0``."
msgstr "``set_frequency`` と同様に、命令の暗黙の期間は ``0`` です。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:485
msgid "``acquire``"
msgstr "## acquire"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:487
msgid "The ``acquire`` instruction triggers data acquisition for readout. It takes a duration, an ``AcquireChannel`` which maps to the qubit being measured, and a ``MemorySlot`` or a ``RegisterSlot``. The ``MemorySlot`` is classical memory where the readout result will be stored. The ``RegisterSlot`` maps to a register in the control electronics which stores the readout result for fast feedback."
msgstr "``acquire`` 命令は、読み出しのためのデータ取得をトリガーします。 それは、持続時間、測定されている量子ビットにマップする ``AcquireChannel`` および、 ``MemorySlot`` または ``RegisterSlot`` を必要とします。 ``MemorySlot`` は、読み出し結果が保存される古典的なメモリです。 ``RegisterSlot`` は、高速フィードバックのための読み出し結果を保存する制御電子回路のレジスタにマッピングします。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:489
msgid "The ``acquire`` instructions can also take custom ``Discriminator``\\ s and ``Kernel``\\ s as keyword arguments."
msgstr "``acquire`` 命令は、キーワード引数としてカスタム``Discriminator``と``Kernel``を取ることもできます。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:513
msgid "Now that we know how to add ``Schedule`` instructions, let’s learn how to control exactly when they’re played."
msgstr "``Schedule`` 命令を追加する方法がわかったので、再生されるタイミングを正確に制御する方法を学びましょう。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:516
msgid "Pulse Builder"
msgstr "Pulse Builder"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:518
msgid "Here, we will go over the most important Pulse Builder features for learning how to build schedules. This is not exhaustive; for more details about what you can do using the Pulse Builder, check out the `Pulse API reference <https://qiskit.org/documentation/apidoc/pulse.html>`__."
msgstr "ここでは、スケジュールの作成方法を学ぶための最も重要なPulse Builder機能について説明します。 ここの記述は完全なものではありません。Pulse Builder を使用してできることの詳細については、`Pulse API reference <https://qiskit.org/documentation/apidoc/pulse.html>`__ を参照してください。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:521
msgid "Alignment contexts"
msgstr "配置コンテキスト"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:523
msgid "The builder has alignment contexts which influence how a schedule is built. Contexts can also be nested. Try them out, and use ``.draw()`` to see how the pulses are aligned."
msgstr "ビルダーは、スケジュールの構築方法に影響する配置コンテキストを持ちます。 コンテキストを入れ子にすることもできます。それらを試し、``.draw()`` を使用してパルスがどのように配置されるかを確認してください。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:525
msgid "Regardless of the alignment context, the duration of the resulting schedule is as short as it can be while including every instruction and following the alignment rules. This still allows some degrees of freedom for scheduling instructions off the “longest path”. The examples below illuminate this."
msgstr "配置コンテキストに関係なく、結果のスケジュールの長さは、すべての命令を含め配置ルールに従うのと同等くらい短いです。これにより、「最も長いパス」から命令をスケジュールするある程度の自由度があります。以下の例ではこれを示しています。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:528
msgid "``align_left``"
msgstr "``align_left``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:530
msgid "The builder has alignment contexts that influence how a schedule is built. The default is ``align_left``."
msgstr "ビルダーはスケジュールの構築方法に影響する配置コンテキストを持っています。デフォルトは ``align_left`` です。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:567
msgid "Notice how there is no scheduling freedom for the pulses on ``D1``. The second waveform begins immediately after the first. The pulse on ``D0`` can start at any time between ``t=0`` and ``t=100`` without changing the duration of the overall schedule. The ``align_left`` context sets the start time of this pulse to ``t=0``. You can think of this like left-justification of a text document."
msgstr "``D1`` 上のパルスにはスケジューリングの自由度がないことに注意してください。2 番目の波形は最初の波形の直後に始まります。 ``D0`` 上のパルスは、スケジュール全体の期間を変更することなく、``t=0`` と ``t=100`` の間でいつでも開始できます。 ``align_left`` コンテキストでは、パルスの開始時刻を ``t=0`` に設定します。これはテキスト文書の左揃えのように考えることができます。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:570
msgid "``align_right``"
msgstr "``align_right``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:572
msgid "Unsurprisingly, ``align_right`` does the opposite of ``align_left``. It will choose ``t=100`` in the above example to begin the gaussian pulse on ``D0``. Left and right are also sometimes called “as soon as possible” and “as late as possible” scheduling, respectively."
msgstr "当然、``align_right`` は ``align_left`` の反対です。``D0`` 上でガウスパルスを開始する上記の例では ``t=100`` を選択します。 左と右は、それぞれ「できるだけ早く」と「できるだけ遅く」スケジューリングとも呼ばれることがあります。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:610
msgid "``align_equispaced(duration)``"
msgstr "``align_equispaced(duration)``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:612
msgid "If the duration of a particular block is known, you can also use ``align_equispaced`` to insert equal duration delays between each instruction."
msgstr "特定のブロックの期間がわかっている場合は、 ``align_equispace`` を使って各命令の間に同じ長さの遅延を挿入することもできます。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:650
msgid "``align_sequential``"
msgstr "``align_sequential``"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:652
msgid "This alignment context does not schedule instructions in parallel. Each instruction will begin at the end of the previously added instruction."
msgstr "この配置コンテキストは、並列に命令をスケジュールしません。各命令は、以前に追加した命令の最後に開始されます。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:690
msgid "Phase and frequency offsets"
msgstr "位相および周波数オフセット"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:692
msgid "We can use the builder to help us temporarily offset the frequency or phase of our pulses on a channel."
msgstr "このビルダーを使用すると、チャンネル上のパルスの周波数や位相を一時的に補正することができます。"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:728
msgid "We encourage you to visit the `Pulse API reference <https://qiskit.org/documentation/apidoc/pulse.html>`__ to learn more."
msgstr "詳細については、`Pulse API reference <https://qiskit.org/documentation/apidoc/pulse.html>`__ を参照することをお勧めします。"

