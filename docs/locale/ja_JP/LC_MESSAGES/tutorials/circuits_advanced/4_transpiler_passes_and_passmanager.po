msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-02 15:42+0000\n"
"PO-Revision-Date: 2020-10-08 03:55\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.po\n"
"X-Crowdin-File-ID: 9128\n"
"Language: ja_JP\n"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:10
msgid "This page was generated from `tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb`__."
msgstr "当ページは `tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb`__ から生成されました。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:9
msgid "Transpiler Passes and Pass Manager"
msgstr "トランスパイラー パスとパス マネージャー"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:21
msgid "Introduction"
msgstr "はじめに"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:32
msgid "A central component of Qiskit Terra is the transpiler, which is designed for modularity and extensibility. The goal is to be able to easily write new circuit transformations (known as transpiler **passes**), and combine them with other existing passes. Which passes are chained together and in which order has a major effect on the final outcome. This pipeline is determined by a **pass manager**, which schedules the passes and also allows passes to communicate with each other by providing a shared space. In this way, the transpiler opens up the door for research into aggressive optimization of quantum circuits."
msgstr "Qiskit Terra の中核コンポーネントはトランスパイラーで、モジュール性と拡張性のために設計されています。目的は新しい回路の変換（トランスパイラー **パス ** と呼んでいます） を簡単に書けるようにし、他の既存のパスと組み合わせられるようにすることです。これらのパスを連鎖させ、どの順番で適用するかは、最終的な結果に大きな影響を与えます。このパイプラインは **パスマネージャー** により決定されます。パスマネージャーは、パスをスケジューリングし、共有スペースによるパス間の相互通信を行えるようにしています。このようにトランスパイラーは、量子回路の積極的な最適化の研究のために、ドアを開放しています。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:35
msgid "In this notebook, we look at the built-in passes, how to use the pass manager, and develop a simple custom transpiler pass. In order to do the latter, we first need to introduce the internal representation of quantum circuits in Qiskit, in the form of a Directed Acyclic Graph, or **DAG**. Then, we illustrate a simple swap mapper pass, which transforms an input circuit to be compatible with a limited-connectivity quantum device."
msgstr "このノートブックでは、ビルドインされたパスを調べ、パスマネージャの利用法を確認し、簡単なトランスパイラパスを開発します。そのために、最初に有向非巡回グラフ（Directed Acyclic Graph、DAG）の形で、Qiskitにおける量子回路の内部表現を紹介します。次に、入力回路を接続性の制限された量子デバイスと互換性を持つように変換する、単純な swap mapper パスを示します。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:37
msgid "***Before you start***: You may need to install the ``pydot`` library and the ``graphviz`` library for the DAG plotting routines. If you are using Anaconda Python, you can install both with the ``conda`` command. If you use your system's native Python interpreter, install ``pydot`` using the ``pip`` command, and install ``graphviz`` using your system's native package manager (e.g. ``yum``, ``apt``, ``dnf``, ``brew``, etc.)."
msgstr "***始める前に***: DAGプロットルーチンの ``pydot`` ライブラリと ``graphviz`` ライブラリをインストールする必要があります。 Anaconda Python を使用している場合は、``conda`` コマンドを使用して両方をインストールできます。 システムのネイティブ Python インタプリタを使用する場合は、``pip`` コマンドを使用して ``pydot`` をインストールし、システムのネイティブ パッケージ マネージャー (例．``yum``, ``apt``, ``dnf``, ``brew`` など) を使用して ``graphviz`` をインストールします。 "

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:62
msgid "PassManager object"
msgstr "パスマネージャーオブジェクト"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:64
msgid "Lets you specify the set of passes you want."
msgstr "必要なパスのセットが指定できます。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:119
msgid "All of Qiskit's transpiler passes are accessible from ``qiskit.transpiler.passes``."
msgstr "Qiskit のトランスパイラーパスは、すべて ``qiskit.transpiler.passes`` から取得できます。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:256
msgid "Different Variants of the Same Pass"
msgstr "同じパスの異なる実装"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:258
msgid "There can be passes that do the same job, but in different ways. For example, the ``TrivialLayout``, ``DenseLayout`` and ``NoiseAdaptiveLayout`` all choose a layout (binding of virtual qubits to physical qubits), but use different algorithms and objectives. Similarly, the ``BasicSwap``, ``LookaheadSwap`` and ``StochasticSwap`` all insert swaps to make the circuit compatible with the coupling map. The modularity of the transpiler allows plug-and-play replacements for each pass."
msgstr "同じジョブをこなすパスがあっても、その方法は様々です。例えば、 ``TrivialLayout`` 、 ``DenseLayout`` および ``NoiseAdaptiveLayout`` は、すべてレイアウト（物理量子ビットへの仮想量子ビットのバインド）の選択ですが、それぞれ異なるアルゴリズムや目的を使います。同様に、 ``BasicSwap`` 、 ``LookaheadSwap`` および ``StochasticSwap`` は結合マップに適合するように swap を挿入して回路を作成します。トランスパイラーのモジュール性により、各パスをプラグアンドプレイで置き換えられます。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:260
msgid "Below, we show the swapper passes all applied to the same circuit, to transform it to match a linear chain topology. You can see differences in performance, where the ``StochasticSwap`` is clearly the best. However, this can vary depending on the input circuit."
msgstr "以下では、swap パスを全て同じ回路、線形鎖トポロジーに適合するように変換しているもの、に適用したものを示しています。パフォーマンスに違いが見られ、明らかに ``StochasticSwap`` がベストです。しかしながら、入力回路によって違いが現れるでしょう。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:383
msgid "Preset Pass Managers"
msgstr "プリセット パスマネージャ"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:385
msgid "Qiskit comes with several pre-defined pass managers, corresponding to various levels of optimization achieved through different pipelines of passes. Currently ``optimization_level`` 0 through 3 are supported; the higher the number, the more optimized it is, at the expense of more time. Choosing a good pass manager may take trial and error, as it depends heavily on the circuit being transpiled and the backend being targeted."
msgstr "Qiskit には既定のパスマネージャを用意しており、異なるパスのパイプラインを通じて達成される様々な最適化レベルに対応しています。現時点で ``optimization_level`` は 0 から 3 までサポートされており、一番大きな数字はより最適化されますが、一方で時間を消費します。トランスパイルされる回路とターゲットとなるバックエンドに非常に依存するので、最適なパスマネージャの選択は試行錯誤を繰り返します。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:387
msgid "Here we illustrate the different levels by looking at a state synthesis circuit. We initialize four qubits to an arbitrary state, and then try to optimize the circuit that achieves this."
msgstr "ここでは、異なるレベルの結果を状態合成 (state synthesis) 回路で見てみたいと思います。４つの量子ビットを任意の状態で初期化し、これを実現する回路を最適化します。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:389
msgid "``optimization_level=0``: just maps the circuit to the backend, with no explicit optimization (except whatever optimizations the mapper does)."
msgstr "``optimization_level=0`` : 明示的な最適化をせず回路をバックエンドにマップします(どの最適化でもマッパーが実施する項目を除く)。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:391
msgid "``optimization_level=1``: maps the circuit, but also does light-weight optimizations by collapsing adjacent gates."
msgstr "``optimization_level=1`` : 回路をマップしますが、隣接するゲートをつぶすといった軽量の最適化を実施します。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:393
msgid "``optimization_level=2``: medium-weight optimization, including a noise-adaptive layout and a gate-cancellation procedure based on gate commutation relationships."
msgstr "``optimization_level=2`` : 中程度の最適化で、ノイズに適応したレイアウト、ゲートの交換関係に基づくゲートキャンセル処理が含まれます。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:395
msgid "``optimization_level=3``: heavy-weight optimization, which in addition to previous steps, does resynthesis of two-qubit blocks of gates in the circuit."
msgstr "``optimization_level=3`` : 重量な最適化で、前までのステップに加え、回路にある２量子ビットの再合成 (resynthesis) を実施します。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:606
msgid "Now map this to the 20-qubit Tokyo device, with different optimization levels:"
msgstr "では、これを異なる最適化レベルで20量子ビットの Tokyo デバイスにマップします。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:750
msgid "Introducing the DAG"
msgstr "DAGの紹介"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:761
msgid "In Qiskit, we represent circuits internally using a Directed Acyclic Graph (DAG). The advantage of this representation over a pure list of gates (i.e., *netlist*) is that the flow of information between operations are explicit, making it easier for passes to make transformation decisions without changing the semantics of the circuit."
msgstr "Qiskit では、回路の表現として有向非巡回グラフ( Directed Acyclic Graph - DAG) を内部的に使用しています。純粋なゲートのリスト（つまり *netlist* ) に比べてこの表現の利点は、操作間の情報のフローが明示的になり、回路のセマンティックを変更することなくパスが変換の決定をするのにより容易である点です。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:763
msgid "Let's start by building a simple circuit, and examining its DAG."
msgstr "簡単な回路を構築して、DAG を調べてみましょう。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:802
msgid "In the DAG, there are three kinds of graph nodes: qubit/clbit input nodes (green), operation nodes (blue), and output nodes (red). Each edge indicates data flow (or dependency) between two nodes."
msgstr "DAGには、３種類のグラフノードがあります：qubit/clbit インプットノード(緑)、操作ノード(青)、及びアウトプットノード(赤) です。各エッジはノード間のデータの流れ(もしくは依存性) を示しています。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:835
msgid "Therefore, writing a transpiler pass means using Qiskit's DAGCircuit API to analyze or transform the circuit. Let's see some examples of this."
msgstr "従って、トランスパイラーのパスを実装するということは、Qiskit の DAGCircuit API を利用して分析し、回路を変換するということを意味します。幾つかの例を見てみましょう。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:846
msgid "**a. Get all op nodes in the DAG:**"
msgstr "**a. DAG中の全ての操作ノードを取得します:**"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:893
msgid "Each node is an instance of the ``DAGNode`` class. Let's examine the information stored in the second op node."
msgstr "各ノードは ``DAGNode`` クラスのインスタンスです。２つ目の操作ノードに含まれる情報を確認しましょう。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:946
msgid "**b. Add an operation to the back:**"
msgstr "**b. 後ろに操作を追加します:**"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:978
msgid "**c. Add an operation to the front:**"
msgstr "**c. 前に操作を追加します:**"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1010
msgid "**d. Substitute a node with a subcircuit:**"
msgstr "**d. ノードをサブ回路で置き換えます:**"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1050
msgid "Finally, after all transformations are complete, we can convert back to a regular QuantumCircuit object. This is what the transpiler does! It takes a circuit, operates on it in DAG form, and outputs a transformed circuit."
msgstr "最後に、全ての変換が完了した後に、通常の QuantumCircuit オブジェクトに戻すことができます。これがトランスパイラーは実施していることです！ 回路を受け取り、DAG 形式で操作し、変換した回路を出力します。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1083
msgid "Implementing a BasicMapper Pass"
msgstr "BasicMapper パスを実装してみる"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1094
msgid "Now that we are familiar with the DAG, let's use it to write a transpiler pass. Here we will implement a basic pass for mapping an arbitrary circuit to a device with limited qubit connectivity. We call this the BasicMapper. This pass is included in Qiskit Terra as well."
msgstr "DAG について理解できたので、トランスパイラーパスを書いてみましょう。ここでは、限られた量子ビット接続でのデバイスに対して任意の回路をマッピングする基本的なパスを実装します。これを BasicMapper と呼ぶことにします。このパスは、Qiskit Terra に含まれています。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1096
msgid "The first thing to do when writing a transpiler pass is to decide whether the pass class derives from a ``TransformationPass`` or ``AnalysisPass``. Transformation passes modify the circuit, while analysis passes only collect information about a circuit (to be used by other passes). Then, the ``run(dag)`` method is implemented, which does the main task. Finally, the pass is registered inside the ``qiskit.transpiler.passes`` module."
msgstr "トランスパイラーパスを作成する時に最初にやらなければいけないことは、パスクラスを ``TransformationPass`` か ``AnalysisPass`` のどちらから派生させるかを決定することです。Transformationパス は回路を修正しますが、Analysisパス は回路の情報を収集する(のちに別のパスで利用される) のみです。次に、メインタスクとなる ``run(dag)`` メソッドを実装します。最後に、 ``qiskit.transpiler.passes`` モジュールの内部に登録させます。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1098
msgid "This pass functions as follows: it traverses the DAG layer-by-layer (each layer is a group of operations that does not act on independent qubits, so in theory all operations in a layer can be done independently). For each operation, if it does not already meet the coupling map constraints, the pass identifies a swap path and inserts swaps to bring the two qubits close to each other."
msgstr "このパスは以下のように機能します：DAG をレイヤー毎に横断します(各レイヤーは独立した量子ビットに作用しない操作のグループで、理論的にはレイヤーに存在する操作は独立して実行できます)。各操作に対して、既にカップリングマップの制約に適合していない場合には、パスは swap パスを特定し、２つの量子ビットが近くなるように swap を追加していきます。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1100
msgid "Follow the comments in the code for more details."
msgstr "詳細はコード中のコメントを参照してください。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1216
msgid "Let's test this pass on a small example circuit."
msgstr "このパスを小さな回路例で試してみましょう。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1265
msgid "Now we construct a pass manager that contains our new pass. We pass the example circuit above to this pass manager, and obtain a new, transformed circuit."
msgstr "我々の新しいパスを含むパスマネージャーを構築します。上記の回路例をこのパスマネージャに渡し、変換された新しい回路を受け取ります。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1355
msgid "Note that this pass only inserts the swaps necessary to make every two-qubit interaction conform to the device coupling map. It does not, for example, care about the direction of interactions, or the native gate set supported by the device. This is a design philosophy of Qiskit's transpiler: every pass performs a small, well-defined action, and the aggressive circuit optimization is achieved by the pass manager through combining multiple passes."
msgstr "このパスはデバイスのカップリングマップに適合するように、全ての２量子ビットの相互作用が出来るように swap を追加しているだけであるという点に着目してください。このパスは相互作用の方向やデバイスがサポートするネイティブゲートについては考慮していません。これは Qiskitのトランスパイラーの設計思想です。全てのパスは小さく、よく定義されたアクションを持ち、積極的な回路の最適化は複数のパスを組み合わせるパスマネージャーによって達成されます。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1367
msgid "Transpiler Logging"
msgstr "トランスパイラーロギング"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1369
msgid "Due to the complexity of the internal operations that the transpiler is performing it's likely that you'll end up in a situation where you'd like to debug an issue or just understand more of what is happening inside the transpiler when you call it. To facilitate this the transpiler emits log messages as part of its normal operation. This logging uses the Python standard library ``logging`` module to emit the log messages. Python's standard logging was used because it allows Qiskit-Terra's logging to integrate in a standard way with other applications and libraries."
msgstr "トランスパイラーが実装する内部操作の複雑性のため、問題をデバッグしたり呼び出した時にトランスバイラー内部で何が行われているかを理解したい局面が発生するでしょう。これを達成するために、通常の操作の一部としてトランスパイラーはログメッセージを出力します。ロギングには、Python の標準ライブラリの ``logging`` モジュールを利用してログメッセージを出しています。Python の標準ロギングを使用しているので、Qiskit-Terra のロギングを他のアプリケーションやライブラリと組みわせることが出来るようになります。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1372
msgid "For a more thorough introduction to Python logging refer to the `official documentation <https://docs.python.org/3/library/logging.html>`__ and the tutorials and cookbook linked off of there."
msgstr "Python のロギングについての情報は、 `公式ドキュメント <https://docs.python.org/3/library/logging.html>`__ 、及びリンク先のチュートリアルと cookbook を参照してください。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1405
msgid "Configuring Python Standard Library Logging"
msgstr "Python ロギング標準ライブラリの設定"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1407
msgid "By default Python Standard Logging only prints log messages at the ``WARNING``, ``ERROR``, or ``CRITICAL`` log levels. Since none of the logs emitted by the transpiler use these log levels (they're all informative) you need to configure logging."
msgstr "デフォルトでは Python 標準ロギングは、 ``WARNING`` 、 ``ERROR`` 、 ``CRITICAL`` ログレベルでのみログメッセージを出力します。トランスパイラーではこれらのログレベルを利用しておらず(全ては情報のみ) ログを吐きませんので、ロギングを設定する必要があります。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1409
msgid "The simplest way to do this is to just run:"
msgstr "最も簡単な方法は次を実行することです:"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1432
msgid "The ``basicConfig()`` function (see the docs here: https://docs.python.org/3/library/logging.html#logging.basicConfig) configures a root handler and formatter. We also specify the `log level <https://docs.python.org/3/library/logging.html#levels>`__ to display with the ``level`` kwarg. Setting it to a level will also include and higher levels. For example, if you set it to ``'INFO'`` in addition to the ``INFO`` level this will also include the ``WARNING``, ``ERROR``, and ``CRITICAL`` log levels."
msgstr "``basicConfig()`` 関数 (ドキュメントは以下を参照してください: https://docs.python.org/3/library/logging.html#logging.basicConfig) ルートハンドラーとフォーマッタを設定します。ここでは `ログレベル <https://docs.python.org/3/library/logging.html#levels>`__ を ``level`` kwarg で設定しています。特例のレベルに設定するとより高位のレベルも含まれます。例えば、 ``INFO`` に設定すると、 ``INFO`` レベルだけではなく、 ``WARNING`` 、 ``ERROR`` 、 及び ``CRITICAL`` ログレベルも含まれます。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1434
msgid "Now the python environment in this notebook is configured to emit log messages to stderr when you run the transpiler. For example:"
msgstr "このノートブックの Python 環境ではトランスパイラーを実行した時に stderr にログメッセージを出力するように設定されています。例えば："

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1639
msgid "As you can clearly see here when calling ``transpile()`` it now prints 2 types of log messages. The first is at the ``INFO`` log level and come from the pass manager. These indicate each pass that was executed and how long that took. The second are at the ``DEBUG`` level and come from the StochasticSwap pass and describes the internal operation of that pass. It's useful for debugging issues in the pass's operation."
msgstr "ここではっきりわかるように、``transpile()`` を呼び出すと2種類のログメッセージを出力されるようになりました。1つ目は ``INFO`` ログレベルで、パスマネージャーからのものです。これらは、実行された各パスとその所要時間を示しています。2番目は ``DEBUG`` レベルであり、StochasticSwapパスからのもので、そのパスの内部操作を記述しています。パスの操作における問題をデバッグするのに役立ちます。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1651
msgid "Adjusting the log level for the transpiler"
msgstr "トランスパイラーのログレベルを調整する"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1653
msgid "The qiskit transpiler uses a single namespace ``qiskit.transpiler``, as used by ``logging.getLogger('qiskit.transpiler')``). This makes it very easy to adjust the log level for just the transpiler. For example if you only wish to see log messages at the INFO level or above you can run:"
msgstr "Qiskit トランスパイラーは、 ``logging.getLogger('qiskit.transpiler')`` で利用されているように、 単一のネームスペース ``qiskit.transpiler`` を利用しています。これによりトランスパイラー単独のログレベルを調整することが簡単に出来ます。例えば、INFO レベル以上のログメッセージだけを確認したい場合は、次のように実行できます："

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1754
msgid "Setting up logging to deal with parallel execution"
msgstr "平行実行を扱うためのログ設定"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1756
msgid "When running the transpiler with multiple circuits by default these circuits are transpiled in parallel. If you want to do this with logging enabled and be able to understand the output some additional steps are required."
msgstr "複数の回路をトランスパイルする時にはデフォルトではこれらの回路は平行でトランスパイルされます。ログレベルを設定してこれを実行し、出力を理解できるようにするには追加のステップが必要です。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1758
msgid "If you were just to enable logging as above and then pass ``transpile()`` multiple circuits you'll get results that are difficult to decipher. For example:"
msgstr "単にロギングを設定して 複数の回路に対して ``transpile()`` を渡しただけでは、解読が難しい結果になるでしょう。例えば："

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2063
msgid "As you can see here we get log messages from all 3 circuits being transpiled together. There is no way to know which pass is part of which circuit's transpilation. Luckily Python logging provides tools to deal with this. The simplest one is to just change the `log formatter <https://docs.python.org/3/library/logging.html#logging.Formatter>`__ so that includes additional information so we can associate a log message with the process it came from."
msgstr "結果から確認出来るように３つの回路が一緒にトランスパイルされているログメッセージを取得しています。どのパスがどの回路のトランスパイルの一部なのかを知る手段がありません。幸いなことに、Python ロギングではこの状況を扱う手段を提供しています。簡単な方法は、`ログフォーマッタ <https://docs.python.org/3/library/logging.html#logging.Formatter>`__ を変更して追加情報を含めるようにし、どのプロセスからログメッセージが出ているかを関連づけることです。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2086
msgid "Then rerun the ``transpile()`` call and see the new log formatter."
msgstr "次に、 ``transpile()`` 呼び出しを再実行し新しいログフォーマッタを確認します。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2387
msgid "Now the format for the log messages has been changed and it includes a process name for each of the transpilation processes so it's at least clear which log messages go together."
msgstr "ログメッセージのフォーマットが変更され、各トランスパイラープロセスのプロセス名が含まれるようになり、どのログメッセージが進行しているかが明確になりました。"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2389
msgid "There are many different options for how you can configure, this example is pretty limited. Refer to the documentation for more examples and options to build more sophisticated use cases that suit your specific use case or preferences."
msgstr "設定には多くの異なるオプションがあります。この例ではかなり限られています。より多くの例とオプションについてはドキュメントを参照し、あなたの特別なユースケースと好みに応じてより洗練されたユースケースをビルド出来るようにしてください。"

