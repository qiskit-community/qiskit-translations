msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-07 16:27+0000\n"
"PO-Revision-Date: 2020-12-23 04:36\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/10_pulse_scheduler.po\n"
"X-Crowdin-File-ID: 9372\n"
"Language: ja_JP\n"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:10
msgid "This page was generated from `tutorials/circuits_advanced/10_pulse_scheduler.ipynb`__."
msgstr "当ページは `tutorials/circuits_advanced/10_pulse_scheduler.ipynb`__ から生成されました。"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/circuits_advanced/10_pulse_scheduler.ipynb>`_."
msgstr "`IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/circuits_advanced/10_pulse_scheduler.ipynb>`_ でインタラクティブに実行します。"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:9
msgid "Using the Scheduler"
msgstr "スケジューラーを使う"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:11
msgid "The scheduler will translate a ``QuantumCircuit`` into a Pulse ``Schedule``, using gate and measurement *calibrations*: an optimized pulse-level description of an operation on particular qubits."
msgstr "スケジューラーは、ゲートと測定*キャリブレーション*を使用して、``QuantumCircuit`` を Pulse ``Schedule`` に変換します。これは特定の量子ビットに関する操作の最適化されたパルスレベルの記述です。"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:13
msgid "Backends that are OpenPulse enabled will typically have calibrations defined for measurements and for each of its basis gates. Calibrations can also be defined or updated by the user."
msgstr "OpenPulse対応のバックエンドは、通常、測定用および各基本的なゲート(basis gates)用に定義されたキャリブレーションを行います。 キャリブレーションは、ユーザーによって定義または更新することもできます。"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:16
msgid "Basic usage"
msgstr "基本的な使い方"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:18
msgid "To start, build a quantum circuit as you would normally. For our example below, we create a simple Bell state."
msgstr "まず、普通に量子回路を構築します。以下の例では、シンプルな Bell 状態を作成します。"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:97
msgid "We’ll use the mocked backend, ``FakeAlmaden``, to demonstrate how to use the scheduler. It contains default calibrations for measurement and for its basis gates. The Hadamard operation is not one of those basis gates, so we use the transpiler to compile our input circuit to an equivalent circuit in terms of the basis gates of the device."
msgstr "スケジューラーの使い方を示すために、モックのバックエンドの ``FakeAlmaden`` を使います。測定用と基本のゲート用のデフォルトのキャリブレーションが含まれています。 Hadamard演算は、それらの基本のゲート (basis gates) 操作ではないので、トランスパイラーを使って、デバイスの入力回路を基本のゲートを使った等価回路にコンパイルします。"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:124
msgid "Let’s see how our schedule ``schedule`` built from the circuit ``transpiled_circ`` looks. (We select a range to plot because the measurement and acquire pulses are long.)"
msgstr "``transpled_circ`` 回路から構築されたスケジュールの ``schedule`` がどのように見えるか見てみましょう。 (測定と取得のパルスが長いため、プロットする範囲を選択します。)"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:154
msgid "That covers the basics! We used the transpiler to rewrite the circuit in terms of the basis gates, and then used the backend’s default calibrations to schedule the transpiled circuit. Next we will go through scheduling with calibrations we will build ourselves."
msgstr "基本がカバーされています。 基本のゲート (basis gates) を使って回路を書き換えるためにトランスパイラーを使いました。そして、バックエンドのデフォルトキャリブレーションを使ってトランスパイラー回路をスケジュールしました。次に、私たちは私たち自身が構築するキャリブレーションでスケジュールします。"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:157
msgid "Scheduling with custom gate definitions"
msgstr "カスタム・ゲート定義によるスケジューリング"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:159
msgid "Using the scheduler with Pulse, we are not restrained by the basis gates of the device. For instance, we can define a calibration for the Hadamard gate on qubit 0, which is used by our Bell state circuit. Our Hadamard will be a Gaussian pulse. In practice, the pulse shape and its parameters would be optimized through a series of Rabi experiments (see the `Qiskit Textbook <https://qiskit.org/textbook/ch-quantum-hardware/calibrating-qubits-openpulse.html>`__ for a walk through)."
msgstr "Pulseでスケジューラーを使用すると、デバイスの基本ゲート(basis gates)によって制限されることはありません。 たとえば、量子ビット 0のHadamardゲート(Bell状態回路で使用しました)のキャリブレーションを定義することができます。私たちのHadamadはガウシアン・パルスになります。 実際に、パルスの形状とパラメーターは、ラビ(Rabi)実験を使って最適化されます(`Qiskit Textbook <https://qiskit.org/textbook/ch-quantum-hardware/calibrating-qubits-openpulse.html>`__ を参照)。"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:182
msgid "We add the ``h_q0`` calibration to the backend’s existing ``InstructionScheduleMap`` containing the instruction calibration lookup. It has to be added by gate name – here we use the standard gate name ``'h'`` – and by qubit. **Remember that a gate calibrated on one qubit will not enact the same gate on another qubit.**"
msgstr "命令キャリブレーションのルックアップを含むバックエンドの既存の ``InstructionScheduleMap`` に ``h_q0`` キャリブレーションを追加します。 ゲート名と量子ビットを追加する必要があります。ここでは標準のゲート名 ``'h'`` を使用します。 **ある量子ビットで較正されたゲートは、別の量子ビットで同じゲートとはならないことを覚えておいてください。**"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:206
msgid "Notice how this time, we were able to schedule ``circ``, which hasn’t been transpiled, so it still has the Hadamard gate. The new ``h_q0`` calibration we added was used to schedule ``circ``."
msgstr "今回はトランスパイルされていない``circ`` をスケジュールすることができたので、まだ、Hadamardゲートのままです。 追加した新しい ``h_q0`` のキャリブレーションは ``circ`` のスケジュールに使用されました。"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:209
msgid "Building circuits with non-standard gates"
msgstr "標準外ゲートを使用した回路の構築"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:211
msgid "In the previous section, we added a native definition for a standard gate. In this section, we build a totally novel gate."
msgstr "前のセクションでは標準ゲートに対してネイティブな定義を追加しました。このセクションでは完全に新しいゲートを構築します。"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:213
msgid "The first step is to create a definition for it as a Pulse ``Schedule``. Below, we also demonstrate how these schedules can be built to accept parameters."
msgstr "最初のステップは、Pulse の ``Schedule`` として定義を作成することです。 以下では、これらのスケジュールがどのようにパラメータを受け入れることができるかを示します。"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:251
msgid "We call our schedule operation ``'my_2q'``, and define it over qubits 0 and 1 as we add it to our calibrations."
msgstr "スケジュール操作を``'my_2q'``と呼び、キャリブレーションに追加する際に量子ビット 0と1で定義します。"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:272
msgid "To prepare our circuit to use this definition, we need to create a new ``Gate`` with the same name that we defined above, ``'my_2q'``."
msgstr "この定義を利用するために回路を準備するためには、上記で定義した名前と同じ名前の``'my_2q'``という名前の``Gate`` を新たに作成する必要があります。"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:295
msgid "Now, we can build our circuit. When we use the new gate, ``my_2q``, we ``append`` it to our circuit, and otherwise build the circuit normally."
msgstr "これで回路を構築することができます。新しいゲート ``my_2q`を使うときは、回路に ``append`` し、そうでないときは、普通に回路を構築します。"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:372
msgid "All of the operations in ``circ`` are defined in our ``cals``, so we could schedule it directly, but let’s remove our qubit 0 Hadamard calibration so we can demonstrate how to use the transpiler with our novel 2Q gate."
msgstr "``circ`` のすべての操作は ``cals`` で定義されているため、直接スケジュールすることができます。 しかし、量子ビット0のHadamardキャリブレーションを削除して、新しい2Qゲートでトランスパイラーを使用する方法を示します。"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:449
msgid "Now, we can schedule our ``transpiled_circ`` as we did before."
msgstr "これで、以前と同様に ``transpled_circ`` をスケジュールすることができます。"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:482
msgid "Scheduler methods"
msgstr "スケジューラーのメソッド"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:484
msgid "The scheduler can follow multiple routines. By default, it follows an *as late as possible* (ALAP) rule. Another scheduling method is *as soon as possible*, (ASAP). For both methods, the output schedule is minimal: in the longest-duration operation path of the input circuit, the start time of each operation is the end time of the proceeding operation. The methods determine how to schedule operations outside that longest path."
msgstr "スケジューラは複数のルーチンに従うことができます。デフォルトでは、*可能な限り遅く* (ALAP) ルールに従います。 別のスケジューリング方法は*できるだけ早く*、(できるだけ早く)です。 両方の方法で、出力スケジュールは最小です:入力回路の最長期間の動作経路内で、各操作の開始時刻は進行中の操作の終了時刻です。 メソッドは、その最も長いパスの外で操作をスケジュールする方法を決定します。"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:486
msgid "This is made clear through an example:"
msgstr "これは、以下の例によって明確になります："

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:531
msgid "For our mocked backend, these :math:`X` gate operations are each the same duration (``duration = 160 dt``). For the schedule to be minimal, the two :math:`X` operations on qubit 0 will be scheduled back-to-back, and the measurement pulse will immediately follow the second of those pulses."
msgstr "モックバックエンドでは、これらの :math:`X` ゲート操作はそれぞれ同じ時間(``duration = 160 dt``)です。 スケジュールを最小限にするために、量子ビット 0 の 2 つの :math:`X` 操作が繰り返しスケジュールされます。 測定パルスはすぐに2個目のパルスに追随します"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:533
msgid "ALAP will choose the latest valid time to schedule lesser-constrained operations, so the :math:`X` gate on qubit 1 will play in sync with the second :math:`X` gate on qubit 0."
msgstr "ALAP は、より制限が少ない操作をスケジュールする最新の有効時間を選択するため、量子ビット1の :math:`X`ゲートは、量子ビット0の2番目の :math:`X`ゲートと同期して再生されます。"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:565
msgid "On the other hand, as the name suggests, ASAP will schedule operations as soon as its resources are free. Thus, the :math:`X` gate on qubit 1 will be scheduled at ``time=0``, in sync with the first :math:`X` gate on qubit 0."
msgstr "一方、名前が示すように、ASAPはリソースが解放されるとすぐに操作をスケジュールします。 したがって、量子ビット1 の :math:`X` ゲートは ``time=0`` にスケジュールされます。 量子ビット0の最初の :math:`X`ゲートと同期しています。"

#: ../../tutorials/circuits_advanced/10_pulse_scheduler.ipynb:597
msgid "ALAP is the default because it allows qubits to remain idle as long as possible. In this case, the difference between ALAP and ASAP may be negligible, but in ALAP, qubit 0 has *no* time to decay from the excited state before measurement."
msgstr "ALAP は、量子ビットを可能な限りアイドル状態のままにすることを可能にするため、デフォルトです。 この場合、ALAP と ASAP の違いは無視できますが、ALAP では、 量子ビット0は、測定前に励起状態から崩壊する時間が*ありません*。"

