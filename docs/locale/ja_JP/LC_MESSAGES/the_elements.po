msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-16 10:37+0000\n"
"PO-Revision-Date: 2020-07-20 07:54\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/the_elements.po\n"
"X-Crowdin-File-ID: 7220\n"
"Language: ja_JP\n"

#: ../../the_elements.rst:5
msgid "The Qiskit Elements"
msgstr "Qiskit の要素"

#: ../../the_elements.rst:14
msgid "Terra"
msgstr "Terra"

#: ../../the_elements.rst:16
msgid "Terra, the ‘earth’ element, is the foundation on which the rest of Qiskit lies. Terra provides a bedrock for composing quantum programs at the level of circuits and pulses, to optimize them for the constraints of a particular device, and to manage the execution of batches of experiments on remote-access devices. Terra defines the interfaces for a desirable end-user experience, as well as the efficient handling of layers of optimization, pulse scheduling and backend communication."
msgstr "Terra 要素(「地」の意) は、他のQiskitを支える土台です。特定の量子デバイスの制約に対して最適化したり、 リモート・アクセスのデバイスに対して行われた実験実行を管理するために、回路やパルスのレベルで量子プログラムを構築する基盤を提供します。Terraは、効率的な最適化レイヤー処理、パルス・スケジューリング、バックエンド通信とともに、望ましいエンド・ユーザー体験のためのインターフェースを定義します。"

#: ../../the_elements.rst:23
msgid "Qiskit Terra is organized in six main modules:"
msgstr "Qiskit Terra は６つの主要なモジュールで構成されています："

#: ../../the_elements.rst:25
msgid ":mod:`qiskit.circuit` A quantum circuit is a model for quantum computing in which a computation is done by performing a sequence of quantum operations (usually gates) on a register of qubits. A quantum circuit usually starts with the qubits in the :math:`|0,…,0>` state and these gates evolve the qubits to states that cannot be efficiently represented on a classical computer. To extract information on the state a quantum circuit must have a measurement which maps the outcomes (possible random due to the fundamental nature of quantum systems) to classical registers which can be efficiently represented."
msgstr ":mod:`qiskit.circuit` 量子回路は、量子力学のモデルであり、量子演算 (通常はゲート) を量子ビットのレジスタに対して実行することで計算を行います。 量子回路は通常、 :math:`|0,…,0>` 状態の量子ビットから始まり、これらのゲートは量子ビットを古典コンピューター上で効率的に表現できない状態に時間発展させます。 量子状態に関する情報を抽出するためには、量子回路は「測定」によって結果（量子システムの基本的な性質上、ランダムな可能性があります）を効率的に表現できる古典レジスタにマッピングできる必要があります。"

#: ../../the_elements.rst:34
msgid ":mod:`qiskit.pulse` A pulse schedule is set of pulses which are sent to a quantum experiment that are applied to a channel (experimental input line). This is a lower level than circuits and requires each gate in the circuit to be  represented as a set of pulses. At this level the experiments can be designed to reduce errors (dynamical decoupling, error mitigation, and optimal pulse shapes)."
msgstr ":mod:`qiskit.pulse` パルス・スケジュールは、チャネル ( 実験用のインプットライン) に適用される量子実験に送られるパルスのセットです。 これは回路よりも低いレベルであり、回路内の各ゲートはパルスの集合として表現される必要があります。 このレベルでは、エラーを削減するための実験 ( ダイナミック・ディカップリング、エラー緩和、最適なパルス形状)を実現できます。"

#: ../../the_elements.rst:40
msgid ":mod:`qiskit.transpiler` A major part of research on quantum computing is working out how to run a quantum circuits on real devices.  In these devices, experimental errors and decoherence introduce errors during computation. Thus, to obtain a robust implementation it is essential to reduce the number of gates and the overall running time of the quantum circuit. The transpiler introduces the concept of a pass manager to allow users to explore optimization and find better quantum circuits for their given algorithm. We call it a transpiler as the end result is still a circuit."
msgstr ":mod:`qiskit.transpiler` 量子コンピューティングの研究の主要な部分は、実デバイス上で量子回路を実行する方法を研究しています。 このようなデバイスでは、実験誤差やデコヒーレンスによって計算中に誤差が発生します。そのため、堅牢な実装を実現するためには、量子回路のゲート数を減らし、全体的な動作時間を短縮することが重要です。トランスパイラは、ユーザーが最適化を探索し、与えられたアルゴリズムに対してより良い量子回路を見つけることを可能にするために、パスマネージャーの概念を導入します。最終的な結果が回路であることに変わりはないので、我々はこれをトランスパイラーと呼んでいます。"

#: ../../the_elements.rst:49
msgid ":mod:`qiskit.providers` Once the user has made the circuits to run on the backend they need to have a convenient way of working with it. In Terra we do this using four parts:"
msgstr ":mod:`qiskit.providers` ユーザーがバックエンドで実行する回路を作ったら、それを便利に活用できる方法が必要です。 Terraではこれを以下の4つのパートを利用して行います。"

#: ../../the_elements.rst:53
msgid "A ``Provider`` is an entity that implements the abstract base class :class:`~qiskit.providers.BaseProvider` and provides access to a group of different backends (for example, backends available through the `IBM Quantum Experience <https://quantum-computing.ibm.com>`__). It interacts with those backends to, for example, find out which ones are available, or retrieve an instance of a particular backend."
msgstr "プロバイダーは、抽象基本クラス :class:`~qiskit.providers.BaseProvider` を実装し、さまざまなバックエンドのグループ ( 例えば、`IBM Quantum Experience <https://quantum-computing.ibm.com>`_ を介して使用可能なバックエンド ) へのアクセスを提供するエンティティーです。 これは、使用可能なものを検出したり、特定のバックエンドのインスタンスを取得したりするために、バックエンドと相互作用します。"

#: ../../the_elements.rst:59
msgid "A ``Backend`` is an entity that implements the abstract base class :class:`~qiskit.providers.Backend` represent either a simulator or a real quantum computer and are responsible for running quantum circuits and returning results. They have a run method which takes in a `qobj` as input and returns a `BaseJob` object. This object allows asynchronous running of jobs for retrieving results from a backend when the job is completed."
msgstr "``Backend`` は、抽象ベースクラス :class:`~qiskit.providers を実装するエンティティです。 「ackend」はシミュレータまたは実際の量子コンピュータのいずれかを表し、量子回路の実行と結果の返却を担当します。 `qobj`を入力として受け取り、`BaseJob`オブジェクトを返すrunメソッドがあります。 このオブジェクトにより、ジョブが完了したときにバックエンドから結果を取得するためのジョブの非同期実行が可能になります。"

#: ../../the_elements.rst:66
msgid "``Job`` instances are implementations of the abstract base class :class:`~qiskit.providers.BaseJob` and can be thought of as the “ticket” for a submitted job. They find out the execution’s state at a given point in time (for example, if the job is queued, running, or has failed) and also allow control over the job."
msgstr "``Job`` インスタンスは抽象ベースクラス :class:`~qiskit.providers.BaseJob` の実装であり、送信されたジョブのチケットと考えることができます。 彼らは特定の時点での実行状態を見つけます（例えば、 ジョブがキュー、実行、または失敗した場合)と、ジョブの制御を許可します。"

#: ../../the_elements.rst:71
msgid ":class:`~qiskit.result.Result` Once the job has finished Terra allows the results to be obtained from the remote backends using ``result = job.result()``. This result object holds the quantum data and the most common way of interacting with it is by using ``result.get_counts(circuit)``. This method allows the user to get the raw counts from the quantum circuit and use them for more analysis with quantum information tools provided by Terra."
msgstr ":class:`~qiskit.result.Result` ジョブの完了後は `result = job.result()` を使用してリモートのバックエンドから結果を取得します。 取得した結果オブジェクトには量子データが含まれ、通常は `result.get_counts(circuit)` を使用してやりとりします。 このメソッドでは量子回路から生のカウント数を取得でき、Terra で提供される量子情報ツールを使用することで更に分析できます。"

#: ../../the_elements.rst:79
msgid ":mod:`qiskit.quantum_info` To perform more advanced algorithms and analysis of the circuits run on the quantum computer, it is important to have tools to implement simple quantum information tasks. These include methods to both estimate metrics and generate quantum states, operations, and channels."
msgstr ":mod:`qiskit.quantum_info` 量子コンピューター上で実行される回路のより高度なアルゴリズムおよび分析を実行するためには、シンプルな量子情報タスクを実行するためのツールを持つことが重要です。 これらには、メトリックを推定し、量子状態、操作、およびチャネルを生成する方法が含まれています。"

#: ../../the_elements.rst:85
msgid ":mod:`qiskit.visualization` In Terra we have many tools to visualize a quantum circuit. This allows a quick inspection of the quantum circuit to make sure it is what the user wanted to implement. There is a text, python and latex version. Once the circuit has run it is important to be able to view the output. There is a simple function (:func:`~qiskit.visualization.plot_histogram`) to plot the results from a quantum circuit including an interactive version. There is also a function :func:`~qiskit.visualization.plot_state` and :func:`~qiskit.visualization.plot_bloch_vector` that allow the plotting of a quantum state."
msgstr ":mod:`qiskit.visualization` Terraには、量子回路を可視化するためのツールが数多くあります。 これにより、量子回路を素早く検査し、ユーザーが実装しようとしていることを確認することができます。 テキスト、 python 、およびlatex のバージョンがあります。 回路が実行されると、出力を表示できるようになります。 インタラクティブなバージョンを含む量子回路の結果をプロットする単純な関数 (:func:`~qiskit.Visualization.plot_histogram' ) があります。 また、量子状態のプロットを可能にする、:func:`~qiskit.visualization.plot_state` および :func:`~qiskit.visualization.plot_bloch_vector` が存在します。"

#: ../../the_elements.rst:98
msgid "Aer"
msgstr "Aer"

#: ../../the_elements.rst:100
msgid "Aer, the ‘air’ element, permeates all Qiskit elements. To really speed up development of quantum computers we need better simulators, emulators and debuggers. Aer helps us understand the limits of classical processors by demonstrating to what extent they can mimic quantum computation. Furthermore, we can use Aer to verify that current and near-future quantum computers function correctly. This can be done by stretching the limits of simulation, and by simulating the effects of realistic noise on the computation."
msgstr "「Aer」要素(「空気」の意) は、あらゆる Qiskit 要素に横断的にはたらきかけます。量子コンピューターの開発スピードを本当に上げるには、より良いシミュレーター、より良いエミュレーター、より良いデバッガーが必要です。 「Aer」を使用することで古典プロセッサーのどの部分で量子コンピューティングを模倣できるかが分かり、 古典プロセッサーの限界を理解できます。 さらに「Aer」を使用して、現在そして近い将来の量子コンピューターの機能を正確に検証できます。 これはシミュレーションの限界を引き上げること、そして、 計算における現実のノイズの効果をシミュレーションすることで可能になります。"

#: ../../the_elements.rst:107
msgid "Aer provides a high performance simulator framework for quantum circuits using the Qiskit software stack. It contains optimized C++ simulator backends for executing circuits compiled in Terra. Aer also provides tools for constructing highly configurable noise models for performing realistic noisy simulations of the errors that occur during execution on real devices."
msgstr "Aer は、QisKitソフトウェア・スタックを利用した量子回路の高速シミュレーター・フレームワークです。Terraでコンパイルされた回路実行のために最適化された C++ シミュレーター・バックエンドが含まれます。Aerは実デバイス上で実行した場合に発生するエラーの現実的なノイズ・シミュレーションを行う、高度に構成可能なノイズ・モデル・ツールも提供しています。"

#: ../../the_elements.rst:113
msgid "Qiskit Aer includes three high performance simulator backends:"
msgstr "Qiskit Aerには3つの高パフォーマンス・シミュレーター・バックエンドがあります:"

#: ../../the_elements.rst:126
msgid ":class:`~qiskit.providers.aer.QasmSimulator`"
msgstr ":class:`~qiskit.providers.aer.QasmSimulator`"

#: ../../the_elements.rst:116
msgid "Allows ideal and noisy multi-shot execution of qiskit circuits and returns counts or memory. There are multiple methods that can be used that simulate different circuits more efficiently. These include:"
msgstr "Qiskitの回路を理想的またはノイズありの環境で複数回実行し、カウントまたはメモリーを返します。以下の通り、異なる回路をより効率的にシミュレートする複数のメソッドがあります:"

#: ../../the_elements.rst:120
msgid "*statevector* - Uses a dense statevector simulation."
msgstr "*statevector* - 高密度状態ベクトルシミュレーションに使用されます。"

#: ../../the_elements.rst:121
msgid "*stabilizer* - Uses a Clifford stabilizer state simulator that is only valid for Clifford circuits and noise models."
msgstr "*stabilizer* - Cliffordスタビライザー状態シミュレーターに使用されます。これは、Clifford回路とノイズ・モデルに対してのみ有効です。"

#: ../../the_elements.rst:123
msgid "*extended_stabilizer* - Uses an approximate simulator that decomposes circuits into stabilizer state terms, the number of which grows with the number of non-Clifford gates."
msgstr "*extended_stabilizer* - 回路をスタビライザー状態に分解する近似シミュレーターに使用されます。その数は非Cliffordゲートの数とともに増加します。"

#: ../../the_elements.rst:126
msgid "*matrix_product_state* - Uses a Matrix Product State (MPS) simulator."
msgstr "*matrix_product_state* -行列積 (Matrix Product State、MPS) シミュレーターに使用されます。"

#: ../../the_elements.rst:130
msgid ":mod:`~qiskit.providers.aer.StatevectorSimulator`"
msgstr ":mod:`~qiskit.providers.aer.StatevectorSimulator`"

#: ../../the_elements.rst:129
msgid "Allows ideal single-shot execution of qiskit circuits and returns the final statevector of the simulator after application."
msgstr "Qiskit回路の理想的な実行を一度し、適用後のシミュレーターの最終的な状態ベクトルを返します。"

#: ../../the_elements.rst:136
msgid ":mod:`~qiskit.providers.UnitarySimulator`"
msgstr ":mod:`~qiskit.providers.UnitarySimulator`"

#: ../../the_elements.rst:133
msgid "Allows ideal single-shot execution of qiskit circuits and returns the final unitary matrix of the circuit itself. Note that the circuit cannot contain measure or reset operations for this backend."
msgstr "Qiskit回路の理想的な実行を一回行い、回路自身の最終ユニタリー行列を返します。このバックエンドにおいて、回路は測定やリセット操作を含められないことに注意してください。"

#: ../../the_elements.rst:142
msgid "Ignis"
msgstr "Ignis"

#: ../../the_elements.rst:144
msgid "Ignis, the ‘fire’ element, is dedicated to fighting noise and errors and to forging a new path. This includes better characterization of errors, improving gates, and computing in the presence of noise. Ignis is meant for those who want to design quantum error correction codes, or who wish to study ways to characterize errors through methods such as tomography, or even to find a better way for using gates by exploring dynamical decoupling and optimal control."
msgstr "「Ignis」要素 (「火」の意) は、ノイズやエラーと戦い、新しい道を確立します。 「Ignis」には、より正確なエラー特定、ゲートの改良、ノイズ存在下での計算が含まれます。 量子エラー訂正コードの設計者や、断層撮影法などでのエラー特定方法を研究したい人、 あるいはダイナミカルデカップリングと最適制御の研究からゲートを使用したより良い方法を見つけたい人までをも対象とします。"

#: ../../the_elements.rst:151
msgid "Ignis provides code for users to easily generate circuits for specific experiments given a minimal set of user input parameters. Ignis code contains three fundamental building blocks:"
msgstr "Ignisは、ユーザー入力パラメーターの最小セットが与えられた特定の実験について、簡単に回路を生成するコードをユーザーに提供します。Ignisのコードには、以下の3つの基本的な構成要素があります:"

#: ../../the_elements.rst:157
msgid "**Circuits**"
msgstr "**回路**"

#: ../../the_elements.rst:156
msgid "The circuits module provides the code to generate the list of circuits for a particular Ignis experiment based on a minimal set of user parameters. These are then run on Terra or Aer."
msgstr "回路モジュールは、最小セットのユーザー・パラメーターに基づいたあるIngis実験について、回路リストを生成するコードを提供します。これらはTerraやAerで実行されます。"

#: ../../the_elements.rst:162
msgid "**Fitters**"
msgstr "**フィッター**"

#: ../../the_elements.rst:160
msgid "The results of an Ignis experiment are passed to the Fitters module where they are analyzed and fit according to the physics model describing the experiment. Fitters can plot the data plus fit and output a list of parameters."
msgstr "Ignis実験の結果はフィッター・モジュールに渡され、実験に記述された物理モデルにしたがって解析、フィットされます。フィッターはデータを描画することも、パラメータのリストを出力することもできます。"

#: ../../the_elements.rst:167
msgid "**Filters**"
msgstr "**フィルター**"

#: ../../the_elements.rst:165
msgid "For certain Ignis experiments, the fitters can output a Filter object. Filters can be used to mitigate errors in other experiments using the calibration results of an Ignis experiment."
msgstr "あるIgnisの実験に対し、フィッターはFilterオブジェクトを出力します。フィルターは、Ignis実験のキャリブレーション結果を使用して、他の実験のエラーを軽減するために使われます。"

#: ../../the_elements.rst:169
msgid "Qiskit Ignis is organized into three types of experiments that can be performed:"
msgstr "Qiskit Ignisは、実行可能な3種類の実験で編成されています:"

#: ../../the_elements.rst:173
msgid ":mod:`qiskit.ignis.characterization` Characterization experiments are designed to measure parameters in the system such as noise parameters (T1, T2-star, T2), Hamiltonian parameters such as the ZZ interaction rate and control errors in the gates."
msgstr ":mod:`qiskit.ignis.characterization` Characterization実験は、ノイズ・パラメーター (T1, T2-star, T2) などのシステム中のパラメーターや、ZZ相互作用レートなどのハミルトニアン・パラメーター、ゲート中の制御エラーなどを測定するために設計されています。"

#: ../../the_elements.rst:178
msgid ":mod:`qiskit.ignis.verification` Verification experiments are designed to verify gate and small circuit performance. Verification includes state and process tomography, quantum volume and randomized benchmarking (RB). These experiments provide the information to determine performance metrics such as the gate fidelity."
msgstr ":mod:`qiskit.ignis.verification` Verification実験は、ゲートや小さい回路のパフォーマンスを検証するために設計されています。Verificationは、状態およびプロセス・トモグラフィー、量子ボリューム、ランダマイズド・ベンチマーキング(RB) を含みます。これらの実験は、ゲートの忠実度(fidelity) のような評価指標を決定する情報を提供します。"

#: ../../the_elements.rst:184
msgid ":mod:`qiskit.ignis.mitigation` Mitigation experiments run calibration circuits that are analyzed to generate mitigation routines that can be applied to arbitrary sets of results run on the same backend. Ignis code will generate a list of circuits that run calibration measurements. The results of these measurements will be processed by a Fitter and will output a Filter than can be used to apply mitigation to other results."
msgstr ":mod:`qiskit.ignis.mitigation` Mitigation実験は、同じバックエンドで実行される結果セットに適用できる軽減ルーチンを生成するために分析する回路のキャリブレーションを実行します。Ignisのコードはキャリブレーション測定を実行する回路のリストを作成します。これらの測定結果は、Fitterによって処理され、他の結果の軽減に使えるようなFilterを出力します。"

#: ../../the_elements.rst:197
msgid "Aqua"
msgstr "Aqua"

#: ../../the_elements.rst:199
msgid "Aqua, the ‘water’ element, is the element of life. To make quantum computing live up to its expectations, we need to find real-world applications. Aqua is where algorithms for quantum computers are built. These algorithms can be used to build applications for quantum computing. Aqua is accessible to domain experts in chemistry, optimization, finance and AI, who want to explore the benefits of using quantum computers as accelerators for specific computational tasks."
msgstr "「Aqua」要素 (「水」の意) は、生命の要素です。 量子コンピューティングが期待に応えるには、実世界のアプリケーションを見つける必要があります。 Aquaには量子コンピューター用アルゴリズムが揃っていて、このアルゴリズムを使用して量子コンピューティングのアプリケーションを構築できます。 化学や最適化、金融、AI の専門家はAquaを使用することで、量子コンピューターの特定の計算タスクを加速化する利益を享受できます。"

#: ../../the_elements.rst:207
msgid "Problems that may benefit from the power of quantum computing have been identified in numerous domains, such as Chemistry, Artificial Intelligence (AI), Optimization and Finance. Quantum computing, however, requires very specialized skills. To address the needs of the vast population of practitioners who want to use and contribute to quantum computing at various levels of the software stack, we have created Qiskit Aqua."
msgstr "量子コンピューターのパワーから利益を享受できる問題は、ChemistryやArtificial Intelligence (AI)、Optimization、やFinanceなど、数多くの分野で確認されています。しかし、量子コンピューターはとても特殊なスキルを要求します。ソフトウェア・スタックの様々なレベルで、量子コンピューターを使い貢献したいと考えている多くの実行者のニーズに対応するため、Qiskit Aquaを開発しました。"

