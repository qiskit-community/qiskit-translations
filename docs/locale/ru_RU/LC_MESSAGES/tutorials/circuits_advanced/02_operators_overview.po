msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-02 21:04+0000\n"
"PO-Revision-Date: 2023-03-02 21:39\n"
"Last-Translator: \n"
"Language: ru\n"
"Language-Team: Russian\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/02_operators_overview.po\n"
"X-Crowdin-File-ID: 9124\n"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:10
msgid "This page was generated from `tutorials/circuits_advanced/02_operators_overview.ipynb`__."
msgstr "Страница создана на основе `tutorials/circuits_advanced/02_operators_overview.ipynb`__."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:9
msgid "Operators"
msgstr "Операторы"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:39
msgid "Operator Class"
msgstr "Класс Operator"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:41
msgid "The ``Operator`` class is used in Qiskit to represent matrix operators acting on a quantum system. It has several methods to build composite operators using tensor products of smaller operators, and to compose operators."
msgstr "Класс ``Operator`` представляет в Qiskit матрицы операторов, действующих на состояние квантовой системы. Для более сложных вариантов есть некоторые методы объединения объектов на основе тензорного и матричного произведений."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:44
msgid "Creating Operators"
msgstr "Создание операторов"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:46
msgid "The easiest way to create an operator object is to initialize it with a matrix given as a list or a Numpy array. For example, to create a two-qubit Pauli-XX operator:"
msgstr "Проще всего создать объект класса, инициализируя его как матрицу в виде списка или массива Numpy. Например так мы получим оператор XX, выполняющий логическое \"НЕ\" на обоих кубитах:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:106
msgid "Operator Properties"
msgstr "Свойства объекта"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:108
msgid "The operator object stores the underlying matrix, and the input and output dimension of subsystems."
msgstr "Оператор как объект хранит основную матрицу и данные о длине векторов на входе и выходе."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:110
msgid "``data``: To access the underlying Numpy array, we may use the ``Operator.data`` property."
msgstr "``data``: Основной массив Numpy доступен через свойство ``Operator.data``."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:111
msgid "``dims``: To return the total input and output dimension of the operator, we may use the ``Operator.dim`` property. *Note: the output is returned as a tuple* ``(input_dim, output_dim)``, *which is the reverse of the shape of the underlying matrix.*"
msgstr "``dims``: Размеры исходного и преобразованного векторов можно узнать с помощью свойства ``Operator.dim``. *Примечание: Результатом будет кортеж ``(input_dim, output_dim)``, при этом размерность основной матрицы составляет ``output_dim`` на ``input_dim``.*"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:203
msgid "Input and Output Dimensions"
msgstr "Размер ввода и вывода"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:205
msgid "The operator class also keeps track of subsystem dimensions, which can be used for composing operators together. These can be accessed using the ``input_dims`` and ``output_dims`` functions."
msgstr "Класс также отслеживает информацию о размерах подсистем, которая нужна при композиции операторов. Доступ к ней дают функции ``input_dims`` и ``output_dims``."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:207
msgid "For :math:`2^N` by :math:`2^M` operators, the input and output dimension will be automatically assumed to be M-qubit and N-qubit:"
msgstr "Для операторов размерности :math:`2^N` на :math:`2^M` по умолчанию полагается М кубитов на входе и N на выходе:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:257
msgid "If the input matrix is not divisible into qubit subsystems, then it will be stored as a single-qubit operator. For example, if we have a :math:`6\\times6` matrix:"
msgstr "Если входная матрица не может быть разделена на подсистемы, она будет храниться как однокубитный оператор. Например, для матрицы :math:`6\\times6`:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:307
msgid "The input and output dimension can also be manually specified when initializing a new operator:"
msgstr "Размеры также могут быть заданы при инициализации нового оператора вручную:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:399
msgid "We can also extract just the input or output dimensions of a subset of subsystems using the ``input_dims`` and ``output_dims`` functions:"
msgstr "Мы также можем получить информацию о размерности входа или выхода по отдельности, используя функции ``input_dims`` и ``output_dims```:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:449
msgid "Converting classes to Operators"
msgstr "Преобразование классов в операторы"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:451
msgid "Several other classes in Qiskit can be directly converted to an ``Operator`` object using the operator initialization method. For example:"
msgstr "Объекты некоторых других классов Qiskit можно напрямую преобразовать в объект ``Operator`` с помощью метода инициализации. Например:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:453
msgid "``Pauli`` objects"
msgstr "``Pauli``"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:454
msgid "``Gate`` and ``Instruction`` objects"
msgstr "``Gate`` и``Instruction``"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:455
msgid "``QuantumCircuit`` objects"
msgstr "``QuantumCircuits``"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:457
msgid "Note that the last point means we can use the ``Operator`` class as a unitary simulator to compute the final unitary matrix for a quantum circuit, without having to call a simulator backend. If the circuit contains any unsupported operations, an exception will be raised. Unsupported operations are: measure, reset, conditional operations, or a gate that does not have a matrix definition or decomposition in terms of gate with matrix definitions."
msgstr "Отметим, что последний вариант говорит о возможности использования класса ``Operator`` для симуляции конечной унитарной матрицы квантовой цепи без вызова бэкенда. Однако при наличии в цепи каких-либо неподдерживаемых операций возникает исключение. К ним относятся измерение, сброс, условные операции и гейты, непредставимые в виде матрицы и не раскладываемые до таковых."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:690
msgid "Using Operators in circuits"
msgstr "Использование операторов в цепях"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:692
msgid "Unitary ``Operators`` can be directly inserted into a ``QuantumCircuit`` using the ``QuantumCircuit.append`` method. This converts the ``Operator`` into a ``UnitaryGate`` object, which is added to the circuit."
msgstr "Унитарный ``Operator`` может применяться в цепи ``QuantumCircuit`` непосредственно с помощью метода ``QuantumCircuit.append``. В этом случае ``Operator`` будет преобразован в объект ``UnitaryGate``."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:694
msgid "If the operator is not unitary, an exception will be raised. This can be checked using the ``Operator.is_unitary()`` function, which will return ``True`` if the operator is unitary and ``False`` otherwise."
msgstr "Если оператор не унитарен, вызывается исключение (exception). Это можно отдельно проверить с помощью функции ``Operator.is_unitary()``, возвращающей ``True`` в случае унитарности и ``False`` при ее отсутствии."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:731
msgid "Note that in the above example we initialize the operator from a ``Pauli`` object. However, the ``Pauli`` object may also be directly inserted into the circuit itself and will be converted into a sequence of single-qubit Pauli gates:"
msgstr "Отметим, что в вышеприведенном примере оператор инициализируется из объекта ``Pauli``. Однако ``Pauli`` может применяться в цепи и напрямую, будучи преобразованным в последовательность однокубитных гейтов Паули:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:857
msgid "Combining Operators"
msgstr "Объединение операторов"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:859
msgid "Operators may be combined using several methods."
msgstr "Операторы можно сочетать разными методами."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:862
msgid "Tensor Product"
msgstr "Тензорное произведение"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:864
msgid "Two operators :math:`A` and :math:`B` may be combined into a tensor product operator :math:`A\\otimes B` using the ``Operator.tensor`` function. Note that if both :math:`A` and :math:`B` are single-qubit operators, then ``A.tensor(B)`` = :math:`A\\otimes B` will have the subsystems indexed as matrix :math:`B` on subsystem 0, and matrix :math:`A` on subsystem 1."
msgstr "Из двух операторов :math:`A` и :math:`B` можно построить оператор большей размерности, перемножая их тензорно :math:`A\\otimes B` с помощью ``Operator.tensor``. Если операторы :math:`A` и :math:`B` являются однокубитными, то ``A.tensor(B)`` = :math:`A\\otimes B` означает одновременное действие :math:`B` на нулевой кубит и :math:`A` на первый."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:925
msgid "Tensor Expansion"
msgstr "Тензорное расширение"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:927
msgid "A closely related operation is ``Operator.expand``, which acts like a tensor product but in the reverse order. Hence, for two operators :math:`A` and :math:`B` we have ``A.expand(B)`` = :math:`B\\otimes A` where the subsystems indexed as matrix :math:`A` on subsystem 0, and matrix :math:`B` on subsystem 1."
msgstr "Похожим образом действует и функция``Operator.expand``, вычисляющая тензорное произведение тех же матриц, записанных в обратном порядке. Результатом будет оператор ``A.expand(B)`` = :math:`B\\otimes A`, где :math:`A` действует уже на нулевой кубит, а :math:`B` на первый."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:988
msgid "Composition"
msgstr "Матричное произведение (композиция)"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:990
msgid "We can also compose two operators :math:`A` and :math:`B` to implement matrix multiplication using the ``Operator.compose`` method. We have that ``A.compose(B)`` returns the operator with matrix :math:`B.A`:"
msgstr "Мы также можем объединить два последовательно применяемых оператора :math:`A` и :math:`B`, вычисляя их матричное произведение с помощью метода ``Operator.compose``. Результатом ``A.compose(B)`` будет оператор :math:`B.A`:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1044
msgid "We can also compose in the reverse order by applying :math:`B` in front of :math:`A` using the ``front`` kwarg of ``compose``: ``A.compose(B, front=True)`` = :math:`A.B`:"
msgstr "Если :math:`B` нужно применить раньше, чем :math:`A`, можно использовать в методе ``compose`` именованный аргумент ``front``: ``A.compose(B, front=True)`` = :math:`A.B`:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1099
msgid "Subsystem Composition"
msgstr "Композиция подсистем"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1101
msgid "Note that the previous compose requires that the total output dimension of the first operator :math:`A` is equal to total input dimension of the composed operator :math:`B` (and similarly, the output dimension of :math:`B` must be equal to the input dimension of :math:`A` when composing with ``front=True``)."
msgstr "Обратите внимание, что матричное произведение требует соответствия размерностей выхода первого оператора :math:`A` и входа второго :math:`B` (и наоборот при аргументе ``front=True``)."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1103
msgid "We can also compose a smaller operator with a selection of subsystems on a larger operator using the ``qargs`` kwarg of ``compose``, either with or without ``front=True``. In this case, the relevant input and output dimensions of the subsystems being composed must match. *Note that the smaller operator must always be the argument of* ``compose`` *method.*"
msgstr "Можно также матрично умножить оператор на выбранную часть другого оператора большей размерности. Для этого применяют аргумент с ключом ``qargs``, независимым от значения ``front``. Здесь также нужно следить за равенством количества столбцов первой матрицы и строк второй. *Меньший по размеру оператор будет аргументом метода ``compose``, применяемого к большему*"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1105
msgid "For example, to compose a two-qubit gate with a three-qubit Operator:"
msgstr "Рассмотрим пример объединения двухкубитного гейта с частью трехкубитного оператора:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1289
msgid "Linear combinations"
msgstr "Линейные комбинации"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1291
msgid "Operators may also be combined using standard linear operators for addition, subtraction and scalar multiplication by complex numbers."
msgstr "Помимо этого к операторам могут применяться линейные операции, такие как сложение, вычитание и скалярное умножение на комплексное число."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1354
msgid "An important point is that while ``tensor``, ``expand`` and ``compose`` will preserve the unitarity of unitary operators, linear combinations will not; hence, adding two unitary operators will, in general, result in a non-unitary operator:"
msgstr "Однако отметим, что в отличие от методов ``tensor``, ``expand`` и ``compose``, сохраняющих унитарность, результатом линейного преобразования в общем случае является неунитарный оператор:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1401
msgid "Implicit Conversion to Operators"
msgstr "Неявное преобразование в операторы"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1403
msgid "Note that for all the following methods, if the second object is not already an ``Operator`` object, it will be implicitly converted into one by the method. This means that matrices can be passed in directly without being explicitly converted to an ``Operator`` first. If the conversion is not possible, an exception will be raised."
msgstr "В рассмотренных ниже примерах, если второй объект не принадлежит к ``Operator``, он будет автоматически преобразован в экземпляр этого класса. Поэтому можно использовать матрицу напрямую без ее предварительного явного преобразования в ``Operator``. При невозможности такой процедуры возникает исключение."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1457
msgid "Comparison of Operators"
msgstr "Сравнение операторов"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1459
msgid "Operators implement an equality method that can be used to check if two operators are approximately equal."
msgstr "Операторы можно сравнивать друг с другом для проверки их приблизительного взаимного равенства."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1505
msgid "Note that this checks that each matrix element of the operators is approximately equal; two unitaries that differ by a global phase will not be considered equal:"
msgstr "При этом сравниваются соответствующие элементы матриц, поэтому унитарные операторы с разной глобальной фазой не будут считаться равными:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1552
msgid "Process Fidelity"
msgstr "Точность процесса"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1554
msgid "We may also compare operators using the ``process_fidelity`` function from the *Quantum Information* module. This is an information theoretic quantity for how close two quantum channels are to each other, and in the case of unitary operators it does not depend on global phase."
msgstr "Другим способом сравнения операторов является функция ``process_fidelity`` из модуля *Quantum Information*. Она показывает теоретическую степень совпадения информации, пройденной через пару схожих квантовых каналов, при этом различие глобальной фазы не будет учитываться."

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1605
msgid "Note that process fidelity is generally only a valid measure of closeness if the input operators are unitary (or CP in the case of quantum channels), and an exception will be raised if the inputs are not CP."
msgstr "Эта функция показывает степень совпадения только унитарных операторов (или CP в случае квантовых каналов), в остальных случаях возникает исключение (exception)."

