msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-26 23:06+0000\n"
"PO-Revision-Date: 2023-01-26 23:32\n"
"Last-Translator: \n"
"Language-Team: Russian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.po\n"
"X-Crowdin-File-ID: 9128\n"
"Language: ru_RU\n"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:10
msgid "This page was generated from `tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb`__."
msgstr "Страница создана на основе `tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb`__."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:9
msgid "Transpiler Passes and Pass Manager"
msgstr "Проходы транспайлера и менеджер проходов"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:21
msgid "Introduction"
msgstr "Введение"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:32
msgid "A central component of Qiskit Terra is the transpiler, which is designed for modularity and extensibility. The goal is to be able to easily write new circuit transformations (known as transpiler **passes**), and combine them with other existing passes. Which passes are chained together and in which order has a major effect on the final outcome. This pipeline is determined by a **pass manager**, which schedules the passes and also allows passes to communicate with each other by providing a shared space. In this way, the transpiler opens up the door for research into aggressive optimization of quantum circuits."
msgstr "Центральным компонентом Qiskit Terra является транспайлер, обеспечивающий модульность и расширяемость. Его преимущество состоит в возможности легко записывать новые преобразования цепи (так называемые **проходы** транспайлера) и комбинировать их с уже имеющимися. При этом на конечный результат сильно влияет порядок и сочетание действий. Маршрут определяется с помощью **менеджера проходов**, планирующего преобразования и формирующего общее пространство их взаимодействия. Благодаря этому транспайлер открывает возможность глубокой оптимизации квантовых цепей."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:35
msgid "In this notebook, we look at the built-in passes, how to use the pass manager, and develop a simple custom transpiler pass. In order to do the latter, we first need to introduce the internal representation of quantum circuits in Qiskit, in the form of a Directed Acyclic Graph, or **DAG**. Then, we illustrate a simple swap mapper pass, which transforms an input circuit to be compatible with a limited-connectivity quantum device."
msgstr "В этом блокноте мы рассмотрим встроенные проходы и порядок работы с менеджером, а также разработаем простой проход транспайлера самостоятельно. Познакомимся сначала с внутренним представлением квантовых цепей Qiskit в виде ориентированного ациклического графа **ОАГ**. Затем покажем как устроен проход со swap-отображениями (swap=обмен), подготавливающий цепь для запуска на квантовом устройстве с ограниченным числом связей."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:37
msgid "**Before you start**: You may need to install the ``pydot`` library and the ``graphviz`` library for the DAG plotting routines. If you are using Anaconda Python, you can install both with the ``conda`` command. If you use your system’s native Python interpreter, install ``pydot`` using the ``pip`` command, and install ``graphviz`` using your system’s native package manager (e.g. ``yum``, ``apt``, ``dnf``, ``brew``, etc.)."
msgstr "**Перед началом работы*: Для построения ОАГ вам могут потребоваться библиотеки ``pydot`` и ``graphviz``. При работе в Anaconda они устанавливаются с помощью команды ``conda``. Если вы используете встроенный системный интерпретатор Python, установка ``pydot`` выполняется командой ``pip``, а``graphviz`` - встроенным менеджером пакетов (``yum``, ``apt``, ``dnf``, ``brew`` и т.д.)."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:61
msgid "PassManager object"
msgstr "Объект PassManager"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:63
msgid "Lets you specify the set of passes you want."
msgstr "Позволяет указать желаемый набор проходов."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:118
msgid "All of Qiskit’s transpiler passes are accessible from ``qiskit.transpiler.passes``."
msgstr "Все проходы транспайлера доступны в ``qiskit.transpiler.passes``."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:433
msgid "Different Variants of the Same Pass"
msgstr "Вариабельность проходов"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:435
msgid "There can be passes that do the same job, but in different ways. For example, the ``TrivialLayout``, ``DenseLayout`` and ``NoiseAdaptiveLayout`` all choose a layout (binding of virtual qubits to physical qubits), but use different algorithms and objectives. Similarly, the ``BasicSwap``, ``LookaheadSwap`` and ``StochasticSwap`` all insert swaps to make the circuit compatible with the coupling map. The modularity of the transpiler allows plug-and-play replacements for each pass."
msgstr "Одно и то же задание может быть выполнено разными способами. Например, ``TrivialLayout``, ``DenseLayout`` и``NoiseAdaptiveLayout`` задают компоновку (привязку виртуальных кубитов к физическим), используя при этом различные алгоритмы и цели. Аналогичным образом ``BasicSwap``, ``LookaheadSwap`` и ``StochasticSwap`` меняют состояния кубитов местами, делая цепь совместимой со схемой сопряжений конкретного устройства. Модулярность транспайлера позволяет делать быстрые замены каждого прохода."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:437
msgid "Below, we show the swapper passes all applied to the same circuit, to transform it to match a linear chain topology. You can see differences in performance, where the ``StochasticSwap`` is clearly the best. However, this can vary depending on the input circuit."
msgstr "Ниже мы покажем, как обменные проходы преобразуют одну и ту же цепь для запуска на устройстве с линейной топологией. Сравнение производительности показывает, что самым лучшим вариантом является ``StochasticSwap``. Однако это сильно зависит от вида входной цепи."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:560
msgid "Preset Pass Managers"
msgstr "Встроенные менеджеры проходов"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:562
msgid "Qiskit comes with several pre-defined pass managers, corresponding to various levels of optimization achieved through different pipelines of passes. Currently ``optimization_level`` 0 through 3 are supported; the higher the number, the more optimized it is, at the expense of more time. Choosing a good pass manager may take trial and error, as it depends heavily on the circuit being transpiled and the backend being targeted."
msgstr "Qiskit содержит несколько предустановленных менеджеров разного уровня оптимизации, определяемого маршрутом проходов. Параметр ``optimization_level`` может принимать значения от 0 до 3; чем больше это число, тем глубже будет оптимизация и тем больше времени займет эта процедура. Выбор подходящего менеджера чаще всего достигается методом проб и ошибок, так как сильно зависит от цепи и бэкенда."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:564
msgid "Here we illustrate the different levels by looking at a state synthesis circuit. We initialize four qubits to an arbitrary state, and then try to optimize the circuit that achieves this."
msgstr "Рассмотрим, чем отличаются эти уровни на примере создания некоторого состояния. Инициализируем четырехкубитный регистр произвольным образом, а затем попробуем оптимизировать цепь, которая может задать такое состояние."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:566
msgid "``optimization_level=0``: just maps the circuit to the backend, with no explicit optimization (except whatever optimizations the mapper does)."
msgstr "``optimization_level=0``: просто отображает цепь на бэкенд без явной оптимизации (за исключением необходимой при отображении)."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:568
msgid "``optimization_level=1``: maps the circuit, but also does light-weight optimizations by collapsing adjacent gates."
msgstr "``optimization_level=1``: отображает цепь и слегка ее оптимизирует, сворачивая соседние вентили."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:570
msgid "``optimization_level=2``: medium-weight optimization, including a noise-adaptive layout and a gate-cancellation procedure based on gate commutation relationships."
msgstr "``optimization_level=2``: средняя оптимизация, включающая поправку на шум и удаление вентилей на основе их коммутации."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:572
msgid "``optimization_level=3``: heavy-weight optimization, which in addition to previous steps, does resynthesis of two-qubit blocks of gates in the circuit."
msgstr "``optimization_level=3``: сложная оптимизация, которая в дополнение к предыдущим шагам затрагивает двухкубитные вентили."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:829
msgid "Now map this to the 20-qubit Tokyo device, with different optimization levels:"
msgstr "Отправим цепь на 20-кубитное устройство Tokyo, пробуя разные уровни оптимизации:"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:997
msgid "Introducing the DAG"
msgstr "Введение в ОАГ"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1008
msgid "In Qiskit, we represent circuits internally using a Directed Acyclic Graph (DAG). The advantage of this representation over a pure list of gates (i.e., *netlist*) is that the flow of information between operations are explicit, making it easier for passes to make transformation decisions without changing the semantics of the circuit."
msgstr "Внутри Qiskit мы представляем цепи в виде ориентированного ациклического графа (ОАГ). В отличие от простого перечисления вентилей, такая сетевая схема (*список соединений*) явно отображает поток информации между операциями, позволяя упростить форму цепи без изменения ее содержания."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1010
msgid "Let’s start by building a simple circuit, and examining its DAG."
msgstr "Начнем с создания простой цепи и изучения ее ОАГ."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1049
msgid "In the DAG, there are three kinds of graph nodes: qubit/clbit input nodes (green), operation nodes (blue), and output nodes (red). Each edge indicates data flow (or dependency) between two nodes."
msgstr "В ОАГ существуют три вида узлов: вход бита или кубита (зеленые), операция (синие) и выход (красные). Каждое ребро отвечает передаче данных (или зависимости) между двумя вершинами."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1082
msgid "Therefore, writing a transpiler pass means using Qiskit’s DAGCircuit API to analyze or transform the circuit. Let’s see some examples of this."
msgstr "Таким образом, создание прохода транспайлера подразумевает использование API DAGCircuit для анализа или преобразования цепи. Рассмотрим некоторые примеры."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1093
msgid "**a. Get all op nodes in the DAG:**"
msgstr "**a. Получение всех операционных вершин ОАГ:**"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1148
msgid "Each node is an instance of the ``DAGOpNode`` class. Let’s examine the information stored in the second op node."
msgstr "Каждая вершина является экземпляром класса ``DAGOpNode``. Например во второй операционной вершине хранится следующая информация."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1210
msgid "**b. Add an operation to the back:**"
msgstr "**b. Добавление операции в конец:**"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1242
msgid "**c. Add an operation to the front:**"
msgstr "**c. Добавление операции в начало:**"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1274
msgid "**d. Substitute a node with a subcircuit:**"
msgstr "**d. Замена вершины подцепью:**"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1314
msgid "Finally, after all transformations are complete, we can convert back to a regular QuantumCircuit object. This is what the transpiler does! It takes a circuit, operates on it in DAG form, and outputs a transformed circuit."
msgstr "В итоге после всех преобразований мы можем вернуться к обычному объекту QuantumCircuit. Именно это и делает транспайлер. Он берет цепь, работает с ней в формате ОАГ, а затем возвращает преобразованную цепь."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1347
msgid "Implementing a BasicMapper Pass"
msgstr "Реализация прохода BasicMapper"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1358
msgid "Now that we are familiar with the DAG, let’s use it to write a transpiler pass. Here we will implement a basic pass for mapping an arbitrary circuit to a device with limited qubit connectivity. We call this the BasicMapper. This pass is included in Qiskit Terra as well."
msgstr "Поскольку теперь мы знакомы с ОАГ, используем его для написания прохода транспайлера. Создадим базовое преобразование произвольной цепи для запуска на устройстве с ограниченным числом связей между кубитами. Такой проход называется BasicMapper и содержится в Qiskit Terra."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1360
msgid "The first thing to do when writing a transpiler pass is to decide whether the pass class derives from a ``TransformationPass`` or ``AnalysisPass``. Transformation passes modify the circuit, while analysis passes only collect information about a circuit (to be used by other passes). Then, the ``run(dag)`` method is implemented, which does the main task. Finally, the pass is registered inside the ``qiskit.transpiler.passes`` module."
msgstr "Прежде всего нужно определиться, какой из классов,``TransformationPass`` или ``AnalysisPass``, мы будем использовать. Первый отвечает за преобразование цепи, в то время как второй только собирает о ней информацию (используемую другими проходами). Затем применяем метод ``run(dag)``, который и выполняет основную работу. В самом конце регистрируем проход в модуле ``qiskit.transpiler.passes``."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1362
msgid "This pass functions as follows: it traverses the DAG layer-by-layer (each layer is a group of operations that does not act on independent qubits, so in theory all operations in a layer can be done independently). For each operation, if it does not already meet the coupling map constraints, the pass identifies a swap path and inserts swaps to bring the two qubits close to each other."
msgstr "Этот проход работает следующим образом: он послойно просматривает ОАГ (каждый слой состоит из операций, не затрагивающих независимые кубиты, поэтому теоретически все операции слоя могут действовать независимо). Если операция не соответствует схеме сопряжений, проход находит и реализует обменный путь для сближения двух кубитов."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1364
msgid "Follow the comments in the code for more details."
msgstr "Дополнительные сведения смотрите в комментариях к коду."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1480
msgid "Let’s test this pass on a small example circuit."
msgstr "Проверим работу прохода на небольшой пробной цепи."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1534
msgid "Now we construct a pass manager that contains our new pass. We pass the example circuit above to this pass manager, and obtain a new, transformed circuit."
msgstr "Создадим менеджер, содержащий новый проход. Отправим ему нашу пробную цепь и получим ее в преобразованном виде."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1602
msgid "Note that this pass only inserts the swaps necessary to make every two-qubit interaction conform to the device coupling map. It does not, for example, care about the direction of interactions, or the native gate set supported by the device. This is a design philosophy of Qiskit’s transpiler: every pass performs a small, well-defined action, and the aggressive circuit optimization is achieved by the pass manager through combining multiple passes."
msgstr "Отметим, что этот проход только добавляет обмены для соответствия каждой двухкубитной операции схеме сопряжений. При этом не имеет значения, к примеру, направление взаимодействия или какие внутренние вентили поддерживаются устройством. В этом суть транспайлера Qiskit: каждый проход выполняет небольшое, четко определенное действие, а полная оптимизация контура достигается их комбинацией с помощью менеджера."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1614
msgid "Transpiler Logging"
msgstr "Ведение логов транспайлера"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1616
msgid "Due to the complexity of the internal operations that the transpiler is performing it’s likely that you’ll end up in a situation where you’d like to debug an issue or just understand more of what is happening inside the transpiler when you call it. To facilitate this the transpiler emits log messages as part of its normal operation. This logging uses the Python standard library ``logging`` module to emit the log messages. Python’s standard logging was used because it allows Qiskit-Terra’s logging to integrate in a standard way with other applications and libraries."
msgstr "Из-за сложности внутренних операций, выполняемых транспайлером, вы, возможно, когда-нибудь столкнетесь с необходимостью отладки проблем или получения подробной информации о том, что происходит при его работе. Для этого будут полезны логи, которые обычно ведет транспайлер. Журнал записей ведется с помощью модуля ``logging`` стандартной библиотеки Python, что удобно в интеграции Qiskit Terra с другими приложениями и библиотеками."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1619
msgid "For a more thorough introduction to Python logging refer to the `official documentation <https://docs.python.org/3/library/logging.html>`__ and the tutorials and cookbook linked off of there."
msgstr "Для более подробной информации о логах в Python обратитесь к `официальной документации <https://docs.python.org/3/library/logging.html>`__ и предлагаемым в ней руководствам."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1634
msgid "Note: Most of the logging module functions used in this section adjust global settings. If you run commands in this section it might effect the output from other cells if they are run in a different order."
msgstr "Примечание: Большинство функций модуля ведения журнала операций, используемых в этом разделе, затрагивает глобальные настройки. Запуск этих команд может влиять на результат работы других ячеек при запуске в другом порядке."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1650
msgid "Configuring Python Standard Library Logging"
msgstr "Настройка стандартного ведения журнала библиотеки Python"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1652
msgid "By default Python Standard Logging only prints log messages at the ``WARNING``, ``ERROR``, or ``CRITICAL`` log levels. Since none of the logs emitted by the transpiler use these log levels (they’re all informative) you need to configure logging."
msgstr "По умолчанию стандартное ведение журнала Python включает сообщения уровней ``WARNING``, ``ERROR``, или ``CRITICAL``. Так как ни одно сообщение о работе транспайлера не относится к этом уровням (они все информативные), нужно выполнить предварительную настройку."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1654
msgid "The simplest way to do this is to just run:"
msgstr "Проще всего сделать это, запустив:"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1677
msgid "The ``basicConfig()`` function (see the docs here: https://docs.python.org/3/library/logging.html#logging.basicConfig) configures a root handler and formatter. We also specify the `log level <https://docs.python.org/3/library/logging.html#levels>`__ to display with the ``level`` kwarg. Setting it to a level will also include and higher levels. For example, if you set it to ``'INFO'`` in addition to the ``INFO`` level this will also include the ``WARNING``, ``ERROR``, and ``CRITICAL`` log levels."
msgstr "Функция ``basicConfig()`` (см. документацию здесь: https://docs.python.org/3/library/logging.html#logging.basicConfig) настраивает корневой обработчик и форматирование. Кроме того, укажем `уровень логирования <https://docs.python.org/3/library/logging.html#levels>`__ с помощью именованного аргумента ``level``. Установка определенного уровня автоматически включает и все более высокие. Например при выборе ``'INFO'`` помимо него будут присутствовать сообщения уровней ``WARNING``, ``ERROR``, и ``CRITICAL``."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1679
msgid "Now the python environment in this notebook is configured to emit log messages to stderr when you run the transpiler. For example:"
msgstr "Теперь среда Python в этом блокноте настроена на вывод сообщений журнала на stderr при запуске транспайлера. Например:"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1694
msgid "Note: basicConfig() will only work when called the first time it’s called. It detects if a root handler and formatter have already been setup (either by using an earlier basicConfig() call or otherwise) and does nothing if they have. Further adjustments will have to by interacting with the handler directly."
msgstr "Примечание: basicConfig() работает только при первом вызове. Прежде всего она определяет, настроены корневой обработчик и верстальщик (с помощью предыдущего вызова basicConfig() или как-то иначе) и ничего не делает, если это так. Дальнейшая корректировка производится путем прямого взаимодействия с обработчиком."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:2402
msgid "As you can clearly see here when calling ``transpile()`` it now prints 2 types of log messages. The first is at the ``INFO`` log level and come from the pass manager. These indicate each pass that was executed and how long that took. The second are at the ``DEBUG`` level and come from the StochasticSwap pass and describes the internal operation of that pass. It’s useful for debugging issues in the pass’s operation."
msgstr "Теперь видно, что при вызове ``transpile()`` печатается уже два типа сообщений журнала. Первый тип относится к уровню ``INFO`` и за них отвечает менеджер. Здесь отмечается каждый выполненный проход и затраченное на это время. Сообщения второго типа соответствуют уровню``DEBUG``, возникают при работе StochasticSwap и описывают структуру данного конкретного прохода. Это будет полезно при его отладке."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:2414
msgid "Adjusting the log level for the transpiler"
msgstr "Настройка уровня логирования транспайлера"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:2416
msgid "The qiskit transpiler uses a single namespace ``qiskit.transpiler``, as used by ``logging.getLogger('qiskit.transpiler')``. This makes it very easy to adjust the log level for just the transpiler. For example if you only wish to see log messages at the INFO level or above you can run:"
msgstr "Единое пространство имен ``qiskit.transpiler``, используемое в ``logging.getLogger('qiskit.transpiler')``, позволяет легко настроить уровень журнала транспайлера. Например, если вы хотите видеть сообщения журнала на уровне INFO и выше, вы можете запустить:"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:2617
msgid "Setting up logging to deal with parallel execution"
msgstr "Настройка логирования при параллельном выполнении"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:2619
msgid "When running the transpiler with multiple circuits by default these circuits are transpiled in parallel. If you want to do this with logging enabled and be able to understand the output some additional steps are required."
msgstr "При запуске транспайлера с несколькими цепями, по умолчанию они обрабатываются параллельно. Если вы не хотите запутаться в сообщениях, потребуется несколько дополнительных шагов."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:2621
msgid "If you were just to enable logging as above and then pass ``transpile()`` multiple circuits you’ll get results that are difficult to decipher. For example:"
msgstr "Если вы просто включите логирование, как делали это раньше, а затем отправите в ``transpile()`` несколько цепей, то получите результаты, которые трудно расшифровать. Например:"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:3961
msgid "As you can see here we get log messages from all 3 circuits being transpiled together. There is no way to know which pass is part of which circuit’s transpilation. Luckily Python logging provides tools to deal with this. The simplest one is to just change the `log formatter <https://docs.python.org/3/library/logging.html#logging.Formatter>`__ so that includes additional information so we can associate a log message with the process it came from."
msgstr "Как видно здесь, мы получаем общий журнал сообщений о транспиляции всех трех цепей сразу. При этом невозможно определить, какую из них преобразует каждый из записанных проходов. Однако с этим может помочь настройка логирования Python. Проще всего изменить формат `логов <https://docs.python.org/3/library/logging.html#logging.Formatter>`__ так, чтобы они включали в себя дополнительную информацию для определения, какой из процессов записал конкретное сообщение."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:3984
msgid "Then rerun the ``transpile()`` call and see the new log formatter."
msgstr "Перезапустим ``transpile()`` и посмотрим на новый формат журнала."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:5320
msgid "Now the format for the log messages has been changed and it includes a process name for each of the transpilation processes so it’s at least clear which log messages go together."
msgstr "Теперь вид логов изменился и включает в себя имена всех процессов транспиляции, что, по крайней мере, проясняет, какие из сообщений связаны друг с другом."

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:5322
msgid "There are many different options for how you can configure, this example is pretty limited. Refer to the documentation for more examples and options to build more sophisticated use cases that suit your specific use case or preferences."
msgstr "Существует много различных вариантов настроек, так что нами рассмотрен лишь один из частных примеров. Дополнительные примеры и опции более сложных вариантов использования, которые могут быть полезны, вы можете посмотреть в документации."

