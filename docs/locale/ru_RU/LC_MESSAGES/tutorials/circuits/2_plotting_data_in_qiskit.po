msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-03 12:57+0000\n"
"PO-Revision-Date: 2023-11-03 14:48\n"
"Last-Translator: \n"
"Language: ru\n"
"Language-Team: Russian\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/circuits/2_plotting_data_in_qiskit.po\n"
"X-Crowdin-File-ID: 9116\n"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:10
msgid "This page was generated from `tutorials/circuits/2_plotting_data_in_qiskit.ipynb`__."
msgstr "Страница создана на основе `tutorials/circuits/2_plotting_data_in_qiskit.ipynb`__."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:9
msgid "Qiskit Visualizations"
msgstr "Визуализации Qiskit"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:32
msgid "Plot Histogram"
msgstr "Отображение гистограммы"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:34
msgid "To visualize the data from a quantum circuit run on a real device or ``qasm_simulator`` we have made a simple function"
msgstr "Для визуализации данных, полученных от квантовой схемы на реальном устройстве или на ``qasm_simulator``, мы сделали простую функцию"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:36
msgid "``plot_histogram(data)``"
msgstr "``plot_histogram(data)``"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:38
msgid "As an example we make a 2-qubit Bell state"
msgstr "В качестве примера мы делаем двухкубитное состояние Белла"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:116
msgid "Options when plotting a histogram"
msgstr "Опции при построении гистограммы"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:118
msgid "The ``plot_histogram()`` has a few options to adjust the output graph. The first option is the ``legend`` kwarg. This is used to provide a label for the executions. It takes a list of strings used to label each execution's results. This is mostly useful when plotting multiple execution results in the same histogram. The ``sort`` kwarg is used to adjust the order the bars in the histogram are rendered. It can be set to either ascending order with ``asc`` or descending order with ``desc``. The ``number_to_keep`` kwarg takes an integer for the number of terms to show, the rest are grouped together in a single bar called rest. You can adjust the color of the bars with the ``color`` kwarg which either takes a string or a list of strings for the colors to use for the bars for each execution. You can adjust whether labels are printed above the bars or not with the ``bar_labels`` kwarg. The last option available is the ``figsize`` kwarg which takes a tuple of the size in inches to make the output figure."
msgstr "` ` plot_histogram () ` ` имеет несколько опций для настройки выходного графика. Первый вариант-это \"легенда\" \"kwarg\". Используется для предоставления метки для выполнений. Он принимает список строк, используемых для подписи результатов каждого выполнения. Это в основном полезно при планировании нескольких результатов выполнения в одной гистограмме. Для регулировки порядка отображения столбцов в гистограмме используется ` ` сорт ` ` kwarg. Его можно задать либо в порядке возрастания, либо в порядке убывания, либо в порядке убывания ` ` desc ` `. ` ` number_to_keept ` ` kwarg принимает целое число для числа терминов, которые нужно показать, остальные группируются в одном столбике под названием rest. Вы можете настроить цвет решетки с помощью ` ` color ` ` kwarg, который либо принимает строку, либо список строк для цветов, которые будут использоваться для столбцов для каждого выполнения. Можно настроить, печатаются ли метки над решетками, а не с ` ` bar_labels ` ` kwarg. Последним вариантом может быть ` ` figsize ` ` kwarg, который принимает кортеж размером в дюймах, чтобы сделать выходную фигуру."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:176
msgid "Using the output from plot_histogram()"
msgstr "Использование вывода plot_histogram()"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:178
msgid "When using the ``plot_histogram()`` function, it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object from ``plot_histogram()`` to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png``. The ``savefig()`` method takes a path so you can adjust the location and filename where you're saving the output."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:191
msgid "Plot State"
msgstr "Отображение состояния"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:202
msgid "In many situations you want to see the state of a quantum computer. This could be for debugging. Here we assume you have this state (either from simulation or state tomography) and the goal is to visualize the quantum state. This requires exponential resources, so we advise to only view the state of small quantum systems. There are several functions for generating different types of visualization of a quantum state"
msgstr "Во многих случаях вы захотите увидеть состояние квантового компьютера. Например, для отладки. Предположим, что это состояние уже есть (полученное путем симуляции или томографии) и теперь нужно его визуализировать. Требования к ресурсам при этом растут экспоненциально, поэтому рекомендуется просматривать состояния только малых квантовых систем. Существует несколько функций для различных типов визуализации квантового состояния"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:212
msgid "A quantum state is either a density matrix :math:`\\rho` (Hermitian matrix) or statevector :math:`|\\psi\\rangle` (complex vector). The density matrix is related to the statevector by"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:214
msgid "\\rho = |\\psi\\rangle\\langle \\psi|,\n\n"
msgstr "\\rho = |\\psi\\rangle\\langle \\psi|,\n\n"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:216
msgid "and is more general as it can represent mixed states (positive sum of statevectors)"
msgstr "и носит более общий характер, поскольку может представлять смешанные состояния (представимые иначе в виде положительной сумма векторов состояния)"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:218
msgid "\\rho = \\sum_k p_k |\\psi_k\\rangle\\langle \\psi_k |.\n\n"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:220
msgid "The visualizations generated by the functions are:"
msgstr "К визуализациям, создаваемым функциями, относятся:"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:222
msgid "``'plot_state_city'``: The standard view for quantum states where the real and imaginary (imag) parts of the density matrix are plotted like a city."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:224
msgid "``'plot_state_qsphere'``: The Qiskit unique view of a quantum state where the amplitude and phase of the state vector are plotted in a spherical ball. The amplitude is the thickness of the arrow and the phase is the color. For mixed states it will show different ``'qsphere'`` for each component."
msgstr "``'plot_state_qsphere'``: Уникальное представление квантового состояния в Qiskit, при котором амплитуда и фаза вектора состояния наносятся на сферу. Амплитуду показывает толщина стрелки, а фазу — ее цвет. У смешанного состоянии отобразятся ``'qsphere'`` для каждого компонента."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:226
msgid "``'plot_state_paulivec'``: The representation of the density matrix using Pauli operators as the basis :math:`\\rho=\\sum_{q=0}^{d^2-1}p_jP_j/d`."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:228
msgid "``'plot_state_hinton'``: Same as ``'city'`` but where the size of the element represents the value of the matrix element."
msgstr "``'plot_state_hinton'``: То же, что и ``'city'``, но размер элемента отражает значение элемента матрицы."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:230
msgid "``'plot_bloch_multivector'``: The projection of the quantum state onto the single qubit space and plotting on a bloch sphere."
msgstr "``'plot_bloch_multivector'``: Проекция квантового состояния на однокубитное пространство и отображение полученной сферы Блоха."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:361
msgid "Here we see that there is no information about the quantum state in the single qubit space as all vectors are zero."
msgstr "Здесь информация о квантовом состоянии в однокубитном пространстве отсутствует, так как все векторы равны нулю."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:373
msgid "Options when using state plotting functions"
msgstr "Опции при отображении состояни]"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:375
msgid "The various functions for plotting quantum states provide a number of options to adjust how the plots are rendered. Which options are available depends on the function being used."
msgstr "Различные функции для построения квантовых состояний предоставляют ряд опций для настройки способа отображения графиков. Доступные опции зависят от используемой функции."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:386
msgid "**plot_state_city()** options"
msgstr "Опции **plot_state_city()**"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:388
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:422
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:455
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:502
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:596
msgid "**title** (str): a string that represents the plot title"
msgstr "**title** (str): строка, представляющая заголовок графика"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:389
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:423
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:456
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:489
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:503
msgid "**figsize** (tuple): figure size in inches (width, height)."
msgstr "**figsize** (tuple): размер в дюймах (ширина, высота)."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:390
msgid "**color** (list): a list of len=2 giving colors for real and imaginary components of matrix elements."
msgstr "**color** (list): список из двух элементов, дающий цвета для реальных и мнимых компонентов матричных элементов."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:420
msgid "**plot_state_hinton()** options"
msgstr "Опции **plot_state_hinton()**"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:453
msgid "**plot_state_paulivec()** options"
msgstr "Опции **plot_state_paulivec()**"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:457
msgid "**color** (list or str): color of the expectation value bars."
msgstr "**color** (list или str): цвет столбцов математических ожиданий."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:487
msgid "**plot_state_qsphere()** options"
msgstr "Опции **plot_state_qsphere()**"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:500
msgid "**plot_bloch_multivector()** options"
msgstr "Опции **plot_bloch_multivector()**"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:534
msgid "Using the output from state plotting functions"
msgstr "Использование выходных данных отображения состояния"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:536
msgid "When using any of the state plotting functions it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png`` in the current working directory. The ``savefig()`` method takes a path so you can adjust the location and filename where you're saving the output."
msgstr "Все функции, отображающие состояние, возвращают ``matplotlib.Figure`` для дальнейшей визуализации. Блокноты Jupyter распознают данный тип и выводят изображение, но при работе вне Jupyter этого не происходит автоматически. Однако, класс ``matplotlib.Figure`` имеет встроенные методы отображения и сохранения визуализации. Применение ``.show()`` к полученному объекту открывает изображение в новом окне (если сконфигурированный бэкенд matplotlib бэкэнд интерактивен). Для его сохранения под названием ``out.png`` в текущем рабочем каталоге следует использовать ``.savefig('out.png')``. В ``savefig()`` можно задать как имя, так и путь к файлу."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:549
msgid "Plot Bloch Vector"
msgstr "Отображение вектора Блоха"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:551
msgid "A standard way of plotting a quantum system is using the Bloch vector. This only works for a single qubit and takes as input the Bloch vector."
msgstr "Нагляднее всего изобразить состояние квантовой системы с помощью вектора Блоха. Однако это работает только для одного кубита и принимает в качестве входных данных вектор Блоха."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:553
msgid "The Bloch vector is defined as :math:`[x = \\mathrm{Tr}[X \\rho], y = \\mathrm{Tr}[Y \\rho], z = \\mathrm{Tr}[Z \\rho]]`, where :math:`X`, :math:`Y`, and :math:`Z` are the Pauli operators for a single qubit and :math:`\\rho` is the density matrix."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:594
msgid "Options for plot_bloch_vector()"
msgstr "Опции для plot_bloch_vector()"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:597
msgid "**figsize** (tuple): Figure size in inches (width, height)."
msgstr "**figsize** (tuple): размер в дюймах (ширина, высота)."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:628
msgid "Adjusting the output from plot_bloch_vector()"
msgstr "Настройка вывода функции plot_bloch_vector()"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:630
msgid "When using the ``plot_bloch_vector`` function it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png`` in the current working directory. The ``savefig()`` method takes a path so you can adjust the location and filename where you're saving the output."
msgstr "Функция ``plot_bloch_vector`` возвращает ``matplotlib.Figure`` для дальнейшей визуализации. Блокноты Jupyter распознают данный тип и выводят изображение, но при работе вне Jupyter этого не происходит автоматически. Однако, класс ``matplotlib.Figure`` имеет встроенные методы отображения и сохранения визуализации. Применение ``.show()`` к полученному объекту открывает изображение в новом окне (если сконфигурированный бэкенд matplotlib бэкэнд интерактивен). Для его сохранения под названием ``out.png`` в текущем рабочем каталоге следует использовать ``.savefig('out.png')``. В ``savefig()`` можно задать как имя, так и путь к файлу."

