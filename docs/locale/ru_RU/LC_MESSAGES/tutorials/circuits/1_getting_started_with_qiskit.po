msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-17 13:53+0000\n"
"PO-Revision-Date: 2022-06-17 14:46\n"
"Last-Translator: \n"
"Language-Team: Russian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits/1_getting_started_with_qiskit.po\n"
"X-Crowdin-File-ID: 9114\n"
"Language: ru_RU\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:10
msgid "This page was generated from `tutorials/circuits/1_getting_started_with_qiskit.ipynb`__."
msgstr "Страница создана на основе `tutorials/circuits/1_getting_started_with_qiskit.ipynb`__."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:9
msgid "Getting Started with Qiskit"
msgstr "Начало работы с Qiskit"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:11
msgid "Here, we provide an overview of working with Qiskit. The fundamental package of Qiskit is Terra that provides the basic building blocks necessary to program quantum computers. The fundamental unit of Qiskit is the `quantum circuit <https://en.wikipedia.org/wiki/Quantum_circuit>`__. A basic workflow using Qiskit consists of two stages: **Build** and **Execute**. **Build** allows you to make different quantum circuits that represent the problem you are solving, and **Execute** that allows you to run them on different backends. After the jobs have been run, the data is collected and postprocessed depending on the desired output."
msgstr "Здесь мы представляем обзор работы с Qiskit. Основной пакет Qiskit Terra предоставляет основные блоки, необходимые для программирования квантовых компьютеров. Фундаментальная единица Qiskit — это цепь `(quantum circuit) <https://en.wikipedia.org/wiki/Quantum_circuit>`__. Базовый процесс работы с Qiskit состоит из двух этапов: **Создание (Build)** и **Запуск (Execute)**. **Build** позволяет создавать различные квантовые схемы, представляющие решаемую проблему, и **Execute**, запускающий их в разных окружениях. После выполнения задач, с окружения собираются данные и обрабатываются в зависимости от желаемого результата."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:36
msgid "Circuit Basics"
msgstr "Основы цепей"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:39
msgid "Building the circuit"
msgstr "Построение цепей"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:41
msgid "The basic element needed for your first program is the QuantumCircuit. We begin by creating a ``QuantumCircuit`` comprised of three qubits."
msgstr "Основным элементом, необходимым для первой программы, является QuantumCircuit. Начнем с создания ``QuantumCircuit``, состоящего из трех кубитов."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:63
msgid "After you create the circuit with its registers, you can add gates (“operations”) to manipulate the registers. As you proceed through the tutorials you will find more gates and circuits; below is an example of a quantum circuit that makes a three-qubit GHZ state"
msgstr "После создания цепи с регистрами, можно добавлять гейты (\"операции\") для работы с регистрами. По мере прохождения учебных материалов Вы найдете больше гейтов и цепей; Ниже приведен пример квантовой цепи, которая создает состояние GHZ для трех кубитов"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:65
msgid "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}.\n\n"
msgstr "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}.\n\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:67
msgid "To create such a state, we start with a three-qubit quantum register. By default, each qubit in the register is initialized to :math:`|0\\rangle`. To make the GHZ state, we apply the following gates: - A Hadamard gate :math:`H` on qubit 0, which puts it into the superposition state :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}`. - A controlled-Not operation (:math:`C_{X}`) between qubit 0 and qubit 1. - A controlled-Not operation between qubit 0 and qubit 2."
msgstr "Чтобы создать такое состояние, необходим квантовый регистр с тремя кубитами. По умолчанию каждый кубит инициализируется в состоянии :math:`|0\\rangle`. Чтобы создать состояние GHZ, мы применяем следующее: \n"
"- Гейт Адамара :math:`H` на кубит с индексом 0, которая помещает его в состояние суперпозиции :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}`. \n"
"- Гейт CNOT (контролируемое логическое \"НЕ\") (:math:`C_{X}`) между кубитами с адресами 0 и 1. \n"
"- Гейт CNOT между кубитами 0 и 2."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:69
msgid "On an ideal quantum computer, the state produced by running this circuit would be the GHZ state above."
msgstr "На идеальном квантовом компьютере состояние, производимое при запуске этой цепи, было бы состояние GHZ описанное формулой выше."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:71
msgid "In Qiskit, operations can be added to the circuit one by one, as shown below."
msgstr "В Qiskit операции можно добавить к цепи один за другим, как показано ниже."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:125
msgid "Visualize Circuit"
msgstr "Визуализация цепи"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:127
msgid "You can visualize your circuit using Qiskit ``QuantumCircuit.draw()``, which plots the circuit in the form found in many textbooks."
msgstr "Вы можете визуализировать свою схему с помощью метода Qiskit ``QuantumCircuit.draw()``, который выводит схему в форме, которую можно найти во многих пособиях."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:157
msgid "In this circuit, the qubits are put in order, with qubit zero at the top and qubit two at the bottom. The circuit is read left to right (meaning that gates that are applied earlier in the circuit show up further to the left)."
msgstr "В данной схеме кубиты нумеруются сверху вниз, начиная с нулевого. Цепь читается слева направо, то есть гейты, которые применяются раньше других, расположены левее."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:172
msgid "When representing the state of a multi-qubit system, the tensor order used in Qiskit is different than that used in most physics textbooks. Suppose there are :math:`n` qubits, and qubit :math:`j` is labeled as :math:`Q_{j}`. Qiskit uses an ordering in which the :math:`n^{\\mathrm{th}}` qubit is on the left side of the tensor product, so that the basis vectors are labeled as :math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0`."
msgstr "При представлении состояния многокубитной системы, порядок, используемый в Qiskit, отличается от того, что используется в большинстве пособий по физике. Предположим, что имеется :math:`n` кубитов, и кубит :math:`j` отмечен как :math:`Q_{j}`. Qiskit использует порядок, в котором кубит :math:`n^{\\mathrm{th}}` находится в левой части тензорного произведения так, что базисные векторы отмечены как :math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0`."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:174
msgid "For example, if qubit zero is in state 0, qubit 1 is in state 0, and qubit 2 is in state 1, Qiskit would represent this state as :math:`|100\\rangle`, whereas many physics textbooks would represent it as :math:`|001\\rangle`."
msgstr "Например, если нулевой кубит находится в состоянии 0, 1-й кубит также находится в состоянии 0, а кубит 2 находится в состоянии 1, Qiskit представит это состояние как :math:`|100\\rangle`, в то время как многие книги по физике будут представлять его как :math:`|001\\rangle`."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:176
msgid "This difference in labeling affects the way multi-qubit operations are represented as matrices. For example, Qiskit represents a controlled-X (:math:`C_{X}`) operation with qubit 0 being the control and qubit 1 being the target as"
msgstr "Это различие в обозначении влияет на то, как многокубитные операции представляются с помощью матриц. Например, Qiskit представляет управляемую операцию X (:math:`C_{X}`) с нулевым контролирующим кубитом и 1-м целевым как"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:178
msgid "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}.\n\n"
msgstr "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}.\n\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:194
msgid "Simulating circuits using Qiskit Aer"
msgstr "Симуляция цепей с использованием Qiskit Aer"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:196
msgid "Qiskit Aer is our package for simulating quantum circuits. It provides many different backends for doing a simulation. There is also a basic, Python only, implementation called ``BasicAer`` in Terra that can be used as a drop-in replacement for ``Aer`` in the examples below."
msgstr "Qiskit Aer - наш пакет для симуляции квантовых цепей. Он предоставляет несколько различных окружений для выполнения симуляций. Существует также базовый пакет, написанный полностью на Python, пакет ``BasicAer`` в пакете Terra, который может быть использован в качестве замены пакета ``Aer`` в примерах ниже."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:199
msgid "Statevector backend"
msgstr "Окружение векторного состояния"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:201
msgid "The most common backend in Qiskit Aer is the ``statevector_simulator``. This simulator returns the quantum state, which is a complex vector of dimensions :math:`2^n`, where :math:`n` is the number of qubits (so be careful using this as it will quickly get too large to run on your machine)."
msgstr "``Симулятор векторного состояния (statevector_simulator)`` - самый распространенный тип окружения в Qiskit Aer. Данный симулятор возвращает квантовое состояние, являющееся комплексным вектором с количеством измерений :math:`2^n`, где :math:`n` — это количество кубитов (будьте осторожны, так как схема может легко стать слишком сложной для запуска на Вашем компьютере)."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:212
msgid "To run the above circuit using the statevector simulator, first you need to import Aer and then set the backend to ``statevector_simulator``."
msgstr "Чтобы запустить вышеописанную схему с помощью симулятора векторного состояния, сначала необходимо импортировать пакет Aer, а затем установить ``statevector_simulator`` в качестве используемого окружения."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:237
msgid "Now that we have chosen the backend, it’s time to compile and run the quantum circuit. In Qiskit we provide the ``execute`` function for this. ``execute`` returns a ``job`` object that encapsulates information about the job submitted to the backend."
msgstr "Теперь, когда мы выбрали окружение, пришло время скомпилировать и запустить квантовую цепь. Qiskit предоставляет для этого функцию ``execute``. ``execute`` возвращает объект ``job``, который включает в себя информацию о задаче, отправленной на выполнение в окружение."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:243
msgid "Tip: You can obtain the above parameters in Jupyter. Simply place the text cursor on a function and press Shift+Tab."
msgstr "Совет: Вы можете получить информацию о перечисленных выше параметрах в Jupyter. Поместите курсор на функцию и нажмите Shift+Tab."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:269
msgid "When you run a program, a job object is made that has the following two useful methods: ``job.status()`` and ``job.result()``, which return the status of the job and a result object, respectively."
msgstr "При запуске программы создается объект задачи (job) с двумя полезными методами: ``job.status()`` и ``job.result()``, которые возвращают текущий статус выполнения задачи и объект с результатом ее выполнения соответственно."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:275
msgid "Note: Jobs run asynchronously, but when the result method is called, it switches to synchronous and waits for it to finish before moving on to another task."
msgstr "Примечание: Задачи выполняются асинхронно, но в момент вызова метода получения результата, выполнение переходит в синхронный режим и ожидает его завершения, прежде чем перейти к выполнению следующих инструкций."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:300
msgid "The results object contains the data and Qiskit provides the method ``result.get_statevector(circ)`` to return the state vector for the quantum circuit."
msgstr "Для получения векторного состояния квантовой цепи из объекта с результатом выполнения задачи, Qiskit предоставляет метод ``result.get_statevector(circ)``."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:349
msgid "Qiskit also provides a visualization toolbox to allow you to view these results."
msgstr "Также Qiskit предоставляет пакет визуализации, позволяющий просматривать эти результаты."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:351
msgid "Below, we use the visualization function to plot the real and imaginary components of the state density matrix :math:`\\rho`."
msgstr "Ниже мы используем функцию визуализации, позволяющую графически выразить реальные и мнимые компоненты матрицы :math:`\\rho`."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:383
msgid "Unitary backend"
msgstr "Унитарное окружение"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:394
msgid "Qiskit Aer also includes a ``unitary_simulator`` that works *provided all the elements in the circuit are unitary operations*. This backend calculates the :math:`2^n \\times 2^n` matrix representing the gates in the quantum circuit."
msgstr "Qiskit Aer также включает в себя ``унитарный симулятор (unitary_simulator)``, который работает *при условии, что все элементы в цепи являются унитарными операциями*. Это окружение вычисляет матрицу :math:`2^n \\times 2^n` представляющую вентили в квантовой схеме."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:491
msgid "OpenQASM backend"
msgstr "Окружение OpenQASM"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:502
msgid "The simulators above are useful because they provide information about the state output by the ideal circuit and the matrix representation of the circuit. However, a real experiment terminates by *measuring* each qubit (usually in the computational :math:`|0\\rangle, |1\\rangle` basis). Without measurement, we cannot gain information about the state. Measurements cause the quantum system to collapse into classical bits."
msgstr "Приведенные выше симуляторы полезны, поскольку они предоставляют информацию о результирующем состоянии с помощью идеальной цепи и ее матричного представления. Однако, реальный эксперимент заканчивается *измерением* каждого кубита (обычно в вычислительном базисе :math:`|0\\rangle, |1\\rangle`). Без измерения мы не можем получить информацию о состоянии. Измерения заставляют квантовую систему схлопываться в классические биты."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:504
msgid "For example, suppose we make independent measurements on each qubit of the three-qubit GHZ state"
msgstr "Например, предположим, что мы производим независимые друг от друга измерения каждого кубита состояния GHZ из трех кубитов"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:506
msgid "|\\psi\\rangle = (|000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"
msgstr "|\\psi\\rangle = (|000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:508
msgid "and let :math:`xyz` denote the bitstring that results. Recall that, under the qubit labeling used by Qiskit, :math:`x` would correspond to the outcome on qubit 2, :math:`y` to the outcome on qubit 1, and :math:`z` to the outcome on qubit 0."
msgstr "и пусть :math:`xyz` - результирующая строка из нулей и единиц. Напомним, что в системе упорядочивания, используемой Qiskit, :math:`x` будет соответствовать результату на втором кубите, :math:`y` - результату на 1-м кубите, и :math:`z` - на нулевом."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:514
msgid "Note: This representation of the bitstring puts the most significant bit (MSB) on the left, and the least significant bit (LSB) on the right. This is the standard ordering of binary bitstrings. We order the qubits in the same way (qubit representing the MSB has index 0), which is why Qiskit uses a non-standard tensor product order."
msgstr "Примечание: Такое представление битовой строки делает наиболее значительный бит (MSB - most significant bit) слева, а наименее значительный бит (LSB - least significant bit) - справа. Это стандартный порядок бинарных битовых строк. Мы упорядочиваем кубиты аналогичным образом (кубит, представляющий MSB, имеет индекс 0), поэтому Qiskit использует нестандартный порядок тензорного произведения."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:520
msgid "Recall the probability of obtaining outcome :math:`xyz` is given by"
msgstr "Вероятность получения одного конкретного результата :math:`xyz` равна"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:522
msgid "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"
msgstr "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:524
msgid "and as such for the GHZ state probability of obtaining 000 or 111 are both 1/2."
msgstr "в этом случае вероятности получения 000 или 111 в состоянии GHZ равны 1/2."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:526
msgid "To simulate a circuit that includes measurement, we need to add measurements to the original circuit above, and use a different Aer backend."
msgstr "Для симуляции цепи, включающей измерения, необходимо добавить измерения в оригинальную схему, представленную выше, и использовать другое окружение Aer."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:629
msgid "This circuit adds a classical register, and three measurements that are used to map the outcome of qubits to the classical bits."
msgstr "Эта схема добавляет классические регистры и три измерения, которые используются для сопоставления результатов кубитов с классическими битами."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:631
msgid "To simulate this circuit, we use the ``qasm_simulator`` in Qiskit Aer. Each run of this circuit will yield either the bitstring 000 or 111. To build up statistics about the distribution of the bitstrings (to, e.g., estimate :math:`\\mathrm{Pr}(000)`), we need to repeat the circuit many times. The number of times the circuit is repeated can be specified in the ``execute`` function, via the ``shots`` keyword."
msgstr "Чтобы симулировать эту цепь, мы используем ``qasm_simulator`` из Qiskit Aer. Каждый запуск даст либо строку 000, либо 111. Чтобы собрать статистику о распределении битовых строк (т.e. оценить :math:`\\mathrm{Pr}(000)`), нам нужно повторить запуск схемы множество раз. Количество повторений запусков может быть указано в функции ``execute``, при помощи именованного параметра ``shots``."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:661
msgid "Once you have a result object, you can access the counts via the function ``get_counts(circuit)``. This gives you the *aggregated* binary outcomes of the circuit you submitted."
msgstr "После получения результата, метод ``get_counts(circuit)`` может дать доступ к данным счетчика. Он формирует *совокупные* бинарные результаты запускаемой цепи."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:707
msgid "Approximately 50 percent of the time, the output bitstring is 000. Qiskit also provides a function ``plot_histogram``, which allows you to view the outcomes."
msgstr "Приблизительно в 50% случаев, результирующая бинарная строка - 000. Qiskit также предоставляет функцию ``plot_histogram``, которая позволяет просматривать результаты в виде гистограммы."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:738
msgid "The estimated outcome probabilities :math:`\\mathrm{Pr}(000)` and :math:`\\mathrm{Pr}(111)` are computed by taking the aggregate counts and dividing by the number of shots (times the circuit was repeated). Try changing the ``shots`` keyword in the ``execute`` function and see how the estimated probabilities change."
msgstr "Приблизительные вероятности исхода :math:`\\mathrm{Pr}(000)` и :math:`\\mathrm{Pr}(111)` вычисляются путем деления количества раз, когда был получен конкретный результат, на количество запусков (повторений). Попробуйте изменить параметр ``shots`` в функции ``execute`` и посмотрите, как изменяются вероятности."

