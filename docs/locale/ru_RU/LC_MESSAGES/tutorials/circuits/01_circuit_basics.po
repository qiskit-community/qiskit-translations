msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-13 18:47+0000\n"
"PO-Revision-Date: 2021-07-13 19:41\n"
"Last-Translator: \n"
"Language-Team: Russian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits/01_circuit_basics.po\n"
"X-Crowdin-File-ID: 9498\n"
"Language: ru_RU\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:10
msgid "This page was generated from `tutorials/circuits/01_circuit_basics.ipynb`__."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:9
msgid "Circuit Basics"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:11
msgid "Here, we provide an overview of working with Qiskit. Qiskit provides the basic building blocks necessary to program quantum computers. The fundamental unit of Qiskit is the `quantum circuit <https://en.wikipedia.org/wiki/Quantum_circuit>`__. A basic workflow using Qiskit consists of two stages: **Build** and **Run**. **Build** allows you to make different quantum circuits that represent the problem you are solving, and **Run** that allows you to run them on different backends. After the jobs have been run, the data is collected and postprocessed depending on the desired output."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:36
msgid "Building the circuit"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:38
msgid "The basic element needed for your first program is the QuantumCircuit. We begin by creating a ``QuantumCircuit`` comprised of three qubits."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:60
msgid "After you create the circuit with its registers, you can add gates (“operations”) to manipulate the registers. As you proceed through the tutorials you will find more gates and circuits; below is an example of a quantum circuit that makes a three-qubit GHZ state"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:62
msgid "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}.\n\n"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:64
msgid "To create such a state, we start with a three-qubit quantum register. By default, each qubit in the register is initialized to :math:`|0\\rangle`. To make the GHZ state, we apply the following gates: - A Hadamard gate :math:`H` on qubit 0, which puts it into the superposition state :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}`. - A controlled-Not operation (:math:`C_{X}`) between qubit 0 and qubit 1. - A controlled-Not operation between qubit 0 and qubit 2."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:66
msgid "On an ideal quantum computer, the state produced by running this circuit would be the GHZ state above."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:68
msgid "In Qiskit, operations can be added to the circuit one by one, as shown below."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:117
msgid "Visualize Circuit"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:119
msgid "You can visualize your circuit using Qiskit ``QuantumCircuit.draw()``, which plots the circuit in the form found in many textbooks."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:149
msgid "In this circuit, the qubits are put in order, with qubit zero at the top and qubit two at the bottom. The circuit is read left to right (meaning that gates that are applied earlier in the circuit show up further to the left)."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:164
msgid "When representing the state of a multi-qubit system, the tensor order used in Qiskit is different than that used in most physics textbooks. Suppose there are :math:`n` qubits, and qubit :math:`j` is labeled as :math:`Q_{j}`. Qiskit uses an ordering in which the :math:`n^{\\mathrm{th}}` qubit is on the left side of the tensor product, so that the basis vectors are labeled as :math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0`."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:166
msgid "For example, if qubit zero is in state 0, qubit 1 is in state 0, and qubit 2 is in state 1, Qiskit would represent this state as :math:`|100\\rangle`, whereas many physics textbooks would represent it as :math:`|001\\rangle`."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:168
msgid "This difference in labeling affects the way multi-qubit operations are represented as matrices. For example, Qiskit represents a controlled-X (:math:`C_{X}`) operation with qubit 0 being the control and qubit 1 being the target as"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:170
msgid "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}.\n\n"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:186
msgid "Simulating circuits"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:188
msgid "To simulate a circuit we use the quant_info module in Qiskit. This simulator returns the quantum state, which is a complex vector of dimensions :math:`2^n`, where :math:`n` is the number of qubits (so be careful using this as it will quickly get too large to run on your machine)."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:190
msgid "There are two stages to the simulator. The first is to set the input state and the second to evolve the state by the quantum circuit."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:220
#: ../../tutorials/circuits/01_circuit_basics.ipynb:250
msgid "$$\n\n"
"\\begin{bmatrix}\n"
"\\tfrac{1}{\\sqrt{2}} & 0 & 0 & 0 & 0 & 0 & 0 & \\tfrac{1}{\\sqrt{2}}  \\\\\n"
" \\end{bmatrix}\n"
"$$"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:267
msgid "Qiskit also provides a visualization toolbox to allow you to view the state."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:269
msgid "Below, we use the visualization function to plot the qsphere and a hinton representing the real and imaginary components of the state density matrix :math:`\\rho`."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:319
msgid "Unitary representation of a circuit"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:330
msgid "Qiskit’s quant_info module also has an operator method which can be used to make a unitary operator for the circuit. This calculates the :math:`2^n \\times 2^n` matrix representing the quantum circuit."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:423
msgid "OpenQASM backend"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:434
msgid "The simulators above are useful because they provide information about the state output by the ideal circuit and the matrix representation of the circuit. However, a real experiment terminates by *measuring* each qubit (usually in the computational :math:`|0\\rangle, |1\\rangle` basis). Without measurement, we cannot gain information about the state. Measurements cause the quantum system to collapse into classical bits."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:436
msgid "For example, suppose we make independent measurements on each qubit of the three-qubit GHZ state"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:438
msgid "|\\psi\\rangle = (|000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:440
msgid "and let :math:`xyz` denote the bitstring that results. Recall that, under the qubit labeling used by Qiskit, :math:`x` would correspond to the outcome on qubit 2, :math:`y` to the outcome on qubit 1, and :math:`z` to the outcome on qubit 0."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:446
msgid "Note: This representation of the bitstring puts the most significant bit (MSB) on the left, and the least significant bit (LSB) on the right. This is the standard ordering of binary bitstrings. We order the qubits in the same way (qubit representing the MSB has index 0), which is why Qiskit uses a non-standard tensor product order."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:452
msgid "Recall the probability of obtaining outcome :math:`xyz` is given by"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:454
msgid "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:456
msgid "and as such for the GHZ state probability of obtaining 000 or 111 are both 1/2."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:458
msgid "To simulate a circuit that includes measurement, we need to add measurements to the original circuit above, and use a different Aer backend."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:500
msgid "This circuit adds a classical register, and three measurements that are used to map the outcome of qubits to the classical bits."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:502
msgid "To simulate this circuit, we use the ``qasm_simulator`` in Qiskit Aer. Each run of this circuit will yield either the bitstring 000 or 111. To build up statistics about the distribution of the bitstrings (to, e.g., estimate :math:`\\mathrm{Pr}(000)`), we need to repeat the circuit many times. The number of times the circuit is repeated can be specified in the ``execute`` function, via the ``shots`` keyword."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:543
msgid "Once you have a result object, you can access the counts via the function ``get_counts(circuit)``. This gives you the *aggregated* binary outcomes of the circuit you submitted."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:584
msgid "Approximately 50 percent of the time, the output bitstring is 000. Qiskit also provides a function ``plot_histogram``, which allows you to view the outcomes."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:615
msgid "The estimated outcome probabilities :math:`\\mathrm{Pr}(000)` and :math:`\\mathrm{Pr}(111)` are computed by taking the aggregate counts and dividing by the number of shots (times the circuit was repeated). Try changing the ``shots`` keyword in the ``execute`` function and see how the estimated probabilities change."
msgstr ""

