msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-05 21:02+0000\n"
"PO-Revision-Date: 2022-01-05 22:36\n"
"Last-Translator: \n"
"Language-Team: Russian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/02_vqe_convergence.po\n"
"X-Crowdin-File-ID: 9446\n"
"Language: ru_RU\n"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:10
msgid "This page was generated from `tutorials/algorithms/02_vqe_convergence.ipynb`__."
msgstr "Страница создана на основе `tutorials/algorithms/01_algorithms_introduction.ipynb`__."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:9
msgid "Monitoring VQE convergence"
msgstr "Контроль сходимости VQE"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:11
msgid "Variational algorithms in Qiskit, like `VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html>`__ and `QAOA <https://qiskit.org/documentation/stubs/qiskit.algorithms.QAOA.html>`__, provide the option for a user to give a callback method that can be used to monitor optimization progress as the algorithm runs and converges to the minimum. The callback is invoked for each functional evaluation by the optimizer and provides the current optimizer value, evaluation count, current optimizer parameters etc. Note that, depending on the specific optimizer this may not be each iteration (step) of the optimizer, so for example if the optimizer is calling the cost function to compute a finite difference based gradient this will be visible via the callback."
msgstr "Вариационные алгоритмы в Qiskit, такие как `VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html>`__ и `QAOA <https://qiskit.org/documentation/stubs/qiskit.algorithms.QAOA.html>`__, предоставляют пользователю возможность задать функцию обратного вызова, которая может быть использована для отслеживания хода оптимизации по мере выполнения алгоритма и сходимости его к минимуму. Обратный вызов выполняется для каждой функциональной оценки алгоритмом оптимизации и предоставляет текущее значение функции оптимизации, количество оценок, текущие параметры оптимизации и т.д. Обратите внимание, что в зависимости от конкретного алгоритма оптимизации это может быть не каждая итерация (шаг) алгоритма, поэтому, например, если алгоритм вызывает функцию потерь для вычисления градиента на основе метода конечных разностей, это будет видно через обратный вызов."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:14
msgid "This notebook demonstrates using Qiskit’s VQE algorithm to plot graphs of the convergence path to ground state energy with a selected set of optimizers."
msgstr "Этот блокнот демонстрирует использование алгоритма VQE от Qiskit для построения графиков траектории сходимости к энергии основного состояния с выбранным набором оптимизирующих алгоритмов."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:43
msgid "First we create a qubit operator for VQE. Here we will use the same operator as used in the algorithms introduction, which was originally computed by Qiskit Nature for an H2 molecule."
msgstr "Сначала мы создадим оператор кубита для VQE. Здесь мы будем использовать тот же оператор, что и во введении к алгоритмам, который был первоначально вычислен с помощью Qiskit Nature для молекулы H2."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:68
msgid "We will show the callback usage below over a set of optimizers for comparison. The minimum energy of the H2 Hamiltonian can be found quite easily so we are able to set maxiters to a small value"
msgstr "Ниже мы покажем для сравнения использование обратного вызова для набора оптимизаторов. Минимальная энергия гамильтониана H2 может быть найдена довольно легко, поэтому мы можем установить maxiter на небольшое значение"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:132
msgid "Now from the callback data we stored we can plot the energy value at each objective function call each optimizer makes. An optimizer using a finite difference method for computing gradient has that characteristic step like plot where for a number of evaluations it is computing the value for close by points to establish a gradient (the close by points having very similar values whose difference cannot be seen on the scale of the graph here)."
msgstr "Теперь из сохраненных нами данных обратного вызова мы можем построить график значения энергии при каждом вызове целевой функции, который делает каждый оптимизатор (алгоритм оптимизации). Алгоритм оптимизации, использующий метод конечных разностей для вычисления градиента, имеет такой же характерный шаг, как и график, где для нескольких оценок он вычисляет значение для близких точек, чтобы установить градиент (близкие точки имеют очень похожие значения, разница которых не видна на масштабе графика)."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:167
msgid "Finally since the above problem is still easily tractable classically we can use NumPyMinimumEigensolver to compute a reference value for the solution. We can now plot the difference from the resultant exact solution as the energy converges with VQE towards the minimum value which should be that exact classical solution."
msgstr "В завершение, поскольку приведенная выше задача все еще легко решаема классически, мы можем использовать NumPyMinimumEigensolver для вычисления контрольного значения для найденного решения. Теперь мы можем построить график отличия от полученного точного решения, так как энергия сходится с VQE к минимальному значению, которое должно быть точным классическим решением."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:240
msgid "Using Gradient framework"
msgstr "Использование градиентного метода"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:242
msgid "Qiskit now has a Gradient framework as part of the Opflow capability. With the gradient computed for the optimizer we now see just the optimization steps themselves."
msgstr "Qiskit теперь имеет градиентную схему как часть возможности Opflow. Вычислив градиент для оптимизатора, мы теперь видим только сами шаги оптимизации."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:327
msgid "Monitoring via the logging"
msgstr "Наблюдение с помощью протоколирования"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:329
msgid "Much of the code is instrumented with `Python logging <https://docs.python.org/3/library/logging.html>`__ statements. The logging is configurable to adjust level of logging etc. Here we set the logging level to ``INFO``"
msgstr "Большая часть кода оснащена отчётами `Python logging <https://docs.python.org/3/library/logging.html>`__. Запись в журнал настраивается для настройки уровня протоколирования и т.д. Здесь мы установили уровень ведения отчета ``INFO``"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:352
msgid "and at INFO level logging VQE will include information on the evaluations, as below."
msgstr "и на уровне INFO ведение журнала VQE будет включать в себя информацию об оценках, как показано ниже."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:354
msgid "INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.07392554] - 116.41884 (ms), eval count: 1 INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.43698938] - 4.05884 (ms), eval count: 2 INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.74596698] - 7.40194 (ms), eval count: 3 INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.75399268] - 6.61016 (ms), eval count: 4"
msgstr "INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.07392554] - 116.41884 (ms), eval count: 1 INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.43698938] - 4.05884 (ms), eval count: 2 INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.74596698] - 7.40194 (ms), eval count: 3 INFO:qiskit.algorithms.minimum_eigen_solvers.vqe:Energy evaluation returned [-1.75399268] - 6.61016 (ms), eval count: 4"

