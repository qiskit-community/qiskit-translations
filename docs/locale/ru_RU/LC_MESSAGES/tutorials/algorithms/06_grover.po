msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-02 21:04+0000\n"
"PO-Revision-Date: 2023-03-02 21:49\n"
"Last-Translator: \n"
"Language: ru\n"
"Language-Team: Russian\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/06_grover.po\n"
"X-Crowdin-File-ID: 9504\n"

#: ../../tutorials/algorithms/06_grover.ipynb:10
msgid "This page was generated from `tutorials/algorithms/06_grover.ipynb`__."
msgstr "Эта страница была создана на основе `tutorials/algorithms/06_grover.ipynb`__."

#: ../../tutorials/algorithms/06_grover.ipynb:9
msgid "Grover’s Algorithm and Amplitude Amplification"
msgstr "Алгоритм Гровера и Усиление Амплитуды"

#: ../../tutorials/algorithms/06_grover.ipynb:11
msgid "Grover’s algorithm is one of the most famous quantum algorithms introduced by Lov Grover in 1996 [1]. It has initially been proposed for unstructured search problems, i.e. for finding a marked element in a unstructured database. However, Grover’s algorithm is now a subroutine to several other algorithms, such as Grover Adaptive Search [2]. For the details of Grover’s algorithm, please see `Grover’s Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ in the Qiskit textbook."
msgstr "Алгоритм Гровера — один из самых известных квантовых алгоритмов, впервые предложенный Ловом Гровером в 1996 году [1]. Изначально он был предложен для решения задач неструктурированного поиска, то есть для нахождения помеченного элемента в неструктурированной базе данных. Однако в настоящее время алгоритм Гровера является подпрограммой нескольких других алгоритмов, таких как адаптивный поиск Гровера [2]. Подробности алгоритма Гровера смотрите в разделе `Алгоритм Гровера <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ в учебнике по Qiskit."

#: ../../tutorials/algorithms/06_grover.ipynb:13
msgid "Qiskit implements Grover’s algorithm in the ``Grover`` class. This class also includes the generalized version, Amplitude Amplification [3], and allows setting individual iterations and other meta-settings to Grover’s algorithm."
msgstr "Qiskit реализует алгоритм Гровера в классе ``Grover``. Этот класс также включает в себя обобщенную версию, Усиление Амплитуды [3], и позволяет задавать индивидуальные итерации и другие мета-настройки алгоритму Гровера."

#: ../../tutorials/algorithms/06_grover.ipynb:15
#: ../../tutorials/algorithms/06_grover.ipynb:764
msgid "**References:**"
msgstr "**Ссылки:**"

#: ../../tutorials/algorithms/06_grover.ipynb:17
msgid "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"
msgstr "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"

#: ../../tutorials/algorithms/06_grover.ipynb:19
msgid "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"
msgstr "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"

#: ../../tutorials/algorithms/06_grover.ipynb:21
msgid "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"
msgstr "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"

#: ../../tutorials/algorithms/06_grover.ipynb:33
msgid "Grover’s algorithm"
msgstr "Алгоритм Гровера"

#: ../../tutorials/algorithms/06_grover.ipynb:35
msgid "Grover’s algorithm uses the Grover operator :math:`\\mathcal{Q}` to amplify the amplitudes of the good states:"
msgstr "Алгоритм Гровера использует оператор :math:`\\mathcal{Q}` для усиления амплитуды \"хороших\" состояний:"

#: ../../tutorials/algorithms/06_grover.ipynb:37
msgid "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"
msgstr "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^ \\dagger \\mathcal{S_f}"

#: ../../tutorials/algorithms/06_grover.ipynb:42
msgid "Here, \\* :math:`\\mathcal{A}` is the initial search state for the algorithm, which is just Hadamards, :math:`H^{\\otimes n}` for the textbook Grover search, but can be more elaborate for Amplitude Amplification \\* :math:`\\mathcal{S_0}` is the reflection about the all 0 state"
msgstr "Здесь \\* :math:`\\mathcal{A}` — это начальное состояние для поиска в алгоритме, которое просто создается применением оператора Адамара :math:`H^{\\otimes n}` ко всем кубитам (учебный пример для поиска Гровера), но также может быть задано более подробно для Усиления Амплитуды \\* :math:`\\mathcal{S_0}` — это отображение для всех нулевых состояний"

#: ../../tutorials/algorithms/06_grover.ipynb:44
msgid "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"
msgstr "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"

#: ../../tutorials/algorithms/06_grover.ipynb:49
msgid "\\* :math:`\\mathcal{S_f}` is the oracle that applies"
msgstr "\\* :math:`\\mathcal{S_f}` это оракул, который реализует"

#: ../../tutorials/algorithms/06_grover.ipynb:51
msgid "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"
msgstr "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"

#: ../../tutorials/algorithms/06_grover.ipynb:56
msgid "where :math:`f(x)` is 1 if :math:`x` is a good state and otherwise 0."
msgstr "где :math:`f(x)` равно 1, если :math:`x` - хорошее состояние, и 0 в противном случае."

#: ../../tutorials/algorithms/06_grover.ipynb:58
msgid "In a nutshell, Grover’s algorithm applies different powers of :math:`\\mathcal{Q}` and after each execution checks whether a good solution has been found."
msgstr "Проще говоря, алгоритм Гровера применяет различные степени :math:`\\mathcal{Q}` и после каждого выполнения проверяет, было ли найдено правильное решение."

#: ../../tutorials/algorithms/06_grover.ipynb:61
msgid "Running Grover’s algorithm"
msgstr "Выполнение алгоритма Гровера"

#: ../../tutorials/algorithms/06_grover.ipynb:63
msgid "To run Grover’s algorithm with the ``Grover`` class, firstly, we need to specify an oracle for the circuit of Grover’s algorithm. In the following example, we use ``QuantumCircuit`` as the oracle of Grover’s algorithm. However, there are several other class that we can use as the oracle of Grover’s algorithm. We talk about them later in this tutorial."
msgstr "Чтобы запустить алгоритм Гровера с помощью класса ``Grover``, сначала нужно указать оракул для квантовой цепи алгоритма Гровера. В приведенном ниже примере в качестве оракула алгоритма Гровера мы используем ``QuantumCircuit``. Однако есть еще целый ряд других классов, которые мы можем использовать в качестве оракула алгоритма Гровера. Мы поговорим о них чуть позже в этом руководстве."

#: ../../tutorials/algorithms/06_grover.ipynb:65
msgid "Note that the oracle for ``Grover`` must be a *phase-flip* oracle. That is, it multiplies the amplitudes of the of “good states” by a factor of :math:`-1`. We explain later how to convert a *bit-flip* oracle to a phase-flip oracle."
msgstr "Обратите внимание, что оракул для ``Grover`` должен быть оракулом *фазового переворота*. То есть, он должен умножать амплитуды \"хороших состояний\" на коэффициент :math:`-1`. Позже мы объясним, как преобразовать оракул с *переключением бита* в оракул с переключением фаз."

#: ../../tutorials/algorithms/06_grover.ipynb:111
msgid "Then, we specify a backend and call the ``run`` method of ``Grover`` with a backend to execute the circuits. The returned result type is a ``GroverResult``."
msgstr "Затем мы указываем бэкенд и вызываем метод ``run`` класса ``Grover`` с бэкендом для выполнения схем. Тип возвращаемого результата - ``GroverResult``."

#: ../../tutorials/algorithms/06_grover.ipynb:113
msgid "If the search was successful, the ``oracle_evaluation`` attribute of the result will be ``True``. In this case, the most sampled measurement, ``top_measurement``, is one of the “good states”. Otherwise, ``oracle_evaluation`` will be False."
msgstr "Если поиск был успешным, значение параметра ``oracle_evaluation`` результата будет равно ``True``. В этом случае самое отобранное измерение, ``top_measurement``, является одним из \"хороших состояний\". В противном случае ``oracle_evaluation`` будет False."

#: ../../tutorials/algorithms/06_grover.ipynb:176
msgid "In the example, the result of ``top_measurement`` is ``11`` which is one of “good state”. Thus, we succeeded to find the answer by using ``Grover``."
msgstr "В приведенном примере результат ``top_measurement`` равен ``11``, что является одним из \"хороших состояний\". Таким образом, нам удалось найти ответ с помощью ``Grover``."

#: ../../tutorials/algorithms/06_grover.ipynb:188
msgid "Using the different types of classes as the oracle of ``Grover``"
msgstr "Использование различных типов классов в качестве оракула ``Grover``"

#: ../../tutorials/algorithms/06_grover.ipynb:190
msgid "In the above example, we used ``QuantumCircuit`` as the oracle of ``Grover``. However, we can also use ``qiskit.quantum_info.Statevector`` as oracle. All the following examples are when :math:`|11\\rangle` is “good state”"
msgstr "В приведенном выше примере мы использовали ``QuantumCircuit`` в качестве оракула ``Grover``. Однако, в качестве оракула мы также можем использовать ``qiskit.quantum_info.Statevector``. Во всех следующих примерах :math:`|11\\rangle` является \"хорошим состоянием\""

#: ../../tutorials/algorithms/06_grover.ipynb:253
msgid "Internally, the statevector is mapped to a quantum circuit:"
msgstr "При этом, внутри алгоритма вектор состояний отображается на квантовую схему:"

#: ../../tutorials/algorithms/06_grover.ipynb:283
msgid "Qiskit allows for an easy construction of more complex oracles: \\* ``PhaseOracle``: for parsing logical expressions such as ``'~a | b'``. This is especially useful for solving 3-SAT problems and is shown in the accompanying `Grover Examples <07_grover_examples.ipynb>`__ tutorial."
msgstr "Qiskit также позволяет с легкостью конструировать и более сложные оракулы \\* ``PhaseOracle`` для анализа логических выражений, таких как ``'~a | b'``. Это особенно удобно для решения задачи 3-SAT и показано в соответствующем разделе `Grover Examples <07_grover_examples.ipynb>`__ руководства."

#: ../../tutorials/algorithms/06_grover.ipynb:285
msgid "Here we’ll use the ``PhaseOracle`` for the simple example of finding the state :math:`|11\\rangle`, which corresponds to ``'a & b'``."
msgstr "Здесь мы будем использовать ``PhaseOracle`` для простого примера нахождения состояния :math:`|11\\rangle`, которое соответствует ``'a & b'``."

#: ../../tutorials/algorithms/06_grover.ipynb:324
msgid "Which we observe that this oracle implements a phase flip when the state is :math:`|11\\rangle`"
msgstr "Как мы можем увидеть, оракул переключает фазу для состояния :math:`|11\\rangle`"

#: ../../tutorials/algorithms/06_grover.ipynb:326
msgid "As mentioned above, Grover’s algorithm requires a *phase-flip* oracle. A bit-flip oracle flips the state of an auxiliary qubit if the other qubits satisfy the condition. To use these types of oracles with Grover’s we need to convert the bit-flip oracle to a phase-flip oracle by sandwiching the auxiliary qubit of the bit-flip oracle by :math:`X` and :math:`H` gates."
msgstr "Как уже упоминалось ранее, алгоритму Гровера нужно *переключить фазу*. Другой вариант связан с переключением бита и изменяет состояние вспомогательного кубита, если все остальные удовлетворяют заданному условию. Но тогда в алгоритме Гровера нужно дополнительно окружить оператор переключения бита вентилями :math:`X` и :math:`H`, что даст по сути как раз переключение фазы."

#: ../../tutorials/algorithms/06_grover.ipynb:328
msgid "**Note:** This transformation from a bit-flip to a phase-flip oracle holds generally and you can use this to convert your oracle to the right representation."
msgstr "**Примечание:** Это преобразование из оракула с переключением битов в оракул с переключением фаз применимо в любом случае, и вы можете использовать его для перевода вашего оракула в правильное представление."

#: ../../tutorials/algorithms/06_grover.ipynb:340
msgid "Amplitude amplification"
msgstr "Усиление амплитуды"

#: ../../tutorials/algorithms/06_grover.ipynb:342
msgid "Grover’s algorithm uses Hadamard gates to create the uniform superposition of all the states at the beginning of the Grover operator :math:`\\mathcal{Q}`. If some information on the good states is available, it might be useful to not start in a uniform superposition but only initialize specific states. This, generalized, version of Grover’s algorithm is referred to *Amplitude Amplification*."
msgstr "Алгоритм Гровера использует вентили Адамара для создания равномерной суперпозиции всех состояний в начале оператора Гровера :math:`\\mathcal{Q}`. Если имеется некоторая информация о \"хороших состояниях\", может оказаться полезным не начинать с равномерной суперпозиции, а инициализировать только конкретные состояния. Эта обобщенная версия алгоритма Гровера называется *Амплитудным усилением*."

#: ../../tutorials/algorithms/06_grover.ipynb:344
msgid "In Qiskit, the initial superposition state can easily be adjusted by setting the ``state_preparation`` argument."
msgstr "В Qiskit первоначальное состояние суперпозиции можно легко скорректировать, задав аргумент ``state_preparation``."

#: ../../tutorials/algorithms/06_grover.ipynb:347
msgid "State preparation"
msgstr "Подготовка состояния"

#: ../../tutorials/algorithms/06_grover.ipynb:349
msgid "A ``state_preparation`` argument is used to specify a quantum circuit that prepares a quantum state for the start point of the amplitude amplification. By default, a circuit with :math:`H^{\\otimes n}` is used to prepare uniform superposition (so it will be Grover’s search). The diffusion circuit of the amplitude amplification reflects ``state_preparation`` automatically."
msgstr "Аргумент ``state_preparation`` используется для уточнения начальных условий в квантовой цепи, создающей определенное состояние. По умолчанию схема с :math:`H^{\\otimes n}` подготавливает равномерную суперпозицию (для последующего поиска Гровера). Концепция усиления амплитуды автоматически отражает ``state_preparation``."

#: ../../tutorials/algorithms/06_grover.ipynb:464
msgid "Full flexibility"
msgstr "Полная гибкость"

#: ../../tutorials/algorithms/06_grover.ipynb:466
msgid "For more advanced use, it is also possible to specify the entire Grover operator by setting the ``grover_operator`` argument. This might be useful if you know more efficient implementation for :math:`\\mathcal{Q}` than the default construction via zero reflection, oracle and state preparation."
msgstr "Для более продвинутого использования можно также указать весь оператор Гровера, задав аргумент ``grover_operator``. Это может быть полезно, если вы знаете более эффективную реализацию для :math:`\\mathcal{Q}`, чем конструкция по умолчанию через нулевое отображение, оракул и подготовку состояния."

#: ../../tutorials/algorithms/06_grover.ipynb:468
msgid "The ``qiskit.circuit.library.GroverOperator`` can be a good starting point and offers more options for an automated construction of the Grover operator. You can for instance \\* set the ``mcx_mode`` \\* ignore qubits in the zero reflection by setting ``reflection_qubits`` \\* explicitly exchange the :math:`\\mathcal{S_f}, \\mathcal{S_0}` and :math:`\\mathcal{A}` operations using the ``oracle``, ``zero_reflection`` and ``state_preparation`` arguments"
msgstr "Библиотека ``qiskit.circuit.library.GroverOperator`` может служить хорошей отправной точкой и предлагает множество дополнительных возможностей для автоматического построения оператора Гровера. Можно, например \\* задать ``mcx_mode`` \\* игнорировать кубиты в нулевом отображении задав ``reflection_qubits`` \\* явным образом заменить операции :math:`\\mathcal{S_f}, \\mathcal{S_0}` и :math:`\\mathcal{A}` используя аргументы ``oracle``, ``zero_reflection`` и ``state_preparation``"

#: ../../tutorials/algorithms/06_grover.ipynb:479
msgid "For instance, imagine the good state is a three qubit state :math:`|111\\rangle` but we used 2 additional qubits as auxiliary qubits."
msgstr "Представим, например, что хорошее состояние - это состояние из трех кубитов :math:`|111\\rangle`, но мы использовали 2 дополнительных кубита в качестве вспомогательных."

#: ../../tutorials/algorithms/06_grover.ipynb:511
msgid "Then, per default, the Grover operator implements the zero reflection on all five qubits."
msgstr "Тогда по умолчанию оператор Гровера реализует нулевое отображение на всех пяти кубитах."

#: ../../tutorials/algorithms/06_grover.ipynb:543
msgid "But we know that we only need to consider the first three:"
msgstr "Но мы знаем, что нам нужно учитывать только первые три:"

#: ../../tutorials/algorithms/06_grover.ipynb:575
msgid "Dive into other arguments of ``Grover``"
msgstr "Ознакомление с другими аргументами ``Grover``"

#: ../../tutorials/algorithms/06_grover.ipynb:577
msgid "``Grover`` has arguments other than ``oracle`` and ``state_preparation``. We will explain them in this section."
msgstr "Помимо ``oracle`` и ``state_preparation``, у ``Grover`` есть и другие аргументы. Мы объясним их в этом разделе."

#: ../../tutorials/algorithms/06_grover.ipynb:580
msgid "Specifying ``good_state``"
msgstr "Уточнение ``good_state``"

#: ../../tutorials/algorithms/06_grover.ipynb:582
msgid "``good_state`` is used to check whether the measurement result is correct or not internally. It can be a list of binary strings, a list of integer, ``Statevector``, and Callable. If the input is a list of bitstrings, each bitstrings in the list represents a good state. If the input is a list of integer, each integer represent the index of the good state to be :math:`|1\\rangle`. If it is a ``Statevector``, it represents a superposition of all good states."
msgstr "``good_state`` используется для внутренней проверки правильности или неправильности результата измерения. Это может быть список битовых строк, список целых чисел, ``Statevector`` и название состояния (Callable). Если входными данными является список битовых строк, каждая битовая строка в списке представляет хорошее состояние. Если входными данными является список целых чисел, то каждое целое число представляет индекс хорошего состояния :math:`|1\\rangle`. Если это ``Statevector``, то он представляет собой суперпозицию всех хороших состояний."

#: ../../tutorials/algorithms/06_grover.ipynb:756
msgid "The number of ``iterations``"
msgstr "Число итераций ``iterations``"

#: ../../tutorials/algorithms/06_grover.ipynb:758
msgid "The number of repetition of applying the Grover operator is important to obtain the correct result with Grover’s algorithm. The number of iteration can be set by the ``iteration`` argument of ``Grover``. The following inputs are supported: \\* an integer to specify a single power of the Grover operator that’s applied \\* or a list of integers, in which all these different powers of the Grover operator are run consecutively and after each time we check if a correct solution has been found"
msgstr "Для получения правильного результата работы алгоритма Гровера важно правильное количество применений оператора. Число итераций может быть установлено с помощью аргумента ``iteration`` в ``Grover``. Поддерживаются следующие входные данные: \\* целое число, задающее итоговую степень оператора Гровера, или \\* список целых чисел, в этом случае оператор будет применяться сериями соответствующих длин с промежуточной проверкой результата"

#: ../../tutorials/algorithms/06_grover.ipynb:760
msgid "Additionally there is the ``sample_from_iterations`` argument. When it is ``True``, instead of the specific power in ``iterations``, a random integer between 0 and the value in ``iteration`` is used as the power Grover’s operator. This approach is useful when we don’t even know the number of solution."
msgstr "Существует также аргумент ``sample_from_iterations``. При значении ``True`` степени оператора будут случайными числами от 0 до ``iteration`` в каждой из серий. Это полезно, если количество решений неизвестно."

#: ../../tutorials/algorithms/06_grover.ipynb:762
msgid "For more details of the algorithm using ``sample_from_iterations``, see [4]."
msgstr "Более подробная информация об использовании ``sample_from_iterations`` имеется в [4]."

#: ../../tutorials/algorithms/06_grover.ipynb:766
msgid "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"
msgstr "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"

#: ../../tutorials/algorithms/06_grover.ipynb:819
msgid "When the number of solutions is known, we can also use a static method ``optimal_num_iterations`` to find the optimal number of iterations. Note that the output iterations is an approximate value. When the number of qubits is small, the output iterations may not be optimal."
msgstr "Если число решений известно, можно также использовать метод ``optimal_num_iterations`` для поиска оптимального количества итераций. Обратите внимание, что выводимое значение является приблизительным. Для малого числа кубитов оно может быть неподходящим."

#: ../../tutorials/algorithms/06_grover.ipynb:867
msgid "Applying ``post_processing``"
msgstr "Применение ``post_processing``"

#: ../../tutorials/algorithms/06_grover.ipynb:869
msgid "We can apply an optional post processing to the top measurement for ease of readability. It can be used e.g. to convert from the bit-representation of the measurement ``[1, 0, 1]`` to a DIMACS CNF format ``[1, -2, 3]``."
msgstr "Для удобства иногда применяется дополнительная обработка результатов. Например, можно преобразовать побитовое представление ``[1, 0, 1]`` в формат DIMACS CNF ``[1, -2, 3]``."

