msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-04 21:21+0000\n"
"PO-Revision-Date: 2023-05-04 21:39\n"
"Last-Translator: \n"
"Language: ru\n"
"Language-Team: Russian\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/09_IQPE.po\n"
"X-Crowdin-File-ID: 9546\n"

#: ../../tutorials/algorithms/09_IQPE.ipynb:10
msgid "This page was generated from `tutorials/algorithms/09_IQPE.ipynb`__."
msgstr "Страница создана на основе `tutorials/algorithms/09_IQPE.ipynb`__."

#: ../../tutorials/algorithms/09_IQPE.ipynb:9
msgid "Iterative Quantum Phase Estimation Algorithm"
msgstr "Итерационный квантовый алгоритм оценки фазы"

#: ../../tutorials/algorithms/09_IQPE.ipynb:11
msgid "The goal of this tutorial is to understand how the Iterative Phase Estimation (IPE) algorithm works, why would we use the IPE algorithm instead of the QPE (Quantum Phase Estimation) algorithm and how to build it with Qiskit using the same circuit exploiting reset gate and the ``c_if`` method that allows to apply gates conditioned by the values stored in a classical register, resulting from previous measurements."
msgstr "Цель этого урока - понять, как работает алгоритм итеративной оценки фазы (ИОФ), почему мы используем алгоритм ИОФ вместо алгоритма КОФ (квантовой оценки фазы) и как реализовать его с помощью Qiskit, используя одну и ту же схему с использованием операции сброса кубита и метода ``c_if``, который позволяет применять вентили, зависящие от значений, полученных в результате предыдущих измерений и хранящихся в классическом регистре."

#: ../../tutorials/algorithms/09_IQPE.ipynb:13
msgid "**References**"
msgstr "Дополнительные материалы"

#: ../../tutorials/algorithms/09_IQPE.ipynb:15
msgid "`Section 2 of Lab 4: Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__"
msgstr "`Раздел 2 Лабораторной работы 4: Итерационный алгоритм оценки фазы (Iterative Phase Estimation Algorithm, IPE) <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__"

#: ../../tutorials/algorithms/09_IQPE.ipynb:17
msgid "`Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__"
msgstr "`Глава 3.6 Квантовая оценка фазы (Quantum Phase Estimation, QPE) <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__"

#: ../../tutorials/algorithms/09_IQPE.ipynb:29
msgid "Conditioned gates: the ``c_if`` method"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:40
msgid "Before starting the IPE algorithm, we will give a brief tutorial about the Qiskit conditional method, ``c_if``, as it goes into building the IPE circuit."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:42
msgid "``c_if`` is a function (actually a method of the gate class) to perform conditioned operations based on the value stored previously in a classical register. With this feature you can apply gates after a measurement in the same circuit conditioned by the measurement outcome."
msgstr "``c_if`` является функцией (а точнее методом класса Gate) для выполнения условных операций, зависящих от значения классического регистра. Это дает возможность управления гейтами, используя данные предыдущих измерений в этой же цепи."

#: ../../tutorials/algorithms/09_IQPE.ipynb:44
msgid "For example, the following code will execute the :math:`X` gate if the value of the classical register is :math:`0`."
msgstr "Например, следующий код применит вентиль :math:'X'__, только если значение классического регистра равно :math:`0`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:80
msgid "We highlight that the method ``c_if`` expects as the first argument a whole classical register, not a single classical bit (or a list of classical bits), and as the second argument a value in decimal representation (a non-negative integer), not the value of a single bit, 0, or 1 (or a list/string of binary digits)."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:82
msgid "Let's make another example. Consider that we want to perform a bit flip on the third qubit after the measurements in the following circuit, when the results of the measurement of :math:`q_0` and :math:`q_1` are both :math:`1`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:122
msgid "We want to apply the :math:`X` gate, only if both the results of the measurement of :math:`q_0` and :math:`q_1` are :math:`1`. We can do this using the ``c_if`` method, conditioning the application of :math:`X` depending on the value passed as argument to ``c_if``."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:124
msgid "We will have to encode the value to pass to the ``c_if`` method such that it will check the values 011 and 111 (in binary representation), since it does not matter what :math:`q_2` is measured as."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:126
msgid "The 2 integer values in decimal representation:"
msgstr "Переведем эти числа в десятичный вид:"

#: ../../tutorials/algorithms/09_IQPE.ipynb:137
msgid "|97bc6b8cd6d74d65a98154b34bddec7a|"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:139
msgid "97bc6b8cd6d74d65a98154b34bddec7a"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:150
msgid "We can check the solutions using the ``bin()`` method in python (the prefix ``0b`` indicates the binary format)."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:199
msgid "So we have to apply :math:`X` to :math:`q_2` using ``c_if`` two times, one for each value corresponding to 011 and 111."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:233
msgid "IPE"
msgstr "IPE"

#: ../../tutorials/algorithms/09_IQPE.ipynb:235
msgid "The motivation for using the IPE algorithm is that QPE algorithm works fine for short depth circuits but when the circuit starts to grow, it doesn't work properly due to gate noise and decoherence times."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:237
msgid "The detailed explanation of how the algorithm works can be found in `Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__. To understand QPE in depth, you can see also `Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__."
msgstr "Подробное объяснение работы алгоритмов можно найти по ссылкам `Итерационный алгоритм оценки фазы (Iterative Phase Estimation Algorithm, IPE) <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__ и `Глава 3.6 Квантовая оценка фазы (Quantum Phase Estimation. QPE) <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__."

#: ../../tutorials/algorithms/09_IQPE.ipynb:240
msgid "IPE example with a 1-qubit gate for :math:`U`"
msgstr "Пример работы IPE с однокубитным вентилем :math:`U`"

#: ../../tutorials/algorithms/09_IQPE.ipynb:242
msgid "We want to apply the IPE algorithm to estimate the phase for a 1-qubit operator :math:`U`. For example, here we use the :math:`S`-gate."
msgstr "Используем алгоритм IPE для оценки фазы однокубитного оператора :math:`U`, например гейта :math:`S`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:244
msgid "Let's apply the IPE algorithm to estimate the phase for :math:`S`-gate. Its matrix is"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:246
msgid " S =\n"
"\\begin{bmatrix}\n"
"1 & 0\\\\\n"
"0 & e^\\frac{i\\pi}{2}\\\\\n"
"\\end{bmatrix}"
msgstr " S =\n"
"\\begin{bmatrix}\n"
"1 & 0\\\\\n"
"0 & e^\\frac{i\\pi}{2}\\\\\n"
"\\end{bmatrix}"

#: ../../tutorials/algorithms/09_IQPE.ipynb:254
msgid "That is, the :math:`S`-gate adds a phase :math:`\\pi/2` to the state :math:`|1\\rangle`, leaving unchanged the phase of the state :math:`|0\\rangle`"
msgstr "Это означает, что гейт :math:`S` добавляет фазу :math:`\\pi/2` у состояния :math:`|1\\rangle`, а состояние :math:`|0\\rangle` оставляет неизменным"

#: ../../tutorials/algorithms/09_IQPE.ipynb:256
msgid "S|1\\rangle = e^\\frac{i\\pi}{2}|1\\rangle\n\n"
msgstr "S|1\\rangle = e^\\frac{i\\pi}{2}|1\\rangle\n\n"

#: ../../tutorials/algorithms/09_IQPE.ipynb:258
msgid "In the following, we will use the notation and terms used in `Section 2 of lab 4 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__."
msgstr "Далее мы используем обозначения и термины из `Раздела 2 Лабораторной работы 4 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__."

#: ../../tutorials/algorithms/09_IQPE.ipynb:260
msgid "Let's consider to estimate the phase :math:`\\phi=\\frac{\\pi}{2}` for the eigenstate :math:`|1\\rangle`, we should find :math:`\\varphi=\\frac{1}{4}` (where :math:`\\phi = 2 \\pi \\varphi`). Therefore to estimate the phase we need exactly 2 phase bits, i.e. :math:`m=2`, since :math:`1/2^2=1/4`. So :math:`\\varphi=0.\\varphi_1\\varphi_2`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:262
msgid "Remember from the theory that for the IPE algorithm, :math:`m` is also the number of iterations, so we need only :math:`2` iterations or steps."
msgstr "Вспомним, что в алгоритме IPE :math:`m` также определяет количество итераций, поэтому в данном случае нам нужно всего лишь :math:`2` шага или итерации."

#: ../../tutorials/algorithms/09_IQPE.ipynb:264
msgid "First, we initialize the circuit. IPE works with only 1 auxiliary qubit, instead of :math:`m` counting qubits of the QPE algorithm. Therefore, we need 2 qubits, 1 auxiliary qubit and 1 for the eigenstate of :math:`U`-gate, and a classical register of 2 bits, for the phase bits :math:`\\varphi_1`, :math:`\\varphi_2`."
msgstr "Сначала мы инициализируем цепь. IPE требуется только 1 вспомогательный кубит в отличие от :math:`m` считающих кубитов алгоритма QPE. Поэтому нам нужны 2 кубита, 1 вспомогательный и 1 для собственного состояния оператора :math:`U`, и классический регистр из 2 бит для хранения значений :math:`\\varphi_1`, :math:`\\varphi_2`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:291
#: ../../tutorials/algorithms/09_IQPE.ipynb:701
msgid "First step"
msgstr "Первая итерация"

#: ../../tutorials/algorithms/09_IQPE.ipynb:293
msgid "Now we build the quantum circuit for the first step, that is, the first iteration of the algorithm, to estimate the least significant phase bit :math:`\\varphi_m`, in this case :math:`\\varphi_2`. For the first step we have 3 sub-steps: - initialization - application of the Controlled-:math:`U` gates - measure of the auxiliary qubit in X-basis"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:296
#: ../../tutorials/algorithms/09_IQPE.ipynb:706
msgid "Initialization"
msgstr "Инициализация"

#: ../../tutorials/algorithms/09_IQPE.ipynb:298
msgid "The initialization consists of application the Hadamard gate to the auxiliary qubit and the preparation of the eigenstate :math:`|1\\rangle`."
msgstr "Инициализация заключается в применении вентиля Адамара к вспомогательному кубиту и приготовлении второго кубита в состоянии :math:`|1\\rangle`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:331
#: ../../tutorials/algorithms/09_IQPE.ipynb:741
msgid "Application of the Controlled-:math:`U` gates"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:333
msgid "Then we have to apply :math:`2^t` times the Controlled-:math:`U` operators (see also in the docs `Two qubit gates <https://qiskit.org/documentation/tutorials/circuits/3_summary_of_quantum_operations.html#Two-qubit-gates>`__), that, in this example, is the Controlled-:math:`S` gate (:math:`CS` for short)."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:335
msgid "To implement :math:`CS` in the circuit, since :math:`S` is a phase gate, we can use the controlled phase gate :math:`\\text{CP}(\\theta)`, with :math:`\\theta=\\pi/2`."
msgstr "Поскольку :math:`S` влияет на фазу, для реализации :math:`CS` в цепи используем контролируемый фазовый гейт :math:`\\text{CP}(\\theta)` с :math:`\\theta=\\pi/2`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:369
msgid "Let's apply :math:`2^t` times :math:`\\text{CP}(\\pi/2)`. Since for the first step :math:`t=m-1`, and :math:`m=2`, we have :math:`2^t=2`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:402
#: ../../tutorials/algorithms/09_IQPE.ipynb:810
msgid "Measure in X-basis"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:404
msgid "Finally, we perform the measurement of the auxiliary qubit in X-basis. So we will define a function to perform the ``x_measurement`` and then apply it."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:428
msgid "In this way we obtain the phase bit :math:`\\varphi_2` and store it in the classical bit :math:`c_0`."
msgstr "Таким образом, мы получаем младший фазовый бит :math:` \\varphe_2 ` и сохраняем ее в младшем классическом бите :math:`c_0`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:460
msgid "Subsequent steps (2nd step)"
msgstr "Дальнейшие итерации (вторая итерация)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:462
msgid "Now we build the quantum circuit for the other remaining steps, in this example, only the second one. In these steps we have 4 sub-steps: the 3 sub-steps as in the first step and, in the middle, the additional step of the phase correction - initialization with reset - phase correction - application of the Control-:math:`U` gates - measure of the auxiliary qubit in X-basis"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:465
#: ../../tutorials/algorithms/09_IQPE.ipynb:849
msgid "Initialization with reset"
msgstr "Инициализация со сбросом"

#: ../../tutorials/algorithms/09_IQPE.ipynb:467
msgid "As we want to perform an iterative algorithm in the same circuit, we need to reset the auxiliary qubit :math:`q_0` after the measument gate and initialize it again as before to recycle the qubit."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:500
#: ../../tutorials/algorithms/09_IQPE.ipynb:882
msgid "Phase correction (for step 2)"
msgstr "Поправка фазы (для второй итерации)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:502
msgid "As seen in the theory, in order to extract the phase bit :math:`\\varphi_{1}`, we perform a phase correction of :math:`-\\pi\\varphi_2/2`. Of course, we need to apply the phase correction in the circuit only if the phase bit :math:`\\varphi_2=1`, i.e. we have to apply the phase correction of :math:`-\\pi/2` only if the classical bit :math:`c_0` is 1."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:504
msgid "So, after the reset we apply the phase gate :math:`P(\\theta)` with phase :math:`\\theta=-\\pi/2` conditioned by the classical bit :math:`c_0` (:math:`=\\varphi_2`) using the ``c_if`` method. So as we saw in the first part of this tutorial, we have to use the ``c_if`` method with a value of 1, as :math:`1_{10} = 001_{2}` (the subscripts :math:`_{10}` and :math:`_2` indicate the decimal and binary representations)."
msgstr "Поэтому после сброса мы применяем фазовый вентиль :math:`P(\\theta)` с фазой :math:`\\theta=-\\pi/2`, обусловленной классическим битом :math:`c_0` (:math:`=\\varphi_2`), используя метод `c_if``. Итак, как мы видели в первой части этого руководства, мы должны использовать метод ``c_if`` со значением 1, так как :math:`1_{10} = 001_{2}` (подписи :math:`_{10}` и :math:`_2`` указывают на десятичное и двоичное представления)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:536
#: ../../tutorials/algorithms/09_IQPE.ipynb:918
msgid "Application of the Control-:math:`U` gates and x-measurement (for step 2)"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:538
msgid "We apply the :math:`CU` operations as we did in the first step. For the second step we have :math:`t=m-2`, hence :math:`2^t=1`. So we apply :math:`\\text{CP}(\\pi/2)` once. And then we perform the X-measurement of the qubit :math:`q_0`, storing the result, the phase bit :math:`\\varphi_1`, in the bit :math:`c_1` of classical register."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:563
msgid "Et voilà, we have our final circuit"
msgstr "И вуаля, получаем итоговую цепь"

#: ../../tutorials/algorithms/09_IQPE.ipynb:593
msgid "Let's sample the circuit with Qiskit Aer's ``Sampler`` primitive, a local simulator without noise that runs locally."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:640
msgid "In the picture we have the same histograms but on the left we have on the x-axis the string with phase bits :math:`\\varphi_1`, :math:`\\varphi_2` and on the right the actual phase :math:`\\varphi` in decimal representation."
msgstr "На рисунке мы имеем одинаковые гистограммы, однако на левой абсцисса представлена строкой фазовых битов :math:`\\varphi_1`, :math:`\\varphi_2`, а справа -- фактической фазой :math:`\\varphi` в десятичном представлении."

#: ../../tutorials/algorithms/09_IQPE.ipynb:642
msgid "As we expected we have found :math:`\\varphi=\\frac{1}{4}=0.25` with a :math:`100\\%` probability."
msgstr "Как и ожидалось, значение :math:`\\varphi=\\frac{1}{4}=0.25` с вероятностью :math:`100\\%`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:654
msgid "IPE example with a 2-qubit gate"
msgstr "Использование IPE для двухкубитного гейта"

#: ../../tutorials/algorithms/09_IQPE.ipynb:656
msgid "Now, we want to apply the IPE algorithm to estimate the phase for a 2-qubit gate :math:`U`. For this example, let's consider the controlled version of the :math:`T` gate, i.e. the gate :math:`U=\\textrm{Controlled-}T` (that from now we will express more compactly with :math:`CT`). Its matrix is"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:658
msgid " CT =\n"
"\\begin{bmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^\\frac{i\\pi}{4}\\\\\n"
"\\end{bmatrix}"
msgstr " CT =\n"
"\\begin{bmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^\\frac{i\\pi}{4}\\\\\n"
"\\end{bmatrix}"

#: ../../tutorials/algorithms/09_IQPE.ipynb:668
msgid "That is, the :math:`CT` gate adds a phase :math:`\\pi/4` to the state :math:`|11\\rangle`, leaving unchanged the phase of the other computational basis states :math:`|00\\rangle`, :math:`|01\\rangle`, :math:`|10\\rangle`."
msgstr "Гейт :math:`CT` прибавляет фазу :math:`\\pi/4` состоянию :math:`|11\\rangle`, не меняя ее для остальных базисных состояний :math:`|00\\rangle`, :math:`|01\\rangle`, :math:`|10\\rangle`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:670
msgid "Let's consider to estimate the phase :math:`\\phi=\\pi/4` for the eigenstate :math:`|11\\rangle`, we should find :math:`\\varphi=1/8`, since :math:`\\phi = 2 \\pi \\varphi`. Therefore to estimate the phase we need exactly 3 classical bits, i.e. :math:`m=3`, since :math:`1/2^3=1/8`. So :math:`\\varphi=0.\\varphi_1\\varphi_2\\varphi_3`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:672
msgid "As done with the example for the 1-qubit :math:`U` operator we will go through the same steps but this time we will have :math:`3` steps since :math:`m=3`, and we will not repeat all the explanations. So for details see the above example for 1-qubit :math:`U` gate."
msgstr "Выполняем те же действия, что и при работе с однокубитным гейтом :math:`U`, но на этот раз у нас будет :math:`3` итерации, так как :math:`m=3`, и мы не будем повторять приведенные выше объяснения. Для получения более подробной информации смотрите вышеприведенный пример для 1-кубитного вентиля :math:`U`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:674
msgid "First, we initialize the circuit with 3 qubits, 1 for the auxiliary qubit and 2 for the 2-qubit gate, and 3 classical bits to store the phase bits :math:`\\varphi_1`, :math:`\\varphi_2`, :math:`\\varphi_3`."
msgstr "Сначала мы инициализируем схему с 3 кубитами: 1 для вспомогательного кубита и 2 для 2-х кубитного гейта, и 3 классическими битами для хранения фазовых битов :math:`\\varphi_1`, :math:`\\varphi_2`, :math:`\\varphi_3`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:703
msgid "Now we build the quantum circuit for the first step, to estimate the least significant phase bit :math:`\\varphi_m=\\varphi_3`."
msgstr "Теперь строим квантовую цепь для первой итерации алгоритма, которая даст младший бит фазы :math:`\\varphi_3`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:708
msgid "We initialize the auxiliary qubit and the other qubits with the eigenstate :math:`|11\\rangle`."
msgstr "Мы подготавливаем служебный кубит, используя гейт Адамара, и переводим остальные в состояние :math:`|11\\rangle`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:743
msgid "Then we have to apply multiple times the :math:`CU` operator, that, in this example, is the Controlled-:math:`CT` gate (:math:`CCT` for short)."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:745
msgid "To implement :math:`CCT` in the circuit, since :math:`T` is a phase gate, we can use the multi-controlled phase gate :math:`\\text{MCP}(\\theta)`, with :math:`\\theta=\\pi/4`."
msgstr "Так как :math:`T` действует на фазу, для реализации :math:`CCT` в цепи можно использовать многоконтрольный фазовый гейт (multi-controlled phase gate) :math:`\\text{MCP}(\\theta)` с :math:`\\theta=\\pi/4`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:777
msgid "Let's apply :math:`2^t` times :math:`\\text{MCP}(\\pi/4)`. Since for the first step :math:`t=m-1` and :math:`m=3`, we have :math:`2^t=4`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:812
msgid "Finally, we perform the measurement of the auxiliary qubit in X-basis. We can use the ``x_measurement`` function defined above in the example for 1-qubit gate. In this way we have obtained the phase bit :math:`\\varphi_3` and stored it in the classical bit :math:`c_0`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:844
msgid "Subsequent steps (2nd, 3rd)"
msgstr "Дальнейшие итерации (вторая и третья)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:846
msgid "Now we build the quantum circuit for the other remaining steps, the second and the third ones. As said in the first example, in these steps we have the additional sub-step of the phase correction."
msgstr "Продолжаем строить квантовую цепь для второй и третьей итераций. Как отмечалось ранее, здесь требуется дополнительный этап поправки фазы."

#: ../../tutorials/algorithms/09_IQPE.ipynb:884
msgid "In order to extract the phase bit :math:`\\varphi_{2}`, we perform a phase correction of :math:`-\\pi\\varphi_3/2`."
msgstr "Перед вычислением :math:`\\varphi_{2}` делаем поправку на :math:`-\\pi\\varphi_3/2`."

#: ../../tutorials/algorithms/09_IQPE.ipynb:886
msgid "So, after the reset we apply the phase gate :math:`P(\\theta)` with phase :math:`\\theta=-\\pi/2` conditioned by the classical bit :math:`c_0` (:math:`=\\varphi_3`)."
msgstr "Таким образом, после сброса мы применяем фазовый гейт :math:`P(\\theta)` с :math:`\\theta=-\\pi/2`, зависящий от значения классического бита :math:`c_0` (:math:`=\\varphi_3`)."

#: ../../tutorials/algorithms/09_IQPE.ipynb:920
msgid "We apply the :math:`CU` operations as we did in the first step. For the second step we have :math:`t=m-2`, hence :math:`2^t=2`. So we apply :math:`\\text{MCP}(\\pi/4)` :math:`2` times. And then we perform the X-measurement of the qubit :math:`q_0`, storing the phase bit :math:`\\varphi_2` in the bit :math:`c_1`."
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:954
msgid "All substeps of the 3rd step"
msgstr "Этапы третьей итерации"

#: ../../tutorials/algorithms/09_IQPE.ipynb:956
msgid "For the 3rd and last step, we perform the reset and initialization of the auxiliary qubit as done in the second step."
msgstr "Третья и последняя итерация начинается, как и ранее, со сброса и инициализации служебного кубита."

#: ../../tutorials/algorithms/09_IQPE.ipynb:958
msgid "Then at the 3rd step we have to perform the phase correction of :math:`-2\\pi 0.0\\varphi_{2}\\varphi_{3}= -2\\pi \\left(\\frac{\\varphi_2}{4}+\\frac{\\varphi_3}{8}\\right)=-\\frac{\\varphi_2\\pi}{2}-\\frac{ \\varphi_3\\pi}{4}`, thus we have to apply 2 conditioned phase corrections, one conditioned by :math:`\\varphi_3` (:math:`=c_0`) and the other by :math:`\\varphi_2`\\ (:math:`=c_1`). To do this we have to apply the following: - gate :math:`P(-\\pi/4)` conditioned by :math:`c_0=1`, that is, by :math:`c=001` (``c_if`` with value :math:`1`) - gate :math:`P(-\\pi/2)` conditioned by :math:`c_1=1`, that is, the gate is applied when :math:`c=010` (``c_if`` with values :math:`2`) - gate :math:`P(-3\\pi/4)` conditioned by :math:`c_1=1` and :math:`c_0=1` that is, the gate is applied when :math:`c=011` (``c_if`` with values :math:`3`)"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:961
msgid "Next, the :math:`CU` operations: we apply :math:`2^t` times the :math:`\\text{MCP}(\\pi/4)` gate and since at the 3rd step :math:`t=m-3=0`, we apply the gate only once."
msgstr "Далее следует непосредственное применение :math:`2^t` раз оператора :math:`CU`, для третьей итерации :math:`t=m-3=0`, поэтому гейт :math:`\\text{MCP}(\\pi/4)` использован однократно."

#: ../../tutorials/algorithms/09_IQPE.ipynb:1009
msgid "Now, we execute the circuit with the simulator without noise."
msgstr "Теперь мы запустим цепь на симуляторе без шума."

#: ../../tutorials/algorithms/09_IQPE.ipynb:1047
msgid "We have obtained :math:`100\\%` probability to find :math:`\\varphi=0.125`, that is, :math:`1/8`, as expected."
msgstr "Как и ожидалось, получаем :math:`100\\%` вероятность значения :math:`\\varphi=0.125` или :math:`1/8`."

