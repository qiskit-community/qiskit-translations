msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 17:09+0000\n"
"PO-Revision-Date: 2021-10-09 16:09\n"
"Last-Translator: \n"
"Language-Team: Russian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/07_grover_examples.po\n"
"X-Crowdin-File-ID: 9506\n"
"Language: ru_RU\n"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:10
msgid "This page was generated from `tutorials/algorithms/07_grover_examples.ipynb`__."
msgstr "Эта страница создана на основе `tutorials/algorithms/07_grover_examples.ipynb`__."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:9
msgid "Grover’s algorithm examples"
msgstr "Примеры применения алгоритма Гровера"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:11
msgid "This notebook has examples demonstrating how to use the Qiskit `Grover <https://qiskit.org/documentation/stubs/qiskit.algorithms.Grover.html>`__ search algorithm, with different oracles."
msgstr "В этом блокноте приведены примеры, демонстрирующие использование поискового алгоритма Qiskit `Grover <https://qiskit.org/documentation/stubs/qiskit.algorithms.Grover.html>`__ с различными оракулами."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:39
msgid "Finding solutions to 3-SAT problems"
msgstr "Поиск решений проблемы логической выполнимости 3-SAT"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:41
msgid "Let’s look at an example 3-Satisfiability (3-SAT) problem and walk-through how we can use Quantum Search to find its satisfying solutions. 3-SAT problems are usually expressed in `Conjunctive Normal Forms (CNF) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ and written in the `DIMACS-CNF <http://www.satcompetition.org/2009/format-benchmarks2009.html>`__ format. For example:"
msgstr "Давайте рассмотрим пример проблемы логической выполнимости 3-SAT и проследим, как мы можем использовать квантовый поиск для нахождения удовлетворяющих её решений. Задачи 3-SAT обычно выражаются в виде`конъюнктивных нормальных форм (КНФ) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ и записываются в формате `DIMACS-CNF <http://www.satcompetition.org/2009/format-benchmarks2009.html>`__. Например:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:70
msgid "The CNF of this 3-SAT instance contains 3 variables and 5 clauses:"
msgstr "КНФ данного экземпляра 3-SAT содержит 3 переменные и 5 дизъюнктивных одночленов:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:72
msgid ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"
msgstr ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:74
msgid "It can be verified that this 3-SAT problem instance has three satisfying solutions:"
msgstr "Можно показать, что данный пример задачи 3-SAT имеет три решения, удовлетворяющих выражению выше:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:76
msgid ":math:`(v_1, v_2, v_3) = (T, F, T)` or :math:`(F, F, F)` or :math:`(T, T, F)`"
msgstr ":math:`(v_1, v_2, v_3) = (T, F, T)` или :math:`(F, F, F)` или :math:`(T, T, F)`"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:78
msgid "Or, expressed using the DIMACS notation:"
msgstr "Или используя обозначения DIMACS:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:80
msgid "``1 -2 3``, or ``-1 -2 -3``, or ``1 2 -3``."
msgstr "``1 -2 3``, или ``-1 -2 -3``, или ``1 2 -3``."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:82
msgid "With this example problem input, we then create the corresponding ``oracle`` for our ``Grover`` search. In particular, we use the ``PhaseOracle`` component, which supports parsing DIMACS-CNF format strings and constructing the corresponding oracle circuit."
msgstr "Используя исходные данные из этого примера, мы создаем соответствующий ``оракул`` для осуществления нашего поиска ``Гровера``. В частности, мы используем компонент ``PhaseOracle``, который осуществляет обработку строк формата DIMACS-CNF и создает соответствующую цепь оракула."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:117
msgid "The ``oracle`` can now be used to create an Grover instance:"
msgstr "Теперь ``oracle`` (оракул) можно использовать для создания экземпляра класса Grover:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:140
msgid "We can then configure the backend and run the Grover instance to get the result:"
msgstr "Затем мы можем настроить backend и запустить экземпляр класса Grover, чтобы получить результат:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:186
msgid "As seen above, a satisfying solution to the specified 3-SAT problem is obtained. And it is indeed one of the three satisfying solutions."
msgstr "Как видно из вышеприведенной ячейки, решение удовлетворяющее указанной задачи 3-SAT получено. И это действительно одно из трех возможных решений."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:188
msgid "Since we used the ``'aer_simulator'``, the complete measurement result is also returned, as shown in the plot below, where it can be seen that the binary strings ``000``, ``011``, and ``101`` (note the bit order in each string), corresponding to the three satisfying solutions all have high probabilities associated with them."
msgstr "При использовании ``'aer_simulator'`` возвращается также и полный результат измерения, который приведен на графике ниже, из которого видно, что двоичные строки ``000``, ``011`` и ``101`` (обратите внимание на порядок битов в каждой строке), соответствующие трем удовлетворяющим решениям, имеют самые высокие вероятности."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:219
msgid "Boolean Logical Expressions"
msgstr "Логические выражения"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:221
msgid "Qiskit’s ``Grover`` can also be used to perform Quantum Search on an ``Oracle`` constructed from other means, in addition to DIMACS. For example, the ``PhaseOracle`` can actually be configured using arbitrary Boolean logical expressions, as demonstrated below."
msgstr "В Qiskit ``Grover`` также может быть использован для выполнения квантового поиска на ``Oracle``, построенном другими способами, помимо DIMACS. Например, ``PhaseOracle``, как показано ниже, может быть задан с помощью произвольных логических выражений."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:258
msgid "In the example above, the input Boolean logical expression ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` should be quite self-explanatory, where ``^``, ``~``, and ``&`` represent the Boolean logical XOR, NOT, and AND operators, respectively. It should be quite easy to figure out the satisfying solution by examining its parts: ``w ^ x`` calls for ``w`` and ``x`` taking different values; ``~(y ^ z)`` requires ``y`` and ``z`` be the same; ``x & y & z`` dictates all three to be ``True``. Putting these together, we get the satisfying solution ``(w, x, y, z) = (False, True, True, True)``, which our ``Grover``\\ ’s result agrees with."
msgstr ""

