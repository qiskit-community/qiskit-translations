msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-16 16:44+0000\n"
"PO-Revision-Date: 2022-05-28 13:32\n"
"Last-Translator: \n"
"Language-Team: Russian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/01_algorithms_introduction.po\n"
"X-Crowdin-File-ID: 9444\n"
"Language: ru_RU\n"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:10
msgid "This page was generated from `tutorials/algorithms/01_algorithms_introduction.ipynb`__."
msgstr "Страница создана на основе `tutorials/algorithms/01_algorithms_introduction.ipynb`__."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:9
msgid "An Introduction to Algorithms in Qiskit"
msgstr "Введение в алгоритмы в Qiskit"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:11
msgid "This is an introduction to algorithms in Qiskit and provides a high-level overview to help understand the various aspects of the functionality to get started. Other tutorials will provide more in-depth material, on given algorithms, and ways to use them etc."
msgstr "Данный раздел является введением в алгоритмы в Qiskit и представляет собой общий обзор, помогающий понять различные аспекты функционирования для начала работы. В других руководствах будет представлен более глубокий материал по конкретным алгоритмам, способам их использования и т.д."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:23
msgid "How is the algorithm library structured?"
msgstr "Как устроена библиотека алгоритмов?"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:25
msgid "Qiskit provides a number of `Algorithms <https://qiskit.org/documentation/apidoc/algorithms.html>`__ and they are grouped by category according to the task they can perform. For instance ``Minimum Eigensolvers`` to find the smallest eigen value of an operator, for example ground state energy of a chemistry Hamiltonian or a solution to an optimization problem when expressed as an Ising Hamiltonian. There are ``Linear Solvers`` for linear systems of equations problems and ``Amplitude Estimators`` for value estimation that can be used say in financial applications. The full set of categories can be seen in the Algorithms documentation link above."
msgstr "Qiskit содержит ряд `алгоритмов <https://qiskit.org/documentation/apidoc/algorithms.html>`__, классифицируемых по типам выполняемых задач. Например ``Minimum Eigensolvers`` ищет наименьшее собственное значение оператора, поэтому может вычислить энергию основного состояния молекулы и справиться с проблемой оптимизации, заданной в модели Изинга. Также упомянем ``Linear Solvers``, который способен решать системы линейных уравнений, и перспективный в финансовой сфере для оценки стоимости ``Amplitude Estimators``. Полную классификацию можно найти по указанной выше ссылке."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:28
msgid "Algorithms are configurable and often part of the configuration will be in the form of smaller building blocks, of which different instances of the building block type can be given. For instance with ``VQE``, the Variational Quantum Eigensolver, it takes a trial wavefunction, in the form of a ``QuantumCircuit`` and a classical optimizer among other things."
msgstr "Алгоритмы можно настраивать, и часто в их конфигурацию входят более мелкие структурные элементы, из которых можно получить различные экземпляры типа структурного элемента. Например, для ``VQE`` (Variational Quantum Eigensolver — квантовый вариационный алгоритм вычисления собственного значения), помимо остальных параметров, требуется пробная волновая функция в виде ``QuantumCircuit`` и классический алгоритм оптимизации."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:30
msgid "Let’s take a look at an example to construct a VQE instance. Here ``TwoLocal`` is the variational form (trial wavefunction), a parameterized circuit which can be varied, and ``SLSQP`` a classical optimizer. These are created as separate instances and passed to VQE when it is constructed. Trying, for example, a different classical optimizer, or variational form is simply a case of creating an instance of the one you want and passing it into VQE."
msgstr "Рассмотрим подробнее, как создать экземпляр класса VQE. ``TwoLocal`` представляет собой вариационную модель (пробную волновую функцию) в виде квантовой цепи с меняющимися параметрами, а ``SLSQP`` является классическим алгоритмом оптимизации. Они создаются как отдельные экземпляры и передаются в VQE при его построении. Для того чтобы попробовать, например, другой классический оптимизатор или вариационную схему, достаточно создать экземпляр нужного вам метода и передать его в VQE."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:58
msgid "Let’s draw the ansatz so we can see it’s a ``QuantumCircuit`` where θ[0] through θ[7] will be the parameters that are varied as VQE optimizer finds the minimum eigenvalue. We’ll come back to the parameters later in a working example below."
msgstr "Отображая анзац, видно, что он представляет собой квантовую цепь ``QuantumCircuit`` с параметрами θ[0] - θ[7], которые будут меняться в процессе поиска минимального собственного значения оптимизатором VQE. В нижеприведенном примере мы к ним еще вернемся."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:132
msgid "But more is needed before we can run the algorithm so let’s get to that next."
msgstr "Но сначала выполним необходимую подготовку."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:144
msgid "How to run an algorithm?"
msgstr "Как запустить алгоритм?"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:146
msgid "In order to run an algorithm we need to have backend, a simulator or real device, on which the circuits that comprise the algorithm can be run. So for example we can use the ``aer_simulator_statevector`` from the Aer provider."
msgstr "Для этого нам нужен подходящий данному примеру backend (программно-аппаратная часть сервиса), которым может быть как симулятор, так и реальное устройство. Здесь, к примеру, используется ``aer_simulator_statevector``из Aer."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:169
msgid "Now a backend on its own does not have information on how you might want to run the circuits etc. For example how many shots, do you want a noise model, even options around transpiling the circuits. For this Qiskit Terra has a ```QuantumInstance`` <https://qiskit.org/documentation/stubs/qiskit.utils.QuantumInstance.html>`__ which is provided both the backend as well as various settings around the circuit processing and execution so for instance:"
msgstr "Сам по себе он не содержит информацию об особенностях обработки вашей цепи (количество повторов, наличие шума, особенности транспиляции и т.д.). С этим может помочь `QuantumInstance <https://qiskit.org/documentation/stubs/qiskit.utils.QuantumInstance.html>` __ из Terra, обеспечивающий помимо выбора бэкенда еще и настройку запуска:"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:193
msgid "Note: if you provide the backend directly then internally a ``QuantumInstance`` will be created from it, with default settings, so at all times the algorithms are working through a ``QuantumInstance``."
msgstr "Примечание: При непосредственном выборе бэкенда также создается ``QuantumInstance`` с настройками по умолчанию, поэтому по сути алгоритмы всегда используют именно его."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:195
msgid "So now we would be able to call the `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html#qiskit.algorithms.VQE.compute_minimum_eigenvalue>`__ method. The latter is the interface of choice for the application modules, such as Nature and Optimization, in order that they can work interchangeably with any algorithm within the specific category."
msgstr "Теперь нам доступен метод `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html#qiskit.algorithms.VQE.compute_minimum_eigenvalue>` __. Он является интерфейсом для вызова таких модулей как Nature или Optimization и обеспечивает совместимость их работы с алгоритмами данного типа."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:207
msgid "A complete working example"
msgstr "Полный рабочий пример"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:209
msgid "Let’s put what we have learned from above together and create a complete working example. VQE will find the minimum eigenvalue, i.e. minimum energy value of a Hamiltonian operator and hence we need such an operator for VQE to work with. Such an operator is given below. This was originally created by the Nature application module as the Hamiltonian for an H2 molecule at 0.735A interatomic distance. It’s a sum of Pauli terms as below, but for now I am not going to say anything further about it since the goal is to run the algorithm, but further information on operators can be found in other tutorials."
msgstr "Обобщим вышесказанное и рассмотрим работу алгоритма в целом. Прежде всего нам потребуется оператор, минимальное собственное значение (энергию основного состояния) которого и будет искать VQE. Он приведен ниже и представляет собой созданный модулем Nature гамильтониан молекулы водорода с межатомным расстоянием в 0,735 ангстрем. Оператор задается с помощью матриц Паули, знакомство с которыми мы пока отложим. На данный момент наша цель — запустить алгоритм."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:237
msgid "So let’s build a VQE instance passing a backend using a ``QuantumInstance``, to the constructor. Now VQE does have setters so the ``QuantumInstance`` can also be passed later."
msgstr "Рассмотрим пример работы VQE, в котором бэкенд задается ``QuantumInstance`` уже на начальном этапе. Однако эта процедура может быть быть выполнена и позднее, такой вариант мы тоже разберем."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:239
msgid "Note: In order that you can run this notebook and see the exact same output the random number generator used throughout algorithms in ``algorithms_globals``, as well as the transpiler and simulator, via the ``QuantumInstance``, are seeded. You do not have to do this but if want to be able to reproduce the exact same outcome each time then this is how it’s done."
msgstr "Примечание: В работе алгоритма важную роль играет генератор случайных чисел и здесь использована возможность его инициализации через ``QuantumInstance``. Поэтому при каждом запуске вы будете получать один и тот же результат. Это не обязательная процедура, но иногда она бывает полезной, поэтому разберем ее в нашем примере."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:241
msgid "So let’s run VQE and print the result object it returns."
msgstr "Давайте запустим VQE и посмотрим на возвращаемый в результате объект."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:345
msgid "From the above result we can see it took the optimizer ``65`` evaluations of parameter values until it found the minimum eigenvalue of ``-1.85727`` which is the electronic ground state energy of the given H2 molecule. The optimal parameters of the ansatz can also be seen which are the values that were in the ansatz at the minimum value."
msgstr "Судя по результату, оптимизатор менял значение параметров ``65`` раз до достижения минимального собственного значения ``-1,85727``, которое и соответствует энергии основного электронного уровня молекулы водорода. Здесь также приведены оптимальные параметры анзаца, при которых он дает искомое число."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:357
msgid "Using VQE setting ``QuantumInstance`` after Construction"
msgstr "Отложенное использование ``QuantumInstance`` при работе с VQE"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:359
msgid "To close off let’s also create a VQE instance without supplying the ``QuantumInstance``. We later set it as long as by the time VQE runs it has a ``QuantumInstance`` to use."
msgstr "В заключение рассмотрим порядок создания объекта VQE без непосредственного применения ``QuantumInstance``. Здесь мы выполним его позднее."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:463
msgid "As the identical seeding was used as the prior example the result can be seen to be the same."
msgstr "Проведенная ранее инициализация генератора случайных чисел позволяет получить тот же самый результат, что удобно для сравнения двух подходов."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:474
msgid "This concludes this introduction to algorithms in Qiskit. Please check out the other algorithm tutorials in this series for both broader as well as more in depth coverage of the algorithms."
msgstr "На этом мы завершаем введение в алгоритмы Qiskit. Для более подробного изучения обратите внимание на другие статьи данного руководства."

