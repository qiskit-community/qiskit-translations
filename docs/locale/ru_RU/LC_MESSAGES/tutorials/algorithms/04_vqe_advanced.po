msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-24 10:41+0000\n"
"PO-Revision-Date: 2022-11-24 11:16\n"
"Last-Translator: \n"
"Language-Team: Russian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/04_vqe_advanced.po\n"
"X-Crowdin-File-ID: 9450\n"
"Language: ru_RU\n"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:10
msgid "This page was generated from `tutorials/algorithms/04_vqe_advanced.ipynb`__."
msgstr "Эта страница создана на основе `tutorials/algorithms/04_vqe_advanced.ipynb`__."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:9
msgid "Advanced VQE usage"
msgstr "Расширенное использование VQE"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:11
msgid "There exist several parameters for configuring and using more advanced `VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html>`__ capabilities. This tutorial will cover the parameters such as ``initial point``, ``expectation`` and ``gradient``."
msgstr "Существует несколько параметров для настройки и использования более продвинутых возможностей `VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html>`__. В этом уроке будут рассмотрены такие параметры, как ``начальная точка``, ``ожидание`` и ``градиент``."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:13
msgid "It will also cover advanced simulator use such as using Aer with the Matrix Product State method."
msgstr "Также будут рассмотрены расширенные возможности использования симулятора, как например, использование Aer с методом Matrix Product State."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:39
msgid "Here we will use the same operator as used in the other VQE algorithms tutorials."
msgstr "Здесь мы используем тот же оператор, что и в других уроках по алгоритмам VQE."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:65
msgid "Initial point"
msgstr "Начальная точка"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:67
msgid "The ``initial_point`` parameter allows the optimization to begin at the given point, where the point is a list of parameters that will configure the ansatz. By default the initial point is ``None`` which means that VQE will choose one. The choice in in this case is if the supplied ansatz has a preferred point, based on the initial state provided to it, then this will be chosen, otherwise a random initial point that fits with any bounds the ansatz has will be chosen. If an initial point is supplied it will take priority though and be used - note though it must match in length to the number of parameters in the ansatz circuit."
msgstr "Параметр ``initial_point`` позволяет начать оптимизацию с заданной точки, где точка - это список параметров, которые будут формировать анзац. По умолчанию начальной точкой является ``None``, что означает, что VQE выберет одну. Выбор в данном случае заключается в том, что если у предоставленного анзаца есть предпочтительная точка, основанная на предоставленном ему начальном состоянии, то она будет выбрана, в противном случае будет выбрана случайная начальная точка, которая соответствует любым ограничениям анзаца. Если начальная точка предоставлена, то она будет иметь приоритет и будет использоваться - обратите внимание, что ее длина должна соответствовать количеству параметров в схеме анзаца."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:70
msgid "Why to use a initial point? One reason would be if you have guess a reasonable starting point for the problem or perhaps know have information from a prior experiment."
msgstr "Зачем использовать начальную точку? Одна из причин - если вы определили разумную начальную точку для решения задачи или, возможно, располагаете информацией из предыдущего эксперимента."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:72
msgid "To demonstrate the use let’s first simply repeat the first working example from the `algorithms introduction <01_algorithms_introduction.ipynb#A-complete-working-example>`__ tutorial to get a solution’s optimal point."
msgstr "Чтобы продемонстрировать использование, давайте сначала просто повторим первый рабочий пример из урока `введение в алгоритмы <01_algorithms_introduction.ipynb#A-complete-working-example>`__, чтобы получить оптимальную точку решения."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:177
msgid "Now we can take the ``optimal_point`` from the above result and use it as the ``initial_point`` here."
msgstr "Теперь мы можем взять ``optimal_point`` из вышеприведенного результата и использовать ее в качестве ``initial_point`` здесь."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:291
msgid "Here we see that result was arrived at much more quickly with ``optimizer_evals`` when it started from a random value when the initial point was not supplied (default of None)."
msgstr "Здесь мы видим, что результат был получен гораздо быстрее при использовании ``optimizer_evals``, когда он начинал со случайного значения и начальная точка не была задана (по умолчанию None)."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:293
msgid "Where this becomes useful for examples where we the solution to one problem can be used to for a guess for the solution to a very close similar problem. Chemistry is very good example where we change the inter-atomic distance(s) of molecule to plot a dissociation profile. When the distance changes are small we expect the solution to still be nearby the prior one. One technique is to simply use the optimal point from one solution as the starting point for the next step. Now more complex techniques are possible that do some extrapolation to compute an initial position based on prior solution(s) rather than directly use the prior solution."
msgstr "Это полезно для примеров, когда решение одной задачи может быть использовано для предположения решения очень близкой аналогичной задачи. Химия - очень хороший пример, когда мы изменяем межатомные расстояния между молекулами, чтобы построить профиль диссоциации. Когда изменения расстояния малы, мы ожидаем, что решение все еще будет близко к предыдущему. Один из методов заключается в том, чтобы просто использовать оптимальную точку из одного решения в качестве отправной точки для следующего шага. Теперь возможны более сложные методы, которые делают некоторую экстраполяцию для вычисления начального положения на основе предыдущего решения (решений), а не напрямую используют предыдущее решение."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:306
msgid "Expectation"
msgstr "Математическое ожидание"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:308
msgid "The energy of the Hamiltonian operator that VQE is working on is the expectation value when evaluated with the parameterized ansatz. To compute the expectation value VQE uses an instance of an `expectation <https://qiskit.org/documentation/apidoc/qiskit.opflow.expectations.html>`__ object. Such an instance may be supplied via the ``expectation`` parameter, or in the default case, where it has a value of ``None``, VQE will use the `ExpectationFactory <https://qiskit.org/documentation/stubs/qiskit.opflow.expectations.ExpectationFactory.html>`__ to create itself a suitable instance based on the supplied backend."
msgstr "Энергия гамильтониана, над которым работает VQE, является значением математического ожидания при оценке с помощью параметризованного анзаца. Для вычисления значения матожидания VQE использует экземпляр объекта `expectation <https://qiskit.org/documentation/apidoc/qiskit.opflow.expectations.html>`__. Такой экземпляр может быть предоставлен через параметр ``expectation``, или в случае по умолчанию, когда он имеет значение ``None``, VQE будет использовать ``ExpectationFactory`` <https://qiskit.org/documentation/stubs/qiskit.opflow.expectations.ExpectationFactory.html>`__ для создания подходящего экземпляра на основе предоставленного backend."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:311
msgid "For most cases letting VQE create a suitable instance is sufficient. However the Qiskit Aer aer_simulator supports a snapshot instruction that can be used in conjunction with the operator expectation computation. If used then the outcome is ideal, i.e. like the statevector simulator, and has no shot noise. Since people normally choose the aer_simulator to have shot noise (sampling noise), and be more like a real-device outcome, VQE has an ``include_custom`` flag that is passed on to the ExpectationFactory. When using Aer qasm simulator, and this is set ``True``, the factory will return ``AerPauliExpectation`` which uses the snapshot instruction, when ``False``, default, then the regular ``PauliExpectation`` is returned."
msgstr "Для большинства случаев достаточно позволить VQE создать подходящий экземпляр. Однако Qiskit Aer aer_simulator поддерживает инструкцию snapshot, которая может быть использована вместе с вычислением математического ожидания оператора. Если ее использовать, то результат будет идеальным, т.е. как в симуляторе вектора состояния, и не будет иметь дробового шума. Поскольку люди обычно выбирают aer_simulator, чтобы он имел дробовой шум (шум выборки) и был более похож на результат реального устройства, VQE имеет опцию ``include_custom``, которая передается в ExpectationFactory. При использовании симулятора Aer qasm, если данный параметр установлен ``True``, фабрика возвращает ``AerPauliExpectation``, который использует инструкцию snapshot, если ``False`` (значение по умолчанию) то возвращается обычный ``PauliExpectation``."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:314
msgid "The following example shows ``include_custom=True`` where the outcome matches the statevector simulator. In fact it can be better/faster to do this than use the statevector_simulator directly. This is because in the latter case when the Hamiltonian is a sum of Paulis it must be converted to matrix form, and this is avoided when using the snapshot instruction done when include_custom is True."
msgstr "Следующий пример показывает ``include_custom=True``, где результат соответствует симулятору statevector. На самом деле это может быть лучше/быстрее, чем использовать statevector_simulator напрямую. Это происходит потому, что в последнем случае, когда гамильтониан является суммой операторов Паули, он должен быть преобразован в матричную форму, а этого можно избежать при использовании инструкции snapshot, выполняемой, когда include_custom равен True."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:417
msgid "In case you have doubts here is the aer_simulator again but include_custom has been left to default to False. The optimization ended abruptly, presumably due to the shot noise confusing the SLSQP optimizer."
msgstr "Если у вас есть сомнения, вот снова aer_simulator, но значение include_custom было оставлено по умолчанию False. Оптимизация закончилась внезапно, предположительно из-за дробового шума, сбивающего с толку оптимизатор SLSQP."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:536
msgid "Changing the optimizer to SPSA, which is designed to work in noisy environments, gets us a better result. Though the noise has affected the outcome so it’s not as accurate."
msgstr "Замена оптимизатора на SPSA, который предназначен для работы в шумной среде, дает нам лучший результат. Однако шум повлиял на результат, поэтому он не такой точный."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:638
msgid "As mentioned above, an expectation object can be explicitly given (so the internal ``ExpectationFactory`` and include_custom are never used/needed. Below we create an ``AerPauliExpectation`` and pass this to VQE. We can see the result matches that above where we set include_custom to True and let VQE create its own expectation object."
msgstr "Как упоминалось выше, объект для расчета математического ожидания может быть задан явно, поэтому внутренние ``ExpectationFactory`` и include_custom никогда не понадобятся/ не нужны. Ниже мы создаём ``AerPauliExpectation`` и передаём его в VQE. Мы видим, что результат совпадает с результатом приведенным выше, где мы установили include_custom в True и позволили VQE создать свой собственный объект для расчета матожидания."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:741
msgid "By default, the ``PauliExpectation`` object, that would have be chosen when include_custom is False (or when using Aer aer_simulator, or a real device) groups Paulis into commuting sets. This is efficient as it runs less circuits to compute the expectation. However, if for some reason you wanted to run a circuit for each Pauli then then grouping can be turned off when constructing the PauliExpectation. You need to explicitly pass in such an expectation instance to VQE to have it work this way though as shown below."
msgstr "По умолчанию объект ``PauliExpectation'', который будет выбран, если include_custom равен False (или при использовании Aer aer_simulator, или реального устройства), группирует операторы Паули в коммутирующие множества. Это эффективно, так как запускается меньше схем для вычисления матожидания. Однако, если по какой-то причине вы хотите запустить цепь для каждого оператора Паули, то группировку можно отключить при построении PauliExpectation. Для этого нужно явно передать VQE экземпляр такого математического ожидания, как показано ниже."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:846
msgid "Gradient"
msgstr "Градиент"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:848
msgid "Optimizers that use a gradient-based technique can be supplied with a user defined gradient that will be used instead of their default gradient computation which is usually done by simple finite difference. Gradients are passed indirectly via to the optimizer via its ``gradient`` parameter."
msgstr "Оптимизаторы, использующие градиентную схему, могут быть снабжены заданным пользователем градиентом, который будет использоваться вместо стандартного вычисления градиента, обычно выполняемого простыми конечными разностями. Градиенты передаются оптимизатору косвенно через его параметр ``gradient``."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:850
msgid "As the use of a user supplied ``gradient`` was shown in the `Monitoring VQE Convergence <02_vqe_convergence.ipynb#Using-Gradient-framework>`__ tutorial I will simply refer you there. Also the `Gradients framework <../operators/02_gradients_framework.ipynb>`__ tutorial has much more about the gradients themselves."
msgstr "Поскольку использование пользовательского ``градиента`` было показано в уроке ``Контроль сходимости VQE <02_vqe_convergence.ipynb#Using-Gradient-framework>`__, я просто направлю вас туда. Также в уроке `Gradients framework <.../operators/02_gradients_framework.ipynb>` есть гораздо больше информации о самих градиентах."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:862
msgid "Quantum Instance and advanced simulation"
msgstr "Quantum Instance и расширенное моделирование"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:864
msgid "While you may be familiar with passing a QuantumInstancen created from a ``aer_simulator_statevector`` a ``aer_simulator`` or real device backend, it is possible to use the advanced simulation modes of Aer too when applicable. For instance we can easily use the Aer `Matrix Product State <../simulators/7_matrix_product_state_method.ipynb>`__ method, that has the potential to scale to larger numbers of qubits."
msgstr "Несмотря на то, что вы можете быть знакомы с передачей QuantumInstance, созданного из ``aer_simulator_statevector``, на backend ``aer_simulator`` или на реальное устройство, можно использовать и дополнительные режимы моделирования Aer, когда это применимо. Например, мы можем легко использовать метод Aer `Matrix Product State <.../simulators/7_matrix_product_state_method.ipynb>`__, который позволяет увеличить число кубитов."

