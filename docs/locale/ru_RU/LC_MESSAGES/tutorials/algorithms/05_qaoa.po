msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-17 13:53+0000\n"
"PO-Revision-Date: 2022-06-17 14:47\n"
"Last-Translator: \n"
"Language-Team: Russian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/05_qaoa.po\n"
"X-Crowdin-File-ID: 9502\n"
"Language: ru_RU\n"

#: ../../tutorials/algorithms/05_qaoa.ipynb:10
msgid "This page was generated from `tutorials/algorithms/05_qaoa.ipynb`__."
msgstr "Страница создана на основе `tutorials/algorithms/05_qaoa.ipynb`__."

#: ../../tutorials/algorithms/05_qaoa.ipynb:9
msgid "Quantum Approximate Optimization Algorithm"
msgstr "Квантовый алгоритм приближенной оптимизации"

#: ../../tutorials/algorithms/05_qaoa.ipynb:11
msgid "Qiskit has an implementation of the Quantum Approximate Optimization Algorithm `QAOA <https://qiskit.org/documentation/stubs/qiskit.algorithms.QAOA.html>`__ and this notebook demonstrates using it for a graph partition problem."
msgstr "Qiskit содержит реализацию квантового алгоритма приближенной оптимизации `QAOA <https://qiskit.org/documentation/stubs/qiskit.algorithms.QAOA.html>` __ и в этом блокноте показано его применение для решения задачи разбиения графа."

#: ../../tutorials/algorithms/05_qaoa.ipynb:36
msgid "First we create a graph and draw it so it can be seen."
msgstr "Для начала создадим сам граф и выведем его на экран."

#: ../../tutorials/algorithms/05_qaoa.ipynb:84
msgid "The brute-force method is as follows. Basically, we exhaustively try all the binary assignments. In each binary assignment, the entry of a vertex is either 0 (meaning the vertex is in the first partition) or 1 (meaning the vertex is in the second partition). We print the binary assignment that satisfies the definition of the graph partition and corresponds to the minimal number of crossing edges."
msgstr "Метод \"грубой силы\" заключается в следующем. По сути, мы тщательно перебираем все двоичные распределения. В каждом двоичном распределении запись вершины равна либо 0 (значит, вершина находится в первом разделе), либо 1 (значит, вершина находится во втором разделе). Мы выводим бинарное распределение, которое удовлетворяет описанию разбиения графа и соответствует минимальному числу пересечений его ребер."

#: ../../tutorials/algorithms/05_qaoa.ipynb:156
msgid "The graph partition problem can be converted to an Ising Hamiltonian. Qiskit has different capabilities in the Optimization module to do this. Here, since the goal is to show QAOA, the module is used without further explanation to create the operator. The paper `Ising formulations of many NP problems <https://arxiv.org/abs/1302.5843>`__ may be of interest if you would like to understand the technique further."
msgstr "Задача о разбиении графа может быть преобразована в гамильтониан Изинга. В Qiskit это можно сделать разными способами с помощью модуля Optimization. Так как сейчас мы знакомимся с QAOA, опустим пока вопрос о процессе создания оператора. Однако если вас заинтересовала эта тема, подробное описание можно найти в статье `Ising formulations of many NP problems <https://arxiv.org/abs/1302.5843>` __."

#: ../../tutorials/algorithms/05_qaoa.ipynb:225
msgid "So lets use the QAOA algorithm to find the solution."
msgstr "Теперь применим алгоритм QAOA для поиска решения."

#: ../../tutorials/algorithms/05_qaoa.ipynb:327
msgid "The outcome can be seen to match to the value computed above by brute force. But we can also use the classical ``NumPyMinimumEigensolver`` to do the computation, which may be useful as a reference without doing things by brute force."
msgstr "То же самое мы получили ранее последовательным перебором. При этом для сравнения результата с работой классического алгоритма можно использовать не только метод \"грубой силы\", но и ``NumPyMinimumEgensolver``."

#: ../../tutorials/algorithms/05_qaoa.ipynb:381
msgid "It is also possible to use VQE as is shown below"
msgstr "Можно также использовать VQE как показано ниже"

