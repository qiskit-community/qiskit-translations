msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-21 22:19+0000\n"
"PO-Revision-Date: 2022-04-27 19:43\n"
"Last-Translator: \n"
"Language-Team: Russian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/6_repetition_code.po\n"
"X-Crowdin-File-ID: 9142\n"
"Language: ru_RU\n"

#: ../../tutorials/noise/6_repetition_code.ipynb:10
msgid "This page was generated from `tutorials/noise/6_repetition_code.ipynb`__."
msgstr "Эта страница создана на основе `tutorials/noise/6_repetition_code.ipynb`__."

#: ../../tutorials/noise/6_repetition_code.ipynb:9
msgid "Repetition Codes"
msgstr "Коды повторения"

#: ../../tutorials/noise/6_repetition_code.ipynb:21
msgid "Introduction"
msgstr "Введение"

#: ../../tutorials/noise/6_repetition_code.ipynb:23
msgid "In quantum error correction we take many noisy qubits (which we call *physical qubits*) and use them to store a smaller number of *logical qubits*. The error correction procedure is designed to detect and correct for the effects of noise. This makes the logical qubits much less noisy and more reliable than the physical ones from which they are built."
msgstr "В квантовой коррекции ошибок мы берем множество зашумленных кубитов (которые мы называем *физическими кубитами*) и используем их для хранения меньшего числа *логических кубитов*. Процедура коррекции ошибок предназначена для обнаружения и устранения влияния помех. Это делает логические кубиты гораздо менее шумными и более надежными, чем физические, из которых они построены."

#: ../../tutorials/noise/6_repetition_code.ipynb:25
msgid "The repetition code is a simple example of quantum error correction, in which a logical *bit* is stored rather than a logical *qubit*. A given instance of the repetition code is defined by two numbers, which we call :math:`d` and :math:`T`."
msgstr "Код повторения – это простой пример квантовой коррекции ошибок, в котором хранится логический *бит*, а не логический *кубит*. Данный экземпляр кода повторения определяется двумя числами, которые мы называем :math:`d` и :math:`T`."

#: ../../tutorials/noise/6_repetition_code.ipynb:27
msgid "The :math:`d` parameter determines how many physical qubits are used. The actual information about the logical bit is stored in :math:`d` qubits (which we’ll call *code qubits*). The encoding is done in a very simple way: to encode a ``0``, all these qubits are set in the state :math:`|0\\rangle`, to encode a ``1`` they are set to :math:`|1\\rangle`. To readout the value, you can just look at any qubit. To read it out in a way that protects against single qubit errors, you can read out all the qubits and take a majority vote."
msgstr "Параметр :math:`d` определяет, сколько физических кубитов используется. Фактическая информация о логическом бите хранится в :math:`d` кубитах (которые мы будем называть *кодовыми кубитами*). Кодирование осуществляется очень просто: для кодирования ``0`` все эти кубиты устанавливаются в состояние :math:`|0\\rangle``, для кодирования ``1`` они устанавливаются в состояние :math:`|1\\rangle``. Чтобы считать значение, вы можете просто посмотреть на любой кубит. Чтобы считать его так, чтобы защитить от ошибок одного кубита, вы можете считать все кубиты и провести подсчет большинством голосов."

#: ../../tutorials/noise/6_repetition_code.ipynb:30
msgid "It is not only at readout that we can extract useful information that will help us correct errors. We can also extract information while the logical bit sits idle, or even while it is involved in computation."
msgstr "Мы можем извлечь полезную информацию, которая поможет нам исправить ошибки, не только при считывании. Мы также можем получить эту информацию, пока логический бит бездействует или даже пока он участвует в вычислениях."

#: ../../tutorials/noise/6_repetition_code.ipynb:32
msgid "Since this is an exercise in quantum error correction, we will do this in a way that would also work for logical *qubits*. Specifically, our method of extracting information about errors must not extract any information regarding the stored logical information. In the quantum case, this is required so that we do not disturb superposition states of the stored qubits."
msgstr "Поскольку это упражнение по квантовой коррекции ошибок, мы будем делать это таким образом, чтобы это работало и для логических *кубитов*. В частности, наш метод извлечения информации об ошибках не должен получать никакой информации относительно сохраненной логической информации. В квантовом случае это необходимо для того, чтобы не нарушить состояния суперпозиции, в которых находятся кубиты."

#: ../../tutorials/noise/6_repetition_code.ipynb:34
msgid "We will extract information over :math:`T` rounds of *syndrome measurements*. For the repetition code, these are based on the fact that all code qubits should be in the same state (all :math:`|0\\rangle` or all :math:`|1\\rangle`). Any departure from this is therefore a signature of error. Specifically, we imagine our :math:`d` code qubits sitting along a line. We will then perform a measurement on each pair of neighboring code qubits. This will tell us whether they are the same or different, without extracting any information on what their values are."
msgstr "Мы будем извлекать информацию в процессе :math:`T` раундов *синдромных измерений*. Для кода повторения они основаны на том, что все кубиты кода должны находиться в одном и том же состоянии (все :math:`|0\\rangle` или все :math:`|1\\rangle`). Любое отклонение от этого является признаком ошибки. В частности, мы представим, что наши кодовые кубиты :math:`d` расположены вдоль линии. Затем мы проведем измерение каждой пары соседних кодовых кубитов. Это даст нам знать, одинаковые они или разные, не извлекая никакой информации о том, каковы их значения."

#: ../../tutorials/noise/6_repetition_code.ipynb:37
msgid "The implementation of these measurements requires :math:`d-1` additional qubits, which we will call *link qubits* for the repetition code. By performing two CNOTs between the pair of code qubits and a corresponding link qubit, the required information (and only the required information) is placed on the link qubit and can then be measured."
msgstr "Для реализации этих измерений требуется :math:`d-1` дополнительных кубитов, которые мы будем называть *связующими кубитами* (link qubits) для кода повторения. Выполняя два CNOT между парой кодовых кубитов и соответствующим связующим кубитом, необходимая информация (и только необходимая информация) помещается в связующий кубит и затем может быть измерена."

#: ../../tutorials/noise/6_repetition_code.ipynb:105
msgid "Here we provide tools for creating and testing repetition codes. The first thing we need to do is import them."
msgstr "Ниже представлены инструменты для создания и тестирования кодов повторения. Первое, что нам нужно сделать, это импортировать их."

#: ../../tutorials/noise/6_repetition_code.ipynb:129
msgid "Creating a repetition code"
msgstr "Создание кода повторения"

#: ../../tutorials/noise/6_repetition_code.ipynb:131
msgid "The ``repetition_code`` class creates a code for given values of :math:`d` and :math:`T`."
msgstr "Класс ``repetition_code`` создает код для заданных значений :math:`d` и :math:`T`."

#: ../../tutorials/noise/6_repetition_code.ipynb:154
msgid "With this we can inspect various properties of the code, such as the names of the qubit registers used for the code and ancilla qubits."
msgstr "С его помощью мы можем проверить различные свойства этого кода, например, названия кубитных регистров, используемых для кода и вспомогательных кубитов."

#: ../../tutorials/noise/6_repetition_code.ipynb:199
msgid "These registers are also attributes of the ``repetition_code`` object."
msgstr "Эти регистры также являются атрибутами объекта ``repetition_code``."

#: ../../tutorials/noise/6_repetition_code.ipynb:244
msgid "You can also access the quantum circuits that implement the code. Two of these are produced: one for each of the two possible logical bit values."
msgstr "Вы также можете получить доступ к квантовым схемам, реализующим код. Их создается две: по одной для каждого из двух возможных значений логического бита."

#: ../../tutorials/noise/6_repetition_code.ipynb:606
msgid "Building a custom repetition code"
msgstr "Создание пользовательского кода повторения"

#: ../../tutorials/noise/6_repetition_code.ipynb:608
msgid "You can also implement measurement rounds and logical ``X`` gates yourself. For example, let’s set up a code with no syndrome measurement rounds."
msgstr "Вы также можете самостоятельно реализовать измерительные раунды и логические вентили ``X``. Например, давайте создадим код без синдромных раундов измерения."

#: ../../tutorials/noise/6_repetition_code.ipynb:629
msgid "This does nothing but set up two circuits for the two logical encoded states. There are no syndrome measurement rounds, and no final readout."
msgstr "В результате не происходит ничего, кроме создания двух схем для двух логических закодированных состояний. Нет никаких раундов синдромного измерения и нет окончательного считывания."

#: ../../tutorials/noise/6_repetition_code.ipynb:759
msgid "We can add a round using the ``syndrome_measurement()`` method."
msgstr "Мы можем добавить раунд, используя метод ``syndrome_measurement()``."

#: ../../tutorials/noise/6_repetition_code.ipynb:909
msgid "A logical ``X`` operation can be added using the ``x()`` method."
msgstr "Логическая операция ``X`` может быть добавлена с помощью метода ``x()``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1059
msgid "This also has a ``logs`` kwarg, which is a list of the circuits for which ``X`` is applied. This is ``['0','1']`` by default."
msgstr "У этого параметра также есть именованный аргумент ``logs``, который представляет собой список цепей, для которых применяется ``X``. По умолчанию это ``['0','1']``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1070
msgid "Final readout is then done with the ``readout()`` method."
msgstr "Окончательное считывание производится методом ``readout()``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1320
msgid "Running a repetition code"
msgstr "Запуск кода повторения"

#: ../../tutorials/noise/6_repetition_code.ipynb:1322
msgid "The code object produces the circuits required for the code. The user can then run them using any method they prefer, allowing full control over compilation, backends, noise models and so on."
msgstr "Объект кода создает схемы, необходимые для кода. Затем пользователь может запустить их любым удобным для него методом, обеспечивая полный контроль над компиляцией, бэкендами, моделями шума и так далее."

#: ../../tutorials/noise/6_repetition_code.ipynb:1324
msgid "For example, here we run them without noise on the ``qasm_simulator``."
msgstr "Например, здесь мы запускаем их без шума на ``qasm_simulator``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1395
msgid "Here the strings from right to left represent the outputs of the syndrome measurement rounds, followed by the final measurement of the code qubits."
msgstr "Здесь строковые переменные представляют выходы раундов измерения синдрома справа налево, после чего следует окончательное измерение кодовых кубитов."

#: ../../tutorials/noise/6_repetition_code.ipynb:1397
msgid "These results need to be rewritten in a different form in order to be decoded. To do this we can use the ``process_results`` method of the code object."
msgstr "Эти результаты необходимо переписать в другую форму, чтобы их можно было декодировать. Для этого мы можем использовать метод ``process_results`` объекта code."

#: ../../tutorials/noise/6_repetition_code.ipynb:1442
msgid "The result is a dictionary whose keys are bit strings that represent outputs of the circuit, and the values represent the number of shots for which this output occurred."
msgstr "В результате создается словарь, ключами которого являются битовые строки, представляющие выходные данные схемы, а значениями – количество считываний, за которое эти данные были произведены."

#: ../../tutorials/noise/6_repetition_code.ipynb:1444
msgid "The strings are not the direct output from the circuits. They have been processed to take the form that helps us correct errors. Here’s a short guided tour."
msgstr "Строковые переменные не являются прямыми выходными данными из схем. Они были специально обработаны, чтобы принять форму, которая помогает нам исправить ошибки. Вот краткий экскурс."

#: ../../tutorials/noise/6_repetition_code.ipynb:1446
msgid "The ``0 0`` to the far left for the logical ``0`` result, and the ``1 1`` to the far left of the logical ``1``, are the logical readout. Any code qubit could be used for this readout, since they should (without errors) all be equal. So we could have just one result here, for one arbitrarily chosen code qubit. Or we could have :math:`d`, one for each qubit. Instead we have two, from the two qubits at either end of the line. This is because it works best with the decoder (which we’ll use later). In the absence of errors, these two values will always be equal."
msgstr "Крайний слева ``0 0`` для логического ``0`` результата и ``1 1`` для крайнего слева логического ``1`` – это логическое считывание. Для этого считывания можно использовать любой кодовый кубит, поскольку все они должны (без ошибок) быть одинаковыми. В принципе, здесь можно было бы использовать только одно число для одного произвольно выбранного кодового кубита. Или мы могли бы использовать :math:`d`, по одному для каждого кубита. Вместо этого мы имеем два результата: от двух кубитов с обоих концов линии. Это связано с тем, что так лучше работает декодер (который мы будем использовать позже). При отсутствии ошибок эти два значения всегда будут равны."

#: ../../tutorials/noise/6_repetition_code.ipynb:1449
msgid "The following ``0000`` is the :math:`d-1` results of the syndrome measurements for the first round.A ``0`` implies that the corresponding pair of qubits where the same, and ``1`` implies different. There are :math:`d-1` results because the line of :math:`d` code qubits has :math:`d-1` possible neighboring pairs. In the absence of errors, they will all be ``0``."
msgstr "Следующие ``0000`` – это :math:`d-1` результатов измерений синдрома для первого раунда. ``0`` означает, что соответствующая пара кубитов одинаковая, а ``1`` – разная. Возможно всего :math:`d-1` результатов, потому что линия из :math:`d` кодовых кубитов имеет :math:`d-1` возможных соседних пар. В отсутствие ошибок все они будут ``0``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1451
msgid "The ``0000`` that follows that is the syndrome change between the first and second rounds. It is therefore the bitwise ``OR`` of the syndrome measurement results from the second round with those from the first. In the absence of errors, they will all be ``0``."
msgstr "Следующее за этим ``0000`` является изменением синдрома между первым и вторым раундами. Таким образом, это побитовое ``OR`` результатов измерения синдрома во втором раунде и в первом. В отсутствие ошибок все они будут равны ``0``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1453
msgid "Subsequent blocks follow the same formula, though the last requires some comment. This is not measured using the standard method (with a link qubit). Instead it is calculated from the final readout measurement of all code qubits. Again it is presented as a syndrome change, and will be all ``0`` in the absence of errors. This is the :math:`T+1`-th block of syndrome measurements since, as it is not done in the same way as the others, it is not counted among the :math:`T` syndrome measurement rounds."
msgstr "Последующие блоки соответствуют той же формуле, хотя последний требует некоторых комментариев. Этот показатель не измеряется стандартным методом (с помощью связующего кубита). Вместо этого он вычисляется из конечного измерения считывания всех кодовых кубитов. Опять же, это представлено как изменение синдрома, и при отсутствии ошибок все значения будут ``0``. Это :math:`T+1`-ый блок синдромных измерений, но, поскольку он выполняется не так, как остальные, он не учитывается среди :math:`T` раундов синдромных измерений."

#: ../../tutorials/noise/6_repetition_code.ipynb:1456
msgid "**Example 1:** ``0 0  0110 0000 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``0``. The syndrome shows that (most likely) the middle code qubit was flipped by an error before the first measurement round. This causes it to disagree with both neighboring code qubits for the rest of the circuit. This is shown by the syndrome in the first round, but the blocks for subsequent rounds do not report it as it no longer represents a change. Other sets of errors could also have caused this syndrome, but they would need to be more complex and so presumably less likely."
msgstr "**Пример 1:** ``0 0 0110 0000 0000`` будет представлять собой код повторения с :math:`d=5`, :math:`T=2` и с закодированным ``0``. Синдром показывает, что (скорее всего) средний кодовый кубит был перевернут ошибкой перед первым раундом измерения. Это приводит к тому, что он расходится с обоими соседними кодовыми кубитами на протяжении всей оставшейся части схемы. Это показано синдромом в первом раунде, но блоки для последующих раундов не сообщают об этом, поскольку это больше не представляет собой изменение. Другие наборы ошибок также могли бы вызвать этот синдром, но они должны быть более сложными и поэтому, предположительно, менее вероятными."

#: ../../tutorials/noise/6_repetition_code.ipynb:1459
msgid "**Example 2:** ``0 0  0010 0010 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``0``. Here one of the syndrome measurements reported a difference between two code qubits in the first round, leading to a ``1``. The next round did not see the same effect, and so resulted in a ``0``. However, since this disagreed with the previous result for the same syndrome measurement, and since we track syndrome changes, this change results in another ``1``. Subsequent rounds also do not detect anything, but this no longer represents a change and hence results in a ``0`` in the same position. Most likely the measurement result leading to the first ``1`` was an error."
msgstr "**Пример 2:** ``0 0 0010 0010 0000`` будет представлять собой код повторения с :math:`d=5`, :math:`T=2` и с закодированным ``0``. Здесь одно из измерений синдрома сообщило о разнице между двумя кодовыми кубитами в первом раунде, что привело к ``1``. В следующем раунде такого эффекта не наблюдалось, что привело к ``0``. Однако, поскольку это расходится с предыдущим результатом для того же измерения синдрома, и поскольку мы отслеживаем изменения синдрома, это изменение приводит к еще одной ``1``. Последующие раунды также ничего не показывают, но это уже не является изменением и, следовательно, приводит к ``0`` в той же позиции. Скорее всего, результат измерения, приведший к первой ``1``, был ошибкой."

#: ../../tutorials/noise/6_repetition_code.ipynb:1462
msgid "**Example 3:** ``0 1  0000 0001 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``1``. A code qubit on the end of the line is flipped before the second round of syndrome measurements. This is detected by only a single syndrome measurement, because it is on the end of the line. For the same reason, it also disturbs one of the logical readouts."
msgstr "**Пример 3:** ``0 1 0000 0001 0000`` будет представлять собой код повторения :math:`d=5`, :math:`T=2` с закодированной ``1``. Кодовый кубит в конце линии переворачивается перед вторым раундом измерений синдрома. Это обнаруживается только одним измерением синдрома, поскольку он находится в конце строки. По этой же причине он также нарушает одно из логических считываний."

#: ../../tutorials/noise/6_repetition_code.ipynb:1464
msgid "Note that in all these examples, a single error causes exactly two characters in the string to change from the value it would have with no errors. This is, in fact, the reason why the logical output consists of both endpoints. It is a property that will be used by the decoder."
msgstr "Обратите внимание, что во всех этих примерах одна ошибка приводит к изменению значения ровно двух символов в строке по сравнению со значением, которое она имела бы при отсутствии ошибок. Это, собственно, и есть причина, по которой логический вывод состоит из обеих конечных точек. Это свойство, которое будет использоваться декодером."

#: ../../tutorials/noise/6_repetition_code.ipynb:1475
msgid "To see the effects of noise, we need to specify a noise model. For example, let’s set up a simple noise model with gate and measurement errors."
msgstr "Чтобы увидеть влияние шума, нам необходимо задать модель шума. Например, зададим простую модель шума с ошибками вентилей и ошибками измерения."

#: ../../tutorials/noise/6_repetition_code.ipynb:1520
msgid "This can then be run to generate noisy results. Let’s make a quick function to do this, and then run it."
msgstr "Затем ее можно запустить, чтобы получить шумные результаты. Давайте сделаем для этого короткую функцию, а затем запустим ее."

#: ../../tutorials/noise/6_repetition_code.ipynb:1884
msgid "Here the non-noisy results are the most likely. The rest of the samples are distributed among other possibilities with non-trivial syndromes."
msgstr "Здесь нешумные результаты являются наиболее вероятными. Остальные результаты распределены между другими возможностями с нетривиальными синдромами."

#: ../../tutorials/noise/6_repetition_code.ipynb:1896
msgid "Decoding a repetition code"
msgstr "Декодирование кода повторения"

#: ../../tutorials/noise/6_repetition_code.ipynb:1898
msgid "Noisy results can change the logical value at readout, and so affect our ability to read out the logical qubit. This can be mitigated by looking at the syndrome values. These can tell us whether or not the logical values are most likely to have changed, and so allow us to correct for the errors. The process of analyzing the syndrome to correct for the errors is called ‘decoding’. We do this by building a decoding object for our code."
msgstr "Зашумленные результаты могут изменить логическое значение при считывании и таким образом повлиять на нашу способность считывать логический кубит. Это обстоятельство можно ослабить, если посмотреть на значения синдромов. Они могут сказать нам, изменились ли логические значения с наибольшей вероятностью, и таким образом позволить нам исправить ошибки. Процесс анализа синдрома для исправления ошибок называется ‘декодированием’. Для этого мы создаем объект декодирования для нашего кода."

#: ../../tutorials/noise/6_repetition_code.ipynb:1919
msgid "This analyzes the code by seeing how different kinds of error change the output. With this information, along with a decoding algorithm, we can determine what the logical value is most likely to have been."
msgstr "Использованная команда позволяет проанализировать код, посмотрев, как различные виды ошибок изменяют выходной сигнал. С помощью этой информации и алгоритма декодирования мы можем определить, каким, скорее всего, было логическое значение."

#: ../../tutorials/noise/6_repetition_code.ipynb:1921
msgid "For example, let’s use the ‘matching’ algorithm to decode, which is based on minimum weight perfect matching. This takes specific output strings as input. We’ll give it the simple example string ``'1 0  001 100 100'``, for a logical ``1`` that has suffered two errors."
msgstr "Например, для декодирования воспользуемся алгоритмом 'matching', который основан на минимальном весовом идеальном соответствии. В качестве входных данных он принимает определенные выходные строки. Мы дадим ему простой пример строки ``'1 0  001 100 100'`` для логической ``1``, которая претерпела две ошибки."

#: ../../tutorials/noise/6_repetition_code.ipynb:1966
msgid "The output is what the logical part should have been. As you can see, the decoder correctly determined that the readout should have been of a logical ``1``."
msgstr "Вывод – это то, какой должна была быть логическая часть. Как видите, декодер правильно определил, что считывание должно было быть логической ``1``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1977
msgid "When we take many samples, we can determine the probability with which the decoder is incorrect. This should decrease exponentially as the code size is increased, since the configurations of noise that fool the decoder become less likely. The probability of a logical error is calculated using the ``logical_prob()`` method. This runs matching by default, but other algorithms can be specified by the ``algorithm`` kwarg."
msgstr "Когда мы делаем много измерений, мы можем определить вероятность, с которой декодер ошибается. Она должна экспоненциально уменьшаться по мере увеличения размера кода, поскольку конфигурации шума, которые обманывают декодер, становятся менее вероятными. Вероятность логической ошибки вычисляется с помощью метода ``logical_prob()``. По умолчанию используется метод matching, но другие алгоритмы могут быть заданы с помощью именованного аргумента ``algorithm``."

