msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-21 22:19+0000\n"
"PO-Revision-Date: 2022-04-29 07:18\n"
"Last-Translator: \n"
"Language-Team: Russian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/9_entanglement_verification.po\n"
"X-Crowdin-File-ID: 9380\n"
"Language: ru_RU\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:10
msgid "This page was generated from `tutorials/noise/9_entanglement_verification.ipynb`__."
msgstr "Эта страница создана на основе `tutorials/noise/9_entanglement_verification.ipynb`__."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:9
msgid "Entanglement Verification"
msgstr "Проверка запутанности"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:12
msgid "Introduction to the GHZ state"
msgstr "Знакомство с состоянием GHZ"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:14
msgid "**The Greenberger-Horne-Zeilinger (GHZ)** State is a :math:`n`-qubit entangled state best defined by the following state vector:"
msgstr "Состояние **Гринбергера – Хорна – Цайлингера (Greenberger-Horne-Zeilinger, GHZ)** — это запутанное состояние :math:`n`кубитов, которое характеризуется следующим вектором состояния:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:16
msgid "|{\\rm GHZ} \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}} , n > 2\n\n"
msgstr "|{\\rm GHZ} \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}} , n > 2\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:18
msgid "Characterization of the GHZ state is very useful in assessing multi-qubit interactions, whose robustness is key to developing large scale quantum computers."
msgstr "Характеристика состояния GHZ очень полезна для оценки мультикубитных взаимодействий, устойчивость которых имеет ключевое значение для разработки крупномасштабных квантовых компьютеров."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:21
msgid "Characterizing a quantum state"
msgstr "Описание квантового состояния"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:23
msgid "Any mixed quantum state can be identified by a density matrix, defined as :math:`\\rho = \\sum_{i} p_i |\\psi_{i} \\rangle \\langle \\psi_{i}|`, where :math:`|\\psi_{i} \\rangle` are the pure quantum states forming the mixture and :math:`0 < p_i \\le 1`, :math:`\\sum_{i} p_i = 1` are the classical probabilities to be in state :math:`|\\psi_{i} \\rangle`. We denote the pure density matrix of an ideal GHZ State by :math:`\\rho_{p} \\equiv |{\\rm GHZ} \\rangle \\langle {\\rm GHZ}|`. We want to see how close this matrix is to the density matrix of a GHZ State as produced in an experiment, :math:`\\rho_{T}`. One method to quantify this similarity is to calculate the fidelity between the states, :math:`F(\\rho_{p},\\rho_{T})`"
msgstr "Любое смешанное квантовое состояние может быть задано матрицей плотности, которую определяют как :math:`\\rho = \\sum_{i} p_i |\\psi_{i} \\rangle \\langle \\psi_{i}|`, где :math:`|\\psi_{i} \\rangle` — чистые квантовые состояния, образующие смешанное состояние, а :math:`0 < p_i \\le 1`, :math:`\\sum_{i} p_i = 1` — классические вероятности находиться в состоянии :math:`|\\psi_{i} \\rangle`. Обозначим матрицу плотности чистого идеального состояния GHZ через :math:`\\rho_{p} \\equiv |{\\rm GHZ} \\rangle \\langle {\\rm GHZ}|`. Мы хотим узнать, насколько близка эта матрица к матрице плотности GHZ состояния, полученной в эксперименте :math:`\\rho_{T}`. Одним из методов количественной оценки этого сходства является вычисление точности воспроизведения состояния, :math:`F(\\rho_{p},\\rho_{T})`"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:26
msgid "F = \\Big[ Tr \\sqrt{\\sqrt{\\rho_{p}}\\rho_{T}\\sqrt{\\rho_{p}}} \\Big] ^{2}\n\n"
msgstr "F = \\Big[ Tr \\sqrt{\\sqrt{\\rho_{p}}\\rho_{T}\\sqrt{\\rho_{p}}} \\Big] ^{2}\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:28
msgid "The aim of this tutorial is two-fold: we will explore ways in which we can characterize the GHZ state, and ways in which we can use Ignis’ error mitigation tools to increase readout fidelity, regardless of characterization method"
msgstr "Это руководство преследует две цели: мы рассмотрим способы, с помощью которых можно охарактеризовать состояние GHZ, и методы, с помощью которых можно использовать инструменты Ignis для уменьшения ошибок, чтобы повысить точность считывания независимо от метода характеризации"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:30
msgid "Before we go further, let us import everything we will need from basic Qiskit:"
msgstr "Прежде чем мы продолжим, давайте импортируем все, что нам понадобится из базового Qiskit:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:62
msgid "The next two functions are from ignis. The first is for the general error mitigation technique, and the second is specifically for quantum tomography"
msgstr "Следующие две функции взяты из Ignis. Первая — для общей техники уменьшения ошибок, вторая — для квантовой томографии"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:85
msgid "The following import from the ``entanglement`` package contains information needed to create, parallelize and analyze GHZ State circuits"
msgstr "Следующие импортирования из пакета ``entanglement`` содержат информацию, необходимую для создания, параллелизации и анализа схем состояния GHZ"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:109
msgid "Preparing a GHZ State"
msgstr "Подготовка состояния GHZ"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:111
msgid "Let us first go over how to prepare a GHZ State:"
msgstr "Давайте сначала рассмотрим вопрос о том, как подготовить состояние GHZ:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:113
msgid "Say we have a system of :math:`n` qubits, all prepared in the :math:`|0\\rangle` state:"
msgstr "Допустим, у нас есть система из :math:`n` кубитов, все они находятся в состоянии :math:`|0\\rangle`:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:115
msgid "|\\psi \\rangle = |00...0\\rangle\n\n"
msgstr "|\\psi \\rangle = |00...0\\rangle\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:117
msgid "We apply a Hadamard gate to the first qubit: :math:`|0\\rangle \\longrightarrow \\frac{1}{\\sqrt{2}}(|0\\rangle + |1\\rangle)`. Our state now looks like:"
msgstr "Мы применим вентиль Адамара к первому кубиту: :math:`|0\\rangle \\longrightarrow \\frac{1}{\\sqrt{2}}(|0\\rangle + |1\\rangle)`. Теперь наше состояние выглядит следующим образом:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:119
msgid "|\\psi \\rangle = \\frac{|00...0\\rangle + |10...0\\rangle}{\\sqrt{2}}\n\n"
msgstr "|\\psi \\rangle = \\frac{|00...0\\rangle + |10...0\\rangle}{\\sqrt{2}}\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:121
msgid "Applying on this state a sequence of :math:`n-1` CNOT gate between the :math:`n^{th}` and :math:`(n+1)^{th}` qubits for :math:`n = 0 \\ldots n-1` leaves the :math:`n+1` qubit at :math:`|0\\rangle` if the :math:`n^{th}` is in :math:`|0\\rangle`, and at :math:`|1\\rangle` if the :math:`n^{th}` is in :math:`|1\\rangle`, thus creating the GHZ State:"
msgstr "Применение к этому состоянию последовательности из :math:`n-1` операторов CNOT между кубитами :math:`n` и :math:`(n+1)` для :math:`n = 0 \\ldots n-1` оставляет :math:`n+1` кубит в состоянии :math:`|0\\rangle`, если :math:`n^{й}` кубит находится в :math:`|0\\rangle`, и переводит в :math:`|1\\rangle`, если :math:`n^{й}` кубит находится в состоянии :math:`|1\\rangle`, создавая таким образом состояние GHZ:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:123
msgid "|GHZ \\rangle = \\frac{|00...0\\rangle + |11...1\\rangle}{\\sqrt{2}} \\equiv \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}}\n\n"
msgstr "|GHZ \\rangle = \\frac{|00...0\\rangle + |11...1\\rangle}{\\sqrt{2}} \\equiv \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}}\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:125
msgid "The following function creates this “linear” circuit that can measure the GHZ state:"
msgstr "Следующая функция создает эту \"линейную\" цепь, которая может измерить состояние GHZ:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:209
msgid "Characterization, Part I"
msgstr "Характеризация, Часть I"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:212
msgid "Multiple Quantum Coherence (MQC)"
msgstr "Множественная квантовая когерентность (МКК)"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:214
msgid "Multiple Quantum Coherence (MQC) works by taking the preliminary preparation of an :math:`n` qubit GHZ State, and rotating each of the qubit states around the z axis by a phase :math:`\\phi`. After that, we apply a X gate, i.e., a :math:`\\pi` pulse around the x axis. Then, we apply the inverse of the operations we originally applied to get the GHZ state. In an ideal situation the final state is :math:`|\\psi \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + e^{i n \\phi}|1 \\rangle ^{\\otimes n}}{\\sqrt{2}}`. We can ideally observe the phase collected by projecting :math:`|\\psi \\rangle` onto the state :math:`|0 \\rangle ^{\\otimes n}`. This technique is reminiscent of an echo sequence, and has been shown to substantially improve the fidelity during readout."
msgstr "Множественная квантовая когерентность (МКК, англ. Multiple Quantum Coherence, MQC) работает путем предварительной подготовки :math:`n`-кубитного состояния GHZ и поворота состояния каждого кубита вокруг оси z на фазу :math:`\\phi`. После этого мы применяем вентиль X, т.е. :math:`\\pi` импульс вокруг оси x. Затем мы применяем обратные операции, чтобы получить состояние GHZ. В идеальной ситуации конечное состояние :math:`|\\psi \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + e^{i n \\phi}|1 \\rangle ^{\\otimes n}}{\\sqrt{2}}`. В идеале мы можем наблюдать собранную фазу, проецируя :math:`|\\psi \\rangle` на состояние :math:`|0 \\rangle ^{\\otimes n}`. Эта техника напоминает спин-эхо последовательность, и было показано, что она значительно улучшает точность во время считывания."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:217
msgid "The function below creates a linear MQC circuit. As with every circuit from here on, you can change the ``full_measurement`` argument to toggle between full measurement of all qubits or measurement of only the control qubit. Full measurement yields the most accurate results, but for more than 7 qubits, it is recommended to set it to false, and observe only the oscillations between the ``'0'`` and ``'1'`` states."
msgstr "Приведенная ниже функция создает линейную схему MQC. Как и в любой другой цепи, вы можете изменить аргумент ``full_measurement`` для переключения между измерением всех кубитов или измерением только контрольного кубита. Полное измерение дает наиболее точные результаты, но для более чем 7 кубитов рекомендуется установить значение false и наблюдать только колебания между состояниями ``'0'`` и ``'1'``."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:299
msgid "After running experiments on this MQC circuit, we can pick a state to observe oscillations as we sweep :math:`\\phi` from :math:`0` to :math:`2 \\pi`. Our signal in theory should follow :math:`S(\\phi) = \\frac{1}{2}(1+\\cos(n \\phi))`. We then perform a Discrete Fourier Transform (DFT: :math:`I_{v}=(1/N)|\\sum_{\\phi}e^{iv\\phi}S(\\phi)`) to extract the Fidelity of the state, defined by the bounds :math:`2\\sqrt{I_{n}} \\leq F \\leq \\sqrt{I_{0}/2}+ \\sqrt{I_{n}}`; if desired, an actual value for the fidelity can be obtained: :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1})+\\sqrt{I_{n}})` (arXiv:1905.05720)."
msgstr "После проведения экспериментов с этой схемой MQC, мы можем выбрать состояние для наблюдения колебаний поскольку :math:`\\phi` меняется от :math:`0` до :math:`2 \\pi`. Теоретически наш сигнал должен иметь вид :math:`S(\\phi) = \\frac{1}{2}(1+\\cos(n \\phi))`. Затем мы выполняем дискретное преобразование Фурье (ДПФ: :math:`I_{v}=(1/N)|\\sum_{\\phi}e^{iv\\phi}S(\\phi)`), чтобы извлечь точность состояния, лежащую в пределах :math:`2\\sqrt{I_{n}} \\leq F \\leq \\sqrt{I_{0}/2}+ \\sqrt{I_{n}}`; при желании можно получить фактическое значение точности: :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1})+\\sqrt{I_{n}})` (arXiv:1905.05720)."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:312
msgid "Parity Oscillations"
msgstr "Осцилляции четности"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:314
msgid "The next method we use to characterize the GHZ state is parity oscillations. After preparing a GHZ state, we apply a combination of rotations about the x and y axes to create various superposition states as a function of :math:`\\phi`: :math:`U(\\phi) = \\otimes_{j}^{N} e^{i\\frac{\\pi}{4}(\\cos(\\phi)\\sigma_{x}^{j}+\\sin(\\phi)\\sigma_{y}^{j})}`. We then measure the expectation value :math:`\\langle \\otimes_{j}^{N} \\sigma_{z}^{j} \\rangle_{\\phi}` as a function of :math:`\\phi`, which in theory should lead to parity oscillations between 1 and -1."
msgstr "Следующий метод, который мы используем для характеристики состояния GHZ, — это осцилляции четности. После подготовки GHZ состояния, мы используем комбинацию вращений вокруг осей x и y для создания различных суперпозиционных состояний в зависимости от :math:`\\phi`: :math:`U(\\phi) = \\otimes_{j}^{N} e^{i\\frac{\\pi}{4}(\\cos(\\phi)\\sigma_{x}^{j}+\\sin(\\phi)\\sigma_{y}^{j})}`. Затем мы измеряем матожидание :math:`\\langle \\otimes_{j}^{N} \\sigma_{z}^{j} \\rangle_{\\phi}` как функцию :math:`\\phi`, что в теории должно привести к осцилляциям четности между 1 и -1."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:317
msgid "The following function generates a circuit which is the Parity Oscillation equivalent of the MQC circuit given above"
msgstr "Следующая функция генерирует схему, которая является эквивалентом схемы MQC, приведенной выше, по отношению к осцилляции четности"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:366
msgid "We can obtain fidelity for parity oscillations :math:`S_{\\phi}` from :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1}+C)`, where :math:`C`, the coherence is defined as :math:`2\\sqrt{I_{n}}`, following the same convention for the DFT as with the MQC method."
msgstr "Мы можем получить точность для осцилляций четности :math:`S_{\\phi}` из :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1}+C)`, где :math:`C` — когерентность, которая определяется как :math:`2\\sqrt{I_{n}}`, следуя тому же определению для DFT, что и в методе MQC."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:378
msgid "Tomography"
msgstr "Томография"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:380
msgid "Tomography measures the density matrix by producing many nominally identical states and measuring the state instances in different bases. The ideal result of a GHZ state is four equal density matrix elements at the 4 corners of the tensor-product basis, with all other elements vanishing. Although the fidelity can be readily calculated by this method, the method is slow (requires exponential number of measurements in n), and takes prohibitively long times if n is larger than 7 or so. Nevertheless, we will show below how to perform this method as it is relevant for small numbers of qubits."
msgstr "Томография измеряет матрицу плотности путем создания множества номинально идентичных состояний и измерения экземпляров состояний в различных базисах. Идеальным результатом состояния GHZ являются четыре одинаковых элемента матрицы плотности в четырех углах базиса тензорного произведения и отсутствие всех остальных. Хотя точность можно легко вычислить этим методом, этот метод является довольно медленным (требует экспоненциального числа измерений в n) и требует непомерно много времени, если n больше 7 или около того. Тем не менее, ниже мы покажем, как его выполнить, поскольку он актуален для небольшого числа кубитов."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:393
msgid "Parallelizing circuits"
msgstr "Распараллеливание схем"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:395
msgid "The above “linear” circuits are good to perform simulations, but what do we do when we use real devices, where the system can have an arbitrary topology and various errors? We are specifically targeting real hardware here, not just Aer simulation. One technique to reduce real-hardware effects is to parallelize the CNOT gates and thus create a shorter-depth circuit. This can be hugely beneficial efficiency wise, and fidelity wise. The class ``BConfig`` from the module ``parallelize`` does exactly this."
msgstr "Приведенные выше “линейные” цепи хороши для проведения симуляций, но что делать, если мы используем реальные устройства, в которых система может иметь произвольную топологию и различные ошибки? Здесь мы ориентируемся именно на реальное оборудование, а не просто на симуляции Aer. Одним из методов уменьшения влияния реального оборудования является распараллеливание операций CNOT и создание таким образом схемы меньшей глубины. Это может принести огромную пользу как в плане эффективности, так и в плане достоверности. Класс ``BConfig`` из модуля ``parallelize`` делает именно это."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:398
msgid "First we must configure the optimal backend we want to use. We will consider a simulation backend, ``'ibmq_qasm_simulator'``, disguised as a real device, ``'ibmq_16_melbourne'`` by using a the mock backend ``'FakeMelbourne'``"
msgstr "Сначала мы должны настроить оптимальный бэкенд, который мы хотим использовать. Мы рассмотрим бэкенд-симулятор, ``'ibmq_qasm_simulator'``, замаскированный под реальное устройство ``'ibmq_16_melbourne'``, с помощью имитации ``'FakeMelbourne'``"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:422
msgid "Using the ``noise`` module, we can now define a noise model from ``'ibmq_16_melbourne'`` to “assign” to ``'ibmq_qasm_simulator'``."
msgstr "Теперь, используя модуль ``noise``, мы можем определить модель шума из ``'ibmq_16_melbourne'`` для \"присвоения\" в ``'ibmq_qasm_simulator'``."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:445
msgid "And there we have it. From now on, in the tutorial, when using a real device, not a simulation, just take out every mention and assignment of ``noise_model`` and ``coupling_map``, and assign the real device to ``backend``. The simulator used from now on is no substitute for running a real device."
msgstr "Вот и все. С этого момента в учебнике при использовании реального устройства, а не симулятора, просто уберите все упоминания и указания на ``noise_model`` и ``coupling_map``, и присвойте ``backend`` реальное устройство. Используемый здесь и далее симулятор не заменит реального устройства."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:456
msgid "``BConfig`` lays the blueprint for creating parallelized circuits. Let us initialize an object taking in the real device we just defined, and name it ``protocirc``. All of our experiments will use it:"
msgstr "``BConfig`` закладывает основу для создания распараллеленных цепей. Давайте инициализируем объект, принимающий реальное устройство, которое мы только что определили, и назовем его ``protocirc``. Он будет использоваться во всех наших экспериментах:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:478
msgid "Error Mitigation"
msgstr "Уменьшение ошибок"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:480
msgid "Qiskit Ignis provides very accurate tools to take raw data and return calibrated data. This is done by getting the raw data, in the form of a vector :math:`v_{raw}` and getting a calibration matrix :math:`A`. The output is then the solution to the optimization problem: :math:`argmin_{v_{cal}} ||Av_{cal}-v_{raw}||^{2}`"
msgstr "Qiskit Ignis содержит очень точные инструменты для получения исходных данных и возврата откалиброванных данных. Это делается путем получения исходных данных в виде вектора :math:`v_{raw}` и получения калибровочной матрицы :math:`A`. На выходе получается решение задачи оптимизации: :math:`argmin_{v_{cal}} ||Av_{cal}-v_{raw}||^{2}`"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:492
msgid "Experiment Time"
msgstr "Приступим к эксперименту"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:495
msgid "Preliminary Steps"
msgstr "Предварительные шаги"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:497
msgid "The probabilities of measuring :math:`|0\\rangle ^{\\otimes n}` and :math:`|1\\rangle^{\\otimes n}` in the GHZ state are important in calculating fidelity. For this, we need to run the following test"
msgstr "При расчете достоверности важны вероятности измерения :math:`|0\\rangle ^{\\otimes n}` и :math:`|1\\rangle^{\\otimes n}` в состоянии GHZ. Вычислим их с помощью следующего теста"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:508
msgid "We begin by defining standard execution parameters:"
msgstr "Начнем с определения стандартных параметров процесса выполнения:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:936
msgid "Now with error mitigation:"
msgstr "Теперь с уменьшением ошибок:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1079
msgid "We will load these values in a dictionary for assessing fidelity later on:"
msgstr "Мы загрузим эти значения в словарь для последующей в дальнейшем оценки точности:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1101
msgid "Part 1 : MQC"
msgstr "Часть 1: MQC"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1103
msgid "We now retrieve a parallelized MQC circuit for the n qubit device"
msgstr "Теперь мы получим распараллеленную схему MQC для устройства из n кубитов"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1166
msgid "We now execute the MQC experiment:"
msgstr "Теперь мы проведем эксперимент MQC:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1213
msgid "Now we will plot the amount of counts measured for :math:`|0 \\rangle ^{\\otimes n}` as a function of phase. It is important to note that when using a parametrized circuit like the one here, the method ``get_counts()`` accepts an **index** and not a **circuit**. In any other type of experiment, ``get_counts()`` accepts a **circuit**."
msgstr "Теперь мы построим график количества отсчётов, измеренных для :math:`|0 \\rangle ^{\\otimes n}` как функцию фазы. Важно отметить, что при использовании параметризованной цепи, как здесь, метод ``get_counts()`` принимает **index**, а не **circuit**. В любом другом типе эксперимента метод ``get_counts()`` принимает **circuit**."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1244
msgid "Now we get started on error mitigation. We create an identical quantum register and use complete_meas_cal from Ignis, to create circuits for calibrated measurements to be executed, and a calibration matrix."
msgstr "Теперь мы приступаем к исправлению ошибок. Мы создаем идентичный квантовый регистр и используем complete_meas_cal из Ignis, чтобы создать цепи для проведения калибровочных измерений и калибровочную матрицу."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1314
msgid "Finally, we have our error mitigated results:"
msgstr "Наконец, мы получили результаты с исправлением ошибок:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1335
msgid "We can see how the error mitigated results yield a far greater fidelity than the raw data"
msgstr "Мы можем убедиться, что результаты, полученные с исправлением ошибок, дают гораздо большую точность, чем необработанные данные"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1470
msgid "We now plot the DFT and compare the heights of the peaks to give bounds for the fidelity"
msgstr "Теперь мы построим график DFT и сравним высоты пиков, чтобы получить границы для достоверности"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1481
msgid "Statistical bootstrapping has found that the error on these measurements is at most 1.5% (arXiv 1905.05720), so these result fall within error bounds, despite the fidelity being slightly higher than the upper bound, and show how error mitigation dramatically increases fidelity"
msgstr "Статистическая самозагрузка показала, что ошибка этих измерений составляет не более 1,5% (arXiv 1905.05720), поэтому эти результаты находятся в пределах погрешности, несмотря на то, что точность немного выше верхней границы, и показывают, как уменьшение ошибок значительно увеличивает точность"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1493
msgid "Part 2: Parity Oscillation"
msgstr "Часть 2: Осцилляции чётности"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1495
msgid "We now retrieve a parallelized Parity Oscillation circuit for the n qubit device, and run experiments in the same fashion as we did in MQC."
msgstr "Теперь мы получим распараллеленную цепь для осцилляции четности для устройства с n кубитами и проведем эксперименты таким же образом, как и в MQC."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1595
msgid "Now we construct the :math:`\\otimes _{j}^{N} \\sigma_z^{j}` matrix for instruction, although this is already taken into account in the following method, ``entanglement.analysis.composite_pauli_z_expvalue()``:"
msgstr "Создаем матрицу :math:`\\otimes _{j}^{N} \\sigma_z^{j}` для инструкции, хотя это уже учтено в методе ``entanglement.analysis.composite_pauli_z_expvalue()``:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1618
msgid "Now we want to make sure that our list of counts is correctly ordered so that it coincides with the states of the :math:`\\otimes _{j}^{N} \\sigma_z^{j}`, so that calculating :math:`\\langle \\otimes _{j}^{N} \\sigma_z^{j} \\rangle` will be as simple as taking the dot product of this ordered list with the diagonal of :math:`\\otimes _{j}^{N} \\sigma_z^{j}`. The ``composite_pauli_z_expvalue`` function does just that; it takes a circuit and appropriately orders the state vector counts. We can plot this dot product as a function of :math:`\\phi` to observe parity oscillations."
msgstr "Теперь мы хотим убедиться, что наш список отсчётов правильно упорядочен, чтобы он совпадал с состояниями :math:`\\otimes _{j}^{N} \\sigma_z^{j}`, так что вычисление :math:`\\langle \\otimes _{j}^{N} \\sigma_z^{j} \\rangle` будет так же просто, как взять скалярное произведение этого упорядоченного списка с диагональю :math:`\\otimes _{j}^{N} \\sigma_z^{j}`. Функция ``composite_pauli_z_expvalue`` делает именно это; она берет цепь и соответствующим образом упорядочивает отсчеты вектора состояния. Мы можем построить график этого скалярного произведения как функцию :math:`\\phi`, чтобы наблюдать осцилляции четности."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1669
msgid "Now for standard error mitigation:"
msgstr "Теперь для стандартного уменьшения ошибок:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1768
msgid "We can see how error mitigation dramatically improves our measurement (much more so in PO than in MQC). Let us quantify this using the same DFT method we used in MQC, and calculating the actual fidelities:"
msgstr "Мы видим, как подавление ошибок значительно улучшает наши измерения (гораздо сильнее в осцилляциях четности, чем в MQC). Давайте оценим это количественно, используя тот же метод DFT, который мы использовали в MQC, и вычисляя фактические достоверности:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1858
msgid "As we see, the raw fidelity is much lower than what is achieved with MQC, but the error mitigated result is about the same."
msgstr "Как мы видим, исходная достоверность намного ниже, чем та, что достигается с помощью MQC, но результат сглаживания ошибок примерно такой же."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1870
msgid "Part 3: Tomography"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1872
msgid "The first step in this experiment to just pass a simple GHZ state with *no* measurements. Also, the circuit cannot be transpiled; the ``transpiled`` argument in the ``getGHZChecker()`` method can be turned on and off as is shown"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1907
msgid "We now pass a simulated backend from ``Aer`` to get theoretical statevector counts"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1954
msgid "This following code runs tomography experiments on the circuit we defined first, which is then compared to the theoretical statevector to generate a density matrix"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2010
msgid "From here we can get the fidelity, although this method is not as fool proof as the one we will get to eventually:"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2031
msgid "…And now for error mitigation…"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2113
msgid "Now, using ``qiskit.visualization``, we can plot the raw density matrix, real, and imaginary parts being on separate plots,…"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2152
msgid "And also the error mitigated density matrix,…"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2191
msgid "The actual density matrices can be obtained using the ``fit()`` method. Once we have the density matrix, we can compute the fidelity, which is nothing but half the sum of the four corners of the density matrix; the following method helps us:"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2270
msgid "As we see, the raw fidelity is much lower than what is achieved with either MQC or Parity Oscillations, but the error mitigated result is about the same."
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2272
msgid "**A note on tomography**"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2274
msgid "Do not perform quantum tomography with >5 qubits"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2286
msgid "Conclusion"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2288
msgid "In conclusion, we see that without error mitigation, MQC is the superior method for characterizing the GHZ state. However, with error mitigation, all methods can, at least for a small number of qubits, achieve a much greater fidelity, and all near the same value. To get more accurate results, aside from using a real device, it is worth increasing the number of shots four to eight-fold. It may be worth comparing how the parallelized circuits used in this notebook perform fidelity-wise versus linearized circuits."
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2301
msgid "External collaborators"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2303
msgid "Rohith Karur"
msgstr ""

