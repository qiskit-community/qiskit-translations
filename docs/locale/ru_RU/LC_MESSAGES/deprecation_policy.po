msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-03 12:57+0000\n"
"PO-Revision-Date: 2023-11-03 14:50\n"
"Last-Translator: \n"
"Language: ru\n"
"Language-Team: Russian\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/deprecation_policy.po\n"
"X-Crowdin-File-ID: 9836\n"

#: ../../deprecation_policy.rst:3
msgid "Deprecation Policy"
msgstr "Политика устаревания"

#: ../../deprecation_policy.rst:5
msgid "Many users and other packages depend on different parts of Qiskit.  We must make sure that whenever we make changes to the code, we give users ample time to adjust without breaking code that they have already written."
msgstr "Многие пользовательские и прочие пакеты зависят от разных компонентов Qiskit. Необходимо сделать так, чтобы при любом обновлении пользователям хватало времени для корректировки своего кода, не нарушая его работу полностью."

#: ../../deprecation_policy.rst:9
msgid "Most importantly: *do not* change any interface that is public-facing unless we absolutely have to.  Adding things is ok, taking things away is annoying for users but can be handled reasonably with plenty notice, but changing behavior generally means users cannot write code that will work with two subsequent versions of Qiskit, which is not acceptable."
msgstr "Самое важное: любой общедоступный интерфейс лучше *не менять*, если без этого можно обойтись. Добавление каких-то деталей воспринимается в целом нормально, их удаление обычно раздражает пользователей, хотя и может быть отчасти сбалансировано грамотными уведомлениями, однако нестабильное поведение означает, что пользовательский код не сможет корректно работать в соседних версиях Qiskit и это неприемлемо."

#: ../../deprecation_policy.rst:15
msgid "Beware that users will often be using functions, classes and methods that we, the Qiskit developers, may consider internal or not widely used.  Do not make assumptions that \"this is buried, so nobody will be using it\"; if it is public, it is subject to the policy.  The only exceptions here are functions and modules that are explicitly internal, *i.e.* those whose names begin with a leading underscore (``_``)."
msgstr "Помните, что пользователи часто будут использовать функции, классы и методы, которые мы, разработчики Qiskit, можем считать внутренними или редко используемыми. Не делайте предположений об \"ископаемом, которое никто не будет его использовать\"; если что-то общедоступно, то на него распространяется эта же политика. Единственными исключениями будут функции и модули, которые точно являются внутренними, их названия начинаются с подчеркивания (``_``)."

#: ../../deprecation_policy.rst:22
msgid "The guiding principles are:"
msgstr "Основными принципами являются:"

#: ../../deprecation_policy.rst:24
msgid "we must not remove or change code without active warnings for least three months or two complete version cycles;"
msgstr "мы не должны удалять или изменять код без активных предупреждений в течение трех месяцев или двух полных версий;"

#: ../../deprecation_policy.rst:27
msgid "there must always be a way to achieve valid goals that does not issue any warnings;"
msgstr "всегда должен существовать способ добиться нужного результата без всплывающих предупреждений;"

#: ../../deprecation_policy.rst:30
msgid "never assume that a function that isn't explicitly internal isn't in use;"
msgstr "не стоит думать, что функция, которая не является очевидно внутренней, не будет использована;"

#: ../../deprecation_policy.rst:32
msgid "all deprecations, changes and removals are considered API changes, and can only occur in minor releases not patch releases, per the :ref:`stable branch policy <stable_branch_policy>`."
msgstr "все устаревания, изменения и удаления считаются изменениями API, и может произойти только в небольших релизах, а не в патчах, в соответствии со :ref:`stable branch policy <stable_branch_policy>`."

#: ../../deprecation_policy.rst:39
msgid "Removing a feature"
msgstr "Удаление элемента"

#: ../../deprecation_policy.rst:41
msgid "When removing a feature (for example a class, function or function parameter), we will follow this procedure:"
msgstr "При удалении какой-либо части (например, класса, функции или ее параметр) выполните следующие действия:"

#: ../../deprecation_policy.rst:44
msgid "The alternative path must be in place for one minor version before any warnings are issued.  For example, if we want to replace the function ``foo()`` with ``bar()``, we must make at least one release with both functions before issuing any warnings within ``foo()``.  You may issue ``PendingDeprecationWarning``\\ s from the old paths immediately."
msgstr "Альтернативный способ должен появиться как минимум в одной младшей версии еще до добавления каких-либо предупреждений. Например, при замене функции ``foo()`` на ``bar()`` нужно сделать хотя бы один релиз с обеими функциями без предупреждений для ``foo()``. Вы можете сразу отметить ``PendingDeprecationWarning`` для старого пути."

#: ../../deprecation_policy.rst:50
msgid "*Reason*: we need to give people time to swap over without breaking their code as soon as they upgrade."
msgstr "*Причина*: нужно дать пользователям время для замены, не нарушая их код сразу же после обновления."

#: ../../deprecation_policy.rst:53
msgid "After the alternative path has been in place for at least one minor version, :ref:`issue the deprecation warnings <issuing-deprecation-warnings>`.  Add a release note with a ``deprecations`` section listing all deprecated paths, their alternatives, and the reason for deprecation.  :ref:`Update the tests to test the warnings <testing-deprecated-functionality>`."
msgstr "После того, как альтернативный способ предложен как минимум в одной младшей версии, :ref:`добавляется предупреждение об устаревании <issuing-deprecation-warnings>`. Добавьте примечание в разделе ``deprecations``, где перечислены все устаревшие способы, их альтернативы и причина устаревания.  :ref:`Обновите тесты для проверки предупреждений <testing-deprecated-functionality>`."

#: ../../deprecation_policy.rst:59
msgid "*Reason*: removals must be highly visible for at least one version, to minimize the surprise to users when they actually go."
msgstr "*Причина*: удаление должно быть заметно хотя бы в одной версии, чтобы пользователи не удивлялись, что этот элемент исчез."

#: ../../deprecation_policy.rst:62
msgid "Set a removal date for the old feature, and remove it (and the warnings) when reached.  This must be at least three months after the version with the warnings was first released, and cannot be the minor version immediately after the warnings.  Add an ``upgrade`` release note that lists all the removals.  For example, if the alternative path was provided in ``0.19.0`` and the warnings were added in ``0.20.0``, the earliest version for removal is ``0.22.0``, even if ``0.21.0`` was released more than three months after ``0.20.0``."
msgstr "Установите дату удаления старого элемента и уберите его (как и предупреждение) в этот день. Это должно быть произойти не ранее, чем через три месяца после выпуска первой версии с предупреждениями, и минимум через одну младшую версию. Добавьте примечание к выпуску ``upgrade``, в котором перечислены все удаления. Например, если альтернативный способ был предоставлен в ``0.19.0``, а предупреждения были добавлены в ``0.20.0``, самой ранней версией для удаления является ``0.22.0``, даже если ``0.21.0`` выпускается через три месяца после ``0.20.0`` или позднее."

#: ../../deprecation_policy.rst:73
msgid "These are *minimum* requirements.  For removal of significant or core features, give users at least an extra minor version if not longer."
msgstr "Это *минимальные* требования. При удалении важных или основных деталей лучше растянуть процесс еще на одну или несколько дополнительных младших версий."

#: ../../deprecation_policy.rst:76
msgid "*Reason*: there needs to be time for users to see these messages, and to give them time to adjust.  Not all users will update their version of Qiskit immediately, and some may skip minor versions."
msgstr "*Причина*: пользователям нужно время, чтобы увидеть эти сообщения и изменить код. Не все пользователи сразу обновляют Qiskit, некоторые могут пропускать младшие версии."

#: ../../deprecation_policy.rst:80
msgid "When a feature is marked as deprecated it is slated for removal, but users should still be able to rely on it to work correctly.  We consider a feature marked \"deprecated\" as frozen; we commit to maintaining it with critical bug fixes until it is removed, but we won't merge new functionality to it."
msgstr "Если элемент отмечен как устаревший, он будет удален позднее, но пока еще пользователи могут рассчитывать на его корректную работу. \"Устаревший\" элемент считается замороженным; его поддержка с необходимыми исправлениями осуществляется вплоть до момента удаления, но он не участвует в дальнейшем развитии кода."

#: ../../deprecation_policy.rst:87
msgid "Changing behavior"
msgstr "Изменение поведения"

#: ../../deprecation_policy.rst:89
msgid "Changing behavior without a removal is particularly difficult to manage, because we need to have both options available for two versions, and be able to issue warnings.  For example, changing the type of the return value from a function will almost invariably involve making an API break, which is frustrating for users and makes it difficult for them to use Qiskit."
msgstr "Сложнее всего изменять поведение без удаления, так как при этом должны быть сразу два варианта для различных версий и соответствующие предупреждения. Например, изменение типа значения, возвращаемого функцией, почти всегда приводит к нарушению работы API, что раздражает пользователей и затрудняет использование Qiskit."

#: ../../deprecation_policy.rst:95
msgid "The best solution here is often to make a new function, and then use :ref:`the procedures for removal <removing-features>` above."
msgstr "Наилучшим решением будет создание нового элемента и последующее :ref:`удаление <removing-features>` старого, описанное выше."

#: ../../deprecation_policy.rst:98
msgid "If you absolutely must change the behavior of existing code (other than fixing bugs), you will need to use your best judgment to apply the guiding principles at the top of this document.  The most appropriate warning for behavioral changes is usually ``FutureWarning``.  Some possibilities for how to effect a change:"
msgstr "Если же необходимо именно изменить поведение существующего кода (и речь не об исправлении ошибок), нужно обязательно следовать приницпам, упомянутым в самом начале документа. Наиболее подходящим предупреждением для этого обычно является ``FutureWarning``. Изменения можно сделать так:"

#: ../../deprecation_policy.rst:104
msgid "If you are changing the default behavior of a function, consider adding a keyword argument to select between old and new behaviors.  When it comes time, you can issue a ``FutureWarning`` if the keyword argument is not given (*e.g.* if it is ``None``), saying that the new value will soon become the default.  You will need to go through the normal deprecation period for removing this keyword argument after you have made the behavior change.  This will take at least six months to go through both cycles."
msgstr "Если вы меняете поведение функции по умолчанию, попробуйте добавить именованный аргумент для выбора между старым и новым поведением. В нужный момент добавляете ``FutureWarning`` при отсутствии значения аргумента (или ``None``) с упоминанием того, что новое значение скоро станет значением по умолчанию. После изменения поведения запускается обычный цикл устаревания для удаления этого аргумента. Это потребует минимум шесть месяцев на оба цикла."

#: ../../deprecation_policy.rst:112
msgid "If you need to change the return type of a function, consider adding a new function that returns the new type, and then follow the procedures for deprecating the old function."
msgstr "Если нужно изменить тип, который возвращает функция, добавьте новую функцию, возвращающую новый тип, а затем следуйте алгоритму устаревания для старой функции."

#: ../../deprecation_policy.rst:116
msgid "If you need to accept a new input that you cannot distinguish from an existing possibility because of its type, consider letting it be passed by a different keyword argument, or add a second function that only accepts the new form."
msgstr "Если вам нужно добавить входные данные того же типа, что и уже имеющиеся, попробуйте создать дополнительный именованный аргумент или функцию для новых данных."

#: ../../deprecation_policy.rst:124
msgid "Issuing deprecation warnings"
msgstr "Выпуск предупреждений о устаревании"

#: ../../deprecation_policy.rst:126
msgid "The proper way to raise a deprecation warning is to use the decorators ``@deprecate_arg`` and ``@deprecate_func`` from ``qiskit.utils.deprecation``. These will generate a standardized message and and add the deprecation to that function's docstring so that it shows up in the docs."
msgstr "Правильным способом предупреждения об устаревании является использование декораторов ` `@deprecate_arg` ` и ` ` `@deprecate_func` ` из ` `qiskit.utils.deprecation ` `. Они генерируют стандартизованные сообщения и добавляют устаревшие в docstring этой функции так, чтобы она была показана в docs."

#: ../../deprecation_policy.rst:142
msgid "Usually, you should set ``additional_msg: str `` with the format ``\"Instead, use ...\"`` so that people know how to migrate. Read those functions' docstrings for additional arguments like ``pending: bool`` and ``predicate``."
msgstr "Обычно следует задать ` ` additional_msg: str ` ` с форматом ` ` \"Вместо этого используйте ...\" ` ` чтобы люди знали, как перенастроить. Прочитай эти функции ' docstrings for дополнительных аргументов как ` ` pending: bool ` ` и ` ` predicate ` `."

#: ../../deprecation_policy.rst:146
msgid "If you are deprecating outside the main Qiskit repo, set ``package_name`` to match your package. Alternatively, if you prefer to use your own decorator helpers, then have them call ``add_deprecation_to_docstring`` from ``qiskit.utils.deprecation``."
msgstr ""

#: ../../deprecation_policy.rst:150
msgid "If ``@deprecate_func`` and ``@deprecate_arg`` cannot handle your use case, consider improving them. Otherwise, you can directly call the ``warn`` function from the `warnings module in the Python standard library <https://docs.python.org/3/library/warnings.html>`__, using the category ``DeprecationWarning``.  For example:"
msgstr ""

#: ../../deprecation_policy.rst:170
msgid "Make sure you include the version of the package that introduced the deprecation warning (so maintainers can easily see when it is valid to remove it), and what the alternative path is."
msgstr "Убедитесь, что вы упомянули версию пакета с предупреждением об устаревании (чтобы поддержка знала, когда следует удалить) и альтернативный способ."

#: ../../deprecation_policy.rst:174
msgid "Take note of the ``stacklevel`` argument.  This controls which function is accused of being deprecated.  Setting ``stacklevel=1`` (the default) means the warning will blame the ``warn`` function itself, while ``stacklevel=2`` will correctly blame the containing function.  It is unusual to set this to anything other than ``2``, but can be useful if you use a helper function to issue the same warning in multiple places."
msgstr "Обратите внимание на аргумент ``stacklevel``. Он отвечает за то, какая функция будет упомянута как устаревшая. Значение ``stacklevel=1`` (по умолчанию) приведет к тому, что предупреждение будет отсылать к самой функцию ``warn``, а ``stacklevel=2`` — к ее содержимому. Обычно аргументу присваивают значение ``2``, но другой вариант тоже может быть полезен при использовании вспомогательной функции для выпуска одного и того же предупреждения в нескольких местах."

#: ../../deprecation_policy.rst:185
msgid "Testing deprecated functionality"
msgstr "Тестирование устаревших элементов"

#: ../../deprecation_policy.rst:187
msgid "Whenever you add deprecation warnings, you will need to update tests involving the functionality.  The test suite should fail otherwise, because of the new warnings.  We must continue to test deprecated functionality throughout the deprecation period, to ensure that it still works."
msgstr "При добавлении предупреждений об устаревании необходимо обновить тесты, связанные с функциональностью. Иначе тестовый набор будет работать некорректно из-за новых предупреждений. Тестировать устаревшие элементы придется на протяжении всего периода устаревания для проверки их работоспособности."

#: ../../deprecation_policy.rst:192
msgid "To update the tests, you need to wrap each call of deprecated behavior in its own assertion block.  For subclasses of ``unittest.TestCase`` (which all Qiskit test cases are), this is done by:"
msgstr "Для обновления тестов нужно обернуть каждый вызов устаревшего поведения в собственный блок утверждений. Для подклассов ``unittest.TestCase`` (которые находятся во всех тестированиях Qiskit), это делается так:"

#: ../../deprecation_policy.rst:206
msgid "Documenting deprecations and breaking changes"
msgstr "Документация о устаревании и важных изменениях"

#: ../../deprecation_policy.rst:208
msgid "It is important to warn the user when your breaking changes are coming."
msgstr ""

#: ../../deprecation_policy.rst:210
msgid "``@deprecate_arg`` and ``@deprecate_func`` will automatically add the deprecation to the docstring for the function so that it shows up in docs."
msgstr ""

#: ../../deprecation_policy.rst:213
msgid "If you are not using those decorators, you should directly add a `Sphinx deprecated directive <https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-deprecated>`__ ::"
msgstr ""

#: ../../deprecation_policy.rst:229
msgid "def deprecated_function():"
msgstr ""

#: ../../deprecation_policy.rst:219
msgid "\"\"\" Short description of the deprecated function."
msgstr ""

#: ../../deprecation_policy.rst:222
msgid "The function qiskit.deprecated_function() is deprecated since Qiskit Terra 0.20.0, and will be removed 3 months or more later. Instead, you should use qiskit.other_function()."
msgstr ""

#: ../../deprecation_policy.rst:227
msgid "<rest of the docstring> \"\"\" # ... the rest of the function ..."
msgstr ""

#: ../../deprecation_policy.rst:231
msgid "You should also document the deprecation in the changelog by using Reno. Explain the deprecation and how to migrate."
msgstr ""

#: ../../deprecation_policy.rst:234
msgid "In particular situations where a deprecation or change might be a major disruptor for users, a *migration guide* might be needed. Once the migration guide is written and published, deprecation messages and documentation should link to it (use the ``additional_msg: str`` argument for ``@deprecate_arg`` and ``@deprecate_func``)."
msgstr ""

