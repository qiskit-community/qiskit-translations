msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-07 17:08+0000\n"
"PO-Revision-Date: 2021-04-07 18:20\n"
"Last-Translator: \n"
"Language-Team: Vietnamese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: vi\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/04_vqe_advanced.po\n"
"X-Crowdin-File-ID: 9450\n"
"Language: vi_VN\n"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:10
msgid "This page was generated from `tutorials/algorithms/04_vqe_advanced.ipynb`__."
msgstr "Trang này được tạo ra từ `tutorials/algorithms/02_vqe_convergence.ipynb`__."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/04_vqe_advanced.ipynb>`_."
msgstr "Chạy tương tác trong `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/04_vqe_advanced.ipynb>`_."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:9
msgid "Advanced VQE usage"
msgstr "Sử dụng VQE nâng cao"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:11
msgid "There exist several parameters for configuring and using more advanced `VQE <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.html>`__ capabilities. This tutorial will cover the parameters such as ``initial_point``, ``expectation`` and ``gradient``."
msgstr "Có một số tham số để định cấu hình và sử dụng nâng cao hơn khả năng của `VQE <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.html>`__. Hướng dẫn này sẽ bao gồm các thông số như ``initial_point``, ``expectation`` và ``gradient``."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:13
msgid "It will also cover advanced simulator use such as using Aer with the Matrix Product State method."
msgstr "Nó cũng sẽ bao gồm việc sử dụng trình mô phỏng nâng cao như sử dụng Aer với phương pháp State Product State."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:39
msgid "Here we will use the same operator as used in the other VQE algorithms tutorials."
msgstr "Ở đây chúng tôi sẽ sử dụng toán tử tương tự như đã sử dụng trong các hướng dẫn thuật toán VQE khác."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:65
msgid "Initial point"
msgstr "Ðiểm đầu tiên"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:67
msgid "The ``initial_point`` parameter allows the optimization to begin at the given point, where the point is a list of parameters that will configure the variational form. By default the initial point is ``None`` which means that VQE will choose one. The choice in in this case is if the supplied variational form has a preferred point, based on the initial state provided to it, then this will be chosen, otherwise a random initial point that fits with any bounds the variational has will be chosen. If an initial point is supplied it will take priority though and be used - note though it must match in length to the number of parameters in the variational form circuit."
msgstr "Tham số ``initial_point`` cho phép quá trình tối ưu hóa bắt đầu tại điểm đã cho, trong đó điểm là danh sách các tham số sẽ điều chỉnh dạng biến phân. Theo mặc định, điểm ban đầu là ``None`` có nghĩa là VQE sẽ chọn một điểm. Sự lựa chọn trong trường hợp này là nếu dạng biến phân được cung cấp có điểm ưu tiên, dựa trên trạng thái ban đầu được cung cấp cho nó, thì điểm này sẽ được chọn, nếu không thì điểm ban đầu ngẫu nhiên phù hợp với bất kỳ giới hạn nào biến phân có sẽ được chọn. Nếu một điểm ban đầu được cung cấp, nó sẽ được ưu tiên và được sử dụng - lưu ý rằng nó phải khớp về độ dài với số lượng tham số trong mạch biến phân."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:70
msgid "Why to use a initial point? One reason would be if you have guess a reasonable starting point for the problem or perhaps know have information from a prior experiment."
msgstr "Tại sao phải sử dụng một điểm ban đầu? Lý do là nếu bạn đoán được điểm bắt đầu hợp lý cho vấn đề hoặc có thể bạn biết có thông tin từ một thử nghiệm trước đó."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:72
msgid "To demonstrate the use let’s first simply repeat the first working example from the `algorithms introduction <01_algorithms_introduction.ipynb#A-complete-working-example>`__ tutorial to get a solution’s optimal point."
msgstr "Để chứng minh việc sử dụng, trước tiên chúng ta hãy lặp lại ví dụ làm việc đầu tiên từ hướng dẫn `algorithms introduction <01_algorithms_introduction.ipynb#A-complete-working-example>` để có được điểm tối ưu của giải pháp."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:156
msgid "Now we can take the ``optimal_point`` from the above result and use it as the ``initial_point`` here."
msgstr "Bây giờ chúng ta có thể lấy ``optimal_point`` từ kết quả trên và sử dụng nó làm ``initial_point`` ở đây."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:238
msgid "Here we see that result was arrived at much more quickly where ``optimizer_evals`` is 10 versus 72 when it started from a random value when the initial point was not supplied (default of None)."
msgstr "Ở đây, chúng ta thấy rằng kết quả đến nhanh hơn nhiều khi ``optimizer_evals`` là 10 so với 72 khi nó bắt đầu từ một giá trị ngẫu nhiên khi điểm ban đầu không được cho trước (mặc định là None)."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:240
msgid "Where this becomes useful for examples where we the solution to one problem can be used to for a guess for the solution to a very close similar problem. Chemistry is very good example where we change the inter-atomic distance(s) of molecule to plot a dissociation profile. When the distance changes are small we expect the solution to still be nearby the prior one. One technique is to simply use the optimal point from one solution as the starting point for the next step. Now more complex techniques are possible that do some extrapolation to compute an initial position based on prior solution(s) rather than directly use the prior solution. The Qiskit Chemistry `sampling_potential_energy_surfaces <../chemistry/05_Sampling_potential_energy_surfaces.ipynb#Extrapolation>`__ tutorial shows such bootstrapping and extrapolation."
msgstr "Khi điều này trở nên hữu ích cho các ví dụ mà chúng ta giải pháp cho một vấn đề có thể được sử dụng để đoán giải pháp cho một vấn đề tương tự rất gần. Hóa học là một ví dụ rất tốt khi chúng ta thay đổi khoảng cách giữa các nguyên tử (s) của phân tử để vẽ một cấu hình phân ly. Khi những thay đổi về khoảng cách nhỏ chúng ta mong đợi giải pháp vẫn ở gần đó. Một kỹ thuật là chỉ cần sử dụng điểm tối ưu từ một giải pháp là điểm bắt đầu cho bước tiếp theo. Bây giờ các kỹ thuật phức tạp hơn là có thể thực hiện một số phép ngoại suy để tính toán một vị trí ban đầu dựa trên các giải pháp trước đó thay vì sử dụng trực tiếp các giải pháp trước đó. Hướng dẫn Qiskit Chemistry `sampling_potential_energy_surfaces <../chemistry/05_Sampling_potential_energy_surfaces.ipynb#Extrapolation>`__ chỉ ra bootstrapping và sự mở rộng."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:253
msgid "Expectation"
msgstr "Kỳ vọng"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:255
msgid "The energy of the Hamiltonian operator that VQE is working on is the expectation value when evaluated with the parameterized variational form. To compute the expectation value VQE uses an instance of an `expectation <https://qiskit.org/documentation/apidoc/qiskit.aqua.operators.expectations.html>`__ object. Such an instance may be supplied via the ``expectation`` parameter, or in the default case, where it has a value of ``None``, VQE will use the `ExpectationFactory <https://qiskit.org/documentation/stubs/qiskit.aqua.operators.expectations.ExpectationFactory.html>`__ to create itself a suitable instance based on the supplied backend."
msgstr "Năng lượng của toán tử Hamilton mà VQE đang làm việc là giá trị kỳ vọng khi được đánh giá với dạng biến phân tham số hóa. Để tính toán giá trị kỳ vọng, VQE sử dụng một instanace của đối tượng `expectation <https://qiskit.org/documentation/apidoc/qiskit.aqua.operators.expectations.html>`__. Một instance như vậy có thể được cung cấp thông qua tham số ``expectation`` hoặc trong trường hợp mặc định sẽ mang giá trị ``None``, VQE sẽ sử dụng `ExpectationFactory <https://qiskit.org/documentation/stubs/qiskit.aqua.operators.expectations.ExpectationFactory.html>__ để tự tạo một instance phù hợp dựa trên backend được cung cấp."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:258
msgid "For most cases letting VQE create a suitable instance is sufficient. However the Qiskit Aer qasm_simulator supports a snapshot instruction that can be used in conjunction with the operator expectation computation. If used then the outcome is ideal, i.e. like the statevector simulator, and has no shot noise. Since people normally choose the qasm_simulator to have shot noise (sampling noise), and be more like a real-device outcome, VQE has an ``include_custom`` flag that is passed on to the ExpectationFactory. When using Aer qasm simulator, and this is set ``True``, the factory will return ``AerPauliExpectation`` which uses the snapshot instruction, when ``False``, default, then the regular ``PauliExpectation`` is returned."
msgstr "Đối với hầu hết các trường hợp, để VQE tạo một instance phù hợp là đủ. Tuy nhiên, Qiskit Aer qasm_simulator hỗ trợ một lệnh chụp nhanh có thể được sử dụng cùng với tính toán kỳ vọng của phép toán. Nếu lệnh chụp nhanh được sử dụng thì kết quả là lý tưởng, tức là giống như trình mô phỏng trạng thái và không có nhiễu trong quá trình lấy mẫu. Vì mọi người thường chọn qasm_simulator để có nhiễu trong việc lấy mẫu và giống với kết quả thực tế, VQE có cờ ``include_custom`` được chuyển đến ExpectationFactory. Khi sử dụng Aer qasm simulator và và giá trị của cờ ``include_custom`` là ``True``, factory sẽ trả về ``AerPauliExpectation`` sử dụng lệnh chụp nhanh, khi cờ ``include_custom`` mang giá trị mặc định là ``False``, kết quả trả về là ``PauliExpectation`` thông thường."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:261
msgid "The following example shows ``include_custom=True`` where the outcome matches the statevector simulator. In fact it can be better/faster to do this than use the statevector_simulator directly. This is because in the latter case when the Hamiltonian is a sum of Paulis it must be converted to matrix form, and this is avoided when using the snapshot instruction done when include_custom is True."
msgstr "Ví dụ sau cho thấy ``include_custom = True`` trong đó kết quả khớp với trình mô phỏng của statevector. Trên thực tế, làm điều này có thể tốt hơn / nhanh hơn so với sử dụng trực tiếp statevector_simulator. Nguyên nhân là do trong trường hợp sau đây, khi toán tử Hamilton là một tổng của các phép đo Pauli, nó phải được chuyển đổi thành dạng ma trận và điều này được bỏ qua khi lệnh chụp nhanh được thực hiện và giá trị của include_custom là True."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:341
msgid "In case you have doubts here is the qasm_simulator again but include_custom has been left to default to False. The optimization ended abruptly, presumably due to the shot noise confusing the SLSQP optimizer. The optimal value can be seen to be wrong too, i.e. -1.098 versus the correct -1.857."
msgstr "Trong trường hợp bạn nghi ngờ, vẫn là qasm_simulator nhưng giá trị cờ include_custom đã được để mặc định thành False. Quá trình tối ưu hóa kết thúc đột ngột, có lẽ là do nhiễu trong lúc đo đạc gây nhầm lẫn cho trình tối ưu hóa SLSQP. Giá trị tối ưu cũng có thể bị sai, tức là -1,098 so với kết quả đúng là -1,857."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:419
msgid "Changing the optimizer to SPSA, which is designed to work in noisy environments, gets us a better result. Though the noise has affected the outcome so it’s not as accurate."
msgstr "Thay đổi trình tối ưu hóa thành SPSA, được thiết kế để hoạt động trong môi trường nhiễu giúp chúng ta có được kết quả tốt hơn. Mặc dù nhiễu đã ảnh hưởng đến kết quả làm nó không chính xác."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:497
msgid "As mentioned above, an expectation object can be explicitly given (so the internal ``ExpectationFactory`` and include_custom are never used/needed. Below we create an ``AerPauliExpectation`` and pass this to VQE. We can see the result matches that above where we set include_custom to True and let VQE create its own expectation object."
msgstr "Như đã đề cập ở trên, một đối tượng kỳ vọng có thể được đưa ra rõ ràng (để cho ``ExpectationFactory`` và ``include_custom`` bao giờ được sử dụng / cần thiết trong nội bộ). Sau đây, chúng ta tạo một ``AerPauliExpectation`` và truyền nó vào VQE. Chúng ta có thể thấy kết quả khớp với kết quả ở trên, chỗ chúng ta gán giá trị True cho include_custom và để VQE tạo đối tượng kỳ vọng của riêng nó."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:578
msgid "By default, the ``PauliExpectation`` object, that would have be chosen when include_custom is False (or when using BasicAer qasm_simulator, or a real device) groups Paulis into commuting sets. This is efficient as it runs less circuits to compute the expectation. However, if for some reason you wanted to run a circuit for each Pauli then then grouping can be turned off when constructing the PauliExpectation. You need to explicitly pass in such an expectation instance to VQE to have it work this way though as shown below."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:659
msgid "Gradient"
msgstr "Gradient"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:661
msgid "Optimizers that use a gradient-based technique can be supplied with a user defined gradient that will be used instead of their default gradient computation which is usually done by simple finite difference. Gradients are passed indirectly via to the optimizer via its ``gradient`` parameter."
msgstr "Các công cụ tối ưu hóa sử dụng một kỹ thuật dựa trên gradient có thể được người dùng cho trước một gradient xác định mà sẽ được sử dụng thay vì tính toán gradient theo mặc định, thường được thực hiện bởi sự khác biệt hữu hạn đơn giản. Gradien được truyền gián tiếp thông qua thuật toán tối ưu qua tham số ``gradient``."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:663
msgid "As the use of a user supplied ``gradient`` was shown in the `Monitoring VQE Convergence <02_vqe_convergence.ipynb#Using-Gradient-framework>`__ tutorial I will simply refer you there. Also the `Gradients framework <../operators/02_gradients_framework.ipynb>`__ tutorial has much more about the gradients themselves."
msgstr "Bởi vì việc sử dụng một định nghĩa ``gradient`` người dùng cung cấp được thể hiện trong bài hướng dẫn `Monitoring VQE Convergence <02_vqe_convergence.ipynb#Using-Gradient-framework>`__, tôi chỉ đơn giản sẽ chỉ các bạn tại chỗ đó. Ngoài ra bài hướng dẫn `Gradients framework <../operators/02_gradients_framework.ipynb>`__ có nhiều thứ để nỏi hơn về gradients."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:675
msgid "Quantum Instance and advanced simulation"
msgstr "Thực thể lượng tử và mô phỏng nâng cao"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:677
msgid "While you may be familiar with passing a QuantumInstancen created from a ``statevector_simulator`` a ``qasm_simulator`` or real device backend, it is possible to use the advanced simulation modes of Aer too when applicable. For instance we can easily use the Aer `Matrix Product State <../simulators/7_matrix_product_state_method.ipynb>`__ method, that has the potential to scale to larger numbers of qubits."
msgstr ""

