msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-29 18:58+0000\n"
"PO-Revision-Date: 2021-04-29 19:59\n"
"Last-Translator: \n"
"Language-Team: Vietnamese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: vi\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/09_textbook_algorithms.po\n"
"X-Crowdin-File-ID: 9460\n"
"Language: vi_VN\n"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:10
msgid "This page was generated from `tutorials/algorithms/09_textbook_algorithms.ipynb`__."
msgstr "Trang này được tạo ra từ `tutorials/algorithms/09_textbook_algorithms.ipynb`__."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/09_textbook_algorithms.ipynb>`_."
msgstr "Chạy tương tác trực tiếp tại `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/09_textbook_algorithms.ipynb>`_."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:9
msgid "Textbook and Shor’s algorithms"
msgstr "Thuật toán căn bản và thuật toán Shor"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:11
msgid "Qiskit contains implementations of the well known textbook quantum algorithms such as the `Deutsch-Jozsa algorithm <https://qiskit.org/textbook/ch-algorithms/deutsch-jozsa.html>`__, the `Bernstein-Vazirani algorithm <https://qiskit.org/textbook/ch-algorithms/bernstein-vazirani.html>`__ and `Simon’s algorithm <https://qiskit.org/textbook/ch-algorithms/simon.html>`__."
msgstr "Qiskit bao gồm các thuật toán lượng tử căn bản nổi tiếng như `thuật toán Deutsch-Jozsa` <https://qiskit.org/textbook/ch-algorithms/deutsch-jozsa.html>`__, `thuật toán Bernstein-Vazirani algorithm <https://qiskit.org/textbook/ch-algorithms/bernstein-vazirani.html>`__ và `thuật toán Simon <https://qiskit.org/textbook/ch-algorithms/simon.html>`__."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:13
msgid "Qiskit also has an implementation of `Shor’s algorithm <https://qiskit.org/textbook/ch-algorithms/shor.html>`__."
msgstr "Qiskit cũng có ứng dụng của `Thuật toán Shor <https://qiskit.org/textbook/ch-algorithms/shor.html>`__."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:15
msgid "The preceding references have detailed explanations and build-out of circuits whereas this notebook has examples with the pre-built algorithms in Qiskit that you can use for experimentation and education purposes."
msgstr "Các nguồn tham khảo phía trên đã có giải thích chi tiết và xây dựng từ mạch trong khi tài liệu này có ví dụ với các thuật toán được xây dựng sẵn trong Qiskit mà bạn có thể dùng vào mục đích thí nghiệm và giáo dục."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:42
msgid "Deutsch-Jozsa algorithm"
msgstr "Thuật toán Deutsch-Jozsa"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:44
msgid "Lets start with the `Deutsch-Jozsa algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.DeutschJozsa.html>`__ which can determine if a function is ``'balanced'`` or ``'constant'`` given such a function as input. We can experiment with it in Qiskit using an oracles created from a truth tables. So for example, we can create a ``TruthTableOracle`` instance as follows."
msgstr "Hãy bắt đầu với `thuật toán Deutsch-Jozsa <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.DeutschJozsa.html>`__ có thể xác định xem một hàm là ``balanced`` hay ``constant`` khi có đầu vào là hàm đấy. Ta có thể thí nghiệm với chúng trong Qiskit sử dụng công cụ đối xứng tạo ra từ bảng chân trị. Ví dụ, ta có thể tạo ra một instance ``TruthTableOracle`` như sau."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:66
msgid "As shown, the truthtable is specified with the ``bitstr`` containing values of all entries in the table. It has length :math:`8`, so the corresponding truth table is of :math:`3` input bits. We can of course see that this truth table represents a ``'balanced'`` function as half of values are :math:`1` and the other half :math:`0`."
msgstr "Như ta đã thấy, bảng chân trị được xác định bởi ``bitstr`` bao gồm giá trị của tất cả các phần tử trong bảng. Nó có chiều dài :math:`8`, nên bảng chân trị đầu vào tương ứng có :math:`3` bit đầu vào. Ta có thể thấy rằng bảng chân trị này biểu diễn một hàm ``balanced`` vì một nửa giá trị của nó là :math:`1` còn nửa còn lại là :math:`0`."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:68
msgid "It might seem like a moot point running Deutsch-Jozsa on a truthtable as the function outputs are literally listed as the truthtable’s values. The intention is to create an oracle circuit whose groundtruth information is readily available to us but obviously not to the quantum Deutsch-Jozsa algorithm that is to act upon the oracle circuit. In more realistic situations, the oracle circuit would be provided as a blackbox to the algorithm."
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:70
msgid "Above said, we can inspect the circuit corresponding to the function encoded in the ``TruthTableOracle`` instance."
msgstr "Như đã nói, ta có thể kiểm tra mạch tương ứng với hàm được mã hóa trong instance ``TruthTableOracle``."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:100
msgid "As seen, the :math:`v_i`\\ ’s correspond to the 3 input bits; the :math:`o_0` is the oracle’s output qubit; the :math:`a_0` is an ancilla qubit."
msgstr "Như đã thấy, :math:`v_i`\\ tương ứng với 3 bit đầu vào, :math:`o_0` là qubit đầu ra của công cụ đối xứng, :math:`a_0` là qubit ancilla."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:102
msgid "Next we can simply create a ``DeutschJozsa`` instance using the oracle, and run it to check the result."
msgstr "Tiếp theo ta có thể tạo một instance ``DeutschJozsa`` sử dụng công cụ đối xứng, và chạy nó để kiểm tra kết quả."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:145
msgid "We can of course quickly put together another example for a ``'constant'`` function, as follows."
msgstr "Tất nhiên ta có thể dễ dàng đưa ra một ví dụ khác cho một hàm ``constant`` như sau."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:191
msgid "Bernstein-Vazirani algorithm"
msgstr "Thuật toán Bernstein-Vazirani"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:193
msgid "Next the `Bernstein-Vazirani algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.BernsteinVazirani.html>`__ which tries to find a hidden string. Again, for the example, we create a TruthTableOracle instance."
msgstr "Thuật toán `Bernstein-Vazirani algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.BernsteinVazirani.html>`__ cố để tìm một xâu ẩn. Một lần nữa, ta lại tạo một instance TruthTableOracle."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:215
msgid "As shown, the truthtable is specified with the ``bitstr`` containing values of all entries in the table. It has length :math:`8`, so the corresponding truth table is of :math:`3` input bits. The truthtable represents the function mappings as follows:"
msgstr "Như ta đã thấy, bảng chân trị được xác định bởi một ``bitstr`` bao gồm giá trị của tất cả phần tử trong bảng. Nó có chiều dài :math:`8`, bảng chân trị tương ứng có :math:`3` bit đầu vào. Bảng chân trị biểu diễn cho hàm ánh xạ như sau:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:217
msgid ":math:`\\mathbf{a} \\cdot 000 \\mod 2 = 0`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:218
msgid ":math:`\\mathbf{a} \\cdot 001 \\mod 2 = 0`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:219
msgid ":math:`\\mathbf{a} \\cdot 010 \\mod 2 = 1`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:220
msgid ":math:`\\mathbf{a} \\cdot 011 \\mod 2 = 1`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:221
msgid ":math:`\\mathbf{a} \\cdot 100 \\mod 2 = 1`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:222
msgid ":math:`\\mathbf{a} \\cdot 101 \\mod 2 = 1`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:223
msgid ":math:`\\mathbf{a} \\cdot 110 \\mod 2 = 0`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:224
msgid ":math:`\\mathbf{a} \\cdot 111 \\mod 2 = 0`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:226
msgid "And obviously the goal is to find the bitstring :math:`\\mathbf{a}` that satisfies all the inner product equations."
msgstr "Và rõ ràng mục đích là để tìm xâu bit :math:`\\mathbf{a}` thỏa mãn tất cả các phương trình kết quả nội bộ."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:228
msgid "Lets again look at the oracle circuit, that now corresponds to the binary function encoded in the ``TruthTableOracle`` instance."
msgstr "Một lần nữa hãy nhìn vào mạch đối xứng, mà giờ tương ứng với hàm nhị phân được mã hóa trong instance ``TruthTableOracle``."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:258
msgid "Again the :math:`v_i`\\ ’s correspond to the 3 input bits; the :math:`o_0` is the oracle’s output qubit; the :math:`a_0` is an ancilla qubit."
msgstr "Một lần nữa, :math:`v_i`\\ tương ứng với 3 bit đầu vào, :math:`o_0` là qubit đầu ra của công cụ đối xứng, :math:`a_0` là qubit ancilla."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:260
msgid "Let us first compute the groundtruth :math:`\\mathbf{a}` classically:"
msgstr "Trước hết ta hãy tính :math:`\\mathbf{a}` một cách cổ điển:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:305
msgid "Next we can create a ``BernsteinVazirani`` instance using the oracle, and run it to check the result against the groundtruth."
msgstr "Tiếp theo ta tạo một instance ``BernsteinVazirani`` sử dụng công cụ đối xứng, và chạy nó để kiểm tra kết quả với những gì ta đã tính được."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:350
msgid "Simon’s algorithm"
msgstr "Thuật toán Simon"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:352
msgid "`Simon’s algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Simon.html>`__ is used to solve `Simon’s problem <https://en.wikipedia.org/wiki/Simon's_problem>`__. Once again, for the example, we create a TruthTableOracle instance, where the construction shows a different form."
msgstr "`Thuật toán Simon <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Simon.html>`__ được sử dụng để giải quyết `Vấn đề Simon <https://en.wikipedia.org/wiki/Simon's_problem>`__. Lại một lần nữa, ta lại tạo một instance TruthTableOracle, nhưng việc xây dựng tạo ra một hình thái khác."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:378
msgid "As shown, the truthtable is specified with three length-8 bitstrings, each containing the values of all entries for a particular output column in the table. Each bitstring has length :math:`8`, so the truthtable has :math:`3` input bits; There are :math:`3` bitstrings, so the truthtable has :math:`3` output bits."
msgstr "Như đã thấy, bảng chân trị được xác định bởi ba xâu bit có độ dài là 8, mỗi xâu chứa giá trị của tất cả các phần tử của một cột đầu ra cụ thể trong bảng. Mỗi chuỗi bit có độ dài :math:`8`, bảng chân trị có :math:`3` bit đầu vào; Có :math:`3` chuỗi bit, nên bảng chân trị có :math:`3` bit đầu ra."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:380
msgid "The function :math:`f` represented by the truthtable is promised to be either 1-to-1 or 2-to-1. Our goal is to determine which. For the case of 2-to-1, we also need to compute the mask :math:`\\mathbf{s}`, which satisfies :math:`\\forall \\mathbf{x},\\mathbf{y}`: :math:`\\mathbf{x} \\oplus \\mathbf{y} = \\mathbf{s}` iff :math:`f(\\mathbf{x}) = f(\\mathbf{y})`. Apparently, if :math:`f` is 1-to-1, the corresponding mask :math:`\\mathbf{s} = \\mathbf{0}`."
msgstr "Hàm :math:`f` được biểu diễn bởi bảng chân tri sẽ là 1-to-1 hoặc 2-to-1. Mục đích của chúng ta là để phân biệt chúng. Trong trường hợp 2-to-1, ta cần tính mask :math:`\\mathbf{s}` thỏa mãn :math:`\\forall \\mathbf{x},\\mathbf{y}`: :math:`\\mathbf{x} \\oplus \\mathbf{y} = \\mathbf{s}` nếu :math:`f(\\mathbf{x}) = f(\\mathbf{y})`. Rõ ràn :math:`f` là 1-to-1, mask tương ứng :math:`\\mathbf{s} = \\mathbf{0}`."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:382
msgid "Let us first compute the groundtruth mask :math:`\\mathbf{s}` classically:"
msgstr "Trước hết ta sẽ tính mask :math:`\\mathbf{s}` một cách cổ điển:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:468
msgid "We can also quickly try a truthtable that represents a 1-to-1 function (i.e., the corresponding mask is :math:`\\mathbf{0}`), as follows."
msgstr "Chúng ta cũng có thể thử dùng một bảng chân trị biểu diễn một hàm 1-to-1 (tức là, mask tương ứng là :math:`\\mathbf{0}`) như sau."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:523
msgid "Shor’s Factoring algorithm"
msgstr "Thuật toán tìm ước của Shor"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:525
msgid "`Shor’s Factoring algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Shor.html>`__ is one of the most well-known quantum algorithms and finds the prime factors for input integer :math:`N` in polynomial time. The algorithm implementation in Qiskit is simply provided a target integer to be factored and run, as follows:"
msgstr "`Thuật toán tìm ước của Shor <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Shor.html>`__ là một trong những thuật toán lượng tử nổi tiếng nhất để tìm ước nguyên tố của số nguyên đầu vào :math:`N` trong thời gian đa thức. Thuật toán được ứng dụng trong Qiskit thông qua việc cung cấp một số nguyên cần tìm ước và chạy như sau:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:570
msgid "Note: this implementation of Shor’s algorithm uses :math:`4n + 2` qubits, where :math:`n` is the number of bits representing the integer in binary. So in practice, for now, this implementation is restricted to factorizing small integers. Given the above value of N we compute :math:`4n +2` below and confirm the size from the actual circuit."
msgstr "Lưu ý: việc ứng dụng thuật toán Shor sử dụng :math:`4n+2` qubit, với :math:`n` là số lượng bit biểu diễn số nguyên dưới dạng nhị phân. Cho nên trong thực tế, ứng dụng này bị giới hạn chỉ tìm ước của các số nguyên bé. Với giá trị được cho của N ta tính :math:`4n+2` như bên dưới và xác minh kích thước của mạch."

