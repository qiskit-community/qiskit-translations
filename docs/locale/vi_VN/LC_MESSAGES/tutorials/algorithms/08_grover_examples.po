msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-29 18:58+0000\n"
"PO-Revision-Date: 2021-04-29 19:59\n"
"Last-Translator: \n"
"Language-Team: Vietnamese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: vi\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/08_grover_examples.po\n"
"X-Crowdin-File-ID: 9458\n"
"Language: vi_VN\n"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:10
msgid "This page was generated from `tutorials/algorithms/08_grover_examples.ipynb`__."
msgstr "Trang này được tạo từ `tutorials/algorithms/08_grover_examples.ipynb`__."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/08_grover_examples.ipynb>`_."
msgstr "Chạy tương tác trực tiếp trong `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/08_grover_examples.ipynb>`_."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:9
msgid "Grover’s algorithm examples"
msgstr "Ví dụ về thuật toán Grover"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:11
msgid "This notebook has examples demonstrating how to use the Qiskit `Grover <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Grover.html>`__ search algorithm, with different oracles."
msgstr "Notebook này có chứa ví dụ miêu tả cách sử dụng thuật toán tìm kiếm `Grover <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Grover.html>`__ trong Qiskit, với nhiều oracle khác nhau."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:39
msgid "Finding solutions to 3-SAT problems"
msgstr "Tìm giải pháp cho bài toán 3-SAT"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:41
msgid "Let’s look at an example 3-Satisfiability (3-SAT) problem and walk-through how we can use Quantum Search to find its satisfying solutions. 3-SAT problems are usually expressed in `Conjunctive Normal Forms (CNF) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ and written in the `DIMACS-CNF <http://www.satcompetition.org/2009/format-benchmarks2009.html>`__ format. For example:"
msgstr "Hãy quan sát ví dụ về một vấn đề 3-Satisfiability (3-SAT) và hướng dẫn ta cách sử dụng tìm kiếm lượng tử để tìm các giải pháp thỏa mãn. Các vấn đề 3-SAT thường được biểu diễn dưới dạng `Conjuctive Normal Forms (CNF) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ và viết dưới format `DIMACS-CNF <http://www.satcompetition.org/2009/format-benchmarks2009.html>`__. Ví dụ:"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:70
msgid "The CNF of this 3-SAT instance contains 3 variables and 5 clauses:"
msgstr "CNF của trường hợp 3-SAT này bao gồm 3 biến số và 5 mệnh đề:"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:72
msgid ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"
msgstr ""

#: ../../tutorials/algorithms/08_grover_examples.ipynb:74
msgid "It can be verified that this 3-SAT problem instance has three satisfying solutions:"
msgstr "Có thể xác minh việc ví dụ vấn đề 3-SAT này có ba giải pháp thỏa mãn:"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:76
msgid ":math:`(v_1, v_2, v_3) = (T, F, T)` or :math:`(F, F, F)` or :math:`(T, T, F)`"
msgstr ""

#: ../../tutorials/algorithms/08_grover_examples.ipynb:78
msgid "Or, expressed using the DIMACS notation:"
msgstr "Hoặc, biểu diễn dưới ký hiệu DIMACS:"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:80
msgid "``1 -2 3``, or ``-1 -2 -3``, or ``1 2 -3``."
msgstr ""

#: ../../tutorials/algorithms/08_grover_examples.ipynb:82
msgid "With this example problem input, we then create the corresponding ``oracle`` for our ``Grover`` search. In particular, we use the ``LogicalExpressionOracle`` component, which supports parsing DIMACS-CNF format strings and constructing the corresponding oracle circuit."
msgstr "Với ví dụ vấn đề đầu vào này, ta có thể tạo ``oracle`` tương ứng cho tìm kiếm ``Grover``. Cụ thể hơn, ta sử dụng phần tử ``LogicalExpressionOracle`` có hỗ trợ phân tích các xâu format DIMACS-CNF và xây dựng mạch đối xứng tương ứng."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:103
msgid "The ``oracle`` can now be used to create an Grover instance:"
msgstr "``Oracle`` giờ có thể được dùng để tạo một instance Grover:"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:124
msgid "We can then configure the backend and run the Grover instance to get the result:"
msgstr "Sau đó ta có thể thiết lập backend và chạy thực thể Grover để thu về kết quả:"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:167
msgid "As seen above, a satisfying solution to the specified 3-SAT problem is obtained. And it is indeed one of the three satisfying solutions."
msgstr "Như đã thấy ở trên, ta đã thu được một giải pháp thỏa mãn cho vấn đề 3-SAT được nhắc tới. Và nó đúng là một trong ba giải pháp thỏa mãn."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:169
msgid "Since we used the ``'qasm_simulator'``, the complete measurement result is also returned, as shown in the plot below, where it can be seen that the binary strings ``000``, ``011``, and ``101`` (note the bit order in each string), corresponding to the three satisfying solutions all have high probabilities associated with them."
msgstr "Vì chúng ta đã sử dụng ``qasm_simulator``, kết quả số đo hoàn chỉnh cũng được trả lại, như đã thấy ở đồ thị bên dưới. Các xâu nhị phân ``000``, ``011``, và ``101`` (lưu ý trật tự bit ở mỗi xâu) tương ứng với 3 giải pháp thỏa mãn đều có xác suất cao liên quan tới chúng."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:200
msgid "Boolean Logical Expressions"
msgstr "Biểu thức logic (Boolean)"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:202
msgid "Qiskit’s ``Grover`` can also be used to perform Quantum Search on an ``Oracle`` constructed from other means, in addition to DIMACS. For example, the ``LogicalExpressionOracle`` can actually be configured using arbitrary Boolean logical expressions, as demonstrated below."
msgstr "``Grover`` của Qiskit cũng có thể được sử dụng để thực hiện tìm kiếm lượng tử trên ``Oracle`` được xây dựng bằng cách khác ngoài DIMACS. Ví dụ, ``LogicalExpressionOracle`` có thể được cấu hình bằng các biểu thức logic Boolean tùy ý, được minh họa ở dưới."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:236
msgid "In the example above, the input Boolean logical expression ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` should be quite self-explanatory, where ``^``, ``~``, and ``&`` represent the Boolean logical XOR, NOT, and AND operators, respectively. It should be quite easy to figure out the satisfying solution by examining its parts: ``w ^ x`` calls for ``w`` and ``x`` taking different values; ``~(y ^ z)`` requires ``y`` and ``z`` be the same; ``x & y & z`` dictates all three to be ``True``. Putting these together, we get the satisfying solution ``(w, x, y, z) = (False, True, True, True)``, which our ``Grover``\\ ’s result agrees with."
msgstr "Ở ví dụ trên, đầu vào biểu thức logic bool ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` khá là dễ hiểu, với ``^``, ``~``, và ``&`` tương ứng với lần lượt các toán tử logic bool XOR, NOT và AND. Chúng ta có thể thu được giải pháp thỏa mãn thông qua việc xem xét các thành phần của nó: ``w ^ x`` yêu cầu ``w`` và ``x`` có giá tị khác nhau; ``~(y ^ z)`` yêu cầu ``y`` và ``z`` giống nhau; ``x & y & z`` yêu cầu cả ba là ``True``. Kết hợp chúng với nhau, ta thu được giải pháp thỏa mãn ``(w, x, y, z) = (False, True, True, True)``, giống với kết quả của ``Grover``\\."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:249
msgid "TruthTable Oracles"
msgstr "Công cụ đối xứng bảng chân trị"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:251
msgid "With Qiskit, ``Oracle``\\ s can also be constructed from truth tables, meaning we can also perform Quantum Search on truth tables. Even though this might seem like a moot point as we would be essentially searching for entries of a truth table with the :math:`1` value, it’s a good example for demonstrative purpose."
msgstr "Trong Qiskit, ``Oracle``\\ còn có thể được xây dựng từ các bảng chân trị, nghĩa là ta có thể thực hiện tìm kiếm lượng tử trên các bảng chân trị. Mặc dù điều này có vẻ giống như một điều hiển nhiên vì chúng ta căn bản là đang tìm các phần tử của bảng chân trị với giá trị :math:`1`, nó vẫn là một ví dụ minh họa tốt."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:272
msgid "As shown, the ``truthtable`` is specified with a bitstring containing values of all entries in the table. It has length :math:`16`, so the corresponding truth table is of :math:`4` input bits. Since the very first and last values are :math:`1`, the corresponding truth table target entries are ``0000`` and ``1111``."
msgstr "Như ta đã thấy, ``truthtable`` được xác định bởi một chuỗi bit bao gồm giá trị của tất cả các phần tử trong bảng. Nó có chiều dài :math:`16`, cho nên bảng chân trị tương ứng có :math:`4` bit đầu vào. Vì giá trị đầu và cuối là :math:`1`, bảng chân trị tương ứng có các giá trị được nhắm tới là ``0000`` và ``1111``."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:274
msgid "Next, we can setup the ``Oracle`` and ``Grover`` objects to perform Quantum Search as usual."
msgstr "Tiếp theo, ta có thể thiết lập các đối tượng ``Oracle`` và ``Grover`` để thực hiện tìm kiếm lượng tử như thông thường."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:307
msgid "As seen in the above plot the search result coincides with our expectation."
msgstr "Như đã thấy trong đồ thị trên, kết quả tìm kiếm trùng với kỳ vọng của chúng ta."

