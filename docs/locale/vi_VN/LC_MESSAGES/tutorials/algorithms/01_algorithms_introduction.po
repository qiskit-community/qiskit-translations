msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-07 17:08+0000\n"
"PO-Revision-Date: 2021-04-07 18:23\n"
"Last-Translator: \n"
"Language-Team: Vietnamese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: vi\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/01_algorithms_introduction.po\n"
"X-Crowdin-File-ID: 9444\n"
"Language: vi_VN\n"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:10
msgid "This page was generated from `tutorials/algorithms/01_algorithms_introduction.ipynb`__."
msgstr "Trang này được tạo từ `tutorials/algorithms/01_algorithms_introduction.ipynb`__."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/01_algorithms_introduction.ipynb>`_."
msgstr "Chạy tương tác trực tiếp trên `IBM Quantum Lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/01_algorithms_introduction.ipynb>` _."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:9
msgid "An Introduction to Algorithms in Qiskit"
msgstr "Mở đầu về thuật toán trong Qiskit"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:11
msgid "This is an introduction to algorithms in Qiskit and provides a high-level overview to help understand the various aspects of the functionality to get started. Other tutorials will provide more in-depth material, on given algorithms, and ways to use them etc."
msgstr "Phần mở đầu này giới thiệu về các thuật toán trong Qiskit và cung cấp một cái nhìn tổng quan để giúp hiểu rõ các khía cạnh khác nhau của cách vận hành để có thể bắt đầu làm việc. Các hướng dẫn khác sẽ cung cấp nhiều chi tiết sâu hơn, trên những thuật toán nhất định, và cách sử dụng chúng, vv."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:23
msgid "How is the algorithm library structured?"
msgstr "Thư viện thuật toán được tổ chức thế nào?"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:25
msgid "Qiskit provides a number of `Algorithms <https://qiskit.org/documentation/apidoc/qiskit.aqua.algorithms.html>`__ and they are grouped by category according to the task they can perform. For instance ``Minimum Eigensolvers`` to find the smallest eigen value of an operator, for example ground state energy of a chemistry Hamiltonian or a solution to an optimization problem when expressed as an Ising Hamiltonian. There are ``Classifiers`` for machine learning classification problems and ``Amplitude Estimators`` for value estimation that can be used say in financial applications. The full set of categories can be seen in the Algorithms documentation link above."
msgstr "Qiskit cung cấp một số `Thuật toán <https://qiskit.org/documentation/apidoc/qiskit.aqua.algorithms.html>` __ và chúng được nhóm thành các danh mục dựa theo nhiệm vụ mà chúng có thể thực hiện. Ví dụ, với ``Minimum Eigensolvers`` để tìm trị riêng nhỏ nhất của một toán tử như năng lượng trạng thái thấp nhất của một Hamilton hóa học hoặc đáp số cho bài toán tối ưu hóa được biểu diễn dưới dạng mô hình Ising Hamiltonian. ``Classifiers`` cho các bài toán phân loại học máy và ``Amplitude Estimators`` cho ước lượng giá trị có thể được sử dụng trong các ứng dụng tài chính. Có thể tìm thấy đầy đủ các danh mục trong liên kết tài liệu Thuật toán ở trên."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:28
msgid "Algorithms are configurable and often part of the configuration will be in the form of smaller building blocks, of which different instances of the building block type can be given. For instance with ``VQE``, the Variational Quantum Eigensolver, it takes a trial wavefunction, in the form of a ``QuantumCircuit`` and a classical optimizer among other things. Such building blocks can be found as `Components <https://qiskit.org/documentation/apidoc/qiskit.aqua.components.html>`__ and as circuits from the `Circuit Library <https://qiskit.org/documentation/apidoc/circuit_library.html>`__."
msgstr "Các thuật toán có thể cấu hình được và thường các phần của cấu hình được chia thành các cấu thành (building block) bé hơn, từ đó có thể tạo từ các đơn vị của các loại cấu thành khác nhau. Ví dụ với ``VQE``, the Variational Quantum Eigensolver, nó lấy một hàm sóng thử, dưới dạng một mạch lượng tử, và một bộ tối ưu cổ điển và thêm nữa. Những cấu thành như vậy có thể là các components, tìm thấy ở `Components <https://qiskit.org/documentation/apidoc/qiskit.aqua.components.html>`__ và có thể là các mạch lượng tử, tìm thấy ở `Circuit Library <https://qiskit.org/documentation/apidoc/circuit_library.html>`__."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:31
msgid "Let’s take a look at an example to construct a VQE instance. Here ``TwoLocal`` is the variational form (trial wavefunction), a parameterized circuit which can be varied, and ``SLSQP`` a classical optimizer. These are created as separate instances and passed to VQE when it is constructed. Trying, for example, a different classical optimizer, or variational form is simply a case of creating an instance of the one you want and passing it into VQE."
msgstr "Hãy xem một ví dụ để xây dựng một VQE. Ở đây ``TwoLocal`` là dạng biến đổi (hàm sóng thử nghiệm), một mạch tham số có thể thay đổi, và ``SLSQP`` một bộ tối ưu cổ điển. Chúng được tạo như là các đơn vị riêng biệt và đưa cho VQE khi nó được xây dựng. Thử, ví dụ, một bộ tối ưu hóa cổ điển khác, hoặc dạng biến đổi (variational form) chỉ đơn giản là một một thực thể của mạch mà bạn muốn và đưa nó vào VQE."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:59
msgid "Let’s draw the ansatz so we can see it’s a QuantumCircuit where θ[0] through θ[7] will be the parameters that are varied as VQE optimizer finds the minimum eigenvalue. We’ll come back to the parameters later in a working example below."
msgstr "Chúng ta hãy vẽ ansatz để có thể thấy nó là một mạch với từ θ[0] đến θ[7] là các tham số để VQE tìm trị riêng nhỏ nhất. Chúng ta sẽ quay lại với các tham số sau, khi làm việc với một ví dụ dưới đây."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:89
msgid "But more is needed before we can run the algorithm so let’s get to that next."
msgstr "Nhưng cần nhiều hơn nữa trước khi chúng ta có thể chạy thuật toán, nên hãy tiếp tục đã."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:101
msgid "How to run an algorithm?"
msgstr "Làm thế nào để chạy một thuật toán?"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:103
msgid "In order to run an algorithm we need to have backend, a simulator or real device, on which the circuits that comprise the algorithm can be run. So for example we can use the ``statevector_simulator`` from the BasicAer provider."
msgstr "Để chạy một thuật toán chúng ta cần phải có backend, mô phỏng hoặc thiết bị thực, mà trên đó các mạch biểu diễn một thuật toán có thể chạy được. Ví dụ, chúng ta có thể sử dụng ``statevector_simulator`` từ nhà cung cấp BasicAer."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:126
msgid "Now a backend on its own does not have information on how you might want to run the circuits etc. For example how many shots, do you want a noise model, even options around transpiling the circuits. For this Qiskit Aqua has a `QuantumInstance <https://qiskit.org/documentation/stubs/qiskit.aqua.QuantumInstance.html>`__ which is provided both the backend as well as various settings around the circuit processing and execution so for instance:"
msgstr "Bây giờ, một backend tự bản thân nó không có thông tin về việc bạn muốn các mạch lượng tử được chạy như thế nào. Ví dụ bao nhiêu lần chạy, bạn có muốn một mô hình nhiễu không, thậm chí các lựa chọn cho việc mạch được biên dịch thế nào. Vì thế Qiskit Aqua cung cấp `QuantumInstance <https://qiskit.org/documentation/stubs/qiskit.aqua.QuantumInstance.html>`__ với các backend cũng như nhiều thiết lập khác nhau xung quanh việc xử lý và thực thi của mạch lượng tử, ví dụ:"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:150
msgid "Note: if you provide the backend directly then internally a QuantumInstance will be created from it, with default settings, so at all times the algorithms are working through a QuantumInstance."
msgstr "Lưu ý: nếu sau đó bạn cung cấp backend trực tiếp thì một QuantumInstance sẽ được tạo từ nó, với thiết lập mặc định, vì vậy các thuật toán đang hoạt động thông qua một QuantumInstance mọi lúc."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:152
msgid "So now we would be able to call the `run() <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.html#qiskit.aqua.algorithms.VQE.run>`__ method, which is common to all algorithms and returns a result specific for the algorithm. In this case since VQE is a MinimumEigensolver we could use the `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.html#qiskit.aqua.algorithms.VQE.compute_minimum_eigenvalue>`__ method. The latter is the interface of choice for the application modules, such as Chemistry and Optimization, in order that they can work interchangeably with any algorithm within the specific category."
msgstr "Bây giờ chúng ta có thể gọi `run() <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.html#qiskit.aqua.algorithms.VQE.run>`__, đây là cách gọi chung cho tất cả thuật toán và sẽ trả về kết quả tương ứng với mỗi thuật toán. Trong trường hợp này, VQE là một MinimumEigensolver nên chúng ta có thể sử dụng `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.html#qiskit.aqua.algorithms.VQE.compute_minimum_eigenvalue>`__. Thứ hai là giao diện được lựa chọn cho các module ứng dụng, chẳng hạn như Hóa học và Tối ưu hóa, để chúng có thể hoạt động thay thế cho nhau với bất kỳ thuật toán nào trong danh mục cụ thể."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:165
msgid "A complete working example"
msgstr "Một ví dụ hoàn chỉnh"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:167
msgid "Let’s put what we have learned from above together and create a complete working example. VQE will find the minimum eigenvalue, i.e. minimum energy value of a Hamiltonian operator and hence we need such an operator for VQE to work with. Such an operator is given below. This was originally created by the Chemistry application module as the Hamiltonian for an H2 molecule at 0.735A interatomic distance. It’s a sum of Pauli terms as below, but for now I am not going to say anything further about it since the goal is to run the algorithm, but further information on operators can be found in other tutorials."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:195
msgid "So let’s build a VQE instance passing the operator, and a backend using a QuantumInstance, to the constructor. Now VQE does have setters so the operator and backend can also be passed later. Setting them later can be useful when creating an algorithm without this problem specific information and then later using it, say with the chemistry application module, which would create the operator for the specific chemistry problem being solved."
msgstr "Vì vậy, hãy xây dựng một thực thể VQE đi qua toán tử và một backend bằng cách sử dụng một QuantumInstance, cho phương thức khởi tạo. Bây giờ VQE đã có các bộ đặt để toán tử và backend cũng có thể được thông qua sau đó. Đặt chúng sau có thể hữu ích khi tạo một thuật toán mà không có thông tin cụ thể về vấn đề này và sau đó sử dụng nó, chẳng hạn như với module ứng dụng hóa học, sẽ tạo ra toán tử cho vấn đề hóa học cụ thể đang được giải quyết."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:197
msgid "Note: In order that you can run this notebook and see the exact same output the random number generator used throughout Aqua in aqua_globals, as well as the transpiler and simulator, via the QuantumInstance, are seeded. You do not have to do this but if want to be able to reproduce the exact same outcome each time then this is how it’s done."
msgstr "Lưu ý: Để bạn có thể chạy notebook này và xem chính xác output mà bộ random number generator sử dụng trong toàn bộ Aqua trong aqua_globals, cũng như trình vận chuyển và trình mô phỏng, thông qua QuantumInstance, được gieo hạt. Bạn không cần phải làm điều này nhưng nếu bạn muốn có thể tái tạo lại kết quả chính xác mỗi lần, đây là cách nó được thực hiện."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:199
msgid "So let’s run VQE and print the result object it returns."
msgstr "Do đó, hãy cùng chạy VQE và xuất đối tượng kết quả trả về."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:283
msgid "From the above result we can see it took the optimizer ``72`` evaluations of parameter values until it found the minimum eigenvalue of ``-1.85727`` which is the electronic ground state energy of the given H2 molecule. The optimal parameters of the ansatz can also be seen which are the values that were in the ansatz at the minimum value."
msgstr "Từ kết quả trên, chúng ta có thể thấy trình tối ưu hóa ``72`` đánh giá các giá trị tham số cho đến khi nó tìm thấy giá trị riêng tối thiểu là ``-1.85727``', là năng lượng trạng thái cơ bản điện tử của phân tử H2 đã cho. Các tham số tối ưu của ansatz cũng có thể được xem là các giá trị nằm trong ansatz ở giá trị nhỏ nhất."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:295
msgid "Using VQE as a MinimumEigensolver"
msgstr "Sử dụng VQE như một MinimumEigensolver"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:297
msgid "To close off let’s use the MinimumEigensolver interface and also create a VQE instance without supplying either the operator or QuantumInstance. We later set the QuantumInstance and finally pass the operator on the ``compute_minimum_eigenvalue`` method (though we could have passed it in earlier via the setter instead, as long as by the time VQE runs it has an operator to work on)."
msgstr "Tóm tắt lại, hãy sử dụng giao diện MinimumEigensolver và cùng với đó tạo một VQE instance mà không cần cung cấp toán tử hoặc QuantumInstance. Sau đó, chúng ta đặt QuantumInstance và cuối cùng truyền toán tử vào method ``compute_minimum_eigenvalue`` (mặc dù chúng ta có thể đã truyền nó vào trước đó thông qua setter, miễn là vào thời điểm VQE chạy, nó có một toán tử để hoạt động)."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:379
msgid "As the identical seeding was used as the prior example the result can be seen to be the same."
msgstr "Vì các seeding giống nhau đã được sử dụng làm ví dụ như trước, kết quả có thể được xem là như nhau."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:390
msgid "This concludes this introduction to algorithms in Qiskit. Please check out the other algorithm tutorials in this series for both broader as well as more in depth coverage of the algorithms."
msgstr "Phần này kết thúc mục giới thiệu về các thuật toán trong Qiskit. Vui lòng xem các hướng dẫn thuật toán khác trong loạt bài này để biết cả phạm vi rộng hơn cũng như chuyên sâu hơn về các thuật toán."

