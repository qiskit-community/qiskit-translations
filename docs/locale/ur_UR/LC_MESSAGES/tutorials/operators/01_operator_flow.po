msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-05 21:02+0000\n"
"PO-Revision-Date: 2022-01-05 22:53\n"
"Last-Translator: \n"
"Language-Team: Urdu\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ur\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/operators/01_operator_flow.po\n"
"X-Crowdin-File-ID: 9472\n"
"Language: ur_UR\n"

#: ../../tutorials/operators/01_operator_flow.ipynb:10
msgid "This page was generated from `tutorials/operators/01_operator_flow.ipynb`__."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:9
msgid "Operator Flow"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:21
msgid "Introduction"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:23
msgid "Qiskit provides classes representing states and operators and sums, tensor products, and compositions thereof. These algebraic constructs allow us to build expressions representing operators."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:25
msgid "We introduce expressions by building them from Pauli operators. In subsequent sections we explore in more detail operators and states, how they are represented, and what we can do with them. In the last section we construct a state, evolve it with a Hamiltonian, and compute expectation values of an observable."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:28
msgid "Pauli operators, sums, compositions, and tensor products"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:30
msgid "The most important base operators are the Pauli operators. The Pauli operators are represented like this."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:75
msgid "These operators may also carry a coefficient."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:123
msgid "These coefficients allow the operators to be used as terms in a sum."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:170
msgid "Tensor products are denoted with a caret, like this."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:214
msgid "Composition is denoted by the ``@`` symbol."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:258
msgid "In the preceding two examples, the tensor product and composition of Pauli operators were immediately reduced to the equivalent (possibly multi-qubit) Pauli operator. If we tensor or compose more complicated objects, the result is objects representing the unevaluated operations. That is, algebraic expressions."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:269
msgid "For example, composing two sums gives"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:322
msgid "And tensoring two sums gives"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:375
msgid "Let’s take a closer look at the types introduced above. First the Pauli operators."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:420
msgid "Each Pauli operator is an instance of ``PauliOp``, which wraps an instance of ``qiskit.quantum_info.Pauli``, and adds a coefficient ``coeff``. In general, a ``PauliOp`` represents a weighted tensor product of Pauli operators."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:465
msgid "For the encoding of the Pauli operators as pairs of Boolean values, see the documentation for ``qiskit.quantum_info.Pauli``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:467
msgid "All of the objects representing operators, whether as “primitive”s such as ``PauliOp``, or algebraic expressions carry a coefficient"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:520
msgid "In the following we take a broader and deeper look at Qiskit’s operators, states, and the building blocks of quantum algorithms."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:532
msgid "Part I: State Functions and Measurements"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:534
msgid "Quantum states are represented by subclasses of the class ``StateFn``. There are four representations of quantum states: ``DictStateFn`` is a sparse representation in the computational basis, backed by a ``dict``. ``VectorStateFn`` is a dense representation in the computational basis backed by a numpy array. ``CircuitStateFn`` is backed by a circuit and represents the state obtained by executing the circuit on the all-zero computational-basis state. ``OperatorStateFn`` represents mixed states via a density matrix. (As we will see later, ``OperatorStateFn`` is also used to represent observables.)"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:537
msgid "Several ``StateFn`` instances are provided for convenience. For example ``Zero, One, Plus, Minus``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:559
msgid "``Zero`` and ``One`` represent the quantum states :math:`|0\\rangle` and :math:`|1\\rangle`. They are represented via ``DictStateFn``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:603
msgid "``Plus`` and ``Minus``, representing states :math:`(|0\\rangle + |1\\rangle)/\\sqrt{2}` and :math:`(|0\\rangle - |1\\rangle)/\\sqrt{2}` are represented via circuits. ``H`` is a synonym for ``Plus``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:671
msgid "Indexing into quantum states is done with the ``eval`` method. These examples return the coefficients of the ``0`` and ``1`` basis states. (Below, we will see that the ``eval`` method is used for other computations, as well.)"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:731
msgid "The dual vector of a quantum state, that is the *bra* corresponding to a *ket* is obtained via the ``adjoint`` method. The ``StateFn`` carries a flag ``is_measurement``, which is ``False`` if the object is a ket and ``True`` if it is a bra."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:742
msgid "Here, we construct :math:`\\langle 1 |`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:787
msgid "For convenience, one may obtain the dual vector with a tilde, like this"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:833
msgid "Algebraic operations and predicates"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:835
msgid "Many algebraic operations and predicates between ``StateFn``\\ s are supported, including:"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:837
msgid "``+`` - addition"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:838
msgid "``-`` - subtraction, negation (scalar multiplication by -1)"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:839
msgid "``*`` - scalar multiplication"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:840
msgid "``/`` - scalar division"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:841
msgid "``@`` - composition"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:842
msgid "``^`` - tensor product or tensor power (tensor with self n times)"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:843
msgid "``**`` - composition power (compose with self n times)"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:844
msgid "``==`` - equality"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:845
msgid "``~`` - adjoint, alternating between a State Function and Measurement"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:847
msgid "Be very aware that these operators obey the `Python rules for operator precedence <https://docs.python.org/3/reference/expressions.html#operator-precedence>`__, which might not be what you expect mathematically. For example, ``I^X + X^I`` will actually be parsed as ``I ^ (X + X) ^ I == 2 * (I^X^I)`` because Python evaluates ``+`` before ``^``. In these cases, you can use the methods (``.tensor()``, etc) or parentheses."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:858
msgid "``StateFn``\\ s carry a coefficient. This allows us multiply states by a scalar, and so to construct sums."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:869
msgid "Here, we construct :math:`(2 + 3i)|0\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:914
msgid "Here, we see that adding two ``DictStateFn``\\ s returns an object of the same type. We construct :math:`|0\\rangle + |1\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:958
msgid "Note that you must normalize states by hand. For example, to construct :math:`(|0\\rangle + |1\\rangle)/\\sqrt{2}`, we write"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1005
msgid "In other cases, the result is a symbolic representation of a sum. For example, here is a representation of :math:`|+\\rangle + |-\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1082
msgid "The composition operator is used to perform an inner product, which by default is held in an unevaluated form. Here is a representation of :math:`\\langle 1 | 1 \\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1135
msgid "Note that the ``is_measurement`` flag causes the (bra) state ``~One`` to be printed ``DictMeasurement``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1146
msgid "Symbolic expressions may be evaluated with the ``eval`` method."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1225
msgid "Here is :math:`\\langle - | 1 \\rangle = \\langle (\\langle 0| - \\langle 1|)/\\sqrt{2} | 1\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1270
msgid "The composition operator ``@`` is equivalent to calling the ``compose`` method."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1323
msgid "Inner products may also be computed using the ``eval`` method directly, without constructing a ``ComposedOp``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1368
msgid "Symbolic tensor products are constructed as follows. Here is :math:`|0\\rangle \\otimes |+\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1433
msgid "This may be represented as a simple (not compound) ``CircuitStateFn``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1495
msgid "Tensor powers are constructed using the caret ``^`` as follows. Here are :math:`600 (|11111\\rangle + |00000\\rangle)`, and :math:`|10\\rangle^{\\otimes 3}`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1543
msgid "The method ``to_matrix_op`` converts to ``VectorStateFn``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1643
msgid "Constructing a StateFn is easy. The ``StateFn`` class also serves as a factory, and can take any applicable primitive in its constructor and return the correct StateFn subclass. Currently the following primitives can be passed into the constructor, listed alongside the ``StateFn`` subclass they produce:"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1645
msgid "str (equal to some basis bitstring) -> DictStateFn"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1646
msgid "dict -> DictStateFn"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1647
msgid "Qiskit Result object -> DictStateFn"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1648
msgid "list -> VectorStateFn"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1649
msgid "np.ndarray -> VectorStateFn"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1650
msgid "Statevector -> VectorStateFn"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1651
msgid "QuantumCircuit -> CircuitStateFn"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1652
msgid "Instruction -> CircuitStateFn"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1653
msgid "OperatorBase -> OperatorStateFn"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1734
msgid "Part II: ``PrimitiveOp``\\ s"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1736
msgid "The basic Operators are subclasses of ``PrimitiveOp``. Just like ``StateFn``, ``PrimitiveOp`` is also a factory for creating the correct type of ``PrimitiveOp`` for a given primitive. Currently, the following primitives can be passed into the constructor, listed alongside the ``PrimitiveOp`` subclass they produce:"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1738
msgid "Terra’s Pauli -> PauliOp"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1739
msgid "Instruction -> CircuitOp"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1740
msgid "QuantumCircuit -> CircuitOp"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1741
msgid "2d List -> MatrixOp"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1742
msgid "np.ndarray -> MatrixOp"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1743
msgid "spmatrix -> MatrixOp"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1744
msgid "Terra’s quantum_info.Operator -> MatrixOp"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1766
msgid "Matrix elements"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1777
msgid "The ``eval`` method returns a column from an operator. For example, the Pauli :math:`X` operator is represented by a ``PauliOp``. Asking for a column returns an instance of the sparse representation, a ``DictStateFn``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1855
msgid "It follows that indexing into an operator, that is obtaining a matrix element, is performed with two calls to the ``eval`` method."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1866
msgid "We have :math:`X = \\left(\\begin{matrix} 0 & 1 \\\\  1 & 0  \\end{matrix} \\right)`. And the matrix element :math:`\\left\\{X \\right\\}_{0,1}` is"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1911
msgid "Here is an example using the two qubit operator ``CX``, the controlled ``X``, which is represented by a circuit."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2052
msgid "Applying an operator to a state vector"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2063
msgid "Applying an operator to a state vector may be done with the ``compose`` method (equivalently, ``@`` operator). Here is a representation of :math:`X | 1 \\rangle = |0\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2116
msgid "A simpler representation, the ``DictStateFn`` representation of :math:`|0\\rangle`, is obtained with ``eval``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2161
msgid "The intermediate ``ComposedOp`` step may be avoided by using ``eval`` directly."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2206
msgid "Composition and tensor products of operators are effected with ``@`` and ``^``. Here are some examples."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2408
msgid "Part III ``ListOp`` and subclasses"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2420
msgid "``ListOp``"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2422
msgid "``ListOp`` is a container for effectively vectorizing operations over a list of operators and states."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2495
msgid "For example, the composition above is distributed over the lists (``ListOp``) using the simplification method ``reduce``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2603
msgid "``ListOp``\\ s: ``SummedOp``, ``ComposedOp``, ``TensoredOp``"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2605
msgid "``ListOp``, introduced above, is useful for vectorizing operations. But, it also serves as the superclass for list-like composite classes. If you’ve already played around with the above, you’ll notice that you can easily perform operations between ``OperatorBase``\\ s which we may not know how to perform efficiently in general (or simply haven’t implemented an efficient procedure for yet), such as addition between ``CircuitOp``\\ s. In those cases, you may receive a ``ListOp`` result (or subclass thereof) from your operation representing the lazy execution of the operation. For example, if you attempt to add together a ``DictStateFn`` and a ``CircuitStateFn``, you’ll receive a ``SummedOp`` representing the sum of the two. This composite State function still has a working ``eval`` (but may need to perform a non-scalable computation under the hood, such as converting both to vectors)."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2608
msgid "These composite ``OperatorBase``\\ s are how we construct increasingly complex and rich computation out of ``PrimitiveOp`` and ``StateFn`` building blocks."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2610
msgid "Every ``ListOp`` has four properties: \\* ``oplist`` - The list of ``OperatorBase``\\ s which may represent terms, factors, etc. \\* ``combo_fn`` - The function taking a list of complex numbers to an output value which defines how to combine the outputs of the ``oplist`` items. For broadcasting simplicity, this function is defined over NumPy arrays. \\* ``coeff`` - A coefficient multiplying the primitive. Note that ``coeff`` can be int, float, complex or a free ``Parameter`` object (from ``qiskit.circuit`` in Terra) to be bound later using ``my_op.bind_parameters``. \\* ``abelian`` - Indicates whether the Operators in ``oplist`` are known to mutually commute (usually set after being converted by the ``AbelianGrouper`` converter)."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2613
msgid "Note that ``ListOp`` supports typical iteration overloads, so you can use indexing like ``my_op[4]`` to access the ``OperatorBase``\\ s in ``oplist``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2625
msgid "``OperatorStateFn``"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2627
msgid "We mentioned above that ``OperatorStateFn`` represents a density operator. But, if the ``is_measurement`` flag is ``True``, then ``OperatorStateFn`` represents an observable. The expectation value of this observable can then be constructed via ``ComposedOp``. Or, directly, using ``eval``. Recall that the ``is_measurement`` flag (property) is set via the ``adjoint`` method."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2638
msgid "Here we construct the observable corresponding to the Pauli :math:`Z` operator. Note that when printing, it is called ``OperatorMeasurement``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2708
msgid "Here, we compute :math:`\\langle 0 | Z | 0 \\rangle`, :math:`\\langle 1 | Z | 1 \\rangle`, and :math:`\\langle + | Z | + \\rangle`, where :math:`|+\\rangle = (|0\\rangle + |1\\rangle)/\\sqrt{2}`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2761
msgid "Part IV: Converters"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2763
msgid "Converters are classes that manipulate operators and states and perform building blocks of algorithms. Examples include changing the basis of operators and Trotterization. Converters traverse an expression and perform a particular manipulation or replacement, defined by the converter’s ``convert()`` method, of the Operators within. Typically, if a converter encounters an ``OperatorBase`` in the recursion which is irrelevant to its conversion purpose, that ``OperatorBase`` is left unchanged."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2788
msgid "Evolutions, ``exp_i()``, and the ``EvolvedOp``"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2790
msgid "Every ``PrimitiveOp`` and ``ListOp`` has an ``.exp_i()`` function such that ``H.exp_i()`` corresponds to :math:`e^{-iH}`. In practice, only a few of these Operators have an efficiently computable exponentiation (such as MatrixOp and the PauliOps with only one non-identity single-qubit Pauli), so we need to return a placeholder, or symbolic representation, (similar to how ``SummedOp`` is a placeholder when we can’t perform addition). This placeholder is called ``EvolvedOp``, and it holds the ``OperatorBase`` to be exponentiated in its ``.primitive`` property."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2793
msgid "Qiskit operators fully support parameterization, so we can use a ``Parameter`` for our evolution time here. Notice that there’s no “evolution time” argument in any function. The Operator flow exponentiates whatever operator we tell it to, and if we choose to multiply the operator by an evolution time, :math:`e^{-iHt}`, that will be reflected in our exponentiation parameters."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2805
msgid "Weighted sum of Pauli operators"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2807
msgid "A Hamiltonian expressed as a linear combination of multi-qubit Pauli operators may be constructed like this."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2832
msgid "Note that ``two_qubit_H2`` is represented as a ``SummedOp`` whose terms are ``PauliOp``\\ s."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2888
msgid "Next, we multiply the Hamiltonian by a ``Parameter``. This ``Parameter`` is stored in the ``coeff`` property of the ``SummedOp``. Calling ``exp_i()`` on the result wraps it in ``EvolvedOp``, representing exponentiation."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2962
msgid "We construct ``h2_measurement``, which represents ``two_qubit_H2`` as an observable."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3019
msgid "We construct a Bell state :math:`|\\Phi_+\\rangle` via :math:`\\text{CX} (H\\otimes I) |00\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3082
msgid "Here is the expression :math:`H e^{-iHt} |\\Phi_+\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3187
msgid "Typically, we want to approximate :math:`e^{-iHt}` using two-qubit gates. We achieve this with the ``convert`` method of ``PauliTrotterEvolution``, which traverses expressions applying trotterization to all ``EvolvedOp``\\ s encountered. Although we use ``PauliTrotterEvolution`` here, there are other possibilities, such as ``MatrixEvolution``, which performs the exponentiation exactly."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3305
msgid "``trotterized_op`` contains a ``Parameter``. The ``bind_parameters`` method traverses the expression binding values to parameter names as specified via a ``dict``. In this case, there is only one parameter."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3326
msgid "``bound`` is a ``ComposedOp``. The second factor is the circuit. Let’s draw it to verify that the binding has taken place."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3445
msgid "Expectations"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3447
msgid "``Expectation``\\ s are converters that enable the computation of expectation values of observables. They traverse an Operator tree, replacing ``OperatorStateFn``\\ s (observables) with equivalent instructions which are more amenable to computation on quantum or classical hardware. For example, if we want to measure the expectation value of an Operator ``o`` expressed as a sum of Paulis with respect to some state function, but can only access diagonal measurements on quantum hardware, we can create an observable ``~StateFn(o)`` and use a ``PauliExpectation`` to convert it to a diagonal measurement and circuit pre-rotations to append to the state."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3450
msgid "Another interesting ``Expectation`` is the ``AerPauliExpectation``, which converts the observable into a ``CircuitStateFn`` containing a special expectation snapshot instruction which ``Aer`` can execute natively with high performance."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3570
msgid "By default ``group_paulis=True``, which will use the ``AbelianGrouper`` to convert the ``SummedOp`` into groups of mutually qubit-wise commuting Paulis. This reduces circuit execution overhead, as each group can share the same circuit execution."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3662
msgid "Note that converters act recursively, that is, they traverse an expression applying their action only where possible. So we can just convert our full evolution and measurement expression. We could have equivalently composed the converted ``h2_measurement`` with our evolution ``CircuitStateFn``. We proceed by applying the conversion on the entire expression."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3845
msgid "Now we bind multiple parameter values into a ``ListOp``, followed by ``eval`` to evaluate the entire expression. We could have used ``eval`` earlier if we bound earlier, but it would not be efficient. Here, ``eval`` will convert our ``CircuitStateFn``\\ s to ``VectorStateFn``\\ s through simulation internally."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3867
msgid "Here are the expectation values :math:`\\langle \\Phi_+| e^{iHt} H e^{-iHt} |\\Phi_+\\rangle` corresponding to the different values of the parameter."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3919
msgid "Executing ``CircuitStateFn``\\ s with the ``CircuitSampler``"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3921
msgid "The ``CircuitSampler`` traverses an Operator and converts any ``CircuitStateFns`` into approximations of the resulting state function by a ``DictStateFn`` or ``VectorStateFn`` using a quantum backend. Note that in order to approximate the value of the ``CircuitStateFn``, it must 1) send the state function through a depolarizing channel, which will destroy all phase information and 2) replace the sampled frequencies with **square roots** of the frequency, rather than the raw probability of sampling (which would be the equivalent of sampling the **square** of the state function, per the Born rule.)"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3976
msgid "Note again that the circuits are replaced by dicts with **square roots** of the circuit sampling probabilities. Take a look at one sub-expression before and after the conversion:"
msgstr ""

