msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-05 19:23+0000\n"
"PO-Revision-Date: 2021-05-05 19:57\n"
"Last-Translator: \n"
"Language-Team: Swahili\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: sw\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/release_notes.po\n"
"X-Crowdin-File-ID: 7216\n"
"Language: sw_KE\n"

#: ../../release_notes.rst:3
msgid "Release Notes"
msgstr ""

#: ../../release_notes.rst:8
msgid "Version History"
msgstr ""

#: ../../release_notes.rst:10
msgid "This table tracks the meta-package versions and the version of each Qiskit element installed:"
msgstr ""

#: ../../release_notes.rst:12
msgid "**Version History**"
msgstr ""

#: ../../release_notes.rst:16
msgid "For the ``0.7.0``, ``0.7.1``, and ``0.7.2`` meta-package releases the :ref:`versioning_strategy` policy was not formalized yet."
msgstr ""

#: ../../release_notes.rst:22
msgid "Notable Changes"
msgstr ""

#: ../../release_notes.rst:26
msgid "Qiskit 0.25.4"
msgstr ""

#: ../../release_notes.rst:31
msgid "Terra 0.17.2"
msgstr ""

#: ../../release_notes.rst:36 ../../release_notes.rst:243
#: ../../release_notes.rst:393 ../../release_notes.rst:2583
#: ../../release_notes.rst:3203 ../../release_notes.rst:3404
#: ../../release_notes.rst:3437 ../../release_notes.rst:3467
#: ../../release_notes.rst:3987 ../../release_notes.rst:4830
#: ../../release_notes.rst:5082 ../../release_notes.rst:5282
#: ../../release_notes.rst:6008 ../../release_notes.rst:7131
#: ../../release_notes.rst:7317 ../../release_notes.rst:7883
#: ../../release_notes.rst:8001 ../../release_notes.rst:8395
#: ../../release_notes.rst:8615 ../../release_notes.rst:10268
#: ../../release_notes.rst:11022 ../../release_notes.rst:11566
#: ../../release_notes.rst:11690 ../../release_notes.rst:12102
msgid "Prelude"
msgstr ""

#: ../../release_notes.rst:38
msgid "This is a bugfix release that fixes several issues from the 0.17.1 release. Most importantly this release fixes compatibility for the :class:`~qiskit.utils.QuantumInstance` class when running on backends that are based on the :class:`~qiskit.providers.BackendV1` abstract class. This fixes all the algorithms and applications built on :mod:`qiskit.algorithms` or :mod:`qiskit.opflow` when running on newer backends."
msgstr ""

#: ../../release_notes.rst:48 ../../release_notes.rst:157
#: ../../release_notes.rst:253 ../../release_notes.rst:318
#: ../../release_notes.rst:2277 ../../release_notes.rst:2923
#: ../../release_notes.rst:3051 ../../release_notes.rst:3163
#: ../../release_notes.rst:3374 ../../release_notes.rst:3452
#: ../../release_notes.rst:3479 ../../release_notes.rst:3510
#: ../../release_notes.rst:3569 ../../release_notes.rst:3660
#: ../../release_notes.rst:3729 ../../release_notes.rst:3762
#: ../../release_notes.rst:3797 ../../release_notes.rst:3845
#: ../../release_notes.rst:3891 ../../release_notes.rst:3968
#: ../../release_notes.rst:4742 ../../release_notes.rst:5044
#: ../../release_notes.rst:5260 ../../release_notes.rst:5726
#: ../../release_notes.rst:5899 ../../release_notes.rst:5921
#: ../../release_notes.rst:6931 ../../release_notes.rst:7288
#: ../../release_notes.rst:7433 ../../release_notes.rst:7506
#: ../../release_notes.rst:7670 ../../release_notes.rst:7725
#: ../../release_notes.rst:7760 ../../release_notes.rst:7797
#: ../../release_notes.rst:7845 ../../release_notes.rst:7944
#: ../../release_notes.rst:7977 ../../release_notes.rst:8266
#: ../../release_notes.rst:8499 ../../release_notes.rst:8546
#: ../../release_notes.rst:9999 ../../release_notes.rst:10836
#: ../../release_notes.rst:11505 ../../release_notes.rst:12038
#: ../../release_notes.rst:12732 ../../release_notes.rst:12831
#: ../../release_notes.rst:12916 ../../release_notes.rst:13128
#: ../../release_notes.rst:13355 ../../release_notes.rst:13454
msgid "Bug Fixes"
msgstr ""

#: ../../release_notes.rst:50
msgid "Fixed an issue with the :class:`~qiskit.transpiler.passes.BasisTranslator` transpiler pass which in some cases would translate gates already in the target basis. This would potentially result in both longer execution time and less optimal results. Fixed `#6085 <https://github.com/Qiskit/qiskit-terra/issues/6085>`__"
msgstr ""

#: ../../release_notes.rst:56
msgid "Fixed an issue in the :class:`~qiskit.algorithms.optimisers.SPSA` when the optimizer was initialized with a callback function via the ``callback`` kwarg would potentially cause an error to be raised."
msgstr ""

#: ../../release_notes.rst:60
msgid "Fixed an issue in the :meth:`qiskit.quantum_info.Statevector.expectation_value` and :meth:`qiskit.quantum_info.DensityMatrix.expectation_value`methods where the ``qargs`` kwarg was ignored if the operator was a :class:`~qiskit.quantum_info.Pauli` or :class:`~qiskit.quantum_info.SparsePauliOp` operator object. Fixed `#6303 <https://github.com/Qiskit/qiskit-terra/issues/6303>`__"
msgstr ""

#: ../../release_notes.rst:68
msgid "Fixed an issue in the :meth:`qiskit.quantum_info.Pauli.evolve` method which could have resulted in the incorrect Pauli being returned when evolving by a :class:`~qiskit.circuit.library.CZGate`, :class:`~qiskit.circuit.library.CYGate`, or a :class:`~qiskit.circuit.library.SwapGate` gate."
msgstr ""

#: ../../release_notes.rst:74
msgid "Fixed an issue in the :meth:`qiskit.opflow.SparseVectorStateFn.to_dict_fn` method, which previously had at most one entry for the all zero state due to an index error."
msgstr ""

#: ../../release_notes.rst:78
msgid "Fixed an issue in the :meth:`qiskit.opflow.SparseVectorStateFn.equals` method so that is properly returning ``True`` or ``False`` instead of a sparse vector comparison of the single elements."
msgstr ""

#: ../../release_notes.rst:82
msgid "Fixes an issue in the :class:`~qiskit.quantum_info.Statevector` and :class:`~qiskit.quantum_info.DensityMatrix` probability methods :meth:`qiskit.quantum_info.Statevector.probabilities`, :meth:`qiskit.quantum_info.Statevector.probabilities_dict`, :meth:`qiskit.quantum_info.DensityMatrix.probabilities`, :meth:`qiskit.quantum_info.DensityMatrix.probabilities_dict` where the returned probabilities could have incorrect ordering for certain values of the ``qargs`` kwarg. Fixed `#6320 <https://github.com/Qiskit/qiskit-terra/issues/6320>`__"
msgstr ""

#: ../../release_notes.rst:92
msgid "Fixed an issue where the :class:`~qiskit.opflow.TaperedPauliSumOp` class did not support the multiplication with :class:`~qiskit.circuit.ParameterExpression` object and also did not have a necessary :meth:`~qiskit.opflow.TaperedPauliSumOp.assign_parameters` method for working with :class:`~qiskit.circuit.ParameterExpression` objects. Fixed `#6127 <https://github.com/Qiskit/qiskit-terra/issues/6127>`__"
msgstr ""

#: ../../release_notes.rst:100
msgid "Fixed compatibility for the :class:`~qiskit.utils.QuantumInstance` class when running on backends that are based on the :class:`~qiskit.providers.BackendV1` abstract class. Fixed `#6280 <https://github.com/Qiskit/qiskit-terra/issues/6280>`__"
msgstr ""

#: ../../release_notes.rst:106 ../../release_notes.rst:137
msgid "Aer 0.8.2"
msgstr ""

#: ../../release_notes.rst:108 ../../release_notes.rst:113
#: ../../release_notes.rst:118 ../../release_notes.rst:123
#: ../../release_notes.rst:132 ../../release_notes.rst:183
#: ../../release_notes.rst:188 ../../release_notes.rst:193
#: ../../release_notes.rst:203 ../../release_notes.rst:208
#: ../../release_notes.rst:213 ../../release_notes.rst:218
#: ../../release_notes.rst:355 ../../release_notes.rst:363
#: ../../release_notes.rst:3099 ../../release_notes.rst:3108
#: ../../release_notes.rst:3113 ../../release_notes.rst:3118
#: ../../release_notes.rst:3123 ../../release_notes.rst:3145
#: ../../release_notes.rst:3185 ../../release_notes.rst:3190
#: ../../release_notes.rst:3195 ../../release_notes.rst:3396
#: ../../release_notes.rst:3415 ../../release_notes.rst:3420
#: ../../release_notes.rst:3425 ../../release_notes.rst:3498
#: ../../release_notes.rst:3521 ../../release_notes.rst:3526
#: ../../release_notes.rst:3531 ../../release_notes.rst:3536
#: ../../release_notes.rst:3689 ../../release_notes.rst:3694
#: ../../release_notes.rst:3699 ../../release_notes.rst:3708
#: ../../release_notes.rst:3737 ../../release_notes.rst:3742
#: ../../release_notes.rst:3747 ../../release_notes.rst:5790
#: ../../release_notes.rst:5795 ../../release_notes.rst:5800
#: ../../release_notes.rst:5805 ../../release_notes.rst:5864
#: ../../release_notes.rst:5869 ../../release_notes.rst:5874
#: ../../release_notes.rst:5879 ../../release_notes.rst:5980
#: ../../release_notes.rst:5985 ../../release_notes.rst:5990
#: ../../release_notes.rst:5995 ../../release_notes.rst:12940
#: ../../release_notes.rst:12958
msgid "No change"
msgstr ""

#: ../../release_notes.rst:111 ../../release_notes.rst:181
#: ../../release_notes.rst:211 ../../release_notes.rst:353
#: ../../release_notes.rst:3010
msgid "Ignis 0.6.0"
msgstr ""

#: ../../release_notes.rst:116 ../../release_notes.rst:186
#: ../../release_notes.rst:216 ../../release_notes.rst:358
msgid "Aqua 0.9.1"
msgstr ""

#: ../../release_notes.rst:121 ../../release_notes.rst:191
#: ../../release_notes.rst:221
msgid "IBM Q Provider 0.12.3"
msgstr ""

#: ../../release_notes.rst:127
msgid "Qiskit 0.25.3"
msgstr ""

#: ../../release_notes.rst:130 ../../release_notes.rst:201
#: ../../release_notes.rst:238
msgid "Terra 0.17.1"
msgstr ""

#: ../../release_notes.rst:142 ../../release_notes.rst:1383
#: ../../release_notes.rst:2863 ../../release_notes.rst:10522
#: ../../release_notes.rst:11378
msgid "Known Issues"
msgstr ""

#: ../../release_notes.rst:144
msgid "The :class:`~qiskit.providers.aer.library.SaveExpectationValue` and :class:`~qiskit.providers.aer.library.SaveExpectationValueVariance` have been disabled for the `extended_stabilizer` method of the :class:`~qiskit.providers.aer.QasmSimulator` and :class:`~qiskit.providers.aer.AerSimulator` due to returning the incorrect value for certain Pauli operator components. Refer to `#1227 <https://github.com/Qiskit/qiskit-aer/issues/1227>` for more information and examples."
msgstr ""

#: ../../release_notes.rst:159
msgid "Fixes performance issue with how the ``basis_gates`` configuration attribute was set. Previously there were unintended side-effects to the backend class which could cause repeated simulation runtime to incrementally increase. Refer to `#1229 <https://github.com/Qiskit/qiskit-aer/issues/1229>` for more information and examples."
msgstr ""

#: ../../release_notes.rst:166
msgid "Fixes a bug with the ``\"multiplexer\"`` simulator instruction where the order of target and control qubits was reversed to the order in the Qiskit instruction."
msgstr ""

#: ../../release_notes.rst:170
msgid "Fixes a bug introduced in 0.8.0 where GPU simulations would allocate unneeded host memory in addition to the GPU memory."
msgstr ""

#: ../../release_notes.rst:173
msgid "Fixes a bug in the ``stabilizer`` simulator method of the :class:`~qiskit.providers.aer.QasmSimulator` and :class:`~qiskit.providers.aer.AerSimulator` where the expectation value for the ``save_expectation_value`` and ``snapshot_expectation_value`` could have the wrong sign for certain ``Y`` Pauli's."
msgstr ""

#: ../../release_notes.rst:198
msgid "Qiskit 0.25.2"
msgstr ""

#: ../../release_notes.rst:206 ../../release_notes.rst:313
msgid "Aer 0.8.1"
msgstr ""

#: ../../release_notes.rst:226 ../../release_notes.rst:2562
#: ../../release_notes.rst:7117 ../../release_notes.rst:8357
#: ../../release_notes.rst:10076 ../../release_notes.rst:10897
#: ../../release_notes.rst:11535 ../../release_notes.rst:12060
#: ../../release_notes.rst:12760 ../../release_notes.rst:12838
msgid "Other Notes"
msgstr ""

#: ../../release_notes.rst:228
msgid "The :class:`qiskit.providers.ibmq.experiment.analysis_result.AnalysisResult` ``fit`` attribute is now optional."
msgstr ""

#: ../../release_notes.rst:233
msgid "Qiskit 0.25.1"
msgstr ""

#: ../../release_notes.rst:245
msgid "This is a bugfix release that fixes several issues from the 0.17.0 release. Most importantly this release fixes the incorrectly constructed sdist package for the 0.17.0 release which was not actually buildable and was blocking installation on platforms without precompiled binaries available."
msgstr ""

#: ../../release_notes.rst:255
msgid "Fixed an issue where the :attr:`~qiskit.circuit.QuantumCircuit.global_phase` attribute would not be preserved in the output :class:`~qiskit.circuit.QuantumCircuit` object when the :meth:`qiskit.circuit.QuantumCircuit.reverse_bits` method was called. For example::"
msgstr ""

#: ../../release_notes.rst:275
msgid "will now correctly print :math:`\\pi`."
msgstr ""

#: ../../release_notes.rst:277
msgid "Fixed an issue where the transpiler pass :class:`~qiskit.transpiler.passes.Unroller` didn't preserve global phase in case of nested instructions with one rule in their definition. Fixed `#6134 <https://github.com/Qiskit/qiskit-terra/issues/6134>`__"
msgstr ""

#: ../../release_notes.rst:283
msgid "Fixed an issue where the :attr:`~qiskit.circuit.ControlledGate.parameter` attribute of a :class:`~qiskit.circuit.ControlledGate` object built from a :class:`~qiskit.extensions.UnitaryGate` was not being set to the unitary matrix of the :class:`~qiskit.extensions.UnitaryGate` object. Previously, :meth:`~qiskit.extensions.UnitaryGate.control` was building a :class:`~qiskit.circuit.ControlledGate` with the ``parameter`` attribute set to the controlled version of :class:`~qiskit.extensions.UnitaryGate` matrix. This would lead to a modification of the ``parameter`` of the base :class:`~qiskit.extensions.UnitaryGate` object and subsequent calls to :meth:`~qiskit.circuit.ControlledGate.inverse` was creating the inverse of a double-controlled :class:`~qiskit.extensions.UnitaryGate`. Fixed `#5750 <https://github.com/Qiskit/qiskit-terra/issues/5750>`__"
msgstr ""

#: ../../release_notes.rst:297
msgid "Fixed an issue with the preset pass managers :class:`~qiskit.transpiler.preset_passmanagers.level_0_pass_manager` and :class:`~qiskit.transpiler.preset_passmanagers.level_1_pass_manager` (which corresponds to ``optimization_level`` 0 and 1 for :func:`~qiskit.compiler.transpile`) where in some cases they would produce circuits not in the requested basis."
msgstr ""

#: ../../release_notes.rst:304
msgid "Fix a bug where using :class:`~qiskit.algorithms.optimizers.SPSA` with automatic calibration of the learning rate and perturbation (i.e. ``learning_rate`` and ``perturbation`` are ``None`` in the initializer), stores the calibration for all future optimizations. Instead, the calibration should be done for each new objective function."
msgstr ""

#: ../../release_notes.rst:320
msgid "Fixed an issue with use of the ``matrix_product_state`` method of the :class:`~qiskit.providers.aer.AerSimulator` and :class:`~qiskit.providers.aer.QasmSimulator` simulators when running a noisy simulation with Kraus errors. Previously, the matrix product state simulation method would not propogate changes to neighboring qubits after applying the Kraus matrix. This has been fixed so the output from the simulation is correct. Fixed `#1184 <https://github.com/Qiskit/qiskit-aer/issues/1184>`__ and `#1205 <https://github.com/Qiskit/qiskit-aer/issues/1205>`__"
msgstr ""

#: ../../release_notes.rst:330
msgid "Fixed an issue where the :class:`qiskit.extensions.Initialize` instruction would disable measurement sampling optimization for the ``statevector`` and ``matrix_product_state`` simulation methods of the :class:`~qiskit.providers.aer.AerSimulator` and :class:`~qiskit.providers.aer.QasmSimulator` simulators, even when it was the first circuit instruction or applied to all qubits and hence deterministic. Fixed `#1210 <https://github.com/Qiskit/qiskit-aer/issues/1210>`__"
msgstr ""

#: ../../release_notes.rst:339
msgid "Fix an issue with the :class:`~qiskit.providers.aer.library.SaveStatevector` and :class:`~qiskit.providers.aer.extensions.SnapshotStatevector` instructions when used with the ``extended_stabilizer`` simulation method of the :class:`~qiskit.providers.aer.AerSimulator` and :class:`~qiskit.providers.aer.QasmSimulator` simulators where it would return an unnormalized statevector. Fixed `#1196 <https://github.com/Qiskit/qiskit-aer/issues/1210>`__"
msgstr ""

#: ../../release_notes.rst:347
msgid "The ``matrix_product_state`` simulation method now has support for it's previously missing set state instruction, :class:`qiskit.providers.aer.library.SetMatrixProductState`, which enables setting the state of a simulation in a circuit."
msgstr ""

#: ../../release_notes.rst:361 ../../release_notes.rst:3097
#: ../../release_notes.rst:3126
msgid "IBM Q Provider 0.12.2"
msgstr ""

#: ../../release_notes.rst:367
msgid "Qiskit 0.25.0"
msgstr ""

#: ../../release_notes.rst:369
msgid "This release officially deprecates the Qiskit Aqua project. Accordingly, in a future release the ``qiskit-aqua`` package will be removed from the Qiskit metapackage, which means in that future release ``pip install qiskit`` will no longer include ``qiskit-aqua``. The application modules that are provided by qiskit-aqua have been split into several new packages: ``qiskit-optimization``, ``qiskit-nature``, ``qiskit-machine-learning``, and ``qiskit-finance``. These packages can be installed by themselves (via the standard pip install command, e.g. ``pip install qiskit-nature``) or with the rest of the Qiskit metapackage as optional extras (e.g. ``pip install 'qiskit[finance,optimization]'`` or ``pip install 'qiskit[all]'`` The core algorithms and the operator flow now exist as part of qiskit-terra at :mod:`qiskit.algorithms` and :mod:`qiskit.opflow`. Depending on your existing usage of Aqua you should either use the application packages or the new modules in Qiskit Terra. For more details on how to migrate from Qiskit Aqua you can refer to the :ref:`aqua-migration`."
msgstr ""

#: ../../release_notes.rst:388
msgid "Terra 0.17.0"
msgstr ""

#: ../../release_notes.rst:395
msgid "The Qiskit Terra 0.17.0 includes many new features and bug fixes. The major new feature for this release is the introduction of the :mod:`qiskit.algorithms` and :mod:`qiskit.opflow` modules which were migrated and adapted from the :mod:`qiskit.aqua` project."
msgstr ""

#: ../../release_notes.rst:404 ../../release_notes.rst:2598
#: ../../release_notes.rst:3015 ../../release_notes.rst:3153
#: ../../release_notes.rst:3221 ../../release_notes.rst:3548
#: ../../release_notes.rst:3651 ../../release_notes.rst:3716
#: ../../release_notes.rst:3869 ../../release_notes.rst:3940
#: ../../release_notes.rst:4015 ../../release_notes.rst:4847
#: ../../release_notes.rst:5092 ../../release_notes.rst:5307
#: ../../release_notes.rst:5813 ../../release_notes.rst:5887
#: ../../release_notes.rst:6028 ../../release_notes.rst:7146
#: ../../release_notes.rst:7328 ../../release_notes.rst:7445
#: ../../release_notes.rst:7590 ../../release_notes.rst:7916
#: ../../release_notes.rst:8078 ../../release_notes.rst:8450
#: ../../release_notes.rst:8660 ../../release_notes.rst:10188
#: ../../release_notes.rst:10242 ../../release_notes.rst:10282
#: ../../release_notes.rst:11033 ../../release_notes.rst:11579
#: ../../release_notes.rst:11700 ../../release_notes.rst:12118
#: ../../release_notes.rst:12820 ../../release_notes.rst:13120
#: ../../release_notes.rst:13160 ../../release_notes.rst:13318
#: ../../release_notes.rst:13376 ../../release_notes.rst:13400
#: ../../release_notes.rst:13492 ../../release_notes.rst:13542
#: ../../release_notes.rst:13824 ../../release_notes.rst:13855
msgid "New Features"
msgstr ""

#: ../../release_notes.rst:406
msgid "The :py:func:`qiskit.pulse.call` function can now take a :class:`~qiskit.circuit.Parameter` object along with a parameterized subroutine. This enables assigning different values to the :class:`~qiskit.circuit.Parameter` objects for each subroutine call."
msgstr ""

#: ../../release_notes.rst:411 ../../release_notes.rst:6475
msgid "For example,"
msgstr ""

#: ../../release_notes.rst:427
msgid "The :class:`qiskit.providers.models.QasmBackendConfiguration` has a new field ``processor_type`` which can optionally be used to provide information about a backend's processor in the form: ``{\"family\": <str>, \"revision\": <str>, segment: <str>}``. For example: ``{\"family\": \"Canary\", \"revision\": \"1.0\", segment: \"A\"}``."
msgstr ""

#: ../../release_notes.rst:433
msgid "The :py:class:`qiskit.pulse.Schedule`, :py:class:`qiskit.pulse.Instruction`, and :py:class:`qiskit.pulse.Channel` classes now have a :attr:`~qiiskit.pulse.Schedule.parameter` property which will return any :class:`~qiskit.circuit.Parameter` objects used in the object and a :meth:`~qiskit.pulse.Schedule.is_parameterized()` method which will return ``True`` if any parameters are used in the object."
msgstr ""

#: ../../release_notes.rst:441 ../../release_notes.rst:464
#: ../../release_notes.rst:497 ../../release_notes.rst:783
#: ../../release_notes.rst:835 ../../release_notes.rst:849
#: ../../release_notes.rst:4027 ../../release_notes.rst:4551
#: ../../release_notes.rst:6537 ../../release_notes.rst:6553
#: ../../release_notes.rst:6570 ../../release_notes.rst:9247
#: ../../release_notes.rst:9500 ../../release_notes.rst:11268
msgid "For example:"
msgstr ""

#: ../../release_notes.rst:456
msgid "Added a :class:`~qiskit.circuit.library.PiecewiseChebyshev` to the :mod:`qiskit.circuit.library` for implementing a piecewise Chebyshev approximation of an input function. For a given function :math:`f(x)` and degree :math:`d`, this class class implements a piecewise polynomial Chebyshev approximation on :math:`n` qubits to :math:`f(x)` on the given intervals. All the polynomials in the approximation are of degree :math:`d`."
msgstr ""

#: ../../release_notes.rst:479
msgid "The :py:class:`~qiskit.providers.models.BackendProperties` class now has a :meth:`~qiskit.providers.models.BackendProperties.readout_length` method, which returns the readout length [sec] of the given qubit."
msgstr ""

#: ../../release_notes.rst:483
msgid "A new class, :py:class:`~qiskit.pulse.ScheduleBlock`, has been added to the :class:`qiskit.pulse` module. This class provides a new representation of a pulse program. This representation is best suited for the pulse builder syntax and is based on relative instruction ordering."
msgstr ""

#: ../../release_notes.rst:488
msgid "This representation takes ``alignment_context`` instead of specifying starting time ``t0`` for each instruction. The start time of instruction is implicitly allocated with the specified transformation and relative position of instructions."
msgstr ""

#: ../../release_notes.rst:493
msgid "The :py:class:`~qiskit.pulse.ScheduleBlock` allows for lazy instruction scheduling, meaning we can assign arbitrary parameters to the duration of instructions."
msgstr ""

#: ../../release_notes.rst:512
msgid "this code defines an experiment scanning a Gaussian pulse's duration followed by a measurement ``measure_sched``, i.e. a Rabi experiment. You can reuse the ``block`` object for every scanned duration by assigning a target duration value."
msgstr ""

#: ../../release_notes.rst:517
msgid "Added a new function :func:`~qiskit.visualization.array_to_latex` to the :mod:`qiskit.visualization` module that can be used to represent and visualize vectors and matrices with LaTeX."
msgstr ""

#: ../../release_notes.rst:529
msgid "The :class:`~qiskit.quantum_info.Statevector` and :class:`~qiskit.quantum_info.DensityMatrix` classes now have :meth:`~qiskit.quantum_info.Statevector.draw` methods which allow objects to be drawn as either text matrices, IPython Latex objects, Latex source, Q-spheres, Bloch spheres and Hinton plots. By default the output type is the equivalent output from ``__repr__`` but this default can be changed in a user config file by setting the ``state_drawer`` option. For example:"
msgstr ""

#: ../../release_notes.rst:549
msgid "Additionally, the :meth:`~qiskit.quantum_info.DensityMatrix.draw` method is now used for the ipython display of these classes, so if you change the default output type in a user config file then when a :class:`~qiskit.quantum_info.Statevector` or a :class:`~qiskit.quantum_info.DensityMatrix` object are displayed in a jupyter notebook that output type will be used for the object."
msgstr ""

#: ../../release_notes.rst:556
msgid "Pulse :class:`qiskit.pulse.Instruction` objects and parametric pulse objects (eg :class:`~qiskit.pulse.library.Gaussian` now support using :class:`~qiskit.circuit.Parameter` and :class:`~qiskit.circuit.ParameterExpression` objects for the ``duration`` parameter. For example:"
msgstr ""

#: ../../release_notes.rst:572
msgid "Note that while we can create an instruction with a parameterized ``duration`` adding an instruction with unbound parameter ``duration`` to a schedule is supported only by the newly introduced representation :class:`~qiskit.pulse.ScheduleBlock`. See the known issues release notes section for more details."
msgstr ""

#: ../../release_notes.rst:578
msgid "The :meth:`~qiskit.providers.basicaer.QasmSimulatorPy.run` method for the :class:`~qiskit.providers.basicaer.QasmSimulatorPy`, :class:`~qiskit.providers.basicaer.StatevectorSimulatorPy`, and :class:`~qiskit.providers.basicaer.UnitarySimulatorPy` backends now takes a :class:`~qiskit.circuit.QuantumCircuit` (or a list of :class:`~qiskit.circuit.QuantumCircuit` objects) as its input. The previous :class:`~qiskit.qobj.QasmQobj` object is still supported for now, but will be deprecated in a future release."
msgstr ""

#: ../../release_notes.rst:587 ../../release_notes.rst:2649
msgid "For an example of how to use this see::"
msgstr ""

#: ../../release_notes.rst:603
msgid "The :class:`~qiskit.transpiler.passes.CommutativeCancellation` transpiler pass has a new optional kwarg on the constructor ``basis_gates``, which takes the a list of the names of basis gates for the target backend. When specified the pass will only use gates in the ``basis_gates`` kwarg. Previously, the pass would automatically replace consecutive gates which commute with :class:`~qiskit.circuit.library.ZGate` with the :class:`~qiskit.circuit.library.U1Gate` unconditionally. The ``basis_gates`` kwarg enables you to specify which z-rotation gates are present in the target basis to avoid this."
msgstr ""

#: ../../release_notes.rst:613
msgid "The constructors of the :class:`~qiskit.circuit.Bit` class and subclasses, :class:`~qiskit.circuit.Qubit`, :class:`~qiskit.circuit.Clbit`, and :class:`~qiskit.circuit.AncillaQubit`, have been updated such that their two parameters, ``register`` and ``index`` are now optional. This enables the creation of bit objects that are independent of a register."
msgstr ""

#: ../../release_notes.rst:619
msgid "A new class, :class:`~qiskit.circuit.classicalfunction.BooleanExpression`, has been added to the :mod:`qiskit.circuit.classicalfunction` module. This class allows for creating an oracle from a Python boolean expression. For example:"
msgstr ""

#: ../../release_notes.rst:637
msgid "The :class:`~qiskit.circuit.classicalfunction.BooleanExpression` also includes a method, :meth:`~qiskit.circuit.classicalfunction.BooleanExpression.from_dimacs_file`, which allows loading formulas described in the `DIMACS-CNF <https://people.sc.fsu.edu/~jburkardt/data/cnf/cnf.html>`__ format. For example:"
msgstr ""

#: ../../release_notes.rst:680
msgid "Added a new class, :class:`~qiskit.circuit.library.PhaseOracle`, has been added to the :mod:`qiskit.circuit.library` module. This class enables the construction of phase oracle circuits from Python boolean expressions."
msgstr ""

#: ../../release_notes.rst:691
msgid "These phase oracles can be used as part of a larger algorithm, for example with :class:`qiskit.algorithms.AmplificationProblem`:"
msgstr ""

#: ../../release_notes.rst:706
msgid "The :class:`~qiskit.circuit.library.PhaseOracle` class also includes a :meth:`~qiskit.circuit.library.PhaseOracle.from_dimacs_file` method which enables constructing a phase oracle from a file describing a formula in the `DIMACS-CNF <https://people.sc.fsu.edu/~jburkardt/data/cnf/cnf.html>`__ format."
msgstr ""

#: ../../release_notes.rst:728
msgid "All transpiler passes (ie any instances of :class:`~qiskit.transpiler.BasePass`) are now directly callable. Calling a pass provides a convenient interface for running the pass on a :class:`~qiskit.circuit.QuantumCircuit` object."
msgstr ""

#: ../../release_notes.rst:733
msgid "For example, running a single transformation pass, such as :class:`~qiskit.transpiler.passes.BasisTranslator`, can be done with:"
msgstr ""

#: ../../release_notes.rst:749
msgid "When running an analysis pass, a property set (as ``dict`` or as :class:`~qiskit.transpiler.PropertySet`) needs to be added as a parameter and it might be modified \"in-place\". For example:"
msgstr ""

#: ../../release_notes.rst:767
msgid "The :class:`~qiskit.qobj.QasmQobjConfig` class now has an optional kwarg for ``meas_level`` and ``meas_return``. These fields can be used to enable generating :class:`~qiskit.qobj.QasmQobj` job payloads that support ``meas_level=1`` (kerneled data) for circuit jobs (previously this was only exposed for :class:`~qiskit.qobj.PulseQobj` objects). The :func:`~qiskit.compiler.assemble` function has been updated to set this field for :class:`~qiskit.qobj.QasmQobj` objects it generates."
msgstr ""

#: ../../release_notes.rst:776
msgid "A new :meth:`~qiskit.circuit.QuantumCircuit.tensor` method has been added to the :class:`~qiskit.circuit.QuantumCircuit` class. This method enables tensoring another circuit with an existing circuit. This method works analogously to :meth:`qiskit.quantum_info.Operator.tensor` and is consistent with the little-endian convention of Qiskit."
msgstr ""

#: ../../release_notes.rst:794
msgid "The :class:`qiskit.circuit.QuantumCircuit` class now supports arbitrary free form metadata with the :attr:`~qiskit.circuit.QuantumCircuit.metadata` attribute. A user (or program built on top of :class:`~qiskit.circuit.QuantumCircuit`) can attach metadata to a circuit for use in tracking the circuit. For example::"
msgstr ""

#: ../../release_notes.rst:805 ../../release_notes.rst:1886
#: ../../release_notes.rst:13725
msgid "or::"
msgstr ""

#: ../../release_notes.rst:813
msgid "This metadata will **not** be used for influencing the execution of the circuit but is just used for tracking the circuit for the lifetime of the object. The ``metadata`` attribute will persist between any circuit transforms including :func:`~qiskit.compiler.transpile` and :func:`~qiskit.compiler.assemble`. The expectation is for providers to associate the metadata in the result it returns, so that users can filter results based on circuit metadata the same way they can currently do with ``QuantumCircuit.name``."
msgstr ""

#: ../../release_notes.rst:822
msgid "Add a new operator class :class:`~qiskit.quantum_info.CNOTDihedral` has been added to the :mod:`qiskit.quantum_info` module. This class is used to represent the CNOT-Dihedral group, which is generated by the quantum gates :class:`~qiskit.circuit.library.CXGate`, :class:`~qiskit.circuit.library.TGate`, and :class:`~qiskit.circuit.library.XGate`."
msgstr ""

#: ../../release_notes.rst:829
msgid "Adds a ``&`` (``__and__``) binary operator to ``BaseOperator`` subclasses (eg :class:`qiskit.quantum_info.Operator`) in the :mod:`qiskit.quantum_info` module. This is shorthand to call the classes :meth:`~qiskit.quantum_info.Operator.compose` method (ie ``A & B == A.compose(B)``)."
msgstr ""

#: ../../release_notes.rst:843
msgid "Adds a ``&`` (``__and__``) binary operator to :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes. This is shorthand to call the classes :meth:`~qiskit.quantum_info.Statevector.evolve` method (ie ``psi & U == psi.evolve(U)``)."
msgstr ""

#: ../../release_notes.rst:857
msgid "A new a new 2-qubit gate, :class:`~qiskit.circuit.library.ECRGate`, the echo cross-resonance (ECR), has been added to the :mod:`qiskit.circuit.library` module along with a corresponding method, :meth:`~qiskit.circuit.QuantumCircuit.ecr` for the :class:`~qiskit.circuit.QuantumCircuit` class. The ECR gate is two :math:`CR(\\frac{π}{4})` pulses with an :class:`~qiskit.circuit.library.XGate` between them for the echo. This gate is locally equivalent to a :class:`~qiskit.circuit.library.CXGate` (can convert to a CNOT with local pre- or post-rotation). It is the native gate on current IBM hardware and compiling to it allows the pre-/post-rotations to be merged into the rest of the circuit."
msgstr ""

#: ../../release_notes.rst:869
msgid "A new kwarg ``approximation_degree`` has been added to the :func:`~qiskit.compiler.transpile` function for enabling approximate compilation. Valid values range from 0 to 1, and higher means less approximation. This is a heuristic dial to experiment with circuit approximations. The concrete interpretation of this number is left to each pass, which may use it to perform some approximate version of the pass. Specific examples include the :class:`~qiskit.transpiler.passes.UnitarySynthesis` pass or the or translators to discrete gate sets. If a pass does not support this option, it implies exact transformation."
msgstr ""

#: ../../release_notes.rst:880
msgid "Two new transpiler passess, :class:`~qiskit.transpiler.passes.GateDirection` and :class:`qiskit.transpiler.passes.CheckGateDirection`, were added to the :mod:`qiskit.transpiler.passes` module. These new passes are inteded to be more general replacements for :class:`~qiskit.transpiler.passes.CXDirection` and :class:`~qiskit.transpiler.passes.CheckCXDirection` (which are both now deprecated, see the deprecation notes for more details) that perform the same function but work with other gates beside just :class:`~qiskit.circuit.library.CXGate`."
msgstr ""

#: ../../release_notes.rst:890
msgid "When running on Windows, parallel execution with the :func:`~qiskit.tools.parallel_map` function can now be enabled (it is still disabled by default). To do this you can either set ``parallel = True`` in a user config file, or set the ``QISKIT_PARALLEL`` environment variable to ``TRUE`` (this will also effect :func:`~qiskit.compiler.transpile` and :func:`~qiskit.compiler.assemble` which both use :func:`~qiskit.tools.parallel_map` internally). It is important to note that when enabling parallelism on Windows there are limitations around how Python launches processes for Windows, see the Known Issues section below for more details on the limitations with parallel execution on Windows."
msgstr ""

#: ../../release_notes.rst:902
msgid "A new function, :func:`~qiskit.quantum_info.hellinger_distance`, for computing the Hellinger distance between two counts distributions has been added to the :mod:`qiskit.quantum_info` module."
msgstr ""

#: ../../release_notes.rst:906
msgid "The :func:`~qiskit.quantum_info.decompose_clifford` function in the :mod:`qiskit.quantum_info` module (which gets used internally by the :meth:`qiskit.quantum_info.Clifford.to_circuit` method) has a new kwarg ``method`` which enables selecting the synthesis method used by either setting it to ``'AG'`` or ``'greedy'``. By default for more than three qubits it is set to ``'greedy'`` which uses a non-optimal greedy compilation routine for Clifford elements synthesis, by Bravyi et. al., which typically yields better CX cost compared to the previously used Aaronson-Gottesman method (for more than two qubits). You can use the ``method`` kwarg to revert to the previous default Aaronson-Gottesman method by setting ``method='AG'``."
msgstr ""

#: ../../release_notes.rst:917
msgid "The :class:`~qiskit.extensions.Initialize` class in the :mod:`qiskit.extensions` module can now be constructed using an integer. The '1' bits of the integer will insert a :class:`~qiskit.circuit.Reset` and an :class:`~qiskit.circuit.library.XGate` into the circuit for the corresponding qubit. This will be done using the standard little-endian convention is qiskit, ie the rightmost bit of the integer will set qubit 0. For example, setting the parameter in :class:`~qiskit.extensions.Initialize` equal to ``5`` will set qubits 0 and 2 to value 1."
msgstr ""

#: ../../release_notes.rst:934
msgid "The :class:`~qiskit.extensions.Initialize` class in the :mod:`qiskit.extensions` module now supports constructing directly from a Pauli label (analogous to the :meth:`qiskit.quantum_info.Statevector.from_label` method). The Pauli label refer to basis states of the Pauli eigenstates Z, X, Y. These labels use Qiskit's standard little-endian notation, for example a label of ``'01'`` would initialize qubit 0 to :math:`|1\\rangle` and qubit 1 to :math:`|0\\rangle`."
msgstr ""

#: ../../release_notes.rst:950
msgid "The kwarg, ``template_list``, for the constructor of the :class:`qiskit.transpiler.passes.TemplateOptimization` transpiler pass now supports taking in a list of both :class:`~qiskit.circuit.QuantumCircuit` and :class:`~qiskit.dagcircuit.DAGDependency` objects. Previously, only :class:`~qiskit.circuit.QuantumCircuit` were accepted (which were internally converted to :class:`~qiskit.dagcircuit.DAGDependency` objects) in the input list."
msgstr ""

#: ../../release_notes.rst:959
msgid "A new transpiler pass, :py:class:`qiskit.transpiler.passes.RZXCalibrationBuilder`, capable of generating calibrations and adding them to a quantum circuit has been introduced. This pass takes calibrated :class:`~qiskit.circuit.library.CXGate` objects and creates the calibrations for :class:`qiskit.circuit.library.RZXGate` objects with an arbitrary rotation angle. The schedules are created by stretching and compressing the :class:`~qiskit.pulse.GaussianSquare` pulses of the echoed-cross resonance gates."
msgstr ""

#: ../../release_notes.rst:969
msgid "New template circuits for using :class:`qiskit.circuit.library.RZXGate` are added to the :mod:`qiskit.circuit.library` module (eg :class:`~qiskit.circuit.library.rzx_yz`). This enables pairing the :class:`~qiskit.transpiler.passes.TemplateOptimization` pass with the :py:class:`qiskit.transpiler.passes.RZXCalibrationBuilder` pass to automatically find and replace gate sequences, such as ``CNOT - P(theta) - CNOT``, with more efficent circuits based on :class:`qiskit.circuit.library.RZXGate` with a calibration."
msgstr ""

#: ../../release_notes.rst:978
msgid "The matplotlib output type for the :func:`~qiskit.visualization.circuit_drawer` and the :meth:`~qiskit.circuit.QuantumCircuit.draw` method for the :class:`~qiskit.circuit.QuantumCircuit` class now supports configuration files for setting the visualization style. In previous releases, there was basic functionality that allowed users to pass in a ``style`` kwarg that took in a ``dict`` to customize the colors and other display features of the ``mpl`` drawer. This has now been expanded so that these dictionaries can be loaded from JSON files directly without needing to pass a dictionary. This enables users to create new style files and use that style for visualizations by passing the style filename as a string to the ``style`` kwarg."
msgstr ""

#: ../../release_notes.rst:991
msgid "To leverage this feature you must set the ``circuit_mpl_style_path`` option in a user config file. This option should be set to the path you want qiskit to search for style JSON files. If specifying multiple path entries they should be separated by ``:``. For example, setting ``circuit_mpl_style_path = ~/.qiskit:~/user_styles`` in a user config file will look for JSON files in both ``~/.qiskit`` and ``~/user_styles``."
msgstr ""

#: ../../release_notes.rst:998
msgid "A new kwarg, ``format_marginal`` has been added to the function :func:`~qiskit.result.utils.marginal_counts` which when set to ``True`` formats the counts output according to the :attr:`~qiskit.circuit.QuantumCircuit.cregs` in the circuit and missing indices are represented with a ``_``. For example:"
msgstr ""

#: ../../release_notes.rst:1015
msgid "Improved the performance of :meth:`qiskit.quantum_info.Statevector.expectation_value`  and :meth:`qiskit.quantum_info.DensityMatrix.expectation_value` when the argument operator is a :class:`~qiskit.quantum_info.Pauli`  or :class:`~qiskit.quantum_info.SparsePauliOp`  operator."
msgstr ""

#: ../../release_notes.rst:1021
msgid "The user config file has 2 new configuration options, ``num_processes`` and ``parallel``, which are used to control the default behavior of :func:`~qiskit.tools.parallel_map`. The ``parallel`` option is a boolean that is used to dictate whether :func:`~qiskit.tools.parallel_map` will run in multiple processes or not. If it set to ``False`` calls to :func:`~qiskit.tools.parallel_map` will be executed serially, while setting it to ``True`` will enable parallel execution. The ``num_processes`` option takes an integer which sets how many CPUs to use when executing in parallel. By default it will use the number of CPU cores on a system."
msgstr ""

#: ../../release_notes.rst:1031
msgid "There are 2 new environment variables, ``QISKIT_PARALLEL`` and ``QISKIT_NUM_PROCS``, that can be used to control the default behavior of :func:`~qiskit.tools.parallel_map`. The ``QISKIT_PARALLEL`` option can be set to the ``TRUE`` (any capitalization) to set the default to run in multiple processes when :func:`~qiskit.tools.parallel_map` is called. If it is set to any other value :func:`~qiskit.tools.parallel_map` will be executed serially. ``QISKIT_NUM_PROCS`` takes an integer (for example ``QISKIT_NUM_PROCS=5``) which will be used as the default number of processes to run with. Both of these will take precedence over the equivalent option set in the user config file."
msgstr ""

#: ../../release_notes.rst:1043
msgid "A new method, :meth:`~qiskit.circuit.ParameterExpression.gradient`, has been added to the :class:`~qiskit.circuit.ParameterExpression` class. This method is used to  evaluate the gradient of a :class:`~qiskit.circuit.ParameterExpression` object."
msgstr ""

#: ../../release_notes.rst:1048
msgid "The ``__eq__`` method (ie what is called when the ``==`` operator is used) for the :class:`~qiskit.circuit.ParameterExpression` now allows for the comparison with a numeric value. Previously, it was only possible to compare two instances of :class:`~qiskit.circuit.ParameterExpression` with ``==``. For example::"
msgstr ""

#: ../../release_notes.rst:1062
msgid "The :class:`~qiskit.circuit.library.PauliFeatureMap` class in the :mod:`qiskit.circuit.library` module now supports adjusting the rotational factor, :math:`\\alpha`, by either setting using the kwarg ``alpha`` on the constructor or setting the :attr:`~qiskit.circuit.library.PauliFeatureMap.alpha` attribute after creation. Previously this value was fixed at ``2.0``. Adjusting this attribute allows for better control of decision boundaries and provides additional flexibility handling the input features without needing to explicitly scale them in the data set."
msgstr ""

#: ../../release_notes.rst:1072
msgid "A new :class:`~qiskit.circuit.Gate` class, :class:`~qiskit.circuit.library.PauliGate`, has been added the :class:`qiskit.circuit.library` module and corresponding method, :meth:`~qiskit.circuit.QuantumCircuit.pauli`,  was added to the :class:`~qiskit.circuit.QuantumCircuit` class. This new gate class enables applying several individual pauli gates to different qubits at the simultaneously. This is primarily useful for simulators which can use this new gate to more efficiently implement multiple simultaneous Pauli gates."
msgstr ""

#: ../../release_notes.rst:1081
msgid "Improve the :class:`qiskit.quantum_info.Pauli` operator. This class now represents and element from the full N-qubit Pauli group including complex coefficients. It now supports the Operator API methods including :meth:`~qiskit.quantum_info.Pauli.compose`, :meth:`~qiskit.quantum_info.Pauli.dot`, :meth:`~qiskit.quantum_info.Pauli.tensor` etc, where compose and dot are defined with respect to the full Pauli group."
msgstr ""

#: ../../release_notes.rst:1089
msgid "This class also allows conversion to and from the string representation of Pauli's for convenience."
msgstr ""

#: ../../release_notes.rst:1092
msgid "For example"
msgstr ""

#: ../../release_notes.rst:1102
msgid "Pauli's can also be directly appended to :class:`~qiskit.circuit.QuantumCircuit` objects"
msgstr ""

#: ../../release_notes.rst:1114
msgid "Additional methods allow computing when two Pauli's commute (using the :meth:`~qiskit.quantum_info.Pauli.commutes` method) or anticommute (using the :meth:`~qiskit.quantum_info.Pauli.anticommutes` method), and computing the Pauli resulting from Clifford conjugation :math:`P^\\prime = C.P.C^\\dagger` using the  :meth:`~qiskit.quantum_info.Pauli.evolve` method."
msgstr ""

#: ../../release_notes.rst:1121
msgid "See the API documentation of the :class:`~qiskit.quantum_info.Pauli` class for additional information."
msgstr ""

#: ../../release_notes.rst:1124
msgid "A new function, :func:`~qiskit.quantum_info.random_pauli`, for generating a random element of the N-qubit Pauli group has been added to the :mod:`qiskit.quantum_info` module."
msgstr ""

#: ../../release_notes.rst:1128
msgid "A new class, :class:`~qiskit.circuit.library.PiecewisePolynomialPauliRotations`, has been added to the :mod:`qiskit.circuit.library` module. This circuit library element is used for mapping a piecewise polynomial function, :math:`f(x)`, which is defined through breakpoints and coefficients, on qubit amplitudes. The breakpoints :math:`(x_0, ..., x_J)` are a subset of :math:`[0, 2^n-1]`, where :math:`n` is the number of state qubits. The corresponding coefficients :math:`[a_{j,1},...,a_{j,d}]`, where :math:`d` is the highest degree among all polynomials. Then :math:`f(x)` is defined as:"
msgstr ""

#: ../../release_notes.rst:1138
msgid "f(x) = \\begin{cases}\n"
"    0, x < x_0 \\\\\n"
"    \\sum_{i=0}^{i=d}a_{j,i} x^i, x_j \\leq x < x_{j+1}\n"
"    \\end{cases}"
msgstr ""

#: ../../release_notes.rst:1145
msgid "where we implicitly assume :math:`x_{J+1} = 2^n`. And the mapping applied to the amplitudes is given by"
msgstr ""

#: ../../release_notes.rst:1148
msgid "F|x\\rangle |0\\rangle = \\cos(p_j(x))|x\\rangle |0\\rangle + \\sin(p_j(x))|x\\rangle |1\\rangle"
msgstr ""

#: ../../release_notes.rst:1152
msgid "This mapping is based on controlled Pauli Y-rotations and constructed using the :class:`~qiskit.circuit.library.PolynomialPauliRotations`."
msgstr ""

#: ../../release_notes.rst:1155
msgid "A new module :mod:`qiskit.algorithms` has been introduced. This module contains functionality equivalent to what has previously been provided by the :mod:`qiskit.aqua.algorithms` module (which is now deprecated) and provides the building blocks for constructing quantum algorithms. For details on migrating from ``qiskit-aqua`` to this new module please refer to the migration guide :ref:`aqua-migration`"
msgstr ""

#: ../../release_notes.rst:1162
msgid "A new module :mod:`qiskit.opflow` has been introduced. This module contains functionality equivalent to what has previously been provided by the :mod:`qiskit.aqua.operators` module (which is now deprecated) and provides the operators and state functions which are used to build quantum algorithms. For details on migrating from ``qiskit-aqua`` to this new module please refer to the migration guide :ref:`aqua-migration`"
msgstr ""

#: ../../release_notes.rst:1170
msgid "This is the first release that includes precompiled binary wheels for the for Linux aarch64 systems. If you are running a manylinux2014 compatible aarch64 Linux system there are now precompiled wheels available on PyPI, you are no longer required to build from source to install qiskit-terra."
msgstr ""

#: ../../release_notes.rst:1176
msgid "The :func:`qiskit.quantum_info.process_fidelity` function is now able to be used with a non-unitary target channel. In this case the returned value is equivalent to the :func:`qiskit.quantum_info.state_fidelity` of the normalized :class:`qiskit.quantum_info.Choi` matrices for the channels."
msgstr ""

#: ../../release_notes.rst:1181
msgid "Note that the :func:`qiskit.quantum_info.average_gate_fidelity` and :func:`qiskit.quantum_info.gate_error` functions still require the target channel to be unitary and will raise an exception if it is not."
msgstr ""

#: ../../release_notes.rst:1185
msgid "Added a new pulse builder function, :func:`qiskit.pulse.macro`. This enables normal Python functions to be decorated as macros. This enables pulse builder functions to be used within the decorated function. The builder macro can then be called from within a pulse building context, enabling code reuse."
msgstr ""

#: ../../release_notes.rst:1191 ../../release_notes.rst:10488
msgid "For Example:"
msgstr ""

#: ../../release_notes.rst:1211
msgid "A new class, :class:`~qiskit.circuit.library.PauliTwoDesign`, was added to the :mod:`qiskit.circuit.library` which implements a particular form of a 2-design circuit from https://arxiv.org/pdf/1803.11173.pdf For instance, this circuit can look like:"
msgstr ""

#: ../../release_notes.rst:1222
msgid "A new pulse drawer :func:`qiskit.visualization.pulse_v2.draw` (which is aliased as ``qiskit.visualization.pulse_drawer_v2``) is now available. This new pulse drawer supports multiple new features not present in the original pulse drawer (:func:`~qiskit.visualization.pulse_drawer`)."
msgstr ""

#: ../../release_notes.rst:1228
msgid "Truncation of long pulse instructions."
msgstr ""

#: ../../release_notes.rst:1229
msgid "Visualization of parametric pulses."
msgstr ""

#: ../../release_notes.rst:1230
msgid "New stylesheets ``IQXStandard``, ``IQXSimple``, ``IQXDebugging``."
msgstr ""

#: ../../release_notes.rst:1231
msgid "Visualization of system info (channel frequency, etc...) by specifying :class:`qiskit.providers.Backend` objects for visualization."
msgstr ""

#: ../../release_notes.rst:1233
msgid "Specifying ``axis`` objects for plotting to allow further extension of generated plots, i.e., for publication manipulations."
msgstr ""

#: ../../release_notes.rst:1236
msgid "New stylesheets can take callback functions that dynamically modify the apperance of the output image, for example, reassembling a collection of channels, showing details of instructions, updating appearance of pulse envelopes, etc... You can create custom callback functions and feed them into a stylesheet instance to modify the figure appearance without modifying the drawer code. See pulse drawer module docstrings for details."
msgstr ""

#: ../../release_notes.rst:1243
msgid "Note that file saving is now delegated to Matplotlib. To save image files, you need to call ``savefig`` method with returned ``Figure`` object."
msgstr ""

#: ../../release_notes.rst:1246
msgid "Adds a :meth:`~qiskit.quantum_info.Statevector.reverse_qargs` method to the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes. This method reverses the order of subsystems in the states and is equivalent to the :meth:`qiskit.circuit.QuantumCircuit.reverse_bits` method for N-qubit states. For example:"
msgstr ""

#: ../../release_notes.rst:1265
msgid "Adds a :meth:`~qiskit.quantum_info.Operator.reverse_qargs` method to the :class:`qiskit.quantum_info.Operator` class. This method reverses the order of subsystems in the operator and is equivalent to the :meth:`qiskit.circuit.QuantumCircuit.reverse_bits` method for N-qubit operators. For example:"
msgstr ""

#: ../../release_notes.rst:1283
msgid "The ``latex`` output method for the :func:`qiskit.visualization.circuit_drawer` function and the :meth:`~qiskit.circuit.QuantumCircuit.draw` method now will use a user defined label on gates in the output visualization. For example::"
msgstr ""

#: ../../release_notes.rst:1298
msgid "The ``routing_method`` kwarg for the :func:`~qiskit.compiler.transpile` function now accepts a new option, ``'none'``. When ``routing_method='none'`` no routing pass will be run as part of the transpilation. If the circuit does not fit coupling map a :class:`~qiskit.transpiler.exceptions.TranspilerError` exception will be raised."
msgstr ""

#: ../../release_notes.rst:1305
msgid "A new gate class, :class:`~qiskit.circuit.library.RVGate`, was added to the :mod:`qiskit.circuit.library` module along with the corresponding :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.rv`. The :class:`~qiskit.circuit.library.RVGate` is a general rotation gate, similar to the :class:`~qiskit.circuit.library.UGate`, but instead of specifying Euler angles the three components of a rotation vector are specified where the direction of the vector specifies the rotation axis and the magnitude specifies the rotation angle about the axis in radians. For example::"
msgstr ""

#: ../../release_notes.rst:1329
msgid "Unbound :class:`~qiskit.circuit.Parameter` objects used in a :class:`~qiskit.circuit.QuantumCircuit` object will now be sorted by name. This will take effect for the parameters returned by the :attr:`~qiskit.circuit.QuantumCircuit.parameters` attribute. Additionally, the :meth:`qiskit.circuit.QuantumCircuit.bind_parameters` and :meth:`qiskit.circuit.QuantumCircuit.assign_parameters` methods can now take in a list of a values which will bind/assign them to the parameters in name-sorted order. Previously these methods would only take a dictionary of parameters and values. For example:"
msgstr ""

#: ../../release_notes.rst:1352
msgid "The constructors for the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes can now take a :class:`~qiskit.circuit.QuantumCircuit` object in to build a :class:`~qiskit.quantum_info.Statevector` and :class:`~qiskit.quantum_info.DensityMatrix` object from that circuit, assuming that the qubits are initialized in :math:`|0\\rangle`. For example:"
msgstr ""

#: ../../release_notes.rst:1371
msgid "New fake backend classes are available under ``qiskit.test.mock``. These included mocked versions of ``ibmq_casablanca``, ``ibmq_sydney``, ``ibmq_mumbai``, ``ibmq_lima``, ``ibmq_belem``, ``ibmq_quito``. As with the other fake backends, these include snapshots of calibration data (i.e. ``backend.defaults()``) and error data (i.e. ``backend.properties()``) taken from the real system, and can be used for local testing, compilation and simulation."
msgstr ""

#: ../../release_notes.rst:1385
msgid "Attempting to add an :class:`qiskit.pulse.Instruction` object with a parameterized ``duration`` (ie the value of ``duration`` is an unbound :class:`~qiskit.circuit.Parameter` or :class:`~qiskit.circuit.ParameterExpression` object) to a :class:`qiskit.pulse.Schedule` is not supported. Attempting to do so will result in ``UnassignedDurationError`` :class:`~qiskit.pulse.PulseError` being raised. This is a limitation of how the :class:`~qiskit.pulse.Instruction` overlap constraints are evaluated currently. This is supported by :class:`~qiskit.pulse.ScheduleBlock`, in which the overlap constraints are evaluated just before the execution."
msgstr ""

#: ../../release_notes.rst:1396
msgid "On Windows systems when parallel execution is enabled for :func:`~qiskit.tools.parallel_map` parallelism may not work when called from a script running outside of a ``if __name__ == '__main__':`` block. This is due to how Python launches parallel processes on Windows. If a ``RuntimeError`` or ``AttributeError`` are raised by scripts that call :func:`~qiskit.tools.parallel_map` (including using functions that use ``parallel_map()`` internally like :func:`~qiskit.compiler.transpile`) with Windows and parallelism enabled you can try embedding the script calls inside ``if __name__ == '__main__':`` to workaround the issue. For example::"
msgstr ""

#: ../../release_notes.rst:1420 ../../release_notes.rst:10549
msgid "should be changed to::"
msgstr ""

#: ../../release_notes.rst:1439
msgid "if any errors are encountered with parallelism on Windows."
msgstr ""

#: ../../release_notes.rst:1445 ../../release_notes.rst:2875
#: ../../release_notes.rst:3026 ../../release_notes.rst:3131
#: ../../release_notes.rst:3317 ../../release_notes.rst:3557
#: ../../release_notes.rst:3787 ../../release_notes.rst:3956
#: ../../release_notes.rst:4568 ../../release_notes.rst:4992
#: ../../release_notes.rst:5249 ../../release_notes.rst:5629
#: ../../release_notes.rst:5771 ../../release_notes.rst:5844
#: ../../release_notes.rst:6584 ../../release_notes.rst:7233
#: ../../release_notes.rst:7350 ../../release_notes.rst:7629
#: ../../release_notes.rst:7711 ../../release_notes.rst:7783
#: ../../release_notes.rst:7832 ../../release_notes.rst:7888
#: ../../release_notes.rst:8179 ../../release_notes.rst:8470
#: ../../release_notes.rst:8520 ../../release_notes.rst:9352
#: ../../release_notes.rst:10574 ../../release_notes.rst:11389
#: ../../release_notes.rst:11949 ../../release_notes.rst:12400
msgid "Upgrade Notes"
msgstr ""

#: ../../release_notes.rst:1447
msgid "The preset pass managers :class:`~qiskit.transpiler.preset_passmanagers.level_1_pass_manager`, :class:`~qiskit.transpiler.preset_passmanagers.level_2_pass_manager`, and :class:`~qiskit.transpiler.preset_passmanagers.level_3_pass_manager` (which are used for ``optimization_level`` 1, 2, and 3 in the :func:`~qiskit.compiler.transpile` and :func:`~qiskit.execute_function.execute` functions) now unconditionally use the :class:`~qiskit.transpiler.passes.Optimize1qGatesDecomposition` pass for 1 qubit gate optimization. Previously, these pass managers would use the :class:`~qiskit.transpiler.passes.Optimize1qGates` pass if the basis gates contained ``u1``, ``u2``, or ``u3``. If you want to still use the old :class:`~qiskit.transpiler.passes.Optimize1qGates` you will need to construct a custom :class:`~qiskit.transpiler.PassManager` with the pass."
msgstr ""

#: ../../release_notes.rst:1462
msgid "Following transpilation of a parameterized :class:`~qiskit.circuit.QuantumCircuit`, the :attr:`~qiskit.circuit.QuantumCircuit.global_phase` attribute of output circuit may no longer be returned in a simplified form, if the global phase is a :class:`~qiskit.circuit.ParameterExpression`."
msgstr ""

#: ../../release_notes.rst:1468 ../../release_notes.rst:2742
#: ../../release_notes.rst:4518 ../../release_notes.rst:6052
#: ../../release_notes.rst:6379 ../../release_notes.rst:9343
#: ../../release_notes.rst:11350
msgid "For example::"
msgstr ""

#: ../../release_notes.rst:1478
msgid "previously returned ``0``, but will now return ``-0.5*theta + 0.5*theta``. This change was necessary was to avoid a large runtime performance penalty as simplifying symbolic expressions can be quite slow, especially if there are many :class:`~qiskit.circuit.ParameterExpression` objects in a circuit."
msgstr ""

#: ../../release_notes.rst:1484
msgid "The :class:`~qiskit.providers.basicaer.BasicAerJob` job objects returned from BasicAer backends are now synchronous instances of :class:`~qiskit.providers.JobV1`. This means that calls to the :meth:`~qiskit.providers.basicaer.QasmSimulatorPy.run` will block until the simulation finishes executing. If you want to restore the previous async behavior you'll need to wrap the :meth:`~qiskit.providers.basicaer.QasmSimulatorPy.run` with something that will run in a seperate thread or process like ``futures.ThreadPoolExecutor`` or ``futures.ProcessPoolExecutor``."
msgstr ""

#: ../../release_notes.rst:1494
msgid "The ``allow_sample_measuring`` option for the BasicAer simulator :class:`~qiskit.providers.basicaer.QasmSimulatorPy` has changed from a default of ``False`` to ``True``. This was done to better reflect the actual default behavior of the simulator, which would use sample measuring if the input circuit supported it (even if it was not enabled). If you are running a circuit that doesn't support sample measurement (ie it has :class:`~qiskit.circuit.Reset` operations or if there are operations after a measurement on a qubit) you should make sure to explicitly set this option to ``False`` when you call :meth:`~qiskit.providers.basicaer.QasmSimulatorPy.run`."
msgstr ""

#: ../../release_notes.rst:1505
msgid "The :class:`~qiskit.transpiler.passes.CommutativeCancellation` transpiler pass is now aware of the target basis gates, which means it will only use gates in the specified basis. Previously, the pass would unconditionally replace consecutive gates which commute with :class:`~qiskit.circuit.library.ZGate` with the :class:`~qiskit.circuit.library.U1Gate`. However, now that the pass is basis aware and has a kwarg, ``basis_gates``, for specifying the target basis there is a potential change in behavior if the kwarg is not set. When the ``basis_gates`` kwarg is not used and there are no variable z-rotation gates in the circuit then no commutative cancellation will occur."
msgstr ""

#: ../../release_notes.rst:1516
msgid ":class:`~qiskit.circuit.Register` (which is the parent class for :class:`~qiskit.circuit.QuantumRegister` and :class:`~qiskit.circuit.ClassicalRegister` and :class:`~qiskit.circuit.Bit` (which is the parent class for :class:`~qiskit.circuit.Qubit` and :class:`~qiskit.circuit.Clbit`) objects are now immutable. In previous releases it was possible to adjust the value of a :attr:`~qiskit.circuit.QuantumRegister.size` or :attr:`~qiskit.circuit.QuantumRegister.name` attributes of a :class:`~qiskit.circuit.Register` object and the :attr:`~qiskit.circuit.Qubit.index` or :attr:`~qiskit.circuit.Qubit.register` attributes of a :class:`~qiskit.circuit.Bit` object after it was initially created. However this would lead to unsound behavior that would corrupt container structure that rely on a hash (such as a `dict`) since these attributes are treated as immutable properties of a register or bit (see `#4705 <https://github.com/Qiskit/qiskit-terra/issues/4705>`__ for more details). To avoid this unsound behavior this attributes of a :class:`~qiskit.circuit.Register` and :class:`~qiskit.circuit.Bit` are no longer settable after initial creation. If you were previously adjusting the objects at runtime you will now need to create a new ``Register`` or ``Bit`` object with the new values."
msgstr ""

#: ../../release_notes.rst:1538
msgid "The ``DAGCircuit.__eq__`` method (which is used by the ``==`` operator), which is used to check structural equality of :class:`~qiskit.dagcircuit.DAGCircuit` and :class:`~qiskit.circuit.QuantumCircuit` instances, will now include the :attr:`~qiskit.circuit.QuantumCircuit.global_phase` and :attr:`~qiskit.circuit.QuantumCircuit.calibrations` attributes in the fields checked for equality. This means that circuits which would have evaluated as equal in prior releases may not anymore if the ``global_phase`` or ``calibrations`` differ between the circuits. For example, in previous releases this would return ``True``::"
msgstr ""

#: ../../release_notes.rst:1561
msgid "However, now because the ``global_phase`` attribute of the circuits differ this will now return ``False``."
msgstr ""

#: ../../release_notes.rst:1564
msgid "The previously deprecated ``qubits()`` and ``clbits()`` methods on the :class:`~qiskit.dagcircuit.DAGCircuit` class, which were deprecated in the 0.15.0 Terra release, have been removed. Instead you should use the :attr:`~qiskit.dagcircuit.DAGCircuit.qubits` and :attr:`~qiskit.dagcircuit.DAGCircuit.clbits` attributes of the :class:`~qiskit.dagcircuit.DAGCircuit` class. For example, if you were running::"
msgstr ""

#: ../../release_notes.rst:1577
msgid "That would be replaced by::"
msgstr ""

#: ../../release_notes.rst:1584
msgid "The :class:`~qiskit.providers.models.PulseDefaults` returned by the fake pulse backends :py:class:`qiskit.test.mock.FakeOpenPulse2Q` and :py:class:`qiskit.test.mock.FakeOpenPulse3Q` have been updated to have more realistic pulse sequence definitions. If you are using these fake backend classes you may need to update your usage because of these changes."
msgstr ""

#: ../../release_notes.rst:1590
msgid "The default synthesis method used by :func:`~qiskit.quantum_info.decompose_clifford` function in the :mod:`~qiskit.quantum_info` module (which gets used internally by the :meth:`qiskit.quantum_info.Clifford.to_circuit` method) for more than 3 qubits now uses a non-optimal greedy compilation routine for Clifford elements synthesis, by Bravyi et. al., which typically yields better CX cost compared to the old default. If you need to revert to the previous Aaronson-Gottesman method this can be done by setting ``method='AG'``."
msgstr ""

#: ../../release_notes.rst:1599
msgid "The previously deprecated module ``qiskit.visualization.interactive``, which was deprecated in the 0.15.0 release, has now been removed. Instead you should use the matplotlib based visualizations:"
msgstr ""

#: ../../release_notes.rst:1606
msgid "Removed Interactive function"
msgstr ""

#: ../../release_notes.rst:1607
msgid "Equivalent matplotlib function"
msgstr ""

#: ../../release_notes.rst:1608
msgid "``iplot_bloch_multivector``"
msgstr ""

#: ../../release_notes.rst:1609
msgid ":func:`qiskit.visualization.plot_bloch_multivector`"
msgstr ""

#: ../../release_notes.rst:1610
msgid "``iplot_state_city``"
msgstr ""

#: ../../release_notes.rst:1611
msgid ":func:`qiskit.visualization.plot_state_city`"
msgstr ""

#: ../../release_notes.rst:1612
msgid "``iplot_state_qsphere``"
msgstr ""

#: ../../release_notes.rst:1613
msgid ":func:`qiskit.visualization.plot_state_qsphere`"
msgstr ""

#: ../../release_notes.rst:1614
msgid "``iplot_state_hinton``"
msgstr ""

#: ../../release_notes.rst:1615
msgid ":func:`qiskit.visualization.plot_state_hinton`"
msgstr ""

#: ../../release_notes.rst:1616
msgid "``iplot_histogram``"
msgstr ""

#: ../../release_notes.rst:1617
msgid ":func:`qiskit.visualization.plot_histogram`"
msgstr ""

#: ../../release_notes.rst:1618
msgid "``iplot_state_paulivec``"
msgstr ""

#: ../../release_notes.rst:1619
msgid ":func:`qiskit.visualization.plot_state_paulivec`"
msgstr ""

#: ../../release_notes.rst:1621
msgid "The ``qiskit.Aer`` and ``qiskit.IBMQ`` top level attributes are now lazy loaded. This means that the objects will now always exist and warnings will no longer be raised on import if ``qiskit-aer`` or ``qiskit-ibmq-provider`` are not installed (or can't be found by Python). If you were checking for the presence of ``qiskit-aer`` or ``qiskit-ibmq-provider`` using these module attributes and explicitly comparing to ``None`` or looking for the absence of the attribute this no longer will work because they are always defined as an object now. In other words running something like::"
msgstr ""

#: ../../release_notes.rst:1642
msgid "will no longer work. Instead to determine if those providers are present you can either explicitly use ``qiskit.providers.aer.Aer`` and ``qiskit.providers.ibmq.IBMQ``::"
msgstr ""

#: ../../release_notes.rst:1656
msgid "or check ``bool(qiskit.Aer)`` and ``bool(qiskit.IBMQ)`` instead, for example::"
msgstr ""

#: ../../release_notes.rst:1666
msgid "This change was necessary to avoid potential import cycle issues between the qiskit packages and also to improve the import time when Aer or IBMQ are not being used."
msgstr ""

#: ../../release_notes.rst:1670
msgid "The user config file option ``suppress_packaging_warnings`` option in the user config file and the ``QISKIT_SUPPRESS_PACKAGING_WARNINGS`` environment variable no longer has any effect and will be silently ignored. The warnings this option controlled have been removed and will no longer be emitted at import time from the ``qiskit`` module."
msgstr ""

#: ../../release_notes.rst:1676
msgid "The previously deprecated ``condition`` kwarg for :class:`qiskit.dagcircuit.DAGNode` constructor has been removed. It was deprecated in the 0.15.0 release. Instead you should now be setting the classical condition on the :class:`~qiskit.circuit.Instruction` object passed into the :class:`~qiskit.dagcircuit.DAGNode` constructor when creating a new ``op`` node."
msgstr ""

#: ../../release_notes.rst:1683
msgid "When creating a new :class:`~qiskit.circuit.Register` (which is the parent class for :class:`~qiskit.circuit.QuantumRegister` and :class:`~qiskit.circuit.ClassicalRegister`) or :class:`~qiskit.circuit.QuantumCircuit` object with a number of bits (eg ``QuantumCircuit(2)``), it is now required that number of bits are specified as an integer or another type which is castable to unambiguous integers(e.g. ``2.0``). Non-integer values will now raise an error as the intent in those cases was unclear (you can't have fractional bits). For more information on why this was changed refer to: `#4855 <https://github.com/Qiskit/qiskit-terra/issues/4855>`__"
msgstr ""

#: ../../release_notes.rst:1694
msgid "`networkx <https://networkx.org/>`__ is no longer a requirement for qiskit-terra. All the networkx usage inside qiskit-terra has been removed with the exception of 3 methods:"
msgstr ""

#: ../../release_notes.rst:1698
msgid ":class:`qiskit.dagcircuit.DAGCircuit.to_networkx`"
msgstr ""

#: ../../release_notes.rst:1699
msgid ":class:`qiskit.dagcircuit.DAGCircuit.from_networkx`"
msgstr ""

#: ../../release_notes.rst:1700
msgid ":class:`qiskit.dagcircuit.DAGDependency.to_networkx`"
msgstr ""

#: ../../release_notes.rst:1702
msgid "If you are using any of these methods you will need to manually install networkx in your environment to continue using them."
msgstr ""

#: ../../release_notes.rst:1705
msgid "By default on macOS with Python >=3.8 :func:`~qiskit.tools.parallel_map` will no longer run in multiple processes. This is a change from previous releases where the default behavior was that :func:`~qiskit.tools.parallel_map` would launch multiple processes. This change was made because with newer versions of macOS with Python 3.8 and 3.9 multiprocessing is either unreliable or adds significant overhead because of the change in Python 3.8 to launch new processes with ``spawn`` instead of ``fork``. To re-enable parallel execution on macOS with Python >= 3.8 you can use the user config file ``parallel`` option or set the environment variable ``QISKIT_PARALLEL`` to ``True``."
msgstr ""

#: ../../release_notes.rst:1716
msgid "The previously deprecated kwarg ``callback`` on the constructor for the :class:`~qiskit.transpiler.PassManager` class has been removed. This kwarg has been deprecated since the 0.13.0 release (April, 9th 2020). Instead you can pass the ``callback`` kwarg to the :meth:`qiskit.transpiler.PassManager.run` method directly. For example, if you were using::"
msgstr ""

#: ../../release_notes.rst:1734
msgid "this can be replaced with::"
msgstr ""

#: ../../release_notes.rst:1747
msgid "It is now no longer possible to instantiate a base channel without a prefix, such as :class:`qiskit.pulse.Channel` or :class:`qiskit.pulse.PulseChannel`. These classes are designed to classify types of different user facing channel classes, such as :class:`qiskit.pulse.DriveChannel`, but do not have a definition as a target resource. If you were previously directly instantiating either :class:`qiskit.pulse.Channel` or :class:`qiskit.pulse.PulseChannel`, this is no longer allowed. Please use the appropriate subclass."
msgstr ""

#: ../../release_notes.rst:1757
msgid "When the ``require_cp`` and/or ``require_tp`` kwargs of :func:`qiskit.quantum_info.process_fidelity`, :func:`qiskit.quantum_info.average_gate_fidelity`, :func:`qiskit.quantum_info.gate_error` are ``True``, they will now only log a warning rather than the previous behavior of raising a :class:`~qiskit.exceptions.QiskitError` exception if the input channel is non-CP or non-TP respectively."
msgstr ""

#: ../../release_notes.rst:1765
msgid "The :class:`~qiskit.circuit.library.QFT` class in the :mod:`qiskit.circuit.library` module now computes the Fourier transform using a little-endian representation of tensors, i.e. the state :math:`|1\\rangle` maps to :math:`|0\\rangle - |1\\rangle + |2\\rangle - ..` assuming the computational basis correspond to little-endian bit ordering of the integers. :math:`|0\\rangle = |000\\rangle, |1\\rangle = |001\\rangle`, etc. This was done to make it more consistent with the rest of Qiskit, which uses a little-endian convention for bit order. If you were depending on the previous bit order you can use the :meth:`~qiskit.circuit.library.QFT.reverse_bits` method to revert to the previous behavior. For example::"
msgstr ""

#: ../../release_notes.rst:1781
msgid "The ``qiskit.__qiskit_version__`` module attribute was previously a ``dict`` will now return a custom read-only ``Mapping`` object that checks the version of qiskit elements at runtime instead of at import time. This was done to speed up the import path of qiskit and eliminate a possible import cycle by only importing the element packages at runtime if the version is needed from the package. This should be fully compatible with the ``dict`` previously return and for most normal use cases there will be no difference. However, if some applications were relying on either mutating the contents or explicitly type checking it may require updates to adapt to this change."
msgstr ""

#: ../../release_notes.rst:1792
msgid "The ``qiskit.execute`` module has been renamed to :mod:`qiskit.execute_function`. This was necessary to avoid a potentical name conflict between the :func:`~qiskit.execute_function.execute` function which is re-exported as ``qiskit.execute``. ``qiskit.execute`` the function in some situations could conflict with ``qiskit.execute`` the module which would lead to a cryptic error because Python was treating ``qiskit.execute`` as the module when the intent was to the function or vice versa. The module rename was necessary to avoid this conflict. If you're importing ``qiskit.execute`` to get the module (typical usage was ``from qiskit.execute import execute``) you will need to update this to use ``qiskit.execute_function`` instead. ``qiskit.execute`` will now always resolve to the function."
msgstr ""

#: ../../release_notes.rst:1805
msgid "The ``qiskit.compiler.transpile``, ``qiskit.compiler.assemble``, ``qiskit.compiler.schedule``, and ``qiskit.compiler.sequence`` modules have been renamed to ``qiskit.compiler.transpiler``, ``qiskit.compiler.assembler``, ``qiskit.compiler.scheduler``, and ``qiskit.compiler.sequence`` respectively. This was necessary to avoid a potentical name conflict between the modules and the re-exported function paths :func:`qiskit.compiler.transpile`, :func:`qiskit.compiler.assemble`, :func:`qiskit.compiler.schedule`, and :func:`qiskit.compiler.sequence`. In some situations this name conflict between the module path and re-exported function path would lead to a cryptic error because Python was treating an import as the module when the intent was to use the function or vice versa. The module rename was necessary to avoid this conflict. If you were using the imports to get the modules before (typical usage would be like``from qiskit.compiler.transpile import transpile``) you will need to update this to use the new module paths. :func:`qiskit.compiler.transpile`, :func:`qiskit.compiler.assemble`, :func:`qiskit.compiler.schedule`, and :func:`qiskit.compiler.sequence` will now always resolve to the functions."
msgstr ""

#: ../../release_notes.rst:1824
msgid "The :class:`qiskit.quantum_info.Quaternion` class was moved from the ``qiskit.quantum_info.operator`` submodule to the ``qiskit.quantum_info.synthesis`` submodule to better reflect it's purpose. No change is required if you were importing it from the root :mod:`qiskit.quantum_info` module, but if you were importing from ``qiskit.quantum_info.operator`` you will need to update your import path."
msgstr ""

#: ../../release_notes.rst:1831
msgid "Removed the ``QuantumCircuit.mcmt`` method, which has been deprecated since the Qiskit Terra 0.14.0 release in April 2020. Instead of using the method, please use the :class:`~qiskit.circuit.library.MCMT` class instead to construct a multi-control multi-target gate and use the :meth:`qiskit.circuit.QuantumCircuit.append` or :meth:`qiskit.circuit.QuantumCircuit.compose` to add it to a circuit."
msgstr ""

#: ../../release_notes.rst:1839
msgid "For example, you can replace::"
msgstr ""

#: ../../release_notes.rst:1843
msgid "with::"
msgstr ""

#: ../../release_notes.rst:1849
msgid "Removed the ``QuantumCircuit.diag_gate`` method which has been deprecated since the Qiskit Terra 0.14.0 release in April 2020. Instead, use the :meth:`~qiskit.circuit.QuantumCircuit.diagonal` method of :class:`~qiskit.circuit.QuantumCircuit`."
msgstr ""

#: ../../release_notes.rst:1853
msgid "Removed the ``QuantumCircuit.ucy`` method which has been deprecated since the Qiskit Terra 0.14.0 release in April 2020. Instead, use the :meth:`~qiskit.circuit.QuantumCircuit.ucry` method of :class:`~qiskit.circuit.QuantumCircuit`."
msgstr ""

#: ../../release_notes.rst:1857
msgid "The previously deprecated ``mirror()`` method for :class:`qiskit.circuit.QuantumCircuit` has been removed. It was deprecated in the 0.15.0 release. The :meth:`qiskit.circuit.QuantumCircuit.reverse_ops` method should be used instead since mirroring could be confused with swapping the output qubits of the circuit. The ``reverse_ops()`` method only reverses the order of gates that are applied instead of mirroring."
msgstr ""

#: ../../release_notes.rst:1864
msgid "The previously deprecated support passing a float (for the ``scale`` kwarg as the first positional argument to the :meth:`qiskit.circuit.QuantumCircuit.draw` has been removed. It was deprecated in the 0.12.0 release. The first positional argument to the :meth:`qiskit.circuit.QuantumCircuit.draw` method is now the ``output`` kwarg which does not accept a float. Instead you should be using ``scale`` as a named kwarg instead of using it positionally."
msgstr ""

#: ../../release_notes.rst:1872
msgid "For example, if you were previously calling ``draw`` with::"
msgstr ""

#: ../../release_notes.rst:1879
msgid "this would now need to be::"
msgstr ""

#: ../../release_notes.rst:1890
msgid "Features of Qiskit Pulse (:mod:`qiskit.pulse`) which were deprecated in the 0.15.0 release (August, 2020) have been removed. The full set of changes are:"
msgstr ""

#: ../../release_notes.rst:1897
msgid "Module"
msgstr ""

#: ../../release_notes.rst:1898 ../../release_notes.rst:4595
#: ../../release_notes.rst:6725
msgid "Old"
msgstr ""

#: ../../release_notes.rst:1899 ../../release_notes.rst:4596
#: ../../release_notes.rst:6726
msgid "New"
msgstr ""

#: ../../release_notes.rst:1900 ../../release_notes.rst:1903
msgid "``qiskit.pulse.library``"
msgstr ""

#: ../../release_notes.rst:1901
msgid "``SamplePulse``"
msgstr ""

#: ../../release_notes.rst:1902
msgid ":class:`~qiskit.pulse.library.Waveform`"
msgstr ""

#: ../../release_notes.rst:1904
msgid "``ConstantPulse``"
msgstr ""

#: ../../release_notes.rst:1905
msgid ":class:`~qiskit.pulse.library.Constant`"
msgstr ""

#: ../../release_notes.rst:1906
msgid "(module rename)"
msgstr ""

#: ../../release_notes.rst:1907
msgid "``pulse.pulse_lib`` Module"
msgstr ""

#: ../../release_notes.rst:1908
msgid ":mod:`qiskit.pulse.library`"
msgstr ""

#: ../../release_notes.rst:1913 ../../release_notes.rst:4594
#: ../../release_notes.rst:9889
msgid "Class"
msgstr ""

#: ../../release_notes.rst:1914
msgid "Old method"
msgstr ""

#: ../../release_notes.rst:1915
msgid "New method"
msgstr ""

#: ../../release_notes.rst:1916
msgid ":class:`~qiskit.pulse.library.ParametricPulse`"
msgstr ""

#: ../../release_notes.rst:1917
msgid "``get_sample_pulse``"
msgstr ""

#: ../../release_notes.rst:1918
msgid ":class:`~qiskit.pulse.library.ParametricPulse.get_waveform`"
msgstr ""

#: ../../release_notes.rst:1919
msgid ":class:`~qiskit.pulse.instructions.Instruction`"
msgstr ""

#: ../../release_notes.rst:1920
msgid "``command``"
msgstr ""

#: ../../release_notes.rst:1921
msgid "N/A. Commands and Instructions have been unified. Use :meth:`~qiskit.pulse.instructions.Instruction.operands` to get information about the instruction data."
msgstr ""

#: ../../release_notes.rst:1924
msgid ":class:`~qiskit.pulse.instructions.Acquire`"
msgstr ""

#: ../../release_notes.rst:1925
msgid "``acquires``, ``mem_slots``, ``reg_slots``"
msgstr ""

#: ../../release_notes.rst:1926
msgid ":meth:`~qiskit.pulse.instructions.Acquire.acquire`, :meth:`~qiskit.pulse.instructions.Acquire.mem_slot`, :meth:`~qiskit.pulse.instructions.Acquire.reg_slot`. (The :class:`~qiskit.pulse.instructions.Acquire` instruction no longer broadcasts across multiple qubits.)"
msgstr ""

#: ../../release_notes.rst:1932
msgid "The dictionary previously held on :class:`~qiskit.dagcircuit.DAGCircuit` edges has been removed. Instead, edges now hold the :class:`~qiskit.circuit.Bit` instance which had previously been included in the dictionary as its ``'wire'`` field. Note that the NetworkX graph returned by :meth:`~qiskit.dagcircuit.DAGCircuit.to_networkx` will still have a dictionary for its edge attributes, but the ``'name'`` field will no longer be populated."
msgstr ""

#: ../../release_notes.rst:1940
msgid "The :attr:`~qiskit.circuit.QuantumCircuit.parameters` attribute of the :class:`~qiskit.circuit.QuantumCircuit` class no longer is returning a ``set``. Instead it returns a ``ParameterView`` object which implements all the methods that ``set`` offers (albeit deprecated). This was done to support a model that preserves name-sorted parameters. It should be fully compatible with any previous usage of the ``set`` returned by the :attr:`~qiskit.circuit.QuantumCircuit.parameters` attribute, except for where explicit type checking of a set was done."
msgstr ""

#: ../../release_notes.rst:1949
msgid "When running :func:`~qiskit.compiler.transpile` on a :class:`~qiskit.circuit.QuantumCircuit` with :meth:`~qiskit.circuit.QuantumCircuit.delay` instructions, the units will be converted to dt if the value of dt (sample time) is known to :func:`~qiskit.compiler.transpile`, either explicitly via the ``dt`` kwarg or via the :class:`~qiskit.providers.models.BackendConfiguration` for a ``Backend`` object passed in via the ``backend`` kwarg."
msgstr ""

#: ../../release_notes.rst:1957
msgid "The interpretation of ``meas_map`` (which is an attribute of a :class:`~qiskit.providers.models.PulseBackendConfiguration` object or as the corresponding ``meas_map`` kwarg on the :func:`~qiskit.compiler.schedule`, :func:`~qiskit.compiler.assemble`, :func:`~qiskit.compiler.sequence`, or :func:`~qiskit.execute_function.execute` functions) has been updated to better match the true constraints of the hardware. The format of this data is a list of lists, where the items in the inner list are integers specifying qubit labels. For instance::"
msgstr ""

#: ../../release_notes.rst:1970
msgid "Previously, the ``meas_map`` constraint was interpreted such that if one qubit was acquired (e.g. A), then all other qubits sharing a subgroup with that qubit (B and C) would have to be acquired at the same time and for the same duration. This constraint has been relaxed. One acquisition does not require more acquisitions. (If A is acquired, B and C do **not** need to be acquired.) Instead, qubits in the same measurement group cannot be acquired in a partially overlapping way -- think of the ``meas_map`` as specifying a shared acquisition resource (If we acquire A from ``t=1000`` to ``t=2000``, we cannot acquire B starting from ``1000<t<2000``). For example:"
msgstr ""

#: ../../release_notes.rst:2017 ../../release_notes.rst:2913
#: ../../release_notes.rst:3341 ../../release_notes.rst:4683
#: ../../release_notes.rst:5025 ../../release_notes.rst:5649
#: ../../release_notes.rst:6832 ../../release_notes.rst:7381
#: ../../release_notes.rst:7475 ../../release_notes.rst:7660
#: ../../release_notes.rst:8215 ../../release_notes.rst:8488
#: ../../release_notes.rst:9702 ../../release_notes.rst:10627
#: ../../release_notes.rst:11435 ../../release_notes.rst:11991
#: ../../release_notes.rst:12666
msgid "Deprecation Notes"
msgstr ""

#: ../../release_notes.rst:2019
msgid "Two new arguments have been added to :meth:`qiskit.dagcircuit.DAGNode.semantic_eq`, ``bit_indices1`` and ``bit_indices2``, which are expected to map the :class:`~qiskit.circuit.Bit` instances in each :class:`~qiskit.dagcircuit.DAGNode` to their index in ``qubits`` or ``clbits`` list of their respective :class:`~qiskit.dagcircuit.DAGCircuit`. During the deprecation period, these arguments are optional and when **not** specified the mappings will be automatically constructed based on the ``register`` and ``index`` properties of each :class:`~qiskit.circuit.Bit` instance. However, in a future release, they will be required arguments and the mapping will need to be supplied by the user."
msgstr ""

#: ../../release_notes.rst:2032
msgid "The :mod:`~qiskit.pulse` builder functions:"
msgstr ""

#: ../../release_notes.rst:2034
msgid ":py:func:`qiskit.pulse.call_circuit`"
msgstr ""

#: ../../release_notes.rst:2035
msgid ":py:func:`qiskit.pulse.call_schedule`"
msgstr ""

#: ../../release_notes.rst:2037
msgid "are deprecated and will be removed in a future release. These functions are unified into :py:func:`qiskit.pulse.call` which should be used instead."
msgstr ""

#: ../../release_notes.rst:2041
msgid "The :class:`qiskit.pulse.Schedule` method :py:meth:`qiskit.pulse.Schedule.flatten` method is deprecated and will be removed in a future release. Instead you can use the :py:func:`qiskit.pulse.transforms.flatten` function which will perform the same operation."
msgstr ""

#: ../../release_notes.rst:2047
msgid "The :meth:`~qiskit.pulse.channels.Channel.assign_parameters` for the following classes:"
msgstr ""

#: ../../release_notes.rst:2050
msgid ":py:class:`qiskit.pulse.channels.Channel`,"
msgstr ""

#: ../../release_notes.rst:2051
msgid ":py:class:`qiskit.pulse.library.Pulse`,"
msgstr ""

#: ../../release_notes.rst:2052
msgid ":py:class:`qiskit.pulse.instructions.Instruction`,"
msgstr ""

#: ../../release_notes.rst:2054
msgid "and all their subclasses is now deprecated and will be removed in a future release. This functionality has been subsumed :py:class:`~qiskit.pulse.ScheduleBlock` which is the future direction for constructing parameterized pulse programs."
msgstr ""

#: ../../release_notes.rst:2059
msgid "The :attr:`~qiskit.pulse.channels.Channel.parameters` attribute for the following clasess:"
msgstr ""

#: ../../release_notes.rst:2062
msgid ":py:class:`~qiskit.pulse.channels.Channel`"
msgstr ""

#: ../../release_notes.rst:2063
msgid ":py:class:`~qiskit.pulse.instructions.Instruction`."
msgstr ""

#: ../../release_notes.rst:2065
msgid "is deprecated and will be removed in a future release. This functionality has been subsumed :py:class:`~qiskit.pulse.ScheduleBlock` which is the future direction for constructing parameterized pulse programs."
msgstr ""

#: ../../release_notes.rst:2069 ../../release_notes.rst:2915
msgid "Python 3.6 support has been deprecated and will be removed in a future release. When support is removed you will need to upgrade the Python version you're using to Python 3.7 or above."
msgstr ""

#: ../../release_notes.rst:2073
msgid "Two :class:`~qiskit.circuit.QuantumCircuit` methods :meth:`~qiskit.circuit.QuantumCircuit.combine` and :meth:`~qiskit.circuit.QuantumCircuit.extend` along with their corresponding Python operators ``+`` and ``+=`` are deprecated and will be removed in a future release. Instead the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.compose` should be used. The :meth:`~qiskit.circuit.QuantumCircuit.compose` method allows more flexibility in composing two circuits that do not have matching registers. It does not, however, automatically add qubits/clbits unlike the deprecated methods. To add a circuit on new qubits/clbits, the :meth:`qiskit.circuit.QuantumCircuit.tensor` method can be used. For example::"
msgstr ""

#: ../../release_notes.rst:2108
msgid "Support for passing :class:`~qiskit.circuit.Qubit` instances to the ``qubits`` kwarg of the :meth:`qiskit.transpiler.InstructionDurations.get` method has been deprecated and will be removed in a future release. Instead, you should call the :meth:`~qiskit.transpiler.InstructionDurations.get` method with the integer indices of the desired qubits."
msgstr ""

#: ../../release_notes.rst:2115
msgid "Using ``@`` (``__matmul__``) for invoking the ``compose`` method of ``BaseOperator`` subclasses (eg :class:`~qiskit.quantum_info.Operator`) is deprecated and will be removed in a future release. The :meth:`qiskit.quantum_info.Operator.compose` method can be used directly or also invoked using the ``&`` (``__and__``) operator."
msgstr ""

#: ../../release_notes.rst:2121
msgid "Using ``*`` (``__mul__``) for calling the :meth:`~qiskit.quantum_info.Operator.dot` method of ``BaseOperator`` subclasses (eg :class:`qiskit.quantum_info.Operator`) is deprecated and will be removed in a future release. Instead you can just call the :meth:`~qiskit.quantum_info.Operator.dot` directly."
msgstr ""

#: ../../release_notes.rst:2127
msgid "Using ``@`` (``__matmul__``) for invoking the :meth:`~qiskit.quantum_info.Statevector.evolve` method of the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes is deprecated and will be removed in a future release.. The ``evolve`` method can be used directly or also invoked using the ``&`` (``__and__``) operator."
msgstr ""

#: ../../release_notes.rst:2134
msgid "The ``qiskit.pulse.schedule.ParameterizedSchedule`` class has been deprecated and will be removed in a future release. Instead you can directly parameterize pulse :class:`~qiskit.pulse.Schedule` objects with a :class:`~qiskit.circuit.Parameter` object, for example::"
msgstr ""

#: ../../release_notes.rst:2147
msgid "The :class:`qiskit.pulse.ScheduleComponent` class in the :mod:`qiskit.pulse` module has been deprecated and will be removed in a future release. Its usage should be replaced either using a :class:`qiskit.pulse.Schedule` or :class:`qiskit.pulse.Instruction` directly. Additionally, the primary purpose of the ``ScheduleComponent`` class was as a common base class for both :class:`~qiskit.pulse.Schedule` and :class:`~qiskit.pulse.Instruction` for any place that was explicitly type checking or documenting accepting a ``ScheduleComponent`` input should be updated to accept :class:`~qiskit.pulse.Instruction` or :class:`~qiskit.pulse.Schedule`."
msgstr ""

#: ../../release_notes.rst:2158
msgid "The JSON Schema files and usage for the IBMQ API payloads are deprecated and will be removed in a future release. This includes everything under the :mod:`qiskit.schemas` module and the :mod:`qiskit.validation` module. This also includes the ``validate`` kwargs for :meth:`qiskit.qobj.QasmQobj.to_dict` and :meth:`qiskit.qobj.QasmQobj.to_dict` along with the module level fastjsonschema validators in :mod:`qiskit.qobj` (which do not raise a deprecation warning). The schema files have been moved to the `Qiskit/ibmq-schemas <https://github.com/Qiskit/ibmq-schemas>`__ repository and those should be treated as the canonical versions of the API schemas. Moving forward only those schemas will recieve updates and will be used as the source of truth for the schemas. If you were relying on the schemas bundled in qiskit-terra you should update to use that repository instead."
msgstr ""

#: ../../release_notes.rst:2173
msgid "The :mod:`qiskit.util` module has been deprecated and will be removed in a future release. It has been replaced by :mod:`qiskit.utils` which provides  the same functionality and will be expanded in the future. Note that no ``DeprecationWarning`` will be emitted regarding this deprecation since it was not feasible on Python 3.6."
msgstr ""

#: ../../release_notes.rst:2179
msgid "The :class:`~qiskit.transpiler.passes.CXDirection` transpiler pass in the :mod:`qiskit.transpiler.passes` module has been deprecated and will be removed in a future release. Instead the :class:`~qiskit.transpiler.GateDirection` should be used. It behaves identically to the :class:`~qiskit.transpiler.passes.CXDirection` except that it now also supports transforming a circuit with :class:`~qiskit.circuit.library.ECRGate` gates in addition to :class:`~qiskit.circuit.library.CXGate` gates."
msgstr ""

#: ../../release_notes.rst:2188
msgid "The :class:`~qiskit.transpiler.passes.CheckCXDirection` transpiler pass in the :mod:`qiskit.transpiler.passes` module has been deprecated and will be removed in a future release. Instead the :class:`~qiskit.transpiler.CheckGateDirection` pass should be used. It behaves identically to the :class:`~qiskit.transpiler.passes.CheckCXDirection` except that it now also supports checking the direction of all 2-qubit gates, not just :class:`~qiskit.circuit.library.CXGate` gates."
msgstr ""

#: ../../release_notes.rst:2197
msgid "The :class:`~qiskit.circuit.library.WeightedAdder` method :meth:`~qiskit.circuit.library.WeightedAdder.num_ancilla_qubits` is deprecated and will be removed in a future release. It has been replaced with the :attr:`qiskit.circuit.library.WeightedAdder.num_ancillas` attribute which is consistent with other circuit libraries' APIs."
msgstr ""

#: ../../release_notes.rst:2203
msgid "The following legacy methods of the :class:`qiskit.quantum_info.Pauli` class have been deprecated. See the method documentation for replacement use in the updated Pauli class."
msgstr ""

#: ../../release_notes.rst:2207
msgid ":meth:`~qiskit.quantum_info.Pauli.from_label`"
msgstr ""

#: ../../release_notes.rst:2208
msgid ":meth:`~qiskit.quantum_info.Pauli.sgn_prod`"
msgstr ""

#: ../../release_notes.rst:2209
msgid ":meth:`~qiskit.quantum_info.Pauli.to_spmatrix`"
msgstr ""

#: ../../release_notes.rst:2210
msgid ":meth:`~qiskit.quantum_info.Pauli.kron`"
msgstr ""

#: ../../release_notes.rst:2211
msgid ":meth:`~qiskit.quantum_info.Pauli.update_z`"
msgstr ""

#: ../../release_notes.rst:2212
msgid ":meth:`~qiskit.quantum_info.Pauli.update_x`"
msgstr ""

#: ../../release_notes.rst:2213
msgid ":meth:`~qiskit.quantum_info.Pauli.insert_paulis`"
msgstr ""

#: ../../release_notes.rst:2214
msgid ":meth:`~qiskit.quantum_info.Pauli.append_paulis`"
msgstr ""

#: ../../release_notes.rst:2215
msgid ":meth:`~qiskit.quantum_info.Pauli.delete_qubits`"
msgstr ""

#: ../../release_notes.rst:2216
msgid ":meth:`~qiskit.quantum_info.Pauli.pauli_single`"
msgstr ""

#: ../../release_notes.rst:2217
msgid ":meth:`~qiskit.quantum_info.Pauli.random`"
msgstr ""

#: ../../release_notes.rst:2219
msgid "Using a ``list`` or ``numpy.ndarray`` as the ``channel`` or ``target`` argument for the :func:`qiskit.quantum_info.process_fidelity`, :func:`qiskit.quantum_info.average_gate_fidelity`, :func:`qiskit.quantum_info.gate_error`, and :func:`qiskit.quantum_info.diamond_norm` functions has been deprecated and will not be supported in a future release. The inputs should instead be a :class:`~qiskit.circuit.Gate` or a ``BaseOperator`` subclass object (eg. :class:`~qiskit.quantum_info.Operator`, :class:`~qiskit.quantum_info.Choi`, etc.)"
msgstr ""

#: ../../release_notes.rst:2229
msgid "Accessing references from :class:`~qiskit.circuit.Qubit` and :class:`~qiskit.circuit.Clbit` instances to their containing registers via the :attr:`~qiskit.circuit.Qubit.register` or :attr:`~qiskit.circuit.Qubit.index` properties has been deprecated and will be removed in a future release. Instead, :class:`~qiskit.circuit.Register` objects can be queried to find the :class:`~qiskit.circuit.Bit` objects they contain."
msgstr ""

#: ../../release_notes.rst:2237
msgid "The current functionality of the :func:`qiskit.visualization.pulse_drawer` function is deprecated and will be replaced by :func:`qiskit.visualization.pulse_drawer_v2` (which is not backwards compatible) in a future release."
msgstr ""

#: ../../release_notes.rst:2242
msgid "The use of methods inherited from the ``set`` type on the output of the :attr:`~qiskit.circuit.QuantumCircuit.parameters` attribute (which used to be a ``set``) of the :class:`~qiskit.circuit.QuantumCircuit` class are deprecated and will be removed in a future release. This includes the methods from the ``add()``, ``difference()``, ``difference_update()``, ``discard()``, ``intersection()``, ``intersection_update()``, ``issubset()``, ``issuperset()``, ``symmetric_difference()``, ``symmetric_difference_update()``, ``union()``, ``update()``, ``__isub__()`` (which is the ``-=`` operator), and ``__ixor__()`` (which is the ``^=`` operator)."
msgstr ""

#: ../../release_notes.rst:2253
msgid "The name of the first (and only) positional argument for the :meth:`qiskit.circuit.QuantumCircuit.bind_parameters` method has changed from ``value_dict`` to ``values``. The passing an argument in with the name ``values_dict`` is deprecated and will be removed in future release. For example, if you were previously calling :meth:`~qiskit.circuit.QuantumCircuit.bind_parameters` with a call like: ``bind_parameters(values_dict={})`` this is deprecated and should be replaced by ``bind_parameters(values={})`` or even better just pass the argument positionally ``bind_parameters({})``."
msgstr ""

#: ../../release_notes.rst:2263
msgid "The name of the first (and only) positional argument for the :meth:`qiskit.circuit.QuantumCircuit.assign_parameters` method has changed from ``param_dict`` to ``parameters``. Passing an argument in with the name ``param_dict`` is deprecated and will be removed in future release. For example, if you were previously calling :meth:`~qiskit.circuit.QuantumCircuit.assign_parameters` with a call like: ``assign_parameters(param_dict={})`` this is deprecated and should be replaced by ``assign_parameters(values={})`` or even better just pass the argument positionally ``assign_parameters({})``."
msgstr ""

#: ../../release_notes.rst:2279
msgid "Fixed an issue where the :func:`~qiskit.execute_function.execute` function would raise :class:`~qiskit.exceptions.QiskitError` exception when a :class:`~qiskit.circuit.ParameterVector` object was passed in for the ``parameter_bind`` kwarg. parameter. For example, it is now possible to call something like::"
msgstr ""

#: ../../release_notes.rst:2287
msgid "where ``pv1`` and ``pv2`` are :class:`~qiskit.circuit.ParameterVector` objects. Fixed `#5467 <https://github.com/Qiskit/qiskit-terra/issues/5467>`__"
msgstr ""

#: ../../release_notes.rst:2291
msgid "Fixed an issue with the labels of parametric pulses in the :class:`~qiskit.qobj.PulseQobjInstruction` class were not being properly set as they are with sampled pulses. This also means that pulse names that are imported from the :class:`~qiskit.providers.models.PulseDefaults` returned by a :class:`~qiskit.providers.Backend`, such as ``x90``, ``x90m``, etc, will properly be set. Fixed `#5363 <https://github.com/Qiskit/qiskit-terra/issues/5363>`__"
msgstr ""

#: ../../release_notes.rst:2299
msgid "Fixed an issue where unbound parameters only occurring in the :attr:`~qiskit.circuit.QuantumCircuit.global_phase` attribute of a :class:`~qiskit.circuit.QuantumCircuit` object would not show in the :attr:`~qiskit.circuit.QuantumCircuit.parameters` attribute and could not be bound. Fixed `#5806 <https://github.com/Qiskit/qiskit-terra/issues/5806>`__"
msgstr ""

#: ../../release_notes.rst:2306
msgid "The :attr:`~qiskit.circuit.QuantumCircuit.calibrations` attribute of :class:`~qiskit.circuit.QuantumCircuit` objects are now preserved when the ``+=`` (ie the :meth:`~qiskit.circuit.QuantumCircuit.extend` method) and the ``+`` (ie the :meth:`~qiskit.circuit.QuantumCircuit.combine` method) are used. Fixed `#5930 <https://github.com/Qiskit/qiskit-terra/pull/5930>`__ and `#5908 <https://github.com/Qiskit/qiskit-terra/issues/5908>`__"
msgstr ""

#: ../../release_notes.rst:2314
msgid "The :attr:`~qiskit.circuit.Register.name` setter method of class :class:`~qiskit.circuit.Register` (which is the parent class of :class:`~qiskit.circuit.QuantumRegister` and :class:`~qiskit.circuit.ClassicalRegister`) previously did not check if the assigned string was a valid register name as per the `OpenQASM specification <https://arxiv.org/pdf/1707.03429v2.pdf>`__. This check was previously only performed when the name was specified in the constructor, this has now been fixed so that setting the ``name`` attribute directly with an invalid value will now also raise an exception. Fixed `#5461 <https://github.com/Qiskit/qiskit-terra/issues/5461>`__"
msgstr ""

#: ../../release_notes.rst:2326
msgid "Fixed an issue with the :func:`qiskit.visualization.circuit_drawer` function and :meth:`qiskit.circuit.QuantumCircuit.draw` method when visualizing a :class:`~qiskit.circuit.QuantumCircuit` with a :class:`~qiskit.circuit.Gate` that has a classical condition after a :class:`~qiskit.circuit.Measure` that used the same :class:`~qiskit.circuit.ClassicalRegister`, it was possible for the conditional :class:`~qiskit.circuit.Gate` to be displayed to the left of the :class:`~qiskit.circuit.Measure`. Fixed `#5387 <https://github.com/Qiskit/qiskit-terra/issues/5387>`__"
msgstr ""

#: ../../release_notes.rst:2336
msgid "In the transpiler pass :class:`qiskit.transpiler.passes.CSPLayout` a bias towards lower numbered qubits could be observed. This undesireable bias has been fixed by shuffling the candidates to randomize the results. Furthermore, the usage of the :class:`~qiskit.transpiler.passes.CSPLayout` pass in the :mod:`~qiskit.transpiler.preset_passmanagers` (for level 2 and 3) has been adjusted to use a configured seed if the ``seed_transpiler`` kwarg is set when :func:`~qiskit.compiler.transpile` is called. Fixed `#5990 <https://github.com/Qiskit/qiskit-terra/issues/5990>`__"
msgstr ""

#: ../../release_notes.rst:2345
msgid "Fixes a bug where the ``channels`` field for a :class:`~qiskit.providers.models.PulseBackendConfiguration` object was not being included in the output of the :class:`qiskit.providers.models.PulseBackendConfiguration.to_dict` method. Fixed `#5579 <https://github.com/Qiskit/qiskit-terra/issues/5579>`__"
msgstr ""

#: ../../release_notes.rst:2351
msgid "Fixed the ``'circular'`` entanglement in the :class:`qiskit.circuit.library.NLocal` circuit class for the edge case where the circuit has the same size as the entanglement block (e.g. a two-qubit circuit and CZ entanglement gates). In this case there should only be one entanglement gate, but there was accidentially added a second one in the inverse direction as the first. Fixed `Qiskit/qiskit-aqua#1452 <https://github.com/Qiskit/qiskit-aqua/issues/1452>`__"
msgstr ""

#: ../../release_notes.rst:2359
msgid "Fixed the handling of breakpoints in the :class:`~qiskit.circuit.library.PiecewisePolynomialPauliRotations` class in the :mod:`qiskit.circuit.library`. Now for ``n`` intervals, ``n+1`` breakpoints are allowed. This enables specifying another end interval other than :math:`2^\\text{num qubits}`. This is important because from the end of the last interval to :math:`2^\\text{num qubits}` the function is the identity."
msgstr ""

#: ../../release_notes.rst:2367
msgid "Fixed an issue in the :class:`qiskit.circuit.library.Permutation` circuit class where some permutations would not be properly generated. This issue could also effect :class:`qiskit.circuit.library.QuantumVolume` if it were called with `classical_permutation=False``. Fixed `#5812 <https://github.com/Qiskit/qiskit-terra/issues/5812>`__"
msgstr ""

#: ../../release_notes.rst:2373
msgid "Fixed an issue where generating QASM output with the :meth:`~qiskit.circuit.QuantumCircuit.qasm` method for a :class:`~qiskit.circuit.QuantumCircuit` object that has a :class:`~qiskit.circuit.ControlledGate` with an open control the output would be as if all controls were closed independent of the specified control state. This would result in a different circuit being created from :meth:`~qiskit.circuit.QuantumCircuit.from_qasm_str` if parsing the generated QASM."
msgstr ""

#: ../../release_notes.rst:2382
msgid "This was fixed by updating the QASM output from :meth:`~qiskit.circuit.QuantumCircuit.qasm` by defining a composite gate which uses :class:`~qiskit.circuit.XGate` to implement the open controls. The composite gate is named like ``<original_gate_name>_o<ctrl_state>`` where ``o`` stands for open control and ``ctrl_state`` is the integer value of the control state. Fixed `#5443 <https://github.com/Qiskit/qiskit-terra/issues/5443>`__"
msgstr ""

#: ../../release_notes.rst:2390
msgid "Fixed an issue where binding :class:`~qiskit.circuit.Parameter` objects in a :class:`~qiskit.circuit.QuantumCircuit` with the ``parameter_binds`` in the :class:`~qiskit.execute_function.execute` function would cause all the bound :class:`~qiskit.circuit.QuantumCircuit` objects would have the same :attr:`~qiskit.circuit.QuantumCircuit.name`, which meant the result names were also not unique. This fix causes the :meth:`~qiskit.circuit.QuantumCircuit.bind_parameters` and :meth:`~qiskit.circuit.QuantumCircuit.assign_parameters` to assign a unique circuit name when ``inplace=False`` as::"
msgstr ""

#: ../../release_notes.rst:2402
msgid "where ``<base name>`` is the name supplied by the \"name\" kwarg, otherwise it defaults to \"circuit\". The class instance number gets incremented every time an instance of the class is generated. ``<pid name>`` is appended if called outside the main process. Fixed `#5185 <https://github.com/Qiskit/qiskit-terra/issues/5185>`__"
msgstr ""

#: ../../release_notes.rst:2408
msgid "Fixed an issue with the :func:`~qiskit.compiler.scheduler` function where it would raise an exception if an input circuit contained an unbound :class:`~qiskit.circuit.QuantumCircuit` object. Fixed `#5304 <https://github.com/Qiskit/qiskit-terra/issues/5304>`__"
msgstr ""

#: ../../release_notes.rst:2413
msgid "Fixed an issue in the :class:`qiskit.transpiler.passes.TemplateOptimization` transpiler passes where template circuits that contained unbound :class:`~qiskit.circuit.Parameter` objects would crash under some scenarios if the parameters could not be bound during the template matching. Now, if the :class:`~qiskit.circuit.Parameter` objects can not be bound templates with unbound :class:`~qiskit.circuit.Parameter` are discarded and ignored by the :class:`~qiskit.transpiler.passes.TemplateOptimization` pass. Fixed `#5533 <https://github.com/Qiskit/qiskit-terra/issues/5533>`__"
msgstr ""

#: ../../release_notes.rst:2422
msgid "Fixed an issue with the :func:`qiskit.visualization.timeline_drawer` function where classical bits were inproperly handled. Fixed `#5361 <https://github.com/Qiskit/qiskit-terra/issues/5361>`__"
msgstr ""

#: ../../release_notes.rst:2426
msgid "Fixed an issue in the :func:`qiskit.visualization.circuit_drawer` function and the :meth:`qiskit.circuit.QuantumCircuit.draw` method where :class:`~qiskit.circuit.Delay` instructions in a :class:`~qiskit.circuit.QuantumCircuit` object were not being correctly treated as idle time. So when the ``idle_wires`` kwarg was set to ``False`` the wires with the :class:`~qiskit.circuit.Delay` objects would still be shown. This has been fixed so that the idle wires are removed from the visualization if there are only :class:`~qiskit.circuit.Delay` objects on a wire."
msgstr ""

#: ../../release_notes.rst:2436
msgid "Previously, when the option ``layout_method`` kwarg was provided to the :func:`~qiskit.compiler.transpile` function and the ``optimization_level`` kwarg was set to >= 2 so that the pass :class:`qiskit.transpiler.passes.CSPLayout` would run, if :class:`~qiskit.transpiler.passes.CSPLayout` found a solution then the method in ``layout_method`` was not executed. This has been fixed so that if specified, the ``layout_method`` is always honored. Fixed `#5409 <https://github.com/Qiskit/qiskit-terra/issues/5409>`__"
msgstr ""

#: ../../release_notes.rst:2445
msgid "When the argument ``coupling_map=None`` (either set explicitly, set implicitly as the default value, or via the ``backend`` kwarg), the transpiling process was not \"embedding\" the circuit. That is, even when an ``initial_layout`` was specified, the virtual qubits were not assigned to physical qubits. This has been fixed so that now, the :func:`qiskit.compiler.transpile` function honors the ``initial_layout`` argument by embedding the circuit:"
msgstr ""

#: ../../release_notes.rst:2466
msgid "If the ``initial_layout`` refers to more qubits than in the circuit, the transpiling process will extended the circuit with ancillas."
msgstr ""

#: ../../release_notes.rst:2481
msgid "Fixed `#5345 <https://github.com/Qiskit/qiskit-terra/issues/5345>`__"
msgstr ""

#: ../../release_notes.rst:2483
msgid "A new kwarg, ``user_cost_dict`` has been added to the constructor for the :class:`qiskit.transpiler.passes.TemplateOptimization` transpiler pass. This enables users to provide a custom cost dictionary for the gates to the underlying template matching algorithm. For example::"
msgstr ""

#: ../../release_notes.rst:2493
msgid "An issue when passing the :class:`~qiskit.result.Counts` object returned by :meth:`~qiskit.result.Result.get_counts` to :func:`~qiskit.result.marginal_counts` would produce an improperly formatted :class:`~qiskit.result.Counts` object with certain inputs has been fixed. Fixes `#5424 <https://github.com/Qiskit/qiskit-terra/issues/5424>`__"
msgstr ""

#: ../../release_notes.rst:2500
msgid "Improved the allocation of helper qubits in :class:`~qiskit.circuit.library.PolynomialPauliRotations` and :class:`~qiskit.circuit.library.PiecewiseLinearPauliRotations` which makes the implementation of these circuit more efficient. Fixed `#5320 <https://github.com/Qiskit/qiskit-terra/issues/5320>`__ and `#5322 <https://github.com/Qiskit/qiskit-terra/issues/5322>`__"
msgstr ""

#: ../../release_notes.rst:2507
msgid "Fix the usage of the allocated helper qubits in the :class:`~qiskit.circuit.library.MCXGate` in the :class:`~qiskit.circuit.library.WeightedAdder` class. These were previously allocated but not used prior to this fix. Fixed `#5321 <https://github.com/Qiskit/qiskit-terra/issues/5321>`__"
msgstr ""

#: ../../release_notes.rst:2513
msgid "In a number of cases, the ``latex`` output method for the :func:`qiskit.visualization.circuit_drawer` function and the :meth:`~qiskit.circuit.QuantumCircuit.draw` method did not display the gate name correctly, and in other cases, did not include gate parameters where they should be. Now the gate names will be displayed the same way as they are displayed with the ``mpl`` output method, and parameters will display for all the gates that have them. In addition, some of the gates did not display in the correct form, and these have been fixed. Fixes `#5605 <https://github.com/Qiskit/qiskit-terra/issues/5605>`__, `#4938 <https://github.com/Qiskit/qiskit-terra/issues/4938>`__, and `#3765 <https://github.com/Qiskit/qiskit-terra/issues/3765>`__"
msgstr ""

#: ../../release_notes.rst:2525
msgid "Fixed an issue where, if the :meth:`qiskit.circuit.Instruction.to_instruction` method was used on a subcircuit which contained classical registers and that :class:`~qiskit.circuit.Instruction` object was then added to a :class:`~qiskit.circuit.QuantumCircuit` object, then the output from the :func:`qiskit.visualization.circuit_drawer` function and the :meth:`qiskit.circuit.QuantumCircuit.draw` method would in some instances display the subcircuit to the left of a measure when it should have been displayed to the right. Fixed `#5947 <https://github.com/Qiskit/qiskit-terra/issues/5947>`__"
msgstr ""

#: ../../release_notes.rst:2536
msgid "Fixed an issue with :class:`~qiskit.circuit.Delay` objects in a :class:`~qiskit.circuit.QuantumCircuit` where :func:`qiskit.compiler.transpile` would not be convert the units of the :class:`~qiskit.circuit.Delay` to the units of the :class:`~qiskit.providers.Backend`, if the ``backend`` kwarg is set on :func:`~qiskit.circuit.transpile`. This could result in the wrong behavior because of a unit mismatch, for example running::"
msgstr ""

#: ../../release_notes.rst:2553
msgid "would previously have resulted in the backend delay for 100 timesteps (each of duration dt) rather than expected (100e-6 / dt) timesteps. This has been corrected so the :func:`qiskit.compiler.transpile` function properly converts the units."
msgstr ""

#: ../../release_notes.rst:2564
msgid "The snapshots of all the fake/mock backends in ``qiskit.test.mock`` have been updated to reflect recent device changes. This includes a change in the :attr:`~qiskit.providers.models.QasmBackendConfiguration.basis_gates` attribute for the :class:`~qiskit.providers.models.BackendConfiguration` to ``['cx', 'rz', 'sx', 'x', 'id']``, the addition of a ``readout_length`` property to the qubit properties in the :class:`~qiskit.providers.models.BackendProperties`, and updating the :class:`~qiskit.providers.models.PulseDefaults` so that all the mock backends support parametric pulse based :class:`~qiskit.pulse.InstructionScheduleMap` instances."
msgstr ""

#: ../../release_notes.rst:2578
msgid "Aer 0.8.0"
msgstr ""

#: ../../release_notes.rst:2585
msgid "The 0.8 release includes several new features and bug fixes. The highlights for this release are: the introduction of a unified :class:`~qiskit.providers.aer.AerSimulator` backend for running circuit simulations using any of the supported simulation methods; a simulator instruction library (:mod:`qiskit.providers.aer.library`) which includes custom instructions for saving various kinds of simulator data; MPI support for running large simulations on a distributed computing environment."
msgstr ""

#: ../../release_notes.rst:2600 ../../release_notes.rst:3653
msgid "Python 3.9 support has been added in this release. You can now run Qiskit Aer using Python 3.9 without building from source."
msgstr ""

#: ../../release_notes.rst:2603 ../../release_notes.rst:3718
msgid "Add the CMake flag ``DISABLE_CONAN`` (default=``OFF``)s. When installing from source, setting this to ``ON`` allows bypassing the Conan package manager to find libraries that are already installed on your system. This is also available as an environment variable ``DISABLE_CONAN``, which takes precedence over the CMake flag. This is not the official procedure to build AER. Thus, the user is responsible of providing all needed libraries and corresponding files to make them findable to CMake."
msgstr ""

#: ../../release_notes.rst:2610
msgid "This release includes support for building qiskit-aer with MPI support to run large simulations on a distributed computing environment. See the `contributing guide <https://github.com/Qiskit/qiskit-aer/blob/master/CONTRIBUTING.md#building-with-mpi-support>`__ for instructions on building and running in an MPI environment."
msgstr ""

#: ../../release_notes.rst:2615
msgid "It is now possible to build qiskit-aer with CUDA enabled in Windows. See the `contributing guide <https://github.com/Qiskit/qiskit-aer/blob/master/CONTRIBUTING.md#building-with-gpu-support>`__ for instructions on building from source with GPU support."
msgstr ""

#: ../../release_notes.rst:2620
msgid "When building the qiskit-aer Python extension from source several build dependencies need to be pre-installed to enable C++ compilation. As a user convenience when building the extension any of these build dependencies which were missing would be automatically installed using ``pip`` prior to the normal ``setuptools`` installation steps, however it was previously was not possible to avoid this automatic installation. To solve this issue a new environment variable ``DISABLE_DEPENDENCY_INSTALL`` has been added. If it is set to ``1`` or ``ON`` when building the python extension from source this will disable the automatic installation of these missing build dependencies."
msgstr ""

#: ../../release_notes.rst:2631
msgid "Adds support for optimized N-qubit Pauli gate ( :class:`qiskit.circuit.library.PauliGate`) to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and the statevector and density matrix methods of the :class:`~qiskit.providers.aer.QasmSimulator` and :class:`~qiskit.providers.aer.AerSimulator`."
msgstr ""

#: ../../release_notes.rst:2639
msgid "The :meth:`~qiskit.providers.aer.AerSimulator.run` method for the :class:`~qiskit.providers.aer.AerSimulator`, :class:`~qiskit.providers.aer.QasmSimulator`, :class:`~qiskit.providers.aer.StatevectorSimulator`, and :class:`~qiskit.providers.aer.UnitarySimulator` backends now takes a :class:`~qiskit.circuit.QuantumCircuit` (or a list of :class:`~qiskit.circuit.QuantumCircuit` objects) as it's input. The previous :class:`~qiskit.qobj.QasmQobj` object is still supported for now, but will be deprecated in a future release."
msgstr ""

#: ../../release_notes.rst:2665
msgid "The :meth:`~qiskit.providers.aer.PulseSimulator.run` method for the :class:`~qiskit.providers.aer.PulseSimulator` backend now takes a :class:`~qiskit.pulse.Schedule` (or a list of :class:`~qiskit.pulse.Schedule` objects) as it's input. The previous :class:`~qiskit.qobj.PulseQobj` object is still supported for now, but will be deprecated in a future release."
msgstr ""

#: ../../release_notes.rst:2672
msgid "Adds the new :class:`~qiskit.provider.aer.AerSimulator` simulator backend supporting the following simulation methods"
msgstr ""

#: ../../release_notes.rst:2675
msgid "``automatic``"
msgstr ""

#: ../../release_notes.rst:2676
msgid "``statevector``"
msgstr ""

#: ../../release_notes.rst:2677
msgid "``stabilizer``"
msgstr ""

#: ../../release_notes.rst:2678
msgid "``density_matrix``"
msgstr ""

#: ../../release_notes.rst:2679
msgid "``matrix_product_state``"
msgstr ""

#: ../../release_notes.rst:2680
msgid "``unitary``"
msgstr ""

#: ../../release_notes.rst:2681
msgid "``superop``"
msgstr ""

#: ../../release_notes.rst:2683
msgid "The default `automatic` method will automatically choose a simulation method separately for each run circuit based on the circuit instructions and noise model (if any). Initializing a simulator with a specific method can be done using the `method` option."
msgstr ""

#: ../../release_notes.rst:2695
msgid "GPU simulation for the statevector, density matrix and unitary methods can be enabled by setting the ``device='GPU'`` backend option."
msgstr ""

#: ../../release_notes.rst:2705
msgid "Note that the ``unitary`` and ``superop`` methods do not support measurement as they simulate the unitary matrix or superoperator matrix of the run circuit so one of the new :func:`~qiskit.providers.aer.library.save_unitary`, :func:`~qiskit.providers.aer.library.save_superop`, or :func:`~qiskit.providers.aer.library.save_state` instructions must be used to save the simulator state to the returned results. Similarly state of the other simulations methods can be saved using the appropriate instructions. See the :mod:`qiskit.providers.aer.library` API documents for more details."
msgstr ""

#: ../../release_notes.rst:2715
msgid "Note that the :class:`~qiskit.providers.aer.AerSimulator` simulator superceds the :class:`~qiskit.providers.aer.QasmSimulator`, :class:`~qiskit.providers.aer.StatevectorSimulator`, and :class:`~qiskit.providers.aer.UnitarySimulator` backends which will be deprecated in a future release."
msgstr ""

#: ../../release_notes.rst:2721
msgid "Updates the :class:`~qiskit.providers.aer.AerProvider` class to include multiple :class:`~qiskit.providers.aer.AerSimulator` backends preconfigured for all available simulation methods and simulation devices. The new backends can be accessed through the provider interface using the names"
msgstr ""

#: ../../release_notes.rst:2726
msgid "``\"aer_simulator\"``"
msgstr ""

#: ../../release_notes.rst:2727
msgid "``\"aer_simulator_statevector\"``"
msgstr ""

#: ../../release_notes.rst:2728
msgid "``\"aer_simulator_stabilizer\"``"
msgstr ""

#: ../../release_notes.rst:2729
msgid "``\"aer_simulator_density_matrix\"``"
msgstr ""

#: ../../release_notes.rst:2730
msgid "``\"aer_simulator_matrix_product_state\"``"
msgstr ""

#: ../../release_notes.rst:2731
msgid "``\"aer_simulator_extended_stabilizer\"``"
msgstr ""

#: ../../release_notes.rst:2732
msgid "``\"aer_simulator_unitary\"``"
msgstr ""

#: ../../release_notes.rst:2733
msgid "``\"aer_simulator_superop\"``"
msgstr ""

#: ../../release_notes.rst:2735
msgid "Additional if Aer was installed with GPU support on a compatible system the following GPU backends will also be available"
msgstr ""

#: ../../release_notes.rst:2738
msgid "``\"aer_simulator_statevector_gpu\"``"
msgstr ""

#: ../../release_notes.rst:2739
msgid "``\"aer_simulator_density_matrix_gpu\"``"
msgstr ""

#: ../../release_notes.rst:2740
msgid "``\"aer_simulator_unitary_gpu\"``"
msgstr ""

#: ../../release_notes.rst:2749
msgid "Added a new ``norm estimation`` method for performing measurements when using the ``\"extended_stabilizer\"`` simulation method. This norm estimation method can be used by passing the following options to the :class:`~qiskit.providers.aer.AerSimulator` and :class:`~qiskit.providers.aer.QasmSimulator` backends"
msgstr ""

#: ../../release_notes.rst:2761
msgid "The norm estimation method is slower than the alternative ``metropolis`` or ``resampled_metropolis`` options, but gives better performance on circuits with sparse output distributions. See the documentation of the :class:`~qiskit.providers.aer.QasmSimulator` for more information."
msgstr ""

#: ../../release_notes.rst:2766
msgid "Adds instructions for saving the state of the simulator in various formats. These instructions are"
msgstr ""

#: ../../release_notes.rst:2769
msgid ":class:`qiskit.providers.aer.library.SaveDensityMatrix`"
msgstr ""

#: ../../release_notes.rst:2770
msgid ":class:`qiskit.providers.aer.library.SaveMatrixProductState`"
msgstr ""

#: ../../release_notes.rst:2771
msgid ":class:`qiskit.providers.aer.library.SaveStabilizer`"
msgstr ""

#: ../../release_notes.rst:2772
msgid ":class:`qiskit.providers.aer.library.SaveState`"
msgstr ""

#: ../../release_notes.rst:2773
msgid ":class:`qiskit.providers.aer.library.SaveStatevector`"
msgstr ""

#: ../../release_notes.rst:2774
msgid ":class:`qiskit.providers.aer.library.SaveStatevectorDict`"
msgstr ""

#: ../../release_notes.rst:2775
msgid ":class:`qiskit.providers.aer.library.SaveUnitary`"
msgstr ""

#: ../../release_notes.rst:2777
msgid "These instructions can be appended to a quantum circuit by using the :class:`~qiskit.providers.aer.library.save_density_matrix`, :class:`~qiskit.providers.aer.library.save_matrix_product_state`, :class:`~qiskit.providers.aer.library.save_stabilizer`, :class:`~qiskit.providers.aer.library.save_state`, :class:`~qiskit.providers.aer.library.save_statevector`, :class:`~qiskit.providers.aer.library.save_statevector_dict`, :class:`~qiskit.providers.aer.library.save_unitary` circuit methods which are added to ``QuantumCircuit`` when importing Aer."
msgstr ""

#: ../../release_notes.rst:2787 ../../release_notes.rst:2850
msgid "See the :mod:`qiskit.providers.aer.library` API documentation for details on method compatibility for each instruction."
msgstr ""

#: ../../release_notes.rst:2790
msgid "Note that the snapshot instructions :class:`~qiskit.providers.aer.extensions.SnapshotStatevector`, :class:`~qiskit.providers.aer.extensions.SnapshotDensityMatrix`, :class:`~qiskit.providers.aer.extensions.SnapshotStabilizer` are still supported but will be deprecated in a future release."
msgstr ""

#: ../../release_notes.rst:2796
msgid "Adds :class:`qiskit.providers.aer.library.SaveExpectationValue` and :class:`qiskit.providers.aer.library.SaveExpectationValueVariance` quantum circuit instructions for saving the expectation value :math:`\\langle H\\rangle = Tr[H\\rho]`, or expectation value and variance :math:`Var(H) = \\langle H^2\\rangle - \\langle H\\rangle^2`, of a Hermitian operator :math:`H` for the simulator state :math:`\\rho`. These instruction can be appended to a quantum circuit by using the :class:`~qiskit.providers.aer.library.save_expectation_value` and :class:`~qiskit.providers.aer.library.save_expectation_value_variance` circuit methods which is added to ``QuantumCircuit`` when importing Aer."
msgstr ""

#: ../../release_notes.rst:2807
msgid "Note that the snapshot instruction :class:`~qiskit.providers.aer.extensions.SnapshotExpectationValue`, is still supported but will be deprecated in a future release."
msgstr ""

#: ../../release_notes.rst:2811
msgid "Adds :class:`qiskit.providers.aer.library.SaveProbabilities` and :class:`qiskit.providers.aer.library.SaveProbabilitiesDict` quantum circuit instruction for saving all measurement outcome probabilities for Z-basis measurements of the simualtor state. These instruction can be appended to a quantum circuit by using the :class:`~qiskit.providers.aer.library.save_probabilities` and :class:`~qiskit.providers.aer.library.save_probabilities_dict` circuit methods which is added to ``QuantumCircuit`` when importing Aer."
msgstr ""

#: ../../release_notes.rst:2820
msgid "Note that the snapshot instruction :class:`~qiskit.providers.aer.extensions.SnapshotProbabilities`, is still supported but will be deprecated in a future release."
msgstr ""

#: ../../release_notes.rst:2824
msgid "Adds :class:`qiskit.providers.aer.library.SaveAmplitudes` and :class:`qiskit.providers.aer.library.SaveAmplitudesSquared` circuit instructions for saving select complex statevector amplitudes, or select probabilities (amplitudes squared) for supported simulation methods. These instructions can be appended to a quantum circuit by using the :class:`~qiskit.providers.aer.library.save_amplitudes` and :class:`~qiskit.providers.aer.library.save_amplitudes_squared` circuit methods which is added to ``QuantumCircuit`` when importing Aer."
msgstr ""

#: ../../release_notes.rst:2833
msgid "Adds instructions for setting the state of the simulators. These instructions must be defined on the full number of qubits in the circuit. They can be applied at any point in a circuit and will override the simulator state with the one specified. Added instructions are"
msgstr ""

#: ../../release_notes.rst:2838
msgid ":class:`qiskit.providers.aer.library.SetDensityMatrix`"
msgstr ""

#: ../../release_notes.rst:2839
msgid ":class:`qiskit.providers.aer.library.SetStabilizer`"
msgstr ""

#: ../../release_notes.rst:2840
msgid ":class:`qiskit.providers.aer.library.SetStatevector`"
msgstr ""

#: ../../release_notes.rst:2841
msgid ":class:`qiskit.providers.aer.library.SetUnitary`"
msgstr ""

#: ../../release_notes.rst:2843
msgid "These instruction can be appended to a quantum circuit by using the :class:`~qiskit.providers.aer.library.set_density_matrix`, :class:`~qiskit.providers.aer.library.set_stabilizer`, :class:`~qiskit.providers.aer.library.set_statevector`, :class:`~qiskit.providers.aer.library.set_unitary` circuit methods which are added to ``QuantumCircuit`` when importing Aer."
msgstr ""

#: ../../release_notes.rst:2853
msgid "Added support for diagonal gates to the ``\"matrix_product_state\"`` simulation method."
msgstr ""

#: ../../release_notes.rst:2856
msgid "Added support for the ``initialize`` instruction to the ``\"matrix_product_state\"`` simulation method."
msgstr ""

#: ../../release_notes.rst:2865
msgid "There is a known issue where the simulation of certain circuits with a Kraus noise model using the ``\"matrix_product_state\"`` simulation method can cause the simulator to crash. Refer to `#306 <https://github.com/Qiskit/qiskit-aer/issues/1184>`__ for more information."
msgstr ""

#: ../../release_notes.rst:2877
msgid "The minimum version of `Conan <https://conan.io/>`__ has been increased to 1.31.2. This was necessary to fix a compatibility issue with newer versions of the `urllib3 <https://pypi.org/project/urllib3/>`__ (which is a dependency of Conan). It also adds native support for AppleClang 12 which is useful for users with new Apple computers."
msgstr ""

#: ../../release_notes.rst:2883
msgid "``pybind11`` minimum version required is 2.6 instead of 2.4. This is needed in order to support CUDA enabled compilation in Windows."
msgstr ""

#: ../../release_notes.rst:2886
msgid "Cython has been removed as a build dependency."
msgstr ""

#: ../../release_notes.rst:2888
msgid "Removed x90 gate decomposition from noise models that was deprecated in qiskit-aer 0.7. This decomposition is now done by using regular noise model basis gates and the qiskit transpiler."
msgstr ""

#: ../../release_notes.rst:2892
msgid "The following options for the ``\"extended_stabilizer\"`` simulation method have changed."
msgstr ""

#: ../../release_notes.rst:2895
msgid "``extended_stabilizer_measure_sampling``: This option has been replaced by the options ``extended_stabilizer_sampling_method``, which controls how we simulate qubit measurement."
msgstr ""

#: ../../release_notes.rst:2899
msgid "``extended_stabilizer_mixing_time``: This option has been renamed as ``extended_stabilizer_metropolis_mixing_time`` to clarify it only applies to the ``metropolis`` and ``resampled_metropolis`` sampling methods."
msgstr ""

#: ../../release_notes.rst:2903
msgid "``extended_stabilizer_norm_estimation_samples``: This option has been renamed to ``extended_stabilizer_norm_estimation_default_samples``."
msgstr ""

#: ../../release_notes.rst:2906
msgid "One additional option, ``extended_stabilizer_norm_estimation_repetitions`` has been added, whih controls part of the behaviour of the norm estimation sampling method."
msgstr ""

#: ../../release_notes.rst:2925 ../../release_notes.rst:3804
msgid "Fixes bug with :class:`~qiskit.providers.aer.AerProvider` where options set on the returned backends using :meth:`~qiskit.providers.aer.QasmSimulator.set_options` were stored in the provider and would persist for subsequent calls to :meth:`~qiskit.providers.aer.AerProvider.get_backend` for the same named backend. Now every call to and :meth:`~qiskit.providers.aer.AerProvider.backends` returns a new instance of the simulator backend that can be configured."
msgstr ""

#: ../../release_notes.rst:2934 ../../release_notes.rst:3813
msgid "Fixes bug in the error message returned when a circuit contains unsupported simulator instructions. Previously some supported instructions were also being listed in the error message along with the unsupported instructions."
msgstr ""

#: ../../release_notes.rst:2938 ../../release_notes.rst:3662
msgid "Fixes issue with setting :class:`~qiskit.providers.aer.QasmSimulator` basis gates when using ``\"method\"`` and ``\"noise_model\"`` options together, and when using them with a simulator constructed using :meth:`~qiskit.providers.aer.QasmSimulator.from_backend`. Now the listed basis gates will be the intersection of gates supported by the backend configuration, simulation method, and noise model basis gates. If the intersection of the noise model basis gates and simulator basis gates is empty a warning will be logged."
msgstr ""

#: ../../release_notes.rst:2947
msgid "Fix bug where the ``\"sx\"``` gate :class:`~qiskit.circuit.library.SXGate` was not listed as a supported gate in the C++ code, in ``StateOpSet`` of ``matrix_product_state.hp``."
msgstr ""

#: ../../release_notes.rst:2951 ../../release_notes.rst:3821
msgid "Fix bug where ``\"csx\"``, ``\"cu2\"``, ``\"cu3\"`` were incorrectly listed as supported basis gates for the ``\"density_matrix\"`` method of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:2955
msgid "Fix bug where parameters were passed incorrectly between functions in ``matrix_product_state_internal.cpp``, causing wrong simulation, as well as reaching invalid states, which in turn caused an infinite loop."
msgstr ""

#: ../../release_notes.rst:2959
msgid "Fixes a bug that resulted in ``c_if`` not working when the width of the conditional register was greater than 64. See `#1077 <https://github.com/Qiskit/qiskit-aer/issues/1077>`__."
msgstr ""

#: ../../release_notes.rst:2963
msgid "Fixes a bug `#1153 <https://github.com/Qiskit/qiskit-aer/issues/1153>`__) where noise on conditional gates was always being applied regardless of whether the conditional gate was actually applied based on the classical register value. Now noise on a conditional gate will only be applied in the case where the conditional gate is applied."
msgstr ""

#: ../../release_notes.rst:2969 ../../release_notes.rst:3731
msgid "Fixes a bug with nested OpenMP flag was being set to true when it shouldn't be."
msgstr ""

#: ../../release_notes.rst:2972 ../../release_notes.rst:3684
msgid "Fixes a bug when applying truncation in the matrix product state method of the QasmSimulator."
msgstr ""

#: ../../release_notes.rst:2974 ../../release_notes.rst:3171
msgid "Fixed issue `#1126 <https://github.com/Qiskit/qiskit-aer/issues/1126>`__: bug in reporting measurement of a single qubit. The bug occured when copying the measured value to the output data structure."
msgstr ""

#: ../../release_notes.rst:2978 ../../release_notes.rst:3825
msgid "In MPS, apply_kraus was operating directly on the input bits in the parameter qubits, instead of on the internal qubits. In the MPS algorithm, the qubits are constantly moving around so all operations should be applied to the internal qubits."
msgstr ""

#: ../../release_notes.rst:2983 ../../release_notes.rst:3830
msgid "When invoking MPS::sample_measure, we need to first sort the qubits to the default ordering because this is the assumption in qasm_controller.This is done by invoking the method move_all_qubits_to_sorted_ordering. It was correct in sample_measure_using_apply_measure, but missing in sample_measure_using_probabilities."
msgstr ""

#: ../../release_notes.rst:2989
msgid "Fixes bug with the :meth:`~qiskit.providers.aer.QasmSimulator.from_backend` method of the :class:`~qiskit.provider.aer.QasmSimulator` that would set the ``local`` attribute of the configuration to the backend value rather than always being set to ``True``."
msgstr ""

#: ../../release_notes.rst:2994 ../../release_notes.rst:3675
msgid "Fixes bug in :meth:`~qiskit.providers.aer.noise.NoiseModel.from_backend` and :meth:`~qiskit.providers.aer.QasmSimulator.from_backend` where :attr:`~qiskit.providers.aer.noise.NoiseModel.basis_gates` was set incorrectly for IBMQ devices with basis gate set ``['id', 'rz', 'sx', 'x', 'cx']``. Now the noise model will always have the same basis gates as the backend basis gates regardless of whether those instructions have errors in the noise model or not."
msgstr ""

#: ../../release_notes.rst:3003
msgid "Fixes an issue where the Extended `\"extended_stabilizer\"` simulation method would give incorrect results on quantum circuits with sparse output distributions. Refer to `#306 <https://github.com/Qiskit/qiskit-aer/issues/306>`__ for more information and examples."
msgstr ""

#: ../../release_notes.rst:3017
msgid "The :func:`qiskit.ignis.mitigation.expval_meas_mitigator_circuits` function has been improved so that the number of circuits generated by the function used for calibration by the CTMP method are reduced from :math:`O(n)` to :math:`O(\\log{n})` (where :math:`n` is the number of qubits)."
msgstr ""

#: ../../release_notes.rst:3028
msgid "The :func:`qiskit.ignis.verification.randomized_benchmarking_seq` function is now using the upgraded CNOTDihedral class, :class:`qiskit.ignis.verification.CNOTDihedral`, which enables performing CNOT-Dihedral Randomized Benchmarking on more than two qubits."
msgstr ""

#: ../../release_notes.rst:3033
msgid "The python package ``retworkx`` is now a requirement for installing qiskit-ignis. It replaces the previous usage of ``networkx`` (which is no longer a requirement) to get better performance."
msgstr ""

#: ../../release_notes.rst:3037
msgid "The ``scikit-learn`` dependency is no longer required and is now an optional requirement. If you're using the IQ measurement discriminators (:class:`~qiskit.ignis.measurement.IQDiscriminationFitter`, :class:`~qiskit.ignis.measurement.LinearIQDiscriminationFitter`, :class:`~qiskit.ignis.measurement.QuadraticIQDiscriminationFitter`, or :class:`~qiskit.ignis.measurement.SklearnIQDiscriminator`) you will now need to manually install scikit-learn, either by running ``pip install scikit-learn`` or when you're also installing qiskit-ignis with ``pip install qiskit-ignis[iq]``."
msgstr ""

#: ../../release_notes.rst:3053
msgid "Fixed an issue in the expectation value method :meth:`~qiskit.ignis.mitigation.TensoredExpvalMeasMitigator.expectation_value`, for the error mitigation classes :class:`~qiskit.ignis.mitigation.TensoredExpvalMeasMitigator` and :class:`~qiskit.ignis.mitigation.CTMPExpvalMeasMitigator` if the ``qubits`` kwarg was not specified it would incorrectly use the total number of qubits of the mitigator, rather than the number of classical bits in the count dictionary leading to greatly reduced performance. Fixed `#561 <https://github.com/Qiskit/qiskit-ignis/issues/561>`__"
msgstr ""

#: ../../release_notes.rst:3064 ../../release_notes.rst:3847
msgid "Fix the ``\"auto\"`` method of the :class:`~qiskit.ignis.verification.tomography.TomographyFitter`, :class:`~qiskit.ignis.verification.tomography.StateTomographyFitter`, and :class:`~qiskit.ignis.verification.tomography.ProcessTomographyFitter` to only use ``\"cvx\"`` if CVXPY is installed *and* a third-party SDP solver other than SCS is available. This is because the SCS solver has lower accuracy than other solver methods and often returns a density matrix or Choi-matrix that is not completely-positive and fails validation when used with the :func:`qiskit.quantum_info.state_fidelity` or :func:`qiskit.quantum_info.process_fidelity` functions."
msgstr ""

#: ../../release_notes.rst:3076
msgid "Aqua 0.9.0"
msgstr ""

#: ../../release_notes.rst:3078
msgid "This release officially deprecates the Qiskit Aqua project, in the future (no sooner than 3 months from this release) the Aqua project will have it's final release and be archived. All the functionality that qiskit-aqua provides has been migrated to either new packages or to other qiskit packages. The application modules that are provided by qiskit-aqua have been split into several new packages: ``qiskit-optimization``, ``qiskit-nature``, ``qiskit-machine-learning``, and ``qiskit-finance``. These packages can be installed by themselves (via the standard pip install command, ie ``pip install qiskit-nature``) or with the rest of the Qiskit metapackage as optional extras (ie, ``pip install 'qiskit[finance,optimization]'`` or ``pip install 'qiskit[all]'``. The core building blocks for algorithms and the operator flow now exist as part of qiskit-terra at :mod:`qiskit.algorithms` and :mod:`qiskit.opflow`. Depending on your existing usage of Aqua you should either use the application packages or the new modules in Qiskit Terra."
msgstr ""

#: ../../release_notes.rst:3093
msgid "For more details on how to migrate from using Qiskit Aqua you can refer to the :ref:`aqua-migration`."
msgstr ""

#: ../../release_notes.rst:3103
msgid "Qiskit 0.24.1"
msgstr ""

#: ../../release_notes.rst:3106 ../../release_notes.rst:3143
#: ../../release_notes.rst:3394 ../../release_notes.rst:3432
msgid "Terra 0.16.4"
msgstr ""

#: ../../release_notes.rst:3111 ../../release_notes.rst:3148
msgid "Aer 0.7.6"
msgstr ""

#: ../../release_notes.rst:3116 ../../release_notes.rst:3188
#: ../../release_notes.rst:3413 ../../release_notes.rst:3462
msgid "Ignis 0.5.2"
msgstr ""

#: ../../release_notes.rst:3121 ../../release_notes.rst:3193
#: ../../release_notes.rst:3418 ../../release_notes.rst:3492
msgid "Aqua 0.8.2"
msgstr ""

#: ../../release_notes.rst:3133
msgid ":meth:`qiskit.providers.ibmq.IBMQBackend.defaults` now returns the pulse defaults for the backend if the backend supports pulse. However, your provider may not support pulse even if the backend does. The ``open_pulse`` flag in backend configuration indicates whether the provider supports it."
msgstr ""

#: ../../release_notes.rst:3140
msgid "Qiskit 0.24.0"
msgstr ""

#: ../../release_notes.rst:3155
msgid "This is the first release of qiskit-aer that publishes precompiled binaries to PyPI for Linux on aarch64 (arm64). From this release onwards Linux aarch64 packages will be published and supported."
msgstr ""

#: ../../release_notes.rst:3165
msgid "Fixes a bug `#1153 <https://github.com/Qiskit/qiskit-aer/issues/1153>`__ where noise on conditional gates was always being applied regardless of whether the conditional gate was actually applied based on the classical register value. Now noise on a conditional gate will only be applied in the case where the conditional gate is applied."
msgstr ""

#: ../../release_notes.rst:3175
msgid "There was previously a mismatch between the default reported number of qubits the Aer backend objects would say were supported and the the maximum number of qubits the simulator would actually run. This was due to a mismatch between the Python code used for calculating the max number of qubits and the C++ code used for a runtime check for the max number of qubits based on the available memory. This has been correct so by default now Aer backends will allow running circuits that can fit in all the available system memory. Fixes `#1114 <https://github.com/Qiskit/qiskit-aer/issues/1126>`__"
msgstr ""

#: ../../release_notes.rst:3198
msgid "IBM Q Provider 0.12.0"
msgstr ""

#: ../../release_notes.rst:3205
msgid ":meth:`qiskit.providers.ibmq.IBMQBackend.run` method now takes one or more :class:`~qiskit.circuit.QuantumCircuit` or :class:`~qiskit.pulse.Schedule`. Use of :class:`~qiskit.qobj.QasmQobj` and :class:`~qiskit.qobj.PulseQobj` is now deprecated. Runtime configuration options, such as the number of shots, can be set via either the :meth:`~qiskit.providers.ibmq.IBMQBackend.run` method, or the :meth:`qiskit.providers.ibmq.IBMQBackend.set_options` method. The former is used as a one-time setting for the job, and the latter for all jobs sent to the backend. If an option is set in both places, the value set in :meth:`~qiskit.providers.ibmq.IBMQBackend.run` takes precedence."
msgstr ""

#: ../../release_notes.rst:3215
msgid "IBM Quantum credentials are now loaded only from sections of the ``qiskitrc`` file that start with 'ibmq'."
msgstr ""

#: ../../release_notes.rst:3223
msgid "Python 3.9 support has been added in this release. You can now run Qiskit IBMQ provider using Python 3.9."
msgstr ""

#: ../../release_notes.rst:3226
msgid ":meth:`qiskit.providers.ibmq.AccountProvider.backends` now has a new parameter `min_num_qubits` that allows you to filter by the minimum number of qubits."
msgstr ""

#: ../../release_notes.rst:3230
msgid ":meth:`qiskit.providers.ibmq.IBMQBackend.run` method now takes one or more :class:`~qiskit.circuit.QuantumCircuit` or :class:`~qiskit.pulse.Schedule`. Runtime configuration options, such as the number of shots, can be set via either the :meth:`~qiskit.providers.ibmq.IBMQBackend.run` method, or the :meth:`qiskit.providers.ibmq.IBMQBackend.set_options` method. The former is used as a one-time setting for the job, and the latter for all jobs sent to the backend. If an option is set in both places, the value set in :meth:`~qiskit.providers.ibmq.IBMQBackend.run` takes precedence. For example:"
msgstr ""

#: ../../release_notes.rst:3255 ../../release_notes.rst:3942
msgid ":class:`qiskit.providers.ibmq.experiment.Experiment` now has three additional attributes, `hub`, `group`, and `project`, that identify the provider used to create the experiment."
msgstr ""

#: ../../release_notes.rst:3259
msgid "You can now assign an ``experiment_id`` to a job when submitting it using :meth:`qiskit.providers.ibmq.IBMQBackend.run`. You can use this new field to group together a collection of jobs that belong to the same experiment. The :meth:`qiskit.providers.ibmq.IBMQBackendService.jobs` method was also updated to allow filtering by ``experiment_id``."
msgstr ""

#: ../../release_notes.rst:3265
msgid ":class:`qiskit.providers.ibmq.experiment.Experiment` now has two additional attributes:"
msgstr ""

#: ../../release_notes.rst:3268
msgid "share_level: The level at which the experiment is shared which determines who can see it when listing experiments. This can be updated."
msgstr ""

#: ../../release_notes.rst:3270
msgid "owner: The ID of the user that uploaded the experiment. This is set by the server and cannot be updated."
msgstr ""

#: ../../release_notes.rst:3273
msgid "The method :meth:`qiskit.providers.ibmq.experimentservice.ExperimentService.experiments` now accepts ``hub``, ``group``, and ``project`` as filtering keywords."
msgstr ""

#: ../../release_notes.rst:3277 ../../release_notes.rst:3946
msgid "Methods :meth:`qiskit.providers.ibmq.experiment.ExperimentService.experiments` and :meth:`qiskit.providers.ibmq.experiment.ExperimentService.analysis_results` now support a ``limit`` parameter that allows you to limit the number of experiments and analysis results returned."
msgstr ""

#: ../../release_notes.rst:3283
msgid "The method :meth:`qiskit.providers.ibmq.experimentservice.ExperimentService.experiments` now accepts ``exclude_mine`` and ``mine_only`` as filtering keywords."
msgstr ""

#: ../../release_notes.rst:3287
msgid "The method :meth:`qiskit.providers.ibmq.experimentservice.ExperimentService.experiments` now accepts ``exclude_public`` and ``public_only`` as filtering keywords."
msgstr ""

#: ../../release_notes.rst:3291
msgid ":meth:`qiskit.providers.ibmq.managed.IBMQJobManager.run` now accepts a single :class:`~qiskit.circuit.QuantumCircuit` or :class:`~qiskit.pulse.Schedule` in addition to a list of them."
msgstr ""

#: ../../release_notes.rst:3295
msgid "The :func:`~qiskit.providers.ibmq.least_busy` function now skips backends that are operational but paused, meaning they are accepting but not processing jobs."
msgstr ""

#: ../../release_notes.rst:3299
msgid "You can now pickle an :class:`~qiskit.providers.ibmq.job.IBMQJob` instance, as long as it doesn't contain custom data that is not picklable (e.g. in Qobj header)."
msgstr ""

#: ../../release_notes.rst:3303
msgid "You can now use the two new methods, :meth:`qiskit.providers.ibmq.AccountProvider.services` and :meth:`qiskit.providers.ibmq.AccountProvider.service` to find out what services are available to your account and get an instance of a particular service."
msgstr ""

#: ../../release_notes.rst:3309
msgid "The :meth:`qiskit.providers.ibmq.IBMQBackend.reservations` method now always returns the reservation scheduling modes even for reservations that you don't own."
msgstr ""

#: ../../release_notes.rst:3319
msgid "A number of previously deprecated methods and features have been removed, including:"
msgstr ""

#: ../../release_notes.rst:3322
msgid ":meth:`qiskit.providers.ibmq.job.IBMQJob.to_dict`"
msgstr ""

#: ../../release_notes.rst:3323
msgid ":meth:`qiskit.providers.ibmq.job.IBMQJob.from_dict`"
msgstr ""

#: ../../release_notes.rst:3324
msgid "`Qconfig.py` support"
msgstr ""

#: ../../release_notes.rst:3325
msgid "Use of proxy URLs that do not include protocols"
msgstr ""

#: ../../release_notes.rst:3327 ../../release_notes.rst:3958
msgid "A new parameter, ``limit`` is now the first parameter for both :meth:`qiskit.providers.ibmq.experiment.ExperimentService.experiments` and :meth:`qiskit.providers.ibmq.experiment.ExperimentService.analysis_results` methods. This ``limit`` has a default value of 10, meaning by deafult only 10 experiments and analysis results will be returned."
msgstr ""

#: ../../release_notes.rst:3333
msgid "IBM Quantum credentials are now loaded only from sections of the ``qiskitrc`` file that start with 'ibmq'. This allows the ``qiskitrc`` file to be used for other functionality."
msgstr ""

#: ../../release_notes.rst:3343
msgid "Use of :class:`~qiskit.qobj.QasmQobj` and :class:`~qiskit.qobj.PulseQobj` in the :meth:`qiskit.providers.ibmq.IBMQBackend.run` method is now deprecated. :class:`~qiskit.circuit.QuantumCircuit` and :class:`~qiskit.pulse.Schedule` should now be used instead."
msgstr ""

#: ../../release_notes.rst:3348
msgid "The ``backends`` attribute of :class:`qiskit.providers.ibmq.AccountProvider` has been renamed to ``backend`` (sigular). For backward compatibility, you can continue to use ``backends``, but it is deprecated and will be removed in a future release. The :meth:`qiskit.providers.ibmq.AccountProvider.backends` method remains unchanged. For example:"
msgstr ""

#: ../../release_notes.rst:3360
msgid "Setting of the :class:`~qiskit.providers.ibmq.job.IBMQJob` ``client_version`` attribute has been deprecated. You can, however, continue to read the value of attribute."
msgstr ""

#: ../../release_notes.rst:3364
msgid "\"The ``validate_qobj`` keyword in :meth:`qiskit.providers.ibmq.IBMQBackend.run` is deprecated and will be removed in a future release. If you're relying on this schema validation you should pull the schemas from the `Qiskit/ibmq-schemas <https://github.com/Qiskit/ibm-quantum-schemas>`_ and directly validate your payloads with that."
msgstr ""

#: ../../release_notes.rst:3376 ../../release_notes.rst:3970
msgid "Fixes the issue wherein a job could be left in the ``CREATING`` state if job submit fails half-way through."
msgstr ""

#: ../../release_notes.rst:3379
msgid "Fixes the issue wherein using Jupyter backend widget would fail if the backend's basis gates do not include the traditional u1, u2, and u3. Fixes `#844 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/844>`_"
msgstr ""

#: ../../release_notes.rst:3383 ../../release_notes.rst:3973
msgid "Fixes the infinite loop raised when passing an ``IBMQRandomService`` instance to a child process."
msgstr ""

#: ../../release_notes.rst:3386
msgid "Fixes the issue wherein a ``TypeError`` is raised if the server returns an error code but the response data is not in the expected format."
msgstr ""

#: ../../release_notes.rst:3391
msgid "Qiskit 0.23.6"
msgstr ""

#: ../../release_notes.rst:3399
msgid "Aer 0.7.5"
msgstr ""

#: ../../release_notes.rst:3406
msgid "This release is a bugfix release that fixes compatibility in the precompiled binary wheel packages with numpy versions < 1.20.0. The previous release 0.7.4 was building the binaries in a way that would require numpy 1.20.0 which has been resolved now, so the precompiled binary wheel packages will work with any numpy compatible version."
msgstr ""

#: ../../release_notes.rst:3423 ../../release_notes.rst:3496
#: ../../release_notes.rst:3534 ../../release_notes.rst:3697
#: ../../release_notes.rst:3745 ../../release_notes.rst:3935
msgid "IBM Q Provider 0.11.1"
msgstr ""

#: ../../release_notes.rst:3429
msgid "Qiskit 0.23.5"
msgstr ""

#: ../../release_notes.rst:3439
msgid "This release is a bugfix release that primarily fixes compatibility with numpy 1.20.0. This numpy release deprecated their local aliases for Python's numeric types (``np.int`` -> ``int``, ``np.float`` -> ``float``, etc.) and the usage of these aliases in Qiskit resulted in a large number of deprecation warnings being emitted. This release fixes this so you can run Qiskit with numpy 1.20.0 without those deprecation warnings."
msgstr ""

#: ../../release_notes.rst:3447
msgid "Aer 0.7.4"
msgstr ""

#: ../../release_notes.rst:3454
msgid "Fixes compatibility with numpy 1.20.0. This numpy release deprecated their local aliases for Python's numeric types (``np.int`` -> ``int``, ``np.float`` -> ``float``, etc.) and the usage of these aliases in Qiskit Aer resulted in a large number of deprecation warnings being emitted. This release fixes this so you can run Qiskit Aer with numpy 1.20.0 without those deprecation warnings."
msgstr ""

#: ../../release_notes.rst:3469
msgid "This release is a bugfix release that primarily fixes compatibility with numpy 1.20.0. It is also the first release to include support for Python 3.9. Earlier releases (including 0.5.0 and 0.5.1) worked with Python 3.9 but did not indicate this in the package metadata, and there was no upstream testing for those releases. This release fixes that and was tested on Python 3.9 (in addition to 3.6, 3.7, and 3.8)."
msgstr ""

#: ../../release_notes.rst:3481
msgid "`networkx <https://networkx.org/>`__ is explicitly listed as a dependency now. It previously was an implicit dependency as it was required for the :mod:`qiskit.ignis.verification.topological_codes` module but was not correctly listed as a depdendency as qiskit-terra also requires networkx and is also a depdency of ignis so it would always be installed in practice. However, it is necessary to list it as a requirement for future releases of qiskit-terra that will not require networkx. It's also important to correctly list the dependencies of ignis in case there were a future incompatibility between version requirements."
msgstr ""

#: ../../release_notes.rst:3502
msgid "Qiskit 0.23.4"
msgstr ""

#: ../../release_notes.rst:3505
msgid "Terra 0.16.3"
msgstr ""

#: ../../release_notes.rst:3512
msgid "Fixed an issue introduced in 0.16.2 that would cause errors when running :func:`~qiskit.compiler.transpile` on a circuit with a series of 1 qubit gates and a non-gate instruction that only operates on a qubit (e.g. :class:`~qiskit.circuit.Reset`). Fixes `#5736 <https://github.com/Qiskit/qiskit-terra/issues/5736>`__"
msgstr ""

#: ../../release_notes.rst:3519 ../../release_notes.rst:3646
msgid "Aer 0.7.3"
msgstr ""

#: ../../release_notes.rst:3524 ../../release_notes.rst:3687
#: ../../release_notes.rst:3735 ../../release_notes.rst:3840
msgid "Ignis 0.5.1"
msgstr ""

#: ../../release_notes.rst:3529 ../../release_notes.rst:3692
#: ../../release_notes.rst:3740 ../../release_notes.rst:3861
msgid "Aqua 0.8.1"
msgstr ""

#: ../../release_notes.rst:3540
msgid "Qiskit 0.23.3"
msgstr ""

#: ../../release_notes.rst:3543
msgid "Terra 0.16.2"
msgstr ""

#: ../../release_notes.rst:3550
msgid "Python 3.9 support has been added in this release. You can now run Qiskit Terra using Python 3.9."
msgstr ""

#: ../../release_notes.rst:3559
msgid "The class :class:`~qiskit.library.standard_gates.x.MCXGrayCode` will now create a ``C3XGate`` if ``num_ctrl_qubits`` is 3 and a ``C4XGate`` if ``num_ctrl_qubits`` is 4. This is in addition to the previous functionality where for any of the modes of the :class:'qiskit.library.standard_gates.x.MCXGate`, if ``num_ctrl_bits`` is 1, a ``CXGate`` is created, and if 2, a ``CCXGate`` is created."
msgstr ""

#: ../../release_notes.rst:3571
msgid "Pulse :py:class:`~qiskit.pulse.instructions.Delay` instructions are now explicitly assembled as :class:`~qiskit.qobj.PulseQobjInstruction` objects included in the :class:`~qiskit.qobj.PulseQobj` output from :func:`~qiskit.compiler.assemble`."
msgstr ""

#: ../../release_notes.rst:3576
msgid "Previously, we could ignore :py:class:`~qiskit.pulse.instructions.Delay` instructions in a :class:`~qiskit.pulse.Schedule` as part of :func:`~qiskit.compiler.assemble` as the time was explicit in the :class:`~qiskit.qobj.PulseQobj` objects. But, now with pulse gates, there are situations where we can schedule ONLY a delay, and not including the delay itself would remove the delay."
msgstr ""

#: ../../release_notes.rst:3583
msgid "Circuits with custom gate calibrations can now be scheduled with the transpiler without explicitly providing the durations of each circuit calibration."
msgstr ""

#: ../../release_notes.rst:3587
msgid "The :class:`~qiskit.transpiler.passes.BasisTranslator` and :class:`~qiskit.transpiler.passes.Unroller` passes, in some cases, had not been preserving the global phase of the circuit under transpilation. This has been fixed."
msgstr ""

#: ../../release_notes.rst:3592
msgid "A bug in :func:`qiskit.pulse.builder.frequency_offset` where when ``compensate_phase`` was set a factor of :math:`2\\pi` was missing from the appended phase."
msgstr ""

#: ../../release_notes.rst:3596
msgid "Fix the global phase of the output of the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.repeat`. If a circuit with global phase is appended to another circuit, the global phase is currently not propagated. Simulators rely on this, since the phase otherwise gets applied multiple times. This sets the global phase of :meth:`~qiskit.circuit.QuantumCircuit.repeat` to 0 before appending the repeated circuit instead of multiplying the existing phase times the number of repetitions."
msgstr ""

#: ../../release_notes.rst:3606
msgid "Fixes bug in :class:`~qiskit.quantum_info.SparsePauliOp` where multiplying by a certain non Python builtin Numpy scalar types returned incorrect values. Fixes `#5408 <https://github.com/Qiskit/qiskit-terra/issues/5408>`__"
msgstr ""

#: ../../release_notes.rst:3610
msgid "The definition of the Hellinger fidelity from has been corrected from the previous defition of :math:`1-H(P,Q)` to :math:`[1-H(P,Q)^2]^2` so that it is equal to the quantum state fidelity of P, Q as diagonal density matrices."
msgstr ""

#: ../../release_notes.rst:3615
msgid "Reduce the number of CX gates in the decomposition of the 3-controlled X gate, :class:`~qiskit.circuit.library.C3XGate`. Compiled and optimized in the `U CX` basis, now only 14 CX and 16 U gates are used instead of 20 and 22, respectively."
msgstr ""

#: ../../release_notes.rst:3620
msgid "Fixes the issue wherein using Jupyter backend widget or :meth:`qiskit.tools.backend_monitor` would fail if the backend's basis gates do not include the traditional u1, u2, and u3."
msgstr ""

#: ../../release_notes.rst:3624
msgid "When running :func:`qiskit.compiler.transpile` on a list of circuits with a single element, the function used to return a circuit instead of a list. Now, when :func:`qiskit.compiler.transpile` is called with a list, it will return a list even if that list has a single element. See `#5260 <https://github.com/Qiskit/qiskit-terra/issues/5260>`__."
msgstr ""

#: ../../release_notes.rst:3671
msgid "Fixes a bug that resulted in `c_if` not working when the width of the conditional register was greater than 64. See `#1077 <https://github.com/Qiskit/qiskit-aer/issues/1077>`__."
msgstr ""

#: ../../release_notes.rst:3703
msgid "Qiskit 0.23.2"
msgstr ""

#: ../../release_notes.rst:3706 ../../release_notes.rst:3757
msgid "Terra 0.16.1"
msgstr ""

#: ../../release_notes.rst:3711
msgid "Aer 0.7.2"
msgstr ""

#: ../../release_notes.rst:3752
msgid "Qiskit 0.23.1"
msgstr ""

#: ../../release_notes.rst:3764
msgid "Fixed an issue where an error was thrown in execute for valid circuits built with delays."
msgstr ""

#: ../../release_notes.rst:3767
msgid "The QASM definition of 'c4x' in qelib1.inc has been corrected to match the standard library definition for C4XGate."
msgstr ""

#: ../../release_notes.rst:3770
msgid "Fixes a bug in subtraction for quantum channels :math:`A - B` where :math:`B` was an :class:`~qiskit.quantum_info.Operator` object. Negation was being applied to the matrix in the Operator representation which is not equivalent to negation in the quantum channel representation."
msgstr ""

#: ../../release_notes.rst:3775
msgid "Changes the way :meth:`~qiskit.quantum_info.states.statevector.Statevector._evolve_instruction` access qubits to handle the case of an instruction with multiple registers."
msgstr ""

#: ../../release_notes.rst:3782
msgid "Aer 0.7.1"
msgstr ""

#: ../../release_notes.rst:3789
msgid "The minimum cmake version to build qiskit-aer has increased from 3.6 to 3.8. This change was necessary to enable fixing GPU version builds that support running on x86_64 CPUs lacking AVX2 instructions."
msgstr ""

#: ../../release_notes.rst:3799
msgid "qiskit-aer with GPU support will now work on systems with x86_64 CPUs lacking AVX2 instructions. Previously, the GPU package would only run if the AVX2 instructions were available. Fixes `#1023 <https://github.com/Qiskit/qiskit-aer/issues/1023>`__"
msgstr ""

#: ../../release_notes.rst:3817
msgid "Fix bug where the `\"sx\"`` gate :class:`~qiskit.circuit.library.SXGate` was not listed as a supported gate in the C++ code, in `StateOpSet` of `matrix_product_state.hp`."
msgstr ""

#: ../../release_notes.rst:3864
msgid "0.8.1"
msgstr ""

#: ../../release_notes.rst:3871
msgid "A new algorithm has been added: the Born Openheimer Potential Energy surface for the calculation of potential energy surface along different degrees of freedom of the molecule. The algorithm is called ``BOPESSampler``. It further provides functionalities of fitting the potential energy surface to an analytic function of predefined potentials.some details."
msgstr ""

#: ../../release_notes.rst:3880
msgid "Critical Issues"
msgstr ""

#: ../../release_notes.rst:3882
msgid "Be aware that ``initial_state`` parameter in ``QAOA`` has now different implementation as a result of a bug fix. The previous implementation wrongly mixed the user provided ``initial_state`` with Hadamard gates. The issue is fixed now. No attention needed if your code does not make use of the user provided ``initial_state`` parameter."
msgstr ""

#: ../../release_notes.rst:3893
msgid "optimize_svm method of qp_solver would sometimes fail resulting in an error like this `ValueError: cannot reshape array of size 1 into shape (200,1)` This addresses the issue by adding an L2 norm parameter, lambda2, which defaults to 0.001 but can be changed via the QSVM algorithm, as needed, to facilitate convergence."
msgstr ""

#: ../../release_notes.rst:3898
msgid "A method ``one_letter_symbol`` has been removed from the ``VarType`` in the latest build of DOCplex making Aqua incompatible with this version. So instead of using this method an explicit type check of variable types has been introduced in the Aqua optimization module."
msgstr ""

#: ../../release_notes.rst:3902
msgid ":meth`~qiskit.aqua.operators.state_fns.DictStateFn.sample()` could only handle real amplitudes, but it is fixed to handle complex amplitudes. `#1311 <https://github.com/Qiskit/qiskit-aqua/issues/1311>` for more details."
msgstr ""

#: ../../release_notes.rst:3906
msgid "Trotter class did not use the reps argument in constructor. `#1317 <https://github.com/Qiskit/qiskit-aqua/issues/1317>` for more details."
msgstr ""

#: ../../release_notes.rst:3909
msgid "Raise an `AquaError` if :class`qiskit.aqua.operators.converters.CircuitSampler` samples an empty operator. `#1321 <https://github.com/Qiskit/qiskit-aqua/issues/1321>` for more details."
msgstr ""

#: ../../release_notes.rst:3913
msgid ":meth:`~qiskit.aqua.operators.legacy.WeightedPauliOperator.to_opflow()` returns a correct operator when coefficients are complex numbers. `#1381 <https://github.com/Qiskit/qiskit-aqua/issues/1381>` for more details."
msgstr ""

#: ../../release_notes.rst:3917
msgid "Let backend simulators validate NoiseModel support instead of restricting to Aer only in QuantumInstance."
msgstr ""

#: ../../release_notes.rst:3920
msgid "Correctly handle PassManager on QuantumInstance ``transpile`` method by calling its ``run`` method if it exists."
msgstr ""

#: ../../release_notes.rst:3923
msgid "A bug that mixes custom ``initial_state`` in ``QAOA`` with Hadamard gates has been fixed. This doesn't change functionality of QAOA if no initial_state is provided by the user. Attention should be taken if your implementation uses QAOA with cusom ``initial_state`` parameter as the optimization results might differ."
msgstr ""

#: ../../release_notes.rst:3928
msgid "Previously, setting `seed_simulator=0` in the `QuantumInstance` did not set any seed. This was only affecting the value 0. This has been fixed."
msgstr ""

#: ../../release_notes.rst:3979
msgid "Qiskit 0.23.0"
msgstr ""

#: ../../release_notes.rst:3982
msgid "Terra 0.16.0"
msgstr ""

#: ../../release_notes.rst:3989
msgid "The 0.16.0 release includes several new features and bug fixes. The major features in this release are the following:"
msgstr ""

#: ../../release_notes.rst:3992
msgid "Introduction of scheduled circuits, where delays can be used to control the timing and alignment of operations in the circuit."
msgstr ""

#: ../../release_notes.rst:3994
msgid "Compilation of quantum circuits from classical functions, such as oracles."
msgstr ""

#: ../../release_notes.rst:3996
msgid "Ability to compile and optimize single qubit rotations over different Euler basis as well as the phase + square-root(X) basis (i.e. ``['p', 'sx']``), which will replace the older IBM Quantum basis of ``['u1', 'u2', 'u3']``."
msgstr ""

#: ../../release_notes.rst:4000
msgid "Tracking of :meth:`~qiskit.circuit.QuantumCircuit.global_phase` on the :class:`~qiskit.circuit.QuantumCircuit` class has been extended through the :mod:`~qiskit.transpiler`, :mod:`~qiskit.quantum_info`, and :mod:`~qiskit.assembler` modules, as well as the BasicAer and Aer simulators. Unitary and state vector simulations will now return global phase-correct unitary matrices and state vectors."
msgstr ""

#: ../../release_notes.rst:4007
msgid "Also of particular importance for this release is that Python 3.5 is no longer supported. If you are using Qiskit Terra with Python 3.5, the 0.15.2 release is that last version which will work."
msgstr ""

#: ../../release_notes.rst:4017
msgid "Global R gates have been added to :mod:`qiskit.circuit.library`. This includes the global R gate (:class:`~qiskit.circuit.library.GR`), global Rx (:class:`~qiskit.circuit.library.GRX`) and global Ry (:class:`~qiskit.circuit.library.GRY`) gates which are derived from the :class:`~qiskit.circuit.library.GR` gate, and global Rz ( :class:`~qiskit.circuit.library.GRZ`) that is defined in a similar way to the :class:`~qiskit.circuit.library.GR` gates. The global R gates are defined on a number of qubits simultaneously, and act as a direct sum of R gates on each qubit."
msgstr ""

#: ../../release_notes.rst:4040
msgid "will create a :class:`~qiskit.circuit.QuantumCircuit` on a :class:`~qiskit.circuit.QuantumRegister` of 3 qubits and perform a :class:`~qiskit.circuit.library.RGate` of an angle :math:`\\theta = \\frac{\\pi}{3}` about an axis in the xy-plane of the Bloch spheres that makes an angle of :math:`\\phi = \\frac{2\\pi}{3}` with the x-axis on each qubit."
msgstr ""

#: ../../release_notes.rst:4047
msgid "A new color scheme, ``iqx``, has been added to the ``mpl`` backend for the circuit drawer :func:`qiskit.visualization.circuit_drawer` and :meth:`qiskit.circuit.QuantumCircuit.draw`. This uses the same color scheme as the Circuit Composer on the IBM Quantum Experience website. There are now 3 available color schemes - ``default``, ``iqx``, and ``bw``."
msgstr ""

#: ../../release_notes.rst:4053
msgid "There are two ways to select a color scheme. The first is to use a user config file, by default in the ``~/.qiskit`` directory, in the file ``settings.conf`` under the ``[Default]`` heading, a user can enter ``circuit_mpl_style = iqx`` to select the ``iqx`` color scheme."
msgstr ""

#: ../../release_notes.rst:4058
msgid "The second way is to add ``{'name': 'iqx'}`` to the ``style`` kwarg to the ``QuantumCircuit.draw`` method or to the ``circuit_drawer`` function. The second way will override the setting in the settings.conf file. For example:"
msgstr ""

#: ../../release_notes.rst:4072
msgid "In the ``style`` kwarg for the the circuit drawer :func:`qiskit.visualization.circuit_drawer` and :meth:`qiskit.circuit.QuantumCircuit.draw` the ``displaycolor`` field with the ``mpl`` backend now allows for entering both the gate color and the text color for each gate type in the form ``(gate_color, text_color)``.  This allows the use of light and dark gate colors with contrasting text colors. Users can still set only the gate color, in which case the ``gatetextcolor`` field will be used. Gate colors can be set in the ``style`` dict for any number of gate types, from one to the entire ``displaycolor`` dict. For example:"
msgstr ""

#: ../../release_notes.rst:4093
msgid "or"
msgstr ""

#: ../../release_notes.rst:4100
msgid "Two alignment contexts are added to the pulse builder (:mod:`qiskit.pulse.builder`) to facilitate writing a repeated pulse sequence with delays."
msgstr ""

#: ../../release_notes.rst:4104
msgid ":func:`qiskit.pulse.builder.align_equispaced` inserts delays with equivalent length in between pulse schedules within the context."
msgstr ""

#: ../../release_notes.rst:4106
msgid ":func:`qiskit.pulse.builder.align_func` offers more advanced control of pulse position. This context takes a callable that calculates a fractional coordinate of i-th pulse and aligns pulses within the context. This makes coding of dynamical decoupling easy."
msgstr ""

#: ../../release_notes.rst:4111
msgid "A ``rep_delay`` parameter has been added to the :class:`~qiskit.qobj.QasmQobj` class under the run configuration, :class:`~qiskit.qobj.QasmQobjConfig`. This parameter is used to denote the time between program executions. It must be chosen from the backend range given by the :class:`~qiskit.providers.models.BackendConfiguration` method :meth:`~qiskit.providers.models.BackendConfiguration.rep_delay_range`. If a value is not provided a backend default, :attr:`qiskit.providers.models.BackendConfiguration.default_rep_delay`, will be used. ``rep_delay`` will only work on backends which allow for dynamic repetition time. This is can be checked with the :class:`~qiskit.providers.models.BackendConfiguration` property :attr:`~qiskit.providers.models.BackendConfiguration.dynamic_reprate_enabled`."
msgstr ""

#: ../../release_notes.rst:4125
msgid "The ``qobj_schema.json`` JSON Schema file in :mod:`qiskit.schemas` has been updated to include the ``rep_delay`` as an optional configuration property for QASM Qobjs."
msgstr ""

#: ../../release_notes.rst:4129
msgid "The ``backend_configuration_schema.json`` JSON Schema file in :mod:`qiskit.schemas` has been updated to include ``dynamic_reprate_enabled``, ``rep_delay_range`` and ``default_rep_delay`` as optional properties for a QASM backend configuration payload."
msgstr ""

#: ../../release_notes.rst:4134
msgid "A new optimization pass, :class:`qiskit.transpiler.passes.TemplateOptimization` has been added to the transpiler. This pass applies a template matching algorithm described in `arXiv:1909.05270 <https://arxiv.org/pdf/1909.05270.pdf>`__ that replaces all compatible maximal matches in the circuit."
msgstr ""

#: ../../release_notes.rst:4140
msgid "To implement this new transpiler pass a new module, ``template_circuits``, was added to the circuit library (:mod:`qiskit.circuit.library`). This new module contains all the Toffoli circuit templates used in the :class:`~qiskit.transpiler.passes.TemplateOptimization`."
msgstr ""

#: ../../release_notes.rst:4145
msgid "This new pass is **not** currently included in the preset pass managers (:mod:`qiskit.transpiler.preset_passmanagers`), to use it you will need to create a custom :class:`~qiskit.transpiler.PassManager`."
msgstr ""

#: ../../release_notes.rst:4149
msgid "A new version of the providers interface has been added. This new interface, which can be found in :mod:`qiskit.providers`, provides a new versioning mechanism that will enable changes to the interface to happen in a compatible manner over time. The new interface should be simple to migrate existing providers, as it is mostly identical except for the explicit versioning."
msgstr ""

#: ../../release_notes.rst:4156
msgid "Besides having explicitly versioned abstract classes the key changes for the new interface are that the :class:`~qiskit.providers.BackendV1` method :meth:`~qiskit.providers.BackendV1.run` can now take a :class:`~qiskit.circuits.QuantumCircuit` or :class:`~qiskit.pulse.Schedule` object as inputs instead of ``Qobj`` objects. To go along with that options are now part of a backend class so that users can configure run time options when running with a circuit. The final change is that :class:`qiskit.providers.JobV1` can now be synchronous or asynchronous, the exact configuration and method for configuring this is up to the provider, but there are interface hook points to make it explicit which execution model a job is running under in the ``JobV1`` abstract class."
msgstr ""

#: ../../release_notes.rst:4169
msgid "A new kwarg, ``inplace``, has been added to the function :func:`qiskit.result.marginal_counts`. This kwarg is used to control whether the contents are marginalized in place or a new copy is returned, for :class:`~qiskit.result.Result` object input. This parameter does not have any effect for an input ``dict`` or :class:`~qiskit.result.Counts` object."
msgstr ""

#: ../../release_notes.rst:4175
msgid "An initial version of a classical function compiler, :mod:`qiskit.circuit.classicalfunction`, has been added. This enables compiling typed python functions (operating only on bits of type ``Int1`` at the moment) into :class:`~qiskit.circuit.QuantumCircuit` objects. For example:"
msgstr ""

#: ../../release_notes.rst:4195
msgid "The parameter ``registerless=False`` in the :class:`qiskit.circuit.classicalfunction.ClassicalFunction` method :meth:`~qiskit.circuit.classicalfunction.ClassicalFunction.synth` creates a circuit with registers refering to the parameter names. For example:"
msgstr ""

#: ../../release_notes.rst:4205
msgid "A decorated classical function can be used the same way as any other quantum gate when appending it to a circuit."
msgstr ""

#: ../../release_notes.rst:4214
msgid "The ``GROVER_ORACLE`` gate is synthesized when its decomposition is required."
msgstr ""

#: ../../release_notes.rst:4220
msgid "The feature requires ``tweedledum``, a library for synthesizing quantum circuits, that can be installed via pip with ``pip install tweedledum``."
msgstr ""

#: ../../release_notes.rst:4223
msgid "A new class :class:`qiskit.circuit.Delay` for representing a delay instruction in a circuit has been added. A new method :meth:`~qiskit.circuit.QuantumCircuit.delay` is now available for easily appending delays to circuits. This makes it possible to describe timing-sensitive experiments (e.g. T1/T2 experiment) in the circuit level."
msgstr ""

#: ../../release_notes.rst:4239
msgid "A new argument ``scheduling_method`` for :func:`qiskit.compiler.transpile` has been added. It is required when transpiling circuits with delays.  If ``scheduling_method`` is specified, the transpiler returns a scheduled circuit such that all idle times in it are padded with delays (i.e. start time of each instruction is uniquely determined). This makes it possible to see how scheduled instructions (gates) look in the circuit level."
msgstr ""

#: ../../release_notes.rst:4260
msgid "See also :func:`~qiskit.visualization.timeline_drawer` for the best visualization of scheduled circuits."
msgstr ""

#: ../../release_notes.rst:4263
msgid "A new fuction :func:`qiskit.compiler.sequence` has been also added so that we can convert a scheduled circuit into a :class:`~qiskit.pulse.Schedule` to make it executable on a pulse-enabled backend."
msgstr ""

#: ../../release_notes.rst:4273
msgid "The :func:`~qiskit.compiler.schedule` has been updated so that it can schedule circuits with delays. Now there are two paths to schedule a circuit with delay:"
msgstr ""

#: ../../release_notes.rst:4289
msgid "Refer to the release notes and documentation for :func:`~qiskit.compiler.transpile` and :func:`~qiskit.compiler.sequence` for the details on the other path."
msgstr ""

#: ../../release_notes.rst:4293
msgid "Added the :class:`~qiskit.circuit.library.GroverOperator` to the circuit library (:mod:`qiskit.circuit.library`) to construct the Grover operator used in Grover's search algorithm and Quantum Amplitude Amplification/Estimation. Provided with an oracle in form of a circuit, ``GroverOperator`` creates the textbook Grover operator. To generalize this for amplitude amplification and use a generic operator instead of Hadamard gates as state preparation, the ``state_in`` argument can be used."
msgstr ""

#: ../../release_notes.rst:4302
msgid "The :class:`~qiskit.pulse.InstructionScheduleMap` methods :meth:`~qiskit.pulse.InstructionScheduleMap.get` and :meth:`~qiskit.pulse.InstructionScheduleMap.pop` methods now take :class:`~qiskit.circuit.ParameterExpression` instances in addition to numerical values for schedule generator parameters. If the generator is a function, expressions may be bound before or within the function call. If the generator is a :class:`~qiskit.pulse.ParametrizedSchedule`, expressions must be bound before the schedule itself is bound/called."
msgstr ""

#: ../../release_notes.rst:4312
msgid "A new class :class:`~qiskit.circuit.library.LinearAmplitudeFunction` was added to the circuit library (:mod:`qiskit.circuit.library`) for mapping (piecewise) linear functions on qubit amplitudes,"
msgstr ""

#: ../../release_notes.rst:4316
msgid "F|x\\rangle |0\\rangle = \\sqrt{1 - f(x)}|x\\rangle |0\\rangle + \\sqrt{f(x)}|x\\rangle |1\\rangle"
msgstr ""

#: ../../release_notes.rst:4321
msgid "The mapping is based on a controlled Pauli Y-rotations and a Taylor approximation, as described in https://arxiv.org/abs/1806.06893. This circuit can be used to compute expectation values of linear functions using the quantum amplitude estimation algorithm."
msgstr ""

#: ../../release_notes.rst:4326
msgid "The new jupyter magic ``monospaced_output`` has been added to the :mod:`qiskit.tools.jupyter` module. This magic sets the Jupyter notebook output font to \"Courier New\", when possible. When used this fonts returns text circuit drawings that are better aligned."
msgstr ""

#: ../../release_notes.rst:4336
msgid "A new transpiler pass, :class:`~qiskit.transpiler.passes.Optimize1qGatesDecomposition`, has been added. This transpiler pass is an alternative to the existing :class:`~qiskit.transpiler.passes.Optimize1qGates` that uses the :class:`~qiskit.quantum_info.OneQubitEulerDecomposer` class to decompose and simplify a chain of single qubit gates. This method is compatible with any basis set, while :class:`~qiskit.transpiler.passes.Optimize1qGates` only works for u1, u2, and u3. The default pass managers for ``optimization_level`` 1, 2, and 3 have been updated to use this new pass if the basis set doesn't include u1, u2, or u3."
msgstr ""

#: ../../release_notes.rst:4347
msgid "The :class:`~qiskit.quantum_info.OneQubitEulerDecomposer` now supports two new basis, ``'PSX'`` and ``'U'``. These can be specified with the ``basis`` kwarg on the constructor. This will decompose the matrix into a circuit using :class:`~qiskit.circuit.library.PGate` and :class:`~qiskit.circuit.library.SXGate` for ``'PSX'``, and :class:`~qiskit.circuit.library.UGate` for ``'U'``."
msgstr ""

#: ../../release_notes.rst:4354
msgid "A new method :meth:`~qiskit.transpiler.PassManager.remove` has been added to the :class:`qiskit.transpiler.PassManager` class. This method enables removing a pass from a :class:`~qiskit.transpiler.PassManager` instance. It works on indexes, similar to :meth:`~qiskit.transpiler.PassManager.replace`. For example, to remove the :class:`~qiskit.transpiler.passes.RemoveResetInZeroState` pass from the pass manager used at optimization level 1:"
msgstr ""

#: ../../release_notes.rst:4376
msgid "The stage ``[1]`` with ``RemoveResetInZeroState`` can be removed like this:"
msgstr ""

#: ../../release_notes.rst:4388
msgid "Several classes to load probability distributions into qubit amplitudes; :class:`~qiskit.circuit.library.UniformDistribution`, :class:`~qiskit.circuit.library.NormalDistribution`, and :class:`~qiskit.circuit.library.LogNormalDistribution` were added to the circuit library (:mod:`qiskit.circuit.library`). The normal and log-normal distribution support both univariate and multivariate distributions. These circuits are central to applications in finance where quantum amplitude estimation is used."
msgstr ""

#: ../../release_notes.rst:4397
msgid "Support for pulse gates has been added to the :class:`~qiskit.circuit.QuantumCircuit` class. This enables a :class:`~qiskit.circuit.QuantumCircuit` to override (for basis gates) or specify (for standard and custom gates) a definition of a :class:`~qiskit.circuit.Gate` operation in terms of time-ordered signals across hardware channels. In other words, it enables the option to provide pulse-level custom gate calibrations."
msgstr ""

#: ../../release_notes.rst:4405
msgid "The circuits are built exactly as before. For example::"
msgstr ""

#: ../../release_notes.rst:4418
msgid "Then, the calibration for the gate can be registered using the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.add_calibration` which takes a :class:`~qiskit.pulse.Schedule` definition as well as the qubits and parameters that it is defined for::"
msgstr ""

#: ../../release_notes.rst:4435
msgid "Previously, this functionality could only be used through complete Pulse Schedules. Additionally, circuits can now be submitted to backends with your custom definitions (dependent on backend support)."
msgstr ""

#: ../../release_notes.rst:4439
msgid "Circuits with pulse gates can still be lowered to a :class:`~qiskit.pulse.Schedule` by using the :func:`~qiskit.compiler.schedule` function."
msgstr ""

#: ../../release_notes.rst:4443
msgid "The calibrated gate can also be transpiled using the regular transpilation process::"
msgstr ""

#: ../../release_notes.rst:4448
msgid "The transpiled circuit will leave the calibrated gates on the same qubit as the original circuit and will not unroll them to the basis gates."
msgstr ""

#: ../../release_notes.rst:4451
msgid "Support for disassembly of :class:`~qiskit.qobj.PulseQobj` objects has been added to the :func:`qiskit.assembler.disassemble` function. For example:"
msgstr ""

#: ../../release_notes.rst:4475
msgid "A new kwarg, ``coord_type`` has been added to :func:`qiskit.visualization.plot_bloch_vector`. This kwarg enables changing the coordinate system used for the input parameter that describes the positioning of the vector on the Bloch sphere in the generated visualization. There are 2 supported values for this new kwarg, ``'cartesian'`` (the default value) and ``'spherical'``. If the ``coord_type`` kwarg is set to ``'spherical'`` the list of parameters taken in are of the form ``[r, theta,  phi]`` where ``r`` is the radius, ``theta`` is the inclination from +z direction, and ``phi`` is the azimuth from +x direction. For example:"
msgstr ""

#: ../../release_notes.rst:4514
msgid "Pulse :py:class:`~qiskit.pulse.Schedule` objects now support using :py:class:`~qiskit.circuit.ParameterExpression` objects for parameters."
msgstr ""

#: ../../release_notes.rst:4535
msgid "Parameter assignment is done via the :meth:`~qiskit.pulse.Schedule.assign_parameters` method::"
msgstr ""

#: ../../release_notes.rst:4541
msgid "Expressions and partial assignment also work, such as::"
msgstr ""

#: ../../release_notes.rst:4548
msgid "A new visualization function :func:`~qiskit.visualization.timeline_drawer` was added to the :mod:`qiskit.visualization` module."
msgstr ""

#: ../../release_notes.rst:4570
msgid "Type checking for the ``params`` kwarg of the constructor for the :class:`~qiskit.circuit.Gate` class and its subclasses has been changed. Previously all :class:`~qiskit.circuit.Gate` parameters had to be in a set of allowed types defined in the :class:`~qiskit.circuit.Instruction` class. Now a new method, :meth:`~qiskit.circuit.Gate.validate_parameter` is used to determine if a parameter type is valid or not. The definition of this method in a subclass will take priority over its parent. For example, :class:`~qiskit.extensions.UnitaryGate` accepts a parameter of the type ``numpy.ndarray`` and defines a custom :meth:`~qiskit.extensionst.UnitaryGate.validate_parameter` method that returns the parameter if it's an ``numpy.ndarray``. This takes priority over the function defined in its parent class :class:`~qiskit.circuit.Gate`. If :class:`~qiskit.extensions.UnitaryGate` were to be used as parent for a new class, this ``validate_parameter`` method would be used unless the new child class defines its own method."
msgstr ""

#: ../../release_notes.rst:4587
msgid "The previously deprecated methods, arguments, and properties named ``n_qubits`` and ``numberofqubits``  have been removed. These were deprecated in the 0.13.0 release. The full set of changes are:"
msgstr ""

#: ../../release_notes.rst:4597 ../../release_notes.rst:9892
msgid ":class:`~qiskit.circuit.QuantumCircuit`"
msgstr ""

#: ../../release_notes.rst:4598 ../../release_notes.rst:4611
#: ../../release_notes.rst:4614 ../../release_notes.rst:9893
#: ../../release_notes.rst:9906
msgid "``n_qubits``"
msgstr ""

#: ../../release_notes.rst:4599
msgid ":class:`~qiskit.circuit.QuantumCircuit.num_qubits`"
msgstr ""

#: ../../release_notes.rst:4600 ../../release_notes.rst:9895
msgid ":class:`~qiskit.quantum_info.Pauli`"
msgstr ""

#: ../../release_notes.rst:4601 ../../release_notes.rst:9896
msgid "``numberofqubits``"
msgstr ""

#: ../../release_notes.rst:4602
msgid ":attr:`~qiskit.quantum_info.Pauli.num_qubits`"
msgstr ""

#: ../../release_notes.rst:4607 ../../release_notes.rst:9902
msgid "Function"
msgstr ""

#: ../../release_notes.rst:4608 ../../release_notes.rst:9903
msgid "Old Argument"
msgstr ""

#: ../../release_notes.rst:4609 ../../release_notes.rst:9904
msgid "New Argument"
msgstr ""

#: ../../release_notes.rst:4610
msgid ":func:`qiskit.circuit.random.random_circuit`"
msgstr ""

#: ../../release_notes.rst:4612 ../../release_notes.rst:4615
#: ../../release_notes.rst:9907 ../../release_notes.rst:9910
msgid "``num_qubits``"
msgstr ""

#: ../../release_notes.rst:4613
msgid ":class:`qiskit.circuit.library.MSGate`"
msgstr ""

#: ../../release_notes.rst:4617
msgid "Inserting a parameterized :class:`~qiskit.circuit.Gate` instance into a :class:`~qiskit.circuit.QuantumCircuit` now creates a copy of that gate which is used in the circuit. If changes are made to the instance inserted into the circuit it will no longer be reflected in the gate in the circuit. This change was made to fix an issue when inserting a single parameterized :class:`~qiskit.circuit.Gate` object into multiple circuits."
msgstr ""

#: ../../release_notes.rst:4624
msgid "The function :func:`qiskit.result.marginal_counts` now, by default, does not modify the :class:`qiskit.result.Result` instance parameter. Previously, the ``Result`` object was always modified in place. A new kwarg ``inplace`` has been added :func:`~qiskit.result.marginal_counts` which enables using the previous behavior when ``inplace=True`` is set."
msgstr ""

#: ../../release_notes.rst:4631
msgid "The :class:`~qiskit.circuit.library.U3Gate` definition has been changed to be in terms of the :class:`~qiskit.circuit.library.UGate` class. The :class:`~qiskit.circuit.library.UGate` class has no definition. It is therefore not possible to unroll **every** circuit in terms of U3 and CX anymore. Instead, U and CX can be used for **every** circuit."
msgstr ""

#: ../../release_notes.rst:4637
msgid "The deprecated support for running Qiskit Terra with Python 3.5 has been removed. To use Qiskit Terra from this release onward you will now need to use at least Python 3.6. If you are using Python 3.5 the last version which will work is Qiskit Terra 0.15.2."
msgstr ""

#: ../../release_notes.rst:4642
msgid "In the :class:`~qiskit.providers.models.PulseBackendConfiguration` in the ``hamiltonian`` attributes the ``vars`` field  is now returned in a unit of Hz instead of the previously used GHz. This change was made to be consistent with the units used with the other attributes in the class."
msgstr ""

#: ../../release_notes.rst:4648
msgid "The previously deprecated support for passing in a dictionary as the first positional argument to :class:`~qiskit.dagcircuit.DAGNode` constructor has been removed. Using a dictonary for the first positional argument was deprecated in the 0.13.0 release. To create a :class:`~qiskit.dagcircuit.DAGNode` object now you should directly pass the attributes as kwargs on the constructor."
msgstr ""

#: ../../release_notes.rst:4655
msgid "The keyword arguments for the circuit gate methods (for example: :class:`qiskit.circuit.QuantumCircuit.cx`) ``q``, ``ctl*``, and ``tgt*``, which were deprecated in the 0.12.0 release, have been removed. Instead, only  ``qubit``, ``control_qubit*`` and ``target_qubit*`` can be used as named arguments for these methods."
msgstr ""

#: ../../release_notes.rst:4661
msgid "The previously deprecated module ``qiskit.extensions.standard`` has been removed. This module has been deprecated since the 0.14.0 release. The :mod:`qiskit.circuit.library` can be used instead. Additionally, all the gate classes previously in ``qiskit.extensions.standard`` are still importable from :mod:`qiskit.extensions`."
msgstr ""

#: ../../release_notes.rst:4668
msgid "The previously deprecated gates in the module ``qiskit.extensions.quantum_initializer``: ``DiagGate``, `UCG``, ``UCPauliRotGate``, ``UCRot``, ``UCRXGate``, ``UCX``, ``UCRYGate``, ``UCY``, ``UCRZGate``, ``UCZ`` have been removed. These were all deprecated in the 0.14.0 release and have alternatives available in the circuit library (:mod:`qiskit.circuit.library`)."
msgstr ""

#: ../../release_notes.rst:4675
msgid "The previously deprecated :class:`qiskit.circuit.QuantumCircuit` gate method :meth:`~qiskit.circuit.QuantumCircuit.iden` has been removed. This was deprecated in the 0.13.0 release and :meth:`~qiskit.circuit.QuantumCircuit.i` or :meth:`~qiskit.circuit.QuantumCircuit.id` can be used instead."
msgstr ""

#: ../../release_notes.rst:4685
msgid "The use of a ``numpy.ndarray`` for a parameter in the ``params`` kwarg for the constructor of the :class:`~qiskit.circuit.Gate` class and subclasses has been deprecated and will be removed in future releases. This was done as part of the refactoring of how ``parms`` type checking is handled for the :class:`~qiskit.circuit.Gate` class. If you have a custom gate class which is a subclass of :class:`~qiskit.circuit.Gate` directly (or via a different parent in the hierarchy) that accepts an ``ndarray`` parameter, you should define a custom :meth:`~qiskit.circuit.Gate.validate_parameter` method for your class that will return the allowed parameter type. For example::"
msgstr ""

#: ../../release_notes.rst:4704
msgid "The :attr:`~qiskit.circuit.library.PiecewiseLinearPauliRotations.num_ancilla_qubits` property of the :class:`~qiskit.circuit.library.PiecewiseLinearPauliRotations` and :class:`~qiskit.circuit.library.PolynomialPauliRotations` classes has been deprecated and will be removed in a future release. Instead the property :attr:`~qiskit.circuit.library.PolynomialPauliRotations.num_ancillas` should be used instead. This was done to make it consistent with the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.num_ancillas`."
msgstr ""

#: ../../release_notes.rst:4714
msgid "The :class:`qiskit.circuit.library.MSGate` class has been deprecated, but will remain in place to allow loading of old jobs. It has been replaced with the :class:`qiskit.circuit.library.GMS` class which should be used instead."
msgstr ""

#: ../../release_notes.rst:4719
msgid "The :class:`~qiskit.transpiler.passes.MSBasisDecomposer` transpiler pass has been deprecated and will be removed in a future release. The :class:`qiskit.transpiler.passes.BasisTranslator` pass can be used instead."
msgstr ""

#: ../../release_notes.rst:4724
msgid "The :class:`~qiskit.circuit.QuantumCircuit` methods ``u1``, ``u2`` and ``u3`` are now deprecated. Instead the following replacements can be used."
msgstr ""

#: ../../release_notes.rst:4734
msgid "The gate classes themselves, :class:`~qiskit.circuit.library.U1Gate`, :class:`~qiskit.circuit.library.U2Gate` and :class:`~qiskit.circuit.library.U3Gate` remain, to allow loading of old jobs."
msgstr ""

#: ../../release_notes.rst:4744
msgid "The :class:`~qiskit.result.Result` class's methods :meth:`~qiskit.result.Result.data`, :meth:`~qiskit.result.Result.get_memory`, :meth:`~qiskit.result.Result.get_counts`,  :meth:`~qiskit.result.Result.get_unitary`, and :meth:`~qiskit.result.Result.get_statevector ` will now emit a warning when the ``experiment`` kwarg is specified for attempting to fetch results using either a :class:`~qiskit.circuit.QuantumCircuit` or :class:`~qiskit.pulse.Schedule` instance, when more than one entry matching the instance name is present in the ``Result`` object. Note that only the first entry matching this name will be returned. Fixes `#3207 <https://github.com/Qiskit/qiskit-terra/issues/3207>`__"
msgstr ""

#: ../../release_notes.rst:4755
msgid "The :class:`qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.append` can now be used to insert one parameterized gate instance into multiple circuits. This fixes a previous issue where inserting a single parameterized :class:`~qiskit.circuit.Gate` object into multiple circuits would cause failures when one circuit had a parameter assigned. Fixes `#4697 <https://github.com/Qiskit/qiskit-terra/issues/4697>`__"
msgstr ""

#: ../../release_notes.rst:4763
msgid "Previously the :func:`qiskit.execute.execute` function would incorrectly disallow both the ``backend`` and ``pass_manager`` kwargs to be specified at the same time. This has been fixed so that both ``backend`` and ``pass_manager`` can be used together on calls to :func:`~qiskit.execute.execute`. Fixes `#5037 <https://github.com/Qiskit/qiskit-terra/issues/5037>`__"
msgstr ""

#: ../../release_notes.rst:4770
msgid "The :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.unitary` method has been fixed to accept a single integer for the ``qarg`` argument (when adding a 1-qubit unitary). The allowed types for the ``qargs`` argument are now ``int``, :class:`~qiskit.circuit.Qubit`, or a list of integers. Fixes `#4944 <https://github.com/Qiskit/qiskit-terra/issues/4944>`__"
msgstr ""

#: ../../release_notes.rst:4777
msgid "Previously, calling :meth:`~qiskit.circuit.library.BlueprintCircuit.inverse` on a :class:`~qiskit.circuit.library.BlueprintCircuit` object could fail if its internal data property was not yet populated. This has been fixed so that the calling :meth:`~qiskit.circuit.library.BlueprintCircuit.inverse` will populate the internal data before generating the inverse of the circuit. Fixes `#5140 <https://github.com/Qiskit/qiskit-terra/issues/5140>`__"
msgstr ""

#: ../../release_notes.rst:4785 ../../release_notes.rst:5958
msgid "Fixed an issue when creating a :class:`qiskit.result.Counts` object from an empty data dictionary. Now this will create an empty :class:`~qiskit.result.Counts` object. The :meth:`~qiskit.result.Counts.most_frequent` method is also updated to raise a more descriptive exception when the object is empty. Fixes `#5017 <https://github.com/Qiskit/qiskit-terra/issues/5017>`__"
msgstr ""

#: ../../release_notes.rst:4792
msgid "Fixes a bug where setting ``ctrl_state`` of a :class:`~qiskit.extensions.UnitaryGate` would be applied twice; once in the creation of the matrix for the controlled unitary and again when calling the :meth:`~qiskit.circuit.ControlledGate.definition` method of the :class:`qiskit.circuit.ControlledGate` class. This would give the appearence that setting ``ctrl_state`` had no effect."
msgstr ""

#: ../../release_notes.rst:4799
msgid "Previously the :class:`~qiskit.circuit.ControlledGate` method :meth:`~qiskit.circuit.ControlledGate.inverse` would not preserve the ``ctrl_state`` parameter in some cases. This has been fixed so that calling :meth:`~qiskit.circuit.ControlledGate.inverse` will preserve the value ``ctrl_state`` in its output."
msgstr ""

#: ../../release_notes.rst:4805
msgid "Fixed a bug in the ``mpl`` output backend of the circuit drawer :meth:`qiskit.circuit.QuantumCircuit.draw` and :func:`qiskit.visualization.circuit_drawer` that would cause the drawer to fail if the ``style`` kwarg was set to a string. The correct behavior would be to treat that string as a path to a JSON file containing the style sheet for the visualization. This has been fixed, and warnings are raised if the JSON file for the style sheet can't be loaded."
msgstr ""

#: ../../release_notes.rst:4814
msgid "Fixed an error where loading a QASM file via :meth:`~qiskit.circuit.QuantumCircuit.from_qasm_file` or :meth:`~qiskit.circuit.QuantumCircuit.from_qasm_str` would fail if a ``u``, ``phase(p)``, ``sx``, or ``sxdg`` gate were present in the QASM file. Fixes `#5156 <https://github.com/Qiskit/qiskit-terra/issues/5151>`__"
msgstr ""

#: ../../release_notes.rst:4821
msgid "Fixed a bug that would potentially cause registers to be mismapped when unrolling/decomposing a gate defined with only one 2-qubit operation."
msgstr ""

#: ../../release_notes.rst:4825
msgid "Aer 0.7.0"
msgstr ""

#: ../../release_notes.rst:4832
msgid "This 0.7.0 release includes numerous performance improvements and significant enhancements to the simulator interface, and drops support for Python 3.5. The main interface changes are configurable simulator backends, and constructing preconfigured simulators from IBMQ backends. Noise model an basis gate support has also been extended for most of the Qiskit circuit library standard gates, including new support for 1 and 2-qubit rotation gates. Performance improvements include adding SIMD support to the density matrix and unitary simulation methods, reducing the used memory and improving the performance of circuits using statevector and density matrix snapshots, and adding support for Kraus instructions to the gate fusion circuit optimization for greatly improving the performance of noisy statevector simulations."
msgstr ""

#: ../../release_notes.rst:4849
msgid "Adds basis gate support for the :class:`qiskit.circuit.Delay` instruction to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and :class:`~qiskit.providers.aer.QasmSimulator`. Note that this gate is treated as an identity gate during simulation and the delay length parameter is ignored."
msgstr ""

#: ../../release_notes.rst:4856
msgid "Adds basis gate support for the single-qubit gate :class:`qiskit.circuit.library.UGate` to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and the ``\"statevector\"``, ``\"density_matrix\"``, ``\"matrix_product_state\"``, and ``\"extended_stabilizer\"`` methods of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:4864
msgid "Adds basis gate support for the phase gate :class:`qiskit.circuit.library.PhaseGate` to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and the ``\"statevector\"``, ``\"density_matrix\"``, ``\"matrix_product_state\"``, and ``\"extended_stabilizer\"`` methods of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:4873
msgid "Adds basis gate support for the controlled-phase gate :class:`qiskit.circuit.library.CPhaseGate` to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and the ``\"statevector\"``, ``\"density_matrix\"``, and ``\"matrix_product_state\"`` methods of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:4882
msgid "Adds support for the multi-controlled phase gate :class:`qiskit.circuit.library.MCPhaseGate` to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and the ``\"statevector\"`` method of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:4889
msgid "Adds support for the :math:`\\sqrt(X)` gate :class:`qiskit.circuit.library.SXGate` to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:4895
msgid "Adds support for 1 and 2-qubit Qiskit circuit library rotation gates :class:`~qiskit.circuit.library.RXGate`, :class:`~qiskit.circuit.library.RYGate`, :class:`~qiskit.circuit.library.RZGate`, :class:`~qiskit.circuit.library.RGate`, :class:`~qiskit.circuit.library.RXXGate`, :class:`~qiskit.circuit.library.RYYGate`, :class:`~qiskit.circuit.library.RZZGate`, :class:`~qiskit.circuit.library.RZXGate` to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and the ``\"statevector\"`` and ``\"density_matrix\"`` methods of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:4905
msgid "Adds support for multi-controlled rotation gates ``\"mcr\"``, ``\"mcrx\"``, ``\"mcry\"``, ``\"mcrz\"`` to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and the ``\"statevector\"`` method of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:4912
msgid "Make simulator backends configurable. This allows setting persistant options such as simulation method and noise model for each simulator backend object."
msgstr ""

#: ../../release_notes.rst:4915
msgid "The :class:`~qiskit.providers.aer.QasmSimulator` and :class:`~qiskit.providers.aer.PulseSimulator` can also be configured from an :class:`~qiskit.providers.ibmq.IBMQBackend` backend object using the `:meth:`~qiskit.providers.aer.QasmSimulator.from_backend` method. For the :class:`~qiskit.providers.aer.QasmSimulator` this will configure the coupling map, basis gates, and basic device noise model based on the backend configuration and properties. For the :class:`~qiskit.providers.aer.PulseSimulator` the system model and defaults will be configured automatically from the backend configuration, properties and defaults."
msgstr ""

#: ../../release_notes.rst:4925
msgid "For example a noisy density matrix simulator backend can be constructed as ``QasmSimulator(method='density_matrix', noise_model=noise_model)``, or an ideal matrix product state simulator as ``QasmSimulator(method='matrix_product_state')``."
msgstr ""

#: ../../release_notes.rst:4929
msgid "A benefit is that a :class:`~qiskit.providers.aer.PulseSimulator` instance configured from a backend better serves as a drop-in replacement to the original backend, making it easier to swap in and out a simulator and real backend, e.g. when testing code on a simulator before using a real backend. For example, in the following code-block, the :class:`~qiskit.providers.aer.PulseSimulator` is instantiated from the ``FakeArmonk()`` backend. All configuration and default data is copied into the simulator instance, and so when it is passed as an argument to ``assemble``, it behaves as if the original backend was supplied (e.g. defaults from ``FakeArmonk`` will be present and used by ``assemble``)."
msgstr ""

#: ../../release_notes.rst:4945
msgid "While the above example is small, the demonstrated 'drop-in replacement' behavior should greatly improve the usability in more complicated work-flows, e.g. when calibration experiments are constructed using backend attributes."
msgstr ""

#: ../../release_notes.rst:4949
msgid "Adds support for qobj global phase to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and statevector methods of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:4954
msgid "Improves general noisy statevector simulation performance by adding a Kraus method to the gate fusion circuit optimization that allows applying gate fusion to noisy statevector simulations with general Kraus noise."
msgstr ""

#: ../../release_notes.rst:4958
msgid "Use move semantics for statevector and density matrix snapshots for the `\"statevector\"` and `\"density_matrix\"` methods of the :class:`~qiskit.providers.aer.QasmSimulator` if they are the final instruction in a circuit. This reduces the memory usage of the simulator improves the performance by avoiding copying a large array in the results."
msgstr ""

#: ../../release_notes.rst:4965
msgid "Adds support for general Kraus :class:`~qiskit.providers.aer.noise.QauntumError` gate errors in the :class:`~qiskit.providers.aer.noise.NoiseModel` to the ``\"matrix_product_state\"`` method of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:4971
msgid "Adds support for density matrix snapshot instruction :class:`qiskit.providers.aer.extensions.SnapshotDensityMatrix` to the ``\"matrix_product_state\"`` method of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:4976
msgid "Extends the SIMD vectorization of the statevector simulation method to the unitary matrix, superoperator matrix, and density matrix simulation methods. This gives roughtly a 2x performance increase general simulation using the :class:`~qiskit.providers.aer.UnitarySimulator`, the ``\"density_matrix\"`` method of the :class:`~qiskit.providers.aer.QasmSimulator`, gate fusion, and noise simulation."
msgstr ""

#: ../../release_notes.rst:4983
msgid "Adds a custom vector class to C++ code that has better integration with Pybind11. This haves the memory requirement of the :class:`~qiskit.providers.aer.StatevectorSimulator` by avoiding an memory copy during Python binding of the final simulator state."
msgstr ""

#: ../../release_notes.rst:4994
msgid "AER now uses Lapack to perform some matrix related computations. It uses the Lapack library bundled with OpenBlas (already available in Linux and Macos typical OpenBlas dsitributions; Windows version distributed with AER) or with the accelerate framework in MacOS."
msgstr ""

#: ../../release_notes.rst:4999
msgid "The deprecated support for running qiskit-aer with Python 3.5 has been removed. To use qiskit-aer >=0.7.0 you will now need at least Python 3.6. If you are using Python 3.5 the last version which will work is qiskit-aer 0.6.x."
msgstr ""

#: ../../release_notes.rst:5004
msgid "Updates gate fusion default thresholds so that gate fusion will be applied to circuits with of more than 14 qubits for statevector simulations on the :class:`~qiskit.providers.aer.StatevectorSimulator` and :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:5009
msgid "For the ``\"density_matrix\"`` method of the :class:`~qiskit.providers.aer.QasmSimulator` and for the :class:`~qiskit.providers.aer.UnitarySimulator` gate fusion will be applied to circuits with more than 7 qubits."
msgstr ""

#: ../../release_notes.rst:5014
msgid "Custom qubit threshold values can be set using the ``fusion_threshold`` backend option ie ``backend.set_options(fusion_threshold=10)``"
msgstr ""

#: ../../release_notes.rst:5017
msgid "Changes ``fusion_threshold`` backend option to apply fusion when the number of qubits is above the threshold, not equal or above the threshold, to match the behavior of the OpenMP qubit threshold parameter."
msgstr ""

#: ../../release_notes.rst:5027
msgid ":meth:`qiskit.providers.aer.noise.NoiseModel.set_x90_single_qubit_gates` has been deprecated as unrolling to custom basis gates has been added to the qiskit transpiler. The correct way to use an X90 based noise model is to define noise on the Sqrt(X) ``\"sx\"`` or ``\"rx\"`` gate and one of the single-qubit phase gates ``\"u1\"``, ``\"rx\"``, or ``\"p\"`` in the noise model."
msgstr ""

#: ../../release_notes.rst:5033
msgid "The ``variance`` kwarg of Snapshot instructions has been deprecated. This function computed the sample variance in the snapshot due to noise model sampling, not the variance due to measurement statistics so was often being used incorrectly. If noise modeling variance is required single shot snapshots should be used so variance can be computed manually in post-processing."
msgstr ""

#: ../../release_notes.rst:5046
msgid "Fixes bug in the :class:`~qiskit.providers.aer.StatevectorSimulator` that caused it to always run as CPU with double-precision without SIMD/AVX2 support even on systems with AVX2, or when single-precision or the GPU method was specified in the backend options."
msgstr ""

#: ../../release_notes.rst:5051
msgid "Fixes some for-loops in C++ code that were iterating over copies rather than references of container elements."
msgstr ""

#: ../../release_notes.rst:5054
msgid "Fixes a bug where snapshot data was always copied from C++ to Python rather than moved where possible. This will halve memory usage and improve simulation time when using large statevector or density matrix snapshots."
msgstr ""

#: ../../release_notes.rst:5058
msgid "Fix `State::snapshot_pauli_expval` to return correct Y expectation value in stabilizer simulator. Refer to `#895 <https://github.com/Qiskit/qiskit-aer/issues/895>` for more details."
msgstr ""

#: ../../release_notes.rst:5063
msgid "The controller_execute wrappers have been adjusted to be functors (objects) rather than free functions. Among other things, this allows them to be used in multiprocessing.pool.map calls."
msgstr ""

#: ../../release_notes.rst:5067
msgid "Add missing available memory checks for the :class:`~qiskit.providers.aer.StatevectorSimulator` and :class:`~qiskit.providers.aer.UnitarySimulator`. This throws an exception if the memory required to simulate the number of qubits in a circuit exceeds the available memory of the system."
msgstr ""

#: ../../release_notes.rst:5077
msgid "Ignis 0.5.0"
msgstr ""

#: ../../release_notes.rst:5084
msgid "This release includes a new module for expectation value measurement error mitigation, improved plotting functionality for quantum volume experiments, several bug fixes, and drops support for Python 3.5."
msgstr ""

#: ../../release_notes.rst:5094
msgid "The :func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq` function allows an optional input of gate objects as `interleaved_elem`. In addition, the CNOT-Dihedral class :class:`qiskit.ignis.verification.randomized_benchmarking.CNOTDihedral` has a new method `to_instruction`, and the existing `from_circuit` method has an optional input of an `Instruction` (in addition to `QuantumCircuit`)."
msgstr ""

#: ../../release_notes.rst:5101
msgid "The :class:`qiskit.ignis.verification.randomized_benchmarking.CNOTDihedral` now contains the following new features. Initialization from various types of objects: `CNOTDihedral`, `ScalarOp`, `QuantumCircuit`, `Instruction` and `Pauli`. Converting to a matrix using `to_matrix` and to an operator using `to_operator`. Tensor product methods `tensor` and `expand`. Calculation of the adjoint, conjugate and transpose using `conjugate`, `adjoint` and `transpose` methods. Verify that an element is CNOTDihedral using `is_cnotdihedral` method. Decomposition method `to_circuit` of a CNOTDihedral element into a circuit was extended to allow any number of qubits, based on the function `decompose_cnotdihedral_general`."
msgstr ""

#: ../../release_notes.rst:5114
msgid "Adds expectation value measurement error mitigation to the mitigation module. This supports using *complete* N-qubit assignment matrix, single-qubit *tensored* assignment matrix, or *continuous time Markov process (CTMP)* [1] measurement error mitigation when computing expectation values of diagonal operators from counts dictionaries. Expectation values are computed using the using the :func:`qiskit.ignis.mitigation.expectation_value` function."
msgstr ""

#: ../../release_notes.rst:5121
msgid "Calibration circuits for calibrating a measurement error mitigator are generated using the :func:`qiskit.ignis.mitigation.expval_meas_mitigator_circuits` function, and the result fitted using the :class:`qiskit.ignis.mitigation.ExpvalMeasMitigatorFitter` class. The fitter returns a mitigator object can the be supplied as an argument to the :func:`~qiskit.ignis.mitigation.expectation_value` function to apply mitigation."
msgstr ""

#: ../../release_notes.rst:5130
msgid "[1] S Bravyi, S Sheldon, A Kandala, DC Mckay, JM Gambetta,"
msgstr ""

#: ../../release_notes.rst:5129
msgid "*Mitigating measurement errors in multi-qubit experiments*, arXiv:2006.14044 [quant-ph]."
msgstr ""

#: ../../release_notes.rst:5132 ../../release_notes.rst:9131
msgid "Example:"
msgstr ""

#: ../../release_notes.rst:5134
msgid "The following example shows calibrating a 5-qubit expectation value measurement error mitigator using the ``'tensored'`` method."
msgstr ""

#: ../../release_notes.rst:5157
msgid "The following shows how to use the above mitigator to apply measurement error mitigation to expectation value computations"
msgstr ""

#: ../../release_notes.rst:5187
msgid "Adds Numba as an optional dependency. Numba is used to significantly increase the performance of the :class:`qiskit.ignis.mitigation.CTMPExpvalMeasMitigator` class used for expectation value measurement error mitigation with the CTMP method."
msgstr ""

#: ../../release_notes.rst:5193
msgid "Add two methods to :class:`qiskit.ignis.verification.quantum_volume.QVFitter`."
msgstr ""

#: ../../release_notes.rst:5195
msgid ":meth:`qiskit.ignis.verification.quantum_volume.QVFitter.calc_z_value` to calculate z value in standard normal distribution using mean and standard deviation sigma. If sigma = 0, it raises a warning and assigns a small value (1e-10) for sigma so that the code still runs."
msgstr ""

#: ../../release_notes.rst:5199
msgid ":meth:`qiskit.ignis.verification.quantum_volume.QVFitter.calc_confidence_level` to calculate confidence level using z value."
msgstr ""

#: ../../release_notes.rst:5203
msgid "Store confidence level even when hmean < 2/3 in :meth:`qiskit.ignis.verification.quantum_volume.QVFitter.qv_success`."
msgstr ""

#: ../../release_notes.rst:5206
msgid "Add explanations for how to calculate statistics based on binomial distribution in :meth:`qiskit.ignis.verification.quantum_volume.QVFitter.calc_statistics`."
msgstr ""

#: ../../release_notes.rst:5210
msgid "The :class:`qiskit.ignis.verification.QVFitter` method :meth:`~qiskit.ignis.verification.QVFitter.plot_qv_data` has been updated to return a ``matplotlib.Figure`` object. Previously, it would not return anything. By returning a figure this makes it easier to integrate the visualizations into a larger ``matplotlib`` workflow."
msgstr ""

#: ../../release_notes.rst:5215
msgid "The error bars in the figure produced by the :class:`qiskit.ignis.verification.QVFitter` method :meth:`qiskit.ignis.verification.QVFitter.plot_qv_data` has been updated to represent two-sigma confidence intervals. Previously, the error bars represent one-sigma confidence intervals. The success criteria of Quantum Volume benchmarking requires heavy output probability > 2/3 with one-sided two-sigma confidence (~97.7%). Changing error bars to represent two-sigma confidence intervals allows easily identification of success in the figure."
msgstr ""

#: ../../release_notes.rst:5224
msgid "A new kwarg, ``figsize`` has been added to the :class:`qiskit.ignis.verification.QVFitter` method :meth:`qiskit.ignis.verification.QVFitter.plot_qv_data`. This kwarg takes in a tuple of the form ``(x, y)`` where ``x`` and ``y`` are the dimension in inches to make the generated plot."
msgstr ""

#: ../../release_notes.rst:5230
msgid "The :meth:`qiskit.ignis.verification.quantum_volume.QVFitter.plot_hop_accumulative` method has been added to plot heavy output probability (HOP) vs number of trials similar to Figure 2a of Quantum Volume 64 paper (`arXiv:2008.08571 <https://arxiv.org/abs/2008.08571>`_). HOP of individual trials are plotted as scatters and cummulative HOP are plotted in red line. Two-sigma confidence intervals are plotted as shaded area and 2/3 success threshold is plotted as dashed line."
msgstr ""

#: ../../release_notes.rst:5237
msgid "The :meth:`qiskit.ignis.verification.quantum_volume.QVFitter.plot_qv_trial` method has been added to plot individual trials, leveraging on the :meth:`qiskit.visualization.plot_histogram` method from Qiskit Terra. Bitstring counts are plotted as overlapping histograms for ideal (hollow) and experimental (filled) values. Experimental heavy output probability are shown on the legend. Median probability is plotted as red dashed line."
msgstr ""

#: ../../release_notes.rst:5251
msgid "The deprecated support for running qiskit-ignis with Python 3.5 has been removed. To use qiskit-ignis >=0.5.0 you will now need at least Python 3.6. If you are using Python 3.5 the last version which will work is qiskit-ignis 0.4.x."
msgstr ""

#: ../../release_notes.rst:5263
msgid "Fixing a bug in the class :class:`qiskit.ignis.verification.randomized_benchmarking.CNOTDihedral` for elements with more than 5 quits."
msgstr ""

#: ../../release_notes.rst:5267
msgid "Fix the confidence level threshold for :meth:`qiskit.ignis.verification.quantum_volume.QVFitter.qv_success` to 0.977 corresponding to z = 2 as defined by the QV paper Algorithm 1."
msgstr ""

#: ../../release_notes.rst:5271
msgid "Fix a bug at :func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq` which caused all the subsystems with the same size in the given rb_pattern to have the same gates when a 'rand_seed' parameter was given to the function."
msgstr ""

#: ../../release_notes.rst:5277
msgid "Aqua 0.8.0"
msgstr ""

#: ../../release_notes.rst:5284
msgid "This release introduces an interface for running the available methods for Bosonic problems. In particular we introduced a full interface for running vibronic structure calculations."
msgstr ""

#: ../../release_notes.rst:5288
msgid "This release introduces an interface for excited states calculations. It is now easier for the user to create a general excited states calculation. This calculation is based on a Driver which provides the relevant information about the molecule, a Transformation which provides the information about the mapping of the problem into a qubit Hamiltonian, and finally a Solver. The Solver is the specific way which the excited states calculation is done (the algorithm). This structure follows the one of the ground state calculations. The results are modified to take lists of expectation values instead of a single one. The QEOM and NumpyEigensolver are adapted to the new structure. A factory is introduced to run a numpy eigensolver with a specific filter  (to target states of specific symmetries)."
msgstr ""

#: ../../release_notes.rst:5300 ../../release_notes.rst:7884
msgid "VQE expectation computation with Aer qasm_simulator now defaults to a computation that has the expected shot noise behavior."
msgstr ""

#: ../../release_notes.rst:5309
msgid "Introduced an option `warm_start` that should be used when tuning other options does not help. When this option is enabled, a relaxed problem (all variables are continuous) is solved first and the solution is used to initialize the state of the optimizer before it starts the iterative process in the `solve` method."
msgstr ""

#: ../../release_notes.rst:5314
msgid "The amplitude estimation algorithms now use ``QuantumCircuit`` objects as inputs to specify the A- and Q operators. This change goes along with the introduction of the ``GroverOperator`` in the circuit library, which allows an intuitive and fast construction of different Q operators. For example, a Bernoulli-experiment can now be constructed as"
msgstr ""

#: ../../release_notes.rst:5346
msgid "Add the possibility to compute Conditional Value at Risk (CVaR) expectation values."
msgstr ""

#: ../../release_notes.rst:5349
msgid "Given a diagonal observable H, often corresponding to the objective function of an optimization problem, we are often not as interested in minimizing the average energy of our observed measurements. In this context, we are satisfied if at least some of our measurements achieve low energy. (Note that this is emphatically not the case for chemistry problems)."
msgstr ""

#: ../../release_notes.rst:5355
msgid "To this end, one might consider using the best observed sample as a cost function during variational optimization. The issue here, is that this can result in a non-smooth optimization surface. To resolve this issue, we can smooth the optimization surface by using not just the best observed sample, but instead average over some fraction of best observed samples. This is exactly what the CVaR estimator accomplishes [1]."
msgstr ""

#: ../../release_notes.rst:5362
msgid "Let :math:`\\alpha` be a real number in :math:`[0,1]` which specifies the fraction of best observed samples which are used to compute the objective function. Observe that if :math:`\\alpha = 1`, CVaR is equivalent to a standard expectation value. Similarly, if :math:`\\alpha = 0`, then CVaR corresponds to using the best observed sample. Intermediate values of :math:`\\alpha` interpolate between these two objective functions."
msgstr ""

#: ../../release_notes.rst:5369
msgid "The functionality to use CVaR is included into the operator flow through a new subclass of OperatorStateFn called CVaRMeasurement. This new StateFn object is instantied in the same way as an OperatorMeasurement with the exception that it also accepts an `alpha` parameter and that it automatically enforces the  `is_measurement` attribute to be True. Observe that it is unclear what a CVaRStateFn would represent were it not a measurement."
msgstr ""

#: ../../release_notes.rst:5376 ../../release_notes.rst:5387
#: ../../release_notes.rst:5462 ../../release_notes.rst:5511
#: ../../release_notes.rst:5535 ../../release_notes.rst:11723
msgid "Examples::"
msgstr ""

#: ../../release_notes.rst:5384
msgid "Similarly, an operator corresponding to a standard expectation value can be converted into a CVaR expectation using the CVaRExpectation converter."
msgstr ""

#: ../../release_notes.rst:5395
msgid "See [1] for additional details regarding this technique and it's empircal performance."
msgstr ""

#: ../../release_notes.rst:5398
msgid "References:"
msgstr ""

#: ../../release_notes.rst:5402
msgid "[1]: Barkoutsos, P. K., Nannicini, G., Robert, A., Tavernelli, I., and Woerner, S.,"
msgstr ""

#: ../../release_notes.rst:5401
msgid "\"Improving Variational Quantum Optimization using CVaR\" `arXiv:1907.04769 <https://arxiv.org/abs/1907.04769>`_"
msgstr ""

#: ../../release_notes.rst:5404
msgid "New  interface ``Eigensolver`` for Eigensolver algorithms."
msgstr ""

#: ../../release_notes.rst:5406
msgid "An interface for excited states calculation has been added to the chemistry module. It is now easier for the user to create a general excited states calculation. This calculation is based on a ``Driver`` which provides the relevant information about the molecule, a ``Transformation`` which provides the information about the mapping of the problem into a qubit Hamiltonian, and finally a Solver. The Solver is the specific way which the excited states calculation is done (the algorithm). This structure follows the one of the ground state calculations. The results are modified to take lists of expectation values instead of a single one. The ``QEOM`` and ``NumpyEigensolver`` are adapted to the new structure. A factory is introduced to run a numpy eigensolver with a specific filter (to target states of specific symmetries)."
msgstr ""

#: ../../release_notes.rst:5418
msgid "In addition to the workflows for solving Fermionic problems, interfaces for calculating Bosonic ground and excited states have been added. In particular we introduced a full interface for running vibronic structure calculations."
msgstr ""

#: ../../release_notes.rst:5422
msgid "The ``OrbitalOptimizationVQE`` has been added as new ground state solver in the chemistry module. This solver allows for the simulatneous optimization of the variational parameters and the orbitals of the molecule. The algorithm is introduced in Sokolov et al., The Journal of Chemical Physics 152 (12)."
msgstr ""

#: ../../release_notes.rst:5427
msgid "A new algorithm has been added: the Born Openheimer Potential Energy surface for the calculation of potential energy surface along different degrees of freedom of the molecule. The algorithm is called ``BOPESSampler``. It further provides functionalities of fitting the potential energy surface to an analytic function of predefined potentials."
msgstr ""

#: ../../release_notes.rst:5432
msgid "A feasibility check of the obtained solution has been added to all optimizers in the optimization stack. This has been implemented by adding two new methods to ``QuadraticProgram``: * ``get_feasibility_info(self, x: Union[List[float], np.ndarray])`` accepts an array and returns whether this solution is feasible and a list of violated variables(violated bounds) and a list of violated constraints. * ``is_feasible(self, x: Union[List[float], np.ndarray])`` accepts an array and returns whether this solution is feasible or not."
msgstr ""

#: ../../release_notes.rst:5440
msgid "Add circuit-based versions of ``FixedIncomeExpectedValue``, ``EuropeanCallDelta``, ``GaussianConditionalIndependenceModel`` and ``EuropeanCallExpectedValue`` to ``qiskit.finance.applications``."
msgstr ""

#: ../../release_notes.rst:5444
msgid "Gradient Framework. :class:`qiskit.operators.gradients` Given an operator that represents either a quantum state resp. an expectation value, the gradient framework enables the evaluation of gradients, natural gradients, Hessians, as well as the Quantum Fisher Information."
msgstr ""

#: ../../release_notes.rst:5450
msgid "Suppose a parameterized quantum state `|ψ(θ)〉 = V(θ)|ψ〉` with input state `|ψ〉` and parametrized Ansatz `V(θ)`, and an Operator `O(ω)`."
msgstr ""

#: ../../release_notes.rst:5453
msgid "Gradients: We want to compute :math:`d⟨ψ(θ)|O(ω)|ψ(θ)〉/ dω` resp. :math:`d⟨ψ(θ)|O(ω)|ψ(θ)〉/ dθ` resp. :math:`d⟨ψ(θ)|i〉⟨i|ψ(θ)〉/ dθ`."
msgstr ""

#: ../../release_notes.rst:5457
msgid "The last case corresponds to the gradient w.r.t. the sampling probabilities of `|ψ(θ)`. These gradients can be computed with different methods, i.e. a parameter shift, a linear combination of unitaries and a finite difference method."
msgstr ""

#: ../../release_notes.rst:5486
msgid "Hessians: We want to compute :math:`d^2⟨ψ(θ)|O(ω)|ψ(θ)〉/ dω^2` resp. :math:`d^2⟨ψ(θ)|O(ω)|ψ(θ)〉/ dθ^2` resp. :math:`d^2⟨ψ(θ)|O(ω)|ψ(θ)〉/ dθdω` resp. :math:`d^2⟨ψ(θ)|i〉⟨i|ψ(θ)〉/ dθ^2`."
msgstr ""

#: ../../release_notes.rst:5491
msgid "The last case corresponds to the Hessian w.r.t. the sampling probabilities of `|ψ(θ)`. Just as the first order gradients, the Hessians can be evaluated with different methods, i.e. a parameter shift, a linear combination of unitaries and a finite difference method. Given a tuple of parameters ``Hessian().convert(op, param_tuple)`` returns the value for the second order derivative. If a list of parameters is given ``Hessian().convert(op, param_list)`` returns the full Hessian for all the given parameters according to the given parameter order."
msgstr ""

#: ../../release_notes.rst:5500
msgid "QFI: The Quantum Fisher Information `QFI` is a metric tensor which is representative for the representation capacity of a parameterized quantum state `|ψ(θ)〉 = V(θ)|ψ〉` generated by an input state `|ψ〉` and a parametrized Ansatz `V(θ)`. The entries of the `QFI` for a pure state read :math:`[QFI]kl= Re[〈∂kψ|∂lψ〉−〈∂kψ|ψ〉〈ψ|∂lψ〉] * 4`."
msgstr ""

#: ../../release_notes.rst:5506
msgid "Just as for the previous derivative types, the QFI can be computed using different methods: a full representation based on a linear combination of unitaries implementation, a block-diagonal and a diagonal representation based on an overlap method."
msgstr ""

#: ../../release_notes.rst:5524
msgid "The combination of the QFI and the gradient lead to a special form of a gradient, namely"
msgstr ""

#: ../../release_notes.rst:5527
msgid "NaturalGradients: The natural gradient is a special gradient method which rescales a gradient w.r.t. a state parameter with the inverse of the corresponding Quantum Fisher Information (QFI) :math:`QFI^-1 d⟨ψ(θ)|O(ω)|ψ(θ)〉/ dθ`. Hereby, we can choose a gradient as well as a QFI method and a regularization method which is used together with a least square solver instead of exact invertion of the QFI:"
msgstr ""

#: ../../release_notes.rst:5541
msgid "The gradient framework is also compatible with the optimizers from `qiskit.aqua.components.optimizers`. The derivative classes come with a `gradient_wrapper()` function which returns the corresponding callable."
msgstr ""

#: ../../release_notes.rst:5545
msgid "Introduces ``transformations`` for the fermionic and bosonic transformation of a problem instance. Transforms the fermionic operator to qubit operator. Respective class for the transformation is ``fermionic_transformation`` Introduces in algorithms ``ground_state_solvers`` for the calculation of ground state properties. The calculation can be done either using an ``MinimumEigensolver`` or using ``AdaptVQE`` Introduces ``chemistry/results`` where the eigenstate_result and the electronic_structure_result are also used for the algorithms. Introduces Minimum Eigensolver factories ``minimum_eigensolver_factories`` where chemistry specific minimum eigensolvers can be initialized Introduces orbital optimization vqe ``oovqe`` as a ground state solver for chemistry applications"
msgstr ""

#: ../../release_notes.rst:5557
msgid "New Algorithm result classes:"
msgstr ""

#: ../../release_notes.rst:5559
msgid ":class:`~qiskit.aqua.algorithms.Grover` method :meth:`~qiskit.aqua.algorithms.Grover._run` returns class :class:`~qiskit.aqua.algorithms.GroverResult`. :class:`~qiskit.aqua.algorithms.AmplitudeEstimation` method :meth:`~qiskit.aqua.algorithms.AmplitudeEstimation._run` returns class :class:`~qiskit.aqua.algorithms.AmplitudeEstimationResult`. :class:`~qiskit.aqua.algorithms.IterativeAmplitudeEstimation` method :meth:`~qiskit.aqua.algorithms.IterativeAmplitudeEstimation._run` returns class :class:`~qiskit.aqua.algorithms.IterativeAmplitudeEstimationResult`. :class:`~qiskit.aqua.algorithms.MaximumLikelihoodAmplitudeEstimation` method :meth:`~qiskit.aqua.algorithms.MaximumLikelihoodAmplitudeEstimation._run` returns class :class:`~qiskit.aqua.algorithms.MaximumLikelihoodAmplitudeEstimationResult`."
msgstr ""

#: ../../release_notes.rst:5572 ../../release_notes.rst:5583
msgid "All new result classes are backwards compatible with previous result dictionary."
msgstr ""

#: ../../release_notes.rst:5574
msgid "New Linear Solver result classes:"
msgstr ""

#: ../../release_notes.rst:5576
msgid ":class:`~qiskit.aqua.algorithms.HHL` method :meth:`~qiskit.aqua.algorithms.HHL._run` returns class :class:`~qiskit.aqua.algorithms.HHLResult`. :class:`~qiskit.aqua.algorithms.NumPyLSsolver` method :meth:`~qiskit.aqua.algorithms.NumPyLSsolver._run` returns class :class:`~qiskit.aqua.algorithms.NumPyLSsolverResult`."
msgstr ""

#: ../../release_notes.rst:5585
msgid "``MinimumEigenOptimizationResult`` now exposes properties: ``samples`` and ``eigensolver_result``. The latter is obtained from the underlying algorithm used by the optimizer and specific to the algorithm. ``RecursiveMinimumEigenOptimizer`` now returns an instance of the result class ``RecursiveMinimumEigenOptimizationResult`` which in turn may contains intermediate results obtained from the underlying algorithms. The dedicated result class exposes properties ``replacements`` and ``history`` that are specific to this optimizer. The depth of the history is managed by the ``history`` parameter of the optimizer."
msgstr ""

#: ../../release_notes.rst:5594
msgid "``GroverOptimizer`` now returns an instance of ``GroverOptimizationResult`` and this result class exposes properties ``operation_counts``, ``n_input_qubits``, and ``n_output_qubits`` directly. These properties are not available in the ``raw_results`` dictionary anymore."
msgstr ""

#: ../../release_notes.rst:5598
msgid "``SlsqpOptimizer`` now returns an instance of ``SlsqpOptimizationResult`` and this result class exposes additional properties specific to the SLSQP implementation."
msgstr ""

#: ../../release_notes.rst:5601
msgid "Support passing ``QuantumCircuit`` objects as generator circuits into the ``QuantumGenerator``."
msgstr ""

#: ../../release_notes.rst:5604
msgid "Removes the restriction to real input vectors in CircuitStateFn.from_vector. The method calls extensions.Initialize. The latter explicitly supports (in API and documentation) complex input vectors. So this restriction seems unnecessary."
msgstr ""

#: ../../release_notes.rst:5608
msgid "Simplified `AbelianGrouper` using a graph coloring algorithm of retworkx. It is faster than the numpy-based coloring algorithm."
msgstr ""

#: ../../release_notes.rst:5611
msgid "Allow calling ``eval`` on state function objects with no argument, which returns the ``VectorStateFn`` representation of the state function. This is consistent behavior with ``OperatorBase.eval``, which returns the ``MatrixOp`` representation, if no argument is passed."
msgstr ""

#: ../../release_notes.rst:5616
msgid "Adds ``max_iterations`` to the ``VQEAdapt`` class in order to allow limiting the maximum number of iterations performed by the algorithm."
msgstr ""

#: ../../release_notes.rst:5619
msgid "VQE expectation computation with Aer qasm_simulator now defaults to a computation that has the expected shot noise behavior. The special Aer snapshot based computation, that is much faster, with the ideal output similar to state vector simulator, may still be chosen but like before Aqua 0.7 it now no longer defaults to this but can be chosen."
msgstr ""

#: ../../release_notes.rst:5631
msgid "Extension of the previous Analytic Quantum Gradient Descent (AQGD) classical optimizer with the AQGD with Epochs. Now AQGD performs the gradient descent optimization with a momentum term, analytic gradients, and an added customized step length schedule for parametrized quantum gates. Gradients are computed \"analytically\" using the quantum circuit when evaluating the objective function."
msgstr ""

#: ../../release_notes.rst:5638
msgid "The deprecated support for running qiskit-aqua with Python 3.5 has been removed. To use qiskit-aqua >=0.8.0 you will now need at least Python 3.6. If you are using Python 3.5 the last version which will work is qiskit-aqua 0.7.x."
msgstr ""

#: ../../release_notes.rst:5643
msgid "Added retworkx as a new dependency."
msgstr ""

#: ../../release_notes.rst:5651
msgid "The ``i_objective`` argument of the amplitude estimation algorithms has been renamed to ``objective_qubits``."
msgstr ""

#: ../../release_notes.rst:5654
msgid "TransformationType"
msgstr ""

#: ../../release_notes.rst:5656
msgid "QubitMappingType"
msgstr ""

#: ../../release_notes.rst:5658
msgid "Deprecate the ``CircuitFactory`` and derived types. The ``CircuitFactory`` has been introduced as temporary class when the ``QuantumCircuit`` missed some features necessary for applications in Aqua. Now that the circuit has all required functionality, the circuit factory can be removed. The replacements are shown in the following table."
msgstr ""

#: ../../release_notes.rst:5687 ../../release_notes.rst:7482
msgid "The ising convert classes :class:`qiskit.optimization.converters.QuadraticProgramToIsing` and :class:`qiskit.optimization.converters.IsingToQuadraticProgram` have been deprecated and will be removed in a future release. Instead the :class:`qiskit.optimization.QuadraticProgram` methods :meth:`~qiskit.optimization.QuadraticProgram.to_ising` and :meth:`~qiskit.optimization.QuadraticPrgraom.from_ising` should be used instead."
msgstr ""

#: ../../release_notes.rst:5696
msgid "Deprecate the ``WeightedSumOperator`` which has been ported to the circuit library as ``WeightedAdder`` in ``qiskit.circuit.library``."
msgstr ""

#: ../../release_notes.rst:5699
msgid "``Core Hamiltonian`` class is deprecated in favor of the ``FermionicTransformation`` ``Chemistry Operator`` class is deprecated in favor of the ``tranformations`` ``minimum_eigen_solvers/vqe_adapt`` is also deprecated and moved as an implementation of the ground_state_solver interface ``applications/molecular_ground_state_energy`` is deprecated in favor of ``ground_state_solver``"
msgstr ""

#: ../../release_notes.rst:5705
msgid "``Optimizer.SupportLevel`` nested enum is replaced by ``OptimizerSupportLevel`` and ``Optimizer.SupportLevel`` was removed. Use, for example, ``OptimizerSupportLevel.required`` instead of ``Optimizer.SupportLevel.required``."
msgstr ""

#: ../../release_notes.rst:5709
msgid "Deprecate the ``UnivariateVariationalDistribution`` and ``MultivariateVariationalDistribution`` as input to the ``QuantumGenerator``. Instead, plain ``QuantumCircuit`` objects can be used."
msgstr ""

#: ../../release_notes.rst:5714
msgid "Ignored `fast` and `use_nx` options of `AbelianGrouper.group_subops` to be removed in the future release."
msgstr ""

#: ../../release_notes.rst:5717 ../../release_notes.rst:7477
msgid "GSLS optimizer class deprecated ``__init__`` parameter ``max_iter`` in favor of ``maxiter``. SPSA optimizer class deprecated ``__init__`` parameter ``max_trials`` in favor of ``maxiter``. optimize_svm function deprecated ``max_iters`` parameter in favor of ``maxiter``. ADMMParameters class deprecated ``__init__`` parameter ``max_iter`` in favor of ``maxiter``."
msgstr ""

#: ../../release_notes.rst:5729
msgid "The UCCSD excitation list, comprising single and double excitations, was not being generated correctly when an active space was explicitly provided to UCSSD via the active_(un)occupied parameters."
msgstr ""

#: ../../release_notes.rst:5733
msgid "For the amplitude estimation algorithms, we define the number of oracle queries as number of times the Q operator/Grover operator is applied. This includes the number of shots. That factor has been included in MLAE and IQAE but was missing in the 'standard' QAE."
msgstr ""

#: ../../release_notes.rst:5738
msgid "Fix CircuitSampler.convert, so that the ``is_measurement`` property is propagated to converted StateFns."
msgstr ""

#: ../../release_notes.rst:5741
msgid "Fix double calculation of coefficients in :meth`~qiskit.aqua.operators.VectorStateFn.to_circuit_op`."
msgstr ""

#: ../../release_notes.rst:5744
msgid "Calling PauliTrotterEvolution.convert on an operator including a term that is a scalar multiple of the identity gave an incorrect circuit, one that ignored the scalar coefficient. This fix includes the effect of the coefficient in the global_phase property of the circuit."
msgstr ""

#: ../../release_notes.rst:5749
msgid "Make ListOp.num_qubits check that all ops in list have the same num_qubits Previously, the number of qubits in the first operator in the ListOp was returned. With this change, an additional check is made that all other operators also have the same number of qubits."
msgstr ""

#: ../../release_notes.rst:5754
msgid "Make PauliOp.exp_i() generate the correct matrix with the following changes. 1) There was previously an error in the phase of a factor of 2. 2) The global phase was ignored when converting the circuit to a matrix. We now use qiskit.quantum_info.Operator, which is generally useful for converting a circuit to a unitary matrix, when possible."
msgstr ""

#: ../../release_notes.rst:5761
msgid "Fixes the cyclicity detection as reported buggy in https://github.com/Qiskit/qiskit-aqua/issues/1184."
msgstr ""

#: ../../release_notes.rst:5766
msgid "IBM Q Provider 0.11.0"
msgstr ""

#: ../../release_notes.rst:5773
msgid "The deprecated support for running qiskit-ibmq-provider with Python 3.5 has been removed. To use qiskit-ibmq-provider >=0.11.0 you will now need at least Python 3.6. If you are using Python 3.5 the last version which will work is qiskit-ibmq-provider 0.10.x."
msgstr ""

#: ../../release_notes.rst:5778
msgid "Prior to this release, ``websockets`` 7.0 was used for Python 3.6. With this release, ``websockets`` 8.0 or above is required for all Python versions. The package requirements have been updated to reflect this."
msgstr ""

#: ../../release_notes.rst:5785
msgid "Qiskit 0.22.0"
msgstr ""

#: ../../release_notes.rst:5788 ../../release_notes.rst:5862
#: ../../release_notes.rst:5916
msgid "Terra 0.15.2"
msgstr ""

#: ../../release_notes.rst:5793 ../../release_notes.rst:5867
#: ../../release_notes.rst:5978 ../../release_notes.rst:7126
msgid "Aer 0.6.1"
msgstr ""

#: ../../release_notes.rst:5798 ../../release_notes.rst:5872
#: ../../release_notes.rst:5983 ../../release_notes.rst:7312
msgid "Ignis 0.4.0"
msgstr ""

#: ../../release_notes.rst:5803 ../../release_notes.rst:5877
#: ../../release_notes.rst:5988 ../../release_notes.rst:7440
msgid "Aqua 0.7.5"
msgstr ""

#: ../../release_notes.rst:5808
msgid "IBM Q Provider 0.10.0"
msgstr ""

#: ../../release_notes.rst:5815
msgid "CQC randomness extractors can now be invoked asynchronously, using methods :meth:`~qiskit.providers.ibmq.random.CQCExtractor.run_async_ext1` and :meth:`~qiskit.providers.ibmq.random.CQCExtractor.run_async_ext2`. Each of these methods returns a :class:`~qiskit.providers.ibmq.random.CQCExtractorJob` instance that allows you to check on the job status (using :meth:`~qiskit.providers.ibmq.random.CQCExtractorJob.status`) and wait for its result (using :meth:`~qiskit.providers.ibmq.random.CQCExtractorJob.block_until_ready`). The :meth:`qiskit.provider.ibmq.random.CQCExtractor.run` method remains synchronous."
msgstr ""

#: ../../release_notes.rst:5826
msgid "You can now use the new IBMQ experiment service to query, retrieve, and download experiment related data. Interface to this service is located in the new :mod:`qiskit.providers.ibmq.experiment` package. Note that this feature is still in beta, and not all accounts have access to it. It is also subject to heavy modification in both functionality and API without backward compatibility."
msgstr ""

#: ../../release_notes.rst:5833
msgid "Two Jupyter magic functions, the IQX dashboard and the backend widget, are updated to display backend reservations. If a backend has reservations scheduled in the next 24 hours, time to the next one and its duration are displayed (e.g. ``Reservation: in 6 hrs 30 min (60m)``). If there is a reservation and the backend is active, the backend status is displayed as ``active [R]``."
msgstr ""

#: ../../release_notes.rst:5846
msgid "Starting from this release, the `basis_gates` returned by :meth:`qiskit.providers.ibmq.IBMQBackend.configuration` may differ for each backend. You should update your program if it relies on the basis gates being ``['id','u1','u2','u3','cx']``. We recommend always using the :meth:`~qiskit.providers.ibmq.IBMQBackend.configuration` method to find backend configuration values instead of hard coding them."
msgstr ""

#: ../../release_notes.rst:5853
msgid "``qiskit-ibmq-provider`` release 0.10 requires ``qiskit-terra`` release 0.15 or above. The package metadata has been updated to reflect the new dependency."
msgstr ""

#: ../../release_notes.rst:5859
msgid "Qiskit 0.21.0"
msgstr ""

#: ../../release_notes.rst:5882
msgid "IBM Q Provider 0.9.0"
msgstr ""

#: ../../release_notes.rst:5889
msgid "You can now access the IBMQ random number services, such as the CQC randomness extractor, using the new package :mod:`qiskit.providers.ibmq.random`. Note that this feature is still in beta, and not all accounts have access to it. It is also subject to heavy modification in both functionality and API without backward compatibility."
msgstr ""

#: ../../release_notes.rst:5901
msgid "Fixes an issue that may raise a ``ValueError`` if :meth:`~qiskit.providers.ibmq.IBMQBackend.retrieve_job` is used to retrieve a job submitted via the IBM Quantum Experience Composer."
msgstr ""

#: ../../release_notes.rst:5905
msgid ":class:`~qiskit.providers.ibmq.managed.IBMQJobManager` has been updated so that if a time out happens while waiting for an old job to finish, the time out error doesn't prevent a new job to be submitted. Fixes `#737 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/737>`_"
msgstr ""

#: ../../release_notes.rst:5913
msgid "Qiskit 0.20.1"
msgstr ""

#: ../../release_notes.rst:5923
msgid "When accessing the ``definition`` attribute of a parameterized ``Gate`` instance, the generated ``QuantumCircuit`` had been generated with an invalid ``ParameterTable``, such that reading from ``QuantumCircuit.parameters`` or calling ``QuantumCircuit.bind_parameters`` would incorrectly report the unbound parameters. This has been resolved."
msgstr ""

#: ../../release_notes.rst:5929
msgid "``SXGate().inverse()`` had previously returned an 'sx_dg' gate with a correct ``definition`` but incorrect ``to_matrix``. This has been updated such that ``SXGate().inverse()`` returns an ``SXdgGate()`` and vice versa."
msgstr ""

#: ../../release_notes.rst:5933
msgid "``Instruction.inverse()``, when not overridden by a subclass, would in some cases return a ``Gate`` instance with an incorrect ``to_matrix`` method. The instances of incorrect ``to_matrix`` methods have been removed."
msgstr ""

#: ../../release_notes.rst:5937
msgid "For ``C3XGate`` with a non-zero ``angle``, inverting the gate via ``C3XGate.inverse()`` had previously generated an incorrect inverse gate. This has been corrected."
msgstr ""

#: ../../release_notes.rst:5941
msgid "The ``MCXGate`` modes have been updated to return a gate of the same mode when calling ``.inverse()``. This resolves an issue where in some cases, transpiling a circuit containing the inverse of an ``MCXVChain`` gate would raise an error."
msgstr ""

#: ../../release_notes.rst:5946
msgid "Previously, when creating a multiply controlled phase gate via ``PhaseGate.control``, an ``MCU1Gate`` gate had been returned. This has been had corrected so that an ``MCPhaseGate`` is returned."
msgstr ""

#: ../../release_notes.rst:5950
msgid "Previously, attempting to decompose a circuit containing an ``MCPhaseGate`` would raise an error due to an inconsistency in the definition of the ``MCPhaseGate``. This has been corrected."
msgstr ""

#: ../../release_notes.rst:5954
msgid "``QuantumCircuit.compose`` and ``DAGCircuit.compose`` had, in some cases, incorrectly translated conditional gates if the input circuit contained more than one ``ClassicalRegister``. This has been resolved."
msgstr ""

#: ../../release_notes.rst:5965
msgid "Extending circuits with differing registers updated the ``qregs`` and ``cregs`` properties accordingly, but not the ``qubits`` and ``clbits`` lists. As these are no longer generated from the registers but are cached lists, this lead to a discrepancy of registers and bits. This has been fixed and the ``extend`` method explicitly updates the cached bit lists."
msgstr ""

#: ../../release_notes.rst:5971
msgid "Fix bugs of the concrete implementations of meth:`~qiskit.circuit.ControlledGate.inverse` method which do not preserve the ``ctrl_state`` parameter."
msgstr ""

#: ../../release_notes.rst:5975
msgid "A bug was fixed that caused long pulse schedules to throw a recursion error."
msgstr ""

#: ../../release_notes.rst:5993 ../../release_notes.rst:7585
msgid "IBM Q Provider 0.8.0"
msgstr ""

#: ../../release_notes.rst:6000
msgid "Qiskit 0.20.0"
msgstr ""

#: ../../release_notes.rst:6003
msgid "Terra 0.15.1"
msgstr ""

#: ../../release_notes.rst:6011
msgid "The 0.15.0 release includes several new features and bug fixes. Some highlights for this release are:"
msgstr ""

#: ../../release_notes.rst:6014
msgid "This release includes the introduction of arbitrary basis translation to the transpiler. This includes support for directly targeting a broader range of device basis sets, e.g. backends implementing RZ, RY, RZ, CZ or iSwap gates."
msgstr ""

#: ../../release_notes.rst:6019
msgid "The :class:`~qiskit.circuit.QuantumCircuit` class now tracks global phase. This means controlling a circuit which has global phase now correctly adds a relative phase, and gate matrix definitions are now exact rather than equal up to a global phase."
msgstr ""

#: ../../release_notes.rst:6031
msgid "A new DAG class :class:`qiskit.dagcircuit.DAGDependency` for representing the dependency form of circuit, In this DAG, the nodes are operations (gates, measure, barrier, etc...) and the edges corresponds to non-commutation between two operations."
msgstr ""

#: ../../release_notes.rst:6036
msgid "Four new functions are added to :mod:`qiskit.converters` for converting back and forth to :class:`~qiskit.dagcircuit.DAGDependency`. These functions are:"
msgstr ""

#: ../../release_notes.rst:6039
msgid ":func:`~qiskit.converters.circuit_to_dagdependency` to convert from a :class:`~qiskit.circuit.QuantumCircuit` object to a :class:`~qiskit.dagcircuit.DAGDependency` object."
msgstr ""

#: ../../release_notes.rst:6042
msgid ":func:`~qiskit.converters.dagdependency_to_circuit` to convert from a :class:`~qiskit.dagcircuit.DAGDependency` object to a :class:`~qiskit.circuit.QuantumCircuit` object."
msgstr ""

#: ../../release_notes.rst:6045
msgid ":func:`~qiskit.converters.dag_to_dagdependency` to convert from a :class:`~qiskit.dagcircuit.DAGCircuit` object to a :class:`~qiskit.dagcircuit.DAGDependency` object."
msgstr ""

#: ../../release_notes.rst:6048
msgid ":func:`~qiskit.converters.dagdependency_to_dag` to convert from a :class:`~qiskit.dagcircuit.DAGDependency` object to a :class:`~qiskit.dagcircuit.DAGCircuit` object."
msgstr ""

#: ../../release_notes.rst:6064
msgid "Two new transpiler passes have been added to :mod:`qiskit.transpiler.passes` The first, :class:`~qiskit.transpiler.passes.UnrollCustomDefinitions`, unrolls all instructions in the circuit according to their :attr:`~qiskit.circuit.Instruction.definition` property, stopping when reaching either the specified ``basis_gates`` or a set of gates in the provided :class:`~qiskit.circuit.EquivalenceLibrary`. The second, :class:`~qiskit.transpiler.passes.BasisTranslator`, uses the set of translations in the provided :class:`~qiskit.circuit.EquivalenceLibrary` to re-write circuit instructions in a specified basis."
msgstr ""

#: ../../release_notes.rst:6075
msgid "A new ``translation_method`` keyword argument has been added to :func:`~qiskit.compiler.transpile` to allow selection of the method to be used for translating circuits to the available device gates. For example, ``transpile(circ, backend, translation_method='translator')``. Valid choices are:"
msgstr ""

#: ../../release_notes.rst:6081
msgid "``'unroller'``: to use the :class:`~qiskit.transpiler.passes.Unroller` pass"
msgstr ""

#: ../../release_notes.rst:6083
msgid "``'translator'``: to use the :class:`~qiskit.transpiler.passes.BasisTranslator` pass."
msgstr ""

#: ../../release_notes.rst:6085
msgid "``'synthesis'``: to use the :class:`~qiskit.transpiler.passes.UnitarySynthesis` pass."
msgstr ""

#: ../../release_notes.rst:6088
msgid "The  default value is ``'translator'``."
msgstr ""

#: ../../release_notes.rst:6090
msgid "A new class for handling counts result data, :class:`qiskit.result.Counts`, has been added. This class is a subclass of ``dict`` and can be interacted with like any other dictionary. But, it includes helper methods and attributes for dealing with counts results from experiments and also handles post processing and formatting of binary strings at object initialization. A :class:`~qiskit.result.Counts`  object can be created by passing a dictionary  of counts with the keys being either integers, hexadecimal strings of the form ``'0x4a'``,  binary strings of the form ``'0b1101'``, a bit string formatted across register and memory slots (ie ``'00 10'``), or a dit string. For example::"
msgstr ""

#: ../../release_notes.rst:6105
msgid "A new method for constructing :class:`qiskit.dagcircuit.DAGCircuit` objects has been added, :meth:`~qiskit.dagcircuit.DAGCircuit.from_networkx`. This method takes in a networkx ``MultiDiGraph`` object (in the format returned by :meth:`~qiskit.dagcircuit.DAGCircuit.to_networkx`) and will return a new :class:`~qiskit.dagcircuit.DAGCircuit` object. The intent behind this function is to enable transpiler pass authors to leverage networkx's `graph algorithm library <https://networkx.github.io/documentation/stable/reference/algorithms/index.html>`__ if a function is missing from the `retworkx API <https://retworkx.readthedocs.io/en/latest/api.html>`_. Although, hopefully in such casses an issue will be opened with `retworkx issue tracker <https://github.com/Qiskit/retworkx/issues>`__ (or even better a pull request submitted)."
msgstr ""

#: ../../release_notes.rst:6119
msgid "A new kwarg for ``init_qubits`` has been added to :func:`~qiskit.compiler.assemble` and :func:`~qiskit.execute.execute`. For backends that support this feature ``init_qubits`` can be used to control whether the backend executing the circuits inserts any initialization sequences at the start of each shot. By default this is set to ``True`` meaning that all qubits can assumed to be in the ground state at the start of each shot. However, when ``init_qubits`` is  set to ``False`` qubits will be uninitialized at the start of each experiment and between shots. Note, that the backend running the circuits has to support this feature for this flag to have any effect."
msgstr ""

#: ../../release_notes.rst:6130
msgid "A new kwarg ``rep_delay`` has been added to :func:`qiskit.compiler.assemble`, :func:`qiskit.execute.execute`, and the constructor for :class:`~qiskit.qobj.PulseQobjtConfig`.qiskit This new kwarg is used to denotes the time between program executions. It must be chosen from the list of valid values set as the ``rep_delays`` from a backend's :class:`~qiskit.providers.models.PulseBackendConfiguration` object which can be accessed as ``backend.configuration().rep_delays``)."
msgstr ""

#: ../../release_notes.rst:6139
msgid "The ``rep_delay`` kwarg will only work on backends which allow for dynamic repetition time. This will also be indicated in the :class:`~qiskit.providers.models.PulseBackendConfiguration` object for a backend as the ``dynamic_reprate_enabled`` attribute. If ``dynamic_reprate_enabled`` is ``False`` then the ``rep_time`` value specified for :func:`qiskit.compiler.assemble`, :func:`qiskit.execute.execute`, or the constructor for :class:`~qiskit.qobj.PulseQobjtConfig` will be used rather than ``rep_delay``. ``rep_time`` only allows users to specify the duration of a program, rather than the delay between programs."
msgstr ""

#: ../../release_notes.rst:6150
msgid "The ``qobj_schema.json`` JSON Schema file in :mod:`qiskit.schemas` has been updated to include the ``rep_delay`` as an optional configuration property for pulse qobjs."
msgstr ""

#: ../../release_notes.rst:6154
msgid "The ``backend_configuration_schema.json`` JSON Schema file in mod:`qiskit.schemas` has been updated to include ``rep_delay_range`` and ``default_rep_delay`` as optional properties for a pulse backend configuration."
msgstr ""

#: ../../release_notes.rst:6159
msgid "A new attribute, :attr:`~qiskit.circuit.QuantumCircuit.global_phase`, which is is used for tracking the global phase has been added to the :class:`qiskit.circuit.QuantumCircuit` class. For example::"
msgstr ""

#: ../../release_notes.rst:6170
msgid "The global phase may also be changed or queried with ``circ.global_phase`` in the above example. In either case the setting is in radians. If the circuit is converted to an instruction or gate the global phase is represented by two single qubit rotations on the first qubit."
msgstr ""

#: ../../release_notes.rst:6176
msgid "This allows for other methods and functions which consume a :class:`~qiskit.circuit.QuantumCircuit` object to take global phase into account. For example. with the :attr:`~qiskit.circuit.QuantumCircuit.global_phase` attribute the :meth:`~qiskit.circuit.Gate.to_matrix` method for a gate can now exactly correspond to its decompositions instead of just up to a global phase."
msgstr ""

#: ../../release_notes.rst:6184
msgid "The same attribute has also been added to the :class:`~qiskit.dagcircuit.DAGCircuit` class so that global phase can be tracked when converting between :class:`~qiskit.circuit.QuantumCircuit` and :class:`~qiskit.dagcircuit.DAGCircuit`."
msgstr ""

#: ../../release_notes.rst:6190
msgid "Two new classes, :class:`~qiskit.circuit.AncillaRegister` and :class:`~qiskit.circuit.AncillaQubit` have been added to the :mod:`qiskit.circuit` module. These are subclasses of :class:`~qiskit.circuit.QuantumRegister` and :class:`~qiskit.circuit.Qubit` respectively and enable marking qubits being ancillas. This will allow these qubits to be re-used in larger circuits and algorithms."
msgstr ""

#: ../../release_notes.rst:6197
msgid "A new method, :meth:`~qiskit.circuit.QuantumCircuit.control`, has been added to the :class:`~qiskit.circuit.QuantumCircuit`. This method will return a controlled version of the :class:`~qiskit.circuit.QuantumCircuit` object, with both open and closed controls. This functionality had previously only been accessible via the :class:`~qiskit.circuit.Gate` class."
msgstr ""

#: ../../release_notes.rst:6204
msgid "A new method :meth:`~qiskit.circuit.QuantumCircuit.repeat` has been added to the :class:`~qiskit.circuit.QuantumCircuit` class. It returns a new circuit object containing a specified number of repetitions of the original circuit. For example:"
msgstr ""

#: ../../release_notes.rst:6219
msgid "The parameters are copied by reference, meaning that if you update the parameters in one instance of the circuit all repetitions will be updated."
msgstr ""

#: ../../release_notes.rst:6223
msgid "A new method :meth:`~qiskit.circuit.QuantumCircuit.reverse_bits` has been added to the :class:`~qiskit.circuit.QuantumCircuit` class. This method will reverse the order of bits in a circuit (both quantum and classical bits). This can be used to switch a circuit from little-endian to big-endian and vice-versa."
msgstr ""

#: ../../release_notes.rst:6229
msgid "A new method, :meth:`~qiskit.transpiler.Layout.combine_into_edge_map()`, was added to the :class:`qiskit.transpiler.Layout` class. This method enables converting converting two :class:`~qiskit.transpiler.Layout` objects into a qubit map for composing two circuits."
msgstr ""

#: ../../release_notes.rst:6234
msgid "A new class, :class:`~qiskit.test.mock.utils.ConfigurableFakeBackend`, has been added to the :mod:`qiskit.test.mock.utils` module. This new class enables the creation of configurable mock backends for use in testing. For example::"
msgstr ""

#: ../../release_notes.rst:6251
msgid "will create a backend object with 100 qubits and all the other parameters specified in the constructor."
msgstr ""

#: ../../release_notes.rst:6254
msgid "A new method :meth:`~qiskit.circuit.EquivalenceLibrary.draw` has been added to the :class:`qiskit.circuit.EquivalenceLibrary` class. This method can be used for drawing the contents of an equivalence library, which can be useful for debugging. For example:"
msgstr ""

#: ../../release_notes.rst:6287
msgid "A new Phase instruction, :class:`~qiskit.pulse.SetPhase`, has been added to :mod:`qiskit.pulse`. This instruction sets the phase of the subsequent pulses to the specified phase (in radians. For example::"
msgstr ""

#: ../../release_notes.rst:6300
msgid "In this example, the phase of the pulses applied to ``DriveChannel(0)`` after the :class:`~qiskit.pulse.SetPhase` instruction will be set to :math:`\\pi` radians."
msgstr ""

#: ../../release_notes.rst:6304
msgid "A new pulse instruction :class:`~qiskit.pulse.ShiftFrequency` has been added to :mod:`qiskit.pulse.instructions`. This instruction enables shifting the frequency of a channel from its set frequency. For example::"
msgstr ""

#: ../../release_notes.rst:6315
msgid "In this example all the pulses applied to ``DriveChannel(0)`` after the :class:`~qiskit.pulse.ShiftFrequency` command will have the envelope a frequency decremented by 340MHz."
msgstr ""

#: ../../release_notes.rst:6319
msgid "A new method :meth:`~qiskit.circuit.ParameterExpression.conjugate` has been added to the :class:`~qiskit.circuit.ParameterExpression` class. This enables calling ``numpy.conj()`` without raising an error. Since a :class:`~qiskit.circuit.ParameterExpression` object is real, it will return itself. This behaviour is analogous to Python floats/ints."
msgstr ""

#: ../../release_notes.rst:6325
msgid "A new class :class:`~qiskit.circuit.library.PhaseEstimation` has been added to :mod:`qiskit.circuit.library`. This circuit library class is the circuit used in the original formulation of the phase estimation algorithm in `arXiv:quant-ph/9511026 <https://arxiv.org/pdf/quant-ph/9511026.pdf>`__. Phase estimation is the task to to estimate the phase :math:`\\phi` of an eigenvalue :math:`e^{2\\pi i\\phi}` of a unitary operator :math:`U`, provided with the corresponding eigenstate :math:`|psi\\rangle`. That is"
msgstr ""

#: ../../release_notes.rst:6334
msgid "U|\\psi\\rangle = e^{2\\pi i\\phi} |\\psi\\rangle"
msgstr ""

#: ../../release_notes.rst:6338
msgid "This estimation (and thereby this circuit) is a central routine to several well-known algorithms, such as Shor's algorithm or Quantum Amplitude Estimation."
msgstr ""

#: ../../release_notes.rst:6342
msgid "The :mod:`qiskit.visualization` function :func:`~qiskit.visualization.plot_state_qsphere` has a new kwarg ``show_state_labels`` which is used to control whether each blob in the qsphere visualization is labeled. By default this kwarg is set to ``True`` and shows the basis states next to each blob by default. This feature can be disabled, reverting to the previous behavior, by setting the ``show_state_labels`` kwarg to ``False``."
msgstr ""

#: ../../release_notes.rst:6350
msgid "The :mod:`qiskit.visualization` function :func:`~qiskit.visualization.plot_state_qsphere` has a new kwarg ``show_state_phases`` which is set to ``False`` by default. When set to ``True`` it displays the phase of each basis state."
msgstr ""

#: ../../release_notes.rst:6355
msgid "The :mod:`qiskit.visualization` function :func:`~qiskit.visualization.plot_state_qsphere` has a new kwarg ``use_degrees`` which is set to ``False`` by default. When set to ``True`` it displays the phase of each basis state in degrees, along with the phase circle at the bottom right."
msgstr ""

#: ../../release_notes.rst:6361
msgid "A new class, :class:`~qiskit.circuit.library.QuadraticForm` to the :mod:`qiskit.circuit.library` module for implementing a a quadratic form on binary variables. The circuit library element implements the operation"
msgstr ""

#: ../../release_notes.rst:6365
msgid "|x\\rangle |0\\rangle \\mapsto |x\\rangle |Q(x) \\mod 2^m\\rangle"
msgstr ""

#: ../../release_notes.rst:6369
msgid "for the quadratic form :math:`Q` and :math:`m` output qubits. The result is in the :math:`m` output qubits is encoded in two's complement. If :math:`m` is not specified, the circuit will choose the minimal number of qubits required to represent the result without applying a modulo operation. The quadratic form is specified using a matrix for the quadratic terms, a vector for the linear terms and a constant offset. If all terms are integers, the circuit implements the quadratic form exactly, otherwise it is only an approximation."
msgstr ""

#: ../../release_notes.rst:6391
msgid "Add :meth:`qiskit.quantum_info.Statevector.expectation_value` and :meth:`qiskit.quantum_info.DensityMatrix.expectation_value` methods for computing the expectation value of an :class:`qiskit.quantum_info.Operator`."
msgstr ""

#: ../../release_notes.rst:6395
msgid "For the ``seed`` kwarg in the constructor for :class:`qiskit.circuit.library.QuantumVolume` `numpy random Generator objects <https://numpy.org/doc/stable/reference/random/generator.html>`__ can now be used. Previously, only integers were a valid input. This is useful when integrating :class:`~qiskit.circuit.library.QuantumVolume` as part of a larger function with its own random number generation, e.g. generating a sequence of :class:`~qiskit.circuit.library.QuantumVolume` circuits."
msgstr ""

#: ../../release_notes.rst:6404
msgid "The :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.compose` has a new kwarg ``front`` which can be used for prepending the other circuit before the origin circuit instead of appending. For example:"
msgstr ""

#: ../../release_notes.rst:6421
msgid "Two new passes, :class:`~qiskit.transpiler.passes.SabreLayout` and :class:`~qiskit.transpiler.passes.SabreSwap` for layout and routing have been added to :mod:`qiskit.transpiler.passes`. These new passes are based on the algorithm presented in Li et al., \"Tackling the Qubit Mapping Problem for NISQ-Era Quantum Devices\", ASPLOS 2019. They can also be selected when using the :func:`~qiskit.compiler.transpile` function by setting the ``layout_method`` kwarg to ``'sabre'`` and/or the ``routing_method`` to ``'sabre'`` to use :class:`~qiskit.transpiler.passes.SabreLayout` and :class:`~qiskit.transpiler.passes.SabreSwap` respectively."
msgstr ""

#: ../../release_notes.rst:6432
msgid "Added the method :meth:`~qiskit.pulse.Schedule.replace` to the :class:`qiskit.pulse.Schedule` class which allows a pulse instruction to be replaced with another. For example::"
msgstr ""

#: ../../release_notes.rst:6438
msgid "from qiskit import pulse"
msgstr ""

#: ../../release_notes.rst:6440
msgid "d0 = pulse.DriveChannel(0)"
msgstr ""

#: ../../release_notes.rst:6442
msgid "sched = pulse.Schedule()"
msgstr ""

#: ../../release_notes.rst:6444
msgid "old = pulse.Play(pulse.Constant(100, 1.0), d0) new = pulse.Play(pulse.Constant(100, 0.1), d0)"
msgstr ""

#: ../../release_notes.rst:6447
msgid "sched += old"
msgstr ""

#: ../../release_notes.rst:6449
msgid "sched = sched.replace(old, new)"
msgstr ""

#: ../../release_notes.rst:6451
msgid "assert sched == pulse.Schedule(new)"
msgstr ""

#: ../../release_notes.rst:6453
msgid "Added new gate classes to :mod:`qiskit.circuit.library` for the :math:`\\sqrt{X}`, its adjoint :math:`\\sqrt{X}^\\dagger`, and controlled :math:`\\sqrt{X}` gates as :class:`~qiskit.circuit.library.SXGate`, :class:`~qiskit.circuit.library.SXdgGate`, and :class:`~qiskit.circuit.library.CSXGate`. They can also be added to a :class:`~qiskit.circuit.QuantumCircuit` object using the :meth:`~qiskit.circuit.QuantumCircuit.sx`, :meth:`~qiskit.circuit.QuantumCircuit.sxdg`, and :meth:`~qiskit.circuit.QuantumCircuit.csx` respectively."
msgstr ""

#: ../../release_notes.rst:6464
msgid "Add support for :class:`~qiskit.circuit.Reset` instructions to :meth:`qiskit.quantum_info.Statevector.from_instruction`. Note that this involves RNG sampling in choosing the projection to the zero state in the case where the qubit is in a superposition state. The seed for sampling can be set using the :meth:`~qiskit.quantum_info.Statevector.seed` method."
msgstr ""

#: ../../release_notes.rst:6470
msgid "The methods :meth:`qiskit.circuit.ParameterExpression.subs` and :meth:`qiskit.circuit.QuantumCircuit.assign_parameters` now accept :class:`~qiskit.circuit.ParameterExpression` as the target value to be substituted."
msgstr ""

#: ../../release_notes.rst:6494
msgid "The :meth:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.to_gate` has a new kwarg ``label`` which can be used to set a label for for the output :class:`~qiskit.circuit.Gate` object. For example:"
msgstr ""

#: ../../release_notes.rst:6511
msgid "Added the :class:`~qiskit.circuit.library.UGate`, :class:`~qiskit.circuit.library.CUGate`, :class:`~qiskit.circuit.library.PhaseGate`, and :class:`~qiskit.circuit.library.CPhaseGate` with the corresponding :class:`~qiskit.circuit.QuantumCircuit` methods :meth:`~qiskit.circuit.QuantumCircuit.u`, :meth:`~qiskit.circuit.QuantumCircuit.cu`, :meth:`~qiskit.circuit.QuantumCircuit.p`, and :meth:`~qiskit.circuit.QuantumCircuit.cp`. The :class:`~qiskit.circuit.library.UGate` gate is the generic single qubit rotation gate with 3 Euler angles and the :class:`~qiskit.circuit.library.CUGate` gate its controlled version. :class:`~qiskit.circuit.library.CUGate` has 4 parameters to account for a possible global phase of the U gate. The :class:`~qiskit.circuit.library.PhaseGate` and :class:`~qiskit.circuit.library.CPhaseGate` gates are the general Phase gate at an arbitrary angle and it's controlled version."
msgstr ""

#: ../../release_notes.rst:6529
msgid "A new kwarg, ``cregbundle`` has been added to the :func:`qiskit.visualization.circuit_drawer` function and the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.draw`. When set to ``True`` the cregs will be bundled into a single line in circuit visualizations for the ``text`` and ``mpl`` drawers. The default value is ``True``. Addresses issue `#4290 <https://github.com/Qiskit/qiskit-terra/issues/4290>`_."
msgstr ""

#: ../../release_notes.rst:6546
msgid "A new kwarg, ``initial_state`` has been added to the :func:`qiskit.visualization.circuit_drawer` function and the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.draw`. When set to ``True`` the initial state will now be included in circuit visualizations for all drawers. Addresses issue `#4293 <https://github.com/Qiskit/qiskit-terra/issues/4293>`_."
msgstr ""

#: ../../release_notes.rst:6562
msgid "Labels will now be displayed when using the 'mpl' drawer. There are 2 types of labels - gate labels and control labels. Gate labels will replace the gate name in the display. Control labels will display above or below the controls for a gate. Fixes issues #3766, #4580 Addresses issues `#3766 <https://github.com/Qiskit/qiskit-terra/issues/3766>`_ and `#4580 <https://github.com/Qiskit/qiskit-terra/issues/4580>`_."
msgstr ""

#: ../../release_notes.rst:6586
msgid "Implementations of the multi-controlled X Gate ( :class:`~qiskit.circuit.library.MCXGrayCode`, :class:`~qiskit.circuit.library.MCXRecursive`, and :class:`~qiskit.circuit.library.MCXVChain`) have had their ``name`` properties changed to more accurately describe their implementation: ``mcx_gray``, ``mcx_recursive``, and ``mcx_vchain`` respectively. Previously, these gates shared the name ``mcx`` with :class:`~qiskit.circuit.library.MCXGate`, which caused these gates to be incorrectly transpiled and simulated."
msgstr ""

#: ../../release_notes.rst:6596
msgid "By default the preset passmanagers in :mod:`qiskit.transpiler.preset_passmanagers` are using :class:`~qiskit.transpiler.passes.UnrollCustomDefinitions` and :class:`~qiskit.transpiler.passes.BasisTranslator` to handle basis changing instead of the previous default :class:`~qiskit.transpiler.passes.Unroller`. This was done because the new passes are more flexible and allow targeting any basis set, however the output may differ. To use the previous default you can set the ``translation_method`` kwarg on :func:`~qiskit.compiler.transpile` to ``'unroller'``."
msgstr ""

#: ../../release_notes.rst:6606
msgid "The :func:`qiskit.converters.circuit_to_gate` and :func`qiskit.converters.circuit_to_instruction` converter functions had previously automatically included the generated gate or instruction in the active ``SessionEquivalenceLibrary``. These converters now accept an optional ``equivalence_library`` keyword argument to specify if and where the converted instances should be registered. The default behavior has changed to not register the converted instance."
msgstr ""

#: ../../release_notes.rst:6614
msgid "The default value of the ``cregbundle`` kwarg for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function has been changed to ``True``. This means that by default the classical bits in the circuit diagram will now be bundled by default, for example:"
msgstr ""

#: ../../release_notes.rst:6630
msgid "If you want to have your circuit drawing retain the previous behavior and show each classical bit in the diagram you can set the ``cregbundle`` kwarg to ``False``. For example:"
msgstr ""

#: ../../release_notes.rst:6644
msgid ":class:`~qiskit.pulse.Schedule` plotting with :py:meth:`qiskit.pulse.Schedule.draw` and :func:`qiskit.visualization.pulse_drawer` will no longer display the event table by default. This can be reenabled by setting the ``table`` kwarg to ``True``."
msgstr ""

#: ../../release_notes.rst:6650
msgid "The pass :class:`~qiskit.transpiler.passes.RemoveResetInZeroState` was previously included in the preset pass manager :func:`~qiskit.transpiler.preset_passmanagers.level_0_pass_manager` which was used with the ``optimization_level=0`` for :func:`~qiskit.compiler.transpile` and :func:`~qiskit.execute.execute` functions. However, :class:`~qiskit.transpiler.passes.RemoveResetInZeroState` is an optimization pass and should not have been included in optimization level 0 and was removed. If you need to run :func:`~qiskit.compiler.transpile` with :class:`~qiskit.transpiler.passes.RemoveResetInZeroState` either use a custom pass manager or ``optimization_level`` 1, 2, or 3."
msgstr ""

#: ../../release_notes.rst:6662
msgid "The deprecated kwarg ``line_length`` for the :func:`qiskit.visualization.circuit_drawer` function and :meth:`qiskit.circuit.QuantumCircuit.draw` method has been removed. It had been deprecated since the 0.10.0 release. Instead you can use the ``fold`` kwarg to adjust the width of the circuit diagram."
msgstr ""

#: ../../release_notes.rst:6668
msgid "The ``'mpl'`` output mode for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`~qiskit.visualization.circuit_drawer` now requires the `pylatexenc <https://pylatexenc.readthedocs.io/en/latest/latexencode/>`__ library to be installed. This was already an optional dependency for visualization, but was only required for the ``'latex'`` output mode before. It is now also required for the matplotlib drawer because it is needed to handle correctly sizing gates with matplotlib's `mathtext <https://matplotlib.org/3.2.2/tutorials/text/mathtext.html>`__ labels for gates."
msgstr ""

#: ../../release_notes.rst:6679
msgid "The deprecated ``get_tokens`` methods for the :class:`qiskit.qasm.Qasm` and :class:`qiskit.qasm.QasmParser` has been removed. These methods have been deprecated since the 0.9.0 release. The :meth:`qiskit.qasm.Qasm.generate_tokens` and :meth:`qiskit.qasm.QasmParser.generate_tokens` methods should be used instead."
msgstr ""

#: ../../release_notes.rst:6686
msgid "The deprecated kwarg ``channels_to_plot`` for :meth:`qiskit.pulse.Schedule.draw`, :meth:`qiskit.pulse.Instruction.draw`, ``qiskit.visualization.pulse.matplotlib.ScheduleDrawer.draw`` and :func:`~qiskit.visualization.pulse_drawer` has been removed. The kwarg has been deprecated since the 0.11.0 release and was replaced by the ``channels`` kwarg, which functions identically and should be used instead."
msgstr ""

#: ../../release_notes.rst:6695
msgid "The deprecated ``circuit_instruction_map`` attribute of the :class:`qiskit.providers.models.PulseDefaults` class has been removed. This attribute has been deprecated since the 0.12.0 release and was replaced by the ``instruction_schedule_map`` attribute which can be used instead."
msgstr ""

#: ../../release_notes.rst:6701
msgid "The ``union`` method of :py:class:`~qiskit.pulse.Schedule` and :py:class:`~qiskit.pulse.Instruction` have been deprecated since the 0.12.0 release and have now been removed. Use :meth:`qiskit.pulse.Schedule.insert` and :meth:`qiskit.pulse.Instruction.meth` methods instead with the kwarg``time=0``."
msgstr ""

#: ../../release_notes.rst:6708
msgid "The deprecated ``scaling`` argument to the ``draw`` method of :py:class:`~qiskit.pulse.Schedule` and :py:class:`~qiskit.pulse.Instruction` has been replaced with ``scale`` since the 0.12.0 release and now has been removed. Use the ``scale`` kwarg instead."
msgstr ""

#: ../../release_notes.rst:6713
msgid "The deprecated ``period`` argument to :py:mod:`qiskit.pulse.library` functions have been replaced by ``freq`` since the 0.13.0 release and now removed. Use the ``freq`` kwarg instead of ``period``."
msgstr ""

#: ../../release_notes.rst:6717
msgid "The ``qiskit.pulse.commands`` module containing ``Commands`` classes was deprecated in the 0.13.0 release and has now been removed. You will have to upgrade your Pulse code if you were still using commands. For example:"
msgstr ""

#: ../../release_notes.rst:6727
msgid "``Command(args)(channel)``"
msgstr ""

#: ../../release_notes.rst:6728
msgid "``Instruction(args, channel)``"
msgstr ""

#: ../../release_notes.rst:6756
msgid "All classes and function in the ``qiskit.tool.qi`` module were deprecated in the 0.12.0 release and have now been removed. Instead use the :mod:`qiskit.quantum_info` module and the new methods and classes that it has for working with quantum states and operators."
msgstr ""

#: ../../release_notes.rst:6761
msgid "The ``qiskit.quantum_info.basis_state`` and ``qiskit.quantum_info.projector`` functions are deprecated as of Qiskit Terra 0.12.0 as are now removed. Use the :class:`qiskit.quantum_info.QuantumState` and its derivatives :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` to work with states."
msgstr ""

#: ../../release_notes.rst:6768
msgid "The interactive plotting functions from :mod:`qiskit.visualization`, ``iplot_bloch_multivector``, ``iplot_state_city``, ``iplot_state_qsphere``, ``iplot_state_hinton``, ``iplot_histogram``, ``iplot_state_paulivec`` now are just deprecated aliases for the matplotlib based equivalents and are no longer interactive. The hosted static JS code that these functions relied on has been removed and they no longer could work. A normal deprecation wasn't possible because the site they depended on no longer exists."
msgstr ""

#: ../../release_notes.rst:6777
msgid "The validation components using marshmallow from :mod:`qiskit.validation` have been removed from terra. Since they are no longer used to build any objects in terra."
msgstr ""

#: ../../release_notes.rst:6781
msgid "The marshmallow schema classes in :mod:`qiskit.result` have been removed since they are no longer used by the :class:`qiskit.result.Result` class."
msgstr ""

#: ../../release_notes.rst:6784
msgid "The output of the :meth:`~qiskit.result.Result.to_dict` method for the :class:`qiskit.result.Result` class is no longer in a format for direct JSON serialization. Depending on the content contained in instances of these classes there may be types that the default JSON encoder doesn't know how to handle, for example complex numbers or numpy arrays. If you're JSON serializing the output of the ``to_dict()`` method directly you should ensure that your JSON encoder can handle these types."
msgstr ""

#: ../../release_notes.rst:6792
msgid "The option to acquire multiple qubits at once was deprecated in the 0.12.0 release and is now removed. Specifically, the init args ``mem_slots`` and ``reg_slots`` have been removed from :class:`qiskit.pulse.instructions.Acquire`, and ``channel``, ``mem_slot`` and ``reg_slot`` will raise an error if a list is provided as input."
msgstr ""

#: ../../release_notes.rst:6798
msgid "Support for the use of the ``USE_RETWORKX`` environment variable which was introduced in the 0.13.0 release to provide an optional fallback to the legacy `networkx <https://networkx.github.io/>`__ based :class:`qiskit.dagcircuit.DAGCircuit` implementation has been removed. This flag was only intended as provide a relief valve for any users that encountered a problem with the new implementation for one release during the transition to retworkx."
msgstr ""

#: ../../release_notes.rst:6806
msgid "The module within :mod:`qiskit.pulse` responsible for schedule->schedule transformations has been renamed from ``reschedule.py`` to ``transforms.py``. The previous import path has been deprecated. To upgrade your code::"
msgstr ""

#: ../../release_notes.rst:6812
msgid "should be replaced by::"
msgstr ""

#: ../../release_notes.rst:6816
msgid "In previous releases a :class:`~qiskit.transpiler.PassManager` did not allow ``TransformationPass`` classes to modify the :class:`~qiskit.transpiler.PropertySet`.  This restriction has been lifted so a ``TransformationPass`` class now has read and write access to both the :class:`~qiskit.transpiler.PropertySet` and :class:`~qiskit.transpiler.DAGCircuit` during :meth:`~qiskit.transpiler.PassManager.run`. This change was made to more efficiently facilitate ``TransformationPass`` classes that have an internal state which may be necessary for later passes in the :class:`~qiskit.transpiler.PassManager`. Without this change a second redundant ``AnalysisPass`` would have been necessary to recreate the internal state, which could add significant overhead."
msgstr ""

#: ../../release_notes.rst:6834
msgid "The name of the first positional parameter for the :mod:`qiskit.visualization` functions :func:`~qiskit.visualization.plot_state_hinton`, :func:`~qiskit.visualization.plot_bloch_multivector`, :func:`~qiskit.visualization.plot_state_city`, :func:`~qiskit.visualization.plot_state_paulivec`, and :func:`~qiskit.visualization.plot_state_qsphere` has been renamed from ``rho`` to ``state``. Passing in the value by name to ``rho`` is deprecated and will be removed in a future release. Instead you should either pass the argument positionally or use the new parameter name ``state``."
msgstr ""

#: ../../release_notes.rst:6845
msgid "The ``qiskit.pulse.pulse_lib`` module has been deprecated and will be removed in a future release. It has been renamed to :py:mod:`qiskit.pulse.library` which should be used instead."
msgstr ""

#: ../../release_notes.rst:6849
msgid "The :class:`qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.mirror` has been deprecated and will be removed in a future release. The method :meth:`qiskit.circuit.QuantumCircuit.reverse_ops` should be used instead, since mirroring could be confused with swapping the output qubits of the circuit. The :meth:`~qiskit.circuit.QuantumCircuit.reverse_ops` method only reverses the order of gates that are applied instead of mirroring."
msgstr ""

#: ../../release_notes.rst:6857
msgid "The :meth:`~qiskit.dagcircuit.DAGCircuit.qubits` and :meth:`~qiskit.dagcircuit.DAGCircuit.clbits` methods of :class:`qiskit.dagcircuit.DAGCircuit` have been deprecated and will be removed in a future release. They have been replaced with properties of the same name, :attr:`qiskit.dagcircuit.DAGCircuit.qubits` and :attr:`qiskit.dagcircuit.DAGCircuit.clbits`, and are cached so accessing them is much faster."
msgstr ""

#: ../../release_notes.rst:6865
msgid "The ``get_sample_pulse`` method for ``qiskit.pulse.library.ParametricPulse`` derived classes (for example :class:`~qiskit.pulse.library.GaussianSquare`) has been deprecated and will be removed in a future release. It has been replaced by the ``get_waveform`` method (for example :meth:`~qiskit.pulse.library.GaussianSquare.get_waveform`) which should behave identically."
msgstr ""

#: ../../release_notes.rst:6873
msgid "The use of the optional ``condition`` argument on :class:`qiskit.dagcircuit.DAGNode`, :meth:`qiskit.dagcircuit.DAGCircuit.apply_operation_back`, and :meth:`qiskit.dagcircuit.DAGCircuit.apply_operation_front` has been deprecated and will be removed in a future release. Instead the ``control`` set in :class:`qiskit.circuit.Instruction` instances being added to a :class:`~qiskit.dagcircuit.DAGCircuit` should be used."
msgstr ""

#: ../../release_notes.rst:6881
msgid "The ``set_atol`` and ``set_rtol`` class methods of the :class:`qiskit.quantum_info.BaseOperator` and :class:`qiskit.quantum_info.QuantumState` classes (and their subclasses such as :class:`~qiskit.quantum_info.Operator` and :class:`qiskit.quantum_info.DensityMatrix`) are deprecated and will be removed in a future release. Instead the value for the attributes ``.atol`` and ``.rtol`` should be set on the class instead. For example::"
msgstr ""

#: ../../release_notes.rst:6894
msgid "The interactive plotting functions from :mod:`qiskit.visualization`, ``iplot_bloch_multivector``, ``iplot_state_city``, ``iplot_state_qsphere``, ``iplot_state_hinton``, ``iplot_histogram``, ``iplot_state_paulivec`` have been deprecated and will be removed in a future release. The matplotlib based equivalent functions from :mod:`qiskit.visualization`, :func:`~qiskit.visualization.plot_bloch_multivector`, :func:`~qiskit.visualization.plot_state_city`, :func:`~qiskit.visualization.plot_state_qsphere`, :func:`~qiskit.visualization.plot_state_hinton`, :func:`~qiskit.visualization.plot_state_histogram`, and :func:`~qiskit.visualization.plot_state_paulivec` should be used instead."
msgstr ""

#: ../../release_notes.rst:6906
msgid "The properties ``acquires``, ``mem_slots``, and ``reg_slots`` of the :class:`qiskit.pulse.instructions.Acquire` pulse instruction have been deprecated and will be removed in a future release. They are just duplicates of :attr:`~qiskit.pulse.instructions.Acquire.channel`, :attr:`~qiskit.pulse.instructions.Acquire.mem_slot`, and :attr:`~qiskit.pulse.instructions.Acquire.reg_slot` respectively now that previously deprecated support for using multiple qubits in a single :class:`~qiskit.pulse.instructions.Acquire` instruction has been removed."
msgstr ""

#: ../../release_notes.rst:6916
msgid "The ``SamplePulse`` class from :mod:`qiskit.pulse` has been renamed to :py:class:`~qiskit.pulse.library.Waveform`. ``SamplePulse`` is deprecated and will be removed in a future release."
msgstr ""

#: ../../release_notes.rst:6920
msgid "The style dictionary key ``cregbundle`` has been deprecated and will be removed in a future release. This has been replaced by the kwarg ``cregbundle`` added to the :func:`qiskit.visualization.circuit_drawer` function and the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.draw`."
msgstr ""

#: ../../release_notes.rst:6933
msgid "The :class:`qiskit.circuit.QuantumCircuit` method :attr:`~qiskit.circuit.QuantumCircuit.num_nonlocal_gates` previously included multi-qubit :class:`qiskit.circuit.Instruction` objects (for example, :class:`~qiskit.circuit.library.Barrier`) in its count of non-local gates. This has been corrected so that only non-local :class:`~qiskit.circuit.Gate` objects are counted. Fixes `#4500 <https://github.com/Qiskit/qiskit-terra/issues/4500>`__"
msgstr ""

#: ../../release_notes.rst:6941
msgid ":class:`~qiskit.circuit.ControlledGate` instances with a set ``ctrl_state`` were in some cases not being evaluated as equal, even if the compared gates were equivalent. This has been resolved so that Fixes `#4573 <https://github.com/Qiskit/qiskit-terra/issues/4573>`__"
msgstr ""

#: ../../release_notes.rst:6946
msgid "When accessing a bit from a :class:`qiskit.circuit.QuantumRegister` or :class:`qiskit.circuit.ClassicalRegister` by index when using numpy `integer types` <https://numpy.org/doc/stable/user/basics.types.html>`__ would previously raise a ``CircuitError`` exception. This has been resolved so numpy types can be used in addition to Python's built-in ``int`` type. Fixes `#3929 <https://github.com/Qiskit/qiskit-terra/issues/3929>`__."
msgstr ""

#: ../../release_notes.rst:6955
msgid "A bug was fixed where only the first :class:`qiskit.pulse.configuration.Kernel` or :class:`qiskit.pulse.configuration.Discriminator` for an :class:`qiskit.pulse.Acquire` was used when there were multiple Acquires at the same time in a :class:`qiskit.pulse.Schedule`."
msgstr ""

#: ../../release_notes.rst:6960
msgid "The SI unit use for constructing :py:class:`qiskit.pulse.SetFrequency` objects is in Hz, but when a :class:`~qiskit.qobj.PulseQobjInstruction` object is created from a :py:class:`~qiskit.pulse.SetFrequency` instance it needs to be converted to GHz. This conversion was missing from previous releases and has been fixed."
msgstr ""

#: ../../release_notes.rst:6966
msgid "Previously it was possible to set the number of control qubits to zero in which case the the original, potentially non-controlled, operation would be returned. This could cause an ``AttributeError`` to be raised if the caller attempted to access an attribute which only :class:`~qiskit.circuit.ControlledGate` object have. This has been fixed by adding a getter and setter for :attr:`~qiskit.circuit.ControlledGate.num_ctrl_qubits` to validate that a valid value is being used. Fixes `#4576 <https://github.com/Qiskit/qiskit-terra/issues/4576>`__"
msgstr ""

#: ../../release_notes.rst:6976
msgid "Open controls were implemented by modifying a :class:`~qiskit.circuit.Gate` objects :attr:`~qiskit.circuit.Gate.definition`. However, when the gate already exists in the basis set, this definition was not used, which resulted in incorrect circuits being sent to a backend after transpilation. This has been fixed by modifying the :class:`~qiskit.transpiler.Unroller` pass to use the definition if it encounters a controlled gate with open controls. Fixes `#4437 <https://github.com/Qiskit/qiskit-terra/issues/4437>`__"
msgstr ""

#: ../../release_notes.rst:6985
msgid "The ``insert_barriers`` keyword argument in the :class:`~qiskit.circuit.library.ZZFeatureMap` class didn't actually insert barriers in between the Hadamard layers and evolution layers. This has been fixed so that barriers are now properly inserted."
msgstr ""

#: ../../release_notes.rst:6990
msgid "Fixed issue where some gates with three or more qubits would fail to compile in certain instances. Refer to `#4577 <https://github.com/Qiskit/qiskit-terra/issues/4577` for more detail."
msgstr ""

#: ../../release_notes.rst:6994
msgid "The matplotlib (``'mpl'``) output backend for the :class:`qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.draw` and the :func:`qiskit.visualization.circuit_drawer` function was not properly scaling when the kwarg ``scale`` was set. Fonts and line widths did not scale with the rest of the image. This has been fixed and all elements of the circuit diagram now scale properly. For example:"
msgstr ""

#: ../../release_notes.rst:7010
msgid "Fixes `#4179 <https://github.com/Qiskit/qiskit-terra/issues/4179>`_."
msgstr ""

#: ../../release_notes.rst:7012
msgid "Fixes issue where initializing or evolving :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes by circuits by circuit containing :class:`~qiskit.circuit.Barrier` instructions would raise an exception. Fixes `#4461 <https://github.com/Qiskit/qiskit-terra/issues/4461>`__"
msgstr ""

#: ../../release_notes.rst:7019
msgid "Previously when a :class:`~qiskit.circuit.QuantumCircuit` contained a :class:`~qiskit.circuit.Gate` with a classical condition the transpiler would sometimes fail when using ``optimization_level=3`` on :func:`~qiskit.compiler.transpile` or :func:`~qiskit.execute.execute` raising an ``UnboundLocalError``. This has been fixed by updating the :class:`~qiskit.transpiler.passes.ConsolidateBlocks` pass to account for the classical condition. Fixes `#4672 <https://github.com/Qiskit/qiskit-terra/issues/4672>`_."
msgstr ""

#: ../../release_notes.rst:7029
msgid "In some situations long gate and register names would overflow, or leave excessive empty space around them when using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function. This has been fixed by using correct text widths for a proportional font. Fixes `#4611 <https://github.com/Qiskit/qiskit-terra/issues/4611>`__, `#4605 <https://github.com/Qiskit/qiskit-terra/issues/4605>`__, `#4545 <https://github.com/Qiskit/qiskit-terra/issues/4545>`__, `#4497 <https://github.com/Qiskit/qiskit-terra/issues/4497>`__, `#4449 <https://github.com/Qiskit/qiskit-terra/issues/4449>`__, and `#3641 <https://github.com/Qiskit/qiskit-terra/issues/3641>`__."
msgstr ""

#: ../../release_notes.rst:7041
msgid "When using the ``style` kwarg on the :meth:`qiskit.circuit.QuantumCircuit.draw` or :func:`qiskit.visualization.circuit_drawer` with the ``'mpl'`` output backend the dictionary key ``'showindex'`` set to ``True``, the index numbers at the top of the column did not line up properly. This has been fixed."
msgstr ""

#: ../../release_notes.rst:7048
msgid "When using ``cregbunde=True`` with the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function and measuring onto a second fold, the measure arrow would overwrite the creg count. The count was moved to the left to prevent this. Fixes `#4148 <https://github.com/Qiskit/qiskit-terra/issues/4148>`__."
msgstr ""

#: ../../release_notes.rst:7055
msgid "When using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function :class:`~qiskit.circuit.library.CSwapGate` gates and a controlled :class:`~qiskit.circuit.library.RZZGate` gates now display with their appropriate symbols instead of in a box."
msgstr ""

#: ../../release_notes.rst:7062
msgid "When using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function controlled gates created using the :meth:`~qiskit.circuit.QuantumCircuit.to_gate` method were not properly spaced and could overlap with other gates in the circuit diagram. This issue has been fixed."
msgstr ""

#: ../../release_notes.rst:7069
msgid "When using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function gates with arrays as parameters, such as :class:`~qiskit.extensions.HamiltonianGate`, no longer display with excessive space around them. Fixes `#4352 <https://github.com/Qiskit/qiskit-terra/issues/4352>`__."
msgstr ""

#: ../../release_notes.rst:7077
msgid "When using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function generic gates created by directly instantiating :class:`qiskit.circuit.Gate` method now display the proper background color for the gate. Fixes `#4496 <https://github.com/Qiskit/qiskit-terra/issues/4496>`__."
msgstr ""

#: ../../release_notes.rst:7084
msgid "When using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function an ``AttributeError`` that occurred when using :class:`~qiskit.extensions.Isometry` or :class:`~qiskit.extensions.Initialize` has been fixed. Fixes `#4439 <https://github.com/Qiskit/qiskit-terra/issues/4439>`__."
msgstr ""

#: ../../release_notes.rst:7092
msgid "When using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function some open-controlled gates did not properly display the open controls. This has been corrected so that open controls are properly displayed as open circles. Fixes `#4248 <https://github.com/Qiskit/qiskit-terra/issues/4248>`__."
msgstr ""

#: ../../release_notes.rst:7100
msgid "When using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function setting the ``fold`` kwarg to -1 will now properly display the circuit without folding. Fixes `#4506 <https://github.com/Qiskit/qiskit-terra/issues/4506>`__."
msgstr ""

#: ../../release_notes.rst:7107
msgid "Parametric pulses from :mod:`qiskit.pulse.library.discrete` now have zero ends of parametric pulses by default. The endpoints are defined such that for a function :math:`f(x)` then :math:`f(-1) = f(duration + 1) = 0`. Fixes `#4317 <https://github.com/Qiskit/qiskit-terra/issues/4317>`__"
msgstr ""

#: ../../release_notes.rst:7119
msgid "The :class:`qiskit.result.Result` class which was previously constructed using the marshmallow library has been refactored to not depend on marshmallow anymore. This new implementation should be a seamless transition but some specific behavior that was previously inherited from marshmallow may not work. Please file issues for any incompatibilities found."
msgstr ""

#: ../../release_notes.rst:7133
msgid "This 0.6.0 release includes numerous performance improvements for all simulators in the Aer provider and significant changes to the build system when building from source. The main changes are support for SIMD vectorization, approximation in the matrix product state method via bond-dimension truncation, more efficient Pauli expectation value computation, and greatly improved efficiency in Python conversion of C++ result objects. The build system was upgraded to use the `Conan <https://conan.io/>`__ to manage common C++ dependencies when building from source."
msgstr ""

#: ../../release_notes.rst:7148
msgid "Add density matrix snapshot support to \"statevector\" and \"statevector_gpu\" methods of the QasmSimulator."
msgstr ""

#: ../../release_notes.rst:7151
msgid "Allow density matrix snapshots on specific qubits, not just all qubits. This computes the partial trace of the state over the remaining qubits."
msgstr ""

#: ../../release_notes.rst:7154
msgid "Adds Pauli expectation value snapshot support to the `\"density_matrix\"` simulation method of the :class:`qiskit.providers.aer.QasmSimulator`. Add snapshots to circuits using the :class:`qiskit.providers.aer.extensions.SnapshotExpectationValue` extension."
msgstr ""

#: ../../release_notes.rst:7160
msgid "Greatly improves performance of the Pauli expectation value snapshot algorithm for the `\"statevector\"`, `\"statevector_gpu`, `\"density_matrix\"`, and `\"density_matrix_gpu\"` simulation methods of the :class:`qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:7165
msgid "Enable the gate-fusion circuit optimization from the :class:`qiskit.providers.aer.QasmSimulator` in both the :class:`qiskit.providers.aer.StatevectorSimulator` and :class:`qiskit.providers.aer.UnitarySimulator` backends."
msgstr ""

#: ../../release_notes.rst:7170
msgid "Improve the performance of average snapshot data in simulator results. This effects probability, Pauli expectation value, and density matrix snapshots using the following extensions:"
msgstr ""

#: ../../release_notes.rst:7174
msgid ":class:`qiskit.providers.aer.extensions.SnapshotExpectationValue`"
msgstr ""

#: ../../release_notes.rst:7175
msgid ":class:`qiskit.providers.aer.extensions.SnapshotProbabilities`"
msgstr ""

#: ../../release_notes.rst:7176
msgid ":class:`qiskit.providers.aer.extensions.SnapshotDensityMatrix`"
msgstr ""

#: ../../release_notes.rst:7178
msgid "Add move constructor and improve memory usage of the C++ matrix class to minimize copies of matrices when moving output of simulators into results."
msgstr ""

#: ../../release_notes.rst:7181
msgid "Improve performance of unitary simulator."
msgstr ""

#: ../../release_notes.rst:7183
msgid "Add approximation to the `\"matrix_product_state\"` simulation method of the :class:`~qiskit.providers.aer.QasmSimulator` to limit the bond-dimension of the MPS."
msgstr ""

#: ../../release_notes.rst:7187
msgid "There are two modes of approximation. Both discard the smallest Schmidt coefficients following the SVD algorithm. There are two parameters that control the degree of approximation: ``\"matrix_product_state_max_bond_dimension\"`` (int): Sets a limit on the number of Schmidt coefficients retained at the end of the svd algorithm. Coefficients beyond this limit will be discarded. (Default: None, i.e., no limit on the bond dimension). ``\"matrix_product_state_truncation_threshold\"`` (double): Discard the smallest coefficients for which the sum of their squares is smaller than this threshold. (Default: 1e-16)."
msgstr ""

#: ../../release_notes.rst:7199
msgid "Improve the performance of measure sampling when using the `\"matrix_product_state\"` :class:`~qiskit.providers.aer.QasmSimulator` simulation method."
msgstr ""

#: ../../release_notes.rst:7203
msgid "Add support for ``Delay``, ``Phase`` and ``SetPhase`` pulse instructions to the :class:`qiskit.providers.aer.PulseSimulator`."
msgstr ""

#: ../../release_notes.rst:7206
msgid "Improve the performance of the :class:`qiskit.providers.aer.PulseSimulator` by caching calls to RHS function"
msgstr ""

#: ../../release_notes.rst:7209
msgid "Introduce alternate DE solving methods, specifiable through ``backend_options`` in the :class:`qiskit.providers.aer.PulseSimulator`."
msgstr ""

#: ../../release_notes.rst:7212
msgid "Improve performance of simulator result classes by using move semantics and removing unnecessary copies that were happening when combining results from separate experiments into the final result object."
msgstr ""

#: ../../release_notes.rst:7216
msgid "Greatly improve performance of pybind11 conversion of simulator results by using move semantics where possible, and by moving vector and matrix results to Numpy arrays without copies."
msgstr ""

#: ../../release_notes.rst:7220
msgid "Change the RNG engine for simulators from 32-bit Mersenne twister to 64-bit Mersenne twister engine."
msgstr ""

#: ../../release_notes.rst:7223
msgid "Improves the performance of the `\"statevector\"` simulation method of the :class:`qiskit.providers.aer.QasmSimulator` and :class:`qiskit.providers.aer.StatevectorSimulator` by using SIMD intrinsics on systems that support the AVX2 instruction set. AVX2 support is automatically detected and enabled at runtime."
msgstr ""

#: ../../release_notes.rst:7235
msgid "Changes the build system to use the `Conan package manager <https://conan.io/>`__. This tool will handle most of the dependencies needed by the C++ source code. Internet connection may be needed for the first build or when dependencies are added or updated, in order to download the required packages if they are not in your Conan local repository."
msgstr ""

#: ../../release_notes.rst:7242
msgid "When building the standalone version of qiskit-aer you must install conan first with:"
msgstr ""

#: ../../release_notes.rst:7249 ../../release_notes.rst:8522
msgid "Changes how transpilation passes are handled in the C++ Controller classes so that each pass must be explicitly called. This allows for greater customization on when each pass should be called, and with what parameters. In particular this enables setting different parameters for the gate fusion optimization pass depending on the QasmController simulation method."
msgstr ""

#: ../../release_notes.rst:7255 ../../release_notes.rst:8528
msgid "Add ``gate_length_units`` kwarg to :meth:`qiskit.providers.aer.noise.NoiseModel.from_device` for specifying custom ``gate_lengths`` in the device noise model function to handle unit conversions for internal code."
msgstr ""

#: ../../release_notes.rst:7260 ../../release_notes.rst:8533
msgid "Add Controlled-Y (\"cy\") gate to the Stabilizer simulator methods supported gateset."
msgstr ""

#: ../../release_notes.rst:7263 ../../release_notes.rst:8536
msgid "For Aer's backend the jsonschema validation of input qobj objects from terra is now opt-in instead of being enabled by default. If you want to enable jsonschema validation of qobj set the ``validate`` kwarg on the :meth:`qiskit.providers.aer.QasmSimualtor.run` method for the backend object to ``True``."
msgstr ""

#: ../../release_notes.rst:7269
msgid "Adds an OpSet object to the base simulator State class to allow easier validation of instructions, gates, and snapshots supported by simulators."
msgstr ""

#: ../../release_notes.rst:7272
msgid "Refactor OpSet class. Moved OpSet to separate header file and add ``contains`` and ``difference`` methods based on ``std::set::contains`` and ``std::algorithm::set_difference``. These replace the removed invalid and validate instructions from OpSet, but with the order reversed. It returns a list of other ops not in current opset rather than opset instructions not in the other."
msgstr ""

#: ../../release_notes.rst:7279
msgid "Improves how measurement sampling optimization is checked. The expensive part of this operation is now done once during circuit construction where rather than multiple times during simulation for when checking memory requirements, simulation method, and final execution."
msgstr ""

#: ../../release_notes.rst:7290 ../../release_notes.rst:8548
msgid "Remove \"extended_stabilizer\" from the automatically selected simulation methods. This is needed as the extended stabilizer method is not exact and may give incorrect results for certain circuits unless the user knows how to optimize its configuration parameters."
msgstr ""

#: ../../release_notes.rst:7295 ../../release_notes.rst:8553
msgid "The automatic method now only selects from \"stabilizer\", \"density_matrix\", and \"statevector\" methods. If a non-Clifford circuit that is too large for the statevector method is executed an exception will be raised suggesting you could try explicitly using the \"extended_stabilizer\" or \"matrix_product_state\" methods instead."
msgstr ""

#: ../../release_notes.rst:7301 ../../release_notes.rst:8563
msgid "Disables gate fusion for the matrix product state simulation method as this was causing issues with incorrect results being returned in some cases."
msgstr ""

#: ../../release_notes.rst:7304
msgid "Fixes a bug causing incorrect channel evaluation in the :class:`qiskit.providers.aer.PulseSimulator`."
msgstr ""

#: ../../release_notes.rst:7307
msgid "Fixes several minor bugs for Hamiltonian parsing edge cases in the :class:`qiskit.providers.aer.pulse.system_models.hamiltonian_model.HamiltonianModel` class."
msgstr ""

#: ../../release_notes.rst:7319
msgid "The main change made in this release is a refactor of the Randomized Benchmarking code to integrate the updated Clifford class :class:`qiskit.quantum_info.Clifford` from Terra and to improve the CNOT-Dihedral class."
msgstr ""

#: ../../release_notes.rst:7330
msgid "The :func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq` function was refactored to use the updated Clifford class :class:`~qiskit.quantum_info.Clifford`, to allow efficient Randomized Benchmarking (RB) on Clifford sequences with more than 2 qubits. In addition, the code of the CNOT-Dihedral class :class:`qiskit.ignis.verification.randomized_benchmarking.CNOTDihedral` was refactored to make it more efficient, by using numpy arrays, as well not using pre-generated pickle files storing all the 2-qubit group elements. The :func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq` function has a new kwarg ``rand_seed`` which can be used to specify a seed for the random number generator used to generate the RB circuits. This can be useful for having a reproducible circuit."
msgstr ""

#: ../../release_notes.rst:7341
msgid "The :func:`qiskit.ignis.verification.qv_circuits` function has a new kwarg ``seed`` which can be used to specify a seed for the random number generator used to generate the Quantum Volume circuits. This can be useful for having a reproducible circuit."
msgstr ""

#: ../../release_notes.rst:7352
msgid "The :func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq` function is now using the updated Clifford class :class:`~qiskit.quantum_info.Clifford` and the updated CNOT-Dihedral class :class:`qiskit.ignis.verification.randomized_benchmarking.CNOTDihedral` to construct its output instead of using pre-generated group tables for the Clifford and CNOT-Dihedral group elements, which were stored in pickle files. This may result in subtle differences from the output from the previous version."
msgstr ""

#: ../../release_notes.rst:7360 ../../release_notes.rst:7713
msgid "A new requirement `scikit-learn <https://scikit-learn.org/stable/>`__ has been added to the requirements list. This dependency was added in the 0.3.0 release but wasn't properly exposed as a dependency in that release. This would lead to an ``ImportError`` if the :mod:`qiskit.ignis.measurement.discriminator.iq_discriminators` module was imported. This is now correctly listed as a dependency so that ``scikit-learn`` will be installed with qiskit-ignis."
msgstr ""

#: ../../release_notes.rst:7368
msgid "The :func:`qiskit.ignis.verification.qv_circuits` function is now using the circuit library class :class:`~qiskit.circuit.library.QuantumVolume` to construct its output instead of building the circuit from scratch. This may result in subtle differences from the output from the previous version."
msgstr ""

#: ../../release_notes.rst:7374
msgid "Tomography fitters can now also get list of `Result` objects instead of a single `Result` as requested in `issue #320 <https://github.com/Qiskit/qiskit-ignis/issues/320/>`_."
msgstr ""

#: ../../release_notes.rst:7383
msgid "The kwarg ``interleaved_gates`` for the :func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq` function has been deprecated and will be removed in a future release. It is superseded by ``interleaved_elem``. The helper functions :class:`qiskit.ignis.verification.randomized_benchmarking.BasicUtils`, :class:`qiskit.ignis.verification.randomized_benchmarking.CliffordUtils` and :class:`qiskit.ignis.verification.randomized_benchmarking.DihedralUtils` were deprecated. These classes are superseded by :class:`qiskit.ignis.verification.randomized_benchmarking.RBgroup` that handles the group operations needed for RB. The class :class:`qiskit.ignis.verification.randomized_benchmarking.Clifford` is superseded by :class:`~qiskit.quantum_info.Clifford`."
msgstr ""

#: ../../release_notes.rst:7395
msgid "The kwargs ``qr`` and ``cr`` for the :func:`qiskit.ignis.verification.qv_circuits` function have been deprecated and will be removed in a future release. These kwargs were documented as being used for specifying a :class:`qiskit.circuit.QuantumRegister` and :class:`qiskit.circuit.ClassicalRegister` to use in the generated Quantum Volume circuits instead of creating new ones. However, the parameters were never actually respected and a new Register would always be created regardless of whether they were set or not. This behavior is unchanged and these kwargs still do not have any effect, but are being deprecated prior to removal to avoid a breaking change for users who may have been setting either."
msgstr ""

#: ../../release_notes.rst:7407
msgid "Support for passing in subsets of qubits as a list in the ``qubit_lists`` parameter for the :func:`qiskit.ignis.verification.qv_circuits` function has been deprecated and will removed in a future release. In the past this was used to specify a layout to run the circuit on a device. In other words if you had a 5 qubit device and wanted to run a 2 qubit QV circuit on qubits 1, 3, and 4 of that device. You would pass in ``[1, 3, 4]`` as one of the lists in ``qubit_lists``, which would generate a 5 qubit virtual circuit and have qv applied to qubits 1, 3, and 4 in that virtual circuit. However, this functionality is not necessary and overlaps with the concept of ``initial_layout`` in the transpiler and whether a circuit has been embedded with a layout set. Moving forward instead you should just run :func:`~qiskit.compiler.transpile` or :func:`~qiskit.execute.execute` with initial layout set to do this. For example, running the above example would become::"
msgstr ""

#: ../../release_notes.rst:7435
msgid "Fix a bug of the position of measurement pulses inserted by py:func:`qiskit.ignis.characterization.calibrations.pulse_schedules.drag_schedules`. Fixes `#465 <https://github.com/Qiskit/qiskit-ignis/issues/465>`__"
msgstr ""

#: ../../release_notes.rst:7447
msgid "Removed soft dependency on CPLEX in ADMMOptimizer. Now default optimizers used by ADMMOptimizer are MinimumEigenOptimizer for QUBO problems and SlsqpOptimizer as a continuous optimizer. You can still use CplexOptimizer as an optimizer for ADMMOptimizer, but it should be set explicitly."
msgstr ""

#: ../../release_notes.rst:7451
msgid "New Yahoo! finance provider created."
msgstr ""

#: ../../release_notes.rst:7453
msgid "Introduced ``QuadraticProgramConverter`` which is an abstract class for converters. Added ``convert``/``interpret`` methods for converters instead of ``encode``/``decode``. Added ``to_ising`` and ``from_ising`` to ``QuadraticProgram`` class. Moved all parameters from ``convert`` to constructor except ``name``. Created setter/getter for converter parameters. Added ``auto_define_penalty`` and ``interpret`` for``LinearEqualityToPenalty``. Now error messages of converters are more informative."
msgstr ""

#: ../../release_notes.rst:7461
msgid "Added an SLSQP optimizer ``qiskit.optimization.algorithms.SlsqpOptimizer`` as a wrapper of the corresponding SciPy optimization method. This is a classical optimizer, does not depend on quantum algorithms and may be used as a replacement for ``CobylaOptimizer``."
msgstr ""

#: ../../release_notes.rst:7465
msgid "Cobyla optimizer has been modified to accommodate a multi start feature introduced in the SLSQP optimizer. By default, the optimizer does not run in the multi start mode."
msgstr ""

#: ../../release_notes.rst:7468
msgid "The ``SummedOp`` does a mathematically more correct check for equality, where expressions such as ``X + X == 2*X`` and ``X + Z == Z + X`` evaluate to ``True``."
msgstr ""

#: ../../release_notes.rst:7491
msgid "The ``pprint_as_string`` method for :class:`qiskit.optimization.QuadraticProgram` has been deprecated and will be removed in a future release. Instead you should just run ``.pprint_as_string()`` on the output from :meth:`~qiskit.optimization.QuadraticProgram.to_docplex`"
msgstr ""

#: ../../release_notes.rst:7497
msgid "The ``prettyprint`` method for :class:`qiskit.optimization.QuadraticProgram` has been deprecated and will be removed in a future release. Instead you should just run ``.prettyprint()`` on the output from :meth:`~qiskit.optimization.QuadraticProgram.to_docplex`"
msgstr ""

#: ../../release_notes.rst:7508
msgid "Changed in python version 3.8: On macOS, the spawn start method is now the default. The fork start method should be considered unsafe as it can lead to crashes in subprocesses. However P_BFGS doesn't support spawn, so we revert to single process. Refer to `#1109 <https://github.com/Qiskit/qiskit-aqua/issues/1109>` for more details."
msgstr ""

#: ../../release_notes.rst:7515
msgid "Binding parameters in the ``CircuitStateFn`` did not copy the value of ``is_measurement`` and always set ``is_measurement=False``. This has been fixed."
msgstr ""

#: ../../release_notes.rst:7519
msgid "Previously, SummedOp.to_matrix_op built a list MatrixOp's (with numpy matrices) and then summed them, returning a single MatrixOp. Some algorithms (for example vqe) require summing thousands of matrices, which exhausts memory when building the list of matrices. With this change, no list is constructed. Rather, each operand in the sum is converted to a matrix, added to an accumulator, and discarded."
msgstr ""

#: ../../release_notes.rst:7526
msgid "Changing backends in VQE from statevector to qasm_simulator or real device was causing an error due to CircuitSampler incompatible reuse. VQE was changed to always create a new CircuitSampler and create a new  expectation in case not entered by user. Refer to `#1153 <https://github.com/Qiskit/qiskit-aqua/issues/1153>` for more details."
msgstr ""

#: ../../release_notes.rst:7533
msgid "Exchange and Wikipedia finance providers were fixed to correctly handle Quandl data. Refer to `#775 <https://github.com/Qiskit/qiskit-aqua/issues/775>` for more details. Fixes a divide by 0 error on finance providers mean vector and covariance matrix calculations. Refer to `#781 <https://github.com/Qiskit/qiskit-aqua/issues/781>` for more details."
msgstr ""

#: ../../release_notes.rst:7540
msgid "The ``ListOp.combo_fn`` property has been lost in several transformations, such as converting to another operator type, traversing, reducing or multiplication. Now this attribute is propagated to the resulting operator."
msgstr ""

#: ../../release_notes.rst:7544
msgid "The evaluation of some operator expressions, such as of ``SummedOp``s and evaluations with the ``CircuitSampler`` did not treat coefficients correctly or ignored them completely. E.g. evaluating ``~StateFn(0 * (I + Z)) @ Plus`` did not yield 0 or the normalization of ``~StateFn(I) @ ((Plus + Minus) / sqrt(2))`` missed a factor of ``sqrt(2)``. This has been fixed."
msgstr ""

#: ../../release_notes.rst:7551
msgid "``OptimizationResult`` included some public setters and class variables were ``Optional``. This fix makes all class variables read-only so that mypy and pylint can check types more effectively. ``MinimumEigenOptimizer.solve`` generated bitstrings in a result as ``str``. This fix changed the result into ``List[float]`` as the other algorithms do. Some public classes related to optimization algorithms were missing in the documentation of ``qiskit.optimization.algorithms``. This fix added all such classes to the docstring. `#1131 <https://github.com/Qiskit/qiskit-aqua/issues/1131>` for more details."
msgstr ""

#: ../../release_notes.rst:7561
msgid "``OptimizationResult.__init__`` did not check whether the sizes of ``x`` and ``variables`` match or not (they should match). This fix added the check to raise an error if they do not match and fixes bugs detected by the check. This fix also adds missing unit tests related to ``OptimizationResult.variable_names`` and ``OptimizationResult.variables_dict`` in ``test_converters``. `#1167 <https://github.com/Qiskit/qiskit-aqua/issues/1167>` for more details."
msgstr ""

#: ../../release_notes.rst:7568
msgid "Fix parameter binding in the ``OperatorStateFn``, which did not bind parameters of the underlying primitive but just the coefficients."
msgstr ""

#: ../../release_notes.rst:7571
msgid "``op.eval(other)``, where ``op`` is of type ``OperatorBase``, sometimes silently returns a nonsensical value when the number of qubits in ``op`` and ``other`` are not equal. This fix results in correct behavior, which is to throw an error rather than return a value, because the input in this case is invalid."
msgstr ""

#: ../../release_notes.rst:7577
msgid "The ``construct_circuit`` method of ``VQE`` previously returned the expectation value to be evaluated as type ``OperatorBase``. This functionality has been moved into ``construct_expectation`` and ``construct_circuit`` returns a list of the circuits that are evaluated to compute the expectation value."
msgstr ""

#: ../../release_notes.rst:7592
msgid ":class:`~qiskit.providers.ibmq.IBMQBackend` now has a new :meth:`~qiskit.providers.ibmq.IBMQBackend.reservations` method that returns reservation information for the backend, with optional filtering. In addition, you can now use :meth:`provider.backends.my_reservations()<qiskit.providers.ibmq.IBMQBackendService.my_reservations>` to query for your own reservations."
msgstr ""

#: ../../release_notes.rst:7599
msgid ":meth:`qiskit.providers.ibmq.job.IBMQJob.result` raises an :class:`~qiskit.providers.ibmq.job.IBMQJobFailureError` exception if the job has failed. The exception message now contains the reason the job failed, if the entire job failed for a single reason."
msgstr ""

#: ../../release_notes.rst:7604
msgid "A new attribute ``client_version`` was added to :class:`~qiskit.providers.ibmq.job.IBMQJob` and :class:`qiskit.result.Result` object retrieved via :meth:`qiskit.providers.ibmq.job.IBMQJob.result`. ``client_version`` is a dictionary with the key being the name and the value being the version of the client used to submit the job, such as Qiskit."
msgstr ""

#: ../../release_notes.rst:7612
msgid "The :func:`~qiskit.providers.ibmq.least_busy` function now takes a new, optional parameter ``reservation_lookahead``. If specified or defaulted to, a backend is considered unavailable if it has reservations in the next ``n`` minutes, where ``n`` is the value of ``reservation_lookahead``. For example, if the default value of 60 is used, then any backends that have reservations in the next 60 minutes are considered unavailable."
msgstr ""

#: ../../release_notes.rst:7619
msgid ":class:`~qiskit.providers.ibmq.managed.ManagedResults` now has a new :meth:`~qiskit.providers.ibmq.managed.ManagedResults.combine_results` method that combines results from all managed jobs and returns a single :class:`~qiskit.result.Result` object. This ``Result`` object can be used, for example, in ``qiskit-ignis`` fitter methods."
msgstr ""

#: ../../release_notes.rst:7631
msgid "Timestamps in the following fields are now in local time instead of UTC:"
msgstr ""

#: ../../release_notes.rst:7633
msgid "Backend properties returned by :meth:`qiskit.providers.ibmq.IBMQBackend.properties`."
msgstr ""

#: ../../release_notes.rst:7635
msgid "Backend properties returned by :meth:`qiskit.providers.ibmq.job.IBMQJob.properties`."
msgstr ""

#: ../../release_notes.rst:7637
msgid "``estimated_start_time`` and ``estimated_complete_time`` in :class:`~qiskit.providers.ibmq.job.QueueInfo`, returned by :meth:`qiskit.providers.ibmq.job.IBMQJob.queue_info`."
msgstr ""

#: ../../release_notes.rst:7640
msgid "``date`` in :class:`~qiskit.result.Result`, returned by :meth:`qiskit.providers.ibmq.job.IBMQJob.result`."
msgstr ""

#: ../../release_notes.rst:7643
msgid "In addition, the ``datetime`` parameter for :meth:`qiskit.providers.ibmq.IBMQBackend.properties` is also expected to be in local time unless it has UTC timezone information."
msgstr ""

#: ../../release_notes.rst:7647
msgid "``websockets`` 8.0 or above is now required if Python 3.7 or above is used. ``websockets`` 7.0 will continue to be used for Python 3.6 or below."
msgstr ""

#: ../../release_notes.rst:7650
msgid "On Windows, the event loop policy is set to ``WindowsSelectorEventLoopPolicy`` instead of using the default ``WindowsProactorEventLoopPolicy``. This fixes the issue that the :meth:`qiskit.providers.ibmq.job.IBMQJob.result` method could hang on Windows. Fixes `#691 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/691>`_"
msgstr ""

#: ../../release_notes.rst:7662
msgid "Use of ``Qconfig.py`` to save IBM Quantum Experience credentials is deprecated and will be removed in the next release. You should use ``qiskitrc`` (the default) instead."
msgstr ""

#: ../../release_notes.rst:7672
msgid "Fixes an issue wherein a call to :meth:`qiskit.providers.ibmq.IBMQBackend.jobs` can hang if the number of jobs being returned is large. Fixes `#674 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/674>`_"
msgstr ""

#: ../../release_notes.rst:7676
msgid "Fixes an issue which would raise a ``ValueError`` when building error maps in Jupyter for backends that are offline. Fixes `#706 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/706>`_"
msgstr ""

#: ../../release_notes.rst:7680
msgid ":meth:`qiskit.providers.ibmq.IBMQBackend.jobs` will now return the correct list of :class:`~qiskit.providers.ibmq.job.IBMQJob` objects when the ``status`` kwarg is set to ``'RUNNING'``."
msgstr ""

#: ../../release_notes.rst:7684 ../../release_notes.rst:7984
msgid "The package metadata has been updated to properly reflect the dependency on ``qiskit-terra`` >= 0.14.0. This dependency was implicitly added as part of the 0.7.0 release but was not reflected in the package requirements so it was previously possible to install ``qiskit-ibmq-provider`` with a version of ``qiskit-terra`` which was too old. Fixes `#677 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/677>`_"
msgstr ""

#: ../../release_notes.rst:7693
msgid "Qiskit 0.19.6"
msgstr ""

#: ../../release_notes.rst:7696 ../../release_notes.rst:7747
#: ../../release_notes.rst:7827
msgid "Terra 0.14.2"
msgstr ""

#: ../../release_notes.rst:7698 ../../release_notes.rst:7703
#: ../../release_notes.rst:7734 ../../release_notes.rst:7739
#: ../../release_notes.rst:7749 ../../release_notes.rst:7754
#: ../../release_notes.rst:7819 ../../release_notes.rst:7872
#: ../../release_notes.rst:7877 ../../release_notes.rst:7929
#: ../../release_notes.rst:7938 ../../release_notes.rst:7966
#: ../../release_notes.rst:7971 ../../release_notes.rst:8383
#: ../../release_notes.rst:8389 ../../release_notes.rst:8512
#: ../../release_notes.rst:8588 ../../release_notes.rst:8594
#: ../../release_notes.rst:8600 ../../release_notes.rst:10153
#: ../../release_notes.rst:10158 ../../release_notes.rst:10167
#: ../../release_notes.rst:10172 ../../release_notes.rst:10177
#: ../../release_notes.rst:10182 ../../release_notes.rst:10221
#: ../../release_notes.rst:10226 ../../release_notes.rst:10231
#: ../../release_notes.rst:10236 ../../release_notes.rst:10954
#: ../../release_notes.rst:10959 ../../release_notes.rst:11550
#: ../../release_notes.rst:11555 ../../release_notes.rst:11560
#: ../../release_notes.rst:12073 ../../release_notes.rst:12078
#: ../../release_notes.rst:12083 ../../release_notes.rst:12088
#: ../../release_notes.rst:12953 ../../release_notes.rst:12963
#: ../../release_notes.rst:12991 ../../release_notes.rst:13014
#: ../../release_notes.rst:13019 ../../release_notes.rst:13099
#: ../../release_notes.rst:13104 ../../release_notes.rst:13109
#: ../../release_notes.rst:13114 ../../release_notes.rst:13516
#: ../../release_notes.rst:13521
msgid "No Change"
msgstr ""

#: ../../release_notes.rst:7701 ../../release_notes.rst:7752
#: ../../release_notes.rst:7870 ../../release_notes.rst:7941
msgid "Aer 0.5.2"
msgstr ""

#: ../../release_notes.rst:7706
msgid "Ignis 0.3.3"
msgstr ""

#: ../../release_notes.rst:7727
msgid "Fixes an issue in qiskit-ignis 0.3.2 which would raise an ``ImportError`` when :mod:`qiskit.ignis.verification.tomography.fitters.process_fitter` was imported without ``cvxpy`` being installed."
msgstr ""

#: ../../release_notes.rst:7732 ../../release_notes.rst:7778
msgid "Aqua 0.7.3"
msgstr ""

#: ../../release_notes.rst:7737 ../../release_notes.rst:7817
#: ../../release_notes.rst:7927 ../../release_notes.rst:7974
msgid "IBM Q Provider 0.7.2"
msgstr ""

#: ../../release_notes.rst:7744
msgid "Qiskit 0.19.5"
msgstr ""

#: ../../release_notes.rst:7757
msgid "Ignis 0.3.2"
msgstr ""

#: ../../release_notes.rst:7762
msgid "The :meth:`qiskit.ignis.verification.TomographyFitter.fit` method has improved detection logic for the default fitter. Previously, the ``cvx`` fitter method was used whenever `cvxpy <https://www.cvxpy.org/>`__ was installed. However, it was possible to install cvxpy without an SDP solver that would work for the ``cvx`` fitter method. This logic has been reworked so that the ``cvx`` fitter method is only used if ``cvxpy`` is installed and an SDP solver is present that can be used. Otherwise, the ``lstsq`` fitter is used."
msgstr ""

#: ../../release_notes.rst:7770
msgid "Fixes an edge case in :meth:`qiskit.ignis.mitigation.measurement.fitters.MeasurementFitter.apply` for input that has invalid or incorrect state labels that don't match the calibration circuit. Previously, this would not error and just return an empty result. Instead now this case is correctly caught and a ``QiskitError`` exception is raised when using incorrect labels."
msgstr ""

#: ../../release_notes.rst:7785
msgid "The `cvxpy <https://www.cvxpy.org/>`__ dependency which is required for the svm classifier has been removed from the requirements list and made an optional dependency. This is because installing cvxpy is not seamless in every environment and often requires a compiler be installed to run. To use the svm classifier now you'll need to install cvxpy by either running ``pip install cvxpy<1.1.0`` or to install it with aqua running ``pip install qiskit-aqua[cvx]``."
msgstr ""

#: ../../release_notes.rst:7799
msgid "The ``compose`` method of the ``CircuitOp`` used ``QuantumCircuit.combine`` which has been changed to use ``QuantumCircuit.compose``. Using combine leads to the problem that composing an operator with a ``CircuitOp`` based on a named register does not chain the operators but stacks them. E.g. composing ``Z ^ 2`` with a circuit based on a 2-qubit named register yielded a 4-qubit operator instead of a 2-qubit operator."
msgstr ""

#: ../../release_notes.rst:7805
msgid "The ``MatrixOp.to_instruction`` method previously returned an operator and not an instruction. This method has been updated to return an Instruction. Note that this only works if the operator primitive is unitary, otherwise an error is raised upon the construction of the instruction."
msgstr ""

#: ../../release_notes.rst:7810
msgid "The ``__hash__`` method of the ``PauliOp`` class used the ``id()`` method which prevents set comparisons to work as expected since they rely on hash tables and identical objects used to not have identical hashes. Now, the implementation uses a hash of the string representation inline with the implementation in the ``Pauli`` class."
msgstr ""

#: ../../release_notes.rst:7824
msgid "Qiskit 0.19.4"
msgstr ""

#: ../../release_notes.rst:7834
msgid "The ``circuit_to_gate`` and ``circuit_to_instruction`` converters had previously automatically included the generated gate or instruction in the active ``SessionEquivalenceLibrary``. These converters now accept an optional ``equivalence_library`` keyword argument to specify if and where the converted instances should be registered. The default behavior is not to register the converted instance."
msgstr ""

#: ../../release_notes.rst:7847
msgid "Implementations of the multi-controlled X Gate (``MCXGrayCode``, ``MCXRecursive`` and ``MCXVChain``) have had their ``name`` properties changed to more accurately describe their implementation (``mcx_gray``, ``mcx_recursive``, and ``mcx_vchain`` respectively.) Previously, these gates shared the name ``mcx` with ``MCXGate``, which caused these gates to be incorrectly transpiled and simulated."
msgstr ""

#: ../../release_notes.rst:7855
msgid "``ControlledGate`` instances with a set ``ctrl_state`` were in some cases not being evaluated as equal, even if the compared gates were equivalent. This has been resolved."
msgstr ""

#: ../../release_notes.rst:7859
msgid "Fixed the SI unit conversion for :py:class:`qiskit.pulse.SetFrequency`. The ``SetFrequency`` instruction should be in Hz on the frontend and has to be converted to GHz when ``SetFrequency`` is converted to ``PulseQobjInstruction``."
msgstr ""

#: ../../release_notes.rst:7863
msgid "Open controls were implemented by modifying a gate\\'s definition. However, when the gate already exists in the basis, this definition is not used, which yields incorrect circuits sent to a backend. This modifies the unroller to output the definition if it encounters a controlled gate with open controls."
msgstr ""

#: ../../release_notes.rst:7875 ../../release_notes.rst:7964
#: ../../release_notes.rst:8387 ../../release_notes.rst:8586
#: ../../release_notes.rst:10119
msgid "Ignis 0.3.0"
msgstr ""

#: ../../release_notes.rst:7880
msgid "Aqua 0.7.2"
msgstr ""

#: ../../release_notes.rst:7889
msgid "`cvxpy <https://github.com/cvxgrp/cvxpy/>`_ is now in the requirements list as a dependency for qiskit-aqua. It is used for the quadratic program solver which is used as part of the :class:`qiskit.aqua.algorithms.QSVM`. Previously ``cvxopt`` was an optional dependency that needed to be installed to use this functionality. This is no longer required as cvxpy will be installed with qiskit-aqua."
msgstr ""

#: ../../release_notes.rst:7895
msgid "For state tomography run as part of :class:`qiskit.aqua.algorithms.HHL` with a QASM backend the tomography fitter function :meth:`qiskit.ignis.verification.StateTomographyFitter.fit` now gets called explicitly with the method set to ``lstsq`` to always use the least-squares fitting. Previously it would opportunistically try to use the ``cvx`` fitter if ``cvxpy`` were installed. But, the ``cvx`` fitter depends on a specifically configured ``cvxpy`` installation with an SDP solver installed as part of ``cvxpy`` which is not always present in an environment with ``cvxpy`` installed."
msgstr ""

#: ../../release_notes.rst:7904
msgid "The VQE expectation computation using qiskit-aer's :class:`qiskit.providers.aer.extensions.SnapshotExpectationValue` instruction is not enabled by default anymore. This was changed to be the default in 0.7.0 because it is significantly faster, but it led to unexpected ideal results without shot noise (see `#1013 <https://github.com/Qiskit/qiskit-aqua/issues/1013>`_ for more details). The default has now changed back to match user expectations. Using the faster expectation computation is now opt-in by setting the new ``include_custom`` kwarg to ``True`` on the :class:`qiskit.aqua.algorithms.VQE` constructor."
msgstr ""

#: ../../release_notes.rst:7917
msgid "A new kwarg ``include_custom`` has been added to the constructor for :class:`qiskit.aqua.algorithms.VQE` and it's subclasses (mainly :class:`qiskit.aqua.algorithms.QAOA`). When set to true and the ``expectation`` kwarg is set to ``None`` (the default) this will enable the use of VQE expectation computation with Aer's ``qasm_simulator`` :class:`qiskit.providers.aer.extensions.SnapshotExpectationValue` instruction. The special Aer snapshot based computation is much faster but with the ideal output similar to state vector simulator."
msgstr ""

#: ../../release_notes.rst:7933
msgid "Qiskit 0.19.3"
msgstr ""

#: ../../release_notes.rst:7936
msgid "Terra 0.14.1"
msgstr ""

#: ../../release_notes.rst:7946
msgid "Fixed bug with statevector and unitary simulators running a number of (parallel) shots equal to the number of CPU threads instead of only running a single shot."
msgstr ""

#: ../../release_notes.rst:7949
msgid "Fixes the \"diagonal\" qobj gate instructions being applied incorrectly in the density matrix Qasm Simulator method."
msgstr ""

#: ../../release_notes.rst:7952
msgid "Fixes bug where conditional gates were not being applied correctly on the density matrix simulation method."
msgstr ""

#: ../../release_notes.rst:7955
msgid "Fix bug in CZ gate and Z gate for \"density_matrix_gpu\" and \"density_matrix_thrust\" QasmSimulator methods."
msgstr ""

#: ../../release_notes.rst:7958
msgid "Fixes issue where memory requirements of simulation were not being checked on the QasmSimulator when using a non-automatic simulation method."
msgstr ""

#: ../../release_notes.rst:7961
msgid "Fixed a memory leak that effected the GPU simulator methods"
msgstr ""

#: ../../release_notes.rst:7969
msgid "Aqua 0.7.1"
msgstr ""

#: ../../release_notes.rst:7979
msgid ":meth:`qiskit.provider.ibmq.IBMQBackend.jobs` will now return the correct list of :class:`~qiskit.provider.ibmq.job.IBMQJob` objects when the ``status`` kwarg is set to ``'RUNNING'``. Fixes `#523 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/523>`_"
msgstr ""

#: ../../release_notes.rst:7993
msgid "Qiskit 0.19.0"
msgstr ""

#: ../../release_notes.rst:7996
msgid "Terra 0.14.0"
msgstr ""

#: ../../release_notes.rst:8003
msgid "The 0.14.0 release includes several new features and bug fixes. The biggest change for this release is the introduction of a quantum circuit library in :mod:`qiskit.circuit.library`, containing some circuit families of interest."
msgstr ""

#: ../../release_notes.rst:8008
msgid "The circuit library gives users access to a rich set of well-studied circuit families, instances of which can be used as benchmarks, as building blocks in building more complex circuits, or as a tool to explore quantum computational advantage over classical. The contents of this library will continue to grow and mature."
msgstr ""

#: ../../release_notes.rst:8014
msgid "The initial release of the circuit library contains:"
msgstr ""

#: ../../release_notes.rst:8016
msgid "``standard_gates``: these are fixed-width gates commonly used as primitive building blocks, consisting of 1, 2, and 3 qubit gates. For example the :class:`~qiskit.circuit.library.XGate`, :class:`~qiskit.circuit.library.RZZGate` and :class:`~qiskit.circuit.library.CSWAPGate`. The old location of these gates under ``qiskit.extensions.standard`` is deprecated."
msgstr ""

#: ../../release_notes.rst:8022
msgid "``generalized_gates``: these are families that can generalize to arbitrarily many qubits, for example a :class:`~qiskit.circuit.library.Permutation` or :class:`~qiskit.circuit.library.GMS` (Global Molmer-Sorensen gate)."
msgstr ""

#: ../../release_notes.rst:8025
msgid "``boolean_logic``: circuits that transform basis states according to simple Boolean logic functions, such as :class:`~qiskit.circuit.library.ADD` or :class:`~qiskit.circuit.library.XOR`."
msgstr ""

#: ../../release_notes.rst:8028
msgid "``arithmetic``: a set of circuits for doing classical arithmetic such as :class:`~qiskit.circuit.library.WeightedAdder` and :class:`~qiskit.circuit.library.IntegerComparator`."
msgstr ""

#: ../../release_notes.rst:8031
msgid "``basis_changes``: circuits such as the quantum Fourier transform, :class:`~qiskit.circuit.library.QFT`, that mathematically apply basis changes."
msgstr ""

#: ../../release_notes.rst:8034
msgid "``n_local``: patterns to easily create large circuits with rotation and entanglement layers, such as  :class:`~qiskit.circuit.library.TwoLocal` which uses single-qubit rotations and two-qubit entanglements."
msgstr ""

#: ../../release_notes.rst:8037
msgid "``data_preparation``: circuits that take classical input data and encode it in a quantum state that is difficult to simulate, e.g. :class:`~qiskit.circuit.library.PauliFeatureMap` or :class:`~qiskit.circuit.library.ZZFeatureMap`."
msgstr ""

#: ../../release_notes.rst:8041
msgid "Other circuits that have proven interesting in the literature, such as :class:`~qiskit.circuit.library.QuantumVolume`, :class:`~qiskit.circuit.library.GraphState`, or :class:`~qiskit.circuit.library.IQP`."
msgstr ""

#: ../../release_notes.rst:8046
msgid "To allow easier use of these circuits as building blocks, we have introduced a :meth:`~qiskit.circuit.QuantumCircuit.compose` method of :class:`qiskit.circuit.QuantumCircuit` for composition of circuits either with other circuits (by welding them at the ends and optionally permuting wires) or with other simpler gates::"
msgstr ""

#: ../../release_notes.rst:8069
msgid "With this, Qiskit's circuits no longer assume an implicit initial state of :math:`|0\\rangle`, and will not be drawn with this initial state. The all-zero initial state is still assumed on a backend when a circuit is executed."
msgstr ""

#: ../../release_notes.rst:8080
msgid "A new method, :meth:`~qiskit.circuit.EquivalenceLibrary.has_entry`, has been added to the :class:`qiskit.circuit.EquivalenceLibrary` class to quickly check if a given gate has any known decompositions in the library."
msgstr ""

#: ../../release_notes.rst:8084
msgid "A new class :class:`~qiskit.circuit.library.IQP`, to construct an instantaneous quantum polynomial circuit, has been added to the circuit library module :mod:`qiskit.circuit.library`."
msgstr ""

#: ../../release_notes.rst:8088
msgid "A new :meth:`~qiskit.circuit.QuantumCircuit.compose` method has been added to :class:`qiskit.circuit.QuantumCircuit`. It allows composition of two quantum circuits without having to turn one into a gate or instruction. It also allows permutations of qubits/clbits at the point of composition, as well as optional inplace modification. It can also be used in place of :meth:`~qiskit.circuit.QuantumCircuit.append()`, as it allows composing instructions and operators onto the circuit as well."
msgstr ""

#: ../../release_notes.rst:8097
msgid ":class:`qiskit.circuit.library.Diagonal` circuits have been added to the circuit library. These circuits implement diagonal quantum operators (consisting of non-zero elements only on the diagonal). They are more efficiently simulated by the Aer simulator than dense matrices."
msgstr ""

#: ../../release_notes.rst:8102
msgid "Add :meth:`~qiskit.quantum_info.Clifford.from_label` method to the :class:`qiskit.quantum_info.Clifford` class for initializing as the tensor product of single-qubit I, X, Y, Z, H, or S gates."
msgstr ""

#: ../../release_notes.rst:8106
msgid "Schedule transformer :func:`qiskit.pulse.reschedule.compress_pulses` performs an optimization pass to reduce the usage of waveform memory in hardware by replacing multiple identical instances of a pulse in a pulse schedule with a single pulse. For example::"
msgstr ""

#: ../../release_notes.rst:8124
msgid "The :class:`qiskit.transpiler.Layout` has a new method :meth:`~qiskit.transpiler.Layout.reorder_bits` that is used to reorder a list of virtual qubits based on the layout object."
msgstr ""

#: ../../release_notes.rst:8128
msgid "Two new methods have been added to the :class:`qiskit.providers.models.PulseBackendConfiguration` for interacting with channels."
msgstr ""

#: ../../release_notes.rst:8132
msgid ":meth:`~qiskit.providers.models.PulseBackendConfiguration.get_channel_qubits` to get a list of all qubits operated by the given channel and"
msgstr ""

#: ../../release_notes.rst:8134
msgid ":meth:`~qiskit.providers.models.PulseBackendConfiguration.get_qubit_channel` to get a list of channels operating on the given qubit."
msgstr ""

#: ../../release_notes.rst:8137
msgid "New :class:`qiskit.extensions.HamiltonianGate` and :meth:`qiskit.circuit.QuantumCircuit.hamiltonian()` methods are introduced, representing Hamiltonian evolution of the circuit wavefunction by a user-specified Hermitian Operator and evolution time. The evolution time can be a :class:`~qiskit.circuit.Parameter`, allowing the creation of parameterized UCCSD or QAOA-style circuits which compile to ``UnitaryGate`` objects if ``time`` parameters are provided. The Unitary of a ``HamiltonianGate`` with Hamiltonian Operator ``H`` and time parameter ``t`` is :math:`e^{-iHt}`."
msgstr ""

#: ../../release_notes.rst:8147
msgid "The circuit library module :mod:`qiskit.circuit.library` now provides a new boolean logic AND circuit, :class:`qiskit.circuit.library.AND`, and OR circuit, :class:`qiskit.circuit.library.OR`, which implement the respective operations on a variable number of provided qubits."
msgstr ""

#: ../../release_notes.rst:8152
msgid "New fake backends are added under :mod:`qiskit.test.mock`. These include mocked versions of ``ibmq_armonk``, ``ibmq_essex``, ``ibmq_london``, ``ibmq_valencia``, ``ibmq_cambridge``, ``ibmq_paris``, ``ibmq_rome``, and ``ibmq_athens``. As with other fake backends, these include snapshots of calibration data (i.e. ``backend.defaults()``) and error data (i.e. ``backend.properties()``) taken from the real system, and can be used for local testing, compilation and simulation."
msgstr ""

#: ../../release_notes.rst:8160
msgid "The ``last_update_date`` parameter for :class:`~qiskit.providers.models.BackendProperties` can now also be passed in as a ``datetime`` object. Previously only a string in ISO8601 format was accepted."
msgstr ""

#: ../../release_notes.rst:8165
msgid "Adds :meth:`qiskit.quantum_info.Statevector.from_int` and :meth:`qiskit.quantum_info.DensityMatrix.from_int` methods that allow constructing a computational basis state for specified system dimensions."
msgstr ""

#: ../../release_notes.rst:8169
msgid "The methods on the :class:`qiskit.circuit.QuantumCircuit` class for adding gates (for example :meth:`~qiskit.circuit.QuantumCircuit.h`) which were previously added dynamically at run time to the class definition have been refactored to be statically defined methods of the class. This means that static analyzer (such as IDEs) can now read these methods."
msgstr ""

#: ../../release_notes.rst:8181
msgid "A new package, `python-dateutil <https://pypi.org/project/python-dateutil/>`_, is now required and has been added to the requirements list. It is being used to parse datetime strings received from external providers in :class:`~qiskit.providers.models.BackendProperties` objects."
msgstr ""

#: ../../release_notes.rst:8187
msgid "The marshmallow schema classes in :mod:`qiskit.providers.models` have been removed since they are no longer used by the BackendObjects."
msgstr ""

#: ../../release_notes.rst:8190
msgid "The output of the ``to_dict()`` method for the classes in :mod:`qiskit.providers.models` is no longer in a format for direct JSON serialization. Depending on the content contained in instances of these class there may be numpy arrays and/or complex numbers in the fields of the dict. If you're JSON serializing the output of the to_dict methods you should ensure your JSON encoder can handle numpy arrays and complex numbers. This includes:"
msgstr ""

#: ../../release_notes.rst:8198
msgid ":meth:`qiskit.providers.models.BackendConfiguration.to_dict`"
msgstr ""

#: ../../release_notes.rst:8199
msgid ":meth:`qiskit.providers.models.BackendProperties.to_dict`"
msgstr ""

#: ../../release_notes.rst:8200
msgid ":meth:`qiskit.providers.models.BackendStatus.to_dict`"
msgstr ""

#: ../../release_notes.rst:8201
msgid ":meth:`qiskit.providers.models.QasmBackendConfiguration.to_dict`"
msgstr ""

#: ../../release_notes.rst:8202
msgid ":meth:`qiskit.providers.models.PulseBackendConfiguration.to_dict`"
msgstr ""

#: ../../release_notes.rst:8203
msgid ":meth:`qiskit.providers.models.UchannelLO.to_dict`"
msgstr ""

#: ../../release_notes.rst:8204
msgid ":meth:`qiskit.providers.models.GateConfig.to_dict`"
msgstr ""

#: ../../release_notes.rst:8205
msgid ":meth:`qiskit.providers.models.PulseDefaults.to_dict`"
msgstr ""

#: ../../release_notes.rst:8206
msgid ":meth:`qiskit.providers.models.Command.to_dict`"
msgstr ""

#: ../../release_notes.rst:8207
msgid ":meth:`qiskit.providers.models.JobStatus.to_dict`"
msgstr ""

#: ../../release_notes.rst:8208
msgid ":meth:`qiskit.providers.models.Nduv.to_dict`"
msgstr ""

#: ../../release_notes.rst:8209
msgid ":meth:`qiskit.providers.models.Gate.to_dict`"
msgstr ""

#: ../../release_notes.rst:8217
msgid "The :meth:`qiskit.dagcircuit.DAGCircuit.compose` method now takes a list of qubits/clbits that specify the positional order of bits to compose onto. The dictionary-based method of mapping using the ``edge_map`` argument is deprecated and will be removed in a future release."
msgstr ""

#: ../../release_notes.rst:8222
msgid "The ``combine_into_edge_map()`` method for the :class:`qiskit.transpiler.Layout` class has been deprecated and will be removed in a future release. Instead, the new method :meth:`~qiskit.transpiler.Layout.reorder_bits` should be used to reorder a list of virtual qubits according to the layout object."
msgstr ""

#: ../../release_notes.rst:8228
msgid "Passing a :class:`qiskit.pulse.ControlChannel` object in via the parameter ``channel`` for the :class:`qiskit.providers.models.PulseBackendConfiguration` method :meth:`~qiskit.providers.models.PulseBackendConfiguration.control` has been deprecated and will be removed in a future release. The ``ControlChannel`` objects are now generated from the backend configuration ``channels`` attribute which has the information of all channels and the qubits they operate on. Now, the method :meth:`~qiskit.providers.models.PulseBackendConfiguration.control` is expected to take the parameter ``qubits`` of the form ``(control_qubit, target_qubit)`` and type ``list`` or ``tuple``, and returns a list of control channels."
msgstr ""

#: ../../release_notes.rst:8241
msgid "The ``AND`` and ``OR`` methods of :class:`qiskit.circuit.QuantumCircuit` are deprecated and will be removed in a future release. Instead you should use the circuit library boolean logic classes :class:`qiskit.circuit.library.AND` amd :class:`qiskit.circuit.library.OR` and then append those objects to your class. For example::"
msgstr ""

#: ../../release_notes.rst:8258
msgid "The ``qiskit.extensions.standard`` module is deprecated and will be removed in a future release. The gate classes in that module have been moved to :mod:`qiskit.circuit.library.standard_gates`."
msgstr ""

#: ../../release_notes.rst:8268
msgid "The :class:`qiskit.circuit.QuantumCircuit` methods :meth:`~qiskit.circuit.QuantumCircuit.inverse`, :meth:`~qiskit.circuit.QuantumCircuit.mirror` methods, as well as the ``QuantumCircuit.data`` setter would generate an invalid circuit when used on a parameterized circuit instance. This has been resolved and these methods should now work with a parameterized circuit. Fixes `#4235 <https://github.com/Qiskit/qiskit-terra/issues/4235>`_"
msgstr ""

#: ../../release_notes.rst:8276
msgid "Previously when creating a controlled version of a standard qiskit gate if a ``ctrl_state`` was specified a generic ``ControlledGate`` object would be returned whereas without it a standard qiskit controlled gate would be returned if it was defined. This PR allows standard qiskit controlled gates to understand ``ctrl_state``."
msgstr ""

#: ../../release_notes.rst:8283
msgid "Additionally, this PR fixes what might be considered a bug where setting the ``ctrl_state`` of an already controlled gate would assume the specified state applied to the full control width instead of the control qubits being added. For instance,::"
msgstr ""

#: ../../release_notes.rst:8295
msgid "would apply ``ctrl_state`` to all three control qubits instead of just the two control qubits being added."
msgstr ""

#: ../../release_notes.rst:8298
msgid "Fixed a bug in :func:`~qiskit.quantum_info.random_clifford` that stopped it from sampling the full Clifford group. Fixes `#4271 <https://github.com/Qiskit/qiskit-terra/issues/4271>`_"
msgstr ""

#: ../../release_notes.rst:8302
msgid "The :class:`qiskit.circuit.Instruction` method :meth:`qiskit.circuit.Instruction.is_parameterized` method had previously returned ``True`` for any ``Instruction`` instance which had a :class:`qiskit.circuit.Parameter` in any element of its ``params`` array, even if that ``Parameter`` had been fully bound. This has been corrected so that ``.is_parameterized`` will return ``False`` when the instruction is fully bound."
msgstr ""

#: ../../release_notes.rst:8310
msgid ":meth:`qiskit.circuit.ParameterExpression.subs` had not correctly detected some cases where substituting parameters would result in a two distinct :class:`~qiskit.circuit.Parameters` objects in an expression with the same name. This has been corrected so a ``CircuitError`` will be raised in these cases."
msgstr ""

#: ../../release_notes.rst:8316
msgid "Improve performance of :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` for low-qubit circuit simulations by optimizing the class ``__init__`` methods. Fixes `#4281 <https://github.com/Qiskit/qiskit-terra/issues/4281>`_"
msgstr ""

#: ../../release_notes.rst:8321
msgid "The function :func:`qiskit.compiler.transpile` now correctly handles when the parameter ``basis_gates`` is set to ``None``. This will allow any gate in the output tranpiled circuit, including gates added by the transpilation process. Note that using this parameter may have some unintended consequences during optimization. Some transpiler passes depend on having a ``basis_gates`` set. For example, :class:`qiskit.transpiler.passes.Optimize1qGates` only optimizes the chains of u1, u2, and u3 gates and without ``basis_gates`` it is unable to unroll gates that otherwise could be optimized:"
msgstr ""

#: ../../release_notes.rst:8351
msgid "Fixes `#3017 <https://github.com/Qiskit/qiskit-terra/issues/3017>`_"
msgstr ""

#: ../../release_notes.rst:8359
msgid "The objects in :mod:`qiskit.providers.models` which were previously constructed using the marshmallow library have been refactored to not depend on marshmallow. This includes:"
msgstr ""

#: ../../release_notes.rst:8363
msgid ":class:`~qiskit.providers.models.BackendConfiguration`"
msgstr ""

#: ../../release_notes.rst:8364
msgid ":class:`~qiskit.providers.models.BackendProperties`"
msgstr ""

#: ../../release_notes.rst:8365
msgid ":class:`~qiskit.providers.models.BackendStatus`"
msgstr ""

#: ../../release_notes.rst:8366
msgid ":class:`~qiskit.providers.models.QasmBackendConfiguration`"
msgstr ""

#: ../../release_notes.rst:8367
msgid ":class:`~qiskit.providers.models.PulseBackendConfiguration`"
msgstr ""

#: ../../release_notes.rst:8368
msgid ":class:`~qiskit.providers.models.UchannelLO`"
msgstr ""

#: ../../release_notes.rst:8369
msgid ":class:`~qiskit.providers.models.GateConfig`"
msgstr ""

#: ../../release_notes.rst:8370
msgid ":class:`~qiskit.providers.models.PulseDefaults`"
msgstr ""

#: ../../release_notes.rst:8371
msgid ":class:`~qiskit.providers.models.Command`"
msgstr ""

#: ../../release_notes.rst:8372
msgid ":class:`~qiskit.providers.models.JobStatus`"
msgstr ""

#: ../../release_notes.rst:8373
msgid ":class:`~qiskit.providers.models.Nduv`"
msgstr ""

#: ../../release_notes.rst:8374
msgid ":class:`~qiskit.providers.models.Gate`"
msgstr ""

#: ../../release_notes.rst:8376
msgid "These should be drop-in replacements without any noticeable change but specifics inherited from marshmallow may not work. Please file issues for any incompatibilities found."
msgstr ""

#: ../../release_notes.rst:8381 ../../release_notes.rst:8515
msgid "Aer 0.5.1"
msgstr ""

#: ../../release_notes.rst:8392
msgid "Aqua 0.7.0"
msgstr ""

#: ../../release_notes.rst:8397
msgid "The Qiskit Aqua 0.7.0 release introduces a lot of new functionality along with an improved integration with :class:`qiskit.circuit.QuantumCircuit` objects. The central contributions are the Qiskit's optimization module, a complete refactor on Operators, using circuits as native input for the algorithms and removal of the declarative JSON API."
msgstr ""

#: ../../release_notes.rst:8404
msgid "Optimization module"
msgstr ""

#: ../../release_notes.rst:8405
msgid "The :mod:`qiskit.optimization`` module now offers functionality for modeling and solving quadratic programs. It provides various near-term quantum and conventional algorithms, such as the ``MinimumEigenOptimizer`` (covering e.g. ``VQE`` or ``QAOA``) or ``CplexOptimizer``, as well as a set of converters to translate between different problem representations, such as ``QuadraticProgramToQubo``. See the `changelog <https://github.com/Qiskit/qiskit-aqua/blob/master/CHANGELOG.md>`_ for a list of the added features."
msgstr ""

#: ../../release_notes.rst:8416
msgid "Operator flow"
msgstr ""

#: ../../release_notes.rst:8417
msgid "The operator logic provided in :mod:`qiskit.aqua.operators`` was completely refactored and is now a full set of tools for constructing physically-intuitive quantum computations. It contains state functions, operators and measurements and internally relies on Terra's Operator objects. Computing expectation values and evolutions was heavily simplified and objects like the ``ExpectationFactory`` produce the suitable, most efficient expectation algorithm based on the Operator input type. See the `changelog <https://github.com/Qiskit/qiskit-aqua/blob/master/CHANGELOG.md>`_ for a overview of the added functionality."
msgstr ""

#: ../../release_notes.rst:8428
msgid "Native circuits"
msgstr ""

#: ../../release_notes.rst:8429
msgid "Algorithms commonly use parameterized circuits as input, for example the VQE, VQC or QSVM. Previously, these inputs had to be of type ``VariationalForm`` or ``FeatureMap`` which were wrapping the circuit object. Now circuits are natively supported in these algorithms, which means any individually constructed ``QuantumCircuit`` can be passed to these algorithms. In combination with the release of the circuit library which offers a wide collection of circuit families, it is now easy to construct elaborate circuits as algorithm input."
msgstr ""

#: ../../release_notes.rst:8439
msgid "Declarative JSON API"
msgstr ""

#: ../../release_notes.rst:8440
msgid "The ability of running algorithms using dictionaries as parameters as well as using the Aqua interfaces GUI has been removed."
msgstr ""

#: ../../release_notes.rst:8445
msgid "IBM Q Provider 0.7.0"
msgstr ""

#: ../../release_notes.rst:8452
msgid "A new exception, :class:`qiskit.providers.ibmq.IBMQBackendJobLimitError`, is now raised if a job could not be submitted because the limit on active jobs has been reached."
msgstr ""

#: ../../release_notes.rst:8456
msgid ":class:`qiskit.providers.ibmq.job.IBMQJob` and :class:`qiskit.providers.ibmq.managed.ManagedJobSet` each has two new methods ``update_name`` and ``update_tags``. They are used to change the name and tags of a job or a job set, respectively."
msgstr ""

#: ../../release_notes.rst:8461
msgid ":meth:`qiskit.providers.ibmq.IBMQFactory.save_account` and :meth:`qiskit.providers.ibmq.IBMQFactory.enable_account` now accept optional parameters ``hub``, ``group``, and ``project``, which allow specifying a default provider to save to disk or use, respectively."
msgstr ""

#: ../../release_notes.rst:8472
msgid "The :class:`qiskit.providers.ibmq.job.IBMQJob` methods ``creation_date`` and ``time_per_step`` now return date time information as a ``datetime`` object in local time instead of UTC. Similarly, the parameters ``start_datetime`` and ``end_datetime``, of :meth:`qiskit.providers.ibmq.IBMQBackendService.jobs` and :meth:`qiskit.providers.ibmq.IBMQBackend.jobs` can now be specified in local time."
msgstr ""

#: ../../release_notes.rst:8479
msgid "The :meth:`qiskit.providers.ibmq.job.QueueInfo.format` method now uses a custom ``datetime`` to string formatter, and the package `arrow <https://pypi.org/project/arrow/>`_ is no longer required and has been removed from the requirements list."
msgstr ""

#: ../../release_notes.rst:8490
msgid "The :meth:`~qiskit.providers.ibmq.job.IBMQJob.from_dict` and :meth:`~qiskit.providers.ibmq.job.IBMQJob.to_dict` methods of :class:`qiskit.providers.ibmq.job.IBMQJob` are deprecated and will be removed in the next release."
msgstr ""

#: ../../release_notes.rst:8501
msgid "Fixed an issue where ``nest_asyncio.apply()`` may raise an exception if there is no asyncio loop due to threading."
msgstr ""

#: ../../release_notes.rst:8507
msgid "Qiskit 0.18.3"
msgstr ""

#: ../../release_notes.rst:8510 ../../release_notes.rst:8610
msgid "Terra 0.13.0"
msgstr ""

#: ../../release_notes.rst:8559
msgid "Fixes Controller classes so that the ReduceBarrier transpilation pass is applied first. This prevents barrier instructions from preventing truncation of unused qubits if the only instruction defined on them was a barrier."
msgstr ""

#: ../../release_notes.rst:8566
msgid "Fix error in gate time unit conversion for device noise model with thermal relaxation errors and gate errors. The error probability the depolarizing error was being  calculated with gate time in microseconds, while for thermal relaxation it was being calculated in nanoseconds. This resulted in no depolarizing error being applied as the incorrect units would make the device seem to be coherence limited."
msgstr ""

#: ../../release_notes.rst:8573
msgid "Fix bug in incorrect composition of QuantumErrors when the qubits of composed instructions differ."
msgstr ""

#: ../../release_notes.rst:8576
msgid "Fix issue where the \"diagonal\" gate is checked to be unitary with too high a tolerance. This was causing diagonals generated from Numpy functions to often fail the test."
msgstr ""

#: ../../release_notes.rst:8580
msgid "Fix remove-barrier circuit optimization pass to be applied before qubit trucation. This fixes an issue where barriers inserted by the Terra transpiler across otherwise inactive qubits would prevent them from being truncated."
msgstr ""

#: ../../release_notes.rst:8592
msgid "Aqua 0.6.6"
msgstr ""

#: ../../release_notes.rst:8598
msgid "IBM Q Provider 0.6.1"
msgstr ""

#: ../../release_notes.rst:8605
msgid "Qiskit 0.18.0"
msgstr ""

#: ../../release_notes.rst:8617
msgid "The 0.13.0 release includes many big changes. Some highlights for this release are:"
msgstr ""

#: ../../release_notes.rst:8620
msgid "For the transpiler we have switched the graph library used to build the :class:`qiskit.dagcircuit.DAGCircuit` class which is the underlying data structure behind all operations to be based on `retworkx <https://pypi.org/project/retworkx/>`_ for greatly improved performance. Circuit transpilation speed in the 0.13.0 release should be significanlty faster than in previous releases."
msgstr ""

#: ../../release_notes.rst:8627
msgid "There has been a significant simplification to the style in which Pulse instructions are built. Now, ``Command`` s are deprecated and a unified set of :class:`~qiskit.pulse.instructions.Instruction` s are supported."
msgstr ""

#: ../../release_notes.rst:8631
msgid "The :mod:`qiskit.quantum_info` module includes several new functions for generating random operators (such as Cliffords and quantum channels) and for computing the diamond norm of quantum channels; upgrades to the :class:`~qiskit.quantum_info.Statevector` and :class:`~qiskit.quantum_info.DensityMatrix` classes to support computing measurement probabilities and sampling measurements; and several new classes are based on the symplectic representation of Pauli matrices. These new classes include Clifford operators (:class:`~qiskit.quantum_info.Clifford`), N-qubit matrices that are sparse in the Pauli basis (:class:`~qiskit.quantum_info.SparsePauliOp`), lists of Pauli's (:class:`~qiskit.quantum_info.PauliTable`), and lists of stabilizers (:class:`~qiskit.quantum_info.StabilizerTable`)."
msgstr ""

#: ../../release_notes.rst:8644
msgid "This release also has vastly improved documentation across Qiskit, including improved documentation for the :mod:`qiskit.circuit`, :mod:`qiskit.pulse` and :mod:`qiskit.quantum_info` modules."
msgstr ""

#: ../../release_notes.rst:8648
msgid "Additionally, the naming of gate objects and :class:`~qiskit.circuit.QuantumCircuit` methods have been updated to be more consistent. This has resulted in several classes and methods being deprecated as things move to a more consistent naming scheme."
msgstr ""

#: ../../release_notes.rst:8653
msgid "For full details on all the changes made in this release see the detailed release notes below."
msgstr ""

#: ../../release_notes.rst:8662
msgid "Added a new circuit library module :mod:`qiskit.circuit.library`. This will be a place for constructors of commonly used circuits that can be used as building blocks for larger circuits or applications."
msgstr ""

#: ../../release_notes.rst:8666
msgid "The :class:`qiskit.providers.BaseJob` class has four new methods:"
msgstr ""

#: ../../release_notes.rst:8668
msgid ":meth:`~qiskit.providers.BaseJob.done`"
msgstr ""

#: ../../release_notes.rst:8669
msgid ":meth:`~qiskit.providers.BaseJob.running`"
msgstr ""

#: ../../release_notes.rst:8670
msgid ":meth:`~qiskit.providers.BaseJob.cancelled`"
msgstr ""

#: ../../release_notes.rst:8671
msgid ":meth:`~qiskit.providers.BaseJob.in_final_state`"
msgstr ""

#: ../../release_notes.rst:8673
msgid "These methods are used to check wheter a job is in a given job status."
msgstr ""

#: ../../release_notes.rst:8675
msgid "Add ability to specify control conditioned on a qubit being in the ground state. The state of the control qubits is represented by an integer. For example::"
msgstr ""

#: ../../release_notes.rst:8686
msgid "Creates a four qubit gate where the fourth qubit gets flipped if the first qubit is in the ground state and the second and third qubits are in the excited state. If ``ctrl_state`` is ``None``, the default, control is conditioned on all control qubits being excited."
msgstr ""

#: ../../release_notes.rst:8692
#, python-format
msgid "A new jupyter widget, ``%circuit_library_info`` has been added to :mod:`qiskit.tools.jupyter`. This widget is used for visualizing details about circuits built from the circuit library. For example"
msgstr ""

#: ../../release_notes.rst:8703
msgid "A new kwarg option, ``formatted`` ,  has been added to :meth:`qiskit.circuit.QuantumCircuit.qasm` . When set to ``True`` the method will print a syntax highlighted version (using pygments) to stdout and return ``None`` (which differs from the normal behavior of returning the QASM code as a string)."
msgstr ""

#: ../../release_notes.rst:8709
msgid "A new kwarg option, ``filename`` , has been added to :meth:`qiskit.circuit.QuantumCircuit.qasm`. When set to a path the method will write the QASM code to that file. It will then continue to output as normal."
msgstr ""

#: ../../release_notes.rst:8714
msgid "A new instruction :py:class:`~qiskit.pulse.SetFrequency` which allows users to change the frequency of the :class:`~qiskit.pulse.PulseChannel`. This is done in the following way::"
msgstr ""

#: ../../release_notes.rst:8724
msgid "In this example, the frequency of all pulses before the ``SetFrequency`` command will be the default frequency and all pulses applied to drive channel zero after the ``SetFrequency`` command will be at 5.5 GHz. Users of ``SetFrequency`` should keep in mind any hardware limitations."
msgstr ""

#: ../../release_notes.rst:8729
msgid "A new method, :meth:`~qiskit.circuit.QuantumCircuit.assign_parameters` has been added to the :class:`qiskit.circuit.QuantumCircuit` class. This method accepts a parameter dictionary with both floats and Parameters objects in a single dictionary. In other words this new method allows you to bind floats, Parameters or both in a single dictionary."
msgstr ""

#: ../../release_notes.rst:8735
msgid "Also, by using the ``inplace`` kwarg it can be specified you can optionally modify the original circuit in place. By default this is set to ``False`` and a copy of the original circuit will be returned from the method."
msgstr ""

#: ../../release_notes.rst:8739
msgid "A new method :meth:`~qiskit.circuit.QuantumCircuit.num_nonlocal_gates` has been added to the :class:`qiskit.circuit.QuantumCircuit` class. This method will return the number of gates in a circuit that involve 2 or or more qubits. These gates are more costly in terms of time and error to implement."
msgstr ""

#: ../../release_notes.rst:8745
msgid "The :class:`qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.iso` for adding an :class:`~qiskit.extensions.Isometry` gate to the circuit has a new alias. You can now call :meth:`qiskit.circuit.QuantumCircuit.isometry` in addition to calling ``iso``."
msgstr ""

#: ../../release_notes.rst:8751
msgid "A ``description`` attribute has been added to the :class:`~qiskit.transpiler.CouplingMap` class for storing a short description for different coupling maps (e.g. full, grid, line, etc.)."
msgstr ""

#: ../../release_notes.rst:8755
msgid "A new method :meth:`~qiskit.dagcircuit.DAGCircuit.compose` has been added to the :class:`~qiskit.dagcircuit.DAGCircuit` class for composing two circuits via their DAGs."
msgstr ""

#: ../../release_notes.rst:8798
msgid "The mock backends in ``qiskit.test.mock`` now have a functional ``run()`` method that will return results similar to the real devices. If ``qiskit-aer`` is installed a simulation will be run with a noise model built from the device snapshot in the fake backend.  Otherwise, :class:`qiskit.providers.basicaer.QasmSimulatorPy` will be used to run an ideal simulation. Additionally, if a pulse experiment is passed to ``run`` and qiskit-aer is installed the ``PulseSimulator`` will be used to simulate the pulse schedules."
msgstr ""

#: ../../release_notes.rst:8807
msgid "The :meth:`qiskit.result.Result` method :meth:`~qiskit.result.Result.get_counts` will now return a list of all the counts available when there are multiple circuits in a job. This works when ``get_counts()`` is called with no arguments."
msgstr ""

#: ../../release_notes.rst:8812
msgid "The main consideration for this feature was for drawing all the results from multiple circuits in the same histogram. For example it is now possible to do something like:"
msgstr ""

#: ../../release_notes.rst:8833
msgid "A new kwarg, ``initial_state`` has been added to the :func:`qiskit.visualization.circuit_drawer` function and the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.draw`. When set to ``True`` the initial state will be included in circuit visualizations for all backends. For example:"
msgstr ""

#: ../../release_notes.rst:8848
msgid "It is now possible to insert a callable into a :class:`qiskit.pulse.InstructionScheduleMap` which returns a new :class:`qiskit.pulse.Schedule` when it is called with parameters. For example:"
msgstr ""

#: ../../release_notes.rst:8864
msgid "Two new gate classes, :class:`qiskit.extensions.iSwapGate` and :class:`qiskit.extensions.DCXGate`, along with their :class:`~qiskit.circuit.QuantumCircuit` methods :meth:`~qiskit.circuit.QuantumCircuit.iswap` and :meth:`~qiskit.circuit.QuantumCircuit.dcx` have been added to the standard extensions. These gates, which are locally equivalent to each other, can be used to enact particular XY interactions. A brief motivation for these gates can be found in: `arxiv.org/abs/quant-ph/0209035 <https://arxiv.org/abs/quant-ph/0209035>`_"
msgstr ""

#: ../../release_notes.rst:8874
msgid "The :class:`qiskit.providers.BaseJob` class now has a new method :meth:`~qiskit.providers.BaseJob.wait_for_final_state` that polls for the job status until the job reaches a final state (such as ``DONE`` or ``ERROR``). This method also takes an optional ``callback`` kwarg which takes a Python callable that will be called during each iteration of the poll loop."
msgstr ""

#: ../../release_notes.rst:8881
msgid "The ``search_width`` and ``search_depth`` attributes of the :class:`qiskit.transpiler.passes.LookaheadSwap` pass are now settable when initializing the pass. A larger search space can often lead to more optimized circuits, at the cost of longer run time."
msgstr ""

#: ../../release_notes.rst:8886
msgid "The number of qubits in :class:`~qiskit.providers.models.BackendConfiguration` can now be accessed via the property :py:attr:`~qiskit.providers.models.BackendConfiguration.num_qubits`. It was previously only accessible via the ``n_qubits`` attribute."
msgstr ""

#: ../../release_notes.rst:8892
msgid "Two new methods, :meth:`~qiskit.quantum_info.OneQubitEulerDecomposer.angles` and :meth:`~qiskit.quantum_info.OneQubitEulerDecomposer.angles_and_phase`, have been added to the :class:`qiskit.quantum_info.OneQubitEulerDecomposer` class. These methods will return the relevant parameters without validation, and calling the ``OneQubitEulerDecomposer`` object will perform the full synthesis with validation."
msgstr ""

#: ../../release_notes.rst:8899
msgid "An ``RR`` decomposition basis has been added to the :class:`qiskit.quantum_info.OneQubitEulerDecomposer` for decomposing an arbitrary 2x2 unitary into a two :class:`~qiskit.extensions.RGate` circuit."
msgstr ""

#: ../../release_notes.rst:8904
msgid "Adds the ability to set ``qargs`` to objects which are subclasses of the abstract ``BaseOperator`` class. This is done by calling the object ``op(qargs)`` (where ``op`` is an operator class) and will return a shallow copy of the original object with a qargs property set. When such an object is used with the :meth:`~qiskit.quantum_info.Operator.compose` or :meth:`~qiskit.quantum_info.Operator.dot` methods the internal value for qargs will be used when the ``qargs`` method kwarg is not used. This allows for subsystem composition using binary operators, for example::"
msgstr ""

#: ../../release_notes.rst:8921
msgid "Adds :class:`qiskit.quantum_info.Clifford` operator class to the `quantum_info` module. This operator is an efficient symplectic representation an N-qubit unitary operator from the Clifford group. This class includes a :meth:`~qiskit.quantum_info.Clifford.to_circuit` method for compilation into a :class:`~qiskit.QuantumCircuit` of Clifford gates with a minimal number of CX gates for up to 3-qubits. It also providers general compilation for N > 3 qubits but this method is not optimal in the number of two-qubit gates."
msgstr ""

#: ../../release_notes.rst:8930
msgid "Adds :class:`qiskit.quantum_info.SparsePauliOp` operator class. This is an efficient representaiton of an N-qubit matrix that is sparse in the Pauli basis and uses a :class:`qiskit.quantum_info.PauliTable` and vector of complex coefficients for its data structure."
msgstr ""

#: ../../release_notes.rst:8935
msgid "This class supports much of the same functionality of the :class:`qiskit.quantum_info.Operator` class so :class:`~qiskit.quantum_info.SparsePauliOp` objects can be tensored, composed, scalar multiplied, added and subtracted."
msgstr ""

#: ../../release_notes.rst:8940
msgid "Numpy arrays or :class:`~qiskit.quantum_info.Operator` objects can be converted to a :class:`~qiskit.quantum_info.SparsePauliOp` using the `:class:`~qiskit.quantum_info.SparsePauliOp.from_operator` method. :class:`~qiskit.quantum_info.SparsePauliOp` can be convered to a sparse csr_matrix or dense Numpy array using the :class:`~qiskit.quantum_info.SparsePauliOp.to_matrix` method, or to an :class:`~qiskit.quantum_info.Operator` object using the :class:`~qiskit.quantum_info.SparsePauliOp.to_operator` method."
msgstr ""

#: ../../release_notes.rst:8949
msgid "A :class:`~qiskit.quantum_info.SparsePauliOp` can be iterated over in terms of its :class:`~qiskit.quantum_info.PauliTable` components and coefficients, its coefficients and Pauli string labels using the :meth:`~qiskit.quantum_info.SparsePauliOp.label_iter` method, and the (dense or sparse) matrix components using the :meth:`~qiskit.quantum_info.SparsePauliOp.matrix_iter` method."
msgstr ""

#: ../../release_notes.rst:8956
msgid "Add :meth:`qiskit.quantum_info.diamond_norm` function for computing the diamond norm (completely-bounded trace-norm) of a quantum channel. This can be used to compute the distance between two quantum channels using ``diamond_norm(chan1 - chan2)``."
msgstr ""

#: ../../release_notes.rst:8961
msgid "A new class :class:`qiskit.quantum_info.PauliTable` has been added. This is an efficient symplectic representation of a list of N-qubit Pauli operators. Some features of this class are:"
msgstr ""

#: ../../release_notes.rst:8965
msgid ":class:`~qiskit.quantum_info.PauliTable` objects may be composed, and tensored which will return a :class:`~qiskit.quantum_info.PauliTable` object with the combination of the operation ( :meth:`~qiskit.quantum_info.PauliTable.compose`, :meth:`~qiskit.quantum_info.PauliTable.dot`, :meth:`~qiskit.quantum_info.PauliTable.expand`, :meth:`~qiskit.quantum_info.PauliTable.tensor`) between each element of  the first table, with each element of the second table."
msgstr ""

#: ../../release_notes.rst:8974
msgid "Addition of two tables acts as list concatination of the terms in each table (``+``)."
msgstr ""

#: ../../release_notes.rst:8977
msgid "Pauli tables can be sorted by lexicographic (tensor product) order or by Pauli weights (:meth:`~qiskit.quantum_info.PauliTable.sort`)."
msgstr ""

#: ../../release_notes.rst:8980
msgid "Duplicate elements can be counted and deleted (:meth:`~qiskit.quantum_info.PauliTable.unique`)."
msgstr ""

#: ../../release_notes.rst:8983
msgid "The PauliTable may be iterated over in either its native symplectic boolean array representation, as Pauli string labels (:meth:`~qiskit.quantum_info.PauliTable.label_iter`), or as dense Numpy array or sparse CSR matrices (:meth:`~qiskit.quantum_info.PauliTable.matrix_iter`)."
msgstr ""

#: ../../release_notes.rst:8989
msgid "Checking commutation between elements of the Pauli table and another Pauli (:meth:`~qiskit.quantum_info.PauliTable.commutes`) or Pauli table (:meth:`~qiskit.quantum_info.PauliTable.commutes_with_all`)"
msgstr ""

#: ../../release_notes.rst:8993
msgid "See the :class:`qiskit.quantum_info.PauliTable` class API documentation for additional details."
msgstr ""

#: ../../release_notes.rst:8996
msgid "Adds :class:`qiskit.quantum_info.StabilizerTable` class. This is a subclass of the :class:`qiskit.quantum_info.PauliTable` class which includes a boolean phase vector along with the Pauli table array. This represents a list of Stabilizer operators which are real-Pauli operators with +1 or -1 coefficient. Because the stabilizer matrices are real the ``\"Y\"`` label matrix is defined as ``[[0, 1], [-1, 0]]``. See the API documentation for additional information."
msgstr ""

#: ../../release_notes.rst:9004
msgid "Adds :func:`qiskit.quantum_info.pauli_basis` function which returns an N-qubit Pauli basis as a :class:`qiskit.quantum_info.PauliTable` object. The ordering of this basis can either be by standard lexicographic (tensor product) order, or by the number of non-identity Pauli terms (weight)."
msgstr ""

#: ../../release_notes.rst:9009
msgid "Adds :class:`qiskit.quantum_info.ScalarOp` operator class that represents a scalar multiple of an identity operator. This can be used to initialize an identity on arbitrary dimension subsystems and it will be implicitly converted to other ``BaseOperator`` subclasses (such as an :class:`qiskit.quantum_info.Operator` or :class:`qiskit.quantum_info.SuperOp`) when it is composed with, or added to, them."
msgstr ""

#: ../../release_notes.rst:9017
msgid "Example: Identity operator"
msgstr ""

#: ../../release_notes.rst:9029
msgid "A new method, :meth:`~qiskit.quantum_info.Operator.reshape`, has been added to the :class:`qiskit.quantum_innfo.Operator` class that returns a shallow copy of an operator subclass with reshaped subsystem input or output dimensions. The combined dimensions of all subsystems must be the same as the original operator or an exception will be raised."
msgstr ""

#: ../../release_notes.rst:9035
msgid "Adds :func:`qiskit.quantum_info.random_clifford` for generating a random :class:`qiskit.quantum_info.Clifford` operator."
msgstr ""

#: ../../release_notes.rst:9038
msgid "Add :func:`qiskit.quantum_info.random_quantum_channel` function for generating a random quantum channel with fixed :class:`~qiskit.quantum_info.Choi`-rank in the :class:`~qiskit.quantum_info.Stinespring` representation."
msgstr ""

#: ../../release_notes.rst:9043
msgid "Add :func:`qiskit.quantum_info.random_hermitian` for generating a random Hermitian :class:`~qiskit.quantum_info.Operator`."
msgstr ""

#: ../../release_notes.rst:9046
msgid "Add :func:`qiskit.quantum_info.random_statevector` for generating a random :class:`~qiskit.quantum_info.Statevector`."
msgstr ""

#: ../../release_notes.rst:9049
msgid "Adds :func:`qiskit.quantum_info.random_pauli_table` for generating a random :class:`qiskit.quantum_info.PauliTable`."
msgstr ""

#: ../../release_notes.rst:9052
msgid "Adds :func:`qiskit.quantum_info.random_stabilizer_table` for generating a random :class:`qiskit.quantum_info.StabilizerTable`."
msgstr ""

#: ../../release_notes.rst:9055
msgid "Add a ``num_qubits`` attribute to :class:`qiskit.quantum_info.StateVector` and :class:`qiskit.quantum_info.DensityMatrix` classes. This returns the number of qubits for N-qubit states and returns ``None`` for non-qubit states."
msgstr ""

#: ../../release_notes.rst:9059
msgid "Adds :meth:`~qiskit.quantum_info.Statevector.to_dict` and :meth:`~qiskit.quantum_info.DensityMatrix.to_dict` methods to convert :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` objects into Bra-Ket notation dictionary."
msgstr ""

#: ../../release_notes.rst:9065 ../../release_notes.rst:9088
msgid "Example"
msgstr ""

#: ../../release_notes.rst:9081
msgid "Adds :meth:`~qiskit.quantum_info.Statevector.probabilities` and :meth:`~qiskit.quantum_info.DensityMatrix.probabilities` to :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes which return an array of measurement outcome probabilities in the computational basis for the specified subsystems."
msgstr ""

#: ../../release_notes.rst:9104
msgid "Adds :meth:`~qiskit.quantum_info.Statevector.probabilities_dict` and :meth:`~qiskit.quantum_info.DensityMatrix.probabilities_dict` to :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes which return a count-style dictionary array of measurement outcome probabilities in the computational basis for the specified subsystems."
msgstr ""

#: ../../release_notes.rst:9125
msgid "Add :meth:`~qiskit.quantum_info.Statevector.sample_counts` and :meth:`~qiskit.quantum_info.Statevector.sample_memory` methods to the :class:`~qiskit.quantum_info.Statevector` and :class:`~qiskit.quantum_info.DensityMatrix` classes for sampling measurement outcomes on subsystems."
msgstr ""

#: ../../release_notes.rst:9133
msgid "Generate a counts dictionary by sampling from a statevector"
msgstr ""

#: ../../release_notes.rst:9154
msgid "Return the array of measurement outcomes for each sample"
msgstr ""

#: ../../release_notes.rst:9175
msgid "Adds a :meth:`~qiskit.quantum_info.Statevector.measure` method to the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` quantum state classes. This allows sampling a single measurement outcome from the specified subsystems and collapsing the statevector to the post-measurement computational basis state. For example"
msgstr ""

#: ../../release_notes.rst:9198
msgid "Adds a :meth:`~qiskit.quantum_info.Statevector.reset` method to the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` quantum state classes. This allows reseting some or all subsystems to the :math:`|0\\rangle` state. For example"
msgstr ""

#: ../../release_notes.rst:9220
msgid "A new visualization function :func:`qiskit.visualization.visualize_transition` for visualizing single qubit gate transitions has been added. It takes in a single qubit circuit and returns an animation of qubit state transitions on a Bloch sphere. To use this function you must have installed the dependencies for and configured globally a matplotlib animtion writer. You can refer to the `matplotlib documentation <https://matplotlib.org/api/animation_api.html#writer-classes>`_ for more details on this. However, in the default case simply ensuring that `FFmpeg <https://www.ffmpeg.org/>`_ is installed is sufficient to use this function."
msgstr ""

#: ../../release_notes.rst:9232
msgid "It supports circuits with the following gates:"
msgstr ""

#: ../../release_notes.rst:9234
msgid ":class:`~qiskit.extensions.HGate`"
msgstr ""

#: ../../release_notes.rst:9235
msgid ":class:`~qiskit.extensions.XGate`"
msgstr ""

#: ../../release_notes.rst:9236
msgid ":class:`~qiskit.extensions.YGate`"
msgstr ""

#: ../../release_notes.rst:9237
msgid ":class:`~qiskit.extensions.ZGate`"
msgstr ""

#: ../../release_notes.rst:9238
msgid ":class:`~qiskit.extensions.RXGate`"
msgstr ""

#: ../../release_notes.rst:9239
msgid ":class:`~qiskit.extensions.RYGate`"
msgstr ""

#: ../../release_notes.rst:9240
msgid ":class:`~qiskit.extensions.RZGate`"
msgstr ""

#: ../../release_notes.rst:9241
msgid ":class:`~qiskit.extensions.SGate`"
msgstr ""

#: ../../release_notes.rst:9242
msgid ":class:`~qiskit.extensions.SdgGate`"
msgstr ""

#: ../../release_notes.rst:9243
msgid ":class:`~qiskit.extensions.TGate`"
msgstr ""

#: ../../release_notes.rst:9244
msgid ":class:`~qiskit.extensions.TdgGate`"
msgstr ""

#: ../../release_notes.rst:9245
msgid ":class:`~qiskit.extensions.U1Gate`"
msgstr ""

#: ../../release_notes.rst:9262
msgid ":func:`~qiskit.execute.execute` has a new kwarg ``schedule_circuit``. By setting ``schedule_circuit=True`` this enables scheduling of the circuit into a :class:`~qiskit.pulse.Schedule`. This allows users building :class:`qiskit.circuit.QuantumCircuit` objects to make use of custom scheduler  methods, such as the ``as_late_as_possible`` and ``as_soon_as_possible`` methods. For example::"
msgstr ""

#: ../../release_notes.rst:9273
msgid "A new environment variable ``QISKIT_SUPPRESS_PACKAGING_WARNINGS`` can be set to ``Y`` or ``y`` which will suppress the warnings about ``qiskit-aer`` and ``qiskit-ibmq-provider`` not being installed at import time. This is useful for users who are only running qiskit-terra (or just not qiskit-aer and/or qiskit-ibmq-provider) and the warnings are not an indication of a potential packaging problem. You can set the environment variable to ``N`` or ``n`` to ensure that warnings are always enabled even if the user config file is set to disable them."
msgstr ""

#: ../../release_notes.rst:9282
msgid "A new user config file option, ``suppress_packaging_warnings`` has been added. When set to ``true`` in your user config file like::"
msgstr ""

#: ../../release_notes.rst:9288
msgid "it will suppress the warnings about  ``qiskit-aer`` and ``qiskit-ibmq-provider`` not being installed at import time. This is useful for users who are only running qiskit-terra (or just not qiskit-aer and/or qiskit-ibmq-provider) and the warnings are not an indication of a potential packaging problem. If the user config file is set to disable the warnings this can be overriden by setting the ``QISKIT_SUPPRESS_PACKAGING_WARNINGS`` to ``N`` or ``n``"
msgstr ""

#: ../../release_notes.rst:9296
msgid ":func:`qiskit.compiler.transpile()` has two new kwargs, ``layout_method`` and ``routing_method``. These allow you to select a particular method for placement and routing of circuits on constrained architectures. For, example::"
msgstr ""

#: ../../release_notes.rst:9304
msgid "will run :class:`~qiskit.transpiler.passes.DenseLayout` layout pass and :class:`~qiskit.transpiler.passes.LookaheadSwap` routing pass."
msgstr ""

#: ../../release_notes.rst:9307
msgid "There has been a significant simplification to the style in which Pulse instructions are built."
msgstr ""

#: ../../release_notes.rst:9310
msgid "With the previous style, ``Command`` s were called with channels to make an :py:class:`~qiskit.pulse.instructions.Instruction`. The usage of both commands and instructions was a point of confusion. This was the previous style::"
msgstr ""

#: ../../release_notes.rst:9320
msgid "or, equivalently (though less used)::"
msgstr ""

#: ../../release_notes.rst:9328
msgid "Now, rather than build a command *and* an instruction, each command has been migrated into an instruction::"
msgstr ""

#: ../../release_notes.rst:9337
msgid "There is now a :py:class:`~qiskit.pulse.instructions.Play` instruction which takes a description of a pulse envelope and a channel. There is a new :py:class:`~qiskit.pulse.pulse_lib.Pulse` class in the :mod:`~qiskit.pulse.pulse_lib` from which the pulse envelope description should subclass."
msgstr ""

#: ../../release_notes.rst:9354
msgid "The :class:`qiskit.dagcircuit.DAGNode` method ``pop`` which was deprecated in the 0.9.0 release has been removed. If you were using this method you can leverage Python's ``del`` statement or ``delattr()`` function to perform the same task."
msgstr ""

#: ../../release_notes.rst:9359
#, python-format
msgid "A new optional visualization requirement, `pygments <https://pygments.org/>`_ , has been added. It is used for providing syntax highlighting of OpenQASM 2.0 code in Jupyter widgets and optionally for the :meth:`qiskit.circuit.QuantumCircuit.qasm` method. It must be installed (either with ``pip install pygments`` or ``pip install qiskit-terra[visualization]``) prior to using the ``%circuit_library_info`` widget in :mod:`qiskit.tools.jupyter` or the ``formatted`` kwarg on the :meth:`~qiskit.circuit.QuantumCircuit.qasm` method."
msgstr ""

#: ../../release_notes.rst:9369
msgid "The pulse ``buffer`` option found in :class:`qiskit.pulse.Channel` and :class:`qiskit.pulse.Schedule` was deprecated in Terra 0.11.0 and has now been removed. To add a delay on a channel or in a schedule, specify it explicitly in your Schedule with a Delay::"
msgstr ""

#: ../../release_notes.rst:9377
msgid "``PulseChannelSpec``, which was deprecated in Terra 0.11.0, has now been removed. Use BackendConfiguration instead::"
msgstr ""

#: ../../release_notes.rst:9384
msgid "or, simply reference the channel directly, such as ``DriveChannel(index)``."
msgstr ""

#: ../../release_notes.rst:9386
msgid "An import path was deprecated in Terra 0.10.0 and has now been removed: for ``PulseChannel``, ``DriveChannel``, ``MeasureChannel``, and ``ControlChannel``, use ``from qiskit.pulse.channels import X`` in place of ``from qiskit.pulse.channels.pulse_channels import X``."
msgstr ""

#: ../../release_notes.rst:9391
msgid "The pass :class:`qiskit.transpiler.passes.CSPLayout` (which was introduced in the 0.11.0 release) has been added to the preset pass manager for optimization levels 2 and 3. For level 2, there is a call limit of 1,000 and a timeout of 10 seconds. For level 3, the call limit is 10,000 and the timeout is 1 minute."
msgstr ""

#: ../../release_notes.rst:9397
msgid "Now that the pass is included in the preset pass managers the `python-constraint <https://pypi.org/project/python-constraint/>`_ package is not longer an optional dependency and has been added to the requirements list."
msgstr ""

#: ../../release_notes.rst:9402
msgid "The ``TranspileConfig`` class which was previously used to set run time configuration for a :class:`qiskit.transpiler.PassManager` has been removed and replaced by a new class :class:`qiskit.transpile.PassManagerConfig`. This new class has been structured to include only the information needed to construct a :class:`~qiskit.transpiler.PassManager`. The attributes of this class are:"
msgstr ""

#: ../../release_notes.rst:9409 ../../release_notes.rst:9475
msgid "``initial_layout``"
msgstr ""

#: ../../release_notes.rst:9410 ../../release_notes.rst:9471
msgid "``basis_gates``"
msgstr ""

#: ../../release_notes.rst:9411 ../../release_notes.rst:9472
msgid "``coupling_map``"
msgstr ""

#: ../../release_notes.rst:9412 ../../release_notes.rst:9474
msgid "``backend_properties``"
msgstr ""

#: ../../release_notes.rst:9413 ../../release_notes.rst:9473
msgid "``seed_transpiler``"
msgstr ""

#: ../../release_notes.rst:9415
msgid "The function ``transpile_circuit`` in :mod:`qiskit.transpiler` has been removed. To transpile a circuit with a custom :class:`~qiskit.transpiler.PassManager` now you should use the :meth:`~qiskit.transpiler.PassManager.run` method of the :class:~qiskit.transpiler.PassManager` object."
msgstr ""

#: ../../release_notes.rst:9421
msgid "The :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.draw` and :func:`qiskit.visualization.circuit_drawer` function will no longer include the initial state included in visualizations by default. If you would like to retain the initial state in the output visualization you need to set the ``initial_state`` kwarg to ``True``. For example, running:"
msgstr ""

#: ../../release_notes.rst:9436
msgid "This no longer includes the initial state. If you'd like to retain it you can run:"
msgstr ""

#: ../../release_notes.rst:9447
msgid ":func:`qiskit.compiler.transpile` (and :func:`qiskit.execute.execute`, which uses ``transpile`` internally) will now raise an error when the ``pass_manager`` kwarg is set and a value is set for other kwargs that are already set in an instantiated :class:`~qiskit.transpiler.PassManager` object. Previously, these conflicting kwargs would just be silently ignored and the values in the ``PassManager`` instance would be used. For example::"
msgstr ""

#: ../../release_notes.rst:9466
msgid "will now raise an error while prior to this release the value in ``pm`` would just silently be used and the value for the ``optimization_level`` kwarg would be ignored. The ``transpile`` kwargs this applies to are:"
msgstr ""

#: ../../release_notes.rst:9470
msgid "``optimization_level``"
msgstr ""

#: ../../release_notes.rst:9476
msgid "``layout_method``"
msgstr ""

#: ../../release_notes.rst:9477
msgid "``routing_method``"
msgstr ""

#: ../../release_notes.rst:9478
msgid "``backend``"
msgstr ""

#: ../../release_notes.rst:9480
msgid "The :class:`~qiskit.quantum_info.Operator`, :class:`~qiskit.quantum_info.Clifford`, :class:`~qiskit.quantum_info.SparsePauliOp`, :class:`~qiskit.quantum_info.PauliTable`, :class:`~qiskit.quantum_info.StabilizerTable`, operator classes have an added ``call`` method that allows them to assign a `qargs` to the operator for use with the :meth:`~qiskit.quantum_info.Operator.compose`, :meth:`~qiskit.quantum_info.Operator.dot`, :meth:`~qiskit.quantum_info.Statevector.evolve`,``+``, and ``-`` operations."
msgstr ""

#: ../../release_notes.rst:9490
msgid "The addition method of the :class:`qiskit.quantum_info.Operator`, class now accepts a ``qarg`` kwarg to allow adding a smaller operator to a larger one assuming identities on the other subsystems (same as for ``qargs`` on :meth:`~qiskit.quantum_info.Operator.compose` and :meth:`~qiskit.quantum_info.Operator.dot` methods). This allows subsystem addition using the call method as with composition. This support is added to all BaseOperator subclasses (:class:`~qiskit.quantum_info.ScalarOp`, :class:`~qiskit.quantum_info.Operator`, :class:`~qiskit.quantum_info.QuantumChannel`)."
msgstr ""

#: ../../release_notes.rst:9516
msgid "The ``BaseOperator`` class has been updated so that addition, subtraction and scalar multiplication are no longer abstract methods. This means that they are no longer required to be implemented in subclasses if they are not supported. The base class will raise a ``NotImplementedError`` when the methods are not defined."
msgstr ""

#: ../../release_notes.rst:9522
msgid "The :func:`qiskit.quantum_info.random_density_matrix` function will now return a random :class:`~qiskit.quantum_info.DensityMatrix` object. In previous releases it returned a numpy array."
msgstr ""

#: ../../release_notes.rst:9526
msgid "The :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes no longer copy the input array if it is already the correct dtype."
msgstr ""

#: ../../release_notes.rst:9530
msgid "`fastjsonschema <https://pypi.org/project/fastjsonschema/>`_ is added as a dependency. This is used for much faster validation of qobj dictionaries against the JSON schema when the ``to_dict()`` method is called on qobj objects with the ``validate`` keyword argument set to ``True``."
msgstr ""

#: ../../release_notes.rst:9535
msgid "The qobj construction classes in :mod:`qiskit.qobj` will no longer validate against the qobj jsonschema by default. These include the following classes:"
msgstr ""

#: ../../release_notes.rst:9538 ../../release_notes.rst:9550
msgid ":class:`qiskit.qobj.QasmQobjInstruction`"
msgstr ""

#: ../../release_notes.rst:9539
msgid ":class:`qiskit.qobj.QobjExperimentHeader`"
msgstr ""

#: ../../release_notes.rst:9540 ../../release_notes.rst:9551
msgid ":class:`qiskit.qobj.QasmQobjExperimentConfig`"
msgstr ""

#: ../../release_notes.rst:9541 ../../release_notes.rst:9552
msgid ":class:`qiskit.qobj.QasmQobjExperiment`"
msgstr ""

#: ../../release_notes.rst:9542 ../../release_notes.rst:9553
msgid ":class:`qiskit.qobj.QasmQobjConfig`"
msgstr ""

#: ../../release_notes.rst:9543
msgid ":class:`qiskit.qobj.QobjHeader`"
msgstr ""

#: ../../release_notes.rst:9544
msgid ":class:`qiskit.qobj.PulseQobjInstruction`"
msgstr ""

#: ../../release_notes.rst:9545
msgid ":class:`qiskit.qobj.PulseQobjExperimentConfig`"
msgstr ""

#: ../../release_notes.rst:9546
msgid ":class:`qiskit.qobj.PulseQobjExperiment`"
msgstr ""

#: ../../release_notes.rst:9547
msgid ":class:`qiskit.qobj.PulseQobjConfig`"
msgstr ""

#: ../../release_notes.rst:9548
msgid ":class:`qiskit.qobj.QobjMeasurementOption`"
msgstr ""

#: ../../release_notes.rst:9549
msgid ":class:`qiskit.qobj.PulseLibraryItem`"
msgstr ""

#: ../../release_notes.rst:9554
msgid ":class:`qiskit.qobj.QasmQobj`"
msgstr ""

#: ../../release_notes.rst:9555
msgid ":class:`qiskit.qobj.PulseQobj`"
msgstr ""

#: ../../release_notes.rst:9557
msgid "If you were relying on this validation or would like to validate them against the qobj schema this can be done by setting the ``validate`` kwarg to ``True`` on :meth:`~qiskit.qobj.QasmQobj.to_dict` method from either of the top level Qobj classes :class:`~qiskit.qobj.QasmQobj` or :class:`~qiskit.qobj.PulseQobj`. For example:"
msgstr ""

#: ../../release_notes.rst:9583
msgid "which will validate the output dictionary against the Qobj jsonschema."
msgstr ""

#: ../../release_notes.rst:9585
msgid "The output dictionary from :meth:`qiskit.qobj.QasmQobj.to_dict` and :meth:`qiskit.qobj.PulseQobj.to_dict` is no longer in a format for direct json serialization as expected by IBMQ's API. These Qobj objects are the current format we use for passing experiments to providers/backends and while having a dictionary format that could just be passed to the IBMQ API directly was moderately useful for ``qiskit-ibmq-provider``, it made things more difficult for other providers. Especially for providers that wrap local simulators. Moving forward the definitions of what is passed between providers and the IBMQ API request format will be further decoupled (in a backwards compatible manner) which should ease the burden of writing providers and backends."
msgstr ""

#: ../../release_notes.rst:9597
msgid "In practice, the only functional difference between the output of these methods now and previous releases is that complex numbers are represented with the ``complex`` type and numpy arrays are not silently converted to list anymore. If you were previously calling ``json.dumps()`` directly on the output of ``to_dict()`` after this release a custom json encoder will be needed to handle these cases. For example::"
msgstr ""

#: ../../release_notes.rst:9640
msgid "will generate a json string in the same exact manner that ``json.dumps(my_qasm.to_dict())`` did in previous releases."
msgstr ""

#: ../../release_notes.rst:9643
msgid "``CmdDef`` has been deprecated since Terra 0.11.0 and has been removed. Please continue to use :py:class:`~qiskit.pulse.InstructionScheduleMap` instead."
msgstr ""

#: ../../release_notes.rst:9647
msgid "The methods ``cmds`` and ``cmd_qubits`` in :py:class:`~qiskit.pulse.InstructionScheduleMap` have been deprecated since Terra 0.11.0 and have been removed. Please use ``instructions`` and ``qubits_with_instruction`` instead."
msgstr ""

#: ../../release_notes.rst:9652
msgid "PulseDefaults have reported ``qubit_freq_est`` and ``meas_freq_est`` in Hz rather than GHz since Terra release 0.11.0. A warning which notified of this change has been removed."
msgstr ""

#: ../../release_notes.rst:9656
msgid "The previously deprecated (in the 0.11.0 release) support for passsing in :class:`qiskit.circuit.Instruction` parameters of types ``sympy.Basic``, ``sympy.Expr``, ``qiskit.qasm.node.node.Node`` (QASM AST node) and ``sympy.Matrix`` has been removed. The supported types for instruction parameters are:"
msgstr ""

#: ../../release_notes.rst:9662 ../../release_notes.rst:11495
msgid "``int``"
msgstr ""

#: ../../release_notes.rst:9663 ../../release_notes.rst:11496
msgid "``float``"
msgstr ""

#: ../../release_notes.rst:9664 ../../release_notes.rst:11497
msgid "``complex``"
msgstr ""

#: ../../release_notes.rst:9665 ../../release_notes.rst:11498
msgid "``str``"
msgstr ""

#: ../../release_notes.rst:9666
msgid "``list``"
msgstr ""

#: ../../release_notes.rst:9667 ../../release_notes.rst:11499
msgid "``np.ndarray``"
msgstr ""

#: ../../release_notes.rst:9668
msgid ":class:`qiskit.circuit.ParameterExpression`"
msgstr ""

#: ../../release_notes.rst:9670
msgid "The following properties of :py:class:`~qiskit.providers.models.BackendConfiguration`:"
msgstr ""

#: ../../release_notes.rst:9673
msgid "``dt``"
msgstr ""

#: ../../release_notes.rst:9674
msgid "``dtm``"
msgstr ""

#: ../../release_notes.rst:9675
msgid "``rep_time``"
msgstr ""

#: ../../release_notes.rst:9677
msgid "all have units of seconds. Prior to release 0.11.0, ``dt`` and ``dtm`` had units of nanoseconds. Prior to release 0.12.0, ``rep_time`` had units of microseconds. The warnings alerting users of these changes have now been removed from ``BackendConfiguration``."
msgstr ""

#: ../../release_notes.rst:9682
msgid "A new requirement has been added to the requirements list, `retworkx <https://pypi.org/project/retworkx/>`_. It is an Apache 2.0 licensed graph library that has a similar API to networkx and is being used to significantly speed up the :class:`qiskit.dagcircuit.DAGCircuit` operations as part of the transpiler. There are binaries published on PyPI for all the platforms supported by Qiskit Terra but if you're using a platform where there aren't precompiled binaries published refer to the `retworkx documentation <https://retworkx.readthedocs.io/en/stable/README.html#installing-retworkx>`_ for instructions on pip installing from sdist."
msgstr ""

#: ../../release_notes.rst:9693
msgid "If you encounter any issues with the transpiler or DAGCircuit class as part of the transition you can switch back to the previous networkx implementation by setting the environment variable ``USE_RETWORKX`` to ``N``. This option will be removed in the 0.14.0 release."
msgstr ""

#: ../../release_notes.rst:9704
msgid "Passing in the data to the constructor for :class:`qiskit.dagcircuit.DAGNode` as a dictionary arg ``data_dict`` is deprecated and will be removed in a future release. Instead you should now pass the fields in as kwargs to the constructor. For example the previous behavior of::"
msgstr ""

#: ../../release_notes.rst:9718
msgid "should now be::"
msgstr ""

#: ../../release_notes.rst:9724
msgid "The naming of gate objects and methods have been updated to be more consistent. The following changes have been made:"
msgstr ""

#: ../../release_notes.rst:9727
msgid "The Pauli gates all have one uppercase letter only (``I``, ``X``, ``Y``, ``Z``)"
msgstr ""

#: ../../release_notes.rst:9729
msgid "The parameterized Pauli gates (i.e. rotations) prepend the uppercase letter ``R`` (``RX``, ``RY``, ``RZ``)"
msgstr ""

#: ../../release_notes.rst:9731
msgid "A controlled version prepends the uppercase letter ``C`` (``CX``, ``CRX``, ``CCX``)"
msgstr ""

#: ../../release_notes.rst:9733
msgid "Gates are named according to their action, not their alternative names (``CCX``, not ``Toffoli``)"
msgstr ""

#: ../../release_notes.rst:9736
msgid "The old names have been deprecated and will be removed in a future release. This is a list of the changes showing the old and new class, name attribute, and methods. If a new column is blank then there is no change for that."
msgstr ""

#: ../../release_notes.rst:9740
msgid "Gate Name Changes"
msgstr ""

#: ../../release_notes.rst:9743
msgid "Old Class"
msgstr ""

#: ../../release_notes.rst:9744
msgid "New Class"
msgstr ""

#: ../../release_notes.rst:9745
msgid "Old Name Attribute"
msgstr ""

#: ../../release_notes.rst:9746
msgid "New Name Attribute"
msgstr ""

#: ../../release_notes.rst:9747
msgid "Old :class:`qiskit.circuit.QuantumCircuit` method"
msgstr ""

#: ../../release_notes.rst:9748
msgid "New :class:`qiskit.circuit.QuantumCircuit` method"
msgstr ""

#: ../../release_notes.rst:9749
msgid "``ToffoliGate``"
msgstr ""

#: ../../release_notes.rst:9750
msgid ":class:`~qiskit.extensions.CCXGate`"
msgstr ""

#: ../../release_notes.rst:9751
msgid "``ccx``"
msgstr ""

#: ../../release_notes.rst:9753
msgid ":meth:`~qiskit.circuit.QuantumCircuit.ccx` and :meth:`~qiskit.circuit.QuantumCircuit.toffoli`"
msgstr ""

#: ../../release_notes.rst:9756
msgid "``CrxGate``"
msgstr ""

#: ../../release_notes.rst:9757
msgid ":class:`~qiskit.extensions.CRXGate`"
msgstr ""

#: ../../release_notes.rst:9758
msgid "``crx``"
msgstr ""

#: ../../release_notes.rst:9760
msgid ":meth:`~qiskit.circuit.QuantumCircuit.crx`"
msgstr ""

#: ../../release_notes.rst:9762
msgid "``CryGate``"
msgstr ""

#: ../../release_notes.rst:9763
msgid ":class:`~qiskit.extensions.CRYGate`"
msgstr ""

#: ../../release_notes.rst:9764
msgid "``cry``"
msgstr ""

#: ../../release_notes.rst:9766
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cry`"
msgstr ""

#: ../../release_notes.rst:9768
msgid "``CrzGate``"
msgstr ""

#: ../../release_notes.rst:9769
msgid ":class:`~qiskit.extensions.CRZGate`"
msgstr ""

#: ../../release_notes.rst:9770
msgid "``crz``"
msgstr ""

#: ../../release_notes.rst:9772
msgid ":meth:`~qiskit.circuit.QuantumCircuit.crz`"
msgstr ""

#: ../../release_notes.rst:9774
msgid "``FredkinGate``"
msgstr ""

#: ../../release_notes.rst:9775
msgid ":class:`~qiskit.extensions.CSwapGate`"
msgstr ""

#: ../../release_notes.rst:9776
msgid "``cswap``"
msgstr ""

#: ../../release_notes.rst:9778
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cswap` and :meth:`~qiskit.circuit.QuantumCircuit.fredkin`"
msgstr ""

#: ../../release_notes.rst:9781
msgid "``Cu1Gate``"
msgstr ""

#: ../../release_notes.rst:9782
msgid ":class:`~qiskit.extensions.CU1Gate`"
msgstr ""

#: ../../release_notes.rst:9783
msgid "``cu1``"
msgstr ""

#: ../../release_notes.rst:9785
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cu1`"
msgstr ""

#: ../../release_notes.rst:9787
msgid "``Cu3Gate``"
msgstr ""

#: ../../release_notes.rst:9788
msgid ":class:`~qiskit.extensions.CU3Gate`"
msgstr ""

#: ../../release_notes.rst:9789
msgid "``cu3``"
msgstr ""

#: ../../release_notes.rst:9791
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cu3`"
msgstr ""

#: ../../release_notes.rst:9793
msgid "``CnotGate``"
msgstr ""

#: ../../release_notes.rst:9794
msgid ":class:`~qiskit.extensions.CXGate`"
msgstr ""

#: ../../release_notes.rst:9795
msgid "``cx``"
msgstr ""

#: ../../release_notes.rst:9797
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cx` and :meth:`~qiskit.circuit.QuantumCircuit.cnot`"
msgstr ""

#: ../../release_notes.rst:9800
msgid "``CyGate``"
msgstr ""

#: ../../release_notes.rst:9801
msgid ":class:`~qiskit.extensions.CYGate`"
msgstr ""

#: ../../release_notes.rst:9802
msgid "``cy``"
msgstr ""

#: ../../release_notes.rst:9804
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cy`"
msgstr ""

#: ../../release_notes.rst:9806
msgid "``CzGate``"
msgstr ""

#: ../../release_notes.rst:9807
msgid ":class:`~qiskit.extensions.CZGate`"
msgstr ""

#: ../../release_notes.rst:9808
msgid "``cz``"
msgstr ""

#: ../../release_notes.rst:9810
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cz`"
msgstr ""

#: ../../release_notes.rst:9812
msgid "``DiagGate``"
msgstr ""

#: ../../release_notes.rst:9813
msgid ":class:`~qiskit.extensions.DiagonalGate`"
msgstr ""

#: ../../release_notes.rst:9814
msgid "``diag``"
msgstr ""

#: ../../release_notes.rst:9815
msgid "``diagonal``"
msgstr ""

#: ../../release_notes.rst:9816
msgid "``diag_gate``"
msgstr ""

#: ../../release_notes.rst:9817
msgid ":meth:`~qiskit.circuit.QuantumCircuit.diagonal`"
msgstr ""

#: ../../release_notes.rst:9818
msgid "``IdGate``"
msgstr ""

#: ../../release_notes.rst:9819
msgid ":class:`~qiskit.extensions.IGate`"
msgstr ""

#: ../../release_notes.rst:9820
msgid "``id``"
msgstr ""

#: ../../release_notes.rst:9822
msgid "``iden``"
msgstr ""

#: ../../release_notes.rst:9823
msgid ":meth:`~qiskit.circuit.QuantumCircuit.i` and :meth:`~qiskit.circuit.QuantumCircuit.id`"
msgstr ""

#: ../../release_notes.rst:9825
msgid ":class:`~qiskit.extensions.Isometry`"
msgstr ""

#: ../../release_notes.rst:9827
msgid "``iso``"
msgstr ""

#: ../../release_notes.rst:9828
msgid "``isometry``"
msgstr ""

#: ../../release_notes.rst:9829
msgid ":meth:`~qiskit.circuit.QuantumCircuit.iso`"
msgstr ""

#: ../../release_notes.rst:9830
msgid ":meth:`~qiskit.circuit.QuantumCircuit.isometry` and :meth:`~qiskit.circuit.QuantumCircuit.iso`"
msgstr ""

#: ../../release_notes.rst:9832
msgid "``UCG``"
msgstr ""

#: ../../release_notes.rst:9833
msgid ":class:`~qiskit.extensions.UCGate`"
msgstr ""

#: ../../release_notes.rst:9834
msgid "``multiplexer``"
msgstr ""

#: ../../release_notes.rst:9836
msgid "``ucg``"
msgstr ""

#: ../../release_notes.rst:9837
msgid ":meth:`~qiskit.circuit.QuantumCircuit.uc`"
msgstr ""

#: ../../release_notes.rst:9838
msgid "``UCRot``"
msgstr ""

#: ../../release_notes.rst:9839
msgid ":class:`~qiskit.extensions.UCPauliRotGate`"
msgstr ""

#: ../../release_notes.rst:9844
msgid "``UCX``"
msgstr ""

#: ../../release_notes.rst:9845
msgid ":class:`~qiskit.extensions.UCRXGate`"
msgstr ""

#: ../../release_notes.rst:9846
msgid "``ucrotX``"
msgstr ""

#: ../../release_notes.rst:9847
msgid "``ucrx``"
msgstr ""

#: ../../release_notes.rst:9848
msgid "``ucx``"
msgstr ""

#: ../../release_notes.rst:9849
msgid ":meth:`~qiskit.circuit.QuantumCircuit.ucrx`"
msgstr ""

#: ../../release_notes.rst:9850
msgid "``UCY``"
msgstr ""

#: ../../release_notes.rst:9851
msgid ":class:`~qiskit.extensions.UCRYGate`"
msgstr ""

#: ../../release_notes.rst:9852
msgid "``ucroty``"
msgstr ""

#: ../../release_notes.rst:9853
msgid "``ucry``"
msgstr ""

#: ../../release_notes.rst:9854
msgid "``ucy``"
msgstr ""

#: ../../release_notes.rst:9855
msgid ":meth:`~qiskit.circuit.QuantumCircuit.ucry`"
msgstr ""

#: ../../release_notes.rst:9856
msgid "``UCZ``"
msgstr ""

#: ../../release_notes.rst:9857
msgid ":class:`~qiskit.extensions.UCRZGate`"
msgstr ""

#: ../../release_notes.rst:9858
msgid "``ucrotz``"
msgstr ""

#: ../../release_notes.rst:9859
msgid "``ucrz``"
msgstr ""

#: ../../release_notes.rst:9860
msgid "``ucz``"
msgstr ""

#: ../../release_notes.rst:9861
msgid ":meth:`~qiskit.circuit.QuantumCircuit.ucrz`"
msgstr ""

#: ../../release_notes.rst:9863
msgid "The kwarg ``period`` for the function :func:`~qiskit.pulse.pulse_lib.square`, :func:`~qiskit.pulse.pulse_lib.sawtooth`, and :func:`~qiskit.pulse.pulse_lib.triangle` in :mod:`qiskit.pulse.pulse_lib` is now deprecated and will be removed in a future release. Instead you should now use the ``freq`` kwarg to set the frequency."
msgstr ""

#: ../../release_notes.rst:9871
msgid "The ``DAGCircuit.compose_back()`` and ``DAGCircuit.extend_back()`` methods are deprecated and will be removed in a future release. Instead you should use the :meth:`qiskit.dagcircuit.DAGCircuit.compose` method, which is a more general and more flexible method that provides the same functionality."
msgstr ""

#: ../../release_notes.rst:9876
msgid "The ``callback`` kwarg of the :class:`qiskit.transpiler.PassManager` class's constructor has been deprecated and will be removed in a future release. Instead of setting it at the object level during creation it should now be set as a kwarg parameter on the :meth:`qiskit.transpiler.PassManager.run` method."
msgstr ""

#: ../../release_notes.rst:9882
msgid "The ``n_qubits`` and ``numberofqubits`` keywords are deprecated throughout Terra and replaced by ``num_qubits``. The old names will be removed in a future release. The objects affected by this change are listed below:"
msgstr ""

#: ../../release_notes.rst:9886
msgid "New Methods"
msgstr ""

#: ../../release_notes.rst:9890
msgid "Old Method"
msgstr ""

#: ../../release_notes.rst:9891
msgid "New Method"
msgstr ""

#: ../../release_notes.rst:9894
msgid ":meth:`~qiskit.circuit.QuantumCircuit.num_qubits`"
msgstr ""

#: ../../release_notes.rst:9897
msgid ":meth:`~qiskit.quantum_info.Pauli.num_qubits`"
msgstr ""

#: ../../release_notes.rst:9899
msgid "New arguments"
msgstr ""

#: ../../release_notes.rst:9905
msgid ":func:`~qiskit.circuit.random.random_circuit`"
msgstr ""

#: ../../release_notes.rst:9908
msgid ":class:`~qiskit.extensions.MSGate`"
msgstr ""

#: ../../release_notes.rst:9909
msgid "``n_qubit``"
msgstr ""

#: ../../release_notes.rst:9912
msgid "The function ``qiskit.quantum_info.synthesis.euler_angles_1q`` is now deprecated. It has been superseded by the :class:`qiskit.quantum_info.OneQubitEulerDecomposer` class which provides the same functionality through::"
msgstr ""

#: ../../release_notes.rst:9919
msgid "The ``pass_manager`` kwarg for the :func:`qiskit.compiler.transpile` has been deprecated and will be removed in a future release. Moving forward the preferred way to transpile a circuit with a custom :class:`~qiskit.transpiler.PassManager` object is to use the :meth:`~qiskit.transpiler.PassManager.run` method of the ``PassManager`` object."
msgstr ""

#: ../../release_notes.rst:9926
msgid "The :func:`qiskit.quantum_info.random_state` function has been deprecated and will be removed in a future release. Instead you should use the :func:`qiskit.quantum_info.random_statevector` function."
msgstr ""

#: ../../release_notes.rst:9930
msgid "The ``add``, ``subtract``, and ``multiply`` methods of the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes are deprecated and will be removed in a future release. Instead you shoulde use ``+``, ``-``, ``*`` binary operators instead."
msgstr ""

#: ../../release_notes.rst:9936
msgid "Deprecates :meth:`qiskit.quantum_info.Statevector.to_counts`, :meth:`qiskit.quantum_info.DensityMatrix.to_counts`, and :func:`qiskit.quantum_info.counts.state_to_counts`. These functions are superseded by the class methods :meth:`qiskit.quantum_info.Statevector.probabilities_dict` and :meth:`qiskit.quantum_info.DensityMatrix.probabilities_dict`."
msgstr ""

#: ../../release_notes.rst:9943
msgid ":py:class:`~qiskit.pulse.pulse_lib.SamplePulse` and :py:class:`~qiskit.pulse.pulse_lib.ParametricPulse` s (e.g. ``Gaussian``) now subclass from :py:class:`~qiskit.pulse.pulse_lib.Pulse` and have been moved to the :mod:`qiskit.pulse.pulse_lib`. The previous path via ``pulse.commands`` is deprecated and will be removed in a future release."
msgstr ""

#: ../../release_notes.rst:9949
msgid "``DelayInstruction`` has been deprecated and replaced by :py:class:`~qiskit.pulse.instruction.Delay`. This new instruction has been taken over the previous ``Command`` ``Delay``. The migration pattern is::"
msgstr ""

#: ../../release_notes.rst:9957
msgid "Until the deprecation period is over, the previous ``Delay`` syntax of calling a command on a channel will also be supported::"
msgstr ""

#: ../../release_notes.rst:9962
msgid "The new ``Delay`` instruction does not support a ``command`` attribute."
msgstr ""

#: ../../release_notes.rst:9964
msgid "``FrameChange`` and ``FrameChangeInstruction`` have been deprecated and replaced by :py:class:`~qiskit.pulse.instructions.ShiftPhase`. The changes are::"
msgstr ""

#: ../../release_notes.rst:9972
msgid "Until the deprecation period is over, the previous FrameChange syntax of calling a command on a channel will be supported::"
msgstr ""

#: ../../release_notes.rst:9977
msgid "The ``call`` method of :py:class:`~qiskit.pulse.pulse_lib.SamplePulse` and :py:class:`~qiskit.pulse.pulse_lib.ParametricPulse` s have been deprecated. The migration is as follows::"
msgstr ""

#: ../../release_notes.rst:9983
msgid "``AcquireInstruction`` has been deprecated and replaced by :py:class:`~qiskit.pulse.instructions.Acquire`. The changes are::"
msgstr ""

#: ../../release_notes.rst:9990
msgid "Until the deprecation period is over, the previous Acquire syntax of calling the command on a channel will be supported::"
msgstr ""

#: ../../release_notes.rst:10001
msgid "The :class:`~qiskit.transpiler.passes.BarrierBeforeFinalMeasurements` transpiler pass, included in the preset transpiler levels when targeting a physical device, previously inserted a barrier across only measured qubits. In some cases, this allowed the transpiler to insert a swap after a measure operation, rendering the circuit invalid for current devices. The pass has been updated so that the inserted barrier will span all qubits on the device. Fixes `#3937 <https://github.com/Qiskit/qiskit-terra/issues/3937>`_"
msgstr ""

#: ../../release_notes.rst:10010
msgid "When extending a :class:`~qiskit.circuit.QuantumCircuit` instance (extendee) with another circuit (extension), the circuit is taken via reference. If a circuit is extended with itself that leads to an infinite loop as extendee and extension are the same. This bug has been resolved by copying the extension if it is the same object as the extendee. Fixes `#3811 <https://github.com/Qiskit/qiskit-terra/issues/3811>`_"
msgstr ""

#: ../../release_notes.rst:10017
msgid "Fixes a case in :meth:`qiskit.result.Result.get_counts`, where the results for an expirement could not be referenced if the experiment was initialized as a Schedule without a name. Fixes `#2753 <https://github.com/Qiskit/qiskit-terra/issues/2753>`_"
msgstr ""

#: ../../release_notes.rst:10022
msgid "Previously, replacing :class:`~qiskit.circuit.Parameter` objects in a circuit with new Parameter objects prior to decomposing a circuit would result in the substituted values not correctly being substituted into the decomposed gates. This has been resolved such that binding and decomposition may occur in any order."
msgstr ""

#: ../../release_notes.rst:10028
msgid "The matplotlib output backend for the :func:`qiskit.visualization.circuit_drawer` function and :meth:`qiskit.circuit.QuantumCircuit.draw` method drawer has been fixed to render :class:`~qiskit.extensions.CU1Gate` gates correctly. Fixes `#3684 <https://github.com/Qiskit/qiskit-terra/issues/3684>`_"
msgstr ""

#: ../../release_notes.rst:10034
msgid "A bug in :meth:`qiskit.circuit.QuantumCircuit.from_qasm_str` and :meth:`qiskit.circuit.QuantumCircuit.from_qasm_file` when loading QASM with custom gates defined has been fixed. Now, loading this QASM::"
msgstr ""

#: ../../release_notes.rst:10045
msgid "is equivalent to the following circuit::"
msgstr ""

#: ../../release_notes.rst:10058
msgid "Fixes `#1566 <https://github.com/Qiskit/qiskit-terra/issues/1566>`_"
msgstr ""

#: ../../release_notes.rst:10060
msgid "Allow quantum circuit Instructions to have list parameter values. This is used in Aer for expectation value snapshot parameters for example ``params = [[1.0, 'I'], [1.0, 'X']]]`` for :math:`\\langle I + X\\rangle`."
msgstr ""

#: ../../release_notes.rst:10064
msgid "Previously, for circuits containing composite gates (those created via :meth:`qiskit.circuit.QuantumCircuit.to_gate` or :meth:`qiskit.circuit.QuantumCircuit.to_instruction` or their corresponding converters), attempting to bind the circuit more than once would result in only the first bind value being applied to all circuits when transpiled. This has been resolved so that the values provided for subsequent binds are correctly respected."
msgstr ""

#: ../../release_notes.rst:10078
msgid "The qasm and pulse qobj classes:"
msgstr ""

#: ../../release_notes.rst:10080 ../../release_notes.rst:10092
msgid ":class:`~qiskit.qobj.QasmQobjInstruction`"
msgstr ""

#: ../../release_notes.rst:10081
msgid ":class:`~qiskit.qobj.QobjExperimentHeader`"
msgstr ""

#: ../../release_notes.rst:10082 ../../release_notes.rst:10093
msgid ":class:`~qiskit.qobj.QasmQobjExperimentConfig`"
msgstr ""

#: ../../release_notes.rst:10083 ../../release_notes.rst:10094
msgid ":class:`~qiskit.qobj.QasmQobjExperiment`"
msgstr ""

#: ../../release_notes.rst:10084 ../../release_notes.rst:10095
msgid ":class:`~qiskit.qobj.QasmQobjConfig`"
msgstr ""

#: ../../release_notes.rst:10085
msgid ":class:`~qiskit.qobj.QobjHeader`"
msgstr ""

#: ../../release_notes.rst:10086
msgid ":class:`~qiskit.qobj.PulseQobjInstruction`"
msgstr ""

#: ../../release_notes.rst:10087
msgid ":class:`~qiskit.qobj.PulseQobjExperimentConfig`"
msgstr ""

#: ../../release_notes.rst:10088
msgid ":class:`~qiskit.qobj.PulseQobjExperiment`"
msgstr ""

#: ../../release_notes.rst:10089
msgid ":class:`~qiskit.qobj.PulseQobjConfig`"
msgstr ""

#: ../../release_notes.rst:10090
msgid ":class:`~qiskit.qobj.QobjMeasurementOption`"
msgstr ""

#: ../../release_notes.rst:10091
msgid ":class:`~qiskit.qobj.PulseLibraryItem`"
msgstr ""

#: ../../release_notes.rst:10096
msgid ":class:`~qiskit.qobj.QasmQobj`"
msgstr ""

#: ../../release_notes.rst:10097
msgid ":class:`~qiskit.qobj.PulseQobj`"
msgstr ""

#: ../../release_notes.rst:10099
msgid "from :mod:`qiskit.qobj` have all been reimplemented without using the marsmallow library. These new implementations are designed to be drop-in replacement (except for as noted in the upgrade release notes) but specifics inherited from marshmallow may not work. Please file issues for any incompatibilities found."
msgstr ""

#: ../../release_notes.rst:10106
msgid "Aer 0.5.0"
msgstr ""

#: ../../release_notes.rst:10109 ../../release_notes.rst:10122
#: ../../release_notes.rst:10908 ../../release_notes.rst:10965
#: ../../release_notes.rst:12848
msgid "Added"
msgstr ""

#: ../../release_notes.rst:10110
msgid "Add support for terra diagonal gate"
msgstr ""

#: ../../release_notes.rst:10111
msgid "Add support for parameterized qobj"
msgstr ""

#: ../../release_notes.rst:10114
msgid "Fixed"
msgstr ""

#: ../../release_notes.rst:10115
msgid "Added postfix for linux on Raspberry Pi"
msgstr ""

#: ../../release_notes.rst:10116
msgid "Handle numpy array inputs from qobj"
msgstr ""

#: ../../release_notes.rst:10124
msgid "API documentation"
msgstr ""

#: ../../release_notes.rst:10125
msgid "CNOT-Dihedral randomized benchmarking"
msgstr ""

#: ../../release_notes.rst:10126
msgid "Accreditation module for output accrediation of noisy devices"
msgstr ""

#: ../../release_notes.rst:10127
msgid "Pulse calibrations for single qubits"
msgstr ""

#: ../../release_notes.rst:10128
msgid "Pulse Discriminator"
msgstr ""

#: ../../release_notes.rst:10129
msgid "Entanglement verification circuits"
msgstr ""

#: ../../release_notes.rst:10130
msgid "Gateset tomography for single-qubit gate sets"
msgstr ""

#: ../../release_notes.rst:10131
msgid "Adds randomized benchmarking utility functions ``calculate_1q_epg``, ``calculate_2q_epg`` functions to calculate 1 and 2-qubit error per gate from error per Clifford"
msgstr ""

#: ../../release_notes.rst:10134
msgid "Adds randomized benchmarking utility functions ``calculate_1q_epc``, ``calculate_2q_epc`` for calculating 1 and 2-qubit error per Clifford from error per gate"
msgstr ""

#: ../../release_notes.rst:10139 ../../release_notes.rst:10203
#: ../../release_notes.rst:10252 ../../release_notes.rst:10928
#: ../../release_notes.rst:10998 ../../release_notes.rst:12900
msgid "Changed"
msgstr ""

#: ../../release_notes.rst:10140
msgid "Support integer labels for qubits in tomography"
msgstr ""

#: ../../release_notes.rst:10141
msgid "Support integer labels for measurement error mitigation"
msgstr ""

#: ../../release_notes.rst:10144 ../../release_notes.rst:10778
#: ../../release_notes.rst:10809 ../../release_notes.rst:10941
#: ../../release_notes.rst:11007 ../../release_notes.rst:12932
msgid "Deprecated"
msgstr ""

#: ../../release_notes.rst:10145
msgid "Deprecates ``twoQ_clifford_error`` function. Use ``calculate_2q_epc`` instead."
msgstr ""

#: ../../release_notes.rst:10146
msgid "Python 3.5 support in qiskit-ignis is deprecated. Support will be removed on the upstream python community's end of life date for the version, which is 09/13/2020."
msgstr ""

#: ../../release_notes.rst:10151 ../../release_notes.rst:10180
msgid "Aqua 0.6.5"
msgstr ""

#: ../../release_notes.rst:10156 ../../release_notes.rst:10185
msgid "IBM Q Provider 0.6.0"
msgstr ""

#: ../../release_notes.rst:10162
msgid "Qiskit 0.17.0"
msgstr ""

#: ../../release_notes.rst:10165 ../../release_notes.rst:10219
#: ../../release_notes.rst:10265
msgid "Terra 0.12.0"
msgstr ""

#: ../../release_notes.rst:10170
msgid "Aer 0.4.1"
msgstr ""

#: ../../release_notes.rst:10175 ../../release_notes.rst:10229
msgid "Ignis 0.2.0"
msgstr ""

#: ../../release_notes.rst:10190
msgid "There are three new exceptions: ``VisualizationError``, ``VisualizationValueError``, and ``VisualizationTypeError``. These are now used in the visualization modules when an exception is raised."
msgstr ""

#: ../../release_notes.rst:10193
msgid "You can now set the logging level and specify a log file using the environment variables ``QSIKIT_IBMQ_PROVIDER_LOG_LEVEL`` and ``QISKIT_IBMQ_PROVIDER_LOG_FILE``, respectively. Note that the name of the logger is ``qiskit.providers.ibmq``."
msgstr ""

#: ../../release_notes.rst:10196
msgid ":class:`qiskit.providers.ibmq.job.IBMQJob` now has a new method :meth:`~qiskit.providers.ibmq.job.IBMQJob.scheduling_mode` that returns the scheduling mode the job is in."
msgstr ""

#: ../../release_notes.rst:10199
msgid "IQX-related tutorials that used to be in ``qiskit-iqx-tutorials`` are now in ``qiskit-ibmq-provider``."
msgstr ""

#: ../../release_notes.rst:10205
msgid ":meth:`qiskit.providers.ibmq.IBMQBackend.jobs` now accepts a new boolean parameter ``descending``, which can be used to indicate whether the jobs should be returned in descending or ascending order."
msgstr ""

#: ../../release_notes.rst:10208
msgid ":class:`qiskit.providers.ibmq.managed.IBMQJobManager` now looks at the job limit and waits for old jobs to finish before submitting new ones if the limit has been reached."
msgstr ""

#: ../../release_notes.rst:10210
msgid ":meth:`qiskit.providers.ibmq.IBMQBackend.status` now raises a :class:`qiskit.providers.ibmq.IBMQBackendApiProtocolError` exception if there was an issue with validating the status."
msgstr ""

#: ../../release_notes.rst:10216
msgid "Qiskit 0.16.0"
msgstr ""

#: ../../release_notes.rst:10224 ../../release_notes.rst:10905
msgid "Aer 0.4.0"
msgstr ""

#: ../../release_notes.rst:10234
msgid "Aqua 0.6.4"
msgstr ""

#: ../../release_notes.rst:10239
msgid "IBM Q Provider 0.5.0"
msgstr ""

#: ../../release_notes.rst:10244
#, python-format
msgid "Some of the visualization and Jupyter tools, including gate/error map and backend information, have been moved from ``qiskit-terra`` to ``qiskit-ibmq-provider``. They are now under the :mod:`qiskit.providers.ibmq.jupyter` and :mod:`qiskit.providers.ibmq.visualization`. In addition, you can now use ``%iqx_dashboard`` to get a dashboard that provides both job and backend information."
msgstr ""

#: ../../release_notes.rst:10254
msgid "JSON schema validation is no longer run by default on Qobj objects passed to :meth:`qiskit.providers.ibmq.IBMQBackend.run`. This significantly speeds up the execution of the `run()` method. Qobj objects are still validated on the server side, and invalid Qobjs will continue to raise exceptions. To force local validation, set ``validate_qobj=True`` when you invoke ``run()``."
msgstr ""

#: ../../release_notes.rst:10262
msgid "Qiskit 0.15.0"
msgstr ""

#: ../../release_notes.rst:10270
msgid "The 0.12.0 release includes several new features and bug fixes. The biggest change for this release is the addition of support for parametric pulses to OpenPulse. These are Pulse commands which take parameters rather than sample points to describe a pulse. 0.12.0 is also the first release to include support for Python 3.8. It also marks the beginning of the deprecation for Python 3.5 support, which will be removed when the upstream community stops supporting it."
msgstr ""

#: ../../release_notes.rst:10284
msgid "The pass :class:`qiskit.transpiler.passes.CSPLayout` was extended with two new parameters: ``call_limit`` and ``time_limit``. These options allow limiting how long the pass will run. The option ``call_limit`` limits the number of times that the recursive function in the backtracking solver may be called. Similarly, ``time_limit`` limits how long (in seconds) the solver will be allowed to run. The defaults are ``1000`` calls and ``10`` seconds respectively."
msgstr ""

#: ../../release_notes.rst:10292
msgid ":class:`qiskit.pulse.Acquire` can now be applied to a single qubit. This makes pulse programming more consistent and easier to reason about, as now all operations apply to a single channel. For example::"
msgstr ""

#: ../../release_notes.rst:10302
msgid "A new method :meth:`qiskit.transpiler.CouplingMap.draw` was added to :class:`qiskit.transpiler.CouplingMap` to generate a graphviz image from the coupling map graph. For example:"
msgstr ""

#: ../../release_notes.rst:10314
msgid "Parametric pulses have been added to OpenPulse. These are pulse commands which are parameterized and understood by the backend. Arbitrary pulse shapes are still supported by the SamplePulse Command. The new supported pulse classes are:"
msgstr ""

#: ../../release_notes.rst:10319
msgid ":class:`qiskit.pulse.ConstantPulse`"
msgstr ""

#: ../../release_notes.rst:10320
msgid ":class:`qiskit.pulse.Drag`"
msgstr ""

#: ../../release_notes.rst:10321
msgid ":class:`qiskit.pulse.Gaussian`"
msgstr ""

#: ../../release_notes.rst:10322
msgid ":class:`qiskit.pulse.GaussianSquare`"
msgstr ""

#: ../../release_notes.rst:10324
msgid "They can be used like any other Pulse command. An example::"
msgstr ""

#: ../../release_notes.rst:10336
msgid "The resulting schedule will be similar to a SamplePulse schedule built using :mod:`qiskit.pulse.pulse_lib`, however, waveform sampling will be performed by the backend. The method :meth:`qiskit.pulse.Schedule.draw` can still be used as usual. However, the command will be converted to a ``SamplePulse`` with the :meth:`qiskit.pulse.ParametricPulse.get_sample_pulse` method, so the pulse shown may not sample the continuous function the same way that the backend will."
msgstr ""

#: ../../release_notes.rst:10345
msgid "This feature can be used to construct Pulse programs for any backend, but the pulses will be converted to ``SamplePulse`` objects if the backend does not support parametric pulses. Backends which support them will have the following new attribute::"
msgstr ""

#: ../../release_notes.rst:10353
msgid "Note that the backend does not need to support all of the parametric pulses defined in Qiskit."
msgstr ""

#: ../../release_notes.rst:10356
msgid "When the backend supports parametric pulses, and the Pulse schedule is built with them, the assembled Qobj is significantly smaller. The size of a PulseQobj built entirely with parametric pulses is dependent only on the number of instructions, whereas the size of a PulseQobj built otherwise will grow with the duration of the instructions (since every sample must be specified with a value)."
msgstr ""

#: ../../release_notes.rst:10363
msgid "Added utility functions, :func:`qiskit.scheduler.measure` and :func:`qiskit.scheduler.measure_all` to `qiskit.scheduler` module. These functions return a :class:`qiskit.pulse.Schedule` object which measures qubits using OpenPulse. For example::"
msgstr ""

#: ../../release_notes.rst:10377
msgid "Pulse :class:`qiskit.pulse.Schedule` objects now have better representations that for simple schedules should be valid Python expressions."
msgstr ""

#: ../../release_notes.rst:10381
msgid "The :class:`qiskit.circuit.QuantumCircuit` methods :meth:`qiskit.circuit.QuantumCircuit.measure_active`, :meth:`qiskit.circuit.QuantumCircuit.measure_all`, and :meth:`qiskit.circuit.QuantumCircuit.remove_final_measurements` now have an addition kwarg ``inplace``. When ``inplace`` is set to ``False`` the function will return a modified **copy** of the circuit. This is different from the default behavior which will modify the circuit object in-place and return nothing."
msgstr ""

#: ../../release_notes.rst:10390
msgid "Several new constructor methods were added to the :class:`qiskit.transpiler.CouplingMap` class for building objects with basic qubit coupling graphs. The new constructor methods are:"
msgstr ""

#: ../../release_notes.rst:10394
msgid ":meth:`qiskit.transpiler.CouplingMap.from_full`"
msgstr ""

#: ../../release_notes.rst:10395
msgid ":meth:`qiskit.transpiler.CouplingMap.from_line`"
msgstr ""

#: ../../release_notes.rst:10396
msgid ":meth:`qiskit.transpiler.CouplingMap.from_ring`"
msgstr ""

#: ../../release_notes.rst:10397
msgid ":meth:`qiskit.transpiler.CouplingMap.from_grid`"
msgstr ""

#: ../../release_notes.rst:10399
msgid "For example, to use the new constructors to get a coupling map of 5 qubits connected in a linear chain you can now run:"
msgstr ""

#: ../../release_notes.rst:10409
msgid "Introduced a new pass :class:`qiskit.transpiler.passes.CrosstalkAdaptiveSchedule`. This pass aims to reduce the impact of crosstalk noise on a program. It uses crosstalk characterization data from the backend to schedule gates. When a pair of gates has high crosstalk, they get serialized using a barrier. Naive serialization is harmful because it incurs decoherence errors. Hence, this pass uses a SMT optimization approach to compute a schedule which minimizes the impact of crosstalk as well as decoherence errors."
msgstr ""

#: ../../release_notes.rst:10419
msgid "The pass takes as input a circuit which is already transpiled onto the backend i.e., the circuit is expressed in terms of physical qubits and swap gates have been inserted and decomposed into CNOTs if required. Using this circuit and crosstalk characterization data, a `Z3 optimization <https://github.com/Z3Prover/z3>`_ is used to construct a new scheduled circuit as output."
msgstr ""

#: ../../release_notes.rst:10426
msgid "To use the pass on a circuit circ::"
msgstr ""

#: ../../release_notes.rst:10433
msgid "``backend_prop`` is a :class:`qiskit.providers.models.BackendProperties` object for the target backend. ``crosstalk_prop`` is a dict which specifies conditional error rates. For two gates ``g1`` and ``g2``, ``crosstalk_prop[g1][g2]`` specifies the conditional error rate of ``g1`` when ``g1`` and ``g2`` are executed simultaneously. A method for generating ``crosstalk_prop`` will be added in a future release of qiskit-ignis. Until then you'll either have to already know the crosstalk properties of your device, or manually write your own device characterization experiments."
msgstr ""

#: ../../release_notes.rst:10442
msgid "In the preset pass manager for optimization level 1, :func:`qiskit.transpiler.preset_passmanagers.level_1_pass_manager` if :class:`qiskit.transpiler.passes.TrivialLayout` layout pass is not a perfect match for a particular circuit, then :class:`qiskit.transpiler.passes.DenseLayout` layout pass is used instead."
msgstr ""

#: ../../release_notes.rst:10449
msgid "Added a new abstract method :meth:`qiskit.quantum_info.Operator.dot` to the abstract ``BaseOperator`` class, so it is included for all implementations of that abstract class, including :class:`qiskit.quantum_info.Operator` and ``QuantumChannel`` (e.g., :class:`qiskit.quantum_info.Choi`) objects. This method returns the right operator multiplication ``a.dot(b)`` :math:`= a \\cdot b`. This is equivalent to calling the operator :meth:`qiskit.quantum_info.Operator.compose` method with the kwarg ``front`` set to ``True``."
msgstr ""

#: ../../release_notes.rst:10461
msgid "Added :func:`qiskit.quantum_info.average_gate_fidelity` and :func:`qiskit.quantum_info.gate_error` functions to the :mod:`qiskit.quantum_info` module for working with :class:`qiskit.quantum_info.Operator` and ``QuantumChannel`` (e.g., :class:`qiskit.quantum_info.Choi`) objects."
msgstr ""

#: ../../release_notes.rst:10467
msgid "Added the :func:`qiskit.quantum_info.partial_trace` function to the :mod:`qiskit.quantum_info` that works with :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` quantum state classes. For example::"
msgstr ""

#: ../../release_notes.rst:10482
msgid "When :meth:`qiskit.circuit.QuantumCircuit.draw` or :func:`qiskit.visualization.circuit_drawer` is called with the ``with_layout`` kwarg set True (the default) the output visualization will now display the physical qubits as integers to clearly distinguish them from the virtual qubits."
msgstr ""

#: ../../release_notes.rst:10503
msgid "Added new state measure functions to the :mod:`qiskit.quantum_info` module: :func:`qiskit.quantum_info.entropy`, :func:`qiskit.quantum_info.mutual_information`, :func:`qiskit.quantum_info.concurrence`, and :func:`qiskit.quantum_info.entanglement_of_formation`. These functions work with the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes."
msgstr ""

#: ../../release_notes.rst:10511
msgid "The decomposition methods for single-qubit gates in :class:`qiskit.quantum_info.synthesis.one_qubit_decompose.OneQubitEulerDecomposer` have been expanded to now also include the ``'ZXZ'`` basis, characterized by three rotations about the  Z,X,Z axis. This now means that a general 2x2 Operator can be decomposed into following bases: ``U3``, ``U1X``, ``ZYZ``, ``ZXZ``, ``XYX``, ``ZXZ``."
msgstr ""

#: ../../release_notes.rst:10524
msgid "Running functions that use :func:`qiskit.tools.parallel_map` (for example :func:`qiskit.execute.execute`, :func:`qiskit.compiler.transpile`, and :meth:`qiskit.transpiler.PassManager.run`) may not work when called from a script running outside of a ``if __name__ == '__main__':`` block when using Python 3.8 on MacOS. Other environments are unaffected by this issue. This is due to changes in how parallel processes are launched by Python 3.8 on MacOS. If ``RuntimeError`` or ``AttributeError`` are raised by scripts that are directly calling ``parallel_map()`` or when calling a function that uses it internally with Python 3.8 on MacOS embedding the script calls inside ``if __name__ == '__main__':`` should workaround the issue. For example::"
msgstr ""

#: ../../release_notes.rst:10568
msgid "if errors are encountered with Python 3.8 on MacOS."
msgstr ""

#: ../../release_notes.rst:10576
msgid "The value of the ``rep_time`` parameter for Pulse backend's configuration object is now in units of seconds, not microseconds. The first time a ``PulseBackendConfiguration`` object is initialized it will raise a single warning to the user to indicate this."
msgstr ""

#: ../../release_notes.rst:10581
msgid "The ``rep_time`` argument for :func:`qiskit.compiler.assemble` now takes in a value in units of seconds, not microseconds. This was done to make the units with everything else in pulse. If you were passing in a value for ``rep_time`` ensure that you update the value to account for this change."
msgstr ""

#: ../../release_notes.rst:10586
msgid "The value of the ``base_gate`` property of :class:`qiskit.circuit.ControlledGate` objects has been changed from the class of the base gate to an instance of the class of the base gate."
msgstr ""

#: ../../release_notes.rst:10590
msgid "The ``base_gate_name`` property of :class:`qiskit.circuit.ControlledGate` has been removed; you can get the name of the base gate by accessing ``base_gate.name`` on the object. For example::"
msgstr ""

#: ../../release_notes.rst:10601
msgid "Changed :class:`qiskit.quantum_info.Operator` magic methods so that ``__mul__`` (which gets executed by python's multiplication operation, if the left hand side of the operation has it defined) implements right matrix multiplication (i.e. :meth:`qiskit.quantum_info.Operator.dot`), and ``__rmul__`` (which gets executed by python's multiplication operation from the right hand side of the operation if the left does not have ``__mul__`` defined) implements scalar multiplication (i.e. :meth:`qiskit.quantum_info.Operator.multiply`). Previously both methods implemented scalar multiplciation."
msgstr ""

#: ../../release_notes.rst:10611
msgid "The second argument of the :func:`qiskit.quantum_info.process_fidelity` function, ``target``, is now optional. If a target unitary is not specified, then process fidelity of the input channel with the identity operator will be returned."
msgstr ""

#: ../../release_notes.rst:10616
msgid ":func:`qiskit.compiler.assemble` will now respect the configured ``max_shots`` value for a backend. If a value for the ``shots`` kwarg is specified that exceed the max shots set in the backend configuration the function will now raise a ``QiskitError`` exception. Additionally, if no shots argument is provided the default value is either 1024 (the previous behavior) or ``max_shots`` from the backend, whichever is lower."
msgstr ""

#: ../../release_notes.rst:10629
msgid "Methods for adding gates to a :class:`qiskit.circuit.QuantumCircuit` with abbreviated keyword arguments (e.g. ``ctl``, ``tgt``) have had their keyword arguments renamed to be more descriptive (e.g. ``control_qubit``, ``target_qubit``). The old names have been deprecated. A table including the old and new calling signatures for the ``QuantumCircuit`` methods is included below."
msgstr ""

#: ../../release_notes.rst:10635
msgid "New signatures for ``QuantumCircuit`` gate methods"
msgstr ""

#: ../../release_notes.rst:10638
msgid "Instruction Type"
msgstr ""

#: ../../release_notes.rst:10639
msgid "Former Signature"
msgstr ""

#: ../../release_notes.rst:10640
msgid "New Signature"
msgstr ""

#: ../../release_notes.rst:10641
msgid ":class:`qiskit.extensions.HGate`"
msgstr ""

#: ../../release_notes.rst:10642
msgid "``qc.h(q)``"
msgstr ""

#: ../../release_notes.rst:10643
msgid "``qc.h(qubit)``"
msgstr ""

#: ../../release_notes.rst:10644
msgid ":class:`qiskit.extensions.CHGate`"
msgstr ""

#: ../../release_notes.rst:10645
msgid "``qc.ch(ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:10646
msgid "``qc.ch((control_qubit, target_qubit))``"
msgstr ""

#: ../../release_notes.rst:10647
msgid ":class:`qiskit.extensions.IdGate`"
msgstr ""

#: ../../release_notes.rst:10648 ../../release_notes.rst:10651
msgid "``qc.iden(q)``"
msgstr ""

#: ../../release_notes.rst:10649 ../../release_notes.rst:10652
msgid "``qc.iden(qubit)``"
msgstr ""

#: ../../release_notes.rst:10650 ../../release_notes.rst:10653
msgid ":class:`qiskit.extensions.RGate`"
msgstr ""

#: ../../release_notes.rst:10654
msgid "``qc.r(theta, phi, q)``"
msgstr ""

#: ../../release_notes.rst:10655
msgid "``qc.r(theta, phi, qubit)``"
msgstr ""

#: ../../release_notes.rst:10656
msgid ":class:`qiskit.extensions.RXGate`"
msgstr ""

#: ../../release_notes.rst:10657
msgid "``qc.rx(theta, q)``"
msgstr ""

#: ../../release_notes.rst:10658
msgid "``qc.rx(theta, qubit)``"
msgstr ""

#: ../../release_notes.rst:10659
msgid ":class:`qiskit.extensions.CrxGate`"
msgstr ""

#: ../../release_notes.rst:10660
msgid "``qc.crx(theta, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:10661
msgid "``qc.crx(theta, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:10662
msgid ":class:`qiskit.extensions.RYGate`"
msgstr ""

#: ../../release_notes.rst:10663
msgid "``qc.ry(theta, q)``"
msgstr ""

#: ../../release_notes.rst:10664
msgid "``qc.ry(theta, qubit)``"
msgstr ""

#: ../../release_notes.rst:10665
msgid ":class:`qiskit.extensions.CryGate`"
msgstr ""

#: ../../release_notes.rst:10666
msgid "``qc.cry(theta, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:10667
msgid "``qc.cry(theta, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:10668
msgid ":class:`qiskit.extensions.RZGate`"
msgstr ""

#: ../../release_notes.rst:10669
msgid "``qc.rz(phi, q)``"
msgstr ""

#: ../../release_notes.rst:10670
msgid "``qc.rz(phi, qubit)``"
msgstr ""

#: ../../release_notes.rst:10671
msgid ":class:`qiskit.extensions.CrzGate`"
msgstr ""

#: ../../release_notes.rst:10672
msgid "``qc.crz(theta, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:10673
msgid "``qc.crz(theta, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:10674
msgid ":class:`qiskit.extensions.SGate`"
msgstr ""

#: ../../release_notes.rst:10675
msgid "``qc.s(q)``"
msgstr ""

#: ../../release_notes.rst:10676
msgid "``qc.s(qubit)``"
msgstr ""

#: ../../release_notes.rst:10677
msgid ":class:`qiskit.extensions.SdgGate`"
msgstr ""

#: ../../release_notes.rst:10678
msgid "``qc.sdg(q)``"
msgstr ""

#: ../../release_notes.rst:10679
msgid "``qc.sdg(qubit)``"
msgstr ""

#: ../../release_notes.rst:10680
msgid ":class:`qiskit.extensions.FredkinGate`"
msgstr ""

#: ../../release_notes.rst:10681
msgid "``qc.cswap(ctl, tgt1, tgt2)``"
msgstr ""

#: ../../release_notes.rst:10682
msgid "``qc.cswap(control_qubit, target_qubit1, target_qubit2)``"
msgstr ""

#: ../../release_notes.rst:10683
msgid ":class:`qiskit.extensions.TGate`"
msgstr ""

#: ../../release_notes.rst:10684
msgid "``qc.t(q)``"
msgstr ""

#: ../../release_notes.rst:10685
msgid "``qc.t(qubit)``"
msgstr ""

#: ../../release_notes.rst:10686
msgid ":class:`qiskit.extensions.TdgGate`"
msgstr ""

#: ../../release_notes.rst:10687
msgid "``qc.tdg(q)``"
msgstr ""

#: ../../release_notes.rst:10688
msgid "``qc.tdg(qubit)``"
msgstr ""

#: ../../release_notes.rst:10689
msgid ":class:`qiskit.extensions.U1Gate`"
msgstr ""

#: ../../release_notes.rst:10690
msgid "``qc.u1(theta, q)``"
msgstr ""

#: ../../release_notes.rst:10691
msgid "``qc.u1(theta, qubit)``"
msgstr ""

#: ../../release_notes.rst:10692
msgid ":class:`qiskit.extensions.Cu1Gate`"
msgstr ""

#: ../../release_notes.rst:10693
msgid "``qc.cu1(theta, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:10694
msgid "``qc.cu1(theta, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:10695
msgid ":class:`qiskit.extensions.U2Gate`"
msgstr ""

#: ../../release_notes.rst:10696
msgid "``qc.u2(phi, lam, q)``"
msgstr ""

#: ../../release_notes.rst:10697
msgid "``qc.u2(phi, lam, qubit)``"
msgstr ""

#: ../../release_notes.rst:10698
msgid ":class:`qiskit.extensions.U3Gate`"
msgstr ""

#: ../../release_notes.rst:10699
msgid "``qc.u3(theta, phi, lam, q)``"
msgstr ""

#: ../../release_notes.rst:10700
msgid "``qc.u3(theta, phi, lam, qubit)``"
msgstr ""

#: ../../release_notes.rst:10701
msgid ":class:`qiskit.extensions.Cu3Gate`"
msgstr ""

#: ../../release_notes.rst:10702
msgid "``qc.cu3(theta, phi, lam, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:10703
msgid "``qc.cu3(theta, phi, lam, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:10704
msgid ":class:`qiskit.extensions.XGate`"
msgstr ""

#: ../../release_notes.rst:10705
msgid "``qc.x(q)``"
msgstr ""

#: ../../release_notes.rst:10706
msgid "``qc.x(qubit)``"
msgstr ""

#: ../../release_notes.rst:10707
msgid ":class:`qiskit.extensions.CnotGate`"
msgstr ""

#: ../../release_notes.rst:10708
msgid "``qc.cx(ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:10709
msgid "``qc.cx(control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:10710
msgid ":class:`qiskit.extensions.ToffoliGate`"
msgstr ""

#: ../../release_notes.rst:10711
msgid "``qc.ccx(ctl1, ctl2, tgt)``"
msgstr ""

#: ../../release_notes.rst:10712
msgid "``qc.ccx(control_qubit1, control_qubit2, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:10713
msgid ":class:`qiskit.extensions.YGate`"
msgstr ""

#: ../../release_notes.rst:10714
msgid "``qc.y(q)``"
msgstr ""

#: ../../release_notes.rst:10715
msgid "``qc.y(qubit)``"
msgstr ""

#: ../../release_notes.rst:10716
msgid ":class:`qiskit.extensions.CyGate`"
msgstr ""

#: ../../release_notes.rst:10717
msgid "``qc.cy(ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:10718
msgid "``qc.cy(control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:10719
msgid ":class:`qiskit.extensions.ZGate`"
msgstr ""

#: ../../release_notes.rst:10720
msgid "``qc.z(q)``"
msgstr ""

#: ../../release_notes.rst:10721
msgid "``qc.z(qubit)``"
msgstr ""

#: ../../release_notes.rst:10722
msgid ":class:`qiskit.extensions.CzGate`"
msgstr ""

#: ../../release_notes.rst:10723
msgid "``qc.cz(ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:10724
msgid "``qc.cz(control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:10726
msgid "Running :class:`qiskit.pulse.Acquire` on multiple qubits has been deprecated and will be removed in a future release. Additionally, the :class:`qiskit.pulse.AcquireInstruction` parameters ``mem_slots`` and ``reg_slots`` have been deprecated. Instead ``reg_slot`` and ``mem_slot`` should be used instead."
msgstr ""

#: ../../release_notes.rst:10732
msgid "The attribute of the :class:`qiskit.providers.models.PulseDefaults` class ``circuit_instruction_map`` has been deprecated and will be removed in a future release. Instead you should use the new attribute ``instruction_schedule_map``. This was done to match the type of the value of the attribute, which is an ``InstructionScheduleMap``."
msgstr ""

#: ../../release_notes.rst:10738
msgid "The :class:`qiskit.pulse.PersistentValue` command is deprecated and will be removed in a future release. Similar functionality can be achieved with the :class:`qiskit.pulse.ConstantPulse` command (one of the new parametric pulses). Compare the following::"
msgstr ""

#: ../../release_notes.rst:10755
msgid "Python 3.5 support in qiskit-terra is deprecated. Support will be removed in the first release after the upstream Python community's end of life date for the version, which is 09/13/2020."
msgstr ""

#: ../../release_notes.rst:10759
msgid "The ``require_cptp`` kwarg of the :func:`qiskit.quantum_info.process_fidelity` function has been deprecated and will be removed in a future release. It is superseded by two separate kwargs ``require_cp`` and ``require_tp``."
msgstr ""

#: ../../release_notes.rst:10764
msgid "Setting the ``scale`` parameter for :meth:`qiskit.circuit.QuantumCircuit.draw` and :func:`qiskit.visualization.circuit_drawer` as the first positional argument is deprecated and will be removed in a future release. Instead you should use ``scale`` as keyword argument."
msgstr ""

#: ../../release_notes.rst:10770
msgid "The :mod:`qiskit.tools.qi.qi` module is deprecated and will be removed in a future release. The legacy functions in the module have all been superseded by functions and classes in the :mod:`qiskit.quantum_info` module. A table of the deprecated functions and their replacement are below:"
msgstr ""

#: ../../release_notes.rst:10775
msgid "``qiskit.tools.qi.qi`` replacements"
msgstr ""

#: ../../release_notes.rst:10779 ../../release_notes.rst:10810
msgid "Replacement"
msgstr ""

#: ../../release_notes.rst:10780
msgid ":func:`qiskit.tools.partial_trace`"
msgstr ""

#: ../../release_notes.rst:10781
msgid ":func:`qiskit.quantum_info.partial_trace`"
msgstr ""

#: ../../release_notes.rst:10782
msgid ":func:`qiskit.tools.choi_to_pauli`"
msgstr ""

#: ../../release_notes.rst:10783
msgid ":class:`qiskit.quantum_info.Choi` and :class:`quantum_info.PTM`"
msgstr ""

#: ../../release_notes.rst:10784
msgid ":func:`qiskit.tools.chop`"
msgstr ""

#: ../../release_notes.rst:10785
msgid "``numpy.round``"
msgstr ""

#: ../../release_notes.rst:10786
msgid "``qiskit.tools.qi.qi.outer``"
msgstr ""

#: ../../release_notes.rst:10787
msgid "``numpy.outer``"
msgstr ""

#: ../../release_notes.rst:10788
msgid ":func:`qiskit.tools.concurrence`"
msgstr ""

#: ../../release_notes.rst:10789
msgid ":func:`qiskit.quantum_info.concurrence`"
msgstr ""

#: ../../release_notes.rst:10790
msgid ":func:`qiskit.tools.shannon_entropy`"
msgstr ""

#: ../../release_notes.rst:10791
msgid ":func:`qiskit.quantum_info.shannon_entropy`"
msgstr ""

#: ../../release_notes.rst:10792
msgid ":func:`qiskit.tools.entropy`"
msgstr ""

#: ../../release_notes.rst:10793
msgid ":func:`qiskit.quantum_info.entropy`"
msgstr ""

#: ../../release_notes.rst:10794
msgid ":func:`qiskit.tools.mutual_information`"
msgstr ""

#: ../../release_notes.rst:10795
msgid ":func:`qiskit.quantum_info.mutual_information`"
msgstr ""

#: ../../release_notes.rst:10796
msgid ":func:`qiskit.tools.entanglement_of_formation`"
msgstr ""

#: ../../release_notes.rst:10797
msgid ":func:`qiskit.quantum_info.entanglement_of_formation`"
msgstr ""

#: ../../release_notes.rst:10798
msgid ":func:`qiskit.tools.is_pos_def`"
msgstr ""

#: ../../release_notes.rst:10799
msgid "``quantum_info.operators.predicates.is_positive_semidefinite_matrix``"
msgstr ""

#: ../../release_notes.rst:10801
msgid "The :mod:`qiskit.quantum_info.states.states` module is deprecated and will be removed in a future release. The legacy functions in the module have all been superseded by functions and classes in the :mod:`qiskit.quantum_info` module."
msgstr ""

#: ../../release_notes.rst:10806
msgid "``qiskit.quantum_info.states.states`` replacements"
msgstr ""

#: ../../release_notes.rst:10811
msgid "``qiskit.quantum_info.states.states.basis_state``"
msgstr ""

#: ../../release_notes.rst:10812
msgid ":meth:`qiskit.quantum_info.Statevector.from_label`"
msgstr ""

#: ../../release_notes.rst:10813
msgid "``qiskit.quantum_info.states.states.projector``"
msgstr ""

#: ../../release_notes.rst:10814
msgid ":class:`qiskit.quantum_info.DensityMatrix`"
msgstr ""

#: ../../release_notes.rst:10816
msgid "The ``scaling`` parameter of the ``draw()`` method for the ``Schedule`` and ``Pulse`` objects was deprecated and will be removed in a future release. Instead the new ``scale`` parameter should be used. This was done to have a consistent argument between pulse and circuit drawings. For example::"
msgstr ""

#: ../../release_notes.rst:10838
msgid "Previously, calling :meth:`qiskit.circuit.QuantumCircuit.bind_parameters` prior to decomposing a circuit would result in the bound values not being correctly substituted into the decomposed gates. This has been resolved such that binding and decomposition may occur in any order. Fixes `issue #2482 <https://github.com/Qiskit/qiskit-terra/issues/2482>`_ and `issue #3509 <https://github.com/Qiskit/qiskit-terra/issues/3509>`_"
msgstr ""

#: ../../release_notes.rst:10845
msgid "The ``Collect2qBlocks`` pass had previously not considered classical conditions when determining whether to include a gate within an existing block. In some cases, this resulted in classical conditions being lost when transpiling with ``optimization_level=3``. This has been resolved so that classically conditioned gates are never included in a block. Fixes `issue #3215 <https://github.com/Qiskit/qiskit-terra/issues/3215>`_"
msgstr ""

#: ../../release_notes.rst:10853
msgid "All the output types for the circuit drawers in :meth:`qiskit.circuit.QuantumCircuit.draw` and :func:`qiskit.visualization.circuit_drawer` have fixed and/or improved support for drawing controlled custom gates. Fixes `issue #3546 <https://github.com/Qiskit/qiskit-terra/issues/3546>`_, `issue #3763 <https://github.com/Qiskit/qiskit-terra/issues/3763>`_, and `issue #3764 <https://github.com/Qiskit/qiskit-terra/issues/3764>`_"
msgstr ""

#: ../../release_notes.rst:10861
msgid "Explanation and examples have been added to documentation for the :class:`qiskit.circuit.QuantumCircuit` methods for adding gates: :meth:`qiskit.circuit.QuantumCircuit.ccx`, :meth:`qiskit.circuit.QuantumCircuit.ch`, :meth:`qiskit.circuit.QuantumCircuit.crz`, :meth:`qiskit.circuit.QuantumCircuit.cswap`, :meth:`qiskit.circuit.QuantumCircuit.cu1`, :meth:`qiskit.circuit.QuantumCircuit.cu3`, :meth:`qiskit.circuit.QuantumCircuit.cx`, :meth:`qiskit.circuit.QuantumCircuit.cy`, :meth:`qiskit.circuit.QuantumCircuit.cz`, :meth:`qiskit.circuit.QuantumCircuit.h`, :meth:`qiskit.circuit.QuantumCircuit.iden`, :meth:`qiskit.circuit.QuantumCircuit.rx`, :meth:`qiskit.circuit.QuantumCircuit.ry`, :meth:`qiskit.circuit.QuantumCircuit.rz`, :meth:`qiskit.circuit.QuantumCircuit.s`, :meth:`qiskit.circuit.QuantumCircuit.sdg`, :meth:`qiskit.circuit.QuantumCircuit.swap`, :meth:`qiskit.circuit.QuantumCircuit.t`, :meth:`qiskit.circuit.QuantumCircuit.tdg`, :meth:`qiskit.circuit.QuantumCircuit.u1`, :meth:`qiskit.circuit.QuantumCircuit.u2`, :meth:`qiskit.circuit.QuantumCircuit.u3`, :meth:`qiskit.circuit.QuantumCircuit.x`, :meth:`qiskit.circuit.QuantumCircuit.y`, :meth:`qiskit.circuit.QuantumCircuit.z`. Fixes `issue #3400 <https://github.com/Qiskit/qiskit-terra/issues/3400>`_"
msgstr ""

#: ../../release_notes.rst:10890
msgid "Fixes for handling of complex number parameter in circuit visualization. Fixes `issue #3640 <https://github.com/Qiskit/qiskit-terra/issues/3640>`_"
msgstr ""

#: ../../release_notes.rst:10899
msgid "The transpiler passes in the :mod:`qiskit.transpiler.passes` directory have been organized into subdirectories to better categorize them by functionality. They are still all accessible under the ``qiskit.transpiler.passes`` namespace."
msgstr ""

#: ../../release_notes.rst:10909
msgid "Added ``NoiseModel.from_backend`` for building a basic device noise model for an IBMQ backend (\\#569)"
msgstr ""

#: ../../release_notes.rst:10911
msgid "Added multi-GPU enabled simulation methods to the ``QasmSimulator``, ``StatevectorSimulator``, and ``UnitarySimulator``. The qasm simulator has gpu version of the density matrix and statevector methods and can be accessed using ``\"method\": \"density_matrix_gpu\"`` or ``\"method\": \"statevector_gpu\"`` in ``backend_options``. The statevector simulator gpu method can be accessed using ``\"method\": \"statevector_gpu\"``. The unitary simulator GPU method can be accessed using ``\"method\": \"unitary_gpu\"``. These backends use CUDA and require an NVidia GPU.(\\#544)"
msgstr ""

#: ../../release_notes.rst:10918
msgid "Added ``PulseSimulator`` backend (\\#542)"
msgstr ""

#: ../../release_notes.rst:10919
msgid "Added ``PulseSystemModel`` and ``HamiltonianModel`` classes to represent models to be used in ``PulseSimulator`` (\\#496, \\#493)"
msgstr ""

#: ../../release_notes.rst:10921
msgid "Added ``duffing_model_generators`` to generate ``PulseSystemModel`` objects from a list of parameters (\\#516)"
msgstr ""

#: ../../release_notes.rst:10923
msgid "Migrated ODE function solver to C++ (\\#442, \\#350)"
msgstr ""

#: ../../release_notes.rst:10924
msgid "Added high level pulse simulator tests (\\#379)"
msgstr ""

#: ../../release_notes.rst:10925
msgid "CMake BLAS_LIB_PATH flag to set path to look for BLAS lib (\\#543)"
msgstr ""

#: ../../release_notes.rst:10930
msgid "Changed the structure of the ``src`` directory to organise simulator source code. Simulator controller headers were moved to ``src/controllers`` and simulator method State headers are in ``src/simulators`` (\\#544)"
msgstr ""

#: ../../release_notes.rst:10933
msgid "Moved the location of several functions (\\#568): * Moved contents of ``qiskit.provider.aer.noise.errors`` into the ``qiskit.providers.noise`` module * Moved contents of ``qiskit.provider.aer.noise.utils`` into the ``qiskit.provider.aer.utils`` module."
msgstr ""

#: ../../release_notes.rst:10938
msgid "Enabled optimization to aggregate consecutive gates in a circuit (fusion) by default (\\#579)."
msgstr ""

#: ../../release_notes.rst:10942
msgid "Deprecated ``utils.qobj_utils`` functions (\\#568)"
msgstr ""

#: ../../release_notes.rst:10943
msgid "Deprecated ``qiskit.providers.aer.noise.device.basic_device_noise_model``. It is superseded by the ``NoiseModel.from_backend`` method (\\#569)"
msgstr ""

#: ../../release_notes.rst:10947 ../../release_notes.rst:12926
msgid "Removed"
msgstr ""

#: ../../release_notes.rst:10948
msgid "Removed ``NoiseModel.as_dict``, ``QuantumError.as_dict``, ``ReadoutError.as_dict``, and ``QuantumError.kron`` methods that were deprecated in 0.3 (\\#568)."
msgstr ""

#: ../../release_notes.rst:10952 ../../release_notes.rst:11553
#: ../../release_notes.rst:12076 ../../release_notes.rst:12817
msgid "Ignis 0.2"
msgstr ""

#: ../../release_notes.rst:10957 ../../release_notes.rst:11558
#: ../../release_notes.rst:12081 ../../release_notes.rst:12845
msgid "Aqua 0.6"
msgstr ""

#: ../../release_notes.rst:10962
msgid "IBM Q Provider 0.4.6"
msgstr ""

#: ../../release_notes.rst:10967
msgid "Several new methods were added to :class:`IBMQBackend<qiskit.providers.ibmq.ibmqbackend.IBMQBackend>`:"
msgstr ""

#: ../../release_notes.rst:10970
msgid ":meth:`~qiskit.providers.ibmq.job.IBMQJob.wait_for_final_state` blocks until the job finishes. It takes a callback function that it will invoke after every query to provide feedback."
msgstr ""

#: ../../release_notes.rst:10973
msgid ":meth:`~qiskit.providers.ibmq.ibmqbackend.IBMQBackend.active_jobs` returns the jobs submitted to a backend that are currently in an unfinished status."
msgstr ""

#: ../../release_notes.rst:10975
msgid ":meth:`~qiskit.providers.ibmq.ibmqbackend.IBMQBackend.job_limit` returns the job limit for a backend."
msgstr ""

#: ../../release_notes.rst:10977
msgid ":meth:`~qiskit.providers.ibmq.ibmqbackend.IBMQBackend.remaining_jobs_count` returns the number of jobs that you can submit to the backend before job limit is reached."
msgstr ""

#: ../../release_notes.rst:10980
msgid ":class:`~qiskit.providers.ibmq.job.QueueInfo` now has a new :meth:`~qiskit.providers.ibmq.job.QueueInfo.format` method that returns a formatted string of the queue information."
msgstr ""

#: ../../release_notes.rst:10984
msgid ":class:`IBMQJob<qiskit.providers.ibmq.job.IBMQJob>` now has three new methods: :meth:`~qiskit.providers.ibmq.job.IBMQJob.done`, :meth:`~qiskit.providers.ibmq.job.IBMQJob.running`, and :meth:`~qiskit.providers.ibmq.job.IBMQJob.cancelled` that are used to indicate job status."
msgstr ""

#: ../../release_notes.rst:10989
msgid ":meth:`qiskit.providers.ibmq.ibmqbackend.IBMQBackend.run()` now accepts an optional `job_tags` parameter. If specified, the `job_tags` are assigned to the job, which can later be used as a filter in :meth:`qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs()`."
msgstr ""

#: ../../release_notes.rst:10993
msgid ":class:`~qiskit.providers.ibmq.managed.IBMQJobManager` now has a new method :meth:`~qiskit.providers.ibmq.managed.IBMQJobManager.retrieve_job_set()` that allows you to retrieve a previously submitted job set using the job set ID."
msgstr ""

#: ../../release_notes.rst:11000
msgid "The ``Exception`` hierarchy has been refined with more specialized classes. You can, however, continue to catch their parent exceptions (such as ``IBMQAccountError``). Also, the exception class ``IBMQApiUrlError`` has been replaced by ``IBMQAccountCredentialsInvalidUrl`` and ``IBMQAccountCredentialsInvalidToken``."
msgstr ""

#: ../../release_notes.rst:11009
msgid "The use of proxy urls without a protocol (e.g. ``http://``) is deprecated due to recent Python changes."
msgstr ""

#: ../../release_notes.rst:11014
msgid "Qiskit 0.14.0"
msgstr ""

#: ../../release_notes.rst:11017
msgid "Terra 0.11.0"
msgstr ""

#: ../../release_notes.rst:11024
msgid "The 0.11.0 release includes several new features and bug fixes. The biggest change for this release is the addition of the pulse scheduler. This allows users to define their quantum program as a ``QuantumCircuit`` and then map it to the underlying pulse instructions that will control the quantum hardware to implement the circuit."
msgstr ""

#: ../../release_notes.rst:11035
msgid "Added 5 new commands to easily retrieve user-specific data from ``BackendProperties``: ``gate_property``, ``gate_error``, ``gate_length``, ``qubit_property``, ``t1``, ``t2``, ``readout_error`` and ``frequency``. They return the specific values of backend properties. For example::"
msgstr ""

#: ../../release_notes.rst:11053
msgid "Added method ``Instruction.is_parameterized()`` to check if an instruction object is parameterized. This method returns ``True`` if and only if instruction has a ``ParameterExpression`` or ``Parameter`` object for one of its params."
msgstr ""

#: ../../release_notes.rst:11058
msgid "Added a new analysis pass ``Layout2qDistance``. This pass allows to \"score\" a layout selection, once ``property_set['layout']`` is set.  The score will be the sum of distances for each two-qubit gate in the circuit, when they are not directly connected. This scoring does not consider direction in the coupling map. The lower the number, the better the layout selection is."
msgstr ""

#: ../../release_notes.rst:11064
msgid "For example, consider a linear coupling map ``[0]--[2]--[1]`` and the following circuit::"
msgstr ""

#: ../../release_notes.rst:11071
msgid "If the layout is ``{qr[0]:0, qr[1]:1}``, ``Layout2qDistance`` will set ``property_set['layout_score'] = 1``. If the layout is ``{qr[0]:0, qr[1]:2}``, then the result is ``property_set['layout_score'] = 0``. The lower the score, the better."
msgstr ""

#: ../../release_notes.rst:11076
msgid "Added ``qiskit.QuantumCircuit.cnot`` as an alias for the ``cx`` method of ``QuantumCircuit``. The names ``cnot`` and ``cx`` are often used interchangeably now the `cx` method can be called with either name."
msgstr ""

#: ../../release_notes.rst:11080
msgid "Added ``qiskit.QuantumCircuit.toffoli`` as an alias for the ``ccx`` method of ``QuantumCircuit``. The names ``toffoli`` and ``ccx`` are often used interchangeably now the `ccx` method can be called with either name."
msgstr ""

#: ../../release_notes.rst:11084
msgid "Added ``qiskit.QuantumCircuit.fredkin`` as an alias for the ``cswap`` method of ``QuantumCircuit``. The names ``fredkin`` and ``cswap`` are often used interchangeably now the `cswap` method can be called with either name."
msgstr ""

#: ../../release_notes.rst:11089
msgid "The ``latex`` output mode for ``qiskit.visualization.circuit_drawer()`` and the ``qiskit.circuit.QuantumCircuit.draw()`` method now has a mode to passthrough raw latex from gate labels and parameters. The syntax for doing this mirrors matplotlib's `mathtext mode <https://matplotlib.org/tutorials/text/mathtext.html>`__ syntax. Any portion of a label string between a pair of '$' characters will be treated as raw latex and passed directly into the generated output latex. This can be leveraged to add more advanced formatting to circuit diagrams generated with the latex drawer."
msgstr ""

#: ../../release_notes.rst:11099
msgid "Prior to this release all gate labels were run through a utf8 -> latex conversion to make sure that the output latex would compile the string as expected. This is still what happens for all portions of a label outside the '$' pair. Also if you want to use a dollar sign in your label make sure you escape it in the label string (ie ``'\\$'``)."
msgstr ""

#: ../../release_notes.rst:11105
msgid "You can mix and match this passthrough with the utf8 -> latex conversion to create the exact label you want, for example::"
msgstr ""

#: ../../release_notes.rst:11116
msgid "will now render the first custom gate's label as ``α_gate``, the second will be ``α_gate`` with a 2 subscript, and the last custom gate's label will be ``$α$_gate``."
msgstr ""

#: ../../release_notes.rst:11120
msgid "Add ``ControlledGate`` class for representing controlled gates. Controlled gate instances are created with the ``control(n)`` method of ``Gate`` objects where ``n`` represents the number of controls. The control qubits come before the controlled qubits in the new gate. For example::"
msgstr ""

#: ../../release_notes.rst:11133
msgid "generates::"
msgstr ""

#: ../../release_notes.rst:11144
msgid "Allowed values of ``meas_level`` parameters and fields can now be a member from the `IntEnum` class ``qiskit.qobj.utils.MeasLevel``. This can be used when calling ``execute`` (or anywhere else ``meas_level`` is specified) with a pulse experiment. For example::"
msgstr ""

#: ../../release_notes.rst:11161
msgid "In this above example, ``meas_level=MeasLevel.CLASSIFIED`` and ``meas_level=2`` can be used interchangably now."
msgstr ""

#: ../../release_notes.rst:11164
msgid "A new layout selector based on constraint solving is included. `CSPLayout` models the problem of finding a layout as a constraint problem and uses recursive backtracking to solve it."
msgstr ""

#: ../../release_notes.rst:11193
msgid "The parameter ``CSPLayout(...,strict_direction=True)`` is more restrictive but it will guarantee there is no need of running ``CXDirection`` after."
msgstr ""

#: ../../release_notes.rst:11212
msgid "If the constraint system is not solvable, the `layout` property is not set."
msgstr ""

#: ../../release_notes.rst:11225
msgid "PulseBackendConfiguration (accessed normally as backend.configuration()) has been extended with useful methods to explore its data and the functionality that exists in PulseChannelSpec. PulseChannelSpec will be deprecated in the future. For example::"
msgstr ""

#: ../../release_notes.rst:11238
msgid "``PulseDefaults`` (accessed normally as ``backend.defaults()``) has an attribute, ``circuit_instruction_map`` which has the methods of CmdDef. The new `circuit_instruction_map` is an ``InstructionScheduleMap`` object with three new functions beyond what CmdDef had:"
msgstr ""

#: ../../release_notes.rst:11243
msgid "qubit_instructions(qubits) returns the operations defined for the qubits"
msgstr ""

#: ../../release_notes.rst:11244
msgid "assert_has(instruction, qubits) raises an error if the op isn't defined"
msgstr ""

#: ../../release_notes.rst:11245
msgid "remove(instruction, qubits) like pop, but doesn't require parameters"
msgstr ""

#: ../../release_notes.rst:11247
msgid "There are some differences from the CmdDef:"
msgstr ""

#: ../../release_notes.rst:11249
msgid "``__init__`` takes no arguments"
msgstr ""

#: ../../release_notes.rst:11250
msgid "``cmds`` and ``cmd_qubits`` are deprecated and replaced with ``instructions`` and ``qubits_with_instruction``"
msgstr ""

#: ../../release_notes.rst:11253
msgid "Example::"
msgstr ""

#: ../../release_notes.rst:11261
msgid "A new kwarg parameter, ``show_framechange_channels`` to optionally disable displaying channels with only framechange instructions in pulse visualizations was added to the ``qiskit.visualization.pulse_drawer()`` function and ``qiskit.pulse.Schedule.draw()`` method. When this new kwarg is set to ``False`` the output pulse schedule visualization will not include any channels that only include frame changes."
msgstr ""

#: ../../release_notes.rst:11286
msgid "A new utility function ``qiskit.result.marginal_counts()`` is added which allows marginalization of the counts over some indices of interest. This is useful when more qubits are measured than needed, and one wishes to get the observation counts for some subset of them only."
msgstr ""

#: ../../release_notes.rst:11291
msgid "When ``passmanager.run(...)`` is invoked with more than one circuit, the transpilation of these circuits will run in parallel."
msgstr ""

#: ../../release_notes.rst:11294
msgid "PassManagers can now be sliced to create a new PassManager containing a subset of passes using the square bracket operator. This allow running or drawing a portion of the PassManager for easier testing and visualization. For example let's try to draw the first 3 passes of a PassManager pm, or run just the second pass on our circuit:"
msgstr ""

#: ../../release_notes.rst:11305
msgid "Also now, PassManagers can be created by adding two PassManagers or by directly adding a pass/list of passes to a PassManager."
msgstr ""

#: ../../release_notes.rst:11313
msgid "A basic ``scheduler`` module has now been added to Qiskit. The `scheduler` schedules an input transpiled ``QuantumCircuit`` into a pulse ``Schedule``. The scheduler accepts as input a ``Schedule`` and either a pulse ``Backend``, or a ``CmdDef`` which relates circuit ``Instruction`` objects on specific qubits to pulse Schedules and a ``meas_map`` which determines which measurements must occur together."
msgstr ""

#: ../../release_notes.rst:11320
msgid "Scheduling example::"
msgstr ""

#: ../../release_notes.rst:11332
msgid "The scheduler currently supports two scheduling policies, `as_late_as_possible` (``alap``) and `as_soon_as_possible` (``asap``), which respectively schedule pulse instructions to occur as late as possible or as soon as possible across qubits in a circuit. The scheduling policy may be selected with the input argument ``method``, for example::"
msgstr ""

#: ../../release_notes.rst:11341
msgid "It is easy to use a pulse ``Schedule`` within a ``QuantumCircuit`` by mapping it to a custom circuit instruction such as a gate which may be used in a ``QuantumCircuit``. To do this, first, define the custom gate and then add an entry into the ``CmdDef`` for the gate, for each qubit that the gate will be applied to. The gate can then be used in the ``QuantumCircuit``. At scheduling time the gate will be mapped to the underlying pulse schedule. Using this technique allows easy integration with preexisting qiskit modules such as Ignis."
msgstr ""

#: ../../release_notes.rst:11380
msgid "The feature for transpiling in parallel when ``passmanager.run(...)`` is invoked with more than one circuit is not supported under Windows. See `#2988 <https://github.com/Qiskit/qiskit-terra/issues/2988>`__ for more details."
msgstr ""

#: ../../release_notes.rst:11391
msgid "The ``qiskit.pulse.channels.SystemTopology`` class was used as a helper class for ``PulseChannelSpec``. It has been removed since with the deprecation of ``PulseChannelSpec`` and changes to ``BackendConfiguration`` make it unnecessary."
msgstr ""

#: ../../release_notes.rst:11396
msgid "The previously deprecated representation of qubits and classical bits as tuple, which was deprecated in the 0.9 release, has been removed. The use of ``Qubit`` and ``Clbit`` objects is the new way to represent qubits and classical bits."
msgstr ""

#: ../../release_notes.rst:11401
msgid "The previously deprecated representation of the basis set as single string has been removed. A list of strings is the new preferred way."
msgstr ""

#: ../../release_notes.rst:11404
msgid "The method ``BaseModel.as_dict``, which was deprecated in the 0.9 release, has been removed in favor of the method ``BaseModel.to_dict``."
msgstr ""

#: ../../release_notes.rst:11407
msgid "In PulseDefaults (accessed normally as backend.defaults()), ``qubit_freq_est`` and ``meas_freq_est`` are now returned in Hz rather than GHz. This means the new return values are 1e9 * their previous value."
msgstr ""

#: ../../release_notes.rst:11411
msgid "`dill <https://pypi.org/project/dill/>`__ was added as a requirement. This is needed to enable running ``passmanager.run()`` in parallel for more than one circuit."
msgstr ""

#: ../../release_notes.rst:11415
msgid "The previously deprecated gate ``UBase``, which was deprecated in the 0.9 release, has been removed. The gate ``U3Gate`` should be used instead."
msgstr ""

#: ../../release_notes.rst:11419
msgid "The previously deprecated gate ``CXBase``, which was deprecated in the 0.9 release, has been removed. The gate ``CnotGate`` should be used instead."
msgstr ""

#: ../../release_notes.rst:11423
msgid "The instruction ``snapshot`` used to implicitly convert the ``label`` parameter to string. That conversion has been removed and an error is raised if a string is not provided."
msgstr ""

#: ../../release_notes.rst:11427
msgid "The previously deprecated gate ``U0Gate``, which was deprecated in the 0.9 release, has been removed. The gate ``IdGate`` should be used instead to insert delays."
msgstr ""

#: ../../release_notes.rst:11437
msgid "The ``qiskit.pulse.CmdDef`` class has been deprecated. Instead you should use the ``qiskit.pulse.InstructionScheduleMap``. The ``InstructionScheduleMap`` object for a pulse enabled system can be accessed at ``backend.defaults().instruction_schedules``."
msgstr ""

#: ../../release_notes.rst:11442
msgid "``PulseChannelSpec`` is being deprecated. Use ``BackendConfiguration`` instead. The backend configuration is accessed normally as ``backend.configuration()``. The config has been extended with most of the functionality of PulseChannelSpec, with some modifications as follows, where `0` is an exemplary qubit index::"
msgstr ""

#: ../../release_notes.rst:11453
msgid "Now, if there is an attempt to get a channel for a qubit which does not exist for the device, a ``BackendConfigurationError`` will be raised with a helpful explanation."
msgstr ""

#: ../../release_notes.rst:11457
msgid "The methods ``memoryslots`` and ``registerslots`` of the PulseChannelSpec have not been migrated to the backend configuration. These classical resources are not restrained by the physical configuration of a backend system. Please instantiate them directly::"
msgstr ""

#: ../../release_notes.rst:11465
msgid "The ``qubits`` method is not migrated to backend configuration. The result of ``qubits`` can be built as such::"
msgstr ""

#: ../../release_notes.rst:11470
msgid "``Qubit`` within ``pulse.channels`` has been deprecated. They should not be used. It is possible to obtain channel <=> qubit mappings through the BackendConfiguration (or backend.configuration())."
msgstr ""

#: ../../release_notes.rst:11474
msgid "The function ``qiskit.visualization.circuit_drawer.qx_color_scheme()`` has been deprecated. This function is no longer used internally and doesn't reflect the current IBM QX style. If you were using this function to generate a style dict locally you must save the output from it and use that dictionary directly."
msgstr ""

#: ../../release_notes.rst:11480
msgid "The Exception ``TranspilerAccessError`` has been deprecated. An alternative function ``TranspilerError`` can be used instead to provide the same functionality. This alternative function provides the exact same functionality but with greater generality."
msgstr ""

#: ../../release_notes.rst:11485
msgid "Buffers in Pulse are deprecated. If a nonzero buffer is supplied, a warning will be issued with a reminder to use a Delay instead. Other options would include adding samples to a pulse instruction which are (0.+0.j) or setting the start time of the next pulse to ``schedule.duration + buffer``."
msgstr ""

#: ../../release_notes.rst:11490
msgid "Passing in ``sympy.Basic``, ``sympy.Expr`` and ``sympy.Matrix`` types as instruction parameters are deprecated and will be removed in a future release. You'll need to convert the input to one of the supported types which are:"
msgstr ""

#: ../../release_notes.rst:11507
msgid "The Collect2qBlocks and CommutationAnalysis passes in the transpiler had been unable to process circuits containing Parameterized gates, preventing Parameterized circuits from being transpiled at optimization_level 2 or above. These passes have been corrected to treat Parameterized gates as opaque."
msgstr ""

#: ../../release_notes.rst:11513
msgid "The align_measures function had an issue where Measure stimulus pulses weren't properly aligned with Acquire pulses, resulting in an error. This has been fixed."
msgstr ""

#: ../../release_notes.rst:11517
msgid "Uses of ``numpy.random.seed`` have been removed so that calls of qiskit functions do not affect results of future calls to ``numpy.random``"
msgstr ""

#: ../../release_notes.rst:11520
msgid "Fixed race condition occurring in the job monitor when ``job.queue_position()`` returns ``None``. ``None`` is a valid return from ``job.queue_position()``."
msgstr ""

#: ../../release_notes.rst:11524
msgid "Backend support for ``memory=True`` now checked when that kwarg is passed. ``QiskitError`` results if not supported."
msgstr ""

#: ../../release_notes.rst:11527
msgid "When transpiling without a coupling map, there were no check in the amount of qubits of the circuit to transpile. Now the transpile process checks that the backend has enough qubits to allocate the circuit."
msgstr ""

#: ../../release_notes.rst:11537
msgid "The ``qiskit.result.marginal_counts()`` function replaces a similar utility function in qiskit-ignis ``qiskit.ignis.verification.tomography.marginal_counts()``, which will be deprecated in a future qiskit-ignis release."
msgstr ""

#: ../../release_notes.rst:11542
msgid "All sympy parameter output type support have been been removed (or deprecated as noted) from qiskit-terra. This includes sympy type parameters in ``QuantumCircuit`` objects, qasm ast nodes, or ``Qobj`` objects."
msgstr ""

#: ../../release_notes.rst:11548 ../../release_notes.rst:12071
#: ../../release_notes.rst:12798
msgid "Aer 0.3"
msgstr ""

#: ../../release_notes.rst:11563
msgid "IBM Q Provider 0.4"
msgstr ""

#: ../../release_notes.rst:11568
msgid "The 0.4.0 release is the first release that makes use of all the features of the new IBM Q API. In particular, the ``IBMQJob`` class has been revamped in order to be able to retrieve more information from IBM Q, and a Job Manager class has been added for allowing a higher-level and more seamless usage of large or complex jobs. If you have not upgraded from the legacy IBM Q Experience or QConsole yet, please ensure to revisit the release notes for IBM Q Provider 0.3 (Qiskit 0.11) for more details on how to make the transition. The legacy accounts will no longer be supported as of this release."
msgstr ""

#: ../../release_notes.rst:11582
msgid "Job modifications"
msgstr ""

#: ../../release_notes.rst:11584
msgid "The ``IBMQJob`` class has been revised, and now mimics more closely to the contents of a remote job along with new features:"
msgstr ""

#: ../../release_notes.rst:11587
msgid "You can now assign a name to a job, by specifying ``IBMQBackend.run(..., job_name='...')`` when submitting a job. This name can be retrieved via ``IBMQJob.name()`` and can be used for filtering."
msgstr ""

#: ../../release_notes.rst:11590
msgid "Jobs can now be shared with other users at different levels (global, per hub, group or project) via an optional ``job_share_level`` parameter when submitting the job."
msgstr ""

#: ../../release_notes.rst:11593
msgid "``IBMQJob`` instances now have more attributes, reflecting the contents of the remote IBM Q jobs. This implies that new attributes introduced by the IBM Q API will automatically and immediately be available for use (for example, ``job.new_api_attribute``). The new attributes will be promoted to methods when they are considered stable (for example, ``job.name()``)."
msgstr ""

#: ../../release_notes.rst:11598
msgid "``.error_message()`` returns more information on why a job failed."
msgstr ""

#: ../../release_notes.rst:11599
msgid "``.queue_position()`` accepts a ``refresh`` parameter for forcing an update."
msgstr ""

#: ../../release_notes.rst:11600
msgid "``.result()`` accepts an optional ``partial`` parameter, for returning partial results, if any, of jobs that failed. Be aware that ``Result`` methods, such as ``get_counts()`` will raise an exception if applied on experiments that failed."
msgstr ""

#: ../../release_notes.rst:11605
msgid "Please note that the changes include some low-level modifications of the class. If you were creating the instances manually, note that:"
msgstr ""

#: ../../release_notes.rst:11608
msgid "the signature of the constructor has changed to account for the new features."
msgstr ""

#: ../../release_notes.rst:11609
msgid "the ``.submit()`` method can no longer be called directly, and jobs are expected to be submitted either via the synchronous ``IBMQBackend.run()`` or via the Job Manager."
msgstr ""

#: ../../release_notes.rst:11614
msgid "Job Manager"
msgstr ""

#: ../../release_notes.rst:11616
msgid "A new Job Manager (``IBMQJobManager``) has been introduced, as a higher-level mechanism for handling jobs composed of multiple circuits or pulse schedules. The Job Manager aims to provide a transparent interface, intelligently splitting the input into efficient units of work and taking full advantage of the different components. It will be expanded on upcoming versions, and become the recommended entry point for job submission."
msgstr ""

#: ../../release_notes.rst:11623
msgid "Its ``.run()`` method receives a list of circuits or pulse schedules, and returns a ``ManagedJobSet instance``, which can then be used to track the statuses and results of these jobs. For example::"
msgstr ""

#: ../../release_notes.rst:11651
msgid "provider.backends modifications"
msgstr ""

#: ../../release_notes.rst:11653
msgid "The ``provider.backends`` member, which was previously a function that returned a list of backends, has been promoted to a service. This implies that it can be used both in the previous way, as a ``.backends()`` method, and also as a ``.backends`` attribute with expanded capabilities:"
msgstr ""

#: ../../release_notes.rst:11658
msgid "it contains the existing backends from that provider as attributes, which can be used for autocompletion. For example::"
msgstr ""

#: ../../release_notes.rst:11663
msgid "is equivalent to::"
msgstr ""

#: ../../release_notes.rst:11667
msgid "the ``provider.backends.jobs()`` and ``provider.backends.retrieve_job()`` methods can be used for retrieving provider-wide jobs."
msgstr ""

#: ../../release_notes.rst:11672
msgid "Other changes"
msgstr ""

#: ../../release_notes.rst:11674
msgid "The ``backend.properties()`` function now accepts an optional ``datetime`` parameter. If specified, the function returns the backend properties closest to, but older than, the specified datetime filter."
msgstr ""

#: ../../release_notes.rst:11677
msgid "Some ``warnings`` have been toned down to ``logger.warning`` messages."
msgstr ""

#: ../../release_notes.rst:11682
msgid "Qiskit 0.13.0"
msgstr ""

#: ../../release_notes.rst:11685
msgid "Terra 0.10.0"
msgstr ""

#: ../../release_notes.rst:11692
msgid "The 0.10.0 release includes several new features and bug fixes. The biggest change for this release is the addition of initial support for using Qiskit with trapped ion trap backends."
msgstr ""

#: ../../release_notes.rst:11702
msgid "Introduced new methods in ``QuantumCircuit`` which allows the seamless adding or removing of measurements at the end of a circuit."
msgstr ""

#: ../../release_notes.rst:11708
msgid "``measure_all()``"
msgstr ""

#: ../../release_notes.rst:11706
msgid "Adds a ``barrier`` followed by a ``measure`` operation to all qubits in the circuit. Creates a ``ClassicalRegister`` of size equal to the number of qubits in the circuit, which store the measurements."
msgstr ""

#: ../../release_notes.rst:11714
msgid "``measure_active()``"
msgstr ""

#: ../../release_notes.rst:11711
msgid "Adds a ``barrier`` followed by a ``measure`` operation to all active qubits in the circuit. A qubit is active if it has at least one other operation acting upon it. Creates a ``ClassicalRegister`` of size equal to the number of active qubits in the circuit, which store the measurements."
msgstr ""

#: ../../release_notes.rst:11721
msgid "``remove_final_measurements()``"
msgstr ""

#: ../../release_notes.rst:11717
msgid "Removes all final measurements and preceeding ``barrier`` from a circuit. A measurement is considered \"final\" if it is not followed by any other operation, excluding barriers and other measurements. After the measurements are removed, if all of the classical bits in the ``ClassicalRegister`` are idle (have no operations attached to them), then the ``ClassicalRegister`` is removed."
msgstr ""

#: ../../release_notes.rst:11784
msgid "Initial support for executing experiments on ion trap backends has been added."
msgstr ""

#: ../../release_notes.rst:11787
msgid "An Rxx gate (rxx) and a global Mølmer–Sørensen gate (ms) have been added to the standard gate set."
msgstr ""

#: ../../release_notes.rst:11790
msgid "A Cnot to Rxx/Rx/Ry decomposer ``cnot_rxx_decompose`` and a single qubit Euler angle decomposer ``OneQubitEulerDecomposer`` have been added to the ``quantum_info.synthesis`` module."
msgstr ""

#: ../../release_notes.rst:11794
msgid "A transpiler pass ``MSBasisDecomposer`` has been added to unroll circuits defined over U3 and Cnot gates into a circuit defined over Rxx,Ry and Rx. This pass will be included in preset pass managers for backends which include the 'rxx' gate in their supported basis gates."
msgstr ""

#: ../../release_notes.rst:11799
msgid "The backends in ``qiskit.test.mock`` now contain a snapshot of real device calibration data. This is accessible via the ``properties()`` method for each backend. This can be used to test any code that depends on backend properties, such as noise-adaptive transpiler passes or device noise models for simulation. This will create a faster testing and development cycle without the need to go to live backends."
msgstr ""

#: ../../release_notes.rst:11806
msgid "Allows the Result class to return partial results. If a valid result schema is loaded that contains some experiments which succeeded and some which failed, this allows accessing the data from experiments that succeeded, while raising an exception for experiments that failed and displaying the appropriate error message for the failed results."
msgstr ""

#: ../../release_notes.rst:11812
msgid "An ``ax`` kwarg has been added to the following visualization functions:"
msgstr ""

#: ../../release_notes.rst:11814
msgid "``qiskit.visualization.plot_histogram``"
msgstr ""

#: ../../release_notes.rst:11815
msgid "``qiskit.visualization.plot_state_paulivec``"
msgstr ""

#: ../../release_notes.rst:11816
msgid "``qiskit.visualization.plot_state_qsphere``"
msgstr ""

#: ../../release_notes.rst:11817
msgid "``qiskit.visualization.circuit_drawer`` (``mpl`` backend only)"
msgstr ""

#: ../../release_notes.rst:11818
msgid "``qiskit.QuantumCircuit.draw`` (``mpl`` backend only)"
msgstr ""

#: ../../release_notes.rst:11820
msgid "This kwarg is used to pass in a ``matplotlib.axes.Axes`` object to the visualization functions. This enables integrating these visualization functions into a larger visualization workflow. Also, if an `ax` kwarg is specified then there is no return from the visualization functions."
msgstr ""

#: ../../release_notes.rst:11825
msgid "An ``ax_real`` and ``ax_imag`` kwarg has been added to the following visualization functions:"
msgstr ""

#: ../../release_notes.rst:11828
msgid "``qiskit.visualization.plot_state_hinton``"
msgstr ""

#: ../../release_notes.rst:11829
msgid "``qiskit.visualization.plot_state_city``"
msgstr ""

#: ../../release_notes.rst:11831
msgid "These new kargs work the same as the newly added ``ax`` kwargs for other visualization functions. However because these plots use two axes (one for the real component, the other for the imaginary component). Having two kwargs also provides the flexibility to only generate a visualization for one of the components instead of always doing both. For example::"
msgstr ""

#: ../../release_notes.rst:11844
msgid "will only generate a plot of the real component."
msgstr ""

#: ../../release_notes.rst:11846
msgid "A given pass manager now can be edited with the new method `replace`. This method allows to replace a particular stage in a pass manager, which can be handy when dealing with preset pass managers. For example, let's edit the layout selector of the pass manager used at optimization level 0:"
msgstr ""

#: ../../release_notes.rst:11867
msgid "The layout selection is set in the stage `[1]`. Let's replace it with `DenseLayout`:"
msgstr ""

#: ../../release_notes.rst:11883
msgid "If you want to replace it without any condition, you can use set-item shortcut:"
msgstr ""

#: ../../release_notes.rst:11897 ../../release_notes.rst:12382
msgid "Introduced a new pulse command ``Delay`` which may be inserted into a pulse ``Schedule``. This command accepts a ``duration`` and may be added to any ``Channel``. Other commands may not be scheduled on a channel during a delay."
msgstr ""

#: ../../release_notes.rst:11901 ../../release_notes.rst:12386
msgid "The delay can be added just like any other pulse command. For example::"
msgstr ""

#: ../../release_notes.rst:11922
msgid "One may also pass additional channels to be padded and a time to pad until, for example::"
msgstr ""

#: ../../release_notes.rst:11951
msgid "Assignments and modifications to the ``data`` attribute of ``qiskit.QuantumCircuit`` objects are now validated following the same rules used throughout the ``QuantumCircuit`` API. This was done to improve the performance of the circuits API since we can now assume the ``data`` attribute is in a known format. If you were manually modifying the ``data`` attribute of a circuit object before this may no longer work if your modifications resulted in a data structure other than the list of instructions with context in the format ``[(instruction, qargs, cargs)]``"
msgstr ""

#: ../../release_notes.rst:11960
msgid "The transpiler default passmanager for optimization level 2 now uses the ``DenseLayout`` layout selection mechanism by default instead of ``NoiseAdaptiveLayout``. The ``Denselayout`` pass has also been modified to be made noise-aware."
msgstr ""

#: ../../release_notes.rst:11965
msgid "The deprecated ``DeviceSpecification`` class has been removed. Instead you should use the ``PulseChannelSpec``. For example, you can run something like::"
msgstr ""

#: ../../release_notes.rst:11972
msgid "The deprecated module ``qiskit.pulse.ops`` has been removed. Use ``Schedule`` and ``Instruction`` methods directly. For example, rather than::"
msgstr ""

#: ../../release_notes.rst:11979
msgid "Instead please use::"
msgstr ""

#: ../../release_notes.rst:11984
msgid "This same pattern applies to other ``ops`` functions: ``insert``, ``shift``, ``append``, and ``flatten``."
msgstr ""

#: ../../release_notes.rst:11993
msgid "Using the ``control`` property of ``qiskit.circuit.Instruction`` for classical control is now deprecated. In the future this property will be used for quantum control. Classically conditioned operations will instead be handled by the ``condition`` property of ``qiskit.circuit.Instruction``."
msgstr ""

#: ../../release_notes.rst:11998
msgid "Support for setting ``qiskit.circuit.Instruction`` parameters with an object of type ``qiskit.qasm.node.Node`` has been deprecated. ``Node`` objects that were previously used as parameters should be converted to a supported type prior to initializing a new ``Instruction`` object or calling the ``Instruction.params`` setter. Supported types are ``int``, ``float``, ``complex``, ``str``, ``qiskit.circuit.ParameterExpression``, or ``numpy.ndarray``."
msgstr ""

#: ../../release_notes.rst:12006
msgid "In the qiskit 0.9.0 release the representation of bits (both qubits and classical bits) changed from tuples of the form ``(register, index)`` to be instances of the classes ``qiskit.circuit.Qubit`` and ``qiskit.circuit.Clbit``. For backwards compatibility comparing the equality between a legacy tuple and the bit classes was supported as everything transitioned from tuples to being objects. This support is now deprecated and will be removed in the future. Everything should use the bit classes instead of tuples moving forward."
msgstr ""

#: ../../release_notes.rst:12015
msgid "When the ``mpl`` output is used for either ``qiskit.QuantumCircuit.draw()`` or ``qiskit.visualization.circuit_drawer()`` and the ``style`` kwarg is used, passing in unsupported dictionary keys as part of the ``style``` dictionary is now deprecated. Where these unknown arguments were previously silently ignored, in the future, unsupported keys will raise an exception."
msgstr ""

#: ../../release_notes.rst:12021
msgid "The ``line length`` kwarg for the ``qiskit.QuantumCircuit.draw()`` method and the ``qiskit.visualization.circuit_drawer()`` function with the text output mode is deprecated. It has been replaced by the ``fold`` kwarg which will behave identically for the text output mode (but also now supports the mpl output mode too). ``line_length`` will be removed in a future release so calls should be updated to use ``fold`` instead."
msgstr ""

#: ../../release_notes.rst:12028
msgid "The ``fold`` field in the ``style`` dict kwarg for the ``qiskit.QuantumCircuit.draw()`` method and the ``qiskit.visualization.circuit_drawer()`` function has been deprecated. It has been replaced by the ``fold`` kwarg on both functions. This kwarg behaves identically to the field in the style dict."
msgstr ""

#: ../../release_notes.rst:12040
msgid "Instructions layering which underlies all types of circuit drawing has changed to address right/left justification. This sometimes results in output which is topologically equivalent to the rendering in prior versions but visually different than previously rendered. Fixes `issue #2802 <https://github.com/Qiskit/qiskit-terra/issues/2802>`_"
msgstr ""

#: ../../release_notes.rst:12046
msgid "Add ``memory_slots`` to ``QobjExperimentHeader`` of pulse Qobj. This fixes a bug in the data format of ``meas_level=2`` results of pulse experiments. Measured quantum states are returned as a bit string with zero padding based on the number set for ``memory_slots``."
msgstr ""

#: ../../release_notes.rst:12051
msgid "Fixed the visualization of the rzz gate in the latex circuit drawer to match the cu1 gate to reflect the symmetry in the rzz gate. The fix is based on the cds command of the qcircuit latex package. Fixes `issue #1957 <https://github.com/Qiskit/qiskit-terra/issues/1957>`_"
msgstr ""

#: ../../release_notes.rst:12062
msgid "``matplotlib.figure.Figure`` objects returned by visualization functions are no longer always closed by default. Instead the returned figure objects are only closed if the configured matplotlib backend is an inline jupyter backend(either set with ``%matplotlib inline`` or ``%matplotlib notebook``). Output figure objects are still closed with these backends to avoid duplicate outputs in jupyter notebooks (which is why the ``Figure.close()`` were originally added)."
msgstr ""

#: ../../release_notes.rst:12086 ../../release_notes.rst:12938
#: ../../release_notes.rst:12972 ../../release_notes.rst:13022
msgid "IBM Q Provider 0.3"
msgstr ""

#: ../../release_notes.rst:12092
msgid "Qiskit 0.12.0"
msgstr ""

#: ../../release_notes.rst:12097
msgid "Terra 0.9"
msgstr ""

#: ../../release_notes.rst:12104
msgid "The 0.9 release includes many new features and many bug fixes. The biggest changes for this release are new debugging capabilities for PassManagers. This includes a function to visualize a PassManager, the ability to add a callback function to a PassManager, and logging of passes run in the PassManager. Additionally, this release standardizes the way that you can set an initial layout for your circuit. So now you can leverage ``initial_layout`` the kwarg parameter on ``qiskit.compiler.transpile()`` and ``qiskit.execute()`` and the qubits in the circuit will get laid out on the desire qubits on the device. Visualization of circuits will now also show this clearly when visualizing a circuit that has been transpiled with a layout."
msgstr ""

#: ../../release_notes.rst:12120
msgid "A ``DAGCircuit`` object (i.e. the graph representation of a QuantumCircuit where operation dependencies are explicit) can now be visualized with the ``.draw()`` method. This is in line with Qiskit's philosophy of easy visualization. Other objects which support a ``.draw()`` method are ``QuantumCircuit``, ``PassManager``, and ``Schedule``."
msgstr ""

#: ../../release_notes.rst:12126
msgid "Added a new visualization function ``qiskit.visualization.plot_error_map()`` to plot the error map for a given backend. It takes in a backend object from the qiskit-ibmq-provider and will plot the current error map for that device."
msgstr ""

#: ../../release_notes.rst:12131
msgid "Both ``qiskit.QuantumCircuit.draw()`` and ``qiskit.visualization.circuit_drawer()`` now support annotating the qubits in the visualization with layout information. If the ``QuantumCircuit`` object being drawn includes layout metadata (which is normally only set on the circuit output from ``transpile()`` calls) then by default that layout will be shown on the diagram. This is done for all circuit drawer backends. For example::"
msgstr ""

#: ../../release_notes.rst:12160
msgid "will yield a diagram like::"
msgstr ""

#: ../../release_notes.rst:12195
msgid "If you do not want the layout to be shown on transpiled circuits (or any other circuits with a layout set) there is a new boolean kwarg for both functions, ``with_layout`` (which defaults ``True``), which when set ``False`` will disable the layout annotation in the output circuits."
msgstr ""

#: ../../release_notes.rst:12200
msgid "A new analysis pass ``CountOpsLongest`` was added to retrieve the number of operations on the longest path of the DAGCircuit. When used it will add a ``count_ops_longest_path`` key to the property set dictionary. You can add it to your a passmanager with something like::"
msgstr ""

#: ../../release_notes.rst:12212
msgid "and then access the longest path via the property set value with something like::"
msgstr ""

#: ../../release_notes.rst:12220
msgid "which will set a condition on that pass based on the longest path."
msgstr ""

#: ../../release_notes.rst:12222
msgid "Two new functions, ``sech()`` and ``sech_deriv()`` were added to the pulse library module ``qiskit.pulse.pulse_lib`` for creating an unnormalized hyperbolic secant ``SamplePulse`` object and an unnormalized hyperbolic secant derviative ``SamplePulse`` object respectively."
msgstr ""

#: ../../release_notes.rst:12227
msgid "A new kwarg option ``vertical_compression`` was added to the ``QuantumCircuit.draw()`` method and the ``qiskit.visualization.circuit_drawer()`` function. This option only works with the ``text`` backend. This option can be set to either ``high``, ``medium`` (the default), or ``low`` to adjust how much vertical space is used by the output visualization."
msgstr ""

#: ../../release_notes.rst:12234
msgid "A new kwarg boolean option ``idle_wires`` was added to the ``QuantumCircuit.draw()`` method and the ``qiskit.visualization.circuit_drawer()`` function. It works for all drawer backends. When ``idle_wires`` is set False in a drawer call the drawer will not draw any bits that do not have any circuit elements in the output quantum circuit visualization."
msgstr ""

#: ../../release_notes.rst:12241
msgid "A new PassManager visualizer function ``qiskit.visualization.pass_mamanger_drawer()`` was added. This function takes in a PassManager object and will generate a flow control diagram of all the passes run in the PassManager."
msgstr ""

#: ../../release_notes.rst:12246
msgid "When creating a PassManager you can now specify a callback function that if specified will be run after each pass is executed. This function gets passed a set of kwargs on each call with the state of the pass manager after each pass execution. Currently these kwargs are:"
msgstr ""

#: ../../release_notes.rst:12251
msgid "``pass_`` (``Pass``): the pass being run"
msgstr ""

#: ../../release_notes.rst:12252
msgid "``dag`` (``DAGCircuit``): the dag output of the pass"
msgstr ""

#: ../../release_notes.rst:12253
msgid "``time`` (``float``): the time to execute the pass"
msgstr ""

#: ../../release_notes.rst:12254
msgid "``property_set`` (``PropertySet``): the property set"
msgstr ""

#: ../../release_notes.rst:12255
msgid "``count`` (``int``): the index for the pass execution"
msgstr ""

#: ../../release_notes.rst:12257
msgid "However, it's worth noting that while these arguments are set for the 0.9 release they expose the internals of the pass manager and are subject to change in future release."
msgstr ""

#: ../../release_notes.rst:12261
msgid "For example you can use this to create a callback function that will visualize the circuit output after each pass is executed::"
msgstr ""

#: ../../release_notes.rst:12271
msgid "Additionally you can specify the callback function when using ``qiskit.compiler.transpile()``::"
msgstr ""

#: ../../release_notes.rst:12281
msgid "A new method ``filter()`` was added to the ``qiskit.pulse.Schedule`` class. This enables filtering the instructions in a schedule. For example, filtering by instruction type::"
msgstr ""

#: ../../release_notes.rst:12295
msgid "Additional decomposition methods for several types of gates. These methods will use different decomposition techniques to break down a gate into a sequence of CNOTs and single qubit gates. The following methods are added:"
msgstr ""

#: ../../release_notes.rst:12301
msgid "Method"
msgstr ""

#: ../../release_notes.rst:12301
msgid "Description"
msgstr ""

#: ../../release_notes.rst:12303
msgid "``QuantumCircuit.iso()``"
msgstr ""

#: ../../release_notes.rst:12303
msgid "Add an arbitrary isometry from m to n qubits to a circuit. This allows for attaching arbitrary unitaries on n qubits (m=n) or to prepare any state of n qubits (m=0)"
msgstr ""

#: ../../release_notes.rst:12309
msgid "``QuantumCircuit.diag_gate()``"
msgstr ""

#: ../../release_notes.rst:12309
msgid "Add a diagonal gate to the circuit"
msgstr ""

#: ../../release_notes.rst:12311
msgid "``QuantumCircuit.squ()``"
msgstr ""

#: ../../release_notes.rst:12311
msgid "Decompose an arbitrary 2x2 unitary into three rotation gates and add to a circuit"
msgstr ""

#: ../../release_notes.rst:12315
msgid "``QuantumCircuit.ucg()``"
msgstr ""

#: ../../release_notes.rst:12315
msgid "Attach an uniformly controlled gate (also called a multiplexed gate) to a circuit"
msgstr ""

#: ../../release_notes.rst:12319
msgid "``QuantumCircuit.ucx()``"
msgstr ""

#: ../../release_notes.rst:12319
msgid "Attach a uniformly controlled (also called multiplexed) Rx rotation gate to a circuit"
msgstr ""

#: ../../release_notes.rst:12323
msgid "``QuantumCircuit.ucy()``"
msgstr ""

#: ../../release_notes.rst:12323
msgid "Attach a uniformly controlled (also called multiplexed) Ry rotation gate to a circuit"
msgstr ""

#: ../../release_notes.rst:12327
msgid "``QuantumCircuit.ucz()``"
msgstr ""

#: ../../release_notes.rst:12327
msgid "Attach a uniformly controlled (also called multiplexed) Rz rotation gate to a circuit"
msgstr ""

#: ../../release_notes.rst:12332
msgid "Addition of Gray-Synth and Patel–Markov–Hayes algorithms for synthesis of CNOT-Phase and CNOT-only linear circuits. These functions allow the synthesis of circuits that consist of only CNOT gates given a linear function or a circuit that consists of only CNOT and phase gates given a matrix description."
msgstr ""

#: ../../release_notes.rst:12338
msgid "A new function ``random_circuit`` was added to the ``qiskit.circuit.random`` module. This function will generate a random circuit of a specified size by randomly selecting different gates and adding them to the circuit. For example, you can use this to generate a 5-qubit circuit with a depth of 10 using::"
msgstr ""

#: ../../release_notes.rst:12348
msgid "A new kwarg ``output_names`` was added to the ``qiskit.compiler.transpile()`` function. This kwarg takes in a string or a list of strings and uses those as the value of the circuit name for the output circuits that get returned by the ``transpile()`` call. For example::"
msgstr ""

#: ../../release_notes.rst:12359
msgid "the ``name`` attribute on tcirc_a and tcirc_b will be ``'Circuit A'`` and ``'Circuit B'`` respectively."
msgstr ""

#: ../../release_notes.rst:12362
msgid "A new method ``equiv()`` was added to the ``qiskit.quantum_info.Operator`` and ``qiskit.quantum_info.Statevector`` classes. These methods are used to check whether a second ``Operator`` object or ``Statevector`` is equivalent up to global phase."
msgstr ""

#: ../../release_notes.rst:12367
msgid "The user config file has several new options:"
msgstr ""

#: ../../release_notes.rst:12369
msgid "The ``circuit_drawer`` field now accepts an `auto` value. When set as the value for the ``circuit_drawer`` field the default drawer backend will be `mpl` if it is available, otherwise the `text` backend will be used."
msgstr ""

#: ../../release_notes.rst:12373
msgid "A new field ``circuit_mpl_style`` can be used to set the default style used by the matplotlib circuit drawer. Valid values for this field are ``bw`` and ``default`` to set the default to a black and white or the default color style respectively."
msgstr ""

#: ../../release_notes.rst:12377
msgid "A new field ``transpile_optimization_level`` can be used to set the default transpiler optimization level to use for calls to ``qiskit.compiler.transpile()``. The value can be set to either 0, 1, 2, or 3."
msgstr ""

#: ../../release_notes.rst:12402
msgid "The previously deprecated ``qiskit._util`` module has been removed. ``qiskit.util`` should be used instead."
msgstr ""

#: ../../release_notes.rst:12405
msgid "The ``QuantumCircuit.count_ops()`` method now returns an ``OrderedDict`` object instead of a ``dict``. This should be compatible for most use cases since ``OrderedDict`` is a ``dict`` subclass. However type checks and other class checks might need to be updated."
msgstr ""

#: ../../release_notes.rst:12410
msgid "The ``DAGCircuit.width()`` method now returns the total number quantum bits and classical bits. Before it would only return the number of quantum bits. If you require just the number of quantum bits you can use ``DAGCircuit.num_qubits()`` instead."
msgstr ""

#: ../../release_notes.rst:12415
msgid "The function ``DAGCircuit.num_cbits()`` has been removed. Instead you can use ``DAGCircuit.num_clbits()``."
msgstr ""

#: ../../release_notes.rst:12418
msgid "Individual quantum bits and classical bits are no longer represented as ``(register, index)`` tuples. They are now instances of `Qubit` and `Clbit` classes. If you're dealing with individual bits make sure that you update any usage or type checks to look for these new classes instead of tuples."
msgstr ""

#: ../../release_notes.rst:12424
msgid "The preset passmanager classes ``qiskit.transpiler.preset_passmanagers.default_pass_manager`` and ``qiskit.transpiler.preset_passmanagers.default_pass_manager_simulator`` (which were the previous default pass managers for ``qiskit.compiler.transpile()`` calls) have been removed. If you were manually using this pass managers switch to the new default, ``qiskit.transpile.preset_passmanagers.level1_pass_manager``."
msgstr ""

#: ../../release_notes.rst:12432
msgid "The ``LegacySwap`` pass has been removed. If you were using it in a custom pass manager, it's usage can be replaced by the ``StochasticSwap`` pass, which is a faster more stable version. All the preset passmanagers have been updated to use ``StochasticSwap`` pass instead of the ``LegacySwap``."
msgstr ""

#: ../../release_notes.rst:12437
msgid "The following deprecated ``qiskit.dagcircuit.DAGCircuit`` methods have been removed:"
msgstr ""

#: ../../release_notes.rst:12440
msgid "``DAGCircuit.get_qubits()`` - Use ``DAGCircuit.qubits()`` instead"
msgstr ""

#: ../../release_notes.rst:12441
msgid "``DAGCircuit.get_bits()`` - Use ``DAGCircuit.clbits()`` instead"
msgstr ""

#: ../../release_notes.rst:12442
msgid "``DAGCircuit.qasm()`` - Use a combination of ``qiskit.converters.dag_to_circuit()`` and ``QuantumCircuit.qasm()``. For example::"
msgstr ""

#: ../../release_notes.rst:12451
msgid "``DAGCircuit.get_op_nodes()`` - Use ``DAGCircuit.op_nodes()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``op_nodes()`` instead of the list of tuples previously returned by ``get_op_nodes()``."
msgstr ""

#: ../../release_notes.rst:12455
msgid "``DAGCircuit.get_gate_nodes()`` - Use ``DAGCircuit.gate_nodes()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``gate_nodes()`` instead of the list of tuples previously returned by ``get_gate_nodes()``."
msgstr ""

#: ../../release_notes.rst:12459
msgid "``DAGCircuit.get_named_nodes()`` - Use ``DAGCircuit.named_nodes()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``named_nodes()`` instead of the list of node_ids previously returned by ``get_named_nodes()``."
msgstr ""

#: ../../release_notes.rst:12463
msgid "``DAGCircuit.get_2q_nodes()`` - Use ``DAGCircuit.twoQ_gates()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``twoQ_gates()`` instead of the list of data_dicts previously returned by ``get_2q_nodes()``."
msgstr ""

#: ../../release_notes.rst:12467
msgid "``DAGCircuit.get_3q_or_more_nodes()`` - Use ``DAGCircuit.threeQ_or_more_gates()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``threeQ_or_more_gates()`` instead of the list of tuples previously returned by ``get_3q_or_more_nodes()``."
msgstr ""

#: ../../release_notes.rst:12472
msgid "The following ``qiskit.dagcircuit.DAGCircuit`` methods had deprecated support for accepting a ``node_id`` as a parameter. This has been removed and now only ``DAGNode`` objects are accepted as input:"
msgstr ""

#: ../../release_notes.rst:12476
msgid "``successors()``"
msgstr ""

#: ../../release_notes.rst:12477
msgid "``predecessors()``"
msgstr ""

#: ../../release_notes.rst:12478
msgid "``ancestors()``"
msgstr ""

#: ../../release_notes.rst:12479
msgid "``descendants()``"
msgstr ""

#: ../../release_notes.rst:12480
msgid "``bfs_successors()``"
msgstr ""

#: ../../release_notes.rst:12481
msgid "``quantum_successors()``"
msgstr ""

#: ../../release_notes.rst:12482
msgid "``remove_op_node()``"
msgstr ""

#: ../../release_notes.rst:12483
msgid "``remove_ancestors_of()``"
msgstr ""

#: ../../release_notes.rst:12484
msgid "``remove_descendants_of()``"
msgstr ""

#: ../../release_notes.rst:12485
msgid "``remove_nonancestors_of()``"
msgstr ""

#: ../../release_notes.rst:12486
msgid "``remove_nondescendants_of()``"
msgstr ""

#: ../../release_notes.rst:12487
msgid "``substitute_node_with_dag()``"
msgstr ""

#: ../../release_notes.rst:12489
msgid "The ``qiskit.dagcircuit.DAGCircuit`` method ``rename_register()`` has been removed. This was unused by all the qiskit code. If you were relying on it externally you'll have to re-implement is an external function."
msgstr ""

#: ../../release_notes.rst:12493
msgid "The ``qiskit.dagcircuit.DAGCircuit`` property ``multi_graph`` has been removed. Direct access to the underlying ``networkx`` ``multi_graph`` object isn't supported anymore. The API provided by the ``DAGCircuit`` class should be used instead."
msgstr ""

#: ../../release_notes.rst:12498
msgid "The deprecated exception class ``qiskit.qiskiterror.QiskitError`` has been removed. Instead you should use ``qiskit.exceptions.QiskitError``."
msgstr ""

#: ../../release_notes.rst:12501
msgid "The boolean kwargs, ``ignore_requires`` and ``ignore_preserves`` from the ``qiskit.transpiler.PassManager`` constructor have been removed. These are no longer valid options."
msgstr ""

#: ../../release_notes.rst:12505
msgid "The module ``qiskit.tools.logging`` has been removed. This module was not used by anything and added nothing over the interfaces that Python's standard library ``logging`` module provides. If you want to set a custom formatter for logging use the standard library ``logging`` module instead."
msgstr ""

#: ../../release_notes.rst:12510
msgid "The ``CompositeGate`` class has been removed. Instead you should directly create a instruction object from a circuit and append that to your circuit. For example, you can run something like::"
msgstr ""

#: ../../release_notes.rst:12520
msgid "The previously deprecated kwargs, ``seed`` and ``config`` for ``qiskit.compiler.assemble()`` have been removed use ``seed_simulator`` and ``run_config`` respectively instead."
msgstr ""

#: ../../release_notes.rst:12524
msgid "The previously deprecated converters ``qiskit.converters.qobj_to_circuits()`` and ``qiskit.converters.circuits_to_qobj()`` have been removed. Use ``qiskit.assembler.disassemble()`` and ``qiskit.compiler.assemble()`` respectively instead."
msgstr ""

#: ../../release_notes.rst:12530
msgid "The previously deprecated kwarg ``seed_mapper`` for ``qiskit.compiler.transpile()`` has been removed. Instead you should use ``seed_transpiler``"
msgstr ""

#: ../../release_notes.rst:12534
msgid "The previously deprecated kwargs ``seed``, ``seed_mapper``, ``config``, and ``circuits`` for the ``qiskit.execute()`` function have been removed. Use ``seed_simulator``, ``seed_transpiler``, ``run_config``, and ``experiments`` arguments respectively instead."
msgstr ""

#: ../../release_notes.rst:12539
msgid "The previously deprecated ``qiskit.tools.qcvv`` module has been removed use qiskit-ignis instead."
msgstr ""

#: ../../release_notes.rst:12542
msgid "The previously deprecated functions ``qiskit.transpiler.transpile()`` and ``qiskit.transpiler.transpile_dag()`` have been removed. Instead you should use ``qiskit.compiler.transpile``. If you were using ``transpile_dag()`` this can be replaced by running::"
msgstr ""

#: ../../release_notes.rst:12551
msgid "The previously deprecated function ``qiskit.compile()`` has been removed instead you should use ``qiskit.compiler.transpile()`` and ``qiskit.compiler.assemble()``."
msgstr ""

#: ../../release_notes.rst:12555
#, python-format
msgid "The jupyter cell magic ``%%qiskit_progress_bar`` from ``qiskit.tools.jupyter`` has been changed to a line magic. This was done to better reflect how the magic is used and how it works. If you were using the ``%%qiskit_progress_bar`` cell magic in an existing notebook, you will have to update this to be a line magic by changing it to be ``%qiskit_progress_bar`` instead. Everything else should behave identically."
msgstr ""

#: ../../release_notes.rst:12563
msgid "The deprecated function ``qiskit.tools.qi.qi.random_unitary_matrix()`` has been removed. You should use the ``qiskit.quantum_info.random.random_unitary()`` function instead."
msgstr ""

#: ../../release_notes.rst:12567
msgid "The deprecated function ``qiskit.tools.qi.qi.random_density_matrix()`` has been removed. You should use the ``qiskit.quantum_info.random.random_density_matrix()`` function instead."
msgstr ""

#: ../../release_notes.rst:12572
msgid "The deprecated function ``qiskit.tools.qi.qi.purity()`` has been removed. You should the ``qiskit.quantum_info.purity()`` function instead."
msgstr ""

#: ../../release_notes.rst:12575
msgid "The deprecated ``QuantumCircuit._attach()`` method has been removed. You should use ``QuantumCircuit.append()`` instead."
msgstr ""

#: ../../release_notes.rst:12578
msgid "The ``qiskit.qasm.Qasm`` method ``get_filename()`` has been removed. You can use the ``return_filename()`` method instead."
msgstr ""

#: ../../release_notes.rst:12581
msgid "The deprecated ``qiskit.mapper`` module has been removed. The list of functions and classes with their alternatives are:"
msgstr ""

#: ../../release_notes.rst:12584
msgid "``qiskit.mapper.CouplingMap``: ``qiskit.transpiler.CouplingMap`` should be used instead."
msgstr ""

#: ../../release_notes.rst:12586
msgid "``qiskit.mapper.Layout``: ``qiskit.transpiler.Layout`` should be used instead"
msgstr ""

#: ../../release_notes.rst:12588
msgid "``qiskit.mapper.compiling.euler_angles_1q()``: ``qiskit.quantum_info.synthesis.euler_angles_1q()`` should be used instead"
msgstr ""

#: ../../release_notes.rst:12591
msgid "``qiskit.mapper.compiling.two_qubit_kak()``: ``qiskit.quantum_info.synthesis.two_qubit_cnot_decompose()`` should be used instead."
msgstr ""

#: ../../release_notes.rst:12595
msgid "The deprecated exception classes ``qiskit.mapper.exceptions.CouplingError`` and ``qiskit.mapper.exceptions.LayoutError`` don't have an alternative since they serve no purpose without a ``qiskit.mapper`` module."
msgstr ""

#: ../../release_notes.rst:12599
msgid "The ``qiskit.pulse.samplers`` module has been moved to ``qiskit.pulse.pulse_lib.samplers``. You will need to update imports of ``qiskit.pulse.samplers`` to ``qiskit.pulse.pulse_lib.samplers``."
msgstr ""

#: ../../release_notes.rst:12603
msgid "`seaborn`_ is now a dependency for the function ``qiskit.visualization.plot_state_qsphere()``. It is needed to generate proper angular color maps for the visualization. The ``qiskit-terra[visualization]`` extras install target has been updated to install ``seaborn>=0.9.0`` If you are using visualizations and specifically the ``plot_state_qsphere()`` function you can use that to install ``seaborn`` or just manually run ``pip install seaborn>=0.9.0``"
msgstr ""

#: ../../release_notes.rst:12613
msgid "The previously deprecated functions ``qiksit.visualization.plot_state`` and ``qiskit.visualization.iplot_state`` have been removed. Instead you should use the specific function for each plot type. You can refer to the following tables to map the deprecated functions to their equivalent new ones:"
msgstr ""

#: ../../release_notes.rst:12620 ../../release_notes.rst:13762
#: ../../release_notes.rst:14042 ../../release_notes.rst:14079
msgid "Qiskit Terra 0.6"
msgstr ""

#: ../../release_notes.rst:12620 ../../release_notes.rst:13762
msgid "Qiskit Terra 0.7+"
msgstr ""

#: ../../release_notes.rst:12622 ../../release_notes.rst:13764
msgid "plot_state(rho)"
msgstr ""

#: ../../release_notes.rst:12622 ../../release_notes.rst:12623
#: ../../release_notes.rst:13764 ../../release_notes.rst:13765
msgid "plot_state_city(rho)"
msgstr ""

#: ../../release_notes.rst:12623 ../../release_notes.rst:13765
msgid "plot_state(rho, method='city')"
msgstr ""

#: ../../release_notes.rst:12624 ../../release_notes.rst:13766
msgid "plot_state(rho, method='paulivec')"
msgstr ""

#: ../../release_notes.rst:12624 ../../release_notes.rst:13766
msgid "plot_state_paulivec(rho)"
msgstr ""

#: ../../release_notes.rst:12625 ../../release_notes.rst:13767
msgid "plot_state(rho, method='qsphere')"
msgstr ""

#: ../../release_notes.rst:12625 ../../release_notes.rst:13767
msgid "plot_state_qsphere(rho)"
msgstr ""

#: ../../release_notes.rst:12626 ../../release_notes.rst:13768
msgid "plot_state(rho, method='bloch')"
msgstr ""

#: ../../release_notes.rst:12626 ../../release_notes.rst:13768
msgid "plot_bloch_multivector(rho)"
msgstr ""

#: ../../release_notes.rst:12627 ../../release_notes.rst:13769
msgid "plot_state(rho, method='hinton')"
msgstr ""

#: ../../release_notes.rst:12627 ../../release_notes.rst:13769
msgid "plot_state_hinton(rho)"
msgstr ""

#: ../../release_notes.rst:12630
msgid "The ``pylatexenc`` and ``pillow`` dependencies for the ``latex`` and ``latex_source`` circuit drawer backends are no longer listed as requirements. If you are going to use the latex circuit drawers ensure you have both packages installed or use the setuptools extras to install it along with qiskit-terra::"
msgstr ""

#: ../../release_notes.rst:12638
msgid "The root of the ``qiskit`` namespace will now emit a warning on import if either ``qiskit.IBMQ`` or ``qiskit.Aer`` could not be setup. This will occur whenever anything in the ``qiskit`` namespace is imported. These warnings were added to make it clear for users up front if they're running qiskit and the qiskit-aer and qiskit-ibmq-provider packages could not be found. It's not always clear if the packages are missing or python packaging/pip installed an element incorrectly until you go to use them and get an empty ``ImportError``. These warnings should make it clear up front if there these commonly used aliases are missing."
msgstr ""

#: ../../release_notes.rst:12648
msgid "However, for users that choose not to use either qiskit-aer or qiskit-ibmq-provider this might cause additional noise. For these users these warnings are easily suppressable using Python's standard library ``warnings``. Users can suppress the warnings by putting these two lines before any imports from qiskit::"
msgstr ""

#: ../../release_notes.rst:12658
msgid "This will suppress the warnings emitted by not having qiskit-aer or qiskit-ibmq-provider installed, but still preserve any other warnings emitted by qiskit or any other package."
msgstr ""

#: ../../release_notes.rst:12668
msgid "The ``U`` and ``CX`` gates have been deprecated. If you're using these gates in your code you should update them to use ``u3`` and ``cx`` instead. For example, if you're using the circuit gate functions ``circuit.u_base()`` and ``circuit.cx_base()`` you should update these to be ``circuit.u3()`` and ``circuit.cx()`` respectively."
msgstr ""

#: ../../release_notes.rst:12674
msgid "The ``u0`` gate has been deprecated in favor of using multiple ``iden`` gates and it will be removed in the future. If you're using the ``u0`` gate in your circuit you should update your calls to use ``iden``. For example, f you were using ``circuit.u0(2)`` in your circuit before that should be updated to be::"
msgstr ""

#: ../../release_notes.rst:12683
msgid "instead."
msgstr ""

#: ../../release_notes.rst:12685
msgid "The ``qiskit.pulse.DeviceSpecification`` class is deprecated now. Instead you should use ``qiskit.pulse.PulseChannelSpec``."
msgstr ""

#: ../../release_notes.rst:12688
msgid "Accessing a ``qiskit.circuit.Qubit``, ``qiskit.circuit.Clbit``, or ``qiskit.circuit.Bit`` class by index is deprecated (for compatibility with the ``(register, index)`` tuples that these classes replaced). Instead you should use the ``register`` and ``index`` attributes."
msgstr ""

#: ../../release_notes.rst:12693
msgid "Passing in a bit to the ``qiskit.QuantumCircuit`` method ``append`` as a tuple ``(register, index)`` is deprecated. Instead bit objects should be used directly."
msgstr ""

#: ../../release_notes.rst:12697
msgid "Accessing the elements of a ``qiskit.transpiler.Layout`` object with a tuple ``(register, index)`` is deprecated. Instead a bit object should be used directly."
msgstr ""

#: ../../release_notes.rst:12701
msgid "The ``qiskit.transpiler.Layout`` constructor method ``qiskit.transpiler.Layout.from_tuplelist()`` is deprecated. Instead the constructor ``qiskit.transpiler.Layout.from_qubit_list()`` should be used."
msgstr ""

#: ../../release_notes.rst:12705
msgid "The module ``qiskit.pulse.ops`` has been deprecated. All the functions it provided:"
msgstr ""

#: ../../release_notes.rst:12708
msgid "``union``"
msgstr ""

#: ../../release_notes.rst:12709
msgid "``flatten``"
msgstr ""

#: ../../release_notes.rst:12710
msgid "``shift``"
msgstr ""

#: ../../release_notes.rst:12711
msgid "``insert``"
msgstr ""

#: ../../release_notes.rst:12712
msgid "``append``"
msgstr ""

#: ../../release_notes.rst:12714
msgid "have equivalent methods available directly on the ``qiskit.pulse.Schedule`` and ``qiskit.pulse.Instruction`` classes. Those methods should be used instead."
msgstr ""

#: ../../release_notes.rst:12718
msgid "The ``qiskit.qasm.Qasm`` method ``get_tokens()`` is deprecated. Instead you should use the ``generate_tokens()`` method."
msgstr ""

#: ../../release_notes.rst:12721
msgid "The ``qiskit.qasm.qasmparser.QasmParser`` method ``get_tokens()`` is deprecated. Instead you should use the ``read_tokens()`` method."
msgstr ""

#: ../../release_notes.rst:12724
msgid "The ``as_dict()`` method for the Qobj class has been deprecated and will be removed in the future. You should replace calls to it with ``to_dict()`` instead."
msgstr ""

#: ../../release_notes.rst:12734
msgid "The definition of the ``CU3Gate`` has been changed to be equivalent to the canonical definition of a controlled ``U3Gate``."
msgstr ""

#: ../../release_notes.rst:12737
msgid "The handling of layout in the pass manager has been standardized. This fixes several reported issues with handling layout. The ``initial_layout`` kwarg parameter on ``qiskit.compiler.transpile()`` and ``qiskit.execute()`` will now lay out your qubits from the circuit onto the desired qubits on the device when transpiling circuits."
msgstr ""

#: ../../release_notes.rst:12743
msgid "Support for n-qubit unitaries was added to the BasicAer simulator and ``unitary`` (arbitrary unitary gates) was added to the set of basis gates for the simulators"
msgstr ""

#: ../../release_notes.rst:12747
msgid "The ``qiskit.visualization.plost_state_qsphere()`` has been updated to fix several issues with it. Now output Q Sphere visualization will be correctly generated and the following aspects have been updated:"
msgstr ""

#: ../../release_notes.rst:12751
msgid "All complementary basis states are antipodal"
msgstr ""

#: ../../release_notes.rst:12752
msgid "Phase is indicated by color of line and marker on sphere's surface"
msgstr ""

#: ../../release_notes.rst:12755
msgid "Probability is indicated by translucency of line and volume of marker on"
msgstr ""

#: ../../release_notes.rst:12754
msgid "sphere's surface"
msgstr ""

#: ../../release_notes.rst:12762
msgid "The default PassManager for ``qiskit.compiler.transpile()`` and ``qiskit.execute()`` has been changed to optimization level 1 pass manager defined at ``qiskit.transpile.preset_passmanagers.level1_pass_manager``."
msgstr ""

#: ../../release_notes.rst:12766
msgid "All the circuit drawer backends now will express gate parameters in a circuit as common fractions of pi in the output visualization. If the value of a parameter can be expressed as a fraction of pi that will be used instead of the numeric equivalent."
msgstr ""

#: ../../release_notes.rst:12771
msgid "When using ``qiskit.assembler.assemble_schedules()`` if you do not provide the number of memory_slots to use the number will be inferred based on the number of acquisitions in the input schedules."
msgstr ""

#: ../../release_notes.rst:12775
msgid "The deprecation warning on the ``qiskit.dagcircuit.DAGCircuit`` property ``node_counter`` has been removed. The behavior change being warned about was put into effect when the warning was added, so warning that it had changed served no purpose."
msgstr ""

#: ../../release_notes.rst:12780
msgid "Calls to ``PassManager.run()`` now will emit python logging messages at the INFO level for each pass execution. These messages will include the Pass name and the total execution time of the pass. Python's standard logging was used because it allows Qiskit-Terra's logging to integrate in a standard way with other applications and libraries. All logging for the transpiler occurs under the ``qiskit.transpiler`` namespace, as used by ``logging.getLogger('qiskit.transpiler``). For example, to turn on DEBUG level logging for the transpiler you can run::"
msgstr ""

#: ../../release_notes.rst:12794
msgid "which will set the log level for the transpiler to DEBUG and configure those messages to be printed to stderr."
msgstr ""

#: ../../release_notes.rst:12799
msgid "There's a new high-performance Density Matrix Simulator that can be used in conjunction with our noise models, to better simulate real world scenarios."
msgstr ""

#: ../../release_notes.rst:12801
msgid "We have added a Matrix Product State (MPS) simulator. MPS allows for efficient simulation of several classes of quantum circuits, even under presence of strong correlations and highly entangled states. For cases amenable to MPS, circuits with several hundred qubits and more can be exactly simulated, e.g., for the purpose of obtaining expectation values of observables."
msgstr ""

#: ../../release_notes.rst:12806
msgid "Snapshots can be performed in all of our simulators."
msgstr ""

#: ../../release_notes.rst:12807
msgid "Now we can measure sampling circuits with read-out errors too, not only ideal circuits."
msgstr ""

#: ../../release_notes.rst:12809
msgid "We have increased some circuit optimizations with noise presence."
msgstr ""

#: ../../release_notes.rst:12810
msgid "A better 2-qubit error approximations have been included."
msgstr ""

#: ../../release_notes.rst:12811
msgid "Included some tools for making certain noisy simulations easier to craft and faster to simulate."
msgstr ""

#: ../../release_notes.rst:12813
msgid "Increased performance with simulations that require less floating point numerical precision."
msgstr ""

#: ../../release_notes.rst:12822
msgid "`Logging Module <https://github.com/Qiskit/qiskit-iqx-tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/9_ignis_logging.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:12823
msgid "`Purity RB <https://github.com/Qiskit/qiskit-iqx-tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/5c_purity_rb.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:12824
msgid "`Interleaved RB <https://github.com/Qiskit/qiskit-iqx-tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/5b_interleaved_rb.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:12825
msgid "`Repetition Code for Verification <https://github.com/Qiskit/qiskit-iqx-tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/8_repetition_code.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:12826
msgid "Seed values can now be arbitrarily added to RB (not just in order)"
msgstr ""

#: ../../release_notes.rst:12827
msgid "Support for adding multiple results to measurement mitigation"
msgstr ""

#: ../../release_notes.rst:12828
msgid "RB Fitters now support providing guess values"
msgstr ""

#: ../../release_notes.rst:12833
msgid "Fixed a bug in RB fit error"
msgstr ""

#: ../../release_notes.rst:12834
msgid "Fixed a bug in the characterization fitter when selecting a qubit index to fit"
msgstr ""

#: ../../release_notes.rst:12840
msgid "Measurement mitigation now operates in parallel when applied to multiple results"
msgstr ""

#: ../../release_notes.rst:12842
msgid "Guess values for RB fitters are improved"
msgstr ""

#: ../../release_notes.rst:12850
msgid "Relative-Phase Toffoli gates ``rccx`` (with 2 controls) and ``rcccx`` (with 3 controls)."
msgstr ""

#: ../../release_notes.rst:12852
msgid "Variational form ``RYCRX``"
msgstr ""

#: ../../release_notes.rst:12853
msgid "A new ``'basic-no-ancilla'`` mode to ``mct``."
msgstr ""

#: ../../release_notes.rst:12854
msgid "Multi-controlled rotation gates ``mcrx``, ``mcry``, and ``mcrz`` as a general ``u3`` gate is not supported by graycode implementation"
msgstr ""

#: ../../release_notes.rst:12856
msgid "Chemistry: ROHF open-shell support"
msgstr ""

#: ../../release_notes.rst:12858 ../../release_notes.rst:12865
#: ../../release_notes.rst:12871
msgid "Supported for all drivers: Gaussian16, PyQuante, PySCF and PSI4"
msgstr ""

#: ../../release_notes.rst:12859
msgid "HartreeFock initial state, UCCSD variational form and two qubit reduction for parity mapping now support different alpha and beta particle numbers for open shell support"
msgstr ""

#: ../../release_notes.rst:12863
msgid "Chemistry: UHF open-shell support"
msgstr ""

#: ../../release_notes.rst:12866
msgid "QMolecule extended to include integrals, coefficients etc for separate beta"
msgstr ""

#: ../../release_notes.rst:12868
msgid "Chemistry: QMolecule extended with integrals in atomic orbital basis to facilitate common access to these for experimentation"
msgstr ""

#: ../../release_notes.rst:12873
msgid "Chemistry: Additional PyQuante and PySCF driver configuration"
msgstr ""

#: ../../release_notes.rst:12875
msgid "Convergence tolerance and max convergence iteration controls."
msgstr ""

#: ../../release_notes.rst:12876
msgid "For PySCF initial guess choice"
msgstr ""

#: ../../release_notes.rst:12878
msgid "Chemistry: Processing output added to debug log from PyQuante and PySCF computations (Gaussian16 and PSI4 outputs were already added to debug log)"
msgstr ""

#: ../../release_notes.rst:12880
msgid "Chemistry: Merged qiskit-chemistry into qiskit-aqua"
msgstr ""

#: ../../release_notes.rst:12881
msgid "Add ``MatrixOperator``, ``WeightedPauliOperator`` and ``TPBGroupedPauliOperator`` class."
msgstr ""

#: ../../release_notes.rst:12883
msgid "Add ``evolution_instruction`` function to get registerless instruction of time evolution."
msgstr ""

#: ../../release_notes.rst:12885
msgid "Add ``op_converter`` module to unify the place in charge of converting different types of operators."
msgstr ""

#: ../../release_notes.rst:12887
msgid "Add ``Z2Symmetries`` class to encapsulate the Z2 symmetries info and has helper methods for tapering an Operator."
msgstr ""

#: ../../release_notes.rst:12889
msgid "Amplitude Estimation: added maximum likelihood postprocessing and confidence interval computation."
msgstr ""

#: ../../release_notes.rst:12891
msgid "Maximum Likelihood Amplitude Estimation (MLAE): Implemented new algorithm for amplitude estimation based on maximum likelihood estimation, which reduces number of required qubits and circuit depth."
msgstr ""

#: ../../release_notes.rst:12894
msgid "Added (piecewise) linearly and polynomially controlled Pauli-rotation circuits."
msgstr ""

#: ../../release_notes.rst:12896
msgid "Add ``q_equation_of_motion`` to study excited state of a molecule, and add two algorithms to prepare the reference state."
msgstr ""

#: ../../release_notes.rst:12902
msgid "Improve ``mct``'s ``'basic'`` mode by using relative-phase Toffoli gates to build intermediate results."
msgstr ""

#: ../../release_notes.rst:12904
msgid "Adapt to Qiskit Terra's newly introduced ``Qubit`` class."
msgstr ""

#: ../../release_notes.rst:12905
msgid "Prevent ``QPE/IQPE`` from modifying input ``Operator`` objects."
msgstr ""

#: ../../release_notes.rst:12906
msgid "The PyEDA dependency was removed; corresponding oracles' underlying logic operations are now handled by SymPy."
msgstr ""

#: ../../release_notes.rst:12908
msgid "Refactor the ``Operator`` class, each representation has its own class ``MatrixOperator``, ``WeightedPauliOperator`` and ``TPBGroupedPauliOperator``."
msgstr ""

#: ../../release_notes.rst:12910
msgid "The ``power`` in ``evolution_instruction`` was applied on the theta on the CRZ gate directly, the new version repeats the circuits to implement power."
msgstr ""

#: ../../release_notes.rst:12912
msgid "CircuitCache is OFF by default, and it can be set via environment variable now ``QISKIT_AQUA_CIRCUIT_CACHE``."
msgstr ""

#: ../../release_notes.rst:12918
msgid "A bug where ``TruthTableOracle`` would build incorrect circuits for truth tables with only a single ``1`` value."
msgstr ""

#: ../../release_notes.rst:12920
msgid "A bug caused by ``PyEDA``'s indeterminism."
msgstr ""

#: ../../release_notes.rst:12921
msgid "A bug with ``QPE/IQPE``'s translation and stretch computation."
msgstr ""

#: ../../release_notes.rst:12922
msgid "Chemistry: Bravyi-Kitaev mapping fixed when num qubits was not a power of 2"
msgstr ""

#: ../../release_notes.rst:12923
msgid "Setup ``initial_layout`` in ``QuantumInstance`` via a list."
msgstr ""

#: ../../release_notes.rst:12928
msgid "General multi-controlled rotation gate ``mcu3`` is removed and replaced by multi-controlled rotation gates ``mcrx``, ``mcry``, and ``mcrz``"
msgstr ""

#: ../../release_notes.rst:12933
msgid "The ``Operator`` class is deprecated, in favor of using ``MatrixOperator``, ``WeightedPauliOperator`` and ``TPBGroupedPauliOperator``."
msgstr ""

#: ../../release_notes.rst:12945
msgid "Qiskit 0.11.1"
msgstr ""

#: ../../release_notes.rst:12947
msgid "We have bumped up Qiskit micro version to 0.11.1 because IBM Q Provider has bumped its micro version as well."
msgstr ""

#: ../../release_notes.rst:12951 ../../release_notes.rst:12989
#: ../../release_notes.rst:13097 ../../release_notes.rst:13139
msgid "Terra 0.8"
msgstr ""

#: ../../release_notes.rst:12956 ../../release_notes.rst:12994
#: ../../release_notes.rst:13102 ../../release_notes.rst:13315
msgid "Aer 0.2"
msgstr ""

#: ../../release_notes.rst:12961 ../../release_notes.rst:13012
#: ../../release_notes.rst:13107 ../../release_notes.rst:13373
#: ../../release_notes.rst:13524
msgid "Ignis 0.1"
msgstr ""

#: ../../release_notes.rst:12966 ../../release_notes.rst:13017
#: ../../release_notes.rst:13112 ../../release_notes.rst:13397
msgid "Aqua 0.5"
msgstr ""

#: ../../release_notes.rst:12968
msgid "``qiskit-aqua`` has been updated to ``0.5.3`` to fix code related to changes in how gates inverses are done."
msgstr ""

#: ../../release_notes.rst:12974
msgid "The ``IBMQProvider`` has been updated to version ``0.3.1`` to fix backward compatibility issues and work with the default 10 job limit in single calls to the IBM Q API v2."
msgstr ""

#: ../../release_notes.rst:12981
msgid "Qiskit 0.11"
msgstr ""

#: ../../release_notes.rst:12983
msgid "We have bumped up Qiskit minor version to 0.11 because IBM Q Provider has bumped up its minor version too. On Aer, we have jumped from 0.2.1 to 0.2.3 because there was an issue detected right after releasing 0.2.2 and before Qiskit 0.11 went online."
msgstr ""

#: ../../release_notes.rst:12997
msgid "New features"
msgstr ""

#: ../../release_notes.rst:12999
msgid "Added support for multi-controlled phase gates"
msgstr ""

#: ../../release_notes.rst:13000
msgid "Added optimized anti-diagonal single-qubit gates"
msgstr ""

#: ../../release_notes.rst:13003
msgid "Improvements"
msgstr ""

#: ../../release_notes.rst:13005
msgid "Introduced a technique called Fusion that increments performance of circuit execution Tuned threading strategy to gain performance in most common scenarios."
msgstr ""

#: ../../release_notes.rst:13007
msgid "Some of the already implemented error models have been polished."
msgstr ""

#: ../../release_notes.rst:13024
msgid "The ``IBMQProvider`` has been updated in order to default to use the new `IBM Q Experience v2 <https://quantum-computing.ibm.com>`__. Accessing the legacy IBM Q Experience v1 and QConsole will still be supported during the 0.3.x line until its final deprecation one month from the release. It is encouraged to update to the new IBM Q Experience to take advantage of the new functionality and features."
msgstr ""

#: ../../release_notes.rst:13031
msgid "Updating to the new IBM Q Experience v2"
msgstr ""

#: ../../release_notes.rst:13033
msgid "If you have credentials for the legacy IBM Q Experience stored on disk, you can make use of the interactive helper::"
msgstr ""

#: ../../release_notes.rst:13041
msgid "For more complex cases or fine tuning your configuration, the following methods are available:"
msgstr ""

#: ../../release_notes.rst:13044
msgid "the ``IBMQ.delete_accounts()`` can be used for resetting your configuration file."
msgstr ""

#: ../../release_notes.rst:13046
msgid "the ``IBMQ.save_account('MY_TOKEN')`` method can be used for saving your credentials, following the instructions in the `IBM Q Experience v2 <https://quantum-computing.ibm.com>`__ account page."
msgstr ""

#: ../../release_notes.rst:13051
msgid "Updating your programs"
msgstr ""

#: ../../release_notes.rst:13053
msgid "When using the new IBM Q Experience v2 through the provider, access to backends is done via individual ``provider`` instances (as opposed to accessing them directly through the ``qiskit.IBMQ`` object as in previous versions), which allows for more granular control over the project you are using."
msgstr ""

#: ../../release_notes.rst:13058
msgid "You can get a reference to the ``providers`` that you have access to using the ``IBMQ.providers()`` and ``IBMQ.get_provider()`` methods::"
msgstr ""

#: ../../release_notes.rst:13068
msgid "For convenience, ``IBMQ.load_account()`` and ``IBMQ.enable_account()`` will return a provider for the open access project, which is the default in the new IBM Q Experience v2."
msgstr ""

#: ../../release_notes.rst:13072
msgid "For example, the following program in previous versions::"
msgstr ""

#: ../../release_notes.rst:13080
msgid "Would be equivalent to the following program in the current version::"
msgstr ""

#: ../../release_notes.rst:13089
msgid "You can find more information and details in the `IBM Q Provider documentation <https://github.com/Qiskit/qiskit-ibmq-provider>`__."
msgstr ""

#: ../../release_notes.rst:13094
msgid "Qiskit 0.10"
msgstr ""

#: ../../release_notes.rst:13117
msgid "IBM Q Provider 0.2"
msgstr ""

#: ../../release_notes.rst:13122
msgid "The ``IBMQProvider`` supports connecting to the new version of the IBM Q API. Please note support for this version is still experimental :pull_ibmq-provider:`78`."
msgstr ""

#: ../../release_notes.rst:13124
msgid "Added support for Circuits through the new API :pull_ibmq-provider:`79`."
msgstr ""

#: ../../release_notes.rst:13130
msgid "Fixed incorrect parsing of some API hub URLs :pull_ibmq-provider:`77`."
msgstr ""

#: ../../release_notes.rst:13131
msgid "Fixed noise model handling for remote simulators :pull_ibmq-provider:`84`."
msgstr ""

#: ../../release_notes.rst:13136
msgid "Qiskit 0.9"
msgstr ""

#: ../../release_notes.rst:13144 ../../release_notes.rst:13915
#: ../../release_notes.rst:14123
msgid "Highlights"
msgstr ""

#: ../../release_notes.rst:13146
msgid "Introduction of the Pulse module under ``qiskit.pulse``, which includes tools for building pulse commands, scheduling them on pulse channels, visualization, and running them on IBM Q devices."
msgstr ""

#: ../../release_notes.rst:13149
msgid "Improved QuantumCircuit and Instruction classes, allowing for the composition of arbitrary sub-circuits into larger circuits, and also for creating parameterized circuits."
msgstr ""

#: ../../release_notes.rst:13152
msgid "A powerful Quantum Info module under ``qiskit.quantum_info``, providing tools to work with operators and channels and to use them inside circuits."
msgstr ""

#: ../../release_notes.rst:13154
msgid "New transpiler optimization passes and access to predefined transpiling routines."
msgstr ""

#: ../../release_notes.rst:13162
msgid "The core ``StochasticSwap`` routine is implemented in `Cython <https://cython.org/>`__."
msgstr ""

#: ../../release_notes.rst:13163
msgid "Added ``QuantumChannel`` classes for manipulating quantum channels and CPTP maps."
msgstr ""

#: ../../release_notes.rst:13165
msgid "Support for parameterized circuits."
msgstr ""

#: ../../release_notes.rst:13166
msgid "The ``PassManager`` interface has been improved and new functions added for easier interaction and usage with custom pass managers."
msgstr ""

#: ../../release_notes.rst:13168
msgid "Preset ``PassManager``\\s are now included which offer a predetermined pipeline of transpiler passes."
msgstr ""

#: ../../release_notes.rst:13170
msgid "User configuration files to let local environments override default values for some functions."
msgstr ""

#: ../../release_notes.rst:13172
msgid "New transpiler passes: ``EnlargeWithAncilla``, ``Unroll2Q``, ``NoiseAdaptiveLayout``, ``OptimizeSwapBeforeMeasure``, ``RemoveDiagonalGatesBeforeMeasure``, ``CommutativeCancellation``, ``Collect2qBlocks``, and ``ConsolidateBlocks``."
msgstr ""

#: ../../release_notes.rst:13179 ../../release_notes.rst:13363
#: ../../release_notes.rst:13386 ../../release_notes.rst:13463
#: ../../release_notes.rst:13585 ../../release_notes.rst:13899
#: ../../release_notes.rst:13937 ../../release_notes.rst:14141
msgid "Compatibility Considerations"
msgstr ""

#: ../../release_notes.rst:13181
msgid "As part of the 0.8 release the following things have been deprecated and will either be removed or changed in a backwards incompatible manner in a future release. While not strictly necessary these are things to adjust for before the 0.9 (unless otherwise noted) release to avoid a breaking change in the future."
msgstr ""

#: ../../release_notes.rst:13186
msgid "The methods prefixed by ``_get`` in the ``DAGCircuit`` object are being renamed without that prefix."
msgstr ""

#: ../../release_notes.rst:13188
msgid "Changed elements in ``couplinglist`` of ``CouplingMap`` from tuples to lists."
msgstr ""

#: ../../release_notes.rst:13189
msgid "Unroller bases must now be explicit, and violation raises an informative ``QiskitError``."
msgstr ""

#: ../../release_notes.rst:13191
msgid "The ``qiskit.tools.qcvv`` package is deprecated and will be removed in the in the future. You should migrate to using the Qiskit Ignis which replaces this module."
msgstr ""

#: ../../release_notes.rst:13194
msgid "The ``qiskit.compile()`` function is now deprecated in favor of explicitly using the ``qiskit.compiler.transpile()`` function to transform a circuit, followed by ``qiskit.compiler.assemble()`` to make a Qobj out of it. Instead of ``compile(...)``, use ``assemble(transpile(...), ...)``."
msgstr ""

#: ../../release_notes.rst:13198
msgid "``qiskit.converters.qobj_to_circuits()`` has been deprecated and will be removed in a future release. Instead ``qiskit.assembler.disassemble()`` should be used to extract ``QuantumCircuit`` objects from a compiled Qobj."
msgstr ""

#: ../../release_notes.rst:13202
msgid "The ``qiskit.mapper`` namespace has been deprecated. The ``Layout`` and ``CouplingMap`` classes can be accessed via ``qiskit.transpiler``."
msgstr ""

#: ../../release_notes.rst:13204
msgid "A few functions in ``qiskit.tools.qi.qi`` have been deprecated and moved to ``qiskit.quantum_info``."
msgstr ""

#: ../../release_notes.rst:13207
msgid "Please note that some backwards incompatible changes have been made during this release. The following notes contain information on how to adapt to these changes."
msgstr ""

#: ../../release_notes.rst:13212
msgid "IBM Q Provider"
msgstr ""

#: ../../release_notes.rst:13214
msgid "The IBM Q provider was previously included in Terra, but it has been split out into a separate package ``qiskit-ibmq-provider``. This will need to be installed, either via pypi with ``pip install qiskit-ibmq-provider`` or from source in order to access ``qiskit.IBMQ`` or ``qiskit.providers.ibmq``. If you install qiskit with ``pip install qiskit``, that will automatically install all subpackages of the Qiskit project."
msgstr ""

#: ../../release_notes.rst:13224
msgid "Cython Components"
msgstr ""

#: ../../release_notes.rst:13226
msgid "Starting in the 0.8 release the core stochastic swap routine is now implemented in `Cython <https://cython.org/>`__. This was done to significantly improve the performance of the swapper, however if you build Terra from source or run on a non-x86 or other platform without prebuilt wheels and install from source distribution you'll need to make sure that you have Cython installed prior to installing/building Qiskit Terra. This can easily be done with pip/pypi: ``pip install Cython``."
msgstr ""

#: ../../release_notes.rst:13237
msgid "Compiler Workflow"
msgstr ""

#: ../../release_notes.rst:13239
msgid "The ``qiskit.compile()`` function has been deprecated and replaced by first calling ``qiskit.compiler.transpile()`` to run optimization and mapping on a circuit, and then ``qiskit.compiler.assemble()`` to build a Qobj from that optimized circuit to send to a backend. While this is only a deprecation it will emit a warning if you use the old ``qiskit.compile()`` call."
msgstr ""

#: ../../release_notes.rst:13245
msgid "**transpile(), assemble(), execute() parameters**"
msgstr ""

#: ../../release_notes.rst:13247
msgid "These functions are heavily overloaded and accept a wide range of inputs. They can handle circuit and pulse inputs. All kwargs except for ``backend`` for these functions now also accept lists of the previously accepted types. The ``initial_layout`` kwarg can now be supplied as a both a list and dictionary, e.g. to map a Bell experiment on qubits 13 and 14, you can supply: ``initial_layout=[13, 14]`` or ``initial_layout={qr[0]: 13, qr[1]: 14}``"
msgstr ""

#: ../../release_notes.rst:13257
msgid "Qobj"
msgstr ""

#: ../../release_notes.rst:13259
msgid "The Qobj class has been split into two separate subclasses depending on the use case, either ``PulseQobj`` or ``QasmQobj`` for pulse and circuit jobs respectively. If you're interacting with Qobj directly you may need to adjust your usage accordingly."
msgstr ""

#: ../../release_notes.rst:13264
msgid "The ``qiskit.qobj.qobj_to_dict()`` is removed. Instead use the ``to_dict()`` method of a Qobj object."
msgstr ""

#: ../../release_notes.rst:13270
msgid "Visualization"
msgstr ""

#: ../../release_notes.rst:13272
msgid "The largest change to the visualization module is it has moved from ``qiskit.tools.visualization`` to ``qiskit.visualization``. This was done to indicate that the visualization module is more than just a tool. However, since this interface was declared stable in the 0.7 release the public interface off of ``qiskit.tools.visualization`` will continue to work. That may change in a future release, but it will be deprecated prior to removal if that happens."
msgstr ""

#: ../../release_notes.rst:13279
msgid "The previously deprecated functions, ``plot_circuit()``, ``latex_circuit_drawer()``, ``generate_latex_source()``, and ``matplotlib_circuit_drawer()`` from ``qiskit.tools.visualization`` have been removed. Instead of these functions, calling ``qiskit.visualization.circuit_drawer()`` with the appropriate arguments should be used."
msgstr ""

#: ../../release_notes.rst:13286
msgid "The previously deprecated ``plot_barriers`` and ``reverse_bits`` keys in the ``style`` kwarg dictionary are deprecated, instead the ``qiskit.visualization.circuit_drawer()`` kwargs ``plot_barriers`` and ``reverse_bits`` should be used."
msgstr ""

#: ../../release_notes.rst:13291
msgid "The Wigner plotting functions ``plot_wigner_function``, ``plot_wigner_curve``, ``plot_wigner_plaquette``, and ``plot_wigner_data`` previously in the ``qiskit.tools.visualization._state_visualization`` module have been removed. They were never exposed through the public stable interface and were not well documented. The code to use this feature can still be accessed through the qiskit-tutorials repository."
msgstr ""

#: ../../release_notes.rst:13301
msgid "Mapper"
msgstr ""

#: ../../release_notes.rst:13303
msgid "The public api from ``qiskit.mapper`` has been moved into ``qiskit.transpiler``. While it has only been deprecated in this release, it will be removed in the 0.9 release so updating your usage of ``Layout`` and ``CouplingMap`` to import from ``qiskit.transpiler`` instead of ``qiskit.mapper`` before that takes place will avoid any surprises in the future."
msgstr ""

#: ../../release_notes.rst:13320
msgid "Added multiplexer gate :pull_aer:`192`"
msgstr ""

#: ../../release_notes.rst:13321
msgid "Added ``remap_noise_model`` function to ``noise.utils`` :pull_aer:`181`"
msgstr ""

#: ../../release_notes.rst:13322
msgid "Added ``__eq__`` method to ``NoiseModel``, ``QuantumError``, ``ReadoutError`` :pull_aer:`181`"
msgstr ""

#: ../../release_notes.rst:13324
msgid "Added support for labelled gates in noise models :pull_aer:`175`"
msgstr ""

#: ../../release_notes.rst:13325
msgid "Added optimized ``mcx``, ``mcy``, ``mcz``, ``mcu1``, ``mcu2``, ``mcu3``, gates to ``QubitVector`` :pull_aer:`124`"
msgstr ""

#: ../../release_notes.rst:13327
msgid "Added optimized controlled-swap gate to ``QubitVector`` :pull_aer:`142`"
msgstr ""

#: ../../release_notes.rst:13328
msgid "Added gate-fusion optimization for ``QasmController``, which is enabled by setting ``fusion_enable=true`` :pull_aer:`136`"
msgstr ""

#: ../../release_notes.rst:13330
msgid "Added better management of failed simulations :pull_aer:`167`"
msgstr ""

#: ../../release_notes.rst:13331
msgid "Added qubits truncate optimization for unused qubits :pull_aer:`164`"
msgstr ""

#: ../../release_notes.rst:13332
msgid "Added ability to disable depolarizing error on device noise model :pull_aer:`131`"
msgstr ""

#: ../../release_notes.rst:13334
msgid "Added initialize simulator instruction to ``statevector_state`` :pull_aer:`117`, :pull_aer:`137`"
msgstr ""

#: ../../release_notes.rst:13336
msgid "Added coupling maps to simulators :pull_aer:`93`"
msgstr ""

#: ../../release_notes.rst:13337
msgid "Added circuit optimization framework :pull_aer:`83`"
msgstr ""

#: ../../release_notes.rst:13338
msgid "Added benchmarking :pull_aer:`71`, :pull_aer:`177`"
msgstr ""

#: ../../release_notes.rst:13339
msgid "Added wheels support for Debian-like distributions :pull_aer:`69`"
msgstr ""

#: ../../release_notes.rst:13340
msgid "Added autoconfiguration of threads for qasm simulator :pull_aer:`61`"
msgstr ""

#: ../../release_notes.rst:13341
msgid "Added Simulation method based on Stabilizer Rank Decompositions :pull_aer:`51`"
msgstr ""

#: ../../release_notes.rst:13342
msgid "Added ``basis_gates`` kwarg to ``NoiseModel`` init :pull_aer:`175`."
msgstr ""

#: ../../release_notes.rst:13343
msgid "Added an optional parameter to ``NoiseModel.as_dict()`` for returning dictionaries that can be serialized using the standard json library directly :pull_aer:`165`"
msgstr ""

#: ../../release_notes.rst:13346
msgid "Refactor thread management :pull_aer:`50`"
msgstr ""

#: ../../release_notes.rst:13347
msgid "Improve noise transformations :pull_aer:`162`"
msgstr ""

#: ../../release_notes.rst:13348
msgid "Improve error reporting :pull_aer:`160`"
msgstr ""

#: ../../release_notes.rst:13349
msgid "Improve efficiency of parallelization with ``max_memory_mb`` a new parameter of ``backend_opts`` :pull_aer:`61`"
msgstr ""

#: ../../release_notes.rst:13351
msgid "Improve u1 performance in ``statevector`` :pull_aer:`123`"
msgstr ""

#: ../../release_notes.rst:13357
msgid "Fixed OpenMP clashing problems on macOS for the Terra add-on :pull_aer:`46`"
msgstr ""

#: ../../release_notes.rst:13365
msgid "Deprecated ``\"initial_statevector\"`` backend option for ``QasmSimulator`` and ``StatevectorSimulator`` :pull_aer:`185`"
msgstr ""

#: ../../release_notes.rst:13367
msgid "Renamed ``\"chop_threshold\"`` backend option to ``\"zero_threshold\"`` and changed default value to 1e-10 :pull_aer:`185`"
msgstr ""

#: ../../release_notes.rst:13378
msgid "Quantum volume"
msgstr ""

#: ../../release_notes.rst:13379
msgid "Measurement mitigation using tensored calibrations"
msgstr ""

#: ../../release_notes.rst:13380
msgid "Simultaneous RB has the option to align Clifford gates across subsets"
msgstr ""

#: ../../release_notes.rst:13381
msgid "Measurement correction can produce a new calibration for a subset of qubits"
msgstr ""

#: ../../release_notes.rst:13388
msgid "RB writes to the minimal set of classical registers (it used to be Q[i]->C[i]). This change enables measurement correction with RB. Unless users had external analysis code, this will not change outcomes. RB circuits from 0.1 are not compatible with 0.1.1 fitters."
msgstr ""

#: ../../release_notes.rst:13402
msgid "Implementation of the HHL algorithm supporting ``LinearSystemInput``"
msgstr ""

#: ../../release_notes.rst:13403
msgid "Pluggable component ``Eigenvalues`` with variant ``EigQPE``"
msgstr ""

#: ../../release_notes.rst:13404
msgid "Pluggable component ``Reciprocal`` with variants ``LookupRotation`` and ``LongDivision``"
msgstr ""

#: ../../release_notes.rst:13406
msgid "Multiple-Controlled U1 and U3 operations ``mcu1`` and ``mcu3``"
msgstr ""

#: ../../release_notes.rst:13407
msgid "Pluggable component ``QFT`` derived from component ``IQFT``"
msgstr ""

#: ../../release_notes.rst:13408
msgid "Summarized the transpiled circuits at the DEBUG logging level"
msgstr ""

#: ../../release_notes.rst:13409
msgid "``QuantumInstance`` accepts ``basis_gates`` and ``coupling_map`` again."
msgstr ""

#: ../../release_notes.rst:13410
msgid "Support to use ``cx`` gate for the entanglement in ``RY`` and ``RYRZ`` variational form (``cz`` is the default choice)"
msgstr ""

#: ../../release_notes.rst:13412
msgid "Support to use arbitrary mixer Hamiltonian in QAOA, allowing use of QAOA in constrained optimization problems [arXiv:1709.03489]"
msgstr ""

#: ../../release_notes.rst:13414
msgid "Added variational algorithm base class ``VQAlgorithm``, implemented by ``VQE`` and ``QSVMVariational``"
msgstr ""

#: ../../release_notes.rst:13416
msgid "Added ``ising/docplex.py`` for automatically generating Ising Hamiltonian from optimization models of DOcplex"
msgstr ""

#: ../../release_notes.rst:13418
msgid "Added ``'basic-dirty-ancilla``' mode for ``mct``"
msgstr ""

#: ../../release_notes.rst:13419
msgid "Added ``mcmt`` for Multi-Controlled, Multi-Target gate"
msgstr ""

#: ../../release_notes.rst:13420
msgid "Exposed capabilities to generate circuits from logical AND, OR, DNF (disjunctive normal forms), and CNF (conjunctive normal forms) formulae"
msgstr ""

#: ../../release_notes.rst:13422
msgid "Added the capability to generate circuits from ESOP (exclusive sum of products) formulae with optional optimization based on Quine-McCluskey and ExactCover"
msgstr ""

#: ../../release_notes.rst:13424
msgid "Added ``LogicalExpressionOracle`` for generating oracle circuits from arbitrary Boolean logic expressions (including DIMACS support) with optional optimization capability"
msgstr ""

#: ../../release_notes.rst:13427
msgid "Added ``TruthTableOracle`` for generating oracle circuits from truth-tables with optional optimization capability"
msgstr ""

#: ../../release_notes.rst:13429
msgid "Added ``CustomCircuitOracle`` for generating oracle from user specified circuits"
msgstr ""

#: ../../release_notes.rst:13431
msgid "Added implementation of the Deutsch-Jozsa algorithm"
msgstr ""

#: ../../release_notes.rst:13432
msgid "Added implementation of the Bernstein-Vazirani algorithm"
msgstr ""

#: ../../release_notes.rst:13433
msgid "Added implementation of the Simon's algorithm"
msgstr ""

#: ../../release_notes.rst:13434
msgid "Added implementation of the Shor's algorithm"
msgstr ""

#: ../../release_notes.rst:13435
msgid "Added optional capability for Grover's algorithm to take a custom initial state (as opposed to the default uniform superposition)"
msgstr ""

#: ../../release_notes.rst:13437
msgid "Added capability to create a ``Custom`` initial state using existing circuit"
msgstr ""

#: ../../release_notes.rst:13439
msgid "Added the ADAM (and AMSGRAD) optimization algorithm"
msgstr ""

#: ../../release_notes.rst:13440
msgid "Multivariate distributions added, so uncertainty models now have univariate and multivariate distribution components"
msgstr ""

#: ../../release_notes.rst:13442
msgid "Added option to include or skip the swaps operations for qft and iqft circuit constructions"
msgstr ""

#: ../../release_notes.rst:13444
msgid "Added classical linear system solver ``ExactLSsolver``"
msgstr ""

#: ../../release_notes.rst:13445
msgid "Added parameters ``auto_hermitian`` and ``auto_resize`` to ``HHL`` algorithm to support non-Hermitian and non :math:`2^n` sized matrices by default"
msgstr ""

#: ../../release_notes.rst:13447
msgid "Added another feature map, ``RawFeatureVector``, that directly maps feature vectors to qubits' states for classification"
msgstr ""

#: ../../release_notes.rst:13449
msgid "``SVM_Classical`` can now load models trained by ``QSVM``"
msgstr ""

#: ../../release_notes.rst:13456
msgid "Fixed ``ising/docplex.py`` to correctly multiply constant values in constraints"
msgstr ""

#: ../../release_notes.rst:13457
msgid "Fixed package setup to correctly identify namespace packages using ``setuptools.find_namespace_packages``"
msgstr ""

#: ../../release_notes.rst:13465
msgid "``QuantumInstance`` does not take ``memory`` anymore."
msgstr ""

#: ../../release_notes.rst:13466
msgid "Moved command line and GUI to separate repo (``qiskit_aqua_uis``)"
msgstr ""

#: ../../release_notes.rst:13468
msgid "Removed the ``SAT``-specific oracle (now supported by ``LogicalExpressionOracle``)"
msgstr ""

#: ../../release_notes.rst:13470
msgid "Changed ``advanced`` mode implementation of ``mct``: using simple ``h`` gates instead of ``ch``, and fixing the old recursion step in ``_multicx``"
msgstr ""

#: ../../release_notes.rst:13472
msgid "Components ``random_distributions`` renamed to ``uncertainty_models``"
msgstr ""

#: ../../release_notes.rst:13473
msgid "Reorganized the constructions of various common gates (``ch``, ``cry``, ``mcry``, ``mct``, ``mcu1``, ``mcu3``, ``mcmt``, ``logic_and``, and ``logic_or``) and circuits (``PhaseEstimationCircuit``, ``BooleanLogicCircuits``, ``FourierTransformCircuits``, and ``StateVectorCircuits``) under the ``circuits`` directory"
msgstr ""

#: ../../release_notes.rst:13478
msgid "Renamed the algorithm ``QSVMVariational`` to ``VQC``, which stands for Variational Quantum Classifier"
msgstr ""

#: ../../release_notes.rst:13480
msgid "Renamed the algorithm ``QSVMKernel`` to ``QSVM``"
msgstr ""

#: ../../release_notes.rst:13481
msgid "Renamed the class ``SVMInput`` to ``ClassificationInput``"
msgstr ""

#: ../../release_notes.rst:13482
msgid "Renamed problem type ``'svm_classification'`` to ``'classification'``"
msgstr ""

#: ../../release_notes.rst:13483
msgid "Changed the type of ``entangler_map`` used in ``FeatureMap`` and ``VariationalForm`` to list of lists"
msgstr ""

#: ../../release_notes.rst:13489
msgid "IBM Q Provider 0.1"
msgstr ""

#: ../../release_notes.rst:13494
msgid "This is the first release as a standalone package. If you are installing Terra standalone you'll also need to install the ``qiskit-ibmq-provider`` package with ``pip install qiskit-ibmq-provider`` if you want to use the IBM Q backends."
msgstr ""

#: ../../release_notes.rst:13499
msgid "Support for non-Qobj format jobs has been removed from the provider. You'll have to convert submissions in an older format to Qobj before you can submit."
msgstr ""

#: ../../release_notes.rst:13507
msgid "Qiskit 0.8"
msgstr ""

#: ../../release_notes.rst:13509
msgid "In Qiskit 0.8 we introduced the Qiskit Ignis element. It also includes the Qiskit Terra element 0.7.1 release which contains a bug fix for the BasicAer Python simulator."
msgstr ""

#: ../../release_notes.rst:13514 ../../release_notes.rst:13539
msgid "Terra 0.7"
msgstr ""

#: ../../release_notes.rst:13519 ../../release_notes.rst:13821
msgid "Aer 0.1"
msgstr ""

#: ../../release_notes.rst:13526
msgid "This is the first release of Qiskit Ignis."
msgstr ""

#: ../../release_notes.rst:13532
msgid "Qiskit 0.7"
msgstr ""

#: ../../release_notes.rst:13534
msgid "In Qiskit 0.7 we introduced Qiskit Aer and combined it with Qiskit Terra."
msgstr ""

#: ../../release_notes.rst:13544
msgid "This release includes several new features and many bug fixes. With this release the interfaces for circuit diagram, histogram, bloch vectors, and state visualizations are declared stable. Additionally, this release includes a defined and standardized bit order/endianness throughout all aspects of Qiskit. These are all declared as stable interfaces in this release which won't have breaking changes made moving forward, unless there is appropriate and lengthy deprecation periods warning of any coming changes."
msgstr ""

#: ../../release_notes.rst:13552
msgid "There is also the introduction of the following new features:"
msgstr ""

#: ../../release_notes.rst:13554
msgid "A new ASCII art circuit drawing output mode"
msgstr ""

#: ../../release_notes.rst:13555
msgid "A new circuit drawing interface off of ``QuantumCircuit`` objects that enables calls of ``circuit.draw()`` or ``print(circuit)`` to render a drawing of circuits"
msgstr ""

#: ../../release_notes.rst:13558
msgid "A visualizer for drawing the DAG representation of a circuit"
msgstr ""

#: ../../release_notes.rst:13559
msgid "A new quantum state plot type for hinton diagrams in the local matplotlib based state plots"
msgstr ""

#: ../../release_notes.rst:13561
msgid "2 new constructor methods off the ``QuantumCircuit`` class ``from_qasm_str()`` and ``from_qasm_file()`` which let you easily create a circuit object from OpenQASM"
msgstr ""

#: ../../release_notes.rst:13564
msgid "A new function ``plot_bloch_multivector()`` to plot Bloch vectors from a tensored state vector or density matrix"
msgstr ""

#: ../../release_notes.rst:13566
msgid "Per-shot measurement results are available in simulators and select devices. These can be accessed by setting the ``memory`` kwarg to ``True`` when calling ``compile()`` or ``execute()`` and then accessed using the ``get_memory()`` method on the ``Result`` object."
msgstr ""

#: ../../release_notes.rst:13570
msgid "A ``qiskit.quantum_info`` module with revamped Pauli objects and methods for working with quantum states"
msgstr ""

#: ../../release_notes.rst:13572
msgid "New transpile passes for circuit analysis and transformation: ``CommutationAnalysis``, ``CommutationTransformation``, ``CXCancellation``, ``Decompose``, ``Unroll``, ``Optimize1QGates``, ``CheckMap``, ``CXDirection``, ``BarrierBeforeFinalMeasurements``"
msgstr ""

#: ../../release_notes.rst:13576
msgid "New alternative swap mapper passes in the transpiler: ``BasicSwap``, ``LookaheadSwap``, ``StochasticSwap``"
msgstr ""

#: ../../release_notes.rst:13578
msgid "More advanced transpiler infrastructure with support for analysis passes, transformation passes, a global ``property_set`` for the pass manager, and repeat-until control of passes"
msgstr ""

#: ../../release_notes.rst:13587
msgid "As part of the 0.7 release the following things have been deprecated and will either be removed or changed in a backwards incompatible manner in a future release. While not strictly necessary these are things to adjust for before the next release to avoid a breaking change."
msgstr ""

#: ../../release_notes.rst:13592
msgid "``plot_circuit()``, ``latex_circuit_drawer()``, ``generate_latex_source()``, and ``matplotlib_circuit_drawer()`` from qiskit.tools.visualization are deprecated. Instead the ``circuit_drawer()`` function from the same module should be used, there are kwarg options to mirror the functionality of all the deprecated functions."
msgstr ""

#: ../../release_notes.rst:13597
msgid "The current default output of ``circuit_drawer()`` (using latex and falling back on python) is deprecated and will be changed to just use the ``text`` output by default in future releases."
msgstr ""

#: ../../release_notes.rst:13600
msgid "The ``qiskit.wrapper.load_qasm_string()`` and ``qiskit.wrapper.load_qasm_file()`` functions are deprecated and the ``QuantumCircuit.from_qasm_str()`` and ``QuantumCircuit.from_qasm_file()`` constructor methods should be used instead."
msgstr ""

#: ../../release_notes.rst:13605
msgid "The ``plot_barriers`` and ``reverse_bits`` keys in the ``style`` kwarg dictionary are deprecated, instead the ``qiskit.tools.visualization.circuit_drawer()`` kwargs ``plot_barriers`` and ``reverse_bits`` should be used instead."
msgstr ""

#: ../../release_notes.rst:13609
msgid "The functions ``plot_state()`` and ``iplot_state()`` have been depreciated. Instead the functions ``plot_state_*()`` and ``iplot_state_*()`` should be called for the visualization method required."
msgstr ""

#: ../../release_notes.rst:13612
msgid "The ``skip_transpiler`` argument has been deprecated from ``compile()`` and ``execute()``. Instead you can use the ``PassManager`` directly, just set the ``pass_manager`` to a blank ``PassManager`` object with ``PassManager()``"
msgstr ""

#: ../../release_notes.rst:13615
msgid "The ``transpile_dag()`` function ``format`` kwarg for emitting different output formats is deprecated, instead you should convert the default output ``DAGCircuit`` object to the desired format."
msgstr ""

#: ../../release_notes.rst:13618
msgid "The unrollers have been deprecated, moving forward only DAG to DAG unrolling will be supported."
msgstr ""

#: ../../release_notes.rst:13621
msgid "Please note that some backwards-incompatible changes have been made during this release. The following notes contain information on how to adapt to these changes."
msgstr ""

#: ../../release_notes.rst:13626
msgid "Changes to Result objects"
msgstr ""

#: ../../release_notes.rst:13628
msgid "As part of the rewrite of the Results object to be more consistent and a stable interface moving forward a few changes have been made to how you access the data stored in the result object. First the ``get_data()`` method has been renamed to just ``data()``. Accompanying that change is a change in the data format returned by the function. It is now returning the raw data from the backends instead of doing any post-processing. For example, in previous versions you could call::"
msgstr ""

#: ../../release_notes.rst:13640
msgid "and that would return the unitary matrix like::"
msgstr ""

#: ../../release_notes.rst:13644
msgid "But now if you call (with the renamed method)::"
msgstr ""

#: ../../release_notes.rst:13648
msgid "it will return something like::"
msgstr ""

#: ../../release_notes.rst:13652
msgid "To get the post processed results in the same format as before the 0.7 release you must use the ``get_counts()``, ``get_statevector()``, and ``get_unitary()`` methods on the result object instead of ``get_data()['counts']``, ``get_data()['statevector']``, and ``get_data()['unitary']`` respectively."
msgstr ""

#: ../../release_notes.rst:13657
msgid "Additionally, support for ``len()`` and indexing on a ``Result`` object has been removed. Instead you should deal with the output from the post processed methods on the Result objects."
msgstr ""

#: ../../release_notes.rst:13661
msgid "Also, the ``get_snapshot()`` and ``get_snapshots()`` methods from the ``Result`` class have been removed. Instead you can access the snapshots using ``Result.data()['snapshots']``."
msgstr ""

#: ../../release_notes.rst:13667
msgid "Changes to Visualization"
msgstr ""

#: ../../release_notes.rst:13669
msgid "The largest change made to visualization in the 0.7 release is the removal of Matplotlib and other visualization dependencies from the project requirements. This was done to simplify the requirements and configuration required for installing Qiskit. If you plan to use any visualizations (including all the jupyter magics) except for the ``text``, ``latex``, and ``latex_source`` output for the circuit drawer you'll you must manually ensure that the visualization dependencies are installed. You can leverage the optional requirements to the Qiskit Terra package to do this::"
msgstr ""

#: ../../release_notes.rst:13680
msgid "Aside from this there have been changes made to several of the interfaces as part of the stabilization which may have an impact on existing code. The first is the ``basis`` kwarg in the ``circuit_drawer()`` function is no longer accepted. If you were relying on the ``circuit_drawer()`` to adjust the basis gates used in drawing a circuit diagram you will have to do this priort to calling ``circuit_drawer()``. For example::"
msgstr ""

#: ../../release_notes.rst:13690
msgid "will have to be adjusted to be::"
msgstr ""

#: ../../release_notes.rst:13699
msgid "Moving forward the ``circuit_drawer()`` function will be the sole interface for circuit drawing in the visualization module. Prior to the 0.7 release there were several other functions which either used different output backends or changed the output for drawing circuits. However, all those other functions have been deprecated and that functionality has been integrated as options on ``circuit_drawer()``."
msgstr ""

#: ../../release_notes.rst:13706
msgid "For the other visualization functions, ``plot_histogram()`` and ``plot_state()`` there are also a few changes to check when upgrading. First is the output from these functions has changed, in prior releases these would interactively show the output visualization. However that has changed to instead return a ``matplotlib.Figure`` object. This provides much more flexibility and options to interact with the visualization prior to saving or showing it. This will require adjustment to how these functions are consumed. For example, prior to this release when calling::"
msgstr ""

#: ../../release_notes.rst:13718
msgid "would open up new windows (depending on matplotlib backend) to display the visualization. However starting in the 0.7 you'll have to call ``show()`` on the output to mirror this behavior. For example::"
msgstr ""

#: ../../release_notes.rst:13732
msgid "Note that this is only for when running outside of Jupyter. No adjustment is required inside a Jupyter environment because Jupyter notebooks natively understand how to render ``matplotlib.Figure`` objects."
msgstr ""

#: ../../release_notes.rst:13736
msgid "However, returning the Figure object provides additional flexibility for dealing with the output. For example instead of just showing the figure you can now directly save it to a file by leveraging the ``savefig()`` method. For example::"
msgstr ""

#: ../../release_notes.rst:13746
msgid "The other key aspect which has changed with these functions is when running under jupyter. In the 0.6 release ``plot_state()`` and ``plot_histogram()`` when running under jupyter the default behavior was to use the interactive Javascript plots if the externally hosted Javascript library for rendering the visualization was reachable over the network. If not it would just use the matplotlib version. However in the 0.7 release this no longer the case, and separate functions for the interactive plots, ``iplot_state()`` and ``iplot_histogram()`` are to be used instead. ``plot_state()`` and ``plot_histogram()`` always use the matplotlib versions."
msgstr ""

#: ../../release_notes.rst:13756
msgid "Additionally, starting in this release the ``plot_state()`` function is deprecated in favor of calling individual methods for each method of plotting a quantum state. While the ``plot_state()`` function will continue to work until the 0.9 release, it will emit a warning each time it is used. The"
msgstr ""

#: ../../release_notes.rst:13772
msgid "The same is true for the interactive JS equivalent, ``iplot_state()``. The function names are all the same, just with a prepended `i` for each function. For example, ``iplot_state(rho, method='paulivec')`` is ``iplot_state_paulivec(rho)``."
msgstr ""

#: ../../release_notes.rst:13778
msgid "Changes to Backends"
msgstr ""

#: ../../release_notes.rst:13780
msgid "With the improvements made in the 0.7 release there are a few things related to backends to keep in mind when upgrading. The biggest change is the restructuring of the provider instances in the root  ``qiskit``` namespace. The ``Aer`` provider is not installed by default and requires the installation of the ``qiskit-aer`` package. This package contains the new high performance fully featured simulator. If you installed via ``pip install qiskit`` you'll already have this installed. The python simulators are now available under ``qiskit.BasicAer`` and the old C++ simulators are available with ``qiskit.LegacySimulators``. This also means that the implicit fallback to python based simulators when the C++ simulators are not found doesn't exist anymore. If you ask for a local C++ based simulator backend, and it can't be found an exception will be raised instead of just using the python simulator instead."
msgstr ""

#: ../../release_notes.rst:13794
msgid "Additionally the previously deprecation top level functions ``register()`` and ``available_backends()`` have been removed. Also, the deprecated ``backend.parameters()`` and ``backend.calibration()`` methods have been removed in favor of ``backend.properties()``. You can refer to the 0.6 release notes section :ref:`backends` for more details on these changes."
msgstr ""

#: ../../release_notes.rst:13800
msgid "The ``backend.jobs()`` and ``backend.retrieve_jobs()`` calls no longer return results from those jobs. Instead you must call the ``result()`` method on the returned jobs objects."
msgstr ""

#: ../../release_notes.rst:13805
msgid "Changes to the compiler, transpiler, and unrollers"
msgstr ""

#: ../../release_notes.rst:13807
msgid "As part of an effort to stabilize the compiler interfaces there have been several changes to be aware of when leveraging the compiler functions. First it is important to note that the ``qiskit.transpiler.transpile()`` function now takes a QuantumCircuit object (or a list of them) and returns a QuantumCircuit object (or a list of them). The DAG processing is done internally now."
msgstr ""

#: ../../release_notes.rst:13814
msgid "You can also easily switch between circuits, DAGs, and Qobj now using the functions in ``qiskit.converters``."
msgstr ""

#: ../../release_notes.rst:13826
msgid "Aer provides three simulator backends:"
msgstr ""

#: ../../release_notes.rst:13828
msgid "``QasmSimulator``: simulate experiments and return measurement outcomes"
msgstr ""

#: ../../release_notes.rst:13829
msgid "``StatevectorSimulator``: return the final statevector for a quantum circuit acting on the all zero state"
msgstr ""

#: ../../release_notes.rst:13831
msgid "``UnitarySimulator``: return the unitary matrix for a quantum circuit"
msgstr ""

#: ../../release_notes.rst:13833
msgid "``noise`` module: contains advanced noise modeling features for the ``QasmSimulator``"
msgstr ""

#: ../../release_notes.rst:13836
msgid "``NoiseModel``, ``QuantumError``, ``ReadoutError`` classes for simulating a Qiskit quantum circuit in the presence of errors"
msgstr ""

#: ../../release_notes.rst:13838
msgid "``errors`` submodule including functions for generating ``QuantumError`` objects for the following types of quantum errors: Kraus, mixed unitary, coherent unitary, Pauli, depolarizing, thermal relaxation, amplitude damping, phase damping, combined phase and amplitude damping"
msgstr ""

#: ../../release_notes.rst:13842
msgid "``device`` submodule for automatically generating a noise model based on the ``BackendProperties`` of a device"
msgstr ""

#: ../../release_notes.rst:13845
msgid "``utils`` module:"
msgstr ""

#: ../../release_notes.rst:13847
msgid "``qobj_utils`` provides functions for directly modifying a Qobj to insert special simulator instructions not yet supported through the Qiskit Terra API."
msgstr ""

#: ../../release_notes.rst:13852
msgid "Aqua 0.4"
msgstr ""

#: ../../release_notes.rst:13857
msgid "Programmatic APIs for algorithms and components -- each component can now be instantiated and initialized via a single (non-empty) constructor call"
msgstr ""

#: ../../release_notes.rst:13859
msgid "``QuantumInstance`` API for algorithm/backend decoupling -- ``QuantumInstance`` encapsulates a backend and its settings"
msgstr ""

#: ../../release_notes.rst:13861
msgid "Updated documentation and Jupyter Notebooks illustrating the new programmatic APIs"
msgstr ""

#: ../../release_notes.rst:13863
msgid "Transparent parallelization for gradient-based optimizers"
msgstr ""

#: ../../release_notes.rst:13864
msgid "Multiple-Controlled-NOT (cnx) operation"
msgstr ""

#: ../../release_notes.rst:13865
msgid "Pluggable algorithmic component ``RandomDistribution``"
msgstr ""

#: ../../release_notes.rst:13866
msgid "Concrete implementations of ``RandomDistribution``: ``BernoulliDistribution``, ``LogNormalDistribution``, ``MultivariateDistribution``, ``MultivariateNormalDistribution``, ``MultivariateUniformDistribution``, ``NormalDistribution``, ``UniformDistribution``, and ``UnivariateDistribution``"
msgstr ""

#: ../../release_notes.rst:13871
msgid "Concrete implementations of ``UncertaintyProblem``: ``FixedIncomeExpectedValue``, ``EuropeanCallExpectedValue``, and ``EuropeanCallDelta``"
msgstr ""

#: ../../release_notes.rst:13874
msgid "Amplitude Estimation algorithm"
msgstr ""

#: ../../release_notes.rst:13875
msgid "Qiskit Optimization: New Ising models for optimization problems exact cover, set packing, vertex cover, clique, and graph partition"
msgstr ""

#: ../../release_notes.rst:13877
msgid "Qiskit AI:"
msgstr ""

#: ../../release_notes.rst:13879
msgid "New feature maps extending the ``FeatureMap`` pluggable interface: ``PauliExpansion`` and ``PauliZExpansion``"
msgstr ""

#: ../../release_notes.rst:13881
msgid "Training model serialization/deserialization mechanism"
msgstr ""

#: ../../release_notes.rst:13883
msgid "Qiskit Finance:"
msgstr ""

#: ../../release_notes.rst:13885
msgid "Amplitude estimation for Bernoulli random variable: illustration of amplitude estimation on a single qubit problem"
msgstr ""

#: ../../release_notes.rst:13887
msgid "Loading of multiple univariate and multivariate random distributions"
msgstr ""

#: ../../release_notes.rst:13888
msgid "European call option: expected value and delta (using univariate distributions)"
msgstr ""

#: ../../release_notes.rst:13890
msgid "Fixed income asset pricing: expected value (using multivariate distributions)"
msgstr ""

#: ../../release_notes.rst:13893
msgid "The Pauli string in ``Operator`` class is aligned with Terra 0.7. Now the order of a n-qubit pauli string is ``q_{n-1}...q{0}`` Thus, the (de)serialier (``save_to_dict`` and ``load_from_dict``) in the ``Operator`` class are also changed to adopt the changes of ``Pauli`` class."
msgstr ""

#: ../../release_notes.rst:13901
msgid "``HartreeFock`` component of pluggable type ``InitialState`` moved to Qiskit Chemistry"
msgstr ""

#: ../../release_notes.rst:13903
msgid "``UCCSD`` component of pluggable type ``VariationalForm`` moved to Qiskit Chemistry"
msgstr ""

#: ../../release_notes.rst:13909
msgid "Qiskit 0.6"
msgstr ""

#: ../../release_notes.rst:13912
msgid "Terra 0.6"
msgstr ""

#: ../../release_notes.rst:13917
msgid "This release includes a redesign of internal components centered around a new, formal communication format (Qobj), along with long awaited features to improve the user experience as a whole. The highlights, compared to the 0.5 release, are:"
msgstr ""

#: ../../release_notes.rst:13922
msgid "Improvements for inter-operability (based on the Qobj specification) and extensibility (facilities for extending Qiskit with new backends in a seamless way)"
msgstr ""

#: ../../release_notes.rst:13925
msgid "New options for handling credentials and authentication for the IBM Q backends, aimed at simplifying the process and supporting automatic loading of user credentials"
msgstr ""

#: ../../release_notes.rst:13928
msgid "A revamp of the visualization utilities: stylish interactive visualizations are now available for Jupyter users, along with refinements for the circuit drawer (including a matplotlib-based version)"
msgstr ""

#: ../../release_notes.rst:13931
msgid "Performance improvements centered around circuit transpilation: the basis for a more flexible and modular architecture have been set, including parallelization of the circuit compilation and numerous optimizations"
msgstr ""

#: ../../release_notes.rst:13939
msgid "Please note that some backwards-incompatible changes have been introduced during this release -- the following notes contain information on how to adapt to the new changes."
msgstr ""

#: ../../release_notes.rst:13944
msgid "Removal of ``QuantumProgram``"
msgstr ""

#: ../../release_notes.rst:13946
msgid "As hinted during the 0.5 release, the deprecation of the  ``QuantumProgram`` class has now been completed and is no longer available, in favor of working with the individual components (:class:`~qiskit.backends.basejob.BaseJob`, :class:`~qiskit._quantumcircuit.QuantumCircuit`, :class:`~qiskit._classicalregister.ClassicalRegister`, :class:`~qiskit._quantumregister.QuantumRegister`, :mod:`~qiskit`) directly."
msgstr ""

#: ../../release_notes.rst:13954
msgid "Please check the :ref:`0.5 release notes <quantum-program-0-5>` and the examples for details about the transition::"
msgstr ""

#: ../../release_notes.rst:13979
msgid "IBM Q Authentication and ``Qconfig.py``"
msgstr ""

#: ../../release_notes.rst:13981
msgid "The managing of credentials for authenticating when using the IBM Q backends has been expanded, and there are new options that can be used for convenience:"
msgstr ""

#: ../../release_notes.rst:13984
msgid "save your credentials in disk once, and automatically load them in future sessions. This provides a one-off mechanism::"
msgstr ""

#: ../../release_notes.rst:13990
msgid "afterwards, your credentials can be automatically loaded from disk by invoking :meth:`~qiskit.backends.ibmq.ibmqprovider.IBMQ.load_accounts`::"
msgstr ""

#: ../../release_notes.rst:13996
msgid "or you can load only specific accounts if you only want to use those in a session::"
msgstr ""

#: ../../release_notes.rst:14000
msgid "use environment variables. If ``QE_TOKEN`` and ``QE_URL`` is set, the ``IBMQ.load_accounts()`` call will automatically load the credentials from them."
msgstr ""

#: ../../release_notes.rst:14004
msgid "Additionally, the previous method of having a ``Qconfig.py`` file in the program folder and passing the credentials explicitly is still supported."
msgstr ""

#: ../../release_notes.rst:14011
msgid "Working with backends"
msgstr ""

#: ../../release_notes.rst:14013
msgid "A new mechanism has been introduced in Terra 0.6 as the recommended way for obtaining a backend, allowing for more powerful and unified filtering and integrated with the new credentials system. The previous top-level methods :meth:`~qiskit.wrapper._wrapper.register`, :meth:`~qiskit.wrapper._wrapper.available_backends` and :meth:`~qiskit.wrapper._wrapper.get_backend` are still supported, but will deprecated in upcoming versions in favor of using the `qiskit.IBMQ` and `qiskit.Aer` objects directly, which allow for more complex filtering."
msgstr ""

#: ../../release_notes.rst:14022
msgid "For example, to list and use a local backend::"
msgstr ""

#: ../../release_notes.rst:14029
msgid "And for listing and using remote backends::"
msgstr ""

#: ../../release_notes.rst:14037
msgid "Please note as well that the names of the local simulators have been simplified. The previous names can still be used, but it is encouraged to use the new, shorter names:"
msgstr ""

#: ../../release_notes.rst:14042 ../../release_notes.rst:14079
msgid "Qiskit Terra 0.5"
msgstr ""

#: ../../release_notes.rst:14044
msgid "'local_qasm_simulator'"
msgstr ""

#: ../../release_notes.rst:14044
msgid "'qasm_simulator'"
msgstr ""

#: ../../release_notes.rst:14045
msgid "'local_statevector_simulator'"
msgstr ""

#: ../../release_notes.rst:14045
msgid "'statevector_simulator'"
msgstr ""

#: ../../release_notes.rst:14046
msgid "'local_unitary_simulator_py'"
msgstr ""

#: ../../release_notes.rst:14046
msgid "'unitary_simulator'"
msgstr ""

#: ../../release_notes.rst:14051
msgid "Backend and Job API changes"
msgstr ""

#: ../../release_notes.rst:14053
msgid "Jobs submitted to IBM Q backends have improved capabilities. It is possible to cancel them and replenish credits (``job.cancel()``), and to retrieve previous jobs executed on a specific backend either by job id (``backend.retrieve_job(job_id)``) or in batch of latest jobs (``backend.jobs(limit)``)"
msgstr ""

#: ../../release_notes.rst:14059
msgid "Properties for checking each individual job status (``queued``, ``running``, ``validating``, ``done`` and ``cancelled``) no longer exist. If you want to check the job status, use the identity comparison against ``job.status``::"
msgstr ""

#: ../../release_notes.rst:14070
msgid "Please consult the new documentation of the :class:`~qiskit.backends.ibmq.ibmqjob.IBMQJob` class to get further insight in how to use the simplified API."
msgstr ""

#: ../../release_notes.rst:14074
msgid "A number of members of :class:`~qiskit.backends.basebackend.BaseBackend` and :class:`~qiskit.backends.basejob.BaseJob` are no longer properties, but methods, and as a result they need to be invoked as functions."
msgstr ""

#: ../../release_notes.rst:14081
msgid "backend.name"
msgstr ""

#: ../../release_notes.rst:14081
msgid "backend.name()"
msgstr ""

#: ../../release_notes.rst:14082
msgid "backend.status"
msgstr ""

#: ../../release_notes.rst:14082
msgid "backend.status()"
msgstr ""

#: ../../release_notes.rst:14083
msgid "backend.configuration"
msgstr ""

#: ../../release_notes.rst:14083
msgid "backend.configuration()"
msgstr ""

#: ../../release_notes.rst:14084
msgid "backend.calibration"
msgstr ""

#: ../../release_notes.rst:14084
msgid "backend.properties()"
msgstr ""

#: ../../release_notes.rst:14085
msgid "backend.parameters"
msgstr ""

#: ../../release_notes.rst:14085
msgid "backend.jobs() backend.retrieve_job(job_id)"
msgstr ""

#: ../../release_notes.rst:14087
msgid "job.status"
msgstr ""

#: ../../release_notes.rst:14087
msgid "job.status()"
msgstr ""

#: ../../release_notes.rst:14088
msgid "job.cancelled"
msgstr ""

#: ../../release_notes.rst:14088
msgid "job.queue_position()"
msgstr ""

#: ../../release_notes.rst:14089
msgid "job.running"
msgstr ""

#: ../../release_notes.rst:14089
msgid "job.cancel()"
msgstr ""

#: ../../release_notes.rst:14090
msgid "job.queued"
msgstr ""

#: ../../release_notes.rst:14091
msgid "job.done"
msgstr ""

#: ../../release_notes.rst:14096
msgid "Better Jupyter tools"
msgstr ""

#: ../../release_notes.rst:14098
msgid "The new release contains improvements to the user experience while using Jupyter notebooks."
msgstr ""

#: ../../release_notes.rst:14101
msgid "First, new interactive visualizations of counts histograms and quantum states are provided: :meth:`~qiskit.tools.visualization.plot_histogram` and :meth:`~qiskit.tools.visualization.plot_state`. These methods will default to the new interactive kind when the environment is Jupyter and internet connection exists."
msgstr ""

#: ../../release_notes.rst:14108
#, python-format
msgid "Secondly, the new release provides Jupyter cell magics for keeping track of the progress of your code. Use ``%%qiskit_job_status`` to keep track of the status of submitted jobs to IBM Q backends. Use ``%%qiskit_progress_bar`` to keep track of the progress of compilation/execution."
msgstr ""

#: ../../release_notes.rst:14117
msgid "Qiskit 0.5"
msgstr ""

#: ../../release_notes.rst:14120
msgid "Terra 0.5"
msgstr ""

#: ../../release_notes.rst:14125
msgid "This release brings a number of improvements to Qiskit, both for the user experience and under the hood. Please refer to the full changelog for a detailed description of the changes - the highlights are:"
msgstr ""

#: ../../release_notes.rst:14129
msgid "new ``statevector`` :mod:`simulators <qiskit.backends.local>` and feature and performance improvements to the existing ones (in particular to the C++ simulator), along with a reorganization of how to work with backends focused on extensibility and flexibility (using aliases and backend providers)"
msgstr ""

#: ../../release_notes.rst:14133
msgid "reorganization of the asynchronous features, providing a friendlier interface for running jobs asynchronously via :class:`Job` instances"
msgstr ""

#: ../../release_notes.rst:14135
msgid "numerous improvements and fixes throughout the Terra as a whole, both for convenience of the users (such as allowing anonymous registers) and for enhanced functionality (such as improved plotting of circuits)"
msgstr ""

#: ../../release_notes.rst:14143
msgid "Please note that several backwards-incompatible changes have been introduced during this release as a result of the ongoing development. While some of these features will continue to be supported during a period of time before being fully deprecated, it is recommended to update your programs in order to prepare for the new versions and take advantage of the new functionality."
msgstr ""

#: ../../release_notes.rst:14153
msgid "``QuantumProgram`` changes"
msgstr ""

#: ../../release_notes.rst:14155
msgid "Several methods of the :class:`~qiskit.QuantumProgram` class are on their way to being deprecated:"
msgstr ""

#: ../../release_notes.rst:14158
msgid "methods for interacting **with the backends and the API**:"
msgstr ""

#: ../../release_notes.rst:14160
msgid "The recommended way for opening a connection to the IBM Q API and for using the backends is through the top-level functions directly instead of the ``QuantumProgram`` methods. In particular, the :func:`qiskit.register` method provides the equivalent of the previous :func:`qiskit.QuantumProgram.set_api` call. In a similar vein, there is a new :func:`qiskit.available_backends`, :func:`qiskit.get_backend` and related functions for querying the available backends directly. For example, the following snippet for version 0.4::"
msgstr ""

#: ../../release_notes.rst:14177 ../../release_notes.rst:14195
msgid "would be equivalent to the following snippet for version 0.5::"
msgstr ""

#: ../../release_notes.rst:14186
msgid "methods for **compiling and executing programs**:"
msgstr ""

#: ../../release_notes.rst:14188
msgid "The top-level functions now also provide equivalents for the :func:`qiskit.QuantumProgram.compile` and :func:`qiskit.QuantumProgram.execute` methods. For example, the following snippet from version 0.4::"
msgstr ""

#: ../../release_notes.rst:14201
msgid "In general, from version 0.5 onwards we encourage to try to make use of the individual objects and classes directly instead of relying on ``QuantumProgram``. For example, a :class:`~qiskit.QuantumCircuit` can be instantiated and constructed by appending :class:`~qiskit.QuantumRegister`, :class:`~qiskit.ClassicalRegister`, and gates directly. Please check the update example in the Quickstart section, or the ``using_qiskit_core_level_0.py`` and ``using_qiskit_core_level_1.py`` examples on the main repository."
msgstr ""

#: ../../release_notes.rst:14211
msgid "Backend name changes"
msgstr ""

#: ../../release_notes.rst:14213
msgid "In order to provide a more extensible framework for backends, there have been some design changes accordingly:"
msgstr ""

#: ../../release_notes.rst:14216
msgid "**local simulator names**"
msgstr ""

#: ../../release_notes.rst:14218
msgid "The names of the local simulators have been homogenized in order to follow the same pattern: ``PROVIDERNAME_TYPE_simulator_LANGUAGEORPROJECT`` - for example, the C++ simulator previously named ``local_qiskit_simulator`` is now ``local_qasm_simulator_cpp``. An overview of the current simulators:"
msgstr ""

#: ../../release_notes.rst:14224
msgid "``QASM`` simulator is supposed to be like an experiment. You apply a circuit on some qubits, and observe measurement results - and you repeat for many shots to get a histogram of counts via ``result.get_counts()``."
msgstr ""

#: ../../release_notes.rst:14227
msgid "``Statevector`` simulator is to get the full statevector (:math:`2^n` amplitudes) after evolving the zero state through the circuit, and can be obtained via ``result.get_statevector()``."
msgstr ""

#: ../../release_notes.rst:14230
msgid "``Unitary`` simulator is to get the unitary matrix equivalent of the circuit, returned via ``result.get_unitary()``."
msgstr ""

#: ../../release_notes.rst:14232
msgid "In addition, you can get intermediate states from a simulator by applying a ``snapshot(slot)`` instruction at various spots in the circuit. This will save the current state of the simulator in a given slot, which can later be retrieved via ``result.get_snapshot(slot)``."
msgstr ""

#: ../../release_notes.rst:14237
msgid "**backend aliases**:"
msgstr ""

#: ../../release_notes.rst:14239
msgid "The SDK now provides an \"alias\" system that allows for automatically using the most performant simulator of a specific type, if it is available in your system. For example, with the following snippet::"
msgstr ""

#: ../../release_notes.rst:14247
msgid "the backend will be the C++ statevector simulator if available, falling back to the Python statevector simulator if not present."
msgstr ""

#: ../../release_notes.rst:14251
msgid "More flexible names and parameters"
msgstr ""

#: ../../release_notes.rst:14253
msgid "Several functions of the SDK have been made more flexible and user-friendly:"
msgstr ""

#: ../../release_notes.rst:14255
msgid "**automatic circuit and register names**"
msgstr ""

#: ../../release_notes.rst:14257
msgid ":class:`qiskit.ClassicalRegister`, :class:`qiskit.QuantumRegister` and :class:`qiskit.QuantumCircuit` can now be instantiated without explicitly giving them a name - a new autonaming feature will automatically assign them an identifier::"
msgstr ""

#: ../../release_notes.rst:14264
msgid "Please note as well that the order of the parameters have been swapped ``QuantumRegister(size, name)``."
msgstr ""

#: ../../release_notes.rst:14267
msgid "**methods accepting names or instances**"
msgstr ""

#: ../../release_notes.rst:14269
msgid "In combination with the autonaming changes, several methods such as :func:`qiskit.Result.get_data` now accept both names and instances for convenience. For example, when retrieving the results for a job that has a single circuit such as::"
msgstr ""

#: ../../release_notes.rst:14278
msgid "The following calls are equivalent::"
msgstr ""

