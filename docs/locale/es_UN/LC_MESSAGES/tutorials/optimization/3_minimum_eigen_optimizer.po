msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-29 18:58+0000\n"
"PO-Revision-Date: 2021-05-06 17:34\n"
"Last-Translator: \n"
"Language-Team: Spanish (United)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/3_minimum_eigen_optimizer.po\n"
"X-Crowdin-File-ID: 9152\n"
"Language: es_UN\n"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:10
msgid "This page was generated from `tutorials/optimization/3_minimum_eigen_optimizer.ipynb`__."
msgstr "Esta página ha sido generada a partir de `tutorials/optimization/3_minimum_eigen_optimizer.ipynb`__."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/optimization/3_minimum_eigen_optimizer.ipynb>`_."
msgstr "Puedes correr esta sección de manera interactiva en `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/noise/5_quantum_volume.ipynb>`_."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:9
msgid "Minimum Eigen Optimizer"
msgstr "Optimizador Eigen Mínimo"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:21
msgid "Introduction"
msgstr "Introducción"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:32
msgid "An interesting class of optimization problems to be addressed by quantum computing are Quadratic Unconstrained Binary Optimization (QUBO) problems. Finding the solution to a QUBO is equivalent to finding the ground state of a corresponding Ising Hamiltonian, which is an important problem not only in optimization, but also in quantum chemistry and physics. For this translation, the binary variables taking values in :math:`\\{0, 1\\}` are replaced by spin variables taking values in :math:`\\{-1, +1\\}`, which allows to replace the resulting spin variables by Pauli Z matrices, and thus, an Ising Hamiltonian. For more details on this mapping we refer to [1]."
msgstr ""

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:35
msgid "Qiskit provides automatic conversion from a suitable ``QuadraticProgram`` to an Ising Hamiltonian, which then allows to leverage all the ``MinimumEigenSolver`` such as - ``VQE``, - ``QAOA``, or - ``NumpyMinimumEigensolver`` (classical exact method)."
msgstr "Qiskit provee conversión automática de ``QuadraticProgram`` a un Ising Hamiltoniano, que luego permite aprovechar todo el ``MinimumEigenSolver`` como - ``VQE``, - ``QAOA``, or - ``NumpyMinimumEigensolver`` (método clásico exacto)."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:37
msgid "Qiskit wraps the translation to an Ising Hamiltonian (in Qiskit Aqua also called ``Operator``), the call to an ``MinimumEigensolver`` as well as the translation of the results back to ``OptimizationResult`` in the ``MinimumEigenOptimizer``."
msgstr "Qiskit envuelve la traducción a un Ising Hamiltoniano (en Qiskit Aqua también llamado ``Operator``), la llamada a un ``MinimumEigensolver``, así como la traducción de los resultados a un ``OptimizationResult`` en el ``MinimumEigenOptimizer``."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:39
msgid "In the following we first illustrate the conversion from a ``QuadraticProgram`` to an ``Operator`` and then show how to use the ``MinimumEigenOptimizer`` with different ``MinimumEigensolver`` to solve a given ``QuadraticProgram``. The algorithms in Qiskit automatically try to convert a given problem to the supported problem class if possible, for instance, the ``MinimumEigenOptimizer`` will automatically translate integer variables to binary variables or add a linear equality constraints as a quadratic penalty term to the objective. It should be mentioned that Aqua will through a ``QiskitOptimizationError`` if conversion of a quadratic program with integer variable is attempted."
msgstr "En lo siguiente, primero ilustramos la conversión de un ``QuadraticProgram`` a un ``Operador`` y luego mostramos cómo usar el ``MinimumEigenOptimizer`` con ``MinimumEigensolver`` para resolver un ``QuadraticProgram`` dado. Los algoritmos en Qiskit automáticamente intentan convertir un problema determinado a la clase de problema soportada, si es posible, por ejemplo, el ``MinimumEigenOptimizer`` traducirá automáticamente variables enteras a variables binarias o añadirá una restricción lineal de igualdad como un término de penalización cuadrática al objetivo. Se debe mencionar que Aqua arrojara un ``QiskitOptimizationError`` si se intenta la conversión de un programa cuadrático con variable entera."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:42
msgid "The circuit depth of ``QAOA`` potentially has to be increased with the problem size, which might be prohibitive for near-term quantum devices. A possible workaround is Recursive QAOA, as introduced in [2]. Qiskit generalizes this concept to the ``RecursiveMinimumEigenOptimizer``, which is introduced at the end of this tutorial."
msgstr "La profundidad del circuito de ``QAOA`` podría ser incrementada con el tamaño del problema, lo que podría ser prohibitivo para los dispositivos cuánticos a corto plazo. Un posible método alternativo es el QAOA recursivo, como se introduce en la referencia [2]. Qiskit generaliza este concepto a ``RecursiveMinimumEigenOptimizer``, que se introduce al final de este tutorial."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:45
msgid "References"
msgstr "Referencias"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:47
msgid "[1] `A. Lucas, Ising formulations of many NP problems, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>`__"
msgstr "[1] `A. Lucas, Ising formulations of many NP problems, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>`__"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:49
msgid "[2] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"
msgstr "[2] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:61
msgid "Converting a QUBO to an Operator"
msgstr "Conversión de un QUBO a un operador"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:153
msgid "Next we translate this QUBO into an Ising operator. This results not only in an ``Operator`` but also in a constant offset to be taking into account to shift the resulting value."
msgstr "A continuación traducimos este QUBO en un operador de Ising. Esto no sólo resulta en un ``Operator`` sino también en una compensación constante a tener en cuenta para desplazar el valor resultante."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:214
msgid "Sometimes an ``QuadraticProgram`` might also directly be given in the form of an ``Operator``. For such cases, Qiskit also provides a converter from an ``Operator`` back to a ``QuadraticProgram``, which we illustrate in the following."
msgstr "A veces, un ``QuadraticProgram`` también podría ser dado directamente en forma de ``Operator``. Para tales casos, Qiskit también provee un conversor de ``Operator`` de vuelta a un ``QuadraticProgram``, que ilustramos a continuación."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:288
msgid "This converter allows, for instance, to translate an ``Operator`` to a ``QuadraticProgram`` and then solve the problem with other algorithms that are not based on the Ising Hamiltonian representation, such as the ``GroverOptimizer``."
msgstr "Este conversor permite, por ejemplo, traducir un ``Operator`` a un ``QuadraticProgram`` y luego resolver el problema con otros algoritmos que no se basan en la representación de Ising Hamiltoniano, como ``GroverOptimizer``."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:300
msgid "Solving a QUBO with the MinimumEigenOptimizer"
msgstr "Resolviendo un QUBO con MinimumEigenOptimizer"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:311
msgid "We start by initializing the ``MinimumEigensolver`` we want to use."
msgstr "Empezamos inicializando el ``MinimumEigensolver`` que queremos usar."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:337
msgid "Then, we use the ``MinimumEigensolver`` to create ``MinimumEigenOptimizer``."
msgstr "Luego, usamos el ``MinimumEigensolver`` para crear ``MinimumEigenOptimizer``."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:359
msgid "We first use the ``MinimumEigenOptimizer`` based on the classical exact ``NumPyMinimumEigensolver`` to get the optimal benchmark solution for this small example."
msgstr "Primero usamos el ``MinimumEigenOptimizer`` basado en el clásico exacto ``NumPyMinimumEigensolver`` para obtener la solución de referencia óptima para este pequeño ejemplo."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:404
msgid "Next we apply the ``MinimumEigenOptimizer`` based on ``QAOA`` to the same problem."
msgstr "A continuación aplicamos el ``MinimumEigenOptimizer`` basado en ``QAOA`` para el mismo problema."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:450
msgid "RecursiveMinimumEigenOptimizer"
msgstr "RecursiveMinimumEigenOptimizer"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:461
msgid "The ``RecursiveMinimumEigenOptimizer`` takes a ``MinimumEigenOptimizer`` as input and applies the recursive optimization scheme to reduce the size of the problem one variable at a time. Once the size of the generated intermediate problem is below a given threshold (``min_num_vars``), the ``RecursiveMinimumEigenOptimizer`` uses another solver (``min_num_vars_optimizer``), e.g., an exact classical solver such as CPLEX or the ``MinimumEigenOptimizer`` based on the ``NumPyMinimumEigensolver``."
msgstr "El ``RecursiveMinimumEigenOptimizer`` toma un ``MinimumEigenOptimizer`` como entrada y aplica el esquema de optimización recursiva para reducir el tamaño del problema una variable a la vez. Una vez que el tamaño del problema intermedio generado está por debajo de un umbral dado (``min_num_vars``), el ``RecursiveMinimumEigenOptimizer`` usa otro solucionador (``min_num_vars_optimizer``), ej., un solucionador clásico exacto como CPLEX o el ``MinimumEigenOptimizer`` basado en el ``NumPyMinimumEigensolver``."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:463
msgid "In the following, we show how to use the ``RecursiveMinimumEigenOptimizer`` using the two ``MinimumEigenOptimizer`` introduced before."
msgstr "A continuación, se muestra cómo utilizar el ``RecursiveMinimumEigenOptimizer`` utilizando los dos ``MinimumEigenOptimizer`` presentados antes."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:474
msgid "First, we construct the ``RecursiveMinimumEigenOptimizer`` such that it reduces the problem size from 3 variables to 1 variable and then uses the exact solver for the last variable. Then we call ``solve`` to optimize the considered problem."
msgstr "En primer lugar, construimos el ``RecursiveMinimumEigenOptimizer`` tal que reduce el tamaño del problema de 3 variables a 1 variable y luego utiliza el solucionador exacto para la última variable. Entonces llamamos ``solve`` para optimizar el problema considerado."

