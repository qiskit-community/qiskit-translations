msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-05 21:02+0000\n"
"PO-Revision-Date: 2022-01-05 22:55\n"
"Last-Translator: \n"
"Language-Team: Spanish (United)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/9_entanglement_verification.po\n"
"X-Crowdin-File-ID: 9380\n"
"Language: es_UN\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:10
msgid "This page was generated from `tutorials/noise/9_entanglement_verification.ipynb`__."
msgstr "Esta página fue generada a partir de `tutorials/noise/9_entanglement_verification.ipynb`__."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:9
msgid "Entanglement Verification"
msgstr "Verificación de Entrelazamiento"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:12
msgid "Introduction to the GHZ state"
msgstr "Introducción al estado GHZ"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:14
msgid "**The Greenberger-Horne-Zeilinger (GHZ)** State is a :math:`n`-qubit entangled state best defined by the following state vector:"
msgstr "**El estado de Greenberger-Horne-Zeilinger (GHZ)** es un estado entrelazado de :math:`n` qubits mejor definido por el siguiente vector de estado:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:16
msgid "|{\\rm GHZ} \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}} , n > 2\n\n"
msgstr "|{\\rm GHZ} \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}} , n > 2\n\n"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:18
msgid "Characterization of the GHZ state is very useful in assessing multi-qubit interactions, whose robustness is key to developing large scale quantum computers."
msgstr "La caracterización del estado GHZ es muy útil para evaluar las interacciones de múltiples qubits, cuya robustez es clave para desarrollar computadoras cuánticas a gran escala."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:21
msgid "Characterizing a quantum state"
msgstr "Caracterización de un estado cuántico"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:23
msgid "Any mixed quantum state can be identified by a density matrix, defined as :math:`\\rho = \\sum_{i} p_i |\\psi_{i} \\rangle \\langle \\psi_{i}|`, where :math:`|\\psi_{i} \\rangle` are the pure quantum states forming the mixture and :math:`0 < p_i \\le 1`, :math:`\\sum_{i} p_i = 1` are the classical probabilities to be in state :math:`|\\psi_{i} \\rangle`. We denote the pure density matrix of an ideal GHZ State by :math:`\\rho_{p} \\equiv |{\\rm GHZ} \\rangle \\langle {\\rm GHZ}|`. We want to see how close this matrix is to the density matrix of a GHZ State as produced in an experiment, :math:`\\rho_{T}`. One method to quantify this similarity is to calculate the fidelity between the states, :math:`F(\\rho_{p},\\rho_{T})`"
msgstr "Cualquier estado cuántico mixto puede identificarse mediante una matriz de densidad, definida como :math:`\\rho = \\sum_{i} p_i |\\psi_{i} \\rangle \\langle \\psi_{i}|`, donde :math:`|\\psi_{i} \\rangle` son los estados cuánticos puros que forman la mezcla y :math:`0 < p_i \\le 1`, :math:`\\sum_{i} p_i = 1` son las probabilidades clásicas de estar en estado :math:`|\\psi_{i} \\rangle`. Denotamos la matriz de densidad pura de un estado ideal de GHZ por :math:`\\rho_{p} \\equiv |{\\rm GHZ} \\rangle \\langle {\\rm GHZ}|`. Queremos ver qué tan cerca está esta matriz de la matriz de densidad de un estado GHZ como se produjo en un experimento, :math:`\\rho_{T}`. Un método para cuantificar esta similitud es calcular la fidelidad entre los estados, :math:`F(\\rho_{p},\\rho_{T})`"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:26
msgid "F = \\Big[ Tr \\sqrt{\\sqrt{\\rho_{p}}\\rho_{T}\\sqrt{\\rho_{p}}} \\Big] ^{2}\n\n"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:28
msgid "The aim of this tutorial is two-fold: we will explore ways in which we can characterize the GHZ state, and ways in which we can use Ignis’ error mitigation tools to increase readout fidelity, regardless of characterization method"
msgstr "El objetivo de este tutorial es doble: exploraremos formas en las que podemos caracterizar el estado GHZ, y formas en las que podemos utilizar las herramientas de mitigación de errores de Ignis para aumentar la fidelidad de lectura, independientemente del método de caracterización"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:30
msgid "Before we go further, let us import everything we will need from basic Qiskit:"
msgstr "Antes de ir más lejos, importemos todo lo que necesitaremos de Qiskit:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:62
msgid "The next two functions are from ignis. The first is for the general error mitigation technique, and the second is specifically for quantum tomography"
msgstr "Las siguientes dos funciones son de ignis, la primera es para la técnica general de mitigación de errores, y la segunda es específicamente para la tomografía cuántica"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:85
msgid "The following import from the ``entanglement`` package contains information needed to create, parallelize and analyze GHZ State circuits"
msgstr "La siguiente importación del paquete ``entanglement`` contiene la información necesaria para crear, paralelizar y analizar circuitos de Estado GHZ"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:109
msgid "Preparing a GHZ State"
msgstr "Preparación de un estado GHZ"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:111
msgid "Let us first go over how to prepare a GHZ State:"
msgstr "Primero repasemos cómo preparar un estado GHZ:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:113
msgid "Say we have a system of :math:`n` qubits, all prepared in the :math:`|0\\rangle` state:"
msgstr "Digamos que tenemos un sistema de :math:` n ` qubits, todos preparados en el estado :math:`|0\\rangle`:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:115
msgid "|\\psi \\rangle = |00...0\\rangle\n\n"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:117
msgid "We apply a Hadamard gate to the first qubit: :math:`|0\\rangle \\longrightarrow \\frac{1}{\\sqrt{2}}(|0\\rangle + |1\\rangle)`. Our state now looks like:"
msgstr "Aplicamos una compuerta Hadamard al primer qubit: :math:`|0\\rangle \\longrightarrow \\frac{1}{\\sqrt{2}}(|0\\rangle + |1\\rangle)`. Nuestro estado ahora se ve así:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:119
msgid "|\\psi \\rangle = \\frac{|00...0\\rangle + |10...0\\rangle}{\\sqrt{2}}\n\n"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:121
msgid "Applying on this state a sequence of :math:`n-1` CNOT gate between the :math:`n^{th}` and :math:`(n+1)^{th}` qubits for :math:`n = 0 \\ldots n-1` leaves the :math:`n+1` qubit at :math:`|0\\rangle` if the :math:`n^{th}` is in :math:`|0\\rangle`, and at :math:`|1\\rangle` if the :math:`n^{th}` is in :math:`|1\\rangle`, thus creating the GHZ State:"
msgstr "Aplicando a este estado una secuencia de :math:`n-1` compuerta CNOT entre el :math:`n^{th}` y :math:`(n+1)^{th}` qubits para :math:`n = 0 \\ldots n-1` se deja el qubit :math:`n+1` en :math:`|0\\rangle` si el :math:`n^{th}` está en :math:`|0\\rangle`, y en :math:`|1\\rangle` si el :math:`n^{th}` está en :math:`|1\\rangle`, creando así el estado GHZ:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:123
msgid "|GHZ \\rangle = \\frac{|00...0\\rangle + |11...1\\rangle}{\\sqrt{2}} \\equiv \\frac{|0 \\rangle ^{\\otimes n} + |1 \\rangle ^{\\otimes n}}{\\sqrt{2}}\n\n"
msgstr ""

#: ../../tutorials/noise/9_entanglement_verification.ipynb:125
msgid "The following function creates this “linear” circuit that can measure the GHZ state:"
msgstr "La siguiente función crea este circuito “lineal” que puede medir el estado GHZ:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:209
msgid "Characterization, Part I"
msgstr "Caracterización, Parte I"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:212
msgid "Multiple Quantum Coherence (MQC)"
msgstr "Coherencia cuántica múltiple (MQC)"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:214
msgid "Multiple Quantum Coherence (MQC) works by taking the preliminary preparation of an :math:`n` qubit GHZ State, and rotating each of the qubit states around the z axis by a phase :math:`\\phi`. After that, we apply a X gate, i.e., a :math:`\\pi` pulse around the x axis. Then, we apply the inverse of the operations we originally applied to get the GHZ state. In an ideal situation the final state is :math:`|\\psi \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + e^{i n \\phi}|1 \\rangle ^{\\otimes n}}{\\sqrt{2}}`. We can ideally observe the phase collected by projecting :math:`|\\psi \\rangle` onto the state :math:`|0 \\rangle ^{\\otimes n}`. This technique is reminiscent of an echo sequence, and has been shown to substantially improve the fidelity during readout."
msgstr "La Coherencia Cuántica Múltiple (Multiple Quantum Coherence, MQC) funciona tomando la preparación preliminar de un Estado GHZ de :math:`n` qubits y rotando cada uno de los estados de qubit alrededor del eje z por una fase :math:`\\phi`. Después de eso, aplicamos una compuerta X, es decir, un pulso :math:`\\pi` alrededor del eje x. Luego, aplicamos la inversa de las operaciones que aplicamos originalmente para obtener el estado GHZ. En una situación ideal, el estado final es :math:`|\\psi \\rangle = \\frac{|0 \\rangle ^{\\otimes n} + e^{i n \\phi}|1 \\rangle ^{\\otimes n}}{\\sqrt{2}}`. Idealmente, podemos observar la fase recopilada proyectando :math:`|\\psi \\rangle` en el estado :math:`|0 \\rangle ^{\\otimes n}`. Esta técnica recuerda a una secuencia de eco y se ha demostrado que mejora sustancialmente la fidelidad durante la lectura."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:217
msgid "The function below creates a linear MQC circuit. As with every circuit from here on, you can change the ``full_measurement`` argument to toggle between full measurement of all qubits or measurement of only the control qubit. Full measurement yields the most accurate results, but for more than 7 qubits, it is recommended to set it to false, and observe only the oscillations between the ``'0'`` and ``'1'`` states."
msgstr "La siguiente función crea un circuito MQC lineal. Como en todos los circuitos a partir de aquí, se puede cambiar el argumento ``full_measurement`` para alternar entre la medición completa de todos los qubits o la medición de sólo el qubit de control. La medición completa produce los resultados más exactos, pero para más de 7 qubits, se recomienda establecerlo en falso, y observar sólo las oscilaciones entre los estados ``'0'`` y ``'1'``."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:299
msgid "After running experiments on this MQC circuit, we can pick a state to observe oscillations as we sweep :math:`\\phi` from :math:`0` to :math:`2 \\pi`. Our signal in theory should follow :math:`S(\\phi) = \\frac{1}{2}(1+\\cos(n \\phi))`. We then perform a Discrete Fourier Transform (DFT: :math:`I_{v}=(1/N)|\\sum_{\\phi}e^{iv\\phi}S(\\phi)`) to extract the Fidelity of the state, defined by the bounds :math:`2\\sqrt{I_{n}} \\leq F \\leq \\sqrt{I_{0}/2}+ \\sqrt{I_{n}}`; if desired, an actual value for the fidelity can be obtained: :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1})+\\sqrt{I_{n}})` (arXiv:1905.05720)."
msgstr "Después de ejecutar experimentos en este circuito MQC, podemos elegir un estado para observar las oscilaciones mientras barremos :math:`\\phi` de :math:`0` a :math:`2 \\pi`. Nuestra señal en teoría debería seguir :math:`S(\\phi) = \\frac{1}{2}(1+\\cos(n \\phi))`. Luego realizamos una Transformada Discreta de Fourier (Discrete Fourier Transform, DFT: :math:`I_{v}=(1/N)|\\sum_{\\phi}e^{iv\\phi}S(\\phi)`) para extraer la Fidelidad de el estado, definido por los límites :math:`2\\sqrt{I_{n}} \\leq F \\leq \\sqrt{I_{0}/2}+ \\sqrt{I_{n}}`; si se desea, se puede obtener un valor real para la fidelidad: :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1})+\\sqrt{I_{n}})` (arXiv: 1905.05720)."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:312
msgid "Parity Oscillations"
msgstr "Oscilaciones de Paridad"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:314
msgid "The next method we use to characterize the GHZ state is parity oscillations. After preparing a GHZ state, we apply a combination of rotations about the x and y axes to create various superposition states as a function of :math:`\\phi`: :math:`U(\\phi) = \\otimes_{j}^{N} e^{i\\frac{\\pi}{4}(\\cos(\\phi)\\sigma_{x}^{j}+\\sin(\\phi)\\sigma_{y}^{j})}`. We then measure the expectation value :math:`\\langle \\otimes_{j}^{N} \\sigma_{z}^{j} \\rangle_{\\phi}` as a function of :math:`\\phi`, which in theory should lead to parity oscillations between 1 and -1."
msgstr "El siguiente método que usamos para caracterizar el estado GHZ son las oscilaciones de paridad. Después de preparar un estado GHZ, aplicamos una combinación de rotaciones sobre los ejes x e y para crear varios estados de superposición en función de :math:`\\phi`: :math:`U(\\phi) = \\otimes_{j}^{N} e^{i\\frac{\\pi}{4}(\\cos(\\phi)\\sigma_{x}^{j}+\\sin(\\phi)\\sigma_{y}^{j})}`. Luego medimos el valor esperado :math:`\\langle \\otimes_{j}^{N} \\sigma_{z}^{j} \\rangle_{\\phi}` en función de :math:`\\phi`, que en teoría debería conducir a oscilaciones de paridad entre 1 y -1."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:317
msgid "The following function generates a circuit which is the Parity Oscillation equivalent of the MQC circuit given above"
msgstr "La siguiente función genera un circuito que es el equivalente de la Oscilación de Paridad del circuito MQC dado anteriormente"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:366
msgid "We can obtain fidelity for parity oscillations :math:`S_{\\phi}` from :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1}+C)`, where :math:`C`, the coherence is defined as :math:`2\\sqrt{I_{n}}`, following the same convention for the DFT as with the MQC method."
msgstr "Podemos obtener la fidelidad para las oscilaciones de paridad :math:`S_{\\phi}` desde :math:`F = \\frac{1}{2}(P_{00...0}+P_{11...1}+C)`, donde :math:`C`, es la coherencia y se define como :math:`2\\sqrt{I_{n}}`, siguiendo la misma convención para el DFT que con el método MQC."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:378
msgid "Tomography"
msgstr "Tomografía"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:380
msgid "Tomography measures the density matrix by producing many nominally identical states and measuring the state instances in different bases. The ideal result of a GHZ state is four equal density matrix elements at the 4 corners of the tensor-product basis, with all other elements vanishing. Although the fidelity can be readily calculated by this method, the method is slow (requires exponential number of measurements in n), and takes prohibitively long times if n is larger than 7 or so. Nevertheless, we will show below how to perform this method as it is relevant for small numbers of qubits."
msgstr "La tomografía mide la matriz de densidad produciendo muchos estados nominalmente idénticos y midiendo las instancias de estado en diferentes bases. El resultado ideal de un estado GHZ son cuatro elementos de matriz de igual densidad en las 4 esquinas de la base del producto tensorial, con todos los demás elementos en cero. Aunque la fidelidad se puede calcular fácilmente con este método, el método es lento (requiere un número exponencial de mediciones en n) y toma tiempos prohibitivamente largos si n es mayor que 7 aproximadamente. Sin embargo, mostraremos a continuación cómo realizar este método ya que es relevante para pequeñas cantidades de qubits."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:393
msgid "Parallelizing circuits"
msgstr "Paralelización de circuitos"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:395
msgid "The above “linear” circuits are good to perform simulations, but what do we do when we use real devices, where the system can have an arbitrary topology and various errors? We are specifically targeting real hardware here, not just Aer simulation. One technique to reduce real-hardware effects is to parallelize the CNOT gates and thus create a shorter-depth circuit. This can be hugely beneficial efficiency wise, and fidelity wise. The class ``BConfig`` from the module ``parallelize`` does exactly this."
msgstr "Los circuitos \"lineales\" anteriores son buenos para realizar simulaciones, pero ¿qué hacemos cuando usamos dispositivos reales, donde el sistema puede tener una topología arbitraria y varios errores? Aquí estamos fijándonos específicamente en el hardware real, no solo a la simulación Aer. Una técnica para reducir los efectos del hardware real es paralelizar las puertas CNOT y así crear un circuito de menor profundidad. Esto puede ser muy beneficioso en términos de eficiencia y fidelidad. La clase ``BConfig`` del módulo ``parallelize`` hace exactamente esto."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:398
msgid "First we must configure the optimal backend we want to use. We will consider a simulation backend, ``'ibmq_qasm_simulator'``, disguised as a real device, ``'ibmq_16_melbourne'`` by using a the mock backend ``'FakeMelbourne'``"
msgstr "Primero debemos configurar el backend óptimo que queremos utilizar. Consideraremos un backend de simulación, ``'ibmq_qasm_simulator'``, disfrazado como un dispositivo real, ``'ibmq_16_melbourne'`` mediante el uso de un backend emulado (mock) ``'FakeMelbourne'``"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:422
msgid "Using the ``noise`` module, we can now define a noise model from ``'ibmq_16_melbourne'`` to “assign” to ``'ibmq_qasm_simulator'``."
msgstr "Usando el módulo ``noise``, ahora podemos definir un modelo de ruido usando ``'ibmq_16_melbourne'`` para “asignárselo” a ``'ibmq_qasm_simulator'``."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:445
msgid "And there we have it. From now on, in the tutorial, when using a real device, not a simulation, just take out every mention and assignment of ``noise_model`` and ``coupling_map``, and assign the real device to ``backend``. The simulator used from now on is no substitute for running a real device."
msgstr "Y ahí lo tenemos. A partir de ahora, en el tutorial, cuando se utilice un dispositivo real, no una simulación, simplemente elimine cada mención y asignación de ``noise_model`` y ``coupling_map``, y asigne el dispositivo real a ``backend``. El simulador utilizado a partir de ahora no sustituye a la ejecución de un dispositivo real."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:456
msgid "``BConfig`` lays the blueprint for creating parallelized circuits. Let us initialize an object taking in the real device we just defined, and name it ``protocirc``. All of our experiments will use it:"
msgstr "``BConfig`` establece el plan para crear circuitos paralelizados. Inicialicemos un objeto tomando el dispositivo real que acabamos de definir y llamémoslo ``protocirc``. Todos nuestros experimentos lo usarán:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:478
msgid "Error Mitigation"
msgstr "Mitigación de errores"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:480
msgid "Qiskit Ignis provides very accurate tools to take raw data and return calibrated data. This is done by getting the raw data, in the form of a vector :math:`v_{raw}` and getting a calibration matrix :math:`A`. The output is then the solution to the optimization problem: :math:`argmin_{v_{cal}} ||Av_{cal}-v_{raw}||^{2}`"
msgstr "Qiskit Ignis proporciona herramientas muy precisas para tomar datos crudos y devolver datos calibrados. Esto se hace obteniendo los datos crudos, en la forma de un vector :math:`v_{raw}` y obteniendo una matriz de calibración :math:`A`. La salida es entonces la solución al problema de optimización: :math:`argmin_{v_{cal}} ||Av_{cal}-v_{raw}||^{2}`"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:492
msgid "Experiment Time"
msgstr "Tiempo del Experimento"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:495
msgid "Preliminary Steps"
msgstr "Pasos preliminares"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:497
msgid "The probabilities of measuring :math:`|0\\rangle ^{\\otimes n}` and :math:`|1\\rangle^{\\otimes n}` in the GHZ state are important in calculating fidelity. For this, we need to run the following test"
msgstr "Las probabilidades de medir :math:`|0\\rangle ^{\\otimes n}` y :math:`|1\\rangle^{\\otimes n}` en el estado GHZ son importantes para calcular la fidelidad. Para esto, necesitamos ejecutar la siguiente prueba"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:508
msgid "We begin by defining standard execution parameters:"
msgstr "Comenzamos definiendo parámetros de ejecución estándar:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:936
msgid "Now with error mitigation:"
msgstr "Ahora con mitigación de errores:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1079
msgid "We will load these values in a dictionary for assessing fidelity later on:"
msgstr "Cargaremos estos valores en un diccionario para evaluar la fidelidad más adelante:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1101
msgid "Part 1 : MQC"
msgstr "Parte 1: MQC"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1103
msgid "We now retrieve a parallelized MQC circuit for the n qubit device"
msgstr "Ahora recuperamos un circuito MQC paralelizado para el dispositivo de n qubits"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1166
msgid "We now execute the MQC experiment:"
msgstr "Ahora ejecutamos el experimento MQC:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1213
msgid "Now we will plot the amount of counts measured for :math:`|0 \\rangle ^{\\otimes n}` as a function of phase. It is important to note that when using a parametrized circuit like the one here, the method ``get_counts()`` accepts an **index** and not a **circuit**. In any other type of experiment, ``get_counts()`` accepts a **circuit**."
msgstr "Ahora graficaremos la cantidad de recuentos medidos para :math:`|0 \\rangle ^{\\otimes n}` como una función de fase. Es importante notar que cuando se usa un circuito paralelizado como el de aquí, el método ``get_counts()`` acepta un **índice** y no un **circuito**. En cualquier otro tipo de experimento, ``get_counts()`` acepta un **circuito**."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1244
msgid "Now we get started on error mitigation. We create an identical quantum register and use complete_meas_cal from Ignis, to create circuits for calibrated measurements to be executed, and a calibration matrix."
msgstr "Ahora comenzamos con la mitigación de errores. Creamos un registro cuántico idéntico y usamos complete_meas_cal de Ignis, para crear circuitos para que se ejecuten mediciones calibradas, y una matriz de calibración."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1314
msgid "Finally, we have our error mitigated results:"
msgstr "Finalmente, tenemos nuestros resultados con errores mitigados:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1335
msgid "We can see how the error mitigated results yield a far greater fidelity than the raw data"
msgstr "Podemos ver cómo los resultados con errores mitigados producen una fidelidad mucho mayor que los datos crudos"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1470
msgid "We now plot the DFT and compare the heights of the peaks to give bounds for the fidelity"
msgstr "Ahora trazamos la DFT y comparamos las alturas de los picos para dar límites para la fidelidad"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1481
msgid "Statistical bootstrapping has found that the error on these measurements is at most 1.5% (arXiv 1905.05720), so these result fall within error bounds, despite the fidelity being slightly higher than the upper bound, and show how error mitigation dramatically increases fidelity"
msgstr "El procedimiento de remuestreo (bootstrapping) estadístico ha encontrado que el error en estas mediciones es como máximo del 1.5% (arXiv 1905. 5720), por lo que estos resultados caen dentro de los límites de error, a pesar de que la fidelidad es ligeramente superior al límite superior, y muestran cómo la mitigación de errores aumenta drásticamente la fidelidad"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1493
msgid "Part 2: Parity Oscillation"
msgstr "Parte 2: Oscilación de paridad"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1495
msgid "We now retrieve a parallelized Parity Oscillation circuit for the n qubit device, and run experiments in the same fashion as we did in MQC."
msgstr "Ahora recuperamos un circuito de oscilación de paridad en paralelo para el dispositivo de n qubits y ejecutamos experimentos de la misma manera que lo hicimos en MQC."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1595
msgid "Now we construct the :math:`\\otimes _{j}^{N} \\sigma_z^{j}` matrix for instruction, although this is already taken into account in the following method, ``entanglement.analysis.composite_pauli_z_expvalue()``:"
msgstr "Ahora construimos la matriz :math:`\\otimes _{j}^{N} \\sigma_z^{j}` por instrucción, aunque esto ya se tiene en cuenta en el siguiente método, ``entanglement.analysis.composite_pauli_z_expvalue()``:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1618
msgid "Now we want to make sure that our list of counts is correctly ordered so that it coincides with the states of the :math:`\\otimes _{j}^{N} \\sigma_z^{j}`, so that calculating :math:`\\langle \\otimes _{j}^{N} \\sigma_z^{j} \\rangle` will be as simple as taking the dot product of this ordered list with the diagonal of :math:`\\otimes _{j}^{N} \\sigma_z^{j}`. The ``composite_pauli_z_expvalue`` function does just that; it takes a circuit and appropriately orders the state vector counts. We can plot this dot product as a function of :math:`\\phi` to observe parity oscillations."
msgstr "Ahora queremos asegurarnos de que nuestra lista de conteos esté ordenada correctamente para que coincida con los estados de :math:`\\otimes _{j}^{N} \\sigma_z^{j}`, así que calcular :math:`\\langle \\otimes _{j}^{N} \\sigma_z^{j} \\rangle` será tan sencillo como tomar el producto punto de esta lista ordenada con la diagonal de :math:`\\otimes _{j}^{N} \\sigma_z^{j}`. La función ``composite_pauli_z_expvalue`` hace justo eso; toma un circuito y ordena apropiadamente los conteos de vectores de estado. Podemos graficar este producto punto como función de :math:`\\phi` para observar las oscilaciones de paridad."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1669
msgid "Now for standard error mitigation:"
msgstr "Ahora la mitigación estándar de errores:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1768
msgid "We can see how error mitigation dramatically improves our measurement (much more so in PO than in MQC). Let us quantify this using the same DFT method we used in MQC, and calculating the actual fidelities:"
msgstr "Podemos ver cómo la mitigación de errores mejora drásticamente nuestra medición (mucho más en PO que en MQC). Cuantifiquemos esto usando el mismo método DFT que usamos en MQC y calculando las fidelidades reales:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1858
msgid "As we see, the raw fidelity is much lower than what is achieved with MQC, but the error mitigated result is about the same."
msgstr "Como vemos, la fidelidad bruta es mucho menor que la que se logra con MQC, pero el resultado mitigado de errores es aproximadamente el mismo."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1870
msgid "Part 3: Tomography"
msgstr "Parte 3: Tomografía"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1872
msgid "The first step in this experiment to just pass a simple GHZ state with *no* measurements. Also, the circuit cannot be transpiled; the ``transpiled`` argument in the ``getGHZChecker()`` method can be turned on and off as is shown"
msgstr "El primer paso en este experimento es simplemente pasar un estado GHZ simple *sin* mediciones. Además, el circuito no se puede transpilar; el argumento ``transpiled`` en el método ``getGHZChecker()`` se puede activar y desactivar como se muestra"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1907
msgid "We now pass a simulated backend from ``Aer`` to get theoretical statevector counts"
msgstr "Ahora pasamos un backend simulado de ``Aer`` para obtener los conteos teóricos de un vector de estado"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:1954
msgid "This following code runs tomography experiments on the circuit we defined first, which is then compared to the theoretical statevector to generate a density matrix"
msgstr "El siguiente código ejecuta experimentos de tomografía en el circuito que definimos primero, que luego se compara con el vector de estado teórico para generar una matriz de densidad"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2010
msgid "From here we can get the fidelity, although this method is not as fool proof as the one we will get to eventually:"
msgstr "Desde aquí podemos obtener la fidelidad, aunque este método no es tan infalible como al que llegaremos eventualmente:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2031
msgid "…And now for error mitigation…"
msgstr "…Y ahora para mitigación de errores…"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2113
msgid "Now, using ``qiskit.visualization``, we can plot the raw density matrix, real, and imaginary parts being on separate plots,…"
msgstr "Ahora, usando ``qiskit.visualization``, podemos graficar la matriz de densidad bruta, las partes reales e imaginarias en gráficas separadas,…"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2152
msgid "And also the error mitigated density matrix,…"
msgstr "Y también la matriz de densidad con mitigación de error,…"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2191
msgid "The actual density matrices can be obtained using the ``fit()`` method. Once we have the density matrix, we can compute the fidelity, which is nothing but half the sum of the four corners of the density matrix; the following method helps us:"
msgstr "Las matrices de densidad reales se pueden obtener utilizando el método ``fit()``. Una vez que tenemos la matriz de densidad, podemos calcular la fidelidad, que no es más que la mitad de la suma de las cuatro esquinas de la matriz de densidad; el siguiente método nos ayuda:"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2270
msgid "As we see, the raw fidelity is much lower than what is achieved with either MQC or Parity Oscillations, but the error mitigated result is about the same."
msgstr "Como vemos, la fidelidad bruta es mucho menor que la que se logra con MQC u Oscilaciones de Paridad, pero el resultado mitigado de errores es aproximadamente el mismo."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2272
msgid "**A note on tomography**"
msgstr "**Una nota sobre tomografía**"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2274
msgid "Do not perform quantum tomography with >5 qubits"
msgstr "No realizar tomografía cuántica con >5 qubits"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2286
msgid "Conclusion"
msgstr "Conclusión"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2288
msgid "In conclusion, we see that without error mitigation, MQC is the superior method for characterizing the GHZ state. However, with error mitigation, all methods can, at least for a small number of qubits, achieve a much greater fidelity, and all near the same value. To get more accurate results, aside from using a real device, it is worth increasing the number of shots four to eight-fold. It may be worth comparing how the parallelized circuits used in this notebook perform fidelity-wise versus linearized circuits."
msgstr "En conclusión, vemos que sin mitigación de errores, MQC es el método superior para caracterizar el estado GHZ. Sin embargo, con la mitigación de errores, todos los métodos pueden, al menos para una pequeña cantidad de qubits, lograr una fidelidad mucho mayor y todos cerca del mismo valor. Para obtener resultados más precisos, además de usar un dispositivo real, vale la pena aumentar el número de iteraciones entre cuatro y ocho veces. Puede valer la pena comparar cómo los circuitos paralelizados usados en este cuaderno funcionan en fidelidad versus circuitos linealizados."

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2301
msgid "External collaborators"
msgstr "Colaboradores externos"

#: ../../tutorials/noise/9_entanglement_verification.ipynb:2303
msgid "Rohith Karur"
msgstr "Rohith Karur"

