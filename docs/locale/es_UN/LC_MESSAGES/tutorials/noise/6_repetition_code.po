msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-05 21:02+0000\n"
"PO-Revision-Date: 2022-01-05 22:55\n"
"Last-Translator: \n"
"Language-Team: Spanish (United)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/6_repetition_code.po\n"
"X-Crowdin-File-ID: 9142\n"
"Language: es_UN\n"

#: ../../tutorials/noise/6_repetition_code.ipynb:10
msgid "This page was generated from `tutorials/noise/6_repetition_code.ipynb`__."
msgstr "Esta página ha sido generada a partir de `tutorials/noise/6_repetition_code.ipynb`__."

#: ../../tutorials/noise/6_repetition_code.ipynb:9
msgid "Repetition Codes"
msgstr "Códigos de Repetición"

#: ../../tutorials/noise/6_repetition_code.ipynb:21
msgid "Introduction"
msgstr "Introducción"

#: ../../tutorials/noise/6_repetition_code.ipynb:23
msgid "In quantum error correction we take many noisy qubits (which we call *physical qubits*) and use them to store a smaller number of *logical qubits*. The error correction procedure is designed to detect and correct for the effects of noise. This makes the logical qubits much less noisy and more reliable than the physical ones from which they are built."
msgstr "En la técnica de corrección de errores cuántica tomamos varios qubits con ruido (a los cuales llamamos *qubits físicos*) y los usamos para guardar un número más pequeño de *qubits lógicos*. El procedimiento de corrección de errores está diseñado para detectar y corregir los efectos del ruido. Esto hace a los qubits mucho menos ruidosos y mucho más fidedignos que los qubits físicos con los que son construidos."

#: ../../tutorials/noise/6_repetition_code.ipynb:25
msgid "The repetition code is a simple example of quantum error correction, in which a logical *bit* is stored rather than a logical *qubit*. A given instance of the repetition code is defined by two numbers, which we call :math:`d` and :math:`T`."
msgstr "El código de repetición es un ejemplo simple de corrección de errores cuántica, en el cual un *bit* lógico es guardado en lugar de un *qubit* lógico. Una instancia dada de código de repetición está definida por dos números, a los que llamamos :math:`d` y :math:`T`."

#: ../../tutorials/noise/6_repetition_code.ipynb:27
msgid "The :math:`d` parameter determines how many physical qubits are used. The actual information about the logical bit is stored in :math:`d` qubits (which we’ll call *code qubits*). The encoding is done in a very simple way: to encode a ``0``, all these qubits are set in the state :math:`|0\\rangle`, to encode a ``1`` they are set to :math:`|1\\rangle`. To readout the value, you can just look at any qubit. To read it out in a way that protects against single qubit errors, you can read out all the qubits and take a majority vote."
msgstr "El parámetro :math:`d` determina cuantos qubits físicos son usados. La información como tal del bit lógico es guardada en :math:`d` qubits (a los cuales llamaremos *qubits de código*). La codificación se hace de manera muy simple: para codificar un ``0``, todos estos qubits son inicializados al estado :math:`|0\\rangle`, para codificar un ``1``, son inicializados a :math:`|1\\rangle`. Para leer el valor, puedes medir cualquier qubit. Para leerlo de manera que lo proteja contra errores de un solo qubit, puedes medir todos los qubits y tomar el valor de la mayoría."

#: ../../tutorials/noise/6_repetition_code.ipynb:30
msgid "It is not only at readout that we can extract useful information that will help us correct errors. We can also extract information while the logical bit sits idle, or even while it is involved in computation."
msgstr "No es solo al momento de la lectura de salida en el que podemos extraer información útil para corregir errores. También podemos extraer información mientras los qubits están inactivos, o incluso mientras están haciendo cálculos."

#: ../../tutorials/noise/6_repetition_code.ipynb:32
msgid "Since this is an exercise in quantum error correction, we will do this in a way that would also work for logical *qubits*. Specifically, our method of extracting information about errors must not extract any information regarding the stored logical information. In the quantum case, this is required so that we do not disturb superposition states of the stored qubits."
msgstr "Como esto es un ejercicio para corrección de errores cuántica, vamos a hacer esto en una manera que también puede funcionar para *qubits* lógicos. Específicamente, nuestro método para extraer información acerca de los errores no debe extraer información acerca de la información lógica almacenada. En el caso de la cuántica, eso es necesario para no alterar los estados de superposición guardados en los qubits."

#: ../../tutorials/noise/6_repetition_code.ipynb:34
msgid "We will extract information over :math:`T` rounds of *syndrome measurements*. For the repetition code, these are based on the fact that all code qubits should be in the same state (all :math:`|0\\rangle` or all :math:`|1\\rangle`). Any departure from this is therefore a signature of error. Specifically, we imagine our :math:`d` code qubits sitting along a line. We will then perform a measurement on each pair of neighboring code qubits. This will tell us whether they are the same or different, without extracting any information on what their values are."
msgstr "Extraeremos información a lo largo de :math:`T` rondas de *medidas de síndromes*. Para el código de repetición, estas están basadas en el hecho que todos los qubits de código deben de estar en el mismo estado (todos :math:`|0\\rangle` o todos :math:`|1\\rangle`). Cualquier desvío de esto es una señal de error. Específicamente, nos imaginamos a todos nuestros :math:`d` qubits de código en una fila. En seguida, hacemos la medición en cada par de qubits colindantes. Esto nos va a decir si son iguales o diferentes, sin extraer información alguna acerca de cuales son sus valores."

#: ../../tutorials/noise/6_repetition_code.ipynb:37
msgid "The implementation of these measurements requires :math:`d-1` additional qubits, which we will call *link qubits* for the repetition code. By performing two CNOTs between the pair of code qubits and a corresponding link qubit, the required information (and only the required information) is placed on the link qubit and can then be measured."
msgstr "La implementación de estas mediciones requiere :math:`d-1` qubits adicionales, que llamaremos *qubits de enclace* para el código de repetición. Al realizar dos CNOT entre el par de qubits del código y un qubit de enlace correspondiente, la información requerida (y solo la información requerida) se coloca en el qubit de enlace y luego se puede medir."

#: ../../tutorials/noise/6_repetition_code.ipynb:105
msgid "Here we provide tools for creating and testing repetition codes. The first thing we need to do is import them."
msgstr "Aquí proporcionamos herramientas para crear y probar códigos de repetición. La primera cosa que necesitamos hacer es importarlos."

#: ../../tutorials/noise/6_repetition_code.ipynb:129
msgid "Creating a repetition code"
msgstr "Creación de código de repetición"

#: ../../tutorials/noise/6_repetition_code.ipynb:131
msgid "The ``repetition_code`` class creates a code for given values of :math:`d` and :math:`T`."
msgstr "La clase ``repetition_code`` crea un código para los valores dados de :math:`d` y :math:`T`."

#: ../../tutorials/noise/6_repetition_code.ipynb:154
msgid "With this we can inspect various properties of the code, such as the names of the qubit registers used for the code and ancilla qubits."
msgstr "Con esto podemos inspeccionar varias propiedades del código, como nombres de los registros de qubits usados para el código y los qubits ancilla."

#: ../../tutorials/noise/6_repetition_code.ipynb:199
msgid "These registers are also attributes of the ``repetition_code`` object."
msgstr "Estos registros también son atributos del objeto ``repetition_code``."

#: ../../tutorials/noise/6_repetition_code.ipynb:244
msgid "You can also access the quantum circuits that implement the code. Two of these are produced: one for each of the two possible logical bit values."
msgstr "También puedes acceder a los circuitos cuánticos que implementan el código. Dos de estos son producidos: uno para cada uno de los valores posibles para los bits lógicos."

#: ../../tutorials/noise/6_repetition_code.ipynb:606
msgid "Building a custom repetition code"
msgstr "Construyendo un código de repetición personalizado"

#: ../../tutorials/noise/6_repetition_code.ipynb:608
msgid "You can also implement measurement rounds and logical ``X`` gates yourself. For example, let’s set up a code with no syndrome measurement rounds."
msgstr "También puedes implementar rondas de medición y compuertas lógicas ``X`` por ti mismo. Por ejemplo, configuremos un código sin rondas de medidas de síndrome."

#: ../../tutorials/noise/6_repetition_code.ipynb:629
msgid "This does nothing but set up two circuits for the two logical encoded states. There are no syndrome measurement rounds, and no final readout."
msgstr "Esto no hace nada mas que configurar dos circuitos para los dos estados lógicos codificados. No hay rondas de mediciones de síndromes y no hay lectura final."

#: ../../tutorials/noise/6_repetition_code.ipynb:759
msgid "We can add a round using the ``syndrome_measurement()`` method."
msgstr "Podemos añadir una ronda con el método, ``syndrome_measurement()``."

#: ../../tutorials/noise/6_repetition_code.ipynb:909
msgid "A logical ``X`` operation can be added using the ``x()`` method."
msgstr "Una operación lógica ``X`` puede ser añadida con el método ``x()``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1059
msgid "This also has a ``logs`` kwarg, which is a list of the circuits for which ``X`` is applied. This is ``['0','1']`` by default."
msgstr "Esto también tiene el kwarg ``logs``, que es una lista de los circuitos para los cuales ``X`` es aplicada. Esto es ``['0','1']`` de forma predeterminada."

#: ../../tutorials/noise/6_repetition_code.ipynb:1070
msgid "Final readout is then done with the ``readout()`` method."
msgstr "La lectura final se realiza con el método ``readout()``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1320
msgid "Running a repetition code"
msgstr "Ejecutar un código de repetición"

#: ../../tutorials/noise/6_repetition_code.ipynb:1322
msgid "The code object produces the circuits required for the code. The user can then run them using any method they prefer, allowing full control over compilation, backends, noise models and so on."
msgstr "El objeto code produce los circuitos requeridos para el código. El usuario puede ejecutarlos usando el método que prefieran, permitiendo el control total de la compilación, los backends, los modelos de ruido y así sucesivamente."

#: ../../tutorials/noise/6_repetition_code.ipynb:1324
msgid "For example, here we run them without noise on the ``qasm_simulator``."
msgstr "Por ejemplo, aquí los ejecutamos sin ruido con el ``qasm_simulator``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1395
msgid "Here the strings from right to left represent the outputs of the syndrome measurement rounds, followed by the final measurement of the code qubits."
msgstr "Aquí las cadenas de derecha a izquierda representan las salidas de las rondas de mediciones de síndrome, seguidas por las mediciones finales de bits de código."

#: ../../tutorials/noise/6_repetition_code.ipynb:1397
msgid "These results need to be rewritten in a different form in order to be decoded. To do this we can use the ``process_results`` method of the code object."
msgstr "Estos resultados deben ser reescritos en una forma diferente para que puedan ser decodificados. Para esto podemos utilizar el método ``process_results`` del objeto code."

#: ../../tutorials/noise/6_repetition_code.ipynb:1442
msgid "The result is a dictionary whose keys are bit strings that represent outputs of the circuit, and the values represent the number of shots for which this output occurred."
msgstr "El resultado es un diccionario cuyas claves son cadenas de bits que representan salidas del circuito, y los valores representan el número de iteraciones para los que se produjo esta salida."

#: ../../tutorials/noise/6_repetition_code.ipynb:1444
msgid "The strings are not the direct output from the circuits. They have been processed to take the form that helps us correct errors. Here’s a short guided tour."
msgstr "Las cadenas no son las salidas directas de los circuitos. Estas han sido procesadas para tomar una forma que nos ayude a corregir errores. Aquí hay una breve excursión guiada."

#: ../../tutorials/noise/6_repetition_code.ipynb:1446
msgid "The ``0 0`` to the far left for the logical ``0`` result, and the ``1 1`` to the far left of the logical ``1``, are the logical readout. Any code qubit could be used for this readout, since they should (without errors) all be equal. So we could have just one result here, for one arbitrarily chosen code qubit. Or we could have :math:`d`, one for each qubit. Instead we have two, from the two qubits at either end of the line. This is because it works best with the decoder (which we’ll use later). In the absence of errors, these two values will always be equal."
msgstr "El ``0 0`` a la izquierda en el resultado lógico ``0``, y el ``1 1`` a la izquierda en el resultado lógico ``1``, son las mediciones lógicas. Cualquier qubit de código puede ser usado para esta medición, ya que deberían (al no haber errores) de ser todos iguales. Entonces podríamos tener un solo resultado aquí, para un qubit de código elegido arbitrariamente. O podríamos tener :math:`d` resultados, uno para cada qubit. En vez de esto tenemos dos, de los dos qubits en ambos extremos de la fila. Esto es porque así funciona mejor el decodificador (que usaremos más adelante). Si no hay errores, esos dos valores siempre serán iguales."

#: ../../tutorials/noise/6_repetition_code.ipynb:1449
msgid "The following ``0000`` is the :math:`d-1` results of the syndrome measurements for the first round.A ``0`` implies that the corresponding pair of qubits where the same, and ``1`` implies different. There are :math:`d-1` results because the line of :math:`d` code qubits has :math:`d-1` possible neighboring pairs. In the absence of errors, they will all be ``0``."
msgstr "El ``0000`` siguiente es el resultado :math:`d-1` de las mediciones de síndrome de la primera ronda. Un ``0`` implica que los pares de qubits correspondientes fueron iguales y ``1`` implica que fueron diferentes. Hay :math:`d-1` resultados porque la línea de :math:`d` qubits de código tiene :math:`d-1` posibles pares colindantes. Si no hay errores, todos serán ``0``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1451
msgid "The ``0000`` that follows that is the syndrome change between the first and second rounds. It is therefore the bitwise ``OR`` of the syndrome measurement results from the second round with those from the first. In the absence of errors, they will all be ``0``."
msgstr "El ``0000`` que sigue es el cambio de síndrome entre la primera y segunda ronda. Es, por lo tanto, el operador ``OR`` de los resultados de las mediciones de síndrome de la segunda ronda con los de la primera. Si no hay errores, todos serán ``0``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1453
msgid "Subsequent blocks follow the same formula, though the last requires some comment. This is not measured using the standard method (with a link qubit). Instead it is calculated from the final readout measurement of all code qubits. Again it is presented as a syndrome change, and will be all ``0`` in the absence of errors. This is the :math:`T+1`-th block of syndrome measurements since, as it is not done in the same way as the others, it is not counted among the :math:`T` syndrome measurement rounds."
msgstr "Los siguientes bloques siguen la misma fórmula, aunque el último si requiere un comentario. Este no es medido usando el método estándar (con un qubit de enlace). En lugar de esto, es calculado con la última medición de todos los qubits de código. De nuevo, es presentada como un cambio de síndrome, y todos van a ser ``0``, si no hay errores. Este es el :math:`T+1`-ésimo bloque de mediciones de síndrome ya que, como no es realizado de la misma manera que los demás, no se cuenta dentro de las :math:`T` rondas de mediciones de síndrome."

#: ../../tutorials/noise/6_repetition_code.ipynb:1456
msgid "**Example 1:** ``0 0  0110 0000 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``0``. The syndrome shows that (most likely) the middle code qubit was flipped by an error before the first measurement round. This causes it to disagree with both neighboring code qubits for the rest of the circuit. This is shown by the syndrome in the first round, but the blocks for subsequent rounds do not report it as it no longer represents a change. Other sets of errors could also have caused this syndrome, but they would need to be more complex and so presumably less likely."
msgstr "**Ejemplo 1.** ``0 0  0110 0000 0000`` representaría al código de repetición :math:`d=5`, :math:`T=2` con ``0`` codificado. El síndrome muestra que (muy probablemente) el qubit de código de en medio fue volteado por un error antes de la primera ronda. Esto hace que no esté de acuerdo con los qubits de código colindantes para el resto del circuito. Esto es mostrado por el síndrome en la primera ronda, pero los bloques de las siguientes rondas no lo reportan porque ya no representa un cambio. Otros conjuntos de errores podrían haber causado este síndrome, pero tendrían que ser más complejos y presuntamente más complicados."

#: ../../tutorials/noise/6_repetition_code.ipynb:1459
msgid "**Example 2:** ``0 0  0010 0010 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``0``. Here one of the syndrome measurements reported a difference between two code qubits in the first round, leading to a ``1``. The next round did not see the same effect, and so resulted in a ``0``. However, since this disagreed with the previous result for the same syndrome measurement, and since we track syndrome changes, this change results in another ``1``. Subsequent rounds also do not detect anything, but this no longer represents a change and hence results in a ``0`` in the same position. Most likely the measurement result leading to the first ``1`` was an error."
msgstr "**Ejemplo 2.**``0 0  0010 0010 0000`` representaría al código de repetición :math:`d=5`, :math:`T=2` con ``0`` codificado. Aquí una de las mediciones de síndrome reporta una diferencia entre dos qubits de código en la primera ronda, lo cual resulta en un ``1``.  La siguiente ronda no ve el mismo efecto, y resulta en un ``0``. Sin embargo, ya que esto no coincide con el resultado previo para la misma medición de síndrome, y ya que damos seguimiento a los cambios de síndrome, este cambio resulta en un ``1``. Las siguientes rondas tampoco detectan nada, pero esto ya no representa un cambio, por eso resulta en un ``0`` en la misma posición. Muy probablemente el resultado de la medición que resultó en el primer ``1`` fue un error."

#: ../../tutorials/noise/6_repetition_code.ipynb:1462
msgid "**Example 3:** ``0 1  0000 0001 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``1``. A code qubit on the end of the line is flipped before the second round of syndrome measurements. This is detected by only a single syndrome measurement, because it is on the end of the line. For the same reason, it also disturbs one of the logical readouts."
msgstr "**Ejemplo 3:** ``0 1  0000 0001 0000`` representaría al código de repetición :math:`d=5`, :math:`T=2` con ``1`` codificado. Un qubit de código al final de la fila es volteado antes de la segunda ronda de mediciones de síndrome. Este es detectado por una sola medición de síndrome, porque esta al final de la fila. Por la misma razón, perturba una de las salidas lógicas."

#: ../../tutorials/noise/6_repetition_code.ipynb:1464
msgid "Note that in all these examples, a single error causes exactly two characters in the string to change from the value it would have with no errors. This is, in fact, the reason why the logical output consists of both endpoints. It is a property that will be used by the decoder."
msgstr "Ten en cuenta que en todos estos ejemplos, un solo error causa que exactamente dos caracteres de la cadena sean diferentes a que si no hubiera errores. Esta es, de hecho, la razón por la cual las salidas lógicas consisten de ambos extremos de la cadena. Es una propiedad que va a ser usada por el decodificador."

#: ../../tutorials/noise/6_repetition_code.ipynb:1475
msgid "To see the effects of noise, we need to specify a noise model. For example, let’s set up a simple noise model with gate and measurement errors."
msgstr "Para ver los efectos del ruido, necesitamos especificar un modelo de ruido. Por ejemplo, configuremos un modelo simple de ruido con errores de compuertas y de medición."

#: ../../tutorials/noise/6_repetition_code.ipynb:1520
msgid "This can then be run to generate noisy results. Let’s make a quick function to do this, and then run it."
msgstr "Esto entonces puede ser ejecutado para generar resultados con ruido. Escribamos rápidamente una función que haga esto, y ejecutémosla."

#: ../../tutorials/noise/6_repetition_code.ipynb:1884
msgid "Here the non-noisy results are the most likely. The rest of the samples are distributed among other possibilities with non-trivial syndromes."
msgstr "Aquí los resultados sin ruido son los más probables. El resto de las muestras son distribuidas entre otras posibilidades con síndromes no triviales."

#: ../../tutorials/noise/6_repetition_code.ipynb:1896
msgid "Decoding a repetition code"
msgstr "Decodificando un código de repetición"

#: ../../tutorials/noise/6_repetition_code.ipynb:1898
msgid "Noisy results can change the logical value at readout, and so affect our ability to read out the logical qubit. This can be mitigated by looking at the syndrome values. These can tell us whether or not the logical values are most likely to have changed, and so allow us to correct for the errors. The process of analyzing the syndrome to correct for the errors is called ‘decoding’. We do this by building a decoding object for our code."
msgstr "Los resultados con ruido pueden cambiar el valor lógico en la medición, y así afectar nuestra habilidad de leer el qubit lógico. Esto puede ser mitigado al analizar los valores de síndrome. Estos nos pueden decir si los valores lógicos han cambiado o no, y entonces nos permiten corregir los errores. El proceso de analizar el síndrome para corregir los errores es llamado ‘decodificación’. Hacemos esto mediante la construcción de un objeto de decodificación para nuestro código."

#: ../../tutorials/noise/6_repetition_code.ipynb:1919
msgid "This analyzes the code by seeing how different kinds of error change the output. With this information, along with a decoding algorithm, we can determine what the logical value is most likely to have been."
msgstr "Esto analiza el código al ver cómo diferentes tipos de error cambian el resultado. Con esta información, junto con un algoritmo de decodificación, podemos determinar cuál valor lógico que más probablemente haya sido."

#: ../../tutorials/noise/6_repetition_code.ipynb:1921
msgid "For example, let’s use the ‘matching’ algorithm to decode, which is based on minimum weight perfect matching. This takes specific output strings as input. We’ll give it the simple example string ``'1 0  001 100 100'``, for a logical ``1`` that has suffered two errors."
msgstr "Por ejemplo, usemos el algoritmo de ‘matching’ para decodificar, el cual esta basado en el apareamiento perfecto de mínimo peso. Este toma los strings de salida cómo entrada. Le daremos la cadena de ejemplo ``'1 0  001 100 100'``, para un valor lógico de ``1`` que tiene dos errores."

#: ../../tutorials/noise/6_repetition_code.ipynb:1966
msgid "The output is what the logical part should have been. As you can see, the decoder correctly determined that the readout should have been of a logical ``1``."
msgstr "La salida es lo qué la parte lógica debió de haber sido. Como puedes ver, el decodificador determinó correctamente que la medición debió de haber sido un ``1``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1977
msgid "When we take many samples, we can determine the probability with which the decoder is incorrect. This should decrease exponentially as the code size is increased, since the configurations of noise that fool the decoder become less likely. The probability of a logical error is calculated using the ``logical_prob()`` method. This runs matching by default, but other algorithms can be specified by the ``algorithm`` kwarg."
msgstr "Cuando tomamos varios ejemplos, podemos determinar la probabilidad de que el decodificador esté incorrecto. Esta debería de disminuir exponencialmente mientras que el tamaño del código aumente, ya que las configuraciones de ruido que engañan al decodificador se vuelven menos probables. La probabilidad de un error lógico es calculada usando el método ``logical_prob()``. Esto ejecuta el apareamiento por defecto, pero otros algoritmos pueden ser especificados en el kwarg ``algorithm``."

