msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 17:09+0000\n"
"PO-Revision-Date: 2021-06-28 18:45\n"
"Last-Translator: \n"
"Language-Team: Spanish (United)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/07_grover_examples.po\n"
"X-Crowdin-File-ID: 9506\n"
"Language: es_UN\n"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:10
msgid "This page was generated from `tutorials/algorithms/07_grover_examples.ipynb`__."
msgstr "Esta página fue generada a partir de `tutorials/algorithms/07_grover_examples.ipynb`__."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:9
msgid "Grover’s algorithm examples"
msgstr "Ejemplos de algoritmos de Grover"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:11
msgid "This notebook has examples demonstrating how to use the Qiskit `Grover <https://qiskit.org/documentation/stubs/qiskit.algorithms.Grover.html>`__ search algorithm, with different oracles."
msgstr "Este cuaderno tiene ejemplos que demuestran cómo usar el algoritmo de búsqueda de `Grover <https://qiskit.org/documentation/stubs/qiskit.algorithms.Grover.html>`__ de Qiskit, con diferentes oráculos."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:39
msgid "Finding solutions to 3-SAT problems"
msgstr "Encontrar soluciones a los problemas 3-SAT"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:41
msgid "Let’s look at an example 3-Satisfiability (3-SAT) problem and walk-through how we can use Quantum Search to find its satisfying solutions. 3-SAT problems are usually expressed in `Conjunctive Normal Forms (CNF) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ and written in the `DIMACS-CNF <http://www.satcompetition.org/2009/format-benchmarks2009.html>`__ format. For example:"
msgstr "Veamos un ejemplo de problema de 3-Satisfabilidad (3-SAT) y veamos cómo podemos usar la búsqueda cuántica para encontrar sus soluciones satisfactorias. Los problemas de 3-SAT generalmente se expresan en `Formas normales conjuntivas (Conjunctive Normal Forms, CNF) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ y se escriben en el formato `DIMACS-CNF <http://www.satcompetition.org/2009/format-benchmarks2009.html>`__. Por ejemplo:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:70
msgid "The CNF of this 3-SAT instance contains 3 variables and 5 clauses:"
msgstr "El CNF de esta instancia 3-SAT contiene 3 variables y 5 cláusulas:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:72
msgid ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"
msgstr ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:74
msgid "It can be verified that this 3-SAT problem instance has three satisfying solutions:"
msgstr "Se puede verificar que esta instancia de problema 3-SAT tiene tres soluciones satisfactorias:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:76
msgid ":math:`(v_1, v_2, v_3) = (T, F, T)` or :math:`(F, F, F)` or :math:`(T, T, F)`"
msgstr ":math:`(v_1, v_2, v_3) = (T, F, T)` o :math:`(F, F, F)` o :math:`(T, T, F)`"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:78
msgid "Or, expressed using the DIMACS notation:"
msgstr "O expresado usando la notación DIMACS:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:80
msgid "``1 -2 3``, or ``-1 -2 -3``, or ``1 2 -3``."
msgstr "``1 -2 3``, o ``-1 -2 -3``, o ``1 2 -3``."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:82
msgid "With this example problem input, we then create the corresponding ``oracle`` for our ``Grover`` search. In particular, we use the ``PhaseOracle`` component, which supports parsing DIMACS-CNF format strings and constructing the corresponding oracle circuit."
msgstr "Con esta entrada de problema de ejemplo, creamos el ``oracle`` correspondiente para nuestra búsqueda de ``Grover``. En particular, utilizamos el componente ``PhaseOracle``, que admite el análisis de cadenas de formato DIMACS-CNF y la construcción del correspondiente circuito de oráculo."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:117
msgid "The ``oracle`` can now be used to create an Grover instance:"
msgstr "El ``oracle`` ahora se puede usar para crear una instancia de Grover:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:140
msgid "We can then configure the backend and run the Grover instance to get the result:"
msgstr "Luego podemos configurar el backend y ejecutar la instancia de Grover para obtener el resultado:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:186
msgid "As seen above, a satisfying solution to the specified 3-SAT problem is obtained. And it is indeed one of the three satisfying solutions."
msgstr "Como se vio anteriormente, se obtiene una solución satisfactoria al problema 3-SAT especificado. Y de hecho es una de las tres soluciones satisfactorias."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:188
msgid "Since we used the ``'aer_simulator'``, the complete measurement result is also returned, as shown in the plot below, where it can be seen that the binary strings ``000``, ``011``, and ``101`` (note the bit order in each string), corresponding to the three satisfying solutions all have high probabilities associated with them."
msgstr "Dado que utilizamos el ``'aer_simulator'``, también es devuelto el resultado de la medición completa, como se muestra en la gráfica a continuación, donde se puede ver que las cadenas binarias ``000``, ``011``, y ``101`` (observa el orden de los bits en cada cadena), correspondientes a las tres soluciones satisfactorias, tienen todas altas probabilidades asociadas."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:219
msgid "Boolean Logical Expressions"
msgstr "Expresiones Lógicas Booleanas"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:221
msgid "Qiskit’s ``Grover`` can also be used to perform Quantum Search on an ``Oracle`` constructed from other means, in addition to DIMACS. For example, the ``PhaseOracle`` can actually be configured using arbitrary Boolean logical expressions, as demonstrated below."
msgstr "El ``Grover`` de Qiskit también se puede utilizar para realizar búsquedas cuánticas en un ``Oracle`` construido a partir de otros medios, además de DIMACS. Por ejemplo, el ``PhaseOracle`` se puede configurar utilizando expresiones lógicas booleanas arbitrarias, como se muestra a continuación."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:258
msgid "In the example above, the input Boolean logical expression ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` should be quite self-explanatory, where ``^``, ``~``, and ``&`` represent the Boolean logical XOR, NOT, and AND operators, respectively. It should be quite easy to figure out the satisfying solution by examining its parts: ``w ^ x`` calls for ``w`` and ``x`` taking different values; ``~(y ^ z)`` requires ``y`` and ``z`` be the same; ``x & y & z`` dictates all three to be ``True``. Putting these together, we get the satisfying solution ``(w, x, y, z) = (False, True, True, True)``, which our ``Grover``\\ ’s result agrees with."
msgstr "En el ejemplo anterior, la expresión lógica booleana de entrada ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` debería ser bastante autoexplicativa, donde ``^``, ``~``, y ``&`` representan los operadores lógicos booleanos XOR, NOT y AND, respectivamente. Debería ser bastante fácil descubrir la solución satisfactoria examinando sus partes: ``w ^ x`` requiere que `` w '' y `` x '' tomen valores diferentes; ``~(y ^ z)`` requiere que ``y`` y ``z`` sean iguales; ``x & y & z`` dicta que los tres son ``True``. Al juntarlos, obtenemos la solución satisfactoria ```(w, x, y, z) = (False, True, True, True)``, con lo que el resultado de nuestro ``Grover`` concuerda."

