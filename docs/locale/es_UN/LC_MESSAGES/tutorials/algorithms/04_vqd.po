msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:25+0000\n"
"PO-Revision-Date: 2023-03-20 09:44\n"
"Last-Translator: \n"
"Language: es_UN\n"
"Language-Team: Spanish (United)\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/04_vqd.po\n"
"X-Crowdin-File-ID: 9933\n"

#: ../../tutorials/algorithms/04_vqd.ipynb:10
msgid "This page was generated from `tutorials/algorithms/04_vqd.ipynb`__."
msgstr "Esta página fue generada a partir de `tutorials/algorithms/04_vqd.ipynb`__."

#: ../../tutorials/algorithms/04_vqd.ipynb:9
msgid "Variational Quantum Deflation (VQD) Algorithm"
msgstr "Algoritmo de Deflación Cuántica Variacional (VQD, Variational Quantum Deflation)"

#: ../../tutorials/algorithms/04_vqd.ipynb:11
msgid "This notebook demostrates how to use Qiskit's implementation of the `Variational Quantum Deflation (VQD) <https://qiskit.org/documentation/stubs/qiskit.algorithms.eigensolvers.VQD.html>`__ algorithm for computing higher energy states of a Hamiltonian, as introduced in this `reference paper <https://arxiv.org/abs/1805.08138>`__."
msgstr "Este cuaderno demuestra cómo usar la implementación de Qiskit del algoritmo `Deflación Cuántica Variacional (VQD, Variational Quantum Deflation) <https://qiskit.org/documentation/stubs/qiskit.algorithms.eigensolvers.VQD.html>`__ para calcular estados de energía más altos de un Hamiltoniano, tal como se presenta en este `artículo de referencia <https://arxiv.org/abs/1805.08138>`__."

#: ../../tutorials/algorithms/04_vqd.ipynb:23
msgid "Introduction"
msgstr "Introducción"

#: ../../tutorials/algorithms/04_vqd.ipynb:25
msgid "VQD is a quantum algorithm that uses a variational technique to find the *k* eigenvalues of the Hamiltonian *H* of a given system."
msgstr "VQD es un algoritmo cuántico que utiliza una técnica variacional para encontrar los valores propios *k* del Hamiltoniano *H* de un sistema dado."

#: ../../tutorials/algorithms/04_vqd.ipynb:27
msgid "The algorithm computes excited state energies of generalized hamiltonians by optimizing over a modified cost function. Each successive eigenvalue is calculated iteratively by introducing an overlap term with all the previously computed eigenstates that must be minimized. This ensures that higher energy eigenstates are found."
msgstr "El algoritmo calcula las energías del estado excitado de los Hamiltonianos generalizados optimizando una función de costo modificada. Cada valor propio sucesivo se calcula iterativamente introduciendo un término superpuesto con todos los estados propios calculados previamente que deben minimizarse. Esto asegura que se encuentren estados propios de mayor energía."

#: ../../tutorials/algorithms/04_vqd.ipynb:39
msgid "Complete working example for VQD"
msgstr "Ejemplo práctico completo para VQD"

#: ../../tutorials/algorithms/04_vqd.ipynb:50
msgid "The first step of the VQD workflow is to create a qubit operator, ansatz and optimizer. For this example, you can use the H2 molecule, which should already look familiar if you have completed the previous VQE tutorials:"
msgstr "El primer paso del flujo de trabajo de VQD es crear un operador de qubit, un ansatz y un optimizador. Para este ejemplo, puedes usar la molécula H2, que ya te resultará familiar si completaste los tutoriales anteriores de VQE:"

#: ../../tutorials/algorithms/04_vqd.ipynb:81
msgid "You can set up, for example, a ``TwoLocal`` ansatz with three qubits, and choose ``SLSQP`` as the optimization method."
msgstr "Puedes configurar, por ejemplo, un ansatz ``TwoLocal`` con tres qubits y elegir ``SLSQP`` como método de optimización."

#: ../../tutorials/algorithms/04_vqd.ipynb:117
msgid "The next step of the workflow is to define the required primitives for running ``VQD``. This algorithm requires two different primitive instances: one ``Estimator`` for computing the expectation values for the \"VQE part\" of the algorithm, and one ``Sampler``. The sampler will be passed along to the ``StateFidelity`` subroutine that will be used to compute the cost for higher energy states. There are several methods that you can use to compute state fidelities, but to keep things simple, you can use the ``ComputeUncompute`` method already available in ``qiskit.algorithm.state_fidelities``."
msgstr "El siguiente paso del flujo de trabajo es definir las primitivas requeridas para ejecutar ``VQD``. Este algoritmo requiere dos instancias primitivas diferentes: un ``Estimator`` para calcular los valores esperados para la \"parte VQE\" del algoritmo y un ``Sampler``. El sampler se pasará a la subrutina ``StateFidelity`` que se usará para calcular el costo de los estados de mayor energía. Hay varios métodos que puedes usar para calcular las fidelidades de estado, pero para simplificar las cosas, puedes usar el método ``ComputeUncompute`` ya disponible en ``qiskit.algorithm.state_fidelities``."

#: ../../tutorials/algorithms/04_vqd.ipynb:144
msgid "In order to set up the VQD algorithm, it is important to define two additional inputs: the number of energy states to compute (``k``) and the ``betas`` defined in the original VQD paper. In this example, the number of states (``k``) will be set to three, which indicates that two excited states will be computed in addition to the ground state."
msgstr "Para configurar el algoritmo VQD, es importante definir dos entradas adicionales: el número de estados de energía a calcular (``k``) y las ``betas`` definidas en el artículo original de VQD. En este ejemplo, el número de estados (``k``) se establecerá en tres, lo que indica que se calcularán dos estados excitados además del estado fundamental."

#: ../../tutorials/algorithms/04_vqd.ipynb:146
msgid "The ``betas`` balance the contribution of each overlap term to the cost function, and they are an optional argument in the ``VQD`` construction. If not set by the user, they can be autoevaluated for input operators of type ``SparsePauliOp``. Please note that if you want to set your own ``betas``, you should provide a list of values of length ``k``."
msgstr "Las ``betas`` equilibran la contribución de cada término superpuesto a la función de costo, y son un argumento opcional en la construcción de ``VQD``. Si el usuario no los configura, pueden autoevaluarse para operadores de entrada de tipo ``SparsePauliOp``. Ten en cuenta que si deseas configurar tus propias ``betas``, debes proporcionar una lista de valores de longitud ``k``."

#: ../../tutorials/algorithms/04_vqd.ipynb:168
msgid "You are almost ready to run the VQD algorithm, but let's define a callback first to store intermediate values:"
msgstr "Estás casi listo para ejecutar el algoritmo VQD, pero primero definamos una devolución de llamada para almacenar valores intermedios:"

#: ../../tutorials/algorithms/04_vqd.ipynb:196
msgid "You can finally instantiate ``VQD`` and compute the eigenvalues for the chosen operator."
msgstr "Finalmente puedes instanciar ``VQD`` y calcular los valores propios para el operador elegido."

#: ../../tutorials/algorithms/04_vqd.ipynb:221
msgid "You can see the three state energies as part of the ``VQD`` result:"
msgstr "Puedes ver las tres energías del estado como parte del resultado de ``VQD``:"

#: ../../tutorials/algorithms/04_vqd.ipynb:266
msgid "And we can use the values stored by the callback to plot the energy convergence for each state:"
msgstr "Y podemos usar los valores almacenados por la devolución de llamada para graficar la convergencia de energía para cada estado:"

#: ../../tutorials/algorithms/04_vqd.ipynb:312
msgid "This molecule can be solved exactly using the ``NumPyEigensolver`` class, which will give a reference value that you can compare with the ``VQD`` result:"
msgstr "Esta molécula puede ser resuelta exactamente usando la clase ``NumPyEigensolver``, que dará un valor de referencia que puedes comparar con el resultado de ``VQD``:"

#: ../../tutorials/algorithms/04_vqd.ipynb:338
msgid "Let's see a comparison of the exact result with the previously computed ``VQD`` eigenvalues:"
msgstr "Veamos una comparación del resultado exacto con los valores propios de ``VQD`` previamente calculados:"

#: ../../tutorials/algorithms/04_vqd.ipynb:387
msgid "As you can see, the result from VQD matches the values from the exact solution, and extends VQE to also compute excited states."
msgstr "Como puedes ver, el resultado de VQD coincide con los valores de la solución exacta y extiende VQE para calcular también los estados excitados."

