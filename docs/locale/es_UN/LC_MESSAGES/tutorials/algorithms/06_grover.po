msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-10 14:06+0000\n"
"PO-Revision-Date: 2021-06-22 03:07\n"
"Last-Translator: \n"
"Language-Team: Spanish (United)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/06_grover.po\n"
"X-Crowdin-File-ID: 9504\n"
"Language: es_UN\n"

#: ../../tutorials/algorithms/06_grover.ipynb:10
msgid "This page was generated from `tutorials/algorithms/06_grover.ipynb`__."
msgstr "Esta página fue generada a partir de `tutorials/algorithms/06_grover.ipynb`__."

#: ../../tutorials/algorithms/06_grover.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/06_grover.ipynb>`_."
msgstr "Puedes correr esta sección de manera interactiva en el `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/06_grover.ipynb>`_."

#: ../../tutorials/algorithms/06_grover.ipynb:9
msgid "Grover’s Algorithm and Amplitude Amplification"
msgstr "Algoritmo de Grover y Amplificación de Amplitud"

#: ../../tutorials/algorithms/06_grover.ipynb:11
msgid "Grover’s algorithm is one of the most famous quantum algorithms introduced by Lov Grover in 1996 [1]. It has initially been proposed for unstructured search problems, i.e. for finding a marked element in a unstructured database. However, Grover’s algorithm is now a subroutine to several other algorithms, such as Grover Adaptive Search [2]. For the details of Grover’s algorithm, please see `Grover’s Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ in the Qiskit textbook."
msgstr "El algoritmo de Grover es uno de los algoritmos cuánticos más famosos introducido por Lov Grover en 1996 [1]. Inicialmente se propuso para problemas de búsqueda no estructurados, es decir, para encontrar un elemento marcado en una base de datos no estructurada. Sin embargo, el algoritmo de Grover es ahora una subrutina de varios otros algoritmos, como Grover Adaptive Search [2]. Para obtener más información sobre el algoritmo de Grover, consulte `Grover’s Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ en el libro de texto de Qiskit."

#: ../../tutorials/algorithms/06_grover.ipynb:13
msgid "Qiskit implements Grover’s algorithm in the ``Grover`` class. This class also includes the generalized version, Amplitude Amplification [3], and allows setting individual iterations and other meta-settings to Grover’s algorithm."
msgstr "Qiskit implementa el algoritmo de Grover en la clase ``Grover``. Esta clase también incluye la versión generalizada, Amplificación de Amplitud [3], y permite configurar iteraciones individuales y otros meta-ajustes para el algoritmo de Grover."

#: ../../tutorials/algorithms/06_grover.ipynb:15
#: ../../tutorials/algorithms/06_grover.ipynb:719
msgid "**References:**"
msgstr "**Referencias:**"

#: ../../tutorials/algorithms/06_grover.ipynb:17
msgid "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"
msgstr "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"

#: ../../tutorials/algorithms/06_grover.ipynb:19
msgid "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"
msgstr "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"

#: ../../tutorials/algorithms/06_grover.ipynb:21
msgid "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"
msgstr "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"

#: ../../tutorials/algorithms/06_grover.ipynb:33
msgid "Grover’s algorithm"
msgstr "Algoritmo de Grover"

#: ../../tutorials/algorithms/06_grover.ipynb:35
msgid "Grover’s algorithm uses the Grover operator :math:`\\mathcal{Q}` to amplify the amplitudes of the good states:"
msgstr "El algoritmo de Grover utiliza el operador de Grover :math:`\\mathcal{Q}` para amplificar las amplitudes de los estados correctos:"

#: ../../tutorials/algorithms/06_grover.ipynb:37
msgid "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"
msgstr "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"

#: ../../tutorials/algorithms/06_grover.ipynb:42
msgid "Here, \\* :math:`\\mathcal{A}` is the initial search state for the algorithm, which is just Hadamards, :math:`H^{\\otimes n}` for the textbook Grover search, but can be more elaborate for Amplitude Amplification \\* :math:`\\mathcal{S_0}` is the reflection about the all 0 state"
msgstr "Aquí, \\* :math:`\\mathcal{A}` es el estado de búsqueda inicial para el algoritmo, que es solo Hadamards, :math:`H^{\\otimes n}` para la búsqueda de Grover del libro de texto, pero puede ser más elaborado para la Amplificación de Amplitud \\* :math:`\\mathcal{S_0}` es la reflexión sobre todo el estado 0"

#: ../../tutorials/algorithms/06_grover.ipynb:44
msgid "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"
msgstr "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"

#: ../../tutorials/algorithms/06_grover.ipynb:49
msgid "\\* :math:`\\mathcal{S_f}` is the oracle that applies"
msgstr "\\* :math:`\\mathcal{S_f}` es el oráculo que se aplica"

#: ../../tutorials/algorithms/06_grover.ipynb:51
msgid "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"
msgstr "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"

#: ../../tutorials/algorithms/06_grover.ipynb:56
msgid "where :math:`f(x)` is 1 if :math:`x` is a good state and otherwise 0."
msgstr "donde :math:`f(x)` es 1 si :math:`x` es un estado correcto y de lo contrario 0."

#: ../../tutorials/algorithms/06_grover.ipynb:58
msgid "In a nutshell, Grover’s algorithm applies different powers of :math:`\\mathcal{Q}` and after each execution checks whether a good solution has been found."
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:61
msgid "Running Grover’s algorithm"
msgstr "Ejecutar el algoritmo de Grover"

#: ../../tutorials/algorithms/06_grover.ipynb:63
msgid "To run Grover’s algorithm with the ``Grover`` class, firstly, we need to specify an oracle for the circuit of Grover’s algorithm. In the following example, we use ``QuantumCircuit`` as the oracle of Grover’s algorithm. However, there are several other class that we can use as the oracle of Grover’s algorithm. We talk about them later in this tutorial."
msgstr "Para ejecutar el algoritmo de Grover con la clase ``Grover``, en primer lugar, necesitamos especificar un oráculo para el circuito del algoritmo de Grover. En el siguiente ejemplo, usamos ``QuantumCircuit`` como el oráculo del algoritmo de Grover. Sin embargo, hay varias otras clases que podemos usar como oráculo del algoritmo de Grover. Hablamos de ellos más adelante en este tutorial."

#: ../../tutorials/algorithms/06_grover.ipynb:65
msgid "Note that the oracle for ``Grover`` must be a *phase-flip* oracle. That is, it multiplies the amplitudes of the of “good states” by a factor of :math:`-1`. We explain later how to convert a *bit-flip* oracle to a phase-flip oracle."
msgstr "Tenga en cuenta que el oráculo para ``Grover`` debe ser un oráculo *de cambio de fase*. Es decir, multiplica las amplitudes de los \"estados correctos\" por un factor de :math:`-1`. Más adelante explicamos cómo convertir un oráculo *bit-flip* en un oráculo de cambio de fase."

#: ../../tutorials/algorithms/06_grover.ipynb:109
msgid "Then, we specify a backend and call the ``run`` method of ``Grover`` with a backend to execute the circuits. The returned result type is a ``GroverResult``."
msgstr "Luego, especificamos un backend y llamamos al método ``run`` de ``Grover`` con un backend para ejecutar los circuitos. El tipo de resultado devuelto es un ``GroverResult``."

#: ../../tutorials/algorithms/06_grover.ipynb:111
msgid "If the search was successful, the ``oracle_evaluation`` attribute of the result will be ``True``. In this case, the most sampled measurement, ``top_measurement``, is one of the “good states”. Otherwise, ``oracle_evaluation`` will be False."
msgstr "Si la búsqueda fue exitosa, el atributo ``oracle_evaluation`` del resultado será ``True``. En este caso, la medida más muestreada, ``top_measurement``, es uno de los \"estados correctos\". De lo contrario, ``oracle_evaluation`` será False."

#: ../../tutorials/algorithms/06_grover.ipynb:167
msgid "In the example, the result of ``top_measurement`` is ``11`` which is one of “good state”. Thus, we succeeded to find the answer by using ``Grover``."
msgstr "En el ejemplo, el resultado de ``top_measurement`` es ``11`` que es un \"estado correcto\". Por lo tanto, logramos encontrar la respuesta usando ``Grover``."

#: ../../tutorials/algorithms/06_grover.ipynb:179
msgid "Using the different types of classes as the oracle of ``Grover``"
msgstr "Usando los diferentes tipos de clases como el oráculo de ``Grover``"

#: ../../tutorials/algorithms/06_grover.ipynb:181
msgid "In the above example, we used ``QuantumCircuit`` as the oracle of ``Grover``. However, we can also use ``qiskit.quantum_info.Statevector`` as oracle. All the following examples are when :math:`|11\\rangle` is “good state”"
msgstr "En el ejemplo anterior, usamos ``QuantumCircuit`` como el oráculo de ``Grover``. Sin embargo, también podemos usar ``qiskit.quantum_info.Statevector`` como oráculo. Todos los siguientes ejemplos son cuando :math:`|11\\rangle` es el \"estado correcto\""

#: ../../tutorials/algorithms/06_grover.ipynb:236
msgid "Internally, the statevector is mapped to a quantum circuit:"
msgstr "Internamente, el vector de estado se asigna a un circuito cuántico:"

#: ../../tutorials/algorithms/06_grover.ipynb:266
msgid "Qiskit allows for an easy construction of more complex oracles: \\* ``PhaseOracle``: for parsing logical expressions such as ``'~a | b'``. This is especially useful for solving 3-SAT problems and is shown in the accompanying `Grover Examples <07_grover_examples.ipynb>`__ tutorial."
msgstr "Qiskit permite una fácil construcción de oráculos más complejos: \\* ``PhaseOracle``: para analizar expresiones lógicas como ``'~a | b'``. Esto es especialmente útil para resolver problemas de 3-SAT y se muestra en el tutorial `Ejemplos de Grover <07_grover_examples.ipynb>`__ adjunto."

#: ../../tutorials/algorithms/06_grover.ipynb:268
msgid "Here we’ll use the ``PhaseOracle`` for the simple example of finding the state :math:`|11\\rangle`, which corresponds to ``'a & b'``."
msgstr "Aquí usaremos el ``PhaseOracle`` para el ejemplo simple de encontrar el estado :math:`|11\\rangle`, que corresponde a ``'a & b'``."

#: ../../tutorials/algorithms/06_grover.ipynb:307
msgid "You can observe, that this oracle is actually implemented with three qubits instead of two!"
msgstr "Puedes observar que, ¡este oráculo se implementa con tres qubits en lugar de dos!"

#: ../../tutorials/algorithms/06_grover.ipynb:309
msgid "That is because the ``PhaseOracle`` is not a phase-flip oracle (which flips the phase of the good state) but a bit-flip oracle. This means it flips the state of an auxiliary qubit if the other qubits satisfy the condition. For Grover’s algorithm, however, we require a phase-flip oracle. To convert the bit-flip oracle to a phase-flip oracle we sandwich the controlled-NOT by :math:`X` and :math:`H` gates, as you can see in the circuit above."
msgstr "Esto se debe a que el ``PhaseOracle`` no es un oráculo de cambio de fase (que cambia la fase del estado correcto) sino un oráculo de cambio de bit. Esto significa que cambia el estado de un qubit auxiliar si los otros qubits satisfacen la condición. Para el algoritmo de Grover, sin embargo, necesitamos un oráculo de cambio de fase. Para convertir el oráculo de cambio de bits en un oráculo de cambio de fase, intercalamos las compuertas NOT controladas por compuertas :math:`X` y :math:`H`, como puedes ver en el circuito de arriba."

#: ../../tutorials/algorithms/06_grover.ipynb:311
msgid "**Note:** This transformation from a bit-flip to a phase-flip oracle holds generally and you can use this to convert your oracle to the right representation."
msgstr "**Nota:** Esta transformación de un oráculo de cambio de bits a un cambio de fase se mantiene en general y puedes usar esto para convertir tu oráculo en la representación correcta."

#: ../../tutorials/algorithms/06_grover.ipynb:323
msgid "Amplitude amplification"
msgstr "Amplificación de amplitud"

#: ../../tutorials/algorithms/06_grover.ipynb:325
msgid "Grover’s algorithm uses Hadamard gates to create the uniform superposition of all the states at the beginning of the Grover operator :math:`\\mathcal{Q}`. If some information on the good states is available, it might be useful to not start in a uniform superposition but only initialize specific states. This, generalized, version of Grover’s algorithm is referred to *Amplitude Amplification*."
msgstr "El algoritmo de Grover usa compuertas Hadamard para crear la superposición uniforme de todos los estados al comienzo del operador de Grover :math:`\\mathcal{Q}`. Si se dispone de alguna información sobre los estados correctos, puede resultar útil no comenzar en una superposición uniforme, sino solo inicializar estados específicos. Esta versión generalizada del algoritmo de Grover se conoce como *Amplificación de Amplitud*."

#: ../../tutorials/algorithms/06_grover.ipynb:327
msgid "In Qiskit, the initial superposition state can easily be adjusted by setting the ``state_preparation`` argument."
msgstr "En Qiskit, el estado de superposición inicial se puede ajustar fácilmente configurando el argumento ``state_preparation``."

#: ../../tutorials/algorithms/06_grover.ipynb:330
msgid "State preparation"
msgstr "Preparación del estado"

#: ../../tutorials/algorithms/06_grover.ipynb:332
msgid "A ``state_preparation`` argument is used to specify a quantum circuit that prepares a quantum state for the start point of the amplitude amplification. By default, a circuit with $H^{:nbsphinx-math:`\\otimes `n} $ is used to prepare uniform superposition (so it will be Grover’s search). The diffusion circuit of the amplitude amplification reflects ``state_preparation`` automatically."
msgstr "Se utiliza un argumento de ``state_preparation`` para especificar un circuito cuántico que prepara un estado cuántico para el punto de inicio de la amplificación de amplitud. Por defecto, un circuito con $H^{:nbsphinx-math:`\\otimes `n} $ se usa para preparar una superposición uniforme (por lo que será la búsqueda de Grover). El circuito de difusión de la amplificación de amplitud refleja el ``state_preparation`` automáticamente."

#: ../../tutorials/algorithms/06_grover.ipynb:438
msgid "Full flexibility"
msgstr "Flexibilidad total"

#: ../../tutorials/algorithms/06_grover.ipynb:440
msgid "For more advanced use, it is also possible to specify the entire Grover operator by setting the ``grover_operator`` argument. This might be useful if you know more efficient implementation for :math:`\\mathcal{Q}` than the default construction via zero reflection, oracle and state preparation."
msgstr "Para un uso más avanzado, también es posible especificar todo el operador Grover configurando el argumento ``grover_operator``. Esto podría ser útil si conoces una implementación más eficiente para :math:`\\mathcal{Q}` que la construcción predeterminada a través de la reflexión cero, el oráculo y la preparación del estado."

#: ../../tutorials/algorithms/06_grover.ipynb:442
msgid "The ``qiskit.circuit.library.GroverOperator`` can be a good starting point and offers more options for an automated construction of the Grover operator. You can for instance \\* set the ``mcx_mode`` \\* ignore qubits in the zero reflection by setting ``reflection_qubits`` \\* explicitly exchange the :math:`\\mathcal{S_f}, \\mathcal{S_0}` and :math:`\\mathcal{A}` operations using the ``oracle``, ``zero_reflection`` and ``state_preparation`` arguments"
msgstr "El ``qiskit.circuit.library.GroverOperator`` puede ser un buen punto de partida y ofrece más opciones para una construcción automatizada del operador Grover. Por ejemplo, puedes \\* establecer el ``mcx_mode`` \\* ignorar qubits en la reflexión cero configurando ``reflection_qubits`` \\* intercambiar explícitamente los operadores :math:`\\mathcal{S_f}, \\mathcal{S_0}` y :math:`\\mathcal{A}` usando los argumentos ``oracle``, ``zero_reflection`` y ``state_preparation``"

#: ../../tutorials/algorithms/06_grover.ipynb:453
msgid "For instance, imagine the good state is a three qubit state :math:`|111\\rangle` but we used 2 additional qubits as auxiliary qubits."
msgstr "Por ejemplo, imagina que el estado correcto es un estado de tres qubits :math:`|111\\rangle` pero usamos 2 qubits adicionales como qubits auxiliares."

#: ../../tutorials/algorithms/06_grover.ipynb:487
msgid "Then, per default, the Grover operator implements the zero reflection on all five qubits."
msgstr "Luego, por defecto, el operador Grover implementa la reflexión cero en los cinco qubits."

#: ../../tutorials/algorithms/06_grover.ipynb:518
msgid "But we know that we only need to consider the first three:"
msgstr "Pero sabemos que solo debemos considerar los tres primeros:"

#: ../../tutorials/algorithms/06_grover.ipynb:550
msgid "Dive into other arguments of ``Grover``"
msgstr "Sumergirse en otros argumentos de ``Grover``"

#: ../../tutorials/algorithms/06_grover.ipynb:552
msgid "``Grover`` has arguments other than ``oracle`` and ``state_preparation``. We will explain them in this section."
msgstr "``Grover`` tiene otros argumentos además de ``oracle`` y ``state_preparation``. Los explicaremos en este apartado."

#: ../../tutorials/algorithms/06_grover.ipynb:555
msgid "Specifying ``good_state``"
msgstr "Especificar el ``good_state``"

#: ../../tutorials/algorithms/06_grover.ipynb:557
msgid "``good_state`` is used to check whether the measurement result is correct or not internally. It can be a list of binary strings, a list of integer, ``Statevector``, and Callable. If the input is a list of bitstrings, each bitstrings in the list represents a good state. If the input is a list of integer, each integer represent the index of the good state to be :math:`|1\\rangle`. If it is a ``Statevector``, it represents a superposition of all good states."
msgstr "``good_state`` se utiliza para comprobar si el resultado de la medición es correcto o no internamente. Puede ser una lista de cadenas binarias, una lista de enteros, ``Statevector`` y Callable. Si la entrada es una lista de cadenas de bits, cada cadena de bits de la lista representa un estado correcto. Si la entrada es una lista de números enteros, cada número entero representa el índice del estado correcto que será :math:`|1\\rangle`. Si es un ``Statevector``, representa una superposición de todos los estados correctos."

#: ../../tutorials/algorithms/06_grover.ipynb:711
msgid "The number of ``iterations``"
msgstr "El número de ``iterations``"

#: ../../tutorials/algorithms/06_grover.ipynb:713
msgid "The number of repetition of applying the Grover operator is important to obtain the correct result with Grover’s algorithm. The number of iteration can be set by the ``iteration`` argument of ``Grover``. The following inputs are supported: \\* an integer to specify a single power of the Grover operator that’s applied \\* or a list of integers, in which all these different powers of the Grover operator are run consecutively and after each time we check if a correct solution has been found"
msgstr "El número de repeticiones de aplicar el operador de Grover es importante para obtener el resultado correcto con el algoritmo de Grover. El número de iteraciones se puede establecer mediante el argumento ``iteration`` de ``Grover``. Se admiten las siguientes entradas: \\* un número entero para especificar una sola potencia del operador Grover que se aplica \\* o una lista de enteros, en la que todas estas diferentes potencias del operador Grover se ejecutan consecutivamente y después de cada ejecución comprobamos si se ha encontrado una solución correcta"

#: ../../tutorials/algorithms/06_grover.ipynb:715
msgid "Additionally there is the ``sample_from_iterations`` argument. When it is ``True``, instead of the specific power in ``iterations``, a random integer between 0 and the value in ``iteration`` is used as the power Grover’s operator. This approach is useful when we don’t even know the number of solution."
msgstr "Además, existe el argumento ``sample_from_iterations``. Cuando es ``True``, en lugar de la potencia específicada en ``iterations``, se utiliza un número entero aleatorio entre 0 y el valor en ``iteration`` como el operador de potencia de Grover. Este enfoque es útil cuando ni siquiera sabemos la cantidad de soluciones."

#: ../../tutorials/algorithms/06_grover.ipynb:717
msgid "For more details of the algorithm using ``sample_from_iterations``, see [4]."
msgstr "Para obtener más detalles sobre el algoritmo que utiliza ``sample_from_iterations``, consulta [4]."

#: ../../tutorials/algorithms/06_grover.ipynb:721
msgid "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"
msgstr "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"

#: ../../tutorials/algorithms/06_grover.ipynb:774
msgid "When the number of solutions is known, we can also use a static method ``optimal_num_iterations`` to find the optimal number of iterations. Note that the output iterations is an approximate value. When the number of qubits is small, the output iterations may not be optimal."
msgstr "Cuando se conoce el número de soluciones, también podemos usar un método estático ``optimal_num_iterations`` para encontrar el número óptimo de iteraciones. Ten en cuenta que las iteraciones de salida son un valor aproximado. Cuando el número de qubits es pequeño, las iteraciones de salida pueden no ser óptimas."

#: ../../tutorials/algorithms/06_grover.ipynb:817
msgid "Applying ``post_processing``"
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:819
msgid "We can apply an optional post processing to the top measurement for ease of readability. It can be used e.g. to convert from the bit-representation of the measurement ``[1, 0, 1]`` to a DIMACS CNF format ``[1, -2, 3]``."
msgstr ""

