msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:25+0000\n"
"PO-Revision-Date: 2023-03-16 12:03\n"
"Last-Translator: \n"
"Language: es_UN\n"
"Language-Team: Spanish (United)\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/06_grover.po\n"
"X-Crowdin-File-ID: 9504\n"

#: ../../tutorials/algorithms/06_grover.ipynb:10
msgid "This page was generated from `tutorials/algorithms/06_grover.ipynb`__."
msgstr "Esta página fue generada a partir de `tutorials/algorithms/06_grover.ipynb`__."

#: ../../tutorials/algorithms/06_grover.ipynb:9
msgid "Grover's Algorithm and Amplitude Amplification"
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:11
msgid "Grover's algorithm is one of the most famous quantum algorithms introduced by Lov Grover in 1996 [1]. It has initially been proposed for unstructured search problems, i.e. for finding a marked element in a unstructured database. However, Grover's algorithm is now a subroutine to several other algorithms, such as Grover Adaptive Search [2]. For the details of Grover's algorithm, please see `Grover's Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ in the Qiskit textbook."
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:13
msgid "Qiskit implements Grover's algorithm in the ``Grover`` class. This class also includes the generalized version, Amplitude Amplification [3], and allows setting individual iterations and other meta-settings to Grover's algorithm."
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:15
#: ../../tutorials/algorithms/06_grover.ipynb:764
msgid "**References:**"
msgstr "**Referencias:**"

#: ../../tutorials/algorithms/06_grover.ipynb:17
msgid "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:19
msgid "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"
msgstr "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"

#: ../../tutorials/algorithms/06_grover.ipynb:21
msgid "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"
msgstr "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"

#: ../../tutorials/algorithms/06_grover.ipynb:33
msgid "Grover's algorithm"
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:35
msgid "Grover's algorithm uses the Grover operator :math:`\\mathcal{Q}` to amplify the amplitudes of the good states:"
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:37
msgid "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"
msgstr "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"

#: ../../tutorials/algorithms/06_grover.ipynb:42
msgid "Here, \\* :math:`\\mathcal{A}` is the initial search state for the algorithm, which is just Hadamards, :math:`H^{\\otimes n}` for the textbook Grover search, but can be more elaborate for Amplitude Amplification \\* :math:`\\mathcal{S_0}` is the reflection about the all 0 state"
msgstr "Aquí, \\* :math:`\\mathcal{A}` es el estado de búsqueda inicial para el algoritmo, que es solo Hadamards, :math:`H^{\\otimes n}` para la búsqueda de Grover del libro de texto, pero puede ser más elaborado para la Amplificación de Amplitud \\* :math:`\\mathcal{S_0}` es la reflexión sobre todo el estado 0"

#: ../../tutorials/algorithms/06_grover.ipynb:44
msgid "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"
msgstr "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"

#: ../../tutorials/algorithms/06_grover.ipynb:49
msgid "\\* :math:`\\mathcal{S_f}` is the oracle that applies"
msgstr "\\* :math:`\\mathcal{S_f}` es el oráculo que se aplica"

#: ../../tutorials/algorithms/06_grover.ipynb:51
msgid "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"
msgstr "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"

#: ../../tutorials/algorithms/06_grover.ipynb:56
msgid "where :math:`f(x)` is 1 if :math:`x` is a good state and otherwise 0."
msgstr "donde :math:`f(x)` es 1 si :math:`x` es un estado correcto y de lo contrario 0."

#: ../../tutorials/algorithms/06_grover.ipynb:58
msgid "In a nutshell, Grover's algorithm applies different powers of :math:`\\mathcal{Q}` and after each execution checks whether a good solution has been found."
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:61
msgid "Running Grover's algorithm"
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:63
msgid "To run Grover's algorithm with the ``Grover`` class, firstly, we need to specify an oracle for the circuit of Grover's algorithm. In the following example, we use ``QuantumCircuit`` as the oracle of Grover's algorithm. However, there are several other class that we can use as the oracle of Grover's algorithm. We talk about them later in this tutorial."
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:65
msgid "Note that the oracle for ``Grover`` must be a *phase-flip* oracle. That is, it multiplies the amplitudes of the of \"good states\" by a factor of :math:`-1`. We explain later how to convert a *bit-flip* oracle to a phase-flip oracle."
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:111
msgid "Then, we specify a backend and call the ``run`` method of ``Grover`` with a backend to execute the circuits. The returned result type is a ``GroverResult``."
msgstr "Luego, especificamos un backend y llamamos al método ``run`` de ``Grover`` con un backend para ejecutar los circuitos. El tipo de resultado devuelto es un ``GroverResult``."

#: ../../tutorials/algorithms/06_grover.ipynb:113
msgid "If the search was successful, the ``oracle_evaluation`` attribute of the result will be ``True``. In this case, the most sampled measurement, ``top_measurement``, is one of the \"good states\". Otherwise, ``oracle_evaluation`` will be False."
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:176
msgid "In the example, the result of ``top_measurement`` is ``11`` which is one of \"good state\". Thus, we succeeded to find the answer by using ``Grover``."
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:188
msgid "Using the different types of classes as the oracle of ``Grover``"
msgstr "Usando los diferentes tipos de clases como el oráculo de ``Grover``"

#: ../../tutorials/algorithms/06_grover.ipynb:190
msgid "In the above example, we used ``QuantumCircuit`` as the oracle of ``Grover``. However, we can also use ``qiskit.quantum_info.Statevector`` as oracle. All the following examples are when :math:`|11\\rangle` is \"good state\""
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:253
msgid "Internally, the statevector is mapped to a quantum circuit:"
msgstr "Internamente, el vector de estado se asigna a un circuito cuántico:"

#: ../../tutorials/algorithms/06_grover.ipynb:283
msgid "Qiskit allows for an easy construction of more complex oracles: \\* ``PhaseOracle``: for parsing logical expressions such as ``'~a | b'``. This is especially useful for solving 3-SAT problems and is shown in the accompanying `Grover Examples <07_grover_examples.ipynb>`__ tutorial."
msgstr "Qiskit permite una fácil construcción de oráculos más complejos: \\* ``PhaseOracle``: para analizar expresiones lógicas como ``'~a | b'``. Esto es especialmente útil para resolver problemas de 3-SAT y se muestra en el tutorial `Ejemplos de Grover <07_grover_examples.ipynb>`__ adjunto."

#: ../../tutorials/algorithms/06_grover.ipynb:285
msgid "Here we'll use the ``PhaseOracle`` for the simple example of finding the state :math:`|11\\rangle`, which corresponds to ``'a & b'``."
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:324
msgid "Which we observe that this oracle implements a phase flip when the state is :math:`|11\\rangle`"
msgstr "Observamos que este oráculo implementa un cambio de fase cuando el estado es :math:`|11\\rangle`"

#: ../../tutorials/algorithms/06_grover.ipynb:326
msgid "As mentioned above, Grover's algorithm requires a *phase-flip* oracle. A bit-flip oracle flips the state of an auxiliary qubit if the other qubits satisfy the condition. To use these types of oracles with Grover's we need to convert the bit-flip oracle to a phase-flip oracle by sandwiching the auxiliary qubit of the bit-flip oracle by :math:`X` and :math:`H` gates."
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:328
msgid "**Note:** This transformation from a bit-flip to a phase-flip oracle holds generally and you can use this to convert your oracle to the right representation."
msgstr "**Nota:** Esta transformación de un oráculo de cambio de bit a un cambio de fase se mantiene en general y puedes usar esto para convertir tu oráculo en la representación correcta."

#: ../../tutorials/algorithms/06_grover.ipynb:340
msgid "Amplitude amplification"
msgstr "Amplificación de amplitud"

#: ../../tutorials/algorithms/06_grover.ipynb:342
msgid "Grover's algorithm uses Hadamard gates to create the uniform superposition of all the states at the beginning of the Grover operator :math:`\\mathcal{Q}`. If some information on the good states is available, it might be useful to not start in a uniform superposition but only initialize specific states. This, generalized, version of Grover's algorithm is referred to *Amplitude Amplification*."
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:344
msgid "In Qiskit, the initial superposition state can easily be adjusted by setting the ``state_preparation`` argument."
msgstr "En Qiskit, el estado de superposición inicial se puede ajustar fácilmente configurando el argumento ``state_preparation``."

#: ../../tutorials/algorithms/06_grover.ipynb:347
msgid "State preparation"
msgstr "Preparación del estado"

#: ../../tutorials/algorithms/06_grover.ipynb:349
msgid "A ``state_preparation`` argument is used to specify a quantum circuit that prepares a quantum state for the start point of the amplitude amplification. By default, a circuit with :math:`H^{\\otimes n}` is used to prepare uniform superposition (so it will be Grover's search). The diffusion circuit of the amplitude amplification reflects ``state_preparation`` automatically."
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:464
msgid "Full flexibility"
msgstr "Flexibilidad total"

#: ../../tutorials/algorithms/06_grover.ipynb:466
msgid "For more advanced use, it is also possible to specify the entire Grover operator by setting the ``grover_operator`` argument. This might be useful if you know more efficient implementation for :math:`\\mathcal{Q}` than the default construction via zero reflection, oracle and state preparation."
msgstr "Para un uso más avanzado, también es posible especificar todo el operador Grover configurando el argumento ``grover_operator``. Esto podría ser útil si conoces una implementación más eficiente para :math:`\\mathcal{Q}` que la construcción predeterminada a través de la reflexión cero, el oráculo y la preparación del estado."

#: ../../tutorials/algorithms/06_grover.ipynb:468
msgid "The ``qiskit.circuit.library.GroverOperator`` can be a good starting point and offers more options for an automated construction of the Grover operator. You can for instance \\* set the ``mcx_mode`` \\* ignore qubits in the zero reflection by setting ``reflection_qubits`` \\* explicitly exchange the :math:`\\mathcal{S_f}, \\mathcal{S_0}` and :math:`\\mathcal{A}` operations using the ``oracle``, ``zero_reflection`` and ``state_preparation`` arguments"
msgstr "El ``qiskit.circuit.library.GroverOperator`` puede ser un buen punto de partida y ofrece más opciones para una construcción automatizada del operador Grover. Por ejemplo, puedes \\* establecer el ``mcx_mode`` \\* ignorar qubits en la reflexión cero configurando ``reflection_qubits`` \\* intercambiar explícitamente los operadores :math:`\\mathcal{S_f}, \\mathcal{S_0}` y :math:`\\mathcal{A}` usando los argumentos ``oracle``, ``zero_reflection`` y ``state_preparation``"

#: ../../tutorials/algorithms/06_grover.ipynb:479
msgid "For instance, imagine the good state is a three qubit state :math:`|111\\rangle` but we used 2 additional qubits as auxiliary qubits."
msgstr "Por ejemplo, imagina que el estado correcto es un estado de tres qubits :math:`|111\\rangle` pero usamos 2 qubits adicionales como qubits auxiliares."

#: ../../tutorials/algorithms/06_grover.ipynb:511
msgid "Then, per default, the Grover operator implements the zero reflection on all five qubits."
msgstr "Luego, por defecto, el operador Grover implementa la reflexión cero en los cinco qubits."

#: ../../tutorials/algorithms/06_grover.ipynb:543
msgid "But we know that we only need to consider the first three:"
msgstr "Pero sabemos que solo debemos considerar los tres primeros:"

#: ../../tutorials/algorithms/06_grover.ipynb:575
msgid "Dive into other arguments of ``Grover``"
msgstr "Sumergirse en otros argumentos de ``Grover``"

#: ../../tutorials/algorithms/06_grover.ipynb:577
msgid "``Grover`` has arguments other than ``oracle`` and ``state_preparation``. We will explain them in this section."
msgstr "``Grover`` tiene otros argumentos además de ``oracle`` y ``state_preparation``. Los explicaremos en este apartado."

#: ../../tutorials/algorithms/06_grover.ipynb:580
msgid "Specifying ``good_state``"
msgstr "Especificar el ``good_state``"

#: ../../tutorials/algorithms/06_grover.ipynb:582
msgid "``good_state`` is used to check whether the measurement result is correct or not internally. It can be a list of binary strings, a list of integer, ``Statevector``, and Callable. If the input is a list of bitstrings, each bitstrings in the list represents a good state. If the input is a list of integer, each integer represent the index of the good state to be :math:`|1\\rangle`. If it is a ``Statevector``, it represents a superposition of all good states."
msgstr "``good_state`` se utiliza para comprobar si el resultado de la medición es correcto o no internamente. Puede ser una lista de cadenas binarias, una lista de enteros, ``Statevector`` y Callable. Si la entrada es una lista de cadenas de bits, cada cadena de bits de la lista representa un estado correcto. Si la entrada es una lista de números enteros, cada número entero representa el índice del estado correcto que será :math:`|1\\rangle`. Si es un ``Statevector``, representa una superposición de todos los estados correctos."

#: ../../tutorials/algorithms/06_grover.ipynb:756
msgid "The number of ``iterations``"
msgstr "El número de ``iterations``"

#: ../../tutorials/algorithms/06_grover.ipynb:758
msgid "The number of repetition of applying the Grover operator is important to obtain the correct result with Grover's algorithm. The number of iteration can be set by the ``iteration`` argument of ``Grover``. The following inputs are supported: \\* an integer to specify a single power of the Grover operator that's applied \\* or a list of integers, in which all these different powers of the Grover operator are run consecutively and after each time we check if a correct solution has been found"
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:760
msgid "Additionally there is the ``sample_from_iterations`` argument. When it is ``True``, instead of the specific power in ``iterations``, a random integer between 0 and the value in ``iteration`` is used as the power Grover's operator. This approach is useful when we don't even know the number of solution."
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:762
msgid "For more details of the algorithm using ``sample_from_iterations``, see [4]."
msgstr "Para obtener más detalles sobre el algoritmo que utiliza ``sample_from_iterations``, consulta [4]."

#: ../../tutorials/algorithms/06_grover.ipynb:766
msgid "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"
msgstr "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"

#: ../../tutorials/algorithms/06_grover.ipynb:819
msgid "When the number of solutions is known, we can also use a static method ``optimal_num_iterations`` to find the optimal number of iterations. Note that the output iterations is an approximate value. When the number of qubits is small, the output iterations may not be optimal."
msgstr "Cuando se conoce el número de soluciones, también podemos usar un método estático ``optimal_num_iterations`` para encontrar el número óptimo de iteraciones. Ten en cuenta que las iteraciones de salida son un valor aproximado. Cuando el número de qubits es pequeño, las iteraciones de salida pueden no ser óptimas."

#: ../../tutorials/algorithms/06_grover.ipynb:867
msgid "Applying ``post_processing``"
msgstr "Aplicar ``post_processing``"

#: ../../tutorials/algorithms/06_grover.ipynb:869
msgid "We can apply an optional post processing to the top measurement for ease of readability. It can be used e.g. to convert from the bit-representation of the measurement ``[1, 0, 1]`` to a DIMACS CNF format ``[1, -2, 3]``."
msgstr ""

