msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 17:09+0000\n"
"PO-Revision-Date: 2021-06-28 18:45\n"
"Last-Translator: \n"
"Language-Team: Spanish (United)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/05_qaoa.po\n"
"X-Crowdin-File-ID: 9502\n"
"Language: es_UN\n"

#: ../../tutorials/algorithms/05_qaoa.ipynb:10
msgid "This page was generated from `tutorials/algorithms/05_qaoa.ipynb`__."
msgstr "Esta página fue generada a partir de `tutorials/algorithms/05_qaoa.ipynb`__."

#: ../../tutorials/algorithms/05_qaoa.ipynb:9
msgid "Quantum Approximate Optimization Algorithm"
msgstr "Quantum Approximate Optimization Algorithm"

#: ../../tutorials/algorithms/05_qaoa.ipynb:11
msgid "Qiskit has an implementation of the Quantum Approximate Optimization Algorithm `QAOA <https://qiskit.org/documentation/stubs/qiskit.algorithms.QAOA.html>`__ and this notebook demonstrates using it for a graph partition problem."
msgstr "Qiskit tiene una implementación del Algoritmo de Optimización Aproximada Cuántica (Quantum Approximate Optimization Algorithm) `QAOA <https://qiskit.org/documentation/stubs/qiskit.algorithms.QAOA.html>`__ y este cuaderno demuestra su uso para un problema de partición de grafos."

#: ../../tutorials/algorithms/05_qaoa.ipynb:36
msgid "First we create a graph and draw it so it can be seen."
msgstr "Primero creamos una gráfica y la dibujamos para que se pueda ver."

#: ../../tutorials/algorithms/05_qaoa.ipynb:84
msgid "The brute-force method is as follows. Basically, we exhaustively try all the binary assignments. In each binary assignment, the entry of a vertex is either 0 (meaning the vertex is in the first partition) or 1 (meaning the vertex is in the second partition). We print the binary assignment that satisfies the definition of the graph partition and corresponds to the minimal number of crossing edges."
msgstr "El método de fuerza bruta es el siguiente. Básicamente, probamos exhaustivamente todas las asignaciones binarias. En cada asignación binaria, la entrada de un vértice es 0 (lo que significa que el vértice está en la primera partición) o 1 (lo que significa que el vértice está en la segunda partición). Imprimimos la asignación binaria que satisface la definición de la partición de la gráfica y corresponde al número mínimo de bordes cruzados."

#: ../../tutorials/algorithms/05_qaoa.ipynb:151
msgid "The graph partition problem can be converted to an Ising Hamiltonian. Qiskit has different capabilities in the Optimization module to do this. Here, since the goal is to show QAOA, the module is used without further explanation to create the operator. The paper `Ising formulations of many NP problems <https://arxiv.org/abs/1302.5843>`__ may be of interest if you would like to understand the technique further."
msgstr "El problema de la partición del gráfico se puede convertir a un Hamiltoniano de Ising. Qiskit tiene diferentes capacidades en el módulo de Optimization para hacer esto. Aquí, dado que el objetivo es mostrar QAOA, el módulo se usa sin más explicación para crear el operador. El artículo `Ising formulations of many NP Problems <https://arxiv.org/abs/1302.5843>`__ puede ser de interés si desea comprender mejor la técnica."

#: ../../tutorials/algorithms/05_qaoa.ipynb:220
msgid "So lets use the QAOA algorithm to find the solution."
msgstr "Entonces, usemos el algoritmo QAOA para encontrar la solución."

#: ../../tutorials/algorithms/05_qaoa.ipynb:316
msgid "The outcome can be seen to match to the value computed above by brute force. But we can also use the classical ``NumPyMinimumEigensolver`` to do the computation, which may be useful as a reference without doing things by brute force."
msgstr "Se puede ver que el resultado coincide con el valor calculado anteriormente por fuerza bruta. Pero también podemos usar el ``NumPyMinimumEigensolver`` clásico para hacer el cálculo, que puede ser útil como referencia sin hacer las cosas por fuerza bruta."

#: ../../tutorials/algorithms/05_qaoa.ipynb:364
msgid "It is also possible to use VQE as is shown below"
msgstr "También es posible utilizar VQE como se muestra a continuación"

