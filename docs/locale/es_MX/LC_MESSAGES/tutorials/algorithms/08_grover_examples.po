msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-27 21:18+0000\n"
"PO-Revision-Date: 2021-03-26 04:20\n"
"Last-Translator: \n"
"Language-Team: Spanish, Mexico\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-MX\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/08_grover_examples.po\n"
"X-Crowdin-File-ID: 9458\n"
"Language: es_MX\n"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:10
msgid "This page was generated from `tutorials/algorithms/08_grover_examples.ipynb`__."
msgstr "Esta página fue generada a partir de `tutorials/algorithms/08_grover_examples.ipynb`__."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/08_grover_examples.ipynb>`_."
msgstr "Puedes correr esta sección de manera interactiva en el `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/08_grover_examples.ipynb>`_."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:9
msgid "Grover’s algorithm examples"
msgstr "Ejemplos de algoritmos de Grover"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:11
msgid "This notebook has examples demonstrating how to use the Qiskit `Grover <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Grover.html>`__ search algorithm, with different oracles."
msgstr "Este cuaderno tiene ejemplos que demuestran cómo utilizar el algoritmo de búsqueda `Grover <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Grover.html>`__ de Qiskit, con distintos oráculos."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:39
msgid "Finding solutions to 3-SAT problems"
msgstr "Encontrando soluciones a problemas 3-SAT"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:41
msgid "Let’s look at an example 3-Satisfiability (3-SAT) problem and walk-through how we can use Quantum Search to find its satisfying solutions. 3-SAT problems are usually expressed in `Conjunctive Normal Forms (CNF) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ and written in the `DIMACS-CNF <http://www.satcompetition.org/2009/format-benchmarks2009.html>`__ format. For example:"
msgstr "Echemos un vistazo a un ejemplo de problema Satisfacibilidad con 3 variables (3-SAT) y descubramos cómo podemos utilizar la Búsqueda Cuántica para encontrar sus soluciones satisfactorias. Los problemas 3-SAT generalmente se expresan en `Formularios Normales Conjuntivos (Conjunctive Normal Forms, CNF) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ y están escritos en el formato `DIMACS-CNF <http://www.satcompetition.org/2009/format-benchmarks2009.html>`__. Por ejemplo:"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:70
msgid "The CNF of this 3-SAT instance contains 3 variables and 5 clauses:"
msgstr "El CNF de esta instancia 3-SAT contiene 3 variables y 5 cláusulas:"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:72
msgid ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"
msgstr ""

#: ../../tutorials/algorithms/08_grover_examples.ipynb:74
msgid "It can be verified that this 3-SAT problem instance has three satisfying solutions:"
msgstr "Se puede verificar que esta instancia de problema 3-SAT tiene tres soluciones satisfactorias:"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:76
msgid ":math:`(v_1, v_2, v_3) = (T, F, T)` or :math:`(F, F, F)` or :math:`(T, T, F)`"
msgstr ""

#: ../../tutorials/algorithms/08_grover_examples.ipynb:78
msgid "Or, expressed using the DIMACS notation:"
msgstr "O, expresado usando la notación DIMACS:"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:80
msgid "``1 -2 3``, or ``-1 -2 -3``, or ``1 2 -3``."
msgstr ""

#: ../../tutorials/algorithms/08_grover_examples.ipynb:82
msgid "With this example problem input, we then create the corresponding ``oracle`` for our ``Grover`` search. In particular, we use the ``LogicalExpressionOracle`` component, which supports parsing DIMACS-CNF format strings and constructing the corresponding oracle circuit."
msgstr ""

#: ../../tutorials/algorithms/08_grover_examples.ipynb:103
msgid "The ``oracle`` can now be used to create an Grover instance:"
msgstr "El ``oracle`` ahora se puede utilizar para crear una instancia de Grover:"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:124
msgid "We can then configure the backend and run the Grover instance to get the result:"
msgstr ""

#: ../../tutorials/algorithms/08_grover_examples.ipynb:167
msgid "As seen above, a satisfying solution to the specified 3-SAT problem is obtained. And it is indeed one of the three satisfying solutions."
msgstr ""

#: ../../tutorials/algorithms/08_grover_examples.ipynb:169
msgid "Since we used the ``'qasm_simulator'``, the complete measurement result is also returned, as shown in the plot below, where it can be seen that the binary strings ``000``, ``011``, and ``101`` (note the bit order in each string), corresponding to the three satisfying solutions all have high probabilities associated with them."
msgstr ""

#: ../../tutorials/algorithms/08_grover_examples.ipynb:200
msgid "Boolean Logical Expressions"
msgstr "Expresiones lógicas booleanas"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:202
msgid "Qiskit’s ``Grover`` can also be used to perform Quantum Search on an ``Oracle`` constructed from other means, in addition to DIMACS. For example, the ``LogicalExpressionOracle`` can actually be configured using arbitrary Boolean logical expressions, as demonstrated below."
msgstr "El algoritmo de ``Grover`` de Qiskit también se puede utilizar para realizar una Búsqueda Cuántica en un ``Oracle`` construido de otros medios, además de DIMACS. Por ejemplo, el ``LogicalExpressionOracle`` puede ser configurado usando expresiones lógicas booleanas arbitrarias, como se demuestra a continuación."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:236
msgid "In the example above, the input Boolean logical expression ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` should be quite self-explanatory, where ``^``, ``~``, and ``&`` represent the Boolean logical XOR, NOT, and AND operators, respectively. It should be quite easy to figure out the satisfying solution by examining its parts: ``w ^ x`` calls for ``w`` and ``x`` taking different values; ``~(y ^ z)`` requires ``y`` and ``z`` be the same; ``x & y & z`` dictates all three to be ``True``. Putting these together, we get the satisfying solution ``(w, x, y, z) = (False, True, True, True)``, which our ``Grover``\\ ’s result agrees with."
msgstr "En el ejemplo anterior, la expresión lógica booleana de entrada ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` debe ser bastante autoexplicativa, donde ``^``, ``~``, y ``&`` representan los operadores lógicos booleanos XOR, NOT, y AND, respectivamente. Debería ser bastante fácil averiguar la solución satisfactoria examinando sus partes: ``w ^ x`` llama para ``w`` y ``x`` tomando diferentes valores; ``~(y ^ z)`` requiere que ``y`` y ``z`` sean iguales; ``x & y & z`` dicta que los tres sean ``True``. Colocando esto junto, obtenemos la solución satisfactoria ``(w, x, y, z) = (False, True, True, True)``, con la que el resultado de nuestro objeto ``Grover`` concuerda."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:249
msgid "TruthTable Oracles"
msgstr "Oráculos a partir de Tablas de Verdad"

#: ../../tutorials/algorithms/08_grover_examples.ipynb:251
msgid "With Qiskit, ``Oracle``\\ s can also be constructed from truth tables, meaning we can also perform Quantum Search on truth tables. Even though this might seem like a moot point as we would be essentially searching for entries of a truth table with the :math:`1` value, it’s a good example for demonstrative purpose."
msgstr "Con Qiskit, el objeto ``Oracle`` también puede ser construido a partir de tablas de la verdad, lo que significa que también podemos realizar la Búsqueda Cuántica sobre tablas de la verdad. Aunque esto pueda parecer un punto de discusión, ya que estaríamos buscando esencialmente entradas de una tabla de verdad con el valor :math:`1`. es un buen ejemplo para propósitos demostrativos."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:272
msgid "As shown, the ``truthtable`` is specified with a bitstring containing values of all entries in the table. It has length :math:`16`, so the corresponding truth table is of :math:`4` input bits. Since the very first and last values are :math:`1`, the corresponding truth table target entries are ``0000`` and ``1111``."
msgstr "Como se muestra, la variable ``truthtable`` se especifica con una cadena de bits que contiene valores de todas las entradas en la tabla. Tiene longitud :math:`16`, así que la tabla de verdad correspondiente es de :math:`4` bits de entrada. Dado que el primer y último valor son :math:`1`, las entradas de destino correspondientes de la tabla de verdad son ``0000`` y ``1111``."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:274
msgid "Next, we can setup the ``Oracle`` and ``Grover`` objects to perform Quantum Search as usual."
msgstr "A continuación, podemos configurar los objetos ``Oracle`` y ``Grover`` para realizar la Búsqueda Cuántica como de costumbre."

#: ../../tutorials/algorithms/08_grover_examples.ipynb:307
msgid "As seen in the above plot the search result coincides with our expectation."
msgstr "Como se ve en la gráfica anterior el resultado de la búsqueda coincide con nuestra expectativa."

