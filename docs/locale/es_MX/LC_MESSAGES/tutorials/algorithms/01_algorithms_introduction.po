msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-07 17:08+0000\n"
"PO-Revision-Date: 2021-04-14 06:30\n"
"Last-Translator: \n"
"Language-Team: Spanish, Mexico\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-MX\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/01_algorithms_introduction.po\n"
"X-Crowdin-File-ID: 9444\n"
"Language: es_MX\n"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:10
msgid "This page was generated from `tutorials/algorithms/01_algorithms_introduction.ipynb`__."
msgstr "Esta página fue generada a partir de `tutorials/algorithms/01_algorithms_introduction.ipynb`__."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/01_algorithms_introduction.ipynb>`_."
msgstr "Puedes correr esta sección de manera interactiva en el `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/01_algorithms_introduction.ipynb>`_."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:9
msgid "An Introduction to Algorithms in Qiskit"
msgstr "Introducción a algoritmos en Qiskit"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:11
msgid "This is an introduction to algorithms in Qiskit and provides a high-level overview to help understand the various aspects of the functionality to get started. Other tutorials will provide more in-depth material, on given algorithms, and ways to use them etc."
msgstr "Esta es una introducción a algoritmos en Qiskit la cual proporciona un visión general para ayudarte a entender los diversos aspectos de su funcionalidad para poder comenzar. Otros tutoriales proporcionan un material más a profundidad para algunos algoritmos y maneras de usarlos, etc."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:23
msgid "How is the algorithm library structured?"
msgstr "¿Cómo está estructurada la librería de algoritmos?"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:25
msgid "Qiskit provides a number of `Algorithms <https://qiskit.org/documentation/apidoc/qiskit.aqua.algorithms.html>`__ and they are grouped by category according to the task they can perform. For instance ``Minimum Eigensolvers`` to find the smallest eigen value of an operator, for example ground state energy of a chemistry Hamiltonian or a solution to an optimization problem when expressed as an Ising Hamiltonian. There are ``Classifiers`` for machine learning classification problems and ``Amplitude Estimators`` for value estimation that can be used say in financial applications. The full set of categories can be seen in the Algorithms documentation link above."
msgstr "Qiskit provee un numero de `Algoritmos <https://qiskit.org/documentation/apidoc/qiskit.aqua.algorithms.html>`__ agrupados por categoría de acuerdo a la tarea que realizan. Por ejemplo: \"Minimum Eigensolvers\" puede ser utilizado para encontrar el eigenvalor más pequeño de un operador, esto puede ser la energía del estado fundamental de un Hamiltoniano en química, o la solución de un problema de optimización, si es expresado como un Hamiltoniano de Ising. También existen \"Classifiers\" o \"clasificadores\" para problemas de clasificación con aprendizaje de máquina y \"Amplitude Estimators\" o \"estimadores de amplitud\" para estimar los valores que pueden ser utilizados, por un decir, en aplicaciones en finanzas. El conjunto completo de categorías se puede encontrar en la documentación de algoritmos en el link de arriba."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:28
msgid "Algorithms are configurable and often part of the configuration will be in the form of smaller building blocks, of which different instances of the building block type can be given. For instance with ``VQE``, the Variational Quantum Eigensolver, it takes a trial wavefunction, in the form of a ``QuantumCircuit`` and a classical optimizer among other things. Such building blocks can be found as `Components <https://qiskit.org/documentation/apidoc/qiskit.aqua.components.html>`__ and as circuits from the `Circuit Library <https://qiskit.org/documentation/apidoc/circuit_library.html>`__."
msgstr "Los algoritmos son configurables y a menudo parte de su configuración será en forma de pequeños bloques de construcción, de los cuales se pueden obtener diferentes instancias del tipo de bloque de construcción. Por ejemplo, con el ``VQE`` (Variational Quantum Eigensolver), toma una función de onda de prueba en la forma de un ``QuantumCircuit`` y un optimizador clásico, además de otras cosas. Bloques de construcción como este pueden ser encontrados como `Componentes <https://qiskit.org/documentation/apidoc/qiskit.aqua.components.html>`__ y como circuitos de la `Librería de circuitos <https://qiskit.org/documentation/apidoc/circuit_library.html>`__."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:31
msgid "Let’s take a look at an example to construct a VQE instance. Here ``TwoLocal`` is the variational form (trial wavefunction), a parameterized circuit which can be varied, and ``SLSQP`` a classical optimizer. These are created as separate instances and passed to VQE when it is constructed. Trying, for example, a different classical optimizer, or variational form is simply a case of creating an instance of the one you want and passing it into VQE."
msgstr "Veamos un ejemplo para construir una instancia de VQE. Aquí \"TwoLocal\" es lo que se conoce como la forma variacional (función de onda de prueba), que es un circuito parametrizado que puede ser variado y \"SLSQP\" es un optimizador clásico. Ambos son creados como distintas instancias y son introducidos al VQE cuando este es construido. Si quieres intentar, por ejemplo, con un distinto optimizador o distinta forma variacional solo es cosa de crear una instancia nueva de lo que quieras hacer e introducirlo al VQE."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:59
msgid "Let’s draw the ansatz so we can see it’s a QuantumCircuit where θ[0] through θ[7] will be the parameters that are varied as VQE optimizer finds the minimum eigenvalue. We’ll come back to the parameters later in a working example below."
msgstr "Dibujemos el ansatz para que podamos ver que es un QuantumCircuit donde θ[0] a θ[7] van a ser parámetros que serán variados mientras que el optimizador VQE encuentra el mínimo eigenvalor. Volveremos a revisar los parámetros más adelante en un ejemplo."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:89
msgid "But more is needed before we can run the algorithm so let’s get to that next."
msgstr "Pero se necesita más para poder ejecutar un algoritmo, así que, vamos a ello a continuación."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:101
msgid "How to run an algorithm?"
msgstr "¿Cómo ejecutar un algoritmo?"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:103
msgid "In order to run an algorithm we need to have backend, a simulator or real device, on which the circuits that comprise the algorithm can be run. So for example we can use the ``statevector_simulator`` from the BasicAer provider."
msgstr "Para ejecutar un algoritmo necesitamos tener un backend, ya sea un simulador o un dispositivo real; en el que los circuitos que conforman el algoritmo puedan ser ejecutados. Por ejemplo, podemos usar el ``statevector_simulator`` del proveedor BasicAer."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:126
msgid "Now a backend on its own does not have information on how you might want to run the circuits etc. For example how many shots, do you want a noise model, even options around transpiling the circuits. For this Qiskit Aqua has a `QuantumInstance <https://qiskit.org/documentation/stubs/qiskit.aqua.QuantumInstance.html>`__ which is provided both the backend as well as various settings around the circuit processing and execution so for instance:"
msgstr "Un backend por si solo no tiene la información de como deberías de correr los circuitos etc. Es decir, no te va a decir cuantas iteraciones usar, si necesitas un modelo de ruido, o cuales son tus opciones al transpilar el circuito. Para esto, Qiskit Aqua tiene `QuantumInstance <https://qiskit.org/documentation/stubs/qiskit.aqua.QuantumInstance.html>`__ al que se le proporciona con el backend al igual que algunas especificaciones de configuración del procesamiento y ejecución del circuito, por ejemplo:"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:150
msgid "Note: if you provide the backend directly then internally a QuantumInstance will be created from it, with default settings, so at all times the algorithms are working through a QuantumInstance."
msgstr "Nota: si proporcionas el backend directamente, un QuantumInstance con configuración predeterminada va a ser creado a partir de este, de esta manera los algoritmos siempre funcionan a través de un QuantumInstance."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:152
msgid "So now we would be able to call the `run() <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.html#qiskit.aqua.algorithms.VQE.run>`__ method, which is common to all algorithms and returns a result specific for the algorithm. In this case since VQE is a MinimumEigensolver we could use the `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.html#qiskit.aqua.algorithms.VQE.compute_minimum_eigenvalue>`__ method. The latter is the interface of choice for the application modules, such as Chemistry and Optimization, in order that they can work interchangeably with any algorithm within the specific category."
msgstr "Ahora podemos llamar al método `run() <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.html#qiskit.aqua.algorithms.VQE.run>`__, que es igual en todos los algoritmos y regresa un resultado especifico para el algoritmo. En este caso, como el VQE es un MinimumEigensolver, podemos usar el método `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.html#qiskit.aqua.algorithms.VQE.compute_minimum_eigenvalue>`__. Este ultimo es la interfaz que mejor funciona en módulos de aplicaciones como Química y Optimización, de esta manera pueden funcionar con cualquier algoritmo dentro de la categoría especificada."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:165
msgid "A complete working example"
msgstr "Un ejemplo funcional completo"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:167
msgid "Let’s put what we have learned from above together and create a complete working example. VQE will find the minimum eigenvalue, i.e. minimum energy value of a Hamiltonian operator and hence we need such an operator for VQE to work with. Such an operator is given below. This was originally created by the Chemistry application module as the Hamiltonian for an H2 molecule at 0.735A interatomic distance. It’s a sum of Pauli terms as below, but for now I am not going to say anything further about it since the goal is to run the algorithm, but further information on operators can be found in other tutorials."
msgstr "Juntemos lo que hemos aprendido anteriormente y creemos un ejemplo funcional completo. VQE encontrará el valor propio mínimo, es decir, el valor mínimo de energía de un operador Hamiltoniano y, por lo tanto, necesitamos dicho operador para que VQE funcione. Dicho operador se da a continuación. Esto fue creado originalmente por el módulo de aplicación de Química como el Hamiltoniano para una molécula de H2 a una distancia interatómica de 0.735A. Es una suma de términos de Pauli como se muestra a continuación, pero por ahora no voy a decir nada más al respecto ya que el objetivo es ejecutar el algoritmo, pero se puede encontrar más información sobre los operadores en otros tutoriales."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:195
msgid "So let’s build a VQE instance passing the operator, and a backend using a QuantumInstance, to the constructor. Now VQE does have setters so the operator and backend can also be passed later. Setting them later can be useful when creating an algorithm without this problem specific information and then later using it, say with the chemistry application module, which would create the operator for the specific chemistry problem being solved."
msgstr "Construiremos una instancia del VQE, pasándole el operador y un backend al constructor usando QuantumInstance. También tenemos la opción de pasar el operador y el backend más adelante. Hacer esto puede ser útil al crear un algoritmo sin tener la información especifica de este problema, así más adelante puedes usarlo en conjunto con el modulo de aplicaciones de química para crear un operador para el problema de química que vayas a resolver."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:197
msgid "Note: In order that you can run this notebook and see the exact same output the random number generator used throughout Aqua in aqua_globals, as well as the transpiler and simulator, via the QuantumInstance, are seeded. You do not have to do this but if want to be able to reproduce the exact same outcome each time then this is how it’s done."
msgstr "Nota: para ejecutar este cuaderno y ver exactamente el mismo resultado devuelto por el generador de números aleatorios utilizado en Aqua en aqua_globals, así como el resultado del transpilador y el simulador, a través del QuantumInstance, seria necesario utilizar el mismo \"seed\". No es necesario hacer esto pero si quieres reproducir exactamente los mismos resultados cada vez, así es como se hace."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:199
msgid "So let’s run VQE and print the result object it returns."
msgstr "Ahora corramos el VQE e imprimamos el objeto que devuelve como resultado."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:283
msgid "From the above result we can see it took the optimizer ``72`` evaluations of parameter values until it found the minimum eigenvalue of ``-1.85727`` which is the electronic ground state energy of the given H2 molecule. The optimal parameters of the ansatz can also be seen which are the values that were in the ansatz at the minimum value."
msgstr "Del resultado anterior podemos observar que le tomó al optimizador ``72`` evaluaciones de los valores de los parámetros hasta que encontró el eigenvalor mínimo de ``-1.85727``, que es la energía de los electrones en el estado base de la molécula dada de H2. Los parámetros óptimos del ansatz también se pueden ver, estos son los valores en el ansatz al llegar al valor mínimo."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:295
msgid "Using VQE as a MinimumEigensolver"
msgstr "Usando el VQE como un MinimumEigensolver"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:297
msgid "To close off let’s use the MinimumEigensolver interface and also create a VQE instance without supplying either the operator or QuantumInstance. We later set the QuantumInstance and finally pass the operator on the ``compute_minimum_eigenvalue`` method (though we could have passed it in earlier via the setter instead, as long as by the time VQE runs it has an operator to work on)."
msgstr "Para cerrar, usaremos la interface de MinimumEigensolver y crearemos una instancia de VQE pero no le daremos ni el operador ni el QuantumInstance. Más adelante añadiremos QuantumInstance y finalmente introduciremos el operador con el método ``compute_minimum_eigenvalue`` (aunque también podríamos haberlo pasado antes atreves del setter, siempre y cuando a la hora que vaya a correrse el VQE este tenga un operador sobre el cual trabajar)."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:379
msgid "As the identical seeding was used as the prior example the result can be seen to be the same."
msgstr "Cómo se utilizo exactamente el mismo \"seed\" qué en el ejemplo anterior, se puede observar que el resultado es el mismo."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:390
msgid "This concludes this introduction to algorithms in Qiskit. Please check out the other algorithm tutorials in this series for both broader as well as more in depth coverage of the algorithms."
msgstr "Esto concluye esta introducción a algoritmos en Qiskit. Por favor revisa otros de los tutoriales de algoritmos de esta serie para encontrar más explicaciones más a profundidad de los algoritmos."

