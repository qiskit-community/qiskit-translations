msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-27 21:18+0000\n"
"PO-Revision-Date: 2021-03-26 01:33\n"
"Last-Translator: \n"
"Language-Team: Spanish, Mexico\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-MX\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/07_grover.po\n"
"X-Crowdin-File-ID: 9456\n"
"Language: es_MX\n"

#: ../../tutorials/algorithms/07_grover.ipynb:10
msgid "This page was generated from `tutorials/algorithms/07_grover.ipynb`__."
msgstr "Esta página fue generada a partir de `tutorials/algorithms/07_grover.ipynb`__."

#: ../../tutorials/algorithms/07_grover.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/07_grover.ipynb>`_."
msgstr "Puedes correr esta sección de manera interactiva en el `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/07_grover.ipynb>`_."

#: ../../tutorials/algorithms/07_grover.ipynb:9
msgid "Grover’s Algorithm and Amplitude Amplification"
msgstr "Algoritmo de Grover y Amplificación de Amplitud"

#: ../../tutorials/algorithms/07_grover.ipynb:11
msgid "Grover’s algorithm is one of the most famous quantum algorithms introduced by Lov Grover in 1996 [1]. It has initially been proposed for unstructured search problems, i.e. for finding a marked element in a unstructured database. However, Grover’s algorithm is now a subroutine to several other algorithms, such as Grover Adaptive Search [2]. For the details of Grover’s algorithm, please see `Grover’s Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ in the Qiskit textbook."
msgstr "El algoritmo de Grover es uno de los algoritmos cuánticos más famosos, introducido por Lov Grover en 1996 [1]. Fue propuesto inicialmente para problemas de búsqueda no estructurados, es decir para encontrar un elemento marcado en una base de datos no estructurada. Sin embargo, el algoritmo de Grover ahora es una subrutina para muchos otros algoritmos, cómo el Grover Adaptive Search [2]. Para ver los detalles del algoritmo de Grover, revise `Algoritmo de Grover <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ en el libro de texto de Qiskit."

#: ../../tutorials/algorithms/07_grover.ipynb:13
msgid "Qiskit implements Grover’s algorithm in the ``Grover`` class. This class also includes the generalized version, Amplitude Amplification [3], and allows setting individual iterations and other meta-settings to Grover’s algorithm."
msgstr "Qiskit implementa el algoritmo de Grover en la clase ``Grover``. Esta clase también incluye una versión generalizada, la Amplificación de Amplitud [3] y permite establecer iteraciones individuales y otras meta-configuraciones al algoritmo de Grover."

#: ../../tutorials/algorithms/07_grover.ipynb:15
#: ../../tutorials/algorithms/07_grover.ipynb:723
msgid "**References:**"
msgstr "** Referencias:**"

#: ../../tutorials/algorithms/07_grover.ipynb:17
msgid "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"
msgstr "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"

#: ../../tutorials/algorithms/07_grover.ipynb:19
msgid "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"
msgstr "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"

#: ../../tutorials/algorithms/07_grover.ipynb:21
msgid "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"
msgstr "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"

#: ../../tutorials/algorithms/07_grover.ipynb:33
msgid "Grover’s algorithm"
msgstr "Algoritmo de Grover"

#: ../../tutorials/algorithms/07_grover.ipynb:35
msgid "Grover’s algorithm uses the Grover operator :math:`\\mathcal{Q}` to amplify the amplitudes of the good states:"
msgstr "El algoritmo de Grover usa el operador :math:`\\mathcal{Q}` para amplificar las amplitudes de los estados deseados:"

#: ../../tutorials/algorithms/07_grover.ipynb:37
msgid "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"
msgstr "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"

#: ../../tutorials/algorithms/07_grover.ipynb:42
msgid "Here, \\* :math:`\\mathcal{A}` is the initial search state for the algorithm, which is just Hadamards, :math:`H^{\\otimes n}` for the textbook Grover search, but can be more elaborate for Amplitude Amplification \\* :math:`\\mathcal{S_0}` is the reflection about the all 0 state"
msgstr "Aquí, \\* :math:`\\mathcal{A}` es el estado inicial de búsqueda para el algoritmo, el cual es solo Hadamards :math:`H^{\\otimes n}` en la búsqueda de Grover convencional, pero puede ser mas elaborada ya que la amplificación de amplitudes \\* :math:`\\mathcal{S_0}` es la reflexión respecto a estado 0"

#: ../../tutorials/algorithms/07_grover.ipynb:44
msgid "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"
msgstr "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"

#: ../../tutorials/algorithms/07_grover.ipynb:49
msgid "\\* :math:`\\mathcal{S_f}` is the oracle that applies"
msgstr "\\* :math:`\\mathcal{S_f}` es el oráculo que aplica"

#: ../../tutorials/algorithms/07_grover.ipynb:51
msgid "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"
msgstr "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"

#: ../../tutorials/algorithms/07_grover.ipynb:56
msgid "where :math:`f(x)` is 1 if :math:`x` is a good state and otherwise 0."
msgstr "donde :math:`f(x)` es 1 si :math:`x` es un estado deseado y de lo contrario es 0."

#: ../../tutorials/algorithms/07_grover.ipynb:58
msgid "In a nutshell, Grover’s algorithm applies different powers of :math:`\\mathcal{Q}` and after each execution checks whether a good solution has been found."
msgstr "En pocas palabras, el algoritmo de Grover aplica diferentes exponentes de :math:`\\mathcal{Q}` y después de cada ejecución comprueba si se ha encontrado una solución deseada."

#: ../../tutorials/algorithms/07_grover.ipynb:61
msgid "Running Grover’s algorithm"
msgstr "Ejecutando el algoritmo de Grover"

#: ../../tutorials/algorithms/07_grover.ipynb:63
msgid "To run Grover’s algorithm with the ``Grover`` class, firstly, we need to specify an oracle for the circuit of Grover’s algorithm. In the following example, we use ``QuantumCircuit`` as the oracle of Grover’s algorithm. However, there are several other class that we can use as the oracle of Grover’s algorithm. We talk about them later in this tutorial."
msgstr "Para ejecutar el algoritmo de Grover con la clase ``Grover``, primeramente tenemos que especificar un oráculo para el circuito del algoritmo. En el siguiente ejemplo, usamos ``QuantumCircuit`` como el oráculo para el algoritmo de Grover. Sin embargo, hay varias otras clases que podemos usar como el oráculo para el algoritmo. Las vamos a discutir más adelante en este tutorial."

#: ../../tutorials/algorithms/07_grover.ipynb:65
msgid "Note that the oracle for ``Grover`` must be a *phase-flip* oracle. That is, it multiplies the amplitudes of the of “good states” by a factor of :math:`-1`. We explain later how to convert a *bit-flip* oracle to a phase-flip oracle."
msgstr "Tenga en cuenta que el oráculo para ``Grover`` deber ser un oráculo *phase-flip*. Esto significa que multiplica las amplitudes de los estados viables por un factor de :math:`-1`. Más adelante explicaremos como convertir un oráculo *bit-flip* a un oráculo phase-flip."

#: ../../tutorials/algorithms/07_grover.ipynb:120
msgid "Then, we specify a backend and call the ``run`` method of ``Grover`` with a backend to execute the circuits. The returned result type is a ``GroverResult``."
msgstr "Luego, especificamos un backend para llamar al método ``run`` del objeto ``Grover`` con un backend para ejecutar los circuitos. El tipo del resultado devuelto es ``GroverResult``."

#: ../../tutorials/algorithms/07_grover.ipynb:122
msgid "If the search was successful, the ``oracle_evaluation`` attribute of the result will be ``True``. In this case, the most sampled measurement, ``top_measurement``, is one of the “good states”. Otherwise, ``oracle_evaluation`` will be False."
msgstr "Si la búsqueda fue exitosa, el atributo ``oracle_evaluation`` del resultado va a ser ``True``. En este caso, la medición más muestreada, ``top_measurement``, es uno de los estados deseados. De otra manera ``oracle_evaluation`` va a ser False."

#: ../../tutorials/algorithms/07_grover.ipynb:176
msgid "In the example, the result of ``top_measurement`` is ``11`` which is one of “good state”. Thus, we succeeded to find the answer by using ``Grover``."
msgstr "En el ejemplo, el resultado de ``top_measurement`` es ``11`` el cual es uno de los estados viables. Así, logramos encontrar la respuesta usando ``Grover``."

#: ../../tutorials/algorithms/07_grover.ipynb:188
msgid "Using the different types of classes as the oracle of ``Grover``"
msgstr "Usando los diferentes tipos de clases para el oráculo de ``Grover``"

#: ../../tutorials/algorithms/07_grover.ipynb:190
msgid "In the above example, we used ``QuantumCircuit`` as the oracle of ``Grover``. However, we can also use ``qiskit.aqua.components.oracles.Oracle``, and ``qiskit.quantum_info.Statevector`` as oracles. All the following examples are when :math:`|11\\rangle` is “good state”"
msgstr "En el ejemplo anterior, usamos ``QuantumCircuit`` como el oráculo para ``Grover``. Sin embargo, también podemos usar ``qiskit.aqua.components.oracles.Oracle`` y ``qiskit.quantum_info.Statevector`` como oráculos. Todos los siguientes ejemplos son cuando :math:`|11\\rangle` es un estado deseado"

#: ../../tutorials/algorithms/07_grover.ipynb:244
msgid "Internally, the statevector is mapped to a quantum circuit:"
msgstr "Internamente, para el vector de estado es mapeado a un circuito cuántico:"

#: ../../tutorials/algorithms/07_grover.ipynb:274
msgid "The ``Oracle`` components in Qiskit Aqua allow for an easy construction of more complex oracles. The ``Oracle`` type has the interesting subclasses: \\* ``LogicalExpressionOracle``: for parsing logical expressions such as ``'~a | b'``. This is especially useful for solving 3-SAT problems and is shown in the accompanying `Grover Examples <08_grover_examples.ipynb>`__ tutorial. \\* ``TrutheTableOracle``: for converting binary truth tables to circuits"
msgstr "Los componentes ``Oracle`` en Qiskit Aqua permiten una fácil construcción de oráculos más complejos. El tipo ``Oracle`` tiene subclases interesantes, cómo: \\* ``LogicalExpressionOracle``: para analizar gráficamente expresiones lógicas como ``'~a | b'``. Esto es especialmente útil al solucionar problemas 3-SAT y se muestra en la sección `Grover Examples <08_grover_examples.ipynb>`__ tutorial. \\* ``TrutheTableOracle``: para convertir tablas de verdad binarias a circuitos"

#: ../../tutorials/algorithms/07_grover.ipynb:276
msgid "Here we’ll use the ``LogicalExpressionOracle`` for the simple example of finding the state :math:`|11\\rangle`, which corresponds to ``'a & b'``."
msgstr "Aquí utilizaremos ``LogicalExpressionOracle`` para el ejemplo simple de encontrar el estado :math:`|11\\rangle`, que corresponde a ``'a & b'``."

#: ../../tutorials/algorithms/07_grover.ipynb:312
msgid "You can observe, that this oracle is actually implemented with three qubits instead of two!"
msgstr "Se puede observar, que este oráculo en realidad se implementa con tres qubits, ¡en vez de dos!"

#: ../../tutorials/algorithms/07_grover.ipynb:314
msgid "That is because the ``LogicalExpressionOracle`` is not a phase-flip oracle (which flips the phase of the good state) but a bit-flip oracle. This means it flips the state of an auxiliary qubit if the other qubits satisfy the condition. For Grover’s algorithm, however, we require a phase-flip oracle. To convert the bit-flip oracle to a phase-flip oracle we sandwich the controlled-NOT by :math:`X` and :math:`H` gates, as you can see in the circuit above."
msgstr "Esto es porque ``LogicalExpressionOracle`` no es un oráculo de phase-flip (el cual voltea la fase del estado viable) sino que un oráculo bit-flip. Esto significa que voltea el estado de un qubit auxiliar si los otros qubits satisfacen la condición. Sin embargo, para el algoritmo de Grover, requerimos de un oráculo phase-flip. Para convertir el oráculo bit-flip a un oráculo phase-flip hacemos sándwich a las compuertas controlled-NOT by :math:`X` y :math:`H`, como se puede ver en el circuito de arriba."

#: ../../tutorials/algorithms/07_grover.ipynb:316
msgid "**Note:** This transformation from a bit-flip to a phase-flip oracle holds generally and you can use this to convert your oracle to the right representation."
msgstr "** Nota:** Esta transformación de oráculo bit-flip a phase-flip es correcta generalmente y puedes usarla para convertir tu oráculo a la representación correcta."

#: ../../tutorials/algorithms/07_grover.ipynb:328
msgid "Amplitude amplification"
msgstr "Amplificación de amplitud"

#: ../../tutorials/algorithms/07_grover.ipynb:330
msgid "Grover’s algorithm uses Hadamard gates to create the uniform superposition of all the states at the beginning of the Grover operator :math:`\\mathcal{Q}`. If some information on the good states is available, it might be useful to not start in a uniform superposition but only initialize specific states. This, generalized, version of Grover’s algorithm is referred to *Amplitude Amplification*."
msgstr "El algoritmo de Grover usa compuertas Hadamard para crear una superposición uniforme de todos los estados al principio del operador Grover :math:`\\mathcal{Q}`. Si alguna información de los estados deseados está disponible, puede ser útil no empezar en una superposición uniforme, sino solo inicializar los estados específicos. Esta versión generalizada del algoritmo de Grover es conocida como *Amplificación de Amplitud*."

#: ../../tutorials/algorithms/07_grover.ipynb:332
msgid "In Qiskit, the initial superposition state can easily be adjusted by setting the ``state_preparation`` argument."
msgstr "En Qiskit, el estado de superposición inicial puede ajustado fácilmente configurando el argumento ``state_preparation``."

#: ../../tutorials/algorithms/07_grover.ipynb:335
msgid "State preparation"
msgstr "Preparación de estado"

#: ../../tutorials/algorithms/07_grover.ipynb:337
msgid "A ``state_preparation`` argument is used to specify a quantum circuit that prepares a quantum state for the start point of the amplitude amplification. By default, a circuit with $H^{:nbsphinx-math:`\\otimes `n} $ is used to prepare uniform superposition (so it will be Grover’s search). The diffusion circuit of the amplitude amplification reflects ``state_preparation`` automatically."
msgstr "Se utiliza el argumento ``state_preparation`` para especificar un circuito cuántico que prepara al estado cuántico para el punto inicial de la amplificación de amplitudes. Por defecto, un circuito con $H^{:nbsphinx-math:`\\otimes `n} $ para preparar la superposición uniforme (osea que va ser búsqueda de Grover). El circuito de difusión de la amplificación de amplitudes refleja ``state_preparation`` automáticamente."

#: ../../tutorials/algorithms/07_grover.ipynb:442
msgid "Full flexibility"
msgstr "Flexibilidad total"

#: ../../tutorials/algorithms/07_grover.ipynb:444
msgid "For more advanced use, it is also possible to specify the entire Grover operator by setting the ``grover_operator`` argument. This might be useful if you know more efficient implementation for :math:`\\mathcal{Q}` than the default construction via zero reflection, oracle and state preparation."
msgstr "Para un uso más avanzado, es posible especificar el operador de Grover completo configurando el argumento ``grover_operator``. Esto puede ser útil si conoces una implementación más eficiente para :math:`\\mathcal{Q}` que la construcción predeterminada mediante reflexión con cero, oráculo y preparación de estado."

#: ../../tutorials/algorithms/07_grover.ipynb:446
msgid "The ``qiskit.circuit.library.GroverOperator`` can be a good starting point and offers more options for an automated construction of the Grover operator. You can for instance \\* set the ``mcx_mode`` \\* ignore qubits in the zero reflection by setting ``reflection_qubits`` \\* explicitly exchange the :math:`\\mathcal{S_f}, \\mathcal{S_0}` and :math:`\\mathcal{A}` operations using the ``oracle``, ``zero_reflection`` and ``state_preparation`` arguments"
msgstr "El``qiskit.circuit.library.GroverOperator`` puede ser un buen punto de partida y ofrece muchas más opciones para la construcción automatizada del operador de Grover. Puedes, por ejemplo, \\* configurar el ``mcx_mode`` \\* ignorar qubits en la reflexión con cero con la configuración ``reflection_qubits`` \\* intercambiar explícitamente las operaciones :math:`\\mathcal{S_f}, \\mathcal{S_0}` y :math:`\\mathcal{A}` usando los argumentos ``oracle``, ``zero_reflection`` y ``state_preparation``"

#: ../../tutorials/algorithms/07_grover.ipynb:457
msgid "For instance, imagine the good state is a three qubit state :math:`|111\\rangle` but we used 2 additional qubits as auxiliary qubits."
msgstr "Por ejemplo, imagina que el estado deseado es el estado de tres qubits :math:`|111\\rangle` pero usamos 2 qubits adicionales cómo qubits auxiliares."

#: ../../tutorials/algorithms/07_grover.ipynb:491
msgid "Then, per default, the Grover operator implements the zero reflection on all five qubits."
msgstr "Entonces, por defecto, el operador de Grover implementa la reflexión con cero en los cinco qubits."

#: ../../tutorials/algorithms/07_grover.ipynb:522
msgid "But we know that we only need to consider the first three:"
msgstr "Pero sabemos que solo necesitamos considerar los primeros tres:"

#: ../../tutorials/algorithms/07_grover.ipynb:554
msgid "Dive into other arguments of ``Grover``"
msgstr "Sumérgete en otros argumentos de ``Grover``"

#: ../../tutorials/algorithms/07_grover.ipynb:556
msgid "``Grover`` has arguments other than ``oracle`` and ``state_preparation``. We will explain them in this section."
msgstr "``Grover`` tiene más argumentos además de ``oracle`` y``state_preparation``. Los explicaremos en esta sección."

#: ../../tutorials/algorithms/07_grover.ipynb:559
msgid "Specifying ``good_state``"
msgstr "Especificando ``good_state``"

#: ../../tutorials/algorithms/07_grover.ipynb:561
msgid "``good_state`` is used to check whether the measurement result is correct or not internally. It can be a list of binary strings, a list of integer, ``Statevector``, and Callable. If the input is a list of bitstrings, each bitstrings in the list represents a good state. If the input is a list of integer, each integer represent the index of the good state to be :math:`|1\\rangle`. If it is a ``Statevector``, it represents a superposition of all good states."
msgstr "``good_state`` es usado para revisar si la medición es correcta, o no, de manera interna. Puede ser una lista de strings binarios, una lista de enteros, ``Statevector``, y Callable. Si la entrada es una lista de strings de bits, cada string de bits en la lista representa un estado deseado. Si la entrada es una lista de enteros, cada entero representa el índice del estado deseado como :math:`|1\\rangle`. Si es un ``Statevector``, lo representa como una superposición de todos los estados deseados."

#: ../../tutorials/algorithms/07_grover.ipynb:715
msgid "The number of ``iterations``"
msgstr "El número de ``iterations``"

#: ../../tutorials/algorithms/07_grover.ipynb:717
msgid "The number of repetition of applying the Grover operator is important to obtain the correct result with Grover’s algorithm. The number of iteration can be set by the ``iteration`` argument of ``Grover``. The following inputs are supported: \\* an integer to specify a single power of the Grover operator that’s applied \\* or a list of integers, in which all these different powers of the Grover operator are run consecutively and after each time we check if a correct solution has been found"
msgstr "El número de repeticiones de la aplicación del operador de Grover es importante para obtener el resultado correcto con el algoritmo de Grover. El número de iteraciones puede ser configurado con el argumento ``iteration`` de ``Grover``. Las siguientes entradas son: \\* un entero para especificar un solo exponente del operador de Grover que es aplicado \\* una lista de enteros, en la cual todos estos diferentes exponentes del operador de Grover son ejecutados consecutivamente y cada vez revisamos si la solución correcta fue encontrada"

#: ../../tutorials/algorithms/07_grover.ipynb:719
msgid "Additionally there is the ``sample_from_iterations`` argument. When it is ``True``, instead of the specific power in ``iterations``, a random integer between 0 and the value in ``iteration`` is used as the power Grover’s operator. This approach is useful when we don’t even know the number of solution."
msgstr "Adicionalmente existe el argumento ``sample_from_iterations``. Cuando es ``True``, en vez del exponente especifico en ``iterations``, un entero aleatorio entre 0 y el valor en ``iteration``es usado como el exponente en el operador de Grover. Este acercamiento es útil cuando no sabemos ni siquiera el número de la solución."

#: ../../tutorials/algorithms/07_grover.ipynb:721
msgid "For more details of the algorithm using ``sample_from_iterations``, see [4]."
msgstr "Para más detalles acerca del uso de ``sample_from_iterations`` en el algoritmo, consulte [4]."

#: ../../tutorials/algorithms/07_grover.ipynb:725
msgid "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"
msgstr "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"

#: ../../tutorials/algorithms/07_grover.ipynb:775
msgid "When the number of solutions is known, we can also use a static method ``optimal_num_iterations`` to find the optimal number of iterations. Note that the output iterations is an approximate value. When the number of qubits is small, the output iterations may not be optimal."
msgstr "Cuando el número de soluciones es conocido, podemos usar el método estático ``optimal_num_iterations`` para encontrar el número óptimo de iteraciones. Tome en cuenta que la salida de este método es un valor aproximado. Cuando el numero de qubits es pequeño, el valor de iteraciones devuelto puede que no sea óptimo."

#: ../../tutorials/algorithms/07_grover.ipynb:818
msgid "Applying ``post_processing``"
msgstr "Aplicando ``post_processing``"

#: ../../tutorials/algorithms/07_grover.ipynb:820
msgid "We can apply an optional post processing to the top measurement for ease of readability. It can be used e.g. to convert from the bit-representation of the measurement ``[1, 0, 1]`` to a DIMACS CNF format ``[1, -2, 3]``."
msgstr "Podemos aplicar un post-procesamiento opcional a la mejor medición para facilitar la legibilidad. Puede ser usado para, por ejemplo, convertir una representación de bits de la medición cómo ``[1, 0, 1]`` a su forma en formato DIMACS CNF ``[1, -2, 3]``."

