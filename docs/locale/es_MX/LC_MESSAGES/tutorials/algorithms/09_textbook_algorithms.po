msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-07 17:08+0000\n"
"PO-Revision-Date: 2021-04-07 18:23\n"
"Last-Translator: \n"
"Language-Team: Spanish, Mexico\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-MX\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/09_textbook_algorithms.po\n"
"X-Crowdin-File-ID: 9460\n"
"Language: es_MX\n"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:10
msgid "This page was generated from `tutorials/algorithms/09_textbook_algorithms.ipynb`__."
msgstr "Esta página fue generada desde `tutorials/algorithms/09_textbook_algorithms.ipynb`__."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/09_textbook_algorithms.ipynb>`_."
msgstr "Puedes correr esta sección de manera interactiva en el `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/09_textbook_algorithms.ipynb>`__."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:9
msgid "Textbook and Shor’s algorithms"
msgstr "Libro de texto y algoritmos de Shor"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:11
msgid "Qiskit contains implementations of the well known textbook quantum algorithms such as the `Deutsch-Jozsa algorithm <https://qiskit.org/textbook/ch-algorithms/deutsch-jozsa.html>`__, the `Bernstein-Vazirani algorithm <https://qiskit.org/textbook/ch-algorithms/bernstein-vazirani.html>`__ and `Simon’s algorithm <https://qiskit.org/textbook/ch-algorithms/simon.html>`__."
msgstr "Qiskit contiene implementaciones de los algoritmos más conocidos encontrados en los libros de texto como el `Algoritmo de Deutsch-Jozsa <https://qiskit.org/textbook/ch-algorithms/deutsch-jozsa.html>`__, el `Algoritmo de Bernstein-Vazirani <https://qiskit.org/textbook/ch-algorithms/bernstein-vazirani.html>`__ y el `Algoritmo de Simon <https://qiskit.org/textbook/ch-algorithms/simon.html>`__."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:13
msgid "Qiskit also has an implementation of `Shor’s algorithm <https://qiskit.org/textbook/ch-algorithms/shor.html>`__."
msgstr "Qiskit también tiene una implementación del `algoritmo de Shor <https://qiskit.org/textbook/ch-algorithms/shor.html>`__."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:15
msgid "The preceding references have detailed explanations and build-out of circuits whereas this notebook has examples with the pre-built algorithms in Qiskit that you can use for experimentation and education purposes."
msgstr "Las siguientes referencias tienen explicaciones detalladas y representaciones de circuitos mientras que este cuaderno tiene ejemplos de los algoritmos pre-construidos en Qiskit que puedes usar para experimentar y para otros propósitos didácticos."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:42
msgid "Deutsch-Jozsa algorithm"
msgstr "Algoritmo de Deutsch-Jozsa"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:44
msgid "Lets start with the `Deutsch-Jozsa algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.DeutschJozsa.html>`__ which can determine if a function is ``'balanced'`` or ``'constant'`` given such a function as input. We can experiment with it in Qiskit using an oracles created from a truth tables. So for example, we can create a ``TruthTableOracle`` instance as follows."
msgstr "Empecemos con el algoritmo de `Deutsch-Jozsa <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.DeutschJozsa.html>`__ que puede determinar si una función es ``'balanceada'`` o ``'constante'` dada una función como entrada. Podemos experimentar con él en Qiskit usando oráculos creados a partir de tablas de verdad. Así que, por ejemplo, podemos crear una instancia de ``TruthTableOracle`` de la siguiente manera."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:66
msgid "As shown, the truthtable is specified with the ``bitstr`` containing values of all entries in the table. It has length :math:`8`, so the corresponding truth table is of :math:`3` input bits. We can of course see that this truth table represents a ``'balanced'`` function as half of values are :math:`1` and the other half :math:`0`."
msgstr "Como se muestra, la tabla de verdad se especifica con el ``bitstr`` que contiene los valores de todas las entradas en la tabla. Tiene longitud :math:`8`, así que la tabla de verdad correspondiente es de :math:`3` bits de entrada. Por supuesto, podemos ver que esta tabla de verdad representa una función ``'balanceada'`` ya que la mitad de los valores son :math:`1` y la otra mitad :math:`0`."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:68
msgid "It might seem like a moot point running Deutsch-Jozsa on a truthtable as the function outputs are literally listed as the truthtable’s values. The intention is to create an oracle circuit whose groundtruth information is readily available to us but obviously not to the quantum Deutsch-Jozsa algorithm that is to act upon the oracle circuit. In more realistic situations, the oracle circuit would be provided as a blackbox to the algorithm."
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:70
msgid "Above said, we can inspect the circuit corresponding to the function encoded in the ``TruthTableOracle`` instance."
msgstr "Y como se mencionó arriba, podemos inspeccionar el circuito correspondiente a la función codificada en la instancia ``TruthTableOracle``."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:100
msgid "As seen, the :math:`v_i`\\ ’s correspond to the 3 input bits; the :math:`o_0` is the oracle’s output qubit; the :math:`a_0` is an ancilla qubit."
msgstr "Como se puede ver, :math:`v_i`\\ corresponde a los 3 bits de entrada; :math:`o_0` es el qubit de salida del oráculo; :math:`a_0` es un qubit ancilla."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:102
msgid "Next we can simply create a ``DeutschJozsa`` instance using the oracle, and run it to check the result."
msgstr "A continuación podemos crear una instancia ``DeutschJozsa`` usando el oráculo y correrlo para revisar el resultado."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:145
msgid "We can of course quickly put together another example for a ``'constant'`` function, as follows."
msgstr "Por supuesto, podemos establecer rápidamente otro ejemplo para una función ``'constant'``, de la siguiente manera."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:191
msgid "Bernstein-Vazirani algorithm"
msgstr "Algoritmo Bernstein-Vazirani"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:193
msgid "Next the `Bernstein-Vazirani algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.BernsteinVazirani.html>`__ which tries to find a hidden string. Again, for the example, we create a TruthTableOracle instance."
msgstr "A continuación el `algoritmo Bernstein-Vazirani <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.BernsteinVazirani.html>` __ que intenta encontrar un string oculto. De nuevo, para el ejemplo, creamos una instancia de TruthTableOracle."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:215
msgid "As shown, the truthtable is specified with the ``bitstr`` containing values of all entries in the table. It has length :math:`8`, so the corresponding truth table is of :math:`3` input bits. The truthtable represents the function mappings as follows:"
msgstr "Como se muestra, la tabla de verdad es especificada con el ``bitstr`` que contiene todos los valores de las entradas en la tabla. Tiene un tamaño de :math:`8`, entonces la tabla de verdad correspondiente es de :math:`3` bits de entrada. La tabla de verdad representa las correlaciones de las funciones de la siguiente manera:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:217
msgid ":math:`\\mathbf{a} \\cdot 000 \\mod 2 = 0`"
msgstr ":math:`\\mathbf{a} \\cdot 000 \\mod 2 = 0`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:218
msgid ":math:`\\mathbf{a} \\cdot 001 \\mod 2 = 0`"
msgstr ":math:`\\mathbf{a} \\cdot 001 \\mod 2 = 0`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:219
msgid ":math:`\\mathbf{a} \\cdot 010 \\mod 2 = 1`"
msgstr ":math:`\\mathbf{a} \\cdot 010 \\mod 2 = 1`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:220
msgid ":math:`\\mathbf{a} \\cdot 011 \\mod 2 = 1`"
msgstr ":math:`\\mathbf{a} \\cdot 011 \\mod 2 = 1`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:221
msgid ":math:`\\mathbf{a} \\cdot 100 \\mod 2 = 1`"
msgstr ":math:`\\mathbf{a} \\cdot 100 \\mod 2 = 1`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:222
msgid ":math:`\\mathbf{a} \\cdot 101 \\mod 2 = 1`"
msgstr ":math:`\\mathbf{a} \\cdot 101 \\mod 2 = 1`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:223
msgid ":math:`\\mathbf{a} \\cdot 110 \\mod 2 = 0`"
msgstr ":math:`\\mathbf{a} \\cdot 110 \\mod 2 = 0`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:224
msgid ":math:`\\mathbf{a} \\cdot 111 \\mod 2 = 0`"
msgstr ":math:`\\mathbf{a} \\cdot 111 \\mod 2 = 0`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:226
msgid "And obviously the goal is to find the bitstring :math:`\\mathbf{a}` that satisfies all the inner product equations."
msgstr "Y obviamente el objetivo es encontrar la cadena de bits :math:`\\mathbf{a}` que satisface todas las ecuaciones de producto interno."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:228
msgid "Lets again look at the oracle circuit, that now corresponds to the binary function encoded in the ``TruthTableOracle`` instance."
msgstr "Volvamos a ver el circuito del oráculo, que ahora corresponde a la función binaria codificada en la instancia ``TruthTableOracle``."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:258
msgid "Again the :math:`v_i`\\ ’s correspond to the 3 input bits; the :math:`o_0` is the oracle’s output qubit; the :math:`a_0` is an ancilla qubit."
msgstr "De nuevo, las :math:`v_i`\\ corresponden a los tres bits de entrada; el :math:`o_0` es el qubit de salida del oráculo; el :math:`a_0` es un qubit ancilla."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:260
msgid "Let us first compute the groundtruth :math:`\\mathbf{a}` classically:"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:305
msgid "Next we can create a ``BernsteinVazirani`` instance using the oracle, and run it to check the result against the groundtruth."
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:350
msgid "Simon’s algorithm"
msgstr "Algoritmo de Simon"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:352
msgid "`Simon’s algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Simon.html>`__ is used to solve `Simon’s problem <https://en.wikipedia.org/wiki/Simon's_problem>`__. Once again, for the example, we create a TruthTableOracle instance, where the construction shows a different form."
msgstr "El `Algoritmo de Simon <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Simon.html>`__ es usado para resolver `Problema de Simon <https://en.wikipedia.org/wiki/Simon's_problem>`__. De nuevo, por ejemplo, podemos crear una instancia de TruthTableOracle donde la construcción muestra una forma diferente."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:378
msgid "As shown, the truthtable is specified with three length-8 bitstrings, each containing the values of all entries for a particular output column in the table. Each bitstring has length :math:`8`, so the truthtable has :math:`3` input bits; There are :math:`3` bitstrings, so the truthtable has :math:`3` output bits."
msgstr "Como se muestra, la tabla de verdad es especificada con tres cadenas de 8 bits, cada una conteniendo los valores de todas las entradas de una columna de salida especifica de la tabla. Cada cadena tiene longitud :math:`8`, entonces la tabla de verdad va a tener :math:`3` bits de entrada; Hay :math:`3` cadenas de bits, entonces tiene :math:`3` bits de salida."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:380
msgid "The function :math:`f` represented by the truthtable is promised to be either 1-to-1 or 2-to-1. Our goal is to determine which. For the case of 2-to-1, we also need to compute the mask :math:`\\mathbf{s}`, which satisfies :math:`\\forall \\mathbf{x},\\mathbf{y}`: :math:`\\mathbf{x} \\oplus \\mathbf{y} = \\mathbf{s}` iff :math:`f(\\mathbf{x}) = f(\\mathbf{y})`. Apparently, if :math:`f` is 1-to-1, the corresponding mask :math:`\\mathbf{s} = \\mathbf{0}`."
msgstr "La función :math:`f` representada por la tabla de verdad promete tener un valor de 1-a-1 o 2-a-1. Nuestro objetivo es determinar cual es. Para el caso de 2-a-1, también tenemos que calcular la máscara :math:`\\mathbf{s}`, que satisface :math:`\\forall \\mathbf{x},\\mathbf{y}`: :math:`\\mathbf{x} \\oplus \\mathbf{y} = \\mathbf{s}` si :math:`f(\\mathbf{x}) = f(\\mathbf{y})`. Aparentemente, si :math:`f` es 1-a-1, la máscara correspondiente es :math:`\\mathbf{s} = \\mathbf{0}`."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:382
msgid "Let us first compute the groundtruth mask :math:`\\mathbf{s}` classically:"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:468
msgid "We can also quickly try a truthtable that represents a 1-to-1 function (i.e., the corresponding mask is :math:`\\mathbf{0}`), as follows."
msgstr "También podemos probar rápidamente una tabla de verdad que represente a una función 1-a-1 (es decir, la máscara correspondiente es :math:`\\mathbf{0}`), de la siguiente manera."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:523
msgid "Shor’s Factoring algorithm"
msgstr "Algoritmo de Factorización de Shor"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:525
msgid "`Shor’s Factoring algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Shor.html>`__ is one of the most well-known quantum algorithms and finds the prime factors for input integer :math:`N` in polynomial time. The algorithm implementation in Qiskit is simply provided a target integer to be factored and run, as follows:"
msgstr "El `Algoritmo de Factorización de Shor <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Shor.html>`__ es uno de los algoritmos cuánticos más conocidos, este busca encontrar los factores primos de un entero de entrada :math:`N` en tiempo polinomial. A la implementación del algoritmo en Qiskit simplemente se le provee un entero objetivo que va a ser factorizado y se ejecuta de la siguiente manera:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:570
msgid "Note: this implementation of Shor’s algorithm uses :math:`4n + 2` qubits, where :math:`n` is the number of bits representing the integer in binary. So in practice, for now, this implementation is restricted to factorizing small integers. Given the above value of N we compute :math:`4n +2` below and confirm the size from the actual circuit."
msgstr "Nota: esta implementación del algoritmo de Shor usa :math:`4n + 2` qubits, donde :math:`n` es el número de bits que representan el entero en binario. Así que en la práctica, por ahora, esta implementación esta restringida a factorizar números enteros pequeños. Dado el valor anterior de N calculamos :math:`4n +2` a continuación y confirmamos el tamaño de circuito."

