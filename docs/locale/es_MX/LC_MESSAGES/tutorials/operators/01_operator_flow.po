msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-21 20:22+0000\n"
"PO-Revision-Date: 2021-02-17 21:20\n"
"Last-Translator: \n"
"Language-Team: Spanish, Mexico\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-MX\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/operators/01_operator_flow.po\n"
"X-Crowdin-File-ID: 9472\n"
"Language: es_MX\n"

#: ../../tutorials/operators/01_operator_flow.ipynb:10
msgid "This page was generated from `tutorials/operators/01_operator_flow.ipynb`__."
msgstr "Esta página ha sido generada a partir de `tutorials/operators/01_operator_flow.ipynb`__."

#: ../../tutorials/operators/01_operator_flow.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/operators/01_operator_flow.ipynb>`_."
msgstr "Ejecuta interactivamente en `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/operators/01_operator_flow.ipynb>`_."

#: ../../tutorials/operators/01_operator_flow.ipynb:9
msgid "Operator Flow"
msgstr "Flujo de operadores"

#: ../../tutorials/operators/01_operator_flow.ipynb:11
msgid "`Introduction <#introduction>`__"
msgstr "`Introducción <#introduction>`__"

#: ../../tutorials/operators/01_operator_flow.ipynb:13
msgid "`Pauli operators, sums, compositions, and tensor products <#paulioperators>`__"
msgstr "`Operadores de Pauli, sumas, composiciones y productos de tensoriales <#paulioperators>`__"

#: ../../tutorials/operators/01_operator_flow.ipynb:15
msgid "`Part I: State Functions and Measurements <#statefunctions>`__"
msgstr "`Parte I: Funciones de estado y mediciones <#statefunctions>`__"

#: ../../tutorials/operators/01_operator_flow.ipynb:17
msgid "`Algebraic operations and predicates <#algebraicoperations>`__"
msgstr "`Operaciones algebraicas y predicados <#algebraicoperations>` __"

#: ../../tutorials/operators/01_operator_flow.ipynb:19
msgid "`Part II: ``PrimitiveOp``\\ s <#primitiveops>`__"
msgstr "`Parte II: ``PrimitiveOp`` <#primitiveops>`__"

#: ../../tutorials/operators/01_operator_flow.ipynb:21
msgid "`Matrix elements <#matrixelements>`__"
msgstr "`Elementos de matriz <#matrixelements>`__"

#: ../../tutorials/operators/01_operator_flow.ipynb:22
msgid "`Applying an operator to a state vector <#applyingoperator>`__"
msgstr "`Aplicando un operador a un vector de estado <#applyingoperator>`__"

#: ../../tutorials/operators/01_operator_flow.ipynb:24
msgid "`Part III ``ListOp`` and subclasses <#listopsubclasses>`__"
msgstr "`Parte III ``ListOp`` y subclases <#listopsubclasses>`__"

#: ../../tutorials/operators/01_operator_flow.ipynb:26
msgid "`ListOp <#listop>`__"
msgstr "`ListOp <#listop>`__"

#: ../../tutorials/operators/01_operator_flow.ipynb:27
msgid "`ListOps: ``SummedOp``, ``ComposedOp``, ``TensoredOp`` <#listopssummedop>`__"
msgstr "`ListOps: ``SummedOp``, ``ComposedOp``, ``TensoredOp`` <#listopssummedop>`__"

#: ../../tutorials/operators/01_operator_flow.ipynb:29
msgid "`Part IV: ``OperatorStateFn`` <#operatorstatefn>`__"
msgstr "`Parte IV: ``OperatorStateFn`` <#operatorstatefn>`__"

#: ../../tutorials/operators/01_operator_flow.ipynb:30
msgid "`Part V: Converters <#converters>`__"
msgstr "`Parte V: Conversores <#converters>`__"

#: ../../tutorials/operators/01_operator_flow.ipynb:32
msgid "`Evolutions, ``exp_i()``, and the ``EvolvedOp`` <#evolutions>`__"
msgstr "`Evoluciones, ``exp_i()``, y el operador ``EvolvedOp`` <#evolutions>`__"

#: ../../tutorials/operators/01_operator_flow.ipynb:34
msgid "`Weighted sum of Pauli operators <#weightedsum>`__"
msgstr "`Suma ponderada de operadores de Pauli <#weightedsum>`__"

#: ../../tutorials/operators/01_operator_flow.ipynb:36
msgid "`Expectations <#expectations>`__"
msgstr "`Conversores Expectations <#expectations>`__"

#: ../../tutorials/operators/01_operator_flow.ipynb:37
msgid "`Executing ``CircuitStateFn``\\ s with the ``CircuitSampler`` <#executing>`__"
msgstr "`Ejecutando ``CircuitStateFn`` con ``CircuitSampler`` <#executing>`__"

#: ../../tutorials/operators/01_operator_flow.ipynb:49
msgid "Introduction"
msgstr "Introducción"

#: ../../tutorials/operators/01_operator_flow.ipynb:51
msgid "Qiskit provides classes representing states and operators and sums, tensor products, and compositions thereof. These algebraic constructs allow us to build expressions representing operators."
msgstr "Qiskit proporciona clases que representan estados, operadores, sumas, productos tensoriales y composiciones de los mismos. Estas construcciones algebraicas nos permiten construir expresiones que representan operadores."

#: ../../tutorials/operators/01_operator_flow.ipynb:53
msgid "We introduce expressions by building them from Pauli operators. In subsequent sections we explore in more detail operators and states, how they are represented, and what we can do with them. In the last section we construct a state, evolve it with a Hamiltonian, and compute expectation values of an observable."
msgstr "Introducimos expresiones creándolas a partir de operadores de Pauli. En secciones posteriores exploraremos operadores y estados con mayor detalle, cómo están representados, y qué podemos hacer con ellos. En la última sección construiremos un estado, lo desarrollaremos con un Hamiltoniano, y calculamos los valores de esperados de un observable."

#: ../../tutorials/operators/01_operator_flow.ipynb:56
msgid "Pauli operators, sums, compositions, and tensor products"
msgstr "Operadores de Pauli, sumas, composiciones y productos tensoriales"

#: ../../tutorials/operators/01_operator_flow.ipynb:58
msgid "The most important base operators are the Pauli operators. The Pauli operators are represented like this."
msgstr "Los operadores fundamentales más importantes son los operadores de Pauli, los cuales se representan de esta manera."

#: ../../tutorials/operators/01_operator_flow.ipynb:99
msgid "These operators may also carry a coefficient."
msgstr "Estos operadores también pueden llevar un coeficiente."

#: ../../tutorials/operators/01_operator_flow.ipynb:142
msgid "These coefficients allow the operators to be used as terms in a sum."
msgstr "Estos coeficientes permiten que los operadores se utilicen como términos en una suma."

#: ../../tutorials/operators/01_operator_flow.ipynb:188
msgid "Tensor products are denoted with a caret, like this."
msgstr "Los productos tensoriales se denotan con un caret (acento circunflejo), como este."

#: ../../tutorials/operators/01_operator_flow.ipynb:228
msgid "Composition is denoted by the ``@`` symbol."
msgstr "La composición se denotada por el símbolo ``@``."

#: ../../tutorials/operators/01_operator_flow.ipynb:268
msgid "In the preceding two examples, the tensor product and composition of Pauli operators were immediatley reduced to the equivalent (possibly multi-qubit) Pauli operator. If we tensor or compose more complicated objects, the result is objects representing the unevaluated operations. That is, algebraic expressions."
msgstr "En los dos ejemplos anteriores, el producto tensorial y la composición de los operadores de Pauli se redujeron inmediatamente al operador equivalente de Pauli (posiblemente multi-cúbit). Si tensamos o componemos objetos más complicados, como resultado obtendremos objetos que representan expresiones algebraicas, es decir, operaciones no evaluadas."

#: ../../tutorials/operators/01_operator_flow.ipynb:279
msgid "For example, composing two sums gives"
msgstr "Por ejemplo, la composición de dos sumas"

#: ../../tutorials/operators/01_operator_flow.ipynb:337
msgid "And tensoring two sums gives"
msgstr "Y el producto tensorial de dos sumas da"

#: ../../tutorials/operators/01_operator_flow.ipynb:395
msgid "Let’s take a closer look at the types introduced above. First the Pauli operators."
msgstr "Echemos un vistazo a los tipos introducidos anteriormente. Primero a los operadores de Pauli."

#: ../../tutorials/operators/01_operator_flow.ipynb:438
msgid "Each Pauli operator is an instance of ``PauliOp``, which wraps an instance of ``qiskit.quantum_info.Pauli``, and adds a coefficient ``coeff``. In general, a ``PauliOp`` represents a weighted tensor product of Pauli operators."
msgstr "Cada operador Pauli es una instancia de ``PauliOp``, que envuelve a una instancia de ``qiskit.quantum_info.Pauli``, y añade un coeficiente ``coeff``. En general, un ``PauliOp`` representa un producto tensorial ponderado de operadores Pauli."

#: ../../tutorials/operators/01_operator_flow.ipynb:479
msgid "For the encoding of the Pauli operators as pairs of Boolean values, see the documentation for ``qiskit.quantum_info.Pauli``."
msgstr "Para la codificación de los operadores de Pauli como pares de valores booleanos, ve la documentación de ``qiskit.quantum_info.Pauli``."

#: ../../tutorials/operators/01_operator_flow.ipynb:481
msgid "All of the objects representing operators, whether as “primitive”s such as ``PauliOp``, or algebraic expressions carry a coefficient"
msgstr "Todos los objetos que representan operadores, ya sea una “primitiva” como ``PauliOp``, o expresiones algebraicas llevan un coeficiente"

#: ../../tutorials/operators/01_operator_flow.ipynb:533
msgid "In the following we take a broader and deeper look at Qiskit’s operators, states, and the building blocks of quantum algorithms."
msgstr "A continuación analizamos a fondo los operadores de Qiskit, los estados además de los elementos básicos de los algoritmos cuánticos."

#: ../../tutorials/operators/01_operator_flow.ipynb:545
msgid "Part I: State Functions and Measurements"
msgstr "Parte I: Funciones de Estado y Mediciones"

#: ../../tutorials/operators/01_operator_flow.ipynb:547
msgid "Quantum states are represented by subclasses of the class ``StateFn``. There are four representations of quantum states: ``DictStateFn`` is a sparse respresentation in the computational basis, backed by a ``dict``. ``VectorStateFn`` is a dense representation in the computational basis backed by a numpy array. ``CircuitStateFn`` is backed by a circuit and represents the state obtained by executing the circuit on the all-zero computational-basis state. ``OperatorStateFn`` represents mixed states via a density matrix. (As we will see later, ``OperatorStateFn`` is also used to represent observables.)"
msgstr "Los estados cuánticos son representados por subclases de la clase ``StateFn``. Hay cuatro representaciones de estados cuánticos: ``DictStateFn`` es una representación dispersa en la base computacional, respaldada por un ``dict``. ``VectorStateFn`` es una representación densa en la base computacional respaldada por un arreglo de numpy. ``CircuitStateFn`` está respaldado por un circuito y representa el estado obtenido al ejecutar el circuito en el estado cero de la base computacional. ``OperatorStateFn`` representa estados mixtos a través de una matriz de densidad. (Como veremos más tarde, ``OperatorStateFn`` también se utiliza para representar observables.)"

#: ../../tutorials/operators/01_operator_flow.ipynb:550
msgid "Several ``StateFn`` instances are provided for convenience. For example ``Zero, One, Plus, Minus``."
msgstr "Se proporcionan varias instancias de ``StateFn``. Por ejemplo ``Cero, One, Plus, Minus``."

#: ../../tutorials/operators/01_operator_flow.ipynb:572
msgid "``Zero`` and ``One`` represent the quantum states :math:`|0\\rangle` and :math:`|1\\rangle`. They are represented via ``DictStateFn``."
msgstr "``Zero`` y ``One`` representan los estados cuánticos :math:`|0\\rangle` and :math:`|1\\rangle`. Están representados a través de ``DictStateFn``."

#: ../../tutorials/operators/01_operator_flow.ipynb:612
msgid "``Plus`` and ``Minus``, representing states :math:`(|0\\rangle + |1\\rangle)/\\sqrt{2}` and :math:`(|0\\rangle - |1\\rangle)/\\sqrt{2}` are represented via circuits. ``H`` is a synonym for ``Plus``."
msgstr "``Plus`` y ``Minus``, representan los estados :math:`(|0\\rangle + |1\\rangle)/\\sqrt{2}` and :math:`(|0\\rangle - |1\\rangle)/\\sqrt{2}` son representados a través de circuitos. ``H`` es un sinónimo para ``Plus``."

#: ../../tutorials/operators/01_operator_flow.ipynb:668
msgid "Indexing into quantum states is done with the ``eval`` method. These examples return the coefficients of the ``0`` and ``1`` basis states. (Below, we will see that the ``eval`` method is used for other computations, as well.)"
msgstr "La indexación de estados cuánticos se realiza con el método ``eval``. Estos ejemplos devuelven los coeficientes de los estados base ``0`` y ``1``. (Abajo, podemos ver que el método ``eval`` también se utiliza para realizar otros cálculos.)"

#: ../../tutorials/operators/01_operator_flow.ipynb:720
msgid "The dual vector of a quantum state, that is the *bra* corresponding to a *ket* is obtained via the ``adjoint`` method. The ``StateFn`` carries a flag ``is_measurement``, which is ``False`` if the object is a ket and ``True`` if it is a bra."
msgstr "El vector dual de un estado cuántico, que es la *bra* correspondiente de un *ket* se obtiene mediante el método ``adjoint``. ``StateFn`` lleva una bandera ``is_measurement``, que es ``False`` si el objeto es un ket y ``True`` si es una bra."

#: ../../tutorials/operators/01_operator_flow.ipynb:731
msgid "Here, we construct :math:`\\langle 1 |`."
msgstr "Aquí, construimos :math:` \\langle 1 | `."

#: ../../tutorials/operators/01_operator_flow.ipynb:772
msgid "For convenience, one may obtain the dual vector with a tilde, like this"
msgstr "Por comodidad, se puede obtener el vector dual con una tilde, de la siguiente manera"

#: ../../tutorials/operators/01_operator_flow.ipynb:814
msgid "Algebraic operations and predicates"
msgstr "Operaciones algebraicas y predicados"

#: ../../tutorials/operators/01_operator_flow.ipynb:816
msgid "Many algebraic operations and predicates between ``StateFn``\\ s are supported, including: \\* ``+`` - addition \\* ``-`` - subtraction, negation (scalar multiplication by -1) \\* ``*`` - scalar multiplication \\* ``/`` - scalar division \\* ``@`` - composition \\* ``^`` - tensor product or tensor power (tensor with self n times) \\* ``**`` - composition power (compose with self n times) \\* ``==`` - equality \\* ``~`` - adjoint, alternating between a State Function and Measurement"
msgstr "Muchas operaciones algebraicas y predicados entre ``StateFn`` son soportadas, incluyendo: \\* ``+`` - suma \\* ``-`` - resta, negación (multiplicación escalar por -1) \\* ``*`` - multiplicación escalar \\* ``/`` - división escalar \\* ``@`` - composición \\* ``^`` - producto tensorial o potencia tensorial (tensor por si mismo n veces) \\* ``**`` - potencia de composición (composición con sigo mismo n veces) \\* ``==`` - igualdad \\* ``~`` - adjunto, alternando entre una función de estado y medición"

#: ../../tutorials/operators/01_operator_flow.ipynb:818
msgid "Be aware that parentheses are often neccessary to override **operator precedence**."
msgstr "Ten en cuenta que los paréntesis son a menudo necesarios para anular la **precedencia de operador**."

#: ../../tutorials/operators/01_operator_flow.ipynb:829
msgid "``StateFn``\\ s carry a coefficient. This allows us multiply states by a scalar, and so to construct sums."
msgstr "``StateFn`` lleva un coeficiente. Esto nos permite multiplicar estados por un escalar, y de esta forma la posibilidad de construir sumas."

#: ../../tutorials/operators/01_operator_flow.ipynb:840
msgid "Here, we construct :math:`(2 + 3i)|0\\rangle`."
msgstr "Aquí construimos :math:`(2 + 3i)|0\\rangle`."

#: ../../tutorials/operators/01_operator_flow.ipynb:881
msgid "Here, we see that adding two ``DictStateFn``\\ s returns an object of the same type. We construct :math:`|0\\rangle + |1\\rangle`."
msgstr "Aquí vemos que al añadir dos ``DictStateFn`` se devuelve un objeto del mismo tipo. Construimos :math:`|0\\rangle + |1\\rangle`."

#: ../../tutorials/operators/01_operator_flow.ipynb:921
msgid "Note that you must normalize states by hand. For example, to construct :math:`(|0\\rangle + |1\\rangle)/\\sqrt{2}`, we write"
msgstr "Ten en cuenta que debes normalizar los estados a mano. Por ejemplo, para construir :math:`(|0\\rangle + |1\\rangle)/\\sqrt{2}` escribimos"

#: ../../tutorials/operators/01_operator_flow.ipynb:964
msgid "In other cases, the result is a symbolic representation of a sum. For example, here is a representation of :math:`|+\\rangle + |-\\rangle`."
msgstr "En otros casos, el resultado es una representación simbólica de una suma. Por ejemplo, aquí hay una representación de :math:`|+\\rangle + |-\\rangle`."

#: ../../tutorials/operators/01_operator_flow.ipynb:1026
msgid "The composistion operator is used to perform an inner product, which by default is held in an unevaluated form. Here is a representation of :math:`\\langle 1 | 1 \\rangle`."
msgstr "El operador de composición se utiliza para realizar un producto interno, que por defecto se mantiene en una forma no evaluada. Ejemplo: :math:`\\langle 1 | 1 \\rangle`."

#: ../../tutorials/operators/01_operator_flow.ipynb:1072
msgid "Note that the ``is_measurement`` flag causes the (bra) state ``~One`` to be printed ``DictMeasurement``."
msgstr "Ten en cuenta que la bandera ``is_measurement`` causa que el estado (bra) ``~One`` sea impreso ``DictMeasurement``."

#: ../../tutorials/operators/01_operator_flow.ipynb:1083
msgid "Symbolic expressions may be evaluated with the ``eval`` method."
msgstr "Las expresiones simbólicas pueden ser evaluadas con el método ``eval``."

#: ../../tutorials/operators/01_operator_flow.ipynb:1154
msgid "Here is :math:`\\langle - | 1 \\rangle = \\langle (\\langle 0| - \\langle 1|)/\\sqrt{2} | 1\\rangle`."
msgstr "Aquí se muestra :math:`\\langle - | 1 \\rangle = \\langle (\\langle 0| - \\langle 1|)/\\sqrt{2} | 1\\rangle`."

#: ../../tutorials/operators/01_operator_flow.ipynb:1195
msgid "The composition operator ``@`` is equivalent to calling the ``compose`` method."
msgstr "El operador de composición ``@`` es equivalente a llamar al método ``compose``."

#: ../../tutorials/operators/01_operator_flow.ipynb:1241
msgid "Inner products may also be computed using the ``eval`` method directly, without constructing a ``ComposedOp``."
msgstr "Los productos internos también pueden ser evaluados usando el método ``eval`` directamente, sin necesidad de construir un ``ComposedOp``."

#: ../../tutorials/operators/01_operator_flow.ipynb:1282
msgid "Symbolic tensor products are constructed as follows. Here is :math:`|0\\rangle \\otimes |+\\rangle`."
msgstr "Los productos tensoriales simbólicos se construyen de la siguiente manera. Aquí se muestra :math:`|0\\rangle \\otimes |+\\rangle`."

#: ../../tutorials/operators/01_operator_flow.ipynb:1336
msgid "This may be represented as a simple (not compound) ``CircuitStateFn``."
msgstr "Esto puede ser representado como un ``CircuitStateFn`` (simple, no compuesto)."

#: ../../tutorials/operators/01_operator_flow.ipynb:1388
msgid "Tensor powers are constructed using the caret ``^`` as follows. Here are :math:`600 (|11111\\rangle + |00000\\rangle)`, and :math:`|10\\rangle^{\\otimes 3}`."
msgstr "Las potencias tensoriales se construyen utilizando el caret (acento circunflejo) ``^`` de la siguiente manera. Ejemplos: :math:`600 (|11111\\rangle + |00000\\rangle)`, y :math:`|10\\rangle^{\\otimes 3}`."

#: ../../tutorials/operators/01_operator_flow.ipynb:1431
msgid "The method ``to_matrix_op`` converts to ``VectorStateFn``."
msgstr "El método ``to_matrix_op`` convierte a ``VectorStateFn``."

#: ../../tutorials/operators/01_operator_flow.ipynb:1509
msgid "Constructing a StateFn is easy. The ``StateFn`` class also serves as a factory, and can take any applicable primitive in its constructor and return the correct StateFn subclass. Currently the following primitives can be passed into the constructor, listed alongside the ``StateFn`` subclass they produce:"
msgstr "Construir un StateFn es sencillo. La clase ``StateFn`` también sirve como una fábrica, y puede tomar cualquier primitiva valida en su constructor y devolver la subclase StateFn correcta. Actualmente se pueden pasar las siguientes primitivas al constructor, listadas junto a la subclase ``StateFn`` que producen:"

#: ../../tutorials/operators/01_operator_flow.ipynb:1511
msgid "str (equal to some basis bitstring) -> DictStateFn"
msgstr "str (igual a alguna base de bitstring) -> DictStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1512
msgid "dict -> DictStateFn"
msgstr "dict -> DictStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1513
msgid "Qiskit Result object -> DictStateFn"
msgstr "Qiskit Result object -> DictStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1514
msgid "list -> VectorStateFn"
msgstr "list-> VectorStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1515
msgid "np.ndarray -> VectorStateFn"
msgstr "np.ndarray -> VectorStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1516
msgid "Statevector -> VectorStateFn"
msgstr "Statevector -> VectorStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1517
msgid "QuantumCircuit -> CircuitStateFn"
msgstr "QuantumCircuit-> CircuitStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1518
msgid "Instruction -> CircuitStateFn"
msgstr "Instruction -> CircuitStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1519
msgid "OperatorBase -> OperatorStateFn"
msgstr "OperatorBase -> OperatorStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1586
msgid "Part II: ``PrimitiveOp``\\ s"
msgstr "Parte II: ``PrimitiveOp``"

#: ../../tutorials/operators/01_operator_flow.ipynb:1588
msgid "The basic Operators are subclasses of ``PrimitiveOp``. Just like ``StateFn``, ``PrimitiveOp`` is also a factory for creating the correct type of ``PrimitiveOp`` for a given primitive. Currently, the following primitives can be passed into the constructor, listed alongside the ``PrimitiveOp`` subclass they produce:"
msgstr "Los operadores básicos son subclases de ``PrimitiveOp``. Al igual que ``StateFn``, ``PrimitiveOp`` también es una fábrica para crear el tipo correcto de ``PrimitiveOp`` para una primitiva dada. Actualmente, las siguientes primitivas pueden pasarse al constructor, listadas junto a la subclase ``PrimitiveOp`` producen:"

#: ../../tutorials/operators/01_operator_flow.ipynb:1590
msgid "Terra’s Pauli -> PauliOp"
msgstr "Terra’s Pauli -> PauliOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1591
msgid "Instruction -> CircuitOp"
msgstr "Instruction -> CircuitOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1592
msgid "QuantumCircuit -> CircuitOp"
msgstr "QuantumCircuit -> CircuitOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1593
msgid "2d List -> MatrixOp"
msgstr "2d List -> MatrixOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1594
msgid "np.ndarray -> MatrixOp"
msgstr "np.ndarray -> MatrixOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1595
msgid "spmatrix -> MatrixOp"
msgstr "spmatrix -> MatrixOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1596
msgid "Terra’s quantum_info.Operator -> MatrixOp"
msgstr "Terra’s quantum_info.Operator -> MatrixOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1618
msgid "Matrix elements"
msgstr "Elementos de matriz"

#: ../../tutorials/operators/01_operator_flow.ipynb:1629
msgid "The ``eval`` method returns a column from an operator. For example, the Pauli :math:`X` operator is represented by a ``PauliOp``. Asking for a column returns an instance of the sparse representaion, a ``DictStateFn``."
msgstr "El método ``eval`` devuelve una columna de un operador. Por ejemplo, el operador de Pauli :math:`X` es representado por un ``PauliOp``. Si se solicita una columna se retorna una instancia de la representación dispersa, un ``DictStateFn``."

#: ../../tutorials/operators/01_operator_flow.ipynb:1699
msgid "It follows that indexing into an operator, that is obtaining a matrix element, is performed with two calls to the ``eval`` method."
msgstr "Podemos ver entonces que la indexación en un operador, es decir, la obtención de un elemento de una matriz, se realiza con dos llamadas al método ``eval``."

#: ../../tutorials/operators/01_operator_flow.ipynb:1710
msgid "We have :math:`X = \\left(\\begin{matrix} 0 & 1 \\\\  1 & 0  \\end{matrix} \\right)`. And the matrix element :math:`\\left\\{X \\right\\}_{0,1}` is"
msgstr "Tenemos :math:`X = \\left(\\begin{matrix} 0 & 1 \\\\  1 & 0  \\end{matrix} \\right)`. Y el elemento :math:`\\left\\{X \\right\\}_{0,1}` de la matriz es"

#: ../../tutorials/operators/01_operator_flow.ipynb:1751
msgid "Here is an example using the two qubit operator ``CX``, the controlled ``X``, which is represented by a circuit."
msgstr "Aquí se muestra un ejemplo usando el operador de dos cúbits ``CX``, que es el operador ``X`` controlado, y su representación en un circuito."

#: ../../tutorials/operators/01_operator_flow.ipynb:1871
msgid "Applying an operator to a state vector"
msgstr "Aplicando un operador a un vector de estado"

#: ../../tutorials/operators/01_operator_flow.ipynb:1882
msgid "Applying an operator to a state vector may be done with the ``compose`` method (equivalently, ``@`` operator). Here is a representation of :math:`X | 1 \\rangle = |0\\rangle`."
msgstr "La aplicación de un operador a un vector de estado puede hacerse con el método ``compose`` (o equivalentemente, el operador ``@``). Aquí está una representación de :math:`X | 1 \\rangle = |0\\rangle`."

#: ../../tutorials/operators/01_operator_flow.ipynb:1928
msgid "A simpler representation, the ``DictStateFn`` representation of :math:`|0\\rangle`, is obtained with ``eval``."
msgstr "Una representación más simple, la representación ``DictStateFn`` de :math:`|0\\rangle`, se obtiene con ``eval``."

#: ../../tutorials/operators/01_operator_flow.ipynb:1969
msgid "The intermediate ``ComposedOp`` step may be avoided by using ``eval`` directly."
msgstr "El paso intermedio ``ComposedOp`` puede evitarse si se utiliza ``eval`` directamente."

#: ../../tutorials/operators/01_operator_flow.ipynb:2010
msgid "Composition and tensor products of operators are effected with ``@`` and ``^``. Here are some examples."
msgstr "Los productos tensoriales y de composición de los operadores se aplican con ``@`` y ``^``. Aquí se muestran algunos ejemplos."

#: ../../tutorials/operators/01_operator_flow.ipynb:2164
msgid "Part III ``ListOp`` and subclasses"
msgstr "Parte III ``ListOp`` y subclases"

#: ../../tutorials/operators/01_operator_flow.ipynb:2176
msgid "ListOp"
msgstr "ListOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:2178
msgid "``ListOp`` is a container for effectively vectorizing operations over a list of operators and states."
msgstr "``ListOp`` es un contenedor para operaciones de vectorización sobre una lista de operadores y estados."

#: ../../tutorials/operators/01_operator_flow.ipynb:2238
msgid "For example, the composition above is distributed over the lists (``ListOp``) using the simplification method ``reduce``."
msgstr "Por ejemplo, la composición anterior se distribuye sobre las listas (``ListOp``) utilizando el método de simplificación ``reduce``."

#: ../../tutorials/operators/01_operator_flow.ipynb:2321
msgid "ListOps: ``SummedOp``, ``ComposedOp``, ``TensoredOp``"
msgstr "ListOps: ``SummedOp``, ``ComposedOp``, ``TensoredOp``"

#: ../../tutorials/operators/01_operator_flow.ipynb:2323
msgid "``ListOp``, introduced above, is useful for vectorizing operations. But, it also serves as the superclass for list-like composite classes. If you’ve already played around with the above, you’ll notice that you can easily perform operations between ``OperatorBase``\\ s which we may not know how to perform efficiently in general (or simply haven’t implemented an efficient procedure for yet), such as addition between ``CircuitOp``\\ s. In those cases, you may receive a ``ListOp`` result (or subclass thereof) from your operation representing the lazy execution of the operation. For example, if you attempt to add together a ``DictStateFn`` and a ``CircuitStateFn``, you’ll receive a ``SummedOp`` representing the sum of the two. This composite State function still has a working ``eval`` (but may need to perform a non-scalable computation under the hood, such as converting both to vectors)."
msgstr "``ListOp``, mostrado arriba, es útil para operaciones de vectorización. Pero también sirve como la superclase para clases compuestas tipo lista. Si ya has jugado con lo anterior, notarás que puedes ejecutar operaciones fácilmente entre ``OperatorBase``, que puede que no sepamos como ejecutarlo de manera óptima en general (o simplemente no se haya implementado un procedimiento eficiente por el momento), tales como la adición entre varios ``CircuitOp``. En tales casos, puedes recibir un resultado ``ListOp`` (o su subclase) de la operación que representa la ejecución perezosa de la operación. Por ejemplo, si intentas agregar un ``DictStateFn`` y un ``CircuitStateFn``, recibirás un ``SummedOp`` que representa la suma de los dos. Esta función de estado compuesto todavía tiene un ``eval`` que funciona (pero puede tener que realizar un cálculo que no es escalable, tal como convertir ambos a vectores)."

#: ../../tutorials/operators/01_operator_flow.ipynb:2326
msgid "These composite ``OperatorBase``\\ s are how we construct increasingly complex and rich computation out of ``PrimitiveOp`` and ``StateFn`` building blocks."
msgstr "Los componentes ``OperatorBase`` son la forma en que construimos bloques cada vez más complejos y ricos de ``PrimitiveOp`` y ``StateFn``."

#: ../../tutorials/operators/01_operator_flow.ipynb:2328
msgid "Every ``ListOp`` has four properties: \\* ``oplist`` - The list of ``OperatorBase``\\ s which may represent terms, factors, etc. \\* ``combo_fn`` - The function taking a list of complex numbers to an output value which defines how to combine the outputs of the ``oplist`` items. For broadcasting simplicity, this function is defined over NumPy arrays. \\* ``coeff`` - A coefficient multiplying the primitive. Note that ``coeff`` can be int, float, complex or a free ``Parameter`` object (from ``qiskit.circuit`` in Terra) to be bound later using ``my_op.bind_parameters``. \\* ``abelian`` - Indicates whether the Operators in ``oplist`` are known to mutually commute (usually set after being converted by the ``AbelianGrouper`` converter)."
msgstr "Cada ``ListOp`` tiene cuatro propiedades: \\* ``oplist`` - La lista de ``OperatorBase`` que pueden representar términos, factores, etc. \\* ``combo_fn`` - La función toma una lista de números complejos a un valor de salida que define cómo combinar las salidas de los elementos ``oplist``. Para la simplicidad de la difusión, esta función se define sobre arreglos de NumPy. \\* ``coeff`` - Un coeficiente que multiplica la primitiva. Tenga en cuenta que ``coeff`` puede ser de tipo int, float, complejo o un objeto libre ``Parámetro`` (de ``qiskit.circuit`` en Terra) para ser vinculado más tarde utilizando ``my_op. ind_parameters``. \\* ``abelian`` - Indica si los operadores en ``oplist`` son conocidos por conmutar (generalmente establecido después de ser convertido por el conversor ``AbelianGrouper``)."

#: ../../tutorials/operators/01_operator_flow.ipynb:2331
msgid "Note that ``ListOp`` supports typical iteration overloads, so you can use indexing like ``my_op[4]`` to access the ``OperatorBase``\\ s in ``oplist``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2343
msgid "``OperatorStateFn``"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2345
msgid "We mentioned above that ``OperatorStateFn`` represents a density operator. But, if the ``is_measurement`` flag is ``True``, then ``OperatorStateFn`` represents an observable. The expectation value of this observable can then be constructed via ``ComposedOp``. Or, directly, using ``eval``. Recall that the ``is_measurement`` flag (property) is set via the ``adjoint`` method."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2356
msgid "Here we construct the observable corresponding to the Pauli :math:`Z` operator. Note that when printing, it is called ``OperatorMeasurement``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2418
msgid "Here, we compute :math:`\\langle 0 | Z | 0 \\rangle`, :math:`\\langle 1 | Z | 1 \\rangle`, and :math:`\\langle + | Z | + \\rangle`, where :math:`|+\\rangle = (|0\\rangle + |1\\rangle)/\\sqrt{2}`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2465
msgid "Part IV: Converters"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2467
msgid "Converters are classes that manipulate operators and states and perform building blocks of algorithms. Examples include changing the basis of operators and Trotterization. Converters traverse an expression and perform a particular manipulation or replacement, defined by the converter’s ``convert()`` method, of the Operators within. Typically, if a converter encounters an ``OperatorBase`` in the recursion which is irrelevant to its conversion purpose, that ``OperatorBase`` is left unchanged."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2492
msgid "Evolutions, ``exp_i()``, and the ``EvolvedOp``"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2494
msgid "Every ``PrimitiveOp`` and ``ListOp`` has an ``.exp_i()`` function such that ``H.exp_i()`` corresponds to :math:`e^{-iH}`. In practice, only a few of these Operators have an efficiently computable exponentiation (such as MatrixOp and the PauliOps with only one non-identity single-qubit Pauli), so we need to return a placeholder, or symbolic representation, (similar to how ``SummedOp`` is a placeholder when we can’t perform addition). This placeholder is called ``EvolvedOp``, and it holds the ``OperatorBase`` to be exponentiated in its ``.primitive`` property."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2497
msgid "Qiskit operators fully support parameterization, so we can use a ``Parameter`` for our evolution time here. Notice that there’s no “evolution time” argument in any function. The Operator flow exponentiates whatever operator we tell it to, and if we choose to multiply the operator by an evolution time, :math:`e^{-iHt}`, that will be reflected in our exponentiation parameters."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2509
msgid "Weighted sum of Pauli operators"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2511
msgid "A Hamiltonian expressed as a linear combination of multi-qubit Pauli operators may be constructed like this."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2536
msgid "Note that ``two_qubit_H2`` is represented as a ``SummedOp`` whose terms are ``PauliOp``\\ s."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2588
msgid "Next, we multiply the Hamiltonian by a ``Parameter``. This ``Parameter`` is stored in the ``coeff`` property of the ``SummedOp``. Calling ``exp_i()`` on the result wraps it in ``EvolvedOp``, representing exponentiation."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2645
msgid "We construct ``h2_measurement``, which represents ``two_qubit_H2`` as an observable."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2698
msgid "We construct a Bell state :math:`|\\Phi_+\\rangle` via :math:`\\text{CX} (H\\otimes I) |00\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2751
msgid "Here is the expression :math:`H e^{-iHt} |\\Phi_+\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2836
msgid "Typically, we want to approximate :math:`e^{-iHt}` using two-qubit gates. We achieve this with the ``convert`` method of ``PauliTrotterEvolution``, which traverses expressions applying trotterization to all ``EvolvedOp``\\ s encountered. Although we use ``PauliTrotterEvolution`` here, there are other possibilities, such as ``MatrixEvolution``, which performs the exponentiation exactly."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2930
msgid "``trotterized_op`` contains a ``Parameter``. The ``bind_parameters`` method traverses the expression binding values to parameter names as specified via a ``dict``. In this case, there is only one parameter."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2951
msgid "``bound`` is a ``ComposedOp``. The second factor is the circuit. Let’s draw it to verify that the binding has taken place."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3066
msgid "Expectations"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3068
msgid "``Expectation``\\ s are converters that enable the computation of expectation values of observables. They traverse an Operator tree, replacing ``OperatorStateFn``\\ s (observables) with equivalent instructions which are more amenable to computation on quantum or classical hardware. For example, if we want to measure the expectation value of an Operator ``o`` expressed as a sum of Paulis with respect to some state function, but can only access diagonal measurements on quantum hardware, we can create an observable ``~StateFn(o)`` and use a ``PauliExpectation`` to convert it to a diagonal measurement and circuit pre-rotations to append to the state."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3071
msgid "Another interesting ``Expectation`` is the ``AerPauliExpectation``, which converts the observable into a ``CircuitStateFn`` containing a special expectation snapshot instruction which ``Aer`` can execute natively with high performance."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3162
msgid "By default ``group_paulis=True``, which will use the ``AbelianGrouper`` to convert the ``SummedOp`` into groups of mutually qubit-wise commuting Paulis. This reduces circuit execution overhead, as each group can share the same circuit execution."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3242
msgid "Note that converters act recursively, that is, they traverse an expression applying their action only where possible. So we can just convert our full evolution and measurement expression. We could have equivalently composed the converted ``h2_measurement`` with our evolution ``CircuitStateFn``. We proceed by applying the conversion on the entire expression."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3383
msgid "Now we bind multiple parameter values into a ``ListOp``, followed by ``eval`` to evaluate the entire expression. We could have used ``eval`` earlier if we bound earlier, but it would not be efficient. Here, ``eval`` will convert our ``CircuitStateFn``\\ s to ``VectorStateFn``\\ s through simulation internally."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3405
msgid "Here are the expectation values :math:`\\langle \\Phi_+| e^{iHt} H e^{-iHt} |\\Phi_+\\rangle` corresponding to the different values of the parameter."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3453
msgid "Executing ``CircuitStateFn``\\ s with the ``CircuitSampler``"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3455
msgid "The ``CircuitSampler`` traverses an Operator and converts any ``CircuitStateFns`` into approximations of the resulting state function by a ``DictStateFn`` or ``VectorStateFn`` using a quantum backend. Note that in order to approximate the value of the ``CircuitStateFn``, it must 1) send the state function through a depolarizing channel, which will destroy all phase information and 2) replace the sampled frequencies with **square roots** of the frequency, rather than the raw probability of sampling (which would be the equivalent of sampling the **square** of the state function, per the Born rule.)"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3504
msgid "Note again that the circuits are replaced by dicts with **square roots** of the circuit sampling probabilities. Take a look at one sub-expression before and after the conversion:"
msgstr ""

