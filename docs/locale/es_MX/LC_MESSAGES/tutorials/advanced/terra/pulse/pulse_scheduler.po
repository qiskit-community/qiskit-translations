msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-22 00:30+0000\n"
"PO-Revision-Date: 2020-04-22 00:46\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Spanish, Mexico\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Language: es-MX\n"
"X-Crowdin-File: /poBranch/docs/locale/en/LC_MESSAGES/tutorials/advanced/terra/pulse/pulse_scheduler.po\n"
"Language: es_MX\n"

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:9
msgid "Using the Scheduler"
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:11
msgid "The scheduler will translate a ``QuantumCircuit`` into a Pulse ``Schedule``, using gate and measurement *calibrations*: an optimized pulse-level description of an operation on particular qubits."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:13
msgid "Backends that are OpenPulse enabled will typically have calibrations defined for measurements and for each of its basis gates. Calibrations can also be defined or updated by the user."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:16
msgid "Basic usage"
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:18
msgid "To start, build a quantum circuit as you would normally. For our example below, we create a simple Bell state."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:97
msgid "We'll use the mocked backend, ``FakeAlmaden``, to demonstrate how to use the scheduler. It contains default calibrations for measurement and for its basis gates. The Hadamard operation is not one of those basis gates, so we use the transpiler to compile our input circuit to an equivalent circuit in terms of the basis gates of the device."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:118
msgid "Let's see how our schedule ``schedule`` built from the circuit ``transpiled_circ`` looks. (We select a range to plot because the measurement and acquire pulses are long.)"
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:141
msgid "That covers the basics! We used the transpiler to rewrite the circuit in terms of the basis gates, and then used the backend's default calibrations to schedule the transpiled circuit. Next we will go through scheduling with calibrations we will build ourselves."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:144
msgid "Scheduling with custom gate definitions"
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:146
msgid "Using the scheduler with Pulse, we are not restrained by the basis gates of the device. For instance, we can define a calibration for the Hadamard gate on qubit 0, which is used by our Bell state circuit. Our Hadamard will be a Gaussian pulse. In practice, the pulse shape and its parameters would be optimized through a series of Rabi experiments (see the `Qiskit Textbook <https://qiskit.org/textbook/ch-quantum-hardware/calibrating-qubits-openpulse.html>`__ for a walk through)."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:163
msgid "We add the ``h_q0`` calibration to the backend's existing ``InstructionScheduleMap`` containing the instruction calibration lookup. It has to be added by gate name -- here we use the standard gate name ``'h'`` -- and by qubit. **Remember that a gate calibrated on one qubit will not enact the same gate on another qubit.**"
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:182
msgid "Notice how this time, we were able to schedule ``circ``, which hasn't been transpiled, so it still has the Hadamard gate. The new ``h_q0`` calibration we added was used to schedule ``circ``."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:185
msgid "Building circuits with non-standard gates"
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:187
msgid "In the previous section, we added a native definition for a standard gate. In this section, we build a totally novel gate."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:189
msgid "The first step is to create a definition for it as a Pulse ``Schedule``. Below, we also demonstrate how these schedules can be built to accept parameters."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:221
msgid "We call our schedule operation ``'my_2q'``, and define it over qubits 0 and 1 as we add it to our calibrations."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:236
msgid "To prepare our circuit to use this definition, we need to create a new ``Gate`` with the same name that we defined above, ``'my_2q'``."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:253
msgid "Now, we can build our circuit. When we use the new gate, ``my_2q``, we ``append`` it to our circuit, and otherwise build the circuit normally."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:329
msgid "All of the operations in ``circ`` are defined in our ``inst_map``, so we could schedule it directly, but let's remove our qubit 0 Hadamard calibration so we can demonstrate how to use the transpiler with our novel 2Q gate."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:405
msgid "Now, we can schedule our ``transpiled_circ`` as we did before."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:431
msgid "Scheduler methods"
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:433
msgid "The scheduler can follow multiple routines. By default, it follows an *as late as possible* (ALAP) rule. Another scheduling method is *as soon as possible*, (ASAP). For both methods, the output schedule is minimal: in the longest-duration operation path of the input circuit, the start time of each operation is the end time of the proceeding operation. The methods determine how to schedule operations outside that longest path."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:435
msgid "This is made clear through an example:"
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:473
msgid "For our mocked backend, these :math:`X` gate operations are each the same duration (``duration = 160 dt``). For the schedule to be minimal, the two :math:`X` operations on qubit 0 will be scheduled back-to-back, and the measurement pulse will immediately follow the second of those pulses."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:475
msgid "ALAP will choose the latest valid time to schedule lesser-constrained operations, so the :math:`X` gate on qubit 1 will play in sync with the second :math:`X` gate on qubit 0."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:500
msgid "On the other hand, as the name suggests, ASAP will schedule operations as soon as its resources are free. Thus, the :math:`X` gate on qubit 1 will be scheduled at ``time=0``, in sync with the first :math:`X` gate on qubit 0."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/pulse_scheduler.ipynb:525
msgid "ALAP is the default because it allows qubits to remain idle as long as possible. In this case, the difference between ALAP and ASAP may be negligible, but in ALAP, qubit 0 has *no* time to decay from the excited state before measurement."
msgstr ""

