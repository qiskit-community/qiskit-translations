msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-14 09:35+0000\n"
"PO-Revision-Date: 2020-09-09 15:46\n"
"Last-Translator: \n"
"Language-Team: Spanish, Mexico\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-MX\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/2_operators_overview.po\n"
"X-Crowdin-File-ID: 9124\n"
"Language: es_MX\n"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:10
msgid "This page was generated from `tutorials/circuits_advanced/2_operators_overview.ipynb`__."
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:9
msgid "Operators"
msgstr "Operadores"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:39
msgid "Operator Class"
msgstr "Clase de Operador"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:41
msgid "The ``Operator`` class is used in Qiskit to represent matrix operators acting on a quantum system. It has several methods to build composite operators using tensor products of smaller operators, and to compose operators."
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:44
msgid "Creating Operators"
msgstr "Creando Operadores"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:46
msgid "The easiest way to create an operator object is to initialize it with a matrix given as a list or a Numpy array. For example, to create a two-qubit Pauli-XX operator:"
msgstr "La forma más fácil de crear un objeto operador es inicializarlo con una matriz dada como una lista o un arreglo Numpy. Por ejemplo, para crear un operador Pauli-XX de dos qubits:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:97
msgid "Operator Properties"
msgstr "Propiedades del Operador"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:99
msgid "The operator object stores the underlying matrix, and the input and output dimension of subsystems."
msgstr "El objeto ``operator`` almacena la matriz subyacente, al igual que las dimensiones de entrada y salida de los subsistemas."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:101
msgid "``data``: To access the underly Numpy array, we may use the ``Operator.data`` property."
msgstr "``data``: Para acceder a la matriz de Numpy subyacente, podemos usar la propiedad ``Operator.data``."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:102
msgid "``dims``: To return the total input and output dimension of the operator, we may use the ``Operator.dim`` property. *Note: the output is returned as a tuple ``(input_dim, output_dim)``, which is the reverse of the shape of the underlying matrix.*"
msgstr "``dims``: Para obtener las dimensiones de entrada y salida del operador, podemos utilizar la propiedad ``Operator.dim``. *Nota: la salida es una tupla ``(input_dim, output_dim)``, que corresponde al orden inverso de columnas y filas de la matriz subyacente.*"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:181
msgid "Input and Output Dimensions"
msgstr "Dimensiones de entrada y salida"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:183
msgid "The operator class also keeps track of subsystem dimensions, which can be used for composing operators together. These can be accessed using the ``input_dims`` and ``output_dims`` functions."
msgstr "La clase ``operator`` también realiza un seguimiento de las dimensiones del subsistema, que pueden utilizarse para componer operadores. Se puede acceder a ellas utilizando las funciones `` input_dims `` y `` output_dims ``."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:185
msgid "For :math:`2^N` by :math:`2^M` operators, the input and output dimension will be automatically assumed to be M-qubit and N-qubit:"
msgstr "Para los operadores de dimensiones :math:`2^N` por :math:`2^M`, la dimensión de entrada y salida se asumirá automáticamente como M-qubit y N-qubit:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:229
msgid "If the input matrix is not divisible into qubit subsystems, then it will be stored as a single-qubit operator. For example, if we have a :math:`6\\times6` matrix:"
msgstr "Si la matriz de entrada no es divisible en subsistemas de qubits, será guardada como un operador de un solo qubit. Por ejemplo, si tenemos una matriz de :math:`6\\times6`:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:273
msgid "The input and output dimension can also be manually specified when initializing a new operator:"
msgstr "La dimensión de entrada y salida también se puede especificar manualmente al inicializar un operador nuevo:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:353
msgid "We can also extract just the input or output dimensions of a subset of subsystems using the ``input_dims`` and ``output_dims`` functions:"
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:397
msgid "Converting classes to Operators"
msgstr "Conversión de clases a Operadores"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:399
msgid "Several other classes in Qiskit can be directly converted to an ``Operator`` object using the operator initialization method. For example:"
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:401
msgid "``Pauli`` objects"
msgstr "Objetos ``Pauli``"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:402
msgid "``Gate`` and ``Instruction`` objects"
msgstr "Objetos ``Gate`` e ``Instruction``"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:403
msgid "``QuantumCircuits`` objects"
msgstr "Los objetos ``QuantumCircuits``"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:405
msgid "Note that the last point means we can use the ``Operator`` class as a unitary simulator to compute the final unitary matrix for a quantum circuit, without having to call a simulator backend. If the circuit contains any unsupported operations, an exception will be raised. Unsupported operations are: measure, reset, conditional operations, or a gate that does not have a matrix definition or decomposition in terms of gate with matrix definitions."
msgstr "Note que el último punto significa que podemos usar la clase ``Operator`` como un simulador unitario para calculcar la matriz unitaria final de un circuito cuántico, sin tener que llamar a un backend de simulación. Si el circuito contiene alguna operación no soportada, la función generará una excepción. Las operaciones no soportadas son: medición, reset, operaciones condicionales o alguna compuerta que no tenga una definición matricial o descomposición en términos de compuertas con definiciones matriciales."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:595
msgid "Using Operators in circuits"
msgstr "Uso de operadores en circuitos"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:597
msgid "Unitary ``Operators`` can be directly inserted into a ``QuantumCircuit`` using the ``QuantumCircuit.append`` method. This converts the ``Operator`` into a ``UnitaryGate`` object, which is added to the circuit."
msgstr "Los ``Operators``unitarios pueden ser insertados directamente a un ``QuantumCircuit``utilizando el método ``QuantumCircuit.append``. Esto convierte al objeto ``Operator``en un objeto ``UnitaryGate``, el cual se añade al circuito."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:599
msgid "If the operator is not unitary, an exception will be raised. This can be checked using the ``Operator.is_unitary()`` function, which will return ``True`` if the operator is unitary and ``False`` otherwise."
msgstr "Si el operador no es unitario, se levantará una excepción. Esto puede ser revisado preliminarmente utilizando la función ``Operator.is_unitary()``, la cual devolverá ``True`` si el operador es unitario y ``False`` si no."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:636
msgid "Note that in the above example we initialize the operator from a ``Pauli`` object. However, the ``Pauli`` object may also be directly inserted into the circuit itself and will be converted into a sequence of single-qubit Pauli gates:"
msgstr "Note que en ejemplo anterior inicializamos el operador desde un objeto ``Pauli``. Sin embargo, el objeto ``Pauli`` también puede ser insertado directamente en el circuito y será convertido en una secuencia de compuertas de Pauli de un solo qubit:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:745
msgid "Combining Operators"
msgstr "Combinación de operadores"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:747
msgid "Operators my be combined using several methods."
msgstr "Los operadores pueden ser combinados utilizando varios métodos."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:750
msgid "Tensor Product"
msgstr "Producto tensorial"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:752
msgid "Two operators :math:`A` and :math:`B` may be combined into a tensor product operator :math:`A\\otimes B` using the ``Operator.tensor`` function. Note that if both A and B are single-qubit operators, then ``A.tensor(B)`` = :math:`A\\otimes B` will have the subsystems indexed as matrix B on subsystem 0, and matrix :math:`A` on subsystem 1."
msgstr "Dos operadores :math:`A` y :math:`B` pueden ser combinados en un operador que resulta del producto tensorial :math:`A\\otimes B` utilizando la función `Operator.tensor`. Tenga en cuenta que si A y B son ambos operadores de un solo qubit, entonces ``A.tensor(B)`` = :math:`A\\otimes B`A\\otimes B` tendrá los subsistemas indexados como matriz B en el subsistema 0, y matriz :math:`A` en el subsistema 1."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:804
msgid "Tensor Expansion"
msgstr "Expansión Tensorial"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:806
msgid "A closely related operation is ``Operator.expand``, which acts like a tensor product but in the reverse order. Hence, for two operators :math:`A` and :math:`B` we have ``A.expand(B)`` = :math:`B\\otimes A` where the subsystems indexed as matrix A on subsystem 0, and matrix :math:`B` on subsystem 1."
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:858
msgid "Composition"
msgstr "Composición"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:860
msgid "We can also compose two operators :math:`A` and :math:`B` to implement matrix multiplication using the ``Operator.compose`` method. We have that ``A.compose(B)`` returns the operator with matrix :math:`B.A`:"
msgstr "También podemos componer dos operadores :math:`A`y :math:`B` para implemetar la multiplicación matricial utilizando el método ``Operator.compose``. Por lo tanto, ``A.compose(B)``devuelve el operador correspondiente a la matriz :math:`B.A`:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:907
msgid "We can also compose in the reverse order by applying :math:`B` in front of :math:`A` using the ``front`` kwarg of ``compose``: ``A.compose(B, front=True)`` = :math:`A.B`:"
msgstr "También podemos componer en orden inverso aplicando :math:`B` delante de :math:`A` usando el argumento (kwarg) ``front`` de ``compose``: ``A. compose(B, front=True)`` = :math:`A.B`:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:955
msgid "Subsystem Composition"
msgstr "Composición de subsistemas"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:957
msgid "Note that the previous compose requires that the total output dimension of the first operator :math:`A` is equal to total input dimension of the composed operator :math:`B` (and similarly, the output dimension of :math:`B` must be equal to the input dimension of :math:`A` when composing with ``front=True``)."
msgstr "Note que las composiciones vistas anteriormente se requiere que la dimensión de salida del primer operador :math:`A` sea igual a la dimensión de entrada del operador :math:`B` (y de manera análoga, la dimensión de salida de :math:`B`debe ser igual a la dimensión de entrada de :math:`A` cuando se compone utilizando la opción ``front=True``)."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:959
msgid "We can also compose a smaller operator with a selection of subsystems on a larger operator using the ``qargs`` kwarg of ``compose``, either with or without ``front=True``. In this case, the relevant input and output dimensions of the subsystems being composed must match. *Note that the smaller operator must always be the argument of ``compose`` method.*"
msgstr "También podemos componer un operador más pequeño con una selección de subsistemas en un operador más grande usando el kwarg ``qargs`` del método ``compose``, ya sea con o sin ``front=True``. En este caso, las dimensiones de entrada y salida de los subsistemas que están siendo compuestos deben coincidir. *Tenga en cuenta que el operador más pequeño siempre debe ser el argumento del método ``compose``.*"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:961
msgid "For example, to compose a two-qubit gate with a three-qubit Operator:"
msgstr "Por ejemplo, para componer una compuerta de dos qubits con un operador de tres qubits:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1103
msgid "Linear combinations"
msgstr "Combinaciones lineales"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1105
msgid "Operators may also be combined using standard linear operators for addition, subtraction and scalar multiplication by complex numbers."
msgstr "Los operadores también pueden ser combinados usando las operaciones estándar de suma, resta y multiplicación escalar por un número complejo."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1159
msgid "An important point is that while ``tensor``, ``expand`` and ``compose`` will preserve the unitarity of unitary operators, linear combinations will not; hence, adding two unitary operators will, in general, result in a non-unitary operator:"
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1201
msgid "Implicit Conversion to Operators"
msgstr "Conversión implícita a operadores"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1203
msgid "Note that for all the following methods, if the second object is not already an ``Operator`` object, it will be implicitly converted into one by the method. This means that matrices can be passed in directly without being explicitly converted to an ``Operator`` first. If the conversion is not possible, an exception will be raised."
msgstr "Note que para todos lo métodos siguientes, si el segundo objeto no es del tipo ``Operator``, el método lo convertirá implicitamente a uno de ese tipo. Esto significa que se pueden pasar directamente objetos de tipo matriz como argumento, sin tener que convertirlas a un ``Operator`` anteriormente. Si la conversión no es posible, se generará una excepción."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1250
msgid "Comparison of Operators"
msgstr "Comparación entre operadores"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1252
msgid "Operators implement an equality method that can be used to check if two operators are approximately equal."
msgstr "Los operadores implementan un método de igualdad que puede ser utilizado para verificar si dos operadores son aproximadamente iguales."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1293
msgid "Note that this checks that each matrix element of the operators is approximately equal; two unitaries that differ by a global phase will not be considered equal:"
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1335
msgid "Process Fidelity"
msgstr "Fidelidad de Proceso"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1337
msgid "We may also compare operators using the ``process_fidelity`` function from the *Quantum Information* module. This is an information theoretic quantity for how close two quantum channels are to each other, and in the case of unitary operators it does not depend on global phase."
msgstr ""

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1383
msgid "Note that process fidelity is generally only a valid measure of closeness if the input operators are unitary (or CP in the case of quantum channels), and an exception will be raised if the inputs are not CP."
msgstr "Tenga en cuenta que la fidelidad de proceso es generalmente sólo una medida válida de proximidad si los operadores de entrada son unitarios (o CP en el caso de canales cuánticos), y se generará una excepción si las entradas no son CP."

