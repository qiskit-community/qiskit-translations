msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-08 17:23+0000\n"
"PO-Revision-Date: 2021-03-18 20:54\n"
"Last-Translator: \n"
"Language-Team: Spanish, Mexico\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-MX\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/finance/03_european_call_option_pricing.po\n"
"X-Crowdin-File-ID: 9346\n"
"Language: es_MX\n"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:10
msgid "This page was generated from `tutorials/finance/03_european_call_option_pricing.ipynb`__."
msgstr "Esta página fue generada a partir de `tutorials/finance/03_european_call_option_pricing.ipynb`__."

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/finance/03_european_call_option_pricing.ipynb>`_."
msgstr "Puedes correr esta sección de manera interactiva en el `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/finance/03_european_call_option_pricing.ipynb>`_."

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:9
msgid "*Pricing European Call Options*"
msgstr ""

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:21
msgid "Introduction"
msgstr "Introducción"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:23
msgid "Suppose a European call option with strike price :math:`K` and an underlying asset whose spot price at maturity :math:`S_T` follows a given random distribution. The corresponding payoff function is defined as:"
msgstr "Suponga una opción de compra europea con precio de ejercicio :math:`K` y un activo subyacente cuyo precio al contado al vencimiento :math:`S_T` sigue una distribución aleatoria dada. La función de pago correspondiente se define como:"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:25
msgid "\\max\\{S_T - K, 0\\}\n\n"
msgstr ""

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:27
msgid "In the following, a quantum algorithm based on amplitude estimation is used to estimate the expected payoff, i.e., the fair price before discounting, for the option:"
msgstr "En lo siguiente, se utiliza un algoritmo cuántico basado en la estimación de amplitud para estimar el pago esperado, es decir, el precio justo antes del descuento, para la opción:"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:29
msgid "\\mathbb{E}\\left[ \\max\\{S_T - K, 0\\} \\right]\n\n"
msgstr ""

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:31
msgid "as well as the corresponding :math:`\\Delta`, i.e., the derivative of the option price with respect to the spot price, defined as:"
msgstr ""

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:33
msgid "\\Delta = \\mathbb{P}\\left[S_T \\geq K\\right]"
msgstr ""

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:38
msgid "The approximation of the objective function and a general introduction to option pricing and risk analysis on quantum computers are given in the following papers:"
msgstr "La aproximación de la función objetivo y una introducción general a la cotización de opciones y análisis de riesgos en computadoras cuánticas están dadas en los siguientes artículos:"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:40
msgid "Quantum Risk Analysis. Woerner, Egger. 2018."
msgstr ""

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:41
msgid "Option Pricing using Quantum Computers. Stamatopoulos et al. 2019."
msgstr ""

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:69
msgid "Uncertainty Model"
msgstr "Modelo de incertidumbre"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:71
msgid "We construct a circuit factory to load a log-normal random distribution into a quantum state. The distribution is truncated to a given interval :math:`[\\text{low}, \\text{high}]` and discretized using :math:`2^n` grid points, where :math:`n` denotes the number of qubits used. The unitary operator corresponding to the circuit factory implements the following:"
msgstr "Construimos una fábrica de circuitos para cargar una distribución aleatoria log-normal en un estado cuántico. La distribución está truncada a un intervalo dado :math:`[\\text{low}, \\text{high}]` y discretizada utilizando :math:`2^n` puntos de cuadrícula, donde :math:`n` denota el número de qubits utilizados. El operador unitario correspondiente a la fábrica de circuitos implementa lo siguiente:"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:73
msgid "\\big|0\\rangle_{n} \\mapsto \\big|\\psi\\rangle_{n} = \\sum_{i=0}^{2^n-1} \\sqrt{p_i}\\big|i\\rangle_{n},\n\n"
msgstr ""

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:75
msgid "where :math:`p_i` denote the probabilities corresponding to the truncated and discretized distribution and where :math:`i` is mapped to the right interval using the affine map:"
msgstr "donde :math:`p_i` denota las probabilidades correspondientes a la distribución truncada y discretizada y donde :math:`i` está asignado al intervalo correcto utilizando la asignación afín:"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:77
msgid "\\{0, \\ldots, 2^n-1\\} \\ni i \\mapsto \\frac{\\text{high} - \\text{low}}{2^n - 1} * i + \\text{low} \\in [\\text{low}, \\text{high}].\n\n"
msgstr "\\{0, \\ldots, 2^n-1\\} \\ni i \\mapsto \\frac{\\text{high} - \\text{low}}{2^n - 1} * i + \\text{low} \\in [\\text{low}, \\text{high}].\n\n"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:148
msgid "Payoff Function"
msgstr "Función de pago"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:150
msgid "The payoff function equals zero as long as the spot price at maturity :math:`S_T` is less than the strike price :math:`K` and then increases linearly. The implementation uses a comparator, that flips an ancilla qubit from :math:`\\big|0\\rangle` to :math:`\\big|1\\rangle` if :math:`S_T \\geq K`, and this ancilla is used to control the linear part of the payoff function."
msgstr "La función de pago es igual a cero mientras el precio de contado al vencimiento :math:`S_T` es menor al precio de ejercicio :math:`K` y luego se incrementa linealmente. La implementación utiliza un comparador, que invierte un qubit ancilla de :math:`\\big|0\\rangle` a :math:`\\big|1\\rangle` si :math:`S_T \\geq K`, y esta ancilla se utiliza para controlar la parte lineal de la función de pago."

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:152
msgid "The linear part itself is then approximated as follows. We exploit the fact that :math:`\\sin^2(y + \\pi/4) \\approx y + 1/2` for small :math:`|y|`. Thus, for a given approximation rescaling factor :math:`c_\\text{approx} \\in [0, 1]` and :math:`x \\in [0, 1]` we consider"
msgstr "La parte lineal en sí es entonces aproximada de la siguiente manera. Explotamos el hecho de que :math:`\\sin^2(y + \\pi/4) \\approx y + 1/2` para pequeños :math:`|y|`. Por lo tanto, para un factor de reescalado de aproximación dado :math:`c_\\text{approx} \\in [0, 1]` y :math:`x \\in [0, 1]` consideramos"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:154
msgid "\\sin^2( \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + \\pi/4) \\approx \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + 1/2\n\n"
msgstr "\\sin^2( \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + \\pi/4) \\approx \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + 1/2\n\n"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:156
msgid "\\ for small :math:`c_\\text{approx}`."
msgstr ""

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:158
msgid "We can easily construct an operator that acts as"
msgstr "Podemos construir fácilmente un operador que actúe como"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:160
msgid "\\big|x\\rangle \\big|0\\rangle \\mapsto \\big|x\\rangle \\left( \\cos(a*x+b) \\big|0\\rangle + \\sin(a*x+b) \\big|1\\rangle \\right),\n\n"
msgstr ""

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:162
msgid "using controlled Y-rotations."
msgstr "utilizando rotaciones en Y controladas."

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:164
msgid "Eventually, we are interested in the probability of measuring :math:`\\big|1\\rangle` in the last qubit, which corresponds to :math:`\\sin^2(a*x+b)`. Together with the approximation above, this allows to approximate the values of interest. The smaller we choose :math:`c_\\text{approx}`, the better the approximation. However, since we are then estimating a property scaled by :math:`c_\\text{approx}`, the number of evaluation qubits :math:`m` needs to be adjusted accordingly."
msgstr "Eventualmente, estamos interesados en la probabilidad de medir :math:`\\big|1\\rangle` en el último qubit, que corresponde a :math:`\\sin^2(a*x+b)`. Junto con la aproximación anterior, esto permite aproximar los valores de interés. Cuanto más pequeño :math:`c_\\text{approx}` elijamos, mejor será la aproximación. Sin embargo, dado que luego estamos estimando una propiedad escalada por :math:`c_\\text{approx}`, el número de qubits de evaluación :math:`m` necesita ser ajustado como corresponde."

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:166
msgid "For more details on the approximation, we refer to: Quantum Risk Analysis. Woerner, Egger. 2018."
msgstr ""

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:356
msgid "Evaluate Expected Payoff"
msgstr "Evaluar el pago esperado"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:431
msgid "Instead of constructing these circuits manually, Qiskit’s finance module offers the ``EuropeanCallExpectedValue`` circuit, which already implements this functionality as building block."
msgstr "En lugar de construir estos circuitos manualmente, el módulo de finanzas de Qiskit ofrece el circuito ``EuropeanCallExpectedValue``, que ya implementa esta funcionalidad como bloque de construcción."

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:508
msgid "Evaluate Delta"
msgstr "Evaluar delta"

#: ../../tutorials/finance/03_european_call_option_pricing.ipynb:510
msgid "The Delta is a bit simpler to evaluate than the expected payoff. Similarly to the expected payoff, we use a comparator circuit and an ancilla qubit to identify the cases where :math:`S_T > K`. However, since we are only interested in the probability of this condition being true, we can directly use this ancilla qubit as the objective qubit in amplitude estimation without any further approximation."
msgstr "El Delta es un bit más simple de evaluar que el pago esperado. De forma similar al pago esperado, usamos un circuito comparador y un qubit ancilla para identificar los casos donde :math:`S_T > K`. Sin embargo, dado que solo estamos interesados en la probabilidad de que esta condición sea verdadera, podemos utilizar directamente este qubit ancilla como el qubit objetivo en la estimación de amplitud sin ninguna aproximación adicional."

