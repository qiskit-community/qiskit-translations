msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-08 17:23+0000\n"
"PO-Revision-Date: 2021-03-21 19:42\n"
"Last-Translator: \n"
"Language-Team: Spanish, Mexico\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-MX\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/simulators/1_aer_provider.po\n"
"X-Crowdin-File-ID: 9160\n"
"Language: es_MX\n"

#: ../../tutorials/simulators/1_aer_provider.ipynb:10
msgid "This page was generated from `tutorials/simulators/1_aer_provider.ipynb`__."
msgstr "Esta página ha sido generada a partir de `tutorials/simulators/1_aer_provider.ipynb`__."

#: ../../tutorials/simulators/1_aer_provider.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/simulators/1_aer_provider.ipynb>`_."
msgstr "Ejecuta interactivamente en `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/simulators/1_aer_provider.ipynb>`_."

#: ../../tutorials/simulators/1_aer_provider.ipynb:9
msgid "Simulators"
msgstr "Simuladores"

#: ../../tutorials/simulators/1_aer_provider.ipynb:21
msgid "Introduction"
msgstr "Introducción"

#: ../../tutorials/simulators/1_aer_provider.ipynb:23
msgid "This notebook shows how to import *Qiskit Aer* simulator backends and use them to execute ideal (noise free) Qiskit Terra circuits."
msgstr "Este cuaderno muestra cómo importar los backends del simulador *Qiskit Aer* y utilizarlos para ejecutar circuitos Qiskit Terra ideales (libres de ruido)."

#: ../../tutorials/simulators/1_aer_provider.ipynb:50
msgid "Qiskit Aer simulator backends"
msgstr "Simuladores de backends de Qiskit Aer"

#: ../../tutorials/simulators/1_aer_provider.ipynb:52
msgid "Qiskit Aer currently includes three high performance simulator backends: \\* ``QasmSimulator``: Allows ideal and noisy multi-shot execution of qiskit circuits and returns counts or memory \\* ``StatevectorSimulator``: Allows ideal single-shot execution of qiskit circuits and returns the final statevector of the simulator after application \\* ``UnitarySimulator``: Allows ideal single-shot execution of qiskit circuits and returns the final unitary matrix of the circuit itself. Note that the circuit cannot contain measure or reset operations for this backend"
msgstr "Actualmente Qiskit Aer incluye tres simuladores de backend de alto desempeño: \\* ``QasmSimulator``: Permite la ejecución ideal y ruidosa multi-shot de los circuitos qiskit y devuelve las cuentas o memoria \\* ``StatevectorSimulator``: Permite la ejecución ideal de un solo disparo de los circuitos qiskit y devuelve el statevector final del simulador después de aplicarlo \\* ``UnitarySimulator``: Permite la ejecución ideal de los circuitos qiskit y devuelve la matriz unitaria final del propio circuito. Ten en cuenta que el circuito no puede contener operaciones de medición o restablecimiento para este backend"

#: ../../tutorials/simulators/1_aer_provider.ipynb:55
msgid "These backends are found in the ``Aer`` provider with the names ``qasm_simulator``, ``statevector_simulator`` and ``unitary_simulator``, respectively."
msgstr "Estos backends se encuentran en el proveedor ``Aer`` con los nombres ``qasm_simulator``, ``statevector_simulator`` y ``unitary_simulator``, respectivamente."

#: ../../tutorials/simulators/1_aer_provider.ipynb:105
msgid "The simulator backends can also be directly imported from ``qiskit.providers.aer``"
msgstr "Los simuladores de backend también pueden ser importados directamente desde ``qiskit.providers.aer``"

#: ../../tutorials/simulators/1_aer_provider.ipynb:127
msgid "QasmSimulator"
msgstr "QasmSimulator"

#: ../../tutorials/simulators/1_aer_provider.ipynb:129
msgid "The ``QasmSimulator`` backend is designed to mimic an actual device. It executes a Qiskit ``QuantumCircuit`` and returns a count dictionary containing the final values of any classical registers in the circuit. The circuit may contain *gates*, *measurements*, *resets*, *conditionals*, and other advanced simulator options that will be discussed in another notebook."
msgstr "El backend ``QasmSimulator`` está diseñado para simular un dispositivo real. Ejecuta un ``QuantumCircuit`` de Qiskit y devuelve un diccionario con las cuentas que contiene los valores finales de cualquier registro clásico en el circuito. El circuito puede contener *compuertas*, *mediciones*, *resets*, *condicionales*, y otras opciones avanzadas de simulador que serán discutidas en otro cuaderno."

#: ../../tutorials/simulators/1_aer_provider.ipynb:132
#: ../../tutorials/simulators/1_aer_provider.ipynb:285
msgid "Simulating a quantum circuit"
msgstr "Simulando un circuito cuántico"

#: ../../tutorials/simulators/1_aer_provider.ipynb:134
#: ../../tutorials/simulators/1_aer_provider.ipynb:287
msgid "The basic operation executes a quantum circuit and returns a counts dictionary of measurement outcomes. Here we execute a simple circuit that prepares a 2-qubit Bell-state :math:`|\\psi\\rangle = \\frac{1}{2}(|0,0\\rangle + |1,1 \\rangle)` and measures both qubits."
msgstr "La operación básica ejecuta un circuito cuántico y devuelve un diccionario con las cuentas de resultados de medición. Aquí ejecutamos un circuito simple que prepara un estado de Bell de 2-qubit :math:`|\\psi\\rangle = \\frac{1}{2}(|0,0\\rangle + |1,1 \\rangle)` y mide ambos qubits."

#: ../../tutorials/simulators/1_aer_provider.ipynb:177
msgid "Returning measurement outcomes for each shot"
msgstr "Devolviendo los resultados de medición por cada disparo"

#: ../../tutorials/simulators/1_aer_provider.ipynb:179
msgid "The ``QasmSimulator`` also supports returning a list of measurement outcomes for each individual shot. This is enabled by setting the keyword argument ``memory=True`` in the ``assemble`` or ``execute`` function."
msgstr "El ``QasmSimulator`` también puede devolver una lista de resultados de medición para cada disparo individual. Esto se activa poniendo el keyword ``memory=True`` en la función ``assemble`` o ``execute``."

#: ../../tutorials/simulators/1_aer_provider.ipynb:232
#: ../../tutorials/simulators/1_aer_provider.ipynb:374
msgid "Starting simulation with a custom initial state"
msgstr "Inicio de la simulación con un estado inicial personalizado"

#: ../../tutorials/simulators/1_aer_provider.ipynb:234
msgid "The ``QasmSimulator`` allows setting a custom initial statevector for the simulation. This means that all experiments in a Qobj will be executed starting in a state :math:`|\\psi\\rangle` rather than the all zero state :math:`|0,0,..0\\rangle`. The custom state may be set in the circuit using the ``initialize`` method."
msgstr "El ``QasmSimulator`` permite establecer un vector de estado inicial para la simulación. Esto significa que todos los experimentos en un Qobj serán ejecutados comenzando en un estado :math:`|\\psi\\rangle` en lugar del estado cero :math:`|0,0,. 0\\rangle`. El estado puede establecerse en el circuito utilizando el método ``initialize``."

#: ../../tutorials/simulators/1_aer_provider.ipynb:236
msgid "**Note:** \\* The initial statevector must be a valid quantum state :math:`|\\langle\\psi|\\psi\\rangle|=1`. If not, an exception will be raised. \\* The simulator supports this option directly for efficiency, but it can also be unrolled to standard gates for execution on actual devices."
msgstr "**Nota:** \\* El vector de estado inicial debe ser un estado cuántico válido :math:`|\\langle\\psi|\\psi\\rangle|=1`. Si no, una excepción será arrojada. \\* El simulador tiene esta opción por default por eficiencia, pero también puede ser regresado a compuertas estándar para la ejecución en dispositivos reales."

#: ../../tutorials/simulators/1_aer_provider.ipynb:238
msgid "We now demonstrate this functionality by setting the simulator to be initialized in the final Bell-state of the previous example:"
msgstr "Ahora demostramos esta funcionalidad inicializando el simulador en el estado de Bell final del ejemplo anterior:"

#: ../../tutorials/simulators/1_aer_provider.ipynb:280
msgid "StatevectorSimulator"
msgstr "StatevectorSimulator"

#: ../../tutorials/simulators/1_aer_provider.ipynb:282
msgid "The ``StatevectorSimulator`` executes a single shot of a Qiskit ``QuantumCircuit`` and returns the final quantum statevector of the simulation. The circuit may contain *gates*, and also *measurements*, *resets*, and *conditional* operations."
msgstr "El ``StatevectorSimulator`` ejecuta un solo disparo de un ``QuantumCircuit`` de Qiskit y devuelve el vector de estado cuántico final de la simulación. El circuito puede contener *compuertas*, y también operaciones de *medición*, *resets*, y *condicionales*."

#: ../../tutorials/simulators/1_aer_provider.ipynb:329
msgid "Simulating a quantum circuit with measurement"
msgstr "Simulación de un circuito cuántico con medición"

#: ../../tutorials/simulators/1_aer_provider.ipynb:331
msgid "Note that if a circuit contains *measure* or *reset* the final statevector will be a conditional statevector *after* simulating wave-function collapse to the outcome of a measure or reset. For the Bell-state circuit this means the final statevector will be *either* :math:`|0,0\\rangle` *or* :math:`|1, 1\\rangle`."
msgstr "Ten en cuenta que si un circuito contiene una *medición* o un *reset* el vector de estado final será uno condicional *después* de simular el colapso de la función de onda al resultado de la medida o el reset. Para el circuito de estado de Bell, esto significa que el vector de estado final será *cualquiera* :math:`|0,0\\rangle` *or* :math:`|1, 1\\rangle`."

#: ../../tutorials/simulators/1_aer_provider.ipynb:376
msgid "Like the ``QasmSimulator``, the ``StatevectorSimulator`` also allows setting a custom initial statevector for the simulation. Here we run the previous initial statevector example on the ``StatevectorSimulator`` and initialize it to the Bell state."
msgstr "Al igual que el ``QasmSimulator``, el ``StatevectorSimulator`` también permite establecer un vector de estado inicial personalizado para la simulación. Aquí ejecutamos el vector de estado inicial del ejemplo anterior en el ``StatevectorSimulator`` y lo inicializamod al estado de Bell."

#: ../../tutorials/simulators/1_aer_provider.ipynb:417
msgid "Unitary Simulator"
msgstr "Simulador Unitario"

#: ../../tutorials/simulators/1_aer_provider.ipynb:419
msgid "The ``UnitarySimulator`` constructs the unitary matrix for a Qiskit ``QuantumCircuit`` by applying each gate matrix to an identity matrix. The circuit may only contain *gates*, if it contains *resets* or *measure* operations an exception will be raised."
msgstr "El ``UnitarySimulator`` construye la matriz unitaria para un ``QuantumCircuit`` de Qiskit aplicando cada matriz de compuerta a una matriz identidad. El circuito sólo puede contener *compuertas*, si contiene operaciones de *medición* o *resets* se arrojará una excepción."

#: ../../tutorials/simulators/1_aer_provider.ipynb:422
msgid "Simulating a quantum circuit unitary"
msgstr "Simulación de un circuito cuántico unitario"

#: ../../tutorials/simulators/1_aer_provider.ipynb:424
msgid "For this example we will return the unitary matrix corresponding to the previous examples circuit which prepares a bell state."
msgstr "Para este ejemplo vamos a devolver la matriz unitaria correspondiente al circuito anterior de ejemplo que prepara un estado de Bell."

#: ../../tutorials/simulators/1_aer_provider.ipynb:492
msgid "Setting a custom initial unitary"
msgstr "Configuración de una matriz unitaria inicial"

#: ../../tutorials/simulators/1_aer_provider.ipynb:494
msgid "We may also set an initial state for the ``UnitarySimulator``, however this state is an initial *unitary matrix* :math:`U_i`, not a statevector. In this case the returned unitary will be :math:`U \\cdot U_i` given by applying the circuit unitary to the initial unitary matrix."
msgstr "También podemos establecer un estado inicial para el ``UnitarySimulator``, sin embargo, este estado es una *matriz unitaria* :math:`U_i`, no un vector de estado. En este caso, el unitario devuelto será :math:`U \\cdot U_i` dado aplicando el circuito unitario a la matriz unitaria inicial."

#: ../../tutorials/simulators/1_aer_provider.ipynb:496
msgid "**Note:** \\* The initial unitary must be a valid unitary matrix :math:`U^\\dagger \\cdot U =\\mathbb{1}`. If not, an exception will be raised. \\* If a ``Qobj`` contains multiple experiments, the initial unitary must be the correct size for *all* experiments in the ``Qobj``, otherwise an exception will be raised."
msgstr "**Nota:** \\* La unidad inicial debe ser una matriz unitaria válida :math:`U^\\dagger \\cdot U =\\mathbb{1}`. De lo contrario, se arrojará una excepción. \\* Si un ``Qobj`` contiene múltiples experimentos, el unitario inicial debe ser del tamaño correcto para *todos* los experimentos en el ``Qobj``, de lo contrario se arrojará una excepción."

#: ../../tutorials/simulators/1_aer_provider.ipynb:498
msgid "Let us consider preparing the output unitary of the previous circuit as the initial state for the simulator:"
msgstr "Consideremos la preparación de la salida unitaria del circuito anterior como estado inicial para el simulador:"

