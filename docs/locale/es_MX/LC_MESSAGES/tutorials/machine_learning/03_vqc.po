msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-08 17:23+0000\n"
"PO-Revision-Date: 2021-03-09 04:51\n"
"Last-Translator: \n"
"Language-Team: Spanish, Mexico\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-MX\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/machine_learning/03_vqc.po\n"
"X-Crowdin-File-ID: 9468\n"
"Language: es_MX\n"

#: ../../tutorials/machine_learning/03_vqc.ipynb:10
msgid "This page was generated from `tutorials/machine_learning/03_vqc.ipynb`__."
msgstr "Esta página fue generada a partir de `tutorials/machine_learning/03_vqc.ipynb`__."

#: ../../tutorials/machine_learning/03_vqc.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/machine_learning/03_vqc.ipynb>`_."
msgstr "Puedes correr esta sección de manera interactiva en el `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/machine_learning/03_vqc.ipynb>`_."

#: ../../tutorials/machine_learning/03_vqc.ipynb:9
msgid "Variational Quantum Classifier (VQC)"
msgstr "Clasificador variacional cuántico (VQC)"

#: ../../tutorials/machine_learning/03_vqc.ipynb:11
msgid "The QSVM notebook demonstrated a kernel based approach. This notebook shows a variational method using the `VQC <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQC.html>`__ algorithm."
msgstr ""

#: ../../tutorials/machine_learning/03_vqc.ipynb:13
msgid "For further information see also the following reference, as given in the QSVM notebook, that also describes this approach: “Supervised learning with quantum enhanced feature spaces,” `arXiv: 1804.11326 <https://arxiv.org/pdf/1804.11326.pdf>`__"
msgstr ""

#: ../../tutorials/machine_learning/03_vqc.ipynb:44
msgid "As per the QSVM notebook again we will use the ad hoc dataset as described in the above referenced paper. From the dataset we take samples for use as training, testing and the final prediction (datapoints)."
msgstr ""

#: ../../tutorials/machine_learning/03_vqc.ipynb:105
msgid "With the dataset ready we can setup the `VQC <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQC.html>`__ algorithm to do a classification. We use the `ZZFeatureMap <https://qiskit.org/documentation/stubs/qiskit.circuit.library.ZZFeatureMap.html>`__ data encoding circuit from the Qiskit circuit library, like we did with QSVM. But this is a variational algorithm so we need a variational form, i.e. parameterized circuit, whose parameters can be varied by an optimizer when computing VQC’s cost function. For this we choose `TwoLocal <https://qiskit.org/documentation/stubs/qiskit.circuit.library.TwoLocal.html>`__ from the Qiskit circuit library. As the qasm_simulator has shot noise we choose to use `SPSA <https://qiskit.org/documentation/stubs/qiskit.aqua.components.optimizers.SPSA.html>`__ which is designed to perform under noisy conditions."
msgstr "Con el conjunto de datos listo podemos configurar el algoritmo `VQC <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQC.html>`__ para hacer una clasificación. Utilizamos el circuito de codificación de datos `ZZFeatureMap <https://qiskit.org/documentation/stubs/qiskit.circuit.library.ZZFeatureMap.html>`__ de la librería de circuitos de Qiskit, como hicimos con QSVM. Pero este es un algoritmo variacional por lo que necesitamos una forma variacional, es decir, un circuito parametrizado, cuyos parámetros se pueden variar mediante un optimizador cuando se calcula la función de costo de VQC. Para esto elegimos `TwoLocal <https://qiskit.org/documentation/stubs/qiskit.circuit.library.TwoLocal.html>`__ de la librería de circuitos de Qiskit. Como el qasm_simulator ha disparado ruido elegimos utilizar `SPSA <https://qiskit.org/documentation/stubs/qiskit.aqua.components.optimizers.SPSA.html>`__ que está diseñado para funcionar en condiciones ruidosas."

#: ../../tutorials/machine_learning/03_vqc.ipynb:108
msgid "Here the BasicAer ``qasm_simulator`` is used with 1024 shots."
msgstr "Aquí el ``qasm_simulator`` BasicAer se usa con 1024 iteraciones."

#: ../../tutorials/machine_learning/03_vqc.ipynb:174
msgid "Now VQC, as well as QSVM, have ``train``, ``test`` and ``predict`` methods. The ``run`` method, as used above, will call these in turn based on whatever data was supplied to the algorithm. But the methods called directly to say train a model and then do predict. Since the vqc instance has already been trained, lets predict another set of sample datapoints by directly calling ``predict``."
msgstr "Ahora VQC, así como QSVM, tiene los métodos ``train``, ``test`` y ``predict``. El método ``run`` como se usó anteriormente, los llamará a su vez en función de los datos que se suministraron al algoritmo. Pero los métodos se llaman directamente para decir que se entrene un modelo y luego hacer la predicción. Dado que la instancia vqc ya ha sido entrenada, podemos predecir otro conjunto de puntos de datos llamando directamente a ``predict``."

#: ../../tutorials/machine_learning/03_vqc.ipynb:228
msgid "Finally I will note that the Qiskit classifier algorithms can ``save_model`` after training and also ``load_model`` that had been previously saved."
msgstr "Finalmente indicaré que en los algoritmos clasificadores de Qiskit se puede llamar a ``save_model`` para guardar el modelo después del entrenamiento y también a ``load_model`` para cargar un modelo que haya sido guardado previamente."

