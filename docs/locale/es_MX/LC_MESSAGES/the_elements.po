msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-13 21:53+0000\n"
"PO-Revision-Date: 2020-08-17 01:42\n"
"Last-Translator: \n"
"Language-Team: Spanish, Mexico\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-MX\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/the_elements.po\n"
"X-Crowdin-File-ID: 7220\n"
"Language: es_MX\n"

#: ../../the_elements.rst:5
msgid "The Qiskit Elements"
msgstr "Los Elementos de Qiskit"

#: ../../the_elements.rst:14
msgid "Terra"
msgstr "Terra"

#: ../../the_elements.rst:16
msgid "Terra, the ‘earth’ element, is the foundation on which the rest of Qiskit lies. Terra provides a bedrock for composing quantum programs at the level of circuits and pulses, to optimize them for the constraints of a particular device, and to manage the execution of batches of experiments on remote-access devices. Terra defines the interfaces for a desirable end-user experience, as well as the efficient handling of layers of optimization, pulse scheduling and backend communication."
msgstr "Terra, el elemento ‘tierra’ es la base sobre la que se asienta el resto de Qiskit. Terra proporciona una base para componer programas cuánticos a nivel de circuitos y pulsos, para optimizarlos utilizando las restricciones de un dispositivo en particular, y para gestionar la ejecución de grupos de experimentos en dispositivos de acceso remoto. Terra define las interfaces para una experiencia deseable para el usuario, así como el manejo eficiente de las capas de optimización, programación de pulsos y comunicación de \"backend\"."

#: ../../the_elements.rst:23
msgid "Qiskit Terra is organized in six main modules:"
msgstr "Qiskit Terra está organizado en seis módulos principales:"

#: ../../the_elements.rst:25
msgid ":mod:`qiskit.circuit` A quantum circuit is a model for quantum computing in which a computation is done by performing a sequence of quantum operations (usually gates) on a register of qubits. A quantum circuit usually starts with the qubits in the :math:`|0,…,0>` state and these gates evolve the qubits to states that cannot be efficiently represented on a classical computer. To extract information on the state a quantum circuit must have a measurement which maps the outcomes (possible random due to the fundamental nature of quantum systems) to classical registers which can be efficiently represented."
msgstr ":mod:` qiskit.circuit ` Un circuito cuántico es un modelo para la computación cuántica en el que se realiza un cálculo aplicando una secuencia de operaciones cuánticas (generalmente compuertas) en un registro de cúbits. Un circuito cuántico generalmente comienza con los cúbits en el estado :math:` | 0,…, 0> y aplica compuertas que llevan los cúbits estados que no pueden ser representados eficientemente en una computadora clásica. Para extraer información sobre el estado un circuito cuántico se realiza una medición que mapea los resultados (posible aleatorios debido a la naturaleza fundamental de los sistemas cuánticos) a los registros clásicos que pueden ser representados eficientemente."

#: ../../the_elements.rst:34
msgid ":mod:`qiskit.pulse` A pulse schedule is set of pulses which are sent to a quantum experiment that are applied to a channel (experimental input line). This is a lower level than circuits and requires each gate in the circuit to be  represented as a set of pulses. At this level the experiments can be designed to reduce errors (dynamical decoupling, error mitigation, and optimal pulse shapes)."
msgstr ":mod:` qiskit.pulse ` Un programa de pulsos es un conjunto de pulsos que se envían a un experimento cuántico que se aplican a un canal (línea de entrada experimental). Se trata de un nivel inferior al de los circuitos y requiere que cada compuerta del circuito se represente como un conjunto de pulsos. A este nivel, los experimentos se pueden diseñar para reducir errores (desacoplamiento dinámico, mitigación de errores y formas de pulso óptimas)."

#: ../../the_elements.rst:40
msgid ":mod:`qiskit.transpiler` A major part of research on quantum computing is working out how to run a quantum circuits on real devices.  In these devices, experimental errors and decoherence introduce errors during computation. Thus, to obtain a robust implementation it is essential to reduce the number of gates and the overall running time of the quantum circuit. The transpiler introduces the concept of a pass manager to allow users to explore optimization and find better quantum circuits for their given algorithm. We call it a transpiler as the end result is still a circuit."
msgstr ":mod:` qiskit.transiler ` Una gran parte de la investigación sobre la computación cuántica es sobre cómo ejecutar circuitos cuánticos en dispositivos reales.  En estos dispositivos, los errores experimentales y la decoherencia introducen errores durante el cómputo. Por lo tanto, para obtener una implementación robusta es esencial reducir el número de puertas y el tiempo de funcionamiento general del circuito cuántico. El transpilador introduce el concepto de un gestor de pases para dar a los usuarios control sobre la optimización y así encontrar mejores circuitos cuánticos para el algoritmo dado. Lo llamamos un transpilador ya que el resultado final sigue siendo un circuito."

#: ../../the_elements.rst:49
msgid ":mod:`qiskit.providers` Once the user has made the circuits to run on the backend they need to have a convenient way of working with it. In Terra we do this using four parts:"
msgstr ":mod:` qiskit.providers ` Una vez que el usuario haya ejecutado los circuitos en el backend necesitan tener una manera conveniente de trabajar con él. En Terra hacemos esto usando cuatro partes:"

#: ../../the_elements.rst:53
msgid "A ``Provider`` is an entity that implements the abstract base class :class:`~qiskit.providers.BaseProvider` and provides access to a group of different backends (for example, backends available through the `IBM Quantum Experience <https://quantum-computing.ibm.com>`__). It interacts with those backends to, for example, find out which ones are available, or retrieve an instance of a particular backend."
msgstr "Un ` `Provider` ` es una entidad que implementa la clase base abstracta :class:`~qiskit.providers.BaseProvider` y proporciona acceso a un grupo de diferentes backends (por ejemplo, backends disponibles a través de `IBM Quantum Experience <https://quantum-computing.ibm.com>`__). Interactúa con esos backends para averiguar cuáles están disponibles o recuperar una instancia de un backend en particular, entre otras cosas."

#: ../../the_elements.rst:59
msgid "A ``Backend`` is an entity that implements the abstract base class :class:`~qiskit.providers.BaseBackend` represent either a simulator or a real quantum computer and are responsible for running quantum circuits and returning results. They have a run method which takes in a `qobj` as input and returns a `BaseJob` object. This object allows asynchronous running of jobs for retrieving results from a backend when the job is completed."
msgstr "Un ``Backend`` es una entidad que implementa la clase base abstracta :class:`~qiskit.providers.BaseBackend` que representa un simulador o una computadora cuántica real y es responsable de ejecutar circuitos cuánticos y devolver resultados. poseen un método de ejecución que toma un `qobj` como entrada y devuelve un objeto `BaseJob`. Este objeto permite la ejecución asincrónica de trabajos para recuperar resultados de un backend cuando el trabajo se completa."

#: ../../the_elements.rst:66
msgid "``Job`` instances are implementations of the abstract base class :class:`~qiskit.providers.BaseJob` and can be thought of as the “ticket” for a submitted job. They find out the execution’s state at a given point in time (for example, if the job is queued, running, or has failed) and also allow control over the job."
msgstr "Las instancias ` `Job` ` son implementaciones de la clase base abstracta :class:`~qiskit.providers.BaseJob` y se pueden considerar como el \"ticket\" para un trabajo enviado. Averiguan el estado de la ejecución en un momento dadp (por ejemplo, si el trabajo está en cola, en ejecución o ha fallado) y también permite el control sobre el trabajo."

#: ../../the_elements.rst:71
msgid ":class:`~qiskit.result.Result` Once the job has finished Terra allows the results to be obtained from the remote backends using ``result = job.result()``. This result object holds the quantum data and the most common way of interacting with it is by using ``result.get_counts(circuit)``. This method allows the user to get the raw counts from the quantum circuit and use them for more analysis with quantum information tools provided by Terra."
msgstr ":class:` ~qiskit.result.Result ` Una vez que el trabajo ha terminado Terra permite obtener los resultados de los backends remotos usando ` ` result = job.result () ` `. Este objeto resultado contiene los datos cuánticos. La forma más común de interactuar con él es mediante el uso de ` `result.get_counts (circuit) ` `. Este método permite al usuario obtener las cuentas en bruto del circuito cuántico y utilizarlas para más análisis con las herramientas de información cuántica proporcionadas por Terra."

#: ../../the_elements.rst:79
msgid ":mod:`qiskit.quantum_info` To perform more advanced algorithms and analysis of the circuits run on the quantum computer, it is important to have tools to implement simple quantum information tasks. These include methods to both estimate metrics and generate quantum states, operations, and channels."
msgstr ":mod:` qiskit.quantum_info ` Para realizar algoritmos más avanzados y análisis de los circuitos que se ejecutan en la computdora cuántico, es importante tener herramientas para implementar tareas de información cuánticas simples. Estos incluyen métodos para estimar métricas y generar estados cuánticos, operaciones y canales."

#: ../../the_elements.rst:85
msgid ":mod:`qiskit.visualization` In Terra we have many tools to visualize a quantum circuit. This allows a quick inspection of the quantum circuit to make sure it is what the user wanted to implement. There is a text, python and latex version. Once the circuit has run it is important to be able to view the output. There is a simple function (:func:`~qiskit.visualization.plot_histogram`) to plot the results from a quantum circuit including an interactive version. There is also a function :func:`~qiskit.visualization.plot_state` and :func:`~qiskit.visualization.plot_bloch_vector` that allow the plotting of a quantum state."
msgstr ":mod:` qiskit.visualization ` En Terra tenemos muchas herramientas para visualizar un circuito cuántico. Esto permite una rápida inspección del circuito cuántico para asegurarse de que es lo que el usuario quería implementar. Hay versiones en texto, python y de latex. Una vez que el circuito ha corrido es importante poder ver la salida. Hay una función simple (:func:` ~qiskit.visualization.plot_histogram`) para trazar los resultados de un circuito cuántico incluyendo una versión interactiva. También hay una función :func:` ~qiskit.visualization.plot_state ` y :func:` ~qiskit.visualization.plot_bloch_vector ` que permiten visualizar un estado cuántico."

#: ../../the_elements.rst:98
msgid "Aer"
msgstr "Aer"

#: ../../the_elements.rst:100
msgid "Aer, the ‘air’ element, permeates all Qiskit elements. To really speed up development of quantum computers we need better simulators, emulators and debuggers. Aer helps us understand the limits of classical processors by demonstrating to what extent they can mimic quantum computation. Furthermore, we can use Aer to verify that current and near-future quantum computers function correctly. This can be done by stretching the limits of simulation, and by simulating the effects of realistic noise on the computation."
msgstr "Aer, el elemento 'aire', se extiende sobre todos los elementos de Qiskit. Para realmente acelerar el desarrollo de las computadoras cuánticas necesitamos mejores simuladores, emuladores y \"debuggers\". Aer nos ayuda a entender los limites de los procesadores clásicos mostrando qué tanto pueden imitar a una computación cuántica. Adicionalmente, podemos utilizar Aer para verificar si las computadoras cuánticas de hoy en día, y las que han de venir en un futuro cercano, funcionan correctamente. Esto puede ser alcanzado extendiendo los limites de la simulación, y simulando efectos reales de ruido en una computación."

#: ../../the_elements.rst:107
msgid "Aer provides a high performance simulator framework for quantum circuits using the Qiskit software stack. It contains optimized C++ simulator backends for executing circuits compiled in Terra. Aer also provides tools for constructing highly configurable noise models for performing realistic noisy simulations of the errors that occur during execution on real devices."
msgstr "Aer proporciona un marco de simulación de alto desempeño para circuitos cuánticos utilizando el software de Qiskit. Contiene simuladores optimizados para C++ que ejecutan circuitos compilados en Terra. Aer también provee herramientas para construir modelos de ruido altamente configurables y desempeñar simulaciones de ruido realistas de los errores que ocurren durante la ejecución en dispositivos cuánticos reales."

#: ../../the_elements.rst:113
msgid "Qiskit Aer includes three high performance simulator backends:"
msgstr "Qiskit Aer incluye tres backends para simulaciones de alto desempeño:"

#: ../../the_elements.rst:126
msgid ":class:`~qiskit.providers.aer.QasmSimulator`"
msgstr ":class:`~qiskit.providers.aer.QasmSimulator`"

#: ../../the_elements.rst:116
msgid "Allows ideal and noisy multi-shot execution of qiskit circuits and returns counts or memory. There are multiple methods that can be used that simulate different circuits more efficiently. These include:"
msgstr "Permite la ejecución ideal y ruidosa múltiple de circuitos de qiskit y devuelve conteos o memoria. Existen múltiples métodos que pueden ser utilizados para simular diferentes circuitos de manera más eficiente. Estos incluyen:"

#: ../../the_elements.rst:120
msgid "*statevector* - Uses a dense statevector simulation."
msgstr "*statevector* - Usa una simulación densa de un vector estado."

#: ../../the_elements.rst:121
msgid "*stabilizer* - Uses a Clifford stabilizer state simulator that is only valid for Clifford circuits and noise models."
msgstr "*stabilizer* - Usa un simulador de estado con estabilizador Clifford el cual es solo valido para circuitos Clifford y modelos de ruido."

#: ../../the_elements.rst:123
msgid "*extended_stabilizer* - Uses an approximate simulator that decomposes circuits into stabilizer state terms, the number of which grows with the number of non-Clifford gates."
msgstr "*extended_stabilizer* - Usa un simulador aproximado que descompone el circuito en términos de estados estabilizados, cuya cantidad aumenta junto con el numero de compuertas que no son compuertas Clifford."

#: ../../the_elements.rst:126
msgid "*matrix_product_state* - Uses a Matrix Product State (MPS) simulator."
msgstr "*matrix_product_state* - Usa un simulador de matriz de estados producto (MPS por sus siglas en Inglés)."

#: ../../the_elements.rst:130
msgid ":mod:`~qiskit.providers.aer.StatevectorSimulator`"
msgstr ":mod:`~qiskit.providers.aer.StatevectorSimulator`"

#: ../../the_elements.rst:129
msgid "Allows ideal single-shot execution of qiskit circuits and returns the final statevector of the simulator after application."
msgstr "Permite ejecuciones ideales de un solo intento de circuitos Qiskit y regresa el vector estado final del simulador después de aplicarlo."

#: ../../the_elements.rst:136
msgid ":mod:`~qiskit.providers.aer.UnitarySimulator`"
msgstr ":mod:`~qiskit.providers.aer.UnitarySimulator`"

#: ../../the_elements.rst:133
msgid "Allows ideal single-shot execution of qiskit circuits and returns the final unitary matrix of the circuit itself. Note that the circuit cannot contain measure or reset operations for this backend."
msgstr "Permite ejecuciones ideales de un solo intento para circuitos Qiskit y regresa la matriz unitaria final del circuito mismo. Note que el circuito no puede contener mediciones u operaciones de reinicio para este backend."

#: ../../the_elements.rst:142
msgid "Ignis"
msgstr "Ignis"

#: ../../the_elements.rst:144
msgid "Ignis, the ‘fire’ element, is dedicated to fighting noise and errors and to forging a new path. This includes better characterization of errors, improving gates, and computing in the presence of noise. Ignis is meant for those who want to design quantum error correction codes, or who wish to study ways to characterize errors through methods such as tomography, or even to find a better way for using gates by exploring dynamical decoupling and optimal control."
msgstr "Ignis, es el elemento \"fuego\", esta dedicado a combatir ruido y errores ademas de forjar nuevos caminos. Esto incluye mejores representaciones de errores, compuertas mejoradas, y computo en presencia de ruido. Ignis esta pensado para aquellos que quieren diseñar código de corrección de errores cuánticos, o para aquellos que desean estudiar maneras de caracterizar errores a través de métodos como tomografía, o inclusive encontrar mejores maneras para utilizar compuertas mediante la exploración de desacoplo dinámico y control opcional."

#: ../../the_elements.rst:151
msgid "Ignis provides code for users to easily generate circuits for specific experiments given a minimal set of user input parameters. Ignis code contains three fundamental building blocks:"
msgstr "Ignis provee código para que los usuarios pueden fácilmente generar circuitos para experimentos específicos dado un conjunto mínimo de parámetros de entrada, Ignis contiene tres piezas fundamentales:"

#: ../../the_elements.rst:157
msgid "**Circuits**"
msgstr "**Circuitos**"

#: ../../the_elements.rst:156
msgid "The circuits module provides the code to generate the list of circuits for a particular Ignis experiment based on a minimal set of user parameters. These are then run on Terra or Aer."
msgstr "El modulo de circuitos provee el código para generar una lista de circuitos para un experimento de Ignis en particular basado en un conjunto mínimo de parámetros de entrada. Estos son entonces ejecutados en Terra o Aer."

#: ../../the_elements.rst:162
msgid "**Fitters**"
msgstr "**Ajustadores**"

#: ../../the_elements.rst:160
msgid "The results of an Ignis experiment are passed to the Fitters module where they are analyzed and fit according to the physics model describing the experiment. Fitters can plot the data plus fit and output a list of parameters."
msgstr "Los resultados de un experimento Ignis se pasan a un modulo Ajustador donde pueden ser analizados y ajustados de acuerdo a el modelo físico que describe el experimento. Los ajustadores pueden graficar datos más el ajuste y devolver una lista de parámetros."

#: ../../the_elements.rst:167
msgid "**Filters**"
msgstr "**Filtros**"

#: ../../the_elements.rst:165
msgid "For certain Ignis experiments, the fitters can output a Filter object. Filters can be used to mitigate errors in other experiments using the calibration results of an Ignis experiment."
msgstr "Para ciertos experimentos, el ajustador puede devolver un objeto Filtro. Los filtros pueden ser usados para mitigar errores en otros experimentos usando la calibración resultante de un experimento de Ignis."

#: ../../the_elements.rst:169
msgid "Qiskit Ignis is organized into three types of experiments that can be performed:"
msgstr "Qiskit Ignis esta organizado en tres tipos de experimentos que se pueden realizar:"

#: ../../the_elements.rst:173
msgid ":mod:`qiskit.ignis.characterization` Characterization experiments are designed to measure parameters in the system such as noise parameters (T1, T2-star, T2), Hamiltonian parameters such as the ZZ interaction rate and control errors in the gates."
msgstr ":mod:` qiskit.ignis.caracterization ' Los experimentos de caracterización están diseñados para medir parámetros en el sistema tales como parámetros de ruido (T1, T2-star, T2) o parámetros del Hamiltoniano tales como la tasa de interacción ZZ y errores de control en las compuertas."

#: ../../the_elements.rst:178
msgid ":mod:`qiskit.ignis.verification` Verification experiments are designed to verify gate and small circuit performance. Verification includes state and process tomography, quantum volume and randomized benchmarking (RB). These experiments provide the information to determine performance metrics such as the gate fidelity."
msgstr ":mod:`qiskit.ignis.verification` Los experimentos de verificación están diseñados para verificar compuertas y rendimiento de circuitos pequeños. La verificación incluye tomografía del estado y del proceso, volumen cuántico y benchmarking aleatorio (RB). Estos experimentos proporcionan información para determinar medidas de rendimiento como la fidelidad de la compuerta."

#: ../../the_elements.rst:184
msgid ":mod:`qiskit.ignis.mitigation` Mitigation experiments run calibration circuits that are analyzed to generate mitigation routines that can be applied to arbitrary sets of results run on the same backend. Ignis code will generate a list of circuits that run calibration measurements. The results of these measurements will be processed by a Fitter and will output a Filter than can be used to apply mitigation to other results."
msgstr ":mod:` qiskit.ignis.mitigation ` Los experimentos de mitigación ejecutan circuitos de calibración que se analizan para generar rutinas de mitigación que se pueden aplicar a conjuntos arbitrarios de resultados ejecutados en el mismo backend. El código de Ignis generara una lista de circuitos que ejecutan mediciones de calibración. Los resultados de estas mediciones serán procesados por un método de ajuste y darán salida a un filtro que se puede utilizar para mitigar otros resultados."

#: ../../the_elements.rst:197
msgid "Aqua"
msgstr "Aqua"

#: ../../the_elements.rst:199
msgid "Aqua, the ‘water’ element, is the element of life. To make quantum computing live up to its expectations, we need to find real-world applications. Aqua is where algorithms for quantum computers are built. These algorithms can be used to build applications for quantum computing. Aqua is accessible to domain experts in chemistry, optimization, finance and AI, who want to explore the benefits of using quantum computers as accelerators for specific computational tasks."
msgstr "Aqua es el elemento \"agua\", el elemento de la vida. Para que el cómputo cuántico alcance las expectativas, necesitamos encontrar una aplicación en el mundo real. Aqua es donde se construyen los algoritmos para computadoras cuánticas. Estos algoritmos puedes ser usados para construir aplicaciones de cómputo cuántico. Aqua es accesible para expertos en los dominios de química, optimización, finanzas e inteligencia artificial, los cuales desean explorar los beneficios de usar computadoras cuánticas como catalizadores para tareas computacionales especificas."

#: ../../the_elements.rst:207
msgid "Problems that may benefit from the power of quantum computing have been identified in numerous domains, such as Chemistry, Artificial Intelligence (AI), Optimization and Finance. Quantum computing, however, requires very specialized skills. To address the needs of the vast population of practitioners who want to use and contribute to quantum computing at various levels of the software stack, we have created Qiskit Aqua."
msgstr "Problemas que pueden beneficiarse con el poder el computo cuántico pueden ser identificados en numerosos dominios, como Química, Inteligencia Artificial (AI), Optimización y Finanzas. Pero la computación cuántica requiere habilidades muy especializadas. Hemos creado Aqua para lidiar con las estas necesidades de una basta población de practicantes que desean usar y contribuir a la computación cuántica en varios niveles del software."

