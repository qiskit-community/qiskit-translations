msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-02-18 22:08+0000\n"
"PO-Revision-Date: 2021-02-18 22:31\n"
"Last-Translator: \n"
"Language-Team: Spanish, Mexico\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-MX\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/release_notes.po\n"
"X-Crowdin-File-ID: 7216\n"
"Language: es_MX\n"

#: ../../release_notes.rst:3
msgid "Release Notes"
msgstr ""

#: ../../release_notes.rst:8
msgid "Version History"
msgstr ""

#: ../../release_notes.rst:10
msgid "This table tracks the meta-package versions and the version of each Qiskit element installed:"
msgstr ""

#: ../../release_notes.rst:12
msgid "**Version History**"
msgstr ""

#: ../../release_notes.rst:16
msgid "For the ``0.7.0``, ``0.7.1``, and ``0.7.2`` meta-package releases the :ref:`versioning_strategy` policy was not formalized yet."
msgstr ""

#: ../../release_notes.rst:22
msgid "Notable Changes"
msgstr ""

#: ../../release_notes.rst:26
msgid "Qiskit 0.23.6"
msgstr ""

#: ../../release_notes.rst:29 ../../release_notes.rst:67
msgid "Terra 0.16.4"
msgstr ""

#: ../../release_notes.rst:31 ../../release_notes.rst:50
#: ../../release_notes.rst:55 ../../release_notes.rst:60
#: ../../release_notes.rst:133 ../../release_notes.rst:156
#: ../../release_notes.rst:161 ../../release_notes.rst:166
#: ../../release_notes.rst:171 ../../release_notes.rst:324
#: ../../release_notes.rst:329 ../../release_notes.rst:334
#: ../../release_notes.rst:343 ../../release_notes.rst:372
#: ../../release_notes.rst:377 ../../release_notes.rst:382
#: ../../release_notes.rst:2425 ../../release_notes.rst:2430
#: ../../release_notes.rst:2435 ../../release_notes.rst:2440
#: ../../release_notes.rst:2499 ../../release_notes.rst:2504
#: ../../release_notes.rst:2509 ../../release_notes.rst:2514
#: ../../release_notes.rst:2615 ../../release_notes.rst:2620
#: ../../release_notes.rst:2625 ../../release_notes.rst:2630
#: ../../release_notes.rst:9575 ../../release_notes.rst:9593
msgid "No change"
msgstr ""

#: ../../release_notes.rst:34
msgid "Aer 0.7.5"
msgstr ""

#: ../../release_notes.rst:39 ../../release_notes.rst:72
#: ../../release_notes.rst:102 ../../release_notes.rst:622
#: ../../release_notes.rst:1465 ../../release_notes.rst:1717
#: ../../release_notes.rst:1917 ../../release_notes.rst:2643
#: ../../release_notes.rst:3766 ../../release_notes.rst:3952
#: ../../release_notes.rst:4518 ../../release_notes.rst:4636
#: ../../release_notes.rst:5030 ../../release_notes.rst:5250
#: ../../release_notes.rst:6903 ../../release_notes.rst:7657
#: ../../release_notes.rst:8201 ../../release_notes.rst:8325
#: ../../release_notes.rst:8737
msgid "Prelude"
msgstr ""

#: ../../release_notes.rst:41
msgid "This release is a bugfix release that fixes compatibility in the precompiled binary wheel packages with numpy versions < 1.20.0. The previous release 0.7.4 was building the binaries in a way that would require numpy 1.20.0 which has been resolved now, so the precompiled binary wheel packages will work with any numpy compatible version."
msgstr ""

#: ../../release_notes.rst:48 ../../release_notes.rst:97
msgid "Ignis 0.5.2"
msgstr ""

#: ../../release_notes.rst:53 ../../release_notes.rst:127
msgid "Aqua 0.8.2"
msgstr ""

#: ../../release_notes.rst:58 ../../release_notes.rst:131
#: ../../release_notes.rst:169 ../../release_notes.rst:332
#: ../../release_notes.rst:380 ../../release_notes.rst:570
msgid "IBM Q Provider 0.11.1"
msgstr ""

#: ../../release_notes.rst:64
msgid "Qiskit 0.23.5"
msgstr ""

#: ../../release_notes.rst:74
msgid "This release is a bugfix release that primarily fixes compatibility with numpy 1.20.0. This numpy release deprecated their local aliases for Python's numeric types (``np.int`` -> ``int``, ``np.float`` -> ``float``, etc.) and the usage of these aliases in Qiskit resulted in a large number of deprecation warnings being emitted. This release fixes this so you can run Qiskit with numpy 1.20.0 without those deprecation warnings."
msgstr ""

#: ../../release_notes.rst:82
msgid "Aer 0.7.4"
msgstr ""

#: ../../release_notes.rst:87 ../../release_notes.rst:114
#: ../../release_notes.rst:145 ../../release_notes.rst:204
#: ../../release_notes.rst:295 ../../release_notes.rst:364
#: ../../release_notes.rst:397 ../../release_notes.rst:432
#: ../../release_notes.rst:480 ../../release_notes.rst:526
#: ../../release_notes.rst:603 ../../release_notes.rst:1377
#: ../../release_notes.rst:1679 ../../release_notes.rst:1895
#: ../../release_notes.rst:2361 ../../release_notes.rst:2534
#: ../../release_notes.rst:2556 ../../release_notes.rst:3566
#: ../../release_notes.rst:3923 ../../release_notes.rst:4068
#: ../../release_notes.rst:4141 ../../release_notes.rst:4305
#: ../../release_notes.rst:4360 ../../release_notes.rst:4395
#: ../../release_notes.rst:4432 ../../release_notes.rst:4480
#: ../../release_notes.rst:4579 ../../release_notes.rst:4612
#: ../../release_notes.rst:4901 ../../release_notes.rst:5134
#: ../../release_notes.rst:5181 ../../release_notes.rst:6634
#: ../../release_notes.rst:7471 ../../release_notes.rst:8140
#: ../../release_notes.rst:8673 ../../release_notes.rst:9367
#: ../../release_notes.rst:9466 ../../release_notes.rst:9551
#: ../../release_notes.rst:9763 ../../release_notes.rst:9990
#: ../../release_notes.rst:10089
msgid "Bug Fixes"
msgstr ""

#: ../../release_notes.rst:89
msgid "Fixes compatibility with numpy 1.20.0. This numpy release deprecated their local aliases for Python's numeric types (``np.int`` -> ``int``, ``np.float`` -> ``float``, etc.) and the usage of these aliases in Qiskit Aer resulted in a large number of deprecation warnings being emitted. This release fixes this so you can run Qiskit Aer with numpy 1.20.0 without those deprecation warnings."
msgstr ""

#: ../../release_notes.rst:104
msgid "This release is a bugfix release that primarily fixes compatibility with numpy 1.20.0. It is also the first release to include support for Python 3.9. Earlier releases (including 0.5.0 and 0.5.1) worked with Python 3.9 but did not indicate this in the package metadata, and there was no upstream testing for those releases. This release fixes that and was tested on Python 3.9 (in addition to 3.6, 3.7, and 3.8)."
msgstr ""

#: ../../release_notes.rst:116
msgid "`networkx <https://networkx.org/>`__ is explicitly listed as a dependency now. It previously was an implicit dependency as it was required for the :mod:`qiskit.ignis.verification.topological_codes` module but was not correctly listed as a depdendency as qiskit-terra also requires networkx and is also a depdency of ignis so it would always be installed in practice. However, it is necessary to list it as a requirement for future releases of qiskit-terra that will not require networkx. It's also important to correctly list the dependencies of ignis in case there were a future incompatibility between version requirements."
msgstr ""

#: ../../release_notes.rst:137
msgid "Qiskit 0.23.4"
msgstr ""

#: ../../release_notes.rst:140
msgid "Terra 0.16.3"
msgstr ""

#: ../../release_notes.rst:147
msgid "Fixed an issue introduced in 0.16.2 that would cause errors when running :func:`~qiskit.compiler.transpile` on a circuit with a series of 1 qubit gates and a non-gate instruction that only operates on a qubit (e.g. :class:`~qiskit.circuit.Reset`). Fixes `#5736 <https://github.com/Qiskit/qiskit-terra/issues/5736>`__"
msgstr ""

#: ../../release_notes.rst:154 ../../release_notes.rst:281
msgid "Aer 0.7.3"
msgstr ""

#: ../../release_notes.rst:159 ../../release_notes.rst:322
#: ../../release_notes.rst:370 ../../release_notes.rst:475
msgid "Ignis 0.5.1"
msgstr ""

#: ../../release_notes.rst:164 ../../release_notes.rst:327
#: ../../release_notes.rst:375 ../../release_notes.rst:496
msgid "Aqua 0.8.1"
msgstr ""

#: ../../release_notes.rst:175
msgid "Qiskit 0.23.3"
msgstr ""

#: ../../release_notes.rst:178
msgid "Terra 0.16.2"
msgstr ""

#: ../../release_notes.rst:183 ../../release_notes.rst:286
#: ../../release_notes.rst:351 ../../release_notes.rst:504
#: ../../release_notes.rst:575 ../../release_notes.rst:650
#: ../../release_notes.rst:1482 ../../release_notes.rst:1727
#: ../../release_notes.rst:1942 ../../release_notes.rst:2448
#: ../../release_notes.rst:2522 ../../release_notes.rst:2663
#: ../../release_notes.rst:3781 ../../release_notes.rst:3963
#: ../../release_notes.rst:4080 ../../release_notes.rst:4225
#: ../../release_notes.rst:4551 ../../release_notes.rst:4713
#: ../../release_notes.rst:5085 ../../release_notes.rst:5295
#: ../../release_notes.rst:6823 ../../release_notes.rst:6877
#: ../../release_notes.rst:6917 ../../release_notes.rst:7668
#: ../../release_notes.rst:8214 ../../release_notes.rst:8335
#: ../../release_notes.rst:8753 ../../release_notes.rst:9455
#: ../../release_notes.rst:9755 ../../release_notes.rst:9795
#: ../../release_notes.rst:9953 ../../release_notes.rst:10011
#: ../../release_notes.rst:10035 ../../release_notes.rst:10127
#: ../../release_notes.rst:10177 ../../release_notes.rst:10459
#: ../../release_notes.rst:10490
msgid "New Features"
msgstr ""

#: ../../release_notes.rst:185
msgid "Python 3.9 support has been added in this release. You can now run Qiskit Terra using Python 3.9."
msgstr ""

#: ../../release_notes.rst:192 ../../release_notes.rst:422
#: ../../release_notes.rst:591 ../../release_notes.rst:1203
#: ../../release_notes.rst:1627 ../../release_notes.rst:1884
#: ../../release_notes.rst:2264 ../../release_notes.rst:2406
#: ../../release_notes.rst:2479 ../../release_notes.rst:3219
#: ../../release_notes.rst:3868 ../../release_notes.rst:3985
#: ../../release_notes.rst:4264 ../../release_notes.rst:4346
#: ../../release_notes.rst:4418 ../../release_notes.rst:4467
#: ../../release_notes.rst:4523 ../../release_notes.rst:4814
#: ../../release_notes.rst:5105 ../../release_notes.rst:5155
#: ../../release_notes.rst:5987 ../../release_notes.rst:7209
#: ../../release_notes.rst:8024 ../../release_notes.rst:8584
#: ../../release_notes.rst:9035
msgid "Upgrade Notes"
msgstr ""

#: ../../release_notes.rst:194
msgid "The class :class:`~qiskit.library.standard_gates.x.MCXGrayCode` will now create a ``C3XGate`` if ``num_ctrl_qubits`` is 3 and a ``C4XGate`` if ``num_ctrl_qubits`` is 4. This is in addition to the previous functionality where for any of the modes of the :class:'qiskit.library.standard_gates.x.MCXGate`, if ``num_ctrl_bits`` is 1, a ``CXGate`` is created, and if 2, a ``CCXGate`` is created."
msgstr ""

#: ../../release_notes.rst:206
msgid "Pulse :py:class:`~qiskit.pulse.instructions.Delay` instructions are now explicitly assembled as :class:`~qiskit.qobj.PulseQobjInstruction` objects included in the :class:`~qiskit.qobj.PulseQobj` output from :func:`~qiskit.compiler.assemble`."
msgstr ""

#: ../../release_notes.rst:211
msgid "Previously, we could ignore :py:class:`~qiskit.pulse.instructions.Delay` instructions in a :class:`~qiskit.pulse.Schedule` as part of :func:`~qiskit.compiler.assemble` as the time was explicit in the :class:`~qiskit.qobj.PulseQobj` objects. But, now with pulse gates, there are situations where we can schedule ONLY a delay, and not including the delay itself would remove the delay."
msgstr ""

#: ../../release_notes.rst:218
msgid "Circuits with custom gate calibrations can now be scheduled with the transpiler without explicitly providing the durations of each circuit calibration."
msgstr ""

#: ../../release_notes.rst:222
msgid "The :class:`~qiskit.transpiler.passes.BasisTranslator` and :class:`~qiskit.transpiler.passes.Unroller` passes, in some cases, had not been preserving the global phase of the circuit under transpilation. This has been fixed."
msgstr ""

#: ../../release_notes.rst:227
msgid "A bug in :func:`qiskit.pulse.builder.frequency_offset` where when ``compensate_phase`` was set a factor of :math:`2\\pi` was missing from the appended phase."
msgstr ""

#: ../../release_notes.rst:231
msgid "Fix the global phase of the output of the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.repeat`. If a circuit with global phase is appended to another circuit, the global phase is currently not propagated. Simulators rely on this, since the phase otherwise gets applied multiple times. This sets the global phase of :meth:`~qiskit.circuit.QuantumCircuit.repeat` to 0 before appending the repeated circuit instead of multiplying the existing phase times the number of repetitions."
msgstr ""

#: ../../release_notes.rst:241
msgid "Fixes bug in :class:`~qiskit.quantum_info.SparsePauliOp` where multiplying by a certain non Python builtin Numpy scalar types returned incorrect values. Fixes `#5408 <https://github.com/Qiskit/qiskit-terra/issues/5408>`__"
msgstr ""

#: ../../release_notes.rst:245
msgid "The definition of the Hellinger fidelity from has been corrected from the previous defition of :math:`1-H(P,Q)` to :math:`[1-H(P,Q)^2]^2` so that it is equal to the quantum state fidelity of P, Q as diagonal density matrices."
msgstr ""

#: ../../release_notes.rst:250
msgid "Reduce the number of CX gates in the decomposition of the 3-controlled X gate, :class:`~qiskit.circuit.library.C3XGate`. Compiled and optimized in the `U CX` basis, now only 14 CX and 16 U gates are used instead of 20 and 22, respectively."
msgstr ""

#: ../../release_notes.rst:255
msgid "Fixes the issue wherein using Jupyter backend widget or :meth:`qiskit.tools.backend_monitor` would fail if the backend's basis gates do not include the traditional u1, u2, and u3."
msgstr ""

#: ../../release_notes.rst:259
msgid "When running :func:`qiskit.compiler.transpile` on a list of circuits with a single element, the function used to return a circuit instead of a list. Now, when :func:`qiskit.compiler.transpile` is called with a list, it will return a list even if that list has a single element. See `#5260 <https://github.com/Qiskit/qiskit-terra/issues/5260>`__."
msgstr ""

#: ../../release_notes.rst:288
msgid "Python 3.9 support has been added in this release. You can now run Qiskit Aer using Python 3.9 without building from source."
msgstr ""

#: ../../release_notes.rst:297
msgid "Fixes issue with setting :class:`~qiskit.providers.aer.QasmSimulator` basis gates when using ``\"method\"`` and ``\"noise_model\"`` options together, and when using them with a simulator constructed using :meth:`~qiskit.providers.aer.QasmSimulator.from_backend`. Now the listed basis gates will be the intersection of gates supported by the backend configuration, simulation method, and noise model basis gates. If the intersection of the noise model basis gates and simulator basis gates is empty a warning will be logged."
msgstr ""

#: ../../release_notes.rst:306
msgid "Fixes a bug that resulted in `c_if` not working when the width of the conditional register was greater than 64. See `#1077 <https://github.com/Qiskit/qiskit-aer/issues/1077>`__."
msgstr ""

#: ../../release_notes.rst:310
msgid "Fixes bug in :meth:`~qiskit.providers.aer.noise.NoiseModel.from_backend` and :meth:`~qiskit.providers.aer.QasmSimulator.from_backend` where :attr:`~qiskit.providers.aer.noise.NoiseModel.basis_gates` was set incorrectly for IBMQ devices with basis gate set ``['id', 'rz', 'sx', 'x', 'cx']``. Now the noise model will always have the same basis gates as the backend basis gates regardless of whether those instructions have errors in the noise model or not."
msgstr ""

#: ../../release_notes.rst:319
msgid "Fixes a bug when applying truncation in the matrix product state method of the QasmSimulator."
msgstr ""

#: ../../release_notes.rst:338
msgid "Qiskit 0.23.2"
msgstr ""

#: ../../release_notes.rst:341 ../../release_notes.rst:392
msgid "Terra 0.16.1"
msgstr ""

#: ../../release_notes.rst:346
msgid "Aer 0.7.2"
msgstr ""

#: ../../release_notes.rst:353
msgid "Add the CMake flag ``DISABLE_CONAN`` (default=``OFF``)s. When installing from source, setting this to ``ON`` allows bypassing the Conan package manager to find libraries that are already installed on your system. This is also available as an environment variable ``DISABLE_CONAN``, which takes precedence over the CMake flag. This is not the official procedure to build AER. Thus, the user is responsible of providing all needed libraries and corresponding files to make them findable to CMake."
msgstr ""

#: ../../release_notes.rst:366
msgid "Fixes a bug with nested OpenMP flag was being set to true when it shouldn't be."
msgstr ""

#: ../../release_notes.rst:387
msgid "Qiskit 0.23.1"
msgstr ""

#: ../../release_notes.rst:399
msgid "Fixed an issue where an error was thrown in execute for valid circuits built with delays."
msgstr ""

#: ../../release_notes.rst:402
msgid "The QASM definition of 'c4x' in qelib1.inc has been corrected to match the standard library definition for C4XGate."
msgstr ""

#: ../../release_notes.rst:405
msgid "Fixes a bug in subtraction for quantum channels :math:`A - B` where :math:`B` was an :class:`~qiskit.quantum_info.Operator` object. Negation was being applied to the matrix in the Operator representation which is not equivalent to negation in the quantum channel representation."
msgstr ""

#: ../../release_notes.rst:410
msgid "Changes the way :meth:`~qiskit.quantum_info.states.statevector.Statevector._evolve_instruction` access qubits to handle the case of an instruction with multiple registers."
msgstr ""

#: ../../release_notes.rst:417
msgid "Aer 0.7.1"
msgstr ""

#: ../../release_notes.rst:424
msgid "The minimum cmake version to build qiskit-aer has increased from 3.6 to 3.8. This change was necessary to enable fixing GPU version builds that support running on x86_64 CPUs lacking AVX2 instructions."
msgstr ""

#: ../../release_notes.rst:434
msgid "qiskit-aer with GPU support will now work on systems with x86_64 CPUs lacking AVX2 instructions. Previously, the GPU package would only run if the AVX2 instructions were available. Fixes `#1023 <https://github.com/Qiskit/qiskit-aer/issues/1023>`__"
msgstr ""

#: ../../release_notes.rst:439
msgid "Fixes bug with :class:`~qiskit.providers.aer.AerProvider` where options set on the returned backends using :meth:`~qiskit.providers.aer.QasmSimulator.set_options` were stored in the provider and would persist for subsequent calls to :meth:`~qiskit.providers.aer.AerProvider.get_backend` for the same named backend. Now every call to and :meth:`~qiskit.providers.aer.AerProvider.backends` returns a new instance of the simulator backend that can be configured."
msgstr ""

#: ../../release_notes.rst:448
msgid "Fixes bug in the error message returned when a circuit contains unsupported simulator instructions. Previously some supported instructions were also being listed in the error message along with the unsupported instructions."
msgstr ""

#: ../../release_notes.rst:452
msgid "Fix bug where the `\"sx\"`` gate :class:`~qiskit.circuit.library.SXGate` was not listed as a supported gate in the C++ code, in `StateOpSet` of `matrix_product_state.hp`."
msgstr ""

#: ../../release_notes.rst:456
msgid "Fix bug where ``\"csx\"``, ``\"cu2\"``, ``\"cu3\"`` were incorrectly listed as supported basis gates for the ``\"density_matrix\"`` method of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:460
msgid "In MPS, apply_kraus was operating directly on the input bits in the parameter qubits, instead of on the internal qubits. In the MPS algorithm, the qubits are constantly moving around so all operations should be applied to the internal qubits."
msgstr ""

#: ../../release_notes.rst:465
msgid "When invoking MPS::sample_measure, we need to first sort the qubits to the default ordering because this is the assumption in qasm_controller.This is done by invoking the method move_all_qubits_to_sorted_ordering. It was correct in sample_measure_using_apply_measure, but missing in sample_measure_using_probabilities."
msgstr ""

#: ../../release_notes.rst:482
msgid "Fix the ``\"auto\"`` method of the :class:`~qiskit.ignis.verification.tomography.TomographyFitter`, :class:`~qiskit.ignis.verification.tomography.StateTomographyFitter`, and :class:`~qiskit.ignis.verification.tomography.ProcessTomographyFitter` to only use ``\"cvx\"`` if CVXPY is installed *and* a third-party SDP solver other than SCS is available. This is because the SCS solver has lower accuracy than other solver methods and often returns a density matrix or Choi-matrix that is not completely-positive and fails validation when used with the :func:`qiskit.quantum_info.state_fidelity` or :func:`qiskit.quantum_info.process_fidelity` functions."
msgstr ""

#: ../../release_notes.rst:499
msgid "0.8.1"
msgstr ""

#: ../../release_notes.rst:506
msgid "A new algorithm has been added: the Born Openheimer Potential Energy surface for the calculation of potential energy surface along different degrees of freedom of the molecule. The algorithm is called ``BOPESSampler``. It further provides functionalities of fitting the potential energy surface to an analytic function of predefined potentials.some details."
msgstr ""

#: ../../release_notes.rst:515
msgid "Critical Issues"
msgstr ""

#: ../../release_notes.rst:517
msgid "Be aware that ``initial_state`` parameter in ``QAOA`` has now different implementation as a result of a bug fix. The previous implementation wrongly mixed the user provided ``initial_state`` with Hadamard gates. The issue is fixed now. No attention needed if your code does not make use of the user provided ``initial_state`` parameter."
msgstr ""

#: ../../release_notes.rst:528
msgid "optimize_svm method of qp_solver would sometimes fail resulting in an error like this `ValueError: cannot reshape array of size 1 into shape (200,1)` This addresses the issue by adding an L2 norm parameter, lambda2, which defaults to 0.001 but can be changed via the QSVM algorithm, as needed, to facilitate convergence."
msgstr ""

#: ../../release_notes.rst:533
msgid "A method ``one_letter_symbol`` has been removed from the ``VarType`` in the latest build of DOCplex making Aqua incompatible with this version. So instead of using this method an explicit type check of variable types has been introduced in the Aqua optimization module."
msgstr ""

#: ../../release_notes.rst:537
msgid ":meth`~qiskit.aqua.operators.state_fns.DictStateFn.sample()` could only handle real amplitudes, but it is fixed to handle complex amplitudes. `#1311 <https://github.com/Qiskit/qiskit-aqua/issues/1311>` for more details."
msgstr ""

#: ../../release_notes.rst:541
msgid "Trotter class did not use the reps argument in constructor. `#1317 <https://github.com/Qiskit/qiskit-aqua/issues/1317>` for more details."
msgstr ""

#: ../../release_notes.rst:544
msgid "Raise an `AquaError` if :class`qiskit.aqua.operators.converters.CircuitSampler` samples an empty operator. `#1321 <https://github.com/Qiskit/qiskit-aqua/issues/1321>` for more details."
msgstr ""

#: ../../release_notes.rst:548
msgid ":meth:`~qiskit.aqua.operators.legacy.WeightedPauliOperator.to_opflow()` returns a correct operator when coefficients are complex numbers. `#1381 <https://github.com/Qiskit/qiskit-aqua/issues/1381>` for more details."
msgstr ""

#: ../../release_notes.rst:552
msgid "Let backend simulators validate NoiseModel support instead of restricting to Aer only in QuantumInstance."
msgstr ""

#: ../../release_notes.rst:555
msgid "Correctly handle PassManager on QuantumInstance ``transpile`` method by calling its ``run`` method if it exists."
msgstr ""

#: ../../release_notes.rst:558
msgid "A bug that mixes custom ``initial_state`` in ``QAOA`` with Hadamard gates has been fixed. This doesn't change functionality of QAOA if no initial_state is provided by the user. Attention should be taken if your implementation uses QAOA with cusom ``initial_state`` parameter as the optimization results might differ."
msgstr ""

#: ../../release_notes.rst:563
msgid "Previously, setting `seed_simulator=0` in the `QuantumInstance` did not set any seed. This was only affecting the value 0. This has been fixed."
msgstr ""

#: ../../release_notes.rst:577
msgid ":class:`qiskit.providers.ibmq.experiment.Experiment` now has three additional attributes, `hub`, `group`, and `project`, that identify the provider used to create the experiment."
msgstr ""

#: ../../release_notes.rst:581
msgid "Methods :meth:`qiskit.providers.ibmq.experiment.ExperimentService.experiments` and :meth:`qiskit.providers.ibmq.experiment.ExperimentService.analysis_results` now support a ``limit`` parameter that allows you to limit the number of experiments and analysis results returned."
msgstr ""

#: ../../release_notes.rst:593
msgid "A new parameter, ``limit`` is now the first parameter for both :meth:`qiskit.providers.ibmq.experiment.ExperimentService.experiments` and :meth:`qiskit.providers.ibmq.experiment.ExperimentService.analysis_results` methods. This ``limit`` has a default value of 10, meaning by deafult only 10 experiments and analysis results will be returned."
msgstr ""

#: ../../release_notes.rst:605
msgid "Fixes the issue wherein a job could be left in the ``CREATING`` state if job submit fails half-way through."
msgstr ""

#: ../../release_notes.rst:608
msgid "Fixes the infinite loop raised when passing an ``IBMQRandomService`` instance to a child process."
msgstr ""

#: ../../release_notes.rst:614
msgid "Qiskit 0.23.0"
msgstr ""

#: ../../release_notes.rst:617
msgid "Terra 0.16.0"
msgstr ""

#: ../../release_notes.rst:624
msgid "The 0.16.0 release includes several new features and bug fixes. The major features in this release are the following:"
msgstr ""

#: ../../release_notes.rst:627
msgid "Introduction of scheduled circuits, where delays can be used to control the timing and alignment of operations in the circuit."
msgstr ""

#: ../../release_notes.rst:629
msgid "Compilation of quantum circuits from classical functions, such as oracles."
msgstr ""

#: ../../release_notes.rst:631
msgid "Ability to compile and optimize single qubit rotations over different Euler basis as well as the phase + square-root(X) basis (i.e. ``['p', 'sx']``), which will replace the older IBM Quantum basis of ``['u1', 'u2', 'u3']``."
msgstr ""

#: ../../release_notes.rst:635
msgid "Tracking of :meth:`~qiskit.circuit.QuantumCircuit.global_phase` on the :class:`~qiskit.circuit.QuantumCircuit` class has been extended through the :mod:`~qiskit.transpiler`, :mod:`~qiskit.quantum_info`, and :mod:`~qiskit.assembler` modules, as well as the BasicAer and Aer simulators. Unitary and state vector simulations will now return global phase-correct unitary matrices and state vectors."
msgstr ""

#: ../../release_notes.rst:642
msgid "Also of particular importance for this release is that Python 3.5 is no longer supported. If you are using Qiskit Terra with Python 3.5, the 0.15.2 release is that last version which will work."
msgstr ""

#: ../../release_notes.rst:652
msgid "Global R gates have been added to :mod:`qiskit.circuit.library`. This includes the global R gate (:class:`~qiskit.circuit.library.GR`), global Rx (:class:`~qiskit.circuit.library.GRX`) and global Ry (:class:`~qiskit.circuit.library.GRY`) gates which are derived from the :class:`~qiskit.circuit.library.GR` gate, and global Rz ( :class:`~qiskit.circuit.library.GRZ`) that is defined in a similar way to the :class:`~qiskit.circuit.library.GR` gates. The global R gates are defined on a number of qubits simultaneously, and act as a direct sum of R gates on each qubit."
msgstr ""

#: ../../release_notes.rst:662 ../../release_notes.rst:1186
#: ../../release_notes.rst:3172 ../../release_notes.rst:3188
#: ../../release_notes.rst:3205 ../../release_notes.rst:5882
#: ../../release_notes.rst:6135 ../../release_notes.rst:7903
msgid "For example:"
msgstr ""

#: ../../release_notes.rst:675
msgid "will create a :class:`~qiskit.circuit.QuantumCircuit` on a :class:`~qiskit.circuit.QuantumRegister` of 3 qubits and perform a :class:`~qiskit.circuit.library.RGate` of an angle :math:`\\theta = \\frac{\\pi}{3}` about an axis in the xy-plane of the Bloch spheres that makes an angle of :math:`\\phi = \\frac{2\\pi}{3}` with the x-axis on each qubit."
msgstr ""

#: ../../release_notes.rst:682
msgid "A new color scheme, ``iqx``, has been added to the ``mpl`` backend for the circuit drawer :func:`qiskit.visualization.circuit_drawer` and :meth:`qiskit.circuit.QuantumCircuit.draw`. This uses the same color scheme as the Circuit Composer on the IBM Quantum Experience website. There are now 3 available color schemes - ``default``, ``iqx``, and ``bw``."
msgstr ""

#: ../../release_notes.rst:688
msgid "There are two ways to select a color scheme. The first is to use a user config file, by default in the ``~/.qiskit`` directory, in the file ``settings.conf`` under the ``[Default]`` heading, a user can enter ``circuit_mpl_style = iqx`` to select the ``iqx`` color scheme."
msgstr ""

#: ../../release_notes.rst:693
msgid "The second way is to add ``{'name': 'iqx'}`` to the ``style`` kwarg to the ``QuantumCircuit.draw`` method or to the ``circuit_drawer`` function. The second way will override the setting in the settings.conf file. For example:"
msgstr ""

#: ../../release_notes.rst:707
msgid "In the ``style`` kwarg for the the circuit drawer :func:`qiskit.visualization.circuit_drawer` and :meth:`qiskit.circuit.QuantumCircuit.draw` the ``displaycolor`` field with the ``mpl`` backend now allows for entering both the gate color and the text color for each gate type in the form ``(gate_color, text_color)``.  This allows the use of light and dark gate colors with contrasting text colors. Users can still set only the gate color, in which case the ``gatetextcolor`` field will be used. Gate colors can be set in the ``style`` dict for any number of gate types, from one to the entire ``displaycolor`` dict. For example:"
msgstr ""

#: ../../release_notes.rst:728
msgid "or"
msgstr ""

#: ../../release_notes.rst:735
msgid "Two alignment contexts are added to the pulse builder (:mod:`qiskit.pulse.builder`) to facilitate writing a repeated pulse sequence with delays."
msgstr ""

#: ../../release_notes.rst:739
msgid ":func:`qiskit.pulse.builder.align_equispaced` inserts delays with equivalent length in between pulse schedules within the context."
msgstr ""

#: ../../release_notes.rst:741
msgid ":func:`qiskit.pulse.builder.align_func` offers more advanced control of pulse position. This context takes a callable that calculates a fractional coordinate of i-th pulse and aligns pulses within the context. This makes coding of dynamical decoupling easy."
msgstr ""

#: ../../release_notes.rst:746
msgid "A ``rep_delay`` parameter has been added to the :class:`~qiskit.qobj.QasmQobj` class under the run configuration, :class:`~qiskit.qobj.QasmQobjConfig`. This parameter is used to denote the time between program executions. It must be chosen from the backend range given by the :class:`~qiskit.providers.models.BackendConfiguration` method :meth:`~qiskit.providers.models.BackendConfiguration.rep_delay_range`. If a value is not provided a backend default, :attr:`qiskit.providers.models.BackendConfiguration.default_rep_delay`, will be used. ``rep_delay`` will only work on backends which allow for dynamic repetition time. This is can be checked with the :class:`~qiskit.providers.models.BackendConfiguration` property :attr:`~qiskit.providers.models.BackendConfiguration.dynamic_reprate_enabled`."
msgstr ""

#: ../../release_notes.rst:760
msgid "The ``qobj_schema.json`` JSON Schema file in :mod:`qiskit.schemas` has been updated to include the ``rep_delay`` as an optional configuration property for QASM Qobjs."
msgstr ""

#: ../../release_notes.rst:764
msgid "The ``backend_configuration_schema.json`` JSON Schema file in :mod:`qiskit.schemas` has been updated to include ``dynamic_reprate_enabled``, ``rep_delay_range`` and ``default_rep_delay`` as optional properties for a QASM backend configuration payload."
msgstr ""

#: ../../release_notes.rst:769
msgid "A new optimization pass, :class:`qiskit.transpiler.passes.TemplateOptimization` has been added to the transpiler. This pass applies a template matching algorithm described in `arXiv:1909.05270 <https://arxiv.org/pdf/1909.05270.pdf>`__ that replaces all compatible maximal matches in the circuit."
msgstr ""

#: ../../release_notes.rst:775
msgid "To implement this new transpiler pass a new module, ``template_circuits``, was added to the circuit library (:mod:`qiskit.circuit.library`). This new module contains all the Toffoli circuit templates used in the :class:`~qiskit.transpiler.passes.TemplateOptimization`."
msgstr ""

#: ../../release_notes.rst:780
msgid "This new pass is **not** currently included in the preset pass managers (:mod:`qiskit.transpiler.preset_passmanagers`), to use it you will need to create a custom :class:`~qiskit.transpiler.PassManager`."
msgstr ""

#: ../../release_notes.rst:784
msgid "A new version of the providers interface has been added. This new interface, which can be found in :mod:`qiskit.providers`, provides a new versioning mechanism that will enable changes to the interface to happen in a compatible manner over time. The new interface should be simple to migrate existing providers, as it is mostly identical except for the explicit versioning."
msgstr ""

#: ../../release_notes.rst:791
msgid "Besides having explicitly versioned abstract classes the key changes for the new interface are that the :class:`~qiskit.providers.BackendV1` method :meth:`~qiskit.providers.BackendV1.run` can now take a :class:`~qiskit.circuits.QuantumCircuit` or :class:`~qiskit.pulse.Schedule` object as inputs instead of ``Qobj`` objects. To go along with that options are now part of a backend class so that users can configure run time options when running with a circuit. The final change is that :class:`qiskit.providers.JobV1` can now be synchronous or asynchronous, the exact configuration and method for configuring this is up to the provider, but there are interface hook points to make it explicit which execution model a job is running under in the ``JobV1`` abstract class."
msgstr ""

#: ../../release_notes.rst:804
msgid "A new kwarg, ``inplace``, has been added to the function :func:`qiskit.result.marginal_counts`. This kwarg is used to control whether the contents are marginalized in place or a new copy is returned, for :class:`~qiskit.result.Result` object input. This parameter does not have any effect for an input ``dict`` or :class:`~qiskit.result.Counts` object."
msgstr ""

#: ../../release_notes.rst:810
msgid "An initial version of a classical function compiler, :mod:`qiskit.circuit.classicalfunction`, has been added. This enables compiling typed python functions (operating only on bits of type ``Int1`` at the moment) into :class:`~qiskit.circuit.QuantumCircuit` objects. For example:"
msgstr ""

#: ../../release_notes.rst:830
msgid "The parameter ``registerless=False`` in the :class:`qiskit.circuit.classicalfunction.ClassicalFunction` method :meth:`~qiskit.circuit.classicalfunction.ClassicalFunction.synth` creates a circuit with registers refering to the parameter names. For example:"
msgstr ""

#: ../../release_notes.rst:840
msgid "A decorated classical function can be used the same way as any other quantum gate when appending it to a circuit."
msgstr ""

#: ../../release_notes.rst:849
msgid "The ``GROVER_ORACLE`` gate is synthesized when its decomposition is required."
msgstr ""

#: ../../release_notes.rst:855
msgid "The feature requires ``tweedledum``, a library for synthesizing quantum circuits, that can be installed via pip with ``pip install tweedledum``."
msgstr ""

#: ../../release_notes.rst:858
msgid "A new class :class:`qiskit.circuit.Delay` for representing a delay instruction in a circuit has been added. A new method :meth:`~qiskit.circuit.QuantumCircuit.delay` is now available for easily appending delays to circuits. This makes it possible to describe timing-sensitive experiments (e.g. T1/T2 experiment) in the circuit level."
msgstr ""

#: ../../release_notes.rst:874
msgid "A new argument ``scheduling_method`` for :func:`qiskit.compiler.transpile` has been added. It is required when transpiling circuits with delays.  If ``scheduling_method`` is specified, the transpiler returns a scheduled circuit such that all idle times in it are padded with delays (i.e. start time of each instruction is uniquely determined). This makes it possible to see how scheduled instructions (gates) look in the circuit level."
msgstr ""

#: ../../release_notes.rst:895
msgid "See also :func:`~qiskit.visualization.timeline_drawer` for the best visualization of scheduled circuits."
msgstr ""

#: ../../release_notes.rst:898
msgid "A new fuction :func:`qiskit.compiler.sequence` has been also added so that we can convert a scheduled circuit into a :class:`~qiskit.pulse.Schedule` to make it executable on a pulse-enabled backend."
msgstr ""

#: ../../release_notes.rst:908
msgid "The :func:`~qiskit.compiler.schedule` has been updated so that it can schedule circuits with delays. Now there are two paths to schedule a circuit with delay:"
msgstr ""

#: ../../release_notes.rst:924
msgid "Refer to the release notes and documentation for :func:`~qiskit.compiler.transpile` and :func:`~qiskit.compiler.sequence` for the details on the other path."
msgstr ""

#: ../../release_notes.rst:928
msgid "Added the :class:`~qiskit.circuit.library.GroverOperator` to the circuit library (:mod:`qiskit.circuit.library`) to construct the Grover operator used in Grover's search algorithm and Quantum Amplitude Amplification/Estimation. Provided with an oracle in form of a circuit, ``GroverOperator`` creates the textbook Grover operator. To generalize this for amplitude amplification and use a generic operator instead of Hadamard gates as state preparation, the ``state_in`` argument can be used."
msgstr ""

#: ../../release_notes.rst:937
msgid "The :class:`~qiskit.pulse.InstructionScheduleMap` methods :meth:`~qiskit.pulse.InstructionScheduleMap.get` and :meth:`~qiskit.pulse.InstructionScheduleMap.pop` methods now take :class:`~qiskit.circuit.ParameterExpression` instances in addition to numerical values for schedule generator parameters. If the generator is a function, expressions may be bound before or within the function call. If the generator is a :class:`~qiskit.pulse.ParametrizedSchedule`, expressions must be bound before the schedule itself is bound/called."
msgstr ""

#: ../../release_notes.rst:947
msgid "A new class :class:`~qiskit.circuit.library.LinearAmplitudeFunction` was added to the circuit library (:mod:`qiskit.circuit.library`) for mapping (piecewise) linear functions on qubit amplitudes,"
msgstr ""

#: ../../release_notes.rst:951
msgid "F|x\\rangle |0\\rangle = \\sqrt{1 - f(x)}|x\\rangle |0\\rangle + \\sqrt{f(x)}|x\\rangle |1\\rangle"
msgstr ""

#: ../../release_notes.rst:956
msgid "The mapping is based on a controlled Pauli Y-rotations and a Taylor approximation, as described in https://arxiv.org/abs/1806.06893. This circuit can be used to compute expectation values of linear functions using the quantum amplitude estimation algorithm."
msgstr ""

#: ../../release_notes.rst:961
msgid "The new jupyter magic ``monospaced_output`` has been added to the :mod:`qiskit.tools.jupyter` module. This magic sets the Jupyter notebook output font to \"Courier New\", when possible. When used this fonts returns text circuit drawings that are better aligned."
msgstr ""

#: ../../release_notes.rst:971
msgid "A new transpiler pass, :class:`~qiskit.transpiler.passes.Optimize1qGatesDecomposition`, has been added. This transpiler pass is an alternative to the existing :class:`~qiskit.transpiler.passes.Optimize1qGates` that uses the :class:`~qiskit.quantum_info.OneQubitEulerDecomposer` class to decompose and simplify a chain of single qubit gates. This method is compatible with any basis set, while :class:`~qiskit.transpiler.passes.Optimize1qGates` only works for u1, u2, and u3. The default pass managers for ``optimization_level`` 1, 2, and 3 have been updated to use this new pass if the basis set doesn't include u1, u2, or u3."
msgstr ""

#: ../../release_notes.rst:982
msgid "The :class:`~qiskit.quantum_info.OneQubitEulerDecomposer` now supports two new basis, ``'PSX'`` and ``'U'``. These can be specified with the ``basis`` kwarg on the constructor. This will decompose the matrix into a circuit using :class:`~qiskit.circuit.library.PGate` and :class:`~qiskit.circuit.library.SXGate` for ``'PSX'``, and :class:`~qiskit.circuit.library.UGate` for ``'U'``."
msgstr ""

#: ../../release_notes.rst:989
msgid "A new method :meth:`~qiskit.transpiler.PassManager.remove` has been added to the :class:`qiskit.transpiler.PassManager` class. This method enables removing a pass from a :class:`~qiskit.transpiler.PassManager` instance. It works on indexes, similar to :meth:`~qiskit.transpiler.PassManager.replace`. For example, to remove the :class:`~qiskit.transpiler.passes.RemoveResetInZeroState` pass from the pass manager used at optimization level 1:"
msgstr ""

#: ../../release_notes.rst:1011
msgid "The stage ``[1]`` with ``RemoveResetInZeroState`` can be removed like this:"
msgstr ""

#: ../../release_notes.rst:1023
msgid "Several classes to load probability distributions into qubit amplitudes; :class:`~qiskit.circuit.library.UniformDistribution`, :class:`~qiskit.circuit.library.NormalDistribution`, and :class:`~qiskit.circuit.library.LogNormalDistribution` were added to the circuit library (:mod:`qiskit.circuit.library`). The normal and log-normal distribution support both univariate and multivariate distributions. These circuits are central to applications in finance where quantum amplitude estimation is used."
msgstr ""

#: ../../release_notes.rst:1032
msgid "Support for pulse gates has been added to the :class:`~qiskit.circuit.QuantumCircuit` class. This enables a :class:`~qiskit.circuit.QuantumCircuit` to override (for basis gates) or specify (for standard and custom gates) a definition of a :class:`~qiskit.circuit.Gate` operation in terms of time-ordered signals across hardware channels. In other words, it enables the option to provide pulse-level custom gate calibrations."
msgstr ""

#: ../../release_notes.rst:1040
msgid "The circuits are built exactly as before. For example::"
msgstr ""

#: ../../release_notes.rst:1053
msgid "Then, the calibration for the gate can be registered using the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.add_calibration` which takes a :class:`~qiskit.pulse.Schedule` definition as well as the qubits and parameters that it is defined for::"
msgstr ""

#: ../../release_notes.rst:1070
msgid "Previously, this functionality could only be used through complete Pulse Schedules. Additionally, circuits can now be submitted to backends with your custom definitions (dependent on backend support)."
msgstr ""

#: ../../release_notes.rst:1074
msgid "Circuits with pulse gates can still be lowered to a :class:`~qiskit.pulse.Schedule` by using the :func:`~qiskit.compiler.schedule` function."
msgstr ""

#: ../../release_notes.rst:1078
msgid "The calibrated gate can also be transpiled using the regular transpilation process::"
msgstr ""

#: ../../release_notes.rst:1083
msgid "The transpiled circuit will leave the calibrated gates on the same qubit as the original circuit and will not unroll them to the basis gates."
msgstr ""

#: ../../release_notes.rst:1086
msgid "Support for disassembly of :class:`~qiskit.qobj.PulseQobj` objects has been added to the :func:`qiskit.assembler.disassemble` function. For example:"
msgstr ""

#: ../../release_notes.rst:1110
msgid "A new kwarg, ``coord_type`` has been added to :func:`qiskit.visualization.plot_bloch_vector`. This kwarg enables changing the coordinate system used for the input parameter that describes the positioning of the vector on the Bloch sphere in the generated visualization. There are 2 supported values for this new kwarg, ``'cartesian'`` (the default value) and ``'spherical'``. If the ``coord_type`` kwarg is set to ``'spherical'`` the list of parameters taken in are of the form ``[r, theta,  phi]`` where ``r`` is the radius, ``theta`` is the inclination from +z direction, and ``phi`` is the azimuth from +x direction. For example:"
msgstr ""

#: ../../release_notes.rst:1149
msgid "Pulse :py:class:`~qiskit.pulse.Schedule` objects now support using :py:class:`~qiskit.circuit.ParameterExpression` objects for parameters."
msgstr ""

#: ../../release_notes.rst:1153 ../../release_notes.rst:2687
#: ../../release_notes.rst:3014 ../../release_notes.rst:5978
#: ../../release_notes.rst:7985
msgid "For example::"
msgstr ""

#: ../../release_notes.rst:1170
msgid "Parameter assignment is done via the :meth:`~qiskit.pulse.Schedule.assign_parameters` method::"
msgstr ""

#: ../../release_notes.rst:1176
msgid "Expressions and partial assignment also work, such as::"
msgstr ""

#: ../../release_notes.rst:1183
msgid "A new visualization function :func:`~qiskit.visualization.timeline_drawer` was added to the :mod:`qiskit.visualization` module."
msgstr ""

#: ../../release_notes.rst:1205
msgid "Type checking for the ``params`` kwarg of the constructor for the :class:`~qiskit.circuit.Gate` class and its subclasses has been changed. Previously all :class:`~qiskit.circuit.Gate` parameters had to be in a set of allowed types defined in the :class:`~qiskit.circuit.Instruction` class. Now a new method, :meth:`~qiskit.circuit.Gate.validate_parameter` is used to determine if a parameter type is valid or not. The definition of this method in a subclass will take priority over its parent. For example, :class:`~qiskit.extensions.UnitaryGate` accepts a parameter of the type ``numpy.ndarray`` and defines a custom :meth:`~qiskit.extensionst.UnitaryGate.validate_parameter` method that returns the parameter if it's an ``numpy.ndarray``. This takes priority over the function defined in its parent class :class:`~qiskit.circuit.Gate`. If :class:`~qiskit.extensions.UnitaryGate` were to be used as parent for a new class, this ``validate_parameter`` method would be used unless the new child class defines its own method."
msgstr ""

#: ../../release_notes.rst:1222
msgid "The previously deprecated methods, arguments, and properties named ``n_qubits`` and ``numberofqubits``  have been removed. These were deprecated in the 0.13.0 release. The full set of changes are:"
msgstr ""

#: ../../release_notes.rst:1229 ../../release_notes.rst:6524
msgid "Class"
msgstr ""

#: ../../release_notes.rst:1230 ../../release_notes.rst:3360
msgid "Old"
msgstr ""

#: ../../release_notes.rst:1231 ../../release_notes.rst:3361
msgid "New"
msgstr ""

#: ../../release_notes.rst:1232 ../../release_notes.rst:6527
msgid ":class:`~qiskit.circuit.QuantumCircuit`"
msgstr ""

#: ../../release_notes.rst:1233 ../../release_notes.rst:1246
#: ../../release_notes.rst:1249 ../../release_notes.rst:6528
#: ../../release_notes.rst:6541
msgid "``n_qubits``"
msgstr ""

#: ../../release_notes.rst:1234
msgid ":class:`~qiskit.circuit.QuantumCircuit.num_qubits`"
msgstr ""

#: ../../release_notes.rst:1235 ../../release_notes.rst:6530
msgid ":class:`~qiskit.quantum_info.Pauli`"
msgstr ""

#: ../../release_notes.rst:1236 ../../release_notes.rst:6531
msgid "``numberofqubits``"
msgstr ""

#: ../../release_notes.rst:1237
msgid ":attr:`~qiskit.quantum_info.Pauli.num_qubits`"
msgstr ""

#: ../../release_notes.rst:1242 ../../release_notes.rst:6537
msgid "Function"
msgstr ""

#: ../../release_notes.rst:1243 ../../release_notes.rst:6538
msgid "Old Argument"
msgstr ""

#: ../../release_notes.rst:1244 ../../release_notes.rst:6539
msgid "New Argument"
msgstr ""

#: ../../release_notes.rst:1245
msgid ":func:`qiskit.circuit.random.random_circuit`"
msgstr ""

#: ../../release_notes.rst:1247 ../../release_notes.rst:1250
#: ../../release_notes.rst:6542 ../../release_notes.rst:6545
msgid "``num_qubits``"
msgstr ""

#: ../../release_notes.rst:1248
msgid ":class:`qiskit.circuit.library.MSGate`"
msgstr ""

#: ../../release_notes.rst:1252
msgid "Inserting a parameterized :class:`~qiskit.circuit.Gate` instance into a :class:`~qiskit.circuit.QuantumCircuit` now creates a copy of that gate which is used in the circuit. If changes are made to the instance inserted into the circuit it will no longer be reflected in the gate in the circuit. This change was made to fix an issue when inserting a single parameterized :class:`~qiskit.circuit.Gate` object into multiple circuits."
msgstr ""

#: ../../release_notes.rst:1259
msgid "The function :func:`qiskit.result.marginal_counts` now, by default, does not modify the :class:`qiskit.result.Result` instance parameter. Previously, the ``Result`` object was always modified in place. A new kwarg ``inplace`` has been added :func:`~qiskit.result.marginal_counts` which enables using the previous behavior when ``inplace=True`` is set."
msgstr ""

#: ../../release_notes.rst:1266
msgid "The :class:`~qiskit.circuit.library.U3Gate` definition has been changed to be in terms of the :class:`~qiskit.circuit.library.UGate` class. The :class:`~qiskit.circuit.library.UGate` class has no definition. It is therefore not possible to unroll **every** circuit in terms of U3 and CX anymore. Instead, U and CX can be used for **every** circuit."
msgstr ""

#: ../../release_notes.rst:1272
msgid "The deprecated support for running Qiskit Terra with Python 3.5 has been removed. To use Qiskit Terra from this release onward you will now need to use at least Python 3.6. If you are using Python 3.5 the last version which will work is Qiskit Terra 0.15.2."
msgstr ""

#: ../../release_notes.rst:1277
msgid "In the :class:`~qiskit.providers.models.PulseBackendConfiguration` in the ``hamiltonian`` attributes the ``vars`` field  is now returned in a unit of Hz instead of the previously used GHz. This change was made to be consistent with the units used with the other attributes in the class."
msgstr ""

#: ../../release_notes.rst:1283
msgid "The previously deprecated support for passing in a dictionary as the first positional argument to :class:`~qiskit.dagcircuit.DAGNode` constructor has been removed. Using a dictonary for the first positional argument was deprecated in the 0.13.0 release. To create a :class:`~qiskit.dagcircuit.DAGNode` object now you should directly pass the attributes as kwargs on the constructor."
msgstr ""

#: ../../release_notes.rst:1290
msgid "The keyword arguments for the circuit gate methods (for example: :class:`qiskit.circuit.QuantumCircuit.cx`) ``q``, ``ctl*``, and ``tgt*``, which were deprecated in the 0.12.0 release, have been removed. Instead, only  ``qubit``, ``control_qubit*`` and ``target_qubit*`` can be used as named arguments for these methods."
msgstr ""

#: ../../release_notes.rst:1296
msgid "The previously deprecated module ``qiskit.extensions.standard`` has been removed. This module has been deprecated since the 0.14.0 release. The :mod:`qiskit.circuit.library` can be used instead. Additionally, all the gate classes previously in ``qiskit.extensions.standard`` are still importable from :mod:`qiskit.extensions`."
msgstr ""

#: ../../release_notes.rst:1303
msgid "The previously deprecated gates in the module ``qiskit.extensions.quantum_initializer``: ``DiagGate``, `UCG``, ``UCPauliRotGate``, ``UCRot``, ``UCRXGate``, ``UCX``, ``UCRYGate``, ``UCY``, ``UCRZGate``, ``UCZ`` have been removed. These were all deprecated in the 0.14.0 release and have alternatives available in the circuit library (:mod:`qiskit.circuit.library`)."
msgstr ""

#: ../../release_notes.rst:1310
msgid "The previously deprecated :class:`qiskit.circuit.QuantumCircuit` gate method :meth:`~qiskit.circuit.QuantumCircuit.iden` has been removed. This was deprecated in the 0.13.0 release and :meth:`~qiskit.circuit.QuantumCircuit.i` or :meth:`~qiskit.circuit.QuantumCircuit.id` can be used instead."
msgstr ""

#: ../../release_notes.rst:1318 ../../release_notes.rst:1660
#: ../../release_notes.rst:2284 ../../release_notes.rst:3467
#: ../../release_notes.rst:4016 ../../release_notes.rst:4110
#: ../../release_notes.rst:4295 ../../release_notes.rst:4850
#: ../../release_notes.rst:5123 ../../release_notes.rst:6337
#: ../../release_notes.rst:7262 ../../release_notes.rst:8070
#: ../../release_notes.rst:8626 ../../release_notes.rst:9301
msgid "Deprecation Notes"
msgstr ""

#: ../../release_notes.rst:1320
msgid "The use of a ``numpy.ndarray`` for a parameter in the ``params`` kwarg for the constructor of the :class:`~qiskit.circuit.Gate` class and subclasses has been deprecated and will be removed in future releases. This was done as part of the refactoring of how ``parms`` type checking is handled for the :class:`~qiskit.circuit.Gate` class. If you have a custom gate class which is a subclass of :class:`~qiskit.circuit.Gate` directly (or via a different parent in the hierarchy) that accepts an ``ndarray`` parameter, you should define a custom :meth:`~qiskit.circuit.Gate.validate_parameter` method for your class that will return the allowed parameter type. For example::"
msgstr ""

#: ../../release_notes.rst:1339
msgid "The :attr:`~qiskit.circuit.library.PiecewiseLinearPauliRotations.num_ancilla_qubits` property of the :class:`~qiskit.circuit.library.PiecewiseLinearPauliRotations` and :class:`~qiskit.circuit.library.PolynomialPauliRotations` classes has been deprecated and will be removed in a future release. Instead the property :attr:`~qiskit.circuit.library.PolynomialPauliRotations.num_ancillas` should be used instead. This was done to make it consistent with the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.num_ancillas`."
msgstr ""

#: ../../release_notes.rst:1349
msgid "The :class:`qiskit.circuit.library.MSGate` class has been deprecated, but will remain in place to allow loading of old jobs. It has been replaced with the :class:`qiskit.circuit.library.GMS` class which should be used instead."
msgstr ""

#: ../../release_notes.rst:1354
msgid "The :class:`~qiskit.transpiler.passes.MSBasisDecomposer` transpiler pass has been deprecated and will be removed in a future release. The :class:`qiskit.transpiler.passes.BasisTranslator` pass can be used instead."
msgstr ""

#: ../../release_notes.rst:1359
msgid "The :class:`~qiskit.circuit.QuantumCircuit` methods ``u1``, ``u2`` and ``u3`` are now deprecated. Instead the following replacements can be used."
msgstr ""

#: ../../release_notes.rst:1369
msgid "The gate classes themselves, :class:`~qiskit.circuit.library.U1Gate`, :class:`~qiskit.circuit.library.U2Gate` and :class:`~qiskit.circuit.library.U3Gate` remain, to allow loading of old jobs."
msgstr ""

#: ../../release_notes.rst:1379
msgid "The :class:`~qiskit.result.Result` class's methods :meth:`~qiskit.result.Result.data`, :meth:`~qiskit.result.Result.get_memory`, :meth:`~qiskit.result.Result.get_counts`,  :meth:`~qiskit.result.Result.get_unitary`, and :meth:`~qiskit.result.Result.get_statevector ` will now emit a warning when the ``experiment`` kwarg is specified for attempting to fetch results using either a :class:`~qiskit.circuit.QuantumCircuit` or :class:`~qiskit.pulse.Schedule` instance, when more than one entry matching the instance name is present in the ``Result`` object. Note that only the first entry matching this name will be returned. Fixes `#3207 <https://github.com/Qiskit/qiskit-terra/issues/3207>`__"
msgstr ""

#: ../../release_notes.rst:1390
msgid "The :class:`qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.append` can now be used to insert one parameterized gate instance into multiple circuits. This fixes a previous issue where inserting a single parameterized :class:`~qiskit.circuit.Gate` object into multiple circuits would cause failures when one circuit had a parameter assigned. Fixes `#4697 <https://github.com/Qiskit/qiskit-terra/issues/4697>`__"
msgstr ""

#: ../../release_notes.rst:1398
msgid "Previously the :func:`qiskit.execute.execute` function would incorrectly disallow both the ``backend`` and ``pass_manager`` kwargs to be specified at the same time. This has been fixed so that both ``backend`` and ``pass_manager`` can be used together on calls to :func:`~qiskit.execute.execute`. Fixes `#5037 <https://github.com/Qiskit/qiskit-terra/issues/5037>`__"
msgstr ""

#: ../../release_notes.rst:1405
msgid "The :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.unitary` method has been fixed to accept a single integer for the ``qarg`` argument (when adding a 1-qubit unitary). The allowed types for the ``qargs`` argument are now ``int``, :class:`~qiskit.circuit.Qubit`, or a list of integers. Fixes `#4944 <https://github.com/Qiskit/qiskit-terra/issues/4944>`__"
msgstr ""

#: ../../release_notes.rst:1412
msgid "Previously, calling :meth:`~qiskit.circuit.library.BlueprintCircuit.inverse` on a :class:`~qiskit.circuit.library.BlueprintCircuit` object could fail if its internal data property was not yet populated. This has been fixed so that the calling :meth:`~qiskit.circuit.library.BlueprintCircuit.inverse` will populate the internal data before generating the inverse of the circuit. Fixes `#5140 <https://github.com/Qiskit/qiskit-terra/issues/5140>`__"
msgstr ""

#: ../../release_notes.rst:1420 ../../release_notes.rst:2593
msgid "Fixed an issue when creating a :class:`qiskit.result.Counts` object from an empty data dictionary. Now this will create an empty :class:`~qiskit.result.Counts` object. The :meth:`~qiskit.result.Counts.most_frequent` method is also updated to raise a more descriptive exception when the object is empty. Fixes `#5017 <https://github.com/Qiskit/qiskit-terra/issues/5017>`__"
msgstr ""

#: ../../release_notes.rst:1427
msgid "Fixes a bug where setting ``ctrl_state`` of a :class:`~qiskit.extensions.UnitaryGate` would be applied twice; once in the creation of the matrix for the controlled unitary and again when calling the :meth:`~qiskit.circuit.ControlledGate.definition` method of the :class:`qiskit.circuit.ControlledGate` class. This would give the appearence that setting ``ctrl_state`` had no effect."
msgstr ""

#: ../../release_notes.rst:1434
msgid "Previously the :class:`~qiskit.circuit.ControlledGate` method :meth:`~qiskit.circuit.ControlledGate.inverse` would not preserve the ``ctrl_state`` parameter in some cases. This has been fixed so that calling :meth:`~qiskit.circuit.ControlledGate.inverse` will preserve the value ``ctrl_state`` in its output."
msgstr ""

#: ../../release_notes.rst:1440
msgid "Fixed a bug in the ``mpl`` output backend of the circuit drawer :meth:`qiskit.circuit.QuantumCircuit.draw` and :func:`qiskit.visualization.circuit_drawer` that would cause the drawer to fail if the ``style`` kwarg was set to a string. The correct behavior would be to treat that string as a path to a JSON file containing the style sheet for the visualization. This has been fixed, and warnings are raised if the JSON file for the style sheet can't be loaded."
msgstr ""

#: ../../release_notes.rst:1449
msgid "Fixed an error where loading a QASM file via :meth:`~qiskit.circuit.QuantumCircuit.from_qasm_file` or :meth:`~qiskit.circuit.QuantumCircuit.from_qasm_str` would fail if a ``u``, ``phase(p)``, ``sx``, or ``sxdg`` gate were present in the QASM file. Fixes `#5156 <https://github.com/Qiskit/qiskit-terra/issues/5151>`__"
msgstr ""

#: ../../release_notes.rst:1456
msgid "Fixed a bug that would potentially cause registers to be mismapped when unrolling/decomposing a gate defined with only one 2-qubit operation."
msgstr ""

#: ../../release_notes.rst:1460
msgid "Aer 0.7.0"
msgstr ""

#: ../../release_notes.rst:1467
msgid "This 0.7.0 release includes numerous performance improvements and significant enhancements to the simulator interface, and drops support for Python 3.5. The main interface changes are configurable simulator backends, and constructing preconfigured simulators from IBMQ backends. Noise model an basis gate support has also been extended for most of the Qiskit circuit library standard gates, including new support for 1 and 2-qubit rotation gates. Performance improvements include adding SIMD support to the density matrix and unitary simulation methods, reducing the used memory and improving the performance of circuits using statevector and density matrix snapshots, and adding support for Kraus instructions to the gate fusion circuit optimization for greatly improving the performance of noisy statevector simulations."
msgstr ""

#: ../../release_notes.rst:1484
msgid "Adds basis gate support for the :class:`qiskit.circuit.Delay` instruction to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and :class:`~qiskit.providers.aer.QasmSimulator`. Note that this gate is treated as an identity gate during simulation and the delay length parameter is ignored."
msgstr ""

#: ../../release_notes.rst:1491
msgid "Adds basis gate support for the single-qubit gate :class:`qiskit.circuit.library.UGate` to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and the ``\"statevector\"``, ``\"density_matrix\"``, ``\"matrix_product_state\"``, and ``\"extended_stabilizer\"`` methods of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:1499
msgid "Adds basis gate support for the phase gate :class:`qiskit.circuit.library.PhaseGate` to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and the ``\"statevector\"``, ``\"density_matrix\"``, ``\"matrix_product_state\"``, and ``\"extended_stabilizer\"`` methods of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:1508
msgid "Adds basis gate support for the controlled-phase gate :class:`qiskit.circuit.library.CPhaseGate` to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and the ``\"statevector\"``, ``\"density_matrix\"``, and ``\"matrix_product_state\"`` methods of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:1517
msgid "Adds support for the multi-controlled phase gate :class:`qiskit.circuit.library.MCPhaseGate` to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and the ``\"statevector\"`` method of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:1524
msgid "Adds support for the :math:`\\sqrt(X)` gate :class:`qiskit.circuit.library.SXGate` to the class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:1530
msgid "Adds support for 1 and 2-qubit Qiskit circuit library rotation gates :class:`~qiskit.circuit.library.RXGate`, :class:`~qiskit.circuit.library.RYGate`, :class:`~qiskit.circuit.library.RZGate`, :class:`~qiskit.circuit.library.RGate`, :class:`~qiskit.circuit.library.RXXGate`, :class:`~qiskit.circuit.library.RYYGate`, :class:`~qiskit.circuit.library.RZZGate`, :class:`~qiskit.circuit.library.RZXGate` to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and the ``\"statevector\"`` and ``\"density_matrix\"`` methods of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:1540
msgid "Adds support for multi-controlled rotation gates ``\"mcr\"``, ``\"mcrx\"``, ``\"mcry\"``, ``\"mcrz\"`` to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and the ``\"statevector\"`` method of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:1547
msgid "Make simulator backends configurable. This allows setting persistant options such as simulation method and noise model for each simulator backend object."
msgstr ""

#: ../../release_notes.rst:1550
msgid "The :class:`~qiskit.providers.aer.QasmSimulator` and :class:`~qiskit.providers.aer.PulseSimulator` can also be configured from an :class:`~qiskit.providers.ibmq.IBMQBackend` backend object using the `:meth:`~qiskit.providers.aer.QasmSimulator.from_backend` method. For the :class:`~qiskit.providers.aer.QasmSimulator` this will configure the coupling map, basis gates, and basic device noise model based on the backend configuration and properties. For the :class:`~qiskit.providers.aer.PulseSimulator` the system model and defaults will be configured automatically from the backend configuration, properties and defaults."
msgstr ""

#: ../../release_notes.rst:1560
msgid "For example a noisy density matrix simulator backend can be constructed as ``QasmSimulator(method='density_matrix', noise_model=noise_model)``, or an ideal matrix product state simulator as ``QasmSimulator(method='matrix_product_state')``."
msgstr ""

#: ../../release_notes.rst:1564
msgid "A benefit is that a :class:`~qiskit.providers.aer.PulseSimulator` instance configured from a backend better serves as a drop-in replacement to the original backend, making it easier to swap in and out a simulator and real backend, e.g. when testing code on a simulator before using a real backend. For example, in the following code-block, the :class:`~qiskit.providers.aer.PulseSimulator` is instantiated from the ``FakeArmonk()`` backend. All configuration and default data is copied into the simulator instance, and so when it is passed as an argument to ``assemble``, it behaves as if the original backend was supplied (e.g. defaults from ``FakeArmonk`` will be present and used by ``assemble``)."
msgstr ""

#: ../../release_notes.rst:1580
msgid "While the above example is small, the demonstrated 'drop-in replacement' behavior should greatly improve the usability in more complicated work-flows, e.g. when calibration experiments are constructed using backend attributes."
msgstr ""

#: ../../release_notes.rst:1584
msgid "Adds support for qobj global phase to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and statevector methods of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:1589
msgid "Improves general noisy statevector simulation performance by adding a Kraus method to the gate fusion circuit optimization that allows applying gate fusion to noisy statevector simulations with general Kraus noise."
msgstr ""

#: ../../release_notes.rst:1593
msgid "Use move semantics for statevector and density matrix snapshots for the `\"statevector\"` and `\"density_matrix\"` methods of the :class:`~qiskit.providers.aer.QasmSimulator` if they are the final instruction in a circuit. This reduces the memory usage of the simulator improves the performance by avoiding copying a large array in the results."
msgstr ""

#: ../../release_notes.rst:1600
msgid "Adds support for general Kraus :class:`~qiskit.providers.aer.noise.QauntumError` gate errors in the :class:`~qiskit.providers.aer.noise.NoiseModel` to the ``\"matrix_product_state\"`` method of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:1606
msgid "Adds support for density matrix snapshot instruction :class:`qiskit.providers.aer.extensions.SnapshotDensityMatrix` to the ``\"matrix_product_state\"`` method of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:1611
msgid "Extends the SIMD vectorization of the statevector simulation method to the unitary matrix, superoperator matrix, and density matrix simulation methods. This gives roughtly a 2x performance increase general simulation using the :class:`~qiskit.providers.aer.UnitarySimulator`, the ``\"density_matrix\"`` method of the :class:`~qiskit.providers.aer.QasmSimulator`, gate fusion, and noise simulation."
msgstr ""

#: ../../release_notes.rst:1618
msgid "Adds a custom vector class to C++ code that has better integration with Pybind11. This haves the memory requirement of the :class:`~qiskit.providers.aer.StatevectorSimulator` by avoiding an memory copy during Python binding of the final simulator state."
msgstr ""

#: ../../release_notes.rst:1629
msgid "AER now uses Lapack to perform some matrix related computations. It uses the Lapack library bundled with OpenBlas (already available in Linux and Macos typical OpenBlas dsitributions; Windows version distributed with AER) or with the accelerate framework in MacOS."
msgstr ""

#: ../../release_notes.rst:1634
msgid "The deprecated support for running qiskit-aer with Python 3.5 has been removed. To use qiskit-aer >=0.7.0 you will now need at least Python 3.6. If you are using Python 3.5 the last version which will work is qiskit-aer 0.6.x."
msgstr ""

#: ../../release_notes.rst:1639
msgid "Updates gate fusion default thresholds so that gate fusion will be applied to circuits with of more than 14 qubits for statevector simulations on the :class:`~qiskit.providers.aer.StatevectorSimulator` and :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:1644
msgid "For the ``\"density_matrix\"`` method of the :class:`~qiskit.providers.aer.QasmSimulator` and for the :class:`~qiskit.providers.aer.UnitarySimulator` gate fusion will be applied to circuits with more than 7 qubits."
msgstr ""

#: ../../release_notes.rst:1649
msgid "Custom qubit threshold values can be set using the ``fusion_threshold`` backend option ie ``backend.set_options(fusion_threshold=10)``"
msgstr ""

#: ../../release_notes.rst:1652
msgid "Changes ``fusion_threshold`` backend option to apply fusion when the number of qubits is above the threshold, not equal or above the threshold, to match the behavior of the OpenMP qubit threshold parameter."
msgstr ""

#: ../../release_notes.rst:1662
msgid ":meth:`qiskit.providers.aer.noise.NoiseModel.set_x90_single_qubit_gates` has been deprecated as unrolling to custom basis gates has been added to the qiskit transpiler. The correct way to use an X90 based noise model is to define noise on the Sqrt(X) ``\"sx\"`` or ``\"rx\"`` gate and one of the single-qubit phase gates ``\"u1\"``, ``\"rx\"``, or ``\"p\"`` in the noise model."
msgstr ""

#: ../../release_notes.rst:1668
msgid "The ``variance`` kwarg of Snapshot instructions has been deprecated. This function computed the sample variance in the snapshot due to noise model sampling, not the variance due to measurement statistics so was often being used incorrectly. If noise modeling variance is required single shot snapshots should be used so variance can be computed manually in post-processing."
msgstr ""

#: ../../release_notes.rst:1681
msgid "Fixes bug in the :class:`~qiskit.providers.aer.StatevectorSimulator` that caused it to always run as CPU with double-precision without SIMD/AVX2 support even on systems with AVX2, or when single-precision or the GPU method was specified in the backend options."
msgstr ""

#: ../../release_notes.rst:1686
msgid "Fixes some for-loops in C++ code that were iterating over copies rather than references of container elements."
msgstr ""

#: ../../release_notes.rst:1689
msgid "Fixes a bug where snapshot data was always copied from C++ to Python rather than moved where possible. This will halve memory usage and improve simulation time when using large statevector or density matrix snapshots."
msgstr ""

#: ../../release_notes.rst:1693
msgid "Fix `State::snapshot_pauli_expval` to return correct Y expectation value in stabilizer simulator. Refer to `#895 <https://github.com/Qiskit/qiskit-aer/issues/895>` for more details."
msgstr ""

#: ../../release_notes.rst:1698
msgid "The controller_execute wrappers have been adjusted to be functors (objects) rather than free functions. Among other things, this allows them to be used in multiprocessing.pool.map calls."
msgstr ""

#: ../../release_notes.rst:1702
msgid "Add missing available memory checks for the :class:`~qiskit.providers.aer.StatevectorSimulator` and :class:`~qiskit.providers.aer.UnitarySimulator`. This throws an exception if the memory required to simulate the number of qubits in a circuit exceeds the available memory of the system."
msgstr ""

#: ../../release_notes.rst:1712
msgid "Ignis 0.5.0"
msgstr ""

#: ../../release_notes.rst:1719
msgid "This release includes a new module for expectation value measurement error mitigation, improved plotting functionality for quantum volume experiments, several bug fixes, and drops support for Python 3.5."
msgstr ""

#: ../../release_notes.rst:1729
msgid "The :func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq` function allows an optional input of gate objects as `interleaved_elem`. In addition, the CNOT-Dihedral class :class:`qiskit.ignis.verification.randomized_benchmarking.CNOTDihedral` has a new method `to_instruction`, and the existing `from_circuit` method has an optional input of an `Instruction` (in addition to `QuantumCircuit`)."
msgstr ""

#: ../../release_notes.rst:1736
msgid "The :class:`qiskit.ignis.verification.randomized_benchmarking.CNOTDihedral` now contains the following new features. Initialization from various types of objects: `CNOTDihedral`, `ScalarOp`, `QuantumCircuit`, `Instruction` and `Pauli`. Converting to a matrix using `to_matrix` and to an operator using `to_operator`. Tensor product methods `tensor` and `expand`. Calculation of the adjoint, conjugate and transpose using `conjugate`, `adjoint` and `transpose` methods. Verify that an element is CNOTDihedral using `is_cnotdihedral` method. Decomposition method `to_circuit` of a CNOTDihedral element into a circuit was extended to allow any number of qubits, based on the function `decompose_cnotdihedral_general`."
msgstr ""

#: ../../release_notes.rst:1749
msgid "Adds expectation value measurement error mitigation to the mitigation module. This supports using *complete* N-qubit assignment matrix, single-qubit *tensored* assignment matrix, or *continuous time Markov process (CTMP)* [1] measurement error mitigation when computing expectation values of diagonal operators from counts dictionaries. Expectation values are computed using the using the :func:`qiskit.ignis.mitigation.expectation_value` function."
msgstr ""

#: ../../release_notes.rst:1756
msgid "Calibration circuits for calibrating a measurement error mitigator are generated using the :func:`qiskit.ignis.mitigation.expval_meas_mitigator_circuits` function, and the result fitted using the :class:`qiskit.ignis.mitigation.ExpvalMeasMitigatorFitter` class. The fitter returns a mitigator object can the be supplied as an argument to the :func:`~qiskit.ignis.mitigation.expectation_value` function to apply mitigation."
msgstr ""

#: ../../release_notes.rst:1765
msgid "[1] S Bravyi, S Sheldon, A Kandala, DC Mckay, JM Gambetta,"
msgstr ""

#: ../../release_notes.rst:1764
msgid "*Mitigating measurement errors in multi-qubit experiments*, arXiv:2006.14044 [quant-ph]."
msgstr ""

#: ../../release_notes.rst:1767 ../../release_notes.rst:5766
msgid "Example:"
msgstr ""

#: ../../release_notes.rst:1769
msgid "The following example shows calibrating a 5-qubit expectation value measurement error mitigator using the ``'tensored'`` method."
msgstr ""

#: ../../release_notes.rst:1792
msgid "The following shows how to use the above mitigator to apply measurement error mitigation to expectation value computations"
msgstr ""

#: ../../release_notes.rst:1822
msgid "Adds Numba as an optional dependency. Numba is used to significantly increase the performance of the :class:`qiskit.ignis.mitigation.CTMPExpvalMeasMitigator` class used for expectation value measurement error mitigation with the CTMP method."
msgstr ""

#: ../../release_notes.rst:1828
msgid "Add two methods to :class:`qiskit.ignis.verification.quantum_volume.QVFitter`."
msgstr ""

#: ../../release_notes.rst:1830
msgid ":meth:`qiskit.ignis.verification.quantum_volume.QVFitter.calc_z_value` to calculate z value in standard normal distribution using mean and standard deviation sigma. If sigma = 0, it raises a warning and assigns a small value (1e-10) for sigma so that the code still runs."
msgstr ""

#: ../../release_notes.rst:1834
msgid ":meth:`qiskit.ignis.verification.quantum_volume.QVFitter.calc_confidence_level` to calculate confidence level using z value."
msgstr ""

#: ../../release_notes.rst:1838
msgid "Store confidence level even when hmean < 2/3 in :meth:`qiskit.ignis.verification.quantum_volume.QVFitter.qv_success`."
msgstr ""

#: ../../release_notes.rst:1841
msgid "Add explanations for how to calculate statistics based on binomial distribution in :meth:`qiskit.ignis.verification.quantum_volume.QVFitter.calc_statistics`."
msgstr ""

#: ../../release_notes.rst:1845
msgid "The :class:`qiskit.ignis.verification.QVFitter` method :meth:`~qiskit.ignis.verification.QVFitter.plot_qv_data` has been updated to return a ``matplotlib.Figure`` object. Previously, it would not return anything. By returning a figure this makes it easier to integrate the visualizations into a larger ``matplotlib`` workflow."
msgstr ""

#: ../../release_notes.rst:1850
msgid "The error bars in the figure produced by the :class:`qiskit.ignis.verification.QVFitter` method :meth:`qiskit.ignis.verification.QVFitter.plot_qv_data` has been updated to represent two-sigma confidence intervals. Previously, the error bars represent one-sigma confidence intervals. The success criteria of Quantum Volume benchmarking requires heavy output probability > 2/3 with one-sided two-sigma confidence (~97.7%). Changing error bars to represent two-sigma confidence intervals allows easily identification of success in the figure."
msgstr ""

#: ../../release_notes.rst:1859
msgid "A new kwarg, ``figsize`` has been added to the :class:`qiskit.ignis.verification.QVFitter` method :meth:`qiskit.ignis.verification.QVFitter.plot_qv_data`. This kwarg takes in a tuple of the form ``(x, y)`` where ``x`` and ``y`` are the dimension in inches to make the generated plot."
msgstr ""

#: ../../release_notes.rst:1865
msgid "The :meth:`qiskit.ignis.verification.quantum_volume.QVFitter.plot_hop_accumulative` method has been added to plot heavy output probability (HOP) vs number of trials similar to Figure 2a of Quantum Volume 64 paper (`arXiv:2008.08571 <https://arxiv.org/abs/2008.08571>`_). HOP of individual trials are plotted as scatters and cummulative HOP are plotted in red line. Two-sigma confidence intervals are plotted as shaded area and 2/3 success threshold is plotted as dashed line."
msgstr ""

#: ../../release_notes.rst:1872
msgid "The :meth:`qiskit.ignis.verification.quantum_volume.QVFitter.plot_qv_trial` method has been added to plot individual trials, leveraging on the :meth:`qiskit.visualization.plot_histogram` method from Qiskit Terra. Bitstring counts are plotted as overlapping histograms for ideal (hollow) and experimental (filled) values. Experimental heavy output probability are shown on the legend. Median probability is plotted as red dashed line."
msgstr ""

#: ../../release_notes.rst:1886
msgid "The deprecated support for running qiskit-ignis with Python 3.5 has been removed. To use qiskit-ignis >=0.5.0 you will now need at least Python 3.6. If you are using Python 3.5 the last version which will work is qiskit-ignis 0.4.x."
msgstr ""

#: ../../release_notes.rst:1898
msgid "Fixing a bug in the class :class:`qiskit.ignis.verification.randomized_benchmarking.CNOTDihedral` for elements with more than 5 quits."
msgstr ""

#: ../../release_notes.rst:1902
msgid "Fix the confidence level threshold for :meth:`qiskit.ignis.verification.quantum_volume.QVFitter.qv_success` to 0.977 corresponding to z = 2 as defined by the QV paper Algorithm 1."
msgstr ""

#: ../../release_notes.rst:1906
msgid "Fix a bug at :func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq` which caused all the subsystems with the same size in the given rb_pattern to have the same gates when a 'rand_seed' parameter was given to the function."
msgstr ""

#: ../../release_notes.rst:1912
msgid "Aqua 0.8.0"
msgstr ""

#: ../../release_notes.rst:1919
msgid "This release introduces an interface for running the available methods for Bosonic problems. In particular we introduced a full interface for running vibronic structure calculations."
msgstr ""

#: ../../release_notes.rst:1923
msgid "This release introduces an interface for excited states calculations. It is now easier for the user to create a general excited states calculation. This calculation is based on a Driver which provides the relevant information about the molecule, a Transformation which provides the information about the mapping of the problem into a qubit Hamiltonian, and finally a Solver. The Solver is the specific way which the excited states calculation is done (the algorithm). This structure follows the one of the ground state calculations. The results are modified to take lists of expectation values instead of a single one. The QEOM and NumpyEigensolver are adapted to the new structure. A factory is introduced to run a numpy eigensolver with a specific filter  (to target states of specific symmetries)."
msgstr ""

#: ../../release_notes.rst:1935 ../../release_notes.rst:4519
msgid "VQE expectation computation with Aer qasm_simulator now defaults to a computation that has the expected shot noise behavior."
msgstr ""

#: ../../release_notes.rst:1944
msgid "Introduced an option `warm_start` that should be used when tuning other options does not help. When this option is enabled, a relaxed problem (all variables are continuous) is solved first and the solution is used to initialize the state of the optimizer before it starts the iterative process in the `solve` method."
msgstr ""

#: ../../release_notes.rst:1949
msgid "The amplitude estimation algorithms now use ``QuantumCircuit`` objects as inputs to specify the A- and Q operators. This change goes along with the introduction of the ``GroverOperator`` in the circuit library, which allows an intuitive and fast construction of different Q operators. For example, a Bernoulli-experiment can now be constructed as"
msgstr ""

#: ../../release_notes.rst:1981
msgid "Add the possibility to compute Conditional Value at Risk (CVaR) expectation values."
msgstr ""

#: ../../release_notes.rst:1984
msgid "Given a diagonal observable H, often corresponding to the objective function of an optimization problem, we are often not as interested in minimizing the average energy of our observed measurements. In this context, we are satisfied if at least some of our measurements achieve low energy. (Note that this is emphatically not the case for chemistry problems)."
msgstr ""

#: ../../release_notes.rst:1990
msgid "To this end, one might consider using the best observed sample as a cost function during variational optimization. The issue here, is that this can result in a non-smooth optimization surface. To resolve this issue, we can smooth the optimization surface by using not just the best observed sample, but instead average over some fraction of best observed samples. This is exactly what the CVaR estimator accomplishes [1]."
msgstr ""

#: ../../release_notes.rst:1997
msgid "Let :math:`\\alpha` be a real number in :math:`[0,1]` which specifies the fraction of best observed samples which are used to compute the objective function. Observe that if :math:`\\alpha = 1`, CVaR is equivalent to a standard expectation value. Similarly, if :math:`\\alpha = 0`, then CVaR corresponds to using the best observed sample. Intermediate values of :math:`\\alpha` interpolate between these two objective functions."
msgstr ""

#: ../../release_notes.rst:2004
msgid "The functionality to use CVaR is included into the operator flow through a new subclass of OperatorStateFn called CVaRMeasurement. This new StateFn object is instantied in the same way as an OperatorMeasurement with the exception that it also accepts an `alpha` parameter and that it automatically enforces the  `is_measurement` attribute to be True. Observe that it is unclear what a CVaRStateFn would represent were it not a measurement."
msgstr ""

#: ../../release_notes.rst:2011 ../../release_notes.rst:2022
#: ../../release_notes.rst:2097 ../../release_notes.rst:2146
#: ../../release_notes.rst:2170 ../../release_notes.rst:8358
msgid "Examples::"
msgstr ""

#: ../../release_notes.rst:2019
msgid "Similarly, an operator corresponding to a standard expectation value can be converted into a CVaR expectation using the CVaRExpectation converter."
msgstr ""

#: ../../release_notes.rst:2030
msgid "See [1] for additional details regarding this technique and it's empircal performance."
msgstr ""

#: ../../release_notes.rst:2033
msgid "References:"
msgstr ""

#: ../../release_notes.rst:2037
msgid "[1]: Barkoutsos, P. K., Nannicini, G., Robert, A., Tavernelli, I., and Woerner, S.,"
msgstr ""

#: ../../release_notes.rst:2036
msgid "\"Improving Variational Quantum Optimization using CVaR\" `arXiv:1907.04769 <https://arxiv.org/abs/1907.04769>`_"
msgstr ""

#: ../../release_notes.rst:2039
msgid "New  interface ``Eigensolver`` for Eigensolver algorithms."
msgstr ""

#: ../../release_notes.rst:2041
msgid "An interface for excited states calculation has been added to the chemistry module. It is now easier for the user to create a general excited states calculation. This calculation is based on a ``Driver`` which provides the relevant information about the molecule, a ``Transformation`` which provides the information about the mapping of the problem into a qubit Hamiltonian, and finally a Solver. The Solver is the specific way which the excited states calculation is done (the algorithm). This structure follows the one of the ground state calculations. The results are modified to take lists of expectation values instead of a single one. The ``QEOM`` and ``NumpyEigensolver`` are adapted to the new structure. A factory is introduced to run a numpy eigensolver with a specific filter (to target states of specific symmetries)."
msgstr ""

#: ../../release_notes.rst:2053
msgid "In addition to the workflows for solving Fermionic problems, interfaces for calculating Bosonic ground and excited states have been added. In particular we introduced a full interface for running vibronic structure calculations."
msgstr ""

#: ../../release_notes.rst:2057
msgid "The ``OrbitalOptimizationVQE`` has been added as new ground state solver in the chemistry module. This solver allows for the simulatneous optimization of the variational parameters and the orbitals of the molecule. The algorithm is introduced in Sokolov et al., The Journal of Chemical Physics 152 (12)."
msgstr ""

#: ../../release_notes.rst:2062
msgid "A new algorithm has been added: the Born Openheimer Potential Energy surface for the calculation of potential energy surface along different degrees of freedom of the molecule. The algorithm is called ``BOPESSampler``. It further provides functionalities of fitting the potential energy surface to an analytic function of predefined potentials."
msgstr ""

#: ../../release_notes.rst:2067
msgid "A feasibility check of the obtained solution has been added to all optimizers in the optimization stack. This has been implemented by adding two new methods to ``QuadraticProgram``: * ``get_feasibility_info(self, x: Union[List[float], np.ndarray])`` accepts an array and returns whether this solution is feasible and a list of violated variables(violated bounds) and a list of violated constraints. * ``is_feasible(self, x: Union[List[float], np.ndarray])`` accepts an array and returns whether this solution is feasible or not."
msgstr ""

#: ../../release_notes.rst:2075
msgid "Add circuit-based versions of ``FixedIncomeExpectedValue``, ``EuropeanCallDelta``, ``GaussianConditionalIndependenceModel`` and ``EuropeanCallExpectedValue`` to ``qiskit.finance.applications``."
msgstr ""

#: ../../release_notes.rst:2079
msgid "Gradient Framework. :class:`qiskit.operators.gradients` Given an operator that represents either a quantum state resp. an expectation value, the gradient framework enables the evaluation of gradients, natural gradients, Hessians, as well as the Quantum Fisher Information."
msgstr ""

#: ../../release_notes.rst:2085
msgid "Suppose a parameterized quantum state `|ψ(θ)〉 = V(θ)|ψ〉` with input state `|ψ〉` and parametrized Ansatz `V(θ)`, and an Operator `O(ω)`."
msgstr ""

#: ../../release_notes.rst:2088
msgid "Gradients: We want to compute :math:`d⟨ψ(θ)|O(ω)|ψ(θ)〉/ dω` resp. :math:`d⟨ψ(θ)|O(ω)|ψ(θ)〉/ dθ` resp. :math:`d⟨ψ(θ)|i〉⟨i|ψ(θ)〉/ dθ`."
msgstr ""

#: ../../release_notes.rst:2092
msgid "The last case corresponds to the gradient w.r.t. the sampling probabilities of `|ψ(θ)`. These gradients can be computed with different methods, i.e. a parameter shift, a linear combination of unitaries and a finite difference method."
msgstr ""

#: ../../release_notes.rst:2121
msgid "Hessians: We want to compute :math:`d^2⟨ψ(θ)|O(ω)|ψ(θ)〉/ dω^2` resp. :math:`d^2⟨ψ(θ)|O(ω)|ψ(θ)〉/ dθ^2` resp. :math:`d^2⟨ψ(θ)|O(ω)|ψ(θ)〉/ dθdω` resp. :math:`d^2⟨ψ(θ)|i〉⟨i|ψ(θ)〉/ dθ^2`."
msgstr ""

#: ../../release_notes.rst:2126
msgid "The last case corresponds to the Hessian w.r.t. the sampling probabilities of `|ψ(θ)`. Just as the first order gradients, the Hessians can be evaluated with different methods, i.e. a parameter shift, a linear combination of unitaries and a finite difference method. Given a tuple of parameters ``Hessian().convert(op, param_tuple)`` returns the value for the second order derivative. If a list of parameters is given ``Hessian().convert(op, param_list)`` returns the full Hessian for all the given parameters according to the given parameter order."
msgstr ""

#: ../../release_notes.rst:2135
msgid "QFI: The Quantum Fisher Information `QFI` is a metric tensor which is representative for the representation capacity of a parameterized quantum state `|ψ(θ)〉 = V(θ)|ψ〉` generated by an input state `|ψ〉` and a parametrized Ansatz `V(θ)`. The entries of the `QFI` for a pure state read :math:`[QFI]kl= Re[〈∂kψ|∂lψ〉−〈∂kψ|ψ〉〈ψ|∂lψ〉] * 4`."
msgstr ""

#: ../../release_notes.rst:2141
msgid "Just as for the previous derivative types, the QFI can be computed using different methods: a full representation based on a linear combination of unitaries implementation, a block-diagonal and a diagonal representation based on an overlap method."
msgstr ""

#: ../../release_notes.rst:2159
msgid "The combination of the QFI and the gradient lead to a special form of a gradient, namely"
msgstr ""

#: ../../release_notes.rst:2162
msgid "NaturalGradients: The natural gradient is a special gradient method which rescales a gradient w.r.t. a state parameter with the inverse of the corresponding Quantum Fisher Information (QFI) :math:`QFI^-1 d⟨ψ(θ)|O(ω)|ψ(θ)〉/ dθ`. Hereby, we can choose a gradient as well as a QFI method and a regularization method which is used together with a least square solver instead of exact invertion of the QFI:"
msgstr ""

#: ../../release_notes.rst:2176
msgid "The gradient framework is also compatible with the optimizers from `qiskit.aqua.components.optimizers`. The derivative classes come with a `gradient_wrapper()` function which returns the corresponding callable."
msgstr ""

#: ../../release_notes.rst:2180
msgid "Introduces ``transformations`` for the fermionic and bosonic transformation of a problem instance. Transforms the fermionic operator to qubit operator. Respective class for the transformation is ``fermionic_transformation`` Introduces in algorithms ``ground_state_solvers`` for the calculation of ground state properties. The calculation can be done either using an ``MinimumEigensolver`` or using ``AdaptVQE`` Introduces ``chemistry/results`` where the eigenstate_result and the electronic_structure_result are also used for the algorithms. Introduces Minimum Eigensolver factories ``minimum_eigensolver_factories`` where chemistry specific minimum eigensolvers can be initialized Introduces orbital optimization vqe ``oovqe`` as a ground state solver for chemistry applications"
msgstr ""

#: ../../release_notes.rst:2192
msgid "New Algorithm result classes:"
msgstr ""

#: ../../release_notes.rst:2194
msgid ":class:`~qiskit.aqua.algorithms.Grover` method :meth:`~qiskit.aqua.algorithms.Grover._run` returns class :class:`~qiskit.aqua.algorithms.GroverResult`. :class:`~qiskit.aqua.algorithms.AmplitudeEstimation` method :meth:`~qiskit.aqua.algorithms.AmplitudeEstimation._run` returns class :class:`~qiskit.aqua.algorithms.AmplitudeEstimationResult`. :class:`~qiskit.aqua.algorithms.IterativeAmplitudeEstimation` method :meth:`~qiskit.aqua.algorithms.IterativeAmplitudeEstimation._run` returns class :class:`~qiskit.aqua.algorithms.IterativeAmplitudeEstimationResult`. :class:`~qiskit.aqua.algorithms.MaximumLikelihoodAmplitudeEstimation` method :meth:`~qiskit.aqua.algorithms.MaximumLikelihoodAmplitudeEstimation._run` returns class :class:`~qiskit.aqua.algorithms.MaximumLikelihoodAmplitudeEstimationResult`."
msgstr ""

#: ../../release_notes.rst:2207 ../../release_notes.rst:2218
msgid "All new result classes are backwards compatible with previous result dictionary."
msgstr ""

#: ../../release_notes.rst:2209
msgid "New Linear Solver result classes:"
msgstr ""

#: ../../release_notes.rst:2211
msgid ":class:`~qiskit.aqua.algorithms.HHL` method :meth:`~qiskit.aqua.algorithms.HHL._run` returns class :class:`~qiskit.aqua.algorithms.HHLResult`. :class:`~qiskit.aqua.algorithms.NumPyLSsolver` method :meth:`~qiskit.aqua.algorithms.NumPyLSsolver._run` returns class :class:`~qiskit.aqua.algorithms.NumPyLSsolverResult`."
msgstr ""

#: ../../release_notes.rst:2220
msgid "``MinimumEigenOptimizationResult`` now exposes properties: ``samples`` and ``eigensolver_result``. The latter is obtained from the underlying algorithm used by the optimizer and specific to the algorithm. ``RecursiveMinimumEigenOptimizer`` now returns an instance of the result class ``RecursiveMinimumEigenOptimizationResult`` which in turn may contains intermediate results obtained from the underlying algorithms. The dedicated result class exposes properties ``replacements`` and ``history`` that are specific to this optimizer. The depth of the history is managed by the ``history`` parameter of the optimizer."
msgstr ""

#: ../../release_notes.rst:2229
msgid "``GroverOptimizer`` now returns an instance of ``GroverOptimizationResult`` and this result class exposes properties ``operation_counts``, ``n_input_qubits``, and ``n_output_qubits`` directly. These properties are not available in the ``raw_results`` dictionary anymore."
msgstr ""

#: ../../release_notes.rst:2233
msgid "``SlsqpOptimizer`` now returns an instance of ``SlsqpOptimizationResult`` and this result class exposes additional properties specific to the SLSQP implementation."
msgstr ""

#: ../../release_notes.rst:2236
msgid "Support passing ``QuantumCircuit`` objects as generator circuits into the ``QuantumGenerator``."
msgstr ""

#: ../../release_notes.rst:2239
msgid "Removes the restriction to real input vectors in CircuitStateFn.from_vector. The method calls extensions.Initialize. The latter explicitly supports (in API and documentation) complex input vectors. So this restriction seems unnecessary."
msgstr ""

#: ../../release_notes.rst:2243
msgid "Simplified `AbelianGrouper` using a graph coloring algorithm of retworkx. It is faster than the numpy-based coloring algorithm."
msgstr ""

#: ../../release_notes.rst:2246
msgid "Allow calling ``eval`` on state function objects with no argument, which returns the ``VectorStateFn`` representation of the state function. This is consistent behavior with ``OperatorBase.eval``, which returns the ``MatrixOp`` representation, if no argument is passed."
msgstr ""

#: ../../release_notes.rst:2251
msgid "Adds ``max_iterations`` to the ``VQEAdapt`` class in order to allow limiting the maximum number of iterations performed by the algorithm."
msgstr ""

#: ../../release_notes.rst:2254
msgid "VQE expectation computation with Aer qasm_simulator now defaults to a computation that has the expected shot noise behavior. The special Aer snapshot based computation, that is much faster, with the ideal output similar to state vector simulator, may still be chosen but like before Aqua 0.7 it now no longer defaults to this but can be chosen."
msgstr ""

#: ../../release_notes.rst:2266
msgid "Extension of the previous Analytic Quantum Gradient Descent (AQGD) classical optimizer with the AQGD with Epochs. Now AQGD performs the gradient descent optimization with a momentum term, analytic gradients, and an added customized step length schedule for parametrized quantum gates. Gradients are computed \"analytically\" using the quantum circuit when evaluating the objective function."
msgstr ""

#: ../../release_notes.rst:2273
msgid "The deprecated support for running qiskit-aqua with Python 3.5 has been removed. To use qiskit-aqua >=0.8.0 you will now need at least Python 3.6. If you are using Python 3.5 the last version which will work is qiskit-aqua 0.7.x."
msgstr ""

#: ../../release_notes.rst:2278
msgid "Added retworkx as a new dependency."
msgstr ""

#: ../../release_notes.rst:2286
msgid "The ``i_objective`` argument of the amplitude estimation algorithms has been renamed to ``objective_qubits``."
msgstr ""

#: ../../release_notes.rst:2289
msgid "TransformationType"
msgstr ""

#: ../../release_notes.rst:2291
msgid "QubitMappingType"
msgstr ""

#: ../../release_notes.rst:2293
msgid "Deprecate the ``CircuitFactory`` and derived types. The ``CircuitFactory`` has been introduced as temporary class when the ``QuantumCircuit`` missed some features necessary for applications in Aqua. Now that the circuit has all required functionality, the circuit factory can be removed. The replacements are shown in the following table."
msgstr ""

#: ../../release_notes.rst:2322 ../../release_notes.rst:4117
msgid "The ising convert classes :class:`qiskit.optimization.converters.QuadraticProgramToIsing` and :class:`qiskit.optimization.converters.IsingToQuadraticProgram` have been deprecated and will be removed in a future release. Instead the :class:`qiskit.optimization.QuadraticProgram` methods :meth:`~qiskit.optimization.QuadraticProgram.to_ising` and :meth:`~qiskit.optimization.QuadraticPrgraom.from_ising` should be used instead."
msgstr ""

#: ../../release_notes.rst:2331
msgid "Deprecate the ``WeightedSumOperator`` which has been ported to the circuit library as ``WeightedAdder`` in ``qiskit.circuit.library``."
msgstr ""

#: ../../release_notes.rst:2334
msgid "``Core Hamiltonian`` class is deprecated in favor of the ``FermionicTransformation`` ``Chemistry Operator`` class is deprecated in favor of the ``tranformations`` ``minimum_eigen_solvers/vqe_adapt`` is also deprecated and moved as an implementation of the ground_state_solver interface ``applications/molecular_ground_state_energy`` is deprecated in favor of ``ground_state_solver``"
msgstr ""

#: ../../release_notes.rst:2340
msgid "``Optimizer.SupportLevel`` nested enum is replaced by ``OptimizerSupportLevel`` and ``Optimizer.SupportLevel`` was removed. Use, for example, ``OptimizerSupportLevel.required`` instead of ``Optimizer.SupportLevel.required``."
msgstr ""

#: ../../release_notes.rst:2344
msgid "Deprecate the ``UnivariateVariationalDistribution`` and ``MultivariateVariationalDistribution`` as input to the ``QuantumGenerator``. Instead, plain ``QuantumCircuit`` objects can be used."
msgstr ""

#: ../../release_notes.rst:2349
msgid "Ignored `fast` and `use_nx` options of `AbelianGrouper.group_subops` to be removed in the future release."
msgstr ""

#: ../../release_notes.rst:2352 ../../release_notes.rst:4112
msgid "GSLS optimizer class deprecated ``__init__`` parameter ``max_iter`` in favor of ``maxiter``. SPSA optimizer class deprecated ``__init__`` parameter ``max_trials`` in favor of ``maxiter``. optimize_svm function deprecated ``max_iters`` parameter in favor of ``maxiter``. ADMMParameters class deprecated ``__init__`` parameter ``max_iter`` in favor of ``maxiter``."
msgstr ""

#: ../../release_notes.rst:2364
msgid "The UCCSD excitation list, comprising single and double excitations, was not being generated correctly when an active space was explicitly provided to UCSSD via the active_(un)occupied parameters."
msgstr ""

#: ../../release_notes.rst:2368
msgid "For the amplitude estimation algorithms, we define the number of oracle queries as number of times the Q operator/Grover operator is applied. This includes the number of shots. That factor has been included in MLAE and IQAE but was missing in the 'standard' QAE."
msgstr ""

#: ../../release_notes.rst:2373
msgid "Fix CircuitSampler.convert, so that the ``is_measurement`` property is propagated to converted StateFns."
msgstr ""

#: ../../release_notes.rst:2376
msgid "Fix double calculation of coefficients in :meth`~qiskit.aqua.operators.VectorStateFn.to_circuit_op`."
msgstr ""

#: ../../release_notes.rst:2379
msgid "Calling PauliTrotterEvolution.convert on an operator including a term that is a scalar multiple of the identity gave an incorrect circuit, one that ignored the scalar coefficient. This fix includes the effect of the coefficient in the global_phase property of the circuit."
msgstr ""

#: ../../release_notes.rst:2384
msgid "Make ListOp.num_qubits check that all ops in list have the same num_qubits Previously, the number of qubits in the first operator in the ListOp was returned. With this change, an additional check is made that all other operators also have the same number of qubits."
msgstr ""

#: ../../release_notes.rst:2389
msgid "Make PauliOp.exp_i() generate the correct matrix with the following changes. 1) There was previously an error in the phase of a factor of 2. 2) The global phase was ignored when converting the circuit to a matrix. We now use qiskit.quantum_info.Operator, which is generally useful for converting a circuit to a unitary matrix, when possible."
msgstr ""

#: ../../release_notes.rst:2396
msgid "Fixes the cyclicity detection as reported buggy in https://github.com/Qiskit/qiskit-aqua/issues/1184."
msgstr ""

#: ../../release_notes.rst:2401
msgid "IBM Q Provider 0.11.0"
msgstr ""

#: ../../release_notes.rst:2408
msgid "The deprecated support for running qiskit-ibmq-provider with Python 3.5 has been removed. To use qiskit-ibmq-provider >=0.11.0 you will now need at least Python 3.6. If you are using Python 3.5 the last version which will work is qiskit-ibmq-provider 0.10.x."
msgstr ""

#: ../../release_notes.rst:2413
msgid "Prior to this release, ``websockets`` 7.0 was used for Python 3.6. With this release, ``websockets`` 8.0 or above is required for all Python versions. The package requirements have been updated to reflect this."
msgstr ""

#: ../../release_notes.rst:2420
msgid "Qiskit 0.22.0"
msgstr ""

#: ../../release_notes.rst:2423 ../../release_notes.rst:2497
#: ../../release_notes.rst:2551
msgid "Terra 0.15.2"
msgstr ""

#: ../../release_notes.rst:2428 ../../release_notes.rst:2502
#: ../../release_notes.rst:2613 ../../release_notes.rst:3761
msgid "Aer 0.6.1"
msgstr ""

#: ../../release_notes.rst:2433 ../../release_notes.rst:2507
#: ../../release_notes.rst:2618 ../../release_notes.rst:3947
msgid "Ignis 0.4.0"
msgstr ""

#: ../../release_notes.rst:2438 ../../release_notes.rst:2512
#: ../../release_notes.rst:2623 ../../release_notes.rst:4075
msgid "Aqua 0.7.5"
msgstr ""

#: ../../release_notes.rst:2443
msgid "IBM Q Provider 0.10.0"
msgstr ""

#: ../../release_notes.rst:2450
msgid "CQC randomness extractors can now be invoked asynchronously, using methods :meth:`~qiskit.providers.ibmq.random.CQCExtractor.run_async_ext1` and :meth:`~qiskit.providers.ibmq.random.CQCExtractor.run_async_ext2`. Each of these methods returns a :class:`~qiskit.providers.ibmq.random.CQCExtractorJob` instance that allows you to check on the job status (using :meth:`~qiskit.providers.ibmq.random.CQCExtractorJob.status`) and wait for its result (using :meth:`~qiskit.providers.ibmq.random.CQCExtractorJob.block_until_ready`). The :meth:`qiskit.provider.ibmq.random.CQCExtractor.run` method remains synchronous."
msgstr ""

#: ../../release_notes.rst:2461
msgid "You can now use the new IBMQ experiment service to query, retrieve, and download experiment related data. Interface to this service is located in the new :mod:`qiskit.providers.ibmq.experiment` package. Note that this feature is still in beta, and not all accounts have access to it. It is also subject to heavy modification in both functionality and API without backward compatibility."
msgstr ""

#: ../../release_notes.rst:2468
msgid "Two Jupyter magic functions, the IQX dashboard and the backend widget, are updated to display backend reservations. If a backend has reservations scheduled in the next 24 hours, time to the next one and its duration are displayed (e.g. ``Reservation: in 6 hrs 30 min (60m)``). If there is a reservation and the backend is active, the backend status is displayed as ``active [R]``."
msgstr ""

#: ../../release_notes.rst:2481
msgid "Starting from this release, the `basis_gates` returned by :meth:`qiskit.providers.ibmq.IBMQBackend.configuration` may differ for each backend. You should update your program if it relies on the basis gates being ``['id','u1','u2','u3','cx']``. We recommend always using the :meth:`~qiskit.providers.ibmq.IBMQBackend.configuration` method to find backend configuration values instead of hard coding them."
msgstr ""

#: ../../release_notes.rst:2488
msgid "``qiskit-ibmq-provider`` release 0.10 requires ``qiskit-terra`` release 0.15 or above. The package metadata has been updated to reflect the new dependency."
msgstr ""

#: ../../release_notes.rst:2494
msgid "Qiskit 0.21.0"
msgstr ""

#: ../../release_notes.rst:2517
msgid "IBM Q Provider 0.9.0"
msgstr ""

#: ../../release_notes.rst:2524
msgid "You can now access the IBMQ random number services, such as the CQC randomness extractor, using the new package :mod:`qiskit.providers.ibmq.random`. Note that this feature is still in beta, and not all accounts have access to it. It is also subject to heavy modification in both functionality and API without backward compatibility."
msgstr ""

#: ../../release_notes.rst:2536
msgid "Fixes an issue that may raise a ``ValueError`` if :meth:`~qiskit.providers.ibmq.IBMQBackend.retrieve_job` is used to retrieve a job submitted via the IBM Quantum Experience Composer."
msgstr ""

#: ../../release_notes.rst:2540
msgid ":class:`~qiskit.providers.ibmq.managed.IBMQJobManager` has been updated so that if a time out happens while waiting for an old job to finish, the time out error doesn't prevent a new job to be submitted. Fixes `#737 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/737>`_"
msgstr ""

#: ../../release_notes.rst:2548
msgid "Qiskit 0.20.1"
msgstr ""

#: ../../release_notes.rst:2558
msgid "When accessing the ``definition`` attribute of a parameterized ``Gate`` instance, the generated ``QuantumCircuit`` had been generated with an invalid ``ParameterTable``, such that reading from ``QuantumCircuit.parameters`` or calling ``QuantumCircuit.bind_parameters`` would incorrectly report the unbound parameters. This has been resolved."
msgstr ""

#: ../../release_notes.rst:2564
msgid "``SXGate().inverse()`` had previously returned an 'sx_dg' gate with a correct ``definition`` but incorrect ``to_matrix``. This has been updated such that ``SXGate().inverse()`` returns an ``SXdgGate()`` and vice versa."
msgstr ""

#: ../../release_notes.rst:2568
msgid "``Instruction.inverse()``, when not overridden by a subclass, would in some cases return a ``Gate`` instance with an incorrect ``to_matrix`` method. The instances of incorrect ``to_matrix`` methods have been removed."
msgstr ""

#: ../../release_notes.rst:2572
msgid "For ``C3XGate`` with a non-zero ``angle``, inverting the gate via ``C3XGate.inverse()`` had previously generated an incorrect inverse gate. This has been corrected."
msgstr ""

#: ../../release_notes.rst:2576
msgid "The ``MCXGate`` modes have been updated to return a gate of the same mode when calling ``.inverse()``. This resolves an issue where in some cases, transpiling a circuit containing the inverse of an ``MCXVChain`` gate would raise an error."
msgstr ""

#: ../../release_notes.rst:2581
msgid "Previously, when creating a multiply controlled phase gate via ``PhaseGate.control``, an ``MCU1Gate`` gate had been returned. This has been had corrected so that an ``MCPhaseGate`` is returned."
msgstr ""

#: ../../release_notes.rst:2585
msgid "Previously, attempting to decompose a circuit containing an ``MCPhaseGate`` would raise an error due to an inconsistency in the definition of the ``MCPhaseGate``. This has been corrected."
msgstr ""

#: ../../release_notes.rst:2589
msgid "``QuantumCircuit.compose`` and ``DAGCircuit.compose`` had, in some cases, incorrectly translated conditional gates if the input circuit contained more than one ``ClassicalRegister``. This has been resolved."
msgstr ""

#: ../../release_notes.rst:2600
msgid "Extending circuits with differing registers updated the ``qregs`` and ``cregs`` properties accordingly, but not the ``qubits`` and ``clbits`` lists. As these are no longer generated from the registers but are cached lists, this lead to a discrepancy of registers and bits. This has been fixed and the ``extend`` method explicitly updates the cached bit lists."
msgstr ""

#: ../../release_notes.rst:2606
msgid "Fix bugs of the concrete implementations of meth:`~qiskit.circuit.ControlledGate.inverse` method which do not preserve the ``ctrl_state`` parameter."
msgstr ""

#: ../../release_notes.rst:2610
msgid "A bug was fixed that caused long pulse schedules to throw a recursion error."
msgstr ""

#: ../../release_notes.rst:2628 ../../release_notes.rst:4220
msgid "IBM Q Provider 0.8.0"
msgstr ""

#: ../../release_notes.rst:2635
msgid "Qiskit 0.20.0"
msgstr ""

#: ../../release_notes.rst:2638
msgid "Terra 0.15.1"
msgstr ""

#: ../../release_notes.rst:2646
msgid "The 0.15.0 release includes several new features and bug fixes. Some highlights for this release are:"
msgstr ""

#: ../../release_notes.rst:2649
msgid "This release includes the introduction of arbitrary basis translation to the transpiler. This includes support for directly targeting a broader range of device basis sets, e.g. backends implementing RZ, RY, RZ, CZ or iSwap gates."
msgstr ""

#: ../../release_notes.rst:2654
msgid "The :class:`~qiskit.circuit.QuantumCircuit` class now tracks global phase. This means controlling a circuit which has global phase now correctly adds a relative phase, and gate matrix definitions are now exact rather than equal up to a global phase."
msgstr ""

#: ../../release_notes.rst:2666
msgid "A new DAG class :class:`qiskit.dagcircuit.DAGDependency` for representing the dependency form of circuit, In this DAG, the nodes are operations (gates, measure, barrier, etc...) and the edges corresponds to non-commutation between two operations."
msgstr ""

#: ../../release_notes.rst:2671
msgid "Four new functions are added to :mod:`qiskit.converters` for converting back and forth to :class:`~qiskit.dagcircuit.DAGDependency`. These functions are:"
msgstr ""

#: ../../release_notes.rst:2674
msgid ":func:`~qiskit.converters.circuit_to_dagdependency` to convert from a :class:`~qiskit.circuit.QuantumCircuit` object to a :class:`~qiskit.dagcircuit.DAGDependency` object."
msgstr ""

#: ../../release_notes.rst:2677
msgid ":func:`~qiskit.converters.dagdependency_to_circuit` to convert from a :class:`~qiskit.dagcircuit.DAGDependency` object to a :class:`~qiskit.circuit.QuantumCircuit` object."
msgstr ""

#: ../../release_notes.rst:2680
msgid ":func:`~qiskit.converters.dag_to_dagdependency` to convert from a :class:`~qiskit.dagcircuit.DAGCircuit` object to a :class:`~qiskit.dagcircuit.DAGDependency` object."
msgstr ""

#: ../../release_notes.rst:2683
msgid ":func:`~qiskit.converters.dagdependency_to_dag` to convert from a :class:`~qiskit.dagcircuit.DAGDependency` object to a :class:`~qiskit.dagcircuit.DAGCircuit` object."
msgstr ""

#: ../../release_notes.rst:2699
msgid "Two new transpiler passes have been added to :mod:`qiskit.transpiler.passes` The first, :class:`~qiskit.transpiler.passes.UnrollCustomDefinitions`, unrolls all instructions in the circuit according to their :attr:`~qiskit.circuit.Instruction.definition` property, stopping when reaching either the specified ``basis_gates`` or a set of gates in the provided :class:`~qiskit.circuit.EquivalenceLibrary`. The second, :class:`~qiskit.transpiler.passes.BasisTranslator`, uses the set of translations in the provided :class:`~qiskit.circuit.EquivalenceLibrary` to re-write circuit instructions in a specified basis."
msgstr ""

#: ../../release_notes.rst:2710
msgid "A new ``translation_method`` keyword argument has been added to :func:`~qiskit.compiler.transpile` to allow selection of the method to be used for translating circuits to the available device gates. For example, ``transpile(circ, backend, translation_method='translator')``. Valid choices are:"
msgstr ""

#: ../../release_notes.rst:2716
msgid "``'unroller'``: to use the :class:`~qiskit.transpiler.passes.Unroller` pass"
msgstr ""

#: ../../release_notes.rst:2718
msgid "``'translator'``: to use the :class:`~qiskit.transpiler.passes.BasisTranslator` pass."
msgstr ""

#: ../../release_notes.rst:2720
msgid "``'synthesis'``: to use the :class:`~qiskit.transpiler.passes.UnitarySynthesis` pass."
msgstr ""

#: ../../release_notes.rst:2723
msgid "The  default value is ``'translator'``."
msgstr ""

#: ../../release_notes.rst:2725
msgid "A new class for handling counts result data, :class:`qiskit.result.Counts`, has been added. This class is a subclass of ``dict`` and can be interacted with like any other dictionary. But, it includes helper methods and attributes for dealing with counts results from experiments and also handles post processing and formatting of binary strings at object initialization. A :class:`~qiskit.result.Counts`  object can be created by passing a dictionary  of counts with the keys being either integers, hexadecimal strings of the form ``'0x4a'``,  binary strings of the form ``'0b1101'``, a bit string formatted across register and memory slots (ie ``'00 10'``), or a dit string. For example::"
msgstr ""

#: ../../release_notes.rst:2740
msgid "A new method for constructing :class:`qiskit.dagcircuit.DAGCircuit` objects has been added, :meth:`~qiskit.dagcircuit.DAGCircuit.from_networkx`. This method takes in a networkx ``MultiDiGraph`` object (in the format returned by :meth:`~qiskit.dagcircuit.DAGCircuit.to_networkx`) and will return a new :class:`~qiskit.dagcircuit.DAGCircuit` object. The intent behind this function is to enable transpiler pass authors to leverage networkx's `graph algorithm library <https://networkx.github.io/documentation/stable/reference/algorithms/index.html>`__ if a function is missing from the `retworkx API <https://retworkx.readthedocs.io/en/latest/api.html>`_. Although, hopefully in such casses an issue will be opened with `retworkx issue tracker <https://github.com/Qiskit/retworkx/issues>`__ (or even better a pull request submitted)."
msgstr ""

#: ../../release_notes.rst:2754
msgid "A new kwarg for ``init_qubits`` has been added to :func:`~qiskit.compiler.assemble` and :func:`~qiskit.execute.execute`. For backends that support this feature ``init_qubits`` can be used to control whether the backend executing the circuits inserts any initialization sequences at the start of each shot. By default this is set to ``True`` meaning that all qubits can assumed to be in the ground state at the start of each shot. However, when ``init_qubits`` is  set to ``False`` qubits will be uninitialized at the start of each experiment and between shots. Note, that the backend running the circuits has to support this feature for this flag to have any effect."
msgstr ""

#: ../../release_notes.rst:2765
msgid "A new kwarg ``rep_delay`` has been added to :func:`qiskit.compiler.assemble`, :func:`qiskit.execute.execute`, and the constructor for :class:`~qiskit.qobj.PulseQobjtConfig`.qiskit This new kwarg is used to denotes the time between program executions. It must be chosen from the list of valid values set as the ``rep_delays`` from a backend's :class:`~qiskit.providers.models.PulseBackendConfiguration` object which can be accessed as ``backend.configuration().rep_delays``)."
msgstr ""

#: ../../release_notes.rst:2774
msgid "The ``rep_delay`` kwarg will only work on backends which allow for dynamic repetition time. This will also be indicated in the :class:`~qiskit.providers.models.PulseBackendConfiguration` object for a backend as the ``dynamic_reprate_enabled`` attribute. If ``dynamic_reprate_enabled`` is ``False`` then the ``rep_time`` value specified for :func:`qiskit.compiler.assemble`, :func:`qiskit.execute.execute`, or the constructor for :class:`~qiskit.qobj.PulseQobjtConfig` will be used rather than ``rep_delay``. ``rep_time`` only allows users to specify the duration of a program, rather than the delay between programs."
msgstr ""

#: ../../release_notes.rst:2785
msgid "The ``qobj_schema.json`` JSON Schema file in :mod:`qiskit.schemas` has been updated to include the ``rep_delay`` as an optional configuration property for pulse qobjs."
msgstr ""

#: ../../release_notes.rst:2789
msgid "The ``backend_configuration_schema.json`` JSON Schema file in mod:`qiskit.schemas` has been updated to include ``rep_delay_range`` and ``default_rep_delay`` as optional properties for a pulse backend configuration."
msgstr ""

#: ../../release_notes.rst:2794
msgid "A new attribute, :attr:`~qiskit.circuit.QuantumCircuit.global_phase`, which is is used for tracking the global phase has been added to the :class:`qiskit.circuit.QuantumCircuit` class. For example::"
msgstr ""

#: ../../release_notes.rst:2805
msgid "The global phase may also be changed or queried with ``circ.global_phase`` in the above example. In either case the setting is in radians. If the circuit is converted to an instruction or gate the global phase is represented by two single qubit rotations on the first qubit."
msgstr ""

#: ../../release_notes.rst:2811
msgid "This allows for other methods and functions which consume a :class:`~qiskit.circuit.QuantumCircuit` object to take global phase into account. For example. with the :attr:`~qiskit.circuit.QuantumCircuit.global_phase` attribute the :meth:`~qiskit.circuit.Gate.to_matrix` method for a gate can now exactly correspond to its decompositions instead of just up to a global phase."
msgstr ""

#: ../../release_notes.rst:2819
msgid "The same attribute has also been added to the :class:`~qiskit.dagcircuit.DAGCircuit` class so that global phase can be tracked when converting between :class:`~qiskit.circuit.QuantumCircuit` and :class:`~qiskit.dagcircuit.DAGCircuit`."
msgstr ""

#: ../../release_notes.rst:2825
msgid "Two new classes, :class:`~qiskit.circuit.AncillaRegister` and :class:`~qiskit.circuit.AncillaQubit` have been added to the :mod:`qiskit.circuit` module. These are subclasses of :class:`~qiskit.circuit.QuantumRegister` and :class:`~qiskit.circuit.Qubit` respectively and enable marking qubits being ancillas. This will allow these qubits to be re-used in larger circuits and algorithms."
msgstr ""

#: ../../release_notes.rst:2832
msgid "A new method, :meth:`~qiskit.circuit.QuantumCircuit.control`, has been added to the :class:`~qiskit.circuit.QuantumCircuit`. This method will return a controlled version of the :class:`~qiskit.circuit.QuantumCircuit` object, with both open and closed controls. This functionality had previously only been accessible via the :class:`~qiskit.circuit.Gate` class."
msgstr ""

#: ../../release_notes.rst:2839
msgid "A new method :meth:`~qiskit.circuit.QuantumCircuit.repeat` has been added to the :class:`~qiskit.circuit.QuantumCircuit` class. It returns a new circuit object containing a specified number of repetitions of the original circuit. For example:"
msgstr ""

#: ../../release_notes.rst:2854
msgid "The parameters are copied by reference, meaning that if you update the parameters in one instance of the circuit all repetitions will be updated."
msgstr ""

#: ../../release_notes.rst:2858
msgid "A new method :meth:`~qiskit.circuit.QuantumCircuit.reverse_bits` has been added to the :class:`~qiskit.circuit.QuantumCircuit` class. This method will reverse the order of bits in a circuit (both quantum and classical bits). This can be used to switch a circuit from little-endian to big-endian and vice-versa."
msgstr ""

#: ../../release_notes.rst:2864
msgid "A new method, :meth:`~qiskit.transpiler.Layout.combine_into_edge_map()`, was added to the :class:`qiskit.transpiler.Layout` class. This method enables converting converting two :class:`~qiskit.transpiler.Layout` objects into a qubit map for composing two circuits."
msgstr ""

#: ../../release_notes.rst:2869
msgid "A new class, :class:`~qiskit.test.mock.utils.ConfigurableFakeBackend`, has been added to the :mod:`qiskit.test.mock.utils` module. This new class enables the creation of configurable mock backends for use in testing. For example::"
msgstr ""

#: ../../release_notes.rst:2886
msgid "will create a backend object with 100 qubits and all the other parameters specified in the constructor."
msgstr ""

#: ../../release_notes.rst:2889
msgid "A new method :meth:`~qiskit.circuit.EquivalenceLibrary.draw` has been added to the :class:`qiskit.circuit.EquivalenceLibrary` class. This method can be used for drawing the contents of an equivalence library, which can be useful for debugging. For example:"
msgstr ""

#: ../../release_notes.rst:2922
msgid "A new Phase instruction, :class:`~qiskit.pulse.SetPhase`, has been added to :mod:`qiskit.pulse`. This instruction sets the phase of the subsequent pulses to the specified phase (in radians. For example::"
msgstr ""

#: ../../release_notes.rst:2935
msgid "In this example, the phase of the pulses applied to ``DriveChannel(0)`` after the :class:`~qiskit.pulse.SetPhase` instruction will be set to :math:`\\pi` radians."
msgstr ""

#: ../../release_notes.rst:2939
msgid "A new pulse instruction :class:`~qiskit.pulse.ShiftFrequency` has been added to :mod:`qiskit.pulse.instructions`. This instruction enables shifting the frequency of a channel from its set frequency. For example::"
msgstr ""

#: ../../release_notes.rst:2950
msgid "In this example all the pulses applied to ``DriveChannel(0)`` after the :class:`~qiskit.pulse.ShiftFrequency` command will have the envelope a frequency decremented by 340MHz."
msgstr ""

#: ../../release_notes.rst:2954
msgid "A new method :meth:`~qiskit.circuit.ParameterExpression.conjugate` has been added to the :class:`~qiskit.circuit.ParameterExpression` class. This enables calling ``numpy.conj()`` without raising an error. Since a :class:`~qiskit.circuit.ParameterExpression` object is real, it will return itself. This behaviour is analogous to Python floats/ints."
msgstr ""

#: ../../release_notes.rst:2960
msgid "A new class :class:`~qiskit.circuit.library.PhaseEstimation` has been added to :mod:`qiskit.circuit.library`. This circuit library class is the circuit used in the original formulation of the phase estimation algorithm in `arXiv:quant-ph/9511026 <https://arxiv.org/pdf/quant-ph/9511026.pdf>`__. Phase estimation is the task to to estimate the phase :math:`\\phi` of an eigenvalue :math:`e^{2\\pi i\\phi}` of a unitary operator :math:`U`, provided with the corresponding eigenstate :math:`|psi\\rangle`. That is"
msgstr ""

#: ../../release_notes.rst:2969
msgid "U|\\psi\\rangle = e^{2\\pi i\\phi} |\\psi\\rangle"
msgstr ""

#: ../../release_notes.rst:2973
msgid "This estimation (and thereby this circuit) is a central routine to several well-known algorithms, such as Shor's algorithm or Quantum Amplitude Estimation."
msgstr ""

#: ../../release_notes.rst:2977
msgid "The :mod:`qiskit.visualization` function :func:`~qiskit.visualization.plot_state_qsphere` has a new kwarg ``show_state_labels`` which is used to control whether each blob in the qsphere visualization is labeled. By default this kwarg is set to ``True`` and shows the basis states next to each blob by default. This feature can be disabled, reverting to the previous behavior, by setting the ``show_state_labels`` kwarg to ``False``."
msgstr ""

#: ../../release_notes.rst:2985
msgid "The :mod:`qiskit.visualization` function :func:`~qiskit.visualization.plot_state_qsphere` has a new kwarg ``show_state_phases`` which is set to ``False`` by default. When set to ``True`` it displays the phase of each basis state."
msgstr ""

#: ../../release_notes.rst:2990
msgid "The :mod:`qiskit.visualization` function :func:`~qiskit.visualization.plot_state_qsphere` has a new kwarg ``use_degrees`` which is set to ``False`` by default. When set to ``True`` it displays the phase of each basis state in degrees, along with the phase circle at the bottom right."
msgstr ""

#: ../../release_notes.rst:2996
msgid "A new class, :class:`~qiskit.circuit.library.QuadraticForm` to the :mod:`qiskit.circuit.library` module for implementing a a quadratic form on binary variables. The circuit library element implements the operation"
msgstr ""

#: ../../release_notes.rst:3000
msgid "|x\\rangle |0\\rangle \\mapsto |x\\rangle |Q(x) \\mod 2^m\\rangle"
msgstr ""

#: ../../release_notes.rst:3004
msgid "for the quadratic form :math:`Q` and :math:`m` output qubits. The result is in the :math:`m` output qubits is encoded in two's complement. If :math:`m` is not specified, the circuit will choose the minimal number of qubits required to represent the result without applying a modulo operation. The quadratic form is specified using a matrix for the quadratic terms, a vector for the linear terms and a constant offset. If all terms are integers, the circuit implements the quadratic form exactly, otherwise it is only an approximation."
msgstr ""

#: ../../release_notes.rst:3026
msgid "Add :meth:`qiskit.quantum_info.Statevector.expectation_value` and :meth:`qiskit.quantum_info.DensityMatrix.expectation_value` methods for computing the expectation value of an :class:`qiskit.quantum_info.Operator`."
msgstr ""

#: ../../release_notes.rst:3030
msgid "For the ``seed`` kwarg in the constructor for :class:`qiskit.circuit.library.QuantumVolume` `numpy random Generator objects <https://numpy.org/doc/stable/reference/random/generator.html>`__ can now be used. Previously, only integers were a valid input. This is useful when integrating :class:`~qiskit.circuit.library.QuantumVolume` as part of a larger function with its own random number generation, e.g. generating a sequence of :class:`~qiskit.circuit.library.QuantumVolume` circuits."
msgstr ""

#: ../../release_notes.rst:3039
msgid "The :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.compose` has a new kwarg ``front`` which can be used for prepending the other circuit before the origin circuit instead of appending. For example:"
msgstr ""

#: ../../release_notes.rst:3056
msgid "Two new passes, :class:`~qiskit.transpiler.passes.SabreLayout` and :class:`~qiskit.transpiler.passes.SabreSwap` for layout and routing have been added to :mod:`qiskit.transpiler.passes`. These new passes are based on the algorithm presented in Li et al., \"Tackling the Qubit Mapping Problem for NISQ-Era Quantum Devices\", ASPLOS 2019. They can also be selected when using the :func:`~qiskit.compiler.transpile` function by setting the ``layout_method`` kwarg to ``'sabre'`` and/or the ``routing_method`` to ``'sabre'`` to use :class:`~qiskit.transpiler.passes.SabreLayout` and :class:`~qiskit.transpiler.passes.SabreSwap` respectively."
msgstr ""

#: ../../release_notes.rst:3067
msgid "Added the method :meth:`~qiskit.pulse.Schedule.replace` to the :class:`qiskit.pulse.Schedule` class which allows a pulse instruction to be replaced with another. For example::"
msgstr ""

#: ../../release_notes.rst:3073
msgid "from qiskit import pulse"
msgstr ""

#: ../../release_notes.rst:3075
msgid "d0 = pulse.DriveChannel(0)"
msgstr ""

#: ../../release_notes.rst:3077
msgid "sched = pulse.Schedule()"
msgstr ""

#: ../../release_notes.rst:3079
msgid "old = pulse.Play(pulse.Constant(100, 1.0), d0) new = pulse.Play(pulse.Constant(100, 0.1), d0)"
msgstr ""

#: ../../release_notes.rst:3082
msgid "sched += old"
msgstr ""

#: ../../release_notes.rst:3084
msgid "sched = sched.replace(old, new)"
msgstr ""

#: ../../release_notes.rst:3086
msgid "assert sched == pulse.Schedule(new)"
msgstr ""

#: ../../release_notes.rst:3088
msgid "Added new gate classes to :mod:`qiskit.circuit.library` for the :math:`\\sqrt{X}`, its adjoint :math:`\\sqrt{X}^\\dagger`, and controlled :math:`\\sqrt{X}` gates as :class:`~qiskit.circuit.library.SXGate`, :class:`~qiskit.circuit.library.SXdgGate`, and :class:`~qiskit.circuit.library.CSXGate`. They can also be added to a :class:`~qiskit.circuit.QuantumCircuit` object using the :meth:`~qiskit.circuit.QuantumCircuit.sx`, :meth:`~qiskit.circuit.QuantumCircuit.sxdg`, and :meth:`~qiskit.circuit.QuantumCircuit.csx` respectively."
msgstr ""

#: ../../release_notes.rst:3099
msgid "Add support for :class:`~qiskit.circuit.Reset` instructions to :meth:`qiskit.quantum_info.Statevector.from_instruction`. Note that this involves RNG sampling in choosing the projection to the zero state in the case where the qubit is in a superposition state. The seed for sampling can be set using the :meth:`~qiskit.quantum_info.Statevector.seed` method."
msgstr ""

#: ../../release_notes.rst:3105
msgid "The methods :meth:`qiskit.circuit.ParameterExpression.subs` and :meth:`qiskit.circuit.QuantumCircuit.assign_parameters` now accept :class:`~qiskit.circuit.ParameterExpression` as the target value to be substituted."
msgstr ""

#: ../../release_notes.rst:3110
msgid "For example,"
msgstr ""

#: ../../release_notes.rst:3129
msgid "The :meth:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.to_gate` has a new kwarg ``label`` which can be used to set a label for for the output :class:`~qiskit.circuit.Gate` object. For example:"
msgstr ""

#: ../../release_notes.rst:3146
msgid "Added the :class:`~qiskit.circuit.library.UGate`, :class:`~qiskit.circuit.library.CUGate`, :class:`~qiskit.circuit.library.PhaseGate`, and :class:`~qiskit.circuit.library.CPhaseGate` with the corresponding :class:`~qiskit.circuit.QuantumCircuit` methods :meth:`~qiskit.circuit.QuantumCircuit.u`, :meth:`~qiskit.circuit.QuantumCircuit.cu`, :meth:`~qiskit.circuit.QuantumCircuit.p`, and :meth:`~qiskit.circuit.QuantumCircuit.cp`. The :class:`~qiskit.circuit.library.UGate` gate is the generic single qubit rotation gate with 3 Euler angles and the :class:`~qiskit.circuit.library.CUGate` gate its controlled version. :class:`~qiskit.circuit.library.CUGate` has 4 parameters to account for a possible global phase of the U gate. The :class:`~qiskit.circuit.library.PhaseGate` and :class:`~qiskit.circuit.library.CPhaseGate` gates are the general Phase gate at an arbitrary angle and it's controlled version."
msgstr ""

#: ../../release_notes.rst:3164
msgid "A new kwarg, ``cregbundle`` has been added to the :func:`qiskit.visualization.circuit_drawer` function and the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.draw`. When set to ``True`` the cregs will be bundled into a single line in circuit visualizations for the ``text`` and ``mpl`` drawers. The default value is ``True``. Addresses issue `#4290 <https://github.com/Qiskit/qiskit-terra/issues/4290>`_."
msgstr ""

#: ../../release_notes.rst:3181
msgid "A new kwarg, ``initial_state`` has been added to the :func:`qiskit.visualization.circuit_drawer` function and the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.draw`. When set to ``True`` the initial state will now be included in circuit visualizations for all drawers. Addresses issue `#4293 <https://github.com/Qiskit/qiskit-terra/issues/4293>`_."
msgstr ""

#: ../../release_notes.rst:3197
msgid "Labels will now be displayed when using the 'mpl' drawer. There are 2 types of labels - gate labels and control labels. Gate labels will replace the gate name in the display. Control labels will display above or below the controls for a gate. Fixes issues #3766, #4580 Addresses issues `#3766 <https://github.com/Qiskit/qiskit-terra/issues/3766>`_ and `#4580 <https://github.com/Qiskit/qiskit-terra/issues/4580>`_."
msgstr ""

#: ../../release_notes.rst:3221
msgid "Implementations of the multi-controlled X Gate ( :class:`~qiskit.circuit.library.MCXGrayCode`, :class:`~qiskit.circuit.library.MCXRecursive`, and :class:`~qiskit.circuit.library.MCXVChain`) have had their ``name`` properties changed to more accurately describe their implementation: ``mcx_gray``, ``mcx_recursive``, and ``mcx_vchain`` respectively. Previously, these gates shared the name ``mcx`` with :class:`~qiskit.circuit.library.MCXGate`, which caused these gates to be incorrectly transpiled and simulated."
msgstr ""

#: ../../release_notes.rst:3231
msgid "By default the preset passmanagers in :mod:`qiskit.transpiler.preset_passmanagers` are using :class:`~qiskit.transpiler.passes.UnrollCustomDefinitions` and :class:`~qiskit.transpiler.passes.BasisTranslator` to handle basis changing instead of the previous default :class:`~qiskit.transpiler.passes.Unroller`. This was done because the new passes are more flexible and allow targeting any basis set, however the output may differ. To use the previous default you can set the ``translation_method`` kwarg on :func:`~qiskit.compiler.transpile` to ``'unroller'``."
msgstr ""

#: ../../release_notes.rst:3241
msgid "The :func:`qiskit.converters.circuit_to_gate` and :func`qiskit.converters.circuit_to_instruction` converter functions had previously automatically included the generated gate or instruction in the active ``SessionEquivalenceLibrary``. These converters now accept an optional ``equivalence_library`` keyword argument to specify if and where the converted instances should be registered. The default behavior has changed to not register the converted instance."
msgstr ""

#: ../../release_notes.rst:3249
msgid "The default value of the ``cregbundle`` kwarg for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function has been changed to ``True``. This means that by default the classical bits in the circuit diagram will now be bundled by default, for example:"
msgstr ""

#: ../../release_notes.rst:3265
msgid "If you want to have your circuit drawing retain the previous behavior and show each classical bit in the diagram you can set the ``cregbundle`` kwarg to ``False``. For example:"
msgstr ""

#: ../../release_notes.rst:3279
msgid ":class:`~qiskit.pulse.Schedule` plotting with :py:meth:`qiskit.pulse.Schedule.draw` and :func:`qiskit.visualization.pulse_drawer` will no longer display the event table by default. This can be reenabled by setting the ``table`` kwarg to ``True``."
msgstr ""

#: ../../release_notes.rst:3285
msgid "The pass :class:`~qiskit.transpiler.passes.RemoveResetInZeroState` was previously included in the preset pass manager :func:`~qiskit.transpiler.preset_passmanagers.level_0_pass_manager` which was used with the ``optimization_level=0`` for :func:`~qiskit.compiler.transpile` and :func:`~qiskit.execute.execute` functions. However, :class:`~qiskit.transpiler.passes.RemoveResetInZeroState` is an optimization pass and should not have been included in optimization level 0 and was removed. If you need to run :func:`~qiskit.compiler.transpile` with :class:`~qiskit.transpiler.passes.RemoveResetInZeroState` either use a custom pass manager or ``optimization_level`` 1, 2, or 3."
msgstr ""

#: ../../release_notes.rst:3297
msgid "The deprecated kwarg ``line_length`` for the :func:`qiskit.visualization.circuit_drawer` function and :meth:`qiskit.circuit.QuantumCircuit.draw` method has been removed. It had been deprecated since the 0.10.0 release. Instead you can use the ``fold`` kwarg to adjust the width of the circuit diagram."
msgstr ""

#: ../../release_notes.rst:3303
msgid "The ``'mpl'`` output mode for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`~qiskit.visualization.circuit_drawer` now requires the `pylatexenc <https://pylatexenc.readthedocs.io/en/latest/latexencode/>`__ library to be installed. This was already an optional dependency for visualization, but was only required for the ``'latex'`` output mode before. It is now also required for the matplotlib drawer because it is needed to handle correctly sizing gates with matplotlib's `mathtext <https://matplotlib.org/3.2.2/tutorials/text/mathtext.html>`__ labels for gates."
msgstr ""

#: ../../release_notes.rst:3314
msgid "The deprecated ``get_tokens`` methods for the :class:`qiskit.qasm.Qasm` and :class:`qiskit.qasm.QasmParser` has been removed. These methods have been deprecated since the 0.9.0 release. The :meth:`qiskit.qasm.Qasm.generate_tokens` and :meth:`qiskit.qasm.QasmParser.generate_tokens` methods should be used instead."
msgstr ""

#: ../../release_notes.rst:3321
msgid "The deprecated kwarg ``channels_to_plot`` for :meth:`qiskit.pulse.Schedule.draw`, :meth:`qiskit.pulse.Instruction.draw`, ``qiskit.visualization.pulse.matplotlib.ScheduleDrawer.draw`` and :func:`~qiskit.visualization.pulse_drawer` has been removed. The kwarg has been deprecated since the 0.11.0 release and was replaced by the ``channels`` kwarg, which functions identically and should be used instead."
msgstr ""

#: ../../release_notes.rst:3330
msgid "The deprecated ``circuit_instruction_map`` attribute of the :class:`qiskit.providers.models.PulseDefaults` class has been removed. This attribute has been deprecated since the 0.12.0 release and was replaced by the ``instruction_schedule_map`` attribute which can be used instead."
msgstr ""

#: ../../release_notes.rst:3336
msgid "The ``union`` method of :py:class:`~qiskit.pulse.Schedule` and :py:class:`~qiskit.pulse.Instruction` have been deprecated since the 0.12.0 release and have now been removed. Use :meth:`qiskit.pulse.Schedule.insert` and :meth:`qiskit.pulse.Instruction.meth` methods instead with the kwarg``time=0``."
msgstr ""

#: ../../release_notes.rst:3343
msgid "The deprecated ``scaling`` argument to the ``draw`` method of :py:class:`~qiskit.pulse.Schedule` and :py:class:`~qiskit.pulse.Instruction` has been replaced with ``scale`` since the 0.12.0 release and now has been removed. Use the ``scale`` kwarg instead."
msgstr ""

#: ../../release_notes.rst:3348
msgid "The deprecated ``period`` argument to :py:mod:`qiskit.pulse.library` functions have been replaced by ``freq`` since the 0.13.0 release and now removed. Use the ``freq`` kwarg instead of ``period``."
msgstr ""

#: ../../release_notes.rst:3352
msgid "The ``qiskit.pulse.commands`` module containing ``Commands`` classes was deprecated in the 0.13.0 release and has now been removed. You will have to upgrade your Pulse code if you were still using commands. For example:"
msgstr ""

#: ../../release_notes.rst:3362
msgid "``Command(args)(channel)``"
msgstr ""

#: ../../release_notes.rst:3363
msgid "``Instruction(args, channel)``"
msgstr ""

#: ../../release_notes.rst:3391
msgid "All classes and function in the ``qiskit.tool.qi`` module were deprecated in the 0.12.0 release and have now been removed. Instead use the :mod:`qiskit.quantum_info` module and the new methods and classes that it has for working with quantum states and operators."
msgstr ""

#: ../../release_notes.rst:3396
msgid "The ``qiskit.quantum_info.basis_state`` and ``qiskit.quantum_info.projector`` functions are deprecated as of Qiskit Terra 0.12.0 as are now removed. Use the :class:`qiskit.quantum_info.QuantumState` and its derivatives :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` to work with states."
msgstr ""

#: ../../release_notes.rst:3403
msgid "The interactive plotting functions from :mod:`qiskit.visualization`, ``iplot_bloch_multivector``, ``iplot_state_city``, ``iplot_state_qsphere``, ``iplot_state_hinton``, ``iplot_histogram``, ``iplot_state_paulivec`` now are just deprecated aliases for the matplotlib based equivalents and are no longer interactive. The hosted static JS code that these functions relied on has been removed and they no longer could work. A normal deprecation wasn't possible because the site they depended on no longer exists."
msgstr ""

#: ../../release_notes.rst:3412
msgid "The validation components using marshmallow from :mod:`qiskit.validation` have been removed from terra. Since they are no longer used to build any objects in terra."
msgstr ""

#: ../../release_notes.rst:3416
msgid "The marshmallow schema classes in :mod:`qiskit.result` have been removed since they are no longer used by the :class:`qiskit.result.Result` class."
msgstr ""

#: ../../release_notes.rst:3419
msgid "The output of the :meth:`~qiskit.result.Result.to_dict` method for the :class:`qiskit.result.Result` class is no longer in a format for direct JSON serialization. Depending on the content contained in instances of these classes there may be types that the default JSON encoder doesn't know how to handle, for example complex numbers or numpy arrays. If you're JSON serializing the output of the ``to_dict()`` method directly you should ensure that your JSON encoder can handle these types."
msgstr ""

#: ../../release_notes.rst:3427
msgid "The option to acquire multiple qubits at once was deprecated in the 0.12.0 release and is now removed. Specifically, the init args ``mem_slots`` and ``reg_slots`` have been removed from :class:`qiskit.pulse.instructions.Acquire`, and ``channel``, ``mem_slot`` and ``reg_slot`` will raise an error if a list is provided as input."
msgstr ""

#: ../../release_notes.rst:3433
msgid "Support for the use of the ``USE_RETWORKX`` environment variable which was introduced in the 0.13.0 release to provide an optional fallback to the legacy `networkx <https://networkx.github.io/>`__ based :class:`qiskit.dagcircuit.DAGCircuit` implementation has been removed. This flag was only intended as provide a relief valve for any users that encountered a problem with the new implementation for one release during the transition to retworkx."
msgstr ""

#: ../../release_notes.rst:3441
msgid "The module within :mod:`qiskit.pulse` responsible for schedule->schedule transformations has been renamed from ``reschedule.py`` to ``transforms.py``. The previous import path has been deprecated. To upgrade your code::"
msgstr ""

#: ../../release_notes.rst:3447
msgid "should be replaced by::"
msgstr ""

#: ../../release_notes.rst:3451
msgid "In previous releases a :class:`~qiskit.transpiler.PassManager` did not allow ``TransformationPass`` classes to modify the :class:`~qiskit.transpiler.PropertySet`.  This restriction has been lifted so a ``TransformationPass`` class now has read and write access to both the :class:`~qiskit.transpiler.PropertySet` and :class:`~qiskit.transpiler.DAGCircuit` during :meth:`~qiskit.transpiler.PassManager.run`. This change was made to more efficiently facilitate ``TransformationPass`` classes that have an internal state which may be necessary for later passes in the :class:`~qiskit.transpiler.PassManager`. Without this change a second redundant ``AnalysisPass`` would have been necessary to recreate the internal state, which could add significant overhead."
msgstr ""

#: ../../release_notes.rst:3469
msgid "The name of the first positional parameter for the :mod:`qiskit.visualization` functions :func:`~qiskit.visualization.plot_state_hinton`, :func:`~qiskit.visualization.plot_bloch_multivector`, :func:`~qiskit.visualization.plot_state_city`, :func:`~qiskit.visualization.plot_state_paulivec`, and :func:`~qiskit.visualization.plot_state_qsphere` has been renamed from ``rho`` to ``state``. Passing in the value by name to ``rho`` is deprecated and will be removed in a future release. Instead you should either pass the argument positionally or use the new parameter name ``state``."
msgstr ""

#: ../../release_notes.rst:3480
msgid "The ``qiskit.pulse.pulse_lib`` module has been deprecated and will be removed in a future release. It has been renamed to :py:mod:`qiskit.pulse.library` which should be used instead."
msgstr ""

#: ../../release_notes.rst:3484
msgid "The :class:`qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.mirror` has been deprecated and will be removed in a future release. The method :meth:`qiskit.circuit.QuantumCircuit.reverse_ops` should be used instead, since mirroring could be confused with swapping the output qubits of the circuit. The :meth:`~qiskit.circuit.QuantumCircuit.reverse_ops` method only reverses the order of gates that are applied instead of mirroring."
msgstr ""

#: ../../release_notes.rst:3492
msgid "The :meth:`~qiskit.dagcircuit.DAGCircuit.qubits` and :meth:`~qiskit.dagcircuit.DAGCircuit.clbits` methods of :class:`qiskit.dagcircuit.DAGCircuit` have been deprecated and will be removed in a future release. They have been replaced with properties of the same name, :attr:`qiskit.dagcircuit.DAGCircuit.qubits` and :attr:`qiskit.dagcircuit.DAGCircuit.clbits`, and are cached so accessing them is much faster."
msgstr ""

#: ../../release_notes.rst:3500
msgid "The ``get_sample_pulse`` method for ``qiskit.pulse.library.ParametricPulse`` derived classes (for example :class:`~qiskit.pulse.library.GaussianSquare`) has been deprecated and will be removed in a future release. It has been replaced by the ``get_waveform`` method (for example :meth:`~qiskit.pulse.library.GaussianSquare.get_waveform`) which should behave identically."
msgstr ""

#: ../../release_notes.rst:3508
msgid "The use of the optional ``condition`` argument on :class:`qiskit.dagcircuit.DAGNode`, :meth:`qiskit.dagcircuit.DAGCircuit.apply_operation_back`, and :meth:`qiskit.dagcircuit.DAGCircuit.apply_operation_front` has been deprecated and will be removed in a future release. Instead the ``control`` set in :class:`qiskit.circuit.Instruction` instances being added to a :class:`~qiskit.dagcircuit.DAGCircuit` should be used."
msgstr ""

#: ../../release_notes.rst:3516
msgid "The ``set_atol`` and ``set_rtol`` class methods of the :class:`qiskit.quantum_info.BaseOperator` and :class:`qiskit.quantum_info.QuantumState` classes (and their subclasses such as :class:`~qiskit.quantum_info.Operator` and :class:`qiskit.quantum_info.DensityMatrix`) are deprecated and will be removed in a future release. Instead the value for the attributes ``.atol`` and ``.rtol`` should be set on the class instead. For example::"
msgstr ""

#: ../../release_notes.rst:3529
msgid "The interactive plotting functions from :mod:`qiskit.visualization`, ``iplot_bloch_multivector``, ``iplot_state_city``, ``iplot_state_qsphere``, ``iplot_state_hinton``, ``iplot_histogram``, ``iplot_state_paulivec`` have been deprecated and will be removed in a future release. The matplotlib based equivalent functions from :mod:`qiskit.visualization`, :func:`~qiskit.visualization.plot_bloch_multivector`, :func:`~qiskit.visualization.plot_state_city`, :func:`~qiskit.visualization.plot_state_qsphere`, :func:`~qiskit.visualization.plot_state_hinton`, :func:`~qiskit.visualization.plot_state_histogram`, and :func:`~qiskit.visualization.plot_state_paulivec` should be used instead."
msgstr ""

#: ../../release_notes.rst:3541
msgid "The properties ``acquires``, ``mem_slots``, and ``reg_slots`` of the :class:`qiskit.pulse.instructions.Acquire` pulse instruction have been deprecated and will be removed in a future release. They are just duplicates of :attr:`~qiskit.pulse.instructions.Acquire.channel`, :attr:`~qiskit.pulse.instructions.Acquire.mem_slot`, and :attr:`~qiskit.pulse.instructions.Acquire.reg_slot` respectively now that previously deprecated support for using multiple qubits in a single :class:`~qiskit.pulse.instructions.Acquire` instruction has been removed."
msgstr ""

#: ../../release_notes.rst:3551
msgid "The ``SamplePulse`` class from :mod:`qiskit.pulse` has been renamed to :py:class:`~qiskit.pulse.library.Waveform`. ``SamplePulse`` is deprecated and will be removed in a future release."
msgstr ""

#: ../../release_notes.rst:3555
msgid "The style dictionary key ``cregbundle`` has been deprecated and will be removed in a future release. This has been replaced by the kwarg ``cregbundle`` added to the :func:`qiskit.visualization.circuit_drawer` function and the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.draw`."
msgstr ""

#: ../../release_notes.rst:3568
msgid "The :class:`qiskit.circuit.QuantumCircuit` method :attr:`~qiskit.circuit.QuantumCircuit.num_nonlocal_gates` previously included multi-qubit :class:`qiskit.circuit.Instruction` objects (for example, :class:`~qiskit.circuit.library.Barrier`) in its count of non-local gates. This has been corrected so that only non-local :class:`~qiskit.circuit.Gate` objects are counted. Fixes `#4500 <https://github.com/Qiskit/qiskit-terra/issues/4500>`__"
msgstr ""

#: ../../release_notes.rst:3576
msgid ":class:`~qiskit.circuit.ControlledGate` instances with a set ``ctrl_state`` were in some cases not being evaluated as equal, even if the compared gates were equivalent. This has been resolved so that Fixes `#4573 <https://github.com/Qiskit/qiskit-terra/issues/4573>`__"
msgstr ""

#: ../../release_notes.rst:3581
msgid "When accessing a bit from a :class:`qiskit.circuit.QuantumRegister` or :class:`qiskit.circuit.ClassicalRegister` by index when using numpy `integer types` <https://numpy.org/doc/stable/user/basics.types.html>`__ would previously raise a ``CircuitError`` exception. This has been resolved so numpy types can be used in addition to Python's built-in ``int`` type. Fixes `#3929 <https://github.com/Qiskit/qiskit-terra/issues/3929>`__."
msgstr ""

#: ../../release_notes.rst:3590
msgid "A bug was fixed where only the first :class:`qiskit.pulse.configuration.Kernel` or :class:`qiskit.pulse.configuration.Discriminator` for an :class:`qiskit.pulse.Acquire` was used when there were multiple Acquires at the same time in a :class:`qiskit.pulse.Schedule`."
msgstr ""

#: ../../release_notes.rst:3595
msgid "The SI unit use for constructing :py:class:`qiskit.pulse.SetFrequency` objects is in Hz, but when a :class:`~qiskit.qobj.PulseQobjInstruction` object is created from a :py:class:`~qiskit.pulse.SetFrequency` instance it needs to be converted to GHz. This conversion was missing from previous releases and has been fixed."
msgstr ""

#: ../../release_notes.rst:3601
msgid "Previously it was possible to set the number of control qubits to zero in which case the the original, potentially non-controlled, operation would be returned. This could cause an ``AttributeError`` to be raised if the caller attempted to access an attribute which only :class:`~qiskit.circuit.ControlledGate` object have. This has been fixed by adding a getter and setter for :attr:`~qiskit.circuit.ControlledGate.num_ctrl_qubits` to validate that a valid value is being used. Fixes `#4576 <https://github.com/Qiskit/qiskit-terra/issues/4576>`__"
msgstr ""

#: ../../release_notes.rst:3611
msgid "Open controls were implemented by modifying a :class:`~qiskit.circuit.Gate` objects :attr:`~qiskit.circuit.Gate.definition`. However, when the gate already exists in the basis set, this definition was not used, which resulted in incorrect circuits being sent to a backend after transpilation. This has been fixed by modifying the :class:`~qiskit.transpiler.Unroller` pass to use the definition if it encounters a controlled gate with open controls. Fixes `#4437 <https://github.com/Qiskit/qiskit-terra/issues/4437>`__"
msgstr ""

#: ../../release_notes.rst:3620
msgid "The ``insert_barriers`` keyword argument in the :class:`~qiskit.circuit.library.ZZFeatureMap` class didn't actually insert barriers in between the Hadamard layers and evolution layers. This has been fixed so that barriers are now properly inserted."
msgstr ""

#: ../../release_notes.rst:3625
msgid "Fixed issue where some gates with three or more qubits would fail to compile in certain instances. Refer to `#4577 <https://github.com/Qiskit/qiskit-terra/issues/4577` for more detail."
msgstr ""

#: ../../release_notes.rst:3629
msgid "The matplotlib (``'mpl'``) output backend for the :class:`qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.draw` and the :func:`qiskit.visualization.circuit_drawer` function was not properly scaling when the kwarg ``scale`` was set. Fonts and line widths did not scale with the rest of the image. This has been fixed and all elements of the circuit diagram now scale properly. For example:"
msgstr ""

#: ../../release_notes.rst:3645
msgid "Fixes `#4179 <https://github.com/Qiskit/qiskit-terra/issues/4179>`_."
msgstr ""

#: ../../release_notes.rst:3647
msgid "Fixes issue where initializing or evolving :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes by circuits by circuit containing :class:`~qiskit.circuit.Barrier` instructions would raise an exception. Fixes `#4461 <https://github.com/Qiskit/qiskit-terra/issues/4461>`__"
msgstr ""

#: ../../release_notes.rst:3654
msgid "Previously when a :class:`~qiskit.circuit.QuantumCircuit` contained a :class:`~qiskit.circuit.Gate` with a classical condition the transpiler would sometimes fail when using ``optimization_level=3`` on :func:`~qiskit.compiler.transpile` or :func:`~qiskit.execute.execute` raising an ``UnboundLocalError``. This has been fixed by updating the :class:`~qiskit.transpiler.passes.ConsolidateBlocks` pass to account for the classical condition. Fixes `#4672 <https://github.com/Qiskit/qiskit-terra/issues/4672>`_."
msgstr ""

#: ../../release_notes.rst:3664
msgid "In some situations long gate and register names would overflow, or leave excessive empty space around them when using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function. This has been fixed by using correct text widths for a proportional font. Fixes `#4611 <https://github.com/Qiskit/qiskit-terra/issues/4611>`__, `#4605 <https://github.com/Qiskit/qiskit-terra/issues/4605>`__, `#4545 <https://github.com/Qiskit/qiskit-terra/issues/4545>`__, `#4497 <https://github.com/Qiskit/qiskit-terra/issues/4497>`__, `#4449 <https://github.com/Qiskit/qiskit-terra/issues/4449>`__, and `#3641 <https://github.com/Qiskit/qiskit-terra/issues/3641>`__."
msgstr ""

#: ../../release_notes.rst:3676
msgid "When using the ``style` kwarg on the :meth:`qiskit.circuit.QuantumCircuit.draw` or :func:`qiskit.visualization.circuit_drawer` with the ``'mpl'`` output backend the dictionary key ``'showindex'`` set to ``True``, the index numbers at the top of the column did not line up properly. This has been fixed."
msgstr ""

#: ../../release_notes.rst:3683
msgid "When using ``cregbunde=True`` with the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function and measuring onto a second fold, the measure arrow would overwrite the creg count. The count was moved to the left to prevent this. Fixes `#4148 <https://github.com/Qiskit/qiskit-terra/issues/4148>`__."
msgstr ""

#: ../../release_notes.rst:3690
msgid "When using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function :class:`~qiskit.circuit.library.CSwapGate` gates and a controlled :class:`~qiskit.circuit.library.RZZGate` gates now display with their appropriate symbols instead of in a box."
msgstr ""

#: ../../release_notes.rst:3697
msgid "When using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function controlled gates created using the :meth:`~qiskit.circuit.QuantumCircuit.to_gate` method were not properly spaced and could overlap with other gates in the circuit diagram. This issue has been fixed."
msgstr ""

#: ../../release_notes.rst:3704
msgid "When using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function gates with arrays as parameters, such as :class:`~qiskit.extensions.HamiltonianGate`, no longer display with excessive space around them. Fixes `#4352 <https://github.com/Qiskit/qiskit-terra/issues/4352>`__."
msgstr ""

#: ../../release_notes.rst:3712
msgid "When using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function generic gates created by directly instantiating :class:`qiskit.circuit.Gate` method now display the proper background color for the gate. Fixes `#4496 <https://github.com/Qiskit/qiskit-terra/issues/4496>`__."
msgstr ""

#: ../../release_notes.rst:3719
msgid "When using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function an ``AttributeError`` that occurred when using :class:`~qiskit.extensions.Isometry` or :class:`~qiskit.extensions.Initialize` has been fixed. Fixes `#4439 <https://github.com/Qiskit/qiskit-terra/issues/4439>`__."
msgstr ""

#: ../../release_notes.rst:3727
msgid "When using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function some open-controlled gates did not properly display the open controls. This has been corrected so that open controls are properly displayed as open circles. Fixes `#4248 <https://github.com/Qiskit/qiskit-terra/issues/4248>`__."
msgstr ""

#: ../../release_notes.rst:3735
msgid "When using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function setting the ``fold`` kwarg to -1 will now properly display the circuit without folding. Fixes `#4506 <https://github.com/Qiskit/qiskit-terra/issues/4506>`__."
msgstr ""

#: ../../release_notes.rst:3742
msgid "Parametric pulses from :mod:`qiskit.pulse.library.discrete` now have zero ends of parametric pulses by default. The endpoints are defined such that for a function :math:`f(x)` then :math:`f(-1) = f(duration + 1) = 0`. Fixes `#4317 <https://github.com/Qiskit/qiskit-terra/issues/4317>`__"
msgstr ""

#: ../../release_notes.rst:3752 ../../release_notes.rst:4992
#: ../../release_notes.rst:6711 ../../release_notes.rst:7532
#: ../../release_notes.rst:8170 ../../release_notes.rst:8695
#: ../../release_notes.rst:9395 ../../release_notes.rst:9473
msgid "Other Notes"
msgstr ""

#: ../../release_notes.rst:3754
msgid "The :class:`qiskit.result.Result` class which was previously constructed using the marshmallow library has been refactored to not depend on marshmallow anymore. This new implementation should be a seamless transition but some specific behavior that was previously inherited from marshmallow may not work. Please file issues for any incompatibilities found."
msgstr ""

#: ../../release_notes.rst:3768
msgid "This 0.6.0 release includes numerous performance improvements for all simulators in the Aer provider and significant changes to the build system when building from source. The main changes are support for SIMD vectorization, approximation in the matrix product state method via bond-dimension truncation, more efficient Pauli expectation value computation, and greatly improved efficiency in Python conversion of C++ result objects. The build system was upgraded to use the `Conan <https://conan.io/>`__ to manage common C++ dependencies when building from source."
msgstr ""

#: ../../release_notes.rst:3783
msgid "Add density matrix snapshot support to \"statevector\" and \"statevector_gpu\" methods of the QasmSimulator."
msgstr ""

#: ../../release_notes.rst:3786
msgid "Allow density matrix snapshots on specific qubits, not just all qubits. This computes the partial trace of the state over the remaining qubits."
msgstr ""

#: ../../release_notes.rst:3789
msgid "Adds Pauli expectation value snapshot support to the `\"density_matrix\"` simulation method of the :class:`qiskit.providers.aer.QasmSimulator`. Add snapshots to circuits using the :class:`qiskit.providers.aer.extensions.SnapshotExpectationValue` extension."
msgstr ""

#: ../../release_notes.rst:3795
msgid "Greatly improves performance of the Pauli expectation value snapshot algorithm for the `\"statevector\"`, `\"statevector_gpu`, `\"density_matrix\"`, and `\"density_matrix_gpu\"` simulation methods of the :class:`qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:3800
msgid "Enable the gate-fusion circuit optimization from the :class:`qiskit.providers.aer.QasmSimulator` in both the :class:`qiskit.providers.aer.StatevectorSimulator` and :class:`qiskit.providers.aer.UnitarySimulator` backends."
msgstr ""

#: ../../release_notes.rst:3805
msgid "Improve the performance of average snapshot data in simulator results. This effects probability, Pauli expectation value, and density matrix snapshots using the following extensions:"
msgstr ""

#: ../../release_notes.rst:3809
msgid ":class:`qiskit.providers.aer.extensions.SnapshotExpectationValue`"
msgstr ""

#: ../../release_notes.rst:3810
msgid ":class:`qiskit.providers.aer.extensions.SnapshotProbabilities`"
msgstr ""

#: ../../release_notes.rst:3811
msgid ":class:`qiskit.providers.aer.extensions.SnapshotDensityMatrix`"
msgstr ""

#: ../../release_notes.rst:3813
msgid "Add move constructor and improve memory usage of the C++ matrix class to minimize copies of matrices when moving output of simulators into results."
msgstr ""

#: ../../release_notes.rst:3816
msgid "Improve performance of unitary simulator."
msgstr ""

#: ../../release_notes.rst:3818
msgid "Add approximation to the `\"matrix_product_state\"` simulation method of the :class:`~qiskit.providers.aer.QasmSimulator` to limit the bond-dimension of the MPS."
msgstr ""

#: ../../release_notes.rst:3822
msgid "There are two modes of approximation. Both discard the smallest Schmidt coefficients following the SVD algorithm. There are two parameters that control the degree of approximation: ``\"matrix_product_state_max_bond_dimension\"`` (int): Sets a limit on the number of Schmidt coefficients retained at the end of the svd algorithm. Coefficients beyond this limit will be discarded. (Default: None, i.e., no limit on the bond dimension). ``\"matrix_product_state_truncation_threshold\"`` (double): Discard the smallest coefficients for which the sum of their squares is smaller than this threshold. (Default: 1e-16)."
msgstr ""

#: ../../release_notes.rst:3834
msgid "Improve the performance of measure sampling when using the `\"matrix_product_state\"` :class:`~qiskit.providers.aer.QasmSimulator` simulation method."
msgstr ""

#: ../../release_notes.rst:3838
msgid "Add support for ``Delay``, ``Phase`` and ``SetPhase`` pulse instructions to the :class:`qiskit.providers.aer.PulseSimulator`."
msgstr ""

#: ../../release_notes.rst:3841
msgid "Improve the performance of the :class:`qiskit.providers.aer.PulseSimulator` by caching calls to RHS function"
msgstr ""

#: ../../release_notes.rst:3844
msgid "Introduce alternate DE solving methods, specifiable through ``backend_options`` in the :class:`qiskit.providers.aer.PulseSimulator`."
msgstr ""

#: ../../release_notes.rst:3847
msgid "Improve performance of simulator result classes by using move semantics and removing unnecessary copies that were happening when combining results from separate experiments into the final result object."
msgstr ""

#: ../../release_notes.rst:3851
msgid "Greatly improve performance of pybind11 conversion of simulator results by using move semantics where possible, and by moving vector and matrix results to Numpy arrays without copies."
msgstr ""

#: ../../release_notes.rst:3855
msgid "Change the RNG engine for simulators from 32-bit Mersenne twister to 64-bit Mersenne twister engine."
msgstr ""

#: ../../release_notes.rst:3858
msgid "Improves the performance of the `\"statevector\"` simulation method of the :class:`qiskit.providers.aer.QasmSimulator` and :class:`qiskit.providers.aer.StatevectorSimulator` by using SIMD intrinsics on systems that support the AVX2 instruction set. AVX2 support is automatically detected and enabled at runtime."
msgstr ""

#: ../../release_notes.rst:3870
msgid "Changes the build system to use the `Conan package manager <https://conan.io/>`__. This tool will handle most of the dependencies needed by the C++ source code. Internet connection may be needed for the first build or when dependencies are added or updated, in order to download the required packages if they are not in your Conan local repository."
msgstr ""

#: ../../release_notes.rst:3877
msgid "When building the standalone version of qiskit-aer you must install conan first with:"
msgstr ""

#: ../../release_notes.rst:3884 ../../release_notes.rst:5157
msgid "Changes how transpilation passes are handled in the C++ Controller classes so that each pass must be explicitly called. This allows for greater customization on when each pass should be called, and with what parameters. In particular this enables setting different parameters for the gate fusion optimization pass depending on the QasmController simulation method."
msgstr ""

#: ../../release_notes.rst:3890 ../../release_notes.rst:5163
msgid "Add ``gate_length_units`` kwarg to :meth:`qiskit.providers.aer.noise.NoiseModel.from_device` for specifying custom ``gate_lengths`` in the device noise model function to handle unit conversions for internal code."
msgstr ""

#: ../../release_notes.rst:3895 ../../release_notes.rst:5168
msgid "Add Controlled-Y (\"cy\") gate to the Stabilizer simulator methods supported gateset."
msgstr ""

#: ../../release_notes.rst:3898 ../../release_notes.rst:5171
msgid "For Aer's backend the jsonschema validation of input qobj objects from terra is now opt-in instead of being enabled by default. If you want to enable jsonschema validation of qobj set the ``validate`` kwarg on the :meth:`qiskit.providers.aer.QasmSimualtor.run` method for the backend object to ``True``."
msgstr ""

#: ../../release_notes.rst:3904
msgid "Adds an OpSet object to the base simulator State class to allow easier validation of instructions, gates, and snapshots supported by simulators."
msgstr ""

#: ../../release_notes.rst:3907
msgid "Refactor OpSet class. Moved OpSet to separate header file and add ``contains`` and ``difference`` methods based on ``std::set::contains`` and ``std::algorithm::set_difference``. These replace the removed invalid and validate instructions from OpSet, but with the order reversed. It returns a list of other ops not in current opset rather than opset instructions not in the other."
msgstr ""

#: ../../release_notes.rst:3914
msgid "Improves how measurement sampling optimization is checked. The expensive part of this operation is now done once during circuit construction where rather than multiple times during simulation for when checking memory requirements, simulation method, and final execution."
msgstr ""

#: ../../release_notes.rst:3925 ../../release_notes.rst:5183
msgid "Remove \"extended_stabilizer\" from the automatically selected simulation methods. This is needed as the extended stabilizer method is not exact and may give incorrect results for certain circuits unless the user knows how to optimize its configuration parameters."
msgstr ""

#: ../../release_notes.rst:3930 ../../release_notes.rst:5188
msgid "The automatic method now only selects from \"stabilizer\", \"density_matrix\", and \"statevector\" methods. If a non-Clifford circuit that is too large for the statevector method is executed an exception will be raised suggesting you could try explicitly using the \"extended_stabilizer\" or \"matrix_product_state\" methods instead."
msgstr ""

#: ../../release_notes.rst:3936 ../../release_notes.rst:5198
msgid "Disables gate fusion for the matrix product state simulation method as this was causing issues with incorrect results being returned in some cases."
msgstr ""

#: ../../release_notes.rst:3939
msgid "Fixes a bug causing incorrect channel evaluation in the :class:`qiskit.providers.aer.PulseSimulator`."
msgstr ""

#: ../../release_notes.rst:3942
msgid "Fixes several minor bugs for Hamiltonian parsing edge cases in the :class:`qiskit.providers.aer.pulse.system_models.hamiltonian_model.HamiltonianModel` class."
msgstr ""

#: ../../release_notes.rst:3954
msgid "The main change made in this release is a refactor of the Randomized Benchmarking code to integrate the updated Clifford class :class:`qiskit.quantum_info.Clifford` from Terra and to improve the CNOT-Dihedral class."
msgstr ""

#: ../../release_notes.rst:3965
msgid "The :func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq` function was refactored to use the updated Clifford class :class:`~qiskit.quantum_info.Clifford`, to allow efficient Randomized Benchmarking (RB) on Clifford sequences with more than 2 qubits. In addition, the code of the CNOT-Dihedral class :class:`qiskit.ignis.verification.randomized_benchmarking.CNOTDihedral` was refactored to make it more efficient, by using numpy arrays, as well not using pre-generated pickle files storing all the 2-qubit group elements. The :func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq` function has a new kwarg ``rand_seed`` which can be used to specify a seed for the random number generator used to generate the RB circuits. This can be useful for having a reproducible circuit."
msgstr ""

#: ../../release_notes.rst:3976
msgid "The :func:`qiskit.ignis.verification.qv_circuits` function has a new kwarg ``seed`` which can be used to specify a seed for the random number generator used to generate the Quantum Volume circuits. This can be useful for having a reproducible circuit."
msgstr ""

#: ../../release_notes.rst:3987
msgid "The :func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq` function is now using the updated Clifford class :class:`~qiskit.quantum_info.Clifford` and the updated CNOT-Dihedral class :class:`qiskit.ignis.verification.randomized_benchmarking.CNOTDihedral` to construct its output instead of using pre-generated group tables for the Clifford and CNOT-Dihedral group elements, which were stored in pickle files. This may result in subtle differences from the output from the previous version."
msgstr ""

#: ../../release_notes.rst:3995 ../../release_notes.rst:4348
msgid "A new requirement `scikit-learn <https://scikit-learn.org/stable/>`__ has been added to the requirements list. This dependency was added in the 0.3.0 release but wasn't properly exposed as a dependency in that release. This would lead to an ``ImportError`` if the :mod:`qiskit.ignis.measurement.discriminator.iq_discriminators` module was imported. This is now correctly listed as a dependency so that ``scikit-learn`` will be installed with qiskit-ignis."
msgstr ""

#: ../../release_notes.rst:4003
msgid "The :func:`qiskit.ignis.verification.qv_circuits` function is now using the circuit library class :class:`~qiskit.circuit.library.QuantumVolume` to construct its output instead of building the circuit from scratch. This may result in subtle differences from the output from the previous version."
msgstr ""

#: ../../release_notes.rst:4009
msgid "Tomography fitters can now also get list of `Result` objects instead of a single `Result` as requested in `issue #320 <https://github.com/Qiskit/qiskit-ignis/issues/320/>`_."
msgstr ""

#: ../../release_notes.rst:4018
msgid "The kwarg ``interleaved_gates`` for the :func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq` function has been deprecated and will be removed in a future release. It is superseded by ``interleaved_elem``. The helper functions :class:`qiskit.ignis.verification.randomized_benchmarking.BasicUtils`, :class:`qiskit.ignis.verification.randomized_benchmarking.CliffordUtils` and :class:`qiskit.ignis.verification.randomized_benchmarking.DihedralUtils` were deprecated. These classes are superseded by :class:`qiskit.ignis.verification.randomized_benchmarking.RBgroup` that handles the group operations needed for RB. The class :class:`qiskit.ignis.verification.randomized_benchmarking.Clifford` is superseded by :class:`~qiskit.quantum_info.Clifford`."
msgstr ""

#: ../../release_notes.rst:4030
msgid "The kwargs ``qr`` and ``cr`` for the :func:`qiskit.ignis.verification.qv_circuits` function have been deprecated and will be removed in a future release. These kwargs were documented as being used for specifying a :class:`qiskit.circuit.QuantumRegister` and :class:`qiskit.circuit.ClassicalRegister` to use in the generated Quantum Volume circuits instead of creating new ones. However, the parameters were never actually respected and a new Register would always be created regardless of whether they were set or not. This behavior is unchanged and these kwargs still do not have any effect, but are being deprecated prior to removal to avoid a breaking change for users who may have been setting either."
msgstr ""

#: ../../release_notes.rst:4042
msgid "Support for passing in subsets of qubits as a list in the ``qubit_lists`` parameter for the :func:`qiskit.ignis.verification.qv_circuits` function has been deprecated and will removed in a future release. In the past this was used to specify a layout to run the circuit on a device. In other words if you had a 5 qubit device and wanted to run a 2 qubit QV circuit on qubits 1, 3, and 4 of that device. You would pass in ``[1, 3, 4]`` as one of the lists in ``qubit_lists``, which would generate a 5 qubit virtual circuit and have qv applied to qubits 1, 3, and 4 in that virtual circuit. However, this functionality is not necessary and overlaps with the concept of ``initial_layout`` in the transpiler and whether a circuit has been embedded with a layout set. Moving forward instead you should just run :func:`~qiskit.compiler.transpile` or :func:`~qiskit.execute.execute` with initial layout set to do this. For example, running the above example would become::"
msgstr ""

#: ../../release_notes.rst:4070
msgid "Fix a bug of the position of measurement pulses inserted by py:func:`qiskit.ignis.characterization.calibrations.pulse_schedules.drag_schedules`. Fixes `#465 <https://github.com/Qiskit/qiskit-ignis/issues/465>`__"
msgstr ""

#: ../../release_notes.rst:4082
msgid "Removed soft dependency on CPLEX in ADMMOptimizer. Now default optimizers used by ADMMOptimizer are MinimumEigenOptimizer for QUBO problems and SlsqpOptimizer as a continuous optimizer. You can still use CplexOptimizer as an optimizer for ADMMOptimizer, but it should be set explicitly."
msgstr ""

#: ../../release_notes.rst:4086
msgid "New Yahoo! finance provider created."
msgstr ""

#: ../../release_notes.rst:4088
msgid "Introduced ``QuadraticProgramConverter`` which is an abstract class for converters. Added ``convert``/``interpret`` methods for converters instead of ``encode``/``decode``. Added ``to_ising`` and ``from_ising`` to ``QuadraticProgram`` class. Moved all parameters from ``convert`` to constructor except ``name``. Created setter/getter for converter parameters. Added ``auto_define_penalty`` and ``interpret`` for``LinearEqualityToPenalty``. Now error messages of converters are more informative."
msgstr ""

#: ../../release_notes.rst:4096
msgid "Added an SLSQP optimizer ``qiskit.optimization.algorithms.SlsqpOptimizer`` as a wrapper of the corresponding SciPy optimization method. This is a classical optimizer, does not depend on quantum algorithms and may be used as a replacement for ``CobylaOptimizer``."
msgstr ""

#: ../../release_notes.rst:4100
msgid "Cobyla optimizer has been modified to accommodate a multi start feature introduced in the SLSQP optimizer. By default, the optimizer does not run in the multi start mode."
msgstr ""

#: ../../release_notes.rst:4103
msgid "The ``SummedOp`` does a mathematically more correct check for equality, where expressions such as ``X + X == 2*X`` and ``X + Z == Z + X`` evaluate to ``True``."
msgstr ""

#: ../../release_notes.rst:4126
msgid "The ``pprint_as_string`` method for :class:`qiskit.optimization.QuadraticProgram` has been deprecated and will be removed in a future release. Instead you should just run ``.pprint_as_string()`` on the output from :meth:`~qiskit.optimization.QuadraticProgram.to_docplex`"
msgstr ""

#: ../../release_notes.rst:4132
msgid "The ``prettyprint`` method for :class:`qiskit.optimization.QuadraticProgram` has been deprecated and will be removed in a future release. Instead you should just run ``.prettyprint()`` on the output from :meth:`~qiskit.optimization.QuadraticProgram.to_docplex`"
msgstr ""

#: ../../release_notes.rst:4143
msgid "Changed in python version 3.8: On macOS, the spawn start method is now the default. The fork start method should be considered unsafe as it can lead to crashes in subprocesses. However P_BFGS doesn't support spawn, so we revert to single process. Refer to `#1109 <https://github.com/Qiskit/qiskit-aqua/issues/1109>` for more details."
msgstr ""

#: ../../release_notes.rst:4150
msgid "Binding parameters in the ``CircuitStateFn`` did not copy the value of ``is_measurement`` and always set ``is_measurement=False``. This has been fixed."
msgstr ""

#: ../../release_notes.rst:4154
msgid "Previously, SummedOp.to_matrix_op built a list MatrixOp's (with numpy matrices) and then summed them, returning a single MatrixOp. Some algorithms (for example vqe) require summing thousands of matrices, which exhausts memory when building the list of matrices. With this change, no list is constructed. Rather, each operand in the sum is converted to a matrix, added to an accumulator, and discarded."
msgstr ""

#: ../../release_notes.rst:4161
msgid "Changing backends in VQE from statevector to qasm_simulator or real device was causing an error due to CircuitSampler incompatible reuse. VQE was changed to always create a new CircuitSampler and create a new  expectation in case not entered by user. Refer to `#1153 <https://github.com/Qiskit/qiskit-aqua/issues/1153>` for more details."
msgstr ""

#: ../../release_notes.rst:4168
msgid "Exchange and Wikipedia finance providers were fixed to correctly handle Quandl data. Refer to `#775 <https://github.com/Qiskit/qiskit-aqua/issues/775>` for more details. Fixes a divide by 0 error on finance providers mean vector and covariance matrix calculations. Refer to `#781 <https://github.com/Qiskit/qiskit-aqua/issues/781>` for more details."
msgstr ""

#: ../../release_notes.rst:4175
msgid "The ``ListOp.combo_fn`` property has been lost in several transformations, such as converting to another operator type, traversing, reducing or multiplication. Now this attribute is propagated to the resulting operator."
msgstr ""

#: ../../release_notes.rst:4179
msgid "The evaluation of some operator expressions, such as of ``SummedOp``s and evaluations with the ``CircuitSampler`` did not treat coefficients correctly or ignored them completely. E.g. evaluating ``~StateFn(0 * (I + Z)) @ Plus`` did not yield 0 or the normalization of ``~StateFn(I) @ ((Plus + Minus) / sqrt(2))`` missed a factor of ``sqrt(2)``. This has been fixed."
msgstr ""

#: ../../release_notes.rst:4186
msgid "``OptimizationResult`` included some public setters and class variables were ``Optional``. This fix makes all class variables read-only so that mypy and pylint can check types more effectively. ``MinimumEigenOptimizer.solve`` generated bitstrings in a result as ``str``. This fix changed the result into ``List[float]`` as the other algorithms do. Some public classes related to optimization algorithms were missing in the documentation of ``qiskit.optimization.algorithms``. This fix added all such classes to the docstring. `#1131 <https://github.com/Qiskit/qiskit-aqua/issues/1131>` for more details."
msgstr ""

#: ../../release_notes.rst:4196
msgid "``OptimizationResult.__init__`` did not check whether the sizes of ``x`` and ``variables`` match or not (they should match). This fix added the check to raise an error if they do not match and fixes bugs detected by the check. This fix also adds missing unit tests related to ``OptimizationResult.variable_names`` and ``OptimizationResult.variables_dict`` in ``test_converters``. `#1167 <https://github.com/Qiskit/qiskit-aqua/issues/1167>` for more details."
msgstr ""

#: ../../release_notes.rst:4203
msgid "Fix parameter binding in the ``OperatorStateFn``, which did not bind parameters of the underlying primitive but just the coefficients."
msgstr ""

#: ../../release_notes.rst:4206
msgid "``op.eval(other)``, where ``op`` is of type ``OperatorBase``, sometimes silently returns a nonsensical value when the number of qubits in ``op`` and ``other`` are not equal. This fix results in correct behavior, which is to throw an error rather than return a value, because the input in this case is invalid."
msgstr ""

#: ../../release_notes.rst:4212
msgid "The ``construct_circuit`` method of ``VQE`` previously returned the expectation value to be evaluated as type ``OperatorBase``. This functionality has been moved into ``construct_expectation`` and ``construct_circuit`` returns a list of the circuits that are evaluated to compute the expectation value."
msgstr ""

#: ../../release_notes.rst:4227
msgid ":class:`~qiskit.providers.ibmq.IBMQBackend` now has a new :meth:`~qiskit.providers.ibmq.IBMQBackend.reservations` method that returns reservation information for the backend, with optional filtering. In addition, you can now use :meth:`provider.backends.my_reservations()<qiskit.providers.ibmq.IBMQBackendService.my_reservations>` to query for your own reservations."
msgstr ""

#: ../../release_notes.rst:4234
msgid ":meth:`qiskit.providers.ibmq.job.IBMQJob.result` raises an :class:`~qiskit.providers.ibmq.job.IBMQJobFailureError` exception if the job has failed. The exception message now contains the reason the job failed, if the entire job failed for a single reason."
msgstr ""

#: ../../release_notes.rst:4239
msgid "A new attribute ``client_version`` was added to :class:`~qiskit.providers.ibmq.job.IBMQJob` and :class:`qiskit.result.Result` object retrieved via :meth:`qiskit.providers.ibmq.job.IBMQJob.result`. ``client_version`` is a dictionary with the key being the name and the value being the version of the client used to submit the job, such as Qiskit."
msgstr ""

#: ../../release_notes.rst:4247
msgid "The :func:`~qiskit.providers.ibmq.least_busy` function now takes a new, optional parameter ``reservation_lookahead``. If specified or defaulted to, a backend is considered unavailable if it has reservations in the next ``n`` minutes, where ``n`` is the value of ``reservation_lookahead``. For example, if the default value of 60 is used, then any backends that have reservations in the next 60 minutes are considered unavailable."
msgstr ""

#: ../../release_notes.rst:4254
msgid ":class:`~qiskit.providers.ibmq.managed.ManagedResults` now has a new :meth:`~qiskit.providers.ibmq.managed.ManagedResults.combine_results` method that combines results from all managed jobs and returns a single :class:`~qiskit.result.Result` object. This ``Result`` object can be used, for example, in ``qiskit-ignis`` fitter methods."
msgstr ""

#: ../../release_notes.rst:4266
msgid "Timestamps in the following fields are now in local time instead of UTC:"
msgstr ""

#: ../../release_notes.rst:4268
msgid "Backend properties returned by :meth:`qiskit.providers.ibmq.IBMQBackend.properties`."
msgstr ""

#: ../../release_notes.rst:4270
msgid "Backend properties returned by :meth:`qiskit.providers.ibmq.job.IBMQJob.properties`."
msgstr ""

#: ../../release_notes.rst:4272
msgid "``estimated_start_time`` and ``estimated_complete_time`` in :class:`~qiskit.providers.ibmq.job.QueueInfo`, returned by :meth:`qiskit.providers.ibmq.job.IBMQJob.queue_info`."
msgstr ""

#: ../../release_notes.rst:4275
msgid "``date`` in :class:`~qiskit.result.Result`, returned by :meth:`qiskit.providers.ibmq.job.IBMQJob.result`."
msgstr ""

#: ../../release_notes.rst:4278
msgid "In addition, the ``datetime`` parameter for :meth:`qiskit.providers.ibmq.IBMQBackend.properties` is also expected to be in local time unless it has UTC timezone information."
msgstr ""

#: ../../release_notes.rst:4282
msgid "``websockets`` 8.0 or above is now required if Python 3.7 or above is used. ``websockets`` 7.0 will continue to be used for Python 3.6 or below."
msgstr ""

#: ../../release_notes.rst:4285
msgid "On Windows, the event loop policy is set to ``WindowsSelectorEventLoopPolicy`` instead of using the default ``WindowsProactorEventLoopPolicy``. This fixes the issue that the :meth:`qiskit.providers.ibmq.job.IBMQJob.result` method could hang on Windows. Fixes `#691 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/691>`_"
msgstr ""

#: ../../release_notes.rst:4297
msgid "Use of ``Qconfig.py`` to save IBM Quantum Experience credentials is deprecated and will be removed in the next release. You should use ``qiskitrc`` (the default) instead."
msgstr ""

#: ../../release_notes.rst:4307
msgid "Fixes an issue wherein a call to :meth:`qiskit.providers.ibmq.IBMQBackend.jobs` can hang if the number of jobs being returned is large. Fixes `#674 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/674>`_"
msgstr ""

#: ../../release_notes.rst:4311
msgid "Fixes an issue which would raise a ``ValueError`` when building error maps in Jupyter for backends that are offline. Fixes `#706 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/706>`_"
msgstr ""

#: ../../release_notes.rst:4315
msgid ":meth:`qiskit.providers.ibmq.IBMQBackend.jobs` will now return the correct list of :class:`~qiskit.providers.ibmq.job.IBMQJob` objects when the ``status`` kwarg is set to ``'RUNNING'``."
msgstr ""

#: ../../release_notes.rst:4319 ../../release_notes.rst:4619
msgid "The package metadata has been updated to properly reflect the dependency on ``qiskit-terra`` >= 0.14.0. This dependency was implicitly added as part of the 0.7.0 release but was not reflected in the package requirements so it was previously possible to install ``qiskit-ibmq-provider`` with a version of ``qiskit-terra`` which was too old. Fixes `#677 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/677>`_"
msgstr ""

#: ../../release_notes.rst:4328
msgid "Qiskit 0.19.6"
msgstr ""

#: ../../release_notes.rst:4331 ../../release_notes.rst:4382
#: ../../release_notes.rst:4462
msgid "Terra 0.14.2"
msgstr ""

#: ../../release_notes.rst:4333 ../../release_notes.rst:4338
#: ../../release_notes.rst:4369 ../../release_notes.rst:4374
#: ../../release_notes.rst:4384 ../../release_notes.rst:4389
#: ../../release_notes.rst:4454 ../../release_notes.rst:4507
#: ../../release_notes.rst:4512 ../../release_notes.rst:4564
#: ../../release_notes.rst:4573 ../../release_notes.rst:4601
#: ../../release_notes.rst:4606 ../../release_notes.rst:5018
#: ../../release_notes.rst:5024 ../../release_notes.rst:5147
#: ../../release_notes.rst:5223 ../../release_notes.rst:5229
#: ../../release_notes.rst:5235 ../../release_notes.rst:6788
#: ../../release_notes.rst:6793 ../../release_notes.rst:6802
#: ../../release_notes.rst:6807 ../../release_notes.rst:6812
#: ../../release_notes.rst:6817 ../../release_notes.rst:6856
#: ../../release_notes.rst:6861 ../../release_notes.rst:6866
#: ../../release_notes.rst:6871 ../../release_notes.rst:7589
#: ../../release_notes.rst:7594 ../../release_notes.rst:8185
#: ../../release_notes.rst:8190 ../../release_notes.rst:8195
#: ../../release_notes.rst:8708 ../../release_notes.rst:8713
#: ../../release_notes.rst:8718 ../../release_notes.rst:8723
#: ../../release_notes.rst:9588 ../../release_notes.rst:9598
#: ../../release_notes.rst:9626 ../../release_notes.rst:9649
#: ../../release_notes.rst:9654 ../../release_notes.rst:9734
#: ../../release_notes.rst:9739 ../../release_notes.rst:9744
#: ../../release_notes.rst:9749 ../../release_notes.rst:10151
#: ../../release_notes.rst:10156
msgid "No Change"
msgstr ""

#: ../../release_notes.rst:4336 ../../release_notes.rst:4387
#: ../../release_notes.rst:4505 ../../release_notes.rst:4576
msgid "Aer 0.5.2"
msgstr ""

#: ../../release_notes.rst:4341
msgid "Ignis 0.3.3"
msgstr ""

#: ../../release_notes.rst:4362
msgid "Fixes an issue in qiskit-ignis 0.3.2 which would raise an ``ImportError`` when :mod:`qiskit.ignis.verification.tomography.fitters.process_fitter` was imported without ``cvxpy`` being installed."
msgstr ""

#: ../../release_notes.rst:4367 ../../release_notes.rst:4413
msgid "Aqua 0.7.3"
msgstr ""

#: ../../release_notes.rst:4372 ../../release_notes.rst:4452
#: ../../release_notes.rst:4562 ../../release_notes.rst:4609
msgid "IBM Q Provider 0.7.2"
msgstr ""

#: ../../release_notes.rst:4379
msgid "Qiskit 0.19.5"
msgstr ""

#: ../../release_notes.rst:4392
msgid "Ignis 0.3.2"
msgstr ""

#: ../../release_notes.rst:4397
msgid "The :meth:`qiskit.ignis.verification.TomographyFitter.fit` method has improved detection logic for the default fitter. Previously, the ``cvx`` fitter method was used whenever `cvxpy <https://www.cvxpy.org/>`__ was installed. However, it was possible to install cvxpy without an SDP solver that would work for the ``cvx`` fitter method. This logic has been reworked so that the ``cvx`` fitter method is only used if ``cvxpy`` is installed and an SDP solver is present that can be used. Otherwise, the ``lstsq`` fitter is used."
msgstr ""

#: ../../release_notes.rst:4405
msgid "Fixes an edge case in :meth:`qiskit.ignis.mitigation.measurement.fitters.MeasurementFitter.apply` for input that has invalid or incorrect state labels that don't match the calibration circuit. Previously, this would not error and just return an empty result. Instead now this case is correctly caught and a ``QiskitError`` exception is raised when using incorrect labels."
msgstr ""

#: ../../release_notes.rst:4420
msgid "The `cvxpy <https://www.cvxpy.org/>`__ dependency which is required for the svm classifier has been removed from the requirements list and made an optional dependency. This is because installing cvxpy is not seamless in every environment and often requires a compiler be installed to run. To use the svm classifier now you'll need to install cvxpy by either running ``pip install cvxpy<1.1.0`` or to install it with aqua running ``pip install qiskit-aqua[cvx]``."
msgstr ""

#: ../../release_notes.rst:4434
msgid "The ``compose`` method of the ``CircuitOp`` used ``QuantumCircuit.combine`` which has been changed to use ``QuantumCircuit.compose``. Using combine leads to the problem that composing an operator with a ``CircuitOp`` based on a named register does not chain the operators but stacks them. E.g. composing ``Z ^ 2`` with a circuit based on a 2-qubit named register yielded a 4-qubit operator instead of a 2-qubit operator."
msgstr ""

#: ../../release_notes.rst:4440
msgid "The ``MatrixOp.to_instruction`` method previously returned an operator and not an instruction. This method has been updated to return an Instruction. Note that this only works if the operator primitive is unitary, otherwise an error is raised upon the construction of the instruction."
msgstr ""

#: ../../release_notes.rst:4445
msgid "The ``__hash__`` method of the ``PauliOp`` class used the ``id()`` method which prevents set comparisons to work as expected since they rely on hash tables and identical objects used to not have identical hashes. Now, the implementation uses a hash of the string representation inline with the implementation in the ``Pauli`` class."
msgstr ""

#: ../../release_notes.rst:4459
msgid "Qiskit 0.19.4"
msgstr ""

#: ../../release_notes.rst:4469
msgid "The ``circuit_to_gate`` and ``circuit_to_instruction`` converters had previously automatically included the generated gate or instruction in the active ``SessionEquivalenceLibrary``. These converters now accept an optional ``equivalence_library`` keyword argument to specify if and where the converted instances should be registered. The default behavior is not to register the converted instance."
msgstr ""

#: ../../release_notes.rst:4482
msgid "Implementations of the multi-controlled X Gate (``MCXGrayCode``, ``MCXRecursive`` and ``MCXVChain``) have had their ``name`` properties changed to more accurately describe their implementation (``mcx_gray``, ``mcx_recursive``, and ``mcx_vchain`` respectively.) Previously, these gates shared the name ``mcx` with ``MCXGate``, which caused these gates to be incorrectly transpiled and simulated."
msgstr ""

#: ../../release_notes.rst:4490
msgid "``ControlledGate`` instances with a set ``ctrl_state`` were in some cases not being evaluated as equal, even if the compared gates were equivalent. This has been resolved."
msgstr ""

#: ../../release_notes.rst:4494
msgid "Fixed the SI unit conversion for :py:class:`qiskit.pulse.SetFrequency`. The ``SetFrequency`` instruction should be in Hz on the frontend and has to be converted to GHz when ``SetFrequency`` is converted to ``PulseQobjInstruction``."
msgstr ""

#: ../../release_notes.rst:4498
msgid "Open controls were implemented by modifying a gate\\'s definition. However, when the gate already exists in the basis, this definition is not used, which yields incorrect circuits sent to a backend. This modifies the unroller to output the definition if it encounters a controlled gate with open controls."
msgstr ""

#: ../../release_notes.rst:4510 ../../release_notes.rst:4599
#: ../../release_notes.rst:5022 ../../release_notes.rst:5221
#: ../../release_notes.rst:6754
msgid "Ignis 0.3.0"
msgstr ""

#: ../../release_notes.rst:4515
msgid "Aqua 0.7.2"
msgstr ""

#: ../../release_notes.rst:4524
msgid "`cvxpy <https://github.com/cvxgrp/cvxpy/>`_ is now in the requirements list as a dependency for qiskit-aqua. It is used for the quadratic program solver which is used as part of the :class:`qiskit.aqua.algorithms.QSVM`. Previously ``cvxopt`` was an optional dependency that needed to be installed to use this functionality. This is no longer required as cvxpy will be installed with qiskit-aqua."
msgstr ""

#: ../../release_notes.rst:4530
msgid "For state tomography run as part of :class:`qiskit.aqua.algorithms.HHL` with a QASM backend the tomography fitter function :meth:`qiskit.ignis.verification.StateTomographyFitter.fit` now gets called explicitly with the method set to ``lstsq`` to always use the least-squares fitting. Previously it would opportunistically try to use the ``cvx`` fitter if ``cvxpy`` were installed. But, the ``cvx`` fitter depends on a specifically configured ``cvxpy`` installation with an SDP solver installed as part of ``cvxpy`` which is not always present in an environment with ``cvxpy`` installed."
msgstr ""

#: ../../release_notes.rst:4539
msgid "The VQE expectation computation using qiskit-aer's :class:`qiskit.providers.aer.extensions.SnapshotExpectationValue` instruction is not enabled by default anymore. This was changed to be the default in 0.7.0 because it is significantly faster, but it led to unexpected ideal results without shot noise (see `#1013 <https://github.com/Qiskit/qiskit-aqua/issues/1013>`_ for more details). The default has now changed back to match user expectations. Using the faster expectation computation is now opt-in by setting the new ``include_custom`` kwarg to ``True`` on the :class:`qiskit.aqua.algorithms.VQE` constructor."
msgstr ""

#: ../../release_notes.rst:4552
msgid "A new kwarg ``include_custom`` has been added to the constructor for :class:`qiskit.aqua.algorithms.VQE` and it's subclasses (mainly :class:`qiskit.aqua.algorithms.QAOA`). When set to true and the ``expectation`` kwarg is set to ``None`` (the default) this will enable the use of VQE expectation computation with Aer's ``qasm_simulator`` :class:`qiskit.providers.aer.extensions.SnapshotExpectationValue` instruction. The special Aer snapshot based computation is much faster but with the ideal output similar to state vector simulator."
msgstr ""

#: ../../release_notes.rst:4568
msgid "Qiskit 0.19.3"
msgstr ""

#: ../../release_notes.rst:4571
msgid "Terra 0.14.1"
msgstr ""

#: ../../release_notes.rst:4581
msgid "Fixed bug with statevector and unitary simulators running a number of (parallel) shots equal to the number of CPU threads instead of only running a single shot."
msgstr ""

#: ../../release_notes.rst:4584
msgid "Fixes the \"diagonal\" qobj gate instructions being applied incorrectly in the density matrix Qasm Simulator method."
msgstr ""

#: ../../release_notes.rst:4587
msgid "Fixes bug where conditional gates were not being applied correctly on the density matrix simulation method."
msgstr ""

#: ../../release_notes.rst:4590
msgid "Fix bug in CZ gate and Z gate for \"density_matrix_gpu\" and \"density_matrix_thrust\" QasmSimulator methods."
msgstr ""

#: ../../release_notes.rst:4593
msgid "Fixes issue where memory requirements of simulation were not being checked on the QasmSimulator when using a non-automatic simulation method."
msgstr ""

#: ../../release_notes.rst:4596
msgid "Fixed a memory leak that effected the GPU simulator methods"
msgstr ""

#: ../../release_notes.rst:4604
msgid "Aqua 0.7.1"
msgstr ""

#: ../../release_notes.rst:4614
msgid ":meth:`qiskit.provider.ibmq.IBMQBackend.jobs` will now return the correct list of :class:`~qiskit.provider.ibmq.job.IBMQJob` objects when the ``status`` kwarg is set to ``'RUNNING'``. Fixes `#523 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/523>`_"
msgstr ""

#: ../../release_notes.rst:4628
msgid "Qiskit 0.19.0"
msgstr ""

#: ../../release_notes.rst:4631
msgid "Terra 0.14.0"
msgstr ""

#: ../../release_notes.rst:4638
msgid "The 0.14.0 release includes several new features and bug fixes. The biggest change for this release is the introduction of a quantum circuit library in :mod:`qiskit.circuit.library`, containing some circuit families of interest."
msgstr ""

#: ../../release_notes.rst:4643
msgid "The circuit library gives users access to a rich set of well-studied circuit families, instances of which can be used as benchmarks, as building blocks in building more complex circuits, or as a tool to explore quantum computational advantage over classical. The contents of this library will continue to grow and mature."
msgstr ""

#: ../../release_notes.rst:4649
msgid "The initial release of the circuit library contains:"
msgstr ""

#: ../../release_notes.rst:4651
msgid "``standard_gates``: these are fixed-width gates commonly used as primitive building blocks, consisting of 1, 2, and 3 qubit gates. For example the :class:`~qiskit.circuit.library.XGate`, :class:`~qiskit.circuit.library.RZZGate` and :class:`~qiskit.circuit.library.CSWAPGate`. The old location of these gates under ``qiskit.extensions.standard`` is deprecated."
msgstr ""

#: ../../release_notes.rst:4657
msgid "``generalized_gates``: these are families that can generalize to arbitrarily many qubits, for example a :class:`~qiskit.circuit.library.Permutation` or :class:`~qiskit.circuit.library.GMS` (Global Molmer-Sorensen gate)."
msgstr ""

#: ../../release_notes.rst:4660
msgid "``boolean_logic``: circuits that transform basis states according to simple Boolean logic functions, such as :class:`~qiskit.circuit.library.ADD` or :class:`~qiskit.circuit.library.XOR`."
msgstr ""

#: ../../release_notes.rst:4663
msgid "``arithmetic``: a set of circuits for doing classical arithmetic such as :class:`~qiskit.circuit.library.WeightedAdder` and :class:`~qiskit.circuit.library.IntegerComparator`."
msgstr ""

#: ../../release_notes.rst:4666
msgid "``basis_changes``: circuits such as the quantum Fourier transform, :class:`~qiskit.circuit.library.QFT`, that mathematically apply basis changes."
msgstr ""

#: ../../release_notes.rst:4669
msgid "``n_local``: patterns to easily create large circuits with rotation and entanglement layers, such as  :class:`~qiskit.circuit.library.TwoLocal` which uses single-qubit rotations and two-qubit entanglements."
msgstr ""

#: ../../release_notes.rst:4672
msgid "``data_preparation``: circuits that take classical input data and encode it in a quantum state that is difficult to simulate, e.g. :class:`~qiskit.circuit.library.PauliFeatureMap` or :class:`~qiskit.circuit.library.ZZFeatureMap`."
msgstr ""

#: ../../release_notes.rst:4676
msgid "Other circuits that have proven interesting in the literature, such as :class:`~qiskit.circuit.library.QuantumVolume`, :class:`~qiskit.circuit.library.GraphState`, or :class:`~qiskit.circuit.library.IQP`."
msgstr ""

#: ../../release_notes.rst:4681
msgid "To allow easier use of these circuits as building blocks, we have introduced a :meth:`~qiskit.circuit.QuantumCircuit.compose` method of :class:`qiskit.circuit.QuantumCircuit` for composition of circuits either with other circuits (by welding them at the ends and optionally permuting wires) or with other simpler gates::"
msgstr ""

#: ../../release_notes.rst:4704
msgid "With this, Qiskit's circuits no longer assume an implicit initial state of :math:`|0\\rangle`, and will not be drawn with this initial state. The all-zero initial state is still assumed on a backend when a circuit is executed."
msgstr ""

#: ../../release_notes.rst:4715
msgid "A new method, :meth:`~qiskit.circuit.EquivalenceLibrary.has_entry`, has been added to the :class:`qiskit.circuit.EquivalenceLibrary` class to quickly check if a given gate has any known decompositions in the library."
msgstr ""

#: ../../release_notes.rst:4719
msgid "A new class :class:`~qiskit.circuit.library.IQP`, to construct an instantaneous quantum polynomial circuit, has been added to the circuit library module :mod:`qiskit.circuit.library`."
msgstr ""

#: ../../release_notes.rst:4723
msgid "A new :meth:`~qiskit.circuit.QuantumCircuit.compose` method has been added to :class:`qiskit.circuit.QuantumCircuit`. It allows composition of two quantum circuits without having to turn one into a gate or instruction. It also allows permutations of qubits/clbits at the point of composition, as well as optional inplace modification. It can also be used in place of :meth:`~qiskit.circuit.QuantumCircuit.append()`, as it allows composing instructions and operators onto the circuit as well."
msgstr ""

#: ../../release_notes.rst:4732
msgid ":class:`qiskit.circuit.library.Diagonal` circuits have been added to the circuit library. These circuits implement diagonal quantum operators (consisting of non-zero elements only on the diagonal). They are more efficiently simulated by the Aer simulator than dense matrices."
msgstr ""

#: ../../release_notes.rst:4737
msgid "Add :meth:`~qiskit.quantum_info.Clifford.from_label` method to the :class:`qiskit.quantum_info.Clifford` class for initializing as the tensor product of single-qubit I, X, Y, Z, H, or S gates."
msgstr ""

#: ../../release_notes.rst:4741
msgid "Schedule transformer :func:`qiskit.pulse.reschedule.compress_pulses` performs an optimization pass to reduce the usage of waveform memory in hardware by replacing multiple identical instances of a pulse in a pulse schedule with a single pulse. For example::"
msgstr ""

#: ../../release_notes.rst:4759
msgid "The :class:`qiskit.transpiler.Layout` has a new method :meth:`~qiskit.transpiler.Layout.reorder_bits` that is used to reorder a list of virtual qubits based on the layout object."
msgstr ""

#: ../../release_notes.rst:4763
msgid "Two new methods have been added to the :class:`qiskit.providers.models.PulseBackendConfiguration` for interacting with channels."
msgstr ""

#: ../../release_notes.rst:4767
msgid ":meth:`~qiskit.providers.models.PulseBackendConfiguration.get_channel_qubits` to get a list of all qubits operated by the given channel and"
msgstr ""

#: ../../release_notes.rst:4769
msgid ":meth:`~qiskit.providers.models.PulseBackendConfiguration.get_qubit_channel` to get a list of channels operating on the given qubit."
msgstr ""

#: ../../release_notes.rst:4772
msgid "New :class:`qiskit.extensions.HamiltonianGate` and :meth:`qiskit.circuit.QuantumCircuit.hamiltonian()` methods are introduced, representing Hamiltonian evolution of the circuit wavefunction by a user-specified Hermitian Operator and evolution time. The evolution time can be a :class:`~qiskit.circuit.Parameter`, allowing the creation of parameterized UCCSD or QAOA-style circuits which compile to ``UnitaryGate`` objects if ``time`` parameters are provided. The Unitary of a ``HamiltonianGate`` with Hamiltonian Operator ``H`` and time parameter ``t`` is :math:`e^{-iHt}`."
msgstr ""

#: ../../release_notes.rst:4782
msgid "The circuit library module :mod:`qiskit.circuit.library` now provides a new boolean logic AND circuit, :class:`qiskit.circuit.library.AND`, and OR circuit, :class:`qiskit.circuit.library.OR`, which implement the respective operations on a variable number of provided qubits."
msgstr ""

#: ../../release_notes.rst:4787
msgid "New fake backends are added under :mod:`qiskit.test.mock`. These include mocked versions of ``ibmq_armonk``, ``ibmq_essex``, ``ibmq_london``, ``ibmq_valencia``, ``ibmq_cambridge``, ``ibmq_paris``, ``ibmq_rome``, and ``ibmq_athens``. As with other fake backends, these include snapshots of calibration data (i.e. ``backend.defaults()``) and error data (i.e. ``backend.properties()``) taken from the real system, and can be used for local testing, compilation and simulation."
msgstr ""

#: ../../release_notes.rst:4795
msgid "The ``last_update_date`` parameter for :class:`~qiskit.providers.models.BackendProperties` can now also be passed in as a ``datetime`` object. Previously only a string in ISO8601 format was accepted."
msgstr ""

#: ../../release_notes.rst:4800
msgid "Adds :meth:`qiskit.quantum_info.Statevector.from_int` and :meth:`qiskit.quantum_info.DensityMatrix.from_int` methods that allow constructing a computational basis state for specified system dimensions."
msgstr ""

#: ../../release_notes.rst:4804
msgid "The methods on the :class:`qiskit.circuit.QuantumCircuit` class for adding gates (for example :meth:`~qiskit.circuit.QuantumCircuit.h`) which were previously added dynamically at run time to the class definition have been refactored to be statically defined methods of the class. This means that static analyzer (such as IDEs) can now read these methods."
msgstr ""

#: ../../release_notes.rst:4816
msgid "A new package, `python-dateutil <https://pypi.org/project/python-dateutil/>`_, is now required and has been added to the requirements list. It is being used to parse datetime strings received from external providers in :class:`~qiskit.providers.models.BackendProperties` objects."
msgstr ""

#: ../../release_notes.rst:4822
msgid "The marshmallow schema classes in :mod:`qiskit.providers.models` have been removed since they are no longer used by the BackendObjects."
msgstr ""

#: ../../release_notes.rst:4825
msgid "The output of the ``to_dict()`` method for the classes in :mod:`qiskit.providers.models` is no longer in a format for direct JSON serialization. Depending on the content contained in instances of these class there may be numpy arrays and/or complex numbers in the fields of the dict. If you're JSON serializing the output of the to_dict methods you should ensure your JSON encoder can handle numpy arrays and complex numbers. This includes:"
msgstr ""

#: ../../release_notes.rst:4833
msgid ":meth:`qiskit.providers.models.BackendConfiguration.to_dict`"
msgstr ""

#: ../../release_notes.rst:4834
msgid ":meth:`qiskit.providers.models.BackendProperties.to_dict`"
msgstr ""

#: ../../release_notes.rst:4835
msgid ":meth:`qiskit.providers.models.BackendStatus.to_dict`"
msgstr ""

#: ../../release_notes.rst:4836
msgid ":meth:`qiskit.providers.models.QasmBackendConfiguration.to_dict`"
msgstr ""

#: ../../release_notes.rst:4837
msgid ":meth:`qiskit.providers.models.PulseBackendConfiguration.to_dict`"
msgstr ""

#: ../../release_notes.rst:4838
msgid ":meth:`qiskit.providers.models.UchannelLO.to_dict`"
msgstr ""

#: ../../release_notes.rst:4839
msgid ":meth:`qiskit.providers.models.GateConfig.to_dict`"
msgstr ""

#: ../../release_notes.rst:4840
msgid ":meth:`qiskit.providers.models.PulseDefaults.to_dict`"
msgstr ""

#: ../../release_notes.rst:4841
msgid ":meth:`qiskit.providers.models.Command.to_dict`"
msgstr ""

#: ../../release_notes.rst:4842
msgid ":meth:`qiskit.providers.models.JobStatus.to_dict`"
msgstr ""

#: ../../release_notes.rst:4843
msgid ":meth:`qiskit.providers.models.Nduv.to_dict`"
msgstr ""

#: ../../release_notes.rst:4844
msgid ":meth:`qiskit.providers.models.Gate.to_dict`"
msgstr ""

#: ../../release_notes.rst:4852
msgid "The :meth:`qiskit.dagcircuit.DAGCircuit.compose` method now takes a list of qubits/clbits that specify the positional order of bits to compose onto. The dictionary-based method of mapping using the ``edge_map`` argument is deprecated and will be removed in a future release."
msgstr ""

#: ../../release_notes.rst:4857
msgid "The ``combine_into_edge_map()`` method for the :class:`qiskit.transpiler.Layout` class has been deprecated and will be removed in a future release. Instead, the new method :meth:`~qiskit.transpiler.Layout.reorder_bits` should be used to reorder a list of virtual qubits according to the layout object."
msgstr ""

#: ../../release_notes.rst:4863
msgid "Passing a :class:`qiskit.pulse.ControlChannel` object in via the parameter ``channel`` for the :class:`qiskit.providers.models.PulseBackendConfiguration` method :meth:`~qiskit.providers.models.PulseBackendConfiguration.control` has been deprecated and will be removed in a future release. The ``ControlChannel`` objects are now generated from the backend configuration ``channels`` attribute which has the information of all channels and the qubits they operate on. Now, the method :meth:`~qiskit.providers.models.PulseBackendConfiguration.control` is expected to take the parameter ``qubits`` of the form ``(control_qubit, target_qubit)`` and type ``list`` or ``tuple``, and returns a list of control channels."
msgstr ""

#: ../../release_notes.rst:4876
msgid "The ``AND`` and ``OR`` methods of :class:`qiskit.circuit.QuantumCircuit` are deprecated and will be removed in a future release. Instead you should use the circuit library boolean logic classes :class:`qiskit.circuit.library.AND` amd :class:`qiskit.circuit.library.OR` and then append those objects to your class. For example::"
msgstr ""

#: ../../release_notes.rst:4893
msgid "The ``qiskit.extensions.standard`` module is deprecated and will be removed in a future release. The gate classes in that module have been moved to :mod:`qiskit.circuit.library.standard_gates`."
msgstr ""

#: ../../release_notes.rst:4903
msgid "The :class:`qiskit.circuit.QuantumCircuit` methods :meth:`~qiskit.circuit.QuantumCircuit.inverse`, :meth:`~qiskit.circuit.QuantumCircuit.mirror` methods, as well as the ``QuantumCircuit.data`` setter would generate an invalid circuit when used on a parameterized circuit instance. This has been resolved and these methods should now work with a parameterized circuit. Fixes `#4235 <https://github.com/Qiskit/qiskit-terra/issues/4235>`_"
msgstr ""

#: ../../release_notes.rst:4911
msgid "Previously when creating a controlled version of a standard qiskit gate if a ``ctrl_state`` was specified a generic ``ControlledGate`` object would be returned whereas without it a standard qiskit controlled gate would be returned if it was defined. This PR allows standard qiskit controlled gates to understand ``ctrl_state``."
msgstr ""

#: ../../release_notes.rst:4918
msgid "Additionally, this PR fixes what might be considered a bug where setting the ``ctrl_state`` of an already controlled gate would assume the specified state applied to the full control width instead of the control qubits being added. For instance,::"
msgstr ""

#: ../../release_notes.rst:4930
msgid "would apply ``ctrl_state`` to all three control qubits instead of just the two control qubits being added."
msgstr ""

#: ../../release_notes.rst:4933
msgid "Fixed a bug in :func:`~qiskit.quantum_info.random_clifford` that stopped it from sampling the full Clifford group. Fixes `#4271 <https://github.com/Qiskit/qiskit-terra/issues/4271>`_"
msgstr ""

#: ../../release_notes.rst:4937
msgid "The :class:`qiskit.circuit.Instruction` method :meth:`qiskit.circuit.Instruction.is_parameterized` method had previously returned ``True`` for any ``Instruction`` instance which had a :class:`qiskit.circuit.Parameter` in any element of its ``params`` array, even if that ``Parameter`` had been fully bound. This has been corrected so that ``.is_parameterized`` will return ``False`` when the instruction is fully bound."
msgstr ""

#: ../../release_notes.rst:4945
msgid ":meth:`qiskit.circuit.ParameterExpression.subs` had not correctly detected some cases where substituting parameters would result in a two distinct :class:`~qiskit.circuit.Parameters` objects in an expression with the same name. This has been corrected so a ``CircuitError`` will be raised in these cases."
msgstr ""

#: ../../release_notes.rst:4951
msgid "Improve performance of :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` for low-qubit circuit simulations by optimizing the class ``__init__`` methods. Fixes `#4281 <https://github.com/Qiskit/qiskit-terra/issues/4281>`_"
msgstr ""

#: ../../release_notes.rst:4956
msgid "The function :func:`qiskit.compiler.transpile` now correctly handles when the parameter ``basis_gates`` is set to ``None``. This will allow any gate in the output tranpiled circuit, including gates added by the transpilation process. Note that using this parameter may have some unintended consequences during optimization. Some transpiler passes depend on having a ``basis_gates`` set. For example, :class:`qiskit.transpiler.passes.Optimize1qGates` only optimizes the chains of u1, u2, and u3 gates and without ``basis_gates`` it is unable to unroll gates that otherwise could be optimized:"
msgstr ""

#: ../../release_notes.rst:4986
msgid "Fixes `#3017 <https://github.com/Qiskit/qiskit-terra/issues/3017>`_"
msgstr ""

#: ../../release_notes.rst:4994
msgid "The objects in :mod:`qiskit.providers.models` which were previously constructed using the marshmallow library have been refactored to not depend on marshmallow. This includes:"
msgstr ""

#: ../../release_notes.rst:4998
msgid ":class:`~qiskit.providers.models.BackendConfiguration`"
msgstr ""

#: ../../release_notes.rst:4999
msgid ":class:`~qiskit.providers.models.BackendProperties`"
msgstr ""

#: ../../release_notes.rst:5000
msgid ":class:`~qiskit.providers.models.BackendStatus`"
msgstr ""

#: ../../release_notes.rst:5001
msgid ":class:`~qiskit.providers.models.QasmBackendConfiguration`"
msgstr ""

#: ../../release_notes.rst:5002
msgid ":class:`~qiskit.providers.models.PulseBackendConfiguration`"
msgstr ""

#: ../../release_notes.rst:5003
msgid ":class:`~qiskit.providers.models.UchannelLO`"
msgstr ""

#: ../../release_notes.rst:5004
msgid ":class:`~qiskit.providers.models.GateConfig`"
msgstr ""

#: ../../release_notes.rst:5005
msgid ":class:`~qiskit.providers.models.PulseDefaults`"
msgstr ""

#: ../../release_notes.rst:5006
msgid ":class:`~qiskit.providers.models.Command`"
msgstr ""

#: ../../release_notes.rst:5007
msgid ":class:`~qiskit.providers.models.JobStatus`"
msgstr ""

#: ../../release_notes.rst:5008
msgid ":class:`~qiskit.providers.models.Nduv`"
msgstr ""

#: ../../release_notes.rst:5009
msgid ":class:`~qiskit.providers.models.Gate`"
msgstr ""

#: ../../release_notes.rst:5011
msgid "These should be drop-in replacements without any noticeable change but specifics inherited from marshmallow may not work. Please file issues for any incompatibilities found."
msgstr ""

#: ../../release_notes.rst:5016 ../../release_notes.rst:5150
msgid "Aer 0.5.1"
msgstr ""

#: ../../release_notes.rst:5027
msgid "Aqua 0.7.0"
msgstr ""

#: ../../release_notes.rst:5032
msgid "The Qiskit Aqua 0.7.0 release introduces a lot of new functionality along with an improved integration with :class:`qiskit.circuit.QuantumCircuit` objects. The central contributions are the Qiskit's optimization module, a complete refactor on Operators, using circuits as native input for the algorithms and removal of the declarative JSON API."
msgstr ""

#: ../../release_notes.rst:5039
msgid "Optimization module"
msgstr ""

#: ../../release_notes.rst:5040
msgid "The :mod:`qiskit.optimization`` module now offers functionality for modeling and solving quadratic programs. It provides various near-term quantum and conventional algorithms, such as the ``MinimumEigenOptimizer`` (covering e.g. ``VQE`` or ``QAOA``) or ``CplexOptimizer``, as well as a set of converters to translate between different problem representations, such as ``QuadraticProgramToQubo``. See the `changelog <https://github.com/Qiskit/qiskit-aqua/blob/master/CHANGELOG.md>`_ for a list of the added features."
msgstr ""

#: ../../release_notes.rst:5051
msgid "Operator flow"
msgstr ""

#: ../../release_notes.rst:5052
msgid "The operator logic provided in :mod:`qiskit.aqua.operators`` was completely refactored and is now a full set of tools for constructing physically-intuitive quantum computations. It contains state functions, operators and measurements and internally relies on Terra's Operator objects. Computing expectation values and evolutions was heavily simplified and objects like the ``ExpectationFactory`` produce the suitable, most efficient expectation algorithm based on the Operator input type. See the `changelog <https://github.com/Qiskit/qiskit-aqua/blob/master/CHANGELOG.md>`_ for a overview of the added functionality."
msgstr ""

#: ../../release_notes.rst:5063
msgid "Native circuits"
msgstr ""

#: ../../release_notes.rst:5064
msgid "Algorithms commonly use parameterized circuits as input, for example the VQE, VQC or QSVM. Previously, these inputs had to be of type ``VariationalForm`` or ``FeatureMap`` which were wrapping the circuit object. Now circuits are natively supported in these algorithms, which means any individually constructed ``QuantumCircuit`` can be passed to these algorithms. In combination with the release of the circuit library which offers a wide collection of circuit families, it is now easy to construct elaborate circuits as algorithm input."
msgstr ""

#: ../../release_notes.rst:5074
msgid "Declarative JSON API"
msgstr ""

#: ../../release_notes.rst:5075
msgid "The ability of running algorithms using dictionaries as parameters as well as using the Aqua interfaces GUI has been removed."
msgstr ""

#: ../../release_notes.rst:5080
msgid "IBM Q Provider 0.7.0"
msgstr ""

#: ../../release_notes.rst:5087
msgid "A new exception, :class:`qiskit.providers.ibmq.IBMQBackendJobLimitError`, is now raised if a job could not be submitted because the limit on active jobs has been reached."
msgstr ""

#: ../../release_notes.rst:5091
msgid ":class:`qiskit.providers.ibmq.job.IBMQJob` and :class:`qiskit.providers.ibmq.managed.ManagedJobSet` each has two new methods ``update_name`` and ``update_tags``. They are used to change the name and tags of a job or a job set, respectively."
msgstr ""

#: ../../release_notes.rst:5096
msgid ":meth:`qiskit.providers.ibmq.IBMQFactory.save_account` and :meth:`qiskit.providers.ibmq.IBMQFactory.enable_account` now accept optional parameters ``hub``, ``group``, and ``project``, which allow specifying a default provider to save to disk or use, respectively."
msgstr ""

#: ../../release_notes.rst:5107
msgid "The :class:`qiskit.providers.ibmq.job.IBMQJob` methods ``creation_date`` and ``time_per_step`` now return date time information as a ``datetime`` object in local time instead of UTC. Similarly, the parameters ``start_datetime`` and ``end_datetime``, of :meth:`qiskit.providers.ibmq.IBMQBackendService.jobs` and :meth:`qiskit.providers.ibmq.IBMQBackend.jobs` can now be specified in local time."
msgstr ""

#: ../../release_notes.rst:5114
msgid "The :meth:`qiskit.providers.ibmq.job.QueueInfo.format` method now uses a custom ``datetime`` to string formatter, and the package `arrow <https://pypi.org/project/arrow/>`_ is no longer required and has been removed from the requirements list."
msgstr ""

#: ../../release_notes.rst:5125
msgid "The :meth:`~qiskit.providers.ibmq.job.IBMQJob.from_dict` and :meth:`~qiskit.providers.ibmq.job.IBMQJob.to_dict` methods of :class:`qiskit.providers.ibmq.job.IBMQJob` are deprecated and will be removed in the next release."
msgstr ""

#: ../../release_notes.rst:5136
msgid "Fixed an issue where ``nest_asyncio.apply()`` may raise an exception if there is no asyncio loop due to threading."
msgstr ""

#: ../../release_notes.rst:5142
msgid "Qiskit 0.18.3"
msgstr ""

#: ../../release_notes.rst:5145 ../../release_notes.rst:5245
msgid "Terra 0.13.0"
msgstr ""

#: ../../release_notes.rst:5194
msgid "Fixes Controller classes so that the ReduceBarrier transpilation pass is applied first. This prevents barrier instructions from preventing truncation of unused qubits if the only instruction defined on them was a barrier."
msgstr ""

#: ../../release_notes.rst:5201
msgid "Fix error in gate time unit conversion for device noise model with thermal relaxation errors and gate errors. The error probability the depolarizing error was being  calculated with gate time in microseconds, while for thermal relaxation it was being calculated in nanoseconds. This resulted in no depolarizing error being applied as the incorrect units would make the device seem to be coherence limited."
msgstr ""

#: ../../release_notes.rst:5208
msgid "Fix bug in incorrect composition of QuantumErrors when the qubits of composed instructions differ."
msgstr ""

#: ../../release_notes.rst:5211
msgid "Fix issue where the \"diagonal\" gate is checked to be unitary with too high a tolerance. This was causing diagonals generated from Numpy functions to often fail the test."
msgstr ""

#: ../../release_notes.rst:5215
msgid "Fix remove-barrier circuit optimization pass to be applied before qubit trucation. This fixes an issue where barriers inserted by the Terra transpiler across otherwise inactive qubits would prevent them from being truncated."
msgstr ""

#: ../../release_notes.rst:5227
msgid "Aqua 0.6.6"
msgstr ""

#: ../../release_notes.rst:5233
msgid "IBM Q Provider 0.6.1"
msgstr ""

#: ../../release_notes.rst:5240
msgid "Qiskit 0.18.0"
msgstr ""

#: ../../release_notes.rst:5252
msgid "The 0.13.0 release includes many big changes. Some highlights for this release are:"
msgstr ""

#: ../../release_notes.rst:5255
msgid "For the transpiler we have switched the graph library used to build the :class:`qiskit.dagcircuit.DAGCircuit` class which is the underlying data structure behind all operations to be based on `retworkx <https://pypi.org/project/retworkx/>`_ for greatly improved performance. Circuit transpilation speed in the 0.13.0 release should be significanlty faster than in previous releases."
msgstr ""

#: ../../release_notes.rst:5262
msgid "There has been a significant simplification to the style in which Pulse instructions are built. Now, ``Command`` s are deprecated and a unified set of :class:`~qiskit.pulse.instructions.Instruction` s are supported."
msgstr ""

#: ../../release_notes.rst:5266
msgid "The :mod:`qiskit.quantum_info` module includes several new functions for generating random operators (such as Cliffords and quantum channels) and for computing the diamond norm of quantum channels; upgrades to the :class:`~qiskit.quantum_info.Statevector` and :class:`~qiskit.quantum_info.DensityMatrix` classes to support computing measurement probabilities and sampling measurements; and several new classes are based on the symplectic representation of Pauli matrices. These new classes include Clifford operators (:class:`~qiskit.quantum_info.Clifford`), N-qubit matrices that are sparse in the Pauli basis (:class:`~qiskit.quantum_info.SparsePauliOp`), lists of Pauli's (:class:`~qiskit.quantum_info.PauliTable`), and lists of stabilizers (:class:`~qiskit.quantum_info.StabilizerTable`)."
msgstr ""

#: ../../release_notes.rst:5279
msgid "This release also has vastly improved documentation across Qiskit, including improved documentation for the :mod:`qiskit.circuit`, :mod:`qiskit.pulse` and :mod:`qiskit.quantum_info` modules."
msgstr ""

#: ../../release_notes.rst:5283
msgid "Additionally, the naming of gate objects and :class:`~qiskit.circuit.QuantumCircuit` methods have been updated to be more consistent. This has resulted in several classes and methods being deprecated as things move to a more consistent naming scheme."
msgstr ""

#: ../../release_notes.rst:5288
msgid "For full details on all the changes made in this release see the detailed release notes below."
msgstr ""

#: ../../release_notes.rst:5297
msgid "Added a new circuit library module :mod:`qiskit.circuit.library`. This will be a place for constructors of commonly used circuits that can be used as building blocks for larger circuits or applications."
msgstr ""

#: ../../release_notes.rst:5301
msgid "The :class:`qiskit.providers.BaseJob` class has four new methods:"
msgstr ""

#: ../../release_notes.rst:5303
msgid ":meth:`~qiskit.providers.BaseJob.done`"
msgstr ""

#: ../../release_notes.rst:5304
msgid ":meth:`~qiskit.providers.BaseJob.running`"
msgstr ""

#: ../../release_notes.rst:5305
msgid ":meth:`~qiskit.providers.BaseJob.cancelled`"
msgstr ""

#: ../../release_notes.rst:5306
msgid ":meth:`~qiskit.providers.BaseJob.in_final_state`"
msgstr ""

#: ../../release_notes.rst:5308
msgid "These methods are used to check wheter a job is in a given job status."
msgstr ""

#: ../../release_notes.rst:5310
msgid "Add ability to specify control conditioned on a qubit being in the ground state. The state of the control qubits is represented by an integer. For example::"
msgstr ""

#: ../../release_notes.rst:5321
msgid "Creates a four qubit gate where the fourth qubit gets flipped if the first qubit is in the ground state and the second and third qubits are in the excited state. If ``ctrl_state`` is ``None``, the default, control is conditioned on all control qubits being excited."
msgstr ""

#: ../../release_notes.rst:5327
#, python-format
msgid "A new jupyter widget, ``%circuit_library_info`` has been added to :mod:`qiskit.tools.jupyter`. This widget is used for visualizing details about circuits built from the circuit library. For example"
msgstr ""

#: ../../release_notes.rst:5338
msgid "A new kwarg option, ``formatted`` ,  has been added to :meth:`qiskit.circuit.QuantumCircuit.qasm` . When set to ``True`` the method will print a syntax highlighted version (using pygments) to stdout and return ``None`` (which differs from the normal behavior of returning the QASM code as a string)."
msgstr ""

#: ../../release_notes.rst:5344
msgid "A new kwarg option, ``filename`` , has been added to :meth:`qiskit.circuit.QuantumCircuit.qasm`. When set to a path the method will write the QASM code to that file. It will then continue to output as normal."
msgstr ""

#: ../../release_notes.rst:5349
msgid "A new instruction :py:class:`~qiskit.pulse.SetFrequency` which allows users to change the frequency of the :class:`~qiskit.pulse.PulseChannel`. This is done in the following way::"
msgstr ""

#: ../../release_notes.rst:5359
msgid "In this example, the frequency of all pulses before the ``SetFrequency`` command will be the default frequency and all pulses applied to drive channel zero after the ``SetFrequency`` command will be at 5.5 GHz. Users of ``SetFrequency`` should keep in mind any hardware limitations."
msgstr ""

#: ../../release_notes.rst:5364
msgid "A new method, :meth:`~qiskit.circuit.QuantumCircuit.assign_parameters` has been added to the :class:`qiskit.circuit.QuantumCircuit` class. This method accepts a parameter dictionary with both floats and Parameters objects in a single dictionary. In other words this new method allows you to bind floats, Parameters or both in a single dictionary."
msgstr ""

#: ../../release_notes.rst:5370
msgid "Also, by using the ``inplace`` kwarg it can be specified you can optionally modify the original circuit in place. By default this is set to ``False`` and a copy of the original circuit will be returned from the method."
msgstr ""

#: ../../release_notes.rst:5374
msgid "A new method :meth:`~qiskit.circuit.QuantumCircuit.num_nonlocal_gates` has been added to the :class:`qiskit.circuit.QuantumCircuit` class. This method will return the number of gates in a circuit that involve 2 or or more qubits. These gates are more costly in terms of time and error to implement."
msgstr ""

#: ../../release_notes.rst:5380
msgid "The :class:`qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.iso` for adding an :class:`~qiskit.extensions.Isometry` gate to the circuit has a new alias. You can now call :meth:`qiskit.circuit.QuantumCircuit.isometry` in addition to calling ``iso``."
msgstr ""

#: ../../release_notes.rst:5386
msgid "A ``description`` attribute has been added to the :class:`~qiskit.transpiler.CouplingMap` class for storing a short description for different coupling maps (e.g. full, grid, line, etc.)."
msgstr ""

#: ../../release_notes.rst:5390
msgid "A new method :meth:`~qiskit.dagcircuit.DAGCircuit.compose` has been added to the :class:`~qiskit.dagcircuit.DAGCircuit` class for composing two circuits via their DAGs."
msgstr ""

#: ../../release_notes.rst:5433
msgid "The mock backends in ``qiskit.test.mock`` now have a functional ``run()`` method that will return results similar to the real devices. If ``qiskit-aer`` is installed a simulation will be run with a noise model built from the device snapshot in the fake backend.  Otherwise, :class:`qiskit.providers.basicaer.QasmSimulatorPy` will be used to run an ideal simulation. Additionally, if a pulse experiment is passed to ``run`` and qiskit-aer is installed the ``PulseSimulator`` will be used to simulate the pulse schedules."
msgstr ""

#: ../../release_notes.rst:5442
msgid "The :meth:`qiskit.result.Result` method :meth:`~qiskit.result.Result.get_counts` will now return a list of all the counts available when there are multiple circuits in a job. This works when ``get_counts()`` is called with no arguments."
msgstr ""

#: ../../release_notes.rst:5447
msgid "The main consideration for this feature was for drawing all the results from multiple circuits in the same histogram. For example it is now possible to do something like:"
msgstr ""

#: ../../release_notes.rst:5468
msgid "A new kwarg, ``initial_state`` has been added to the :func:`qiskit.visualization.circuit_drawer` function and the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.draw`. When set to ``True`` the initial state will be included in circuit visualizations for all backends. For example:"
msgstr ""

#: ../../release_notes.rst:5483
msgid "It is now possible to insert a callable into a :class:`qiskit.pulse.InstructionScheduleMap` which returns a new :class:`qiskit.pulse.Schedule` when it is called with parameters. For example:"
msgstr ""

#: ../../release_notes.rst:5499
msgid "Two new gate classes, :class:`qiskit.extensions.iSwapGate` and :class:`qiskit.extensions.DCXGate`, along with their :class:`~qiskit.circuit.QuantumCircuit` methods :meth:`~qiskit.circuit.QuantumCircuit.iswap` and :meth:`~qiskit.circuit.QuantumCircuit.dcx` have been added to the standard extensions. These gates, which are locally equivalent to each other, can be used to enact particular XY interactions. A brief motivation for these gates can be found in: `arxiv.org/abs/quant-ph/0209035 <https://arxiv.org/abs/quant-ph/0209035>`_"
msgstr ""

#: ../../release_notes.rst:5509
msgid "The :class:`qiskit.providers.BaseJob` class now has a new method :meth:`~qiskit.providers.BaseJob.wait_for_final_state` that polls for the job status until the job reaches a final state (such as ``DONE`` or ``ERROR``). This method also takes an optional ``callback`` kwarg which takes a Python callable that will be called during each iteration of the poll loop."
msgstr ""

#: ../../release_notes.rst:5516
msgid "The ``search_width`` and ``search_depth`` attributes of the :class:`qiskit.transpiler.passes.LookaheadSwap` pass are now settable when initializing the pass. A larger search space can often lead to more optimized circuits, at the cost of longer run time."
msgstr ""

#: ../../release_notes.rst:5521
msgid "The number of qubits in :class:`~qiskit.providers.models.BackendConfiguration` can now be accessed via the property :py:attr:`~qiskit.providers.models.BackendConfiguration.num_qubits`. It was previously only accessible via the ``n_qubits`` attribute."
msgstr ""

#: ../../release_notes.rst:5527
msgid "Two new methods, :meth:`~qiskit.quantum_info.OneQubitEulerDecomposer.angles` and :meth:`~qiskit.quantum_info.OneQubitEulerDecomposer.angles_and_phase`, have been added to the :class:`qiskit.quantum_info.OneQubitEulerDecomposer` class. These methods will return the relevant parameters without validation, and calling the ``OneQubitEulerDecomposer`` object will perform the full synthesis with validation."
msgstr ""

#: ../../release_notes.rst:5534
msgid "An ``RR`` decomposition basis has been added to the :class:`qiskit.quantum_info.OneQubitEulerDecomposer` for decomposing an arbitrary 2x2 unitary into a two :class:`~qiskit.extensions.RGate` circuit."
msgstr ""

#: ../../release_notes.rst:5539
msgid "Adds the ability to set ``qargs`` to objects which are subclasses of the abstract ``BaseOperator`` class. This is done by calling the object ``op(qargs)`` (where ``op`` is an operator class) and will return a shallow copy of the original object with a qargs property set. When such an object is used with the :meth:`~qiskit.quantum_info.Operator.compose` or :meth:`~qiskit.quantum_info.Operator.dot` methods the internal value for qargs will be used when the ``qargs`` method kwarg is not used. This allows for subsystem composition using binary operators, for example::"
msgstr ""

#: ../../release_notes.rst:5556
msgid "Adds :class:`qiskit.quantum_info.Clifford` operator class to the `quantum_info` module. This operator is an efficient symplectic representation an N-qubit unitary operator from the Clifford group. This class includes a :meth:`~qiskit.quantum_info.Clifford.to_circuit` method for compilation into a :class:`~qiskit.QuantumCircuit` of Clifford gates with a minimal number of CX gates for up to 3-qubits. It also providers general compilation for N > 3 qubits but this method is not optimal in the number of two-qubit gates."
msgstr ""

#: ../../release_notes.rst:5565
msgid "Adds :class:`qiskit.quantum_info.SparsePauliOp` operator class. This is an efficient representaiton of an N-qubit matrix that is sparse in the Pauli basis and uses a :class:`qiskit.quantum_info.PauliTable` and vector of complex coefficients for its data structure."
msgstr ""

#: ../../release_notes.rst:5570
msgid "This class supports much of the same functionality of the :class:`qiskit.quantum_info.Operator` class so :class:`~qiskit.quantum_info.SparsePauliOp` objects can be tensored, composed, scalar multiplied, added and subtracted."
msgstr ""

#: ../../release_notes.rst:5575
msgid "Numpy arrays or :class:`~qiskit.quantum_info.Operator` objects can be converted to a :class:`~qiskit.quantum_info.SparsePauliOp` using the `:class:`~qiskit.quantum_info.SparsePauliOp.from_operator` method. :class:`~qiskit.quantum_info.SparsePauliOp` can be convered to a sparse csr_matrix or dense Numpy array using the :class:`~qiskit.quantum_info.SparsePauliOp.to_matrix` method, or to an :class:`~qiskit.quantum_info.Operator` object using the :class:`~qiskit.quantum_info.SparsePauliOp.to_operator` method."
msgstr ""

#: ../../release_notes.rst:5584
msgid "A :class:`~qiskit.quantum_info.SparsePauliOp` can be iterated over in terms of its :class:`~qiskit.quantum_info.PauliTable` components and coefficients, its coefficients and Pauli string labels using the :meth:`~qiskit.quantum_info.SparsePauliOp.label_iter` method, and the (dense or sparse) matrix components using the :meth:`~qiskit.quantum_info.SparsePauliOp.matrix_iter` method."
msgstr ""

#: ../../release_notes.rst:5591
msgid "Add :meth:`qiskit.quantum_info.diamond_norm` function for computing the diamond norm (completely-bounded trace-norm) of a quantum channel. This can be used to compute the distance between two quantum channels using ``diamond_norm(chan1 - chan2)``."
msgstr ""

#: ../../release_notes.rst:5596
msgid "A new class :class:`qiskit.quantum_info.PauliTable` has been added. This is an efficient symplectic representation of a list of N-qubit Pauli operators. Some features of this class are:"
msgstr ""

#: ../../release_notes.rst:5600
msgid ":class:`~qiskit.quantum_info.PauliTable` objects may be composed, and tensored which will return a :class:`~qiskit.quantum_info.PauliTable` object with the combination of the operation ( :meth:`~qiskit.quantum_info.PauliTable.compose`, :meth:`~qiskit.quantum_info.PauliTable.dot`, :meth:`~qiskit.quantum_info.PauliTable.expand`, :meth:`~qiskit.quantum_info.PauliTable.tensor`) between each element of  the first table, with each element of the second table."
msgstr ""

#: ../../release_notes.rst:5609
msgid "Addition of two tables acts as list concatination of the terms in each table (``+``)."
msgstr ""

#: ../../release_notes.rst:5612
msgid "Pauli tables can be sorted by lexicographic (tensor product) order or by Pauli weights (:meth:`~qiskit.quantum_info.PauliTable.sort`)."
msgstr ""

#: ../../release_notes.rst:5615
msgid "Duplicate elements can be counted and deleted (:meth:`~qiskit.quantum_info.PauliTable.unique`)."
msgstr ""

#: ../../release_notes.rst:5618
msgid "The PauliTable may be iterated over in either its native symplectic boolean array representation, as Pauli string labels (:meth:`~qiskit.quantum_info.PauliTable.label_iter`), or as dense Numpy array or sparse CSR matrices (:meth:`~qiskit.quantum_info.PauliTable.matrix_iter`)."
msgstr ""

#: ../../release_notes.rst:5624
msgid "Checking commutation between elements of the Pauli table and another Pauli (:meth:`~qiskit.quantum_info.PauliTable.commutes`) or Pauli table (:meth:`~qiskit.quantum_info.PauliTable.commutes_with_all`)"
msgstr ""

#: ../../release_notes.rst:5628
msgid "See the :class:`qiskit.quantum_info.PauliTable` class API documentation for additional details."
msgstr ""

#: ../../release_notes.rst:5631
msgid "Adds :class:`qiskit.quantum_info.StabilizerTable` class. This is a subclass of the :class:`qiskit.quantum_info.PauliTable` class which includes a boolean phase vector along with the Pauli table array. This represents a list of Stabilizer operators which are real-Pauli operators with +1 or -1 coefficient. Because the stabilizer matrices are real the ``\"Y\"`` label matrix is defined as ``[[0, 1], [-1, 0]]``. See the API documentation for additional information."
msgstr ""

#: ../../release_notes.rst:5639
msgid "Adds :func:`qiskit.quantum_info.pauli_basis` function which returns an N-qubit Pauli basis as a :class:`qiskit.quantum_info.PauliTable` object. The ordering of this basis can either be by standard lexicographic (tensor product) order, or by the number of non-identity Pauli terms (weight)."
msgstr ""

#: ../../release_notes.rst:5644
msgid "Adds :class:`qiskit.quantum_info.ScalarOp` operator class that represents a scalar multiple of an identity operator. This can be used to initialize an identity on arbitrary dimension subsystems and it will be implicitly converted to other ``BaseOperator`` subclasses (such as an :class:`qiskit.quantum_info.Operator` or :class:`qiskit.quantum_info.SuperOp`) when it is composed with, or added to, them."
msgstr ""

#: ../../release_notes.rst:5652
msgid "Example: Identity operator"
msgstr ""

#: ../../release_notes.rst:5664
msgid "A new method, :meth:`~qiskit.quantum_info.Operator.reshape`, has been added to the :class:`qiskit.quantum_innfo.Operator` class that returns a shallow copy of an operator subclass with reshaped subsystem input or output dimensions. The combined dimensions of all subsystems must be the same as the original operator or an exception will be raised."
msgstr ""

#: ../../release_notes.rst:5670
msgid "Adds :func:`qiskit.quantum_info.random_clifford` for generating a random :class:`qiskit.quantum_info.Clifford` operator."
msgstr ""

#: ../../release_notes.rst:5673
msgid "Add :func:`qiskit.quantum_info.random_quantum_channel` function for generating a random quantum channel with fixed :class:`~qiskit.quantum_info.Choi`-rank in the :class:`~qiskit.quantum_info.Stinespring` representation."
msgstr ""

#: ../../release_notes.rst:5678
msgid "Add :func:`qiskit.quantum_info.random_hermitian` for generating a random Hermitian :class:`~qiskit.quantum_info.Operator`."
msgstr ""

#: ../../release_notes.rst:5681
msgid "Add :func:`qiskit.quantum_info.random_statevector` for generating a random :class:`~qiskit.quantum_info.Statevector`."
msgstr ""

#: ../../release_notes.rst:5684
msgid "Adds :func:`qiskit.quantum_info.random_pauli_table` for generating a random :class:`qiskit.quantum_info.PauliTable`."
msgstr ""

#: ../../release_notes.rst:5687
msgid "Adds :func:`qiskit.quantum_info.random_stabilizer_table` for generating a random :class:`qiskit.quantum_info.StabilizerTable`."
msgstr ""

#: ../../release_notes.rst:5690
msgid "Add a ``num_qubits`` attribute to :class:`qiskit.quantum_info.StateVector` and :class:`qiskit.quantum_info.DensityMatrix` classes. This returns the number of qubits for N-qubit states and returns ``None`` for non-qubit states."
msgstr ""

#: ../../release_notes.rst:5694
msgid "Adds :meth:`~qiskit.quantum_info.Statevector.to_dict` and :meth:`~qiskit.quantum_info.DensityMatrix.to_dict` methods to convert :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` objects into Bra-Ket notation dictionary."
msgstr ""

#: ../../release_notes.rst:5700 ../../release_notes.rst:5723
msgid "Example"
msgstr ""

#: ../../release_notes.rst:5716
msgid "Adds :meth:`~qiskit.quantum_info.Statevector.probabilities` and :meth:`~qiskit.quantum_info.DensityMatrix.probabilities` to :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes which return an array of measurement outcome probabilities in the computational basis for the specified subsystems."
msgstr ""

#: ../../release_notes.rst:5739
msgid "Adds :meth:`~qiskit.quantum_info.Statevector.probabilities_dict` and :meth:`~qiskit.quantum_info.DensityMatrix.probabilities_dict` to :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes which return a count-style dictionary array of measurement outcome probabilities in the computational basis for the specified subsystems."
msgstr ""

#: ../../release_notes.rst:5760
msgid "Add :meth:`~qiskit.quantum_info.Statevector.sample_counts` and :meth:`~qiskit.quantum_info.Statevector.sample_memory` methods to the :class:`~qiskit.quantum_info.Statevector` and :class:`~qiskit.quantum_info.DensityMatrix` classes for sampling measurement outcomes on subsystems."
msgstr ""

#: ../../release_notes.rst:5768
msgid "Generate a counts dictionary by sampling from a statevector"
msgstr ""

#: ../../release_notes.rst:5789
msgid "Return the array of measurement outcomes for each sample"
msgstr ""

#: ../../release_notes.rst:5810
msgid "Adds a :meth:`~qiskit.quantum_info.Statevector.measure` method to the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` quantum state classes. This allows sampling a single measurement outcome from the specified subsystems and collapsing the statevector to the post-measurement computational basis state. For example"
msgstr ""

#: ../../release_notes.rst:5833
msgid "Adds a :meth:`~qiskit.quantum_info.Statevector.reset` method to the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` quantum state classes. This allows reseting some or all subsystems to the :math:`|0\\rangle` state. For example"
msgstr ""

#: ../../release_notes.rst:5855
msgid "A new visualization function :func:`qiskit.visualization.visualize_transition` for visualizing single qubit gate transitions has been added. It takes in a single qubit circuit and returns an animation of qubit state transitions on a Bloch sphere. To use this function you must have installed the dependencies for and configured globally a matplotlib animtion writer. You can refer to the `matplotlib documentation <https://matplotlib.org/api/animation_api.html#writer-classes>`_ for more details on this. However, in the default case simply ensuring that `FFmpeg <https://www.ffmpeg.org/>`_ is installed is sufficient to use this function."
msgstr ""

#: ../../release_notes.rst:5867
msgid "It supports circuits with the following gates:"
msgstr ""

#: ../../release_notes.rst:5869
msgid ":class:`~qiskit.extensions.HGate`"
msgstr ""

#: ../../release_notes.rst:5870
msgid ":class:`~qiskit.extensions.XGate`"
msgstr ""

#: ../../release_notes.rst:5871
msgid ":class:`~qiskit.extensions.YGate`"
msgstr ""

#: ../../release_notes.rst:5872
msgid ":class:`~qiskit.extensions.ZGate`"
msgstr ""

#: ../../release_notes.rst:5873
msgid ":class:`~qiskit.extensions.RXGate`"
msgstr ""

#: ../../release_notes.rst:5874
msgid ":class:`~qiskit.extensions.RYGate`"
msgstr ""

#: ../../release_notes.rst:5875
msgid ":class:`~qiskit.extensions.RZGate`"
msgstr ""

#: ../../release_notes.rst:5876
msgid ":class:`~qiskit.extensions.SGate`"
msgstr ""

#: ../../release_notes.rst:5877
msgid ":class:`~qiskit.extensions.SdgGate`"
msgstr ""

#: ../../release_notes.rst:5878
msgid ":class:`~qiskit.extensions.TGate`"
msgstr ""

#: ../../release_notes.rst:5879
msgid ":class:`~qiskit.extensions.TdgGate`"
msgstr ""

#: ../../release_notes.rst:5880
msgid ":class:`~qiskit.extensions.U1Gate`"
msgstr ""

#: ../../release_notes.rst:5897
msgid ":func:`~qiskit.execute.execute` has a new kwarg ``schedule_circuit``. By setting ``schedule_circuit=True`` this enables scheduling of the circuit into a :class:`~qiskit.pulse.Schedule`. This allows users building :class:`qiskit.circuit.QuantumCircuit` objects to make use of custom scheduler  methods, such as the ``as_late_as_possible`` and ``as_soon_as_possible`` methods. For example::"
msgstr ""

#: ../../release_notes.rst:5908
msgid "A new environment variable ``QISKIT_SUPPRESS_PACKAGING_WARNINGS`` can be set to ``Y`` or ``y`` which will suppress the warnings about ``qiskit-aer`` and ``qiskit-ibmq-provider`` not being installed at import time. This is useful for users who are only running qiskit-terra (or just not qiskit-aer and/or qiskit-ibmq-provider) and the warnings are not an indication of a potential packaging problem. You can set the environment variable to ``N`` or ``n`` to ensure that warnings are always enabled even if the user config file is set to disable them."
msgstr ""

#: ../../release_notes.rst:5917
msgid "A new user config file option, ``suppress_packaging_warnings`` has been added. When set to ``true`` in your user config file like::"
msgstr ""

#: ../../release_notes.rst:5923
msgid "it will suppress the warnings about  ``qiskit-aer`` and ``qiskit-ibmq-provider`` not being installed at import time. This is useful for users who are only running qiskit-terra (or just not qiskit-aer and/or qiskit-ibmq-provider) and the warnings are not an indication of a potential packaging problem. If the user config file is set to disable the warnings this can be overriden by setting the ``QISKIT_SUPPRESS_PACKAGING_WARNINGS`` to ``N`` or ``n``"
msgstr ""

#: ../../release_notes.rst:5931
msgid ":func:`qiskit.compiler.transpile()` has two new kwargs, ``layout_method`` and ``routing_method``. These allow you to select a particular method for placement and routing of circuits on constrained architectures. For, example::"
msgstr ""

#: ../../release_notes.rst:5939
msgid "will run :class:`~qiskit.transpiler.passes.DenseLayout` layout pass and :class:`~qiskit.transpiler.passes.LookaheadSwap` routing pass."
msgstr ""

#: ../../release_notes.rst:5942
msgid "There has been a significant simplification to the style in which Pulse instructions are built."
msgstr ""

#: ../../release_notes.rst:5945
msgid "With the previous style, ``Command`` s were called with channels to make an :py:class:`~qiskit.pulse.instructions.Instruction`. The usage of both commands and instructions was a point of confusion. This was the previous style::"
msgstr ""

#: ../../release_notes.rst:5955
msgid "or, equivalently (though less used)::"
msgstr ""

#: ../../release_notes.rst:5963
msgid "Now, rather than build a command *and* an instruction, each command has been migrated into an instruction::"
msgstr ""

#: ../../release_notes.rst:5972
msgid "There is now a :py:class:`~qiskit.pulse.instructions.Play` instruction which takes a description of a pulse envelope and a channel. There is a new :py:class:`~qiskit.pulse.pulse_lib.Pulse` class in the :mod:`~qiskit.pulse.pulse_lib` from which the pulse envelope description should subclass."
msgstr ""

#: ../../release_notes.rst:5989
msgid "The :class:`qiskit.dagcircuit.DAGNode` method ``pop`` which was deprecated in the 0.9.0 release has been removed. If you were using this method you can leverage Python's ``del`` statement or ``delattr()`` function to perform the same task."
msgstr ""

#: ../../release_notes.rst:5994
#, python-format
msgid "A new optional visualization requirement, `pygments <https://pygments.org/>`_ , has been added. It is used for providing syntax highlighting of OpenQASM 2.0 code in Jupyter widgets and optionally for the :meth:`qiskit.circuit.QuantumCircuit.qasm` method. It must be installed (either with ``pip install pygments`` or ``pip install qiskit-terra[visualization]``) prior to using the ``%circuit_library_info`` widget in :mod:`qiskit.tools.jupyter` or the ``formatted`` kwarg on the :meth:`~qiskit.circuit.QuantumCircuit.qasm` method."
msgstr ""

#: ../../release_notes.rst:6004
msgid "The pulse ``buffer`` option found in :class:`qiskit.pulse.Channel` and :class:`qiskit.pulse.Schedule` was deprecated in Terra 0.11.0 and has now been removed. To add a delay on a channel or in a schedule, specify it explicitly in your Schedule with a Delay::"
msgstr ""

#: ../../release_notes.rst:6012
msgid "``PulseChannelSpec``, which was deprecated in Terra 0.11.0, has now been removed. Use BackendConfiguration instead::"
msgstr ""

#: ../../release_notes.rst:6019
msgid "or, simply reference the channel directly, such as ``DriveChannel(index)``."
msgstr ""

#: ../../release_notes.rst:6021
msgid "An import path was deprecated in Terra 0.10.0 and has now been removed: for ``PulseChannel``, ``DriveChannel``, ``MeasureChannel``, and ``ControlChannel``, use ``from qiskit.pulse.channels import X`` in place of ``from qiskit.pulse.channels.pulse_channels import X``."
msgstr ""

#: ../../release_notes.rst:6026
msgid "The pass :class:`qiskit.transpiler.passes.CSPLayout` (which was introduced in the 0.11.0 release) has been added to the preset pass manager for optimization levels 2 and 3. For level 2, there is a call limit of 1,000 and a timeout of 10 seconds. For level 3, the call limit is 10,000 and the timeout is 1 minute."
msgstr ""

#: ../../release_notes.rst:6032
msgid "Now that the pass is included in the preset pass managers the `python-constraint <https://pypi.org/project/python-constraint/>`_ package is not longer an optional dependency and has been added to the requirements list."
msgstr ""

#: ../../release_notes.rst:6037
msgid "The ``TranspileConfig`` class which was previously used to set run time configuration for a :class:`qiskit.transpiler.PassManager` has been removed and replaced by a new class :class:`qiskit.transpile.PassManagerConfig`. This new class has been structured to include only the information needed to construct a :class:`~qiskit.transpiler.PassManager`. The attributes of this class are:"
msgstr ""

#: ../../release_notes.rst:6044 ../../release_notes.rst:6110
msgid "``initial_layout``"
msgstr ""

#: ../../release_notes.rst:6045 ../../release_notes.rst:6106
msgid "``basis_gates``"
msgstr ""

#: ../../release_notes.rst:6046 ../../release_notes.rst:6107
msgid "``coupling_map``"
msgstr ""

#: ../../release_notes.rst:6047 ../../release_notes.rst:6109
msgid "``backend_properties``"
msgstr ""

#: ../../release_notes.rst:6048 ../../release_notes.rst:6108
msgid "``seed_transpiler``"
msgstr ""

#: ../../release_notes.rst:6050
msgid "The function ``transpile_circuit`` in :mod:`qiskit.transpiler` has been removed. To transpile a circuit with a custom :class:`~qiskit.transpiler.PassManager` now you should use the :meth:`~qiskit.transpiler.PassManager.run` method of the :class:~qiskit.transpiler.PassManager` object."
msgstr ""

#: ../../release_notes.rst:6056
msgid "The :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.draw` and :func:`qiskit.visualization.circuit_drawer` function will no longer include the initial state included in visualizations by default. If you would like to retain the initial state in the output visualization you need to set the ``initial_state`` kwarg to ``True``. For example, running:"
msgstr ""

#: ../../release_notes.rst:6071
msgid "This no longer includes the initial state. If you'd like to retain it you can run:"
msgstr ""

#: ../../release_notes.rst:6082
msgid ":func:`qiskit.compiler.transpile` (and :func:`qiskit.execute.execute`, which uses ``transpile`` internally) will now raise an error when the ``pass_manager`` kwarg is set and a value is set for other kwargs that are already set in an instantiated :class:`~qiskit.transpiler.PassManager` object. Previously, these conflicting kwargs would just be silently ignored and the values in the ``PassManager`` instance would be used. For example::"
msgstr ""

#: ../../release_notes.rst:6101
msgid "will now raise an error while prior to this release the value in ``pm`` would just silently be used and the value for the ``optimization_level`` kwarg would be ignored. The ``transpile`` kwargs this applies to are:"
msgstr ""

#: ../../release_notes.rst:6105
msgid "``optimization_level``"
msgstr ""

#: ../../release_notes.rst:6111
msgid "``layout_method``"
msgstr ""

#: ../../release_notes.rst:6112
msgid "``routing_method``"
msgstr ""

#: ../../release_notes.rst:6113
msgid "``backend``"
msgstr ""

#: ../../release_notes.rst:6115
msgid "The :class:`~qiskit.quantum_info.Operator`, :class:`~qiskit.quantum_info.Clifford`, :class:`~qiskit.quantum_info.SparsePauliOp`, :class:`~qiskit.quantum_info.PauliTable`, :class:`~qiskit.quantum_info.StabilizerTable`, operator classes have an added ``call`` method that allows them to assign a `qargs` to the operator for use with the :meth:`~qiskit.quantum_info.Operator.compose`, :meth:`~qiskit.quantum_info.Operator.dot`, :meth:`~qiskit.quantum_info.Statevector.evolve`,``+``, and ``-`` operations."
msgstr ""

#: ../../release_notes.rst:6125
msgid "The addition method of the :class:`qiskit.quantum_info.Operator`, class now accepts a ``qarg`` kwarg to allow adding a smaller operator to a larger one assuming identities on the other subsystems (same as for ``qargs`` on :meth:`~qiskit.quantum_info.Operator.compose` and :meth:`~qiskit.quantum_info.Operator.dot` methods). This allows subsystem addition using the call method as with composition. This support is added to all BaseOperator subclasses (:class:`~qiskit.quantum_info.ScalarOp`, :class:`~qiskit.quantum_info.Operator`, :class:`~qiskit.quantum_info.QuantumChannel`)."
msgstr ""

#: ../../release_notes.rst:6151
msgid "The ``BaseOperator`` class has been updated so that addition, subtraction and scalar multiplication are no longer abstract methods. This means that they are no longer required to be implemented in subclasses if they are not supported. The base class will raise a ``NotImplementedError`` when the methods are not defined."
msgstr ""

#: ../../release_notes.rst:6157
msgid "The :func:`qiskit.quantum_info.random_density_matrix` function will now return a random :class:`~qiskit.quantum_info.DensityMatrix` object. In previous releases it returned a numpy array."
msgstr ""

#: ../../release_notes.rst:6161
msgid "The :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes no longer copy the input array if it is already the correct dtype."
msgstr ""

#: ../../release_notes.rst:6165
msgid "`fastjsonschema <https://pypi.org/project/fastjsonschema/>`_ is added as a dependency. This is used for much faster validation of qobj dictionaries against the JSON schema when the ``to_dict()`` method is called on qobj objects with the ``validate`` keyword argument set to ``True``."
msgstr ""

#: ../../release_notes.rst:6170
msgid "The qobj construction classes in :mod:`qiskit.qobj` will no longer validate against the qobj jsonschema by default. These include the following classes:"
msgstr ""

#: ../../release_notes.rst:6173 ../../release_notes.rst:6185
msgid ":class:`qiskit.qobj.QasmQobjInstruction`"
msgstr ""

#: ../../release_notes.rst:6174
msgid ":class:`qiskit.qobj.QobjExperimentHeader`"
msgstr ""

#: ../../release_notes.rst:6175 ../../release_notes.rst:6186
msgid ":class:`qiskit.qobj.QasmQobjExperimentConfig`"
msgstr ""

#: ../../release_notes.rst:6176 ../../release_notes.rst:6187
msgid ":class:`qiskit.qobj.QasmQobjExperiment`"
msgstr ""

#: ../../release_notes.rst:6177 ../../release_notes.rst:6188
msgid ":class:`qiskit.qobj.QasmQobjConfig`"
msgstr ""

#: ../../release_notes.rst:6178
msgid ":class:`qiskit.qobj.QobjHeader`"
msgstr ""

#: ../../release_notes.rst:6179
msgid ":class:`qiskit.qobj.PulseQobjInstruction`"
msgstr ""

#: ../../release_notes.rst:6180
msgid ":class:`qiskit.qobj.PulseQobjExperimentConfig`"
msgstr ""

#: ../../release_notes.rst:6181
msgid ":class:`qiskit.qobj.PulseQobjExperiment`"
msgstr ""

#: ../../release_notes.rst:6182
msgid ":class:`qiskit.qobj.PulseQobjConfig`"
msgstr ""

#: ../../release_notes.rst:6183
msgid ":class:`qiskit.qobj.QobjMeasurementOption`"
msgstr ""

#: ../../release_notes.rst:6184
msgid ":class:`qiskit.qobj.PulseLibraryItem`"
msgstr ""

#: ../../release_notes.rst:6189
msgid ":class:`qiskit.qobj.QasmQobj`"
msgstr ""

#: ../../release_notes.rst:6190
msgid ":class:`qiskit.qobj.PulseQobj`"
msgstr ""

#: ../../release_notes.rst:6192
msgid "If you were relying on this validation or would like to validate them against the qobj schema this can be done by setting the ``validate`` kwarg to ``True`` on :meth:`~qiskit.qobj.QasmQobj.to_dict` method from either of the top level Qobj classes :class:`~qiskit.qobj.QasmQobj` or :class:`~qiskit.qobj.PulseQobj`. For example:"
msgstr ""

#: ../../release_notes.rst:6218
msgid "which will validate the output dictionary against the Qobj jsonschema."
msgstr ""

#: ../../release_notes.rst:6220
msgid "The output dictionary from :meth:`qiskit.qobj.QasmQobj.to_dict` and :meth:`qiskit.qobj.PulseQobj.to_dict` is no longer in a format for direct json serialization as expected by IBMQ's API. These Qobj objects are the current format we use for passing experiments to providers/backends and while having a dictionary format that could just be passed to the IBMQ API directly was moderately useful for ``qiskit-ibmq-provider``, it made things more difficult for other providers. Especially for providers that wrap local simulators. Moving forward the definitions of what is passed between providers and the IBMQ API request format will be further decoupled (in a backwards compatible manner) which should ease the burden of writing providers and backends."
msgstr ""

#: ../../release_notes.rst:6232
msgid "In practice, the only functional difference between the output of these methods now and previous releases is that complex numbers are represented with the ``complex`` type and numpy arrays are not silently converted to list anymore. If you were previously calling ``json.dumps()`` directly on the output of ``to_dict()`` after this release a custom json encoder will be needed to handle these cases. For example::"
msgstr ""

#: ../../release_notes.rst:6275
msgid "will generate a json string in the same exact manner that ``json.dumps(my_qasm.to_dict())`` did in previous releases."
msgstr ""

#: ../../release_notes.rst:6278
msgid "``CmdDef`` has been deprecated since Terra 0.11.0 and has been removed. Please continue to use :py:class:`~qiskit.pulse.InstructionScheduleMap` instead."
msgstr ""

#: ../../release_notes.rst:6282
msgid "The methods ``cmds`` and ``cmd_qubits`` in :py:class:`~qiskit.pulse.InstructionScheduleMap` have been deprecated since Terra 0.11.0 and have been removed. Please use ``instructions`` and ``qubits_with_instruction`` instead."
msgstr ""

#: ../../release_notes.rst:6287
msgid "PulseDefaults have reported ``qubit_freq_est`` and ``meas_freq_est`` in Hz rather than GHz since Terra release 0.11.0. A warning which notified of this change has been removed."
msgstr ""

#: ../../release_notes.rst:6291
msgid "The previously deprecated (in the 0.11.0 release) support for passsing in :class:`qiskit.circuit.Instruction` parameters of types ``sympy.Basic``, ``sympy.Expr``, ``qiskit.qasm.node.node.Node`` (QASM AST node) and ``sympy.Matrix`` has been removed. The supported types for instruction parameters are:"
msgstr ""

#: ../../release_notes.rst:6297 ../../release_notes.rst:8130
msgid "``int``"
msgstr ""

#: ../../release_notes.rst:6298 ../../release_notes.rst:8131
msgid "``float``"
msgstr ""

#: ../../release_notes.rst:6299 ../../release_notes.rst:8132
msgid "``complex``"
msgstr ""

#: ../../release_notes.rst:6300 ../../release_notes.rst:8133
msgid "``str``"
msgstr ""

#: ../../release_notes.rst:6301
msgid "``list``"
msgstr ""

#: ../../release_notes.rst:6302 ../../release_notes.rst:8134
msgid "``np.ndarray``"
msgstr ""

#: ../../release_notes.rst:6303
msgid ":class:`qiskit.circuit.ParameterExpression`"
msgstr ""

#: ../../release_notes.rst:6305
msgid "The following properties of :py:class:`~qiskit.providers.models.BackendConfiguration`:"
msgstr ""

#: ../../release_notes.rst:6308
msgid "``dt``"
msgstr ""

#: ../../release_notes.rst:6309
msgid "``dtm``"
msgstr ""

#: ../../release_notes.rst:6310
msgid "``rep_time``"
msgstr ""

#: ../../release_notes.rst:6312
msgid "all have units of seconds. Prior to release 0.11.0, ``dt`` and ``dtm`` had units of nanoseconds. Prior to release 0.12.0, ``rep_time`` had units of microseconds. The warnings alerting users of these changes have now been removed from ``BackendConfiguration``."
msgstr ""

#: ../../release_notes.rst:6317
msgid "A new requirement has been added to the requirements list, `retworkx <https://pypi.org/project/retworkx/>`_. It is an Apache 2.0 licensed graph library that has a similar API to networkx and is being used to significantly speed up the :class:`qiskit.dagcircuit.DAGCircuit` operations as part of the transpiler. There are binaries published on PyPI for all the platforms supported by Qiskit Terra but if you're using a platform where there aren't precompiled binaries published refer to the `retworkx documentation <https://retworkx.readthedocs.io/en/stable/README.html#installing-retworkx>`_ for instructions on pip installing from sdist."
msgstr ""

#: ../../release_notes.rst:6328
msgid "If you encounter any issues with the transpiler or DAGCircuit class as part of the transition you can switch back to the previous networkx implementation by setting the environment variable ``USE_RETWORKX`` to ``N``. This option will be removed in the 0.14.0 release."
msgstr ""

#: ../../release_notes.rst:6339
msgid "Passing in the data to the constructor for :class:`qiskit.dagcircuit.DAGNode` as a dictionary arg ``data_dict`` is deprecated and will be removed in a future release. Instead you should now pass the fields in as kwargs to the constructor. For example the previous behavior of::"
msgstr ""

#: ../../release_notes.rst:6353
msgid "should now be::"
msgstr ""

#: ../../release_notes.rst:6359
msgid "The naming of gate objects and methods have been updated to be more consistent. The following changes have been made:"
msgstr ""

#: ../../release_notes.rst:6362
msgid "The Pauli gates all have one uppercase letter only (``I``, ``X``, ``Y``, ``Z``)"
msgstr ""

#: ../../release_notes.rst:6364
msgid "The parameterized Pauli gates (i.e. rotations) prepend the uppercase letter ``R`` (``RX``, ``RY``, ``RZ``)"
msgstr ""

#: ../../release_notes.rst:6366
msgid "A controlled version prepends the uppercase letter ``C`` (``CX``, ``CRX``, ``CCX``)"
msgstr ""

#: ../../release_notes.rst:6368
msgid "Gates are named according to their action, not their alternative names (``CCX``, not ``Toffoli``)"
msgstr ""

#: ../../release_notes.rst:6371
msgid "The old names have been deprecated and will be removed in a future release. This is a list of the changes showing the old and new class, name attribute, and methods. If a new column is blank then there is no change for that."
msgstr ""

#: ../../release_notes.rst:6375
msgid "Gate Name Changes"
msgstr ""

#: ../../release_notes.rst:6378
msgid "Old Class"
msgstr ""

#: ../../release_notes.rst:6379
msgid "New Class"
msgstr ""

#: ../../release_notes.rst:6380
msgid "Old Name Attribute"
msgstr ""

#: ../../release_notes.rst:6381
msgid "New Name Attribute"
msgstr ""

#: ../../release_notes.rst:6382
msgid "Old :class:`qiskit.circuit.QuantumCircuit` method"
msgstr ""

#: ../../release_notes.rst:6383
msgid "New :class:`qiskit.circuit.QuantumCircuit` method"
msgstr ""

#: ../../release_notes.rst:6384
msgid "``ToffoliGate``"
msgstr ""

#: ../../release_notes.rst:6385
msgid ":class:`~qiskit.extensions.CCXGate`"
msgstr ""

#: ../../release_notes.rst:6386
msgid "``ccx``"
msgstr ""

#: ../../release_notes.rst:6388
msgid ":meth:`~qiskit.circuit.QuantumCircuit.ccx` and :meth:`~qiskit.circuit.QuantumCircuit.toffoli`"
msgstr ""

#: ../../release_notes.rst:6391
msgid "``CrxGate``"
msgstr ""

#: ../../release_notes.rst:6392
msgid ":class:`~qiskit.extensions.CRXGate`"
msgstr ""

#: ../../release_notes.rst:6393
msgid "``crx``"
msgstr ""

#: ../../release_notes.rst:6395
msgid ":meth:`~qiskit.circuit.QuantumCircuit.crx`"
msgstr ""

#: ../../release_notes.rst:6397
msgid "``CryGate``"
msgstr ""

#: ../../release_notes.rst:6398
msgid ":class:`~qiskit.extensions.CRYGate`"
msgstr ""

#: ../../release_notes.rst:6399
msgid "``cry``"
msgstr ""

#: ../../release_notes.rst:6401
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cry`"
msgstr ""

#: ../../release_notes.rst:6403
msgid "``CrzGate``"
msgstr ""

#: ../../release_notes.rst:6404
msgid ":class:`~qiskit.extensions.CRZGate`"
msgstr ""

#: ../../release_notes.rst:6405
msgid "``crz``"
msgstr ""

#: ../../release_notes.rst:6407
msgid ":meth:`~qiskit.circuit.QuantumCircuit.crz`"
msgstr ""

#: ../../release_notes.rst:6409
msgid "``FredkinGate``"
msgstr ""

#: ../../release_notes.rst:6410
msgid ":class:`~qiskit.extensions.CSwapGate`"
msgstr ""

#: ../../release_notes.rst:6411
msgid "``cswap``"
msgstr ""

#: ../../release_notes.rst:6413
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cswap` and :meth:`~qiskit.circuit.QuantumCircuit.fredkin`"
msgstr ""

#: ../../release_notes.rst:6416
msgid "``Cu1Gate``"
msgstr ""

#: ../../release_notes.rst:6417
msgid ":class:`~qiskit.extensions.CU1Gate`"
msgstr ""

#: ../../release_notes.rst:6418
msgid "``cu1``"
msgstr ""

#: ../../release_notes.rst:6420
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cu1`"
msgstr ""

#: ../../release_notes.rst:6422
msgid "``Cu3Gate``"
msgstr ""

#: ../../release_notes.rst:6423
msgid ":class:`~qiskit.extensions.CU3Gate`"
msgstr ""

#: ../../release_notes.rst:6424
msgid "``cu3``"
msgstr ""

#: ../../release_notes.rst:6426
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cu3`"
msgstr ""

#: ../../release_notes.rst:6428
msgid "``CnotGate``"
msgstr ""

#: ../../release_notes.rst:6429
msgid ":class:`~qiskit.extensions.CXGate`"
msgstr ""

#: ../../release_notes.rst:6430
msgid "``cx``"
msgstr ""

#: ../../release_notes.rst:6432
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cx` and :meth:`~qiskit.circuit.QuantumCircuit.cnot`"
msgstr ""

#: ../../release_notes.rst:6435
msgid "``CyGate``"
msgstr ""

#: ../../release_notes.rst:6436
msgid ":class:`~qiskit.extensions.CYGate`"
msgstr ""

#: ../../release_notes.rst:6437
msgid "``cy``"
msgstr ""

#: ../../release_notes.rst:6439
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cy`"
msgstr ""

#: ../../release_notes.rst:6441
msgid "``CzGate``"
msgstr ""

#: ../../release_notes.rst:6442
msgid ":class:`~qiskit.extensions.CZGate`"
msgstr ""

#: ../../release_notes.rst:6443
msgid "``cz``"
msgstr ""

#: ../../release_notes.rst:6445
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cz`"
msgstr ""

#: ../../release_notes.rst:6447
msgid "``DiagGate``"
msgstr ""

#: ../../release_notes.rst:6448
msgid ":class:`~qiskit.extensions.DiagonalGate`"
msgstr ""

#: ../../release_notes.rst:6449
msgid "``diag``"
msgstr ""

#: ../../release_notes.rst:6450
msgid "``diagonal``"
msgstr ""

#: ../../release_notes.rst:6451
msgid "``diag_gate``"
msgstr ""

#: ../../release_notes.rst:6452
msgid ":meth:`~qiskit.circuit.QuantumCircuit.diagonal`"
msgstr ""

#: ../../release_notes.rst:6453
msgid "``IdGate``"
msgstr ""

#: ../../release_notes.rst:6454
msgid ":class:`~qiskit.extensions.IGate`"
msgstr ""

#: ../../release_notes.rst:6455
msgid "``id``"
msgstr ""

#: ../../release_notes.rst:6457
msgid "``iden``"
msgstr ""

#: ../../release_notes.rst:6458
msgid ":meth:`~qiskit.circuit.QuantumCircuit.i` and :meth:`~qiskit.circuit.QuantumCircuit.id`"
msgstr ""

#: ../../release_notes.rst:6460
msgid ":class:`~qiskit.extensions.Isometry`"
msgstr ""

#: ../../release_notes.rst:6462
msgid "``iso``"
msgstr ""

#: ../../release_notes.rst:6463
msgid "``isometry``"
msgstr ""

#: ../../release_notes.rst:6464
msgid ":meth:`~qiskit.circuit.QuantumCircuit.iso`"
msgstr ""

#: ../../release_notes.rst:6465
msgid ":meth:`~qiskit.circuit.QuantumCircuit.isometry` and :meth:`~qiskit.circuit.QuantumCircuit.iso`"
msgstr ""

#: ../../release_notes.rst:6467
msgid "``UCG``"
msgstr ""

#: ../../release_notes.rst:6468
msgid ":class:`~qiskit.extensions.UCGate`"
msgstr ""

#: ../../release_notes.rst:6469
msgid "``multiplexer``"
msgstr ""

#: ../../release_notes.rst:6471
msgid "``ucg``"
msgstr ""

#: ../../release_notes.rst:6472
msgid ":meth:`~qiskit.circuit.QuantumCircuit.uc`"
msgstr ""

#: ../../release_notes.rst:6473
msgid "``UCRot``"
msgstr ""

#: ../../release_notes.rst:6474
msgid ":class:`~qiskit.extensions.UCPauliRotGate`"
msgstr ""

#: ../../release_notes.rst:6479
msgid "``UCX``"
msgstr ""

#: ../../release_notes.rst:6480
msgid ":class:`~qiskit.extensions.UCRXGate`"
msgstr ""

#: ../../release_notes.rst:6481
msgid "``ucrotX``"
msgstr ""

#: ../../release_notes.rst:6482
msgid "``ucrx``"
msgstr ""

#: ../../release_notes.rst:6483
msgid "``ucx``"
msgstr ""

#: ../../release_notes.rst:6484
msgid ":meth:`~qiskit.circuit.QuantumCircuit.ucrx`"
msgstr ""

#: ../../release_notes.rst:6485
msgid "``UCY``"
msgstr ""

#: ../../release_notes.rst:6486
msgid ":class:`~qiskit.extensions.UCRYGate`"
msgstr ""

#: ../../release_notes.rst:6487
msgid "``ucroty``"
msgstr ""

#: ../../release_notes.rst:6488
msgid "``ucry``"
msgstr ""

#: ../../release_notes.rst:6489
msgid "``ucy``"
msgstr ""

#: ../../release_notes.rst:6490
msgid ":meth:`~qiskit.circuit.QuantumCircuit.ucry`"
msgstr ""

#: ../../release_notes.rst:6491
msgid "``UCZ``"
msgstr ""

#: ../../release_notes.rst:6492
msgid ":class:`~qiskit.extensions.UCRZGate`"
msgstr ""

#: ../../release_notes.rst:6493
msgid "``ucrotz``"
msgstr ""

#: ../../release_notes.rst:6494
msgid "``ucrz``"
msgstr ""

#: ../../release_notes.rst:6495
msgid "``ucz``"
msgstr ""

#: ../../release_notes.rst:6496
msgid ":meth:`~qiskit.circuit.QuantumCircuit.ucrz`"
msgstr ""

#: ../../release_notes.rst:6498
msgid "The kwarg ``period`` for the function :func:`~qiskit.pulse.pulse_lib.square`, :func:`~qiskit.pulse.pulse_lib.sawtooth`, and :func:`~qiskit.pulse.pulse_lib.triangle` in :mod:`qiskit.pulse.pulse_lib` is now deprecated and will be removed in a future release. Instead you should now use the ``freq`` kwarg to set the frequency."
msgstr ""

#: ../../release_notes.rst:6506
msgid "The ``DAGCircuit.compose_back()`` and ``DAGCircuit.extend_back()`` methods are deprecated and will be removed in a future release. Instead you should use the :meth:`qiskit.dagcircuit.DAGCircuit.compose` method, which is a more general and more flexible method that provides the same functionality."
msgstr ""

#: ../../release_notes.rst:6511
msgid "The ``callback`` kwarg of the :class:`qiskit.transpiler.PassManager` class's constructor has been deprecated and will be removed in a future release. Instead of setting it at the object level during creation it should now be set as a kwarg parameter on the :meth:`qiskit.transpiler.PassManager.run` method."
msgstr ""

#: ../../release_notes.rst:6517
msgid "The ``n_qubits`` and ``numberofqubits`` keywords are deprecated throughout Terra and replaced by ``num_qubits``. The old names will be removed in a future release. The objects affected by this change are listed below:"
msgstr ""

#: ../../release_notes.rst:6521
msgid "New Methods"
msgstr ""

#: ../../release_notes.rst:6525
msgid "Old Method"
msgstr ""

#: ../../release_notes.rst:6526
msgid "New Method"
msgstr ""

#: ../../release_notes.rst:6529
msgid ":meth:`~qiskit.circuit.QuantumCircuit.num_qubits`"
msgstr ""

#: ../../release_notes.rst:6532
msgid ":meth:`~qiskit.quantum_info.Pauli.num_qubits`"
msgstr ""

#: ../../release_notes.rst:6534
msgid "New arguments"
msgstr ""

#: ../../release_notes.rst:6540
msgid ":func:`~qiskit.circuit.random.random_circuit`"
msgstr ""

#: ../../release_notes.rst:6543
msgid ":class:`~qiskit.extensions.MSGate`"
msgstr ""

#: ../../release_notes.rst:6544
msgid "``n_qubit``"
msgstr ""

#: ../../release_notes.rst:6547
msgid "The function ``qiskit.quantum_info.synthesis.euler_angles_1q`` is now deprecated. It has been superseded by the :class:`qiskit.quantum_info.OneQubitEulerDecomposer` class which provides the same functionality through::"
msgstr ""

#: ../../release_notes.rst:6554
msgid "The ``pass_manager`` kwarg for the :func:`qiskit.compiler.transpile` has been deprecated and will be removed in a future release. Moving forward the preferred way to transpile a circuit with a custom :class:`~qiskit.transpiler.PassManager` object is to use the :meth:`~qiskit.transpiler.PassManager.run` method of the ``PassManager`` object."
msgstr ""

#: ../../release_notes.rst:6561
msgid "The :func:`qiskit.quantum_info.random_state` function has been deprecated and will be removed in a future release. Instead you should use the :func:`qiskit.quantum_info.random_statevector` function."
msgstr ""

#: ../../release_notes.rst:6565
msgid "The ``add``, ``subtract``, and ``multiply`` methods of the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes are deprecated and will be removed in a future release. Instead you shoulde use ``+``, ``-``, ``*`` binary operators instead."
msgstr ""

#: ../../release_notes.rst:6571
msgid "Deprecates :meth:`qiskit.quantum_info.Statevector.to_counts`, :meth:`qiskit.quantum_info.DensityMatrix.to_counts`, and :func:`qiskit.quantum_info.counts.state_to_counts`. These functions are superseded by the class methods :meth:`qiskit.quantum_info.Statevector.probabilities_dict` and :meth:`qiskit.quantum_info.DensityMatrix.probabilities_dict`."
msgstr ""

#: ../../release_notes.rst:6578
msgid ":py:class:`~qiskit.pulse.pulse_lib.SamplePulse` and :py:class:`~qiskit.pulse.pulse_lib.ParametricPulse` s (e.g. ``Gaussian``) now subclass from :py:class:`~qiskit.pulse.pulse_lib.Pulse` and have been moved to the :mod:`qiskit.pulse.pulse_lib`. The previous path via ``pulse.commands`` is deprecated and will be removed in a future release."
msgstr ""

#: ../../release_notes.rst:6584
msgid "``DelayInstruction`` has been deprecated and replaced by :py:class:`~qiskit.pulse.instruction.Delay`. This new instruction has been taken over the previous ``Command`` ``Delay``. The migration pattern is::"
msgstr ""

#: ../../release_notes.rst:6592
msgid "Until the deprecation period is over, the previous ``Delay`` syntax of calling a command on a channel will also be supported::"
msgstr ""

#: ../../release_notes.rst:6597
msgid "The new ``Delay`` instruction does not support a ``command`` attribute."
msgstr ""

#: ../../release_notes.rst:6599
msgid "``FrameChange`` and ``FrameChangeInstruction`` have been deprecated and replaced by :py:class:`~qiskit.pulse.instructions.ShiftPhase`. The changes are::"
msgstr ""

#: ../../release_notes.rst:6607
msgid "Until the deprecation period is over, the previous FrameChange syntax of calling a command on a channel will be supported::"
msgstr ""

#: ../../release_notes.rst:6612
msgid "The ``call`` method of :py:class:`~qiskit.pulse.pulse_lib.SamplePulse` and :py:class:`~qiskit.pulse.pulse_lib.ParametricPulse` s have been deprecated. The migration is as follows::"
msgstr ""

#: ../../release_notes.rst:6618
msgid "``AcquireInstruction`` has been deprecated and replaced by :py:class:`~qiskit.pulse.instructions.Acquire`. The changes are::"
msgstr ""

#: ../../release_notes.rst:6625
msgid "Until the deprecation period is over, the previous Acquire syntax of calling the command on a channel will be supported::"
msgstr ""

#: ../../release_notes.rst:6636
msgid "The :class:`~qiskit.transpiler.passes.BarrierBeforeFinalMeasurements` transpiler pass, included in the preset transpiler levels when targeting a physical device, previously inserted a barrier across only measured qubits. In some cases, this allowed the transpiler to insert a swap after a measure operation, rendering the circuit invalid for current devices. The pass has been updated so that the inserted barrier will span all qubits on the device. Fixes `#3937 <https://github.com/Qiskit/qiskit-terra/issues/3937>`_"
msgstr ""

#: ../../release_notes.rst:6645
msgid "When extending a :class:`~qiskit.circuit.QuantumCircuit` instance (extendee) with another circuit (extension), the circuit is taken via reference. If a circuit is extended with itself that leads to an infinite loop as extendee and extension are the same. This bug has been resolved by copying the extension if it is the same object as the extendee. Fixes `#3811 <https://github.com/Qiskit/qiskit-terra/issues/3811>`_"
msgstr ""

#: ../../release_notes.rst:6652
msgid "Fixes a case in :meth:`qiskit.result.Result.get_counts`, where the results for an expirement could not be referenced if the experiment was initialized as a Schedule without a name. Fixes `#2753 <https://github.com/Qiskit/qiskit-terra/issues/2753>`_"
msgstr ""

#: ../../release_notes.rst:6657
msgid "Previously, replacing :class:`~qiskit.circuit.Parameter` objects in a circuit with new Parameter objects prior to decomposing a circuit would result in the substituted values not correctly being substituted into the decomposed gates. This has been resolved such that binding and decomposition may occur in any order."
msgstr ""

#: ../../release_notes.rst:6663
msgid "The matplotlib output backend for the :func:`qiskit.visualization.circuit_drawer` function and :meth:`qiskit.circuit.QuantumCircuit.draw` method drawer has been fixed to render :class:`~qiskit.extensions.CU1Gate` gates correctly. Fixes `#3684 <https://github.com/Qiskit/qiskit-terra/issues/3684>`_"
msgstr ""

#: ../../release_notes.rst:6669
msgid "A bug in :meth:`qiskit.circuit.QuantumCircuit.from_qasm_str` and :meth:`qiskit.circuit.QuantumCircuit.from_qasm_file` when loading QASM with custom gates defined has been fixed. Now, loading this QASM::"
msgstr ""

#: ../../release_notes.rst:6680
msgid "is equivalent to the following circuit::"
msgstr ""

#: ../../release_notes.rst:6693
msgid "Fixes `#1566 <https://github.com/Qiskit/qiskit-terra/issues/1566>`_"
msgstr ""

#: ../../release_notes.rst:6695
msgid "Allow quantum circuit Instructions to have list parameter values. This is used in Aer for expectation value snapshot parameters for example ``params = [[1.0, 'I'], [1.0, 'X']]]`` for :math:`\\langle I + X\\rangle`."
msgstr ""

#: ../../release_notes.rst:6699
msgid "Previously, for circuits containing composite gates (those created via :meth:`qiskit.circuit.QuantumCircuit.to_gate` or :meth:`qiskit.circuit.QuantumCircuit.to_instruction` or their corresponding converters), attempting to bind the circuit more than once would result in only the first bind value being applied to all circuits when transpiled. This has been resolved so that the values provided for subsequent binds are correctly respected."
msgstr ""

#: ../../release_notes.rst:6713
msgid "The qasm and pulse qobj classes:"
msgstr ""

#: ../../release_notes.rst:6715 ../../release_notes.rst:6727
msgid ":class:`~qiskit.qobj.QasmQobjInstruction`"
msgstr ""

#: ../../release_notes.rst:6716
msgid ":class:`~qiskit.qobj.QobjExperimentHeader`"
msgstr ""

#: ../../release_notes.rst:6717 ../../release_notes.rst:6728
msgid ":class:`~qiskit.qobj.QasmQobjExperimentConfig`"
msgstr ""

#: ../../release_notes.rst:6718 ../../release_notes.rst:6729
msgid ":class:`~qiskit.qobj.QasmQobjExperiment`"
msgstr ""

#: ../../release_notes.rst:6719 ../../release_notes.rst:6730
msgid ":class:`~qiskit.qobj.QasmQobjConfig`"
msgstr ""

#: ../../release_notes.rst:6720
msgid ":class:`~qiskit.qobj.QobjHeader`"
msgstr ""

#: ../../release_notes.rst:6721
msgid ":class:`~qiskit.qobj.PulseQobjInstruction`"
msgstr ""

#: ../../release_notes.rst:6722
msgid ":class:`~qiskit.qobj.PulseQobjExperimentConfig`"
msgstr ""

#: ../../release_notes.rst:6723
msgid ":class:`~qiskit.qobj.PulseQobjExperiment`"
msgstr ""

#: ../../release_notes.rst:6724
msgid ":class:`~qiskit.qobj.PulseQobjConfig`"
msgstr ""

#: ../../release_notes.rst:6725
msgid ":class:`~qiskit.qobj.QobjMeasurementOption`"
msgstr ""

#: ../../release_notes.rst:6726
msgid ":class:`~qiskit.qobj.PulseLibraryItem`"
msgstr ""

#: ../../release_notes.rst:6731
msgid ":class:`~qiskit.qobj.QasmQobj`"
msgstr ""

#: ../../release_notes.rst:6732
msgid ":class:`~qiskit.qobj.PulseQobj`"
msgstr ""

#: ../../release_notes.rst:6734
msgid "from :mod:`qiskit.qobj` have all been reimplemented without using the marsmallow library. These new implementations are designed to be drop-in replacement (except for as noted in the upgrade release notes) but specifics inherited from marshmallow may not work. Please file issues for any incompatibilities found."
msgstr ""

#: ../../release_notes.rst:6741
msgid "Aer 0.5.0"
msgstr ""

#: ../../release_notes.rst:6744 ../../release_notes.rst:6757
#: ../../release_notes.rst:7543 ../../release_notes.rst:7600
#: ../../release_notes.rst:9483
msgid "Added"
msgstr ""

#: ../../release_notes.rst:6745
msgid "Add support for terra diagonal gate"
msgstr ""

#: ../../release_notes.rst:6746
msgid "Add support for parameterized qobj"
msgstr ""

#: ../../release_notes.rst:6749
msgid "Fixed"
msgstr ""

#: ../../release_notes.rst:6750
msgid "Added postfix for linux on Raspberry Pi"
msgstr ""

#: ../../release_notes.rst:6751
msgid "Handle numpy array inputs from qobj"
msgstr ""

#: ../../release_notes.rst:6759
msgid "API documentation"
msgstr ""

#: ../../release_notes.rst:6760
msgid "CNOT-Dihedral randomized benchmarking"
msgstr ""

#: ../../release_notes.rst:6761
msgid "Accreditation module for output accrediation of noisy devices"
msgstr ""

#: ../../release_notes.rst:6762
msgid "Pulse calibrations for single qubits"
msgstr ""

#: ../../release_notes.rst:6763
msgid "Pulse Discriminator"
msgstr ""

#: ../../release_notes.rst:6764
msgid "Entanglement verification circuits"
msgstr ""

#: ../../release_notes.rst:6765
msgid "Gateset tomography for single-qubit gate sets"
msgstr ""

#: ../../release_notes.rst:6766
msgid "Adds randomized benchmarking utility functions ``calculate_1q_epg``, ``calculate_2q_epg`` functions to calculate 1 and 2-qubit error per gate from error per Clifford"
msgstr ""

#: ../../release_notes.rst:6769
msgid "Adds randomized benchmarking utility functions ``calculate_1q_epc``, ``calculate_2q_epc`` for calculating 1 and 2-qubit error per Clifford from error per gate"
msgstr ""

#: ../../release_notes.rst:6774 ../../release_notes.rst:6838
#: ../../release_notes.rst:6887 ../../release_notes.rst:7563
#: ../../release_notes.rst:7633 ../../release_notes.rst:9535
msgid "Changed"
msgstr ""

#: ../../release_notes.rst:6775
msgid "Support integer labels for qubits in tomography"
msgstr ""

#: ../../release_notes.rst:6776
msgid "Support integer labels for measurement error mitigation"
msgstr ""

#: ../../release_notes.rst:6779 ../../release_notes.rst:7413
#: ../../release_notes.rst:7444 ../../release_notes.rst:7576
#: ../../release_notes.rst:7642 ../../release_notes.rst:9567
msgid "Deprecated"
msgstr ""

#: ../../release_notes.rst:6780
msgid "Deprecates ``twoQ_clifford_error`` function. Use ``calculate_2q_epc`` instead."
msgstr ""

#: ../../release_notes.rst:6781
msgid "Python 3.5 support in qiskit-ignis is deprecated. Support will be removed on the upstream python community's end of life date for the version, which is 09/13/2020."
msgstr ""

#: ../../release_notes.rst:6786 ../../release_notes.rst:6815
msgid "Aqua 0.6.5"
msgstr ""

#: ../../release_notes.rst:6791 ../../release_notes.rst:6820
msgid "IBM Q Provider 0.6.0"
msgstr ""

#: ../../release_notes.rst:6797
msgid "Qiskit 0.17.0"
msgstr ""

#: ../../release_notes.rst:6800 ../../release_notes.rst:6854
#: ../../release_notes.rst:6900
msgid "Terra 0.12.0"
msgstr ""

#: ../../release_notes.rst:6805
msgid "Aer 0.4.1"
msgstr ""

#: ../../release_notes.rst:6810 ../../release_notes.rst:6864
msgid "Ignis 0.2.0"
msgstr ""

#: ../../release_notes.rst:6825
msgid "There are three new exceptions: ``VisualizationError``, ``VisualizationValueError``, and ``VisualizationTypeError``. These are now used in the visualization modules when an exception is raised."
msgstr ""

#: ../../release_notes.rst:6828
msgid "You can now set the logging level and specify a log file using the environment variables ``QSIKIT_IBMQ_PROVIDER_LOG_LEVEL`` and ``QISKIT_IBMQ_PROVIDER_LOG_FILE``, respectively. Note that the name of the logger is ``qiskit.providers.ibmq``."
msgstr ""

#: ../../release_notes.rst:6831
msgid ":class:`qiskit.providers.ibmq.job.IBMQJob` now has a new method :meth:`~qiskit.providers.ibmq.job.IBMQJob.scheduling_mode` that returns the scheduling mode the job is in."
msgstr ""

#: ../../release_notes.rst:6834
msgid "IQX-related tutorials that used to be in ``qiskit-iqx-tutorials`` are now in ``qiskit-ibmq-provider``."
msgstr ""

#: ../../release_notes.rst:6840
msgid ":meth:`qiskit.providers.ibmq.IBMQBackend.jobs` now accepts a new boolean parameter ``descending``, which can be used to indicate whether the jobs should be returned in descending or ascending order."
msgstr ""

#: ../../release_notes.rst:6843
msgid ":class:`qiskit.providers.ibmq.managed.IBMQJobManager` now looks at the job limit and waits for old jobs to finish before submitting new ones if the limit has been reached."
msgstr ""

#: ../../release_notes.rst:6845
msgid ":meth:`qiskit.providers.ibmq.IBMQBackend.status` now raises a :class:`qiskit.providers.ibmq.IBMQBackendApiProtocolError` exception if there was an issue with validating the status."
msgstr ""

#: ../../release_notes.rst:6851
msgid "Qiskit 0.16.0"
msgstr ""

#: ../../release_notes.rst:6859 ../../release_notes.rst:7540
msgid "Aer 0.4.0"
msgstr ""

#: ../../release_notes.rst:6869
msgid "Aqua 0.6.4"
msgstr ""

#: ../../release_notes.rst:6874
msgid "IBM Q Provider 0.5.0"
msgstr ""

#: ../../release_notes.rst:6879
#, python-format
msgid "Some of the visualization and Jupyter tools, including gate/error map and backend information, have been moved from ``qiskit-terra`` to ``qiskit-ibmq-provider``. They are now under the :mod:`qiskit.providers.ibmq.jupyter` and :mod:`qiskit.providers.ibmq.visualization`. In addition, you can now use ``%iqx_dashboard`` to get a dashboard that provides both job and backend information."
msgstr ""

#: ../../release_notes.rst:6889
msgid "JSON schema validation is no longer run by default on Qobj objects passed to :meth:`qiskit.providers.ibmq.IBMQBackend.run`. This significantly speeds up the execution of the `run()` method. Qobj objects are still validated on the server side, and invalid Qobjs will continue to raise exceptions. To force local validation, set ``validate_qobj=True`` when you invoke ``run()``."
msgstr ""

#: ../../release_notes.rst:6897
msgid "Qiskit 0.15.0"
msgstr ""

#: ../../release_notes.rst:6905
msgid "The 0.12.0 release includes several new features and bug fixes. The biggest change for this release is the addition of support for parametric pulses to OpenPulse. These are Pulse commands which take parameters rather than sample points to describe a pulse. 0.12.0 is also the first release to include support for Python 3.8. It also marks the beginning of the deprecation for Python 3.5 support, which will be removed when the upstream community stops supporting it."
msgstr ""

#: ../../release_notes.rst:6919
msgid "The pass :class:`qiskit.transpiler.passes.CSPLayout` was extended with two new parameters: ``call_limit`` and ``time_limit``. These options allow limiting how long the pass will run. The option ``call_limit`` limits the number of times that the recursive function in the backtracking solver may be called. Similarly, ``time_limit`` limits how long (in seconds) the solver will be allowed to run. The defaults are ``1000`` calls and ``10`` seconds respectively."
msgstr ""

#: ../../release_notes.rst:6927
msgid ":class:`qiskit.pulse.Acquire` can now be applied to a single qubit. This makes pulse programming more consistent and easier to reason about, as now all operations apply to a single channel. For example::"
msgstr ""

#: ../../release_notes.rst:6937
msgid "A new method :meth:`qiskit.transpiler.CouplingMap.draw` was added to :class:`qiskit.transpiler.CouplingMap` to generate a graphviz image from the coupling map graph. For example:"
msgstr ""

#: ../../release_notes.rst:6949
msgid "Parametric pulses have been added to OpenPulse. These are pulse commands which are parameterized and understood by the backend. Arbitrary pulse shapes are still supported by the SamplePulse Command. The new supported pulse classes are:"
msgstr ""

#: ../../release_notes.rst:6954
msgid ":class:`qiskit.pulse.ConstantPulse`"
msgstr ""

#: ../../release_notes.rst:6955
msgid ":class:`qiskit.pulse.Drag`"
msgstr ""

#: ../../release_notes.rst:6956
msgid ":class:`qiskit.pulse.Gaussian`"
msgstr ""

#: ../../release_notes.rst:6957
msgid ":class:`qiskit.pulse.GaussianSquare`"
msgstr ""

#: ../../release_notes.rst:6959
msgid "They can be used like any other Pulse command. An example::"
msgstr ""

#: ../../release_notes.rst:6971
msgid "The resulting schedule will be similar to a SamplePulse schedule built using :mod:`qiskit.pulse.pulse_lib`, however, waveform sampling will be performed by the backend. The method :meth:`qiskit.pulse.Schedule.draw` can still be used as usual. However, the command will be converted to a ``SamplePulse`` with the :meth:`qiskit.pulse.ParametricPulse.get_sample_pulse` method, so the pulse shown may not sample the continuous function the same way that the backend will."
msgstr ""

#: ../../release_notes.rst:6980
msgid "This feature can be used to construct Pulse programs for any backend, but the pulses will be converted to ``SamplePulse`` objects if the backend does not support parametric pulses. Backends which support them will have the following new attribute::"
msgstr ""

#: ../../release_notes.rst:6988
msgid "Note that the backend does not need to support all of the parametric pulses defined in Qiskit."
msgstr ""

#: ../../release_notes.rst:6991
msgid "When the backend supports parametric pulses, and the Pulse schedule is built with them, the assembled Qobj is significantly smaller. The size of a PulseQobj built entirely with parametric pulses is dependent only on the number of instructions, whereas the size of a PulseQobj built otherwise will grow with the duration of the instructions (since every sample must be specified with a value)."
msgstr ""

#: ../../release_notes.rst:6998
msgid "Added utility functions, :func:`qiskit.scheduler.measure` and :func:`qiskit.scheduler.measure_all` to `qiskit.scheduler` module. These functions return a :class:`qiskit.pulse.Schedule` object which measures qubits using OpenPulse. For example::"
msgstr ""

#: ../../release_notes.rst:7012
msgid "Pulse :class:`qiskit.pulse.Schedule` objects now have better representations that for simple schedules should be valid Python expressions."
msgstr ""

#: ../../release_notes.rst:7016
msgid "The :class:`qiskit.circuit.QuantumCircuit` methods :meth:`qiskit.circuit.QuantumCircuit.measure_active`, :meth:`qiskit.circuit.QuantumCircuit.measure_all`, and :meth:`qiskit.circuit.QuantumCircuit.remove_final_measurements` now have an addition kwarg ``inplace``. When ``inplace`` is set to ``False`` the function will return a modified **copy** of the circuit. This is different from the default behavior which will modify the circuit object in-place and return nothing."
msgstr ""

#: ../../release_notes.rst:7025
msgid "Several new constructor methods were added to the :class:`qiskit.transpiler.CouplingMap` class for building objects with basic qubit coupling graphs. The new constructor methods are:"
msgstr ""

#: ../../release_notes.rst:7029
msgid ":meth:`qiskit.transpiler.CouplingMap.from_full`"
msgstr ""

#: ../../release_notes.rst:7030
msgid ":meth:`qiskit.transpiler.CouplingMap.from_line`"
msgstr ""

#: ../../release_notes.rst:7031
msgid ":meth:`qiskit.transpiler.CouplingMap.from_ring`"
msgstr ""

#: ../../release_notes.rst:7032
msgid ":meth:`qiskit.transpiler.CouplingMap.from_grid`"
msgstr ""

#: ../../release_notes.rst:7034
msgid "For example, to use the new constructors to get a coupling map of 5 qubits connected in a linear chain you can now run:"
msgstr ""

#: ../../release_notes.rst:7044
msgid "Introduced a new pass :class:`qiskit.transpiler.passes.CrosstalkAdaptiveSchedule`. This pass aims to reduce the impact of crosstalk noise on a program. It uses crosstalk characterization data from the backend to schedule gates. When a pair of gates has high crosstalk, they get serialized using a barrier. Naive serialization is harmful because it incurs decoherence errors. Hence, this pass uses a SMT optimization approach to compute a schedule which minimizes the impact of crosstalk as well as decoherence errors."
msgstr ""

#: ../../release_notes.rst:7054
msgid "The pass takes as input a circuit which is already transpiled onto the backend i.e., the circuit is expressed in terms of physical qubits and swap gates have been inserted and decomposed into CNOTs if required. Using this circuit and crosstalk characterization data, a `Z3 optimization <https://github.com/Z3Prover/z3>`_ is used to construct a new scheduled circuit as output."
msgstr ""

#: ../../release_notes.rst:7061
msgid "To use the pass on a circuit circ::"
msgstr ""

#: ../../release_notes.rst:7068
msgid "``backend_prop`` is a :class:`qiskit.providers.models.BackendProperties` object for the target backend. ``crosstalk_prop`` is a dict which specifies conditional error rates. For two gates ``g1`` and ``g2``, ``crosstalk_prop[g1][g2]`` specifies the conditional error rate of ``g1`` when ``g1`` and ``g2`` are executed simultaneously. A method for generating ``crosstalk_prop`` will be added in a future release of qiskit-ignis. Until then you'll either have to already know the crosstalk properties of your device, or manually write your own device characterization experiments."
msgstr ""

#: ../../release_notes.rst:7077
msgid "In the preset pass manager for optimization level 1, :func:`qiskit.transpiler.preset_passmanagers.level_1_pass_manager` if :class:`qiskit.transpiler.passes.TrivialLayout` layout pass is not a perfect match for a particular circuit, then :class:`qiskit.transpiler.passes.DenseLayout` layout pass is used instead."
msgstr ""

#: ../../release_notes.rst:7084
msgid "Added a new abstract method :meth:`qiskit.quantum_info.Operator.dot` to the abstract ``BaseOperator`` class, so it is included for all implementations of that abstract class, including :class:`qiskit.quantum_info.Operator` and ``QuantumChannel`` (e.g., :class:`qiskit.quantum_info.Choi`) objects. This method returns the right operator multiplication ``a.dot(b)`` :math:`= a \\cdot b`. This is equivalent to calling the operator :meth:`qiskit.quantum_info.Operator.compose` method with the kwarg ``front`` set to ``True``."
msgstr ""

#: ../../release_notes.rst:7096
msgid "Added :func:`qiskit.quantum_info.average_gate_fidelity` and :func:`qiskit.quantum_info.gate_error` functions to the :mod:`qiskit.quantum_info` module for working with :class:`qiskit.quantum_info.Operator` and ``QuantumChannel`` (e.g., :class:`qiskit.quantum_info.Choi`) objects."
msgstr ""

#: ../../release_notes.rst:7102
msgid "Added the :func:`qiskit.quantum_info.partial_trace` function to the :mod:`qiskit.quantum_info` that works with :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` quantum state classes. For example::"
msgstr ""

#: ../../release_notes.rst:7117
msgid "When :meth:`qiskit.circuit.QuantumCircuit.draw` or :func:`qiskit.visualization.circuit_drawer` is called with the ``with_layout`` kwarg set True (the default) the output visualization will now display the physical qubits as integers to clearly distinguish them from the virtual qubits."
msgstr ""

#: ../../release_notes.rst:7123
msgid "For Example:"
msgstr ""

#: ../../release_notes.rst:7138
msgid "Added new state measure functions to the :mod:`qiskit.quantum_info` module: :func:`qiskit.quantum_info.entropy`, :func:`qiskit.quantum_info.mutual_information`, :func:`qiskit.quantum_info.concurrence`, and :func:`qiskit.quantum_info.entanglement_of_formation`. These functions work with the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes."
msgstr ""

#: ../../release_notes.rst:7146
msgid "The decomposition methods for single-qubit gates in :class:`qiskit.quantum_info.synthesis.one_qubit_decompose.OneQubitEulerDecomposer` have been expanded to now also include the ``'ZXZ'`` basis, characterized by three rotations about the  Z,X,Z axis. This now means that a general 2x2 Operator can be decomposed into following bases: ``U3``, ``U1X``, ``ZYZ``, ``ZXZ``, ``XYX``, ``ZXZ``."
msgstr ""

#: ../../release_notes.rst:7157 ../../release_notes.rst:8013
msgid "Known Issues"
msgstr ""

#: ../../release_notes.rst:7159
msgid "Running functions that use :func:`qiskit.tools.parallel_map` (for example :func:`qiskit.execute.execute`, :func:`qiskit.compiler.transpile`, and :meth:`qiskit.transpiler.PassManager.run`) may not work when called from a script running outside of a ``if __name__ == '__main__':`` block when using Python 3.8 on MacOS. Other environments are unaffected by this issue. This is due to changes in how parallel processes are launched by Python 3.8 on MacOS. If ``RuntimeError`` or ``AttributeError`` are raised by scripts that are directly calling ``parallel_map()`` or when calling a function that uses it internally with Python 3.8 on MacOS embedding the script calls inside ``if __name__ == '__main__':`` should workaround the issue. For example::"
msgstr ""

#: ../../release_notes.rst:7184
msgid "should be changed to::"
msgstr ""

#: ../../release_notes.rst:7203
msgid "if errors are encountered with Python 3.8 on MacOS."
msgstr ""

#: ../../release_notes.rst:7211
msgid "The value of the ``rep_time`` parameter for Pulse backend's configuration object is now in units of seconds, not microseconds. The first time a ``PulseBackendConfiguration`` object is initialized it will raise a single warning to the user to indicate this."
msgstr ""

#: ../../release_notes.rst:7216
msgid "The ``rep_time`` argument for :func:`qiskit.compiler.assemble` now takes in a value in units of seconds, not microseconds. This was done to make the units with everything else in pulse. If you were passing in a value for ``rep_time`` ensure that you update the value to account for this change."
msgstr ""

#: ../../release_notes.rst:7221
msgid "The value of the ``base_gate`` property of :class:`qiskit.circuit.ControlledGate` objects has been changed from the class of the base gate to an instance of the class of the base gate."
msgstr ""

#: ../../release_notes.rst:7225
msgid "The ``base_gate_name`` property of :class:`qiskit.circuit.ControlledGate` has been removed; you can get the name of the base gate by accessing ``base_gate.name`` on the object. For example::"
msgstr ""

#: ../../release_notes.rst:7236
msgid "Changed :class:`qiskit.quantum_info.Operator` magic methods so that ``__mul__`` (which gets executed by python's multiplication operation, if the left hand side of the operation has it defined) implements right matrix multiplication (i.e. :meth:`qiskit.quantum_info.Operator.dot`), and ``__rmul__`` (which gets executed by python's multiplication operation from the right hand side of the operation if the left does not have ``__mul__`` defined) implements scalar multiplication (i.e. :meth:`qiskit.quantum_info.Operator.multiply`). Previously both methods implemented scalar multiplciation."
msgstr ""

#: ../../release_notes.rst:7246
msgid "The second argument of the :func:`qiskit.quantum_info.process_fidelity` function, ``target``, is now optional. If a target unitary is not specified, then process fidelity of the input channel with the identity operator will be returned."
msgstr ""

#: ../../release_notes.rst:7251
msgid ":func:`qiskit.compiler.assemble` will now respect the configured ``max_shots`` value for a backend. If a value for the ``shots`` kwarg is specified that exceed the max shots set in the backend configuration the function will now raise a ``QiskitError`` exception. Additionally, if no shots argument is provided the default value is either 1024 (the previous behavior) or ``max_shots`` from the backend, whichever is lower."
msgstr ""

#: ../../release_notes.rst:7264
msgid "Methods for adding gates to a :class:`qiskit.circuit.QuantumCircuit` with abbreviated keyword arguments (e.g. ``ctl``, ``tgt``) have had their keyword arguments renamed to be more descriptive (e.g. ``control_qubit``, ``target_qubit``). The old names have been deprecated. A table including the old and new calling signatures for the ``QuantumCircuit`` methods is included below."
msgstr ""

#: ../../release_notes.rst:7270
msgid "New signatures for ``QuantumCircuit`` gate methods"
msgstr ""

#: ../../release_notes.rst:7273
msgid "Instruction Type"
msgstr ""

#: ../../release_notes.rst:7274
msgid "Former Signature"
msgstr ""

#: ../../release_notes.rst:7275
msgid "New Signature"
msgstr ""

#: ../../release_notes.rst:7276
msgid ":class:`qiskit.extensions.HGate`"
msgstr ""

#: ../../release_notes.rst:7277
msgid "``qc.h(q)``"
msgstr ""

#: ../../release_notes.rst:7278
msgid "``qc.h(qubit)``"
msgstr ""

#: ../../release_notes.rst:7279
msgid ":class:`qiskit.extensions.CHGate`"
msgstr ""

#: ../../release_notes.rst:7280
msgid "``qc.ch(ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:7281
msgid "``qc.ch((control_qubit, target_qubit))``"
msgstr ""

#: ../../release_notes.rst:7282
msgid ":class:`qiskit.extensions.IdGate`"
msgstr ""

#: ../../release_notes.rst:7283 ../../release_notes.rst:7286
msgid "``qc.iden(q)``"
msgstr ""

#: ../../release_notes.rst:7284 ../../release_notes.rst:7287
msgid "``qc.iden(qubit)``"
msgstr ""

#: ../../release_notes.rst:7285 ../../release_notes.rst:7288
msgid ":class:`qiskit.extensions.RGate`"
msgstr ""

#: ../../release_notes.rst:7289
msgid "``qc.r(theta, phi, q)``"
msgstr ""

#: ../../release_notes.rst:7290
msgid "``qc.r(theta, phi, qubit)``"
msgstr ""

#: ../../release_notes.rst:7291
msgid ":class:`qiskit.extensions.RXGate`"
msgstr ""

#: ../../release_notes.rst:7292
msgid "``qc.rx(theta, q)``"
msgstr ""

#: ../../release_notes.rst:7293
msgid "``qc.rx(theta, qubit)``"
msgstr ""

#: ../../release_notes.rst:7294
msgid ":class:`qiskit.extensions.CrxGate`"
msgstr ""

#: ../../release_notes.rst:7295
msgid "``qc.crx(theta, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:7296
msgid "``qc.crx(theta, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:7297
msgid ":class:`qiskit.extensions.RYGate`"
msgstr ""

#: ../../release_notes.rst:7298
msgid "``qc.ry(theta, q)``"
msgstr ""

#: ../../release_notes.rst:7299
msgid "``qc.ry(theta, qubit)``"
msgstr ""

#: ../../release_notes.rst:7300
msgid ":class:`qiskit.extensions.CryGate`"
msgstr ""

#: ../../release_notes.rst:7301
msgid "``qc.cry(theta, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:7302
msgid "``qc.cry(theta, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:7303
msgid ":class:`qiskit.extensions.RZGate`"
msgstr ""

#: ../../release_notes.rst:7304
msgid "``qc.rz(phi, q)``"
msgstr ""

#: ../../release_notes.rst:7305
msgid "``qc.rz(phi, qubit)``"
msgstr ""

#: ../../release_notes.rst:7306
msgid ":class:`qiskit.extensions.CrzGate`"
msgstr ""

#: ../../release_notes.rst:7307
msgid "``qc.crz(theta, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:7308
msgid "``qc.crz(theta, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:7309
msgid ":class:`qiskit.extensions.SGate`"
msgstr ""

#: ../../release_notes.rst:7310
msgid "``qc.s(q)``"
msgstr ""

#: ../../release_notes.rst:7311
msgid "``qc.s(qubit)``"
msgstr ""

#: ../../release_notes.rst:7312
msgid ":class:`qiskit.extensions.SdgGate`"
msgstr ""

#: ../../release_notes.rst:7313
msgid "``qc.sdg(q)``"
msgstr ""

#: ../../release_notes.rst:7314
msgid "``qc.sdg(qubit)``"
msgstr ""

#: ../../release_notes.rst:7315
msgid ":class:`qiskit.extensions.FredkinGate`"
msgstr ""

#: ../../release_notes.rst:7316
msgid "``qc.cswap(ctl, tgt1, tgt2)``"
msgstr ""

#: ../../release_notes.rst:7317
msgid "``qc.cswap(control_qubit, target_qubit1, target_qubit2)``"
msgstr ""

#: ../../release_notes.rst:7318
msgid ":class:`qiskit.extensions.TGate`"
msgstr ""

#: ../../release_notes.rst:7319
msgid "``qc.t(q)``"
msgstr ""

#: ../../release_notes.rst:7320
msgid "``qc.t(qubit)``"
msgstr ""

#: ../../release_notes.rst:7321
msgid ":class:`qiskit.extensions.TdgGate`"
msgstr ""

#: ../../release_notes.rst:7322
msgid "``qc.tdg(q)``"
msgstr ""

#: ../../release_notes.rst:7323
msgid "``qc.tdg(qubit)``"
msgstr ""

#: ../../release_notes.rst:7324
msgid ":class:`qiskit.extensions.U1Gate`"
msgstr ""

#: ../../release_notes.rst:7325
msgid "``qc.u1(theta, q)``"
msgstr ""

#: ../../release_notes.rst:7326
msgid "``qc.u1(theta, qubit)``"
msgstr ""

#: ../../release_notes.rst:7327
msgid ":class:`qiskit.extensions.Cu1Gate`"
msgstr ""

#: ../../release_notes.rst:7328
msgid "``qc.cu1(theta, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:7329
msgid "``qc.cu1(theta, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:7330
msgid ":class:`qiskit.extensions.U2Gate`"
msgstr ""

#: ../../release_notes.rst:7331
msgid "``qc.u2(phi, lam, q)``"
msgstr ""

#: ../../release_notes.rst:7332
msgid "``qc.u2(phi, lam, qubit)``"
msgstr ""

#: ../../release_notes.rst:7333
msgid ":class:`qiskit.extensions.U3Gate`"
msgstr ""

#: ../../release_notes.rst:7334
msgid "``qc.u3(theta, phi, lam, q)``"
msgstr ""

#: ../../release_notes.rst:7335
msgid "``qc.u3(theta, phi, lam, qubit)``"
msgstr ""

#: ../../release_notes.rst:7336
msgid ":class:`qiskit.extensions.Cu3Gate`"
msgstr ""

#: ../../release_notes.rst:7337
msgid "``qc.cu3(theta, phi, lam, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:7338
msgid "``qc.cu3(theta, phi, lam, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:7339
msgid ":class:`qiskit.extensions.XGate`"
msgstr ""

#: ../../release_notes.rst:7340
msgid "``qc.x(q)``"
msgstr ""

#: ../../release_notes.rst:7341
msgid "``qc.x(qubit)``"
msgstr ""

#: ../../release_notes.rst:7342
msgid ":class:`qiskit.extensions.CnotGate`"
msgstr ""

#: ../../release_notes.rst:7343
msgid "``qc.cx(ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:7344
msgid "``qc.cx(control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:7345
msgid ":class:`qiskit.extensions.ToffoliGate`"
msgstr ""

#: ../../release_notes.rst:7346
msgid "``qc.ccx(ctl1, ctl2, tgt)``"
msgstr ""

#: ../../release_notes.rst:7347
msgid "``qc.ccx(control_qubit1, control_qubit2, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:7348
msgid ":class:`qiskit.extensions.YGate`"
msgstr ""

#: ../../release_notes.rst:7349
msgid "``qc.y(q)``"
msgstr ""

#: ../../release_notes.rst:7350
msgid "``qc.y(qubit)``"
msgstr ""

#: ../../release_notes.rst:7351
msgid ":class:`qiskit.extensions.CyGate`"
msgstr ""

#: ../../release_notes.rst:7352
msgid "``qc.cy(ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:7353
msgid "``qc.cy(control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:7354
msgid ":class:`qiskit.extensions.ZGate`"
msgstr ""

#: ../../release_notes.rst:7355
msgid "``qc.z(q)``"
msgstr ""

#: ../../release_notes.rst:7356
msgid "``qc.z(qubit)``"
msgstr ""

#: ../../release_notes.rst:7357
msgid ":class:`qiskit.extensions.CzGate`"
msgstr ""

#: ../../release_notes.rst:7358
msgid "``qc.cz(ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:7359
msgid "``qc.cz(control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:7361
msgid "Running :class:`qiskit.pulse.Acquire` on multiple qubits has been deprecated and will be removed in a future release. Additionally, the :class:`qiskit.pulse.AcquireInstruction` parameters ``mem_slots`` and ``reg_slots`` have been deprecated. Instead ``reg_slot`` and ``mem_slot`` should be used instead."
msgstr ""

#: ../../release_notes.rst:7367
msgid "The attribute of the :class:`qiskit.providers.models.PulseDefaults` class ``circuit_instruction_map`` has been deprecated and will be removed in a future release. Instead you should use the new attribute ``instruction_schedule_map``. This was done to match the type of the value of the attribute, which is an ``InstructionScheduleMap``."
msgstr ""

#: ../../release_notes.rst:7373
msgid "The :class:`qiskit.pulse.PersistentValue` command is deprecated and will be removed in a future release. Similar functionality can be achieved with the :class:`qiskit.pulse.ConstantPulse` command (one of the new parametric pulses). Compare the following::"
msgstr ""

#: ../../release_notes.rst:7390
msgid "Python 3.5 support in qiskit-terra is deprecated. Support will be removed in the first release after the upstream Python community's end of life date for the version, which is 09/13/2020."
msgstr ""

#: ../../release_notes.rst:7394
msgid "The ``require_cptp`` kwarg of the :func:`qiskit.quantum_info.process_fidelity` function has been deprecated and will be removed in a future release. It is superseded by two separate kwargs ``require_cp`` and ``require_tp``."
msgstr ""

#: ../../release_notes.rst:7399
msgid "Setting the ``scale`` parameter for :meth:`qiskit.circuit.QuantumCircuit.draw` and :func:`qiskit.visualization.circuit_drawer` as the first positional argument is deprecated and will be removed in a future release. Instead you should use ``scale`` as keyword argument."
msgstr ""

#: ../../release_notes.rst:7405
msgid "The :mod:`qiskit.tools.qi.qi` module is deprecated and will be removed in a future release. The legacy functions in the module have all been superseded by functions and classes in the :mod:`qiskit.quantum_info` module. A table of the deprecated functions and their replacement are below:"
msgstr ""

#: ../../release_notes.rst:7410
msgid "``qiskit.tools.qi.qi`` replacements"
msgstr ""

#: ../../release_notes.rst:7414 ../../release_notes.rst:7445
msgid "Replacement"
msgstr ""

#: ../../release_notes.rst:7415
msgid ":func:`qiskit.tools.partial_trace`"
msgstr ""

#: ../../release_notes.rst:7416
msgid ":func:`qiskit.quantum_info.partial_trace`"
msgstr ""

#: ../../release_notes.rst:7417
msgid ":func:`qiskit.tools.choi_to_pauli`"
msgstr ""

#: ../../release_notes.rst:7418
msgid ":class:`qiskit.quantum_info.Choi` and :class:`quantum_info.PTM`"
msgstr ""

#: ../../release_notes.rst:7419
msgid ":func:`qiskit.tools.chop`"
msgstr ""

#: ../../release_notes.rst:7420
msgid "``numpy.round``"
msgstr ""

#: ../../release_notes.rst:7421
msgid "``qiskit.tools.qi.qi.outer``"
msgstr ""

#: ../../release_notes.rst:7422
msgid "``numpy.outer``"
msgstr ""

#: ../../release_notes.rst:7423
msgid ":func:`qiskit.tools.concurrence`"
msgstr ""

#: ../../release_notes.rst:7424
msgid ":func:`qiskit.quantum_info.concurrence`"
msgstr ""

#: ../../release_notes.rst:7425
msgid ":func:`qiskit.tools.shannon_entropy`"
msgstr ""

#: ../../release_notes.rst:7426
msgid ":func:`qiskit.quantum_info.shannon_entropy`"
msgstr ""

#: ../../release_notes.rst:7427
msgid ":func:`qiskit.tools.entropy`"
msgstr ""

#: ../../release_notes.rst:7428
msgid ":func:`qiskit.quantum_info.entropy`"
msgstr ""

#: ../../release_notes.rst:7429
msgid ":func:`qiskit.tools.mutual_information`"
msgstr ""

#: ../../release_notes.rst:7430
msgid ":func:`qiskit.quantum_info.mutual_information`"
msgstr ""

#: ../../release_notes.rst:7431
msgid ":func:`qiskit.tools.entanglement_of_formation`"
msgstr ""

#: ../../release_notes.rst:7432
msgid ":func:`qiskit.quantum_info.entanglement_of_formation`"
msgstr ""

#: ../../release_notes.rst:7433
msgid ":func:`qiskit.tools.is_pos_def`"
msgstr ""

#: ../../release_notes.rst:7434
msgid "``quantum_info.operators.predicates.is_positive_semidefinite_matrix``"
msgstr ""

#: ../../release_notes.rst:7436
msgid "The :mod:`qiskit.quantum_info.states.states` module is deprecated and will be removed in a future release. The legacy functions in the module have all been superseded by functions and classes in the :mod:`qiskit.quantum_info` module."
msgstr ""

#: ../../release_notes.rst:7441
msgid "``qiskit.quantum_info.states.states`` replacements"
msgstr ""

#: ../../release_notes.rst:7446
msgid "``qiskit.quantum_info.states.states.basis_state``"
msgstr ""

#: ../../release_notes.rst:7447
msgid ":meth:`qiskit.quantum_info.Statevector.from_label`"
msgstr ""

#: ../../release_notes.rst:7448
msgid "``qiskit.quantum_info.states.states.projector``"
msgstr ""

#: ../../release_notes.rst:7449
msgid ":class:`qiskit.quantum_info.DensityMatrix`"
msgstr ""

#: ../../release_notes.rst:7451
msgid "The ``scaling`` parameter of the ``draw()`` method for the ``Schedule`` and ``Pulse`` objects was deprecated and will be removed in a future release. Instead the new ``scale`` parameter should be used. This was done to have a consistent argument between pulse and circuit drawings. For example::"
msgstr ""

#: ../../release_notes.rst:7473
msgid "Previously, calling :meth:`qiskit.circuit.QuantumCircuit.bind_parameters` prior to decomposing a circuit would result in the bound values not being correctly substituted into the decomposed gates. This has been resolved such that binding and decomposition may occur in any order. Fixes `issue #2482 <https://github.com/Qiskit/qiskit-terra/issues/2482>`_ and `issue #3509 <https://github.com/Qiskit/qiskit-terra/issues/3509>`_"
msgstr ""

#: ../../release_notes.rst:7480
msgid "The ``Collect2qBlocks`` pass had previously not considered classical conditions when determining whether to include a gate within an existing block. In some cases, this resulted in classical conditions being lost when transpiling with ``optimization_level=3``. This has been resolved so that classically conditioned gates are never included in a block. Fixes `issue #3215 <https://github.com/Qiskit/qiskit-terra/issues/3215>`_"
msgstr ""

#: ../../release_notes.rst:7488
msgid "All the output types for the circuit drawers in :meth:`qiskit.circuit.QuantumCircuit.draw` and :func:`qiskit.visualization.circuit_drawer` have fixed and/or improved support for drawing controlled custom gates. Fixes `issue #3546 <https://github.com/Qiskit/qiskit-terra/issues/3546>`_, `issue #3763 <https://github.com/Qiskit/qiskit-terra/issues/3763>`_, and `issue #3764 <https://github.com/Qiskit/qiskit-terra/issues/3764>`_"
msgstr ""

#: ../../release_notes.rst:7496
msgid "Explanation and examples have been added to documentation for the :class:`qiskit.circuit.QuantumCircuit` methods for adding gates: :meth:`qiskit.circuit.QuantumCircuit.ccx`, :meth:`qiskit.circuit.QuantumCircuit.ch`, :meth:`qiskit.circuit.QuantumCircuit.crz`, :meth:`qiskit.circuit.QuantumCircuit.cswap`, :meth:`qiskit.circuit.QuantumCircuit.cu1`, :meth:`qiskit.circuit.QuantumCircuit.cu3`, :meth:`qiskit.circuit.QuantumCircuit.cx`, :meth:`qiskit.circuit.QuantumCircuit.cy`, :meth:`qiskit.circuit.QuantumCircuit.cz`, :meth:`qiskit.circuit.QuantumCircuit.h`, :meth:`qiskit.circuit.QuantumCircuit.iden`, :meth:`qiskit.circuit.QuantumCircuit.rx`, :meth:`qiskit.circuit.QuantumCircuit.ry`, :meth:`qiskit.circuit.QuantumCircuit.rz`, :meth:`qiskit.circuit.QuantumCircuit.s`, :meth:`qiskit.circuit.QuantumCircuit.sdg`, :meth:`qiskit.circuit.QuantumCircuit.swap`, :meth:`qiskit.circuit.QuantumCircuit.t`, :meth:`qiskit.circuit.QuantumCircuit.tdg`, :meth:`qiskit.circuit.QuantumCircuit.u1`, :meth:`qiskit.circuit.QuantumCircuit.u2`, :meth:`qiskit.circuit.QuantumCircuit.u3`, :meth:`qiskit.circuit.QuantumCircuit.x`, :meth:`qiskit.circuit.QuantumCircuit.y`, :meth:`qiskit.circuit.QuantumCircuit.z`. Fixes `issue #3400 <https://github.com/Qiskit/qiskit-terra/issues/3400>`_"
msgstr ""

#: ../../release_notes.rst:7525
msgid "Fixes for handling of complex number parameter in circuit visualization. Fixes `issue #3640 <https://github.com/Qiskit/qiskit-terra/issues/3640>`_"
msgstr ""

#: ../../release_notes.rst:7534
msgid "The transpiler passes in the :mod:`qiskit.transpiler.passes` directory have been organized into subdirectories to better categorize them by functionality. They are still all accessible under the ``qiskit.transpiler.passes`` namespace."
msgstr ""

#: ../../release_notes.rst:7544
msgid "Added ``NoiseModel.from_backend`` for building a basic device noise model for an IBMQ backend (\\#569)"
msgstr ""

#: ../../release_notes.rst:7546
msgid "Added multi-GPU enabled simulation methods to the ``QasmSimulator``, ``StatevectorSimulator``, and ``UnitarySimulator``. The qasm simulator has gpu version of the density matrix and statevector methods and can be accessed using ``\"method\": \"density_matrix_gpu\"`` or ``\"method\": \"statevector_gpu\"`` in ``backend_options``. The statevector simulator gpu method can be accessed using ``\"method\": \"statevector_gpu\"``. The unitary simulator GPU method can be accessed using ``\"method\": \"unitary_gpu\"``. These backends use CUDA and require an NVidia GPU.(\\#544)"
msgstr ""

#: ../../release_notes.rst:7553
msgid "Added ``PulseSimulator`` backend (\\#542)"
msgstr ""

#: ../../release_notes.rst:7554
msgid "Added ``PulseSystemModel`` and ``HamiltonianModel`` classes to represent models to be used in ``PulseSimulator`` (\\#496, \\#493)"
msgstr ""

#: ../../release_notes.rst:7556
msgid "Added ``duffing_model_generators`` to generate ``PulseSystemModel`` objects from a list of parameters (\\#516)"
msgstr ""

#: ../../release_notes.rst:7558
msgid "Migrated ODE function solver to C++ (\\#442, \\#350)"
msgstr ""

#: ../../release_notes.rst:7559
msgid "Added high level pulse simulator tests (\\#379)"
msgstr ""

#: ../../release_notes.rst:7560
msgid "CMake BLAS_LIB_PATH flag to set path to look for BLAS lib (\\#543)"
msgstr ""

#: ../../release_notes.rst:7565
msgid "Changed the structure of the ``src`` directory to organise simulator source code. Simulator controller headers were moved to ``src/controllers`` and simulator method State headers are in ``src/simulators`` (\\#544)"
msgstr ""

#: ../../release_notes.rst:7568
msgid "Moved the location of several functions (\\#568): * Moved contents of ``qiskit.provider.aer.noise.errors`` into the ``qiskit.providers.noise`` module * Moved contents of ``qiskit.provider.aer.noise.utils`` into the ``qiskit.provider.aer.utils`` module."
msgstr ""

#: ../../release_notes.rst:7573
msgid "Enabled optimization to aggregate consecutive gates in a circuit (fusion) by default (\\#579)."
msgstr ""

#: ../../release_notes.rst:7577
msgid "Deprecated ``utils.qobj_utils`` functions (\\#568)"
msgstr ""

#: ../../release_notes.rst:7578
msgid "Deprecated ``qiskit.providers.aer.noise.device.basic_device_noise_model``. It is superseded by the ``NoiseModel.from_backend`` method (\\#569)"
msgstr ""

#: ../../release_notes.rst:7582 ../../release_notes.rst:9561
msgid "Removed"
msgstr ""

#: ../../release_notes.rst:7583
msgid "Removed ``NoiseModel.as_dict``, ``QuantumError.as_dict``, ``ReadoutError.as_dict``, and ``QuantumError.kron`` methods that were deprecated in 0.3 (\\#568)."
msgstr ""

#: ../../release_notes.rst:7587 ../../release_notes.rst:8188
#: ../../release_notes.rst:8711 ../../release_notes.rst:9452
msgid "Ignis 0.2"
msgstr ""

#: ../../release_notes.rst:7592 ../../release_notes.rst:8193
#: ../../release_notes.rst:8716 ../../release_notes.rst:9480
msgid "Aqua 0.6"
msgstr ""

#: ../../release_notes.rst:7597
msgid "IBM Q Provider 0.4.6"
msgstr ""

#: ../../release_notes.rst:7602
msgid "Several new methods were added to :class:`IBMQBackend<qiskit.providers.ibmq.ibmqbackend.IBMQBackend>`:"
msgstr ""

#: ../../release_notes.rst:7605
msgid ":meth:`~qiskit.providers.ibmq.job.IBMQJob.wait_for_final_state` blocks until the job finishes. It takes a callback function that it will invoke after every query to provide feedback."
msgstr ""

#: ../../release_notes.rst:7608
msgid ":meth:`~qiskit.providers.ibmq.ibmqbackend.IBMQBackend.active_jobs` returns the jobs submitted to a backend that are currently in an unfinished status."
msgstr ""

#: ../../release_notes.rst:7610
msgid ":meth:`~qiskit.providers.ibmq.ibmqbackend.IBMQBackend.job_limit` returns the job limit for a backend."
msgstr ""

#: ../../release_notes.rst:7612
msgid ":meth:`~qiskit.providers.ibmq.ibmqbackend.IBMQBackend.remaining_jobs_count` returns the number of jobs that you can submit to the backend before job limit is reached."
msgstr ""

#: ../../release_notes.rst:7615
msgid ":class:`~qiskit.providers.ibmq.job.QueueInfo` now has a new :meth:`~qiskit.providers.ibmq.job.QueueInfo.format` method that returns a formatted string of the queue information."
msgstr ""

#: ../../release_notes.rst:7619
msgid ":class:`IBMQJob<qiskit.providers.ibmq.job.IBMQJob>` now has three new methods: :meth:`~qiskit.providers.ibmq.job.IBMQJob.done`, :meth:`~qiskit.providers.ibmq.job.IBMQJob.running`, and :meth:`~qiskit.providers.ibmq.job.IBMQJob.cancelled` that are used to indicate job status."
msgstr ""

#: ../../release_notes.rst:7624
msgid ":meth:`qiskit.providers.ibmq.ibmqbackend.IBMQBackend.run()` now accepts an optional `job_tags` parameter. If specified, the `job_tags` are assigned to the job, which can later be used as a filter in :meth:`qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs()`."
msgstr ""

#: ../../release_notes.rst:7628
msgid ":class:`~qiskit.providers.ibmq.managed.IBMQJobManager` now has a new method :meth:`~qiskit.providers.ibmq.managed.IBMQJobManager.retrieve_job_set()` that allows you to retrieve a previously submitted job set using the job set ID."
msgstr ""

#: ../../release_notes.rst:7635
msgid "The ``Exception`` hierarchy has been refined with more specialized classes. You can, however, continue to catch their parent exceptions (such as ``IBMQAccountError``). Also, the exception class ``IBMQApiUrlError`` has been replaced by ``IBMQAccountCredentialsInvalidUrl`` and ``IBMQAccountCredentialsInvalidToken``."
msgstr ""

#: ../../release_notes.rst:7644
msgid "The use of proxy urls without a protocol (e.g. ``http://``) is deprecated due to recent Python changes."
msgstr ""

#: ../../release_notes.rst:7649
msgid "Qiskit 0.14.0"
msgstr ""

#: ../../release_notes.rst:7652
msgid "Terra 0.11.0"
msgstr ""

#: ../../release_notes.rst:7659
msgid "The 0.11.0 release includes several new features and bug fixes. The biggest change for this release is the addition of the pulse scheduler. This allows users to define their quantum program as a ``QuantumCircuit`` and then map it to the underlying pulse instructions that will control the quantum hardware to implement the circuit."
msgstr ""

#: ../../release_notes.rst:7670
msgid "Added 5 new commands to easily retrieve user-specific data from ``BackendProperties``: ``gate_property``, ``gate_error``, ``gate_length``, ``qubit_property``, ``t1``, ``t2``, ``readout_error`` and ``frequency``. They return the specific values of backend properties. For example::"
msgstr ""

#: ../../release_notes.rst:7688
msgid "Added method ``Instruction.is_parameterized()`` to check if an instruction object is parameterized. This method returns ``True`` if and only if instruction has a ``ParameterExpression`` or ``Parameter`` object for one of its params."
msgstr ""

#: ../../release_notes.rst:7693
msgid "Added a new analysis pass ``Layout2qDistance``. This pass allows to \"score\" a layout selection, once ``property_set['layout']`` is set.  The score will be the sum of distances for each two-qubit gate in the circuit, when they are not directly connected. This scoring does not consider direction in the coupling map. The lower the number, the better the layout selection is."
msgstr ""

#: ../../release_notes.rst:7699
msgid "For example, consider a linear coupling map ``[0]--[2]--[1]`` and the following circuit::"
msgstr ""

#: ../../release_notes.rst:7706
msgid "If the layout is ``{qr[0]:0, qr[1]:1}``, ``Layout2qDistance`` will set ``property_set['layout_score'] = 1``. If the layout is ``{qr[0]:0, qr[1]:2}``, then the result is ``property_set['layout_score'] = 0``. The lower the score, the better."
msgstr ""

#: ../../release_notes.rst:7711
msgid "Added ``qiskit.QuantumCircuit.cnot`` as an alias for the ``cx`` method of ``QuantumCircuit``. The names ``cnot`` and ``cx`` are often used interchangeably now the `cx` method can be called with either name."
msgstr ""

#: ../../release_notes.rst:7715
msgid "Added ``qiskit.QuantumCircuit.toffoli`` as an alias for the ``ccx`` method of ``QuantumCircuit``. The names ``toffoli`` and ``ccx`` are often used interchangeably now the `ccx` method can be called with either name."
msgstr ""

#: ../../release_notes.rst:7719
msgid "Added ``qiskit.QuantumCircuit.fredkin`` as an alias for the ``cswap`` method of ``QuantumCircuit``. The names ``fredkin`` and ``cswap`` are often used interchangeably now the `cswap` method can be called with either name."
msgstr ""

#: ../../release_notes.rst:7724
msgid "The ``latex`` output mode for ``qiskit.visualization.circuit_drawer()`` and the ``qiskit.circuit.QuantumCircuit.draw()`` method now has a mode to passthrough raw latex from gate labels and parameters. The syntax for doing this mirrors matplotlib's `mathtext mode <https://matplotlib.org/tutorials/text/mathtext.html>`__ syntax. Any portion of a label string between a pair of '$' characters will be treated as raw latex and passed directly into the generated output latex. This can be leveraged to add more advanced formatting to circuit diagrams generated with the latex drawer."
msgstr ""

#: ../../release_notes.rst:7734
msgid "Prior to this release all gate labels were run through a utf8 -> latex conversion to make sure that the output latex would compile the string as expected. This is still what happens for all portions of a label outside the '$' pair. Also if you want to use a dollar sign in your label make sure you escape it in the label string (ie ``'\\$'``)."
msgstr ""

#: ../../release_notes.rst:7740
msgid "You can mix and match this passthrough with the utf8 -> latex conversion to create the exact label you want, for example::"
msgstr ""

#: ../../release_notes.rst:7751
msgid "will now render the first custom gate's label as ``α_gate``, the second will be ``α_gate`` with a 2 subscript, and the last custom gate's label will be ``$α$_gate``."
msgstr ""

#: ../../release_notes.rst:7755
msgid "Add ``ControlledGate`` class for representing controlled gates. Controlled gate instances are created with the ``control(n)`` method of ``Gate`` objects where ``n`` represents the number of controls. The control qubits come before the controlled qubits in the new gate. For example::"
msgstr ""

#: ../../release_notes.rst:7768
msgid "generates::"
msgstr ""

#: ../../release_notes.rst:7779
msgid "Allowed values of ``meas_level`` parameters and fields can now be a member from the `IntEnum` class ``qiskit.qobj.utils.MeasLevel``. This can be used when calling ``execute`` (or anywhere else ``meas_level`` is specified) with a pulse experiment. For example::"
msgstr ""

#: ../../release_notes.rst:7796
msgid "In this above example, ``meas_level=MeasLevel.CLASSIFIED`` and ``meas_level=2`` can be used interchangably now."
msgstr ""

#: ../../release_notes.rst:7799
msgid "A new layout selector based on constraint solving is included. `CSPLayout` models the problem of finding a layout as a constraint problem and uses recursive backtracking to solve it."
msgstr ""

#: ../../release_notes.rst:7828
msgid "The parameter ``CSPLayout(...,strict_direction=True)`` is more restrictive but it will guarantee there is no need of running ``CXDirection`` after."
msgstr ""

#: ../../release_notes.rst:7847
msgid "If the constraint system is not solvable, the `layout` property is not set."
msgstr ""

#: ../../release_notes.rst:7860
msgid "PulseBackendConfiguration (accessed normally as backend.configuration()) has been extended with useful methods to explore its data and the functionality that exists in PulseChannelSpec. PulseChannelSpec will be deprecated in the future. For example::"
msgstr ""

#: ../../release_notes.rst:7873
msgid "``PulseDefaults`` (accessed normally as ``backend.defaults()``) has an attribute, ``circuit_instruction_map`` which has the methods of CmdDef. The new `circuit_instruction_map` is an ``InstructionScheduleMap`` object with three new functions beyond what CmdDef had:"
msgstr ""

#: ../../release_notes.rst:7878
msgid "qubit_instructions(qubits) returns the operations defined for the qubits"
msgstr ""

#: ../../release_notes.rst:7879
msgid "assert_has(instruction, qubits) raises an error if the op isn't defined"
msgstr ""

#: ../../release_notes.rst:7880
msgid "remove(instruction, qubits) like pop, but doesn't require parameters"
msgstr ""

#: ../../release_notes.rst:7882
msgid "There are some differences from the CmdDef:"
msgstr ""

#: ../../release_notes.rst:7884
msgid "``__init__`` takes no arguments"
msgstr ""

#: ../../release_notes.rst:7885
msgid "``cmds`` and ``cmd_qubits`` are deprecated and replaced with ``instructions`` and ``qubits_with_instruction``"
msgstr ""

#: ../../release_notes.rst:7888
msgid "Example::"
msgstr ""

#: ../../release_notes.rst:7896
msgid "A new kwarg parameter, ``show_framechange_channels`` to optionally disable displaying channels with only framechange instructions in pulse visualizations was added to the ``qiskit.visualization.pulse_drawer()`` function and ``qiskit.pulse.Schedule.draw()`` method. When this new kwarg is set to ``False`` the output pulse schedule visualization will not include any channels that only include frame changes."
msgstr ""

#: ../../release_notes.rst:7921
msgid "A new utility function ``qiskit.result.marginal_counts()`` is added which allows marginalization of the counts over some indices of interest. This is useful when more qubits are measured than needed, and one wishes to get the observation counts for some subset of them only."
msgstr ""

#: ../../release_notes.rst:7926
msgid "When ``passmanager.run(...)`` is invoked with more than one circuit, the transpilation of these circuits will run in parallel."
msgstr ""

#: ../../release_notes.rst:7929
msgid "PassManagers can now be sliced to create a new PassManager containing a subset of passes using the square bracket operator. This allow running or drawing a portion of the PassManager for easier testing and visualization. For example let's try to draw the first 3 passes of a PassManager pm, or run just the second pass on our circuit:"
msgstr ""

#: ../../release_notes.rst:7940
msgid "Also now, PassManagers can be created by adding two PassManagers or by directly adding a pass/list of passes to a PassManager."
msgstr ""

#: ../../release_notes.rst:7948
msgid "A basic ``scheduler`` module has now been added to Qiskit. The `scheduler` schedules an input transpiled ``QuantumCircuit`` into a pulse ``Schedule``. The scheduler accepts as input a ``Schedule`` and either a pulse ``Backend``, or a ``CmdDef`` which relates circuit ``Instruction`` objects on specific qubits to pulse Schedules and a ``meas_map`` which determines which measurements must occur together."
msgstr ""

#: ../../release_notes.rst:7955
msgid "Scheduling example::"
msgstr ""

#: ../../release_notes.rst:7967
msgid "The scheduler currently supports two scheduling policies, `as_late_as_possible` (``alap``) and `as_soon_as_possible` (``asap``), which respectively schedule pulse instructions to occur as late as possible or as soon as possible across qubits in a circuit. The scheduling policy may be selected with the input argument ``method``, for example::"
msgstr ""

#: ../../release_notes.rst:7976
msgid "It is easy to use a pulse ``Schedule`` within a ``QuantumCircuit`` by mapping it to a custom circuit instruction such as a gate which may be used in a ``QuantumCircuit``. To do this, first, define the custom gate and then add an entry into the ``CmdDef`` for the gate, for each qubit that the gate will be applied to. The gate can then be used in the ``QuantumCircuit``. At scheduling time the gate will be mapped to the underlying pulse schedule. Using this technique allows easy integration with preexisting qiskit modules such as Ignis."
msgstr ""

#: ../../release_notes.rst:8015
msgid "The feature for transpiling in parallel when ``passmanager.run(...)`` is invoked with more than one circuit is not supported under Windows. See `#2988 <https://github.com/Qiskit/qiskit-terra/issues/2988>`__ for more details."
msgstr ""

#: ../../release_notes.rst:8026
msgid "The ``qiskit.pulse.channels.SystemTopology`` class was used as a helper class for ``PulseChannelSpec``. It has been removed since with the deprecation of ``PulseChannelSpec`` and changes to ``BackendConfiguration`` make it unnecessary."
msgstr ""

#: ../../release_notes.rst:8031
msgid "The previously deprecated representation of qubits and classical bits as tuple, which was deprecated in the 0.9 release, has been removed. The use of ``Qubit`` and ``Clbit`` objects is the new way to represent qubits and classical bits."
msgstr ""

#: ../../release_notes.rst:8036
msgid "The previously deprecated representation of the basis set as single string has been removed. A list of strings is the new preferred way."
msgstr ""

#: ../../release_notes.rst:8039
msgid "The method ``BaseModel.as_dict``, which was deprecated in the 0.9 release, has been removed in favor of the method ``BaseModel.to_dict``."
msgstr ""

#: ../../release_notes.rst:8042
msgid "In PulseDefaults (accessed normally as backend.defaults()), ``qubit_freq_est`` and ``meas_freq_est`` are now returned in Hz rather than GHz. This means the new return values are 1e9 * their previous value."
msgstr ""

#: ../../release_notes.rst:8046
msgid "`dill <https://pypi.org/project/dill/>`__ was added as a requirement. This is needed to enable running ``passmanager.run()`` in parallel for more than one circuit."
msgstr ""

#: ../../release_notes.rst:8050
msgid "The previously deprecated gate ``UBase``, which was deprecated in the 0.9 release, has been removed. The gate ``U3Gate`` should be used instead."
msgstr ""

#: ../../release_notes.rst:8054
msgid "The previously deprecated gate ``CXBase``, which was deprecated in the 0.9 release, has been removed. The gate ``CnotGate`` should be used instead."
msgstr ""

#: ../../release_notes.rst:8058
msgid "The instruction ``snapshot`` used to implicitly convert the ``label`` parameter to string. That conversion has been removed and an error is raised if a string is not provided."
msgstr ""

#: ../../release_notes.rst:8062
msgid "The previously deprecated gate ``U0Gate``, which was deprecated in the 0.9 release, has been removed. The gate ``IdGate`` should be used instead to insert delays."
msgstr ""

#: ../../release_notes.rst:8072
msgid "The ``qiskit.pulse.CmdDef`` class has been deprecated. Instead you should use the ``qiskit.pulse.InstructionScheduleMap``. The ``InstructionScheduleMap`` object for a pulse enabled system can be accessed at ``backend.defaults().instruction_schedules``."
msgstr ""

#: ../../release_notes.rst:8077
msgid "``PulseChannelSpec`` is being deprecated. Use ``BackendConfiguration`` instead. The backend configuration is accessed normally as ``backend.configuration()``. The config has been extended with most of the functionality of PulseChannelSpec, with some modifications as follows, where `0` is an exemplary qubit index::"
msgstr ""

#: ../../release_notes.rst:8088
msgid "Now, if there is an attempt to get a channel for a qubit which does not exist for the device, a ``BackendConfigurationError`` will be raised with a helpful explanation."
msgstr ""

#: ../../release_notes.rst:8092
msgid "The methods ``memoryslots`` and ``registerslots`` of the PulseChannelSpec have not been migrated to the backend configuration. These classical resources are not restrained by the physical configuration of a backend system. Please instantiate them directly::"
msgstr ""

#: ../../release_notes.rst:8100
msgid "The ``qubits`` method is not migrated to backend configuration. The result of ``qubits`` can be built as such::"
msgstr ""

#: ../../release_notes.rst:8105
msgid "``Qubit`` within ``pulse.channels`` has been deprecated. They should not be used. It is possible to obtain channel <=> qubit mappings through the BackendConfiguration (or backend.configuration())."
msgstr ""

#: ../../release_notes.rst:8109
msgid "The function ``qiskit.visualization.circuit_drawer.qx_color_scheme()`` has been deprecated. This function is no longer used internally and doesn't reflect the current IBM QX style. If you were using this function to generate a style dict locally you must save the output from it and use that dictionary directly."
msgstr ""

#: ../../release_notes.rst:8115
msgid "The Exception ``TranspilerAccessError`` has been deprecated. An alternative function ``TranspilerError`` can be used instead to provide the same functionality. This alternative function provides the exact same functionality but with greater generality."
msgstr ""

#: ../../release_notes.rst:8120
msgid "Buffers in Pulse are deprecated. If a nonzero buffer is supplied, a warning will be issued with a reminder to use a Delay instead. Other options would include adding samples to a pulse instruction which are (0.+0.j) or setting the start time of the next pulse to ``schedule.duration + buffer``."
msgstr ""

#: ../../release_notes.rst:8125
msgid "Passing in ``sympy.Basic``, ``sympy.Expr`` and ``sympy.Matrix`` types as instruction parameters are deprecated and will be removed in a future release. You'll need to convert the input to one of the supported types which are:"
msgstr ""

#: ../../release_notes.rst:8142
msgid "The Collect2qBlocks and CommutationAnalysis passes in the transpiler had been unable to process circuits containing Parameterized gates, preventing Parameterized circuits from being transpiled at optimization_level 2 or above. These passes have been corrected to treat Parameterized gates as opaque."
msgstr ""

#: ../../release_notes.rst:8148
msgid "The align_measures function had an issue where Measure stimulus pulses weren't properly aligned with Acquire pulses, resulting in an error. This has been fixed."
msgstr ""

#: ../../release_notes.rst:8152
msgid "Uses of ``numpy.random.seed`` have been removed so that calls of qiskit functions do not affect results of future calls to ``numpy.random``"
msgstr ""

#: ../../release_notes.rst:8155
msgid "Fixed race condition occurring in the job monitor when ``job.queue_position()`` returns ``None``. ``None`` is a valid return from ``job.queue_position()``."
msgstr ""

#: ../../release_notes.rst:8159
msgid "Backend support for ``memory=True`` now checked when that kwarg is passed. ``QiskitError`` results if not supported."
msgstr ""

#: ../../release_notes.rst:8162
msgid "When transpiling without a coupling map, there were no check in the amount of qubits of the circuit to transpile. Now the transpile process checks that the backend has enough qubits to allocate the circuit."
msgstr ""

#: ../../release_notes.rst:8172
msgid "The ``qiskit.result.marginal_counts()`` function replaces a similar utility function in qiskit-ignis ``qiskit.ignis.verification.tomography.marginal_counts()``, which will be deprecated in a future qiskit-ignis release."
msgstr ""

#: ../../release_notes.rst:8177
msgid "All sympy parameter output type support have been been removed (or deprecated as noted) from qiskit-terra. This includes sympy type parameters in ``QuantumCircuit`` objects, qasm ast nodes, or ``Qobj`` objects."
msgstr ""

#: ../../release_notes.rst:8183 ../../release_notes.rst:8706
#: ../../release_notes.rst:9433
msgid "Aer 0.3"
msgstr ""

#: ../../release_notes.rst:8198
msgid "IBM Q Provider 0.4"
msgstr ""

#: ../../release_notes.rst:8203
msgid "The 0.4.0 release is the first release that makes use of all the features of the new IBM Q API. In particular, the ``IBMQJob`` class has been revamped in order to be able to retrieve more information from IBM Q, and a Job Manager class has been added for allowing a higher-level and more seamless usage of large or complex jobs. If you have not upgraded from the legacy IBM Q Experience or QConsole yet, please ensure to revisit the release notes for IBM Q Provider 0.3 (Qiskit 0.11) for more details on how to make the transition. The legacy accounts will no longer be supported as of this release."
msgstr ""

#: ../../release_notes.rst:8217
msgid "Job modifications"
msgstr ""

#: ../../release_notes.rst:8219
msgid "The ``IBMQJob`` class has been revised, and now mimics more closely to the contents of a remote job along with new features:"
msgstr ""

#: ../../release_notes.rst:8222
msgid "You can now assign a name to a job, by specifying ``IBMQBackend.run(..., job_name='...')`` when submitting a job. This name can be retrieved via ``IBMQJob.name()`` and can be used for filtering."
msgstr ""

#: ../../release_notes.rst:8225
msgid "Jobs can now be shared with other users at different levels (global, per hub, group or project) via an optional ``job_share_level`` parameter when submitting the job."
msgstr ""

#: ../../release_notes.rst:8228
msgid "``IBMQJob`` instances now have more attributes, reflecting the contents of the remote IBM Q jobs. This implies that new attributes introduced by the IBM Q API will automatically and immediately be available for use (for example, ``job.new_api_attribute``). The new attributes will be promoted to methods when they are considered stable (for example, ``job.name()``)."
msgstr ""

#: ../../release_notes.rst:8233
msgid "``.error_message()`` returns more information on why a job failed."
msgstr ""

#: ../../release_notes.rst:8234
msgid "``.queue_position()`` accepts a ``refresh`` parameter for forcing an update."
msgstr ""

#: ../../release_notes.rst:8235
msgid "``.result()`` accepts an optional ``partial`` parameter, for returning partial results, if any, of jobs that failed. Be aware that ``Result`` methods, such as ``get_counts()`` will raise an exception if applied on experiments that failed."
msgstr ""

#: ../../release_notes.rst:8240
msgid "Please note that the changes include some low-level modifications of the class. If you were creating the instances manually, note that:"
msgstr ""

#: ../../release_notes.rst:8243
msgid "the signature of the constructor has changed to account for the new features."
msgstr ""

#: ../../release_notes.rst:8244
msgid "the ``.submit()`` method can no longer be called directly, and jobs are expected to be submitted either via the synchronous ``IBMQBackend.run()`` or via the Job Manager."
msgstr ""

#: ../../release_notes.rst:8249
msgid "Job Manager"
msgstr ""

#: ../../release_notes.rst:8251
msgid "A new Job Manager (``IBMQJobManager``) has been introduced, as a higher-level mechanism for handling jobs composed of multiple circuits or pulse schedules. The Job Manager aims to provide a transparent interface, intelligently splitting the input into efficient units of work and taking full advantage of the different components. It will be expanded on upcoming versions, and become the recommended entry point for job submission."
msgstr ""

#: ../../release_notes.rst:8258
msgid "Its ``.run()`` method receives a list of circuits or pulse schedules, and returns a ``ManagedJobSet instance``, which can then be used to track the statuses and results of these jobs. For example::"
msgstr ""

#: ../../release_notes.rst:8286
msgid "provider.backends modifications"
msgstr ""

#: ../../release_notes.rst:8288
msgid "The ``provider.backends`` member, which was previously a function that returned a list of backends, has been promoted to a service. This implies that it can be used both in the previous way, as a ``.backends()`` method, and also as a ``.backends`` attribute with expanded capabilities:"
msgstr ""

#: ../../release_notes.rst:8293
msgid "it contains the existing backends from that provider as attributes, which can be used for autocompletion. For example::"
msgstr ""

#: ../../release_notes.rst:8298
msgid "is equivalent to::"
msgstr ""

#: ../../release_notes.rst:8302
msgid "the ``provider.backends.jobs()`` and ``provider.backends.retrieve_job()`` methods can be used for retrieving provider-wide jobs."
msgstr ""

#: ../../release_notes.rst:8307
msgid "Other changes"
msgstr ""

#: ../../release_notes.rst:8309
msgid "The ``backend.properties()`` function now accepts an optional ``datetime`` parameter. If specified, the function returns the backend properties closest to, but older than, the specified datetime filter."
msgstr ""

#: ../../release_notes.rst:8312
msgid "Some ``warnings`` have been toned down to ``logger.warning`` messages."
msgstr ""

#: ../../release_notes.rst:8317
msgid "Qiskit 0.13.0"
msgstr ""

#: ../../release_notes.rst:8320
msgid "Terra 0.10.0"
msgstr ""

#: ../../release_notes.rst:8327
msgid "The 0.10.0 release includes several new features and bug fixes. The biggest change for this release is the addition of initial support for using Qiskit with trapped ion trap backends."
msgstr ""

#: ../../release_notes.rst:8337
msgid "Introduced new methods in ``QuantumCircuit`` which allows the seamless adding or removing of measurements at the end of a circuit."
msgstr ""

#: ../../release_notes.rst:8343
msgid "``measure_all()``"
msgstr ""

#: ../../release_notes.rst:8341
msgid "Adds a ``barrier`` followed by a ``measure`` operation to all qubits in the circuit. Creates a ``ClassicalRegister`` of size equal to the number of qubits in the circuit, which store the measurements."
msgstr ""

#: ../../release_notes.rst:8349
msgid "``measure_active()``"
msgstr ""

#: ../../release_notes.rst:8346
msgid "Adds a ``barrier`` followed by a ``measure`` operation to all active qubits in the circuit. A qubit is active if it has at least one other operation acting upon it. Creates a ``ClassicalRegister`` of size equal to the number of active qubits in the circuit, which store the measurements."
msgstr ""

#: ../../release_notes.rst:8356
msgid "``remove_final_measurements()``"
msgstr ""

#: ../../release_notes.rst:8352
msgid "Removes all final measurements and preceeding ``barrier`` from a circuit. A measurement is considered \"final\" if it is not followed by any other operation, excluding barriers and other measurements. After the measurements are removed, if all of the classical bits in the ``ClassicalRegister`` are idle (have no operations attached to them), then the ``ClassicalRegister`` is removed."
msgstr ""

#: ../../release_notes.rst:8419
msgid "Initial support for executing experiments on ion trap backends has been added."
msgstr ""

#: ../../release_notes.rst:8422
msgid "An Rxx gate (rxx) and a global Mølmer–Sørensen gate (ms) have been added to the standard gate set."
msgstr ""

#: ../../release_notes.rst:8425
msgid "A Cnot to Rxx/Rx/Ry decomposer ``cnot_rxx_decompose`` and a single qubit Euler angle decomposer ``OneQubitEulerDecomposer`` have been added to the ``quantum_info.synthesis`` module."
msgstr ""

#: ../../release_notes.rst:8429
msgid "A transpiler pass ``MSBasisDecomposer`` has been added to unroll circuits defined over U3 and Cnot gates into a circuit defined over Rxx,Ry and Rx. This pass will be included in preset pass managers for backends which include the 'rxx' gate in their supported basis gates."
msgstr ""

#: ../../release_notes.rst:8434
msgid "The backends in ``qiskit.test.mock`` now contain a snapshot of real device calibration data. This is accessible via the ``properties()`` method for each backend. This can be used to test any code that depends on backend properties, such as noise-adaptive transpiler passes or device noise models for simulation. This will create a faster testing and development cycle without the need to go to live backends."
msgstr ""

#: ../../release_notes.rst:8441
msgid "Allows the Result class to return partial results. If a valid result schema is loaded that contains some experiments which succeeded and some which failed, this allows accessing the data from experiments that succeeded, while raising an exception for experiments that failed and displaying the appropriate error message for the failed results."
msgstr ""

#: ../../release_notes.rst:8447
msgid "An ``ax`` kwarg has been added to the following visualization functions:"
msgstr ""

#: ../../release_notes.rst:8449
msgid "``qiskit.visualization.plot_histogram``"
msgstr ""

#: ../../release_notes.rst:8450
msgid "``qiskit.visualization.plot_state_paulivec``"
msgstr ""

#: ../../release_notes.rst:8451
msgid "``qiskit.visualization.plot_state_qsphere``"
msgstr ""

#: ../../release_notes.rst:8452
msgid "``qiskit.visualization.circuit_drawer`` (``mpl`` backend only)"
msgstr ""

#: ../../release_notes.rst:8453
msgid "``qiskit.QuantumCircuit.draw`` (``mpl`` backend only)"
msgstr ""

#: ../../release_notes.rst:8455
msgid "This kwarg is used to pass in a ``matplotlib.axes.Axes`` object to the visualization functions. This enables integrating these visualization functions into a larger visualization workflow. Also, if an `ax` kwarg is specified then there is no return from the visualization functions."
msgstr ""

#: ../../release_notes.rst:8460
msgid "An ``ax_real`` and ``ax_imag`` kwarg has been added to the following visualization functions:"
msgstr ""

#: ../../release_notes.rst:8463
msgid "``qiskit.visualization.plot_state_hinton``"
msgstr ""

#: ../../release_notes.rst:8464
msgid "``qiskit.visualization.plot_state_city``"
msgstr ""

#: ../../release_notes.rst:8466
msgid "These new kargs work the same as the newly added ``ax`` kwargs for other visualization functions. However because these plots use two axes (one for the real component, the other for the imaginary component). Having two kwargs also provides the flexibility to only generate a visualization for one of the components instead of always doing both. For example::"
msgstr ""

#: ../../release_notes.rst:8479
msgid "will only generate a plot of the real component."
msgstr ""

#: ../../release_notes.rst:8481
msgid "A given pass manager now can be edited with the new method `replace`. This method allows to replace a particular stage in a pass manager, which can be handy when dealing with preset pass managers. For example, let's edit the layout selector of the pass manager used at optimization level 0:"
msgstr ""

#: ../../release_notes.rst:8502
msgid "The layout selection is set in the stage `[1]`. Let's replace it with `DenseLayout`:"
msgstr ""

#: ../../release_notes.rst:8518
msgid "If you want to replace it without any condition, you can use set-item shortcut:"
msgstr ""

#: ../../release_notes.rst:8532 ../../release_notes.rst:9017
msgid "Introduced a new pulse command ``Delay`` which may be inserted into a pulse ``Schedule``. This command accepts a ``duration`` and may be added to any ``Channel``. Other commands may not be scheduled on a channel during a delay."
msgstr ""

#: ../../release_notes.rst:8536 ../../release_notes.rst:9021
msgid "The delay can be added just like any other pulse command. For example::"
msgstr ""

#: ../../release_notes.rst:8557
msgid "One may also pass additional channels to be padded and a time to pad until, for example::"
msgstr ""

#: ../../release_notes.rst:8586
msgid "Assignments and modifications to the ``data`` attribute of ``qiskit.QuantumCircuit`` objects are now validated following the same rules used throughout the ``QuantumCircuit`` API. This was done to improve the performance of the circuits API since we can now assume the ``data`` attribute is in a known format. If you were manually modifying the ``data`` attribute of a circuit object before this may no longer work if your modifications resulted in a data structure other than the list of instructions with context in the format ``[(instruction, qargs, cargs)]``"
msgstr ""

#: ../../release_notes.rst:8595
msgid "The transpiler default passmanager for optimization level 2 now uses the ``DenseLayout`` layout selection mechanism by default instead of ``NoiseAdaptiveLayout``. The ``Denselayout`` pass has also been modified to be made noise-aware."
msgstr ""

#: ../../release_notes.rst:8600
msgid "The deprecated ``DeviceSpecification`` class has been removed. Instead you should use the ``PulseChannelSpec``. For example, you can run something like::"
msgstr ""

#: ../../release_notes.rst:8607
msgid "The deprecated module ``qiskit.pulse.ops`` has been removed. Use ``Schedule`` and ``Instruction`` methods directly. For example, rather than::"
msgstr ""

#: ../../release_notes.rst:8614
msgid "Instead please use::"
msgstr ""

#: ../../release_notes.rst:8619
msgid "This same pattern applies to other ``ops`` functions: ``insert``, ``shift``, ``append``, and ``flatten``."
msgstr ""

#: ../../release_notes.rst:8628
msgid "Using the ``control`` property of ``qiskit.circuit.Instruction`` for classical control is now deprecated. In the future this property will be used for quantum control. Classically conditioned operations will instead be handled by the ``condition`` property of ``qiskit.circuit.Instruction``."
msgstr ""

#: ../../release_notes.rst:8633
msgid "Support for setting ``qiskit.circuit.Instruction`` parameters with an object of type ``qiskit.qasm.node.Node`` has been deprecated. ``Node`` objects that were previously used as parameters should be converted to a supported type prior to initializing a new ``Instruction`` object or calling the ``Instruction.params`` setter. Supported types are ``int``, ``float``, ``complex``, ``str``, ``qiskit.circuit.ParameterExpression``, or ``numpy.ndarray``."
msgstr ""

#: ../../release_notes.rst:8641
msgid "In the qiskit 0.9.0 release the representation of bits (both qubits and classical bits) changed from tuples of the form ``(register, index)`` to be instances of the classes ``qiskit.circuit.Qubit`` and ``qiskit.circuit.Clbit``. For backwards compatibility comparing the equality between a legacy tuple and the bit classes was supported as everything transitioned from tuples to being objects. This support is now deprecated and will be removed in the future. Everything should use the bit classes instead of tuples moving forward."
msgstr ""

#: ../../release_notes.rst:8650
msgid "When the ``mpl`` output is used for either ``qiskit.QuantumCircuit.draw()`` or ``qiskit.visualization.circuit_drawer()`` and the ``style`` kwarg is used, passing in unsupported dictionary keys as part of the ``style``` dictionary is now deprecated. Where these unknown arguments were previously silently ignored, in the future, unsupported keys will raise an exception."
msgstr ""

#: ../../release_notes.rst:8656
msgid "The ``line length`` kwarg for the ``qiskit.QuantumCircuit.draw()`` method and the ``qiskit.visualization.circuit_drawer()`` function with the text output mode is deprecated. It has been replaced by the ``fold`` kwarg which will behave identically for the text output mode (but also now supports the mpl output mode too). ``line_length`` will be removed in a future release so calls should be updated to use ``fold`` instead."
msgstr ""

#: ../../release_notes.rst:8663
msgid "The ``fold`` field in the ``style`` dict kwarg for the ``qiskit.QuantumCircuit.draw()`` method and the ``qiskit.visualization.circuit_drawer()`` function has been deprecated. It has been replaced by the ``fold`` kwarg on both functions. This kwarg behaves identically to the field in the style dict."
msgstr ""

#: ../../release_notes.rst:8675
msgid "Instructions layering which underlies all types of circuit drawing has changed to address right/left justification. This sometimes results in output which is topologically equivalent to the rendering in prior versions but visually different than previously rendered. Fixes `issue #2802 <https://github.com/Qiskit/qiskit-terra/issues/2802>`_"
msgstr ""

#: ../../release_notes.rst:8681
msgid "Add ``memory_slots`` to ``QobjExperimentHeader`` of pulse Qobj. This fixes a bug in the data format of ``meas_level=2`` results of pulse experiments. Measured quantum states are returned as a bit string with zero padding based on the number set for ``memory_slots``."
msgstr ""

#: ../../release_notes.rst:8686
msgid "Fixed the visualization of the rzz gate in the latex circuit drawer to match the cu1 gate to reflect the symmetry in the rzz gate. The fix is based on the cds command of the qcircuit latex package. Fixes `issue #1957 <https://github.com/Qiskit/qiskit-terra/issues/1957>`_"
msgstr ""

#: ../../release_notes.rst:8697
msgid "``matplotlib.figure.Figure`` objects returned by visualization functions are no longer always closed by default. Instead the returned figure objects are only closed if the configured matplotlib backend is an inline jupyter backend(either set with ``%matplotlib inline`` or ``%matplotlib notebook``). Output figure objects are still closed with these backends to avoid duplicate outputs in jupyter notebooks (which is why the ``Figure.close()`` were originally added)."
msgstr ""

#: ../../release_notes.rst:8721 ../../release_notes.rst:9573
#: ../../release_notes.rst:9607 ../../release_notes.rst:9657
msgid "IBM Q Provider 0.3"
msgstr ""

#: ../../release_notes.rst:8727
msgid "Qiskit 0.12.0"
msgstr ""

#: ../../release_notes.rst:8732
msgid "Terra 0.9"
msgstr ""

#: ../../release_notes.rst:8739
msgid "The 0.9 release includes many new features and many bug fixes. The biggest changes for this release are new debugging capabilities for PassManagers. This includes a function to visualize a PassManager, the ability to add a callback function to a PassManager, and logging of passes run in the PassManager. Additionally, this release standardizes the way that you can set an initial layout for your circuit. So now you can leverage ``initial_layout`` the kwarg parameter on ``qiskit.compiler.transpile()`` and ``qiskit.execute()`` and the qubits in the circuit will get laid out on the desire qubits on the device. Visualization of circuits will now also show this clearly when visualizing a circuit that has been transpiled with a layout."
msgstr ""

#: ../../release_notes.rst:8755
msgid "A ``DAGCircuit`` object (i.e. the graph representation of a QuantumCircuit where operation dependencies are explicit) can now be visualized with the ``.draw()`` method. This is in line with Qiskit's philosophy of easy visualization. Other objects which support a ``.draw()`` method are ``QuantumCircuit``, ``PassManager``, and ``Schedule``."
msgstr ""

#: ../../release_notes.rst:8761
msgid "Added a new visualization function ``qiskit.visualization.plot_error_map()`` to plot the error map for a given backend. It takes in a backend object from the qiskit-ibmq-provider and will plot the current error map for that device."
msgstr ""

#: ../../release_notes.rst:8766
msgid "Both ``qiskit.QuantumCircuit.draw()`` and ``qiskit.visualization.circuit_drawer()`` now support annotating the qubits in the visualization with layout information. If the ``QuantumCircuit`` object being drawn includes layout metadata (which is normally only set on the circuit output from ``transpile()`` calls) then by default that layout will be shown on the diagram. This is done for all circuit drawer backends. For example::"
msgstr ""

#: ../../release_notes.rst:8795
msgid "will yield a diagram like::"
msgstr ""

#: ../../release_notes.rst:8830
msgid "If you do not want the layout to be shown on transpiled circuits (or any other circuits with a layout set) there is a new boolean kwarg for both functions, ``with_layout`` (which defaults ``True``), which when set ``False`` will disable the layout annotation in the output circuits."
msgstr ""

#: ../../release_notes.rst:8835
msgid "A new analysis pass ``CountOpsLongest`` was added to retrieve the number of operations on the longest path of the DAGCircuit. When used it will add a ``count_ops_longest_path`` key to the property set dictionary. You can add it to your a passmanager with something like::"
msgstr ""

#: ../../release_notes.rst:8847
msgid "and then access the longest path via the property set value with something like::"
msgstr ""

#: ../../release_notes.rst:8855
msgid "which will set a condition on that pass based on the longest path."
msgstr ""

#: ../../release_notes.rst:8857
msgid "Two new functions, ``sech()`` and ``sech_deriv()`` were added to the pulse library module ``qiskit.pulse.pulse_lib`` for creating an unnormalized hyperbolic secant ``SamplePulse`` object and an unnormalized hyperbolic secant derviative ``SamplePulse`` object respectively."
msgstr ""

#: ../../release_notes.rst:8862
msgid "A new kwarg option ``vertical_compression`` was added to the ``QuantumCircuit.draw()`` method and the ``qiskit.visualization.circuit_drawer()`` function. This option only works with the ``text`` backend. This option can be set to either ``high``, ``medium`` (the default), or ``low`` to adjust how much vertical space is used by the output visualization."
msgstr ""

#: ../../release_notes.rst:8869
msgid "A new kwarg boolean option ``idle_wires`` was added to the ``QuantumCircuit.draw()`` method and the ``qiskit.visualization.circuit_drawer()`` function. It works for all drawer backends. When ``idle_wires`` is set False in a drawer call the drawer will not draw any bits that do not have any circuit elements in the output quantum circuit visualization."
msgstr ""

#: ../../release_notes.rst:8876
msgid "A new PassManager visualizer function ``qiskit.visualization.pass_mamanger_drawer()`` was added. This function takes in a PassManager object and will generate a flow control diagram of all the passes run in the PassManager."
msgstr ""

#: ../../release_notes.rst:8881
msgid "When creating a PassManager you can now specify a callback function that if specified will be run after each pass is executed. This function gets passed a set of kwargs on each call with the state of the pass manager after each pass execution. Currently these kwargs are:"
msgstr ""

#: ../../release_notes.rst:8886
msgid "``pass_`` (``Pass``): the pass being run"
msgstr ""

#: ../../release_notes.rst:8887
msgid "``dag`` (``DAGCircuit``): the dag output of the pass"
msgstr ""

#: ../../release_notes.rst:8888
msgid "``time`` (``float``): the time to execute the pass"
msgstr ""

#: ../../release_notes.rst:8889
msgid "``property_set`` (``PropertySet``): the property set"
msgstr ""

#: ../../release_notes.rst:8890
msgid "``count`` (``int``): the index for the pass execution"
msgstr ""

#: ../../release_notes.rst:8892
msgid "However, it's worth noting that while these arguments are set for the 0.9 release they expose the internals of the pass manager and are subject to change in future release."
msgstr ""

#: ../../release_notes.rst:8896
msgid "For example you can use this to create a callback function that will visualize the circuit output after each pass is executed::"
msgstr ""

#: ../../release_notes.rst:8906
msgid "Additionally you can specify the callback function when using ``qiskit.compiler.transpile()``::"
msgstr ""

#: ../../release_notes.rst:8916
msgid "A new method ``filter()`` was added to the ``qiskit.pulse.Schedule`` class. This enables filtering the instructions in a schedule. For example, filtering by instruction type::"
msgstr ""

#: ../../release_notes.rst:8930
msgid "Additional decomposition methods for several types of gates. These methods will use different decomposition techniques to break down a gate into a sequence of CNOTs and single qubit gates. The following methods are added:"
msgstr ""

#: ../../release_notes.rst:8936
msgid "Method"
msgstr ""

#: ../../release_notes.rst:8936
msgid "Description"
msgstr ""

#: ../../release_notes.rst:8938
msgid "``QuantumCircuit.iso()``"
msgstr ""

#: ../../release_notes.rst:8938
msgid "Add an arbitrary isometry from m to n qubits to a circuit. This allows for attaching arbitrary unitaries on n qubits (m=n) or to prepare any state of n qubits (m=0)"
msgstr ""

#: ../../release_notes.rst:8944
msgid "``QuantumCircuit.diag_gate()``"
msgstr ""

#: ../../release_notes.rst:8944
msgid "Add a diagonal gate to the circuit"
msgstr ""

#: ../../release_notes.rst:8946
msgid "``QuantumCircuit.squ()``"
msgstr ""

#: ../../release_notes.rst:8946
msgid "Decompose an arbitrary 2x2 unitary into three rotation gates and add to a circuit"
msgstr ""

#: ../../release_notes.rst:8950
msgid "``QuantumCircuit.ucg()``"
msgstr ""

#: ../../release_notes.rst:8950
msgid "Attach an uniformly controlled gate (also called a multiplexed gate) to a circuit"
msgstr ""

#: ../../release_notes.rst:8954
msgid "``QuantumCircuit.ucx()``"
msgstr ""

#: ../../release_notes.rst:8954
msgid "Attach a uniformly controlled (also called multiplexed) Rx rotation gate to a circuit"
msgstr ""

#: ../../release_notes.rst:8958
msgid "``QuantumCircuit.ucy()``"
msgstr ""

#: ../../release_notes.rst:8958
msgid "Attach a uniformly controlled (also called multiplexed) Ry rotation gate to a circuit"
msgstr ""

#: ../../release_notes.rst:8962
msgid "``QuantumCircuit.ucz()``"
msgstr ""

#: ../../release_notes.rst:8962
msgid "Attach a uniformly controlled (also called multiplexed) Rz rotation gate to a circuit"
msgstr ""

#: ../../release_notes.rst:8967
msgid "Addition of Gray-Synth and Patel–Markov–Hayes algorithms for synthesis of CNOT-Phase and CNOT-only linear circuits. These functions allow the synthesis of circuits that consist of only CNOT gates given a linear function or a circuit that consists of only CNOT and phase gates given a matrix description."
msgstr ""

#: ../../release_notes.rst:8973
msgid "A new function ``random_circuit`` was added to the ``qiskit.circuit.random`` module. This function will generate a random circuit of a specified size by randomly selecting different gates and adding them to the circuit. For example, you can use this to generate a 5-qubit circuit with a depth of 10 using::"
msgstr ""

#: ../../release_notes.rst:8983
msgid "A new kwarg ``output_names`` was added to the ``qiskit.compiler.transpile()`` function. This kwarg takes in a string or a list of strings and uses those as the value of the circuit name for the output circuits that get returned by the ``transpile()`` call. For example::"
msgstr ""

#: ../../release_notes.rst:8994
msgid "the ``name`` attribute on tcirc_a and tcirc_b will be ``'Circuit A'`` and ``'Circuit B'`` respectively."
msgstr ""

#: ../../release_notes.rst:8997
msgid "A new method ``equiv()`` was added to the ``qiskit.quantum_info.Operator`` and ``qiskit.quantum_info.Statevector`` classes. These methods are used to check whether a second ``Operator`` object or ``Statevector`` is equivalent up to global phase."
msgstr ""

#: ../../release_notes.rst:9002
msgid "The user config file has several new options:"
msgstr ""

#: ../../release_notes.rst:9004
msgid "The ``circuit_drawer`` field now accepts an `auto` value. When set as the value for the ``circuit_drawer`` field the default drawer backend will be `mpl` if it is available, otherwise the `text` backend will be used."
msgstr ""

#: ../../release_notes.rst:9008
msgid "A new field ``circuit_mpl_style`` can be used to set the default style used by the matplotlib circuit drawer. Valid values for this field are ``bw`` and ``default`` to set the default to a black and white or the default color style respectively."
msgstr ""

#: ../../release_notes.rst:9012
msgid "A new field ``transpile_optimization_level`` can be used to set the default transpiler optimization level to use for calls to ``qiskit.compiler.transpile()``. The value can be set to either 0, 1, 2, or 3."
msgstr ""

#: ../../release_notes.rst:9037
msgid "The previously deprecated ``qiskit._util`` module has been removed. ``qiskit.util`` should be used instead."
msgstr ""

#: ../../release_notes.rst:9040
msgid "The ``QuantumCircuit.count_ops()`` method now returns an ``OrderedDict`` object instead of a ``dict``. This should be compatible for most use cases since ``OrderedDict`` is a ``dict`` subclass. However type checks and other class checks might need to be updated."
msgstr ""

#: ../../release_notes.rst:9045
msgid "The ``DAGCircuit.width()`` method now returns the total number quantum bits and classical bits. Before it would only return the number of quantum bits. If you require just the number of quantum bits you can use ``DAGCircuit.num_qubits()`` instead."
msgstr ""

#: ../../release_notes.rst:9050
msgid "The function ``DAGCircuit.num_cbits()`` has been removed. Instead you can use ``DAGCircuit.num_clbits()``."
msgstr ""

#: ../../release_notes.rst:9053
msgid "Individual quantum bits and classical bits are no longer represented as ``(register, index)`` tuples. They are now instances of `Qubit` and `Clbit` classes. If you're dealing with individual bits make sure that you update any usage or type checks to look for these new classes instead of tuples."
msgstr ""

#: ../../release_notes.rst:9059
msgid "The preset passmanager classes ``qiskit.transpiler.preset_passmanagers.default_pass_manager`` and ``qiskit.transpiler.preset_passmanagers.default_pass_manager_simulator`` (which were the previous default pass managers for ``qiskit.compiler.transpile()`` calls) have been removed. If you were manually using this pass managers switch to the new default, ``qiskit.transpile.preset_passmanagers.level1_pass_manager``."
msgstr ""

#: ../../release_notes.rst:9067
msgid "The ``LegacySwap`` pass has been removed. If you were using it in a custom pass manager, it's usage can be replaced by the ``StochasticSwap`` pass, which is a faster more stable version. All the preset passmanagers have been updated to use ``StochasticSwap`` pass instead of the ``LegacySwap``."
msgstr ""

#: ../../release_notes.rst:9072
msgid "The following deprecated ``qiskit.dagcircuit.DAGCircuit`` methods have been removed:"
msgstr ""

#: ../../release_notes.rst:9075
msgid "``DAGCircuit.get_qubits()`` - Use ``DAGCircuit.qubits()`` instead"
msgstr ""

#: ../../release_notes.rst:9076
msgid "``DAGCircuit.get_bits()`` - Use ``DAGCircuit.clbits()`` instead"
msgstr ""

#: ../../release_notes.rst:9077
msgid "``DAGCircuit.qasm()`` - Use a combination of ``qiskit.converters.dag_to_circuit()`` and ``QuantumCircuit.qasm()``. For example::"
msgstr ""

#: ../../release_notes.rst:9086
msgid "``DAGCircuit.get_op_nodes()`` - Use ``DAGCircuit.op_nodes()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``op_nodes()`` instead of the list of tuples previously returned by ``get_op_nodes()``."
msgstr ""

#: ../../release_notes.rst:9090
msgid "``DAGCircuit.get_gate_nodes()`` - Use ``DAGCircuit.gate_nodes()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``gate_nodes()`` instead of the list of tuples previously returned by ``get_gate_nodes()``."
msgstr ""

#: ../../release_notes.rst:9094
msgid "``DAGCircuit.get_named_nodes()`` - Use ``DAGCircuit.named_nodes()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``named_nodes()`` instead of the list of node_ids previously returned by ``get_named_nodes()``."
msgstr ""

#: ../../release_notes.rst:9098
msgid "``DAGCircuit.get_2q_nodes()`` - Use ``DAGCircuit.twoQ_gates()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``twoQ_gates()`` instead of the list of data_dicts previously returned by ``get_2q_nodes()``."
msgstr ""

#: ../../release_notes.rst:9102
msgid "``DAGCircuit.get_3q_or_more_nodes()`` - Use ``DAGCircuit.threeQ_or_more_gates()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``threeQ_or_more_gates()`` instead of the list of tuples previously returned by ``get_3q_or_more_nodes()``."
msgstr ""

#: ../../release_notes.rst:9107
msgid "The following ``qiskit.dagcircuit.DAGCircuit`` methods had deprecated support for accepting a ``node_id`` as a parameter. This has been removed and now only ``DAGNode`` objects are accepted as input:"
msgstr ""

#: ../../release_notes.rst:9111
msgid "``successors()``"
msgstr ""

#: ../../release_notes.rst:9112
msgid "``predecessors()``"
msgstr ""

#: ../../release_notes.rst:9113
msgid "``ancestors()``"
msgstr ""

#: ../../release_notes.rst:9114
msgid "``descendants()``"
msgstr ""

#: ../../release_notes.rst:9115
msgid "``bfs_successors()``"
msgstr ""

#: ../../release_notes.rst:9116
msgid "``quantum_successors()``"
msgstr ""

#: ../../release_notes.rst:9117
msgid "``remove_op_node()``"
msgstr ""

#: ../../release_notes.rst:9118
msgid "``remove_ancestors_of()``"
msgstr ""

#: ../../release_notes.rst:9119
msgid "``remove_descendants_of()``"
msgstr ""

#: ../../release_notes.rst:9120
msgid "``remove_nonancestors_of()``"
msgstr ""

#: ../../release_notes.rst:9121
msgid "``remove_nondescendants_of()``"
msgstr ""

#: ../../release_notes.rst:9122
msgid "``substitute_node_with_dag()``"
msgstr ""

#: ../../release_notes.rst:9124
msgid "The ``qiskit.dagcircuit.DAGCircuit`` method ``rename_register()`` has been removed. This was unused by all the qiskit code. If you were relying on it externally you'll have to re-implement is an external function."
msgstr ""

#: ../../release_notes.rst:9128
msgid "The ``qiskit.dagcircuit.DAGCircuit`` property ``multi_graph`` has been removed. Direct access to the underlying ``networkx`` ``multi_graph`` object isn't supported anymore. The API provided by the ``DAGCircuit`` class should be used instead."
msgstr ""

#: ../../release_notes.rst:9133
msgid "The deprecated exception class ``qiskit.qiskiterror.QiskitError`` has been removed. Instead you should use ``qiskit.exceptions.QiskitError``."
msgstr ""

#: ../../release_notes.rst:9136
msgid "The boolean kwargs, ``ignore_requires`` and ``ignore_preserves`` from the ``qiskit.transpiler.PassManager`` constructor have been removed. These are no longer valid options."
msgstr ""

#: ../../release_notes.rst:9140
msgid "The module ``qiskit.tools.logging`` has been removed. This module was not used by anything and added nothing over the interfaces that Python's standard library ``logging`` module provides. If you want to set a custom formatter for logging use the standard library ``logging`` module instead."
msgstr ""

#: ../../release_notes.rst:9145
msgid "The ``CompositeGate`` class has been removed. Instead you should directly create a instruction object from a circuit and append that to your circuit. For example, you can run something like::"
msgstr ""

#: ../../release_notes.rst:9155
msgid "The previously deprecated kwargs, ``seed`` and ``config`` for ``qiskit.compiler.assemble()`` have been removed use ``seed_simulator`` and ``run_config`` respectively instead."
msgstr ""

#: ../../release_notes.rst:9159
msgid "The previously deprecated converters ``qiskit.converters.qobj_to_circuits()`` and ``qiskit.converters.circuits_to_qobj()`` have been removed. Use ``qiskit.assembler.disassemble()`` and ``qiskit.compiler.assemble()`` respectively instead."
msgstr ""

#: ../../release_notes.rst:9165
msgid "The previously deprecated kwarg ``seed_mapper`` for ``qiskit.compiler.transpile()`` has been removed. Instead you should use ``seed_transpiler``"
msgstr ""

#: ../../release_notes.rst:9169
msgid "The previously deprecated kwargs ``seed``, ``seed_mapper``, ``config``, and ``circuits`` for the ``qiskit.execute()`` function have been removed. Use ``seed_simulator``, ``seed_transpiler``, ``run_config``, and ``experiments`` arguments respectively instead."
msgstr ""

#: ../../release_notes.rst:9174
msgid "The previously deprecated ``qiskit.tools.qcvv`` module has been removed use qiskit-ignis instead."
msgstr ""

#: ../../release_notes.rst:9177
msgid "The previously deprecated functions ``qiskit.transpiler.transpile()`` and ``qiskit.transpiler.transpile_dag()`` have been removed. Instead you should use ``qiskit.compiler.transpile``. If you were using ``transpile_dag()`` this can be replaced by running::"
msgstr ""

#: ../../release_notes.rst:9186
msgid "The previously deprecated function ``qiskit.compile()`` has been removed instead you should use ``qiskit.compiler.transpile()`` and ``qiskit.compiler.assemble()``."
msgstr ""

#: ../../release_notes.rst:9190
#, python-format
msgid "The jupyter cell magic ``%%qiskit_progress_bar`` from ``qiskit.tools.jupyter`` has been changed to a line magic. This was done to better reflect how the magic is used and how it works. If you were using the ``%%qiskit_progress_bar`` cell magic in an existing notebook, you will have to update this to be a line magic by changing it to be ``%qiskit_progress_bar`` instead. Everything else should behave identically."
msgstr ""

#: ../../release_notes.rst:9198
msgid "The deprecated function ``qiskit.tools.qi.qi.random_unitary_matrix()`` has been removed. You should use the ``qiskit.quantum_info.random.random_unitary()`` function instead."
msgstr ""

#: ../../release_notes.rst:9202
msgid "The deprecated function ``qiskit.tools.qi.qi.random_density_matrix()`` has been removed. You should use the ``qiskit.quantum_info.random.random_density_matrix()`` function instead."
msgstr ""

#: ../../release_notes.rst:9207
msgid "The deprecated function ``qiskit.tools.qi.qi.purity()`` has been removed. You should the ``qiskit.quantum_info.purity()`` function instead."
msgstr ""

#: ../../release_notes.rst:9210
msgid "The deprecated ``QuantumCircuit._attach()`` method has been removed. You should use ``QuantumCircuit.append()`` instead."
msgstr ""

#: ../../release_notes.rst:9213
msgid "The ``qiskit.qasm.Qasm`` method ``get_filename()`` has been removed. You can use the ``return_filename()`` method instead."
msgstr ""

#: ../../release_notes.rst:9216
msgid "The deprecated ``qiskit.mapper`` module has been removed. The list of functions and classes with their alternatives are:"
msgstr ""

#: ../../release_notes.rst:9219
msgid "``qiskit.mapper.CouplingMap``: ``qiskit.transpiler.CouplingMap`` should be used instead."
msgstr ""

#: ../../release_notes.rst:9221
msgid "``qiskit.mapper.Layout``: ``qiskit.transpiler.Layout`` should be used instead"
msgstr ""

#: ../../release_notes.rst:9223
msgid "``qiskit.mapper.compiling.euler_angles_1q()``: ``qiskit.quantum_info.synthesis.euler_angles_1q()`` should be used instead"
msgstr ""

#: ../../release_notes.rst:9226
msgid "``qiskit.mapper.compiling.two_qubit_kak()``: ``qiskit.quantum_info.synthesis.two_qubit_cnot_decompose()`` should be used instead."
msgstr ""

#: ../../release_notes.rst:9230
msgid "The deprecated exception classes ``qiskit.mapper.exceptions.CouplingError`` and ``qiskit.mapper.exceptions.LayoutError`` don't have an alternative since they serve no purpose without a ``qiskit.mapper`` module."
msgstr ""

#: ../../release_notes.rst:9234
msgid "The ``qiskit.pulse.samplers`` module has been moved to ``qiskit.pulse.pulse_lib.samplers``. You will need to update imports of ``qiskit.pulse.samplers`` to ``qiskit.pulse.pulse_lib.samplers``."
msgstr ""

#: ../../release_notes.rst:9238
msgid "`seaborn`_ is now a dependency for the function ``qiskit.visualization.plot_state_qsphere()``. It is needed to generate proper angular color maps for the visualization. The ``qiskit-terra[visualization]`` extras install target has been updated to install ``seaborn>=0.9.0`` If you are using visualizations and specifically the ``plot_state_qsphere()`` function you can use that to install ``seaborn`` or just manually run ``pip install seaborn>=0.9.0``"
msgstr ""

#: ../../release_notes.rst:9248
msgid "The previously deprecated functions ``qiksit.visualization.plot_state`` and ``qiskit.visualization.iplot_state`` have been removed. Instead you should use the specific function for each plot type. You can refer to the following tables to map the deprecated functions to their equivalent new ones:"
msgstr ""

#: ../../release_notes.rst:9255 ../../release_notes.rst:10397
#: ../../release_notes.rst:10677 ../../release_notes.rst:10714
msgid "Qiskit Terra 0.6"
msgstr ""

#: ../../release_notes.rst:9255 ../../release_notes.rst:10397
msgid "Qiskit Terra 0.7+"
msgstr ""

#: ../../release_notes.rst:9257 ../../release_notes.rst:10399
msgid "plot_state(rho)"
msgstr ""

#: ../../release_notes.rst:9257 ../../release_notes.rst:9258
#: ../../release_notes.rst:10399 ../../release_notes.rst:10400
msgid "plot_state_city(rho)"
msgstr ""

#: ../../release_notes.rst:9258 ../../release_notes.rst:10400
msgid "plot_state(rho, method='city')"
msgstr ""

#: ../../release_notes.rst:9259 ../../release_notes.rst:10401
msgid "plot_state(rho, method='paulivec')"
msgstr ""

#: ../../release_notes.rst:9259 ../../release_notes.rst:10401
msgid "plot_state_paulivec(rho)"
msgstr ""

#: ../../release_notes.rst:9260 ../../release_notes.rst:10402
msgid "plot_state(rho, method='qsphere')"
msgstr ""

#: ../../release_notes.rst:9260 ../../release_notes.rst:10402
msgid "plot_state_qsphere(rho)"
msgstr ""

#: ../../release_notes.rst:9261 ../../release_notes.rst:10403
msgid "plot_state(rho, method='bloch')"
msgstr ""

#: ../../release_notes.rst:9261 ../../release_notes.rst:10403
msgid "plot_bloch_multivector(rho)"
msgstr ""

#: ../../release_notes.rst:9262 ../../release_notes.rst:10404
msgid "plot_state(rho, method='hinton')"
msgstr ""

#: ../../release_notes.rst:9262 ../../release_notes.rst:10404
msgid "plot_state_hinton(rho)"
msgstr ""

#: ../../release_notes.rst:9265
msgid "The ``pylatexenc`` and ``pillow`` dependencies for the ``latex`` and ``latex_source`` circuit drawer backends are no longer listed as requirements. If you are going to use the latex circuit drawers ensure you have both packages installed or use the setuptools extras to install it along with qiskit-terra::"
msgstr ""

#: ../../release_notes.rst:9273
msgid "The root of the ``qiskit`` namespace will now emit a warning on import if either ``qiskit.IBMQ`` or ``qiskit.Aer`` could not be setup. This will occur whenever anything in the ``qiskit`` namespace is imported. These warnings were added to make it clear for users up front if they're running qiskit and the qiskit-aer and qiskit-ibmq-provider packages could not be found. It's not always clear if the packages are missing or python packaging/pip installed an element incorrectly until you go to use them and get an empty ``ImportError``. These warnings should make it clear up front if there these commonly used aliases are missing."
msgstr ""

#: ../../release_notes.rst:9283
msgid "However, for users that choose not to use either qiskit-aer or qiskit-ibmq-provider this might cause additional noise. For these users these warnings are easily suppressable using Python's standard library ``warnings``. Users can suppress the warnings by putting these two lines before any imports from qiskit::"
msgstr ""

#: ../../release_notes.rst:9293
msgid "This will suppress the warnings emitted by not having qiskit-aer or qiskit-ibmq-provider installed, but still preserve any other warnings emitted by qiskit or any other package."
msgstr ""

#: ../../release_notes.rst:9303
msgid "The ``U`` and ``CX`` gates have been deprecated. If you're using these gates in your code you should update them to use ``u3`` and ``cx`` instead. For example, if you're using the circuit gate functions ``circuit.u_base()`` and ``circuit.cx_base()`` you should update these to be ``circuit.u3()`` and ``circuit.cx()`` respectively."
msgstr ""

#: ../../release_notes.rst:9309
msgid "The ``u0`` gate has been deprecated in favor of using multiple ``iden`` gates and it will be removed in the future. If you're using the ``u0`` gate in your circuit you should update your calls to use ``iden``. For example, f you were using ``circuit.u0(2)`` in your circuit before that should be updated to be::"
msgstr ""

#: ../../release_notes.rst:9318
msgid "instead."
msgstr ""

#: ../../release_notes.rst:9320
msgid "The ``qiskit.pulse.DeviceSpecification`` class is deprecated now. Instead you should use ``qiskit.pulse.PulseChannelSpec``."
msgstr ""

#: ../../release_notes.rst:9323
msgid "Accessing a ``qiskit.circuit.Qubit``, ``qiskit.circuit.Clbit``, or ``qiskit.circuit.Bit`` class by index is deprecated (for compatibility with the ``(register, index)`` tuples that these classes replaced). Instead you should use the ``register`` and ``index`` attributes."
msgstr ""

#: ../../release_notes.rst:9328
msgid "Passing in a bit to the ``qiskit.QuantumCircuit`` method ``append`` as a tuple ``(register, index)`` is deprecated. Instead bit objects should be used directly."
msgstr ""

#: ../../release_notes.rst:9332
msgid "Accessing the elements of a ``qiskit.transpiler.Layout`` object with a tuple ``(register, index)`` is deprecated. Instead a bit object should be used directly."
msgstr ""

#: ../../release_notes.rst:9336
msgid "The ``qiskit.transpiler.Layout`` constructor method ``qiskit.transpiler.Layout.from_tuplelist()`` is deprecated. Instead the constructor ``qiskit.transpiler.Layout.from_qubit_list()`` should be used."
msgstr ""

#: ../../release_notes.rst:9340
msgid "The module ``qiskit.pulse.ops`` has been deprecated. All the functions it provided:"
msgstr ""

#: ../../release_notes.rst:9343
msgid "``union``"
msgstr ""

#: ../../release_notes.rst:9344
msgid "``flatten``"
msgstr ""

#: ../../release_notes.rst:9345
msgid "``shift``"
msgstr ""

#: ../../release_notes.rst:9346
msgid "``insert``"
msgstr ""

#: ../../release_notes.rst:9347
msgid "``append``"
msgstr ""

#: ../../release_notes.rst:9349
msgid "have equivalent methods available directly on the ``qiskit.pulse.Schedule`` and ``qiskit.pulse.Instruction`` classes. Those methods should be used instead."
msgstr ""

#: ../../release_notes.rst:9353
msgid "The ``qiskit.qasm.Qasm`` method ``get_tokens()`` is deprecated. Instead you should use the ``generate_tokens()`` method."
msgstr ""

#: ../../release_notes.rst:9356
msgid "The ``qiskit.qasm.qasmparser.QasmParser`` method ``get_tokens()`` is deprecated. Instead you should use the ``read_tokens()`` method."
msgstr ""

#: ../../release_notes.rst:9359
msgid "The ``as_dict()`` method for the Qobj class has been deprecated and will be removed in the future. You should replace calls to it with ``to_dict()`` instead."
msgstr ""

#: ../../release_notes.rst:9369
msgid "The definition of the ``CU3Gate`` has been changed to be equivalent to the canonical definition of a controlled ``U3Gate``."
msgstr ""

#: ../../release_notes.rst:9372
msgid "The handling of layout in the pass manager has been standardized. This fixes several reported issues with handling layout. The ``initial_layout`` kwarg parameter on ``qiskit.compiler.transpile()`` and ``qiskit.execute()`` will now lay out your qubits from the circuit onto the desired qubits on the device when transpiling circuits."
msgstr ""

#: ../../release_notes.rst:9378
msgid "Support for n-qubit unitaries was added to the BasicAer simulator and ``unitary`` (arbitrary unitary gates) was added to the set of basis gates for the simulators"
msgstr ""

#: ../../release_notes.rst:9382
msgid "The ``qiskit.visualization.plost_state_qsphere()`` has been updated to fix several issues with it. Now output Q Sphere visualization will be correctly generated and the following aspects have been updated:"
msgstr ""

#: ../../release_notes.rst:9386
msgid "All complementary basis states are antipodal"
msgstr ""

#: ../../release_notes.rst:9387
msgid "Phase is indicated by color of line and marker on sphere's surface"
msgstr ""

#: ../../release_notes.rst:9390
msgid "Probability is indicated by translucency of line and volume of marker on"
msgstr ""

#: ../../release_notes.rst:9389
msgid "sphere's surface"
msgstr ""

#: ../../release_notes.rst:9397
msgid "The default PassManager for ``qiskit.compiler.transpile()`` and ``qiskit.execute()`` has been changed to optimization level 1 pass manager defined at ``qiskit.transpile.preset_passmanagers.level1_pass_manager``."
msgstr ""

#: ../../release_notes.rst:9401
msgid "All the circuit drawer backends now will express gate parameters in a circuit as common fractions of pi in the output visualization. If the value of a parameter can be expressed as a fraction of pi that will be used instead of the numeric equivalent."
msgstr ""

#: ../../release_notes.rst:9406
msgid "When using ``qiskit.assembler.assemble_schedules()`` if you do not provide the number of memory_slots to use the number will be inferred based on the number of acquisitions in the input schedules."
msgstr ""

#: ../../release_notes.rst:9410
msgid "The deprecation warning on the ``qiskit.dagcircuit.DAGCircuit`` property ``node_counter`` has been removed. The behavior change being warned about was put into effect when the warning was added, so warning that it had changed served no purpose."
msgstr ""

#: ../../release_notes.rst:9415
msgid "Calls to ``PassManager.run()`` now will emit python logging messages at the INFO level for each pass execution. These messages will include the Pass name and the total execution time of the pass. Python's standard logging was used because it allows Qiskit-Terra's logging to integrate in a standard way with other applications and libraries. All logging for the transpiler occurs under the ``qiskit.transpiler`` namespace, as used by ``logging.getLogger('qiskit.transpiler``). For example, to turn on DEBUG level logging for the transpiler you can run::"
msgstr ""

#: ../../release_notes.rst:9429
msgid "which will set the log level for the transpiler to DEBUG and configure those messages to be printed to stderr."
msgstr ""

#: ../../release_notes.rst:9434
msgid "There's a new high-performance Density Matrix Simulator that can be used in conjunction with our noise models, to better simulate real world scenarios."
msgstr ""

#: ../../release_notes.rst:9436
msgid "We have added a Matrix Product State (MPS) simulator. MPS allows for efficient simulation of several classes of quantum circuits, even under presence of strong correlations and highly entangled states. For cases amenable to MPS, circuits with several hundred qubits and more can be exactly simulated, e.g., for the purpose of obtaining expectation values of observables."
msgstr ""

#: ../../release_notes.rst:9441
msgid "Snapshots can be performed in all of our simulators."
msgstr ""

#: ../../release_notes.rst:9442
msgid "Now we can measure sampling circuits with read-out errors too, not only ideal circuits."
msgstr ""

#: ../../release_notes.rst:9444
msgid "We have increased some circuit optimizations with noise presence."
msgstr ""

#: ../../release_notes.rst:9445
msgid "A better 2-qubit error approximations have been included."
msgstr ""

#: ../../release_notes.rst:9446
msgid "Included some tools for making certain noisy simulations easier to craft and faster to simulate."
msgstr ""

#: ../../release_notes.rst:9448
msgid "Increased performance with simulations that require less floating point numerical precision."
msgstr ""

#: ../../release_notes.rst:9457
msgid "`Logging Module <https://github.com/Qiskit/qiskit-iqx-tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/9_ignis_logging.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:9458
msgid "`Purity RB <https://github.com/Qiskit/qiskit-iqx-tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/5c_purity_rb.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:9459
msgid "`Interleaved RB <https://github.com/Qiskit/qiskit-iqx-tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/5b_interleaved_rb.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:9460
msgid "`Repetition Code for Verification <https://github.com/Qiskit/qiskit-iqx-tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/8_repetition_code.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:9461
msgid "Seed values can now be arbitrarily added to RB (not just in order)"
msgstr ""

#: ../../release_notes.rst:9462
msgid "Support for adding multiple results to measurement mitigation"
msgstr ""

#: ../../release_notes.rst:9463
msgid "RB Fitters now support providing guess values"
msgstr ""

#: ../../release_notes.rst:9468
msgid "Fixed a bug in RB fit error"
msgstr ""

#: ../../release_notes.rst:9469
msgid "Fixed a bug in the characterization fitter when selecting a qubit index to fit"
msgstr ""

#: ../../release_notes.rst:9475
msgid "Measurement mitigation now operates in parallel when applied to multiple results"
msgstr ""

#: ../../release_notes.rst:9477
msgid "Guess values for RB fitters are improved"
msgstr ""

#: ../../release_notes.rst:9485
msgid "Relative-Phase Toffoli gates ``rccx`` (with 2 controls) and ``rcccx`` (with 3 controls)."
msgstr ""

#: ../../release_notes.rst:9487
msgid "Variational form ``RYCRX``"
msgstr ""

#: ../../release_notes.rst:9488
msgid "A new ``'basic-no-ancilla'`` mode to ``mct``."
msgstr ""

#: ../../release_notes.rst:9489
msgid "Multi-controlled rotation gates ``mcrx``, ``mcry``, and ``mcrz`` as a general ``u3`` gate is not supported by graycode implementation"
msgstr ""

#: ../../release_notes.rst:9491
msgid "Chemistry: ROHF open-shell support"
msgstr ""

#: ../../release_notes.rst:9493 ../../release_notes.rst:9500
#: ../../release_notes.rst:9506
msgid "Supported for all drivers: Gaussian16, PyQuante, PySCF and PSI4"
msgstr ""

#: ../../release_notes.rst:9494
msgid "HartreeFock initial state, UCCSD variational form and two qubit reduction for parity mapping now support different alpha and beta particle numbers for open shell support"
msgstr ""

#: ../../release_notes.rst:9498
msgid "Chemistry: UHF open-shell support"
msgstr ""

#: ../../release_notes.rst:9501
msgid "QMolecule extended to include integrals, coefficients etc for separate beta"
msgstr ""

#: ../../release_notes.rst:9503
msgid "Chemistry: QMolecule extended with integrals in atomic orbital basis to facilitate common access to these for experimentation"
msgstr ""

#: ../../release_notes.rst:9508
msgid "Chemistry: Additional PyQuante and PySCF driver configuration"
msgstr ""

#: ../../release_notes.rst:9510
msgid "Convergence tolerance and max convergence iteration controls."
msgstr ""

#: ../../release_notes.rst:9511
msgid "For PySCF initial guess choice"
msgstr ""

#: ../../release_notes.rst:9513
msgid "Chemistry: Processing output added to debug log from PyQuante and PySCF computations (Gaussian16 and PSI4 outputs were already added to debug log)"
msgstr ""

#: ../../release_notes.rst:9515
msgid "Chemistry: Merged qiskit-chemistry into qiskit-aqua"
msgstr ""

#: ../../release_notes.rst:9516
msgid "Add ``MatrixOperator``, ``WeightedPauliOperator`` and ``TPBGroupedPauliOperator`` class."
msgstr ""

#: ../../release_notes.rst:9518
msgid "Add ``evolution_instruction`` function to get registerless instruction of time evolution."
msgstr ""

#: ../../release_notes.rst:9520
msgid "Add ``op_converter`` module to unify the place in charge of converting different types of operators."
msgstr ""

#: ../../release_notes.rst:9522
msgid "Add ``Z2Symmetries`` class to encapsulate the Z2 symmetries info and has helper methods for tapering an Operator."
msgstr ""

#: ../../release_notes.rst:9524
msgid "Amplitude Estimation: added maximum likelihood postprocessing and confidence interval computation."
msgstr ""

#: ../../release_notes.rst:9526
msgid "Maximum Likelihood Amplitude Estimation (MLAE): Implemented new algorithm for amplitude estimation based on maximum likelihood estimation, which reduces number of required qubits and circuit depth."
msgstr ""

#: ../../release_notes.rst:9529
msgid "Added (piecewise) linearly and polynomially controlled Pauli-rotation circuits."
msgstr ""

#: ../../release_notes.rst:9531
msgid "Add ``q_equation_of_motion`` to study excited state of a molecule, and add two algorithms to prepare the reference state."
msgstr ""

#: ../../release_notes.rst:9537
msgid "Improve ``mct``'s ``'basic'`` mode by using relative-phase Toffoli gates to build intermediate results."
msgstr ""

#: ../../release_notes.rst:9539
msgid "Adapt to Qiskit Terra's newly introduced ``Qubit`` class."
msgstr ""

#: ../../release_notes.rst:9540
msgid "Prevent ``QPE/IQPE`` from modifying input ``Operator`` objects."
msgstr ""

#: ../../release_notes.rst:9541
msgid "The PyEDA dependency was removed; corresponding oracles' underlying logic operations are now handled by SymPy."
msgstr ""

#: ../../release_notes.rst:9543
msgid "Refactor the ``Operator`` class, each representation has its own class ``MatrixOperator``, ``WeightedPauliOperator`` and ``TPBGroupedPauliOperator``."
msgstr ""

#: ../../release_notes.rst:9545
msgid "The ``power`` in ``evolution_instruction`` was applied on the theta on the CRZ gate directly, the new version repeats the circuits to implement power."
msgstr ""

#: ../../release_notes.rst:9547
msgid "CircuitCache is OFF by default, and it can be set via environment variable now ``QISKIT_AQUA_CIRCUIT_CACHE``."
msgstr ""

#: ../../release_notes.rst:9553
msgid "A bug where ``TruthTableOracle`` would build incorrect circuits for truth tables with only a single ``1`` value."
msgstr ""

#: ../../release_notes.rst:9555
msgid "A bug caused by ``PyEDA``'s indeterminism."
msgstr ""

#: ../../release_notes.rst:9556
msgid "A bug with ``QPE/IQPE``'s translation and stretch computation."
msgstr ""

#: ../../release_notes.rst:9557
msgid "Chemistry: Bravyi-Kitaev mapping fixed when num qubits was not a power of 2"
msgstr ""

#: ../../release_notes.rst:9558
msgid "Setup ``initial_layout`` in ``QuantumInstance`` via a list."
msgstr ""

#: ../../release_notes.rst:9563
msgid "General multi-controlled rotation gate ``mcu3`` is removed and replaced by multi-controlled rotation gates ``mcrx``, ``mcry``, and ``mcrz``"
msgstr ""

#: ../../release_notes.rst:9568
msgid "The ``Operator`` class is deprecated, in favor of using ``MatrixOperator``, ``WeightedPauliOperator`` and ``TPBGroupedPauliOperator``."
msgstr ""

#: ../../release_notes.rst:9580
msgid "Qiskit 0.11.1"
msgstr ""

#: ../../release_notes.rst:9582
msgid "We have bumped up Qiskit micro version to 0.11.1 because IBM Q Provider has bumped its micro version as well."
msgstr ""

#: ../../release_notes.rst:9586 ../../release_notes.rst:9624
#: ../../release_notes.rst:9732 ../../release_notes.rst:9774
msgid "Terra 0.8"
msgstr ""

#: ../../release_notes.rst:9591 ../../release_notes.rst:9629
#: ../../release_notes.rst:9737 ../../release_notes.rst:9950
msgid "Aer 0.2"
msgstr ""

#: ../../release_notes.rst:9596 ../../release_notes.rst:9647
#: ../../release_notes.rst:9742 ../../release_notes.rst:10008
#: ../../release_notes.rst:10159
msgid "Ignis 0.1"
msgstr ""

#: ../../release_notes.rst:9601 ../../release_notes.rst:9652
#: ../../release_notes.rst:9747 ../../release_notes.rst:10032
msgid "Aqua 0.5"
msgstr ""

#: ../../release_notes.rst:9603
msgid "``qiskit-aqua`` has been updated to ``0.5.3`` to fix code related to changes in how gates inverses are done."
msgstr ""

#: ../../release_notes.rst:9609
msgid "The ``IBMQProvider`` has been updated to version ``0.3.1`` to fix backward compatibility issues and work with the default 10 job limit in single calls to the IBM Q API v2."
msgstr ""

#: ../../release_notes.rst:9616
msgid "Qiskit 0.11"
msgstr ""

#: ../../release_notes.rst:9618
msgid "We have bumped up Qiskit minor version to 0.11 because IBM Q Provider has bumped up its minor version too. On Aer, we have jumped from 0.2.1 to 0.2.3 because there was an issue detected right after releasing 0.2.2 and before Qiskit 0.11 went online."
msgstr ""

#: ../../release_notes.rst:9632
msgid "New features"
msgstr ""

#: ../../release_notes.rst:9634
msgid "Added support for multi-controlled phase gates"
msgstr ""

#: ../../release_notes.rst:9635
msgid "Added optimized anti-diagonal single-qubit gates"
msgstr ""

#: ../../release_notes.rst:9638
msgid "Improvements"
msgstr ""

#: ../../release_notes.rst:9640
msgid "Introduced a technique called Fusion that increments performance of circuit execution Tuned threading strategy to gain performance in most common scenarios."
msgstr ""

#: ../../release_notes.rst:9642
msgid "Some of the already implemented error models have been polished."
msgstr ""

#: ../../release_notes.rst:9659
msgid "The ``IBMQProvider`` has been updated in order to default to use the new `IBM Q Experience v2 <https://quantum-computing.ibm.com>`__. Accessing the legacy IBM Q Experience v1 and QConsole will still be supported during the 0.3.x line until its final deprecation one month from the release. It is encouraged to update to the new IBM Q Experience to take advantage of the new functionality and features."
msgstr ""

#: ../../release_notes.rst:9666
msgid "Updating to the new IBM Q Experience v2"
msgstr ""

#: ../../release_notes.rst:9668
msgid "If you have credentials for the legacy IBM Q Experience stored on disk, you can make use of the interactive helper::"
msgstr ""

#: ../../release_notes.rst:9676
msgid "For more complex cases or fine tuning your configuration, the following methods are available:"
msgstr ""

#: ../../release_notes.rst:9679
msgid "the ``IBMQ.delete_accounts()`` can be used for resetting your configuration file."
msgstr ""

#: ../../release_notes.rst:9681
msgid "the ``IBMQ.save_account('MY_TOKEN')`` method can be used for saving your credentials, following the instructions in the `IBM Q Experience v2 <https://quantum-computing.ibm.com>`__ account page."
msgstr ""

#: ../../release_notes.rst:9686
msgid "Updating your programs"
msgstr ""

#: ../../release_notes.rst:9688
msgid "When using the new IBM Q Experience v2 through the provider, access to backends is done via individual ``provider`` instances (as opposed to accessing them directly through the ``qiskit.IBMQ`` object as in previous versions), which allows for more granular control over the project you are using."
msgstr ""

#: ../../release_notes.rst:9693
msgid "You can get a reference to the ``providers`` that you have access to using the ``IBMQ.providers()`` and ``IBMQ.get_provider()`` methods::"
msgstr ""

#: ../../release_notes.rst:9703
msgid "For convenience, ``IBMQ.load_account()`` and ``IBMQ.enable_account()`` will return a provider for the open access project, which is the default in the new IBM Q Experience v2."
msgstr ""

#: ../../release_notes.rst:9707
msgid "For example, the following program in previous versions::"
msgstr ""

#: ../../release_notes.rst:9715
msgid "Would be equivalent to the following program in the current version::"
msgstr ""

#: ../../release_notes.rst:9724
msgid "You can find more information and details in the `IBM Q Provider documentation <https://github.com/Qiskit/qiskit-ibmq-provider>`__."
msgstr ""

#: ../../release_notes.rst:9729
msgid "Qiskit 0.10"
msgstr ""

#: ../../release_notes.rst:9752
msgid "IBM Q Provider 0.2"
msgstr ""

#: ../../release_notes.rst:9757
msgid "The ``IBMQProvider`` supports connecting to the new version of the IBM Q API. Please note support for this version is still experimental :pull_ibmq-provider:`78`."
msgstr ""

#: ../../release_notes.rst:9759
msgid "Added support for Circuits through the new API :pull_ibmq-provider:`79`."
msgstr ""

#: ../../release_notes.rst:9765
msgid "Fixed incorrect parsing of some API hub URLs :pull_ibmq-provider:`77`."
msgstr ""

#: ../../release_notes.rst:9766
msgid "Fixed noise model handling for remote simulators :pull_ibmq-provider:`84`."
msgstr ""

#: ../../release_notes.rst:9771
msgid "Qiskit 0.9"
msgstr ""

#: ../../release_notes.rst:9779 ../../release_notes.rst:10550
#: ../../release_notes.rst:10758
msgid "Highlights"
msgstr ""

#: ../../release_notes.rst:9781
msgid "Introduction of the Pulse module under ``qiskit.pulse``, which includes tools for building pulse commands, scheduling them on pulse channels, visualization, and running them on IBM Q devices."
msgstr ""

#: ../../release_notes.rst:9784
msgid "Improved QuantumCircuit and Instruction classes, allowing for the composition of arbitrary sub-circuits into larger circuits, and also for creating parameterized circuits."
msgstr ""

#: ../../release_notes.rst:9787
msgid "A powerful Quantum Info module under ``qiskit.quantum_info``, providing tools to work with operators and channels and to use them inside circuits."
msgstr ""

#: ../../release_notes.rst:9789
msgid "New transpiler optimization passes and access to predefined transpiling routines."
msgstr ""

#: ../../release_notes.rst:9797
msgid "The core ``StochasticSwap`` routine is implemented in `Cython <https://cython.org/>`__."
msgstr ""

#: ../../release_notes.rst:9798
msgid "Added ``QuantumChannel`` classes for manipulating quantum channels and CPTP maps."
msgstr ""

#: ../../release_notes.rst:9800
msgid "Support for parameterized circuits."
msgstr ""

#: ../../release_notes.rst:9801
msgid "The ``PassManager`` interface has been improved and new functions added for easier interaction and usage with custom pass managers."
msgstr ""

#: ../../release_notes.rst:9803
msgid "Preset ``PassManager``\\s are now included which offer a predetermined pipeline of transpiler passes."
msgstr ""

#: ../../release_notes.rst:9805
msgid "User configuration files to let local environments override default values for some functions."
msgstr ""

#: ../../release_notes.rst:9807
msgid "New transpiler passes: ``EnlargeWithAncilla``, ``Unroll2Q``, ``NoiseAdaptiveLayout``, ``OptimizeSwapBeforeMeasure``, ``RemoveDiagonalGatesBeforeMeasure``, ``CommutativeCancellation``, ``Collect2qBlocks``, and ``ConsolidateBlocks``."
msgstr ""

#: ../../release_notes.rst:9814 ../../release_notes.rst:9998
#: ../../release_notes.rst:10021 ../../release_notes.rst:10098
#: ../../release_notes.rst:10220 ../../release_notes.rst:10534
#: ../../release_notes.rst:10572 ../../release_notes.rst:10776
msgid "Compatibility Considerations"
msgstr ""

#: ../../release_notes.rst:9816
msgid "As part of the 0.8 release the following things have been deprecated and will either be removed or changed in a backwards incompatible manner in a future release. While not strictly necessary these are things to adjust for before the 0.9 (unless otherwise noted) release to avoid a breaking change in the future."
msgstr ""

#: ../../release_notes.rst:9821
msgid "The methods prefixed by ``_get`` in the ``DAGCircuit`` object are being renamed without that prefix."
msgstr ""

#: ../../release_notes.rst:9823
msgid "Changed elements in ``couplinglist`` of ``CouplingMap`` from tuples to lists."
msgstr ""

#: ../../release_notes.rst:9824
msgid "Unroller bases must now be explicit, and violation raises an informative ``QiskitError``."
msgstr ""

#: ../../release_notes.rst:9826
msgid "The ``qiskit.tools.qcvv`` package is deprecated and will be removed in the in the future. You should migrate to using the Qiskit Ignis which replaces this module."
msgstr ""

#: ../../release_notes.rst:9829
msgid "The ``qiskit.compile()`` function is now deprecated in favor of explicitly using the ``qiskit.compiler.transpile()`` function to transform a circuit, followed by ``qiskit.compiler.assemble()`` to make a Qobj out of it. Instead of ``compile(...)``, use ``assemble(transpile(...), ...)``."
msgstr ""

#: ../../release_notes.rst:9833
msgid "``qiskit.converters.qobj_to_circuits()`` has been deprecated and will be removed in a future release. Instead ``qiskit.assembler.disassemble()`` should be used to extract ``QuantumCircuit`` objects from a compiled Qobj."
msgstr ""

#: ../../release_notes.rst:9837
msgid "The ``qiskit.mapper`` namespace has been deprecated. The ``Layout`` and ``CouplingMap`` classes can be accessed via ``qiskit.transpiler``."
msgstr ""

#: ../../release_notes.rst:9839
msgid "A few functions in ``qiskit.tools.qi.qi`` have been deprecated and moved to ``qiskit.quantum_info``."
msgstr ""

#: ../../release_notes.rst:9842
msgid "Please note that some backwards incompatible changes have been made during this release. The following notes contain information on how to adapt to these changes."
msgstr ""

#: ../../release_notes.rst:9847
msgid "IBM Q Provider"
msgstr ""

#: ../../release_notes.rst:9849
msgid "The IBM Q provider was previously included in Terra, but it has been split out into a separate package ``qiskit-ibmq-provider``. This will need to be installed, either via pypi with ``pip install qiskit-ibmq-provider`` or from source in order to access ``qiskit.IBMQ`` or ``qiskit.providers.ibmq``. If you install qiskit with ``pip install qiskit``, that will automatically install all subpackages of the Qiskit project."
msgstr ""

#: ../../release_notes.rst:9859
msgid "Cython Components"
msgstr ""

#: ../../release_notes.rst:9861
msgid "Starting in the 0.8 release the core stochastic swap routine is now implemented in `Cython <https://cython.org/>`__. This was done to significantly improve the performance of the swapper, however if you build Terra from source or run on a non-x86 or other platform without prebuilt wheels and install from source distribution you'll need to make sure that you have Cython installed prior to installing/building Qiskit Terra. This can easily be done with pip/pypi: ``pip install Cython``."
msgstr ""

#: ../../release_notes.rst:9872
msgid "Compiler Workflow"
msgstr ""

#: ../../release_notes.rst:9874
msgid "The ``qiskit.compile()`` function has been deprecated and replaced by first calling ``qiskit.compiler.transpile()`` to run optimization and mapping on a circuit, and then ``qiskit.compiler.assemble()`` to build a Qobj from that optimized circuit to send to a backend. While this is only a deprecation it will emit a warning if you use the old ``qiskit.compile()`` call."
msgstr ""

#: ../../release_notes.rst:9880
msgid "**transpile(), assemble(), execute() parameters**"
msgstr ""

#: ../../release_notes.rst:9882
msgid "These functions are heavily overloaded and accept a wide range of inputs. They can handle circuit and pulse inputs. All kwargs except for ``backend`` for these functions now also accept lists of the previously accepted types. The ``initial_layout`` kwarg can now be supplied as a both a list and dictionary, e.g. to map a Bell experiment on qubits 13 and 14, you can supply: ``initial_layout=[13, 14]`` or ``initial_layout={qr[0]: 13, qr[1]: 14}``"
msgstr ""

#: ../../release_notes.rst:9892
msgid "Qobj"
msgstr ""

#: ../../release_notes.rst:9894
msgid "The Qobj class has been split into two separate subclasses depending on the use case, either ``PulseQobj`` or ``QasmQobj`` for pulse and circuit jobs respectively. If you're interacting with Qobj directly you may need to adjust your usage accordingly."
msgstr ""

#: ../../release_notes.rst:9899
msgid "The ``qiskit.qobj.qobj_to_dict()`` is removed. Instead use the ``to_dict()`` method of a Qobj object."
msgstr ""

#: ../../release_notes.rst:9905
msgid "Visualization"
msgstr ""

#: ../../release_notes.rst:9907
msgid "The largest change to the visualization module is it has moved from ``qiskit.tools.visualization`` to ``qiskit.visualization``. This was done to indicate that the visualization module is more than just a tool. However, since this interface was declared stable in the 0.7 release the public interface off of ``qiskit.tools.visualization`` will continue to work. That may change in a future release, but it will be deprecated prior to removal if that happens."
msgstr ""

#: ../../release_notes.rst:9914
msgid "The previously deprecated functions, ``plot_circuit()``, ``latex_circuit_drawer()``, ``generate_latex_source()``, and ``matplotlib_circuit_drawer()`` from ``qiskit.tools.visualization`` have been removed. Instead of these functions, calling ``qiskit.visualization.circuit_drawer()`` with the appropriate arguments should be used."
msgstr ""

#: ../../release_notes.rst:9921
msgid "The previously deprecated ``plot_barriers`` and ``reverse_bits`` keys in the ``style`` kwarg dictionary are deprecated, instead the ``qiskit.visualization.circuit_drawer()`` kwargs ``plot_barriers`` and ``reverse_bits`` should be used."
msgstr ""

#: ../../release_notes.rst:9926
msgid "The Wigner plotting functions ``plot_wigner_function``, ``plot_wigner_curve``, ``plot_wigner_plaquette``, and ``plot_wigner_data`` previously in the ``qiskit.tools.visualization._state_visualization`` module have been removed. They were never exposed through the public stable interface and were not well documented. The code to use this feature can still be accessed through the qiskit-tutorials repository."
msgstr ""

#: ../../release_notes.rst:9936
msgid "Mapper"
msgstr ""

#: ../../release_notes.rst:9938
msgid "The public api from ``qiskit.mapper`` has been moved into ``qiskit.transpiler``. While it has only been deprecated in this release, it will be removed in the 0.9 release so updating your usage of ``Layout`` and ``CouplingMap`` to import from ``qiskit.transpiler`` instead of ``qiskit.mapper`` before that takes place will avoid any surprises in the future."
msgstr ""

#: ../../release_notes.rst:9955
msgid "Added multiplexer gate :pull_aer:`192`"
msgstr ""

#: ../../release_notes.rst:9956
msgid "Added ``remap_noise_model`` function to ``noise.utils`` :pull_aer:`181`"
msgstr ""

#: ../../release_notes.rst:9957
msgid "Added ``__eq__`` method to ``NoiseModel``, ``QuantumError``, ``ReadoutError`` :pull_aer:`181`"
msgstr ""

#: ../../release_notes.rst:9959
msgid "Added support for labelled gates in noise models :pull_aer:`175`"
msgstr ""

#: ../../release_notes.rst:9960
msgid "Added optimized ``mcx``, ``mcy``, ``mcz``, ``mcu1``, ``mcu2``, ``mcu3``, gates to ``QubitVector`` :pull_aer:`124`"
msgstr ""

#: ../../release_notes.rst:9962
msgid "Added optimized controlled-swap gate to ``QubitVector`` :pull_aer:`142`"
msgstr ""

#: ../../release_notes.rst:9963
msgid "Added gate-fusion optimization for ``QasmController``, which is enabled by setting ``fusion_enable=true`` :pull_aer:`136`"
msgstr ""

#: ../../release_notes.rst:9965
msgid "Added better management of failed simulations :pull_aer:`167`"
msgstr ""

#: ../../release_notes.rst:9966
msgid "Added qubits truncate optimization for unused qubits :pull_aer:`164`"
msgstr ""

#: ../../release_notes.rst:9967
msgid "Added ability to disable depolarizing error on device noise model :pull_aer:`131`"
msgstr ""

#: ../../release_notes.rst:9969
msgid "Added initialize simulator instruction to ``statevector_state`` :pull_aer:`117`, :pull_aer:`137`"
msgstr ""

#: ../../release_notes.rst:9971
msgid "Added coupling maps to simulators :pull_aer:`93`"
msgstr ""

#: ../../release_notes.rst:9972
msgid "Added circuit optimization framework :pull_aer:`83`"
msgstr ""

#: ../../release_notes.rst:9973
msgid "Added benchmarking :pull_aer:`71`, :pull_aer:`177`"
msgstr ""

#: ../../release_notes.rst:9974
msgid "Added wheels support for Debian-like distributions :pull_aer:`69`"
msgstr ""

#: ../../release_notes.rst:9975
msgid "Added autoconfiguration of threads for qasm simulator :pull_aer:`61`"
msgstr ""

#: ../../release_notes.rst:9976
msgid "Added Simulation method based on Stabilizer Rank Decompositions :pull_aer:`51`"
msgstr ""

#: ../../release_notes.rst:9977
msgid "Added ``basis_gates`` kwarg to ``NoiseModel`` init :pull_aer:`175`."
msgstr ""

#: ../../release_notes.rst:9978
msgid "Added an optional parameter to ``NoiseModel.as_dict()`` for returning dictionaries that can be serialized using the standard json library directly :pull_aer:`165`"
msgstr ""

#: ../../release_notes.rst:9981
msgid "Refactor thread management :pull_aer:`50`"
msgstr ""

#: ../../release_notes.rst:9982
msgid "Improve noise transformations :pull_aer:`162`"
msgstr ""

#: ../../release_notes.rst:9983
msgid "Improve error reporting :pull_aer:`160`"
msgstr ""

#: ../../release_notes.rst:9984
msgid "Improve efficiency of parallelization with ``max_memory_mb`` a new parameter of ``backend_opts`` :pull_aer:`61`"
msgstr ""

#: ../../release_notes.rst:9986
msgid "Improve u1 performance in ``statevector`` :pull_aer:`123`"
msgstr ""

#: ../../release_notes.rst:9992
msgid "Fixed OpenMP clashing problems on macOS for the Terra add-on :pull_aer:`46`"
msgstr ""

#: ../../release_notes.rst:10000
msgid "Deprecated ``\"initial_statevector\"`` backend option for ``QasmSimulator`` and ``StatevectorSimulator`` :pull_aer:`185`"
msgstr ""

#: ../../release_notes.rst:10002
msgid "Renamed ``\"chop_threshold\"`` backend option to ``\"zero_threshold\"`` and changed default value to 1e-10 :pull_aer:`185`"
msgstr ""

#: ../../release_notes.rst:10013
msgid "Quantum volume"
msgstr ""

#: ../../release_notes.rst:10014
msgid "Measurement mitigation using tensored calibrations"
msgstr ""

#: ../../release_notes.rst:10015
msgid "Simultaneous RB has the option to align Clifford gates across subsets"
msgstr ""

#: ../../release_notes.rst:10016
msgid "Measurement correction can produce a new calibration for a subset of qubits"
msgstr ""

#: ../../release_notes.rst:10023
msgid "RB writes to the minimal set of classical registers (it used to be Q[i]->C[i]). This change enables measurement correction with RB. Unless users had external analysis code, this will not change outcomes. RB circuits from 0.1 are not compatible with 0.1.1 fitters."
msgstr ""

#: ../../release_notes.rst:10037
msgid "Implementation of the HHL algorithm supporting ``LinearSystemInput``"
msgstr ""

#: ../../release_notes.rst:10038
msgid "Pluggable component ``Eigenvalues`` with variant ``EigQPE``"
msgstr ""

#: ../../release_notes.rst:10039
msgid "Pluggable component ``Reciprocal`` with variants ``LookupRotation`` and ``LongDivision``"
msgstr ""

#: ../../release_notes.rst:10041
msgid "Multiple-Controlled U1 and U3 operations ``mcu1`` and ``mcu3``"
msgstr ""

#: ../../release_notes.rst:10042
msgid "Pluggable component ``QFT`` derived from component ``IQFT``"
msgstr ""

#: ../../release_notes.rst:10043
msgid "Summarized the transpiled circuits at the DEBUG logging level"
msgstr ""

#: ../../release_notes.rst:10044
msgid "``QuantumInstance`` accepts ``basis_gates`` and ``coupling_map`` again."
msgstr ""

#: ../../release_notes.rst:10045
msgid "Support to use ``cx`` gate for the entanglement in ``RY`` and ``RYRZ`` variational form (``cz`` is the default choice)"
msgstr ""

#: ../../release_notes.rst:10047
msgid "Support to use arbitrary mixer Hamiltonian in QAOA, allowing use of QAOA in constrained optimization problems [arXiv:1709.03489]"
msgstr ""

#: ../../release_notes.rst:10049
msgid "Added variational algorithm base class ``VQAlgorithm``, implemented by ``VQE`` and ``QSVMVariational``"
msgstr ""

#: ../../release_notes.rst:10051
msgid "Added ``ising/docplex.py`` for automatically generating Ising Hamiltonian from optimization models of DOcplex"
msgstr ""

#: ../../release_notes.rst:10053
msgid "Added ``'basic-dirty-ancilla``' mode for ``mct``"
msgstr ""

#: ../../release_notes.rst:10054
msgid "Added ``mcmt`` for Multi-Controlled, Multi-Target gate"
msgstr ""

#: ../../release_notes.rst:10055
msgid "Exposed capabilities to generate circuits from logical AND, OR, DNF (disjunctive normal forms), and CNF (conjunctive normal forms) formulae"
msgstr ""

#: ../../release_notes.rst:10057
msgid "Added the capability to generate circuits from ESOP (exclusive sum of products) formulae with optional optimization based on Quine-McCluskey and ExactCover"
msgstr ""

#: ../../release_notes.rst:10059
msgid "Added ``LogicalExpressionOracle`` for generating oracle circuits from arbitrary Boolean logic expressions (including DIMACS support) with optional optimization capability"
msgstr ""

#: ../../release_notes.rst:10062
msgid "Added ``TruthTableOracle`` for generating oracle circuits from truth-tables with optional optimization capability"
msgstr ""

#: ../../release_notes.rst:10064
msgid "Added ``CustomCircuitOracle`` for generating oracle from user specified circuits"
msgstr ""

#: ../../release_notes.rst:10066
msgid "Added implementation of the Deutsch-Jozsa algorithm"
msgstr ""

#: ../../release_notes.rst:10067
msgid "Added implementation of the Bernstein-Vazirani algorithm"
msgstr ""

#: ../../release_notes.rst:10068
msgid "Added implementation of the Simon's algorithm"
msgstr ""

#: ../../release_notes.rst:10069
msgid "Added implementation of the Shor's algorithm"
msgstr ""

#: ../../release_notes.rst:10070
msgid "Added optional capability for Grover's algorithm to take a custom initial state (as opposed to the default uniform superposition)"
msgstr ""

#: ../../release_notes.rst:10072
msgid "Added capability to create a ``Custom`` initial state using existing circuit"
msgstr ""

#: ../../release_notes.rst:10074
msgid "Added the ADAM (and AMSGRAD) optimization algorithm"
msgstr ""

#: ../../release_notes.rst:10075
msgid "Multivariate distributions added, so uncertainty models now have univariate and multivariate distribution components"
msgstr ""

#: ../../release_notes.rst:10077
msgid "Added option to include or skip the swaps operations for qft and iqft circuit constructions"
msgstr ""

#: ../../release_notes.rst:10079
msgid "Added classical linear system solver ``ExactLSsolver``"
msgstr ""

#: ../../release_notes.rst:10080
msgid "Added parameters ``auto_hermitian`` and ``auto_resize`` to ``HHL`` algorithm to support non-Hermitian and non :math:`2^n` sized matrices by default"
msgstr ""

#: ../../release_notes.rst:10082
msgid "Added another feature map, ``RawFeatureVector``, that directly maps feature vectors to qubits' states for classification"
msgstr ""

#: ../../release_notes.rst:10084
msgid "``SVM_Classical`` can now load models trained by ``QSVM``"
msgstr ""

#: ../../release_notes.rst:10091
msgid "Fixed ``ising/docplex.py`` to correctly multiply constant values in constraints"
msgstr ""

#: ../../release_notes.rst:10092
msgid "Fixed package setup to correctly identify namespace packages using ``setuptools.find_namespace_packages``"
msgstr ""

#: ../../release_notes.rst:10100
msgid "``QuantumInstance`` does not take ``memory`` anymore."
msgstr ""

#: ../../release_notes.rst:10101
msgid "Moved command line and GUI to separate repo (``qiskit_aqua_uis``)"
msgstr ""

#: ../../release_notes.rst:10103
msgid "Removed the ``SAT``-specific oracle (now supported by ``LogicalExpressionOracle``)"
msgstr ""

#: ../../release_notes.rst:10105
msgid "Changed ``advanced`` mode implementation of ``mct``: using simple ``h`` gates instead of ``ch``, and fixing the old recursion step in ``_multicx``"
msgstr ""

#: ../../release_notes.rst:10107
msgid "Components ``random_distributions`` renamed to ``uncertainty_models``"
msgstr ""

#: ../../release_notes.rst:10108
msgid "Reorganized the constructions of various common gates (``ch``, ``cry``, ``mcry``, ``mct``, ``mcu1``, ``mcu3``, ``mcmt``, ``logic_and``, and ``logic_or``) and circuits (``PhaseEstimationCircuit``, ``BooleanLogicCircuits``, ``FourierTransformCircuits``, and ``StateVectorCircuits``) under the ``circuits`` directory"
msgstr ""

#: ../../release_notes.rst:10113
msgid "Renamed the algorithm ``QSVMVariational`` to ``VQC``, which stands for Variational Quantum Classifier"
msgstr ""

#: ../../release_notes.rst:10115
msgid "Renamed the algorithm ``QSVMKernel`` to ``QSVM``"
msgstr ""

#: ../../release_notes.rst:10116
msgid "Renamed the class ``SVMInput`` to ``ClassificationInput``"
msgstr ""

#: ../../release_notes.rst:10117
msgid "Renamed problem type ``'svm_classification'`` to ``'classification'``"
msgstr ""

#: ../../release_notes.rst:10118
msgid "Changed the type of ``entangler_map`` used in ``FeatureMap`` and ``VariationalForm`` to list of lists"
msgstr ""

#: ../../release_notes.rst:10124
msgid "IBM Q Provider 0.1"
msgstr ""

#: ../../release_notes.rst:10129
msgid "This is the first release as a standalone package. If you are installing Terra standalone you'll also need to install the ``qiskit-ibmq-provider`` package with ``pip install qiskit-ibmq-provider`` if you want to use the IBM Q backends."
msgstr ""

#: ../../release_notes.rst:10134
msgid "Support for non-Qobj format jobs has been removed from the provider. You'll have to convert submissions in an older format to Qobj before you can submit."
msgstr ""

#: ../../release_notes.rst:10142
msgid "Qiskit 0.8"
msgstr ""

#: ../../release_notes.rst:10144
msgid "In Qiskit 0.8 we introduced the Qiskit Ignis element. It also includes the Qiskit Terra element 0.7.1 release which contains a bug fix for the BasicAer Python simulator."
msgstr ""

#: ../../release_notes.rst:10149 ../../release_notes.rst:10174
msgid "Terra 0.7"
msgstr ""

#: ../../release_notes.rst:10154 ../../release_notes.rst:10456
msgid "Aer 0.1"
msgstr ""

#: ../../release_notes.rst:10161
msgid "This is the first release of Qiskit Ignis."
msgstr ""

#: ../../release_notes.rst:10167
msgid "Qiskit 0.7"
msgstr ""

#: ../../release_notes.rst:10169
msgid "In Qiskit 0.7 we introduced Qiskit Aer and combined it with Qiskit Terra."
msgstr ""

#: ../../release_notes.rst:10179
msgid "This release includes several new features and many bug fixes. With this release the interfaces for circuit diagram, histogram, bloch vectors, and state visualizations are declared stable. Additionally, this release includes a defined and standardized bit order/endianness throughout all aspects of Qiskit. These are all declared as stable interfaces in this release which won't have breaking changes made moving forward, unless there is appropriate and lengthy deprecation periods warning of any coming changes."
msgstr ""

#: ../../release_notes.rst:10187
msgid "There is also the introduction of the following new features:"
msgstr ""

#: ../../release_notes.rst:10189
msgid "A new ASCII art circuit drawing output mode"
msgstr ""

#: ../../release_notes.rst:10190
msgid "A new circuit drawing interface off of ``QuantumCircuit`` objects that enables calls of ``circuit.draw()`` or ``print(circuit)`` to render a drawing of circuits"
msgstr ""

#: ../../release_notes.rst:10193
msgid "A visualizer for drawing the DAG representation of a circuit"
msgstr ""

#: ../../release_notes.rst:10194
msgid "A new quantum state plot type for hinton diagrams in the local matplotlib based state plots"
msgstr ""

#: ../../release_notes.rst:10196
msgid "2 new constructor methods off the ``QuantumCircuit`` class ``from_qasm_str()`` and ``from_qasm_file()`` which let you easily create a circuit object from OpenQASM"
msgstr ""

#: ../../release_notes.rst:10199
msgid "A new function ``plot_bloch_multivector()`` to plot Bloch vectors from a tensored state vector or density matrix"
msgstr ""

#: ../../release_notes.rst:10201
msgid "Per-shot measurement results are available in simulators and select devices. These can be accessed by setting the ``memory`` kwarg to ``True`` when calling ``compile()`` or ``execute()`` and then accessed using the ``get_memory()`` method on the ``Result`` object."
msgstr ""

#: ../../release_notes.rst:10205
msgid "A ``qiskit.quantum_info`` module with revamped Pauli objects and methods for working with quantum states"
msgstr ""

#: ../../release_notes.rst:10207
msgid "New transpile passes for circuit analysis and transformation: ``CommutationAnalysis``, ``CommutationTransformation``, ``CXCancellation``, ``Decompose``, ``Unroll``, ``Optimize1QGates``, ``CheckMap``, ``CXDirection``, ``BarrierBeforeFinalMeasurements``"
msgstr ""

#: ../../release_notes.rst:10211
msgid "New alternative swap mapper passes in the transpiler: ``BasicSwap``, ``LookaheadSwap``, ``StochasticSwap``"
msgstr ""

#: ../../release_notes.rst:10213
msgid "More advanced transpiler infrastructure with support for analysis passes, transformation passes, a global ``property_set`` for the pass manager, and repeat-until control of passes"
msgstr ""

#: ../../release_notes.rst:10222
msgid "As part of the 0.7 release the following things have been deprecated and will either be removed or changed in a backwards incompatible manner in a future release. While not strictly necessary these are things to adjust for before the next release to avoid a breaking change."
msgstr ""

#: ../../release_notes.rst:10227
msgid "``plot_circuit()``, ``latex_circuit_drawer()``, ``generate_latex_source()``, and ``matplotlib_circuit_drawer()`` from qiskit.tools.visualization are deprecated. Instead the ``circuit_drawer()`` function from the same module should be used, there are kwarg options to mirror the functionality of all the deprecated functions."
msgstr ""

#: ../../release_notes.rst:10232
msgid "The current default output of ``circuit_drawer()`` (using latex and falling back on python) is deprecated and will be changed to just use the ``text`` output by default in future releases."
msgstr ""

#: ../../release_notes.rst:10235
msgid "The ``qiskit.wrapper.load_qasm_string()`` and ``qiskit.wrapper.load_qasm_file()`` functions are deprecated and the ``QuantumCircuit.from_qasm_str()`` and ``QuantumCircuit.from_qasm_file()`` constructor methods should be used instead."
msgstr ""

#: ../../release_notes.rst:10240
msgid "The ``plot_barriers`` and ``reverse_bits`` keys in the ``style`` kwarg dictionary are deprecated, instead the ``qiskit.tools.visualization.circuit_drawer()`` kwargs ``plot_barriers`` and ``reverse_bits`` should be used instead."
msgstr ""

#: ../../release_notes.rst:10244
msgid "The functions ``plot_state()`` and ``iplot_state()`` have been depreciated. Instead the functions ``plot_state_*()`` and ``iplot_state_*()`` should be called for the visualization method required."
msgstr ""

#: ../../release_notes.rst:10247
msgid "The ``skip_transpiler`` argument has been deprecated from ``compile()`` and ``execute()``. Instead you can use the ``PassManager`` directly, just set the ``pass_manager`` to a blank ``PassManager`` object with ``PassManager()``"
msgstr ""

#: ../../release_notes.rst:10250
msgid "The ``transpile_dag()`` function ``format`` kwarg for emitting different output formats is deprecated, instead you should convert the default output ``DAGCircuit`` object to the desired format."
msgstr ""

#: ../../release_notes.rst:10253
msgid "The unrollers have been deprecated, moving forward only DAG to DAG unrolling will be supported."
msgstr ""

#: ../../release_notes.rst:10256
msgid "Please note that some backwards-incompatible changes have been made during this release. The following notes contain information on how to adapt to these changes."
msgstr ""

#: ../../release_notes.rst:10261
msgid "Changes to Result objects"
msgstr ""

#: ../../release_notes.rst:10263
msgid "As part of the rewrite of the Results object to be more consistent and a stable interface moving forward a few changes have been made to how you access the data stored in the result object. First the ``get_data()`` method has been renamed to just ``data()``. Accompanying that change is a change in the data format returned by the function. It is now returning the raw data from the backends instead of doing any post-processing. For example, in previous versions you could call::"
msgstr ""

#: ../../release_notes.rst:10275
msgid "and that would return the unitary matrix like::"
msgstr ""

#: ../../release_notes.rst:10279
msgid "But now if you call (with the renamed method)::"
msgstr ""

#: ../../release_notes.rst:10283
msgid "it will return something like::"
msgstr ""

#: ../../release_notes.rst:10287
msgid "To get the post processed results in the same format as before the 0.7 release you must use the ``get_counts()``, ``get_statevector()``, and ``get_unitary()`` methods on the result object instead of ``get_data()['counts']``, ``get_data()['statevector']``, and ``get_data()['unitary']`` respectively."
msgstr ""

#: ../../release_notes.rst:10292
msgid "Additionally, support for ``len()`` and indexing on a ``Result`` object has been removed. Instead you should deal with the output from the post processed methods on the Result objects."
msgstr ""

#: ../../release_notes.rst:10296
msgid "Also, the ``get_snapshot()`` and ``get_snapshots()`` methods from the ``Result`` class have been removed. Instead you can access the snapshots using ``Result.data()['snapshots']``."
msgstr ""

#: ../../release_notes.rst:10302
msgid "Changes to Visualization"
msgstr ""

#: ../../release_notes.rst:10304
msgid "The largest change made to visualization in the 0.7 release is the removal of Matplotlib and other visualization dependencies from the project requirements. This was done to simplify the requirements and configuration required for installing Qiskit. If you plan to use any visualizations (including all the jupyter magics) except for the ``text``, ``latex``, and ``latex_source`` output for the circuit drawer you'll you must manually ensure that the visualization dependencies are installed. You can leverage the optional requirements to the Qiskit Terra package to do this::"
msgstr ""

#: ../../release_notes.rst:10315
msgid "Aside from this there have been changes made to several of the interfaces as part of the stabilization which may have an impact on existing code. The first is the ``basis`` kwarg in the ``circuit_drawer()`` function is no longer accepted. If you were relying on the ``circuit_drawer()`` to adjust the basis gates used in drawing a circuit diagram you will have to do this priort to calling ``circuit_drawer()``. For example::"
msgstr ""

#: ../../release_notes.rst:10325
msgid "will have to be adjusted to be::"
msgstr ""

#: ../../release_notes.rst:10334
msgid "Moving forward the ``circuit_drawer()`` function will be the sole interface for circuit drawing in the visualization module. Prior to the 0.7 release there were several other functions which either used different output backends or changed the output for drawing circuits. However, all those other functions have been deprecated and that functionality has been integrated as options on ``circuit_drawer()``."
msgstr ""

#: ../../release_notes.rst:10341
msgid "For the other visualization functions, ``plot_histogram()`` and ``plot_state()`` there are also a few changes to check when upgrading. First is the output from these functions has changed, in prior releases these would interactively show the output visualization. However that has changed to instead return a ``matplotlib.Figure`` object. This provides much more flexibility and options to interact with the visualization prior to saving or showing it. This will require adjustment to how these functions are consumed. For example, prior to this release when calling::"
msgstr ""

#: ../../release_notes.rst:10353
msgid "would open up new windows (depending on matplotlib backend) to display the visualization. However starting in the 0.7 you'll have to call ``show()`` on the output to mirror this behavior. For example::"
msgstr ""

#: ../../release_notes.rst:10360
msgid "or::"
msgstr ""

#: ../../release_notes.rst:10367
msgid "Note that this is only for when running outside of Jupyter. No adjustment is required inside a Jupyter environment because Jupyter notebooks natively understand how to render ``matplotlib.Figure`` objects."
msgstr ""

#: ../../release_notes.rst:10371
msgid "However, returning the Figure object provides additional flexibility for dealing with the output. For example instead of just showing the figure you can now directly save it to a file by leveraging the ``savefig()`` method. For example::"
msgstr ""

#: ../../release_notes.rst:10381
msgid "The other key aspect which has changed with these functions is when running under jupyter. In the 0.6 release ``plot_state()`` and ``plot_histogram()`` when running under jupyter the default behavior was to use the interactive Javascript plots if the externally hosted Javascript library for rendering the visualization was reachable over the network. If not it would just use the matplotlib version. However in the 0.7 release this no longer the case, and separate functions for the interactive plots, ``iplot_state()`` and ``iplot_histogram()`` are to be used instead. ``plot_state()`` and ``plot_histogram()`` always use the matplotlib versions."
msgstr ""

#: ../../release_notes.rst:10391
msgid "Additionally, starting in this release the ``plot_state()`` function is deprecated in favor of calling individual methods for each method of plotting a quantum state. While the ``plot_state()`` function will continue to work until the 0.9 release, it will emit a warning each time it is used. The"
msgstr ""

#: ../../release_notes.rst:10407
msgid "The same is true for the interactive JS equivalent, ``iplot_state()``. The function names are all the same, just with a prepended `i` for each function. For example, ``iplot_state(rho, method='paulivec')`` is ``iplot_state_paulivec(rho)``."
msgstr ""

#: ../../release_notes.rst:10413
msgid "Changes to Backends"
msgstr ""

#: ../../release_notes.rst:10415
msgid "With the improvements made in the 0.7 release there are a few things related to backends to keep in mind when upgrading. The biggest change is the restructuring of the provider instances in the root  ``qiskit``` namespace. The ``Aer`` provider is not installed by default and requires the installation of the ``qiskit-aer`` package. This package contains the new high performance fully featured simulator. If you installed via ``pip install qiskit`` you'll already have this installed. The python simulators are now available under ``qiskit.BasicAer`` and the old C++ simulators are available with ``qiskit.LegacySimulators``. This also means that the implicit fallback to python based simulators when the C++ simulators are not found doesn't exist anymore. If you ask for a local C++ based simulator backend, and it can't be found an exception will be raised instead of just using the python simulator instead."
msgstr ""

#: ../../release_notes.rst:10429
msgid "Additionally the previously deprecation top level functions ``register()`` and ``available_backends()`` have been removed. Also, the deprecated ``backend.parameters()`` and ``backend.calibration()`` methods have been removed in favor of ``backend.properties()``. You can refer to the 0.6 release notes section :ref:`backends` for more details on these changes."
msgstr ""

#: ../../release_notes.rst:10435
msgid "The ``backend.jobs()`` and ``backend.retrieve_jobs()`` calls no longer return results from those jobs. Instead you must call the ``result()`` method on the returned jobs objects."
msgstr ""

#: ../../release_notes.rst:10440
msgid "Changes to the compiler, transpiler, and unrollers"
msgstr ""

#: ../../release_notes.rst:10442
msgid "As part of an effort to stabilize the compiler interfaces there have been several changes to be aware of when leveraging the compiler functions. First it is important to note that the ``qiskit.transpiler.transpile()`` function now takes a QuantumCircuit object (or a list of them) and returns a QuantumCircuit object (or a list of them). The DAG processing is done internally now."
msgstr ""

#: ../../release_notes.rst:10449
msgid "You can also easily switch between circuits, DAGs, and Qobj now using the functions in ``qiskit.converters``."
msgstr ""

#: ../../release_notes.rst:10461
msgid "Aer provides three simulator backends:"
msgstr ""

#: ../../release_notes.rst:10463
msgid "``QasmSimulator``: simulate experiments and return measurement outcomes"
msgstr ""

#: ../../release_notes.rst:10464
msgid "``StatevectorSimulator``: return the final statevector for a quantum circuit acting on the all zero state"
msgstr ""

#: ../../release_notes.rst:10466
msgid "``UnitarySimulator``: return the unitary matrix for a quantum circuit"
msgstr ""

#: ../../release_notes.rst:10468
msgid "``noise`` module: contains advanced noise modeling features for the ``QasmSimulator``"
msgstr ""

#: ../../release_notes.rst:10471
msgid "``NoiseModel``, ``QuantumError``, ``ReadoutError`` classes for simulating a Qiskit quantum circuit in the presence of errors"
msgstr ""

#: ../../release_notes.rst:10473
msgid "``errors`` submodule including functions for generating ``QuantumError`` objects for the following types of quantum errors: Kraus, mixed unitary, coherent unitary, Pauli, depolarizing, thermal relaxation, amplitude damping, phase damping, combined phase and amplitude damping"
msgstr ""

#: ../../release_notes.rst:10477
msgid "``device`` submodule for automatically generating a noise model based on the ``BackendProperties`` of a device"
msgstr ""

#: ../../release_notes.rst:10480
msgid "``utils`` module:"
msgstr ""

#: ../../release_notes.rst:10482
msgid "``qobj_utils`` provides functions for directly modifying a Qobj to insert special simulator instructions not yet supported through the Qiskit Terra API."
msgstr ""

#: ../../release_notes.rst:10487
msgid "Aqua 0.4"
msgstr ""

#: ../../release_notes.rst:10492
msgid "Programmatic APIs for algorithms and components -- each component can now be instantiated and initialized via a single (non-empty) constructor call"
msgstr ""

#: ../../release_notes.rst:10494
msgid "``QuantumInstance`` API for algorithm/backend decoupling -- ``QuantumInstance`` encapsulates a backend and its settings"
msgstr ""

#: ../../release_notes.rst:10496
msgid "Updated documentation and Jupyter Notebooks illustrating the new programmatic APIs"
msgstr ""

#: ../../release_notes.rst:10498
msgid "Transparent parallelization for gradient-based optimizers"
msgstr ""

#: ../../release_notes.rst:10499
msgid "Multiple-Controlled-NOT (cnx) operation"
msgstr ""

#: ../../release_notes.rst:10500
msgid "Pluggable algorithmic component ``RandomDistribution``"
msgstr ""

#: ../../release_notes.rst:10501
msgid "Concrete implementations of ``RandomDistribution``: ``BernoulliDistribution``, ``LogNormalDistribution``, ``MultivariateDistribution``, ``MultivariateNormalDistribution``, ``MultivariateUniformDistribution``, ``NormalDistribution``, ``UniformDistribution``, and ``UnivariateDistribution``"
msgstr ""

#: ../../release_notes.rst:10506
msgid "Concrete implementations of ``UncertaintyProblem``: ``FixedIncomeExpectedValue``, ``EuropeanCallExpectedValue``, and ``EuropeanCallDelta``"
msgstr ""

#: ../../release_notes.rst:10509
msgid "Amplitude Estimation algorithm"
msgstr ""

#: ../../release_notes.rst:10510
msgid "Qiskit Optimization: New Ising models for optimization problems exact cover, set packing, vertex cover, clique, and graph partition"
msgstr ""

#: ../../release_notes.rst:10512
msgid "Qiskit AI:"
msgstr ""

#: ../../release_notes.rst:10514
msgid "New feature maps extending the ``FeatureMap`` pluggable interface: ``PauliExpansion`` and ``PauliZExpansion``"
msgstr ""

#: ../../release_notes.rst:10516
msgid "Training model serialization/deserialization mechanism"
msgstr ""

#: ../../release_notes.rst:10518
msgid "Qiskit Finance:"
msgstr ""

#: ../../release_notes.rst:10520
msgid "Amplitude estimation for Bernoulli random variable: illustration of amplitude estimation on a single qubit problem"
msgstr ""

#: ../../release_notes.rst:10522
msgid "Loading of multiple univariate and multivariate random distributions"
msgstr ""

#: ../../release_notes.rst:10523
msgid "European call option: expected value and delta (using univariate distributions)"
msgstr ""

#: ../../release_notes.rst:10525
msgid "Fixed income asset pricing: expected value (using multivariate distributions)"
msgstr ""

#: ../../release_notes.rst:10528
msgid "The Pauli string in ``Operator`` class is aligned with Terra 0.7. Now the order of a n-qubit pauli string is ``q_{n-1}...q{0}`` Thus, the (de)serialier (``save_to_dict`` and ``load_from_dict``) in the ``Operator`` class are also changed to adopt the changes of ``Pauli`` class."
msgstr ""

#: ../../release_notes.rst:10536
msgid "``HartreeFock`` component of pluggable type ``InitialState`` moved to Qiskit Chemistry"
msgstr ""

#: ../../release_notes.rst:10538
msgid "``UCCSD`` component of pluggable type ``VariationalForm`` moved to Qiskit Chemistry"
msgstr ""

#: ../../release_notes.rst:10544
msgid "Qiskit 0.6"
msgstr ""

#: ../../release_notes.rst:10547
msgid "Terra 0.6"
msgstr ""

#: ../../release_notes.rst:10552
msgid "This release includes a redesign of internal components centered around a new, formal communication format (Qobj), along with long awaited features to improve the user experience as a whole. The highlights, compared to the 0.5 release, are:"
msgstr ""

#: ../../release_notes.rst:10557
msgid "Improvements for inter-operability (based on the Qobj specification) and extensibility (facilities for extending Qiskit with new backends in a seamless way)"
msgstr ""

#: ../../release_notes.rst:10560
msgid "New options for handling credentials and authentication for the IBM Q backends, aimed at simplifying the process and supporting automatic loading of user credentials"
msgstr ""

#: ../../release_notes.rst:10563
msgid "A revamp of the visualization utilities: stylish interactive visualizations are now available for Jupyter users, along with refinements for the circuit drawer (including a matplotlib-based version)"
msgstr ""

#: ../../release_notes.rst:10566
msgid "Performance improvements centered around circuit transpilation: the basis for a more flexible and modular architecture have been set, including parallelization of the circuit compilation and numerous optimizations"
msgstr ""

#: ../../release_notes.rst:10574
msgid "Please note that some backwards-incompatible changes have been introduced during this release -- the following notes contain information on how to adapt to the new changes."
msgstr ""

#: ../../release_notes.rst:10579
msgid "Removal of ``QuantumProgram``"
msgstr ""

#: ../../release_notes.rst:10581
msgid "As hinted during the 0.5 release, the deprecation of the  ``QuantumProgram`` class has now been completed and is no longer available, in favor of working with the individual components (:class:`~qiskit.backends.basejob.BaseJob`, :class:`~qiskit._quantumcircuit.QuantumCircuit`, :class:`~qiskit._classicalregister.ClassicalRegister`, :class:`~qiskit._quantumregister.QuantumRegister`, :mod:`~qiskit`) directly."
msgstr ""

#: ../../release_notes.rst:10589
msgid "Please check the :ref:`0.5 release notes <quantum-program-0-5>` and the examples for details about the transition::"
msgstr ""

#: ../../release_notes.rst:10614
msgid "IBM Q Authentication and ``Qconfig.py``"
msgstr ""

#: ../../release_notes.rst:10616
msgid "The managing of credentials for authenticating when using the IBM Q backends has been expanded, and there are new options that can be used for convenience:"
msgstr ""

#: ../../release_notes.rst:10619
msgid "save your credentials in disk once, and automatically load them in future sessions. This provides a one-off mechanism::"
msgstr ""

#: ../../release_notes.rst:10625
msgid "afterwards, your credentials can be automatically loaded from disk by invoking :meth:`~qiskit.backends.ibmq.ibmqprovider.IBMQ.load_accounts`::"
msgstr ""

#: ../../release_notes.rst:10631
msgid "or you can load only specific accounts if you only want to use those in a session::"
msgstr ""

#: ../../release_notes.rst:10635
msgid "use environment variables. If ``QE_TOKEN`` and ``QE_URL`` is set, the ``IBMQ.load_accounts()`` call will automatically load the credentials from them."
msgstr ""

#: ../../release_notes.rst:10639
msgid "Additionally, the previous method of having a ``Qconfig.py`` file in the program folder and passing the credentials explicitly is still supported."
msgstr ""

#: ../../release_notes.rst:10646
msgid "Working with backends"
msgstr ""

#: ../../release_notes.rst:10648
msgid "A new mechanism has been introduced in Terra 0.6 as the recommended way for obtaining a backend, allowing for more powerful and unified filtering and integrated with the new credentials system. The previous top-level methods :meth:`~qiskit.wrapper._wrapper.register`, :meth:`~qiskit.wrapper._wrapper.available_backends` and :meth:`~qiskit.wrapper._wrapper.get_backend` are still supported, but will deprecated in upcoming versions in favor of using the `qiskit.IBMQ` and `qiskit.Aer` objects directly, which allow for more complex filtering."
msgstr ""

#: ../../release_notes.rst:10657
msgid "For example, to list and use a local backend::"
msgstr ""

#: ../../release_notes.rst:10664
msgid "And for listing and using remote backends::"
msgstr ""

#: ../../release_notes.rst:10672
msgid "Please note as well that the names of the local simulators have been simplified. The previous names can still be used, but it is encouraged to use the new, shorter names:"
msgstr ""

#: ../../release_notes.rst:10677 ../../release_notes.rst:10714
msgid "Qiskit Terra 0.5"
msgstr ""

#: ../../release_notes.rst:10679
msgid "'local_qasm_simulator'"
msgstr ""

#: ../../release_notes.rst:10679
msgid "'qasm_simulator'"
msgstr ""

#: ../../release_notes.rst:10680
msgid "'local_statevector_simulator'"
msgstr ""

#: ../../release_notes.rst:10680
msgid "'statevector_simulator'"
msgstr ""

#: ../../release_notes.rst:10681
msgid "'local_unitary_simulator_py'"
msgstr ""

#: ../../release_notes.rst:10681
msgid "'unitary_simulator'"
msgstr ""

#: ../../release_notes.rst:10686
msgid "Backend and Job API changes"
msgstr ""

#: ../../release_notes.rst:10688
msgid "Jobs submitted to IBM Q backends have improved capabilities. It is possible to cancel them and replenish credits (``job.cancel()``), and to retrieve previous jobs executed on a specific backend either by job id (``backend.retrieve_job(job_id)``) or in batch of latest jobs (``backend.jobs(limit)``)"
msgstr ""

#: ../../release_notes.rst:10694
msgid "Properties for checking each individual job status (``queued``, ``running``, ``validating``, ``done`` and ``cancelled``) no longer exist. If you want to check the job status, use the identity comparison against ``job.status``::"
msgstr ""

#: ../../release_notes.rst:10705
msgid "Please consult the new documentation of the :class:`~qiskit.backends.ibmq.ibmqjob.IBMQJob` class to get further insight in how to use the simplified API."
msgstr ""

#: ../../release_notes.rst:10709
msgid "A number of members of :class:`~qiskit.backends.basebackend.BaseBackend` and :class:`~qiskit.backends.basejob.BaseJob` are no longer properties, but methods, and as a result they need to be invoked as functions."
msgstr ""

#: ../../release_notes.rst:10716
msgid "backend.name"
msgstr ""

#: ../../release_notes.rst:10716
msgid "backend.name()"
msgstr ""

#: ../../release_notes.rst:10717
msgid "backend.status"
msgstr ""

#: ../../release_notes.rst:10717
msgid "backend.status()"
msgstr ""

#: ../../release_notes.rst:10718
msgid "backend.configuration"
msgstr ""

#: ../../release_notes.rst:10718
msgid "backend.configuration()"
msgstr ""

#: ../../release_notes.rst:10719
msgid "backend.calibration"
msgstr ""

#: ../../release_notes.rst:10719
msgid "backend.properties()"
msgstr ""

#: ../../release_notes.rst:10720
msgid "backend.parameters"
msgstr ""

#: ../../release_notes.rst:10720
msgid "backend.jobs() backend.retrieve_job(job_id)"
msgstr ""

#: ../../release_notes.rst:10722
msgid "job.status"
msgstr ""

#: ../../release_notes.rst:10722
msgid "job.status()"
msgstr ""

#: ../../release_notes.rst:10723
msgid "job.cancelled"
msgstr ""

#: ../../release_notes.rst:10723
msgid "job.queue_position()"
msgstr ""

#: ../../release_notes.rst:10724
msgid "job.running"
msgstr ""

#: ../../release_notes.rst:10724
msgid "job.cancel()"
msgstr ""

#: ../../release_notes.rst:10725
msgid "job.queued"
msgstr ""

#: ../../release_notes.rst:10726
msgid "job.done"
msgstr ""

#: ../../release_notes.rst:10731
msgid "Better Jupyter tools"
msgstr ""

#: ../../release_notes.rst:10733
msgid "The new release contains improvements to the user experience while using Jupyter notebooks."
msgstr ""

#: ../../release_notes.rst:10736
msgid "First, new interactive visualizations of counts histograms and quantum states are provided: :meth:`~qiskit.tools.visualization.plot_histogram` and :meth:`~qiskit.tools.visualization.plot_state`. These methods will default to the new interactive kind when the environment is Jupyter and internet connection exists."
msgstr ""

#: ../../release_notes.rst:10743
#, python-format
msgid "Secondly, the new release provides Jupyter cell magics for keeping track of the progress of your code. Use ``%%qiskit_job_status`` to keep track of the status of submitted jobs to IBM Q backends. Use ``%%qiskit_progress_bar`` to keep track of the progress of compilation/execution."
msgstr ""

#: ../../release_notes.rst:10752
msgid "Qiskit 0.5"
msgstr ""

#: ../../release_notes.rst:10755
msgid "Terra 0.5"
msgstr ""

#: ../../release_notes.rst:10760
msgid "This release brings a number of improvements to Qiskit, both for the user experience and under the hood. Please refer to the full changelog for a detailed description of the changes - the highlights are:"
msgstr ""

#: ../../release_notes.rst:10764
msgid "new ``statevector`` :mod:`simulators <qiskit.backends.local>` and feature and performance improvements to the existing ones (in particular to the C++ simulator), along with a reorganization of how to work with backends focused on extensibility and flexibility (using aliases and backend providers)"
msgstr ""

#: ../../release_notes.rst:10768
msgid "reorganization of the asynchronous features, providing a friendlier interface for running jobs asynchronously via :class:`Job` instances"
msgstr ""

#: ../../release_notes.rst:10770
msgid "numerous improvements and fixes throughout the Terra as a whole, both for convenience of the users (such as allowing anonymous registers) and for enhanced functionality (such as improved plotting of circuits)"
msgstr ""

#: ../../release_notes.rst:10778
msgid "Please note that several backwards-incompatible changes have been introduced during this release as a result of the ongoing development. While some of these features will continue to be supported during a period of time before being fully deprecated, it is recommended to update your programs in order to prepare for the new versions and take advantage of the new functionality."
msgstr ""

#: ../../release_notes.rst:10788
msgid "``QuantumProgram`` changes"
msgstr ""

#: ../../release_notes.rst:10790
msgid "Several methods of the :class:`~qiskit.QuantumProgram` class are on their way to being deprecated:"
msgstr ""

#: ../../release_notes.rst:10793
msgid "methods for interacting **with the backends and the API**:"
msgstr ""

#: ../../release_notes.rst:10795
msgid "The recommended way for opening a connection to the IBM Q API and for using the backends is through the top-level functions directly instead of the ``QuantumProgram`` methods. In particular, the :func:`qiskit.register` method provides the equivalent of the previous :func:`qiskit.QuantumProgram.set_api` call. In a similar vein, there is a new :func:`qiskit.available_backends`, :func:`qiskit.get_backend` and related functions for querying the available backends directly. For example, the following snippet for version 0.4::"
msgstr ""

#: ../../release_notes.rst:10812 ../../release_notes.rst:10830
msgid "would be equivalent to the following snippet for version 0.5::"
msgstr ""

#: ../../release_notes.rst:10821
msgid "methods for **compiling and executing programs**:"
msgstr ""

#: ../../release_notes.rst:10823
msgid "The top-level functions now also provide equivalents for the :func:`qiskit.QuantumProgram.compile` and :func:`qiskit.QuantumProgram.execute` methods. For example, the following snippet from version 0.4::"
msgstr ""

#: ../../release_notes.rst:10836
msgid "In general, from version 0.5 onwards we encourage to try to make use of the individual objects and classes directly instead of relying on ``QuantumProgram``. For example, a :class:`~qiskit.QuantumCircuit` can be instantiated and constructed by appending :class:`~qiskit.QuantumRegister`, :class:`~qiskit.ClassicalRegister`, and gates directly. Please check the update example in the Quickstart section, or the ``using_qiskit_core_level_0.py`` and ``using_qiskit_core_level_1.py`` examples on the main repository."
msgstr ""

#: ../../release_notes.rst:10846
msgid "Backend name changes"
msgstr ""

#: ../../release_notes.rst:10848
msgid "In order to provide a more extensible framework for backends, there have been some design changes accordingly:"
msgstr ""

#: ../../release_notes.rst:10851
msgid "**local simulator names**"
msgstr ""

#: ../../release_notes.rst:10853
msgid "The names of the local simulators have been homogenized in order to follow the same pattern: ``PROVIDERNAME_TYPE_simulator_LANGUAGEORPROJECT`` - for example, the C++ simulator previously named ``local_qiskit_simulator`` is now ``local_qasm_simulator_cpp``. An overview of the current simulators:"
msgstr ""

#: ../../release_notes.rst:10859
msgid "``QASM`` simulator is supposed to be like an experiment. You apply a circuit on some qubits, and observe measurement results - and you repeat for many shots to get a histogram of counts via ``result.get_counts()``."
msgstr ""

#: ../../release_notes.rst:10862
msgid "``Statevector`` simulator is to get the full statevector (:math:`2^n` amplitudes) after evolving the zero state through the circuit, and can be obtained via ``result.get_statevector()``."
msgstr ""

#: ../../release_notes.rst:10865
msgid "``Unitary`` simulator is to get the unitary matrix equivalent of the circuit, returned via ``result.get_unitary()``."
msgstr ""

#: ../../release_notes.rst:10867
msgid "In addition, you can get intermediate states from a simulator by applying a ``snapshot(slot)`` instruction at various spots in the circuit. This will save the current state of the simulator in a given slot, which can later be retrieved via ``result.get_snapshot(slot)``."
msgstr ""

#: ../../release_notes.rst:10872
msgid "**backend aliases**:"
msgstr ""

#: ../../release_notes.rst:10874
msgid "The SDK now provides an \"alias\" system that allows for automatically using the most performant simulator of a specific type, if it is available in your system. For example, with the following snippet::"
msgstr ""

#: ../../release_notes.rst:10882
msgid "the backend will be the C++ statevector simulator if available, falling back to the Python statevector simulator if not present."
msgstr ""

#: ../../release_notes.rst:10886
msgid "More flexible names and parameters"
msgstr ""

#: ../../release_notes.rst:10888
msgid "Several functions of the SDK have been made more flexible and user-friendly:"
msgstr ""

#: ../../release_notes.rst:10890
msgid "**automatic circuit and register names**"
msgstr ""

#: ../../release_notes.rst:10892
msgid ":class:`qiskit.ClassicalRegister`, :class:`qiskit.QuantumRegister` and :class:`qiskit.QuantumCircuit` can now be instantiated without explicitly giving them a name - a new autonaming feature will automatically assign them an identifier::"
msgstr ""

#: ../../release_notes.rst:10899
msgid "Please note as well that the order of the parameters have been swapped ``QuantumRegister(size, name)``."
msgstr ""

#: ../../release_notes.rst:10902
msgid "**methods accepting names or instances**"
msgstr ""

#: ../../release_notes.rst:10904
msgid "In combination with the autonaming changes, several methods such as :func:`qiskit.Result.get_data` now accept both names and instances for convenience. For example, when retrieving the results for a job that has a single circuit such as::"
msgstr ""

#: ../../release_notes.rst:10913
msgid "The following calls are equivalent::"
msgstr ""

