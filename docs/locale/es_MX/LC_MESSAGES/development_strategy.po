msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-08 17:23+0000\n"
"PO-Revision-Date: 2021-02-20 22:38\n"
"Last-Translator: \n"
"Language-Team: Spanish, Mexico\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-MX\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/development_strategy.po\n"
"X-Crowdin-File-ID: 7206\n"
"Language: es_MX\n"

#: ../../development_strategy.rst:2
msgid "Development Strategy"
msgstr "Estrategia de Desarrollo"

#: ../../development_strategy.rst:7
msgid "Versioning"
msgstr "Versionado"

#: ../../development_strategy.rst:9
msgid "The Qiskit project is made up of several elements each performing different functionality. Each is independently useful and can be used on their own, but for convenience we provide this repository and meta-package to provide a single entrypoint to install all the elements at once. This is to simplify the install process and provide a unified interface to end users. However, because each Qiskit element has it's own releases and versions some care is needed when dealing with versions between the different repositories. This document outlines the guidelines for dealing with versions and releases of both Qiskit elements and the meta-package."
msgstr ""

#: ../../development_strategy.rst:19
msgid "For the rest of this guide the standard Semantic Versioning nomenclature will be used of: ``Major.Minor.Patch`` to refer to the different components of a version number. For example, if the version number was ``0.7.1``, then the major version is ``0``, the minor version ``7``, and the patch version ``1``."
msgstr ""

#: ../../development_strategy.rst:26
msgid "Meta-package Version"
msgstr ""

#: ../../development_strategy.rst:28
msgid "The Qiskit meta-package version is an independent value that is determined by the releases of each of the elements being tracked. Each time we push a release to a tracked component (or add an element) the meta-package requirements, and version will need to be updated and a new release published. The timing should be coordinated with the release of elements to ensure that the meta-package releases track with element releases."
msgstr ""

#: ../../development_strategy.rst:36
msgid "Adding New Elements"
msgstr "Agregando Nuevos Elementos"

#: ../../development_strategy.rst:38
msgid "When a new Qiskit element is being added to the meta-package requirements, we need to increase the **Minor** version of the meta-package."
msgstr ""

#: ../../development_strategy.rst:41
msgid "For example, if the meta-package is tracking 2 elements ``qiskit-aer`` and ``qiskit-terra`` and it's version is ``0.7.4``. Then we release a new element ``qiskit-ignis`` that we intend to also have included in the meta-package. When we add the new element to the meta-package we increase the version to ``0.8.0``."
msgstr ""

#: ../../development_strategy.rst:49
msgid "Patch Version Increases"
msgstr ""

#: ../../development_strategy.rst:51
msgid "When any Qiskit element that is being already tracked by the meta-package releases a patch version to fix bugs in a release we need also bump the requirement in the setup.py and then increase the patch version of the meta-package."
msgstr ""

#: ../../development_strategy.rst:56
msgid "For example, if the meta-package is tracking 3 elements ``qiskit-terra==0.8.1``, ``qiskit-aer==0.2.1``, and ``qiskit-ignis==0.1.4`` with the current version ``0.9.6``. When qiskit-terra release a new patch version to fix a bug ``0.8.2`` the meta-package will also need to increase it's patch version and release, becoming ``0.9.7``."
msgstr ""

#: ../../development_strategy.rst:62
msgid "Additionally, there are occasionally packaging or other bugs in the meta-package itself that need to be fixed by pushing new releases. When those are encountered we should increase the patch version to differentiate it from the broken release. Do **not** delete the broken or any old releases from pypi in any situation, instead just increase the patch version and upload a new release."
msgstr ""

#: ../../development_strategy.rst:71
msgid "Minor Version Increases"
msgstr ""

#: ../../development_strategy.rst:73
msgid "Besides adding a new element to the meta-package the minor version of the meta-package should also be increased anytime a minor version is increased in a tracked element."
msgstr ""

#: ../../development_strategy.rst:77
msgid "For example, if the meta-package is tracking 2 elements ``qiskit-terra==0.7.0`` and ``qiskit-aer==0.1.1`` and the current version is ``0.7.5``. When the ``qiskit-aer`` element releases ``0.2.0`` then we need to increase the meta-package version to be ``0.8.0`` to correspond to the new release."
msgstr ""

#: ../../development_strategy.rst:84
msgid "Major Version Increases"
msgstr ""

#: ../../development_strategy.rst:86
msgid "The major version is different from the other version number components. Unlike the other version number components, which are updated in lock step with each tracked element, the major version is only increased when all tracked versions are bumped (at least before ``1.0.0``). Right now all the elements still have a major version number component of ``0`` and until each tracked element in the meta-repository is marked as stable by bumping the major version to be ``>=1`` then the meta-package version should not increase the major version."
msgstr ""

#: ../../development_strategy.rst:94
msgid "The behavior of the major version number component tracking after when all the elements are at >=1.0.0 has not been decided yet."
msgstr ""

#: ../../development_strategy.rst:99
msgid "Qiskit Element Requirement Tracking"
msgstr ""

#: ../../development_strategy.rst:101
msgid "While not strictly related to the meta-package and Qiskit versioning how we track the element versions in the meta-package's requirements list is important. Each element listed in the setup.py should be pinned to a single version. This means that each version of Qiskit should only install a single version for each tracked element. For example, the requirements list at any given point should look something like::"
msgstr ""

#: ../../development_strategy.rst:113
msgid "This is to aid in debugging, but also make tracking the versions across multiple elements more transparent."
msgstr "Esto es para ayudar en la depuración, pero también para hacer más transparente el seguimiento de las versiones a través de múltiples elementos."

#: ../../development_strategy.rst:116
msgid "It is also worth pointing out that the order we install the elements is critically important too. ``pip`` does not have a real dependency solver which means the installation order matters. So if there are overlapping requirements versions between elements or dependencies between elements we need to ensure that the order in the requirements list installs everything as expected. If the order needs to be change for some install time incompatibility it should be noted clearly."
msgstr ""

#: ../../development_strategy.rst:125
msgid "Community Extensions"
msgstr "Extensiones de Comunidad"

#: ../../development_strategy.rst:127
msgid "Qiskit has been designed with modularity in mind. It is extensible in many different ways; on the page, we highlight the ways in which the Qiskit community has engaged with Qiskit and developed extensions and packages on top of it."
msgstr ""

#: ../../development_strategy.rst:132
msgid "Providers"
msgstr "Proveedores"

#: ../../development_strategy.rst:134
msgid "The Qiskit base provider is an entity that provides access to a group of different backends (for example, backends available through IBM Quantum). It interacts with those backends to do many things: find out which ones are available, retrieve an instance of a particular backend, get backend properties and configurations, and handling running and working with jobs."
msgstr "El proveedor base de Qiskit es una entidad que proporciona acceso a un grupo de diferentes backends (por ejemplo, backends disponibles a través de IBM Quantum). Interactúa con esos backends para hacer muchas cosas: averiguar cuáles están disponibles, obtener una instancia de un backend en particular, obtener propiedades y configuraciones del backend, y manejar ejecución y funcionamiento de los trabajos."

#: ../../development_strategy.rst:141
msgid "Additional providers"
msgstr "Proveedores Adicionales"

#: ../../development_strategy.rst:143
msgid "**Decision diagram-based quantum simulator**"
msgstr "**Simulador cuántico basado en diagramas de decisión**"

#: ../../development_strategy.rst
msgid "- **Organization:** Johannes Kepler University, Linz, Austria (Alwin Zulehner and Robert Wille)"
msgstr "**Organización:** Universidad Johannes Kepler, Linz, Austria (Alwin Zulehner y Robert Wille)"

#: ../../development_strategy.rst
msgid "- **Description:** A local provider which allows Qiskit to use decision diagram-based quantum simulation"
msgstr "- **Descripción:** Un proveedor local que permite a Qiskit utilizar la simulación cuántica basada en diagramas de decisión"

#: ../../development_strategy.rst
msgid "- **Qiskit Version:** 0.7"
msgstr ""

#: ../../development_strategy.rst
msgid "- **More info:**  `Webpage at JKU <http://iic.jku.at/eda/research/quantum_simulation>`__, `Medium Blog <https://medium.com/qiskit/classical-simulators-for-quantum-computers-4b994dad4fa2>`__ and `GitHub Repo <https://github.com/Qiskit/qiskit-jku-provider>`__"
msgstr "- **Más información:** `Página web en JKU <http://iic.jku.at/eda/research/quantum_simulation>`__, `Blog de Medium <https://medium.com/qiskit/classical-simulators-for-quantum-computers-4b994dad4fa2>`__ y `Repositorio de GitHub <https://github.com/Qiskit/qiskit-jku-provider>`__"

#: ../../development_strategy.rst:154
msgid "**Quantum Inspire**"
msgstr "**Quantum Inspire**"

#: ../../development_strategy.rst
msgid "- **Organization:** QuTech-Delft"
msgstr "- **Organización:** QuTech-Delft"

#: ../../development_strategy.rst
msgid "- **Description:** A provider for the Quantum Inspire backend"
msgstr "- **Descripción:** Un proveedor para el backend Quantum Inspire"

#: ../../development_strategy.rst
msgid "- **More info:** `Medium Blog <https://medium.com/qiskit/quantum-inspire-and-qiskit-f1be608f8955>`__ and `GitHub <https://github.com/QuTech-Delft/quantuminspire>`__."
msgstr "- **Más información:** `Blog de Medium <https://medium.com/qiskit/quantum-inspire-and-qiskit-f1be608f8955>`__ y `GitHub <https://github.com/QuTech-Delft/quantuminspire>`__."

#: ../../development_strategy.rst:164
msgid "Transpiler"
msgstr "Transpilador"

#: ../../development_strategy.rst:166
msgid "Circuit optimization is at the heart of making quantum computing feasible on actual hardware. A central component of Qiskit is the transpiler, which is a framework for manipulating quantum circuits according to certain transformations (known as transpiler passes). The transpiler enables users to create customized sets of passes, orchestrated by a pass manager, to transform the circuit according to the rules specified by the passes. In addition, the transpiler architecture is designed for modularity and extensibility, enabling Qiskit users to write their own passes, use them in the pass manager, and combine them with existing passes. In this way, the transpiler architecture opens up the door for research into aggressive optimization of quantum circuits."
msgstr "La optimización de circuitos está en el centro de la factibilidad de la computación cuántica en el hardware real. Un componente central de Qiskit es el transpilador, que es un marco para manipular los circuitos cuánticos de acuerdo a ciertas transformaciones (conocidas como pases). El transpilador permite a los usuarios crear conjuntos de pases personalizados, orquestados por un gestor de pases, para transformar el circuito de acuerdo con las reglas especificadas por los pases. Además, la arquitectura del transpilador está diseñada para ser modular y extensible, permitiendo a los usuarios de Qiskit escribir sus propios pases, utilizarlos en el gestor de pases y combinarlos con los pases existentes. De este modo, la arquitectura del transpilador abre la puerta a la investigación de una optimización agresiva de los circuitos cuánticos."

#: ../../development_strategy.rst:178
msgid "Additional passes"
msgstr "Pases Adicionales"

#: ../../development_strategy.rst:180
msgid "**t|ket〉 optimization & routing pass**"
msgstr "**t|ket〉 pase de optimización y enrutamiento**"

#: ../../development_strategy.rst
msgid "- **Organization:** Cambridge Quantum Computing"
msgstr "- **Organización:** Cambridge Quantum Computing"

#: ../../development_strategy.rst
msgid "- **Description:** Transpiler pass for circuit optimization and mapping to backend using CQC's t|ket〉compiler."
msgstr "- **Descripción:** Pase del transpilador para optimización de circuitos y mapeo al backend utilizando el compilador CQC's t|ket〉."

#: ../../development_strategy.rst
msgid "- **More info:** `Tutorial Notebook <https://github.com/Qiskit/qiskit-tutorials/blob/master/community/aqua/chemistry/QSE_pytket.ipynb>`__ and `GitHub <https://github.com/CQCL/pytket>`__."
msgstr "- **Más información:** `Notebook Tutorial <https://github.com/Qiskit/qiskit-tutorials/blob/master/community/aqua/chemistry/QSE_pytket.ipynb>`__ y `GitHub <https://github.com/CQCL/pytket>`__."

#: ../../development_strategy.rst:190
msgid "Tools"
msgstr "Herramientas"

#: ../../development_strategy.rst:192
msgid "Extending Qiskit with new tools and functionality is an important part of building a community. These tools can be new visualizations, slack integration, Jupyter extensions and much more."
msgstr "Extender Qiskit con nuevas herramientas y funcionalidades es una parte importante de la construcción de una comunidad. Estas herramientas pueden ser nuevas visualizaciones, integración con Slack, extensiones de Jupyter y mucho más."

#: ../../development_strategy.rst:197
msgid "Additional Tools"
msgstr "Herramientas Adicionales"

#: ../../development_strategy.rst:198
msgid "**OpenControls library**"
msgstr "**Biblioteca OpenControls**"

#: ../../development_strategy.rst
msgid "- **Organization:** Q-CTRL"
msgstr "- **Organización:** Q-CTRL"

#: ../../development_strategy.rst
msgid "- **Description:** Library of quantum control pulses derived from the open literature."
msgstr "- **Descripción:** Biblioteca de pulsos de control cuántico derivados de la literatura abierta."

#: ../../development_strategy.rst
msgid "- **More info:**  `GitHub <https://github.com/qctrl/python-open-controls>`__ and `Q-CTRL website <https://q-ctrl.com/products/open-controls/>`__"
msgstr "- **Más información:** `GitHub <https://github.com/qctrl/python-open-controls>`__ y `sitio web de Q-CTRL <https://q-ctrl.com/products/open-controls/>`__"

