msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-26 23:06+0000\n"
"PO-Revision-Date: 2023-01-26 23:35\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/simulators/7_matrix_product_state_method.po\n"
"X-Crowdin-File-ID: 9172\n"
"Language: zh_TW\n"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:10
msgid "This page was generated from `tutorials/simulators/7_matrix_product_state_method.ipynb`__."
msgstr "此頁面是從 `tutorials/simulators/1_aer_provider.ipynb`__ 產生的。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:9
#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:26
msgid "Matrix product state simulation method"
msgstr "Matrix product state 的模擬方法"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:12
msgid "Simulation methods"
msgstr "模擬方法"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:14
msgid "The ``AerSimulator`` has several simulation methods including ``statevector``, ``stabilizer``, ``extended_stabilizer`` and ``matrix_product_state``. Each of these determines the internal representation of the quantum circuit and the algorithms used to process the quantum operations. They each have advantages and disadvantages, and choosing the best method is a matter of investigation. In this tutorial, we focus on the ``matrix product state simulation method``."
msgstr "` ` AerSimulator`` 有數個模擬方法，包括 ``statevector``, ``stabilizer``，``extended_stabilizer`` 和``matrix_product_state``，其中的每一個都決定了量子電路的內部不同表示法和用於處理量子操作的演算法。 每個方法都有優缺點，如何選擇最好的方法，是我們需要關注的問題。 在本指導教學中，我們將重點放在 ``matrix product state simulation method``中。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:28
msgid "This simulation method is based on the concept of ``matrix product states``. This structure was initially proposed in the paper *Efficient classical simulation of slightly entangled quantum computations* by Vidal in https://arxiv.org/abs/quant-ph/0301063. There are additional papers that describe the structure in more detail, for example *The density-matrix renormalization group in the age of matrix product states* by Schollwoeck https://arxiv.org/abs/1008.3477."
msgstr "此模擬方法以 \" ` matrix product states`` `為基礎。 這種概念最初在 Vidal的*Efficient classical simulation of slightly entangled quantum computations* 這篇論文中被提出(連結:https://arxiv.org/abs/quant-ph/0301063)。 還有其他論文對此概念有更深入的描述，如 Scholwoeck 的*The density-matrix renormalization group in the age of matrix product states*(連結:https://arxiv.org/abs/1008.3477)。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:39
msgid "A pure quantum state is usually described as a state vector, by the expression :math:`|\\psi\\rangle = \\sum_{i_1=0}^1 {\\ldots} \\sum_{i_n=0}^1 c_{i_1 \\ldots i_n} |i_i\\rangle {\\otimes} {\\ldots} {\\otimes} |i_n\\rangle`."
msgstr "通常我們會以狀態向量描述量子態，其表示式為 :math:`|\\psi\\r角度 = \\sum_{i_1=0}^1 {\\lds} \\sum_{i_n=0}^1 cc_{i_i\\r角度 {\\owtimes } { \\otimes } |i_n\\r角`。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:41
msgid "The state vector representation implies an exponential size representation, regardless of the actual circuit. Every quantum gate operating on this representation requires exponential time and memory."
msgstr ""

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:43
msgid "The matrix product state (MPS) representation offers a local representation, in the form: :math:`\\Gamma^{[1]} \\lambda^{[1]} \\Gamma^{[2]} \\lambda^{[2]}\\ldots \\Gamma^{[1]} \\lambda^{[n-1]} \\Gamma^{[n]}`, such that all the information contained in the :math:`c_{i_1 \\ldots i_n}`, can be generated out of the MPS representation."
msgstr "Matrix product state (MPS) 表示法提供了一種局部表示方式 :math:`\\Gamma^{[1]} \\lambda^{[1]} \\Gamma^{[2]} \\lambda^{[2]}\\ldots \\Gamma^{[1]} \\lambda^{[n-1]} \\Gamma^{[n]}`，因此包含在 :math:`c_{i_1 \\ldots i_n}` 中的所有資訊都可以從 MPS 表示法中得出。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:54
msgid "Every :math:`\\Gamma^{[i]}` is a tensor of complex numbers that represents qubit :math:`i`. Every :math:`\\lambda^{[i]}` is a matrix of real numbers that is used to normalize the amplitudes of qubits :math:`i` and :math:`i+1`. Single-qubit gates operate only on the relevant tensor."
msgstr "每個 :math:`\\Gamma^{[i]}` 是表示量子位元 :math:`i` 的複數張量，每個 :math:`\\lambda^{[i]}` 是一個實數矩陣，用於對量子位元閘 :math:`i` 和 :math:`i+1` 的幅度進行歸一化，其中單量子位元閘僅在相關張量上作用。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:56
msgid "Two-qubit gates operate on consecutive qubits :math:`i` and :math:`i+1`. This involves a tensor-contract operation over :math:`\\lambda^{[i-1]}`, :math:`\\Gamma^{[i-1]}`, :math:`\\lambda^{[i]}`, :math:`\\Gamma^{[i+1]}` and :math:`\\lambda^{[i+1]}`, that creates a single tensor. We apply the gate to this tensor, and then decompose back to the original structure. This operation may increase the size of the respective tensors. Gates that involve two qubits that are not consecutive, require a series of swap gates to bring the two qubits next to each other and then the reverse swaps."
msgstr "雙量子位元閘對連續的量子位:math:`i` 和 :math:`i+1` 進行操作時，包括:math:`\\lambda^{[i-1]}`, :math:`\\Gamma^{[i-1]}`, :math:`\\lambda^{[i]}`, :math:`\\Gamma^{[i+1]}` and :math:`\\lambda^{[i+1]}`,以創建單個張量，我們將閘作用於這個張量後，然後分解回原始結構，這個操作可能會增加每個張量的大小，包含兩個非連續量子位的門需要一系列交換門來使兩個量子位元彼此相鄰，然後反向交換。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:59
msgid "In the worst case, the tensors may grow exponentially. However, the size of the overall structure remains ‘small’ for circuits that do not have ‘many’ two-qubit gates. This allows much more efficient operations in circuits with relatively ‘low’ entanglement. Characterizing when to use this method over other methods is a subject of current research."
msgstr "在最壞的情況下，張量可能呈指數增長，然而，在沒有“很多”雙量子位元閘的電路中，結構的整體尺寸仍然算是“小”的， 這允許在相對“低”糾纏的電路中進行更有效的操作，而什麼時候要使用這種方法則是目前研究的主題。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:71
msgid "Using the matrix product state simulation method"
msgstr "使用Matrix product state 的模擬方法"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:73
msgid "The matrix product state simulation method is invoked in the ``AerSimulator`` by setting the simulation method. Other than that, all operations are controlled by the ``AerSimulator`` itself, as in the following example:"
msgstr "透過設定模擬方法，我們可以在 ``AerSimulator`` 中使用matrix product state模擬方法。 除此之外，所有作業都由 ``AerSimulator`` 本身控制，如下列範例所示："

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:138
msgid "To see the internal state vector of the circuit we can use the ``save_statevector`` instruction. To return the full internal MPS structure we can also use the ``save_matrix_product_state`` instruction."
msgstr "如果要查看電路的狀態向量，我們可以使用 ``save_statevector``這個指令 ， 如果要得到完整的內部 MPS 結構，我們也可以使用 ``save_matrix_product_state`` 的指令。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:220
msgid "Running circuits using the matrix product state simulation method can be fast, relative to other methods. However, if we generate the state vector during the execution, then the conversion to state vector is, of course, exponential in memory and time, and therefore we don’t benefit from using this method. We can benefit if we only do operations that don’t require printing the full state vector. For example, if we run a circuit and then take measurement. The circuit below has 200 qubits. We create an ``EPR state`` involving all these qubits. Although this state is highly entangled, it is handled well by the matrix product state method, because there are effectively only two states."
msgstr "相對於其他方法，使用matrix product state 的模擬方法執行電路可以非常快速， 然而，如果在執行過程中產生狀態向量，則轉換到狀態向量所花的記憶體和時間當然會呈指數成長，因此這種方法較適用於不會把狀態向量完整印出的操作。 例如執行電路並進行測量。 下面這個電路有 200 個量子位元。 我們建立了一個包含所有量子位元的 \" EPR state \" ，但因為實際上只有兩個狀態 ，因此就算這個狀態糾纏的強度高，用matrix product state處理它的效率仍高。"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:223
msgid "We can handle more qubits than this, but execution may take a few minutes. Try running a similar circuit with 500 qubits! Or maybe even 1000 (you can get a cup of coffee while waiting)."
msgstr "我們可以處理更多的量子位元，但可能需要花幾分鐘來執行。試試用 500 個量子位元執行一個類似的電路！ 或者甚至 1000 個位元（你可以在等待的時候弄杯咖啡來喝)。"

