msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-16 16:44+0000\n"
"PO-Revision-Date: 2022-05-16 17:10\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/operators/01_operator_flow.po\n"
"X-Crowdin-File-ID: 9472\n"
"Language: zh_TW\n"

#: ../../tutorials/operators/01_operator_flow.ipynb:10
msgid "This page was generated from `tutorials/operators/01_operator_flow.ipynb`__."
msgstr "此頁面是從 `tutorials/operators/01_operator_flow.ipynb`__所產生的。"

#: ../../tutorials/operators/01_operator_flow.ipynb:9
msgid "Operator Flow"
msgstr "運算子流程"

#: ../../tutorials/operators/01_operator_flow.ipynb:21
msgid "Introduction"
msgstr "簡介"

#: ../../tutorials/operators/01_operator_flow.ipynb:23
msgid "Qiskit provides classes representing states and operators and sums, tensor products, and compositions thereof. These algebraic constructs allow us to build expressions representing operators."
msgstr "Qiskit 提供代表狀態、運算元、總和、張量積的類別。 這些代數建構讓我們可以建立表示運算子的表示式。"

#: ../../tutorials/operators/01_operator_flow.ipynb:25
msgid "We introduce expressions by building them from Pauli operators. In subsequent sections we explore in more detail operators and states, how they are represented, and what we can do with them. In the last section we construct a state, evolve it with a Hamiltonian, and compute expectation values of an observable."
msgstr "我們透過將表示式從 Pauli 運算子建置，來引入表示式。 在接下來的章節中，我們會在更詳細的運算子和狀態中探索它們的代表方式，以及我們可以用它們來做什麼。 在最後一節中，我們建構一個狀態，並以 Hamiltonian 演化，並計算可觀察值的期望值。"

#: ../../tutorials/operators/01_operator_flow.ipynb:28
msgid "Pauli operators, sums, compositions, and tensor products"
msgstr "Pauli 運算子、總和、組合及張量積"

#: ../../tutorials/operators/01_operator_flow.ipynb:30
msgid "The most important base operators are the Pauli operators. The Pauli operators are represented like this."
msgstr "最重要的基本運算子是 Pauli 運算子。 Pauli 運算子的代表方式是這樣。"

#: ../../tutorials/operators/01_operator_flow.ipynb:75
msgid "These operators may also carry a coefficient."
msgstr "這些運算子也可以有一個係數。"

#: ../../tutorials/operators/01_operator_flow.ipynb:123
msgid "These coefficients allow the operators to be used as terms in a sum."
msgstr "這些係數可讓運算子以總和形式使用。"

#: ../../tutorials/operators/01_operator_flow.ipynb:170
msgid "Tensor products are denoted with a caret, like this."
msgstr "張量積以插入號表示，就像這樣。"

#: ../../tutorials/operators/01_operator_flow.ipynb:214
msgid "Composition is denoted by the ``@`` symbol."
msgstr "組合以 ``@`` 符號表示。"

#: ../../tutorials/operators/01_operator_flow.ipynb:258
msgid "In the preceding two examples, the tensor product and composition of Pauli operators were immediately reduced to the equivalent (possibly multi-qubit) Pauli operator. If we tensor or compose more complicated objects, the result is objects representing the unevaluated operations. That is, algebraic expressions."
msgstr "在前面的兩個例子中，Pauli運算子的張量積被立即減少到等價的（可能是多量子位元的）Pauli運算子。 如果我們取張量積或建構更複雜的物件時，會得到代表未經評估之操作的物件，也就是其代數表示式。"

#: ../../tutorials/operators/01_operator_flow.ipynb:269
msgid "For example, composing two sums gives"
msgstr "舉個例子，計算兩個和給我們"

#: ../../tutorials/operators/01_operator_flow.ipynb:322
msgid "And tensoring two sums gives"
msgstr "對兩個和作張量積我們得到"

#: ../../tutorials/operators/01_operator_flow.ipynb:375
msgid "Let’s take a closer look at the types introduced above. First the Pauli operators."
msgstr "讓我們來仔細看看上面介紹的類型。 首先是 Pauli 運算子。"

#: ../../tutorials/operators/01_operator_flow.ipynb:420
msgid "Each Pauli operator is an instance of ``PauliOp``, which wraps an instance of ``qiskit.quantum_info.Pauli``, and adds a coefficient ``coeff``. In general, a ``PauliOp`` represents a weighted tensor product of Pauli operators."
msgstr "每一個 Pauli 運算子都是 ``PauliOp`` 的實例，其包裝 ` `qiskit.quantum_info.Pauli`` 的實例，並新增係數 ``coeff``，一般而言， ``PauliOp` ` 代表 Pauli 運算子的張量積乘上某個係數。"

#: ../../tutorials/operators/01_operator_flow.ipynb:465
msgid "For the encoding of the Pauli operators as pairs of Boolean values, see the documentation for ``qiskit.quantum_info.Pauli``."
msgstr "如果要將 Pauli 運算子的編碼作為成對布林值，請參閱 ``qiskit.quantum_info.Pauli`` 的說明文件。"

#: ../../tutorials/operators/01_operator_flow.ipynb:467
msgid "All of the objects representing operators, whether as “primitive”s such as ``PauliOp``, or algebraic expressions carry a coefficient"
msgstr "所有表示運算子的物件，無論是 \" primitives \" ，例如 ``PauliOp`` ，或代數表示式都具有一個係數"

#: ../../tutorials/operators/01_operator_flow.ipynb:520
msgid "In the following we take a broader and deeper look at Qiskit’s operators, states, and the building blocks of quantum algorithms."
msgstr "在下面我們對 Qiskit 的運算子、狀態和量子演算法的構建塊進行了更廣泛和更深入的研究。"

#: ../../tutorials/operators/01_operator_flow.ipynb:532
msgid "Part I: State Functions and Measurements"
msgstr "第一部分：狀態函數和測量"

#: ../../tutorials/operators/01_operator_flow.ipynb:534
msgid "Quantum states are represented by subclasses of the class ``StateFn``. There are four representations of quantum states: ``DictStateFn`` is a sparse representation in the computational basis, backed by a ``dict``. ``VectorStateFn`` is a dense representation in the computational basis backed by a numpy array. ``CircuitStateFn`` is backed by a circuit and represents the state obtained by executing the circuit on the all-zero computational-basis state. ``OperatorStateFn`` represents mixed states via a density matrix. (As we will see later, ``OperatorStateFn`` is also used to represent observables.)"
msgstr "量子狀態被代表在類別 ``StateFn`` 中的子類。有四種量子狀態的表示法 : 在計算基礎上， `` DictStateFn`` 是由 ``dict`` 所支援的稀疏表示法。在計算基礎上， `` VectorStateFn`` 是由 numpy 陣列所支援的密集表示法。 `` CircuitStateFn`` 被電路支援，表示通過在所有零計算基礎上執行電路獲得的狀態。 ``OperatorStateFn`` 代表透過密度矩陣的混合狀態。 （如我們稍後看到， `` OperatorStateFn `` 也用來代表可觀察的。）"

#: ../../tutorials/operators/01_operator_flow.ipynb:537
msgid "Several ``StateFn`` instances are provided for convenience. For example ``Zero, One, Plus, Minus``."
msgstr "提供了數個 ``StateFn`` 的實例，以方便使用。 例如 ``Zero， One， Plus， Minus``。"

#: ../../tutorials/operators/01_operator_flow.ipynb:559
msgid "``Zero`` and ``One`` represent the quantum states :math:`|0\\rangle` and :math:`|1\\rangle`. They are represented via ``DictStateFn``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:603
msgid "``Plus`` and ``Minus``, representing states :math:`(|0\\rangle + |1\\rangle)/\\sqrt{2}` and :math:`(|0\\rangle - |1\\rangle)/\\sqrt{2}` are represented via circuits. ``H`` is a synonym for ``Plus``."
msgstr "``Plus`` 和 ``Minus``分別代表量子態 :math:`(|0\\rangle + |1\\rangle)/\\sqrt{2}` 和 :math:`(|0\\rangle - |1\\rangle)/\\sqrt{2}`。``H``和``Plus``同義。"

#: ../../tutorials/operators/01_operator_flow.ipynb:671
msgid "Indexing into quantum states is done with the ``eval`` method. These examples return the coefficients of the ``0`` and ``1`` basis states. (Below, we will see that the ``eval`` method is used for other computations, as well.)"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:731
msgid "The dual vector of a quantum state, that is the *bra* corresponding to a *ket* is obtained via the ``adjoint`` method. The ``StateFn`` carries a flag ``is_measurement``, which is ``False`` if the object is a ket and ``True`` if it is a bra."
msgstr "量子態的對偶向量，即對應於 *ket* 的 *bra*，是通過“伴隨”方法獲得的。 \n\n"
"``StateFn`` 帶有一個標誌 ``is_measurement``，如果對象是 ket 則為``False``，如果是bra則為 True。"

#: ../../tutorials/operators/01_operator_flow.ipynb:742
msgid "Here, we construct :math:`\\langle 1 |`."
msgstr "在這裡，我們建構 :math:`\\langle 1 |`。"

#: ../../tutorials/operators/01_operator_flow.ipynb:787
msgid "For convenience, one may obtain the dual vector with a tilde, like this"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:833
msgid "Algebraic operations and predicates"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:835
msgid "Many algebraic operations and predicates between ``StateFn``\\ s are supported, including:"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:837
msgid "``+`` - addition"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:838
msgid "``-`` - subtraction, negation (scalar multiplication by -1)"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:839
msgid "``*`` - scalar multiplication"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:840
msgid "``/`` - scalar division"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:841
msgid "``@`` - composition"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:842
msgid "``^`` - tensor product or tensor power (tensor with self n times)"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:843
msgid "``**`` - composition power (compose with self n times)"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:844
msgid "``==`` - equality"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:845
msgid "``~`` - adjoint, alternating between a State Function and Measurement"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:847
msgid "Be very aware that these operators obey the `Python rules for operator precedence <https://docs.python.org/3/reference/expressions.html#operator-precedence>`__, which might not be what you expect mathematically. For example, ``I^X + X^I`` will actually be parsed as ``I ^ (X + X) ^ I == 2 * (I^X^I)`` because Python evaluates ``+`` before ``^``. In these cases, you can use the methods (``.tensor()``, etc) or parentheses."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:858
msgid "``StateFn``\\ s carry a coefficient. This allows us to multiply states by a scalar, and so to construct sums."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:869
msgid "Here, we construct :math:`(2 + 3i)|0\\rangle`."
msgstr "在這裡，我們建構 :math:`（2 + 3i）|0\\r角`。"

#: ../../tutorials/operators/01_operator_flow.ipynb:914
msgid "Here, we see that adding two ``DictStateFn``\\ s returns an object of the same type. We construct :math:`|0\\rangle + |1\\rangle`."
msgstr "在這裡，我們看到新增兩個 `DictStateFn` ` \\ s 會傳回相同類型的物件。 我們構造 :math:`|0\\r角 + |1\\r角`。"

#: ../../tutorials/operators/01_operator_flow.ipynb:958
msgid "Note that you must normalize states by hand. For example, to construct :math:`(|0\\rangle + |1\\rangle)/\\sqrt{2}`, we write"
msgstr "請注意，您必須依手進行狀態正規化。 例如，若要建構 :math:`（|0\\r角度 + |1\\rangle）/\\sqrt{2}`，我們寫入"

#: ../../tutorials/operators/01_operator_flow.ipynb:1005
msgid "In other cases, the result is a symbolic representation of a sum. For example, here is a representation of :math:`|+\\rangle + |-\\rangle`."
msgstr "在其他情況下，結果是一筆符號的符號表示法。 例如，這裡是代表 :math:`|+\\r角度 + |-\\r角度`。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1082
msgid "The composition operator is used to perform an inner product, which by default is held in an unevaluated form. Here is a representation of :math:`\\langle 1 | 1 \\rangle`."
msgstr "組合運算子是用來執行內部產品，依預設會保留在未評估的表單中。 以下是代表 :math:`\\langle 1 | 1 \\rangle`的表示法。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1135
msgid "Note that the ``is_measurement`` flag causes the (bra) state ``~One`` to be printed ``DictMeasurement``."
msgstr "請注意， ``is_measurement`` 標誌會導致列印 ``DictMeasurement `` 中的（bra）狀態 ` ` ~` ` ` 。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1146
msgid "Symbolic expressions may be evaluated with the ``eval`` method."
msgstr "符號表示式可以用 ``eval`` 方法進行評估。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1225
msgid "Here is :math:`\\langle - | 1 \\rangle = \\langle (\\langle 0| - \\langle 1|)/\\sqrt{2} | 1\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1270
msgid "The composition operator ``@`` is equivalent to calling the ``compose`` method."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1323
msgid "Inner products may also be computed using the ``eval`` method directly, without constructing a ``ComposedOp``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1368
msgid "Symbolic tensor products are constructed as follows. Here is :math:`|0\\rangle \\otimes |+\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1433
msgid "This may be represented as a simple (not compound) ``CircuitStateFn``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1495
msgid "Tensor powers are constructed using the caret ``^`` as follows. Here are :math:`600 (|11111\\rangle + |00000\\rangle)`, and :math:`|10\\rangle^{\\otimes 3}`."
msgstr "使用照顧者 ` ` ^`` 如下所示來建構 Tensor 權限。 這裡是 :math:`600 （|11111\\r角度 + |00000\\r角）`， and :math:`|10\\r角度^{\\otimes 3}`。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1543
msgid "The method ``to_matrix_op`` converts to ``VectorStateFn``."
msgstr "函式``to_matrix_op``轉換成``VectorStateFn``。"

#: ../../tutorials/operators/01_operator_flow.ipynb:1643
msgid "Constructing a StateFn is easy. The ``StateFn`` class also serves as a factory, and can take any applicable primitive in its constructor and return the correct StateFn subclass. Currently the following primitives can be passed into the constructor, listed alongside the ``StateFn`` subclass they produce:"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1645
msgid "str (equal to some basis bitstring) -> DictStateFn"
msgstr "str （等於部分基準位元字串） -> DictStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1646
msgid "dict -> DictStateFn"
msgstr "dict -> DictStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1647
msgid "Qiskit Result object -> DictStateFn"
msgstr "Qiskit Result object -> DictStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1648
msgid "list -> VectorStateFn"
msgstr "list -> VectorStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1649
msgid "np.ndarray -> VectorStateFn"
msgstr "np.ndarray -> VectorStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1650
msgid "Statevector -> VectorStateFn"
msgstr "Statevector -> VectorStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1651
msgid "QuantumCircuit -> CircuitStateFn"
msgstr "QuantumCircuit -> CircuitStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1652
msgid "Instruction -> CircuitStateFn"
msgstr "Instruction -> CircuitStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1653
msgid "OperatorBase -> OperatorStateFn"
msgstr "OperatorBase -> OperatorStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1734
msgid "Part II: ``PrimitiveOp``\\ s"
msgstr "第二部分： ``PrimitiveOp``s"

#: ../../tutorials/operators/01_operator_flow.ipynb:1736
msgid "The basic Operators are subclasses of ``PrimitiveOp``. Just like ``StateFn``, ``PrimitiveOp`` is also a factory for creating the correct type of ``PrimitiveOp`` for a given primitive. Currently, the following primitives can be passed into the constructor, listed alongside the ``PrimitiveOp`` subclass they produce:"
msgstr "基本運算子是 ``PrimitiveOp` ` 的子類別。就像 ``StateFn`` ， ` ` PrimitiveOp`` 也是一個 Factory ，用於為給定的基本元素建立正確的 ` `PrimitiveOp`` 類型。 目前，下列基本元素可以傳遞至建構子，並與它們產生的 ``PrimitiveOp` ` 子類別並排列出："

#: ../../tutorials/operators/01_operator_flow.ipynb:1738
msgid "Terra’s Pauli -> PauliOp"
msgstr "Terra’s Pauli -> PauliOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1739
msgid "Instruction -> CircuitOp"
msgstr "Instruction -> CircuitOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1740
msgid "QuantumCircuit -> CircuitOp"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1741
msgid "2d List -> MatrixOp"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1742
msgid "np.ndarray -> MatrixOp"
msgstr "np.ndarray -> MatrixOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1743
msgid "spmatrix -> MatrixOp"
msgstr "spmatrix -> MatrixOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1744
msgid "Terra’s quantum_info.Operator -> MatrixOp"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1766
msgid "Matrix elements"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1777
msgid "The ``eval`` method returns a column from an operator. For example, the Pauli :math:`X` operator is represented by a ``PauliOp``. Asking for a column returns an instance of the sparse representation, a ``DictStateFn``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1855
msgid "It follows that indexing into an operator, that is obtaining a matrix element, is performed with two calls to the ``eval`` method."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1866
msgid "We have :math:`X = \\left(\\begin{matrix} 0 & 1 \\\\  1 & 0  \\end{matrix} \\right)`. And the matrix element :math:`\\left\\{X \\right\\}_{0,1}` is"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:1911
msgid "Here is an example using the two qubit operator ``CX``, the controlled ``X``, which is represented by a circuit."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2052
msgid "Applying an operator to a state vector"
msgstr "將運算子套用至狀態向量"

#: ../../tutorials/operators/01_operator_flow.ipynb:2063
msgid "Applying an operator to a state vector may be done with the ``compose`` method (equivalently, ``@`` operator). Here is a representation of :math:`X | 1 \\rangle = |0\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2116
msgid "A simpler representation, the ``DictStateFn`` representation of :math:`|0\\rangle`, is obtained with ``eval``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2161
msgid "The intermediate ``ComposedOp`` step may be avoided by using ``eval`` directly."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2206
msgid "Composition and tensor products of operators are effected with ``@`` and ``^``. Here are some examples."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2408
msgid "Part III ``ListOp`` and subclasses"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2420
msgid "``ListOp``"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2422
msgid "``ListOp`` is a container for effectively vectorizing operations over a list of operators and states."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2495
msgid "For example, the composition above is distributed over the lists (``ListOp``) using the simplification method ``reduce``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2603
msgid "``ListOp``\\ s: ``SummedOp``, ``ComposedOp``, ``TensoredOp``"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2605
msgid "``ListOp``, introduced above, is useful for vectorizing operations. But, it also serves as the superclass for list-like composite classes. If you’ve already played around with the above, you’ll notice that you can easily perform operations between ``OperatorBase``\\ s which we may not know how to perform efficiently in general (or simply haven’t implemented an efficient procedure for yet), such as addition between ``CircuitOp``\\ s. In those cases, you may receive a ``ListOp`` result (or subclass thereof) from your operation representing the lazy execution of the operation. For example, if you attempt to add together a ``DictStateFn`` and a ``CircuitStateFn``, you’ll receive a ``SummedOp`` representing the sum of the two. This composite State function still has a working ``eval`` (but may need to perform a non-scalable computation under the hood, such as converting both to vectors)."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2608
msgid "These composite ``OperatorBase``\\ s are how we construct increasingly complex and rich computation out of ``PrimitiveOp`` and ``StateFn`` building blocks."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2610
msgid "Every ``ListOp`` has four properties:"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2612
msgid "``oplist`` - The list of ``OperatorBase``\\ s which may represent terms, factors, etc."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2613
msgid "``combo_fn`` - The function taking a list of complex numbers to an output value which defines how to combine the outputs of the ``oplist`` items. For broadcasting simplicity, this function is defined over NumPy arrays."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2614
msgid "``coeff`` - A coefficient multiplying the primitive. Note that ``coeff`` can be int, float, complex or a free ``Parameter`` object (from ``qiskit.circuit`` in Terra) to be bound later using ``my_op.bind_parameters``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2615
msgid "``abelian`` - Indicates whether the Operators in ``oplist`` are known to mutually commute (usually set after being converted by the ``AbelianGrouper`` converter)."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2617
msgid "Note that ``ListOp`` supports typical sequence overloads, so you can use indexing like ``my_op[4]`` to access the ``OperatorBase``\\ s in ``oplist``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2629
msgid "``OperatorStateFn``"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2631
msgid "We mentioned above that ``OperatorStateFn`` represents a density operator. But, if the ``is_measurement`` flag is ``True``, then ``OperatorStateFn`` represents an observable. The expectation value of this observable can then be constructed via ``ComposedOp``. Or, directly, using ``eval``. Recall that the ``is_measurement`` flag (property) is set via the ``adjoint`` method."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2642
msgid "Here we construct the observable corresponding to the Pauli :math:`Z` operator. Note that when printing, it is called ``OperatorMeasurement``."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2712
msgid "Here, we compute :math:`\\langle 0 | Z | 0 \\rangle`, :math:`\\langle 1 | Z | 1 \\rangle`, and :math:`\\langle + | Z | + \\rangle`, where :math:`|+\\rangle = (|0\\rangle + |1\\rangle)/\\sqrt{2}`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2765
msgid "Part IV: Converters"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2767
msgid "Converters are classes that manipulate operators and states and perform building blocks of algorithms. Examples include changing the basis of operators and Trotterization. Converters traverse an expression and perform a particular manipulation or replacement, defined by the converter’s ``convert()`` method, of the Operators within. Typically, if a converter encounters an ``OperatorBase`` in the recursion which is irrelevant to its conversion purpose, that ``OperatorBase`` is left unchanged."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2792
msgid "Evolutions, ``exp_i()``, and the ``EvolvedOp``"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2794
msgid "Every ``PrimitiveOp`` and ``ListOp`` has an ``.exp_i()`` function such that ``H.exp_i()`` corresponds to :math:`e^{-iH}`. In practice, only a few of these Operators have an efficiently computable exponentiation (such as MatrixOp and the PauliOps with only one non-identity single-qubit Pauli), so we need to return a placeholder, or symbolic representation, (similar to how ``SummedOp`` is a placeholder when we can’t perform addition). This placeholder is called ``EvolvedOp``, and it holds the ``OperatorBase`` to be exponentiated in its ``.primitive`` property."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2797
msgid "Qiskit operators fully support parameterization, so we can use a ``Parameter`` for our evolution time here. Notice that there’s no “evolution time” argument in any function. The Operator flow exponentiates whatever operator we tell it to, and if we choose to multiply the operator by an evolution time, :math:`e^{-iHt}`, that will be reflected in our exponentiation parameters."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2809
msgid "Weighted sum of Pauli operators"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2811
msgid "A Hamiltonian expressed as a linear combination of multi-qubit Pauli operators may be constructed like this."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2836
msgid "Note that ``two_qubit_H2`` is represented as a ``SummedOp`` whose terms are ``PauliOp``\\ s."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2892
msgid "Next, we multiply the Hamiltonian by a ``Parameter``. This ``Parameter`` is stored in the ``coeff`` property of the ``SummedOp``. Calling ``exp_i()`` on the result wraps it in ``EvolvedOp``, representing exponentiation."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:2966
msgid "We construct ``h2_measurement``, which represents ``two_qubit_H2`` as an observable."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3023
msgid "We construct a Bell state :math:`|\\Phi_+\\rangle` via :math:`\\text{CX} (H\\otimes I) |00\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3086
msgid "Here is the expression :math:`H e^{-iHt} |\\Phi_+\\rangle`."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3191
msgid "Typically, we want to approximate :math:`e^{-iHt}` using two-qubit gates. We achieve this with the ``convert`` method of ``PauliTrotterEvolution``, which traverses expressions applying trotterization to all ``EvolvedOp``\\ s encountered. Although we use ``PauliTrotterEvolution`` here, there are other possibilities, such as ``MatrixEvolution``, which performs the exponentiation exactly."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3309
msgid "``trotterized_op`` contains a ``Parameter``. The ``bind_parameters`` method traverses the expression binding values to parameter names as specified via a ``dict``. In this case, there is only one parameter."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3330
msgid "``bound`` is a ``ComposedOp``. The second factor is the circuit. Let’s draw it to verify that the binding has taken place."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3449
msgid "Expectations"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3451
msgid "``Expectation``\\ s are converters that enable the computation of expectation values of observables. They traverse an Operator tree, replacing ``OperatorStateFn``\\ s (observables) with equivalent instructions which are more amenable to computation on quantum or classical hardware. For example, if we want to measure the expectation value of an Operator ``o`` expressed as a sum of Paulis with respect to some state function, but can only access diagonal measurements on quantum hardware, we can create an observable ``~StateFn(o)`` and use a ``PauliExpectation`` to convert it to a diagonal measurement and circuit pre-rotations to append to the state."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3454
msgid "Another interesting ``Expectation`` is the ``AerPauliExpectation``, which converts the observable into a ``CircuitStateFn`` containing a special expectation snapshot instruction which ``Aer`` can execute natively with high performance."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3574
msgid "By default ``group_paulis=True``, which will use the ``AbelianGrouper`` to convert the ``SummedOp`` into groups of mutually qubit-wise commuting Paulis. This reduces circuit execution overhead, as each group can share the same circuit execution."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3666
msgid "Note that converters act recursively, that is, they traverse an expression applying their action only where possible. So we can just convert our full evolution and measurement expression. We could have equivalently composed the converted ``h2_measurement`` with our evolution ``CircuitStateFn``. We proceed by applying the conversion on the entire expression."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3849
msgid "Now we bind multiple parameter values into a ``ListOp``, followed by ``eval`` to evaluate the entire expression. We could have used ``eval`` earlier if we bound earlier, but it would not be efficient. Here, ``eval`` will convert our ``CircuitStateFn``\\ s to ``VectorStateFn``\\ s through simulation internally."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3871
msgid "Here are the expectation values :math:`\\langle \\Phi_+| e^{iHt} H e^{-iHt} |\\Phi_+\\rangle` corresponding to the different values of the parameter."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3923
msgid "Executing ``CircuitStateFn``\\ s with the ``CircuitSampler``"
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3925
msgid "The ``CircuitSampler`` traverses an Operator and converts any ``CircuitStateFn``\\ s into approximations of the resulting state function by a ``DictStateFn`` or ``VectorStateFn`` using a quantum backend. Note that in order to approximate the value of the ``CircuitStateFn``, it must 1) send the state function through a depolarizing channel, which will destroy all phase information and 2) replace the sampled frequencies with **square roots** of the frequency, rather than the raw probability of sampling (which would be the equivalent of sampling the **square** of the state function, per the Born rule)."
msgstr ""

#: ../../tutorials/operators/01_operator_flow.ipynb:3980
msgid "Note again that the circuits are replaced by dicts with **square roots** of the circuit sampling probabilities. Take a look at one sub-expression before and after the conversion:"
msgstr ""

