msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-16 16:44+0000\n"
"PO-Revision-Date: 2022-05-16 17:10\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/01_algorithms_introduction.po\n"
"X-Crowdin-File-ID: 9444\n"
"Language: zh_TW\n"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:10
msgid "This page was generated from `tutorials/algorithms/01_algorithms_introduction.ipynb`__."
msgstr "這頁面是由 `tutorials/algorithms/01_algorithms_introduction.ipynb`__ 產生的。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:9
msgid "An Introduction to Algorithms in Qiskit"
msgstr "Qiskit 中的演算法簡介"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:11
msgid "This is an introduction to algorithms in Qiskit and provides a high-level overview to help understand the various aspects of the functionality to get started. Other tutorials will provide more in-depth material, on given algorithms, and ways to use them etc."
msgstr "這是 Qiskit 中的演算法簡介，並提供高階概觀，以協助瞭解要開始使用各方面的功能。其他指導教學將提供更深入的資料、既定的演算法，以及使用方法等。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:23
msgid "How is the algorithm library structured?"
msgstr "演算法程式庫的結構方式為何？"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:25
msgid "Qiskit provides a number of `Algorithms <https://qiskit.org/documentation/apidoc/algorithms.html>`__ and they are grouped by category according to the task they can perform. For instance ``Minimum Eigensolvers`` to find the smallest eigen value of an operator, for example ground state energy of a chemistry Hamiltonian or a solution to an optimization problem when expressed as an Ising Hamiltonian. There are ``Linear Solvers`` for linear systems of equations problems and ``Amplitude Estimators`` for value estimation that can be used say in financial applications. The full set of categories can be seen in the Algorithms documentation link above."
msgstr "Qiskit 提供了許多 `Algorithms<https://qiskit.org/documentation/apidoc/algorithms.html>`__ ，它們依種類分組，根據它們可以執行的作業來分類。例如，``Minimum Eigensolvers`` 可以找出一個算子的最小特徵值，例如，化學Hamiltonian的基態能量或對最佳化問題的解當問題可以用 Ising Hamiltonian 表示時。另外有 ``Linear Solvers`` 可以解線性系統的方程問題，以``Amplitude Estimators`` 可以用在像是金融相關應用的數值估計。您可以在上面的演算法文件鏈結中看到完整的種類集。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:28
msgid "Algorithms are configurable and often part of the configuration will be in the form of smaller building blocks, of which different instances of the building block type can be given. For instance with ``VQE``, the Variational Quantum Eigensolver, it takes a trial wavefunction, in the form of a ``QuantumCircuit`` and a classical optimizer among other things."
msgstr "演算法是可配置的，且通常部分配置會以較小的建置區塊形式存在，而對於每個小建置區塊，有相對應的不同實例可以選擇。例如，``VQE``，變分量子特徵值求解器，它有一個 ``QuantumCircuit`` 形式的試驗波函數和一個古典優化器等等。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:30
msgid "Let’s take a look at an example to construct a VQE instance. Here ``TwoLocal`` is the variational form (trial wavefunction), a parameterized circuit which can be varied, and ``SLSQP`` a classical optimizer. These are created as separate instances and passed to VQE when it is constructed. Trying, for example, a different classical optimizer, or variational form is simply a case of creating an instance of the one you want and passing it into VQE."
msgstr "讓我們來看看一個範例來建構 VQE 實例。這裡 ``TwoLocal`` 是變數形式(試驗波函數)，可改變的參數化電路，以及 ``SLSQP`` 古典優化器。這些會建立為個別實例，並在建構時傳遞至 VQE。例如，嘗試不同的古典優化器，或變異形式，只是建立一個您想要的實例，並將其傳遞至 VQE 的案例。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:58
msgid "Let’s draw the ansatz so we can see it’s a ``QuantumCircuit`` where θ[0] through θ[7] will be the parameters that are varied as VQE optimizer finds the minimum eigenvalue. We’ll come back to the parameters later in a working example below."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:132
msgid "But more is needed before we can run the algorithm so let’s get to that next."
msgstr "但我們還需要更多的時間來執行這個演算法，讓我們可以在接下來的時間再接觸這個。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:144
msgid "How to run an algorithm?"
msgstr "如何執行演算法？"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:146
msgid "In order to run an algorithm we need to have backend, a simulator or real device, on which the circuits that comprise the algorithm can be run. So for example we can use the ``aer_simulator_statevector`` from the Aer provider."
msgstr "為了執行一個演算法，我們需要有後台、模擬器或真實元件，這些平台上構成演算法的電路可以被執行。因此，例如，我們可以使用從 Aer 提供者所提供的``aer_simulator_statevector``。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:169
msgid "Now a backend on its own does not have information on how you might want to run the circuits etc. For example how many shots, do you want a noise model, even options around transpiling the circuits. For this Qiskit Terra has a ```QuantumInstance`` <https://qiskit.org/documentation/stubs/qiskit.utils.QuantumInstance.html>`__ which is provided both the backend as well as various settings around the circuit processing and execution so for instance:"
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:193
msgid "Note: if you provide the backend directly then internally a ``QuantumInstance`` will be created from it, with default settings, so at all times the algorithms are working through a ``QuantumInstance``."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:195
msgid "So now we would be able to call the `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html#qiskit.algorithms.VQE.compute_minimum_eigenvalue>`__ method. The latter is the interface of choice for the application modules, such as Nature and Optimization, in order that they can work interchangeably with any algorithm within the specific category."
msgstr "因此，現在我們可以呼叫 `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html#qiskit.algorithms.VQE.compute_minimum_eigenvalue>`__ 方法。後者是應用程式模組(例如 Nature 和 Optimization)的選擇界面，以讓它們可以與特定種類內的任何演算法互換地工作。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:207
msgid "A complete working example"
msgstr "完整的工作範例"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:209
msgid "Let’s put what we have learned from above together and create a complete working example. VQE will find the minimum eigenvalue, i.e. minimum energy value of a Hamiltonian operator and hence we need such an operator for VQE to work with. Such an operator is given below. This was originally created by the Nature application module as the Hamiltonian for an H2 molecule at 0.735A interatomic distance. It’s a sum of Pauli terms as below, but for now I am not going to say anything further about it since the goal is to run the algorithm, but further information on operators can be found in other tutorials."
msgstr "讓我們把從上面學到的東西放在一起，創造出一個完整的工作範例。 VQE 會找到最小特徵值，即 Hamiltonian 算子的最小能量值，因此我們需要一個用於 VQE 的算子來運行。下面我們給出了這樣的算子。此算子原本是由 Nature 應用模組以 0.735A 的原子間距離為 H2 分子的創建的 Hamiltonian。這是所有 Pauli 項的總和，如下，但現在關於這我不會再講更多了，因為我們的目標是執行此演算法，但在其他指導教學中可以找到關於算子的進一步資訊。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:237
msgid "So let’s build a VQE instance passing a backend using a ``QuantumInstance``, to the constructor. Now VQE does have setters so the ``QuantumInstance`` can also be passed later."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:239
msgid "Note: In order that you can run this notebook and see the exact same output the random number generator used throughout algorithms in ``algorithms_globals``, as well as the transpiler and simulator, via the ``QuantumInstance``, are seeded. You do not have to do this but if want to be able to reproduce the exact same outcome each time then this is how it’s done."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:241
msgid "So let’s run VQE and print the result object it returns."
msgstr "因此，讓我們執行 VQE，並列印其傳回的結果物件。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:345
msgid "From the above result we can see it took the optimizer ``65`` evaluations of parameter values until it found the minimum eigenvalue of ``-1.85727`` which is the electronic ground state energy of the given H2 molecule. The optimal parameters of the ansatz can also be seen which are the values that were in the ansatz at the minimum value."
msgstr "從上述結果中，我們可以看到，優化器對參數值評估了65次才找到最小特徵值`` -1.85727``，此最小特徵值也就是該給定 H2 分子的電子基態能量。我們也可以看到該擬設的最佳化參數，即在擬設中的最小的值。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:357
msgid "Using VQE setting ``QuantumInstance`` after Construction"
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:359
msgid "To close off let’s also create a VQE instance without supplying the ``QuantumInstance``. We later set it as long as by the time VQE runs it has a ``QuantumInstance`` to use."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:463
msgid "As the identical seeding was used as the prior example the result can be seen to be the same."
msgstr "由於相同的播種被用作前一個例子，結果可以看出是相同的。"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:474
msgid "This concludes this introduction to algorithms in Qiskit. Please check out the other algorithm tutorials in this series for both broader as well as more in depth coverage of the algorithms."
msgstr "Qiskit 中的演算法簡介到此結束。請查看在此系列中其他演算法指導教學，以進行更廣泛及更深入地涵蓋演算法。"

