msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-23 23:24+0000\n"
"PO-Revision-Date: 2022-03-23 23:56\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits/01_circuit_basics.po\n"
"X-Crowdin-File-ID: 9498\n"
"Language: zh_TW\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:10
msgid "This page was generated from `tutorials/circuits/01_circuit_basics.ipynb`__."
msgstr "這個頁面是從 `tutorials/circuits/01_circuit_basics.ipynb`__ 產生的。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:9
msgid "Circuit Basics"
msgstr "基本電路"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:11
msgid "Here, we provide an overview of working with Qiskit. Qiskit provides the basic building blocks necessary to program quantum computers. The fundamental unit of Qiskit is the `quantum circuit <https://en.wikipedia.org/wiki/Quantum_circuit>`__. A basic workflow using Qiskit consists of two stages: **Build** and **Run**. **Build** allows you to make different quantum circuits that represent the problem you are solving, and **Run** that allows you to run them on different backends. After the jobs have been run, the data is collected and postprocessed depending on the desired output."
msgstr "在這裡，我們提供使用 Qiskit 的概述。Qiskit 提供了程式量子計算機所需的基本構建塊。Qiskit 的基本單位是 `量子電路  <https://en.wikipedia.org/wiki/Quantum_circuit>`__。使用 Qiskit 的基本工作流程由兩個階段組成： **Build** 和 **Run**。**Build** 可讓您製作不同的量子電路，代表您正在解決的問題，**Run**可讓您在不同的後端執行它們。在執行工作之後，根據想要的輸出，您可以收集訊息並進行後續的處理。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:36
msgid "Building the circuit"
msgstr "建立電路"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:38
msgid "The basic element needed for your first program is the QuantumCircuit. We begin by creating a ``QuantumCircuit`` comprised of three qubits."
msgstr "您的第一個程式所需的基本元素是 QuantumCircuit。首先，我們建立一個由三個位元組成的 ``QuantumCircuit``。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:60
msgid "After you create the circuit with its registers, you can add gates (“operations”) to manipulate the registers. As you proceed through the tutorials you will find more gates and circuits; below is an example of a quantum circuit that makes a three-qubit GHZ state"
msgstr "在建立具有暫存器的電路之後，您可以新增閘（“操作”）來操作暫存器。當您繼續進行教程時，您將學到更多的閘和電路；以下是構成一個三量子位元 GHZ 狀態的量子電路的範例。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:62
msgid "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}.\n\n"
msgstr "|\\psi\\rangle = \\left(|00\\rangle+|11\\rangle\\right)/\\sqrt{2}.\n\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:64
msgid "To create such a state, we start with a three-qubit quantum register. By default, each qubit in the register is initialized to :math:`|0\\rangle`. To make the GHZ state, we apply the following gates: - A Hadamard gate :math:`H` on qubit 0, which puts it into the superposition state :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}`. - A Controlled-NOT operation (:math:`C_{X}`) between qubit 0 and qubit 1. - A Controlled-NOT operation between qubit 0 and qubit 2."
msgstr ""

#: ../../tutorials/circuits/01_circuit_basics.ipynb:66
msgid "On an ideal quantum computer, the state produced by running this circuit would be the GHZ state above."
msgstr "在理想的量子計算機上，執行此電路所產生的會是上文提及的 GHZ 態。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:68
msgid "In Qiskit, operations can be added to the circuit one by one, as shown below."
msgstr "在 Qiskit 中，多個操作可以被依次增加到電路中，如下所示。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:121
msgid "Visualize Circuit"
msgstr "電路視覺化"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:123
msgid "You can visualize your circuit using Qiskit ``QuantumCircuit.draw()``, which plots the circuit in the form found in many textbooks."
msgstr "您可以使用 Qiskit ``QuantumCircuit.draw()`` 視覺化您的電路，該方法會以許多教科書中的形式繪製電路。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:153
msgid "In this circuit, the qubits are put in order, with qubit zero at the top and qubit two at the bottom. The circuit is read left to right (meaning that gates that are applied earlier in the circuit show up further to the left)."
msgstr "在此電路中，量子位元是照順序排列的，qubit 0 在頂端，而 qubit 1在底端。電路是由左至右讀取（表示在電路中較早應用的門會顯示在左側）。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:168
msgid "When representing the state of a multi-qubit system, the tensor order used in Qiskit is different than that used in most physics textbooks. Suppose there are :math:`n` qubits, and qubit :math:`j` is labeled as :math:`Q_{j}`. Qiskit uses an ordering in which the :math:`n^{\\mathrm{th}}` qubit is on the left side of the tensor product, so that the basis vectors are labeled as :math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0`."
msgstr "在表示多量子位系統的狀態時，Qiskit 中使用的張量順序與大多數物理教科書中所使用的不同。假設有 :math:`n` 個量子元位，其中第 :math:`j` 個被標記為 :math:`Q_{j}`。Qiskit 使用的順序是第 :math:`n` 個 qubit 放在張量積的最左邊，所以基底向量被標記為 :math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0`。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:170
msgid "For example, if qubit zero is in state 0, qubit 1 is in state 0, and qubit 2 is in state 1, Qiskit would represent this state as :math:`|100\\rangle`, whereas many physics textbooks would represent it as :math:`|001\\rangle`."
msgstr "例如說，如果 qubit 0 處於狀態 0，qubit 1 處於狀態 0，而 qubit 2 在狀態 1 中，Qiskit 將表示此狀態為  :math:`|100\\rangle`，而許多物理教科書將代表它為 :math:`|001\\rangle`。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:172
msgid "This difference in labeling affects the way multi-qubit operations are represented as matrices. For example, Qiskit represents a controlled-X (:math:`C_{X}`) operation with qubit 0 being the control and qubit 1 being the target as"
msgstr "此標記差異會影響多量子位元操作的矩陣表示的。例如，Qiskit 代表 controlled-X（:math:`C_{X}`）操作中，qubit 0 是控制位元，qubit 1 是目標位元。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:174
msgid "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}.\n\n"
msgstr "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}.\n\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:190
msgid "Simulating circuits"
msgstr "電路模擬"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:192
msgid "To simulate a circuit we use the quant_info module in Qiskit. This simulator returns the quantum state, which is a complex vector of dimensions :math:`2^n`, where :math:`n` is the number of qubits (so be careful using this as it will quickly get too large to run on your machine)."
msgstr "若要模擬一個電路，我們需使用 Qiskit 中的 quant_info 模組。這個模擬器會傳回維度是 :math:`2^n` 的複數向量所描述的量子狀態，其中 :math:`n` 是量子位元的數目（由於計算量會隨之迅速增加，甚至無法在您的電腦上執行，所以請謹慎使用）。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:194
msgid "There are two stages to the simulator. The first is to set the input state and the second to evolve the state by the quantum circuit."
msgstr "模擬器的工作有兩個階段。第一階段是設定輸入的狀態，而第二階段則是利用量子電路來演化該狀態。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:224
#: ../../tutorials/circuits/01_circuit_basics.ipynb:254
msgid "$$\n\n"
"\\begin{bmatrix}\n"
"\\tfrac{1}{\\sqrt{2}} & 0 & 0 & 0 & 0 & 0 & 0 & \\tfrac{1}{\\sqrt{2}}  \\\\\n"
" \\end{bmatrix}\n"
"$$"
msgstr "$$\n\n"
"\\begin{bmatrix}\n"
"\\tfrac{1}{\\sqrt{2}} & 0 & 0 & 0 & 0 & 0 & 0 & \\tfrac{1}{\\sqrt{2}}  \\\\\n"
" \\end{bmatrix}\n"
"$$"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:271
msgid "Qiskit also provides a visualization toolbox to allow you to view the state."
msgstr "Qiskit 還提供了視覺化工具盒，讓您檢視狀態。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:273
msgid "Below, we use the visualization function to plot the qsphere and a hinton representing the real and imaginary components of the state density matrix :math:`\\rho`."
msgstr "下面，我們使用視覺化功能來繪製 Q-sphere 和 Hinton 圖，代表狀態密度矩陣 :math:`\\rho` 的實部和虛部。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:323
msgid "Unitary representation of a circuit"
msgstr "電路的么正表示"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:334
msgid "Qiskit’s quant_info module also has an operator method which can be used to make a unitary operator for the circuit. This calculates the :math:`2^n \\times 2^n` matrix representing the quantum circuit."
msgstr "Qiskit 的 quant_info 模組也有一個操作方法，可以用來對電路進行么正運算的操作。它可用於計算代表量子電路的 :math:`2^n \\times 2^n` 矩陣。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:454
msgid "OpenQASM backend"
msgstr "OpenQASM 後端"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:465
msgid "The simulators above are useful because they provide information about the state output by the ideal circuit and the matrix representation of the circuit. However, a real experiment terminates by *measuring* each qubit (usually in the computational :math:`|0\\rangle, |1\\rangle` basis). Without measurement, we cannot gain information about the state. Measurements cause the quantum system to collapse into classical bits."
msgstr "上面的模擬器很有用，因為它們提供了由理想電路輸出的狀態以及電路的矩陣表示。 不過，實際實驗會終止 *測量* 每一個 qubit （通常在計算 `|0\\rangle， |1\\rangle`基底）。 在沒有測量的情況下，我們無法獲得有關狀態的資訊。 測量使量子系統崩潰為古典的位元。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:467
msgid "For example, suppose we make independent measurements on each qubit of the three-qubit GHZ state"
msgstr "例如，假設我們在三量子位元 GHZ 狀態的每一個位元上進行獨立測量"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:469
msgid "|\\psi\\rangle = (|000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"
msgstr "|\\psi\\rangle = (|000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:471
msgid "and let :math:`xyz` denote the bitstring that results. Recall that, under the qubit labeling used by Qiskit, :math:`x` would correspond to the outcome on qubit 2, :math:`y` to the outcome on qubit 1, and :math:`z` to the outcome on qubit 0."
msgstr "並讓 :math:`xyz` 表示各個位元的結果字串。Qiskit 可通過各量子位元的標簽調用，:math:`x` 對應於 qubit 2 的結果、:math:`y` 對應於 qubit 1 的結果，而 :math:`z` 對應於 qubit 0 的結果。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:477
msgid "Note: This representation of the bitstring puts the most significant bit (MSB) on the left, and the least significant bit (LSB) on the right. This is the standard ordering of binary bitstrings. We order the qubits in the same way (qubit representing the MSB has index 0), which is why Qiskit uses a non-standard tensor product order."
msgstr "附註：我們利用二進位字串的標準排序，將最重要的位元（MSB）放在左邊，而將最不重要的位元（LSB）放在右邊。我們以相同方式排列量子位元（代表 MSB 量子位元的標簽為 0）。這就是為什麼 Qiskit 使用非標準張量積排序。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:483
msgid "Recall the probability of obtaining outcome :math:`xyz` is given by"
msgstr "依前所述，獲得 :math:`xyz` 結果的機率可以表時為"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:485
msgid "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"
msgstr "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:487
msgid "and as such for the GHZ state probability of obtaining 000 or 111 are both 1/2."
msgstr "從而，由 GHZ 狀態獲得結果 000 或 111 的概率都是 1/2。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:489
msgid "To simulate a circuit that includes measurement, we need to add measurements to the original circuit above, and use a different Aer backend."
msgstr "若要模擬包含測量的電路，我們需要將測量方法新增至上方的原始電路，並使用不同的 Aer 後端。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:531
msgid "This circuit adds a classical register, and three measurements that are used to map the outcome of qubits to the classical bits."
msgstr "這個電路新增了一個古典暫存器與三個測量操作，它們將量子位元的測量結果一一映射到古典位元上。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:533
msgid "To simulate this circuit, we use the ``qasm_simulator`` in Qiskit Aer. Each run of this circuit will yield either the bitstring 000 or 111. To build up statistics about the distribution of the bitstrings (to, e.g., estimate :math:`\\mathrm{Pr}(000)`), we need to repeat the circuit many times. The number of times the circuit is repeated can be specified in the ``execute`` function, via the ``shots`` keyword."
msgstr "如果要模擬此電路，我們使用 Qiskit Aer 中的 ``qasm_simulator``。每一個執行此電路都會輸出位元字串 000 或 111。如果統計輸出位元字串的分佈（例如，估計得到 :math:`\\mathrm{Pr}(000)` 的幾率），我們需要多次重複此電路。在 ``execute`` 函數中，透過關鍵字 ``shots``，可以指定電路重複的次數。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:574
msgid "Once you have a result object, you can access the counts via the function ``get_counts(circuit)``. This gives you the *aggregated* binary outcomes of the circuit you submitted."
msgstr "當您有結果之後，您可以透過函數 ``get_counts(circuit)`` 來獲得計數。 這會 *集中* 給您所提交電路的二進位結果。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:619
msgid "Approximately 50 percent of the time, the output bitstring is 000. Qiskit also provides a function ``plot_histogram``, which allows you to view the outcomes."
msgstr "大約 50% 的機率，輸出位元串是 000。Qiskit 還提供了 ``plot_histogram`` 函數，可讓您檢視結果。"

#: ../../tutorials/circuits/01_circuit_basics.ipynb:650
msgid "The estimated outcome probabilities :math:`\\mathrm{Pr}(000)` and :math:`\\mathrm{Pr}(111)` are computed by taking the aggregate counts and dividing by the number of shots (times the circuit was repeated). Try changing the ``shots`` keyword in the ``execute`` function and see how the estimated probabilities change."
msgstr "要估計結果為 :math:`\\mathrm{Pr}(000)` 和 :math:`\\mathrm{Pr}(111)` 幾率，需分別由結果的總計數除以電路回復的次數得到。請嘗試變更 ``execute`` 函數中的關鍵字 ``shots``，來查看估計機率如何變化。"

