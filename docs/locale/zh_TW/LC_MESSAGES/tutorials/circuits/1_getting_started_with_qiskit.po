msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:25+0000\n"
"PO-Revision-Date: 2023-03-16 11:59\n"
"Last-Translator: \n"
"Language: zh\n"
"Language-Team: Chinese Traditional\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits/1_getting_started_with_qiskit.po\n"
"X-Crowdin-File-ID: 9114\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:10
msgid "This page was generated from `tutorials/circuits/1_getting_started_with_qiskit.ipynb`__."
msgstr "這個頁面是從 `tutorials/circuits/1_getting_started_with_qiskit.ipynb`__ 產生的。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:9
msgid "Getting Started with Qiskit"
msgstr "Qiskit 入門"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:11
msgid "Here, we provide an overview of working with Qiskit. The fundamental package of Qiskit is Terra that provides the basic building blocks necessary to program quantum computers. The fundamental unit of Qiskit is the `quantum circuit <https://en.wikipedia.org/wiki/Quantum_circuit>`__. A basic workflow using Qiskit consists of two stages: **Build** and **Execute**. **Build** allows you to make different quantum circuits that represent the problem you are solving, and **Execute** that allows you to run them on different backends. After the jobs have been run, the data is collected and postprocessed depending on the desired output."
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:36
msgid "Circuit Basics"
msgstr "基礎電路"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:39
msgid "Building the circuit"
msgstr "建立電路"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:41
msgid "The basic element needed for your first program is the QuantumCircuit. We begin by creating a ``QuantumCircuit`` comprised of three qubits."
msgstr "您第一個程式所需的基本元素是 QuantumCircuit。我們先建立一個由三個量子位元組成的 “量子電路”"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:63
msgid "After you create the circuit with its registers, you can add gates (\"operations\") to manipulate the registers. As you proceed through the tutorials you will find more gates and circuits; below is an example of a quantum circuit that makes a three-qubit GHZ state"
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:65
msgid "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}.\n\n"
msgstr "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}.\n\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:67
msgid "To create such a state, we start with a three-qubit quantum register. By default, each qubit in the register is initialized to :math:`|0\\rangle`. To make the GHZ state, we apply the following gates: - A Hadamard gate :math:`H` on qubit :math:`q_{0}`, which puts it into the superposition state :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}`. - A controlled-Not operation (:math:`C_{X}`) between qubit :math:`q_{0}` and qubit :math:`q_{1}`. - A controlled-Not operation between qubit :math:`q_{0}` and qubit :math:`q_{2}`."
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:70
msgid "On an ideal quantum computer, the state produced by running this circuit would be the GHZ state above."
msgstr "在理想的量子計算機上，執行此電路所產生的結果會是上述提及的 GHZ 態。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:72
msgid "In Qiskit, operations can be added to the circuit one by one, as shown below."
msgstr "在 Qiskit 中，多個操作可以被依次增加到電路中，如下所示。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:126
msgid "Visualize Circuit"
msgstr "電路視覺化"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:128
msgid "You can visualize your circuit using Qiskit ``QuantumCircuit.draw()``, which plots the circuit in the form found in many textbooks."
msgstr "您可以用 Qiskit ``QuantumCircuit.draw()`` 將你的程式碼視覺化，是許多教科書會採用的電路畫法"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:158
msgid "In this circuit, the qubits are put in order, with qubit :math:`q_{0}` at the top and qubit :math:`q_{2}` at the bottom. The circuit is read left to right (meaning that gates that are applied earlier in the circuit show up further to the left)."
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:173
msgid "When representing the state of a multi-qubit system, the tensor order used in Qiskit is different than that used in most physics textbooks. Suppose there are :math:`n` qubits, and qubit :math:`j` is labeled as :math:`Q_{j}`. Qiskit uses an ordering in which the :math:`n^{\\mathrm{th}}` qubit is on the left side of the tensor product, so that the basis vectors are labeled as :math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0`."
msgstr "在表示多量子位系統的狀態時，Qiskit 中使用的張量順序與大多數物理教科書中所使用的不同。假設有 :math:`n` 個量子元位，其中第 :math:`j` 個被標記為 :math:`Q_{j}`。Qiskit 使用的順序是第 :math:`n^{\\mathrm{th}} 個 qubit 放在張量積的最左邊，所以基底向量被標記為 :math:`Q_{n-1}\\otimes \\cdots \\otimes Q_1\\otimes Q_0`。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:175
msgid "For example, if qubit :math:`Q_{0}` is in state 0, qubit :math:`Q_{1}` is in state 0, and qubit :math:`Q_{2}` is in state 1, Qiskit would represent this state as :math:`|100\\rangle`, whereas many physics textbooks would represent it as :math:`|001\\rangle`."
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:177
msgid "This difference in labeling affects the way multi-qubit operations are represented as matrices. For example, Qiskit represents a controlled-X (:math:`C_{X}`) operation with qubit :math:`Q_{0}` being the control and qubit :math:`Q_{1}` being the target as"
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:179
msgid "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}.\n\n"
msgstr "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}.\n\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:195
msgid "Simulating circuits using Qiskit Aer"
msgstr "用 Qiskit Aer 模擬電路"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:197
msgid "Qiskit Aer is our package for simulating quantum circuits. It provides many different backends for doing a simulation. There is also a basic, Python only, implementation called ``BasicAer`` in Terra that can be used as a drop-in replacement for ``Aer`` in the examples below."
msgstr "Qiskit Aer 是我們用於模擬量子電路的套件，它提供不同的後臺進行模擬，Terra 中也有一個基本但僅限用 Python 實現的套件，稱作 \"BasicAer\"，可以用於當作 \"Aer\" 的替代，我們將在下方做範例。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:200
msgid "Statevector backend"
msgstr "狀態向量後臺"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:202
msgid "The most common backend in Qiskit Aer is the ``statevector_simulator``. This simulator returns the quantum state, which is a complex vector of dimensions :math:`2^n`, where :math:`n` is the number of qubits (so be careful using this as it will quickly get too large to run on your machine)."
msgstr "Qiskit Aer 最常見的後臺是 ``statevector_simulator``。這個模擬器會傳回維度是 :math:`2^n` 的複數向量所描述的量子狀態，其中 :math:`n` 是量子位元的數目（由於計算量會隨之迅速增加，甚至無法在您的電腦上執行，所以請謹慎使用）。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:213
msgid "To run the above circuit using the statevector simulator, first you need to import Aer and then set the backend to ``statevector_simulator``."
msgstr "為了用 statevector simulator 執行上述電路，首先我們要引入 Aer，接著將 backend 設定為 ``statevector_simulator``。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:238
msgid "Now that we have chosen the backend, it's time to compile and run the quantum circuit. In Qiskit we provide the ``run`` method for this. ``run`` returns a ``job`` object that encapsulates information about the job submitted to the backend."
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:244
msgid "Tip: You can obtain the above parameters in Jupyter. Simply place the text cursor on a function and press Shift+Tab."
msgstr "提示：你可以在 Jypyter 裡獲得上述的參數，只要簡單地將文本放在函數上，或是按鍵盤上的 Shift+Tab。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:270
msgid "When you run a program, a job object is made that has the following two useful methods: ``job.status()`` and ``job.result()``, which return the status of the job and a result object, respectively."
msgstr "當你執行程式時，生成的 job 物件具有以下兩個有用的方法：“job.status()” 和 “job.result()”，它們分別傳回 job 的狀態和結果物件。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:276
msgid "Note: Jobs run asynchronously, but when the result method is called, it switches to synchronous and waits for it to finish before moving on to another task."
msgstr "備註：job 的運行不是同步的，但當呼叫 result 方法時，它會切換到同步並等待它完成，才會繼續執行下一個作業。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:301
msgid "The results object contains the data and Qiskit provides the method ``result.get_statevector(circ)`` to return the state vector for the quantum circuit."
msgstr "結果物件包含數據，Qiskit 提供一種方法 ``result.get_statevector(circ)`` 以傳回量子電路的狀態向量。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:350
msgid "Qiskit also provides a visualization toolbox to allow you to view these results."
msgstr "Qiskit 亦提供了視覺化工具箱，讓您檢視狀態。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:352
msgid "Below, we use the visualization function to plot the real and imaginary components of the state density matrix :math:`\\rho`."
msgstr "下面我們會用視覺化函數繪製狀態密度矩陣 :math:`\\rho` 的實部和虛部。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:384
msgid "Unitary backend"
msgstr "么正後臺"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:395
msgid "Qiskit Aer also includes a ``unitary_simulator`` that works *provided all the elements in the circuit are unitary operations*. This backend calculates the :math:`2^n \\times 2^n` matrix representing the gates in the quantum circuit."
msgstr "Qiskit Aer 亦提供只要*電路中所有元素都是么正操作*就能使用的 ``unitary_simulator``。這個後臺可以計算量子電路中閘操作的 :math:`2^n \\times 2^n`矩陣表示。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:492
msgid "OpenQASM backend"
msgstr "OpenQASM 後臺"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:503
msgid "The simulators above are useful because they provide information about the state output by the ideal circuit and the matrix representation of the circuit. However, a real experiment terminates by *measuring* each qubit (usually in the computational :math:`|0\\rangle, |1\\rangle` basis). Without measurement, we cannot gain information about the state. Measurements cause the quantum system to collapse into classical bits."
msgstr "上述的模擬器很有用，因為它們提供了理想電路輸出的狀態與以矩陣表示的電路。 然而實際上，qubit 的量子態會因為測量而終止（通常落在 :math:`|0\\rangle, |1\\rangle` basis）。 在沒有測量的情況下，我們無法獲得 qubit 的量子態。 測量會使量子系統塌縮為古典位元。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:505
msgid "For example, suppose we make independent measurements on each qubit of the three-qubit GHZ state"
msgstr "例如，假設我們在三量子位元 GHZ 狀態的每一個位元上進行獨立測量"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:507
msgid "|\\psi\\rangle = (|000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"
msgstr "|\\psi\\rangle = (|000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:509
msgid "and let :math:`xyz` denote the bitstring that results. Recall that, under the qubit labeling used by Qiskit, :math:`x` would correspond to the outcome on qubit :math:`q_{2}`, :math:`y` to the outcome on qubit :math:`q_{1}`, and :math:`z` to the outcome on qubit :math:`q_{0}`."
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:515
msgid "Note: This representation of the bitstring puts the most significant bit (MSB) on the left, and the least significant bit (LSB) on the right. This is the standard ordering of binary bitstrings. We order the qubits in the same way (qubit representing the MSB has index 0), which is why Qiskit uses a non-standard tensor product order."
msgstr "附註：我們利用二進位字串的標準排序，將最重要的位元（MSB）放在左邊，而將最不重要的位元（LSB）放在右邊。我們以相同方式排列量子位元（代表 MSB 量子位元的標簽為 0）。這就是為什麼 Qiskit 使用非標準張量積排序。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:521
msgid "Recall the probability of obtaining outcome :math:`xyz` is given by"
msgstr "依前所述，獲得 :math:`xyz` 結果的機率可以表示為"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:523
msgid "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"
msgstr "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:525
msgid "and as such for the GHZ state probability of obtaining 000 or 111 are both 1/2."
msgstr "然後，由 GHZ 狀態獲得 000 或 111 結果的機率都是 1/2。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:527
msgid "To simulate a circuit that includes measurement, we need to add measurements to the original circuit above, and use a different Aer backend."
msgstr "若要模擬包含測量的電路，我們需要將測量方法新增至上方的原始電路，並使用不同的 Aer 後臺。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:630
msgid "This circuit adds a classical register, and three measurements that are used to map the outcome of qubits to the classical bits."
msgstr "此電路新增了一個古典暫存器與三個測量操作，它們將量子位元的測量結果一一映射到古典位元上。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:632
msgid "To simulate this circuit, we use the ``qasm_simulator`` in Qiskit Aer. Each run of this circuit will yield either the bitstring 000 or 111. To build up statistics about the distribution of the bitstrings (to, e.g., estimate :math:`\\mathrm{Pr}(000)`), we need to repeat the circuit many times. The number of times the circuit is repeated can be specified in the ``run`` method, via the ``shots`` keyword."
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:662
msgid "Once you have a result object, you can access the counts via the function ``get_counts(circuit)``. This gives you the *aggregated* binary outcomes of the circuit you submitted."
msgstr "當您得到結果後，您可以透過函數 ``get_counts(circuit)`` 來獲得計數。 這會 *集中* 給您所提交電路的二進位結果。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:708
msgid "Approximately 50 percent of the time, the output bitstring is 000. Qiskit also provides a function ``plot_histogram``, which allows you to view the outcomes."
msgstr "從下圖中可以看出，輸出位元串為 000 的機率約 50% 。Qiskit 還提供了 ``plot_histogram`` 函數，可讓您檢視結果。"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:739
msgid "The estimated outcome probabilities :math:`\\mathrm{Pr}(000)` and :math:`\\mathrm{Pr}(111)` are computed by taking the aggregate counts and dividing by the number of shots (times the circuit was repeated). Try changing the ``shots`` keyword in the ``run`` method and see how the estimated probabilities change."
msgstr ""

