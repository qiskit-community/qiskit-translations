msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-17 13:53+0000\n"
"PO-Revision-Date: 2022-06-17 14:49\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/contributing_to_qiskit.po\n"
"X-Crowdin-File-ID: 9532\n"
"Language: zh_TW\n"

#: ../../contributing_to_qiskit.rst:4
msgid "Contributing to Qiskit"
msgstr "如何為 Qiskit 做出貢獻"

#: ../../contributing_to_qiskit.rst:6
msgid "Qiskit is an open-source project committed to bringing quantum computing to people of all backgrounds. This page describes how you can join the Qiskit community in this goal."
msgstr "Qiskit 是一個開源專案，致力於將量子計算帶給所有人。 此頁面說明如何加入 Qiskit 社群。"

#: ../../contributing_to_qiskit.rst:14
msgid "Where Things Are"
msgstr "Qiskit 導覽"

#: ../../contributing_to_qiskit.rst:16
msgid "The code for Qiskit is located in the `Qiskit GitHub organization <https://github.com/Qiskit>`__, where you can find the individual projects that make up Qiskit, including"
msgstr "Qiskit 的程式碼位於 `Qiskit GitHub organization <https://github.com/Qiskit>`__，您可以在其中找到構成 Qiskit 的個別項目，包括"

#: ../../contributing_to_qiskit.rst:19
msgid "`Qiskit Terra <https://github.com/Qiskit/qiskit-terra>`__"
msgstr "`Qiskit Terra <https://github.com/Qiskit/qiskit-terra>`__"

#: ../../contributing_to_qiskit.rst:20
msgid "`Qiskit Aer <https://github.com/Qiskit/qiskit-aer>`__"
msgstr "`Qiskit Aer <https://github.com/Qiskit/qiskit-aer>`__"

#: ../../contributing_to_qiskit.rst:21
msgid "`Qiskit Ignis <https://github.com/Qiskit/qiskit-ignis>`__"
msgstr "`Qiskit Ignis <https://github.com/Qiskit/qiskit-ignis>`__"

#: ../../contributing_to_qiskit.rst:22
msgid "`Qiskit IBMQ Provider <https://github.com/Qiskit/qiskit-ibmq-provider>`__"
msgstr "`Qiskit IBMQ Provider <https://github.com/Qiskit/qiskit-ibmq-provider>`__"

#: ../../contributing_to_qiskit.rst:23
msgid "`Qiskit Tutorials <https://github.com/Qiskit/qiskit-tutorials>`__"
msgstr "`Qiskit 指導教學 <https://github.com/Qiskit/qiskit-tutorials>`__"

#: ../../contributing_to_qiskit.rst:24
msgid "`Qiskit API Documentation <https://github.com/Qiskit/qiskit/tree/master/docs>`__"
msgstr "`Qiskit API 文件 <https://github.com/Qiskit/qiskit/tree/master/docs>`__"

#: ../../contributing_to_qiskit.rst:29
msgid "Getting Started"
msgstr ""

#: ../../contributing_to_qiskit.rst:31
msgid "Learn how members of the Qiskit community"
msgstr "瞭解 Qiskit 社群的成員如何"

#: ../../contributing_to_qiskit.rst:33
msgid "`Relate to one another <https://github.com/Qiskit/qiskit/blob/master/CODE_OF_CONDUCT.md>`__"
msgstr "`相互聯繫 <https://github.com/Qiskit/qiskit/blob/master/CODE_OF_CONDUCT.md>`__"

#: ../../contributing_to_qiskit.rst:34
msgid "`Discuss ideas <https://qiskit.slack.com/>`__"
msgstr "`討論想法 <https://qiskit.slack.com/>`__"

#: ../../contributing_to_qiskit.rst:35
msgid "`Get help when we're stuck <https://quantumcomputing.stackexchange.com/questions/tagged/qiskit>`__"
msgstr "`尋求協助 <https://quantumcomputing.stackexchange.com/questions/tagged/qiskit>`__"

#: ../../contributing_to_qiskit.rst:36
msgid "`Stay informed of news in the community <https://medium.com/qiskit>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:37
msgid "`Keep a consistent style <https://www.python.org/dev/peps/pep-0008>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:38
msgid ":ref:`Build Qiskit packages from source <install_install_from_source_label>`"
msgstr ":ref:`從源代碼構建 Qiskit 包 <install_install_from_source_label>`"

#: ../../contributing_to_qiskit.rst:44
msgid "Reporting Bugs and Requesting Enhancements"
msgstr "報告錯誤及要求加強功能"

#: ../../contributing_to_qiskit.rst:46
msgid "When you encounter a problem, please open an issue in the appropriate element's issue tracker:"
msgstr ""

#: ../../contributing_to_qiskit.rst:51 ../../contributing_to_qiskit.rst:139
msgid "Element"
msgstr "元素"

#: ../../contributing_to_qiskit.rst:51
msgid "Issue Tracker"
msgstr ""

#: ../../contributing_to_qiskit.rst:53 ../../contributing_to_qiskit.rst:141
msgid "qiskit-terra"
msgstr "qiskit-terra"

#: ../../contributing_to_qiskit.rst:53
msgid "https://github.com/Qiskit/qiskit-terra/issues"
msgstr "https://github.com/Qiskit/qiskit-terra/issues"

#: ../../contributing_to_qiskit.rst:54 ../../contributing_to_qiskit.rst:142
msgid "qiskit-aer"
msgstr "qiskit-aer"

#: ../../contributing_to_qiskit.rst:54
msgid "https://github.com/Qiskit/qiskit-aer/issues"
msgstr "https://github.com/Qiskit/qiskit-aer/issues"

#: ../../contributing_to_qiskit.rst:55 ../../contributing_to_qiskit.rst:143
msgid "qiskit-ignis"
msgstr "qiskit-ignis"

#: ../../contributing_to_qiskit.rst:55
msgid "https://github.com/Qiskit/qiskit-ignis/issues"
msgstr "https://github.com/Qiskit/qiskit-ignis/issues"

#: ../../contributing_to_qiskit.rst:56 ../../contributing_to_qiskit.rst:144
msgid "Docs or Qiskit Meta-package"
msgstr "Docs 或 Qiskit Meta 套件"

#: ../../contributing_to_qiskit.rst:56
msgid "https://github.com/Qiskit/qiskit/issues"
msgstr "https://github.com/Qiskit/qiskit/issues"

#: ../../contributing_to_qiskit.rst:59
msgid "If you have an idea for a new feature, please open an **Enhancement** issue in the appropriate element's issue tracker. Opening an issue starts a discussion with the team about your idea, how it fits in with the project, how it can be implemented, etc."
msgstr ""

#: ../../contributing_to_qiskit.rst:67
msgid "Contributing Code"
msgstr ""

#: ../../contributing_to_qiskit.rst:72
msgid "Style Guide"
msgstr ""

#: ../../contributing_to_qiskit.rst:74
msgid "To enforce a consistent code style in the project, we use `Pylint <https://www.pylint.org>`__ and `pycodestyle <https://pycodestyle.readthedocs.io/en/latest/>`__ to verify that code contributions conform to and respect the project's style guide. To verify that your changes conform to the style guide, run: ``tox -elint``"
msgstr ""

#: ../../contributing_to_qiskit.rst:83
msgid "Contributor License Agreement"
msgstr ""

#: ../../contributing_to_qiskit.rst:85
msgid "Before you can submit any code, all contributors must sign a contributor license agreement (CLA). By signing a CLA, you're attesting that you are the author of the contribution, and that you're freely contributing it under the terms of the Apache-2.0 license."
msgstr ""

#: ../../contributing_to_qiskit.rst:90
msgid "When you contribute to the Qiskit project with a new pull request, a bot will evaluate whether you have signed the CLA. If required, the bot will comment on the pull request, including a link to accept the agreement. The `individual CLA <https://qiskit.org/license/qiskit-cla.pdf>`__ document is available for review as a PDF."
msgstr ""

#: ../../contributing_to_qiskit.rst:97
msgid "If your contribution is part of your employment or your contribution is the property of your employer, then you will more than likely need to sign a `corporate CLA <https://qiskit.org/license/qiskit-corporate-cla.pdf>`__ too and email it to us at <qiskit@us.ibm.com>."
msgstr ""

#: ../../contributing_to_qiskit.rst:105 ../../contributing_to_qiskit.rst:139
msgid "Pull Requests"
msgstr ""

#: ../../contributing_to_qiskit.rst:107
msgid "We use `GitHub pull requests <https://help.github.com/articles/about-pull-requests>`__ to accept contributions."
msgstr ""

#: ../../contributing_to_qiskit.rst:111
msgid "While not required, opening a new issue about the bug you're fixing or the feature you're working on before you open a pull request is an important step in starting a discussion with the community about your work. The issue gives us a place to talk about the idea and how we can work together to implement it in the code. It also lets the community know what you're working on, and if you need help, you can reference the issue when discussing it with other community and team members."
msgstr ""

#: ../../contributing_to_qiskit.rst:119
msgid "If you've written some code but need help finishing it, want to get initial feedback on it prior to finishing it, or want to share it and discuss prior to finishing the implementation, you can open a *Work in Progress* pull request. When you create the pull request, prepend the title with the **\\[WIP\\]** tag (for Work In Progress). This will indicate to reviewers that the code in the PR isn't in its final state and will change. It also means that we will not merge the commit until it is finished. You or a reviewer can remove the [WIP] tag when the code is ready to be fully reviewed for merging."
msgstr ""

#: ../../contributing_to_qiskit.rst:131
msgid "Code Review"
msgstr ""

#: ../../contributing_to_qiskit.rst:133
msgid "Code review is done in the open and is open to anyone. While only maintainers have access to merge commits, community feedback on pull requests is extremely valuable. It is also a good mechanism to learn about the code base. You can view a list of all open pull requests here:"
msgstr ""

#: ../../contributing_to_qiskit.rst:141
msgid "https://github.com/Qiskit/qiskit-terra/pulls"
msgstr "https://github.com/Qiskit/qiskit-terra/pulls"

#: ../../contributing_to_qiskit.rst:142
msgid "https://github.com/Qiskit/qiskit-aer/pulls"
msgstr "https://github.com/Qiskit/qiskit-aer/pulls"

#: ../../contributing_to_qiskit.rst:143
msgid "https://github.com/Qiskit/qiskit-ignis/pulls"
msgstr "https://github.com/Qiskit/qiskit-ignis/pulls"

#: ../../contributing_to_qiskit.rst:144
msgid "https://github.com/Qiskit/qiskit/pulls"
msgstr "https://github.com/Qiskit/qiskit/pulls"

#: ../../contributing_to_qiskit.rst:151
msgid "Commit Messages"
msgstr "提交訊息"

#: ../../contributing_to_qiskit.rst:153
msgid "The content of the commit message describing a change is just as important as the change itself. The commit message provides the context for not only code review but also the change history in the git log. A detailed commit message will make it easier for your code to be reviewed, and will also provide context to the change when someone looks at it in the future. When writing a commit message, remember these important details:"
msgstr ""

#: ../../contributing_to_qiskit.rst:166
msgid "Do not assume the reviewer understands what the original problem was."
msgstr ""

#: ../../contributing_to_qiskit.rst:161
msgid "When reading an issue, after a number of back & forth comments, it is often clear what the root cause problem is. The commit message should have a clear statement as to what the original problem is. The bug is merely interesting for historical background on *how* the problem was identified. It should be possible to review a proposed patch for correctness from the commit message, without needing to read the bug ticket."
msgstr ""

#: ../../contributing_to_qiskit.rst:171
msgid "Do not assume the code is self-evident/self-documenting."
msgstr ""

#: ../../contributing_to_qiskit.rst:169
msgid "What is self-evident to one person, might not be clear to another person. Always document what the original problem was and how it is being fixed, for any change except the most obvious typos, or whitespace-only commits."
msgstr ""

#: ../../contributing_to_qiskit.rst:177
msgid "Describe why a change is being made."
msgstr ""

#: ../../contributing_to_qiskit.rst:174
msgid "A common mistake is only to document how the code has been written, without describing *why* the developer chose to do it that way. Certainly, you should describe the overall code structure, particularly for large changes, but more importantly, be sure to describe the intent/motivation behind the changes."
msgstr ""

#: ../../contributing_to_qiskit.rst:182
msgid "Read the commit message to see if it hints at improved code structure."
msgstr ""

#: ../../contributing_to_qiskit.rst:180
msgid "Often when describing a large commit message, it becomes obvious that a commit should have been split into two or more parts. Don't be afraid to go back and rebase the change to split it up into separate pull requests."
msgstr ""

#: ../../contributing_to_qiskit.rst:189
msgid "Ensure sufficient information to decide whether to review."
msgstr ""

#: ../../contributing_to_qiskit.rst:185
msgid "When GitHub sends out email alerts for new pull request submissions, there is minimal information included - usually just the commit message and the list of files changes. Because of the high volume of patches, a commit message must contain sufficient information for potential reviewers to find the patch that they need to review."
msgstr ""

#: ../../contributing_to_qiskit.rst:200
msgid "The first commit line is the most important."
msgstr ""

#: ../../contributing_to_qiskit.rst:192
msgid "In Git commits, the first line of the commit message has special significance. It is used as the default pull request title, email notification subject line, git annotate messages, gitk viewer annotations, merge commit messages, and many more places where space is at a premium. As well as summarizing the change itself, it should take care to detail what part of the code is affected."
msgstr ""

#: ../../contributing_to_qiskit.rst:198
msgid "In addition, the first line of the commit message becomes an entry in the generated changelog if the PR is tagged as being included in the changelog. It is critically important that you write clear and succinct summary lines."
msgstr ""

#: ../../contributing_to_qiskit.rst:206
msgid "Describe any limitations of the current code."
msgstr ""

#: ../../contributing_to_qiskit.rst:203
msgid "If the code being changed still has future scope for improvements, or any known limitations, mention these in the commit message. This demonstrates to the reviewer that the broader picture has been considered, and what tradeoffs have been done in terms of short-term goals versus long-term wishes."
msgstr ""

#: ../../contributing_to_qiskit.rst:214
msgid "Include references to issues."
msgstr ""

#: ../../contributing_to_qiskit.rst:209
msgid "If the commit fixes are related to an issue, make sure you annotate that in the commit message. Use the syntax::"
msgstr ""

#: ../../contributing_to_qiskit.rst:214
msgid "if it fixes the issue (GitHub will close the issue when the PR merges)."
msgstr ""

#: ../../contributing_to_qiskit.rst:216
msgid "The main rule to follow is:"
msgstr "要遵循的主要規則是："

#: ../../contributing_to_qiskit.rst:218
msgid "The commit message must contain all the information required to fully understand and review the patch for correctness. Less is not more."
msgstr ""

#: ../../contributing_to_qiskit.rst:224
msgid "Documenting Your Code"
msgstr ""

#: ../../contributing_to_qiskit.rst:226
msgid "If you make a change to an element, make sure you update the associated *docstrings* and parts of the documentation under ``docs/apidocs`` in the corresponding repo. To locally build the element-specific documentation, run ``tox -edocs`` to compile and build the documentation locally and save the output to ``docs/_build/html``. Additionally, the Docs CI job on azure pipelines will run this and host a zip file of the output that you can download and view locally."
msgstr ""

#: ../../contributing_to_qiskit.rst:234
msgid "If you have an issue with the `combined documentation <https://qiskit.org/documentation/>`__ that is maintained in the `Qiskit/qiskit repo <https://github.com/Qiskit/qiskit>`__, you can open a `documentation issue <https://github.com/Qiskit/qiskit/issues/new/choose>`__ if you see doc bugs, have a new feature that needs to be documented, or think that material could be added to the existing docs."
msgstr ""

#: ../../contributing_to_qiskit.rst:243
msgid "Good First Contributions"
msgstr ""

#: ../../contributing_to_qiskit.rst:245
msgid "If you would like to contribute to Qiskit, but aren't sure where to get started, the ``good first issue`` label on issues for a project highlights items appropriate for people new to the project. These are all issues that have been reviewed and tagged by contributors as something a new contributor should be able to work on. In other words, intimate familiarity with Qiskit is not a requirement to develop a fix for the issue."
msgstr ""

#: ../../contributing_to_qiskit.rst:256
msgid "Deprecation Policy"
msgstr ""

#: ../../contributing_to_qiskit.rst:258
msgid "Qiskit users need to know if a feature or an API they rely upon will continue to be supported by the software tomorrow. Knowing under which conditions the project can remove (or change in a backwards-incompatible manner) a feature or API is important to the user. To manage expectations, the following policy is how API and feature deprecation/removal is handled by Qiskit:"
msgstr ""

#: ../../contributing_to_qiskit.rst:264
msgid "1. Features, APIs, or configuration options are marked deprecated in the code. Appropriate ``DeprecationWarning`` class warnings will be sent to the user. The deprecated code will be frozen and receive only minimal maintenance (just so that it continues to work as-is)."
msgstr ""

#: ../../contributing_to_qiskit.rst:269
msgid "2. A migration path will be documented for current users of the feature. This will be outlined in the both the release notes adding the deprecation, and the release notes removing the feature at the completion of the deprecation cycle. If feasible, the warning message will also include the migration path. A migration path might be \"stop using that feature\", but in such cases it is necessary to first judge how widely used and/or important the feature is to users, in order to determine a reasonable obsolescence date."
msgstr ""

#: ../../contributing_to_qiskit.rst:277
msgid "2a. The migration path must have existed in a least a prior release before the new feature can be deprecated. For example, if you have a function ``foo()`` which is going to be replaced with ``bar()`` you can't deprecate the ``foo()`` function in the same release that introduces ``bar()``. The ``bar()`` function needs to be available in a release prior to the deprecation of ``foo()``. This is necessary to enable downstream consumers of Qiskit that maintain their own libraries to write code that works with > 1 release at a time, which is important for the entire ecosystem. If you would like to indicate that a deprecation will be coming in a future release you can use the ``PendingDeprecationWarning``  warning to signal this. But, the deprecation period only begins after a ``DeprecationWarning`` is being emitted."
msgstr ""

#: ../../contributing_to_qiskit.rst:289
msgid "3. An obsolescence date for the feature will be set. The feature must remain intact and working (although with the proper warning being emitted) in all releases pushed until after that obsolescence date. At the very minimum, the feature (or API, or configuration option) should be marked as deprecated (and continue to be supported) for at least three months of linear time from the release date of the first release to include the deprecation warning. For example, if a feature were deprecated in the 0.9.0 release of Terra, which was released on August 22, 2019, then that feature should still appear in all releases until at least November 22, 2019."
msgstr ""

#: ../../contributing_to_qiskit.rst:299
msgid "Note that this delay is a minimum. For significant features, it is recommended that the deprecated feature appears for at least double that time. Also, per the stable branch policy, deprecation removals can only occur during minor version releases; they are not appropriate for backporting."
msgstr "注意這延遲只是最低要求。如果是重要的功能，被廢棄的功能的保留時間建議為最低要求的兩倍。此外，在穩定分支政策下，被廢棄的功能只能在次要版本發佈中移除，並應避免在向後移植的版本中移除該功能。"

#: ../../contributing_to_qiskit.rst:304
msgid "3a. A deprecated feature can not be removed unless it is deprecated in more than one release even if the minimum deprecation period has elapsed. For example, if a feature is deprecated in 0.20.0 which is released on January 20, 2022 and the next minor version release 0.21.0 is released on June 16, 2022 the deprecated feature can't be removed until the 0.22.0 release, even though 0.21.0 was more than three months after the 0.20.0 release. This is important because the point of the deprecation warnings are to inform users that a potentially breaking API change is coming and to give them a chance to adapt their code. However, many users skip versions (especially if there are a large numbers of changes in each release) and don't upgrade to every release, so might miss the warning if it's only present for a single minor version release."
msgstr ""

#: ../../contributing_to_qiskit.rst:318
msgid "Deprecation Warnings"
msgstr "淘汰警告"

#: ../../contributing_to_qiskit.rst:320
msgid "The proper way to raise a deprecation warning is to use the ``warn`` function from the `warnings module <https://docs.python.org/3/library/warnings.html>`__ in the Python standard library. The warning category class should be a ``DeprecationWarning``. An example would be::"
msgstr "提升淘汰警告的適當方式是使用 Python 標準程式庫中 `警告模組 <https://docs.python.org/3/library/warnings.html>`__ 的 ` `warn ` 函數 ' 。 警告類別應該是 ``DeprecationWarning``` 。範例如下："

#: ../../contributing_to_qiskit.rst:333
msgid "One thing to note here is the ``stack_level`` kwarg on the warn() call. This argument is used to specify which level in the call stack will be used as the line initiating the warning. Typically, ``stack_level`` should be set to 2, as this will show the line calling the context where the warning was raised. In the above example, it would be the caller of ``foo()``. If you did not set this, the warning would show that it was caused by the line in the foo() function, which is not helpful for users trying to determine the origin of a deprecated call. However, this value may be adjusted, depending on the call stack and where ``warn()`` gets called from. For example, if the warning is always raised by a private method that only has one caller, ``stack_level=3`` might be appropriate."
msgstr "這裡要注意的是 ` ` stack_level`` kwarg on the warn() 呼叫。 這個引數用以指定呼叫堆疊中的哪個級別將作為起始警告的行。 一般而言， ``stack_level`` 應該設為 2，因為這會顯示呼叫警告的字行。 在上述範例中，它將是 ``foo()`` 的呼叫者，若您尚未設定這個，那麼警告會顯示它是由 foo() 函數中的字行造成的，這對嘗試判定已淘汰呼叫來源的使用者而言是沒有幫助的。 不過，此值可能會根據呼叫堆疊以及在其中呼叫 ``warn()`` 取得的位置來調整。 例如：如果警告一律由只具有一個呼叫端的私有方法產生， ``` stack_level=3`` 可能是適當的。"

#: ../../contributing_to_qiskit.rst:349
msgid "Stable Branch Policy"
msgstr "穩定分支原則"

#: ../../contributing_to_qiskit.rst:351
msgid "The stable branch is intended to be a safe source of fixes for high-impact bugs and security issues that have been fixed on master since a release. When reviewing a stable branch PR, we must balance the risk of any given patch with the value that it will provide to users of the stable branch. Only a limited class of changes are appropriate for inclusion on the stable branch. A large, risky patch for a major issue might make sense, as might a trivial fix for a fairly obscure error-handling case. A number of factors must be weighed when considering a change:"
msgstr "穩定分支是為了給主分支提供從上一個發行版本以後，提供針對嚴重影響的錯誤或保安漏洞的修正。 在檢閱穩定分支的拉取請求時，我們必須平衡任何補丁給穩定分支的使用者帶來的風險及價值。 只有特定類別的變更適合併入穩定分支上。 例如一個重大有風險的補丁，如果是在針對一個嚴重問題時是可以接受的；又例如針對一些不起眼的問題的小修補也是可以接受的。 在考慮時，必須針對改動權衡以下幾個因素："

#: ../../contributing_to_qiskit.rst:361
msgid "The risk of regression: even the tiniest changes carry some risk of breaking something, and we really want to avoid regressions on the stable branch."
msgstr "回歸的風險：即使是最微小的變化也會帶來一些破壞的風險，我們真的很想避免在穩定的分支上發生回歸。"

#: ../../contributing_to_qiskit.rst:364
msgid "The user visibility benefit: are we fixing something that users might actually notice, and if so, how important is it?"
msgstr "使用者可見性好處：我們是否要修正使用者可能確實注意到的東西，如果是，那麼有多重要呢？"

#: ../../contributing_to_qiskit.rst:366
msgid "How self-contained the fix is: if it fixes a significant issue but also refactors a lot of code, it's probably worth thinking about what a less risky fix might look like."
msgstr "如何包含修正程式：如果它修正了一個重要問題，但也重構了許多程式碼，則可能值得思考的是，風險較低的修正程式可能是什麼樣子。"

#: ../../contributing_to_qiskit.rst:369
msgid "Whether the fix is already on master: a change must be a backport of a change already merged onto master, unless the change simply does not make sense on master."
msgstr ""

#: ../../contributing_to_qiskit.rst:376
msgid "Backporting procedure:"
msgstr ""

#: ../../contributing_to_qiskit.rst:378
msgid "When backporting a patch from master to stable, we want to keep a reference to the change on master. When you create the branch for the stable PR, use::"
msgstr "當將修補程式從主要伺服器移植到穩定時，我們想要保留對主要伺服器上變更的參照。 當您建立穩定 PR 的分支時，請使用："

#: ../../contributing_to_qiskit.rst:384
msgid "However, this only works for small self-contained patches from master. If you need to backport a subset of a larger commit (from a squashed PR, for example) from master, do this manually. In these cases, add::"
msgstr "然而，這只適用於來自主要的小型獨立修補程式。 如果您需要向後移植較大的提交子集(例如從壓縮的 PR)，請從主要伺服器中手動執行此操作。 在這些情況下，請新增：："

#: ../../contributing_to_qiskit.rst:390
msgid "so that we can track the source of the change subset, even if a strict cherry-pick doesn\\'t make sense."
msgstr "這樣我們就能追踪到變化子集的來源，即使嚴格的選擇沒有意義"

#: ../../contributing_to_qiskit.rst:393
msgid "If the patch you're proposing will not cherry-pick cleanly, you can help by resolving the conflicts yourself and proposing the resulting patch. Please keep Conflicts lines in the commit message to help review of the stable patch."
msgstr "如果你提議的補丁在 cherry-pick 時有衝突，您可以自行解決衝突，並提議產生的修補程式。 請將發生衝突的行數紀錄在在 commit message 中，以協助檢閱穩定分支的補丁。"

#: ../../contributing_to_qiskit.rst:401
msgid "Backport labels"
msgstr "後端標籤"

#: ../../contributing_to_qiskit.rst:403
msgid "Bugs or PRs tagged with ``stable backport potential`` are bugs that apply to the stable release too and may be suitable for backporting once a fix lands in master. Once the backport has been proposed, the tag should be removed."
msgstr "標記為“穩定向後移植潛力”的錯誤或 PR 也是適用於穩定版本的錯誤，且可能適合在主要伺服器中的修正區域上向後移植。 建議一旦向後移植之後，應移除標籤。"

#: ../../contributing_to_qiskit.rst:408
msgid "Include ``[Stable]`` in the title of the PR against the stable branch, as a sign that setting the target branch as stable was not a mistake. Also, reference to the PR number in master that you are porting."
msgstr "請將 ` `[Stable]`` 包含在穩定分支的PR標題中，作為將目標分支設定為穩定的標誌，不是錯誤的一個符號。 另外，請參照您正在移植的主要伺服器中的PR號碼。"

#: ../../contributing_to_qiskit.rst:417
msgid "Contributing to Documentation"
msgstr "貢獻文件"

#: ../../contributing_to_qiskit.rst:419
msgid "Qiskit documentation is shaped by the `docs as code <https://www.writethedocs.org/guide/docs-as-code/>`__ philosophy, primarily drawn from Qiskit code comments in the `style of API documentation <https://alistapart.com/article/the-ten-essentials-for-good-api-documentation/>`__."
msgstr "Qiskit 說明文件的形狀是由 `docs as code <https://www.writethedocs.org/guide/docs-as-code/>`__ 哲\n"
"學塑造，主要從在 `style of API documentation <https://alistapart.com/article/the-ten-essentials-for-good-api-documentation/>`__ 的Qiskit 程式碼註解。"

#: ../../contributing_to_qiskit.rst:424
msgid "The documentation is built from the master branch of `Qiskit/qiskit/docs <https://github.com/Qiskit/qiskit/tree/master/docs>`__ using `Sphinx <http://www.sphinx-doc.org/en/master/>`__. The majority of documentation, under `API Reference <https://qiskit.org/documentation/apidoc/qiskit.html>`__, is drawn from code comments in the repositories listed in :ref:`where_things_are`."
msgstr "文件是使用 ` Qiskit/qiskit/docs <https://github.com/Qiskit/qiskit/tree/master/docs>`__ 的主要分支來建置，使用 `squinx <http://www.sphinx-doc.org/en/master/>`__` __。 在 `API Reference <https://qiskit.org/documentation/apidoc/qiskit.html>`__ 下的大部分文件，是從 :ref:`where_things_are` 列出的儲存庫中的程式碼註解中繪製。"

#: ../../contributing_to_qiskit.rst:433
msgid "Documentation Structure"
msgstr "文件結構"

#: ../../contributing_to_qiskit.rst:435
msgid "The way documentation is structured in Qiskit is to push as much of the actual documentation into the docstrings as possible. This makes it easier for additions and corrections to be made during development, because the majority of the documentation lives near the code being changed. There are three levels in the normal documentation structure in Terra:"
msgstr "在 Qiskit 中，文件的建構方式是盡可能將實際文件放到 docstrings 中。 這使得在開發過程中的新增和更正變得更容易，因為大部分的文件都在被改變的程式碼附近。 在 Terra 的文件結構中，一般有三個層次："

#: ../../contributing_to_qiskit.rst:463
msgid "The ``.rst`` files in the ``docs/apidocs``"
msgstr "``docs/apidocs`` 中的 ` `.rst` ` 檔案"

#: ../../contributing_to_qiskit.rst:442
msgid "These files are used to tell Sphinx which modules to include in the rendered documentation. This contains two pieces of information: an `internal reference <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#reference-names>`__ or `cross reference <https://www.sphinx-doc.org/en/latest/usage/restructuredtext/roles.html#ref-role>`__ to the module, which can be used for internal links inside the documentation, and an `automodule directive <http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`__ used to parse the module docstrings from a specified import path. For example, the ``dagcircuit.rst`` file contains::"
msgstr ""

#: ../../contributing_to_qiskit.rst:460
msgid "The only ``.rst`` file outside of this is ``qiskit.rst``, which contains the table of contents. If you're adding a new ``.rst`` file for a new module's documentation, make sure to add it to the `toctree <https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#table-of-contents>`__ in that file."
msgstr "在外部的唯一 ` `.rst` ` 檔案是 ``qiskit.rst`` ，該檔案包含目錄。 如果您要在新模組的文件中新增 ``.rst`` 檔案，請務必將它新增至該檔案中的 `tocttree <https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#table-of-contents>`__ 。"

#: ../../contributing_to_qiskit.rst:508
msgid "The module-level docstring"
msgstr "Module-level 文檔字符串"

#: ../../contributing_to_qiskit.rst:466
msgid "This docstring is at the module level for the module specified in the ``automodule`` directive in the rst file. If the module specified is a directory/namespace, the docstring should be specified in the ``__init__.py`` file for that directory. This module-level docstring contains more details about the module being documented. The normal structure to this docstring is to outline all the classes and functions of the public API that are contained in that module. This is typically done using the `autosummary directive <https://www.sphinx-doc.org/en/master/usage/extensions/autosummary.html>`__ (or `autodoc directives <http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`__ directly if the module is simple, such as in the case of ``qiskit.execute``). The autosummary directive is used to autodoc a list of different Python elements (classes, functions, etc.) directly without having to manually call out the autodoc directives for each one. The module-level docstring is where to provide a high-level overview of what functionality the module provides. This is normally done by grouping the different components of the public API together into multiple subsections."
msgstr "此 docstring 位於 rst 檔案 ``automobule` 指引中指定之模組的模組層次。 如果指定的模組是目錄 / 命名空間，則應在該目錄的 ``__init__.py`` 檔案中指定 docstring 。 此模組層次的 docstring 包含所記載模組的更多詳細資料。 此 docstring 的一般結構是概述包含在該模組中的公用 API 中所有類別和函數。 這通常是使用 ` 自動摘要指引 <https://www.sphinx-doc.org/en/master/usage/extensions/autosummary.html>`__ (或 `autodoc 指引 ' ，如果模組很簡單，例如 ```qiskit.execute``)，則會直接執行 <http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`__ 。 自動摘要指引會直接用於自動提交不同 Python 元素(類別、函數等)的清單，而不必手動呼叫每一個 Python 元素的自動文件指引。 module-level docstring 提供模組所提供之功能的進階概觀。 這通常是將公用 API 的不同元件組合成多個子區段來完成。"

#: ../../contributing_to_qiskit.rst:483
msgid "For example, as in the previous dagcircuit module example, the contents of the module docstring for ``qiskit/dagcircuit/__init__.py`` would be::"
msgstr "例如，如同先前的數字電路模組範例中， ``qiskit/dagark/__init__.py`` 的模組文檔串內容將是："

#: ../../contributing_to_qiskit.rst:507
msgid "This is just an example and the actual module docstring for the dagcircuit module might diverge from this."
msgstr "這只是一個範例，而數字電路模組的實際模組文檔串可能與此不一致。"

#: ../../contributing_to_qiskit.rst:525
msgid "The actual docstring for the elements listed in the module docstring"
msgstr "模組 docstring 中所列元素的實際文檔串"

#: ../../contributing_to_qiskit.rst:511
msgid "You should strive to document thoroughly all the public interfaces exposed using examples when necessary. For docstrings, `Google Python Style Docstrings <https://google.github.io/styleguide/pyguide.html?showone=Comments#38-comments-and-docstrings>`__ are used. This is parsed using the `napoleon sphinx extension <https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html>`__. The `napoleon documentation <https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html>`__ contains a good example of how docstrings should be formatted."
msgstr "必要時，您應努力使用示例徹底記錄所有公開介面。 對於 docstrings ，使用` Google Python 樣式文件字串 <https://google.github.io/styleguide/pyguide.html?showone=Comments#38-comments-and-docstrings>`__ 。 這會使用 `napoleon spinx 副檔名 <https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html>`__ 剖析。 `napoleon 文件 <https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html>`__ 包含如何將文檔字符串格式化的良好範例。"

#: ../../contributing_to_qiskit.rst:520
msgid "You can use any Sphinx directive or rst formatting in a docstring as it makes sense. For example, one common extension used is the ``jupyter-execute`` directive, which is used to execute a code block in Jupyter and display both the code and output. This is particularly useful for visualizations."
msgstr "您可以在文檔串中使用任何 Sphinx 指令或 rst 格式，因為它是有意義的。 例如，使用的一個常見延伸是 ``jupyter-execute`` 指令，它是用來執行 Jupyter 中的程式碼區塊，並同時顯示程式碼和輸出。 這對於可視化特別有用。"

#: ../../contributing_to_qiskit.rst:528
msgid "Documentation Integration"
msgstr "文件整合"

#: ../../contributing_to_qiskit.rst:530
msgid "The hosted documentation at https://qiskit.org/documentation/ covers the entire Qiskit project; Terra is just one component of that. As such, the documentation builds for the hosted version are built by the Qiskit meta-package repository https://github.com/Qiskit/qiskit. When commits are merged to that repo, the output of Sphinx builds are uploaded to the qiskit.org website. Those Sphinx builds are configured to pull in the documentation from the version of the Qiskit elements installed by the meta-package at that point. For example, if the meta-package version is currently 0.13.0, then that will copy the documentation from Terra's 0.10.0 release. When the meta-package's requirements are bumped, then it will start pulling documentation from the new version. This means that fixes for incorrect API documentation will need to be included in a new release. Documentation fixes are valid backports for a stable patch release per the stable branch policy (see :ref:`stable_branch_policy`)."
msgstr ""

#: ../../contributing_to_qiskit.rst:544
msgid "During the build process, the contents of each element's ``docs/apidocs/`` are recursively copied into a shared copy of ``doc/apidocs/`` in the meta-package repository along with all the other elements. This means that what is in the root of docs/apidocs on each element at a release will end up on the root of https://qiskit.org/documentation/apidoc/."
msgstr "在建置程序期間，每一個元素 ``docs/apidocs/`` 的內容與所有其他元素會一起被遞歸複製到 meta 套件儲存庫中 ``doc/apidocs/`` 的共用副本中，。 這表示在版本中每一個元素的 docs/apidocs 根目錄中的內容，會以 https://qiskit.org/documentation/apidoc/ 的根目錄為結尾。"

#: ../../contributing_to_qiskit.rst:553
msgid "Translating Documentation"
msgstr "翻譯文件"

#: ../../contributing_to_qiskit.rst:555
msgid "Qiskit documentation is translated (localized) using Crowdin, a software and web localization platform that allows organizations to coordinate translation projects and collaborate with communities to translate materials. Crowdin allows our community of translators to amplify their impact by automatically reusing the work invested translating one sentence to translate other, similar sentences. Crowdin also makes translations resilient to many types of changes to the original material, such as moving sentences around, even across files."
msgstr "Qiskit 說明文件是使用 Crowdin 來翻譯（或本地化）的。Crowdin 是一個軟體和 Web 本地化平臺，讓組織可以協調翻譯專案，並與社群合作翻譯材料。 Crowdin 允許我們的翻譯社群通過自動重複使用一個句子來翻譯其他類似的句子，藉此來放大翻譯社群的影響。 Crowdin 也讓翻譯能應對原始材料的不同變化類型，例如是同檔案甚至是跨越檔案的句子移動。"

#: ../../contributing_to_qiskit.rst:563
msgid "Qiskit localization requests are handled in `Qiskit Translations <https://github.com/Qiskit/qiskit-translations>`__ repository. To contribute to Qiskit localization, please follow these steps:"
msgstr "Qiskit 本地化要求是在 ` Qiskit Translations <https://github.com/Qiskit/qiskit-translations>`__ 儲存庫中處理。 若要貢獻 Qiskit 本地化，請遵循下列步驟："

#: ../../contributing_to_qiskit.rst:566
msgid "Add your name (or ID) to the `LOCALIZATION_CONTRIBUTORS <https://github.com/qiskit-community/qiskit-translations/blob/master/LOCALIZATION_CONTRIBUTORS>`__ file."
msgstr "將您的名稱(或 ID)新增至 `LOCALIZATION_CONTRIBUTORS <https://github.com/qiskit-community/qiskit-translations/blob/master/LOCALIZATION_CONTRIBUTORS>`__ 檔案。"

#: ../../contributing_to_qiskit.rst:569
msgid "Create a pull request (PR) to merge your change. Make sure to follow the template to open a Pull Request."
msgstr "建立取回要求(PR)，以合併您的變更。 請務必遵循範本，以開啟「取回要求」。"

#: ../../contributing_to_qiskit.rst:574
msgid "Each contributor has to create their own PR and sign the CLA."
msgstr "每個貢獻者都必須建立自己的 PR ，並簽署 CLA。"

#: ../../contributing_to_qiskit.rst:575
msgid "Please mention the language that you'd like to contribute to in the PR summary."
msgstr "請提及您想要在申請摘要中提供意見的語言。"

#: ../../contributing_to_qiskit.rst:577
msgid "If you have an open issue for a language request, **add the issue link to the PR**."
msgstr "如果您對語言要求有開啟的問題， **會將問題鏈結新增至 PR**。"

#: ../../contributing_to_qiskit.rst:579
msgid "You will be asked to sign the Qiskit Contributors License Agreement (CLA); please do so."
msgstr "系統會要求您簽署 Qiskit Contributors 授權合約( CLA)，請您這樣做。"

#: ../../contributing_to_qiskit.rst:581
msgid "A minimum of **three contributors** per language are necessary for any new languages to be added, to receive official support from the administrators of the localization project."
msgstr "如果要新增任何新語言，必須至少有 **三個貢獻者** ，以獲得本地化專案管理者的官方支援。"

#: ../../contributing_to_qiskit.rst:584
msgid "Among the group of contributors, a translation lead must be identified to serve as a liaison with the administrators of the localization project. The lead must contact: Yuri Kobayashi (yurik@jp.ibm.com) by email."
msgstr "在一個投稿者小組中，必須指定一位總翻譯作為與本地化專案管理人的聯絡人。 總翻譯必須通過電子郵件聯絡： Yuri Kobayashi （yurik@jp.ibm.com）"

#: ../../contributing_to_qiskit.rst:587
msgid "In the `Qiskit-Docs <https://crowdin.com/project/qiskit-docs>`__ Crowdin project, choose the language that you want to contribute to."
msgstr "在 `Qiskit-Docs <https://crowdin.com/project/qiskit-docs>`__ Crowdin 專案中，選擇您要提供的語言。"

#: ../../contributing_to_qiskit.rst:592
msgid "As mentioned in the blog post, `Qiskit in my language is Qiskit <https://medium.com/qiskit/qiskit-in-my-language-is-qiskit-73d4626a99d3>`__, we want to make sure that translated languages have enough community support to build a translation team with translators, proofreaders, and translation leads. If you want to be a translation lead or would be willing to join a new translation project team, you can open a `GitHub issue <https://github.com/qiskit-community/qiskit-translations/issues/new/choose>`__ to start a discussion with the Qiskit team and recruit translation project members."
msgstr "正如部落格文章中所提到的， `Qiskit 在我的語言是 Qiskit <https://medium.com/qiskit/qiskit-in-my-language-is-qiskit-73d4626a99d3>`__ ，我們要確保翻譯的語言能有足夠的社群支援來建立一個翻譯團隊與翻譯、校對、和翻譯的線索。 如果您想成為翻譯主管，或願意加入新的翻譯專案團隊，您可以開啟 `GitHub issue <https://github.com/qiskit-community/qiskit-translations/issues/new/choose>`__ ，以開始與 Qiskit 團隊的討論，並招募翻譯專案成員。"

#: ../../contributing_to_qiskit.rst:598
msgid "Click the **Join** button and **paste the URL of your PR** in the dialog box where you are asked why you want to join the Crowdin project."
msgstr ""

#: ../../contributing_to_qiskit.rst:601
msgid "The administrators of the Crowdin project will review your request and give you access as quickly as they can."
msgstr "Crowdin 專案的管理者將檢閱您的要求，並讓您盡快存取。"

#: ../../contributing_to_qiskit.rst:605
msgid "Building from Source"
msgstr "從源始碼建置"

#: ../../contributing_to_qiskit.rst:607
msgid "You can build a local copy of the documentation from your local clone of the `Qiskit/qiskit` repository as follows:"
msgstr "您可以從本端複製 `Qiskit/qiskit` 儲存庫的本端副本，來建置說明文件的本端副本，如下所示："

#: ../../contributing_to_qiskit.rst:610
msgid "Clone the Qiskit repository."
msgstr ""

#: ../../contributing_to_qiskit.rst:616
msgid "Cloning the repository creates a local folder called ``qiskit``."
msgstr ""

#: ../../contributing_to_qiskit.rst:622
msgid "Build the documentation by navigating to your local clone of `Qiskit/qiskit` and running the following command in a terminal window."
msgstr ""

#: ../../contributing_to_qiskit.rst:629
msgid "If you do not already have the `tox <https://tox.readthedocs.io/en/latest/>`_ command installed, install it by running:"
msgstr ""

#: ../../contributing_to_qiskit.rst:636
msgid "As you make changes to your local RST files, you can update your HTML files by navigating to `/doc/` and running the following in a terminal window:"
msgstr ""

#: ../../contributing_to_qiskit.rst:644
msgid "This will build a styled, HTML version of your local documentation repository in the subdirectory `/docs/_build/html/`."
msgstr ""

#: ../../contributing_to_qiskit.rst:651
msgid "Installing from Source"
msgstr "從來源安裝"

#: ../../contributing_to_qiskit.rst:653
msgid "Installing the elements from source allows you to access the most recently updated version of Qiskit instead of using the version in the Python Package Index (PyPI) repository. This will give you the ability to inspect and extend the latest version of the Qiskit code more efficiently."
msgstr "從來源安裝元素可讓您存取最近更新的 Qiskit 版本，而不使用 Python Package Index (PyPI) 儲存庫中的版本。 這會讓您更有效率地檢查及擴展 Qiskit 程式碼的最新版本。"

#: ../../contributing_to_qiskit.rst:658
msgid "When installing the elements and components from source, by default their ``development`` version (which corresponds to the ``master`` git branch) will be used, as opposed to the ``stable`` version (which contains the same codebase as the published ``pip`` packages). Since the ``development`` versions of an element or component usually include new features and changes, they generally require using the ``development`` version of the rest of the items as well."
msgstr ""

#: ../../contributing_to_qiskit.rst:667
msgid "The Terra and Aer packages both require a compiler to build from source before you can install. Ignis, Aqua, and the IBM Quantum Provider backend do not require a compiler."
msgstr ""

#: ../../contributing_to_qiskit.rst:671
msgid "Installing elements from source requires the following order of installation to prevent installing versions of elements that may be lower than those desired if the ``pip`` version is behind the source versions:"
msgstr ""

#: ../../contributing_to_qiskit.rst:675
msgid ":ref:`qiskit-terra <install-qiskit-terra>`"
msgstr ":ref:`qiskit-terra <install-qiskit-terra>`"

#: ../../contributing_to_qiskit.rst:676
msgid ":ref:`qiskit-aer <install-qiskit-aer>`"
msgstr ""

#: ../../contributing_to_qiskit.rst:677
msgid ":ref:`qiskit-ignis <install-qiskit-ignis>`"
msgstr ""

#: ../../contributing_to_qiskit.rst:678
msgid ":ref:`qiskit-ibmq-provider <install-qiskit-ibmq-provider>` (if you want to connect to the IBM Quantum devices or online simulator)"
msgstr ":ref:`qiskit-ibmq - provider <install-qiskit-ibmq-provider>` (如果您要連接至 IBM Quantum 裝置或線上模擬器)"

#: ../../contributing_to_qiskit.rst:682
msgid "To work with several components and elements simultaneously, use the following steps for each element."
msgstr "為了要同時使用數個元件和元素，請針對每一個元素使用下列步驟。"

#: ../../contributing_to_qiskit.rst:687
msgid "Due to the use of namespace packaging in Python, care must be taken in how you install packages. If you're planning to install any element from source, do not use the ``qiskit`` meta-package. Also, follow this guide and use a separate virtual environment for development. If you do choose to mix an existing installation with your development, refer to https://github.com/pypa/sample-namespace-packages/blob/master/table.md for the set of combinations of installation methods that work together."
msgstr ""

#: ../../contributing_to_qiskit.rst:696
msgid "Set up the Virtual Development Environment"
msgstr "設定虛擬開發環境"

#: ../../contributing_to_qiskit.rst:698
msgid "Virtual environments are used for Qiskit development to isolate the development environment from system-wide packages. This way, we avoid inadvertently becoming dependent on a particular system configuration. For developers, this also makes it easy to maintain multiple environments (e.g. one per supported Python version, for older versions of Qiskit, etc.)."
msgstr ""

#: ../../contributing_to_qiskit.rst
msgid "Python venv"
msgstr ""

#: ../../contributing_to_qiskit.rst:705
msgid "All Python versions supported by Qiskit include built-in virtual environment module `venv <https://docs.python.org/3/tutorial/venv.html>`__."
msgstr ""

#: ../../contributing_to_qiskit.rst:708
msgid "Start by creating a new virtual environment with ``venv``. The resulting environment will use the same version of Python that created it and will not inherit installed system-wide packages by default. The specified folder will be created and is used to hold the environment's installation. It can be placed anywhere. For more detail, see the official Python documentation, `Creation of virtual environments <https://docs.python.org/3/library/venv.html>`__."
msgstr ""

#: ../../contributing_to_qiskit.rst:718
msgid "Activate the environment by invoking the appropriate activation script for your system, which can be found within the environment folder. For example, for bash/zsh:"
msgstr ""

#: ../../contributing_to_qiskit.rst:725
msgid "Upgrade pip within the environment to ensure Qiskit dependencies installed in the subsequent sections can be located for your system."
msgstr ""

#: ../../contributing_to_qiskit.rst
msgid "Conda"
msgstr ""

#: ../../contributing_to_qiskit.rst:734
msgid "For Conda users, a new environment can be created as follows."
msgstr ""

#: ../../contributing_to_qiskit.rst:745
msgid "Installing Terra from Source"
msgstr "從來源安裝 Terra"

#: ../../contributing_to_qiskit.rst:747
msgid "Installing from source requires that you have the Rust compiler on your system. To install the Rust compiler the recommended path is to use rustup, which is a cross-platform Rust installer. To use rustup you can go to:"
msgstr ""

#: ../../contributing_to_qiskit.rst:751
msgid "https://rustup.rs/"
msgstr ""

#: ../../contributing_to_qiskit.rst:753
msgid "which will provide instructions for how to install rust on your platform. Besides rustup there are `other installation methods <https://forge.rust-lang.org/infra/other-installation-methods.html>`__ available too."
msgstr ""

#: ../../contributing_to_qiskit.rst:757
msgid "Once the Rust compiler is installed, you are ready to install Qiskit Terra."
msgstr ""

#: ../../contributing_to_qiskit.rst:759
msgid "Clone the Terra repository."
msgstr "複製 Terra 儲存庫。"

#: ../../contributing_to_qiskit.rst:765
msgid "Cloning the repository creates a local folder called ``qiskit-terra``."
msgstr ""

#: ../../contributing_to_qiskit.rst:771
msgid "If you want to run tests or linting checks, install the developer requirements."
msgstr "如果您要執行測試或換行檢查，請安裝開發人員需求。"

#: ../../contributing_to_qiskit.rst:777
msgid "Install ``qiskit-terra``."
msgstr "安裝 ``qiskit-terra``。"

#: ../../contributing_to_qiskit.rst:783
msgid "If you want to install it in editable mode, meaning that code changes to the project don't require a reinstall to be applied, you can do this with:"
msgstr ""

#: ../../contributing_to_qiskit.rst:790
msgid "Installing in editable mode will build the compiled extensions in debug mode without optimizations. This will affect the runtime performance of the compiled code. If you'd like to use editable mode and build the compiled code in release with optimizations enabled you can run:"
msgstr ""

#: ../../contributing_to_qiskit.rst:799
msgid "after you run pip and that will rebuild the binary in release mode."
msgstr ""

#: ../../contributing_to_qiskit.rst:801
msgid "If you are working on Rust code in Qiskit you will need to rebuild the extension code every time you make a local change. ``pip install -e .`` will only build the Rust extension when it's called, so any local changes you make to the Rust code after running pip will not be reflected in the installed package unless you rebuild the extension. You can leverage the above ``build_rust`` command to do this (with or without ``--release`` based on whether you want to build in debug mode or release mode)."
msgstr ""

#: ../../contributing_to_qiskit.rst:809
msgid "You can then run the code examples after installing Terra. You can run an example script with the following command."
msgstr ""

#: ../../contributing_to_qiskit.rst:820
msgid "Installing Aer from Source"
msgstr "從來源安裝 Aer"

#: ../../contributing_to_qiskit.rst:822
msgid "Clone the Aer repository."
msgstr "複製 Aer 儲存庫。"

#: ../../contributing_to_qiskit.rst:828
msgid "Install build requirements."
msgstr "安裝建置的需求。"

#: ../../contributing_to_qiskit.rst:834
msgid "After this, the steps to install Aer depend on which operating system you are using. Since Aer is a compiled C++ program with a Python interface, there are non-Python dependencies for building the Aer binary which can't be installed universally depending on operating system."
msgstr ""

#: ../../contributing_to_qiskit.rst ../../contributing_to_qiskit.rst:1016
msgid "Linux"
msgstr "Linux"

#: ../../contributing_to_qiskit.rst:841 ../../contributing_to_qiskit.rst:906
msgid "Install compiler requirements."
msgstr "安裝編譯器的要求。"

#: ../../contributing_to_qiskit.rst:843
msgid "Building Aer requires a C++ compiler and development headers."
msgstr "建置Aer 需要 C++ 編譯器和開發標題。"

#: ../../contributing_to_qiskit.rst:845 ../../contributing_to_qiskit.rst:860
msgid "If you're using Fedora or an equivalent Linux distribution, install using:"
msgstr "如果您是使用 Fedora 或等效的 Linux 發行套件，請使用："

#: ../../contributing_to_qiskit.rst:852 ../../contributing_to_qiskit.rst:867
msgid "For Ubuntu/Debian install it using:"
msgstr "若為 Ubuntu/Debian 安裝，請使用："

#: ../../contributing_to_qiskit.rst:858
msgid "Install OpenBLAS development headers."
msgstr "安裝 OpenBLAS 開發標題。"

#: ../../contributing_to_qiskit.rst
msgid "macOS"
msgstr "macOS"

#: ../../contributing_to_qiskit.rst:877
msgid "Install dependencies."
msgstr "安裝附屬檔"

#: ../../contributing_to_qiskit.rst:879
msgid "To use the `Clang <https://clang.llvm.org/>`__ compiler on macOS, you need to install an extra library for supporting `OpenMP <https://www.openmp.org/>`__.  You can use `brew <https://brew.sh/>`__ to install this and other dependencies."
msgstr "如果要在 macOS 上使用 `Clang <https://clang.llvm.org/>`__ 編譯器，您需要安裝額外的程式庫以支援 `OpenMP <https://www.openmp.org/>`__。您可以使用 `brew <https://brew.sh/>`__ 來安裝此及其他附屬檔。"

#: ../../contributing_to_qiskit.rst:887
msgid "Then install a BLAS implementation; `OpenBLAS <https://www.openblas.net/>`__ is the default choice."
msgstr ""

#: ../../contributing_to_qiskit.rst:894
msgid "Next, install ``Xcode Command Line Tools``."
msgstr "接下來，請安裝 ``Xcode 指令行工具``。"

#: ../../contributing_to_qiskit.rst
msgid "Windows"
msgstr "Windows"

#: ../../contributing_to_qiskit.rst:902
msgid "On Windows you need to use `Anaconda3 <https://www.anaconda.com/distribution/#windows>`__ or `Miniconda3 <https://docs.conda.io/en/latest/miniconda.html>`__ to install all the dependencies."
msgstr "在 Windows 上，您需要使用 `Anaconda3 <https://www.anaconda.com/distribution/#windows>`__ 或 `Miniconda3 <https://docs.conda.io/en/latest/miniconda.html>`__ ，以安裝所有附屬檔。"

#: ../../contributing_to_qiskit.rst:912
msgid "Install binary and build dependencies."
msgstr "安裝二進位制文件並建置依賴項。"

#: ../../contributing_to_qiskit.rst:919
msgid "Build and install qiskit-aer directly"
msgstr "直接建置並安裝 qiskit-aer"

#: ../../contributing_to_qiskit.rst:921
msgid "If you have pip <19.0.0 installed and your environment doesn't require a custom build, run:"
msgstr "如果您已安裝 pip <19.0.0 ，且環境不需要自訂建置，便可執行："

#: ../../contributing_to_qiskit.rst:929
msgid "This will both build the binaries and install Aer."
msgstr "這將會建置二進位檔案並安裝 Aer。"

#: ../../contributing_to_qiskit.rst:931
msgid "Alternatively, if you have a newer pip installed, or have some custom requirement, you can build a Python wheel manually."
msgstr "或者，如果您已安裝較新的 pip ，或有一些自訂需求，則您可以手動建置 Python wheel。"

#: ../../contributing_to_qiskit.rst:939
msgid "If you need to set a custom option during the wheel build, refer to :ref:`aer_wheel_build_options`."
msgstr "如果您需要在wheel build期間設定自訂選項，請參閱 :ref:`aer-wheel_build_options`。"

#: ../../contributing_to_qiskit.rst:942
msgid "After you build the Python wheel, it will be stored in the ``dist/`` dir in the Aer repository. The exact version will depend"
msgstr "您建置 Python wheel之後，它將儲存在 Aer 儲存庫中的 ``dist/` ` 目錄中。 確切的版本將取決於"

#: ../../contributing_to_qiskit.rst:950
msgid "The exact filename of the output wheel file depends on the current version of Aer under development."
msgstr ""

#: ../../contributing_to_qiskit.rst:956
msgid "Custom options during wheel builds"
msgstr "Wheel建置期間的自訂選項"

#: ../../contributing_to_qiskit.rst:958
msgid "The Aer build system uses `scikit-build <https://scikit-build.readthedocs.io/en/latest/index.html>`__ to run the compilation when building it with the Python interface. It acts as an interface for `setuptools <https://setuptools.readthedocs.io/en/latest/>`__ to call `CMake <https://cmake.org/>`__ and compile the binaries for your local system."
msgstr ""

#: ../../contributing_to_qiskit.rst:963
msgid "Due to the complexity of compiling the binaries, you may need to pass options to a certain part of the build process. The way to pass variables is:"
msgstr ""

#: ../../contributing_to_qiskit.rst:970
msgid "where the elements within square brackets `[]` are optional, and ``skbuild_opts``, ``cmake_opts``, ``build_tool_opts`` are to be replaced by flags of your choice. A list of *CMake* options is available here: https://cmake.org/cmake/help/v3.6/manual/cmake.1.html#options. For example, you could run something like:"
msgstr "其中，方括弧 `[]` 中的元素是可選用的，而 ``skbuild_opts``， ``cmake_opts``， ``build_tool_opts`` 將取代為您選擇的標誌。 *CMake * 選項清單在這裡可用： https://cmake.org/cmake/help/v3.6/manual/cmake.1.html#options。 例如，您可以執行類似的項目："

#: ../../contributing_to_qiskit.rst:980
msgid "This is passing the flag `-j8` to the underlying build system (which in this case is `Automake <https://www.gnu.org/software/automake/>`__), telling it that you want to build in parallel using 8 processes."
msgstr "這會將旗標 `-j8` 傳遞至潛在底層的建置系統(在此情況下是 ` Automake <https://www.gnu.org/software/automake/>`__)，告訴它您想在平行下使用 8 個處理程序來建置。"

#: ../../contributing_to_qiskit.rst:984
msgid "For example, a common use case for these flags on linux is to specify a specific version of the C++ compiler to use (normally if the default is too old):"
msgstr "例如， linux 上這些標誌的一般使用案例，是指定要使用的 C++ 編譯器的特定版本(如果預設值太舊，則通常如此)："

#: ../../contributing_to_qiskit.rst:992
msgid "which will tell CMake to use the g++-7 command instead of the default g++ when compiling Aer."
msgstr ""

#: ../../contributing_to_qiskit.rst:995
msgid "Another common use case for this, depending on your environment, is that you may need to specify your platform name and turn off static linking."
msgstr ""

#: ../../contributing_to_qiskit.rst:1003
msgid "Here ``--plat-name`` is a flag to setuptools, to specify the platform name to use in the package metadata, ``-DSTATIC_LINKING`` is a flag for using CMake to disable static linking, and ``-j8`` is a flag for using Automake to use 8 processes for compilation."
msgstr ""

#: ../../contributing_to_qiskit.rst:1008
msgid "A list of common options depending on platform are:"
msgstr ""

#: ../../contributing_to_qiskit.rst:1011
msgid "Platform"
msgstr ""

#: ../../contributing_to_qiskit.rst:1011
msgid "Tool"
msgstr ""

#: ../../contributing_to_qiskit.rst:1011
msgid "Option"
msgstr ""

#: ../../contributing_to_qiskit.rst:1011
msgid "Use Case"
msgstr ""

#: ../../contributing_to_qiskit.rst:1013
msgid "All"
msgstr ""

#: ../../contributing_to_qiskit.rst:1013
msgid "Automake"
msgstr ""

#: ../../contributing_to_qiskit.rst:1013
msgid "``-j``"
msgstr ""

#: ../../contributing_to_qiskit.rst:1013
msgid "Followed by a number, sets the number of processes to use for compilation."
msgstr "以數字追踪，設定要用於編譯的處理程序數目。"

#: ../../contributing_to_qiskit.rst:1016 ../../contributing_to_qiskit.rst:1023
msgid "CMake"
msgstr "CMake"

#: ../../contributing_to_qiskit.rst:1016
msgid "``-DCMAKE_CXX_COMPILER``"
msgstr ""

#: ../../contributing_to_qiskit.rst:1016
msgid "Used to specify a specific C++ compiler; this is often needed if your default g++ is too old."
msgstr "用來指定特定的 C++ 編譯器；如果您的預設 g++ 太舊，則經常需要此編譯器。"

#: ../../contributing_to_qiskit.rst:1020 ../../contributing_to_qiskit.rst:1023
msgid "OSX"
msgstr "OSX"

#: ../../contributing_to_qiskit.rst:1020
msgid "setuptools"
msgstr "設置工具"

#: ../../contributing_to_qiskit.rst:1020
msgid "``--plat-name``"
msgstr ""

#: ../../contributing_to_qiskit.rst:1020
msgid "Used to specify the platform name in the output Python package."
msgstr "用來在輸出 Python 套件中指定平台名稱。"

#: ../../contributing_to_qiskit.rst:1023
msgid "``-DSTATIC_LINKING``"
msgstr ""

#: ../../contributing_to_qiskit.rst:1023
msgid "Used to specify whether or not static linking should be used."
msgstr "用來指定是否應該使用靜態鏈結。"

#: ../../contributing_to_qiskit.rst:1028
msgid "Some of these options are not platform-specific. These particular platforms are listed because they are commonly used in the environment. Refer to the tool documentation for more information."
msgstr "其中部分選項不是平台專用的。 這些特定平台被列出是因為它們通常是在環境中使用。 如需相關資訊，請參閱工具說明文件。"

#: ../../contributing_to_qiskit.rst:1035
msgid "Installing Ignis from Source"
msgstr "從來源安裝 Ignis"

#: ../../contributing_to_qiskit.rst:1037
msgid "Clone the Ignis repository."
msgstr "複製 Ignis 儲存庫。"

#: ../../contributing_to_qiskit.rst:1043
msgid "Cloning the repository creates a local directory called ``qiskit-ignis``."
msgstr "複製儲存庫時，會建立名為 ``qiskit-ignis`` 的本端目錄。"

#: ../../contributing_to_qiskit.rst:1049
msgid "If you want to run tests or linting checks, install the developer requirements. This is not required to install or use the qiskit-ignis package when installing from source."
msgstr "如果您要執行測試或換行檢查，請安裝developer requirements。 在從來源安裝時，不需要安裝或使用 qiskit-aqua 套件。"

#: ../../contributing_to_qiskit.rst:1057
msgid "Install Ignis."
msgstr "安裝 Ignis。"

#: ../../contributing_to_qiskit.rst:1063 ../../contributing_to_qiskit.rst:1101
msgid "If you want to install it in editable mode, meaning that code changes to the project don't require a reinstall to be applied:"
msgstr "如果您要將它安裝在可編輯模式中，表示該專案的程式碼變更不需要重新安裝就可以套用："

#: ../../contributing_to_qiskit.rst:1073
msgid "Installing IBM Quantum Provider from Source"
msgstr "從來源安裝 IBM Quantum Provider"

#: ../../contributing_to_qiskit.rst:1075
msgid "Clone the qiskit-ibmq-provider repository."
msgstr "複製 qiskit-ibmq-provider 儲存庫。"

#: ../../contributing_to_qiskit.rst:1081
msgid "Cloning the repository creates a local directory called ``qiskit-ibmq-provider``."
msgstr "複製儲存庫時，會建立名為 ``qiskit-ibmq-provider`` 的本端目錄。"

#: ../../contributing_to_qiskit.rst:1087
msgid "If you want to run tests or linting checks, install the developer requirements. This is not required to install or use the qiskit-ibmq-provider package when installing from source."
msgstr "如果您要執行測試或換行檢查，請安裝developer requirements。 在從來源安裝時，不需要從來源安裝或使用 qiskit-ibmq-provider 套件。"

#: ../../contributing_to_qiskit.rst:1095
msgid "Install qiskit-ibmq-provider."
msgstr "安裝 qiskit-ibmq-provider。"

#: ../../contributing_to_qiskit.rst:1112
msgid "Qiskit Versioning"
msgstr "Qiskit 的版本"

#: ../../contributing_to_qiskit.rst:1114
msgid "The Qiskit project is made up of several elements each performing different functionality. Each is independently useful and can be used on their own, but for convenience we provide this repository and meta-package to provide a single entrypoint to install all the elements at once. This is to simplify the install process and provide a unified interface to end users. However, because each Qiskit element has its own releases and versions, some care is needed when dealing with versions between the different repositories. This document outlines the guidelines for dealing with versions and releases of both Qiskit elements and the meta-package."
msgstr ""

#: ../../contributing_to_qiskit.rst:1124
msgid "For the rest of this guide the standard Semantic Versioning nomenclature will be used of: ``Major.Minor.Patch`` to refer to the different components of a version number. For example, if the version number was ``0.7.1``, then the major version is ``0``, the minor version ``7``, and the patch version ``1``."
msgstr ""

#: ../../contributing_to_qiskit.rst:1131
msgid "Meta-package Version"
msgstr "Meta-package版本"

#: ../../contributing_to_qiskit.rst:1133
msgid "The Qiskit meta-package version is an independent value that is determined by the releases of each of the elements being tracked. Each time we push a release to a tracked component (or add an element) the meta-package requirements, and version will need to be updated and a new release published. The timing should be coordinated with the release of elements to ensure that the meta-package releases track with element releases."
msgstr ""

#: ../../contributing_to_qiskit.rst:1141
msgid "Adding New Tracked Elements"
msgstr "增加新的追踪元素"

#: ../../contributing_to_qiskit.rst:1143
msgid "When a new Qiskit element is being added to the meta-package requirements, we need to increase the **Minor** version of the meta-package."
msgstr ""

#: ../../contributing_to_qiskit.rst:1146
msgid "For example, if the meta-package is tracking 2 elements ``qiskit-aer`` and ``qiskit-terra`` and its version is ``0.7.4``. Then we release a new element ``qiskit-ignis`` that we intend to also have included in the meta-package. When we add the new element to the meta-package we increase the version to ``0.8.0``."
msgstr ""

#: ../../contributing_to_qiskit.rst:1154
msgid "Patch Version Increases"
msgstr ""

#: ../../contributing_to_qiskit.rst:1156
msgid "When any Qiskit element that is being already tracked by the meta-package releases a patch version to fix bugs in a release, we need also bump the requirement in the ``setup.py`` and then increase the patch version of the meta-package."
msgstr ""

#: ../../contributing_to_qiskit.rst:1161
msgid "For example, if the meta-package is tracking 3 elements ``qiskit-terra==0.8.1``, ``qiskit-aer==0.2.1``, and ``qiskit-ignis==0.1.4`` with the current version ``0.9.6``. When qiskit-terra release a new patch version to fix a bug ``0.8.2`` the meta-package will also need to increase its patch version and release, becoming ``0.9.7``."
msgstr ""

#: ../../contributing_to_qiskit.rst:1167
msgid "Additionally, there are occasionally packaging or other bugs in the meta-package itself that need to be fixed by pushing new releases. When those are encountered we should increase the patch version to differentiate it from the broken release. Do **not** delete the broken or any old releases from pypi in any situation, instead just increase the patch version and upload a new release."
msgstr ""

#: ../../contributing_to_qiskit.rst:1175
msgid "Minor Version Increases"
msgstr "次版號增加"

#: ../../contributing_to_qiskit.rst:1177
msgid "Besides when adding a new element to the meta-package, the minor version of the meta-package should also be increased anytime a minor version is increased in a tracked element."
msgstr ""

#: ../../contributing_to_qiskit.rst:1181
msgid "For example, if the meta-package is tracking 2 elements ``qiskit-terra==0.7.0`` and ``qiskit-aer==0.1.1`` and the current version is ``0.7.5``. When the ``qiskit-aer`` element releases ``0.2.0`` then we need to increase the meta-package version to be ``0.8.0`` to correspond to the new release."
msgstr ""

#: ../../contributing_to_qiskit.rst:1187
msgid "Major Version Increases"
msgstr ""

#: ../../contributing_to_qiskit.rst:1189
msgid "The major version is different from the other version number components. Unlike the other version number components, which are updated in lock step with each tracked element, the major version is only increased when all tracked versions are bumped (at least before ``1.0.0``). Right now, all the elements still have a major version number component of ``0``, and until each tracked element in the meta-repository is marked as stable by bumping the major version to be ``>=1``, then the meta-package version should not increase the major version."
msgstr ""

#: ../../contributing_to_qiskit.rst:1197
msgid "The behavior of the major version number component tracking after when all the elements are at >=1.0.0 has not been decided yet."
msgstr ""

#: ../../contributing_to_qiskit.rst:1201
msgid "Optional Extras"
msgstr ""

#: ../../contributing_to_qiskit.rst:1203
msgid "In addition to the tracked elements, there are additional packages built on top of Qiskit which are developed in tandem with Qiskit, for example, the application repositories like qiskit-optimization. For convienence these packages are tracked by the Qiskit metapackage as optional extras that can be installed with Qiskit. Releases of these optional downstream projects do not trigger a metapackage release as they are unpinned and do not affect the metapackage version. If there is a compatibility issue between Qiskit and these downstream optional dependencies and the minimum version needs to be adjusted in a standalone release, this will only be done as a patch version release as it's a packaging bugfix."
msgstr ""

#: ../../contributing_to_qiskit.rst:1215
msgid "Qiskit Element Requirement Tracking"
msgstr ""

#: ../../contributing_to_qiskit.rst:1217
msgid "While not strictly related to the meta-package and Qiskit versioning, how we track the element versions in the meta-package's requirements list is important. Each element listed in the ``setup.py`` should be pinned to a single version. This means that each version of Qiskit should only install a single version for each tracked element. For example, the requirements list at any given point should look something like::"
msgstr ""

#: ../../contributing_to_qiskit.rst:1229
msgid "This is to aid in debugging, but also make tracking the versions across multiple elements more transparent."
msgstr ""

