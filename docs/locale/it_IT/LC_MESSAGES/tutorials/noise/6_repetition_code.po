msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-12 15:01+0000\n"
"PO-Revision-Date: 2020-11-12 15:46\n"
"Last-Translator: \n"
"Language-Team: Italian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: it\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/6_repetition_code.po\n"
"X-Crowdin-File-ID: 9142\n"
"Language: it_IT\n"

#: ../../tutorials/noise/6_repetition_code.ipynb:10
msgid "This page was generated from `tutorials/noise/6_repetition_code.ipynb`__."
msgstr "Questa pagina è stata generata da `tutorials/noise/6_repetition_code.ipynb`__."

#: ../../tutorials/noise/6_repetition_code.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/noise/6_repetition_code.ipynb>`_."
msgstr ""

#: ../../tutorials/noise/6_repetition_code.ipynb:9
msgid "Repetition Codes"
msgstr "Codici di Ripetizione"

#: ../../tutorials/noise/6_repetition_code.ipynb:21
msgid "Introduction"
msgstr "Introduzione"

#: ../../tutorials/noise/6_repetition_code.ipynb:23
msgid "In quantum error correction we take many noisy qubits (which we call *physical qubits*) and use them to store a smaller number of *logical qubits*. The error correction procedure is designed to detect and correct for the effects of noise. This makes the logical qubits much less noisy and more reliable than the physical ones from which they are built."
msgstr "Quando si affronta la correzione degli errori quantistici, l'approccio è quello di considerare molti qubit rumorosi (chiamati *qubit fisici*) ed utilizzarli per memorizzare un numero inferiore di *qubit logici*. La procedura di correzione degli errori è progettata in modo da rilevare e correggere gli effetti del rumore. Questo procedimento rende i qubit logici molto meno rumorosi e più affidabili rispetto a quelli fisici che li compongono."

#: ../../tutorials/noise/6_repetition_code.ipynb:25
msgid "The repetition code is a simple example of quantum error correction, in which a logical *bit* is stored rather than a logical *qubit*. A given instance of the repetition code is defined by two numbers, which we call :math:`d` and :math:`T`."
msgstr "Il codice di ripetizione è un semplice esempio di correzione degli errori quantistici, dove si memorizza un *bit* logico piuttosto che un *qubit* logico. Una certa istanza di un codice di ripetizione è definita da due numeri, detti :math:`d` e :math:`T`."

#: ../../tutorials/noise/6_repetition_code.ipynb:27
msgid "The :math:`d` parameter determines how many physical qubits are used. The actual information about the logical bit is stored in :math:`d` qubits (which we'll call *code qubits*). The encoding is done in a very simple way: to encode a ``0``, all these qubits are set in the state :math:`|0\\rangle`, to encode a ``1`` they are set to :math:`|1\\rangle`. To readout the value, you can just look at any qubit. To read it out in a way that protects against single qubit errors, you can read out all the qubits and take a majority vote."
msgstr "Il parametro :math:`d` determina il numero di qubit fisici utilizzati. L'informazione effettiva del bit logico è memorizzata in :math:`d` qubit (che vengono chiamati *qubit code*). La codifica viene effettuata in un modo molto semplice: per codificare uno ``0``, tutti questi qubit sono portati allo stato :math:`|0\\rangle`, mentre per codificare ``1``, allo stato :math:`|1\\rangle`. Per ottenere il valore di lettura è sufficiente guardare qualsiasi qubit. Per evitare di essere soggetti ad errori di singolo qubit, è possibile leggere il valore di tutti i qubit e scegliere quello finale con un voto di maggioranza, ovvero scegliere il valore che si ripete di più."

#: ../../tutorials/noise/6_repetition_code.ipynb:30
msgid "It is not only at readout that we can extract useful information that will help us correct errors. We can also extract information while the logical bit sits idle, or even while it is involved in computation."
msgstr "Non è solo in fase di lettura che è possibile estrarre informazioni utili alla correzione degli errori. Si possono infatti estrarre informazioni anche quando i bit logici rimangono inattivi, o addirittura mentre sono coinvolti in calcoli."

#: ../../tutorials/noise/6_repetition_code.ipynb:32
msgid "Since this is an exercise in quantum error correction, we will do this in a way that would also work for logical *qubits*. Specifically, our method of extracting information about errors must not extract any information regarding the stored logical information. In the quantum case, this is required so that we do not disturb superposition states of the stored qubits."
msgstr "Dato che si tratta di un esercizio di correzione degli errori quantistici, lo affronteremo in modo che possa anche essere applicato al caso di *qubit* logici. In particolare, il metodo di estrazione dell'informazione sugli errori non deve estrarre alcuna informazione relativa all'informazione logica memorizzata. Nel caso quantistico questo modo di procedere è necessario per non intaccare e disturbare gli stati di sovrapposizione dei qubit memorizzati."

#: ../../tutorials/noise/6_repetition_code.ipynb:34
msgid "We will extract information over :math:`T` rounds of *syndrome measurements*. For the repetition code, these are based on the fact that all code qubits should be in the same state (all :math:`|0\\rangle` or all :math:`|1\\rangle`). Any departure from this is therefore a signature of error. Specifically, we imagine our :math:`d` code qubits sitting along a line. We will then perform a measurement on each pair of neighboring code qubits. This will tell us whether they are the same or different, without extracting any information on what their values are."
msgstr "Andremo ad estrarre informazioni su :math:`T` ripetizioni di *misurazioni della sindrome*. Nel caso del codice di ripetizione, queste si basano sul fatto che tutti i qubit code dovrebbero trovarsi nello stesso stato (tutti :math:`|0\\rangle` o tutti :math:`|1\\rangle`). Ogni deviazione dal valore aspettato è quindi un segnale della presenza di un errore. In particolare, pensiamo a :math:`d` qubit code disposti lungo una linea. Effettueremo una misura su ogni coppia di qubit code vicini. Questo ci dirà se sono uguali o diversi, senza estrarre alcuna informazione sul loro valore."

#: ../../tutorials/noise/6_repetition_code.ipynb:37
msgid "The implementation of these measurements requires :math:`d-1` additional qubits, which we will call *link qubits* for the repetition code. By pefforming two CNOTs between the pair of code qubits and a corresponding link qubit, the required information (and only the required information) is placed on the link qubit and can then be measured."
msgstr "L'implementazione di queste misurazioni richiede altri :math:`d-1` qubit aggiuntivi, che nel caso del codice di ripetizione vengono chiamati *qubit link*. Applicando due CNOT tra la coppia di qubit code ed il corrispondente qubit link, l'informazione richiesta (e solo quest'ultima) viene posizionata sul qubit link e può così essere misurata."

#: ../../tutorials/noise/6_repetition_code.ipynb:95
msgid "Here we provide tools for creating and testing repetition codes. The first thing we need to do is import them."
msgstr "Qui forniamo gli strumenti per creare e testare i codici di ripetizione. La prima cosa da fare è importarli nel codice."

#: ../../tutorials/noise/6_repetition_code.ipynb:119
msgid "Creating a repetition code"
msgstr "Creazione di un codice di ripetizione"

#: ../../tutorials/noise/6_repetition_code.ipynb:121
msgid "The ``repetition_code`` class creates a code for given values of :math:`d` and :math:`T`."
msgstr "La classe ``repetition_code`` crea un codice per i valori forniti di :math:`d` e :math:`T`."

#: ../../tutorials/noise/6_repetition_code.ipynb:144
msgid "With this we can inspect various properties of the code, such as the names of the qubit registers used for the code and ancilla qubits."
msgstr "Con questo è possibile ricavare diverse proprietà del codice, come i nomi dei registri di qubit utilizzati per il codice ed i qubit ausiliari."

#: ../../tutorials/noise/6_repetition_code.ipynb:185
msgid "These registers are also attributes of the ``repetition_code`` object."
msgstr "Questi registri sono anche attributi dell'oggetto ``repetition_code``."

#: ../../tutorials/noise/6_repetition_code.ipynb:226
msgid "You can also access the quantum circuits that implement the code. Two of these are produced: one for each of the two possible logical bit values."
msgstr "È anche possibile accedere ai circuiti quantistici che implementano il codice. Ne vengono prodotti due: uno per ognuno dei due possibili valori dei bit logici."

#: ../../tutorials/noise/6_repetition_code.ipynb:479
msgid "Building a custom repetition code"
msgstr "Costruzione di un codice di ripetizione personalizzato"

#: ../../tutorials/noise/6_repetition_code.ipynb:481
msgid "You can also implement measurement rounds and logical ``X`` gates yourself. For example, let's set up a code with no syndrome measurement rounds."
msgstr "Puoi anche tu stesso implementare cicli di misurazione e gate logici ``X``. Per esempio, impostiamo un codice senza cicli di misurazione della sindrome."

#: ../../tutorials/noise/6_repetition_code.ipynb:502
msgid "This does nothing but set up two circuits for the two logical encoded states. There are no syndrome measurement rounds, and no final readout."
msgstr "Questo non fa altro che impostare due circuiti per i due stati logici codificati. Non ci sono cicli di misurazione della sindrome, e nessuna lettura del risultato finale."

#: ../../tutorials/noise/6_repetition_code.ipynb:601
msgid "We can add a round using the ``syndrome_measurement()`` method."
msgstr "Possiamo aggiungere un ciclo utilizzando il metodo ``syndrome_measurement()``."

#: ../../tutorials/noise/6_repetition_code.ipynb:712
msgid "A logical ``X`` operation can be added using the ``x()`` method."
msgstr "Utilizzando il metodo ``x()`` è possibile aggiungere un'operazione logica ``X``."

#: ../../tutorials/noise/6_repetition_code.ipynb:823
msgid "This also has a ``logs`` kwarg, which is a list of the circuits for which ``X`` is applied. This is ``['0','1']`` by default."
msgstr "È presente anche il kwarg ``logs`` che fornisce la lista dei circuiti per cui è stato applicato ``X``. Questa è ``['0','1']`` da impostazione predefinita."

#: ../../tutorials/noise/6_repetition_code.ipynb:834
msgid "Final readout is then done with the ``readout()`` method."
msgstr "La lettura finale viene poi effettuata con il metodo ``readout()``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1012
msgid "Running a repetition code"
msgstr "Esecuzione di un codice di ripetizione"

#: ../../tutorials/noise/6_repetition_code.ipynb:1014
msgid "The code object produces the circuits required for the code. The user can then run them using any method they prefer, allowing full control over compilation, backends, noise models and so on."
msgstr "L'oggetto code produce i circuiti richiesti per il codice di ripetizione. L'utente può quindi eseguirli scegliendo il metodo più adatto, avendo quindi pieno controllo sulla compilazione, i backend, i modelli di rumore e così via."

#: ../../tutorials/noise/6_repetition_code.ipynb:1016
msgid "For example, here we run them without noise on the ``qasm_simulator``."
msgstr "Per esempio, qui li eseguiamo senza rumore sul ``qasm_simulator``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1076
msgid "Here the strings from right to left represent the outputs of the syndrome measurement rounds, followed by the final measurement of the code qubits."
msgstr "Qui le stringhe lette da destra a sinistra rappresentano i risultati delle misurazioni dei cicli della sindrome, seguiti dalla misura finale dei qubit code."

#: ../../tutorials/noise/6_repetition_code.ipynb:1078
msgid "These results need to be rewritten in a different form in order to be decoded. To do this we can use the ``process_results`` method of the code object."
msgstr "Per poter essere decodificati, questi risultati hanno bisogno di essere riscritti in una forma differente. Per fare questo è possibile utilizzare il metodo ``process_results`` dell'oggetto code."

#: ../../tutorials/noise/6_repetition_code.ipynb:1119
msgid "The result is a dictionary whose keys are bit strings that represent outputs of the circuit, and the values represent the number of shots for which this output occurred."
msgstr "Il risultato è un dizionario le cui chiavi sono stringhe di bit che rappresentano gli output del circuito, ed i valori rappresentano il numero di shot che si è ottenuto quell'output."

#: ../../tutorials/noise/6_repetition_code.ipynb:1121
msgid "The strings are not the direct output from the circuits. They have been processed to take the form that helps us correct errors. Here's a short guided tour."
msgstr "Le stringhe non sono gli output diretti dei circuiti. Sono state elaborate per assumere la forma che ci aiuta a correggere gli errori. Ecco una breve spiegazione sulla modalità di lettura."

#: ../../tutorials/noise/6_repetition_code.ipynb:1123
msgid "The ``0 0`` to the far left for the logical ``0`` result, and the ``1 1`` to the far left of the logical ``1``, are the logical readout. Any code qubit could be used for this readout, since they should (without errors) all be equal. So we could have just one result here, for one arbitrarily chosen code qubit. Or we could have :math:`d`, one for each qubit. Instead we have two, from the two qubits at either end of the line. This is because it works best with the decoder (which we'll use later). In the absence of errors, these two values will always be equal."
msgstr "Lo ``0 0`` all'estrema sinistra per il risultato logico ``0``, e ``1 1`` all'estrema sinistra per il logico ``1``, sono le letture logiche. Qualsiasi qubit code potrebbe essere utilizzato per questa lettura, dato che (senza la presenza di errori) dovrebbero essere tutti uguali. Quindi potremmo avere solo un risultato, per un qubit code scelto arbitrariamente. O ne potremmo avere :math:`d`, uno per ogni qubit. Invece ne abbiamo due, per i due qubit a fine riga. Questo perché funziona meglio con il decoder (che utilizzeremo più tardi). In assenza di errori, questi due valori sarebbero sempre uguali."

#: ../../tutorials/noise/6_repetition_code.ipynb:1126
msgid "The following ``0000`` is the :math:`d-1` results of the syndrome measurements for the first round.A ``0`` implies that the corresponding pair of qubits where the same, and ``1`` implies different. There are :math:`d-1` results because the line of :math:`d` code qubits has :math:`d-1` possible neighboring pairs. In the absence of errors, they will all be ``0``."
msgstr ""

#: ../../tutorials/noise/6_repetition_code.ipynb:1128
msgid "The ``0000`` that follows that is the syndrome change between the first and second rounds. It is therefore the bitwise ``OR`` of the syndrome measurement results from the second round with those from the first. In the absence of errors, they will all be ``0``."
msgstr ""

#: ../../tutorials/noise/6_repetition_code.ipynb:1130
msgid "Subsequent blocks follow the same formula, though the last requires some comment. This is not measured using the standard method (with a link qubit). Instead it is calculated from the final readout measurement of all code qubits. Again it is presented as a syndrome change, and will be all ``0`` in the absence of errors. This is the :math:`T+1`-th block of syndrome measurements since, as it is not done in the same way as the others, it is not counted among the :math:`T` syndrome measurement rounds."
msgstr ""

#: ../../tutorials/noise/6_repetition_code.ipynb:1133
msgid "**Example 1:** ``0 0  0110 0000 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``0``. The syndrome shows that (most likely) the middle code qubit was flipped by an error before the first measurement round. This causes it to disagree with both neighboring code qubits for the rest of the circuit. This is shown by the syndrome in the first round, but the blocks for subsequent rounds do not report it as it no longer represents a change. Other sets of errors could also have caused this syndrome, but they would need to be more complex and so presumably less likely."
msgstr ""

#: ../../tutorials/noise/6_repetition_code.ipynb:1136
msgid "**Example 2:** ``0 0  0010 0010 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``0``. Here one of the syndrome measurements reported a difference between two code qubits in the first round, leading to a ``1``. The next round did not see the same effect, and so resulted in a ``0``. However, since this disagreed with the previous result for the same syndrome measurement, and since we track syndrome changes, this change results in another ``1``. Subsequent rounds also do not detect anything, but this no longer represents a change and hence results in a ``0`` in the same position. Most likely the measurement result leading to the first ``1`` was an error."
msgstr ""

#: ../../tutorials/noise/6_repetition_code.ipynb:1139
msgid "**Example 3:** ``0 1  0000 0001 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``1``. A code qubit on the end of the line is flipped before the second round of syndrome measurements. This is detected by only a single syndrome measurement, because it is on the end of the line. For the same reason, it also disturbs one of the logical readouts."
msgstr ""

#: ../../tutorials/noise/6_repetition_code.ipynb:1141
msgid "Note that in all these examples, a single error causes exactly two characters in the string to change from the value it would have with no errors. This is, in fact, the reason why the logical output consists of both endpoints. It is a property that will be used by the decoder."
msgstr ""

#: ../../tutorials/noise/6_repetition_code.ipynb:1152
msgid "To see the effects of noise, we need to specify a noise model. For example, let's set up a simple noise model with gate and measurement errors."
msgstr "Per vedere gli effetti del rumore, dobbiamo specificare un modello di rumore. Per esempio, mettiamo a punto un semplice modello di rumore con gate ed errori di misurazione."

#: ../../tutorials/noise/6_repetition_code.ipynb:1197
msgid "This can then be run to generate noisy results. Let's make a quick function to do this, and then run it."
msgstr "Questo può quindi essere eseguito per generare risultati rumorosi. Creiamo una funzione rapida per farlo, e poi eseguiamola."

#: ../../tutorials/noise/6_repetition_code.ipynb:1457
msgid "Here the non-noisy results are the most likely. The rest of the samples are distributed among other possibilities with non-trivial syndromes."
msgstr ""

#: ../../tutorials/noise/6_repetition_code.ipynb:1469
msgid "Decoding a repetition code"
msgstr "Decodificare un codice di ripetizione"

#: ../../tutorials/noise/6_repetition_code.ipynb:1471
msgid "Noisy results can change the logical value at readout, and so affect our ability to read out the logical qubit. This can be mitigated by looking at the syndrome values. These can tell us whether or not the logical values are most likely to have changed, and so allow us to correct for the errors. The process of analyzing the syndrome to correct for the errors is called 'decoding'. We do this by building a decoding object for our code."
msgstr ""

#: ../../tutorials/noise/6_repetition_code.ipynb:1492
msgid "This analyzes the code by seeing how different kinds of error change the output. With this information, along with a decoding algorithm, we can determine what the logical value is most likely to have been."
msgstr ""

#: ../../tutorials/noise/6_repetition_code.ipynb:1494
msgid "For example, let's use the 'matching' algorithm to decode, which is based on minimum weight perfect matching. This takes specific output strings as input. We'll give it the simple example string ``'1 0  001 100 100'``, for a logical ``1`` that has suffered two errors."
msgstr ""

#: ../../tutorials/noise/6_repetition_code.ipynb:1535
msgid "The output is what the logical part should have been. As you can see, the decoder correctly determined that the readout should have been of a logical ``1``."
msgstr ""

#: ../../tutorials/noise/6_repetition_code.ipynb:1546
msgid "When we take many samples, we can determine the probability with which the decoder is incorrect. This should decrease exponentially as the code size is increased, since the configurations of noise that fool the decoder become less likely. The probability of a logical error is calculated using the ``logical_prob()`` method. This runs matching by default, but other algorithms can be specified by the ``algorithm`` kwarg."
msgstr ""

