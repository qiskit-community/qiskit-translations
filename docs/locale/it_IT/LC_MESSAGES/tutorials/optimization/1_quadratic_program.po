msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-02 15:42+0000\n"
"PO-Revision-Date: 2020-10-02 16:10\n"
"Last-Translator: \n"
"Language-Team: Italian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: it\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/1_quadratic_program.po\n"
"X-Crowdin-File-ID: 9148\n"
"Language: it_IT\n"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:10
msgid "This page was generated from `tutorials/optimization/1_quadratic_program.ipynb`__."
msgstr "Questa pagina è stata generata da `tutorials/optimization/1_quadratic_program.ipynb`__."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:9
msgid "Quadratic Programs"
msgstr "Programmi Quadratici"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:21
msgid "Introduction"
msgstr "Introduzione"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:32
msgid "In this tutorial, we briefly introduce how to build optimization problems using Qiskit's optimization module. Qiskit introduces the ``QuadraticProgram`` class to make a model of an optimization problem. More precisely, it deals with quadratically constrained quadratic programs given as follows:"
msgstr ""

#: ../../tutorials/optimization/1_quadratic_program.ipynb:34
msgid "\\begin{align}\n"
"\\text{minimize}\\quad& x^\\top Q_0 x + c^\\top x\\\\\n"
"\\text{subject to}\\quad& A x \\leq b\\\\\n"
"& x^\\top Q_i x + a_i^\\top x \\leq r_i, \\quad 1,\\dots,i,\\dots,q\\\\\n"
"& l_i \\leq x_i \\leq u_i, \\quad 1,\\dots,i,\\dots,n,\n"
"\\end{align}"
msgstr "\\begin{align}\n"
"\\text{minimize}\\quad& x^\\top Q_0 x + c^\\top x\\\\\n"
"\\text{subject to}\\quad& A x \\leq b\\\\\n"
"& x^\\top Q_i x + a_i^\\top x \\leq r_i, \\quad 1,\\dots,i,\\dots,q\\\\\n"
"& l_i \\leq x_i \\leq u_i, \\quad 1,\\dots,i,\\dots,n,\n"
"\\end{align}"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:44
msgid "where the :math:`Q_i` are :math:`n \\times n` matrices, :math:`A` is a :math:`m \\times n` matrix , :math:`x`, and :math:`c` are :math:`n`-dimensional vectors, :math:`b` is an :math:`m`-dimensional vector, and where :math:`x` can defined as binary, integer, or continuous variables. In addition to \":math:`\\leq`\" constraints 'QuadraticProgram' also supports \":math:`\\geq`\" and \":math:`=`\"."
msgstr "dove i :math:`Q_i`sono matrici :math:`n \\times n`, :math:`A` è una matrice :math:`m \\times n`, :math:`x` e :math:`c` sono vettori :math:`n`-dimensionali, :math:`b` è un vettore :math:`m`-dimensionale, e dove :math:`x` può essere definita come variabile binaria, intera o continua. Oltre a vincoli di tipo \":math:`\\leq`\", 'QuadraticProgram' supporta anche \":math:`\\geq`\" e \":math:`=`\"."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:56
msgid "Loading a ``Quadratic Program`` from an LP file"
msgstr "Caricare un ``Quadratic Program`` da un file LP"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:67
msgid "As setup, you need to import the following module."
msgstr "Come setup, è necessario importare il seguente modulo."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:88
msgid "You start with an empty model. How to add variables and constraints to a model is explained in the section \"Directly constructing a ``QuadraticProgram``\"."
msgstr "Si inizia con un modello vuoto. Come aggiungere variabili e vincoli a un modello è spiegato nella sezione \"Costruire direttamente un ``QuadraticProgram``\"."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:99
msgid "Qiskit's optimization module supports the conversion from Docplex model. You can easily make a model of an optimization problem with Docplex. You can find the documentation of Docplex at https://ibmdecisionoptimization.github.io/docplex-doc/mp/index.html"
msgstr "Il modulo di ottimizzazione di Qiskit supporta la conversione da un modello Docplex. Si può facilmente creare un modello di un problema di ottimizzazione con Docplex. La documentazione di Docplex è disponibile all'indirizzo https://ibmdecisionoptimization.github.io/docplex-doc/mp/index.html"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:101
msgid "You can load a Docplex model to ``QuadraticProgram`` by invoking ``from_docplex``."
msgstr "Un modello Docplex può essere caricato in un ``QuadraticProgram`` usando ``from_docplex``."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:113
msgid "Loading a ``QuadraticProgram`` from a docplex model"
msgstr "Caricare un ``QuadraticProgram`` da un modello docplex"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:275
msgid "Directly constructing a ``QuadraticProgram``"
msgstr "Costruire direttamente un ``QuadraticProgram``"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:286
msgid "We then explain how to make model of an optimization problem directly using ``QuadraticProgram``. Let's start from an empty model."
msgstr "Vediamo ora come creare un modello di un problema di ottimizzazione utilizzando direttamente ``QuadraticProgram``. Cominciamo con un modello vuoto."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:348
msgid "The ``QuadraticProgram`` supports three types of variables: - Binary variable - Integer variable - Continuous variable"
msgstr "Il ``QuadraticProgram`` supporta tre tipi di variabili: - variabile Binaria - variabile Intera - variabile Continua"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:350
msgid "When you add variables, you can specify names, types, lower bounds and upper bounds."
msgstr "Quando si aggiunge una variabile, è possibile specificare nomi, tipi, limiti inferiori e superiori."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:352
msgid "When you display your problem as LP format, ``Binaries`` denotes binary variables and ``Generals`` denotes integer variables. If variables are not included in either ``Binaries`` or ``Generals``, such variables are continuous ones with default lower bound = 0 and upper bound = infinity. Note that you cannot use 'e' or 'E' as the first character of names due to the `specification of LP format <https://www.ibm.com/support/knowledgecenter/SSSA5P_12.7.1/ilog.odms.cplex.help/CPLEX/FileFormats/topics/LP_VariableNames.html>`__."
msgstr "Quando si visualizza il problema in formato LP, ``Binaries`` denota le variabili binarie e ``Generals`` denota le variabili intere. Se le variabili non sono incluse in ``Binaries`` o ``Generals``, tali variabili sono continue, con limite inferiore predefinito = 0 e limite superiore = infinito. Da notare che non è possibile utilizzare 'e' o 'E' come primo carattere dei nomi a causa delle `specifiche del formato LP <https://www.ibm.com/support/knowledgecenter/SSSA5P_12.7.1/ilog.odms.cplex.help/CPLEX/FileFormats/topics/LP_VariableNames.html>` __."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:435
msgid "You can set the objective function by invoking ``QuadraticProgram.minimize`` or ``QuadraticProgram.maximize``. You can add a constant term as well as linear and quadratic objective function by specifying linear and quadratic terms with either list, matrix or dictionary."
msgstr "È possibile impostare la funzione obiettivo tramite ``QuadraticProgram.minimize`` o ``QuadraticProgram.maximize``. Si può aggiungere un termine costante, così come una funzione obiettivo lineare o quadratica specificando i termini lineari e quadratici con una lista, una matrice o un dizionario."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:437
msgid "Note that in the LP format the quadratic part has to be scaled by a factor :math:`1/2`. Thus, when printing as LP format, the quadratic part is first multiplied by 2 and then divided by 2 again."
msgstr "Da notare che nel formato LP la parte quadratica deve essere scalata di un fattore :math:`1/2`. Per questo motivo, quando mostrata in formato LP, la parte quadratica è prima moltiplicata per 2 e poi nuovamente divisa per 2."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:439
msgid "For quadratic programs, there are 3 pieces that have to be specified: a constant (offset), a linear term (:math:`c^{T}x`), and a quadratic term (:math:`x^{T}Qx`)."
msgstr ""

#: ../../tutorials/optimization/1_quadratic_program.ipynb:441
msgid "The cell below shows how to declare an objective function using a dictionary. For the linear term, keys in the dictionary correspond to variable names, and the corresponding values are the coefficients. For the quadratic term, keys in the dictionary correspond to the two variables being multiplied, and the values are again the coefficients."
msgstr ""

#: ../../tutorials/optimization/1_quadratic_program.ipynb:521
msgid "Another way to specify the quadratic program is using arrays. For the linear term, the array corresponds to the vector :math:`c` in the mathematical formulation. For the quadratic term, the array corresponds to the matrix :math:`Q`. Note that the ordering of the variables (:math:`x` in the mathematical formulation) is the order in which the variables were originally declared in the QuadraticProgram object."
msgstr ""

#: ../../tutorials/optimization/1_quadratic_program.ipynb:601
msgid "You can access the constant, the linear term, and the quadratic term by looking at ``Quadratic.objective.{constant, linear, quadratic}``, respectively. As for linear and quadratic terms, you can get a dense matrix (``to_array``), a sparse matrix (``coefficients``), and a dictionary (``to_dict``). For dictionaries, you can specify whether to use variable indices or names as keys. Note that the quadratic terms are stored in a compressed way, e.g., ``{('x', 'y'): 1, ('y', 'x'): 2}`` is stored as ``{('x', 'y'): 3}``. You can get the quadratic term as a symmetric matrix by calling ``to_array(symmetric=True)`` or ``to_dict(symmetric=True)``. If you call ``to_dict(name=True)``, you can get a dictionary whose keys are pairs of variable names."
msgstr "È possibile accedere al termine costante, lineare e quadratico guardando rispettivamente ``Quadratic.objective.{constant, linear, quadratic}``. Per i termini lineari e quadratici si può ottenere una matrice densa (``to_array``), una matrice sparsa (``coefficients``), e un dizionario (``to_dict``). Per i dizionari è possibile specificare se usare gli indici delle variabili o i loro nomi come chiavi. Si noti che i termini quadratici sono salvati in maniera compressa, ad esempio ``{('x', 'y'): 1, ('y', 'x'): 2}`` è salvato come ``{('x', 'y'): 3}``. Si può ottenere il termine quadratico come una matrice simmetrica usando ``to_array(symmetric=True)`` o ``to_dict(symmetric=True)``. Usando ``to_dict(name=True)`` si ottiene un dizionario le cui chiavi sono coppie di nomi di variabili."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:694
msgid "Adding/removing linear and quadratic constraints"
msgstr "Aggiungere/rimuovere vincoli lineari e quadratici"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:705
msgid "You can add linear constraints by setting name, linear expression, sense and right-hand-side value (rhs). You can use senses 'EQ', 'LE', and 'GE' as Docplex supports."
msgstr "Si possono aggiungere vincoli lineari impostando nome, espressione lineare, direzione e valore destro (rhs). Si possono utilizzare le direzioni 'EQ', 'LE', e 'GE' come supportato da Docplex."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:793
msgid "You can add quadratic constraints as well as objective function and linear constraints."
msgstr "Si possono aggiungere vincoli quadratici, così come funzioni obiettivo e vincoli lineari."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:887
msgid "You can access linear and quadratic terms of linear and quadratic constraints as in the same way as the objective function."
msgstr "È possibile accedere ai termini lineari e quadratici dei vincoli lineari e quadratici nello stesso modo in cui si accede a quelli della funzione obiettivo."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:932
msgid "You can also remove linear/quadratic constraints by ``remove_linear_constraint`` and ``remove_quadratic_constraint``."
msgstr "Si possono inoltre rimuovere vincoli lineari/quadratici usando ``remove_linear_constraint`` e ``remove_quadratic_constraint``."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:1021
msgid "You can substitute some of variables with constants or other variables. More precicely, ``QuadraticProgram`` has a method ``substitute_variables(constants=..., variables=...)`` to deal with the following two cases. - :math:`x \\leftarrow c`: when ``constants`` have a dictionary ``{x: c}``. - :math:`x \\leftarrow c y`: when ``variables`` have a dictionary ``{x: (y, c)}``."
msgstr "È possibile sostituire alcune delle variabili con costanti o con altre variabili. Più precisamente, ``QuadraticProgram`` contiene un metodo ``substitute_variables(constants=..., variables=...)`` per gestire i seguenti due casi. - :math:`x \\leftarrow c`: quando ``constants`` hanno un dizionario ``{x: c}``.- :math:`x \\leftarrow c y`: quando ``variables`` hanno un dizionario ``{x: (y, c)}``."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:1033
msgid "Substituting Variables"
msgstr "Sostituire le Variabili"

#: ../../tutorials/optimization/1_quadratic_program.ipynb:1104
msgid "If the resulting problem is infeasible due to lower bounds or upper bounds, the methods returns the status ``Status.INFEASIBLE``. We try to replace variable ``x`` with -1, but -1 is out of range of ``x`` (0 <= ``x`` <= 1). So, it returns ``Status.INFEASIBLE``."
msgstr "Se il problema risultante è infattibile per via dei vincoli inferiori o superiori, i metodi restituiscono lo status ``Status.INFEASIBLE``. Si cerca di sostituire la variabile ``x`` con -1, ma -1 è al di fuori dell'intervallo di ``x`` (0 <= ``x`` <= 1). Perciò restituisce ``Status.INFEASIBLE``."

#: ../../tutorials/optimization/1_quadratic_program.ipynb:1148
msgid "You cannot substitute variables multiple times. The method raises an error in such a case."
msgstr "Non è possibile sostituire più volte le variabili. In tal caso il metodo genera un errore."

