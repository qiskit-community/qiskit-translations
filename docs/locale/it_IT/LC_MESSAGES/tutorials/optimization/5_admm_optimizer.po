msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-08 17:23+0000\n"
"PO-Revision-Date: 2021-03-04 16:30\n"
"Last-Translator: \n"
"Language-Team: Italian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: it\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/5_admm_optimizer.po\n"
"X-Crowdin-File-ID: 9156\n"
"Language: it_IT\n"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:10
msgid "This page was generated from `tutorials/optimization/5_admm_optimizer.ipynb`__."
msgstr "Questa pagina è stata generata da `tutorials/optimization/5_admm_optimizer.ipynb`__."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/optimization/5_admm_optimizer.ipynb>`_."
msgstr "Esegui interattivamente in `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/optimization/5_admm_optimizer.ipynb>`_."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:9
msgid "ADMM Optimizer"
msgstr "ADMM Optimizer"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:21
msgid "Introduction"
msgstr "Introduzione"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:32
msgid "The ADMM Optimizer can solve classes of mixed-binary constrained optimization problems, hereafter (MBCO), which often appear in logistic, finance, and operation research. In particular, the ADMM Optimizer here designed can tackle the following optimization problem :math:`(P)`:"
msgstr "L'ADMM Optimizer è in grado di risolvere le classi di problemi di ottimizzazione binaria-mista vincolata, (mixed-binary constrained optimization, di seguito riferita come MBCO), che spesso compaiono nella ricerca logistica, finanziaria e operativa. In particolare, l'ADMM Optimizer qui progettato può affrontare il seguente problema di ottimizzazione :math:`(P)`:"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:34
msgid "\\min_{x \\in \\mathcal{X},u\\in\\mathcal{U} \\subseteq \\mathbb{R}^l } \\quad q(x) + \\varphi(u),"
msgstr ""

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:39
msgid "subject to the constraints:"
msgstr "soggetto ai vincoli:"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:41
msgid "\\mathrm{s.t.:~} \\quad G x = b, \\quad  g(x) \\leq 0, \\quad \\ell(x, u) \\leq 0,"
msgstr "\\mathrm{s.t.:~} \\quad G x = b, \\quad  g(x) \\leq 0, \\quad \\ell(x, u) \\leq 0,"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:46
msgid "with the corresponding functional assumptions."
msgstr "con i corrispondenti postulati funzionali."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:48
msgid "Function :math:`q: \\mathbb{R}^n \\to \\mathbb{R}` is quadratic, i.e., :math:`q(x) = x^{\\intercal} Q x + a^{\\intercal} x` for a given symmetric squared matrix :math:`Q \\in \\mathbb{R}^n \\times \\mathbb{R}^n, Q = Q^{\\intercal}`, and vector :math:`a \\in \\mathbb{R}^n`;"
msgstr "Funzione :math:`q: \\mathbb{R}^n \\to \\mathbb{R}` è quadratica, cioè :math:`q(x) = x^{\\intercal} Q x + a^{\\intercal} x` per una data matrice quadrata simmetrica :math:`Q \\in \\mathbb{R}^n \\times \\mathbb{R}^n, Q = Q^{\\intercal}`, and vector :math:`a \\in \\mathbb{R}^n`;"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:49
msgid "The set :math:`\\mathcal{X} = \\{0,1\\}^n = \\{x_{(i)} (1-x_{(i)}) = 0, \\forall i\\}` enforces the binary constraints;"
msgstr "Il set :math:`\\mathcal{X} = \\{0,1\\}^n = \\{x_{(i)} (1-x_{(i)}) = 0, \\forall i\\}` forza i vincoli binari;"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:50
msgid "Matrix :math:`G\\in\\mathbb{R}^n \\times \\mathbb{R}^{n'}`, vector :math:`b \\in \\mathbb{R}^{n'}`, and function :math:`g: \\mathbb{R}^n \\to \\mathbb{R}` is convex;"
msgstr "Matrice :math:`G\\in\\mathbb{R}^n \\times \\mathbb{R}^{n'}`, vettore :math:`b \\in \\mathbb{R}^{n'}`, e la funzione :math:`g: \\mathbb{R}^n \\to \\mathbb{R}` è convessa;"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:51
msgid "Function :math:`\\varphi: \\mathbb{R}^l \\to \\mathbb{R}` is convex and :math:`\\mathcal{U}` is a convex set;"
msgstr "Funzione :math:`\\varphi: \\mathbb{R}^l \\to \\mathbb{R}` è convessa e :math:`\\mathcal{U}` è un set convesso;"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:52
msgid "Function :math:`\\ell: \\mathbb{R}^n\\times \\mathbb{R}^l \\to \\mathbb{R}` is *jointly* convex in :math:`x, u`."
msgstr "Funzione :math:`\\ell: \\mathbb{R}^n\\times \\mathbb{R}^l \\to \\mathbb{R}` è *congiuntamente* convessa in :math:`x, u`."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:63
msgid "In order to solve MBO problems, [1] proposed heuristics for :math:`(P)` based on the Alternating Direction Method of Multipliers (ADMM) [2]. ADMM is an operator splitting algorithm with a long history in convex optimization, and it is known to have residual, objective and dual variable convergence properties, provided that convexity assumptions are holding."
msgstr "Per risolvere i problemi di MBO, [1] sono state fatte proposte euristiche per :math:`(P)` sulla base del Metodo di Direzione Alternata dei Moltiplicatori (ADMM) [2]. ADMM è un algoritmo di suddivisione dell'operatore con una lunga storia nel campo dell'ottimizzazione convessa, ed è noto per avere proprietà di convergenza di variabili residue, oggettive e doppie, a condizione che siano soddisfatte le ipotesi di convessità."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:65
msgid "The method of [1] (referred to as 3-ADMM-H) leverages the ADMM operator-splitting procedure to devise a decomposition for certain classes of MBOs into: - a QUBO subproblem to be solved by on the quantum device via variational algorithms, such as VQE or QAOA; - continuous convex constrained subproblem, which can be efficiently solved with classical optimization solvers."
msgstr "Il metodo [1] (indicato come 3 - ADMM - H) sfrutta la procedura ADMM di suddivisione dell'operatore per ideare una decomposizione per alcune classi di MBO in: - un sottoproblema QUBO da risolvere sul computer quantistico tramite algoritmi variazionali, come VQE o QAOA; - un sottoproblema continuo convesso, che può essere efficacemente risolto con ottimizzatori classici."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:67
msgid "The algorithm 3-ADMM-H works as follows:"
msgstr "L'algoritmo 3-ADMM-H funziona come segue:"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:69
msgid "Initialization phase (set the parameters and the QUBO and convex solvers);"
msgstr "Fase di inizializzazione (impostare i parametri e le soluzioni QUBO e convex);"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:70
msgid "For each ADMM iterations ($k = 1, 2, :nbsphinx-math:`\\ldots`, $) untill termination:"
msgstr "Per ogni iterazione ADMM ($k = 1, 2, :nbsphinx-math:`\\ldots`, $) fino alla fine:"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:72
msgid "Solve a properly defined QUBO subproblem (with a classical or quantum solver);"
msgstr "Risolvere un sottoproblema QUBO correttamente definito (con un risolutore classico o quantistico);"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:73
msgid "Solve properly defined convex problems (with a classical solver);"
msgstr "Risolvere problemi convessi ben definiti (con un risolutore classico);"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:74
msgid "Update the dual variables."
msgstr "Aggiorna le variabili duali."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:76
msgid "Return optimizers and cost."
msgstr "Ritornare gli ottimizzatori e i costi."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:78
msgid "A comprehensive discussion on the conditions for convergence, feasibility and optimality of the algorithm can be found in [1]. A variant with 2 ADMM blocks, namely a QUBO subproblem, and a continuous convex constrained subproblem, is also introduced in [1]."
msgstr "Una discussione esauriente sulle condizioni di convergenza, fattibilità e ottimizzazione dell'algoritmo si può trovare nella ref. [1]. Nella [1] viene anche introdotta una variante con 2 blocchi ADMM, ovvero un sottoproblema QUBO, e un sottoproblema vincolato, convesso e continuo."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:81
msgid "References"
msgstr "Riferimenti"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:83
msgid "[1] `C. Gambella and A. Simonetto, Multi-block ADMM heuristics for mixed-binary optimization, on classical and quantum computers, arXiv preprint arXiv:2001.02069 (2020). <https://arxiv.org/abs/2001.02069>`__"
msgstr "[1] `C. Gambella and A. Simonetto, Multi-block ADMM heuristics for mixed-binary optimization, on classical and quantum computers, arXiv preprint arXiv:2001.02069 (2020). <https://arxiv.org/abs/2001.02069>`__"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:85
msgid "[2] `S. Boyd, N. Parikh, E. Chu, B. Peleato, and J. Eckstein, Distributed optimization and statistical learning via the alternating direction method of multipliers, Foundations and Trends in Machine learning, 3, 1–122 (2011). <https://web.stanford.edu/~boyd/papers/pdf/admm_distr_stats.pdf>`__"
msgstr "[2] `S. Boyd, N. Parikh, E. Chu, B. Peleato, and J. Eckstein, Distributed optimization and statistical learning via the alternating direction method of multipliers, Foundations and Trends in Machine learning, 3, 1–122 (2011). <https://web.stanford.edu/~boyd/papers/pdf/admm_distr_stats.pdf>`__"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:97
msgid "Initialization"
msgstr "Inizializzazione"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:99
msgid "First of all we load all the packages that we need."
msgstr "Prima di tutto carichiamo tutti i pacchetti di cui abbiamo bisogno."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:137
msgid "We first initialize all the algorithms we plan to use later in this tutorial."
msgstr "Innanzitutto inizializziamo tutti gli algoritmi che prevediamo di utilizzare in seguito in questo tutorial."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:139
msgid "To solve the QUBO problems we can choose between - ``MinimumEigenOptimizer`` using different ``MinimumEigensolver``, such as ``VQE``, ``QAOA`` or ``NumpyMinimumEigensolver`` (classical) - ``GroverOptimizer`` - ``CplexOptimizer`` (classical, if CPLEX is installed)"
msgstr "Per risolvere i problemi QUBO possiamo scegliere tra - ``MinimumEigenOptimizer`` utilizzando diversi ``MinimumEigensolver``, come ``VQE ``, ``QAOA`` o ``NumpyMinimumEigensolver`` (classico) - ``GroverOptimizer`` - ``CplexOptimizer`` (classico, se CPLEX è installato)"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:141
msgid "and to solve the convex continuous problems we can choose between the following classical solvers: - ``CplexOptimizer`` (if CPLEX is installed) - ``CobylaOptimizer``"
msgstr "e per risolvere i problemi continui convessi possiamo scegliere tra i seguenti risolutori classici: - ``CplexOptimizer`` (se CPLEX è installato) - ``CobylaOptimizer``"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:143
msgid "In case CPLEX is not available, the ``CobylaOptimizer`` (for convex continuous problems) and the ``MinimumEigenOptimizer`` using the ``NumpyMinimumEigensolver`` (for QUBOs) can be used as classical alternatives to CPLEX for testing, validation, and benchmarking."
msgstr "Nel caso in cui CPLEX non sia disponibile, il ``CobylaOptimizer`` (per i problemi continui c onvessi) e ``MinimumEigenOptimizer`` utilizzando il ``NumpyMinimumEigensolver`` (per QUBO) può essere utilizzato come alternativa classica a CPLEX per test, validazione e benchmarking."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:177
msgid "Example"
msgstr "Esempio"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:179
msgid "We test 3-ADMM-H algorithm on a simple Mixed-Binary Quadratic Problem with equality and inequality constraints (Example 6 reported in [1]). We first construct a docplex problem and then load it into a ``QuadraticProgram``."
msgstr "Testiamo l'algoritmo 3 - ADMM - H su un semplice problema Mixed-Binary Quadratic con vincoli di uguaglianza e disuguaglianza (Esempio 6 riportato nel [1]). Prima costruiamo un problema docplex e poi lo carichiamo in un ``QuadraticProgram``."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:274
msgid "Classical Solution"
msgstr "Soluzione Classica"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:276
msgid "3-ADMM-H needs a QUBO optimizer to solve the QUBO subproblem, and a continuous optimizer to solve the continuous convex constrained subproblem. We first solve the problem classically: we use the ``MinimumEigenOptimizer`` with the ``NumPyMinimumEigenSolver`` as a classical and exact QUBO solver and we use the ``CobylaOptimizer`` as a continuous convex solver. 3-ADMM-H supports any other suitable solver available in Qiskit. For instance, VQE, QAOA, and GroverOptimizer can be invoked as quantum solvers, as demonstrated later. If CPLEX is installed, the ``CplexOptimizer`` can also be used as both, a QUBO and convex solver."
msgstr "3-ADMM-H ha bisogno di un ottimizzatore QUBO per risolvere il sottoproblema QUBO, e di un ottimizzatore continuo per risolvere il sottoproblema convesso continuo. In primo luogo risolviamo il problema classicamente: usiamo il ``MinimumEigenOptimizer`` con il ``NumPyMinimumEigenSolver``, come risolutore QUBO classico ed esatto, e usiamo il ``CobylaOptimizer`` come risolutore continuo convesso. 3-ADMM-H supporta qualsiasi altro risolutore adatto disponibile in Qiskit. Per esempio, VQE, QAOA e GroverOptimizer possono essere invocati come risolutori quantistici, come dimostrato più tardi. Se CPLEX è installato, anche il ``CplexOptimizer`` può essere usato come un risolutore QUBO e convesso."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:289
msgid "Parameters"
msgstr "Parametri"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:291
msgid "The 3-ADMM-H are wrapped in class ``ADMMParameters``. Customized parameter values can be set as arguments of the class. In this example, parameters :math:`\\rho, \\beta` are initialized to :math:`1001` and :math:`1000`, respectively. The penalization ``factor_c`` of equality constraints :math:`Gx = b` is set to :math:`900`. The tolerance ``tol`` for primal residual convergence is set to ``1.e-6``. In this case, the 3-block implementation is guaranteed to converge for Theorem 4 of [1], because the inequality constraint with the continuous variable is always active. The 2-block implementation can be run by setting ``three_block=False``, and practically converges to a feasible not optimal solution."
msgstr "I 3-ADMM-H sono avvolti nella classe ``ADMMParameters``. I valori dei parametri personalizzati possono essere impostati come argomenti della classe. In questo esempio, i parametri :math:`\\rho, \\beta` sono inizializzati rispettivamente a :math:`1001` e :math:`1000`. La penalizzazione ``factor_c`` dei vincoli di uguaglianza :math:`Gx = b` è impostata a :math:`900`. La tolleranza ``tol`` per la convergenza residua primaria è impostata a ``1.e-6``. In questo caso, l'implementazione a 3 blocchi è garantita per convergere per il Teorema 4 di [1], perché il vincolo di disuguaglianza con la variabile continua è sempre attivo. L'implementazione a 2 blocchi può essere eseguita impostando ``three_block=False``, che fa convergere in una soluzione non ottimale."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:320
msgid "Calling 3-ADMM-H algorithm"
msgstr "Invocare l'algoritmo 3-ADMM-H"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:322
msgid "To invoke the 3-ADMM-H algorithm, an instance of the ``ADMMOptimizer`` class needs to be created. This takes ADMM-specific parameters and the subproblem optimizers separately into the constructor. The solution returned is an instance of ``OptimizationResult`` class."
msgstr "Per invocare l'algoritmo 3-ADMM-H, è necessario creare un'istanza della classe ``ADMMOptimizer``. Questo richiede parametri specifici per l'ADMM e gli ottimizzatori del sottoproblema separatamente nel costruttore. La soluzione restituita è un'istanza della classe ``OptimizationResult``."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:366
msgid "Classical Solver Result"
msgstr "Risultato del Risolutore Classico"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:368
msgid "The 3-ADMM-H solution can be then printed and visualized. The ``x`` attribute of the solution contains respectively, the values of the binary decision variables and the values of the continuous decision variables. The ``fval`` is the objective value of the solution."
msgstr "La soluzione 3-ADMM-H può essere stampata e visualizzata. L'attributo ``x`` della soluzione contiene, rispettivamente, i valori delle variabili di decisione binaria e i valori delle variabili continue di decisione. ``fval`` è il valore obiettivo della soluzione."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:411
msgid "Solution statistics can be accessed in the ``state`` field and visualized. We here display the convergence of 3-ADMM-H, in terms of primal residuals."
msgstr "Le statistiche della soluzione possono essere consultate nel campo ``state`` e visualizzate. Qui mostriamo la convergenza di 3-ADMM-H, in termini di residui primari."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:444
msgid "Quantum Solution"
msgstr "Soluzione Quantistica"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:446
msgid "We now solve the same optimization problem with QAOA as QUBO optimizer, running on simulated quantum device. First, one need to select the classical optimizer of the eigensolver QAOA. Then, the simulation backend is set. Finally, the eigensolver is wrapped into the ``MinimumEigenOptimizer`` class. A new instance of ``ADMMOptimizer`` is populated with QAOA as QUBO optimizer."
msgstr "Ora risolviamo lo stesso problema di ottimizzazione con il QAOA come ottimizzatore QUBO, in esecuzione su dispositivo quantistico simulato. In primo luogo, è necessario selezionare l'ottimizzatore classico dell'eigensolver QAOA. Poi, viene impostato il backend di simulazione. Infine, l'eigensolver è avvolto nella classe ``MinimumEigenOptimizer``. Una nuova istanza di ``ADMMOptimizer`` è popolata con il QAOA come ottimizzatore QUBO."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:489
msgid "Quantum Solver Results"
msgstr "Risultati ottenuti dal Quantum Solver"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:491
msgid "Here we present the results obtained from the quantum solver. As in the example above ``x`` stands for the solution, the ``fval`` is for objective value."
msgstr "Qui presentiamo i risultati ottenuti dal quantum solver (risolutore quantistico). Come nell'esempio sopra ``x`` sta per soluzione, ``fval`` per valore oggettivo."

