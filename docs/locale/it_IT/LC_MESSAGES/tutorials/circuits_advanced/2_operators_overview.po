msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-14 09:35+0000\n"
"PO-Revision-Date: 2020-08-07 17:56\n"
"Last-Translator: \n"
"Language-Team: Italian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: it\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/2_operators_overview.po\n"
"X-Crowdin-File-ID: 9124\n"
"Language: it_IT\n"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:10
msgid "This page was generated from `tutorials/circuits_advanced/2_operators_overview.ipynb`__."
msgstr "Questa pagina è stata generata a partire da `tutorials/circuits_advanced/2_operators_overview.ipynb`__."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:9
msgid "Operators"
msgstr "Operatori"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:39
msgid "Operator Class"
msgstr "Classe Operator"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:41
msgid "The ``Operator`` class is used in Qiskit to represent matrix operators acting on a quantum system. It has several methods to build composite operators using tensor products of smaller operators, and to compose operators."
msgstr "La classe ``Operator`` è utilizzata in Qiskit per rappresentare operatori di matrice che agiscono su un sistema quantistico. Ha diversi metodi per costruire operatori composti attraverso prodotti tensoriali di piccoli operatori, e per comporre operatori."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:44
msgid "Creating Operators"
msgstr "Creare Operatori"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:46
msgid "The easiest way to create an operator object is to initialize it with a matrix given as a list or a Numpy array. For example, to create a two-qubit Pauli-XX operator:"
msgstr "Il modo più semplice per creare un oggetto operatore è inizializzarlo con una matrice data come una lista o un array Numpy. Ad esempio, per creare un operatore Pauli-XX a due qubit:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:97
msgid "Operator Properties"
msgstr "Proprietà dell'Operatore"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:99
msgid "The operator object stores the underlying matrix, and the input and output dimension of subsystems."
msgstr "L'oggetto operatore memorizza la matrice sottostante, e la dimensione in ingresso e in uscita dei sottosistemi."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:101
msgid "``data``: To access the underly Numpy array, we may use the ``Operator.data`` property."
msgstr "``data``: Per accedere all'array Numpy sottostante possiamo usare la proprietà ``Operator.data``."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:102
msgid "``dims``: To return the total input and output dimension of the operator, we may use the ``Operator.dim`` property. *Note: the output is returned as a tuple ``(input_dim, output_dim)``, which is the reverse of the shape of the underlying matrix.*"
msgstr "``dims``: Per restituire la dimensione totale di input e output dell'operatore possiamo utilizzare la proprietà ``Operator.dim``. * Nota: l'output è restituito come una tupla ``(input_dim, output_dim)``, che corrisponde all'ordine inverso di colonne e righe della matrice sottostante.*"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:181
msgid "Input and Output Dimensions"
msgstr "Dimensioni di Input e Output"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:183
msgid "The operator class also keeps track of subsystem dimensions, which can be used for composing operators together. These can be accessed using the ``input_dims`` and ``output_dims`` functions."
msgstr "La classe di operatore tiene inoltre traccia delle dimensioni del sottosistema, che possono essere utilizzate per comporre insieme gli operatori. È possibile accedervi utilizzando le funzioni ``input_dims`` e ``output_dims``."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:185
msgid "For :math:`2^N` by :math:`2^M` operators, the input and output dimension will be automatically assumed to be M-qubit and N-qubit:"
msgstr "Per gli operatori di dimensione :math:`2^N` per :math:`2^M`, la dimensione di input e output verrà automaticamente interpretata come M-qubit e N-qubit:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:229
msgid "If the input matrix is not divisible into qubit subsystems, then it will be stored as a single-qubit operator. For example, if we have a :math:`6\\times6` matrix:"
msgstr "Se la matrice di ingresso non è divisibile in sottosistemi di qubit, allora sarà memorizzata come un operatore di singolo qubit. Ad esempio, se abbiamo una matrice :math:`6\\times6`:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:273
msgid "The input and output dimension can also be manually specified when initializing a new operator:"
msgstr "La dimensione di input e output può anche essere specificata manualmente quando si inizializza un nuovo operatore:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:353
msgid "We can also extract just the input or output dimensions of a subset of subsystems using the ``input_dims`` and ``output_dims`` functions:"
msgstr "Possiamo anche estrarre solo le dimensioni di input o output di un sottoinsieme di sottosistemi utilizzando le funzioni ``input_dims`` e ``output_dims``:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:397
msgid "Converting classes to Operators"
msgstr "Conversione delle classi in Operatori"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:399
msgid "Several other classes in Qiskit can be directly converted to an ``Operator`` object using the operator initialization method. For example:"
msgstr "Diverse altre classi in Qiskit possono essere direttamente convertite in un oggetto ``Operator`` utilizzando il metodo di inizializzazione dell'operatore. Per esempio:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:401
msgid "``Pauli`` objects"
msgstr "Oggetti ``Pauli``"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:402
msgid "``Gate`` and ``Instruction`` objects"
msgstr "Oggetti ``Gate`` e ``Instruction``"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:403
msgid "``QuantumCircuits`` objects"
msgstr "Gli oggetti ``QuantumCircuits``"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:405
msgid "Note that the last point means we can use the ``Operator`` class as a unitary simulator to compute the final unitary matrix for a quantum circuit, without having to call a simulator backend. If the circuit contains any unsupported operations, an exception will be raised. Unsupported operations are: measure, reset, conditional operations, or a gate that does not have a matrix definition or decomposition in terms of gate with matrix definitions."
msgstr "Va notato che l'ultimo punto implica il poter utilizzare la classe ``Operator`` come un simulatore unitario per calcolare la matrice unitaria finale di un circuito quantistico, senza dover utilizzare un backend di simulazione. Se il circuito contiene un'operazione non supportata, la funzione genererà un'eccezione. Le operazioni non supportate sono: misurazione, reset, operazioni condizionali o qualsiasi gate che non abbia una definizione matriciale o una decomposizione in gate con definizione matriciale."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:595
msgid "Using Operators in circuits"
msgstr "Utilizzo di operatori nei circuiti"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:597
msgid "Unitary ``Operators`` can be directly inserted into a ``QuantumCircuit`` using the ``QuantumCircuit.append`` method. This converts the ``Operator`` into a ``UnitaryGate`` object, which is added to the circuit."
msgstr "Gli ``Operators`` unitari possono essere aggiunti direttamente a un ``QuantumCircuit`` usando il metodo ``QuantumCircuit.append``. Questo converte l'``Operator`` in un oggetto di tipo ``UnitaryGate`` e lo aggiunge al circuito."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:599
msgid "If the operator is not unitary, an exception will be raised. This can be checked using the ``Operator.is_unitary()`` function, which will return ``True`` if the operator is unitary and ``False`` otherwise."
msgstr "Se l'operatore non è unitario, verrà lanciata un'eccezione. Questa può essere preliminarmente controllato usando la funzione ``Operator.is_unitary()``, che restituirà ``True`` se l'operatore è unitario e ``False`` altrimenti."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:636
msgid "Note that in the above example we initialize the operator from a ``Pauli`` object. However, the ``Pauli`` object may also be directly inserted into the circuit itself and will be converted into a sequence of single-qubit Pauli gates:"
msgstr "Si noti che nell'esempio sopra, l'operatore viene inizializzato usando un oggetto ``Pauli``. Tuttavia, l'oggetto ``Pauli`` può anche essere inserito direttamente nel circuito e verrà convertito in una sequenza di gate di Pauli su singolo qubit:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:745
msgid "Combining Operators"
msgstr "Combinazione di Operatori"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:747
msgid "Operators my be combined using several methods."
msgstr "Gli operatori possono essere combinati utilizzando diversi metodi."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:750
msgid "Tensor Product"
msgstr "Prodotto Tensoriale"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:752
msgid "Two operators :math:`A` and :math:`B` may be combined into a tensor product operator :math:`A\\otimes B` using the ``Operator.tensor`` function. Note that if both A and B are single-qubit operators, then ``A.tensor(B)`` = :math:`A\\otimes B` will have the subsystems indexed as matrix B on subsystem 0, and matrix :math:`A` on subsystem 1."
msgstr "Due operatori :math:`A` e :math:`B` possono essere combinati in un operatore risultato di un prodotto tensoriale :math:`A\\otimes B` utilizzando la funzione ``Operator.tensor``. Nota che se sia A che B sono operatori a singolo qubit, allora ``A. tensor(B)`` = :math:`A\\otimes B` avrà i sottosistemi indicizzati come matrice B sul sottosistema 0, e matrice :math:`A` sul sottosistema 1."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:804
msgid "Tensor Expansion"
msgstr "Espansione Tensoriale"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:806
msgid "A closely related operation is ``Operator.expand``, which acts like a tensor product but in the reverse order. Hence, for two operators :math:`A` and :math:`B` we have ``A.expand(B)`` = :math:`B\\otimes A` where the subsystems indexed as matrix A on subsystem 0, and matrix :math:`B` on subsystem 1."
msgstr "Un'operazione molto vicina alla precedente è ``Operator.expand`` che agisce come il prodotto tensoriale, ma in ordine inverso. Cioè, per due operatori: :math:`A` e :math:`B` l'espansione ``A.expand(B)`` = :math:`B\\otimes A` avrà i sottosistemi indicizzati come matrice A sul sottosistema 0, e matrice :math:`B` sul sottosistema 1."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:858
msgid "Composition"
msgstr "Composizione"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:860
msgid "We can also compose two operators :math:`A` and :math:`B` to implement matrix multiplication using the ``Operator.compose`` method. We have that ``A.compose(B)`` returns the operator with matrix :math:`B.A`:"
msgstr "È anche possibile comporre due operatori :math:`A` and :math:`B` per implementare la moltiplicazione tra matrici usando il metodo ``Operator.compose``. Pertanto, ``A.compose(B)`` restituisce l'operatore corrispondente alla matrice :math:`B.A`:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:907
msgid "We can also compose in the reverse order by applying :math:`B` in front of :math:`A` using the ``front`` kwarg of ``compose``: ``A.compose(B, front=True)`` = :math:`A.B`:"
msgstr "È anche possibile eseguire la composizione in ordine inverso applicando: :math:`B` prima di :math:`A` , usando la kwarg ``front`` del metodo ``compose`` in questo modo: ``A.compose(B, front=True)`` = :math:`A.B`:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:955
msgid "Subsystem Composition"
msgstr "Composizione di Sottosistemi"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:957
msgid "Note that the previous compose requires that the total output dimension of the first operator :math:`A` is equal to total input dimension of the composed operator :math:`B` (and similarly, the output dimension of :math:`B` must be equal to the input dimension of :math:`A` when composing with ``front=True``)."
msgstr "Possiamo notare che nelle composizioni viste in precedenza, la dimensione totale dell'output del primo operatore :math:`A` è uguale alla dimensione totale dell'input dell'operatore :math:`B` (e similmente, la dimensione dell'output di: :math:`B` deve essere uguale alla dimensione dell'input di :math:`A` quando si usa la composizione con l'opzione ``front=True``)."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:959
msgid "We can also compose a smaller operator with a selection of subsystems on a larger operator using the ``qargs`` kwarg of ``compose``, either with or without ``front=True``. In this case, the relevant input and output dimensions of the subsystems being composed must match. *Note that the smaller operator must always be the argument of ``compose`` method.*"
msgstr "Possiamo anche comporre un operatore più piccolo selezionando sottosistemi su un operatore più grande utilizzando il kwarg ``qargs``di ``compose``, con o senza ``front=True``. In tal caso, le dimensioni dell'input e dell'output dei sottosistemi composti devono corrispondere. *Nota che l'operatore più piccolo deve sempre essere l'argomento del metodo ``compose``.*"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:961
msgid "For example, to compose a two-qubit gate with a three-qubit Operator:"
msgstr "Ad esempio, per comporre un gate a due qubit con un operatore a tre qubit:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1103
msgid "Linear combinations"
msgstr "Combinazioni lineari"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1105
msgid "Operators may also be combined using standard linear operators for addition, subtraction and scalar multiplication by complex numbers."
msgstr "Gli operatori possono anche essere combinati usando le funzioni standard di addizione, sottrazione e moltiplicazione scalare per numeri complessi."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1159
msgid "An important point is that while ``tensor``, ``expand`` and ``compose`` will preserve the unitarity of unitary operators, linear combinations will not; hence, adding two unitary operators will, in general, result in a non-unitary operator:"
msgstr "È importante notare che se i metodi ` ``tensor``, ``expand`` e ``compose`` mantengono l'unitarietà degli operatori unitari, le combinazioni lineari no; pertanto sommare due operatori unitari risulterà, in generale, in un operatore non unitario:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1201
msgid "Implicit Conversion to Operators"
msgstr "Conversione implicita in operatori"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1203
msgid "Note that for all the following methods, if the second object is not already an ``Operator`` object, it will be implicitly converted into one by the method. This means that matrices can be passed in directly without being explicitly converted to an ``Operator`` first. If the conversion is not possible, an exception will be raised."
msgstr "Si noti che per i metodi seguenti, se il secondo oggetto utilizzato non è già di tipo ``Operator``, verrà implicitamente convertito dal metodo stesso. Ciò significa che possiamo passare direttamente oggetti di tipo matrice come argomenti, senza doverli prima convertire esplicitamente in un ``Operator`. Se la conversione non è possibile, verrà generata un'eccezione."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1250
msgid "Comparison of Operators"
msgstr "Confronto tra Operatori"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1252
msgid "Operators implement an equality method that can be used to check if two operators are approximately equal."
msgstr "Gli operatori implementano un metodo di uguaglianza che può essere utilizzato per verificare se due operatori sono approssimativamente uguali."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1293
msgid "Note that this checks that each matrix element of the operators is approximately equal; two unitaries that differ by a global phase will not be considered equal:"
msgstr "Si noti che questo controllo verifica che ogni elemento della matrice degli operatori sia approssimativamente uguale; due matrici unitarie che differiscono per una fase globale non saranno considerate uguali:"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1335
msgid "Process Fidelity"
msgstr "La Fidelity di Processo"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1337
msgid "We may also compare operators using the ``process_fidelity`` function from the *Quantum Information* module. This is an information theoretic quantity for how close two quantum channels are to each other, and in the case of unitary operators it does not depend on global phase."
msgstr "Possiamo anche confrontare gli operatori usando la funzione ``process_fidelity`` del modulo *Quantum Information*. Questa è una quantità teorica che indica quanto due canali quantici siano vicini l'uno all'altro, e nel caso di operatori unitari non dipende dalla fase globale."

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1383
msgid "Note that process fidelity is generally only a valid measure of closeness if the input operators are unitary (or CP in the case of quantum channels), and an exception will be raised if the inputs are not CP."
msgstr "Nota: la fidelity di processo è generalmente una valida misura di somiglianza se gli operatori considerati sono unitari (o CP nel caso di canali quantistici), e verrà generata un'eccezione se gli input non sono CP."

