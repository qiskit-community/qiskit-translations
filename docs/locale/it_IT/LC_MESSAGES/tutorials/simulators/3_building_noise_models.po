msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-26 23:06+0000\n"
"PO-Revision-Date: 2023-01-26 23:33\n"
"Last-Translator: \n"
"Language-Team: Italian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: it\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/simulators/3_building_noise_models.po\n"
"X-Crowdin-File-ID: 9164\n"
"Language: it_IT\n"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:10
msgid "This page was generated from `tutorials/simulators/3_building_noise_models.ipynb`__."
msgstr "Questa pagina è stata generata da `tutorials/simulators/3_building_noise_models.ipynb`__."

#: ../../tutorials/simulators/3_building_noise_models.ipynb:9
msgid "Building Noise Models"
msgstr "Costruire i modelli di rumore"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:21
msgid "Introduction"
msgstr "Introduzione"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:23
msgid "This notebook introduces how to use the Qiskit Aer ``noise`` module to build custom noise models for noisy simulations."
msgstr "Questo notebook introduce come utilizzare il modulo ``noise`` di Qiskit Aer per costruire modelli di rumore personalizzati per eseguire simulazioni rumorose."

#: ../../tutorials/simulators/3_building_noise_models.ipynb:53
msgid "Qiskit Aer Noise Module"
msgstr "Modulo Noise di Qiskit Aer"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:55
msgid "The Qiskit Aer ``noise`` module contains Python classes to build customized noise models for simulation. There are three key classes:"
msgstr "Il modulo ``noise`` di Qiskit Aer contiene classi Python che permettono di creare modelli di rumore personalizzati per la simulazione. Ci sono tre classi chiave:"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:57
msgid "The ``NoiseModel`` class which stores a noise model used for noisy simulation."
msgstr "La classe ``NoiseModel`` che memorizza un modello di rumore utilizzato per la simulazione rumorosa."

#: ../../tutorials/simulators/3_building_noise_models.ipynb:58
msgid "The ``QuantumError`` class which describes CPTP gate errors. These can be applied:"
msgstr "La classe ``QuantumError`` che descrive gli errori CPTP dei gate. Questi possono essere applicati:"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:60
msgid "After *gate* or *reset* instructions"
msgstr "Dopo le istruzioni *gate* o *reset*"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:61
msgid "Before *measure* instructions."
msgstr "Prima di istruzioni di *misurazione*."

#: ../../tutorials/simulators/3_building_noise_models.ipynb:63
msgid "The ``ReadoutError`` class which describes classical readout errors."
msgstr "La classe ``ReadoutError`` che descrive gli errori di lettura classici."

#: ../../tutorials/simulators/3_building_noise_models.ipynb:75
msgid "Quantum Errors"
msgstr "Errori Quantistici"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:77
msgid "Rather than deal with the ``QuantumError`` object directly, many helper functions exist to automatically generate a specific type of parameterized quantum error. These are contained in the ``noise`` module and include functions for many common errors types used in quantum computing research. The function names and the type of error they return are:"
msgstr "Piuttosto che utilizzare direttamente l'oggetto ``QuantumError``, esistono diverse funzioni helper che possono essere utilizzate per generare automaticamente un particolare tipo di errore quantistico parametrizzato. Queste sono contenute nel modulo ``noise`` e comprendono funzioni per molti tipi di errori comunemente utilizzati nella ricerca sui computer quantistici. I nomi delle funzioni ed il tipo di errore che restituiscono sono:"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:80
msgid "Standard error function"
msgstr "Funzione di errore standard"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:80
msgid "Details"
msgstr "Dettagli"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:82
msgid "``kraus_error``"
msgstr "``kraus_error``"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:82
msgid "a general n-qubit CPTP error channel given as a list of Kraus matrices :math:`[K_0, ...]`."
msgstr "un generico canale di errore CPTP a n-qubit fornito come elenco di matrici di Kraus :math:`[K_0, ...]`."

#: ../../tutorials/simulators/3_building_noise_models.ipynb:84
msgid "``mixed_unitary_error``"
msgstr "``mixed_unitary_error``"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:84
msgid "an n-qubit mixed unitary error given as a list of unitary matrices and probabilities :math:`[(U_0, p_0),...]`."
msgstr "un errore unitario misto a n-qubit fornito come elenco di matrici unitarie e probabilità :math:`[(U_0, p_0),...]`."

#: ../../tutorials/simulators/3_building_noise_models.ipynb:86
msgid "``coherent_unitary_error``"
msgstr "``coerent_unitary_error``"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:86
msgid "an n-qubit coherent unitary error given as a single unitary matrix :math:`U`."
msgstr "un errore unitario coerente a n-qubit fornito come una singola matrice unitaria :math:`U`."

#: ../../tutorials/simulators/3_building_noise_models.ipynb:88
msgid "``pauli_error``"
msgstr "``pauli_error``"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:88
msgid "an n-qubit Pauli error channel (mixed unitary) given as a list of Pauli’s and probabilities :math:`[(P_0, p_0),...]`"
msgstr "un canale di errore di Pauli (misto unitario) a n-qubit fornito come una lista di operatori di Pauli e probabilità :math:`[(P_0, p_0),...]`"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:90
msgid "``depolarizing_error``"
msgstr "``depolarizing_error``"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:90
msgid "an n-qubit depolarizing error channel parameterized by a depolarization probability :math:`p`."
msgstr "un canale di errore di depolarizzazione a n-qubit parametrizzato da una probabilità di depolarizzazione :math:`p`."

#: ../../tutorials/simulators/3_building_noise_models.ipynb:92
msgid "``reset_error``"
msgstr "``reset_error``"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:92
msgid "a single-qubit reset error parameterized by a probabilities :math:`p_0, p_1` of resetting to the :math:`|0\\rangle`, :math:`|1\\rangle` state."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:94
msgid "``thermal_relaxation_error``"
msgstr "``thermal_relaxation_error``"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:94
msgid "a single qubit thermal relaxation channel parameterized by relaxation time constants :math:`T_1`, :math:`T_2`, gate time :math:`t`, and excited state thermal population :math:`p_1`."
msgstr "un canale di errore di rilassamento termico di un singolo qubit parametrizzato dalle costanti di tempo di rilassamento :math:`T_1`, :math:`T_2`, dal tempo del gate :math:`t`, e dalla popolazione nello stato termico eccitato :math:`p_1`."

#: ../../tutorials/simulators/3_building_noise_models.ipynb:96
msgid "``phase_amplitude_damping_error``"
msgstr "``phase_amplitude_damping_error``"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:96
msgid "A single-qubit generalized combined phase and amplitude damping error channel given by an amplitude damping parameter :math:`\\lambda`, a phase damping parameter :math:`\\gamma`, and an excited state thermal population :math:`p_1`."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:98
msgid "``amplitude_damping_error``"
msgstr "``amplitude_damping_error``"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:98
msgid "A single-qubit generalized amplitude damping error channel given by an amplitude damping parameter :math:`\\lambda`, and an excited state thermal population :math:`p_1`."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:100
msgid "``phase_damping_error``"
msgstr "``phase_damping_error``"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:100
msgid "A single-qubit phase damping error channel given by a phase damping parameter :math:`\\gamma`"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:104
msgid "Combining quantum errors"
msgstr "Comporre più errori quantistici"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:106
msgid "``QuantumError`` instances can be combined by using composition, tensor product, and tensor expansion (reversed order tensor product) to produce new ``QuantumErrors`` as:"
msgstr "Le istanze di ``QuantumError`` possono essere combinate usando la composizione, il prodotto tensoriale ed l'espansione tensoriale (prodotto tensoriale in ordine inverso) per produrre nuovi ``QuantumErrors`` come:"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:108
msgid "Composition: :math:`\\cal{E}(\\rho)=\\cal{E_2}(\\cal{E_1}(\\rho))` as ``error = error1.compose(error2)``"
msgstr "Composizione: :math:`\\cal{E}(\\rho)=\\cal{E_2}(\\cal{E_1}(\\rho))` come ``error = error1.compose(error2)``"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:109
msgid "Tensor product: :math:`\\cal{E}(\\rho) =(\\cal{E_1}\\otimes\\cal{E_2})(\\rho)` as ``error error1.tensor(error2)``"
msgstr "Prodotto Tensoriale: :math:`\\cal{E}(\\rho) =(\\cal{E_1}\\otimes\\cal{E_2})(\\rho)` come ``error error1.tensor(error2)``"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:110
msgid "Expand product: :math:`\\cal{E}(\\rho) =(\\cal{E_2}\\otimes\\cal{E_1})(\\rho)` as ``error error1.expand(error2)``"
msgstr "Prodotto espanso: :math:`\\cal{E}(\\rho) =(\\cal{E_2}\\otimes\\cal{E_1})(\\rho)` come ``error error1.expand(error2)``"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:122
msgid "Example"
msgstr "Esempio"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:124
#, python-format
msgid "For example to construct a 5% single-qubit Bit-flip error:"
msgstr "Ad esempio per costruire un errore di tipo Bit-flip su singolo qubit del 5%:"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:419
msgid "Converting to and from QuantumChannel operators"
msgstr "Conversione da e verso operatori QuantumChannel"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:421
msgid "We can also convert back and forth between ``QuantumError`` objects in Qiskit Aer and ``QuantumChannel`` objects in Qiskit Terra."
msgstr "Possiamo anche convertire oggetti ``QuantumError`` di Qiskit Aer in oggetti ``QuantumChannel`` di Qiskit Terra, e viceversa."

#: ../../tutorials/simulators/3_building_noise_models.ipynb:608
msgid "Readout Error"
msgstr "Errore di Lettura"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:610
msgid "Classical readout errors are specified by a list of assignment probabilities vectors :math:`P(A|B)`:"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:612
msgid ":math:`A` is the *recorded* classical bit value"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:613
msgid ":math:`B` is the *true* bit value returned from the measurement"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:615
msgid "E.g. for 1 qubits: $ P(A|B) = [P(A|0), P(A|1)]$."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:668
msgid "Readout errors may also be combined using ``compose``, ``tensor`` and ``expand`` like with quantum errors."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:680
msgid "Adding errors to a Noise Model"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:682
msgid "When adding a quantum error to a noise model we must specify the type of *instruction* that it acts on, and what qubits to apply it to. There are three cases for Quantum Errors:"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:684
#: ../../tutorials/simulators/3_building_noise_models.ipynb:689
msgid "All-qubit quantum error"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:685
#: ../../tutorials/simulators/3_building_noise_models.ipynb:756
msgid "Specific qubit quantum error"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:686
msgid "Non-local quantum error"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:691
msgid "This applies the same error to any occurrence of an instruction, regardless of which qubits it acts on."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:693
msgid "It is added as ``noise_model.add_all_qubit_quantum_error(error, instructions)``:"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:758
msgid "This applies the error to any occurrence of an instruction acting on a specified list of qubits. Note that the order of the qubit matters: For a 2-qubit gate an error applied to qubits [0, 1] is different to one applied to qubits [1, 0] for example."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:760
msgid "It is added as ``noise_model.add_quantum_error(error, instructions, qubits)``:"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:826
msgid "Non-local qubit quantum error"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:828
msgid "This applies an error to a specific set of noise qubits after any occurrence of an instruction acting on a specific of gate qubits."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:830
msgid "It is added as ``noise_model.add_nonlocal_quantum_error(error, instructions, instr_qubits, error_qubits)``:"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:896
msgid "Executing a noisy simulation with a noise model"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:898
msgid "The command ``AerSimulator(noise_model=noise_model)`` returns a simulator configured to the given noise model. In addition to setting the simulator’s noise model, it also overrides the simulator’s basis gates, according to the gates of the noise model."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:910
msgid "Noise Model Examples"
msgstr "Esempi di Modello di Rumore"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:912
msgid "We will now give some examples of noise models. For our demonstrations we will use a simple test circuit generating a n-qubit GHZ state:"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:1015
msgid "Ideal Simulation"
msgstr "Simulazione Ideale"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:1049
msgid "Noise Example 1: Basic bit-flip error noise model"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:1051
msgid "Lets consider a simple toy noise model example common in quantum information theory research:"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:1053
msgid "When applying a single qubit gate, flip the state of the qubit with probability ``p_gate1``."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:1054
msgid "When applying a 2-qubit gate apply single-qubit errors to each qubit."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:1055
msgid "When resetting a qubit reset to 1 instead of 0 with probability ``p_reset``."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:1056
msgid "When measuring a qubit, flip the state of the qubit with probability ``p_meas``."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:1129
#: ../../tutorials/simulators/3_building_noise_models.ipynb:1273
msgid "Executing the noisy simulation"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:1171
msgid "Example 2: T1/T2 thermal relaxation"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:1173
msgid "Now consider a more realistic error model based on thermal relaxation with the qubit environment: \\* Each qubit is parameterized by a thermal relaxation time constant :math:`T_1` and a dephasing time constant :math:`T_2`. \\* Note that we must have :math:`T_2 \\le 2 T_1`. \\* Error rates on instructions are determined by gate times and qubit :math:`T_1`, :math:`T_2` values."
msgstr ""

