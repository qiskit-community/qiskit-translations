msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-08 17:23+0000\n"
"PO-Revision-Date: 2021-01-28 18:58\n"
"Last-Translator: \n"
"Language-Team: Italian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: it\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/simulators/1_aer_provider.po\n"
"X-Crowdin-File-ID: 9160\n"
"Language: it_IT\n"

#: ../../tutorials/simulators/1_aer_provider.ipynb:10
msgid "This page was generated from `tutorials/simulators/1_aer_provider.ipynb`__."
msgstr "Questa pagina è stata generata da `tutorials/simulators/1_aer_provider.ipynb`__."

#: ../../tutorials/simulators/1_aer_provider.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/simulators/1_aer_provider.ipynb>`_."
msgstr "Esegui interattivamente in `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/simulators/1_aer_provider.ipynb>`_."

#: ../../tutorials/simulators/1_aer_provider.ipynb:9
msgid "Simulators"
msgstr "Simulatori"

#: ../../tutorials/simulators/1_aer_provider.ipynb:21
msgid "Introduction"
msgstr "Introduzione"

#: ../../tutorials/simulators/1_aer_provider.ipynb:23
msgid "This notebook shows how to import *Qiskit Aer* simulator backends and use them to execute ideal (noise free) Qiskit Terra circuits."
msgstr "Questo notebook mostra come importare i backend di simulazione di *Qiskit Aer* e come utilizzarli per eseguire circuiti ideali (senza rumore) scritti in Qiskit Terra."

#: ../../tutorials/simulators/1_aer_provider.ipynb:50
msgid "Qiskit Aer simulator backends"
msgstr "Backend di simulazione di Qiskit Aer"

#: ../../tutorials/simulators/1_aer_provider.ipynb:52
msgid "Qiskit Aer currently includes three high performance simulator backends: \\* ``QasmSimulator``: Allows ideal and noisy multi-shot execution of qiskit circuits and returns counts or memory \\* ``StatevectorSimulator``: Allows ideal single-shot execution of qiskit circuits and returns the final statevector of the simulator after application \\* ``UnitarySimulator``: Allows ideal single-shot execution of qiskit circuits and returns the final unitary matrix of the circuit itself. Note that the circuit cannot contain measure or reset operations for this backend"
msgstr "Qiskit Aer al momento include tre backend di simulazione ad alte prestazioni: \\* ``QasmSimulator``: Consente l'esecuzione a più shot di circuiti qiskit ideali o in presenza di rumore, restituendo i conteggi o la memoria \\* ``StatevectorSimulator``: Consente l'esecuzione a singolo shot di circuiti qiskit ideali e restituisce il vettore di stato finale della simulazione \\* ``UnitarySimulator``: Consente l'esecuzione a singolo shot di circuiti qiskit ideali e restituisce la matrice unitaria finale del circuito. Da notare che il circuito non può contenere operazioni di misura o reset quando si utilizza questo backend"

#: ../../tutorials/simulators/1_aer_provider.ipynb:55
msgid "These backends are found in the ``Aer`` provider with the names ``qasm_simulator``, ``statevector_simulator`` and ``unitary_simulator``, respectively."
msgstr "Questi backend si possono trovare nel provider ``Aer``, sotto i nomi ``qasm_simulator``, ``statevector_simulator`` e ``unitary_simulator``, rispettivamente."

#: ../../tutorials/simulators/1_aer_provider.ipynb:105
msgid "The simulator backends can also be directly imported from ``qiskit.providers.aer``"
msgstr "I backend di simulazione possono anche essere importati direttamente da ``qiskit.providers.aer``"

#: ../../tutorials/simulators/1_aer_provider.ipynb:127
msgid "QasmSimulator"
msgstr "QasmSimulator"

#: ../../tutorials/simulators/1_aer_provider.ipynb:129
msgid "The ``QasmSimulator`` backend is designed to mimic an actual device. It executes a Qiskit ``QuantumCircuit`` and returns a count dictionary containing the final values of any classical registers in the circuit. The circuit may contain *gates*, *measurements*, *resets*, *conditionals*, and other advanced simulator options that will be discussed in another notebook."
msgstr "Il backend ``QasmSimulator`` è progettato per simulare un dispositivo reale. Esso esegue un circuito quantistico Qiskit ``QuantumCircuit`` e restituisce un dizionario di conteggi contenente i valori finali di tutti i registri classici nel circuito. Il circuito può contenere *gate*, *misure*, *reset*, operazioni *condizionali*, ed altre opzioni di simulazione avanzata che saranno discusse in un altro notebook."

#: ../../tutorials/simulators/1_aer_provider.ipynb:132
#: ../../tutorials/simulators/1_aer_provider.ipynb:285
msgid "Simulating a quantum circuit"
msgstr "Simulare un circuito quantistico"

#: ../../tutorials/simulators/1_aer_provider.ipynb:134
#: ../../tutorials/simulators/1_aer_provider.ipynb:287
msgid "The basic operation executes a quantum circuit and returns a counts dictionary of measurement outcomes. Here we execute a simple circuit that prepares a 2-qubit Bell-state :math:`|\\psi\\rangle = \\frac{1}{2}(|0,0\\rangle + |1,1 \\rangle)` and measures both qubits."
msgstr "L'operazione di base esegue un circuito quantistico e restituisce un dizionario di conteggi contenente gli esiti delle misurazioni. Qui eseguiamo un semplice circuito che prepara uno stato di bell a 2 qubit :math:`|\\psi\\rangle = \\frac{1}{2}(|0,0\\rangle + |1,1 \\rangle)` e misura entrambi i qubit."

#: ../../tutorials/simulators/1_aer_provider.ipynb:177
msgid "Returning measurement outcomes for each shot"
msgstr "Ottenere i risultati delle misurazioni per ogni shot"

#: ../../tutorials/simulators/1_aer_provider.ipynb:179
msgid "The ``QasmSimulator`` also supports returning a list of measurement outcomes for each individual shot. This is enabled by setting the keyword argument ``memory=True`` in the ``assemble`` or ``execute`` function."
msgstr "Il ``QasmSimulator`` può anche restituire una lista contenente i risultati delle misurazioni di ogni singolo shot. Questa funzionalità può essere abilitata impostando la parola chiave ``memory=True`` nell'argomento delle funzioni ``assemble`` o ``execute``."

#: ../../tutorials/simulators/1_aer_provider.ipynb:232
#: ../../tutorials/simulators/1_aer_provider.ipynb:374
msgid "Starting simulation with a custom initial state"
msgstr "Avviare la simulazione con uno stato iniziale personalizzato"

#: ../../tutorials/simulators/1_aer_provider.ipynb:234
msgid "The ``QasmSimulator`` allows setting a custom initial statevector for the simulation. This means that all experiments in a Qobj will be executed starting in a state :math:`|\\psi\\rangle` rather than the all zero state :math:`|0,0,..0\\rangle`. The custom state may be set in the circuit using the ``initialize`` method."
msgstr "Il ``QasmSimulator`` consente di specificare uno determinato vettore di stato di partenza nella simulazione. Questo vuol dire che tutti gli esperimenti in un Qobj saranno eseguiti partendo da uno stato :math:`|\\psi\\rangle` piuttosto che dallo stato :math:`|0,0,..0\\rangle`. Lo stato personalizzato può essere impostato nel circuito utilizzando il metodo ``initialize``."

#: ../../tutorials/simulators/1_aer_provider.ipynb:236
msgid "**Note:** \\* The initial statevector must be a valid quantum state :math:`|\\langle\\psi|\\psi\\rangle|=1`. If not, an exception will be raised. \\* The simulator supports this option directly for efficiency, but it can also be unrolled to standard gates for execution on actual devices."
msgstr "**Nota:**\\* Il vettore di stato iniziale deve essere uno stato quantistico valido :math:`|\\langle\\psi|\\psi\\rangle|=1`. Nel caso in cui non lo sia, verrà sollevata un'eccezione. \\* Il simulatore supporta questa opzione direttamente per questioni di efficienza, ma può anche essere scomposta in gate standard nel caso di esecuzione su dispositivi reali."

#: ../../tutorials/simulators/1_aer_provider.ipynb:238
msgid "We now demonstrate this functionality by setting the simulator to be initialized in the final Bell-state of the previous example:"
msgstr "Andiamo ora a dimostrare questa funzionalità inizializzando il simulatore nello stato di Bell finale dell'esempio precedente:"

#: ../../tutorials/simulators/1_aer_provider.ipynb:280
msgid "StatevectorSimulator"
msgstr "StatevectorSimulator"

#: ../../tutorials/simulators/1_aer_provider.ipynb:282
msgid "The ``StatevectorSimulator`` executes a single shot of a Qiskit ``QuantumCircuit`` and returns the final quantum statevector of the simulation. The circuit may contain *gates*, and also *measurements*, *resets*, and *conditional* operations."
msgstr "Il backend ``StatevectorSimulator`` esegue una sola volta un ``QuantumCircuit`` Qiskit e restituisce il vettore di stato finale della simulazione. Il circuito può contenere *gate*, e anche *misure*, *reset*, e operazioni *condizionali*."

#: ../../tutorials/simulators/1_aer_provider.ipynb:329
msgid "Simulating a quantum circuit with measurement"
msgstr "Simulare un circuito quantistico contenente misurazioni"

#: ../../tutorials/simulators/1_aer_provider.ipynb:331
msgid "Note that if a circuit contains *measure* or *reset* the final statevector will be a conditional statevector *after* simulating wave-function collapse to the outcome of a measure or reset. For the Bell-state circuit this means the final statevector will be *either* :math:`|0,0\\rangle` *or* :math:`|1, 1\\rangle`."
msgstr "Da notare che se un circuito contiene una *misurazione* o un *reset*, il vettore di stato finale sarà un vettore di stato condizionato *dopo* che la funzione d'onda simulata avrà collassato nell'esito della misurazione o del reset. Nel caso del circuito per lo stato di Bell, questo significa che il vettore di stato finale sarà :math:`|0,0\\rangle` *oppure* :math:`|1, 1\\rangle`."

#: ../../tutorials/simulators/1_aer_provider.ipynb:376
msgid "Like the ``QasmSimulator``, the ``StatevectorSimulator`` also allows setting a custom initial statevector for the simulation. Here we run the previous initial statevector example on the ``StatevectorSimulator`` and initialize it to the Bell state."
msgstr "Come per il ``QasmSimulator``, anche lo ``StatevectorSimulator`` consente di scegliere un vettore di stato iniziale personalizzato per la simulazione. Qui utilizziamo il precedente esempio di vettore di stato iniziale sul backend ``StatevectorSimulator``, inizializzandolo allo stato di Bell."

#: ../../tutorials/simulators/1_aer_provider.ipynb:417
msgid "Unitary Simulator"
msgstr "Simulatore Unitario"

#: ../../tutorials/simulators/1_aer_provider.ipynb:419
msgid "The ``UnitarySimulator`` constructs the unitary matrix for a Qiskit ``QuantumCircuit`` by applying each gate matrix to an identity matrix. The circuit may only contain *gates*, if it contains *resets* or *measure* operations an exception will be raised."
msgstr "Il backend ``UnitarySimulator`` costruisce la matrice unitaria di un Qiskit ``QuantumCircuit`` applicando ognuna delle matrici rappresentanti i gate ad una matrice identità. Il circuito può contenere solo *gate*, se dovesse contenere anche operazioni di *reset* o *misurazioni*, verrà sollevata un'eccezione."

#: ../../tutorials/simulators/1_aer_provider.ipynb:422
msgid "Simulating a quantum circuit unitary"
msgstr "Simulare una matrice unitaria di un circuito quantistico"

#: ../../tutorials/simulators/1_aer_provider.ipynb:424
msgid "For this example we will return the unitary matrix corresponding to the previous examples circuit which prepares a bell state."
msgstr "In questo esempio, andremo ad ottenere come risultato la matrice unitaria corrispondente al circuito che prepara uno stato di Bell utilizzato negli esempi precedenti."

#: ../../tutorials/simulators/1_aer_provider.ipynb:492
msgid "Setting a custom initial unitary"
msgstr "Definizione di una matrice unitaria iniziale personalizzata"

#: ../../tutorials/simulators/1_aer_provider.ipynb:494
msgid "We may also set an initial state for the ``UnitarySimulator``, however this state is an initial *unitary matrix* :math:`U_i`, not a statevector. In this case the returned unitary will be :math:`U \\cdot U_i` given by applying the circuit unitary to the initial unitary matrix."
msgstr "È possibile impostare uno stato iniziale anche nel caso di ``UnitarySimulator``, con la differenza che adesso è una *matrice unitaria* :math:`U_i`, non un vettore di stato. In questo caso l'unitaria risultante sarà :math:`U \\cdot U_i` ottenuta applicando l'unitaria del circuito alla matrice unitaria iniziale."

#: ../../tutorials/simulators/1_aer_provider.ipynb:496
msgid "**Note:** \\* The initial unitary must be a valid unitary matrix :math:`U^\\dagger \\cdot U =\\mathbb{1}`. If not, an exception will be raised. \\* If a ``Qobj`` contains multiple experiments, the initial unitary must be the correct size for *all* experiments in the ``Qobj``, otherwise an exception will be raised."
msgstr "**Nota:** \\* L'unitaria iniziale deve essere una matrice unitaria valida :math:`U^\\dagger \\cdot U =\\mathbb{1}`. Se così non fosse, verrà lanciata un'eccezione. Se un ``Qobj`` contiene molteplici esperimenti, la matrice unitaria iniziale deve avere dimensioni corrette rispetto a *tutti* gli esperimenti nel ``Qobj``, altrimenti verrà lanciata un'eccezione."

#: ../../tutorials/simulators/1_aer_provider.ipynb:498
msgid "Let us consider preparing the output unitary of the previous circuit as the initial state for the simulator:"
msgstr "Utilizziamo l'unitaria risultante dal circuito precedente come stato iniziale del simulatore:"

