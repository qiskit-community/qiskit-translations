msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-10 19:20+0000\n"
"PO-Revision-Date: 2020-08-19 16:38\n"
"Last-Translator: \n"
"Language-Team: Italian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: it\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits/1_getting_started_with_qiskit.po\n"
"X-Crowdin-File-ID: 9114\n"
"Language: it_IT\n"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:10
msgid "This page was generated from `tutorials/circuits/1_getting_started_with_qiskit.ipynb`__."
msgstr "Questa pagina è stata generata a partire da `tutorials/circuits/1_getting_started_with_qiskit.ipynb`__."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:9
msgid "Getting Started with Qiskit"
msgstr "Come iniziare con Qiskit"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:11
msgid "Here, we provide an overview of working with Qiskit. The fundamental package of Qiskit is Terra that provides the basic building blocks necessary to program quantum computers. The fundamental unit of Qiskit is the `quantum circuit <https://en.wikipedia.org/wiki/Quantum_circuit>`__. A basic workflow using Qiskit consists of two stages: **Build** and **Execute**. **Build** allows you to make different quantum circuits that represent the problem you are solving, and **Execute** that allows you to run them on different backends. After the jobs have been run, the data is collected and postprocessed depending on the desired output."
msgstr "In queste sezioni viene fornita una panoramica su come lavorare con Qiskit. Il pacchetto fondamentale di Qiskit è Terra che fornisce i blocchi di base necessari per programmare con i computer quantistici. L'unità fondamentale di Qiskit è il `circuito quantistico <https://en.wikipedia.org/wiki/Quantum_circuit>`__. Un flusso di lavoro elementare che utilizza Qiskit consiste in due fasi: **Build** e **Execute**. **Build** consente di realizzare differenti circuiti quantistici relativi al problema che si vuole risolvere, e **Execute** consente di eseguirli su diversi backend. Dopo che i job sono stati eseguiti, i dati sono raccolti ed elaborati a seconda dell'output desiderato."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:36
msgid "Circuit Basics"
msgstr "Fondamenti dei circuiti"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:39
msgid "Building the circuit"
msgstr "Costruire il circuito"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:41
msgid "The basic element needed for your first program is the QuantumCircuit. We begin by creating a ``QuantumCircuit`` comprised of three qubits."
msgstr "L'elemento base necessario per il primo programma è il QuantumCircuit. Iniziamo creando un ``QuantumCircuit`` composto da tre qubit."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:63
msgid "After you create the circuit with its registers, you can add gates (\"operations\") to manipulate the registers. As you proceed through the tutorials you will find more gates and circuits; below is an example of a quantum circuit that makes a three-qubit GHZ state"
msgstr "Dopo aver creato il circuito con i suoi registri, è possibile aggiungere gate (\"operazioni\") per manipolare i registri. Procedendo con i tutorial si troveranno vari gate e circuiti; di seguito c'è un esempio di un circuito quantistico che realizza uno stato a tre qubit GHZ"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:65
msgid "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}.\n\n"
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:67
msgid "To create such a state, we start with a three-qubit quantum register. By default, each qubit in the register is initialized to :math:`|0\\rangle`. To make the GHZ state, we apply the following gates: - A Hadamard gate :math:`H` on qubit 0, which puts it into the superposition state :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}`. - A controlled-Not operation (:math:`C_{X}`) between qubit 0 and qubit 1. - A controlled-Not operation between qubit 0 and qubit 2."
msgstr "Per creare un tale stato, iniziamo con un registro quantistico a tre qubit. Di default, ogni qubit nel registro è inizializzato a :math:`|0\\rangle`. Per realizzare lo stato GHZ, applichiamo i seguenti gate: - Un gate Hadamard :math:`H` sul qubit 0, che lo mette nello stato di sovrapposizione :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}`. - Una operazione controlled-Not (:math:`C_{X}`) tra il qubit 0 e il qubit 1. - Una operazione controlled-Not tra il qubit 0 e il qubit 2."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:69
msgid "On an ideal quantum computer, the state produced by running this circuit would be the GHZ state above."
msgstr "Su un computer quantistico ideale, lo stato prodotto dall'esecuzione di questo circuito sarebbe lo stato GHZ in alto."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:71
msgid "In Qiskit, operations can be added to the circuit one by one, as shown below."
msgstr "In Qiskit, le operazioni possono essere aggiunte al circuito una alla volta, come mostrato di seguito."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:120
msgid "Visualize Circuit"
msgstr "Visualizzare il Circuito"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:122
msgid "You can visualize your circuit using Qiskit ``QuantumCircuit.draw()``, which plots the circuit in the form found in many textbooks."
msgstr "È possibile visualizzare il proprio circuito utilizzando Qiskit ``QuantumCircuit.draw()``, che disegna il circuito nella forma che troviamo in molti libri di testo."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:152
msgid "In this circuit, the qubits are put in order, with qubit zero at the top and qubit two at the bottom. The circuit is read left to right (meaning that gates that are applied earlier in the circuit show up further to the left)."
msgstr "In questo circuito, i qubit sono messi in ordine, con il qubit zero nella parte superiore e il qubit due in basso. Il circuito si legge da sinistra a destra (il che significa che i gate applicati per primi nel circuito appaiono più a sinistra)."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:167
msgid "When representing the state of a multi-qubit system, the tensor order used in Qiskit is different than that used in most physics textbooks. Suppose there are :math:`n` qubits, and qubit :math:`j` is labeled as :math:`Q_{j}`. Qiskit uses an ordering in which the :math:`n^{\\mathrm{th}}` qubit is on the left side of the tensor product, so that the basis vectors are labeled as :math:`Q_n\\otimes \\cdots \\otimes Q_1\\otimes Q_0`."
msgstr "Quando si rappresenta lo stato di un sistema a più qubit, l'ordine dei tensori utilizzato in Qiskit è diverso da quello usato nella maggior parte dei libri di testo di fisica. Supponiamo di avere :math:`n` qubit, e il qubit :math:`j` etichettato come :math:`Q_{j}`. Qiskit utilizza un ordinamento in cui il qubit :math:`n^{\\mathrm{th}}` è sul lato sinistro del prodotto tensore, in modo che i vettori base siano indicati come :math:`Q_n\\otimes \\cdots \\otimes Q_1\\otimes Q_0`."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:169
msgid "For example, if qubit zero is in state 0, qubit 1 is in state 0, and qubit 2 is in state 1, Qiskit would represent this state as :math:`|100\\rangle`, whereas many physics textbooks would represent it as :math:`|001\\rangle`."
msgstr "Ad esempio, se il qubit zero è nello stato 0, il qubit 1 è nello stato 0, e il qubit 2 è nello stato 1, Qiskit rappresenterà questo stato come :math:`|100\\rangle`, mentre molti libri di testo di fisica lo rappresenterebbero come :math:`|001\\rangle`."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:171
msgid "This difference in labeling affects the way multi-qubit operations are represented as matrices. For example, Qiskit represents a controlled-X (:math:`C_{X}`) operation with qubit 0 being the control and qubit 1 being the target as"
msgstr "Questa differenza nel formalismo influenza il modo in cui le operazioni a più qubit sono rappresentate come matrici. Ad esempio, Qiskit rappresenta un'operazione controlled-X (:math:`C_{X}`) con il qubit 0 che funge da controllo e il qubit 1 che rappresenta il target come"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:173
msgid "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}.\n\n"
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:189
msgid "Simulating circuits using Qiskit Aer"
msgstr "Simulare i circuiti utilizzando Qiskit Aer"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:191
msgid "Qiskit Aer is our package for simulating quantum circuits. It provides many different backends for doing a simulation. There is also a basic, Python only, implementation called ``BasicAer`` in Terra that can be used as a drop-in replacement for ``Aer`` in the examples below."
msgstr "Qiskit Aer il il pacchetto per simulare i circuiti quantistici. Fornisce molti backend differenti per realizzare una simulazione. Nel pacchetto Terra c'è anche una implementazione base, solo Python, chiamata ``BasicAer`` che può essere usata come sostituto di `Aer`` negli esempi di seguito."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:194
msgid "Statevector backend"
msgstr "Backend Statevector"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:196
msgid "The most common backend in Qiskit Aer is the ``statevector_simulator``. This simulator returns the quantum state, which is a complex vector of dimensions :math:`2^n`, where :math:`n` is the number of qubits (so be careful using this as it will quickly get too large to run on your machine)."
msgstr "Il backend più comune in Qiskit Aer è lo ``statevector_simulator``. Questo simulatore restituisce lo stato quantistico, che è un vettore complesso di dimensioni :math:`2^n`, dove :math:`n` è il numero di qubit (pertanto va utilizzato con attenzione poiché diventerà rapidamente troppo grande per essere eseguito sulla vostra macchina)."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:207
msgid "To run the above circuit using the statevector simulator, first you need to import Aer and then set the backend to ``statevector_simulator``."
msgstr "Per eseguire il circuito di sopra usando il simulatore statevector, è necessario innanzitutto importare Aer e quindi impostare il backend a ``statevector_simulator``."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:232
msgid "Now that we have chosen the backend, it's time to compile and run the quantum circuit. In Qiskit we provide the ``execute`` function for this. ``execute`` returns a ``job`` object that encapsulates information about the job submitted to the backend."
msgstr "Ora che è stato scelto il backend, è il momento di compilare ed eseguire il circuito quantistico. In Qiskit è fornita la funzione ``execute`` per questo. ``execute`` restituisce un oggetto ``job`` che racchiude le informazioni sul job inviato al backend."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:238
msgid "Tip: You can obtain the above parameters in Jupyter. Simply place the text cursor on a function and press Shift+Tab."
msgstr "Suggerimento: È possibile ottenere i parametri di cui sopra in Jupyter. Basta posizionare il cursore di testo su una funzione e premere Shift+Tab."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:264
msgid "When you run a program, a job object is made that has the following two useful methods: ``job.status()`` and ``job.result()``, which return the status of the job and a result object, respectively."
msgstr "Quando si esegue un programma, viene costruito un oggetto job che ha i seguenti due utili metodi: ``job.status()`` e ``job.result()``, che restituiscono lo stato del job e l'oggetto risultante, rispettivamente."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:270
msgid "Note: Jobs run asynchronously, but when the result method is called, it switches to synchronous and waits for it to finish before moving on to another task."
msgstr "Nota: I job sono eseguiti in modo asincrono, ma quando il metodo del risultato viene chiamato, passa a modalità sincrona e attende che il metodo finisca prima di passare ad un'altra attività."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:295
msgid "The results object contains the data and Qiskit provides the method ``result.get_statevector(circ)`` to return the state vector for the quantum circuit."
msgstr "L'oggetto risultante contiene i dati e Qiskit fornisce il metodo ``result.get_statevector(circ)`` per restituire il vettore di stato del circuito quantistico."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:338
msgid "Qiskit also provides a visualization toolbox to allow you to view these results."
msgstr "Qiskit fornisce anche un toolbox di visualizzazione per consentire la visione di questi risultati."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:340
msgid "Below, we use the visualization function to plot the real and imaginary components of the state density matrix $ :nbsphinx-math:`\\rho`$."
msgstr "In basso, viene utilizzata la funzione di visualizzazione per disegnare i componenti reale ed immaginario della matrice densità di stato $ :nbsphinx-math:`\\rho`$."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:372
msgid "Unitary backend"
msgstr "Backend Unitario"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:383
msgid "Qiskit Aer also includes a ``unitary_simulator`` that works *provided all the elements in the circuit are unitary operations*. This backend calculates the :math:`2^n \\times 2^n` matrix representing the gates in the quantum circuit."
msgstr "Qiskit Aer include anche un ``unitary_simulator`` che funziona *a condizione che tutti gli elementi del circuito siano operazioni unitarie*. Questo backend calcola la matrice :math:`2^n \\times 2^n` che rappresenta i gate nel circuito quantistico."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:460
msgid "OpenQASM backend"
msgstr "Backend OpenQASM"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:471
msgid "The simulators above are useful because they provide information about the state output by the ideal circuit and the matrix representation of the circuit. However, a real experiment terminates by *measuring* each qubit (usually in the computational :math:`|0\\rangle, |1\\rangle` basis). Without measurement, we cannot gain information about the state. Measurements cause the quantum system to collapse into classical bits."
msgstr "I simulatori precedenti sono utili perché forniscono informazioni sullo stato di output del circuito ideale e la rappresentazione matriciale del circuito. Tuttavia, un esperimento reale termina *misurando* ciascun qubit (tipicamente nella base computazionale :math:`|0\\rangle, |1\\rangle`). Senza misurazione, non è possibile ottenere informazioni sullo stato. Le misurazioni forzano il sistema quantistico a collassare nei bit classici."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:473
msgid "For example, suppose we make independent measurements on each qubit of the three-qubit GHZ state"
msgstr "Ad esempio, supponiamo di effettuare misurazioni indipendenti su ciascun qubit dello stato a tre qubit GHZ"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:475
msgid "|\\psi\\rangle = |000\\rangle +|111\\rangle)/\\sqrt{2},\n\n"
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:477
msgid "and let :math:`xyz` denote the bitstring that results. Recall that, under the qubit labeling used by Qiskit, :math:`x` would correspond to the outcome on qubit 2, :math:`y` to the outcome on qubit 1, and :math:`z` to the outcome on qubit 0."
msgstr "e usiamo :math:`xyz` per denotare la stringa di bit risultante. Si ricordi che, nel formalismo usato da Qiskit per i qubit, :math:`x` corrisponderebbe al risultato sul qubit 2, :math:`y` al risultato sul qubit 1, e :math:`z` al risultato sul qubit 0."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:483
msgid "Note: This representation of the bitstring puts the most significant bit (MSB) on the left, and the least significant bit (LSB) on the right. This is the standard ordering of binary bitstrings. We order the qubits in the same way (qubit representing the MSB has index 0), which is why Qiskit uses a non-standard tensor product order."
msgstr "Nota: Questa rappresentazione della stringa di bit posiziona il bit più significativo (MSB) sulla sinistra, e il bit meno significativo (LSB) sulla destra. Questo è l'ordinamento standard delle stringhe di bit binarie. Ordiniamo i qubit allo stesso modo (il qubit che rappresenta il MSB ha indice 0), motivo per cui Qiskit utilizza un ordine non standard del prodotto tensoriale."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:489
msgid "Recall the probability of obtaining outcome :math:`xyz` is given by"
msgstr "Ricordiamo che la probabilità di ottenere un risultato :math:`xyz` è data da"

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:491
msgid "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}\n\n"
msgstr ""

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:493
msgid "and as such for the GHZ state probability of obtaining 000 or 111 are both 1/2."
msgstr "e pertanto per lo stato GHZ le probabilità di ottenere 000 o 111 sono entrambe 1/2."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:495
msgid "To simulate a circuit that includes measurement, we need to add measurements to the original circuit above, and use a different Aer backend."
msgstr "Per simulare un circuito che includa la misura, è necessario aggiungere misurazioni al circuito originale di sopra, e utilizzare un diverso backend Aer."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:572
msgid "This circuit adds a classical register, and three measurements that are used to map the outcome of qubits to the classical bits."
msgstr "Questo circuito aggiunge un registro classico, e tre misurazioni che sono usate per mappare il risultato dei qubit sui bit classici."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:574
msgid "To simulate this circuit, we use the ``qasm_simulator`` in Qiskit Aer. Each run of this circuit will yield either the bitstring 000 or 111. To build up statistics about the distribution of the bitstrings (to, e.g., estimate :math:`\\mathrm{Pr}(000)`), we need to repeat the circuit many times. The number of times the circuit is repeated can be specified in the ``execute`` function, via the ``shots`` keyword."
msgstr "Per simulare il circuito, usiamo il ``qasm_simulator`` in Qiskit Aer. Ogni esecuzione di questo circuito produrrà o la stringa di bit 000 o 111. Per costruire statistiche sulla distribuzione delle stringhe di bit (ad esempio, per stimare :math:`\\mathrm{Pr}(000)`), occorre ripetere il circuito molte volte. Il numero di volte in cui il circuito va ripetuto può essere specificato nella funzione ``execute``, tramite la parola chiave ``shots``."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:604
msgid "Once you have a result object, you can access the counts via the function ``get_counts(circuit)``. This gives you the *aggregated* binary outcomes of the circuit you submitted."
msgstr "Una volta che si è ottenuto l'oggetto risultante, è possibile accedere ai conteggi tramite la funzione ``get_counts(circuit)``. Tale funzione restituisce gli esiti binari *aggregati* del circuito che è stato inviato."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:645
msgid "Approximately 50 percent of the time, the output bitstring is 000. Qiskit also provides a function ``plot_histogram``, which allows you to view the outcomes."
msgstr "Circa il 50 per cento delle volte, la stringa di bit di output è 000. Qiskit fornisce anche una funzione ``plot_histogram``, che consente di visualizzare i risultati."

#: ../../tutorials/circuits/1_getting_started_with_qiskit.ipynb:676
msgid "The estimated outcome probabilities :math:`\\mathrm{Pr}(000)` and :math:`\\mathrm{Pr}(111)` are computed by taking the aggregate counts and dividing by the number of shots (times the circuit was repeated). Try changing the ``shots`` keyword in the ``execute`` function and see how the estimated probabilities change."
msgstr "Le probabilità risultanti stimate :math:`\\mathrm{Pr}(000)` e :math:`\\mathrm{Pr}(111)` sono calcolate considerando il conteggio aggregato e dividendo per il numero di shot (volte in cui il circuito è stato ripetuto). Provando a modificare il valore della parola chiave ``shots`` nella funzione ``execute`` si può vedere come cambiano le probabilità stimate."

