# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-05 21:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:10
msgid ""
"This page was generated from "
"`tutorials/chemistry/1_programmatic_approach.ipynb`__."
msgstr ""

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:9
msgid "**Qiskit Chemistry, Programmatic Approach**"
msgstr ""

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:21
msgid "Introduction"
msgstr ""

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:23
msgid "This notebook illustrates how to use Qiskit Chemistry's programmatic APIs."
msgstr ""

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:25
msgid ""
"In this notebook, we decompose the computation of the ground state energy"
" of a molecule into 4 steps: 1. Define a molecule and get integrals from "
"a computational chemistry driver (PySCF in this case) 2. Construct a "
"Fermionic Hamiltonian and map it onto a qubit Hamiltonian 3. Instantiate "
"and initialize dynamically-loaded algorithmic components, such as the "
"quantum algorithm VQE, the optimizer and variational form it will use, "
"and the initial\\_state to initialize the variational form 4. Run the "
"algorithm on a quantum backend and retrieve the results"
msgstr ""

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:63
msgid "Step 1: Define a molecule"
msgstr ""

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:65
msgid ""
"Here, we use LiH in the sto3g basis with the PySCF driver as an example. "
"The ``molecule`` object records the information from the PySCF driver."
msgstr ""

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:91
msgid "Step 2: Prepare qubit Hamiltonian"
msgstr ""

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:93
msgid ""
"Here, we setup the **to-be-frozen** and **to-be-removed** orbitals to "
"reduce the problem size when we map to the qubit Hamiltonian. "
"Furthermore, we define the **mapping type** for the qubit Hamiltonian. "
"For the particular ``parity`` mapping, we can further reduce the problem "
"size."
msgstr ""

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:409
msgid ""
"We use the classical eigen decomposition to get the smallest eigenvalue "
"as a reference."
msgstr ""

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:456
msgid "Step 3: Initiate and configure dynamically-loaded instances"
msgstr ""

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:458
msgid "To run VQE with the UCCSD variational form, we require:"
msgstr ""

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:460
msgid "VQE algorithm"
msgstr ""

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:461
msgid "Classical Optimizer"
msgstr ""

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:462
msgid "UCCSD variational form"
msgstr ""

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:463
msgid "Prepare the initial state in the HartreeFock state"
msgstr ""

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:475
msgid "[Optional] Setup token to run the experiment on a real device"
msgstr ""

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:477
msgid ""
"If you would like to run the experiment on a real device, you need to "
"setup your account first."
msgstr ""

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:479
msgid ""
"Note: If you did not store your token yet, use "
"``IBMQ.save_account('MY_API_TOKEN')`` to store it first."
msgstr ""

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:538
msgid "Step 4: Run algorithm and retrieve the results"
msgstr ""

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:549
msgid ""
"results = vqe.run(quantum\\_instance) print('The computed ground state "
"energy is: {:.12f}'.format(results.eigenvalue.real)) print('The total "
"ground state energy is: {:.12f}'.format(results.eigenvalue.real + "
"energy\\_shift + nuclear\\_repulsion\\_energy)) print(\"Parameters: "
"{}\".format(results.optimal\\_point))"
msgstr ""

