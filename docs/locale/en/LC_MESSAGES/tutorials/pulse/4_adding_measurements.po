# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-05 21:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../tutorials/pulse/4_adding_measurements.ipynb:10
msgid ""
"This page was generated from "
"`tutorials/pulse/4_adding_measurements.ipynb`__."
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:9
msgid "Adding measurements to ``Schedule``\\ s"
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:11
msgid ""
"Measurement is clearly a very important part of building a Pulse schedule"
" -- this is required to get the results of our program execution! The "
"powerful low-level control we are granted by Pulse gives us more freedom "
"than ``QuantumCircuit``\\ s in specifying how the measurement should be "
"done, enabling you to explore readout error mitigation. This power of "
"course comes with responsibility: we have to understand how measurement "
"works, and accommodate certain hardware constraints."
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:13
msgid ""
"On this page, we will explore in depth how to create measurements, using "
"several different approaches of increasing complexity."
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:15
msgid ""
"\\*\\*Note: Pulse allows you to receive raw, kerneled, and discriminated "
"readout data (whereas circuits will only return discriminated data)."
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:18
msgid "Adding a backend-default measurement with ``measure``"
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:20
msgid ""
"To add measurements as easily to ``Schedule``\\ s as to "
"``QuantumCircuit``\\ s, you just have to know which qubits you want to "
"measure (below, qubits 0 and 1) and have an OpenPulse-enabled "
"``backend``:"
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:28
msgid ""
"The ``backend`` contains a default definition for measurement, which is "
"tailored to the qubits you are measuring."
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:31
msgid "Basic measurement pattern and ``measure_all``"
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:33
msgid ""
"Let's use the default measurement feature to inspect a measurement and "
"learn what each pulse does. Below, we use ``measure_all``, which measures"
" all the qubits on the backend."
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:85
msgid ""
"Each qubit has two channels related to readout, as we see above. These "
"are the readout transmit ``MeasureChannel``\\ s, and the readout receive "
"``AcquireChannel``\\ s. In superconducting qubit architectures, qubits "
"are coupled to readout resonators. The ``MeasureChannel`` and "
"``AcquireChannel``\\ s label signal lines which connect to the readout "
"resonator. The coupling between the qubit and the readout resonator "
"hybridizes their state, so when a stimulus pulse is sent to the readout "
"resonator, the reflected pulse is dependent on the state of the qubit. "
"The acquisition \"pulse\" is truly a trigger specifying to the analog-to-"
"digital converter (ADC) to begin collecting data, and for how long. That "
"data is used to classify the qubit state."
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:89
msgid "Specifying classical memory slots"
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:91
msgid ""
"If you would like to specify where your measurement results go, there is "
"an option for that in ``measure``, called ``qubit_mem_slots``. It takes a"
" dictionary mapping qubit indices to classical memory slots. For example,"
" if you want to measure qubit 0 into memory slot 1, you would do this:"
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:114
msgid ""
"This would be equivalent to the circuit measurement "
"``circuit.measure(qubit_reg[0], classical_reg[1])``."
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:126
msgid "Build a measurement sequence from pulses"
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:128
msgid ""
"Rather than use the default measurements provided by the backend, we can "
"also build the measurement sequence up as a basic Pulse schedule. The "
"example below is similar to a typical measurement on IBM systems."
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:130
msgid ""
"First, we'll build the measurement stimulus pulses for each of the qubits"
" we want to measure. Below, we use a Gaussian square parametric pulse."
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:160
msgid ""
"Before we build the acquisition pulses, we need to understand the "
"measurement map."
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:163
msgid "Acquiring qubits: the measurement map ``meas_map``"
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:165
msgid ""
"Due to control rack hardware constraints, some qubits may need to be "
"acquired together. This can be the case for qubits whose readout channels"
" are multiplexed. Any OpenPulse-enabled backend will provide a "
"``meas_map`` to notify the user of this."
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:167
msgid "For instance, if we see this for a 5-qubit ``backend``"
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:175
msgid ""
"then we know that all the qubits on this device must be acquired "
"together. On the other hand, this output"
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:181
msgid ""
"tells us that qubits 0, 1 and 2 can be acquired independently, but qubits"
" 3 and 4 must be acquired together."
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:183
msgid ""
"When building up a pulse schedule, be sure to add all the acquire pulses "
"required by the backend you plan to run on. This is validated at assemble"
" time."
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:185
msgid ""
"Getting back to our example, let's imagine we plan to run on a backend "
"with this measurement map: ``[[0, 1, 2]]``. Now we can build the "
"acquisition pulses. This is done with the ``Acquire`` command, which "
"takes only a duration. We specify the channels and memory slots to "
"acquire on."
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:208
msgid ""
"Finally, we just combine the two parts together. Every instruction is on "
"a different channel, so appending schedules the instructions at time 0. "
"The ``measure_schedule`` can then be added to the end of any Pulse "
"schedule to measure qubits 0 and 1 into classical memory slots 0 and 1."
msgstr ""

#: ../../tutorials/pulse/4_adding_measurements.ipynb:240
msgid ""
"Next, check out how to `get system information from the backends "
"<5_gathering_system_information.ipynb>`__."
msgstr ""

