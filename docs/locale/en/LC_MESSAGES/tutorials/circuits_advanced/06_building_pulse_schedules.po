# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-01 19:00+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:10
msgid ""
"This page was generated from "
"`tutorials/circuits_advanced/06_building_pulse_schedules.ipynb`__."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:9
msgid "Building Pulse Schedules"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:11
msgid ""
"Pulse gates define a low-level, exact representation for a circuit gate. "
"A single operation can be implemented with a pulse program, which is "
"comprised of multiple low-level instructions. To learn more about pulse "
"gates, refer back to the documentation `here <05_pulse_gates.ipynb>`__. "
"This page details how to create pulse programs."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:13
msgid ""
"Note: For IBM devices, pulse programs are used as subroutines to describe"
" gates. Previously, some devices accepted full programs in this format, "
"but this is being sunset in December 2021. Other providers may still "
"accept full programs in this format. Regardless of how the program is "
"used, the syntax for building the program is the same. Read on to learn "
"how!"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:15
msgid ""
"Pulse programs, which are called ``Schedule``\\ s, describe instruction "
"sequences for the control electronics. We build ``Schedule``\\ s using "
"the Pulse Builder. It’s easy to initialize a schedule:"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:62
msgid ""
"You can see that there are no instructions yet. The next section of this "
"page will explain each of the instructions you might add to a schedule, "
"and the last section will describe various *alignment contexts*, which "
"determine how instructions are placed in time relative to one another."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:74
msgid "``Schedule`` Instructions"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:76
msgid "`delay(duration, channel) <#delay>`__"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:77
msgid "`play(pulse, channel) <#play>`__"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:78
msgid "`set_frequency(frequency, channel) <#set_frequency>`__"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:79
msgid "`shift_phase(phase, channel) <#shift_phase>`__"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:80
msgid "`acquire(duration, channel, mem_slot, reg_slot) <#acquire>`__"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:82
msgid ""
"Each instruction type has its own set of operands. As you can see above, "
"they each include at least one ``Channel`` to specify where the "
"instruction will be applied."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:84
msgid ""
"**Channels** are labels for signal lines from the control hardware to the"
" quantum chip."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:86
msgid ""
"``DriveChannel``\\ s are typically used for *driving* single qubit "
"rotations,"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:87
msgid ""
"``ControlChannel``\\ s are typically used for multi-qubit gates or "
"additional drive lines for tunable qubits,"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:88
msgid ""
"``MeasureChannel``\\ s are specific to transmitting pulses which "
"stimulate readout, and"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:89
msgid ""
"``AcquireChannel``\\ s are used to trigger digitizers which collect "
"readout signals."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:91
msgid ""
"``DriveChannel``\\ s, ``ControlChannel``\\ s, and ``MeasureChannel``\\ s "
"are all ``PulseChannel``\\ s; this means that they support *transmitting*"
" pulses, whereas the ``AcquireChannel`` is a receive channel only and "
"cannot play waveforms."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:93
msgid ""
"For the following examples, we will create one ``DriveChannel`` instance "
"for each ``Instruction`` that accepts a ``PulseChannel``. Channels take "
"one integer ``index`` argument. Except for ``ControlChannel``\\ s, the "
"index maps trivially to the qubit label."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:116
msgid ""
"The pulse ``Schedule`` is independent of the backend it runs on. However,"
" we can build our program in a context that is aware of the target "
"backend by supplying it to ``pulse.build``. When possible you should "
"supply a backend. By using the channel accessors "
"``pulse.<type>_channel(<idx>)`` we can make sure we are only using "
"available device resources."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:165
msgid "``delay``"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:167
msgid ""
"One of the simplest instructions we can build is ``delay``. This is a "
"blocking instruction that tells the control electronics to output no "
"signal on the given channel for the duration specified. It is useful for "
"controlling the timing of other instructions."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:169
msgid ""
"The duration here and elsewhere is in terms of the backend’s cycle time "
"(1 / sample rate), ``dt``. It must take an integer value."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:171
msgid ""
"To add a ``delay`` instruction, we pass a duration and a channel, where "
"``channel`` can be any kind of channel, including ``AcquireChannel``. We "
"use ``pulse.build`` to begin a Pulse Builder context. This automatically "
"schedules our delay into the schedule ``delay_5dt``."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:193
msgid ""
"That’s all there is to it. Any instruction added after this delay on the "
"same channel will execute five timesteps later than it would have without"
" this delay."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:196
msgid "``play``"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:198
msgid ""
"The ``play`` instruction is responsible for executing *pulses*. It’s "
"straightforward to add a play instruction:"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:205
msgid ""
"Let’s clarify what the ``pulse`` argument is and explore a few different "
"ways to build one."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:208
msgid "Pulses"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:210
msgid ""
"A ``Pulse`` specifies an arbitrary pulse *envelope*. The modulation "
"frequency and phase of the output waveform are controlled by the "
"``set_frequency`` and ``shift_phase`` instructions, which we will cover "
"next."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:212
msgid ""
"The image below may provide some intuition for why they are specified "
"separately. Think of the pulses which describe their envelopes as input "
"to an arbitrary waveform generator (AWG), a common lab instrument – this "
"is depicted in the left image. Notice the limited sample rate discritizes"
" the signal. The signal produced by the AWG may be mixed with a "
"continuous sine wave generator. The frequency of its output is controlled"
" by instructions to the sine wave generator; see the middle image. "
"Finally, the signal sent to the qubit is demonstrated by the right side "
"of the image below."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:215
msgid ""
"**Note**: The hardware may be implemented in other ways, but if we keep "
"the instructions separate, we avoid losing explicit information, such as "
"the value of the modulation frequency."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:217
msgid "|alt text|"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:219
msgid ""
"There are many methods available to us for building up pulses. Our "
"``library`` within Qiskit Pulse contains helpful methods for building "
"``Pulse``\\ s. Let’s take for example a simple Gaussian pulse – a pulse "
"with its envelope described by a sampled Gaussian function. We "
"arbitrarily choose an amplitude of 1, standard deviation :math:`\\sigma` "
"of 10, and 128 sample points."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:221
msgid ""
"**Note**: The amplitude norm is arbitrarily limited to ``1.0``. Each "
"backend system may also impose further constraints – for instance, a "
"minimum pulse size of 64. These additional constraints, if available, "
"would be provided through the ``BackendConfiguration`` which is described"
" `here <08_gathering_system_information.ipynb#Configuration>`__."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:249
msgid "Parametric pulses"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:251
msgid ""
"Let’s build our Gaussian pulse using the ``Gaussian`` parametric pulse. A"
" parametric pulse sends the name of the function and its parameters to "
"the backend, rather than every individual sample. Using parametric pulses"
" makes the jobs you send to the backend much smaller. IBM Quantum "
"backends limit the maximum job size that they accept, so parametric "
"pulses may allow you to run larger programs."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:253
msgid ""
"Other parametric pulses in the ``library`` include ``GaussianSquare``, "
"``Drag``, and ``Constant``."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:255
msgid ""
"**Note**: The backend is responsible for deciding exactly how to sample "
"the parametric pulses. It is possible to draw parametric pulses, but the "
"samples displayed are not guaranteed to be the same as those executed on "
"the backend."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:288
msgid "Pulse waveforms described by samples"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:290
msgid ""
"A ``Waveform`` is a pulse signal specified as an array of time-ordered "
"complex amplitudes, or *samples*. Each sample is played for one cycle, a "
"timestep ``dt``, determined by the backend. If we want to know the real-"
"time dynamics of our program, we need to know the value of ``dt``. The "
"(zero-indexed) :math:`i^{th}` sample will play from time ``i*dt`` up to "
"``(i + 1)*dt``, modulated by the qubit frequency."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:327
msgid "Pulse library functions"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:329
msgid ""
"Our own pulse library has sampling methods to build a ``Waveform`` from "
"common functions."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:360
msgid ""
"Regardless of which method you use to specify your ``pulse``, ``play`` is"
" added to your schedule the same way:"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:392
msgid "You may also supply a complex list or array directly to ``play``"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:424
msgid ""
"The ``play`` instruction gets its duration from its ``Pulse``: the "
"duration of a parametrized pulse is an explicit argument, and the "
"duration of a ``Waveform`` is the number of input samples."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:427
msgid "``set_frequency``"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:429
msgid ""
"As explained previously, the output pulse waveform envelope is also "
"modulated by a frequency and phase. Each channel has a `default frequency"
" listed in the backend.defaults() "
"<08_gathering_system_information.ipynb#Defaults>`__."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:431
msgid ""
"The frequency of a channel can be updated at any time within a "
"``Schedule`` by the ``set_frequency`` instruction. It takes a float "
"``frequency`` and a ``PulseChannel`` ``channel`` as input. All pulses on "
"a channel following a ``set_frequency`` instruction will be modulated by "
"the given frequency until another ``set_frequency`` instruction is "
"encountered or until the program ends."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:433
msgid "The instruction has an implicit duration of ``0``."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:435
msgid ""
"**Note**: The frequencies that can be requested are limited by the total "
"bandwidth and the instantaneous bandwidth of each hardware channel. In "
"the future, these will be reported by the ``backend``."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:458
msgid "``shift_phase``"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:460
msgid ""
"The ``shift_phase`` instruction will increase the phase of the frequency "
"modulation by ``phase``. Like ``set_frequency``, this phase shift will "
"affect all following instructions on the same channel until the program "
"ends. To undo the affect of a ``shift_phase``, the negative ``phase`` can"
" be passed to a new instruction."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:462
msgid "Like ``set_frequency``, the instruction has an implicit duration of ``0``."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:485
msgid "``acquire``"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:487
msgid ""
"The ``acquire`` instruction triggers data acquisition for readout. It "
"takes a duration, an ``AcquireChannel`` which maps to the qubit being "
"measured, and a ``MemorySlot`` or a ``RegisterSlot``. The ``MemorySlot`` "
"is classical memory where the readout result will be stored. The "
"``RegisterSlot`` maps to a register in the control electronics which "
"stores the readout result for fast feedback."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:489
msgid ""
"The ``acquire`` instructions can also take custom ``Discriminator``\\ s "
"and ``Kernel``\\ s as keyword arguments."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:513
msgid ""
"Now that we know how to add ``Schedule`` instructions, let’s learn how to"
" control exactly when they’re played."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:516
msgid "Pulse Builder"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:518
msgid ""
"Here, we will go over the most important Pulse Builder features for "
"learning how to build schedules. This is not exhaustive; for more details"
" about what you can do using the Pulse Builder, check out the `Pulse API "
"reference <https://qiskit.org/documentation/apidoc/pulse.html>`__."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:521
msgid "Alignment contexts"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:523
msgid ""
"The builder has alignment contexts which influence how a schedule is "
"built. Contexts can also be nested. Try them out, and use ``.draw()`` to "
"see how the pulses are aligned."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:525
msgid ""
"Regardless of the alignment context, the duration of the resulting "
"schedule is as short as it can be while including every instruction and "
"following the alignment rules. This still allows some degrees of freedom "
"for scheduling instructions off the “longest path”. The examples below "
"illuminate this."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:528
msgid "``align_left``"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:530
msgid ""
"The builder has alignment contexts that influence how a schedule is "
"built. The default is ``align_left``."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:567
msgid ""
"Notice how there is no scheduling freedom for the pulses on ``D1``. The "
"second waveform begins immediately after the first. The pulse on ``D0`` "
"can start at any time between ``t=0`` and ``t=100`` without changing the "
"duration of the overall schedule. The ``align_left`` context sets the "
"start time of this pulse to ``t=0``. You can think of this like left-"
"justification of a text document."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:570
msgid "``align_right``"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:572
msgid ""
"Unsurprisingly, ``align_right`` does the opposite of ``align_left``. It "
"will choose ``t=100`` in the above example to begin the gaussian pulse on"
" ``D0``. Left and right are also sometimes called “as soon as possible” "
"and “as late as possible” scheduling, respectively."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:610
msgid "``align_equispaced(duration)``"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:612
msgid ""
"If the duration of a particular block is known, you can also use "
"``align_equispaced`` to insert equal duration delays between each "
"instruction."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:650
msgid "``align_sequential``"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:652
msgid ""
"This alignment context does not schedule instructions in parallel. Each "
"instruction will begin at the end of the previously added instruction."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:690
msgid "Phase and frequency offsets"
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:692
msgid ""
"We can use the builder to help us temporarily offset the frequency or "
"phase of our pulses on a channel."
msgstr ""

#: ../../tutorials/circuits_advanced/06_building_pulse_schedules.ipynb:728
msgid ""
"We encourage you to visit the `Pulse API reference "
"<https://qiskit.org/documentation/apidoc/pulse.html>`__ to learn more."
msgstr ""

