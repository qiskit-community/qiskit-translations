# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-25 18:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../tutorials/operators/02_gradients_framework.ipynb:10
msgid ""
"This page was generated from "
"`tutorials/operators/02_gradients_framework.ipynb`__."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:9
msgid "Qiskit Gradient Framework"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:11
msgid ""
"The gradient framework enables the evaluation of quantum gradients as "
"well as functions thereof. Besides standard first order gradients of "
"expectation values of the form"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:13
msgid ""
"\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle"
"\n"
"\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:15
msgid ""
"The gradient framework also supports the evaluation of second order "
"gradients (Hessians), and the Quantum Fisher Information (QFI) of quantum"
" states :math:`|\\psi\\left(\\theta\\right)\\rangle`."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:26
msgid "|gradient_framework.png|"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:40
msgid "Imports"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:71
msgid "First Order Gradients"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:73
msgid ""
"Given a parameterized quantum state "
":math:`|\\psi\\left(\\theta\\right)\\rangle = "
"V\\left(\\theta\\right)|\\psi\\rangle` with input state "
":math:`|\\psi\\rangle`, parametrized Ansatz "
":math:`V\\left(\\theta\\right)`, and observable "
":math:`\\hat{O}\\left(\\omega\\right)=\\sum_{i}\\omega_i\\hat{O}_i`, we "
"want to compute…"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:85
msgid "Gradients w.r.t. Measurement Operator Parameters"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:87
msgid ""
"Gradient of an expectation value w.r.t. a coefficient of the measurement "
"operator respectively observable :math:`\\hat{O}\\left(\\omega\\right)`, "
"i.e."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:89
msgid ""
"\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\omega_i}"
" = "
"\\langle\\psi\\left(\\theta\\right)|\\hat{O}_i\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle."
"\n"
"\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:100
msgid ""
"First of all, we define a quantum state "
":math:`|\\psi\\left(\\theta\\right)\\rangle` and a Hamiltonian :math:`H` "
"acting as observable. Then, the state and the Hamiltonian are wrapped "
"into an object defining the expectation value"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:102
#: ../../tutorials/operators/02_gradients_framework.ipynb:1421
msgid ""
"\\langle\\psi\\left(\\theta\\right)|H|\\psi\\left(\\theta\\right)\\rangle."
"\n"
"\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:186
msgid ""
"We construct a list of the parameters for which we aim to evaluate the "
"gradient. Now, this list and the expectation value operator are used to "
"generate the operator which represents the gradient."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:446
msgid ""
"All that is left to do is to assign values to the parameters and to "
"evaluate the gradient operators."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:493
msgid "Gradients w.r.t. State Parameters"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:495
msgid ""
"Gradient of an expectation value w.r.t. a state "
":math:`|\\psi\\left(\\theta\\right)\\rangle` parameter, i.e.\\"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:497
msgid ""
"\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}"
"\n"
"\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:499
msgid ""
"respectively of sampling probabilities w.r.t. a state "
":math:`|\\psi\\left(\\theta\\right)\\rangle` parameter, i.e."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:501
msgid ""
"\\frac{\\partial p_i}{\\partial\\theta} = "
"\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|i\\rangle\\langle i "
"|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}.\n"
"\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:503
msgid ""
"A gradient w.r.t. a state parameter may be evaluated with different "
"methods. Each method has advantages and disadvantages."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:581
msgid "Parameter Shift Gradients"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:583
msgid ""
"Given a Hermitian operator :math:`g` with two unique eigenvalues "
":math:`\\pm r` which acts as generator for a parameterized quantum gate"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:585
msgid ""
"G(\\theta)= e^{-i\\theta g}.\n"
"\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:587
msgid ""
"Then, quantum gradients can be computed by using eigenvalue :math:`r` "
"dependent shifts to parameters. All `standard, parameterized Qiskit gates"
" <https://github.com/Qiskit/qiskit-"
"terra/tree/master/qiskit/circuit/library/standard_gates>`__ can be "
"shifted with :math:`\\pi/2`, i.e.,"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:589
msgid ""
"\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}"
" =  "
"\\left(\\langle\\psi\\left(\\theta+\\pi/2\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta+\\pi/2\\right)\\rangle"
" "
"-\\langle\\psi\\left(\\theta-\\pi/2\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta-\\pi/2\\right)\\rangle\\right)"
" / 2.\n"
"\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:591
#: ../../tutorials/operators/02_gradients_framework.ipynb:1058
msgid "Probability gradients are computed equivalently."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:853
msgid "Linear Combination of Unitaries Gradients"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:855
msgid ""
"Unitaries can be written as :math:`U\\left(\\omega\\right) = "
"e^{iM\\left(\\omega\\right)}`, where :math:`M\\left(\\omega\\right)` "
"denotes a parameterized Hermitian matrix. Further, Hermitian matrices can"
" be decomposed into weighted sums of Pauli terms, i.e., "
":math:`M\\left(\\omega\\right) = \\sum_pm_p\\left(\\omega\\right)h_p` "
"with :math:`m_p\\left(\\omega\\right)\\in\\mathbb{R}` and "
":math:`h_p=\\bigotimes\\limits_{j=0}^{n-1}\\sigma_{j, p}` for "
":math:`\\sigma_{j, p}\\in\\left\\{I, X, Y, Z\\right\\}` acting on the "
":math:`j^{\\text{th}}` qubit. Thus, the gradients of "
":math:`U_k\\left(\\omega_k\\right)` are given by :nbsphinx-"
"math:`\\begin{equation*} \\frac{\\partial "
"U_k\\left(\\omega_k\\right)}{\\partial\\omega_k} = \\sum\\limits_pi "
"\\frac{\\partial "
"m_{k,p}\\left(\\omega_k\\right)}{\\partial\\omega_k}U_k\\left(\\omega_k\\right)h_{k_p}."
" \\end{equation*}`"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:860
msgid ""
"Combining this observation with a circuit structure presented in "
"`Simulating physical phenomena by quantum networks "
"<https://journals.aps.org/pra/abstract/10.1103/PhysRevA.65.042323>`__ "
"allows us to compute the gradient with the evaluation of a single quantum"
" circuit."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1052
msgid "Finite Difference Gradients"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1054
msgid ""
"Unlike the other methods, finite difference gradients are numerical "
"estimations rather than analytical values. This implementation employs a "
"central difference approach with :math:`\\epsilon \\ll 1`"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1056
msgid ""
"\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}"
" \\approx \\frac{1}{2\\epsilon} "
"\\left(\\langle\\psi\\left(\\theta+\\epsilon\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta+\\epsilon\\right)\\rangle"
" - "
"\\partial\\langle\\psi\\left(\\theta-\\epsilon\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta-\\epsilon\\right)\\rangle\\right)."
"\n"
"\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1322
msgid "Natural Gradient"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1324
msgid ""
"A special type of first order gradient is the natural gradient which has "
"proven itself useful in classical machine learning and is already being "
"studied in the quantum context. This quantity represents a gradient that "
"is ‘rescaled’ with the inverse `Quantum Fisher Information matrix "
"<#qfi>`__ (QFI)"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1326
msgid ""
"QFI ^{-1} "
"\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}."
"\n"
"\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1337
msgid ""
"Instead of inverting the QFI, one can also use a least-square solver with"
" or without regularization to solve"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1339
msgid ""
"QFI x = "
"\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}."
"\n"
"\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1341
msgid ""
"The implementation supports ridge and lasso regularization with automatic"
" search for a good parameter using `L-curve corner search "
"<https://arxiv.org/pdf/1608.04571.pdf>`__ as well as two types of "
"perturbations of the diagonal elements of the QFI."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1343
msgid ""
"The natural gradient can be used instead of the standard gradient with "
"any gradient-based optimizer and/or ODE solver."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1396
msgid "Hessians (Second Order Gradients)"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1398
msgid ""
"Four types of second order gradients are supported by the gradient "
"framework."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1400
msgid ""
"Gradient of an expectation value w.r.t. a coefficient of the measurement "
"operator respectively observable :math:`\\hat{O}\\left(\\omega\\right)`, "
"i.e. "
":math:`\\frac{\\partial^2\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\omega^2}`"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1401
msgid ""
"Gradient of an expectation value w.r.t. a state "
":math:`|\\psi\\left(\\theta\\right)\\rangle` parameter, i.e. "
":math:`\\frac{\\partial^2\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta^2}`"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1402
msgid ""
"Gradient of sampling probabilities w.r.t. a state "
":math:`|\\psi\\left(\\theta\\right)\\rangle` parameter, i.e. "
":math:`\\frac{\\partial^2 p_i}{\\partial\\theta^2} = "
"\\frac{\\partial^2\\langle\\psi\\left(\\theta\\right)|i\\rangle\\langle "
"i|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta^2}`"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1403
msgid ""
"Gradient of an expectation value w.r.t. a state "
":math:`|\\psi\\left(\\theta\\right)\\rangle` parameter and a coefficient "
"of the measurement operator respectively observable "
":math:`\\hat{O}\\left(\\omega\\right)`, i.e. "
":math:`\\frac{\\partial^2\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta\\partial\\omega}`"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1405
msgid ""
"In the following examples are given for the first two Hessian types. The "
"remaining Hessians are evaluated analogously."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1417
msgid "Hessians w.r.t. Measurement Operator Parameters"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1419
msgid ""
"Again, we define a quantum state "
":math:`|\\psi\\left(\\theta\\right)\\rangle` and a Hamiltonian :math:`H` "
"acting as observable. Then, the state and the Hamiltonian are wrapped "
"into an object defining the expectation value"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1456
msgid ""
"Next, we can choose the parameters for which we want to compute second "
"order gradients. - Given a tuple, the ``Hessian`` will evaluate the "
"second order gradient for the two parameters. - Given a list, the "
"``Hessian`` will evaluate the second order gradient for all possible "
"combinations of tuples of these parameters."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1458
msgid ""
"After binding parameter values to the parameters, the Hessian can be "
"evaluated."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1517
msgid "Hessians w.r.t. State Parameters"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1605
msgid "Quantum Fisher Information (QFI)"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1607
msgid ""
"The Quantum Fisher Information is a metric tensor which is representative"
" for the representation capacity of a parameterized quantum state "
":math:`|\\psi\\left(\\theta\\right)\\rangle = "
"V\\left(\\theta\\right)|\\psi\\rangle` with input state "
":math:`|\\psi\\rangle`, parametrized Ansatz "
":math:`V\\left(\\theta\\right)`."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1609
msgid "The entries of the QFI for a pure state reads"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1611
msgid ""
"QFI_{kl} = 4 * "
"\\text{Re}\\left[\\langle\\partial_k\\psi|\\partial_l\\psi\\rangle-\\langle\\partial_k\\psi|\\psi\\rangle\\langle\\psi|\\partial_l\\psi\\rangle"
" \\right].\n"
"\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1623
msgid "Circuit QFIs"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1625
msgid ""
"The evaluation of the QFI corresponding to a quantum state that is "
"generated by a parameterized quantum circuit can be conducted in "
"different ways."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1628
msgid "Linear Combination Full QFI"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1630
msgid ""
"To compute the full QFI, we use a working qubit as well as intercepting "
"controlled gates. See e.g. \\ `Variational ansatz-based quantum "
"simulation of imaginary time evolution "
"<https://www.nature.com/articles/s41534-019-0187-2>`__."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1691
msgid "Block-diagonal and Diagonal Approximation"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1693
msgid ""
"A block-diagonal resp. diagonal approximation of the QFI can be computed "
"without additional working qubits. This implementation requires the "
"unrolling into Pauli rotations and unparameterized Gates."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1767
msgid "Application Example: VQE with gradient-based optimization"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1779
msgid "Additional Imports"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1806
msgid ""
"The Gradient Framework can also be used for a gradient-based ``VQE``. "
"First, the Hamiltonian and wavefunction ansatz are initialized."
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1852
msgid ""
"Now, we can choose whether the ``VQE`` should use a ``Gradient`` or "
"``NaturalGradient``, define a ``QuantumInstance`` to execute the quantum "
"circuits and run the algorithm."
msgstr ""

