# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-05 21:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:10
msgid ""
"This page was generated from "
"`tutorials/optimization/7_examples_vehicle_routing.ipynb`__."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:9
msgid "**Vehicle Routing**"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:12
msgid "The Introduction"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:14
msgid ""
"Logistics is a major industry, with some estimates valuing it at USD 8183"
" billion globally in 2015. Most service providers operate a number of "
"vehicles (e.g., trucks and container ships), a number of depots, where "
"the vehicles are based overnight, and serve a number of client locations "
"with each vehicle during each day. There are many optimization and "
"control problems that consider these parameters. Computationally, the key"
" challenge is how to design routes from depots to a number of client "
"locations and back to the depot, so as to minimize vehicle-miles "
"traveled, time spent, or similar objective functions. In this notebook we"
" formalize an idealized version of the problem and showcase its solution "
"using the quantum approximate optimization approach of Farhi, Goldstone, "
"and Gutman (2014)."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:17
msgid "The overall workflow we demonstrate comprises:"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:19
msgid ""
"establish the client locations. Normally, these would be available ahead "
"of the day of deliveries from a database. In our use case, we generate "
"these randomly."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:21
msgid ""
"compute the pair-wise distances, travel times, or similar. In our case, "
"we consider the Euclidean distance, \"as the crow flies\", which is "
"perhaps the simplest possible."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:23
msgid ""
"compute the actual routes. This step is run twice, actually. First, we "
"obtain a reference value by a run of a classical solver (IBM CPLEX) on "
"the classical computer. Second, we run an alternative, hybrid algorithm "
"partly on the quantum computer."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:25
msgid ""
"visualization of the results. In our case, this is again a simplistic "
"plot."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:27
msgid ""
"In the following, we first explain the model, before we proceed with the "
"installation of the pre-requisites and the data loading."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:30
msgid "The Model"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:32
msgid ""
"Mathematically speaking, the vehicle routing problem (VRP) is a "
"combinatorial problem, wherein the best routes from a depot to a number "
"of clients and back to the depot are sought, given a number of available "
"vehicles. There are a number of formulations possible, extending a number"
" of formulations of the traveling salesman problem [Applegate et al, "
"2006]. Here, we present a formulation known as MTZ [Miller, Tucker, "
"Zemlin, 1960]."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:34
msgid ""
"Let :math:`n` be the number of clients (indexed as :math:`1,\\dots,n`), "
"and :math:`K` be the number of available vehicles. Let :math:`x_{ij} = "
"\\{0,1\\}` be the binary decision variable which, if it is :math:`1`, "
"activates the segment from node :math:`i` to node :math:`j`. The node "
"index runs from :math:`0` to :math:`n`, where :math:`0` is (by "
"convention) the depot. There are twice as many distinct decision "
"variables as edges. For example, in a fully connected graph, there are "
":math:`n(n+1)` binary decision variables."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:37
msgid ""
"If two nodes :math:`i` and :math:`j` have a link from :math:`i` to "
":math:`j`, we write :math:`i \\sim j`. We also denote with "
":math:`\\delta(i)^+` the set of nodes to which :math:`i` has a link, "
"i.e., :math:`j \\in \\delta(i)^+` if and only if :math:`i \\sim j`. "
"Similarly, we denote with :math:`\\delta(i)^-` the set of nodes which are"
" connected to :math:`i`, in the sense that :math:`j \\in \\delta(i)^-` if"
" and only if :math:`j \\sim i`."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:39
msgid ""
"In addition, we consider continuous variables, for all nodes :math:`i = "
"1,\\dots, n`, denoted :math:`u_i`. These variables are needed in the MTZ "
"formulation of the problem to eliminate sub-tours between clients."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:41
msgid "The VRP can be formulated as:"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:43
msgid ""
"(VRP) \\quad  f = \\min_{\\{x_{ij}\\}_{i\\sim j}\\in \\{0,1\\}, "
"\\{u_i\\}_{i=1,\\dots,n}\\in \\mathbb{R}} \\quad \\sum_{i \\sim j} w_{ij}"
" x_{ij}"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:48
msgid "subject to the node-visiting constraint:"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:50
msgid ""
"\\sum_{j \\in \\delta(i)^+} x_{ij} = 1, \\,\\sum_{j \\in \\delta(i)^-} "
"x_{ji} = 1,\\, \\forall i \\in \\{1,\\dots,n\\},"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:55
msgid "the depot-visiting constraints:"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:57
msgid ""
"\\sum_{i \\in \\delta(0)^+} x_{0i} = K, \\, \\sum_{j \\in \\delta(0)^+} "
"x_{j0} = K,"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:62
msgid "and the sub-tour elimination constraints:"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:64
msgid ""
"u_i - u_j + Q x_{ij} \\leq Q-q_j, \\, \\forall i \\sim j, \\,i ,j \\neq "
"0, \\quad q_i \\leq u_i \\leq Q,\\, \\forall i, i \\neq 0."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:69
msgid ""
"In particular, - The cost function is linear in the cost functions and "
"weighs the different arches based on a positive weight :math:`w_{ij}>0` "
"(typically the distance between node :math:`i` and node :math:`j`); - The"
" first set of constraints enforce that from and to every client, only one"
" link is allowed; - The second set of constraints enforce that from and "
"to the depot, exactly :math:`K` links are allowed; - The third set of "
"constraints enforce the sub-tour elimination constraints and are bounds "
"on :math:`u_i`, with :math:`Q>q_j>0`, and :math:`Q,q_i \\in \\mathbb{R}`."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:73
msgid "Classical solution"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:75
msgid ""
"We can solve the VRP classically, e.g., by using CPLEX. CPLEX uses a "
"branch-and-bound-and-cut method to find an approximate solution of the "
"VRP, which, in this formulation, is a mixed-integer linear program "
"(MILP). For the sake of notation, we pack the decision variables in one "
"vector as"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:77
msgid "{\\bf z} = [x_{01},x_{02},\\ldots,x_{10}, x_{12},\\ldots,x_{n(n-1)}]^T,"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:82
msgid ""
"wherein :math:`{\\bf z} \\in \\{0,1\\}^N`, with :math:`N = n (n+1)`. So "
"the dimension of the problem scales quadratically with the number of "
"nodes. Let us denote the optimal solution by :math:`{\\bf z}^*`, and the "
"associated optimal cost :math:`f^*`."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:85
msgid "Quantum solution"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:87
msgid ""
"Here, we demonstrate an approach that combines classical and quantum "
"computing steps, following the quantum approximate optimization approach "
"of Farhi, Goldstone, and Gutman (2014). In particular, we use the "
"variational quantum eigensolver (VQE). We stress that given the use of "
"limited depth of the quantum circuits employed (variational forms), it is"
" hard to discuss the speed-up of the algorithm, as the solution obtained "
"is heuristic in nature. At the same time, due to the nature and "
"importance of the target problems, it is worth investigating heuristic "
"approaches, which may be worthwhile for some problem classes."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:90
msgid ""
"Following [5], the algorithm can be summarized as follows: - Preparation "
"steps: - Transform the combinatorial problem into a binary polynomial "
"optimization problem with equality constraints only; - Map the resulting "
"problem into an Ising Hamiltonian (:math:`H`) for variables :math:`{\\bf "
"z}` and basis :math:`Z`, via penalty methods if necessary; - Choose the "
"depth of the quantum circuit :math:`m`. Note that the depth can be "
"modified adaptively. - Choose a set of controls :math:`\\theta` and make "
"a trial function :math:`\\big|\\psi(\\boldsymbol\\theta)\\rangle`, built "
"using a quantum circuit made of C-Phase gates and single-qubit Y "
"rotations, parameterized by the components of "
":math:`\\boldsymbol\\theta`."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:93
msgid "Algorithm steps:"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:95
msgid ""
"Evaluate :math:`C(\\boldsymbol\\theta) = "
"\\langle\\psi(\\boldsymbol\\theta)\\big|H\\big|\\psi(\\boldsymbol\\theta)\\rangle`"
" by sampling the outcome of the circuit in the Z-basis and adding the "
"expectation values of the individual Ising terms together. In general, "
"different control points around :math:`\\boldsymbol\\theta` have to be "
"estimated, depending on the classical optimizer chosen."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:96
msgid "Use a classical optimizer to choose a new set of controls."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:97
msgid ""
"Continue until :math:`C(\\boldsymbol\\theta)` reaches a minimum, close "
"enough to the solution :math:`\\boldsymbol\\theta^*`."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:98
msgid ""
"Use the last :math:`\\boldsymbol\\theta` to generate a final set of "
"samples from the distribution :math:`\\Big|\\langle "
"z_i\\big|\\psi(\\boldsymbol\\theta)\\rangle\\Big|^2\\;\\forall i` to "
"obtain the answer."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:100
msgid ""
"There are many parameters throughout, notably the choice of the trial "
"wavefunction. Below, we consider:"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:102
msgid ""
"\\big|\\psi(\\theta)\\rangle = [U_\\mathrm{single}(\\boldsymbol\\theta) "
"U_\\mathrm{entangler}]^m \\big|+\\rangle"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:107
msgid ""
"where :math:`U_\\mathrm{entangler}` is a collection of C-Phase gates "
"(fully-entangling gates), and :math:`U_\\mathrm{single}(\\theta) = "
"\\prod_{i=1}^N Y(\\theta_{i})`, where :math:`N` is the number of qubits "
"and :math:`m` is the depth of the quantum circuit."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:110
msgid "Construct the Ising Hamiltonian"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:112
msgid ""
"From :math:`VRP` one can construct a binary polynomial optimization with "
"equality constraints only by considering cases in which :math:`K=n-1`. In"
" these cases the sub-tour elimination constraints are not necessary and "
"the problem is only on the variable :math:`{\\bf z}`. In particular, we "
"can write an augmented Lagrangian as"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:114
msgid ""
"(IH) \\quad H = \\sum_{i \\sim j} w_{ij} x_{ij}  + A \\sum_{i \\in "
"\\{1,\\dots,n\\}} \\Big(\\sum_{j \\in \\delta(i)^+} x_{ij} - 1\\Big)^2 + "
"A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big(\\sum_{j \\in \\delta(i)^-} x_{ji}"
" - 1\\Big)^2 +A \\Big(\\sum_{i \\in \\delta(0)^+} x_{0i} - K\\Big)^2 + "
"A\\Big(\\sum_{j \\in \\delta(0)^+} x_{j0} - K\\Big)^2"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:119
msgid "where :math:`A` is a big enough parameter."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:122
msgid "From Hamiltonian to QP formulation"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:124
msgid ""
"In the vector :math:`{\\bf z}`, and for a complete graph "
"(:math:`\\delta(i)^+ = \\delta(i)^- = "
"\\{0,1,\\dots,i-1,i+1,\\dots,n\\}`), :math:`H` can be written as follows."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:126
msgid ""
"\\min_{{\\bf z}\\in \\{0,1\\}^{n(n+1)}} {\\bf w}^T {\\bf z}  + A \\sum_{i"
" \\in \\{1,\\dots,n\\}} \\Big({\\bf e}_i \\otimes {\\bf 1}_n^T {\\bf z} -"
" 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big({\\bf v}_i^T {\\bf z}"
" - 1\\Big)^2 + A \\Big(({\\bf e}_0 \\otimes {\\bf 1}_n)^T{\\bf z} - "
"K\\Big)^2 + A\\Big({\\bf v}_0^T{\\bf z} - K\\Big)^2."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:131
msgid "That is:"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:133
msgid ""
"\\min_{\\bf z\\in \\{0,1\\}^{n(n+1)}} \\bf z^T {\\bf Q} \\bf z + {\\bf "
"g}^T \\bf z + c,"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:138
msgid "Where: first term:"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:140
msgid ""
"{\\bf Q} = A \\sum_{i \\in \\{0,1,\\dots,n\\}}  \\Big[({\\bf e}_i "
"\\otimes {\\bf 1}_n)({\\bf e}_i \\otimes {\\bf 1}_n)^T + {\\bf v}_i{\\bf "
"v}_i^T \\Big]"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:145
msgid "Second term:"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:147
msgid ""
"{\\bf g} = {\\bf w} -2 A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big[({\\bf "
"e}_i \\otimes {\\bf 1}_n) + {\\bf v}_i \\Big] -2 A K \\Big[({\\bf e}_0 "
"\\otimes {\\bf 1}_n) + {\\bf v}_0 \\Big]"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:152
msgid "Third term:"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:154
msgid "c = 2An +2AK^2."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:159
msgid ""
"The QP formulation of the Ising Hamiltonian is ready for the use of VQE. "
"We will solve the QP using optimization stack available in Qiskit."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:162
msgid "References"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:164
msgid "[1] E. Farhi, J. Goldstone, S. Gutmann e-print arXiv 1411.4028, 2014"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:166
msgid ""
"[2] https://github.com/Qiskit/qiskit-"
"tutorial/blob/master/qiskit/aqua/optimization/maxcut\\_and\\_tsp.ipynb"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:168
msgid ""
"[3] C. E. Miller, E. W. Tucker, and R. A. Zemlin (1960). \"Integer "
"Programming Formulations and Travelling Salesman Problems\". J. ACM. 7: "
"326–329. doi:10.1145/321043.321046."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:170
msgid ""
"[4] D. L. Applegate, R. M. Bixby, V. Chvátal, and W. J. Cook (2006). The "
"Traveling Salesman Problem. Princeton University Press, ISBN "
"978-0-691-12993-8."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:182
msgid "Initialization"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:184
msgid ""
"First of all we load all the packages that we need: - Python 3.6 or "
"greater is required; - CPLEX 12.8 or greater is required for the "
"classical computations; - Latest Qiskit is required for the quantum "
"computations."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:233
msgid "We then initialize the variables"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:256
msgid ""
"We define an initializer class that randomly places the nodes in a 2-D "
"plane and computes the distance between them."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:312
msgid "Classical solution using IBM ILOG CPLEX"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:314
msgid ""
"For a classical solution, we use IBM ILOG CPLEX. CPLEX is able to find "
"the exact solution of this problem. We first define a ClassicalOptimizer "
"class that encodes the problem in a way that CPLEX can solve, and then "
"instantiate the class and solve it."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:531
msgid ""
"If you have CPLEX, the solution shows the depot with a star and the "
"selected routes for the vehicles with arrows."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:543
msgid "Quantum solution from the ground up"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:545
msgid "For the quantum solution, we use Qiskit."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:547
msgid ""
"First, we derive the solution from the ground up, using a class "
"QuantumOptimizer that encodes the quantum approach to solve the problem "
"and then we instantiate it and solve it. We define the following methods "
"inside the class: - ``binary_representation`` : encodes the problem "
":math:`(M)` into a QP terms (that's basically linear algebra); - "
"``construct_problem`` : constructs a QUBO optimization problem as an "
"instance of ``QuadraticProgram``; - ``solve_problem``: solves the problem"
" :math:`(M)` constructed at the previous step via "
"``MinimunEigenOptimizer`` by using VQE with default parameters;"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:658
msgid "Step 1"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:660
msgid ""
"Instantiate the quantum optimizer class with parameters: - the instance; "
"- the number of nodes and vehicles ``n`` and ``K``;"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:683
msgid "Step 2"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:685
msgid "Encode the problem as a binary formulation (IH-QP)."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:687
msgid ""
"Sanity check: make sure that the binary formulation in the quantum "
"optimizer is correct (i.e., yields the same cost given the same "
"solution)."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:744
msgid "Step 3"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:746
msgid "Encode the problem as an instance of ``QuadraticProgram``."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:768
msgid "Step 4"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:770
msgid ""
"Solve the problem via ``MinimumEigenOptimizer`` from the optimization "
"stack. N.B. Depending on the number of qubits, the state-vector "
"simulation can take a while; for example with 12 qubits, it takes more "
"than 12 hours. Logging is useful to see what the program is doing."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:813
msgid "Step 5"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:815
msgid "Visualize the solution"
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:867
msgid ""
"The plots present the depot with a star and the selected routes for the "
"vehicles with arrows. Note that in this particular case, we can find the "
"optimal solution of the QP formulation, which happens to coincide with "
"the optimal solution of the ILP."
msgstr ""

#: ../../tutorials/optimization/7_examples_vehicle_routing.ipynb:869
msgid ""
"Keep in mind that VQE is an heuristic working on the QP formulation of "
"the Ising Hamiltonian, though. For suitable choices of A, local optima of"
" the QP formulation will be feasible solutions to the ILP. While for some"
" small instances, as above, we can find optimal solutions of the QP "
"formulation which coincide with optima of the ILP, finding optimal "
"solutions of the ILP is harder than finding local optima of the QP "
"formulation, in general, which in turn is harder than finding feasible "
"solutions of the ILP. Even within the VQE, one may provide stronger "
"guarantees, for specific variational forms (trial wave functions)."
msgstr ""

