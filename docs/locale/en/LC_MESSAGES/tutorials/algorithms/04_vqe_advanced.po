# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-15 20:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:10
msgid ""
"This page was generated from "
"`tutorials/algorithms/04_vqe_advanced.ipynb`__."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:12
msgid ""
"Run interactively in the `IBM Quantum lab <https://quantum-"
"computing.ibm.com/jupyter/tutorial/algorithms/04_vqe_advanced.ipynb>`_."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:9
msgid "Advanced VQE usage"
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:11
msgid ""
"There exist several parameters for configuring and using more advanced "
"`VQE "
"<https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.html>`__"
" capabilities. This tutorial will cover the parameters such as "
"``initial_point``, ``expectation`` and ``gradient``."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:13
msgid ""
"It will also cover advanced simulator use such as using Aer with the "
"Matrix Product State method."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:39
msgid ""
"Here we will use the same operator as used in the other VQE algorithms "
"tutorials."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:65
msgid "Initial point"
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:67
msgid ""
"The ``initial_point`` parameter allows the optimization to begin at the "
"given point, where the point is a list of parameters that will configure "
"the variational form. By default the initial point is ``None`` which "
"means that VQE will choose one. The choice in in this case is if the "
"supplied variational form has a preferred point, based on the initial "
"state provided to it, then this will be chosen, otherwise a random "
"initial point that fits with any bounds the variational has will be "
"chosen. If an initial point is supplied it will take priority though and "
"be used - note though it must match in length to the number of parameters"
" in the variational form circuit."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:70
msgid ""
"Why to use a initial point? One reason would be if you have guess a "
"reasonable starting point for the problem or perhaps know have "
"information from a prior experiment."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:72
msgid ""
"To demonstrate the use let’s first simply repeat the first working "
"example from the `algorithms introduction "
"<01_algorithms_introduction.ipynb#A-complete-working-example>`__ tutorial"
" to get a solution’s optimal point."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:156
msgid ""
"Now we can take the ``optimal_point`` from the above result and use it as"
" the ``initial_point`` here."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:238
msgid ""
"Here we we see that result was arrived at much more quickly where "
"``optimizer_evals`` is 10 versus 72 when it started from a random value "
"when the initial point was not supplied (default of None)."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:240
msgid ""
"Where this becomes useful for examples where we the solution to one "
"problem can be used to for a guess for the solution to a very close "
"similar problem. Chemistry is very good example where we change the "
"inter-atomic distance(s) of molecule to plot a dissociation profile. When"
" the distance changes are small we expect the solution to still be nearby"
" the prior one. One technique is to simply use the optimal point from one"
" solution as the starting point for the next step. Now more complex "
"techniques are possible that do some extrapolation to compute an initial "
"based on prior solution(s) rather than directly use the prior solution. "
"The Qiskit Chemistry `sampling_potential_energy_surfaces "
"<../chemistry/05_Sampling_potential_energy_surfaces.ipynb#Extrapolation>`__"
" tutorial shows such bootstrapping and extrapolation."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:253
msgid "Expectation"
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:255
msgid ""
"The energy of the Hamiltonian operator that VQE is working on is the "
"expectation value when evaluated with the parameterized variational form."
" To compute the expectation value VQE uses an instance of an `expectation"
" "
"<https://qiskit.org/documentation/apidoc/qiskit.aqua.operators.expectations.html>`__"
" object. Such an instance may be supplied via the ``expectation`` "
"parameter, or in the default case, where it has a value of ``None``, VQE "
"will use the `ExpectationFactory "
"<https://qiskit.org/documentation/stubs/qiskit.aqua.operators.expectations.ExpectationFactory.html>`__"
" to create itself a suitable instance based on the supplied backend."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:258
msgid ""
"For most cases letting VQE create a suitable instance is sufficient. "
"However the Qiskit Aer qasm_simulator supports a snapshot instruction "
"that can be used in conjunction with the operator expectation "
"computation. If used then the outcome is ideal, i.e. like the statevector"
" simulator, and has no shot noise. Since people normally choose the "
"qasm_simulator to have shot noise (sampling noise), and be more like a "
"real-device outcome, VQE has an ``include_custom`` flag that is passed on"
" to the ExpectationFactory. When using Aer qasm simulator, and this is "
"set ``True``, the factory will return ``AerPauliExpectation`` which uses "
"the snapshot instruction, when ``False``, default, then the regular "
"``PauliExpectation`` is returned."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:261
msgid ""
"The following example shows ``include_custom=True`` where the outcome "
"matches the statevector simulator. In fact it can be better/faster to do "
"this than use the statevector_simulator directly. This is because in the "
"latter case when the Hamiltonian is a sum of Paulis it must be converted "
"to matrix form, and this is avoided when when using the snapshot "
"instruction done when include_custom is True."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:341
msgid ""
"In case you have doubts here is the qasm_simulator again but "
"include_custom has been left to default to False. The optimization ended "
"abruptly, presumably due to the shot noise confusing the SLSQP optimizer."
" The optimal value can be seen to be wrong too, i.e. -1.098 versus the "
"correct -1.857."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:419
msgid ""
"Changing the optimizer to SPSA, which is designed to work in noisy "
"environments, gets us a better result. Though the noise has affected the "
"outcome so it’s not as accurate."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:497
msgid ""
"As mentioned above, an expectation object can be explicitly given (so the"
" internal ``ExpectationFactory`` and include_custom are never "
"used/needed. Below we create an ``AerPauliExpectation`` and pass this to "
"VQE. We can see the result matches that above where we set include_custom"
" to True and let VQE create its own expectation object."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:578
msgid ""
"By default, the ``PauliExpectation`` object, that would have be chosen "
"when include_custom is False (or when using BasicAer qasm_simultor, or a "
"real device) groups Paulis into commuting sets. This is efficient as it "
"runs less circuits to compute the expectation. However, if for some "
"reason you wanted to run a circuit for each Pauli then then grouping can "
"be turned off when constructing the PauliExpectation. You need to "
"explicitly pass in such an expectation instance to VQE to have it work "
"this way though as shown below."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:659
msgid "Gradient"
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:661
msgid ""
"Optimizers that use a gradient-based technique can be supplied with a "
"user defined gradient that will be used instead of their default gradient"
" computation which is usually done by simple finite difference. Gradients"
" are passed indirectly via to the optimizer via its ``gradient`` "
"parameter."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:663
msgid ""
"As the use of a user supplied ``gradient`` was shown in the `Monitoring "
"VQE Convergence <02_vqe_convergence.ipynb#Using-Gradient-framework>`__ "
"tutorial I will simply refer you there. Also the `Gradients framework "
"<../operators/02_gradients_framework.ipynb>`__ tutorial has much more "
"about the gradients themselves."
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:675
msgid "Quantum Instance and advanced simulation"
msgstr ""

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:677
msgid ""
"While you may be familar with passing a QuantumInstancen created from a "
"``statevector_simulator`` a ``qasm_simulator`` or real device backend, it"
" is possible to use the advanced simulation modes of Aer too when "
"applicable. For instance we can easily use the Aer `Matrix Product State "
"<../simulators/7_matrix_product_state_method.ipynb>`__ method, that has "
"the potential to scale to larger numbers of qubits."
msgstr ""

