# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-22 12:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:10
msgid ""
"This page was generated from "
"`tutorials/algorithms/07_grover_examples.ipynb`__."
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:12
msgid ""
"Run interactively in the `IBM Quantum lab <https://quantum-"
"computing.ibm.com/jupyter/tutorial/algorithms/07_grover_examples.ipynb>`_."
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:9
msgid "Grover’s algorithm examples"
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:11
msgid ""
"This notebook has examples demonstrating how to use the Qiskit `Grover "
"<https://qiskit.org/documentation/stubs/qiskit.algorithms.Grover.html>`__"
" search algorithm, with different oracles."
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:39
msgid "Finding solutions to 3-SAT problems"
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:41
msgid ""
"Let’s look at an example 3-Satisfiability (3-SAT) problem and walk-"
"through how we can use Quantum Search to find its satisfying solutions. "
"3-SAT problems are usually expressed in `Conjunctive Normal Forms (CNF) "
"<https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ and written in"
" the `DIMACS-CNF <http://www.satcompetition.org/2009/format-"
"benchmarks2009.html>`__ format. For example:"
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:70
msgid "The CNF of this 3-SAT instance contains 3 variables and 5 clauses:"
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:72
msgid ""
":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee "
"\\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1"
" \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee "
"v_3)`"
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:74
msgid ""
"It can be verified that this 3-SAT problem instance has three satisfying "
"solutions:"
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:76
msgid ""
":math:`(v_1, v_2, v_3) = (T, F, T)` or :math:`(F, F, F)` or :math:`(T, T,"
" F)`"
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:78
msgid "Or, expressed using the DIMACS notation:"
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:80
msgid "``1 -2 3``, or ``-1 -2 -3``, or ``1 2 -3``."
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:82
msgid ""
"With this example problem input, we then create the corresponding "
"``oracle`` for our ``Grover`` search. In particular, we use the "
"``PhaseOracle`` component, which supports parsing DIMACS-CNF format "
"strings and constructing the corresponding oracle circuit."
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:117
msgid "The ``oracle`` can now be used to create an Grover instance:"
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:140
msgid ""
"We can then configure the backend and run the Grover instance to get the "
"result:"
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:186
msgid ""
"As seen above, a satisfying solution to the specified 3-SAT problem is "
"obtained. And it is indeed one of the three satisfying solutions."
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:188
msgid ""
"Since we used the ``'aer_simulator'``, the complete measurement result is"
" also returned, as shown in the plot below, where it can be seen that the"
" binary strings ``000``, ``011``, and ``101`` (note the bit order in each"
" string), corresponding to the three satisfying solutions all have high "
"probabilities associated with them."
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:219
msgid "Boolean Logical Expressions"
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:221
msgid ""
"Qiskit’s ``Grover`` can also be used to perform Quantum Search on an "
"``Oracle`` constructed from other means, in addition to DIMACS. For "
"example, the ``PhaseOracle`` can actually be configured using arbitrary "
"Boolean logical expressions, as demonstrated below."
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:258
msgid ""
"In the example above, the input Boolean logical expression ``'(w ^ x) & "
"~(y ^ z) & (x & y & z)'`` should be quite self-explanatory, where ``^``, "
"``~``, and ``&`` represent the Boolean logical XOR, NOT, and AND "
"operators, respectively. It should be quite easy to figure out the "
"satisfying solution by examining its parts: ``w ^ x`` calls for ``w`` and"
" ``x`` taking different values; ``~(y ^ z)`` requires ``y`` and ``z`` be "
"the same; ``x & y & z`` dictates all three to be ``True``. Putting these "
"together, we get the satisfying solution ``(w, x, y, z) = (False, True, "
"True, True)``, which our ``Grover``\\ ’s result agrees with."
msgstr ""

