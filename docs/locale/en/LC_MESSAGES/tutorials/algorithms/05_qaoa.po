# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2023, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-17 14:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../tutorials/algorithms/05_qaoa.ipynb:10
msgid "This page was generated from `tutorials/algorithms/05_qaoa.ipynb`__."
msgstr ""

#: ../../tutorials/algorithms/05_qaoa.ipynb:9
msgid "Quantum Approximate Optimization Algorithm"
msgstr ""

#: ../../tutorials/algorithms/05_qaoa.ipynb:11
msgid ""
"Qiskit has an implementation of the Quantum Approximate Optimization "
"Algorithm `QAOA "
"<https://qiskit.org/documentation/stubs/qiskit.algorithms.minimum_eigensolvers.QAOA.html>`__"
" and this notebook demonstrates using it for a graph partition problem."
msgstr ""

#: ../../tutorials/algorithms/05_qaoa.ipynb:13
msgid ""
"Before we begin, let's import the ``annotations`` module from "
"``__future__`` to allow postponed evaluation of annotations. This enables"
" us to use simpler type hints throughout the notebook."
msgstr ""

#: ../../tutorials/algorithms/05_qaoa.ipynb:34
msgid "First we create a graph and draw it so it can be seen."
msgstr ""

#: ../../tutorials/algorithms/05_qaoa.ipynb:85
msgid ""
"The brute-force method is as follows. Basically, we exhaustively try all "
"the binary assignments. In each binary assignment, the entry of a vertex "
"is either 0 (meaning the vertex is in the first partition) or 1 (meaning "
"the vertex is in the second partition). We print the binary assignment "
"that satisfies the definition of the graph partition and corresponds to "
"the minimal number of crossing edges."
msgstr ""

#: ../../tutorials/algorithms/05_qaoa.ipynb:161
msgid ""
"The graph partition problem can be converted to an Ising Hamiltonian. "
"Qiskit has different capabilities in the Optimization module to do this. "
"Here, since the goal is to show QAOA, the module is used without further "
"explanation to create the operator. The paper `Ising formulations of many"
" NP problems <https://arxiv.org/abs/1302.5843>`__ may be of interest if "
"you would like to understand the technique further."
msgstr ""

#: ../../tutorials/algorithms/05_qaoa.ipynb:231
msgid "So lets use the QAOA algorithm to find the solution."
msgstr ""

#: ../../tutorials/algorithms/05_qaoa.ipynb:318
msgid ""
"The outcome can be seen to match to the value computed above by brute "
"force. But we can also use the classical ``NumPyMinimumEigensolver`` to "
"do the computation, which may be useful as a reference without doing "
"things by brute force."
msgstr ""

#: ../../tutorials/algorithms/05_qaoa.ipynb:375
msgid "It is also possible to use VQE as is shown below"
msgstr ""

