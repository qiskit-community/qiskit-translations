# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2023, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-10 19:25+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:10
msgid ""
"This page was generated from "
"`tutorials/algorithms/03_vqe_simulation_with_noise.ipynb`__."
msgstr ""

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:9
msgid "VQE with Qiskit Aer Primitives"
msgstr ""

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:11
msgid ""
"This notebook demonstrates how to leverage the `Qiskit Aer Primitives "
"<https://qiskit.org/documentation/apidoc/aer_primitives.html>`__ to run "
"both noiseless and noisy simulations locally. Qiskit Aer not only allows "
"you to define your own custom noise model, but also to easily create a "
"noise model based on the properties of a real quantum device. This "
"notebook will show an example of the latter, to illustrate the general "
"workflow of running algorithms with local noisy simulators."
msgstr ""

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:13
msgid ""
"For further information on the Qiskit Aer noise model, you can consult "
"the `Qiskit Aer documentation "
"<https://qiskit.org/documentation/apidoc/aer_noise.html>`__, as well the "
"tutorial for `building noise models "
"<../simulators/3_building_noise_models.ipynb>`__."
msgstr ""

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:24
msgid ""
"The algorithm of choice is once again VQE, where the task consists on "
"finding the minimum (ground state) energy of a Hamiltonian. As shown in "
"previous tutorials, VQE takes in a qubit operator as input. Here, you "
"will take a set of Pauli operators that were originally computed by "
"Qiskit Nature for the H2 molecule, using the ``SparsePauliOp`` class."
msgstr ""

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:81
msgid ""
"As the above problem is still easily tractable classically, you can use "
"``NumPyMinimumEigensolver`` to compute a reference value to compare the "
"results later."
msgstr ""

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:132
msgid ""
"The following examples will all use the same ansatz and optimizer, "
"defined as follows:"
msgstr ""

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:160
msgid "Performance *without* noise"
msgstr ""

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:162
msgid ""
"Let’s first run the ``VQE`` on the default Aer simulator without adding "
"noise, with a fixed seed for the run and transpilation to obtain "
"reproducible results. This result should be relatively close to the "
"reference value from the exact computation."
msgstr ""

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:259
msgid ""
"You captured the energy values above during the convergence, so you can "
"track the process in the graph below."
msgstr ""

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:321
msgid "Performance *with* noise"
msgstr ""

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:323
msgid ""
"Now, let’s add noise to our simulation. In particular, you will extract a"
" noise model from a (fake) device. As stated in the introduction, it is "
"also possible to create custom noise models from scratch, but this task "
"is beyond the scope of this notebook."
msgstr ""

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:325
msgid ""
"First, you need to get an actual device backend and from its "
"``configuration`` and ``properties`` you can setup a coupling map and a "
"noise model to match the device. Note: You can also use this coupling map"
" as the entanglement map for the variational form if you choose to."
msgstr ""

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:392
msgid ""
"Once the noise model is defined, you can run ``VQE`` using an Aer "
"``Estimator``, where you can pass the noise model to the underlying "
"simulator using the ``backend_options`` dictionary. Please note that this"
" simulation will take longer than the noiseless one."
msgstr ""

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:421
msgid ""
"Instead of defining a new instance of the ``VQE`` class, you can now "
"simply assign a new estimator to our previous ``VQE`` instance. As the "
"callback method will be re-used, you will also need to re-start the "
"``counts`` and ``values`` variables to be able to plot the convergence "
"graph later on."
msgstr ""

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:512
msgid "Summary"
msgstr ""

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:523
msgid ""
"In this tutorial, you compared three calculations for the H2 molecule "
"ground state. First, you produced a reference value using a classical "
"minimum eigensolver. Then, you proceeded to run ``VQE`` using the Qiskit "
"Aer ``Estimator`` with 1024 shots. Finally, you extracted a noise model "
"from a backend and used it to define a new ``Estimator`` for noisy "
"simulations. The results are:"
msgstr ""

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:576
msgid ""
"You can notice that, while the noiseless simulation’s result is closer to"
" the exact reference value, there is still some difference. This is due "
"to the sampling noise, introduced by limiting the number of shots to "
"1024. A larger number of shots would decrease this sampling error and "
"close the gap between these two values."
msgstr ""

#: ../../tutorials/algorithms/03_vqe_simulation_with_noise.ipynb:578
msgid ""
"As for the noise introduced by real devices (or simulated noise models), "
"it could be tackled through a wide variety of error mitigation "
"techniques. The `Qiskit Runtime Primitives "
"<https://qiskit.org/documentation/partners/qiskit_ibm_runtime/>`__ have "
"enabled error mitigation through the ``resilience_level`` option. This "
"option is currently available for remote simulators and real backends "
"accessed via the Runtime Primitives, you can consult `this tutorial "
"<https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials"
"/Error-Suppression-and-Error-Mitigation.html>`__ for further information."
msgstr ""

