# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2023, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-11 10:56+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../tutorials/simulators/3_building_noise_models.ipynb:10
msgid ""
"This page was generated from "
"`tutorials/simulators/3_building_noise_models.ipynb`__."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:9
msgid "Building Noise Models"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:21
msgid "Introduction"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:23
msgid ""
"This notebook introduces how to use the Qiskit Aer ``noise`` module to "
"build custom noise models for noisy simulations."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:53
msgid "Qiskit Aer Noise Module"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:55
msgid ""
"The Qiskit Aer ``noise`` module contains Python classes to build "
"customized noise models for simulation. There are three key classes:"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:57
msgid ""
"The ``NoiseModel`` class which stores a noise model used for noisy "
"simulation."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:58
msgid ""
"The ``QuantumError`` class which describes CPTP gate errors. These can be"
" applied:"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:60
msgid "After *gate* or *reset* instructions"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:61
msgid "Before *measure* instructions."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:63
msgid "The ``ReadoutError`` class which describes classical readout errors."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:75
msgid "Quantum Errors"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:77
msgid ""
"Rather than deal with the ``QuantumError`` object directly, many helper "
"functions exist to automatically generate a specific type of "
"parameterized quantum error. These are contained in the ``noise`` module "
"and include functions for many common errors types used in quantum "
"computing research. The function names and the type of error they return "
"are:"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:80
msgid "Standard error function"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:80
msgid "Details"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:82
msgid "``kraus_error``"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:82
msgid ""
"a general n-qubit CPTP error channel given as a list of Kraus matrices "
":math:`[K_0, ...]`."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:84
msgid "``mixed_unitary_error``"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:84
msgid ""
"an n-qubit mixed unitary error given as a list of unitary matrices and "
"probabilities :math:`[(U_0, p_0),...]`."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:86
msgid "``coherent_unitary_error``"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:86
msgid ""
"an n-qubit coherent unitary error given as a single unitary matrix "
":math:`U`."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:88
msgid "``pauli_error``"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:88
msgid ""
"an n-qubit Pauli error channel (mixed unitary) given as a list of Pauli's"
" and probabilities :math:`[(P_0, p_0),...]`"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:90
msgid "``depolarizing_error``"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:90
msgid ""
"an n-qubit depolarizing error channel parameterized by a depolarization "
"probability :math:`p`."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:92
msgid "``reset_error``"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:92
msgid ""
"a single-qubit reset error parameterized by a probabilities :math:`p_0, "
"p_1` of resetting to the :math:`|0\\rangle`, :math:`|1\\rangle` state."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:94
msgid "``thermal_relaxation_error``"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:94
msgid ""
"a single qubit thermal relaxation channel parameterized by relaxation "
"time constants :math:`T_1`, :math:`T_2`, gate time :math:`t`, and excited"
" state thermal population :math:`p_1`."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:96
msgid "``phase_amplitude_damping_error``"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:96
msgid ""
"A single-qubit generalized combined phase and amplitude damping error "
"channel given by an amplitude damping parameter :math:`\\lambda`, a phase"
" damping parameter :math:`\\gamma`, and an excited state thermal "
"population :math:`p_1`."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:98
msgid "``amplitude_damping_error``"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:98
msgid ""
"A single-qubit generalized amplitude damping error channel given by an "
"amplitude damping parameter :math:`\\lambda`, and an excited state "
"thermal population :math:`p_1`."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:100
msgid "``phase_damping_error``"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:100
msgid ""
"A single-qubit phase damping error channel given by a phase damping "
"parameter :math:`\\gamma`"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:104
msgid "Combining quantum errors"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:106
msgid ""
"``QuantumError`` instances can be combined by using composition, tensor "
"product, and tensor expansion (reversed order tensor product) to produce "
"new ``QuantumErrors`` as:"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:108
msgid ""
"Composition: :math:`\\cal{E}(\\rho)=\\cal{E_2}(\\cal{E_1}(\\rho))` as "
"``error = error1.compose(error2)``"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:109
msgid ""
"Tensor product: :math:`\\cal{E}(\\rho) "
"=(\\cal{E_1}\\otimes\\cal{E_2})(\\rho)` as ``error "
"error1.tensor(error2)``"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:110
msgid ""
"Expand product: :math:`\\cal{E}(\\rho) "
"=(\\cal{E_2}\\otimes\\cal{E_1})(\\rho)` as ``error "
"error1.expand(error2)``"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:122
msgid "Example"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:124
#, python-format
msgid "For example to construct a 5% single-qubit Bit-flip error:"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:419
msgid "Converting to and from QuantumChannel operators"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:421
msgid ""
"We can also convert back and forth between ``QuantumError`` objects in "
"Qiskit Aer and ``QuantumChannel`` objects in Qiskit Terra."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:608
msgid "Readout Error"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:610
msgid ""
"Classical readout errors are specified by a list of assignment "
"probabilities vectors :math:`P(A|B)`:"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:612
msgid ":math:`A` is the *recorded* classical bit value"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:613
msgid ":math:`B` is the *true* bit value returned from the measurement"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:615
msgid "E.g. for 1 qubits: $ P(A|B) = [P(A|0), P(A|1)]$."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:668
msgid ""
"Readout errors may also be combined using ``compose``, ``tensor`` and "
"``expand`` like with quantum errors."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:680
msgid "Adding errors to a Noise Model"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:682
msgid ""
"When adding a quantum error to a noise model we must specify the type of "
"*instruction* that it acts on, and what qubits to apply it to. There are "
"two cases for Quantum Errors:"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:684
msgid "All-qubit quantum error"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:685
msgid "Specific qubit quantum error"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:688
msgid "1. All-qubit quantum error"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:690
msgid ""
"This applies the same error to any occurrence of an instruction, "
"regardless of which qubits it acts on."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:692
msgid ""
"It is added as ``noise_model.add_all_qubit_quantum_error(error, "
"instructions)``:"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:755
msgid "2. Specific qubit quantum error"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:757
msgid ""
"This applies the error to any occurrence of an instruction acting on a "
"specified list of qubits. Note that the order of the qubit matters: For a"
" 2-qubit gate an error applied to qubits [0, 1] is different to one "
"applied to qubits [1, 0] for example."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:759
msgid ""
"It is added as ``noise_model.add_quantum_error(error, instructions, "
"qubits)``:"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:825
msgid "Note on non-local qubit quantum error"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:827
msgid ""
"``NoiseModel`` does not support addition of non-local qubit quantum "
"errors. They should be handled outside of ``NoiseModel``. That suggests "
"you should write your own transpiler pass (``TransformationPass``) and "
"run the pass just before running the simulator if you need to insert your"
" quantum errors into your circuit under your own conditions. See "
"``noise.passes.LocalNoisePass`` for example of how to implement such a "
"transpiler pass."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:839
msgid "Executing a noisy simulation with a noise model"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:841
msgid ""
"The command ``AerSimulator(noise_model=noise_model)`` returns a simulator"
" configured to the given noise model. In addition to setting the "
"simulator's noise model, it also overrides the simulator's basis gates, "
"according to the gates of the noise model."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:853
msgid "Noise Model Examples"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:855
msgid ""
"We will now give some examples of noise models. For our demonstrations we"
" will use a simple test circuit generating a n-qubit GHZ state:"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:940
msgid "Ideal Simulation"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:974
msgid "Noise Example 1: Basic bit-flip error noise model"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:976
msgid ""
"Lets consider a simple toy noise model example common in quantum "
"information theory research:"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:978
msgid ""
"When applying a single qubit gate, flip the state of the qubit with "
"probability ``p_gate1``."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:979
msgid "When applying a 2-qubit gate apply single-qubit errors to each qubit."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:980
msgid ""
"When resetting a qubit reset to 1 instead of 0 with probability "
"``p_reset``."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:981
msgid ""
"When measuring a qubit, flip the state of the qubit with probability "
"``p_meas``."
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:1054
#: ../../tutorials/simulators/3_building_noise_models.ipynb:1198
msgid "Executing the noisy simulation"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:1096
msgid "Example 2: T1/T2 thermal relaxation"
msgstr ""

#: ../../tutorials/simulators/3_building_noise_models.ipynb:1098
msgid ""
"Now consider a more realistic error model based on thermal relaxation "
"with the qubit environment: \\* Each qubit is parameterized by a thermal "
"relaxation time constant :math:`T_1` and a dephasing time constant "
":math:`T_2`. \\* Note that we must have :math:`T_2 \\le 2 T_1`. \\* Error"
" rates on instructions are determined by gate times and qubit "
":math:`T_1`, :math:`T_2` values."
msgstr ""

