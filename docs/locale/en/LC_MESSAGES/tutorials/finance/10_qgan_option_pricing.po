# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-05 21:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../tutorials/finance/10_qgan_option_pricing.ipynb:10
msgid ""
"This page was generated from "
"`tutorials/finance/10_qgan_option_pricing.ipynb`__."
msgstr ""

#: ../../tutorials/finance/10_qgan_option_pricing.ipynb:9
msgid "**Option Pricing with qGANs**"
msgstr ""

#: ../../tutorials/finance/10_qgan_option_pricing.ipynb:12
msgid "Introduction"
msgstr ""

#: ../../tutorials/finance/10_qgan_option_pricing.ipynb:14
msgid ""
"In this notebook, we discuss how a Quantum Machine Learning Algorithm, "
"namely a quantum Generative Adversarial Network (qGAN), can facilitate "
"the pricing of a European call option. More specifically, a qGAN can be "
"trained such that a quantum circuit models the spot price of an asset "
"underlying a European call option. The resulting model can then be "
"integrated into a Quantum Amplitude Estimation based algorithm to "
"evaluate the expected payoff - see `European Call Option Pricing "
"<3_european_call_option_pricing.ipynb>`__. For further details on "
"learning and loading random distributions by training a qGAN please refer"
" to Quantum Generative Adversarial Networks for Learning and Loading "
"Random Distributions. Zoufal, Lucchi, Woerner. 2019."
msgstr ""

#: ../../tutorials/finance/10_qgan_option_pricing.ipynb:50
msgid "Uncertainty Model"
msgstr ""

#: ../../tutorials/finance/10_qgan_option_pricing.ipynb:52
msgid ""
"The Black-Scholes model assumes that the spot price at maturity "
":math:`S_T` for a European call option is log-normally distributed. Thus,"
" we can train a qGAN on samples from a log-normal distribution and use "
"the result as an uncertainty model underlying the option. In the "
"following, we construct a quantum circuit that loads the uncertainty "
"model. The circuit output reads"
msgstr ""

#: ../../tutorials/finance/10_qgan_option_pricing.ipynb:54
msgid ""
"\\big| g_{\\theta}\\rangle = \\sum_{j=0}^{2^n-1}\\sqrt{p_{\\theta}^{j}} "
"\\big| j \\rangle ,\n"
"\n"
msgstr ""

#: ../../tutorials/finance/10_qgan_option_pricing.ipynb:56
msgid ""
"where the probabilities :math:`p_{\\theta}^{j}`, for :math:`j\\in "
"\\left\\{0, \\ldots, {2^n-1} \\right\\}`, represent a model of the target"
" distribution."
msgstr ""

#: ../../tutorials/finance/10_qgan_option_pricing.ipynb:108
#: ../../tutorials/finance/10_qgan_option_pricing.ipynb:199
msgid "Evaluate Expected Payoff"
msgstr ""

#: ../../tutorials/finance/10_qgan_option_pricing.ipynb:110
msgid ""
"Now, the trained uncertainty model can be used to evaluate the "
"expectation value of the option's payoff function with Quantum Amplitude "
"Estimation."
msgstr ""

#: ../../tutorials/finance/10_qgan_option_pricing.ipynb:143
msgid "Plot the probability distribution"
msgstr ""

#: ../../tutorials/finance/10_qgan_option_pricing.ipynb:145
msgid ""
"Next, we plot the trained probability distribution and, for reasons of "
"comparison, also the target probability distribution."
msgstr ""

#: ../../tutorials/finance/10_qgan_option_pricing.ipynb:201
msgid ""
"Now, the trained uncertainty model can be used to evaluate the "
"expectation value of the option's payoff function analytically and with "
"Quantum Amplitude Estimation."
msgstr ""

