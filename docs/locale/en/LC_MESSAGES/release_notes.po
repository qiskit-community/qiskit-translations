# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2023, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit 0.45\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-03 12:57+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../release_notes.rst:5
msgid "Release Notes"
msgstr ""

#: ../../release_notes.rst:7
msgid ""
"This page contains the release notes for Qiskit, starting from the point "
"at which the legacy \"elements\" structure was completely removed.  For "
"release notes stretching back through the old \"meta-package\" structure "
"of Qiskit, see :ref:`legacy-release-notes`."
msgstr ""

#: ../../../<reno.sphinxext branch>:5 current
msgid "0.45.0"
msgstr ""

#: ../../../<reno.sphinxext branch>:10 current
msgid "Prelude"
msgstr ""

#: ../../../<reno.sphinxext branch>:14 current
msgid ""
"Qiskit 0.45.0 is the last feature release before 1.0. It prepares the "
"ground for the API changes we are planning for our first major version "
"release, including many removals of previously deprecated functionality "
"as well as a series of new deprecations."
msgstr ""

#: ../../../<reno.sphinxext branch>:19 current
msgid ""
"If your project depends on Qiskit, it may rely on functionality that will"
" no longer be supported in Qiskit 1.0. For this reason, we recommend that"
" you proactively cap your supported version to ``<1.0``."
msgstr ""

#: ../../../<reno.sphinxext branch>:23 current
msgid "Some feature highlights of Qiskit 0.45.0 are:"
msgstr ""

#: ../../../<reno.sphinxext branch>:25 current
msgid ""
"Starting in this release, all unparametrized gates in the Qiskit standard"
" circuit library are now **singletons**. By default, these gates share a "
"single instance in memory, so once a gate of a specific type, let's say "
":class:`.XGate`, is instantiated, any subsequent instances of "
":class:`.XGate` will be a reference to the first one. This results in a "
"reduced memory usage and construction overhead when using multiple gates "
"of the same type in a circuit. To realize this feature, new base classes "
"have been introduced: :class:`.SingletonInstruction` and "
":class:`.SingletonGate`. See feature notes for more details."
msgstr ""

#: ../../../<reno.sphinxext branch>:33 current
msgid ""
"We have added a new **generic pass manager interface** that can be found "
"in the new :mod:`qiskit.passmanager` module. This is a generalization of "
"the pass manager that was used to build the Qiskit transpiler, and it "
"introduces a generic framework to enable users to create new pass "
"managers that use different intermediate representations (IRs). The "
"module includes a generic pass manager base class, flow controllers, and "
"the necessary infrastructure to manage the execution of pass manager "
"tasks. The new interface was used to rebuild the existing pass manager in"
" the :mod:`qiskit.transpiler` module, cleaning up technical debt in the "
"code, and improving usability and performance. See feature and upgrade "
"notes for more details."
msgstr ""

#: ../../../<reno.sphinxext branch>:42 current
msgid ""
"0.45.0 allows users to better interact with the **layout permutations** "
"performed by the transpiler. The data contained in the "
":class:`.TranspileLayout` class is now more accessible through a series "
"of new methods and attributes. And a new "
":meth:`.SparsePauliOp.apply_layout` method allows to apply a specific "
"layout permutation to a :class:`~.SparsePauliOp` observable that was "
"built for an input circuit to the transpiler. See feature notes for more "
"details."
msgstr ""

#: ../../../<reno.sphinxext branch>:48 current
msgid ""
"Finally, we have introduced **annotated operations** with the new "
":class:`.AnnotatedOperation` class, which allows to formulate complex "
"circuit instructions as a base instruction with a set of modifiers. For "
"example, instead of a specific operation type that implements the "
"controlled inverse of a :class:`.RXGate`, we can now use an annotated "
":class:`.RXGate` with inverse and control attributes. See feature notes "
"for more details."
msgstr ""

#: ../../../<reno.sphinxext branch>:58 branch>:1416 branch>:2546 current
msgid "Bug Fixes"
msgstr ""

#: ../../../<reno.sphinxext branch>:62 current
msgid ""
"The use of the (deprecated) ``Optimizer`` class on :class:`~.AQC` did not"
" have a non-deprecated alternative path, which should have been "
"introduced in Qiskit 0.44. It now accepts a callable that implements the "
":class:`~.Minimizer` protocol, as explicitly stated in the deprecation "
"warning. The callable can look like the following example:"
msgstr ""

#: ../../../<reno.sphinxext branch>:79 current
msgid ""
"Fixed an issue with the :class:`.Barrier` class. When adding a "
":class:`.Barrier` instance to a :class:`.QuantumCircuit` with the "
":meth:`.QuantumCircuit.append` method previously there was no validation "
"that the size of the barrier matched the qargs specified."
msgstr ""

#: ../../../<reno.sphinxext branch>:86 current
msgid ""
"The :class:`.BlockCollapser` transpiler pass will now correctly handle "
"circuits that contain more than one condition on the same classical "
"register."
msgstr ""

#: ../../../<reno.sphinxext branch>:91 current
msgid ""
":class:`.BlueprintCircuit` subclasses will now behave correctly when the "
"semi-public method :meth:`.QuantumCircuit._append` is used with the "
"blueprint in an unbuilt state, *i.e.* the circuit will be built before "
"attempting the append."
msgstr ""

#: ../../../<reno.sphinxext branch>:97 current
msgid ""
"Adjusted zoom, fontsize, and margins in :func:`.plot_state_city` to fit "
"the plot better for more figure sizes. Corrected the Z-ordering behavior "
"of bars and the zero-amplitude plane, and corrected display of negative "
"real value bars."
msgstr ""

#: ../../../<reno.sphinxext branch>:105 branch>:1547 current
msgid "Other Notes"
msgstr ""

#: ../../../<reno.sphinxext branch>:109 current
msgid ""
"Modified the behavior of the :class:`.VF2Layout` and "
":class:`.VF2PostLayout` transpiler passes, which would previously run "
"their internal scoring using multithreading if the input circuits were "
"sufficiently large. The multithreading usage has now been removed from "
"the passes, as it was shown to cause a performance regression instead of "
"an improvement like originally intended."
msgstr ""

#: ../../../<reno.sphinxext branch>:120 current
msgid "0.45.0rc1"
msgstr ""

#: ../../../<reno.sphinxext branch>:125 current
msgid "Circuits Features"
msgstr ""

#: ../../../<reno.sphinxext branch>:129 current
msgid ""
"Added a new class :class:`~.AnnotatedOperation` that is a subclass of "
":class:`~.Operation` and represents some \"base operation\" modified by a"
" list of \"modifiers\". The base operation is of type "
":class:`~.Operation` and the currently supported modifiers are of types "
":class:`~.InverseModifier`, :class:`~.ControlModifier` and "
":class:`~.PowerModifier`. The modifiers are applied in the order they "
"appear in the list."
msgstr ""

#: ../../../<reno.sphinxext branch>:136 current
msgid "As an example::"
msgstr ""

#: ../../../<reno.sphinxext branch>:148 current
msgid ""
"is logically equivalent to ``gate = "
"SGate().inverse().control(1).inverse().power(2)``, or to::"
msgstr ""

#: ../../../<reno.sphinxext branch>:156 current
msgid ""
"However, this equivalence is only logical, the internal representations "
"are very different."
msgstr ""

#: ../../../<reno.sphinxext branch>:159 current
msgid ""
"For convenience, a single modifier can be also passed directly, thus "
"``AnnotatedGate(SGate(), [ControlModifier(1)])`` is equivalent to "
"``AnnotatedGate(SGate(), ControlModifier(1))``."
msgstr ""

#: ../../../<reno.sphinxext branch>:163 current
msgid ""
"A distinguishing feature of an annotated operation is that circuit "
"definition is not constructed when the operation is declared, and instead"
" happens only during transpilation, specifically during the "
":class:`~.HighLevelSynthesis` transpiler pass."
msgstr ""

#: ../../../<reno.sphinxext branch>:167 current
msgid ""
"An annotated operation can be also viewed as a \"higher-level\" or a "
"\"more abstract\" object that can be added onto a quantum circuit. This "
"enables writing transpiler optimization passes that make use of this "
"higher-level representation, for instance removing a gate that is "
"immediately followed by its inverse (note that this reduction might not "
"be possible if both the gate and its inverse are first synthesized into "
"simpler gates)."
msgstr ""

#: ../../../<reno.sphinxext branch>:174 current
msgid ""
"In a sense, an annotated operation can be viewed as an extension of "
":class:`~.ControlledGate`, which also allows adding control to the base "
"operation. In the future we are planning to replace "
":class:`~.ControlledGate` by :class:`~.AnnotatedOperation`. Similar to "
"controlled gates, the transpiler synthesizes annotated operations before "
"layout/routing takes place."
msgstr ""

#: ../../../<reno.sphinxext branch>:180 current
msgid ""
"As of now, the annotated operations can appear only in the top-level of a"
" quantum circuit, that is they cannot appear inside of the recursively-"
"defined ``definition`` circuit. We are planning to remove this limitation"
" later."
msgstr ""

#: ../../../<reno.sphinxext branch>:186 current
msgid ""
"Added a new option ``max_num_qubits`` to "
":meth:`qiskit.circuit.CommutationChecker.commute` that specifies the "
"maximum number of qubits to consider for the more expensive matrix "
"multiplication-based commutativity check. This avoids trying to "
"internally allocate arrays of size :math:`2^N \\times 2^N`. Simpler "
"versions of commutativity check (for instance, two quantum operations "
"commute when they are over disjoint sets of qubits) continue to work "
"without this limit."
msgstr ""

#: ../../../<reno.sphinxext branch>:195 current
msgid ""
"Added a new argument, ``check_input``, to the constructor for the "
":class:`~.UnitaryGate` class. This flag is used to disable the default "
"initialization checks that input object represents a unitary matrix. This"
" can be used to speed up the creation of :class:`~.UnitaryGate` objects "
"if you know the input is already a unitary matrix. This new option should"
" only be used in these cases because if it's set to ``False`` and the "
"input is not unitary this will result in an invalid ``UnitaryGate`` "
"object."
msgstr ""

#: ../../../<reno.sphinxext branch>:206 current
msgid ""
"A new method :meth:`.Parameter.assign` has been added. This method "
"primarily serves as a fast path to improve the performance of "
":meth:`.QuantumCircuit.assign_parameters` for the common case of circuits"
" that predominantly contain \"expressions\" that are actually just single"
" parameters to be assigned later."
msgstr ""

#: ../../../<reno.sphinxext branch>:213 current
msgid ""
"The performance of :meth:`.QuantumCircuit.assign_parameters` when "
"assigning a single parameter of a circuit that involves many parameters "
"has been improved."
msgstr ""

#: ../../../<reno.sphinxext branch>:218 current
msgid ""
"Introduced two new classes, :class:`.SingletonInstruction` and "
":class:`~.SingletonGate`, which are subclasses of "
":class:`~.circuit.Instruction` and :class:`~.Gate` respectively, that use"
" a single instance for all objects of that type. The intent behind this "
"class is to minimize the memory and construction overhead of using "
"multiple gates in a circuit with the tradeoff of having global shared "
"state. For this reason this class is only applicable to gates that do not"
" have any unique and/or mutable state stored in an instance. For example,"
" the best example of this is :class:`.XGate` doesn't contain any state "
"and could leverage :class:`~.SingletonGate` (and does starting in this "
"release), while :class:`~.RXGate` stores an angle parameter in an "
"instance and thus can not use :class:`~.SingletonGate` because a single "
"shared global instance can not represent the parameter values."
msgstr ""

#: ../../../<reno.sphinxext branch>:231 current
msgid ""
"The other potential issue to be aware of when using singleton classes is "
"that the :class:`~.circuit.Instruction` data model supports some mutable "
"state. Specifically, the :attr:`~.Instruction.label`, "
":attr:`~.Instruction.duration`, :attr:`~.Instruction.unit`, and "
":attr:`~.Instruction.condition` attributes are all accessible and mutable"
" in the :class:`~.circuit.Instruction` and its direct subclasses. "
"However, this is incompatible with having a shared object via "
":class:`~.SingletonInstruction`. For instances of "
":class:`~.SingletonInstruction`, setting these attributes directly is not"
" allowed and it will raise an exception. If they are needed for a "
"particular instance, you must ensure you have a mutable instance using "
":meth:`.Instruction.to_mutable` (or use :meth:`.Instruction.c_if` for "
":attr:`~.Instruction.condition`). ``label``, ``duration`` and ``unit`` "
"can also be given as keyword arguments during class construction."
msgstr ""

#: ../../../<reno.sphinxext branch>:246 current
msgid ""
"The following standard library gates are now instances of "
":class:`~.SingletonGate`:"
msgstr ""

#: ../../../<reno.sphinxext branch>:249 branch>:863 current
msgid ":class:`~.DCXGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:250 branch>:864 current
msgid ":class:`~.ECRGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:251 branch>:865 current
msgid ":class:`~.HGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:252 branch>:866 current
msgid ":class:`~.IGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:253 branch>:867 current
msgid ":class:`~.iSwapGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:254 branch>:868 current
msgid ":class:`~.SGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:255 branch>:869 current
msgid ":class:`~.SdgGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:256 branch>:870 current
msgid ":class:`~.SwapGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:257 branch>:871 current
msgid ":class:`~.SXGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:258 branch>:872 current
msgid ":class:`~.SXdgGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:259 branch>:873 current
msgid ":class:`~.TGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:260 branch>:874 current
msgid ":class:`~.TdgGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:261 branch>:875 current
msgid ":class:`~.XGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:262 branch>:876 current
msgid ":class:`~.RCCXGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:263 branch>:877 current
msgid ":class:`~.RC3XGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:264 branch>:878 current
msgid ":class:`~.YGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:265 branch>:879 current
msgid ":class:`~.ZGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:267 current
msgid ""
"This means that if these classes are instantiated as (e.g.) "
":class:`.XGate()` using all the constructor defaults, they will all share"
" a single global instance. This results in a large reduction in the "
"memory overhead for > 1 object of these types and significantly faster "
"object construction time."
msgstr ""

#: ../../../<reno.sphinxext branch>:274 current
msgid ""
"Introduced a new class :class:`~.SingletonControlledGate` which is a "
"subclass of :class:`~.ControlledGate` that uses a single instance for all"
" objects of that type. The intent behind this class is to minimize the "
"memory and construction overhead of using multiple gates in a circuit "
"with the tradeoff of having a global shared state. For this reason, this "
"class is only applicable to gates that do not have any unique and/or "
"mutable state stored in an instance. For example, a :class:`.CXGate` "
"doesn't contain any state and thus can leverage "
":class:`~.SingletonControlledGate` (and does starting in this release). "
"In contrast, :class:`~.CRXGate` stores an angle parameter as part of its "
"instance data and thus can not use :class:`~.SingletonControlledGate`."
msgstr ""

#: ../../../<reno.sphinxext branch>:285 current
msgid ""
"The other potential issue to be aware of when using "
":class:`~.SingletonControlledGate` is that the original data model of "
":class:`~.ControlledGate` supports mutation. Specifically, the "
":attr:`~.ControlledGate.label`, :attr:`~.ControlledGate.duration`, "
":attr:`~.ControlledGate.unit`, :attr:`~.ControlledGate.condition`, and "
":attr:`~.ControlledGate.ctrl_state` attributes are all accessible and "
"mutable in the :class:`~.ControlledGate`, but mutation of these "
"attributes on :class:`~.SingletonControlledGate` subclasses is not "
"allowed, and will raise an exception. These attributes can be customized "
"but only at creation time (i.e. via the constructor). In that case, the "
"newly constructed gate will be a separate instance with the custom state "
"instead of the globally shared instance. You can also use the "
":meth:`.SingletonControlledGate.to_mutable` method to get a mutable copy "
"of a gate object and then mutate the attributes like you would on any "
"other :class:`~.circuit.Instruction` object."
msgstr ""

#: ../../../<reno.sphinxext branch>:300 current
msgid ""
"The following standard library gates are now instances of "
":class:`~.SingletonControlledGate`:"
msgstr ""

#: ../../../<reno.sphinxext branch>:303 branch>:880 current
msgid ":class:`~.CHGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:304 branch>:881 current
msgid ":class:`~.CSGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:305 branch>:882 current
msgid ":class:`~.CSdgGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:306 branch>:883 current
msgid ":class:`~.CSwapGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:307 branch>:884 current
msgid ":class:`~.CSXGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:308 branch>:885 current
msgid ":class:`~.CXGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:309 branch>:886 current
msgid ":class:`~.CCXGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:310 branch>:887 current
msgid ":class:`~.C3SXGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:311 branch>:888 current
msgid ":class:`~.C3XGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:312 branch>:889 current
msgid ":class:`~.C4XGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:313 branch>:890 current
msgid ":class:`~.CYGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:314 branch>:891 current
msgid ":class:`~.CZGate`"
msgstr ""

#: ../../../<reno.sphinxext branch>:316 current
msgid ""
"This means that unless a ``label``, ``condition``, ``duration``, "
"``unit``, or ``ctrl_state`` are set on the instance at creation time they"
" will all share a single global instance whenever a new gate object is "
"created. This results in a large reduction in the memory overhead for > 1"
" object of these types."
msgstr ""

#: ../../../<reno.sphinxext branch>:323 current
msgid ""
"Added a new method :meth:`.Instruction.to_mutable` and attribute "
":attr:`.Instruction.mutable` which is used to get a mutable copy and "
"check whether an :class:`~.circuit.Instruction` object is mutable. With "
"the introduction of :class:`~.SingletonGate` these methods can be used to"
" have a unified interface to deal with the mutablitiy of instruction "
"objects."
msgstr ""

#: ../../../<reno.sphinxext branch>:331 current
msgid ""
"Added an attribute :attr:`.Instruction.base_class`, which gets the "
"\"base\" type of an instruction.  Many instructions will satisfy "
"``type(obj) == obj.base_class``, however the singleton instances of "
":class:`.SingletonInstruction` and :class:`.SingletonGate` are subclasses"
" of their base type.  You can use the new "
":attr:`~.Instruction.base_class` attribute to find the base class of "
"these.  See the attribute documentation for considerations on when other "
"subclasses may modify their :attr:`~.Instruction.base_class`, and what "
"this means for execution."
msgstr ""

#: ../../../<reno.sphinxext branch>:340 current
msgid ""
"Added the :class:`.UnitaryOverlap` circuit to the Qiskit circuit library."
" It can be used to compute the fidelity of states generated by unitaries "
"by looking at the probability of the output distribution in the all-zeros"
" state or, equivalently, by computing the expectation value of the "
"projector onto the all-zeros state.  This is useful in applications such "
"as machine learning, and computing excited states in quantum chemistry, "
"to name a few."
msgstr ""

#: ../../../<reno.sphinxext branch>:351 current
msgid "Pulse Features"
msgstr ""

#: ../../../<reno.sphinxext branch>:355 current
msgid "Enabled circuit-to-pulse scheduling using :class:`~.BackendV2`."
msgstr ""

#: ../../../<reno.sphinxext branch>:369 current
msgid ""
"Since :class:`.BackendV2` was not supported by the "
":func:`~qiskit.compiler.schedule` function, this caused the "
":meth:`~.schedule` method to error out when the ``backend`` argument was "
"supplied with an instance of :class:`.BackendV2`. Refer to `#10837 "
"<https://github.com/Qiskit/qiskit/issues/10837>`_ for more information."
msgstr ""

#: ../../../<reno.sphinxext branch>:378 current
msgid "OpenQASM Features"
msgstr ""

#: ../../../<reno.sphinxext branch>:382 current
msgid ""
"The OpenQASM 2 module :mod:`qiskit.qasm2` has gained the export functions"
" :func:`~.qasm2.dump` and :func:`~.qasm2.dumps`.  These are used in a "
"very similar manner to the previous :meth:`.QuantumCircuit.qasm`::"
msgstr ""

#: ../../../<reno.sphinxext branch>:393 current
msgid ""
"The new functions stem from the same code as "
":meth:`.QuantumCircuit.qasm`, which will slowly be phased out and "
"replaced with the new paths, to provide a more coherent interface when "
"compared to the OpenQASM 3 (:mod:`qiskit.qasm3`) and QPY "
"(:mod:`qiskit.qpy`) modules.  This is particularly important since the "
"method name :meth:`~.QuantumCircuit.qasm` gave no indication of the "
"OpenQASM version, and since it was originally added, Qiskit has gained "
"several serialisation modules that could easily become confused."
msgstr ""

#: ../../../<reno.sphinxext branch>:406 current
msgid "QPY Features"
msgstr ""

#: ../../../<reno.sphinxext branch>:410 current
msgid ""
"QPY now supports the use of symengine-native serialization and "
"deserialization for objects of type ``ParameterExpression`` as well as "
"symbolic expressions in Pulse schedule blocks. This is a faster "
"serialization alternative, but not supported in all platforms. Please "
"check that your target platform is supported by the symengine library "
"before setting this option, as it will be **required** by qpy to "
"deserialize the payload."
msgstr ""

#: ../../../<reno.sphinxext branch>:417 current
msgid ""
"The feature can be enabled through the ``use_symengine`` parameter in "
":meth:`.qpy.dump`:"
msgstr ""

#: ../../../<reno.sphinxext branch>:443 current
msgid "Quantum Information Features"
msgstr ""

#: ../../../<reno.sphinxext branch>:447 current
msgid ""
"Added :meth:`.Clifford.from_linear_function` and "
":meth:`.Clifford.from_permutation` methods that create a "
":class:`.Clifford` object from :class:`~.LinearFunction` and from "
":class:`~.PermutationGate` respectively. As a consequence, a "
":class:`.Clifford` can now be constructed directly from a "
":class:`~.LinearFunction`, a :class:`.PermutationGate`, or a quantum "
"circuit containing such gates."
msgstr ""

#: ../../../<reno.sphinxext branch>:455 current
msgid ""
"The :class:`.Operator` class now has a :meth:`~.Operator.draw` method "
"allowing it to be displayed as a text matrix, IPython LaTeX object or "
"LaTeX source. The default draw type still is the ASCII ``__repr__`` of "
"the operator."
msgstr ""

#: ../../../<reno.sphinxext branch>:461 current
msgid ""
"Added a new method, :meth:`~.SparsePauliOp.apply_layout`, to the "
":class:`~.SparsePauliOp` class. This method is used to apply a "
":class:`~.TranspileLayout` layout from the transpiler to a "
":class:`~.SparsePauliOp` observable that was built for an input circuit "
"to the transpiler. This enables working with :class:`~.BaseEstimator` "
"implementations and local transpilation more easily. For example::"
msgstr ""

#: ../../../<reno.sphinxext branch>:485 current
msgid ""
"where an input circuit is transpiled locally before it's passed to "
":class:`~.BaseEstimator.run`. Transpilation expands the original circuit "
"from 2 to 7 qubits (the size of ``backend``) and permutes its layout, "
"which is then applied to ``H1`` using "
":meth:`~.SparsePauliOp.apply_layout` to reflect the transformations "
"performed by :func:`~.transpile`."
msgstr ""

#: ../../../<reno.sphinxext branch>:495 branch>:2073 current
msgid "Transpiler Features"
msgstr ""

#: ../../../<reno.sphinxext branch>:499 current
msgid ""
"The :class:`.HighLevelSynthesis` class is extended to synthesize circuits"
" with objects of type :class:`~.AnnotatedOperation`."
msgstr ""

#: ../../../<reno.sphinxext branch>:504 current
msgid ""
"Added a new analysis :class:`.SabrePreLayout` pass that creates a "
"starting layout for :class:`.SabreLayout`, writing the layout into the "
"property set value ``sabre_starting_layouts``."
msgstr ""

#: ../../../<reno.sphinxext branch>:508 current
msgid ""
"The pass works by augmenting the coupling map with more and more "
"\"extra\" edges until :class:`.VF2Layout` succeeds to find a perfect "
"graph isomorphism. More precisely, the augmented coupling map contains "
"edges between nodes that are within a given distance ``d`` in the "
"original coupling map, and the value of ``d`` is increased until an "
"isomorphism is found. The pass also optionally minimizes the number of "
"extra edges involved in the layout until a local minimum is found. This "
"involves removing extra edges and calling :class:`.VF2Layout` to check if"
" an isomorphism still exists."
msgstr ""

#: ../../../<reno.sphinxext branch>:517 current
msgid ""
"Here is an example of calling the :class:`.SabrePreLayout` before "
":class:`.SabreLayout`::"
msgstr ""

#: ../../../<reno.sphinxext branch>:541 current
msgid ""
"Added the arguments ``coupling_map``, ``target`` and "
"``use_qubit_indices`` to :class:`.HighLevelSynthesis` transpiler pass. "
"The argument ``target`` specifies the target backend, allowing the "
"synthesis plugins called within the pass to access all target-specific "
"information, such as the coupling map and the supported gate set. The "
"argument ``coupling_map`` only specifies the coupling map, and is only "
"used when ``target`` is not specified. The argument ``use_qubit_indices``"
" indicates whether the high-level-synthesis pass is running before or "
"after the layout is set, that is, whether the qubit indices of higher-"
"level-objects correspond to qubit indices on the target backend."
msgstr ""

#: ../../../<reno.sphinxext branch>:553 current
msgid ""
"Added the arguments ``coupling_map``, ``target`` and ``qubits`` to "
":class:`.HighLevelSynthesisPlugin`. The positional argument ``target`` "
"specifies the target backend, allowing the plugin to access all target-"
"specific information, such as the coupling map, the supported gate set, "
"and so on. The positional argument ``coupling_map`` only specifies the "
"coupling map, and is only used when ``target`` is not specified. The "
"positional argument ``qubits`` specifies the list of qubits over which "
"the higher-level-object is defined, in case the synthesis is done on the "
"physical circuit. The value of ``None`` indicates that the layout has not"
" yet been chosen."
msgstr ""

#: ../../../<reno.sphinxext branch>:563 current
msgid ""
"This enables a cleaner separation of synthesis plugins options into "
"general interface options for plugins (that is, ``coupling_map``, "
"``target``, and ``qubits``) and into plugin-specific options (a free form"
" configuration dictionary specified via ``options``). It is worthwhile to"
" note that this change is backward-compatible, if the options "
"``coupling_map``, etc. are not explicitly added to the plugin's ``run()``"
" method, they will appear as part of ``options``."
msgstr ""

#: ../../../<reno.sphinxext branch>:571 current
msgid ""
"The :class:`.DAGCircuit` methods "
":meth:`~.DAGCircuit.apply_operation_back` and "
":meth:`~.DAGCircuit.apply_operation_front` have gained a ``check`` "
"keyword argument that can be set ``False`` to skip validation that the "
"inputs uphold the :class:`.DAGCircuit` data-structure invariants.  This "
"is useful as a performance optimisation when the DAG is being built from "
"known-good data, such as during transpiler passes."
msgstr ""

#: ../../../<reno.sphinxext branch>:579 current
msgid ""
"The method :meth:`.CouplingMap.reduce` now accepts an additional argument"
" ``check_if_connected``, defaulted to ``True``. This corresponds to the "
"previous behavior, checking whether the reduced coupling map remains "
"connected and raising a ``CouplingError`` if not so. When set to "
"``False``, the check is skipped, allowing disconnected reduced coupling "
"maps."
msgstr ""

#: ../../../<reno.sphinxext branch>:587 current
msgid ""
"The constructor for :class:`.HighLevelSynthesis` transpiler pass now "
"accepts additional arguments ``equivalence_library``, ``basis_gates``, "
"and ``min_qubits``. The pass can now unroll custom definitions similarly "
"to :class:`.UnrollCustomDefinitions`, and as such completely subsumes the"
" functionality of the latter pass. In particular, "
":class:`.HighLevelSynthesis` is now recursive, fixing an oversight in the"
" initial implementation. Thus, when either ``target`` or ``basis_gates`` "
"are specified, :class:`.HighLevelSynthesis` recursively synthesizes all "
"high-level objects, annotated operations and custom gates in the circuit,"
" leaving only gates that are supported by the target or belong to the "
"equivalence library. This allows to use :class:`.HighLevelSynthesis` as a"
" drop-in replacement for :class:`.UnrollCustomDefinitions`. On the other "
"hand, when neither ``target`` nor ``basis_gates`` are specified, the pass"
" synthesizes only the \"top-level\" high-level objects and annotated "
"operations, i.e. does not recursively descent into the custom gates "
"``definition`` field. This is backward-compatible both with "
":class:`.UnrollCustomDefinitions` (which would not do anything) and with "
"the older behavior of the high level synthesis pass, which allows to use "
"it as an intermediate transform, only synthesizing high-level objects as "
"specified by :class:`~.HLSConfig`."
msgstr ""

#: ../../../<reno.sphinxext branch>:606 current
msgid ""
"Significantly improved the performance of the "
":class:`~.MergeAdjacentBarriers` transpiler pass, which used to rebuild "
"the complete DAG to merge the barriers."
msgstr ""

#: ../../../<reno.sphinxext branch>:611 current
msgid ""
"Added a new keyword argument, ``min_qubits``, to the constructor of the "
":class:`.BasisTranslator` transpiler pass. When set to a non-zero value "
"this is used to set a minimum number of qubits to filter operations to "
"translate in the circuit. For example, if ``min_qubits=3`` is set the "
":class:`.BasisTranslator` instance will only translate gates in the "
"circuit that operate on 3 or more qubits."
msgstr ""

#: ../../../<reno.sphinxext branch>:620 current
msgid ""
"Added a new keyword argument, ``min_qubits``, to the constructor of the "
":class:`.UnrollCustomDefinitions` transpiler pass. When set to a non-zero"
" value this is used to set a minimum number of qubits to filter "
"operations to translate in the circuit. For example, if ``min_qubits=3`` "
"is set the :class:`.UnrollCustomDefinitions` instance will only translate"
" gates in the circuit that operate on 3 or more qubits."
msgstr ""

#: ../../../<reno.sphinxext branch>:629 current
msgid ""
"Added support to the :class:`.SabreLayout` pass to add trials with "
"specified starting layouts. The :class:`.SabreLayout` transpiler pass "
"typically runs multiple layout trials that all start with fully random "
"layouts which then use a routing pass to permute that layout instead of "
"inserting swaps to find a layout which will result in fewer swap gates. "
"This new feature enables running an :class:`.AnalysisPass` prior to "
":class:`.SabreLayout` which sets the ``\"sabre_starting_layout\"`` field "
"in the property set to provide the :class:`.SabreLayout` with additional "
"starting layouts to use in its internal trials. For example, if you "
"wanted to run :class:`.DenseLayout` as the starting point for one trial "
"in :class:`.SabreLayout` you would do something like::"
msgstr ""

#: ../../../<reno.sphinxext branch>:661 current
msgid ""
"Then when the ``opt_level_1`` :class:`.StagedPassManager` is run with a "
"circuit the output of the :class:`.DenseLayout` pass will be used for one"
" of the :class:`.SabreLayout` trials in addition to the 5 fully random "
"trials that run by default in optimization level 1."
msgstr ""

#: ../../../<reno.sphinxext branch>:667 current
msgid ""
"Two new transpiler passes are added to generate single-pulse RX gate "
"calibrations on the fly. These single-pulse RX calibrations will reduce "
"the gate time in half, as described in P.Gokhale et al, Optimized Quantum"
" Compilation for Near-Term Algorithms with OpenPulse (2020), "
"`arXiv:2004.11205 <https://arxiv.org/abs/2004.11205>`__."
msgstr ""

#: ../../../<reno.sphinxext branch>:672 current
msgid ""
"To reduce the amount of RX calibration data that needs to be generated, "
":class:`~qiskit.transpiler.passes.optimization.normalize_rx_angle.NormalizeRXAngle`"
" performs three optimizations: wrapping the :class:`.RXGate` rotation "
"angles to ``[0, pi]``, replacing ``RX(pi/2)`` and ``RX(pi)`` with "
":class:`.SXGate` and :class:`.XGate`, and quantizing the rotation angles."
" This pass is required to be run before "
":class:`~qiskit.transpiler.passes.calibration.rx_builder.RXCalibrationBuilder`,"
" which generates RX calibrations on the fly."
msgstr ""

#: ../../../<reno.sphinxext branch>:680 current
msgid ""
"The optimizations performed by :class:`~.NormalizeRXAngle` reduce the "
"amount of calibration data and enable us to take advantage of the more "
"accurate, hardware-calibrated pulses. The calibrations generated by "
":class:`~.RXCalibrationBuilder` are bootstrapped from the "
":class:`.SXGate` calibration, which should be already present in the "
"target. The amplitude is linearly scaled to achieve the desired arbitrary"
" rotation angle."
msgstr ""

#: ../../../<reno.sphinxext branch>:686 current
msgid ""
"Such single-pulse calibrations reduces the :class:`.RXGate` time in half,"
" compared to the conventional sequence that consists of two "
":class:`.SXGate` pulses. There could be an improvement in fidelity due to"
" this reduction in gate time."
msgstr ""

#: ../../../<reno.sphinxext branch>:692 current
msgid ""
"Added new methods to :class:`.TranspileLayout`, "
":meth:`~.TranspileLayout.initial_index_layout` and "
":meth:`~.TranspileLayout.routing_permutation`, which are used to generate"
" a list view of the :attr:`.TranspileLayout.initial_layout` and "
":attr:`.TranspileLayout.final_layout` attributes respectively. For "
"example, if the :attr:`~.TranspileLayout.final_layout` attribute was::"
msgstr ""

#: ../../../<reno.sphinxext branch>:705 current
msgid "then :meth:`~.TranspileLayout.routing_permutation` will return::"
msgstr ""

#: ../../../<reno.sphinxext branch>:711 current
msgid ""
"Added a new method to :class:`.TranspileLayout`, "
":meth:`~.TranspileLayout.initial_virtual_layout`, which is equivalent to "
"the :attr:`.TranspileLayout.initial_layout` attribute but gives the "
"option to filter ancilla qubits that were added to the circuit. By "
"default the :attr:`.TranspileLayout.initial_layout` will typically "
"include any ancillas added by the transpiler."
msgstr ""

#: ../../../<reno.sphinxext branch>:718 current
msgid ""
"Added a new methods, :meth:`~.TranspileLayout.final_index_layout` and "
":meth:`~.TranspileLayout.final_virtual_layout` to the "
":class:`~.TranspileLayout` class. These methods are used to return a "
"final layout (the mapping of input circuit qubits to the final position "
"in the output). This is distinct from the "
":attr:`~.TranspileLayout.final_layout` attribute which is the permutation"
" caused by routing as a :class:`.Layout` object. The "
":meth:`~.TranspileLayout.final_index_layout` method returns a list to "
"show the output position for each qubit in the input circuit to the "
"transpiler. For example, with an original circuit::"
msgstr ""

#: ../../../<reno.sphinxext branch>:731 current
msgid "and the output from the transpiler was::"
msgstr ""

#: ../../../<reno.sphinxext branch>:739 current
msgid ""
"then the output from :meth:`~.TranspileLayout.final_index_layout` would "
"return a list of::"
msgstr ""

#: ../../../<reno.sphinxext branch>:744 current
msgid ""
"The :meth:`~.TranspileLayout.final_virtual_layout` returns this as a "
":class:`.Layout` object, so the return from the above example would be::"
msgstr ""

#: ../../../<reno.sphinxext branch>:757 current
msgid "Visualization Features"
msgstr ""

#: ../../../<reno.sphinxext branch>:761 current
msgid ""
"Added the ability to display conditions as expressions from "
":class:`.Expr` in the :meth:`.QuantumCircuit.draw` method and the "
":func:`~.circuit_drawer` function when visualizing circuits that have "
":class:`.ControlFlowOp` instructions."
msgstr ""

#: ../../../<reno.sphinxext branch>:768 current
msgid ""
"Added the ``\"iqp\"`` and ``\"iqp-dark\"`` color styles for the "
"``matplotlib`` circuit drawer, which are based on the IBM Quantum "
"Platform color scheme."
msgstr ""

#: ../../../<reno.sphinxext branch>:773 current
msgid ""
"In :class:`~qiskit.visualization.circuit.TextDrawer`, operations built "
"from :class:`~qiskit.circuit.ControlFlowOp`, including ``if``, ``else``, "
"``while``, ``for``, and ``switch/case``, whether directly instantiated or"
" built using methods in :class:`~qiskit.circuit.QuantumCircuit`, will now"
" fully display the circuits defined in the ControlFlowOps with brackets "
"to delineate the circuits."
msgstr ""

#: ../../../<reno.sphinxext branch>:783 current
msgid ""
"When defining a custom stylesheet for the pulse timeline drawer "
":func:`qiskit.visualization.timeline_drawer`, \"generator\" functions "
"that have the object attribute ``accepts_program`` set to ``True`` will "
"receive an extra keyword argument ``program`` containing the full "
"scheduled :class:`.QuantumCircuit` being drawn."
msgstr ""

#: ../../../<reno.sphinxext branch>:790 current
msgid ""
"The visualizations from the :func:`~.plot_gate_map`,  "
":func:`~.plot_coupling_map`. :func:`~.plot_error_map`, and "
":func:`~.plot_circuit_layout` functions have been significantly improved "
"for rendering layouts of backends with large numbers of qubits. This was "
"accomplished by leveraging `graphviz <https://graphviz.org/>`__ through "
"rustworkx's ``graphviz_draw()`` function to perform a more sophisticated "
"algorithmic graph layout that scales for large numbers of qubits."
msgstr ""

#: ../../release_notes.rst:7
msgid ""
"(:download:`Source code "
"<_build/gettext/plot_directive/release_notes-1.py>`)"
msgstr ""

#: ../../../<reno.sphinxext branch>:808 current
msgid "Misc. Features"
msgstr ""

#: ../../../<reno.sphinxext branch>:812 current
msgid ""
"Added support for expressing the sign of a :class:`.ParameterExpression`."
" Instead of assigning a concrete value and using :data:`numpy.sign` or "
"other library functions, the user can use the instance of the "
":class:`.ParameterExpression` class to calculate the sign and can work "
"with the sign before the expression is fully assigned."
msgstr ""

#: ../../../<reno.sphinxext branch>:817 current
msgid "It can be used as follows::"
msgstr ""

#: ../../../<reno.sphinxext branch>:826 current
msgid ""
"Refer to `#10360 <https://github.com/Qiskit/qiskit-terra/issues/10360>`__"
" for more details."
msgstr ""

#: ../../../<reno.sphinxext branch>:830 current
msgid ""
":class:`.Parameter` now has an advanced-usage keyword argument ``uuid`` "
"in its constructor, which can be used to make the :class:`.Parameter` "
"compare equal to another of the same name. This should not typically be "
"used by users, and is most useful for custom serialisation and "
"deserialisation."
msgstr ""

#: ../../../<reno.sphinxext branch>:839 current
msgid "Circuits Upgrade Notes"
msgstr ""

#: ../../../<reno.sphinxext branch>:843 current
msgid ""
"The :attr:`.ControlledGate.definition` of the output from the "
":meth:`.Gate.control` method may be different as compared to previous "
"releases. The internal generation of the :meth:`.Gate.control` method is "
"no longer using the now deprecated :class:`.Unroller` transpiler pass to "
"generate its definition and this can potentially cause a different "
"definition to be generated. The output :class:`.ControlledGate` object's "
"definition will be unitary equivalent to what was generated before. But "
"if you require the exact definition from calling :meth:`.Gate.control` "
"you can use an earlier release and save the circuit with "
":func:`.qpy.dump` and then load it with a newer release."
msgstr ""

#: ../../../<reno.sphinxext branch>:855 current
msgid ""
"The property ``num_ancilla_qubits`` from the class "
":class:`.PolynomialPauliRotations` has been removed, as deprecated in "
"Qiskit 0.23.0. Instead, use the property "
":attr:`.PolynomialPauliRotations.num_ancillas`."
msgstr ""

#: ../../../<reno.sphinxext branch>:861 current
msgid "The following standard library gates:"
msgstr ""

#: ../../../<reno.sphinxext branch>:894 current
msgid ""
"are no longer able to set :attr:`~.Gate.label`, :attr:`~.Gate.condition`,"
" :attr:`~.Gate.duration`, or :attr:`~.Gate.unit` (and "
":attr:`~.ControlledGate.ctrl_state` for :class:`~.ControlledGate` "
"subclasses) after instantiating an object anymore. You can still set "
":attr:`~.Gate.condition` through the use :meth:`~.Gate.c_if`. You can use"
" :meth:`~.Gate.to_mutable` to get a mutable copy of the instruction and "
"then use the setter on that copy instead of the original object.  "
"``label``, ``duration`` and ``unit`` can be given as keyword arguments to"
" these gates at construction time, and a mutable instance will be "
"returned automatically. This change was necessary as part of converting "
"these classes to be :class:`~.SingletonGate` and "
":class:`~.SingletonControlledGate` types which greatly reduces the memory"
" footprint of repeated instances of these gates."
msgstr ""

#: ../../../<reno.sphinxext branch>:909 current
msgid ""
"For anything that interacts with :class:`~.Gate`, :class:`~.Operation`, "
"or :class:`~.circuit.Instruction` objects or works with these as part of "
"a :class:`~.QuantumCircuit` or :class:`~.DAGCircuit` classes, it is "
"important to note that the use of shared references for instances is much"
" more common now. Previously, it was possible to reuse and share an "
"instance of a circuit operation, but it wasn't very commonly used and a "
"copy would generate a unique instance. This has changed starting in this "
"release because of :class:`~.SingletonInstruction` and "
":class:`.SingletonGate` being made available (and a large number of "
"standard library gates now built off of them). If your usage of these "
"objects is assuming unique instances for every circuit operation, this "
"becomes a potential issue, as now a shared state will be reused between "
"operations of the same type (that will persist through copy and deep "
"copies). You can rely on the :attr:`.Instruction.mutable` attribute to "
"check the mutability of an object or use :meth:`.Instruction.to_mutable` "
"to get a mutable copy of any instruction."
msgstr ""

#: ../../../<reno.sphinxext branch>:926 current
msgid ""
"More :class:`~.circuit.Instruction` instances (those that return "
"singletons) no longer strictly satisfy (for example)::"
msgstr ""

#: ../../../<reno.sphinxext branch>:931 current
msgid ""
"The returned object will, however, still be a standard subclass so "
":func:`isinstance` (the correct way to do type checking) will continue to"
" work correctly.  Several instructions already had this property (e.g. "
":class:`.MCXGate`), but it is now more common as many more standard gates"
" will do this."
msgstr ""

#: ../../../<reno.sphinxext branch>:936 current
msgid ""
"If you require the \"base\" type of a gate for some reason, omitting the "
"synthetic singleton subclasses, which cannot be instantiated, see "
":attr:`.Instruction.base_class`."
msgstr ""

#: ../../../<reno.sphinxext branch>:941 current
msgid ""
"The definition of :class:`~.UnitaryGate` for single qubit unitaries is "
"now in terms of :class:`~.UGate` instead of the legacy :class:`~.U3Gate` "
"class."
msgstr ""

#: ../../../<reno.sphinxext branch>:948 current
msgid "Providers Upgrade Notes"
msgstr ""

#: ../../../<reno.sphinxext branch>:952 current
msgid ""
"The :class:`.QasmSimulatorPy` python-based simulator included in "
":class:`qiskit.providers.basicaer` now includes ``'h'`` "
"(:class:`.HGate`), ``'p'`` (:class:`.PhaseGate`), and ``'u'`` "
"(:class:`.UGate`) in its basis gate set."
msgstr ""

#: ../../../<reno.sphinxext branch>:957 current
msgid ""
"The argument ``channel`` in the method "
":meth:`.PulseBackendConfiguration.control` is removed. It was deprecated "
"in Qiskit 0.33 (with Terra 0.19), released on Dec 2021. Instead use  the "
"``qubits`` argument."
msgstr ""

#: ../../../<reno.sphinxext branch>:963 current
msgid ""
"Replaced the argument ``qobj[Qobj]`` in :meth:`.QasmSimulatorPy.run` with"
" ``run_input[QuantumCircuit or list]``"
msgstr ""

#: ../../../<reno.sphinxext branch>:965 current
msgid "Here is an example to migrate your code::"
msgstr ""

#: ../../../<reno.sphinxext branch>:986 current
msgid ""
"All these were deprecated since 0.22 (released on October 13, 2022) and "
"now they are removed."
msgstr ""

#: ../../../<reno.sphinxext branch>:992 current
msgid "Pulse Upgrade Notes"
msgstr ""

#: ../../../<reno.sphinxext branch>:996 current
msgid ""
"The functions ``qiskit.scheduler.utils.format_meas_map()``,  "
"``qiskit.scheduler.utils.measure()``, and "
"``qiskit.scheduler.utils.measure_all()`` had been moved to "
"``qiskit.pulse.utils.format_meas_map()``, "
"``qiskit.pulse.macros.measure()``, and "
"``qiskit.pulse.macros.measure_all()`` respectively. The previous location"
" was deprecated in Qiskit 0.20.0 (Terra 0.15.0, released on 2020-08-10) "
"and it is no longer supported."
msgstr ""

#: ../../../<reno.sphinxext branch>:1004 current
msgid ""
"The methods ``to_dict`` in the classes "
":class:`.pulse.transforms.AlignmentKind`, "
":class:`.pulse.transforms.AlignEquispaced`, and "
":class:`.pulse.transforms.AlignFunc` are removed. They were deprecatedin "
"Qiskit 0.37 (with Terra 0.21), released on June 2022."
msgstr ""

#: ../../../<reno.sphinxext branch>:1012 current
msgid "QPY Upgrade Notes"
msgstr ""

#: ../../../<reno.sphinxext branch>:1016 current
msgid ""
"The use of the keyword ``circuits`` for the first positional argument in "
"the function :func:`qiskit.qpy.dump` is removed as its usage was "
"deprecated in Qiskit 0.37 (with Terra 0.21), released on June 2022. "
"Instead, use the keyword ``programs`` can be used instead (or just pass "
"the argument in positionally), which behaves identically."
msgstr ""

#: ../../../<reno.sphinxext branch>:1024 current
msgid "Quantum Information Upgrade Notes"
msgstr ""

#: ../../../<reno.sphinxext branch>:1028 current
msgid ""
"The method :meth:`qiskit.quantum_info.pauli_basis` does not accept the "
"``pauli_list`` argument any more. It was deprecated in Qiskit 0.39 (with "
"Terra 0.22), released on Oct 2022."
msgstr ""

#: ../../../<reno.sphinxext branch>:1034 current
msgid ""
"The function ``random_stabilizer_table`` in the "
":mod:`qiskit.quantum_info.random` module is removed. It was deprecated in"
" Qiskit 0.39 (with Terra 0.22), released on Oct 2022. Instead, use "
":func:`qiskit.quantum_info.random.random_pauli_list`."
msgstr ""

#: ../../../<reno.sphinxext branch>:1041 current
msgid ""
"The classes ``qiskit.quantum_info.PauliTable`` and "
"``qiskit.quantum_info.StabilizerTable`` are removed. The function "
"``random_pauli_table()`` is also removed. They were deprecated in Qiskit "
"0.43 (with Terra 0.24), released in May 2023. Instead, you should use "
":class:`~.PauliList` and :func:`~.random_pauli_list`."
msgstr ""

#: ../../../<reno.sphinxext branch>:1048 current
msgid ""
"The arguments ``z`` and ``x`` to the initializer of to :class:`.Pauli` "
"were removed, as deprecated in Qiskit Terra 0.17 (released on April, "
"2021). A pair of ``x`` and ``z`` should be passed positionally as a "
"single tuple instead (``Pauli((z, x))``)."
msgstr ""

#: ../../../<reno.sphinxext branch>:1055 current
msgid ""
"The argument ``label`` to the initializer of :class:`.Pauli` was removed,"
" as deprecated in Qiskit Terra 0.17 (released on April, 2021). Pass the "
"label positionally instead, such as ``Pauli(\"XYZ\")``."
msgstr ""

#: ../../../<reno.sphinxext branch>:1061 current
msgid ""
"Importing from ``qiskit.quantum_info.operators.pauli`` is not allowed "
"anymore, as it was deprecated in Qiskit Terra 0.21 (released on June, "
"2022). Import directly from ``qiskit.quantum_info`` instead."
msgstr ""

#: ../../../<reno.sphinxext branch>:1069 current
msgid "Synthesis Upgrade Notes"
msgstr ""

#: ../../../<reno.sphinxext branch>:1073 current
msgid ""
"The parameter ``order`` in :class:`.synthesis.SuzukiTrotter` constructor "
"raises an exception instead of deprecation warning when set in an odd "
"number. Suzuki product formulae are symmetric and therefore only defined "
"for even orders."
msgstr ""

#: ../../../<reno.sphinxext branch>:1082 branch>:2330 current
msgid "Transpiler Upgrade Notes"
msgstr ""

#: ../../../<reno.sphinxext branch>:1086 current
msgid ""
"The plugin name ``default`` is reserved for the :ref:`plugin stages "
"<stage_table>` ``init``, ``layout``, ``optimization``, and "
"``scheduling``. These stages previously did not reserve this plugin name,"
" but the ``default`` name is now used to represent Qiskit's built-in "
"default method for these stages. If you were using these names for "
"plugins on these stages these will conflict with Qiskit's usage and you "
"should rename your plugin."
msgstr ""

#: ../../../<reno.sphinxext branch>:1095 current
msgid ""
"Disabled the use of the :class:`.RemoveResetInZeroState` class in the "
"preset passmanagers. Previously, when :func:`.transpile` or "
":func:`.generate_preset_pass_manager` was run with ``optimization_level``"
" at level 1, 2, or 3, it would run :class:`.RemoveResetInZeroState`. "
"However, this pass prohibited the notion of arbitrary initial states "
"unless explicitly set to zeros with resets. If you need to run the pass "
"as part of your compilation pipeline, you can run something like::"
msgstr ""

#: ../../../<reno.sphinxext branch>:1106 current
msgid "to retain this functionality for your circuit compilation."
msgstr ""

#: ../../../<reno.sphinxext branch>:1110 current
msgid ""
"The deprecated transpiler routing pass, ``BIPMapping`` has been removed. "
"It was marked as deprecated in the Qiskit 0.43.0 release. It has been "
"replaced by an external plugin package: ``qiskit-bip-mapper``. Details "
"for this new package can be found at the package's github repository:"
msgstr ""

#: ../../../<reno.sphinxext branch>:1115 current
msgid "https://github.com/qiskit-community/qiskit-bip-mapper"
msgstr ""

#: ../../../<reno.sphinxext branch>:1117 current
msgid ""
"The pass was made into a separate plugin package for two reasons: first, "
"the dependency on CPLEX makes it harder to use, and secondly, the plugin "
"package integrates more cleanly with :func:`~.transpile`. The optional "
"extra ``bip-mapper`` to install ``cplex`` and ``docplex`` to support this"
" pass has been removed as nothing in Qiskit optionally requires it "
"anymore."
msgstr ""

#: ../../../<reno.sphinxext branch>:1125 current
msgid ""
"The argument ``qubits`` in the method :meth:`.InstructionDurations.get`, "
"does not accept :class:`.Qubit` (or a list of them) any more. This "
"functionality was deprecated in Qiskit 0.33 (with Terra 0.19), released "
"on Dec 2021. Instead, use an integer for the qubit indices."
msgstr ""

#: ../../../<reno.sphinxext branch>:1132 current
msgid ""
"Removed the argument ``qubit_channel_mapping`` in "
":class:`.RZXCalibrationBuilder`, which was deprecated in Qiskit 0.39 "
"(released on Oct 2022, with qiskit-terra 0.22)"
msgstr ""

#: ../../../<reno.sphinxext branch>:1137 current
msgid ""
"In :class:`.transpiler.CouplingMap` method ``subgraph`` is removed as "
"deprecated in 0.20. :meth:`~reduce` can be used in place of method "
"``subgraph``."
msgstr ""

#: ../../../<reno.sphinxext branch>:1144 current
msgid "Visualization Upgrade Notes"
msgstr ""

#: ../../../<reno.sphinxext branch>:1148 current
msgid ""
"Removed support for using the keyword ``rho`` for the first positional "
"argument in :func:`~qiskit.visualization.plot_state_hinton`, "
":func:`~qiskit.visualization.plot_bloch_multivector`, "
":func:`~qiskit.visualization.plot_state_city`, "
":func:`~qiskit.visualization.plot_state_paulivec`, and "
":func:`~qiskit.visualization.plot_state_qsphere`. The use of ``rho`` has "
"been replaced by ``state``, which can be used instead. Removed "
"``qiskit.scheduler.utils`` as all contained functions were moved to "
":mod:`qiskit.pulse.macros` and :mod:`qiskit.pulse.utils`. All these were "
"deprecated since 0.15 (released on August 06, 2020) and now they are "
"removed."
msgstr ""

#: ../../../<reno.sphinxext branch>:1160 current
msgid ""
"The class constructor arguments ``qregs``, ``cregs``, ``layout`` and "
"``global_phase`` for :class:`.visualization.QCircuitImage` are removed, "
"as they were deprecated in 0.20."
msgstr ""

#: ../../../<reno.sphinxext branch>:1166 current
msgid ""
"The visualization functions: :func:`~.plot_gate_map`,  "
":func:`~.plot_coupling_map`. :func:`~.plot_error_map`,  and "
":func:`~.plot_circuit_layout` now depend on `graphviz "
"<https://graphviz.org/>`__ being installed to function. This change was "
"necessary to enable visualizing backends with larger numbers of qubits. "
"This additional external requirement is in addition to the existing "
"optional dependencies these functions previously required. You find "
"details on how to install graphviz here:  https://graphviz.org/download/"
msgstr ""

#: ../../../<reno.sphinxext branch>:1178 branch>:2388 current
msgid "Misc. Upgrade Notes"
msgstr ""

#: ../../../<reno.sphinxext branch>:1182 current
msgid ""
"The :class:`~.QuasiDistribution` values might include floating-point "
"errors. ``QuasiDistribution.__repr__`` rounds using :meth:`numpy.round` "
"and the parameter ``ndigits`` can be manipulated with the class attribute"
" ``__ndigits__``. The default is ``15``."
msgstr ""

#: ../../../<reno.sphinxext branch>:1189 current
msgid ""
"The class ``qiskit.qobj.Qobj`` is removed. It was deprecated in Qiskit "
"0.33 (with Terra 0.19), released on Dec 2021. Instead, use "
":class:`qiskit.qobj.QasmQobj` or :class:`qiskit.qobj.PulseQobj`."
msgstr ""

#: ../../../<reno.sphinxext branch>:1195 current
msgid ""
"The decorator ``qiskit.utils.deprecation.deprecate_function()`` has been "
"deprecated since Qiskit 0.39.0 (released on October 2022, with qiskit-"
"terra 0.22.0) and now is been removed. Use "
":func:`qiskit.utils.deprecate_func` instead."
msgstr ""

#: ../../../<reno.sphinxext branch>:1201 current
msgid ""
"The function :func:`~qiskit.execute_function.execute` does not accept the"
" arguments ``qobj_id`` and  ``qobj_header`` any more. Their use was "
"deprecated in Qiskit 0.37 (with Terra 0.21), released on June 2022."
msgstr ""

#: ../../../<reno.sphinxext branch>:1207 current
msgid ""
"The transpilation pass ``qiskit.transpiler.passes.CXDirection`` is "
"removed. Its use was deprecated in Qiskit 0.37 (with Terra 0.21), "
"released on June 2022. Instead, use the more generic "
":class:`~.GateDirection` pass."
msgstr ""

#: ../../../<reno.sphinxext branch>:1213 current
msgid ""
"The transpilation pass ``qiskit.transpiler.passes.CheckCXDirection`` is "
"removed. Its use was deprecated in Qiskit 0.37 (with Terra 0.21), "
"released on June 2022. Instead, use the more generic "
":class:`~.CheckGateDirection` pass."
msgstr ""

#: ../../../<reno.sphinxext branch>:1219 current
msgid ""
"Building Qiskit from source now requires a Rust compiler compatible with "
"language version 1.64. This has been increased from the previous minimum "
"supported Rust version of 1.61 for building earlier versions of Qiskit."
msgstr ""

#: ../../../<reno.sphinxext branch>:1227 current
msgid "Algorithms Deprecations"
msgstr ""

#: ../../../<reno.sphinxext branch>:1231 current
msgid ""
"The algorithm utils in ``qiskit.utils.validation`` and "
"``qiskit.utils.algorithm_globals`` are now deprecated and will be removed"
" in no less than 3 months from the release date. These utils were "
"introduced with the ``qiskit.algorithms`` module to support legacy and "
"primitive-based algorithm workflows. Now that ``qiskit.algorithms`` is "
"deprecated and the primitive-based algorithms codebase has been migrated "
"to a standalone `library <https://github.com/qiskit-community/qiskit-"
"algorithms>`_, these utils are no longer used in the context of Qiskit. "
"If your application allows it, we recommend that you migrate your code to"
" use `qiskit_algorithms <https://github.com/qiskit-community/qiskit-"
"algorithms>`_, where you will be able to import the relevant utilities in"
" ``algorithm_globals`` and ``validation`` from "
"``qiskit_algorithms.utils``. Please note that legacy functionality has "
"not been migrated to the new package."
msgstr ""

#: ../../../<reno.sphinxext branch>:1247 current
msgid "Circuits Deprecations"
msgstr ""

#: ../../../<reno.sphinxext branch>:1251 current
msgid ""
"Passing ``None`` as the ``qargs`` or ``cargs`` arguments to "
":meth:`.DAGCircuit.apply_operation_back` or "
":meth:`~.DAGCircuit.apply_operation_front` is deprecated and will be "
"removed in Qiskit 1.0. This has been explicitly against the typing "
"documentation for some time, but silently accepted by Qiskit.  Instead, "
"simply pass ``()`` rather than ``None``."
msgstr ""

#: ../../../<reno.sphinxext branch>:1258 current
msgid ""
"The method :meth:`.QuantumCircuit.bind_parameters` is now deprecated and "
"will be removed from the codebase in no less than 3 months from the "
"release date. Its functionality overlapped highly with "
":meth:`.QuantumCircuit.assign_parameters`, and can be totally replaced by"
" it. Please use :meth:`.QuantumCircuit.assign_parameters` instead."
msgstr ""

#: ../../../<reno.sphinxext branch>:1265 current
msgid ""
"Deprecate duplicate gate methods on :class:`.QuantumCircuit`. The rule "
"applied is that the method names reflect that gate names, e.g. the "
":class:`.CXGate` is added via :meth:`.QuantumCircuit.cx` and not "
":meth:`.QuantumCircuit.cnot`. The deprecations are:"
msgstr ""

#: ../../../<reno.sphinxext branch>:1270 current
msgid ":meth:`.QuantumCircuit.cnot` in favor of :meth:`.QuantumCircuit.cx`"
msgstr ""

#: ../../../<reno.sphinxext branch>:1271 current
msgid ":meth:`.QuantumCircuit.toffoli` in favor of :meth:`.QuantumCircuit.ccx`"
msgstr ""

#: ../../../<reno.sphinxext branch>:1272 current
msgid ":meth:`.QuantumCircuit.fredkin` in favor of :meth:`.QuantumCircuit.cswap`"
msgstr ""

#: ../../../<reno.sphinxext branch>:1273 current
msgid ":meth:`.QuantumCircuit.mct` in favor of :meth:`.QuantumCircuit.mcx`"
msgstr ""

#: ../../../<reno.sphinxext branch>:1274 current
msgid ":meth:`.QuantumCircuit.i` in favor of :meth:`.QuantumCircuit.id`"
msgstr ""

#: ../../../<reno.sphinxext branch>:1276 current
msgid ""
"Note that :meth:`.QuantumCircuit.i` is the only exception to the rule "
"above, but since :meth:`.QuantumCircuit.id` more intuively represents the"
" identity and is used more, we chose it over its counterpart."
msgstr ""

#: ../../../<reno.sphinxext branch>:1282 current
msgid ""
"To streamline the structure of Qiskit's gates and operations, the "
":mod:`qiskit.extensions` module is pending deprecation and will be "
"deprecated in a future release. The following objects have been moved to "
":mod:`qiskit.circuit.library`"
msgstr ""

#: ../../../<reno.sphinxext branch>:1286 current
msgid ":class:`~.library.DiagonalGate`,"
msgstr ""

#: ../../../<reno.sphinxext branch>:1287 current
msgid ":class:`~.library.HamiltonianGate`,"
msgstr ""

#: ../../../<reno.sphinxext branch>:1288 current
msgid ":class:`~.library.Initialize`,"
msgstr ""

#: ../../../<reno.sphinxext branch>:1289 current
msgid ":class:`~.library.Isometry`,"
msgstr ""

#: ../../../<reno.sphinxext branch>:1290 current
msgid ":class:`~.library.generalized_gates.mcg_up_to_diagonal.MCGupDiag`,"
msgstr ""

#: ../../../<reno.sphinxext branch>:1291 current
msgid ":class:`~.library.UCGate`,"
msgstr ""

#: ../../../<reno.sphinxext branch>:1292 current
msgid ":class:`~.library.UCPauliRotGate`,"
msgstr ""

#: ../../../<reno.sphinxext branch>:1293 current
msgid ":class:`~.library.UCRXGate`,"
msgstr ""

#: ../../../<reno.sphinxext branch>:1294 current
msgid ":class:`~.library.UCRYGate`,"
msgstr ""

#: ../../../<reno.sphinxext branch>:1295 current
msgid ":class:`~.library.UCRZGate`,"
msgstr ""

#: ../../../<reno.sphinxext branch>:1296 current
msgid ":class:`~.library.UnitaryGate`."
msgstr ""

#: ../../../<reno.sphinxext branch>:1298 current
msgid "These instructions have already been deprecated in this release,"
msgstr ""

#: ../../../<reno.sphinxext branch>:1300 current
msgid ":class:`~.SingleQubitUnitary`, instead use :class:`.library.UnitaryGate`,"
msgstr ""

#: ../../../<reno.sphinxext branch>:1301 current
msgid ""
":class:`~.extensions.Snapshot`, which has been superseded by Qiskit Aer's"
" save instructions,"
msgstr ""

#: ../../../<reno.sphinxext branch>:1303 current
msgid "along with their circuit methods"
msgstr ""

#: ../../../<reno.sphinxext branch>:1305 current
msgid ":meth:`.QuantumCircuit.snapshot`,"
msgstr ""

#: ../../../<reno.sphinxext branch>:1306 current
msgid ":meth:`.QuantumCircuit.squ`."
msgstr ""

#: ../../../<reno.sphinxext branch>:1308 current
msgid "In addition, the following circuit methods are pending deprecation"
msgstr ""

#: ../../../<reno.sphinxext branch>:1310 current
msgid ":meth:`.QuantumCircuit.diagonal`,"
msgstr ""

#: ../../../<reno.sphinxext branch>:1311 current
msgid ":meth:`.QuantumCircuit.hamiltonian`,"
msgstr ""

#: ../../../<reno.sphinxext branch>:1312 current
msgid ":meth:`.QuantumCircuit.isometry` and :meth:`.QuantumCircuit.iso`,"
msgstr ""

#: ../../../<reno.sphinxext branch>:1313 current
msgid ":meth:`.QuantumCircuit.uc`,"
msgstr ""

#: ../../../<reno.sphinxext branch>:1314 current
msgid ":meth:`.QuantumCircuit.ucrx`,"
msgstr ""

#: ../../../<reno.sphinxext branch>:1315 current
msgid ":meth:`.QuantumCircuit.ucry`,"
msgstr ""

#: ../../../<reno.sphinxext branch>:1316 current
msgid ":meth:`.QuantumCircuit.ucrz`."
msgstr ""

#: ../../../<reno.sphinxext branch>:1318 current
msgid ""
"Since the entire module is pending deprecation, so is "
":class:`.ExtensionError`."
msgstr ""

#: ../../../<reno.sphinxext branch>:1322 current
msgid ""
"The little-used :class:`.QuantumCircuit` class data attributes "
":attr:`~.QuantumCircuit.header` and "
":attr:`~.QuantumCircuit.extension_lib` are deprecated and scheduled for "
"removal.  These respectively held strings of the OpenQASM 2.0 version "
"header statement and ``qelib1.inc`` include statement.  No alternative "
"will be provided; these were mostly intended as internal details."
msgstr ""

#: ../../../<reno.sphinxext branch>:1333 branch>:2499 current
msgid "Transpiler Deprecations"
msgstr ""

#: ../../../<reno.sphinxext branch>:1337 current
msgid ""
"The :class:`.Unroller` transpiler pass has been deprecated and will be "
"removed in a future release. The :class:`.Unroller` has been superseded "
"by the :class:`.BasisTranslator` which provides a similar set of "
"functionality but offers it in a more general manner so that you're able "
"to translate a circuit to any universal basis set. The :class:`.Unroller`"
" class only works in situations where the circuit's gate definitions are "
"recursively defined in terms of the target basis; for Qiskit's standard "
"library gates this means :class:`.UGate` and :class:`.CXGate`. If you are"
" using the :class:`.Unroller` pass it can be replaced by using a custom "
"pass manager of the form::"
msgstr ""

#: ../../../<reno.sphinxext branch>:1361 current
msgid ""
"The use of the value ``\"unroller\"`` for the ``translation_method`` "
"keyword argument on the :func:`.transpile` and "
":func:`.generate_preset_pass_manager` has been deprecated. This "
"translation stage plugin will be removed from Qiskit in a future release "
"as it has been superseded by the default ``\"translator\"`` method which "
"will work similarly to the ``\"unroller\"`` plugin but support a broader "
"set of target backends."
msgstr ""

#: ../../../<reno.sphinxext branch>:1372 current
msgid "Visualization Deprecations"
msgstr ""

#: ../../../<reno.sphinxext branch>:1376 current
msgid ""
"The default ``matplotlib`` drawer setting now issues a ``FutureWarning``,"
" as the default style is changing to the ``\"iqp\"`` style (previously "
"known as ``\"iqx\"``). The old default is available as the "
"``\"clifford\"`` style. To silence the warning, you can explicitly set "
"the desired style, e.g.::"
msgstr ""

#: ../../../<reno.sphinxext branch>:1392 current
msgid ""
"Passing a circuit to :func:`qiskit.visualization.timeline_drawer` that "
"does not have scheduled node start-time information is deprecated.  Only "
"circuits that have gone through one of the scheduling analysis passes "
"(for example :class:`.ALAPScheduleAnalysis` or "
":class:`.ASAPScheduleAnalysis`) can be visualised.  If you have used one "
"of the old-style scheduling passes (for example :class:`.ALAPSchedule` or"
" :class:`.ASAPSchedule`), you can propagate the scheduling information by"
" running::"
msgstr ""

#: ../../../<reno.sphinxext branch>:1409 current
msgid ""
"This behaviour was previously intended to be deprecated in Qiskit 0.37, "
"but due to a bug in the warning, it was not displayed to users until now."
"  The behaviour will be removed in Qiskit 1.0."
msgstr ""

#: ../../../<reno.sphinxext branch>:1420 current
msgid ""
"The maximum number of qubits to consider for matrix multiplication-based "
"commutativity check in :class:`~.CommutationChecker` is now limited to 3 "
"by default. Fixed `#10488 <https://github.com/Qiskit/qiskit-"
"terra/issues/10488>`__"
msgstr ""

#: ../../../<reno.sphinxext branch>:1426 current
msgid ""
"The :class:`.GateDirection` transpiler pass will now use discrete-basis "
"translations rather than relying on a continuous :class:`.RYGate`, which "
"should help make some discrete-basis-set targets slightly more reliable."
"  In general, :func:`.transpile` only has partial support for basis sets "
"that do not contain a continuously-parametrised operation, and so it may "
"not always succeed in these situations, and will almost certainly not "
"produce optimal results."
msgstr ""

#: ../../../<reno.sphinxext branch>:1434 current
msgid ""
"Fixed :class:`~.CommutationAnalysis` to group gates on a wire into sets, "
"with each set only containing gates that pairwise commute. This prevents "
":class:`~.CommutationCancellation` from performing unsound optimizations."
" See `#8020 <https://github.com/Qiskit/qiskit-terra/issues/8020>`__"
msgstr ""

#: ../../../<reno.sphinxext branch>:1441 current
msgid ""
":class:`.CUGate` will now behave correctly during calls to "
":meth:`.QuantumCircuit.assign_parameters`. Previously, it would cause "
"various odd errors, often some time after the initial circuit assignment."
" See `#7326 <https://github.com/Qiskit/qiskit/issues/7326>`__, `#7410 "
"<https://github.com/Qiskit/qiskit/issues/7410>`__, `#9627 "
"<https://github.com/Qiskit/qiskit/issues/9627>`__, `#10002 "
"<https://github.com/Qiskit/qiskit/issues/10002>`__, and `#10131 "
"<https://github.com/Qiskit/qiskit/issues/10131>`__."
msgstr ""

#: ../../../<reno.sphinxext branch>:1449 current
msgid ""
"The control-flow builder interface (the context-manager forms of "
":meth:`.QuantumCircuit.if_test`, :meth:`~.QuantumCircuit.while_loop`, "
":meth:`~.QuantumCircuit.for_loop` and :meth:`~.QuantumCircuit.switch`) "
"will now correctly track a separate global-phase advancement within that "
"block.  You can add a global-phase advancement to an inner block by "
"assigning to :attr:`.QuantumCircuit.global_phase` within a builder "
"scope::"
msgstr ""

#: ../../../<reno.sphinxext branch>:1476 current
msgid ""
"The meaning of :attr:`.QuantumCircuit.global_phase` is taken to be the "
"global-phase advancement that is inherent to a single execution of the "
"block.  It is still a *global* phase advancement, in that if the block is"
" entered, the phase of all qubits in the entire program will be advanced."
msgstr ""

#: ../../../<reno.sphinxext branch>:1482 current
msgid ""
"Fix the coloring of the ``\"iqx\"`` and ``\"iqx-dark\"`` matplotlib color"
" schemes, which previously drew the :class:`.RZGate`, :class:`.RZZGate`, "
"(multi-)controlled :class:`.PhaseGate`\\s and :class:`.iSwapGate` in the "
"wrong color."
msgstr ""

#: ../../../<reno.sphinxext branch>:1488 current
msgid ""
"The hash of a :class:`.Parameter` is now equal to the hashes of any "
":class:`.ParameterExpression` that it compares equal to.  Previously the "
"hashes were different, which would cause spurious additional entries in "
"hashmaps when :class:`.Parameter` and :class:`.ParameterExpression` "
"values were mixed in the same map as it violated Python's data model."
msgstr ""

#: ../../../<reno.sphinxext branch>:1495 current
msgid ""
"Fixed a bug in QPY serialization (:mod:`qiskit.qpy`) where controlled "
"unitary gates in a circuit could result would fail to deserialize.  Fixed"
" `#10802 <https://github.com/Qiskit/qiskit-terra/issues/10802>`__."
msgstr ""

#: ../../../<reno.sphinxext branch>:1501 current
msgid ""
"Fixes the implementation of :func:`.random_statevector` so that it "
"samples from the uniform distribution."
msgstr ""

#: ../../../<reno.sphinxext branch>:1505 current
msgid ""
"The pass :class:`.NoiseAdaptiveLayout` now takes "
":class:`~qiskit.transpiler.CouplingMap` as an optional argument. This is "
"used by the plugin to control on inconsistency between "
":meth:`~qiskit.providers.BackendV1.configuration` and "
":meth:`~qiskit.providers.BackendV1.properties`, like in the case of "
":class:`.FakeMelbourne`. Fixed `#7677 <https://github.com/Qiskit/qiskit-"
"terra/issues/7677>`__."
msgstr ""

#: ../../../<reno.sphinxext branch>:1513 current
msgid ""
"The methods :meth:`.QuantumCircuit.copy` and "
":meth:`~.QuantumCircuit.copy_empty_like` will now raise an error if the "
"``name`` argument is incorrectly typed, instead of generating an invalid "
"circuit."
msgstr ""

#: ../../../<reno.sphinxext branch>:1518 current
msgid ""
"The ``\"decay\"`` heuristic of :class:`.SabreSwap` and "
":class:`.SabreLayout` now tracks the depth correctly on physical qubits "
"rather than mistakenly tracking the \"depth\" of swaps on virtual qubits."
msgstr ""

#: ../../../<reno.sphinxext branch>:1524 current
msgid ""
"Fixed an oversight in the :class:`~.ECRGate` that prevented setting an "
":attr:`.ECRGate.label` attribute at object construction time. All other "
":class:`~.Gate` classes and subclasses enable setting a ``label`` keyword"
" argument in the constructor."
msgstr ""

#: ../../../<reno.sphinxext branch>:1531 current
msgid ""
"Fixed an oversight in the :class:`~.Gate` (and standard-library "
"subclasses) constructor where the :attr:`~.Gate.duration` and "
":attr:`~.Gate.unit` attributes could not be set as keyword arguments "
"during construction. The parent class :class:`~.circuit.Instruction` "
"supported setting this but :class:`~.Gate` was previously not exposing "
"this interface correctly."
msgstr ""

#: ../../../<reno.sphinxext branch>:1539 current
msgid ""
"Added support to allow :class:`SparsePauliOp` default initialization "
"passing an empty iterable to the static methods "
":meth:`~.SparsePauliOp.from_list` and "
":meth:`~.SparsePauliOp.from_sparse_list`. Fixed `#10159 "
"<https://github.com/Qiskit/qiskit-terra/issues/10159>`__."
msgstr ""

#: ../../../<reno.sphinxext branch>:1551 current
msgid ""
"This version of Qiskit is explicitly pinned to the Numpy 1.x series, "
"because it includes compiled extensions that are not yet compiled against"
" the as-yet-unreleased Numpy 2.x series.  We will release a new version "
"of Qiskit with Numpy 2.x support as soon as feasible."
msgstr ""

#: ../../../<reno.sphinxext branch>:1555 current
msgid ""
"We cannot prevent your package manager from resolving to older versions "
"of Qiskit (which do not have the same pin but are still likely to be "
"incompatible) if you forcibly try to install Qiskit alongside Numpy 2, "
"before we have released a compatible version."
msgstr ""

#: ../../../<reno.sphinxext branch>:1563 current
msgid "0.25.0rc1"
msgstr ""

#: ../../../<reno.sphinxext branch>:1568 current
msgid "New Features"
msgstr ""

#: ../../../<reno.sphinxext branch>:1572 current
msgid "Added two new options to :class:`~BlockCollector`."
msgstr ""

#: ../../../<reno.sphinxext branch>:1574 current
msgid ""
"The first new options ``split_layers`` allows to split the collected "
"block into sub-blocks over disjoint qubit subsets, i.e. into depth-1 sub-"
"blocks."
msgstr ""

#: ../../../<reno.sphinxext branch>:1577 current
msgid ""
"The second new option ``collect_from_back`` allows to greedily collect "
"blocks starting from the outputs of the circuit. This is important in "
"combination with ALAP-scheduling passes where we may prefer to put gates "
"in the later rather than earlier blocks."
msgstr ""

#: ../../../<reno.sphinxext branch>:1583 current
msgid ""
"Added new options ``split_layers`` and ``collect_from_back`` to "
":class:`~CollectLinearFunctions` and :class:`~CollectCliffords` "
"transpiler passes."
msgstr ""

#: ../../../<reno.sphinxext branch>:1586 current
msgid ""
"When ``split_layers`` is `True`, the collected blocks are split into into"
" sub-blocks over disjoint qubit subsets, i.e. into depth-1 sub-blocks. "
"Consider the following example::"
msgstr ""

#: ../../../<reno.sphinxext branch>:1609 current
msgid ""
"The original circuit is linear. When collecting linear gates without "
"splitting into layers, we should end up with a single linear function. "
"However, when collecting linear gates and splitting into layers, we "
"should end up with 4 linear functions."
msgstr ""

#: ../../../<reno.sphinxext branch>:1613 current
msgid ""
"When ``collect_from_back`` is `True`, the blocks are greedily collected "
"from the outputs towards the inputs of the circuit. Consider the "
"following example::"
msgstr ""

#: ../../../<reno.sphinxext branch>:1631 current
msgid ""
"The original circuit contains a Hadamard gate, so that the `CX(1, 0)` "
"gate can be combined either with `CX(1, 2)` or with `SWAP(1, 2)`, but not"
" with both. When ``collect_from_back`` is `False`, the linear blocks are "
"greedily collected from the start of the circuit, and thus `CX(1, 0)` is "
"combined with `CX(1, 2)`. When ``collect_from_back`` is `True`, the "
"linear blocks are greedily collected from the end of the circuit, and "
"thus `CX(1, 0)` is combined with `SWAP(1, 2)`."
msgstr ""

#: ../../../<reno.sphinxext branch>:1640 current
msgid ""
"Added :meth:`.DAGCircuit.classical_predecessors` and "
":meth:`.DAGCircuit.classical_successors`, an alternative to select the "
"classical wires without having to go to the inner graph object directly "
"of a node in the DAG. The following example illustrates the new "
"functionality::"
msgstr ""

#: ../../../<reno.sphinxext branch>:1667 current
msgid ""
"Enabled performing the "
":class:`qiskit.transpiler.passes.CommutativeCancellation` pass inside the"
" blocks of :class:`qiskit.circuit.ControlFlowOp`. This pass reorders some"
" commuting gates and reduces resulting pairs of self-inverse gates. "
"Previously, the blocks in control flow operations were skipped by this "
"pass. The new feature operates recursively, that is, it will act on "
"control flow operations inside blocks."
msgstr ""

#: ../../../<reno.sphinxext branch>:1675 current
msgid ""
"Enabled performing the :class:`.ConsolidateBlocks` pass inside the blocks"
" of :class:`.ControlFlowOp`. This pass collects several sequences of "
"gates and replaces each sequence with the equivalent numeric unitary "
"gate. This new feature enables applying this pass recursively to the "
"blocks in control flow operations. Note that the meaning of \"block\" in "
":class:`.ConsolidateBlocks` is unrelated to that in "
":class:`.ControlFlowOp`."
msgstr ""

#: ../../../<reno.sphinxext branch>:1684 current
msgid ""
"Added :meth:`.DAGCircuit.quantum_causal_cone` to obtain the causal cone "
"of a qubit in a :class:`~.DAGCircuit`. The following example shows its "
"correct usage::"
msgstr ""

#: ../../../<reno.sphinxext branch>:1709 current
msgid ""
"Added a new function , :func:`negativity` that adds support for "
"calculating entanglement measures negativity of an quantum state. An "
"illustrative example for using the above function is given below:"
msgstr ""

#: ../../../<reno.sphinxext branch>:1731 current
msgid ""
"A new method, :meth:`~qiskit.dagcircuit.dag.find_bit`, has been added to "
"the :class:`~qiskit.dagcircuit.DagCircuit` class. This is a method to get"
" mapping of Qubit and Clbit to positional index.  The method takes a Bit "
"as input, checks whether it's a Qubit or a Clbit,  and then returns the "
"corresponding BitLocations from the respective index  dictionary "
"(_qubit_indices or _clbit_indices). The BitLocations is a namedtuple "
"which includes the positional index of the  bit in the circuit and a list"
" of registers containing the bit. If the bit  cannot be found or is of an"
" unknown type, it raises a DAGCircuitError."
msgstr ""

#: ../../../<reno.sphinxext branch>:1743 current
msgid ""
"The transpiler's built-in :class:`.EquivalenceLibrary` has been taught "
"the circular Pauli relations :math:`X = iYZ`, :math:`Y = iZX` and "
":math:`Z = iXY`.  This should make transpiling to constrained, and "
"potentially incomplete, basis sets more reliable. See `#10293 "
"<https://github.com/Qiskit/qiskit-terra/issues/10293>`__ for more detail."
msgstr ""

#: ../../../<reno.sphinxext branch>:1750 current
msgid ""
"Add ``schmidt_decomposition`` function to the ``quantum_info`` module. "
"This function works with the ``Statevector`` and ``DensityMatrix`` "
"classes for bipartite pure states."
msgstr ""

#: ../../../<reno.sphinxext branch>:1756 current
msgid ""
"Control-flow operations are now supported through the transpiler at all "
"optimization levels, including levels 2 and 3 (e.g. calling "
":func:`.transpile` or :func:`.generate_preset_pass_manager` with keyword "
"argument ``optimization_level=3``)."
msgstr ""

#: ../../../<reno.sphinxext branch>:1763 current
msgid ""
"Added a new synthesis algorithm "
":func:`qiskit.synthesis.linear_phase.synth_cx_cz_depth_line_my` of a CX "
"circuit followed by a CZ circuit for linear nearest neighbor (LNN) "
"connectivity in 2-qubit depth of at most 5n using CX and phase gates (S, "
"Sdg or Z). The synthesis algorithm is based on the paper of Maslov and "
"Yang (https://arxiv.org/abs/2210.16195). The algorithm accepts a binary "
"invertible matrix ``mat_x`` representing the CX-circuit, a binary "
"symmetric matrix ``mat_z`` representing the CZ-circuit, and returns a "
"quantum circuit with 2-qubit depth of at most 5n computing the "
"composition of the CX and CZ circuits. The following example illustrates "
"the new functionality::"
msgstr ""

#: ../../../<reno.sphinxext branch>:1778 current
msgid ""
"This algorithm is now used by default in the Clifford synthesis algorithm"
" :func:`qiskit.synthesis.clifford.synth_clifford_depth_lnn` that "
"optimizes 2-qubit depth for LNN connectivity, improving the 2-qubit depth"
" from 9n+4 to 7n+2. The clifford synthesis algorithm can be used as "
"follows::"
msgstr ""

#: ../../../<reno.sphinxext branch>:1789 current
msgid ""
"The above synthesis can be further improved as described in the paper by "
"Maslov and Yang, using local optimization between 2-qubit layers. This "
"improvement is left for follow-up work."
msgstr ""

#: ../../../<reno.sphinxext branch>:1795 current
msgid ""
":meth:`.DAGCircuit.substitute_node` gained a ``propagate_condition`` "
"keyword argument that is analogous to the same argument in "
":meth:`~.DAGCircuit.substitute_node_with_dag`.  Setting this to ``False``"
" opts out of the legacy behaviour of copying a condition on the ``node`` "
"onto the new ``op`` that is replacing it."
msgstr ""

#: ../../../<reno.sphinxext branch>:1800 current
msgid ""
"This option is ignored for general control-flow operations, which will "
"never propagate their condition, nor accept a condition from another "
"node."
msgstr ""

#: ../../../<reno.sphinxext branch>:1805 current
msgid ""
"Introduced a new method, :meth:`~.DAGCircuit.separable_circuits`, which "
"returns a list of :class:`.DAGCircuit` objects, one for each set of "
"connected qubits which have no gates connecting them to another set."
msgstr ""

#: ../../../<reno.sphinxext branch>:1809 current
msgid ""
"Each :class:`~.DAGCircuit` instance returned by this method will contain "
"the same number of clbits as ``self``. This method will not return "
":class:`~.DAGCircuit` instances consisting solely of clbits."
msgstr ""

#: ../../../<reno.sphinxext branch>:1815 current
msgid ""
"The :class:`~qiskit.pulse.SymbolicPulse` library was extended. The new "
"pulses in the library are:"
msgstr ""

#: ../../../<reno.sphinxext branch>:1817 current
msgid ":func:`~qiskit.pulse.library.GaussianDeriv`"
msgstr ""

#: ../../../<reno.sphinxext branch>:1818 current
msgid ":func:`~qiskit.pulse.library.Sech`"
msgstr ""

#: ../../../<reno.sphinxext branch>:1819 current
msgid ":func:`~qiskit.pulse.library.SechDeriv`"
msgstr ""

#: ../../../<reno.sphinxext branch>:1820 current
msgid ":func:`~qiskit.pulse.library.Square`"
msgstr ""

#: ../../../<reno.sphinxext branch>:1822 current
msgid ""
"The new functions return a :class:`ScalableSymbolicPulse`, and match the "
"functionality of the corresponding functions in the discrete pulse "
"library, with the exception of `Square()` for which a phase of "
":math:`2\\\\pi` shifts by a full cycle (contrary to the discrete "
"`square()` where such a shift was induced by a :math:`\\\\pi` phase)."
msgstr ""

#: ../../../<reno.sphinxext branch>:1829 current
msgid ""
"In :class:`~qiskit.visualization.circuit.MatplotlibDrawer`, operations "
"built from :class:`~qiskit.circuit.ControlFlowOp`, including ``if``, "
"``else``, ``while``, ``for``, and ``switch/case``, whether directly "
"instantiated or built using methods in "
":class:`~qiskit.circuit.QuantumCircuit`, will now fully display the "
"circuits defined in the ControlFlowOps wrapped with boxes to delineate "
"the circuits."
msgstr ""

#: ../../../<reno.sphinxext branch>:1838 current
msgid ""
"Added :attr:`~.Target.concurrent_measurements` which represents a "
"hardware constraint of qubits measured concurrently. This constraint is "
"provided in the nested list form, in which each element represents qubit "
"group to be measured together.  In an example below,"
msgstr ""

#: ../../../<reno.sphinxext branch>:1847 current
msgid ""
"qubits 0 and 1, and 2, 3 and 4 are measured together on the device. This "
"constraint doesn't block measuring an individual qubit, however, Qiskit "
"scheduler must consider the alignment of  measure operations for those "
"qubits."
msgstr ""

#: ../../../<reno.sphinxext branch>:1854 current
msgid ""
"The performance of :meth:`.QuantumCircuit.assign_parameters` and "
":meth:`~.QuantumCircuit.bind_parameters` has significantly increased for "
"large circuits with structures typical of applications uses. This "
"includes most circuits based on the :class:`.NLocal` structure, such as "
":class:`.EfficientSU2`.  See `#10282 <https://github.com/Qiskit/qiskit-"
"terra/issues/10282>`__ for more detail."
msgstr ""

#: ../../../<reno.sphinxext branch>:1862 current
msgid ""
"The method :meth:`.QuantumCircuit.assign_parameters` has gained two new "
"keywords arguments: ``flat_input`` and ``strict``.  These are advanced "
"options that can be used to speed up the method when passing the "
"parameter bindings as a dictionary; ``flat_input=True`` is a guarantee "
"that the dictionary keys contain only :class:`.Parameter` instances (not "
":class:`.ParameterVector`\\ s), and ``strict=False`` allows the "
"dictionary to contain parameters that are not present in the circuit.  "
"Using these two options can reduce the overhead of input normalisation in"
" this function."
msgstr ""

#: ../../../<reno.sphinxext branch>:1871 current
msgid ""
"The method :meth:`~qiskit.pulse.schedule.ScheduleBlock.filter` is "
"activated in the :class:`~qiskit.pulse.schedule.ScheduleBlock` class. "
"This method enables users to retain only "
":class:`~qiskit.pulse.Instruction` objects which pass through all the "
"provided filters. As builtin filter conditions, pulse "
":class:`~qiskit.pulse.channels.Channel` subclass instance and "
":class:`~qiskit.pulse.instructions.Instruction` subclass type can be "
"specified. User-defined callbacks taking "
":class:`~qiskit.pulse.instructions.Instruction` instance can be added to "
"the filters, too."
msgstr ""

#: ../../../<reno.sphinxext branch>:1883 current
msgid ""
"The method :meth:`~qiskit.pulse.schedule.ScheduleBlock.exclude` is "
"activated in the :class:`~qiskit.pulse.schedule.ScheduleBlock` class. "
"This method enables users to retain only "
":class:`~qiskit.pulse.Instruction` objects which do not pass at least one"
" of all the provided filters. As builtin filter conditions, pulse "
":class:`~qiskit.pulse.channels.Channel` subclass instance and "
":class:`~qiskit.pulse.instructions.Instruction` subclass type can be "
"specified. User-defined callbacks taking "
":class:`~qiskit.pulse.instructions.Instruction` instance can be added to "
"the filters, too. This method is the complement of "
":meth:`~qiskit.pulse.schedule.ScheduleBlock.filter`, so the following "
"condition is always satisfied: ``block.filter(*filters) + "
"block.exclude(*filters) == block`` in terms of instructions included, "
"where ``block`` is a :class:`~qiskit.pulse.schedule.ScheduleBlock` "
"instance."
msgstr ""

#: ../../../<reno.sphinxext branch>:1900 current
msgid ""
"The transpiler pass :class:`SetLayout` now is able to be constructed with"
" a list of integers that represent the physical qubits on which the "
"quantum circuit will be mapped on. That is, the first qubit in the "
"circuit will be allocated in the physical qubit in the position zero of "
"the list, and so on."
msgstr ""

#: ../../../<reno.sphinxext branch>:1904 current
msgid ""
"Added a new keyword argument ``flatten`` to the constructor for the "
"following classes:"
msgstr ""

#: ../../../<reno.sphinxext branch>:1907 current
msgid ":class:`~.EfficientSU2`"
msgstr ""

#: ../../../<reno.sphinxext branch>:1908 current
msgid ":class:`~.ExcitationPreserving`"
msgstr ""

#: ../../../<reno.sphinxext branch>:1909 current
msgid ":class:`~.NLocal`"
msgstr ""

#: ../../../<reno.sphinxext branch>:1910 current
msgid ":class:`~.RealAmplitudes`"
msgstr ""

#: ../../../<reno.sphinxext branch>:1911 current
msgid ":class:`~.TwoLocal`"
msgstr ""

#: ../../../<reno.sphinxext branch>:1912 current
msgid ":class:`~.EvolvedOperatorAnsatz`"
msgstr ""

#: ../../../<reno.sphinxext branch>:1913 current
msgid ":class:`~.QAOAAnsatz`"
msgstr ""

#: ../../../<reno.sphinxext branch>:1915 current
msgid ""
"If this argument is set to ``True`` the :class:`~.QuantumCircuit` "
"subclass generated will not wrap the implementation into :class:`~.Gate` "
"or :class:`~.circuit.Instruction` objects. While this isn't optimal for "
"visualization it typically results in much better runtime performance, "
"especially with :meth:`.QuantumCircuit.bind_parameters` and "
":meth:`.QuantumCircuit.assign_parameters` which can see a substatial "
"runtime improvement with a flattened output compared to the nested "
"wrapped default output."
msgstr ""

#: ../../../<reno.sphinxext branch>:1926 current
msgid ""
"Add new :meth:`~qiskit.pulse.gaussian_square_echo` pulse shape. This "
"pulse is composed by three :class:`~qiskit.pulse.GaussianSquare` pulses. "
"The  first two are echo pulses with duration half of the total duration "
"and implement rotary tones. The third pulse is a cancellation tone that "
"lasts the full duration of the pulse and implements correcting single "
"qubit rotations."
msgstr ""

#: ../../../<reno.sphinxext branch>:1935 current
msgid ""
"A new lazy import tester, :data:`.HAS_PYGMENTS`, is available for testing"
" for the presence of `the Pygments syntax highlighting library "
"<https://pygments.org/>`__."
msgstr ""

#: ../../../<reno.sphinxext branch>:1940 current
msgid ""
"Allowing to construct a :class:`.LinearFunction` object from more general"
" quantum circuits, that may contain:"
msgstr ""

#: ../../../<reno.sphinxext branch>:1943 current
msgid ""
"Barriers (of type :class:`~qiskit.circuit.Barrier`) and delays "
"(:class:`~qiskit.circuit.Delay`), which are simply ignored"
msgstr ""

#: ../../../<reno.sphinxext branch>:1945 current
msgid "Permutations (of type :class:`~qiskit.circuit.library.PermutationGate`)"
msgstr ""

#: ../../../<reno.sphinxext branch>:1946 current
msgid "Other linear functions"
msgstr ""

#: ../../../<reno.sphinxext branch>:1947 current
msgid ""
"Cliffords (of type :class:`.Clifford`), when the Clifford represents a "
"linear function (and a ``CircuitError`` exception is raised if not)"
msgstr ""

#: ../../../<reno.sphinxext branch>:1949 current
msgid "Nested quantum circuits of this form"
msgstr ""

#: ../../../<reno.sphinxext branch>:1953 current
msgid ""
"Added :meth:`.LinearFunction.__eq__` method. Two objects of type "
":class:`.LinearFunction` are considered equal when their representations "
"as binary invertible matrices are equal."
msgstr ""

#: ../../../<reno.sphinxext branch>:1958 current
msgid ""
"Added :meth:`.LinearFunction.extend_with_identity` method, which allows "
"to extend a linear function over ``k`` qubits to a linear function over "
"``n >= k`` qubits, specifying the new positions of the original qubits "
"and padding with identities on the remaining qubits."
msgstr ""

#: ../../../<reno.sphinxext branch>:1965 current
msgid ""
"Added two methods for pretty-printing :class:`.LinearFunction` objects: "
":meth:`.LinearFunction.mat_str`, which returns the string representation "
"of the linear function viewed as a matrix with 0/1 entries, and "
":meth:`.LinearFunction.function_str`, which returns the string "
"representation of the linear function viewed as a linear transformation."
msgstr ""

#: ../../../<reno.sphinxext branch>:1973 current
msgid ""
"The instructions :class:`.StatePreparation` and "
":class:`~.extensions.Initialize`, and their associated circuit methods "
":meth:`.QuantumCircuit.prepare_state` and "
":meth:`~.QuantumCircuit.initialize`, gained a keyword argument "
"``normalize``, which can be set to ``True`` to automatically normalize an"
" array target.  By default this is ``False``, which retains the current "
"behaviour of raising an exception when given non-normalized input."
msgstr ""

#: ../../../<reno.sphinxext branch>:1981 current
msgid ""
"Added utility function "
":func:`qiskit.transpiler.passes.utils._block_to_matrix` that can  "
"generate a matrix based on a block of operations between two qubits. This"
" function can be used in transpiler passes that work on some decomposed "
"circuits such as :class:`.ConsolidateBlocks`."
msgstr ""

#: ../../../<reno.sphinxext branch>:1987 current
msgid ""
"The transpiler's built-in :class:`.EquivalenceLibrary` has been taught "
"more Pauli-rotation equivalences between the one-qubit :math:`R_X`, "
":math:`R_Y` and :math:`R_Z` gates, and between the two-qubit "
":math:`R_{XX}`, :math:`R_{YY}` and :math:`R_{ZZ}` gates.  This should "
"make simple basis translations more reliable, especially circuits that "
"use :math:`Y` rotations. See `#7332 <https://github.com/Qiskit/qiskit-"
"terra/issues/7332>`__."
msgstr ""

#: ../../../<reno.sphinxext branch>:1995 current
msgid ""
"The OpenQASM 3 exporters (:func:`.qasm3.dump`, :func:`~.qasm3.dumps` and "
":class:`~.qasm3.Exporter`) have a new ``allow_aliasing`` argument, which "
"will eventually replace the ``alias_classical_registers`` argument.  This"
" controls whether aliasing is permitted for either classical bits or "
"qubits, rather than the option only being available for classical bits."
msgstr ""

#: ../../../<reno.sphinxext branch>:2002 current
msgid ""
"QPY supports the :class:`~qiskit.pulse.configuration.Discriminator` and "
":class:`~qiskit.pulse.configuration.Kernel` objects. This feature enables"
" users to serialize and deserialize the "
":class:`~qiskit.pulse.instructions.Acquire` instructions with these "
"objects using QPY."
msgstr ""

#: ../../../<reno.sphinxext branch>:2010 current
msgid ""
"Some restrictions when using ``wire_order`` in the circuit drawers had "
"been relaxed. Now, ``wire_order`` can list just qubits and, in that case,"
" it can be used with ``cregbundle=True``, since it will not affect the "
"classical bits."
msgstr ""

#: ../../../<reno.sphinxext branch>:2044 current
msgid ""
"Control-flow operations are now supported by the Sabre family of "
"transpiler passes, namely layout pass :class:`.SabreLayout` and routing "
"pass :class:`.SabreSwap`. Function :func:`.transpile` keyword arguments "
"``layout_method`` and ``routing_method`` now accept the option \"sabre\" "
"for circuits with control flow, which was previously unsupported."
msgstr ""

#: ../../../<reno.sphinxext branch>:2053 current
msgid ""
"Adds support for multiplication of :class:`.SparsePauliOp` objects with "
":class:`.Parameter` objects by using the * operator, for example::"
msgstr ""

#: ../../../<reno.sphinxext branch>:2065 current
msgid ""
"Added the option to pass a callback to the :class:`.UMDA` optimizer, "
"which allows to keep track of the number of function evaluations, the "
"current parameters, and the  best achieved function value."
msgstr ""

#: ../../../<reno.sphinxext branch>:2077 current
msgid ""
"A new :mod:`qiskit.passmanager` module has been added to the Qiskit "
"library. This module implements a generic pass manager and flow "
"controllers, and provides infrastructure to manage execution of pass "
"manager tasks. The module provides base classes for passes "
"(:class:`.GenericPass`) and flow controllers (:class:`.BaseController`), "
"as well as a new interface class, :class:`.passmanager.Task`, to manage "
"the execution of the pass manager (see the :meth:`.Task.execute` method)."
" These new classes follow the composite pattern, as flow controllers are "
"collections of passes, and a controller can be recursively nested into "
"the task pipeline. It must also be noted the base classes are not not "
"aware of the input and output object types, and they must be subclassed "
"for a particular program type to optimize. This unified design reduces "
"the complexity of the conventional pass manager, and no longer requires "
"the use of classes such as the :class:`.RunningPassManager` to handle the"
" execution logic dispatch and task structure renormalization. The "
":mod:`qiskit.transpiler` module has been reorganized to rebuild the "
"existing pass managers based off of the generic pass manager. See upgrade"
" notes for more details."
msgstr ""

#: ../../../<reno.sphinxext branch>:2100 current
msgid "Known Issues"
msgstr ""

#: ../../../<reno.sphinxext branch>:2104 current
msgid ""
"Added support for taking absolute values of "
":class:`.ParameterExpression`\\s. For example,  the following is now "
"possible::"
msgstr ""

#: ../../../<reno.sphinxext branch>:2120 current
msgid "Upgrade Notes"
msgstr ""

#: ../../../<reno.sphinxext branch>:2124 current
msgid ""
"Changed :meth:`.QuantumCircuit.assign_parameters` to bind assigned "
"integer and float values directly into the parameters of "
":class:`~qiskit.circuit.Instruction` instances in the circuit rather than"
" binding the values wrapped within a "
":class:`~qiskit.circuit.ParameterExpression`. This change should have "
"little user impact as "
"``float(QuantumCircuit.data[i].operation.params[j])`` still produces a "
"``float`` (and is the only way to access the value of a "
":class:`~qiskit.circuit.ParameterExpression`). Also, "
":meth:`~qiskit.circuit.Instruction` parameters could already be ``float``"
" as well as a :class:`~qiskit.circuit.ParameterExpression`, so code "
"dealing with instruction parameters should already handle both cases. The"
" most likely chance for user impact is in code that uses ``isinstance`` "
"to check for :class:`~qiskit.circuit.ParameterExpression` and behaves "
"differently depending on the result. Additionally, qpy serializes the "
"numeric value in a bound :class:`~qiskit.circuit.ParameterExpression` at "
"a different precision than a ``float`` (see also the related bug fix note"
" about :meth:`.QuantumCircuit.assign_parameters`)."
msgstr ""

#: ../../../<reno.sphinxext branch>:2144 current
msgid ""
":meth:`.Clifford.from_circuit` will no longer attempt to resolve "
"instructions whose :attr:`~.circuit.Instruction.definition` fields are "
"mutually recursive with some other object. Such recursive definitions are"
" already a violation of the strictly hierarchical ordering that the "
":attr:`~.circuit.Instruction.definition` field requires, and code should "
"not rely on this being possible at all.  If you want to define "
"equivalences that are permitted to have (mutual) cycles, use an "
":class:`.EquivalenceLibrary`."
msgstr ""

#: ../../../<reno.sphinxext branch>:2153 current
msgid ""
"Qiskit Terra 0.25 has dropped support for Python 3.7 following "
"deprecation warnings started in Qiskit Terra 0.23.  This is consistent "
"with Python 3.7's end-of-life on the 27th of June, 2023. To continue "
"using Qiskit, you must upgrade to a more recent version of Python."
msgstr ""

#: ../../../<reno.sphinxext branch>:2159 current
msgid ""
"The OpenQASM 2 constructor methods on :class:`.QuantumCircuit` "
"(:meth:`~.QuantumCircuit.from_qasm_str` and "
":meth:`~.QuantumCircuit.from_qasm_file`) have been switched to use the "
"Rust-based parser added in Qiskit Terra 0.24.  This should result in "
"significantly faster parsing times (10 times or more is not uncommon) and"
" massively reduced intermediate memory usage."
msgstr ""

#: ../../../<reno.sphinxext branch>:2165 current
msgid ""
"The :class:`.QuantumCircuit` methods are kept with the same interface for"
" continuity; the preferred way to access the OpenQASM 2 importer is to "
"use :func:`.qasm2.load` and :func:`.qasm2.loads`, which offer an expanded"
" interface to control the parsing and construction."
msgstr ""

#: ../../../<reno.sphinxext branch>:2171 current
msgid ""
"The maximum number of trials evaluated when searching for the best layout"
" using :class:`.VF2Layout` and :class:`.VF2PostLayout` is now limited in "
":func:`qiskit.transpiler.preset_passmanagers.level_1_pass_manager`, "
":func:`qiskit.transpiler.preset_passmanagers.level_2_pass_manager`, and "
":func:`qiskit.transpiler.preset_passmanagers.level_3_pass_manager` to "
"``2,500``, ``25,000``, and ``250,000``, respectively. Previously, all "
"possible layouts were evaluated. This change was made to prevent "
"transpilation from hanging during layout scoring for circuits with many "
"connected components on larger devices, which scales combinatorially "
"since each connected component must be evaluated in all possible "
"positions on the device. To perform a full search as before, manually run"
" :class:`.VF2PostLayout` over the transpiled circuit in strict mode, "
"specifying ``0`` for ``max_trials``."
msgstr ""

#: ../../../<reno.sphinxext branch>:2189 current
msgid ""
"The OpenQASM 3 exporters (:func:`.qasm3.dump`, :func:`~.qasm3.dumps` and "
":class:`~.qasm3.Exporter`) will now use fewer \"register alias\" "
"definitions in its output.  The circuit described will not change, but it"
" will now preferentially export in terms of direct ``bit``, ``qubit`` and"
" ``qubit[n]`` types rather than producing a ``_loose_bits`` register and "
"aliasing more registers off this.  This is done to minimise the number of"
" advanced OpenQASM 3 features in use, and to avoid introducing "
"unnecessary array structure into programmes that do not require it."
msgstr ""

#: ../../../<reno.sphinxext branch>:2198 current
msgid ""
"The QPY format version emitted by :class:`~.qpy.dump` has increased to 8."
" This new format version adds support for serializing the "
":attr:`.QuantumCircuit.layout` attribute."
msgstr ""

#: ../../../<reno.sphinxext branch>:2204 current
msgid ""
"The deprecated ``circuit_cregs`` argument to the constructor for the "
":class:`~.InstructionSet` class has been removed. It was deprecated in "
"the 0.19.0 release. If you were using this argument and manually "
"constructing an :class:`~.InstructionSet` object (which should be quite "
"uncommon as it's mostly used internally) you should pass a callable to "
"the ``resource_requester`` keyword argument instead. For example::"
msgstr ""

#: ../../../<reno.sphinxext branch>:2237 current
msgid ""
"In the internal "
"``qiskit.visualization.circuit.matplotlib.MatplotlibDrawer`` object, the "
"arguments ``layout``, ``global_phase``, ``qregs`` and ``cregs`` have been"
" removed. They were originally deprecated in Qiskit Terra 0.20. These "
"objects are simply inferred from the given ``circuit`` now."
msgstr ""

#: ../../../<reno.sphinxext branch>:2242 current
msgid ""
"This is an internal worker class of the visualization routines. It is "
"unlikely you will need to change any of your code."
msgstr ""

#: ../../../<reno.sphinxext branch>:2247 current
msgid ""
"Support for passing in lists of argument values to the "
":func:`~.transpile` function is removed. This functionality was "
"deprecated as part of the 0.23.0 release and is now being removed. You "
"are still able to pass in a list of :class:`~.QuantumCircuit` objects for"
" the first positional argument, what has been removed is the broadcasting"
" lists of the other arguments to each circuit in that input list. "
"Removing this functionality was necessary to greatly reduce the overhead "
"for parallel execution for transpiling multiple circuits at once. If "
"you’re using this functionality currently you can call "
":func:`~.transpile` multiple times instead. For example if you were "
"previously doing something like::"
msgstr ""

#: ../../../<reno.sphinxext branch>:2270 current
msgid "instead you should now run something like::"
msgstr ""

#: ../../../<reno.sphinxext branch>:2284 current
msgid ""
"You can also leverage :func:`~.parallel_map` or ``multiprocessing`` from "
"the Python standard library if you want to run this in parallel."
msgstr ""

#: ../../../<reno.sphinxext branch>:2289 current
msgid ""
"The ``qiskit.util`` import location has been removed, as it had been "
"deprecated since Qiskit Terra 0.17.  Users should use the new import "
"location, ``qiskit.utils``."
msgstr ""

#: ../../../<reno.sphinxext branch>:2295 current
msgid ""
"The Sabre family of transpiler passes (namely :class:`.SabreLayout` and "
":class:`.SabreSwap`) are now used by default for all circuits when "
"invoking the transpiler at optimization level 1 (e.g. calling "
":func:`.transpile` or :func:`.generate_preset_pass_manager` with  keyword"
" argument ``optimization_level=1``). Previously, circuits with control "
"flow operations used :class:`.DenseLayout` and :class:`.StochasticSwap` "
"with this profile."
msgstr ""

#: ../../../<reno.sphinxext branch>:2305 current
msgid ""
"The :meth:`~.ApproximateTokenSwapper.map` has been modified to use the "
"new ``rustworkx`` version of :func:`~graph_token_swapper` for performance"
" reasons. Qiskit Terra 0.25 now requires versison 0.13.0 of "
"``rustworkx``."
msgstr ""

#: ../../../<reno.sphinxext branch>:2311 current
msgid ""
"By default Qiskit builds its compiled extensions using the `Python Stable"
" ABI <https://docs.python.org/3/c-api/stable.html>`__ with support back "
"to the oldest version of Python supported by Qiskit (currently 3.8). This"
" means that moving forward there will be a single precompiled wheels that"
" are shipped on release that works with all of Qiskit's supported Python "
"versions. There isn't any expected runtime performance difference using "
"the limited API so it is enabled by default for all builds now. "
"Previously, the compiled extensions were built using the version specific"
" API and would only work with a single Python version. This change was "
"made to reduce the number of package files we need to build and publish "
"in each release. When building Qiskit from source there should be no "
"changes necessary to the build process except that the default tags in "
"the output filenames will be different to reflect the use of the limited "
"API."
msgstr ""

#: ../../../<reno.sphinxext branch>:2334 current
msgid ""
"As a consequence of the pass manager refactoring efforts, existing flow "
"controllers: :class:`.FlowControllerLinear`, "
":class:`.ConditionalController`, and :class:`.DoWhileController` are now "
"subclasses of the :class:`.BaseController`. Note that these controllers "
"have dropped the implementation of the :meth:`~object.__iter__` method. "
"They are now only iterable in the context of a flow-controller execution,"
" which threads the compilation state through after each inner task is "
"executed."
msgstr ""

#: ../../../<reno.sphinxext branch>:2344 current
msgid ""
"The functionalitly of the :class:`.RunningPassManager` class has been "
"superseded by the new pass manager framework (:class:`.BasePassManager` "
"and :class:`.BaseController`). The running pass manager is now a "
"stateless flow controller (essentially, an alias of "
":class:`.FlowControllerLinear`), as the pass manager is responsible for "
"the construction of task pipeline, while the controller is responsible "
"for the execution of associated tasks. Subclassing the "
":class:`.RunningPassManager` is no longer recommended, and this class "
"will be completely replaced with the flow controller in future releases."
msgstr ""

#: ../../../<reno.sphinxext branch>:2354 current
msgid ""
"A new class, :class:`.WorkflowStatus`, has been introduced to track the "
"status of the pass manager workflow. This portable object is created when"
" the pass manager is run, and handed over to the underlying tasks. Such "
"status was previously managed by the :class:`.RunningPassManager` with "
"instance variables."
msgstr ""

#: ../../../<reno.sphinxext branch>:2362 current
msgid ""
"The transpiler-specific :class:`.transpiler.PassManager` (used in "
":func:`.transpile`) is now a subclass of "
":class:`.passmanager.BasePassManager`. However, this class hierarchy "
"change doesn't introduce any breaking change to the public-facing API."
msgstr ""

#: ../../../<reno.sphinxext branch>:2368 current
msgid ""
"Exceptions raised during pass-manager execution now inherit from the "
"newly introduced :exc:`~qiskit.passmanager.PassManagerError`. A generic "
"failure of the pass-manager machinery will raise :exc:`.PassManagerError`"
" for general pass managers, but the transpiler-specific "
":class:`.transpile.PassManager` will currently wrap this in its specific "
":exc:`.TranspilerError` for backwards compatibility. This wrapping will "
"be removed in the future."
msgstr ""

#: ../../../<reno.sphinxext branch>:2377 current
msgid ""
"The use of :class:`.FencedObject` in the pass manager framework has been "
"removed. This wrapper class cannot protect mutable object attributes from"
" modification, and this should not be an issue for properly implemented "
"code. Analysis passes should not modify an input IR, controllers should "
"not update the property set, and so forth. It's the pass manager "
"developer's responsibility to ensure that the pass is not modifying "
"object attributes,"
msgstr ""

#: ../../../<reno.sphinxext branch>:2392 current
msgid ""
"The magic ``%qiskit_version_table`` from ``qiskit.tools.jupyter`` and the"
" deprecated ``qiskit.__qiskit_version__`` do not include `qiskit-terra` "
"anymore. Now that Qiskit Terra is called Qiskit, these entries are not "
"needed anymore and you can just refer to the ``qiskit`` entry."
msgstr ""

#: ../../../<reno.sphinxext branch>:2401 current
msgid "Deprecation Notes"
msgstr ""

#: ../../../<reno.sphinxext branch>:2405 current
msgid ""
"The :mod:`qiskit.algorithms` module has been deprecated and will be "
"removed in a future release. It has been superseded by a new standalone "
"library ``qiskit-algorithms`` which can be found on PyPi or on Github "
"here:"
msgstr ""

#: ../../../<reno.sphinxext branch>:2409 current
msgid "https://github.com/qiskit-community/qiskit-algorithms"
msgstr ""

#: ../../../<reno.sphinxext branch>:2411 current
msgid ""
"The :mod:`qiskit.algorithms` will continue to work as before and bug "
"fixes will be made to module until its future removal, but active "
"development of new features has moved to the new package. If you're "
"relying on :mod:`qiskit.algorithms` you should update your requirements "
"to also include ``qiskit-algorithms`` and update the imports from "
"``qiskit.algorithms`` to ``qiskit_algorithms``. Please note that this new"
" package does not include already deprecated algorithms code, including "
"``opflow`` and ``QuantumInstance``-based algorithms. If you have not yet "
"migrated from ``QuantumInstance``-based to primitives-based algorithms, "
"you should follow the migration guidelines in "
"https://qisk.it/algo_migration. The decision to migrate the "
":mod:`~.algorithms` module to a separate package was made to clarify the "
"purpose Qiskit and make a distinction between the tools and libraries "
"built on top of it."
msgstr ""

#: ../../../<reno.sphinxext branch>:2427 current
#, python-format
msgid ""
"The Jupyter magic ``%circuit_library_info`` and the objects in "
"``qiskit.tools.jupyter.library`` it calls in turn:"
msgstr ""

#: ../../../<reno.sphinxext branch>:2430 current
msgid "``circuit_data_table``"
msgstr ""

#: ../../../<reno.sphinxext branch>:2431 current
msgid "``properties_widget``"
msgstr ""

#: ../../../<reno.sphinxext branch>:2432 current
msgid "``qasm_widget``"
msgstr ""

#: ../../../<reno.sphinxext branch>:2433 current
msgid "``circuit_digram_widget``"
msgstr ""

#: ../../../<reno.sphinxext branch>:2434 current
msgid "``circuit_library_widget``"
msgstr ""

#: ../../../<reno.sphinxext branch>:2436 current
msgid ""
"are deprecated and will be removed in Terra 0.27.  These objects were "
"only intended for use in the documentation build. They are no longer used"
" there, so are no longer supported or maintained."
msgstr ""

#: ../../../<reno.sphinxext branch>:2441 current
msgid ""
"Initializing a :class:`~qiskit.pulse.library.ScalableSymbolicPulse` with "
"complex `amp` value is now deprecated. This change also affects the "
"following library pulses:"
msgstr ""

#: ../../../<reno.sphinxext branch>:2444 current
msgid ":class:`~qiskit.pulse.library.Gaussian`"
msgstr ""

#: ../../../<reno.sphinxext branch>:2445 current
msgid ":class:`~qiskit.pulse.library.GaussianSquare`"
msgstr ""

#: ../../../<reno.sphinxext branch>:2446 current
msgid ":class:`~qiskit.pulse.library.Drag`"
msgstr ""

#: ../../../<reno.sphinxext branch>:2447 current
msgid ":class:`~qiskit.pulse.library.Constant`"
msgstr ""

#: ../../../<reno.sphinxext branch>:2449 current
msgid "Initializing them with complex `amp` is now deprecated as well."
msgstr ""

#: ../../../<reno.sphinxext branch>:2451 current
msgid ""
"Instead, one should use two floats for the `amp` and `angle` parameters, "
"where `amp` represents the magnitude of the complex amplitude, and "
"`angle` represents the angle of the complex amplitude. i.e. the complex "
"amplitude is given by `amp` * exp(1j * `angle`)."
msgstr ""

#: ../../../<reno.sphinxext branch>:2457 current
msgid ""
"The function ``get_vf2_call_limit`` available via the module "
":mod:`qiskit.transpiler.preset_passmanagers.common` has been deprecated. "
"This will likely affect very few users since this function was neither "
"explicitly exported nor documented.  Its functionality has been replaced "
"and extended by a function in the same module."
msgstr ""

#: ../../../<reno.sphinxext branch>:2465 current
msgid ""
"The method :meth:`~qiskit.circuit.Instruction.qasm` and all overriding "
"methods of subclasses of `:meth:`~qiskit.circuit.Instruction` are "
"deprecated. There is no replacement for generating an OpenQASM 2 string "
"for an isolated instruction."
msgstr ""

#: ../../../<reno.sphinxext branch>:2471 current
msgid ""
"Extensions of the ``qiskit`` and ``qiskit.providers`` namespaces by "
"external packages are now deprecated and the hook points enabling this "
"will be removed in a future release. In the past, the Qiskit project was "
"composed of elements that extended a shared namespace and these hook "
"points enabled doing that. However, it was not intended for these "
"interfaces to ever be used by other packages. Now that the overall Qiskit"
" package is no longer using that packaging model, leaving the possibility"
" for these extensions carry more risk than benefits and is therefore "
"being deprecated for future removal. If you're maintaining a package that"
" extends the Qiskit namespace (i.e. your users import from ``qiskit.x`` "
"or ``qiskit.providers.y``) you should transition to using a standalone "
"Python namespace for your package. No warning will be raised as part of "
"this because there is no method to inject a warning at the packaging "
"level that would be required to warn external packages of this change."
msgstr ""

#: ../../../<reno.sphinxext branch>:2488 current
msgid ""
"The :class:`~qiskit.pulse.instructions.Call` has been deprecated and will"
" be removed in a future release. Instead, use the `pulse builder "
"<https://qiskit.org/documentation/tutorials/circuits_advanced/06_building_pulse_schedules.html>`_"
" function :func:`~qiskit.pulse.builder.call` within an active building "
"context."
msgstr ""

#: ../../../<reno.sphinxext branch>:2503 current
msgid ""
"The flow controller factory method "
":meth:`.FlowController.controller_factory` is deprecated along with "
":meth:`.FlowController.add_flow_controller` and "
":meth:`.FlowController.remove_flow_controller`. In the future, task "
"construction with keyword arguments in the "
":meth:`.BasePassManager.append` method will also be deprecated. "
"Controllers must be explicitly instantiated and appended to the pass "
"manager. For example, the previously used conventional syntax"
msgstr ""

#: ../../../<reno.sphinxext branch>:2515 current
msgid "must be replaced with"
msgstr ""

#: ../../../<reno.sphinxext branch>:2522 current
msgid ""
"The latter allows more precise control on the order of controllers "
"especially when multiple keyword arguments are specified together, and "
"allows for the construction of general flow controllers that may have "
"more than one pipeline or do not take a single simple conditional "
"function in their constructors."
msgstr ""

#: ../../../<reno.sphinxext branch>:2529 current
msgid ""
"The :meth:`.FlowControllerLinear.append`, "
":meth:`.DoWhileController.append`, and "
":meth:`.ConditionalController.append` methods are all deprecated "
"immediately. The construction of the pass manager task pipeline is now "
"the role of :class:`.BasePassManager`, and individual flow controllers do"
" not need to this method.  For a flow controller, all the passes should "
"be specificed in one go directly to the constructor."
msgstr ""

#: ../../../<reno.sphinxext branch>:2537 current
msgid ""
"The general attribute and variable name :code:`passes` is replaced with "
":code:`tasks` all over the :mod:`qiskit.passmanager` module. Note that a "
"task must indicate a union of pass and controller, and the singular form "
"`pass` conflicts with the Python keyword. In this sense, the use of "
"`tasks` is much preferable."
msgstr ""

#: ../../../<reno.sphinxext branch>:2550 current
msgid ""
"Updated :func:`~qiskit.visualization.plot_gate_map`, "
":func:`~qiskit.visualization.plot_error_map`, and "
":func:`~qiskit.visualization.plot_circuit_layout` to support 433 qubit "
"heavy-hex coupling maps. This allows coupling map visualizations for "
"IBM's ``ibm_seattle``."
msgstr ""

#: ../../../<reno.sphinxext branch>:2554 current
msgid ""
"Fixed the deserialization of :class:`.DiagonalGate` instances through "
"QPY. See `#10364 <https://github.com/Qiskit/qiskit-"
"terra/issues/10364>`__."
msgstr ""

#: ../../../<reno.sphinxext branch>:2559 current
msgid ""
"Fixed an issue with :class:`~.FullAncillaAllocation` so it can now "
"function with :class:`~.Target` objects that do not have a coupling map "
"(typically because there are no 2 qubit gates in the :class:`~.Target`). "
"In this case :class:`~.FullAncillaAllocation` will add ancilla qubits so "
"that the number of qubits in the :class:`~.DAGCircuit` matches the number"
" :attr:`.Target.num_qubits`."
msgstr ""

#: ../../../<reno.sphinxext branch>:2566 current
msgid ""
"Changed the binding of numeric values with "
":meth:`.QuantumCircuit.assign_parameters` to avoid a mismatch between the"
" values of circuit instruction parameters and corresponding parameter "
"keys in the circuit's calibration dictionary. Fixed `#9764 "
"<https://github.com/Qiskit/qiskit-terra/issues/9764>`_ and `#10166 "
"<https://github.com/Qiskit/qiskit-terra/issues/10166>`_. See also the "
"related upgrade note regarding :meth:`.QuantumCircuit.assign_parameters`."
msgstr ""

#: ../../../<reno.sphinxext branch>:2576 current
msgid ""
":meth:`.DAGCircuit.substitute_node` will no longer silently overwrite an "
"existing condition on the given replacement ``op``.  If "
"``propagate_condition`` is set to ``True`` (the default), a "
":exc:`.DAGCircuitError` will be raised instead."
msgstr ""

#: ../../../<reno.sphinxext branch>:2582 current
msgid ""
"A parametrised circuit that contains a custom gate whose definition has a"
" parametrised global phase can now successfully bind the parameter in the"
" inner global phase. See `#10283 <https://github.com/Qiskit/qiskit-"
"terra/issues/10283>`__ for more detail."
msgstr ""

#: ../../../<reno.sphinxext branch>:2588 current
msgid ""
"Construction of a :class:`~.quantum_info.Statevector` from a "
":class:`.QuantumCircuit` containing zero-qubit operations will no longer "
"raise an error.  These operations impart a global phase on the resulting "
"statevector."
msgstr ""

#: ../../../<reno.sphinxext branch>:2594 current
msgid ""
"When :func:`~qiskit.quantum_info.synthesis.qs_decomposition`, which does "
"quantum Shannon decomposition, was called on trivial numeric unitaries "
"that do not benefit from this decomposition, an unexpected error was "
"raised. With this fix, such unitaries are detected and the equivalent "
"circuit is returned without performing Shannon decomposition."
msgstr ""

#: ../../../<reno.sphinxext branch>:2601 current
msgid ""
"Fixes a typo where BasicSwap called ``fake_run()`` the attribute instead "
"of  ``_fake_run()`` the function. Refer to `#10149 "
"<hhttps://github.com/Qiskit/qiskit-terra/issues/10147>` for more details."
msgstr ""

#: ../../../<reno.sphinxext branch>:2606 current
msgid ""
"Fixed an issue with copying circuits with new-style :class:`.Clbit`\\ s "
"and :class:`.Qubit`\\ s (bits without registers) where references to "
"these bits from the containing circuit could be broken, causing issues "
"with serialization and circuit visualization."
msgstr ""

#: ../../../<reno.sphinxext branch>:2613 current
msgid ""
"The :class:`.CheckMap` transpiler pass will no longer spuriously error "
"when dealing with nested conditional structures created by the control-"
"flow builder interface.  See `#10394 <https://github.com/Qiskit/qiskit-"
"terra/issues/10394>`__."
msgstr ""

#: ../../../<reno.sphinxext branch>:2619 current
msgid ""
"Fixed a bug in :class:`~BlockCollapser` where classical bits were ignored"
" when collapsing a block of nodes."
msgstr ""

#: ../../../<reno.sphinxext branch>:2624 current
msgid ""
"Fixed a bug in "
":meth:`~qiskit.dagcircuit.DAGCircuit.replace_block_with_op` and "
":meth:`~qiskit.dagcircuit.DAGDependency.replace_block_with_op` that led "
"to ignoring classical bits."
msgstr ""

#: ../../../<reno.sphinxext branch>:2630 current
msgid ""
"Fixed a bug in :meth:`.QuantumCircuit.compose` where the "
":attr:`.SwitchCaseOp.target` attribute in the subcircuit would not get "
"mapped to a register in the base circuit correctly."
msgstr ""

#: ../../../<reno.sphinxext branch>:2635 current
msgid ""
"The control-flow builder interface will now correctly include "
":class:`.ClassicalRegister` resources from nested switch statements in "
"their containing circuit scopes.  See `#10398 <https://github.com/Qiskit"
"/qiskit-terra/issues/10398>`__."
msgstr ""

#: ../../../<reno.sphinxext branch>:2641 current
msgid ""
"Fixed an issue in the :func:`.QuantumCircuit.decompose` method where "
"passing a circuit name to the function that matched a composite gate name"
" would not decompose the gate if it had a label assigned to it as well. "
"Fixed `#9136 <https://github.com/Qiskit/qiskit-terra/issues/9136>`__"
msgstr ""

#: ../../../<reno.sphinxext branch>:2649 current
msgid ""
"Fixed an issue in tranpiler passes for padding delays, which did not "
"respect target's constraints and inserted delays even for qubits not "
"supporting :class:`~.circuit.Delay` instruction. :class:`~.PadDelay` and "
":class:`~.PadDynamicalDecoupling` are fixed so that they do not pad any "
"idle time of qubits such that the target does not support ``Delay`` "
"instructions for the qubits. Also legacy scheduling passes "
"``ASAPSchedule`` and ``ALAPSchedule``, which pad delays internally, are "
"fixed in the same way. In addition, :func:`transpile` is fixed to call "
"``PadDelay`` with a ``target`` object so that it works correctly when "
"called with ``scheduling_method`` option. Fixed `#9993 "
"<https://github.com/Qiskit/qiskit-terra/issues/9993>`__"
msgstr ""

#: ../../../<reno.sphinxext branch>:2662 current
msgid ""
"Fixed an failure of the pulse builder when the context is initialized "
"with :class:`.BackendV2`."
msgstr ""

#: ../../../<reno.sphinxext branch>:2666 current
msgid ""
"Fix a bug in :class:`~.RZXCalibrationBuilder` where calling calibration "
"with wrong parameters would crash instead of raising exception."
msgstr ""

#: ../../../<reno.sphinxext branch>:2670 current
msgid ""
"Fixed an issue with the :meth:`.BooleanExpression.from_dimacs_file` "
"constructor method where the exception type raised when tweedledum wasn't"
" installed was not the expected :class:`~.MissingOptionalLibrary`. Fixed "
"`#10079 <https://github.com/Qiskit/qiskit-terra/issues/10079>`__"
msgstr ""

#: ../../../<reno.sphinxext branch>:2677 current
msgid ""
"Using ``initial_layout`` in calls to :func:`.transpile` will no longer "
"error if the circuit contains qubits not in any registers, or qubits that"
" exist in more than one register.  See `#10125 <https://github.com/Qiskit"
"/qiskit-terra/issues/10125>`__."
msgstr ""

#: ../../../<reno.sphinxext branch>:2683 current
msgid ""
"Fixed the gate decomposition of multi-controlled Z rotation gates added "
"via :meth:`.QuantumCircuit.mcrz`. Previously, this method implemented a "
"multi-controlled phase gate, which has a relative phase difference  to "
"the Z rotation. To obtain the previous `.QuantumCircuit.mcrz` behaviour, "
"use `.QuantumCircuit.mcp`."
msgstr ""

#: ../../../<reno.sphinxext branch>:2690 current
msgid ""
"Fixed the output of pulse :func:`~qiskit.pulse.macros.measure` and "
":func:`~qiskit.pulse.macros.measure_all` when functions are called  with "
"the :class:`.BackendV2` backend."
msgstr ""

#: ../../../<reno.sphinxext branch>:2696 current
msgid ""
"Fixed the dimensions of the output density matrix from "
":meth:`.DensityMatrix.partial_transpose` so they match the dimensions of "
"the corresponding input density matrix."
msgstr ""

#: ../../../<reno.sphinxext branch>:2701 current
msgid ""
"Fixed plot legend error when your dataset has a zero value at first "
"position. When one of your counts or distributions had a zero value at "
"first position, the relative legend didn't show up. See `#10158 "
"<https://github.com/Qiskit/qiskit-terra/issues/10158>` for more details."
msgstr ""

#: ../../../<reno.sphinxext branch>:2707 current
msgid ""
"Fixed an issue with the :meth:`.PassManagerConfig.from_backend` "
"constructor when building a :class:`~.PassManagerConfig` object from a "
":class:`~.BackendV1` instance that didn't have a coupling map attribute "
"defined. Previously, the constructor would incorrectly create a "
":class:`~.CouplingMap` object with 0 qubits instead of using ``None``. "
"Fixed `#10171 <https://github.com/Qiskit/qiskit-terra/issues/10171>`__"
msgstr ""

#: ../../../<reno.sphinxext branch>:2716 current
msgid ""
"Importing :mod:`qiskit.primitives` will no longer cause deprecation "
"warnings stemming from the deprecated :mod:`qiskit.opflow` module.  These"
" warnings would have been hidden to users by the default Python filters, "
"but triggered the eager import of :mod:`.opflow`, which meant that a "
"subsequent import by a user would not trigger the warnings."
msgstr ""

#: ../../../<reno.sphinxext branch>:2723 current
msgid ""
"Fixed the OpenQASM 2 output of :meth:`.QuantumCircuit.qasm` when a custom"
" gate object contained a gate with the same name.  Ideally this shouldn't"
" happen for most gates, but complex algorithmic operations like the "
":class:`.GroverOperator` class could produce such structures "
"accidentally. See `#10162 <https://github.com/Qiskit/qiskit-"
"terra/issues/10162>`__."
msgstr ""

#: ../../../<reno.sphinxext branch>:2730 current
msgid ""
"Fixed a regression in the LaTeX drawer of :meth:`.QuantumCircuit.draw` "
"when temporary files are placed on a separate filesystem to the working "
"directory.  See `#10211 <https://github.com/Qiskit/qiskit-"
"terra/issues/10211>`__."
msgstr ""

#: ../../../<reno.sphinxext branch>:2737 current
msgid ""
"Fixes a bug introduced in Qiskit 0.24.0 where numeric rotation angles "
"were no longer substituted for symbolic ones before preparing for two-"
"qubit synthesis. This caused an exception to be raised because the "
"synthesis routines require numberic matrices."
msgstr ""

#: ../../../<reno.sphinxext branch>:2743 current
msgid ""
"Fixed an issue with :class:`.UnitarySynthesis` when using the ``target`` "
"parameter where circuits with control flow were not properly mapped to "
"the target."
msgstr ""

#: ../../../<reno.sphinxext branch>:2749 current
msgid ""
"Fix a bug in which running :class:`~.Optimize1qGatesDecomposition` in "
"parallel would raise an error due to OneQubitGateErrorMap not being "
"picklable."
msgstr ""

#: ../../../<reno.sphinxext branch>:2753 current
msgid ""
"Fixed an failure of :meth:`.Target.update_from_instruction_schedule_map` "
"when the argument ``inst_map`` has schedule with unassigned duration."
msgstr ""

#: ../../../<reno.sphinxext branch>:2758 current
msgid ""
"Fix a bug in the :class:`~.VF2Layout` and :class:`~.VF2PostLayout` passes"
" where the passes wer failing to account for the 1 qubit error component "
"when evaluating a potential layout."
msgstr ""

#: ../../../<reno.sphinxext branch>:2764 current
msgid ""
"Fixed bug in :class:`~qiskit.algorithms.eigensolvers.VQD` where "
"``result.optimal_values`` was a copy of ``result.optimal_points``. It now"
" returns the corresponding values."
msgstr ""

#: ../../../<reno.sphinxext branch>:2769 current
msgid ""
"When the parameter ``conditional=True`` is set in  "
"``qiskit.circuit.random.random_circuit``, the conditional operations will"
" be preceded by a full mid-circuit measurment. Fixes `#9016 "
"<https://github.com/Qiskit/qiskit-terra/issues/9016>`__"
msgstr ""

#: ../../../<reno.sphinxext branch>:2776 current
msgid ""
"Improve the type annotations on the "
":meth:`.QuantumCircuit.assign_parameters` method to reflect the change in"
" return type depending on the ``inplace`` argument."
msgstr ""

#: ../../../<reno.sphinxext branch>:2783 current
msgid ""
"The OpenQASM 2 circuit-constructor methods "
"(:meth:`.QuantumCircuit.from_qasm_str` and "
":meth:`~.QuantumCircuit.from_qasm_file`) will no longer error when "
"encountering a ``gate`` definition that contains ``U`` or ``CX`` "
"instructions. See `#5536 <https://github.com/Qiskit/qiskit-"
"terra/issues/5536>`__."
msgstr ""

#: ../../../<reno.sphinxext branch>:2790 current
msgid ""
"Reduced overhead of the :class:`.ConsolidateBlocks` pass by performing "
"matrix operations on all two-qubit blocks using "
":func:`qiskit.transpiler.passes.utils._block_to_matrix`  instead of "
"creating an instance of :class:`.QuantumCircuit` and passing it to an "
":class:`.Operator`.  The speedup will only be applicable when "
"consolidating two-qubit blocks. Anything higher  than that will still be "
"handled by the :class:`.Operator` class. Check `#8779 "
"<https://github.com/Qiskit/qiskit-terra/issues/8779>`__ for details."
msgstr ""

#: ../../../<reno.sphinxext branch>:2799 current
msgid ""
"Improved the error messages returned when an attempt to convert a fully "
"bound :class:`.ParameterExpression` into a concrete ``float`` or ``int`` "
"failed, for example because the expression was naturally a complex "
"number."
msgstr ""

#: ../../../<reno.sphinxext branch>:2805 current
msgid ""
"Fixed ``float`` conversions for :class:`.ParameterExpression` values "
"which had, at some point in their construction history, an imaginary "
"component that had subsequently been cancelled.  When using Sympy as a "
"backend, these conversions would usually already have worked.  When using"
" Symengine as the backend, these conversions would often fail with type "
"errors, despite the result having been symbolically evaluated to be real,"
" and :meth:`.ParameterExpression.is_real` being true."
msgstr ""

#: ../../../<reno.sphinxext branch>:2814 current
msgid ""
"Fixed a potential performance scaling issue with layout scoring in preset"
" pass managers, which could occur when transpiling circuits with many "
"connected components on large devices."
msgstr ""

#: ../../../<reno.sphinxext branch>:2820 current
msgid ""
"The OpenQASM 3 exporter (:mod:`qiskit.qasm3`) will no longer output "
"invalid OpenQASM 3 for non-unitary :class:`~.circuit.Instruction` "
"instances, but will instead raise a :exc:`.QASM3ExporterError` explaining"
" that this are not yet supported.  This feature will is slated for a "
"later release of Qiskit, when there are more classical-processing "
"facilities throughout the library."
msgstr ""

#: ../../../<reno.sphinxext branch>:2828 current
msgid ""
"Fixed the :mod:`~qiskit.qpy` serialization of "
":attr:`.QuantumCircuit.layout` attribue. Previously, the "
":attr:`~.QuantumCircuit.layout` attribute would have been dropped when "
"serializing a circuit to QPY. Fixed `#10112 <https://github.com/Qiskit"
"/qiskit-terra/issues/10112>`__"
msgstr ""

#: ../../../<reno.sphinxext branch>:2835 current
msgid ""
"Fixes issue `#10185 <https://github.com/Qiskit/qiskit-"
"terra/issues/10185>`."
msgstr ""

#: ../../../<reno.sphinxext branch>:2839 current
msgid ""
"The function "
":func:`~qiskit.visualization.state_visualization.state_to_latex` produced"
" not valid LaTeX with unintended coefficient rounding, resulting in "
"errors when calling "
":func:`~qiskit.visualization.state_visualization.state_drawer` is called."
" Fixed `#9297 <https://github.com/Qiskit/qiskit-terra/issues/9297>`__."
msgstr ""

