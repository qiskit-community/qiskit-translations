# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-05 21:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../release_notes.rst:3
msgid "Release Notes"
msgstr ""

#: ../../release_notes.rst:8
msgid "Version History"
msgstr ""

#: ../../release_notes.rst:10
msgid ""
"This table tracks the meta-package versions and the version of each "
"Qiskit element installed:"
msgstr ""

#: ../../release_notes.rst:12
msgid "**Version History**"
msgstr ""

#: ../../release_notes.rst:16
msgid ""
"For the ``0.7.0``, ``0.7.1``, and ``0.7.2`` meta-package releases the "
":ref:`versioning_strategy` policy was not formalized yet."
msgstr ""

#: ../../release_notes.rst:22
msgid "Notable Changes"
msgstr ""

#: ../../release_notes.rst:26
msgid "Qiskit 0.22.0"
msgstr ""

#: ../../release_notes.rst:29 ../../release_notes.rst:103
#: ../../release_notes.rst:157
msgid "Terra 0.15.2"
msgstr ""

#: ../../release_notes.rst:31 ../../release_notes.rst:36
#: ../../release_notes.rst:41 ../../release_notes.rst:46
#: ../../release_notes.rst:105 ../../release_notes.rst:110
#: ../../release_notes.rst:115 ../../release_notes.rst:120
#: ../../release_notes.rst:221 ../../release_notes.rst:226
#: ../../release_notes.rst:231 ../../release_notes.rst:236
#: ../../release_notes.rst:7181 ../../release_notes.rst:7199
msgid "No change"
msgstr ""

#: ../../release_notes.rst:34 ../../release_notes.rst:108
#: ../../release_notes.rst:219 ../../release_notes.rst:1367
msgid "Aer 0.6.1"
msgstr ""

#: ../../release_notes.rst:39 ../../release_notes.rst:113
#: ../../release_notes.rst:224 ../../release_notes.rst:1553
msgid "Ignis 0.4.0"
msgstr ""

#: ../../release_notes.rst:44 ../../release_notes.rst:118
#: ../../release_notes.rst:229 ../../release_notes.rst:1681
msgid "Aqua 0.7.5"
msgstr ""

#: ../../release_notes.rst:49
msgid "IBM Q Provider 0.10.0"
msgstr ""

#: ../../release_notes.rst:54 ../../release_notes.rst:128
#: ../../release_notes.rst:269 ../../release_notes.rst:1387
#: ../../release_notes.rst:1569 ../../release_notes.rst:1686
#: ../../release_notes.rst:1831 ../../release_notes.rst:2157
#: ../../release_notes.rst:2319 ../../release_notes.rst:2691
#: ../../release_notes.rst:2901 ../../release_notes.rst:4429
#: ../../release_notes.rst:4483 ../../release_notes.rst:4523
#: ../../release_notes.rst:5274 ../../release_notes.rst:5820
#: ../../release_notes.rst:5941 ../../release_notes.rst:6359
#: ../../release_notes.rst:7061 ../../release_notes.rst:7361
#: ../../release_notes.rst:7401 ../../release_notes.rst:7559
#: ../../release_notes.rst:7617 ../../release_notes.rst:7641
#: ../../release_notes.rst:7733 ../../release_notes.rst:7783
#: ../../release_notes.rst:8065 ../../release_notes.rst:8096
msgid "New Features"
msgstr ""

#: ../../release_notes.rst:56
msgid ""
"CQC randomness extractors can now be invoked asynchronously, using "
"methods :meth:`~qiskit.providers.ibmq.random.CQCExtractor.run_async_ext1`"
" and :meth:`~qiskit.providers.ibmq.random.CQCExtractor.run_async_ext2`. "
"Each of these methods returns a "
":class:`~qiskit.providers.ibmq.random.CQCExtractorJob` instance that "
"allows you to check on the job status (using "
":meth:`~qiskit.providers.ibmq.random.CQCExtractorJob.status`) and wait "
"for its result (using "
":meth:`~qiskit.providers.ibmq.random.CQCExtractorJob.block_until_ready`)."
" The :meth:`qiskit.provider.ibmq.random.CQCExtractor.run` method remains "
"synchronous."
msgstr ""

#: ../../release_notes.rst:67
msgid ""
"You can now use the new IBMQ experiment service to query, retrieve, and "
"download experiment related data. Interface to this service is located in"
" the new :mod:`qiskit.providers.ibmq.experiment` package. Note that this "
"feature is still in beta, and not all accounts have access to it. It is "
"also subject to heavy modification in both functionality and API without "
"backward compatibility."
msgstr ""

#: ../../release_notes.rst:74
msgid ""
"Two Jupyter magic functions, the IQX dashboard and the backend widget, "
"are updated to display backend reservations. If a backend has "
"reservations scheduled in the next 24 hours, time to the next one and its"
" duration are displayed (e.g. ``Reservation: in 6 hrs 30 min (60m)``). If"
" there is a reservation and the backend is active, the backend status is "
"displayed as ``active [R]``."
msgstr ""

#: ../../release_notes.rst:85 ../../release_notes.rst:825
#: ../../release_notes.rst:1474 ../../release_notes.rst:1591
#: ../../release_notes.rst:1870 ../../release_notes.rst:1952
#: ../../release_notes.rst:2024 ../../release_notes.rst:2073
#: ../../release_notes.rst:2129 ../../release_notes.rst:2420
#: ../../release_notes.rst:2711 ../../release_notes.rst:2761
#: ../../release_notes.rst:3593 ../../release_notes.rst:4815
#: ../../release_notes.rst:5630 ../../release_notes.rst:6190
#: ../../release_notes.rst:6641
msgid "Upgrade Notes"
msgstr ""

#: ../../release_notes.rst:87
msgid ""
"Starting from this release, the `basis_gates` returned by "
":meth:`qiskit.providers.ibmq.IBMQBackend.configuration` may differ for "
"each backend. You should update your program if it relies on the basis "
"gates being ``['id','u1','u2','u3','cx']``. We recommend always using the"
" :meth:`~qiskit.providers.ibmq.IBMQBackend.configuration` method to find "
"backend configuration values instead of hard coding them."
msgstr ""

#: ../../release_notes.rst:94
msgid ""
"``qiskit-ibmq-provider`` release 0.10 requires ``qiskit-terra`` release "
"0.15 or above. The package metadata has been updated to reflect the new "
"dependency."
msgstr ""

#: ../../release_notes.rst:100
msgid "Qiskit 0.21.0"
msgstr ""

#: ../../release_notes.rst:123
msgid "IBM Q Provider 0.9.0"
msgstr ""

#: ../../release_notes.rst:130
msgid ""
"You can now access the IBMQ random number services, such as the CQC "
"randomness extractor, using the new package "
":mod:`qiskit.providers.ibmq.random`. Note that this feature is still in "
"beta, and not all accounts have access to it. It is also subject to heavy"
" modification in both functionality and API without backward "
"compatibility."
msgstr ""

#: ../../release_notes.rst:140 ../../release_notes.rst:162
#: ../../release_notes.rst:1172 ../../release_notes.rst:1529
#: ../../release_notes.rst:1674 ../../release_notes.rst:1747
#: ../../release_notes.rst:1911 ../../release_notes.rst:1966
#: ../../release_notes.rst:2001 ../../release_notes.rst:2038
#: ../../release_notes.rst:2086 ../../release_notes.rst:2185
#: ../../release_notes.rst:2218 ../../release_notes.rst:2507
#: ../../release_notes.rst:2740 ../../release_notes.rst:2787
#: ../../release_notes.rst:4240 ../../release_notes.rst:5077
#: ../../release_notes.rst:5746 ../../release_notes.rst:6279
#: ../../release_notes.rst:6973 ../../release_notes.rst:7072
#: ../../release_notes.rst:7157 ../../release_notes.rst:7369
#: ../../release_notes.rst:7596 ../../release_notes.rst:7695
msgid "Bug Fixes"
msgstr ""

#: ../../release_notes.rst:142
msgid ""
"Fixes an issue that may raise a ``ValueError`` if "
":meth:`~qiskit.providers.ibmq.IBMQBackend.retrieve_job` is used to "
"retrieve a job submitted via the IBM Quantum Experience Composer."
msgstr ""

#: ../../release_notes.rst:146
msgid ""
":class:`~qiskit.providers.ibmq.managed.IBMQJobManager` has been updated "
"so that if a time out happens while waiting for an old job to finish, the"
" time out error doesn't prevent a new job to be submitted. Fixes `#737 "
"<https://github.com/Qiskit/qiskit-ibmq-provider/issues/737>`_"
msgstr ""

#: ../../release_notes.rst:154
msgid "Qiskit 0.20.1"
msgstr ""

#: ../../release_notes.rst:164
msgid ""
"When accessing the ``definition`` attribute of a parameterized ``Gate`` "
"instance, the generated ``QuantumCircuit`` had been generated with an "
"invalid ``ParameterTable``, such that reading from "
"``QuantumCircuit.parameters`` or calling "
"``QuantumCircuit.bind_parameters`` would incorrectly report the unbound "
"parameters. This has been resolved."
msgstr ""

#: ../../release_notes.rst:170
msgid ""
"``SXGate().inverse()`` had previously returned an 'sx_dg' gate with a "
"correct ``definition`` but incorrect ``to_matrix``. This has been updated"
" such that ``SXGate().inverse()`` returns an ``SXdgGate()`` and vice "
"versa."
msgstr ""

#: ../../release_notes.rst:174
msgid ""
"``Instruction.inverse()``, when not overridden by a subclass, would in "
"some cases return a ``Gate`` instance with an incorrect ``to_matrix`` "
"method. The instances of incorrect ``to_matrix`` methods have been "
"removed."
msgstr ""

#: ../../release_notes.rst:178
msgid ""
"For ``C3XGate`` with a non-zero ``angle``, inverting the gate via "
"``C3XGate.inverse()`` had previously generated an incorrect inverse gate."
" This has been corrected."
msgstr ""

#: ../../release_notes.rst:182
msgid ""
"The ``MCXGate`` modes have been updated to return a gate of the same mode"
" when calling ``.inverse()``. This resolves an issue where in some cases,"
" transpiling a circuit containing the inverse of an ``MCXVChain`` gate "
"would raise an error."
msgstr ""

#: ../../release_notes.rst:187
msgid ""
"Previously, when creating a multiply controlled phase gate via "
"``PhaseGate.control``, an ``MCU1Gate`` gate had been returned. This has "
"been had corrected so that an ``MCPhaseGate`` is returned."
msgstr ""

#: ../../release_notes.rst:191
msgid ""
"Previously, attempting to decompose a circuit containing an "
"``MCPhaseGate`` would raise an error due to an inconsistency in the "
"definition of the ``MCPhaseGate``. This has been corrected."
msgstr ""

#: ../../release_notes.rst:195
msgid ""
"``QuantumCircuit.compose`` and ``DAGCircuit.compose`` had, in some cases,"
" incorrectly translated conditional gates if the input circuit contained "
"more than one ``ClassicalRegister``. This has been resolved."
msgstr ""

#: ../../release_notes.rst:199
msgid ""
"Fixed an issue when creating a :class:`qiskit.result.Counts` object from "
"an empty data dictionary. Now this will create an empty "
":class:`~qiskit.result.Counts` object. The "
":meth:`~qiskit.result.Counts.most_frequent` method is also updated to "
"raise a more descriptive exception when the object is empty. Fixes `#5017"
" <https://github.com/Qiskit/qiskit-terra/issues/5017>`__"
msgstr ""

#: ../../release_notes.rst:206
msgid ""
"Extending circuits with differing registers updated the ``qregs`` and "
"``cregs`` properties accordingly, but not the ``qubits`` and ``clbits`` "
"lists. As these are no longer generated from the registers but are cached"
" lists, this lead to a discrepancy of registers and bits. This has been "
"fixed and the ``extend`` method explicitly updates the cached bit lists."
msgstr ""

#: ../../release_notes.rst:212
msgid ""
"Fix bugs of the concrete implementations of "
"meth:`~qiskit.circuit.ControlledGate.inverse` method which do not "
"preserve the ``ctrl_state`` parameter."
msgstr ""

#: ../../release_notes.rst:216
msgid ""
"A bug was fixed that caused long pulse schedules to throw a recursion "
"error."
msgstr ""

#: ../../release_notes.rst:234 ../../release_notes.rst:1826
msgid "IBM Q Provider 0.8.0"
msgstr ""

#: ../../release_notes.rst:241
msgid "Qiskit 0.20.0"
msgstr ""

#: ../../release_notes.rst:244
msgid "Terra 0.15.1"
msgstr ""

#: ../../release_notes.rst:249 ../../release_notes.rst:1372
#: ../../release_notes.rst:1558 ../../release_notes.rst:2124
#: ../../release_notes.rst:2242 ../../release_notes.rst:2636
#: ../../release_notes.rst:2856 ../../release_notes.rst:4509
#: ../../release_notes.rst:5263 ../../release_notes.rst:5807
#: ../../release_notes.rst:5931 ../../release_notes.rst:6343
msgid "Prelude"
msgstr ""

#: ../../release_notes.rst:252
msgid ""
"The 0.15.0 release includes several new features and bug fixes. Some "
"highlights for this release are:"
msgstr ""

#: ../../release_notes.rst:255
msgid ""
"This release includes the introduction of arbitrary basis translation to "
"the transpiler. This includes support for directly targeting a broader "
"range of device basis sets, e.g. backends implementing RZ, RY, RZ, CZ or "
"iSwap gates."
msgstr ""

#: ../../release_notes.rst:260
msgid ""
"The :class:`~qiskit.circuit.QuantumCircuit` class now tracks global "
"phase. This means controlling a circuit which has global phase now "
"correctly adds a relative phase, and gate matrix definitions are now "
"exact rather than equal up to a global phase."
msgstr ""

#: ../../release_notes.rst:272
msgid ""
"A new DAG class :class:`qiskit.dagcircuit.DAGDependency` for representing"
" the dependency form of circuit, In this DAG, the nodes are operations "
"(gates, measure, barrier, etc...) and the edges corresponds to non-"
"commutation between two operations."
msgstr ""

#: ../../release_notes.rst:277
msgid ""
"Four new functions are added to :mod:`qiskit.converters` for converting "
"back and forth to :class:`~qiskit.dagcircuit.DAGDependency`. These "
"functions are:"
msgstr ""

#: ../../release_notes.rst:280
msgid ""
":func:`~qiskit.converters.circuit_to_dagdependency` to convert from a "
":class:`~qiskit.circuit.QuantumCircuit` object to a "
":class:`~qiskit.dagcircuit.DAGDependency` object."
msgstr ""

#: ../../release_notes.rst:283
msgid ""
":func:`~qiskit.converters.dagdependency_to_circuit` to convert from a "
":class:`~qiskit.dagcircuit.DAGDependency` object to a "
":class:`~qiskit.circuit.QuantumCircuit` object."
msgstr ""

#: ../../release_notes.rst:286
msgid ""
":func:`~qiskit.converters.dag_to_dagdependency` to convert from a "
":class:`~qiskit.dagcircuit.DAGCircuit` object to a "
":class:`~qiskit.dagcircuit.DAGDependency` object."
msgstr ""

#: ../../release_notes.rst:289
msgid ""
":func:`~qiskit.converters.dagdependency_to_ciruit` to convert from a "
":class:`~qiskit.dagcircuit.DAGDependency` object to a "
":class:`~qiskit.dagcircuit.DAGCircuit` object."
msgstr ""

#: ../../release_notes.rst:293 ../../release_notes.rst:620
#: ../../release_notes.rst:3584 ../../release_notes.rst:5591
msgid "For example::"
msgstr ""

#: ../../release_notes.rst:305
msgid ""
"Two new transpiler passes have been added to "
":mod:`qiskit.transpiler.passes` The first, "
":class:`~qiskit.transpiler.passes.UnrollCustomDefinitions`, unrolls all "
"instructions in the circuit according to their "
":attr:`~qiskit.circuit.Instruction.definition` property, stopping when "
"reaching either the specified ``basis_gates`` or a set of gates in the "
"provided :class:`~qiskit.circuit.EquivalenceLibrary`. The second, "
":class:`~qiskit.transpiler.passes.BasisTranslator`, uses the set of "
"translations in the provided :class:`~qiskit.circuit.EquivalenceLibrary` "
"to re-write circuit instructions in a specified basis."
msgstr ""

#: ../../release_notes.rst:316
msgid ""
"A new ``translation_method`` keyword argument has been added to "
":func:`~qiskit.compiler.transpile` to allow selection of the method to be"
" used for translating circuits to the available device gates. For "
"example, ``transpile(circ, backend, translation_method='translator')``. "
"Valid choices are:"
msgstr ""

#: ../../release_notes.rst:322
msgid ""
"``'unroller'``: to use the :class:`~qiskit.transpiler.passes.Unroller` "
"pass"
msgstr ""

#: ../../release_notes.rst:324
msgid ""
"``'translator'``: to use the "
":class:`~qiskit.transpiler.passes.BasisTranslator` pass."
msgstr ""

#: ../../release_notes.rst:326
msgid ""
"``'synthesis'``: to use the "
":class:`~qiskit.transpiler.passes.UnitarySynthesis` pass."
msgstr ""

#: ../../release_notes.rst:329
msgid "The  default value is ``'translator'``."
msgstr ""

#: ../../release_notes.rst:331
msgid ""
"A new class for handling counts result data, "
":class:`qiskit.result.Counts`, has been added. This class is a subclass "
"of ``dict`` and can be interacted with like any other dictionary. But, it"
" includes helper methods and attributes for dealing with counts results "
"from experiments and also handles post processing and formatting of "
"binary strings at object initialization. A :class:`~qiskit.result.Counts`"
"  object can be created by passing a dictionary  of counts with the keys "
"being either integers, hexadecimal strings of the form ``'0x4a'``,  "
"binary strings of the form ``'0b1101'``, a bit string formatted across "
"register and memory slots (ie ``'00 10'``), or a dit string. For "
"example::"
msgstr ""

#: ../../release_notes.rst:346
msgid ""
"A new method for constructing :class:`qiskit.dagcircuit.DAGCircuit` "
"objects has been added, "
":meth:`~qiskit.dagcircuit.DAGCircuit.from_networkx`. This method takes in"
" a networkx ``MultiDiGraph`` object (in the format returned by "
":meth:`~qiskit.dagcircuit.DAGCircuit.to_networkx`) and will return a new "
":class:`~qiskit.dagcircuit.DAGCircuit` object. The intent behind this "
"function is to enable transpiler pass authors to leverage networkx's "
"`graph algorithm library "
"<https://networkx.github.io/documentation/stable/reference/algorithms/index.html>`__"
" if a function is missing from the `retworkx API "
"<https://retworkx.readthedocs.io/en/latest/api.html>`_. Although, "
"hopefully in such casses an issue will be opened with `retworkx issue "
"tracker <https://github.com/Qiskit/retworkx/issues>`__ (or even better a "
"pull request submitted)."
msgstr ""

#: ../../release_notes.rst:360
msgid ""
"A new kwarg for ``init_qubits`` has been added to "
":func:`~qiskit.compiler.assemble` and :func:`~qiskit.execute.execute`. "
"For backends that support this feature ``init_qubits`` can be used to "
"control whether the backend executing the circuits inserts any "
"initialization sequences at the start of each shot. By default this is "
"set to ``True`` meaning that all qubits can assumed to be in the ground "
"state at the start of each shot. However, when ``init_qubits`` is  set to"
" ``False`` qubits will be uninitialized at the start of each experiment "
"and between shots. Note, that the backend running the circuits has to "
"support this feature for this flag to have any effect."
msgstr ""

#: ../../release_notes.rst:371
msgid ""
"A new kwarg ``rep_delay`` has been added to "
":func:`qiskit.compiler.assemble`, :func:`qiskit.execute.execute`, and the"
" constructor for :class:`~qiskit.qobj.PulseQobjtConfig`.qiskit This new "
"kwarg is used to denotes the time between program executions. It must be "
"chosen from the list of valid values set as the ``rep_delays`` from a "
"backend's :class:`~qiskit.providers.models.PulseBackendConfiguration` "
"object which can be accessed as ``backend.configuration().rep_delays``)."
msgstr ""

#: ../../release_notes.rst:380
msgid ""
"The ``rep_delay`` kwarg will only work on backends which allow for "
"dynamic repetition time. This will also be indicated in the "
":class:`~qiskit.providers.models.PulseBackendConfiguration` object for a "
"backend as the ``dynamic_reprate_enabled`` attribute. If "
"``dynamic_reprate_enabled`` is ``False`` then the ``rep_time`` value "
"specified for :func:`qiskit.compiler.assemble`, "
":func:`qiskit.execute.execute`, or the constructor for "
":class:`~qiskit.qobj.PulseQobjtConfig` will be used rather than "
"``rep_delay``. ``rep_time`` only allows users to specify the duration of "
"a program, rather than the delay between programs."
msgstr ""

#: ../../release_notes.rst:391
msgid ""
"The ``qobj_schema.json`` JSON Schema file in :mod:`qiskit.schemas` has "
"been updated to include the ``rep_delay`` as an optional configuration "
"property for pulse qobjs."
msgstr ""

#: ../../release_notes.rst:395
msgid ""
"The ``backend_configuration_schema.json`` JSON Schema file in "
"mod:`qiskit.schemas` has been updated to include ``rep_delay_range`` and "
"``default_rep_delay`` as optional properties for a pulse backend "
"configuration."
msgstr ""

#: ../../release_notes.rst:400
msgid ""
"A new attribute, :attr:`~qiskit.circuit.QuantumCircuit.global_phase`, "
"which is is used for tracking the global phase has been added to the "
":class:`qiskit.circuit.QuantumCircuit` class. For example::"
msgstr ""

#: ../../release_notes.rst:411
msgid ""
"The global phase may also be changed or queried with "
"``circ.global_phase`` in the above example. In either case the setting is"
" in radians. If the circuit is converted to an instruction or gate the "
"global phase is represented by two single qubit rotations on the first "
"qubit."
msgstr ""

#: ../../release_notes.rst:417
msgid ""
"This allows for other methods and functions which consume a "
":class:`~qiskit.circuit.QuantumCircuit` object to take global phase into "
"account. For example. with the "
":attr:`~qiskit.circuit.QuantumCircuit.global_phase` attribute the "
":meth:`~qiskit.circuit.Gate.to_matrix` method for a gate can now exactly "
"correspond to its decompositions instead of just up to a global phase."
msgstr ""

#: ../../release_notes.rst:425
msgid ""
"The same attribute has also been added to the "
":class:`~qiskit.dagcircuit.DAGCircuit` class so that global phase can be "
"tracked when converting between :class:`~qiskit.circuit.QuantumCircuit` "
"and :class:`~qiskit.dagcircuit.DAGCircuit`."
msgstr ""

#: ../../release_notes.rst:431
msgid ""
"Two new classes, :class:`~qiskit.circuit.AncillaRegister` and "
":class:`~qiskit.circuit.AncillaQubit` have been added to the "
":mod:`qiskit.circuit` module. These are subclasses of "
":class:`~qiskit.circuit.QuantumRegister` and "
":class:`~qiskit.circuit.Qubit` respectively and enable marking qubits "
"being ancillas. This will allow these qubits to be re-used in larger "
"circuits and algorithms."
msgstr ""

#: ../../release_notes.rst:438
msgid ""
"A new method, :meth:`~qiskit.circuit.QuantumCircuit.control`, has been "
"added to the :class:`~qiskit.circuit.QuantumCircuit`. This method will "
"return a controlled version of the "
":class:`~qiskit.circuit.QuantumCircuit` object, with both open and closed"
" controls. This functionality had previously only been accessible via the"
" :class:`~qiskit.circuit.Gate` class."
msgstr ""

#: ../../release_notes.rst:445
msgid ""
"A new method :meth:`~qiskit.circuit.QuantumCircuit.repeat` has been added"
" to the :class:`~qiskit.circuit.QuantumCircuit` class. It returns a new "
"circuit object containing a specified number of repetitions of the "
"original circuit. For example:"
msgstr ""

#: ../../release_notes.rst:460
msgid ""
"The parameters are copied by reference, meaning that if you update the "
"parameters in one instance of the circuit all repetitions will be "
"updated."
msgstr ""

#: ../../release_notes.rst:464
msgid ""
"A new method :meth:`~qiskit.circuit.QuantumCircuit.reverse_bits` has been"
" added to the :class:`~qiskit.circuit.QuantumCircuit` class. This method "
"will reverse the order of bits in a circuit (both quantum and classical "
"bits). This can be used to switch a circuit from little-endian to big-"
"endian and vice-versa."
msgstr ""

#: ../../release_notes.rst:470
msgid ""
"A new method, :meth:`~qiskit.transpiler.Layout.combine_into_edge_map()`, "
"was added to the :class:`qiskit.transpiler.Layout` class. This method "
"enables converting converting two :class:`~qiskit.transpiler.Layout` "
"objects into a qubit map for composing two circuits."
msgstr ""

#: ../../release_notes.rst:475
msgid ""
"A new class, :class:`~qiskit.test.mock.utils.ConfigurableFakeBackend`, "
"has been added to the :mod:`qiskit.test.mock.utils` module. This new "
"class enables the creation of configurable mock backends for use in "
"testing. For example::"
msgstr ""

#: ../../release_notes.rst:492
msgid ""
"will create a backend object with 100 qubits and all the other parameters"
" specified in the constructor."
msgstr ""

#: ../../release_notes.rst:495
msgid ""
"A new method :meth:`~qiskit.circuit.EquivalenceLibrary.draw` has been "
"added to the :class:`qiskit.circuit.EquivalenceLibrary` class. This "
"method can be used for drawing the contents of an equivalence library, "
"which can be useful for debugging. For example:"
msgstr ""

#: ../../release_notes.rst:528
msgid ""
"A new Phase instruction, :class:`~qiskit.pulse.SetPhase`, has been added "
"to :mod:`qiskit.pulse`. This instruction sets the phase of the subsequent"
" pulses to the specified phase (in radians. For example::"
msgstr ""

#: ../../release_notes.rst:541
msgid ""
"In this example, the phase of the pulses applied to ``DriveChannel(0)`` "
"after the :class:`~qiskit.pulse.SetPhase` instruction will be set to "
":math:`\\pi` radians."
msgstr ""

#: ../../release_notes.rst:545
msgid ""
"A new pulse instruction :class:`~qiskit.pulse.ShiftFrequency` has been "
"added to :mod:`qiskit.pulse.instructions`. This instruction enables "
"shifting the frequency of a channel from its set frequency. For example::"
msgstr ""

#: ../../release_notes.rst:556
msgid ""
"In this example all the pulses applied to ``DriveChannel(0)`` after the "
":class:`~qiskit.pulse.ShiftFrequency` command will have the envelope a "
"frequency decremented by 340MHz."
msgstr ""

#: ../../release_notes.rst:560
msgid ""
"A new method :meth:`~qiskit.circuit.ParameterExpression.conjugate` has "
"been added to the :class:`~qiskit.circuit.ParameterExpression` class. "
"This enables calling ``numpy.conj()`` without raising an error. Since a "
":class:`~qiskit.circuit.ParameterExpression` object is real, it will "
"return itself. This behaviour is analogous to Python floats/ints."
msgstr ""

#: ../../release_notes.rst:566
msgid ""
"A new class :class:`~qiskit.circuit.library.PhaseEstimation` has been "
"added to :mod:`qiskit.circuit.library`. This circuit library class is the"
" circuit used in the original formulation of the phase estimation "
"algorithm in `arXiv:quant-ph/9511026 <https://arxiv.org/pdf/quant-"
"ph/9511026.pdf>`__. Phase estimation is the task to to estimate the phase"
" :math:`\\phi` of an eigenvalue :math:`e^{2\\pi i\\phi}` of a unitary "
"operator :math:`U`, provided with the corresponding eigenstate "
":math:`|psi\\rangle`. That is"
msgstr ""

#: ../../release_notes.rst:575
msgid "U|\\psi\\rangle = e^{2\\pi i\\phi} |\\psi\\rangle"
msgstr ""

#: ../../release_notes.rst:579
msgid ""
"This estimation (and thereby this circuit) is a central routine to "
"several well-known algorithms, such as Shor's algorithm or Quantum "
"Amplitude Estimation."
msgstr ""

#: ../../release_notes.rst:583
msgid ""
"The :mod:`qiskit.visualization` function "
":func:`~qiskit.visualization.plot_state_qsphere` has a new kwarg "
"``show_state_labels`` which is used to control whether each blob in the "
"qsphere visualization is labeled. By default this kwarg is set to "
"``True`` and shows the basis states next to each blob by default. This "
"feature can be disabled, reverting to the previous behavior, by setting "
"the ``show_state_labels`` kwarg to ``False``."
msgstr ""

#: ../../release_notes.rst:591
msgid ""
"The :mod:`qiskit.visualization` function "
":func:`~qiskit.visualization.plot_state_qsphere` has a new kwarg "
"``show_state_phases`` which is set to ``False`` by default. When set to "
"``True`` it displays the phase of each basis state."
msgstr ""

#: ../../release_notes.rst:596
msgid ""
"The :mod:`qiskit.visualization` function "
":func:`~qiskit.visualization.plot_state_qsphere` has a new kwarg "
"``use_degrees`` which is set to ``False`` by default. When set to "
"``True`` it displays the phase of each basis state in degrees, along with"
" the phase circle at the bottom right."
msgstr ""

#: ../../release_notes.rst:602
msgid ""
"A new class, :class:`~qiskit.circuit.library.QuadraticForm` to the "
":mod:`qiskit.circuit.library` module for implementing a a quadratic form "
"on binary variables. The circuit library element implements the operation"
msgstr ""

#: ../../release_notes.rst:606
msgid "|x\\rangle |0\\rangle \\mapsto |x\\rangle |Q(x) \\mod 2^m\\rangle"
msgstr ""

#: ../../release_notes.rst:610
msgid ""
"for the quadratic form :math:`Q` and :math:`m` output qubits. The result "
"is in the :math:`m` output qubits is encoded in two's complement. If "
":math:`m` is not specified, the circuit will choose the minimal number of"
" qubits required to represent the result without applying a modulo "
"operation. The quadratic form is specified using a matrix for the "
"quadratic terms, a vector for the linear terms and a constant offset. If "
"all terms are integers, the circuit implements the quadratic form "
"exactly, otherwise it is only an approximation."
msgstr ""

#: ../../release_notes.rst:632
msgid ""
"Add :meth:`qiskit.quantum_info.Statevector.expectation_value` and "
":meth:`qiskit.quantum_info.DensityMatrix.expectation_value` methods for "
"computing the expectation value of an "
":class:`qiskit.quantum_info.Operator`."
msgstr ""

#: ../../release_notes.rst:636
msgid ""
"For the ``seed`` kwarg in the constructor for "
":class:`qiskit.circuit.library.QuantumVolume` `numpy random Generator "
"objects <https://numpy.org/doc/stable/reference/random/generator.html>`__"
" can now be used. Previously, only integers were a valid input. This is "
"useful when integrating :class:`~qiskit.circuit.library.QuantumVolume` as"
" part of a larger function with its own random number generation, e.g. "
"generating a sequence of :class:`~qiskit.circuit.library.QuantumVolume` "
"circuits."
msgstr ""

#: ../../release_notes.rst:645
msgid ""
"The :class:`~qiskit.circuit.QuantumCircuit` method "
":meth:`~qiskit.circuit.QuantumCircuit.compose` has a new kwarg ``front`` "
"which can be used for prepending the other circuit before the origin "
"circuit instead of appending. For example:"
msgstr ""

#: ../../release_notes.rst:662
msgid ""
"Two new passes, :class:`~qiskit.transpiler.passes.SabreLayout` and "
":class:`~qiskit.transpiler.passes.SabreSwap` for layout and routing have "
"been added to :mod:`qiskit.transpiler.passes`. These new passes are based"
" on the algorithm presented in Li et al., \"Tackling the Qubit Mapping "
"Problem for NISQ-Era Quantum Devices\", ASPLOS 2019. They can also be "
"selected when using the :func:`~qiskit.compiler.transpile` function by "
"setting the ``layout_method`` kwarg to ``'sabre'`` and/or the "
"``routing_method`` to ``'sabre'`` to use "
":class:`~qiskit.transpiler.passes.SabreLayout` and "
":class:`~qiskit.transpiler.passes.SabreSwap` respectively."
msgstr ""

#: ../../release_notes.rst:673
msgid ""
"Added the method :meth:`~qiskit.pulse.Schedule.replace` to the "
":class:`qiskit.pulse.Schedule` class which allows a pulse instruction to "
"be replaced with another. For example::"
msgstr ""

#: ../../release_notes.rst:679
msgid "from qiskit import pulse"
msgstr ""

#: ../../release_notes.rst:681
msgid "d0 = pulse.DriveChannel(0)"
msgstr ""

#: ../../release_notes.rst:683
msgid "sched = pulse.Schedule()"
msgstr ""

#: ../../release_notes.rst:685
msgid ""
"old = pulse.Play(pulse.Constant(100, 1.0), d0) new = "
"pulse.Play(pulse.Constant(100, 0.1), d0)"
msgstr ""

#: ../../release_notes.rst:688
msgid "sched += old"
msgstr ""

#: ../../release_notes.rst:690
msgid "sched = sched.replace(old, new)"
msgstr ""

#: ../../release_notes.rst:692
msgid "assert sched == pulse.Schedule(new)"
msgstr ""

#: ../../release_notes.rst:694
msgid ""
"Added new gate classes to :mod:`qiskit.circuit.library` for the "
":math:`\\sqrt{X}`, its adjoint :math:`\\sqrt{X}^\\dagger`, and controlled"
" :math:`\\sqrt{X}` gates as :class:`~qiskit.circuit.library.SXGate`, "
":class:`~qiskit.circuit.library.SXdgGate`, and "
":class:`~qiskit.circuit.library.CSXGate`. They can also be added to a "
":class:`~qiskit.circuit.QuantumCircuit` object using the "
":meth:`~qiskit.circuit.QuantumCircuit.sx`, "
":meth:`~qiskit.circuit.QuantumCircuit.sxdg`, and "
":meth:`~qiskit.circuit.QuantumCircuit.csx` respectively."
msgstr ""

#: ../../release_notes.rst:705
msgid ""
"Add support for :class:`~qiskit.circuit.Reset` instructions to "
":meth:`qiskit.quantum_info.Statevector.from_instruction`. Note that this "
"involves RNG sampling in choosing the projection to the zero state in the"
" case where the qubit is in a superposition state. The seed for sampling "
"can be set using the :meth:`~qiskit.quantum_info.Statevector.seed` "
"method."
msgstr ""

#: ../../release_notes.rst:711
msgid ""
"The methods :meth:`qiskit.circuit.ParameterExpression.subs` and "
":meth:`qiskit.circuit.QuantumCircuit.assign_parameters` now accept "
":class:`~qiskit.circuit.ParameterExpression` as the target value to be "
"substituted."
msgstr ""

#: ../../release_notes.rst:716
msgid "For example,"
msgstr ""

#: ../../release_notes.rst:735
msgid ""
"The :meth:`~qiskit.circuit.QuantumCircuit` method "
":meth:`~qiskit.circuit.QuantumCircuit.to_gate` has a new kwarg ``label`` "
"which can be used to set a label for for the output "
":class:`~qiskit.circuit.Gate` object. For example:"
msgstr ""

#: ../../release_notes.rst:752
msgid ""
"Added the :class:`~qiskit.circuit.library.UGate`, "
":class:`~qiskit.circuit.library.CUGate`, "
":class:`~qiskit.circuit.library.PhaseGate`, and "
":class:`~qiskit.circuit.library.CPhaseGate` with the corresponding "
":class:`~qiskit.circuit.QuantumCircuit` methods "
":meth:`~qiskit.circuit.QuantumCircuit.u`, "
":meth:`~qiskit.circuit.QuantumCircuit.cu`, "
":meth:`~qiskit.circuit.QuantumCircuit.p`, and "
":meth:`~qiskit.circuit.QuantumCircuit.cp`. The "
":class:`~qiskit.circuit.library.UGate` gate is the generic single qubit "
"rotation gate with 3 Euler angles and the "
":class:`~qiskit.circuit.library.CUGate` gate its controlled version. "
":class:`~qiskit.circuit.library.CUGate` has 4 parameters to account for a"
" possible global phase of the U gate. The "
":class:`~qiskit.circuit.library.PhaseGate` and "
":class:`~qiskit.circuit.library.CPhaseGate` gates are the general Phase "
"gate at an arbitrary angle and it's controlled version."
msgstr ""

#: ../../release_notes.rst:770
msgid ""
"A new kwarg, ``cregbundle`` has been added to the "
":func:`qiskit.visualization.circuit_drawer` function and the "
":class:`~qiskit.circuit.QuantumCircuit` method "
":meth:`~qiskit.circuit.QuantumCircuit.draw`. When set to ``True`` the "
"cregs will be bundled into a single line in circuit visualizations for "
"the ``text`` and ``mpl`` drawers. The default value is ``True``. "
"Addresses issue `#4290 <https://github.com/Qiskit/qiskit-"
"terra/issues/4290>`_."
msgstr ""

#: ../../release_notes.rst:778 ../../release_notes.rst:794
#: ../../release_notes.rst:811 ../../release_notes.rst:3488
#: ../../release_notes.rst:3741 ../../release_notes.rst:5509
msgid "For example:"
msgstr ""

#: ../../release_notes.rst:787
msgid ""
"A new kwarg, ``initial_state`` has been added to the "
":func:`qiskit.visualization.circuit_drawer` function and the "
":class:`~qiskit.circuit.QuantumCircuit` method "
":meth:`~qiskit.circuit.QuantumCircuit.draw`. When set to ``True`` the "
"initial state will now be included in circuit visualizations for all "
"drawers. Addresses issue `#4293 <https://github.com/Qiskit/qiskit-"
"terra/issues/4293>`_."
msgstr ""

#: ../../release_notes.rst:803
msgid ""
"Labels will now be displayed when using the 'mpl' drawer. There are 2 "
"types of labels - gate labels and control labels. Gate labels will "
"replace the gate name in the display. Control labels will display above "
"or below the controls for a gate. Fixes issues #3766, #4580 Addresses "
"issues `#3766 <https://github.com/Qiskit/qiskit-terra/issues/3766>`_ and "
"`#4580 <https://github.com/Qiskit/qiskit-terra/issues/4580>`_."
msgstr ""

#: ../../release_notes.rst:827
msgid ""
"Implementations of the multi-controlled X Gate ( "
":class:`~qiskit.circuit.library.MCXGrayCode`, "
":class:`~qiskit.circuit.library.MCXRecursive`, and "
":class:`~qiskit.circuit.library.MCXVChain`) have had their ``name`` "
"properties changed to more accurately describe their implementation: "
"``mcx_gray``, ``mcx_recursive``, and ``mcx_vchain`` respectively. "
"Previously, these gates shared the name ``mcx`` with "
":class:`~qiskit.circuit.library.MCXGate`, which caused these gates to be "
"incorrectly transpiled and simulated."
msgstr ""

#: ../../release_notes.rst:837
msgid ""
"By default the preset passmanagers in "
":mod:`qiskit.transpiler.preset_passmanagers` are using "
":class:`~qiskit.transpiler.passes.UnrollCustomDefinitions` and "
":class:`~qiskit.transpiler.passes.BasisTranslator` to handle basis "
"changing instead of the previous default "
":class:`~qiskit.transpiler.passes.Unroller`. This was done because the "
"new passes are more flexible and allow targeting any basis set, however "
"the output may differ. To use the previous default you can set the "
"``translation_method`` kwarg on :func:`~qiskit.compiler.transpile` to "
"``'unroller'``."
msgstr ""

#: ../../release_notes.rst:847
msgid ""
"The :func:`qiskit.converters.circuit_to_gate` and "
":func`qiskit.converters.circuit_to_instruction` converter functions had "
"previously automatically included the generated gate or instruction in "
"the active ``SessionEquivalenceLibrary``. These converters now accept an "
"optional ``equivalence_library`` keyword argument to specify if and where"
" the converted instances should be registered. The default behavior has "
"changed to not register the converted instance."
msgstr ""

#: ../../release_notes.rst:855
msgid ""
"The default value of the ``cregbundle`` kwarg for the "
":meth:`qiskit.circuit.QuantumCircuit.draw` method and "
":func:`qiskit.visualization.circuit_drawer` function has been changed to "
"``True``. This means that by default the classical bits in the circuit "
"diagram will now be bundled by default, for example:"
msgstr ""

#: ../../release_notes.rst:871
msgid ""
"If you want to have your circuit drawing retain the previous behavior and"
" show each classical bit in the diagram you can set the ``cregbundle`` "
"kwarg to ``False``. For example:"
msgstr ""

#: ../../release_notes.rst:885
msgid ""
":class:`~qiskit.pulse.Schedule` plotting with "
":py:meth:`qiskit.pulse.Schedule.draw` and "
":func:`qiskit.visualization.pulse_drawer` will no longer display the "
"event table by default. This can be reenabled by setting the ``table`` "
"kwarg to ``True``."
msgstr ""

#: ../../release_notes.rst:891
msgid ""
"The pass :class:`~qiskit.transpiler.passes.RemoveResetInZeroState` was "
"previously included in the preset pass manager "
":func:`~qiskit.transpiler.preset_passmanagers.level_0_pass_manager` which"
" was used with the ``optimization_level=0`` for "
":func:`~qiskit.compiler.transpile` and :func:`~qiskit.execute.execute` "
"functions. However, "
":class:`~qiskit.transpiler.passes.RemoveResetInZeroState` is an "
"optimization pass and should not have been included in optimization level"
" 0 and was removed. If you need to run :func:`~qiskit.compiler.transpile`"
" with :class:`~qiskit.transpiler.passes.RemoveResetInZeroState` either "
"use a custom pass manager or ``optimization_level`` 1, 2, or 3."
msgstr ""

#: ../../release_notes.rst:903
msgid ""
"The deprecated kwarg ``line_length`` for the "
":func:`qiskit.visualization.circuit_drawer` function and "
":meth:`qiskit.circuit.QuantumCircuit.draw` method has been removed. It "
"had been deprecated since the 0.10.0 release. Instead you can use the "
"``fold`` kwarg to adjust the width of the circuit diagram."
msgstr ""

#: ../../release_notes.rst:909
msgid ""
"The ``'mpl'`` output mode for the "
":meth:`qiskit.circuit.QuantumCircuit.draw` method and "
":func:`~qiskit.visualization.circuit_drawer` now requires the `pylatexenc"
" <https://pylatexenc.readthedocs.io/en/latest/latexencode/>`__ library to"
" be installed. This was already an optional dependency for visualization,"
" but was only required for the ``'latex'`` output mode before. It is now "
"also required for the matplotlib drawer because it is needed to handle "
"correctly sizing gates with matplotlib's `mathtext "
"<https://matplotlib.org/3.2.2/tutorials/text/mathtext.html>`__ labels for"
" gates."
msgstr ""

#: ../../release_notes.rst:920
msgid ""
"The deprecated ``get_tokens`` methods for the :class:`qiskit.qasm.Qasm` "
"and :class:`qiskit.qasm.QasmParser` has been removed. These methods have "
"been deprecated since the 0.9.0 release. The "
":meth:`qiskit.qasm.Qasm.generate_tokens` and "
":meth:`qiskit.qasm.QasmParser.generate_tokens` methods should be used "
"instead."
msgstr ""

#: ../../release_notes.rst:927
msgid ""
"The deprecated kwarg ``channels_to_plot`` for "
":meth:`qiskit.pulse.Schedule.draw`, "
":meth:`qiskit.pulse.Instruction.draw`, "
"``qiskit.visualization.pulse.matplotlib.ScheduleDrawer.draw`` and "
":func:`~qiskit.visualization.pulse_drawer` has been removed. The kwarg "
"has been deprecated since the 0.11.0 release and was replaced by the "
"``channels`` kwarg, which functions identically and should be used "
"instead."
msgstr ""

#: ../../release_notes.rst:936
msgid ""
"The deprecated ``circuit_instruction_map`` attribute of the "
":class:`qiskit.providers.models.PulseDefaults` class has been removed. "
"This attribute has been deprecated since the 0.12.0 release and was "
"replaced by the ``instruction_schedule_map`` attribute which can be used "
"instead."
msgstr ""

#: ../../release_notes.rst:942
msgid ""
"The ``union`` method of :py:class:`~qiskit.pulse.Schedule` and "
":py:class:`~qiskit.pulse.Instruction` have been deprecated since the "
"0.12.0 release and have now been removed. Use "
":meth:`qiskit.pulse.Schedule.insert` and "
":meth:`qiskit.pulse.Instruction.meth` methods instead with the "
"kwarg``time=0``."
msgstr ""

#: ../../release_notes.rst:949
msgid ""
"The deprecated ``scaling`` argument to the ``draw`` method of "
":py:class:`~qiskit.pulse.Schedule` and "
":py:class:`~qiskit.pulse.Instruction` has been replaced with ``scale`` "
"since the 0.12.0 release and now has been removed. Use the ``scale`` "
"kwarg instead."
msgstr ""

#: ../../release_notes.rst:954
msgid ""
"The deprecated ``period`` argument to :py:mod:`qiskit.pulse.library` "
"functions have been replaced by ``freq`` since the 0.13.0 release and now"
" removed. Use the ``freq`` kwarg instead of ``period``."
msgstr ""

#: ../../release_notes.rst:958
msgid ""
"The ``qiskit.pulse.commands`` module containing ``Commands`` classes was "
"deprecated in the 0.13.0 release and has now been removed. You will have "
"to upgrade your Pulse code if you were still using commands. For example:"
msgstr ""

#: ../../release_notes.rst:966
msgid "Old"
msgstr ""

#: ../../release_notes.rst:967
msgid "New"
msgstr ""

#: ../../release_notes.rst:968
msgid "``Command(args)(channel)``"
msgstr ""

#: ../../release_notes.rst:969
msgid "``Instruction(args, channel)``"
msgstr ""

#: ../../release_notes.rst:997
msgid ""
"All classes and function in the ``qiskit.tool.qi`` module were deprecated"
" in the 0.12.0 release and have now been removed. Instead use the "
":mod:`qiskit.quantum_info` module and the new methods and classes that it"
" has for working with quantum states and operators."
msgstr ""

#: ../../release_notes.rst:1002
msgid ""
"The ``qiskit.quantum_info.basis_state`` and "
"``qiskit.quantum_info.projector`` functions are deprecated as of Qiskit "
"Terra 0.12.0 as are now removed. Use the "
":class:`qiskit.quantum_info.QuantumState` and its derivatives "
":class:`qiskit.quantum_info.Statevector` and "
":class:`qiskit.quantum_info.DensityMatrix` to work with states."
msgstr ""

#: ../../release_notes.rst:1009
msgid ""
"The interactive plotting functions from :mod:`qiskit.visualization`, "
"``iplot_bloch_multivector``, ``iplot_state_city``, "
"``iplot_state_qsphere``, ``iplot_state_hinton``, ``iplot_histogram``, "
"``iplot_state_paulivec`` now are just deprecated aliases for the "
"matplotlib based equivalents and are no longer interactive. The hosted "
"static JS code that these functions relied on has been removed and they "
"no longer could work. A normal deprecation wasn't possible because the "
"site they depended on no longer exists."
msgstr ""

#: ../../release_notes.rst:1018
msgid ""
"The validation components using marshmallow from :mod:`qiskit.validation`"
" have been removed from terra. Since they are no longer used to build any"
" objects in terra."
msgstr ""

#: ../../release_notes.rst:1022
msgid ""
"The marshmallow schema classes in :mod:`qiskit.result` have been removed "
"since they are no longer used by the :class:`qiskit.result.Result` class."
msgstr ""

#: ../../release_notes.rst:1025
msgid ""
"The output of the :meth:`~qiskit.result.Result.to_dict` method for the "
":class:`qiskit.result.Result` class is no longer in a format for direct "
"JSON serialization. Depending on the content contained in instances of "
"these classes there may be types that the default JSON encoder doesn't "
"know how to handle, for example complex numbers or numpy arrays. If "
"you're JSON serializing the output of the ``to_dict()`` method directly "
"you should ensure that your JSON encoder can handle these types."
msgstr ""

#: ../../release_notes.rst:1033
msgid ""
"The option to acquire multiple qubits at once was deprecated in the "
"0.12.0 release and is now removed. Specifically, the init args "
"``mem_slots`` and ``reg_slots`` have been removed from "
":class:`qiskit.pulse.instructions.Acquire`, and ``channel``, ``mem_slot``"
" and ``reg_slot`` will raise an error if a list is provided as input."
msgstr ""

#: ../../release_notes.rst:1039
msgid ""
"Support for the use of the ``USE_RETWORKX`` environment variable which "
"was introduced in the 0.13.0 release to provide an optional fallback to "
"the legacy `networkx <https://networkx.github.io/>`__ based "
":class:`qiskit.dagcircuit.DAGCircuit` implementation has been removed. "
"This flag was only intended as provide a relief valve for any users that "
"encountered a problem with the new implementation for one release during "
"the transition to retworkx."
msgstr ""

#: ../../release_notes.rst:1047
msgid ""
"The module within :mod:`qiskit.pulse` responsible for schedule->schedule "
"transformations has been renamed from ``reschedule.py`` to "
"``transforms.py``. The previous import path has been deprecated. To "
"upgrade your code::"
msgstr ""

#: ../../release_notes.rst:1053
msgid "should be replaced by::"
msgstr ""

#: ../../release_notes.rst:1057
msgid ""
"In previous releases a :class:`~qiskit.transpiler.PassManager` did not "
"allow ``TransformationPass`` classes to modify the "
":class:`~qiskit.transpiler.PropertySet`.  This restriction has been "
"lifted so a ``TransformationPass`` class now has read and write access to"
" both the :class:`~qiskit.transpiler.PropertySet` and "
":class:`~qiskit.transpiler.DAGCircuit` during "
":meth:`~qiskit.transpiler.PassManager.run`. This change was made to more "
"efficiently facilitate ``TransformationPass`` classes that have an "
"internal state which may be necessary for later passes in the "
":class:`~qiskit.transpiler.PassManager`. Without this change a second "
"redundant ``AnalysisPass`` would have been necessary to recreate the "
"internal state, which could add significant overhead."
msgstr ""

#: ../../release_notes.rst:1073 ../../release_notes.rst:1622
#: ../../release_notes.rst:1716 ../../release_notes.rst:1901
#: ../../release_notes.rst:2456 ../../release_notes.rst:2729
#: ../../release_notes.rst:3943 ../../release_notes.rst:4868
#: ../../release_notes.rst:5676 ../../release_notes.rst:6232
#: ../../release_notes.rst:6907
msgid "Deprecation Notes"
msgstr ""

#: ../../release_notes.rst:1075
msgid ""
"The name of the first positional parameter for the "
":mod:`qiskit.visualization` functions "
":func:`~qiskit.visualization.plot_state_hinton`, "
":func:`~qiskit.visualization.plot_bloch_multivector`, "
":func:`~qiskit.visualization.plot_state_city`, "
":func:`~qiskit.visualization.plot_state_paulivec`, and "
":func:`~qiskit.visualization.plot_state_qsphere` has been renamed from "
"``rho`` to ``state``. Passing in the value by name to ``rho`` is "
"deprecated and will be removed in a future release. Instead you should "
"either pass the argument positionally or use the new parameter name "
"``state``."
msgstr ""

#: ../../release_notes.rst:1086
msgid ""
"The ``qiskit.pulse.pulse_lib`` module has been deprecated and will be "
"removed in a future release. It has been renamed to "
":py:mod:`qiskit.pulse.library` which should be used instead."
msgstr ""

#: ../../release_notes.rst:1090
msgid ""
"The :class:`qiskit.circuit.QuantumCircuit` method "
":meth:`~qiskit.circuit.QuantumCircuit.mirror` has been deprecated and "
"will be removed in a future release. The method "
":meth:`qiskit.circuit.QuantumCircuit.reverse_ops` should be used instead,"
" since mirroring could be confused with swapping the output qubits of the"
" circuit. The :meth:`~qiskit.circuit.QuantumCircuit.reverse_ops` method "
"only reverses the order of gates that are applied instead of mirroring."
msgstr ""

#: ../../release_notes.rst:1098
msgid ""
"The :meth:`~qiskit.dagcircuit.DAGCircuit.qubits` and "
":meth:`~qiskit.dagcircuit.DAGCircuit.clbits` methods of "
":class:`qiskit.dagcircuit.DAGCircuit` have been deprecated and will be "
"removed in a future release. They have been replaced with properties of "
"the same name, :attr:`qiskit.dagcircuit.DAGCircuit.qubits` and "
":attr:`qiskit.dagcircuit.DAGCircuit.clbits`, and are cached so accessing "
"them is much faster."
msgstr ""

#: ../../release_notes.rst:1106
msgid ""
"The ``get_sample_pulse`` method for "
"``qiskit.pulse.library.ParametricPulse`` derived classes (for example "
":class:`~qiskit.pulse.library.GaussianSquare`) has been deprecated and "
"will be removed in a future release. It has been replaced by the "
"``get_waveform`` method (for example "
":meth:`~qiskit.pulse.library.GaussianSquare.get_waveform`) which should "
"behave identically."
msgstr ""

#: ../../release_notes.rst:1114
msgid ""
"The use of the optional ``condition`` argument on "
":class:`qiskit.dagcircuit.DAGNode`, "
":meth:`qiskit.dagcircuit.DAGCircuit.apply_operation_back`, and "
":meth:`qiskit.dagcircuit.DAGCircuit.apply_operation_front` has been "
"deprecated and will be removed in a future release. Instead the "
"``control`` set in :class:`qiskit.circuit.Instruction` instances being "
"added to a :class:`~qiskit.dagcircuit.DAGCircuit` should be used."
msgstr ""

#: ../../release_notes.rst:1122
msgid ""
"The ``set_atol`` and ``set_rtol`` class methods of the "
":class:`qiskit.quantum_info.BaseOperator` and "
":class:`qiskit.quantum_info.QuantumState` classes (and their subclasses "
"such as :class:`~qiskit.quantum_info.Operator` and "
":class:`qiskit.quantum_info.DensityMatrix`) are deprecated and will be "
"removed in a future release. Instead the value for the attributes "
"``.atol`` and ``.rtol`` should be set on the class instead. For example::"
msgstr ""

#: ../../release_notes.rst:1135
msgid ""
"The interactive plotting functions from :mod:`qiskit.visualization`, "
"``iplot_bloch_multivector``, ``iplot_state_city``, "
"``iplot_state_qsphere``, ``iplot_state_hinton``, ``iplot_histogram``, "
"``iplot_state_paulivec`` have been deprecated and will be removed in a "
"future release. The matplotlib based equivalent functions from "
":mod:`qiskit.visualization`, "
":func:`~qiskit.visualization.plot_bloch_multivector`, "
":func:`~qiskit.visualization.plot_state_city`, "
":func:`~qiskit.visualization.plot_state_qsphere`, "
":func:`~qiskit.visualization.plot_state_hinton`, "
":func:`~qiskit.visualization.plot_state_histogram`, and "
":func:`~qiskit.visualization.plot_state_paulivec` should be used instead."
msgstr ""

#: ../../release_notes.rst:1147
msgid ""
"The properties ``acquires``, ``mem_slots``, and ``reg_slots`` of the "
":class:`qiskit.pulse.instructions.Acquire` pulse instruction have been "
"deprecated and will be removed in a future release. They are just "
"duplicates of :attr:`~qiskit.pulse.instructions.Acquire.channel`, "
":attr:`~qiskit.pulse.instructions.Acquire.mem_slot`, and "
":attr:`~qiskit.pulse.instructions.Acquire.reg_slot` respectively now that"
" previously deprecated support for using multiple qubits in a single "
":class:`~qiskit.pulse.instructions.Acquire` instruction has been removed."
msgstr ""

#: ../../release_notes.rst:1157
msgid ""
"The ``SamplePulse`` class from :mod:`qiskit.pulse` has been renamed to "
":py:class:`~qiskit.pulse.library.Waveform`. ``SamplePulse`` is deprecated"
" and will be removed in a future release."
msgstr ""

#: ../../release_notes.rst:1161
msgid ""
"The style dictionary key ``cregbundle`` has been deprecated and will be "
"removed in a future release. This has been replaced by the kwarg "
"``cregbundle`` added to the :func:`qiskit.visualization.circuit_drawer` "
"function and the :class:`~qiskit.circuit.QuantumCircuit` method "
":meth:`~qiskit.circuit.QuantumCircuit.draw`."
msgstr ""

#: ../../release_notes.rst:1174
msgid ""
"The :class:`qiskit.circuit.QuantumCircuit` method "
":attr:`~qiskit.circuit.QuantumCircuit.num_nonlocal_gates` previously "
"included multi-qubit :class:`qiskit.circuit.Instruction` objects (for "
"example, :class:`~qiskit.circuit.library.Barrier`) in its count of non-"
"local gates. This has been corrected so that only non-local "
":class:`~qiskit.circuit.Gate` objects are counted. Fixes `#4500 "
"<https://github.com/Qiskit/qiskit-terra/issues/4500>`__"
msgstr ""

#: ../../release_notes.rst:1182
msgid ""
":class:`~qiskit.circuit.ControlledGate` instances with a set "
"``ctrl_state`` were in some cases not being evaluated as equal, even if "
"the compared gates were equivalent. This has been resolved so that Fixes "
"`#4573 <https://github.com/Qiskit/qiskit-terra/issues/4573>`__"
msgstr ""

#: ../../release_notes.rst:1187
msgid ""
"When accessing a bit from a :class:`qiskit.circuit.QuantumRegister` or "
":class:`qiskit.circuit.ClassicalRegister` by index when using numpy "
"`integer types` <https://numpy.org/doc/stable/user/basics.types.html>`__ "
"would previously raise a ``CircuitError`` exception. This has been "
"resolved so numpy types can be used in addition to Python's built-in "
"``int`` type. Fixes `#3929 <https://github.com/Qiskit/qiskit-"
"terra/issues/3929>`__."
msgstr ""

#: ../../release_notes.rst:1196
msgid ""
"A bug was fixed where only the first "
":class:`qiskit.pulse.configuration.Kernel` or "
":class:`qiskit.pulse.configuration.Discriminator` for an "
":class:`qiskit.pulse.Acquire` was used when there were multiple Acquires "
"at the same time in a :class:`qiskit.pulse.Schedule`."
msgstr ""

#: ../../release_notes.rst:1201
msgid ""
"The SI unit use for constructing :py:class:`qiskit.pulse.SetFrequency` "
"objects is in Hz, but when a :class:`~qiskit.qobj.PulseQobjInstruction` "
"object is created from a :py:class:`~qiskit.pulse.SetFrequency` instance "
"it needs to be converted to GHz. This conversion was missing from "
"previous releases and has been fixed."
msgstr ""

#: ../../release_notes.rst:1207
msgid ""
"Previously it was possible to set the number of control qubits to zero in"
" which case the the original, potentially non-controlled, operation would"
" be returned. This could cause an ``AttributeError`` to be raised if the "
"caller attempted to access an attribute which only "
":class:`~qiskit.circuit.ControlledGate` object have. This has been fixed "
"by adding a getter and setter for "
":attr:`~qiskit.circuit.ControlledGate.num_ctrl_qubits` to validate that a"
" valid value is being used. Fixes `#4576 <https://github.com/Qiskit"
"/qiskit-terra/issues/4576>`__"
msgstr ""

#: ../../release_notes.rst:1217
msgid ""
"Open controls were implemented by modifying a "
":class:`~qiskit.circuit.Gate` objects "
":attr:`~qiskit.circuit.Gate.definition`. However, when the gate already "
"exists in the basis set, this definition was not used, which resulted in "
"incorrect circuits being sent to a backend after transpilation. This has "
"been fixed by modifying the :class:`~qiskit.transpiler.Unroller` pass to "
"use the definition if it encounters a controlled gate with open controls."
" Fixes `#4437 <https://github.com/Qiskit/qiskit-terra/issues/4437>`__"
msgstr ""

#: ../../release_notes.rst:1226
msgid ""
"The ``insert_barriers`` keyword argument in the "
":class:`~qiskit.circuit.library.ZZFeatureMap` class didn't actually "
"insert barriers in between the Hadamard layers and evolution layers. This"
" has been fixed so that barriers are now properly inserted."
msgstr ""

#: ../../release_notes.rst:1231
msgid ""
"Fixed issue where some gates with three or more qubits would fail to "
"compile in certain instances. Refer to `#4577 <https://github.com/Qiskit"
"/qiskit-terra/issues/4577` for more detail."
msgstr ""

#: ../../release_notes.rst:1235
msgid ""
"The matplotlib (``'mpl'``) output backend for the "
":class:`qiskit.circuit.QuantumCircuit` method "
":meth:`~qiskit.circuit.QuantumCircuit.draw` and the "
":func:`qiskit.visualization.circuit_drawer` function was not properly "
"scaling when the kwarg ``scale`` was set. Fonts and line widths did not "
"scale with the rest of the image. This has been fixed and all elements of"
" the circuit diagram now scale properly. For example:"
msgstr ""

#: ../../release_notes.rst:1251
msgid "Fixes `#4179 <https://github.com/Qiskit/qiskit-terra/issues/4179>`_."
msgstr ""

#: ../../release_notes.rst:1253
msgid ""
"Fixes issue where initializing or evolving "
":class:`qiskit.quantum_info.Statevector` and "
":class:`qiskit.quantum_info.DensityMatrix` classes by circuits by circuit"
" containing :class:`~qiskit.circuit.Barrier` instructions would raise an "
"exception. Fixes `#4461 <https://github.com/Qiskit/qiskit-"
"terra/issues/4461>`__"
msgstr ""

#: ../../release_notes.rst:1260
msgid ""
"Previously when a :class:`~qiskit.circuit.QuantumCircuit` contained a "
":class:`~qiskit.circuit.Gate` with a classical condition the transpiler "
"would sometimes fail when using ``optimization_level=3`` on "
":func:`~qiskit.compiler.transpile` or :func:`~qiskit.execute.execute` "
"raising an ``UnboundLocalError``. This has been fixed by updating the "
":class:`~qiskit.transpiler.passes.ConsolidateBlocks` pass to account for "
"the classical condition. Fixes `#4672 <https://github.com/Qiskit/qiskit-"
"terra/issues/4672>`_."
msgstr ""

#: ../../release_notes.rst:1270
msgid ""
"In some situations long gate and register names would overflow, or leave "
"excessive empty space around them when using the ``'mpl'`` output backend"
" for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and "
":func:`qiskit.visualization.circuit_drawer` function. This has been fixed"
" by using correct text widths for a proportional font. Fixes `#4611 "
"<https://github.com/Qiskit/qiskit-terra/issues/4611>`__, `#4605 "
"<https://github.com/Qiskit/qiskit-terra/issues/4605>`__, `#4545 "
"<https://github.com/Qiskit/qiskit-terra/issues/4545>`__, `#4497 "
"<https://github.com/Qiskit/qiskit-terra/issues/4497>`__, `#4449 "
"<https://github.com/Qiskit/qiskit-terra/issues/4449>`__, and `#3641 "
"<https://github.com/Qiskit/qiskit-terra/issues/3641>`__."
msgstr ""

#: ../../release_notes.rst:1282
msgid ""
"When using the ``style` kwarg on the "
":meth:`qiskit.circuit.QuantumCircuit.draw` or "
":func:`qiskit.visualization.circuit_drawer` with the ``'mpl'`` output "
"backend the dictionary key ``'showindex'`` set to ``True``, the index "
"numbers at the top of the column did not line up properly. This has been "
"fixed."
msgstr ""

#: ../../release_notes.rst:1289
msgid ""
"When using ``cregbunde=True`` with the ``'mpl'`` output backend for the "
":meth:`qiskit.circuit.QuantumCircuit.draw` method and "
":func:`qiskit.visualization.circuit_drawer` function and measuring onto a"
" second fold, the measure arrow would overwrite the creg count. The count"
" was moved to the left to prevent this. Fixes `#4148 "
"<https://github.com/Qiskit/qiskit-terra/issues/4148>`__."
msgstr ""

#: ../../release_notes.rst:1296
msgid ""
"When using the ``'mpl'`` output backend for the "
":meth:`qiskit.circuit.QuantumCircuit.draw` method and "
":func:`qiskit.visualization.circuit_drawer` function "
":class:`~qiskit.circuit.library.CSwapGate` gates and a controlled "
":class:`~qiskit.circuit.library.RZZGate` gates now display with their "
"appropriate symbols instead of in a box."
msgstr ""

#: ../../release_notes.rst:1303
msgid ""
"When using the ``'mpl'`` output backend for the "
":meth:`qiskit.circuit.QuantumCircuit.draw` method and "
":func:`qiskit.visualization.circuit_drawer` function controlled gates "
"created using the :meth:`~qiskit.circuit.QuantumCircuit.to_gate` method "
"were not properly spaced and could overlap with other gates in the "
"circuit diagram. This issue has been fixed."
msgstr ""

#: ../../release_notes.rst:1310
msgid ""
"When using the ``'mpl'`` output backend for the "
":meth:`qiskit.circuit.QuantumCircuit.draw` method and "
":func:`qiskit.visualization.circuit_drawer` function gates with arrays as"
" parameters, such as :class:`~qiskit.extensions.HamiltonianGate`, no "
"longer display with excessive space around them. Fixes `#4352 "
"<https://github.com/Qiskit/qiskit-terra/issues/4352>`__."
msgstr ""

#: ../../release_notes.rst:1318
msgid ""
"When using the ``'mpl'`` output backend for the "
":meth:`qiskit.circuit.QuantumCircuit.draw` method and "
":func:`qiskit.visualization.circuit_drawer` function generic gates "
"created by directly instantiating :class:`qiskit.circuit.Gate` method now"
" display the proper background color for the gate. Fixes `#4496 "
"<https://github.com/Qiskit/qiskit-terra/issues/4496>`__."
msgstr ""

#: ../../release_notes.rst:1325
msgid ""
"When using the ``'mpl'`` output backend for the "
":meth:`qiskit.circuit.QuantumCircuit.draw` method and "
":func:`qiskit.visualization.circuit_drawer` function an "
"``AttributeError`` that occurred when using "
":class:`~qiskit.extensions.Isometry` or "
":class:`~qiskit.extensions.Initialize` has been fixed. Fixes `#4439 "
"<https://github.com/Qiskit/qiskit-terra/issues/4439>`__."
msgstr ""

#: ../../release_notes.rst:1333
msgid ""
"When using the ``'mpl'`` output backend for the "
":meth:`qiskit.circuit.QuantumCircuit.draw` method and "
":func:`qiskit.visualization.circuit_drawer` function some open-controlled"
" gates did not properly display the open controls. This has been "
"corrected so that open controls are properly displayed as open circles. "
"Fixes `#4248 <https://github.com/Qiskit/qiskit-terra/issues/4248>`__."
msgstr ""

#: ../../release_notes.rst:1341
msgid ""
"When using the ``'mpl'`` output backend for the "
":meth:`qiskit.circuit.QuantumCircuit.draw` method and "
":func:`qiskit.visualization.circuit_drawer` function setting the ``fold``"
" kwarg to -1 will now properly display the circuit without folding. Fixes"
" `#4506 <https://github.com/Qiskit/qiskit-terra/issues/4506>`__."
msgstr ""

#: ../../release_notes.rst:1348
msgid ""
"Parametric pulses from :mod:`qiskit.pulse.library.discrete` now have zero"
" ends of parametric pulses by default. The endpoints are defined such "
"that for a function :math:`f(x)` then :math:`f(-1) = f(duration + 1) = "
"0`. Fixes `#4317 <https://github.com/Qiskit/qiskit-terra/issues/4317>`__"
msgstr ""

#: ../../release_notes.rst:1358 ../../release_notes.rst:2598
#: ../../release_notes.rst:4317 ../../release_notes.rst:5138
#: ../../release_notes.rst:5776 ../../release_notes.rst:6301
#: ../../release_notes.rst:7001 ../../release_notes.rst:7079
msgid "Other Notes"
msgstr ""

#: ../../release_notes.rst:1360
msgid ""
"The :class:`qiskit.result.Result` class which was previously constructed "
"using the marshmallow library has been refactored to not depend on "
"marshmallow anymore. This new implementation should be a seamless "
"transition but some specific behavior that was previously inherited from "
"marshmallow may not work. Please file issues for any incompatibilities "
"found."
msgstr ""

#: ../../release_notes.rst:1374
msgid ""
"This 0.6.0 release includes numerous performance improvements for all "
"simulators in the Aer provider and significant changes to the build "
"system when building from source. The main changes are support for SIMD "
"vectorization, approximation in the matrix product state method via bond-"
"dimension truncation, more efficient Pauli expectation value computation,"
" and greatly improved efficiency in Python conversion of C++ result "
"objects. The build system was upgraded to use the `Conan "
"<https://conan.io/>`__ to manage common C++ dependencies when building "
"from source."
msgstr ""

#: ../../release_notes.rst:1389
msgid ""
"Add density matrix snapshot support to \"statevector\" and "
"\"statevector_gpu\" methods of the QasmSimulator."
msgstr ""

#: ../../release_notes.rst:1392
msgid ""
"Allow density matrix snapshots on specific qubits, not just all qubits. "
"This computes the partial trace of the state over the remaining qubits."
msgstr ""

#: ../../release_notes.rst:1395
msgid ""
"Adds Pauli expectation value snapshot support to the `\"density_matrix\"`"
" simulation method of the :class:`qiskit.providers.aer.QasmSimulator`. "
"Add snapshots to circuits using the "
":class:`qiskit.providers.aer.extensions.SnapshotExpectationValue` "
"extension."
msgstr ""

#: ../../release_notes.rst:1401
msgid ""
"Greatly improves performance of the Pauli expectation value snapshot "
"algorithm for the `\"statevector\"`, `\"statevector_gpu`, "
"`\"density_matrix\"`, and `\"density_matrix_gpu\"` simulation methods of "
"the :class:`qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:1406
msgid ""
"Enable the gate-fusion circuit optimization from the "
":class:`qiskit.providers.aer.QasmSimulator` in both the "
":class:`qiskit.providers.aer.StatevectorSimulator` and "
":class:`qiskit.providers.aer.UnitarySimulator` backends."
msgstr ""

#: ../../release_notes.rst:1411
msgid ""
"Improve the performance of average snapshot data in simulator results. "
"This effects probability, Pauli expectation value, and density matrix "
"snapshots using the following extensions:"
msgstr ""

#: ../../release_notes.rst:1415
msgid ":class:`qiskit.providers.aer.extensions.SnapshotExpectationValue`"
msgstr ""

#: ../../release_notes.rst:1416
msgid ":class:`qiskit.providers.aer.extensions.SnapshotProbabilities`"
msgstr ""

#: ../../release_notes.rst:1417
msgid ":class:`qiskit.providers.aer.extensions.SnapshotDensityMatrix`"
msgstr ""

#: ../../release_notes.rst:1419
msgid ""
"Add move constructor and improve memory usage of the C++ matrix class to "
"minimize copies of matrices when moving output of simulators into "
"results."
msgstr ""

#: ../../release_notes.rst:1422
msgid "Improve performance of unitary simulator."
msgstr ""

#: ../../release_notes.rst:1424
msgid ""
"Add approximation to the `\"matrix_product_state\"` simulation method of "
"the :class:`~qiskit.providers.aer.QasmSimulator` to limit the bond-"
"dimension of the MPS."
msgstr ""

#: ../../release_notes.rst:1428
msgid ""
"There are two modes of approximation. Both discard the smallest Schmidt "
"coefficients following the SVD algorithm. There are two parameters that "
"control the degree of approximation: "
"``\"matrix_product_state_max_bond_dimension\"`` (int): Sets a limit on "
"the number of Schmidt coefficients retained at the end of the svd "
"algorithm. Coefficients beyond this limit will be discarded. (Default: "
"None, i.e., no limit on the bond dimension). "
"``\"matrix_product_state_truncation_threshold\"`` (double): Discard the "
"smallest coefficients for which the sum of their squares is smaller than "
"this threshold. (Default: 1e-16)."
msgstr ""

#: ../../release_notes.rst:1440
msgid ""
"Improve the performance of measure sampling when using the "
"`\"matrix_product_state\"` :class:`~qiskit.providers.aer.QasmSimulator` "
"simulation method."
msgstr ""

#: ../../release_notes.rst:1444
msgid ""
"Add support for ``Delay``, ``Phase`` and ``SetPhase`` pulse instructions "
"to the :class:`qiskit.providers.aer.PulseSimulator`."
msgstr ""

#: ../../release_notes.rst:1447
msgid ""
"Improve the performance of the "
":class:`qiskit.providers.aer.PulseSimulator` by caching calls to RHS "
"function"
msgstr ""

#: ../../release_notes.rst:1450
msgid ""
"Introduce alternate DE solving methods, specifiable through "
"``backend_options`` in the :class:`qiskit.providers.aer.PulseSimulator`."
msgstr ""

#: ../../release_notes.rst:1453
msgid ""
"Improve performance of simulator result classes by using move semantics "
"and removing unnecessary copies that were happening when combining "
"results from separate experiments into the final result object."
msgstr ""

#: ../../release_notes.rst:1457
msgid ""
"Greatly improve performance of pybind11 conversion of simulator results "
"by using move semantics where possible, and by moving vector and matrix "
"results to Numpy arrays without copies."
msgstr ""

#: ../../release_notes.rst:1461
msgid ""
"Change the RNG engine for simulators from 32-bit Mersenne twister to "
"64-bit Mersenne twister engine."
msgstr ""

#: ../../release_notes.rst:1464
msgid ""
"Improves the performance of the `\"statevector\"` simulation method of "
"the :class:`qiskit.providers.aer.QasmSimulator` and "
":class:`qiskit.providers.aer.StatevectorSimulator` by using SIMD "
"intrinsics on systems that support the AVX2 instruction set. AVX2 support"
" is automatically detected and enabled at runtime."
msgstr ""

#: ../../release_notes.rst:1476
msgid ""
"Changes the build system to use the `Conan package manager "
"<https://conan.io/>`__. This tool will handle most of the dependencies "
"needed by the C++ source code. Internet connection may be needed for the "
"first build or when dependencies are added or updated, in order to "
"download the required packages if they are not in your Conan local "
"repository."
msgstr ""

#: ../../release_notes.rst:1483
msgid ""
"When building the standalone version of qiskit-aer you must install conan"
" first with:"
msgstr ""

#: ../../release_notes.rst:1490 ../../release_notes.rst:2763
msgid ""
"Changes how transpilation passes are handled in the C++ Controller "
"classes so that each pass must be explicitly called. This allows for "
"greater customization on when each pass should be called, and with what "
"parameters. In particular this enables setting different parameters for "
"the gate fusion optimization pass depending on the QasmController "
"simulation method."
msgstr ""

#: ../../release_notes.rst:1496 ../../release_notes.rst:2769
msgid ""
"Add ``gate_length_units`` kwarg to "
":meth:`qiskit.providers.aer.noise.NoiseModel.from_device` for specifying "
"custom ``gate_lengths`` in the device noise model function to handle unit"
" conversions for internal code."
msgstr ""

#: ../../release_notes.rst:1501 ../../release_notes.rst:2774
msgid ""
"Add Controlled-Y (\"cy\") gate to the Stabilizer simulator methods "
"supported gateset."
msgstr ""

#: ../../release_notes.rst:1504 ../../release_notes.rst:2777
msgid ""
"For Aer's backend the jsonschema validation of input qobj objects from "
"terra is now opt-in instead of being enabled by default. If you want to "
"enable jsonschema validation of qobj set the ``validate`` kwarg on the "
":meth:`qiskit.providers.aer.QasmSimualtor.run` method for the backend "
"object to ``True``."
msgstr ""

#: ../../release_notes.rst:1510
msgid ""
"Adds an OpSet object to the base simulator State class to allow easier "
"validation of instructions, gates, and snapshots supported by simulators."
msgstr ""

#: ../../release_notes.rst:1513
msgid ""
"Refactor OpSet class. Moved OpSet to separate header file and add "
"``contains`` and ``difference`` methods based on ``std::set::contains`` "
"and ``std::algorithm::set_difference``. These replace the removed invalid"
" and validate instructions from OpSet, but with the order reversed. It "
"returns a list of other ops not in current opset rather than opset "
"instructions not in the other."
msgstr ""

#: ../../release_notes.rst:1520
msgid ""
"Improves how measurement sampling optimization is checked. The expensive "
"part of this operation is now done once during circuit construction where"
" rather than multiple times during simulation for when checking memory "
"requirements, simulation method, and final execution."
msgstr ""

#: ../../release_notes.rst:1531 ../../release_notes.rst:2789
msgid ""
"Remove \"extended_stabilizer\" from the automatically selected simulation"
" methods. This is needed as the extended stabilizer method is not exact "
"and may give incorrect results for certain circuits unless the user knows"
" how to optimize its configuration parameters."
msgstr ""

#: ../../release_notes.rst:1536 ../../release_notes.rst:2794
msgid ""
"The automatic method now only selects from \"stabilizer\", "
"\"density_matrix\", and \"statevector\" methods. If a non-Clifford "
"circuit that is too large for the statevector method is executed an "
"exception will be raised suggesting you could try explicitly using the "
"\"extended_stabilizer\" or \"matrix_product_state\" methods instead."
msgstr ""

#: ../../release_notes.rst:1542 ../../release_notes.rst:2804
msgid ""
"Disables gate fusion for the matrix product state simulation method as "
"this was causing issues with incorrect results being returned in some "
"cases."
msgstr ""

#: ../../release_notes.rst:1545
msgid ""
"Fixes a bug causing incorrect channel evaluation in the "
":class:`qiskit.providers.aer.PulseSimulator`."
msgstr ""

#: ../../release_notes.rst:1548
msgid ""
"Fixes several minor bugs for Hamiltonian parsing edge cases in the "
":class:`qiskit.providers.aer.pulse.system_models.hamiltonian_model.HamiltonianModel`"
" class."
msgstr ""

#: ../../release_notes.rst:1560
msgid ""
"The main change made in this release is a refactor of the Randomized "
"Benchmarking code to integrate the updated Clifford class "
":class:`qiskit.quantum_info.Clifford` from Terra and to improve the CNOT-"
"Dihedral class."
msgstr ""

#: ../../release_notes.rst:1571
msgid ""
"The "
":func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq`"
" function was refactored to use the updated Clifford class "
":class:`~qiskit.quantum_info.Clifford`, to allow efficient Randomized "
"Benchmarking (RB) on Clifford sequences with more than 2 qubits. In "
"addition, the code of the CNOT-Dihedral class "
":class:`qiskit.ignis.verification.randomized_benchmarking.CNOTDihedral` "
"was refactored to make it more efficient, by using numpy arrays, as well "
"not using pre-generated pickle files storing all the 2-qubit group "
"elements. The "
":func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq`"
" function has a new kwarg ``rand_seed`` which can be used to specify a "
"seed for the random number generator used to generate the RB circuits. "
"This can be useful for having a reproducible circuit."
msgstr ""

#: ../../release_notes.rst:1582
msgid ""
"The :func:`qiskit.ignis.verification.qv_circuits` function has a new "
"kwarg ``seed`` which can be used to specify a seed for the random number "
"generator used to generate the Quantum Volume circuits. This can be "
"useful for having a reproducible circuit."
msgstr ""

#: ../../release_notes.rst:1593
msgid ""
"The "
":func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq`"
" function is now using the updated Clifford class "
":class:`~qiskit.quantum_info.Clifford` and the updated CNOT-Dihedral "
"class "
":class:`qiskit.ignis.verification.randomized_benchmarking.CNOTDihedral` "
"to construct its output instead of using pre-generated group tables for "
"the Clifford and CNOT-Dihedral group elements, which were stored in "
"pickle files. This may result in subtle differences from the output from "
"the previous version."
msgstr ""

#: ../../release_notes.rst:1601 ../../release_notes.rst:1954
msgid ""
"A new requirement `scikit-learn <https://scikit-learn.org/stable/>`__ has"
" been added to the requirements list. This dependency was added in the "
"0.3.0 release but wasn't properly exposed as a dependency in that "
"release. This would lead to an ``ImportError`` if the "
":mod:`qiskit.ignis.measurement.discriminator.iq_discriminators` module "
"was imported. This is now correctly listed as a dependency so that "
"``scikit-learn`` will be installed with qiskit-ignis."
msgstr ""

#: ../../release_notes.rst:1609
msgid ""
"The :func:`qiskit.ignis.verification.qv_circuits` function is now using "
"the circuit library class :class:`~qiskit.circuit.library.QuantumVolume` "
"to construct its output instead of building the circuit from scratch. "
"This may result in subtle differences from the output from the previous "
"version."
msgstr ""

#: ../../release_notes.rst:1615
msgid ""
"Tomography fitters can now also get list of `Result` objects instead of a"
" single `Result` as requested in `issue #320 <https://github.com/Qiskit"
"/qiskit-ignis/issues/320/>`_."
msgstr ""

#: ../../release_notes.rst:1624
msgid ""
"The kwarg ``interleaved_gates`` for the "
":func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq`"
" function has been deprecated and will be removed in a future release. It"
" is superseded by ``interleaved_elem``. The helper functions "
":class:`qiskit.ignis.verification.randomized_benchmarking.BasicUtils`, "
":class:`qiskit.ignis.verification.randomized_benchmarking.CliffordUtils` "
"and "
":class:`qiskit.ignis.verification.randomized_benchmarking.DihedralUtils` "
"were deprecated. These classes are superseded by "
":class:`qiskit.ignis.verification.randomized_benchmarking.RBgroup` that "
"handles the group operations needed for RB. The class "
":class:`qiskit.ignis.verification.randomized_benchmarking.Clifford` is "
"superseded by :class:`~qiskit.quantum_info.Clifford`."
msgstr ""

#: ../../release_notes.rst:1636
msgid ""
"The kwargs ``qr`` and ``cr`` for the "
":func:`qiskit.ignis.verification.qv_circuits` function have been "
"deprecated and will be removed in a future release. These kwargs were "
"documented as being used for specifying a "
":class:`qiskit.circuit.QuantumRegister` and "
":class:`qiskit.circuit.ClassicalRegister` to use in the generated Quantum"
" Volume circuits instead of creating new ones. However, the parameters "
"were never actually respected and a new Register would always be created "
"regardless of whether they were set or not. This behavior is unchanged "
"and these kwargs still do not have any effect, but are being deprecated "
"prior to removal to avoid a breaking change for users who may have been "
"setting either."
msgstr ""

#: ../../release_notes.rst:1648
msgid ""
"Support for passing in subsets of qubits as a list in the ``qubit_lists``"
" parameter for the :func:`qiskit.ignis.verification.qv_circuits` function"
" has been deprecated and will removed in a future release. In the past "
"this was used to specify a layout to run the circuit on a device. In "
"other words if you had a 5 qubit device and wanted to run a 2 qubit QV "
"circuit on qubits 1, 3, and 4 of that device. You would pass in ``[1, 3, "
"4]`` as one of the lists in ``qubit_lists``, which would generate a 5 "
"qubit virtual circuit and have qv applied to qubits 1, 3, and 4 in that "
"virtual circuit. However, this functionality is not necessary and "
"overlaps with the concept of ``initial_layout`` in the transpiler and "
"whether a circuit has been embedded with a layout set. Moving forward "
"instead you should just run :func:`~qiskit.compiler.transpile` or "
":func:`~qiskit.execute.execute` with initial layout set to do this. For "
"example, running the above example would become::"
msgstr ""

#: ../../release_notes.rst:1676
msgid ""
"Fix a bug of the position of measurement pulses inserted by "
"py:func:`qiskit.ignis.characterization.calibrations.pulse_schedules.drag_schedules`."
" Fixes `#465 <https://github.com/Qiskit/qiskit-ignis/issues/465>`__"
msgstr ""

#: ../../release_notes.rst:1688
msgid ""
"Removed soft dependency on CPLEX in ADMMOptimizer. Now default optimizers"
" used by ADMMOptimizer are MinimumEigenOptimizer for QUBO problems and "
"SlsqpOptimizer as a continuous optimizer. You can still use "
"CplexOptimizer as an optimizer for ADMMOptimizer, but it should be set "
"explicitly."
msgstr ""

#: ../../release_notes.rst:1692
msgid "New Yahoo! finance provider created."
msgstr ""

#: ../../release_notes.rst:1694
msgid ""
"Introduced ``QuadraticProgramConverter`` which is an abstract class for "
"converters. Added ``convert``/``interpret`` methods for converters "
"instead of ``encode``/``decode``. Added ``to_ising`` and ``from_ising`` "
"to ``QuadraticProgram`` class. Moved all parameters from ``convert`` to "
"constructor except ``name``. Created setter/getter for converter "
"parameters. Added ``auto_define_penalty`` and ``interpret`` "
"for``LinearEqualityToPenalty``. Now error messages of converters are more"
" informative."
msgstr ""

#: ../../release_notes.rst:1702
msgid ""
"Added an SLSQP optimizer "
"``qiskit.optimization.algorithms.SlsqpOptimizer`` as a wrapper of the "
"corresponding SciPy optimization method. This is a classical optimizer, "
"does not depend on quantum algorithms and may be used as a replacement "
"for ``CobylaOptimizer``."
msgstr ""

#: ../../release_notes.rst:1706
msgid ""
"Cobyla optimizer has been modified to accommodate a multi start feature "
"introduced in the SLSQP optimizer. By default, the optimizer does not run"
" in the multi start mode."
msgstr ""

#: ../../release_notes.rst:1709
msgid ""
"The ``SummedOp`` does a mathematically more correct check for equality, "
"where expressions such as ``X + X == 2*X`` and ``X + Z == Z + X`` "
"evaluate to ``True``."
msgstr ""

#: ../../release_notes.rst:1718
msgid ""
"GSLS optimizer class deprecated ``__init__`` parameter ``max_iter`` in "
"favor of ``maxiter``. SPSA optimizer class deprecated ``__init__`` "
"parameter ``max_trials`` in favor of ``maxiter``. optimize_svm function "
"deprecated ``max_iters`` parameter in favor of ``maxiter``. "
"ADMMParameters class deprecated ``__init__`` parameter ``max_iter`` in "
"favor of ``maxiter``."
msgstr ""

#: ../../release_notes.rst:1723
msgid ""
"The ising convert classes "
":class:`qiskit.optimization.converters.QuadraticProgramToIsing` and "
":class:`qiskit.optimization.converters.IsingToQuadraticProgram` have been"
" deprecated and will be removed in a future release. Instead the "
":class:`qiskit.optimization.QuadraticProgram` methods "
":meth:`~qiskit.optimization.QuadraticProgram.to_ising` and "
":meth:`~qiskit.optimization.QuadraticPrgraom.from_ising` should be used "
"instead."
msgstr ""

#: ../../release_notes.rst:1732
msgid ""
"The ``pprint_as_string`` method for "
":class:`qiskit.optimization.QuadraticProgram` has been deprecated and "
"will be removed in a future release. Instead you should just run "
"``.pprint_as_string()`` on the output from "
":meth:`~qiskit.optimization.QuadraticProgram.to_docplex`"
msgstr ""

#: ../../release_notes.rst:1738
msgid ""
"The ``prettyprint`` method for "
":class:`qiskit.optimization.QuadraticProgram` has been deprecated and "
"will be removed in a future release. Instead you should just run "
"``.prettyprint()`` on the output from "
":meth:`~qiskit.optimization.QuadraticProgram.to_docplex`"
msgstr ""

#: ../../release_notes.rst:1749
msgid ""
"Changed in python version 3.8: On macOS, the spawn start method is now "
"the default. The fork start method should be considered unsafe as it can "
"lead to crashes in subprocesses. However P_BFGS doesn't support spawn, so"
" we revert to single process. Refer to `#1109 <https://github.com/Qiskit"
"/qiskit-aqua/issues/1109>` for more details."
msgstr ""

#: ../../release_notes.rst:1756
msgid ""
"Binding parameters in the ``CircuitStateFn`` did not copy the value of "
"``is_measurement`` and always set ``is_measurement=False``. This has been"
" fixed."
msgstr ""

#: ../../release_notes.rst:1760
msgid ""
"Previously, SummedOp.to_matrix_op built a list MatrixOp's (with numpy "
"matrices) and then summed them, returning a single MatrixOp. Some "
"algorithms (for example vqe) require summing thousands of matrices, which"
" exhausts memory when building the list of matrices. With this change, no"
" list is constructed. Rather, each operand in the sum is converted to a "
"matrix, added to an accumulator, and discarded."
msgstr ""

#: ../../release_notes.rst:1767
msgid ""
"Changing backends in VQE from statevector to qasm_simulator or real "
"device was causing an error due to CircuitSampler incompatible reuse. VQE"
" was changed to always create a new CircuitSampler and create a new  "
"expectation in case not entered by user. Refer to `#1153 "
"<https://github.com/Qiskit/qiskit-aqua/issues/1153>` for more details."
msgstr ""

#: ../../release_notes.rst:1774
msgid ""
"Exchange and Wikipedia finance providers were fixed to correctly handle "
"Quandl data. Refer to `#775 <https://github.com/Qiskit/qiskit-"
"aqua/issues/775>` for more details. Fixes a divide by 0 error on finance "
"providers mean vector and covariance matrix calculations. Refer to `#781 "
"<https://github.com/Qiskit/qiskit-aqua/issues/781>` for more details."
msgstr ""

#: ../../release_notes.rst:1781
msgid ""
"The ``ListOp.combo_fn`` property has been lost in several "
"transformations, such as converting to another operator type, traversing,"
" reducing or multiplication. Now this attribute is propagated to the "
"resulting operator."
msgstr ""

#: ../../release_notes.rst:1785
msgid ""
"The evaluation of some operator expressions, such as of ``SummedOp``s and"
" evaluations with the ``CircuitSampler`` did not treat coefficients "
"correctly or ignored them completely. E.g. evaluating ``~StateFn(0 * (I +"
" Z)) @ Plus`` did not yield 0 or the normalization of ``~StateFn(I) @ "
"((Plus + Minus) / sqrt(2))`` missed a factor of ``sqrt(2)``. This has "
"been fixed."
msgstr ""

#: ../../release_notes.rst:1792
msgid ""
"``OptimizationResult`` included some public setters and class variables "
"were ``Optional``. This fix makes all class variables read-only so that "
"mypy and pylint can check types more effectively. "
"``MinimumEigenOptimizer.solve`` generated bitstrings in a result as "
"``str``. This fix changed the result into ``List[float]`` as the other "
"algorithms do. Some public classes related to optimization algorithms "
"were missing in the documentation of ``qiskit.optimization.algorithms``. "
"This fix added all such classes to the docstring. `#1131 "
"<https://github.com/Qiskit/qiskit-aqua/issues/1131>` for more details."
msgstr ""

#: ../../release_notes.rst:1802
msgid ""
"``OptimizationResult.__init__`` did not check whether the sizes of ``x`` "
"and ``variables`` match or not (they should match). This fix added the "
"check to raise an error if they do not match and fixes bugs detected by "
"the check. This fix also adds missing unit tests related to "
"``OptimizationResult.variable_names`` and "
"``OptimizationResult.variables_dict`` in ``test_converters``. `#1167 "
"<https://github.com/Qiskit/qiskit-aqua/issues/1167>` for more details."
msgstr ""

#: ../../release_notes.rst:1809
msgid ""
"Fix parameter binding in the ``OperatorStateFn``, which did not bind "
"parameters of the underlying primitive but just the coefficients."
msgstr ""

#: ../../release_notes.rst:1812
msgid ""
"``op.eval(other)``, where ``op`` is of type ``OperatorBase``, sometimes "
"silently returns a nonsensical value when the number of qubits in ``op`` "
"and ``other`` are not equal. This fix results in correct behavior, which "
"is to throw an error rather than return a value, because the input in "
"this case is invalid."
msgstr ""

#: ../../release_notes.rst:1818
msgid ""
"The ``construct_circuit`` method of ``VQE`` previously returned the "
"expectation value to be evaluated as type ``OperatorBase``. This "
"functionality has been moved into ``construct_expectation`` and "
"``construct_circuit`` returns a list of the circuits that are evaluated "
"to compute the expectation value."
msgstr ""

#: ../../release_notes.rst:1833
msgid ""
":class:`~qiskit.providers.ibmq.IBMQBackend` now has a new "
":meth:`~qiskit.providers.ibmq.IBMQBackend.reservations` method that "
"returns reservation information for the backend, with optional filtering."
" In addition, you can now use "
":meth:`provider.backends.my_reservations()<qiskit.providers.ibmq.IBMQBackendService.my_reservations>`"
" to query for your own reservations."
msgstr ""

#: ../../release_notes.rst:1840
msgid ""
":meth:`qiskit.providers.ibmq.job.IBMQJob.result` raises an "
":class:`~qiskit.providers.ibmq.job.IBMQJobFailureError` exception if the "
"job has failed. The exception message now contains the reason the job "
"failed, if the entire job failed for a single reason."
msgstr ""

#: ../../release_notes.rst:1845
msgid ""
"A new attribute ``client_version`` was added to "
":class:`~qiskit.providers.ibmq.job.IBMQJob` and "
":class:`qiskit.result.Result` object retrieved via "
":meth:`qiskit.providers.ibmq.job.IBMQJob.result`. ``client_version`` is a"
" dictionary with the key being the name and the value being the version "
"of the client used to submit the job, such as Qiskit."
msgstr ""

#: ../../release_notes.rst:1853
msgid ""
"The :func:`~qiskit.providers.ibmq.least_busy` function now takes a new, "
"optional parameter ``reservation_lookahead``. If specified or defaulted "
"to, a backend is considered unavailable if it has reservations in the "
"next ``n`` minutes, where ``n`` is the value of "
"``reservation_lookahead``. For example, if the default value of 60 is "
"used, then any backends that have reservations in the next 60 minutes are"
" considered unavailable."
msgstr ""

#: ../../release_notes.rst:1860
msgid ""
":class:`~qiskit.providers.ibmq.managed.ManagedResults` now has a new "
":meth:`~qiskit.providers.ibmq.managed.ManagedResults.combine_results` "
"method that combines results from all managed jobs and returns a single "
":class:`~qiskit.result.Result` object. This ``Result`` object can be "
"used, for example, in ``qiskit-ignis`` fitter methods."
msgstr ""

#: ../../release_notes.rst:1872
msgid "Timestamps in the following fields are now in local time instead of UTC:"
msgstr ""

#: ../../release_notes.rst:1874
msgid ""
"Backend properties returned by "
":meth:`qiskit.providers.ibmq.IBMQBackend.properties`."
msgstr ""

#: ../../release_notes.rst:1876
msgid ""
"Backend properties returned by "
":meth:`qiskit.providers.ibmq.job.IBMQJob.properties`."
msgstr ""

#: ../../release_notes.rst:1878
msgid ""
"``estimated_start_time`` and ``estimated_complete_time`` in "
":class:`~qiskit.providers.ibmq.job.QueueInfo`, returned by "
":meth:`qiskit.providers.ibmq.job.IBMQJob.queue_info`."
msgstr ""

#: ../../release_notes.rst:1881
msgid ""
"``date`` in :class:`~qiskit.result.Result`, returned by "
":meth:`qiskit.providers.ibmq.job.IBMQJob.result`."
msgstr ""

#: ../../release_notes.rst:1884
msgid ""
"In addition, the ``datetime`` parameter for "
":meth:`qiskit.providers.ibmq.IBMQBackend.properties` is also expected to "
"be in local time unless it has UTC timezone information."
msgstr ""

#: ../../release_notes.rst:1888
msgid ""
"``websockets`` 8.0 or above is now required if Python 3.7 or above is "
"used. ``websockets`` 7.0 will continue to be used for Python 3.6 or "
"below."
msgstr ""

#: ../../release_notes.rst:1891
msgid ""
"On Windows, the event loop policy is set to "
"``WindowsSelectorEventLoopPolicy`` instead of using the default "
"``WindowsProactorEventLoopPolicy``. This fixes the issue that the "
":meth:`qiskit.providers.ibmq.job.IBMQJob.result` method could hang on "
"Windows. Fixes `#691 <https://github.com/Qiskit/qiskit-ibmq-"
"provider/issues/691>`_"
msgstr ""

#: ../../release_notes.rst:1903
msgid ""
"Use of ``Qconfig.py`` to save IBM Quantum Experience credentials is "
"deprecated and will be removed in the next release. You should use "
"``qiskitrc`` (the default) instead."
msgstr ""

#: ../../release_notes.rst:1913
msgid ""
"Fixes an issue wherein a call to "
":meth:`qiskit.providers.ibmq.IBMQBackend.jobs` can hang if the number of "
"jobs being returned is large. Fixes `#674 <https://github.com/Qiskit"
"/qiskit-ibmq-provider/issues/674>`_"
msgstr ""

#: ../../release_notes.rst:1917
msgid ""
"Fixes an issue which would raise a ``ValueError`` when building error "
"maps in Jupyter for backends that are offline. Fixes `#706 "
"<https://github.com/Qiskit/qiskit-ibmq-provider/issues/706>`_"
msgstr ""

#: ../../release_notes.rst:1921
msgid ""
":meth:`qiskit.providers.ibmq.IBMQBackend.jobs` will now return the "
"correct list of :class:`~qiskit.providers.ibmq.job.IBMQJob` objects when "
"the ``status`` kwarg is set to ``'RUNNING'``."
msgstr ""

#: ../../release_notes.rst:1925 ../../release_notes.rst:2225
msgid ""
"The package metadata has been updated to properly reflect the dependency "
"on ``qiskit-terra`` >= 0.14.0. This dependency was implicitly added as "
"part of the 0.7.0 release but was not reflected in the package "
"requirements so it was previously possible to install ``qiskit-ibmq-"
"provider`` with a version of ``qiskit-terra`` which was too old. Fixes "
"`#677 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/677>`_"
msgstr ""

#: ../../release_notes.rst:1934
msgid "Qiskit 0.19.6"
msgstr ""

#: ../../release_notes.rst:1937 ../../release_notes.rst:1988
#: ../../release_notes.rst:2068
msgid "Terra 0.14.2"
msgstr ""

#: ../../release_notes.rst:1939 ../../release_notes.rst:1944
#: ../../release_notes.rst:1975 ../../release_notes.rst:1980
#: ../../release_notes.rst:1990 ../../release_notes.rst:1995
#: ../../release_notes.rst:2060 ../../release_notes.rst:2113
#: ../../release_notes.rst:2118 ../../release_notes.rst:2170
#: ../../release_notes.rst:2179 ../../release_notes.rst:2207
#: ../../release_notes.rst:2212 ../../release_notes.rst:2624
#: ../../release_notes.rst:2630 ../../release_notes.rst:2753
#: ../../release_notes.rst:2829 ../../release_notes.rst:2835
#: ../../release_notes.rst:2841 ../../release_notes.rst:4394
#: ../../release_notes.rst:4399 ../../release_notes.rst:4408
#: ../../release_notes.rst:4413 ../../release_notes.rst:4418
#: ../../release_notes.rst:4423 ../../release_notes.rst:4462
#: ../../release_notes.rst:4467 ../../release_notes.rst:4472
#: ../../release_notes.rst:4477 ../../release_notes.rst:5195
#: ../../release_notes.rst:5200 ../../release_notes.rst:5791
#: ../../release_notes.rst:5796 ../../release_notes.rst:5801
#: ../../release_notes.rst:6314 ../../release_notes.rst:6319
#: ../../release_notes.rst:6324 ../../release_notes.rst:6329
#: ../../release_notes.rst:7194 ../../release_notes.rst:7204
#: ../../release_notes.rst:7232 ../../release_notes.rst:7255
#: ../../release_notes.rst:7260 ../../release_notes.rst:7340
#: ../../release_notes.rst:7345 ../../release_notes.rst:7350
#: ../../release_notes.rst:7355 ../../release_notes.rst:7757
#: ../../release_notes.rst:7762
msgid "No Change"
msgstr ""

#: ../../release_notes.rst:1942 ../../release_notes.rst:1993
#: ../../release_notes.rst:2111 ../../release_notes.rst:2182
msgid "Aer 0.5.2"
msgstr ""

#: ../../release_notes.rst:1947
msgid "Ignis 0.3.3"
msgstr ""

#: ../../release_notes.rst:1968
msgid ""
"Fixes an issue in qiskit-ignis 0.3.2 which would raise an ``ImportError``"
" when :mod:`qiskit.ignis.verification.tomography.fitters.process_fitter` "
"was imported without ``cvxpy`` being installed."
msgstr ""

#: ../../release_notes.rst:1973 ../../release_notes.rst:2019
msgid "Aqua 0.7.3"
msgstr ""

#: ../../release_notes.rst:1978 ../../release_notes.rst:2058
#: ../../release_notes.rst:2168 ../../release_notes.rst:2215
msgid "IBM Q Provider 0.7.2"
msgstr ""

#: ../../release_notes.rst:1985
msgid "Qiskit 0.19.5"
msgstr ""

#: ../../release_notes.rst:1998
msgid "Ignis 0.3.2"
msgstr ""

#: ../../release_notes.rst:2003
msgid ""
"The :meth:`qiskit.ignis.verification.TomographyFitter.fit` method has "
"improved detection logic for the default fitter. Previously, the ``cvx`` "
"fitter method was used whenever `cvxpy <https://www.cvxpy.org/>`__ was "
"installed. However, it was possible to install cvxpy without an SDP "
"solver that would work for the ``cvx`` fitter method. This logic has been"
" reworked so that the ``cvx`` fitter method is only used if ``cvxpy`` is "
"installed and an SDP solver is present that can be used. Otherwise, the "
"``lstsq`` fitter is used."
msgstr ""

#: ../../release_notes.rst:2011
msgid ""
"Fixes an edge case in "
":meth:`qiskit.ignis.mitigation.measurement.fitters.MeasurementFitter.apply`"
" for input that has invalid or incorrect state labels that don't match "
"the calibration circuit. Previously, this would not error and just return"
" an empty result. Instead now this case is correctly caught and a "
"``QiskitError`` exception is raised when using incorrect labels."
msgstr ""

#: ../../release_notes.rst:2026
msgid ""
"The `cvxpy <https://www.cvxpy.org/>`__ dependency which is required for "
"the svm classifier has been removed from the requirements list and made "
"an optional dependency. This is because installing cvxpy is not seamless "
"in every environment and often requires a compiler be installed to run. "
"To use the svm classifier now you'll need to install cvxpy by either "
"running ``pip install cvxpy<1.1.0`` or to install it with aqua running "
"``pip install qiskit-aqua[cvx]``."
msgstr ""

#: ../../release_notes.rst:2040
msgid ""
"The ``compose`` method of the ``CircuitOp`` used "
"``QuantumCircuit.combine`` which has been changed to use "
"``QuantumCircuit.compose``. Using combine leads to the problem that "
"composing an operator with a ``CircuitOp`` based on a named register does"
" not chain the operators but stacks them. E.g. composing ``Z ^ 2`` with a"
" circuit based on a 2-qubit named register yielded a 4-qubit operator "
"instead of a 2-qubit operator."
msgstr ""

#: ../../release_notes.rst:2046
msgid ""
"The ``MatrixOp.to_instruction`` method previously returned an operator "
"and not an instruction. This method has been updated to return an "
"Instruction. Note that this only works if the operator primitive is "
"unitary, otherwise an error is raised upon the construction of the "
"instruction."
msgstr ""

#: ../../release_notes.rst:2051
msgid ""
"The ``__hash__`` method of the ``PauliOp`` class used the ``id()`` method"
" which prevents set comparisons to work as expected since they rely on "
"hash tables and identical objects used to not have identical hashes. Now,"
" the implementation uses a hash of the string representation inline with "
"the implementation in the ``Pauli`` class."
msgstr ""

#: ../../release_notes.rst:2065
msgid "Qiskit 0.19.4"
msgstr ""

#: ../../release_notes.rst:2075
msgid ""
"The ``circuit_to_gate`` and ``circuit_to_instruction`` converters had "
"previously automatically included the generated gate or instruction in "
"the active ``SessionEquivalenceLibrary``. These converters now accept an "
"optional ``equivalence_library`` keyword argument to specify if and where"
" the converted instances should be registered. The default behavior is "
"not to register the converted instance."
msgstr ""

#: ../../release_notes.rst:2088
msgid ""
"Implementations of the multi-controlled X Gate (``MCXGrayCode``, "
"``MCXRecursive`` and ``MCXVChain``) have had their ``name`` properties "
"changed to more accurately describe their implementation (``mcx_gray``, "
"``mcx_recursive``, and ``mcx_vchain`` respectively.) Previously, these "
"gates shared the name ``mcx` with ``MCXGate``, which caused these gates "
"to be incorrectly transpiled and simulated."
msgstr ""

#: ../../release_notes.rst:2096
msgid ""
"``ControlledGate`` instances with a set ``ctrl_state`` were in some cases"
" not being evaluated as equal, even if the compared gates were "
"equivalent. This has been resolved."
msgstr ""

#: ../../release_notes.rst:2100
msgid ""
"Fixed the SI unit conversion for :py:class:`qiskit.pulse.SetFrequency`. "
"The ``SetFrequency`` instruction should be in Hz on the frontend and has "
"to be converted to GHz when ``SetFrequency`` is converted to "
"``PulseQobjInstruction``."
msgstr ""

#: ../../release_notes.rst:2104
msgid ""
"Open controls were implemented by modifying a gate\\'s definition. "
"However, when the gate already exists in the basis, this definition is "
"not used, which yields incorrect circuits sent to a backend. This "
"modifies the unroller to output the definition if it encounters a "
"controlled gate with open controls."
msgstr ""

#: ../../release_notes.rst:2116 ../../release_notes.rst:2205
#: ../../release_notes.rst:2628 ../../release_notes.rst:2827
#: ../../release_notes.rst:4360
msgid "Ignis 0.3.0"
msgstr ""

#: ../../release_notes.rst:2121
msgid "Aqua 0.7.2"
msgstr ""

#: ../../release_notes.rst:2125
msgid ""
"VQE expectation computation with Aer qasm_simulator now defaults to a "
"computation that has the expected shot noise behavior."
msgstr ""

#: ../../release_notes.rst:2130
msgid ""
"`cvxpy <https://github.com/cvxgrp/cvxpy/>`_ is now in the requirements "
"list as a dependency for qiskit-aqua. It is used for the quadratic "
"program solver which is used as part of the "
":class:`qiskit.aqua.algorithms.QSVM`. Previously ``cvxopt`` was an "
"optional dependency that needed to be installed to use this "
"functionality. This is no longer required as cvxpy will be installed with"
" qiskit-aqua."
msgstr ""

#: ../../release_notes.rst:2136
msgid ""
"For state tomography run as part of :class:`qiskit.aqua.algorithms.HHL` "
"with a QASM backend the tomography fitter function "
":meth:`qiskit.ignis.verification.StateTomographyFitter.fit` now gets "
"called explicitly with the method set to ``lstsq`` to always use the "
"least-squares fitting. Previously it would opportunistically try to use "
"the ``cvx`` fitter if ``cvxpy`` were installed. But, the ``cvx`` fitter "
"depends on a specifically configured ``cvxpy`` installation with an SDP "
"solver installed as part of ``cvxpy`` which is not always present in an "
"environment with ``cvxpy`` installed."
msgstr ""

#: ../../release_notes.rst:2145
msgid ""
"The VQE expectation computation using qiskit-aer's "
":class:`qiskit.providers.aer.extensions.SnapshotExpectationValue` "
"instruction is not enabled by default anymore. This was changed to be the"
" default in 0.7.0 because it is significantly faster, but it led to "
"unexpected ideal results without shot noise (see `#1013 "
"<https://github.com/Qiskit/qiskit-aqua/issues/1013>`_ for more details). "
"The default has now changed back to match user expectations. Using the "
"faster expectation computation is now opt-in by setting the new "
"``include_custom`` kwarg to ``True`` on the "
":class:`qiskit.aqua.algorithms.VQE` constructor."
msgstr ""

#: ../../release_notes.rst:2158
msgid ""
"A new kwarg ``include_custom`` has been added to the constructor for "
":class:`qiskit.aqua.algorithms.VQE` and it's subclasses (mainly "
":class:`qiskit.aqua.algorithms.QAOA`). When set to true and the "
"``expectation`` kwarg is set to ``None`` (the default) this will enable "
"the use of VQE expectation computation with Aer's ``qasm_simulator`` "
":class:`qiskit.providers.aer.extensions.SnapshotExpectationValue` "
"instruction. The special Aer snapshot based computation is much faster "
"but with the ideal output similar to state vector simulator."
msgstr ""

#: ../../release_notes.rst:2174
msgid "Qiskit 0.19.3"
msgstr ""

#: ../../release_notes.rst:2177
msgid "Terra 0.14.1"
msgstr ""

#: ../../release_notes.rst:2187
msgid ""
"Fixed bug with statevector and unitary simulators running a number of "
"(parallel) shots equal to the number of CPU threads instead of only "
"running a single shot."
msgstr ""

#: ../../release_notes.rst:2190
msgid ""
"Fixes the \"diagonal\" qobj gate instructions being applied incorrectly "
"in the density matrix Qasm Simulator method."
msgstr ""

#: ../../release_notes.rst:2193
msgid ""
"Fixes bug where conditional gates were not being applied correctly on the"
" density matrix simulation method."
msgstr ""

#: ../../release_notes.rst:2196
msgid ""
"Fix bug in CZ gate and Z gate for \"density_matrix_gpu\" and "
"\"density_matrix_thrust\" QasmSimulator methods."
msgstr ""

#: ../../release_notes.rst:2199
msgid ""
"Fixes issue where memory requirements of simulation were not being "
"checked on the QasmSimulator when using a non-automatic simulation "
"method."
msgstr ""

#: ../../release_notes.rst:2202
msgid "Fixed a memory leak that effected the GPU simulator methods"
msgstr ""

#: ../../release_notes.rst:2210
msgid "Aqua 0.7.1"
msgstr ""

#: ../../release_notes.rst:2220
msgid ""
":meth:`qiskit.provider.ibmq.IBMQBackend.jobs` will now return the correct"
" list of :class:`~qiskit.provider.ibmq.job.IBMQJob` objects when the "
"``status`` kwarg is set to ``'RUNNING'``. Fixes `#523 "
"<https://github.com/Qiskit/qiskit-ibmq-provider/issues/523>`_"
msgstr ""

#: ../../release_notes.rst:2234
msgid "Qiskit 0.19.0"
msgstr ""

#: ../../release_notes.rst:2237
msgid "Terra 0.14.0"
msgstr ""

#: ../../release_notes.rst:2244
msgid ""
"The 0.14.0 release includes several new features and bug fixes. The "
"biggest change for this release is the introduction of a quantum circuit "
"library in :mod:`qiskit.circuit.library`, containing some circuit "
"families of interest."
msgstr ""

#: ../../release_notes.rst:2249
msgid ""
"The circuit library gives users access to a rich set of well-studied "
"circuit families, instances of which can be used as benchmarks, as "
"building blocks in building more complex circuits, or as a tool to "
"explore quantum computational advantage over classical. The contents of "
"this library will continue to grow and mature."
msgstr ""

#: ../../release_notes.rst:2255
msgid "The initial release of the circuit library contains:"
msgstr ""

#: ../../release_notes.rst:2257
msgid ""
"``standard_gates``: these are fixed-width gates commonly used as "
"primitive building blocks, consisting of 1, 2, and 3 qubit gates. For "
"example the :class:`~qiskit.circuit.library.XGate`, "
":class:`~qiskit.circuit.library.RZZGate` and "
":class:`~qiskit.circuit.library.CSWAPGate`. The old location of these "
"gates under ``qiskit.extensions.standard`` is deprecated."
msgstr ""

#: ../../release_notes.rst:2263
msgid ""
"``generalized_gates``: these are families that can generalize to "
"arbitrarily many qubits, for example a "
":class:`~qiskit.circuit.library.Permutation` or "
":class:`~qiskit.circuit.library.GMS` (Global Molmer-Sorensen gate)."
msgstr ""

#: ../../release_notes.rst:2266
msgid ""
"``boolean_logic``: circuits that transform basis states according to "
"simple Boolean logic functions, such as "
":class:`~qiskit.circuit.library.ADD` or "
":class:`~qiskit.circuit.library.XOR`."
msgstr ""

#: ../../release_notes.rst:2269
msgid ""
"``arithmetic``: a set of circuits for doing classical arithmetic such as "
":class:`~qiskit.circuit.library.WeightedAdder` and "
":class:`~qiskit.circuit.library.IntegerComparator`."
msgstr ""

#: ../../release_notes.rst:2272
msgid ""
"``basis_changes``: circuits such as the quantum Fourier transform, "
":class:`~qiskit.circuit.library.QFT`, that mathematically apply basis "
"changes."
msgstr ""

#: ../../release_notes.rst:2275
msgid ""
"``n_local``: patterns to easily create large circuits with rotation and "
"entanglement layers, such as  :class:`~qiskit.circuit.library.TwoLocal` "
"which uses single-qubit rotations and two-qubit entanglements."
msgstr ""

#: ../../release_notes.rst:2278
msgid ""
"``data_preparation``: circuits that take classical input data and encode "
"it in a quantum state that is difficult to simulate, e.g. "
":class:`~qiskit.circuit.library.PauliFeatureMap` or "
":class:`~qiskit.circuit.library.ZZFeatureMap`."
msgstr ""

#: ../../release_notes.rst:2282
msgid ""
"Other circuits that have proven interesting in the literature, such as "
":class:`~qiskit.circuit.library.QuantumVolume`, "
":class:`~qiskit.circuit.library.GraphState`, or "
":class:`~qiskit.circuit.library.IQP`."
msgstr ""

#: ../../release_notes.rst:2287
msgid ""
"To allow easier use of these circuits as building blocks, we have "
"introduced a :meth:`~qiskit.circuit.QuantumCircuit.compose` method of "
":class:`qiskit.circuit.QuantumCircuit` for composition of circuits either"
" with other circuits (by welding them at the ends and optionally "
"permuting wires) or with other simpler gates::"
msgstr ""

#: ../../release_notes.rst:2310
msgid ""
"With this, Qiskit's circuits no longer assume an implicit initial state "
"of :math:`|0\\rangle`, and will not be drawn with this initial state. The"
" all-zero initial state is still assumed on a backend when a circuit is "
"executed."
msgstr ""

#: ../../release_notes.rst:2321
msgid ""
"A new method, :meth:`~qiskit.circuit.EquivalenceLibrary.has_entry`, has "
"been added to the :class:`qiskit.circuit.EquivalenceLibrary` class to "
"quickly check if a given gate has any known decompositions in the "
"library."
msgstr ""

#: ../../release_notes.rst:2325
msgid ""
"A new class :class:`~qiskit.circuit.library.IQP`, to construct an "
"instantaneous quantum polynomial circuit, has been added to the circuit "
"library module :mod:`qiskit.circuit.library`."
msgstr ""

#: ../../release_notes.rst:2329
msgid ""
"A new :meth:`~qiskit.circuit.QuantumCircuit.compose` method has been "
"added to :class:`qiskit.circuit.QuantumCircuit`. It allows composition of"
" two quantum circuits without having to turn one into a gate or "
"instruction. It also allows permutations of qubits/clbits at the point of"
" composition, as well as optional inplace modification. It can also be "
"used in place of :meth:`~qiskit.circuit.QuantumCircuit.append()`, as it "
"allows composing instructions and operators onto the circuit as well."
msgstr ""

#: ../../release_notes.rst:2338
msgid ""
":class:`qiskit.circuit.library.Diagonal` circuits have been added to the "
"circuit library. These circuits implement diagonal quantum operators "
"(consisting of non-zero elements only on the diagonal). They are more "
"efficiently simulated by the Aer simulator than dense matrices."
msgstr ""

#: ../../release_notes.rst:2343
msgid ""
"Add :meth:`~qiskit.quantum_info.Clifford.from_label` method to the "
":class:`qiskit.quantum_info.Clifford` class for initializing as the "
"tensor product of single-qubit I, X, Y, Z, H, or S gates."
msgstr ""

#: ../../release_notes.rst:2347
msgid ""
"Schedule transformer :func:`qiskit.pulse.reschedule.compress_pulses` "
"performs an optimization pass to reduce the usage of waveform memory in "
"hardware by replacing multiple identical instances of a pulse in a pulse "
"schedule with a single pulse. For example::"
msgstr ""

#: ../../release_notes.rst:2365
msgid ""
"The :class:`qiskit.transpiler.Layout` has a new method "
":meth:`~qiskit.transpiler.Layout.reorder_bits` that is used to reorder a "
"list of virtual qubits based on the layout object."
msgstr ""

#: ../../release_notes.rst:2369
msgid ""
"Two new methods have been added to the "
":class:`qiskit.providers.models.PulseBackendConfiguration` for "
"interacting with channels."
msgstr ""

#: ../../release_notes.rst:2373
msgid ""
":meth:`~qiskit.providers.models.PulseBackendConfiguration.get_channel_qubits`"
" to get a list of all qubits operated by the given channel and"
msgstr ""

#: ../../release_notes.rst:2375
msgid ""
":meth:`~qiskit.providers.models.PulseBackendConfiguration.get_qubit_channel`"
" to get a list of channels operating on the given qubit."
msgstr ""

#: ../../release_notes.rst:2378
msgid ""
"New :class:`qiskit.extensions.HamiltonianGate` and "
":meth:`qiskit.circuit.QuantumCircuit.hamiltonian()` methods are "
"introduced, representing Hamiltonian evolution of the circuit "
"wavefunction by a user-specified Hermitian Operator and evolution time. "
"The evolution time can be a :class:`~qiskit.circuit.Parameter`, allowing "
"the creation of parameterized UCCSD or QAOA-style circuits which compile "
"to ``UnitaryGate`` objects if ``time`` parameters are provided. The "
"Unitary of a ``HamiltonianGate`` with Hamiltonian Operator ``H`` and time"
" parameter ``t`` is :math:`e^{-iHt}`."
msgstr ""

#: ../../release_notes.rst:2388
msgid ""
"The circuit library module :mod:`qiskit.circuit.library` now provides a "
"new boolean logic AND circuit, :class:`qiskit.circuit.library.AND`, and "
"OR circuit, :class:`qiskit.circuit.library.OR`, which implement the "
"respective operations on a variable number of provided qubits."
msgstr ""

#: ../../release_notes.rst:2393
msgid ""
"New fake backends are added under :mod:`qiskit.test.mock`. These include "
"mocked versions of ``ibmq_armonk``, ``ibmq_essex``, ``ibmq_london``, "
"``ibmq_valencia``, ``ibmq_cambridge``, ``ibmq_paris``, ``ibmq_rome``, and"
" ``ibmq_athens``. As with other fake backends, these include snapshots of"
" calibration data (i.e. ``backend.defaults()``) and error data (i.e. "
"``backend.properties()``) taken from the real system, and can be used for"
" local testing, compilation and simulation."
msgstr ""

#: ../../release_notes.rst:2401
msgid ""
"The ``last_update_date`` parameter for "
":class:`~qiskit.providers.models.BackendProperties` can now also be "
"passed in as a ``datetime`` object. Previously only a string in ISO8601 "
"format was accepted."
msgstr ""

#: ../../release_notes.rst:2406
msgid ""
"Adds :meth:`qiskit.quantum_info.Statevector.from_int` and "
":meth:`qiskit.quantum_info.DensityMatrix.from_int` methods that allow "
"constructing a computational basis state for specified system dimensions."
msgstr ""

#: ../../release_notes.rst:2410
msgid ""
"The methods on the :class:`qiskit.circuit.QuantumCircuit` class for "
"adding gates (for example :meth:`~qiskit.circuit.QuantumCircuit.h`) which"
" were previously added dynamically at run time to the class definition "
"have been refactored to be statically defined methods of the class. This "
"means that static analyzer (such as IDEs) can now read these methods."
msgstr ""

#: ../../release_notes.rst:2422
msgid ""
"A new package, `python-dateutil <https://pypi.org/project/python-"
"dateutil/>`_, is now required and has been added to the requirements "
"list. It is being used to parse datetime strings received from external "
"providers in :class:`~qiskit.providers.models.BackendProperties` objects."
msgstr ""

#: ../../release_notes.rst:2428
msgid ""
"The marshmallow schema classes in :mod:`qiskit.providers.models` have "
"been removed since they are no longer used by the BackendObjects."
msgstr ""

#: ../../release_notes.rst:2431
msgid ""
"The output of the ``to_dict()`` method for the classes in "
":mod:`qiskit.providers.models` is no longer in a format for direct JSON "
"serialization. Depending on the content contained in instances of these "
"class there may be numpy arrays and/or complex numbers in the fields of "
"the dict. If you're JSON serializing the output of the to_dict methods "
"you should ensure your JSON encoder can handle numpy arrays and complex "
"numbers. This includes:"
msgstr ""

#: ../../release_notes.rst:2439
msgid ":meth:`qiskit.providers.models.BackendConfiguration.to_dict`"
msgstr ""

#: ../../release_notes.rst:2440
msgid ":meth:`qiskit.providers.models.BackendProperties.to_dict`"
msgstr ""

#: ../../release_notes.rst:2441
msgid ":meth:`qiskit.providers.models.BackendStatus.to_dict`"
msgstr ""

#: ../../release_notes.rst:2442
msgid ":meth:`qiskit.providers.models.QasmBackendConfiguration.to_dict`"
msgstr ""

#: ../../release_notes.rst:2443
msgid ":meth:`qiskit.providers.models.PulseBackendConfiguration.to_dict`"
msgstr ""

#: ../../release_notes.rst:2444
msgid ":meth:`qiskit.providers.models.UchannelLO.to_dict`"
msgstr ""

#: ../../release_notes.rst:2445
msgid ":meth:`qiskit.providers.models.GateConfig.to_dict`"
msgstr ""

#: ../../release_notes.rst:2446
msgid ":meth:`qiskit.providers.models.PulseDefaults.to_dict`"
msgstr ""

#: ../../release_notes.rst:2447
msgid ":meth:`qiskit.providers.models.Command.to_dict`"
msgstr ""

#: ../../release_notes.rst:2448
msgid ":meth:`qiskit.providers.models.JobStatus.to_dict`"
msgstr ""

#: ../../release_notes.rst:2449
msgid ":meth:`qiskit.providers.models.Nduv.to_dict`"
msgstr ""

#: ../../release_notes.rst:2450
msgid ":meth:`qiskit.providers.models.Gate.to_dict`"
msgstr ""

#: ../../release_notes.rst:2458
msgid ""
"The :meth:`qiskit.dagcircuit.DAGCircuit.compose` method now takes a list "
"of qubits/clbits that specify the positional order of bits to compose "
"onto. The dictionary-based method of mapping using the ``edge_map`` "
"argument is deprecated and will be removed in a future release."
msgstr ""

#: ../../release_notes.rst:2463
msgid ""
"The ``combine_into_edge_map()`` method for the "
":class:`qiskit.transpiler.Layout` class has been deprecated and will be "
"removed in a future release. Instead, the new method "
":meth:`~qiskit.transpiler.Layout.reorder_bits` should be used to reorder "
"a list of virtual qubits according to the layout object."
msgstr ""

#: ../../release_notes.rst:2469
msgid ""
"Passing a :class:`qiskit.pulse.ControlChannel` object in via the "
"parameter ``channel`` for the "
":class:`qiskit.providers.models.PulseBackendConfiguration` method "
":meth:`~qiskit.providers.models.PulseBackendConfiguration.control` has "
"been deprecated and will be removed in a future release. The "
"``ControlChannel`` objects are now generated from the backend "
"configuration ``channels`` attribute which has the information of all "
"channels and the qubits they operate on. Now, the method "
":meth:`~qiskit.providers.models.PulseBackendConfiguration.control` is "
"expected to take the parameter ``qubits`` of the form ``(control_qubit, "
"target_qubit)`` and type ``list`` or ``tuple``, and returns a list of "
"control channels."
msgstr ""

#: ../../release_notes.rst:2482
msgid ""
"The ``AND`` and ``OR`` methods of :class:`qiskit.circuit.QuantumCircuit` "
"are deprecated and will be removed in a future release. Instead you "
"should use the circuit library boolean logic classes "
":class:`qiskit.circuit.library.AND` amd "
":class:`qiskit.circuit.library.OR` and then append those objects to your "
"class. For example::"
msgstr ""

#: ../../release_notes.rst:2499
msgid ""
"The ``qiskit.extensions.standard`` module is deprecated and will be "
"removed in a future release. The gate classes in that module have been "
"moved to :mod:`qiskit.circuit.library.standard_gates`."
msgstr ""

#: ../../release_notes.rst:2509
msgid ""
"The :class:`qiskit.circuit.QuantumCircuit` methods "
":meth:`~qiskit.circuit.QuantumCircuit.inverse`, "
":meth:`~qiskit.circuit.QuantumCircuit.mirror` methods, as well as the "
"``QuantumCircuit.data`` setter would generate an invalid circuit when "
"used on a parameterized circuit instance. This has been resolved and "
"these methods should now work with a parameterized circuit. Fixes `#4235 "
"<https://github.com/Qiskit/qiskit-terra/issues/4235>`_"
msgstr ""

#: ../../release_notes.rst:2517
msgid ""
"Previously when creating a controlled version of a standard qiskit gate "
"if a ``ctrl_state`` was specified a generic ``ControlledGate`` object "
"would be returned whereas without it a standard qiskit controlled gate "
"would be returned if it was defined. This PR allows standard qiskit "
"controlled gates to understand ``ctrl_state``."
msgstr ""

#: ../../release_notes.rst:2524
msgid ""
"Additionally, this PR fixes what might be considered a bug where setting "
"the ``ctrl_state`` of an already controlled gate would assume the "
"specified state applied to the full control width instead of the control "
"qubits being added. For instance,::"
msgstr ""

#: ../../release_notes.rst:2536
msgid ""
"would apply ``ctrl_state`` to all three control qubits instead of just "
"the two control qubits being added."
msgstr ""

#: ../../release_notes.rst:2539
msgid ""
"Fixed a bug in :func:`~qiskit.quantum_info.random_clifford` that stopped "
"it from sampling the full Clifford group. Fixes `#4271 "
"<https://github.com/Qiskit/qiskit-terra/issues/4271>`_"
msgstr ""

#: ../../release_notes.rst:2543
msgid ""
"The :class:`qiskit.circuit.Instruction` method "
":meth:`qiskit.circuit.Instruction.is_parameterized` method had previously"
" returned ``True`` for any ``Instruction`` instance which had a "
":class:`qiskit.circuit.Parameter` in any element of its ``params`` array,"
" even if that ``Parameter`` had been fully bound. This has been corrected"
" so that ``.is_parameterized`` will return ``False`` when the instruction"
" is fully bound."
msgstr ""

#: ../../release_notes.rst:2551
msgid ""
":meth:`qiskit.circuit.ParameterExpression.subs` had not correctly "
"detected some cases where substituting parameters would result in a two "
"distinct :class:`~qiskit.circuit.Parameters` objects in an expression "
"with the same name. This has been corrected so a ``CircuitError`` will be"
" raised in these cases."
msgstr ""

#: ../../release_notes.rst:2557
msgid ""
"Improve performance of :class:`qiskit.quantum_info.Statevector` and "
":class:`qiskit.quantum_info.DensityMatrix` for low-qubit circuit "
"simulations by optimizing the class ``__init__`` methods. Fixes `#4281 "
"<https://github.com/Qiskit/qiskit-terra/issues/4281>`_"
msgstr ""

#: ../../release_notes.rst:2562
msgid ""
"The function :func:`qiskit.compiler.transpile` now correctly handles when"
" the parameter ``basis_gates`` is set to ``None``. This will allow any "
"gate in the output tranpiled circuit, including gates added by the "
"transpilation process. Note that using this parameter may have some "
"unintended consequences during optimization. Some transpiler passes "
"depend on having a ``basis_gates`` set. For example, "
":class:`qiskit.transpiler.passes.Optimize1qGates` only optimizes the "
"chains of u1, u2, and u3 gates and without ``basis_gates`` it is unable "
"to unroll gates that otherwise could be optimized:"
msgstr ""

#: ../../release_notes.rst:2592
msgid "Fixes `#3017 <https://github.com/Qiskit/qiskit-terra/issues/3017>`_"
msgstr ""

#: ../../release_notes.rst:2600
msgid ""
"The objects in :mod:`qiskit.providers.models` which were previously "
"constructed using the marshmallow library have been refactored to not "
"depend on marshmallow. This includes:"
msgstr ""

#: ../../release_notes.rst:2604
msgid ":class:`~qiskit.providers.models.BackendConfiguration`"
msgstr ""

#: ../../release_notes.rst:2605
msgid ":class:`~qiskit.providers.models.BackendProperties`"
msgstr ""

#: ../../release_notes.rst:2606
msgid ":class:`~qiskit.providers.models.BackendStatus`"
msgstr ""

#: ../../release_notes.rst:2607
msgid ":class:`~qiskit.providers.models.QasmBackendConfiguration`"
msgstr ""

#: ../../release_notes.rst:2608
msgid ":class:`~qiskit.providers.models.PulseBackendConfiguration`"
msgstr ""

#: ../../release_notes.rst:2609
msgid ":class:`~qiskit.providers.models.UchannelLO`"
msgstr ""

#: ../../release_notes.rst:2610
msgid ":class:`~qiskit.providers.models.GateConfig`"
msgstr ""

#: ../../release_notes.rst:2611
msgid ":class:`~qiskit.providers.models.PulseDefaults`"
msgstr ""

#: ../../release_notes.rst:2612
msgid ":class:`~qiskit.providers.models.Command`"
msgstr ""

#: ../../release_notes.rst:2613
msgid ":class:`~qiskit.providers.models.JobStatus`"
msgstr ""

#: ../../release_notes.rst:2614
msgid ":class:`~qiskit.providers.models.Nduv`"
msgstr ""

#: ../../release_notes.rst:2615
msgid ":class:`~qiskit.providers.models.Gate`"
msgstr ""

#: ../../release_notes.rst:2617
msgid ""
"These should be drop-in replacements without any noticeable change but "
"specifics inherited from marshmallow may not work. Please file issues for"
" any incompatibilities found."
msgstr ""

#: ../../release_notes.rst:2622 ../../release_notes.rst:2756
msgid "Aer 0.5.1"
msgstr ""

#: ../../release_notes.rst:2633
msgid "Aqua 0.7.0"
msgstr ""

#: ../../release_notes.rst:2638
msgid ""
"The Qiskit Aqua 0.7.0 release introduces a lot of new functionality along"
" with an improved integration with :class:`qiskit.circuit.QuantumCircuit`"
" objects. The central contributions are the Qiskit's optimization module,"
" a complete refactor on Operators, using circuits as native input for the"
" algorithms and removal of the declarative JSON API."
msgstr ""

#: ../../release_notes.rst:2645
msgid "Optimization module"
msgstr ""

#: ../../release_notes.rst:2646
msgid ""
"The :mod:`qiskit.optimization`` module now offers functionality for "
"modeling and solving quadratic programs. It provides various near-term "
"quantum and conventional algorithms, such as the "
"``MinimumEigenOptimizer`` (covering e.g. ``VQE`` or ``QAOA``) or "
"``CplexOptimizer``, as well as a set of converters to translate between "
"different problem representations, such as ``QuadraticProgramToQubo``. "
"See the `changelog <https://github.com/Qiskit/qiskit-"
"aqua/blob/master/CHANGELOG.md>`_ for a list of the added features."
msgstr ""

#: ../../release_notes.rst:2657
msgid "Operator flow"
msgstr ""

#: ../../release_notes.rst:2658
msgid ""
"The operator logic provided in :mod:`qiskit.aqua.operators`` was "
"completely refactored and is now a full set of tools for constructing "
"physically-intuitive quantum computations. It contains state functions, "
"operators and measurements and internally relies on Terra's Operator "
"objects. Computing expectation values and evolutions was heavily "
"simplified and objects like the ``ExpectationFactory`` produce the "
"suitable, most efficient expectation algorithm based on the Operator "
"input type. See the `changelog <https://github.com/Qiskit/qiskit-"
"aqua/blob/master/CHANGELOG.md>`_ for a overview of the added "
"functionality."
msgstr ""

#: ../../release_notes.rst:2669
msgid "Native circuits"
msgstr ""

#: ../../release_notes.rst:2670
msgid ""
"Algorithms commonly use parameterized circuits as input, for example the "
"VQE, VQC or QSVM. Previously, these inputs had to be of type "
"``VariationalForm`` or ``FeatureMap`` which were wrapping the circuit "
"object. Now circuits are natively supported in these algorithms, which "
"means any individually constructed ``QuantumCircuit`` can be passed to "
"these algorithms. In combination with the release of the circuit library "
"which offers a wide collection of circuit families, it is now easy to "
"construct elaborate circuits as algorithm input."
msgstr ""

#: ../../release_notes.rst:2680
msgid "Declarative JSON API"
msgstr ""

#: ../../release_notes.rst:2681
msgid ""
"The ability of running algorithms using dictionaries as parameters as "
"well as using the Aqua interfaces GUI has been removed."
msgstr ""

#: ../../release_notes.rst:2686
msgid "IBM Q Provider 0.7.0"
msgstr ""

#: ../../release_notes.rst:2693
msgid ""
"A new exception, :class:`qiskit.providers.ibmq.IBMQBackendJobLimitError`,"
" is now raised if a job could not be submitted because the limit on "
"active jobs has been reached."
msgstr ""

#: ../../release_notes.rst:2697
msgid ""
":class:`qiskit.providers.ibmq.job.IBMQJob` and "
":class:`qiskit.providers.ibmq.managed.ManagedJobSet` each has two new "
"methods ``update_name`` and ``update_tags``. They are used to change the "
"name and tags of a job or a job set, respectively."
msgstr ""

#: ../../release_notes.rst:2702
msgid ""
":meth:`qiskit.providers.ibmq.IBMQFactory.save_account` and "
":meth:`qiskit.providers.ibmq.IBMQFactory.enable_account` now accept "
"optional parameters ``hub``, ``group``, and ``project``, which allow "
"specifying a default provider to save to disk or use, respectively."
msgstr ""

#: ../../release_notes.rst:2713
msgid ""
"The :class:`qiskit.providers.ibmq.job.IBMQJob` methods ``creation_date`` "
"and ``time_per_step`` now return date time information as a ``datetime`` "
"object in local time instead of UTC. Similarly, the parameters "
"``start_datetime`` and ``end_datetime``, of "
":meth:`qiskit.providers.ibmq.IBMQBackendService.jobs` and "
":meth:`qiskit.providers.ibmq.IBMQBackend.jobs` can now be specified in "
"local time."
msgstr ""

#: ../../release_notes.rst:2720
msgid ""
"The :meth:`qiskit.providers.ibmq.job.QueueInfo.format` method now uses a "
"custom ``datetime`` to string formatter, and the package `arrow "
"<https://pypi.org/project/arrow/>`_ is no longer required and has been "
"removed from the requirements list."
msgstr ""

#: ../../release_notes.rst:2731
msgid ""
"The :meth:`~qiskit.providers.ibmq.job.IBMQJob.from_dict` and "
":meth:`~qiskit.providers.ibmq.job.IBMQJob.to_dict` methods of "
":class:`qiskit.providers.ibmq.job.IBMQJob` are deprecated and will be "
"removed in the next release."
msgstr ""

#: ../../release_notes.rst:2742
msgid ""
"Fixed an issue where ``nest_asyncio.apply()`` may raise an exception if "
"there is no asyncio loop due to threading."
msgstr ""

#: ../../release_notes.rst:2748
msgid "Qiskit 0.18.3"
msgstr ""

#: ../../release_notes.rst:2751 ../../release_notes.rst:2851
msgid "Terra 0.13.0"
msgstr ""

#: ../../release_notes.rst:2800
msgid ""
"Fixes Controller classes so that the ReduceBarrier transpilation pass is "
"applied first. This prevents barrier instructions from preventing "
"truncation of unused qubits if the only instruction defined on them was a"
" barrier."
msgstr ""

#: ../../release_notes.rst:2807
msgid ""
"Fix error in gate time unit conversion for device noise model with "
"thermal relaxation errors and gate errors. The error probability the "
"depolarizing error was being  calculated with gate time in microseconds, "
"while for thermal relaxation it was being calculated in nanoseconds. This"
" resulted in no depolarizing error being applied as the incorrect units "
"would make the device seem to be coherence limited."
msgstr ""

#: ../../release_notes.rst:2814
msgid ""
"Fix bug in incorrect composition of QuantumErrors when the qubits of "
"composed instructions differ."
msgstr ""

#: ../../release_notes.rst:2817
msgid ""
"Fix issue where the \"diagonal\" gate is checked to be unitary with too "
"high a tolerance. This was causing diagonals generated from Numpy "
"functions to often fail the test."
msgstr ""

#: ../../release_notes.rst:2821
msgid ""
"Fix remove-barrier circuit optimization pass to be applied before qubit "
"trucation. This fixes an issue where barriers inserted by the Terra "
"transpiler across otherwise inactive qubits would prevent them from being"
" truncated."
msgstr ""

#: ../../release_notes.rst:2833
msgid "Aqua 0.6.6"
msgstr ""

#: ../../release_notes.rst:2839
msgid "IBM Q Provider 0.6.1"
msgstr ""

#: ../../release_notes.rst:2846
msgid "Qiskit 0.18.0"
msgstr ""

#: ../../release_notes.rst:2858
msgid ""
"The 0.13.0 release includes many big changes. Some highlights for this "
"release are:"
msgstr ""

#: ../../release_notes.rst:2861
msgid ""
"For the transpiler we have switched the graph library used to build the "
":class:`qiskit.dagcircuit.DAGCircuit` class which is the underlying data "
"structure behind all operations to be based on `retworkx "
"<https://pypi.org/project/retworkx/>`_ for greatly improved performance. "
"Circuit transpilation speed in the 0.13.0 release should be significanlty"
" faster than in previous releases."
msgstr ""

#: ../../release_notes.rst:2868
msgid ""
"There has been a significant simplification to the style in which Pulse "
"instructions are built. Now, ``Command`` s are deprecated and a unified "
"set of :class:`~qiskit.pulse.instructions.Instruction` s are supported."
msgstr ""

#: ../../release_notes.rst:2872
msgid ""
"The :mod:`qiskit.quantum_info` module includes several new functions for "
"generating random operators (such as Cliffords and quantum channels) and "
"for computing the diamond norm of quantum channels; upgrades to the "
":class:`~qiskit.quantum_info.Statevector` and "
":class:`~qiskit.quantum_info.DensityMatrix` classes to support computing "
"measurement probabilities and sampling measurements; and several new "
"classes are based on the symplectic representation of Pauli matrices. "
"These new classes include Clifford operators "
"(:class:`~qiskit.quantum_info.Clifford`), N-qubit matrices that are "
"sparse in the Pauli basis (:class:`~qiskit.quantum_info.SparsePauliOp`), "
"lists of Pauli's (:class:`~qiskit.quantum_info.PauliTable`), and lists of"
" stabilizers (:class:`~qiskit.quantum_info.StabilizerTable`)."
msgstr ""

#: ../../release_notes.rst:2885
msgid ""
"This release also has vastly improved documentation across Qiskit, "
"including improved documentation for the :mod:`qiskit.circuit`, "
":mod:`qiskit.pulse` and :mod:`qiskit.quantum_info` modules."
msgstr ""

#: ../../release_notes.rst:2889
msgid ""
"Additionally, the naming of gate objects and "
":class:`~qiskit.circuit.QuantumCircuit` methods have been updated to be "
"more consistent. This has resulted in several classes and methods being "
"deprecated as things move to a more consistent naming scheme."
msgstr ""

#: ../../release_notes.rst:2894
msgid ""
"For full details on all the changes made in this release see the detailed"
" release notes below."
msgstr ""

#: ../../release_notes.rst:2903
msgid ""
"Added a new circuit library module :mod:`qiskit.circuit.library`. This "
"will be a place for constructors of commonly used circuits that can be "
"used as building blocks for larger circuits or applications."
msgstr ""

#: ../../release_notes.rst:2907
msgid "The :class:`qiskit.providers.BaseJob` class has four new methods:"
msgstr ""

#: ../../release_notes.rst:2909
msgid ":meth:`~qiskit.providers.BaseJob.done`"
msgstr ""

#: ../../release_notes.rst:2910
msgid ":meth:`~qiskit.providers.BaseJob.running`"
msgstr ""

#: ../../release_notes.rst:2911
msgid ":meth:`~qiskit.providers.BaseJob.cancelled`"
msgstr ""

#: ../../release_notes.rst:2912
msgid ":meth:`~qiskit.providers.BaseJob.in_final_state`"
msgstr ""

#: ../../release_notes.rst:2914
msgid "These methods are used to check wheter a job is in a given job status."
msgstr ""

#: ../../release_notes.rst:2916
msgid ""
"Add ability to specify control conditioned on a qubit being in the ground"
" state. The state of the control qubits is represented by an integer. For"
" example::"
msgstr ""

#: ../../release_notes.rst:2927
msgid ""
"Creates a four qubit gate where the fourth qubit gets flipped if the "
"first qubit is in the ground state and the second and third qubits are in"
" the excited state. If ``ctrl_state`` is ``None``, the default, control "
"is conditioned on all control qubits being excited."
msgstr ""

#: ../../release_notes.rst:2933
#, python-format
msgid ""
"A new jupyter widget, ``%circuit_library_info`` has been added to "
":mod:`qiskit.tools.jupyter`. This widget is used for visualizing details "
"about circuits built from the circuit library. For example"
msgstr ""

#: ../../release_notes.rst:2944
msgid ""
"A new kwarg option, ``formatted`` ,  has been added to "
":meth:`qiskit.circuit.QuantumCircuit.qasm` . When set to ``True`` the "
"method will print a syntax highlighted version (using pygments) to stdout"
" and return ``None`` (which differs from the normal behavior of returning"
" the QASM code as a string)."
msgstr ""

#: ../../release_notes.rst:2950
msgid ""
"A new kwarg option, ``filename`` , has been added to "
":meth:`qiskit.circuit.QuantumCircuit.qasm`. When set to a path the method"
" will write the QASM code to that file. It will then continue to output "
"as normal."
msgstr ""

#: ../../release_notes.rst:2955
msgid ""
"A new instruction :py:class:`~qiskit.pulse.SetFrequency` which allows "
"users to change the frequency of the :class:`~qiskit.pulse.PulseChannel`."
" This is done in the following way::"
msgstr ""

#: ../../release_notes.rst:2965
msgid ""
"In this example, the frequency of all pulses before the ``SetFrequency`` "
"command will be the default frequency and all pulses applied to drive "
"channel zero after the ``SetFrequency`` command will be at 5.5 GHz. Users"
" of ``SetFrequency`` should keep in mind any hardware limitations."
msgstr ""

#: ../../release_notes.rst:2970
msgid ""
"A new method, :meth:`~qiskit.circuit.QuantumCircuit.assign_parameters` "
"has been added to the :class:`qiskit.circuit.QuantumCircuit` class. This "
"method accepts a parameter dictionary with both floats and Parameters "
"objects in a single dictionary. In other words this new method allows you"
" to bind floats, Parameters or both in a single dictionary."
msgstr ""

#: ../../release_notes.rst:2976
msgid ""
"Also, by using the ``inplace`` kwarg it can be specified you can "
"optionally modify the original circuit in place. By default this is set "
"to ``False`` and a copy of the original circuit will be returned from the"
" method."
msgstr ""

#: ../../release_notes.rst:2980
msgid ""
"A new method :meth:`~qiskit.circuit.QuantumCircuit.num_nonlocal_gates` "
"has been added to the :class:`qiskit.circuit.QuantumCircuit` class. This "
"method will return the number of gates in a circuit that involve 2 or or "
"more qubits. These gates are more costly in terms of time and error to "
"implement."
msgstr ""

#: ../../release_notes.rst:2986
msgid ""
"The :class:`qiskit.circuit.QuantumCircuit` method "
":meth:`~qiskit.circuit.QuantumCircuit.iso` for adding an "
":class:`~qiskit.extensions.Isometry` gate to the circuit has a new alias."
" You can now call :meth:`qiskit.circuit.QuantumCircuit.isometry` in "
"addition to calling ``iso``."
msgstr ""

#: ../../release_notes.rst:2992
msgid ""
"A ``description`` attribute has been added to the "
":class:`~qiskit.transpiler.CouplingMap` class for storing a short "
"description for different coupling maps (e.g. full, grid, line, etc.)."
msgstr ""

#: ../../release_notes.rst:2996
msgid ""
"A new method :meth:`~qiskit.dagcircuit.DAGCircuit.compose` has been added"
" to the :class:`~qiskit.dagcircuit.DAGCircuit` class for composing two "
"circuits via their DAGs."
msgstr ""

#: ../../release_notes.rst:3039
msgid ""
"The mock backends in ``qiskit.test.mock`` now have a functional ``run()``"
" method that will return results similar to the real devices. If "
"``qiskit-aer`` is installed a simulation will be run with a noise model "
"built from the device snapshot in the fake backend.  Otherwise, "
":class:`qiskit.providers.basicaer.QasmSimulatorPy` will be used to run an"
" ideal simulation. Additionally, if a pulse experiment is passed to "
"``run`` and qiskit-aer is installed the ``PulseSimulator`` will be used "
"to simulate the pulse schedules."
msgstr ""

#: ../../release_notes.rst:3048
msgid ""
"The :meth:`qiskit.result.Result` method "
":meth:`~qiskit.result.Result.get_counts` will now return a list of all "
"the counts available when there are multiple circuits in a job. This "
"works when ``get_counts()`` is called with no arguments."
msgstr ""

#: ../../release_notes.rst:3053
msgid ""
"The main consideration for this feature was for drawing all the results "
"from multiple circuits in the same histogram. For example it is now "
"possible to do something like:"
msgstr ""

#: ../../release_notes.rst:3074
msgid ""
"A new kwarg, ``initial_state`` has been added to the "
":func:`qiskit.visualization.circuit_drawer` function and the "
":class:`~qiskit.circuit.QuantumCircuit` method "
":meth:`~qiskit.circuit.QuantumCircuit.draw`. When set to ``True`` the "
"initial state will be included in circuit visualizations for all "
"backends. For example:"
msgstr ""

#: ../../release_notes.rst:3089
msgid ""
"It is now possible to insert a callable into a "
":class:`qiskit.pulse.InstructionScheduleMap` which returns a new "
":class:`qiskit.pulse.Schedule` when it is called with parameters. For "
"example:"
msgstr ""

#: ../../release_notes.rst:3105
msgid ""
"Two new gate classes, :class:`qiskit.extensions.iSwapGate` and "
":class:`qiskit.extensions.DCXGate`, along with their "
":class:`~qiskit.circuit.QuantumCircuit` methods "
":meth:`~qiskit.circuit.QuantumCircuit.iswap` and "
":meth:`~qiskit.circuit.QuantumCircuit.dcx` have been added to the "
"standard extensions. These gates, which are locally equivalent to each "
"other, can be used to enact particular XY interactions. A brief "
"motivation for these gates can be found in: `arxiv.org/abs/quant-"
"ph/0209035 <https://arxiv.org/abs/quant-ph/0209035>`_"
msgstr ""

#: ../../release_notes.rst:3115
msgid ""
"The :class:`qiskit.providers.BaseJob` class now has a new method "
":meth:`~qiskit.providers.BaseJob.wait_for_final_state` that polls for the"
" job status until the job reaches a final state (such as ``DONE`` or "
"``ERROR``). This method also takes an optional ``callback`` kwarg which "
"takes a Python callable that will be called during each iteration of the "
"poll loop."
msgstr ""

#: ../../release_notes.rst:3122
msgid ""
"The ``search_width`` and ``search_depth`` attributes of the "
":class:`qiskit.transpiler.passes.LookaheadSwap` pass are now settable "
"when initializing the pass. A larger search space can often lead to more "
"optimized circuits, at the cost of longer run time."
msgstr ""

#: ../../release_notes.rst:3127
msgid ""
"The number of qubits in "
":class:`~qiskit.providers.models.BackendConfiguration` can now be "
"accessed via the property "
":py:attr:`~qiskit.providers.models.BackendConfiguration.num_qubits`. It "
"was previously only accessible via the ``n_qubits`` attribute."
msgstr ""

#: ../../release_notes.rst:3133
msgid ""
"Two new methods, "
":meth:`~qiskit.quantum_info.OneQubitEulerDecomposer.angles` and "
":meth:`~qiskit.quantum_info.OneQubitEulerDecomposer.angles_and_phase`, "
"have been added to the "
":class:`qiskit.quantum_info.OneQubitEulerDecomposer` class. These methods"
" will return the relevant parameters without validation, and calling the "
"``OneQubitEulerDecomposer`` object will perform the full synthesis with "
"validation."
msgstr ""

#: ../../release_notes.rst:3140
msgid ""
"An ``RR`` decomposition basis has been added to the "
":class:`qiskit.quantum_info.OneQubitEulerDecomposer` for decomposing an "
"arbitrary 2x2 unitary into a two :class:`~qiskit.extensions.RGate` "
"circuit."
msgstr ""

#: ../../release_notes.rst:3145
msgid ""
"Adds the ability to set ``qargs`` to objects which are subclasses of the "
"abstract ``BaseOperator`` class. This is done by calling the object "
"``op(qargs)`` (where ``op`` is an operator class) and will return a "
"shallow copy of the original object with a qargs property set. When such "
"an object is used with the :meth:`~qiskit.quantum_info.Operator.compose` "
"or :meth:`~qiskit.quantum_info.Operator.dot` methods the internal value "
"for qargs will be used when the ``qargs`` method kwarg is not used. This "
"allows for subsystem composition using binary operators, for example::"
msgstr ""

#: ../../release_notes.rst:3162
msgid ""
"Adds :class:`qiskit.quantum_info.Clifford` operator class to the "
"`quantum_info` module. This operator is an efficient symplectic "
"representation an N-qubit unitary operator from the Clifford group. This "
"class includes a :meth:`~qiskit.quantum_info.Clifford.to_circuit` method "
"for compilation into a :class:`~qiskit.QuantumCircuit` of Clifford gates "
"with a minimal number of CX gates for up to 3-qubits. It also providers "
"general compilation for N > 3 qubits but this method is not optimal in "
"the number of two-qubit gates."
msgstr ""

#: ../../release_notes.rst:3171
msgid ""
"Adds :class:`qiskit.quantum_info.SparsePauliOp` operator class. This is "
"an efficient representaiton of an N-qubit matrix that is sparse in the "
"Pauli basis and uses a :class:`qiskit.quantum_info.PauliTable` and vector"
" of complex coefficients for its data structure."
msgstr ""

#: ../../release_notes.rst:3176
msgid ""
"This class supports much of the same functionality of the "
":class:`qiskit.quantum_info.Operator` class so "
":class:`~qiskit.quantum_info.SparsePauliOp` objects can be tensored, "
"composed, scalar multiplied, added and subtracted."
msgstr ""

#: ../../release_notes.rst:3181
msgid ""
"Numpy arrays or :class:`~qiskit.quantum_info.Operator` objects can be "
"converted to a :class:`~qiskit.quantum_info.SparsePauliOp` using the "
"`:class:`~qiskit.quantum_info.SparsePauliOp.from_operator` method. "
":class:`~qiskit.quantum_info.SparsePauliOp` can be convered to a sparse "
"csr_matrix or dense Numpy array using the "
":class:`~qiskit.quantum_info.SparsePauliOp.to_matrix` method, or to an "
":class:`~qiskit.quantum_info.Operator` object using the "
":class:`~qiskit.quantum_info.SparsePauliOp.to_operator` method."
msgstr ""

#: ../../release_notes.rst:3190
msgid ""
"A :class:`~qiskit.quantum_info.SparsePauliOp` can be iterated over in "
"terms of its :class:`~qiskit.quantum_info.PauliTable` components and "
"coefficients, its coefficients and Pauli string labels using the "
":meth:`~qiskit.quantum_info.SparsePauliOp.label_iter` method, and the "
"(dense or sparse) matrix components using the "
":meth:`~qiskit.quantum_info.SparsePauliOp.matrix_iter` method."
msgstr ""

#: ../../release_notes.rst:3197
msgid ""
"Add :meth:`qiskit.quantum_info.diamond_norm` function for computing the "
"diamond norm (completely-bounded trace-norm) of a quantum channel. This "
"can be used to compute the distance between two quantum channels using "
"``diamond_norm(chan1 - chan2)``."
msgstr ""

#: ../../release_notes.rst:3202
msgid ""
"A new class :class:`qiskit.quantum_info.PauliTable` has been added. This "
"is an efficient symplectic representation of a list of N-qubit Pauli "
"operators. Some features of this class are:"
msgstr ""

#: ../../release_notes.rst:3206
msgid ""
":class:`~qiskit.quantum_info.PauliTable` objects may be composed, and "
"tensored which will return a :class:`~qiskit.quantum_info.PauliTable` "
"object with the combination of the operation ( "
":meth:`~qiskit.quantum_info.PauliTable.compose`, "
":meth:`~qiskit.quantum_info.PauliTable.dot`, "
":meth:`~qiskit.quantum_info.PauliTable.expand`, "
":meth:`~qiskit.quantum_info.PauliTable.tensor`) between each element of  "
"the first table, with each element of the second table."
msgstr ""

#: ../../release_notes.rst:3215
msgid ""
"Addition of two tables acts as list concatination of the terms in each "
"table (``+``)."
msgstr ""

#: ../../release_notes.rst:3218
msgid ""
"Pauli tables can be sorted by lexicographic (tensor product) order or by "
"Pauli weights (:meth:`~qiskit.quantum_info.PauliTable.sort`)."
msgstr ""

#: ../../release_notes.rst:3221
msgid ""
"Duplicate elements can be counted and deleted "
"(:meth:`~qiskit.quantum_info.PauliTable.unique`)."
msgstr ""

#: ../../release_notes.rst:3224
msgid ""
"The PauliTable may be iterated over in either its native symplectic "
"boolean array representation, as Pauli string labels "
"(:meth:`~qiskit.quantum_info.PauliTable.label_iter`), or as dense Numpy "
"array or sparse CSR matrices "
"(:meth:`~qiskit.quantum_info.PauliTable.matrix_iter`)."
msgstr ""

#: ../../release_notes.rst:3230
msgid ""
"Checking commutation between elements of the Pauli table and another "
"Pauli (:meth:`~qiskit.quantum_info.PauliTable.commutes`) or Pauli table "
"(:meth:`~qiskit.quantum_info.PauliTable.commutes_with_all`)"
msgstr ""

#: ../../release_notes.rst:3234
msgid ""
"See the :class:`qiskit.quantum_info.PauliTable` class API documentation "
"for additional details."
msgstr ""

#: ../../release_notes.rst:3237
msgid ""
"Adds :class:`qiskit.quantum_info.StabilizerTable` class. This is a "
"subclass of the :class:`qiskit.quantum_info.PauliTable` class which "
"includes a boolean phase vector along with the Pauli table array. This "
"represents a list of Stabilizer operators which are real-Pauli operators "
"with +1 or -1 coefficient. Because the stabilizer matrices are real the "
"``\"Y\"`` label matrix is defined as ``[[0, 1], [-1, 0]]``. See the API "
"documentation for additional information."
msgstr ""

#: ../../release_notes.rst:3245
msgid ""
"Adds :func:`qiskit.quantum_info.pauli_basis` function which returns an "
"N-qubit Pauli basis as a :class:`qiskit.quantum_info.PauliTable` object. "
"The ordering of this basis can either be by standard lexicographic "
"(tensor product) order, or by the number of non-identity Pauli terms "
"(weight)."
msgstr ""

#: ../../release_notes.rst:3250
msgid ""
"Adds :class:`qiskit.quantum_info.ScalarOp` operator class that represents"
" a scalar multiple of an identity operator. This can be used to "
"initialize an identity on arbitrary dimension subsystems and it will be "
"implicitly converted to other ``BaseOperator`` subclasses (such as an "
":class:`qiskit.quantum_info.Operator` or "
":class:`qiskit.quantum_info.SuperOp`) when it is composed with, or added "
"to, them."
msgstr ""

#: ../../release_notes.rst:3258
msgid "Example: Identity operator"
msgstr ""

#: ../../release_notes.rst:3270
msgid ""
"A new method, :meth:`~qiskit.quantum_info.Operator.reshape`, has been "
"added to the :class:`qiskit.quantum_innfo.Operator` class that returns a "
"shallow copy of an operator subclass with reshaped subsystem input or "
"output dimensions. The combined dimensions of all subsystems must be the "
"same as the original operator or an exception will be raised."
msgstr ""

#: ../../release_notes.rst:3276
msgid ""
"Adds :func:`qiskit.quantum_info.random_clifford` for generating a random "
":class:`qiskit.quantum_info.Clifford` operator."
msgstr ""

#: ../../release_notes.rst:3279
msgid ""
"Add :func:`qiskit.quantum_info.random_quantum_channel` function for "
"generating a random quantum channel with fixed "
":class:`~qiskit.quantum_info.Choi`-rank in the "
":class:`~qiskit.quantum_info.Stinespring` representation."
msgstr ""

#: ../../release_notes.rst:3284
msgid ""
"Add :func:`qiskit.quantum_info.random_hermitian` for generating a random "
"Hermitian :class:`~qiskit.quantum_info.Operator`."
msgstr ""

#: ../../release_notes.rst:3287
msgid ""
"Add :func:`qiskit.quantum_info.random_statevector` for generating a "
"random :class:`~qiskit.quantum_info.Statevector`."
msgstr ""

#: ../../release_notes.rst:3290
msgid ""
"Adds :func:`qiskit.quantum_info.random_pauli_table` for generating a "
"random :class:`qiskit.quantum_info.PauliTable`."
msgstr ""

#: ../../release_notes.rst:3293
msgid ""
"Adds :func:`qiskit.quantum_info.random_stabilizer_table` for generating a"
" random :class:`qiskit.quantum_info.StabilizerTable`."
msgstr ""

#: ../../release_notes.rst:3296
msgid ""
"Add a ``num_qubits`` attribute to "
":class:`qiskit.quantum_info.StateVector` and "
":class:`qiskit.quantum_info.DensityMatrix` classes. This returns the "
"number of qubits for N-qubit states and returns ``None`` for non-qubit "
"states."
msgstr ""

#: ../../release_notes.rst:3300
msgid ""
"Adds :meth:`~qiskit.quantum_info.Statevector.to_dict` and "
":meth:`~qiskit.quantum_info.DensityMatrix.to_dict` methods to convert "
":class:`qiskit.quantum_info.Statevector` and "
":class:`qiskit.quantum_info.DensityMatrix` objects into Bra-Ket notation "
"dictionary."
msgstr ""

#: ../../release_notes.rst:3306 ../../release_notes.rst:3329
msgid "Example"
msgstr ""

#: ../../release_notes.rst:3322
msgid ""
"Adds :meth:`~qiskit.quantum_info.Statevector.probabilities` and "
":meth:`~qiskit.quantum_info.DensityMatrix.probabilities` to "
":class:`qiskit.quantum_info.Statevector` and "
":class:`qiskit.quantum_info.DensityMatrix` classes which return an array "
"of measurement outcome probabilities in the computational basis for the "
"specified subsystems."
msgstr ""

#: ../../release_notes.rst:3345
msgid ""
"Adds :meth:`~qiskit.quantum_info.Statevector.probabilities_dict` and "
":meth:`~qiskit.quantum_info.DensityMatrix.probabilities_dict` to "
":class:`qiskit.quantum_info.Statevector` and "
":class:`qiskit.quantum_info.DensityMatrix` classes which return a count-"
"style dictionary array of measurement outcome probabilities in the "
"computational basis for the specified subsystems."
msgstr ""

#: ../../release_notes.rst:3366
msgid ""
"Add :meth:`~qiskit.quantum_info.Statevector.sample_counts` and "
":meth:`~qiskit.quantum_info.Statevector.sample_memory` methods to the "
":class:`~qiskit.quantum_info.Statevector` and "
":class:`~qiskit.quantum_info.DensityMatrix` classes for sampling "
"measurement outcomes on subsystems."
msgstr ""

#: ../../release_notes.rst:3372
msgid "Example:"
msgstr ""

#: ../../release_notes.rst:3374
msgid "Generate a counts dictionary by sampling from a statevector"
msgstr ""

#: ../../release_notes.rst:3395
msgid "Return the array of measurement outcomes for each sample"
msgstr ""

#: ../../release_notes.rst:3416
msgid ""
"Adds a :meth:`~qiskit.quantum_info.Statevector.measure` method to the "
":class:`qiskit.quantum_info.Statevector` and "
":class:`qiskit.quantum_info.DensityMatrix` quantum state classes. This "
"allows sampling a single measurement outcome from the specified "
"subsystems and collapsing the statevector to the post-measurement "
"computational basis state. For example"
msgstr ""

#: ../../release_notes.rst:3439
msgid ""
"Adds a :meth:`~qiskit.quantum_info.Statevector.reset` method to the "
":class:`qiskit.quantum_info.Statevector` and "
":class:`qiskit.quantum_info.DensityMatrix` quantum state classes. This "
"allows reseting some or all subsystems to the :math:`|0\\rangle` state. "
"For example"
msgstr ""

#: ../../release_notes.rst:3461
msgid ""
"A new visualization function "
":func:`qiskit.visualization.visualize_transition` for visualizing single "
"qubit gate transitions has been added. It takes in a single qubit circuit"
" and returns an animation of qubit state transitions on a Bloch sphere. "
"To use this function you must have installed the dependencies for and "
"configured globally a matplotlib animtion writer. You can refer to the "
"`matplotlib documentation <https://matplotlib.org/api/animation_api.html"
"#writer-classes>`_ for more details on this. However, in the default case"
" simply ensuring that `FFmpeg <https://www.ffmpeg.org/>`_ is installed is"
" sufficient to use this function."
msgstr ""

#: ../../release_notes.rst:3473
msgid "It supports circuits with the following gates:"
msgstr ""

#: ../../release_notes.rst:3475
msgid ":class:`~qiskit.extensions.HGate`"
msgstr ""

#: ../../release_notes.rst:3476
msgid ":class:`~qiskit.extensions.XGate`"
msgstr ""

#: ../../release_notes.rst:3477
msgid ":class:`~qiskit.extensions.YGate`"
msgstr ""

#: ../../release_notes.rst:3478
msgid ":class:`~qiskit.extensions.ZGate`"
msgstr ""

#: ../../release_notes.rst:3479
msgid ":class:`~qiskit.extensions.RXGate`"
msgstr ""

#: ../../release_notes.rst:3480
msgid ":class:`~qiskit.extensions.RYGate`"
msgstr ""

#: ../../release_notes.rst:3481
msgid ":class:`~qiskit.extensions.RZGate`"
msgstr ""

#: ../../release_notes.rst:3482
msgid ":class:`~qiskit.extensions.SGate`"
msgstr ""

#: ../../release_notes.rst:3483
msgid ":class:`~qiskit.extensions.SdgGate`"
msgstr ""

#: ../../release_notes.rst:3484
msgid ":class:`~qiskit.extensions.TGate`"
msgstr ""

#: ../../release_notes.rst:3485
msgid ":class:`~qiskit.extensions.TdgGate`"
msgstr ""

#: ../../release_notes.rst:3486
msgid ":class:`~qiskit.extensions.U1Gate`"
msgstr ""

#: ../../release_notes.rst:3503
msgid ""
":func:`~qiskit.execute.execute` has a new kwarg ``schedule_circuit``. By "
"setting ``schedule_circuit=True`` this enables scheduling of the circuit "
"into a :class:`~qiskit.pulse.Schedule`. This allows users building "
":class:`qiskit.circuit.QuantumCircuit` objects to make use of custom "
"scheduler  methods, such as the ``as_late_as_possible`` and "
"``as_soon_as_possible`` methods. For example::"
msgstr ""

#: ../../release_notes.rst:3514
msgid ""
"A new environment variable ``QISKIT_SUPPRESS_PACKAGING_WARNINGS`` can be "
"set to ``Y`` or ``y`` which will suppress the warnings about ``qiskit-"
"aer`` and ``qiskit-ibmq-provider`` not being installed at import time. "
"This is useful for users who are only running qiskit-terra (or just not "
"qiskit-aer and/or qiskit-ibmq-provider) and the warnings are not an "
"indication of a potential packaging problem. You can set the environment "
"variable to ``N`` or ``n`` to ensure that warnings are always enabled "
"even if the user config file is set to disable them."
msgstr ""

#: ../../release_notes.rst:3523
msgid ""
"A new user config file option, ``suppress_packaging_warnings`` has been "
"added. When set to ``true`` in your user config file like::"
msgstr ""

#: ../../release_notes.rst:3529
msgid ""
"it will suppress the warnings about  ``qiskit-aer`` and ``qiskit-ibmq-"
"provider`` not being installed at import time. This is useful for users "
"who are only running qiskit-terra (or just not qiskit-aer and/or qiskit-"
"ibmq-provider) and the warnings are not an indication of a potential "
"packaging problem. If the user config file is set to disable the warnings"
" this can be overriden by setting the "
"``QISKIT_SUPPRESS_PACKAGING_WARNINGS`` to ``N`` or ``n``"
msgstr ""

#: ../../release_notes.rst:3537
msgid ""
":func:`qiskit.compiler.transpile()` has two new kwargs, ``layout_method``"
" and ``routing_method``. These allow you to select a particular method "
"for placement and routing of circuits on constrained architectures. For, "
"example::"
msgstr ""

#: ../../release_notes.rst:3545
msgid ""
"will run :class:`~qiskit.transpiler.passes.DenseLayout` layout pass and "
":class:`~qiskit.transpiler.passes.LookaheadSwap` routing pass."
msgstr ""

#: ../../release_notes.rst:3548
msgid ""
"There has been a significant simplification to the style in which Pulse "
"instructions are built."
msgstr ""

#: ../../release_notes.rst:3551
msgid ""
"With the previous style, ``Command`` s were called with channels to make "
"an :py:class:`~qiskit.pulse.instructions.Instruction`. The usage of both "
"commands and instructions was a point of confusion. This was the previous"
" style::"
msgstr ""

#: ../../release_notes.rst:3561
msgid "or, equivalently (though less used)::"
msgstr ""

#: ../../release_notes.rst:3569
msgid ""
"Now, rather than build a command *and* an instruction, each command has "
"been migrated into an instruction::"
msgstr ""

#: ../../release_notes.rst:3578
msgid ""
"There is now a :py:class:`~qiskit.pulse.instructions.Play` instruction "
"which takes a description of a pulse envelope and a channel. There is a "
"new :py:class:`~qiskit.pulse.pulse_lib.Pulse` class in the "
":mod:`~qiskit.pulse.pulse_lib` from which the pulse envelope description "
"should subclass."
msgstr ""

#: ../../release_notes.rst:3595
msgid ""
"The :class:`qiskit.dagcircuit.DAGNode` method ``pop`` which was "
"deprecated in the 0.9.0 release has been removed. If you were using this "
"method you can leverage Python's ``del`` statement or ``delattr()`` "
"function to perform the same task."
msgstr ""

#: ../../release_notes.rst:3600
#, python-format
msgid ""
"A new optional visualization requirement, `pygments "
"<https://pygments.org/>`_ , has been added. It is used for providing "
"syntax highlighting of OpenQASM 2.0 code in Jupyter widgets and "
"optionally for the :meth:`qiskit.circuit.QuantumCircuit.qasm` method. It "
"must be installed (either with ``pip install pygments`` or ``pip install "
"qiskit-terra[visualization]``) prior to using the "
"``%circuit_library_info`` widget in :mod:`qiskit.tools.jupyter` or the "
"``formatted`` kwarg on the :meth:`~qiskit.circuit.QuantumCircuit.qasm` "
"method."
msgstr ""

#: ../../release_notes.rst:3610
msgid ""
"The pulse ``buffer`` option found in :class:`qiskit.pulse.Channel` and "
":class:`qiskit.pulse.Schedule` was deprecated in Terra 0.11.0 and has now"
" been removed. To add a delay on a channel or in a schedule, specify it "
"explicitly in your Schedule with a Delay::"
msgstr ""

#: ../../release_notes.rst:3618
msgid ""
"``PulseChannelSpec``, which was deprecated in Terra 0.11.0, has now been "
"removed. Use BackendConfiguration instead::"
msgstr ""

#: ../../release_notes.rst:3625
msgid ""
"or, simply reference the channel directly, such as "
"``DriveChannel(index)``."
msgstr ""

#: ../../release_notes.rst:3627
msgid ""
"An import path was deprecated in Terra 0.10.0 and has now been removed: "
"for ``PulseChannel``, ``DriveChannel``, ``MeasureChannel``, and "
"``ControlChannel``, use ``from qiskit.pulse.channels import X`` in place "
"of ``from qiskit.pulse.channels.pulse_channels import X``."
msgstr ""

#: ../../release_notes.rst:3632
msgid ""
"The pass :class:`qiskit.transpiler.passes.CSPLayout` (which was "
"introduced in the 0.11.0 release) has been added to the preset pass "
"manager for optimization levels 2 and 3. For level 2, there is a call "
"limit of 1,000 and a timeout of 10 seconds. For level 3, the call limit "
"is 10,000 and the timeout is 1 minute."
msgstr ""

#: ../../release_notes.rst:3638
msgid ""
"Now that the pass is included in the preset pass managers the `python-"
"constraint <https://pypi.org/project/python-constraint/>`_ package is not"
" longer an optional dependency and has been added to the requirements "
"list."
msgstr ""

#: ../../release_notes.rst:3643
msgid ""
"The ``TranspileConfig`` class which was previously used to set run time "
"configuration for a :class:`qiskit.transpiler.PassManager` has been "
"removed and replaced by a new class "
":class:`qiskit.transpile.PassManagerConfig`. This new class has been "
"structured to include only the information needed to construct a "
":class:`~qiskit.transpiler.PassManager`. The attributes of this class "
"are:"
msgstr ""

#: ../../release_notes.rst:3650 ../../release_notes.rst:3716
msgid "``initial_layout``"
msgstr ""

#: ../../release_notes.rst:3651 ../../release_notes.rst:3712
msgid "``basis_gates``"
msgstr ""

#: ../../release_notes.rst:3652 ../../release_notes.rst:3713
msgid "``coupling_map``"
msgstr ""

#: ../../release_notes.rst:3653 ../../release_notes.rst:3715
msgid "``backend_properties``"
msgstr ""

#: ../../release_notes.rst:3654 ../../release_notes.rst:3714
msgid "``seed_transpiler``"
msgstr ""

#: ../../release_notes.rst:3656
msgid ""
"The function ``transpile_circuit`` in :mod:`qiskit.transpiler` has been "
"removed. To transpile a circuit with a custom "
":class:`~qiskit.transpiler.PassManager` now you should use the "
":meth:`~qiskit.transpiler.PassManager.run` method of the "
":class:~qiskit.transpiler.PassManager` object."
msgstr ""

#: ../../release_notes.rst:3662
msgid ""
"The :class:`~qiskit.circuit.QuantumCircuit` method "
":meth:`~qiskit.circuit.QuantumCircuit.draw` and "
":func:`qiskit.visualization.circuit_drawer` function will no longer "
"include the initial state included in visualizations by default. If you "
"would like to retain the initial state in the output visualization you "
"need to set the ``initial_state`` kwarg to ``True``. For example, "
"running:"
msgstr ""

#: ../../release_notes.rst:3677
msgid ""
"This no longer includes the initial state. If you'd like to retain it you"
" can run:"
msgstr ""

#: ../../release_notes.rst:3688
msgid ""
":func:`qiskit.compiler.transpile` (and :func:`qiskit.execute.execute`, "
"which uses ``transpile`` internally) will now raise an error when the "
"``pass_manager`` kwarg is set and a value is set for other kwargs that "
"are already set in an instantiated "
":class:`~qiskit.transpiler.PassManager` object. Previously, these "
"conflicting kwargs would just be silently ignored and the values in the "
"``PassManager`` instance would be used. For example::"
msgstr ""

#: ../../release_notes.rst:3707
msgid ""
"will now raise an error while prior to this release the value in ``pm`` "
"would just silently be used and the value for the ``optimization_level`` "
"kwarg would be ignored. The ``transpile`` kwargs this applies to are:"
msgstr ""

#: ../../release_notes.rst:3711
msgid "``optimization_level``"
msgstr ""

#: ../../release_notes.rst:3717
msgid "``layout_method``"
msgstr ""

#: ../../release_notes.rst:3718
msgid "``routing_method``"
msgstr ""

#: ../../release_notes.rst:3719
msgid "``backend``"
msgstr ""

#: ../../release_notes.rst:3721
msgid ""
"The :class:`~qiskit.quantum_info.Operator`, "
":class:`~qiskit.quantum_info.Clifford`, "
":class:`~qiskit.quantum_info.SparsePauliOp`, "
":class:`~qiskit.quantum_info.PauliTable`, "
":class:`~qiskit.quantum_info.StabilizerTable`, operator classes have an "
"added ``call`` method that allows them to assign a `qargs` to the "
"operator for use with the :meth:`~qiskit.quantum_info.Operator.compose`, "
":meth:`~qiskit.quantum_info.Operator.dot`, "
":meth:`~qiskit.quantum_info.Statevector.evolve`,``+``, and ``-`` "
"operations."
msgstr ""

#: ../../release_notes.rst:3731
msgid ""
"The addition method of the :class:`qiskit.quantum_info.Operator`, class "
"now accepts a ``qarg`` kwarg to allow adding a smaller operator to a "
"larger one assuming identities on the other subsystems (same as for "
"``qargs`` on :meth:`~qiskit.quantum_info.Operator.compose` and "
":meth:`~qiskit.quantum_info.Operator.dot` methods). This allows subsystem"
" addition using the call method as with composition. This support is "
"added to all BaseOperator subclasses "
"(:class:`~qiskit.quantum_info.ScalarOp`, "
":class:`~qiskit.quantum_info.Operator`, "
":class:`~qiskit.quantum_info.QuantumChannel`)."
msgstr ""

#: ../../release_notes.rst:3757
msgid ""
"The ``BaseOperator`` class has been updated so that addition, subtraction"
" and scalar multiplication are no longer abstract methods. This means "
"that they are no longer required to be implemented in subclasses if they "
"are not supported. The base class will raise a ``NotImplementedError`` "
"when the methods are not defined."
msgstr ""

#: ../../release_notes.rst:3763
msgid ""
"The :func:`qiskit.quantum_info.random_density_matrix` function will now "
"return a random :class:`~qiskit.quantum_info.DensityMatrix` object. In "
"previous releases it returned a numpy array."
msgstr ""

#: ../../release_notes.rst:3767
msgid ""
"The :class:`qiskit.quantum_info.Statevector` and "
":class:`qiskit.quantum_info.DensityMatrix` classes no longer copy the "
"input array if it is already the correct dtype."
msgstr ""

#: ../../release_notes.rst:3771
msgid ""
"`fastjsonschema <https://pypi.org/project/fastjsonschema/>`_ is added as "
"a dependency. This is used for much faster validation of qobj "
"dictionaries against the JSON schema when the ``to_dict()`` method is "
"called on qobj objects with the ``validate`` keyword argument set to "
"``True``."
msgstr ""

#: ../../release_notes.rst:3776
msgid ""
"The qobj construction classes in :mod:`qiskit.qobj` will no longer "
"validate against the qobj jsonschema by default. These include the "
"following classes:"
msgstr ""

#: ../../release_notes.rst:3779 ../../release_notes.rst:3791
msgid ":class:`qiskit.qobj.QasmQobjInstruction`"
msgstr ""

#: ../../release_notes.rst:3780
msgid ":class:`qiskit.qobj.QobjExperimentHeader`"
msgstr ""

#: ../../release_notes.rst:3781 ../../release_notes.rst:3792
msgid ":class:`qiskit.qobj.QasmQobjExperimentConfig`"
msgstr ""

#: ../../release_notes.rst:3782 ../../release_notes.rst:3793
msgid ":class:`qiskit.qobj.QasmQobjExperiment`"
msgstr ""

#: ../../release_notes.rst:3783 ../../release_notes.rst:3794
msgid ":class:`qiskit.qobj.QasmQobjConfig`"
msgstr ""

#: ../../release_notes.rst:3784
msgid ":class:`qiskit.qobj.QobjHeader`"
msgstr ""

#: ../../release_notes.rst:3785
msgid ":class:`qiskit.qobj.PulseQobjInstruction`"
msgstr ""

#: ../../release_notes.rst:3786
msgid ":class:`qiskit.qobj.PulseQobjExperimentConfig`"
msgstr ""

#: ../../release_notes.rst:3787
msgid ":class:`qiskit.qobj.PulseQobjExperiment`"
msgstr ""

#: ../../release_notes.rst:3788
msgid ":class:`qiskit.qobj.PulseQobjConfig`"
msgstr ""

#: ../../release_notes.rst:3789
msgid ":class:`qiskit.qobj.QobjMeasurementOption`"
msgstr ""

#: ../../release_notes.rst:3790
msgid ":class:`qiskit.qobj.PulseLibraryItem`"
msgstr ""

#: ../../release_notes.rst:3795
msgid ":class:`qiskit.qobj.QasmQobj`"
msgstr ""

#: ../../release_notes.rst:3796
msgid ":class:`qiskit.qobj.PulseQobj`"
msgstr ""

#: ../../release_notes.rst:3798
msgid ""
"If you were relying on this validation or would like to validate them "
"against the qobj schema this can be done by setting the ``validate`` "
"kwarg to ``True`` on :meth:`~qiskit.qobj.QasmQobj.to_dict` method from "
"either of the top level Qobj classes :class:`~qiskit.qobj.QasmQobj` or "
":class:`~qiskit.qobj.PulseQobj`. For example:"
msgstr ""

#: ../../release_notes.rst:3824
msgid "which will validate the output dictionary against the Qobj jsonschema."
msgstr ""

#: ../../release_notes.rst:3826
msgid ""
"The output dictionary from :meth:`qiskit.qobj.QasmQobj.to_dict` and "
":meth:`qiskit.qobj.PulseQobj.to_dict` is no longer in a format for direct"
" json serialization as expected by IBMQ's API. These Qobj objects are the"
" current format we use for passing experiments to providers/backends and "
"while having a dictionary format that could just be passed to the IBMQ "
"API directly was moderately useful for ``qiskit-ibmq-provider``, it made "
"things more difficult for other providers. Especially for providers that "
"wrap local simulators. Moving forward the definitions of what is passed "
"between providers and the IBMQ API request format will be further "
"decoupled (in a backwards compatible manner) which should ease the burden"
" of writing providers and backends."
msgstr ""

#: ../../release_notes.rst:3838
msgid ""
"In practice, the only functional difference between the output of these "
"methods now and previous releases is that complex numbers are represented"
" with the ``complex`` type and numpy arrays are not silently converted to"
" list anymore. If you were previously calling ``json.dumps()`` directly "
"on the output of ``to_dict()`` after this release a custom json encoder "
"will be needed to handle these cases. For example::"
msgstr ""

#: ../../release_notes.rst:3881
msgid ""
"will generate a json string in the same exact manner that "
"``json.dumps(my_qasm.to_dict())`` did in previous releases."
msgstr ""

#: ../../release_notes.rst:3884
msgid ""
"``CmdDef`` has been deprecated since Terra 0.11.0 and has been removed. "
"Please continue to use :py:class:`~qiskit.pulse.InstructionScheduleMap` "
"instead."
msgstr ""

#: ../../release_notes.rst:3888
msgid ""
"The methods ``cmds`` and ``cmd_qubits`` in "
":py:class:`~qiskit.pulse.InstructionScheduleMap` have been deprecated "
"since Terra 0.11.0 and have been removed. Please use ``instructions`` and"
" ``qubits_with_instruction`` instead."
msgstr ""

#: ../../release_notes.rst:3893
msgid ""
"PulseDefaults have reported ``qubit_freq_est`` and ``meas_freq_est`` in "
"Hz rather than GHz since Terra release 0.11.0. A warning which notified "
"of this change has been removed."
msgstr ""

#: ../../release_notes.rst:3897
msgid ""
"The previously deprecated (in the 0.11.0 release) support for passsing in"
" :class:`qiskit.circuit.Instruction` parameters of types ``sympy.Basic``,"
" ``sympy.Expr``, ``qiskit.qasm.node.node.Node`` (QASM AST node) and "
"``sympy.Matrix`` has been removed. The supported types for instruction "
"parameters are:"
msgstr ""

#: ../../release_notes.rst:3903 ../../release_notes.rst:5736
msgid "``int``"
msgstr ""

#: ../../release_notes.rst:3904 ../../release_notes.rst:5737
msgid "``float``"
msgstr ""

#: ../../release_notes.rst:3905 ../../release_notes.rst:5738
msgid "``complex``"
msgstr ""

#: ../../release_notes.rst:3906 ../../release_notes.rst:5739
msgid "``str``"
msgstr ""

#: ../../release_notes.rst:3907
msgid "``list``"
msgstr ""

#: ../../release_notes.rst:3908 ../../release_notes.rst:5740
msgid "``np.ndarray``"
msgstr ""

#: ../../release_notes.rst:3909
msgid ":class:`qiskit.circuit.ParameterExpression`"
msgstr ""

#: ../../release_notes.rst:3911
msgid ""
"The following properties of "
":py:class:`~qiskit.providers.models.BackendConfiguration`:"
msgstr ""

#: ../../release_notes.rst:3914
msgid "``dt``"
msgstr ""

#: ../../release_notes.rst:3915
msgid "``dtm``"
msgstr ""

#: ../../release_notes.rst:3916
msgid "``rep_time``"
msgstr ""

#: ../../release_notes.rst:3918
msgid ""
"all have units of seconds. Prior to release 0.11.0, ``dt`` and ``dtm`` "
"had units of nanoseconds. Prior to release 0.12.0, ``rep_time`` had units"
" of microseconds. The warnings alerting users of these changes have now "
"been removed from ``BackendConfiguration``."
msgstr ""

#: ../../release_notes.rst:3923
msgid ""
"A new requirement has been added to the requirements list, `retworkx "
"<https://pypi.org/project/retworkx/>`_. It is an Apache 2.0 licensed "
"graph library that has a similar API to networkx and is being used to "
"significantly speed up the :class:`qiskit.dagcircuit.DAGCircuit` "
"operations as part of the transpiler. There are binaries published on "
"PyPI for all the platforms supported by Qiskit Terra but if you're using "
"a platform where there aren't precompiled binaries published refer to the"
" `retworkx documentation "
"<https://retworkx.readthedocs.io/en/stable/README.html#installing-"
"retworkx>`_ for instructions on pip installing from sdist."
msgstr ""

#: ../../release_notes.rst:3934
msgid ""
"If you encounter any issues with the transpiler or DAGCircuit class as "
"part of the transition you can switch back to the previous networkx "
"implementation by setting the environment variable ``USE_RETWORKX`` to "
"``N``. This option will be removed in the 0.14.0 release."
msgstr ""

#: ../../release_notes.rst:3945
msgid ""
"Passing in the data to the constructor for "
":class:`qiskit.dagcircuit.DAGNode` as a dictionary arg ``data_dict`` is "
"deprecated and will be removed in a future release. Instead you should "
"now pass the fields in as kwargs to the constructor. For example the "
"previous behavior of::"
msgstr ""

#: ../../release_notes.rst:3959
msgid "should now be::"
msgstr ""

#: ../../release_notes.rst:3965
msgid ""
"The naming of gate objects and methods have been updated to be more "
"consistent. The following changes have been made:"
msgstr ""

#: ../../release_notes.rst:3968
msgid ""
"The Pauli gates all have one uppercase letter only (``I``, ``X``, ``Y``, "
"``Z``)"
msgstr ""

#: ../../release_notes.rst:3970
msgid ""
"The parameterized Pauli gates (i.e. rotations) prepend the uppercase "
"letter ``R`` (``RX``, ``RY``, ``RZ``)"
msgstr ""

#: ../../release_notes.rst:3972
msgid ""
"A controlled version prepends the uppercase letter ``C`` (``CX``, "
"``CRX``, ``CCX``)"
msgstr ""

#: ../../release_notes.rst:3974
msgid ""
"Gates are named according to their action, not their alternative names "
"(``CCX``, not ``Toffoli``)"
msgstr ""

#: ../../release_notes.rst:3977
msgid ""
"The old names have been deprecated and will be removed in a future "
"release. This is a list of the changes showing the old and new class, "
"name attribute, and methods. If a new column is blank then there is no "
"change for that."
msgstr ""

#: ../../release_notes.rst:3981
msgid "Gate Name Changes"
msgstr ""

#: ../../release_notes.rst:3984
msgid "Old Class"
msgstr ""

#: ../../release_notes.rst:3985
msgid "New Class"
msgstr ""

#: ../../release_notes.rst:3986
msgid "Old Name Attribute"
msgstr ""

#: ../../release_notes.rst:3987
msgid "New Name Attribute"
msgstr ""

#: ../../release_notes.rst:3988
msgid "Old :class:`qiskit.circuit.QuantumCircuit` method"
msgstr ""

#: ../../release_notes.rst:3989
msgid "New :class:`qiskit.circuit.QuantumCircuit` method"
msgstr ""

#: ../../release_notes.rst:3990
msgid "``ToffoliGate``"
msgstr ""

#: ../../release_notes.rst:3991
msgid ":class:`~qiskit.extensions.CCXGate`"
msgstr ""

#: ../../release_notes.rst:3992
msgid "``ccx``"
msgstr ""

#: ../../release_notes.rst:3994
msgid ""
":meth:`~qiskit.circuit.QuantumCircuit.ccx` and "
":meth:`~qiskit.circuit.QuantumCircuit.toffoli`"
msgstr ""

#: ../../release_notes.rst:3997
msgid "``CrxGate``"
msgstr ""

#: ../../release_notes.rst:3998
msgid ":class:`~qiskit.extensions.CRXGate`"
msgstr ""

#: ../../release_notes.rst:3999
msgid "``crx``"
msgstr ""

#: ../../release_notes.rst:4001
msgid ":meth:`~qiskit.circuit.QuantumCircuit.crx`"
msgstr ""

#: ../../release_notes.rst:4003
msgid "``CryGate``"
msgstr ""

#: ../../release_notes.rst:4004
msgid ":class:`~qiskit.extensions.CRYGate`"
msgstr ""

#: ../../release_notes.rst:4005
msgid "``cry``"
msgstr ""

#: ../../release_notes.rst:4007
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cry`"
msgstr ""

#: ../../release_notes.rst:4009
msgid "``CrzGate``"
msgstr ""

#: ../../release_notes.rst:4010
msgid ":class:`~qiskit.extensions.CRZGate`"
msgstr ""

#: ../../release_notes.rst:4011
msgid "``crz``"
msgstr ""

#: ../../release_notes.rst:4013
msgid ":meth:`~qiskit.circuit.QuantumCircuit.crz`"
msgstr ""

#: ../../release_notes.rst:4015
msgid "``FredkinGate``"
msgstr ""

#: ../../release_notes.rst:4016
msgid ":class:`~qiskit.extensions.CSwapGate`"
msgstr ""

#: ../../release_notes.rst:4017
msgid "``cswap``"
msgstr ""

#: ../../release_notes.rst:4019
msgid ""
":meth:`~qiskit.circuit.QuantumCircuit.cswap` and "
":meth:`~qiskit.circuit.QuantumCircuit.fredkin`"
msgstr ""

#: ../../release_notes.rst:4022
msgid "``Cu1Gate``"
msgstr ""

#: ../../release_notes.rst:4023
msgid ":class:`~qiskit.extensions.CU1Gate`"
msgstr ""

#: ../../release_notes.rst:4024
msgid "``cu1``"
msgstr ""

#: ../../release_notes.rst:4026
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cu1`"
msgstr ""

#: ../../release_notes.rst:4028
msgid "``Cu3Gate``"
msgstr ""

#: ../../release_notes.rst:4029
msgid ":class:`~qiskit.extensions.CU3Gate`"
msgstr ""

#: ../../release_notes.rst:4030
msgid "``cu3``"
msgstr ""

#: ../../release_notes.rst:4032
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cu3`"
msgstr ""

#: ../../release_notes.rst:4034
msgid "``CnotGate``"
msgstr ""

#: ../../release_notes.rst:4035
msgid ":class:`~qiskit.extensions.CXGate`"
msgstr ""

#: ../../release_notes.rst:4036
msgid "``cx``"
msgstr ""

#: ../../release_notes.rst:4038
msgid ""
":meth:`~qiskit.circuit.QuantumCircuit.cx` and "
":meth:`~qiskit.circuit.QuantumCircuit.cnot`"
msgstr ""

#: ../../release_notes.rst:4041
msgid "``CyGate``"
msgstr ""

#: ../../release_notes.rst:4042
msgid ":class:`~qiskit.extensions.CYGate`"
msgstr ""

#: ../../release_notes.rst:4043
msgid "``cy``"
msgstr ""

#: ../../release_notes.rst:4045
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cy`"
msgstr ""

#: ../../release_notes.rst:4047
msgid "``CzGate``"
msgstr ""

#: ../../release_notes.rst:4048
msgid ":class:`~qiskit.extensions.CZGate`"
msgstr ""

#: ../../release_notes.rst:4049
msgid "``cz``"
msgstr ""

#: ../../release_notes.rst:4051
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cz`"
msgstr ""

#: ../../release_notes.rst:4053
msgid "``DiagGate``"
msgstr ""

#: ../../release_notes.rst:4054
msgid ":class:`~qiskit.extensions.DiagonalGate`"
msgstr ""

#: ../../release_notes.rst:4055
msgid "``diag``"
msgstr ""

#: ../../release_notes.rst:4056
msgid "``diagonal``"
msgstr ""

#: ../../release_notes.rst:4057
msgid "``diag_gate``"
msgstr ""

#: ../../release_notes.rst:4058
msgid ":meth:`~qiskit.circuit.QuantumCircuit.diagonal`"
msgstr ""

#: ../../release_notes.rst:4059
msgid "``IdGate``"
msgstr ""

#: ../../release_notes.rst:4060
msgid ":class:`~qiskit.extensions.IGate`"
msgstr ""

#: ../../release_notes.rst:4061
msgid "``id``"
msgstr ""

#: ../../release_notes.rst:4063
msgid "``iden``"
msgstr ""

#: ../../release_notes.rst:4064
msgid ""
":meth:`~qiskit.circuit.QuantumCircuit.i` and "
":meth:`~qiskit.circuit.QuantumCircuit.id`"
msgstr ""

#: ../../release_notes.rst:4066
msgid ":class:`~qiskit.extensions.Isometry`"
msgstr ""

#: ../../release_notes.rst:4068
msgid "``iso``"
msgstr ""

#: ../../release_notes.rst:4069
msgid "``isometry``"
msgstr ""

#: ../../release_notes.rst:4070
msgid ":meth:`~qiskit.circuit.QuantumCircuit.iso`"
msgstr ""

#: ../../release_notes.rst:4071
msgid ""
":meth:`~qiskit.circuit.QuantumCircuit.isometry` and "
":meth:`~qiskit.circuit.QuantumCircuit.iso`"
msgstr ""

#: ../../release_notes.rst:4073
msgid "``UCG``"
msgstr ""

#: ../../release_notes.rst:4074
msgid ":class:`~qiskit.extensions.UCGate`"
msgstr ""

#: ../../release_notes.rst:4075
msgid "``multiplexer``"
msgstr ""

#: ../../release_notes.rst:4077
msgid "``ucg``"
msgstr ""

#: ../../release_notes.rst:4078
msgid ":meth:`~qiskit.circuit.QuantumCircuit.uc`"
msgstr ""

#: ../../release_notes.rst:4079
msgid "``UCRot``"
msgstr ""

#: ../../release_notes.rst:4080
msgid ":class:`~qiskit.extensions.UCPauliRotGate`"
msgstr ""

#: ../../release_notes.rst:4085
msgid "``UCX``"
msgstr ""

#: ../../release_notes.rst:4086
msgid ":class:`~qiskit.extensions.UCRXGate`"
msgstr ""

#: ../../release_notes.rst:4087
msgid "``ucrotX``"
msgstr ""

#: ../../release_notes.rst:4088
msgid "``ucrx``"
msgstr ""

#: ../../release_notes.rst:4089
msgid "``ucx``"
msgstr ""

#: ../../release_notes.rst:4090
msgid ":meth:`~qiskit.circuit.QuantumCircuit.ucrx`"
msgstr ""

#: ../../release_notes.rst:4091
msgid "``UCY``"
msgstr ""

#: ../../release_notes.rst:4092
msgid ":class:`~qiskit.extensions.UCRYGate`"
msgstr ""

#: ../../release_notes.rst:4093
msgid "``ucroty``"
msgstr ""

#: ../../release_notes.rst:4094
msgid "``ucry``"
msgstr ""

#: ../../release_notes.rst:4095
msgid "``ucy``"
msgstr ""

#: ../../release_notes.rst:4096
msgid ":meth:`~qiskit.circuit.QuantumCircuit.ucry`"
msgstr ""

#: ../../release_notes.rst:4097
msgid "``UCZ``"
msgstr ""

#: ../../release_notes.rst:4098
msgid ":class:`~qiskit.extensions.UCRZGate`"
msgstr ""

#: ../../release_notes.rst:4099
msgid "``ucrotz``"
msgstr ""

#: ../../release_notes.rst:4100
msgid "``ucrz``"
msgstr ""

#: ../../release_notes.rst:4101
msgid "``ucz``"
msgstr ""

#: ../../release_notes.rst:4102
msgid ":meth:`~qiskit.circuit.QuantumCircuit.ucrz`"
msgstr ""

#: ../../release_notes.rst:4104
msgid ""
"The kwarg ``period`` for the function "
":func:`~qiskit.pulse.pulse_lib.square`, "
":func:`~qiskit.pulse.pulse_lib.sawtooth`, and "
":func:`~qiskit.pulse.pulse_lib.triangle` in :mod:`qiskit.pulse.pulse_lib`"
" is now deprecated and will be removed in a future release. Instead you "
"should now use the ``freq`` kwarg to set the frequency."
msgstr ""

#: ../../release_notes.rst:4112
msgid ""
"The ``DAGCircuit.compose_back()`` and ``DAGCircuit.extend_back()`` "
"methods are deprecated and will be removed in a future release. Instead "
"you should use the :meth:`qiskit.dagcircuit.DAGCircuit.compose` method, "
"which is a more general and more flexible method that provides the same "
"functionality."
msgstr ""

#: ../../release_notes.rst:4117
msgid ""
"The ``callback`` kwarg of the :class:`qiskit.transpiler.PassManager` "
"class's constructor has been deprecated and will be removed in a future "
"release. Instead of setting it at the object level during creation it "
"should now be set as a kwarg parameter on the "
":meth:`qiskit.transpiler.PassManager.run` method."
msgstr ""

#: ../../release_notes.rst:4123
msgid ""
"The ``n_qubits`` and ``numberofqubits`` keywords are deprecated "
"throughout Terra and replaced by ``num_qubits``. The old names will be "
"removed in a future release. The objects affected by this change are "
"listed below:"
msgstr ""

#: ../../release_notes.rst:4127
msgid "New Methods"
msgstr ""

#: ../../release_notes.rst:4130
msgid "Class"
msgstr ""

#: ../../release_notes.rst:4131
msgid "Old Method"
msgstr ""

#: ../../release_notes.rst:4132
msgid "New Method"
msgstr ""

#: ../../release_notes.rst:4133
msgid ":class:`~qiskit.circuit.QuantumCircuit`"
msgstr ""

#: ../../release_notes.rst:4134 ../../release_notes.rst:4147
msgid "``n_qubits``"
msgstr ""

#: ../../release_notes.rst:4135
msgid ":meth:`~qiskit.circuit.QuantumCircuit.num_qubits`"
msgstr ""

#: ../../release_notes.rst:4136
msgid ":class:`~qiskit.quantum_info.Pauli`"
msgstr ""

#: ../../release_notes.rst:4137
msgid "``numberofqubits``"
msgstr ""

#: ../../release_notes.rst:4138
msgid ":meth:`~qiskit.quantum_info.Pauli.num_qubits`"
msgstr ""

#: ../../release_notes.rst:4140
msgid "New arguments"
msgstr ""

#: ../../release_notes.rst:4143
msgid "Function"
msgstr ""

#: ../../release_notes.rst:4144
msgid "Old Argument"
msgstr ""

#: ../../release_notes.rst:4145
msgid "New Argument"
msgstr ""

#: ../../release_notes.rst:4146
msgid ":func:`~qiskit.circuit.random.random_circuit`"
msgstr ""

#: ../../release_notes.rst:4148 ../../release_notes.rst:4151
msgid "``num_qubits``"
msgstr ""

#: ../../release_notes.rst:4149
msgid ":class:`~qiskit.extensions.MSGate`"
msgstr ""

#: ../../release_notes.rst:4150
msgid "``n_qubit``"
msgstr ""

#: ../../release_notes.rst:4153
msgid ""
"The function ``qiskit.quantum_info.synthesis.euler_angles_1q`` is now "
"deprecated. It has been superseded by the "
":class:`qiskit.quantum_info.OneQubitEulerDecomposer` class which provides"
" the same functionality through::"
msgstr ""

#: ../../release_notes.rst:4160
msgid ""
"The ``pass_manager`` kwarg for the :func:`qiskit.compiler.transpile` has "
"been deprecated and will be removed in a future release. Moving forward "
"the preferred way to transpile a circuit with a custom "
":class:`~qiskit.transpiler.PassManager` object is to use the "
":meth:`~qiskit.transpiler.PassManager.run` method of the ``PassManager`` "
"object."
msgstr ""

#: ../../release_notes.rst:4167
msgid ""
"The :func:`qiskit.quantum_info.random_state` function has been deprecated"
" and will be removed in a future release. Instead you should use the "
":func:`qiskit.quantum_info.random_statevector` function."
msgstr ""

#: ../../release_notes.rst:4171
msgid ""
"The ``add``, ``subtract``, and ``multiply`` methods of the "
":class:`qiskit.quantum_info.Statevector` and "
":class:`qiskit.quantum_info.DensityMatrix` classes are deprecated and "
"will be removed in a future release. Instead you shoulde use ``+``, "
"``-``, ``*`` binary operators instead."
msgstr ""

#: ../../release_notes.rst:4177
msgid ""
"Deprecates :meth:`qiskit.quantum_info.Statevector.to_counts`, "
":meth:`qiskit.quantum_info.DensityMatrix.to_counts`, and "
":func:`qiskit.quantum_info.counts.state_to_counts`. These functions are "
"superseded by the class methods "
":meth:`qiskit.quantum_info.Statevector.probabilities_dict` and "
":meth:`qiskit.quantum_info.DensityMatrix.probabilities_dict`."
msgstr ""

#: ../../release_notes.rst:4184
msgid ""
":py:class:`~qiskit.pulse.pulse_lib.SamplePulse` and "
":py:class:`~qiskit.pulse.pulse_lib.ParametricPulse` s (e.g. ``Gaussian``)"
" now subclass from :py:class:`~qiskit.pulse.pulse_lib.Pulse` and have "
"been moved to the :mod:`qiskit.pulse.pulse_lib`. The previous path via "
"``pulse.commands`` is deprecated and will be removed in a future release."
msgstr ""

#: ../../release_notes.rst:4190
msgid ""
"``DelayInstruction`` has been deprecated and replaced by "
":py:class:`~qiskit.pulse.instruction.Delay`. This new instruction has "
"been taken over the previous ``Command`` ``Delay``. The migration pattern"
" is::"
msgstr ""

#: ../../release_notes.rst:4198
msgid ""
"Until the deprecation period is over, the previous ``Delay`` syntax of "
"calling a command on a channel will also be supported::"
msgstr ""

#: ../../release_notes.rst:4203
msgid "The new ``Delay`` instruction does not support a ``command`` attribute."
msgstr ""

#: ../../release_notes.rst:4205
msgid ""
"``FrameChange`` and ``FrameChangeInstruction`` have been deprecated and "
"replaced by :py:class:`~qiskit.pulse.instructions.ShiftPhase`. The "
"changes are::"
msgstr ""

#: ../../release_notes.rst:4213
msgid ""
"Until the deprecation period is over, the previous FrameChange syntax of "
"calling a command on a channel will be supported::"
msgstr ""

#: ../../release_notes.rst:4218
msgid ""
"The ``call`` method of :py:class:`~qiskit.pulse.pulse_lib.SamplePulse` "
"and :py:class:`~qiskit.pulse.pulse_lib.ParametricPulse` s have been "
"deprecated. The migration is as follows::"
msgstr ""

#: ../../release_notes.rst:4224
msgid ""
"``AcquireInstruction`` has been deprecated and replaced by "
":py:class:`~qiskit.pulse.instructions.Acquire`. The changes are::"
msgstr ""

#: ../../release_notes.rst:4231
msgid ""
"Until the deprecation period is over, the previous Acquire syntax of "
"calling the command on a channel will be supported::"
msgstr ""

#: ../../release_notes.rst:4242
msgid ""
"The :class:`~qiskit.transpiler.passes.BarrierBeforeFinalMeasurements` "
"transpiler pass, included in the preset transpiler levels when targeting "
"a physical device, previously inserted a barrier across only measured "
"qubits. In some cases, this allowed the transpiler to insert a swap after"
" a measure operation, rendering the circuit invalid for current devices. "
"The pass has been updated so that the inserted barrier will span all "
"qubits on the device. Fixes `#3937 <https://github.com/Qiskit/qiskit-"
"terra/issues/3937>`_"
msgstr ""

#: ../../release_notes.rst:4251
msgid ""
"When extending a :class:`~qiskit.circuit.QuantumCircuit` instance "
"(extendee) with another circuit (extension), the circuit is taken via "
"reference. If a circuit is extended with itself that leads to an infinite"
" loop as extendee and extension are the same. This bug has been resolved "
"by copying the extension if it is the same object as the extendee. Fixes "
"`#3811 <https://github.com/Qiskit/qiskit-terra/issues/3811>`_"
msgstr ""

#: ../../release_notes.rst:4258
msgid ""
"Fixes a case in :meth:`qiskit.result.Result.get_counts`, where the "
"results for an expirement could not be referenced if the experiment was "
"initialized as a Schedule without a name. Fixes `#2753 "
"<https://github.com/Qiskit/qiskit-terra/issues/2753>`_"
msgstr ""

#: ../../release_notes.rst:4263
msgid ""
"Previously, replacing :class:`~qiskit.circuit.Parameter` objects in a "
"circuit with new Parameter objects prior to decomposing a circuit would "
"result in the substituted values not correctly being substituted into the"
" decomposed gates. This has been resolved such that binding and "
"decomposition may occur in any order."
msgstr ""

#: ../../release_notes.rst:4269
msgid ""
"The matplotlib output backend for the "
":func:`qiskit.visualization.circuit_drawer` function and "
":meth:`qiskit.circuit.QuantumCircuit.draw` method drawer has been fixed "
"to render :class:`~qiskit.extensions.CU1Gate` gates correctly. Fixes "
"`#3684 <https://github.com/Qiskit/qiskit-terra/issues/3684>`_"
msgstr ""

#: ../../release_notes.rst:4275
msgid ""
"A bug in :meth:`qiskit.circuit.QuantumCircuit.from_qasm_str` and "
":meth:`qiskit.circuit.QuantumCircuit.from_qasm_file` when loading QASM "
"with custom gates defined has been fixed. Now, loading this QASM::"
msgstr ""

#: ../../release_notes.rst:4286
msgid "is equivalent to the following circuit::"
msgstr ""

#: ../../release_notes.rst:4299
msgid "Fixes `#1566 <https://github.com/Qiskit/qiskit-terra/issues/1566>`_"
msgstr ""

#: ../../release_notes.rst:4301
msgid ""
"Allow quantum circuit Instructions to have list parameter values. This is"
" used in Aer for expectation value snapshot parameters for example "
"``params = [[1.0, 'I'], [1.0, 'X']]]`` for :math:`\\langle I + "
"X\\rangle`."
msgstr ""

#: ../../release_notes.rst:4305
msgid ""
"Previously, for circuits containing composite gates (those created via "
":meth:`qiskit.circuit.QuantumCircuit.to_gate` or "
":meth:`qiskit.circuit.QuantumCircuit.to_instruction` or their "
"corresponding converters), attempting to bind the circuit more than once "
"would result in only the first bind value being applied to all circuits "
"when transpiled. This has been resolved so that the values provided for "
"subsequent binds are correctly respected."
msgstr ""

#: ../../release_notes.rst:4319
msgid "The qasm and pulse qobj classes:"
msgstr ""

#: ../../release_notes.rst:4321 ../../release_notes.rst:4333
msgid ":class:`~qiskit.qobj.QasmQobjInstruction`"
msgstr ""

#: ../../release_notes.rst:4322
msgid ":class:`~qiskit.qobj.QobjExperimentHeader`"
msgstr ""

#: ../../release_notes.rst:4323 ../../release_notes.rst:4334
msgid ":class:`~qiskit.qobj.QasmQobjExperimentConfig`"
msgstr ""

#: ../../release_notes.rst:4324 ../../release_notes.rst:4335
msgid ":class:`~qiskit.qobj.QasmQobjExperiment`"
msgstr ""

#: ../../release_notes.rst:4325 ../../release_notes.rst:4336
msgid ":class:`~qiskit.qobj.QasmQobjConfig`"
msgstr ""

#: ../../release_notes.rst:4326
msgid ":class:`~qiskit.qobj.QobjHeader`"
msgstr ""

#: ../../release_notes.rst:4327
msgid ":class:`~qiskit.qobj.PulseQobjInstruction`"
msgstr ""

#: ../../release_notes.rst:4328
msgid ":class:`~qiskit.qobj.PulseQobjExperimentConfig`"
msgstr ""

#: ../../release_notes.rst:4329
msgid ":class:`~qiskit.qobj.PulseQobjExperiment`"
msgstr ""

#: ../../release_notes.rst:4330
msgid ":class:`~qiskit.qobj.PulseQobjConfig`"
msgstr ""

#: ../../release_notes.rst:4331
msgid ":class:`~qiskit.qobj.QobjMeasurementOption`"
msgstr ""

#: ../../release_notes.rst:4332
msgid ":class:`~qiskit.qobj.PulseLibraryItem`"
msgstr ""

#: ../../release_notes.rst:4337
msgid ":class:`~qiskit.qobj.QasmQobj`"
msgstr ""

#: ../../release_notes.rst:4338
msgid ":class:`~qiskit.qobj.PulseQobj`"
msgstr ""

#: ../../release_notes.rst:4340
msgid ""
"from :mod:`qiskit.qobj` have all been reimplemented without using the "
"marsmallow library. These new implementations are designed to be drop-in "
"replacement (except for as noted in the upgrade release notes) but "
"specifics inherited from marshmallow may not work. Please file issues for"
" any incompatibilities found."
msgstr ""

#: ../../release_notes.rst:4347
msgid "Aer 0.5.0"
msgstr ""

#: ../../release_notes.rst:4350 ../../release_notes.rst:4363
#: ../../release_notes.rst:5149 ../../release_notes.rst:5206
#: ../../release_notes.rst:7089
msgid "Added"
msgstr ""

#: ../../release_notes.rst:4351
msgid "Add support for terra diagonal gate"
msgstr ""

#: ../../release_notes.rst:4352
msgid "Add support for parameterized qobj"
msgstr ""

#: ../../release_notes.rst:4355
msgid "Fixed"
msgstr ""

#: ../../release_notes.rst:4356
msgid "Added postfix for linux on Raspberry Pi"
msgstr ""

#: ../../release_notes.rst:4357
msgid "Handle numpy array inputs from qobj"
msgstr ""

#: ../../release_notes.rst:4365
msgid "API documentation"
msgstr ""

#: ../../release_notes.rst:4366
msgid "CNOT-Dihedral randomized benchmarking"
msgstr ""

#: ../../release_notes.rst:4367
msgid "Accreditation module for output accrediation of noisy devices"
msgstr ""

#: ../../release_notes.rst:4368
msgid "Pulse calibrations for single qubits"
msgstr ""

#: ../../release_notes.rst:4369
msgid "Pulse Discriminator"
msgstr ""

#: ../../release_notes.rst:4370
msgid "Entanglement verification circuits"
msgstr ""

#: ../../release_notes.rst:4371
msgid "Gateset tomography for single-qubit gate sets"
msgstr ""

#: ../../release_notes.rst:4372
msgid ""
"Adds randomized benchmarking utility functions ``calculate_1q_epg``, "
"``calculate_2q_epg`` functions to calculate 1 and 2-qubit error per gate "
"from error per Clifford"
msgstr ""

#: ../../release_notes.rst:4375
msgid ""
"Adds randomized benchmarking utility functions ``calculate_1q_epc``, "
"``calculate_2q_epc`` for calculating 1 and 2-qubit error per Clifford "
"from error per gate"
msgstr ""

#: ../../release_notes.rst:4380 ../../release_notes.rst:4444
#: ../../release_notes.rst:4493 ../../release_notes.rst:5169
#: ../../release_notes.rst:5239 ../../release_notes.rst:7141
msgid "Changed"
msgstr ""

#: ../../release_notes.rst:4381
msgid "Support integer labels for qubits in tomography"
msgstr ""

#: ../../release_notes.rst:4382
msgid "Support integer labels for measurement error mitigation"
msgstr ""

#: ../../release_notes.rst:4385 ../../release_notes.rst:5019
#: ../../release_notes.rst:5050 ../../release_notes.rst:5182
#: ../../release_notes.rst:5248 ../../release_notes.rst:7173
msgid "Deprecated"
msgstr ""

#: ../../release_notes.rst:4386
msgid ""
"Deprecates ``twoQ_clifford_error`` function. Use ``calculate_2q_epc`` "
"instead."
msgstr ""

#: ../../release_notes.rst:4387
msgid ""
"Python 3.5 support in qiskit-ignis is deprecated. Support will be removed"
" on the upstream python community's end of life date for the version, "
"which is 09/13/2020."
msgstr ""

#: ../../release_notes.rst:4392 ../../release_notes.rst:4421
msgid "Aqua 0.6.5"
msgstr ""

#: ../../release_notes.rst:4397 ../../release_notes.rst:4426
msgid "IBM Q Provider 0.6.0"
msgstr ""

#: ../../release_notes.rst:4403
msgid "Qiskit 0.17.0"
msgstr ""

#: ../../release_notes.rst:4406 ../../release_notes.rst:4460
#: ../../release_notes.rst:4506
msgid "Terra 0.12.0"
msgstr ""

#: ../../release_notes.rst:4411
msgid "Aer 0.4.1"
msgstr ""

#: ../../release_notes.rst:4416 ../../release_notes.rst:4470
msgid "Ignis 0.2.0"
msgstr ""

#: ../../release_notes.rst:4431
msgid ""
"There are three new exceptions: ``VisualizationError``, "
"``VisualizationValueError``, and ``VisualizationTypeError``. These are "
"now used in the visualization modules when an exception is raised."
msgstr ""

#: ../../release_notes.rst:4434
msgid ""
"You can now set the logging level and specify a log file using the "
"environment variables ``QSIKIT_IBMQ_PROVIDER_LOG_LEVEL`` and "
"``QISKIT_IBMQ_PROVIDER_LOG_FILE``, respectively. Note that the name of "
"the logger is ``qiskit.providers.ibmq``."
msgstr ""

#: ../../release_notes.rst:4437
msgid ""
":class:`qiskit.providers.ibmq.job.IBMQJob` now has a new method "
":meth:`~qiskit.providers.ibmq.job.IBMQJob.scheduling_mode` that returns "
"the scheduling mode the job is in."
msgstr ""

#: ../../release_notes.rst:4440
msgid ""
"IQX-related tutorials that used to be in ``qiskit-iqx-tutorials`` are now"
" in ``qiskit-ibmq-provider``."
msgstr ""

#: ../../release_notes.rst:4446
msgid ""
":meth:`qiskit.providers.ibmq.IBMQBackend.jobs` now accepts a new boolean "
"parameter ``descending``, which can be used to indicate whether the jobs "
"should be returned in descending or ascending order."
msgstr ""

#: ../../release_notes.rst:4449
msgid ""
":class:`qiskit.providers.ibmq.managed.IBMQJobManager` now looks at the "
"job limit and waits for old jobs to finish before submitting new ones if "
"the limit has been reached."
msgstr ""

#: ../../release_notes.rst:4451
msgid ""
":meth:`qiskit.providers.ibmq.IBMQBackend.status` now raises a "
":class:`qiskit.providers.ibmq.IBMQBackendApiProtocolError` exception if "
"there was an issue with validating the status."
msgstr ""

#: ../../release_notes.rst:4457
msgid "Qiskit 0.16.0"
msgstr ""

#: ../../release_notes.rst:4465 ../../release_notes.rst:5146
msgid "Aer 0.4.0"
msgstr ""

#: ../../release_notes.rst:4475
msgid "Aqua 0.6.4"
msgstr ""

#: ../../release_notes.rst:4480
msgid "IBM Q Provider 0.5.0"
msgstr ""

#: ../../release_notes.rst:4485
#, python-format
msgid ""
"Some of the visualization and Jupyter tools, including gate/error map and"
" backend information, have been moved from ``qiskit-terra`` to ``qiskit-"
"ibmq-provider``. They are now under the "
":mod:`qiskit.providers.ibmq.jupyter` and "
":mod:`qiskit.providers.ibmq.visualization`. In addition, you can now use "
"``%iqx_dashboard`` to get a dashboard that provides both job and backend "
"information."
msgstr ""

#: ../../release_notes.rst:4495
msgid ""
"JSON schema validation is no longer run by default on Qobj objects passed"
" to :meth:`qiskit.providers.ibmq.IBMQBackend.run`. This significantly "
"speeds up the execution of the `run()` method. Qobj objects are still "
"validated on the server side, and invalid Qobjs will continue to raise "
"exceptions. To force local validation, set ``validate_qobj=True`` when "
"you invoke ``run()``."
msgstr ""

#: ../../release_notes.rst:4503
msgid "Qiskit 0.15.0"
msgstr ""

#: ../../release_notes.rst:4511
msgid ""
"The 0.12.0 release includes several new features and bug fixes. The "
"biggest change for this release is the addition of support for parametric"
" pulses to OpenPulse. These are Pulse commands which take parameters "
"rather than sample points to describe a pulse. 0.12.0 is also the first "
"release to include support for Python 3.8. It also marks the beginning of"
" the deprecation for Python 3.5 support, which will be removed when the "
"upstream community stops supporting it."
msgstr ""

#: ../../release_notes.rst:4525
msgid ""
"The pass :class:`qiskit.transpiler.passes.CSPLayout` was extended with "
"two new parameters: ``call_limit`` and ``time_limit``. These options "
"allow limiting how long the pass will run. The option ``call_limit`` "
"limits the number of times that the recursive function in the "
"backtracking solver may be called. Similarly, ``time_limit`` limits how "
"long (in seconds) the solver will be allowed to run. The defaults are "
"``1000`` calls and ``10`` seconds respectively."
msgstr ""

#: ../../release_notes.rst:4533
msgid ""
":class:`qiskit.pulse.Acquire` can now be applied to a single qubit. This "
"makes pulse programming more consistent and easier to reason about, as "
"now all operations apply to a single channel. For example::"
msgstr ""

#: ../../release_notes.rst:4543
msgid ""
"A new method :meth:`qiskit.transpiler.CouplingMap.draw` was added to "
":class:`qiskit.transpiler.CouplingMap` to generate a graphviz image from "
"the coupling map graph. For example:"
msgstr ""

#: ../../release_notes.rst:4555
msgid ""
"Parametric pulses have been added to OpenPulse. These are pulse commands "
"which are parameterized and understood by the backend. Arbitrary pulse "
"shapes are still supported by the SamplePulse Command. The new supported "
"pulse classes are:"
msgstr ""

#: ../../release_notes.rst:4560
msgid ":class:`qiskit.pulse.ConstantPulse`"
msgstr ""

#: ../../release_notes.rst:4561
msgid ":class:`qiskit.pulse.Drag`"
msgstr ""

#: ../../release_notes.rst:4562
msgid ":class:`qiskit.pulse.Gaussian`"
msgstr ""

#: ../../release_notes.rst:4563
msgid ":class:`qiskit.pulse.GaussianSquare`"
msgstr ""

#: ../../release_notes.rst:4565
msgid "They can be used like any other Pulse command. An example::"
msgstr ""

#: ../../release_notes.rst:4577
msgid ""
"The resulting schedule will be similar to a SamplePulse schedule built "
"using :mod:`qiskit.pulse.pulse_lib`, however, waveform sampling will be "
"performed by the backend. The method :meth:`qiskit.pulse.Schedule.draw` "
"can still be used as usual. However, the command will be converted to a "
"``SamplePulse`` with the "
":meth:`qiskit.pulse.ParametricPulse.get_sample_pulse` method, so the "
"pulse shown may not sample the continuous function the same way that the "
"backend will."
msgstr ""

#: ../../release_notes.rst:4586
msgid ""
"This feature can be used to construct Pulse programs for any backend, but"
" the pulses will be converted to ``SamplePulse`` objects if the backend "
"does not support parametric pulses. Backends which support them will have"
" the following new attribute::"
msgstr ""

#: ../../release_notes.rst:4594
msgid ""
"Note that the backend does not need to support all of the parametric "
"pulses defined in Qiskit."
msgstr ""

#: ../../release_notes.rst:4597
msgid ""
"When the backend supports parametric pulses, and the Pulse schedule is "
"built with them, the assembled Qobj is significantly smaller. The size of"
" a PulseQobj built entirely with parametric pulses is dependent only on "
"the number of instructions, whereas the size of a PulseQobj built "
"otherwise will grow with the duration of the instructions (since every "
"sample must be specified with a value)."
msgstr ""

#: ../../release_notes.rst:4604
msgid ""
"Added utility functions, :func:`qiskit.scheduler.measure` and "
":func:`qiskit.scheduler.measure_all` to `qiskit.scheduler` module. These "
"functions return a :class:`qiskit.pulse.Schedule` object which measures "
"qubits using OpenPulse. For example::"
msgstr ""

#: ../../release_notes.rst:4618
msgid ""
"Pulse :class:`qiskit.pulse.Schedule` objects now have better "
"representations that for simple schedules should be valid Python "
"expressions."
msgstr ""

#: ../../release_notes.rst:4622
msgid ""
"The :class:`qiskit.circuit.QuantumCircuit` methods "
":meth:`qiskit.circuit.QuantumCircuit.measure_active`, "
":meth:`qiskit.circuit.QuantumCircuit.measure_all`, and "
":meth:`qiskit.circuit.QuantumCircuit.remove_final_measurements` now have "
"an addition kwarg ``inplace``. When ``inplace`` is set to ``False`` the "
"function will return a modified **copy** of the circuit. This is "
"different from the default behavior which will modify the circuit object "
"in-place and return nothing."
msgstr ""

#: ../../release_notes.rst:4631
msgid ""
"Several new constructor methods were added to the "
":class:`qiskit.transpiler.CouplingMap` class for building objects with "
"basic qubit coupling graphs. The new constructor methods are:"
msgstr ""

#: ../../release_notes.rst:4635
msgid ":meth:`qiskit.transpiler.CouplingMap.from_full`"
msgstr ""

#: ../../release_notes.rst:4636
msgid ":meth:`qiskit.transpiler.CouplingMap.from_line`"
msgstr ""

#: ../../release_notes.rst:4637
msgid ":meth:`qiskit.transpiler.CouplingMap.from_ring`"
msgstr ""

#: ../../release_notes.rst:4638
msgid ":meth:`qiskit.transpiler.CouplingMap.from_grid`"
msgstr ""

#: ../../release_notes.rst:4640
msgid ""
"For example, to use the new constructors to get a coupling map of 5 "
"qubits connected in a linear chain you can now run:"
msgstr ""

#: ../../release_notes.rst:4650
msgid ""
"Introduced a new pass "
":class:`qiskit.transpiler.passes.CrosstalkAdaptiveSchedule`. This pass "
"aims to reduce the impact of crosstalk noise on a program. It uses "
"crosstalk characterization data from the backend to schedule gates. When "
"a pair of gates has high crosstalk, they get serialized using a barrier. "
"Naive serialization is harmful because it incurs decoherence errors. "
"Hence, this pass uses a SMT optimization approach to compute a schedule "
"which minimizes the impact of crosstalk as well as decoherence errors."
msgstr ""

#: ../../release_notes.rst:4660
msgid ""
"The pass takes as input a circuit which is already transpiled onto the "
"backend i.e., the circuit is expressed in terms of physical qubits and "
"swap gates have been inserted and decomposed into CNOTs if required. "
"Using this circuit and crosstalk characterization data, a `Z3 "
"optimization <https://github.com/Z3Prover/z3>`_ is used to construct a "
"new scheduled circuit as output."
msgstr ""

#: ../../release_notes.rst:4667
msgid "To use the pass on a circuit circ::"
msgstr ""

#: ../../release_notes.rst:4674
msgid ""
"``backend_prop`` is a :class:`qiskit.providers.models.BackendProperties` "
"object for the target backend. ``crosstalk_prop`` is a dict which "
"specifies conditional error rates. For two gates ``g1`` and ``g2``, "
"``crosstalk_prop[g1][g2]`` specifies the conditional error rate of ``g1``"
" when ``g1`` and ``g2`` are executed simultaneously. A method for "
"generating ``crosstalk_prop`` will be added in a future release of "
"qiskit-ignis. Until then you'll either have to already know the crosstalk"
" properties of your device, or manually write your own device "
"characterization experiments."
msgstr ""

#: ../../release_notes.rst:4683
msgid ""
"In the preset pass manager for optimization level 1, "
":func:`qiskit.transpiler.preset_passmanagers.level_1_pass_manager` if "
":class:`qiskit.transpiler.passes.TrivialLayout` layout pass is not a "
"perfect match for a particular circuit, then "
":class:`qiskit.transpiler.passes.DenseLayout` layout pass is used "
"instead."
msgstr ""

#: ../../release_notes.rst:4690
msgid ""
"Added a new abstract method :meth:`qiskit.quantum_info.Operator.dot` to "
"the abstract ``BaseOperator`` class, so it is included for all "
"implementations of that abstract class, including "
":class:`qiskit.quantum_info.Operator` and ``QuantumChannel`` (e.g., "
":class:`qiskit.quantum_info.Choi`) objects. This method returns the right"
" operator multiplication ``a.dot(b)`` :math:`= a \\cdot b`. This is "
"equivalent to calling the operator "
":meth:`qiskit.quantum_info.Operator.compose` method with the kwarg "
"``front`` set to ``True``."
msgstr ""

#: ../../release_notes.rst:4702
msgid ""
"Added :func:`qiskit.quantum_info.average_gate_fidelity` and "
":func:`qiskit.quantum_info.gate_error` functions to the "
":mod:`qiskit.quantum_info` module for working with "
":class:`qiskit.quantum_info.Operator` and ``QuantumChannel`` (e.g., "
":class:`qiskit.quantum_info.Choi`) objects."
msgstr ""

#: ../../release_notes.rst:4708
msgid ""
"Added the :func:`qiskit.quantum_info.partial_trace` function to the "
":mod:`qiskit.quantum_info` that works with "
":class:`qiskit.quantum_info.Statevector` and "
":class:`qiskit.quantum_info.DensityMatrix` quantum state classes. For "
"example::"
msgstr ""

#: ../../release_notes.rst:4723
msgid ""
"When :meth:`qiskit.circuit.QuantumCircuit.draw` or "
":func:`qiskit.visualization.circuit_drawer` is called with the "
"``with_layout`` kwarg set True (the default) the output visualization "
"will now display the physical qubits as integers to clearly distinguish "
"them from the virtual qubits."
msgstr ""

#: ../../release_notes.rst:4729
msgid "For Example:"
msgstr ""

#: ../../release_notes.rst:4744
msgid ""
"Added new state measure functions to the :mod:`qiskit.quantum_info` "
"module: :func:`qiskit.quantum_info.entropy`, "
":func:`qiskit.quantum_info.mutual_information`, "
":func:`qiskit.quantum_info.concurrence`, and "
":func:`qiskit.quantum_info.entanglement_of_formation`. These functions "
"work with the :class:`qiskit.quantum_info.Statevector` and "
":class:`qiskit.quantum_info.DensityMatrix` classes."
msgstr ""

#: ../../release_notes.rst:4752
msgid ""
"The decomposition methods for single-qubit gates in "
":class:`qiskit.quantum_info.synthesis.one_qubit_decompose.OneQubitEulerDecomposer`"
" have been expanded to now also include the ``'ZXZ'`` basis, "
"characterized by three rotations about the  Z,X,Z axis. This now means "
"that a general 2x2 Operator can be decomposed into following bases: "
"``U3``, ``U1X``, ``ZYZ``, ``ZXZ``, ``XYX``, ``ZXZ``."
msgstr ""

#: ../../release_notes.rst:4763 ../../release_notes.rst:5619
msgid "Known Issues"
msgstr ""

#: ../../release_notes.rst:4765
msgid ""
"Running functions that use :func:`qiskit.tools.parallel_map` (for example"
" :func:`qiskit.execute.execute`, :func:`qiskit.compiler.transpile`, and "
":meth:`qiskit.transpiler.PassManager.run`) may not work when called from "
"a script running outside of a ``if __name__ == '__main__':`` block when "
"using Python 3.8 on MacOS. Other environments are unaffected by this "
"issue. This is due to changes in how parallel processes are launched by "
"Python 3.8 on MacOS. If ``RuntimeError`` or ``AttributeError`` are raised"
" by scripts that are directly calling ``parallel_map()`` or when calling "
"a function that uses it internally with Python 3.8 on MacOS embedding the"
" script calls inside ``if __name__ == '__main__':`` should workaround the"
" issue. For example::"
msgstr ""

#: ../../release_notes.rst:4790
msgid "should be changed to::"
msgstr ""

#: ../../release_notes.rst:4809
msgid "if errors are encountered with Python 3.8 on MacOS."
msgstr ""

#: ../../release_notes.rst:4817
msgid ""
"The value of the ``rep_time`` parameter for Pulse backend's configuration"
" object is now in units of seconds, not microseconds. The first time a "
"``PulseBackendConfiguration`` object is initialized it will raise a "
"single warning to the user to indicate this."
msgstr ""

#: ../../release_notes.rst:4822
msgid ""
"The ``rep_time`` argument for :func:`qiskit.compiler.assemble` now takes "
"in a value in units of seconds, not microseconds. This was done to make "
"the units with everything else in pulse. If you were passing in a value "
"for ``rep_time`` ensure that you update the value to account for this "
"change."
msgstr ""

#: ../../release_notes.rst:4827
msgid ""
"The value of the ``base_gate`` property of "
":class:`qiskit.circuit.ControlledGate` objects has been changed from the "
"class of the base gate to an instance of the class of the base gate."
msgstr ""

#: ../../release_notes.rst:4831
msgid ""
"The ``base_gate_name`` property of :class:`qiskit.circuit.ControlledGate`"
" has been removed; you can get the name of the base gate by accessing "
"``base_gate.name`` on the object. For example::"
msgstr ""

#: ../../release_notes.rst:4842
msgid ""
"Changed :class:`qiskit.quantum_info.Operator` magic methods so that "
"``__mul__`` (which gets executed by python's multiplication operation, if"
" the left hand side of the operation has it defined) implements right "
"matrix multiplication (i.e. :meth:`qiskit.quantum_info.Operator.dot`), "
"and ``__rmul__`` (which gets executed by python's multiplication "
"operation from the right hand side of the operation if the left does not "
"have ``__mul__`` defined) implements scalar multiplication (i.e. "
":meth:`qiskit.quantum_info.Operator.multiply`). Previously both methods "
"implemented scalar multiplciation."
msgstr ""

#: ../../release_notes.rst:4852
msgid ""
"The second argument of the :func:`qiskit.quantum_info.process_fidelity` "
"function, ``target``, is now optional. If a target unitary is not "
"specified, then process fidelity of the input channel with the identity "
"operator will be returned."
msgstr ""

#: ../../release_notes.rst:4857
msgid ""
":func:`qiskit.compiler.assemble` will now respect the configured "
"``max_shots`` value for a backend. If a value for the ``shots`` kwarg is "
"specified that exceed the max shots set in the backend configuration the "
"function will now raise a ``QiskitError`` exception. Additionally, if no "
"shots argument is provided the default value is either 1024 (the previous"
" behavior) or ``max_shots`` from the backend, whichever is lower."
msgstr ""

#: ../../release_notes.rst:4870
msgid ""
"Methods for adding gates to a :class:`qiskit.circuit.QuantumCircuit` with"
" abbreviated keyword arguments (e.g. ``ctl``, ``tgt``) have had their "
"keyword arguments renamed to be more descriptive (e.g. ``control_qubit``,"
" ``target_qubit``). The old names have been deprecated. A table including"
" the old and new calling signatures for the ``QuantumCircuit`` methods is"
" included below."
msgstr ""

#: ../../release_notes.rst:4876
msgid "New signatures for ``QuantumCircuit`` gate methods"
msgstr ""

#: ../../release_notes.rst:4879
msgid "Instruction Type"
msgstr ""

#: ../../release_notes.rst:4880
msgid "Former Signature"
msgstr ""

#: ../../release_notes.rst:4881
msgid "New Signature"
msgstr ""

#: ../../release_notes.rst:4882
msgid ":class:`qiskit.extensions.HGate`"
msgstr ""

#: ../../release_notes.rst:4883
msgid "``qc.h(q)``"
msgstr ""

#: ../../release_notes.rst:4884
msgid "``qc.h(qubit)``"
msgstr ""

#: ../../release_notes.rst:4885
msgid ":class:`qiskit.extensions.CHGate`"
msgstr ""

#: ../../release_notes.rst:4886
msgid "``qc.ch(ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:4887
msgid "``qc.ch((control_qubit, target_qubit))``"
msgstr ""

#: ../../release_notes.rst:4888
msgid ":class:`qiskit.extensions.IdGate`"
msgstr ""

#: ../../release_notes.rst:4889 ../../release_notes.rst:4892
msgid "``qc.iden(q)``"
msgstr ""

#: ../../release_notes.rst:4890 ../../release_notes.rst:4893
msgid "``qc.iden(qubit)``"
msgstr ""

#: ../../release_notes.rst:4891 ../../release_notes.rst:4894
msgid ":class:`qiskit.extensions.RGate`"
msgstr ""

#: ../../release_notes.rst:4895
msgid "``qc.r(theta, phi, q)``"
msgstr ""

#: ../../release_notes.rst:4896
msgid "``qc.r(theta, phi, qubit)``"
msgstr ""

#: ../../release_notes.rst:4897
msgid ":class:`qiskit.extensions.RXGate`"
msgstr ""

#: ../../release_notes.rst:4898
msgid "``qc.rx(theta, q)``"
msgstr ""

#: ../../release_notes.rst:4899
msgid "``qc.rx(theta, qubit)``"
msgstr ""

#: ../../release_notes.rst:4900
msgid ":class:`qiskit.extensions.CrxGate`"
msgstr ""

#: ../../release_notes.rst:4901
msgid "``qc.crx(theta, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:4902
msgid "``qc.crx(theta, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:4903
msgid ":class:`qiskit.extensions.RYGate`"
msgstr ""

#: ../../release_notes.rst:4904
msgid "``qc.ry(theta, q)``"
msgstr ""

#: ../../release_notes.rst:4905
msgid "``qc.ry(theta, qubit)``"
msgstr ""

#: ../../release_notes.rst:4906
msgid ":class:`qiskit.extensions.CryGate`"
msgstr ""

#: ../../release_notes.rst:4907
msgid "``qc.cry(theta, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:4908
msgid "``qc.cry(theta, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:4909
msgid ":class:`qiskit.extensions.RZGate`"
msgstr ""

#: ../../release_notes.rst:4910
msgid "``qc.rz(phi, q)``"
msgstr ""

#: ../../release_notes.rst:4911
msgid "``qc.rz(phi, qubit)``"
msgstr ""

#: ../../release_notes.rst:4912
msgid ":class:`qiskit.extensions.CrzGate`"
msgstr ""

#: ../../release_notes.rst:4913
msgid "``qc.crz(theta, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:4914
msgid "``qc.crz(theta, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:4915
msgid ":class:`qiskit.extensions.SGate`"
msgstr ""

#: ../../release_notes.rst:4916
msgid "``qc.s(q)``"
msgstr ""

#: ../../release_notes.rst:4917
msgid "``qc.s(qubit)``"
msgstr ""

#: ../../release_notes.rst:4918
msgid ":class:`qiskit.extensions.SdgGate`"
msgstr ""

#: ../../release_notes.rst:4919
msgid "``qc.sdg(q)``"
msgstr ""

#: ../../release_notes.rst:4920
msgid "``qc.sdg(qubit)``"
msgstr ""

#: ../../release_notes.rst:4921
msgid ":class:`qiskit.extensions.FredkinGate`"
msgstr ""

#: ../../release_notes.rst:4922
msgid "``qc.cswap(ctl, tgt1, tgt2)``"
msgstr ""

#: ../../release_notes.rst:4923
msgid "``qc.cswap(control_qubit, target_qubit1, target_qubit2)``"
msgstr ""

#: ../../release_notes.rst:4924
msgid ":class:`qiskit.extensions.TGate`"
msgstr ""

#: ../../release_notes.rst:4925
msgid "``qc.t(q)``"
msgstr ""

#: ../../release_notes.rst:4926
msgid "``qc.t(qubit)``"
msgstr ""

#: ../../release_notes.rst:4927
msgid ":class:`qiskit.extensions.TdgGate`"
msgstr ""

#: ../../release_notes.rst:4928
msgid "``qc.tdg(q)``"
msgstr ""

#: ../../release_notes.rst:4929
msgid "``qc.tdg(qubit)``"
msgstr ""

#: ../../release_notes.rst:4930
msgid ":class:`qiskit.extensions.U1Gate`"
msgstr ""

#: ../../release_notes.rst:4931
msgid "``qc.u1(theta, q)``"
msgstr ""

#: ../../release_notes.rst:4932
msgid "``qc.u1(theta, qubit)``"
msgstr ""

#: ../../release_notes.rst:4933
msgid ":class:`qiskit.extensions.Cu1Gate`"
msgstr ""

#: ../../release_notes.rst:4934
msgid "``qc.cu1(theta, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:4935
msgid "``qc.cu1(theta, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:4936
msgid ":class:`qiskit.extensions.U2Gate`"
msgstr ""

#: ../../release_notes.rst:4937
msgid "``qc.u2(phi, lam, q)``"
msgstr ""

#: ../../release_notes.rst:4938
msgid "``qc.u2(phi, lam, qubit)``"
msgstr ""

#: ../../release_notes.rst:4939
msgid ":class:`qiskit.extensions.U3Gate`"
msgstr ""

#: ../../release_notes.rst:4940
msgid "``qc.u3(theta, phi, lam, q)``"
msgstr ""

#: ../../release_notes.rst:4941
msgid "``qc.u3(theta, phi, lam, qubit)``"
msgstr ""

#: ../../release_notes.rst:4942
msgid ":class:`qiskit.extensions.Cu3Gate`"
msgstr ""

#: ../../release_notes.rst:4943
msgid "``qc.cu3(theta, phi, lam, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:4944
msgid "``qc.cu3(theta, phi, lam, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:4945
msgid ":class:`qiskit.extensions.XGate`"
msgstr ""

#: ../../release_notes.rst:4946
msgid "``qc.x(q)``"
msgstr ""

#: ../../release_notes.rst:4947
msgid "``qc.x(qubit)``"
msgstr ""

#: ../../release_notes.rst:4948
msgid ":class:`qiskit.extensions.CnotGate`"
msgstr ""

#: ../../release_notes.rst:4949
msgid "``qc.cx(ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:4950
msgid "``qc.cx(control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:4951
msgid ":class:`qiskit.extensions.ToffoliGate`"
msgstr ""

#: ../../release_notes.rst:4952
msgid "``qc.ccx(ctl1, ctl2, tgt)``"
msgstr ""

#: ../../release_notes.rst:4953
msgid "``qc.ccx(control_qubit1, control_qubit2, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:4954
msgid ":class:`qiskit.extensions.YGate`"
msgstr ""

#: ../../release_notes.rst:4955
msgid "``qc.y(q)``"
msgstr ""

#: ../../release_notes.rst:4956
msgid "``qc.y(qubit)``"
msgstr ""

#: ../../release_notes.rst:4957
msgid ":class:`qiskit.extensions.CyGate`"
msgstr ""

#: ../../release_notes.rst:4958
msgid "``qc.cy(ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:4959
msgid "``qc.cy(control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:4960
msgid ":class:`qiskit.extensions.ZGate`"
msgstr ""

#: ../../release_notes.rst:4961
msgid "``qc.z(q)``"
msgstr ""

#: ../../release_notes.rst:4962
msgid "``qc.z(qubit)``"
msgstr ""

#: ../../release_notes.rst:4963
msgid ":class:`qiskit.extensions.CzGate`"
msgstr ""

#: ../../release_notes.rst:4964
msgid "``qc.cz(ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:4965
msgid "``qc.cz(control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:4967
msgid ""
"Running :class:`qiskit.pulse.Acquire` on multiple qubits has been "
"deprecated and will be removed in a future release. Additionally, the "
":class:`qiskit.pulse.AcquireInstruction` parameters ``mem_slots`` and "
"``reg_slots`` have been deprecated. Instead ``reg_slot`` and ``mem_slot``"
" should be used instead."
msgstr ""

#: ../../release_notes.rst:4973
msgid ""
"The attribute of the :class:`qiskit.providers.models.PulseDefaults` class"
" ``circuit_instruction_map`` has been deprecated and will be removed in a"
" future release. Instead you should use the new attribute "
"``instruction_schedule_map``. This was done to match the type of the "
"value of the attribute, which is an ``InstructionScheduleMap``."
msgstr ""

#: ../../release_notes.rst:4979
msgid ""
"The :class:`qiskit.pulse.PersistentValue` command is deprecated and will "
"be removed in a future release. Similar functionality can be achieved "
"with the :class:`qiskit.pulse.ConstantPulse` command (one of the new "
"parametric pulses). Compare the following::"
msgstr ""

#: ../../release_notes.rst:4996
msgid ""
"Python 3.5 support in qiskit-terra is deprecated. Support will be removed"
" in the first release after the upstream Python community's end of life "
"date for the version, which is 09/13/2020."
msgstr ""

#: ../../release_notes.rst:5000
msgid ""
"The ``require_cptp`` kwarg of the "
":func:`qiskit.quantum_info.process_fidelity` function has been deprecated"
" and will be removed in a future release. It is superseded by two "
"separate kwargs ``require_cp`` and ``require_tp``."
msgstr ""

#: ../../release_notes.rst:5005
msgid ""
"Setting the ``scale`` parameter for "
":meth:`qiskit.circuit.QuantumCircuit.draw` and "
":func:`qiskit.visualization.circuit_drawer` as the first positional "
"argument is deprecated and will be removed in a future release. Instead "
"you should use ``scale`` as keyword argument."
msgstr ""

#: ../../release_notes.rst:5011
msgid ""
"The :mod:`qiskit.tools.qi.qi` module is deprecated and will be removed in"
" a future release. The legacy functions in the module have all been "
"superseded by functions and classes in the :mod:`qiskit.quantum_info` "
"module. A table of the deprecated functions and their replacement are "
"below:"
msgstr ""

#: ../../release_notes.rst:5016
msgid "``qiskit.tools.qi.qi`` replacements"
msgstr ""

#: ../../release_notes.rst:5020 ../../release_notes.rst:5051
msgid "Replacement"
msgstr ""

#: ../../release_notes.rst:5021
msgid ":func:`qiskit.tools.partial_trace`"
msgstr ""

#: ../../release_notes.rst:5022
msgid ":func:`qiskit.quantum_info.partial_trace`"
msgstr ""

#: ../../release_notes.rst:5023
msgid ":func:`qiskit.tools.choi_to_pauli`"
msgstr ""

#: ../../release_notes.rst:5024
msgid ":class:`qiskit.quantum_info.Choi` and :class:`quantum_info.PTM`"
msgstr ""

#: ../../release_notes.rst:5025
msgid ":func:`qiskit.tools.chop`"
msgstr ""

#: ../../release_notes.rst:5026
msgid "``numpy.round``"
msgstr ""

#: ../../release_notes.rst:5027
msgid "``qiskit.tools.qi.qi.outer``"
msgstr ""

#: ../../release_notes.rst:5028
msgid "``numpy.outer``"
msgstr ""

#: ../../release_notes.rst:5029
msgid ":func:`qiskit.tools.concurrence`"
msgstr ""

#: ../../release_notes.rst:5030
msgid ":func:`qiskit.quantum_info.concurrence`"
msgstr ""

#: ../../release_notes.rst:5031
msgid ":func:`qiskit.tools.shannon_entropy`"
msgstr ""

#: ../../release_notes.rst:5032
msgid ":func:`qiskit.quantum_info.shannon_entropy`"
msgstr ""

#: ../../release_notes.rst:5033
msgid ":func:`qiskit.tools.entropy`"
msgstr ""

#: ../../release_notes.rst:5034
msgid ":func:`qiskit.quantum_info.entropy`"
msgstr ""

#: ../../release_notes.rst:5035
msgid ":func:`qiskit.tools.mutual_information`"
msgstr ""

#: ../../release_notes.rst:5036
msgid ":func:`qiskit.quantum_info.mutual_information`"
msgstr ""

#: ../../release_notes.rst:5037
msgid ":func:`qiskit.tools.entanglement_of_formation`"
msgstr ""

#: ../../release_notes.rst:5038
msgid ":func:`qiskit.quantum_info.entanglement_of_formation`"
msgstr ""

#: ../../release_notes.rst:5039
msgid ":func:`qiskit.tools.is_pos_def`"
msgstr ""

#: ../../release_notes.rst:5040
msgid "``quantum_info.operators.predicates.is_positive_semidefinite_matrix``"
msgstr ""

#: ../../release_notes.rst:5042
msgid ""
"The :mod:`qiskit.quantum_info.states.states` module is deprecated and "
"will be removed in a future release. The legacy functions in the module "
"have all been superseded by functions and classes in the "
":mod:`qiskit.quantum_info` module."
msgstr ""

#: ../../release_notes.rst:5047
msgid "``qiskit.quantum_info.states.states`` replacements"
msgstr ""

#: ../../release_notes.rst:5052
msgid "``qiskit.quantum_info.states.states.basis_state``"
msgstr ""

#: ../../release_notes.rst:5053
msgid ":meth:`qiskit.quantum_info.Statevector.from_label`"
msgstr ""

#: ../../release_notes.rst:5054
msgid "``qiskit.quantum_info.states.states.projector``"
msgstr ""

#: ../../release_notes.rst:5055
msgid ":class:`qiskit.quantum_info.DensityMatrix`"
msgstr ""

#: ../../release_notes.rst:5057
msgid ""
"The ``scaling`` parameter of the ``draw()`` method for the ``Schedule`` "
"and ``Pulse`` objects was deprecated and will be removed in a future "
"release. Instead the new ``scale`` parameter should be used. This was "
"done to have a consistent argument between pulse and circuit drawings. "
"For example::"
msgstr ""

#: ../../release_notes.rst:5079
msgid ""
"Previously, calling :meth:`qiskit.circuit.QuantumCircuit.bind_parameters`"
" prior to decomposing a circuit would result in the bound values not "
"being correctly substituted into the decomposed gates. This has been "
"resolved such that binding and decomposition may occur in any order. "
"Fixes `issue #2482 <https://github.com/Qiskit/qiskit-terra/issues/2482>`_"
" and `issue #3509 <https://github.com/Qiskit/qiskit-terra/issues/3509>`_"
msgstr ""

#: ../../release_notes.rst:5086
msgid ""
"The ``Collect2qBlocks`` pass had previously not considered classical "
"conditions when determining whether to include a gate within an existing "
"block. In some cases, this resulted in classical conditions being lost "
"when transpiling with ``optimization_level=3``. This has been resolved so"
" that classically conditioned gates are never included in a block. Fixes "
"`issue #3215 <https://github.com/Qiskit/qiskit-terra/issues/3215>`_"
msgstr ""

#: ../../release_notes.rst:5094
msgid ""
"All the output types for the circuit drawers in "
":meth:`qiskit.circuit.QuantumCircuit.draw` and "
":func:`qiskit.visualization.circuit_drawer` have fixed and/or improved "
"support for drawing controlled custom gates. Fixes `issue #3546 "
"<https://github.com/Qiskit/qiskit-terra/issues/3546>`_, `issue #3763 "
"<https://github.com/Qiskit/qiskit-terra/issues/3763>`_, and `issue #3764 "
"<https://github.com/Qiskit/qiskit-terra/issues/3764>`_"
msgstr ""

#: ../../release_notes.rst:5102
msgid ""
"Explanation and examples have been added to documentation for the "
":class:`qiskit.circuit.QuantumCircuit` methods for adding gates: "
":meth:`qiskit.circuit.QuantumCircuit.ccx`, "
":meth:`qiskit.circuit.QuantumCircuit.ch`, "
":meth:`qiskit.circuit.QuantumCircuit.crz`, "
":meth:`qiskit.circuit.QuantumCircuit.cswap`, "
":meth:`qiskit.circuit.QuantumCircuit.cu1`, "
":meth:`qiskit.circuit.QuantumCircuit.cu3`, "
":meth:`qiskit.circuit.QuantumCircuit.cx`, "
":meth:`qiskit.circuit.QuantumCircuit.cy`, "
":meth:`qiskit.circuit.QuantumCircuit.cz`, "
":meth:`qiskit.circuit.QuantumCircuit.h`, "
":meth:`qiskit.circuit.QuantumCircuit.iden`, "
":meth:`qiskit.circuit.QuantumCircuit.rx`, "
":meth:`qiskit.circuit.QuantumCircuit.ry`, "
":meth:`qiskit.circuit.QuantumCircuit.rz`, "
":meth:`qiskit.circuit.QuantumCircuit.s`, "
":meth:`qiskit.circuit.QuantumCircuit.sdg`, "
":meth:`qiskit.circuit.QuantumCircuit.swap`, "
":meth:`qiskit.circuit.QuantumCircuit.t`, "
":meth:`qiskit.circuit.QuantumCircuit.tdg`, "
":meth:`qiskit.circuit.QuantumCircuit.u1`, "
":meth:`qiskit.circuit.QuantumCircuit.u2`, "
":meth:`qiskit.circuit.QuantumCircuit.u3`, "
":meth:`qiskit.circuit.QuantumCircuit.x`, "
":meth:`qiskit.circuit.QuantumCircuit.y`, "
":meth:`qiskit.circuit.QuantumCircuit.z`. Fixes `issue #3400 "
"<https://github.com/Qiskit/qiskit-terra/issues/3400>`_"
msgstr ""

#: ../../release_notes.rst:5131
msgid ""
"Fixes for handling of complex number parameter in circuit visualization. "
"Fixes `issue #3640 <https://github.com/Qiskit/qiskit-terra/issues/3640>`_"
msgstr ""

#: ../../release_notes.rst:5140
msgid ""
"The transpiler passes in the :mod:`qiskit.transpiler.passes` directory "
"have been organized into subdirectories to better categorize them by "
"functionality. They are still all accessible under the "
"``qiskit.transpiler.passes`` namespace."
msgstr ""

#: ../../release_notes.rst:5150
msgid ""
"Added ``NoiseModel.from_backend`` for building a basic device noise model"
" for an IBMQ backend (\\#569)"
msgstr ""

#: ../../release_notes.rst:5152
msgid ""
"Added multi-GPU enabled simulation methods to the ``QasmSimulator``, "
"``StatevectorSimulator``, and ``UnitarySimulator``. The qasm simulator "
"has gpu version of the density matrix and statevector methods and can be "
"accessed using ``\"method\": \"density_matrix_gpu\"`` or ``\"method\": "
"\"statevector_gpu\"`` in ``backend_options``. The statevector simulator "
"gpu method can be accessed using ``\"method\": \"statevector_gpu\"``. The"
" unitary simulator GPU method can be accessed using ``\"method\": "
"\"unitary_gpu\"``. These backends use CUDA and require an NVidia "
"GPU.(\\#544)"
msgstr ""

#: ../../release_notes.rst:5159
msgid "Added ``PulseSimulator`` backend (\\#542)"
msgstr ""

#: ../../release_notes.rst:5160
msgid ""
"Added ``PulseSystemModel`` and ``HamiltonianModel`` classes to represent "
"models to be used in ``PulseSimulator`` (\\#496, \\#493)"
msgstr ""

#: ../../release_notes.rst:5162
msgid ""
"Added ``duffing_model_generators`` to generate ``PulseSystemModel`` "
"objects from a list of parameters (\\#516)"
msgstr ""

#: ../../release_notes.rst:5164
msgid "Migrated ODE function solver to C++ (\\#442, \\#350)"
msgstr ""

#: ../../release_notes.rst:5165
msgid "Added high level pulse simulator tests (\\#379)"
msgstr ""

#: ../../release_notes.rst:5166
msgid "CMake BLAS_LIB_PATH flag to set path to look for BLAS lib (\\#543)"
msgstr ""

#: ../../release_notes.rst:5171
msgid ""
"Changed the structure of the ``src`` directory to organise simulator "
"source code. Simulator controller headers were moved to "
"``src/controllers`` and simulator method State headers are in "
"``src/simulators`` (\\#544)"
msgstr ""

#: ../../release_notes.rst:5174
msgid ""
"Moved the location of several functions (\\#568): * Moved contents of "
"``qiskit.provider.aer.noise.errors`` into the ``qiskit.providers.noise`` "
"module * Moved contents of ``qiskit.provider.aer.noise.utils`` into the "
"``qiskit.provider.aer.utils`` module."
msgstr ""

#: ../../release_notes.rst:5179
msgid ""
"Enabled optimization to aggregate consecutive gates in a circuit (fusion)"
" by default (\\#579)."
msgstr ""

#: ../../release_notes.rst:5183
msgid "Deprecated ``utils.qobj_utils`` functions (\\#568)"
msgstr ""

#: ../../release_notes.rst:5184
msgid ""
"Deprecated "
"``qiskit.providers.aer.noise.device.basic_device_noise_model``. It is "
"superseded by the ``NoiseModel.from_backend`` method (\\#569)"
msgstr ""

#: ../../release_notes.rst:5188 ../../release_notes.rst:7167
msgid "Removed"
msgstr ""

#: ../../release_notes.rst:5189
msgid ""
"Removed ``NoiseModel.as_dict``, ``QuantumError.as_dict``, "
"``ReadoutError.as_dict``, and ``QuantumError.kron`` methods that were "
"deprecated in 0.3 (\\#568)."
msgstr ""

#: ../../release_notes.rst:5193 ../../release_notes.rst:5794
#: ../../release_notes.rst:6317 ../../release_notes.rst:7058
msgid "Ignis 0.2"
msgstr ""

#: ../../release_notes.rst:5198 ../../release_notes.rst:5799
#: ../../release_notes.rst:6322 ../../release_notes.rst:7086
msgid "Aqua 0.6"
msgstr ""

#: ../../release_notes.rst:5203
msgid "IBM Q Provider 0.4.6"
msgstr ""

#: ../../release_notes.rst:5208
msgid ""
"Several new methods were added to "
":class:`IBMQBackend<qiskit.providers.ibmq.ibmqbackend.IBMQBackend>`:"
msgstr ""

#: ../../release_notes.rst:5211
msgid ""
":meth:`~qiskit.providers.ibmq.job.IBMQJob.wait_for_final_state` blocks "
"until the job finishes. It takes a callback function that it will invoke "
"after every query to provide feedback."
msgstr ""

#: ../../release_notes.rst:5214
msgid ""
":meth:`~qiskit.providers.ibmq.ibmqbackend.IBMQBackend.active_jobs` "
"returns the jobs submitted to a backend that are currently in an "
"unfinished status."
msgstr ""

#: ../../release_notes.rst:5216
msgid ""
":meth:`~qiskit.providers.ibmq.ibmqbackend.IBMQBackend.job_limit` returns "
"the job limit for a backend."
msgstr ""

#: ../../release_notes.rst:5218
msgid ""
":meth:`~qiskit.providers.ibmq.ibmqbackend.IBMQBackend.remaining_jobs_count`"
" returns the number of jobs that you can submit to the backend before job"
" limit is reached."
msgstr ""

#: ../../release_notes.rst:5221
msgid ""
":class:`~qiskit.providers.ibmq.job.QueueInfo` now has a new "
":meth:`~qiskit.providers.ibmq.job.QueueInfo.format` method that returns a"
" formatted string of the queue information."
msgstr ""

#: ../../release_notes.rst:5225
msgid ""
":class:`IBMQJob<qiskit.providers.ibmq.job.IBMQJob>` now has three new "
"methods: :meth:`~qiskit.providers.ibmq.job.IBMQJob.done`, "
":meth:`~qiskit.providers.ibmq.job.IBMQJob.running`, and "
":meth:`~qiskit.providers.ibmq.job.IBMQJob.cancelled` that are used to "
"indicate job status."
msgstr ""

#: ../../release_notes.rst:5230
msgid ""
":meth:`qiskit.providers.ibmq.ibmqbackend.IBMQBackend.run()` now accepts "
"an optional `job_tags` parameter. If specified, the `job_tags` are "
"assigned to the job, which can later be used as a filter in "
":meth:`qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs()`."
msgstr ""

#: ../../release_notes.rst:5234
msgid ""
":class:`~qiskit.providers.ibmq.managed.IBMQJobManager` now has a new "
"method "
":meth:`~qiskit.providers.ibmq.managed.IBMQJobManager.retrieve_job_set()` "
"that allows you to retrieve a previously submitted job set using the job "
"set ID."
msgstr ""

#: ../../release_notes.rst:5241
msgid ""
"The ``Exception`` hierarchy has been refined with more specialized "
"classes. You can, however, continue to catch their parent exceptions "
"(such as ``IBMQAccountError``). Also, the exception class "
"``IBMQApiUrlError`` has been replaced by "
"``IBMQAccountCredentialsInvalidUrl`` and "
"``IBMQAccountCredentialsInvalidToken``."
msgstr ""

#: ../../release_notes.rst:5250
msgid ""
"The use of proxy urls without a protocol (e.g. ``http://``) is deprecated"
" due to recent Python changes."
msgstr ""

#: ../../release_notes.rst:5255
msgid "Qiskit 0.14.0"
msgstr ""

#: ../../release_notes.rst:5258
msgid "Terra 0.11.0"
msgstr ""

#: ../../release_notes.rst:5265
msgid ""
"The 0.11.0 release includes several new features and bug fixes. The "
"biggest change for this release is the addition of the pulse scheduler. "
"This allows users to define their quantum program as a ``QuantumCircuit``"
" and then map it to the underlying pulse instructions that will control "
"the quantum hardware to implement the circuit."
msgstr ""

#: ../../release_notes.rst:5276
msgid ""
"Added 5 new commands to easily retrieve user-specific data from "
"``BackendProperties``: ``gate_property``, ``gate_error``, "
"``gate_length``, ``qubit_property``, ``t1``, ``t2``, ``readout_error`` "
"and ``frequency``. They return the specific values of backend properties."
" For example::"
msgstr ""

#: ../../release_notes.rst:5294
msgid ""
"Added method ``Instruction.is_parameterized()`` to check if an "
"instruction object is parameterized. This method returns ``True`` if and "
"only if instruction has a ``ParameterExpression`` or ``Parameter`` object"
" for one of its params."
msgstr ""

#: ../../release_notes.rst:5299
msgid ""
"Added a new analysis pass ``Layout2qDistance``. This pass allows to "
"\"score\" a layout selection, once ``property_set['layout']`` is set.  "
"The score will be the sum of distances for each two-qubit gate in the "
"circuit, when they are not directly connected. This scoring does not "
"consider direction in the coupling map. The lower the number, the better "
"the layout selection is."
msgstr ""

#: ../../release_notes.rst:5305
msgid ""
"For example, consider a linear coupling map ``[0]--[2]--[1]`` and the "
"following circuit::"
msgstr ""

#: ../../release_notes.rst:5312
msgid ""
"If the layout is ``{qr[0]:0, qr[1]:1}``, ``Layout2qDistance`` will set "
"``property_set['layout_score'] = 1``. If the layout is ``{qr[0]:0, "
"qr[1]:2}``, then the result is ``property_set['layout_score'] = 0``. The "
"lower the score, the better."
msgstr ""

#: ../../release_notes.rst:5317
msgid ""
"Added ``qiskit.QuantumCircuit.cnot`` as an alias for the ``cx`` method of"
" ``QuantumCircuit``. The names ``cnot`` and ``cx`` are often used "
"interchangeably now the `cx` method can be called with either name."
msgstr ""

#: ../../release_notes.rst:5321
msgid ""
"Added ``qiskit.QuantumCircuit.toffoli`` as an alias for the ``ccx`` "
"method of ``QuantumCircuit``. The names ``toffoli`` and ``ccx`` are often"
" used interchangeably now the `ccx` method can be called with either "
"name."
msgstr ""

#: ../../release_notes.rst:5325
msgid ""
"Added ``qiskit.QuantumCircuit.fredkin`` as an alias for the ``cswap`` "
"method of ``QuantumCircuit``. The names ``fredkin`` and ``cswap`` are "
"often used interchangeably now the `cswap` method can be called with "
"either name."
msgstr ""

#: ../../release_notes.rst:5330
msgid ""
"The ``latex`` output mode for ``qiskit.visualization.circuit_drawer()`` "
"and the ``qiskit.circuit.QuantumCircuit.draw()`` method now has a mode to"
" passthrough raw latex from gate labels and parameters. The syntax for "
"doing this mirrors matplotlib's `mathtext mode "
"<https://matplotlib.org/tutorials/text/mathtext.html>`__ syntax. Any "
"portion of a label string between a pair of '$' characters will be "
"treated as raw latex and passed directly into the generated output latex."
" This can be leveraged to add more advanced formatting to circuit "
"diagrams generated with the latex drawer."
msgstr ""

#: ../../release_notes.rst:5340
msgid ""
"Prior to this release all gate labels were run through a utf8 -> latex "
"conversion to make sure that the output latex would compile the string as"
" expected. This is still what happens for all portions of a label outside"
" the '$' pair. Also if you want to use a dollar sign in your label make "
"sure you escape it in the label string (ie ``'\\$'``)."
msgstr ""

#: ../../release_notes.rst:5346
msgid ""
"You can mix and match this passthrough with the utf8 -> latex conversion "
"to create the exact label you want, for example::"
msgstr ""

#: ../../release_notes.rst:5357
msgid ""
"will now render the first custom gate's label as ``α_gate``, the second "
"will be ``α_gate`` with a 2 subscript, and the last custom gate's label "
"will be ``$α$_gate``."
msgstr ""

#: ../../release_notes.rst:5361
msgid ""
"Add ``ControlledGate`` class for representing controlled gates. "
"Controlled gate instances are created with the ``control(n)`` method of "
"``Gate`` objects where ``n`` represents the number of controls. The "
"control qubits come before the controlled qubits in the new gate. For "
"example::"
msgstr ""

#: ../../release_notes.rst:5374
msgid "generates::"
msgstr ""

#: ../../release_notes.rst:5385
msgid ""
"Allowed values of ``meas_level`` parameters and fields can now be a "
"member from the `IntEnum` class ``qiskit.qobj.utils.MeasLevel``. This can"
" be used when calling ``execute`` (or anywhere else ``meas_level`` is "
"specified) with a pulse experiment. For example::"
msgstr ""

#: ../../release_notes.rst:5402
msgid ""
"In this above example, ``meas_level=MeasLevel.CLASSIFIED`` and "
"``meas_level=2`` can be used interchangably now."
msgstr ""

#: ../../release_notes.rst:5405
msgid ""
"A new layout selector based on constraint solving is included. "
"`CSPLayout` models the problem of finding a layout as a constraint "
"problem and uses recursive backtracking to solve it."
msgstr ""

#: ../../release_notes.rst:5434
msgid ""
"The parameter ``CSPLayout(...,strict_direction=True)`` is more "
"restrictive but it will guarantee there is no need of running "
"``CXDirection`` after."
msgstr ""

#: ../../release_notes.rst:5453
msgid ""
"If the constraint system is not solvable, the `layout` property is not "
"set."
msgstr ""

#: ../../release_notes.rst:5466
msgid ""
"PulseBackendConfiguration (accessed normally as backend.configuration()) "
"has been extended with useful methods to explore its data and the "
"functionality that exists in PulseChannelSpec. PulseChannelSpec will be "
"deprecated in the future. For example::"
msgstr ""

#: ../../release_notes.rst:5479
msgid ""
"``PulseDefaults`` (accessed normally as ``backend.defaults()``) has an "
"attribute, ``circuit_instruction_map`` which has the methods of CmdDef. "
"The new `circuit_instruction_map` is an ``InstructionScheduleMap`` object"
" with three new functions beyond what CmdDef had:"
msgstr ""

#: ../../release_notes.rst:5484
msgid "qubit_instructions(qubits) returns the operations defined for the qubits"
msgstr ""

#: ../../release_notes.rst:5485
msgid "assert_has(instruction, qubits) raises an error if the op isn't defined"
msgstr ""

#: ../../release_notes.rst:5486
msgid "remove(instruction, qubits) like pop, but doesn't require parameters"
msgstr ""

#: ../../release_notes.rst:5488
msgid "There are some differences from the CmdDef:"
msgstr ""

#: ../../release_notes.rst:5490
msgid "``__init__`` takes no arguments"
msgstr ""

#: ../../release_notes.rst:5491
msgid ""
"``cmds`` and ``cmd_qubits`` are deprecated and replaced with "
"``instructions`` and ``qubits_with_instruction``"
msgstr ""

#: ../../release_notes.rst:5494
msgid "Example::"
msgstr ""

#: ../../release_notes.rst:5502
msgid ""
"A new kwarg parameter, ``show_framechange_channels`` to optionally "
"disable displaying channels with only framechange instructions in pulse "
"visualizations was added to the ``qiskit.visualization.pulse_drawer()`` "
"function and ``qiskit.pulse.Schedule.draw()`` method. When this new kwarg"
" is set to ``False`` the output pulse schedule visualization will not "
"include any channels that only include frame changes."
msgstr ""

#: ../../release_notes.rst:5527
msgid ""
"A new utility function ``qiskit.result.marginal_counts()`` is added which"
" allows marginalization of the counts over some indices of interest. This"
" is useful when more qubits are measured than needed, and one wishes to "
"get the observation counts for some subset of them only."
msgstr ""

#: ../../release_notes.rst:5532
msgid ""
"When ``passmanager.run(...)`` is invoked with more than one circuit, the "
"transpilation of these circuits will run in parallel."
msgstr ""

#: ../../release_notes.rst:5535
msgid ""
"PassManagers can now be sliced to create a new PassManager containing a "
"subset of passes using the square bracket operator. This allow running or"
" drawing a portion of the PassManager for easier testing and "
"visualization. For example let's try to draw the first 3 passes of a "
"PassManager pm, or run just the second pass on our circuit:"
msgstr ""

#: ../../release_notes.rst:5546
msgid ""
"Also now, PassManagers can be created by adding two PassManagers or by "
"directly adding a pass/list of passes to a PassManager."
msgstr ""

#: ../../release_notes.rst:5554
msgid ""
"A basic ``scheduler`` module has now been added to Qiskit. The "
"`scheduler` schedules an input transpiled ``QuantumCircuit`` into a pulse"
" ``Schedule``. The scheduler accepts as input a ``Schedule`` and either a"
" pulse ``Backend``, or a ``CmdDef`` which relates circuit ``Instruction``"
" objects on specific qubits to pulse Schedules and a ``meas_map`` which "
"determines which measurements must occur together."
msgstr ""

#: ../../release_notes.rst:5561
msgid "Scheduling example::"
msgstr ""

#: ../../release_notes.rst:5573
msgid ""
"The scheduler currently supports two scheduling policies, "
"`as_late_as_possible` (``alap``) and `as_soon_as_possible` (``asap``), "
"which respectively schedule pulse instructions to occur as late as "
"possible or as soon as possible across qubits in a circuit. The "
"scheduling policy may be selected with the input argument ``method``, for"
" example::"
msgstr ""

#: ../../release_notes.rst:5582
msgid ""
"It is easy to use a pulse ``Schedule`` within a ``QuantumCircuit`` by "
"mapping it to a custom circuit instruction such as a gate which may be "
"used in a ``QuantumCircuit``. To do this, first, define the custom gate "
"and then add an entry into the ``CmdDef`` for the gate, for each qubit "
"that the gate will be applied to. The gate can then be used in the "
"``QuantumCircuit``. At scheduling time the gate will be mapped to the "
"underlying pulse schedule. Using this technique allows easy integration "
"with preexisting qiskit modules such as Ignis."
msgstr ""

#: ../../release_notes.rst:5621
msgid ""
"The feature for transpiling in parallel when ``passmanager.run(...)`` is "
"invoked with more than one circuit is not supported under Windows. See "
"`#2988 <https://github.com/Qiskit/qiskit-terra/issues/2988>`__ for more "
"details."
msgstr ""

#: ../../release_notes.rst:5632
msgid ""
"The ``qiskit.pulse.channels.SystemTopology`` class was used as a helper "
"class for ``PulseChannelSpec``. It has been removed since with the "
"deprecation of ``PulseChannelSpec`` and changes to "
"``BackendConfiguration`` make it unnecessary."
msgstr ""

#: ../../release_notes.rst:5637
msgid ""
"The previously deprecated representation of qubits and classical bits as "
"tuple, which was deprecated in the 0.9 release, has been removed. The use"
" of ``Qubit`` and ``Clbit`` objects is the new way to represent qubits "
"and classical bits."
msgstr ""

#: ../../release_notes.rst:5642
msgid ""
"The previously deprecated representation of the basis set as single "
"string has been removed. A list of strings is the new preferred way."
msgstr ""

#: ../../release_notes.rst:5645
msgid ""
"The method ``BaseModel.as_dict``, which was deprecated in the 0.9 "
"release, has been removed in favor of the method ``BaseModel.to_dict``."
msgstr ""

#: ../../release_notes.rst:5648
msgid ""
"In PulseDefaults (accessed normally as backend.defaults()), "
"``qubit_freq_est`` and ``meas_freq_est`` are now returned in Hz rather "
"than GHz. This means the new return values are 1e9 * their previous "
"value."
msgstr ""

#: ../../release_notes.rst:5652
msgid ""
"`dill <https://pypi.org/project/dill/>`__ was added as a requirement. "
"This is needed to enable running ``passmanager.run()`` in parallel for "
"more than one circuit."
msgstr ""

#: ../../release_notes.rst:5656
msgid ""
"The previously deprecated gate ``UBase``, which was deprecated in the 0.9"
" release, has been removed. The gate ``U3Gate`` should be used instead."
msgstr ""

#: ../../release_notes.rst:5660
msgid ""
"The previously deprecated gate ``CXBase``, which was deprecated in the "
"0.9 release, has been removed. The gate ``CnotGate`` should be used "
"instead."
msgstr ""

#: ../../release_notes.rst:5664
msgid ""
"The instruction ``snapshot`` used to implicitly convert the ``label`` "
"parameter to string. That conversion has been removed and an error is "
"raised if a string is not provided."
msgstr ""

#: ../../release_notes.rst:5668
msgid ""
"The previously deprecated gate ``U0Gate``, which was deprecated in the "
"0.9 release, has been removed. The gate ``IdGate`` should be used instead"
" to insert delays."
msgstr ""

#: ../../release_notes.rst:5678
msgid ""
"The ``qiskit.pulse.CmdDef`` class has been deprecated. Instead you should"
" use the ``qiskit.pulse.InstructionScheduleMap``. The "
"``InstructionScheduleMap`` object for a pulse enabled system can be "
"accessed at ``backend.defaults().instruction_schedules``."
msgstr ""

#: ../../release_notes.rst:5683
msgid ""
"``PulseChannelSpec`` is being deprecated. Use ``BackendConfiguration`` "
"instead. The backend configuration is accessed normally as "
"``backend.configuration()``. The config has been extended with most of "
"the functionality of PulseChannelSpec, with some modifications as "
"follows, where `0` is an exemplary qubit index::"
msgstr ""

#: ../../release_notes.rst:5694
msgid ""
"Now, if there is an attempt to get a channel for a qubit which does not "
"exist for the device, a ``BackendConfigurationError`` will be raised with"
" a helpful explanation."
msgstr ""

#: ../../release_notes.rst:5698
msgid ""
"The methods ``memoryslots`` and ``registerslots`` of the PulseChannelSpec"
" have not been migrated to the backend configuration. These classical "
"resources are not restrained by the physical configuration of a backend "
"system. Please instantiate them directly::"
msgstr ""

#: ../../release_notes.rst:5706
msgid ""
"The ``qubits`` method is not migrated to backend configuration. The "
"result of ``qubits`` can be built as such::"
msgstr ""

#: ../../release_notes.rst:5711
msgid ""
"``Qubit`` within ``pulse.channels`` has been deprecated. They should not "
"be used. It is possible to obtain channel <=> qubit mappings through the "
"BackendConfiguration (or backend.configuration())."
msgstr ""

#: ../../release_notes.rst:5715
msgid ""
"The function ``qiskit.visualization.circuit_drawer.qx_color_scheme()`` "
"has been deprecated. This function is no longer used internally and "
"doesn't reflect the current IBM QX style. If you were using this function"
" to generate a style dict locally you must save the output from it and "
"use that dictionary directly."
msgstr ""

#: ../../release_notes.rst:5721
msgid ""
"The Exception ``TranspilerAccessError`` has been deprecated. An "
"alternative function ``TranspilerError`` can be used instead to provide "
"the same functionality. This alternative function provides the exact same"
" functionality but with greater generality."
msgstr ""

#: ../../release_notes.rst:5726
msgid ""
"Buffers in Pulse are deprecated. If a nonzero buffer is supplied, a "
"warning will be issued with a reminder to use a Delay instead. Other "
"options would include adding samples to a pulse instruction which are "
"(0.+0.j) or setting the start time of the next pulse to "
"``schedule.duration + buffer``."
msgstr ""

#: ../../release_notes.rst:5731
msgid ""
"Passing in ``sympy.Basic``, ``sympy.Expr`` and ``sympy.Matrix`` types as "
"instruction parameters are deprecated and will be removed in a future "
"release. You'll need to convert the input to one of the supported types "
"which are:"
msgstr ""

#: ../../release_notes.rst:5748
msgid ""
"The Collect2qBlocks and CommutationAnalysis passes in the transpiler had "
"been unable to process circuits containing Parameterized gates, "
"preventing Parameterized circuits from being transpiled at "
"optimization_level 2 or above. These passes have been corrected to treat "
"Parameterized gates as opaque."
msgstr ""

#: ../../release_notes.rst:5754
msgid ""
"The align_measures function had an issue where Measure stimulus pulses "
"weren't properly aligned with Acquire pulses, resulting in an error. This"
" has been fixed."
msgstr ""

#: ../../release_notes.rst:5758
msgid ""
"Uses of ``numpy.random.seed`` have been removed so that calls of qiskit "
"functions do not affect results of future calls to ``numpy.random``"
msgstr ""

#: ../../release_notes.rst:5761
msgid ""
"Fixed race condition occurring in the job monitor when "
"``job.queue_position()`` returns ``None``. ``None`` is a valid return "
"from ``job.queue_position()``."
msgstr ""

#: ../../release_notes.rst:5765
msgid ""
"Backend support for ``memory=True`` now checked when that kwarg is "
"passed. ``QiskitError`` results if not supported."
msgstr ""

#: ../../release_notes.rst:5768
msgid ""
"When transpiling without a coupling map, there were no check in the "
"amount of qubits of the circuit to transpile. Now the transpile process "
"checks that the backend has enough qubits to allocate the circuit."
msgstr ""

#: ../../release_notes.rst:5778
msgid ""
"The ``qiskit.result.marginal_counts()`` function replaces a similar "
"utility function in qiskit-ignis "
"``qiskit.ignis.verification.tomography.marginal_counts()``, which will be"
" deprecated in a future qiskit-ignis release."
msgstr ""

#: ../../release_notes.rst:5783
msgid ""
"All sympy parameter output type support have been been removed (or "
"deprecated as noted) from qiskit-terra. This includes sympy type "
"parameters in ``QuantumCircuit`` objects, qasm ast nodes, or ``Qobj`` "
"objects."
msgstr ""

#: ../../release_notes.rst:5789 ../../release_notes.rst:6312
#: ../../release_notes.rst:7039
msgid "Aer 0.3"
msgstr ""

#: ../../release_notes.rst:5804
msgid "IBM Q Provider 0.4"
msgstr ""

#: ../../release_notes.rst:5809
msgid ""
"The 0.4.0 release is the first release that makes use of all the features"
" of the new IBM Q API. In particular, the ``IBMQJob`` class has been "
"revamped in order to be able to retrieve more information from IBM Q, and"
" a Job Manager class has been added for allowing a higher-level and more "
"seamless usage of large or complex jobs. If you have not upgraded from "
"the legacy IBM Q Experience or QConsole yet, please ensure to revisit the"
" release notes for IBM Q Provider 0.3 (Qiskit 0.11) for more details on "
"how to make the transition. The legacy accounts will no longer be "
"supported as of this release."
msgstr ""

#: ../../release_notes.rst:5823
msgid "Job modifications"
msgstr ""

#: ../../release_notes.rst:5825
msgid ""
"The ``IBMQJob`` class has been revised, and now mimics more closely to "
"the contents of a remote job along with new features:"
msgstr ""

#: ../../release_notes.rst:5828
msgid ""
"You can now assign a name to a job, by specifying ``IBMQBackend.run(..., "
"job_name='...')`` when submitting a job. This name can be retrieved via "
"``IBMQJob.name()`` and can be used for filtering."
msgstr ""

#: ../../release_notes.rst:5831
msgid ""
"Jobs can now be shared with other users at different levels (global, per "
"hub, group or project) via an optional ``job_share_level`` parameter when"
" submitting the job."
msgstr ""

#: ../../release_notes.rst:5834
msgid ""
"``IBMQJob`` instances now have more attributes, reflecting the contents "
"of the remote IBM Q jobs. This implies that new attributes introduced by "
"the IBM Q API will automatically and immediately be available for use "
"(for example, ``job.new_api_attribute``). The new attributes will be "
"promoted to methods when they are considered stable (for example, "
"``job.name()``)."
msgstr ""

#: ../../release_notes.rst:5839
msgid "``.error_message()`` returns more information on why a job failed."
msgstr ""

#: ../../release_notes.rst:5840
msgid ""
"``.queue_position()`` accepts a ``refresh`` parameter for forcing an "
"update."
msgstr ""

#: ../../release_notes.rst:5841
msgid ""
"``.result()`` accepts an optional ``partial`` parameter, for returning "
"partial results, if any, of jobs that failed. Be aware that ``Result`` "
"methods, such as ``get_counts()`` will raise an exception if applied on "
"experiments that failed."
msgstr ""

#: ../../release_notes.rst:5846
msgid ""
"Please note that the changes include some low-level modifications of the "
"class. If you were creating the instances manually, note that:"
msgstr ""

#: ../../release_notes.rst:5849
msgid ""
"the signature of the constructor has changed to account for the new "
"features."
msgstr ""

#: ../../release_notes.rst:5850
msgid ""
"the ``.submit()`` method can no longer be called directly, and jobs are "
"expected to be submitted either via the synchronous ``IBMQBackend.run()``"
" or via the Job Manager."
msgstr ""

#: ../../release_notes.rst:5855
msgid "Job Manager"
msgstr ""

#: ../../release_notes.rst:5857
msgid ""
"A new Job Manager (``IBMQJobManager``) has been introduced, as a higher-"
"level mechanism for handling jobs composed of multiple circuits or pulse "
"schedules. The Job Manager aims to provide a transparent interface, "
"intelligently splitting the input into efficient units of work and taking"
" full advantage of the different components. It will be expanded on "
"upcoming versions, and become the recommended entry point for job "
"submission."
msgstr ""

#: ../../release_notes.rst:5864
msgid ""
"Its ``.run()`` method receives a list of circuits or pulse schedules, and"
" returns a ``ManagedJobSet instance``, which can then be used to track "
"the statuses and results of these jobs. For example::"
msgstr ""

#: ../../release_notes.rst:5892
msgid "provider.backends modifications"
msgstr ""

#: ../../release_notes.rst:5894
msgid ""
"The ``provider.backends`` member, which was previously a function that "
"returned a list of backends, has been promoted to a service. This implies"
" that it can be used both in the previous way, as a ``.backends()`` "
"method, and also as a ``.backends`` attribute with expanded capabilities:"
msgstr ""

#: ../../release_notes.rst:5899
msgid ""
"it contains the existing backends from that provider as attributes, which"
" can be used for autocompletion. For example::"
msgstr ""

#: ../../release_notes.rst:5904
msgid "is equivalent to::"
msgstr ""

#: ../../release_notes.rst:5908
msgid ""
"the ``provider.backends.jobs()`` and ``provider.backends.retrieve_job()``"
" methods can be used for retrieving provider-wide jobs."
msgstr ""

#: ../../release_notes.rst:5913
msgid "Other changes"
msgstr ""

#: ../../release_notes.rst:5915
msgid ""
"The ``backend.properties()`` function now accepts an optional "
"``datetime`` parameter. If specified, the function returns the backend "
"properties closest to, but older than, the specified datetime filter."
msgstr ""

#: ../../release_notes.rst:5918
msgid "Some ``warnings`` have been toned down to ``logger.warning`` messages."
msgstr ""

#: ../../release_notes.rst:5923
msgid "Qiskit 0.13.0"
msgstr ""

#: ../../release_notes.rst:5926
msgid "Terra 0.10.0"
msgstr ""

#: ../../release_notes.rst:5933
msgid ""
"The 0.10.0 release includes several new features and bug fixes. The "
"biggest change for this release is the addition of initial support for "
"using Qiskit with trapped ion trap backends."
msgstr ""

#: ../../release_notes.rst:5943
msgid ""
"Introduced new methods in ``QuantumCircuit`` which allows the seamless "
"adding or removing of measurements at the end of a circuit."
msgstr ""

#: ../../release_notes.rst:5949
msgid "``measure_all()``"
msgstr ""

#: ../../release_notes.rst:5947
msgid ""
"Adds a ``barrier`` followed by a ``measure`` operation to all qubits in "
"the circuit. Creates a ``ClassicalRegister`` of size equal to the number "
"of qubits in the circuit, which store the measurements."
msgstr ""

#: ../../release_notes.rst:5955
msgid "``measure_active()``"
msgstr ""

#: ../../release_notes.rst:5952
msgid ""
"Adds a ``barrier`` followed by a ``measure`` operation to all active "
"qubits in the circuit. A qubit is active if it has at least one other "
"operation acting upon it. Creates a ``ClassicalRegister`` of size equal "
"to the number of active qubits in the circuit, which store the "
"measurements."
msgstr ""

#: ../../release_notes.rst:5962
msgid "``remove_final_measurements()``"
msgstr ""

#: ../../release_notes.rst:5958
msgid ""
"Removes all final measurements and preceeding ``barrier`` from a circuit."
" A measurement is considered \"final\" if it is not followed by any other"
" operation, excluding barriers and other measurements. After the "
"measurements are removed, if all of the classical bits in the "
"``ClassicalRegister`` are idle (have no operations attached to them), "
"then the ``ClassicalRegister`` is removed."
msgstr ""

#: ../../release_notes.rst:5964
msgid "Examples::"
msgstr ""

#: ../../release_notes.rst:6025
msgid ""
"Initial support for executing experiments on ion trap backends has been "
"added."
msgstr ""

#: ../../release_notes.rst:6028
msgid ""
"An Rxx gate (rxx) and a global Mølmer–Sørensen gate (ms) have been added "
"to the standard gate set."
msgstr ""

#: ../../release_notes.rst:6031
msgid ""
"A Cnot to Rxx/Rx/Ry decomposer ``cnot_rxx_decompose`` and a single qubit "
"Euler angle decomposer ``OneQubitEulerDecomposer`` have been added to the"
" ``quantum_info.synthesis`` module."
msgstr ""

#: ../../release_notes.rst:6035
msgid ""
"A transpiler pass ``MSBasisDecomposer`` has been added to unroll circuits"
" defined over U3 and Cnot gates into a circuit defined over Rxx,Ry and "
"Rx. This pass will be included in preset pass managers for backends which"
" include the 'rxx' gate in their supported basis gates."
msgstr ""

#: ../../release_notes.rst:6040
msgid ""
"The backends in ``qiskit.test.mock`` now contain a snapshot of real "
"device calibration data. This is accessible via the ``properties()`` "
"method for each backend. This can be used to test any code that depends "
"on backend properties, such as noise-adaptive transpiler passes or device"
" noise models for simulation. This will create a faster testing and "
"development cycle without the need to go to live backends."
msgstr ""

#: ../../release_notes.rst:6047
msgid ""
"Allows the Result class to return partial results. If a valid result "
"schema is loaded that contains some experiments which succeeded and some "
"which failed, this allows accessing the data from experiments that "
"succeeded, while raising an exception for experiments that failed and "
"displaying the appropriate error message for the failed results."
msgstr ""

#: ../../release_notes.rst:6053
msgid "An ``ax`` kwarg has been added to the following visualization functions:"
msgstr ""

#: ../../release_notes.rst:6055
msgid "``qiskit.visualization.plot_histogram``"
msgstr ""

#: ../../release_notes.rst:6056
msgid "``qiskit.visualization.plot_state_paulivec``"
msgstr ""

#: ../../release_notes.rst:6057
msgid "``qiskit.visualization.plot_state_qsphere``"
msgstr ""

#: ../../release_notes.rst:6058
msgid "``qiskit.visualization.circuit_drawer`` (``mpl`` backend only)"
msgstr ""

#: ../../release_notes.rst:6059
msgid "``qiskit.QuantumCircuit.draw`` (``mpl`` backend only)"
msgstr ""

#: ../../release_notes.rst:6061
msgid ""
"This kwarg is used to pass in a ``matplotlib.axes.Axes`` object to the "
"visualization functions. This enables integrating these visualization "
"functions into a larger visualization workflow. Also, if an `ax` kwarg is"
" specified then there is no return from the visualization functions."
msgstr ""

#: ../../release_notes.rst:6066
msgid ""
"An ``ax_real`` and ``ax_imag`` kwarg has been added to the following "
"visualization functions:"
msgstr ""

#: ../../release_notes.rst:6069
msgid "``qiskit.visualization.plot_state_hinton``"
msgstr ""

#: ../../release_notes.rst:6070
msgid "``qiskit.visualization.plot_state_city``"
msgstr ""

#: ../../release_notes.rst:6072
msgid ""
"These new kargs work the same as the newly added ``ax`` kwargs for other "
"visualization functions. However because these plots use two axes (one "
"for the real component, the other for the imaginary component). Having "
"two kwargs also provides the flexibility to only generate a visualization"
" for one of the components instead of always doing both. For example::"
msgstr ""

#: ../../release_notes.rst:6085
msgid "will only generate a plot of the real component."
msgstr ""

#: ../../release_notes.rst:6087
msgid ""
"A given pass manager now can be edited with the new method `replace`. "
"This method allows to replace a particular stage in a pass manager, which"
" can be handy when dealing with preset pass managers. For example, let's "
"edit the layout selector of the pass manager used at optimization level "
"0:"
msgstr ""

#: ../../release_notes.rst:6108
msgid ""
"The layout selection is set in the stage `[1]`. Let's replace it with "
"`DenseLayout`:"
msgstr ""

#: ../../release_notes.rst:6124
msgid ""
"If you want to replace it without any condition, you can use set-item "
"shortcut:"
msgstr ""

#: ../../release_notes.rst:6138 ../../release_notes.rst:6623
msgid ""
"Introduced a new pulse command ``Delay`` which may be inserted into a "
"pulse ``Schedule``. This command accepts a ``duration`` and may be added "
"to any ``Channel``. Other commands may not be scheduled on a channel "
"during a delay."
msgstr ""

#: ../../release_notes.rst:6142 ../../release_notes.rst:6627
msgid "The delay can be added just like any other pulse command. For example::"
msgstr ""

#: ../../release_notes.rst:6163
msgid ""
"One may also pass additional channels to be padded and a time to pad "
"until, for example::"
msgstr ""

#: ../../release_notes.rst:6192
msgid ""
"Assignments and modifications to the ``data`` attribute of "
"``qiskit.QuantumCircuit`` objects are now validated following the same "
"rules used throughout the ``QuantumCircuit`` API. This was done to "
"improve the performance of the circuits API since we can now assume the "
"``data`` attribute is in a known format. If you were manually modifying "
"the ``data`` attribute of a circuit object before this may no longer work"
" if your modifications resulted in a data structure other than the list "
"of instructions with context in the format ``[(instruction, qargs, "
"cargs)]``"
msgstr ""

#: ../../release_notes.rst:6201
msgid ""
"The transpiler default passmanager for optimization level 2 now uses the "
"``DenseLayout`` layout selection mechanism by default instead of "
"``NoiseAdaptiveLayout``. The ``Denselayout`` pass has also been modified "
"to be made noise-aware."
msgstr ""

#: ../../release_notes.rst:6206
msgid ""
"The deprecated ``DeviceSpecification`` class has been removed. Instead "
"you should use the ``PulseChannelSpec``. For example, you can run "
"something like::"
msgstr ""

#: ../../release_notes.rst:6213
msgid ""
"The deprecated module ``qiskit.pulse.ops`` has been removed. Use "
"``Schedule`` and ``Instruction`` methods directly. For example, rather "
"than::"
msgstr ""

#: ../../release_notes.rst:6220
msgid "Instead please use::"
msgstr ""

#: ../../release_notes.rst:6225
msgid ""
"This same pattern applies to other ``ops`` functions: ``insert``, "
"``shift``, ``append``, and ``flatten``."
msgstr ""

#: ../../release_notes.rst:6234
msgid ""
"Using the ``control`` property of ``qiskit.circuit.Instruction`` for "
"classical control is now deprecated. In the future this property will be "
"used for quantum control. Classically conditioned operations will instead"
" be handled by the ``condition`` property of "
"``qiskit.circuit.Instruction``."
msgstr ""

#: ../../release_notes.rst:6239
msgid ""
"Support for setting ``qiskit.circuit.Instruction`` parameters with an "
"object of type ``qiskit.qasm.node.Node`` has been deprecated. ``Node`` "
"objects that were previously used as parameters should be converted to a "
"supported type prior to initializing a new ``Instruction`` object or "
"calling the ``Instruction.params`` setter. Supported types are ``int``, "
"``float``, ``complex``, ``str``, ``qiskit.circuit.ParameterExpression``, "
"or ``numpy.ndarray``."
msgstr ""

#: ../../release_notes.rst:6247
msgid ""
"In the qiskit 0.9.0 release the representation of bits (both qubits and "
"classical bits) changed from tuples of the form ``(register, index)`` to "
"be instances of the classes ``qiskit.circuit.Qubit`` and "
"``qiskit.circuit.Clbit``. For backwards compatibility comparing the "
"equality between a legacy tuple and the bit classes was supported as "
"everything transitioned from tuples to being objects. This support is now"
" deprecated and will be removed in the future. Everything should use the "
"bit classes instead of tuples moving forward."
msgstr ""

#: ../../release_notes.rst:6256
msgid ""
"When the ``mpl`` output is used for either "
"``qiskit.QuantumCircuit.draw()`` or "
"``qiskit.visualization.circuit_drawer()`` and the ``style`` kwarg is "
"used, passing in unsupported dictionary keys as part of the ``style``` "
"dictionary is now deprecated. Where these unknown arguments were "
"previously silently ignored, in the future, unsupported keys will raise "
"an exception."
msgstr ""

#: ../../release_notes.rst:6262
msgid ""
"The ``line length`` kwarg for the ``qiskit.QuantumCircuit.draw()`` method"
" and the ``qiskit.visualization.circuit_drawer()`` function with the text"
" output mode is deprecated. It has been replaced by the ``fold`` kwarg "
"which will behave identically for the text output mode (but also now "
"supports the mpl output mode too). ``line_length`` will be removed in a "
"future release so calls should be updated to use ``fold`` instead."
msgstr ""

#: ../../release_notes.rst:6269
msgid ""
"The ``fold`` field in the ``style`` dict kwarg for the "
"``qiskit.QuantumCircuit.draw()`` method and the "
"``qiskit.visualization.circuit_drawer()`` function has been deprecated. "
"It has been replaced by the ``fold`` kwarg on both functions. This kwarg "
"behaves identically to the field in the style dict."
msgstr ""

#: ../../release_notes.rst:6281
msgid ""
"Instructions layering which underlies all types of circuit drawing has "
"changed to address right/left justification. This sometimes results in "
"output which is topologically equivalent to the rendering in prior "
"versions but visually different than previously rendered. Fixes `issue "
"#2802 <https://github.com/Qiskit/qiskit-terra/issues/2802>`_"
msgstr ""

#: ../../release_notes.rst:6287
msgid ""
"Add ``memory_slots`` to ``QobjExperimentHeader`` of pulse Qobj. This "
"fixes a bug in the data format of ``meas_level=2`` results of pulse "
"experiments. Measured quantum states are returned as a bit string with "
"zero padding based on the number set for ``memory_slots``."
msgstr ""

#: ../../release_notes.rst:6292
msgid ""
"Fixed the visualization of the rzz gate in the latex circuit drawer to "
"match the cu1 gate to reflect the symmetry in the rzz gate. The fix is "
"based on the cds command of the qcircuit latex package. Fixes `issue "
"#1957 <https://github.com/Qiskit/qiskit-terra/issues/1957>`_"
msgstr ""

#: ../../release_notes.rst:6303
msgid ""
"``matplotlib.figure.Figure`` objects returned by visualization functions "
"are no longer always closed by default. Instead the returned figure "
"objects are only closed if the configured matplotlib backend is an inline"
" jupyter backend(either set with ``%matplotlib inline`` or ``%matplotlib "
"notebook``). Output figure objects are still closed with these backends "
"to avoid duplicate outputs in jupyter notebooks (which is why the "
"``Figure.close()`` were originally added)."
msgstr ""

#: ../../release_notes.rst:6327 ../../release_notes.rst:7179
#: ../../release_notes.rst:7213 ../../release_notes.rst:7263
msgid "IBM Q Provider 0.3"
msgstr ""

#: ../../release_notes.rst:6333
msgid "Qiskit 0.12.0"
msgstr ""

#: ../../release_notes.rst:6338
msgid "Terra 0.9"
msgstr ""

#: ../../release_notes.rst:6345
msgid ""
"The 0.9 release includes many new features and many bug fixes. The "
"biggest changes for this release are new debugging capabilities for "
"PassManagers. This includes a function to visualize a PassManager, the "
"ability to add a callback function to a PassManager, and logging of "
"passes run in the PassManager. Additionally, this release standardizes "
"the way that you can set an initial layout for your circuit. So now you "
"can leverage ``initial_layout`` the kwarg parameter on "
"``qiskit.compiler.transpile()`` and ``qiskit.execute()`` and the qubits "
"in the circuit will get laid out on the desire qubits on the device. "
"Visualization of circuits will now also show this clearly when "
"visualizing a circuit that has been transpiled with a layout."
msgstr ""

#: ../../release_notes.rst:6361
msgid ""
"A ``DAGCircuit`` object (i.e. the graph representation of a "
"QuantumCircuit where operation dependencies are explicit) can now be "
"visualized with the ``.draw()`` method. This is in line with Qiskit's "
"philosophy of easy visualization. Other objects which support a "
"``.draw()`` method are ``QuantumCircuit``, ``PassManager``, and "
"``Schedule``."
msgstr ""

#: ../../release_notes.rst:6367
msgid ""
"Added a new visualization function "
"``qiskit.visualization.plot_error_map()`` to plot the error map for a "
"given backend. It takes in a backend object from the qiskit-ibmq-provider"
" and will plot the current error map for that device."
msgstr ""

#: ../../release_notes.rst:6372
msgid ""
"Both ``qiskit.QuantumCircuit.draw()`` and "
"``qiskit.visualization.circuit_drawer()`` now support annotating the "
"qubits in the visualization with layout information. If the "
"``QuantumCircuit`` object being drawn includes layout metadata (which is "
"normally only set on the circuit output from ``transpile()`` calls) then "
"by default that layout will be shown on the diagram. This is done for all"
" circuit drawer backends. For example::"
msgstr ""

#: ../../release_notes.rst:6401
msgid "will yield a diagram like::"
msgstr ""

#: ../../release_notes.rst:6436
msgid ""
"If you do not want the layout to be shown on transpiled circuits (or any "
"other circuits with a layout set) there is a new boolean kwarg for both "
"functions, ``with_layout`` (which defaults ``True``), which when set "
"``False`` will disable the layout annotation in the output circuits."
msgstr ""

#: ../../release_notes.rst:6441
msgid ""
"A new analysis pass ``CountOpsLongest`` was added to retrieve the number "
"of operations on the longest path of the DAGCircuit. When used it will "
"add a ``count_ops_longest_path`` key to the property set dictionary. You "
"can add it to your a passmanager with something like::"
msgstr ""

#: ../../release_notes.rst:6453
msgid ""
"and then access the longest path via the property set value with "
"something like::"
msgstr ""

#: ../../release_notes.rst:6461
msgid "which will set a condition on that pass based on the longest path."
msgstr ""

#: ../../release_notes.rst:6463
msgid ""
"Two new functions, ``sech()`` and ``sech_deriv()`` were added to the "
"pulse library module ``qiskit.pulse.pulse_lib`` for creating an "
"unnormalized hyperbolic secant ``SamplePulse`` object and an unnormalized"
" hyperbolic secant derviative ``SamplePulse`` object respectively."
msgstr ""

#: ../../release_notes.rst:6468
msgid ""
"A new kwarg option ``vertical_compression`` was added to the "
"``QuantumCircuit.draw()`` method and the "
"``qiskit.visualization.circuit_drawer()`` function. This option only "
"works with the ``text`` backend. This option can be set to either "
"``high``, ``medium`` (the default), or ``low`` to adjust how much "
"vertical space is used by the output visualization."
msgstr ""

#: ../../release_notes.rst:6475
msgid ""
"A new kwarg boolean option ``idle_wires`` was added to the "
"``QuantumCircuit.draw()`` method and the "
"``qiskit.visualization.circuit_drawer()`` function. It works for all "
"drawer backends. When ``idle_wires`` is set False in a drawer call the "
"drawer will not draw any bits that do not have any circuit elements in "
"the output quantum circuit visualization."
msgstr ""

#: ../../release_notes.rst:6482
msgid ""
"A new PassManager visualizer function "
"``qiskit.visualization.pass_mamanger_drawer()`` was added. This function "
"takes in a PassManager object and will generate a flow control diagram of"
" all the passes run in the PassManager."
msgstr ""

#: ../../release_notes.rst:6487
msgid ""
"When creating a PassManager you can now specify a callback function that "
"if specified will be run after each pass is executed. This function gets "
"passed a set of kwargs on each call with the state of the pass manager "
"after each pass execution. Currently these kwargs are:"
msgstr ""

#: ../../release_notes.rst:6492
msgid "``pass_`` (``Pass``): the pass being run"
msgstr ""

#: ../../release_notes.rst:6493
msgid "``dag`` (``DAGCircuit``): the dag output of the pass"
msgstr ""

#: ../../release_notes.rst:6494
msgid "``time`` (``float``): the time to execute the pass"
msgstr ""

#: ../../release_notes.rst:6495
msgid "``property_set`` (``PropertySet``): the property set"
msgstr ""

#: ../../release_notes.rst:6496
msgid "``count`` (``int``): the index for the pass execution"
msgstr ""

#: ../../release_notes.rst:6498
msgid ""
"However, it's worth noting that while these arguments are set for the 0.9"
" release they expose the internals of the pass manager and are subject to"
" change in future release."
msgstr ""

#: ../../release_notes.rst:6502
msgid ""
"For example you can use this to create a callback function that will "
"visualize the circuit output after each pass is executed::"
msgstr ""

#: ../../release_notes.rst:6512
msgid ""
"Additionally you can specify the callback function when using "
"``qiskit.compiler.transpile()``::"
msgstr ""

#: ../../release_notes.rst:6522
msgid ""
"A new method ``filter()`` was added to the ``qiskit.pulse.Schedule`` "
"class. This enables filtering the instructions in a schedule. For "
"example, filtering by instruction type::"
msgstr ""

#: ../../release_notes.rst:6536
msgid ""
"Additional decomposition methods for several types of gates. These "
"methods will use different decomposition techniques to break down a gate "
"into a sequence of CNOTs and single qubit gates. The following methods "
"are added:"
msgstr ""

#: ../../release_notes.rst:6542
msgid "Method"
msgstr ""

#: ../../release_notes.rst:6542
msgid "Description"
msgstr ""

#: ../../release_notes.rst:6544
msgid "``QuantumCircuit.iso()``"
msgstr ""

#: ../../release_notes.rst:6544
msgid ""
"Add an arbitrary isometry from m to n qubits to a circuit. This allows "
"for attaching arbitrary unitaries on n qubits (m=n) or to prepare any "
"state of n qubits (m=0)"
msgstr ""

#: ../../release_notes.rst:6550
msgid "``QuantumCircuit.diag_gate()``"
msgstr ""

#: ../../release_notes.rst:6550
msgid "Add a diagonal gate to the circuit"
msgstr ""

#: ../../release_notes.rst:6552
msgid "``QuantumCircuit.squ()``"
msgstr ""

#: ../../release_notes.rst:6552
msgid ""
"Decompose an arbitrary 2x2 unitary into three rotation gates and add to a"
" circuit"
msgstr ""

#: ../../release_notes.rst:6556
msgid "``QuantumCircuit.ucg()``"
msgstr ""

#: ../../release_notes.rst:6556
msgid ""
"Attach an uniformly controlled gate (also called a multiplexed gate) to a"
" circuit"
msgstr ""

#: ../../release_notes.rst:6560
msgid "``QuantumCircuit.ucx()``"
msgstr ""

#: ../../release_notes.rst:6560
msgid ""
"Attach a uniformly controlled (also called multiplexed) Rx rotation gate "
"to a circuit"
msgstr ""

#: ../../release_notes.rst:6564
msgid "``QuantumCircuit.ucy()``"
msgstr ""

#: ../../release_notes.rst:6564
msgid ""
"Attach a uniformly controlled (also called multiplexed) Ry rotation gate "
"to a circuit"
msgstr ""

#: ../../release_notes.rst:6568
msgid "``QuantumCircuit.ucz()``"
msgstr ""

#: ../../release_notes.rst:6568
msgid ""
"Attach a uniformly controlled (also called multiplexed) Rz rotation gate "
"to a circuit"
msgstr ""

#: ../../release_notes.rst:6573
msgid ""
"Addition of Gray-Synth and Patel–Markov–Hayes algorithms for synthesis of"
" CNOT-Phase and CNOT-only linear circuits. These functions allow the "
"synthesis of circuits that consist of only CNOT gates given a linear "
"function or a circuit that consists of only CNOT and phase gates given a "
"matrix description."
msgstr ""

#: ../../release_notes.rst:6579
msgid ""
"A new function ``random_circuit`` was added to the "
"``qiskit.circuit.random`` module. This function will generate a random "
"circuit of a specified size by randomly selecting different gates and "
"adding them to the circuit. For example, you can use this to generate a "
"5-qubit circuit with a depth of 10 using::"
msgstr ""

#: ../../release_notes.rst:6589
msgid ""
"A new kwarg ``output_names`` was added to the "
"``qiskit.compiler.transpile()`` function. This kwarg takes in a string or"
" a list of strings and uses those as the value of the circuit name for "
"the output circuits that get returned by the ``transpile()`` call. For "
"example::"
msgstr ""

#: ../../release_notes.rst:6600
msgid ""
"the ``name`` attribute on tcirc_a and tcirc_b will be ``'Circuit A'`` and"
" ``'Circuit B'`` respectively."
msgstr ""

#: ../../release_notes.rst:6603
msgid ""
"A new method ``equiv()`` was added to the "
"``qiskit.quantum_info.Operator`` and ``qiskit.quantum_info.Statevector`` "
"classes. These methods are used to check whether a second ``Operator`` "
"object or ``Statevector`` is equivalent up to global phase."
msgstr ""

#: ../../release_notes.rst:6608
msgid "The user config file has several new options:"
msgstr ""

#: ../../release_notes.rst:6610
msgid ""
"The ``circuit_drawer`` field now accepts an `auto` value. When set as the"
" value for the ``circuit_drawer`` field the default drawer backend will "
"be `mpl` if it is available, otherwise the `text` backend will be used."
msgstr ""

#: ../../release_notes.rst:6614
msgid ""
"A new field ``circuit_mpl_style`` can be used to set the default style "
"used by the matplotlib circuit drawer. Valid values for this field are "
"``bw`` and ``default`` to set the default to a black and white or the "
"default color style respectively."
msgstr ""

#: ../../release_notes.rst:6618
msgid ""
"A new field ``transpile_optimization_level`` can be used to set the "
"default transpiler optimization level to use for calls to "
"``qiskit.compiler.transpile()``. The value can be set to either 0, 1, 2, "
"or 3."
msgstr ""

#: ../../release_notes.rst:6643
msgid ""
"The previously deprecated ``qiskit._util`` module has been removed. "
"``qiskit.util`` should be used instead."
msgstr ""

#: ../../release_notes.rst:6646
msgid ""
"The ``QuantumCircuit.count_ops()`` method now returns an ``OrderedDict`` "
"object instead of a ``dict``. This should be compatible for most use "
"cases since ``OrderedDict`` is a ``dict`` subclass. However type checks "
"and other class checks might need to be updated."
msgstr ""

#: ../../release_notes.rst:6651
msgid ""
"The ``DAGCircuit.width()`` method now returns the total number quantum "
"bits and classical bits. Before it would only return the number of "
"quantum bits. If you require just the number of quantum bits you can use "
"``DAGCircuit.num_qubits()`` instead."
msgstr ""

#: ../../release_notes.rst:6656
msgid ""
"The function ``DAGCircuit.num_cbits()`` has been removed. Instead you can"
" use ``DAGCircuit.num_clbits()``."
msgstr ""

#: ../../release_notes.rst:6659
msgid ""
"Individual quantum bits and classical bits are no longer represented as "
"``(register, index)`` tuples. They are now instances of `Qubit` and "
"`Clbit` classes. If you're dealing with individual bits make sure that "
"you update any usage or type checks to look for these new classes instead"
" of tuples."
msgstr ""

#: ../../release_notes.rst:6665
msgid ""
"The preset passmanager classes "
"``qiskit.transpiler.preset_passmanagers.default_pass_manager`` and "
"``qiskit.transpiler.preset_passmanagers.default_pass_manager_simulator`` "
"(which were the previous default pass managers for "
"``qiskit.compiler.transpile()`` calls) have been removed. If you were "
"manually using this pass managers switch to the new default, "
"``qiskit.transpile.preset_passmanagers.level1_pass_manager``."
msgstr ""

#: ../../release_notes.rst:6673
msgid ""
"The ``LegacySwap`` pass has been removed. If you were using it in a "
"custom pass manager, it's usage can be replaced by the ``StochasticSwap``"
" pass, which is a faster more stable version. All the preset passmanagers"
" have been updated to use ``StochasticSwap`` pass instead of the "
"``LegacySwap``."
msgstr ""

#: ../../release_notes.rst:6678
msgid ""
"The following deprecated ``qiskit.dagcircuit.DAGCircuit`` methods have "
"been removed:"
msgstr ""

#: ../../release_notes.rst:6681
msgid "``DAGCircuit.get_qubits()`` - Use ``DAGCircuit.qubits()`` instead"
msgstr ""

#: ../../release_notes.rst:6682
msgid "``DAGCircuit.get_bits()`` - Use ``DAGCircuit.clbits()`` instead"
msgstr ""

#: ../../release_notes.rst:6683
msgid ""
"``DAGCircuit.qasm()`` - Use a combination of "
"``qiskit.converters.dag_to_circuit()`` and ``QuantumCircuit.qasm()``. For"
" example::"
msgstr ""

#: ../../release_notes.rst:6692
msgid ""
"``DAGCircuit.get_op_nodes()`` - Use ``DAGCircuit.op_nodes()`` instead. "
"Note that the return type is a list of ``DAGNode`` objects for "
"``op_nodes()`` instead of the list of tuples previously returned by "
"``get_op_nodes()``."
msgstr ""

#: ../../release_notes.rst:6696
msgid ""
"``DAGCircuit.get_gate_nodes()`` - Use ``DAGCircuit.gate_nodes()`` "
"instead. Note that the return type is a list of ``DAGNode`` objects for "
"``gate_nodes()`` instead of the list of tuples previously returned by "
"``get_gate_nodes()``."
msgstr ""

#: ../../release_notes.rst:6700
msgid ""
"``DAGCircuit.get_named_nodes()`` - Use ``DAGCircuit.named_nodes()`` "
"instead. Note that the return type is a list of ``DAGNode`` objects for "
"``named_nodes()`` instead of the list of node_ids previously returned by "
"``get_named_nodes()``."
msgstr ""

#: ../../release_notes.rst:6704
msgid ""
"``DAGCircuit.get_2q_nodes()`` - Use ``DAGCircuit.twoQ_gates()`` instead. "
"Note that the return type is a list of ``DAGNode`` objects for "
"``twoQ_gates()`` instead of the list of data_dicts previously returned by"
" ``get_2q_nodes()``."
msgstr ""

#: ../../release_notes.rst:6708
msgid ""
"``DAGCircuit.get_3q_or_more_nodes()`` - Use "
"``DAGCircuit.threeQ_or_more_gates()`` instead. Note that the return type "
"is a list of ``DAGNode`` objects for ``threeQ_or_more_gates()`` instead "
"of the list of tuples previously returned by ``get_3q_or_more_nodes()``."
msgstr ""

#: ../../release_notes.rst:6713
msgid ""
"The following ``qiskit.dagcircuit.DAGCircuit`` methods had deprecated "
"support for accepting a ``node_id`` as a parameter. This has been removed"
" and now only ``DAGNode`` objects are accepted as input:"
msgstr ""

#: ../../release_notes.rst:6717
msgid "``successors()``"
msgstr ""

#: ../../release_notes.rst:6718
msgid "``predecessors()``"
msgstr ""

#: ../../release_notes.rst:6719
msgid "``ancestors()``"
msgstr ""

#: ../../release_notes.rst:6720
msgid "``descendants()``"
msgstr ""

#: ../../release_notes.rst:6721
msgid "``bfs_successors()``"
msgstr ""

#: ../../release_notes.rst:6722
msgid "``quantum_successors()``"
msgstr ""

#: ../../release_notes.rst:6723
msgid "``remove_op_node()``"
msgstr ""

#: ../../release_notes.rst:6724
msgid "``remove_ancestors_of()``"
msgstr ""

#: ../../release_notes.rst:6725
msgid "``remove_descendants_of()``"
msgstr ""

#: ../../release_notes.rst:6726
msgid "``remove_nonancestors_of()``"
msgstr ""

#: ../../release_notes.rst:6727
msgid "``remove_nondescendants_of()``"
msgstr ""

#: ../../release_notes.rst:6728
msgid "``substitute_node_with_dag()``"
msgstr ""

#: ../../release_notes.rst:6730
msgid ""
"The ``qiskit.dagcircuit.DAGCircuit`` method ``rename_register()`` has "
"been removed. This was unused by all the qiskit code. If you were relying"
" on it externally you'll have to re-implement is an external function."
msgstr ""

#: ../../release_notes.rst:6734
msgid ""
"The ``qiskit.dagcircuit.DAGCircuit`` property ``multi_graph`` has been "
"removed. Direct access to the underlying ``networkx`` ``multi_graph`` "
"object isn't supported anymore. The API provided by the ``DAGCircuit`` "
"class should be used instead."
msgstr ""

#: ../../release_notes.rst:6739
msgid ""
"The deprecated exception class ``qiskit.qiskiterror.QiskitError`` has "
"been removed. Instead you should use ``qiskit.exceptions.QiskitError``."
msgstr ""

#: ../../release_notes.rst:6742
msgid ""
"The boolean kwargs, ``ignore_requires`` and ``ignore_preserves`` from the"
" ``qiskit.transpiler.PassManager`` constructor have been removed. These "
"are no longer valid options."
msgstr ""

#: ../../release_notes.rst:6746
msgid ""
"The module ``qiskit.tools.logging`` has been removed. This module was not"
" used by anything and added nothing over the interfaces that Python's "
"standard library ``logging`` module provides. If you want to set a custom"
" formatter for logging use the standard library ``logging`` module "
"instead."
msgstr ""

#: ../../release_notes.rst:6751
msgid ""
"The ``CompositeGate`` class has been removed. Instead you should directly"
" create a instruction object from a circuit and append that to your "
"circuit. For example, you can run something like::"
msgstr ""

#: ../../release_notes.rst:6761
msgid ""
"The previously deprecated kwargs, ``seed`` and ``config`` for "
"``qiskit.compiler.assemble()`` have been removed use ``seed_simulator`` "
"and ``run_config`` respectively instead."
msgstr ""

#: ../../release_notes.rst:6765
msgid ""
"The previously deprecated converters "
"``qiskit.converters.qobj_to_circuits()`` and "
"``qiskit.converters.circuits_to_qobj()`` have been removed. Use "
"``qiskit.assembler.disassemble()`` and ``qiskit.compiler.assemble()`` "
"respectively instead."
msgstr ""

#: ../../release_notes.rst:6771
msgid ""
"The previously deprecated kwarg ``seed_mapper`` for "
"``qiskit.compiler.transpile()`` has been removed. Instead you should use "
"``seed_transpiler``"
msgstr ""

#: ../../release_notes.rst:6775
msgid ""
"The previously deprecated kwargs ``seed``, ``seed_mapper``, ``config``, "
"and ``circuits`` for the ``qiskit.execute()`` function have been removed."
" Use ``seed_simulator``, ``seed_transpiler``, ``run_config``, and "
"``experiments`` arguments respectively instead."
msgstr ""

#: ../../release_notes.rst:6780
msgid ""
"The previously deprecated ``qiskit.tools.qcvv`` module has been removed "
"use qiskit-ignis instead."
msgstr ""

#: ../../release_notes.rst:6783
msgid ""
"The previously deprecated functions ``qiskit.transpiler.transpile()`` and"
" ``qiskit.transpiler.transpile_dag()`` have been removed. Instead you "
"should use ``qiskit.compiler.transpile``. If you were using "
"``transpile_dag()`` this can be replaced by running::"
msgstr ""

#: ../../release_notes.rst:6792
msgid ""
"The previously deprecated function ``qiskit.compile()`` has been removed "
"instead you should use ``qiskit.compiler.transpile()`` and "
"``qiskit.compiler.assemble()``."
msgstr ""

#: ../../release_notes.rst:6796
#, python-format
msgid ""
"The jupyter cell magic ``%%qiskit_progress_bar`` from "
"``qiskit.tools.jupyter`` has been changed to a line magic. This was done "
"to better reflect how the magic is used and how it works. If you were "
"using the ``%%qiskit_progress_bar`` cell magic in an existing notebook, "
"you will have to update this to be a line magic by changing it to be "
"``%qiskit_progress_bar`` instead. Everything else should behave "
"identically."
msgstr ""

#: ../../release_notes.rst:6804
msgid ""
"The deprecated function ``qiskit.tools.qi.qi.random_unitary_matrix()`` "
"has been removed. You should use the "
"``qiskit.quantum_info.random.random_unitary()`` function instead."
msgstr ""

#: ../../release_notes.rst:6808
msgid ""
"The deprecated function ``qiskit.tools.qi.qi.random_density_matrix()`` "
"has been removed. You should use the "
"``qiskit.quantum_info.random.random_density_matrix()`` function instead."
msgstr ""

#: ../../release_notes.rst:6813
msgid ""
"The deprecated function ``qiskit.tools.qi.qi.purity()`` has been removed."
" You should the ``qiskit.quantum_info.purity()`` function instead."
msgstr ""

#: ../../release_notes.rst:6816
msgid ""
"The deprecated ``QuantumCircuit._attach()`` method has been removed. You "
"should use ``QuantumCircuit.append()`` instead."
msgstr ""

#: ../../release_notes.rst:6819
msgid ""
"The ``qiskit.qasm.Qasm`` method ``get_filename()`` has been removed. You "
"can use the ``return_filename()`` method instead."
msgstr ""

#: ../../release_notes.rst:6822
msgid ""
"The deprecated ``qiskit.mapper`` module has been removed. The list of "
"functions and classes with their alternatives are:"
msgstr ""

#: ../../release_notes.rst:6825
msgid ""
"``qiskit.mapper.CouplingMap``: ``qiskit.transpiler.CouplingMap`` should "
"be used instead."
msgstr ""

#: ../../release_notes.rst:6827
msgid ""
"``qiskit.mapper.Layout``: ``qiskit.transpiler.Layout`` should be used "
"instead"
msgstr ""

#: ../../release_notes.rst:6829
msgid ""
"``qiskit.mapper.compiling.euler_angles_1q()``: "
"``qiskit.quantum_info.synthesis.euler_angles_1q()`` should be used "
"instead"
msgstr ""

#: ../../release_notes.rst:6832
msgid ""
"``qiskit.mapper.compiling.two_qubit_kak()``: "
"``qiskit.quantum_info.synthesis.two_qubit_cnot_decompose()`` should be "
"used instead."
msgstr ""

#: ../../release_notes.rst:6836
msgid ""
"The deprecated exception classes "
"``qiskit.mapper.exceptions.CouplingError`` and "
"``qiskit.mapper.exceptions.LayoutError`` don't have an alternative since "
"they serve no purpose without a ``qiskit.mapper`` module."
msgstr ""

#: ../../release_notes.rst:6840
msgid ""
"The ``qiskit.pulse.samplers`` module has been moved to "
"``qiskit.pulse.pulse_lib.samplers``. You will need to update imports of "
"``qiskit.pulse.samplers`` to ``qiskit.pulse.pulse_lib.samplers``."
msgstr ""

#: ../../release_notes.rst:6844
msgid ""
"`seaborn`_ is now a dependency for the function "
"``qiskit.visualization.plot_state_qsphere()``. It is needed to generate "
"proper angular color maps for the visualization. The ``qiskit-"
"terra[visualization]`` extras install target has been updated to install "
"``seaborn>=0.9.0`` If you are using visualizations and specifically the "
"``plot_state_qsphere()`` function you can use that to install ``seaborn``"
" or just manually run ``pip install seaborn>=0.9.0``"
msgstr ""

#: ../../release_notes.rst:6854
msgid ""
"The previously deprecated functions ``qiksit.visualization.plot_state`` "
"and ``qiskit.visualization.iplot_state`` have been removed. Instead you "
"should use the specific function for each plot type. You can refer to the"
" following tables to map the deprecated functions to their equivalent new"
" ones:"
msgstr ""

#: ../../release_notes.rst:6861 ../../release_notes.rst:8003
#: ../../release_notes.rst:8283 ../../release_notes.rst:8320
msgid "Qiskit Terra 0.6"
msgstr ""

#: ../../release_notes.rst:6861 ../../release_notes.rst:8003
msgid "Qiskit Terra 0.7+"
msgstr ""

#: ../../release_notes.rst:6863 ../../release_notes.rst:8005
msgid "plot_state(rho)"
msgstr ""

#: ../../release_notes.rst:6863 ../../release_notes.rst:6864
#: ../../release_notes.rst:8005 ../../release_notes.rst:8006
msgid "plot_state_city(rho)"
msgstr ""

#: ../../release_notes.rst:6864 ../../release_notes.rst:8006
msgid "plot_state(rho, method='city')"
msgstr ""

#: ../../release_notes.rst:6865 ../../release_notes.rst:8007
msgid "plot_state(rho, method='paulivec')"
msgstr ""

#: ../../release_notes.rst:6865 ../../release_notes.rst:8007
msgid "plot_state_paulivec(rho)"
msgstr ""

#: ../../release_notes.rst:6866 ../../release_notes.rst:8008
msgid "plot_state(rho, method='qsphere')"
msgstr ""

#: ../../release_notes.rst:6866 ../../release_notes.rst:8008
msgid "plot_state_qsphere(rho)"
msgstr ""

#: ../../release_notes.rst:6867 ../../release_notes.rst:8009
msgid "plot_state(rho, method='bloch')"
msgstr ""

#: ../../release_notes.rst:6867 ../../release_notes.rst:8009
msgid "plot_bloch_multivector(rho)"
msgstr ""

#: ../../release_notes.rst:6868 ../../release_notes.rst:8010
msgid "plot_state(rho, method='hinton')"
msgstr ""

#: ../../release_notes.rst:6868 ../../release_notes.rst:8010
msgid "plot_state_hinton(rho)"
msgstr ""

#: ../../release_notes.rst:6871
msgid ""
"The ``pylatexenc`` and ``pillow`` dependencies for the ``latex`` and "
"``latex_source`` circuit drawer backends are no longer listed as "
"requirements. If you are going to use the latex circuit drawers ensure "
"you have both packages installed or use the setuptools extras to install "
"it along with qiskit-terra::"
msgstr ""

#: ../../release_notes.rst:6879
msgid ""
"The root of the ``qiskit`` namespace will now emit a warning on import if"
" either ``qiskit.IBMQ`` or ``qiskit.Aer`` could not be setup. This will "
"occur whenever anything in the ``qiskit`` namespace is imported. These "
"warnings were added to make it clear for users up front if they're "
"running qiskit and the qiskit-aer and qiskit-ibmq-provider packages could"
" not be found. It's not always clear if the packages are missing or "
"python packaging/pip installed an element incorrectly until you go to use"
" them and get an empty ``ImportError``. These warnings should make it "
"clear up front if there these commonly used aliases are missing."
msgstr ""

#: ../../release_notes.rst:6889
msgid ""
"However, for users that choose not to use either qiskit-aer or qiskit-"
"ibmq-provider this might cause additional noise. For these users these "
"warnings are easily suppressable using Python's standard library "
"``warnings``. Users can suppress the warnings by putting these two lines "
"before any imports from qiskit::"
msgstr ""

#: ../../release_notes.rst:6899
msgid ""
"This will suppress the warnings emitted by not having qiskit-aer or "
"qiskit-ibmq-provider installed, but still preserve any other warnings "
"emitted by qiskit or any other package."
msgstr ""

#: ../../release_notes.rst:6909
msgid ""
"The ``U`` and ``CX`` gates have been deprecated. If you're using these "
"gates in your code you should update them to use ``u3`` and ``cx`` "
"instead. For example, if you're using the circuit gate functions "
"``circuit.u_base()`` and ``circuit.cx_base()`` you should update these to"
" be ``circuit.u3()`` and ``circuit.cx()`` respectively."
msgstr ""

#: ../../release_notes.rst:6915
msgid ""
"The ``u0`` gate has been deprecated in favor of using multiple ``iden`` "
"gates and it will be removed in the future. If you're using the ``u0`` "
"gate in your circuit you should update your calls to use ``iden``. For "
"example, f you were using ``circuit.u0(2)`` in your circuit before that "
"should be updated to be::"
msgstr ""

#: ../../release_notes.rst:6924
msgid "instead."
msgstr ""

#: ../../release_notes.rst:6926
msgid ""
"The ``qiskit.pulse.DeviceSpecification`` class is deprecated now. Instead"
" you should use ``qiskit.pulse.PulseChannelSpec``."
msgstr ""

#: ../../release_notes.rst:6929
msgid ""
"Accessing a ``qiskit.circuit.Qubit``, ``qiskit.circuit.Clbit``, or "
"``qiskit.circuit.Bit`` class by index is deprecated (for compatibility "
"with the ``(register, index)`` tuples that these classes replaced). "
"Instead you should use the ``register`` and ``index`` attributes."
msgstr ""

#: ../../release_notes.rst:6934
msgid ""
"Passing in a bit to the ``qiskit.QuantumCircuit`` method ``append`` as a "
"tuple ``(register, index)`` is deprecated. Instead bit objects should be "
"used directly."
msgstr ""

#: ../../release_notes.rst:6938
msgid ""
"Accessing the elements of a ``qiskit.transpiler.Layout`` object with a "
"tuple ``(register, index)`` is deprecated. Instead a bit object should be"
" used directly."
msgstr ""

#: ../../release_notes.rst:6942
msgid ""
"The ``qiskit.transpiler.Layout`` constructor method "
"``qiskit.transpiler.Layout.from_tuplelist()`` is deprecated. Instead the "
"constructor ``qiskit.transpiler.Layout.from_qubit_list()`` should be "
"used."
msgstr ""

#: ../../release_notes.rst:6946
msgid ""
"The module ``qiskit.pulse.ops`` has been deprecated. All the functions it"
" provided:"
msgstr ""

#: ../../release_notes.rst:6949
msgid "``union``"
msgstr ""

#: ../../release_notes.rst:6950
msgid "``flatten``"
msgstr ""

#: ../../release_notes.rst:6951
msgid "``shift``"
msgstr ""

#: ../../release_notes.rst:6952
msgid "``insert``"
msgstr ""

#: ../../release_notes.rst:6953
msgid "``append``"
msgstr ""

#: ../../release_notes.rst:6955
msgid ""
"have equivalent methods available directly on the "
"``qiskit.pulse.Schedule`` and ``qiskit.pulse.Instruction`` classes. Those"
" methods should be used instead."
msgstr ""

#: ../../release_notes.rst:6959
msgid ""
"The ``qiskit.qasm.Qasm`` method ``get_tokens()`` is deprecated. Instead "
"you should use the ``generate_tokens()`` method."
msgstr ""

#: ../../release_notes.rst:6962
msgid ""
"The ``qiskit.qasm.qasmparser.QasmParser`` method ``get_tokens()`` is "
"deprecated. Instead you should use the ``read_tokens()`` method."
msgstr ""

#: ../../release_notes.rst:6965
msgid ""
"The ``as_dict()`` method for the Qobj class has been deprecated and will "
"be removed in the future. You should replace calls to it with "
"``to_dict()`` instead."
msgstr ""

#: ../../release_notes.rst:6975
msgid ""
"The definition of the ``CU3Gate`` has been changed to be equivalent to "
"the canonical definition of a controlled ``U3Gate``."
msgstr ""

#: ../../release_notes.rst:6978
msgid ""
"The handling of layout in the pass manager has been standardized. This "
"fixes several reported issues with handling layout. The "
"``initial_layout`` kwarg parameter on ``qiskit.compiler.transpile()`` and"
" ``qiskit.execute()`` will now lay out your qubits from the circuit onto "
"the desired qubits on the device when transpiling circuits."
msgstr ""

#: ../../release_notes.rst:6984
msgid ""
"Support for n-qubit unitaries was added to the BasicAer simulator and "
"``unitary`` (arbitrary unitary gates) was added to the set of basis gates"
" for the simulators"
msgstr ""

#: ../../release_notes.rst:6988
msgid ""
"The ``qiskit.visualization.plost_state_qsphere()`` has been updated to "
"fix several issues with it. Now output Q Sphere visualization will be "
"correctly generated and the following aspects have been updated:"
msgstr ""

#: ../../release_notes.rst:6992
msgid "All complementary basis states are antipodal"
msgstr ""

#: ../../release_notes.rst:6993
msgid "Phase is indicated by color of line and marker on sphere's surface"
msgstr ""

#: ../../release_notes.rst:6996
msgid "Probability is indicated by translucency of line and volume of marker on"
msgstr ""

#: ../../release_notes.rst:6995
msgid "sphere's surface"
msgstr ""

#: ../../release_notes.rst:7003
msgid ""
"The default PassManager for ``qiskit.compiler.transpile()`` and "
"``qiskit.execute()`` has been changed to optimization level 1 pass "
"manager defined at "
"``qiskit.transpile.preset_passmanagers.level1_pass_manager``."
msgstr ""

#: ../../release_notes.rst:7007
msgid ""
"All the circuit drawer backends now will express gate parameters in a "
"circuit as common fractions of pi in the output visualization. If the "
"value of a parameter can be expressed as a fraction of pi that will be "
"used instead of the numeric equivalent."
msgstr ""

#: ../../release_notes.rst:7012
msgid ""
"When using ``qiskit.assembler.assemble_schedules()`` if you do not "
"provide the number of memory_slots to use the number will be inferred "
"based on the number of acquisitions in the input schedules."
msgstr ""

#: ../../release_notes.rst:7016
msgid ""
"The deprecation warning on the ``qiskit.dagcircuit.DAGCircuit`` property "
"``node_counter`` has been removed. The behavior change being warned about"
" was put into effect when the warning was added, so warning that it had "
"changed served no purpose."
msgstr ""

#: ../../release_notes.rst:7021
msgid ""
"Calls to ``PassManager.run()`` now will emit python logging messages at "
"the INFO level for each pass execution. These messages will include the "
"Pass name and the total execution time of the pass. Python's standard "
"logging was used because it allows Qiskit-Terra's logging to integrate in"
" a standard way with other applications and libraries. All logging for "
"the transpiler occurs under the ``qiskit.transpiler`` namespace, as used "
"by ``logging.getLogger('qiskit.transpiler``). For example, to turn on "
"DEBUG level logging for the transpiler you can run::"
msgstr ""

#: ../../release_notes.rst:7035
msgid ""
"which will set the log level for the transpiler to DEBUG and configure "
"those messages to be printed to stderr."
msgstr ""

#: ../../release_notes.rst:7040
msgid ""
"There's a new high-performance Density Matrix Simulator that can be used "
"in conjunction with our noise models, to better simulate real world "
"scenarios."
msgstr ""

#: ../../release_notes.rst:7042
msgid ""
"We have added a Matrix Product State (MPS) simulator. MPS allows for "
"efficient simulation of several classes of quantum circuits, even under "
"presence of strong correlations and highly entangled states. For cases "
"amenable to MPS, circuits with several hundred qubits and more can be "
"exactly simulated, e.g., for the purpose of obtaining expectation values "
"of observables."
msgstr ""

#: ../../release_notes.rst:7047
msgid "Snapshots can be performed in all of our simulators."
msgstr ""

#: ../../release_notes.rst:7048
msgid ""
"Now we can measure sampling circuits with read-out errors too, not only "
"ideal circuits."
msgstr ""

#: ../../release_notes.rst:7050
msgid "We have increased some circuit optimizations with noise presence."
msgstr ""

#: ../../release_notes.rst:7051
msgid "A better 2-qubit error approximations have been included."
msgstr ""

#: ../../release_notes.rst:7052
msgid ""
"Included some tools for making certain noisy simulations easier to craft "
"and faster to simulate."
msgstr ""

#: ../../release_notes.rst:7054
msgid ""
"Increased performance with simulations that require less floating point "
"numerical precision."
msgstr ""

#: ../../release_notes.rst:7063
msgid ""
"`Logging Module <https://github.com/Qiskit/qiskit-iqx-"
"tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/9_ignis_logging.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:7064
msgid ""
"`Purity RB <https://github.com/Qiskit/qiskit-iqx-"
"tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/5c_purity_rb.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:7065
msgid ""
"`Interleaved RB <https://github.com/Qiskit/qiskit-iqx-"
"tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/5b_interleaved_rb.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:7066
msgid ""
"`Repetition Code for Verification <https://github.com/Qiskit/qiskit-iqx-"
"tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/8_repetition_code.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:7067
msgid "Seed values can now be arbitrarily added to RB (not just in order)"
msgstr ""

#: ../../release_notes.rst:7068
msgid "Support for adding multiple results to measurement mitigation"
msgstr ""

#: ../../release_notes.rst:7069
msgid "RB Fitters now support providing guess values"
msgstr ""

#: ../../release_notes.rst:7074
msgid "Fixed a bug in RB fit error"
msgstr ""

#: ../../release_notes.rst:7075
msgid ""
"Fixed a bug in the characterization fitter when selecting a qubit index "
"to fit"
msgstr ""

#: ../../release_notes.rst:7081
msgid ""
"Measurement mitigation now operates in parallel when applied to multiple "
"results"
msgstr ""

#: ../../release_notes.rst:7083
msgid "Guess values for RB fitters are improved"
msgstr ""

#: ../../release_notes.rst:7091
msgid ""
"Relative-Phase Toffoli gates ``rccx`` (with 2 controls) and ``rcccx`` "
"(with 3 controls)."
msgstr ""

#: ../../release_notes.rst:7093
msgid "Variational form ``RYCRX``"
msgstr ""

#: ../../release_notes.rst:7094
msgid "A new ``'basic-no-ancilla'`` mode to ``mct``."
msgstr ""

#: ../../release_notes.rst:7095
msgid ""
"Multi-controlled rotation gates ``mcrx``, ``mcry``, and ``mcrz`` as a "
"general ``u3`` gate is not supported by graycode implementation"
msgstr ""

#: ../../release_notes.rst:7097
msgid "Chemistry: ROHF open-shell support"
msgstr ""

#: ../../release_notes.rst:7099 ../../release_notes.rst:7106
#: ../../release_notes.rst:7112
msgid "Supported for all drivers: Gaussian16, PyQuante, PySCF and PSI4"
msgstr ""

#: ../../release_notes.rst:7100
msgid ""
"HartreeFock initial state, UCCSD variational form and two qubit reduction"
" for parity mapping now support different alpha and beta particle numbers"
" for open shell support"
msgstr ""

#: ../../release_notes.rst:7104
msgid "Chemistry: UHF open-shell support"
msgstr ""

#: ../../release_notes.rst:7107
msgid ""
"QMolecule extended to include integrals, coefficients etc for separate "
"beta"
msgstr ""

#: ../../release_notes.rst:7109
msgid ""
"Chemistry: QMolecule extended with integrals in atomic orbital basis to "
"facilitate common access to these for experimentation"
msgstr ""

#: ../../release_notes.rst:7114
msgid "Chemistry: Additional PyQuante and PySCF driver configuration"
msgstr ""

#: ../../release_notes.rst:7116
msgid "Convergence tolerance and max convergence iteration controls."
msgstr ""

#: ../../release_notes.rst:7117
msgid "For PySCF initial guess choice"
msgstr ""

#: ../../release_notes.rst:7119
msgid ""
"Chemistry: Processing output added to debug log from PyQuante and PySCF "
"computations (Gaussian16 and PSI4 outputs were already added to debug "
"log)"
msgstr ""

#: ../../release_notes.rst:7121
msgid "Chemistry: Merged qiskit-chemistry into qiskit-aqua"
msgstr ""

#: ../../release_notes.rst:7122
msgid ""
"Add ``MatrixOperator``, ``WeightedPauliOperator`` and "
"``TPBGroupedPauliOperator`` class."
msgstr ""

#: ../../release_notes.rst:7124
msgid ""
"Add ``evolution_instruction`` function to get registerless instruction of"
" time evolution."
msgstr ""

#: ../../release_notes.rst:7126
msgid ""
"Add ``op_converter`` module to unify the place in charge of converting "
"different types of operators."
msgstr ""

#: ../../release_notes.rst:7128
msgid ""
"Add ``Z2Symmetries`` class to encapsulate the Z2 symmetries info and has "
"helper methods for tapering an Operator."
msgstr ""

#: ../../release_notes.rst:7130
msgid ""
"Amplitude Estimation: added maximum likelihood postprocessing and "
"confidence interval computation."
msgstr ""

#: ../../release_notes.rst:7132
msgid ""
"Maximum Likelihood Amplitude Estimation (MLAE): Implemented new algorithm"
" for amplitude estimation based on maximum likelihood estimation, which "
"reduces number of required qubits and circuit depth."
msgstr ""

#: ../../release_notes.rst:7135
msgid ""
"Added (piecewise) linearly and polynomially controlled Pauli-rotation "
"circuits."
msgstr ""

#: ../../release_notes.rst:7137
msgid ""
"Add ``q_equation_of_motion`` to study excited state of a molecule, and "
"add two algorithms to prepare the reference state."
msgstr ""

#: ../../release_notes.rst:7143
msgid ""
"Improve ``mct``'s ``'basic'`` mode by using relative-phase Toffoli gates "
"to build intermediate results."
msgstr ""

#: ../../release_notes.rst:7145
msgid "Adapt to Qiskit Terra's newly introduced ``Qubit`` class."
msgstr ""

#: ../../release_notes.rst:7146
msgid "Prevent ``QPE/IQPE`` from modifying input ``Operator`` objects."
msgstr ""

#: ../../release_notes.rst:7147
msgid ""
"The PyEDA dependency was removed; corresponding oracles' underlying logic"
" operations are now handled by SymPy."
msgstr ""

#: ../../release_notes.rst:7149
msgid ""
"Refactor the ``Operator`` class, each representation has its own class "
"``MatrixOperator``, ``WeightedPauliOperator`` and "
"``TPBGroupedPauliOperator``."
msgstr ""

#: ../../release_notes.rst:7151
msgid ""
"The ``power`` in ``evolution_instruction`` was applied on the theta on "
"the CRZ gate directly, the new version repeats the circuits to implement "
"power."
msgstr ""

#: ../../release_notes.rst:7153
msgid ""
"CircuitCache is OFF by default, and it can be set via environment "
"variable now ``QISKIT_AQUA_CIRCUIT_CACHE``."
msgstr ""

#: ../../release_notes.rst:7159
msgid ""
"A bug where ``TruthTableOracle`` would build incorrect circuits for truth"
" tables with only a single ``1`` value."
msgstr ""

#: ../../release_notes.rst:7161
msgid "A bug caused by ``PyEDA``'s indeterminism."
msgstr ""

#: ../../release_notes.rst:7162
msgid "A bug with ``QPE/IQPE``'s translation and stretch computation."
msgstr ""

#: ../../release_notes.rst:7163
msgid ""
"Chemistry: Bravyi-Kitaev mapping fixed when num qubits was not a power of"
" 2"
msgstr ""

#: ../../release_notes.rst:7164
msgid "Setup ``initial_layout`` in ``QuantumInstance`` via a list."
msgstr ""

#: ../../release_notes.rst:7169
msgid ""
"General multi-controlled rotation gate ``mcu3`` is removed and replaced "
"by multi-controlled rotation gates ``mcrx``, ``mcry``, and ``mcrz``"
msgstr ""

#: ../../release_notes.rst:7174
msgid ""
"The ``Operator`` class is deprecated, in favor of using "
"``MatrixOperator``, ``WeightedPauliOperator`` and "
"``TPBGroupedPauliOperator``."
msgstr ""

#: ../../release_notes.rst:7186
msgid "Qiskit 0.11.1"
msgstr ""

#: ../../release_notes.rst:7188
msgid ""
"We have bumped up Qiskit micro version to 0.11.1 because IBM Q Provider "
"has bumped its micro version as well."
msgstr ""

#: ../../release_notes.rst:7192 ../../release_notes.rst:7230
#: ../../release_notes.rst:7338 ../../release_notes.rst:7380
msgid "Terra 0.8"
msgstr ""

#: ../../release_notes.rst:7197 ../../release_notes.rst:7235
#: ../../release_notes.rst:7343 ../../release_notes.rst:7556
msgid "Aer 0.2"
msgstr ""

#: ../../release_notes.rst:7202 ../../release_notes.rst:7253
#: ../../release_notes.rst:7348 ../../release_notes.rst:7614
#: ../../release_notes.rst:7765
msgid "Ignis 0.1"
msgstr ""

#: ../../release_notes.rst:7207 ../../release_notes.rst:7258
#: ../../release_notes.rst:7353 ../../release_notes.rst:7638
msgid "Aqua 0.5"
msgstr ""

#: ../../release_notes.rst:7209
msgid ""
"``qiskit-aqua`` has been updated to ``0.5.3`` to fix code related to "
"changes in how gates inverses are done."
msgstr ""

#: ../../release_notes.rst:7215
msgid ""
"The ``IBMQProvider`` has been updated to version ``0.3.1`` to fix "
"backward compatibility issues and work with the default 10 job limit in "
"single calls to the IBM Q API v2."
msgstr ""

#: ../../release_notes.rst:7222
msgid "Qiskit 0.11"
msgstr ""

#: ../../release_notes.rst:7224
msgid ""
"We have bumped up Qiskit minor version to 0.11 because IBM Q Provider has"
" bumped up its minor version too. On Aer, we have jumped from 0.2.1 to "
"0.2.3 because there was an issue detected right after releasing 0.2.2 and"
" before Qiskit 0.11 went online."
msgstr ""

#: ../../release_notes.rst:7238
msgid "New features"
msgstr ""

#: ../../release_notes.rst:7240
msgid "Added support for multi-controlled phase gates"
msgstr ""

#: ../../release_notes.rst:7241
msgid "Added optimized anti-diagonal single-qubit gates"
msgstr ""

#: ../../release_notes.rst:7244
msgid "Improvements"
msgstr ""

#: ../../release_notes.rst:7246
msgid ""
"Introduced a technique called Fusion that increments performance of "
"circuit execution Tuned threading strategy to gain performance in most "
"common scenarios."
msgstr ""

#: ../../release_notes.rst:7248
msgid "Some of the already implemented error models have been polished."
msgstr ""

#: ../../release_notes.rst:7265
msgid ""
"The ``IBMQProvider`` has been updated in order to default to use the new "
"`IBM Q Experience v2 <https://quantum-computing.ibm.com>`__. Accessing "
"the legacy IBM Q Experience v1 and QConsole will still be supported "
"during the 0.3.x line until its final deprecation one month from the "
"release. It is encouraged to update to the new IBM Q Experience to take "
"advantage of the new functionality and features."
msgstr ""

#: ../../release_notes.rst:7272
msgid "Updating to the new IBM Q Experience v2"
msgstr ""

#: ../../release_notes.rst:7274
msgid ""
"If you have credentials for the legacy IBM Q Experience stored on disk, "
"you can make use of the interactive helper::"
msgstr ""

#: ../../release_notes.rst:7282
msgid ""
"For more complex cases or fine tuning your configuration, the following "
"methods are available:"
msgstr ""

#: ../../release_notes.rst:7285
msgid ""
"the ``IBMQ.delete_accounts()`` can be used for resetting your "
"configuration file."
msgstr ""

#: ../../release_notes.rst:7287
msgid ""
"the ``IBMQ.save_account('MY_TOKEN')`` method can be used for saving your "
"credentials, following the instructions in the `IBM Q Experience v2 "
"<https://quantum-computing.ibm.com>`__ account page."
msgstr ""

#: ../../release_notes.rst:7292
msgid "Updating your programs"
msgstr ""

#: ../../release_notes.rst:7294
msgid ""
"When using the new IBM Q Experience v2 through the provider, access to "
"backends is done via individual ``provider`` instances (as opposed to "
"accessing them directly through the ``qiskit.IBMQ`` object as in previous"
" versions), which allows for more granular control over the project you "
"are using."
msgstr ""

#: ../../release_notes.rst:7299
msgid ""
"You can get a reference to the ``providers`` that you have access to "
"using the ``IBMQ.providers()`` and ``IBMQ.get_provider()`` methods::"
msgstr ""

#: ../../release_notes.rst:7309
msgid ""
"For convenience, ``IBMQ.load_account()`` and ``IBMQ.enable_account()`` "
"will return a provider for the open access project, which is the default "
"in the new IBM Q Experience v2."
msgstr ""

#: ../../release_notes.rst:7313
msgid "For example, the following program in previous versions::"
msgstr ""

#: ../../release_notes.rst:7321
msgid "Would be equivalent to the following program in the current version::"
msgstr ""

#: ../../release_notes.rst:7330
msgid ""
"You can find more information and details in the `IBM Q Provider "
"documentation <https://github.com/Qiskit/qiskit-ibmq-provider>`__."
msgstr ""

#: ../../release_notes.rst:7335
msgid "Qiskit 0.10"
msgstr ""

#: ../../release_notes.rst:7358
msgid "IBM Q Provider 0.2"
msgstr ""

#: ../../release_notes.rst:7363
msgid ""
"The ``IBMQProvider`` supports connecting to the new version of the IBM Q "
"API. Please note support for this version is still experimental "
":pull_ibmq-provider:`78`."
msgstr ""

#: ../../release_notes.rst:7365
msgid "Added support for Circuits through the new API :pull_ibmq-provider:`79`."
msgstr ""

#: ../../release_notes.rst:7371
msgid "Fixed incorrect parsing of some API hub URLs :pull_ibmq-provider:`77`."
msgstr ""

#: ../../release_notes.rst:7372
msgid "Fixed noise model handling for remote simulators :pull_ibmq-provider:`84`."
msgstr ""

#: ../../release_notes.rst:7377
msgid "Qiskit 0.9"
msgstr ""

#: ../../release_notes.rst:7385 ../../release_notes.rst:8156
#: ../../release_notes.rst:8364
msgid "Highlights"
msgstr ""

#: ../../release_notes.rst:7387
msgid ""
"Introduction of the Pulse module under ``qiskit.pulse``, which includes "
"tools for building pulse commands, scheduling them on pulse channels, "
"visualization, and running them on IBM Q devices."
msgstr ""

#: ../../release_notes.rst:7390
msgid ""
"Improved QuantumCircuit and Instruction classes, allowing for the "
"composition of arbitrary sub-circuits into larger circuits, and also for "
"creating parameterized circuits."
msgstr ""

#: ../../release_notes.rst:7393
msgid ""
"A powerful Quantum Info module under ``qiskit.quantum_info``, providing "
"tools to work with operators and channels and to use them inside "
"circuits."
msgstr ""

#: ../../release_notes.rst:7395
msgid ""
"New transpiler optimization passes and access to predefined transpiling "
"routines."
msgstr ""

#: ../../release_notes.rst:7403
msgid ""
"The core ``StochasticSwap`` routine is implemented in `Cython "
"<https://cython.org/>`__."
msgstr ""

#: ../../release_notes.rst:7404
msgid ""
"Added ``QuantumChannel`` classes for manipulating quantum channels and "
"CPTP maps."
msgstr ""

#: ../../release_notes.rst:7406
msgid "Support for parameterized circuits."
msgstr ""

#: ../../release_notes.rst:7407
msgid ""
"The ``PassManager`` interface has been improved and new functions added "
"for easier interaction and usage with custom pass managers."
msgstr ""

#: ../../release_notes.rst:7409
msgid ""
"Preset ``PassManager``\\s are now included which offer a predetermined "
"pipeline of transpiler passes."
msgstr ""

#: ../../release_notes.rst:7411
msgid ""
"User configuration files to let local environments override default "
"values for some functions."
msgstr ""

#: ../../release_notes.rst:7413
msgid ""
"New transpiler passes: ``EnlargeWithAncilla``, ``Unroll2Q``, "
"``NoiseAdaptiveLayout``, ``OptimizeSwapBeforeMeasure``, "
"``RemoveDiagonalGatesBeforeMeasure``, ``CommutativeCancellation``, "
"``Collect2qBlocks``, and ``ConsolidateBlocks``."
msgstr ""

#: ../../release_notes.rst:7420 ../../release_notes.rst:7604
#: ../../release_notes.rst:7627 ../../release_notes.rst:7704
#: ../../release_notes.rst:7826 ../../release_notes.rst:8140
#: ../../release_notes.rst:8178 ../../release_notes.rst:8382
msgid "Compatibility Considerations"
msgstr ""

#: ../../release_notes.rst:7422
msgid ""
"As part of the 0.8 release the following things have been deprecated and "
"will either be removed or changed in a backwards incompatible manner in a"
" future release. While not strictly necessary these are things to adjust "
"for before the 0.9 (unless otherwise noted) release to avoid a breaking "
"change in the future."
msgstr ""

#: ../../release_notes.rst:7427
msgid ""
"The methods prefixed by ``_get`` in the ``DAGCircuit`` object are being "
"renamed without that prefix."
msgstr ""

#: ../../release_notes.rst:7429
msgid ""
"Changed elements in ``couplinglist`` of ``CouplingMap`` from tuples to "
"lists."
msgstr ""

#: ../../release_notes.rst:7430
msgid ""
"Unroller bases must now be explicit, and violation raises an informative "
"``QiskitError``."
msgstr ""

#: ../../release_notes.rst:7432
msgid ""
"The ``qiskit.tools.qcvv`` package is deprecated and will be removed in "
"the in the future. You should migrate to using the Qiskit Ignis which "
"replaces this module."
msgstr ""

#: ../../release_notes.rst:7435
msgid ""
"The ``qiskit.compile()`` function is now deprecated in favor of "
"explicitly using the ``qiskit.compiler.transpile()`` function to "
"transform a circuit, followed by ``qiskit.compiler.assemble()`` to make a"
" Qobj out of it. Instead of ``compile(...)``, use "
"``assemble(transpile(...), ...)``."
msgstr ""

#: ../../release_notes.rst:7439
msgid ""
"``qiskit.converters.qobj_to_circuits()`` has been deprecated and will be "
"removed in a future release. Instead ``qiskit.assembler.disassemble()`` "
"should be used to extract ``QuantumCircuit`` objects from a compiled "
"Qobj."
msgstr ""

#: ../../release_notes.rst:7443
msgid ""
"The ``qiskit.mapper`` namespace has been deprecated. The ``Layout`` and "
"``CouplingMap`` classes can be accessed via ``qiskit.transpiler``."
msgstr ""

#: ../../release_notes.rst:7445
msgid ""
"A few functions in ``qiskit.tools.qi.qi`` have been deprecated and moved "
"to ``qiskit.quantum_info``."
msgstr ""

#: ../../release_notes.rst:7448
msgid ""
"Please note that some backwards incompatible changes have been made "
"during this release. The following notes contain information on how to "
"adapt to these changes."
msgstr ""

#: ../../release_notes.rst:7453
msgid "IBM Q Provider"
msgstr ""

#: ../../release_notes.rst:7455
msgid ""
"The IBM Q provider was previously included in Terra, but it has been "
"split out into a separate package ``qiskit-ibmq-provider``. This will "
"need to be installed, either via pypi with ``pip install qiskit-ibmq-"
"provider`` or from source in order to access ``qiskit.IBMQ`` or "
"``qiskit.providers.ibmq``. If you install qiskit with ``pip install "
"qiskit``, that will automatically install all subpackages of the Qiskit "
"project."
msgstr ""

#: ../../release_notes.rst:7465
msgid "Cython Components"
msgstr ""

#: ../../release_notes.rst:7467
msgid ""
"Starting in the 0.8 release the core stochastic swap routine is now "
"implemented in `Cython <https://cython.org/>`__. This was done to "
"significantly improve the performance of the swapper, however if you "
"build Terra from source or run on a non-x86 or other platform without "
"prebuilt wheels and install from source distribution you'll need to make "
"sure that you have Cython installed prior to installing/building Qiskit "
"Terra. This can easily be done with pip/pypi: ``pip install Cython``."
msgstr ""

#: ../../release_notes.rst:7478
msgid "Compiler Workflow"
msgstr ""

#: ../../release_notes.rst:7480
msgid ""
"The ``qiskit.compile()`` function has been deprecated and replaced by "
"first calling ``qiskit.compiler.transpile()`` to run optimization and "
"mapping on a circuit, and then ``qiskit.compiler.assemble()`` to build a "
"Qobj from that optimized circuit to send to a backend. While this is only"
" a deprecation it will emit a warning if you use the old "
"``qiskit.compile()`` call."
msgstr ""

#: ../../release_notes.rst:7486
msgid "**transpile(), assemble(), execute() parameters**"
msgstr ""

#: ../../release_notes.rst:7488
msgid ""
"These functions are heavily overloaded and accept a wide range of inputs."
" They can handle circuit and pulse inputs. All kwargs except for "
"``backend`` for these functions now also accept lists of the previously "
"accepted types. The ``initial_layout`` kwarg can now be supplied as a "
"both a list and dictionary, e.g. to map a Bell experiment on qubits 13 "
"and 14, you can supply: ``initial_layout=[13, 14]`` or "
"``initial_layout={qr[0]: 13, qr[1]: 14}``"
msgstr ""

#: ../../release_notes.rst:7498
msgid "Qobj"
msgstr ""

#: ../../release_notes.rst:7500
msgid ""
"The Qobj class has been split into two separate subclasses depending on "
"the use case, either ``PulseQobj`` or ``QasmQobj`` for pulse and circuit "
"jobs respectively. If you're interacting with Qobj directly you may need "
"to adjust your usage accordingly."
msgstr ""

#: ../../release_notes.rst:7505
msgid ""
"The ``qiskit.qobj.qobj_to_dict()`` is removed. Instead use the "
"``to_dict()`` method of a Qobj object."
msgstr ""

#: ../../release_notes.rst:7511
msgid "Visualization"
msgstr ""

#: ../../release_notes.rst:7513
msgid ""
"The largest change to the visualization module is it has moved from "
"``qiskit.tools.visualization`` to ``qiskit.visualization``. This was done"
" to indicate that the visualization module is more than just a tool. "
"However, since this interface was declared stable in the 0.7 release the "
"public interface off of ``qiskit.tools.visualization`` will continue to "
"work. That may change in a future release, but it will be deprecated "
"prior to removal if that happens."
msgstr ""

#: ../../release_notes.rst:7520
msgid ""
"The previously deprecated functions, ``plot_circuit()``, "
"``latex_circuit_drawer()``, ``generate_latex_source()``, and "
"``matplotlib_circuit_drawer()`` from ``qiskit.tools.visualization`` have "
"been removed. Instead of these functions, calling "
"``qiskit.visualization.circuit_drawer()`` with the appropriate arguments "
"should be used."
msgstr ""

#: ../../release_notes.rst:7527
msgid ""
"The previously deprecated ``plot_barriers`` and ``reverse_bits`` keys in "
"the ``style`` kwarg dictionary are deprecated, instead the "
"``qiskit.visualization.circuit_drawer()`` kwargs ``plot_barriers`` and "
"``reverse_bits`` should be used."
msgstr ""

#: ../../release_notes.rst:7532
msgid ""
"The Wigner plotting functions ``plot_wigner_function``, "
"``plot_wigner_curve``, ``plot_wigner_plaquette``, and "
"``plot_wigner_data`` previously in the "
"``qiskit.tools.visualization._state_visualization`` module have been "
"removed. They were never exposed through the public stable interface and "
"were not well documented. The code to use this feature can still be "
"accessed through the qiskit-tutorials repository."
msgstr ""

#: ../../release_notes.rst:7542
msgid "Mapper"
msgstr ""

#: ../../release_notes.rst:7544
msgid ""
"The public api from ``qiskit.mapper`` has been moved into "
"``qiskit.transpiler``. While it has only been deprecated in this release,"
" it will be removed in the 0.9 release so updating your usage of "
"``Layout`` and ``CouplingMap`` to import from ``qiskit.transpiler`` "
"instead of ``qiskit.mapper`` before that takes place will avoid any "
"surprises in the future."
msgstr ""

#: ../../release_notes.rst:7561
msgid "Added multiplexer gate :pull_aer:`192`"
msgstr ""

#: ../../release_notes.rst:7562
msgid "Added ``remap_noise_model`` function to ``noise.utils`` :pull_aer:`181`"
msgstr ""

#: ../../release_notes.rst:7563
msgid ""
"Added ``__eq__`` method to ``NoiseModel``, ``QuantumError``, "
"``ReadoutError`` :pull_aer:`181`"
msgstr ""

#: ../../release_notes.rst:7565
msgid "Added support for labelled gates in noise models :pull_aer:`175`"
msgstr ""

#: ../../release_notes.rst:7566
msgid ""
"Added optimized ``mcx``, ``mcy``, ``mcz``, ``mcu1``, ``mcu2``, ``mcu3``, "
"gates to ``QubitVector`` :pull_aer:`124`"
msgstr ""

#: ../../release_notes.rst:7568
msgid "Added optimized controlled-swap gate to ``QubitVector`` :pull_aer:`142`"
msgstr ""

#: ../../release_notes.rst:7569
msgid ""
"Added gate-fusion optimization for ``QasmController``, which is enabled "
"by setting ``fusion_enable=true`` :pull_aer:`136`"
msgstr ""

#: ../../release_notes.rst:7571
msgid "Added better management of failed simulations :pull_aer:`167`"
msgstr ""

#: ../../release_notes.rst:7572
msgid "Added qubits truncate optimization for unused qubits :pull_aer:`164`"
msgstr ""

#: ../../release_notes.rst:7573
msgid ""
"Added ability to disable depolarizing error on device noise model "
":pull_aer:`131`"
msgstr ""

#: ../../release_notes.rst:7575
msgid ""
"Added initialize simulator instruction to ``statevector_state`` "
":pull_aer:`117`, :pull_aer:`137`"
msgstr ""

#: ../../release_notes.rst:7577
msgid "Added coupling maps to simulators :pull_aer:`93`"
msgstr ""

#: ../../release_notes.rst:7578
msgid "Added circuit optimization framework :pull_aer:`83`"
msgstr ""

#: ../../release_notes.rst:7579
msgid "Added benchmarking :pull_aer:`71`, :pull_aer:`177`"
msgstr ""

#: ../../release_notes.rst:7580
msgid "Added wheels support for Debian-like distributions :pull_aer:`69`"
msgstr ""

#: ../../release_notes.rst:7581
msgid "Added autoconfiguration of threads for qasm simulator :pull_aer:`61`"
msgstr ""

#: ../../release_notes.rst:7582
msgid ""
"Added Simulation method based on Stabilizer Rank Decompositions "
":pull_aer:`51`"
msgstr ""

#: ../../release_notes.rst:7583
msgid "Added ``basis_gates`` kwarg to ``NoiseModel`` init :pull_aer:`175`."
msgstr ""

#: ../../release_notes.rst:7584
msgid ""
"Added an optional parameter to ``NoiseModel.as_dict()`` for returning "
"dictionaries that can be serialized using the standard json library "
"directly :pull_aer:`165`"
msgstr ""

#: ../../release_notes.rst:7587
msgid "Refactor thread management :pull_aer:`50`"
msgstr ""

#: ../../release_notes.rst:7588
msgid "Improve noise transformations :pull_aer:`162`"
msgstr ""

#: ../../release_notes.rst:7589
msgid "Improve error reporting :pull_aer:`160`"
msgstr ""

#: ../../release_notes.rst:7590
msgid ""
"Improve efficiency of parallelization with ``max_memory_mb`` a new "
"parameter of ``backend_opts`` :pull_aer:`61`"
msgstr ""

#: ../../release_notes.rst:7592
msgid "Improve u1 performance in ``statevector`` :pull_aer:`123`"
msgstr ""

#: ../../release_notes.rst:7598
msgid ""
"Fixed OpenMP clashing problems on macOS for the Terra add-on "
":pull_aer:`46`"
msgstr ""

#: ../../release_notes.rst:7606
msgid ""
"Deprecated ``\"initial_statevector\"`` backend option for "
"``QasmSimulator`` and ``StatevectorSimulator`` :pull_aer:`185`"
msgstr ""

#: ../../release_notes.rst:7608
msgid ""
"Renamed ``\"chop_threshold\"`` backend option to ``\"zero_threshold\"`` "
"and changed default value to 1e-10 :pull_aer:`185`"
msgstr ""

#: ../../release_notes.rst:7619
msgid "Quantum volume"
msgstr ""

#: ../../release_notes.rst:7620
msgid "Measurement mitigation using tensored calibrations"
msgstr ""

#: ../../release_notes.rst:7621
msgid "Simultaneous RB has the option to align Clifford gates across subsets"
msgstr ""

#: ../../release_notes.rst:7622
msgid ""
"Measurement correction can produce a new calibration for a subset of "
"qubits"
msgstr ""

#: ../../release_notes.rst:7629
msgid ""
"RB writes to the minimal set of classical registers (it used to be "
"Q[i]->C[i]). This change enables measurement correction with RB. Unless "
"users had external analysis code, this will not change outcomes. RB "
"circuits from 0.1 are not compatible with 0.1.1 fitters."
msgstr ""

#: ../../release_notes.rst:7643
msgid "Implementation of the HHL algorithm supporting ``LinearSystemInput``"
msgstr ""

#: ../../release_notes.rst:7644
msgid "Pluggable component ``Eigenvalues`` with variant ``EigQPE``"
msgstr ""

#: ../../release_notes.rst:7645
msgid ""
"Pluggable component ``Reciprocal`` with variants ``LookupRotation`` and "
"``LongDivision``"
msgstr ""

#: ../../release_notes.rst:7647
msgid "Multiple-Controlled U1 and U3 operations ``mcu1`` and ``mcu3``"
msgstr ""

#: ../../release_notes.rst:7648
msgid "Pluggable component ``QFT`` derived from component ``IQFT``"
msgstr ""

#: ../../release_notes.rst:7649
msgid "Summarized the transpiled circuits at the DEBUG logging level"
msgstr ""

#: ../../release_notes.rst:7650
msgid "``QuantumInstance`` accepts ``basis_gates`` and ``coupling_map`` again."
msgstr ""

#: ../../release_notes.rst:7651
msgid ""
"Support to use ``cx`` gate for the entanglement in ``RY`` and ``RYRZ`` "
"variational form (``cz`` is the default choice)"
msgstr ""

#: ../../release_notes.rst:7653
msgid ""
"Support to use arbitrary mixer Hamiltonian in QAOA, allowing use of QAOA "
"in constrained optimization problems [arXiv:1709.03489]"
msgstr ""

#: ../../release_notes.rst:7655
msgid ""
"Added variational algorithm base class ``VQAlgorithm``, implemented by "
"``VQE`` and ``QSVMVariational``"
msgstr ""

#: ../../release_notes.rst:7657
msgid ""
"Added ``ising/docplex.py`` for automatically generating Ising Hamiltonian"
" from optimization models of DOcplex"
msgstr ""

#: ../../release_notes.rst:7659
msgid "Added ``'basic-dirty-ancilla``' mode for ``mct``"
msgstr ""

#: ../../release_notes.rst:7660
msgid "Added ``mcmt`` for Multi-Controlled, Multi-Target gate"
msgstr ""

#: ../../release_notes.rst:7661
msgid ""
"Exposed capabilities to generate circuits from logical AND, OR, DNF "
"(disjunctive normal forms), and CNF (conjunctive normal forms) formulae"
msgstr ""

#: ../../release_notes.rst:7663
msgid ""
"Added the capability to generate circuits from ESOP (exclusive sum of "
"products) formulae with optional optimization based on Quine-McCluskey "
"and ExactCover"
msgstr ""

#: ../../release_notes.rst:7665
msgid ""
"Added ``LogicalExpressionOracle`` for generating oracle circuits from "
"arbitrary Boolean logic expressions (including DIMACS support) with "
"optional optimization capability"
msgstr ""

#: ../../release_notes.rst:7668
msgid ""
"Added ``TruthTableOracle`` for generating oracle circuits from truth-"
"tables with optional optimization capability"
msgstr ""

#: ../../release_notes.rst:7670
msgid ""
"Added ``CustomCircuitOracle`` for generating oracle from user specified "
"circuits"
msgstr ""

#: ../../release_notes.rst:7672
msgid "Added implementation of the Deutsch-Jozsa algorithm"
msgstr ""

#: ../../release_notes.rst:7673
msgid "Added implementation of the Bernstein-Vazirani algorithm"
msgstr ""

#: ../../release_notes.rst:7674
msgid "Added implementation of the Simon's algorithm"
msgstr ""

#: ../../release_notes.rst:7675
msgid "Added implementation of the Shor's algorithm"
msgstr ""

#: ../../release_notes.rst:7676
msgid ""
"Added optional capability for Grover's algorithm to take a custom initial"
" state (as opposed to the default uniform superposition)"
msgstr ""

#: ../../release_notes.rst:7678
msgid ""
"Added capability to create a ``Custom`` initial state using existing "
"circuit"
msgstr ""

#: ../../release_notes.rst:7680
msgid "Added the ADAM (and AMSGRAD) optimization algorithm"
msgstr ""

#: ../../release_notes.rst:7681
msgid ""
"Multivariate distributions added, so uncertainty models now have "
"univariate and multivariate distribution components"
msgstr ""

#: ../../release_notes.rst:7683
msgid ""
"Added option to include or skip the swaps operations for qft and iqft "
"circuit constructions"
msgstr ""

#: ../../release_notes.rst:7685
msgid "Added classical linear system solver ``ExactLSsolver``"
msgstr ""

#: ../../release_notes.rst:7686
msgid ""
"Added parameters ``auto_hermitian`` and ``auto_resize`` to ``HHL`` "
"algorithm to support non-Hermitian and non :math:`2^n` sized matrices by "
"default"
msgstr ""

#: ../../release_notes.rst:7688
msgid ""
"Added another feature map, ``RawFeatureVector``, that directly maps "
"feature vectors to qubits' states for classification"
msgstr ""

#: ../../release_notes.rst:7690
msgid "``SVM_Classical`` can now load models trained by ``QSVM``"
msgstr ""

#: ../../release_notes.rst:7697
msgid ""
"Fixed ``ising/docplex.py`` to correctly multiply constant values in "
"constraints"
msgstr ""

#: ../../release_notes.rst:7698
msgid ""
"Fixed package setup to correctly identify namespace packages using "
"``setuptools.find_namespace_packages``"
msgstr ""

#: ../../release_notes.rst:7706
msgid "``QuantumInstance`` does not take ``memory`` anymore."
msgstr ""

#: ../../release_notes.rst:7707
msgid "Moved command line and GUI to separate repo (``qiskit_aqua_uis``)"
msgstr ""

#: ../../release_notes.rst:7709
msgid ""
"Removed the ``SAT``-specific oracle (now supported by "
"``LogicalExpressionOracle``)"
msgstr ""

#: ../../release_notes.rst:7711
msgid ""
"Changed ``advanced`` mode implementation of ``mct``: using simple ``h`` "
"gates instead of ``ch``, and fixing the old recursion step in "
"``_multicx``"
msgstr ""

#: ../../release_notes.rst:7713
msgid "Components ``random_distributions`` renamed to ``uncertainty_models``"
msgstr ""

#: ../../release_notes.rst:7714
msgid ""
"Reorganized the constructions of various common gates (``ch``, ``cry``, "
"``mcry``, ``mct``, ``mcu1``, ``mcu3``, ``mcmt``, ``logic_and``, and "
"``logic_or``) and circuits (``PhaseEstimationCircuit``, "
"``BooleanLogicCircuits``, ``FourierTransformCircuits``, and "
"``StateVectorCircuits``) under the ``circuits`` directory"
msgstr ""

#: ../../release_notes.rst:7719
msgid ""
"Renamed the algorithm ``QSVMVariational`` to ``VQC``, which stands for "
"Variational Quantum Classifier"
msgstr ""

#: ../../release_notes.rst:7721
msgid "Renamed the algorithm ``QSVMKernel`` to ``QSVM``"
msgstr ""

#: ../../release_notes.rst:7722
msgid "Renamed the class ``SVMInput`` to ``ClassificationInput``"
msgstr ""

#: ../../release_notes.rst:7723
msgid "Renamed problem type ``'svm_classification'`` to ``'classification'``"
msgstr ""

#: ../../release_notes.rst:7724
msgid ""
"Changed the type of ``entangler_map`` used in ``FeatureMap`` and "
"``VariationalForm`` to list of lists"
msgstr ""

#: ../../release_notes.rst:7730
msgid "IBM Q Provider 0.1"
msgstr ""

#: ../../release_notes.rst:7735
msgid ""
"This is the first release as a standalone package. If you are installing "
"Terra standalone you'll also need to install the ``qiskit-ibmq-provider``"
" package with ``pip install qiskit-ibmq-provider`` if you want to use the"
" IBM Q backends."
msgstr ""

#: ../../release_notes.rst:7740
msgid ""
"Support for non-Qobj format jobs has been removed from the provider. "
"You'll have to convert submissions in an older format to Qobj before you "
"can submit."
msgstr ""

#: ../../release_notes.rst:7748
msgid "Qiskit 0.8"
msgstr ""

#: ../../release_notes.rst:7750
msgid ""
"In Qiskit 0.8 we introduced the Qiskit Ignis element. It also includes "
"the Qiskit Terra element 0.7.1 release which contains a bug fix for the "
"BasicAer Python simulator."
msgstr ""

#: ../../release_notes.rst:7755 ../../release_notes.rst:7780
msgid "Terra 0.7"
msgstr ""

#: ../../release_notes.rst:7760 ../../release_notes.rst:8062
msgid "Aer 0.1"
msgstr ""

#: ../../release_notes.rst:7767
msgid "This is the first release of Qiskit Ignis."
msgstr ""

#: ../../release_notes.rst:7773
msgid "Qiskit 0.7"
msgstr ""

#: ../../release_notes.rst:7775
msgid "In Qiskit 0.7 we introduced Qiskit Aer and combined it with Qiskit Terra."
msgstr ""

#: ../../release_notes.rst:7785
msgid ""
"This release includes several new features and many bug fixes. With this "
"release the interfaces for circuit diagram, histogram, bloch vectors, and"
" state visualizations are declared stable. Additionally, this release "
"includes a defined and standardized bit order/endianness throughout all "
"aspects of Qiskit. These are all declared as stable interfaces in this "
"release which won't have breaking changes made moving forward, unless "
"there is appropriate and lengthy deprecation periods warning of any "
"coming changes."
msgstr ""

#: ../../release_notes.rst:7793
msgid "There is also the introduction of the following new features:"
msgstr ""

#: ../../release_notes.rst:7795
msgid "A new ASCII art circuit drawing output mode"
msgstr ""

#: ../../release_notes.rst:7796
msgid ""
"A new circuit drawing interface off of ``QuantumCircuit`` objects that "
"enables calls of ``circuit.draw()`` or ``print(circuit)`` to render a "
"drawing of circuits"
msgstr ""

#: ../../release_notes.rst:7799
msgid "A visualizer for drawing the DAG representation of a circuit"
msgstr ""

#: ../../release_notes.rst:7800
msgid ""
"A new quantum state plot type for hinton diagrams in the local matplotlib"
" based state plots"
msgstr ""

#: ../../release_notes.rst:7802
msgid ""
"2 new constructor methods off the ``QuantumCircuit`` class "
"``from_qasm_str()`` and ``from_qasm_file()`` which let you easily create "
"a circuit object from OpenQASM"
msgstr ""

#: ../../release_notes.rst:7805
msgid ""
"A new function ``plot_bloch_multivector()`` to plot Bloch vectors from a "
"tensored state vector or density matrix"
msgstr ""

#: ../../release_notes.rst:7807
msgid ""
"Per-shot measurement results are available in simulators and select "
"devices. These can be accessed by setting the ``memory`` kwarg to "
"``True`` when calling ``compile()`` or ``execute()`` and then accessed "
"using the ``get_memory()`` method on the ``Result`` object."
msgstr ""

#: ../../release_notes.rst:7811
msgid ""
"A ``qiskit.quantum_info`` module with revamped Pauli objects and methods "
"for working with quantum states"
msgstr ""

#: ../../release_notes.rst:7813
msgid ""
"New transpile passes for circuit analysis and transformation: "
"``CommutationAnalysis``, ``CommutationTransformation``, "
"``CXCancellation``, ``Decompose``, ``Unroll``, ``Optimize1QGates``, "
"``CheckMap``, ``CXDirection``, ``BarrierBeforeFinalMeasurements``"
msgstr ""

#: ../../release_notes.rst:7817
msgid ""
"New alternative swap mapper passes in the transpiler: ``BasicSwap``, "
"``LookaheadSwap``, ``StochasticSwap``"
msgstr ""

#: ../../release_notes.rst:7819
msgid ""
"More advanced transpiler infrastructure with support for analysis passes,"
" transformation passes, a global ``property_set`` for the pass manager, "
"and repeat-until control of passes"
msgstr ""

#: ../../release_notes.rst:7828
msgid ""
"As part of the 0.7 release the following things have been deprecated and "
"will either be removed or changed in a backwards incompatible manner in a"
" future release. While not strictly necessary these are things to adjust "
"for before the next release to avoid a breaking change."
msgstr ""

#: ../../release_notes.rst:7833
msgid ""
"``plot_circuit()``, ``latex_circuit_drawer()``, "
"``generate_latex_source()``, and ``matplotlib_circuit_drawer()`` from "
"qiskit.tools.visualization are deprecated. Instead the "
"``circuit_drawer()`` function from the same module should be used, there "
"are kwarg options to mirror the functionality of all the deprecated "
"functions."
msgstr ""

#: ../../release_notes.rst:7838
msgid ""
"The current default output of ``circuit_drawer()`` (using latex and "
"falling back on python) is deprecated and will be changed to just use the"
" ``text`` output by default in future releases."
msgstr ""

#: ../../release_notes.rst:7841
msgid ""
"The ``qiskit.wrapper.load_qasm_string()`` and "
"``qiskit.wrapper.load_qasm_file()`` functions are deprecated and the "
"``QuantumCircuit.from_qasm_str()`` and "
"``QuantumCircuit.from_qasm_file()`` constructor methods should be used "
"instead."
msgstr ""

#: ../../release_notes.rst:7846
msgid ""
"The ``plot_barriers`` and ``reverse_bits`` keys in the ``style`` kwarg "
"dictionary are deprecated, instead the "
"``qiskit.tools.visualization.circuit_drawer()`` kwargs ``plot_barriers`` "
"and ``reverse_bits`` should be used instead."
msgstr ""

#: ../../release_notes.rst:7850
msgid ""
"The functions ``plot_state()`` and ``iplot_state()`` have been "
"depreciated. Instead the functions ``plot_state_*()`` and "
"``iplot_state_*()`` should be called for the visualization method "
"required."
msgstr ""

#: ../../release_notes.rst:7853
msgid ""
"The ``skip_transpiler`` argument has been deprecated from ``compile()`` "
"and ``execute()``. Instead you can use the ``PassManager`` directly, just"
" set the ``pass_manager`` to a blank ``PassManager`` object with "
"``PassManager()``"
msgstr ""

#: ../../release_notes.rst:7856
msgid ""
"The ``transpile_dag()`` function ``format`` kwarg for emitting different "
"output formats is deprecated, instead you should convert the default "
"output ``DAGCircuit`` object to the desired format."
msgstr ""

#: ../../release_notes.rst:7859
msgid ""
"The unrollers have been deprecated, moving forward only DAG to DAG "
"unrolling will be supported."
msgstr ""

#: ../../release_notes.rst:7862
msgid ""
"Please note that some backwards-incompatible changes have been made "
"during this release. The following notes contain information on how to "
"adapt to these changes."
msgstr ""

#: ../../release_notes.rst:7867
msgid "Changes to Result objects"
msgstr ""

#: ../../release_notes.rst:7869
msgid ""
"As part of the rewrite of the Results object to be more consistent and a "
"stable interface moving forward a few changes have been made to how you "
"access the data stored in the result object. First the ``get_data()`` "
"method has been renamed to just ``data()``. Accompanying that change is a"
" change in the data format returned by the function. It is now returning "
"the raw data from the backends instead of doing any post-processing. For "
"example, in previous versions you could call::"
msgstr ""

#: ../../release_notes.rst:7881
msgid "and that would return the unitary matrix like::"
msgstr ""

#: ../../release_notes.rst:7885
msgid "But now if you call (with the renamed method)::"
msgstr ""

#: ../../release_notes.rst:7889
msgid "it will return something like::"
msgstr ""

#: ../../release_notes.rst:7893
msgid ""
"To get the post processed results in the same format as before the 0.7 "
"release you must use the ``get_counts()``, ``get_statevector()``, and "
"``get_unitary()`` methods on the result object instead of "
"``get_data()['counts']``, ``get_data()['statevector']``, and "
"``get_data()['unitary']`` respectively."
msgstr ""

#: ../../release_notes.rst:7898
msgid ""
"Additionally, support for ``len()`` and indexing on a ``Result`` object "
"has been removed. Instead you should deal with the output from the post "
"processed methods on the Result objects."
msgstr ""

#: ../../release_notes.rst:7902
msgid ""
"Also, the ``get_snapshot()`` and ``get_snapshots()`` methods from the "
"``Result`` class have been removed. Instead you can access the snapshots "
"using ``Result.data()['snapshots']``."
msgstr ""

#: ../../release_notes.rst:7908
msgid "Changes to Visualization"
msgstr ""

#: ../../release_notes.rst:7910
msgid ""
"The largest change made to visualization in the 0.7 release is the "
"removal of Matplotlib and other visualization dependencies from the "
"project requirements. This was done to simplify the requirements and "
"configuration required for installing Qiskit. If you plan to use any "
"visualizations (including all the jupyter magics) except for the "
"``text``, ``latex``, and ``latex_source`` output for the circuit drawer "
"you'll you must manually ensure that the visualization dependencies are "
"installed. You can leverage the optional requirements to the Qiskit Terra"
" package to do this::"
msgstr ""

#: ../../release_notes.rst:7921
msgid ""
"Aside from this there have been changes made to several of the interfaces"
" as part of the stabilization which may have an impact on existing code. "
"The first is the ``basis`` kwarg in the ``circuit_drawer()`` function is "
"no longer accepted. If you were relying on the ``circuit_drawer()`` to "
"adjust the basis gates used in drawing a circuit diagram you will have to"
" do this priort to calling ``circuit_drawer()``. For example::"
msgstr ""

#: ../../release_notes.rst:7931
msgid "will have to be adjusted to be::"
msgstr ""

#: ../../release_notes.rst:7940
msgid ""
"Moving forward the ``circuit_drawer()`` function will be the sole "
"interface for circuit drawing in the visualization module. Prior to the "
"0.7 release there were several other functions which either used "
"different output backends or changed the output for drawing circuits. "
"However, all those other functions have been deprecated and that "
"functionality has been integrated as options on ``circuit_drawer()``."
msgstr ""

#: ../../release_notes.rst:7947
msgid ""
"For the other visualization functions, ``plot_histogram()`` and "
"``plot_state()`` there are also a few changes to check when upgrading. "
"First is the output from these functions has changed, in prior releases "
"these would interactively show the output visualization. However that has"
" changed to instead return a ``matplotlib.Figure`` object. This provides "
"much more flexibility and options to interact with the visualization "
"prior to saving or showing it. This will require adjustment to how these "
"functions are consumed. For example, prior to this release when calling::"
msgstr ""

#: ../../release_notes.rst:7959
msgid ""
"would open up new windows (depending on matplotlib backend) to display "
"the visualization. However starting in the 0.7 you'll have to call "
"``show()`` on the output to mirror this behavior. For example::"
msgstr ""

#: ../../release_notes.rst:7966
msgid "or::"
msgstr ""

#: ../../release_notes.rst:7973
msgid ""
"Note that this is only for when running outside of Jupyter. No adjustment"
" is required inside a Jupyter environment because Jupyter notebooks "
"natively understand how to render ``matplotlib.Figure`` objects."
msgstr ""

#: ../../release_notes.rst:7977
msgid ""
"However, returning the Figure object provides additional flexibility for "
"dealing with the output. For example instead of just showing the figure "
"you can now directly save it to a file by leveraging the ``savefig()`` "
"method. For example::"
msgstr ""

#: ../../release_notes.rst:7987
msgid ""
"The other key aspect which has changed with these functions is when "
"running under jupyter. In the 0.6 release ``plot_state()`` and "
"``plot_histogram()`` when running under jupyter the default behavior was "
"to use the interactive Javascript plots if the externally hosted "
"Javascript library for rendering the visualization was reachable over the"
" network. If not it would just use the matplotlib version. However in the"
" 0.7 release this no longer the case, and separate functions for the "
"interactive plots, ``iplot_state()`` and ``iplot_histogram()`` are to be "
"used instead. ``plot_state()`` and ``plot_histogram()`` always use the "
"matplotlib versions."
msgstr ""

#: ../../release_notes.rst:7997
msgid ""
"Additionally, starting in this release the ``plot_state()`` function is "
"deprecated in favor of calling individual methods for each method of "
"plotting a quantum state. While the ``plot_state()`` function will "
"continue to work until the 0.9 release, it will emit a warning each time "
"it is used. The"
msgstr ""

#: ../../release_notes.rst:8013
msgid ""
"The same is true for the interactive JS equivalent, ``iplot_state()``. "
"The function names are all the same, just with a prepended `i` for each "
"function. For example, ``iplot_state(rho, method='paulivec')`` is "
"``iplot_state_paulivec(rho)``."
msgstr ""

#: ../../release_notes.rst:8019
msgid "Changes to Backends"
msgstr ""

#: ../../release_notes.rst:8021
msgid ""
"With the improvements made in the 0.7 release there are a few things "
"related to backends to keep in mind when upgrading. The biggest change is"
" the restructuring of the provider instances in the root  ``qiskit``` "
"namespace. The ``Aer`` provider is not installed by default and requires "
"the installation of the ``qiskit-aer`` package. This package contains the"
" new high performance fully featured simulator. If you installed via "
"``pip install qiskit`` you'll already have this installed. The python "
"simulators are now available under ``qiskit.BasicAer`` and the old C++ "
"simulators are available with ``qiskit.LegacySimulators``. This also "
"means that the implicit fallback to python based simulators when the C++ "
"simulators are not found doesn't exist anymore. If you ask for a local "
"C++ based simulator backend, and it can't be found an exception will be "
"raised instead of just using the python simulator instead."
msgstr ""

#: ../../release_notes.rst:8035
msgid ""
"Additionally the previously deprecation top level functions "
"``register()`` and ``available_backends()`` have been removed. Also, the "
"deprecated ``backend.parameters()`` and ``backend.calibration()`` methods"
" have been removed in favor of ``backend.properties()``. You can refer to"
" the 0.6 release notes section :ref:`backends` for more details on these "
"changes."
msgstr ""

#: ../../release_notes.rst:8041
msgid ""
"The ``backend.jobs()`` and ``backend.retrieve_jobs()`` calls no longer "
"return results from those jobs. Instead you must call the ``result()`` "
"method on the returned jobs objects."
msgstr ""

#: ../../release_notes.rst:8046
msgid "Changes to the compiler, transpiler, and unrollers"
msgstr ""

#: ../../release_notes.rst:8048
msgid ""
"As part of an effort to stabilize the compiler interfaces there have been"
" several changes to be aware of when leveraging the compiler functions. "
"First it is important to note that the ``qiskit.transpiler.transpile()`` "
"function now takes a QuantumCircuit object (or a list of them) and "
"returns a QuantumCircuit object (or a list of them). The DAG processing "
"is done internally now."
msgstr ""

#: ../../release_notes.rst:8055
msgid ""
"You can also easily switch between circuits, DAGs, and Qobj now using the"
" functions in ``qiskit.converters``."
msgstr ""

#: ../../release_notes.rst:8067
msgid "Aer provides three simulator backends:"
msgstr ""

#: ../../release_notes.rst:8069
msgid "``QasmSimulator``: simulate experiments and return measurement outcomes"
msgstr ""

#: ../../release_notes.rst:8070
msgid ""
"``StatevectorSimulator``: return the final statevector for a quantum "
"circuit acting on the all zero state"
msgstr ""

#: ../../release_notes.rst:8072
msgid "``UnitarySimulator``: return the unitary matrix for a quantum circuit"
msgstr ""

#: ../../release_notes.rst:8074
msgid ""
"``noise`` module: contains advanced noise modeling features for the "
"``QasmSimulator``"
msgstr ""

#: ../../release_notes.rst:8077
msgid ""
"``NoiseModel``, ``QuantumError``, ``ReadoutError`` classes for simulating"
" a Qiskit quantum circuit in the presence of errors"
msgstr ""

#: ../../release_notes.rst:8079
msgid ""
"``errors`` submodule including functions for generating ``QuantumError`` "
"objects for the following types of quantum errors: Kraus, mixed unitary, "
"coherent unitary, Pauli, depolarizing, thermal relaxation, amplitude "
"damping, phase damping, combined phase and amplitude damping"
msgstr ""

#: ../../release_notes.rst:8083
msgid ""
"``device`` submodule for automatically generating a noise model based on "
"the ``BackendProperties`` of a device"
msgstr ""

#: ../../release_notes.rst:8086
msgid "``utils`` module:"
msgstr ""

#: ../../release_notes.rst:8088
msgid ""
"``qobj_utils`` provides functions for directly modifying a Qobj to insert"
" special simulator instructions not yet supported through the Qiskit "
"Terra API."
msgstr ""

#: ../../release_notes.rst:8093
msgid "Aqua 0.4"
msgstr ""

#: ../../release_notes.rst:8098
msgid ""
"Programmatic APIs for algorithms and components -- each component can now"
" be instantiated and initialized via a single (non-empty) constructor "
"call"
msgstr ""

#: ../../release_notes.rst:8100
msgid ""
"``QuantumInstance`` API for algorithm/backend decoupling -- "
"``QuantumInstance`` encapsulates a backend and its settings"
msgstr ""

#: ../../release_notes.rst:8102
msgid ""
"Updated documentation and Jupyter Notebooks illustrating the new "
"programmatic APIs"
msgstr ""

#: ../../release_notes.rst:8104
msgid "Transparent parallelization for gradient-based optimizers"
msgstr ""

#: ../../release_notes.rst:8105
msgid "Multiple-Controlled-NOT (cnx) operation"
msgstr ""

#: ../../release_notes.rst:8106
msgid "Pluggable algorithmic component ``RandomDistribution``"
msgstr ""

#: ../../release_notes.rst:8107
msgid ""
"Concrete implementations of ``RandomDistribution``: "
"``BernoulliDistribution``, ``LogNormalDistribution``, "
"``MultivariateDistribution``, ``MultivariateNormalDistribution``, "
"``MultivariateUniformDistribution``, ``NormalDistribution``, "
"``UniformDistribution``, and ``UnivariateDistribution``"
msgstr ""

#: ../../release_notes.rst:8112
msgid ""
"Concrete implementations of ``UncertaintyProblem``: "
"``FixedIncomeExpectedValue``, ``EuropeanCallExpectedValue``, and "
"``EuropeanCallDelta``"
msgstr ""

#: ../../release_notes.rst:8115
msgid "Amplitude Estimation algorithm"
msgstr ""

#: ../../release_notes.rst:8116
msgid ""
"Qiskit Optimization: New Ising models for optimization problems exact "
"cover, set packing, vertex cover, clique, and graph partition"
msgstr ""

#: ../../release_notes.rst:8118
msgid "Qiskit AI:"
msgstr ""

#: ../../release_notes.rst:8120
msgid ""
"New feature maps extending the ``FeatureMap`` pluggable interface: "
"``PauliExpansion`` and ``PauliZExpansion``"
msgstr ""

#: ../../release_notes.rst:8122
msgid "Training model serialization/deserialization mechanism"
msgstr ""

#: ../../release_notes.rst:8124
msgid "Qiskit Finance:"
msgstr ""

#: ../../release_notes.rst:8126
msgid ""
"Amplitude estimation for Bernoulli random variable: illustration of "
"amplitude estimation on a single qubit problem"
msgstr ""

#: ../../release_notes.rst:8128
msgid "Loading of multiple univariate and multivariate random distributions"
msgstr ""

#: ../../release_notes.rst:8129
msgid ""
"European call option: expected value and delta (using univariate "
"distributions)"
msgstr ""

#: ../../release_notes.rst:8131
msgid ""
"Fixed income asset pricing: expected value (using multivariate "
"distributions)"
msgstr ""

#: ../../release_notes.rst:8134
msgid ""
"The Pauli string in ``Operator`` class is aligned with Terra 0.7. Now the"
" order of a n-qubit pauli string is ``q_{n-1}...q{0}`` Thus, the "
"(de)serialier (``save_to_dict`` and ``load_from_dict``) in the "
"``Operator`` class are also changed to adopt the changes of ``Pauli`` "
"class."
msgstr ""

#: ../../release_notes.rst:8142
msgid ""
"``HartreeFock`` component of pluggable type ``InitialState`` moved to "
"Qiskit Chemistry"
msgstr ""

#: ../../release_notes.rst:8144
msgid ""
"``UCCSD`` component of pluggable type ``VariationalForm`` moved to Qiskit"
" Chemistry"
msgstr ""

#: ../../release_notes.rst:8150
msgid "Qiskit 0.6"
msgstr ""

#: ../../release_notes.rst:8153
msgid "Terra 0.6"
msgstr ""

#: ../../release_notes.rst:8158
msgid ""
"This release includes a redesign of internal components centered around a"
" new, formal communication format (Qobj), along with long awaited "
"features to improve the user experience as a whole. The highlights, "
"compared to the 0.5 release, are:"
msgstr ""

#: ../../release_notes.rst:8163
msgid ""
"Improvements for inter-operability (based on the Qobj specification) and "
"extensibility (facilities for extending Qiskit with new backends in a "
"seamless way)"
msgstr ""

#: ../../release_notes.rst:8166
msgid ""
"New options for handling credentials and authentication for the IBM Q "
"backends, aimed at simplifying the process and supporting automatic "
"loading of user credentials"
msgstr ""

#: ../../release_notes.rst:8169
msgid ""
"A revamp of the visualization utilities: stylish interactive "
"visualizations are now available for Jupyter users, along with "
"refinements for the circuit drawer (including a matplotlib-based version)"
msgstr ""

#: ../../release_notes.rst:8172
msgid ""
"Performance improvements centered around circuit transpilation: the basis"
" for a more flexible and modular architecture have been set, including "
"parallelization of the circuit compilation and numerous optimizations"
msgstr ""

#: ../../release_notes.rst:8180
msgid ""
"Please note that some backwards-incompatible changes have been introduced"
" during this release -- the following notes contain information on how to"
" adapt to the new changes."
msgstr ""

#: ../../release_notes.rst:8185
msgid "Removal of ``QuantumProgram``"
msgstr ""

#: ../../release_notes.rst:8187
msgid ""
"As hinted during the 0.5 release, the deprecation of the  "
"``QuantumProgram`` class has now been completed and is no longer "
"available, in favor of working with the individual components "
"(:class:`~qiskit.backends.basejob.BaseJob`, "
":class:`~qiskit._quantumcircuit.QuantumCircuit`, "
":class:`~qiskit._classicalregister.ClassicalRegister`, "
":class:`~qiskit._quantumregister.QuantumRegister`, :mod:`~qiskit`) "
"directly."
msgstr ""

#: ../../release_notes.rst:8195
msgid ""
"Please check the :ref:`0.5 release notes <quantum-program-0-5>` and the "
"examples for details about the transition::"
msgstr ""

#: ../../release_notes.rst:8220
msgid "IBM Q Authentication and ``Qconfig.py``"
msgstr ""

#: ../../release_notes.rst:8222
msgid ""
"The managing of credentials for authenticating when using the IBM Q "
"backends has been expanded, and there are new options that can be used "
"for convenience:"
msgstr ""

#: ../../release_notes.rst:8225
msgid ""
"save your credentials in disk once, and automatically load them in future"
" sessions. This provides a one-off mechanism::"
msgstr ""

#: ../../release_notes.rst:8231
msgid ""
"afterwards, your credentials can be automatically loaded from disk by "
"invoking :meth:`~qiskit.backends.ibmq.ibmqprovider.IBMQ.load_accounts`::"
msgstr ""

#: ../../release_notes.rst:8237
msgid ""
"or you can load only specific accounts if you only want to use those in a"
" session::"
msgstr ""

#: ../../release_notes.rst:8241
msgid ""
"use environment variables. If ``QE_TOKEN`` and ``QE_URL`` is set, the "
"``IBMQ.load_accounts()`` call will automatically load the credentials "
"from them."
msgstr ""

#: ../../release_notes.rst:8245
msgid ""
"Additionally, the previous method of having a ``Qconfig.py`` file in the "
"program folder and passing the credentials explicitly is still supported."
msgstr ""

#: ../../release_notes.rst:8252
msgid "Working with backends"
msgstr ""

#: ../../release_notes.rst:8254
msgid ""
"A new mechanism has been introduced in Terra 0.6 as the recommended way "
"for obtaining a backend, allowing for more powerful and unified filtering"
" and integrated with the new credentials system. The previous top-level "
"methods :meth:`~qiskit.wrapper._wrapper.register`, "
":meth:`~qiskit.wrapper._wrapper.available_backends` and "
":meth:`~qiskit.wrapper._wrapper.get_backend` are still supported, but "
"will deprecated in upcoming versions in favor of using the `qiskit.IBMQ` "
"and `qiskit.Aer` objects directly, which allow for more complex "
"filtering."
msgstr ""

#: ../../release_notes.rst:8263
msgid "For example, to list and use a local backend::"
msgstr ""

#: ../../release_notes.rst:8270
msgid "And for listing and using remote backends::"
msgstr ""

#: ../../release_notes.rst:8278
msgid ""
"Please note as well that the names of the local simulators have been "
"simplified. The previous names can still be used, but it is encouraged to"
" use the new, shorter names:"
msgstr ""

#: ../../release_notes.rst:8283 ../../release_notes.rst:8320
msgid "Qiskit Terra 0.5"
msgstr ""

#: ../../release_notes.rst:8285
msgid "'local_qasm_simulator'"
msgstr ""

#: ../../release_notes.rst:8285
msgid "'qasm_simulator'"
msgstr ""

#: ../../release_notes.rst:8286
msgid "'local_statevector_simulator'"
msgstr ""

#: ../../release_notes.rst:8286
msgid "'statevector_simulator'"
msgstr ""

#: ../../release_notes.rst:8287
msgid "'local_unitary_simulator_py'"
msgstr ""

#: ../../release_notes.rst:8287
msgid "'unitary_simulator'"
msgstr ""

#: ../../release_notes.rst:8292
msgid "Backend and Job API changes"
msgstr ""

#: ../../release_notes.rst:8294
msgid ""
"Jobs submitted to IBM Q backends have improved capabilities. It is "
"possible to cancel them and replenish credits (``job.cancel()``), and to "
"retrieve previous jobs executed on a specific backend either by job id "
"(``backend.retrieve_job(job_id)``) or in batch of latest jobs "
"(``backend.jobs(limit)``)"
msgstr ""

#: ../../release_notes.rst:8300
msgid ""
"Properties for checking each individual job status (``queued``, "
"``running``, ``validating``, ``done`` and ``cancelled``) no longer exist."
" If you want to check the job status, use the identity comparison against"
" ``job.status``::"
msgstr ""

#: ../../release_notes.rst:8311
msgid ""
"Please consult the new documentation of the "
":class:`~qiskit.backends.ibmq.ibmqjob.IBMQJob` class to get further "
"insight in how to use the simplified API."
msgstr ""

#: ../../release_notes.rst:8315
msgid ""
"A number of members of :class:`~qiskit.backends.basebackend.BaseBackend` "
"and :class:`~qiskit.backends.basejob.BaseJob` are no longer properties, "
"but methods, and as a result they need to be invoked as functions."
msgstr ""

#: ../../release_notes.rst:8322
msgid "backend.name"
msgstr ""

#: ../../release_notes.rst:8322
msgid "backend.name()"
msgstr ""

#: ../../release_notes.rst:8323
msgid "backend.status"
msgstr ""

#: ../../release_notes.rst:8323
msgid "backend.status()"
msgstr ""

#: ../../release_notes.rst:8324
msgid "backend.configuration"
msgstr ""

#: ../../release_notes.rst:8324
msgid "backend.configuration()"
msgstr ""

#: ../../release_notes.rst:8325
msgid "backend.calibration"
msgstr ""

#: ../../release_notes.rst:8325
msgid "backend.properties()"
msgstr ""

#: ../../release_notes.rst:8326
msgid "backend.parameters"
msgstr ""

#: ../../release_notes.rst:8326
msgid "backend.jobs() backend.retrieve_job(job_id)"
msgstr ""

#: ../../release_notes.rst:8328
msgid "job.status"
msgstr ""

#: ../../release_notes.rst:8328
msgid "job.status()"
msgstr ""

#: ../../release_notes.rst:8329
msgid "job.cancelled"
msgstr ""

#: ../../release_notes.rst:8329
msgid "job.queue_position()"
msgstr ""

#: ../../release_notes.rst:8330
msgid "job.running"
msgstr ""

#: ../../release_notes.rst:8330
msgid "job.cancel()"
msgstr ""

#: ../../release_notes.rst:8331
msgid "job.queued"
msgstr ""

#: ../../release_notes.rst:8332
msgid "job.done"
msgstr ""

#: ../../release_notes.rst:8337
msgid "Better Jupyter tools"
msgstr ""

#: ../../release_notes.rst:8339
msgid ""
"The new release contains improvements to the user experience while using "
"Jupyter notebooks."
msgstr ""

#: ../../release_notes.rst:8342
msgid ""
"First, new interactive visualizations of counts histograms and quantum "
"states are provided: :meth:`~qiskit.tools.visualization.plot_histogram` "
"and :meth:`~qiskit.tools.visualization.plot_state`. These methods will "
"default to the new interactive kind when the environment is Jupyter and "
"internet connection exists."
msgstr ""

#: ../../release_notes.rst:8349
#, python-format
msgid ""
"Secondly, the new release provides Jupyter cell magics for keeping track "
"of the progress of your code. Use ``%%qiskit_job_status`` to keep track "
"of the status of submitted jobs to IBM Q backends. Use "
"``%%qiskit_progress_bar`` to keep track of the progress of "
"compilation/execution."
msgstr ""

#: ../../release_notes.rst:8358
msgid "Qiskit 0.5"
msgstr ""

#: ../../release_notes.rst:8361
msgid "Terra 0.5"
msgstr ""

#: ../../release_notes.rst:8366
msgid ""
"This release brings a number of improvements to Qiskit, both for the user"
" experience and under the hood. Please refer to the full changelog for a "
"detailed description of the changes - the highlights are:"
msgstr ""

#: ../../release_notes.rst:8370
msgid ""
"new ``statevector`` :mod:`simulators <qiskit.backends.local>` and feature"
" and performance improvements to the existing ones (in particular to the "
"C++ simulator), along with a reorganization of how to work with backends "
"focused on extensibility and flexibility (using aliases and backend "
"providers)"
msgstr ""

#: ../../release_notes.rst:8374
msgid ""
"reorganization of the asynchronous features, providing a friendlier "
"interface for running jobs asynchronously via :class:`Job` instances"
msgstr ""

#: ../../release_notes.rst:8376
msgid ""
"numerous improvements and fixes throughout the Terra as a whole, both for"
" convenience of the users (such as allowing anonymous registers) and for "
"enhanced functionality (such as improved plotting of circuits)"
msgstr ""

#: ../../release_notes.rst:8384
msgid ""
"Please note that several backwards-incompatible changes have been "
"introduced during this release as a result of the ongoing development. "
"While some of these features will continue to be supported during a "
"period of time before being fully deprecated, it is recommended to update"
" your programs in order to prepare for the new versions and take "
"advantage of the new functionality."
msgstr ""

#: ../../release_notes.rst:8394
msgid "``QuantumProgram`` changes"
msgstr ""

#: ../../release_notes.rst:8396
msgid ""
"Several methods of the :class:`~qiskit.QuantumProgram` class are on their"
" way to being deprecated:"
msgstr ""

#: ../../release_notes.rst:8399
msgid "methods for interacting **with the backends and the API**:"
msgstr ""

#: ../../release_notes.rst:8401
msgid ""
"The recommended way for opening a connection to the IBM Q API and for "
"using the backends is through the top-level functions directly instead of"
" the ``QuantumProgram`` methods. In particular, the "
":func:`qiskit.register` method provides the equivalent of the previous "
":func:`qiskit.QuantumProgram.set_api` call. In a similar vein, there is a"
" new :func:`qiskit.available_backends`, :func:`qiskit.get_backend` and "
"related functions for querying the available backends directly. For "
"example, the following snippet for version 0.4::"
msgstr ""

#: ../../release_notes.rst:8418 ../../release_notes.rst:8436
msgid "would be equivalent to the following snippet for version 0.5::"
msgstr ""

#: ../../release_notes.rst:8427
msgid "methods for **compiling and executing programs**:"
msgstr ""

#: ../../release_notes.rst:8429
msgid ""
"The top-level functions now also provide equivalents for the "
":func:`qiskit.QuantumProgram.compile` and "
":func:`qiskit.QuantumProgram.execute` methods. For example, the following"
" snippet from version 0.4::"
msgstr ""

#: ../../release_notes.rst:8442
msgid ""
"In general, from version 0.5 onwards we encourage to try to make use of "
"the individual objects and classes directly instead of relying on "
"``QuantumProgram``. For example, a :class:`~qiskit.QuantumCircuit` can be"
" instantiated and constructed by appending "
":class:`~qiskit.QuantumRegister`, :class:`~qiskit.ClassicalRegister`, and"
" gates directly. Please check the update example in the Quickstart "
"section, or the ``using_qiskit_core_level_0.py`` and "
"``using_qiskit_core_level_1.py`` examples on the main repository."
msgstr ""

#: ../../release_notes.rst:8452
msgid "Backend name changes"
msgstr ""

#: ../../release_notes.rst:8454
msgid ""
"In order to provide a more extensible framework for backends, there have "
"been some design changes accordingly:"
msgstr ""

#: ../../release_notes.rst:8457
msgid "**local simulator names**"
msgstr ""

#: ../../release_notes.rst:8459
msgid ""
"The names of the local simulators have been homogenized in order to "
"follow the same pattern: "
"``PROVIDERNAME_TYPE_simulator_LANGUAGEORPROJECT`` - for example, the C++ "
"simulator previously named ``local_qiskit_simulator`` is now "
"``local_qasm_simulator_cpp``. An overview of the current simulators:"
msgstr ""

#: ../../release_notes.rst:8465
msgid ""
"``QASM`` simulator is supposed to be like an experiment. You apply a "
"circuit on some qubits, and observe measurement results - and you repeat "
"for many shots to get a histogram of counts via ``result.get_counts()``."
msgstr ""

#: ../../release_notes.rst:8468
msgid ""
"``Statevector`` simulator is to get the full statevector (:math:`2^n` "
"amplitudes) after evolving the zero state through the circuit, and can be"
" obtained via ``result.get_statevector()``."
msgstr ""

#: ../../release_notes.rst:8471
msgid ""
"``Unitary`` simulator is to get the unitary matrix equivalent of the "
"circuit, returned via ``result.get_unitary()``."
msgstr ""

#: ../../release_notes.rst:8473
msgid ""
"In addition, you can get intermediate states from a simulator by applying"
" a ``snapshot(slot)`` instruction at various spots in the circuit. This "
"will save the current state of the simulator in a given slot, which can "
"later be retrieved via ``result.get_snapshot(slot)``."
msgstr ""

#: ../../release_notes.rst:8478
msgid "**backend aliases**:"
msgstr ""

#: ../../release_notes.rst:8480
msgid ""
"The SDK now provides an \"alias\" system that allows for automatically "
"using the most performant simulator of a specific type, if it is "
"available in your system. For example, with the following snippet::"
msgstr ""

#: ../../release_notes.rst:8488
msgid ""
"the backend will be the C++ statevector simulator if available, falling "
"back to the Python statevector simulator if not present."
msgstr ""

#: ../../release_notes.rst:8492
msgid "More flexible names and parameters"
msgstr ""

#: ../../release_notes.rst:8494
msgid ""
"Several functions of the SDK have been made more flexible and user-"
"friendly:"
msgstr ""

#: ../../release_notes.rst:8496
msgid "**automatic circuit and register names**"
msgstr ""

#: ../../release_notes.rst:8498
msgid ""
":class:`qiskit.ClassicalRegister`, :class:`qiskit.QuantumRegister` and "
":class:`qiskit.QuantumCircuit` can now be instantiated without explicitly"
" giving them a name - a new autonaming feature will automatically assign "
"them an identifier::"
msgstr ""

#: ../../release_notes.rst:8505
msgid ""
"Please note as well that the order of the parameters have been swapped "
"``QuantumRegister(size, name)``."
msgstr ""

#: ../../release_notes.rst:8508
msgid "**methods accepting names or instances**"
msgstr ""

#: ../../release_notes.rst:8510
msgid ""
"In combination with the autonaming changes, several methods such as "
":func:`qiskit.Result.get_data` now accept both names and instances for "
"convenience. For example, when retrieving the results for a job that has "
"a single circuit such as::"
msgstr ""

#: ../../release_notes.rst:8519
msgid "The following calls are equivalent::"
msgstr ""

