# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2023, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-30 13:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../getting_started.rst:5
msgid "Getting started"
msgstr ""

#: ../../getting_started.rst:10
msgid "Installation"
msgstr ""

#: ../../getting_started.rst:12
msgid ""
"Let's get started using Qiskit!  The first thing to do is choose how "
"you're going to run and install the packages.  There are three main ways "
"to do this:"
msgstr ""

#: ../../getting_started.rst
msgid "Start locally"
msgstr ""

#: ../../getting_started.rst:19
msgid ""
"Qiskit supports Python 3.7 or later. However, both Python and Qiskit are "
"evolving ecosystems, and sometimes when new releases occur in one or the "
"other, there can be problems with compatibility."
msgstr ""

#: ../../getting_started.rst:23
msgid ""
"You will need to `download Python "
"<https://wiki.python.org/moin/BeginnersGuide/Download>`__ on your local "
"system to get started. `Jupyter <https://jupyter.org/install>`__ is "
"recommended for interacting with Qiskit."
msgstr ""

#: ../../getting_started.rst:27
msgid ""
"We recommend using `Python virtual environments "
"<https://docs.python.org/3.10/tutorial/venv.html>`__ to cleanly separate "
"Qiskit from other applications and improve your experience."
msgstr ""

#: ../../getting_started.rst:30
msgid "Create a minimal environment with only Python installed in it."
msgstr ""

#: ../../getting_started.rst:36
msgid "Activate your new environment."
msgstr ""

#: ../../getting_started.rst:43
msgid "Note: if you are using Windows, use the following commands in PowerShell."
msgstr ""

#: ../../getting_started.rst:51
msgid "Next, install the Qiskit package."
msgstr ""

#: ../../getting_started.rst:57
msgid ""
"If the packages were installed correctly, you can run ``pip list`` to see"
" the active packages in your virtual environment."
msgstr ""

#: ../../getting_started.rst:60
msgid ""
"If you intend to use visualization functionality or Jupyter notebooks it "
"is recommended to install Qiskit with the extra ``visualization`` "
"support:"
msgstr ""

#: ../../getting_started.rst:67
msgid ""
"It is worth pointing out that if you're a zsh user (which is the default "
"shell on newer versions of macOS), you'll need to put "
"``qiskit[visualization]`` in quotes:"
msgstr ""

#: ../../getting_started.rst
msgid "Start on the cloud"
msgstr ""

#: ../../getting_started.rst:76
msgid ""
"The following cloud vendors have Qiskit pre-installed in their "
"environments:"
msgstr ""

#: ../../getting_started.rst
msgid "Install from source"
msgstr ""

#: ../../getting_started.rst:108
msgid ""
"Installing the elements from source allows you to access the most "
"recently updated version of Qiskit instead of using the version in the "
"Python Package Index (PyPI) repository. This will give you the ability to"
" inspect and extend the latest version of the Qiskit code more "
"efficiently."
msgstr ""

#: ../../getting_started.rst:113
msgid ""
"When installing the elements and components from source, by default their"
" ``development`` version (which corresponds to the ``master`` git branch)"
" will be used, as opposed to the ``stable`` version (which contains the "
"same codebase as the published ``pip`` packages). Since the "
"``development`` versions of an element or component usually include new "
"features and changes, they generally require using the ``development`` "
"version of the rest of the items as well."
msgstr ""

#: ../../getting_started.rst:122
msgid ""
"The Terra and Aer packages both require a compiler to build from source "
"before you can install. Ignis, Aqua, and the IBM Quantum Provider backend"
" do not require a compiler."
msgstr ""

#: ../../getting_started.rst:126
msgid ""
"Installing elements from source requires the following order of "
"installation to prevent installing versions of elements that may be lower"
" than those desired if the ``pip`` version is behind the source versions:"
msgstr ""

#: ../../getting_started.rst:130
msgid ":ref:`qiskit-terra <install-qiskit-terra>`"
msgstr ""

#: ../../getting_started.rst:131
msgid ":ref:`qiskit-aer <install-qiskit-aer>`"
msgstr ""

#: ../../getting_started.rst:132
msgid ""
":ref:`qiskit-ibmq-provider <install-qiskit-ibmq-provider>` (if you want "
"to connect to the IBM Quantum devices or online simulator)"
msgstr ""

#: ../../getting_started.rst:136
msgid ""
"To work with several components and elements simultaneously, use the "
"following steps for each element."
msgstr ""

#: ../../getting_started.rst:141
msgid ""
"Due to the use of namespace packaging in Python, care must be taken in "
"how you install packages. If you're planning to install any element from "
"source, do not use the ``qiskit`` meta-package. Also, follow this guide "
"and use a separate virtual environment for development. If you do choose "
"to mix an existing installation with your development, refer to "
"https://github.com/pypa/sample-namespace-packages/blob/master/table.md "
"for the set of combinations of installation methods that work together."
msgstr ""

#: ../../getting_started.rst:164
msgid ""
"Installing from source requires that you have the Rust compiler on your "
"system. To install the Rust compiler the recommended path is to use "
"rustup, which is a cross-platform Rust installer. To use rustup you can "
"go to:"
msgstr ""

#: ../../getting_started.rst:168
msgid "https://rustup.rs/"
msgstr ""

#: ../../getting_started.rst:170
msgid ""
"which will provide instructions for how to install rust on your platform."
" Besides rustup there are `other installation methods <https://forge"
".rust-lang.org/infra/other-installation-methods.html>`__ available too."
msgstr ""

#: ../../getting_started.rst:174
msgid ""
"Once the Rust compiler is installed, you are ready to install Qiskit "
"Terra."
msgstr ""

#: ../../getting_started.rst:176
msgid "Clone the Terra repository."
msgstr ""

#: ../../getting_started.rst:182
msgid "Cloning the repository creates a local folder called ``qiskit-terra``."
msgstr ""

#: ../../getting_started.rst:188
msgid ""
"If you want to run tests or linting checks, install the developer "
"requirements."
msgstr ""

#: ../../getting_started.rst:194
msgid "Install ``qiskit-terra``."
msgstr ""

#: ../../getting_started.rst:200
msgid ""
"If you want to install it in editable mode, meaning that code changes to "
"the project don't require a reinstall to be applied, you can do this "
"with:"
msgstr ""

#: ../../getting_started.rst:207
msgid ""
"Installing in editable mode will build the compiled extensions in debug "
"mode without optimizations. This will affect the runtime performance of "
"the compiled code. If you'd like to use editable mode and build the "
"compiled code in release with optimizations enabled you can run:"
msgstr ""

#: ../../getting_started.rst:216
msgid ""
"after you run pip and that will rebuild the binary in release mode. If "
"you are working on Rust code in Qiskit you will need to rebuild the "
"extension code every time you make a local change. ``pip install -e .`` "
"will only build the Rust extension when it's called, so any local changes"
" you make to the Rust code after running pip will not be reflected in the"
" installed package unless you rebuild the extension. You can leverage the"
" above ``build_rust`` command to do this (with or without ``--release`` "
"based on whether you want to build in debug mode or release mode)."
msgstr ""

#: ../../getting_started.rst:225
msgid ""
"You can then run the code examples after installing Terra. You can run "
"the example with the following command."
msgstr ""

#: ../../getting_started.rst:235
msgid ""
"If you do not intend to install any other components, qiskit-terra will "
"emit a ``RuntimeWarning`` warning that both qiskit-aer and qiskit-ibmq-"
"provider are not installed. This is done because users commonly intend to"
" use the additional elements, but do not realize they are not installed, "
"or that the installation of either Aer or the IBM Quantum Provider failed"
" for some reason. If you wish to suppress these warnings, add::"
msgstr ""

#: ../../getting_started.rst:247
msgid ""
"before any ``qiskit`` imports in your code. This will suppress the "
"warning about the missing qiskit-aer and qiskit-ibmq-provider, but will "
"continue to display any other warnings from qiskit or other packages."
msgstr ""

#: ../../getting_started.rst:257
msgid "Clone the Aer repository."
msgstr ""

#: ../../getting_started.rst:263
msgid ""
"To install Aer depend on which operating system you are using. Since Aer "
"is a compiled C++ program with a Python interface, there are non-Python "
"dependencies for building the Aer binary which can't be installed "
"universally depending on operating system."
msgstr ""

#: ../../getting_started.rst ../../getting_started.rst:437
msgid "Linux"
msgstr ""

#: ../../getting_started.rst:270
msgid "Install compiler requirements."
msgstr ""

#: ../../getting_started.rst:272
msgid "Building Aer requires a C++ compiler and development headers."
msgstr ""

#: ../../getting_started.rst:274 ../../getting_started.rst:289
msgid "If you're using Fedora or an equivalent Linux distribution, install using:"
msgstr ""

#: ../../getting_started.rst:281 ../../getting_started.rst:296
msgid "For Ubuntu/Debian install it using:"
msgstr ""

#: ../../getting_started.rst:287
msgid "Install OpenBLAS development headers."
msgstr ""

#: ../../getting_started.rst
msgid "macOS"
msgstr ""

#: ../../getting_started.rst:305
msgid "Install dependencies."
msgstr ""

#: ../../getting_started.rst:307
msgid ""
"To use the `Clang <https://clang.llvm.org/>`__ compiler on macOS, you "
"need to install an extra library for supporting `OpenMP "
"<https://www.openmp.org/>`__.  You can use `brew <https://brew.sh/>`__ to"
" install this and other dependencies."
msgstr ""

#: ../../getting_started.rst:315
msgid ""
"Then install a BLAS implementation; `OpenBLAS "
"<https://www.openblas.net/>`__ is the default choice."
msgstr ""

#: ../../getting_started.rst:322
msgid "Next, install ``Xcode Command Line Tools``."
msgstr ""

#: ../../getting_started.rst
msgid "Windows"
msgstr ""

#: ../../getting_started.rst:330
msgid ""
"All dependencies are added as part of the Visual C++ compiler installed "
"above, so no additional setup is needed."
msgstr ""

#: ../../getting_started.rst:334
msgid ""
"Qiskit Aer is a high performance simulator framework for quantum "
"circuits. It provides `several backends <apidoc/aer_provider.html"
"#simulator-backends>`__ to achieve different simulation goals."
msgstr ""

#: ../../getting_started.rst:339
msgid "Build and install qiskit-aer directly"
msgstr ""

#: ../../getting_started.rst:341
msgid ""
"If you have pip <19.0.0 installed and your environment doesn't require a "
"custom build, run:"
msgstr ""

#: ../../getting_started.rst:349
msgid "This will both build the binaries and install Aer."
msgstr ""

#: ../../getting_started.rst:351
msgid ""
"Alternatively, if you have a newer pip installed, or have some custom "
"requirement, you can build a Python wheel manually."
msgstr ""

#: ../../getting_started.rst:359
msgid ""
"If you need to set a custom option during the wheel build, refer to "
":ref:`aer_wheel_build_options`."
msgstr ""

#: ../../getting_started.rst:362
msgid ""
"After you build the Python wheel, it will be stored in the ``dist/`` dir "
"in the Aer repository. The exact version will depend"
msgstr ""

#: ../../getting_started.rst:370
msgid ""
"The exact filename of the output wheel file depends on the current "
"version of Aer under development."
msgstr ""

#: ../../getting_started.rst:379
msgid ""
"The Aer build system uses `scikit-build <https://scikit-"
"build.readthedocs.io/en/latest/index.html>`__ to run the compilation when"
" building it with the Python interface. It acts as an interface for "
"`setuptools <https://setuptools.readthedocs.io/en/latest/>`__ to call "
"`CMake <https://cmake.org/>`__ and compile the binaries for your local "
"system."
msgstr ""

#: ../../getting_started.rst:384
msgid ""
"Due to the complexity of compiling the binaries, you may need to pass "
"options to a certain part of the build process. The way to pass variables"
" is:"
msgstr ""

#: ../../getting_started.rst:391
msgid ""
"where the elements within square brackets `[]` are optional, and "
"``skbuild_opts``, ``cmake_opts``, ``build_tool_opts`` are to be replaced "
"by flags of your choice. A list of *CMake* options is available here: "
"https://cmake.org/cmake/help/v3.6/manual/cmake.1.html#options. For "
"example, you could run something like:"
msgstr ""

#: ../../getting_started.rst:401
msgid ""
"This is passing the flag `-j8` to the underlying build system (which in "
"this case is `Automake <https://www.gnu.org/software/automake/>`__), "
"telling it that you want to build in parallel using 8 processes."
msgstr ""

#: ../../getting_started.rst:405
msgid ""
"For example, a common use case for these flags on linux is to specify a "
"specific version of the C++ compiler to use (normally if the default is "
"too old):"
msgstr ""

#: ../../getting_started.rst:413
msgid ""
"which will tell CMake to use the g++-7 command instead of the default g++"
" when compiling Aer."
msgstr ""

#: ../../getting_started.rst:416
msgid ""
"Another common use case for this, depending on your environment, is that "
"you may need to specify your platform name and turn off static linking."
msgstr ""

#: ../../getting_started.rst:424
msgid ""
"Here ``--plat-name`` is a flag to setuptools, to specify the platform "
"name to use in the package metadata, ``-DSTATIC_LINKING`` is a flag for "
"using CMake to disable static linking, and ``-j8`` is a flag for using "
"Automake to use 8 processes for compilation."
msgstr ""

#: ../../getting_started.rst:429
msgid "A list of common options depending on platform are:"
msgstr ""

#: ../../getting_started.rst:432
msgid "Platform"
msgstr ""

#: ../../getting_started.rst:432
msgid "Tool"
msgstr ""

#: ../../getting_started.rst:432
msgid "Option"
msgstr ""

#: ../../getting_started.rst:432
msgid "Use Case"
msgstr ""

#: ../../getting_started.rst:434
msgid "All"
msgstr ""

#: ../../getting_started.rst:434
msgid "Automake"
msgstr ""

#: ../../getting_started.rst:434
msgid "-j"
msgstr ""

#: ../../getting_started.rst:434
msgid "Followed by a number, sets the number of processes to use for compilation."
msgstr ""

#: ../../getting_started.rst:437 ../../getting_started.rst:444
msgid "CMake"
msgstr ""

#: ../../getting_started.rst:437
msgid "-DCMAKE_CXX_COMPILER"
msgstr ""

#: ../../getting_started.rst:437
msgid ""
"Used to specify a specific C++ compiler; this is often needed if your "
"default g++ is too old."
msgstr ""

#: ../../getting_started.rst:441 ../../getting_started.rst:444
msgid "OSX"
msgstr ""

#: ../../getting_started.rst:441
msgid "setuptools"
msgstr ""

#: ../../getting_started.rst:441
msgid "--plat-name"
msgstr ""

#: ../../getting_started.rst:441
msgid "Used to specify the platform name in the output Python package."
msgstr ""

#: ../../getting_started.rst:444
msgid "-DSTATIC_LINKING"
msgstr ""

#: ../../getting_started.rst:444
msgid "Used to specify whether or not static linking should be used."
msgstr ""

#: ../../getting_started.rst:449
msgid ""
"Some of these options are not platform-specific. These particular "
"platforms are listed because they are commonly used in the environment. "
"Refer to the tool documentation for more information."
msgstr ""

#: ../../getting_started.rst:459
msgid "Clone the qiskit-ibmq-provider repository."
msgstr ""

#: ../../getting_started.rst:465
msgid ""
"Cloning the repository creates a local directory called ``qiskit-ibmq-"
"provider``."
msgstr ""

#: ../../getting_started.rst:471
msgid ""
"If you want to run tests or linting checks, install the developer "
"requirements. This is not required to install or use the qiskit-ibmq-"
"provider package when installing from source."
msgstr ""

#: ../../getting_started.rst:479
msgid "Install qiskit-ibmq-provider."
msgstr ""

#: ../../getting_started.rst:485
msgid ""
"If you want to install it in editable mode, meaning that code changes to "
"the project don't require a reinstall to be applied:"
msgstr ""

#: ../../getting_started.rst:495
msgid "Platform Support"
msgstr ""

#: ../../getting_started.rst:497
msgid ""
"Qiskit strives to support as many platforms as possible, but due to "
"limitations in available testing resources and platform availability, not"
" all platforms can be supported. Platform support for Qiskit is broken "
"into 3 tiers with different levels of support for each tier. For "
"platforms outside these, Qiskit is probably still installable, but it's "
"not tested and you will have to build Qiskit (and likely Qiskit's "
"dependencies) from source."
msgstr ""

#: ../../getting_started.rst:504
msgid ""
"Additionally, Qiskit only supports CPython. Running with other Python "
"interpreters isn't currently supported."
msgstr ""

#: ../../getting_started.rst:508
msgid "Tier 1"
msgstr ""

#: ../../getting_started.rst:510
msgid ""
"Tier 1 supported platforms are fully tested upstream as part of the "
"development processes to ensure any proposed change will function "
"correctly. Pre-compiled binaries are built, tested, and published to PyPI"
" as part of the release process. These platforms are expected to be "
"installable with just a functioning Python environment as all "
"dependencies are available on these platforms."
msgstr ""

#: ../../getting_started.rst:516
msgid "Tier 1 platforms are currently:"
msgstr ""

#: ../../getting_started.rst:518
msgid ""
"Linux x86_64 (distributions compatible with the `manylinux 2014 "
"<https://www.python.org/dev/peps/pep-0599/>`__ packaging specification."
msgstr ""

#: ../../getting_started.rst:521
msgid "macOS x86_64 (10.9 or newer)"
msgstr ""

#: ../../getting_started.rst:522
msgid "Windows 64 bit"
msgstr ""

#: ../../getting_started.rst:525
msgid "Tier 2"
msgstr ""

#: ../../getting_started.rst:527
msgid ""
"Tier 2 platforms are not tested upstream as part of development process. "
"However, pre-compiled binaries are built, tested, and published to PyPI "
"as part of the release process and these packages can be expected to be "
"installed with just a functioning Python environment."
msgstr ""

#: ../../getting_started.rst:532
msgid "Tier 2 platforms are currently:"
msgstr ""

#: ../../getting_started.rst:534
msgid ""
"Linux i686 (distributions compatible with the `manylinux 2014 "
"<https://www.python.org/dev/peps/pep-0599/>`__ packaging specification) "
"for Python < 3.10"
msgstr ""

#: ../../getting_started.rst:537
msgid "Windows 32 bit for Python < 3.10"
msgstr ""

#: ../../getting_started.rst:538
msgid ""
"Linux aarch64 (distributions compatible with the `manylinux 2014 "
"<https://www.python.org/dev/peps/pep-0599/>`__ packaging specification)"
msgstr ""

#: ../../getting_started.rst:543
msgid "Tier 3"
msgstr ""

#: ../../getting_started.rst:545
msgid ""
"Tier 3 platforms are not tested upstream as part of the development "
"process.  Pre-compiled binaries are built and published to PyPI as part "
"of the release process, with no testing at all. They may not be "
"installable with just a functioning Python environment and may require a "
"C/C++ compiler or additional programs to build dependencies from source "
"as part of the installation process. Support for these platforms are best"
" effort only."
msgstr ""

#: ../../getting_started.rst:552
msgid "Tier 3 platforms are currently:"
msgstr ""

#: ../../getting_started.rst:554
msgid ""
"Linux ppc64le (distributions compatible with the `manylinux 2014 "
"<https://www.python.org/dev/peps/pep-0599/>`__ packaging specification)"
msgstr ""

#: ../../getting_started.rst:557
msgid ""
"Linux s390x (distributions compatible with the `manylinux 2014 "
"<https://www.python.org/dev/peps/pep-0599/>`__ packaging specification)"
msgstr ""

#: ../../getting_started.rst:560
msgid "macOS arm64 (10.15 or newer)"
msgstr ""

#: ../../getting_started.rst:561
msgid ""
"Linux i686 (distributions compatible with the `manylinux 2014 "
"<https://www.python.org/dev/peps/pep-0599/>`__ packaging specification) "
"for Python >= 3.10"
msgstr ""

#: ../../getting_started.rst:564
msgid "Windows 32 bit for Python >= 3.10"
msgstr ""

#: ../../getting_started.rst:567
msgid "Ready to get going?..."
msgstr ""

