msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-11 18:45+0000\n"
"PO-Revision-Date: 2020-06-11 16:16\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/2_operators_overview.po\n"
"Language: ja_JP\n"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:9
msgid "Operators"
msgstr "オペレーター"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:39
msgid "Operator Class"
msgstr "Operator クラス"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:41
msgid "The ``Operator`` class is used in Qiskit to represent matrix operators acting on a quantum system. It has several methods to build composite operators using tensor products of smaller operators, and to compose operators."
msgstr "``Operator`` クラスは、量子系に作用する行列演算子を表すために Qiskit で利用されています。小さな演算子のテンソル積を用いて合成演算子の構築や、演算子の合成といったいくつかのメソッドがあります。"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:44
msgid "Creating Operators"
msgstr "Operator の作成"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:46
msgid "The easiest way to create an operator object is to initialize it with a matrix given as a list or a Numpy array. For example, to create a two-qubit Pauli-XX operator:"
msgstr "operator オブジェクト作成のもっとも簡単な方法は、Numpy 配列のリストとして行列を指定し、それで初期化することです。例えば、２量子ビット Pauli-XX 演算子を作成するには："

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:97
msgid "Operator Properties"
msgstr "Operator プロパティ"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:99
msgid "The operator object stores the underlying matrix, and the input and output dimension of subsystems."
msgstr "Operator オブジェクトは配下の行列とサブシステムのインプット、アウトプット次元を保持します。"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:101
msgid "``data``: To access the underly Numpy array, we may use the ``Operator.data`` property."
msgstr "``data``: 配下の Numpy 配列にアクセス。``Operator.data`` プロパティーも使用する。"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:102
msgid "``dims``: To return the total input and output dimension of the operator, we may use the ``Operator.dim`` property. *Note: the output is returned as a tuple ``(input_dim, output_dim)``, which is the reverse of the shape of the underlying matrix.*"
msgstr "``dims``: operator の総インプット、アウトプット次元を返却。``Operator.dim`` プロパティーも利用。*注：アウトプットは、タプル ``(input_dim, output_dim)`` 形式で、配下の行列のシェイプの逆です*"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:181
msgid "Input and Output Dimensions"
msgstr "インプットアウトプット次元"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:183
msgid "The operator class also keeps track of subsystem dimensions, which can be used for composing operators together. These can be accessed using the ``input_dims`` and ``output_dims`` functions."
msgstr "Operator クラスはまたサブシステムの事前も追跡し、operator を合成するときに使われます。これらは、``input_dims`` と ``output_dims`` 関数で取得できます。"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:185
msgid "For :math:`2^N` by :math:`2^M` operators, the input and output dimension will be automatically assumed to be M-qubit and N-qubit:"
msgstr ":math:`2^N` 掛ける :math:`2^M` operatorの場合、インプットとアウトプットの次元は、 M-qubit と N-qubit と自動的に想定されます。"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:229
msgid "If the input matrix is not divisible into qubit subsystems, then it will be stored as a single-qubit operator. For example, if we have a :math:`6\\times6` matrix:"
msgstr "入力の行列が量子ビットサブシステムに分割できない場合には、単一量子ビット operator として保持されます。例えば、 :math:`6\\times6` 行列の場合："

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:273
msgid "The input and output dimension can also be manually specified when initializing a new operator:"
msgstr "インプットとアウトプット次元は新しい operator の初期化時に手動で指定することも出来ます。"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:353
msgid "We can also extract just the input or output dimensions of a subset of subsystems using the ``input_dims`` and ``output_dims`` functions:"
msgstr "``input_dims`` と ``output_dims`` 関数を利用して、サブシステムのサブセットのインプットとアウトプット次元のみを求めることも出来ます。"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:397
msgid "Converting classes to Operators"
msgstr "クラスをオペレーターに変換する"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:399
msgid "Several other classes in Qiskit can be directly converted to an ``Operator`` object using the operator initialization method. For example:"
msgstr "Qiskit の幾つかの他のクラスは、operator の初期化方法を利用して、``Operator`` オブジェクトに変換することができます。例えば："

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:401
msgid "``Pauli`` objects"
msgstr "``Pauli`` オブジェクト"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:402
msgid "``Gate`` and ``Instruction`` objects"
msgstr "``Gate`` と ``Instruction`` オブジェクト"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:403
msgid "``QuantumCircuits`` objects"
msgstr "``QuantumCircuits`` オブジェクト"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:405
msgid "Note that the last point means we can use the ``Operator`` class as a unitary simulator to compute the final unitary matrix for a quantum circuit, without having to call a simulator backend. If the circuit contains any unsupported operations, an exception will be raised. Unsupported operations are: measure, reset, conditional operations, or a gate that does not have a matrix definition or decomposition in terms of gate with matrix definitions."
msgstr "最後の点は、``Operator``クラスにより、量子回路の最終ユニタリ行列の計算のためのユニタリシミュレーターとして使うことができ、シミュレーターのバックエンドを呼び出す必要がないことに着目してください。回路にサポートされない演算子が含まれている場合には、例外が発生します。サポートされていない演算子は： measure、reset、条件付き演算子、行列定義のないゲート、もしくは 行列定義があるゲートだがその分解(decomposition) です。"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:595
msgid "Using Operators in circuits"
msgstr "回路にオペレーターを利用する"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:597
msgid "Unitary ``Operators`` can be directly inserted into a ``QuantumCircuit`` using the ``QuantumCircuit.append`` method. This converts the ``Operator`` into a ``UnitaryGate`` object, which is added to the circuit."
msgstr "ユニタリな ``Operator`` は ``QuantumCircuit.append`` メソッドを利用して ``QuantumCircuit`` に直接追加出来ます。これにより、`Operator`` は ``UnitaryGate`` オブジェクトに変換され、回路に追加されます。"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:599
msgid "If the operator is not unitary, an exception will be raised. This can be checked using the ``Operator.is_unitary()`` function, which will return ``True`` if the operator is unitary and ``False`` otherwise."
msgstr "operator がユニタリでない場合には、例外が発生します。``Operator.is_unitary()`` 関数でチェックができ、operator がユニタリの場合は True、それ以外の場合は False になります。"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:636
msgid "Note that in the above example we initialize the operator from a ``Pauli`` object. However, the ``Pauli`` object may also be directly inserted into the circuit itself and will be converted into a sequence of single-qubit Pauli gates:"
msgstr "上記の例では、``Pauli`` オブジェクトから operator を初期化していることに注目してください。しかしながら、``Pauli`` オブジェクトは回路にそれ自体で直接追加可能であり、この場合単一量子ビットの パウリゲート列として変換されます。"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:745
msgid "Combining Operators"
msgstr "オペレーターを結合する"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:747
msgid "Operators my be combined using several methods."
msgstr "オペレーターはいくつかの方法で結合出来ます。"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:750
msgid "Tensor Product"
msgstr "テンソル積"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:752
msgid "Two operators :math:`A` and :math:`B` may be combined into a tensor product operator :math:`A\\otimes B` using the ``Operator.tensor`` function. Note that if both A and B are single-qubit operators, then ``A.tensor(B)`` = :math:`A\\otimes B` will have the subsystems indexed as matrix B on subsystem 0, and matrix :math:`A` on subsystem 1."
msgstr "２つの operator :math:`A` and :math:`B` は、`Operator.tensor`` 関数を利用して、テンソル積 operator :math:`A\\otimes B` に結合出来ます。A と B の両者が単一量子ビット operator の場合、``A.tensor(B)`` = :math:`A\\otimes B` は 行列 B がサブシステム 0 で、行列A がサブシステム 1となるようにインデックス化されたサブシステムになることに着目してください。"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:804
msgid "Tensor Expansion"
msgstr "テンソル展開"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:806
msgid "A closely related operation is ``Operator.expand``, which acts like a tensor product but in the reverse order. Hence, for two operators :math:`A` and :math:`B` we have ``A.expand(B)`` = :math:`B\\otimes A` where the subsystems indexed as matrix A on subsystem 0, and matrix :math:`B` on subsystem 1."
msgstr "密接に関連する操作として ``Operator.expand`` があり、テンソル積のように振る舞いますが、順番が逆になります。従って、 ２つの operator :math:`A` と :math:`B` により、 ``A.expand(B)`` = :math:`B\\otimes A` とすると、行列 Aがサブシステム 0 で、行列B がサブシステム 1となるようにインデックス化されたサブシステムになります。"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:858
msgid "Composition"
msgstr "コンポジション"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:860
msgid "We can also compose two operators :math:`A` and :math:`B` to implement matrix multiplication using the ``Operator.compose`` method. We have that ``A.compose(B)`` returns the operator with matrix :math:`B.A`:"
msgstr "２つの operator :math:`A`と :math:`B` の掛け算を `Operator.compose`` メソッドを利用して合成出来ます。``A.compose(B)`` の結果として、行列 :math:`B.A` となる operator が返却されます："

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:907
msgid "We can also compose in the reverse order by applying :math:`B` in front of :math:`A` using the ``front`` kwarg of ``compose``: ``A.compose(B, front=True)`` = :math:`A.B`:"
msgstr "``compose`` に ``front`` kwarg を設定すると、:math:`A` の前に、:math:`B` を適用するように逆順の合成ができます：`A.compose(B, front=True)`` = :math:`A.B`："

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:955
msgid "Subsystem Composition"
msgstr "サブシステム合成"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:957
msgid "Note that the previous compose requires that the total output dimension of the first operator :math:`A` is equal to total input dimension of the composed operator :math:`B` (and similarly, the output dimension of :math:`B` must be equal to the input dimension of :math:`A` when composing with ``front=True``)."
msgstr "前の合成は最初の operator :math:`A` の総アウトプット次元が、合成される operator :math:`B` の総インプット次元と同じであるが必要なことに注意してください（同様に、:math:`B`のアウトプット次元と :math:`A` のインプット次元は、``front=True`` で合成される場合、等しくなる必要があります）。"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:959
msgid "We can also compose a smaller operator with a selection of subsystems on a larger operator using the ``qargs`` kwarg of ``compose``, either with or without ``front=True``. In this case, the relevant input and output dimensions of the subsystems being composed must match. *Note that the smaller operator must always be the argument of ``compose`` method.*"
msgstr "大きな operator から ``compose`` の ``qargs`` kwarg を指定して ``front=True`` 設定があるかないかに関わらず、サブシステムを選択し小さな operator を合成できます。この場合、合成される関係するサブシステムのインプット、アウトプット次元は一致する必要があります。*注： 小さな operator は ``compose`` メソッドの引数である必要があります。*"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:961
msgid "For example, to compose a two-qubit gate with a three-qubit Operator:"
msgstr "例えば、３量子ビット Operator から２量子ビットのゲートを合成するには："

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1103
msgid "Linear combinations"
msgstr "線型結合"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1105
msgid "Operators may also be combined using standard linear operators for addition, subtraction and scalar multiplication by complex numbers."
msgstr "また、オペレーターは足し算、引き算、あるいは 複素数でのスカラー掛け算のための標準な線型オペレーターを利用した結合が出来ます。"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1159
msgid "An important point is that while ``tensor``, ``expand`` and ``compose`` will preserve the unitarity of unitary operators, linear combinations will not; hence, adding two unitary operators will, in general, result in a non-unitary operator:"
msgstr "重要な点として、`tensor``、``expand`` 及び ``compose`` はユニタリ operator のユニタリ性を保ちますが、一方 線型結合はそうでないこと、従って２つのユニタリ operator の足し算は、一般的に非ユニタリ operator になります："

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1201
msgid "Implicit Conversion to Operators"
msgstr "オペレーターへの暗黙的変換"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1203
msgid "Note that for all the following methods, if the second object is not already an ``Operator`` object, it will be implicitly converted into one by the method. This means that matrices can be passed in directly without being explicitly converted to an ``Operator`` first. If the conversion is not possible, an exception will be raised."
msgstr "以下の全てのメソッドでは２番目のオブジェクトがまだ ``Operator`` オブジェクトでない場合にはメソッドにより暗黙的に変換されることに注意してください。これが意味するところは、最初に ``Operator`` オブジェクトに明示的に変換しなくても、直接行列を渡せるということです。もし変換が出来ない場合には例外が発生します。"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1250
msgid "Comparison of Operators"
msgstr "オペレーターの比較"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1252
msgid "Operators implement an equality method that can be used to check if two operators are approximately equal."
msgstr "オペレーター には二つの operator が近似的に一致しているかをチェックする equality メソッドがあります。"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1293
msgid "Note that this checks that each matrix element of the operators is approximately equal; two unitaries that differ by a global phase will not be considered equal:"
msgstr "ここではオペレーターの行列要素が近似的に一致しているかをチェックしますが、グローバル位相が異なる２つのユニタリは同じとは見なされないことに注意してください。"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1335
msgid "Process Fidelity"
msgstr "プロセスフィデリティー"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1337
msgid "We may also compare operators using the ``process_fidelity`` function from the *Quantum Information* module. This is an information theoretic quantity for how close two quantum channels are to each other, and in the case of unitary operators it does not depend on global phase."
msgstr "*Quantum Information* モジュールの ``process_fidelity`` 関数を使って operator を比較することも出来ます。これは２つの量子チャネルが情報理論的な量としてどれだけ近いかを示し、ユニタリオペレーターの場合にはグローバル位相に依存しません。"

#: ../../tutorials/circuits_advanced/2_operators_overview.ipynb:1383
msgid "Note that process fidelity is generally only a valid measure of closeness if the input operators are unitary (or CP in the case of quantum channels), and an exception will be raised if the inputs are not CP."
msgstr "プロセスフィデリティーは一般的に入力がユニタリ (あるいは量子チャネルの場合 CP) である場合のみ正確な近似率の計測をしますが、入力が CP でない場合には例外が発生します。"

