msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-28 13:15+0000\n"
"PO-Revision-Date: 2022-07-28 13:50\n"
"Last-Translator: \n"
"Language-Team: Marathi\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: mr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/release_notes.po\n"
"X-Crowdin-File-ID: 9544\n"
"Language: mr_IN\n"

#: ../../release_notes.rst:3
msgid "Release Notes"
msgstr ""

#: ../../release_notes.rst:8
msgid "Version History"
msgstr ""

#: ../../release_notes.rst:10
msgid "This table tracks the meta-package versions and the version of each Qiskit element installed:"
msgstr ""

#: ../../release_notes.rst:12
msgid "**Version History**"
msgstr ""

#: ../../release_notes.rst:16
msgid "For the ``0.7.0``, ``0.7.1``, and ``0.7.2`` meta-package releases the :ref:`versioning_strategy` policy was not formalized yet."
msgstr ""

#: ../../release_notes.rst:22
msgid "Notable Changes"
msgstr ""

#: ../../release_notes.rst:26
msgid "Qiskit 0.37.1"
msgstr ""

#: ../../release_notes.rst:31
msgid "Terra 0.21.1"
msgstr ""

#: ../../release_notes.rst:36 ../../release_notes.rst:930
#: ../../release_notes.rst:1115 ../../release_notes.rst:1156
#: ../../release_notes.rst:1290 ../../release_notes.rst:1399
#: ../../release_notes.rst:1437 ../../release_notes.rst:1546
#: ../../release_notes.rst:3054 ../../release_notes.rst:3310
#: ../../release_notes.rst:3620 ../../release_notes.rst:3689
#: ../../release_notes.rst:3761 ../../release_notes.rst:4164
#: ../../release_notes.rst:4221 ../../release_notes.rst:4373
#: ../../release_notes.rst:6495 ../../release_notes.rst:7052
#: ../../release_notes.rst:7155 ../../release_notes.rst:7187
#: ../../release_notes.rst:7271 ../../release_notes.rst:7300
#: ../../release_notes.rst:7533 ../../release_notes.rst:7638
#: ../../release_notes.rst:7670 ../../release_notes.rst:7717
#: ../../release_notes.rst:8791 ../../release_notes.rst:9163
#: ../../release_notes.rst:9207 ../../release_notes.rst:9239
#: ../../release_notes.rst:9296 ../../release_notes.rst:9413
#: ../../release_notes.rst:9452 ../../release_notes.rst:9561
#: ../../release_notes.rst:9657 ../../release_notes.rst:9722
#: ../../release_notes.rst:11681 ../../release_notes.rst:12327
#: ../../release_notes.rst:12455 ../../release_notes.rst:12567
#: ../../release_notes.rst:12778 ../../release_notes.rst:12856
#: ../../release_notes.rst:12883 ../../release_notes.rst:12914
#: ../../release_notes.rst:12973 ../../release_notes.rst:13064
#: ../../release_notes.rst:13133 ../../release_notes.rst:13166
#: ../../release_notes.rst:13201 ../../release_notes.rst:13249
#: ../../release_notes.rst:13295 ../../release_notes.rst:13372
#: ../../release_notes.rst:14146 ../../release_notes.rst:14448
#: ../../release_notes.rst:14664 ../../release_notes.rst:15130
#: ../../release_notes.rst:15303 ../../release_notes.rst:15325
#: ../../release_notes.rst:16335 ../../release_notes.rst:16692
#: ../../release_notes.rst:16837 ../../release_notes.rst:16910
#: ../../release_notes.rst:17074 ../../release_notes.rst:17129
#: ../../release_notes.rst:17164 ../../release_notes.rst:17201
#: ../../release_notes.rst:17249 ../../release_notes.rst:17348
#: ../../release_notes.rst:17381 ../../release_notes.rst:17670
#: ../../release_notes.rst:17903 ../../release_notes.rst:17950
#: ../../release_notes.rst:19403 ../../release_notes.rst:20240
#: ../../release_notes.rst:20907 ../../release_notes.rst:21440
#: ../../release_notes.rst:22134 ../../release_notes.rst:22233
#: ../../release_notes.rst:22318 ../../release_notes.rst:22530
#: ../../release_notes.rst:22757 ../../release_notes.rst:22856
msgid "Bug Fixes"
msgstr ""

#: ../../release_notes.rst:40
msgid "Fixed an issue in :meth:`.QuantumCircuit.decompose` method when passing in a list of ``Gate`` classes for the ``gates_to_decompose`` argument. If any gates in the circuit had a label set this argument wouldn't be handled correctly and caused the output decomposition to incorrectly skip gates explicitly in the ``gates_to_decompose`` list."
msgstr ""

#: ../../release_notes.rst:47
msgid "Fix :meth:`~.EvolvedOp.to_instruction` which previously tried to create a :class:`~.UnitaryGate` without exponentiating the operator to evolve. Since this operator is generally not unitary, this raised an error (and if the operator would have been unitary by chance, it would not have been the expected result)."
msgstr ""

#: ../../release_notes.rst:52
msgid "Now calling :meth:`~.EvolvedOp.to_instruction` correctly produces a gate that implements the time evolution of the operator it holds::"
msgstr ""

#: ../../release_notes.rst:65
msgid "Fixed an issue with the :func:`~.marginal_distribution` function: when a numpy array was passed in for the ``indices`` argument the function would raise an error. Fixed `#8283 <https://github.com/Qiskit/qiskit-terra/issues/8283>`__"
msgstr ""

#: ../../release_notes.rst:72
msgid "Previously it was not possible to adjoint a :class:`.CircuitStateFn` that has been constructed from a :class:`.VectorStateFn`. That's because the statevector has been converted to a circuit with the :class:`~qiskit.extensions.Initialize` instruction, which is not unitary. This problem is now fixed by instead using the :class:`.StatePreparation` instruction, which can be used since the state is assumed to start out in the all 0 state."
msgstr ""

#: ../../release_notes.rst:78
msgid "For example we can now do::"
msgstr ""

#: ../../release_notes.rst:93
msgid "Fix a bug in the :class:`~.Optimizer` classes where re-constructing a new optimizer instance from a previously exisiting :attr:`~.Optimizer.settings` reset both the new and previous optimizer settings to the defaults. This notably led to a bug if :class:`~.Optimizer` objects were send as input to Qiskit Runtime programs."
msgstr ""

#: ../../release_notes.rst:98
msgid "Now optimizer objects are correctly reconstructed::"
msgstr ""

#: ../../release_notes.rst:108
msgid "Fixed an issue where the ``limit_amplitude`` argument on an individual :class:`~.SymbolicPulse` or :class:`~.Waveform` instance was not properly reflected by parameter validation. In addition, QPY schedule :func:`~qiskit.qpy.dump` has been fixed to correctly store the ``limit_amplitude`` value tied to the instance, rather than saving the global class variable."
msgstr ""

#: ../../release_notes.rst:117
msgid "Fix the pairwise entanglement structure for :class:`~.NLocal` circuits. This led to a bug in the :class:`~.ZZFeatureMap`, where using ``entanglement=\"pairwise\"`` raised an error. Now it correctly produces the desired feature map::"
msgstr ""

#: ../../release_notes.rst:126
msgid "The above prints:"
msgstr ""

#: ../../release_notes.rst:142
msgid "Fixed an issue in handling the global phase of the :class:`~.UCGate` class."
msgstr ""

#: ../../release_notes.rst:145 ../../release_notes.rst:1103
#: ../../release_notes.rst:1220 ../../release_notes.rst:1379
#: ../../release_notes.rst:1418
msgid "Aer 0.10.4"
msgstr ""

#: ../../release_notes.rst:147 ../../release_notes.rst:152
#: ../../release_notes.rst:1105 ../../release_notes.rst:1222
#: ../../release_notes.rst:1243 ../../release_notes.rst:1381
#: ../../release_notes.rst:1386 ../../release_notes.rst:1413
#: ../../release_notes.rst:1497 ../../release_notes.rst:3245
#: ../../release_notes.rst:3250 ../../release_notes.rst:3255
#: ../../release_notes.rst:3665 ../../release_notes.rst:3670
#: ../../release_notes.rst:3679 ../../release_notes.rst:3722
#: ../../release_notes.rst:3727 ../../release_notes.rst:3741
#: ../../release_notes.rst:4154 ../../release_notes.rst:4358
#: ../../release_notes.rst:4363 ../../release_notes.rst:6906
#: ../../release_notes.rst:7027 ../../release_notes.rst:7032
#: ../../release_notes.rst:7037 ../../release_notes.rst:7042
#: ../../release_notes.rst:7065 ../../release_notes.rst:7070
#: ../../release_notes.rst:7075 ../../release_notes.rst:7080
#: ../../release_notes.rst:7167 ../../release_notes.rst:7226
#: ../../release_notes.rst:7231 ../../release_notes.rst:7320
#: ../../release_notes.rst:7325 ../../release_notes.rst:7330
#: ../../release_notes.rst:7335 ../../release_notes.rst:7344
#: ../../release_notes.rst:7614 ../../release_notes.rst:7619
#: ../../release_notes.rst:7624 ../../release_notes.rst:7655
#: ../../release_notes.rst:7660 ../../release_notes.rst:7679
#: ../../release_notes.rst:7773 ../../release_notes.rst:7778
#: ../../release_notes.rst:7783 ../../release_notes.rst:9036
#: ../../release_notes.rst:9041 ../../release_notes.rst:9046
#: ../../release_notes.rst:9145 ../../release_notes.rst:9150
#: ../../release_notes.rst:9155 ../../release_notes.rst:9251
#: ../../release_notes.rst:9256 ../../release_notes.rst:9261
#: ../../release_notes.rst:9266 ../../release_notes.rst:9304
#: ../../release_notes.rst:9309 ../../release_notes.rst:9314
#: ../../release_notes.rst:9512 ../../release_notes.rst:9517
#: ../../release_notes.rst:9522 ../../release_notes.rst:9527
#: ../../release_notes.rst:9536 ../../release_notes.rst:9587
#: ../../release_notes.rst:9592 ../../release_notes.rst:9597
#: ../../release_notes.rst:9607 ../../release_notes.rst:9612
#: ../../release_notes.rst:9617 ../../release_notes.rst:9622
#: ../../release_notes.rst:9759 ../../release_notes.rst:9767
#: ../../release_notes.rst:12503 ../../release_notes.rst:12512
#: ../../release_notes.rst:12517 ../../release_notes.rst:12522
#: ../../release_notes.rst:12527 ../../release_notes.rst:12549
#: ../../release_notes.rst:12589 ../../release_notes.rst:12594
#: ../../release_notes.rst:12599 ../../release_notes.rst:12800
#: ../../release_notes.rst:12819 ../../release_notes.rst:12824
#: ../../release_notes.rst:12829 ../../release_notes.rst:12902
#: ../../release_notes.rst:12925 ../../release_notes.rst:12930
#: ../../release_notes.rst:12935 ../../release_notes.rst:12940
#: ../../release_notes.rst:13093 ../../release_notes.rst:13098
#: ../../release_notes.rst:13103 ../../release_notes.rst:13112
#: ../../release_notes.rst:13141 ../../release_notes.rst:13146
#: ../../release_notes.rst:13151 ../../release_notes.rst:15194
#: ../../release_notes.rst:15199 ../../release_notes.rst:15204
#: ../../release_notes.rst:15209 ../../release_notes.rst:15268
#: ../../release_notes.rst:15273 ../../release_notes.rst:15278
#: ../../release_notes.rst:15283 ../../release_notes.rst:15384
#: ../../release_notes.rst:15389 ../../release_notes.rst:15394
#: ../../release_notes.rst:15399 ../../release_notes.rst:22342
#: ../../release_notes.rst:22360
msgid "No change"
msgstr ""

#: ../../release_notes.rst:150 ../../release_notes.rst:1110
msgid "IBM Q Provider 0.19.2"
msgstr ""

#: ../../release_notes.rst:157
msgid "Qiskit 0.37.0"
msgstr ""

#: ../../release_notes.rst:159
msgid "This release officially marks the end of support for the Qiskit Ignis project from Qiskit. It was originally deprecated in the 0.33.0 release and as was documented in that release the ``qiskit-ignis`` package has been removed from the Qiskit metapackage, which means in that future release ``pip install qiskit`` will no longer include ``qiskit-ignis``. However, note because of limitations in python packaging we cannot automatically remove a pre-existing install of ``qiskit-ignis``. If you are upgrading from a previous version it's recommended that you manually uninstall Qiskit Ignis with ``pip uninstall qiskit-ignis`` or install the metapackage in a fresh python environment."
msgstr ""

#: ../../release_notes.rst:170
msgid "Qiskit Ignis has been supersceded by the `Qiskit Experiments <https://qiskit.org/documentation/experiments/>`__ project. You can refer to the `migration guide <https://github.com/Qiskit/qiskit-ignis#migration-guide>`__ for details on how to switch from Qiskit Ignis to Qiskit Experiments."
msgstr ""

#: ../../release_notes.rst:175
msgid "Terra 0.21.0"
msgstr ""

#: ../../release_notes.rst:180 ../../release_notes.rst:1146
#: ../../release_notes.rst:1232 ../../release_notes.rst:1255
#: ../../release_notes.rst:1571 ../../release_notes.rst:3269
#: ../../release_notes.rst:3572 ../../release_notes.rst:3751
#: ../../release_notes.rst:3779 ../../release_notes.rst:4185
#: ../../release_notes.rst:4431 ../../release_notes.rst:6917
#: ../../release_notes.rst:7291 ../../release_notes.rst:7354
#: ../../release_notes.rst:7694 ../../release_notes.rst:7842
#: ../../release_notes.rst:9280 ../../release_notes.rst:9322
#: ../../release_notes.rst:9440 ../../release_notes.rst:9647
#: ../../release_notes.rst:9797 ../../release_notes.rst:11987
#: ../../release_notes.rst:12607 ../../release_notes.rst:12808
#: ../../release_notes.rst:12841 ../../release_notes.rst:12871
#: ../../release_notes.rst:13391 ../../release_notes.rst:14234
#: ../../release_notes.rst:14486 ../../release_notes.rst:14686
#: ../../release_notes.rst:15412 ../../release_notes.rst:16535
#: ../../release_notes.rst:16721 ../../release_notes.rst:17287
#: ../../release_notes.rst:17405 ../../release_notes.rst:17799
#: ../../release_notes.rst:18019 ../../release_notes.rst:19672
#: ../../release_notes.rst:20426 ../../release_notes.rst:20968
#: ../../release_notes.rst:21092 ../../release_notes.rst:21504
msgid "Prelude"
msgstr ""

#: ../../release_notes.rst:184
msgid "The Qiskit 0.21.0 release highlights are:"
msgstr ""

#: ../../release_notes.rst:186
msgid "Support for serialization of a pulse :class:`~.ScheduleBlock` via :mod:`qiskit.qpy`. The :ref:`qpy_format` has been updated to version 5 which includes a definition for including the pulse schedules. To support this, a new :class:`~.SymbolicPulse` class was introduced to enable defining parametric pulse waveforms via symbolic expressions."
msgstr ""

#: ../../release_notes.rst:191
msgid "Improvements to working with preset pass managers. A new function :func:`~.generate_preset_pass_manager` enables easily generating a pass manager equivalent to what :func:`~.transpile` will use internally. Additionally, preset pass managers are now instances of :class:`~.StagedPassManager` which makes it easier to modify sections."
msgstr ""

#: ../../release_notes.rst:196
msgid "A refactor of the internal data structure of the :attr:`.QuantumCircuit.data` attribute. It previously was a list of tuples in the form ``(instruction, qubits, clbits)`` and now is a list of :class:`~.CircuitInstruction` objects. The :class:`~.CircuitInstruction` objects is backwards compatible with the previous tuple based access, however with runtime overhead cost."
msgstr ""

#: ../../release_notes.rst:203
msgid "Additionally, the transpiler has been improved to enable better quality outputs. This includes the introduction of new passes such as :class:`~.VF2PostLayout` and :class:`~.ToqmSwap`."
msgstr ""

#: ../../release_notes.rst:208 ../../release_notes.rst:1507
#: ../../release_notes.rst:1607 ../../release_notes.rst:3280
#: ../../release_notes.rst:3586 ../../release_notes.rst:3796
#: ../../release_notes.rst:4472 ../../release_notes.rst:6931
#: ../../release_notes.rst:7090 ../../release_notes.rst:7241
#: ../../release_notes.rst:7364 ../../release_notes.rst:7793
#: ../../release_notes.rst:7858 ../../release_notes.rst:9054
#: ../../release_notes.rst:9174 ../../release_notes.rst:9342
#: ../../release_notes.rst:9808 ../../release_notes.rst:12002
#: ../../release_notes.rst:12419 ../../release_notes.rst:12557
#: ../../release_notes.rst:12625 ../../release_notes.rst:12952
#: ../../release_notes.rst:13055 ../../release_notes.rst:13120
#: ../../release_notes.rst:13273 ../../release_notes.rst:13344
#: ../../release_notes.rst:13419 ../../release_notes.rst:14251
#: ../../release_notes.rst:14496 ../../release_notes.rst:14711
#: ../../release_notes.rst:15217 ../../release_notes.rst:15291
#: ../../release_notes.rst:15432 ../../release_notes.rst:16550
#: ../../release_notes.rst:16732 ../../release_notes.rst:16849
#: ../../release_notes.rst:16994 ../../release_notes.rst:17320
#: ../../release_notes.rst:17482 ../../release_notes.rst:17854
#: ../../release_notes.rst:18064 ../../release_notes.rst:19592
#: ../../release_notes.rst:19646 ../../release_notes.rst:19686
#: ../../release_notes.rst:20437 ../../release_notes.rst:20981
#: ../../release_notes.rst:21102 ../../release_notes.rst:21520
#: ../../release_notes.rst:22222 ../../release_notes.rst:22522
#: ../../release_notes.rst:22562 ../../release_notes.rst:22720
#: ../../release_notes.rst:22778 ../../release_notes.rst:22802
#: ../../release_notes.rst:22894 ../../release_notes.rst:22944
#: ../../release_notes.rst:23226 ../../release_notes.rst:23257
msgid "New Features"
msgstr ""

#: ../../release_notes.rst:212
msgid "Added a new class, :class:`qiskit.transpiler.StagedPassManager`, which is a :class:`~qiskit.transpiler.PassManager` subclass that has a pipeline with defined phases to perform circuit compilation. Each phase is a :class:`~qiskit.transpiler.PassManager` object that will get executed in a fixed order. For example::"
msgstr ""

#: ../../release_notes.rst:231
msgid "Added the methods :meth:`.PauliList.group_commuting` and :meth:`.SparsePauliOp.group_commuting`, which partition these operators into sublists where each element commutes with all the others. For example::"
msgstr ""

#: ../../release_notes.rst:249
msgid "Added a new function, :func:`~.marginal_distribution`, which is used to marginalize an input dictionary of bitstrings to an integer (such as :class:`~.Counts`). This is similar in functionality to the existing :func:`~.marginal_counts` function with three key differences. The first is that :func:`~.marginal_counts` works with either a counts dictionary or a :class:`~.Results` object while :func:`~.marginal_distribution` only works with a dictionary. The second is that :func:`~.marginal_counts` does not respect the order of indices in its ``indices`` argument while :func:`~.marginal_distribution` does and will permute the output bits based on the ``indices`` order. The third difference is that :func:`~.marginal_distribution` should be faster as its implementation is written in Rust and streamlined for just marginalizing a dictionary input."
msgstr ""

#: ../../release_notes.rst:265
msgid "Added the ``@`` (``__matmul__``) binary operator to ``BaseOperator`` subclasses in the :mod:`qiskit.quantum_info` module. This is shorthand to call the classes' ``dot`` method (``A @ B == A.dot(B)``)."
msgstr ""

#: ../../release_notes.rst:271
msgid "Added a new optional argument, ``reps``, to :meth:`.QuantumCircuit.decompose`, which allows repeated decomposition of the circuit. For example::"
msgstr ""

#: ../../release_notes.rst:288
msgid "Added a new pulse base class :class:`.SymbolicPulse`. This is a replacement of the conventional :class:`.ParametricPulse`, which will be deprecated. In the new base class, pulse-envelope and parameter-validation functions are represented by symbolic-expression objects. The new class provides self-contained and portable pulse data since these symbolic equations can be easily serialized through symbolic computation libraries."
msgstr ""

#: ../../release_notes.rst:297
msgid "Added support for non-Hermitian operators in :class:`.AerPauliExpectation`. This allows the use of Aer's fast snapshot expectation computations in algorithms such as :class:`~qiskit.algorithms.QEOM`."
msgstr ""

#: ../../release_notes.rst:303
msgid "Added a new circuit drawing style, ``textbook``, which uses the color scheme of the Qiskit Textbook."
msgstr ""

#: ../../release_notes.rst:308
msgid "A new attribute :attr:`.QuantumCircuit.op_start_times` is populated when one of scheduling analysis passes is run on the circuit. It can be used to obtain circuit instruction with instruction time, for example::"
msgstr ""

#: ../../release_notes.rst:328
msgid "Added a new method :meth:`.QuantumCircuit.clear` which is used to remove all instructions from a :class:`.QuantumCircuit`."
msgstr ""

#: ../../release_notes.rst:333
msgid "Added a new method :meth:`.QuantumCircuit.copy_empty_like` which is used to get a cleared copy of a :class:`~.QuantumCircuit` instance. This is logically equivalent to ``qc.copy().clear()``, but significantly faster and more memory-efficient.  This is useful when one needs a new empty circuit with all the same resources (qubits, classical bits, metadata, and so on) already added."
msgstr ""

#: ../../release_notes.rst:341
msgid "The :meth:`.Target.instruction_supported` method now supports two new keyword arguments, ``operation_class`` and ``parameters``. Using these arguments the :meth:`~.Target.instruction_supported` method can now be used for checking that a specific operation with parameter values are supported by a :class:`~.Target` object. For example, if you want to check if a :class:`~.Target` named ``target`` supports running a :class:`~.RXGate` with :math:`\\theta = \\frac{\\pi}{2}` you would do something like::"
msgstr ""

#: ../../release_notes.rst:354
msgid "which will return ``True`` if ``target`` supports running :class:`~.RXGate` with :math:`\\theta = \\frac{\\pi}{2}` and ``False`` if it does not."
msgstr ""

#: ../../release_notes.rst:359
msgid "Added a Trotterization-based quantum real-time evolution algorithm :class:`qiskit.algorithms.TrotterQRTE`. It is compliant with the new quantum time evolution framework and makes use of the :class:`.ProductFormula` and :class:`.PauliEvolutionGate` implementations."
msgstr ""

#: ../../release_notes.rst:381
msgid "Added a new function :func:`~.generate_preset_pass_manager` which can be used to quickly generate a preset :class:`~.PassManager` object that mirrors the :class:`~.PassManager` used internally by the :func:`~.transpile` function. For example::"
msgstr ""

#: ../../release_notes.rst:393
msgid "Added a new function :func:`~.marginal_memory` which is used to marginalize shot memory arrays. Provided with the shot memory array and the indices of interest, the function will return a maginized shot memory array. This function differs from the memory support in the :func:`~.marginal_counts` method which only works on the ``memory`` field in a :class:`~.Results` object."
msgstr ""

#: ../../release_notes.rst:402
msgid "The primitives interface has been extended to accept objects in addition to indices as arguments to the ``__call__`` method.  The ``parameter_values`` argument can now be optional."
msgstr ""

#: ../../release_notes.rst:407
msgid "The OpenQASM 3 exporter (:mod:`qiskit.qasm3`) now supports exporting circuits with explicit delays, such as from :meth:`.QuantumCircuit.delay`."
msgstr ""

#: ../../release_notes.rst:412
msgid "Added a new layout and routing method to :func:`.transpile` based on the paper `\"Time-optimal qubit mapping\" <https://dl.acm.org/doi/10.1145/3445814.3446706>`__. To use it, the optional package `Qiskit TOQM <https://github.com/qiskit-toqm/qiskit-toqm>`__ must be installed. The ``routing_method`` kwarg of :func:`~qiskit.compiler.transpile` supports an additional value, ``'toqm'`` which is used to enable layout and routing via TOQM."
msgstr ""

#: ../../release_notes.rst:420
msgid "To install ``qiskit-toqm`` along with Terra, run:"
msgstr ""

#: ../../release_notes.rst:428
msgid "Added a new module ``qiskit.quantum_info.synthesis.qsd`` to apply Quantum Shannon Decomposition of arbitrary unitaries. This functionality replaces the previous isometry-based approach in the default unitary synthesis transpiler pass as well as when adding unitaries to a circuit using a :class:`.UnitaryGate`."
msgstr ""

#: ../../release_notes.rst:434
msgid "The Quantum Shannon Decomposition uses about half the cnot gates as the isometry implementation when decomposing unitary matrices of greater than two qubits."
msgstr ""

#: ../../release_notes.rst:440
msgid "Classes in the :mod:`.quantum_info` module that support scalar multiplication can now be multiplied by a scalar from either the left or the right. Previously, they would only accept scalar multipliers from the left."
msgstr ""

#: ../../release_notes.rst:446
msgid "The transpiler pass :class:`.LookaheadSwap` (used by :func:`.transpile` when ``routing_method=\"lookahead\"``) has seen some performance improvements and will now be approximately three times as fast.  This is purely being more efficient in its calculations, and does not change the complexity of the algorithm.  In most cases, a more modern routing algorithm like :class:`.SabreSwap` (``routing_method=\"sabre\"``) will be vastly more performant."
msgstr ""

#: ../../release_notes.rst:456
msgid "New transpiler passes have been added. The transpiler pass :class:`.Commuting2qGateRouter` uses swap strategies to route a block of commuting gates to the coupling map. Indeed, routing is a hard problem but is significantly easier when the gates commute as in CZ networks. Blocks of commuting gates are also typically found in QAOA. Such cases can be dealt with using swap strategies that apply a predefined set of layers of SWAP gates. Furthermore, the new transpiler pass :class:`.FindCommutingPauliEvolutions` identifies blocks of Pauli evolutions made of commuting two-qubit terms. Here, a swap strategy is specified by the class :class:`.SwapStrategy`. Swap strategies need to be tailored to the coupling map and, ideally, the circuit for the best results."
msgstr ""

#: ../../release_notes.rst:468
msgid "Introduced a new optimizer to Qiskit library, which adds support to the optimization of parameters of variational quantum algorithms. This is the Univariate Marginal Distribution Algorithm (UMDA), which is a specific type of the Estimation of Distribution Algorithms.  For example::"
msgstr ""

#: ../../release_notes.rst:497
msgid "The constructor for the :class:`~.Unroll3qOrMore` transpiler pass has two new optional keyword arguments, ``target`` and ``basis_gates``. These options enable you to specify the :class:`~.Target` or supported basis gates respectively to describe the target backend. If any of the operations in the circuit are in the ``target`` or ``basis_gates`` those will not be unrolled by the pass as the target device has native support for the operation."
msgstr ""

#: ../../release_notes.rst:507
msgid "QPY serialization has been upgraded to support :class:`.ScheduleBlock`. Now you can save pulse program in binary and load it at later time::"
msgstr ""

#: ../../release_notes.rst:521
msgid "This uses the QPY interface common to :class:`.QuantumCircuit`. See :ref:`qpy_schedule_block` for details of data structure."
msgstr ""

#: ../../release_notes.rst:526
msgid "Added a new transpiler pass, :class:`~.VF2PostLayout`. This pass is of a new type to perform a new phase/function in the compilation pipeline, post-layout or post optimization qubit selection. The idea behind this pass is after we finish the optimization loop in transpiler we know what the final gate counts will be on each qubit in the circuit so we can potentially find a better-performing subset of qubits on a backend to execute the circuit. The pass will search for an isomorphic subgraph in the connectivity graph of the target backend and look at the full error rate of the complete circuit on any subgraph found and return the layout found with the lowest error rate for the circuit."
msgstr ""

#: ../../release_notes.rst:537
msgid "This pass is similar to the :class:`~.VF2Layout` pass and both internally use the same VF2 implementation from `retworkx <https://github.com/Qiskit/retworkx>`__. However, :class:`~.VF2PostLayout` is deisgned to run after initial layout, routing, basis translation, and any optimization passes run and will only work if a layout has already been applied, the circuit has been routed, and all gates are in the target basis. This is required so that when a new layout is applied the circuit can still be run on the target device. :class:`~.VF2Layout` on the other hand is designed to find a perfect initial layout and can work with any circuit."
msgstr ""

#: ../../release_notes.rst:550
msgid "The :class:`~.ApplyLayout` transpiler pass now has support for updating a layout on a circuit after a layout has been applied once before. If the ``post_layout`` field is present (in addition to the required ``layout`` field) the ``property_set`` when the :class:`~.ApplyLayout` pass is run the pass will update the layout to apply the new layout. This will return a :class:`~.DAGCircuit` with the qubits in the new physical order and the ``layout`` property set will be updated so that it maps the virtual qubits from the original layout to the physical qubits in the new ``post_layout`` field."
msgstr ""

#: ../../release_notes.rst:562
msgid "The preset pass managers generated by :func:`~.level_1_pass_manager`, :func:`~.level_2_pass_manager`, and :func:`~.level_3_pass_manager` which correspond to ``optimization_level`` 1, 2, and 3 respectively on the :func:`~.transpile` function now run the :class:`~.VF2PostLayout` pass after running the routing pass. This enables the transpiler to potentially find a different set of physical qubits on the target backend to run the circuit on which have lower error rates. The :class:`~.VF2PostLayout` pass will not be run if you manually specify a ``layout_method``, ``routing_method``, or ``initial_layout`` arguments to :func:`~.transpile`. If the pass can find a better performing subset of qubits on backend to run the physical circuit it will adjust the layout of the circuit to use the alternative qubits instead."
msgstr ""

#: ../../release_notes.rst:577
msgid "The algorithm iteratively computes each eigenstate by starting from the ground state (which is computed as in VQE) and then optimising a modified cost function that tries to compute eigen states that are orthogonal to the states computed in the previous iterations and have the lowest energy when computed over the ansatz. The interface implemented is very similar to that of VQE and is of the form:"
msgstr ""

#: ../../release_notes.rst:605
msgid "This particular code snippet generates 2 eigenvalues (ground and 1st excited state) Tests have also been implemented."
msgstr ""

#: ../../release_notes.rst:612 ../../release_notes.rst:1423
#: ../../release_notes.rst:1524 ../../release_notes.rst:2702
#: ../../release_notes.rst:3291 ../../release_notes.rst:3602
#: ../../release_notes.rst:4035 ../../release_notes.rst:5835
#: ../../release_notes.rst:6975 ../../release_notes.rst:7117
#: ../../release_notes.rst:7177 ../../release_notes.rst:7260
#: ../../release_notes.rst:7486 ../../release_notes.rst:7703
#: ../../release_notes.rst:7816 ../../release_notes.rst:8586
#: ../../release_notes.rst:9104 ../../release_notes.rst:9196
#: ../../release_notes.rst:9383 ../../release_notes.rst:10849
#: ../../release_notes.rst:12279 ../../release_notes.rst:12430
#: ../../release_notes.rst:12535 ../../release_notes.rst:12721
#: ../../release_notes.rst:12961 ../../release_notes.rst:13191
#: ../../release_notes.rst:13360 ../../release_notes.rst:13972
#: ../../release_notes.rst:14396 ../../release_notes.rst:14653
#: ../../release_notes.rst:15033 ../../release_notes.rst:15175
#: ../../release_notes.rst:15248 ../../release_notes.rst:15988
#: ../../release_notes.rst:16637 ../../release_notes.rst:16754
#: ../../release_notes.rst:17033 ../../release_notes.rst:17115
#: ../../release_notes.rst:17187 ../../release_notes.rst:17236
#: ../../release_notes.rst:17292 ../../release_notes.rst:17583
#: ../../release_notes.rst:17874 ../../release_notes.rst:17924
#: ../../release_notes.rst:18756 ../../release_notes.rst:19978
#: ../../release_notes.rst:20791 ../../release_notes.rst:21351
#: ../../release_notes.rst:21802
msgid "Upgrade Notes"
msgstr ""

#: ../../release_notes.rst:616
msgid "The pulse classes in :mod:`qiskit.pulse.library` are now subclasses of :class:`.SymbolicPulse` rather than :class:`.ParametricPulse`.  The available classes remain unchanged as :class:`~qiskit.pulse.library.Gaussian`, :class:`~qiskit.pulse.library.GaussianSquare`, :class:`~qiskit.pulse.library.Drag`, and :class:`~qiskit.pulse.library.Constant`. :class:`.SymbolicPulse` has full backward compatibility, and there should be no loss of functionality."
msgstr ""

#: ../../release_notes.rst:628
msgid "The data type of each element in :attr:`.QuantumCircuit.data` has changed. It used to be a simple 3-tuple of an :class:`~.circuit.Instruction`, a list of :class:`.Qubit`\\ s, and a list of :class:`.Clbit`\\ s, whereas it is now an instance of :class:`.CircuitInstruction`."
msgstr ""

#: ../../release_notes.rst:633
msgid "The attributes of this new class are :attr:`~.CircuitInstruction.operation`, :attr:`~.CircuitInstruction.qubits` and :attr:`~.CircuitInstruction.clbits`, corresponding to the elements of the previous tuple.  However, :attr:`~.CircuitInstruction.qubits` and :attr:`~.CircuitInstruction.clbits` are now ``tuple`` instances, not ``list``\\ s."
msgstr ""

#: ../../release_notes.rst:639
msgid "This new class will behave exactly like the old 3-tuple if one attempts to access its index its elements, or iterate through it.  This includes casting the :attr:`~.CircuitInstruction.qubits` and :attr:`~.CircuitInstruction.clbits` elements to lists.  This is to assist backwards compatibility.  Starting from Qiskit Terra 0.21, this is no longer the preferred way to access these elements. Instead, you should use the attribute-access form described above."
msgstr ""

#: ../../release_notes.rst:646
msgid "This has been done to allow further developments of the :class:`.QuantumCircuit` data structure in Terra, without constantly breaking backwards compatibility. Planned developments include dynamic parameterized circuits, and an overall reduction in memory usage of deep circuits."
msgstr ""

#: ../../release_notes.rst:653
msgid "The ``python-constraint`` dependency, which is used solely by the :class:`~.CSPLayout` transpiler pass, is no longer in the requirements list for the Qiskit Terra package. This is because the :class:`~.CSPLayout` pass is no longer used by default in any of the preset pass managers for :func:`~.transpile`. While the pass is still available, if you're using it you will need to manually install ``python-contraint`` or when you install ``qiskit-terra`` you can use the ``csp-layout`` extra, for example::"
msgstr ""

#: ../../release_notes.rst:665
msgid "The QPY version format version emitted by :func:`.qpy.dump` has been increased to version 5. This new format version is incompatible with the previous versions and will result in an error when trying to load it with a deserializer that isn't able to handle QPY version 5. This change was necessary to fix support for representing controlled gates properly and representing non-default control states."
msgstr ""

#: ../../release_notes.rst:674
msgid "Qiskit Terra's compiled Rust extensions now have a minimum supported Rust version (MSRV) of 1.56.1. This means when building Qiskit Terra from source the oldest version of the Rust compiler supported is 1.56.1. If you are using an older version of the Rust compiler you will need to update to a newer version to continue to build Qiskit from source. This change was necessary as a number of upstream dependencies have updated their minimum supported versions too."
msgstr ""

#: ../../release_notes.rst:684
msgid "Circuit scheduling now executes in parallel when more than one circuit is provided to :func:`~.compiler.schedule`. Refer to `#2695 <https://github.com/Qiskit/qiskit-terra/issues/2695>`__ for more details."
msgstr ""

#: ../../release_notes.rst:691
msgid "The previously deprecated ``BaseBackend``, ``BaseJob``, and ``BaseProvider`` classes have all been removed. They were originally deprecated in the 0.18.0 release. Instead of these classes you should be using the versioned providers interface classes, the latest being :class:`~.BackendV2`, :class:`~.JobV1`, and :class:`~.ProviderV1`."
msgstr ""

#: ../../release_notes.rst:699
msgid "The previously deprecated ``backend`` argument for the constructor of the :class:`~.RZXCalibrationBuilder` transpiler pass has been removed. It was originally deprecated in the 0.19.0 release. Instead you should query the :class:`~.Backend` object for the ``instruction_schedule_map`` and ``qubit_channel_mapping`` and pass that directly to the constructor. For example, with a :class:`~.BackendV1` backend::"
msgstr ""

#: ../../release_notes.rst:717
msgid "or with a :class:`~.BackendV2` backend::"
msgstr ""

#: ../../release_notes.rst:732
msgid "The measurement shot limit for the :class:`.BasicAer` backend has been removed."
msgstr ""

#: ../../release_notes.rst:736
msgid "For the :class:`~DAGNode`, the previously deprecated ``type``, ``op``, ``qargs``, ``cargs``, and ``wire`` kwargs and attributes have been removed. These were originally deprecated in the 0.19.0 release. The ``op``, ``qargs``, and ``cargs`` kwargs and attributes can be accessed only on instances of :class:`~DAGOpNode`, and the ``wire`` kwarg and attribute are only on instances of :class:`~DAGInNode` or :class:`~DAGOutNode`."
msgstr ""

#: ../../release_notes.rst:745
msgid "The deprecated function :func:`.pauli_group` has been removed. It was originally deprecated in Qiskit Terra 0.17."
msgstr ""

#: ../../release_notes.rst:750
msgid "Several deprecated methods on :class:`.Pauli` have been removed, which were originally deprecated in Qiskit Terra 0.17.  These were:"
msgstr ""

#: ../../release_notes.rst:754
msgid "``sgn_prod``"
msgstr ""

#: ../../release_notes.rst:754
msgid "Use :meth:`.Pauli.compose` or :meth:`.Pauli.dot` instead."
msgstr ""

#: ../../release_notes.rst:757
msgid "``to_spmatrix``"
msgstr ""

#: ../../release_notes.rst:757
msgid "Use :meth:`.Pauli.to_matrix` with argument ``sparse=True`` instead."
msgstr ""

#: ../../release_notes.rst:761
msgid "``kron``"
msgstr ""

#: ../../release_notes.rst:760
msgid "Use :meth:`.Pauli.expand`, but beware that this returns a new object, rather than mutating the existing one."
msgstr ""

#: ../../release_notes.rst:764
msgid "``update_z`` and ``update_x``"
msgstr ""

#: ../../release_notes.rst:764
msgid "Set the ``z`` and ``x`` attributes of the object directly."
msgstr ""

#: ../../release_notes.rst:767
msgid "``insert_paulis``"
msgstr ""

#: ../../release_notes.rst:767
msgid "Use :meth:`.Pauli.insert`."
msgstr ""

#: ../../release_notes.rst:770
msgid "``append_paulis``"
msgstr ""

#: ../../release_notes.rst:770
msgid "Use :meth:`.Pauli.expand`."
msgstr ""

#: ../../release_notes.rst:773
msgid "``delete_qubits``"
msgstr ""

#: ../../release_notes.rst:773
msgid "Use :meth:`.Pauli.delete`."
msgstr ""

#: ../../release_notes.rst:778
msgid "``pauli_single``"
msgstr ""

#: ../../release_notes.rst:776
msgid "Construct the label manually and pass directly to the initializer, such as::"
msgstr ""

#: ../../release_notes.rst:781
msgid "``random``"
msgstr ""

#: ../../release_notes.rst:781
msgid "Use :func:`.quantum_info.random_pauli` instead."
msgstr ""

#: ../../release_notes.rst:785
msgid "Removed the ``optimize`` method from the :class:`~qiskit.algorithms.optimizers.Optimizer` classes, which is superseded by the :meth:`~.algorithms.optimizers.Optimizer.minimize` method as direct replacement. The one exception is :class:`~qiskit.algorithms.optimizers.SPSA`, where the deprecation warning was not triggered so the method there is still kept."
msgstr ""

#: ../../release_notes.rst:792
msgid ":class:`.Result` was modified so that it always contains ``date``, ``status``, and ``header`` attributes (set to ``None`` if not specified)."
msgstr ""

#: ../../release_notes.rst:797
msgid "For Python 3.7 `shared-memory38 <https://pypi.org/project/shared-memory38/>`__ is now a dependency. This was added as a dependency for Python 3.7 to enable leveraging the shared memory constructs in the standard library of newer versions of Python. If you're running on Python >= 3.8 there is no extra dependency required."
msgstr ""

#: ../../release_notes.rst:805
msgid ":class:`~.circuit.Instruction` labels are now type-checked on instruction creation."
msgstr ""

#: ../../release_notes.rst:809
msgid "QPY serialization has been upgraded to serialize :class:`.QuantumCircuit` with :attr:`.QuantumCircuit.calibrations`. As of QPY Version 5, only calibration entries of :class:`.ScheduleBlock` type can be serialized."
msgstr ""

#: ../../release_notes.rst:815
msgid "The definition of :class:`.XXPlusYYGate` has been changed. See `#7969 <https://github.com/Qiskit/qiskit-terra/pull/7949>`__ for details."
msgstr ""

#: ../../release_notes.rst:821
msgid "The preset pass managers generated by :func:`~.level_1_pass_manager`, :func:`~.level_2_pass_manager`, and :func:`~.level_3_pass_manager` and used by the :func:`~.transpile` function's ``optimization_level`` argument at 1, 2, and 3 respectively no longer set a hard time limit on the :class:`~.VF2Layout` transpiler pass. This means that the pass will no longer stop trying to find a better alternative perfect layout up until a fixed time limit (100ms for level 1, 10 sec for level 2, and 60 sec for level 3) as doing this limited the reproducibility of compilation when a perfect layout was available. This means that the output when using the pass might be different than before, although in all cases it would only change if a lower noise set of qubits can be found over the previous output. If you wish to retain the previous behavior you can create a custom :class:`~.PassManager` that sets the ``time_limit`` argument on the constructor for the :class:`~VF2Layout` pass."
msgstr ""

#: ../../release_notes.rst:840 ../../release_notes.rst:1535
#: ../../release_notes.rst:3017 ../../release_notes.rst:4071
#: ../../release_notes.rst:4197 ../../release_notes.rst:6283
#: ../../release_notes.rst:7000 ../../release_notes.rst:7506
#: ../../release_notes.rst:8729 ../../release_notes.rst:9127
#: ../../release_notes.rst:11421 ../../release_notes.rst:12317
#: ../../release_notes.rst:12745 ../../release_notes.rst:14087
#: ../../release_notes.rst:14429 ../../release_notes.rst:15053
#: ../../release_notes.rst:16236 ../../release_notes.rst:16785
#: ../../release_notes.rst:16879 ../../release_notes.rst:17064
#: ../../release_notes.rst:17619 ../../release_notes.rst:17892
#: ../../release_notes.rst:19106 ../../release_notes.rst:20031
#: ../../release_notes.rst:20837 ../../release_notes.rst:21393
#: ../../release_notes.rst:22068
msgid "Deprecation Notes"
msgstr ""

#: ../../release_notes.rst:844
msgid "Calling :func:`.timeline_drawer` with an unscheduled circuit has been deprecated. All circuits, even one consisting only of delay instructions, must be transpiled with the ``scheduling_method`` keyword argument of :func:`.transpile` set, to generate schedule information being stored in :attr:`.QuantumCircuit.op_start_times`."
msgstr ""

#: ../../release_notes.rst:852
msgid "The `NetworkX <https://networkx.org/>`__  converter functions for the :meth:`.DAGCircuit.to_networkx` and :meth:`~.DAGCircuit.from_networkx`, along with the :meth:`.DAGDependency.to_networkx` method have been deprecated and will be removed in a future release. Qiskit has been using `retworkx <https://qiskit.org/documentation/retworkx/>`__ as its graph library since the qiskit-terra 0.12.0 release, and since then the networkx converter functions have been lossy. They were originally added so that users could leverage functionality in NetworkX's algorithms library not present in retworkx.  Since that time, retworkx has matured and offers more functionality, and the :class:`~.DAGCircuit` is tightly coupled to retworkx for its operation. Having these converter methods provides limited value moving forward and are therefore going to be removed in a future release."
msgstr ""

#: ../../release_notes.rst:869
msgid "Accessing several old toggles (``HAS_MATPLOTLIB``, ``HAS_PDFTOCAIRO``, ``HAS_PYLATEX`` and ``HAS_PIL``) from the :mod:`qiskit.visualization` module is now deprecated, and these import paths will be removed in a future version of Qiskit Terra.  The same objects should instead be accessed through :mod:`qiskit.utils.optionals`, which contains testers for almost all of Terra's optional dependencies."
msgstr ""

#: ../../release_notes.rst:878
msgid "The ``qiskit.test.mock`` module is now deprecated. The fake backend and fake provider classes which were previously available in ``qiskit.test.mock`` have been accessible in :mod:`qiskit.providers.fake_provider` since Terra 0.20.0. This change represents a proper commitment to support the fake backend classes as part of Qiskit, whereas previously they were just part of the internal testing suite, and were exposed to users as a side effect."
msgstr ""

#: ../../release_notes.rst:886
msgid "The arguments' names when calling an :class:`~.primitives.Estimator` or :class:`~.primitives.Sampler` object as a function are renamed from ``circuit_indices`` and ``observable_indices`` to ``circuits`` and ``observables``."
msgstr ""

#: ../../release_notes.rst:893
msgid "The ``qobj_id`` and ``qobj_header`` keyword arguments for the :func:`~.execute` function have been deprecated and will be removed in a future release. Since the removal of the ``BaseBackend`` class these arguments don't have any effect as no backend supports execution with a :class:`~.Qobj` object directly and instead only work with :class:`~.QuantumCircuit` objects directly."
msgstr ""

#: ../../release_notes.rst:902
msgid "The arguments ``x``, ``z`` and ``label`` to the initializer of :class:`.Pauli` were documented as deprecated in Qiskit Terra 0.17, but a bug prevented the expected warning from being shown at runtime.  The warning will now correctly show, and the arguments will be removed in Qiskit Terra 0.23 or later.  A pair of ``x`` and ``z`` should be passed positionally as a single tuple (``Pauli((z, x))``).  A string ``label`` should be passed positionally in the first argument (``Pauli(\"XYZ\")``)."
msgstr ""

#: ../../release_notes.rst:912
msgid "The :meth:`.SPSA.optimize` method is deprecated in favor of :meth:`.SPSA.minimize`, which can be used as direct replacement. Note that this method returns a complete result object with more information than before available."
msgstr ""

#: ../../release_notes.rst:919
msgid "The ``circuits`` argument of :func:`.qpy.dump` has been deprecated and replaced with ``programs`` since now QPY supports multiple data types other than circuits."
msgstr ""

#: ../../release_notes.rst:924
msgid ":meth:`.AlignmentKind.to_dict` method has been deprecated and will be removed."
msgstr ""

#: ../../release_notes.rst:934
msgid "Extra validation was added to :class:`.DiagonalGate` to check the argument has modulus one."
msgstr ""

#: ../../release_notes.rst:938
msgid "Duplicate qubit indices given to :meth:`.SparsePauliOp.from_sparse_list` will now correctly raise an error, instead of silently overwriting previous values. The old behavior can be accessed by passing the new keyword argument ``do_checks=False``."
msgstr ""

#: ../../release_notes.rst:944
msgid "The :func:`.timeline_drawer` visualization will no longer misalign classical register slots."
msgstr ""

#: ../../release_notes.rst:949
msgid "Parameter validation for :class:`~.pulse.library.GaussianSquare` is now consistent before and after construction. Refer to `#7882 <https://github.com/Qiskit/qiskit-terra/issues/7882>`__ for more details."
msgstr ""

#: ../../release_notes.rst:955
msgid "The :class:`~.BackendV2`\\ -based fake backends in the :mod:`qiskit.providers.fake_provider` module, such as :class:`.FakeMontrealV2`, now support the :class:`~qiskit.circuit.Delay` operation in their :attr:`~.BackendV2.target` attributes.  Previously, :class:`.QuantumCircuit` objects that contained delays could not be compiled to these backends."
msgstr ""

#: ../../release_notes.rst:963
msgid "Fixed a bug in :meth:`.TridiagonalToeplitz.eigs_bounds`, which caused incorrect eigenvalue bounds to be returned in some cases with negative eigenvalues. Refer to `#7939 <https://github.com/Qiskit/qiskit-terra/issues/7939>`__ for more details."
msgstr ""

#: ../../release_notes.rst:970
msgid "Fixed a bug in which the LaTeX statevector drawer ignored the ``max_size`` parameter."
msgstr ""

#: ../../release_notes.rst:975
msgid "Fixed support in the :meth:`.PassManagerConfig.from_backend` constructor method for building a :class:`~.PassManagerConfig` object from a :class:`~.BackendV2` instance. Previously this wasn't handled correctly and would fail when running with a :class:`~.BackendV2` object."
msgstr ""

#: ../../release_notes.rst:982
msgid "Fixed support for QPY serialization (:func:`.qpy.dump`) and deserialization (:func:`.qpy.load`) of a :class:`~.QuantumCircuit` object containing custom :class:`~.ControlledGate` objects. Previously, an exception would be raised by :func:`.qpy.load` when trying to reconstruct the custom :class:`~.ControlledGate`. Fixed `#7999 <https://github.com/Qiskit/qiskit-terra/issues/7999>`__."
msgstr ""

#: ../../release_notes.rst:991
msgid "Fixed support for QPY serialization (:func:`.qpy.dump`) and deserialization (:func:`.qpy.load`) of a :class:`~.QuantumCircuit` object containing custom :class:`~.MCPhaseGate` objects. Previously, an exception would be raised by :func:`.qpy.load` when trying to reconstruct the :class:`~.MCPhaseGate`."
msgstr ""

#: ../../release_notes.rst:998
msgid "Fixed support for QPY serialization (:func:`.qpy.dump`) and deserialization (:func:`.qpy.load`) of a :class:`~.QuantumCircuit` object containing controlled gates with an open control state. Previously, the open control state would be lost by the serialization process and the reconstructed circuit."
msgstr ""

#: ../../release_notes.rst:1006
msgid "Fixed :meth:`.QuantumCircuit.reverse_bits` with circuits containing registerless :class:`.Qubit` and :class:`.Clbit`. For example, the following will now work::"
msgstr ""

#: ../../release_notes.rst:1017
msgid "Fixed the :attr:`.ConfigurableFakeBackend.t2` attribute, which was previously incorrectly set based on the provided ``t1`` value."
msgstr ""

#: ../../release_notes.rst:1022
msgid "Fixed an issue with :class:`~.BackendV2`\\ -based fake backend classes from the :mod:`qiskit.providers.fake_provider` module such as :class:`.FakeMontrealV2` where the value for the :attr:`~.BackendV2.dt` attribute (and the :attr:`.Target.dt` attribute) were not properly being converted to seconds. This would cause issues when using these fake backends with scheduling."
msgstr ""

#: ../../release_notes.rst:1030
msgid "Fixed a bug in :func:`~qiskit.visualization.plot_histogram` when the ``number_to_keep`` argument was smaller that the number of keys. The following code will no longer throw errors and will be properly aligned::"
msgstr ""

#: ../../release_notes.rst:1040
msgid "Improved the performance of building and working with parameterized :class:`~qiskit.circuit.QuantumCircuit` instances with many gates that share a relatively small number of parameters."
msgstr ""

#: ../../release_notes.rst:1046
msgid "The OpenQASM 3 exporter (:mod:`qiskit.qasm3`) will no longer attempt to produce definitions for non-standard gates in the ``basis_gates`` option."
msgstr ""

#: ../../release_notes.rst:1051
msgid "Fixed the getter of :attr:`.OptimizerResult.nit`, which previously returned the number of Jacobian evaluations instead of the number of iterations."
msgstr ""

#: ../../release_notes.rst:1056
msgid "Fixed a bug in the string representation of :class:`.Result` objects that caused the attributes to be specified incorrectly."
msgstr ""

#: ../../release_notes.rst:1061
msgid "Fixed an issue with :func:`~.transpile` where in some cases providing a list of basis gate strings with the ``basis_gates`` keyword argument or implicitly via a :class:`~.Target` input via the ``target`` keyword argument would not be interpreted correctly and result in a subset of the listed gates being used for each circuit."
msgstr ""

#: ../../release_notes.rst:1069
msgid "Fixed an issue in the :class:`~.UnitarySynthesis` transpiler pass which would result in an error when a :class:`~.Target` that didn't have any qubit restrictions on the operations (e.g. in the case of an ideal simulator target) was specified with the ``target`` keyword argument for the constructor."
msgstr ""

#: ../../release_notes.rst:1077
msgid "The method :meth:`qiskit.result.marginal_counts`, when passed a :class:`.Result` from a pulse backend, would fail, because it contains an array of :class:`.ExperimentResult` objects, each of which have an :class:`QobjExperimentHeader`, and those :class:`ExperimentHeaders` lack `creg_sizes` instance-variables.  If the :class:`Result` came from a simulator backend (e.g. Aer), that instance-variable would be there. We fix :class:`marginal_counts` so that it skips logic that needs `creg_sizes` if the field is not present, or non-None."
msgstr ""

#: ../../release_notes.rst:1087
msgid "The OpenQASM 2 exporter (:meth:`.QuantumCircuit.qasm`) will now correctly define the qubit parameters for :class:`.UnitaryGate` operations that do not affect all the qubits they are defined over. Fixed `#8224 <https://github.com/Qiskit/qiskit-terra/issues/8224>`__."
msgstr ""

#: ../../release_notes.rst:1094
msgid "Fixed an issue with reproducibility of the :func:`~.transpile` function when running with ``optimization_level`` 1, 2, and 3. Previously, under some conditions when there were multiple perfect layouts (a layout that doesn't require any SWAP gates) available the selected layout and output circuit could vary regardless of whether the ``seed_transpiler`` argument was set."
msgstr ""

#: ../../release_notes.rst:1117
msgid "In the upcoming terra release there will be a release candidate tagged prior to the final release. However changing the version string for the package is blocked on the qiskit-ibmq-provider right now because it is trying to parse the version and is assuming there will be no prelease suffix on the version string (see `#8200 <https://github.com/Qiskit/qiskit-terra/pull/8200>`__ for the details). PR `#1135 <https://github.com/Qiskit/qiskit-ibmq-provider/pull/1135>`__ fixes this version parsing to use the regex from the pypa/packaging project which handles all the PEP440 package versioning include pre-release suffixes. This will enable terra to release an 0.21.0rc1 tag without breaking the qiskit-ibmq-provider."
msgstr ""

#: ../../release_notes.rst:1128
msgid "``threading.currentThread`` and ``notifyAll`` were deprecated in Python 3.10 (October 2021) and will be removed in Python 3.12 (October 2023). PR `#1133 <https://github.com/Qiskit/qiskit-ibmq-provider/pull/1133>`__ replaces them with ``threading.current_thread``, ``notify_all`` added in Python 2.6 (October 2008)."
msgstr ""

#: ../../release_notes.rst:1136
msgid "Qiskit 0.36.2"
msgstr ""

#: ../../release_notes.rst:1141
msgid "Terra 0.20.2"
msgstr ""

#: ../../release_notes.rst:1150
msgid "Qiskit Terra 0.20.2 is a bugfix release, addressing some minor issues identified since the last patch release."
msgstr ""

#: ../../release_notes.rst:1160
msgid "Fixed an issue with :class:`~.BackendV2`\\ -based fake backend classes from the ``qiskit.providers.fake_provider`` module such as ``FakeMontrealV2``, where the values for the :attr:`~.BackendV2.dtm` and :attr:`~.BackendV2.dt` attributes and the associated attribute :attr:`.Target.dt` would not be properly converted to seconds. This would cause issues when using these fake backends with scheduling.  See `#8018 <https://github.com/Qiskit/qiskit-terra/issues/8018>`__."
msgstr ""

#: ../../release_notes.rst:1169
msgid ":func:`.marginal_counts` will now succeed when asked to marginalize memory with an ``indices`` parameter containing non-zero elements.  Previously, shots whose hexadecimal result representation was sufficiently small could raise a ``ValueError``.  See `#8044 <https://github.com/Qiskit/qiskit-terra/issues/8044>`__."
msgstr ""

#: ../../release_notes.rst:1176
msgid "The OpenQASM 3 exporter (:mod:`qiskit.qasm3`) will now output ``input`` or ``output`` declarations before gate declarations.  This is more consistent with the current reference ANTLR grammar from the OpenQASM 3 team. See `#7964 <https://github.com/Qiskit/qiskit-terra/issues/7964>`__."
msgstr ""

#: ../../release_notes.rst:1183
msgid "Fixed a bug in the :class:`.RZXCalibrationBuilder` transpiler pass where the scaled cross-resonance pulse amplitude could appear to be parametrized even after assignment. This could cause the pulse visualization tools to use the parametrized format instead of the expected numeric one. See `#8031 <https://github.com/Qiskit/qiskit-terra/pull/8031>`__."
msgstr ""

#: ../../release_notes.rst:1191
msgid "Fixed an issue with the :func:`~.transpile` function when run with a :class:`~.BackendV2`\\ -based backend and setting the ``scheduling_method`` keyword argument. Previously, the function would not correctly process the default durations of the instructions supported by the backend which would lead to an error."
msgstr ""

#: ../../release_notes.rst:1199
msgid "Fixed a bug in the :class:`~.RZXCalibrationBuilder` transpiler pass that was causing pulses to sometimes be constructed with incorrect durations. See `#7994 <https://github.com/Qiskit/qiskit-terra/issues/7994>`__."
msgstr ""

#: ../../release_notes.rst:1205
msgid "The :class:`.SabreSwap` transpiler pass, used in :func:`.transpile` when ``routing_method=\"sabre\"`` is set, will no longer sporadically drop classically conditioned gates and their successors from circuits during the routing phase of transpilation.  See `#8040 <https://github.com/Qiskit/qiskit-terra/issues/8040>`__."
msgstr ""

#: ../../release_notes.rst:1213
msgid ":class:`.Statevector` will now allow direct iteration through its values (such as ``for coefficient in statevector``) and correctly report its length under ``len``.  Previously it would try and and access out-of-bounds data and raise a :class:`.QiskitError`.  See `#8039 <https://github.com/Qiskit/qiskit-terra/issues/8039>`__."
msgstr ""

#: ../../release_notes.rst:1227
msgid "Ignis 0.7.1"
msgstr ""

#: ../../release_notes.rst:1236
msgid "This is a bugfix release that primarily fixes a packaging issue that was causing the ``docs/`` directory, which contains the source files used to build the qiskit-ignis documentation, to get included in the Python package."
msgstr ""

#: ../../release_notes.rst:1241 ../../release_notes.rst:1389
msgid "IBM Q Provider 0.19.1"
msgstr ""

#: ../../release_notes.rst:1247
msgid "Qiskit 0.36.1"
msgstr ""

#: ../../release_notes.rst:1250
msgid "Terra 0.20.1"
msgstr ""

#: ../../release_notes.rst:1259
msgid "Qiskit Terra 0.20.1 is a bugfix release resolving issues identified in release 0.20.0."
msgstr ""

#: ../../release_notes.rst:1265 ../../release_notes.rst:2679
#: ../../release_notes.rst:5745 ../../release_notes.rst:7471
#: ../../release_notes.rst:8571 ../../release_notes.rst:9546
#: ../../release_notes.rst:10787 ../../release_notes.rst:12267
#: ../../release_notes.rst:19926 ../../release_notes.rst:20780
msgid "Known Issues"
msgstr ""

#: ../../release_notes.rst:1269
msgid "QPY deserialization with the :func:`.qpy.load` function of a directly instantiated :class:`~.UCPauliRotGate` object in a circuit will fail because the rotation axis argument to the class isn't stored in a standard place. To workaround this you can instead use the subclasses: :class:`~.UCRXGate`, :class:`~.UCRYGate`, or :class:`~.UCRZGate` (based on whether you're using a rotation axis of ``\"X\"``, ``\"Y\"``, or ``\"Z\"`` respectively) which embeds the rotation axis in the class constructor and will work correctly in QPY."
msgstr ""

#: ../../release_notes.rst:1280
msgid "Since its original introduction in Qiskit Terra 0.20, :class:`.XXPlusYYGate` has used a negative angle convention compared to all other rotation gates. In Qiskit Terra 0.21, this will be corrected to be consistent with the other rotation gates.  This does not affect any other rotation gates, nor :class:`.XXMinusYYGate`."
msgstr ""

#: ../../release_notes.rst:1294
msgid "Fixed :class:`.Clifford`, :class:`.Pauli` and :class:`.CNOTDihedral` operator initialization from compatible circuits that contain :class:`~qiskit.circuit.Delay` instructions. These instructions are treated as identities when converting to operators."
msgstr ""

#: ../../release_notes.rst:1301
msgid "Fixed an issue where the :func:`~qiskit.algorithms.eval_observables` function would raise an error if its ``quantum_state`` argument was of type :class:`~qiskit.opflow.StateFn`. ``eval_observables`` now correctly supports all input types denoted by its type hints."
msgstr ""

#: ../../release_notes.rst:1307
msgid "Fixed an issue with the visualization function :func:`~.dag_drawer` and method :meth:`.DAGCircuit.draw` where previously the drawer would fail when attempting to generate a visualization for a :class:`~.DAGCircuit` object that contained a :class:`~.Qubit` or :class:`~.Clbit` which wasn't part of a :class:`~QuantumRegister` or :class:`~ClassicalRegister`. Fixed `#7915 <https://github.com/Qiskit/qiskit-terra/issues/7915>`__."
msgstr ""

#: ../../release_notes.rst:1316
msgid "Fixed parameter validation for class :class:`~Drag`. Previously, it was not sensitive to large beta values with negative signs, which may have resulted in waveform samples with a maximum value exceeding the amplitude limit of 1.0."
msgstr ""

#: ../../release_notes.rst:1322
msgid "The :class:`~qiskit.utils.QuantumInstance` class used by many algorithms (like :class:`~.VQE`) was hard-coding the value for a sleep while it looped waiting for the job status to be updated. It now respects the configured sleep value as set per the ``wait`` attribute in the initializer of :class:`~qiskit.utils.QuantumInstance`."
msgstr ""

#: ../../release_notes.rst:1329
msgid "Fixed an issue with the :class:`~qiskit.compiler.schedule` function where callers specifying a ``list`` of :class:`~qiskit.circuit.QuantumCircuit` objects with a single entry would incorrectly be returned a single :class:`~.Schedule` object instead of a ``list``."
msgstr ""

#: ../../release_notes.rst:1336
msgid "Fixed an issue with the :class:`~.plot_error_map` visualization function which prevented it from working when run with a backend that had readout error defined in the provided backend's :class:`~.BackendProperties` or when running with a :class:`~.BackendV2` backend. Fixed `#7879 <https://github.com/Qiskit/qiskit-terra/issues/7879>`__."
msgstr ""

#: ../../release_notes.rst:1344
msgid "Fixed a bug that could result in exponential runtime and nontermination when a :class:`~qiskit.quantum_info.Pauli` instance is given to method :meth:`~qiskit.primitives.utils.init_observables`."
msgstr ""

#: ../../release_notes.rst:1350
msgid "Fixed :class:`.SabreSwap`, and by extension :func:`.transpile` with ``optimization_level=3``, occasionally re-ordering measurements invalidly. Previously, if two measurements wrote to the same classical bit, :class:`.SabreSwap` could (depending on the coupling map) re-order them to produce a non-equivalent circuit.  This behaviour was stochastic, so may not have appeared reliably. Fixed `#7950 <https://github.com/Qiskit/qiskit-terra/issues/7950>`__"
msgstr ""

#: ../../release_notes.rst:1360
msgid "The :class:`.SabreSwap` transpiler pass, and by extension :class:`.SabreLayout` and :func:`.transpile` at ``optimization_level=3``, now has an escape mechanism to guarantee that it can never get stuck in an infinite loop.  Certain inputs previously could, with a great amount of bad luck, get stuck in a stable local minimum of the search space and the pass would never make further progress.  It will now force a series of swaps that allow the routing to continue if it detects it has not made progress recently.  Fixed `#7707 <https://github.com/Qiskit/qiskit-terra/issues/7707>`__."
msgstr ""

#: ../../release_notes.rst:1371
msgid "Fixed an issue with QPY deserialization via the :func:`.qpy.load` function of the :class:`~.UCRXGate`, :class:`~.UCRYGate`, and :class:`~.UCRZGate` classes. Previously, a QPY file that contained any of these gates would error when trying to load the file. Fixed `#7847 <https://github.com/Qiskit/qiskit-terra/issues/7847>`__."
msgstr ""

#: ../../release_notes.rst:1384 ../../release_notes.rst:1495
#: ../../release_notes.rst:3248 ../../release_notes.rst:3663
#: ../../release_notes.rst:3720 ../../release_notes.rst:4152
#: ../../release_notes.rst:4361 ../../release_notes.rst:6912
msgid "Ignis 0.7.0"
msgstr ""

#: ../../release_notes.rst:1394
msgid "0.19.1"
msgstr ""

#: ../../release_notes.rst:1401
msgid "PR `#1129 <https://github.com/Qiskit/qiskit-ibmq-provider/pull/1129>`__ updates :meth:`~qiskit.providers.ibmq.least_busy` method to no longer support `BaseBackend` as a valid input or output type since it has been long deprecated in qiskit-terra and has recently been removed."
msgstr ""

#: ../../release_notes.rst:1408
msgid "Qiskit 0.36.0"
msgstr ""

#: ../../release_notes.rst:1411 ../../release_notes.rst:1566
msgid "Terra 0.20.0"
msgstr ""

#: ../../release_notes.rst:1427
msgid "Qiskit Aer is no longer compiled with unsafe floating-point optimisations. While most of the effects should have been localised to Qiskit Aer, some aspects of subnormal handling may previously have been leaked into user code by the library incorrectly setting the \"flush to zero\" mode.  This will not happen any more."
msgstr ""

#: ../../release_notes.rst:1441
msgid "Fix cache blocking transpiler to recognize superop to be cache blocked. This is fix for `issue 1479 <https://github.com/Qiskit/qiskit-aer/issues/1479>` now density_matrix with noise models can be parallelized. New test, test_noise.TestNoise.test_kraus_gate_noise_on_QFT_cache_blocking is added to verify this issue. Also this fix include fix for `issue 1483 <https://github.com/Qiskit/qiskit-aer/issues/1483>` discovered by adding new test case. This fixes measure over chunks for statevector."
msgstr ""

#: ../../release_notes.rst:1454
msgid "Fixes a bug in ``NoiseModel.from_backend()`` that raised an error when T2 value greater than 2 * T1 was supplied by the backend. After this fix, it becomes to truncate T2 value up to 2 * T1 and issue a user warning if truncates. The bug was introduced at #1391 and, before that, ``NoiseModel.from_backend()`` had truncated the T2 value up to 2 * T1 silently."
msgstr ""

#: ../../release_notes.rst:1461
msgid "See `Issue 1464 <https://github.com/Qiskit/qiskit-aer/issues/1464>`__ for details."
msgstr ""

#: ../../release_notes.rst:1466
msgid "device=Thrust was very slow for small number of qubits because OpenMP threading was always applied. This fix applies OpenMP threads as same as device=CPU by using statevector_parallel_threshold."
msgstr ""

#: ../../release_notes.rst:1472
msgid "Qiskit Aer will no longer set the floating-point mode to \"flush to zero\" when loaded.  Downstream users may previously have seen warnings from Numpy such as:"
msgstr ""

#: ../../release_notes.rst:1476
msgid "The value of the smallest subnormal for <class 'numpy.float64'> type is zero."
msgstr ""

#: ../../release_notes.rst:1478
msgid "These will now no longer be emitted, and the floating-point handling will be correct."
msgstr ""

#: ../../release_notes.rst:1483
msgid "Fixed a potential issue with running simulations on circuits that have the :attr:`.QuantumCircuit.metadata` attribute set. The :attr:`~.QuantumCircuit.metadata` attribute can be any python dictionary and previously qiskit-aer would attempt to JSON serialize the contents of the attribute to process it with the rest of the rest of the circuit input, even if the contents were not JSON serializable. This no longer occurs as the :attr:`.QuantumCircuit.metadata`  attribute is not used to run the simulation so now the contents are no serialized and instead are directly attached to the :class:`qiskit.result.Result` object without attempting to JSON serialize the contents. Fixed `#1435 <https://github.com/Qiskit/qiskit-aer/issues/1435>`__"
msgstr ""

#: ../../release_notes.rst:1502
msgid "IBM Q Provider 0.19.0"
msgstr ""

#: ../../release_notes.rst:1509
msgid "The qiskit-ibmq-provider package now supports IBM Quantum LiveData features. These features allow users to observe the real-time behavior of IBM Quantum backends while executing jobs. Specifically, the provider now includes a new tab in the backend Jupyter-related widget and supports the execution of jobs (via :meth:`qiskit.providers.ibmq.IBMQBackend.run` method) with the `live_data_enabled=True` parameter in allowed IBM Quantum backends."
msgstr ""

#: ../../release_notes.rst:1516
msgid "You can now specify a different logging level in the ``options`` keyword when submitting a Qiskit Runtime job with the :meth:`qiskit.providers.ibmq.runtime.IBMRuntimeService.run` method."
msgstr ""

#: ../../release_notes.rst:1526
msgid "Python 3.6 support has been dropped since it has reached end of life in Dec 2021."
msgstr ""

#: ../../release_notes.rst:1528
msgid "`qiskit.providers.ibmq.random`, the random number service which was used to access the CQC randomness extractor is no longer supported and has been removed."
msgstr ""

#: ../../release_notes.rst:1537
msgid "The ``image`` keyword in the :meth:`qiskit.providers.ibmq.runtime.IBMRuntimeService.run` method is deprecated. You should instead specify the image to use in the ``options`` keyword."
msgstr ""

#: ../../release_notes.rst:1548
msgid "Fixes issue `#190 <https://github.com/Qiskit/qiskit-ibm-provider/issues/190>`__. Now :class:`qiskit.providers.ibmq.runtime.RuntimeEncoder` and :class:`qiskit.providers.ibmq.runtime.RuntimeDecoder` have been updated to handle instances of the `Instruction` class."
msgstr ""

#: ../../release_notes.rst:1553
msgid "Fixes issue `#74 <https://github.com/Qiskit/qiskit-ibm-provider/issues/74>`__ where numpy ndarrays with object types could not be serialized. :class:`qiskit.providers.ibmq.runtime.RuntimeEncoder` and :class:`qiskit.providers.ibmq.runtime.RuntimeDecoder` have been updated to handle these ndarrays."
msgstr ""

#: ../../release_notes.rst:1561
msgid "Qiskit 0.35.0"
msgstr ""

#: ../../release_notes.rst:1575
msgid "The Qiskit Terra 0.20.0 release highlights are:"
msgstr ""

#: ../../release_notes.rst:1577
msgid "The introduction of multithreaded modules written in Rust to accelerate the performance of certain portions of Qiskit Terra and improve scaling with larger numbers of qubits. However, when building Qiskit from source a `Rust <https://www.rust-lang.org/>`__ compiler is now required."
msgstr ""

#: ../../release_notes.rst:1582
msgid "More native support for working with a :class:`~.Target` in the transpiler. Several passes now support working directly with a :class:`~.Target` object which makes the transpiler robust in the types of backends it can target."
msgstr ""

#: ../../release_notes.rst:1586
msgid "The introduction of the :mod:`qiskit.primitives` module. These APIs provide different abstraction levels for computing outputs of interest from :class:`~.QuantumCircuit` and using backends. For example, the :class:`~qiskit.primitives.BaseEstimator` defines an abstract interface for estimating an expectation value of an observable. This can then be used to construct higher level algorithms and applications that are built using the estimation of expectation values without having to worry about the implementation of computing the expectation value. This decoupling allows the implementation to improve in speed and quality while adhering to the defined abstract interface. Likewise, the :class:`~qiskit.primitives.BaseSampler` computes quasi-probability distributions from circuit measurements. Other primitives will be introduced in the future."
msgstr ""

#: ../../release_notes.rst:1600
msgid "This release no longer has support for Python 3.6. With this release, Python 3.7 through Python 3.10 are required."
msgstr ""

#: ../../release_notes.rst:1611
msgid "Added a new constructor method for the :class:`.Operator` class, :meth:`.Operator.from_circuit` for creating a new :class:`.Operator` object from a :class:`.QuantumCircuit`. While this was possible normally using the default constructor, the :meth:`.Operator.from_circuit` method provides additional options to adjust how the operator is created. Primarily this lets you permute the qubit order based on a set :class:`.Layout`. For, example::"
msgstr ""

#: ../../release_notes.rst:1633
msgid "the ``operator`` variable will have the qubits permuted based on the layout so that it is identical to what is returned by ``Operator(circuit)`` before transpilation."
msgstr ""

#: ../../release_notes.rst:1639
msgid "Added a new method :meth:`.DAGCircuit.copy_empty_like` to the :class:`~.DAGCircuit` class. This method is used to create a new copy of an existing :class:`.DAGCircuit` object with the same structure but empty of any instructions. This method is the same as the private method ``_copy_circuit_metadata()``, but instead is now part of the public API of the class."
msgstr ""

#: ../../release_notes.rst:1648
msgid "The fake backend and fake provider classes which were previously available in ``qiskit.test.mock`` are now also accessible in a new module: ``qiskit.providers.fake_provider``. This new module supersedes the previous module ``qiskit.test.mock`` which will be deprecated in Qiskit 0.21.0."
msgstr ""

#: ../../release_notes.rst:1655
msgid "Added a new gate class, :class:`.LinearFunction`, that efficiently encodes a linear function (i.e. a function that can be represented by a sequence of :class:`.CXGate` and :class:`.SwapGate` gates)."
msgstr ""

#: ../../release_notes.rst:1661
msgid "Added a new transpiler pass :class:`.CollectLinearFunctions` that collects blocks of consecutive :class:`.CXGate` and :class:`.SwapGate` gates in a circuit, and replaces each block with a :class:`.LinearFunction` gate."
msgstr ""

#: ../../release_notes.rst:1667
msgid "Added a new transpiler pass :class:`.LinearFunctionsSynthesis` that synthesizes any :class:`.LinearFunction` gates in using the `Patel-Markov-Hayes algorithm <https://arxiv.org/abs/quant-ph/0302002>`__. When combined with the :class:`.CollectLinearFunctions` transpiler pass this enables to collect blocks of consecutive :class:`.CXGate` and :class:`.SwapGate` gates in a circuit, and re-synthesize them using the `Patel-Markov-Hayes algorithm <https://arxiv.org/abs/quant-ph/0302002>`__."
msgstr ""

#: ../../release_notes.rst:1677
msgid "Added a new transpiler pass :class:`.LinearFunctionsToPermutations` that replaces a :class:`.LinearFunction` gate by a :class:`.Permutation` circuit whenever possible."
msgstr ""

#: ../../release_notes.rst:1683
msgid ":class:`~.FlowController` classes (such as :class:`~.ConditionalController`) can now be nested inside a :class:`~.PassManager` instance when using the :meth:`.PassManager.append` method. This enables the use of nested logic to control the execution of passes in the :class:`~.PassManager`. For example::"
msgstr ""

#: ../../release_notes.rst:1710
msgid "The ``pm`` :class:`~.PassManager` object will only execute the :class:`.BasisTranslator` pass (in the ``unroll`` step) in each loop iteration if the ``unroll_condition`` is met."
msgstr ""

#: ../../release_notes.rst:1716
msgid "The constructors for the :class:`~qiskit.circuit.library.ZFeatureMap` and :class:`~qiskit.circuit.library.ZZFeatureMap` classes have a new keyword argument ``parameter_prefix``. This new argument is used to set the prefix of parameters of the data encoding circuit. For example:"
msgstr ""

#: ../../release_notes.rst:1728
msgid "the generated :class:`~qiskit.circuit.library.ZFeatureMap` circuit has prefixed all its internal parameters with the prefix ``\"my_prefix\"``."
msgstr ""

#: ../../release_notes.rst:1733
msgid "The :class:`.TemplateOptimization` transpiler pass can now work with :class:`~.Gate` objects that have :class:`.ParameterExpression` parameters. An illustrative example of using :class:`.Parameter`\\s with :class:`.TemplateOptimization` is the following::"
msgstr ""

#: ../../release_notes.rst:1778
msgid "outputs"
msgstr ""

#: ../../release_notes.rst:1806
msgid "The :class:`.DAGOpNode`, :class:`.DAGInNode` and :class:`.DAGOutNode` classes now define a custom ``__repr__`` method which outputs a representation. Per the `Python documentation <https://docs.python.org/3/library/functions.html#repr>`__ the output is a string representation that is roughly equivalent to the Python string used to create an equivalent object."
msgstr ""

#: ../../release_notes.rst:1815
msgid "The performance of the :meth:`.SparsePauliOp.simplify` method has greatly improved by replacing the use of ``numpy.unique`` to compute unique elements of an array by a new similar function implemented in Rust that doesn't pre-sort the array."
msgstr ""

#: ../../release_notes.rst:1822
msgid "Added a new method :meth:`~qiskit.quantum_info.SparsePauliOp.equiv` to the :class:`~.SparsePauliOp` class for testing the equivalence of a :class:`~.SparsePauliOp` with another :class:`.SparsePauliOp` object. Unlike the ``==`` operator which compares operators element-wise, :meth:`~qiskit.quantum_info.SparsePauliOp.equiv` compares whether two operators are equivalent or not. For example::"
msgstr ""

#: ../../release_notes.rst:1840
msgid "Added new fake backend classes from snapshots of the IBM Quantum systems based on the :class:`~.BackendV2` interface and provided a :class:`~qiskit.transpiler.Target` for each backend. :class:`~.BackendV2` based versions of all the existing backends are added except for three old backends ``FakeRueschlikon``, ``FakeTenerife`` and ``FakeTokyo`` as they do not have snapshots files available which are required for creating a new fake backend class based on :class:`~.BackendV2`."
msgstr ""

#: ../../release_notes.rst:1848
msgid "These new V2 fake backends will enable testing and development of new features introduced by :class:`~qiskit.providers.backend.BackendV2` and :class:`~qiskit.transpiler.Target` such as improving the transpiler."
msgstr ""

#: ../../release_notes.rst:1854
msgid "Added a new gate class :class:`~qiskit.circuit.library.XXMinusYYGate` to the circuit library (:mod:`qiskit.circuit.library`) for the XX-YY interaction. This gate can be used to implement the `bSwap gate <https://arxiv.org/abs/1208.1287>`__ and its powers. It also arises in the simulation of superconducting fermionic models."
msgstr ""

#: ../../release_notes.rst:1862
msgid "Added new gate class, :class:`~qiskit.circuit.library.XXPlusYYGate`, to the circuit library (:mod:`qiskit.circuit.library`). This gate is a 2-qubit parameterized XX+YY interaction, also known as an XY gate, and is based on the gate described in https://arxiv.org/abs/1912.04424."
msgstr ""

#: ../../release_notes.rst:1869
msgid "The ``FakeBogota``, ``FakeManila``, ``FakeRome``, and ``FakeSantiago`` fake backends which can be found in the ``qiskit.providers.fake_provider`` module can now be used as backends in Pulse experiments as they now include a :class:`~qiskit.providers.models.PulseDefaults` created from a snapshot of the equivalent IBM Quantum machine's properties."
msgstr ""

#: ../../release_notes.rst:1877
msgid "The :class:`~qiskit.transpiler.passes.ConsolidateBlocks` pass has a new keyword argument on its constructor, ``target``. This argument is used to specify a :class:`~qiskit.transpiler.Target` object representing the compilation target for the pass. If it is specified it supersedes the ``basis_gates`` kwarg. If a target is specified, the pass will respect the gates and qubits for the instructions defined in the :class:`~qiskit.transpiler.Target` when deciding which gates to consolidate into a unitary."
msgstr ""

#: ../../release_notes.rst:1888
msgid "The :class:`~qiskit.transpiler.Target` class has a new method, :meth:`~qiskit.transpiler.Target.instruction_supported` which is used to query the target to see if an instruction (the combination of an operation and the qubit(s) it is executed on) is supported on the backend modelled by the :class:`~qiskit.transpiler.Target`."
msgstr ""

#: ../../release_notes.rst:1896
msgid "Added a new kwarg, ``metadata_serializer``, to the :func:`.qpy.dump` function for specifying a custom ``JSONEncoder`` subclass for use when serializing the :attr:`.QuantumCircuit.metadata` attribute and a dual kwarg ``metadata_deserializer`` to the :func:`.qpy.load` function for specifying a ``JSONDecoder`` subclass. By default the :func:`~qiskit.qpy.dump` and :func:`~qiskit.qpy.load` functions will attempt to JSON serialize and deserialize with the stdlib default json encoder and decoder. Since :attr:`.QuantumCircuit.metadata` can contain any Python dictionary, even those with contents not JSON serializable by the default encoder, will lead to circuits that can't be serialized. The new ``metadata_serializer`` argument for :func:`~qiskit.qpy.dump` enables users to specify a custom ``JSONEncoder`` that will be used with the internal ``json.dump()`` call for  serializing the :attr:`.QuantumCircuit.metadata` dictionary. This can then be paired with the new ``metadata_deserializer`` argument of the :func:`.qpy.load` function to decode those custom JSON encodings. If ``metadata_serializer`` is specified on :func:`~qiskit.qpy.dump` but ``metadata_deserializer`` is not specified on :func:`~qiskit.qpy.load` calls the QPY will be loaded, but the circuit metadata may not be reconstructed fully."
msgstr ""

#: ../../release_notes.rst:1920
msgid "For example if you wanted to define a custom serialization for metadata and then load it you can do something like::"
msgstr ""

#: ../../release_notes.rst:1974
msgid "The :class:`~qiskit.transpiler.passes.DenseLayout` pass has a new keyword argument on its constructor, ``target``. This argument is used to specify a :class:`~qiskit.transpiler.Target` object representing the compilation target for the pass. If it is specified it supersedes the other arguments on the constructor, ``coupling_map`` and ``backend_prop``."
msgstr ""

#: ../../release_notes.rst:1982
msgid "The :class:`~qiskit.transpiler.Target` class has a new method, :meth:`~qiskit.transpiler.Target.operation_names_for_qargs`. This method is used to get the operation names (i.e. lookup key in the target) for the operations on a given ``qargs`` tuple."
msgstr ""

#: ../../release_notes.rst:1989
msgid "A new pass :class:`~.DynamicalDecouplingPadding` has been added to the :mod:`qiskit.transpiler.passes` module. This new pass supersedes the existing :class:`~.DynamicalDecoupling` pass to work with the new scheduling workflow in the transpiler. It is a subclass of the :class:`~.BasePadding` pass and depends on having scheduling and alignment analysis passes run prior to it in a :class:`~.PassManager`. This new pass can take a ``pulse_alignment`` argument which represents a hardware constraint for waveform start timing. The spacing between gates comprising a dynamical decoupling sequence is now adjusted to satisfy this constraint so that the circuit can be executed on hardware with the constraint. This value is usually found in :attr:`.BackendConfiguration.timing_constraints`. Additionally the pass also has an ``extra_slack_distribution`` option has been to control how to distribute the extra slack when the duration of the created dynamical decoupling sequence is shorter than the idle time of your circuit that you want to fill with the sequence. This defaults to ``middle`` which is identical to conventional behavior. The new strategy ``split_edges`` evenly divide the extra slack into the beginning and end of the sequence, rather than adding it to the interval in the middle of the sequence. This might result in better noise cancellation especially when ``pulse_alignment`` > 1."
msgstr ""

#: ../../release_notes.rst:2011
msgid "The :class:`~qiskit.opflow.primitive_ops.Z2Symmetries` class now exposes the threshold tolerances used to chop small real and imaginary parts of coefficients. With this one can control how the coefficients of the tapered operator are simplified. For example::"
msgstr ""

#: ../../release_notes.rst:2027
msgid "By default, coefficients are chopped with a tolerance of ``tol=1e-14``."
msgstr ""

#: ../../release_notes.rst:2031
msgid "Added a :meth:`~qiskit.quantum_info.SparsePauliOp.chop` method to the :class:`~qiskit.quantum_info.SparsePauliOp` class that truncates real and imaginary parts of coefficients individually. This is different from the :meth:`.SparsePauliOp.simplify` method which removes a coefficient only if the absolute value is close to 0. For example::"
msgstr ""

#: ../../release_notes.rst:2047
msgid "Note that the chop method does not accumulate the coefficents of the same Paulis, e.g."
msgstr ""

#: ../../release_notes.rst:2058
msgid "Added a new kwarg, ``target``, to the constructor for the :class:`.GatesInBasis` transpiler pass. This new argument can be used to optionally specify a :class:`.Target` object that represents the backend. When set this :class:`.Target` will be used for determining whether a :class:`.DAGCircuit` contains gates outside the basis set and the ``basis_gates`` argument will not be used."
msgstr ""

#: ../../release_notes.rst:2067
msgid "Added partial support for running on ppc64le and s390x Linux platforms. This release will start publishing pre-compiled binaries for ppc64le and s390x Linux platforms on all Python versions. However, unlike other supported platforms not all of Qiskit's upstream dependencies support these platforms yet. So a C/C++ compiler may be required to build and install these dependencies and a simple ``pip install qiskit-terra`` with just a working Python environment will not be sufficient to install Qiskit. Additionally, these same constraints prevent us from testing the pre-compiled wheels before publishing them, so the same guarantees around platform support that exist for the other platforms don't apply here."
msgstr ""

#: ../../release_notes.rst:2080
msgid "The :class:`~qiskit.opflow.gradients.Gradient` and :class:`~qiskit.opflow.gradients.QFI` classes can now calculate the imaginary part of expectation value gradients. When using a different measurement basis, i.e. ``-Y`` instead of ``Z``, we can measure the imaginary part of gradients The measurement basis can be set with the ``aux_meas_op`` argument."
msgstr ""

#: ../../release_notes.rst:2086
msgid "For the gradients, ``aux_meas_op = Z`` computes ``0.5Re[(⟨ψ(ω)|)O(θ)|dωψ(ω)〉]`` and ``aux_meas_op = -Y`` computes ``0.5Im[(⟨ψ(ω)|)O(θ)|dωψ(ω)〉]``. For the QFIs, ``aux_meas_op = Z`` computes ``4Re[(dω⟨<ψ(ω)|)(dω|ψ(ω)〉)]`` and ``aux_meas_op = -Y`` computes ``4Im[(dω⟨<ψ(ω)|)(dω|ψ(ω)〉)]``. For example::"
msgstr ""

#: ../../release_notes.rst:2114
msgid "The :class:`~.InstructionDurations` class now has support for working with parameters of an instruction. Each entry in an :class:`~.InstructionDurations` object now consists of a tuple of ``(inst_name, qubits, duration, parameters, unit)``. This enables an :class:`~.InstructionDurations` to define durations for an instruction given a certain parameter value to account for different durations with different parameter values on an instruction that takes a numeric parameter."
msgstr ""

#: ../../release_notes.rst:2124
msgid "Added a new value for the ``style`` keyword argument on the circuit drawer function :func:`~.circuit_drawer` and :meth:`.QuantumCircuit.draw` method, ``iqx_dark``. When ``style`` is set to ``iqx_dark`` with the ``mpl`` drawer backend, the output visualization will use a color scheme similar to the the dark mode color scheme used by the IBM Quantum composer. For example:"
msgstr ""

#: ../../release_notes.rst:2144
msgid "Several lazy dependency checkers have been added to the new module :mod:`qiskit.utils.optionals`, which can be used to query if certain Qiskit functionality is available.  For example, you can ask if Qiskit has detected the presence of ``matplotlib`` by asking ``if qiskit.utils.optionals.HAS_MATPLOTLIB``.  These objects only attempt to import their dependencies when they are queried, so you can use them in runtime code without affecting import time."
msgstr ""

#: ../../release_notes.rst:2154
msgid "Import time for :mod:`qiskit` has been significantly improved, especially for those with many of Qiskit Terra's optional dependencies installed."
msgstr ""

#: ../../release_notes.rst:2159
msgid "The :func:`~.marginal_counts` function now supports marginalizing the ``memory`` field of an input :class:`~.Result` object. For example, if the input ``result``  argument is a qiskit :class:`~.Result` object obtained from a 4-qubit measurement we can marginalize onto the first qubit with::"
msgstr ""

#: ../../release_notes.rst:2169
msgid "The output is::"
msgstr ""

#: ../../release_notes.rst:2176
msgid "The internals of the :class:`.StochasticSwap` algorithm have been reimplemented to be multithreaded and are now written in the `Rust <https://www.rust-lang.org/>`__ programming language instead of Cython. This significantly increases the run time performance of the compiler pass and by extension :func:`~.transpile` when run with ``optimization_level`` 0, 1, and 2. By default the pass will use up to the number of logical CPUs on your local system but you can control the number of threads used by the pass by setting the ``RAYON_NUM_THREADS`` environment variable to an integer value. For example, setting ``RAYON_NUM_THREADS=4`` will run the :class:`.StochasticSwap` with 4 threads."
msgstr ""

#: ../../release_notes.rst:2189
msgid "A new environment variable ``QISKIT_FORCE_THREADS`` is available for users to directly control whether potentially multithreaded portions of Qiskit's code will run in multiple threads. Currently this is only used by the :class:`~.StochasticSwap` transpiler pass but it likely will be used other parts of Qiskit in the future. When this env variable is set to ``TRUE`` any multithreaded code in Qiskit Terra will always use multiple threads regardless of any other runtime conditions that might have otherwise caused the function to use a single threaded variant. For example, in :class:`~.StochasticSwap` if the pass is being run as part of a :func:`~.transpile` call with > 1 circuit that is being executed in parallel with ``multiprocessing`` via :func:`~.parallel_map` the :class:`~.StochasticSwap` will not use multiple threads to avoid potentially oversubscribing CPU resources. However, if you'd like to use multiple threads in the pass along with multiple processes you can set ``QISKIT_FORCE_THREADS=TRUE``."
msgstr ""

#: ../../release_notes.rst:2206
msgid "New fake backend classes are available under ``qiskit.providers.fake_provider``. These include mocked versions of ``ibm_cairo``, ``ibm_hanoi``, ``ibmq_kolkata``, ``ibm_nairobi``, and ``ibm_washington``. As with the other fake backends, these include snapshots of calibration and error data taken from the real system, and can be used for local testing, compilation and simulation."
msgstr ""

#: ../../release_notes.rst:2214
msgid "Introduced a new class :class:`~qiskit.circuit.library.StatePreparation`. This class allows users to prepare a desired state in the same fashion as :class:`~qiskit.extensions.Initialize` without the reset being automatically applied."
msgstr ""

#: ../../release_notes.rst:2219
msgid "For example, to prepare a qubit in the state :math:`(|0\\rangle - |1\\rangle) / \\sqrt{2}`::"
msgstr ""

#: ../../release_notes.rst:2228
msgid "The output is as::"
msgstr ""

#: ../../release_notes.rst:2236
msgid "The :class:`.Optimize1qGates` transpiler pass now has support for optimizing :class:`.U1Gate`, :class:`.U2Gate`, and :class:`.PhaseGate` gates with unbound parameters in a circuit. Previously, if these gates had unbound parameters the pass would not use them. For example::"
msgstr ""

#: ../../release_notes.rst:2257
msgid "will be combined to the circuit with only one single-qubit gate::"
msgstr ""

#: ../../release_notes.rst:2264
msgid "The methods :meth:`.Pauli.evolve` and :meth:`.PauliList.evolve` now have a new keyword argument, ``frame``, which is used to perform an evolution of a Pauli by a Clifford. If ``frame='h'`` (default) then it does the Heisenberg picture evolution of a Pauli by a Clifford (:math:`P' = C^\\dagger P C`), and if ``frame='s'`` then it does the Schrödinger picture evolution of a Pauli by a Clifford (:math:`P' = C P C^\\dagger`). The latter option yields a faster calculation, and is also useful in certain cases. This new option makes the calculation of the greedy Clifford decomposition method in :class:`.decompose_clifford` significantly faster."
msgstr ""

#: ../../release_notes.rst:2277
msgid "Added a new module to Qiskit: :mod:`qiskit.primitives`. The primitives module is where APIs are defined which provide different abstractions around computing certain common functions from :class:`~.QuantumCircuit`s. The concept behind a primitive is to provide a higher level object that can be used to perform common computations using a given :class:`~.QuantumCircuit` which abstracts away the details of the underlying execution on a :class:`~Backend`. This enables higher level algorithms and applications to concentrate on performing the computation and not need to worry about the execution and processing of results and have a standardized interface for common computations. For example, estimating an expectation value of a quantum circuit and observable can be performed by any class implementing the :class:`~.BaseEstimator` class and consumed in a standardized manner regardless of the underlying implementation. Applications can then be written using the primitive interface directly."
msgstr ""

#: ../../release_notes.rst:2293
msgid "To start the module contains two types of primitives, the :class:`~.Sampler` (see :class:`~.BaseSampler` for the abstract class definition) and :class:`~.Estimator` (see :class:`~.BaseEstimator` for the abstract class definition). Reference implementations are included in the :mod:`qiskit.primitives` module and are built using the :mod:`qiskit.quantum_info` module which perform ideal simulation of primitive operation. The expectation is that provider packages will offer their own implementations of these interfaces for providers which can efficiently implement the protocol natively (typically using a classical runtime). Additionally, in the future for providers which do not offer a native implementation of the primitives a method will be provided which will enable constructing primitive objects from a :class:`~.Backend`."
msgstr ""

#: ../../release_notes.rst:2308
msgid "Added a new module, :mod:`qiskit.qpy`, which contains the functionality previously exposed in :mod:`qiskit.circuit.qpy_serialization`. The public functions previously exposed at :mod:`qiskit.circuit.qpy_serialization`, :func:`~qiskit.qpy.dump` and :func:`~qiskit.qpy.load` are now available from this new module (although they are still accessible from :mod:`qiskit.circuit.qpy_serialization` but this will be deprecated in a future release). This new module was added in the interest of the future direction of the QPY file format, which in future versions will support representing :mod:`~qiskit.pulse` :class:`~.Schedule` and :class:`~.ScheduleBlock` objects in addition to the :class:`~.QuantumCircuit` objects it supports today."
msgstr ""

#: ../../release_notes.rst:2322
msgid "Added a new attribute, :attr:`~.Target.qubit_properties` to the :class:`~.Target` class. This attribute contains a list of :class:`~.QubitProperties` objects for each qubit in the target. For example::"
msgstr ""

#: ../../release_notes.rst:2329
msgid "will contain the :class:`~.QubitProperties` for qubit number 2 in the target."
msgstr ""

#: ../../release_notes.rst:2332
msgid "For :class:`~.BackendV2` authors, if you were previously defining :class:`~.QubitProperties` directly on your :class:`~.BackendV2` implementation by overriding :meth:`.BackendV2.qubit_properties` this will still work fine. However, if you do move the definition to the underlying :class:`~.Target` object and remove the specialized :meth:`.BackendV2.qubit_properties` implementation which will enable using qubit properties in the transpiler and also maintain API compatibility with your previous implementation."
msgstr ""

#: ../../release_notes.rst:2343
msgid "Added a  new function, :func:`qiskit.algorithms.eval_observables`, which is used to evaluate observables given a bound :class:`~qiskit.circuit.QuantumCircuit`. It originates from a private method, ``_eval_aux_ops()``, of the :class:`qiskit.algorithms.VQE` class but the new :func:`~qiskit.algorithms.eval_observables` function is now more general so that it can be used in other algorithms, for example time evolution algorithms."
msgstr ""

#: ../../release_notes.rst:2353
msgid "The basis search strategy in :class:`~.BasisTranslator` transpiler pass has been modified into a variant of Dijkstra search which greatly improves the runtime performance of the pass when attempting to target an unreachable basis."
msgstr ""

#: ../../release_notes.rst:2360
msgid "The :class:`~.DenseLayout` transpiler pass is now multithreaded, which greatly improves the runtime performance of the pass. By default, it will use the number of logical CPUs on your local system, but you can control the number of threads used by the pass by setting the ``RAYON_NUM_THREADS`` environment variable to an integer value. For example, setting ``RAYON_NUM_THREADS=4`` will run the :class:`~.DenseLayout` pass with 4 threads."
msgstr ""

#: ../../release_notes.rst:2370
msgid "The internal computations of :meth:`.Statevector.expectation_value` and :meth:`.DensityMatrix.expectation_value` methods have been reimplemented in the Rust programming language. This new implementation is multithreaded and by default for a :class:`~.Statevector` or :class:`~.DensityMatrix` >= 19 qubits will spawn a thread pool with the number of logical CPUs available on the local system. You can you can control the number of threads used by setting the ``RAYON_NUM_THREADS`` environment variable to an integer value. For example, setting ``RAYON_NUM_THREADS=4`` will only use 4 threads in the thread pool."
msgstr ""

#: ../../release_notes.rst:2382
msgid "Added a new :meth:`.SparsePauliOp.from_sparse_list` constructor that takes an iterable, where the elements represent Pauli terms that are themselves sparse, so that ``\"XIIIIIIIIIIIIIIIX\"`` can now be written as ``(\"XX\", [0, 16])``. For example, the operator"
msgstr ""

#: ../../release_notes.rst:2387
msgid "H = X_0 Z_3 + 2 Y_1 Y_4"
msgstr ""

#: ../../release_notes.rst:2391
msgid "can now be constructed as"
msgstr ""

#: ../../release_notes.rst:2399
msgid "This facilitates the construction of very sparse operators on many qubits, as is often the case for Ising Hamiltonians."
msgstr ""

#: ../../release_notes.rst:2404
msgid "The :class:`~qiskit.transpiler.passes.UnitarySynthesis` transpiler pass has a new keyword argument on its constructor, ``target``. This can be used to optionally specify a :class:`~qiskit.transpiler.Target` object which represents the compilation target for the pass. When it's specified it will supersede the values set for ``basis_gates``, ``coupling_map``, and ``backend_props``."
msgstr ""

#: ../../release_notes.rst:2413
msgid "The :class:`~qiskit.transpiler.passes.synthesis.plugin.UnitarySynthesisPlugin` abstract plugin class has a new optional attribute implementations can add, :attr:`~qiskit.transpiler.passes.synthesis.plugin.UnitarySynthesisPlugin.supports_target`. If a plugin has this attribute set to ``True`` a :class:`~qiskit.transpiler.Target` object will be passed in the ``options`` payload under the ``target`` field. The expectation is that this :class:`~qiskit.transpiler.Target` object will be used in place of ``coupling_map``, ``gate_lengths``, ``basis_gates``, and ``gate_errors``."
msgstr ""

#: ../../release_notes.rst:2423
msgid "Introduced a new transpiler pass workflow for building :class:`~.PassManager` objects for scheduling :class:`~.QuantumCircuit` objects in the transpiler. In the new workflow scheduling and alignment passes are all :class:`~.AnalysisPass` objects that only update the property set of the pass manager, specifically new property set item ``node_start_time``, which holds the absolute start time of each opnode. A separate :class:`~.TransformationPass` such as :class:`~.PadDelay` is subsequently used to apply scheduling to the DAG. This new workflow is both more efficient and can correct for additional timing constraints exposed by a backend."
msgstr ""

#: ../../release_notes.rst:2432
msgid "Previously, the pass chain would have been implemented as ``scheduling -> alignment`` which were both transform passes thus there were multiple :class:`~.DAGCircuit` instances recreated during each pass. In addition, scheduling occured in each pass to obtain instruction start time. Now the required pass chain becomes ``scheduling -> alignment -> padding`` where the :class:`~.DAGCircuit` update only occurs at the end with the ``padding`` pass."
msgstr ""

#: ../../release_notes.rst:2439
msgid "For those who are creating custom :class:`~.PassManager` objects that involve circuit scheduling you will need to adjust your :class:`~.PassManager` to insert one of the :class:`~.BasePadding` passes (currently either :class:`~.PadDelay` or :class:`~.PadDynamicalDecoupling` can be used) at the end of the scheduling pass chain. Without the padding pass the scheduling passes will not be reflected in the output circuit of the :meth:`~.PassManager.run` method of your custom :class:`~.PassManager`."
msgstr ""

#: ../../release_notes.rst:2447
msgid "For example, if you were previously building your :class:`~.PassManager` with something like::"
msgstr ""

#: ../../release_notes.rst:2461
msgid "you can instead use::"
msgstr ""

#: ../../release_notes.rst:2475
msgid "which will both be more efficient and also align instructions based on any hardware constraints."
msgstr ""

#: ../../release_notes.rst:2479
msgid "Added a new transpiler pass :class:`~.ConstrainedReschedule` pass. The :class:`~.ConstrainedReschedule` pass considers both hardware alignment constraints that can be definied in a :class:`.BackendConfiguration` object, ``pulse_alignment`` and ``acquire_alignment``. This new class supersedes the previosuly existing :class:`~.AlignMeasures` as it performs the same alignment (via the property set) for measurement instructions in addition to general instruction alignment. By setting the ``acquire_alignment`` constraint argument for the :class:`~.ConstrainedReschedule` pass it is a drop-in replacement of :class:`~.AlignMeasures` when paired with a new :class:`~.BasePadding` pass."
msgstr ""

#: ../../release_notes.rst:2491
msgid "Added two new transpiler passes :class:`~.ALAPScheduleAnalysis` and :class:`~.ASAPScheduleAnalysis` which superscede the :class:`~.ALAPSchedule` and :class:`~.ASAPSchedule` as part of the reworked transpiler workflow for schedling. The new passes perform the same scheduling but in the property set and relying on a :class:`~.BasePadding` pass to adjust the circuit based on all the scheduling alignment analysis."
msgstr ""

#: ../../release_notes.rst:2497
msgid "The standard behavior of these passes also aligns timing ordering with the topological ordering of the DAG nodes. This change may affect the scheduling outcome if it includes conditional operations, or simultaneously measuring two qubits with the same classical register (edge-case).     To reproduce conventional behavior, set ``clbit_write_latency`` identical to the measurement instruction length."
msgstr ""

#: ../../release_notes.rst:2503
msgid "For example, consider scheduling an input circuit like:"
msgstr ""

#: ../../release_notes.rst:2542
msgid "As you can see in the timeline view, the measurement on ``q_2`` starts before the conditional X gate on the ``q_1``, which seems to be opposite to the topological ordering of the node. This is also expected behavior because clbit write-access happens at the end edge of the measure instruction, and the read-access of the conditional gate happens the begin edge of the instruction. Thus topological ordering is preserved on the timeslot of the classical register, which is not captured by the timeline view. However, this assumes a paticular microarchitecture design, and the circuit is not necessary scheduled like this."
msgstr ""

#: ../../release_notes.rst:2552
msgid "By using the default configuration of passes, the circuit is schedule like below."
msgstr ""

#: ../../release_notes.rst:2572
msgid "Note that clbit is locked throughout the measurement instruction interval. This behavior is designed based on the Qiskit Pulse, in which the acquire instruction takes ``AcquireChannel`` and ``MemorySlot`` which are not allowed to overlap with other instructions, i.e. simultaneous memory access from the different instructions is prohibited. This also always aligns the timing ordering with the topological node ordering."
msgstr ""

#: ../../release_notes.rst:2580
msgid "Added a new transpiler pass :class:`~.PadDynamicalDecoupling` which supersedes the :class:`~.DynamicalDecoupling` pass as part of the reworked transpiler workflow for scheduling. This new pass will insert dynamical decoupling sequences into the circuit per any scheduling and alignment analysis that occured in earlier passes."
msgstr ""

#: ../../release_notes.rst:2588
msgid "The :func:`~.plot_gate_map` visualization function and the functions built on top of it, :func:`~.plot_error_map` and :func:`~.plot_circuit_layout`, have a new keyword argument, ``qubit_coordinates``. This argument takes a sequence of 2D coordinates to use for plotting each qubit in the backend being visualized. If specified this sequence must have a length equal to the number of qubits on the backend and it will be used instead of the default behavior."
msgstr ""

#: ../../release_notes.rst:2598
msgid "The :func:`~.plot_gate_map` visualization function and the functions built on top of it, :func:`~.plot_error_map` and :func:`~.plot_circuit_layout`, now are able to plot any backend not just those with the number of qubits equal to one of the IBM backends. This relies on the retworkx ``spring_layout()`` `function <https://qiskit.org/documentation/retworkx/apiref/retworkx.spring_layout.html>`__ to generate the layout for the visualization. If the default layout doesn't work with a backend's particular coupling graph you can use the ``qubit_coordinates`` function to set a custom layout."
msgstr ""

#: ../../release_notes.rst:2610
msgid "The :func:`~.plot_gate_map` visualization function and the functions built on top of it, :func:`~.plot_error_map` and :func:`~.plot_circuit_layout`, are now able to function with a :class:`~.BackendV2` based backend. Previously, these functions only worked with :class:`~.BaseBackend` or :class:`~.BackendV1` based backends."
msgstr ""

#: ../../release_notes.rst:2618
msgid "Added a new transpiler pass, :class:`~.SetIOLatency`. This pass takes two arguments ``clbit_write_latency`` and ``conditional_latency`` to define the I/O latency for classical bits and classical conditions on a backend. This pass will then define these values on the pass manager's property set to enable subsequent scheduling and alignment passes to correct for these latencies and provide a more presice scheduling output of a dynamic circuit."
msgstr ""

#: ../../release_notes.rst:2627
msgid "A new transpiler pass :class:`.PadDelay` has been added. This pass fills idle time on the qubit wires with :class:`~.circuit.Delay` instructions. This pass is part of the new workflow for scheduling passes in the transpiler and depends on a scheduling analysis pass (such as :class:`~.ALAPScheduleAnalysis` or :class:`~ASAPScheduleAnalysis`) and any alignment passes (such as :class:`~.ConstrainedReschedule`) to be run prior to :class:`.PadDelay`."
msgstr ""

#: ../../release_notes.rst:2637
msgid "The :class:`~.VF2Layout` transpiler pass has a new keyword argument, ``target`` which is used to provide a :class:`~.Target` object for the pass. When specified, the :class:`~.Target` will be used by the pass for all information about the target device. If it is specified, the ``target`` option will take priority over the ``coupling_map`` and ``properties`` arguments."
msgstr ""

#: ../../release_notes.rst:2646
msgid "Allow callables as optimizers in :class:`~qiskit.algorithms.VQE` and :class:`~qiskit.algorithms.QAOA`. Now, the optimizer can either be one of Qiskit's optimizers, such as :class:`~qiskit.algorithms.optimizers.SPSA` or a callable with the following signature:"
msgstr ""

#: ../../release_notes.rst:2666
msgid "The above signature also allows to directly pass any SciPy minimizer, for instance as"
msgstr ""

#: ../../release_notes.rst:2683
msgid "When running :func:`.parallel_map` (which is done internally by performance sensitive functions such as :func:`.transpile` and :func:`.assemble`) in a subprocess launched outside of :func:`.parallel_map`, it is possible that the parallel dispatch performed inside :func:`.parallel_map` will hang and never return. This is due to upstream issues in CPython around the default method to launch subprocesses on Linux and macOS with Python 3.7 (see https://bugs.python.org/issue40379 for more details). If you encounter this, you have two options: you can either remove the nested parallel processes, as calling :func:`.parallel_map` from a main process should work fine; or you can manually call the CPython standard library ``multiprocessing`` module to perform similar parallel dispatch from a subprocess, but use the ``\"spawn\"`` or ``\"forkserver\"`` launch methods to avoid the potential to have things get stuck and never return."
msgstr ""

#: ../../release_notes.rst:2706
msgid "The classes :class:`.Qubit`, :class:`.Clbit` and :class:`.AncillaQubit` now have the ``__slots__`` attribute.  This is to reduce their memory usage.  As a side effect, they can no longer have arbitrary data attached as attributes to them.  This is very unlikely to have any effect on downstream code other than performance benefits."
msgstr ""

#: ../../release_notes.rst:2714
msgid "The core dependency ``retworkx`` had its version requirement bumped to 0.11.0, up from 0.10.1. This improves the performance of transpilation pass :class:`~qiskit.transpiler.passes.ConsolidateBlocks`."
msgstr ""

#: ../../release_notes.rst:2720
msgid "The minimum supported version of ``symengine`` is now 0.9.0. This was necessary to improve compatibility with Python's ``pickle`` module which is used internally as part of parallel dispatch with :func:`.parallel_map`."
msgstr ""

#: ../../release_notes.rst:2726
msgid "The default value of ``QISKIT_PARALLEL`` when running with Python 3.9 on Linux is now set to ``TRUE``. This means when running :func:`.parallel_map` or functions that call it internally, such as :func:`.transpile` and :func:`.assemble`, the function will be executed in multiple processes and should have better run time performance. This change was made because the issues with reliability of parallel dispatch appear to have been resolved (see `#6188 <https://github.com/Qiskit/qiskit-terra/issues/6188>`__ for more details). If you still encounter issues because of this you can disable multiprocessing and revert to the previous default behavior by setting the ``QISKIT_PARALLEL`` environment variable to ``FALSE``, or setting the ``parallel`` option to ``False`` in your user config file (also please file an issue so we can track any issues related to multiprocessing)."
msgstr ""

#: ../../release_notes.rst:2741
msgid "The previously deprecated ``MSGate`` gate class previously found in :mod:`qiskit.circuit.library` has been removed. It was originally deprecated in the 0.16.0 release. Instead the :class:`~qiskit.circuit.library.GMS` class should be used, as this allows you to create an equivalent 2 qubit MS gate in addition to an ``MSGate`` for any number of qubits."
msgstr ""

#: ../../release_notes.rst:2749
msgid "The previously deprecated ``mirror()`` method of the :class:`~qiskit.circuit.Instruction` class has been removed. It was originally deprecated in 0.15.0 release. Instead you should use :meth:`.Instruction.reverse_ops`."
msgstr ""

#: ../../release_notes.rst:2755
msgid "The previously deprecated ``num_ancilla_qubits()`` method of the :class:`qiskit.circuit.library.PiecewiseLinearPauliRotations` and :class:`qiskit.circuit.library.WeightedAdder` classes has been removed. It was originally deprecated in the 0.16.0 release. Instead the :meth:`.PiecewiseLinearPauliRotations.num_ancillas` and :meth:`.WeightedAdder.num_ancillas` methods should be used."
msgstr ""

#: ../../release_notes.rst:2764
msgid "The previously deprecated ``reverse`` argument on the constructor for the :class:`~qiskit.circuit.library.PolynomialPauliRotations` class has been removed. It was originally deprecated in the 0.15.0 release. Instead you should use the :meth:`.QuantumCircuit.reverse_bits` method to reverse the :class:`~qiskit.circuit.library.PolynomialPauliRotations` circuit if needed."
msgstr ""

#: ../../release_notes.rst:2772
msgid "The previously deprecated ``angle`` argument on the constructors for the :class:`~qiskit.circuit.library.C3SXGate` and :class:`~qiskit.circuit.library.C3XGate` gate classes has been removed. It was originally deprecated in the 0.17.0 release. Instead for fractional 3-controlled X gates you can use the :meth:`.C3XGate.power` method."
msgstr ""

#: ../../release_notes.rst:2779
msgid "Support for using ``np.ndarray`` objects as part of the :attr:`~qiskit.circuit.Gate.params` attribute of a :class:`~qiskit.circuit.Gate` object has been removed. This has been deprecated since Qiskit Terra 0.16.0 and now will no longer work. Instead one should create a new subclass of :class:`~qiskit.circuit.Gate` and explicitly allow a ``np.ndarray`` input by overloading the :meth:`~.Gate.validate_parameter` method."
msgstr ""

#: ../../release_notes.rst:2787
msgid "A new extra ``csp-layout-pass`` has been added to the install target for ``pip install qiskit-terra``, and is also included in the ``all`` extra. This has no effect in Qiskit Terra 0.20, but starting from Qiskit Terra 0.21, the dependencies needed only for the :class:`.CSPLayout` transpiler pass will be downgraded from requirements to optionals, and installed by this extra. You can prepare a package that depends on this pass by setting its requirements (or ``pip install`` command) to target ``qiskit-terra[csp-layout-pass]``."
msgstr ""

#: ../../release_notes.rst:2798
msgid "Support for running with Python 3.6 has been removed. To run Qiskit you need a minimum Python version of 3.7."
msgstr ""

#: ../../release_notes.rst:2803
msgid "The :class:`~.AmplitudeEstimator` now inherits from the ``ABC`` class from the Python standard library. This requires any subclass to implement the :meth:`~.AmplitudeEstimator.estimate` method when previously it wasn't required. This was done because the original intent of the class was to always be a child class of ``ABC``, as the :meth:`~.AmplitudeEstimator.estimate` is required for the operation of an :class:`~.AmplitudeEstimator` object. However, if you were previously defining an :class:`~.AmplitudeEstimator` subclass that didn't implement :meth:`~.AmplitudeEstimator.estimate` this will now result in an error."
msgstr ""

#: ../../release_notes.rst:2815
msgid "The error raised by :class:`.HoareOptimizer` if the optional dependency ``z3`` is not available has changed from :class:`.TranspilerError` to :class:`.MissingOptionalLibraryError` (which is both a :class:`.QiskitError` and an ``ImportError``).  This was done to be consistent with the other optional dependencies."
msgstr ""

#: ../../release_notes.rst:2823
msgid "On Linux, the minimum library support has been raised from the `manylinux2010 VM <https://www.python.org/dev/peps/pep-0571/>`__ to `manylinux2014 <https://www.python.org/dev/peps/pep-0599/>`__.  This mirrors similar changes in Numpy and Scipy.  There should be no meaningful effect for most users, unless your system still contains a very old version of ``glibc``."
msgstr ""

#: ../../release_notes.rst:2832
msgid "The :func:`~.marginal_counts` function when called with a :class:`~.Result` object input, will now marginalize the ``memory`` field of experiment data if it's set in the input :class:`~.Result`. Previously, the ``memory`` field in the the input was not marginalized. This change was made because the previous behavior would result in the ``counts`` field not matching the ``memory`` field after :func:`~.marginal_counts` was called. If the previous behavior is desired it can be restored by setting ``marginalize_memory=None`` as an argument to :func:`~.marginal_counts` which will not marginalize the ``memory`` field."
msgstr ""

#: ../../release_notes.rst:2844
msgid "The :class:`.StochasticSwap` transpiler pass may return different results with the same seed value set. This is due to the internal rewrite of the transpiler pass to improve runtime performance. However, this means that if you ran :func:`~.transpile` with ``optimization_level`` 0, 1 (the default), or 2 with a value set for ``seed_transpiler`` you may get an output with different swap mapping present after upgrading to Qiskit Terra 0.20.0."
msgstr ""

#: ../../release_notes.rst:2853
msgid "To build Qiskit Terra from source a `Rust <https://www.rust-lang.org/>`__ compiler is now needed. This is due to the internal rewrite of the :class:`.StochasticSwap` transpiler pass which greatly improves the runtime performance of the transpiler. The rust compiler can easily be installed using rustup, which can be found here: https://rustup.rs/"
msgstr ""

#: ../../release_notes.rst:2861
msgid "The :attr:`~.PauliEvolutionGate.name` attribute of the :class:`~qiskit.circuit.library.PauliEvolutionGate` class has been changed to always be ``\"PauliEvolution\"``. This change was made to be consistent with other gates in Qiskit and enables other parts of Qiskit to quickly identify when a particular operation in a circuit is a :class:`~qiskit.circuit.library.PauliEvolutionGate`. For example, it enables the unrolling to Pauli evolution gates."
msgstr ""

#: ../../release_notes.rst:2869
msgid "Previously, the name contained the operators which are evolved, which is now available via the :attr:`.PauliEvolutionGate.label` attribute. If a circuit with a :class:`~.PauliEvolutionGate` is drawn, the gate will still show the same information, which gates are being evolved."
msgstr ""

#: ../../release_notes.rst:2876
msgid "The previously deprecated methods:"
msgstr ""

#: ../../release_notes.rst:2878
msgid "``qiskit.algorithms.VQE.get_optimal_cost``"
msgstr ""

#: ../../release_notes.rst:2879
msgid "``qiskit.algorithms.VQE.get_optimal_circuit``"
msgstr ""

#: ../../release_notes.rst:2880
msgid "``qiskit.algorithms.VQE.get_optimal_vector``"
msgstr ""

#: ../../release_notes.rst:2881
msgid "``qiskit.algorithms.VQE.optimal_params``"
msgstr ""

#: ../../release_notes.rst:2882
msgid "``qiskit.algorithms.HamiltonianPhaseEstimationResult.most_likely_phase``"
msgstr ""

#: ../../release_notes.rst:2883
msgid "``qiskit.algorithms.PhaseEstimationResult.most_likely_phase``"
msgstr ""

#: ../../release_notes.rst:2885
msgid "which were originally deprecated in the Qiskit Terra 0.18.0 release have been removed and will no longer work."
msgstr ""

#: ../../release_notes.rst:2890
msgid "The :class:`qiskit.algorithms.VariationalAlgorithm` class is now defined as an abstract base class (``ABC``) which will require classes that inherit from it to define both a :attr:`.VariationalAlgorithm.initial_point` getter and setter method."
msgstr ""

#: ../../release_notes.rst:2897
msgid "The ``pass_manager`` kwarg for the :func:`.transpile` function has been removed. It was originally deprecated in the 0.13.0 release. The preferred way to transpile a circuit with a custom :class:`~qiskit.transpiler.PassManager` object is to use the :meth:`~qiskit.transpiler.PassManager.run` method of the :class:`.PassManager` object."
msgstr ""

#: ../../release_notes.rst:2906
msgid "The previously deprecated ``ParametrizedSchedule`` class has been removed and no longer exists. This class was deprecated as a part of the 0.17.0 release. Instead of using this class you can directly parametrize :py:class:`~qiskit.pulse.Schedule` or :py:class:`~qiskit.pulse.ScheduleBlock` objects by specifying a :py:class:`~qiskit.circuit.Parameter` object to the parametric pulse argument."
msgstr ""

#: ../../release_notes.rst:2916
msgid "The module ``qiskit.circuit.library.probability_distributions`` has been removed and no longer exists as per the deprecation notice from qiskit-terra 0.17.0 (released Apr 1, 2021).  The affected classes are ``UniformDistribution``, ``NormalDistribution``, and ``LogNormalDistribution``. They are all moved to the `qiskit-finance <https://qiskit.org/documentation/finance/getting_started.html>`__ library, into its circuit library module: ``qiskit_finance.circuit.library.probability_distributions``."
msgstr ""

#: ../../release_notes.rst:2927
msgid "The previous :class:`qiskit.test.mock.fake_mumbai_v2.FakeMumbaiV2` class has been renamed to ``FakeMumbaiFractionalCX`` to differentiate it from the :class:`~.BackendV2` based fake backend for the IBM Mumbai device, :class:`qiskit.test.mock.backends.FakeMumbaiV2`. If you were previously relying on the :class:`~qiskit.test.mock.fake_mumbai_v2.FakeMumbaiV2` class to get a fake backend that had fractional applications of :class:`~.CXGate` defined in its target you need to use ``FakeMumbaiFractionalCX`` class as the :class:`~qiskit.test.mock.backends.FakeMumbaiV2` will no longer have those extra gate definitions in its :class:`~.Target`."
msgstr ""

#: ../../release_notes.rst:2939
msgid "The resolver used by :meth:`.QuantumCircuit.append` (and consequently all methods that add an instruction onto a :class:`.QuantumCircuit`) to convert bit specifiers has changed to make it faster and more reliable.  Certain constructs like::"
msgstr ""

#: ../../release_notes.rst:2950
msgid "will now work where they previously would incorrectly raise an error, but certain pathological inputs such as::"
msgstr ""

#: ../../release_notes.rst:2956
msgid "will now raise errors where they may have occasionally (erroneously) succeeded before.  For almost all correct uses, there should be no noticeable change except for a general speed-up."
msgstr ""

#: ../../release_notes.rst:2962
msgid "The semi-public internal method :meth:`.QuantumCircuit._append` no longer checks the types of its inputs, and assumes that there are no invalid duplicates in its argument lists.  This function is used by certain internal parts of Qiskit and other libraries to build up :class:`.QuantumCircuit` instances as quickly as possible by skipping the error checking when the data is already *known* to be correct.  In general, users or functions taking in user data should use the public :meth:`.QuantumCircuit.append` method, which resolves integer bit specifiers, broadcasts its arguments and checks the inputs for correctness."
msgstr ""

#: ../../release_notes.rst:2974
msgid "Cython is no longer a build dependency of Qiskit Terra and is no longer required to be installed when building Qiskit Terra from source."
msgstr ""

#: ../../release_notes.rst:2979
msgid "The preset passmanagers in :mod:`qiskit.transpiler.preset_passmanagers` for all optimization levels 2 and 3 as generated by :func:`~qiskit.transpiler.preset_passmanagers.level_2_pass_manager` and :func:`~qiskit.transpiler.preset_passmanagers.level_3_pass_manager` have been changed to run the :class:`~qiskit.transpiler.passes.VF2Layout` by default prior to the layout pass. The :class:`~qiskit.transpiler.passes.VF2Layout` pass will quickly check if a perfect layout can be found and supersedes what was previously done for optimization levels 2 and 3 which were using a combination of :class:`~qiskit.transpiler.passes.TrivialLayout` and :class:`~qiskit.transpiler.passes.CSPLayout` to try and find a perfect layout. This will result in potentially different behavior when :func:`~qiskit.compiler.transpile` is called by default as it removes a default path for all optimization levels >=2 of using a trivial layout (where ``circuit.qubits[0]`` is mapped to physical qubit 0, ``circuit.qubits[1]`` is mapped to physical qubit 1, etc) assuming the trivial layout is perfect. If your use case was dependent on the trivial layout you can explictly request it when transpiling by specifying ``layout_method=\"trivial\"`` when calling :func:`~qiskit.compiler.transpile`."
msgstr ""

#: ../../release_notes.rst:3001
msgid "The preset pass manager for optimization level 1 (when calling :func:`~qiskit.compiler.transpile` with ``optimization_level=1`` or when no ``optimization_level`` argument is set) as generated by :func:`~qiskit.transpiler.preset_passmanagers.level_1_pass_manager` has been changed so that :class:`~qiskit.transpiler.passes.VF2Layout` is called by default to quickly check if a a perfect layout can be found prior to the :class:`~qiskit.transpiler.passes.DenseLayout`. However, unlike with optimization level 2 and 3 a trivial layout is still attempted prior to running :class:`~qiskit.transpiler.passes.VF2Layout` and if it's a perfect mapping the output from :class:`~qiskit.transpiler.passes.VF2Layout` will be used."
msgstr ""

#: ../../release_notes.rst:3021
msgid "The ``max_credits`` argument to :func:`~.execute_function.execute`, and all of the ``Qobj`` configurations (e.g. :class:`.QasmQobjConfig` and :class:`.PulseQobjConfig`), is deprecated and will be removed in a future release.  The credit system has not been in use on IBM Quantum backends for two years, and the option has no effect.  No alternative is necessary. For example, if you were calling :func:`~.execute_function.execute` as::"
msgstr ""

#: ../../release_notes.rst:3030
msgid "you can simply omit the ``max_credits`` argument::"
msgstr ""

#: ../../release_notes.rst:3036
msgid "Using an odd integer for the ``order`` argument on the constructor of the :class:`~.qiskit.synthesis.SuzukiTrotter` class is deprecated and will no longer work in a future release. The product formulae used by the :class:`~.qiskit.synthesis.SuzukiTrotter` are only defined when the order is even as the Suzuki product formulae is symmetric."
msgstr ""

#: ../../release_notes.rst:3044
msgid "The ``qregs``, ``cregs``, ``layout``, and ``global_phase`` kwargs to the :class:`.MatplotlibDrawer`, :class:`.TextDrawing`, and :class:`.QCircuitImage` classes, and the ``calibrations`` kwarg to the :class:`.MatplotlibDrawer` class, are now deprecated and will be removed in a subsequent release."
msgstr ""

#: ../../release_notes.rst:3058
msgid "Fixed an error in the circuit conversion functions :func:`.circuit_to_gate` and :func:`.circuit_to_instruction` (and their associated circuit methods :meth:`.QuantumCircuit.to_gate` and :meth:`.QuantumCircuit.to_instruction`) when acting on a circuit with registerless bits, or bits in more than one register."
msgstr ""

#: ../../release_notes.rst:3066 ../../release_notes.rst:4235
msgid "Fixed an issue where calling :meth:`.QuantumCircuit.copy` on the \"body\" circuits of a control-flow operation created with the builder interface would raise an error.  For example, this was previously an error, but will now return successfully::"
msgstr ""

#: ../../release_notes.rst:3086
msgid "Added a missing entry from the standard session equivalence library between :class:`.CXGate` and :class:`.CPhaseGate` as well as between :class:`~.CXGate` and :class:`~.CRZGate`."
msgstr ""

#: ../../release_notes.rst:3092
msgid "Fixed an issue where running the ``==`` operator between two :class:`~.SparsePauliOp` objects would raise an error when the two operators had different numbers of coefficients. For example::"
msgstr ""

#: ../../release_notes.rst:3100
msgid "This would previously raise a ``ValueError`` instead of returning ``False``."
msgstr ""

#: ../../release_notes.rst:3104
msgid "Fixed support in :func:`~qiskit.compiler.transpile` for passing a :class:`~.InstructionScheduleMap` object to the underlying :class:`~qiskit.transpiler.PassManager` based on the :class:`~qiskit.transpiler.Target` for :class:`~qiskit.providers.backend.BackendV2` based backends. Previously, the :func:`~qiskit.compiler.transpile` function would not do this processing and any transpiler passes which do not support working with a :class:`~.Target` object yet would not have access to the default pulse calibrations for the instructions from a :class:`~qiskit.providers.backend.BackendV2` backend."
msgstr ""

#: ../../release_notes.rst:3117
msgid "The :class:`~.AmplitudeAmplifier` is now correctly available from the root :mod:`qiskit.algorithms` module directly. Previously it was not included in the re-exported classes off the root module and was only accessible from ``qiskit.algorithms.amplitude_amplifiers``. Fixed `#7751 <https://github.com/Qiskit/qiskit-terra/pull/7752>`__."
msgstr ""

#: ../../release_notes.rst:3125
msgid "Fixed an issue with the ``mpl`` backend for the circuit drawer function :func:`~.circuit_drawer` and the :meth:`.QuantumCircuit.draw` method where gates with conditions would not display properly when a sufficient number of gates caused the drawer to fold over to a second row. Fixed: `#7752 <https://github.com/Qiskit/qiskit-terra/pull/7752>`__."
msgstr ""

#: ../../release_notes.rst:3133
msgid "Fixed an issue where the :meth:`.HHL.construct_circuit` method under certain conditions would not return a correct :class:`~.QuantumCircuit`. Previously, the function had a rounding error in calculating how many qubits were necessary to represent the eigenvalues which would cause an incorrect circuit output."
msgstr ""

#: ../../release_notes.rst:3141
msgid "Fixed an endianness bug in :meth:`.BaseReadoutMitigator.expectation_value` when a string ``diagonal`` was passed.  It will now correctly be interpreted as little endian in the same manner as the rest of Qiskit Terra, instead of big endian."
msgstr ""

#: ../../release_notes.rst:3148
msgid "Fixed an issue with the :func:`.quantum_info.partial_trace` when the function was asked to trace out *no* subsystems, it will now correctly return the :class:`.DensityMatrix` of the input state with all dimensions remaining rather than throwing an error. Fixed `#7613 <https://github.com/Qiskit/qiskit-terra/issues/7612>`__"
msgstr ""

#: ../../release_notes.rst:3156
msgid "Fixed an issue with the ``text`` backend for the circuit drawer function :func:`~.circuit_drawer` and the :meth:`.QuantumCircuit.draw` method when gates that use side text, such as the :class:`~.CPhaseGate` and :class:`~.RZZGate` gate classes, with classical conditions set would not display properly. Fixed `#7532 <https://github.com/Qiskit/qiskit-terra/issues/7532>`__."
msgstr ""

#: ../../release_notes.rst:3165
msgid "Fixed an issue with the :func:`~qiskit.visualization.circuit_drawer` function and :meth:`~qiskit.circuit.QuantumCircuit.draw` method of :class:`~qiskit.circuit.QuantumCircuit`. When using the ``reverse_bits`` option with the ``mpl``, ``latex``, or ``text`` options, bits without registers did not display in the correct order. Fixed `#7303 <https://github.com/Qiskit/qiskit-terra/issues/7303>`__."
msgstr ""

#: ../../release_notes.rst:3174
msgid "Fixed an issue in the :meth:`.LocalReadoutMitigator.assignment_matrix` method where it would previously reject an input value for the ``qubits`` argument that wasn't a trivial sequence of qubits in the form: ``[0, 1, 2, ..., n-1]``. This has been corrected so that now any list of qubit indices to be measured are accepted by the method."
msgstr ""

#: ../../release_notes.rst:3182
msgid "Fixed an issue in the :meth:`.StabilizerState.expectation_value` method's expectation value calculation, where the output expectation value would be incorrect if the input :class:`~.Pauli` operator for the ``oper`` argument had a non-trivial phase. Fixed `#7441 <https://github.com/Qiskit/qiskit-terra/issues/7441>`__."
msgstr ""

#: ../../release_notes.rst:3190
msgid "An opflow expression containing the Pauli identity ``opflow.I`` no longer produces an :class:`~qiskit.circuit.library.IGate` when converted to a circuit. This change fixes a difference in expectation; the identity gate in the circuit indicates a delay however in opflow we expect a mathematical identity -- meaning no operation at all."
msgstr ""

#: ../../release_notes.rst:3197
msgid "The :class:`~qiskit.circuit.library.PauliGate` no longer inserts an :class:`~qiskit.circuit.library.IGate` for Paulis with the label ``\"I\"``."
msgstr ""

#: ../../release_notes.rst:3202
msgid ":class:`.PauliSumOp` equality tests now handle the case when one of the compared items is a single :class:`.PauliOp`. For example, ``0 * X + I == I`` now evaluates to True, whereas it was False prior to this release."
msgstr ""

#: ../../release_notes.rst:3209
msgid "Fixed an issue with the :class:`~.ALAPSchedule` and :class:`~.ASAPSchedule` transpiler passes when working with instructions that had custom pulse calibrations (i.e. pulse gates) set. Previously, the scheduling passes would not use the duration from the custom pulse calibration for thse instructions which would result in the an incorrect scheduling being generated for the circuit. This has been fixed so that now the scheduling passes will use the duration of the custom pulse calibration for any instruction in the circuit which has a custom calibration."
msgstr ""

#: ../../release_notes.rst:3220
msgid "Fixed support for using :class:`~.ParameterExpression` instruction paramaters in the :class:`~.RZXCalibrationBuilder` transpiler pass. Previously, if an instruction parameter included a bound :class:`~.ParameterExpression` the pass would not be able to handle this correctly."
msgstr ""

#: ../../release_notes.rst:3228 ../../release_notes.rst:3517
msgid "Stopped the parser in :meth:`.QuantumCircuit.from_qasm_str` and :meth:`~.QuantumCircuit.from_qasm_file` from accepting OpenQASM programs that identified themselves as being from a language version other than 2.0. This parser is only for OpenQASM 2.0; support for imported circuits from OpenQASM 3.0 will be added in an upcoming release."
msgstr ""

#: ../../release_notes.rst:3236
msgid "The OpenQASM 3 exporter, :class:`.qasm3.Exporter`, will now escape register and parameter names that clash with reserved OpenQASM 3 keywords by generating a new unique name.  Registers and parameters with the same name will no longer have naming clashes in the code output from the OpenQASM 3 exporter. Fixed `#7742 <https://github.com/Qiskit/qiskit-terra/issues/7742>`__."
msgstr ""

#: ../../release_notes.rst:3243 ../../release_notes.rst:3567
msgid "Aer 0.10.3"
msgstr ""

#: ../../release_notes.rst:3253 ../../release_notes.rst:3668
#: ../../release_notes.rst:3725 ../../release_notes.rst:4159
msgid "IBM Q Provider 0.18.3"
msgstr ""

#: ../../release_notes.rst:3259
msgid "Qiskit 0.34.2"
msgstr ""

#: ../../release_notes.rst:3264
msgid "Terra 0.19.2"
msgstr ""

#: ../../release_notes.rst:3273
msgid "Qiskit Terra 0.19.2 is predominantly a bugfix release, but also now comes with wheels built for Python 3.10 on all major platforms."
msgstr ""

#: ../../release_notes.rst:3284 ../../release_notes.rst:3590
msgid "Added support for running with Python 3.10. This includes publishing precompiled binaries to PyPI for Python 3.10 on supported platforms."
msgstr ""

#: ../../release_notes.rst:3295
msgid "Starting from Python 3.10, Qiskit Terra will have reduced support for 32-bit platforms. These are Linux i686 and 32-bit Windows. These platforms with Python 3.10 are now at Tier 3 instead of Tier 2 support (per the tiers defined in: https://qiskit.org/documentation/getting_started.html#platform-support) This is because the upstream dependencies Numpy and Scipy have dropped support for them. Qiskit will still publish precompiled binaries for these platforms, but we're unable to test the packages prior to publishing, and you will need a C/C++ compiler so that ``pip`` can build their dependencies from source. If you're using one of these platforms, we recommended that you use Python 3.7, 3.8, or 3.9."
msgstr ""

#: ../../release_notes.rst:3314
msgid "Fixed a bug where the :class:`.CVaRMeasurement` attempted to convert a :class:`.PauliSumOp` to a dense matrix to check whether it were diagonal. For large operators (> 16 qubits) this computation was extremely expensive and raised an error if not explicitly enabled using ``qiskit.utils.algorithm_globals.massive = True``. The check is now efficient even for large numbers of qubits."
msgstr ""

#: ../../release_notes.rst:3322
msgid ":meth:`.DAGCircuit.draw` and the associated function :func:`.dag_drawer` will now show a more useful error message when the provided filename is not valid."
msgstr ""

#: ../../release_notes.rst:3328
msgid ":meth:`.QuantumCircuit.add_register` will no longer cause duplicate :class:`.AncillaQubit` references in a circuit when given an :class:`.AncillaRegister` whose bits are already present."
msgstr ""

#: ../../release_notes.rst:3334
msgid "Fixed conversion of :class:`.QuantumCircuit`\\ s with classical conditions on single, registerless :class:`.Clbit` \\s to :class:`~.circuit.Instruction`\\ s when using the :func:`.circuit_to_instruction` function or the :meth:`.QuantumCircuit.to_instruction` method.  For example, the following will now work::"
msgstr ""

#: ../../release_notes.rst:3348
msgid "Registers will now correctly reject duplicate bits.  Fixed `#7446 <https://github.com/Qiskit/qiskit-terra/issues/7446>`__."
msgstr ""

#: ../../release_notes.rst:3353
msgid "The ``FakeOpenPulse2Q`` mock backend now has T2 times and readout errors stored for its qubits.  These are arbitrary values, approximately consistent with real backends at the time of its creation."
msgstr ""

#: ../../release_notes.rst:3359
msgid "Fix the qubit order of 2-qubit evolutions in the :class:`.PauliEvolutionGate`, if used with a product formula synthesis. For instance, before, the evolution of ``IIZ + IZI + IZZ``"
msgstr ""

#: ../../release_notes.rst:3370
msgid "produced"
msgstr ""

#: ../../release_notes.rst:3382
msgid "whereas now it correctly yields"
msgstr ""

#: ../../release_notes.rst:3395
msgid "Fixed a problem in the ``latex`` and ``mpl`` circuit drawers when register names with multiple underscores in the name did not display correctly."
msgstr ""

#: ../../release_notes.rst:3400
msgid "Negative numbers in array outputs from the drawers will now appear as decimal numbers instead of fractions with huge numerators and denominators.  Like positive numbers, they will still be fractions if the ratio is between small numbers."
msgstr ""

#: ../../release_notes.rst:3407
msgid "Fixed an issue with the :meth:`.Target.get_non_global_operation_names` method when running on a target incorrectly raising an exception on targets with ideal global operations. Previously, if this method was called on a target that contained any ideal globally defined operations, where the instruction properties are set to ``None``, this method would raise an exception instead of treating that instruction as global."
msgstr ""

#: ../../release_notes.rst:3416
msgid "Fixed an issue with the :func:`~qiskit.compiler.transpile` function where it could fail when being passed a :class:`.Target` object directly with the ``target`` kwarg."
msgstr ""

#: ../../release_notes.rst:3422
msgid "Fixed an issue with the :func:`~qiskit.compiler.transpile` function where it could fail when the ``backend`` argument was a :class:`.BackendV2` or a :class:`.Target` via the ``target`` kwarg that contained ideal globally defined operations."
msgstr ""

#: ../../release_notes.rst:3429
msgid "Fixed an issue where plotting Bloch spheres could cause an ``AttributeError`` to be raised in Jupyter or when trying to crop figures down to size with Matplotlib 3.3 or 3.4 (but not 3.5).  For example, the following code would previously crash with a message::"
msgstr ""

#: ../../release_notes.rst:3436
msgid "but will now succeed with all current supported versions of Matplotlib::"
msgstr ""

#: ../../release_notes.rst:3443
msgid "Fixed a bug in :meth:`.PauliSumOp.permute` where the object on which the method is called was permuted in-place, instead of returning a permuted copy.  This bug only occured for permutations that left the number of qubits in the operator unchanged."
msgstr ""

#: ../../release_notes.rst:3450
msgid "Fixed the :meth:`.PauliEvolutionGate.inverse` method, which previously computed the inverse by inverting the evolution time.  This was only the correct inverse if the operator was evolved exactly. In particular, this led to the inverse of Trotterization-based time evolutions being incorrect."
msgstr ""

#: ../../release_notes.rst:3457
msgid "The :meth:`.QuantumInstance.execute` method will no longer mutate its input if it is given a list of circuits."
msgstr ""

#: ../../release_notes.rst:3462
msgid "Fixed QPY serialisation of custom instructions which had an explicit no-op definition.  Previously these would be written and subsequently read the same way as if they were opaque gates (with no given definition).  They will now correctly round-trip an empty definition.  For example, the following will now be correct::"
msgstr ""

#: ../../release_notes.rst:3493
msgid "Added a missing :attr:`.BackendV2.provider` attribute to implementations of the :class:`.BackendV2` abstract class. Previously, :class:`.BackendV2` backends could be initialized with a provider but that was not accessible to users."
msgstr ""

#: ../../release_notes.rst:3500
msgid "Fixed support for the :class:`.QuantumInstance` class when running with a :class:`.BackendV2` backend. Previously, attempting to use a :class:`.QuantumInstance` with a :class:`.BackendV2` would have resulted in an error."
msgstr ""

#: ../../release_notes.rst:3507
msgid "Fixed a bug in :class:`~qiskit.algorithms.VQE` where the parameters of the ansatz were still explicitly ASCII-sorted by their name if the ansatz was resized. This led to a mismatched order of the optimized values in the ``optimal_point`` attribute of the result object."
msgstr ""

#: ../../release_notes.rst:3512
msgid "In particular, this bug occurred if no ansatz was set by the user and the VQE chose a default with 11 or more free parameters."
msgstr ""

#: ../../release_notes.rst:3525
msgid "Fixed QPY serialization of :class:`.QuantumCircuit` objects that contained control flow instructions. Previously if you attempted to serialize a circuit containing :class:`.IfElseOp`, :class:`.WhileLoopOp`, or :class:`.ForLoopOp` the serialization would fail. Fixed `#7583 <https://github.com/Qiskit/qiskit-terra/issues/7583>`__."
msgstr ""

#: ../../release_notes.rst:3533
msgid "Fixed QPY serialization of :class:`.QuantumCircuit` containing subsets of bits from a :class:`.QuantumRegister` or :class:`.ClassicalRegister`. Previously if you tried to serialize a circuit like this it would incorrectly treat these bits as standalone :class:`.Qubit` or :class:`.Clbit` without having a register set. For example, if you try to serialize a circuit like::"
msgstr ""

#: ../../release_notes.rst:3550
msgid "when that circuit is loaded now the registers will be correctly populated fully even though the circuit only contains a subset of the bits from the register."
msgstr ""

#: ../../release_notes.rst:3556
msgid ":class:`.QFT` will now warn if it is instantiated or built with settings that will cause it to lose precision, rather than raising an ``OverflowError``.  This can happen if the number of qubits is very large (slightly over 1000) without the approximation degree being similarly large. The circuit will now build successfully, but some angles might be indistinguishable from zero, due to limitations in double-precision floating-point numbers."
msgstr ""

#: ../../release_notes.rst:3576
msgid "Qiskit Aer 0.10.3 is mainly a bugfix release, fixing several bugs that have been discovered since the 0.10.2 release. Howver, this release also introduces support for running with Python 3.10 including precompiled binary wheels on all major platforms. This release also includes precompiled binary wheels for arm64 on macOS."
msgstr ""

#: ../../release_notes.rst:3595
msgid "Added support for M1 macOS systems. Precompiled binaries for supported Python versions >=3.8 on arm64 macOS will now be published on PyPI for this and future releases."
msgstr ""

#: ../../release_notes.rst:3606
msgid "Qiskit Aer no longer fully supports 32 bit platforms on Python >= 3.10. These are Linux i686 and 32-bit Windows. These platforms with Python 3.10 are now at Tier 3 instead of Tier 2 support (per the tiers defined in: https://qiskit.org/documentation/getting_started.html#platform-support) This is because the upstream dependencies Numpy and Scipy have dropped support for them. Qiskit will still publish precompiled binaries for these platforms, but we're unable to test the packages prior to publishing, and you will need a C/C++ compiler so that ``pip`` can build their dependencies from source. If you're using one of these platforms, we recommended that you use Python 3.7, 3.8, or 3.9."
msgstr ""

#: ../../release_notes.rst:3624
msgid "Fixes a bug in :class:`.RelaxationNoisePass` where instruction durations were always assumed to be in *dt* time units, regardless of the actual unit of the isntruction. Now unit conversion is correctly handled for all instruction duration units."
msgstr ""

#: ../../release_notes.rst:3629
msgid "See `#1453 <https://github.com/Qiskit/qiskit-aer/issues/1453>`__ for details."
msgstr ""

#: ../../release_notes.rst:3634
msgid "Fixes an issue with :class:`.LocalNoisePass` for noise functions that return a :class:`.QuantumCircuit` for the noise op. These were appended to the DAG as an opaque circuit instruction that must be unrolled to be simulated. This fix composes them so that the cirucit instructions are added to the new DAG and can be simulated without additional unrolling if all circuit instructions are supported by the simulator."
msgstr ""

#: ../../release_notes.rst:3641
msgid "See `#1447 <https://github.com/Qiskit/qiskit-aer/issues/1447>`__ for details."
msgstr ""

#: ../../release_notes.rst:3646
msgid "Multi-threaded transpilations to generate diagonal gates will now work correctly if the number of gates of a circuit exceeds ``fusion_parallelization_threshold``. Previously, different threads would occasionally fuse the same element into multiple blocks, causing incorrect results."
msgstr ""

#: ../../release_notes.rst:3653
msgid "Fixes a bug with truncation of circuits in parameterized Qobjs. Previously parameters of parameterized QObj could be wrongly resolved if unused qubits of their circuits were truncated, because indices of the parameters were not updated after the instructions on unmeasured qubits were removed."
msgstr ""

#: ../../release_notes.rst:3659
msgid "See `#1427 <https://github.com/Qiskit/qiskit-aer/issues/1427>`__ for details."
msgstr ""

#: ../../release_notes.rst:3674
msgid "Qiskit 0.34.1"
msgstr ""

#: ../../release_notes.rst:3677 ../../release_notes.rst:3739
#: ../../release_notes.rst:4180
msgid "Terra 0.19.1"
msgstr ""

#: ../../release_notes.rst:3684
msgid "Aer 0.10.2"
msgstr ""

#: ../../release_notes.rst:3693
msgid "Fixed simulation of ``for`` loops where the loop parameter was not used in the body of the loop.  For example, previously this code would fail, but will now succeed:"
msgstr ""

#: ../../release_notes.rst:3711
msgid "Fixes a bug in :meth:`.QuantumError.to_dict` where N-qubit circuit instructions where the assembled instruction always applied to qubits ``[0, ..., N-1]`` rather than the instruction qubits. This bug also affected device and fake backend noise models."
msgstr ""

#: ../../release_notes.rst:3716
msgid "See `Issue 1415 <https://github.com/Qiskit/qiskit-aer/issues/1415>`__ for details."
msgstr ""

#: ../../release_notes.rst:3731
msgid "Qiskit 0.34.0"
msgstr ""

#: ../../release_notes.rst:3733
msgid "Qiskit 0.34.0 includes a point release of Qiskit Aer: version 0.10.1, which patches performance regressions in version 0.10.0 that were discovered immediately post-release. See below for the release notes for both Qiskit Aer 0.10.0 and 0.10.1."
msgstr ""

#: ../../release_notes.rst:3746
msgid "Aer 0.10.1"
msgstr ""

#: ../../release_notes.rst:3755
msgid "The Qiskit Aer 0.10.1 patch fixes performance regressions introduced in Qiskit Aer 0.10.0."
msgstr ""

#: ../../release_notes.rst:3765
msgid "Fix performance regression in noisy simulations due to large increase in serialization overhead for loading noise models from Python into C++ resulting from unintended nested Python multiprocessing calls. See `issue 1407 <https://github.com/Qiskit/qiskit-aer/issues/1407>`__ for details."
msgstr ""

#: ../../release_notes.rst:3774
msgid "Aer 0.10.0"
msgstr ""

#: ../../release_notes.rst:3783
msgid "The Qiskit Aer 0.10 release includes several performance and noise model improvements. Some highlights are:"
msgstr ""

#: ../../release_notes.rst:3786
msgid "Improved performance for parallel shot GPU and HPC simulations"
msgstr ""

#: ../../release_notes.rst:3787
msgid "Support for simulation of circuits containing QASM 3.0 control-flow instructions"
msgstr ""

#: ../../release_notes.rst:3788
msgid "Support for relaxation noise on scheduled circuits in backend noise models"
msgstr ""

#: ../../release_notes.rst:3789
msgid "Support of user-created transpiler passes for defining custom gate errors and noise models, and inserting them into circuits."
msgstr ""

#: ../../release_notes.rst:3800
msgid "Added support of QASM 3.0 control-flow instructions introduced in Qiskit-Terra 0.19.0. Supported instructions are :class:`~qiskit.circuit.ForLoopOp`, :class:`~qiskit.circuit.WhileLoopOp`, :class:`~qiskit.circuit.ContinueLoopOp`, :class:`~qiskit.circuit.BreakLoopOp`, :class:`~qiskit.circuit.IfElseOp`."
msgstr ""

#: ../../release_notes.rst:3807
msgid "Added a batched-shot simulation optimization for GPU simulations. This optional feature will use available memory on 1 or more GPUs to run multiple simulation shots in parallel for greatly improved performance on multi-shot simulations with noise models and/or intermediate measurements."
msgstr ""

#: ../../release_notes.rst:3812
msgid "This option is enabled by default when using ``device=\"GPU\"`` and a simulation ``method`` of either ``\"statevector\"`` or ``\"density_matrix\"`` with the :class:`~qiskit.providers.aer.AerSimulator`.  It can be disabled by setting ``batched_shots_gpu=False`` in the simulator options."
msgstr ""

#: ../../release_notes.rst:3817
msgid "This optimization is most beneficial for small to medium numbers of qubits where there is sufficient GPU memory to run multiple simulations in parallel. The maximum number of active circuit qubits for enabling this optimization can be configured using the ``batch_shots_gpu_max_qubits`` simulator option. The default value of this option is 16."
msgstr ""

#: ../../release_notes.rst:3825
msgid "Added the new ``max_shot_size`` option to a custom executor for running multiple shots of a noisy circuit in parallel."
msgstr ""

#: ../../release_notes.rst:3828
msgid "For example configuring ``max_shot_size`` with a custom executor::"
msgstr ""

#: ../../release_notes.rst:3834
msgid "will split the shots of a noisy circuit into multiple circuits. After all individual shots have finished executing, the job results are automatically combined into a single :class:`~qiskit.result.Result` object that is returned by ``job.result()``."
msgstr ""

#: ../../release_notes.rst:3841
msgid "Added the ``mps_swap_direction`` simulator option that allows the user to determine the direction of internal swaps, when they are inserted for a 2-qubit gate. Possible values are ``\"mps_swap_right\"`` and ``\"mps_swap_left\"``. The direction of the swaps may affect performance, depending on the circuit."
msgstr ""

#: ../../release_notes.rst:3848
msgid "Implemented a new measurement sampling optimization for the ``\"matrix_product_state\"`` simulation method of the :class:`~qiskit.providers.aer.AerSimulator`. Currently this algorithm is used only when all qubits are measured and when the simulator ``mps_sample_measure_algorithm`` simulator option is set to ``\"mps_probabilities\"``."
msgstr ""

#: ../../release_notes.rst:3856
msgid "Improved the performance of the measure instruction for the ``\"matrix_product_state\"`` simulation method of the :class:`~qiskit.providers.aer.AerSimulator`."
msgstr ""

#: ../../release_notes.rst:3861
msgid "Added a :class:`~qiskit.providers.aer.library.SaveClifford` instruction for saving the state of the stabilizer simulation method as a :class:`~qiskit.quantum_info.Clifford` object."
msgstr ""

#: ../../release_notes.rst:3865
msgid "Note that this instruction is essentially equivalent to the :class:`~qiskit.providers.aer.library.SaveStabilizer` instruction, however that instruction will return the saved state as a :class:`~qiskit.quantum_info.StabilizerState` object instead of a :class:`~qiskit.quantum_info.Clifford` object."
msgstr ""

#: ../../release_notes.rst:3873
msgid "Added two transpiler passes for inserting instruction-dependent quantum errors into circuits:"
msgstr ""

#: ../../release_notes.rst:3876
msgid ":class:`qiskit.providers.aer.noise.LocalNoisePass`"
msgstr ""

#: ../../release_notes.rst:3877
msgid ":class:`qiskit.providers.aer.noise.RelaxationNoisePass`"
msgstr ""

#: ../../release_notes.rst:3879
msgid "The :class:`~qiskit.providers.aer.noise.LocalNoisePass` pass can be used to implement custom parameterized noise models by defining a noise generating function of the form"
msgstr ""

#: ../../release_notes.rst:3890
msgid "which returns a noise instruction (eg. a :class:`.QuantumError` or other instruction) that can depend on any properties or parameters of the instruction and qubit arguements."
msgstr ""

#: ../../release_notes.rst:3894
msgid "This function can be applied to all instructions in a circuit, or a specified subset (See the :class:`~qiskit.providers.aer.noise.LocalNoisePass` documentation for additional details.)"
msgstr ""

#: ../../release_notes.rst:3899
msgid "The :class:`~qiskit.providers.aer.noise.RelaxationNoisePass` is a special case of the :class:`~qiskit.providers.aer.noise.LocalNoisePass` using a predefined noise function that returns a tensor product of :func:`~qiskit.providers.aer.noise.thermal_relaxation_error` on each qubit in an instruction, dependent on the instruction's duration and the supplied relaxation time constant parameters of the pass."
msgstr ""

#: ../../release_notes.rst:3909
msgid "The basic device noise model implemented by :meth:`.NoiseModel.from_backend` and :meth:`.AerSimulator.from_backend` has been upgraded to allow adding duration-dependent relaxation errors on circuit delay gates using the :class:`~qiskit.providers.aer.noise.RelaxationNoisePass`."
msgstr ""

#: ../../release_notes.rst:3916
msgid "To enable this noise when running noisy simulations you must first schedule your circuit to insert scheduled delay instructions as follows:"
msgstr ""

#: ../../release_notes.rst:3927
msgid "If the circuit is transpiled without being scheduled (and also contains no delay instructions) the noisy simulation will not include the effect of delay relaxation errors. In this case the simulation will be equivalent to the previous qiskit-aer 0.9 simulation where relaxation noise is only added to gate instructions based on their duration as obtained from the backend properties."
msgstr ""

#: ../../release_notes.rst:3936
msgid "The constructor of :class:`~qiskit.providers.aer.noise.QuantumError` now accepts several new types of input as ``noise_ops`` argument, for example:"
msgstr ""

#: ../../release_notes.rst:3976
msgid "Note that the original JSON-based input format is deperecated."
msgstr ""

#: ../../release_notes.rst:3980
msgid "Added a utility function :func:`qiskit.providers.aer.utils.transform_noise_model` for constructing a noise model by applying a supplied function to all :class:`~qiskit.providers.aer.noise.QuantumError`\\ s in the noise model."
msgstr ""

#: ../../release_notes.rst:3986
msgid "Added two utility functions :func:`qiskit.providers.aer.utils.transpile_quantum_error` and :func:`qiskit.providers.aer.utils.transpile_noise_model` for transpiling the circuits contained in :class:`~qiskit.providers.aer.noise.QuantumError`, and all errors in a :class:`~qiskit.providers.aer.noise.NoiseModel`."
msgstr ""

#: ../../release_notes.rst:3994
msgid "Added the ability to add :class:`~qiskit.providers.aer.noise.QuantumError` objects directly to a :class:`.QuantumCircuit` without converting to a :class:`~qiskit.quantum_info.Kraus` instruction."
msgstr ""

#: ../../release_notes.rst:3998
msgid "Circuits containing quantum errors can now be run on the :class:`~qiskit.providers.aer.AerSimulator` and :class:`~qiskit.providers.aer.QasmSimulator` simulators as an alternative to, or in addition to, building a :class:`~qiskit.providers.aer.noise.NoiseModel` for defining noisy circuit instructions."
msgstr ""

#: ../../release_notes.rst:4005 ../../release_notes.rst:20657
msgid "Example::"
msgstr ""

#: ../../release_notes.rst:4027
msgid "Circuits containing quantum errors can also be evaluated using the :mod:`~qiskit.quantum_info` quantum channel and :class:`~qiskit.quantum_info.DensityMatrix` classes."
msgstr ""

#: ../../release_notes.rst:4039
msgid "The return type of several save instructions have been changed to be the corresponding Qiskit Terra classes rather than raw NumPy arrays or dictionaries. The types that have changed are"
msgstr ""

#: ../../release_notes.rst:4043
msgid ":func:`.save_statevector` now returns as a :class:`~qiskit.quantum_info.Statevector`"
msgstr ""

#: ../../release_notes.rst:4045
msgid ":func:`.save_density_matrix` now returns as a :class:`~qiskit.quantum_info.DensityMatrix`"
msgstr ""

#: ../../release_notes.rst:4047
msgid ":func:`.save_stabilizer` now returns as :class:`~qiskit.quantum_info.StabilizerState`"
msgstr ""

#: ../../release_notes.rst:4049
msgid ":func:`.save_unitary` now returns as :class:`~qiskit.quantum_info.Operator`"
msgstr ""

#: ../../release_notes.rst:4051
msgid ":func:`.save_superop` now returns as :class:`~qiskit.quantum_info.SuperOp`"
msgstr ""

#: ../../release_notes.rst:4053
msgid ":func:`.save_probabilities_dict` now returns as a :class:`~qiskit.result.ProbDistribution`"
msgstr ""

#: ../../release_notes.rst:4058
msgid "Changed the default value of ``standard_gates`` to ``None`` for all functions in :mod:`qiskit.providers.aer.noise.errors.standard_errors` as those functions are updated so that they use standard gates by default."
msgstr ""

#: ../../release_notes.rst:4064
msgid "When an unsupported argument is supplied to :func:`.approximate_quantum_error`, it will now raise a :class:`.NoiseError` instead of a ``RuntimeError``."
msgstr ""

#: ../../release_notes.rst:4075
msgid "Using NumPy ``ndarray`` methods and attributes on the return type of :func:`.save_statevector`, :func:`.save_density_matrix`, :func:`.save_unitary`, and :func:`.save_superop` has been deprecated, and will stop working in a future release. These instructions now return :mod:`qiskit.quantum_info` classes for their return types. Partial backwards compatability with treating these objects as NumPy arrays is implemented by forwarding methods to the internal array during the deprecation period."
msgstr ""

#: ../../release_notes.rst:4086
msgid "Passing in a :class:`.BackendProperties` object for the ``backend`` argument of :meth:`.NoiseModel.from_backend` has been deprecated, as it is incompatible with duration dependent delay noises, and will be removed in a future release. Pass in a Qiskit Terra :class:`.BackendV1` object instead."
msgstr ""

#: ../../release_notes.rst:4093
msgid "Deprecated the ``number_of_qubits`` option of the :class:`.QuantumError` constructor in favor of automatic determination of the dimension."
msgstr ""

#: ../../release_notes.rst:4098
msgid "Deprecated the ``standard_gates`` option of the :class:`.QuantumError` constructor in favor of externalizing such basis-change functionality. In many cases, you can transform any error into an error defined only with specific gates using :func:`.approximate_quantum_error`."
msgstr ""

#: ../../release_notes.rst:4105
msgid "Deprecated the ``standard_gates`` option of all functions in :mod:`qiskit.providers.aer.noise.errors.standard_errors` in favor of returning errors in the form of a mixture of standard gates as much as possible by default."
msgstr ""

#: ../../release_notes.rst:4112
msgid "Deprecated all functions in :mod:`~qiskit.providers.aer.noise.errors.errorutils` because they are helper functions meant to be used only for implementing functions in :mod:`qiskit.providers.aer.noise.errors.standard_errors` and they should have been provided as private functions."
msgstr ""

#: ../../release_notes.rst:4119
msgid "Deprecated the ``standard_gates`` option of :meth:`.NoiseModel.from_backend` in favor of externalizing such basis-change functionality."
msgstr ""

#: ../../release_notes.rst:4124
msgid "Deprecated :meth:`.NoiseModel.from_dict` to make the noise model independent of Qobj (JSON) format."
msgstr ""

#: ../../release_notes.rst:4129
msgid "Deprecated all public variables, functions and classes in :mod:`qiskit.providers.aer.noise.utils.noise_transformation` except for :func:`.approximate_quantum_error` and :func:`.approximate_noise_model`, because they are helper functions meant to be used only for implementing the ``approximate_*`` functions and they should have been provided as private functions."
msgstr ""

#: ../../release_notes.rst:4137
msgid "Deprecated :func:`.remap_noise_model` since the C++ code now automatically truncates and remaps noise models if it truncates circuits."
msgstr ""

#: ../../release_notes.rst:4144 ../../release_notes.rst:4334
#: ../../release_notes.rst:6883 ../../release_notes.rst:7602
#: ../../release_notes.rst:9025 ../../release_notes.rst:9422
#: ../../release_notes.rst:9630 ../../release_notes.rst:11966
#: ../../release_notes.rst:16521 ../../release_notes.rst:17761
#: ../../release_notes.rst:19480 ../../release_notes.rst:20301
#: ../../release_notes.rst:20937 ../../release_notes.rst:21462
#: ../../release_notes.rst:22162 ../../release_notes.rst:22240
msgid "Other Notes"
msgstr ""

#: ../../release_notes.rst:4148
msgid "Changes in the implementation of the function :func:`.approximate_quantum_error` may change the resulting approximate error compared to Qiskit Aer 0.9."
msgstr ""

#: ../../release_notes.rst:4166
msgid "Fix delivered in `#1100 <https://github.com/Qiskit/qiskit-ibmq-provider/pull/1100>`__ for an issue with JSON encoding and decoding when using ``ParameterExpression``\\ s in conjunction with Qiskit Terra 0.19.1 and above.  Previously, the ``Parameter`` instances reconstructed from the JSON output would have different unique identifiers, causing them to seem unequal to the input.  They will now have the correct backing identities."
msgstr ""

#: ../../release_notes.rst:4175
msgid "Qiskit 0.33.1"
msgstr ""

#: ../../release_notes.rst:4189
msgid "Qiskit Terra 0.19.1 is a bugfix release, solving some issues in 0.19.0 concerning circuits constructed by the control-flow builder interface, conditional gates and QPY serialisation of newer Terra objects."
msgstr ""

#: ../../release_notes.rst:4201
msgid "The loose functions ``qiskit.circuit.measure.measure()`` and ``qiskit.circuit.reset.reset()`` are deprecated, and will be removed in a future release.  Instead, you should access these as methods on :class:`.QuantumCircuit`::"
msgstr ""

#: ../../release_notes.rst:4225
msgid "Fixed an error in the circuit conversion functions :func:`.circuit_to_gate` and :func:`.circuit_to_instruction` (and their associated circuit methods :meth:`.QuantumCircuit.to_gate` and :meth:`.QuantumCircuit.to_instruction`) when acting on a circuit with registerless bits, or bits in more than one register.  Previously, the number of bits necessary for the created gate or instruction would be calculated incorrectly, often causing an exception during the conversion."
msgstr ""

#: ../../release_notes.rst:4255
msgid "The control-flow builder interface now supports using :class:`.ClassicalRegister`\\ s as conditions in nested control-flow scopes.  Previously, doing this would not raise an error immediately, but the internal circuit blocks would not have the correct registers defined, and so later logic that worked with the inner blocks would fail."
msgstr ""

#: ../../release_notes.rst:4261
msgid "For example, previously the drawers would fail when trying to draw an inner block conditioned on a classical register, whereas now it will succeed, such as in this example::"
msgstr ""

#: ../../release_notes.rst:4282
msgid "Fixed :mod:`~qiskit.circuit.qpy_serialization` support for serializing :class:`~qiskit.circuit.QuantumCircuit` objects that are using :class:`.ParameterVector` or :class:`.ParameterVectorElement` as parameters. Previously, a :class:`.ParameterVectorElement` parameter was just treated as a :class:`.Parameter` for QPY serialization which meant the :class:`.ParameterVector` context was lost in QPY and the output order of :attr:`~qiskit.circuit.QuantumCircuit.parameters` could be incorrect."
msgstr ""

#: ../../release_notes.rst:4291
msgid "To fix this issue a new QPY format version, :ref:`version_3`, was required. This new format version includes a representation of the :class:`~qiskit.circuit.ParameterVectorElement` class which is described in the :mod:`~qiskit.circuit.qpy_serialization` documentation at :ref:`param_vector`."
msgstr ""

#: ../../release_notes.rst:4299
msgid "Fixed the :mod:`~qiskit.circuit.qpy_serialization` support for serializing a :class:`~qiskit.circuit.library.PauliEvolutionGate` object. Previously, the :class:`~qiskit.circuit.library.PauliEvolutionGate` was treated as a custom gate for serialization and would be deserialized as a :class:`~qiskit.circuit.Gate` object that had the same definition and name as the original :class:`~qiskit.circuit.library.PauliEvolutionGate`. However, this would lose the original state from the :class:`~qiskit.circuit.library.PauliEvolutionGate`. This has been fixed so that starting in this release a :class:`~qiskit.circuit.library.PauliEvolutionGate` in the circuit will be preserved 1:1 across QPY serialization now. The only limitation with this is that it does not support custom :class:`~qiskit.synthesis.EvolutionSynthesis` classes. Only the classes available from :mod:`qiskit.synthesis` can be used with a :class:`~qiskit.circuit.library.PauliEvolutionGate` for qpy serialization."
msgstr ""

#: ../../release_notes.rst:4315
msgid "To fix this issue a new QPY format version, :ref:`version_3`, was required. This new format version includes a representation of the :class:`~qiskit.circuit.library.PauliEvolutionGate` class which is described in the :mod:`~qiskit.circuit.qpy_serialization` documentation at :ref:`pauli_evo_qpy`."
msgstr ""

#: ../../release_notes.rst:4323
msgid "Two loose functions ``qiskit.circuit.measure.measure()`` and ``qiskit.circuit.reset.reset()`` were accidentally removed without a deprecation period.  They have been reinstated, but are marked as deprecated in favour of the methods :meth:`.QuantumCircuit.measure` and :meth:`.QuantumCircuit.reset`, respectively, and will be removed in a future release."
msgstr ""

#: ../../release_notes.rst:4338
msgid "The new control-flow builder interface uses various context managers and helper objects to do its work.  These should not be considered part of the public API, and are liable to be changed and removed without warning.  The *usage* of the builder interface has stability guarantees, in the sense that the behaviour described by :meth:`.QuantumCircuit.for_loop`, :meth:`~.QuantumCircuit.while_loop` and :meth:`~.QuantumCircuit.if_test` for the builder interface are subject to the standard deprecation policies, but the actual objects used to effect this are not.  You should not rely on the objects (such as ``IfContext`` or ``ControlFlowBuilderBlock``) existing in their current locations, or having any methods or attributes attached to them."
msgstr ""

#: ../../release_notes.rst:4350
msgid "This was not previously clear in the 0.19.0 release.  All such objects now have a warning in their documentation strings making this explicit.  It is likely in the future that their locations and backing implementations will become quite different."
msgstr ""

#: ../../release_notes.rst:4356 ../../release_notes.rst:6904
#: ../../release_notes.rst:7030 ../../release_notes.rst:7068
#: ../../release_notes.rst:7172
msgid "Aer 0.9.1"
msgstr ""

#: ../../release_notes.rst:4368
msgid "IBM Q Provider 0.18.2"
msgstr ""

#: ../../release_notes.rst:4375
msgid "Fix delivered in `#1065 <https://github.com/Qiskit/qiskit-ibmq-provider/pull/1065>`__ for the issue where job kept crashing when ``Parameter`` was passed in circuit metadata."
msgstr ""

#: ../../release_notes.rst:4378
msgid "Fix delivered in `#1094 <https://github.com/Qiskit/qiskit-ibmq-provider/pull/1094>`__ for the issue wherein :class:`qiskit.providers.ibmq.runtime.RuntimeEncoder` does an extra `decompose()` if the circuit being serialized is a ``BlueprintCircuit``."
msgstr ""

#: ../../release_notes.rst:4384
msgid "Qiskit 0.33.0"
msgstr ""

#: ../../release_notes.rst:4386
msgid "This release officially marks the end of support for the Qiskit Aqua project in Qiskit. It was originally deprecated in the 0.25.0 release and as was documented in that release the ``qiskit-aqua`` package has been removed from the Qiskit metapackage, which means ``pip install qiskit`` will no longer include ``qiskit-aqua``. However, because of limitations in python packaging we cannot automatically remove a pre-existing install of ``qiskit-aqua`` when upgrading a previous version of Qiskit to this release (or a future release) with ``pip install -U qiskit``. If you are upgrading from a previous version it's recommended that you manually uninstall Qiskit Aqua with ``pip uninstall qiskit-aqua`` or install in a fresh python environment."
msgstr ""

#: ../../release_notes.rst:4397
#, python-format
msgid "The application modules that were provided by ``qiskit-aqua`` have been split into several new packages: ``qiskit-optimization``, ``qiskit-nature``, ``qiskit-machine-learning``, and ``qiskit-finance``. These packages can be installed by themselves (via the standard pip install command, e.g. ``pip install qiskit-nature``) or with the rest of the Qiskit metapackage as optional extras (e.g. ``pip install 'qiskit[finance,optimization]'`` or ``pip install 'qiskit[all]'``). The core algorithms and the operator flow now exist as part of Qiskit Terra at ``qiskit.algorithms`` and ``qiskit.opflow``. Depending on your existing usage of Aqua you should either use the application packages or the new modules in Qiskit Terra. For more details on how to migrate from Qiskit Aqua you can refer to the `Aqua Migration Guide <https://github.com/Qiskit/qiskit-aqua/blob/main/docs/tutorials/Qiskit%20Algorithms%20Migration%20Guide.ipynb>`__."
msgstr ""

#: ../../release_notes.rst:4411
msgid "This release also officially deprecates the Qiskit Ignis project. Accordingly, in a future release the ``qiskit-ignis`` package will be removed from the Qiskit metapackage, which means in that future release ``pip install qiskit`` will no longer include ``qiskit-ignis``. Qiskit Ignis has been supersceded by the `Qiskit Experiments <https://qiskit.org/documentation/experiments/>`__ project and active development has ceased. While deprecated, critical bug fixes and compatibility fixes will continue to be made to provide users a sufficient opportunity to migrate off of Ignis. After the deprecation period (which will be no shorter than 3 months from this release) the project will be retired and archived. You can refer to the `migration guide <https://github.com/Qiskit/qiskit-ignis#migration-guide>`__ for details on how to switch from Qiskit Ignis to Qiskit Experiments."
msgstr ""

#: ../../release_notes.rst:4426
msgid "Terra 0.19.0"
msgstr ""

#: ../../release_notes.rst:4435
msgid "The Qiskit Terra 0.19 release highlights are:"
msgstr ""

#: ../../release_notes.rst:4437
msgid "A new version of the abstract Qiskit/hardware interface, in the form of :class:`.BackendV2`, which comes with a new data structure :class:`~.transpiler.Target` to allow backends to better model their constraints for the :ref:`transpiler <qiskit-transpiler>`."
msgstr ""

#: ../../release_notes.rst:4442
msgid "An :ref:`extensible plugin interface <qiskit-transpiler-plugins>` to the :class:`~.passes.UnitarySynthesis` transpiler pass, allowing users or other packages to extend Qiskit Terra's synthesis routines with new methods."
msgstr ""

#: ../../release_notes.rst:4447
msgid "Control-flow instructions, for representing ``for`` and ``while`` loops and ``if``/``else`` statements in :class:`.QuantumCircuit`.  The simulators in Qiskit Aer will soon be able to work with these new instructions, allowing you to write more dynamic quantum programs."
msgstr ""

#: ../../release_notes.rst:4452
msgid "Preliminary support for the evolving `OpenQASM 3 specification`_.  You can use the new :mod:`qiskit.qasm3` module to serialize your :class:`.QuantumCircuit`\\ s into OpenQASM 3, including the new control-flow constructs."
msgstr ""

#: ../../release_notes.rst:4459
msgid "This release marks the end of support for Python 3.6 in Qiskit.  This release of Qiskit Terra, and any subsequent bugfix releases in the 0.19.x series, will be the last to work with Python 3.6.  Starting from the next minor release (0.20.0) of Qiskit Terra, the minimum required Python version will be 3.7."
msgstr ""

#: ../../release_notes.rst:4465
msgid "As always, there are many more features and fixes in this release as well, which you can read about below."
msgstr ""

#: ../../release_notes.rst:4476
msgid ":meth:`.QuantumCircuit.decompose` and its corresponding transpiler pass :class:`~qiskit.transpiler.passes.Decompose` now optionally accept a parameter containing a collection of gate names.  If this parameter is given, then only gates with matching names will be decomposed.  This supports Unix-shell-style wildcard matches.  For example::"
msgstr ""

#: ../../release_notes.rst:4484
msgid "will decompose any ``h``, ``rx`` or ``rz`` gates, but leave (for example) ``x`` gates untouched."
msgstr ""

#: ../../release_notes.rst:4488
msgid "Added the ``termination_checker`` argument to the :class:`~qiskit.algorithms.optimizers.SPSA` optimizer. This allows the user to implement a custom termination criterion."
msgstr ""

#: ../../release_notes.rst:4531
msgid "Added a new version of the :class:`~qiskit.providers.Backend` interface, :class:`~qiskit.providers.BackendV2`. This new version is a large change from the previous version, :class:`~qiskit.providers.BackendV1` and changes both the user access pattern for properties of the backend (like number of qubits, etc) and how the backend represents its constraints to the transpiler. The execution of circuits (via the :meth:`~qiskit.providers.BackendV2.run` method) remains unchanged. With a :class:`~qiskit.providers.BackendV2` backend instead of having a separate :meth:`~qiskit.providers.BackendV1.configuration`, :meth:`~qiskit.providers.BackendV1.properties`, and :meth:`~qiskit.providers.BackendV1.defaults` methods that construct :class:`~qiskit.providers.models.BackendConfiguration`, :class:`~qiskit.providers.models.BackendProperties`, and :class:`~qiskit.providers.models.PulseDefaults` objects respectively, like in the :class:`~qiskit.providers.BackendV1` interface, the attributes contained in those output objects are accessible directly as attributes of the :class:`~qiskit.providers.BackendV2` object. For example, to get the number of qubits for a backend with :class:`~qiskit.providers.BackendV1` you would do::"
msgstr ""

#: ../../release_notes.rst:4553
msgid "while with :class:`~qiskit.providers.BackendV2` it is::"
msgstr ""

#: ../../release_notes.rst:4557
msgid "The other change around this is that the number of attributes exposed in the abstract :class:`~qiskit.providers.BackendV2` class is designed to be a hardware/vendor agnostic set of the required or optional fields that the rest of Qiskit can use today with any backend. Subclasses of the abstract :class:`~qiskit.providers.BackendV2` class can add support for additional attributes and methods beyond those defined in :class:`~qiskit.providers.BackendV2`, but these will not be supported universally throughout Qiskit."
msgstr ""

#: ../../release_notes.rst:4566
msgid "The other critical change that is primarily important for provider authors is how a :class:`~qiskit.providers.BackendV2` exposes the properties of a particular backend to the transpiler. With :class:`~qiskit.providers.BackendV2` this is done via a :class:`~qiskit.transpiler.Target` object. The :class:`~qiskit.transpiler.Target`, which is exposed via the :attr:`~qiskit.providers.BackendV2.target` attribute, is used to represent the set of constraints for running circuits on a particular backend. It contains the subset of information previously exposed by the :class:`~qiskit.providers.models.BackendConfiguration`, :class:`~qiskit.providers.models.BackendProperties`, and :class:`~qiskit.providers.models.PulseDefaults` classes which the transpiler can actively use. When migrating a provider to use :class:`~qiskit.providers.BackendV2` (or when creating a new provider package) the construction of backend objects will primarily be around creating a :class:`~qiskit.transpiler.Target` object for the backend."
msgstr ""

#: ../../release_notes.rst:4585
msgid "Added a new :class:`~qiskit.transpiler.Target` class to the :mod:`~qiskit.transpiler` module. The :class:`~qiskit.transpiler.Target` class is designed to represent the constraints of backend to the compiler. The :class:`~qiskit.transpiler.Target` class is intended to be used with a :class:`~qiskit.providers.BackendV2` backend and is how backends will model their constraints for the transpiler moving forward. It combines the previously distinct fields used for controlling the :func:`~qiskit.compiler.transpile` target device (e.g. ``basis_gates``, ``coupling_map``, ``instruction_durations``, etc) into a single data structure. It also adds additional functionality on top of what was available previously such as representing heterogeneous gate sets, multi-qubit gate connectivity, and tuned variants of the same gates. Currently the transpiler doesn't factor in all these constraints, but over time it will grow to leverage the extra functionality."
msgstr ""

#: ../../release_notes.rst:4602
msgid "The :class:`~qiskit.providers.Options` class now has optional support for specifying validators. This enables :class:`~qiskit.providers.Backend` authors to optionally specify basic validation on the user supplied values for fields in the :class:`~qiskit.providers.Options` object. For example, if you had an :class:`~qiskit.providers.Options` object defined with::"
msgstr ""

#: ../../release_notes.rst:4611
msgid "you can set a validator on shots for it to be between 1 and 4096 with::"
msgstr ""

#: ../../release_notes.rst:4615
msgid "With the validator set any call to the :meth:`~qiskit.providers.Options.update_options` method will check that if ``shots`` is being updated the proposed new value is within the valid range."
msgstr ""

#: ../../release_notes.rst:4622
msgid "Added a new transpiler analysis pass, :class:`~qiskit.transpiler.passes.ContainsInstruction`, to the :mod:`qiskit.transpiler.passes` module. This pass is used to determine if a circuit contains a specific instruction. It takes in a single parameter at initialization, the name of the instruction to check for and set a boolean in the property set whether the circuit contains that instruction or not. For example::"
msgstr ""

#: ../../release_notes.rst:4650
msgid "Added a utility function :func:`qiskit.utils.detach_prefix` that is a counterpart of :func:`~qiskit.utils.apply_prefix`.  The new function returns a tuple of scaled value and prefix from a given float value.  For example, a value ``1.3e8`` will be converted into ``(130, \"M\")`` that can be used to display a value in the user friendly format, such as ``130 MHz``."
msgstr ""

#: ../../release_notes.rst:4658
msgid "The values ``\"gate_error\"`` and ``\"balanced\"`` are now available for the ``objective`` option in the construction of the :class:`~qiskit.transpiler.passes.BIPMapping` object, and ``\"balanced\"`` is now the default."
msgstr ""

#: ../../release_notes.rst:4663
msgid "The ``\"gate_error\"`` objective requires passing a :obj:`.BackendProperties` instance in the ``backend_prop`` kwarg, which contains the 2q-gate gate errors used in the computation of the objectives.  The ``\"balanced\"`` objective will use the :obj:`.BackendProperties` instance if it is given, but otherwise will assume a CX error rate as given in the new parameter ``default_cx_error_rate``. The relative weights of the gate-error and depth components of the balanced objective can be controlled with the new ``depth_obj_weight`` parameter."
msgstr ""

#: ../../release_notes.rst:4674
msgid "Every attribute of the :class:`~qiskit.algorithms.VQE` class that is set at the initialization is now accessible with getters and setters. Further, the default values of the VQE attributes :attr:`~.VQE.ansatz` and :attr:`~.VQE.optimizer` can be reset by assigning ``None`` to them::"
msgstr ""

#: ../../release_notes.rst:4685
msgid "Added a new method :meth:`.PauliList.group_qubit_wise_commuting` that partitions a :obj:`.PauliList` into sets of mutually qubit-wise commuting :obj:`.Pauli` operators.  For example::"
msgstr ""

#: ../../release_notes.rst:4695
msgid "Added a new coupling-map constructor method :meth:`.CouplingMap.from_hexagonal_lattice` for constructing a hexagonal lattice coupling map.  For example, to construct a 2x2 hexagonal lattice coupling map:"
msgstr ""

#: ../../release_notes.rst:4708
msgid "New fake backend classes are available under ``qiskit.test.mock``. These include mocked versions of ``ibmq_brooklyn``, ``ibmq_manila``, ``ibmq_jakarta``, and ``ibmq_lagos``. As with the other fake backends, these include snapshots of calibration data  (i.e. ``backend.defaults()``) and error data (i.e. ``backend.properties()``) taken from the real system, and can be used for local testing, compilation and simulation."
msgstr ""

#: ../../release_notes.rst:4717
msgid "Added the :meth:`.OperatorBase.is_hermitian` method to check whether the operator is Hermitian or not. :class:`~qiskit.algorithms.NumPyEigensolver` and :class:`~qiskit.algorithms.NumPyMinimumEigensolver` use ``eigh`` or ``eigsh`` to solve the eigenvalue problem when the operator is Hermitian."
msgstr ""

#: ../../release_notes.rst:4724
msgid "Added a new constructor method :meth:`.PassManagerConfig.from_backend`.  It constructs a :class:`~qiskit.transpiler.PassManagerConfig` object with user options and the configuration of a backend.  With this feature, a preset passmanager can be built easier. For example::"
msgstr ""

#: ../../release_notes.rst:4739
msgid "A new transpiler pass, :class:`.PulseGates`, was added, which automatically extracts user-provided calibrations from the instruction schedule map and attaches the gate schedule to the given (transpiled) quantum circuit as a pulse gate."
msgstr ""

#: ../../release_notes.rst:4744
msgid "The :class:`.PulseGates` transpiler pass is applied to all optimization levels from 0 to 3.  No gate implementation is updated unless the end-user explicitly overrides the ``backend.defaults().instruction_schedule_map``. This pass saves users from individually calling :meth:`.QuantumCircuit.add_calibration` for every circuit run on the hardware."
msgstr ""

#: ../../release_notes.rst:4751
msgid "To supplement this new pass, a schedule was added to :class:`~qiskit.pulse.InstructionScheduleMap` and is implicitly updated with a metadata field ``\"publisher\"``.  Backend-calibrated gate schedules have a special publisher kind to avoid overriding circuits with calibrations of already known schedules.  Usually, end-users don't need to take care of this metadata as it is applied automatically.  You can call :meth:`.InstructionScheduleMap.has_custom_gate` to check if the map has custom gate calibration."
msgstr ""

#: ../../release_notes.rst:4760
msgid "See the below code example to learn how to apply custom gate implementation for all circuits under execution."
msgstr ""

#: ../../release_notes.rst:4787
msgid "Note that the instruction schedule map is a mutable object. If you override one of the entries and use that backend for other experiments, you may accidentally update the gate definition."
msgstr ""

#: ../../release_notes.rst:4804
msgid "If you want to update the gate definitions of a specific experiment, you need to first deepcopy the instruction schedule map and directly pass it to the transpiler."
msgstr ""

#: ../../release_notes.rst:4810
msgid "Introduced a new option ``qubit_subset`` to the constructor of :class:`.BIPMapping`. The option enables us to specify physical qubits to be used (in ``coupling_map`` of the device) during the mapping in one line:"
msgstr ""

#: ../../release_notes.rst:4822
msgid "Previously, to do the same thing, we had to supply a reduced ``coupling_map`` which contains only the qubits to be used, embed the resulting circuit onto the original ``coupling_map`` and update the ``QuantumCircuit._layout`` accordingly:"
msgstr ""

#: ../../release_notes.rst:4845
msgid "Added the ``ignore_pauli_phase`` and ``copy`` arguments to the constructor of :obj:`~qiskit.quantum_info.SparsePauliOp`.  ``ignore_pauli_phase`` prevents the ``phase`` attribute of an input :class:`~qiskit.quantum_info.PauliList` from being read, which is more performant if the :obj:`.PauliList` is already known to have all phases as zero in the internal ZX convention.  ``copy`` allows users to avoid the copy of the input data when they explicitly set ``copy=False``."
msgstr ""

#: ../../release_notes.rst:4855
msgid "Improved performance of the following :class:`~qiskit.quantum_info.SparsePauliOp` operations:"
msgstr ""

#: ../../release_notes.rst:4857
msgid ":meth:`~qiskit.quantum_info.SparsePauliOp.simplify` (see `#7122 <https://github.com/Qiskit/qiskit-terra/issues/7122>`__)"
msgstr ""

#: ../../release_notes.rst:4858
msgid ":meth:`~qiskit.quantum_info.SparsePauliOp.compose` (see `#7126 <https://github.com/Qiskit/qiskit-terra/issues/7126>`__)"
msgstr ""

#: ../../release_notes.rst:4860
msgid ":meth:`~qiskit.quantum_info.SparsePauliOp._add` (see `#7138 <https://github.com/Qiskit/qiskit-terra/issues/7138>`__)"
msgstr ""

#: ../../release_notes.rst:4862
msgid ":meth:`~qiskit.quantum_info.SparsePauliOp.from_list` and :meth:`~qiskit.quantum_info.PauliList.__init__` (see other discussion in `#7138 <https://github.com/Qiskit/qiskit-terra/issues/7138>`__)."
msgstr ""

#: ../../release_notes.rst:4867
msgid "Added the :meth:`.SparsePauliOp.sum` method to add together many :class:`.SparsePauliOp`\\ s.  This method has significantly better performance than adding the instances together in a loop.  For example, the previous way to add several :class:`.SparsePauliOp`\\ s together would be to do::"
msgstr ""

#: ../../release_notes.rst:4880
msgid "This can now be done far more efficiently (in both speed and typing!) as::"
msgstr ""

#: ../../release_notes.rst:4886
msgid "Added an argument ``limit_amplitude`` to the constructor of ``ParametricPulse``, which is the base class of :obj:`.Gaussian`, :obj:`.GaussianSquare`, :obj:`.Drag` and :obj:`.Constant`, to allowing disabling the amplitude limit of 1 on a pulse-by-pulse basis.  With ``limit_amplitude=False``, individual pulses may have an amplitude exceeding unity without raising a :class:`.PulseError`.  See `#6544 <https://github.com/Qiskit/qiskit-terra/issues/6544>`__ for more detail."
msgstr ""

#: ../../release_notes.rst:4897
msgid "Using :meth:`.QuantumCircuit.draw` or :func:`.circuit_drawer` with the ``latex`` drawer will now generate a file in an image format inferred from the filename extension, for example::"
msgstr ""

#: ../../release_notes.rst:4908
msgid "This will save the circuit drawing in the JPEG format.  Previously, the image always be in PNG format.  Refer to `#6448 <https://github.com/Qiskit/qiskit-terra/issues/6448>`__ for more details."
msgstr ""

#: ../../release_notes.rst:4912
msgid "Now, if it encounters a filename extension which is not supported, for example::"
msgstr ""

#: ../../release_notes.rst:4916
msgid "it will raise a ``ValueError`` to change the filename extension to a supported image format."
msgstr ""

#: ../../release_notes.rst:4920
msgid "Added the parameter  ``filename`` to :func:`~qiskit.visualization.plot_gate_map` and :func:`~qiskit.visualization.plot_coupling_map`, which allows saving the resulting images to a file."
msgstr ""

#: ../../release_notes.rst:4927
msgid "Introduced an approximate quantum compiler and a corresponding unitary synthesis plugin implementation. The main AQC class is :class:`~qiskit.transpiler.synthesis.aqc.AQC` for a standalone version that compiles a unitary matrix into an approximate circuit. The plugin may be invoked by :func:`~.compiler.transpile` when the ``unitary_synthesis_method`` argument is set to ``'aqc'``.  See :mod:`qiskit.transpiler.synthesis.aqc` for full details."
msgstr ""

#: ../../release_notes.rst:4937
msgid "Added a ``filter_function`` argument to :meth:`.QuantumCircuit.depth` and :meth:`.QuantumCircuit.size` in order to analyze circuit operations according to some criteria."
msgstr ""

#: ../../release_notes.rst:4942
msgid "For example, to get the number of two-qubit gates, you can do::"
msgstr ""

#: ../../release_notes.rst:4946
msgid "Or to get the depth of T gates acting on the zeroth qubit::"
msgstr ""

#: ../../release_notes.rst:4952
msgid "Added a new transpiler pass, :class:`~qiskit.transpiler.passes.CollectMultiQBlocks`, to the :mod:`qiskit.transpiler.passes` module. This pass is used to collect sequences of uninterrupted gates acting on groups of qubits. It provides a similar function to the existing :class:`~qiskit.transpiler.passes.Collect2qBlocks` pass, but while that pass is designed and optimized to find 2 qubit blocks this new pass will work to find blocks of any size."
msgstr ""

#: ../../release_notes.rst:4963
msgid "There is a builder interface for the new control-flow operations on :obj:`.QuantumCircuit`, such as the new :obj:`.ForLoopOp`, :obj:`.IfElseOp`, and :obj:`.WhileLoopOp`.  The interface uses the same circuit methods, *i.e.* :meth:`.QuantumCircuit.for_loop`, :meth:`.QuantumCircuit.if_test` and :meth:`.QuantumCircuit.while_loop`, which are overloaded so that if the ``body`` parameter is not given, they return a context manager.  Entering one of these context managers pushes a scope into the circuit, and captures all gate calls (and other scopes) and the resources these use, and builds up the relevant operation at the end.  For example, you can now do::"
msgstr ""

#: ../../release_notes.rst:4977
msgid "This will produce a :obj:`.ForLoopOp` on ``qc``, which knows that qubit 0 is the only resource used within the loop body.  These context managers can be nested, and will correctly determine their widths.  You can use :meth:`.QuantumCircuit.break_loop` and :meth:`.QuantumCircuit.continue_loop` within a context, and it will expand to be the correct width for its containing loop, even if it is nested in further :meth:`.QuantumCircuit.if_test` blocks."
msgstr ""

#: ../../release_notes.rst:4985
msgid "The :meth:`~.QuantumCircuit.if_test` context manager provides a chained manager which, if desired, can be used to create an ``else`` block, such as by::"
msgstr ""

#: ../../release_notes.rst:5000
msgid "The manager will ensure that the ``if`` and ``else`` bodies are defined over the same set of resources."
msgstr ""

#: ../../release_notes.rst:5005
msgid "Introduced a new transpiler pass :obj:`.InverseCancellation` that generalizes the :obj:`.CXCancellation` pass to cancel any self-inverse gates or gate-inverse pairs. It can be used by initializing :obj:`.InverseCancellation` and passing a gate to cancel, for example::"
msgstr ""

#: ../../release_notes.rst:5023
msgid "The constructor of :class:`~qiskit.transpiler.passes.RZXCalibrationBuilder` has two new kwargs ``instruction_schedule_map`` and ``qubit_channel_mapping`` which take a :class:`~qiskit.pulse.InstructionScheduleMap` and list of channel name lists for each qubit respectively. These new arguments are used to directly specify the information needed from a backend target. They should be used instead of passing a :class:`~qiskit.providers.BaseBackend` or :class:`~qiskit.providers.BackendV1` object directly to the pass with the ``backend`` argument."
msgstr ""

#: ../../release_notes.rst:5034
msgid "The :obj:`.Statevector`\\ s of states comprised only of qubits can now be drawn in LaTeX in ket notation.  In ket notation the entries of the statevector are processed such that exact factors like fractions or square roots of two are drawn as such.  The particular convention can be chosen by passing the ``convention`` keyword argument as either ``\"ket\"`` or ``\"vector\"`` as appropriate::"
msgstr ""

#: ../../release_notes.rst:5050
msgid "Added a new transpiler pass :class:`.EchoRZXWeylDecomposition` that allows users to decompose an arbitrary two-qubit gate in terms of echoed RZX-gates by leveraging Cartan's decomposition.  In combination with other transpiler passes, this can be used to transpile arbitrary circuits to RZX-gate-based and pulse-efficient circuits that implement the same unitary."
msgstr ""

#: ../../release_notes.rst:5058
msgid "The :class:`~qiskit.algorithms.optimizers.SPSA` and :class:`~qiskit.algorithms.optimizers.QNSPSA` optimizer classes are now capable of batching as many circuit evaluations as possible for both the iterations and the initial calibrations. This can be leveraged by setting the ``max_evals_grouped`` kwarg on the constructor for :class:`~qiskit.algorithms.VQE` when using either :class:`~qiskit.algorithms.optimizers.SPSA` or :class:`~qiskit.algorithms.optimizers.QNSPSA` as the ``optimizer`` parameter. For example::"
msgstr ""

#: ../../release_notes.rst:5085
msgid "This release introduces a decomposition method for two-qubit gates which targets user-defined sets of RZX gates.  Transpiler users can enable decomposition for {``RZX(pi/2)``, ``RZX(pi/4)``, and ``RZX(pi/6)``} specifically by including ``'rzx'`` in their ``basis_gates`` list when calling :func:`~qiskit.compiler.transpile`.  Quantum information package users can find the method itself under the :obj:`.XXDecomposer` class."
msgstr ""

#: ../../release_notes.rst:5094
msgid "Added a transpiler pass :obj:`.Optimize1qGatesSimpleCommutation`, which optimizes a circuit according to a strategy of commuting single-qubit gates around to discover resynthesis opportunities."
msgstr ""

#: ../../release_notes.rst:5100
msgid "Added a ``max_job_tries`` parameter to :obj:`~qiskit.utils.QuantumInstance`, to limit the number of times a job will attempt to be executed on a backend. Previously the submission and fetching of results would be attempted infinitely, even if the job was cancelled or errored on the backend.  The default is now 50, and the previous behaviour can be achieved by setting ``max_job_tries=-1``.  Fixes `#6872 <https://github.com/Qiskit/qiskit-terra/issues/6872>`__ and `#6821 <https://github.com/Qiskit/qiskit-terra/issues/6821>`__."
msgstr ""

#: ../../release_notes.rst:5111
msgid "The ``latex`` output method for the :func:`~qiskit.visualization.circuit_drawer` function and the :meth:`.QuantumCircuit.draw` method can now draw circuits that contain gates with single bit condition. This was added for compatibility of latex drawer with the new feature of supporting classical conditioning of gates on single classical bits."
msgstr ""

#: ../../release_notes.rst:5119
msgid "The ``\"mpl\"`` output method for the :func:`~qiskit.visualization.circuit_drawer` function and the :meth:`.QuantumCircuit.draw` method can now draw circuits that contain gates with single bit condition. This was added for compatibility of the ``\"mpl\"`` drawer with the new feature of supporting classical conditioning of gates on single classical bits."
msgstr ""

#: ../../release_notes.rst:5127
msgid "The ``text`` output method for the :func:`~qiskit.visualization.circuit_drawer` function and the :meth:`.QuantumCircuit.draw` method can now draw circuits that contain gates with single bit condition. This was added for compatibility of text drawer with the new feature of supporting classical conditioning of gates on single classical bits."
msgstr ""

#: ../../release_notes.rst:5135
msgid "A new analysis transpiler pass, :class:`~qiskit.transpiler.passes.GatesInBasis`, was added to :mod:`qiskit.transpiler.passes`. This pass is used to check if the :class:`~qiskit.dagcircuit.DAGCircuit` being transpiled has all the gates in the configured basis set or not. It will set the attribute ``\"all_gates_in_basis\"`` in the property set to ``True`` if all the gates in the :class:`~qiskit.dagcircuit.DAGCircuit` are in the configured basis set or ``False`` if they are not. For example::"
msgstr ""

#: ../../release_notes.rst:5162
msgid "Added two new constructor methods, :meth:`~qiskit.transpiler.CouplingMap.from_heavy_hex` and :meth:`~qiskit.transpiler.CouplingMap.from_heavy_square`, to the :class:`~qiskit.transpiler.CouplingMap` class. These constructor methods are used to create a :class:`~qiskit.transpiler.CouplingMap` that are a heavy hex or heavy square graph as described in |Chamberland2020|_."
msgstr ""

#: ../../release_notes.rst:5169 ../../release_notes.rst:5428
#: ../../release_notes.rst:7908 ../../release_notes.rst:8431
#: ../../release_notes.rst:9845 ../../release_notes.rst:9868
#: ../../release_notes.rst:9901 ../../release_notes.rst:10187
#: ../../release_notes.rst:10239 ../../release_notes.rst:10253
#: ../../release_notes.rst:13431 ../../release_notes.rst:13955
#: ../../release_notes.rst:15941 ../../release_notes.rst:15957
#: ../../release_notes.rst:15974 ../../release_notes.rst:18651
#: ../../release_notes.rst:18904
msgid "For example:"
msgstr ""

#: ../../release_notes.rst:5191
msgid "The :obj:`.HHL` algorithm can now find solutions when its matrix has negative eigenvalues. To enable this, the algorithm now adds an extra qubit to represent the sign of the value, and the helper algorithm :obj:`.ExactReciprocal` was updated to process this new information.  See `#6971 <https://github.com/Qiskit/qiskit-terra/pull/6971>`__ for more details."
msgstr ""

#: ../../release_notes.rst:5199
msgid "Added two new classes, :class:`~qiskit.utils.mitigation.CompleteMeasFitter` and :class:`~qiskit.utils.mitigation.TensoredMeasFitter` to the :mod:`qiskit.utils.mitigation` module. These classes are for use only as values for the ``measurement_error_mitigation_cls`` kwarg of the :class:`~qiskit.utils.QuantumInstance` class. The instantiation and usage of these classes (or anything else in :mod:`qiskit.utils.mitigation`) outside of the ``measurement_error_mitigation_cls`` kwarg should be treated as an internal private API and not relied upon."
msgstr ""

#: ../../release_notes.rst:5210
msgid "The :obj:`.ListOp` class in :mod:`qiskit.opflow` now has a :attr:`~.ListOp.coeffs` attribute, which returns a list of the coefficients of the operator list, with the overall coefficient (:obj:`.ListOp.coeff`) distributed multiplicatively into the list.  Note that :obj:`.ListOp` objects may be nested (contained in ``oplist`` of a  :obj:`.ListOp` object), and in these cases an exception is raised if the `coeffs` method is called. The :obj:`.ListOp.coeffs` method conveniently duck-types against the ``coeffs`` property method of the non-nesting :obj:`.PauliSumOp` class."
msgstr ""

#: ../../release_notes.rst:5221
msgid "The :class:`~qiskit.quantum_info.Statevector` class is now subscriptable. User can now retrieve the nth coefficient in a :class:`~qiskit.quantum_info.Statevector` by index as ``statevec[n]``."
msgstr ""

#: ../../release_notes.rst:5227
msgid "Added the :obj:`.Statevector.inner` method to calculate inner products of :class:`.Statevector` instances.  For example::"
msgstr ""

#: ../../release_notes.rst:5232
msgid "will return the inner product of ``statevec`` with ``other``.  While ``statevec`` must be a :class:`.Statevector`, ``other`` can be anything that can be constructed into a :class:`.Statevector`, such as a Numpy array."
msgstr ""

#: ../../release_notes.rst:5238
msgid "Added a new parameter, ``add_bits``, to :meth:`.QuantumCircuit.measure_all`. By default it is set to ``True`` to maintain the previous behaviour of adding a new :obj:`.ClassicalRegister` of the same size as the number of qubits to store the measurements. If set to ``False``, the measurements will be stored in the already existing classical bits. For example, if you created a circuit with existing classical bits like::"
msgstr ""

#: ../../release_notes.rst:5249
msgid "calling ``circuit.measure_all(add_bits=False)`` will use the existing classical register ``cr`` as the output target of the :class:`~qiskit.circuit.Measurement` objects added to the circuit."
msgstr ""

#: ../../release_notes.rst:5255
msgid ":obj:`~qiskit.circuit.ParameterExpression` now delegates its numeric conversions to the underlying symbolic library, even if there are potentially unbound parameters.  This allows conversions of expressions such as::"
msgstr ""

#: ../../release_notes.rst:5265
msgid "where the underlying expression has a fixed value, but the parameter ``x`` is not yet bound."
msgstr ""

#: ../../release_notes.rst:5270
msgid "Added an :meth:`.Optimizer.minimize` method to all optimizers: :class:`~qiskit.algorithms.optimizers.Optimizer` and derived classes. This method mimics the signature of SciPy's ``minimize()`` function and returns an :class:`~qiskit.algorithms.optimizers.OptimizerResult`."
msgstr ""

#: ../../release_notes.rst:5275 ../../release_notes.rst:10496
msgid "For example"
msgstr ""

#: ../../release_notes.rst:5295
msgid "Added a :class:`~qiskit.circuit.library.PauliEvolutionGate` to the circuit library (:mod:`qiskit.circuit.library`) which defines a gate performing time evolution of (sums or sums-of-sums of) :obj:`.Pauli`\\ s. The synthesis of this gate is performed by :class:`~qiskit.synthesis.EvolutionSynthesis` and is decoupled from the gate itself. Currently available synthesis methods are:"
msgstr ""

#: ../../release_notes.rst:5302
msgid ":class:`~qiskit.synthesis.LieTrotter`: first order Trotterization"
msgstr ""

#: ../../release_notes.rst:5303
msgid ":class:`~qiskit.synthesis.SuzukiTrotter`: higher order Trotterization"
msgstr ""

#: ../../release_notes.rst:5304
msgid ":class:`~qiskit.synthesis.MatrixExponential`: exact, matrix-based evolution"
msgstr ""

#: ../../release_notes.rst:5306 ../../release_notes.rst:8275
#: ../../release_notes.rst:8317 ../../release_notes.rst:8354
#: ../../release_notes.rst:9067 ../../release_notes.rst:10872
#: ../../release_notes.rst:12146 ../../release_notes.rst:13922
#: ../../release_notes.rst:15456 ../../release_notes.rst:15783
#: ../../release_notes.rst:18747 ../../release_notes.rst:20672
#: ../../release_notes.rst:20752
msgid "For example::"
msgstr ""

#: ../../release_notes.rst:5326
msgid "A new function :func:`~qiskit.visualization.plot_coupling_map()` has been introduced, which extends the functionality of the existing function :func:`~qiskit.visualization.plot_gate_map()`, by accepting three parameters: ``num_qubit``, ``qubit_coordinates``, and ``coupling_map`` (instead of ``backend``), to allow an arbitrary qubit coupling map to be plotted."
msgstr ""

#: ../../release_notes.rst:5334
msgid "Qiskit Terra now has initial support for serializing :class:`.QuantumCircuit`\\ s to `OpenQASM 3 <https://github.com/Qiskit/openqasm>`__:"
msgstr ""

#: ../../release_notes.rst:5348
msgid "This initial release has limited support for named registers, basic built-in instructions (such as measure, barrier and reset), user-defined gates, user-defined instructions (as subroutines), and the new control-flow constructs also introduced in this release:"
msgstr ""

#: ../../release_notes.rst:5380
msgid "The :class:`~qiskit.opflow.evolutions.QDrift` class was reformulated as a synthesis method for :obj:`.PauliEvolutionGate`, deriving from :obj:`~qiskit.opflow.evolutions.TrotterizationBase`."
msgstr ""

#: ../../release_notes.rst:5402
msgid "QPY serialization is now capable of representing :attr:`~qiskit.circuit.QuantumCircuit.global_phase` attributes of a :class:`~qiskit.circuit.QuantumCircuit` object that are an ``int``, :class:`~qiskit.circuit.Parameter` object, or :class:`~qiskit.circuit.ParameterExpression` object. Previous versions of QPY would only accept a :attr:`~qiskit.circuit.QuantumCircuit.global_phase` that was a ``float``."
msgstr ""

#: ../../release_notes.rst:5410
msgid "This requires the QPY format :ref:`version_2` which was introduced in this release to represent the additional types."
msgstr ""

#: ../../release_notes.rst:5415
msgid "A new :meth:`~qiskit.circuit.QuantumCircuit.find_bit` method has been added to the :class:`~qiskit.circuit.QuantumCircuit` class, which allows lookups of the index and registers of a provided :class:`~qiskit.circuit.Bit` on the given circuit. The method returns a two-element ``namedtuple`` containing 0) the index of the ``Bit`` in either :attr:`~qiskit.circuit.QuantumCircuit.qubits` (for a :class:`~qiskit.circuit.Qubit`) or :attr:`~qiskit.circuit.QuantumCircuit.clbits` (for a :class:`~qiskit.circuit.Clbit`) and 1) a list of length-2 tuples containing each circuit :class:`~qiskit.circuit.Register` which contains the ``Bit``, and the index in that ``Register`` at which the ``Bit`` can be found."
msgstr ""

#: ../../release_notes.rst:5443
msgid "would generate:"
msgstr ""

#: ../../release_notes.rst:5452
msgid "Three new :class:`~qiskit.circuit.Instruction` subclasses have been added to support control flow operations in dynamic circuits: :class:`~qiskit.circuit.WhileLoopOp`, :class:`~qiskit.circuit.ForLoopOp`, and :class:`~qiskit.circuit.IfElseOp`. Additionally, two subclasses, :class:`~qiskit.circuit.BreakLoopOp`, and :class:`~qiskit.circuit.ContinueLoopOp`, have been added to support breaking from and continuing to the next iteration of a loop context, respectively."
msgstr ""

#: ../../release_notes.rst:5462
msgid "These can be created as stand-alone :class:`~qiskit.circuit.Instruction`\\ s, or appended to an existing :class:`~qiskit.circuit.QuantumCircuit` instance via their respective methods, :meth:`.QuantumCircuit.while_loop`, :meth:`~qiskit.circuit.QuantumCircuit.for_loop`, :meth:`~qiskit.circuit.QuantumCircuit.if_test`, :meth:`~qiskit.circuit.QuantumCircuit.if_else`, :meth:`~qiskit.circuit.QuantumCircuit.break_loop`, and :meth:`~qiskit.circuit.QuantumCircuit.continue_loop`."
msgstr ""

#: ../../release_notes.rst:5474
msgid "Added the :class:`~qiskit.result.BaseReadoutMitigator` abstract base class for implementing classical measurement error mitigators. These objects are intended for mitigation measurement errors in :class:`~qiskit.result.Counts` objects returned from execution of circuits on backends with measurement errors."
msgstr ""

#: ../../release_notes.rst:5480
msgid "Readout mitigator classes have two main methods:"
msgstr ""

#: ../../release_notes.rst:5482
msgid ":meth:`~.BaseReadoutMitigator.expectation_value` which computes an mitigated expectation value and standard error of a diagonal operator from a noisy :class:`~qiskit.result.Counts` object."
msgstr ""

#: ../../release_notes.rst:5486
msgid ":meth:`~.BaseReadoutMitigator.quasi_probabilities` that computes an error mitigated :class:`~qiskit.result.QuasiDistribution`, including standard error, from a noisy counts object."
msgstr ""

#: ../../release_notes.rst:5490
msgid "Note that currently the :mod:`qiskit.algorithms` module and the :class:`~qiskit.utils.QuantumInstance` class still use the legacy mitigators migrated from Qiskit Ignis in :mod:`qiskit.utils.mitigation`. It is planned to upgrade the module to use the new mitigator classes and deprecate the legacy mitgation code in a future release."
msgstr ""

#: ../../release_notes.rst:5498
msgid "Added the :class:`~qiskit.result.LocalReadoutMitigator` class for performing measurement readout error mitigation of local measurement errors. Local measuerment errors are those that are described by a tensor-product of single-qubit measurement errors."
msgstr ""

#: ../../release_notes.rst:5503
msgid "This class can be initialized with a list of :math:`N` single-qubit of measurement error assignment matrices or from a backend using the readout error information in the backend properties."
msgstr ""

#: ../../release_notes.rst:5507
msgid "Mitigation is implemented using local assignment-matrix inversion which has complexity of :math:`O(2^N)` for :math:`N`-qubit mitigation of :class:`~qiskit.result.QuasiDistribution` and expectation values."
msgstr ""

#: ../../release_notes.rst:5513
msgid "Added the :class:`~qiskit.result.CorrelatedReadoutMitigator` class for performing measurement readout error mitigation of correlated measurement errors. This class can be initialized with a single :math:`2^N \\times 2^N` measurement error assignment matrix that descirbes the error probabilities. Mitigation is implemented via inversion of assigment matrix which has mitigation complexity of :math:`O(4^N)` of :class:`~qiskit.result.QuasiDistribution` and expectation values."
msgstr ""

#: ../../release_notes.rst:5523
msgid "Added a :attr:`.QuasiDistribution.stddev_upper_bound` attribute and a kwarg to the constructor of the :class:`.QuasiDistribution` class, which is used for storing standard errors in quasi-probability estimates. This is used by :class:`~qiskit.result.BaseReadoutMitigator` classes to store the standard error in mitigated quasi probabilities."
msgstr ""

#: ../../release_notes.rst:5531
msgid "Added a :meth:`~qiskit.result.Counts.shots` method to :class:`qiskit.result.Counts` to return the sum of all outcomes in the counts."
msgstr ""

#: ../../release_notes.rst:5537
msgid "When running the :class:`~qiskit.algorithms.Grover` algorithm class if the optimal power is known and only a single circuit is run, the :attr:`.AmplificationProblem.is_good_state` callback function is no longer required to be set and the Grover search will return the most likely bitstring.  Generally, if the optimal power of the Grover operator is not known, the :class:`~qiskit.algorithms.Grover` algorithm checks different powers (i.e.  iterations) and applies the :attr:`~qiskit.algorithms.AmplificationProblem.is_good_state` function to check whether a good bitstring has been measured.  For example, you are now able to run something like::"
msgstr ""

#: ../../release_notes.rst:5565
msgid "Added method :meth:`~qiskit.dagcircuit.DAGCircuit.remove_cregs` to class :class:`~qiskit.dagcircuit.DAGCircuit` to support classical register removal."
msgstr ""

#: ../../release_notes.rst:5571
msgid "Added method :meth:`~qiskit.dagcircuit.DAGCircuit.remove_clbits` to class :class:`~qiskit.dagcircuit.DAGCircuit` to support the removal of idle classical bits. Any classical registers referencing a removed bit are also removed."
msgstr ""

#: ../../release_notes.rst:5578
msgid "Added a new method, :meth:`~qiskit.dagcircuit.DAGCircuit.replace_block_with_op`, to the :class:`~qiskit.dagcircuit.DAGCircuit` class. This method is used to replace a block of nodes in the DAG with a single operation. The canonical example is for the :class:`~qiskit.transpiler.passes.ConsolidateBlocks` pass which replaces blocks of nodes with equivalent :class:`~qiskit.extensions.UnitaryGate` nodes."
msgstr ""

#: ../../release_notes.rst:5588
msgid "Added a new analysis transpiler pass, :class:`~qiskit.transpiler.passes.Collect1qRuns`, to the :mod:`qiskit.transpiler.passes` module. This pass is used to find sequences of uninterrupted gates acting on a single qubit. It is similar to the :class:`~qiskit.transpiler.passes.Collect2qBlocks` and :class:`~qiskit.transpiler.passes.CollectMultiQBlocks` but optimized for single qubit runs instead of multiple qubit blocks."
msgstr ""

#: ../../release_notes.rst:5598
msgid "Various transpilation internals now use new features in `retworkx <https://github.com/Qiskit/retworkx>`__ 0.10 when operating on the internal circuit representation.  This can often result in speedups in calls to :obj:`~.compiler.transpile` of around 10-40%, with greater effects at higher optimization levels.  See `#6302 <https://github.com/Qiskit/qiskit-terra/pull/6302>`__ for more details."
msgstr ""

#: ../../release_notes.rst:5607
msgid "The :class:`~qiskit.transpiler.passes.UnitarySynthesis` transpiler pass in :mod:`qiskit.transpiler.passes` has a new kwarg in the constructor, ``min_qubits``. When specified this can be set to an ``int`` value which is the minimum size :class:`~qiskit.extensions.UnitaryGate` object to run the unitary synthesis on. If a :class:`~qiskit.extensions.UnitaryGate` in a :class:`~qiskit.circuit.QuantumCircuit` uses fewer qubits it will be skipped by that instance of the pass."
msgstr ""

#: ../../release_notes.rst:5617
msgid "The :obj:`.Eigensolver` and :obj:`.MinimumEigensolver` interfaces now support the type ``Dict[str, Optional[OperatorBase]]`` for the ``aux_operators`` parameter in their respective :meth:`~.Eigensolver.compute_eigenvalues` and :meth:`~.MinimumEigensolver.compute_minimum_eigenvalue` methods. In this case, the auxiliary eigenvalues are also stored in a dictionary under the same keys provided by the ``aux_operators`` dictionary. Keys that correspond to an operator that does not commute with the main operator are dropped."
msgstr ""

#: ../../release_notes.rst:5626
msgid "The :class:`~qiskit.transpiler.passes.BasisTranslator`, :class:`~qiskit.transpiler.passes.GateDirection`, and :class:`~qiskit.transpiler.passes.CheckGateDirection` transpiler passes have a new ``target`` kwarg in their constructors, which can be used to set a :class:`~qiskit.transpiler.Target` object as the target for the pass. If it is set it will be used instead of the ``target_basis`` (in the case of the :class:`~qiskit.transpiler.passes.BasisTranslator` pass) or ``coupling_map`` (in the case of the :class:`~qiskit.transpiler.passes.GateDirection` and :class:`~qiskit.transpiler.passes.CheckGateDirection` passes) arguments."
msgstr ""

#: ../../release_notes.rst:5639
msgid "Allow two transpiler stages in the :class:`~qiskit.utils.QuantumInstance`, one for parameterized circuits and a second one for bound circuits (i.e. no free parameters) only. If a quantum instance with passes for unbound and bound circuits is passed into a :class:`.CircuitSampler`, the sampler will attempt to apply the unbound pass once on the parameterized circuit, cache it, and only apply the bound pass for all future evaluations."
msgstr ""

#: ../../release_notes.rst:5646
msgid "This enables variational algorithms like the :class:`~qiskit.algorithms.VQE` to run a custom pass manager for parameterized circuits once and, additionally, another the transpiler again with a different custom pass manager on the bound circuits in each iteration. Being able to run different pass managers is important because not all passes support parameterized circuits (for example :class:`~qiskit.transpiler.passes.Optimize1qGatesDecomposition` only works with bound circuit parameters)."
msgstr ""

#: ../../release_notes.rst:5653
msgid "For example, this feature allows using the pulse-efficient CX decomposition in the VQE, as"
msgstr ""

#: ../../release_notes.rst:5704
msgid "Introduced a new unitary synthesis plugin interface which is used to enable using alternative synthesis techniques included in external packages seamlessly with the :class:`~qiskit.transpiler.passes.UnitarySynthesis` transpiler pass. Users can select a plugin to use when calling :func:`~qiskit.compiler.transpile` by setting the ``unitary_synthesis_method`` kwarg to the plugin's name. A full list of installed plugins can be found using the :func:`qiskit.transpiler.passes.synthesis.plugin.unitary_synthesis_plugin_names` function. For example, if you installed a package that includes a synthesis plugin named ``special_synth`` you could use it with::"
msgstr ""

#: ../../release_notes.rst:5719
msgid "This will replace all uses of the :class:`~qiskit.transpiler.passes.UnitarySynthesis` with the method included in the external package that exports the ``special_synth`` plugin."
msgstr ""

#: ../../release_notes.rst:5723
msgid "The plugin interface is built around setuptools `entry points <https://setuptools.readthedocs.io/en/latest/userguide/entry_point.html>`__ which enable packages external to Qiskit to advertise they include a synthesis plugin. For details on writing a new plugin refer to the :mod:`qiskit.transpiler.passes.synthesis.plugin` module documentation."
msgstr ""

#: ../../release_notes.rst:5731
msgid "Added a new transpiler pass, :class:`~qiskit.transpiler.passes.VF2Layout`. This pass models the layout allocation problem as a subgraph isomorphism problem and uses the `VF2 algorithm`_ implementation in `retworkx <https://qiskit.org/documentation/retworkx/stubs/retworkx.vf2_mapping.html>`__ to find a perfect layout (a layout which would not require additional routing) if one exists. The functionality exposed by this new pass is very similar to exisiting :class:`~qiskit.transpiler.passes.CSPLayout` but :class:`~qiskit.transpiler.passes.VF2Layout` is significantly faster."
msgstr ""

#: ../../release_notes.rst:5749
msgid "The ``\"ket\"`` convention in the ``\"latex\"`` drawer of :meth:`.Statevector.draw` is only valid for states comprising purely of qubits.  If you are using states with some spaces of dimension greater than two, you should either pass ``convention=\"vector\"``, or use a different drawer."
msgstr ""

#: ../../release_notes.rst:5756
msgid "The OpenQASM 3 export capabilities are in a beta state, and some features of Qiskit Terra's :obj:`.QuantumCircuit` are not yet supported.  In particular, you may see errors if you try to export custom subroutines with classical parameters, and there is no provision yet for exporting pulse-calibrated operations into `OpenPulse <https://qiskit.github.io/openqasm/language/openpulse.html>`__."
msgstr ""

#: ../../release_notes.rst:5764
msgid "When running the :class:`~qiskit.transpiler.passes.BasisTranslator` in isolation with the ``target`` argument set to a :class:`~qiskit.transpiler.Target` object, where some single-qubit gates can only apply to non-overlapping sets of qubits, the output circuit might incorrectly include operations on a qubit that are not allowed by the :class:`~qiskit.transpiler.Target`.  For example, if you ran::"
msgstr ""

#: ../../release_notes.rst:5824
msgid "``output`` will have :class:`.RZGate` and :class:`.SXGate` on qubit 0, even though this is forbidden. To correct this you can normally run the basis translator a second time (i.e.  ``output = bt_pass(output)`` in the above example) to correct this. This should not affect the output of running the :func:`~qiskit.compiler.transpile` function and is only an issue if you run the pass by itself."
msgstr ""

#: ../../release_notes.rst:5839
msgid "Starting with this version, ``from qiskit import *`` will not import submodules, but only a selected list of objects.  This might break existing code using ``from qiskit import *`` and referring to objects that are not part of the current namespace.  As a reminder, ``import *`` is  considered bad practice and it should not be used in production code.  Qiskit sets ``__all__`` in ``qiskit/__init__.py`` as a way to mitigate the effects of said bad practice.  If your code raises ``name '<something>' is not defined``, add ``from qiskit import <something>`` and try again."
msgstr ""

#: ../../release_notes.rst:5850
msgid "The preset pass managers for optimization levels 0, 1, 2, and 3 which are generated by :func:`~qiskit.transpiler.preset_passmanagers.level_0_pass_manager`, :func:`~qiskit.transpiler.preset_passmanagers.level_1_pass_manager`, :func:`~qiskit.transpiler.preset_passmanagers.level_2_pass_manager`, and :func:`~qiskit.transpiler.preset_passmanagers.level_3_pass_manager` respectively will no longer unconditionally run the :class:`~qiskit.transpiler.passes.TimeUnitConversion`. Previously, the preset pass managers would always run this pass regardless of the inputs to the transpiler and the circuit. Now this pass will only be run if a ``scheduling_method`` parameter is set or the circuit contains a :class:`~qiskit.circuit.Delay` instruction and the ``instruction_durations`` parameter is set. This change was made in the interest of runtime performance as in some cases running :func:`~qiskit.compiler.transpile` on circuits with a large number of gates and no delays, timing, or scheduling being used the :class:`~qiskit.transpiler.passes.TimeUnitConversion` could be the largest bottleneck in the transpilation."
msgstr ""

#: ../../release_notes.rst:5871
msgid "The default method for :obj:`.BIPMapping` is now ``balanced`` rather than ``depth``.  This new objective generally achieves a better result, as it factors in both the circuit depth and the gate error."
msgstr ""

#: ../../release_notes.rst:5877
msgid "The ``sort_parameters_by_name`` of the :class:`~qiskit.algorithms.VQE` class has been removed, following its deprecation in Qiskit Terra 0.18.  There is no alternative provided, as the new ordering of parameters is the more natural sort order."
msgstr ""

#: ../../release_notes.rst:5884
msgid "The circuit drawers :meth:`.QuantumCircuit.draw` and :func:`.circuit_drawer` with the ``latex`` option will now save their images in a format determined the file extension (if a file name is provided). Previously, they would always save in PNG format.  They now raise ``ValueError`` if the image format is not known.  This was done to make it easier to save the image in different formats."
msgstr ""

#: ../../release_notes.rst:5893
msgid "The core dependency ``retworkx`` had its version requirement bumped to 0.10.1, up from 0.9. This enables several performance improvements across different transpilation passes."
msgstr ""

#: ../../release_notes.rst:5898
msgid "The previously deprecated ``condition`` kwarg, which was deprecated as part of the 0.15.0 release, has been removed from :meth:`.DAGCircuit.apply_operation_back` and :meth:`.DAGCircuit.apply_operation_front`. Instead set the ``condition`` attribute on the :class:`~qiskit.circuit.Instruction` instances being added to the :class:`~qiskit.dagcircuit.DAGCircuit` using :meth:`.Instruction.c_if`."
msgstr ""

#: ../../release_notes.rst:5907
msgid "The ``DAGCircuit.extend_back()`` method has been removed. It was originally deprecated in the 0.13.0 release. Instead you can use the :meth:`.DAGCircuit.compose` method which is more general and provides the same functionality."
msgstr ""

#: ../../release_notes.rst:5914
msgid "The ``DAGCircuit.compose_back()`` method has been removed. It was originally deprecated in the 0.13.0 release. Instead you can use the :meth:`.DAGCircuit.compose` method which is more general and provides the same functionality."
msgstr ""

#: ../../release_notes.rst:5921
msgid "The ``edge_map`` kwarg of the :class:`~qiskit.dagcircuit.DAGCircuit` method :meth:`~qiskit.dagcircuit.DAGCircuit.compose` has been removed. It was originally deprecated in the 0.14.0 release. The method takes a ``qubits`` and ``clbits`` kwargs to specify the positional order of bits to compose onto instead of using a dictionary mapping that ``edge_map`` previously provided."
msgstr ""

#: ../../release_notes.rst:5930
msgid "The ``DAGCircuit.twoQ_gates()`` method has been removed. It was originally deprecated in the 0.13.0 release. Instead, :meth:`.DAGCircuit.two_qubit_ops` should be used."
msgstr ""

#: ../../release_notes.rst:5936
msgid "The ``DAGCircuit.threeQ_or_more_gates()`` method has been removed. It was originally deprecated in the 0.13.0 release. Instead, :meth:`.DAGCircuit.multi_qubit_ops` method should be used."
msgstr ""

#: ../../release_notes.rst:5942
msgid "Named access for the first positional argument for the constructor of the :class:`.SingleQubitUnitary` class with ``u`` has been removed. It was originally deprecated in the 0.14.0 release. Instead, the first positional argument can be set using the name ``unitary_matrix`` (or just set it positionally instead of by name)."
msgstr ""

#: ../../release_notes.rst:5950
msgid "Named access for the first positional argument for the :class:`~qiskit.circuit.QuantumCircuit` method :class:`~qiskit.circuit.QuantumCircuit.squ` with ``u`` has been removed. It was originally deprecated in the 0.14.0 release. Instead the first positional argument can be set using the name ``unitary_matrix`` (or just set it positionally instead of by name)."
msgstr ""

#: ../../release_notes.rst:5959
msgid "The unused ``proc`` and ``nested_scope`` kwargs for the ``qasm()`` method of the QASM node classes in the ``qiskit.qasm.node`` module have been removed. They were originally deprecated in the 0.15.0 release."
msgstr ""

#: ../../release_notes.rst:5965
msgid "The unused ``proc`` and ``nested_scope`` kwargs for the ``latex()`` method of the QASM node classes in the ``qiskit.qasm.node`` module have been removed. They were originally deprecated in the 0.15.0 release."
msgstr ""

#: ../../release_notes.rst:5971
msgid "The unused ``proc`` and ``nested_scope`` kwargs for the ``real()`` method of the QASM node classes in the ``qiskit.qasm.node`` module have been removed. They were originally deprecated in the 0.15.0 release."
msgstr ""

#: ../../release_notes.rst:5977
msgid "The output of :meth:`.Statevector.draw` when using ``\"latex\"`` output is now the new ``\"ket\"`` convention if plotting a state comprised purely of qubits. This was changed to make reading the output clearer, especially in educational contexts, because it shows the ket labels, and only displays the nonzero elements."
msgstr ""

#: ../../release_notes.rst:5985
msgid "When running :func:`~qiskit.execute_function.execute` with a :class:`~qiskit.providers.BackendV1` backend the default values for the kwargs ``shots``, ``max_credits``, ``meas_level``, ``meas_return`` and ``memory_slot_size`` will now be whatever the set default is on the target backend's :attr:`~qiskit.providers.BackendV1.options` attribute. Previously these defaults were set to match the default values when calling :func:`~qiskit.execute_function.execute` with a legacy :class:`~qiskit.providers.BaseBackend` backend. For example::"
msgstr ""

#: ../../release_notes.rst:6006
msgid "will now run with ``4096`` shots. While in previous releases it would run with ``1024``."
msgstr ""

#: ../../release_notes.rst:6011
msgid "The minimum supported version of Matplotlib has been raised from 2.1.0 to 3.3.0. You will now need to have Matplotlib 3.3.0 installed if you're using Matplotlib-based visualization functions such as the ``'mpl'`` backend for the :func:`~qiskit.visualization.circuit_drawer` function or the :func:`~qiskit.visualization.plot_bloch_vector` function. This was done for two reasons, the first is because recent versions of Matplotlib have deprecated the use of APIs around 3D visualizations that were compatible with older releases and second installing older versions of Matplotlib was becoming increasingly difficult as matplotlib's upstream dependencies have caused incompatiblities that made testing moving forward more difficult."
msgstr ""

#: ../../release_notes.rst:6025
msgid "The internal use of the random number generator in :func:`~qiskit.circuit.random.random_circuit` was adjusted, which will change the output from previous versions, even with a fixed seed. This was done to greatly improve the runtime scaling with the number of qubits being used. If you were depending on an identical output from a previous version it is recommended that you use :func:`.qpy_serialization.dump` to save the random circuit generated with a previous version and instead of re-generating it with the new release, and instead just use :func:`.qpy_serialization.load` to load that saved circuit."
msgstr ""

#: ../../release_notes.rst:6038
msgid "The use of ``*`` (``__mul__``) for the :meth:`~qiskit.quantum_info.Operator.dot` method and ``@`` (``__matmul__``) for the :meth:`~qiskit.quantum_info.Operator.compose` method of ``BaseOperator`` (which is the parent of all the operator classes in :mod:`qiskit.quantum_info` including classes like :class:`~qiskit.quantum_info.Operator` and :class:`~qiskit.quantum_info.Pauli`) is no longer supported.  The use of these operators were previously deprecated in 0.17.0 release.  Instead you should use the :meth:`~qiskit.quantum_info.Operator.dot` and :meth:`~qiskit.quantum_info.Operator.compose` methods directly, or the ``&`` operator (``__and__``) can be used for :meth:`~qiskit.quantum_info.Operator.compose`.  For example, if you were previously using the operator like::"
msgstr ""

#: ../../release_notes.rst:6059
msgid "this should be changed to be::"
msgstr ""

#: ../../release_notes.rst:6067 ../../release_notes.rst:10209
#: ../../release_notes.rst:11290 ../../release_notes.rst:23127
msgid "or::"
msgstr ""

#: ../../release_notes.rst:6073
msgid "Various methods of assigning parameters to operands of pulse program instructions have been removed, having been deprecated in Qiskit Terra 0.17. These include:"
msgstr ""

#: ../../release_notes.rst:6077
msgid "the ``assign()`` method of :obj:`.pulse.Instruction`."
msgstr ""

#: ../../release_notes.rst:6078
msgid "the ``assign()`` method of ``Channel``, which is the base of :obj:`.AcquireChannel`, :obj:`.SnapshotChannel`, :obj:`.MemorySlot` and :obj:`.RegisterSlot`."
msgstr ""

#: ../../release_notes.rst:6081
msgid "the ``assign()`` and ``assign_parameters()`` methods of ``ParametricPulse``, which is the base of :obj:`.pulse.Gaussian`, :obj:`.pulse.GaussianSquare`, :obj:`.pulse.Drag` and :obj:`.pulse.Constant`."
msgstr ""

#: ../../release_notes.rst:6085
msgid "These parameters should be assigned from the pulse program (:class:`.pulse.Schedule` and :class:`.pulse.ScheduleBlock`) rather than operands of the pulse program instruction."
msgstr ""

#: ../../release_notes.rst:6091
msgid "The ``flatten()`` method of :class:`.pulse.Instruction` and :class:`qiskit.pulse.Schedule` has been removed and no longer exists as per the deprecation notice from Qiskit Terra 0.17. This transformation is defined as a standalone function in :func:`qiskit.pulse.transforms.canonicalization.flatten`."
msgstr ""

#: ../../release_notes.rst:6099
msgid "``qiskit.pulse.interfaces.ScheduleComponent`` has been removed and no longer exists as per the deprecation notice from Qiskit Terra 0.15. No alternative class will be provided."
msgstr ""

#: ../../release_notes.rst:6105
msgid "Legacy pulse drawer arguments have been removed from :meth:`.pulse.Waveform.draw`, :meth:`.Schedule.draw` and :meth:`.ScheduleBlock.draw` and no longer exist as per the deprecation notice from Qiskit Terra 0.16. Now these draw methods support only V2 pulse drawer arguments. See method documentations for details."
msgstr ""

#: ../../release_notes.rst:6113
msgid "The ``qiskit.pulse.reschedule`` module has been removed and this import path no longer exist as per the deprecation notice from Qiskit Terra 0.14. Use :mod:`qiskit.pulse.transforms` instead."
msgstr ""

#: ../../release_notes.rst:6119
msgid "A protected method ``Schedule._children()`` has been removed and replaced by a protected instance variable as per the deprecation notice from Qiskit Terra 0.17.  This is now provided as a public attribute :obj:`.Schedule.children`."
msgstr ""

#: ../../release_notes.rst:6126
msgid "Timeslot relevant methods and properties have been removed and no longer exist in :class:`~.pulse.ScheduleBlock` as per the deprecation notice from Qiskit Terra 0.17.  Since this representation doesn't have notion of instruction time ``t0``, the timeslot information will be available after it is transformed to a :obj:`~.pulse.Schedule`.  Corresponding attributes have been provided after this conversion, but they are no longer supported.  The following attributes are removed:"
msgstr ""

#: ../../release_notes.rst:6134
msgid "``timeslots``"
msgstr ""

#: ../../release_notes.rst:6135
msgid "``start_time``"
msgstr ""

#: ../../release_notes.rst:6136
msgid "``stop_time``"
msgstr ""

#: ../../release_notes.rst:6137
msgid "``ch_start_time``"
msgstr ""

#: ../../release_notes.rst:6138
msgid "``ch_stop_time``"
msgstr ""

#: ../../release_notes.rst:6139 ../../release_notes.rst:22112
msgid "``shift``"
msgstr ""

#: ../../release_notes.rst:6140 ../../release_notes.rst:22113
msgid "``insert``"
msgstr ""

#: ../../release_notes.rst:6144
msgid "Alignment pulse schedule transforms have been removed and no longer exist as per the deprecation notice from Qiskit Terra 0.17. These transforms are integrated and implemented in the ``AlignmentKind`` context of the schedule block.  The following explicit transform functions are removed:"
msgstr ""

#: ../../release_notes.rst:6149
msgid "``qiskit.pulse.transforms.align_equispaced``"
msgstr ""

#: ../../release_notes.rst:6150
msgid "``qiskit.pulse.transforms.align_func``"
msgstr ""

#: ../../release_notes.rst:6151
msgid "``qiskit.pulse.transforms.align_left``"
msgstr ""

#: ../../release_notes.rst:6152
msgid "``qiskit.pulse.transforms.align_right``"
msgstr ""

#: ../../release_notes.rst:6153
msgid "``qiskit.pulse.transforms.align_sequential``"
msgstr ""

#: ../../release_notes.rst:6157
msgid "Redundant pulse builder commands have been removed and no longer exist as per the deprecation notice from Qiskit Terra 0.17. ``pulse.builder.call_schedule`` and ``pulse.builder.call_circuit`` have been integrated into :func:`.pulse.builder.call`."
msgstr ""

#: ../../release_notes.rst:6164
msgid "An internal filter override that caused all Qiskit deprecation warnings to be displayed has been removed.  This means that the behaviour will now revert to the standard Python behaviour for deprecations; you should only see a ``DeprecationWarning`` if it was triggered by code in the main script file, interpreter session or Jupyter notebook.  The user will no longer be blamed with a warning if internal Qiskit functions call deprecated behaviour.  If you write libraries, you should occasionally run with the default warning filters disabled, or have tests which always run with them disabled.  See the `Python documentation on warnings`_, and in particular the `section on testing for deprecations`_ for more information on how to do this."
msgstr ""

#: ../../release_notes.rst:6180
msgid "Certain warnings used to be only issued once, even if triggered from multiple places.  This behaviour has been removed, so it is possible that if you call deprecated functions, you may see more warnings than you did before.  You should change any deprecated function calls to the suggested versions, because the deprecated forms will be removed in future Qiskit releases."
msgstr ""

#: ../../release_notes.rst:6189
msgid "The deprecated ``qiskit.schemas`` module and the ``qiskit.validation`` module which build jsonschema validator from the schemas have been removed. This was deprecated in the 0.17.0 release and has been replaced with a `dedicated repository for the IBM Quantum API payload schemas <https://github.com/Qiskit/ibm-quantum-schemas>`__."
msgstr ""

#: ../../release_notes.rst:6195
msgid "If you were relying on the schema files previously packaged in ``qiskit.schemas`` or the validators built on them you should use that repository and create validators from the schema files it contains."
msgstr ""

#: ../../release_notes.rst:6201
msgid "The functions ``qiskit.qobj.validate_qobj_against_schema`` and ``qiskit.qobj.common.validator`` along with the ``validate`` kwarg of the methods :meth:`.QasmQobj.to_dict`, :meth:`.PulseQobj.to_dict`, and :meth:`.Qobj.to_dict` have been removed. These were deprecated in the 0.17.0 release. If you were using these function you will have to manually build jsonschema validation functions for ``Qobj`` objects using the jsonschema files from `the dedicated repository for the IBM Quantum API payload schemas <https://github.com/Qiskit/ibm-quantum-schemas>`__."
msgstr ""

#: ../../release_notes.rst:6212
msgid "The ``fastjsonschema`` and ``jsonschema`` packages are no longer in the requirements list for qiskit-terra. The internal use of jsonschema has been removed and they are no longer required to use qiskit-terra."
msgstr ""

#: ../../release_notes.rst:6218
msgid "The exception raised by the :func:`~.compiler.assemble` function when invalid parameters are passed in for constructing a :class:`~qiskit.qobj.PulseQobj` have changed from a ``SchemaValidationError`` to a :class:`.QiskitError`. This was necessary because the ``SchemaValidationError`` class was removed along with the rest of the deprecated ``qiskit.schemas`` and ``qiskit.validation``. This also makes it more consistent with other error conditions from :func:`~qiskit.compiler.assemble` which were already raising a :class:`.QiskitError`."
msgstr ""

#: ../../release_notes.rst:6230
msgid "The default routing pass and layout pass for transpiler optimization level 3 has changed to use :class:`~qiskit.transpiler.passes.SabreSwap` and :class:`~qiskit.transpiler.passes.SabreLayout` respectively. This was done to improve the quality of the output result, as using the sabre passes produces better results than using :class:`~qiskit.transpiler.passes.StochasticSwap` and :class:`~qiskit.transpiler.passes.DenseLayout`, which were used as the defaults in prior releases. This change will improve the quality of the results when running :func:`~qiskit.compiler.transpile` or :func:`~qiskit.execute_function.execute` functions with the ``optimization_level`` kwarg set to ``3``. While this is generally an improvement, if you need to retain the previous behavior for any reason you can do this by explicitly setting the ``routing_method=\"stochastic\"`` and ``layout_method=\"dense\"`` when calling :func:`~qiskit.compiler.transpile` with ``optimization_level=3``."
msgstr ""

#: ../../release_notes.rst:6248
msgid "The return type of :func:`~qiskit.quantum_info.pauli_basis` will change from :class:`~qiskit.quantum_info.PauliTable` to :class:`~qiskit.quantum_info.PauliList` in a future release of Qiskit Terra. To immediately swap to the new behaviour, pass the keyword argument ``pauli_list=True``."
msgstr ""

#: ../../release_notes.rst:6256
msgid "The :attr:`~qiskit.extensions.SingleQubitUnitary.name` attribute of the :class:`~qiskit.extensions.SingleQubitUnitary` gate class has been changed from ``unitary`` to ``squ``. This was necessary to avoid a conflict with the :class:`~qiskit.extensions.UnitaryGate` class's name which was also ``unitary`` since the 2 gates are not the same and don't have the same implementation (and can't be used interchangeably)."
msgstr ""

#: ../../release_notes.rst:6265
msgid "The minimum version of Symengine__ required for installing has been increased to 0.8.0. This was necessary to fix some issues with the handling of ``numpy.float16`` and ``numpy.float32`` values when running :meth:`~qiskit.circuit.ParameterExpression.bind` to bind parameters in a :class:`~qiskit.circuit.ParameterExpression`."
msgstr ""

#: ../../release_notes.rst:6275
msgid "A new dependency `stevedore <https://pypi.org/project/stevedore/>`__ has been added to the requirements list. This is required by qiskit-terra as it is used to build the unitary synthesis plugin interface."
msgstr ""

#: ../../release_notes.rst:6287
msgid "The ``gate`` attribute and initialization parameter of :class:`qiskit.transpiler.passes.Decompose` is deprecated, and will be removed in a future release.  Instead of this single gate, you should pass a list of gate names to the new parameter ``gates_to_decompose``.  This was done as the new form allows you to select more than one gate as a decomposition target, which is more flexible, and does not need to re-run the pass several times to decompose a set of gates."
msgstr ""

#: ../../release_notes.rst:6297
msgid "There has been a significant transpiler pass reorganization regarding calibrations. The import paths::"
msgstr ""

#: ../../release_notes.rst:6303
msgid "are deprecated, and will be removed in a future release. The import path::"
msgstr ""

#: ../../release_notes.rst:6308
msgid "is also deprecated, and will be removed in a future release. You should use the new import paths::"
msgstr ""

#: ../../release_notes.rst:6317
msgid "The :class:`~qiskit.dagcircuit.DAGNode` class is being deprecated as a standalone class and will be used in the future only as the parent class for :class:`~qiskit.dagcircuit.DAGOpNode`, :class:`~qiskit.dagcircuit.DAGInNode`, and :class:`~qiskit.dagcircuit.DAGOutNode`. As part of this deprecation, the following kwargs and associated attributes in :obj:`.DAGNode` are also being deprecated: ``type``, ``op``, and ``wire``."
msgstr ""

#: ../../release_notes.rst:6327
msgid "For the constructor of the :class:`~qiskit.transpiler.passes.RZXCalibrationBuilder` passing a backend either as the first positional argument or with the named ``backend`` kwarg is deprecated and will no longer work in a future release. Instead a :class:`~qiskit.pulse.InstructionScheduleMap` should be passed directly to the ``instruction_schedule_map`` kwarg and a list of channel name lists for each qubit should be passed directly to ``qubit_channel_mapping``. For example, if you were calling the pass like::"
msgstr ""

#: ../../release_notes.rst:6342
msgid "instead you should call it like::"
msgstr ""

#: ../../release_notes.rst:6355
msgid "This change is necessary because as a general rule backend objects are not pickle serializable and it would break when it was used with multiple processes inside of :func:`~qiskit.compiler.transpile` when compiling multiple circuits at once."
msgstr ""

#: ../../release_notes.rst:6362
msgid "The ``label`` property of class :class:`~qiskit.circuit.library.MCMT` and subclass :class:`~qiskit.circuit.library.MCMTVChain` has been deprecated and will be removed in a future release. Consequently, the ``label`` kwarg on the constructor for both classes is also deprecated, along with the ``label`` kwarg of method :meth:`.MCMT.control`. Currently, the ``label`` property is used to name the controlled target when it is comprised of more than one target qubit, however, this was never intended to be user-specifiable, and can result in an incorrect MCMT gate if the name of a well-known operation is used. After deprecation, the ``label`` property will no longer be user-specifiable. However, you can get the generated name of the controlled target via"
msgstr ""

#: ../../release_notes.rst:6382
msgid "The :meth:`~qiskit.transpiler.CouplingMap.subgraph` method of the :class:`~qiskit.transpiler.CouplingMap` class is deprecated and will be removed in a future release. Instead the :meth:`~qiskit.transpiler.CouplingMap.reduce` method should be used, which does the same thing except it preserves the node list order for the output :class:`~qiskit.transpiler.CouplingMap` (while :meth:`~qiskit.transpiler.CouplingMap.subgraph` did not preserve list order)."
msgstr ""

#: ../../release_notes.rst:6393
msgid "Creating an instance of :obj:`.InstructionSet` with the ``circuit_cregs`` keyword argument is deprecated.  In general, these classes never need to be constructed by users (but are used internally), but should you need to, you should pass a callable as the ``resource_requester`` keyword argument.  For example::"
msgstr ""

#: ../../release_notes.rst:6425
msgid "The use of the measurement mitigation classes :class:`qiskit.ignis.mitigation.CompleteMeasFitter` and :class:`qiskit.ignis.mitigation.TensoredMeasFitter` from ``qiskit-ignis`` as values for the ``measurement_error_mitigation_cls`` kwarg of the constructor for the :class:`~qiskit.utils.QuantumInstance` class is deprecated and will be removed in a future release. Instead the equivalent classes from :mod:`qiskit.utils.mitigation`, :class:`~qiskit.utils.mitigation.CompleteMeasFitter` and :class:`~qiskit.utils.mitigation.TensoredMeasFitter` should be used. This was necessary as the ``qiskit-ignis`` project is now deprecated and will no longer be supported in the near future. It's worth noting that unlike the equivalent classes from ``qiskit-ignis`` the versions from :mod:`qiskit.utils.mitigation` are supported only in their use with :class:`~qiskit.utils.QuantumInstance` (i.e. as a class not an instance with the ``measurement_error_mitigation_cls`` kwarg) and not intended for standalone use."
msgstr ""

#: ../../release_notes.rst:6444
msgid "The :meth:`.Optimizer.optimize` method for all the optimizers (:class:`~qiskit.algorithms.optimizers.Optimizer` and derived classes) is now deprecated and will be removed in a future release. Instead, the :meth:`.Optimizer.minimize` method should be used which mimics the signature of SciPy's ``minimize()`` function."
msgstr ""

#: ../../release_notes.rst:6450
msgid "To replace the current `optimize` call with `minimize` you can replace"
msgstr ""

#: ../../release_notes.rst:6462
msgid "with"
msgstr ""

#: ../../release_notes.rst:6476
msgid "Importing the ``qiskit.util`` module will now issue a ``DeprecationWarning``. Users should instead import all the same functionality from :obj:`qiskit.utils`. The ``util`` module has been deprecated since Terra 0.17, but previously did not issue a warning. It will be removed in Terra 0.20."
msgstr ""

#: ../../release_notes.rst:6483
msgid "The property :attr:`~qiskit.quantum_info.SparsePauliOp.table` is deprecated, and will be removed in a future release.  This is because :class:`~qiskit.quantum_info.SparsePauliOp` has been updated to internally use :class:`~qiskit.quantum_info.operators.PauliList` instead of :class:`~qiskit.quantum_info.PauliTable`.  This is in order to significantly improve performance.  You should now access the :obj:`.PauliList` data by using the :attr:`.SparsePauliOp.paulis` attribute."
msgstr ""

#: ../../release_notes.rst:6499
msgid "Fixed a bug where many layout methods would ignore 3-or-more qubit gates, resulting in unexpected layout-allocation decisions.  The transpiler pass :class:`.Unroll3qOrMore` is now being executed before the layout pass in all the preset pass managers when :func:`~.compiler.transpile` is called.  Fixed `#7156 <https://github.com/Qiskit/qiskit-terra/issues/7156>`__."
msgstr ""

#: ../../release_notes.rst:6507
msgid "Disassembled circuits now inherit calibrations from assembled :obj:`.QasmQobj` and experiments.  Fixes `#5348 <https://github.com/Qiskit/qiskit-terra/issues/5348>`__."
msgstr ""

#: ../../release_notes.rst:6513
msgid "Fixed setting the ``ansatz`` or ``optimizer`` attributes of a :obj:`~qiskit.algorithms.VQE` instance to ``None`` resulting in a buggy behavior.  See `#7093 <https://github.com/Qiskit/qiskit-terra/issues/7093>`__ for details."
msgstr ""

#: ../../release_notes.rst:6520
msgid "Fixed addition of :obj:`.PauliList`\\ s with ``qargs``. The method used to raise a runtime error if the operands had different numbers of qubits."
msgstr ""

#: ../../release_notes.rst:6525
msgid "Fixed an issue causing an error when trying to compute a gradient with the :class:`~qiskit.opflow.gradients.CircuitGradient` class for a gate that was not a supported gate. This bugfix transpiles a given gate to the set of supported gates for a requested gradient method.  Fixes `#6918 <https://github.com/Qiskit/qiskit-terra/issues/6918>`__."
msgstr ""

#: ../../release_notes.rst:6533
msgid "Removed calibration results when using error mitigation with the :meth:`~qiskit.utils.QuantumInstance.execute` method of :class:`~qiskit.utils.QuantumInstance`.  Fixes `#7129 <https://github.com/Qiskit/qiskit-terra/issues/7129>`__."
msgstr ""

#: ../../release_notes.rst:6540
msgid "Fixed a deprecation warning emitted when running :meth:`.QuantumCircuit.draw` or :func:`.circuit_drawer` with Sympy 1.9 installed, mentioning the Sympy function ``expr_free_symbols()``. The circuit drawers previously made use of this method when finding instances of symbolic constants."
msgstr ""

#: ../../release_notes.rst:6548
msgid "Fixed an issue where the ``ax`` kwarg and the ``figwidth`` option in the ``style`` kwarg for the ``mpl`` circuit drawer did not scale properly. Users can now pass an ``ax`` from a Matplotlib subplot to the ``mpl`` circuit drawer and the circuit will be drawn within the boundaries of that subplot. Alternatively, users can set the ``figwidth`` in inches in the ``style`` dict kwarg and the drawing will scale to the width in inches that was set. Fixed `#6367 <https://github.com/Qiskit/qiskit-terra/issues/6367>`__."
msgstr ""

#: ../../release_notes.rst:6559
msgid "Fixed an issue with the :func:`~qiskit.visualization.circuit_drawer` function and :meth:`~qiskit.circuit.QuantumCircuit.draw` method of :class:`~qiskit.circuit.QuantumCircuit`. When displaying a ``measure`` instruction targeted on a classical bit instead of a register, using the ``latex`` drawer option, the drawer would fail."
msgstr ""

#: ../../release_notes.rst:6567
msgid "Fixed an issue with the :func:`~qiskit.visualization.circuit_drawer` function and :meth:`~qiskit.circuit.QuantumCircuit.draw` method of :class:`~qiskit.circuit.QuantumCircuit`. With any of the 3 drawer options, ``mpl``, ``latex``, or ``text``, if a gate with a classical condition was encountered that was conditioned on a classical bit without a register, the drawer would fail."
msgstr ""

#: ../../release_notes.rst:6576
msgid "Fixed an issue with the :func:`~qiskit.visualization.circuit_drawer` function and :meth:`~qiskit.circuit.QuantumCircuit.draw` method of :class:`~qiskit.circuit.QuantumCircuit`. With any of the 3 drawer options, ``mpl``, ``latex``, or ``text``, if a gate with a classical condition was conditioned on the same classical bit as a ``measure`` and the bit that the measure targeted did not have a register, the drawer would fail."
msgstr ""

#: ../../release_notes.rst:6586
msgid ":obj:`~qiskit.circuit.library.C3SXGate` now has a correct decomposition and matrix representation.  Previously it was equivalent to ``SdgXGate().control(3)``, rather than the intended ``SXGate().control(3)``."
msgstr ""

#: ../../release_notes.rst:6592
msgid "The member ``name`` of ``qiskit.test.mock.utils.ConfigurableFakeBackend`` has been changed to ``backend_name``. This was done to avoid a conflict with the :meth:`~qiskit.providers.BackendV1.name` method inherited from the parent abstract :class:`~qiskit.providers.BackendV1` class. This makes ``ConfigurableFakeBackend`` compatible with anything expecting a :class:`~qiskit.providers.BackendV1` object. However, if you were using the ``name`` attribute directly before you will now need to either call it as a method or access the ``backend_name`` attribute instead."
msgstr ""

#: ../../release_notes.rst:6603
msgid "Fixed an issue where calling :meth:`.QuantumCircuit.decompose()` on a circuit containing an :class:`~qiskit.circuit.Instruction` whose :attr:`~.Instruction.definition` attribute was empty would leave the instruction in place, instead of decomposing it into zero operations. For example, with a circuit::"
msgstr ""

#: ../../release_notes.rst:6614
msgid "Previously, calling ``circuit.decompose()`` would not change the circuit. Now, the decomposition will correct decompose ``empty`` into zero instructions. See `#6997 <https://github.com/Qiskit/qiskit-terra/pull/6997>`__ for more."
msgstr ""

#: ../../release_notes.rst:6621
msgid "Fixed an issue with the :func:`~qiskit.visualization.circuit_drawer` function and :meth:`~qiskit.circuit.QuantumCircuit.draw` method of :class:`~qiskit.circuit.QuantumCircuit`. When displaying a ``measure`` instruction containing a classical ``condition`` using the ``mpl`` or ``latex`` options, the ``condition`` information would sometimes overwrite the ``measure`` display."
msgstr ""

#: ../../release_notes.rst:6630
msgid "Fixed an issue with the :func:`~qiskit.visualization.circuit_drawer` function and :meth:`~qiskit.circuit.QuantumCircuit.draw` method of :class:`~qiskit.circuit.QuantumCircuit`. The ``mpl`` drawer used hex notation to display the ``condition`` value, whereas the ``text`` and ``latex`` drawers used decimal notation. Now all three drawers use hex notation."
msgstr ""

#: ../../release_notes.rst:6639
msgid "Fixed a bug in the Hoare optimizer transpilation pass where it could attempt to remove a gate twice if it could be separately combined with both its predecessor and its successor to form the identity.  Refer to `#7271 <https://github.com/Qiskit/qiskit-terra/issues/7271>`__ for more details."
msgstr ""

#: ../../release_notes.rst:6646
msgid "Making an instruction conditional with the standard :meth:`.InstructionSet.c_if` method with integer indices is now consistent with the numbering scheme used by the :obj:`.QuantumCircuit` the instructions are part of.  Previously, if there were two :obj:`.ClassicalRegister`\\ s with overlapping :obj:`.Clbit`\\ s, the numbering would be incorrect.  See `#7246 <https://github.com/Qiskit/qiskit-terra/issues/7246>`__ for more detail."
msgstr ""

#: ../../release_notes.rst:6656
msgid "Making an instruction conditional with the standard :meth:`.InstructionSet.c_if` method will now succeed, even if there are no :obj:`.ClassicalRegister`\\ s in the circuit. See `#7250 <https://github.com/Qiskit/qiskit-terra/issues/7250>`__ for more detail."
msgstr ""

#: ../../release_notes.rst:6663
msgid "Making an instruction conditional with the standard :meth:`.InstructionSet.c_if` method when using a :obj:`.Clbit` that is contained in a :obj:`.ClassicalRegister` of size one will now correctly create a condition on the bit, not the register. See `#7255 <https://github.com/Qiskit/qiskit-terra/pull/7255>`__ for more detail."
msgstr ""

#: ../../release_notes.rst:6671
msgid "Trying to make an instruction conditional with the standard :meth:`.InstructionSet.c_if` method will now correctly raise an error if the classical resource is not present in the circuit. See `#7255 <https://github.com/Qiskit/qiskit-terra/pull/7255>`__ for more detail."
msgstr ""

#: ../../release_notes.rst:6678
msgid "Fixed a compatibility issue with Matplotlib 3.5, where the Bloch sphere would fail to render if it had any vectors attached, such as by using :obj:`~qiskit.visualization.plot_bloch_vector`.  See `#7272 <https://github.com/Qiskit/qiskit-terra/issues/7272>`__ for more detail."
msgstr ""

#: ../../release_notes.rst:6685
msgid "Fixed an issue with the :meth:`.NLocal.add_layer` method incorrectly appending layers if the :obj:`.NLocal` object had already been built."
msgstr ""

#: ../../release_notes.rst:6690
msgid "Fixed an issue with pickling :class:`~.pulse.InstructionScheduleMap` object when using Python 3.6. See `#6944 <https://github.com/Qiskit/qiskit-terra/issues/6944>`__ for details."
msgstr ""

#: ../../release_notes.rst:6696
msgid "Complex valued pulse parameter assignment with symengine has been fixed. For example,"
msgstr ""

#: ../../release_notes.rst:6710
msgid "The assigned amplitude has been shown as ``ParameterExpression(0.1*exp(1.57*I))`` after the use of ``symengine`` was introduced in the 0.18.0 release.  This is now correctly evaluated and shown as ``7.96327e-05 + 0.0999999683j``."
msgstr ""

#: ../../release_notes.rst:6717
msgid "Fixed an issue where :meth:`.QAOA.construct_circuit` with different operators with same number of qubits would generate the same circuit each time.  See `#7223 <https://github.com/Qiskit/qiskit-terra/issues/7223>`__ for more detail."
msgstr ""

#: ../../release_notes.rst:6724
msgid "Fixed an issue where :class:`~qiskit.circuit.library.QAOAAnsatz` had an incorrect number of parameters if identities of :class:`~qiskit.opflow.PauliSumOp` were given, e.g., ``PauliSumOp.from_list([(\"III\", 1)])``.  See `#7225 <https://github.com/Qiskit/qiskit-terra/pull/7225>`__ for more detail."
msgstr ""

#: ../../release_notes.rst:6732
msgid "Fixed a bug where the :meth:`.QuantumCircuit.qasm` method could return OpenQASM 2 instructions with invalid identifiers. The same bug was fixed for :obj:`~qiskit.extensions.UnitaryGate`."
msgstr ""

#: ../../release_notes.rst:6738
msgid "Fixed an issue where trying to display registerless bits would cause a failure of the ``mpl`` and the ``latex`` circuit drawers. A leading ``_`` has been removed from the display of registerless bits' numbers in the ``text`` drawer.  Fixed `#6732 <https://github.com/Qiskit/qiskit-terra/issues/6732>`__."
msgstr ""

#: ../../release_notes.rst:6746
msgid "For one-bit registers, all of the circuit drawers now display only the register name and no longer show the ``0`` subscript. Fixed `#5784 <https://github.com/Qiskit/qiskit-terra/issues/5784>`__."
msgstr ""

#: ../../release_notes.rst:6752
msgid "Fixed naming collisions of implicit registers in :obj:`.QuantumCircuit.qasm` when dealing with registerless qubits and clbits.  Previously, registerless qubits and clbits were put into corresponding ``qreg`` and ``creg`` both called ``regless``, despite the collision.  They will now have separate, deterministically generated names, which will not clash with any user-defined register names in the circuit."
msgstr ""

#: ../../release_notes.rst:6761
msgid "Fixed an issue in scheduling of circuits with clbits operations, e.g. measurements, conditional gates, updating :class:`~qiskit.transpiler.passes.ASAPSchedule`, :class:`~qiskit.transpiler.passes.ALAPSchedule`, and :class:`~qiskit.transpiler.passes.AlignMeasures`. The updated schedulers assume all clbits I/O operations take no time, ``measure`` writes the measured value to a clbit at the end, and ``c_if`` reads the conditional value in clbit(s) at the beginning. Fixed `#7006 <https://github.com/Qiskit/qiskit-terra/issues/7006>`__."
msgstr ""

#: ../../release_notes.rst:6773
msgid "Calling :obj:`~qiskit.compiler.transpile` on an empty list will now correctly return an empty list without issuing a warning.  Fixed `#7287 <https://github.com/Qiskit/qiskit-terra/issues/7287>`__."
msgstr ""

#: ../../release_notes.rst:6779
msgid "Fixed an issue in :obj:`.PiecewiseChebyshev` when the function to be approximated was constant.  In these cases, you should now pass the constant directly as the ``f_x`` argument, rather than using a function, such as::"
msgstr ""

#: ../../release_notes.rst:6787
msgid "See `#6707 <https://github.com/Qiskit/qiskit-terra/pull/6707>`__ for more details."
msgstr ""

#: ../../release_notes.rst:6791
msgid "If an :class:`~qiskit.algorithms.HHL` algorithm instance was constructed without a :obj:`.QuantumInstance` (the default), attempts to use the getter and setter properties to read or set an instance later would fail. The getters and setters now work as expected."
msgstr ""

#: ../../release_notes.rst:6798
msgid "The :meth:`.QuantumCircuit.qasm` method now edits the names of copies of the instructions present in the circuit, not the original instructions that live in ``circuit.data``.  Refer to `#6952 <https://github.com/Qiskit/qiskit-terra/issues/6952>`__ for more details."
msgstr ""

#: ../../release_notes.rst:6805
msgid "Fixed a bug in :meth:`.PauliSumOp.permute` causing the error::"
msgstr ""

#: ../../release_notes.rst:6809
msgid "if the permutation had the same number of Pauli terms. Calling ``permute([2, 1, 0])`` on ``X ^ Y ^ Z`` no longer raises an error, and now returns ``Z ^ Y ^ X``."
msgstr ""

#: ../../release_notes.rst:6815
msgid "Fixed a bug where the parameter bounds for the mixer parameters in the :class:`~qiskit.circuit.library.QAOAAnsatz` were not been set."
msgstr ""

#: ../../release_notes.rst:6820
msgid "Fixed determination of final operations (barriers and measures) in pass :class:`~qiskit.transpiler.passes.RemoveFinalMeasurements` and in method :meth:`~qiskit.circuit.QuantumCircuit.remove_final_measurements` of class :class:`~qiskit.circuit.QuantumCircuit` which previously considered only nodes immediately preceding an output node."
msgstr ""

#: ../../release_notes.rst:6828
msgid "Fixed determination of final operations in pass :class:`~qiskit.transpiler.passes.RemoveFinalMeasurements` and in method :meth:`~qiskit.circuit.QuantumCircuit.remove_final_measurements` of class :class:`~qiskit.circuit.QuantumCircuit` which could wrongly consider a barrier to be final, even if other circuit operations followed it."
msgstr ""

#: ../../release_notes.rst:6836
msgid "Fixed multi-bit classical register removal in pass :class:`~qiskit.transpiler.passes.RemoveFinalMeasurements` and in method :meth:`~qiskit.circuit.QuantumCircuit.remove_final_measurements` of class :class:`~qiskit.circuit.QuantumCircuit` where classical registers were not removed even if other bits were idle, unless a final measure was done into each and every bit. Now, classical registers that become idle as a result of removing final measurements and barriers are always removed. Classical bits are removed if they are referenced only by removed registers or are not referenced at all and became idle due to the removal. This fix also adds proper handling of registers with shared underlying bits."
msgstr ""

#: ../../release_notes.rst:6849
msgid "Fixed an issue with :obj:`~qiskit.transpiler.passes.RemoveFinalMeasurements` which could cause the resulting :obj:`.DAGCircuit` to become invalid.  See `#7196 <https://github.com/Qiskit/qiskit-terra/pull/7196>`__ for more details."
msgstr ""

#: ../../release_notes.rst:6855
msgid "Fixed an issue with method :meth:`~qiskit.circuit.QuantumCircuit.remove_final_measurements` of class :class:`~qiskit.circuit.QuantumCircuit` that caused :attr:`.QuantumCircuit.clbits` to be incorrect after invocation. Refer to `#7089 <https://github.com/Qiskit/qiskit-terra/issues/7089>`__ for details."
msgstr ""

#: ../../release_notes.rst:6862
msgid "When tapering an empty zero operator in :mod:`qiskit.opflow`, the code, on detecting it was zero, logged a warning and returned the original operator.  Such operators are commonly found in the auxiliary operators, when using Qiskit Nature, and the above behavior caused :obj:`.VQE` to throw an exception as tapered non-zero operators were a different number of qubits from the tapered zero operators (since taper has returned the input operator unchanged). The code will now correctly taper a zero operator such that the number of qubits is reduced as expected and matches to tapered non-zero operators e.g ```0*\"IIII\"``` when we are tapering by 3 qubits will become ``0*\"I\"``."
msgstr ""

#: ../../release_notes.rst:6873
msgid "Fixed an issue with the :meth:`~qiskit.circuit.QuantumCircuit.draw` method and :func:`~qiskit.visualization.circuit_drawer` function, where a custom style set via the user config file (i.e. ``settings.conf``) would ignore the set value of the ``circuit_mpl_style`` field if the ``style`` kwarg on the function/method was not set."
msgstr ""

#: ../../release_notes.rst:6887
msgid "The string cast for :class:`qiskit.circuit.ParameterExpression` does not have full precision anymore. This removes the trailing 0s when printing parameters that are bound to floats.  This has consequences for QASM serialization and the circuit text drawer::"
msgstr ""

#: ../../release_notes.rst:6899
msgid "The :class:`~qiskit.circuit.library.QAOAAnsatz` has been updated to use the parameter symbol ``γ`` for the cost operator and ``β`` for the mixer operator, as is the standard notation in QAOA literature."
msgstr ""

#: ../../release_notes.rst:6921
msgid "This release deprecates the Qiskit Ignis project, it has been supersceded by the `Qiskit Experiments <https://qiskit.org/documentation/experiments/>`__ project and active development has ceased. While deprecated, critical bug fixes and compatibility fixes will continue to be made to provide users a sufficient opportunity to migrate off of Ignis. After the deprecation period (which will be no shorter than 3 months from this release) the project will be retired and archived."
msgstr ""

#: ../../release_notes.rst:6935
msgid "Updated the accreditation protocol to use fitting routine from https://arxiv.org/abs/2103.06603. :class:`~qiskit.ignis.verification.accreditation.AccreditationFitter` now has methods FullAccreditation (previous protocol) and MeanAccreditation (new protocol).  In addtition data entry has been changed to either use the result object AppendResult or a list of strings AppendStrings. :func:`qiskit.ignis.verification.QOTPCorrectString` was also added."
msgstr ""

#: ../../release_notes.rst:6945
msgid "Added the option for the fast analytical generation of syndrome graphs. The :class:`.RepetitionCode` now has a new bool argument ``brute``, which allows to still use the brute force method. Helper class :class:`.RepetitionCodeSyndromeGenerator` added to facilitate this."
msgstr ""

#: ../../release_notes.rst:6953
msgid "The :class:`~qiskit.ignis.verification.RepetitionCode` now has keyword arguments ``resets`` and ``delay``. The former determines whether reset gates are inserted after measurement. The latter allows a time (in dt) to be specificed for a delay after each measurement (and reset, if applicable)."
msgstr ""

#: ../../release_notes.rst:6958
msgid "The :meth:`~qiskit.ignis.verification.RepitionCode.syndrome_measurement` method of :class:`~qiskit.ignis.verification.RepetitionCode` now has keyword arguments ``final`` and ``delay``. The former determines whether to add reset gates according to the global ``resets``, or to overwrite it with appropriate behavior for the final round of syndrome measurements. The latter allows a time (in dt) to be specificed for a delay after each measurement (and reset, if applicable)."
msgstr ""

#: ../../release_notes.rst:6967
msgid "The :class:`.RepetitionCode` class now supports encoding with x basis states. This can be used by setting the ``xbasis`` keyword argument when constructing a :class:`.RepetitionCode` object."
msgstr ""

#: ../../release_notes.rst:6979
msgid "The keyword argument ``reset`` has been removed from the the :meth:`~qiskit.ignis.verification.RepitionCode.syndrome_measurement` method of :class:`~qiskit.ignis.verification.RepetitionCode`. This is replaced by the global ``resets`` keyword argument for the class as well as the keyword argument ``final`` for ``syndrome_measurement``. In cases where one would previously add the final measurement round using ``reset=False`` to avoid the final reset gates, one should now use ``final=True``."
msgstr ""

#: ../../release_notes.rst:6989
msgid "Remove ``ParametrizedSchedule`` from :py:func:`~qiskit.ignis.characterization.calibrations.ibmq_utils.update_u_gates`."
msgstr ""

#: ../../release_notes.rst:6992
msgid "``ParametrizedSchedule`` was deprecated as a part of Qiskit-terra 0.17.0 and will be removed in next release. The function now updates u gates with ``Schedule`` programs involving unassigned ``Parameter`` objects."
msgstr ""

#: ../../release_notes.rst:7004
msgid "Deprecating methods in :class:`~qiskit.ignis.verification.accreditation.AccreditationFitter` namely bound_variation_distance and single_protocol_run"
msgstr ""

#: ../../release_notes.rst:7010
msgid "The Qiskit Ignis project as a whole has been deprecated and the project will be retired and archived in the future. While deprecated only compatibility fixes and fixes for critical bugs will be made to the proejct. Instead of using Qiskit Ignis you should migrate to use `Qiskit Experiments <https://qiskit.org/documentation/experiments/>`__ instead. You can refer to the migration guide:"
msgstr ""

#: ../../release_notes.rst:7017
msgid "https://github.com/Qiskit/qiskit-ignis#migration-guide"
msgstr ""

#: ../../release_notes.rst:7022
msgid "Qiskit 0.32.1"
msgstr ""

#: ../../release_notes.rst:7025 ../../release_notes.rst:7063
#: ../../release_notes.rst:7165 ../../release_notes.rst:7288
msgid "Terra 0.18.3"
msgstr ""

#: ../../release_notes.rst:7035 ../../release_notes.rst:7073
#: ../../release_notes.rst:7224 ../../release_notes.rst:7323
#: ../../release_notes.rst:7612 ../../release_notes.rst:7658
#: ../../release_notes.rst:7776 ../../release_notes.rst:9039
#: ../../release_notes.rst:9153 ../../release_notes.rst:9254
#: ../../release_notes.rst:9307 ../../release_notes.rst:9515
#: ../../release_notes.rst:9585 ../../release_notes.rst:9615
#: ../../release_notes.rst:9757 ../../release_notes.rst:12414
msgid "Ignis 0.6.0"
msgstr ""

#: ../../release_notes.rst:7040 ../../release_notes.rst:7078
#: ../../release_notes.rst:7229 ../../release_notes.rst:7328
#: ../../release_notes.rst:7617 ../../release_notes.rst:7665
msgid "Aqua 0.9.5"
msgstr ""

#: ../../release_notes.rst:7047
msgid "IBM Q Provider 0.18.1"
msgstr ""

#: ../../release_notes.rst:7054
msgid "Fixes `#209 <https://github.com/Qiskit-Partners/qiskit-ibm/issues/209>`__ where the websocket connection kept timing out when streaming results for a runtime job, due to inactivity, when the job is in a pending state for a long time."
msgstr ""

#: ../../release_notes.rst:7060
msgid "Qiskit 0.32.0"
msgstr ""

#: ../../release_notes.rst:7085
msgid "IBM Q Provider 0.18.0"
msgstr ""

#: ../../release_notes.rst:7092
msgid "You can now pass ``program_id`` parameter to :meth:`qiskit.providers.ibmq.runtime.IBMRuntimeService.jobs` method to filter jobs by Program ID."
msgstr ""

#: ../../release_notes.rst:7096
msgid "You can view the last updated date of a runtime program using :attr:`~qiskit.providers.ibmq.runtime.RuntimeProgram.update_date` property."
msgstr ""

#: ../../release_notes.rst:7099
msgid "If you are the author of a runtime program, you can now use :attr:`qiskit.providers.ibmq.runtime.RuntimeProgram.data` property to retrieve the program data as a string."
msgstr ""

#: ../../release_notes.rst:7103
msgid "You can now use the :meth:`qiskit.providers.ibmq.runtime.IBMRuntimeService.update_program` method to update the metadata for a Qiskit Runtime program. Program metadata can be specified using the ``metadata`` parameter or individual parameters, such as ``name`` and ``description``. If the same metadata field is specified in both places, the individual parameter takes precedence."
msgstr ""

#: ../../release_notes.rst:7110
msgid "You can now use the :meth:`qiskit.providers.ibmq.runtime.IBMRuntimeService.update_program` method to update the data of an existing runtime program."
msgstr ""

#: ../../release_notes.rst:7119
msgid "Runtime programs will no longer have a ``version`` field."
msgstr ""

#: ../../release_notes.rst:7121
msgid "By default, :meth:`qiskit.providers.ibmq.runtime.IBMRuntimeService.pprint_programs()` now only prints the summary of each runtime program instead of all of the details. There is a new parameter ``detailed`` that can be set to ``True`` to print all details."
msgstr ""

#: ../../release_notes.rst:7125
msgid "``limit`` and ``skip`` parameters have been added to :meth:`qiskit.providers.ibmq.runtime.IBMRuntimeService.programs` and :meth:`qiskit.providers.ibmq.runtime.IBMRuntimeService.pprint_programs`. ``limit`` can be used to set the number of runtime programs returned and ``skip`` is the number of programs to skip when retrieving programs."
msgstr ""

#: ../../release_notes.rst:7132
msgid "The `data` parameter to :meth:`qiskit.providers.ibmq.runtime.IBMRuntimeService.upload_program` can now only be of type string. It can be either the program data, or path to the file that contains program data."
msgstr ""

#: ../../release_notes.rst:7136
msgid ":meth:`qiskit.providers.ibmq.runtime.IBMRuntimeService.upload_program` now takes only two parameters, ``data``, which is the program passed as a string or the path to the program file and the ``metadata``, which is passed as a dictionary or path to the metadata JSON file. In ``metadata`` the ``backend_requirements``, ``parameters``, ``return_values`` and ``interim_results`` are now grouped under a specifications ``spec`` section. ``parameters``, ``return_values`` and ``interim_results`` should now be specified as JSON Schema."
msgstr ""

#: ../../release_notes.rst:7144
msgid ":meth:`qiskit.providers.ibmq.AccountProvider.run_circuits` method now takes a `backend_name` parameter, which is a string, instead of `backend`, which is a ``Backend`` object."
msgstr ""

#: ../../release_notes.rst:7147
msgid "The default number of ``shots`` (represents the number of repetitions of each circuit, for sampling) in :meth:`qiskit.providers.ibmq.IBMQBackend.run`, has been increased from 1024 to 4000."
msgstr ""

#: ../../release_notes.rst:7157
msgid "Fixes the issue wherein a runtime job result cannot be retrieved multiple times if the result contains a numpy array."
msgstr ""

#: ../../release_notes.rst:7162
msgid "Qiskit 0.31.0"
msgstr ""

#: ../../release_notes.rst:7179
msgid "``optimize_ideal_threshold`` and ``optimize_noisy_threshold`` have been removed from the lists of simulator defaults and the documentation. These have had no effect since Aer 0.5.1, but these references to them had remained accidentally."
msgstr ""

#: ../../release_notes.rst:7189
msgid "Fixes `#1351 <https://github.com/Qiskit/qiskit-aer/issue/1351>`__ where running an empty :obj:`~qiskit.circuit.QuantumCircuit` with a noise model set would cause the simulator to crash."
msgstr ""

#: ../../release_notes.rst:7193
msgid "Fixes `#1347 <https://github.com/Qiskit/qiskit-aer/issue/1347>`__ where the behaviour of using the :meth:`~qiskit.providers.aer.AerSimulator.set_options` and :meth:`~qiskit.providers.aer.AerSimulator.set_option` methods of simulator backends could lead to different behavior for some options."
msgstr ""

#: ../../release_notes.rst:7199
msgid "Fixes an bug where using a Dask Client executor would cause an error at job submission due to the executor Client not being pickleable."
msgstr ""

#: ../../release_notes.rst:7202
msgid "Fixed an issue with the `matrix_product_state` simulation method where the accumulation of small rounding errors during measurement of many quits could sometimes cause a segmentation fault."
msgstr ""

#: ../../release_notes.rst:7206
msgid "Fixes an unintended change between qiskit-aer 0.8.0 and 0.9.0 where when running a list of circuits with an invalid circuit using the ``automatic`` simulation method of the :class:`~qiskit.providers.aer.AerSimulator` or :class:`~qiskit.providers.aer.QasmSimulator` would raise an exception for an invalid input qobj rather than return partial results for the circuits that were valid."
msgstr ""

#: ../../release_notes.rst:7213
msgid "Fixes an issue with the standalone simulator where it would return a `IBM Quantum API schema <https://github.com/Qiskit/ibm-quantum-schemas>`__ invalid response in the case of an error that prevented the simulation from running."
msgstr ""

#: ../../release_notes.rst:7217
msgid "Fixes `#1346 <https://github.com/Qiskit/qiskit-aer/issue/1346>`__ which was a bug in the handling of the ``parameter_binds`` kwarg of the backend :meth:`~qiskit.providers.aer.AerSimulator.run` method that would result in an error if the parameterized circuit was transpiled to a different set of basis gates than the original parameterizations."
msgstr ""

#: ../../release_notes.rst:7236
msgid "IBM Q Provider 0.17.0"
msgstr ""

#: ../../release_notes.rst:7243
msgid "A runtime program's visibility can now be specified on upload using ``is_public`` parameter in :meth:`qiskit.providers.ibmq.runtime.IBMRuntimeService.upload_program`."
msgstr ""

#: ../../release_notes.rst:7247
msgid "You can now specify a parent experiment ID when creating an experiment with :meth:`qiskit.providers.ibmq.experiment.IBMExperimentService.create_experiment`. Experiments can also be filtered by their parent experiment ID in :meth:`qiskit.providers.ibmq.experiment.IBMExperimentService.experiments`."
msgstr ""

#: ../../release_notes.rst:7252
msgid "Runtime image can now be specified using the `image` parameter in :meth:`qiskit.providers.ibmq.runtime.IBMRuntimeService.run`. Note that not all accounts are authorized to select a different image."
msgstr ""

#: ../../release_notes.rst:7262
msgid ":class:`qiskit.providers.ibmq.runtime.RuntimeEncoder` and :class:`qiskit.providers.ibmq.runtime.RuntimeDecoder` are updated to support Python ``datetime``, which is not JSON serializable by default."
msgstr ""

#: ../../release_notes.rst:7273
msgid "Fixes the issue where :meth:`qiskit.providers.ibmq.managed.IBMQJobManager.retrieve_job_set` only retrieves the first 10 jobs in a :class:`qiskit.providers.ibmq.managed.ManagedJobSet`."
msgstr ""

#: ../../release_notes.rst:7277
msgid ":class:`qiskit.providers.ibmq.runtime.RuntimeDecoder` can now restore dictionary integer keys in optimizer settings from a JSON string representation dumped by the :class:`qiskit.providers.ibmq.runtime.RuntimeEncoder`."
msgstr ""

#: ../../release_notes.rst:7283
msgid "Qiskit 0.30.1"
msgstr ""

#: ../../release_notes.rst:7293
msgid "This bugfix release fixes a few minor issues in 0.18, including a performance regression in :obj:`~qiskit.compiler.assemble` when dealing with executing :class:`~qiskit.circuit.QuantumCircuit` objects on pulse-enabled backends."
msgstr ""

#: ../../release_notes.rst:7302
msgid "Fixed `#7004 <https://github.com/Qiskit/qiskit-terra/issues/7004>`__ where ``AttributeError`` was raised when executing :obj:`~qiskit.pulse.ScheduleBlock` on a pulse backend. These blocks are now correctly treated as pulse jobs, like :obj:`~qiskit.pulse.Schedule`."
msgstr ""

#: ../../release_notes.rst:7307
msgid "Fixed an issue causing an error when binding a complex parameter value to an operator's coefficient. Casts to ``float`` in :class:`~qiskit.opflow.primitive_ops.PrimitiveOp` were generalized to casts to ``complex`` if necessary, but will remain ``float`` if there is no imaginary component. Fixes `#6976 <https://github.com/Qiskit/qiskit-terra/issues/6976>`__."
msgstr ""

#: ../../release_notes.rst:7313
msgid "Update the 1-qubit gate errors in :obj:`~qiskit.visualization.plot_error_map` to use the `sx` gate instead of the `u2` gate, consistent with IBMQ backends."
msgstr ""

#: ../../release_notes.rst:7318 ../../release_notes.rst:7349
msgid "Aer 0.9.0"
msgstr ""

#: ../../release_notes.rst:7333 ../../release_notes.rst:7622
#: ../../release_notes.rst:7677 ../../release_notes.rst:7788
msgid "IBM Q Provider 0.16.0"
msgstr ""

#: ../../release_notes.rst:7339
msgid "Qiskit 0.30.0"
msgstr ""

#: ../../release_notes.rst:7342 ../../release_notes.rst:7633
msgid "Terra 0.18.2"
msgstr ""

#: ../../release_notes.rst:7356
msgid "The 0.9 release includes new backend options for parallel exeuction of large numbers of circuits on a HPC cluster using a Dask distributed, along with other general performance improvements and bug fixes."
msgstr ""

#: ../../release_notes.rst:7366
msgid "Added support for set_matrix_product_state."
msgstr ""

#: ../../release_notes.rst:7368
msgid "Add qiskit library :class:`~qiskit.circuit.library.SXdgGate` and :class:`~qiskit.circuit.library.CUGate` to the supported basis gates for the Aer simulator backends. Note that the :class:`~qiskit.circuit.library.CUGate` gate is only natively supported for the ``statevector`` and ``unitary`` methods. For other simulation methods it must be transpiled to the supported basis gates for that method."
msgstr ""

#: ../../release_notes.rst:7375
msgid "Adds support for N-qubit Pauli gate ( :class:`qiskit.circuit.library.generalized_gates.PauliGate`) to all simulation methods of the :class:`~qiskit.providers.aer.AerSimulator` and :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:7381
msgid "Adds the ability to set a custom executor and configure job splitting for executing multiple circuits in parallel on a HPC clustor. A custom executor can be set using the ``executor`` option, and job splitting is configured by using the ``max_job_size`` option."
msgstr ""

#: ../../release_notes.rst:7386
msgid "For example configuring a backend and executing using"
msgstr ""

#: ../../release_notes.rst:7393
msgid "will split the exection into multiple jobs each containing a single circuit. If job splitting is enabled the ``run`` method will return a :class:`~qiskit.providers.aer.jobs.AerJobSet` object containing all the individual :class:`~qiskit.providers.aer.jobs.AerJob` classes. After all individual jobs finish running the job results are automatically combined into a single Result object that is returned by ``job.result()``."
msgstr ""

#: ../../release_notes.rst:7400
msgid "Supported executors include those in the Python ``concurrent.futures`` `module <https://docs.python.org/3/library/concurrent.futures.html>`__ (eg. ``ThreadPoolExecutor``, ``ProcessPoolExecutor``), and `Dask <http://dask.org>`__ distributed  Client executors if the optional dask library is installed. Using a Dask executor allows configuring parallel execution of multiple circuits on HPC clusters. See the Dask executor :ref:`API Documentation <dask>` for additional details on using Dask executors for HPC simulation."
msgstr ""

#: ../../release_notes.rst:7409
msgid "Adds ability to record logging data for the ``matrix_product_state`` simulation method to the experiment result metadata by setting the backend option  ``mps_log_data=True``. The saved data includes the bond dimensions and the discarded value (the sum of the squares of the Schmidt coeffients that were discarded by approximation) after every relevant circuit instruction."
msgstr ""

#: ../../release_notes.rst:7416
msgid "The :meth:`~qiskit.providers.aer.AerSimulator.run` method for the :class:`~qiskit.providers.aer.AerSimulator`, :class:`~qiskit.providers.aer.QasmSimulator`, :class:`~qiskit.providers.aer.StatevectorSimulator`, and :class:`~qiskit.providers.aer.UnitarySimulator` has a new kwarg, ``parameter_binds`` which is used to provide a list of values to use for any unbound parameters in the inbound circuit. For example::"
msgstr ""

#: ../../release_notes.rst:7437
msgid "will run the input circuit 3 times with the values 0, 3.14, and 6.28 for theta. When running with multiple parameters the length of the value lists must all be the same. When running with multiple circuits, the length of ``parameter_binds`` must match the number of input circuits (you can use an empty dict, ``{}``, if there are no binds for a circuit)."
msgstr ""

#: ../../release_notes.rst:7443
msgid "The :class:`~qiskit.providers.aer.backends.PulseSimulator` can now take :class:`~qiskit.circuit.QuantumCircuit` objects on the :meth:`~qiskit.providers.aer.backends.PulseSimulator.run`. Previously, it only would except :class:`~qiskit.pulse.Schedule` objects as input to :meth:`~qiskit.providers.aer.backends.PulseSimulator.run`. When a circuit or list of circuits is passed to the simulator it will call :func:`~qiskit.compiler.schedule` to convert the circuits to a schedule before executing the circuit. For example::"
msgstr ""

#: ../../release_notes.rst:7473 ../../release_notes.rst:9548
msgid "The :class:`~qiskit.providers.aer.library.SaveExpectationValue` and :class:`~qiskit.providers.aer.library.SaveExpectationValueVariance` have been disabled for the `extended_stabilizer` method of the :class:`~qiskit.providers.aer.QasmSimulator` and :class:`~qiskit.providers.aer.AerSimulator` due to returning the incorrect value for certain Pauli operator components. Refer to `#1227 <https://github.com/Qiskit/qiskit-aer/issues/1227>` for more information and examples."
msgstr ""

#: ../../release_notes.rst:7488
msgid "The default basis for the :class:`~qiskit.providers.aer.noise.NoiseModel` class has been changed from ``[\"id\", \"u3\", \"cx\"]`` to ``[\"id\", \"rz\", \"sx\", \"cx\"]`` due to the deprecation of the ``u3`` circuit method in qiskit-terra and change of qiskit-ibmq-provider backend basis gates. To use the old basis gates you can initialize a noise model with custom basis gates as ``NoiseModel(basis_gates=[\"id\", \"u3\", \"cx\"])``."
msgstr ""

#: ../../release_notes.rst:7495
msgid "Removed the ``backend_options`` kwarg from the ``run`` methnod of Aer backends that was deprecated in qiskit-aer 0.7. All run options must now be passed as separate kwargs."
msgstr ""

#: ../../release_notes.rst:7499
msgid "Removed passing ``system_model`` as a positional arg for the ``run`` method of the :class:`~qiskit.providers.aer.PulseSimulator`."
msgstr ""

#: ../../release_notes.rst:7508
msgid "Passing an assembled qobj directly to the :meth:`~qiskit.providers.aer.AerSimulator.run` method of the Aer simulator backends has been deprecated in favor of passing transpiled circuits directly as ``backend.run(circuits, **run_options)``."
msgstr ""

#: ../../release_notes.rst:7513
msgid "All snapshot instructions in :mod:`qiskit.providers.aer.extensions` have been deprecated. For replacement use the save instructions from the :mod:`qiskit.providers.aer.library` module."
msgstr ""

#: ../../release_notes.rst:7517
msgid "Adding non-local quantum errors to a :class:`~qiskit.providers.aer.noise.NoiseModel` has been deprecated due to inconsistencies in how this noise is applied to the optimized circuit. Non-local noise should be manually added to a scheduled circuit in Qiskit using a custom transpiler pass before being run on the simulator."
msgstr ""

#: ../../release_notes.rst:7523
msgid "Use of the ``method`` option of the :class:`~qiskit.providers.aer.StatevectorSimulator`, and :class:`~qiskit.providers.aer.UnitarySimulator` to run a GPU simulation has been deprecated. To run a GPU simulation on a compatible system use the option ``device='GPU'`` instead."
msgstr ""

#: ../../release_notes.rst:7535 ../../release_notes.rst:9563
msgid "Fixes performance issue with how the ``basis_gates`` configuration attribute was set. Previously there were unintended side-effects to the backend class which could cause repeated simulation runtime to incrementally increase. Refer to `#1229 <https://github.com/Qiskit/qiskit-aer/issues/1229>` for more information and examples."
msgstr ""

#: ../../release_notes.rst:7542
msgid "Fixed bug in MPS::apply_kraus. After applying the kraus matrix to the relevant qubits, we should propagate the changes to the neighboring qubits."
msgstr ""

#: ../../release_notes.rst:7545
msgid "Fixes a bug where qiskit-terra assumes that qubits in a multiplexer gate are first the targets and then the controls of the gate while qiskit-aer assumes the opposite order."
msgstr ""

#: ../../release_notes.rst:7549 ../../release_notes.rst:9574
msgid "Fixes a bug introduced in 0.8.0 where GPU simulations would allocate unneeded host memory in addition to the GPU memory."
msgstr ""

#: ../../release_notes.rst:7552
msgid "Fixes bug where the initialize instruction would disable measurement sampling optimization for the statevector and matrix product state simulation methods even when it was the first circuit instruction or applied to all qubits and hence deterministic."
msgstr ""

#: ../../release_notes.rst:7557
msgid "Fix issue #1196 by using the inner products with the computational basis states to calculate the norm rather than the norm estimation algorithm."
msgstr ""

#: ../../release_notes.rst:7560 ../../release_notes.rst:9577
msgid "Fixes a bug in the ``stabilizer`` simulator method of the :class:`~qiskit.providers.aer.QasmSimulator` and :class:`~qiskit.providers.aer.AerSimulator` where the expectation value for the ``save_expectation_value`` and ``snapshot_expectation_value`` could have the wrong sign for certain ``Y`` Pauli's."
msgstr ""

#: ../../release_notes.rst:7566
msgid "Fixes bug where the if the required memory is smaller than the system memory the multi-chunk simulation method was enabled and simulation was still started. This case will now throw an insufficient memory exception."
msgstr ""

#: ../../release_notes.rst:7570
msgid "Fixes issue where setting the ``shots`` option for a backend with ``set_options(shots=k)`` was always running the default number of shots (1024) rather than the specified value."
msgstr ""

#: ../../release_notes.rst:7574
msgid "Fixes a bug in how the :class:`~qiskit.providers.aer.AerSimulator` handled the option value for ``max_parallel_experiments=1``. Previously this was treated the same as ``max_parallel_experiments=0``."
msgstr ""

#: ../../release_notes.rst:7578
msgid "Fixes bug in the ``extended_stabilizer`` simulation method where it incorrectly treated qelay gate and multi-qubit Pauli instructions as unsupported."
msgstr ""

#: ../../release_notes.rst:7582
msgid "Fixes typo in the :class:`~qiskit.providers.aer.AerSimulator` and :class:`~qiskit.providers.aer.QasmSimulator` options for the ``extended_stabilizer_norm_estimation_repetitions`` option."
msgstr ""

#: ../../release_notes.rst:7586
msgid "Fixes bug with applying the ``unitary`` gate in using the ``matrix_product_state`` simulation method which did not correctly support permutations in the ordering of the qubits on which the gate is applied."
msgstr ""

#: ../../release_notes.rst:7590
msgid "Fixes an issue where gate fusion could still be enabled for the ``matrix_product_state`` simulation method even though it is not supported. Now fusion is always disabled for this method."
msgstr ""

#: ../../release_notes.rst:7594
msgid "Fixed bug in the ``matrix_product_state`` simulation method in computing the normalization following truncation of the  Schmidt coefficients after performing the SVD."
msgstr ""

#: ../../release_notes.rst:7604
msgid "Improves the performance of the measurement sampling algorithm for the ``matrix_product_state`` simulation method. The new default behaviour is to always sample using the improved ``mps_apply_measure`` method. The ``mps_probabilities`` sampling method be still used by setting the custom option value ``mps_sample_measure_algorithm=\"mps_probabilities\"``."
msgstr ""

#: ../../release_notes.rst:7628
msgid "Qiskit 0.29.1"
msgstr ""

#: ../../release_notes.rst:7640
msgid "Fixed an issue with the :func:`~qiskit.compiler.assemble` function when called with the ``backend`` kwarg set and the ``parametric_pulses`` kwarg was set to an empty list the output qobj would contain the ``parametric_pulses`` setting from the given backend's :class:`~qiskit.providers.models.BackendConfiguration` instead of the expected empty list. Fixed `#6898 <https://github.com/Qiskit/qiskit-terra/issues/6898>`__"
msgstr ""

#: ../../release_notes.rst:7648
msgid "The Matplotlib circuit drawer will no longer duplicate drawings when using ``ipykernel>=6.0.0``. Fixes `#6889 <https://github.com/Qiskit/qiskit-terra/issues/6889>`__."
msgstr ""

#: ../../release_notes.rst:7653 ../../release_notes.rst:7771
#: ../../release_notes.rst:9034 ../../release_notes.rst:9148
#: ../../release_notes.rst:9249 ../../release_notes.rst:9302
#: ../../release_notes.rst:9510 ../../release_notes.rst:9541
msgid "Aer 0.8.2"
msgstr ""

#: ../../release_notes.rst:7672
msgid "Fixed a handling error in the Yahoo provider when only one ticker is entered. Added exception error if no ticker is entered. Limit yfinance to >=0.1.62 as previous versions have a JSON decoder error."
msgstr ""

#: ../../release_notes.rst:7684
msgid "Qiskit 0.29.0"
msgstr ""

#: ../../release_notes.rst:7689
msgid "Terra 0.18.1"
msgstr ""

#: ../../release_notes.rst:7696
msgid "This bugfix release fixes a few minor issues and regressions in the 0.18.0 release.  There is also a minor change to how ``pip`` handles the ``[all]`` extra when installing ``qiskit-terra`` directly, compared to 0.18.0."
msgstr ""

#: ../../release_notes.rst:7705
msgid "``pip install qiskit-terra[all]`` will no longer attempt to install the ``bip-mapper`` extra.  This is because the dependency ``cplex`` is not well supported on the range of Python versions and OSes that Terra supports, and a failed extra dependency would fail the entire package resolution.  If you are using Python 3.7 or 3.8 and are on Linux-x64 or -ppc64le, macOS-x64 or Windows-x64 you should be able to install ``qiskit-terra[bip-mapper]`` explicitly, if desired, while other combinations of OS, platform architectures and Python versions will likely fail."
msgstr ""

#: ../../release_notes.rst:7719
msgid "Fixed an issue where the :class:`~qiskit.utils.QuantumInstance` class would potentially try to use the :class:`~qiskit.ignis.mitigation.CompleteMeasFitter` class before it was imported resulting in an error. Fixed `#6774 <https://github.com/Qiskit/qiskit-terra/issues/6774>`__"
msgstr ""

#: ../../release_notes.rst:7724
msgid "Fixed the missing Linux aarch64 wheels which were not published for the 0.18.0 release. They should now continue to be built as expected for all future releases."
msgstr ""

#: ../../release_notes.rst:7728
msgid "Fixed an issue with the mock backends located in ``qiskit.test.mock`` where in some situations (mainly fake backends with stored :class:`~qiskit.providers.models.BackendProperties` running a :class:`~qiskit.circuit.QuantumCircuit` with ``qiskit-aer`` installed) passing run time options to the ``run()`` method of a fake backend object would not actually be passed to the simulator underlying the ``run()`` method and not have any effect. Fixed `#6741 <https://github.com/Qiskit/qiskit-terra/issues/6741>`__"
msgstr ""

#: ../../release_notes.rst:7737
msgid "Fix a bug in :class:`~qiskit.circuit.library.EvolvedOperatorAnsatz` when the global phase is 0 (such as for :class:`~qiskit.circuit.library.QAOAAnsatz`) but was still a :class:`~qiskit.circuit.ParameterExpression`."
msgstr ""

#: ../../release_notes.rst:7741
msgid "Fixed an issue with the :attr:`~qiskit.algorithms.optimizers.QNSPSA.settings` attribute of :obj:`~qiskit.algorithms.optimizers.QNSPSA`, which was missing the ``fidelity`` argument from the output.  This is now correctly included in the attribute's output."
msgstr ""

#: ../../release_notes.rst:7746
msgid "Fixed an issue with the :meth:`~qiskit.transpiler.CouplingMap.subgraph` method of the :class:`~qiskit.transpiler.CouplingMap` class where it would incorrectly add nodes to the output :class:`~qiskit.transpiler.CouplingMap` object when the ``nodelist`` argument contained a non-contiguous list of qubit indices. This has been fixed so regardless of the input indices in ``nodelist`` the output :class:`~qiskit.transpiler.CouplingMap` will only contained the specified nodes reindexed starting at 0. Fixes `#6736 <https://github.com/Qiskit/qiskit-terra/issues/6736>`__"
msgstr ""

#: ../../release_notes.rst:7756
msgid "Previously, :obj:`~qiskit.transpiler.passes.Optimize1qGatesDecomposition` failed to properly optimize one qubit gates that are sufficiently close to the identity matrix. This was fixed so that any gates that differ from the identity by less than 1e-15 are removed."
msgstr ""

#: ../../release_notes.rst:7761
msgid "Fixed the generation and loading of QPY files with :func:`qiskit.circuit.qpy_serialization.dump` and :func:`qiskit.circuit.qpy_serialization.load` for :class:`~qiskit.circuit.QuantumCircuit` objects that contain instructions with classical conditions on a single :class:`~qiskit.circuit.Clbit` instead of a :class:`~qiskit.circuit.ClassicalRegister`. While the use of single :class:`~qiskit.circuit.Clbit` conditions is not yet fully supported, if you were using them in a circuit they are now correctly serialized by QPY."
msgstr ""

#: ../../release_notes.rst:7781 ../../release_notes.rst:9044
msgid "Aqua 0.9.4"
msgstr ""

#: ../../release_notes.rst:7794
msgid "A user can now set and retrieve preferences for :class:`qiskit.providers.ibmq.experiment.IBMExperimentService`. Preferences are saved on disk in the ``$HOME/.qiskit/qiskitrc`` file. Currently the only preference option is ``auto_save``, which tells applications that use this service, such as `qiskit-experiments`, whether you want changes to be automatically saved. Usage examples::"
msgstr ""

#: ../../release_notes.rst:7805
msgid "The methods :meth:`qiskit.providers.ibmq.experiment.IBMExperimentService.create_figure` and :meth:`qiskit.providers.ibmq.experiment.IBMExperimentService.update_figure` now accept the ``sync_upload`` keyword. This controls whether or not the figure will be uploaded asynchronously or synchronously to backend storage. By default ``sync_upload`` is ``True`` for synchronous upload."
msgstr ""

#: ../../release_notes.rst:7817
msgid ":class:`~qiskit.providers.ibmq.experiment.IBMExperimentService` is updated to work with the new ``qiskit-experiments``. As a result, the syntax of the experiment service is drastically changed. This change, however, takes the experiment service out of beta mode, and future changes will provide backward compatibility according to Qiskit deprecation policy."
msgstr ""

#: ../../release_notes.rst:7822
msgid ":class:`qiskit.providers.ibmq.runtime.utils.RuntimeEncoder` now convert a callable object to ``None``, since callables are not JSON serializable."
msgstr ""

#: ../../release_notes.rst:7824
msgid ":meth:`qiskit.providers.ibmq.IBMQBackend.run` no longer accepts `validate_qobj` as a parameter. If you were relying on this schema validation you should pull the schemas from the `Qiskit/ibm-quantum-schemas <https://github.com/Qiskit/ibm-quantum-schemas>`_ and directly validate your payloads with that."
msgstr ""

#: ../../release_notes.rst:7832
msgid "Qiskit 0.28.0"
msgstr ""

#: ../../release_notes.rst:7837
msgid "Terra 0.18.0"
msgstr ""

#: ../../release_notes.rst:7844
msgid "This release includes many new features and bug fixes. The highlights of this release are the introduction of two new transpiler passes, :class:`~qiskit.transpiler.passes.BIPMapping` and :class:`~qiskit.transpiler.passes.DynamicalDecoupling`, which when combined with the new ``pulse_optimize`` kwarg on the :class:`~qiskit.transpiler.passes.UnitarySynthesis` pass enables recreating the Quantum Volume 64 results using the techniques described in: https://arxiv.org/abs/2008.08571. These new transpiler passes and options and are also generally applicable to optimizing any circuit."
msgstr ""

#: ../../release_notes.rst:7860
msgid "The ``measurement_error_mitgation`` kwarg for the :class:`~qiskit.utils.QuantumInstance` constructor can now be set to the :class:`~qiskit.ignis.mitigation.TensoredMeasFitter` class from qiskit-ignis in addition to :class:`~qiskit.ignis.mitigation.CompleteMeasFitter` that was already supported. If you use :class:`~qiskit.ignis.mitigation.TensoredMeasFitter` you will also be able to set the new ``mit_pattern`` kwarg to specify the qubits on which to use :class:`~qiskit.ignis.mitigation.TensoredMeasFitter` You can refer to the documentation for ``mit_pattern`` in the :class:`~qiskit.ignis.mitigation.TensoredMeasFitter` documentation for the expected format."
msgstr ""

#: ../../release_notes.rst:7872
msgid "The decomposition methods for single-qubit gates, specified via the ``basis`` kwarg, in :class:`~qiskit.quantum_info.OneQubitEulerDecomposer` has been expanded to now also include the ``'ZSXX'`` basis, for making use of direct :math:`X` gate as well as :math:`\\sqrt{X}` gate."
msgstr ""

#: ../../release_notes.rst:7878
msgid "Added two new passes :class:`~qiskit.transpiler.passes.AlignMeasures` and :class:`~qiskit.transpiler.passes.ValidatePulseGates` to the :mod:`qiskit.transpiler.passes` module. These passes are a hardware-aware optimization, and a validation routine that are used to manage alignment restrictions on time allocation of instructions for a backend."
msgstr ""

#: ../../release_notes.rst:7884
msgid "If a backend has a restriction on the alignment of :class:`~qiskit.circuit.Measure` instructions (in terms of quantization in time), the :class:`~qiskit.transpiler.passes.AlignMeasures` pass is used to adjust delays in a scheduled circuit to ensure that any :class:`~qiskit.circuit.Measure` instructions in the circuit are aligned given the constraints of the backend. The :class:`~qiskit.transpiler.passes.ValidatePulseGates` pass is used to check if any custom pulse gates (gates that have a custom pulse definition in the :attr:`~qiskit.circuit.QuantumCircuit.calibrations` attribute of a :class:`~qiskit.circuit.QuantumCircuit` object) are valid given an alignment constraint for the target backend."
msgstr ""

#: ../../release_notes.rst:7896
msgid "In the built-in :mod:`~qiskit.transpiler.preset_passmangers` used by the :func:`~qiskit.compiler.transpile` function, these passes get automatically triggered if the alignment constraint, either via the dedicated ``timing_constraints`` kwarg on :func:`~qiskit.compiler.transpile` or has an ``timing_constraints`` attribute in the :class:`~qiskit.providers.models.BackendConfiguration` object of the backend being targetted."
msgstr ""

#: ../../release_notes.rst:7904
msgid "The backends from IBM Quantum Services (accessible via the `qiskit-ibmq-provider <https://pypi.org/project/qiskit-ibmq-provider/>`__ package) will provide the alignment information in the near future."
msgstr ""

#: ../../release_notes.rst:7929
msgid "A new transpiler pass class :class:`qiskit.transpiler.passes.BIPMapping` that tries to find the best layout and routing at once by solving a BIP (binary integer programming) problem as described in `arXiv:2106.06446 <https://arxiv.org/abs/2106.06446>`__ has been added."
msgstr ""

#: ../../release_notes.rst:7934
msgid "The ``BIPMapping`` pass (named \"mapping\" to refer to \"layout and routing\") represents the mapping problem as a BIP (binary integer programming) problem and relies on CPLEX (``cplex``) to solve the BIP problem. The dependent libraries including CPLEX can be installed along with qiskit-terra:"
msgstr ""

#: ../../release_notes.rst:7943
msgid "Since the free version of CPLEX can solve only small BIP problems, i.e. mapping of circuits with less than about 5 qubits, the paid version of CPLEX may be needed to map larger circuits."
msgstr ""

#: ../../release_notes.rst:7947
msgid "The BIP mapper scales badly with respect to the number of qubits or gates. For example, it would not work with ``coupling_map`` beyond 10 qubits because the BIP solver (CPLEX) could not find any solution within the default time limit."
msgstr ""

#: ../../release_notes.rst:7951
msgid "Note that, if you want to fix physical qubits to be used in the mapping (e.g. running Quantum Volume (QV) circuits), you need to specify ``coupling_map`` which contains only the qubits to be used."
msgstr ""

#: ../../release_notes.rst:7955
msgid "Here is a minimal example code to build pass manager to transpile a QV circuit:"
msgstr ""

#: ../../release_notes.rst:8002
msgid "A new constructor method :meth:`~qiskit.pulse.Schedule.initialize_from` was added to the :class:`~qiskit.pulse.Schedule` and :class:`~qiskit.pulse.ScheduleBlock` classes. This method initializes a new empty schedule which takes the attributes from other schedule. For example:"
msgstr ""

#: ../../release_notes.rst:8015
msgid "A new kwarg, ``line_discipline``, has been added to the :func:`~qiskit.tools.job_monitor` function. This kwarg enables changing the carriage return characters used in the ``job_monitor`` output. The ``line_discipline`` kwarg defaults to ``'\\r'``, which is what was in use before."
msgstr ""

#: ../../release_notes.rst:8020
msgid "The abstract ``Pulse`` class (which is the parent class for classes such as :class:`~qiskit.pulse.library.Waveform`, :class:`~qiskit.pulse.library.Constant`, and :class:`~qiskit.pulse.library.Gaussian` now has a new kwarg on the constructor, ``limit_amplitude``, which can be set to ``False`` to disable the previously hard coded amplitude limit of ``1``. This can also be set as a class attribute directly to change the global default for a Pulse class. For example::"
msgstr ""

#: ../../release_notes.rst:8036
msgid "A new class, :class:`~qiskit.quantum_info.PauliList`, has been added to the :mod:`qiskit.quantum_info` module. This class is used to efficiently represent a list of :class:`~qiskit.quantum_info.Pauli` operators. This new class inherets from the same parent class as the existing :class:`~qiskit.quantum_info.PauliTable` (and therefore can be mostly used interchangeably), however it differs from the :class:`~qiskit.quantum_info.PauliTable` because the :class:`qiskit.quantum_info.PauliList` class can handle Z4 phases."
msgstr ""

#: ../../release_notes.rst:8046
msgid "Added a new transpiler pass, :class:`~qiskit.transpiler.passes.RemoveBarriers`, to :mod:`qiskit.transpiler.passes`. This pass is used to remove all barriers in a circuit."
msgstr ""

#: ../../release_notes.rst:8050
msgid "Add a new optimizer class, :class:`~qiskit.algorithms.optimizers.SciPyOptimizer`, to the :mod:`qiskit.algorithms.optimizers` module. This class is a simple wrapper class of the ``scipy.optimize.minimize`` function (`documentation <https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html>`__) which enables the use of all optimization solvers and all parameters (e.g. callback) which are supported by ``scipy.optimize.minimize``. For example:"
msgstr ""

#: ../../release_notes.rst:8070
msgid "The :class:`~qiskit.transpiler.passes.HoareOptimizer` pass has been improved so that it can now replace a :class:`~qiskit.circuit.ControlledGate` in a circuit with with the base gate if all the control qubits are in the :math:`|1\\rangle` state."
msgstr ""

#: ../../release_notes.rst:8076
msgid "Added two new methods, :meth:`~qiskit.dagcircuit.DAGCircuit.is_successor` and :meth:`~qiskit.dagcircuit.DAGCircuit.is_predecessor`, to the :class:`~qiskit.dagcircuit.DAGCircuit` class. These functions are used to check if a node is either a successor or predecessor of another node on the :class:`~qiskit.dagcircuit.DAGCircuit`."
msgstr ""

#: ../../release_notes.rst:8082
msgid "A new transpiler pass, :class:`~qiskit.transpiler.passes.RZXCalibrationBuilderNoEcho`, was added to the :mod:`qiskit.transpiler.passes` module. This pass is similar to the existing :class:`~qiskit.transpiler.passes.RZXCalibrationBuilder` in that it creates calibrations for an ``RZXGate(theta)``, however :class:`~qiskit.transpiler.passes.RZXCalibrationBuilderNoEcho` does this without inserting the echo pulses in the pulse schedule. This enables exposing the echo in the cross-resonance sequence as gates so that the transpiler can simplify them. The :class:`~qiskit.transpiler.passes.RZXCalibrationBuilderNoEcho` pass only supports the hardware-native direction of the :class:`~qiskit.circuit.library.CXGate`."
msgstr ""

#: ../../release_notes.rst:8095
msgid "A new kwarg, ``wrap``, has been added to the :meth:`~qiskit.circuit.QuantumCircuit.compose` method of :class:`~qiskit.circuit.QuantumCircuit`. This enables choosing whether composed circuits should be wrapped into an instruction or not. By default this is ``False``, i.e. no wrapping. For example:"
msgstr ""

#: ../../release_notes.rst:8111
msgid "A new attribute, :attr:`~qiskit.providers.models.PulseBackendConfiguration.control_channels`, has been added to the :class:`~qiskit.providers.models.PulseBackendConfiguration` class. This attribute represents the control channels on a backend as a mapping of qubits to a list of :class:`~qiskit.pulse.channels.ControlChannel` objects."
msgstr ""

#: ../../release_notes.rst:8118
msgid "A new kwarg, ``epsilon``, has been added to the constructor for the :class:`~qiskit.extensions.Isometry` class and the corresponding :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.isometry`. This kwarg enables optionally setting the epsilon tolerance used by an :class:`~qiskit.extensions.Isometry` gate. For example::"
msgstr ""

#: ../../release_notes.rst:8137
msgid "Added a transpiler pass, :class:`~qiskit.transpiler.passes.DynamicalDecoupling`, to :mod:`qiskit.transpiler.passes` for inserting dynamical decoupling sequences in idle periods of a circuit (after mapping to physical qubits and scheduling). The pass allows control over the sequence of DD gates, the spacing between them, and the qubits to apply on. For example:"
msgstr ""

#: ../../release_notes.rst:8172
msgid "The :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.qasm` has a new kwarg, ``encoding``, which can be used to optionally set the character encoding of an output QASM file generated by the function. This can be set to any valid codec or alias string from the Python standard library's `codec module <https://docs.python.org/3/library/codecs.html#standard-encodings>`__."
msgstr ""

#: ../../release_notes.rst:8179
msgid "Added a new class, :class:`~qiskit.circuit.library.EvolvedOperatorAnsatz`, to the :mod:`qiskit.circuit.library` module. This library circuit, which had previously been located in `Qiskit Nature <https://qiskit.org/documentation/nature/>`__ , can be used to construct ansatz circuits that consist of time-evolved operators, where the evolution time is a variational parameter. Examples of such ansatz circuits include ``UCCSD`` class in the ``chemistry`` module of Qiskit Nature or the :class:`~qiskit.circuit.library.QAOAAnsatz` class."
msgstr ""

#: ../../release_notes.rst:8188
msgid "A new fake backend class is available under ``qiskit.test.mock`` for the ``ibmq_guadalupe`` backend.  As with the other fake backends, this includes a snapshot of calibration data (i.e. ``backend.defaults()``) and error data (i.e. ``backend.properties()``) taken from the real system, and can be used for local testing, compilation and simulation."
msgstr ""

#: ../../release_notes.rst:8194
msgid "A new method :meth:`~qiskit.pulse.Schedule.children` for the :class:`~qiskit.pulse.Schedule` class has been added. This method is used to return the child schedule components of the :class:`~qiskit.pulse.Schedule` object as a tuple. It returns nested schedules without flattening. This method is equivalent to the private ``_children()`` method but has a public and stable interface."
msgstr ""

#: ../../release_notes.rst:8201
msgid "A new optimizer class, :class:`~qiskit.algorithms.optimizers.GradientDescent`, has been added to the :mod:`qiskit.algorithms.optimizers` module. This optimizer class implements a standard gradient descent optimization algorithm for use with quantum variational algorithms, such as :class:`~qiskit.algorithms.VQE`. For a detailed description and examples on how to use this class, please refer to the :class:`~qiskit.algorithms.optimizers.GradientDescent` class documentation."
msgstr ""

#: ../../release_notes.rst:8211
msgid "A new optimizer class, :class:`~qiskit.algorithms.optimizers.QNSPSA`, has been added to the :mod:`qiskit.algorithms.optimizers` module. This class implements the `Quantum Natural SPSA (QN-SPSA) <https://arxiv.org/abs/2103.09232>`__ algorithm, a generalization of the 2-SPSA algorithm, and estimates the Quantum Fisher Information Matrix instead of the Hessian to obtain a stochastic estimate of the Quantum Natural Gradient. For examples on how to use this new optimizer refer to the :class:`~qiskit.algorithms.optimizers.QNSPSA` class documentation."
msgstr ""

#: ../../release_notes.rst:8221
msgid "A new kwarg, ``second_order``, has been added to the constructor of the :class:`~qiskit.algorithms.optimizers.SPSA` class in the :mod:`qiskit.algorithms.optimizers` module. When set to ``True`` this enables using `second-order SPSA <https://ieeexplore.ieee.org/document/657661>`__. Second order SPSA, or 2-SPSA, is an extension of the ordinary SPSA algorithm that enables estimating the Hessian alongside the gradient, which is used to precondition the gradient before the parameter update step. As a second-order method, this tries to improve convergence of SPSA. For examples on how to use this option refer to the :class:`~qiskit.algorithms.optimizers.SPSA` class documentation."
msgstr ""

#: ../../release_notes.rst:8233
msgid "When using the ``latex`` or ``latex_source`` output mode of :meth:`~qiskit.visualization.circuit_drawer` or the :meth:`~qiskit.circuit.QuantumCircuit.draw` of :class:`~qiskit.circuit.QuantumCircuit` the ``style`` kwarg can now be used just as with the ``mpl`` output formatting. However, unlike the ``mpl`` output mode only the ``displaytext`` field will be used when using the ``latex`` or ``latex_source`` output modes (because neither supports color)."
msgstr ""

#: ../../release_notes.rst:8242
msgid "When using the ``mpl`` or ``latex`` output methods for the :meth:`~qiskit.visualization.circuit_drawer` function or the :meth:`~qiskit.circuit.QuantumCircuit.draw` of :class:`~qiskit.circuit.QuantumCircuit`, you can now use math mode formatting for text and set color formatting (``mpl`` only) by setting the ``style`` kwarg as a dict with a user-generated name or label. For example, to add subscripts and to change a gate color:"
msgstr ""

#: ../../release_notes.rst:8262
msgid "Added three new classes, :class:`~qiskit.circuit.library.CDKMRippleCarryAdder`, :class:`~qiskit.circuit.library.ClassicalAdder` and :class:`~qiskit.circuit.library.DraperQFTAdder`, to the :mod:`qiskit.circuit.library` module. These new circuit classes are used to perform classical addition of two equally-sized qubit registers. For two registers :math:`|a\\rangle_n` and :math:`|b\\rangle_n` on :math:`n` qubits, the three new classes perform the operation:"
msgstr ""

#: ../../release_notes.rst:8271
msgid "|a\\rangle_n |b\\rangle_n \\mapsto |a\\rangle_n |a + b\\rangle_{n + 1}."
msgstr ""

#: ../../release_notes.rst:8305
msgid "Added two new classes, :class:`~qiskit.circuit.library.RGQFTMultiplier` and :class:`~qiskit.circuit.library.HRSCumulativeMultiplier`, to the :mod:`qiskit.circuit.library` module. These classes are used to perform classical multiplication of two equally-sized qubit registers. For two registers :math:`|a\\rangle_n` and :math:`|b\\rangle_n` on :math:`n` qubits, the two new classes perform the operation"
msgstr ""

#: ../../release_notes.rst:8313
msgid "|a\\rangle_n |b\\rangle_n |0\\rangle_{2n} \\mapsto |a\\rangle_n |b\\rangle_n |a \\cdot b\\rangle_{2n}."
msgstr ""

#: ../../release_notes.rst:8349
msgid "The :class:`~qiskit.circuit.Delay` class now can accept a :class:`~qiskit.circuit.ParameterExpression` or :class:`~qiskit.circuit.Parameter` value for the ``duration`` kwarg on its constructor and for its :attr:`~qiskit.circuit.Delay.duration` attribute."
msgstr ""

#: ../../release_notes.rst:8375
msgid "A new binary serialization format, `QPY`, has been introduced. It is designed to be a fast binary serialization format that is backwards compatible (QPY files generated with older versions of Qiskit can be loaded by newer versions of Qiskit) that is native to Qiskit. The QPY serialization tooling is available  via the :mod:`qiskit.circuit.qpy_serialization` module. For example, to generate a QPY file::"
msgstr ""

#: ../../release_notes.rst:8400
msgid "Then the five circuits saved in the QPY file can be loaded with::"
msgstr ""

#: ../../release_notes.rst:8407
msgid "The QPY file format specification is available in the module documentation."
msgstr ""

#: ../../release_notes.rst:8409
msgid "The :class:`~qiskit.quantum_info.TwoQubitBasisDecomposer` class has been updated to perform pulse optimal decompositions for a basis with CX, √X, and virtual Rz gates as described in https://arxiv.org/pdf/2008.08571. Pulse optimal here means that the duration of gates between the CX gates of the decomposition is reduced in exchange for possibly more local gates before or after all the CX gates such that, when composed into a circuit, there is the possibility of single qubit compression with neighboring gates reducing the overall sequence duration."
msgstr ""

#: ../../release_notes.rst:8419
msgid "A new keyword argument, ```pulse_optimize``, has been added to the constructor for :class:`~qiskit.quantum_info.TwoQubitBasisDecomposer` to control this:"
msgstr ""

#: ../../release_notes.rst:8422
msgid "``None``: Attempt pulse optimal decomposition. If a pulse optimal decomposition is unknown for the basis of the decomposer, drop back to the standard decomposition without warning. This is the default setting."
msgstr ""

#: ../../release_notes.rst:8426
msgid "``True``: Attempt pulse optimal decomposition. If a pulse optimal decomposition is unknown for the basis of the decomposer, raise `QiskitError`."
msgstr ""

#: ../../release_notes.rst:8429
msgid "``False``: Do not attempt pulse optimal decomposition."
msgstr ""

#: ../../release_notes.rst:8444
msgid "The transpiler pass :class:`~qiskit.transpiler.passes.synthesis.UnitarySynthesis` located in :mod:`qiskit.transpiler.passes` has been updated to support performing pulse optimal decomposition. This is done primarily with the the ``pulse_optimize`` keyword argument which was added to the constructor and used to control whether pulse optimal synthesis is performed. The behavior of this kwarg mirrors the ``pulse_optimize`` kwarg in the :class:`~qiskit.quantum_info.TwoQubitBasisDecomposer` class's constructor. Additionally, the constructor has another new keyword argument, ``synth_gates``, which is used to specify the list of gate names over which synthesis should be attempted. If ``None`` and ``pulse_optimize`` is ``False`` or ``None``, use ``\"unitary\"``. If `None` and `pulse_optimize` is ``True``, use ``\"unitary\"`` and ``\"swap\"``. Since the direction of the CX gate in the synthesis is arbitrary, another keyword argument, ``natural_direction``, is added to consider first a coupling map and then :class:`~qiskit.circuit.library.CXGate` durations in choosing for which direction of CX to generate the synthesis."
msgstr ""

#: ../../release_notes.rst:8484
msgid "A new basis option, ``'XZX'``, was added for the ``basis`` argument :class:`~qiskit.quantum_info.OneQubitEulerDecomposer` class."
msgstr ""

#: ../../release_notes.rst:8487
msgid "Added a new method, :meth:`~qiskit.circuit.QuantumCircuit.get_instructions`, was added to the :class:`~qiskit.circuit.QuantumCircuit` class. This method is used to return all :class:`~qiskit.circuit.Instruction` objects in the circuit which have a :attr:`~qiskit.circuit.Instruction.name` that matches the provided ``name`` argument along with its associated ``qargs`` and ``cargs`` lists of :class:`~qiskit.circuit.Qubit` and :class:`~qiskit.circuit.Clbit` objects."
msgstr ""

#: ../../release_notes.rst:8495
msgid "A new optional extra ``all`` has been added to the qiskit-terra package. This enables installing all the optional requirements with a single extra, for example: ``pip install 'qiskit-terra[all]'``, Previously, it was necessary to list all the extras individually to install all the optional dependencies simultaneously."
msgstr ""

#: ../../release_notes.rst:8501
msgid "Added two new classes :class:`~qiskit.result.ProbDistribution` and :class:`~qiskit.result.QuasiDistribution` for dealing with probability distributions and quasiprobability distributions respectively. These objects both are dictionary subclasses that add additional methods for working with probability and quasiprobability distributions."
msgstr ""

#: ../../release_notes.rst:8507
msgid "Added a new :attr:`~qiskit.algorithms.optimizers.Optimizer.settings` property to the :class:`~qiskit.algorithms.optimizers.Optimizer` abstract base class that all the optimizer classes in the :mod:`qiskit.algorithms.optimizers` module are based on. This property will return a Python dictionary of the settings for the optimizer that can be used to instantiate another instance of the same optimizer class. For example::"
msgstr ""

#: ../../release_notes.rst:8521
msgid "The ``settings`` dictionary is also potentially useful for serializing optimizer objects using JSON or another serialization format."
msgstr ""

#: ../../release_notes.rst:8524
msgid "A new function, :func:`~qiskit.user_config.set_config`, has been added to the :mod:`qiskit.user_config` module. This function enables setting values in a user config from the Qiskit API. For example::"
msgstr ""

#: ../../release_notes.rst:8531
msgid "which will result in adding a value of ``circuit_drawer = mpl`` to the ``default`` section in the ``settings.conf`` file."
msgstr ""

#: ../../release_notes.rst:8534
msgid "If no ``file_path`` argument is specified, the currently used path to the user config file (either the value of the ``QISKIT_SETTINGS`` environment variable if set or the default location ``~/.qiskit/settings.conf``) will be updated. However, changes to the existing config file will not be reflected in the current session since the config file is parsed at import time."
msgstr ""

#: ../../release_notes.rst:8540
msgid "Added a new state class, :class:`~qiskit.quantum_info.StabilizerState`, to the :mod:`qiskit.quantum_info` module. This class represents a stabilizer simulator state using the convention from `Aaronson and Gottesman (2004) <https://arxiv.org/abs/quant-ph/0406196>`__."
msgstr ""

#: ../../release_notes.rst:8545
msgid "Two new options, ``'value'`` and ``'value_desc'`` were added to the ``sort`` kwarg of the :func:`qiskit.visualization.plot_histogram` function. When ``sort`` is set to either of these options the output visualization will sort the x axis based on the maximum probability for each bitstring. For example:"
msgstr ""

#: ../../release_notes.rst:8573
msgid "When running :func:`~qiskit.tools.parallel_map` (and functions that internally call :func:`~qiskit.tools.parallel_map` such as :func:`~qiskit.compiler.transpile` and :func:`~qiskit.compiler.assemble`) on Python 3.9 with ``QISKIT_PARALLEL`` set to True in some scenarios it is possible for the program to deadlock and never finish running. To avoid this from happening the default for Python 3.9 was changed to not run in parallel, but if ``QISKIT_PARALLEL`` is explicitly enabled then this can still occur."
msgstr ""

#: ../../release_notes.rst:8588
msgid "The minimum version of the `retworkx <https://pypi.org/project/retworkx/>`_ dependency was increased to version `0.9.0`. This was done to use new APIs introduced in that release which improved the performance of some transpiler passes."
msgstr ""

#: ../../release_notes.rst:8592
msgid "The default value for ``QISKIT_PARALLEL`` on Python 3.9 environments has changed to ``False``, this means that when running on Python 3.9 by default multiprocessing will not be used. This was done to avoid a potential deadlock/hanging issue that can occur when running multiprocessing on Python 3.9 (see the known issues section for more detail). It is still possible to manual enable it by explicitly setting the ``QISKIT_PARALLEL`` environment variable to ``TRUE``."
msgstr ""

#: ../../release_notes.rst:8600
msgid "The existing fake backend classes in ``qiskit.test.mock`` now strictly implement the :class:`~qiskit.providers.BackendV1` interface. This means that if you were manually constructing :class:`~qiskit.qobj.QasmQobj` or :class:`~qiskit.qobj.PulseQobj` object for use with the ``run()`` method this will no longer work. The ``run()`` method only accepts :class:`~qiskit.circuit.QuantumCircuit` or :class:`~qiskit.pulse.Schedule` objects now. This was necessary to enable testing of new backends implemented without qobj which previously did not have any testing inside qiskit terra. If you need to leverage the fake backends with :class:`~qiskit.qobj.QasmQobj` or :class:`~qiskit.qobj.PulseQobj` new fake legacy backend objects were added to explicitly test the legacy providers interface. This will be removed after the legacy interface is deprecated and removed. Moving forward new fake backends will only implement the :class:`~qiskit.providers.BackendV1` interface and will not add new legacy backend classes for new fake backends."
msgstr ""

#: ../../release_notes.rst:8616
msgid "When creating a :class:`~qiskit.quantum_info.Pauli` object with an invalid string label, a :class:`~qiskit.exceptions.QiskitError` is now raised. This is a change from previous releases which would raise an ``AttributeError`` on an invalid string label. This change was made to ensure the error message is more informative and distinct from a generic ``AttributeError``."
msgstr ""

#: ../../release_notes.rst:8623
msgid "The output program representation from the pulse builder (:func:`qiskit.pulse.builder.build`) has changed from a :class:`~qiskit.pulse.Schedule` to a :class:`~qiskit.pulse.ScheduleBlock`. This new representation disables some timing related operations such as shift and insert. However, this enables parameterized instruction durations within the builder context. For example:"
msgstr ""

#: ../../release_notes.rst:8646
msgid "You can directly pass the duration-assigned schedules to the assembler (or backend), or you can attach them to your quantum circuit as pulse gates."
msgstr ""

#: ../../release_notes.rst:8649
msgid "The `tweedledum <https://pypi.org/project/tweedledum/>`__ library which was previously an optional dependency has been made a requirement. This was done because of the wide use of the :class:`~qiskit.circuit.library.PhaseOracle` (which depends on having tweedledum installed) with several algorithms from :mod:`qiskit.algorithms`."
msgstr ""

#: ../../release_notes.rst:8656
msgid "The optional extra ``full-featured-simulators`` which could previously used to install ``qiskit-aer`` with something like ``pip install qiskit-terra[full-featured-simulators]`` has been removed from the qiskit-terra package. If this was being used to install ``qiskit-aer`` with ``qiskit-terra`` instead you should rely on the `qiskit <https://pypi.org/project/qiskit/>`__ metapackage or just install qiskit-terra and qiskit-aer together with ``pip install qiskit-terra qiskit-aer``."
msgstr ""

#: ../../release_notes.rst:8665
msgid "A new requirement `symengine <https://pypi.org/project/symengine>`__ has been added for Linux (on x86_64, aarch64, and ppc64le) and macOS users (x86_64 and arm64). It is an optional dependency on Windows (and available on PyPi as a precompiled package for 64bit Windows) and other architectures. If it is installed it provides significantly improved performance for the evaluation of :class:`~qiskit.circuit.Parameter` and :class:`~qiskit.circuit.ParameterExpression` objects."
msgstr ""

#: ../../release_notes.rst:8673
msgid "All library circuit classes, i.e. all :class:`~qiskit.circuit.QuantumCircuit` derived classes in :mod:`qiskit.circuit.library`, are now wrapped in a :class:`~qiskit.circuit.Instruction` (or :class:`~qiskit.circuit.Gate`, if they are unitary). For example, importing and drawing the :class:`~qiskit.circuit.library.QFT` circuit:"
msgstr ""

#: ../../release_notes.rst:8686
msgid "before looked like"
msgstr ""

#: ../../release_notes.rst:8698
msgid "and now looks like"
msgstr ""

#: ../../release_notes.rst:8710
msgid "To obtain the old circuit, you can call the :meth:`~qiskit.circuit.QuantumCircuit.decompose` method on the circuit"
msgstr ""

#: ../../release_notes.rst:8720
msgid "This change was primarily made for consistency as before this release some circuit classes in :mod:`qiskit.circuit.library` were previously wrapped in an :class:`~qiskit.circuit.Instruction` or :class:`~qiskit.circuit.Gate` but not all."
msgstr ""

#: ../../release_notes.rst:8731
msgid "The class :class:`qiskit.exceptions.QiskitIndexError` is deprecated and will be removed in a future release. This exception was not actively being used by anything in Qiskit, if you were using it you can create a custom exception class to replace it."
msgstr ""

#: ../../release_notes.rst:8736
msgid "The kwargs ``epsilon`` and ``factr`` for the :class:`qiskit.algorithms.optimizers.L_BFGS_B` constructor and ``factr`` kwarg of the :class:`~qiskit.algorithms.optimizers.P_BFGS` optimizer class are deprecated and will be removed in a future release. Instead, please use the ``eps`` karg instead of ``epsilon``. The ``factr`` kwarg is replaced with ``ftol``. The relationship between the two is :code:`ftol = factr * numpy.finfo(float).eps`. This change was made to be consistent with the usage of the ``scipy.optimize.minimize`` functions ``'L-BFGS-B'`` method. See the: ``scipy.optimize.minimize(method='L-BFGS-B')`` `documentation <https://docs.scipy.org/doc/scipy/reference/optimize.minimize-lbfgsb.html>`__ for more information on how these new parameters are used."
msgstr ""

#: ../../release_notes.rst:8749
msgid "The legacy providers interface, which consisted of the :class:`qiskit.providers.BaseBackend`, :class:`qiskit.providers.BaseJob`, and :class:`qiskit.providers.BaseProvider` abstract classes, has been deprecated and will be removed in a future release. Instead you should use the versioned interface, which the current abstract class versions are :class:`qiskit.providers.BackendV1`, :class:`qiskit.providers.JobV1`, and :class:`qiskit.providers.ProviderV1`. The V1 objects are mostly backwards compatible to ease migration from the legacy interface to the versioned one. However, expect future versions of the abstract interfaces to diverge more. You can refer to the :mod:`qiskit.providers` documentation for more high level details about the versioned interface."
msgstr ""

#: ../../release_notes.rst:8761
msgid "The ``condition`` kwarg to the :class:`~qiskit.dagcircuit.DAGDepNode` constructor along with the corresponding :attr:`~qiskit.dagcircuit.DAGDepNode.condition` attribute of the :class:`~qiskit.dagcircuit.DAGDepNode` have been deprecated and will be removed in a future release. Instead, you can access the ``condition`` of a ``DAGDepNode`` if the node is of type ``op``, by using ``DAGDepNode.op.condition``."
msgstr ""

#: ../../release_notes.rst:8769
msgid "The :attr:`~qiskit.dagcircuit.DAGNode.condition` attribute of the :class:`~qiskit.dagcircuit.DAGNode` class has been deprecated and will be removed in a future release. Instead, you can access the ``condition`` of a ``DAGNode`` object if the node is of type ``op``, by using ``DAGNode.op.condition``."
msgstr ""

#: ../../release_notes.rst:8775
msgid "The pulse builder (:func:`qiskit.pulse.builder.build`) syntax :func:`qiskit.pulse.builder.inline` is deprecated and will be removed in a future release. Instead of using this context, you can just remove alignment contexts within the inline context."
msgstr ""

#: ../../release_notes.rst:8780
msgid "The pulse builder (:func:`qiskit.pulse.builder.build`) syntax :func:`qiskit.pulse.builder.pad` is deprecated and will be removed in a future release. This was done because the :class:`~qiskit.pulse.ScheduleBlock` now being returned by the pulse builder  doesn't support the ``.insert`` method (and there is no insert syntax in the builder). The use of timeslot placeholders to block the insertion of other instructions is no longer necessary."
msgstr ""

#: ../../release_notes.rst:8793
msgid "The :class:`~qiskit.quantum_info.OneQubitEulerDecomposer` and :class:`~qiskit.quantum_info.TwoQubitBasisDecomposer` classes for one and two qubit gate synthesis have been improved to tighten up tolerances, improved repeatability and simplification, and fix several global-phase-tracking bugs."
msgstr ""

#: ../../release_notes.rst:8799
msgid "Fixed an issue in the assignment of the :attr:`~qiskit.circuit.Gate.name` attribute to :class:`~qiskit.circuit.Gate` generated by multiple calls to the :meth:`~qiskit.circuit.Gate.inverse`` method. Prior to this fix when the :meth:`~qiskit.circuit.Gate.inverse`` was called it would unconditionally append ``_dg`` on each call to inverse. This has been corrected so on a second call of :meth:`~qiskit.circuit.Gate.inverse`` the ``_dg`` suffix is now removed."
msgstr ""

#: ../../release_notes.rst:8807
msgid "Fixes the triviality check conditions of :class:`~qiskit.circuit.library.CZGate`, :class:`~qiskit.circuit.library.CRZGate`, :class:`~qiskit.circuit.library.CU1Gate` and :class:`~qiskit.circuit.library.MCU1Gate` in the :class:`~qiskit.transpiler.passes.HoareOptimizer` pass. Previously, in some cases the optimizer would remove these gates breaking the semantic equivalence of the transformation."
msgstr ""

#: ../../release_notes.rst:8814
msgid "Fixed an issue when converting a :class:`~qiskit.opflow.list_ops.ListOp` object of :class:`~qiskit.opflow.primitive_ops.PauliSumOp` objects using :class:`~qiskit.opflow.expectations.PauliExpectation` or :class:`~qiskit.opflow.expectations.AerPauliExpectation`. Previously, it would raise a warning about it converting to a Pauli representation which is potentially expensive. This has been fixed by instead of internally converting the :class:`~qiskit.opflow.list_ops.ListOp` to a :class:`~qiskit.opflow.list_ops.SummedOp` of :class:`~qiskit.opflow.primitive_ops.PauliOp` objects, it now creates a :class:`~qiskit.opflow.primitive_ops.PauliSumOp` which is more efficient. Fixed `#6159 <https://github.com/Qiskit/qiskit-terra/issues/6159>`__"
msgstr ""

#: ../../release_notes.rst:8827
msgid "Fixed an issue with the :class:`~qiskit.circuit.library.NLocal` class in the :mod:`qiskit.circuit.library` module where it wouldn't properly raise an exception at object initialization if an invalid type was used for the ``reps`` kwarg which would result in an unexpected runtime error later. A ``TypeError`` will now be properly raised if the ``reps`` kwarg is not an ``int`` value. Fixed `#6515 <https://github.com/Qiskit/qiskit-terra/issues/6515>`__"
msgstr ""

#: ../../release_notes.rst:8835
msgid "Fixed an issue where the :class:`~qiskit.circuit.library.TwoLocal` class in the :mod:`qiskit.circuit.library` module did not accept numpy integer types (e.g. ``numpy.int32``, ``numpy.int64``, etc) as a valid input for the ``entanglement`` kwarg. Fixed `#6455 <https://github.com/Qiskit/qiskit-terra/issues/6455>`__"
msgstr ""

#: ../../release_notes.rst:8841
msgid "When loading an OpenQASM2 file or string with the :meth:`~qiskit.circuitQuantumCircuit.from_qasm_file` or :meth:`~qiskit.circuitQuantumCircuit.from_qasm_str` constructors for the :class:`~qiskit.circuit.QuantumCircuit` class, if the OpenQASM2 circuit contains an instruction with the name ``delay`` this will be mapped to a :class:`qiskit.circuit.Delay` instruction. For example:"
msgstr ""

#: ../../release_notes.rst:8862
msgid "Fixed `#6510 <https://github.com/Qiskit/qiskit-terra/issues/6510>`__"
msgstr ""

#: ../../release_notes.rst:8864
msgid "Fixed an issue with addition between :class:`~qiskit.opflow.primitive_ops.PauliSumOp` objects that had :class:`~qiskit.circuit.ParameterExpression` coefficients. Previously this would result in a ``QiskitError`` exception being raised because the addition of the :class:`~qiskit.circuit.ParameterExpression` was not handled correctly. This has been fixed so that addition can be performed between :class:`~qiskit.opflow.primitive_ops.PauliSumOp` objects with :class:`~qiskit.circuit.ParameterExpression` coefficients."
msgstr ""

#: ../../release_notes.rst:8873
msgid "Fixed an issue with the initialization of the :class:`~qiskit.algorithms.AmplificationProblem` class. The ``is_good_state`` kwarg was a required field but incorrectly being treated as optional (and documented as such). This has been fixed and also updated so unless the input ``oracle`` is a :class:`~qiskit.circuit.library.PhaseOracle` object (which provides it's on evaluation method) the field is required and will raise a ``TypeError`` when constructed without ``is_good_state``."
msgstr ""

#: ../../release_notes.rst:8882
msgid "Fixed an issue where adding a control to a :class:`~qiskit.circuit.ControlledGate` with open controls would unset the inner open controls. Fixes `#5857 <https://github.com/Qiskit/qiskit-terra/issues/5857>`__"
msgstr ""

#: ../../release_notes.rst:8887
msgid "Fixed an issue with the :meth:`~qiskit.opflow.expectations.PauliExpectation.convert` method of the :class:`~qiskit.opflow.expectations.PauliExpectation` class where calling it on an operator that was non-Hermitian would return an incorrect result. Fixed `#6307 <https://github.com/Qiskit/qiskit-terra/issues/6307>`__"
msgstr ""

#: ../../release_notes.rst:8894
msgid "Fixed an issue with the :func:`qiskit.pulse.transforms.inline_subroutines` function which would previously incorrectly not remove all the nested components when called on nested schedules. Fixed `#6321 <https://github.com/Qiskit/qiskit-terra/issues/6321>`__"
msgstr ""

#: ../../release_notes.rst:8899
msgid "Fixed an issue when passing a partially bound callable created with the Python standard library's ``functools.partial()`` function as the ``schedule`` kwarg to the :meth:`~qiskit.pulse.InstructionScheduleMap.add` method of the :class:`~qiskit.pulse.InstructionScheduleMap` class, which would previously result in an error. Fixed `#6278 <https://github.com/Qiskit/qiskit-terra/issues/6278>`__"
msgstr ""

#: ../../release_notes.rst:8907
msgid "Fixed an issue with the :class:`~qiskit.circuit.library.PiecewiseChebyshev` when setting the :attr:`~qiskit.circuit.library.PiecewiseChebyshev.breakpoints` to ``None`` on an existing object was incorrectly being treated as a breakpoint. This has been corrected so that when it is set to ``None`` this will switch back to the default  behavior of approximating over the full interval. Fixed `#6198 <https://github.com/Qiskit/qiskit-terra/issues/6198>`__"
msgstr ""

#: ../../release_notes.rst:8915
msgid "Fixed an issue with the :meth:`~qiskit.circuit.QuantumCircuit.num_connected_components` method of :class:`~qiskit.circuit.QuantumCircuit` which was returning the incorrect number of components when the circuit contains two or more gates conditioned on classical registers. Fixed `#6477 <https://github.com/Qiskit/qiskit-terra/issues/6477>`__"
msgstr ""

#: ../../release_notes.rst:8922
msgid "Fixed an issue with the :mod:`qiskit.opflow.expectations` module where coefficients of a statefunction were not being multiplied correctly. This also fixed the calculations of Gradients and QFIs when using the :class:`~qiskit.opflow.expectations.PauliExpectation` or :class:`~qiskit.opflow.expectations.AerPauliExpectation` classes. For example, previously::"
msgstr ""

#: ../../release_notes.rst:8934
msgid "evaluated to ``2`` for :class:`~qiskit.opflow.expectations.AerPauliExpectation` and to ``4`` for other expectation converters. Since ``~StateFn(I) @ (2 * One)`` is a shorthand notation for ``~(2 * One) @ I @ (2 * One)``, the now correct coefficient of ``4`` is returned for all expectation converters. Fixed `#6497 <https://github.com/Qiskit/qiskit-terra/issues/6497>`__"
msgstr ""

#: ../../release_notes.rst:8941
msgid "Fixed the bug that caused :meth:`~qiskit.opflow.PauliOp.to_circuit` to fail when :class:`~qiskit.opflow.PauliOp` had a phase. At the same time, it was made more efficient to use :class:`~qiskit.circuit.library.generalized_gates.PauliGate`."
msgstr ""

#: ../../release_notes.rst:8945
msgid "Fixed an issue where the QASM output generated by the :meth:`~qiskit.circuit.QuantumCircuit.qasm` method of :class:`~qiskit.circuit.QuantumCircuit` for composite gates such as :class:`~qiskit.circuit.library.MCXGate` and its variants ( :class:`~qiskit.circuit.library.MCXGrayCode`, :class:`~qiskit.circuit.library.MCXRecursive`, and :class:`~qiskit.circuit.library.MCXVChain`) would be incorrect. Now if a :class:`~qiskit.circuit.Gate` in the circuit is not present in ``qelib1.inc``, its definition is added to the output QASM string. Fixed `#4943 <https://github.com/Qiskit/qiskit-terra/issues/4943>`__ and `#3945 <https://github.com/Qiskit/qiskit-terra/issues/3945>`__"
msgstr ""

#: ../../release_notes.rst:8957
msgid "Fixed an issue with the :func:`~qiskit.visualization.circuit_drawer` function and :meth:`~qiskit.circuit.QuantumCircuit.draw` method of :class:`~qiskit.circuit.QuantumCircuit`. When using the ``mpl`` or ``latex`` output modes, with the ``cregbundle`` kwarg set to ``False`` and the ``reverse_bits`` kwarg set to ``True``, the bits in the classical registers displayed in the same order as when ``reverse_bits`` was set to ``False``."
msgstr ""

#: ../../release_notes.rst:8964
msgid "Fixed an issue when using the :class:`qiskit.extensions.Initialize` instruction which was not correctly setting the global phase of the synthesized definition when constructed. Fixed `#5320 <https://github.com/Qiskit/qiskit-terra/issues/5230>`__"
msgstr ""

#: ../../release_notes.rst:8969
msgid "Fixed an issue where the bit-order in :meth:`qiskit.circuit.library.PhaseOracle.evaluate_bitstring` did not agree with the order of the measured bitstring. This fix also affects the execution of the :class:`~qiskit.algorithms.Grover` algorithm class if the oracle is specified as a :class:`~qiskit.circuit.library.PhaseOracle`, which now will now correctly identify the correct bitstring. Fixed `#6314 <https://github.com/Qiskit/qiskit-terra/issues/6314>`__"
msgstr ""

#: ../../release_notes.rst:8977
msgid "Fixes a bug in :func:`~qiskit.transpiler.passes.Optimize1qGatesDecomposition` previously causing certain short sequences of gates to erroneously not be rewritten."
msgstr ""

#: ../../release_notes.rst:8981
msgid "Fixed an issue in the :meth:`qiskit.opflow.gradients.Gradient.gradient_wrapper` method with the gradient calculation. Previously, if the operator was not diagonal an incorrect result would be returned in some situations. This has been fixed by using an expectation converter to ensure the result is always correct."
msgstr ""

#: ../../release_notes.rst:8987
msgid "Fixed an issue with the :func:`~qiskit.visualization.circuit_drawer` function and :meth:`~qiskit.circuit.QuantumCircuit.draw` method of :class:`~qiskit.circuit.QuantumCircuit` with all output modes where it would incorrectly render a custom instruction that includes classical bits in some circumstances. Fixed `#3201 <https://github.com/Qiskit/qiskit-terra/issues/3201>`__, `#3202 <https://github.com/Qiskit/qiskit-terra/issues/3202>`__, and `#6178 <https://github.com/Qiskit/qiskit-terra/issues/6178>`__"
msgstr ""

#: ../../release_notes.rst:8996
msgid "Fixed an issue in :func:`~qiskit.visualization.circuit_drawer` and the :meth:`~qiskit.circuit.QuantumCircuit.draw` method of the :class:`~qiskit.circuit.QuantumCircuit` class when using the ``mpl`` output mode, controlled-Z Gates were incorrectly drawn as asymmetrical. Fixed `#5981 <https://github.com/Qiskit/qiskit-terra/issues/5981>`__"
msgstr ""

#: ../../release_notes.rst:9002
msgid "Fixed an issue with the :class:`~qiskit.transpiler.passes.OptimizeSwapBeforeMeasure` transpiler pass where in some situations a :class:`~qiskit.circuit.library.SwapGate` that that contained a classical condition would be removed. Fixed `#6192 <https://github.com/Qiskit/qiskit-terra/issues/6192>`__"
msgstr ""

#: ../../release_notes.rst:9008
msgid "Fixed an issue with the phase of the :class:`qiskit.opflow.gradients.QFI` class when the ``qfi_method`` is set to ``lin_comb_full`` which caused the incorrect observable to be evaluated."
msgstr ""

#: ../../release_notes.rst:9012
msgid "Fixed an issue with :class:`~qiskit.algorithms.VQE` algorithm class when run with the :class:`~qiskit.algorithms.optimizers.L_BFGS_B` or :class:`~qiskit.algorithms.optimizers.P_BFGS` optimizer classes and gradients are used, the gradient was incorrectly passed as a numpy array instead of the expected list of floats resulting in an error. This has been resolved so you can use gradients with :class:`~qiskit.algorithms.VQE` and the :class:`~qiskit.algorithms.optimizers.L_BFGS_B` or :class:`~qiskit.algorithms.optimizers.P_BFGS` optimizers."
msgstr ""

#: ../../release_notes.rst:9027
msgid "The deprecation of the :meth:`~qiskit.pulse.Instruction.parameters` method for the :class:`~qiskit.pulse.Instruction` class has been reversed. This method was originally deprecated in the 0.17.0, but it is still necessary for several applications, including when running calibration experiments. This method will continue to be supported and will **not** be removed."
msgstr ""

#: ../../release_notes.rst:9049
msgid "IBM Q Provider 0.15.0"
msgstr ""

#: ../../release_notes.rst:9056
msgid "Add support for new method :meth:`qiskit.providers.ibmq.runtime.RuntimeJob.error_message` which will return a string representing the reason if the job failed."
msgstr ""

#: ../../release_notes.rst:9059
msgid "The `inputs` parameter to :meth:`qiskit.providers.ibmq.runtime.IBMRuntimeService.run` method can now be specified as a :class:`qiskit.providers.ibmq.runtime.ParameterNamespace` instance which supports auto-complete features. You can use :meth:`qiskit.providers.ibmq.runtime.RuntimeProgram.parameters` to retrieve an ``ParameterNamespace`` instance."
msgstr ""

#: ../../release_notes.rst:9085
msgid "The user can now set the visibility (private/public) of a Qiskit Runtime program using :meth:`qiskit.providers.ibmq.runtime.IBMRuntimeService.set_program_visibility`."
msgstr ""

#: ../../release_notes.rst:9088
msgid "An optional boolean parameter `pending` has been added to :meth:`qiskit.providers.ibmq.runtime.IBMRuntimeService.jobs` and it allows filtering jobs by their status. If `pending` is not specified all jobs are returned. If `pending` is set to True, 'QUEUED' and 'RUNNING' jobs are returned. If `pending` is set to False, 'DONE', 'ERROR' and 'CANCELLED' jobs are returned."
msgstr ""

#: ../../release_notes.rst:9095
msgid "Add support for the ``use_measure_esp`` flag in the :meth:`qiskit.providers.ibmq.IBMQBackend.run` method. If ``True``, the backend will use ESP readout for all measurements which are the terminal instruction on that qubit. If used and the backend does not support ESP readout, an error is raised."
msgstr ""

#: ../../release_notes.rst:9106
msgid ":meth:`qiskit.providers.ibmq.runtime.RuntimeProgram.parameters` is now a method that returns a :class:`qiskit.providers.ibmq.runtime.ParameterNamespace` instance, which you can use to fill in runtime program parameter values and pass to :meth:`qiskit.providers.ibmq.runtime.IBMRuntimeService.run`."
msgstr ""

#: ../../release_notes.rst:9112
msgid "The ``open_pulse`` flag in backend configuration no longer indicates whether a backend supports pulse-level control. As a result, :meth:`qiskit.providers.ibmq.IBMQBackend.configuration` may return a :class:`~qiskit.providers.models.PulseBackendConfiguration` instance even if its ``open_pulse`` flag is ``False``."
msgstr ""

#: ../../release_notes.rst:9118
msgid "Job share level is no longer supported due to low adoption and the corresponding interface will be removed in a future release. This means you should no longer pass `share_level` when creating a job or use :meth:`qiskit.providers.ibmq.job.IBMQJob.share_level` method to get a job's share level."
msgstr ""

#: ../../release_notes.rst:9129
msgid "The ``id`` instruction has been deprecated on IBM hardware backends. Instead, please use the ``delay`` instruction which implements variable-length delays, specified in units of ``dt``. When running a circuit containing an ``id`` instruction, a warning will be raised on job submission and any ``id`` instructions in the job will be automatically replaced with their equivalent ``delay`` instruction."
msgstr ""

#: ../../release_notes.rst:9140
msgid "Qiskit 0.27.0"
msgstr ""

#: ../../release_notes.rst:9143 ../../release_notes.rst:9234
msgid "Terra 0.17.4"
msgstr ""

#: ../../release_notes.rst:9158
msgid "Aqua 0.9.2"
msgstr ""

#: ../../release_notes.rst:9165
msgid "Removed version caps from the requirements list to enable installing with newer versions of dependencies."
msgstr ""

#: ../../release_notes.rst:9169
msgid "IBM Q Provider 0.14.0"
msgstr ""

#: ../../release_notes.rst:9176
msgid "You can now use the :meth:`qiskit.providers.ibmq.runtime.RuntimeJob.logs` method to retrieve job logs. Note that logs are only available after the job finishes."
msgstr ""

#: ../../release_notes.rst:9180
msgid "A new backend configuration attribute ``input_allowed`` now tells you the types of input supported by the backend. Valid input types are ``job``, which means circuit jobs, and ``runtime``, which means Qiskit Runtime."
msgstr ""

#: ../../release_notes.rst:9184
msgid "You can also use ``input_allowed`` in backend filtering. For example::"
msgstr ""

#: ../../release_notes.rst:9198
msgid "``qiskit-ibmq-provider`` now uses a new package ``websocket-client`` as its websocket client, and packages ``websockets`` and ``nest-asyncio`` are no longer required. ``setup.py`` and ``requirements.txt`` have been updated accordingly."
msgstr ""

#: ../../release_notes.rst:9209
msgid "Fixes the issue that uses ``shots=1`` instead of the documented default when no ``shots`` is specified for :meth:`~qiskit.providers.ibmq.AccountProvider.run_circuits`."
msgstr ""

#: ../../release_notes.rst:9213
msgid "Fixes the issue wherein a ``QiskitBackendNotFoundError`` exception is raised when retrieving a runtime job that was submitted using a different provider than the one used for retrieval."
msgstr ""

#: ../../release_notes.rst:9217
msgid "Streaming runtime program interim results with proxies is now supported. You can specify the proxies to use when enabling the account as usual, for example::"
msgstr ""

#: ../../release_notes.rst:9229
msgid "Qiskit 0.26.1"
msgstr ""

#: ../../release_notes.rst:9241
msgid "Fixed an issue with the :class:`~qiskit.utils.QuantumInstance` with :class:`~qiskit.providers.BackendV1` backends with the :attr:`~qiskit.providers.models.BackendConfiguration.`max_experiments` attribute set to a value less than the number of circuits to run. Previously the :class:`~qiskit.utils.QuantumInstance` would not correctly split the circuits to run into separate jobs, which has been corrected."
msgstr ""

#: ../../release_notes.rst:9259 ../../release_notes.rst:9312
#: ../../release_notes.rst:9520 ../../release_notes.rst:9590
#: ../../release_notes.rst:9620 ../../release_notes.rst:9762
msgid "Aqua 0.9.1"
msgstr ""

#: ../../release_notes.rst:9264 ../../release_notes.rst:9317
msgid "IBM Q Provider 0.13.1"
msgstr ""

#: ../../release_notes.rst:9270
msgid "Qiskit 0.26.0"
msgstr ""

#: ../../release_notes.rst:9275
msgid "Terra 0.17.3"
msgstr ""

#: ../../release_notes.rst:9282
msgid "This release includes 2 new classes, :class:`~qiskit.result.ProbDistribution` and :class:`~qiskit.result.QuasiDistribution`, which were needed for compatibility with the recent qiskit-ibmq-provider release's beta support for the `qiskit-runtime <https://github.com/Qiskit-Partners/qiskit-runtime>`__. These were only added for compatibility with that new feature in the qiskit-ibmq-provider release and the API for these classes is considered experimental and not considered stable for the 0.17.x release series. The interface may change when 0.18.0 is released in the future."
msgstr ""

#: ../../release_notes.rst:9298
msgid "Fixed an issue in :func:`~qiskit.visualization.plot_histogram` function where a ``ValueError`` would be raised when the function run on distributions with unequal lengths."
msgstr ""

#: ../../release_notes.rst:9324
msgid "This release introduces a new feature ``Qiskit Runtime Service``. Qiskit Runtime is a new architecture offered by IBM Quantum that significantly reduces waiting time during computational iterations. You can execute your experiments near the quantum hardware, without the interactions of multiple layers of classical and quantum hardware slowing it down."
msgstr ""

#: ../../release_notes.rst:9330
msgid "Qiskit Runtime allows authorized users to upload their Qiskit quantum programs, which are Python code that takes certain inputs, performs quantum and maybe classical computation, and returns the processing results. The same or other authorized users can then invoke these quantum programs by simply passing in the required input parameters."
msgstr ""

#: ../../release_notes.rst:9336
msgid "Note that Qiskit Runtime is currently in private beta for select account but will be released to the public in the near future."
msgstr ""

#: ../../release_notes.rst:9344
msgid ":class:`qiskit.providers.ibmq.experiment.analysis_result.AnalysisResult` now has an additional ``verified`` attribute which identifies if the ``quality`` has been verified by a human."
msgstr ""

#: ../../release_notes.rst:9347
msgid ":class:`qiskit.providers.ibmq.experiment.Experiment` now has an additional ``notes`` attribute which can be used to set notes on an experiment."
msgstr ""

#: ../../release_notes.rst:9350
msgid "This release introduces a new feature ``Qiskit Runtime Service``. Qiskit Runtime is a new architecture that significantly reduces waiting time during computational iterations. This new service allows authorized users to upload their Qiskit quantum programs, which are Python code that takes certain inputs, performs quantum and maybe classical computation, and returns the processing results. The same or other authorized users can then invoke these quantum programs by simply passing in the required input parameters."
msgstr ""

#: ../../release_notes.rst:9359
msgid "An example of using this new service::"
msgstr ""

#: ../../release_notes.rst:9385
msgid "The deprecated ``Human Bad``, ``Computer Bad``, ``Computer Good`` and ``Human Good`` enum values have been removed from :class:`qiskit.providers.ibmq.experiment.constants.ResultQuality`. They are replaced with ``Bad`` and ``Good`` values which should be used with the ``verified`` attribute on :class:`qiskit.providers.ibmq.experiment.analysis_result.AnalysisResult`:"
msgstr ""

#: ../../release_notes.rst:9393
msgid "Old Quality"
msgstr ""

#: ../../release_notes.rst:9393
msgid "New Quality"
msgstr ""

#: ../../release_notes.rst:9393
msgid "Verified"
msgstr ""

#: ../../release_notes.rst:9395
msgid "Human Bad"
msgstr ""

#: ../../release_notes.rst:9395 ../../release_notes.rst:9397
msgid "Bad"
msgstr ""

#: ../../release_notes.rst:9395 ../../release_notes.rst:9401
msgid "True"
msgstr ""

#: ../../release_notes.rst:9397
msgid "Computer Bad"
msgstr ""

#: ../../release_notes.rst:9397 ../../release_notes.rst:9399
msgid "False"
msgstr ""

#: ../../release_notes.rst:9399
msgid "Computer Good"
msgstr ""

#: ../../release_notes.rst:9399 ../../release_notes.rst:9401
msgid "Good"
msgstr ""

#: ../../release_notes.rst:9401
msgid "Human Good"
msgstr ""

#: ../../release_notes.rst:9404
msgid "Furthermore, the ``NO_INFORMATION`` enum has been renamed to ``UNKNOWN``."
msgstr ""

#: ../../release_notes.rst:9406
msgid "The :meth:`qiskit.providers.ibmq.IBMQBackend.defaults` method now always returns pulse defaults if they are available, regardless whether open pulse is enabled for the provider."
msgstr ""

#: ../../release_notes.rst:9415
msgid "Fixes the issue wherein passing in a noise model when sending a job to an IBMQ simulator would raise a ``TypeError``. Fixes `#894 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/894>`_"
msgstr ""

#: ../../release_notes.rst:9424 ../../release_notes.rst:9632
msgid "The :class:`qiskit.providers.ibmq.experiment.analysis_result.AnalysisResult` ``fit`` attribute is now optional."
msgstr ""

#: ../../release_notes.rst:9430
msgid "Qiskit 0.25.4"
msgstr ""

#: ../../release_notes.rst:9435
msgid "Terra 0.17.2"
msgstr ""

#: ../../release_notes.rst:9442
msgid "This is a bugfix release that fixes several issues from the 0.17.1 release. Most importantly this release fixes compatibility for the :class:`~qiskit.utils.QuantumInstance` class when running on backends that are based on the :class:`~qiskit.providers.BackendV1` abstract class. This fixes all the algorithms and applications built on :mod:`qiskit.algorithms` or :mod:`qiskit.opflow` when running on newer backends."
msgstr ""

#: ../../release_notes.rst:9454
msgid "Fixed an issue with the :class:`~qiskit.transpiler.passes.BasisTranslator` transpiler pass which in some cases would translate gates already in the target basis. This would potentially result in both longer execution time and less optimal results. Fixed `#6085 <https://github.com/Qiskit/qiskit-terra/issues/6085>`__"
msgstr ""

#: ../../release_notes.rst:9460
msgid "Fixed an issue in the :class:`~qiskit.algorithms.optimisers.SPSA` when the optimizer was initialized with a callback function via the ``callback`` kwarg would potentially cause an error to be raised."
msgstr ""

#: ../../release_notes.rst:9464
msgid "Fixed an issue in the :meth:`qiskit.quantum_info.Statevector.expectation_value` and :meth:`qiskit.quantum_info.DensityMatrix.expectation_value`methods where the ``qargs`` kwarg was ignored if the operator was a :class:`~qiskit.quantum_info.Pauli` or :class:`~qiskit.quantum_info.SparsePauliOp` operator object. Fixed `#6303 <https://github.com/Qiskit/qiskit-terra/issues/6303>`__"
msgstr ""

#: ../../release_notes.rst:9472
msgid "Fixed an issue in the :meth:`qiskit.quantum_info.Pauli.evolve` method which could have resulted in the incorrect Pauli being returned when evolving by a :class:`~qiskit.circuit.library.CZGate`, :class:`~qiskit.circuit.library.CYGate`, or a :class:`~qiskit.circuit.library.SwapGate` gate."
msgstr ""

#: ../../release_notes.rst:9478
msgid "Fixed an issue in the :meth:`qiskit.opflow.SparseVectorStateFn.to_dict_fn` method, which previously had at most one entry for the all zero state due to an index error."
msgstr ""

#: ../../release_notes.rst:9482
msgid "Fixed an issue in the :meth:`qiskit.opflow.SparseVectorStateFn.equals` method so that is properly returning ``True`` or ``False`` instead of a sparse vector comparison of the single elements."
msgstr ""

#: ../../release_notes.rst:9486
msgid "Fixes an issue in the :class:`~qiskit.quantum_info.Statevector` and :class:`~qiskit.quantum_info.DensityMatrix` probability methods :meth:`qiskit.quantum_info.Statevector.probabilities`, :meth:`qiskit.quantum_info.Statevector.probabilities_dict`, :meth:`qiskit.quantum_info.DensityMatrix.probabilities`, :meth:`qiskit.quantum_info.DensityMatrix.probabilities_dict` where the returned probabilities could have incorrect ordering for certain values of the ``qargs`` kwarg. Fixed `#6320 <https://github.com/Qiskit/qiskit-terra/issues/6320>`__"
msgstr ""

#: ../../release_notes.rst:9496
msgid "Fixed an issue where the :class:`~qiskit.opflow.TaperedPauliSumOp` class did not support the multiplication with :class:`~qiskit.circuit.ParameterExpression` object and also did not have a necessary :meth:`~qiskit.opflow.TaperedPauliSumOp.assign_parameters` method for working with :class:`~qiskit.circuit.ParameterExpression` objects. Fixed `#6127 <https://github.com/Qiskit/qiskit-terra/issues/6127>`__"
msgstr ""

#: ../../release_notes.rst:9504
msgid "Fixed compatibility for the :class:`~qiskit.utils.QuantumInstance` class when running on backends that are based on the :class:`~qiskit.providers.BackendV1` abstract class. Fixed `#6280 <https://github.com/Qiskit/qiskit-terra/issues/6280>`__"
msgstr ""

#: ../../release_notes.rst:9525 ../../release_notes.rst:9595
#: ../../release_notes.rst:9625
msgid "IBM Q Provider 0.12.3"
msgstr ""

#: ../../release_notes.rst:9531
msgid "Qiskit 0.25.3"
msgstr ""

#: ../../release_notes.rst:9534 ../../release_notes.rst:9605
#: ../../release_notes.rst:9642
msgid "Terra 0.17.1"
msgstr ""

#: ../../release_notes.rst:9570
msgid "Fixes a bug with the ``\"multiplexer\"`` simulator instruction where the order of target and control qubits was reversed to the order in the Qiskit instruction."
msgstr ""

#: ../../release_notes.rst:9602
msgid "Qiskit 0.25.2"
msgstr ""

#: ../../release_notes.rst:9610 ../../release_notes.rst:9717
msgid "Aer 0.8.1"
msgstr ""

#: ../../release_notes.rst:9637
msgid "Qiskit 0.25.1"
msgstr ""

#: ../../release_notes.rst:9649
msgid "This is a bugfix release that fixes several issues from the 0.17.0 release. Most importantly this release fixes the incorrectly constructed sdist package for the 0.17.0 release which was not actually buildable and was blocking installation on platforms without precompiled binaries available."
msgstr ""

#: ../../release_notes.rst:9659
msgid "Fixed an issue where the :attr:`~qiskit.circuit.QuantumCircuit.global_phase` attribute would not be preserved in the output :class:`~qiskit.circuit.QuantumCircuit` object when the :meth:`qiskit.circuit.QuantumCircuit.reverse_bits` method was called. For example::"
msgstr ""

#: ../../release_notes.rst:9679
msgid "will now correctly print :math:`\\pi`."
msgstr ""

#: ../../release_notes.rst:9681
msgid "Fixed an issue where the transpiler pass :class:`~qiskit.transpiler.passes.Unroller` didn't preserve global phase in case of nested instructions with one rule in their definition. Fixed `#6134 <https://github.com/Qiskit/qiskit-terra/issues/6134>`__"
msgstr ""

#: ../../release_notes.rst:9687
msgid "Fixed an issue where the :attr:`~qiskit.circuit.ControlledGate.parameter` attribute of a :class:`~qiskit.circuit.ControlledGate` object built from a :class:`~qiskit.extensions.UnitaryGate` was not being set to the unitary matrix of the :class:`~qiskit.extensions.UnitaryGate` object. Previously, :meth:`~qiskit.extensions.UnitaryGate.control` was building a :class:`~qiskit.circuit.ControlledGate` with the ``parameter`` attribute set to the controlled version of :class:`~qiskit.extensions.UnitaryGate` matrix. This would lead to a modification of the ``parameter`` of the base :class:`~qiskit.extensions.UnitaryGate` object and subsequent calls to :meth:`~qiskit.circuit.ControlledGate.inverse` was creating the inverse of a double-controlled :class:`~qiskit.extensions.UnitaryGate`. Fixed `#5750 <https://github.com/Qiskit/qiskit-terra/issues/5750>`__"
msgstr ""

#: ../../release_notes.rst:9701
msgid "Fixed an issue with the preset pass managers :class:`~qiskit.transpiler.preset_passmanagers.level_0_pass_manager` and :class:`~qiskit.transpiler.preset_passmanagers.level_1_pass_manager` (which corresponds to ``optimization_level`` 0 and 1 for :func:`~qiskit.compiler.transpile`) where in some cases they would produce circuits not in the requested basis."
msgstr ""

#: ../../release_notes.rst:9708
msgid "Fix a bug where using :class:`~qiskit.algorithms.optimizers.SPSA` with automatic calibration of the learning rate and perturbation (i.e. ``learning_rate`` and ``perturbation`` are ``None`` in the initializer), stores the calibration for all future optimizations. Instead, the calibration should be done for each new objective function."
msgstr ""

#: ../../release_notes.rst:9724
msgid "Fixed an issue with use of the ``matrix_product_state`` method of the :class:`~qiskit.providers.aer.AerSimulator` and :class:`~qiskit.providers.aer.QasmSimulator` simulators when running a noisy simulation with Kraus errors. Previously, the matrix product state simulation method would not propogate changes to neighboring qubits after applying the Kraus matrix. This has been fixed so the output from the simulation is correct. Fixed `#1184 <https://github.com/Qiskit/qiskit-aer/issues/1184>`__ and `#1205 <https://github.com/Qiskit/qiskit-aer/issues/1205>`__"
msgstr ""

#: ../../release_notes.rst:9734
msgid "Fixed an issue where the :class:`qiskit.extensions.Initialize` instruction would disable measurement sampling optimization for the ``statevector`` and ``matrix_product_state`` simulation methods of the :class:`~qiskit.providers.aer.AerSimulator` and :class:`~qiskit.providers.aer.QasmSimulator` simulators, even when it was the first circuit instruction or applied to all qubits and hence deterministic. Fixed `#1210 <https://github.com/Qiskit/qiskit-aer/issues/1210>`__"
msgstr ""

#: ../../release_notes.rst:9743
msgid "Fix an issue with the :class:`~qiskit.providers.aer.library.SaveStatevector` and :class:`~qiskit.providers.aer.extensions.SnapshotStatevector` instructions when used with the ``extended_stabilizer`` simulation method of the :class:`~qiskit.providers.aer.AerSimulator` and :class:`~qiskit.providers.aer.QasmSimulator` simulators where it would return an unnormalized statevector. Fixed `#1196 <https://github.com/Qiskit/qiskit-aer/issues/1210>`__"
msgstr ""

#: ../../release_notes.rst:9751
msgid "The ``matrix_product_state`` simulation method now has support for it's previously missing set state instruction, :class:`qiskit.providers.aer.library.SetMatrixProductState`, which enables setting the state of a simulation in a circuit."
msgstr ""

#: ../../release_notes.rst:9765 ../../release_notes.rst:12501
#: ../../release_notes.rst:12530
msgid "IBM Q Provider 0.12.2"
msgstr ""

#: ../../release_notes.rst:9771
msgid "Qiskit 0.25.0"
msgstr ""

#: ../../release_notes.rst:9773
msgid "This release officially deprecates the Qiskit Aqua project. Accordingly, in a future release the ``qiskit-aqua`` package will be removed from the Qiskit metapackage, which means in that future release ``pip install qiskit`` will no longer include ``qiskit-aqua``. The application modules that are provided by qiskit-aqua have been split into several new packages: ``qiskit-optimization``, ``qiskit-nature``, ``qiskit-machine-learning``, and ``qiskit-finance``. These packages can be installed by themselves (via the standard pip install command, e.g. ``pip install qiskit-nature``) or with the rest of the Qiskit metapackage as optional extras (e.g. ``pip install 'qiskit[finance,optimization]'`` or ``pip install 'qiskit[all]'`` The core algorithms and the operator flow now exist as part of qiskit-terra at :mod:`qiskit.algorithms` and :mod:`qiskit.opflow`. Depending on your existing usage of Aqua you should either use the application packages or the new modules in Qiskit Terra. For more details on how to migrate from Qiskit Aqua you can refer to the :ref:`aqua-migration`."
msgstr ""

#: ../../release_notes.rst:9792
msgid "Terra 0.17.0"
msgstr ""

#: ../../release_notes.rst:9799
msgid "The Qiskit Terra 0.17.0 includes many new features and bug fixes. The major new feature for this release is the introduction of the :mod:`qiskit.algorithms` and :mod:`qiskit.opflow` modules which were migrated and adapted from the :mod:`qiskit.aqua` project."
msgstr ""

#: ../../release_notes.rst:9810
msgid "The :py:func:`qiskit.pulse.call` function can now take a :class:`~qiskit.circuit.Parameter` object along with a parameterized subroutine. This enables assigning different values to the :class:`~qiskit.circuit.Parameter` objects for each subroutine call."
msgstr ""

#: ../../release_notes.rst:9815 ../../release_notes.rst:15879
msgid "For example,"
msgstr ""

#: ../../release_notes.rst:9831
msgid "The :class:`qiskit.providers.models.QasmBackendConfiguration` has a new field ``processor_type`` which can optionally be used to provide information about a backend's processor in the form: ``{\"family\": <str>, \"revision\": <str>, segment: <str>}``. For example: ``{\"family\": \"Canary\", \"revision\": \"1.0\", segment: \"A\"}``."
msgstr ""

#: ../../release_notes.rst:9837
msgid "The :py:class:`qiskit.pulse.Schedule`, :py:class:`qiskit.pulse.Instruction`, and :py:class:`qiskit.pulse.Channel` classes now have a :attr:`~qiiskit.pulse.Schedule.parameter` property which will return any :class:`~qiskit.circuit.Parameter` objects used in the object and a :meth:`~qiskit.pulse.Schedule.is_parameterized()` method which will return ``True`` if any parameters are used in the object."
msgstr ""

#: ../../release_notes.rst:9860
msgid "Added a :class:`~qiskit.circuit.library.PiecewiseChebyshev` to the :mod:`qiskit.circuit.library` for implementing a piecewise Chebyshev approximation of an input function. For a given function :math:`f(x)` and degree :math:`d`, this class class implements a piecewise polynomial Chebyshev approximation on :math:`n` qubits to :math:`f(x)` on the given intervals. All the polynomials in the approximation are of degree :math:`d`."
msgstr ""

#: ../../release_notes.rst:9883
msgid "The :py:class:`~qiskit.providers.models.BackendProperties` class now has a :meth:`~qiskit.providers.models.BackendProperties.readout_length` method, which returns the readout length [sec] of the given qubit."
msgstr ""

#: ../../release_notes.rst:9887
msgid "A new class, :py:class:`~qiskit.pulse.ScheduleBlock`, has been added to the :class:`qiskit.pulse` module. This class provides a new representation of a pulse program. This representation is best suited for the pulse builder syntax and is based on relative instruction ordering."
msgstr ""

#: ../../release_notes.rst:9892
msgid "This representation takes ``alignment_context`` instead of specifying starting time ``t0`` for each instruction. The start time of instruction is implicitly allocated with the specified transformation and relative position of instructions."
msgstr ""

#: ../../release_notes.rst:9897
msgid "The :py:class:`~qiskit.pulse.ScheduleBlock` allows for lazy instruction scheduling, meaning we can assign arbitrary parameters to the duration of instructions."
msgstr ""

#: ../../release_notes.rst:9916
msgid "this code defines an experiment scanning a Gaussian pulse's duration followed by a measurement ``measure_sched``, i.e. a Rabi experiment. You can reuse the ``block`` object for every scanned duration by assigning a target duration value."
msgstr ""

#: ../../release_notes.rst:9921
msgid "Added a new function :func:`~qiskit.visualization.array_to_latex` to the :mod:`qiskit.visualization` module that can be used to represent and visualize vectors and matrices with LaTeX."
msgstr ""

#: ../../release_notes.rst:9933
msgid "The :class:`~qiskit.quantum_info.Statevector` and :class:`~qiskit.quantum_info.DensityMatrix` classes now have :meth:`~qiskit.quantum_info.Statevector.draw` methods which allow objects to be drawn as either text matrices, IPython Latex objects, Latex source, Q-spheres, Bloch spheres and Hinton plots. By default the output type is the equivalent output from ``__repr__`` but this default can be changed in a user config file by setting the ``state_drawer`` option. For example:"
msgstr ""

#: ../../release_notes.rst:9953
msgid "Additionally, the :meth:`~qiskit.quantum_info.DensityMatrix.draw` method is now used for the ipython display of these classes, so if you change the default output type in a user config file then when a :class:`~qiskit.quantum_info.Statevector` or a :class:`~qiskit.quantum_info.DensityMatrix` object are displayed in a jupyter notebook that output type will be used for the object."
msgstr ""

#: ../../release_notes.rst:9960
msgid "Pulse :class:`qiskit.pulse.Instruction` objects and parametric pulse objects (eg :class:`~qiskit.pulse.library.Gaussian` now support using :class:`~qiskit.circuit.Parameter` and :class:`~qiskit.circuit.ParameterExpression` objects for the ``duration`` parameter. For example:"
msgstr ""

#: ../../release_notes.rst:9976
msgid "Note that while we can create an instruction with a parameterized ``duration`` adding an instruction with unbound parameter ``duration`` to a schedule is supported only by the newly introduced representation :class:`~qiskit.pulse.ScheduleBlock`. See the known issues release notes section for more details."
msgstr ""

#: ../../release_notes.rst:9982
msgid "The :meth:`~qiskit.providers.basicaer.QasmSimulatorPy.run` method for the :class:`~qiskit.providers.basicaer.QasmSimulatorPy`, :class:`~qiskit.providers.basicaer.StatevectorSimulatorPy`, and :class:`~qiskit.providers.basicaer.UnitarySimulatorPy` backends now takes a :class:`~qiskit.circuit.QuantumCircuit` (or a list of :class:`~qiskit.circuit.QuantumCircuit` objects) as its input. The previous :class:`~qiskit.qobj.QasmQobj` object is still supported for now, but will be deprecated in a future release."
msgstr ""

#: ../../release_notes.rst:9991 ../../release_notes.rst:12053
msgid "For an example of how to use this see::"
msgstr ""

#: ../../release_notes.rst:10007
msgid "The :class:`~qiskit.transpiler.passes.CommutativeCancellation` transpiler pass has a new optional kwarg on the constructor ``basis_gates``, which takes the a list of the names of basis gates for the target backend. When specified the pass will only use gates in the ``basis_gates`` kwarg. Previously, the pass would automatically replace consecutive gates which commute with :class:`~qiskit.circuit.library.ZGate` with the :class:`~qiskit.circuit.library.U1Gate` unconditionally. The ``basis_gates`` kwarg enables you to specify which z-rotation gates are present in the target basis to avoid this."
msgstr ""

#: ../../release_notes.rst:10017
msgid "The constructors of the :class:`~qiskit.circuit.Bit` class and subclasses, :class:`~qiskit.circuit.Qubit`, :class:`~qiskit.circuit.Clbit`, and :class:`~qiskit.circuit.AncillaQubit`, have been updated such that their two parameters, ``register`` and ``index`` are now optional. This enables the creation of bit objects that are independent of a register."
msgstr ""

#: ../../release_notes.rst:10023
msgid "A new class, :class:`~qiskit.circuit.classicalfunction.BooleanExpression`, has been added to the :mod:`qiskit.circuit.classicalfunction` module. This class allows for creating an oracle from a Python boolean expression. For example:"
msgstr ""

#: ../../release_notes.rst:10041
msgid "The :class:`~qiskit.circuit.classicalfunction.BooleanExpression` also includes a method, :meth:`~qiskit.circuit.classicalfunction.BooleanExpression.from_dimacs_file`, which allows loading formulas described in the `DIMACS-CNF <https://people.sc.fsu.edu/~jburkardt/data/cnf/cnf.html>`__ format. For example:"
msgstr ""

#: ../../release_notes.rst:10084
msgid "Added a new class, :class:`~qiskit.circuit.library.PhaseOracle`, has been added to the :mod:`qiskit.circuit.library` module. This class enables the construction of phase oracle circuits from Python boolean expressions."
msgstr ""

#: ../../release_notes.rst:10095
msgid "These phase oracles can be used as part of a larger algorithm, for example with :class:`qiskit.algorithms.AmplificationProblem`:"
msgstr ""

#: ../../release_notes.rst:10110
msgid "The :class:`~qiskit.circuit.library.PhaseOracle` class also includes a :meth:`~qiskit.circuit.library.PhaseOracle.from_dimacs_file` method which enables constructing a phase oracle from a file describing a formula in the `DIMACS-CNF <https://people.sc.fsu.edu/~jburkardt/data/cnf/cnf.html>`__ format."
msgstr ""

#: ../../release_notes.rst:10132
msgid "All transpiler passes (ie any instances of :class:`~qiskit.transpiler.BasePass`) are now directly callable. Calling a pass provides a convenient interface for running the pass on a :class:`~qiskit.circuit.QuantumCircuit` object."
msgstr ""

#: ../../release_notes.rst:10137
msgid "For example, running a single transformation pass, such as :class:`~qiskit.transpiler.passes.BasisTranslator`, can be done with:"
msgstr ""

#: ../../release_notes.rst:10153
msgid "When running an analysis pass, a property set (as ``dict`` or as :class:`~qiskit.transpiler.PropertySet`) needs to be added as a parameter and it might be modified \"in-place\". For example:"
msgstr ""

#: ../../release_notes.rst:10171
msgid "The :class:`~qiskit.qobj.QasmQobjConfig` class now has an optional kwarg for ``meas_level`` and ``meas_return``. These fields can be used to enable generating :class:`~qiskit.qobj.QasmQobj` job payloads that support ``meas_level=1`` (kerneled data) for circuit jobs (previously this was only exposed for :class:`~qiskit.qobj.PulseQobj` objects). The :func:`~qiskit.compiler.assemble` function has been updated to set this field for :class:`~qiskit.qobj.QasmQobj` objects it generates."
msgstr ""

#: ../../release_notes.rst:10180
msgid "A new :meth:`~qiskit.circuit.QuantumCircuit.tensor` method has been added to the :class:`~qiskit.circuit.QuantumCircuit` class. This method enables tensoring another circuit with an existing circuit. This method works analogously to :meth:`qiskit.quantum_info.Operator.tensor` and is consistent with the little-endian convention of Qiskit."
msgstr ""

#: ../../release_notes.rst:10198
msgid "The :class:`qiskit.circuit.QuantumCircuit` class now supports arbitrary free form metadata with the :attr:`~qiskit.circuit.QuantumCircuit.metadata` attribute. A user (or program built on top of :class:`~qiskit.circuit.QuantumCircuit`) can attach metadata to a circuit for use in tracking the circuit. For example::"
msgstr ""

#: ../../release_notes.rst:10217
msgid "This metadata will **not** be used for influencing the execution of the circuit but is just used for tracking the circuit for the lifetime of the object. The ``metadata`` attribute will persist between any circuit transforms including :func:`~qiskit.compiler.transpile` and :func:`~qiskit.compiler.assemble`. The expectation is for providers to associate the metadata in the result it returns, so that users can filter results based on circuit metadata the same way they can currently do with ``QuantumCircuit.name``."
msgstr ""

#: ../../release_notes.rst:10226
msgid "Add a new operator class :class:`~qiskit.quantum_info.CNOTDihedral` has been added to the :mod:`qiskit.quantum_info` module. This class is used to represent the CNOT-Dihedral group, which is generated by the quantum gates :class:`~qiskit.circuit.library.CXGate`, :class:`~qiskit.circuit.library.TGate`, and :class:`~qiskit.circuit.library.XGate`."
msgstr ""

#: ../../release_notes.rst:10233
msgid "Adds a ``&`` (``__and__``) binary operator to ``BaseOperator`` subclasses (eg :class:`qiskit.quantum_info.Operator`) in the :mod:`qiskit.quantum_info` module. This is shorthand to call the classes :meth:`~qiskit.quantum_info.Operator.compose` method (ie ``A & B == A.compose(B)``)."
msgstr ""

#: ../../release_notes.rst:10247
msgid "Adds a ``&`` (``__and__``) binary operator to :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes. This is shorthand to call the classes :meth:`~qiskit.quantum_info.Statevector.evolve` method (ie ``psi & U == psi.evolve(U)``)."
msgstr ""

#: ../../release_notes.rst:10261
msgid "A new a new 2-qubit gate, :class:`~qiskit.circuit.library.ECRGate`, the echo cross-resonance (ECR), has been added to the :mod:`qiskit.circuit.library` module along with a corresponding method, :meth:`~qiskit.circuit.QuantumCircuit.ecr` for the :class:`~qiskit.circuit.QuantumCircuit` class. The ECR gate is two :math:`CR(\\frac{π}{4})` pulses with an :class:`~qiskit.circuit.library.XGate` between them for the echo. This gate is locally equivalent to a :class:`~qiskit.circuit.library.CXGate` (can convert to a CNOT with local pre- or post-rotation). It is the native gate on current IBM hardware and compiling to it allows the pre-/post-rotations to be merged into the rest of the circuit."
msgstr ""

#: ../../release_notes.rst:10273
msgid "A new kwarg ``approximation_degree`` has been added to the :func:`~qiskit.compiler.transpile` function for enabling approximate compilation. Valid values range from 0 to 1, and higher means less approximation. This is a heuristic dial to experiment with circuit approximations. The concrete interpretation of this number is left to each pass, which may use it to perform some approximate version of the pass. Specific examples include the :class:`~qiskit.transpiler.passes.UnitarySynthesis` pass or the or translators to discrete gate sets. If a pass does not support this option, it implies exact transformation."
msgstr ""

#: ../../release_notes.rst:10284
msgid "Two new transpiler passess, :class:`~qiskit.transpiler.passes.GateDirection` and :class:`qiskit.transpiler.passes.CheckGateDirection`, were added to the :mod:`qiskit.transpiler.passes` module. These new passes are inteded to be more general replacements for :class:`~qiskit.transpiler.passes.CXDirection` and :class:`~qiskit.transpiler.passes.CheckCXDirection` (which are both now deprecated, see the deprecation notes for more details) that perform the same function but work with other gates beside just :class:`~qiskit.circuit.library.CXGate`."
msgstr ""

#: ../../release_notes.rst:10294
msgid "When running on Windows, parallel execution with the :func:`~qiskit.tools.parallel_map` function can now be enabled (it is still disabled by default). To do this you can either set ``parallel = True`` in a user config file, or set the ``QISKIT_PARALLEL`` environment variable to ``TRUE`` (this will also effect :func:`~qiskit.compiler.transpile` and :func:`~qiskit.compiler.assemble` which both use :func:`~qiskit.tools.parallel_map` internally). It is important to note that when enabling parallelism on Windows there are limitations around how Python launches processes for Windows, see the Known Issues section below for more details on the limitations with parallel execution on Windows."
msgstr ""

#: ../../release_notes.rst:10306
msgid "A new function, :func:`~qiskit.quantum_info.hellinger_distance`, for computing the Hellinger distance between two counts distributions has been added to the :mod:`qiskit.quantum_info` module."
msgstr ""

#: ../../release_notes.rst:10310
msgid "The :func:`~qiskit.quantum_info.decompose_clifford` function in the :mod:`qiskit.quantum_info` module (which gets used internally by the :meth:`qiskit.quantum_info.Clifford.to_circuit` method) has a new kwarg ``method`` which enables selecting the synthesis method used by either setting it to ``'AG'`` or ``'greedy'``. By default for more than three qubits it is set to ``'greedy'`` which uses a non-optimal greedy compilation routine for Clifford elements synthesis, by Bravyi et. al., which typically yields better CX cost compared to the previously used Aaronson-Gottesman method (for more than two qubits). You can use the ``method`` kwarg to revert to the previous default Aaronson-Gottesman method by setting ``method='AG'``."
msgstr ""

#: ../../release_notes.rst:10321
msgid "The :class:`~qiskit.extensions.Initialize` class in the :mod:`qiskit.extensions` module can now be constructed using an integer. The '1' bits of the integer will insert a :class:`~qiskit.circuit.Reset` and an :class:`~qiskit.circuit.library.XGate` into the circuit for the corresponding qubit. This will be done using the standard little-endian convention is qiskit, ie the rightmost bit of the integer will set qubit 0. For example, setting the parameter in :class:`~qiskit.extensions.Initialize` equal to ``5`` will set qubits 0 and 2 to value 1."
msgstr ""

#: ../../release_notes.rst:10338
msgid "The :class:`~qiskit.extensions.Initialize` class in the :mod:`qiskit.extensions` module now supports constructing directly from a Pauli label (analogous to the :meth:`qiskit.quantum_info.Statevector.from_label` method). The Pauli label refer to basis states of the Pauli eigenstates Z, X, Y. These labels use Qiskit's standard little-endian notation, for example a label of ``'01'`` would initialize qubit 0 to :math:`|1\\rangle` and qubit 1 to :math:`|0\\rangle`."
msgstr ""

#: ../../release_notes.rst:10354
msgid "The kwarg, ``template_list``, for the constructor of the :class:`qiskit.transpiler.passes.TemplateOptimization` transpiler pass now supports taking in a list of both :class:`~qiskit.circuit.QuantumCircuit` and :class:`~qiskit.dagcircuit.DAGDependency` objects. Previously, only :class:`~qiskit.circuit.QuantumCircuit` were accepted (which were internally converted to :class:`~qiskit.dagcircuit.DAGDependency` objects) in the input list."
msgstr ""

#: ../../release_notes.rst:10363
msgid "A new transpiler pass, :py:class:`qiskit.transpiler.passes.RZXCalibrationBuilder`, capable of generating calibrations and adding them to a quantum circuit has been introduced. This pass takes calibrated :class:`~qiskit.circuit.library.CXGate` objects and creates the calibrations for :class:`qiskit.circuit.library.RZXGate` objects with an arbitrary rotation angle. The schedules are created by stretching and compressing the :class:`~qiskit.pulse.GaussianSquare` pulses of the echoed-cross resonance gates."
msgstr ""

#: ../../release_notes.rst:10373
msgid "New template circuits for using :class:`qiskit.circuit.library.RZXGate` are added to the :mod:`qiskit.circuit.library` module (eg :class:`~qiskit.circuit.library.rzx_yz`). This enables pairing the :class:`~qiskit.transpiler.passes.TemplateOptimization` pass with the :py:class:`qiskit.transpiler.passes.RZXCalibrationBuilder` pass to automatically find and replace gate sequences, such as ``CNOT - P(theta) - CNOT``, with more efficent circuits based on :class:`qiskit.circuit.library.RZXGate` with a calibration."
msgstr ""

#: ../../release_notes.rst:10382
msgid "The matplotlib output type for the :func:`~qiskit.visualization.circuit_drawer` and the :meth:`~qiskit.circuit.QuantumCircuit.draw` method for the :class:`~qiskit.circuit.QuantumCircuit` class now supports configuration files for setting the visualization style. In previous releases, there was basic functionality that allowed users to pass in a ``style`` kwarg that took in a ``dict`` to customize the colors and other display features of the ``mpl`` drawer. This has now been expanded so that these dictionaries can be loaded from JSON files directly without needing to pass a dictionary. This enables users to create new style files and use that style for visualizations by passing the style filename as a string to the ``style`` kwarg."
msgstr ""

#: ../../release_notes.rst:10395
msgid "To leverage this feature you must set the ``circuit_mpl_style_path`` option in a user config file. This option should be set to the path you want qiskit to search for style JSON files. If specifying multiple path entries they should be separated by ``:``. For example, setting ``circuit_mpl_style_path = ~/.qiskit:~/user_styles`` in a user config file will look for JSON files in both ``~/.qiskit`` and ``~/user_styles``."
msgstr ""

#: ../../release_notes.rst:10402
msgid "A new kwarg, ``format_marginal`` has been added to the function :func:`~qiskit.result.utils.marginal_counts` which when set to ``True`` formats the counts output according to the :attr:`~qiskit.circuit.QuantumCircuit.cregs` in the circuit and missing indices are represented with a ``_``. For example:"
msgstr ""

#: ../../release_notes.rst:10419
msgid "Improved the performance of :meth:`qiskit.quantum_info.Statevector.expectation_value`  and :meth:`qiskit.quantum_info.DensityMatrix.expectation_value` when the argument operator is a :class:`~qiskit.quantum_info.Pauli`  or :class:`~qiskit.quantum_info.SparsePauliOp`  operator."
msgstr ""

#: ../../release_notes.rst:10425
msgid "The user config file has 2 new configuration options, ``num_processes`` and ``parallel``, which are used to control the default behavior of :func:`~qiskit.tools.parallel_map`. The ``parallel`` option is a boolean that is used to dictate whether :func:`~qiskit.tools.parallel_map` will run in multiple processes or not. If it set to ``False`` calls to :func:`~qiskit.tools.parallel_map` will be executed serially, while setting it to ``True`` will enable parallel execution. The ``num_processes`` option takes an integer which sets how many CPUs to use when executing in parallel. By default it will use the number of CPU cores on a system."
msgstr ""

#: ../../release_notes.rst:10435
msgid "There are 2 new environment variables, ``QISKIT_PARALLEL`` and ``QISKIT_NUM_PROCS``, that can be used to control the default behavior of :func:`~qiskit.tools.parallel_map`. The ``QISKIT_PARALLEL`` option can be set to the ``TRUE`` (any capitalization) to set the default to run in multiple processes when :func:`~qiskit.tools.parallel_map` is called. If it is set to any other value :func:`~qiskit.tools.parallel_map` will be executed serially. ``QISKIT_NUM_PROCS`` takes an integer (for example ``QISKIT_NUM_PROCS=5``) which will be used as the default number of processes to run with. Both of these will take precedence over the equivalent option set in the user config file."
msgstr ""

#: ../../release_notes.rst:10447
msgid "A new method, :meth:`~qiskit.circuit.ParameterExpression.gradient`, has been added to the :class:`~qiskit.circuit.ParameterExpression` class. This method is used to  evaluate the gradient of a :class:`~qiskit.circuit.ParameterExpression` object."
msgstr ""

#: ../../release_notes.rst:10452
msgid "The ``__eq__`` method (ie what is called when the ``==`` operator is used) for the :class:`~qiskit.circuit.ParameterExpression` now allows for the comparison with a numeric value. Previously, it was only possible to compare two instances of :class:`~qiskit.circuit.ParameterExpression` with ``==``. For example::"
msgstr ""

#: ../../release_notes.rst:10466
msgid "The :class:`~qiskit.circuit.library.PauliFeatureMap` class in the :mod:`qiskit.circuit.library` module now supports adjusting the rotational factor, :math:`\\alpha`, by either setting using the kwarg ``alpha`` on the constructor or setting the :attr:`~qiskit.circuit.library.PauliFeatureMap.alpha` attribute after creation. Previously this value was fixed at ``2.0``. Adjusting this attribute allows for better control of decision boundaries and provides additional flexibility handling the input features without needing to explicitly scale them in the data set."
msgstr ""

#: ../../release_notes.rst:10476
msgid "A new :class:`~qiskit.circuit.Gate` class, :class:`~qiskit.circuit.library.PauliGate`, has been added the :class:`qiskit.circuit.library` module and corresponding method, :meth:`~qiskit.circuit.QuantumCircuit.pauli`,  was added to the :class:`~qiskit.circuit.QuantumCircuit` class. This new gate class enables applying several individual pauli gates to different qubits at the simultaneously. This is primarily useful for simulators which can use this new gate to more efficiently implement multiple simultaneous Pauli gates."
msgstr ""

#: ../../release_notes.rst:10485
msgid "Improve the :class:`qiskit.quantum_info.Pauli` operator. This class now represents and element from the full N-qubit Pauli group including complex coefficients. It now supports the Operator API methods including :meth:`~qiskit.quantum_info.Pauli.compose`, :meth:`~qiskit.quantum_info.Pauli.dot`, :meth:`~qiskit.quantum_info.Pauli.tensor` etc, where compose and dot are defined with respect to the full Pauli group."
msgstr ""

#: ../../release_notes.rst:10493
msgid "This class also allows conversion to and from the string representation of Pauli's for convenience."
msgstr ""

#: ../../release_notes.rst:10506
msgid "Pauli's can also be directly appended to :class:`~qiskit.circuit.QuantumCircuit` objects"
msgstr ""

#: ../../release_notes.rst:10518
msgid "Additional methods allow computing when two Pauli's commute (using the :meth:`~qiskit.quantum_info.Pauli.commutes` method) or anticommute (using the :meth:`~qiskit.quantum_info.Pauli.anticommutes` method), and computing the Pauli resulting from Clifford conjugation :math:`P^\\prime = C.P.C^\\dagger` using the  :meth:`~qiskit.quantum_info.Pauli.evolve` method."
msgstr ""

#: ../../release_notes.rst:10525
msgid "See the API documentation of the :class:`~qiskit.quantum_info.Pauli` class for additional information."
msgstr ""

#: ../../release_notes.rst:10528
msgid "A new function, :func:`~qiskit.quantum_info.random_pauli`, for generating a random element of the N-qubit Pauli group has been added to the :mod:`qiskit.quantum_info` module."
msgstr ""

#: ../../release_notes.rst:10532
msgid "A new class, :class:`~qiskit.circuit.library.PiecewisePolynomialPauliRotations`, has been added to the :mod:`qiskit.circuit.library` module. This circuit library element is used for mapping a piecewise polynomial function, :math:`f(x)`, which is defined through breakpoints and coefficients, on qubit amplitudes. The breakpoints :math:`(x_0, ..., x_J)` are a subset of :math:`[0, 2^n-1]`, where :math:`n` is the number of state qubits. The corresponding coefficients :math:`[a_{j,1},...,a_{j,d}]`, where :math:`d` is the highest degree among all polynomials. Then :math:`f(x)` is defined as:"
msgstr ""

#: ../../release_notes.rst:10542
msgid "f(x) = \\begin{cases}\n"
"    0, x < x_0 \\\\\n"
"    \\sum_{i=0}^{i=d}a_{j,i} x^i, x_j \\leq x < x_{j+1}\n"
"    \\end{cases}"
msgstr ""

#: ../../release_notes.rst:10549
msgid "where we implicitly assume :math:`x_{J+1} = 2^n`. And the mapping applied to the amplitudes is given by"
msgstr ""

#: ../../release_notes.rst:10552
msgid "F|x\\rangle |0\\rangle = \\cos(p_j(x))|x\\rangle |0\\rangle + \\sin(p_j(x))|x\\rangle |1\\rangle"
msgstr ""

#: ../../release_notes.rst:10556
msgid "This mapping is based on controlled Pauli Y-rotations and constructed using the :class:`~qiskit.circuit.library.PolynomialPauliRotations`."
msgstr ""

#: ../../release_notes.rst:10559
msgid "A new module :mod:`qiskit.algorithms` has been introduced. This module contains functionality equivalent to what has previously been provided by the :mod:`qiskit.aqua.algorithms` module (which is now deprecated) and provides the building blocks for constructing quantum algorithms. For details on migrating from ``qiskit-aqua`` to this new module please refer to the migration guide :ref:`aqua-migration`"
msgstr ""

#: ../../release_notes.rst:10566
msgid "A new module :mod:`qiskit.opflow` has been introduced. This module contains functionality equivalent to what has previously been provided by the :mod:`qiskit.aqua.operators` module (which is now deprecated) and provides the operators and state functions which are used to build quantum algorithms. For details on migrating from ``qiskit-aqua`` to this new module please refer to the migration guide :ref:`aqua-migration`"
msgstr ""

#: ../../release_notes.rst:10574
msgid "This is the first release that includes precompiled binary wheels for the for Linux aarch64 systems. If you are running a manylinux2014 compatible aarch64 Linux system there are now precompiled wheels available on PyPI, you are no longer required to build from source to install qiskit-terra."
msgstr ""

#: ../../release_notes.rst:10580
msgid "The :func:`qiskit.quantum_info.process_fidelity` function is now able to be used with a non-unitary target channel. In this case the returned value is equivalent to the :func:`qiskit.quantum_info.state_fidelity` of the normalized :class:`qiskit.quantum_info.Choi` matrices for the channels."
msgstr ""

#: ../../release_notes.rst:10585
msgid "Note that the :func:`qiskit.quantum_info.average_gate_fidelity` and :func:`qiskit.quantum_info.gate_error` functions still require the target channel to be unitary and will raise an exception if it is not."
msgstr ""

#: ../../release_notes.rst:10589
msgid "Added a new pulse builder function, :func:`qiskit.pulse.macro`. This enables normal Python functions to be decorated as macros. This enables pulse builder functions to be used within the decorated function. The builder macro can then be called from within a pulse building context, enabling code reuse."
msgstr ""

#: ../../release_notes.rst:10595 ../../release_notes.rst:19892
msgid "For Example:"
msgstr ""

#: ../../release_notes.rst:10615
msgid "A new class, :class:`~qiskit.circuit.library.PauliTwoDesign`, was added to the :mod:`qiskit.circuit.library` which implements a particular form of a 2-design circuit from https://arxiv.org/pdf/1803.11173.pdf For instance, this circuit can look like:"
msgstr ""

#: ../../release_notes.rst:10626
msgid "A new pulse drawer :func:`qiskit.visualization.pulse_v2.draw` (which is aliased as ``qiskit.visualization.pulse_drawer_v2``) is now available. This new pulse drawer supports multiple new features not present in the original pulse drawer (:func:`~qiskit.visualization.pulse_drawer`)."
msgstr ""

#: ../../release_notes.rst:10632
msgid "Truncation of long pulse instructions."
msgstr ""

#: ../../release_notes.rst:10633
msgid "Visualization of parametric pulses."
msgstr ""

#: ../../release_notes.rst:10634
msgid "New stylesheets ``IQXStandard``, ``IQXSimple``, ``IQXDebugging``."
msgstr ""

#: ../../release_notes.rst:10635
msgid "Visualization of system info (channel frequency, etc...) by specifying :class:`qiskit.providers.Backend` objects for visualization."
msgstr ""

#: ../../release_notes.rst:10637
msgid "Specifying ``axis`` objects for plotting to allow further extension of generated plots, i.e., for publication manipulations."
msgstr ""

#: ../../release_notes.rst:10640
msgid "New stylesheets can take callback functions that dynamically modify the apperance of the output image, for example, reassembling a collection of channels, showing details of instructions, updating appearance of pulse envelopes, etc... You can create custom callback functions and feed them into a stylesheet instance to modify the figure appearance without modifying the drawer code. See pulse drawer module docstrings for details."
msgstr ""

#: ../../release_notes.rst:10647
msgid "Note that file saving is now delegated to Matplotlib. To save image files, you need to call ``savefig`` method with returned ``Figure`` object."
msgstr ""

#: ../../release_notes.rst:10650
msgid "Adds a :meth:`~qiskit.quantum_info.Statevector.reverse_qargs` method to the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes. This method reverses the order of subsystems in the states and is equivalent to the :meth:`qiskit.circuit.QuantumCircuit.reverse_bits` method for N-qubit states. For example:"
msgstr ""

#: ../../release_notes.rst:10669
msgid "Adds a :meth:`~qiskit.quantum_info.Operator.reverse_qargs` method to the :class:`qiskit.quantum_info.Operator` class. This method reverses the order of subsystems in the operator and is equivalent to the :meth:`qiskit.circuit.QuantumCircuit.reverse_bits` method for N-qubit operators. For example:"
msgstr ""

#: ../../release_notes.rst:10687
msgid "The ``latex`` output method for the :func:`qiskit.visualization.circuit_drawer` function and the :meth:`~qiskit.circuit.QuantumCircuit.draw` method now will use a user defined label on gates in the output visualization. For example::"
msgstr ""

#: ../../release_notes.rst:10702
msgid "The ``routing_method`` kwarg for the :func:`~qiskit.compiler.transpile` function now accepts a new option, ``'none'``. When ``routing_method='none'`` no routing pass will be run as part of the transpilation. If the circuit does not fit coupling map a :class:`~qiskit.transpiler.exceptions.TranspilerError` exception will be raised."
msgstr ""

#: ../../release_notes.rst:10709
msgid "A new gate class, :class:`~qiskit.circuit.library.RVGate`, was added to the :mod:`qiskit.circuit.library` module along with the corresponding :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.rv`. The :class:`~qiskit.circuit.library.RVGate` is a general rotation gate, similar to the :class:`~qiskit.circuit.library.UGate`, but instead of specifying Euler angles the three components of a rotation vector are specified where the direction of the vector specifies the rotation axis and the magnitude specifies the rotation angle about the axis in radians. For example::"
msgstr ""

#: ../../release_notes.rst:10733
msgid "Unbound :class:`~qiskit.circuit.Parameter` objects used in a :class:`~qiskit.circuit.QuantumCircuit` object will now be sorted by name. This will take effect for the parameters returned by the :attr:`~qiskit.circuit.QuantumCircuit.parameters` attribute. Additionally, the :meth:`qiskit.circuit.QuantumCircuit.bind_parameters` and :meth:`qiskit.circuit.QuantumCircuit.assign_parameters` methods can now take in a list of a values which will bind/assign them to the parameters in name-sorted order. Previously these methods would only take a dictionary of parameters and values. For example:"
msgstr ""

#: ../../release_notes.rst:10756
msgid "The constructors for the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes can now take a :class:`~qiskit.circuit.QuantumCircuit` object in to build a :class:`~qiskit.quantum_info.Statevector` and :class:`~qiskit.quantum_info.DensityMatrix` object from that circuit, assuming that the qubits are initialized in :math:`|0\\rangle`. For example:"
msgstr ""

#: ../../release_notes.rst:10775
msgid "New fake backend classes are available under ``qiskit.test.mock``. These included mocked versions of ``ibmq_casablanca``, ``ibmq_sydney``, ``ibmq_mumbai``, ``ibmq_lima``, ``ibmq_belem``, ``ibmq_quito``. As with the other fake backends, these include snapshots of calibration data (i.e. ``backend.defaults()``) and error data (i.e. ``backend.properties()``) taken from the real system, and can be used for local testing, compilation and simulation."
msgstr ""

#: ../../release_notes.rst:10789
msgid "Attempting to add an :class:`qiskit.pulse.Instruction` object with a parameterized ``duration`` (ie the value of ``duration`` is an unbound :class:`~qiskit.circuit.Parameter` or :class:`~qiskit.circuit.ParameterExpression` object) to a :class:`qiskit.pulse.Schedule` is not supported. Attempting to do so will result in ``UnassignedDurationError`` :class:`~qiskit.pulse.PulseError` being raised. This is a limitation of how the :class:`~qiskit.pulse.Instruction` overlap constraints are evaluated currently. This is supported by :class:`~qiskit.pulse.ScheduleBlock`, in which the overlap constraints are evaluated just before the execution."
msgstr ""

#: ../../release_notes.rst:10800
msgid "On Windows systems when parallel execution is enabled for :func:`~qiskit.tools.parallel_map` parallelism may not work when called from a script running outside of a ``if __name__ == '__main__':`` block. This is due to how Python launches parallel processes on Windows. If a ``RuntimeError`` or ``AttributeError`` are raised by scripts that call :func:`~qiskit.tools.parallel_map` (including using functions that use ``parallel_map()`` internally like :func:`~qiskit.compiler.transpile`) with Windows and parallelism enabled you can try embedding the script calls inside ``if __name__ == '__main__':`` to workaround the issue. For example::"
msgstr ""

#: ../../release_notes.rst:10824 ../../release_notes.rst:19953
msgid "should be changed to::"
msgstr ""

#: ../../release_notes.rst:10843
msgid "if any errors are encountered with parallelism on Windows."
msgstr ""

#: ../../release_notes.rst:10851
msgid "The preset pass managers :class:`~qiskit.transpiler.preset_passmanagers.level_1_pass_manager`, :class:`~qiskit.transpiler.preset_passmanagers.level_2_pass_manager`, and :class:`~qiskit.transpiler.preset_passmanagers.level_3_pass_manager` (which are used for ``optimization_level`` 1, 2, and 3 in the :func:`~qiskit.compiler.transpile` and :func:`~qiskit.execute_function.execute` functions) now unconditionally use the :class:`~qiskit.transpiler.passes.Optimize1qGatesDecomposition` pass for 1 qubit gate optimization. Previously, these pass managers would use the :class:`~qiskit.transpiler.passes.Optimize1qGates` pass if the basis gates contained ``u1``, ``u2``, or ``u3``. If you want to still use the old :class:`~qiskit.transpiler.passes.Optimize1qGates` you will need to construct a custom :class:`~qiskit.transpiler.PassManager` with the pass."
msgstr ""

#: ../../release_notes.rst:10866
msgid "Following transpilation of a parameterized :class:`~qiskit.circuit.QuantumCircuit`, the :attr:`~qiskit.circuit.QuantumCircuit.global_phase` attribute of output circuit may no longer be returned in a simplified form, if the global phase is a :class:`~qiskit.circuit.ParameterExpression`."
msgstr ""

#: ../../release_notes.rst:10882
msgid "previously returned ``0``, but will now return ``-0.5*theta + 0.5*theta``. This change was necessary was to avoid a large runtime performance penalty as simplifying symbolic expressions can be quite slow, especially if there are many :class:`~qiskit.circuit.ParameterExpression` objects in a circuit."
msgstr ""

#: ../../release_notes.rst:10888
msgid "The :class:`~qiskit.providers.basicaer.BasicAerJob` job objects returned from BasicAer backends are now synchronous instances of :class:`~qiskit.providers.JobV1`. This means that calls to the :meth:`~qiskit.providers.basicaer.QasmSimulatorPy.run` will block until the simulation finishes executing. If you want to restore the previous async behavior you'll need to wrap the :meth:`~qiskit.providers.basicaer.QasmSimulatorPy.run` with something that will run in a seperate thread or process like ``futures.ThreadPoolExecutor`` or ``futures.ProcessPoolExecutor``."
msgstr ""

#: ../../release_notes.rst:10898
msgid "The ``allow_sample_measuring`` option for the BasicAer simulator :class:`~qiskit.providers.basicaer.QasmSimulatorPy` has changed from a default of ``False`` to ``True``. This was done to better reflect the actual default behavior of the simulator, which would use sample measuring if the input circuit supported it (even if it was not enabled). If you are running a circuit that doesn't support sample measurement (ie it has :class:`~qiskit.circuit.Reset` operations or if there are operations after a measurement on a qubit) you should make sure to explicitly set this option to ``False`` when you call :meth:`~qiskit.providers.basicaer.QasmSimulatorPy.run`."
msgstr ""

#: ../../release_notes.rst:10909
msgid "The :class:`~qiskit.transpiler.passes.CommutativeCancellation` transpiler pass is now aware of the target basis gates, which means it will only use gates in the specified basis. Previously, the pass would unconditionally replace consecutive gates which commute with :class:`~qiskit.circuit.library.ZGate` with the :class:`~qiskit.circuit.library.U1Gate`. However, now that the pass is basis aware and has a kwarg, ``basis_gates``, for specifying the target basis there is a potential change in behavior if the kwarg is not set. When the ``basis_gates`` kwarg is not used and there are no variable z-rotation gates in the circuit then no commutative cancellation will occur."
msgstr ""

#: ../../release_notes.rst:10920
msgid ":class:`~qiskit.circuit.Register` (which is the parent class for :class:`~qiskit.circuit.QuantumRegister` and :class:`~qiskit.circuit.ClassicalRegister` and :class:`~qiskit.circuit.Bit` (which is the parent class for :class:`~qiskit.circuit.Qubit` and :class:`~qiskit.circuit.Clbit`) objects are now immutable. In previous releases it was possible to adjust the value of a :attr:`~qiskit.circuit.QuantumRegister.size` or :attr:`~qiskit.circuit.QuantumRegister.name` attributes of a :class:`~qiskit.circuit.Register` object and the :attr:`~qiskit.circuit.Qubit.index` or :attr:`~qiskit.circuit.Qubit.register` attributes of a :class:`~qiskit.circuit.Bit` object after it was initially created. However this would lead to unsound behavior that would corrupt container structure that rely on a hash (such as a `dict`) since these attributes are treated as immutable properties of a register or bit (see `#4705 <https://github.com/Qiskit/qiskit-terra/issues/4705>`__ for more details). To avoid this unsound behavior this attributes of a :class:`~qiskit.circuit.Register` and :class:`~qiskit.circuit.Bit` are no longer settable after initial creation. If you were previously adjusting the objects at runtime you will now need to create a new ``Register`` or ``Bit`` object with the new values."
msgstr ""

#: ../../release_notes.rst:10942
msgid "The ``DAGCircuit.__eq__`` method (which is used by the ``==`` operator), which is used to check structural equality of :class:`~qiskit.dagcircuit.DAGCircuit` and :class:`~qiskit.circuit.QuantumCircuit` instances, will now include the :attr:`~qiskit.circuit.QuantumCircuit.global_phase` and :attr:`~qiskit.circuit.QuantumCircuit.calibrations` attributes in the fields checked for equality. This means that circuits which would have evaluated as equal in prior releases may not anymore if the ``global_phase`` or ``calibrations`` differ between the circuits. For example, in previous releases this would return ``True``::"
msgstr ""

#: ../../release_notes.rst:10965
msgid "However, now because the ``global_phase`` attribute of the circuits differ this will now return ``False``."
msgstr ""

#: ../../release_notes.rst:10968
msgid "The previously deprecated ``qubits()`` and ``clbits()`` methods on the :class:`~qiskit.dagcircuit.DAGCircuit` class, which were deprecated in the 0.15.0 Terra release, have been removed. Instead you should use the :attr:`~qiskit.dagcircuit.DAGCircuit.qubits` and :attr:`~qiskit.dagcircuit.DAGCircuit.clbits` attributes of the :class:`~qiskit.dagcircuit.DAGCircuit` class. For example, if you were running::"
msgstr ""

#: ../../release_notes.rst:10981
msgid "That would be replaced by::"
msgstr ""

#: ../../release_notes.rst:10988
msgid "The :class:`~qiskit.providers.models.PulseDefaults` returned by the fake pulse backends :py:class:`qiskit.test.mock.FakeOpenPulse2Q` and :py:class:`qiskit.test.mock.FakeOpenPulse3Q` have been updated to have more realistic pulse sequence definitions. If you are using these fake backend classes you may need to update your usage because of these changes."
msgstr ""

#: ../../release_notes.rst:10994
msgid "The default synthesis method used by :func:`~qiskit.quantum_info.decompose_clifford` function in the :mod:`~qiskit.quantum_info` module (which gets used internally by the :meth:`qiskit.quantum_info.Clifford.to_circuit` method) for more than 3 qubits now uses a non-optimal greedy compilation routine for Clifford elements synthesis, by Bravyi et. al., which typically yields better CX cost compared to the old default. If you need to revert to the previous Aaronson-Gottesman method this can be done by setting ``method='AG'``."
msgstr ""

#: ../../release_notes.rst:11003
msgid "The previously deprecated module ``qiskit.visualization.interactive``, which was deprecated in the 0.15.0 release, has now been removed. Instead you should use the matplotlib based visualizations:"
msgstr ""

#: ../../release_notes.rst:11010
msgid "Removed Interactive function"
msgstr ""

#: ../../release_notes.rst:11011
msgid "Equivalent matplotlib function"
msgstr ""

#: ../../release_notes.rst:11012
msgid "``iplot_bloch_multivector``"
msgstr ""

#: ../../release_notes.rst:11013
msgid ":func:`qiskit.visualization.plot_bloch_multivector`"
msgstr ""

#: ../../release_notes.rst:11014
msgid "``iplot_state_city``"
msgstr ""

#: ../../release_notes.rst:11015
msgid ":func:`qiskit.visualization.plot_state_city`"
msgstr ""

#: ../../release_notes.rst:11016
msgid "``iplot_state_qsphere``"
msgstr ""

#: ../../release_notes.rst:11017
msgid ":func:`qiskit.visualization.plot_state_qsphere`"
msgstr ""

#: ../../release_notes.rst:11018
msgid "``iplot_state_hinton``"
msgstr ""

#: ../../release_notes.rst:11019
msgid ":func:`qiskit.visualization.plot_state_hinton`"
msgstr ""

#: ../../release_notes.rst:11020
msgid "``iplot_histogram``"
msgstr ""

#: ../../release_notes.rst:11021
msgid ":func:`qiskit.visualization.plot_histogram`"
msgstr ""

#: ../../release_notes.rst:11022
msgid "``iplot_state_paulivec``"
msgstr ""

#: ../../release_notes.rst:11023
msgid ":func:`qiskit.visualization.plot_state_paulivec`"
msgstr ""

#: ../../release_notes.rst:11025
msgid "The ``qiskit.Aer`` and ``qiskit.IBMQ`` top level attributes are now lazy loaded. This means that the objects will now always exist and warnings will no longer be raised on import if ``qiskit-aer`` or ``qiskit-ibmq-provider`` are not installed (or can't be found by Python). If you were checking for the presence of ``qiskit-aer`` or ``qiskit-ibmq-provider`` using these module attributes and explicitly comparing to ``None`` or looking for the absence of the attribute this no longer will work because they are always defined as an object now. In other words running something like::"
msgstr ""

#: ../../release_notes.rst:11046
msgid "will no longer work. Instead to determine if those providers are present you can either explicitly use ``qiskit.providers.aer.Aer`` and ``qiskit.providers.ibmq.IBMQ``::"
msgstr ""

#: ../../release_notes.rst:11060
msgid "or check ``bool(qiskit.Aer)`` and ``bool(qiskit.IBMQ)`` instead, for example::"
msgstr ""

#: ../../release_notes.rst:11070
msgid "This change was necessary to avoid potential import cycle issues between the qiskit packages and also to improve the import time when Aer or IBMQ are not being used."
msgstr ""

#: ../../release_notes.rst:11074
msgid "The user config file option ``suppress_packaging_warnings`` option in the user config file and the ``QISKIT_SUPPRESS_PACKAGING_WARNINGS`` environment variable no longer has any effect and will be silently ignored. The warnings this option controlled have been removed and will no longer be emitted at import time from the ``qiskit`` module."
msgstr ""

#: ../../release_notes.rst:11080
msgid "The previously deprecated ``condition`` kwarg for :class:`qiskit.dagcircuit.DAGNode` constructor has been removed. It was deprecated in the 0.15.0 release. Instead you should now be setting the classical condition on the :class:`~qiskit.circuit.Instruction` object passed into the :class:`~qiskit.dagcircuit.DAGNode` constructor when creating a new ``op`` node."
msgstr ""

#: ../../release_notes.rst:11087
msgid "When creating a new :class:`~qiskit.circuit.Register` (which is the parent class for :class:`~qiskit.circuit.QuantumRegister` and :class:`~qiskit.circuit.ClassicalRegister`) or :class:`~qiskit.circuit.QuantumCircuit` object with a number of bits (eg ``QuantumCircuit(2)``), it is now required that number of bits are specified as an integer or another type which is castable to unambiguous integers(e.g. ``2.0``). Non-integer values will now raise an error as the intent in those cases was unclear (you can't have fractional bits). For more information on why this was changed refer to: `#4855 <https://github.com/Qiskit/qiskit-terra/issues/4855>`__"
msgstr ""

#: ../../release_notes.rst:11098
msgid "`networkx <https://networkx.org/>`__ is no longer a requirement for qiskit-terra. All the networkx usage inside qiskit-terra has been removed with the exception of 3 methods:"
msgstr ""

#: ../../release_notes.rst:11102
msgid ":class:`qiskit.dagcircuit.DAGCircuit.to_networkx`"
msgstr ""

#: ../../release_notes.rst:11103
msgid ":class:`qiskit.dagcircuit.DAGCircuit.from_networkx`"
msgstr ""

#: ../../release_notes.rst:11104
msgid ":class:`qiskit.dagcircuit.DAGDependency.to_networkx`"
msgstr ""

#: ../../release_notes.rst:11106
msgid "If you are using any of these methods you will need to manually install networkx in your environment to continue using them."
msgstr ""

#: ../../release_notes.rst:11109
msgid "By default on macOS with Python >=3.8 :func:`~qiskit.tools.parallel_map` will no longer run in multiple processes. This is a change from previous releases where the default behavior was that :func:`~qiskit.tools.parallel_map` would launch multiple processes. This change was made because with newer versions of macOS with Python 3.8 and 3.9 multiprocessing is either unreliable or adds significant overhead because of the change in Python 3.8 to launch new processes with ``spawn`` instead of ``fork``. To re-enable parallel execution on macOS with Python >= 3.8 you can use the user config file ``parallel`` option or set the environment variable ``QISKIT_PARALLEL`` to ``True``."
msgstr ""

#: ../../release_notes.rst:11120
msgid "The previously deprecated kwarg ``callback`` on the constructor for the :class:`~qiskit.transpiler.PassManager` class has been removed. This kwarg has been deprecated since the 0.13.0 release (April, 9th 2020). Instead you can pass the ``callback`` kwarg to the :meth:`qiskit.transpiler.PassManager.run` method directly. For example, if you were using::"
msgstr ""

#: ../../release_notes.rst:11138
msgid "this can be replaced with::"
msgstr ""

#: ../../release_notes.rst:11151
msgid "It is now no longer possible to instantiate a base channel without a prefix, such as :class:`qiskit.pulse.Channel` or :class:`qiskit.pulse.PulseChannel`. These classes are designed to classify types of different user facing channel classes, such as :class:`qiskit.pulse.DriveChannel`, but do not have a definition as a target resource. If you were previously directly instantiating either :class:`qiskit.pulse.Channel` or :class:`qiskit.pulse.PulseChannel`, this is no longer allowed. Please use the appropriate subclass."
msgstr ""

#: ../../release_notes.rst:11161
msgid "When the ``require_cp`` and/or ``require_tp`` kwargs of :func:`qiskit.quantum_info.process_fidelity`, :func:`qiskit.quantum_info.average_gate_fidelity`, :func:`qiskit.quantum_info.gate_error` are ``True``, they will now only log a warning rather than the previous behavior of raising a :class:`~qiskit.exceptions.QiskitError` exception if the input channel is non-CP or non-TP respectively."
msgstr ""

#: ../../release_notes.rst:11169
msgid "The :class:`~qiskit.circuit.library.QFT` class in the :mod:`qiskit.circuit.library` module now computes the Fourier transform using a little-endian representation of tensors, i.e. the state :math:`|1\\rangle` maps to :math:`|0\\rangle - |1\\rangle + |2\\rangle - ..` assuming the computational basis correspond to little-endian bit ordering of the integers. :math:`|0\\rangle = |000\\rangle, |1\\rangle = |001\\rangle`, etc. This was done to make it more consistent with the rest of Qiskit, which uses a little-endian convention for bit order. If you were depending on the previous bit order you can use the :meth:`~qiskit.circuit.library.QFT.reverse_bits` method to revert to the previous behavior. For example::"
msgstr ""

#: ../../release_notes.rst:11185
msgid "The ``qiskit.__qiskit_version__`` module attribute was previously a ``dict`` will now return a custom read-only ``Mapping`` object that checks the version of qiskit elements at runtime instead of at import time. This was done to speed up the import path of qiskit and eliminate a possible import cycle by only importing the element packages at runtime if the version is needed from the package. This should be fully compatible with the ``dict`` previously return and for most normal use cases there will be no difference. However, if some applications were relying on either mutating the contents or explicitly type checking it may require updates to adapt to this change."
msgstr ""

#: ../../release_notes.rst:11196
msgid "The ``qiskit.execute`` module has been renamed to :mod:`qiskit.execute_function`. This was necessary to avoid a potentical name conflict between the :func:`~qiskit.execute_function.execute` function which is re-exported as ``qiskit.execute``. ``qiskit.execute`` the function in some situations could conflict with ``qiskit.execute`` the module which would lead to a cryptic error because Python was treating ``qiskit.execute`` as the module when the intent was to the function or vice versa. The module rename was necessary to avoid this conflict. If you're importing ``qiskit.execute`` to get the module (typical usage was ``from qiskit.execute import execute``) you will need to update this to use ``qiskit.execute_function`` instead. ``qiskit.execute`` will now always resolve to the function."
msgstr ""

#: ../../release_notes.rst:11209
msgid "The ``qiskit.compiler.transpile``, ``qiskit.compiler.assemble``, ``qiskit.compiler.schedule``, and ``qiskit.compiler.sequence`` modules have been renamed to ``qiskit.compiler.transpiler``, ``qiskit.compiler.assembler``, ``qiskit.compiler.scheduler``, and ``qiskit.compiler.sequence`` respectively. This was necessary to avoid a potentical name conflict between the modules and the re-exported function paths :func:`qiskit.compiler.transpile`, :func:`qiskit.compiler.assemble`, :func:`qiskit.compiler.schedule`, and :func:`qiskit.compiler.sequence`. In some situations this name conflict between the module path and re-exported function path would lead to a cryptic error because Python was treating an import as the module when the intent was to use the function or vice versa. The module rename was necessary to avoid this conflict. If you were using the imports to get the modules before (typical usage would be like``from qiskit.compiler.transpile import transpile``) you will need to update this to use the new module paths. :func:`qiskit.compiler.transpile`, :func:`qiskit.compiler.assemble`, :func:`qiskit.compiler.schedule`, and :func:`qiskit.compiler.sequence` will now always resolve to the functions."
msgstr ""

#: ../../release_notes.rst:11228
msgid "The :class:`qiskit.quantum_info.Quaternion` class was moved from the ``qiskit.quantum_info.operator`` submodule to the ``qiskit.quantum_info.synthesis`` submodule to better reflect it's purpose. No change is required if you were importing it from the root :mod:`qiskit.quantum_info` module, but if you were importing from ``qiskit.quantum_info.operator`` you will need to update your import path."
msgstr ""

#: ../../release_notes.rst:11235
msgid "Removed the ``QuantumCircuit.mcmt`` method, which has been deprecated since the Qiskit Terra 0.14.0 release in April 2020. Instead of using the method, please use the :class:`~qiskit.circuit.library.MCMT` class instead to construct a multi-control multi-target gate and use the :meth:`qiskit.circuit.QuantumCircuit.append` or :meth:`qiskit.circuit.QuantumCircuit.compose` to add it to a circuit."
msgstr ""

#: ../../release_notes.rst:11243
msgid "For example, you can replace::"
msgstr ""

#: ../../release_notes.rst:11247
msgid "with::"
msgstr ""

#: ../../release_notes.rst:11253
msgid "Removed the ``QuantumCircuit.diag_gate`` method which has been deprecated since the Qiskit Terra 0.14.0 release in April 2020. Instead, use the :meth:`~qiskit.circuit.QuantumCircuit.diagonal` method of :class:`~qiskit.circuit.QuantumCircuit`."
msgstr ""

#: ../../release_notes.rst:11257
msgid "Removed the ``QuantumCircuit.ucy`` method which has been deprecated since the Qiskit Terra 0.14.0 release in April 2020. Instead, use the :meth:`~qiskit.circuit.QuantumCircuit.ucry` method of :class:`~qiskit.circuit.QuantumCircuit`."
msgstr ""

#: ../../release_notes.rst:11261
msgid "The previously deprecated ``mirror()`` method for :class:`qiskit.circuit.QuantumCircuit` has been removed. It was deprecated in the 0.15.0 release. The :meth:`qiskit.circuit.QuantumCircuit.reverse_ops` method should be used instead since mirroring could be confused with swapping the output qubits of the circuit. The ``reverse_ops()`` method only reverses the order of gates that are applied instead of mirroring."
msgstr ""

#: ../../release_notes.rst:11268
msgid "The previously deprecated support passing a float (for the ``scale`` kwarg as the first positional argument to the :meth:`qiskit.circuit.QuantumCircuit.draw` has been removed. It was deprecated in the 0.12.0 release. The first positional argument to the :meth:`qiskit.circuit.QuantumCircuit.draw` method is now the ``output`` kwarg which does not accept a float. Instead you should be using ``scale`` as a named kwarg instead of using it positionally."
msgstr ""

#: ../../release_notes.rst:11276
msgid "For example, if you were previously calling ``draw`` with::"
msgstr ""

#: ../../release_notes.rst:11283
msgid "this would now need to be::"
msgstr ""

#: ../../release_notes.rst:11294
msgid "Features of Qiskit Pulse (:mod:`qiskit.pulse`) which were deprecated in the 0.15.0 release (August, 2020) have been removed. The full set of changes are:"
msgstr ""

#: ../../release_notes.rst:11301
msgid "Module"
msgstr ""

#: ../../release_notes.rst:11302 ../../release_notes.rst:13999
#: ../../release_notes.rst:16129
msgid "Old"
msgstr ""

#: ../../release_notes.rst:11303 ../../release_notes.rst:14000
#: ../../release_notes.rst:16130
msgid "New"
msgstr ""

#: ../../release_notes.rst:11304 ../../release_notes.rst:11307
msgid "``qiskit.pulse.library``"
msgstr ""

#: ../../release_notes.rst:11305
msgid "``SamplePulse``"
msgstr ""

#: ../../release_notes.rst:11306
msgid ":class:`~qiskit.pulse.library.Waveform`"
msgstr ""

#: ../../release_notes.rst:11308
msgid "``ConstantPulse``"
msgstr ""

#: ../../release_notes.rst:11309
msgid ":class:`~qiskit.pulse.library.Constant`"
msgstr ""

#: ../../release_notes.rst:11310
msgid "(module rename)"
msgstr ""

#: ../../release_notes.rst:11311
msgid "``pulse.pulse_lib`` Module"
msgstr ""

#: ../../release_notes.rst:11312
msgid ":mod:`qiskit.pulse.library`"
msgstr ""

#: ../../release_notes.rst:11317 ../../release_notes.rst:13998
#: ../../release_notes.rst:19293
msgid "Class"
msgstr ""

#: ../../release_notes.rst:11318
msgid "Old method"
msgstr ""

#: ../../release_notes.rst:11319
msgid "New method"
msgstr ""

#: ../../release_notes.rst:11320
msgid ":class:`~qiskit.pulse.library.ParametricPulse`"
msgstr ""

#: ../../release_notes.rst:11321
msgid "``get_sample_pulse``"
msgstr ""

#: ../../release_notes.rst:11322
msgid ":class:`~qiskit.pulse.library.ParametricPulse.get_waveform`"
msgstr ""

#: ../../release_notes.rst:11323
msgid ":class:`~qiskit.pulse.instructions.Instruction`"
msgstr ""

#: ../../release_notes.rst:11324
msgid "``command``"
msgstr ""

#: ../../release_notes.rst:11325
msgid "N/A. Commands and Instructions have been unified. Use :meth:`~qiskit.pulse.instructions.Instruction.operands` to get information about the instruction data."
msgstr ""

#: ../../release_notes.rst:11328
msgid ":class:`~qiskit.pulse.instructions.Acquire`"
msgstr ""

#: ../../release_notes.rst:11329
msgid "``acquires``, ``mem_slots``, ``reg_slots``"
msgstr ""

#: ../../release_notes.rst:11330
msgid ":meth:`~qiskit.pulse.instructions.Acquire.acquire`, :meth:`~qiskit.pulse.instructions.Acquire.mem_slot`, :meth:`~qiskit.pulse.instructions.Acquire.reg_slot`. (The :class:`~qiskit.pulse.instructions.Acquire` instruction no longer broadcasts across multiple qubits.)"
msgstr ""

#: ../../release_notes.rst:11336
msgid "The dictionary previously held on :class:`~qiskit.dagcircuit.DAGCircuit` edges has been removed. Instead, edges now hold the :class:`~qiskit.circuit.Bit` instance which had previously been included in the dictionary as its ``'wire'`` field. Note that the NetworkX graph returned by :meth:`~qiskit.dagcircuit.DAGCircuit.to_networkx` will still have a dictionary for its edge attributes, but the ``'name'`` field will no longer be populated."
msgstr ""

#: ../../release_notes.rst:11344
msgid "The :attr:`~qiskit.circuit.QuantumCircuit.parameters` attribute of the :class:`~qiskit.circuit.QuantumCircuit` class no longer is returning a ``set``. Instead it returns a ``ParameterView`` object which implements all the methods that ``set`` offers (albeit deprecated). This was done to support a model that preserves name-sorted parameters. It should be fully compatible with any previous usage of the ``set`` returned by the :attr:`~qiskit.circuit.QuantumCircuit.parameters` attribute, except for where explicit type checking of a set was done."
msgstr ""

#: ../../release_notes.rst:11353
msgid "When running :func:`~qiskit.compiler.transpile` on a :class:`~qiskit.circuit.QuantumCircuit` with :meth:`~qiskit.circuit.QuantumCircuit.delay` instructions, the units will be converted to dt if the value of dt (sample time) is known to :func:`~qiskit.compiler.transpile`, either explicitly via the ``dt`` kwarg or via the :class:`~qiskit.providers.models.BackendConfiguration` for a ``Backend`` object passed in via the ``backend`` kwarg."
msgstr ""

#: ../../release_notes.rst:11361
msgid "The interpretation of ``meas_map`` (which is an attribute of a :class:`~qiskit.providers.models.PulseBackendConfiguration` object or as the corresponding ``meas_map`` kwarg on the :func:`~qiskit.compiler.schedule`, :func:`~qiskit.compiler.assemble`, :func:`~qiskit.compiler.sequence`, or :func:`~qiskit.execute_function.execute` functions) has been updated to better match the true constraints of the hardware. The format of this data is a list of lists, where the items in the inner list are integers specifying qubit labels. For instance::"
msgstr ""

#: ../../release_notes.rst:11374
msgid "Previously, the ``meas_map`` constraint was interpreted such that if one qubit was acquired (e.g. A), then all other qubits sharing a subgroup with that qubit (B and C) would have to be acquired at the same time and for the same duration. This constraint has been relaxed. One acquisition does not require more acquisitions. (If A is acquired, B and C do **not** need to be acquired.) Instead, qubits in the same measurement group cannot be acquired in a partially overlapping way -- think of the ``meas_map`` as specifying a shared acquisition resource (If we acquire A from ``t=1000`` to ``t=2000``, we cannot acquire B starting from ``1000<t<2000``). For example:"
msgstr ""

#: ../../release_notes.rst:11423
msgid "Two new arguments have been added to :meth:`qiskit.dagcircuit.DAGNode.semantic_eq`, ``bit_indices1`` and ``bit_indices2``, which are expected to map the :class:`~qiskit.circuit.Bit` instances in each :class:`~qiskit.dagcircuit.DAGNode` to their index in ``qubits`` or ``clbits`` list of their respective :class:`~qiskit.dagcircuit.DAGCircuit`. During the deprecation period, these arguments are optional and when **not** specified the mappings will be automatically constructed based on the ``register`` and ``index`` properties of each :class:`~qiskit.circuit.Bit` instance. However, in a future release, they will be required arguments and the mapping will need to be supplied by the user."
msgstr ""

#: ../../release_notes.rst:11436
msgid "The :mod:`~qiskit.pulse` builder functions:"
msgstr ""

#: ../../release_notes.rst:11438
msgid ":py:func:`qiskit.pulse.call_circuit`"
msgstr ""

#: ../../release_notes.rst:11439
msgid ":py:func:`qiskit.pulse.call_schedule`"
msgstr ""

#: ../../release_notes.rst:11441
msgid "are deprecated and will be removed in a future release. These functions are unified into :py:func:`qiskit.pulse.call` which should be used instead."
msgstr ""

#: ../../release_notes.rst:11445
msgid "The :class:`qiskit.pulse.Schedule` method :py:meth:`qiskit.pulse.Schedule.flatten` method is deprecated and will be removed in a future release. Instead you can use the :py:func:`qiskit.pulse.transforms.flatten` function which will perform the same operation."
msgstr ""

#: ../../release_notes.rst:11451
msgid "The :meth:`~qiskit.pulse.channels.Channel.assign_parameters` for the following classes:"
msgstr ""

#: ../../release_notes.rst:11454
msgid ":py:class:`qiskit.pulse.channels.Channel`,"
msgstr ""

#: ../../release_notes.rst:11455
msgid ":py:class:`qiskit.pulse.library.Pulse`,"
msgstr ""

#: ../../release_notes.rst:11456
msgid ":py:class:`qiskit.pulse.instructions.Instruction`,"
msgstr ""

#: ../../release_notes.rst:11458
msgid "and all their subclasses is now deprecated and will be removed in a future release. This functionality has been subsumed :py:class:`~qiskit.pulse.ScheduleBlock` which is the future direction for constructing parameterized pulse programs."
msgstr ""

#: ../../release_notes.rst:11463
msgid "The :attr:`~qiskit.pulse.channels.Channel.parameters` attribute for the following clasess:"
msgstr ""

#: ../../release_notes.rst:11466
msgid ":py:class:`~qiskit.pulse.channels.Channel`"
msgstr ""

#: ../../release_notes.rst:11467
msgid ":py:class:`~qiskit.pulse.instructions.Instruction`."
msgstr ""

#: ../../release_notes.rst:11469
msgid "is deprecated and will be removed in a future release. This functionality has been subsumed :py:class:`~qiskit.pulse.ScheduleBlock` which is the future direction for constructing parameterized pulse programs."
msgstr ""

#: ../../release_notes.rst:11473 ../../release_notes.rst:12319
msgid "Python 3.6 support has been deprecated and will be removed in a future release. When support is removed you will need to upgrade the Python version you're using to Python 3.7 or above."
msgstr ""

#: ../../release_notes.rst:11477
msgid "Two :class:`~qiskit.circuit.QuantumCircuit` methods :meth:`~qiskit.circuit.QuantumCircuit.combine` and :meth:`~qiskit.circuit.QuantumCircuit.extend` along with their corresponding Python operators ``+`` and ``+=`` are deprecated and will be removed in a future release. Instead the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.compose` should be used. The :meth:`~qiskit.circuit.QuantumCircuit.compose` method allows more flexibility in composing two circuits that do not have matching registers. It does not, however, automatically add qubits/clbits unlike the deprecated methods. To add a circuit on new qubits/clbits, the :meth:`qiskit.circuit.QuantumCircuit.tensor` method can be used. For example::"
msgstr ""

#: ../../release_notes.rst:11512
msgid "Support for passing :class:`~qiskit.circuit.Qubit` instances to the ``qubits`` kwarg of the :meth:`qiskit.transpiler.InstructionDurations.get` method has been deprecated and will be removed in a future release. Instead, you should call the :meth:`~qiskit.transpiler.InstructionDurations.get` method with the integer indices of the desired qubits."
msgstr ""

#: ../../release_notes.rst:11519
msgid "Using ``@`` (``__matmul__``) for invoking the ``compose`` method of ``BaseOperator`` subclasses (eg :class:`~qiskit.quantum_info.Operator`) is deprecated and will be removed in a future release. The :meth:`qiskit.quantum_info.Operator.compose` method can be used directly or also invoked using the ``&`` (``__and__``) operator."
msgstr ""

#: ../../release_notes.rst:11525
msgid "Using ``*`` (``__mul__``) for calling the :meth:`~qiskit.quantum_info.Operator.dot` method of ``BaseOperator`` subclasses (eg :class:`qiskit.quantum_info.Operator`) is deprecated and will be removed in a future release. Instead you can just call the :meth:`~qiskit.quantum_info.Operator.dot` directly."
msgstr ""

#: ../../release_notes.rst:11531
msgid "Using ``@`` (``__matmul__``) for invoking the :meth:`~qiskit.quantum_info.Statevector.evolve` method of the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes is deprecated and will be removed in a future release.. The ``evolve`` method can be used directly or also invoked using the ``&`` (``__and__``) operator."
msgstr ""

#: ../../release_notes.rst:11538
msgid "The ``qiskit.pulse.schedule.ParameterizedSchedule`` class has been deprecated and will be removed in a future release. Instead you can directly parameterize pulse :class:`~qiskit.pulse.Schedule` objects with a :class:`~qiskit.circuit.Parameter` object, for example::"
msgstr ""

#: ../../release_notes.rst:11551
msgid "The :class:`qiskit.pulse.ScheduleComponent` class in the :mod:`qiskit.pulse` module has been deprecated and will be removed in a future release. Its usage should be replaced either using a :class:`qiskit.pulse.Schedule` or :class:`qiskit.pulse.Instruction` directly. Additionally, the primary purpose of the ``ScheduleComponent`` class was as a common base class for both :class:`~qiskit.pulse.Schedule` and :class:`~qiskit.pulse.Instruction` for any place that was explicitly type checking or documenting accepting a ``ScheduleComponent`` input should be updated to accept :class:`~qiskit.pulse.Instruction` or :class:`~qiskit.pulse.Schedule`."
msgstr ""

#: ../../release_notes.rst:11562
msgid "The JSON Schema files and usage for the IBMQ API payloads are deprecated and will be removed in a future release. This includes everything under the :mod:`qiskit.schemas` module and the :mod:`qiskit.validation` module. This also includes the ``validate`` kwargs for :meth:`qiskit.qobj.QasmQobj.to_dict` and :meth:`qiskit.qobj.QasmQobj.to_dict` along with the module level fastjsonschema validators in :mod:`qiskit.qobj` (which do not raise a deprecation warning). The schema files have been moved to the `Qiskit/ibmq-schemas <https://github.com/Qiskit/ibmq-schemas>`__ repository and those should be treated as the canonical versions of the API schemas. Moving forward only those schemas will recieve updates and will be used as the source of truth for the schemas. If you were relying on the schemas bundled in qiskit-terra you should update to use that repository instead."
msgstr ""

#: ../../release_notes.rst:11577
msgid "The :mod:`qiskit.util` module has been deprecated and will be removed in a future release. It has been replaced by :mod:`qiskit.utils` which provides  the same functionality and will be expanded in the future. Note that no ``DeprecationWarning`` will be emitted regarding this deprecation since it was not feasible on Python 3.6."
msgstr ""

#: ../../release_notes.rst:11583
msgid "The :class:`~qiskit.transpiler.passes.CXDirection` transpiler pass in the :mod:`qiskit.transpiler.passes` module has been deprecated and will be removed in a future release. Instead the :class:`~qiskit.transpiler.GateDirection` should be used. It behaves identically to the :class:`~qiskit.transpiler.passes.CXDirection` except that it now also supports transforming a circuit with :class:`~qiskit.circuit.library.ECRGate` gates in addition to :class:`~qiskit.circuit.library.CXGate` gates."
msgstr ""

#: ../../release_notes.rst:11592
msgid "The :class:`~qiskit.transpiler.passes.CheckCXDirection` transpiler pass in the :mod:`qiskit.transpiler.passes` module has been deprecated and will be removed in a future release. Instead the :class:`~qiskit.transpiler.CheckGateDirection` pass should be used. It behaves identically to the :class:`~qiskit.transpiler.passes.CheckCXDirection` except that it now also supports checking the direction of all 2-qubit gates, not just :class:`~qiskit.circuit.library.CXGate` gates."
msgstr ""

#: ../../release_notes.rst:11601
msgid "The :class:`~qiskit.circuit.library.WeightedAdder` method :meth:`~qiskit.circuit.library.WeightedAdder.num_ancilla_qubits` is deprecated and will be removed in a future release. It has been replaced with the :attr:`qiskit.circuit.library.WeightedAdder.num_ancillas` attribute which is consistent with other circuit libraries' APIs."
msgstr ""

#: ../../release_notes.rst:11607
msgid "The following legacy methods of the :class:`qiskit.quantum_info.Pauli` class have been deprecated. See the method documentation for replacement use in the updated Pauli class."
msgstr ""

#: ../../release_notes.rst:11611
msgid ":meth:`~qiskit.quantum_info.Pauli.from_label`"
msgstr ""

#: ../../release_notes.rst:11612
msgid ":meth:`~qiskit.quantum_info.Pauli.sgn_prod`"
msgstr ""

#: ../../release_notes.rst:11613
msgid ":meth:`~qiskit.quantum_info.Pauli.to_spmatrix`"
msgstr ""

#: ../../release_notes.rst:11614
msgid ":meth:`~qiskit.quantum_info.Pauli.kron`"
msgstr ""

#: ../../release_notes.rst:11615
msgid ":meth:`~qiskit.quantum_info.Pauli.update_z`"
msgstr ""

#: ../../release_notes.rst:11616
msgid ":meth:`~qiskit.quantum_info.Pauli.update_x`"
msgstr ""

#: ../../release_notes.rst:11617
msgid ":meth:`~qiskit.quantum_info.Pauli.insert_paulis`"
msgstr ""

#: ../../release_notes.rst:11618
msgid ":meth:`~qiskit.quantum_info.Pauli.append_paulis`"
msgstr ""

#: ../../release_notes.rst:11619
msgid ":meth:`~qiskit.quantum_info.Pauli.delete_qubits`"
msgstr ""

#: ../../release_notes.rst:11620
msgid ":meth:`~qiskit.quantum_info.Pauli.pauli_single`"
msgstr ""

#: ../../release_notes.rst:11621
msgid ":meth:`~qiskit.quantum_info.Pauli.random`"
msgstr ""

#: ../../release_notes.rst:11623
msgid "Using a ``list`` or ``numpy.ndarray`` as the ``channel`` or ``target`` argument for the :func:`qiskit.quantum_info.process_fidelity`, :func:`qiskit.quantum_info.average_gate_fidelity`, :func:`qiskit.quantum_info.gate_error`, and :func:`qiskit.quantum_info.diamond_norm` functions has been deprecated and will not be supported in a future release. The inputs should instead be a :class:`~qiskit.circuit.Gate` or a ``BaseOperator`` subclass object (eg. :class:`~qiskit.quantum_info.Operator`, :class:`~qiskit.quantum_info.Choi`, etc.)"
msgstr ""

#: ../../release_notes.rst:11633
msgid "Accessing references from :class:`~qiskit.circuit.Qubit` and :class:`~qiskit.circuit.Clbit` instances to their containing registers via the :attr:`~qiskit.circuit.Qubit.register` or :attr:`~qiskit.circuit.Qubit.index` properties has been deprecated and will be removed in a future release. Instead, :class:`~qiskit.circuit.Register` objects can be queried to find the :class:`~qiskit.circuit.Bit` objects they contain."
msgstr ""

#: ../../release_notes.rst:11641
msgid "The current functionality of the :func:`qiskit.visualization.pulse_drawer` function is deprecated and will be replaced by :func:`qiskit.visualization.pulse_drawer_v2` (which is not backwards compatible) in a future release."
msgstr ""

#: ../../release_notes.rst:11646
msgid "The use of methods inherited from the ``set`` type on the output of the :attr:`~qiskit.circuit.QuantumCircuit.parameters` attribute (which used to be a ``set``) of the :class:`~qiskit.circuit.QuantumCircuit` class are deprecated and will be removed in a future release. This includes the methods from the ``add()``, ``difference()``, ``difference_update()``, ``discard()``, ``intersection()``, ``intersection_update()``, ``issubset()``, ``issuperset()``, ``symmetric_difference()``, ``symmetric_difference_update()``, ``union()``, ``update()``, ``__isub__()`` (which is the ``-=`` operator), and ``__ixor__()`` (which is the ``^=`` operator)."
msgstr ""

#: ../../release_notes.rst:11657
msgid "The name of the first (and only) positional argument for the :meth:`qiskit.circuit.QuantumCircuit.bind_parameters` method has changed from ``value_dict`` to ``values``. The passing an argument in with the name ``values_dict`` is deprecated and will be removed in future release. For example, if you were previously calling :meth:`~qiskit.circuit.QuantumCircuit.bind_parameters` with a call like: ``bind_parameters(values_dict={})`` this is deprecated and should be replaced by ``bind_parameters(values={})`` or even better just pass the argument positionally ``bind_parameters({})``."
msgstr ""

#: ../../release_notes.rst:11667
msgid "The name of the first (and only) positional argument for the :meth:`qiskit.circuit.QuantumCircuit.assign_parameters` method has changed from ``param_dict`` to ``parameters``. Passing an argument in with the name ``param_dict`` is deprecated and will be removed in future release. For example, if you were previously calling :meth:`~qiskit.circuit.QuantumCircuit.assign_parameters` with a call like: ``assign_parameters(param_dict={})`` this is deprecated and should be replaced by ``assign_parameters(values={})`` or even better just pass the argument positionally ``assign_parameters({})``."
msgstr ""

#: ../../release_notes.rst:11683
msgid "Fixed an issue where the :func:`~qiskit.execute_function.execute` function would raise :class:`~qiskit.exceptions.QiskitError` exception when a :class:`~qiskit.circuit.ParameterVector` object was passed in for the ``parameter_bind`` kwarg. parameter. For example, it is now possible to call something like::"
msgstr ""

#: ../../release_notes.rst:11691
msgid "where ``pv1`` and ``pv2`` are :class:`~qiskit.circuit.ParameterVector` objects. Fixed `#5467 <https://github.com/Qiskit/qiskit-terra/issues/5467>`__"
msgstr ""

#: ../../release_notes.rst:11695
msgid "Fixed an issue with the labels of parametric pulses in the :class:`~qiskit.qobj.PulseQobjInstruction` class were not being properly set as they are with sampled pulses. This also means that pulse names that are imported from the :class:`~qiskit.providers.models.PulseDefaults` returned by a :class:`~qiskit.providers.Backend`, such as ``x90``, ``x90m``, etc, will properly be set. Fixed `#5363 <https://github.com/Qiskit/qiskit-terra/issues/5363>`__"
msgstr ""

#: ../../release_notes.rst:11703
msgid "Fixed an issue where unbound parameters only occurring in the :attr:`~qiskit.circuit.QuantumCircuit.global_phase` attribute of a :class:`~qiskit.circuit.QuantumCircuit` object would not show in the :attr:`~qiskit.circuit.QuantumCircuit.parameters` attribute and could not be bound. Fixed `#5806 <https://github.com/Qiskit/qiskit-terra/issues/5806>`__"
msgstr ""

#: ../../release_notes.rst:11710
msgid "The :attr:`~qiskit.circuit.QuantumCircuit.calibrations` attribute of :class:`~qiskit.circuit.QuantumCircuit` objects are now preserved when the ``+=`` (ie the :meth:`~qiskit.circuit.QuantumCircuit.extend` method) and the ``+`` (ie the :meth:`~qiskit.circuit.QuantumCircuit.combine` method) are used. Fixed `#5930 <https://github.com/Qiskit/qiskit-terra/pull/5930>`__ and `#5908 <https://github.com/Qiskit/qiskit-terra/issues/5908>`__"
msgstr ""

#: ../../release_notes.rst:11718
msgid "The :attr:`~qiskit.circuit.Register.name` setter method of class :class:`~qiskit.circuit.Register` (which is the parent class of :class:`~qiskit.circuit.QuantumRegister` and :class:`~qiskit.circuit.ClassicalRegister`) previously did not check if the assigned string was a valid register name as per the `OpenQASM specification <https://arxiv.org/pdf/1707.03429v2.pdf>`__. This check was previously only performed when the name was specified in the constructor, this has now been fixed so that setting the ``name`` attribute directly with an invalid value will now also raise an exception. Fixed `#5461 <https://github.com/Qiskit/qiskit-terra/issues/5461>`__"
msgstr ""

#: ../../release_notes.rst:11730
msgid "Fixed an issue with the :func:`qiskit.visualization.circuit_drawer` function and :meth:`qiskit.circuit.QuantumCircuit.draw` method when visualizing a :class:`~qiskit.circuit.QuantumCircuit` with a :class:`~qiskit.circuit.Gate` that has a classical condition after a :class:`~qiskit.circuit.Measure` that used the same :class:`~qiskit.circuit.ClassicalRegister`, it was possible for the conditional :class:`~qiskit.circuit.Gate` to be displayed to the left of the :class:`~qiskit.circuit.Measure`. Fixed `#5387 <https://github.com/Qiskit/qiskit-terra/issues/5387>`__"
msgstr ""

#: ../../release_notes.rst:11740
msgid "In the transpiler pass :class:`qiskit.transpiler.passes.CSPLayout` a bias towards lower numbered qubits could be observed. This undesireable bias has been fixed by shuffling the candidates to randomize the results. Furthermore, the usage of the :class:`~qiskit.transpiler.passes.CSPLayout` pass in the :mod:`~qiskit.transpiler.preset_passmanagers` (for level 2 and 3) has been adjusted to use a configured seed if the ``seed_transpiler`` kwarg is set when :func:`~qiskit.compiler.transpile` is called. Fixed `#5990 <https://github.com/Qiskit/qiskit-terra/issues/5990>`__"
msgstr ""

#: ../../release_notes.rst:11749
msgid "Fixes a bug where the ``channels`` field for a :class:`~qiskit.providers.models.PulseBackendConfiguration` object was not being included in the output of the :class:`qiskit.providers.models.PulseBackendConfiguration.to_dict` method. Fixed `#5579 <https://github.com/Qiskit/qiskit-terra/issues/5579>`__"
msgstr ""

#: ../../release_notes.rst:11755
msgid "Fixed the ``'circular'`` entanglement in the :class:`qiskit.circuit.library.NLocal` circuit class for the edge case where the circuit has the same size as the entanglement block (e.g. a two-qubit circuit and CZ entanglement gates). In this case there should only be one entanglement gate, but there was accidentially added a second one in the inverse direction as the first. Fixed `Qiskit/qiskit-aqua#1452 <https://github.com/Qiskit/qiskit-aqua/issues/1452>`__"
msgstr ""

#: ../../release_notes.rst:11763
msgid "Fixed the handling of breakpoints in the :class:`~qiskit.circuit.library.PiecewisePolynomialPauliRotations` class in the :mod:`qiskit.circuit.library`. Now for ``n`` intervals, ``n+1`` breakpoints are allowed. This enables specifying another end interval other than :math:`2^\\text{num qubits}`. This is important because from the end of the last interval to :math:`2^\\text{num qubits}` the function is the identity."
msgstr ""

#: ../../release_notes.rst:11771
msgid "Fixed an issue in the :class:`qiskit.circuit.library.Permutation` circuit class where some permutations would not be properly generated. This issue could also effect :class:`qiskit.circuit.library.QuantumVolume` if it were called with `classical_permutation=False``. Fixed `#5812 <https://github.com/Qiskit/qiskit-terra/issues/5812>`__"
msgstr ""

#: ../../release_notes.rst:11777
msgid "Fixed an issue where generating QASM output with the :meth:`~qiskit.circuit.QuantumCircuit.qasm` method for a :class:`~qiskit.circuit.QuantumCircuit` object that has a :class:`~qiskit.circuit.ControlledGate` with an open control the output would be as if all controls were closed independent of the specified control state. This would result in a different circuit being created from :meth:`~qiskit.circuit.QuantumCircuit.from_qasm_str` if parsing the generated QASM."
msgstr ""

#: ../../release_notes.rst:11786
msgid "This was fixed by updating the QASM output from :meth:`~qiskit.circuit.QuantumCircuit.qasm` by defining a composite gate which uses :class:`~qiskit.circuit.XGate` to implement the open controls. The composite gate is named like ``<original_gate_name>_o<ctrl_state>`` where ``o`` stands for open control and ``ctrl_state`` is the integer value of the control state. Fixed `#5443 <https://github.com/Qiskit/qiskit-terra/issues/5443>`__"
msgstr ""

#: ../../release_notes.rst:11794
msgid "Fixed an issue where binding :class:`~qiskit.circuit.Parameter` objects in a :class:`~qiskit.circuit.QuantumCircuit` with the ``parameter_binds`` in the :class:`~qiskit.execute_function.execute` function would cause all the bound :class:`~qiskit.circuit.QuantumCircuit` objects would have the same :attr:`~qiskit.circuit.QuantumCircuit.name`, which meant the result names were also not unique. This fix causes the :meth:`~qiskit.circuit.QuantumCircuit.bind_parameters` and :meth:`~qiskit.circuit.QuantumCircuit.assign_parameters` to assign a unique circuit name when ``inplace=False`` as::"
msgstr ""

#: ../../release_notes.rst:11806
msgid "where ``<base name>`` is the name supplied by the \"name\" kwarg, otherwise it defaults to \"circuit\". The class instance number gets incremented every time an instance of the class is generated. ``<pid name>`` is appended if called outside the main process. Fixed `#5185 <https://github.com/Qiskit/qiskit-terra/issues/5185>`__"
msgstr ""

#: ../../release_notes.rst:11812
msgid "Fixed an issue with the :func:`~qiskit.compiler.scheduler` function where it would raise an exception if an input circuit contained an unbound :class:`~qiskit.circuit.QuantumCircuit` object. Fixed `#5304 <https://github.com/Qiskit/qiskit-terra/issues/5304>`__"
msgstr ""

#: ../../release_notes.rst:11817
msgid "Fixed an issue in the :class:`qiskit.transpiler.passes.TemplateOptimization` transpiler passes where template circuits that contained unbound :class:`~qiskit.circuit.Parameter` objects would crash under some scenarios if the parameters could not be bound during the template matching. Now, if the :class:`~qiskit.circuit.Parameter` objects can not be bound templates with unbound :class:`~qiskit.circuit.Parameter` are discarded and ignored by the :class:`~qiskit.transpiler.passes.TemplateOptimization` pass. Fixed `#5533 <https://github.com/Qiskit/qiskit-terra/issues/5533>`__"
msgstr ""

#: ../../release_notes.rst:11826
msgid "Fixed an issue with the :func:`qiskit.visualization.timeline_drawer` function where classical bits were inproperly handled. Fixed `#5361 <https://github.com/Qiskit/qiskit-terra/issues/5361>`__"
msgstr ""

#: ../../release_notes.rst:11830
msgid "Fixed an issue in the :func:`qiskit.visualization.circuit_drawer` function and the :meth:`qiskit.circuit.QuantumCircuit.draw` method where :class:`~qiskit.circuit.Delay` instructions in a :class:`~qiskit.circuit.QuantumCircuit` object were not being correctly treated as idle time. So when the ``idle_wires`` kwarg was set to ``False`` the wires with the :class:`~qiskit.circuit.Delay` objects would still be shown. This has been fixed so that the idle wires are removed from the visualization if there are only :class:`~qiskit.circuit.Delay` objects on a wire."
msgstr ""

#: ../../release_notes.rst:11840
msgid "Previously, when the option ``layout_method`` kwarg was provided to the :func:`~qiskit.compiler.transpile` function and the ``optimization_level`` kwarg was set to >= 2 so that the pass :class:`qiskit.transpiler.passes.CSPLayout` would run, if :class:`~qiskit.transpiler.passes.CSPLayout` found a solution then the method in ``layout_method`` was not executed. This has been fixed so that if specified, the ``layout_method`` is always honored. Fixed `#5409 <https://github.com/Qiskit/qiskit-terra/issues/5409>`__"
msgstr ""

#: ../../release_notes.rst:11849
msgid "When the argument ``coupling_map=None`` (either set explicitly, set implicitly as the default value, or via the ``backend`` kwarg), the transpiling process was not \"embedding\" the circuit. That is, even when an ``initial_layout`` was specified, the virtual qubits were not assigned to physical qubits. This has been fixed so that now, the :func:`qiskit.compiler.transpile` function honors the ``initial_layout`` argument by embedding the circuit:"
msgstr ""

#: ../../release_notes.rst:11870
msgid "If the ``initial_layout`` refers to more qubits than in the circuit, the transpiling process will extended the circuit with ancillas."
msgstr ""

#: ../../release_notes.rst:11885
msgid "Fixed `#5345 <https://github.com/Qiskit/qiskit-terra/issues/5345>`__"
msgstr ""

#: ../../release_notes.rst:11887
msgid "A new kwarg, ``user_cost_dict`` has been added to the constructor for the :class:`qiskit.transpiler.passes.TemplateOptimization` transpiler pass. This enables users to provide a custom cost dictionary for the gates to the underlying template matching algorithm. For example::"
msgstr ""

#: ../../release_notes.rst:11897
msgid "An issue when passing the :class:`~qiskit.result.Counts` object returned by :meth:`~qiskit.result.Result.get_counts` to :func:`~qiskit.result.marginal_counts` would produce an improperly formatted :class:`~qiskit.result.Counts` object with certain inputs has been fixed. Fixes `#5424 <https://github.com/Qiskit/qiskit-terra/issues/5424>`__"
msgstr ""

#: ../../release_notes.rst:11904
msgid "Improved the allocation of helper qubits in :class:`~qiskit.circuit.library.PolynomialPauliRotations` and :class:`~qiskit.circuit.library.PiecewiseLinearPauliRotations` which makes the implementation of these circuit more efficient. Fixed `#5320 <https://github.com/Qiskit/qiskit-terra/issues/5320>`__ and `#5322 <https://github.com/Qiskit/qiskit-terra/issues/5322>`__"
msgstr ""

#: ../../release_notes.rst:11911
msgid "Fix the usage of the allocated helper qubits in the :class:`~qiskit.circuit.library.MCXGate` in the :class:`~qiskit.circuit.library.WeightedAdder` class. These were previously allocated but not used prior to this fix. Fixed `#5321 <https://github.com/Qiskit/qiskit-terra/issues/5321>`__"
msgstr ""

#: ../../release_notes.rst:11917
msgid "In a number of cases, the ``latex`` output method for the :func:`qiskit.visualization.circuit_drawer` function and the :meth:`~qiskit.circuit.QuantumCircuit.draw` method did not display the gate name correctly, and in other cases, did not include gate parameters where they should be. Now the gate names will be displayed the same way as they are displayed with the ``mpl`` output method, and parameters will display for all the gates that have them. In addition, some of the gates did not display in the correct form, and these have been fixed. Fixes `#5605 <https://github.com/Qiskit/qiskit-terra/issues/5605>`__, `#4938 <https://github.com/Qiskit/qiskit-terra/issues/4938>`__, and `#3765 <https://github.com/Qiskit/qiskit-terra/issues/3765>`__"
msgstr ""

#: ../../release_notes.rst:11929
msgid "Fixed an issue where, if the :meth:`qiskit.circuit.Instruction.to_instruction` method was used on a subcircuit which contained classical registers and that :class:`~qiskit.circuit.Instruction` object was then added to a :class:`~qiskit.circuit.QuantumCircuit` object, then the output from the :func:`qiskit.visualization.circuit_drawer` function and the :meth:`qiskit.circuit.QuantumCircuit.draw` method would in some instances display the subcircuit to the left of a measure when it should have been displayed to the right. Fixed `#5947 <https://github.com/Qiskit/qiskit-terra/issues/5947>`__"
msgstr ""

#: ../../release_notes.rst:11940
msgid "Fixed an issue with :class:`~qiskit.circuit.Delay` objects in a :class:`~qiskit.circuit.QuantumCircuit` where :func:`qiskit.compiler.transpile` would not be convert the units of the :class:`~qiskit.circuit.Delay` to the units of the :class:`~qiskit.providers.Backend`, if the ``backend`` kwarg is set on :func:`~qiskit.circuit.transpile`. This could result in the wrong behavior because of a unit mismatch, for example running::"
msgstr ""

#: ../../release_notes.rst:11957
msgid "would previously have resulted in the backend delay for 100 timesteps (each of duration dt) rather than expected (100e-6 / dt) timesteps. This has been corrected so the :func:`qiskit.compiler.transpile` function properly converts the units."
msgstr ""

#: ../../release_notes.rst:11968
msgid "The snapshots of all the fake/mock backends in ``qiskit.test.mock`` have been updated to reflect recent device changes. This includes a change in the :attr:`~qiskit.providers.models.QasmBackendConfiguration.basis_gates` attribute for the :class:`~qiskit.providers.models.BackendConfiguration` to ``['cx', 'rz', 'sx', 'x', 'id']``, the addition of a ``readout_length`` property to the qubit properties in the :class:`~qiskit.providers.models.BackendProperties`, and updating the :class:`~qiskit.providers.models.PulseDefaults` so that all the mock backends support parametric pulse based :class:`~qiskit.pulse.InstructionScheduleMap` instances."
msgstr ""

#: ../../release_notes.rst:11982
msgid "Aer 0.8.0"
msgstr ""

#: ../../release_notes.rst:11989
msgid "The 0.8 release includes several new features and bug fixes. The highlights for this release are: the introduction of a unified :class:`~qiskit.providers.aer.AerSimulator` backend for running circuit simulations using any of the supported simulation methods; a simulator instruction library (:mod:`qiskit.providers.aer.library`) which includes custom instructions for saving various kinds of simulator data; MPI support for running large simulations on a distributed computing environment."
msgstr ""

#: ../../release_notes.rst:12004 ../../release_notes.rst:13057
msgid "Python 3.9 support has been added in this release. You can now run Qiskit Aer using Python 3.9 without building from source."
msgstr ""

#: ../../release_notes.rst:12007 ../../release_notes.rst:13122
msgid "Add the CMake flag ``DISABLE_CONAN`` (default=``OFF``)s. When installing from source, setting this to ``ON`` allows bypassing the Conan package manager to find libraries that are already installed on your system. This is also available as an environment variable ``DISABLE_CONAN``, which takes precedence over the CMake flag. This is not the official procedure to build AER. Thus, the user is responsible of providing all needed libraries and corresponding files to make them findable to CMake."
msgstr ""

#: ../../release_notes.rst:12014
msgid "This release includes support for building qiskit-aer with MPI support to run large simulations on a distributed computing environment. See the `contributing guide <https://github.com/Qiskit/qiskit-aer/blob/master/CONTRIBUTING.md#building-with-mpi-support>`__ for instructions on building and running in an MPI environment."
msgstr ""

#: ../../release_notes.rst:12019
msgid "It is now possible to build qiskit-aer with CUDA enabled in Windows. See the `contributing guide <https://github.com/Qiskit/qiskit-aer/blob/master/CONTRIBUTING.md#building-with-gpu-support>`__ for instructions on building from source with GPU support."
msgstr ""

#: ../../release_notes.rst:12024
msgid "When building the qiskit-aer Python extension from source several build dependencies need to be pre-installed to enable C++ compilation. As a user convenience when building the extension any of these build dependencies which were missing would be automatically installed using ``pip`` prior to the normal ``setuptools`` installation steps, however it was previously was not possible to avoid this automatic installation. To solve this issue a new environment variable ``DISABLE_DEPENDENCY_INSTALL`` has been added. If it is set to ``1`` or ``ON`` when building the python extension from source this will disable the automatic installation of these missing build dependencies."
msgstr ""

#: ../../release_notes.rst:12035
msgid "Adds support for optimized N-qubit Pauli gate ( :class:`qiskit.circuit.library.PauliGate`) to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and the statevector and density matrix methods of the :class:`~qiskit.providers.aer.QasmSimulator` and :class:`~qiskit.providers.aer.AerSimulator`."
msgstr ""

#: ../../release_notes.rst:12043
msgid "The :meth:`~qiskit.providers.aer.AerSimulator.run` method for the :class:`~qiskit.providers.aer.AerSimulator`, :class:`~qiskit.providers.aer.QasmSimulator`, :class:`~qiskit.providers.aer.StatevectorSimulator`, and :class:`~qiskit.providers.aer.UnitarySimulator` backends now takes a :class:`~qiskit.circuit.QuantumCircuit` (or a list of :class:`~qiskit.circuit.QuantumCircuit` objects) as it's input. The previous :class:`~qiskit.qobj.QasmQobj` object is still supported for now, but will be deprecated in a future release."
msgstr ""

#: ../../release_notes.rst:12069
msgid "The :meth:`~qiskit.providers.aer.PulseSimulator.run` method for the :class:`~qiskit.providers.aer.PulseSimulator` backend now takes a :class:`~qiskit.pulse.Schedule` (or a list of :class:`~qiskit.pulse.Schedule` objects) as it's input. The previous :class:`~qiskit.qobj.PulseQobj` object is still supported for now, but will be deprecated in a future release."
msgstr ""

#: ../../release_notes.rst:12076
msgid "Adds the new :class:`~qiskit.provider.aer.AerSimulator` simulator backend supporting the following simulation methods"
msgstr ""

#: ../../release_notes.rst:12079
msgid "``automatic``"
msgstr ""

#: ../../release_notes.rst:12080
msgid "``statevector``"
msgstr ""

#: ../../release_notes.rst:12081
msgid "``stabilizer``"
msgstr ""

#: ../../release_notes.rst:12082
msgid "``density_matrix``"
msgstr ""

#: ../../release_notes.rst:12083
msgid "``matrix_product_state``"
msgstr ""

#: ../../release_notes.rst:12084
msgid "``unitary``"
msgstr ""

#: ../../release_notes.rst:12085
msgid "``superop``"
msgstr ""

#: ../../release_notes.rst:12087
msgid "The default `automatic` method will automatically choose a simulation method separately for each run circuit based on the circuit instructions and noise model (if any). Initializing a simulator with a specific method can be done using the `method` option."
msgstr ""

#: ../../release_notes.rst:12099
msgid "GPU simulation for the statevector, density matrix and unitary methods can be enabled by setting the ``device='GPU'`` backend option."
msgstr ""

#: ../../release_notes.rst:12109
msgid "Note that the ``unitary`` and ``superop`` methods do not support measurement as they simulate the unitary matrix or superoperator matrix of the run circuit so one of the new :func:`~qiskit.providers.aer.library.save_unitary`, :func:`~qiskit.providers.aer.library.save_superop`, or :func:`~qiskit.providers.aer.library.save_state` instructions must be used to save the simulator state to the returned results. Similarly state of the other simulations methods can be saved using the appropriate instructions. See the :mod:`qiskit.providers.aer.library` API documents for more details."
msgstr ""

#: ../../release_notes.rst:12119
msgid "Note that the :class:`~qiskit.providers.aer.AerSimulator` simulator superceds the :class:`~qiskit.providers.aer.QasmSimulator`, :class:`~qiskit.providers.aer.StatevectorSimulator`, and :class:`~qiskit.providers.aer.UnitarySimulator` backends which will be deprecated in a future release."
msgstr ""

#: ../../release_notes.rst:12125
msgid "Updates the :class:`~qiskit.providers.aer.AerProvider` class to include multiple :class:`~qiskit.providers.aer.AerSimulator` backends preconfigured for all available simulation methods and simulation devices. The new backends can be accessed through the provider interface using the names"
msgstr ""

#: ../../release_notes.rst:12130
msgid "``\"aer_simulator\"``"
msgstr ""

#: ../../release_notes.rst:12131
msgid "``\"aer_simulator_statevector\"``"
msgstr ""

#: ../../release_notes.rst:12132
msgid "``\"aer_simulator_stabilizer\"``"
msgstr ""

#: ../../release_notes.rst:12133
msgid "``\"aer_simulator_density_matrix\"``"
msgstr ""

#: ../../release_notes.rst:12134
msgid "``\"aer_simulator_matrix_product_state\"``"
msgstr ""

#: ../../release_notes.rst:12135
msgid "``\"aer_simulator_extended_stabilizer\"``"
msgstr ""

#: ../../release_notes.rst:12136
msgid "``\"aer_simulator_unitary\"``"
msgstr ""

#: ../../release_notes.rst:12137
msgid "``\"aer_simulator_superop\"``"
msgstr ""

#: ../../release_notes.rst:12139
msgid "Additional if Aer was installed with GPU support on a compatible system the following GPU backends will also be available"
msgstr ""

#: ../../release_notes.rst:12142
msgid "``\"aer_simulator_statevector_gpu\"``"
msgstr ""

#: ../../release_notes.rst:12143
msgid "``\"aer_simulator_density_matrix_gpu\"``"
msgstr ""

#: ../../release_notes.rst:12144
msgid "``\"aer_simulator_unitary_gpu\"``"
msgstr ""

#: ../../release_notes.rst:12153
msgid "Added a new ``norm estimation`` method for performing measurements when using the ``\"extended_stabilizer\"`` simulation method. This norm estimation method can be used by passing the following options to the :class:`~qiskit.providers.aer.AerSimulator` and :class:`~qiskit.providers.aer.QasmSimulator` backends"
msgstr ""

#: ../../release_notes.rst:12165
msgid "The norm estimation method is slower than the alternative ``metropolis`` or ``resampled_metropolis`` options, but gives better performance on circuits with sparse output distributions. See the documentation of the :class:`~qiskit.providers.aer.QasmSimulator` for more information."
msgstr ""

#: ../../release_notes.rst:12170
msgid "Adds instructions for saving the state of the simulator in various formats. These instructions are"
msgstr ""

#: ../../release_notes.rst:12173
msgid ":class:`qiskit.providers.aer.library.SaveDensityMatrix`"
msgstr ""

#: ../../release_notes.rst:12174
msgid ":class:`qiskit.providers.aer.library.SaveMatrixProductState`"
msgstr ""

#: ../../release_notes.rst:12175
msgid ":class:`qiskit.providers.aer.library.SaveStabilizer`"
msgstr ""

#: ../../release_notes.rst:12176
msgid ":class:`qiskit.providers.aer.library.SaveState`"
msgstr ""

#: ../../release_notes.rst:12177
msgid ":class:`qiskit.providers.aer.library.SaveStatevector`"
msgstr ""

#: ../../release_notes.rst:12178
msgid ":class:`qiskit.providers.aer.library.SaveStatevectorDict`"
msgstr ""

#: ../../release_notes.rst:12179
msgid ":class:`qiskit.providers.aer.library.SaveUnitary`"
msgstr ""

#: ../../release_notes.rst:12181
msgid "These instructions can be appended to a quantum circuit by using the :class:`~qiskit.providers.aer.library.save_density_matrix`, :class:`~qiskit.providers.aer.library.save_matrix_product_state`, :class:`~qiskit.providers.aer.library.save_stabilizer`, :class:`~qiskit.providers.aer.library.save_state`, :class:`~qiskit.providers.aer.library.save_statevector`, :class:`~qiskit.providers.aer.library.save_statevector_dict`, :class:`~qiskit.providers.aer.library.save_unitary` circuit methods which are added to ``QuantumCircuit`` when importing Aer."
msgstr ""

#: ../../release_notes.rst:12191 ../../release_notes.rst:12254
msgid "See the :mod:`qiskit.providers.aer.library` API documentation for details on method compatibility for each instruction."
msgstr ""

#: ../../release_notes.rst:12194
msgid "Note that the snapshot instructions :class:`~qiskit.providers.aer.extensions.SnapshotStatevector`, :class:`~qiskit.providers.aer.extensions.SnapshotDensityMatrix`, :class:`~qiskit.providers.aer.extensions.SnapshotStabilizer` are still supported but will be deprecated in a future release."
msgstr ""

#: ../../release_notes.rst:12200
msgid "Adds :class:`qiskit.providers.aer.library.SaveExpectationValue` and :class:`qiskit.providers.aer.library.SaveExpectationValueVariance` quantum circuit instructions for saving the expectation value :math:`\\langle H\\rangle = Tr[H\\rho]`, or expectation value and variance :math:`Var(H) = \\langle H^2\\rangle - \\langle H\\rangle^2`, of a Hermitian operator :math:`H` for the simulator state :math:`\\rho`. These instruction can be appended to a quantum circuit by using the :class:`~qiskit.providers.aer.library.save_expectation_value` and :class:`~qiskit.providers.aer.library.save_expectation_value_variance` circuit methods which is added to ``QuantumCircuit`` when importing Aer."
msgstr ""

#: ../../release_notes.rst:12211
msgid "Note that the snapshot instruction :class:`~qiskit.providers.aer.extensions.SnapshotExpectationValue`, is still supported but will be deprecated in a future release."
msgstr ""

#: ../../release_notes.rst:12215
msgid "Adds :class:`qiskit.providers.aer.library.SaveProbabilities` and :class:`qiskit.providers.aer.library.SaveProbabilitiesDict` quantum circuit instruction for saving all measurement outcome probabilities for Z-basis measurements of the simualtor state. These instruction can be appended to a quantum circuit by using the :class:`~qiskit.providers.aer.library.save_probabilities` and :class:`~qiskit.providers.aer.library.save_probabilities_dict` circuit methods which is added to ``QuantumCircuit`` when importing Aer."
msgstr ""

#: ../../release_notes.rst:12224
msgid "Note that the snapshot instruction :class:`~qiskit.providers.aer.extensions.SnapshotProbabilities`, is still supported but will be deprecated in a future release."
msgstr ""

#: ../../release_notes.rst:12228
msgid "Adds :class:`qiskit.providers.aer.library.SaveAmplitudes` and :class:`qiskit.providers.aer.library.SaveAmplitudesSquared` circuit instructions for saving select complex statevector amplitudes, or select probabilities (amplitudes squared) for supported simulation methods. These instructions can be appended to a quantum circuit by using the :class:`~qiskit.providers.aer.library.save_amplitudes` and :class:`~qiskit.providers.aer.library.save_amplitudes_squared` circuit methods which is added to ``QuantumCircuit`` when importing Aer."
msgstr ""

#: ../../release_notes.rst:12237
msgid "Adds instructions for setting the state of the simulators. These instructions must be defined on the full number of qubits in the circuit. They can be applied at any point in a circuit and will override the simulator state with the one specified. Added instructions are"
msgstr ""

#: ../../release_notes.rst:12242
msgid ":class:`qiskit.providers.aer.library.SetDensityMatrix`"
msgstr ""

#: ../../release_notes.rst:12243
msgid ":class:`qiskit.providers.aer.library.SetStabilizer`"
msgstr ""

#: ../../release_notes.rst:12244
msgid ":class:`qiskit.providers.aer.library.SetStatevector`"
msgstr ""

#: ../../release_notes.rst:12245
msgid ":class:`qiskit.providers.aer.library.SetUnitary`"
msgstr ""

#: ../../release_notes.rst:12247
msgid "These instruction can be appended to a quantum circuit by using the :class:`~qiskit.providers.aer.library.set_density_matrix`, :class:`~qiskit.providers.aer.library.set_stabilizer`, :class:`~qiskit.providers.aer.library.set_statevector`, :class:`~qiskit.providers.aer.library.set_unitary` circuit methods which are added to ``QuantumCircuit`` when importing Aer."
msgstr ""

#: ../../release_notes.rst:12257
msgid "Added support for diagonal gates to the ``\"matrix_product_state\"`` simulation method."
msgstr ""

#: ../../release_notes.rst:12260
msgid "Added support for the ``initialize`` instruction to the ``\"matrix_product_state\"`` simulation method."
msgstr ""

#: ../../release_notes.rst:12269
msgid "There is a known issue where the simulation of certain circuits with a Kraus noise model using the ``\"matrix_product_state\"`` simulation method can cause the simulator to crash. Refer to `#306 <https://github.com/Qiskit/qiskit-aer/issues/1184>`__ for more information."
msgstr ""

#: ../../release_notes.rst:12281
msgid "The minimum version of `Conan <https://conan.io/>`__ has been increased to 1.31.2. This was necessary to fix a compatibility issue with newer versions of the `urllib3 <https://pypi.org/project/urllib3/>`__ (which is a dependency of Conan). It also adds native support for AppleClang 12 which is useful for users with new Apple computers."
msgstr ""

#: ../../release_notes.rst:12287
msgid "``pybind11`` minimum version required is 2.6 instead of 2.4. This is needed in order to support CUDA enabled compilation in Windows."
msgstr ""

#: ../../release_notes.rst:12290
msgid "Cython has been removed as a build dependency."
msgstr ""

#: ../../release_notes.rst:12292
msgid "Removed x90 gate decomposition from noise models that was deprecated in qiskit-aer 0.7. This decomposition is now done by using regular noise model basis gates and the qiskit transpiler."
msgstr ""

#: ../../release_notes.rst:12296
msgid "The following options for the ``\"extended_stabilizer\"`` simulation method have changed."
msgstr ""

#: ../../release_notes.rst:12299
msgid "``extended_stabilizer_measure_sampling``: This option has been replaced by the options ``extended_stabilizer_sampling_method``, which controls how we simulate qubit measurement."
msgstr ""

#: ../../release_notes.rst:12303
msgid "``extended_stabilizer_mixing_time``: This option has been renamed as ``extended_stabilizer_metropolis_mixing_time`` to clarify it only applies to the ``metropolis`` and ``resampled_metropolis`` sampling methods."
msgstr ""

#: ../../release_notes.rst:12307
msgid "``extended_stabilizer_norm_estimation_samples``: This option has been renamed to ``extended_stabilizer_norm_estimation_default_samples``."
msgstr ""

#: ../../release_notes.rst:12310
msgid "One additional option, ``extended_stabilizer_norm_estimation_repetitions`` has been added, whih controls part of the behaviour of the norm estimation sampling method."
msgstr ""

#: ../../release_notes.rst:12329 ../../release_notes.rst:13208
msgid "Fixes bug with :class:`~qiskit.providers.aer.AerProvider` where options set on the returned backends using :meth:`~qiskit.providers.aer.QasmSimulator.set_options` were stored in the provider and would persist for subsequent calls to :meth:`~qiskit.providers.aer.AerProvider.get_backend` for the same named backend. Now every call to and :meth:`~qiskit.providers.aer.AerProvider.backends` returns a new instance of the simulator backend that can be configured."
msgstr ""

#: ../../release_notes.rst:12338 ../../release_notes.rst:13217
msgid "Fixes bug in the error message returned when a circuit contains unsupported simulator instructions. Previously some supported instructions were also being listed in the error message along with the unsupported instructions."
msgstr ""

#: ../../release_notes.rst:12342 ../../release_notes.rst:13066
msgid "Fixes issue with setting :class:`~qiskit.providers.aer.QasmSimulator` basis gates when using ``\"method\"`` and ``\"noise_model\"`` options together, and when using them with a simulator constructed using :meth:`~qiskit.providers.aer.QasmSimulator.from_backend`. Now the listed basis gates will be the intersection of gates supported by the backend configuration, simulation method, and noise model basis gates. If the intersection of the noise model basis gates and simulator basis gates is empty a warning will be logged."
msgstr ""

#: ../../release_notes.rst:12351
msgid "Fix bug where the ``\"sx\"``` gate :class:`~qiskit.circuit.library.SXGate` was not listed as a supported gate in the C++ code, in ``StateOpSet`` of ``matrix_product_state.hp``."
msgstr ""

#: ../../release_notes.rst:12355 ../../release_notes.rst:13225
msgid "Fix bug where ``\"csx\"``, ``\"cu2\"``, ``\"cu3\"`` were incorrectly listed as supported basis gates for the ``\"density_matrix\"`` method of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:12359
msgid "Fix bug where parameters were passed incorrectly between functions in ``matrix_product_state_internal.cpp``, causing wrong simulation, as well as reaching invalid states, which in turn caused an infinite loop."
msgstr ""

#: ../../release_notes.rst:12363
msgid "Fixes a bug that resulted in ``c_if`` not working when the width of the conditional register was greater than 64. See `#1077 <https://github.com/Qiskit/qiskit-aer/issues/1077>`__."
msgstr ""

#: ../../release_notes.rst:12367
msgid "Fixes a bug `#1153 <https://github.com/Qiskit/qiskit-aer/issues/1153>`__) where noise on conditional gates was always being applied regardless of whether the conditional gate was actually applied based on the classical register value. Now noise on a conditional gate will only be applied in the case where the conditional gate is applied."
msgstr ""

#: ../../release_notes.rst:12373 ../../release_notes.rst:13135
msgid "Fixes a bug with nested OpenMP flag was being set to true when it shouldn't be."
msgstr ""

#: ../../release_notes.rst:12376 ../../release_notes.rst:13088
msgid "Fixes a bug when applying truncation in the matrix product state method of the QasmSimulator."
msgstr ""

#: ../../release_notes.rst:12378 ../../release_notes.rst:12575
msgid "Fixed issue `#1126 <https://github.com/Qiskit/qiskit-aer/issues/1126>`__: bug in reporting measurement of a single qubit. The bug occured when copying the measured value to the output data structure."
msgstr ""

#: ../../release_notes.rst:12382 ../../release_notes.rst:13229
msgid "In MPS, apply_kraus was operating directly on the input bits in the parameter qubits, instead of on the internal qubits. In the MPS algorithm, the qubits are constantly moving around so all operations should be applied to the internal qubits."
msgstr ""

#: ../../release_notes.rst:12387 ../../release_notes.rst:13234
msgid "When invoking MPS::sample_measure, we need to first sort the qubits to the default ordering because this is the assumption in qasm_controller.This is done by invoking the method move_all_qubits_to_sorted_ordering. It was correct in sample_measure_using_apply_measure, but missing in sample_measure_using_probabilities."
msgstr ""

#: ../../release_notes.rst:12393
msgid "Fixes bug with the :meth:`~qiskit.providers.aer.QasmSimulator.from_backend` method of the :class:`~qiskit.provider.aer.QasmSimulator` that would set the ``local`` attribute of the configuration to the backend value rather than always being set to ``True``."
msgstr ""

#: ../../release_notes.rst:12398 ../../release_notes.rst:13079
msgid "Fixes bug in :meth:`~qiskit.providers.aer.noise.NoiseModel.from_backend` and :meth:`~qiskit.providers.aer.QasmSimulator.from_backend` where :attr:`~qiskit.providers.aer.noise.NoiseModel.basis_gates` was set incorrectly for IBMQ devices with basis gate set ``['id', 'rz', 'sx', 'x', 'cx']``. Now the noise model will always have the same basis gates as the backend basis gates regardless of whether those instructions have errors in the noise model or not."
msgstr ""

#: ../../release_notes.rst:12407
msgid "Fixes an issue where the Extended `\"extended_stabilizer\"` simulation method would give incorrect results on quantum circuits with sparse output distributions. Refer to `#306 <https://github.com/Qiskit/qiskit-aer/issues/306>`__ for more information and examples."
msgstr ""

#: ../../release_notes.rst:12421
msgid "The :func:`qiskit.ignis.mitigation.expval_meas_mitigator_circuits` function has been improved so that the number of circuits generated by the function used for calibration by the CTMP method are reduced from :math:`O(n)` to :math:`O(\\log{n})` (where :math:`n` is the number of qubits)."
msgstr ""

#: ../../release_notes.rst:12432
msgid "The :func:`qiskit.ignis.verification.randomized_benchmarking_seq` function is now using the upgraded CNOTDihedral class, :class:`qiskit.ignis.verification.CNOTDihedral`, which enables performing CNOT-Dihedral Randomized Benchmarking on more than two qubits."
msgstr ""

#: ../../release_notes.rst:12437
msgid "The python package ``retworkx`` is now a requirement for installing qiskit-ignis. It replaces the previous usage of ``networkx`` (which is no longer a requirement) to get better performance."
msgstr ""

#: ../../release_notes.rst:12441
msgid "The ``scikit-learn`` dependency is no longer required and is now an optional requirement. If you're using the IQ measurement discriminators (:class:`~qiskit.ignis.measurement.IQDiscriminationFitter`, :class:`~qiskit.ignis.measurement.LinearIQDiscriminationFitter`, :class:`~qiskit.ignis.measurement.QuadraticIQDiscriminationFitter`, or :class:`~qiskit.ignis.measurement.SklearnIQDiscriminator`) you will now need to manually install scikit-learn, either by running ``pip install scikit-learn`` or when you're also installing qiskit-ignis with ``pip install qiskit-ignis[iq]``."
msgstr ""

#: ../../release_notes.rst:12457
msgid "Fixed an issue in the expectation value method :meth:`~qiskit.ignis.mitigation.TensoredExpvalMeasMitigator.expectation_value`, for the error mitigation classes :class:`~qiskit.ignis.mitigation.TensoredExpvalMeasMitigator` and :class:`~qiskit.ignis.mitigation.CTMPExpvalMeasMitigator` if the ``qubits`` kwarg was not specified it would incorrectly use the total number of qubits of the mitigator, rather than the number of classical bits in the count dictionary leading to greatly reduced performance. Fixed `#561 <https://github.com/Qiskit/qiskit-ignis/issues/561>`__"
msgstr ""

#: ../../release_notes.rst:12468 ../../release_notes.rst:13251
msgid "Fix the ``\"auto\"`` method of the :class:`~qiskit.ignis.verification.tomography.TomographyFitter`, :class:`~qiskit.ignis.verification.tomography.StateTomographyFitter`, and :class:`~qiskit.ignis.verification.tomography.ProcessTomographyFitter` to only use ``\"cvx\"`` if CVXPY is installed *and* a third-party SDP solver other than SCS is available. This is because the SCS solver has lower accuracy than other solver methods and often returns a density matrix or Choi-matrix that is not completely-positive and fails validation when used with the :func:`qiskit.quantum_info.state_fidelity` or :func:`qiskit.quantum_info.process_fidelity` functions."
msgstr ""

#: ../../release_notes.rst:12480
msgid "Aqua 0.9.0"
msgstr ""

#: ../../release_notes.rst:12482
msgid "This release officially deprecates the Qiskit Aqua project, in the future (no sooner than 3 months from this release) the Aqua project will have it's final release and be archived. All the functionality that qiskit-aqua provides has been migrated to either new packages or to other qiskit packages. The application modules that are provided by qiskit-aqua have been split into several new packages: ``qiskit-optimization``, ``qiskit-nature``, ``qiskit-machine-learning``, and ``qiskit-finance``. These packages can be installed by themselves (via the standard pip install command, ie ``pip install qiskit-nature``) or with the rest of the Qiskit metapackage as optional extras (ie, ``pip install 'qiskit[finance,optimization]'`` or ``pip install 'qiskit[all]'``. The core building blocks for algorithms and the operator flow now exist as part of qiskit-terra at :mod:`qiskit.algorithms` and :mod:`qiskit.opflow`. Depending on your existing usage of Aqua you should either use the application packages or the new modules in Qiskit Terra."
msgstr ""

#: ../../release_notes.rst:12497
msgid "For more details on how to migrate from using Qiskit Aqua you can refer to the :ref:`aqua-migration`."
msgstr ""

#: ../../release_notes.rst:12507
msgid "Qiskit 0.24.1"
msgstr ""

#: ../../release_notes.rst:12510 ../../release_notes.rst:12547
#: ../../release_notes.rst:12798 ../../release_notes.rst:12836
msgid "Terra 0.16.4"
msgstr ""

#: ../../release_notes.rst:12515 ../../release_notes.rst:12552
msgid "Aer 0.7.6"
msgstr ""

#: ../../release_notes.rst:12520 ../../release_notes.rst:12592
#: ../../release_notes.rst:12817 ../../release_notes.rst:12866
msgid "Ignis 0.5.2"
msgstr ""

#: ../../release_notes.rst:12525 ../../release_notes.rst:12597
#: ../../release_notes.rst:12822 ../../release_notes.rst:12896
msgid "Aqua 0.8.2"
msgstr ""

#: ../../release_notes.rst:12537
msgid ":meth:`qiskit.providers.ibmq.IBMQBackend.defaults` now returns the pulse defaults for the backend if the backend supports pulse. However, your provider may not support pulse even if the backend does. The ``open_pulse`` flag in backend configuration indicates whether the provider supports it."
msgstr ""

#: ../../release_notes.rst:12544
msgid "Qiskit 0.24.0"
msgstr ""

#: ../../release_notes.rst:12559
msgid "This is the first release of qiskit-aer that publishes precompiled binaries to PyPI for Linux on aarch64 (arm64). From this release onwards Linux aarch64 packages will be published and supported."
msgstr ""

#: ../../release_notes.rst:12569
msgid "Fixes a bug `#1153 <https://github.com/Qiskit/qiskit-aer/issues/1153>`__ where noise on conditional gates was always being applied regardless of whether the conditional gate was actually applied based on the classical register value. Now noise on a conditional gate will only be applied in the case where the conditional gate is applied."
msgstr ""

#: ../../release_notes.rst:12579
msgid "There was previously a mismatch between the default reported number of qubits the Aer backend objects would say were supported and the the maximum number of qubits the simulator would actually run. This was due to a mismatch between the Python code used for calculating the max number of qubits and the C++ code used for a runtime check for the max number of qubits based on the available memory. This has been correct so by default now Aer backends will allow running circuits that can fit in all the available system memory. Fixes `#1114 <https://github.com/Qiskit/qiskit-aer/issues/1126>`__"
msgstr ""

#: ../../release_notes.rst:12602
msgid "IBM Q Provider 0.12.0"
msgstr ""

#: ../../release_notes.rst:12609
msgid ":meth:`qiskit.providers.ibmq.IBMQBackend.run` method now takes one or more :class:`~qiskit.circuit.QuantumCircuit` or :class:`~qiskit.pulse.Schedule`. Use of :class:`~qiskit.qobj.QasmQobj` and :class:`~qiskit.qobj.PulseQobj` is now deprecated. Runtime configuration options, such as the number of shots, can be set via either the :meth:`~qiskit.providers.ibmq.IBMQBackend.run` method, or the :meth:`qiskit.providers.ibmq.IBMQBackend.set_options` method. The former is used as a one-time setting for the job, and the latter for all jobs sent to the backend. If an option is set in both places, the value set in :meth:`~qiskit.providers.ibmq.IBMQBackend.run` takes precedence."
msgstr ""

#: ../../release_notes.rst:12619
msgid "IBM Quantum credentials are now loaded only from sections of the ``qiskitrc`` file that start with 'ibmq'."
msgstr ""

#: ../../release_notes.rst:12627
msgid "Python 3.9 support has been added in this release. You can now run Qiskit IBMQ provider using Python 3.9."
msgstr ""

#: ../../release_notes.rst:12630
msgid ":meth:`qiskit.providers.ibmq.AccountProvider.backends` now has a new parameter `min_num_qubits` that allows you to filter by the minimum number of qubits."
msgstr ""

#: ../../release_notes.rst:12634
msgid ":meth:`qiskit.providers.ibmq.IBMQBackend.run` method now takes one or more :class:`~qiskit.circuit.QuantumCircuit` or :class:`~qiskit.pulse.Schedule`. Runtime configuration options, such as the number of shots, can be set via either the :meth:`~qiskit.providers.ibmq.IBMQBackend.run` method, or the :meth:`qiskit.providers.ibmq.IBMQBackend.set_options` method. The former is used as a one-time setting for the job, and the latter for all jobs sent to the backend. If an option is set in both places, the value set in :meth:`~qiskit.providers.ibmq.IBMQBackend.run` takes precedence. For example:"
msgstr ""

#: ../../release_notes.rst:12659 ../../release_notes.rst:13346
msgid ":class:`qiskit.providers.ibmq.experiment.Experiment` now has three additional attributes, `hub`, `group`, and `project`, that identify the provider used to create the experiment."
msgstr ""

#: ../../release_notes.rst:12663
msgid "You can now assign an ``experiment_id`` to a job when submitting it using :meth:`qiskit.providers.ibmq.IBMQBackend.run`. You can use this new field to group together a collection of jobs that belong to the same experiment. The :meth:`qiskit.providers.ibmq.IBMQBackendService.jobs` method was also updated to allow filtering by ``experiment_id``."
msgstr ""

#: ../../release_notes.rst:12669
msgid ":class:`qiskit.providers.ibmq.experiment.Experiment` now has two additional attributes:"
msgstr ""

#: ../../release_notes.rst:12672
msgid "share_level: The level at which the experiment is shared which determines who can see it when listing experiments. This can be updated."
msgstr ""

#: ../../release_notes.rst:12674
msgid "owner: The ID of the user that uploaded the experiment. This is set by the server and cannot be updated."
msgstr ""

#: ../../release_notes.rst:12677
msgid "The method :meth:`qiskit.providers.ibmq.experimentservice.ExperimentService.experiments` now accepts ``hub``, ``group``, and ``project`` as filtering keywords."
msgstr ""

#: ../../release_notes.rst:12681 ../../release_notes.rst:13350
msgid "Methods :meth:`qiskit.providers.ibmq.experiment.ExperimentService.experiments` and :meth:`qiskit.providers.ibmq.experiment.ExperimentService.analysis_results` now support a ``limit`` parameter that allows you to limit the number of experiments and analysis results returned."
msgstr ""

#: ../../release_notes.rst:12687
msgid "The method :meth:`qiskit.providers.ibmq.experimentservice.ExperimentService.experiments` now accepts ``exclude_mine`` and ``mine_only`` as filtering keywords."
msgstr ""

#: ../../release_notes.rst:12691
msgid "The method :meth:`qiskit.providers.ibmq.experimentservice.ExperimentService.experiments` now accepts ``exclude_public`` and ``public_only`` as filtering keywords."
msgstr ""

#: ../../release_notes.rst:12695
msgid ":meth:`qiskit.providers.ibmq.managed.IBMQJobManager.run` now accepts a single :class:`~qiskit.circuit.QuantumCircuit` or :class:`~qiskit.pulse.Schedule` in addition to a list of them."
msgstr ""

#: ../../release_notes.rst:12699
msgid "The :func:`~qiskit.providers.ibmq.least_busy` function now skips backends that are operational but paused, meaning they are accepting but not processing jobs."
msgstr ""

#: ../../release_notes.rst:12703
msgid "You can now pickle an :class:`~qiskit.providers.ibmq.job.IBMQJob` instance, as long as it doesn't contain custom data that is not picklable (e.g. in Qobj header)."
msgstr ""

#: ../../release_notes.rst:12707
msgid "You can now use the two new methods, :meth:`qiskit.providers.ibmq.AccountProvider.services` and :meth:`qiskit.providers.ibmq.AccountProvider.service` to find out what services are available to your account and get an instance of a particular service."
msgstr ""

#: ../../release_notes.rst:12713
msgid "The :meth:`qiskit.providers.ibmq.IBMQBackend.reservations` method now always returns the reservation scheduling modes even for reservations that you don't own."
msgstr ""

#: ../../release_notes.rst:12723
msgid "A number of previously deprecated methods and features have been removed, including:"
msgstr ""

#: ../../release_notes.rst:12726
msgid ":meth:`qiskit.providers.ibmq.job.IBMQJob.to_dict`"
msgstr ""

#: ../../release_notes.rst:12727
msgid ":meth:`qiskit.providers.ibmq.job.IBMQJob.from_dict`"
msgstr ""

#: ../../release_notes.rst:12728
msgid "`Qconfig.py` support"
msgstr ""

#: ../../release_notes.rst:12729
msgid "Use of proxy URLs that do not include protocols"
msgstr ""

#: ../../release_notes.rst:12731 ../../release_notes.rst:13362
msgid "A new parameter, ``limit`` is now the first parameter for both :meth:`qiskit.providers.ibmq.experiment.ExperimentService.experiments` and :meth:`qiskit.providers.ibmq.experiment.ExperimentService.analysis_results` methods. This ``limit`` has a default value of 10, meaning by deafult only 10 experiments and analysis results will be returned."
msgstr ""

#: ../../release_notes.rst:12737
msgid "IBM Quantum credentials are now loaded only from sections of the ``qiskitrc`` file that start with 'ibmq'. This allows the ``qiskitrc`` file to be used for other functionality."
msgstr ""

#: ../../release_notes.rst:12747
msgid "Use of :class:`~qiskit.qobj.QasmQobj` and :class:`~qiskit.qobj.PulseQobj` in the :meth:`qiskit.providers.ibmq.IBMQBackend.run` method is now deprecated. :class:`~qiskit.circuit.QuantumCircuit` and :class:`~qiskit.pulse.Schedule` should now be used instead."
msgstr ""

#: ../../release_notes.rst:12752
msgid "The ``backends`` attribute of :class:`qiskit.providers.ibmq.AccountProvider` has been renamed to ``backend`` (sigular). For backward compatibility, you can continue to use ``backends``, but it is deprecated and will be removed in a future release. The :meth:`qiskit.providers.ibmq.AccountProvider.backends` method remains unchanged. For example:"
msgstr ""

#: ../../release_notes.rst:12764
msgid "Setting of the :class:`~qiskit.providers.ibmq.job.IBMQJob` ``client_version`` attribute has been deprecated. You can, however, continue to read the value of attribute."
msgstr ""

#: ../../release_notes.rst:12768
msgid "\"The ``validate_qobj`` keyword in :meth:`qiskit.providers.ibmq.IBMQBackend.run` is deprecated and will be removed in a future release. If you're relying on this schema validation you should pull the schemas from the `Qiskit/ibmq-schemas <https://github.com/Qiskit/ibm-quantum-schemas>`_ and directly validate your payloads with that."
msgstr ""

#: ../../release_notes.rst:12780 ../../release_notes.rst:13374
msgid "Fixes the issue wherein a job could be left in the ``CREATING`` state if job submit fails half-way through."
msgstr ""

#: ../../release_notes.rst:12783
msgid "Fixes the issue wherein using Jupyter backend widget would fail if the backend's basis gates do not include the traditional u1, u2, and u3. Fixes `#844 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/844>`_"
msgstr ""

#: ../../release_notes.rst:12787 ../../release_notes.rst:13377
msgid "Fixes the infinite loop raised when passing an ``IBMQRandomService`` instance to a child process."
msgstr ""

#: ../../release_notes.rst:12790
msgid "Fixes the issue wherein a ``TypeError`` is raised if the server returns an error code but the response data is not in the expected format."
msgstr ""

#: ../../release_notes.rst:12795
msgid "Qiskit 0.23.6"
msgstr ""

#: ../../release_notes.rst:12803
msgid "Aer 0.7.5"
msgstr ""

#: ../../release_notes.rst:12810
msgid "This release is a bugfix release that fixes compatibility in the precompiled binary wheel packages with numpy versions < 1.20.0. The previous release 0.7.4 was building the binaries in a way that would require numpy 1.20.0 which has been resolved now, so the precompiled binary wheel packages will work with any numpy compatible version."
msgstr ""

#: ../../release_notes.rst:12827 ../../release_notes.rst:12900
#: ../../release_notes.rst:12938 ../../release_notes.rst:13101
#: ../../release_notes.rst:13149 ../../release_notes.rst:13339
msgid "IBM Q Provider 0.11.1"
msgstr ""

#: ../../release_notes.rst:12833
msgid "Qiskit 0.23.5"
msgstr ""

#: ../../release_notes.rst:12843
msgid "This release is a bugfix release that primarily fixes compatibility with numpy 1.20.0. This numpy release deprecated their local aliases for Python's numeric types (``np.int`` -> ``int``, ``np.float`` -> ``float``, etc.) and the usage of these aliases in Qiskit resulted in a large number of deprecation warnings being emitted. This release fixes this so you can run Qiskit with numpy 1.20.0 without those deprecation warnings."
msgstr ""

#: ../../release_notes.rst:12851
msgid "Aer 0.7.4"
msgstr ""

#: ../../release_notes.rst:12858
msgid "Fixes compatibility with numpy 1.20.0. This numpy release deprecated their local aliases for Python's numeric types (``np.int`` -> ``int``, ``np.float`` -> ``float``, etc.) and the usage of these aliases in Qiskit Aer resulted in a large number of deprecation warnings being emitted. This release fixes this so you can run Qiskit Aer with numpy 1.20.0 without those deprecation warnings."
msgstr ""

#: ../../release_notes.rst:12873
msgid "This release is a bugfix release that primarily fixes compatibility with numpy 1.20.0. It is also the first release to include support for Python 3.9. Earlier releases (including 0.5.0 and 0.5.1) worked with Python 3.9 but did not indicate this in the package metadata, and there was no upstream testing for those releases. This release fixes that and was tested on Python 3.9 (in addition to 3.6, 3.7, and 3.8)."
msgstr ""

#: ../../release_notes.rst:12885
msgid "`networkx <https://networkx.org/>`__ is explicitly listed as a dependency now. It previously was an implicit dependency as it was required for the :mod:`qiskit.ignis.verification.topological_codes` module but was not correctly listed as a depdendency as qiskit-terra also requires networkx and is also a depdency of ignis so it would always be installed in practice. However, it is necessary to list it as a requirement for future releases of qiskit-terra that will not require networkx. It's also important to correctly list the dependencies of ignis in case there were a future incompatibility between version requirements."
msgstr ""

#: ../../release_notes.rst:12906
msgid "Qiskit 0.23.4"
msgstr ""

#: ../../release_notes.rst:12909
msgid "Terra 0.16.3"
msgstr ""

#: ../../release_notes.rst:12916
msgid "Fixed an issue introduced in 0.16.2 that would cause errors when running :func:`~qiskit.compiler.transpile` on a circuit with a series of 1 qubit gates and a non-gate instruction that only operates on a qubit (e.g. :class:`~qiskit.circuit.Reset`). Fixes `#5736 <https://github.com/Qiskit/qiskit-terra/issues/5736>`__"
msgstr ""

#: ../../release_notes.rst:12923 ../../release_notes.rst:13050
msgid "Aer 0.7.3"
msgstr ""

#: ../../release_notes.rst:12928 ../../release_notes.rst:13091
#: ../../release_notes.rst:13139 ../../release_notes.rst:13244
msgid "Ignis 0.5.1"
msgstr ""

#: ../../release_notes.rst:12933 ../../release_notes.rst:13096
#: ../../release_notes.rst:13144 ../../release_notes.rst:13265
msgid "Aqua 0.8.1"
msgstr ""

#: ../../release_notes.rst:12944
msgid "Qiskit 0.23.3"
msgstr ""

#: ../../release_notes.rst:12947
msgid "Terra 0.16.2"
msgstr ""

#: ../../release_notes.rst:12954
msgid "Python 3.9 support has been added in this release. You can now run Qiskit Terra using Python 3.9."
msgstr ""

#: ../../release_notes.rst:12963
msgid "The class :class:`~qiskit.library.standard_gates.x.MCXGrayCode` will now create a ``C3XGate`` if ``num_ctrl_qubits`` is 3 and a ``C4XGate`` if ``num_ctrl_qubits`` is 4. This is in addition to the previous functionality where for any of the modes of the :class:'qiskit.library.standard_gates.x.MCXGate`, if ``num_ctrl_bits`` is 1, a ``CXGate`` is created, and if 2, a ``CCXGate`` is created."
msgstr ""

#: ../../release_notes.rst:12975
msgid "Pulse :py:class:`~qiskit.pulse.instructions.Delay` instructions are now explicitly assembled as :class:`~qiskit.qobj.PulseQobjInstruction` objects included in the :class:`~qiskit.qobj.PulseQobj` output from :func:`~qiskit.compiler.assemble`."
msgstr ""

#: ../../release_notes.rst:12980
msgid "Previously, we could ignore :py:class:`~qiskit.pulse.instructions.Delay` instructions in a :class:`~qiskit.pulse.Schedule` as part of :func:`~qiskit.compiler.assemble` as the time was explicit in the :class:`~qiskit.qobj.PulseQobj` objects. But, now with pulse gates, there are situations where we can schedule ONLY a delay, and not including the delay itself would remove the delay."
msgstr ""

#: ../../release_notes.rst:12987
msgid "Circuits with custom gate calibrations can now be scheduled with the transpiler without explicitly providing the durations of each circuit calibration."
msgstr ""

#: ../../release_notes.rst:12991
msgid "The :class:`~qiskit.transpiler.passes.BasisTranslator` and :class:`~qiskit.transpiler.passes.Unroller` passes, in some cases, had not been preserving the global phase of the circuit under transpilation. This has been fixed."
msgstr ""

#: ../../release_notes.rst:12996
msgid "A bug in :func:`qiskit.pulse.builder.frequency_offset` where when ``compensate_phase`` was set a factor of :math:`2\\pi` was missing from the appended phase."
msgstr ""

#: ../../release_notes.rst:13000
msgid "Fix the global phase of the output of the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.repeat`. If a circuit with global phase is appended to another circuit, the global phase is currently not propagated. Simulators rely on this, since the phase otherwise gets applied multiple times. This sets the global phase of :meth:`~qiskit.circuit.QuantumCircuit.repeat` to 0 before appending the repeated circuit instead of multiplying the existing phase times the number of repetitions."
msgstr ""

#: ../../release_notes.rst:13010
msgid "Fixes bug in :class:`~qiskit.quantum_info.SparsePauliOp` where multiplying by a certain non Python builtin Numpy scalar types returned incorrect values. Fixes `#5408 <https://github.com/Qiskit/qiskit-terra/issues/5408>`__"
msgstr ""

#: ../../release_notes.rst:13014
msgid "The definition of the Hellinger fidelity from has been corrected from the previous defition of :math:`1-H(P,Q)` to :math:`[1-H(P,Q)^2]^2` so that it is equal to the quantum state fidelity of P, Q as diagonal density matrices."
msgstr ""

#: ../../release_notes.rst:13019
msgid "Reduce the number of CX gates in the decomposition of the 3-controlled X gate, :class:`~qiskit.circuit.library.C3XGate`. Compiled and optimized in the `U CX` basis, now only 14 CX and 16 U gates are used instead of 20 and 22, respectively."
msgstr ""

#: ../../release_notes.rst:13024
msgid "Fixes the issue wherein using Jupyter backend widget or :meth:`qiskit.tools.backend_monitor` would fail if the backend's basis gates do not include the traditional u1, u2, and u3."
msgstr ""

#: ../../release_notes.rst:13028
msgid "When running :func:`qiskit.compiler.transpile` on a list of circuits with a single element, the function used to return a circuit instead of a list. Now, when :func:`qiskit.compiler.transpile` is called with a list, it will return a list even if that list has a single element. See `#5260 <https://github.com/Qiskit/qiskit-terra/issues/5260>`__."
msgstr ""

#: ../../release_notes.rst:13075
msgid "Fixes a bug that resulted in `c_if` not working when the width of the conditional register was greater than 64. See `#1077 <https://github.com/Qiskit/qiskit-aer/issues/1077>`__."
msgstr ""

#: ../../release_notes.rst:13107
msgid "Qiskit 0.23.2"
msgstr ""

#: ../../release_notes.rst:13110 ../../release_notes.rst:13161
msgid "Terra 0.16.1"
msgstr ""

#: ../../release_notes.rst:13115
msgid "Aer 0.7.2"
msgstr ""

#: ../../release_notes.rst:13156
msgid "Qiskit 0.23.1"
msgstr ""

#: ../../release_notes.rst:13168
msgid "Fixed an issue where an error was thrown in execute for valid circuits built with delays."
msgstr ""

#: ../../release_notes.rst:13171
msgid "The QASM definition of 'c4x' in qelib1.inc has been corrected to match the standard library definition for C4XGate."
msgstr ""

#: ../../release_notes.rst:13174
msgid "Fixes a bug in subtraction for quantum channels :math:`A - B` where :math:`B` was an :class:`~qiskit.quantum_info.Operator` object. Negation was being applied to the matrix in the Operator representation which is not equivalent to negation in the quantum channel representation."
msgstr ""

#: ../../release_notes.rst:13179
msgid "Changes the way :meth:`~qiskit.quantum_info.states.statevector.Statevector._evolve_instruction` access qubits to handle the case of an instruction with multiple registers."
msgstr ""

#: ../../release_notes.rst:13186
msgid "Aer 0.7.1"
msgstr ""

#: ../../release_notes.rst:13193
msgid "The minimum cmake version to build qiskit-aer has increased from 3.6 to 3.8. This change was necessary to enable fixing GPU version builds that support running on x86_64 CPUs lacking AVX2 instructions."
msgstr ""

#: ../../release_notes.rst:13203
msgid "qiskit-aer with GPU support will now work on systems with x86_64 CPUs lacking AVX2 instructions. Previously, the GPU package would only run if the AVX2 instructions were available. Fixes `#1023 <https://github.com/Qiskit/qiskit-aer/issues/1023>`__"
msgstr ""

#: ../../release_notes.rst:13221
msgid "Fix bug where the `\"sx\"`` gate :class:`~qiskit.circuit.library.SXGate` was not listed as a supported gate in the C++ code, in `StateOpSet` of `matrix_product_state.hp`."
msgstr ""

#: ../../release_notes.rst:13268
msgid "0.8.1"
msgstr ""

#: ../../release_notes.rst:13275
msgid "A new algorithm has been added: the Born Openheimer Potential Energy surface for the calculation of potential energy surface along different degrees of freedom of the molecule. The algorithm is called ``BOPESSampler``. It further provides functionalities of fitting the potential energy surface to an analytic function of predefined potentials.some details."
msgstr ""

#: ../../release_notes.rst:13284
msgid "Critical Issues"
msgstr ""

#: ../../release_notes.rst:13286
msgid "Be aware that ``initial_state`` parameter in ``QAOA`` has now different implementation as a result of a bug fix. The previous implementation wrongly mixed the user provided ``initial_state`` with Hadamard gates. The issue is fixed now. No attention needed if your code does not make use of the user provided ``initial_state`` parameter."
msgstr ""

#: ../../release_notes.rst:13297
msgid "optimize_svm method of qp_solver would sometimes fail resulting in an error like this `ValueError: cannot reshape array of size 1 into shape (200,1)` This addresses the issue by adding an L2 norm parameter, lambda2, which defaults to 0.001 but can be changed via the QSVM algorithm, as needed, to facilitate convergence."
msgstr ""

#: ../../release_notes.rst:13302
msgid "A method ``one_letter_symbol`` has been removed from the ``VarType`` in the latest build of DOCplex making Aqua incompatible with this version. So instead of using this method an explicit type check of variable types has been introduced in the Aqua optimization module."
msgstr ""

#: ../../release_notes.rst:13306
msgid ":meth`~qiskit.aqua.operators.state_fns.DictStateFn.sample()` could only handle real amplitudes, but it is fixed to handle complex amplitudes. `#1311 <https://github.com/Qiskit/qiskit-aqua/issues/1311>` for more details."
msgstr ""

#: ../../release_notes.rst:13310
msgid "Trotter class did not use the reps argument in constructor. `#1317 <https://github.com/Qiskit/qiskit-aqua/issues/1317>` for more details."
msgstr ""

#: ../../release_notes.rst:13313
msgid "Raise an `AquaError` if :class`qiskit.aqua.operators.converters.CircuitSampler` samples an empty operator. `#1321 <https://github.com/Qiskit/qiskit-aqua/issues/1321>` for more details."
msgstr ""

#: ../../release_notes.rst:13317
msgid ":meth:`~qiskit.aqua.operators.legacy.WeightedPauliOperator.to_opflow()` returns a correct operator when coefficients are complex numbers. `#1381 <https://github.com/Qiskit/qiskit-aqua/issues/1381>` for more details."
msgstr ""

#: ../../release_notes.rst:13321
msgid "Let backend simulators validate NoiseModel support instead of restricting to Aer only in QuantumInstance."
msgstr ""

#: ../../release_notes.rst:13324
msgid "Correctly handle PassManager on QuantumInstance ``transpile`` method by calling its ``run`` method if it exists."
msgstr ""

#: ../../release_notes.rst:13327
msgid "A bug that mixes custom ``initial_state`` in ``QAOA`` with Hadamard gates has been fixed. This doesn't change functionality of QAOA if no initial_state is provided by the user. Attention should be taken if your implementation uses QAOA with cusom ``initial_state`` parameter as the optimization results might differ."
msgstr ""

#: ../../release_notes.rst:13332
msgid "Previously, setting `seed_simulator=0` in the `QuantumInstance` did not set any seed. This was only affecting the value 0. This has been fixed."
msgstr ""

#: ../../release_notes.rst:13383
msgid "Qiskit 0.23.0"
msgstr ""

#: ../../release_notes.rst:13386
msgid "Terra 0.16.0"
msgstr ""

#: ../../release_notes.rst:13393
msgid "The 0.16.0 release includes several new features and bug fixes. The major features in this release are the following:"
msgstr ""

#: ../../release_notes.rst:13396
msgid "Introduction of scheduled circuits, where delays can be used to control the timing and alignment of operations in the circuit."
msgstr ""

#: ../../release_notes.rst:13398
msgid "Compilation of quantum circuits from classical functions, such as oracles."
msgstr ""

#: ../../release_notes.rst:13400
msgid "Ability to compile and optimize single qubit rotations over different Euler basis as well as the phase + square-root(X) basis (i.e. ``['p', 'sx']``), which will replace the older IBM Quantum basis of ``['u1', 'u2', 'u3']``."
msgstr ""

#: ../../release_notes.rst:13404
msgid "Tracking of :meth:`~qiskit.circuit.QuantumCircuit.global_phase` on the :class:`~qiskit.circuit.QuantumCircuit` class has been extended through the :mod:`~qiskit.transpiler`, :mod:`~qiskit.quantum_info`, and :mod:`~qiskit.assembler` modules, as well as the BasicAer and Aer simulators. Unitary and state vector simulations will now return global phase-correct unitary matrices and state vectors."
msgstr ""

#: ../../release_notes.rst:13411
msgid "Also of particular importance for this release is that Python 3.5 is no longer supported. If you are using Qiskit Terra with Python 3.5, the 0.15.2 release is that last version which will work."
msgstr ""

#: ../../release_notes.rst:13421
msgid "Global R gates have been added to :mod:`qiskit.circuit.library`. This includes the global R gate (:class:`~qiskit.circuit.library.GR`), global Rx (:class:`~qiskit.circuit.library.GRX`) and global Ry (:class:`~qiskit.circuit.library.GRY`) gates which are derived from the :class:`~qiskit.circuit.library.GR` gate, and global Rz ( :class:`~qiskit.circuit.library.GRZ`) that is defined in a similar way to the :class:`~qiskit.circuit.library.GR` gates. The global R gates are defined on a number of qubits simultaneously, and act as a direct sum of R gates on each qubit."
msgstr ""

#: ../../release_notes.rst:13444
msgid "will create a :class:`~qiskit.circuit.QuantumCircuit` on a :class:`~qiskit.circuit.QuantumRegister` of 3 qubits and perform a :class:`~qiskit.circuit.library.RGate` of an angle :math:`\\theta = \\frac{\\pi}{3}` about an axis in the xy-plane of the Bloch spheres that makes an angle of :math:`\\phi = \\frac{2\\pi}{3}` with the x-axis on each qubit."
msgstr ""

#: ../../release_notes.rst:13451
msgid "A new color scheme, ``iqx``, has been added to the ``mpl`` backend for the circuit drawer :func:`qiskit.visualization.circuit_drawer` and :meth:`qiskit.circuit.QuantumCircuit.draw`. This uses the same color scheme as the Circuit Composer on the IBM Quantum Experience website. There are now 3 available color schemes - ``default``, ``iqx``, and ``bw``."
msgstr ""

#: ../../release_notes.rst:13457
msgid "There are two ways to select a color scheme. The first is to use a user config file, by default in the ``~/.qiskit`` directory, in the file ``settings.conf`` under the ``[Default]`` heading, a user can enter ``circuit_mpl_style = iqx`` to select the ``iqx`` color scheme."
msgstr ""

#: ../../release_notes.rst:13462
msgid "The second way is to add ``{'name': 'iqx'}`` to the ``style`` kwarg to the ``QuantumCircuit.draw`` method or to the ``circuit_drawer`` function. The second way will override the setting in the settings.conf file. For example:"
msgstr ""

#: ../../release_notes.rst:13476
msgid "In the ``style`` kwarg for the the circuit drawer :func:`qiskit.visualization.circuit_drawer` and :meth:`qiskit.circuit.QuantumCircuit.draw` the ``displaycolor`` field with the ``mpl`` backend now allows for entering both the gate color and the text color for each gate type in the form ``(gate_color, text_color)``.  This allows the use of light and dark gate colors with contrasting text colors. Users can still set only the gate color, in which case the ``gatetextcolor`` field will be used. Gate colors can be set in the ``style`` dict for any number of gate types, from one to the entire ``displaycolor`` dict. For example:"
msgstr ""

#: ../../release_notes.rst:13497
msgid "or"
msgstr ""

#: ../../release_notes.rst:13504
msgid "Two alignment contexts are added to the pulse builder (:mod:`qiskit.pulse.builder`) to facilitate writing a repeated pulse sequence with delays."
msgstr ""

#: ../../release_notes.rst:13508
msgid ":func:`qiskit.pulse.builder.align_equispaced` inserts delays with equivalent length in between pulse schedules within the context."
msgstr ""

#: ../../release_notes.rst:13510
msgid ":func:`qiskit.pulse.builder.align_func` offers more advanced control of pulse position. This context takes a callable that calculates a fractional coordinate of i-th pulse and aligns pulses within the context. This makes coding of dynamical decoupling easy."
msgstr ""

#: ../../release_notes.rst:13515
msgid "A ``rep_delay`` parameter has been added to the :class:`~qiskit.qobj.QasmQobj` class under the run configuration, :class:`~qiskit.qobj.QasmQobjConfig`. This parameter is used to denote the time between program executions. It must be chosen from the backend range given by the :class:`~qiskit.providers.models.BackendConfiguration` method :meth:`~qiskit.providers.models.BackendConfiguration.rep_delay_range`. If a value is not provided a backend default, :attr:`qiskit.providers.models.BackendConfiguration.default_rep_delay`, will be used. ``rep_delay`` will only work on backends which allow for dynamic repetition time. This is can be checked with the :class:`~qiskit.providers.models.BackendConfiguration` property :attr:`~qiskit.providers.models.BackendConfiguration.dynamic_reprate_enabled`."
msgstr ""

#: ../../release_notes.rst:13529
msgid "The ``qobj_schema.json`` JSON Schema file in :mod:`qiskit.schemas` has been updated to include the ``rep_delay`` as an optional configuration property for QASM Qobjs."
msgstr ""

#: ../../release_notes.rst:13533
msgid "The ``backend_configuration_schema.json`` JSON Schema file in :mod:`qiskit.schemas` has been updated to include ``dynamic_reprate_enabled``, ``rep_delay_range`` and ``default_rep_delay`` as optional properties for a QASM backend configuration payload."
msgstr ""

#: ../../release_notes.rst:13538
msgid "A new optimization pass, :class:`qiskit.transpiler.passes.TemplateOptimization` has been added to the transpiler. This pass applies a template matching algorithm described in `arXiv:1909.05270 <https://arxiv.org/pdf/1909.05270.pdf>`__ that replaces all compatible maximal matches in the circuit."
msgstr ""

#: ../../release_notes.rst:13544
msgid "To implement this new transpiler pass a new module, ``template_circuits``, was added to the circuit library (:mod:`qiskit.circuit.library`). This new module contains all the Toffoli circuit templates used in the :class:`~qiskit.transpiler.passes.TemplateOptimization`."
msgstr ""

#: ../../release_notes.rst:13549
msgid "This new pass is **not** currently included in the preset pass managers (:mod:`qiskit.transpiler.preset_passmanagers`), to use it you will need to create a custom :class:`~qiskit.transpiler.PassManager`."
msgstr ""

#: ../../release_notes.rst:13553
msgid "A new version of the providers interface has been added. This new interface, which can be found in :mod:`qiskit.providers`, provides a new versioning mechanism that will enable changes to the interface to happen in a compatible manner over time. The new interface should be simple to migrate existing providers, as it is mostly identical except for the explicit versioning."
msgstr ""

#: ../../release_notes.rst:13560
msgid "Besides having explicitly versioned abstract classes the key changes for the new interface are that the :class:`~qiskit.providers.BackendV1` method :meth:`~qiskit.providers.BackendV1.run` can now take a :class:`~qiskit.circuits.QuantumCircuit` or :class:`~qiskit.pulse.Schedule` object as inputs instead of ``Qobj`` objects. To go along with that options are now part of a backend class so that users can configure run time options when running with a circuit. The final change is that :class:`qiskit.providers.JobV1` can now be synchronous or asynchronous, the exact configuration and method for configuring this is up to the provider, but there are interface hook points to make it explicit which execution model a job is running under in the ``JobV1`` abstract class."
msgstr ""

#: ../../release_notes.rst:13573
msgid "A new kwarg, ``inplace``, has been added to the function :func:`qiskit.result.marginal_counts`. This kwarg is used to control whether the contents are marginalized in place or a new copy is returned, for :class:`~qiskit.result.Result` object input. This parameter does not have any effect for an input ``dict`` or :class:`~qiskit.result.Counts` object."
msgstr ""

#: ../../release_notes.rst:13579
msgid "An initial version of a classical function compiler, :mod:`qiskit.circuit.classicalfunction`, has been added. This enables compiling typed python functions (operating only on bits of type ``Int1`` at the moment) into :class:`~qiskit.circuit.QuantumCircuit` objects. For example:"
msgstr ""

#: ../../release_notes.rst:13599
msgid "The parameter ``registerless=False`` in the :class:`qiskit.circuit.classicalfunction.ClassicalFunction` method :meth:`~qiskit.circuit.classicalfunction.ClassicalFunction.synth` creates a circuit with registers refering to the parameter names. For example:"
msgstr ""

#: ../../release_notes.rst:13609
msgid "A decorated classical function can be used the same way as any other quantum gate when appending it to a circuit."
msgstr ""

#: ../../release_notes.rst:13618
msgid "The ``GROVER_ORACLE`` gate is synthesized when its decomposition is required."
msgstr ""

#: ../../release_notes.rst:13624
msgid "The feature requires ``tweedledum``, a library for synthesizing quantum circuits, that can be installed via pip with ``pip install tweedledum``."
msgstr ""

#: ../../release_notes.rst:13627
msgid "A new class :class:`qiskit.circuit.Delay` for representing a delay instruction in a circuit has been added. A new method :meth:`~qiskit.circuit.QuantumCircuit.delay` is now available for easily appending delays to circuits. This makes it possible to describe timing-sensitive experiments (e.g. T1/T2 experiment) in the circuit level."
msgstr ""

#: ../../release_notes.rst:13643
msgid "A new argument ``scheduling_method`` for :func:`qiskit.compiler.transpile` has been added. It is required when transpiling circuits with delays.  If ``scheduling_method`` is specified, the transpiler returns a scheduled circuit such that all idle times in it are padded with delays (i.e. start time of each instruction is uniquely determined). This makes it possible to see how scheduled instructions (gates) look in the circuit level."
msgstr ""

#: ../../release_notes.rst:13664
msgid "See also :func:`~qiskit.visualization.timeline_drawer` for the best visualization of scheduled circuits."
msgstr ""

#: ../../release_notes.rst:13667
msgid "A new fuction :func:`qiskit.compiler.sequence` has been also added so that we can convert a scheduled circuit into a :class:`~qiskit.pulse.Schedule` to make it executable on a pulse-enabled backend."
msgstr ""

#: ../../release_notes.rst:13677
msgid "The :func:`~qiskit.compiler.schedule` has been updated so that it can schedule circuits with delays. Now there are two paths to schedule a circuit with delay:"
msgstr ""

#: ../../release_notes.rst:13693
msgid "Refer to the release notes and documentation for :func:`~qiskit.compiler.transpile` and :func:`~qiskit.compiler.sequence` for the details on the other path."
msgstr ""

#: ../../release_notes.rst:13697
msgid "Added the :class:`~qiskit.circuit.library.GroverOperator` to the circuit library (:mod:`qiskit.circuit.library`) to construct the Grover operator used in Grover's search algorithm and Quantum Amplitude Amplification/Estimation. Provided with an oracle in form of a circuit, ``GroverOperator`` creates the textbook Grover operator. To generalize this for amplitude amplification and use a generic operator instead of Hadamard gates as state preparation, the ``state_in`` argument can be used."
msgstr ""

#: ../../release_notes.rst:13706
msgid "The :class:`~qiskit.pulse.InstructionScheduleMap` methods :meth:`~qiskit.pulse.InstructionScheduleMap.get` and :meth:`~qiskit.pulse.InstructionScheduleMap.pop` methods now take :class:`~qiskit.circuit.ParameterExpression` instances in addition to numerical values for schedule generator parameters. If the generator is a function, expressions may be bound before or within the function call. If the generator is a :class:`~qiskit.pulse.ParametrizedSchedule`, expressions must be bound before the schedule itself is bound/called."
msgstr ""

#: ../../release_notes.rst:13716
msgid "A new class :class:`~qiskit.circuit.library.LinearAmplitudeFunction` was added to the circuit library (:mod:`qiskit.circuit.library`) for mapping (piecewise) linear functions on qubit amplitudes,"
msgstr ""

#: ../../release_notes.rst:13720
msgid "F|x\\rangle |0\\rangle = \\sqrt{1 - f(x)}|x\\rangle |0\\rangle + \\sqrt{f(x)}|x\\rangle |1\\rangle"
msgstr ""

#: ../../release_notes.rst:13725
msgid "The mapping is based on a controlled Pauli Y-rotations and a Taylor approximation, as described in https://arxiv.org/abs/1806.06893. This circuit can be used to compute expectation values of linear functions using the quantum amplitude estimation algorithm."
msgstr ""

#: ../../release_notes.rst:13730
msgid "The new jupyter magic ``monospaced_output`` has been added to the :mod:`qiskit.tools.jupyter` module. This magic sets the Jupyter notebook output font to \"Courier New\", when possible. When used this fonts returns text circuit drawings that are better aligned."
msgstr ""

#: ../../release_notes.rst:13740
msgid "A new transpiler pass, :class:`~qiskit.transpiler.passes.Optimize1qGatesDecomposition`, has been added. This transpiler pass is an alternative to the existing :class:`~qiskit.transpiler.passes.Optimize1qGates` that uses the :class:`~qiskit.quantum_info.OneQubitEulerDecomposer` class to decompose and simplify a chain of single qubit gates. This method is compatible with any basis set, while :class:`~qiskit.transpiler.passes.Optimize1qGates` only works for u1, u2, and u3. The default pass managers for ``optimization_level`` 1, 2, and 3 have been updated to use this new pass if the basis set doesn't include u1, u2, or u3."
msgstr ""

#: ../../release_notes.rst:13751
msgid "The :class:`~qiskit.quantum_info.OneQubitEulerDecomposer` now supports two new basis, ``'PSX'`` and ``'U'``. These can be specified with the ``basis`` kwarg on the constructor. This will decompose the matrix into a circuit using :class:`~qiskit.circuit.library.PGate` and :class:`~qiskit.circuit.library.SXGate` for ``'PSX'``, and :class:`~qiskit.circuit.library.UGate` for ``'U'``."
msgstr ""

#: ../../release_notes.rst:13758
msgid "A new method :meth:`~qiskit.transpiler.PassManager.remove` has been added to the :class:`qiskit.transpiler.PassManager` class. This method enables removing a pass from a :class:`~qiskit.transpiler.PassManager` instance. It works on indexes, similar to :meth:`~qiskit.transpiler.PassManager.replace`. For example, to remove the :class:`~qiskit.transpiler.passes.RemoveResetInZeroState` pass from the pass manager used at optimization level 1:"
msgstr ""

#: ../../release_notes.rst:13780
msgid "The stage ``[1]`` with ``RemoveResetInZeroState`` can be removed like this:"
msgstr ""

#: ../../release_notes.rst:13792
msgid "Several classes to load probability distributions into qubit amplitudes; :class:`~qiskit.circuit.library.UniformDistribution`, :class:`~qiskit.circuit.library.NormalDistribution`, and :class:`~qiskit.circuit.library.LogNormalDistribution` were added to the circuit library (:mod:`qiskit.circuit.library`). The normal and log-normal distribution support both univariate and multivariate distributions. These circuits are central to applications in finance where quantum amplitude estimation is used."
msgstr ""

#: ../../release_notes.rst:13801
msgid "Support for pulse gates has been added to the :class:`~qiskit.circuit.QuantumCircuit` class. This enables a :class:`~qiskit.circuit.QuantumCircuit` to override (for basis gates) or specify (for standard and custom gates) a definition of a :class:`~qiskit.circuit.Gate` operation in terms of time-ordered signals across hardware channels. In other words, it enables the option to provide pulse-level custom gate calibrations."
msgstr ""

#: ../../release_notes.rst:13809
msgid "The circuits are built exactly as before. For example::"
msgstr ""

#: ../../release_notes.rst:13822
msgid "Then, the calibration for the gate can be registered using the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.add_calibration` which takes a :class:`~qiskit.pulse.Schedule` definition as well as the qubits and parameters that it is defined for::"
msgstr ""

#: ../../release_notes.rst:13839
msgid "Previously, this functionality could only be used through complete Pulse Schedules. Additionally, circuits can now be submitted to backends with your custom definitions (dependent on backend support)."
msgstr ""

#: ../../release_notes.rst:13843
msgid "Circuits with pulse gates can still be lowered to a :class:`~qiskit.pulse.Schedule` by using the :func:`~qiskit.compiler.schedule` function."
msgstr ""

#: ../../release_notes.rst:13847
msgid "The calibrated gate can also be transpiled using the regular transpilation process::"
msgstr ""

#: ../../release_notes.rst:13852
msgid "The transpiled circuit will leave the calibrated gates on the same qubit as the original circuit and will not unroll them to the basis gates."
msgstr ""

#: ../../release_notes.rst:13855
msgid "Support for disassembly of :class:`~qiskit.qobj.PulseQobj` objects has been added to the :func:`qiskit.assembler.disassemble` function. For example:"
msgstr ""

#: ../../release_notes.rst:13879
msgid "A new kwarg, ``coord_type`` has been added to :func:`qiskit.visualization.plot_bloch_vector`. This kwarg enables changing the coordinate system used for the input parameter that describes the positioning of the vector on the Bloch sphere in the generated visualization. There are 2 supported values for this new kwarg, ``'cartesian'`` (the default value) and ``'spherical'``. If the ``coord_type`` kwarg is set to ``'spherical'`` the list of parameters taken in are of the form ``[r, theta,  phi]`` where ``r`` is the radius, ``theta`` is the inclination from +z direction, and ``phi`` is the azimuth from +x direction. For example:"
msgstr ""

#: ../../release_notes.rst:13918
msgid "Pulse :py:class:`~qiskit.pulse.Schedule` objects now support using :py:class:`~qiskit.circuit.ParameterExpression` objects for parameters."
msgstr ""

#: ../../release_notes.rst:13939
msgid "Parameter assignment is done via the :meth:`~qiskit.pulse.Schedule.assign_parameters` method::"
msgstr ""

#: ../../release_notes.rst:13945
msgid "Expressions and partial assignment also work, such as::"
msgstr ""

#: ../../release_notes.rst:13952
msgid "A new visualization function :func:`~qiskit.visualization.timeline_drawer` was added to the :mod:`qiskit.visualization` module."
msgstr ""

#: ../../release_notes.rst:13974
msgid "Type checking for the ``params`` kwarg of the constructor for the :class:`~qiskit.circuit.Gate` class and its subclasses has been changed. Previously all :class:`~qiskit.circuit.Gate` parameters had to be in a set of allowed types defined in the :class:`~qiskit.circuit.Instruction` class. Now a new method, :meth:`~qiskit.circuit.Gate.validate_parameter` is used to determine if a parameter type is valid or not. The definition of this method in a subclass will take priority over its parent. For example, :class:`~qiskit.extensions.UnitaryGate` accepts a parameter of the type ``numpy.ndarray`` and defines a custom :meth:`~qiskit.extensionst.UnitaryGate.validate_parameter` method that returns the parameter if it's an ``numpy.ndarray``. This takes priority over the function defined in its parent class :class:`~qiskit.circuit.Gate`. If :class:`~qiskit.extensions.UnitaryGate` were to be used as parent for a new class, this ``validate_parameter`` method would be used unless the new child class defines its own method."
msgstr ""

#: ../../release_notes.rst:13991
msgid "The previously deprecated methods, arguments, and properties named ``n_qubits`` and ``numberofqubits``  have been removed. These were deprecated in the 0.13.0 release. The full set of changes are:"
msgstr ""

#: ../../release_notes.rst:14001 ../../release_notes.rst:19296
msgid ":class:`~qiskit.circuit.QuantumCircuit`"
msgstr ""

#: ../../release_notes.rst:14002 ../../release_notes.rst:14015
#: ../../release_notes.rst:14018 ../../release_notes.rst:19297
#: ../../release_notes.rst:19310
msgid "``n_qubits``"
msgstr ""

#: ../../release_notes.rst:14003
msgid ":class:`~qiskit.circuit.QuantumCircuit.num_qubits`"
msgstr ""

#: ../../release_notes.rst:14004 ../../release_notes.rst:19299
msgid ":class:`~qiskit.quantum_info.Pauli`"
msgstr ""

#: ../../release_notes.rst:14005 ../../release_notes.rst:19300
msgid "``numberofqubits``"
msgstr ""

#: ../../release_notes.rst:14006
msgid ":attr:`~qiskit.quantum_info.Pauli.num_qubits`"
msgstr ""

#: ../../release_notes.rst:14011 ../../release_notes.rst:19306
msgid "Function"
msgstr ""

#: ../../release_notes.rst:14012 ../../release_notes.rst:19307
msgid "Old Argument"
msgstr ""

#: ../../release_notes.rst:14013 ../../release_notes.rst:19308
msgid "New Argument"
msgstr ""

#: ../../release_notes.rst:14014
msgid ":func:`qiskit.circuit.random.random_circuit`"
msgstr ""

#: ../../release_notes.rst:14016 ../../release_notes.rst:14019
#: ../../release_notes.rst:19311 ../../release_notes.rst:19314
msgid "``num_qubits``"
msgstr ""

#: ../../release_notes.rst:14017
msgid ":class:`qiskit.circuit.library.MSGate`"
msgstr ""

#: ../../release_notes.rst:14021
msgid "Inserting a parameterized :class:`~qiskit.circuit.Gate` instance into a :class:`~qiskit.circuit.QuantumCircuit` now creates a copy of that gate which is used in the circuit. If changes are made to the instance inserted into the circuit it will no longer be reflected in the gate in the circuit. This change was made to fix an issue when inserting a single parameterized :class:`~qiskit.circuit.Gate` object into multiple circuits."
msgstr ""

#: ../../release_notes.rst:14028
msgid "The function :func:`qiskit.result.marginal_counts` now, by default, does not modify the :class:`qiskit.result.Result` instance parameter. Previously, the ``Result`` object was always modified in place. A new kwarg ``inplace`` has been added :func:`~qiskit.result.marginal_counts` which enables using the previous behavior when ``inplace=True`` is set."
msgstr ""

#: ../../release_notes.rst:14035
msgid "The :class:`~qiskit.circuit.library.U3Gate` definition has been changed to be in terms of the :class:`~qiskit.circuit.library.UGate` class. The :class:`~qiskit.circuit.library.UGate` class has no definition. It is therefore not possible to unroll **every** circuit in terms of U3 and CX anymore. Instead, U and CX can be used for **every** circuit."
msgstr ""

#: ../../release_notes.rst:14041
msgid "The deprecated support for running Qiskit Terra with Python 3.5 has been removed. To use Qiskit Terra from this release onward you will now need to use at least Python 3.6. If you are using Python 3.5 the last version which will work is Qiskit Terra 0.15.2."
msgstr ""

#: ../../release_notes.rst:14046
msgid "In the :class:`~qiskit.providers.models.PulseBackendConfiguration` in the ``hamiltonian`` attributes the ``vars`` field  is now returned in a unit of Hz instead of the previously used GHz. This change was made to be consistent with the units used with the other attributes in the class."
msgstr ""

#: ../../release_notes.rst:14052
msgid "The previously deprecated support for passing in a dictionary as the first positional argument to :class:`~qiskit.dagcircuit.DAGNode` constructor has been removed. Using a dictonary for the first positional argument was deprecated in the 0.13.0 release. To create a :class:`~qiskit.dagcircuit.DAGNode` object now you should directly pass the attributes as kwargs on the constructor."
msgstr ""

#: ../../release_notes.rst:14059
msgid "The keyword arguments for the circuit gate methods (for example: :class:`qiskit.circuit.QuantumCircuit.cx`) ``q``, ``ctl*``, and ``tgt*``, which were deprecated in the 0.12.0 release, have been removed. Instead, only  ``qubit``, ``control_qubit*`` and ``target_qubit*`` can be used as named arguments for these methods."
msgstr ""

#: ../../release_notes.rst:14065
msgid "The previously deprecated module ``qiskit.extensions.standard`` has been removed. This module has been deprecated since the 0.14.0 release. The :mod:`qiskit.circuit.library` can be used instead. Additionally, all the gate classes previously in ``qiskit.extensions.standard`` are still importable from :mod:`qiskit.extensions`."
msgstr ""

#: ../../release_notes.rst:14072
msgid "The previously deprecated gates in the module ``qiskit.extensions.quantum_initializer``: ``DiagGate``, `UCG``, ``UCPauliRotGate``, ``UCRot``, ``UCRXGate``, ``UCX``, ``UCRYGate``, ``UCY``, ``UCRZGate``, ``UCZ`` have been removed. These were all deprecated in the 0.14.0 release and have alternatives available in the circuit library (:mod:`qiskit.circuit.library`)."
msgstr ""

#: ../../release_notes.rst:14079
msgid "The previously deprecated :class:`qiskit.circuit.QuantumCircuit` gate method :meth:`~qiskit.circuit.QuantumCircuit.iden` has been removed. This was deprecated in the 0.13.0 release and :meth:`~qiskit.circuit.QuantumCircuit.i` or :meth:`~qiskit.circuit.QuantumCircuit.id` can be used instead."
msgstr ""

#: ../../release_notes.rst:14089
msgid "The use of a ``numpy.ndarray`` for a parameter in the ``params`` kwarg for the constructor of the :class:`~qiskit.circuit.Gate` class and subclasses has been deprecated and will be removed in future releases. This was done as part of the refactoring of how ``parms`` type checking is handled for the :class:`~qiskit.circuit.Gate` class. If you have a custom gate class which is a subclass of :class:`~qiskit.circuit.Gate` directly (or via a different parent in the hierarchy) that accepts an ``ndarray`` parameter, you should define a custom :meth:`~qiskit.circuit.Gate.validate_parameter` method for your class that will return the allowed parameter type. For example::"
msgstr ""

#: ../../release_notes.rst:14108
msgid "The :attr:`~qiskit.circuit.library.PiecewiseLinearPauliRotations.num_ancilla_qubits` property of the :class:`~qiskit.circuit.library.PiecewiseLinearPauliRotations` and :class:`~qiskit.circuit.library.PolynomialPauliRotations` classes has been deprecated and will be removed in a future release. Instead the property :attr:`~qiskit.circuit.library.PolynomialPauliRotations.num_ancillas` should be used instead. This was done to make it consistent with the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.num_ancillas`."
msgstr ""

#: ../../release_notes.rst:14118
msgid "The :class:`qiskit.circuit.library.MSGate` class has been deprecated, but will remain in place to allow loading of old jobs. It has been replaced with the :class:`qiskit.circuit.library.GMS` class which should be used instead."
msgstr ""

#: ../../release_notes.rst:14123
msgid "The :class:`~qiskit.transpiler.passes.MSBasisDecomposer` transpiler pass has been deprecated and will be removed in a future release. The :class:`qiskit.transpiler.passes.BasisTranslator` pass can be used instead."
msgstr ""

#: ../../release_notes.rst:14128
msgid "The :class:`~qiskit.circuit.QuantumCircuit` methods ``u1``, ``u2`` and ``u3`` are now deprecated. Instead the following replacements can be used."
msgstr ""

#: ../../release_notes.rst:14138
msgid "The gate classes themselves, :class:`~qiskit.circuit.library.U1Gate`, :class:`~qiskit.circuit.library.U2Gate` and :class:`~qiskit.circuit.library.U3Gate` remain, to allow loading of old jobs."
msgstr ""

#: ../../release_notes.rst:14148
msgid "The :class:`~qiskit.result.Result` class's methods :meth:`~qiskit.result.Result.data`, :meth:`~qiskit.result.Result.get_memory`, :meth:`~qiskit.result.Result.get_counts`,  :meth:`~qiskit.result.Result.get_unitary`, and :meth:`~qiskit.result.Result.get_statevector ` will now emit a warning when the ``experiment`` kwarg is specified for attempting to fetch results using either a :class:`~qiskit.circuit.QuantumCircuit` or :class:`~qiskit.pulse.Schedule` instance, when more than one entry matching the instance name is present in the ``Result`` object. Note that only the first entry matching this name will be returned. Fixes `#3207 <https://github.com/Qiskit/qiskit-terra/issues/3207>`__"
msgstr ""

#: ../../release_notes.rst:14159
msgid "The :class:`qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.append` can now be used to insert one parameterized gate instance into multiple circuits. This fixes a previous issue where inserting a single parameterized :class:`~qiskit.circuit.Gate` object into multiple circuits would cause failures when one circuit had a parameter assigned. Fixes `#4697 <https://github.com/Qiskit/qiskit-terra/issues/4697>`__"
msgstr ""

#: ../../release_notes.rst:14167
msgid "Previously the :func:`qiskit.execute.execute` function would incorrectly disallow both the ``backend`` and ``pass_manager`` kwargs to be specified at the same time. This has been fixed so that both ``backend`` and ``pass_manager`` can be used together on calls to :func:`~qiskit.execute.execute`. Fixes `#5037 <https://github.com/Qiskit/qiskit-terra/issues/5037>`__"
msgstr ""

#: ../../release_notes.rst:14174
msgid "The :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.unitary` method has been fixed to accept a single integer for the ``qarg`` argument (when adding a 1-qubit unitary). The allowed types for the ``qargs`` argument are now ``int``, :class:`~qiskit.circuit.Qubit`, or a list of integers. Fixes `#4944 <https://github.com/Qiskit/qiskit-terra/issues/4944>`__"
msgstr ""

#: ../../release_notes.rst:14181
msgid "Previously, calling :meth:`~qiskit.circuit.library.BlueprintCircuit.inverse` on a :class:`~qiskit.circuit.library.BlueprintCircuit` object could fail if its internal data property was not yet populated. This has been fixed so that the calling :meth:`~qiskit.circuit.library.BlueprintCircuit.inverse` will populate the internal data before generating the inverse of the circuit. Fixes `#5140 <https://github.com/Qiskit/qiskit-terra/issues/5140>`__"
msgstr ""

#: ../../release_notes.rst:14189 ../../release_notes.rst:15362
msgid "Fixed an issue when creating a :class:`qiskit.result.Counts` object from an empty data dictionary. Now this will create an empty :class:`~qiskit.result.Counts` object. The :meth:`~qiskit.result.Counts.most_frequent` method is also updated to raise a more descriptive exception when the object is empty. Fixes `#5017 <https://github.com/Qiskit/qiskit-terra/issues/5017>`__"
msgstr ""

#: ../../release_notes.rst:14196
msgid "Fixes a bug where setting ``ctrl_state`` of a :class:`~qiskit.extensions.UnitaryGate` would be applied twice; once in the creation of the matrix for the controlled unitary and again when calling the :meth:`~qiskit.circuit.ControlledGate.definition` method of the :class:`qiskit.circuit.ControlledGate` class. This would give the appearence that setting ``ctrl_state`` had no effect."
msgstr ""

#: ../../release_notes.rst:14203
msgid "Previously the :class:`~qiskit.circuit.ControlledGate` method :meth:`~qiskit.circuit.ControlledGate.inverse` would not preserve the ``ctrl_state`` parameter in some cases. This has been fixed so that calling :meth:`~qiskit.circuit.ControlledGate.inverse` will preserve the value ``ctrl_state`` in its output."
msgstr ""

#: ../../release_notes.rst:14209
msgid "Fixed a bug in the ``mpl`` output backend of the circuit drawer :meth:`qiskit.circuit.QuantumCircuit.draw` and :func:`qiskit.visualization.circuit_drawer` that would cause the drawer to fail if the ``style`` kwarg was set to a string. The correct behavior would be to treat that string as a path to a JSON file containing the style sheet for the visualization. This has been fixed, and warnings are raised if the JSON file for the style sheet can't be loaded."
msgstr ""

#: ../../release_notes.rst:14218
msgid "Fixed an error where loading a QASM file via :meth:`~qiskit.circuit.QuantumCircuit.from_qasm_file` or :meth:`~qiskit.circuit.QuantumCircuit.from_qasm_str` would fail if a ``u``, ``phase(p)``, ``sx``, or ``sxdg`` gate were present in the QASM file. Fixes `#5156 <https://github.com/Qiskit/qiskit-terra/issues/5151>`__"
msgstr ""

#: ../../release_notes.rst:14225
msgid "Fixed a bug that would potentially cause registers to be mismapped when unrolling/decomposing a gate defined with only one 2-qubit operation."
msgstr ""

#: ../../release_notes.rst:14229
msgid "Aer 0.7.0"
msgstr ""

#: ../../release_notes.rst:14236
msgid "This 0.7.0 release includes numerous performance improvements and significant enhancements to the simulator interface, and drops support for Python 3.5. The main interface changes are configurable simulator backends, and constructing preconfigured simulators from IBMQ backends. Noise model an basis gate support has also been extended for most of the Qiskit circuit library standard gates, including new support for 1 and 2-qubit rotation gates. Performance improvements include adding SIMD support to the density matrix and unitary simulation methods, reducing the used memory and improving the performance of circuits using statevector and density matrix snapshots, and adding support for Kraus instructions to the gate fusion circuit optimization for greatly improving the performance of noisy statevector simulations."
msgstr ""

#: ../../release_notes.rst:14253
msgid "Adds basis gate support for the :class:`qiskit.circuit.Delay` instruction to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and :class:`~qiskit.providers.aer.QasmSimulator`. Note that this gate is treated as an identity gate during simulation and the delay length parameter is ignored."
msgstr ""

#: ../../release_notes.rst:14260
msgid "Adds basis gate support for the single-qubit gate :class:`qiskit.circuit.library.UGate` to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and the ``\"statevector\"``, ``\"density_matrix\"``, ``\"matrix_product_state\"``, and ``\"extended_stabilizer\"`` methods of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:14268
msgid "Adds basis gate support for the phase gate :class:`qiskit.circuit.library.PhaseGate` to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and the ``\"statevector\"``, ``\"density_matrix\"``, ``\"matrix_product_state\"``, and ``\"extended_stabilizer\"`` methods of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:14277
msgid "Adds basis gate support for the controlled-phase gate :class:`qiskit.circuit.library.CPhaseGate` to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and the ``\"statevector\"``, ``\"density_matrix\"``, and ``\"matrix_product_state\"`` methods of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:14286
msgid "Adds support for the multi-controlled phase gate :class:`qiskit.circuit.library.MCPhaseGate` to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and the ``\"statevector\"`` method of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:14293
msgid "Adds support for the :math:`\\sqrt(X)` gate :class:`qiskit.circuit.library.SXGate` to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:14299
msgid "Adds support for 1 and 2-qubit Qiskit circuit library rotation gates :class:`~qiskit.circuit.library.RXGate`, :class:`~qiskit.circuit.library.RYGate`, :class:`~qiskit.circuit.library.RZGate`, :class:`~qiskit.circuit.library.RGate`, :class:`~qiskit.circuit.library.RXXGate`, :class:`~qiskit.circuit.library.RYYGate`, :class:`~qiskit.circuit.library.RZZGate`, :class:`~qiskit.circuit.library.RZXGate` to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and the ``\"statevector\"`` and ``\"density_matrix\"`` methods of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:14309
msgid "Adds support for multi-controlled rotation gates ``\"mcr\"``, ``\"mcrx\"``, ``\"mcry\"``, ``\"mcrz\"`` to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and the ``\"statevector\"`` method of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:14316
msgid "Make simulator backends configurable. This allows setting persistant options such as simulation method and noise model for each simulator backend object."
msgstr ""

#: ../../release_notes.rst:14319
msgid "The :class:`~qiskit.providers.aer.QasmSimulator` and :class:`~qiskit.providers.aer.PulseSimulator` can also be configured from an :class:`~qiskit.providers.ibmq.IBMQBackend` backend object using the `:meth:`~qiskit.providers.aer.QasmSimulator.from_backend` method. For the :class:`~qiskit.providers.aer.QasmSimulator` this will configure the coupling map, basis gates, and basic device noise model based on the backend configuration and properties. For the :class:`~qiskit.providers.aer.PulseSimulator` the system model and defaults will be configured automatically from the backend configuration, properties and defaults."
msgstr ""

#: ../../release_notes.rst:14329
msgid "For example a noisy density matrix simulator backend can be constructed as ``QasmSimulator(method='density_matrix', noise_model=noise_model)``, or an ideal matrix product state simulator as ``QasmSimulator(method='matrix_product_state')``."
msgstr ""

#: ../../release_notes.rst:14333
msgid "A benefit is that a :class:`~qiskit.providers.aer.PulseSimulator` instance configured from a backend better serves as a drop-in replacement to the original backend, making it easier to swap in and out a simulator and real backend, e.g. when testing code on a simulator before using a real backend. For example, in the following code-block, the :class:`~qiskit.providers.aer.PulseSimulator` is instantiated from the ``FakeArmonk()`` backend. All configuration and default data is copied into the simulator instance, and so when it is passed as an argument to ``assemble``, it behaves as if the original backend was supplied (e.g. defaults from ``FakeArmonk`` will be present and used by ``assemble``)."
msgstr ""

#: ../../release_notes.rst:14349
msgid "While the above example is small, the demonstrated 'drop-in replacement' behavior should greatly improve the usability in more complicated work-flows, e.g. when calibration experiments are constructed using backend attributes."
msgstr ""

#: ../../release_notes.rst:14353
msgid "Adds support for qobj global phase to the :class:`~qiskit.providers.aer.StatevectorSimulator`, :class:`~qiskit.providers.aer.UnitarySimulator`, and statevector methods of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:14358
msgid "Improves general noisy statevector simulation performance by adding a Kraus method to the gate fusion circuit optimization that allows applying gate fusion to noisy statevector simulations with general Kraus noise."
msgstr ""

#: ../../release_notes.rst:14362
msgid "Use move semantics for statevector and density matrix snapshots for the `\"statevector\"` and `\"density_matrix\"` methods of the :class:`~qiskit.providers.aer.QasmSimulator` if they are the final instruction in a circuit. This reduces the memory usage of the simulator improves the performance by avoiding copying a large array in the results."
msgstr ""

#: ../../release_notes.rst:14369
msgid "Adds support for general Kraus :class:`~qiskit.providers.aer.noise.QauntumError` gate errors in the :class:`~qiskit.providers.aer.noise.NoiseModel` to the ``\"matrix_product_state\"`` method of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:14375
msgid "Adds support for density matrix snapshot instruction :class:`qiskit.providers.aer.extensions.SnapshotDensityMatrix` to the ``\"matrix_product_state\"`` method of the :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:14380
msgid "Extends the SIMD vectorization of the statevector simulation method to the unitary matrix, superoperator matrix, and density matrix simulation methods. This gives roughtly a 2x performance increase general simulation using the :class:`~qiskit.providers.aer.UnitarySimulator`, the ``\"density_matrix\"`` method of the :class:`~qiskit.providers.aer.QasmSimulator`, gate fusion, and noise simulation."
msgstr ""

#: ../../release_notes.rst:14387
msgid "Adds a custom vector class to C++ code that has better integration with Pybind11. This haves the memory requirement of the :class:`~qiskit.providers.aer.StatevectorSimulator` by avoiding an memory copy during Python binding of the final simulator state."
msgstr ""

#: ../../release_notes.rst:14398
msgid "AER now uses Lapack to perform some matrix related computations. It uses the Lapack library bundled with OpenBlas (already available in Linux and Macos typical OpenBlas dsitributions; Windows version distributed with AER) or with the accelerate framework in MacOS."
msgstr ""

#: ../../release_notes.rst:14403
msgid "The deprecated support for running qiskit-aer with Python 3.5 has been removed. To use qiskit-aer >=0.7.0 you will now need at least Python 3.6. If you are using Python 3.5 the last version which will work is qiskit-aer 0.6.x."
msgstr ""

#: ../../release_notes.rst:14408
msgid "Updates gate fusion default thresholds so that gate fusion will be applied to circuits with of more than 14 qubits for statevector simulations on the :class:`~qiskit.providers.aer.StatevectorSimulator` and :class:`~qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:14413
msgid "For the ``\"density_matrix\"`` method of the :class:`~qiskit.providers.aer.QasmSimulator` and for the :class:`~qiskit.providers.aer.UnitarySimulator` gate fusion will be applied to circuits with more than 7 qubits."
msgstr ""

#: ../../release_notes.rst:14418
msgid "Custom qubit threshold values can be set using the ``fusion_threshold`` backend option ie ``backend.set_options(fusion_threshold=10)``"
msgstr ""

#: ../../release_notes.rst:14421
msgid "Changes ``fusion_threshold`` backend option to apply fusion when the number of qubits is above the threshold, not equal or above the threshold, to match the behavior of the OpenMP qubit threshold parameter."
msgstr ""

#: ../../release_notes.rst:14431
msgid ":meth:`qiskit.providers.aer.noise.NoiseModel.set_x90_single_qubit_gates` has been deprecated as unrolling to custom basis gates has been added to the qiskit transpiler. The correct way to use an X90 based noise model is to define noise on the Sqrt(X) ``\"sx\"`` or ``\"rx\"`` gate and one of the single-qubit phase gates ``\"u1\"``, ``\"rx\"``, or ``\"p\"`` in the noise model."
msgstr ""

#: ../../release_notes.rst:14437
msgid "The ``variance`` kwarg of Snapshot instructions has been deprecated. This function computed the sample variance in the snapshot due to noise model sampling, not the variance due to measurement statistics so was often being used incorrectly. If noise modeling variance is required single shot snapshots should be used so variance can be computed manually in post-processing."
msgstr ""

#: ../../release_notes.rst:14450
msgid "Fixes bug in the :class:`~qiskit.providers.aer.StatevectorSimulator` that caused it to always run as CPU with double-precision without SIMD/AVX2 support even on systems with AVX2, or when single-precision or the GPU method was specified in the backend options."
msgstr ""

#: ../../release_notes.rst:14455
msgid "Fixes some for-loops in C++ code that were iterating over copies rather than references of container elements."
msgstr ""

#: ../../release_notes.rst:14458
msgid "Fixes a bug where snapshot data was always copied from C++ to Python rather than moved where possible. This will halve memory usage and improve simulation time when using large statevector or density matrix snapshots."
msgstr ""

#: ../../release_notes.rst:14462
msgid "Fix `State::snapshot_pauli_expval` to return correct Y expectation value in stabilizer simulator. Refer to `#895 <https://github.com/Qiskit/qiskit-aer/issues/895>` for more details."
msgstr ""

#: ../../release_notes.rst:14467
msgid "The controller_execute wrappers have been adjusted to be functors (objects) rather than free functions. Among other things, this allows them to be used in multiprocessing.pool.map calls."
msgstr ""

#: ../../release_notes.rst:14471
msgid "Add missing available memory checks for the :class:`~qiskit.providers.aer.StatevectorSimulator` and :class:`~qiskit.providers.aer.UnitarySimulator`. This throws an exception if the memory required to simulate the number of qubits in a circuit exceeds the available memory of the system."
msgstr ""

#: ../../release_notes.rst:14481
msgid "Ignis 0.5.0"
msgstr ""

#: ../../release_notes.rst:14488
msgid "This release includes a new module for expectation value measurement error mitigation, improved plotting functionality for quantum volume experiments, several bug fixes, and drops support for Python 3.5."
msgstr ""

#: ../../release_notes.rst:14498
msgid "The :func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq` function allows an optional input of gate objects as `interleaved_elem`. In addition, the CNOT-Dihedral class :class:`qiskit.ignis.verification.randomized_benchmarking.CNOTDihedral` has a new method `to_instruction`, and the existing `from_circuit` method has an optional input of an `Instruction` (in addition to `QuantumCircuit`)."
msgstr ""

#: ../../release_notes.rst:14505
msgid "The :class:`qiskit.ignis.verification.randomized_benchmarking.CNOTDihedral` now contains the following new features. Initialization from various types of objects: `CNOTDihedral`, `ScalarOp`, `QuantumCircuit`, `Instruction` and `Pauli`. Converting to a matrix using `to_matrix` and to an operator using `to_operator`. Tensor product methods `tensor` and `expand`. Calculation of the adjoint, conjugate and transpose using `conjugate`, `adjoint` and `transpose` methods. Verify that an element is CNOTDihedral using `is_cnotdihedral` method. Decomposition method `to_circuit` of a CNOTDihedral element into a circuit was extended to allow any number of qubits, based on the function `decompose_cnotdihedral_general`."
msgstr ""

#: ../../release_notes.rst:14518
msgid "Adds expectation value measurement error mitigation to the mitigation module. This supports using *complete* N-qubit assignment matrix, single-qubit *tensored* assignment matrix, or *continuous time Markov process (CTMP)* [1] measurement error mitigation when computing expectation values of diagonal operators from counts dictionaries. Expectation values are computed using the using the :func:`qiskit.ignis.mitigation.expectation_value` function."
msgstr ""

#: ../../release_notes.rst:14525
msgid "Calibration circuits for calibrating a measurement error mitigator are generated using the :func:`qiskit.ignis.mitigation.expval_meas_mitigator_circuits` function, and the result fitted using the :class:`qiskit.ignis.mitigation.ExpvalMeasMitigatorFitter` class. The fitter returns a mitigator object can the be supplied as an argument to the :func:`~qiskit.ignis.mitigation.expectation_value` function to apply mitigation."
msgstr ""

#: ../../release_notes.rst:14534
msgid "[1] S Bravyi, S Sheldon, A Kandala, DC Mckay, JM Gambetta,"
msgstr ""

#: ../../release_notes.rst:14533
msgid "*Mitigating measurement errors in multi-qubit experiments*, arXiv:2006.14044 [quant-ph]."
msgstr ""

#: ../../release_notes.rst:14536 ../../release_notes.rst:18535
msgid "Example:"
msgstr ""

#: ../../release_notes.rst:14538
msgid "The following example shows calibrating a 5-qubit expectation value measurement error mitigator using the ``'tensored'`` method."
msgstr ""

#: ../../release_notes.rst:14561
msgid "The following shows how to use the above mitigator to apply measurement error mitigation to expectation value computations"
msgstr ""

#: ../../release_notes.rst:14591
msgid "Adds Numba as an optional dependency. Numba is used to significantly increase the performance of the :class:`qiskit.ignis.mitigation.CTMPExpvalMeasMitigator` class used for expectation value measurement error mitigation with the CTMP method."
msgstr ""

#: ../../release_notes.rst:14597
msgid "Add two methods to :class:`qiskit.ignis.verification.quantum_volume.QVFitter`."
msgstr ""

#: ../../release_notes.rst:14599
msgid ":meth:`qiskit.ignis.verification.quantum_volume.QVFitter.calc_z_value` to calculate z value in standard normal distribution using mean and standard deviation sigma. If sigma = 0, it raises a warning and assigns a small value (1e-10) for sigma so that the code still runs."
msgstr ""

#: ../../release_notes.rst:14603
msgid ":meth:`qiskit.ignis.verification.quantum_volume.QVFitter.calc_confidence_level` to calculate confidence level using z value."
msgstr ""

#: ../../release_notes.rst:14607
msgid "Store confidence level even when hmean < 2/3 in :meth:`qiskit.ignis.verification.quantum_volume.QVFitter.qv_success`."
msgstr ""

#: ../../release_notes.rst:14610
msgid "Add explanations for how to calculate statistics based on binomial distribution in :meth:`qiskit.ignis.verification.quantum_volume.QVFitter.calc_statistics`."
msgstr ""

#: ../../release_notes.rst:14614
msgid "The :class:`qiskit.ignis.verification.QVFitter` method :meth:`~qiskit.ignis.verification.QVFitter.plot_qv_data` has been updated to return a ``matplotlib.Figure`` object. Previously, it would not return anything. By returning a figure this makes it easier to integrate the visualizations into a larger ``matplotlib`` workflow."
msgstr ""

#: ../../release_notes.rst:14619
msgid "The error bars in the figure produced by the :class:`qiskit.ignis.verification.QVFitter` method :meth:`qiskit.ignis.verification.QVFitter.plot_qv_data` has been updated to represent two-sigma confidence intervals. Previously, the error bars represent one-sigma confidence intervals. The success criteria of Quantum Volume benchmarking requires heavy output probability > 2/3 with one-sided two-sigma confidence (~97.7%). Changing error bars to represent two-sigma confidence intervals allows easily identification of success in the figure."
msgstr ""

#: ../../release_notes.rst:14628
msgid "A new kwarg, ``figsize`` has been added to the :class:`qiskit.ignis.verification.QVFitter` method :meth:`qiskit.ignis.verification.QVFitter.plot_qv_data`. This kwarg takes in a tuple of the form ``(x, y)`` where ``x`` and ``y`` are the dimension in inches to make the generated plot."
msgstr ""

#: ../../release_notes.rst:14634
msgid "The :meth:`qiskit.ignis.verification.quantum_volume.QVFitter.plot_hop_accumulative` method has been added to plot heavy output probability (HOP) vs number of trials similar to Figure 2a of Quantum Volume 64 paper (`arXiv:2008.08571 <https://arxiv.org/abs/2008.08571>`_). HOP of individual trials are plotted as scatters and cummulative HOP are plotted in red line. Two-sigma confidence intervals are plotted as shaded area and 2/3 success threshold is plotted as dashed line."
msgstr ""

#: ../../release_notes.rst:14641
msgid "The :meth:`qiskit.ignis.verification.quantum_volume.QVFitter.plot_qv_trial` method has been added to plot individual trials, leveraging on the :meth:`qiskit.visualization.plot_histogram` method from Qiskit Terra. Bitstring counts are plotted as overlapping histograms for ideal (hollow) and experimental (filled) values. Experimental heavy output probability are shown on the legend. Median probability is plotted as red dashed line."
msgstr ""

#: ../../release_notes.rst:14655
msgid "The deprecated support for running qiskit-ignis with Python 3.5 has been removed. To use qiskit-ignis >=0.5.0 you will now need at least Python 3.6. If you are using Python 3.5 the last version which will work is qiskit-ignis 0.4.x."
msgstr ""

#: ../../release_notes.rst:14667
msgid "Fixing a bug in the class :class:`qiskit.ignis.verification.randomized_benchmarking.CNOTDihedral` for elements with more than 5 quits."
msgstr ""

#: ../../release_notes.rst:14671
msgid "Fix the confidence level threshold for :meth:`qiskit.ignis.verification.quantum_volume.QVFitter.qv_success` to 0.977 corresponding to z = 2 as defined by the QV paper Algorithm 1."
msgstr ""

#: ../../release_notes.rst:14675
msgid "Fix a bug at :func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq` which caused all the subsystems with the same size in the given rb_pattern to have the same gates when a 'rand_seed' parameter was given to the function."
msgstr ""

#: ../../release_notes.rst:14681
msgid "Aqua 0.8.0"
msgstr ""

#: ../../release_notes.rst:14688
msgid "This release introduces an interface for running the available methods for Bosonic problems. In particular we introduced a full interface for running vibronic structure calculations."
msgstr ""

#: ../../release_notes.rst:14692
msgid "This release introduces an interface for excited states calculations. It is now easier for the user to create a general excited states calculation. This calculation is based on a Driver which provides the relevant information about the molecule, a Transformation which provides the information about the mapping of the problem into a qubit Hamiltonian, and finally a Solver. The Solver is the specific way which the excited states calculation is done (the algorithm). This structure follows the one of the ground state calculations. The results are modified to take lists of expectation values instead of a single one. The QEOM and NumpyEigensolver are adapted to the new structure. A factory is introduced to run a numpy eigensolver with a specific filter  (to target states of specific symmetries)."
msgstr ""

#: ../../release_notes.rst:14704 ../../release_notes.rst:17288
msgid "VQE expectation computation with Aer qasm_simulator now defaults to a computation that has the expected shot noise behavior."
msgstr ""

#: ../../release_notes.rst:14713
msgid "Introduced an option `warm_start` that should be used when tuning other options does not help. When this option is enabled, a relaxed problem (all variables are continuous) is solved first and the solution is used to initialize the state of the optimizer before it starts the iterative process in the `solve` method."
msgstr ""

#: ../../release_notes.rst:14718
msgid "The amplitude estimation algorithms now use ``QuantumCircuit`` objects as inputs to specify the A- and Q operators. This change goes along with the introduction of the ``GroverOperator`` in the circuit library, which allows an intuitive and fast construction of different Q operators. For example, a Bernoulli-experiment can now be constructed as"
msgstr ""

#: ../../release_notes.rst:14750
msgid "Add the possibility to compute Conditional Value at Risk (CVaR) expectation values."
msgstr ""

#: ../../release_notes.rst:14753
msgid "Given a diagonal observable H, often corresponding to the objective function of an optimization problem, we are often not as interested in minimizing the average energy of our observed measurements. In this context, we are satisfied if at least some of our measurements achieve low energy. (Note that this is emphatically not the case for chemistry problems)."
msgstr ""

#: ../../release_notes.rst:14759
msgid "To this end, one might consider using the best observed sample as a cost function during variational optimization. The issue here, is that this can result in a non-smooth optimization surface. To resolve this issue, we can smooth the optimization surface by using not just the best observed sample, but instead average over some fraction of best observed samples. This is exactly what the CVaR estimator accomplishes [1]."
msgstr ""

#: ../../release_notes.rst:14766
msgid "Let :math:`\\alpha` be a real number in :math:`[0,1]` which specifies the fraction of best observed samples which are used to compute the objective function. Observe that if :math:`\\alpha = 1`, CVaR is equivalent to a standard expectation value. Similarly, if :math:`\\alpha = 0`, then CVaR corresponds to using the best observed sample. Intermediate values of :math:`\\alpha` interpolate between these two objective functions."
msgstr ""

#: ../../release_notes.rst:14773
msgid "The functionality to use CVaR is included into the operator flow through a new subclass of OperatorStateFn called CVaRMeasurement. This new StateFn object is instantied in the same way as an OperatorMeasurement with the exception that it also accepts an `alpha` parameter and that it automatically enforces the  `is_measurement` attribute to be True. Observe that it is unclear what a CVaRStateFn would represent were it not a measurement."
msgstr ""

#: ../../release_notes.rst:14780 ../../release_notes.rst:14791
#: ../../release_notes.rst:14866 ../../release_notes.rst:14915
#: ../../release_notes.rst:14939 ../../release_notes.rst:21125
msgid "Examples::"
msgstr ""

#: ../../release_notes.rst:14788
msgid "Similarly, an operator corresponding to a standard expectation value can be converted into a CVaR expectation using the CVaRExpectation converter."
msgstr ""

#: ../../release_notes.rst:14799
msgid "See [1] for additional details regarding this technique and it's empircal performance."
msgstr ""

#: ../../release_notes.rst:14802
msgid "References:"
msgstr ""

#: ../../release_notes.rst:14806
msgid "[1]: Barkoutsos, P. K., Nannicini, G., Robert, A., Tavernelli, I., and Woerner, S.,"
msgstr ""

#: ../../release_notes.rst:14805
msgid "\"Improving Variational Quantum Optimization using CVaR\" `arXiv:1907.04769 <https://arxiv.org/abs/1907.04769>`_"
msgstr ""

#: ../../release_notes.rst:14808
msgid "New  interface ``Eigensolver`` for Eigensolver algorithms."
msgstr ""

#: ../../release_notes.rst:14810
msgid "An interface for excited states calculation has been added to the chemistry module. It is now easier for the user to create a general excited states calculation. This calculation is based on a ``Driver`` which provides the relevant information about the molecule, a ``Transformation`` which provides the information about the mapping of the problem into a qubit Hamiltonian, and finally a Solver. The Solver is the specific way which the excited states calculation is done (the algorithm). This structure follows the one of the ground state calculations. The results are modified to take lists of expectation values instead of a single one. The ``QEOM`` and ``NumpyEigensolver`` are adapted to the new structure. A factory is introduced to run a numpy eigensolver with a specific filter (to target states of specific symmetries)."
msgstr ""

#: ../../release_notes.rst:14822
msgid "In addition to the workflows for solving Fermionic problems, interfaces for calculating Bosonic ground and excited states have been added. In particular we introduced a full interface for running vibronic structure calculations."
msgstr ""

#: ../../release_notes.rst:14826
msgid "The ``OrbitalOptimizationVQE`` has been added as new ground state solver in the chemistry module. This solver allows for the simulatneous optimization of the variational parameters and the orbitals of the molecule. The algorithm is introduced in Sokolov et al., The Journal of Chemical Physics 152 (12)."
msgstr ""

#: ../../release_notes.rst:14831
msgid "A new algorithm has been added: the Born Openheimer Potential Energy surface for the calculation of potential energy surface along different degrees of freedom of the molecule. The algorithm is called ``BOPESSampler``. It further provides functionalities of fitting the potential energy surface to an analytic function of predefined potentials."
msgstr ""

#: ../../release_notes.rst:14836
msgid "A feasibility check of the obtained solution has been added to all optimizers in the optimization stack. This has been implemented by adding two new methods to ``QuadraticProgram``: * ``get_feasibility_info(self, x: Union[List[float], np.ndarray])`` accepts an array and returns whether this solution is feasible and a list of violated variables(violated bounds) and a list of violated constraints. * ``is_feasible(self, x: Union[List[float], np.ndarray])`` accepts an array and returns whether this solution is feasible or not."
msgstr ""

#: ../../release_notes.rst:14844
msgid "Add circuit-based versions of ``FixedIncomeExpectedValue``, ``EuropeanCallDelta``, ``GaussianConditionalIndependenceModel`` and ``EuropeanCallExpectedValue`` to ``qiskit.finance.applications``."
msgstr ""

#: ../../release_notes.rst:14848
msgid "Gradient Framework. :class:`qiskit.operators.gradients` Given an operator that represents either a quantum state resp. an expectation value, the gradient framework enables the evaluation of gradients, natural gradients, Hessians, as well as the Quantum Fisher Information."
msgstr ""

#: ../../release_notes.rst:14854
msgid "Suppose a parameterized quantum state `|ψ(θ)〉 = V(θ)|ψ〉` with input state `|ψ〉` and parametrized Ansatz `V(θ)`, and an Operator `O(ω)`."
msgstr ""

#: ../../release_notes.rst:14857
msgid "Gradients: We want to compute :math:`d⟨ψ(θ)|O(ω)|ψ(θ)〉/ dω` resp. :math:`d⟨ψ(θ)|O(ω)|ψ(θ)〉/ dθ` resp. :math:`d⟨ψ(θ)|i〉⟨i|ψ(θ)〉/ dθ`."
msgstr ""

#: ../../release_notes.rst:14861
msgid "The last case corresponds to the gradient w.r.t. the sampling probabilities of `|ψ(θ)`. These gradients can be computed with different methods, i.e. a parameter shift, a linear combination of unitaries and a finite difference method."
msgstr ""

#: ../../release_notes.rst:14890
msgid "Hessians: We want to compute :math:`d^2⟨ψ(θ)|O(ω)|ψ(θ)〉/ dω^2` resp. :math:`d^2⟨ψ(θ)|O(ω)|ψ(θ)〉/ dθ^2` resp. :math:`d^2⟨ψ(θ)|O(ω)|ψ(θ)〉/ dθdω` resp. :math:`d^2⟨ψ(θ)|i〉⟨i|ψ(θ)〉/ dθ^2`."
msgstr ""

#: ../../release_notes.rst:14895
msgid "The last case corresponds to the Hessian w.r.t. the sampling probabilities of `|ψ(θ)`. Just as the first order gradients, the Hessians can be evaluated with different methods, i.e. a parameter shift, a linear combination of unitaries and a finite difference method. Given a tuple of parameters ``Hessian().convert(op, param_tuple)`` returns the value for the second order derivative. If a list of parameters is given ``Hessian().convert(op, param_list)`` returns the full Hessian for all the given parameters according to the given parameter order."
msgstr ""

#: ../../release_notes.rst:14904
msgid "QFI: The Quantum Fisher Information `QFI` is a metric tensor which is representative for the representation capacity of a parameterized quantum state `|ψ(θ)〉 = V(θ)|ψ〉` generated by an input state `|ψ〉` and a parametrized Ansatz `V(θ)`. The entries of the `QFI` for a pure state read :math:`[QFI]kl= Re[〈∂kψ|∂lψ〉−〈∂kψ|ψ〉〈ψ|∂lψ〉] * 4`."
msgstr ""

#: ../../release_notes.rst:14910
msgid "Just as for the previous derivative types, the QFI can be computed using different methods: a full representation based on a linear combination of unitaries implementation, a block-diagonal and a diagonal representation based on an overlap method."
msgstr ""

#: ../../release_notes.rst:14928
msgid "The combination of the QFI and the gradient lead to a special form of a gradient, namely"
msgstr ""

#: ../../release_notes.rst:14931
msgid "NaturalGradients: The natural gradient is a special gradient method which rescales a gradient w.r.t. a state parameter with the inverse of the corresponding Quantum Fisher Information (QFI) :math:`QFI^-1 d⟨ψ(θ)|O(ω)|ψ(θ)〉/ dθ`. Hereby, we can choose a gradient as well as a QFI method and a regularization method which is used together with a least square solver instead of exact invertion of the QFI:"
msgstr ""

#: ../../release_notes.rst:14945
msgid "The gradient framework is also compatible with the optimizers from `qiskit.aqua.components.optimizers`. The derivative classes come with a `gradient_wrapper()` function which returns the corresponding callable."
msgstr ""

#: ../../release_notes.rst:14949
msgid "Introduces ``transformations`` for the fermionic and bosonic transformation of a problem instance. Transforms the fermionic operator to qubit operator. Respective class for the transformation is ``fermionic_transformation`` Introduces in algorithms ``ground_state_solvers`` for the calculation of ground state properties. The calculation can be done either using an ``MinimumEigensolver`` or using ``AdaptVQE`` Introduces ``chemistry/results`` where the eigenstate_result and the electronic_structure_result are also used for the algorithms. Introduces Minimum Eigensolver factories ``minimum_eigensolver_factories`` where chemistry specific minimum eigensolvers can be initialized Introduces orbital optimization vqe ``oovqe`` as a ground state solver for chemistry applications"
msgstr ""

#: ../../release_notes.rst:14961
msgid "New Algorithm result classes:"
msgstr ""

#: ../../release_notes.rst:14963
msgid ":class:`~qiskit.aqua.algorithms.Grover` method :meth:`~qiskit.aqua.algorithms.Grover._run` returns class :class:`~qiskit.aqua.algorithms.GroverResult`. :class:`~qiskit.aqua.algorithms.AmplitudeEstimation` method :meth:`~qiskit.aqua.algorithms.AmplitudeEstimation._run` returns class :class:`~qiskit.aqua.algorithms.AmplitudeEstimationResult`. :class:`~qiskit.aqua.algorithms.IterativeAmplitudeEstimation` method :meth:`~qiskit.aqua.algorithms.IterativeAmplitudeEstimation._run` returns class :class:`~qiskit.aqua.algorithms.IterativeAmplitudeEstimationResult`. :class:`~qiskit.aqua.algorithms.MaximumLikelihoodAmplitudeEstimation` method :meth:`~qiskit.aqua.algorithms.MaximumLikelihoodAmplitudeEstimation._run` returns class :class:`~qiskit.aqua.algorithms.MaximumLikelihoodAmplitudeEstimationResult`."
msgstr ""

#: ../../release_notes.rst:14976 ../../release_notes.rst:14987
msgid "All new result classes are backwards compatible with previous result dictionary."
msgstr ""

#: ../../release_notes.rst:14978
msgid "New Linear Solver result classes:"
msgstr ""

#: ../../release_notes.rst:14980
msgid ":class:`~qiskit.aqua.algorithms.HHL` method :meth:`~qiskit.aqua.algorithms.HHL._run` returns class :class:`~qiskit.aqua.algorithms.HHLResult`. :class:`~qiskit.aqua.algorithms.NumPyLSsolver` method :meth:`~qiskit.aqua.algorithms.NumPyLSsolver._run` returns class :class:`~qiskit.aqua.algorithms.NumPyLSsolverResult`."
msgstr ""

#: ../../release_notes.rst:14989
msgid "``MinimumEigenOptimizationResult`` now exposes properties: ``samples`` and ``eigensolver_result``. The latter is obtained from the underlying algorithm used by the optimizer and specific to the algorithm. ``RecursiveMinimumEigenOptimizer`` now returns an instance of the result class ``RecursiveMinimumEigenOptimizationResult`` which in turn may contains intermediate results obtained from the underlying algorithms. The dedicated result class exposes properties ``replacements`` and ``history`` that are specific to this optimizer. The depth of the history is managed by the ``history`` parameter of the optimizer."
msgstr ""

#: ../../release_notes.rst:14998
msgid "``GroverOptimizer`` now returns an instance of ``GroverOptimizationResult`` and this result class exposes properties ``operation_counts``, ``n_input_qubits``, and ``n_output_qubits`` directly. These properties are not available in the ``raw_results`` dictionary anymore."
msgstr ""

#: ../../release_notes.rst:15002
msgid "``SlsqpOptimizer`` now returns an instance of ``SlsqpOptimizationResult`` and this result class exposes additional properties specific to the SLSQP implementation."
msgstr ""

#: ../../release_notes.rst:15005
msgid "Support passing ``QuantumCircuit`` objects as generator circuits into the ``QuantumGenerator``."
msgstr ""

#: ../../release_notes.rst:15008
msgid "Removes the restriction to real input vectors in CircuitStateFn.from_vector. The method calls extensions.Initialize. The latter explicitly supports (in API and documentation) complex input vectors. So this restriction seems unnecessary."
msgstr ""

#: ../../release_notes.rst:15012
msgid "Simplified `AbelianGrouper` using a graph coloring algorithm of retworkx. It is faster than the numpy-based coloring algorithm."
msgstr ""

#: ../../release_notes.rst:15015
msgid "Allow calling ``eval`` on state function objects with no argument, which returns the ``VectorStateFn`` representation of the state function. This is consistent behavior with ``OperatorBase.eval``, which returns the ``MatrixOp`` representation, if no argument is passed."
msgstr ""

#: ../../release_notes.rst:15020
msgid "Adds ``max_iterations`` to the ``VQEAdapt`` class in order to allow limiting the maximum number of iterations performed by the algorithm."
msgstr ""

#: ../../release_notes.rst:15023
msgid "VQE expectation computation with Aer qasm_simulator now defaults to a computation that has the expected shot noise behavior. The special Aer snapshot based computation, that is much faster, with the ideal output similar to state vector simulator, may still be chosen but like before Aqua 0.7 it now no longer defaults to this but can be chosen."
msgstr ""

#: ../../release_notes.rst:15035
msgid "Extension of the previous Analytic Quantum Gradient Descent (AQGD) classical optimizer with the AQGD with Epochs. Now AQGD performs the gradient descent optimization with a momentum term, analytic gradients, and an added customized step length schedule for parametrized quantum gates. Gradients are computed \"analytically\" using the quantum circuit when evaluating the objective function."
msgstr ""

#: ../../release_notes.rst:15042
msgid "The deprecated support for running qiskit-aqua with Python 3.5 has been removed. To use qiskit-aqua >=0.8.0 you will now need at least Python 3.6. If you are using Python 3.5 the last version which will work is qiskit-aqua 0.7.x."
msgstr ""

#: ../../release_notes.rst:15047
msgid "Added retworkx as a new dependency."
msgstr ""

#: ../../release_notes.rst:15055
msgid "The ``i_objective`` argument of the amplitude estimation algorithms has been renamed to ``objective_qubits``."
msgstr ""

#: ../../release_notes.rst:15058
msgid "TransformationType"
msgstr ""

#: ../../release_notes.rst:15060
msgid "QubitMappingType"
msgstr ""

#: ../../release_notes.rst:15062
msgid "Deprecate the ``CircuitFactory`` and derived types. The ``CircuitFactory`` has been introduced as temporary class when the ``QuantumCircuit`` missed some features necessary for applications in Aqua. Now that the circuit has all required functionality, the circuit factory can be removed. The replacements are shown in the following table."
msgstr ""

#: ../../release_notes.rst:15091 ../../release_notes.rst:16886
msgid "The ising convert classes :class:`qiskit.optimization.converters.QuadraticProgramToIsing` and :class:`qiskit.optimization.converters.IsingToQuadraticProgram` have been deprecated and will be removed in a future release. Instead the :class:`qiskit.optimization.QuadraticProgram` methods :meth:`~qiskit.optimization.QuadraticProgram.to_ising` and :meth:`~qiskit.optimization.QuadraticPrgraom.from_ising` should be used instead."
msgstr ""

#: ../../release_notes.rst:15100
msgid "Deprecate the ``WeightedSumOperator`` which has been ported to the circuit library as ``WeightedAdder`` in ``qiskit.circuit.library``."
msgstr ""

#: ../../release_notes.rst:15103
msgid "``Core Hamiltonian`` class is deprecated in favor of the ``FermionicTransformation`` ``Chemistry Operator`` class is deprecated in favor of the ``tranformations`` ``minimum_eigen_solvers/vqe_adapt`` is also deprecated and moved as an implementation of the ground_state_solver interface ``applications/molecular_ground_state_energy`` is deprecated in favor of ``ground_state_solver``"
msgstr ""

#: ../../release_notes.rst:15109
msgid "``Optimizer.SupportLevel`` nested enum is replaced by ``OptimizerSupportLevel`` and ``Optimizer.SupportLevel`` was removed. Use, for example, ``OptimizerSupportLevel.required`` instead of ``Optimizer.SupportLevel.required``."
msgstr ""

#: ../../release_notes.rst:15113
msgid "Deprecate the ``UnivariateVariationalDistribution`` and ``MultivariateVariationalDistribution`` as input to the ``QuantumGenerator``. Instead, plain ``QuantumCircuit`` objects can be used."
msgstr ""

#: ../../release_notes.rst:15118
msgid "Ignored `fast` and `use_nx` options of `AbelianGrouper.group_subops` to be removed in the future release."
msgstr ""

#: ../../release_notes.rst:15121 ../../release_notes.rst:16881
msgid "GSLS optimizer class deprecated ``__init__`` parameter ``max_iter`` in favor of ``maxiter``. SPSA optimizer class deprecated ``__init__`` parameter ``max_trials`` in favor of ``maxiter``. optimize_svm function deprecated ``max_iters`` parameter in favor of ``maxiter``. ADMMParameters class deprecated ``__init__`` parameter ``max_iter`` in favor of ``maxiter``."
msgstr ""

#: ../../release_notes.rst:15133
msgid "The UCCSD excitation list, comprising single and double excitations, was not being generated correctly when an active space was explicitly provided to UCSSD via the active_(un)occupied parameters."
msgstr ""

#: ../../release_notes.rst:15137
msgid "For the amplitude estimation algorithms, we define the number of oracle queries as number of times the Q operator/Grover operator is applied. This includes the number of shots. That factor has been included in MLAE and IQAE but was missing in the 'standard' QAE."
msgstr ""

#: ../../release_notes.rst:15142
msgid "Fix CircuitSampler.convert, so that the ``is_measurement`` property is propagated to converted StateFns."
msgstr ""

#: ../../release_notes.rst:15145
msgid "Fix double calculation of coefficients in :meth`~qiskit.aqua.operators.VectorStateFn.to_circuit_op`."
msgstr ""

#: ../../release_notes.rst:15148
msgid "Calling PauliTrotterEvolution.convert on an operator including a term that is a scalar multiple of the identity gave an incorrect circuit, one that ignored the scalar coefficient. This fix includes the effect of the coefficient in the global_phase property of the circuit."
msgstr ""

#: ../../release_notes.rst:15153
msgid "Make ListOp.num_qubits check that all ops in list have the same num_qubits Previously, the number of qubits in the first operator in the ListOp was returned. With this change, an additional check is made that all other operators also have the same number of qubits."
msgstr ""

#: ../../release_notes.rst:15158
msgid "Make PauliOp.exp_i() generate the correct matrix with the following changes. 1) There was previously an error in the phase of a factor of 2. 2) The global phase was ignored when converting the circuit to a matrix. We now use qiskit.quantum_info.Operator, which is generally useful for converting a circuit to a unitary matrix, when possible."
msgstr ""

#: ../../release_notes.rst:15165
msgid "Fixes the cyclicity detection as reported buggy in https://github.com/Qiskit/qiskit-aqua/issues/1184."
msgstr ""

#: ../../release_notes.rst:15170
msgid "IBM Q Provider 0.11.0"
msgstr ""

#: ../../release_notes.rst:15177
msgid "The deprecated support for running qiskit-ibmq-provider with Python 3.5 has been removed. To use qiskit-ibmq-provider >=0.11.0 you will now need at least Python 3.6. If you are using Python 3.5 the last version which will work is qiskit-ibmq-provider 0.10.x."
msgstr ""

#: ../../release_notes.rst:15182
msgid "Prior to this release, ``websockets`` 7.0 was used for Python 3.6. With this release, ``websockets`` 8.0 or above is required for all Python versions. The package requirements have been updated to reflect this."
msgstr ""

#: ../../release_notes.rst:15189
msgid "Qiskit 0.22.0"
msgstr ""

#: ../../release_notes.rst:15192 ../../release_notes.rst:15266
#: ../../release_notes.rst:15320
msgid "Terra 0.15.2"
msgstr ""

#: ../../release_notes.rst:15197 ../../release_notes.rst:15271
#: ../../release_notes.rst:15382 ../../release_notes.rst:16530
msgid "Aer 0.6.1"
msgstr ""

#: ../../release_notes.rst:15202 ../../release_notes.rst:15276
#: ../../release_notes.rst:15387 ../../release_notes.rst:16716
msgid "Ignis 0.4.0"
msgstr ""

#: ../../release_notes.rst:15207 ../../release_notes.rst:15281
#: ../../release_notes.rst:15392 ../../release_notes.rst:16844
msgid "Aqua 0.7.5"
msgstr ""

#: ../../release_notes.rst:15212
msgid "IBM Q Provider 0.10.0"
msgstr ""

#: ../../release_notes.rst:15219
msgid "CQC randomness extractors can now be invoked asynchronously, using methods :meth:`~qiskit.providers.ibmq.random.CQCExtractor.run_async_ext1` and :meth:`~qiskit.providers.ibmq.random.CQCExtractor.run_async_ext2`. Each of these methods returns a :class:`~qiskit.providers.ibmq.random.CQCExtractorJob` instance that allows you to check on the job status (using :meth:`~qiskit.providers.ibmq.random.CQCExtractorJob.status`) and wait for its result (using :meth:`~qiskit.providers.ibmq.random.CQCExtractorJob.block_until_ready`). The :meth:`qiskit.provider.ibmq.random.CQCExtractor.run` method remains synchronous."
msgstr ""

#: ../../release_notes.rst:15230
msgid "You can now use the new IBMQ experiment service to query, retrieve, and download experiment related data. Interface to this service is located in the new :mod:`qiskit.providers.ibmq.experiment` package. Note that this feature is still in beta, and not all accounts have access to it. It is also subject to heavy modification in both functionality and API without backward compatibility."
msgstr ""

#: ../../release_notes.rst:15237
msgid "Two Jupyter magic functions, the IQX dashboard and the backend widget, are updated to display backend reservations. If a backend has reservations scheduled in the next 24 hours, time to the next one and its duration are displayed (e.g. ``Reservation: in 6 hrs 30 min (60m)``). If there is a reservation and the backend is active, the backend status is displayed as ``active [R]``."
msgstr ""

#: ../../release_notes.rst:15250
msgid "Starting from this release, the `basis_gates` returned by :meth:`qiskit.providers.ibmq.IBMQBackend.configuration` may differ for each backend. You should update your program if it relies on the basis gates being ``['id','u1','u2','u3','cx']``. We recommend always using the :meth:`~qiskit.providers.ibmq.IBMQBackend.configuration` method to find backend configuration values instead of hard coding them."
msgstr ""

#: ../../release_notes.rst:15257
msgid "``qiskit-ibmq-provider`` release 0.10 requires ``qiskit-terra`` release 0.15 or above. The package metadata has been updated to reflect the new dependency."
msgstr ""

#: ../../release_notes.rst:15263
msgid "Qiskit 0.21.0"
msgstr ""

#: ../../release_notes.rst:15286
msgid "IBM Q Provider 0.9.0"
msgstr ""

#: ../../release_notes.rst:15293
msgid "You can now access the IBMQ random number services, such as the CQC randomness extractor, using the new package :mod:`qiskit.providers.ibmq.random`. Note that this feature is still in beta, and not all accounts have access to it. It is also subject to heavy modification in both functionality and API without backward compatibility."
msgstr ""

#: ../../release_notes.rst:15305
msgid "Fixes an issue that may raise a ``ValueError`` if :meth:`~qiskit.providers.ibmq.IBMQBackend.retrieve_job` is used to retrieve a job submitted via the IBM Quantum Experience Composer."
msgstr ""

#: ../../release_notes.rst:15309
msgid ":class:`~qiskit.providers.ibmq.managed.IBMQJobManager` has been updated so that if a time out happens while waiting for an old job to finish, the time out error doesn't prevent a new job to be submitted. Fixes `#737 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/737>`_"
msgstr ""

#: ../../release_notes.rst:15317
msgid "Qiskit 0.20.1"
msgstr ""

#: ../../release_notes.rst:15327
msgid "When accessing the ``definition`` attribute of a parameterized ``Gate`` instance, the generated ``QuantumCircuit`` had been generated with an invalid ``ParameterTable``, such that reading from ``QuantumCircuit.parameters`` or calling ``QuantumCircuit.bind_parameters`` would incorrectly report the unbound parameters. This has been resolved."
msgstr ""

#: ../../release_notes.rst:15333
msgid "``SXGate().inverse()`` had previously returned an 'sx_dg' gate with a correct ``definition`` but incorrect ``to_matrix``. This has been updated such that ``SXGate().inverse()`` returns an ``SXdgGate()`` and vice versa."
msgstr ""

#: ../../release_notes.rst:15337
msgid "``Instruction.inverse()``, when not overridden by a subclass, would in some cases return a ``Gate`` instance with an incorrect ``to_matrix`` method. The instances of incorrect ``to_matrix`` methods have been removed."
msgstr ""

#: ../../release_notes.rst:15341
msgid "For ``C3XGate`` with a non-zero ``angle``, inverting the gate via ``C3XGate.inverse()`` had previously generated an incorrect inverse gate. This has been corrected."
msgstr ""

#: ../../release_notes.rst:15345
msgid "The ``MCXGate`` modes have been updated to return a gate of the same mode when calling ``.inverse()``. This resolves an issue where in some cases, transpiling a circuit containing the inverse of an ``MCXVChain`` gate would raise an error."
msgstr ""

#: ../../release_notes.rst:15350
msgid "Previously, when creating a multiply controlled phase gate via ``PhaseGate.control``, an ``MCU1Gate`` gate had been returned. This has been had corrected so that an ``MCPhaseGate`` is returned."
msgstr ""

#: ../../release_notes.rst:15354
msgid "Previously, attempting to decompose a circuit containing an ``MCPhaseGate`` would raise an error due to an inconsistency in the definition of the ``MCPhaseGate``. This has been corrected."
msgstr ""

#: ../../release_notes.rst:15358
msgid "``QuantumCircuit.compose`` and ``DAGCircuit.compose`` had, in some cases, incorrectly translated conditional gates if the input circuit contained more than one ``ClassicalRegister``. This has been resolved."
msgstr ""

#: ../../release_notes.rst:15369
msgid "Extending circuits with differing registers updated the ``qregs`` and ``cregs`` properties accordingly, but not the ``qubits`` and ``clbits`` lists. As these are no longer generated from the registers but are cached lists, this lead to a discrepancy of registers and bits. This has been fixed and the ``extend`` method explicitly updates the cached bit lists."
msgstr ""

#: ../../release_notes.rst:15375
msgid "Fix bugs of the concrete implementations of meth:`~qiskit.circuit.ControlledGate.inverse` method which do not preserve the ``ctrl_state`` parameter."
msgstr ""

#: ../../release_notes.rst:15379
msgid "A bug was fixed that caused long pulse schedules to throw a recursion error."
msgstr ""

#: ../../release_notes.rst:15397 ../../release_notes.rst:16989
msgid "IBM Q Provider 0.8.0"
msgstr ""

#: ../../release_notes.rst:15404
msgid "Qiskit 0.20.0"
msgstr ""

#: ../../release_notes.rst:15407
msgid "Terra 0.15.1"
msgstr ""

#: ../../release_notes.rst:15415
msgid "The 0.15.0 release includes several new features and bug fixes. Some highlights for this release are:"
msgstr ""

#: ../../release_notes.rst:15418
msgid "This release includes the introduction of arbitrary basis translation to the transpiler. This includes support for directly targeting a broader range of device basis sets, e.g. backends implementing RZ, RY, RZ, CZ or iSwap gates."
msgstr ""

#: ../../release_notes.rst:15423
msgid "The :class:`~qiskit.circuit.QuantumCircuit` class now tracks global phase. This means controlling a circuit which has global phase now correctly adds a relative phase, and gate matrix definitions are now exact rather than equal up to a global phase."
msgstr ""

#: ../../release_notes.rst:15435
msgid "A new DAG class :class:`qiskit.dagcircuit.DAGDependency` for representing the dependency form of circuit, In this DAG, the nodes are operations (gates, measure, barrier, etc...) and the edges corresponds to non-commutation between two operations."
msgstr ""

#: ../../release_notes.rst:15440
msgid "Four new functions are added to :mod:`qiskit.converters` for converting back and forth to :class:`~qiskit.dagcircuit.DAGDependency`. These functions are:"
msgstr ""

#: ../../release_notes.rst:15443
msgid ":func:`~qiskit.converters.circuit_to_dagdependency` to convert from a :class:`~qiskit.circuit.QuantumCircuit` object to a :class:`~qiskit.dagcircuit.DAGDependency` object."
msgstr ""

#: ../../release_notes.rst:15446
msgid ":func:`~qiskit.converters.dagdependency_to_circuit` to convert from a :class:`~qiskit.dagcircuit.DAGDependency` object to a :class:`~qiskit.circuit.QuantumCircuit` object."
msgstr ""

#: ../../release_notes.rst:15449
msgid ":func:`~qiskit.converters.dag_to_dagdependency` to convert from a :class:`~qiskit.dagcircuit.DAGCircuit` object to a :class:`~qiskit.dagcircuit.DAGDependency` object."
msgstr ""

#: ../../release_notes.rst:15452
msgid ":func:`~qiskit.converters.dagdependency_to_dag` to convert from a :class:`~qiskit.dagcircuit.DAGDependency` object to a :class:`~qiskit.dagcircuit.DAGCircuit` object."
msgstr ""

#: ../../release_notes.rst:15468
msgid "Two new transpiler passes have been added to :mod:`qiskit.transpiler.passes` The first, :class:`~qiskit.transpiler.passes.UnrollCustomDefinitions`, unrolls all instructions in the circuit according to their :attr:`~qiskit.circuit.Instruction.definition` property, stopping when reaching either the specified ``basis_gates`` or a set of gates in the provided :class:`~qiskit.circuit.EquivalenceLibrary`. The second, :class:`~qiskit.transpiler.passes.BasisTranslator`, uses the set of translations in the provided :class:`~qiskit.circuit.EquivalenceLibrary` to re-write circuit instructions in a specified basis."
msgstr ""

#: ../../release_notes.rst:15479
msgid "A new ``translation_method`` keyword argument has been added to :func:`~qiskit.compiler.transpile` to allow selection of the method to be used for translating circuits to the available device gates. For example, ``transpile(circ, backend, translation_method='translator')``. Valid choices are:"
msgstr ""

#: ../../release_notes.rst:15485
msgid "``'unroller'``: to use the :class:`~qiskit.transpiler.passes.Unroller` pass"
msgstr ""

#: ../../release_notes.rst:15487
msgid "``'translator'``: to use the :class:`~qiskit.transpiler.passes.BasisTranslator` pass."
msgstr ""

#: ../../release_notes.rst:15489
msgid "``'synthesis'``: to use the :class:`~qiskit.transpiler.passes.UnitarySynthesis` pass."
msgstr ""

#: ../../release_notes.rst:15492
msgid "The  default value is ``'translator'``."
msgstr ""

#: ../../release_notes.rst:15494
msgid "A new class for handling counts result data, :class:`qiskit.result.Counts`, has been added. This class is a subclass of ``dict`` and can be interacted with like any other dictionary. But, it includes helper methods and attributes for dealing with counts results from experiments and also handles post processing and formatting of binary strings at object initialization. A :class:`~qiskit.result.Counts`  object can be created by passing a dictionary  of counts with the keys being either integers, hexadecimal strings of the form ``'0x4a'``,  binary strings of the form ``'0b1101'``, a bit string formatted across register and memory slots (ie ``'00 10'``), or a dit string. For example::"
msgstr ""

#: ../../release_notes.rst:15509
msgid "A new method for constructing :class:`qiskit.dagcircuit.DAGCircuit` objects has been added, :meth:`~qiskit.dagcircuit.DAGCircuit.from_networkx`. This method takes in a networkx ``MultiDiGraph`` object (in the format returned by :meth:`~qiskit.dagcircuit.DAGCircuit.to_networkx`) and will return a new :class:`~qiskit.dagcircuit.DAGCircuit` object. The intent behind this function is to enable transpiler pass authors to leverage networkx's `graph algorithm library <https://networkx.github.io/documentation/stable/reference/algorithms/index.html>`__ if a function is missing from the `retworkx API <https://retworkx.readthedocs.io/en/latest/api.html>`_. Although, hopefully in such casses an issue will be opened with `retworkx issue tracker <https://github.com/Qiskit/retworkx/issues>`__ (or even better a pull request submitted)."
msgstr ""

#: ../../release_notes.rst:15523
msgid "A new kwarg for ``init_qubits`` has been added to :func:`~qiskit.compiler.assemble` and :func:`~qiskit.execute.execute`. For backends that support this feature ``init_qubits`` can be used to control whether the backend executing the circuits inserts any initialization sequences at the start of each shot. By default this is set to ``True`` meaning that all qubits can assumed to be in the ground state at the start of each shot. However, when ``init_qubits`` is  set to ``False`` qubits will be uninitialized at the start of each experiment and between shots. Note, that the backend running the circuits has to support this feature for this flag to have any effect."
msgstr ""

#: ../../release_notes.rst:15534
msgid "A new kwarg ``rep_delay`` has been added to :func:`qiskit.compiler.assemble`, :func:`qiskit.execute.execute`, and the constructor for :class:`~qiskit.qobj.PulseQobjtConfig`.qiskit This new kwarg is used to denotes the time between program executions. It must be chosen from the list of valid values set as the ``rep_delays`` from a backend's :class:`~qiskit.providers.models.PulseBackendConfiguration` object which can be accessed as ``backend.configuration().rep_delays``)."
msgstr ""

#: ../../release_notes.rst:15543
msgid "The ``rep_delay`` kwarg will only work on backends which allow for dynamic repetition time. This will also be indicated in the :class:`~qiskit.providers.models.PulseBackendConfiguration` object for a backend as the ``dynamic_reprate_enabled`` attribute. If ``dynamic_reprate_enabled`` is ``False`` then the ``rep_time`` value specified for :func:`qiskit.compiler.assemble`, :func:`qiskit.execute.execute`, or the constructor for :class:`~qiskit.qobj.PulseQobjtConfig` will be used rather than ``rep_delay``. ``rep_time`` only allows users to specify the duration of a program, rather than the delay between programs."
msgstr ""

#: ../../release_notes.rst:15554
msgid "The ``qobj_schema.json`` JSON Schema file in :mod:`qiskit.schemas` has been updated to include the ``rep_delay`` as an optional configuration property for pulse qobjs."
msgstr ""

#: ../../release_notes.rst:15558
msgid "The ``backend_configuration_schema.json`` JSON Schema file in mod:`qiskit.schemas` has been updated to include ``rep_delay_range`` and ``default_rep_delay`` as optional properties for a pulse backend configuration."
msgstr ""

#: ../../release_notes.rst:15563
msgid "A new attribute, :attr:`~qiskit.circuit.QuantumCircuit.global_phase`, which is is used for tracking the global phase has been added to the :class:`qiskit.circuit.QuantumCircuit` class. For example::"
msgstr ""

#: ../../release_notes.rst:15574
msgid "The global phase may also be changed or queried with ``circ.global_phase`` in the above example. In either case the setting is in radians. If the circuit is converted to an instruction or gate the global phase is represented by two single qubit rotations on the first qubit."
msgstr ""

#: ../../release_notes.rst:15580
msgid "This allows for other methods and functions which consume a :class:`~qiskit.circuit.QuantumCircuit` object to take global phase into account. For example. with the :attr:`~qiskit.circuit.QuantumCircuit.global_phase` attribute the :meth:`~qiskit.circuit.Gate.to_matrix` method for a gate can now exactly correspond to its decompositions instead of just up to a global phase."
msgstr ""

#: ../../release_notes.rst:15588
msgid "The same attribute has also been added to the :class:`~qiskit.dagcircuit.DAGCircuit` class so that global phase can be tracked when converting between :class:`~qiskit.circuit.QuantumCircuit` and :class:`~qiskit.dagcircuit.DAGCircuit`."
msgstr ""

#: ../../release_notes.rst:15594
msgid "Two new classes, :class:`~qiskit.circuit.AncillaRegister` and :class:`~qiskit.circuit.AncillaQubit` have been added to the :mod:`qiskit.circuit` module. These are subclasses of :class:`~qiskit.circuit.QuantumRegister` and :class:`~qiskit.circuit.Qubit` respectively and enable marking qubits being ancillas. This will allow these qubits to be re-used in larger circuits and algorithms."
msgstr ""

#: ../../release_notes.rst:15601
msgid "A new method, :meth:`~qiskit.circuit.QuantumCircuit.control`, has been added to the :class:`~qiskit.circuit.QuantumCircuit`. This method will return a controlled version of the :class:`~qiskit.circuit.QuantumCircuit` object, with both open and closed controls. This functionality had previously only been accessible via the :class:`~qiskit.circuit.Gate` class."
msgstr ""

#: ../../release_notes.rst:15608
msgid "A new method :meth:`~qiskit.circuit.QuantumCircuit.repeat` has been added to the :class:`~qiskit.circuit.QuantumCircuit` class. It returns a new circuit object containing a specified number of repetitions of the original circuit. For example:"
msgstr ""

#: ../../release_notes.rst:15623
msgid "The parameters are copied by reference, meaning that if you update the parameters in one instance of the circuit all repetitions will be updated."
msgstr ""

#: ../../release_notes.rst:15627
msgid "A new method :meth:`~qiskit.circuit.QuantumCircuit.reverse_bits` has been added to the :class:`~qiskit.circuit.QuantumCircuit` class. This method will reverse the order of bits in a circuit (both quantum and classical bits). This can be used to switch a circuit from little-endian to big-endian and vice-versa."
msgstr ""

#: ../../release_notes.rst:15633
msgid "A new method, :meth:`~qiskit.transpiler.Layout.combine_into_edge_map()`, was added to the :class:`qiskit.transpiler.Layout` class. This method enables converting converting two :class:`~qiskit.transpiler.Layout` objects into a qubit map for composing two circuits."
msgstr ""

#: ../../release_notes.rst:15638
msgid "A new class, :class:`~qiskit.test.mock.utils.ConfigurableFakeBackend`, has been added to the :mod:`qiskit.test.mock.utils` module. This new class enables the creation of configurable mock backends for use in testing. For example::"
msgstr ""

#: ../../release_notes.rst:15655
msgid "will create a backend object with 100 qubits and all the other parameters specified in the constructor."
msgstr ""

#: ../../release_notes.rst:15658
msgid "A new method :meth:`~qiskit.circuit.EquivalenceLibrary.draw` has been added to the :class:`qiskit.circuit.EquivalenceLibrary` class. This method can be used for drawing the contents of an equivalence library, which can be useful for debugging. For example:"
msgstr ""

#: ../../release_notes.rst:15691
msgid "A new Phase instruction, :class:`~qiskit.pulse.SetPhase`, has been added to :mod:`qiskit.pulse`. This instruction sets the phase of the subsequent pulses to the specified phase (in radians. For example::"
msgstr ""

#: ../../release_notes.rst:15704
msgid "In this example, the phase of the pulses applied to ``DriveChannel(0)`` after the :class:`~qiskit.pulse.SetPhase` instruction will be set to :math:`\\pi` radians."
msgstr ""

#: ../../release_notes.rst:15708
msgid "A new pulse instruction :class:`~qiskit.pulse.ShiftFrequency` has been added to :mod:`qiskit.pulse.instructions`. This instruction enables shifting the frequency of a channel from its set frequency. For example::"
msgstr ""

#: ../../release_notes.rst:15719
msgid "In this example all the pulses applied to ``DriveChannel(0)`` after the :class:`~qiskit.pulse.ShiftFrequency` command will have the envelope a frequency decremented by 340MHz."
msgstr ""

#: ../../release_notes.rst:15723
msgid "A new method :meth:`~qiskit.circuit.ParameterExpression.conjugate` has been added to the :class:`~qiskit.circuit.ParameterExpression` class. This enables calling ``numpy.conj()`` without raising an error. Since a :class:`~qiskit.circuit.ParameterExpression` object is real, it will return itself. This behaviour is analogous to Python floats/ints."
msgstr ""

#: ../../release_notes.rst:15729
msgid "A new class :class:`~qiskit.circuit.library.PhaseEstimation` has been added to :mod:`qiskit.circuit.library`. This circuit library class is the circuit used in the original formulation of the phase estimation algorithm in `arXiv:quant-ph/9511026 <https://arxiv.org/pdf/quant-ph/9511026.pdf>`__. Phase estimation is the task to to estimate the phase :math:`\\phi` of an eigenvalue :math:`e^{2\\pi i\\phi}` of a unitary operator :math:`U`, provided with the corresponding eigenstate :math:`|psi\\rangle`. That is"
msgstr ""

#: ../../release_notes.rst:15738
msgid "U|\\psi\\rangle = e^{2\\pi i\\phi} |\\psi\\rangle"
msgstr ""

#: ../../release_notes.rst:15742
msgid "This estimation (and thereby this circuit) is a central routine to several well-known algorithms, such as Shor's algorithm or Quantum Amplitude Estimation."
msgstr ""

#: ../../release_notes.rst:15746
msgid "The :mod:`qiskit.visualization` function :func:`~qiskit.visualization.plot_state_qsphere` has a new kwarg ``show_state_labels`` which is used to control whether each blob in the qsphere visualization is labeled. By default this kwarg is set to ``True`` and shows the basis states next to each blob by default. This feature can be disabled, reverting to the previous behavior, by setting the ``show_state_labels`` kwarg to ``False``."
msgstr ""

#: ../../release_notes.rst:15754
msgid "The :mod:`qiskit.visualization` function :func:`~qiskit.visualization.plot_state_qsphere` has a new kwarg ``show_state_phases`` which is set to ``False`` by default. When set to ``True`` it displays the phase of each basis state."
msgstr ""

#: ../../release_notes.rst:15759
msgid "The :mod:`qiskit.visualization` function :func:`~qiskit.visualization.plot_state_qsphere` has a new kwarg ``use_degrees`` which is set to ``False`` by default. When set to ``True`` it displays the phase of each basis state in degrees, along with the phase circle at the bottom right."
msgstr ""

#: ../../release_notes.rst:15765
msgid "A new class, :class:`~qiskit.circuit.library.QuadraticForm` to the :mod:`qiskit.circuit.library` module for implementing a a quadratic form on binary variables. The circuit library element implements the operation"
msgstr ""

#: ../../release_notes.rst:15769
msgid "|x\\rangle |0\\rangle \\mapsto |x\\rangle |Q(x) \\mod 2^m\\rangle"
msgstr ""

#: ../../release_notes.rst:15773
msgid "for the quadratic form :math:`Q` and :math:`m` output qubits. The result is in the :math:`m` output qubits is encoded in two's complement. If :math:`m` is not specified, the circuit will choose the minimal number of qubits required to represent the result without applying a modulo operation. The quadratic form is specified using a matrix for the quadratic terms, a vector for the linear terms and a constant offset. If all terms are integers, the circuit implements the quadratic form exactly, otherwise it is only an approximation."
msgstr ""

#: ../../release_notes.rst:15795
msgid "Add :meth:`qiskit.quantum_info.Statevector.expectation_value` and :meth:`qiskit.quantum_info.DensityMatrix.expectation_value` methods for computing the expectation value of an :class:`qiskit.quantum_info.Operator`."
msgstr ""

#: ../../release_notes.rst:15799
msgid "For the ``seed`` kwarg in the constructor for :class:`qiskit.circuit.library.QuantumVolume` `numpy random Generator objects <https://numpy.org/doc/stable/reference/random/generator.html>`__ can now be used. Previously, only integers were a valid input. This is useful when integrating :class:`~qiskit.circuit.library.QuantumVolume` as part of a larger function with its own random number generation, e.g. generating a sequence of :class:`~qiskit.circuit.library.QuantumVolume` circuits."
msgstr ""

#: ../../release_notes.rst:15808
msgid "The :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.compose` has a new kwarg ``front`` which can be used for prepending the other circuit before the origin circuit instead of appending. For example:"
msgstr ""

#: ../../release_notes.rst:15825
msgid "Two new passes, :class:`~qiskit.transpiler.passes.SabreLayout` and :class:`~qiskit.transpiler.passes.SabreSwap` for layout and routing have been added to :mod:`qiskit.transpiler.passes`. These new passes are based on the algorithm presented in Li et al., \"Tackling the Qubit Mapping Problem for NISQ-Era Quantum Devices\", ASPLOS 2019. They can also be selected when using the :func:`~qiskit.compiler.transpile` function by setting the ``layout_method`` kwarg to ``'sabre'`` and/or the ``routing_method`` to ``'sabre'`` to use :class:`~qiskit.transpiler.passes.SabreLayout` and :class:`~qiskit.transpiler.passes.SabreSwap` respectively."
msgstr ""

#: ../../release_notes.rst:15836
msgid "Added the method :meth:`~qiskit.pulse.Schedule.replace` to the :class:`qiskit.pulse.Schedule` class which allows a pulse instruction to be replaced with another. For example::"
msgstr ""

#: ../../release_notes.rst:15842
msgid "from qiskit import pulse"
msgstr ""

#: ../../release_notes.rst:15844
msgid "d0 = pulse.DriveChannel(0)"
msgstr ""

#: ../../release_notes.rst:15846
msgid "sched = pulse.Schedule()"
msgstr ""

#: ../../release_notes.rst:15848
msgid "old = pulse.Play(pulse.Constant(100, 1.0), d0) new = pulse.Play(pulse.Constant(100, 0.1), d0)"
msgstr ""

#: ../../release_notes.rst:15851
msgid "sched += old"
msgstr ""

#: ../../release_notes.rst:15853
msgid "sched = sched.replace(old, new)"
msgstr ""

#: ../../release_notes.rst:15855
msgid "assert sched == pulse.Schedule(new)"
msgstr ""

#: ../../release_notes.rst:15857
msgid "Added new gate classes to :mod:`qiskit.circuit.library` for the :math:`\\sqrt{X}`, its adjoint :math:`\\sqrt{X}^\\dagger`, and controlled :math:`\\sqrt{X}` gates as :class:`~qiskit.circuit.library.SXGate`, :class:`~qiskit.circuit.library.SXdgGate`, and :class:`~qiskit.circuit.library.CSXGate`. They can also be added to a :class:`~qiskit.circuit.QuantumCircuit` object using the :meth:`~qiskit.circuit.QuantumCircuit.sx`, :meth:`~qiskit.circuit.QuantumCircuit.sxdg`, and :meth:`~qiskit.circuit.QuantumCircuit.csx` respectively."
msgstr ""

#: ../../release_notes.rst:15868
msgid "Add support for :class:`~qiskit.circuit.Reset` instructions to :meth:`qiskit.quantum_info.Statevector.from_instruction`. Note that this involves RNG sampling in choosing the projection to the zero state in the case where the qubit is in a superposition state. The seed for sampling can be set using the :meth:`~qiskit.quantum_info.Statevector.seed` method."
msgstr ""

#: ../../release_notes.rst:15874
msgid "The methods :meth:`qiskit.circuit.ParameterExpression.subs` and :meth:`qiskit.circuit.QuantumCircuit.assign_parameters` now accept :class:`~qiskit.circuit.ParameterExpression` as the target value to be substituted."
msgstr ""

#: ../../release_notes.rst:15898
msgid "The :meth:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.to_gate` has a new kwarg ``label`` which can be used to set a label for for the output :class:`~qiskit.circuit.Gate` object. For example:"
msgstr ""

#: ../../release_notes.rst:15915
msgid "Added the :class:`~qiskit.circuit.library.UGate`, :class:`~qiskit.circuit.library.CUGate`, :class:`~qiskit.circuit.library.PhaseGate`, and :class:`~qiskit.circuit.library.CPhaseGate` with the corresponding :class:`~qiskit.circuit.QuantumCircuit` methods :meth:`~qiskit.circuit.QuantumCircuit.u`, :meth:`~qiskit.circuit.QuantumCircuit.cu`, :meth:`~qiskit.circuit.QuantumCircuit.p`, and :meth:`~qiskit.circuit.QuantumCircuit.cp`. The :class:`~qiskit.circuit.library.UGate` gate is the generic single qubit rotation gate with 3 Euler angles and the :class:`~qiskit.circuit.library.CUGate` gate its controlled version. :class:`~qiskit.circuit.library.CUGate` has 4 parameters to account for a possible global phase of the U gate. The :class:`~qiskit.circuit.library.PhaseGate` and :class:`~qiskit.circuit.library.CPhaseGate` gates are the general Phase gate at an arbitrary angle and it's controlled version."
msgstr ""

#: ../../release_notes.rst:15933
msgid "A new kwarg, ``cregbundle`` has been added to the :func:`qiskit.visualization.circuit_drawer` function and the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.draw`. When set to ``True`` the cregs will be bundled into a single line in circuit visualizations for the ``text`` and ``mpl`` drawers. The default value is ``True``. Addresses issue `#4290 <https://github.com/Qiskit/qiskit-terra/issues/4290>`_."
msgstr ""

#: ../../release_notes.rst:15950
msgid "A new kwarg, ``initial_state`` has been added to the :func:`qiskit.visualization.circuit_drawer` function and the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.draw`. When set to ``True`` the initial state will now be included in circuit visualizations for all drawers. Addresses issue `#4293 <https://github.com/Qiskit/qiskit-terra/issues/4293>`_."
msgstr ""

#: ../../release_notes.rst:15966
msgid "Labels will now be displayed when using the 'mpl' drawer. There are 2 types of labels - gate labels and control labels. Gate labels will replace the gate name in the display. Control labels will display above or below the controls for a gate. Fixes issues #3766, #4580 Addresses issues `#3766 <https://github.com/Qiskit/qiskit-terra/issues/3766>`_ and `#4580 <https://github.com/Qiskit/qiskit-terra/issues/4580>`_."
msgstr ""

#: ../../release_notes.rst:15990
msgid "Implementations of the multi-controlled X Gate ( :class:`~qiskit.circuit.library.MCXGrayCode`, :class:`~qiskit.circuit.library.MCXRecursive`, and :class:`~qiskit.circuit.library.MCXVChain`) have had their ``name`` properties changed to more accurately describe their implementation: ``mcx_gray``, ``mcx_recursive``, and ``mcx_vchain`` respectively. Previously, these gates shared the name ``mcx`` with :class:`~qiskit.circuit.library.MCXGate`, which caused these gates to be incorrectly transpiled and simulated."
msgstr ""

#: ../../release_notes.rst:16000
msgid "By default the preset passmanagers in :mod:`qiskit.transpiler.preset_passmanagers` are using :class:`~qiskit.transpiler.passes.UnrollCustomDefinitions` and :class:`~qiskit.transpiler.passes.BasisTranslator` to handle basis changing instead of the previous default :class:`~qiskit.transpiler.passes.Unroller`. This was done because the new passes are more flexible and allow targeting any basis set, however the output may differ. To use the previous default you can set the ``translation_method`` kwarg on :func:`~qiskit.compiler.transpile` to ``'unroller'``."
msgstr ""

#: ../../release_notes.rst:16010
msgid "The :func:`qiskit.converters.circuit_to_gate` and :func`qiskit.converters.circuit_to_instruction` converter functions had previously automatically included the generated gate or instruction in the active ``SessionEquivalenceLibrary``. These converters now accept an optional ``equivalence_library`` keyword argument to specify if and where the converted instances should be registered. The default behavior has changed to not register the converted instance."
msgstr ""

#: ../../release_notes.rst:16018
msgid "The default value of the ``cregbundle`` kwarg for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function has been changed to ``True``. This means that by default the classical bits in the circuit diagram will now be bundled by default, for example:"
msgstr ""

#: ../../release_notes.rst:16034
msgid "If you want to have your circuit drawing retain the previous behavior and show each classical bit in the diagram you can set the ``cregbundle`` kwarg to ``False``. For example:"
msgstr ""

#: ../../release_notes.rst:16048
msgid ":class:`~qiskit.pulse.Schedule` plotting with :py:meth:`qiskit.pulse.Schedule.draw` and :func:`qiskit.visualization.pulse_drawer` will no longer display the event table by default. This can be reenabled by setting the ``table`` kwarg to ``True``."
msgstr ""

#: ../../release_notes.rst:16054
msgid "The pass :class:`~qiskit.transpiler.passes.RemoveResetInZeroState` was previously included in the preset pass manager :func:`~qiskit.transpiler.preset_passmanagers.level_0_pass_manager` which was used with the ``optimization_level=0`` for :func:`~qiskit.compiler.transpile` and :func:`~qiskit.execute.execute` functions. However, :class:`~qiskit.transpiler.passes.RemoveResetInZeroState` is an optimization pass and should not have been included in optimization level 0 and was removed. If you need to run :func:`~qiskit.compiler.transpile` with :class:`~qiskit.transpiler.passes.RemoveResetInZeroState` either use a custom pass manager or ``optimization_level`` 1, 2, or 3."
msgstr ""

#: ../../release_notes.rst:16066
msgid "The deprecated kwarg ``line_length`` for the :func:`qiskit.visualization.circuit_drawer` function and :meth:`qiskit.circuit.QuantumCircuit.draw` method has been removed. It had been deprecated since the 0.10.0 release. Instead you can use the ``fold`` kwarg to adjust the width of the circuit diagram."
msgstr ""

#: ../../release_notes.rst:16072
msgid "The ``'mpl'`` output mode for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`~qiskit.visualization.circuit_drawer` now requires the `pylatexenc <https://pylatexenc.readthedocs.io/en/latest/latexencode/>`__ library to be installed. This was already an optional dependency for visualization, but was only required for the ``'latex'`` output mode before. It is now also required for the matplotlib drawer because it is needed to handle correctly sizing gates with matplotlib's `mathtext <https://matplotlib.org/3.2.2/tutorials/text/mathtext.html>`__ labels for gates."
msgstr ""

#: ../../release_notes.rst:16083
msgid "The deprecated ``get_tokens`` methods for the :class:`qiskit.qasm.Qasm` and :class:`qiskit.qasm.QasmParser` has been removed. These methods have been deprecated since the 0.9.0 release. The :meth:`qiskit.qasm.Qasm.generate_tokens` and :meth:`qiskit.qasm.QasmParser.generate_tokens` methods should be used instead."
msgstr ""

#: ../../release_notes.rst:16090
msgid "The deprecated kwarg ``channels_to_plot`` for :meth:`qiskit.pulse.Schedule.draw`, :meth:`qiskit.pulse.Instruction.draw`, ``qiskit.visualization.pulse.matplotlib.ScheduleDrawer.draw`` and :func:`~qiskit.visualization.pulse_drawer` has been removed. The kwarg has been deprecated since the 0.11.0 release and was replaced by the ``channels`` kwarg, which functions identically and should be used instead."
msgstr ""

#: ../../release_notes.rst:16099
msgid "The deprecated ``circuit_instruction_map`` attribute of the :class:`qiskit.providers.models.PulseDefaults` class has been removed. This attribute has been deprecated since the 0.12.0 release and was replaced by the ``instruction_schedule_map`` attribute which can be used instead."
msgstr ""

#: ../../release_notes.rst:16105
msgid "The ``union`` method of :py:class:`~qiskit.pulse.Schedule` and :py:class:`~qiskit.pulse.Instruction` have been deprecated since the 0.12.0 release and have now been removed. Use :meth:`qiskit.pulse.Schedule.insert` and :meth:`qiskit.pulse.Instruction.meth` methods instead with the kwarg``time=0``."
msgstr ""

#: ../../release_notes.rst:16112
msgid "The deprecated ``scaling`` argument to the ``draw`` method of :py:class:`~qiskit.pulse.Schedule` and :py:class:`~qiskit.pulse.Instruction` has been replaced with ``scale`` since the 0.12.0 release and now has been removed. Use the ``scale`` kwarg instead."
msgstr ""

#: ../../release_notes.rst:16117
msgid "The deprecated ``period`` argument to :py:mod:`qiskit.pulse.library` functions have been replaced by ``freq`` since the 0.13.0 release and now removed. Use the ``freq`` kwarg instead of ``period``."
msgstr ""

#: ../../release_notes.rst:16121
msgid "The ``qiskit.pulse.commands`` module containing ``Commands`` classes was deprecated in the 0.13.0 release and has now been removed. You will have to upgrade your Pulse code if you were still using commands. For example:"
msgstr ""

#: ../../release_notes.rst:16131
msgid "``Command(args)(channel)``"
msgstr ""

#: ../../release_notes.rst:16132
msgid "``Instruction(args, channel)``"
msgstr ""

#: ../../release_notes.rst:16160
msgid "All classes and function in the ``qiskit.tool.qi`` module were deprecated in the 0.12.0 release and have now been removed. Instead use the :mod:`qiskit.quantum_info` module and the new methods and classes that it has for working with quantum states and operators."
msgstr ""

#: ../../release_notes.rst:16165
msgid "The ``qiskit.quantum_info.basis_state`` and ``qiskit.quantum_info.projector`` functions are deprecated as of Qiskit Terra 0.12.0 as are now removed. Use the :class:`qiskit.quantum_info.QuantumState` and its derivatives :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` to work with states."
msgstr ""

#: ../../release_notes.rst:16172
msgid "The interactive plotting functions from :mod:`qiskit.visualization`, ``iplot_bloch_multivector``, ``iplot_state_city``, ``iplot_state_qsphere``, ``iplot_state_hinton``, ``iplot_histogram``, ``iplot_state_paulivec`` now are just deprecated aliases for the matplotlib based equivalents and are no longer interactive. The hosted static JS code that these functions relied on has been removed and they no longer could work. A normal deprecation wasn't possible because the site they depended on no longer exists."
msgstr ""

#: ../../release_notes.rst:16181
msgid "The validation components using marshmallow from :mod:`qiskit.validation` have been removed from terra. Since they are no longer used to build any objects in terra."
msgstr ""

#: ../../release_notes.rst:16185
msgid "The marshmallow schema classes in :mod:`qiskit.result` have been removed since they are no longer used by the :class:`qiskit.result.Result` class."
msgstr ""

#: ../../release_notes.rst:16188
msgid "The output of the :meth:`~qiskit.result.Result.to_dict` method for the :class:`qiskit.result.Result` class is no longer in a format for direct JSON serialization. Depending on the content contained in instances of these classes there may be types that the default JSON encoder doesn't know how to handle, for example complex numbers or numpy arrays. If you're JSON serializing the output of the ``to_dict()`` method directly you should ensure that your JSON encoder can handle these types."
msgstr ""

#: ../../release_notes.rst:16196
msgid "The option to acquire multiple qubits at once was deprecated in the 0.12.0 release and is now removed. Specifically, the init args ``mem_slots`` and ``reg_slots`` have been removed from :class:`qiskit.pulse.instructions.Acquire`, and ``channel``, ``mem_slot`` and ``reg_slot`` will raise an error if a list is provided as input."
msgstr ""

#: ../../release_notes.rst:16202
msgid "Support for the use of the ``USE_RETWORKX`` environment variable which was introduced in the 0.13.0 release to provide an optional fallback to the legacy `networkx <https://networkx.github.io/>`__ based :class:`qiskit.dagcircuit.DAGCircuit` implementation has been removed. This flag was only intended as provide a relief valve for any users that encountered a problem with the new implementation for one release during the transition to retworkx."
msgstr ""

#: ../../release_notes.rst:16210
msgid "The module within :mod:`qiskit.pulse` responsible for schedule->schedule transformations has been renamed from ``reschedule.py`` to ``transforms.py``. The previous import path has been deprecated. To upgrade your code::"
msgstr ""

#: ../../release_notes.rst:16216
msgid "should be replaced by::"
msgstr ""

#: ../../release_notes.rst:16220
msgid "In previous releases a :class:`~qiskit.transpiler.PassManager` did not allow ``TransformationPass`` classes to modify the :class:`~qiskit.transpiler.PropertySet`.  This restriction has been lifted so a ``TransformationPass`` class now has read and write access to both the :class:`~qiskit.transpiler.PropertySet` and :class:`~qiskit.transpiler.DAGCircuit` during :meth:`~qiskit.transpiler.PassManager.run`. This change was made to more efficiently facilitate ``TransformationPass`` classes that have an internal state which may be necessary for later passes in the :class:`~qiskit.transpiler.PassManager`. Without this change a second redundant ``AnalysisPass`` would have been necessary to recreate the internal state, which could add significant overhead."
msgstr ""

#: ../../release_notes.rst:16238
msgid "The name of the first positional parameter for the :mod:`qiskit.visualization` functions :func:`~qiskit.visualization.plot_state_hinton`, :func:`~qiskit.visualization.plot_bloch_multivector`, :func:`~qiskit.visualization.plot_state_city`, :func:`~qiskit.visualization.plot_state_paulivec`, and :func:`~qiskit.visualization.plot_state_qsphere` has been renamed from ``rho`` to ``state``. Passing in the value by name to ``rho`` is deprecated and will be removed in a future release. Instead you should either pass the argument positionally or use the new parameter name ``state``."
msgstr ""

#: ../../release_notes.rst:16249
msgid "The ``qiskit.pulse.pulse_lib`` module has been deprecated and will be removed in a future release. It has been renamed to :py:mod:`qiskit.pulse.library` which should be used instead."
msgstr ""

#: ../../release_notes.rst:16253
msgid "The :class:`qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.mirror` has been deprecated and will be removed in a future release. The method :meth:`qiskit.circuit.QuantumCircuit.reverse_ops` should be used instead, since mirroring could be confused with swapping the output qubits of the circuit. The :meth:`~qiskit.circuit.QuantumCircuit.reverse_ops` method only reverses the order of gates that are applied instead of mirroring."
msgstr ""

#: ../../release_notes.rst:16261
msgid "The :meth:`~qiskit.dagcircuit.DAGCircuit.qubits` and :meth:`~qiskit.dagcircuit.DAGCircuit.clbits` methods of :class:`qiskit.dagcircuit.DAGCircuit` have been deprecated and will be removed in a future release. They have been replaced with properties of the same name, :attr:`qiskit.dagcircuit.DAGCircuit.qubits` and :attr:`qiskit.dagcircuit.DAGCircuit.clbits`, and are cached so accessing them is much faster."
msgstr ""

#: ../../release_notes.rst:16269
msgid "The ``get_sample_pulse`` method for ``qiskit.pulse.library.ParametricPulse`` derived classes (for example :class:`~qiskit.pulse.library.GaussianSquare`) has been deprecated and will be removed in a future release. It has been replaced by the ``get_waveform`` method (for example :meth:`~qiskit.pulse.library.GaussianSquare.get_waveform`) which should behave identically."
msgstr ""

#: ../../release_notes.rst:16277
msgid "The use of the optional ``condition`` argument on :class:`qiskit.dagcircuit.DAGNode`, :meth:`qiskit.dagcircuit.DAGCircuit.apply_operation_back`, and :meth:`qiskit.dagcircuit.DAGCircuit.apply_operation_front` has been deprecated and will be removed in a future release. Instead the ``control`` set in :class:`qiskit.circuit.Instruction` instances being added to a :class:`~qiskit.dagcircuit.DAGCircuit` should be used."
msgstr ""

#: ../../release_notes.rst:16285
msgid "The ``set_atol`` and ``set_rtol`` class methods of the :class:`qiskit.quantum_info.BaseOperator` and :class:`qiskit.quantum_info.QuantumState` classes (and their subclasses such as :class:`~qiskit.quantum_info.Operator` and :class:`qiskit.quantum_info.DensityMatrix`) are deprecated and will be removed in a future release. Instead the value for the attributes ``.atol`` and ``.rtol`` should be set on the class instead. For example::"
msgstr ""

#: ../../release_notes.rst:16298
msgid "The interactive plotting functions from :mod:`qiskit.visualization`, ``iplot_bloch_multivector``, ``iplot_state_city``, ``iplot_state_qsphere``, ``iplot_state_hinton``, ``iplot_histogram``, ``iplot_state_paulivec`` have been deprecated and will be removed in a future release. The matplotlib based equivalent functions from :mod:`qiskit.visualization`, :func:`~qiskit.visualization.plot_bloch_multivector`, :func:`~qiskit.visualization.plot_state_city`, :func:`~qiskit.visualization.plot_state_qsphere`, :func:`~qiskit.visualization.plot_state_hinton`, :func:`~qiskit.visualization.plot_state_histogram`, and :func:`~qiskit.visualization.plot_state_paulivec` should be used instead."
msgstr ""

#: ../../release_notes.rst:16310
msgid "The properties ``acquires``, ``mem_slots``, and ``reg_slots`` of the :class:`qiskit.pulse.instructions.Acquire` pulse instruction have been deprecated and will be removed in a future release. They are just duplicates of :attr:`~qiskit.pulse.instructions.Acquire.channel`, :attr:`~qiskit.pulse.instructions.Acquire.mem_slot`, and :attr:`~qiskit.pulse.instructions.Acquire.reg_slot` respectively now that previously deprecated support for using multiple qubits in a single :class:`~qiskit.pulse.instructions.Acquire` instruction has been removed."
msgstr ""

#: ../../release_notes.rst:16320
msgid "The ``SamplePulse`` class from :mod:`qiskit.pulse` has been renamed to :py:class:`~qiskit.pulse.library.Waveform`. ``SamplePulse`` is deprecated and will be removed in a future release."
msgstr ""

#: ../../release_notes.rst:16324
msgid "The style dictionary key ``cregbundle`` has been deprecated and will be removed in a future release. This has been replaced by the kwarg ``cregbundle`` added to the :func:`qiskit.visualization.circuit_drawer` function and the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.draw`."
msgstr ""

#: ../../release_notes.rst:16337
msgid "The :class:`qiskit.circuit.QuantumCircuit` method :attr:`~qiskit.circuit.QuantumCircuit.num_nonlocal_gates` previously included multi-qubit :class:`qiskit.circuit.Instruction` objects (for example, :class:`~qiskit.circuit.library.Barrier`) in its count of non-local gates. This has been corrected so that only non-local :class:`~qiskit.circuit.Gate` objects are counted. Fixes `#4500 <https://github.com/Qiskit/qiskit-terra/issues/4500>`__"
msgstr ""

#: ../../release_notes.rst:16345
msgid ":class:`~qiskit.circuit.ControlledGate` instances with a set ``ctrl_state`` were in some cases not being evaluated as equal, even if the compared gates were equivalent. This has been resolved so that Fixes `#4573 <https://github.com/Qiskit/qiskit-terra/issues/4573>`__"
msgstr ""

#: ../../release_notes.rst:16350
msgid "When accessing a bit from a :class:`qiskit.circuit.QuantumRegister` or :class:`qiskit.circuit.ClassicalRegister` by index when using numpy `integer types` <https://numpy.org/doc/stable/user/basics.types.html>`__ would previously raise a ``CircuitError`` exception. This has been resolved so numpy types can be used in addition to Python's built-in ``int`` type. Fixes `#3929 <https://github.com/Qiskit/qiskit-terra/issues/3929>`__."
msgstr ""

#: ../../release_notes.rst:16359
msgid "A bug was fixed where only the first :class:`qiskit.pulse.configuration.Kernel` or :class:`qiskit.pulse.configuration.Discriminator` for an :class:`qiskit.pulse.Acquire` was used when there were multiple Acquires at the same time in a :class:`qiskit.pulse.Schedule`."
msgstr ""

#: ../../release_notes.rst:16364
msgid "The SI unit use for constructing :py:class:`qiskit.pulse.SetFrequency` objects is in Hz, but when a :class:`~qiskit.qobj.PulseQobjInstruction` object is created from a :py:class:`~qiskit.pulse.SetFrequency` instance it needs to be converted to GHz. This conversion was missing from previous releases and has been fixed."
msgstr ""

#: ../../release_notes.rst:16370
msgid "Previously it was possible to set the number of control qubits to zero in which case the the original, potentially non-controlled, operation would be returned. This could cause an ``AttributeError`` to be raised if the caller attempted to access an attribute which only :class:`~qiskit.circuit.ControlledGate` object have. This has been fixed by adding a getter and setter for :attr:`~qiskit.circuit.ControlledGate.num_ctrl_qubits` to validate that a valid value is being used. Fixes `#4576 <https://github.com/Qiskit/qiskit-terra/issues/4576>`__"
msgstr ""

#: ../../release_notes.rst:16380
msgid "Open controls were implemented by modifying a :class:`~qiskit.circuit.Gate` objects :attr:`~qiskit.circuit.Gate.definition`. However, when the gate already exists in the basis set, this definition was not used, which resulted in incorrect circuits being sent to a backend after transpilation. This has been fixed by modifying the :class:`~qiskit.transpiler.Unroller` pass to use the definition if it encounters a controlled gate with open controls. Fixes `#4437 <https://github.com/Qiskit/qiskit-terra/issues/4437>`__"
msgstr ""

#: ../../release_notes.rst:16389
msgid "The ``insert_barriers`` keyword argument in the :class:`~qiskit.circuit.library.ZZFeatureMap` class didn't actually insert barriers in between the Hadamard layers and evolution layers. This has been fixed so that barriers are now properly inserted."
msgstr ""

#: ../../release_notes.rst:16394
msgid "Fixed issue where some gates with three or more qubits would fail to compile in certain instances. Refer to `#4577 <https://github.com/Qiskit/qiskit-terra/issues/4577` for more detail."
msgstr ""

#: ../../release_notes.rst:16398
msgid "The matplotlib (``'mpl'``) output backend for the :class:`qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.draw` and the :func:`qiskit.visualization.circuit_drawer` function was not properly scaling when the kwarg ``scale`` was set. Fonts and line widths did not scale with the rest of the image. This has been fixed and all elements of the circuit diagram now scale properly. For example:"
msgstr ""

#: ../../release_notes.rst:16414
msgid "Fixes `#4179 <https://github.com/Qiskit/qiskit-terra/issues/4179>`_."
msgstr ""

#: ../../release_notes.rst:16416
msgid "Fixes issue where initializing or evolving :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes by circuits by circuit containing :class:`~qiskit.circuit.Barrier` instructions would raise an exception. Fixes `#4461 <https://github.com/Qiskit/qiskit-terra/issues/4461>`__"
msgstr ""

#: ../../release_notes.rst:16423
msgid "Previously when a :class:`~qiskit.circuit.QuantumCircuit` contained a :class:`~qiskit.circuit.Gate` with a classical condition the transpiler would sometimes fail when using ``optimization_level=3`` on :func:`~qiskit.compiler.transpile` or :func:`~qiskit.execute.execute` raising an ``UnboundLocalError``. This has been fixed by updating the :class:`~qiskit.transpiler.passes.ConsolidateBlocks` pass to account for the classical condition. Fixes `#4672 <https://github.com/Qiskit/qiskit-terra/issues/4672>`_."
msgstr ""

#: ../../release_notes.rst:16433
msgid "In some situations long gate and register names would overflow, or leave excessive empty space around them when using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function. This has been fixed by using correct text widths for a proportional font. Fixes `#4611 <https://github.com/Qiskit/qiskit-terra/issues/4611>`__, `#4605 <https://github.com/Qiskit/qiskit-terra/issues/4605>`__, `#4545 <https://github.com/Qiskit/qiskit-terra/issues/4545>`__, `#4497 <https://github.com/Qiskit/qiskit-terra/issues/4497>`__, `#4449 <https://github.com/Qiskit/qiskit-terra/issues/4449>`__, and `#3641 <https://github.com/Qiskit/qiskit-terra/issues/3641>`__."
msgstr ""

#: ../../release_notes.rst:16445
msgid "When using the ``style` kwarg on the :meth:`qiskit.circuit.QuantumCircuit.draw` or :func:`qiskit.visualization.circuit_drawer` with the ``'mpl'`` output backend the dictionary key ``'showindex'`` set to ``True``, the index numbers at the top of the column did not line up properly. This has been fixed."
msgstr ""

#: ../../release_notes.rst:16452
msgid "When using ``cregbunde=True`` with the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function and measuring onto a second fold, the measure arrow would overwrite the creg count. The count was moved to the left to prevent this. Fixes `#4148 <https://github.com/Qiskit/qiskit-terra/issues/4148>`__."
msgstr ""

#: ../../release_notes.rst:16459
msgid "When using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function :class:`~qiskit.circuit.library.CSwapGate` gates and a controlled :class:`~qiskit.circuit.library.RZZGate` gates now display with their appropriate symbols instead of in a box."
msgstr ""

#: ../../release_notes.rst:16466
msgid "When using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function controlled gates created using the :meth:`~qiskit.circuit.QuantumCircuit.to_gate` method were not properly spaced and could overlap with other gates in the circuit diagram. This issue has been fixed."
msgstr ""

#: ../../release_notes.rst:16473
msgid "When using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function gates with arrays as parameters, such as :class:`~qiskit.extensions.HamiltonianGate`, no longer display with excessive space around them. Fixes `#4352 <https://github.com/Qiskit/qiskit-terra/issues/4352>`__."
msgstr ""

#: ../../release_notes.rst:16481
msgid "When using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function generic gates created by directly instantiating :class:`qiskit.circuit.Gate` method now display the proper background color for the gate. Fixes `#4496 <https://github.com/Qiskit/qiskit-terra/issues/4496>`__."
msgstr ""

#: ../../release_notes.rst:16488
msgid "When using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function an ``AttributeError`` that occurred when using :class:`~qiskit.extensions.Isometry` or :class:`~qiskit.extensions.Initialize` has been fixed. Fixes `#4439 <https://github.com/Qiskit/qiskit-terra/issues/4439>`__."
msgstr ""

#: ../../release_notes.rst:16496
msgid "When using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function some open-controlled gates did not properly display the open controls. This has been corrected so that open controls are properly displayed as open circles. Fixes `#4248 <https://github.com/Qiskit/qiskit-terra/issues/4248>`__."
msgstr ""

#: ../../release_notes.rst:16504
msgid "When using the ``'mpl'`` output backend for the :meth:`qiskit.circuit.QuantumCircuit.draw` method and :func:`qiskit.visualization.circuit_drawer` function setting the ``fold`` kwarg to -1 will now properly display the circuit without folding. Fixes `#4506 <https://github.com/Qiskit/qiskit-terra/issues/4506>`__."
msgstr ""

#: ../../release_notes.rst:16511
msgid "Parametric pulses from :mod:`qiskit.pulse.library.discrete` now have zero ends of parametric pulses by default. The endpoints are defined such that for a function :math:`f(x)` then :math:`f(-1) = f(duration + 1) = 0`. Fixes `#4317 <https://github.com/Qiskit/qiskit-terra/issues/4317>`__"
msgstr ""

#: ../../release_notes.rst:16523
msgid "The :class:`qiskit.result.Result` class which was previously constructed using the marshmallow library has been refactored to not depend on marshmallow anymore. This new implementation should be a seamless transition but some specific behavior that was previously inherited from marshmallow may not work. Please file issues for any incompatibilities found."
msgstr ""

#: ../../release_notes.rst:16537
msgid "This 0.6.0 release includes numerous performance improvements for all simulators in the Aer provider and significant changes to the build system when building from source. The main changes are support for SIMD vectorization, approximation in the matrix product state method via bond-dimension truncation, more efficient Pauli expectation value computation, and greatly improved efficiency in Python conversion of C++ result objects. The build system was upgraded to use the `Conan <https://conan.io/>`__ to manage common C++ dependencies when building from source."
msgstr ""

#: ../../release_notes.rst:16552
msgid "Add density matrix snapshot support to \"statevector\" and \"statevector_gpu\" methods of the QasmSimulator."
msgstr ""

#: ../../release_notes.rst:16555
msgid "Allow density matrix snapshots on specific qubits, not just all qubits. This computes the partial trace of the state over the remaining qubits."
msgstr ""

#: ../../release_notes.rst:16558
msgid "Adds Pauli expectation value snapshot support to the `\"density_matrix\"` simulation method of the :class:`qiskit.providers.aer.QasmSimulator`. Add snapshots to circuits using the :class:`qiskit.providers.aer.extensions.SnapshotExpectationValue` extension."
msgstr ""

#: ../../release_notes.rst:16564
msgid "Greatly improves performance of the Pauli expectation value snapshot algorithm for the `\"statevector\"`, `\"statevector_gpu`, `\"density_matrix\"`, and `\"density_matrix_gpu\"` simulation methods of the :class:`qiskit.providers.aer.QasmSimulator`."
msgstr ""

#: ../../release_notes.rst:16569
msgid "Enable the gate-fusion circuit optimization from the :class:`qiskit.providers.aer.QasmSimulator` in both the :class:`qiskit.providers.aer.StatevectorSimulator` and :class:`qiskit.providers.aer.UnitarySimulator` backends."
msgstr ""

#: ../../release_notes.rst:16574
msgid "Improve the performance of average snapshot data in simulator results. This effects probability, Pauli expectation value, and density matrix snapshots using the following extensions:"
msgstr ""

#: ../../release_notes.rst:16578
msgid ":class:`qiskit.providers.aer.extensions.SnapshotExpectationValue`"
msgstr ""

#: ../../release_notes.rst:16579
msgid ":class:`qiskit.providers.aer.extensions.SnapshotProbabilities`"
msgstr ""

#: ../../release_notes.rst:16580
msgid ":class:`qiskit.providers.aer.extensions.SnapshotDensityMatrix`"
msgstr ""

#: ../../release_notes.rst:16582
msgid "Add move constructor and improve memory usage of the C++ matrix class to minimize copies of matrices when moving output of simulators into results."
msgstr ""

#: ../../release_notes.rst:16585
msgid "Improve performance of unitary simulator."
msgstr ""

#: ../../release_notes.rst:16587
msgid "Add approximation to the `\"matrix_product_state\"` simulation method of the :class:`~qiskit.providers.aer.QasmSimulator` to limit the bond-dimension of the MPS."
msgstr ""

#: ../../release_notes.rst:16591
msgid "There are two modes of approximation. Both discard the smallest Schmidt coefficients following the SVD algorithm. There are two parameters that control the degree of approximation: ``\"matrix_product_state_max_bond_dimension\"`` (int): Sets a limit on the number of Schmidt coefficients retained at the end of the svd algorithm. Coefficients beyond this limit will be discarded. (Default: None, i.e., no limit on the bond dimension). ``\"matrix_product_state_truncation_threshold\"`` (double): Discard the smallest coefficients for which the sum of their squares is smaller than this threshold. (Default: 1e-16)."
msgstr ""

#: ../../release_notes.rst:16603
msgid "Improve the performance of measure sampling when using the `\"matrix_product_state\"` :class:`~qiskit.providers.aer.QasmSimulator` simulation method."
msgstr ""

#: ../../release_notes.rst:16607
msgid "Add support for ``Delay``, ``Phase`` and ``SetPhase`` pulse instructions to the :class:`qiskit.providers.aer.PulseSimulator`."
msgstr ""

#: ../../release_notes.rst:16610
msgid "Improve the performance of the :class:`qiskit.providers.aer.PulseSimulator` by caching calls to RHS function"
msgstr ""

#: ../../release_notes.rst:16613
msgid "Introduce alternate DE solving methods, specifiable through ``backend_options`` in the :class:`qiskit.providers.aer.PulseSimulator`."
msgstr ""

#: ../../release_notes.rst:16616
msgid "Improve performance of simulator result classes by using move semantics and removing unnecessary copies that were happening when combining results from separate experiments into the final result object."
msgstr ""

#: ../../release_notes.rst:16620
msgid "Greatly improve performance of pybind11 conversion of simulator results by using move semantics where possible, and by moving vector and matrix results to Numpy arrays without copies."
msgstr ""

#: ../../release_notes.rst:16624
msgid "Change the RNG engine for simulators from 32-bit Mersenne twister to 64-bit Mersenne twister engine."
msgstr ""

#: ../../release_notes.rst:16627
msgid "Improves the performance of the `\"statevector\"` simulation method of the :class:`qiskit.providers.aer.QasmSimulator` and :class:`qiskit.providers.aer.StatevectorSimulator` by using SIMD intrinsics on systems that support the AVX2 instruction set. AVX2 support is automatically detected and enabled at runtime."
msgstr ""

#: ../../release_notes.rst:16639
msgid "Changes the build system to use the `Conan package manager <https://conan.io/>`__. This tool will handle most of the dependencies needed by the C++ source code. Internet connection may be needed for the first build or when dependencies are added or updated, in order to download the required packages if they are not in your Conan local repository."
msgstr ""

#: ../../release_notes.rst:16646
msgid "When building the standalone version of qiskit-aer you must install conan first with:"
msgstr ""

#: ../../release_notes.rst:16653 ../../release_notes.rst:17926
msgid "Changes how transpilation passes are handled in the C++ Controller classes so that each pass must be explicitly called. This allows for greater customization on when each pass should be called, and with what parameters. In particular this enables setting different parameters for the gate fusion optimization pass depending on the QasmController simulation method."
msgstr ""

#: ../../release_notes.rst:16659 ../../release_notes.rst:17932
msgid "Add ``gate_length_units`` kwarg to :meth:`qiskit.providers.aer.noise.NoiseModel.from_device` for specifying custom ``gate_lengths`` in the device noise model function to handle unit conversions for internal code."
msgstr ""

#: ../../release_notes.rst:16664 ../../release_notes.rst:17937
msgid "Add Controlled-Y (\"cy\") gate to the Stabilizer simulator methods supported gateset."
msgstr ""

#: ../../release_notes.rst:16667 ../../release_notes.rst:17940
msgid "For Aer's backend the jsonschema validation of input qobj objects from terra is now opt-in instead of being enabled by default. If you want to enable jsonschema validation of qobj set the ``validate`` kwarg on the :meth:`qiskit.providers.aer.QasmSimualtor.run` method for the backend object to ``True``."
msgstr ""

#: ../../release_notes.rst:16673
msgid "Adds an OpSet object to the base simulator State class to allow easier validation of instructions, gates, and snapshots supported by simulators."
msgstr ""

#: ../../release_notes.rst:16676
msgid "Refactor OpSet class. Moved OpSet to separate header file and add ``contains`` and ``difference`` methods based on ``std::set::contains`` and ``std::algorithm::set_difference``. These replace the removed invalid and validate instructions from OpSet, but with the order reversed. It returns a list of other ops not in current opset rather than opset instructions not in the other."
msgstr ""

#: ../../release_notes.rst:16683
msgid "Improves how measurement sampling optimization is checked. The expensive part of this operation is now done once during circuit construction where rather than multiple times during simulation for when checking memory requirements, simulation method, and final execution."
msgstr ""

#: ../../release_notes.rst:16694 ../../release_notes.rst:17952
msgid "Remove \"extended_stabilizer\" from the automatically selected simulation methods. This is needed as the extended stabilizer method is not exact and may give incorrect results for certain circuits unless the user knows how to optimize its configuration parameters."
msgstr ""

#: ../../release_notes.rst:16699 ../../release_notes.rst:17957
msgid "The automatic method now only selects from \"stabilizer\", \"density_matrix\", and \"statevector\" methods. If a non-Clifford circuit that is too large for the statevector method is executed an exception will be raised suggesting you could try explicitly using the \"extended_stabilizer\" or \"matrix_product_state\" methods instead."
msgstr ""

#: ../../release_notes.rst:16705 ../../release_notes.rst:17967
msgid "Disables gate fusion for the matrix product state simulation method as this was causing issues with incorrect results being returned in some cases."
msgstr ""

#: ../../release_notes.rst:16708
msgid "Fixes a bug causing incorrect channel evaluation in the :class:`qiskit.providers.aer.PulseSimulator`."
msgstr ""

#: ../../release_notes.rst:16711
msgid "Fixes several minor bugs for Hamiltonian parsing edge cases in the :class:`qiskit.providers.aer.pulse.system_models.hamiltonian_model.HamiltonianModel` class."
msgstr ""

#: ../../release_notes.rst:16723
msgid "The main change made in this release is a refactor of the Randomized Benchmarking code to integrate the updated Clifford class :class:`qiskit.quantum_info.Clifford` from Terra and to improve the CNOT-Dihedral class."
msgstr ""

#: ../../release_notes.rst:16734
msgid "The :func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq` function was refactored to use the updated Clifford class :class:`~qiskit.quantum_info.Clifford`, to allow efficient Randomized Benchmarking (RB) on Clifford sequences with more than 2 qubits. In addition, the code of the CNOT-Dihedral class :class:`qiskit.ignis.verification.randomized_benchmarking.CNOTDihedral` was refactored to make it more efficient, by using numpy arrays, as well not using pre-generated pickle files storing all the 2-qubit group elements. The :func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq` function has a new kwarg ``rand_seed`` which can be used to specify a seed for the random number generator used to generate the RB circuits. This can be useful for having a reproducible circuit."
msgstr ""

#: ../../release_notes.rst:16745
msgid "The :func:`qiskit.ignis.verification.qv_circuits` function has a new kwarg ``seed`` which can be used to specify a seed for the random number generator used to generate the Quantum Volume circuits. This can be useful for having a reproducible circuit."
msgstr ""

#: ../../release_notes.rst:16756
msgid "The :func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq` function is now using the updated Clifford class :class:`~qiskit.quantum_info.Clifford` and the updated CNOT-Dihedral class :class:`qiskit.ignis.verification.randomized_benchmarking.CNOTDihedral` to construct its output instead of using pre-generated group tables for the Clifford and CNOT-Dihedral group elements, which were stored in pickle files. This may result in subtle differences from the output from the previous version."
msgstr ""

#: ../../release_notes.rst:16764 ../../release_notes.rst:17117
msgid "A new requirement `scikit-learn <https://scikit-learn.org/stable/>`__ has been added to the requirements list. This dependency was added in the 0.3.0 release but wasn't properly exposed as a dependency in that release. This would lead to an ``ImportError`` if the :mod:`qiskit.ignis.measurement.discriminator.iq_discriminators` module was imported. This is now correctly listed as a dependency so that ``scikit-learn`` will be installed with qiskit-ignis."
msgstr ""

#: ../../release_notes.rst:16772
msgid "The :func:`qiskit.ignis.verification.qv_circuits` function is now using the circuit library class :class:`~qiskit.circuit.library.QuantumVolume` to construct its output instead of building the circuit from scratch. This may result in subtle differences from the output from the previous version."
msgstr ""

#: ../../release_notes.rst:16778
msgid "Tomography fitters can now also get list of `Result` objects instead of a single `Result` as requested in `issue #320 <https://github.com/Qiskit/qiskit-ignis/issues/320/>`_."
msgstr ""

#: ../../release_notes.rst:16787
msgid "The kwarg ``interleaved_gates`` for the :func:`qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq` function has been deprecated and will be removed in a future release. It is superseded by ``interleaved_elem``. The helper functions :class:`qiskit.ignis.verification.randomized_benchmarking.BasicUtils`, :class:`qiskit.ignis.verification.randomized_benchmarking.CliffordUtils` and :class:`qiskit.ignis.verification.randomized_benchmarking.DihedralUtils` were deprecated. These classes are superseded by :class:`qiskit.ignis.verification.randomized_benchmarking.RBgroup` that handles the group operations needed for RB. The class :class:`qiskit.ignis.verification.randomized_benchmarking.Clifford` is superseded by :class:`~qiskit.quantum_info.Clifford`."
msgstr ""

#: ../../release_notes.rst:16799
msgid "The kwargs ``qr`` and ``cr`` for the :func:`qiskit.ignis.verification.qv_circuits` function have been deprecated and will be removed in a future release. These kwargs were documented as being used for specifying a :class:`qiskit.circuit.QuantumRegister` and :class:`qiskit.circuit.ClassicalRegister` to use in the generated Quantum Volume circuits instead of creating new ones. However, the parameters were never actually respected and a new Register would always be created regardless of whether they were set or not. This behavior is unchanged and these kwargs still do not have any effect, but are being deprecated prior to removal to avoid a breaking change for users who may have been setting either."
msgstr ""

#: ../../release_notes.rst:16811
msgid "Support for passing in subsets of qubits as a list in the ``qubit_lists`` parameter for the :func:`qiskit.ignis.verification.qv_circuits` function has been deprecated and will removed in a future release. In the past this was used to specify a layout to run the circuit on a device. In other words if you had a 5 qubit device and wanted to run a 2 qubit QV circuit on qubits 1, 3, and 4 of that device. You would pass in ``[1, 3, 4]`` as one of the lists in ``qubit_lists``, which would generate a 5 qubit virtual circuit and have qv applied to qubits 1, 3, and 4 in that virtual circuit. However, this functionality is not necessary and overlaps with the concept of ``initial_layout`` in the transpiler and whether a circuit has been embedded with a layout set. Moving forward instead you should just run :func:`~qiskit.compiler.transpile` or :func:`~qiskit.execute.execute` with initial layout set to do this. For example, running the above example would become::"
msgstr ""

#: ../../release_notes.rst:16839
msgid "Fix a bug of the position of measurement pulses inserted by py:func:`qiskit.ignis.characterization.calibrations.pulse_schedules.drag_schedules`. Fixes `#465 <https://github.com/Qiskit/qiskit-ignis/issues/465>`__"
msgstr ""

#: ../../release_notes.rst:16851
msgid "Removed soft dependency on CPLEX in ADMMOptimizer. Now default optimizers used by ADMMOptimizer are MinimumEigenOptimizer for QUBO problems and SlsqpOptimizer as a continuous optimizer. You can still use CplexOptimizer as an optimizer for ADMMOptimizer, but it should be set explicitly."
msgstr ""

#: ../../release_notes.rst:16855
msgid "New Yahoo! finance provider created."
msgstr ""

#: ../../release_notes.rst:16857
msgid "Introduced ``QuadraticProgramConverter`` which is an abstract class for converters. Added ``convert``/``interpret`` methods for converters instead of ``encode``/``decode``. Added ``to_ising`` and ``from_ising`` to ``QuadraticProgram`` class. Moved all parameters from ``convert`` to constructor except ``name``. Created setter/getter for converter parameters. Added ``auto_define_penalty`` and ``interpret`` for``LinearEqualityToPenalty``. Now error messages of converters are more informative."
msgstr ""

#: ../../release_notes.rst:16865
msgid "Added an SLSQP optimizer ``qiskit.optimization.algorithms.SlsqpOptimizer`` as a wrapper of the corresponding SciPy optimization method. This is a classical optimizer, does not depend on quantum algorithms and may be used as a replacement for ``CobylaOptimizer``."
msgstr ""

#: ../../release_notes.rst:16869
msgid "Cobyla optimizer has been modified to accommodate a multi start feature introduced in the SLSQP optimizer. By default, the optimizer does not run in the multi start mode."
msgstr ""

#: ../../release_notes.rst:16872
msgid "The ``SummedOp`` does a mathematically more correct check for equality, where expressions such as ``X + X == 2*X`` and ``X + Z == Z + X`` evaluate to ``True``."
msgstr ""

#: ../../release_notes.rst:16895
msgid "The ``pprint_as_string`` method for :class:`qiskit.optimization.QuadraticProgram` has been deprecated and will be removed in a future release. Instead you should just run ``.pprint_as_string()`` on the output from :meth:`~qiskit.optimization.QuadraticProgram.to_docplex`"
msgstr ""

#: ../../release_notes.rst:16901
msgid "The ``prettyprint`` method for :class:`qiskit.optimization.QuadraticProgram` has been deprecated and will be removed in a future release. Instead you should just run ``.prettyprint()`` on the output from :meth:`~qiskit.optimization.QuadraticProgram.to_docplex`"
msgstr ""

#: ../../release_notes.rst:16912
msgid "Changed in python version 3.8: On macOS, the spawn start method is now the default. The fork start method should be considered unsafe as it can lead to crashes in subprocesses. However P_BFGS doesn't support spawn, so we revert to single process. Refer to `#1109 <https://github.com/Qiskit/qiskit-aqua/issues/1109>` for more details."
msgstr ""

#: ../../release_notes.rst:16919
msgid "Binding parameters in the ``CircuitStateFn`` did not copy the value of ``is_measurement`` and always set ``is_measurement=False``. This has been fixed."
msgstr ""

#: ../../release_notes.rst:16923
msgid "Previously, SummedOp.to_matrix_op built a list MatrixOp's (with numpy matrices) and then summed them, returning a single MatrixOp. Some algorithms (for example vqe) require summing thousands of matrices, which exhausts memory when building the list of matrices. With this change, no list is constructed. Rather, each operand in the sum is converted to a matrix, added to an accumulator, and discarded."
msgstr ""

#: ../../release_notes.rst:16930
msgid "Changing backends in VQE from statevector to qasm_simulator or real device was causing an error due to CircuitSampler incompatible reuse. VQE was changed to always create a new CircuitSampler and create a new  expectation in case not entered by user. Refer to `#1153 <https://github.com/Qiskit/qiskit-aqua/issues/1153>` for more details."
msgstr ""

#: ../../release_notes.rst:16937
msgid "Exchange and Wikipedia finance providers were fixed to correctly handle Quandl data. Refer to `#775 <https://github.com/Qiskit/qiskit-aqua/issues/775>` for more details. Fixes a divide by 0 error on finance providers mean vector and covariance matrix calculations. Refer to `#781 <https://github.com/Qiskit/qiskit-aqua/issues/781>` for more details."
msgstr ""

#: ../../release_notes.rst:16944
msgid "The ``ListOp.combo_fn`` property has been lost in several transformations, such as converting to another operator type, traversing, reducing or multiplication. Now this attribute is propagated to the resulting operator."
msgstr ""

#: ../../release_notes.rst:16948
msgid "The evaluation of some operator expressions, such as of ``SummedOp``s and evaluations with the ``CircuitSampler`` did not treat coefficients correctly or ignored them completely. E.g. evaluating ``~StateFn(0 * (I + Z)) @ Plus`` did not yield 0 or the normalization of ``~StateFn(I) @ ((Plus + Minus) / sqrt(2))`` missed a factor of ``sqrt(2)``. This has been fixed."
msgstr ""

#: ../../release_notes.rst:16955
msgid "``OptimizationResult`` included some public setters and class variables were ``Optional``. This fix makes all class variables read-only so that mypy and pylint can check types more effectively. ``MinimumEigenOptimizer.solve`` generated bitstrings in a result as ``str``. This fix changed the result into ``List[float]`` as the other algorithms do. Some public classes related to optimization algorithms were missing in the documentation of ``qiskit.optimization.algorithms``. This fix added all such classes to the docstring. `#1131 <https://github.com/Qiskit/qiskit-aqua/issues/1131>` for more details."
msgstr ""

#: ../../release_notes.rst:16965
msgid "``OptimizationResult.__init__`` did not check whether the sizes of ``x`` and ``variables`` match or not (they should match). This fix added the check to raise an error if they do not match and fixes bugs detected by the check. This fix also adds missing unit tests related to ``OptimizationResult.variable_names`` and ``OptimizationResult.variables_dict`` in ``test_converters``. `#1167 <https://github.com/Qiskit/qiskit-aqua/issues/1167>` for more details."
msgstr ""

#: ../../release_notes.rst:16972
msgid "Fix parameter binding in the ``OperatorStateFn``, which did not bind parameters of the underlying primitive but just the coefficients."
msgstr ""

#: ../../release_notes.rst:16975
msgid "``op.eval(other)``, where ``op`` is of type ``OperatorBase``, sometimes silently returns a nonsensical value when the number of qubits in ``op`` and ``other`` are not equal. This fix results in correct behavior, which is to throw an error rather than return a value, because the input in this case is invalid."
msgstr ""

#: ../../release_notes.rst:16981
msgid "The ``construct_circuit`` method of ``VQE`` previously returned the expectation value to be evaluated as type ``OperatorBase``. This functionality has been moved into ``construct_expectation`` and ``construct_circuit`` returns a list of the circuits that are evaluated to compute the expectation value."
msgstr ""

#: ../../release_notes.rst:16996
msgid ":class:`~qiskit.providers.ibmq.IBMQBackend` now has a new :meth:`~qiskit.providers.ibmq.IBMQBackend.reservations` method that returns reservation information for the backend, with optional filtering. In addition, you can now use :meth:`provider.backends.my_reservations()<qiskit.providers.ibmq.IBMQBackendService.my_reservations>` to query for your own reservations."
msgstr ""

#: ../../release_notes.rst:17003
msgid ":meth:`qiskit.providers.ibmq.job.IBMQJob.result` raises an :class:`~qiskit.providers.ibmq.job.IBMQJobFailureError` exception if the job has failed. The exception message now contains the reason the job failed, if the entire job failed for a single reason."
msgstr ""

#: ../../release_notes.rst:17008
msgid "A new attribute ``client_version`` was added to :class:`~qiskit.providers.ibmq.job.IBMQJob` and :class:`qiskit.result.Result` object retrieved via :meth:`qiskit.providers.ibmq.job.IBMQJob.result`. ``client_version`` is a dictionary with the key being the name and the value being the version of the client used to submit the job, such as Qiskit."
msgstr ""

#: ../../release_notes.rst:17016
msgid "The :func:`~qiskit.providers.ibmq.least_busy` function now takes a new, optional parameter ``reservation_lookahead``. If specified or defaulted to, a backend is considered unavailable if it has reservations in the next ``n`` minutes, where ``n`` is the value of ``reservation_lookahead``. For example, if the default value of 60 is used, then any backends that have reservations in the next 60 minutes are considered unavailable."
msgstr ""

#: ../../release_notes.rst:17023
msgid ":class:`~qiskit.providers.ibmq.managed.ManagedResults` now has a new :meth:`~qiskit.providers.ibmq.managed.ManagedResults.combine_results` method that combines results from all managed jobs and returns a single :class:`~qiskit.result.Result` object. This ``Result`` object can be used, for example, in ``qiskit-ignis`` fitter methods."
msgstr ""

#: ../../release_notes.rst:17035
msgid "Timestamps in the following fields are now in local time instead of UTC:"
msgstr ""

#: ../../release_notes.rst:17037
msgid "Backend properties returned by :meth:`qiskit.providers.ibmq.IBMQBackend.properties`."
msgstr ""

#: ../../release_notes.rst:17039
msgid "Backend properties returned by :meth:`qiskit.providers.ibmq.job.IBMQJob.properties`."
msgstr ""

#: ../../release_notes.rst:17041
msgid "``estimated_start_time`` and ``estimated_complete_time`` in :class:`~qiskit.providers.ibmq.job.QueueInfo`, returned by :meth:`qiskit.providers.ibmq.job.IBMQJob.queue_info`."
msgstr ""

#: ../../release_notes.rst:17044
msgid "``date`` in :class:`~qiskit.result.Result`, returned by :meth:`qiskit.providers.ibmq.job.IBMQJob.result`."
msgstr ""

#: ../../release_notes.rst:17047
msgid "In addition, the ``datetime`` parameter for :meth:`qiskit.providers.ibmq.IBMQBackend.properties` is also expected to be in local time unless it has UTC timezone information."
msgstr ""

#: ../../release_notes.rst:17051
msgid "``websockets`` 8.0 or above is now required if Python 3.7 or above is used. ``websockets`` 7.0 will continue to be used for Python 3.6 or below."
msgstr ""

#: ../../release_notes.rst:17054
msgid "On Windows, the event loop policy is set to ``WindowsSelectorEventLoopPolicy`` instead of using the default ``WindowsProactorEventLoopPolicy``. This fixes the issue that the :meth:`qiskit.providers.ibmq.job.IBMQJob.result` method could hang on Windows. Fixes `#691 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/691>`_"
msgstr ""

#: ../../release_notes.rst:17066
msgid "Use of ``Qconfig.py`` to save IBM Quantum Experience credentials is deprecated and will be removed in the next release. You should use ``qiskitrc`` (the default) instead."
msgstr ""

#: ../../release_notes.rst:17076
msgid "Fixes an issue wherein a call to :meth:`qiskit.providers.ibmq.IBMQBackend.jobs` can hang if the number of jobs being returned is large. Fixes `#674 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/674>`_"
msgstr ""

#: ../../release_notes.rst:17080
msgid "Fixes an issue which would raise a ``ValueError`` when building error maps in Jupyter for backends that are offline. Fixes `#706 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/706>`_"
msgstr ""

#: ../../release_notes.rst:17084
msgid ":meth:`qiskit.providers.ibmq.IBMQBackend.jobs` will now return the correct list of :class:`~qiskit.providers.ibmq.job.IBMQJob` objects when the ``status`` kwarg is set to ``'RUNNING'``."
msgstr ""

#: ../../release_notes.rst:17088 ../../release_notes.rst:17388
msgid "The package metadata has been updated to properly reflect the dependency on ``qiskit-terra`` >= 0.14.0. This dependency was implicitly added as part of the 0.7.0 release but was not reflected in the package requirements so it was previously possible to install ``qiskit-ibmq-provider`` with a version of ``qiskit-terra`` which was too old. Fixes `#677 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/677>`_"
msgstr ""

#: ../../release_notes.rst:17097
msgid "Qiskit 0.19.6"
msgstr ""

#: ../../release_notes.rst:17100 ../../release_notes.rst:17151
#: ../../release_notes.rst:17231
msgid "Terra 0.14.2"
msgstr ""

#: ../../release_notes.rst:17102 ../../release_notes.rst:17107
#: ../../release_notes.rst:17138 ../../release_notes.rst:17143
#: ../../release_notes.rst:17153 ../../release_notes.rst:17158
#: ../../release_notes.rst:17223 ../../release_notes.rst:17276
#: ../../release_notes.rst:17281 ../../release_notes.rst:17333
#: ../../release_notes.rst:17342 ../../release_notes.rst:17370
#: ../../release_notes.rst:17375 ../../release_notes.rst:17787
#: ../../release_notes.rst:17793 ../../release_notes.rst:17916
#: ../../release_notes.rst:17992 ../../release_notes.rst:17998
#: ../../release_notes.rst:18004 ../../release_notes.rst:19557
#: ../../release_notes.rst:19562 ../../release_notes.rst:19571
#: ../../release_notes.rst:19576 ../../release_notes.rst:19581
#: ../../release_notes.rst:19586 ../../release_notes.rst:19625
#: ../../release_notes.rst:19630 ../../release_notes.rst:19635
#: ../../release_notes.rst:19640 ../../release_notes.rst:20358
#: ../../release_notes.rst:20363 ../../release_notes.rst:20952
#: ../../release_notes.rst:20957 ../../release_notes.rst:20962
#: ../../release_notes.rst:21475 ../../release_notes.rst:21480
#: ../../release_notes.rst:21485 ../../release_notes.rst:21490
#: ../../release_notes.rst:22355 ../../release_notes.rst:22365
#: ../../release_notes.rst:22393 ../../release_notes.rst:22416
#: ../../release_notes.rst:22421 ../../release_notes.rst:22501
#: ../../release_notes.rst:22506 ../../release_notes.rst:22511
#: ../../release_notes.rst:22516 ../../release_notes.rst:22918
#: ../../release_notes.rst:22923
msgid "No Change"
msgstr ""

#: ../../release_notes.rst:17105 ../../release_notes.rst:17156
#: ../../release_notes.rst:17274 ../../release_notes.rst:17345
msgid "Aer 0.5.2"
msgstr ""

#: ../../release_notes.rst:17110
msgid "Ignis 0.3.3"
msgstr ""

#: ../../release_notes.rst:17131
msgid "Fixes an issue in qiskit-ignis 0.3.2 which would raise an ``ImportError`` when :mod:`qiskit.ignis.verification.tomography.fitters.process_fitter` was imported without ``cvxpy`` being installed."
msgstr ""

#: ../../release_notes.rst:17136 ../../release_notes.rst:17182
msgid "Aqua 0.7.3"
msgstr ""

#: ../../release_notes.rst:17141 ../../release_notes.rst:17221
#: ../../release_notes.rst:17331 ../../release_notes.rst:17378
msgid "IBM Q Provider 0.7.2"
msgstr ""

#: ../../release_notes.rst:17148
msgid "Qiskit 0.19.5"
msgstr ""

#: ../../release_notes.rst:17161
msgid "Ignis 0.3.2"
msgstr ""

#: ../../release_notes.rst:17166
msgid "The :meth:`qiskit.ignis.verification.TomographyFitter.fit` method has improved detection logic for the default fitter. Previously, the ``cvx`` fitter method was used whenever `cvxpy <https://www.cvxpy.org/>`__ was installed. However, it was possible to install cvxpy without an SDP solver that would work for the ``cvx`` fitter method. This logic has been reworked so that the ``cvx`` fitter method is only used if ``cvxpy`` is installed and an SDP solver is present that can be used. Otherwise, the ``lstsq`` fitter is used."
msgstr ""

#: ../../release_notes.rst:17174
msgid "Fixes an edge case in :meth:`qiskit.ignis.mitigation.measurement.fitters.MeasurementFitter.apply` for input that has invalid or incorrect state labels that don't match the calibration circuit. Previously, this would not error and just return an empty result. Instead now this case is correctly caught and a ``QiskitError`` exception is raised when using incorrect labels."
msgstr ""

#: ../../release_notes.rst:17189
msgid "The `cvxpy <https://www.cvxpy.org/>`__ dependency which is required for the svm classifier has been removed from the requirements list and made an optional dependency. This is because installing cvxpy is not seamless in every environment and often requires a compiler be installed to run. To use the svm classifier now you'll need to install cvxpy by either running ``pip install cvxpy<1.1.0`` or to install it with aqua running ``pip install qiskit-aqua[cvx]``."
msgstr ""

#: ../../release_notes.rst:17203
msgid "The ``compose`` method of the ``CircuitOp`` used ``QuantumCircuit.combine`` which has been changed to use ``QuantumCircuit.compose``. Using combine leads to the problem that composing an operator with a ``CircuitOp`` based on a named register does not chain the operators but stacks them. E.g. composing ``Z ^ 2`` with a circuit based on a 2-qubit named register yielded a 4-qubit operator instead of a 2-qubit operator."
msgstr ""

#: ../../release_notes.rst:17209
msgid "The ``MatrixOp.to_instruction`` method previously returned an operator and not an instruction. This method has been updated to return an Instruction. Note that this only works if the operator primitive is unitary, otherwise an error is raised upon the construction of the instruction."
msgstr ""

#: ../../release_notes.rst:17214
msgid "The ``__hash__`` method of the ``PauliOp`` class used the ``id()`` method which prevents set comparisons to work as expected since they rely on hash tables and identical objects used to not have identical hashes. Now, the implementation uses a hash of the string representation inline with the implementation in the ``Pauli`` class."
msgstr ""

#: ../../release_notes.rst:17228
msgid "Qiskit 0.19.4"
msgstr ""

#: ../../release_notes.rst:17238
msgid "The ``circuit_to_gate`` and ``circuit_to_instruction`` converters had previously automatically included the generated gate or instruction in the active ``SessionEquivalenceLibrary``. These converters now accept an optional ``equivalence_library`` keyword argument to specify if and where the converted instances should be registered. The default behavior is not to register the converted instance."
msgstr ""

#: ../../release_notes.rst:17251
msgid "Implementations of the multi-controlled X Gate (``MCXGrayCode``, ``MCXRecursive`` and ``MCXVChain``) have had their ``name`` properties changed to more accurately describe their implementation (``mcx_gray``, ``mcx_recursive``, and ``mcx_vchain`` respectively.) Previously, these gates shared the name ``mcx` with ``MCXGate``, which caused these gates to be incorrectly transpiled and simulated."
msgstr ""

#: ../../release_notes.rst:17259
msgid "``ControlledGate`` instances with a set ``ctrl_state`` were in some cases not being evaluated as equal, even if the compared gates were equivalent. This has been resolved."
msgstr ""

#: ../../release_notes.rst:17263
msgid "Fixed the SI unit conversion for :py:class:`qiskit.pulse.SetFrequency`. The ``SetFrequency`` instruction should be in Hz on the frontend and has to be converted to GHz when ``SetFrequency`` is converted to ``PulseQobjInstruction``."
msgstr ""

#: ../../release_notes.rst:17267
msgid "Open controls were implemented by modifying a gate\\'s definition. However, when the gate already exists in the basis, this definition is not used, which yields incorrect circuits sent to a backend. This modifies the unroller to output the definition if it encounters a controlled gate with open controls."
msgstr ""

#: ../../release_notes.rst:17279 ../../release_notes.rst:17368
#: ../../release_notes.rst:17791 ../../release_notes.rst:17990
#: ../../release_notes.rst:19523
msgid "Ignis 0.3.0"
msgstr ""

#: ../../release_notes.rst:17284
msgid "Aqua 0.7.2"
msgstr ""

#: ../../release_notes.rst:17293
msgid "`cvxpy <https://github.com/cvxgrp/cvxpy/>`_ is now in the requirements list as a dependency for qiskit-aqua. It is used for the quadratic program solver which is used as part of the :class:`qiskit.aqua.algorithms.QSVM`. Previously ``cvxopt`` was an optional dependency that needed to be installed to use this functionality. This is no longer required as cvxpy will be installed with qiskit-aqua."
msgstr ""

#: ../../release_notes.rst:17299
msgid "For state tomography run as part of :class:`qiskit.aqua.algorithms.HHL` with a QASM backend the tomography fitter function :meth:`qiskit.ignis.verification.StateTomographyFitter.fit` now gets called explicitly with the method set to ``lstsq`` to always use the least-squares fitting. Previously it would opportunistically try to use the ``cvx`` fitter if ``cvxpy`` were installed. But, the ``cvx`` fitter depends on a specifically configured ``cvxpy`` installation with an SDP solver installed as part of ``cvxpy`` which is not always present in an environment with ``cvxpy`` installed."
msgstr ""

#: ../../release_notes.rst:17308
msgid "The VQE expectation computation using qiskit-aer's :class:`qiskit.providers.aer.extensions.SnapshotExpectationValue` instruction is not enabled by default anymore. This was changed to be the default in 0.7.0 because it is significantly faster, but it led to unexpected ideal results without shot noise (see `#1013 <https://github.com/Qiskit/qiskit-aqua/issues/1013>`_ for more details). The default has now changed back to match user expectations. Using the faster expectation computation is now opt-in by setting the new ``include_custom`` kwarg to ``True`` on the :class:`qiskit.aqua.algorithms.VQE` constructor."
msgstr ""

#: ../../release_notes.rst:17321
msgid "A new kwarg ``include_custom`` has been added to the constructor for :class:`qiskit.aqua.algorithms.VQE` and it's subclasses (mainly :class:`qiskit.aqua.algorithms.QAOA`). When set to true and the ``expectation`` kwarg is set to ``None`` (the default) this will enable the use of VQE expectation computation with Aer's ``qasm_simulator`` :class:`qiskit.providers.aer.extensions.SnapshotExpectationValue` instruction. The special Aer snapshot based computation is much faster but with the ideal output similar to state vector simulator."
msgstr ""

#: ../../release_notes.rst:17337
msgid "Qiskit 0.19.3"
msgstr ""

#: ../../release_notes.rst:17340
msgid "Terra 0.14.1"
msgstr ""

#: ../../release_notes.rst:17350
msgid "Fixed bug with statevector and unitary simulators running a number of (parallel) shots equal to the number of CPU threads instead of only running a single shot."
msgstr ""

#: ../../release_notes.rst:17353
msgid "Fixes the \"diagonal\" qobj gate instructions being applied incorrectly in the density matrix Qasm Simulator method."
msgstr ""

#: ../../release_notes.rst:17356
msgid "Fixes bug where conditional gates were not being applied correctly on the density matrix simulation method."
msgstr ""

#: ../../release_notes.rst:17359
msgid "Fix bug in CZ gate and Z gate for \"density_matrix_gpu\" and \"density_matrix_thrust\" QasmSimulator methods."
msgstr ""

#: ../../release_notes.rst:17362
msgid "Fixes issue where memory requirements of simulation were not being checked on the QasmSimulator when using a non-automatic simulation method."
msgstr ""

#: ../../release_notes.rst:17365
msgid "Fixed a memory leak that effected the GPU simulator methods"
msgstr ""

#: ../../release_notes.rst:17373
msgid "Aqua 0.7.1"
msgstr ""

#: ../../release_notes.rst:17383
msgid ":meth:`qiskit.provider.ibmq.IBMQBackend.jobs` will now return the correct list of :class:`~qiskit.provider.ibmq.job.IBMQJob` objects when the ``status`` kwarg is set to ``'RUNNING'``. Fixes `#523 <https://github.com/Qiskit/qiskit-ibmq-provider/issues/523>`_"
msgstr ""

#: ../../release_notes.rst:17397
msgid "Qiskit 0.19.0"
msgstr ""

#: ../../release_notes.rst:17400
msgid "Terra 0.14.0"
msgstr ""

#: ../../release_notes.rst:17407
msgid "The 0.14.0 release includes several new features and bug fixes. The biggest change for this release is the introduction of a quantum circuit library in :mod:`qiskit.circuit.library`, containing some circuit families of interest."
msgstr ""

#: ../../release_notes.rst:17412
msgid "The circuit library gives users access to a rich set of well-studied circuit families, instances of which can be used as benchmarks, as building blocks in building more complex circuits, or as a tool to explore quantum computational advantage over classical. The contents of this library will continue to grow and mature."
msgstr ""

#: ../../release_notes.rst:17418
msgid "The initial release of the circuit library contains:"
msgstr ""

#: ../../release_notes.rst:17420
msgid "``standard_gates``: these are fixed-width gates commonly used as primitive building blocks, consisting of 1, 2, and 3 qubit gates. For example the :class:`~qiskit.circuit.library.XGate`, :class:`~qiskit.circuit.library.RZZGate` and :class:`~qiskit.circuit.library.CSWAPGate`. The old location of these gates under ``qiskit.extensions.standard`` is deprecated."
msgstr ""

#: ../../release_notes.rst:17426
msgid "``generalized_gates``: these are families that can generalize to arbitrarily many qubits, for example a :class:`~qiskit.circuit.library.Permutation` or :class:`~qiskit.circuit.library.GMS` (Global Molmer-Sorensen gate)."
msgstr ""

#: ../../release_notes.rst:17429
msgid "``boolean_logic``: circuits that transform basis states according to simple Boolean logic functions, such as :class:`~qiskit.circuit.library.ADD` or :class:`~qiskit.circuit.library.XOR`."
msgstr ""

#: ../../release_notes.rst:17432
msgid "``arithmetic``: a set of circuits for doing classical arithmetic such as :class:`~qiskit.circuit.library.WeightedAdder` and :class:`~qiskit.circuit.library.IntegerComparator`."
msgstr ""

#: ../../release_notes.rst:17435
msgid "``basis_changes``: circuits such as the quantum Fourier transform, :class:`~qiskit.circuit.library.QFT`, that mathematically apply basis changes."
msgstr ""

#: ../../release_notes.rst:17438
msgid "``n_local``: patterns to easily create large circuits with rotation and entanglement layers, such as  :class:`~qiskit.circuit.library.TwoLocal` which uses single-qubit rotations and two-qubit entanglements."
msgstr ""

#: ../../release_notes.rst:17441
msgid "``data_preparation``: circuits that take classical input data and encode it in a quantum state that is difficult to simulate, e.g. :class:`~qiskit.circuit.library.PauliFeatureMap` or :class:`~qiskit.circuit.library.ZZFeatureMap`."
msgstr ""

#: ../../release_notes.rst:17445
msgid "Other circuits that have proven interesting in the literature, such as :class:`~qiskit.circuit.library.QuantumVolume`, :class:`~qiskit.circuit.library.GraphState`, or :class:`~qiskit.circuit.library.IQP`."
msgstr ""

#: ../../release_notes.rst:17450
msgid "To allow easier use of these circuits as building blocks, we have introduced a :meth:`~qiskit.circuit.QuantumCircuit.compose` method of :class:`qiskit.circuit.QuantumCircuit` for composition of circuits either with other circuits (by welding them at the ends and optionally permuting wires) or with other simpler gates::"
msgstr ""

#: ../../release_notes.rst:17473
msgid "With this, Qiskit's circuits no longer assume an implicit initial state of :math:`|0\\rangle`, and will not be drawn with this initial state. The all-zero initial state is still assumed on a backend when a circuit is executed."
msgstr ""

#: ../../release_notes.rst:17484
msgid "A new method, :meth:`~qiskit.circuit.EquivalenceLibrary.has_entry`, has been added to the :class:`qiskit.circuit.EquivalenceLibrary` class to quickly check if a given gate has any known decompositions in the library."
msgstr ""

#: ../../release_notes.rst:17488
msgid "A new class :class:`~qiskit.circuit.library.IQP`, to construct an instantaneous quantum polynomial circuit, has been added to the circuit library module :mod:`qiskit.circuit.library`."
msgstr ""

#: ../../release_notes.rst:17492
msgid "A new :meth:`~qiskit.circuit.QuantumCircuit.compose` method has been added to :class:`qiskit.circuit.QuantumCircuit`. It allows composition of two quantum circuits without having to turn one into a gate or instruction. It also allows permutations of qubits/clbits at the point of composition, as well as optional inplace modification. It can also be used in place of :meth:`~qiskit.circuit.QuantumCircuit.append()`, as it allows composing instructions and operators onto the circuit as well."
msgstr ""

#: ../../release_notes.rst:17501
msgid ":class:`qiskit.circuit.library.Diagonal` circuits have been added to the circuit library. These circuits implement diagonal quantum operators (consisting of non-zero elements only on the diagonal). They are more efficiently simulated by the Aer simulator than dense matrices."
msgstr ""

#: ../../release_notes.rst:17506
msgid "Add :meth:`~qiskit.quantum_info.Clifford.from_label` method to the :class:`qiskit.quantum_info.Clifford` class for initializing as the tensor product of single-qubit I, X, Y, Z, H, or S gates."
msgstr ""

#: ../../release_notes.rst:17510
msgid "Schedule transformer :func:`qiskit.pulse.reschedule.compress_pulses` performs an optimization pass to reduce the usage of waveform memory in hardware by replacing multiple identical instances of a pulse in a pulse schedule with a single pulse. For example::"
msgstr ""

#: ../../release_notes.rst:17528
msgid "The :class:`qiskit.transpiler.Layout` has a new method :meth:`~qiskit.transpiler.Layout.reorder_bits` that is used to reorder a list of virtual qubits based on the layout object."
msgstr ""

#: ../../release_notes.rst:17532
msgid "Two new methods have been added to the :class:`qiskit.providers.models.PulseBackendConfiguration` for interacting with channels."
msgstr ""

#: ../../release_notes.rst:17536
msgid ":meth:`~qiskit.providers.models.PulseBackendConfiguration.get_channel_qubits` to get a list of all qubits operated by the given channel and"
msgstr ""

#: ../../release_notes.rst:17538
msgid ":meth:`~qiskit.providers.models.PulseBackendConfiguration.get_qubit_channel` to get a list of channels operating on the given qubit."
msgstr ""

#: ../../release_notes.rst:17541
msgid "New :class:`qiskit.extensions.HamiltonianGate` and :meth:`qiskit.circuit.QuantumCircuit.hamiltonian()` methods are introduced, representing Hamiltonian evolution of the circuit wavefunction by a user-specified Hermitian Operator and evolution time. The evolution time can be a :class:`~qiskit.circuit.Parameter`, allowing the creation of parameterized UCCSD or QAOA-style circuits which compile to ``UnitaryGate`` objects if ``time`` parameters are provided. The Unitary of a ``HamiltonianGate`` with Hamiltonian Operator ``H`` and time parameter ``t`` is :math:`e^{-iHt}`."
msgstr ""

#: ../../release_notes.rst:17551
msgid "The circuit library module :mod:`qiskit.circuit.library` now provides a new boolean logic AND circuit, :class:`qiskit.circuit.library.AND`, and OR circuit, :class:`qiskit.circuit.library.OR`, which implement the respective operations on a variable number of provided qubits."
msgstr ""

#: ../../release_notes.rst:17556
msgid "New fake backends are added under :mod:`qiskit.test.mock`. These include mocked versions of ``ibmq_armonk``, ``ibmq_essex``, ``ibmq_london``, ``ibmq_valencia``, ``ibmq_cambridge``, ``ibmq_paris``, ``ibmq_rome``, and ``ibmq_athens``. As with other fake backends, these include snapshots of calibration data (i.e. ``backend.defaults()``) and error data (i.e. ``backend.properties()``) taken from the real system, and can be used for local testing, compilation and simulation."
msgstr ""

#: ../../release_notes.rst:17564
msgid "The ``last_update_date`` parameter for :class:`~qiskit.providers.models.BackendProperties` can now also be passed in as a ``datetime`` object. Previously only a string in ISO8601 format was accepted."
msgstr ""

#: ../../release_notes.rst:17569
msgid "Adds :meth:`qiskit.quantum_info.Statevector.from_int` and :meth:`qiskit.quantum_info.DensityMatrix.from_int` methods that allow constructing a computational basis state for specified system dimensions."
msgstr ""

#: ../../release_notes.rst:17573
msgid "The methods on the :class:`qiskit.circuit.QuantumCircuit` class for adding gates (for example :meth:`~qiskit.circuit.QuantumCircuit.h`) which were previously added dynamically at run time to the class definition have been refactored to be statically defined methods of the class. This means that static analyzer (such as IDEs) can now read these methods."
msgstr ""

#: ../../release_notes.rst:17585
msgid "A new package, `python-dateutil <https://pypi.org/project/python-dateutil/>`_, is now required and has been added to the requirements list. It is being used to parse datetime strings received from external providers in :class:`~qiskit.providers.models.BackendProperties` objects."
msgstr ""

#: ../../release_notes.rst:17591
msgid "The marshmallow schema classes in :mod:`qiskit.providers.models` have been removed since they are no longer used by the BackendObjects."
msgstr ""

#: ../../release_notes.rst:17594
msgid "The output of the ``to_dict()`` method for the classes in :mod:`qiskit.providers.models` is no longer in a format for direct JSON serialization. Depending on the content contained in instances of these class there may be numpy arrays and/or complex numbers in the fields of the dict. If you're JSON serializing the output of the to_dict methods you should ensure your JSON encoder can handle numpy arrays and complex numbers. This includes:"
msgstr ""

#: ../../release_notes.rst:17602
msgid ":meth:`qiskit.providers.models.BackendConfiguration.to_dict`"
msgstr ""

#: ../../release_notes.rst:17603
msgid ":meth:`qiskit.providers.models.BackendProperties.to_dict`"
msgstr ""

#: ../../release_notes.rst:17604
msgid ":meth:`qiskit.providers.models.BackendStatus.to_dict`"
msgstr ""

#: ../../release_notes.rst:17605
msgid ":meth:`qiskit.providers.models.QasmBackendConfiguration.to_dict`"
msgstr ""

#: ../../release_notes.rst:17606
msgid ":meth:`qiskit.providers.models.PulseBackendConfiguration.to_dict`"
msgstr ""

#: ../../release_notes.rst:17607
msgid ":meth:`qiskit.providers.models.UchannelLO.to_dict`"
msgstr ""

#: ../../release_notes.rst:17608
msgid ":meth:`qiskit.providers.models.GateConfig.to_dict`"
msgstr ""

#: ../../release_notes.rst:17609
msgid ":meth:`qiskit.providers.models.PulseDefaults.to_dict`"
msgstr ""

#: ../../release_notes.rst:17610
msgid ":meth:`qiskit.providers.models.Command.to_dict`"
msgstr ""

#: ../../release_notes.rst:17611
msgid ":meth:`qiskit.providers.models.JobStatus.to_dict`"
msgstr ""

#: ../../release_notes.rst:17612
msgid ":meth:`qiskit.providers.models.Nduv.to_dict`"
msgstr ""

#: ../../release_notes.rst:17613
msgid ":meth:`qiskit.providers.models.Gate.to_dict`"
msgstr ""

#: ../../release_notes.rst:17621
msgid "The :meth:`qiskit.dagcircuit.DAGCircuit.compose` method now takes a list of qubits/clbits that specify the positional order of bits to compose onto. The dictionary-based method of mapping using the ``edge_map`` argument is deprecated and will be removed in a future release."
msgstr ""

#: ../../release_notes.rst:17626
msgid "The ``combine_into_edge_map()`` method for the :class:`qiskit.transpiler.Layout` class has been deprecated and will be removed in a future release. Instead, the new method :meth:`~qiskit.transpiler.Layout.reorder_bits` should be used to reorder a list of virtual qubits according to the layout object."
msgstr ""

#: ../../release_notes.rst:17632
msgid "Passing a :class:`qiskit.pulse.ControlChannel` object in via the parameter ``channel`` for the :class:`qiskit.providers.models.PulseBackendConfiguration` method :meth:`~qiskit.providers.models.PulseBackendConfiguration.control` has been deprecated and will be removed in a future release. The ``ControlChannel`` objects are now generated from the backend configuration ``channels`` attribute which has the information of all channels and the qubits they operate on. Now, the method :meth:`~qiskit.providers.models.PulseBackendConfiguration.control` is expected to take the parameter ``qubits`` of the form ``(control_qubit, target_qubit)`` and type ``list`` or ``tuple``, and returns a list of control channels."
msgstr ""

#: ../../release_notes.rst:17645
msgid "The ``AND`` and ``OR`` methods of :class:`qiskit.circuit.QuantumCircuit` are deprecated and will be removed in a future release. Instead you should use the circuit library boolean logic classes :class:`qiskit.circuit.library.AND` amd :class:`qiskit.circuit.library.OR` and then append those objects to your class. For example::"
msgstr ""

#: ../../release_notes.rst:17662
msgid "The ``qiskit.extensions.standard`` module is deprecated and will be removed in a future release. The gate classes in that module have been moved to :mod:`qiskit.circuit.library.standard_gates`."
msgstr ""

#: ../../release_notes.rst:17672
msgid "The :class:`qiskit.circuit.QuantumCircuit` methods :meth:`~qiskit.circuit.QuantumCircuit.inverse`, :meth:`~qiskit.circuit.QuantumCircuit.mirror` methods, as well as the ``QuantumCircuit.data`` setter would generate an invalid circuit when used on a parameterized circuit instance. This has been resolved and these methods should now work with a parameterized circuit. Fixes `#4235 <https://github.com/Qiskit/qiskit-terra/issues/4235>`_"
msgstr ""

#: ../../release_notes.rst:17680
msgid "Previously when creating a controlled version of a standard qiskit gate if a ``ctrl_state`` was specified a generic ``ControlledGate`` object would be returned whereas without it a standard qiskit controlled gate would be returned if it was defined. This PR allows standard qiskit controlled gates to understand ``ctrl_state``."
msgstr ""

#: ../../release_notes.rst:17687
msgid "Additionally, this PR fixes what might be considered a bug where setting the ``ctrl_state`` of an already controlled gate would assume the specified state applied to the full control width instead of the control qubits being added. For instance,::"
msgstr ""

#: ../../release_notes.rst:17699
msgid "would apply ``ctrl_state`` to all three control qubits instead of just the two control qubits being added."
msgstr ""

#: ../../release_notes.rst:17702
msgid "Fixed a bug in :func:`~qiskit.quantum_info.random_clifford` that stopped it from sampling the full Clifford group. Fixes `#4271 <https://github.com/Qiskit/qiskit-terra/issues/4271>`_"
msgstr ""

#: ../../release_notes.rst:17706
msgid "The :class:`qiskit.circuit.Instruction` method :meth:`qiskit.circuit.Instruction.is_parameterized` method had previously returned ``True`` for any ``Instruction`` instance which had a :class:`qiskit.circuit.Parameter` in any element of its ``params`` array, even if that ``Parameter`` had been fully bound. This has been corrected so that ``.is_parameterized`` will return ``False`` when the instruction is fully bound."
msgstr ""

#: ../../release_notes.rst:17714
msgid ":meth:`qiskit.circuit.ParameterExpression.subs` had not correctly detected some cases where substituting parameters would result in a two distinct :class:`~qiskit.circuit.Parameters` objects in an expression with the same name. This has been corrected so a ``CircuitError`` will be raised in these cases."
msgstr ""

#: ../../release_notes.rst:17720
msgid "Improve performance of :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` for low-qubit circuit simulations by optimizing the class ``__init__`` methods. Fixes `#4281 <https://github.com/Qiskit/qiskit-terra/issues/4281>`_"
msgstr ""

#: ../../release_notes.rst:17725
msgid "The function :func:`qiskit.compiler.transpile` now correctly handles when the parameter ``basis_gates`` is set to ``None``. This will allow any gate in the output tranpiled circuit, including gates added by the transpilation process. Note that using this parameter may have some unintended consequences during optimization. Some transpiler passes depend on having a ``basis_gates`` set. For example, :class:`qiskit.transpiler.passes.Optimize1qGates` only optimizes the chains of u1, u2, and u3 gates and without ``basis_gates`` it is unable to unroll gates that otherwise could be optimized:"
msgstr ""

#: ../../release_notes.rst:17755
msgid "Fixes `#3017 <https://github.com/Qiskit/qiskit-terra/issues/3017>`_"
msgstr ""

#: ../../release_notes.rst:17763
msgid "The objects in :mod:`qiskit.providers.models` which were previously constructed using the marshmallow library have been refactored to not depend on marshmallow. This includes:"
msgstr ""

#: ../../release_notes.rst:17767
msgid ":class:`~qiskit.providers.models.BackendConfiguration`"
msgstr ""

#: ../../release_notes.rst:17768
msgid ":class:`~qiskit.providers.models.BackendProperties`"
msgstr ""

#: ../../release_notes.rst:17769
msgid ":class:`~qiskit.providers.models.BackendStatus`"
msgstr ""

#: ../../release_notes.rst:17770
msgid ":class:`~qiskit.providers.models.QasmBackendConfiguration`"
msgstr ""

#: ../../release_notes.rst:17771
msgid ":class:`~qiskit.providers.models.PulseBackendConfiguration`"
msgstr ""

#: ../../release_notes.rst:17772
msgid ":class:`~qiskit.providers.models.UchannelLO`"
msgstr ""

#: ../../release_notes.rst:17773
msgid ":class:`~qiskit.providers.models.GateConfig`"
msgstr ""

#: ../../release_notes.rst:17774
msgid ":class:`~qiskit.providers.models.PulseDefaults`"
msgstr ""

#: ../../release_notes.rst:17775
msgid ":class:`~qiskit.providers.models.Command`"
msgstr ""

#: ../../release_notes.rst:17776
msgid ":class:`~qiskit.providers.models.JobStatus`"
msgstr ""

#: ../../release_notes.rst:17777
msgid ":class:`~qiskit.providers.models.Nduv`"
msgstr ""

#: ../../release_notes.rst:17778
msgid ":class:`~qiskit.providers.models.Gate`"
msgstr ""

#: ../../release_notes.rst:17780
msgid "These should be drop-in replacements without any noticeable change but specifics inherited from marshmallow may not work. Please file issues for any incompatibilities found."
msgstr ""

#: ../../release_notes.rst:17785 ../../release_notes.rst:17919
msgid "Aer 0.5.1"
msgstr ""

#: ../../release_notes.rst:17796
msgid "Aqua 0.7.0"
msgstr ""

#: ../../release_notes.rst:17801
msgid "The Qiskit Aqua 0.7.0 release introduces a lot of new functionality along with an improved integration with :class:`qiskit.circuit.QuantumCircuit` objects. The central contributions are the Qiskit's optimization module, a complete refactor on Operators, using circuits as native input for the algorithms and removal of the declarative JSON API."
msgstr ""

#: ../../release_notes.rst:17808
msgid "Optimization module"
msgstr ""

#: ../../release_notes.rst:17809
msgid "The :mod:`qiskit.optimization`` module now offers functionality for modeling and solving quadratic programs. It provides various near-term quantum and conventional algorithms, such as the ``MinimumEigenOptimizer`` (covering e.g. ``VQE`` or ``QAOA``) or ``CplexOptimizer``, as well as a set of converters to translate between different problem representations, such as ``QuadraticProgramToQubo``. See the `changelog <https://github.com/Qiskit/qiskit-aqua/blob/master/CHANGELOG.md>`_ for a list of the added features."
msgstr ""

#: ../../release_notes.rst:17820
msgid "Operator flow"
msgstr ""

#: ../../release_notes.rst:17821
msgid "The operator logic provided in :mod:`qiskit.aqua.operators`` was completely refactored and is now a full set of tools for constructing physically-intuitive quantum computations. It contains state functions, operators and measurements and internally relies on Terra's Operator objects. Computing expectation values and evolutions was heavily simplified and objects like the ``ExpectationFactory`` produce the suitable, most efficient expectation algorithm based on the Operator input type. See the `changelog <https://github.com/Qiskit/qiskit-aqua/blob/master/CHANGELOG.md>`_ for a overview of the added functionality."
msgstr ""

#: ../../release_notes.rst:17832
msgid "Native circuits"
msgstr ""

#: ../../release_notes.rst:17833
msgid "Algorithms commonly use parameterized circuits as input, for example the VQE, VQC or QSVM. Previously, these inputs had to be of type ``VariationalForm`` or ``FeatureMap`` which were wrapping the circuit object. Now circuits are natively supported in these algorithms, which means any individually constructed ``QuantumCircuit`` can be passed to these algorithms. In combination with the release of the circuit library which offers a wide collection of circuit families, it is now easy to construct elaborate circuits as algorithm input."
msgstr ""

#: ../../release_notes.rst:17843
msgid "Declarative JSON API"
msgstr ""

#: ../../release_notes.rst:17844
msgid "The ability of running algorithms using dictionaries as parameters as well as using the Aqua interfaces GUI has been removed."
msgstr ""

#: ../../release_notes.rst:17849
msgid "IBM Q Provider 0.7.0"
msgstr ""

#: ../../release_notes.rst:17856
msgid "A new exception, :class:`qiskit.providers.ibmq.IBMQBackendJobLimitError`, is now raised if a job could not be submitted because the limit on active jobs has been reached."
msgstr ""

#: ../../release_notes.rst:17860
msgid ":class:`qiskit.providers.ibmq.job.IBMQJob` and :class:`qiskit.providers.ibmq.managed.ManagedJobSet` each has two new methods ``update_name`` and ``update_tags``. They are used to change the name and tags of a job or a job set, respectively."
msgstr ""

#: ../../release_notes.rst:17865
msgid ":meth:`qiskit.providers.ibmq.IBMQFactory.save_account` and :meth:`qiskit.providers.ibmq.IBMQFactory.enable_account` now accept optional parameters ``hub``, ``group``, and ``project``, which allow specifying a default provider to save to disk or use, respectively."
msgstr ""

#: ../../release_notes.rst:17876
msgid "The :class:`qiskit.providers.ibmq.job.IBMQJob` methods ``creation_date`` and ``time_per_step`` now return date time information as a ``datetime`` object in local time instead of UTC. Similarly, the parameters ``start_datetime`` and ``end_datetime``, of :meth:`qiskit.providers.ibmq.IBMQBackendService.jobs` and :meth:`qiskit.providers.ibmq.IBMQBackend.jobs` can now be specified in local time."
msgstr ""

#: ../../release_notes.rst:17883
msgid "The :meth:`qiskit.providers.ibmq.job.QueueInfo.format` method now uses a custom ``datetime`` to string formatter, and the package `arrow <https://pypi.org/project/arrow/>`_ is no longer required and has been removed from the requirements list."
msgstr ""

#: ../../release_notes.rst:17894
msgid "The :meth:`~qiskit.providers.ibmq.job.IBMQJob.from_dict` and :meth:`~qiskit.providers.ibmq.job.IBMQJob.to_dict` methods of :class:`qiskit.providers.ibmq.job.IBMQJob` are deprecated and will be removed in the next release."
msgstr ""

#: ../../release_notes.rst:17905
msgid "Fixed an issue where ``nest_asyncio.apply()`` may raise an exception if there is no asyncio loop due to threading."
msgstr ""

#: ../../release_notes.rst:17911
msgid "Qiskit 0.18.3"
msgstr ""

#: ../../release_notes.rst:17914 ../../release_notes.rst:18014
msgid "Terra 0.13.0"
msgstr ""

#: ../../release_notes.rst:17963
msgid "Fixes Controller classes so that the ReduceBarrier transpilation pass is applied first. This prevents barrier instructions from preventing truncation of unused qubits if the only instruction defined on them was a barrier."
msgstr ""

#: ../../release_notes.rst:17970
msgid "Fix error in gate time unit conversion for device noise model with thermal relaxation errors and gate errors. The error probability the depolarizing error was being  calculated with gate time in microseconds, while for thermal relaxation it was being calculated in nanoseconds. This resulted in no depolarizing error being applied as the incorrect units would make the device seem to be coherence limited."
msgstr ""

#: ../../release_notes.rst:17977
msgid "Fix bug in incorrect composition of QuantumErrors when the qubits of composed instructions differ."
msgstr ""

#: ../../release_notes.rst:17980
msgid "Fix issue where the \"diagonal\" gate is checked to be unitary with too high a tolerance. This was causing diagonals generated from Numpy functions to often fail the test."
msgstr ""

#: ../../release_notes.rst:17984
msgid "Fix remove-barrier circuit optimization pass to be applied before qubit trucation. This fixes an issue where barriers inserted by the Terra transpiler across otherwise inactive qubits would prevent them from being truncated."
msgstr ""

#: ../../release_notes.rst:17996
msgid "Aqua 0.6.6"
msgstr ""

#: ../../release_notes.rst:18002
msgid "IBM Q Provider 0.6.1"
msgstr ""

#: ../../release_notes.rst:18009
msgid "Qiskit 0.18.0"
msgstr ""

#: ../../release_notes.rst:18021
msgid "The 0.13.0 release includes many big changes. Some highlights for this release are:"
msgstr ""

#: ../../release_notes.rst:18024
msgid "For the transpiler we have switched the graph library used to build the :class:`qiskit.dagcircuit.DAGCircuit` class which is the underlying data structure behind all operations to be based on `retworkx <https://pypi.org/project/retworkx/>`_ for greatly improved performance. Circuit transpilation speed in the 0.13.0 release should be significanlty faster than in previous releases."
msgstr ""

#: ../../release_notes.rst:18031
msgid "There has been a significant simplification to the style in which Pulse instructions are built. Now, ``Command`` s are deprecated and a unified set of :class:`~qiskit.pulse.instructions.Instruction` s are supported."
msgstr ""

#: ../../release_notes.rst:18035
msgid "The :mod:`qiskit.quantum_info` module includes several new functions for generating random operators (such as Cliffords and quantum channels) and for computing the diamond norm of quantum channels; upgrades to the :class:`~qiskit.quantum_info.Statevector` and :class:`~qiskit.quantum_info.DensityMatrix` classes to support computing measurement probabilities and sampling measurements; and several new classes are based on the symplectic representation of Pauli matrices. These new classes include Clifford operators (:class:`~qiskit.quantum_info.Clifford`), N-qubit matrices that are sparse in the Pauli basis (:class:`~qiskit.quantum_info.SparsePauliOp`), lists of Pauli's (:class:`~qiskit.quantum_info.PauliTable`), and lists of stabilizers (:class:`~qiskit.quantum_info.StabilizerTable`)."
msgstr ""

#: ../../release_notes.rst:18048
msgid "This release also has vastly improved documentation across Qiskit, including improved documentation for the :mod:`qiskit.circuit`, :mod:`qiskit.pulse` and :mod:`qiskit.quantum_info` modules."
msgstr ""

#: ../../release_notes.rst:18052
msgid "Additionally, the naming of gate objects and :class:`~qiskit.circuit.QuantumCircuit` methods have been updated to be more consistent. This has resulted in several classes and methods being deprecated as things move to a more consistent naming scheme."
msgstr ""

#: ../../release_notes.rst:18057
msgid "For full details on all the changes made in this release see the detailed release notes below."
msgstr ""

#: ../../release_notes.rst:18066
msgid "Added a new circuit library module :mod:`qiskit.circuit.library`. This will be a place for constructors of commonly used circuits that can be used as building blocks for larger circuits or applications."
msgstr ""

#: ../../release_notes.rst:18070
msgid "The :class:`qiskit.providers.BaseJob` class has four new methods:"
msgstr ""

#: ../../release_notes.rst:18072
msgid ":meth:`~qiskit.providers.BaseJob.done`"
msgstr ""

#: ../../release_notes.rst:18073
msgid ":meth:`~qiskit.providers.BaseJob.running`"
msgstr ""

#: ../../release_notes.rst:18074
msgid ":meth:`~qiskit.providers.BaseJob.cancelled`"
msgstr ""

#: ../../release_notes.rst:18075
msgid ":meth:`~qiskit.providers.BaseJob.in_final_state`"
msgstr ""

#: ../../release_notes.rst:18077
msgid "These methods are used to check wheter a job is in a given job status."
msgstr ""

#: ../../release_notes.rst:18079
msgid "Add ability to specify control conditioned on a qubit being in the ground state. The state of the control qubits is represented by an integer. For example::"
msgstr ""

#: ../../release_notes.rst:18090
msgid "Creates a four qubit gate where the fourth qubit gets flipped if the first qubit is in the ground state and the second and third qubits are in the excited state. If ``ctrl_state`` is ``None``, the default, control is conditioned on all control qubits being excited."
msgstr ""

#: ../../release_notes.rst:18096
#, python-format
msgid "A new jupyter widget, ``%circuit_library_info`` has been added to :mod:`qiskit.tools.jupyter`. This widget is used for visualizing details about circuits built from the circuit library. For example"
msgstr ""

#: ../../release_notes.rst:18107
msgid "A new kwarg option, ``formatted`` ,  has been added to :meth:`qiskit.circuit.QuantumCircuit.qasm` . When set to ``True`` the method will print a syntax highlighted version (using pygments) to stdout and return ``None`` (which differs from the normal behavior of returning the QASM code as a string)."
msgstr ""

#: ../../release_notes.rst:18113
msgid "A new kwarg option, ``filename`` , has been added to :meth:`qiskit.circuit.QuantumCircuit.qasm`. When set to a path the method will write the QASM code to that file. It will then continue to output as normal."
msgstr ""

#: ../../release_notes.rst:18118
msgid "A new instruction :py:class:`~qiskit.pulse.SetFrequency` which allows users to change the frequency of the :class:`~qiskit.pulse.PulseChannel`. This is done in the following way::"
msgstr ""

#: ../../release_notes.rst:18128
msgid "In this example, the frequency of all pulses before the ``SetFrequency`` command will be the default frequency and all pulses applied to drive channel zero after the ``SetFrequency`` command will be at 5.5 GHz. Users of ``SetFrequency`` should keep in mind any hardware limitations."
msgstr ""

#: ../../release_notes.rst:18133
msgid "A new method, :meth:`~qiskit.circuit.QuantumCircuit.assign_parameters` has been added to the :class:`qiskit.circuit.QuantumCircuit` class. This method accepts a parameter dictionary with both floats and Parameters objects in a single dictionary. In other words this new method allows you to bind floats, Parameters or both in a single dictionary."
msgstr ""

#: ../../release_notes.rst:18139
msgid "Also, by using the ``inplace`` kwarg it can be specified you can optionally modify the original circuit in place. By default this is set to ``False`` and a copy of the original circuit will be returned from the method."
msgstr ""

#: ../../release_notes.rst:18143
msgid "A new method :meth:`~qiskit.circuit.QuantumCircuit.num_nonlocal_gates` has been added to the :class:`qiskit.circuit.QuantumCircuit` class. This method will return the number of gates in a circuit that involve 2 or or more qubits. These gates are more costly in terms of time and error to implement."
msgstr ""

#: ../../release_notes.rst:18149
msgid "The :class:`qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.iso` for adding an :class:`~qiskit.extensions.Isometry` gate to the circuit has a new alias. You can now call :meth:`qiskit.circuit.QuantumCircuit.isometry` in addition to calling ``iso``."
msgstr ""

#: ../../release_notes.rst:18155
msgid "A ``description`` attribute has been added to the :class:`~qiskit.transpiler.CouplingMap` class for storing a short description for different coupling maps (e.g. full, grid, line, etc.)."
msgstr ""

#: ../../release_notes.rst:18159
msgid "A new method :meth:`~qiskit.dagcircuit.DAGCircuit.compose` has been added to the :class:`~qiskit.dagcircuit.DAGCircuit` class for composing two circuits via their DAGs."
msgstr ""

#: ../../release_notes.rst:18202
msgid "The mock backends in ``qiskit.test.mock`` now have a functional ``run()`` method that will return results similar to the real devices. If ``qiskit-aer`` is installed a simulation will be run with a noise model built from the device snapshot in the fake backend.  Otherwise, :class:`qiskit.providers.basicaer.QasmSimulatorPy` will be used to run an ideal simulation. Additionally, if a pulse experiment is passed to ``run`` and qiskit-aer is installed the ``PulseSimulator`` will be used to simulate the pulse schedules."
msgstr ""

#: ../../release_notes.rst:18211
msgid "The :meth:`qiskit.result.Result` method :meth:`~qiskit.result.Result.get_counts` will now return a list of all the counts available when there are multiple circuits in a job. This works when ``get_counts()`` is called with no arguments."
msgstr ""

#: ../../release_notes.rst:18216
msgid "The main consideration for this feature was for drawing all the results from multiple circuits in the same histogram. For example it is now possible to do something like:"
msgstr ""

#: ../../release_notes.rst:18237
msgid "A new kwarg, ``initial_state`` has been added to the :func:`qiskit.visualization.circuit_drawer` function and the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.draw`. When set to ``True`` the initial state will be included in circuit visualizations for all backends. For example:"
msgstr ""

#: ../../release_notes.rst:18252
msgid "It is now possible to insert a callable into a :class:`qiskit.pulse.InstructionScheduleMap` which returns a new :class:`qiskit.pulse.Schedule` when it is called with parameters. For example:"
msgstr ""

#: ../../release_notes.rst:18268
msgid "Two new gate classes, :class:`qiskit.extensions.iSwapGate` and :class:`qiskit.extensions.DCXGate`, along with their :class:`~qiskit.circuit.QuantumCircuit` methods :meth:`~qiskit.circuit.QuantumCircuit.iswap` and :meth:`~qiskit.circuit.QuantumCircuit.dcx` have been added to the standard extensions. These gates, which are locally equivalent to each other, can be used to enact particular XY interactions. A brief motivation for these gates can be found in: `arxiv.org/abs/quant-ph/0209035 <https://arxiv.org/abs/quant-ph/0209035>`_"
msgstr ""

#: ../../release_notes.rst:18278
msgid "The :class:`qiskit.providers.BaseJob` class now has a new method :meth:`~qiskit.providers.BaseJob.wait_for_final_state` that polls for the job status until the job reaches a final state (such as ``DONE`` or ``ERROR``). This method also takes an optional ``callback`` kwarg which takes a Python callable that will be called during each iteration of the poll loop."
msgstr ""

#: ../../release_notes.rst:18285
msgid "The ``search_width`` and ``search_depth`` attributes of the :class:`qiskit.transpiler.passes.LookaheadSwap` pass are now settable when initializing the pass. A larger search space can often lead to more optimized circuits, at the cost of longer run time."
msgstr ""

#: ../../release_notes.rst:18290
msgid "The number of qubits in :class:`~qiskit.providers.models.BackendConfiguration` can now be accessed via the property :py:attr:`~qiskit.providers.models.BackendConfiguration.num_qubits`. It was previously only accessible via the ``n_qubits`` attribute."
msgstr ""

#: ../../release_notes.rst:18296
msgid "Two new methods, :meth:`~qiskit.quantum_info.OneQubitEulerDecomposer.angles` and :meth:`~qiskit.quantum_info.OneQubitEulerDecomposer.angles_and_phase`, have been added to the :class:`qiskit.quantum_info.OneQubitEulerDecomposer` class. These methods will return the relevant parameters without validation, and calling the ``OneQubitEulerDecomposer`` object will perform the full synthesis with validation."
msgstr ""

#: ../../release_notes.rst:18303
msgid "An ``RR`` decomposition basis has been added to the :class:`qiskit.quantum_info.OneQubitEulerDecomposer` for decomposing an arbitrary 2x2 unitary into a two :class:`~qiskit.extensions.RGate` circuit."
msgstr ""

#: ../../release_notes.rst:18308
msgid "Adds the ability to set ``qargs`` to objects which are subclasses of the abstract ``BaseOperator`` class. This is done by calling the object ``op(qargs)`` (where ``op`` is an operator class) and will return a shallow copy of the original object with a qargs property set. When such an object is used with the :meth:`~qiskit.quantum_info.Operator.compose` or :meth:`~qiskit.quantum_info.Operator.dot` methods the internal value for qargs will be used when the ``qargs`` method kwarg is not used. This allows for subsystem composition using binary operators, for example::"
msgstr ""

#: ../../release_notes.rst:18325
msgid "Adds :class:`qiskit.quantum_info.Clifford` operator class to the `quantum_info` module. This operator is an efficient symplectic representation an N-qubit unitary operator from the Clifford group. This class includes a :meth:`~qiskit.quantum_info.Clifford.to_circuit` method for compilation into a :class:`~qiskit.QuantumCircuit` of Clifford gates with a minimal number of CX gates for up to 3-qubits. It also providers general compilation for N > 3 qubits but this method is not optimal in the number of two-qubit gates."
msgstr ""

#: ../../release_notes.rst:18334
msgid "Adds :class:`qiskit.quantum_info.SparsePauliOp` operator class. This is an efficient representaiton of an N-qubit matrix that is sparse in the Pauli basis and uses a :class:`qiskit.quantum_info.PauliTable` and vector of complex coefficients for its data structure."
msgstr ""

#: ../../release_notes.rst:18339
msgid "This class supports much of the same functionality of the :class:`qiskit.quantum_info.Operator` class so :class:`~qiskit.quantum_info.SparsePauliOp` objects can be tensored, composed, scalar multiplied, added and subtracted."
msgstr ""

#: ../../release_notes.rst:18344
msgid "Numpy arrays or :class:`~qiskit.quantum_info.Operator` objects can be converted to a :class:`~qiskit.quantum_info.SparsePauliOp` using the `:class:`~qiskit.quantum_info.SparsePauliOp.from_operator` method. :class:`~qiskit.quantum_info.SparsePauliOp` can be convered to a sparse csr_matrix or dense Numpy array using the :class:`~qiskit.quantum_info.SparsePauliOp.to_matrix` method, or to an :class:`~qiskit.quantum_info.Operator` object using the :class:`~qiskit.quantum_info.SparsePauliOp.to_operator` method."
msgstr ""

#: ../../release_notes.rst:18353
msgid "A :class:`~qiskit.quantum_info.SparsePauliOp` can be iterated over in terms of its :class:`~qiskit.quantum_info.PauliTable` components and coefficients, its coefficients and Pauli string labels using the :meth:`~qiskit.quantum_info.SparsePauliOp.label_iter` method, and the (dense or sparse) matrix components using the :meth:`~qiskit.quantum_info.SparsePauliOp.matrix_iter` method."
msgstr ""

#: ../../release_notes.rst:18360
msgid "Add :meth:`qiskit.quantum_info.diamond_norm` function for computing the diamond norm (completely-bounded trace-norm) of a quantum channel. This can be used to compute the distance between two quantum channels using ``diamond_norm(chan1 - chan2)``."
msgstr ""

#: ../../release_notes.rst:18365
msgid "A new class :class:`qiskit.quantum_info.PauliTable` has been added. This is an efficient symplectic representation of a list of N-qubit Pauli operators. Some features of this class are:"
msgstr ""

#: ../../release_notes.rst:18369
msgid ":class:`~qiskit.quantum_info.PauliTable` objects may be composed, and tensored which will return a :class:`~qiskit.quantum_info.PauliTable` object with the combination of the operation ( :meth:`~qiskit.quantum_info.PauliTable.compose`, :meth:`~qiskit.quantum_info.PauliTable.dot`, :meth:`~qiskit.quantum_info.PauliTable.expand`, :meth:`~qiskit.quantum_info.PauliTable.tensor`) between each element of  the first table, with each element of the second table."
msgstr ""

#: ../../release_notes.rst:18378
msgid "Addition of two tables acts as list concatination of the terms in each table (``+``)."
msgstr ""

#: ../../release_notes.rst:18381
msgid "Pauli tables can be sorted by lexicographic (tensor product) order or by Pauli weights (:meth:`~qiskit.quantum_info.PauliTable.sort`)."
msgstr ""

#: ../../release_notes.rst:18384
msgid "Duplicate elements can be counted and deleted (:meth:`~qiskit.quantum_info.PauliTable.unique`)."
msgstr ""

#: ../../release_notes.rst:18387
msgid "The PauliTable may be iterated over in either its native symplectic boolean array representation, as Pauli string labels (:meth:`~qiskit.quantum_info.PauliTable.label_iter`), or as dense Numpy array or sparse CSR matrices (:meth:`~qiskit.quantum_info.PauliTable.matrix_iter`)."
msgstr ""

#: ../../release_notes.rst:18393
msgid "Checking commutation between elements of the Pauli table and another Pauli (:meth:`~qiskit.quantum_info.PauliTable.commutes`) or Pauli table (:meth:`~qiskit.quantum_info.PauliTable.commutes_with_all`)"
msgstr ""

#: ../../release_notes.rst:18397
msgid "See the :class:`qiskit.quantum_info.PauliTable` class API documentation for additional details."
msgstr ""

#: ../../release_notes.rst:18400
msgid "Adds :class:`qiskit.quantum_info.StabilizerTable` class. This is a subclass of the :class:`qiskit.quantum_info.PauliTable` class which includes a boolean phase vector along with the Pauli table array. This represents a list of Stabilizer operators which are real-Pauli operators with +1 or -1 coefficient. Because the stabilizer matrices are real the ``\"Y\"`` label matrix is defined as ``[[0, 1], [-1, 0]]``. See the API documentation for additional information."
msgstr ""

#: ../../release_notes.rst:18408
msgid "Adds :func:`qiskit.quantum_info.pauli_basis` function which returns an N-qubit Pauli basis as a :class:`qiskit.quantum_info.PauliTable` object. The ordering of this basis can either be by standard lexicographic (tensor product) order, or by the number of non-identity Pauli terms (weight)."
msgstr ""

#: ../../release_notes.rst:18413
msgid "Adds :class:`qiskit.quantum_info.ScalarOp` operator class that represents a scalar multiple of an identity operator. This can be used to initialize an identity on arbitrary dimension subsystems and it will be implicitly converted to other ``BaseOperator`` subclasses (such as an :class:`qiskit.quantum_info.Operator` or :class:`qiskit.quantum_info.SuperOp`) when it is composed with, or added to, them."
msgstr ""

#: ../../release_notes.rst:18421
msgid "Example: Identity operator"
msgstr ""

#: ../../release_notes.rst:18433
msgid "A new method, :meth:`~qiskit.quantum_info.Operator.reshape`, has been added to the :class:`qiskit.quantum_innfo.Operator` class that returns a shallow copy of an operator subclass with reshaped subsystem input or output dimensions. The combined dimensions of all subsystems must be the same as the original operator or an exception will be raised."
msgstr ""

#: ../../release_notes.rst:18439
msgid "Adds :func:`qiskit.quantum_info.random_clifford` for generating a random :class:`qiskit.quantum_info.Clifford` operator."
msgstr ""

#: ../../release_notes.rst:18442
msgid "Add :func:`qiskit.quantum_info.random_quantum_channel` function for generating a random quantum channel with fixed :class:`~qiskit.quantum_info.Choi`-rank in the :class:`~qiskit.quantum_info.Stinespring` representation."
msgstr ""

#: ../../release_notes.rst:18447
msgid "Add :func:`qiskit.quantum_info.random_hermitian` for generating a random Hermitian :class:`~qiskit.quantum_info.Operator`."
msgstr ""

#: ../../release_notes.rst:18450
msgid "Add :func:`qiskit.quantum_info.random_statevector` for generating a random :class:`~qiskit.quantum_info.Statevector`."
msgstr ""

#: ../../release_notes.rst:18453
msgid "Adds :func:`qiskit.quantum_info.random_pauli_table` for generating a random :class:`qiskit.quantum_info.PauliTable`."
msgstr ""

#: ../../release_notes.rst:18456
msgid "Adds :func:`qiskit.quantum_info.random_stabilizer_table` for generating a random :class:`qiskit.quantum_info.StabilizerTable`."
msgstr ""

#: ../../release_notes.rst:18459
msgid "Add a ``num_qubits`` attribute to :class:`qiskit.quantum_info.StateVector` and :class:`qiskit.quantum_info.DensityMatrix` classes. This returns the number of qubits for N-qubit states and returns ``None`` for non-qubit states."
msgstr ""

#: ../../release_notes.rst:18463
msgid "Adds :meth:`~qiskit.quantum_info.Statevector.to_dict` and :meth:`~qiskit.quantum_info.DensityMatrix.to_dict` methods to convert :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` objects into Bra-Ket notation dictionary."
msgstr ""

#: ../../release_notes.rst:18469 ../../release_notes.rst:18492
msgid "Example"
msgstr ""

#: ../../release_notes.rst:18485
msgid "Adds :meth:`~qiskit.quantum_info.Statevector.probabilities` and :meth:`~qiskit.quantum_info.DensityMatrix.probabilities` to :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes which return an array of measurement outcome probabilities in the computational basis for the specified subsystems."
msgstr ""

#: ../../release_notes.rst:18508
msgid "Adds :meth:`~qiskit.quantum_info.Statevector.probabilities_dict` and :meth:`~qiskit.quantum_info.DensityMatrix.probabilities_dict` to :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes which return a count-style dictionary array of measurement outcome probabilities in the computational basis for the specified subsystems."
msgstr ""

#: ../../release_notes.rst:18529
msgid "Add :meth:`~qiskit.quantum_info.Statevector.sample_counts` and :meth:`~qiskit.quantum_info.Statevector.sample_memory` methods to the :class:`~qiskit.quantum_info.Statevector` and :class:`~qiskit.quantum_info.DensityMatrix` classes for sampling measurement outcomes on subsystems."
msgstr ""

#: ../../release_notes.rst:18537
msgid "Generate a counts dictionary by sampling from a statevector"
msgstr ""

#: ../../release_notes.rst:18558
msgid "Return the array of measurement outcomes for each sample"
msgstr ""

#: ../../release_notes.rst:18579
msgid "Adds a :meth:`~qiskit.quantum_info.Statevector.measure` method to the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` quantum state classes. This allows sampling a single measurement outcome from the specified subsystems and collapsing the statevector to the post-measurement computational basis state. For example"
msgstr ""

#: ../../release_notes.rst:18602
msgid "Adds a :meth:`~qiskit.quantum_info.Statevector.reset` method to the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` quantum state classes. This allows reseting some or all subsystems to the :math:`|0\\rangle` state. For example"
msgstr ""

#: ../../release_notes.rst:18624
msgid "A new visualization function :func:`qiskit.visualization.visualize_transition` for visualizing single qubit gate transitions has been added. It takes in a single qubit circuit and returns an animation of qubit state transitions on a Bloch sphere. To use this function you must have installed the dependencies for and configured globally a matplotlib animtion writer. You can refer to the `matplotlib documentation <https://matplotlib.org/api/animation_api.html#writer-classes>`_ for more details on this. However, in the default case simply ensuring that `FFmpeg <https://www.ffmpeg.org/>`_ is installed is sufficient to use this function."
msgstr ""

#: ../../release_notes.rst:18636
msgid "It supports circuits with the following gates:"
msgstr ""

#: ../../release_notes.rst:18638
msgid ":class:`~qiskit.extensions.HGate`"
msgstr ""

#: ../../release_notes.rst:18639
msgid ":class:`~qiskit.extensions.XGate`"
msgstr ""

#: ../../release_notes.rst:18640
msgid ":class:`~qiskit.extensions.YGate`"
msgstr ""

#: ../../release_notes.rst:18641
msgid ":class:`~qiskit.extensions.ZGate`"
msgstr ""

#: ../../release_notes.rst:18642
msgid ":class:`~qiskit.extensions.RXGate`"
msgstr ""

#: ../../release_notes.rst:18643
msgid ":class:`~qiskit.extensions.RYGate`"
msgstr ""

#: ../../release_notes.rst:18644
msgid ":class:`~qiskit.extensions.RZGate`"
msgstr ""

#: ../../release_notes.rst:18645
msgid ":class:`~qiskit.extensions.SGate`"
msgstr ""

#: ../../release_notes.rst:18646
msgid ":class:`~qiskit.extensions.SdgGate`"
msgstr ""

#: ../../release_notes.rst:18647
msgid ":class:`~qiskit.extensions.TGate`"
msgstr ""

#: ../../release_notes.rst:18648
msgid ":class:`~qiskit.extensions.TdgGate`"
msgstr ""

#: ../../release_notes.rst:18649
msgid ":class:`~qiskit.extensions.U1Gate`"
msgstr ""

#: ../../release_notes.rst:18666
msgid ":func:`~qiskit.execute.execute` has a new kwarg ``schedule_circuit``. By setting ``schedule_circuit=True`` this enables scheduling of the circuit into a :class:`~qiskit.pulse.Schedule`. This allows users building :class:`qiskit.circuit.QuantumCircuit` objects to make use of custom scheduler  methods, such as the ``as_late_as_possible`` and ``as_soon_as_possible`` methods. For example::"
msgstr ""

#: ../../release_notes.rst:18677
msgid "A new environment variable ``QISKIT_SUPPRESS_PACKAGING_WARNINGS`` can be set to ``Y`` or ``y`` which will suppress the warnings about ``qiskit-aer`` and ``qiskit-ibmq-provider`` not being installed at import time. This is useful for users who are only running qiskit-terra (or just not qiskit-aer and/or qiskit-ibmq-provider) and the warnings are not an indication of a potential packaging problem. You can set the environment variable to ``N`` or ``n`` to ensure that warnings are always enabled even if the user config file is set to disable them."
msgstr ""

#: ../../release_notes.rst:18686
msgid "A new user config file option, ``suppress_packaging_warnings`` has been added. When set to ``true`` in your user config file like::"
msgstr ""

#: ../../release_notes.rst:18692
msgid "it will suppress the warnings about  ``qiskit-aer`` and ``qiskit-ibmq-provider`` not being installed at import time. This is useful for users who are only running qiskit-terra (or just not qiskit-aer and/or qiskit-ibmq-provider) and the warnings are not an indication of a potential packaging problem. If the user config file is set to disable the warnings this can be overriden by setting the ``QISKIT_SUPPRESS_PACKAGING_WARNINGS`` to ``N`` or ``n``"
msgstr ""

#: ../../release_notes.rst:18700
msgid ":func:`qiskit.compiler.transpile()` has two new kwargs, ``layout_method`` and ``routing_method``. These allow you to select a particular method for placement and routing of circuits on constrained architectures. For, example::"
msgstr ""

#: ../../release_notes.rst:18708
msgid "will run :class:`~qiskit.transpiler.passes.DenseLayout` layout pass and :class:`~qiskit.transpiler.passes.LookaheadSwap` routing pass."
msgstr ""

#: ../../release_notes.rst:18711
msgid "There has been a significant simplification to the style in which Pulse instructions are built."
msgstr ""

#: ../../release_notes.rst:18714
msgid "With the previous style, ``Command`` s were called with channels to make an :py:class:`~qiskit.pulse.instructions.Instruction`. The usage of both commands and instructions was a point of confusion. This was the previous style::"
msgstr ""

#: ../../release_notes.rst:18724
msgid "or, equivalently (though less used)::"
msgstr ""

#: ../../release_notes.rst:18732
msgid "Now, rather than build a command *and* an instruction, each command has been migrated into an instruction::"
msgstr ""

#: ../../release_notes.rst:18741
msgid "There is now a :py:class:`~qiskit.pulse.instructions.Play` instruction which takes a description of a pulse envelope and a channel. There is a new :py:class:`~qiskit.pulse.pulse_lib.Pulse` class in the :mod:`~qiskit.pulse.pulse_lib` from which the pulse envelope description should subclass."
msgstr ""

#: ../../release_notes.rst:18758
msgid "The :class:`qiskit.dagcircuit.DAGNode` method ``pop`` which was deprecated in the 0.9.0 release has been removed. If you were using this method you can leverage Python's ``del`` statement or ``delattr()`` function to perform the same task."
msgstr ""

#: ../../release_notes.rst:18763
#, python-format
msgid "A new optional visualization requirement, `pygments <https://pygments.org/>`_ , has been added. It is used for providing syntax highlighting of OpenQASM 2.0 code in Jupyter widgets and optionally for the :meth:`qiskit.circuit.QuantumCircuit.qasm` method. It must be installed (either with ``pip install pygments`` or ``pip install qiskit-terra[visualization]``) prior to using the ``%circuit_library_info`` widget in :mod:`qiskit.tools.jupyter` or the ``formatted`` kwarg on the :meth:`~qiskit.circuit.QuantumCircuit.qasm` method."
msgstr ""

#: ../../release_notes.rst:18773
msgid "The pulse ``buffer`` option found in :class:`qiskit.pulse.Channel` and :class:`qiskit.pulse.Schedule` was deprecated in Terra 0.11.0 and has now been removed. To add a delay on a channel or in a schedule, specify it explicitly in your Schedule with a Delay::"
msgstr ""

#: ../../release_notes.rst:18781
msgid "``PulseChannelSpec``, which was deprecated in Terra 0.11.0, has now been removed. Use BackendConfiguration instead::"
msgstr ""

#: ../../release_notes.rst:18788
msgid "or, simply reference the channel directly, such as ``DriveChannel(index)``."
msgstr ""

#: ../../release_notes.rst:18790
msgid "An import path was deprecated in Terra 0.10.0 and has now been removed: for ``PulseChannel``, ``DriveChannel``, ``MeasureChannel``, and ``ControlChannel``, use ``from qiskit.pulse.channels import X`` in place of ``from qiskit.pulse.channels.pulse_channels import X``."
msgstr ""

#: ../../release_notes.rst:18795
msgid "The pass :class:`qiskit.transpiler.passes.CSPLayout` (which was introduced in the 0.11.0 release) has been added to the preset pass manager for optimization levels 2 and 3. For level 2, there is a call limit of 1,000 and a timeout of 10 seconds. For level 3, the call limit is 10,000 and the timeout is 1 minute."
msgstr ""

#: ../../release_notes.rst:18801
msgid "Now that the pass is included in the preset pass managers the `python-constraint <https://pypi.org/project/python-constraint/>`_ package is not longer an optional dependency and has been added to the requirements list."
msgstr ""

#: ../../release_notes.rst:18806
msgid "The ``TranspileConfig`` class which was previously used to set run time configuration for a :class:`qiskit.transpiler.PassManager` has been removed and replaced by a new class :class:`qiskit.transpile.PassManagerConfig`. This new class has been structured to include only the information needed to construct a :class:`~qiskit.transpiler.PassManager`. The attributes of this class are:"
msgstr ""

#: ../../release_notes.rst:18813 ../../release_notes.rst:18879
msgid "``initial_layout``"
msgstr ""

#: ../../release_notes.rst:18814 ../../release_notes.rst:18875
msgid "``basis_gates``"
msgstr ""

#: ../../release_notes.rst:18815 ../../release_notes.rst:18876
msgid "``coupling_map``"
msgstr ""

#: ../../release_notes.rst:18816 ../../release_notes.rst:18878
msgid "``backend_properties``"
msgstr ""

#: ../../release_notes.rst:18817 ../../release_notes.rst:18877
msgid "``seed_transpiler``"
msgstr ""

#: ../../release_notes.rst:18819
msgid "The function ``transpile_circuit`` in :mod:`qiskit.transpiler` has been removed. To transpile a circuit with a custom :class:`~qiskit.transpiler.PassManager` now you should use the :meth:`~qiskit.transpiler.PassManager.run` method of the :class:~qiskit.transpiler.PassManager` object."
msgstr ""

#: ../../release_notes.rst:18825
msgid "The :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.draw` and :func:`qiskit.visualization.circuit_drawer` function will no longer include the initial state included in visualizations by default. If you would like to retain the initial state in the output visualization you need to set the ``initial_state`` kwarg to ``True``. For example, running:"
msgstr ""

#: ../../release_notes.rst:18840
msgid "This no longer includes the initial state. If you'd like to retain it you can run:"
msgstr ""

#: ../../release_notes.rst:18851
msgid ":func:`qiskit.compiler.transpile` (and :func:`qiskit.execute.execute`, which uses ``transpile`` internally) will now raise an error when the ``pass_manager`` kwarg is set and a value is set for other kwargs that are already set in an instantiated :class:`~qiskit.transpiler.PassManager` object. Previously, these conflicting kwargs would just be silently ignored and the values in the ``PassManager`` instance would be used. For example::"
msgstr ""

#: ../../release_notes.rst:18870
msgid "will now raise an error while prior to this release the value in ``pm`` would just silently be used and the value for the ``optimization_level`` kwarg would be ignored. The ``transpile`` kwargs this applies to are:"
msgstr ""

#: ../../release_notes.rst:18874
msgid "``optimization_level``"
msgstr ""

#: ../../release_notes.rst:18880
msgid "``layout_method``"
msgstr ""

#: ../../release_notes.rst:18881
msgid "``routing_method``"
msgstr ""

#: ../../release_notes.rst:18882
msgid "``backend``"
msgstr ""

#: ../../release_notes.rst:18884
msgid "The :class:`~qiskit.quantum_info.Operator`, :class:`~qiskit.quantum_info.Clifford`, :class:`~qiskit.quantum_info.SparsePauliOp`, :class:`~qiskit.quantum_info.PauliTable`, :class:`~qiskit.quantum_info.StabilizerTable`, operator classes have an added ``call`` method that allows them to assign a `qargs` to the operator for use with the :meth:`~qiskit.quantum_info.Operator.compose`, :meth:`~qiskit.quantum_info.Operator.dot`, :meth:`~qiskit.quantum_info.Statevector.evolve`,``+``, and ``-`` operations."
msgstr ""

#: ../../release_notes.rst:18894
msgid "The addition method of the :class:`qiskit.quantum_info.Operator`, class now accepts a ``qarg`` kwarg to allow adding a smaller operator to a larger one assuming identities on the other subsystems (same as for ``qargs`` on :meth:`~qiskit.quantum_info.Operator.compose` and :meth:`~qiskit.quantum_info.Operator.dot` methods). This allows subsystem addition using the call method as with composition. This support is added to all BaseOperator subclasses (:class:`~qiskit.quantum_info.ScalarOp`, :class:`~qiskit.quantum_info.Operator`, :class:`~qiskit.quantum_info.QuantumChannel`)."
msgstr ""

#: ../../release_notes.rst:18920
msgid "The ``BaseOperator`` class has been updated so that addition, subtraction and scalar multiplication are no longer abstract methods. This means that they are no longer required to be implemented in subclasses if they are not supported. The base class will raise a ``NotImplementedError`` when the methods are not defined."
msgstr ""

#: ../../release_notes.rst:18926
msgid "The :func:`qiskit.quantum_info.random_density_matrix` function will now return a random :class:`~qiskit.quantum_info.DensityMatrix` object. In previous releases it returned a numpy array."
msgstr ""

#: ../../release_notes.rst:18930
msgid "The :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes no longer copy the input array if it is already the correct dtype."
msgstr ""

#: ../../release_notes.rst:18934
msgid "`fastjsonschema <https://pypi.org/project/fastjsonschema/>`_ is added as a dependency. This is used for much faster validation of qobj dictionaries against the JSON schema when the ``to_dict()`` method is called on qobj objects with the ``validate`` keyword argument set to ``True``."
msgstr ""

#: ../../release_notes.rst:18939
msgid "The qobj construction classes in :mod:`qiskit.qobj` will no longer validate against the qobj jsonschema by default. These include the following classes:"
msgstr ""

#: ../../release_notes.rst:18942 ../../release_notes.rst:18954
msgid ":class:`qiskit.qobj.QasmQobjInstruction`"
msgstr ""

#: ../../release_notes.rst:18943
msgid ":class:`qiskit.qobj.QobjExperimentHeader`"
msgstr ""

#: ../../release_notes.rst:18944 ../../release_notes.rst:18955
msgid ":class:`qiskit.qobj.QasmQobjExperimentConfig`"
msgstr ""

#: ../../release_notes.rst:18945 ../../release_notes.rst:18956
msgid ":class:`qiskit.qobj.QasmQobjExperiment`"
msgstr ""

#: ../../release_notes.rst:18946 ../../release_notes.rst:18957
msgid ":class:`qiskit.qobj.QasmQobjConfig`"
msgstr ""

#: ../../release_notes.rst:18947
msgid ":class:`qiskit.qobj.QobjHeader`"
msgstr ""

#: ../../release_notes.rst:18948
msgid ":class:`qiskit.qobj.PulseQobjInstruction`"
msgstr ""

#: ../../release_notes.rst:18949
msgid ":class:`qiskit.qobj.PulseQobjExperimentConfig`"
msgstr ""

#: ../../release_notes.rst:18950
msgid ":class:`qiskit.qobj.PulseQobjExperiment`"
msgstr ""

#: ../../release_notes.rst:18951
msgid ":class:`qiskit.qobj.PulseQobjConfig`"
msgstr ""

#: ../../release_notes.rst:18952
msgid ":class:`qiskit.qobj.QobjMeasurementOption`"
msgstr ""

#: ../../release_notes.rst:18953
msgid ":class:`qiskit.qobj.PulseLibraryItem`"
msgstr ""

#: ../../release_notes.rst:18958
msgid ":class:`qiskit.qobj.QasmQobj`"
msgstr ""

#: ../../release_notes.rst:18959
msgid ":class:`qiskit.qobj.PulseQobj`"
msgstr ""

#: ../../release_notes.rst:18961
msgid "If you were relying on this validation or would like to validate them against the qobj schema this can be done by setting the ``validate`` kwarg to ``True`` on :meth:`~qiskit.qobj.QasmQobj.to_dict` method from either of the top level Qobj classes :class:`~qiskit.qobj.QasmQobj` or :class:`~qiskit.qobj.PulseQobj`. For example:"
msgstr ""

#: ../../release_notes.rst:18987
msgid "which will validate the output dictionary against the Qobj jsonschema."
msgstr ""

#: ../../release_notes.rst:18989
msgid "The output dictionary from :meth:`qiskit.qobj.QasmQobj.to_dict` and :meth:`qiskit.qobj.PulseQobj.to_dict` is no longer in a format for direct json serialization as expected by IBMQ's API. These Qobj objects are the current format we use for passing experiments to providers/backends and while having a dictionary format that could just be passed to the IBMQ API directly was moderately useful for ``qiskit-ibmq-provider``, it made things more difficult for other providers. Especially for providers that wrap local simulators. Moving forward the definitions of what is passed between providers and the IBMQ API request format will be further decoupled (in a backwards compatible manner) which should ease the burden of writing providers and backends."
msgstr ""

#: ../../release_notes.rst:19001
msgid "In practice, the only functional difference between the output of these methods now and previous releases is that complex numbers are represented with the ``complex`` type and numpy arrays are not silently converted to list anymore. If you were previously calling ``json.dumps()`` directly on the output of ``to_dict()`` after this release a custom json encoder will be needed to handle these cases. For example::"
msgstr ""

#: ../../release_notes.rst:19044
msgid "will generate a json string in the same exact manner that ``json.dumps(my_qasm.to_dict())`` did in previous releases."
msgstr ""

#: ../../release_notes.rst:19047
msgid "``CmdDef`` has been deprecated since Terra 0.11.0 and has been removed. Please continue to use :py:class:`~qiskit.pulse.InstructionScheduleMap` instead."
msgstr ""

#: ../../release_notes.rst:19051
msgid "The methods ``cmds`` and ``cmd_qubits`` in :py:class:`~qiskit.pulse.InstructionScheduleMap` have been deprecated since Terra 0.11.0 and have been removed. Please use ``instructions`` and ``qubits_with_instruction`` instead."
msgstr ""

#: ../../release_notes.rst:19056
msgid "PulseDefaults have reported ``qubit_freq_est`` and ``meas_freq_est`` in Hz rather than GHz since Terra release 0.11.0. A warning which notified of this change has been removed."
msgstr ""

#: ../../release_notes.rst:19060
msgid "The previously deprecated (in the 0.11.0 release) support for passsing in :class:`qiskit.circuit.Instruction` parameters of types ``sympy.Basic``, ``sympy.Expr``, ``qiskit.qasm.node.node.Node`` (QASM AST node) and ``sympy.Matrix`` has been removed. The supported types for instruction parameters are:"
msgstr ""

#: ../../release_notes.rst:19066 ../../release_notes.rst:20897
msgid "``int``"
msgstr ""

#: ../../release_notes.rst:19067 ../../release_notes.rst:20898
msgid "``float``"
msgstr ""

#: ../../release_notes.rst:19068 ../../release_notes.rst:20899
msgid "``complex``"
msgstr ""

#: ../../release_notes.rst:19069 ../../release_notes.rst:20900
msgid "``str``"
msgstr ""

#: ../../release_notes.rst:19070
msgid "``list``"
msgstr ""

#: ../../release_notes.rst:19071 ../../release_notes.rst:20901
msgid "``np.ndarray``"
msgstr ""

#: ../../release_notes.rst:19072
msgid ":class:`qiskit.circuit.ParameterExpression`"
msgstr ""

#: ../../release_notes.rst:19074
msgid "The following properties of :py:class:`~qiskit.providers.models.BackendConfiguration`:"
msgstr ""

#: ../../release_notes.rst:19077
msgid "``dt``"
msgstr ""

#: ../../release_notes.rst:19078
msgid "``dtm``"
msgstr ""

#: ../../release_notes.rst:19079
msgid "``rep_time``"
msgstr ""

#: ../../release_notes.rst:19081
msgid "all have units of seconds. Prior to release 0.11.0, ``dt`` and ``dtm`` had units of nanoseconds. Prior to release 0.12.0, ``rep_time`` had units of microseconds. The warnings alerting users of these changes have now been removed from ``BackendConfiguration``."
msgstr ""

#: ../../release_notes.rst:19086
msgid "A new requirement has been added to the requirements list, `retworkx <https://pypi.org/project/retworkx/>`_. It is an Apache 2.0 licensed graph library that has a similar API to networkx and is being used to significantly speed up the :class:`qiskit.dagcircuit.DAGCircuit` operations as part of the transpiler. There are binaries published on PyPI for all the platforms supported by Qiskit Terra but if you're using a platform where there aren't precompiled binaries published refer to the `retworkx documentation <https://retworkx.readthedocs.io/en/stable/README.html#installing-retworkx>`_ for instructions on pip installing from sdist."
msgstr ""

#: ../../release_notes.rst:19097
msgid "If you encounter any issues with the transpiler or DAGCircuit class as part of the transition you can switch back to the previous networkx implementation by setting the environment variable ``USE_RETWORKX`` to ``N``. This option will be removed in the 0.14.0 release."
msgstr ""

#: ../../release_notes.rst:19108
msgid "Passing in the data to the constructor for :class:`qiskit.dagcircuit.DAGNode` as a dictionary arg ``data_dict`` is deprecated and will be removed in a future release. Instead you should now pass the fields in as kwargs to the constructor. For example the previous behavior of::"
msgstr ""

#: ../../release_notes.rst:19122
msgid "should now be::"
msgstr ""

#: ../../release_notes.rst:19128
msgid "The naming of gate objects and methods have been updated to be more consistent. The following changes have been made:"
msgstr ""

#: ../../release_notes.rst:19131
msgid "The Pauli gates all have one uppercase letter only (``I``, ``X``, ``Y``, ``Z``)"
msgstr ""

#: ../../release_notes.rst:19133
msgid "The parameterized Pauli gates (i.e. rotations) prepend the uppercase letter ``R`` (``RX``, ``RY``, ``RZ``)"
msgstr ""

#: ../../release_notes.rst:19135
msgid "A controlled version prepends the uppercase letter ``C`` (``CX``, ``CRX``, ``CCX``)"
msgstr ""

#: ../../release_notes.rst:19137
msgid "Gates are named according to their action, not their alternative names (``CCX``, not ``Toffoli``)"
msgstr ""

#: ../../release_notes.rst:19140
msgid "The old names have been deprecated and will be removed in a future release. This is a list of the changes showing the old and new class, name attribute, and methods. If a new column is blank then there is no change for that."
msgstr ""

#: ../../release_notes.rst:19144
msgid "Gate Name Changes"
msgstr ""

#: ../../release_notes.rst:19147
msgid "Old Class"
msgstr ""

#: ../../release_notes.rst:19148
msgid "New Class"
msgstr ""

#: ../../release_notes.rst:19149
msgid "Old Name Attribute"
msgstr ""

#: ../../release_notes.rst:19150
msgid "New Name Attribute"
msgstr ""

#: ../../release_notes.rst:19151
msgid "Old :class:`qiskit.circuit.QuantumCircuit` method"
msgstr ""

#: ../../release_notes.rst:19152
msgid "New :class:`qiskit.circuit.QuantumCircuit` method"
msgstr ""

#: ../../release_notes.rst:19153
msgid "``ToffoliGate``"
msgstr ""

#: ../../release_notes.rst:19154
msgid ":class:`~qiskit.extensions.CCXGate`"
msgstr ""

#: ../../release_notes.rst:19155
msgid "``ccx``"
msgstr ""

#: ../../release_notes.rst:19157
msgid ":meth:`~qiskit.circuit.QuantumCircuit.ccx` and :meth:`~qiskit.circuit.QuantumCircuit.toffoli`"
msgstr ""

#: ../../release_notes.rst:19160
msgid "``CrxGate``"
msgstr ""

#: ../../release_notes.rst:19161
msgid ":class:`~qiskit.extensions.CRXGate`"
msgstr ""

#: ../../release_notes.rst:19162
msgid "``crx``"
msgstr ""

#: ../../release_notes.rst:19164
msgid ":meth:`~qiskit.circuit.QuantumCircuit.crx`"
msgstr ""

#: ../../release_notes.rst:19166
msgid "``CryGate``"
msgstr ""

#: ../../release_notes.rst:19167
msgid ":class:`~qiskit.extensions.CRYGate`"
msgstr ""

#: ../../release_notes.rst:19168
msgid "``cry``"
msgstr ""

#: ../../release_notes.rst:19170
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cry`"
msgstr ""

#: ../../release_notes.rst:19172
msgid "``CrzGate``"
msgstr ""

#: ../../release_notes.rst:19173
msgid ":class:`~qiskit.extensions.CRZGate`"
msgstr ""

#: ../../release_notes.rst:19174
msgid "``crz``"
msgstr ""

#: ../../release_notes.rst:19176
msgid ":meth:`~qiskit.circuit.QuantumCircuit.crz`"
msgstr ""

#: ../../release_notes.rst:19178
msgid "``FredkinGate``"
msgstr ""

#: ../../release_notes.rst:19179
msgid ":class:`~qiskit.extensions.CSwapGate`"
msgstr ""

#: ../../release_notes.rst:19180
msgid "``cswap``"
msgstr ""

#: ../../release_notes.rst:19182
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cswap` and :meth:`~qiskit.circuit.QuantumCircuit.fredkin`"
msgstr ""

#: ../../release_notes.rst:19185
msgid "``Cu1Gate``"
msgstr ""

#: ../../release_notes.rst:19186
msgid ":class:`~qiskit.extensions.CU1Gate`"
msgstr ""

#: ../../release_notes.rst:19187
msgid "``cu1``"
msgstr ""

#: ../../release_notes.rst:19189
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cu1`"
msgstr ""

#: ../../release_notes.rst:19191
msgid "``Cu3Gate``"
msgstr ""

#: ../../release_notes.rst:19192
msgid ":class:`~qiskit.extensions.CU3Gate`"
msgstr ""

#: ../../release_notes.rst:19193
msgid "``cu3``"
msgstr ""

#: ../../release_notes.rst:19195
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cu3`"
msgstr ""

#: ../../release_notes.rst:19197
msgid "``CnotGate``"
msgstr ""

#: ../../release_notes.rst:19198
msgid ":class:`~qiskit.extensions.CXGate`"
msgstr ""

#: ../../release_notes.rst:19199
msgid "``cx``"
msgstr ""

#: ../../release_notes.rst:19201
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cx` and :meth:`~qiskit.circuit.QuantumCircuit.cnot`"
msgstr ""

#: ../../release_notes.rst:19204
msgid "``CyGate``"
msgstr ""

#: ../../release_notes.rst:19205
msgid ":class:`~qiskit.extensions.CYGate`"
msgstr ""

#: ../../release_notes.rst:19206
msgid "``cy``"
msgstr ""

#: ../../release_notes.rst:19208
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cy`"
msgstr ""

#: ../../release_notes.rst:19210
msgid "``CzGate``"
msgstr ""

#: ../../release_notes.rst:19211
msgid ":class:`~qiskit.extensions.CZGate`"
msgstr ""

#: ../../release_notes.rst:19212
msgid "``cz``"
msgstr ""

#: ../../release_notes.rst:19214
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cz`"
msgstr ""

#: ../../release_notes.rst:19216
msgid "``DiagGate``"
msgstr ""

#: ../../release_notes.rst:19217
msgid ":class:`~qiskit.extensions.DiagonalGate`"
msgstr ""

#: ../../release_notes.rst:19218
msgid "``diag``"
msgstr ""

#: ../../release_notes.rst:19219
msgid "``diagonal``"
msgstr ""

#: ../../release_notes.rst:19220
msgid "``diag_gate``"
msgstr ""

#: ../../release_notes.rst:19221
msgid ":meth:`~qiskit.circuit.QuantumCircuit.diagonal`"
msgstr ""

#: ../../release_notes.rst:19222
msgid "``IdGate``"
msgstr ""

#: ../../release_notes.rst:19223
msgid ":class:`~qiskit.extensions.IGate`"
msgstr ""

#: ../../release_notes.rst:19224
msgid "``id``"
msgstr ""

#: ../../release_notes.rst:19226
msgid "``iden``"
msgstr ""

#: ../../release_notes.rst:19227
msgid ":meth:`~qiskit.circuit.QuantumCircuit.i` and :meth:`~qiskit.circuit.QuantumCircuit.id`"
msgstr ""

#: ../../release_notes.rst:19229
msgid ":class:`~qiskit.extensions.Isometry`"
msgstr ""

#: ../../release_notes.rst:19231
msgid "``iso``"
msgstr ""

#: ../../release_notes.rst:19232
msgid "``isometry``"
msgstr ""

#: ../../release_notes.rst:19233
msgid ":meth:`~qiskit.circuit.QuantumCircuit.iso`"
msgstr ""

#: ../../release_notes.rst:19234
msgid ":meth:`~qiskit.circuit.QuantumCircuit.isometry` and :meth:`~qiskit.circuit.QuantumCircuit.iso`"
msgstr ""

#: ../../release_notes.rst:19236
msgid "``UCG``"
msgstr ""

#: ../../release_notes.rst:19237
msgid ":class:`~qiskit.extensions.UCGate`"
msgstr ""

#: ../../release_notes.rst:19238
msgid "``multiplexer``"
msgstr ""

#: ../../release_notes.rst:19240
msgid "``ucg``"
msgstr ""

#: ../../release_notes.rst:19241
msgid ":meth:`~qiskit.circuit.QuantumCircuit.uc`"
msgstr ""

#: ../../release_notes.rst:19242
msgid "``UCRot``"
msgstr ""

#: ../../release_notes.rst:19243
msgid ":class:`~qiskit.extensions.UCPauliRotGate`"
msgstr ""

#: ../../release_notes.rst:19248
msgid "``UCX``"
msgstr ""

#: ../../release_notes.rst:19249
msgid ":class:`~qiskit.extensions.UCRXGate`"
msgstr ""

#: ../../release_notes.rst:19250
msgid "``ucrotX``"
msgstr ""

#: ../../release_notes.rst:19251
msgid "``ucrx``"
msgstr ""

#: ../../release_notes.rst:19252
msgid "``ucx``"
msgstr ""

#: ../../release_notes.rst:19253
msgid ":meth:`~qiskit.circuit.QuantumCircuit.ucrx`"
msgstr ""

#: ../../release_notes.rst:19254
msgid "``UCY``"
msgstr ""

#: ../../release_notes.rst:19255
msgid ":class:`~qiskit.extensions.UCRYGate`"
msgstr ""

#: ../../release_notes.rst:19256
msgid "``ucroty``"
msgstr ""

#: ../../release_notes.rst:19257
msgid "``ucry``"
msgstr ""

#: ../../release_notes.rst:19258
msgid "``ucy``"
msgstr ""

#: ../../release_notes.rst:19259
msgid ":meth:`~qiskit.circuit.QuantumCircuit.ucry`"
msgstr ""

#: ../../release_notes.rst:19260
msgid "``UCZ``"
msgstr ""

#: ../../release_notes.rst:19261
msgid ":class:`~qiskit.extensions.UCRZGate`"
msgstr ""

#: ../../release_notes.rst:19262
msgid "``ucrotz``"
msgstr ""

#: ../../release_notes.rst:19263
msgid "``ucrz``"
msgstr ""

#: ../../release_notes.rst:19264
msgid "``ucz``"
msgstr ""

#: ../../release_notes.rst:19265
msgid ":meth:`~qiskit.circuit.QuantumCircuit.ucrz`"
msgstr ""

#: ../../release_notes.rst:19267
msgid "The kwarg ``period`` for the function :func:`~qiskit.pulse.pulse_lib.square`, :func:`~qiskit.pulse.pulse_lib.sawtooth`, and :func:`~qiskit.pulse.pulse_lib.triangle` in :mod:`qiskit.pulse.pulse_lib` is now deprecated and will be removed in a future release. Instead you should now use the ``freq`` kwarg to set the frequency."
msgstr ""

#: ../../release_notes.rst:19275
msgid "The ``DAGCircuit.compose_back()`` and ``DAGCircuit.extend_back()`` methods are deprecated and will be removed in a future release. Instead you should use the :meth:`qiskit.dagcircuit.DAGCircuit.compose` method, which is a more general and more flexible method that provides the same functionality."
msgstr ""

#: ../../release_notes.rst:19280
msgid "The ``callback`` kwarg of the :class:`qiskit.transpiler.PassManager` class's constructor has been deprecated and will be removed in a future release. Instead of setting it at the object level during creation it should now be set as a kwarg parameter on the :meth:`qiskit.transpiler.PassManager.run` method."
msgstr ""

#: ../../release_notes.rst:19286
msgid "The ``n_qubits`` and ``numberofqubits`` keywords are deprecated throughout Terra and replaced by ``num_qubits``. The old names will be removed in a future release. The objects affected by this change are listed below:"
msgstr ""

#: ../../release_notes.rst:19290
msgid "New Methods"
msgstr ""

#: ../../release_notes.rst:19294
msgid "Old Method"
msgstr ""

#: ../../release_notes.rst:19295
msgid "New Method"
msgstr ""

#: ../../release_notes.rst:19298
msgid ":meth:`~qiskit.circuit.QuantumCircuit.num_qubits`"
msgstr ""

#: ../../release_notes.rst:19301
msgid ":meth:`~qiskit.quantum_info.Pauli.num_qubits`"
msgstr ""

#: ../../release_notes.rst:19303
msgid "New arguments"
msgstr ""

#: ../../release_notes.rst:19309
msgid ":func:`~qiskit.circuit.random.random_circuit`"
msgstr ""

#: ../../release_notes.rst:19312
msgid ":class:`~qiskit.extensions.MSGate`"
msgstr ""

#: ../../release_notes.rst:19313
msgid "``n_qubit``"
msgstr ""

#: ../../release_notes.rst:19316
msgid "The function ``qiskit.quantum_info.synthesis.euler_angles_1q`` is now deprecated. It has been superseded by the :class:`qiskit.quantum_info.OneQubitEulerDecomposer` class which provides the same functionality through::"
msgstr ""

#: ../../release_notes.rst:19323
msgid "The ``pass_manager`` kwarg for the :func:`qiskit.compiler.transpile` has been deprecated and will be removed in a future release. Moving forward the preferred way to transpile a circuit with a custom :class:`~qiskit.transpiler.PassManager` object is to use the :meth:`~qiskit.transpiler.PassManager.run` method of the ``PassManager`` object."
msgstr ""

#: ../../release_notes.rst:19330
msgid "The :func:`qiskit.quantum_info.random_state` function has been deprecated and will be removed in a future release. Instead you should use the :func:`qiskit.quantum_info.random_statevector` function."
msgstr ""

#: ../../release_notes.rst:19334
msgid "The ``add``, ``subtract``, and ``multiply`` methods of the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes are deprecated and will be removed in a future release. Instead you shoulde use ``+``, ``-``, ``*`` binary operators instead."
msgstr ""

#: ../../release_notes.rst:19340
msgid "Deprecates :meth:`qiskit.quantum_info.Statevector.to_counts`, :meth:`qiskit.quantum_info.DensityMatrix.to_counts`, and :func:`qiskit.quantum_info.counts.state_to_counts`. These functions are superseded by the class methods :meth:`qiskit.quantum_info.Statevector.probabilities_dict` and :meth:`qiskit.quantum_info.DensityMatrix.probabilities_dict`."
msgstr ""

#: ../../release_notes.rst:19347
msgid ":py:class:`~qiskit.pulse.pulse_lib.SamplePulse` and :py:class:`~qiskit.pulse.pulse_lib.ParametricPulse` s (e.g. ``Gaussian``) now subclass from :py:class:`~qiskit.pulse.pulse_lib.Pulse` and have been moved to the :mod:`qiskit.pulse.pulse_lib`. The previous path via ``pulse.commands`` is deprecated and will be removed in a future release."
msgstr ""

#: ../../release_notes.rst:19353
msgid "``DelayInstruction`` has been deprecated and replaced by :py:class:`~qiskit.pulse.instruction.Delay`. This new instruction has been taken over the previous ``Command`` ``Delay``. The migration pattern is::"
msgstr ""

#: ../../release_notes.rst:19361
msgid "Until the deprecation period is over, the previous ``Delay`` syntax of calling a command on a channel will also be supported::"
msgstr ""

#: ../../release_notes.rst:19366
msgid "The new ``Delay`` instruction does not support a ``command`` attribute."
msgstr ""

#: ../../release_notes.rst:19368
msgid "``FrameChange`` and ``FrameChangeInstruction`` have been deprecated and replaced by :py:class:`~qiskit.pulse.instructions.ShiftPhase`. The changes are::"
msgstr ""

#: ../../release_notes.rst:19376
msgid "Until the deprecation period is over, the previous FrameChange syntax of calling a command on a channel will be supported::"
msgstr ""

#: ../../release_notes.rst:19381
msgid "The ``call`` method of :py:class:`~qiskit.pulse.pulse_lib.SamplePulse` and :py:class:`~qiskit.pulse.pulse_lib.ParametricPulse` s have been deprecated. The migration is as follows::"
msgstr ""

#: ../../release_notes.rst:19387
msgid "``AcquireInstruction`` has been deprecated and replaced by :py:class:`~qiskit.pulse.instructions.Acquire`. The changes are::"
msgstr ""

#: ../../release_notes.rst:19394
msgid "Until the deprecation period is over, the previous Acquire syntax of calling the command on a channel will be supported::"
msgstr ""

#: ../../release_notes.rst:19405
msgid "The :class:`~qiskit.transpiler.passes.BarrierBeforeFinalMeasurements` transpiler pass, included in the preset transpiler levels when targeting a physical device, previously inserted a barrier across only measured qubits. In some cases, this allowed the transpiler to insert a swap after a measure operation, rendering the circuit invalid for current devices. The pass has been updated so that the inserted barrier will span all qubits on the device. Fixes `#3937 <https://github.com/Qiskit/qiskit-terra/issues/3937>`_"
msgstr ""

#: ../../release_notes.rst:19414
msgid "When extending a :class:`~qiskit.circuit.QuantumCircuit` instance (extendee) with another circuit (extension), the circuit is taken via reference. If a circuit is extended with itself that leads to an infinite loop as extendee and extension are the same. This bug has been resolved by copying the extension if it is the same object as the extendee. Fixes `#3811 <https://github.com/Qiskit/qiskit-terra/issues/3811>`_"
msgstr ""

#: ../../release_notes.rst:19421
msgid "Fixes a case in :meth:`qiskit.result.Result.get_counts`, where the results for an expirement could not be referenced if the experiment was initialized as a Schedule without a name. Fixes `#2753 <https://github.com/Qiskit/qiskit-terra/issues/2753>`_"
msgstr ""

#: ../../release_notes.rst:19426
msgid "Previously, replacing :class:`~qiskit.circuit.Parameter` objects in a circuit with new Parameter objects prior to decomposing a circuit would result in the substituted values not correctly being substituted into the decomposed gates. This has been resolved such that binding and decomposition may occur in any order."
msgstr ""

#: ../../release_notes.rst:19432
msgid "The matplotlib output backend for the :func:`qiskit.visualization.circuit_drawer` function and :meth:`qiskit.circuit.QuantumCircuit.draw` method drawer has been fixed to render :class:`~qiskit.extensions.CU1Gate` gates correctly. Fixes `#3684 <https://github.com/Qiskit/qiskit-terra/issues/3684>`_"
msgstr ""

#: ../../release_notes.rst:19438
msgid "A bug in :meth:`qiskit.circuit.QuantumCircuit.from_qasm_str` and :meth:`qiskit.circuit.QuantumCircuit.from_qasm_file` when loading QASM with custom gates defined has been fixed. Now, loading this QASM::"
msgstr ""

#: ../../release_notes.rst:19449
msgid "is equivalent to the following circuit::"
msgstr ""

#: ../../release_notes.rst:19462
msgid "Fixes `#1566 <https://github.com/Qiskit/qiskit-terra/issues/1566>`_"
msgstr ""

#: ../../release_notes.rst:19464
msgid "Allow quantum circuit Instructions to have list parameter values. This is used in Aer for expectation value snapshot parameters for example ``params = [[1.0, 'I'], [1.0, 'X']]]`` for :math:`\\langle I + X\\rangle`."
msgstr ""

#: ../../release_notes.rst:19468
msgid "Previously, for circuits containing composite gates (those created via :meth:`qiskit.circuit.QuantumCircuit.to_gate` or :meth:`qiskit.circuit.QuantumCircuit.to_instruction` or their corresponding converters), attempting to bind the circuit more than once would result in only the first bind value being applied to all circuits when transpiled. This has been resolved so that the values provided for subsequent binds are correctly respected."
msgstr ""

#: ../../release_notes.rst:19482
msgid "The qasm and pulse qobj classes:"
msgstr ""

#: ../../release_notes.rst:19484 ../../release_notes.rst:19496
msgid ":class:`~qiskit.qobj.QasmQobjInstruction`"
msgstr ""

#: ../../release_notes.rst:19485
msgid ":class:`~qiskit.qobj.QobjExperimentHeader`"
msgstr ""

#: ../../release_notes.rst:19486 ../../release_notes.rst:19497
msgid ":class:`~qiskit.qobj.QasmQobjExperimentConfig`"
msgstr ""

#: ../../release_notes.rst:19487 ../../release_notes.rst:19498
msgid ":class:`~qiskit.qobj.QasmQobjExperiment`"
msgstr ""

#: ../../release_notes.rst:19488 ../../release_notes.rst:19499
msgid ":class:`~qiskit.qobj.QasmQobjConfig`"
msgstr ""

#: ../../release_notes.rst:19489
msgid ":class:`~qiskit.qobj.QobjHeader`"
msgstr ""

#: ../../release_notes.rst:19490
msgid ":class:`~qiskit.qobj.PulseQobjInstruction`"
msgstr ""

#: ../../release_notes.rst:19491
msgid ":class:`~qiskit.qobj.PulseQobjExperimentConfig`"
msgstr ""

#: ../../release_notes.rst:19492
msgid ":class:`~qiskit.qobj.PulseQobjExperiment`"
msgstr ""

#: ../../release_notes.rst:19493
msgid ":class:`~qiskit.qobj.PulseQobjConfig`"
msgstr ""

#: ../../release_notes.rst:19494
msgid ":class:`~qiskit.qobj.QobjMeasurementOption`"
msgstr ""

#: ../../release_notes.rst:19495
msgid ":class:`~qiskit.qobj.PulseLibraryItem`"
msgstr ""

#: ../../release_notes.rst:19500
msgid ":class:`~qiskit.qobj.QasmQobj`"
msgstr ""

#: ../../release_notes.rst:19501
msgid ":class:`~qiskit.qobj.PulseQobj`"
msgstr ""

#: ../../release_notes.rst:19503
msgid "from :mod:`qiskit.qobj` have all been reimplemented without using the marsmallow library. These new implementations are designed to be drop-in replacement (except for as noted in the upgrade release notes) but specifics inherited from marshmallow may not work. Please file issues for any incompatibilities found."
msgstr ""

#: ../../release_notes.rst:19510
msgid "Aer 0.5.0"
msgstr ""

#: ../../release_notes.rst:19513 ../../release_notes.rst:19526
#: ../../release_notes.rst:20312 ../../release_notes.rst:20369
#: ../../release_notes.rst:22250
msgid "Added"
msgstr ""

#: ../../release_notes.rst:19514
msgid "Add support for terra diagonal gate"
msgstr ""

#: ../../release_notes.rst:19515
msgid "Add support for parameterized qobj"
msgstr ""

#: ../../release_notes.rst:19518
msgid "Fixed"
msgstr ""

#: ../../release_notes.rst:19519
msgid "Added postfix for linux on Raspberry Pi"
msgstr ""

#: ../../release_notes.rst:19520
msgid "Handle numpy array inputs from qobj"
msgstr ""

#: ../../release_notes.rst:19528
msgid "API documentation"
msgstr ""

#: ../../release_notes.rst:19529
msgid "CNOT-Dihedral randomized benchmarking"
msgstr ""

#: ../../release_notes.rst:19530
msgid "Accreditation module for output accrediation of noisy devices"
msgstr ""

#: ../../release_notes.rst:19531
msgid "Pulse calibrations for single qubits"
msgstr ""

#: ../../release_notes.rst:19532
msgid "Pulse Discriminator"
msgstr ""

#: ../../release_notes.rst:19533
msgid "Entanglement verification circuits"
msgstr ""

#: ../../release_notes.rst:19534
msgid "Gateset tomography for single-qubit gate sets"
msgstr ""

#: ../../release_notes.rst:19535
msgid "Adds randomized benchmarking utility functions ``calculate_1q_epg``, ``calculate_2q_epg`` functions to calculate 1 and 2-qubit error per gate from error per Clifford"
msgstr ""

#: ../../release_notes.rst:19538
msgid "Adds randomized benchmarking utility functions ``calculate_1q_epc``, ``calculate_2q_epc`` for calculating 1 and 2-qubit error per Clifford from error per gate"
msgstr ""

#: ../../release_notes.rst:19543 ../../release_notes.rst:19607
#: ../../release_notes.rst:19656 ../../release_notes.rst:20332
#: ../../release_notes.rst:20402 ../../release_notes.rst:22302
msgid "Changed"
msgstr ""

#: ../../release_notes.rst:19544
msgid "Support integer labels for qubits in tomography"
msgstr ""

#: ../../release_notes.rst:19545
msgid "Support integer labels for measurement error mitigation"
msgstr ""

#: ../../release_notes.rst:19548 ../../release_notes.rst:20182
#: ../../release_notes.rst:20213 ../../release_notes.rst:20345
#: ../../release_notes.rst:20411 ../../release_notes.rst:22334
msgid "Deprecated"
msgstr ""

#: ../../release_notes.rst:19549
msgid "Deprecates ``twoQ_clifford_error`` function. Use ``calculate_2q_epc`` instead."
msgstr ""

#: ../../release_notes.rst:19550
msgid "Python 3.5 support in qiskit-ignis is deprecated. Support will be removed on the upstream python community's end of life date for the version, which is 09/13/2020."
msgstr ""

#: ../../release_notes.rst:19555 ../../release_notes.rst:19584
msgid "Aqua 0.6.5"
msgstr ""

#: ../../release_notes.rst:19560 ../../release_notes.rst:19589
msgid "IBM Q Provider 0.6.0"
msgstr ""

#: ../../release_notes.rst:19566
msgid "Qiskit 0.17.0"
msgstr ""

#: ../../release_notes.rst:19569 ../../release_notes.rst:19623
#: ../../release_notes.rst:19669
msgid "Terra 0.12.0"
msgstr ""

#: ../../release_notes.rst:19574
msgid "Aer 0.4.1"
msgstr ""

#: ../../release_notes.rst:19579 ../../release_notes.rst:19633
msgid "Ignis 0.2.0"
msgstr ""

#: ../../release_notes.rst:19594
msgid "There are three new exceptions: ``VisualizationError``, ``VisualizationValueError``, and ``VisualizationTypeError``. These are now used in the visualization modules when an exception is raised."
msgstr ""

#: ../../release_notes.rst:19597
msgid "You can now set the logging level and specify a log file using the environment variables ``QSIKIT_IBMQ_PROVIDER_LOG_LEVEL`` and ``QISKIT_IBMQ_PROVIDER_LOG_FILE``, respectively. Note that the name of the logger is ``qiskit.providers.ibmq``."
msgstr ""

#: ../../release_notes.rst:19600
msgid ":class:`qiskit.providers.ibmq.job.IBMQJob` now has a new method :meth:`~qiskit.providers.ibmq.job.IBMQJob.scheduling_mode` that returns the scheduling mode the job is in."
msgstr ""

#: ../../release_notes.rst:19603
msgid "IQX-related tutorials that used to be in ``qiskit-iqx-tutorials`` are now in ``qiskit-ibmq-provider``."
msgstr ""

#: ../../release_notes.rst:19609
msgid ":meth:`qiskit.providers.ibmq.IBMQBackend.jobs` now accepts a new boolean parameter ``descending``, which can be used to indicate whether the jobs should be returned in descending or ascending order."
msgstr ""

#: ../../release_notes.rst:19612
msgid ":class:`qiskit.providers.ibmq.managed.IBMQJobManager` now looks at the job limit and waits for old jobs to finish before submitting new ones if the limit has been reached."
msgstr ""

#: ../../release_notes.rst:19614
msgid ":meth:`qiskit.providers.ibmq.IBMQBackend.status` now raises a :class:`qiskit.providers.ibmq.IBMQBackendApiProtocolError` exception if there was an issue with validating the status."
msgstr ""

#: ../../release_notes.rst:19620
msgid "Qiskit 0.16.0"
msgstr ""

#: ../../release_notes.rst:19628 ../../release_notes.rst:20309
msgid "Aer 0.4.0"
msgstr ""

#: ../../release_notes.rst:19638
msgid "Aqua 0.6.4"
msgstr ""

#: ../../release_notes.rst:19643
msgid "IBM Q Provider 0.5.0"
msgstr ""

#: ../../release_notes.rst:19648
#, python-format
msgid "Some of the visualization and Jupyter tools, including gate/error map and backend information, have been moved from ``qiskit-terra`` to ``qiskit-ibmq-provider``. They are now under the :mod:`qiskit.providers.ibmq.jupyter` and :mod:`qiskit.providers.ibmq.visualization`. In addition, you can now use ``%iqx_dashboard`` to get a dashboard that provides both job and backend information."
msgstr ""

#: ../../release_notes.rst:19658
msgid "JSON schema validation is no longer run by default on Qobj objects passed to :meth:`qiskit.providers.ibmq.IBMQBackend.run`. This significantly speeds up the execution of the `run()` method. Qobj objects are still validated on the server side, and invalid Qobjs will continue to raise exceptions. To force local validation, set ``validate_qobj=True`` when you invoke ``run()``."
msgstr ""

#: ../../release_notes.rst:19666
msgid "Qiskit 0.15.0"
msgstr ""

#: ../../release_notes.rst:19674
msgid "The 0.12.0 release includes several new features and bug fixes. The biggest change for this release is the addition of support for parametric pulses to OpenPulse. These are Pulse commands which take parameters rather than sample points to describe a pulse. 0.12.0 is also the first release to include support for Python 3.8. It also marks the beginning of the deprecation for Python 3.5 support, which will be removed when the upstream community stops supporting it."
msgstr ""

#: ../../release_notes.rst:19688
msgid "The pass :class:`qiskit.transpiler.passes.CSPLayout` was extended with two new parameters: ``call_limit`` and ``time_limit``. These options allow limiting how long the pass will run. The option ``call_limit`` limits the number of times that the recursive function in the backtracking solver may be called. Similarly, ``time_limit`` limits how long (in seconds) the solver will be allowed to run. The defaults are ``1000`` calls and ``10`` seconds respectively."
msgstr ""

#: ../../release_notes.rst:19696
msgid ":class:`qiskit.pulse.Acquire` can now be applied to a single qubit. This makes pulse programming more consistent and easier to reason about, as now all operations apply to a single channel. For example::"
msgstr ""

#: ../../release_notes.rst:19706
msgid "A new method :meth:`qiskit.transpiler.CouplingMap.draw` was added to :class:`qiskit.transpiler.CouplingMap` to generate a graphviz image from the coupling map graph. For example:"
msgstr ""

#: ../../release_notes.rst:19718
msgid "Parametric pulses have been added to OpenPulse. These are pulse commands which are parameterized and understood by the backend. Arbitrary pulse shapes are still supported by the SamplePulse Command. The new supported pulse classes are:"
msgstr ""

#: ../../release_notes.rst:19723
msgid ":class:`qiskit.pulse.ConstantPulse`"
msgstr ""

#: ../../release_notes.rst:19724
msgid ":class:`qiskit.pulse.Drag`"
msgstr ""

#: ../../release_notes.rst:19725
msgid ":class:`qiskit.pulse.Gaussian`"
msgstr ""

#: ../../release_notes.rst:19726
msgid ":class:`qiskit.pulse.GaussianSquare`"
msgstr ""

#: ../../release_notes.rst:19728
msgid "They can be used like any other Pulse command. An example::"
msgstr ""

#: ../../release_notes.rst:19740
msgid "The resulting schedule will be similar to a SamplePulse schedule built using :mod:`qiskit.pulse.pulse_lib`, however, waveform sampling will be performed by the backend. The method :meth:`qiskit.pulse.Schedule.draw` can still be used as usual. However, the command will be converted to a ``SamplePulse`` with the :meth:`qiskit.pulse.ParametricPulse.get_sample_pulse` method, so the pulse shown may not sample the continuous function the same way that the backend will."
msgstr ""

#: ../../release_notes.rst:19749
msgid "This feature can be used to construct Pulse programs for any backend, but the pulses will be converted to ``SamplePulse`` objects if the backend does not support parametric pulses. Backends which support them will have the following new attribute::"
msgstr ""

#: ../../release_notes.rst:19757
msgid "Note that the backend does not need to support all of the parametric pulses defined in Qiskit."
msgstr ""

#: ../../release_notes.rst:19760
msgid "When the backend supports parametric pulses, and the Pulse schedule is built with them, the assembled Qobj is significantly smaller. The size of a PulseQobj built entirely with parametric pulses is dependent only on the number of instructions, whereas the size of a PulseQobj built otherwise will grow with the duration of the instructions (since every sample must be specified with a value)."
msgstr ""

#: ../../release_notes.rst:19767
msgid "Added utility functions, :func:`qiskit.scheduler.measure` and :func:`qiskit.scheduler.measure_all` to `qiskit.scheduler` module. These functions return a :class:`qiskit.pulse.Schedule` object which measures qubits using OpenPulse. For example::"
msgstr ""

#: ../../release_notes.rst:19781
msgid "Pulse :class:`qiskit.pulse.Schedule` objects now have better representations that for simple schedules should be valid Python expressions."
msgstr ""

#: ../../release_notes.rst:19785
msgid "The :class:`qiskit.circuit.QuantumCircuit` methods :meth:`qiskit.circuit.QuantumCircuit.measure_active`, :meth:`qiskit.circuit.QuantumCircuit.measure_all`, and :meth:`qiskit.circuit.QuantumCircuit.remove_final_measurements` now have an addition kwarg ``inplace``. When ``inplace`` is set to ``False`` the function will return a modified **copy** of the circuit. This is different from the default behavior which will modify the circuit object in-place and return nothing."
msgstr ""

#: ../../release_notes.rst:19794
msgid "Several new constructor methods were added to the :class:`qiskit.transpiler.CouplingMap` class for building objects with basic qubit coupling graphs. The new constructor methods are:"
msgstr ""

#: ../../release_notes.rst:19798
msgid ":meth:`qiskit.transpiler.CouplingMap.from_full`"
msgstr ""

#: ../../release_notes.rst:19799
msgid ":meth:`qiskit.transpiler.CouplingMap.from_line`"
msgstr ""

#: ../../release_notes.rst:19800
msgid ":meth:`qiskit.transpiler.CouplingMap.from_ring`"
msgstr ""

#: ../../release_notes.rst:19801
msgid ":meth:`qiskit.transpiler.CouplingMap.from_grid`"
msgstr ""

#: ../../release_notes.rst:19803
msgid "For example, to use the new constructors to get a coupling map of 5 qubits connected in a linear chain you can now run:"
msgstr ""

#: ../../release_notes.rst:19813
msgid "Introduced a new pass :class:`qiskit.transpiler.passes.CrosstalkAdaptiveSchedule`. This pass aims to reduce the impact of crosstalk noise on a program. It uses crosstalk characterization data from the backend to schedule gates. When a pair of gates has high crosstalk, they get serialized using a barrier. Naive serialization is harmful because it incurs decoherence errors. Hence, this pass uses a SMT optimization approach to compute a schedule which minimizes the impact of crosstalk as well as decoherence errors."
msgstr ""

#: ../../release_notes.rst:19823
msgid "The pass takes as input a circuit which is already transpiled onto the backend i.e., the circuit is expressed in terms of physical qubits and swap gates have been inserted and decomposed into CNOTs if required. Using this circuit and crosstalk characterization data, a `Z3 optimization <https://github.com/Z3Prover/z3>`_ is used to construct a new scheduled circuit as output."
msgstr ""

#: ../../release_notes.rst:19830
msgid "To use the pass on a circuit circ::"
msgstr ""

#: ../../release_notes.rst:19837
msgid "``backend_prop`` is a :class:`qiskit.providers.models.BackendProperties` object for the target backend. ``crosstalk_prop`` is a dict which specifies conditional error rates. For two gates ``g1`` and ``g2``, ``crosstalk_prop[g1][g2]`` specifies the conditional error rate of ``g1`` when ``g1`` and ``g2`` are executed simultaneously. A method for generating ``crosstalk_prop`` will be added in a future release of qiskit-ignis. Until then you'll either have to already know the crosstalk properties of your device, or manually write your own device characterization experiments."
msgstr ""

#: ../../release_notes.rst:19846
msgid "In the preset pass manager for optimization level 1, :func:`qiskit.transpiler.preset_passmanagers.level_1_pass_manager` if :class:`qiskit.transpiler.passes.TrivialLayout` layout pass is not a perfect match for a particular circuit, then :class:`qiskit.transpiler.passes.DenseLayout` layout pass is used instead."
msgstr ""

#: ../../release_notes.rst:19853
msgid "Added a new abstract method :meth:`qiskit.quantum_info.Operator.dot` to the abstract ``BaseOperator`` class, so it is included for all implementations of that abstract class, including :class:`qiskit.quantum_info.Operator` and ``QuantumChannel`` (e.g., :class:`qiskit.quantum_info.Choi`) objects. This method returns the right operator multiplication ``a.dot(b)`` :math:`= a \\cdot b`. This is equivalent to calling the operator :meth:`qiskit.quantum_info.Operator.compose` method with the kwarg ``front`` set to ``True``."
msgstr ""

#: ../../release_notes.rst:19865
msgid "Added :func:`qiskit.quantum_info.average_gate_fidelity` and :func:`qiskit.quantum_info.gate_error` functions to the :mod:`qiskit.quantum_info` module for working with :class:`qiskit.quantum_info.Operator` and ``QuantumChannel`` (e.g., :class:`qiskit.quantum_info.Choi`) objects."
msgstr ""

#: ../../release_notes.rst:19871
msgid "Added the :func:`qiskit.quantum_info.partial_trace` function to the :mod:`qiskit.quantum_info` that works with :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` quantum state classes. For example::"
msgstr ""

#: ../../release_notes.rst:19886
msgid "When :meth:`qiskit.circuit.QuantumCircuit.draw` or :func:`qiskit.visualization.circuit_drawer` is called with the ``with_layout`` kwarg set True (the default) the output visualization will now display the physical qubits as integers to clearly distinguish them from the virtual qubits."
msgstr ""

#: ../../release_notes.rst:19907
msgid "Added new state measure functions to the :mod:`qiskit.quantum_info` module: :func:`qiskit.quantum_info.entropy`, :func:`qiskit.quantum_info.mutual_information`, :func:`qiskit.quantum_info.concurrence`, and :func:`qiskit.quantum_info.entanglement_of_formation`. These functions work with the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes."
msgstr ""

#: ../../release_notes.rst:19915
msgid "The decomposition methods for single-qubit gates in :class:`qiskit.quantum_info.synthesis.one_qubit_decompose.OneQubitEulerDecomposer` have been expanded to now also include the ``'ZXZ'`` basis, characterized by three rotations about the  Z,X,Z axis. This now means that a general 2x2 Operator can be decomposed into following bases: ``U3``, ``U1X``, ``ZYZ``, ``ZXZ``, ``XYX``, ``ZXZ``."
msgstr ""

#: ../../release_notes.rst:19928
msgid "Running functions that use :func:`qiskit.tools.parallel_map` (for example :func:`qiskit.execute.execute`, :func:`qiskit.compiler.transpile`, and :meth:`qiskit.transpiler.PassManager.run`) may not work when called from a script running outside of a ``if __name__ == '__main__':`` block when using Python 3.8 on MacOS. Other environments are unaffected by this issue. This is due to changes in how parallel processes are launched by Python 3.8 on MacOS. If ``RuntimeError`` or ``AttributeError`` are raised by scripts that are directly calling ``parallel_map()`` or when calling a function that uses it internally with Python 3.8 on MacOS embedding the script calls inside ``if __name__ == '__main__':`` should workaround the issue. For example::"
msgstr ""

#: ../../release_notes.rst:19972
msgid "if errors are encountered with Python 3.8 on MacOS."
msgstr ""

#: ../../release_notes.rst:19980
msgid "The value of the ``rep_time`` parameter for Pulse backend's configuration object is now in units of seconds, not microseconds. The first time a ``PulseBackendConfiguration`` object is initialized it will raise a single warning to the user to indicate this."
msgstr ""

#: ../../release_notes.rst:19985
msgid "The ``rep_time`` argument for :func:`qiskit.compiler.assemble` now takes in a value in units of seconds, not microseconds. This was done to make the units with everything else in pulse. If you were passing in a value for ``rep_time`` ensure that you update the value to account for this change."
msgstr ""

#: ../../release_notes.rst:19990
msgid "The value of the ``base_gate`` property of :class:`qiskit.circuit.ControlledGate` objects has been changed from the class of the base gate to an instance of the class of the base gate."
msgstr ""

#: ../../release_notes.rst:19994
msgid "The ``base_gate_name`` property of :class:`qiskit.circuit.ControlledGate` has been removed; you can get the name of the base gate by accessing ``base_gate.name`` on the object. For example::"
msgstr ""

#: ../../release_notes.rst:20005
msgid "Changed :class:`qiskit.quantum_info.Operator` magic methods so that ``__mul__`` (which gets executed by python's multiplication operation, if the left hand side of the operation has it defined) implements right matrix multiplication (i.e. :meth:`qiskit.quantum_info.Operator.dot`), and ``__rmul__`` (which gets executed by python's multiplication operation from the right hand side of the operation if the left does not have ``__mul__`` defined) implements scalar multiplication (i.e. :meth:`qiskit.quantum_info.Operator.multiply`). Previously both methods implemented scalar multiplciation."
msgstr ""

#: ../../release_notes.rst:20015
msgid "The second argument of the :func:`qiskit.quantum_info.process_fidelity` function, ``target``, is now optional. If a target unitary is not specified, then process fidelity of the input channel with the identity operator will be returned."
msgstr ""

#: ../../release_notes.rst:20020
msgid ":func:`qiskit.compiler.assemble` will now respect the configured ``max_shots`` value for a backend. If a value for the ``shots`` kwarg is specified that exceed the max shots set in the backend configuration the function will now raise a ``QiskitError`` exception. Additionally, if no shots argument is provided the default value is either 1024 (the previous behavior) or ``max_shots`` from the backend, whichever is lower."
msgstr ""

#: ../../release_notes.rst:20033
msgid "Methods for adding gates to a :class:`qiskit.circuit.QuantumCircuit` with abbreviated keyword arguments (e.g. ``ctl``, ``tgt``) have had their keyword arguments renamed to be more descriptive (e.g. ``control_qubit``, ``target_qubit``). The old names have been deprecated. A table including the old and new calling signatures for the ``QuantumCircuit`` methods is included below."
msgstr ""

#: ../../release_notes.rst:20039
msgid "New signatures for ``QuantumCircuit`` gate methods"
msgstr ""

#: ../../release_notes.rst:20042
msgid "Instruction Type"
msgstr ""

#: ../../release_notes.rst:20043
msgid "Former Signature"
msgstr ""

#: ../../release_notes.rst:20044
msgid "New Signature"
msgstr ""

#: ../../release_notes.rst:20045
msgid ":class:`qiskit.extensions.HGate`"
msgstr ""

#: ../../release_notes.rst:20046
msgid "``qc.h(q)``"
msgstr ""

#: ../../release_notes.rst:20047
msgid "``qc.h(qubit)``"
msgstr ""

#: ../../release_notes.rst:20048
msgid ":class:`qiskit.extensions.CHGate`"
msgstr ""

#: ../../release_notes.rst:20049
msgid "``qc.ch(ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:20050
msgid "``qc.ch((control_qubit, target_qubit))``"
msgstr ""

#: ../../release_notes.rst:20051
msgid ":class:`qiskit.extensions.IdGate`"
msgstr ""

#: ../../release_notes.rst:20052 ../../release_notes.rst:20055
msgid "``qc.iden(q)``"
msgstr ""

#: ../../release_notes.rst:20053 ../../release_notes.rst:20056
msgid "``qc.iden(qubit)``"
msgstr ""

#: ../../release_notes.rst:20054 ../../release_notes.rst:20057
msgid ":class:`qiskit.extensions.RGate`"
msgstr ""

#: ../../release_notes.rst:20058
msgid "``qc.r(theta, phi, q)``"
msgstr ""

#: ../../release_notes.rst:20059
msgid "``qc.r(theta, phi, qubit)``"
msgstr ""

#: ../../release_notes.rst:20060
msgid ":class:`qiskit.extensions.RXGate`"
msgstr ""

#: ../../release_notes.rst:20061
msgid "``qc.rx(theta, q)``"
msgstr ""

#: ../../release_notes.rst:20062
msgid "``qc.rx(theta, qubit)``"
msgstr ""

#: ../../release_notes.rst:20063
msgid ":class:`qiskit.extensions.CrxGate`"
msgstr ""

#: ../../release_notes.rst:20064
msgid "``qc.crx(theta, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:20065
msgid "``qc.crx(theta, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:20066
msgid ":class:`qiskit.extensions.RYGate`"
msgstr ""

#: ../../release_notes.rst:20067
msgid "``qc.ry(theta, q)``"
msgstr ""

#: ../../release_notes.rst:20068
msgid "``qc.ry(theta, qubit)``"
msgstr ""

#: ../../release_notes.rst:20069
msgid ":class:`qiskit.extensions.CryGate`"
msgstr ""

#: ../../release_notes.rst:20070
msgid "``qc.cry(theta, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:20071
msgid "``qc.cry(theta, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:20072
msgid ":class:`qiskit.extensions.RZGate`"
msgstr ""

#: ../../release_notes.rst:20073
msgid "``qc.rz(phi, q)``"
msgstr ""

#: ../../release_notes.rst:20074
msgid "``qc.rz(phi, qubit)``"
msgstr ""

#: ../../release_notes.rst:20075
msgid ":class:`qiskit.extensions.CrzGate`"
msgstr ""

#: ../../release_notes.rst:20076
msgid "``qc.crz(theta, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:20077
msgid "``qc.crz(theta, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:20078
msgid ":class:`qiskit.extensions.SGate`"
msgstr ""

#: ../../release_notes.rst:20079
msgid "``qc.s(q)``"
msgstr ""

#: ../../release_notes.rst:20080
msgid "``qc.s(qubit)``"
msgstr ""

#: ../../release_notes.rst:20081
msgid ":class:`qiskit.extensions.SdgGate`"
msgstr ""

#: ../../release_notes.rst:20082
msgid "``qc.sdg(q)``"
msgstr ""

#: ../../release_notes.rst:20083
msgid "``qc.sdg(qubit)``"
msgstr ""

#: ../../release_notes.rst:20084
msgid ":class:`qiskit.extensions.FredkinGate`"
msgstr ""

#: ../../release_notes.rst:20085
msgid "``qc.cswap(ctl, tgt1, tgt2)``"
msgstr ""

#: ../../release_notes.rst:20086
msgid "``qc.cswap(control_qubit, target_qubit1, target_qubit2)``"
msgstr ""

#: ../../release_notes.rst:20087
msgid ":class:`qiskit.extensions.TGate`"
msgstr ""

#: ../../release_notes.rst:20088
msgid "``qc.t(q)``"
msgstr ""

#: ../../release_notes.rst:20089
msgid "``qc.t(qubit)``"
msgstr ""

#: ../../release_notes.rst:20090
msgid ":class:`qiskit.extensions.TdgGate`"
msgstr ""

#: ../../release_notes.rst:20091
msgid "``qc.tdg(q)``"
msgstr ""

#: ../../release_notes.rst:20092
msgid "``qc.tdg(qubit)``"
msgstr ""

#: ../../release_notes.rst:20093
msgid ":class:`qiskit.extensions.U1Gate`"
msgstr ""

#: ../../release_notes.rst:20094
msgid "``qc.u1(theta, q)``"
msgstr ""

#: ../../release_notes.rst:20095
msgid "``qc.u1(theta, qubit)``"
msgstr ""

#: ../../release_notes.rst:20096
msgid ":class:`qiskit.extensions.Cu1Gate`"
msgstr ""

#: ../../release_notes.rst:20097
msgid "``qc.cu1(theta, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:20098
msgid "``qc.cu1(theta, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:20099
msgid ":class:`qiskit.extensions.U2Gate`"
msgstr ""

#: ../../release_notes.rst:20100
msgid "``qc.u2(phi, lam, q)``"
msgstr ""

#: ../../release_notes.rst:20101
msgid "``qc.u2(phi, lam, qubit)``"
msgstr ""

#: ../../release_notes.rst:20102
msgid ":class:`qiskit.extensions.U3Gate`"
msgstr ""

#: ../../release_notes.rst:20103
msgid "``qc.u3(theta, phi, lam, q)``"
msgstr ""

#: ../../release_notes.rst:20104
msgid "``qc.u3(theta, phi, lam, qubit)``"
msgstr ""

#: ../../release_notes.rst:20105
msgid ":class:`qiskit.extensions.Cu3Gate`"
msgstr ""

#: ../../release_notes.rst:20106
msgid "``qc.cu3(theta, phi, lam, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:20107
msgid "``qc.cu3(theta, phi, lam, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:20108
msgid ":class:`qiskit.extensions.XGate`"
msgstr ""

#: ../../release_notes.rst:20109
msgid "``qc.x(q)``"
msgstr ""

#: ../../release_notes.rst:20110
msgid "``qc.x(qubit)``"
msgstr ""

#: ../../release_notes.rst:20111
msgid ":class:`qiskit.extensions.CnotGate`"
msgstr ""

#: ../../release_notes.rst:20112
msgid "``qc.cx(ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:20113
msgid "``qc.cx(control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:20114
msgid ":class:`qiskit.extensions.ToffoliGate`"
msgstr ""

#: ../../release_notes.rst:20115
msgid "``qc.ccx(ctl1, ctl2, tgt)``"
msgstr ""

#: ../../release_notes.rst:20116
msgid "``qc.ccx(control_qubit1, control_qubit2, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:20117
msgid ":class:`qiskit.extensions.YGate`"
msgstr ""

#: ../../release_notes.rst:20118
msgid "``qc.y(q)``"
msgstr ""

#: ../../release_notes.rst:20119
msgid "``qc.y(qubit)``"
msgstr ""

#: ../../release_notes.rst:20120
msgid ":class:`qiskit.extensions.CyGate`"
msgstr ""

#: ../../release_notes.rst:20121
msgid "``qc.cy(ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:20122
msgid "``qc.cy(control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:20123
msgid ":class:`qiskit.extensions.ZGate`"
msgstr ""

#: ../../release_notes.rst:20124
msgid "``qc.z(q)``"
msgstr ""

#: ../../release_notes.rst:20125
msgid "``qc.z(qubit)``"
msgstr ""

#: ../../release_notes.rst:20126
msgid ":class:`qiskit.extensions.CzGate`"
msgstr ""

#: ../../release_notes.rst:20127
msgid "``qc.cz(ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:20128
msgid "``qc.cz(control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:20130
msgid "Running :class:`qiskit.pulse.Acquire` on multiple qubits has been deprecated and will be removed in a future release. Additionally, the :class:`qiskit.pulse.AcquireInstruction` parameters ``mem_slots`` and ``reg_slots`` have been deprecated. Instead ``reg_slot`` and ``mem_slot`` should be used instead."
msgstr ""

#: ../../release_notes.rst:20136
msgid "The attribute of the :class:`qiskit.providers.models.PulseDefaults` class ``circuit_instruction_map`` has been deprecated and will be removed in a future release. Instead you should use the new attribute ``instruction_schedule_map``. This was done to match the type of the value of the attribute, which is an ``InstructionScheduleMap``."
msgstr ""

#: ../../release_notes.rst:20142
msgid "The :class:`qiskit.pulse.PersistentValue` command is deprecated and will be removed in a future release. Similar functionality can be achieved with the :class:`qiskit.pulse.ConstantPulse` command (one of the new parametric pulses). Compare the following::"
msgstr ""

#: ../../release_notes.rst:20159
msgid "Python 3.5 support in qiskit-terra is deprecated. Support will be removed in the first release after the upstream Python community's end of life date for the version, which is 09/13/2020."
msgstr ""

#: ../../release_notes.rst:20163
msgid "The ``require_cptp`` kwarg of the :func:`qiskit.quantum_info.process_fidelity` function has been deprecated and will be removed in a future release. It is superseded by two separate kwargs ``require_cp`` and ``require_tp``."
msgstr ""

#: ../../release_notes.rst:20168
msgid "Setting the ``scale`` parameter for :meth:`qiskit.circuit.QuantumCircuit.draw` and :func:`qiskit.visualization.circuit_drawer` as the first positional argument is deprecated and will be removed in a future release. Instead you should use ``scale`` as keyword argument."
msgstr ""

#: ../../release_notes.rst:20174
msgid "The :mod:`qiskit.tools.qi.qi` module is deprecated and will be removed in a future release. The legacy functions in the module have all been superseded by functions and classes in the :mod:`qiskit.quantum_info` module. A table of the deprecated functions and their replacement are below:"
msgstr ""

#: ../../release_notes.rst:20179
msgid "``qiskit.tools.qi.qi`` replacements"
msgstr ""

#: ../../release_notes.rst:20183 ../../release_notes.rst:20214
msgid "Replacement"
msgstr ""

#: ../../release_notes.rst:20184
msgid ":func:`qiskit.tools.partial_trace`"
msgstr ""

#: ../../release_notes.rst:20185
msgid ":func:`qiskit.quantum_info.partial_trace`"
msgstr ""

#: ../../release_notes.rst:20186
msgid ":func:`qiskit.tools.choi_to_pauli`"
msgstr ""

#: ../../release_notes.rst:20187
msgid ":class:`qiskit.quantum_info.Choi` and :class:`quantum_info.PTM`"
msgstr ""

#: ../../release_notes.rst:20188
msgid ":func:`qiskit.tools.chop`"
msgstr ""

#: ../../release_notes.rst:20189
msgid "``numpy.round``"
msgstr ""

#: ../../release_notes.rst:20190
msgid "``qiskit.tools.qi.qi.outer``"
msgstr ""

#: ../../release_notes.rst:20191
msgid "``numpy.outer``"
msgstr ""

#: ../../release_notes.rst:20192
msgid ":func:`qiskit.tools.concurrence`"
msgstr ""

#: ../../release_notes.rst:20193
msgid ":func:`qiskit.quantum_info.concurrence`"
msgstr ""

#: ../../release_notes.rst:20194
msgid ":func:`qiskit.tools.shannon_entropy`"
msgstr ""

#: ../../release_notes.rst:20195
msgid ":func:`qiskit.quantum_info.shannon_entropy`"
msgstr ""

#: ../../release_notes.rst:20196
msgid ":func:`qiskit.tools.entropy`"
msgstr ""

#: ../../release_notes.rst:20197
msgid ":func:`qiskit.quantum_info.entropy`"
msgstr ""

#: ../../release_notes.rst:20198
msgid ":func:`qiskit.tools.mutual_information`"
msgstr ""

#: ../../release_notes.rst:20199
msgid ":func:`qiskit.quantum_info.mutual_information`"
msgstr ""

#: ../../release_notes.rst:20200
msgid ":func:`qiskit.tools.entanglement_of_formation`"
msgstr ""

#: ../../release_notes.rst:20201
msgid ":func:`qiskit.quantum_info.entanglement_of_formation`"
msgstr ""

#: ../../release_notes.rst:20202
msgid ":func:`qiskit.tools.is_pos_def`"
msgstr ""

#: ../../release_notes.rst:20203
msgid "``quantum_info.operators.predicates.is_positive_semidefinite_matrix``"
msgstr ""

#: ../../release_notes.rst:20205
msgid "The :mod:`qiskit.quantum_info.states.states` module is deprecated and will be removed in a future release. The legacy functions in the module have all been superseded by functions and classes in the :mod:`qiskit.quantum_info` module."
msgstr ""

#: ../../release_notes.rst:20210
msgid "``qiskit.quantum_info.states.states`` replacements"
msgstr ""

#: ../../release_notes.rst:20215
msgid "``qiskit.quantum_info.states.states.basis_state``"
msgstr ""

#: ../../release_notes.rst:20216
msgid ":meth:`qiskit.quantum_info.Statevector.from_label`"
msgstr ""

#: ../../release_notes.rst:20217
msgid "``qiskit.quantum_info.states.states.projector``"
msgstr ""

#: ../../release_notes.rst:20218
msgid ":class:`qiskit.quantum_info.DensityMatrix`"
msgstr ""

#: ../../release_notes.rst:20220
msgid "The ``scaling`` parameter of the ``draw()`` method for the ``Schedule`` and ``Pulse`` objects was deprecated and will be removed in a future release. Instead the new ``scale`` parameter should be used. This was done to have a consistent argument between pulse and circuit drawings. For example::"
msgstr ""

#: ../../release_notes.rst:20242
msgid "Previously, calling :meth:`qiskit.circuit.QuantumCircuit.bind_parameters` prior to decomposing a circuit would result in the bound values not being correctly substituted into the decomposed gates. This has been resolved such that binding and decomposition may occur in any order. Fixes `issue #2482 <https://github.com/Qiskit/qiskit-terra/issues/2482>`_ and `issue #3509 <https://github.com/Qiskit/qiskit-terra/issues/3509>`_"
msgstr ""

#: ../../release_notes.rst:20249
msgid "The ``Collect2qBlocks`` pass had previously not considered classical conditions when determining whether to include a gate within an existing block. In some cases, this resulted in classical conditions being lost when transpiling with ``optimization_level=3``. This has been resolved so that classically conditioned gates are never included in a block. Fixes `issue #3215 <https://github.com/Qiskit/qiskit-terra/issues/3215>`_"
msgstr ""

#: ../../release_notes.rst:20257
msgid "All the output types for the circuit drawers in :meth:`qiskit.circuit.QuantumCircuit.draw` and :func:`qiskit.visualization.circuit_drawer` have fixed and/or improved support for drawing controlled custom gates. Fixes `issue #3546 <https://github.com/Qiskit/qiskit-terra/issues/3546>`_, `issue #3763 <https://github.com/Qiskit/qiskit-terra/issues/3763>`_, and `issue #3764 <https://github.com/Qiskit/qiskit-terra/issues/3764>`_"
msgstr ""

#: ../../release_notes.rst:20265
msgid "Explanation and examples have been added to documentation for the :class:`qiskit.circuit.QuantumCircuit` methods for adding gates: :meth:`qiskit.circuit.QuantumCircuit.ccx`, :meth:`qiskit.circuit.QuantumCircuit.ch`, :meth:`qiskit.circuit.QuantumCircuit.crz`, :meth:`qiskit.circuit.QuantumCircuit.cswap`, :meth:`qiskit.circuit.QuantumCircuit.cu1`, :meth:`qiskit.circuit.QuantumCircuit.cu3`, :meth:`qiskit.circuit.QuantumCircuit.cx`, :meth:`qiskit.circuit.QuantumCircuit.cy`, :meth:`qiskit.circuit.QuantumCircuit.cz`, :meth:`qiskit.circuit.QuantumCircuit.h`, :meth:`qiskit.circuit.QuantumCircuit.iden`, :meth:`qiskit.circuit.QuantumCircuit.rx`, :meth:`qiskit.circuit.QuantumCircuit.ry`, :meth:`qiskit.circuit.QuantumCircuit.rz`, :meth:`qiskit.circuit.QuantumCircuit.s`, :meth:`qiskit.circuit.QuantumCircuit.sdg`, :meth:`qiskit.circuit.QuantumCircuit.swap`, :meth:`qiskit.circuit.QuantumCircuit.t`, :meth:`qiskit.circuit.QuantumCircuit.tdg`, :meth:`qiskit.circuit.QuantumCircuit.u1`, :meth:`qiskit.circuit.QuantumCircuit.u2`, :meth:`qiskit.circuit.QuantumCircuit.u3`, :meth:`qiskit.circuit.QuantumCircuit.x`, :meth:`qiskit.circuit.QuantumCircuit.y`, :meth:`qiskit.circuit.QuantumCircuit.z`. Fixes `issue #3400 <https://github.com/Qiskit/qiskit-terra/issues/3400>`_"
msgstr ""

#: ../../release_notes.rst:20294
msgid "Fixes for handling of complex number parameter in circuit visualization. Fixes `issue #3640 <https://github.com/Qiskit/qiskit-terra/issues/3640>`_"
msgstr ""

#: ../../release_notes.rst:20303
msgid "The transpiler passes in the :mod:`qiskit.transpiler.passes` directory have been organized into subdirectories to better categorize them by functionality. They are still all accessible under the ``qiskit.transpiler.passes`` namespace."
msgstr ""

#: ../../release_notes.rst:20313
msgid "Added ``NoiseModel.from_backend`` for building a basic device noise model for an IBMQ backend (\\#569)"
msgstr ""

#: ../../release_notes.rst:20315
msgid "Added multi-GPU enabled simulation methods to the ``QasmSimulator``, ``StatevectorSimulator``, and ``UnitarySimulator``. The qasm simulator has gpu version of the density matrix and statevector methods and can be accessed using ``\"method\": \"density_matrix_gpu\"`` or ``\"method\": \"statevector_gpu\"`` in ``backend_options``. The statevector simulator gpu method can be accessed using ``\"method\": \"statevector_gpu\"``. The unitary simulator GPU method can be accessed using ``\"method\": \"unitary_gpu\"``. These backends use CUDA and require an NVidia GPU.(\\#544)"
msgstr ""

#: ../../release_notes.rst:20322
msgid "Added ``PulseSimulator`` backend (\\#542)"
msgstr ""

#: ../../release_notes.rst:20323
msgid "Added ``PulseSystemModel`` and ``HamiltonianModel`` classes to represent models to be used in ``PulseSimulator`` (\\#496, \\#493)"
msgstr ""

#: ../../release_notes.rst:20325
msgid "Added ``duffing_model_generators`` to generate ``PulseSystemModel`` objects from a list of parameters (\\#516)"
msgstr ""

#: ../../release_notes.rst:20327
msgid "Migrated ODE function solver to C++ (\\#442, \\#350)"
msgstr ""

#: ../../release_notes.rst:20328
msgid "Added high level pulse simulator tests (\\#379)"
msgstr ""

#: ../../release_notes.rst:20329
msgid "CMake BLAS_LIB_PATH flag to set path to look for BLAS lib (\\#543)"
msgstr ""

#: ../../release_notes.rst:20334
msgid "Changed the structure of the ``src`` directory to organise simulator source code. Simulator controller headers were moved to ``src/controllers`` and simulator method State headers are in ``src/simulators`` (\\#544)"
msgstr ""

#: ../../release_notes.rst:20337
msgid "Moved the location of several functions (\\#568): * Moved contents of ``qiskit.provider.aer.noise.errors`` into the ``qiskit.providers.noise`` module * Moved contents of ``qiskit.provider.aer.noise.utils`` into the ``qiskit.provider.aer.utils`` module."
msgstr ""

#: ../../release_notes.rst:20342
msgid "Enabled optimization to aggregate consecutive gates in a circuit (fusion) by default (\\#579)."
msgstr ""

#: ../../release_notes.rst:20346
msgid "Deprecated ``utils.qobj_utils`` functions (\\#568)"
msgstr ""

#: ../../release_notes.rst:20347
msgid "Deprecated ``qiskit.providers.aer.noise.device.basic_device_noise_model``. It is superseded by the ``NoiseModel.from_backend`` method (\\#569)"
msgstr ""

#: ../../release_notes.rst:20351 ../../release_notes.rst:22328
msgid "Removed"
msgstr ""

#: ../../release_notes.rst:20352
msgid "Removed ``NoiseModel.as_dict``, ``QuantumError.as_dict``, ``ReadoutError.as_dict``, and ``QuantumError.kron`` methods that were deprecated in 0.3 (\\#568)."
msgstr ""

#: ../../release_notes.rst:20356 ../../release_notes.rst:20955
#: ../../release_notes.rst:21478 ../../release_notes.rst:22219
msgid "Ignis 0.2"
msgstr ""

#: ../../release_notes.rst:20361 ../../release_notes.rst:20960
#: ../../release_notes.rst:21483 ../../release_notes.rst:22247
msgid "Aqua 0.6"
msgstr ""

#: ../../release_notes.rst:20366
msgid "IBM Q Provider 0.4.6"
msgstr ""

#: ../../release_notes.rst:20371
msgid "Several new methods were added to :class:`IBMQBackend<qiskit.providers.ibmq.ibmqbackend.IBMQBackend>`:"
msgstr ""

#: ../../release_notes.rst:20374
msgid ":meth:`~qiskit.providers.ibmq.job.IBMQJob.wait_for_final_state` blocks until the job finishes. It takes a callback function that it will invoke after every query to provide feedback."
msgstr ""

#: ../../release_notes.rst:20377
msgid ":meth:`~qiskit.providers.ibmq.ibmqbackend.IBMQBackend.active_jobs` returns the jobs submitted to a backend that are currently in an unfinished status."
msgstr ""

#: ../../release_notes.rst:20379
msgid ":meth:`~qiskit.providers.ibmq.ibmqbackend.IBMQBackend.job_limit` returns the job limit for a backend."
msgstr ""

#: ../../release_notes.rst:20381
msgid ":meth:`~qiskit.providers.ibmq.ibmqbackend.IBMQBackend.remaining_jobs_count` returns the number of jobs that you can submit to the backend before job limit is reached."
msgstr ""

#: ../../release_notes.rst:20384
msgid ":class:`~qiskit.providers.ibmq.job.QueueInfo` now has a new :meth:`~qiskit.providers.ibmq.job.QueueInfo.format` method that returns a formatted string of the queue information."
msgstr ""

#: ../../release_notes.rst:20388
msgid ":class:`IBMQJob<qiskit.providers.ibmq.job.IBMQJob>` now has three new methods: :meth:`~qiskit.providers.ibmq.job.IBMQJob.done`, :meth:`~qiskit.providers.ibmq.job.IBMQJob.running`, and :meth:`~qiskit.providers.ibmq.job.IBMQJob.cancelled` that are used to indicate job status."
msgstr ""

#: ../../release_notes.rst:20393
msgid ":meth:`qiskit.providers.ibmq.ibmqbackend.IBMQBackend.run()` now accepts an optional `job_tags` parameter. If specified, the `job_tags` are assigned to the job, which can later be used as a filter in :meth:`qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs()`."
msgstr ""

#: ../../release_notes.rst:20397
msgid ":class:`~qiskit.providers.ibmq.managed.IBMQJobManager` now has a new method :meth:`~qiskit.providers.ibmq.managed.IBMQJobManager.retrieve_job_set()` that allows you to retrieve a previously submitted job set using the job set ID."
msgstr ""

#: ../../release_notes.rst:20404
msgid "The ``Exception`` hierarchy has been refined with more specialized classes. You can, however, continue to catch their parent exceptions (such as ``IBMQAccountError``). Also, the exception class ``IBMQApiUrlError`` has been replaced by ``IBMQAccountCredentialsInvalidUrl`` and ``IBMQAccountCredentialsInvalidToken``."
msgstr ""

#: ../../release_notes.rst:20413
msgid "The use of proxy urls without a protocol (e.g. ``http://``) is deprecated due to recent Python changes."
msgstr ""

#: ../../release_notes.rst:20418
msgid "Qiskit 0.14.0"
msgstr ""

#: ../../release_notes.rst:20421
msgid "Terra 0.11.0"
msgstr ""

#: ../../release_notes.rst:20428
msgid "The 0.11.0 release includes several new features and bug fixes. The biggest change for this release is the addition of the pulse scheduler. This allows users to define their quantum program as a ``QuantumCircuit`` and then map it to the underlying pulse instructions that will control the quantum hardware to implement the circuit."
msgstr ""

#: ../../release_notes.rst:20439
msgid "Added 5 new commands to easily retrieve user-specific data from ``BackendProperties``: ``gate_property``, ``gate_error``, ``gate_length``, ``qubit_property``, ``t1``, ``t2``, ``readout_error`` and ``frequency``. They return the specific values of backend properties. For example::"
msgstr ""

#: ../../release_notes.rst:20457
msgid "Added method ``Instruction.is_parameterized()`` to check if an instruction object is parameterized. This method returns ``True`` if and only if instruction has a ``ParameterExpression`` or ``Parameter`` object for one of its params."
msgstr ""

#: ../../release_notes.rst:20462
msgid "Added a new analysis pass ``Layout2qDistance``. This pass allows to \"score\" a layout selection, once ``property_set['layout']`` is set.  The score will be the sum of distances for each two-qubit gate in the circuit, when they are not directly connected. This scoring does not consider direction in the coupling map. The lower the number, the better the layout selection is."
msgstr ""

#: ../../release_notes.rst:20468
msgid "For example, consider a linear coupling map ``[0]--[2]--[1]`` and the following circuit::"
msgstr ""

#: ../../release_notes.rst:20475
msgid "If the layout is ``{qr[0]:0, qr[1]:1}``, ``Layout2qDistance`` will set ``property_set['layout_score'] = 1``. If the layout is ``{qr[0]:0, qr[1]:2}``, then the result is ``property_set['layout_score'] = 0``. The lower the score, the better."
msgstr ""

#: ../../release_notes.rst:20480
msgid "Added ``qiskit.QuantumCircuit.cnot`` as an alias for the ``cx`` method of ``QuantumCircuit``. The names ``cnot`` and ``cx`` are often used interchangeably now the `cx` method can be called with either name."
msgstr ""

#: ../../release_notes.rst:20484
msgid "Added ``qiskit.QuantumCircuit.toffoli`` as an alias for the ``ccx`` method of ``QuantumCircuit``. The names ``toffoli`` and ``ccx`` are often used interchangeably now the `ccx` method can be called with either name."
msgstr ""

#: ../../release_notes.rst:20488
msgid "Added ``qiskit.QuantumCircuit.fredkin`` as an alias for the ``cswap`` method of ``QuantumCircuit``. The names ``fredkin`` and ``cswap`` are often used interchangeably now the `cswap` method can be called with either name."
msgstr ""

#: ../../release_notes.rst:20493
msgid "The ``latex`` output mode for ``qiskit.visualization.circuit_drawer()`` and the ``qiskit.circuit.QuantumCircuit.draw()`` method now has a mode to passthrough raw latex from gate labels and parameters. The syntax for doing this mirrors matplotlib's `mathtext mode <https://matplotlib.org/tutorials/text/mathtext.html>`__ syntax. Any portion of a label string between a pair of '$' characters will be treated as raw latex and passed directly into the generated output latex. This can be leveraged to add more advanced formatting to circuit diagrams generated with the latex drawer."
msgstr ""

#: ../../release_notes.rst:20503
msgid "Prior to this release all gate labels were run through a utf8 -> latex conversion to make sure that the output latex would compile the string as expected. This is still what happens for all portions of a label outside the '$' pair. Also if you want to use a dollar sign in your label make sure you escape it in the label string (ie ``'\\$'``)."
msgstr ""

#: ../../release_notes.rst:20509
msgid "You can mix and match this passthrough with the utf8 -> latex conversion to create the exact label you want, for example::"
msgstr ""

#: ../../release_notes.rst:20520
msgid "will now render the first custom gate's label as ``α_gate``, the second will be ``α_gate`` with a 2 subscript, and the last custom gate's label will be ``$α$_gate``."
msgstr ""

#: ../../release_notes.rst:20524
msgid "Add ``ControlledGate`` class for representing controlled gates. Controlled gate instances are created with the ``control(n)`` method of ``Gate`` objects where ``n`` represents the number of controls. The control qubits come before the controlled qubits in the new gate. For example::"
msgstr ""

#: ../../release_notes.rst:20537
msgid "generates::"
msgstr ""

#: ../../release_notes.rst:20548
msgid "Allowed values of ``meas_level`` parameters and fields can now be a member from the `IntEnum` class ``qiskit.qobj.utils.MeasLevel``. This can be used when calling ``execute`` (or anywhere else ``meas_level`` is specified) with a pulse experiment. For example::"
msgstr ""

#: ../../release_notes.rst:20565
msgid "In this above example, ``meas_level=MeasLevel.CLASSIFIED`` and ``meas_level=2`` can be used interchangably now."
msgstr ""

#: ../../release_notes.rst:20568
msgid "A new layout selector based on constraint solving is included. `CSPLayout` models the problem of finding a layout as a constraint problem and uses recursive backtracking to solve it."
msgstr ""

#: ../../release_notes.rst:20597
msgid "The parameter ``CSPLayout(...,strict_direction=True)`` is more restrictive but it will guarantee there is no need of running ``CXDirection`` after."
msgstr ""

#: ../../release_notes.rst:20616
msgid "If the constraint system is not solvable, the `layout` property is not set."
msgstr ""

#: ../../release_notes.rst:20629
msgid "PulseBackendConfiguration (accessed normally as backend.configuration()) has been extended with useful methods to explore its data and the functionality that exists in PulseChannelSpec. PulseChannelSpec will be deprecated in the future. For example::"
msgstr ""

#: ../../release_notes.rst:20642
msgid "``PulseDefaults`` (accessed normally as ``backend.defaults()``) has an attribute, ``circuit_instruction_map`` which has the methods of CmdDef. The new `circuit_instruction_map` is an ``InstructionScheduleMap`` object with three new functions beyond what CmdDef had:"
msgstr ""

#: ../../release_notes.rst:20647
msgid "qubit_instructions(qubits) returns the operations defined for the qubits"
msgstr ""

#: ../../release_notes.rst:20648
msgid "assert_has(instruction, qubits) raises an error if the op isn't defined"
msgstr ""

#: ../../release_notes.rst:20649
msgid "remove(instruction, qubits) like pop, but doesn't require parameters"
msgstr ""

#: ../../release_notes.rst:20651
msgid "There are some differences from the CmdDef:"
msgstr ""

#: ../../release_notes.rst:20653
msgid "``__init__`` takes no arguments"
msgstr ""

#: ../../release_notes.rst:20654
msgid "``cmds`` and ``cmd_qubits`` are deprecated and replaced with ``instructions`` and ``qubits_with_instruction``"
msgstr ""

#: ../../release_notes.rst:20665
msgid "A new kwarg parameter, ``show_framechange_channels`` to optionally disable displaying channels with only framechange instructions in pulse visualizations was added to the ``qiskit.visualization.pulse_drawer()`` function and ``qiskit.pulse.Schedule.draw()`` method. When this new kwarg is set to ``False`` the output pulse schedule visualization will not include any channels that only include frame changes."
msgstr ""

#: ../../release_notes.rst:20688
msgid "A new utility function ``qiskit.result.marginal_counts()`` is added which allows marginalization of the counts over some indices of interest. This is useful when more qubits are measured than needed, and one wishes to get the observation counts for some subset of them only."
msgstr ""

#: ../../release_notes.rst:20693
msgid "When ``passmanager.run(...)`` is invoked with more than one circuit, the transpilation of these circuits will run in parallel."
msgstr ""

#: ../../release_notes.rst:20696
msgid "PassManagers can now be sliced to create a new PassManager containing a subset of passes using the square bracket operator. This allow running or drawing a portion of the PassManager for easier testing and visualization. For example let's try to draw the first 3 passes of a PassManager pm, or run just the second pass on our circuit:"
msgstr ""

#: ../../release_notes.rst:20707
msgid "Also now, PassManagers can be created by adding two PassManagers or by directly adding a pass/list of passes to a PassManager."
msgstr ""

#: ../../release_notes.rst:20715
msgid "A basic ``scheduler`` module has now been added to Qiskit. The `scheduler` schedules an input transpiled ``QuantumCircuit`` into a pulse ``Schedule``. The scheduler accepts as input a ``Schedule`` and either a pulse ``Backend``, or a ``CmdDef`` which relates circuit ``Instruction`` objects on specific qubits to pulse Schedules and a ``meas_map`` which determines which measurements must occur together."
msgstr ""

#: ../../release_notes.rst:20722
msgid "Scheduling example::"
msgstr ""

#: ../../release_notes.rst:20734
msgid "The scheduler currently supports two scheduling policies, `as_late_as_possible` (``alap``) and `as_soon_as_possible` (``asap``), which respectively schedule pulse instructions to occur as late as possible or as soon as possible across qubits in a circuit. The scheduling policy may be selected with the input argument ``method``, for example::"
msgstr ""

#: ../../release_notes.rst:20743
msgid "It is easy to use a pulse ``Schedule`` within a ``QuantumCircuit`` by mapping it to a custom circuit instruction such as a gate which may be used in a ``QuantumCircuit``. To do this, first, define the custom gate and then add an entry into the ``CmdDef`` for the gate, for each qubit that the gate will be applied to. The gate can then be used in the ``QuantumCircuit``. At scheduling time the gate will be mapped to the underlying pulse schedule. Using this technique allows easy integration with preexisting qiskit modules such as Ignis."
msgstr ""

#: ../../release_notes.rst:20782
msgid "The feature for transpiling in parallel when ``passmanager.run(...)`` is invoked with more than one circuit is not supported under Windows. See `#2988 <https://github.com/Qiskit/qiskit-terra/issues/2988>`__ for more details."
msgstr ""

#: ../../release_notes.rst:20793
msgid "The ``qiskit.pulse.channels.SystemTopology`` class was used as a helper class for ``PulseChannelSpec``. It has been removed since with the deprecation of ``PulseChannelSpec`` and changes to ``BackendConfiguration`` make it unnecessary."
msgstr ""

#: ../../release_notes.rst:20798
msgid "The previously deprecated representation of qubits and classical bits as tuple, which was deprecated in the 0.9 release, has been removed. The use of ``Qubit`` and ``Clbit`` objects is the new way to represent qubits and classical bits."
msgstr ""

#: ../../release_notes.rst:20803
msgid "The previously deprecated representation of the basis set as single string has been removed. A list of strings is the new preferred way."
msgstr ""

#: ../../release_notes.rst:20806
msgid "The method ``BaseModel.as_dict``, which was deprecated in the 0.9 release, has been removed in favor of the method ``BaseModel.to_dict``."
msgstr ""

#: ../../release_notes.rst:20809
msgid "In PulseDefaults (accessed normally as backend.defaults()), ``qubit_freq_est`` and ``meas_freq_est`` are now returned in Hz rather than GHz. This means the new return values are 1e9 * their previous value."
msgstr ""

#: ../../release_notes.rst:20813
msgid "`dill <https://pypi.org/project/dill/>`__ was added as a requirement. This is needed to enable running ``passmanager.run()`` in parallel for more than one circuit."
msgstr ""

#: ../../release_notes.rst:20817
msgid "The previously deprecated gate ``UBase``, which was deprecated in the 0.9 release, has been removed. The gate ``U3Gate`` should be used instead."
msgstr ""

#: ../../release_notes.rst:20821
msgid "The previously deprecated gate ``CXBase``, which was deprecated in the 0.9 release, has been removed. The gate ``CnotGate`` should be used instead."
msgstr ""

#: ../../release_notes.rst:20825
msgid "The instruction ``snapshot`` used to implicitly convert the ``label`` parameter to string. That conversion has been removed and an error is raised if a string is not provided."
msgstr ""

#: ../../release_notes.rst:20829
msgid "The previously deprecated gate ``U0Gate``, which was deprecated in the 0.9 release, has been removed. The gate ``IdGate`` should be used instead to insert delays."
msgstr ""

#: ../../release_notes.rst:20839
msgid "The ``qiskit.pulse.CmdDef`` class has been deprecated. Instead you should use the ``qiskit.pulse.InstructionScheduleMap``. The ``InstructionScheduleMap`` object for a pulse enabled system can be accessed at ``backend.defaults().instruction_schedules``."
msgstr ""

#: ../../release_notes.rst:20844
msgid "``PulseChannelSpec`` is being deprecated. Use ``BackendConfiguration`` instead. The backend configuration is accessed normally as ``backend.configuration()``. The config has been extended with most of the functionality of PulseChannelSpec, with some modifications as follows, where `0` is an exemplary qubit index::"
msgstr ""

#: ../../release_notes.rst:20855
msgid "Now, if there is an attempt to get a channel for a qubit which does not exist for the device, a ``BackendConfigurationError`` will be raised with a helpful explanation."
msgstr ""

#: ../../release_notes.rst:20859
msgid "The methods ``memoryslots`` and ``registerslots`` of the PulseChannelSpec have not been migrated to the backend configuration. These classical resources are not restrained by the physical configuration of a backend system. Please instantiate them directly::"
msgstr ""

#: ../../release_notes.rst:20867
msgid "The ``qubits`` method is not migrated to backend configuration. The result of ``qubits`` can be built as such::"
msgstr ""

#: ../../release_notes.rst:20872
msgid "``Qubit`` within ``pulse.channels`` has been deprecated. They should not be used. It is possible to obtain channel <=> qubit mappings through the BackendConfiguration (or backend.configuration())."
msgstr ""

#: ../../release_notes.rst:20876
msgid "The function ``qiskit.visualization.circuit_drawer.qx_color_scheme()`` has been deprecated. This function is no longer used internally and doesn't reflect the current IBM QX style. If you were using this function to generate a style dict locally you must save the output from it and use that dictionary directly."
msgstr ""

#: ../../release_notes.rst:20882
msgid "The Exception ``TranspilerAccessError`` has been deprecated. An alternative function ``TranspilerError`` can be used instead to provide the same functionality. This alternative function provides the exact same functionality but with greater generality."
msgstr ""

#: ../../release_notes.rst:20887
msgid "Buffers in Pulse are deprecated. If a nonzero buffer is supplied, a warning will be issued with a reminder to use a Delay instead. Other options would include adding samples to a pulse instruction which are (0.+0.j) or setting the start time of the next pulse to ``schedule.duration + buffer``."
msgstr ""

#: ../../release_notes.rst:20892
msgid "Passing in ``sympy.Basic``, ``sympy.Expr`` and ``sympy.Matrix`` types as instruction parameters are deprecated and will be removed in a future release. You'll need to convert the input to one of the supported types which are:"
msgstr ""

#: ../../release_notes.rst:20909
msgid "The Collect2qBlocks and CommutationAnalysis passes in the transpiler had been unable to process circuits containing Parameterized gates, preventing Parameterized circuits from being transpiled at optimization_level 2 or above. These passes have been corrected to treat Parameterized gates as opaque."
msgstr ""

#: ../../release_notes.rst:20915
msgid "The align_measures function had an issue where Measure stimulus pulses weren't properly aligned with Acquire pulses, resulting in an error. This has been fixed."
msgstr ""

#: ../../release_notes.rst:20919
msgid "Uses of ``numpy.random.seed`` have been removed so that calls of qiskit functions do not affect results of future calls to ``numpy.random``"
msgstr ""

#: ../../release_notes.rst:20922
msgid "Fixed race condition occurring in the job monitor when ``job.queue_position()`` returns ``None``. ``None`` is a valid return from ``job.queue_position()``."
msgstr ""

#: ../../release_notes.rst:20926
msgid "Backend support for ``memory=True`` now checked when that kwarg is passed. ``QiskitError`` results if not supported."
msgstr ""

#: ../../release_notes.rst:20929
msgid "When transpiling without a coupling map, there were no check in the amount of qubits of the circuit to transpile. Now the transpile process checks that the backend has enough qubits to allocate the circuit."
msgstr ""

#: ../../release_notes.rst:20939
msgid "The ``qiskit.result.marginal_counts()`` function replaces a similar utility function in qiskit-ignis ``qiskit.ignis.verification.tomography.marginal_counts()``, which will be deprecated in a future qiskit-ignis release."
msgstr ""

#: ../../release_notes.rst:20944
msgid "All sympy parameter output type support have been been removed (or deprecated as noted) from qiskit-terra. This includes sympy type parameters in ``QuantumCircuit`` objects, qasm ast nodes, or ``Qobj`` objects."
msgstr ""

#: ../../release_notes.rst:20950 ../../release_notes.rst:21473
#: ../../release_notes.rst:22200
msgid "Aer 0.3"
msgstr ""

#: ../../release_notes.rst:20965
msgid "IBM Q Provider 0.4"
msgstr ""

#: ../../release_notes.rst:20970
msgid "The 0.4.0 release is the first release that makes use of all the features of the new IBM Q API. In particular, the ``IBMQJob`` class has been revamped in order to be able to retrieve more information from IBM Q, and a Job Manager class has been added for allowing a higher-level and more seamless usage of large or complex jobs. If you have not upgraded from the legacy IBM Q Experience or QConsole yet, please ensure to revisit the release notes for IBM Q Provider 0.3 (Qiskit 0.11) for more details on how to make the transition. The legacy accounts will no longer be supported as of this release."
msgstr ""

#: ../../release_notes.rst:20984
msgid "Job modifications"
msgstr ""

#: ../../release_notes.rst:20986
msgid "The ``IBMQJob`` class has been revised, and now mimics more closely to the contents of a remote job along with new features:"
msgstr ""

#: ../../release_notes.rst:20989
msgid "You can now assign a name to a job, by specifying ``IBMQBackend.run(..., job_name='...')`` when submitting a job. This name can be retrieved via ``IBMQJob.name()`` and can be used for filtering."
msgstr ""

#: ../../release_notes.rst:20992
msgid "Jobs can now be shared with other users at different levels (global, per hub, group or project) via an optional ``job_share_level`` parameter when submitting the job."
msgstr ""

#: ../../release_notes.rst:20995
msgid "``IBMQJob`` instances now have more attributes, reflecting the contents of the remote IBM Q jobs. This implies that new attributes introduced by the IBM Q API will automatically and immediately be available for use (for example, ``job.new_api_attribute``). The new attributes will be promoted to methods when they are considered stable (for example, ``job.name()``)."
msgstr ""

#: ../../release_notes.rst:21000
msgid "``.error_message()`` returns more information on why a job failed."
msgstr ""

#: ../../release_notes.rst:21001
msgid "``.queue_position()`` accepts a ``refresh`` parameter for forcing an update."
msgstr ""

#: ../../release_notes.rst:21002
msgid "``.result()`` accepts an optional ``partial`` parameter, for returning partial results, if any, of jobs that failed. Be aware that ``Result`` methods, such as ``get_counts()`` will raise an exception if applied on experiments that failed."
msgstr ""

#: ../../release_notes.rst:21007
msgid "Please note that the changes include some low-level modifications of the class. If you were creating the instances manually, note that:"
msgstr ""

#: ../../release_notes.rst:21010
msgid "the signature of the constructor has changed to account for the new features."
msgstr ""

#: ../../release_notes.rst:21011
msgid "the ``.submit()`` method can no longer be called directly, and jobs are expected to be submitted either via the synchronous ``IBMQBackend.run()`` or via the Job Manager."
msgstr ""

#: ../../release_notes.rst:21016
msgid "Job Manager"
msgstr ""

#: ../../release_notes.rst:21018
msgid "A new Job Manager (``IBMQJobManager``) has been introduced, as a higher-level mechanism for handling jobs composed of multiple circuits or pulse schedules. The Job Manager aims to provide a transparent interface, intelligently splitting the input into efficient units of work and taking full advantage of the different components. It will be expanded on upcoming versions, and become the recommended entry point for job submission."
msgstr ""

#: ../../release_notes.rst:21025
msgid "Its ``.run()`` method receives a list of circuits or pulse schedules, and returns a ``ManagedJobSet instance``, which can then be used to track the statuses and results of these jobs. For example::"
msgstr ""

#: ../../release_notes.rst:21053
msgid "provider.backends modifications"
msgstr ""

#: ../../release_notes.rst:21055
msgid "The ``provider.backends`` member, which was previously a function that returned a list of backends, has been promoted to a service. This implies that it can be used both in the previous way, as a ``.backends()`` method, and also as a ``.backends`` attribute with expanded capabilities:"
msgstr ""

#: ../../release_notes.rst:21060
msgid "it contains the existing backends from that provider as attributes, which can be used for autocompletion. For example::"
msgstr ""

#: ../../release_notes.rst:21065
msgid "is equivalent to::"
msgstr ""

#: ../../release_notes.rst:21069
msgid "the ``provider.backends.jobs()`` and ``provider.backends.retrieve_job()`` methods can be used for retrieving provider-wide jobs."
msgstr ""

#: ../../release_notes.rst:21074
msgid "Other changes"
msgstr ""

#: ../../release_notes.rst:21076
msgid "The ``backend.properties()`` function now accepts an optional ``datetime`` parameter. If specified, the function returns the backend properties closest to, but older than, the specified datetime filter."
msgstr ""

#: ../../release_notes.rst:21079
msgid "Some ``warnings`` have been toned down to ``logger.warning`` messages."
msgstr ""

#: ../../release_notes.rst:21084
msgid "Qiskit 0.13.0"
msgstr ""

#: ../../release_notes.rst:21087
msgid "Terra 0.10.0"
msgstr ""

#: ../../release_notes.rst:21094
msgid "The 0.10.0 release includes several new features and bug fixes. The biggest change for this release is the addition of initial support for using Qiskit with trapped ion trap backends."
msgstr ""

#: ../../release_notes.rst:21104
msgid "Introduced new methods in ``QuantumCircuit`` which allows the seamless adding or removing of measurements at the end of a circuit."
msgstr ""

#: ../../release_notes.rst:21110
msgid "``measure_all()``"
msgstr ""

#: ../../release_notes.rst:21108
msgid "Adds a ``barrier`` followed by a ``measure`` operation to all qubits in the circuit. Creates a ``ClassicalRegister`` of size equal to the number of qubits in the circuit, which store the measurements."
msgstr ""

#: ../../release_notes.rst:21116
msgid "``measure_active()``"
msgstr ""

#: ../../release_notes.rst:21113
msgid "Adds a ``barrier`` followed by a ``measure`` operation to all active qubits in the circuit. A qubit is active if it has at least one other operation acting upon it. Creates a ``ClassicalRegister`` of size equal to the number of active qubits in the circuit, which store the measurements."
msgstr ""

#: ../../release_notes.rst:21123
msgid "``remove_final_measurements()``"
msgstr ""

#: ../../release_notes.rst:21119
msgid "Removes all final measurements and preceeding ``barrier`` from a circuit. A measurement is considered \"final\" if it is not followed by any other operation, excluding barriers and other measurements. After the measurements are removed, if all of the classical bits in the ``ClassicalRegister`` are idle (have no operations attached to them), then the ``ClassicalRegister`` is removed."
msgstr ""

#: ../../release_notes.rst:21186
msgid "Initial support for executing experiments on ion trap backends has been added."
msgstr ""

#: ../../release_notes.rst:21189
msgid "An Rxx gate (rxx) and a global Mølmer–Sørensen gate (ms) have been added to the standard gate set."
msgstr ""

#: ../../release_notes.rst:21192
msgid "A Cnot to Rxx/Rx/Ry decomposer ``cnot_rxx_decompose`` and a single qubit Euler angle decomposer ``OneQubitEulerDecomposer`` have been added to the ``quantum_info.synthesis`` module."
msgstr ""

#: ../../release_notes.rst:21196
msgid "A transpiler pass ``MSBasisDecomposer`` has been added to unroll circuits defined over U3 and Cnot gates into a circuit defined over Rxx,Ry and Rx. This pass will be included in preset pass managers for backends which include the 'rxx' gate in their supported basis gates."
msgstr ""

#: ../../release_notes.rst:21201
msgid "The backends in ``qiskit.test.mock`` now contain a snapshot of real device calibration data. This is accessible via the ``properties()`` method for each backend. This can be used to test any code that depends on backend properties, such as noise-adaptive transpiler passes or device noise models for simulation. This will create a faster testing and development cycle without the need to go to live backends."
msgstr ""

#: ../../release_notes.rst:21208
msgid "Allows the Result class to return partial results. If a valid result schema is loaded that contains some experiments which succeeded and some which failed, this allows accessing the data from experiments that succeeded, while raising an exception for experiments that failed and displaying the appropriate error message for the failed results."
msgstr ""

#: ../../release_notes.rst:21214
msgid "An ``ax`` kwarg has been added to the following visualization functions:"
msgstr ""

#: ../../release_notes.rst:21216
msgid "``qiskit.visualization.plot_histogram``"
msgstr ""

#: ../../release_notes.rst:21217
msgid "``qiskit.visualization.plot_state_paulivec``"
msgstr ""

#: ../../release_notes.rst:21218
msgid "``qiskit.visualization.plot_state_qsphere``"
msgstr ""

#: ../../release_notes.rst:21219
msgid "``qiskit.visualization.circuit_drawer`` (``mpl`` backend only)"
msgstr ""

#: ../../release_notes.rst:21220
msgid "``qiskit.QuantumCircuit.draw`` (``mpl`` backend only)"
msgstr ""

#: ../../release_notes.rst:21222
msgid "This kwarg is used to pass in a ``matplotlib.axes.Axes`` object to the visualization functions. This enables integrating these visualization functions into a larger visualization workflow. Also, if an `ax` kwarg is specified then there is no return from the visualization functions."
msgstr ""

#: ../../release_notes.rst:21227
msgid "An ``ax_real`` and ``ax_imag`` kwarg has been added to the following visualization functions:"
msgstr ""

#: ../../release_notes.rst:21230
msgid "``qiskit.visualization.plot_state_hinton``"
msgstr ""

#: ../../release_notes.rst:21231
msgid "``qiskit.visualization.plot_state_city``"
msgstr ""

#: ../../release_notes.rst:21233
msgid "These new kargs work the same as the newly added ``ax`` kwargs for other visualization functions. However because these plots use two axes (one for the real component, the other for the imaginary component). Having two kwargs also provides the flexibility to only generate a visualization for one of the components instead of always doing both. For example::"
msgstr ""

#: ../../release_notes.rst:21246
msgid "will only generate a plot of the real component."
msgstr ""

#: ../../release_notes.rst:21248
msgid "A given pass manager now can be edited with the new method `replace`. This method allows to replace a particular stage in a pass manager, which can be handy when dealing with preset pass managers. For example, let's edit the layout selector of the pass manager used at optimization level 0:"
msgstr ""

#: ../../release_notes.rst:21269
msgid "The layout selection is set in the stage `[1]`. Let's replace it with `DenseLayout`:"
msgstr ""

#: ../../release_notes.rst:21285
msgid "If you want to replace it without any condition, you can use set-item shortcut:"
msgstr ""

#: ../../release_notes.rst:21299 ../../release_notes.rst:21784
msgid "Introduced a new pulse command ``Delay`` which may be inserted into a pulse ``Schedule``. This command accepts a ``duration`` and may be added to any ``Channel``. Other commands may not be scheduled on a channel during a delay."
msgstr ""

#: ../../release_notes.rst:21303 ../../release_notes.rst:21788
msgid "The delay can be added just like any other pulse command. For example::"
msgstr ""

#: ../../release_notes.rst:21324
msgid "One may also pass additional channels to be padded and a time to pad until, for example::"
msgstr ""

#: ../../release_notes.rst:21353
msgid "Assignments and modifications to the ``data`` attribute of ``qiskit.QuantumCircuit`` objects are now validated following the same rules used throughout the ``QuantumCircuit`` API. This was done to improve the performance of the circuits API since we can now assume the ``data`` attribute is in a known format. If you were manually modifying the ``data`` attribute of a circuit object before this may no longer work if your modifications resulted in a data structure other than the list of instructions with context in the format ``[(instruction, qargs, cargs)]``"
msgstr ""

#: ../../release_notes.rst:21362
msgid "The transpiler default passmanager for optimization level 2 now uses the ``DenseLayout`` layout selection mechanism by default instead of ``NoiseAdaptiveLayout``. The ``Denselayout`` pass has also been modified to be made noise-aware."
msgstr ""

#: ../../release_notes.rst:21367
msgid "The deprecated ``DeviceSpecification`` class has been removed. Instead you should use the ``PulseChannelSpec``. For example, you can run something like::"
msgstr ""

#: ../../release_notes.rst:21374
msgid "The deprecated module ``qiskit.pulse.ops`` has been removed. Use ``Schedule`` and ``Instruction`` methods directly. For example, rather than::"
msgstr ""

#: ../../release_notes.rst:21381
msgid "Instead please use::"
msgstr ""

#: ../../release_notes.rst:21386
msgid "This same pattern applies to other ``ops`` functions: ``insert``, ``shift``, ``append``, and ``flatten``."
msgstr ""

#: ../../release_notes.rst:21395
msgid "Using the ``control`` property of ``qiskit.circuit.Instruction`` for classical control is now deprecated. In the future this property will be used for quantum control. Classically conditioned operations will instead be handled by the ``condition`` property of ``qiskit.circuit.Instruction``."
msgstr ""

#: ../../release_notes.rst:21400
msgid "Support for setting ``qiskit.circuit.Instruction`` parameters with an object of type ``qiskit.qasm.node.Node`` has been deprecated. ``Node`` objects that were previously used as parameters should be converted to a supported type prior to initializing a new ``Instruction`` object or calling the ``Instruction.params`` setter. Supported types are ``int``, ``float``, ``complex``, ``str``, ``qiskit.circuit.ParameterExpression``, or ``numpy.ndarray``."
msgstr ""

#: ../../release_notes.rst:21408
msgid "In the qiskit 0.9.0 release the representation of bits (both qubits and classical bits) changed from tuples of the form ``(register, index)`` to be instances of the classes ``qiskit.circuit.Qubit`` and ``qiskit.circuit.Clbit``. For backwards compatibility comparing the equality between a legacy tuple and the bit classes was supported as everything transitioned from tuples to being objects. This support is now deprecated and will be removed in the future. Everything should use the bit classes instead of tuples moving forward."
msgstr ""

#: ../../release_notes.rst:21417
msgid "When the ``mpl`` output is used for either ``qiskit.QuantumCircuit.draw()`` or ``qiskit.visualization.circuit_drawer()`` and the ``style`` kwarg is used, passing in unsupported dictionary keys as part of the ``style``` dictionary is now deprecated. Where these unknown arguments were previously silently ignored, in the future, unsupported keys will raise an exception."
msgstr ""

#: ../../release_notes.rst:21423
msgid "The ``line length`` kwarg for the ``qiskit.QuantumCircuit.draw()`` method and the ``qiskit.visualization.circuit_drawer()`` function with the text output mode is deprecated. It has been replaced by the ``fold`` kwarg which will behave identically for the text output mode (but also now supports the mpl output mode too). ``line_length`` will be removed in a future release so calls should be updated to use ``fold`` instead."
msgstr ""

#: ../../release_notes.rst:21430
msgid "The ``fold`` field in the ``style`` dict kwarg for the ``qiskit.QuantumCircuit.draw()`` method and the ``qiskit.visualization.circuit_drawer()`` function has been deprecated. It has been replaced by the ``fold`` kwarg on both functions. This kwarg behaves identically to the field in the style dict."
msgstr ""

#: ../../release_notes.rst:21442
msgid "Instructions layering which underlies all types of circuit drawing has changed to address right/left justification. This sometimes results in output which is topologically equivalent to the rendering in prior versions but visually different than previously rendered. Fixes `issue #2802 <https://github.com/Qiskit/qiskit-terra/issues/2802>`_"
msgstr ""

#: ../../release_notes.rst:21448
msgid "Add ``memory_slots`` to ``QobjExperimentHeader`` of pulse Qobj. This fixes a bug in the data format of ``meas_level=2`` results of pulse experiments. Measured quantum states are returned as a bit string with zero padding based on the number set for ``memory_slots``."
msgstr ""

#: ../../release_notes.rst:21453
msgid "Fixed the visualization of the rzz gate in the latex circuit drawer to match the cu1 gate to reflect the symmetry in the rzz gate. The fix is based on the cds command of the qcircuit latex package. Fixes `issue #1957 <https://github.com/Qiskit/qiskit-terra/issues/1957>`_"
msgstr ""

#: ../../release_notes.rst:21464
msgid "``matplotlib.figure.Figure`` objects returned by visualization functions are no longer always closed by default. Instead the returned figure objects are only closed if the configured matplotlib backend is an inline jupyter backend(either set with ``%matplotlib inline`` or ``%matplotlib notebook``). Output figure objects are still closed with these backends to avoid duplicate outputs in jupyter notebooks (which is why the ``Figure.close()`` were originally added)."
msgstr ""

#: ../../release_notes.rst:21488 ../../release_notes.rst:22340
#: ../../release_notes.rst:22374 ../../release_notes.rst:22424
msgid "IBM Q Provider 0.3"
msgstr ""

#: ../../release_notes.rst:21494
msgid "Qiskit 0.12.0"
msgstr ""

#: ../../release_notes.rst:21499
msgid "Terra 0.9"
msgstr ""

#: ../../release_notes.rst:21506
msgid "The 0.9 release includes many new features and many bug fixes. The biggest changes for this release are new debugging capabilities for PassManagers. This includes a function to visualize a PassManager, the ability to add a callback function to a PassManager, and logging of passes run in the PassManager. Additionally, this release standardizes the way that you can set an initial layout for your circuit. So now you can leverage ``initial_layout`` the kwarg parameter on ``qiskit.compiler.transpile()`` and ``qiskit.execute()`` and the qubits in the circuit will get laid out on the desire qubits on the device. Visualization of circuits will now also show this clearly when visualizing a circuit that has been transpiled with a layout."
msgstr ""

#: ../../release_notes.rst:21522
msgid "A ``DAGCircuit`` object (i.e. the graph representation of a QuantumCircuit where operation dependencies are explicit) can now be visualized with the ``.draw()`` method. This is in line with Qiskit's philosophy of easy visualization. Other objects which support a ``.draw()`` method are ``QuantumCircuit``, ``PassManager``, and ``Schedule``."
msgstr ""

#: ../../release_notes.rst:21528
msgid "Added a new visualization function ``qiskit.visualization.plot_error_map()`` to plot the error map for a given backend. It takes in a backend object from the qiskit-ibmq-provider and will plot the current error map for that device."
msgstr ""

#: ../../release_notes.rst:21533
msgid "Both ``qiskit.QuantumCircuit.draw()`` and ``qiskit.visualization.circuit_drawer()`` now support annotating the qubits in the visualization with layout information. If the ``QuantumCircuit`` object being drawn includes layout metadata (which is normally only set on the circuit output from ``transpile()`` calls) then by default that layout will be shown on the diagram. This is done for all circuit drawer backends. For example::"
msgstr ""

#: ../../release_notes.rst:21562
msgid "will yield a diagram like::"
msgstr ""

#: ../../release_notes.rst:21597
msgid "If you do not want the layout to be shown on transpiled circuits (or any other circuits with a layout set) there is a new boolean kwarg for both functions, ``with_layout`` (which defaults ``True``), which when set ``False`` will disable the layout annotation in the output circuits."
msgstr ""

#: ../../release_notes.rst:21602
msgid "A new analysis pass ``CountOpsLongest`` was added to retrieve the number of operations on the longest path of the DAGCircuit. When used it will add a ``count_ops_longest_path`` key to the property set dictionary. You can add it to your a passmanager with something like::"
msgstr ""

#: ../../release_notes.rst:21614
msgid "and then access the longest path via the property set value with something like::"
msgstr ""

#: ../../release_notes.rst:21622
msgid "which will set a condition on that pass based on the longest path."
msgstr ""

#: ../../release_notes.rst:21624
msgid "Two new functions, ``sech()`` and ``sech_deriv()`` were added to the pulse library module ``qiskit.pulse.pulse_lib`` for creating an unnormalized hyperbolic secant ``SamplePulse`` object and an unnormalized hyperbolic secant derviative ``SamplePulse`` object respectively."
msgstr ""

#: ../../release_notes.rst:21629
msgid "A new kwarg option ``vertical_compression`` was added to the ``QuantumCircuit.draw()`` method and the ``qiskit.visualization.circuit_drawer()`` function. This option only works with the ``text`` backend. This option can be set to either ``high``, ``medium`` (the default), or ``low`` to adjust how much vertical space is used by the output visualization."
msgstr ""

#: ../../release_notes.rst:21636
msgid "A new kwarg boolean option ``idle_wires`` was added to the ``QuantumCircuit.draw()`` method and the ``qiskit.visualization.circuit_drawer()`` function. It works for all drawer backends. When ``idle_wires`` is set False in a drawer call the drawer will not draw any bits that do not have any circuit elements in the output quantum circuit visualization."
msgstr ""

#: ../../release_notes.rst:21643
msgid "A new PassManager visualizer function ``qiskit.visualization.pass_mamanger_drawer()`` was added. This function takes in a PassManager object and will generate a flow control diagram of all the passes run in the PassManager."
msgstr ""

#: ../../release_notes.rst:21648
msgid "When creating a PassManager you can now specify a callback function that if specified will be run after each pass is executed. This function gets passed a set of kwargs on each call with the state of the pass manager after each pass execution. Currently these kwargs are:"
msgstr ""

#: ../../release_notes.rst:21653
msgid "``pass_`` (``Pass``): the pass being run"
msgstr ""

#: ../../release_notes.rst:21654
msgid "``dag`` (``DAGCircuit``): the dag output of the pass"
msgstr ""

#: ../../release_notes.rst:21655
msgid "``time`` (``float``): the time to execute the pass"
msgstr ""

#: ../../release_notes.rst:21656
msgid "``property_set`` (``PropertySet``): the property set"
msgstr ""

#: ../../release_notes.rst:21657
msgid "``count`` (``int``): the index for the pass execution"
msgstr ""

#: ../../release_notes.rst:21659
msgid "However, it's worth noting that while these arguments are set for the 0.9 release they expose the internals of the pass manager and are subject to change in future release."
msgstr ""

#: ../../release_notes.rst:21663
msgid "For example you can use this to create a callback function that will visualize the circuit output after each pass is executed::"
msgstr ""

#: ../../release_notes.rst:21673
msgid "Additionally you can specify the callback function when using ``qiskit.compiler.transpile()``::"
msgstr ""

#: ../../release_notes.rst:21683
msgid "A new method ``filter()`` was added to the ``qiskit.pulse.Schedule`` class. This enables filtering the instructions in a schedule. For example, filtering by instruction type::"
msgstr ""

#: ../../release_notes.rst:21697
msgid "Additional decomposition methods for several types of gates. These methods will use different decomposition techniques to break down a gate into a sequence of CNOTs and single qubit gates. The following methods are added:"
msgstr ""

#: ../../release_notes.rst:21703
msgid "Method"
msgstr ""

#: ../../release_notes.rst:21703
msgid "Description"
msgstr ""

#: ../../release_notes.rst:21705
msgid "``QuantumCircuit.iso()``"
msgstr ""

#: ../../release_notes.rst:21705
msgid "Add an arbitrary isometry from m to n qubits to a circuit. This allows for attaching arbitrary unitaries on n qubits (m=n) or to prepare any state of n qubits (m=0)"
msgstr ""

#: ../../release_notes.rst:21711
msgid "``QuantumCircuit.diag_gate()``"
msgstr ""

#: ../../release_notes.rst:21711
msgid "Add a diagonal gate to the circuit"
msgstr ""

#: ../../release_notes.rst:21713
msgid "``QuantumCircuit.squ()``"
msgstr ""

#: ../../release_notes.rst:21713
msgid "Decompose an arbitrary 2x2 unitary into three rotation gates and add to a circuit"
msgstr ""

#: ../../release_notes.rst:21717
msgid "``QuantumCircuit.ucg()``"
msgstr ""

#: ../../release_notes.rst:21717
msgid "Attach an uniformly controlled gate (also called a multiplexed gate) to a circuit"
msgstr ""

#: ../../release_notes.rst:21721
msgid "``QuantumCircuit.ucx()``"
msgstr ""

#: ../../release_notes.rst:21721
msgid "Attach a uniformly controlled (also called multiplexed) Rx rotation gate to a circuit"
msgstr ""

#: ../../release_notes.rst:21725
msgid "``QuantumCircuit.ucy()``"
msgstr ""

#: ../../release_notes.rst:21725
msgid "Attach a uniformly controlled (also called multiplexed) Ry rotation gate to a circuit"
msgstr ""

#: ../../release_notes.rst:21729
msgid "``QuantumCircuit.ucz()``"
msgstr ""

#: ../../release_notes.rst:21729
msgid "Attach a uniformly controlled (also called multiplexed) Rz rotation gate to a circuit"
msgstr ""

#: ../../release_notes.rst:21734
msgid "Addition of Gray-Synth and Patel–Markov–Hayes algorithms for synthesis of CNOT-Phase and CNOT-only linear circuits. These functions allow the synthesis of circuits that consist of only CNOT gates given a linear function or a circuit that consists of only CNOT and phase gates given a matrix description."
msgstr ""

#: ../../release_notes.rst:21740
msgid "A new function ``random_circuit`` was added to the ``qiskit.circuit.random`` module. This function will generate a random circuit of a specified size by randomly selecting different gates and adding them to the circuit. For example, you can use this to generate a 5-qubit circuit with a depth of 10 using::"
msgstr ""

#: ../../release_notes.rst:21750
msgid "A new kwarg ``output_names`` was added to the ``qiskit.compiler.transpile()`` function. This kwarg takes in a string or a list of strings and uses those as the value of the circuit name for the output circuits that get returned by the ``transpile()`` call. For example::"
msgstr ""

#: ../../release_notes.rst:21761
msgid "the ``name`` attribute on tcirc_a and tcirc_b will be ``'Circuit A'`` and ``'Circuit B'`` respectively."
msgstr ""

#: ../../release_notes.rst:21764
msgid "A new method ``equiv()`` was added to the ``qiskit.quantum_info.Operator`` and ``qiskit.quantum_info.Statevector`` classes. These methods are used to check whether a second ``Operator`` object or ``Statevector`` is equivalent up to global phase."
msgstr ""

#: ../../release_notes.rst:21769
msgid "The user config file has several new options:"
msgstr ""

#: ../../release_notes.rst:21771
msgid "The ``circuit_drawer`` field now accepts an `auto` value. When set as the value for the ``circuit_drawer`` field the default drawer backend will be `mpl` if it is available, otherwise the `text` backend will be used."
msgstr ""

#: ../../release_notes.rst:21775
msgid "A new field ``circuit_mpl_style`` can be used to set the default style used by the matplotlib circuit drawer. Valid values for this field are ``bw`` and ``default`` to set the default to a black and white or the default color style respectively."
msgstr ""

#: ../../release_notes.rst:21779
msgid "A new field ``transpile_optimization_level`` can be used to set the default transpiler optimization level to use for calls to ``qiskit.compiler.transpile()``. The value can be set to either 0, 1, 2, or 3."
msgstr ""

#: ../../release_notes.rst:21804
msgid "The previously deprecated ``qiskit._util`` module has been removed. ``qiskit.util`` should be used instead."
msgstr ""

#: ../../release_notes.rst:21807
msgid "The ``QuantumCircuit.count_ops()`` method now returns an ``OrderedDict`` object instead of a ``dict``. This should be compatible for most use cases since ``OrderedDict`` is a ``dict`` subclass. However type checks and other class checks might need to be updated."
msgstr ""

#: ../../release_notes.rst:21812
msgid "The ``DAGCircuit.width()`` method now returns the total number quantum bits and classical bits. Before it would only return the number of quantum bits. If you require just the number of quantum bits you can use ``DAGCircuit.num_qubits()`` instead."
msgstr ""

#: ../../release_notes.rst:21817
msgid "The function ``DAGCircuit.num_cbits()`` has been removed. Instead you can use ``DAGCircuit.num_clbits()``."
msgstr ""

#: ../../release_notes.rst:21820
msgid "Individual quantum bits and classical bits are no longer represented as ``(register, index)`` tuples. They are now instances of `Qubit` and `Clbit` classes. If you're dealing with individual bits make sure that you update any usage or type checks to look for these new classes instead of tuples."
msgstr ""

#: ../../release_notes.rst:21826
msgid "The preset passmanager classes ``qiskit.transpiler.preset_passmanagers.default_pass_manager`` and ``qiskit.transpiler.preset_passmanagers.default_pass_manager_simulator`` (which were the previous default pass managers for ``qiskit.compiler.transpile()`` calls) have been removed. If you were manually using this pass managers switch to the new default, ``qiskit.transpile.preset_passmanagers.level1_pass_manager``."
msgstr ""

#: ../../release_notes.rst:21834
msgid "The ``LegacySwap`` pass has been removed. If you were using it in a custom pass manager, it's usage can be replaced by the ``StochasticSwap`` pass, which is a faster more stable version. All the preset passmanagers have been updated to use ``StochasticSwap`` pass instead of the ``LegacySwap``."
msgstr ""

#: ../../release_notes.rst:21839
msgid "The following deprecated ``qiskit.dagcircuit.DAGCircuit`` methods have been removed:"
msgstr ""

#: ../../release_notes.rst:21842
msgid "``DAGCircuit.get_qubits()`` - Use ``DAGCircuit.qubits()`` instead"
msgstr ""

#: ../../release_notes.rst:21843
msgid "``DAGCircuit.get_bits()`` - Use ``DAGCircuit.clbits()`` instead"
msgstr ""

#: ../../release_notes.rst:21844
msgid "``DAGCircuit.qasm()`` - Use a combination of ``qiskit.converters.dag_to_circuit()`` and ``QuantumCircuit.qasm()``. For example::"
msgstr ""

#: ../../release_notes.rst:21853
msgid "``DAGCircuit.get_op_nodes()`` - Use ``DAGCircuit.op_nodes()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``op_nodes()`` instead of the list of tuples previously returned by ``get_op_nodes()``."
msgstr ""

#: ../../release_notes.rst:21857
msgid "``DAGCircuit.get_gate_nodes()`` - Use ``DAGCircuit.gate_nodes()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``gate_nodes()`` instead of the list of tuples previously returned by ``get_gate_nodes()``."
msgstr ""

#: ../../release_notes.rst:21861
msgid "``DAGCircuit.get_named_nodes()`` - Use ``DAGCircuit.named_nodes()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``named_nodes()`` instead of the list of node_ids previously returned by ``get_named_nodes()``."
msgstr ""

#: ../../release_notes.rst:21865
msgid "``DAGCircuit.get_2q_nodes()`` - Use ``DAGCircuit.twoQ_gates()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``twoQ_gates()`` instead of the list of data_dicts previously returned by ``get_2q_nodes()``."
msgstr ""

#: ../../release_notes.rst:21869
msgid "``DAGCircuit.get_3q_or_more_nodes()`` - Use ``DAGCircuit.threeQ_or_more_gates()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``threeQ_or_more_gates()`` instead of the list of tuples previously returned by ``get_3q_or_more_nodes()``."
msgstr ""

#: ../../release_notes.rst:21874
msgid "The following ``qiskit.dagcircuit.DAGCircuit`` methods had deprecated support for accepting a ``node_id`` as a parameter. This has been removed and now only ``DAGNode`` objects are accepted as input:"
msgstr ""

#: ../../release_notes.rst:21878
msgid "``successors()``"
msgstr ""

#: ../../release_notes.rst:21879
msgid "``predecessors()``"
msgstr ""

#: ../../release_notes.rst:21880
msgid "``ancestors()``"
msgstr ""

#: ../../release_notes.rst:21881
msgid "``descendants()``"
msgstr ""

#: ../../release_notes.rst:21882
msgid "``bfs_successors()``"
msgstr ""

#: ../../release_notes.rst:21883
msgid "``quantum_successors()``"
msgstr ""

#: ../../release_notes.rst:21884
msgid "``remove_op_node()``"
msgstr ""

#: ../../release_notes.rst:21885
msgid "``remove_ancestors_of()``"
msgstr ""

#: ../../release_notes.rst:21886
msgid "``remove_descendants_of()``"
msgstr ""

#: ../../release_notes.rst:21887
msgid "``remove_nonancestors_of()``"
msgstr ""

#: ../../release_notes.rst:21888
msgid "``remove_nondescendants_of()``"
msgstr ""

#: ../../release_notes.rst:21889
msgid "``substitute_node_with_dag()``"
msgstr ""

#: ../../release_notes.rst:21891
msgid "The ``qiskit.dagcircuit.DAGCircuit`` method ``rename_register()`` has been removed. This was unused by all the qiskit code. If you were relying on it externally you'll have to re-implement is an external function."
msgstr ""

#: ../../release_notes.rst:21895
msgid "The ``qiskit.dagcircuit.DAGCircuit`` property ``multi_graph`` has been removed. Direct access to the underlying ``networkx`` ``multi_graph`` object isn't supported anymore. The API provided by the ``DAGCircuit`` class should be used instead."
msgstr ""

#: ../../release_notes.rst:21900
msgid "The deprecated exception class ``qiskit.qiskiterror.QiskitError`` has been removed. Instead you should use ``qiskit.exceptions.QiskitError``."
msgstr ""

#: ../../release_notes.rst:21903
msgid "The boolean kwargs, ``ignore_requires`` and ``ignore_preserves`` from the ``qiskit.transpiler.PassManager`` constructor have been removed. These are no longer valid options."
msgstr ""

#: ../../release_notes.rst:21907
msgid "The module ``qiskit.tools.logging`` has been removed. This module was not used by anything and added nothing over the interfaces that Python's standard library ``logging`` module provides. If you want to set a custom formatter for logging use the standard library ``logging`` module instead."
msgstr ""

#: ../../release_notes.rst:21912
msgid "The ``CompositeGate`` class has been removed. Instead you should directly create a instruction object from a circuit and append that to your circuit. For example, you can run something like::"
msgstr ""

#: ../../release_notes.rst:21922
msgid "The previously deprecated kwargs, ``seed`` and ``config`` for ``qiskit.compiler.assemble()`` have been removed use ``seed_simulator`` and ``run_config`` respectively instead."
msgstr ""

#: ../../release_notes.rst:21926
msgid "The previously deprecated converters ``qiskit.converters.qobj_to_circuits()`` and ``qiskit.converters.circuits_to_qobj()`` have been removed. Use ``qiskit.assembler.disassemble()`` and ``qiskit.compiler.assemble()`` respectively instead."
msgstr ""

#: ../../release_notes.rst:21932
msgid "The previously deprecated kwarg ``seed_mapper`` for ``qiskit.compiler.transpile()`` has been removed. Instead you should use ``seed_transpiler``"
msgstr ""

#: ../../release_notes.rst:21936
msgid "The previously deprecated kwargs ``seed``, ``seed_mapper``, ``config``, and ``circuits`` for the ``qiskit.execute()`` function have been removed. Use ``seed_simulator``, ``seed_transpiler``, ``run_config``, and ``experiments`` arguments respectively instead."
msgstr ""

#: ../../release_notes.rst:21941
msgid "The previously deprecated ``qiskit.tools.qcvv`` module has been removed use qiskit-ignis instead."
msgstr ""

#: ../../release_notes.rst:21944
msgid "The previously deprecated functions ``qiskit.transpiler.transpile()`` and ``qiskit.transpiler.transpile_dag()`` have been removed. Instead you should use ``qiskit.compiler.transpile``. If you were using ``transpile_dag()`` this can be replaced by running::"
msgstr ""

#: ../../release_notes.rst:21953
msgid "The previously deprecated function ``qiskit.compile()`` has been removed instead you should use ``qiskit.compiler.transpile()`` and ``qiskit.compiler.assemble()``."
msgstr ""

#: ../../release_notes.rst:21957
#, python-format
msgid "The jupyter cell magic ``%%qiskit_progress_bar`` from ``qiskit.tools.jupyter`` has been changed to a line magic. This was done to better reflect how the magic is used and how it works. If you were using the ``%%qiskit_progress_bar`` cell magic in an existing notebook, you will have to update this to be a line magic by changing it to be ``%qiskit_progress_bar`` instead. Everything else should behave identically."
msgstr ""

#: ../../release_notes.rst:21965
msgid "The deprecated function ``qiskit.tools.qi.qi.random_unitary_matrix()`` has been removed. You should use the ``qiskit.quantum_info.random.random_unitary()`` function instead."
msgstr ""

#: ../../release_notes.rst:21969
msgid "The deprecated function ``qiskit.tools.qi.qi.random_density_matrix()`` has been removed. You should use the ``qiskit.quantum_info.random.random_density_matrix()`` function instead."
msgstr ""

#: ../../release_notes.rst:21974
msgid "The deprecated function ``qiskit.tools.qi.qi.purity()`` has been removed. You should the ``qiskit.quantum_info.purity()`` function instead."
msgstr ""

#: ../../release_notes.rst:21977
msgid "The deprecated ``QuantumCircuit._attach()`` method has been removed. You should use ``QuantumCircuit.append()`` instead."
msgstr ""

#: ../../release_notes.rst:21980
msgid "The ``qiskit.qasm.Qasm`` method ``get_filename()`` has been removed. You can use the ``return_filename()`` method instead."
msgstr ""

#: ../../release_notes.rst:21983
msgid "The deprecated ``qiskit.mapper`` module has been removed. The list of functions and classes with their alternatives are:"
msgstr ""

#: ../../release_notes.rst:21986
msgid "``qiskit.mapper.CouplingMap``: ``qiskit.transpiler.CouplingMap`` should be used instead."
msgstr ""

#: ../../release_notes.rst:21988
msgid "``qiskit.mapper.Layout``: ``qiskit.transpiler.Layout`` should be used instead"
msgstr ""

#: ../../release_notes.rst:21990
msgid "``qiskit.mapper.compiling.euler_angles_1q()``: ``qiskit.quantum_info.synthesis.euler_angles_1q()`` should be used instead"
msgstr ""

#: ../../release_notes.rst:21993
msgid "``qiskit.mapper.compiling.two_qubit_kak()``: ``qiskit.quantum_info.synthesis.two_qubit_cnot_decompose()`` should be used instead."
msgstr ""

#: ../../release_notes.rst:21997
msgid "The deprecated exception classes ``qiskit.mapper.exceptions.CouplingError`` and ``qiskit.mapper.exceptions.LayoutError`` don't have an alternative since they serve no purpose without a ``qiskit.mapper`` module."
msgstr ""

#: ../../release_notes.rst:22001
msgid "The ``qiskit.pulse.samplers`` module has been moved to ``qiskit.pulse.pulse_lib.samplers``. You will need to update imports of ``qiskit.pulse.samplers`` to ``qiskit.pulse.pulse_lib.samplers``."
msgstr ""

#: ../../release_notes.rst:22005
msgid "`seaborn`_ is now a dependency for the function ``qiskit.visualization.plot_state_qsphere()``. It is needed to generate proper angular color maps for the visualization. The ``qiskit-terra[visualization]`` extras install target has been updated to install ``seaborn>=0.9.0`` If you are using visualizations and specifically the ``plot_state_qsphere()`` function you can use that to install ``seaborn`` or just manually run ``pip install seaborn>=0.9.0``"
msgstr ""

#: ../../release_notes.rst:22015
msgid "The previously deprecated functions ``qiksit.visualization.plot_state`` and ``qiskit.visualization.iplot_state`` have been removed. Instead you should use the specific function for each plot type. You can refer to the following tables to map the deprecated functions to their equivalent new ones:"
msgstr ""

#: ../../release_notes.rst:22022 ../../release_notes.rst:23164
#: ../../release_notes.rst:23444 ../../release_notes.rst:23481
msgid "Qiskit Terra 0.6"
msgstr ""

#: ../../release_notes.rst:22022 ../../release_notes.rst:23164
msgid "Qiskit Terra 0.7+"
msgstr ""

#: ../../release_notes.rst:22024 ../../release_notes.rst:23166
msgid "plot_state(rho)"
msgstr ""

#: ../../release_notes.rst:22024 ../../release_notes.rst:22025
#: ../../release_notes.rst:23166 ../../release_notes.rst:23167
msgid "plot_state_city(rho)"
msgstr ""

#: ../../release_notes.rst:22025 ../../release_notes.rst:23167
msgid "plot_state(rho, method='city')"
msgstr ""

#: ../../release_notes.rst:22026 ../../release_notes.rst:23168
msgid "plot_state(rho, method='paulivec')"
msgstr ""

#: ../../release_notes.rst:22026 ../../release_notes.rst:23168
msgid "plot_state_paulivec(rho)"
msgstr ""

#: ../../release_notes.rst:22027 ../../release_notes.rst:23169
msgid "plot_state(rho, method='qsphere')"
msgstr ""

#: ../../release_notes.rst:22027 ../../release_notes.rst:23169
msgid "plot_state_qsphere(rho)"
msgstr ""

#: ../../release_notes.rst:22028 ../../release_notes.rst:23170
msgid "plot_state(rho, method='bloch')"
msgstr ""

#: ../../release_notes.rst:22028 ../../release_notes.rst:23170
msgid "plot_bloch_multivector(rho)"
msgstr ""

#: ../../release_notes.rst:22029 ../../release_notes.rst:23171
msgid "plot_state(rho, method='hinton')"
msgstr ""

#: ../../release_notes.rst:22029 ../../release_notes.rst:23171
msgid "plot_state_hinton(rho)"
msgstr ""

#: ../../release_notes.rst:22032
msgid "The ``pylatexenc`` and ``pillow`` dependencies for the ``latex`` and ``latex_source`` circuit drawer backends are no longer listed as requirements. If you are going to use the latex circuit drawers ensure you have both packages installed or use the setuptools extras to install it along with qiskit-terra::"
msgstr ""

#: ../../release_notes.rst:22040
msgid "The root of the ``qiskit`` namespace will now emit a warning on import if either ``qiskit.IBMQ`` or ``qiskit.Aer`` could not be setup. This will occur whenever anything in the ``qiskit`` namespace is imported. These warnings were added to make it clear for users up front if they're running qiskit and the qiskit-aer and qiskit-ibmq-provider packages could not be found. It's not always clear if the packages are missing or python packaging/pip installed an element incorrectly until you go to use them and get an empty ``ImportError``. These warnings should make it clear up front if there these commonly used aliases are missing."
msgstr ""

#: ../../release_notes.rst:22050
msgid "However, for users that choose not to use either qiskit-aer or qiskit-ibmq-provider this might cause additional noise. For these users these warnings are easily suppressable using Python's standard library ``warnings``. Users can suppress the warnings by putting these two lines before any imports from qiskit::"
msgstr ""

#: ../../release_notes.rst:22060
msgid "This will suppress the warnings emitted by not having qiskit-aer or qiskit-ibmq-provider installed, but still preserve any other warnings emitted by qiskit or any other package."
msgstr ""

#: ../../release_notes.rst:22070
msgid "The ``U`` and ``CX`` gates have been deprecated. If you're using these gates in your code you should update them to use ``u3`` and ``cx`` instead. For example, if you're using the circuit gate functions ``circuit.u_base()`` and ``circuit.cx_base()`` you should update these to be ``circuit.u3()`` and ``circuit.cx()`` respectively."
msgstr ""

#: ../../release_notes.rst:22076
msgid "The ``u0`` gate has been deprecated in favor of using multiple ``iden`` gates and it will be removed in the future. If you're using the ``u0`` gate in your circuit you should update your calls to use ``iden``. For example, f you were using ``circuit.u0(2)`` in your circuit before that should be updated to be::"
msgstr ""

#: ../../release_notes.rst:22085
msgid "instead."
msgstr ""

#: ../../release_notes.rst:22087
msgid "The ``qiskit.pulse.DeviceSpecification`` class is deprecated now. Instead you should use ``qiskit.pulse.PulseChannelSpec``."
msgstr ""

#: ../../release_notes.rst:22090
msgid "Accessing a ``qiskit.circuit.Qubit``, ``qiskit.circuit.Clbit``, or ``qiskit.circuit.Bit`` class by index is deprecated (for compatibility with the ``(register, index)`` tuples that these classes replaced). Instead you should use the ``register`` and ``index`` attributes."
msgstr ""

#: ../../release_notes.rst:22095
msgid "Passing in a bit to the ``qiskit.QuantumCircuit`` method ``append`` as a tuple ``(register, index)`` is deprecated. Instead bit objects should be used directly."
msgstr ""

#: ../../release_notes.rst:22099
msgid "Accessing the elements of a ``qiskit.transpiler.Layout`` object with a tuple ``(register, index)`` is deprecated. Instead a bit object should be used directly."
msgstr ""

#: ../../release_notes.rst:22103
msgid "The ``qiskit.transpiler.Layout`` constructor method ``qiskit.transpiler.Layout.from_tuplelist()`` is deprecated. Instead the constructor ``qiskit.transpiler.Layout.from_qubit_list()`` should be used."
msgstr ""

#: ../../release_notes.rst:22107
msgid "The module ``qiskit.pulse.ops`` has been deprecated. All the functions it provided:"
msgstr ""

#: ../../release_notes.rst:22110
msgid "``union``"
msgstr ""

#: ../../release_notes.rst:22111
msgid "``flatten``"
msgstr ""

#: ../../release_notes.rst:22114
msgid "``append``"
msgstr ""

#: ../../release_notes.rst:22116
msgid "have equivalent methods available directly on the ``qiskit.pulse.Schedule`` and ``qiskit.pulse.Instruction`` classes. Those methods should be used instead."
msgstr ""

#: ../../release_notes.rst:22120
msgid "The ``qiskit.qasm.Qasm`` method ``get_tokens()`` is deprecated. Instead you should use the ``generate_tokens()`` method."
msgstr ""

#: ../../release_notes.rst:22123
msgid "The ``qiskit.qasm.qasmparser.QasmParser`` method ``get_tokens()`` is deprecated. Instead you should use the ``read_tokens()`` method."
msgstr ""

#: ../../release_notes.rst:22126
msgid "The ``as_dict()`` method for the Qobj class has been deprecated and will be removed in the future. You should replace calls to it with ``to_dict()`` instead."
msgstr ""

#: ../../release_notes.rst:22136
msgid "The definition of the ``CU3Gate`` has been changed to be equivalent to the canonical definition of a controlled ``U3Gate``."
msgstr ""

#: ../../release_notes.rst:22139
msgid "The handling of layout in the pass manager has been standardized. This fixes several reported issues with handling layout. The ``initial_layout`` kwarg parameter on ``qiskit.compiler.transpile()`` and ``qiskit.execute()`` will now lay out your qubits from the circuit onto the desired qubits on the device when transpiling circuits."
msgstr ""

#: ../../release_notes.rst:22145
msgid "Support for n-qubit unitaries was added to the BasicAer simulator and ``unitary`` (arbitrary unitary gates) was added to the set of basis gates for the simulators"
msgstr ""

#: ../../release_notes.rst:22149
msgid "The ``qiskit.visualization.plost_state_qsphere()`` has been updated to fix several issues with it. Now output Q Sphere visualization will be correctly generated and the following aspects have been updated:"
msgstr ""

#: ../../release_notes.rst:22153
msgid "All complementary basis states are antipodal"
msgstr ""

#: ../../release_notes.rst:22154
msgid "Phase is indicated by color of line and marker on sphere's surface"
msgstr ""

#: ../../release_notes.rst:22157
msgid "Probability is indicated by translucency of line and volume of marker on"
msgstr ""

#: ../../release_notes.rst:22156
msgid "sphere's surface"
msgstr ""

#: ../../release_notes.rst:22164
msgid "The default PassManager for ``qiskit.compiler.transpile()`` and ``qiskit.execute()`` has been changed to optimization level 1 pass manager defined at ``qiskit.transpile.preset_passmanagers.level1_pass_manager``."
msgstr ""

#: ../../release_notes.rst:22168
msgid "All the circuit drawer backends now will express gate parameters in a circuit as common fractions of pi in the output visualization. If the value of a parameter can be expressed as a fraction of pi that will be used instead of the numeric equivalent."
msgstr ""

#: ../../release_notes.rst:22173
msgid "When using ``qiskit.assembler.assemble_schedules()`` if you do not provide the number of memory_slots to use the number will be inferred based on the number of acquisitions in the input schedules."
msgstr ""

#: ../../release_notes.rst:22177
msgid "The deprecation warning on the ``qiskit.dagcircuit.DAGCircuit`` property ``node_counter`` has been removed. The behavior change being warned about was put into effect when the warning was added, so warning that it had changed served no purpose."
msgstr ""

#: ../../release_notes.rst:22182
msgid "Calls to ``PassManager.run()`` now will emit python logging messages at the INFO level for each pass execution. These messages will include the Pass name and the total execution time of the pass. Python's standard logging was used because it allows Qiskit-Terra's logging to integrate in a standard way with other applications and libraries. All logging for the transpiler occurs under the ``qiskit.transpiler`` namespace, as used by ``logging.getLogger('qiskit.transpiler``). For example, to turn on DEBUG level logging for the transpiler you can run::"
msgstr ""

#: ../../release_notes.rst:22196
msgid "which will set the log level for the transpiler to DEBUG and configure those messages to be printed to stderr."
msgstr ""

#: ../../release_notes.rst:22201
msgid "There's a new high-performance Density Matrix Simulator that can be used in conjunction with our noise models, to better simulate real world scenarios."
msgstr ""

#: ../../release_notes.rst:22203
msgid "We have added a Matrix Product State (MPS) simulator. MPS allows for efficient simulation of several classes of quantum circuits, even under presence of strong correlations and highly entangled states. For cases amenable to MPS, circuits with several hundred qubits and more can be exactly simulated, e.g., for the purpose of obtaining expectation values of observables."
msgstr ""

#: ../../release_notes.rst:22208
msgid "Snapshots can be performed in all of our simulators."
msgstr ""

#: ../../release_notes.rst:22209
msgid "Now we can measure sampling circuits with read-out errors too, not only ideal circuits."
msgstr ""

#: ../../release_notes.rst:22211
msgid "We have increased some circuit optimizations with noise presence."
msgstr ""

#: ../../release_notes.rst:22212
msgid "A better 2-qubit error approximations have been included."
msgstr ""

#: ../../release_notes.rst:22213
msgid "Included some tools for making certain noisy simulations easier to craft and faster to simulate."
msgstr ""

#: ../../release_notes.rst:22215
msgid "Increased performance with simulations that require less floating point numerical precision."
msgstr ""

#: ../../release_notes.rst:22224
msgid "`Logging Module <https://github.com/Qiskit/qiskit-iqx-tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/9_ignis_logging.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:22225
msgid "`Purity RB <https://github.com/Qiskit/qiskit-iqx-tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/5c_purity_rb.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:22226
msgid "`Interleaved RB <https://github.com/Qiskit/qiskit-iqx-tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/5b_interleaved_rb.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:22227
msgid "`Repetition Code for Verification <https://github.com/Qiskit/qiskit-iqx-tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/8_repetition_code.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:22228
msgid "Seed values can now be arbitrarily added to RB (not just in order)"
msgstr ""

#: ../../release_notes.rst:22229
msgid "Support for adding multiple results to measurement mitigation"
msgstr ""

#: ../../release_notes.rst:22230
msgid "RB Fitters now support providing guess values"
msgstr ""

#: ../../release_notes.rst:22235
msgid "Fixed a bug in RB fit error"
msgstr ""

#: ../../release_notes.rst:22236
msgid "Fixed a bug in the characterization fitter when selecting a qubit index to fit"
msgstr ""

#: ../../release_notes.rst:22242
msgid "Measurement mitigation now operates in parallel when applied to multiple results"
msgstr ""

#: ../../release_notes.rst:22244
msgid "Guess values for RB fitters are improved"
msgstr ""

#: ../../release_notes.rst:22252
msgid "Relative-Phase Toffoli gates ``rccx`` (with 2 controls) and ``rcccx`` (with 3 controls)."
msgstr ""

#: ../../release_notes.rst:22254
msgid "Variational form ``RYCRX``"
msgstr ""

#: ../../release_notes.rst:22255
msgid "A new ``'basic-no-ancilla'`` mode to ``mct``."
msgstr ""

#: ../../release_notes.rst:22256
msgid "Multi-controlled rotation gates ``mcrx``, ``mcry``, and ``mcrz`` as a general ``u3`` gate is not supported by graycode implementation"
msgstr ""

#: ../../release_notes.rst:22258
msgid "Chemistry: ROHF open-shell support"
msgstr ""

#: ../../release_notes.rst:22260 ../../release_notes.rst:22267
#: ../../release_notes.rst:22273
msgid "Supported for all drivers: Gaussian16, PyQuante, PySCF and PSI4"
msgstr ""

#: ../../release_notes.rst:22261
msgid "HartreeFock initial state, UCCSD variational form and two qubit reduction for parity mapping now support different alpha and beta particle numbers for open shell support"
msgstr ""

#: ../../release_notes.rst:22265
msgid "Chemistry: UHF open-shell support"
msgstr ""

#: ../../release_notes.rst:22268
msgid "QMolecule extended to include integrals, coefficients etc for separate beta"
msgstr ""

#: ../../release_notes.rst:22270
msgid "Chemistry: QMolecule extended with integrals in atomic orbital basis to facilitate common access to these for experimentation"
msgstr ""

#: ../../release_notes.rst:22275
msgid "Chemistry: Additional PyQuante and PySCF driver configuration"
msgstr ""

#: ../../release_notes.rst:22277
msgid "Convergence tolerance and max convergence iteration controls."
msgstr ""

#: ../../release_notes.rst:22278
msgid "For PySCF initial guess choice"
msgstr ""

#: ../../release_notes.rst:22280
msgid "Chemistry: Processing output added to debug log from PyQuante and PySCF computations (Gaussian16 and PSI4 outputs were already added to debug log)"
msgstr ""

#: ../../release_notes.rst:22282
msgid "Chemistry: Merged qiskit-chemistry into qiskit-aqua"
msgstr ""

#: ../../release_notes.rst:22283
msgid "Add ``MatrixOperator``, ``WeightedPauliOperator`` and ``TPBGroupedPauliOperator`` class."
msgstr ""

#: ../../release_notes.rst:22285
msgid "Add ``evolution_instruction`` function to get registerless instruction of time evolution."
msgstr ""

#: ../../release_notes.rst:22287
msgid "Add ``op_converter`` module to unify the place in charge of converting different types of operators."
msgstr ""

#: ../../release_notes.rst:22289
msgid "Add ``Z2Symmetries`` class to encapsulate the Z2 symmetries info and has helper methods for tapering an Operator."
msgstr ""

#: ../../release_notes.rst:22291
msgid "Amplitude Estimation: added maximum likelihood postprocessing and confidence interval computation."
msgstr ""

#: ../../release_notes.rst:22293
msgid "Maximum Likelihood Amplitude Estimation (MLAE): Implemented new algorithm for amplitude estimation based on maximum likelihood estimation, which reduces number of required qubits and circuit depth."
msgstr ""

#: ../../release_notes.rst:22296
msgid "Added (piecewise) linearly and polynomially controlled Pauli-rotation circuits."
msgstr ""

#: ../../release_notes.rst:22298
msgid "Add ``q_equation_of_motion`` to study excited state of a molecule, and add two algorithms to prepare the reference state."
msgstr ""

#: ../../release_notes.rst:22304
msgid "Improve ``mct``'s ``'basic'`` mode by using relative-phase Toffoli gates to build intermediate results."
msgstr ""

#: ../../release_notes.rst:22306
msgid "Adapt to Qiskit Terra's newly introduced ``Qubit`` class."
msgstr ""

#: ../../release_notes.rst:22307
msgid "Prevent ``QPE/IQPE`` from modifying input ``Operator`` objects."
msgstr ""

#: ../../release_notes.rst:22308
msgid "The PyEDA dependency was removed; corresponding oracles' underlying logic operations are now handled by SymPy."
msgstr ""

#: ../../release_notes.rst:22310
msgid "Refactor the ``Operator`` class, each representation has its own class ``MatrixOperator``, ``WeightedPauliOperator`` and ``TPBGroupedPauliOperator``."
msgstr ""

#: ../../release_notes.rst:22312
msgid "The ``power`` in ``evolution_instruction`` was applied on the theta on the CRZ gate directly, the new version repeats the circuits to implement power."
msgstr ""

#: ../../release_notes.rst:22314
msgid "CircuitCache is OFF by default, and it can be set via environment variable now ``QISKIT_AQUA_CIRCUIT_CACHE``."
msgstr ""

#: ../../release_notes.rst:22320
msgid "A bug where ``TruthTableOracle`` would build incorrect circuits for truth tables with only a single ``1`` value."
msgstr ""

#: ../../release_notes.rst:22322
msgid "A bug caused by ``PyEDA``'s indeterminism."
msgstr ""

#: ../../release_notes.rst:22323
msgid "A bug with ``QPE/IQPE``'s translation and stretch computation."
msgstr ""

#: ../../release_notes.rst:22324
msgid "Chemistry: Bravyi-Kitaev mapping fixed when num qubits was not a power of 2"
msgstr ""

#: ../../release_notes.rst:22325
msgid "Setup ``initial_layout`` in ``QuantumInstance`` via a list."
msgstr ""

#: ../../release_notes.rst:22330
msgid "General multi-controlled rotation gate ``mcu3`` is removed and replaced by multi-controlled rotation gates ``mcrx``, ``mcry``, and ``mcrz``"
msgstr ""

#: ../../release_notes.rst:22335
msgid "The ``Operator`` class is deprecated, in favor of using ``MatrixOperator``, ``WeightedPauliOperator`` and ``TPBGroupedPauliOperator``."
msgstr ""

#: ../../release_notes.rst:22347
msgid "Qiskit 0.11.1"
msgstr ""

#: ../../release_notes.rst:22349
msgid "We have bumped up Qiskit micro version to 0.11.1 because IBM Q Provider has bumped its micro version as well."
msgstr ""

#: ../../release_notes.rst:22353 ../../release_notes.rst:22391
#: ../../release_notes.rst:22499 ../../release_notes.rst:22541
msgid "Terra 0.8"
msgstr ""

#: ../../release_notes.rst:22358 ../../release_notes.rst:22396
#: ../../release_notes.rst:22504 ../../release_notes.rst:22717
msgid "Aer 0.2"
msgstr ""

#: ../../release_notes.rst:22363 ../../release_notes.rst:22414
#: ../../release_notes.rst:22509 ../../release_notes.rst:22775
#: ../../release_notes.rst:22926
msgid "Ignis 0.1"
msgstr ""

#: ../../release_notes.rst:22368 ../../release_notes.rst:22419
#: ../../release_notes.rst:22514 ../../release_notes.rst:22799
msgid "Aqua 0.5"
msgstr ""

#: ../../release_notes.rst:22370
msgid "``qiskit-aqua`` has been updated to ``0.5.3`` to fix code related to changes in how gates inverses are done."
msgstr ""

#: ../../release_notes.rst:22376
msgid "The ``IBMQProvider`` has been updated to version ``0.3.1`` to fix backward compatibility issues and work with the default 10 job limit in single calls to the IBM Q API v2."
msgstr ""

#: ../../release_notes.rst:22383
msgid "Qiskit 0.11"
msgstr ""

#: ../../release_notes.rst:22385
msgid "We have bumped up Qiskit minor version to 0.11 because IBM Q Provider has bumped up its minor version too. On Aer, we have jumped from 0.2.1 to 0.2.3 because there was an issue detected right after releasing 0.2.2 and before Qiskit 0.11 went online."
msgstr ""

#: ../../release_notes.rst:22399
msgid "New features"
msgstr ""

#: ../../release_notes.rst:22401
msgid "Added support for multi-controlled phase gates"
msgstr ""

#: ../../release_notes.rst:22402
msgid "Added optimized anti-diagonal single-qubit gates"
msgstr ""

#: ../../release_notes.rst:22405
msgid "Improvements"
msgstr ""

#: ../../release_notes.rst:22407
msgid "Introduced a technique called Fusion that increments performance of circuit execution Tuned threading strategy to gain performance in most common scenarios."
msgstr ""

#: ../../release_notes.rst:22409
msgid "Some of the already implemented error models have been polished."
msgstr ""

#: ../../release_notes.rst:22426
msgid "The ``IBMQProvider`` has been updated in order to default to use the new `IBM Q Experience v2 <https://quantum-computing.ibm.com>`__. Accessing the legacy IBM Q Experience v1 and QConsole will still be supported during the 0.3.x line until its final deprecation one month from the release. It is encouraged to update to the new IBM Q Experience to take advantage of the new functionality and features."
msgstr ""

#: ../../release_notes.rst:22433
msgid "Updating to the new IBM Q Experience v2"
msgstr ""

#: ../../release_notes.rst:22435
msgid "If you have credentials for the legacy IBM Q Experience stored on disk, you can make use of the interactive helper::"
msgstr ""

#: ../../release_notes.rst:22443
msgid "For more complex cases or fine tuning your configuration, the following methods are available:"
msgstr ""

#: ../../release_notes.rst:22446
msgid "the ``IBMQ.delete_accounts()`` can be used for resetting your configuration file."
msgstr ""

#: ../../release_notes.rst:22448
msgid "the ``IBMQ.save_account('MY_TOKEN')`` method can be used for saving your credentials, following the instructions in the `IBM Q Experience v2 <https://quantum-computing.ibm.com>`__ account page."
msgstr ""

#: ../../release_notes.rst:22453
msgid "Updating your programs"
msgstr ""

#: ../../release_notes.rst:22455
msgid "When using the new IBM Q Experience v2 through the provider, access to backends is done via individual ``provider`` instances (as opposed to accessing them directly through the ``qiskit.IBMQ`` object as in previous versions), which allows for more granular control over the project you are using."
msgstr ""

#: ../../release_notes.rst:22460
msgid "You can get a reference to the ``providers`` that you have access to using the ``IBMQ.providers()`` and ``IBMQ.get_provider()`` methods::"
msgstr ""

#: ../../release_notes.rst:22470
msgid "For convenience, ``IBMQ.load_account()`` and ``IBMQ.enable_account()`` will return a provider for the open access project, which is the default in the new IBM Q Experience v2."
msgstr ""

#: ../../release_notes.rst:22474
msgid "For example, the following program in previous versions::"
msgstr ""

#: ../../release_notes.rst:22482
msgid "Would be equivalent to the following program in the current version::"
msgstr ""

#: ../../release_notes.rst:22491
msgid "You can find more information and details in the `IBM Q Provider documentation <https://github.com/Qiskit/qiskit-ibmq-provider>`__."
msgstr ""

#: ../../release_notes.rst:22496
msgid "Qiskit 0.10"
msgstr ""

#: ../../release_notes.rst:22519
msgid "IBM Q Provider 0.2"
msgstr ""

#: ../../release_notes.rst:22524
msgid "The ``IBMQProvider`` supports connecting to the new version of the IBM Q API. Please note support for this version is still experimental :pull_ibmq-provider:`78`."
msgstr ""

#: ../../release_notes.rst:22526
msgid "Added support for Circuits through the new API :pull_ibmq-provider:`79`."
msgstr ""

#: ../../release_notes.rst:22532
msgid "Fixed incorrect parsing of some API hub URLs :pull_ibmq-provider:`77`."
msgstr ""

#: ../../release_notes.rst:22533
msgid "Fixed noise model handling for remote simulators :pull_ibmq-provider:`84`."
msgstr ""

#: ../../release_notes.rst:22538
msgid "Qiskit 0.9"
msgstr ""

#: ../../release_notes.rst:22546 ../../release_notes.rst:23317
#: ../../release_notes.rst:23525
msgid "Highlights"
msgstr ""

#: ../../release_notes.rst:22548
msgid "Introduction of the Pulse module under ``qiskit.pulse``, which includes tools for building pulse commands, scheduling them on pulse channels, visualization, and running them on IBM Q devices."
msgstr ""

#: ../../release_notes.rst:22551
msgid "Improved QuantumCircuit and Instruction classes, allowing for the composition of arbitrary sub-circuits into larger circuits, and also for creating parameterized circuits."
msgstr ""

#: ../../release_notes.rst:22554
msgid "A powerful Quantum Info module under ``qiskit.quantum_info``, providing tools to work with operators and channels and to use them inside circuits."
msgstr ""

#: ../../release_notes.rst:22556
msgid "New transpiler optimization passes and access to predefined transpiling routines."
msgstr ""

#: ../../release_notes.rst:22564
msgid "The core ``StochasticSwap`` routine is implemented in `Cython <https://cython.org/>`__."
msgstr ""

#: ../../release_notes.rst:22565
msgid "Added ``QuantumChannel`` classes for manipulating quantum channels and CPTP maps."
msgstr ""

#: ../../release_notes.rst:22567
msgid "Support for parameterized circuits."
msgstr ""

#: ../../release_notes.rst:22568
msgid "The ``PassManager`` interface has been improved and new functions added for easier interaction and usage with custom pass managers."
msgstr ""

#: ../../release_notes.rst:22570
msgid "Preset ``PassManager``\\s are now included which offer a predetermined pipeline of transpiler passes."
msgstr ""

#: ../../release_notes.rst:22572
msgid "User configuration files to let local environments override default values for some functions."
msgstr ""

#: ../../release_notes.rst:22574
msgid "New transpiler passes: ``EnlargeWithAncilla``, ``Unroll2Q``, ``NoiseAdaptiveLayout``, ``OptimizeSwapBeforeMeasure``, ``RemoveDiagonalGatesBeforeMeasure``, ``CommutativeCancellation``, ``Collect2qBlocks``, and ``ConsolidateBlocks``."
msgstr ""

#: ../../release_notes.rst:22581 ../../release_notes.rst:22765
#: ../../release_notes.rst:22788 ../../release_notes.rst:22865
#: ../../release_notes.rst:22987 ../../release_notes.rst:23301
#: ../../release_notes.rst:23339 ../../release_notes.rst:23543
msgid "Compatibility Considerations"
msgstr ""

#: ../../release_notes.rst:22583
msgid "As part of the 0.8 release the following things have been deprecated and will either be removed or changed in a backwards incompatible manner in a future release. While not strictly necessary these are things to adjust for before the 0.9 (unless otherwise noted) release to avoid a breaking change in the future."
msgstr ""

#: ../../release_notes.rst:22588
msgid "The methods prefixed by ``_get`` in the ``DAGCircuit`` object are being renamed without that prefix."
msgstr ""

#: ../../release_notes.rst:22590
msgid "Changed elements in ``couplinglist`` of ``CouplingMap`` from tuples to lists."
msgstr ""

#: ../../release_notes.rst:22591
msgid "Unroller bases must now be explicit, and violation raises an informative ``QiskitError``."
msgstr ""

#: ../../release_notes.rst:22593
msgid "The ``qiskit.tools.qcvv`` package is deprecated and will be removed in the in the future. You should migrate to using the Qiskit Ignis which replaces this module."
msgstr ""

#: ../../release_notes.rst:22596
msgid "The ``qiskit.compile()`` function is now deprecated in favor of explicitly using the ``qiskit.compiler.transpile()`` function to transform a circuit, followed by ``qiskit.compiler.assemble()`` to make a Qobj out of it. Instead of ``compile(...)``, use ``assemble(transpile(...), ...)``."
msgstr ""

#: ../../release_notes.rst:22600
msgid "``qiskit.converters.qobj_to_circuits()`` has been deprecated and will be removed in a future release. Instead ``qiskit.assembler.disassemble()`` should be used to extract ``QuantumCircuit`` objects from a compiled Qobj."
msgstr ""

#: ../../release_notes.rst:22604
msgid "The ``qiskit.mapper`` namespace has been deprecated. The ``Layout`` and ``CouplingMap`` classes can be accessed via ``qiskit.transpiler``."
msgstr ""

#: ../../release_notes.rst:22606
msgid "A few functions in ``qiskit.tools.qi.qi`` have been deprecated and moved to ``qiskit.quantum_info``."
msgstr ""

#: ../../release_notes.rst:22609
msgid "Please note that some backwards incompatible changes have been made during this release. The following notes contain information on how to adapt to these changes."
msgstr ""

#: ../../release_notes.rst:22614
msgid "IBM Q Provider"
msgstr ""

#: ../../release_notes.rst:22616
msgid "The IBM Q provider was previously included in Terra, but it has been split out into a separate package ``qiskit-ibmq-provider``. This will need to be installed, either via pypi with ``pip install qiskit-ibmq-provider`` or from source in order to access ``qiskit.IBMQ`` or ``qiskit.providers.ibmq``. If you install qiskit with ``pip install qiskit``, that will automatically install all subpackages of the Qiskit project."
msgstr ""

#: ../../release_notes.rst:22626
msgid "Cython Components"
msgstr ""

#: ../../release_notes.rst:22628
msgid "Starting in the 0.8 release the core stochastic swap routine is now implemented in `Cython <https://cython.org/>`__. This was done to significantly improve the performance of the swapper, however if you build Terra from source or run on a non-x86 or other platform without prebuilt wheels and install from source distribution you'll need to make sure that you have Cython installed prior to installing/building Qiskit Terra. This can easily be done with pip/pypi: ``pip install Cython``."
msgstr ""

#: ../../release_notes.rst:22639
msgid "Compiler Workflow"
msgstr ""

#: ../../release_notes.rst:22641
msgid "The ``qiskit.compile()`` function has been deprecated and replaced by first calling ``qiskit.compiler.transpile()`` to run optimization and mapping on a circuit, and then ``qiskit.compiler.assemble()`` to build a Qobj from that optimized circuit to send to a backend. While this is only a deprecation it will emit a warning if you use the old ``qiskit.compile()`` call."
msgstr ""

#: ../../release_notes.rst:22647
msgid "**transpile(), assemble(), execute() parameters**"
msgstr ""

#: ../../release_notes.rst:22649
msgid "These functions are heavily overloaded and accept a wide range of inputs. They can handle circuit and pulse inputs. All kwargs except for ``backend`` for these functions now also accept lists of the previously accepted types. The ``initial_layout`` kwarg can now be supplied as a both a list and dictionary, e.g. to map a Bell experiment on qubits 13 and 14, you can supply: ``initial_layout=[13, 14]`` or ``initial_layout={qr[0]: 13, qr[1]: 14}``"
msgstr ""

#: ../../release_notes.rst:22659
msgid "Qobj"
msgstr ""

#: ../../release_notes.rst:22661
msgid "The Qobj class has been split into two separate subclasses depending on the use case, either ``PulseQobj`` or ``QasmQobj`` for pulse and circuit jobs respectively. If you're interacting with Qobj directly you may need to adjust your usage accordingly."
msgstr ""

#: ../../release_notes.rst:22666
msgid "The ``qiskit.qobj.qobj_to_dict()`` is removed. Instead use the ``to_dict()`` method of a Qobj object."
msgstr ""

#: ../../release_notes.rst:22672
msgid "Visualization"
msgstr ""

#: ../../release_notes.rst:22674
msgid "The largest change to the visualization module is it has moved from ``qiskit.tools.visualization`` to ``qiskit.visualization``. This was done to indicate that the visualization module is more than just a tool. However, since this interface was declared stable in the 0.7 release the public interface off of ``qiskit.tools.visualization`` will continue to work. That may change in a future release, but it will be deprecated prior to removal if that happens."
msgstr ""

#: ../../release_notes.rst:22681
msgid "The previously deprecated functions, ``plot_circuit()``, ``latex_circuit_drawer()``, ``generate_latex_source()``, and ``matplotlib_circuit_drawer()`` from ``qiskit.tools.visualization`` have been removed. Instead of these functions, calling ``qiskit.visualization.circuit_drawer()`` with the appropriate arguments should be used."
msgstr ""

#: ../../release_notes.rst:22688
msgid "The previously deprecated ``plot_barriers`` and ``reverse_bits`` keys in the ``style`` kwarg dictionary are deprecated, instead the ``qiskit.visualization.circuit_drawer()`` kwargs ``plot_barriers`` and ``reverse_bits`` should be used."
msgstr ""

#: ../../release_notes.rst:22693
msgid "The Wigner plotting functions ``plot_wigner_function``, ``plot_wigner_curve``, ``plot_wigner_plaquette``, and ``plot_wigner_data`` previously in the ``qiskit.tools.visualization._state_visualization`` module have been removed. They were never exposed through the public stable interface and were not well documented. The code to use this feature can still be accessed through the qiskit-tutorials repository."
msgstr ""

#: ../../release_notes.rst:22703
msgid "Mapper"
msgstr ""

#: ../../release_notes.rst:22705
msgid "The public api from ``qiskit.mapper`` has been moved into ``qiskit.transpiler``. While it has only been deprecated in this release, it will be removed in the 0.9 release so updating your usage of ``Layout`` and ``CouplingMap`` to import from ``qiskit.transpiler`` instead of ``qiskit.mapper`` before that takes place will avoid any surprises in the future."
msgstr ""

#: ../../release_notes.rst:22722
msgid "Added multiplexer gate :pull_aer:`192`"
msgstr ""

#: ../../release_notes.rst:22723
msgid "Added ``remap_noise_model`` function to ``noise.utils`` :pull_aer:`181`"
msgstr ""

#: ../../release_notes.rst:22724
msgid "Added ``__eq__`` method to ``NoiseModel``, ``QuantumError``, ``ReadoutError`` :pull_aer:`181`"
msgstr ""

#: ../../release_notes.rst:22726
msgid "Added support for labelled gates in noise models :pull_aer:`175`"
msgstr ""

#: ../../release_notes.rst:22727
msgid "Added optimized ``mcx``, ``mcy``, ``mcz``, ``mcu1``, ``mcu2``, ``mcu3``, gates to ``QubitVector`` :pull_aer:`124`"
msgstr ""

#: ../../release_notes.rst:22729
msgid "Added optimized controlled-swap gate to ``QubitVector`` :pull_aer:`142`"
msgstr ""

#: ../../release_notes.rst:22730
msgid "Added gate-fusion optimization for ``QasmController``, which is enabled by setting ``fusion_enable=true`` :pull_aer:`136`"
msgstr ""

#: ../../release_notes.rst:22732
msgid "Added better management of failed simulations :pull_aer:`167`"
msgstr ""

#: ../../release_notes.rst:22733
msgid "Added qubits truncate optimization for unused qubits :pull_aer:`164`"
msgstr ""

#: ../../release_notes.rst:22734
msgid "Added ability to disable depolarizing error on device noise model :pull_aer:`131`"
msgstr ""

#: ../../release_notes.rst:22736
msgid "Added initialize simulator instruction to ``statevector_state`` :pull_aer:`117`, :pull_aer:`137`"
msgstr ""

#: ../../release_notes.rst:22738
msgid "Added coupling maps to simulators :pull_aer:`93`"
msgstr ""

#: ../../release_notes.rst:22739
msgid "Added circuit optimization framework :pull_aer:`83`"
msgstr ""

#: ../../release_notes.rst:22740
msgid "Added benchmarking :pull_aer:`71`, :pull_aer:`177`"
msgstr ""

#: ../../release_notes.rst:22741
msgid "Added wheels support for Debian-like distributions :pull_aer:`69`"
msgstr ""

#: ../../release_notes.rst:22742
msgid "Added autoconfiguration of threads for qasm simulator :pull_aer:`61`"
msgstr ""

#: ../../release_notes.rst:22743
msgid "Added Simulation method based on Stabilizer Rank Decompositions :pull_aer:`51`"
msgstr ""

#: ../../release_notes.rst:22744
msgid "Added ``basis_gates`` kwarg to ``NoiseModel`` init :pull_aer:`175`."
msgstr ""

#: ../../release_notes.rst:22745
msgid "Added an optional parameter to ``NoiseModel.as_dict()`` for returning dictionaries that can be serialized using the standard json library directly :pull_aer:`165`"
msgstr ""

#: ../../release_notes.rst:22748
msgid "Refactor thread management :pull_aer:`50`"
msgstr ""

#: ../../release_notes.rst:22749
msgid "Improve noise transformations :pull_aer:`162`"
msgstr ""

#: ../../release_notes.rst:22750
msgid "Improve error reporting :pull_aer:`160`"
msgstr ""

#: ../../release_notes.rst:22751
msgid "Improve efficiency of parallelization with ``max_memory_mb`` a new parameter of ``backend_opts`` :pull_aer:`61`"
msgstr ""

#: ../../release_notes.rst:22753
msgid "Improve u1 performance in ``statevector`` :pull_aer:`123`"
msgstr ""

#: ../../release_notes.rst:22759
msgid "Fixed OpenMP clashing problems on macOS for the Terra add-on :pull_aer:`46`"
msgstr ""

#: ../../release_notes.rst:22767
msgid "Deprecated ``\"initial_statevector\"`` backend option for ``QasmSimulator`` and ``StatevectorSimulator`` :pull_aer:`185`"
msgstr ""

#: ../../release_notes.rst:22769
msgid "Renamed ``\"chop_threshold\"`` backend option to ``\"zero_threshold\"`` and changed default value to 1e-10 :pull_aer:`185`"
msgstr ""

#: ../../release_notes.rst:22780
msgid "Quantum volume"
msgstr ""

#: ../../release_notes.rst:22781
msgid "Measurement mitigation using tensored calibrations"
msgstr ""

#: ../../release_notes.rst:22782
msgid "Simultaneous RB has the option to align Clifford gates across subsets"
msgstr ""

#: ../../release_notes.rst:22783
msgid "Measurement correction can produce a new calibration for a subset of qubits"
msgstr ""

#: ../../release_notes.rst:22790
msgid "RB writes to the minimal set of classical registers (it used to be Q[i]->C[i]). This change enables measurement correction with RB. Unless users had external analysis code, this will not change outcomes. RB circuits from 0.1 are not compatible with 0.1.1 fitters."
msgstr ""

#: ../../release_notes.rst:22804
msgid "Implementation of the HHL algorithm supporting ``LinearSystemInput``"
msgstr ""

#: ../../release_notes.rst:22805
msgid "Pluggable component ``Eigenvalues`` with variant ``EigQPE``"
msgstr ""

#: ../../release_notes.rst:22806
msgid "Pluggable component ``Reciprocal`` with variants ``LookupRotation`` and ``LongDivision``"
msgstr ""

#: ../../release_notes.rst:22808
msgid "Multiple-Controlled U1 and U3 operations ``mcu1`` and ``mcu3``"
msgstr ""

#: ../../release_notes.rst:22809
msgid "Pluggable component ``QFT`` derived from component ``IQFT``"
msgstr ""

#: ../../release_notes.rst:22810
msgid "Summarized the transpiled circuits at the DEBUG logging level"
msgstr ""

#: ../../release_notes.rst:22811
msgid "``QuantumInstance`` accepts ``basis_gates`` and ``coupling_map`` again."
msgstr ""

#: ../../release_notes.rst:22812
msgid "Support to use ``cx`` gate for the entanglement in ``RY`` and ``RYRZ`` variational form (``cz`` is the default choice)"
msgstr ""

#: ../../release_notes.rst:22814
msgid "Support to use arbitrary mixer Hamiltonian in QAOA, allowing use of QAOA in constrained optimization problems [arXiv:1709.03489]"
msgstr ""

#: ../../release_notes.rst:22816
msgid "Added variational algorithm base class ``VQAlgorithm``, implemented by ``VQE`` and ``QSVMVariational``"
msgstr ""

#: ../../release_notes.rst:22818
msgid "Added ``ising/docplex.py`` for automatically generating Ising Hamiltonian from optimization models of DOcplex"
msgstr ""

#: ../../release_notes.rst:22820
msgid "Added ``'basic-dirty-ancilla``' mode for ``mct``"
msgstr ""

#: ../../release_notes.rst:22821
msgid "Added ``mcmt`` for Multi-Controlled, Multi-Target gate"
msgstr ""

#: ../../release_notes.rst:22822
msgid "Exposed capabilities to generate circuits from logical AND, OR, DNF (disjunctive normal forms), and CNF (conjunctive normal forms) formulae"
msgstr ""

#: ../../release_notes.rst:22824
msgid "Added the capability to generate circuits from ESOP (exclusive sum of products) formulae with optional optimization based on Quine-McCluskey and ExactCover"
msgstr ""

#: ../../release_notes.rst:22826
msgid "Added ``LogicalExpressionOracle`` for generating oracle circuits from arbitrary Boolean logic expressions (including DIMACS support) with optional optimization capability"
msgstr ""

#: ../../release_notes.rst:22829
msgid "Added ``TruthTableOracle`` for generating oracle circuits from truth-tables with optional optimization capability"
msgstr ""

#: ../../release_notes.rst:22831
msgid "Added ``CustomCircuitOracle`` for generating oracle from user specified circuits"
msgstr ""

#: ../../release_notes.rst:22833
msgid "Added implementation of the Deutsch-Jozsa algorithm"
msgstr ""

#: ../../release_notes.rst:22834
msgid "Added implementation of the Bernstein-Vazirani algorithm"
msgstr ""

#: ../../release_notes.rst:22835
msgid "Added implementation of the Simon's algorithm"
msgstr ""

#: ../../release_notes.rst:22836
msgid "Added implementation of the Shor's algorithm"
msgstr ""

#: ../../release_notes.rst:22837
msgid "Added optional capability for Grover's algorithm to take a custom initial state (as opposed to the default uniform superposition)"
msgstr ""

#: ../../release_notes.rst:22839
msgid "Added capability to create a ``Custom`` initial state using existing circuit"
msgstr ""

#: ../../release_notes.rst:22841
msgid "Added the ADAM (and AMSGRAD) optimization algorithm"
msgstr ""

#: ../../release_notes.rst:22842
msgid "Multivariate distributions added, so uncertainty models now have univariate and multivariate distribution components"
msgstr ""

#: ../../release_notes.rst:22844
msgid "Added option to include or skip the swaps operations for qft and iqft circuit constructions"
msgstr ""

#: ../../release_notes.rst:22846
msgid "Added classical linear system solver ``ExactLSsolver``"
msgstr ""

#: ../../release_notes.rst:22847
msgid "Added parameters ``auto_hermitian`` and ``auto_resize`` to ``HHL`` algorithm to support non-Hermitian and non :math:`2^n` sized matrices by default"
msgstr ""

#: ../../release_notes.rst:22849
msgid "Added another feature map, ``RawFeatureVector``, that directly maps feature vectors to qubits' states for classification"
msgstr ""

#: ../../release_notes.rst:22851
msgid "``SVM_Classical`` can now load models trained by ``QSVM``"
msgstr ""

#: ../../release_notes.rst:22858
msgid "Fixed ``ising/docplex.py`` to correctly multiply constant values in constraints"
msgstr ""

#: ../../release_notes.rst:22859
msgid "Fixed package setup to correctly identify namespace packages using ``setuptools.find_namespace_packages``"
msgstr ""

#: ../../release_notes.rst:22867
msgid "``QuantumInstance`` does not take ``memory`` anymore."
msgstr ""

#: ../../release_notes.rst:22868
msgid "Moved command line and GUI to separate repo (``qiskit_aqua_uis``)"
msgstr ""

#: ../../release_notes.rst:22870
msgid "Removed the ``SAT``-specific oracle (now supported by ``LogicalExpressionOracle``)"
msgstr ""

#: ../../release_notes.rst:22872
msgid "Changed ``advanced`` mode implementation of ``mct``: using simple ``h`` gates instead of ``ch``, and fixing the old recursion step in ``_multicx``"
msgstr ""

#: ../../release_notes.rst:22874
msgid "Components ``random_distributions`` renamed to ``uncertainty_models``"
msgstr ""

#: ../../release_notes.rst:22875
msgid "Reorganized the constructions of various common gates (``ch``, ``cry``, ``mcry``, ``mct``, ``mcu1``, ``mcu3``, ``mcmt``, ``logic_and``, and ``logic_or``) and circuits (``PhaseEstimationCircuit``, ``BooleanLogicCircuits``, ``FourierTransformCircuits``, and ``StateVectorCircuits``) under the ``circuits`` directory"
msgstr ""

#: ../../release_notes.rst:22880
msgid "Renamed the algorithm ``QSVMVariational`` to ``VQC``, which stands for Variational Quantum Classifier"
msgstr ""

#: ../../release_notes.rst:22882
msgid "Renamed the algorithm ``QSVMKernel`` to ``QSVM``"
msgstr ""

#: ../../release_notes.rst:22883
msgid "Renamed the class ``SVMInput`` to ``ClassificationInput``"
msgstr ""

#: ../../release_notes.rst:22884
msgid "Renamed problem type ``'svm_classification'`` to ``'classification'``"
msgstr ""

#: ../../release_notes.rst:22885
msgid "Changed the type of ``entangler_map`` used in ``FeatureMap`` and ``VariationalForm`` to list of lists"
msgstr ""

#: ../../release_notes.rst:22891
msgid "IBM Q Provider 0.1"
msgstr ""

#: ../../release_notes.rst:22896
msgid "This is the first release as a standalone package. If you are installing Terra standalone you'll also need to install the ``qiskit-ibmq-provider`` package with ``pip install qiskit-ibmq-provider`` if you want to use the IBM Q backends."
msgstr ""

#: ../../release_notes.rst:22901
msgid "Support for non-Qobj format jobs has been removed from the provider. You'll have to convert submissions in an older format to Qobj before you can submit."
msgstr ""

#: ../../release_notes.rst:22909
msgid "Qiskit 0.8"
msgstr ""

#: ../../release_notes.rst:22911
msgid "In Qiskit 0.8 we introduced the Qiskit Ignis element. It also includes the Qiskit Terra element 0.7.1 release which contains a bug fix for the BasicAer Python simulator."
msgstr ""

#: ../../release_notes.rst:22916 ../../release_notes.rst:22941
msgid "Terra 0.7"
msgstr ""

#: ../../release_notes.rst:22921 ../../release_notes.rst:23223
msgid "Aer 0.1"
msgstr ""

#: ../../release_notes.rst:22928
msgid "This is the first release of Qiskit Ignis."
msgstr ""

#: ../../release_notes.rst:22934
msgid "Qiskit 0.7"
msgstr ""

#: ../../release_notes.rst:22936
msgid "In Qiskit 0.7 we introduced Qiskit Aer and combined it with Qiskit Terra."
msgstr ""

#: ../../release_notes.rst:22946
msgid "This release includes several new features and many bug fixes. With this release the interfaces for circuit diagram, histogram, bloch vectors, and state visualizations are declared stable. Additionally, this release includes a defined and standardized bit order/endianness throughout all aspects of Qiskit. These are all declared as stable interfaces in this release which won't have breaking changes made moving forward, unless there is appropriate and lengthy deprecation periods warning of any coming changes."
msgstr ""

#: ../../release_notes.rst:22954
msgid "There is also the introduction of the following new features:"
msgstr ""

#: ../../release_notes.rst:22956
msgid "A new ASCII art circuit drawing output mode"
msgstr ""

#: ../../release_notes.rst:22957
msgid "A new circuit drawing interface off of ``QuantumCircuit`` objects that enables calls of ``circuit.draw()`` or ``print(circuit)`` to render a drawing of circuits"
msgstr ""

#: ../../release_notes.rst:22960
msgid "A visualizer for drawing the DAG representation of a circuit"
msgstr ""

#: ../../release_notes.rst:22961
msgid "A new quantum state plot type for hinton diagrams in the local matplotlib based state plots"
msgstr ""

#: ../../release_notes.rst:22963
msgid "2 new constructor methods off the ``QuantumCircuit`` class ``from_qasm_str()`` and ``from_qasm_file()`` which let you easily create a circuit object from OpenQASM"
msgstr ""

#: ../../release_notes.rst:22966
msgid "A new function ``plot_bloch_multivector()`` to plot Bloch vectors from a tensored state vector or density matrix"
msgstr ""

#: ../../release_notes.rst:22968
msgid "Per-shot measurement results are available in simulators and select devices. These can be accessed by setting the ``memory`` kwarg to ``True`` when calling ``compile()`` or ``execute()`` and then accessed using the ``get_memory()`` method on the ``Result`` object."
msgstr ""

#: ../../release_notes.rst:22972
msgid "A ``qiskit.quantum_info`` module with revamped Pauli objects and methods for working with quantum states"
msgstr ""

#: ../../release_notes.rst:22974
msgid "New transpile passes for circuit analysis and transformation: ``CommutationAnalysis``, ``CommutationTransformation``, ``CXCancellation``, ``Decompose``, ``Unroll``, ``Optimize1QGates``, ``CheckMap``, ``CXDirection``, ``BarrierBeforeFinalMeasurements``"
msgstr ""

#: ../../release_notes.rst:22978
msgid "New alternative swap mapper passes in the transpiler: ``BasicSwap``, ``LookaheadSwap``, ``StochasticSwap``"
msgstr ""

#: ../../release_notes.rst:22980
msgid "More advanced transpiler infrastructure with support for analysis passes, transformation passes, a global ``property_set`` for the pass manager, and repeat-until control of passes"
msgstr ""

#: ../../release_notes.rst:22989
msgid "As part of the 0.7 release the following things have been deprecated and will either be removed or changed in a backwards incompatible manner in a future release. While not strictly necessary these are things to adjust for before the next release to avoid a breaking change."
msgstr ""

#: ../../release_notes.rst:22994
msgid "``plot_circuit()``, ``latex_circuit_drawer()``, ``generate_latex_source()``, and ``matplotlib_circuit_drawer()`` from qiskit.tools.visualization are deprecated. Instead the ``circuit_drawer()`` function from the same module should be used, there are kwarg options to mirror the functionality of all the deprecated functions."
msgstr ""

#: ../../release_notes.rst:22999
msgid "The current default output of ``circuit_drawer()`` (using latex and falling back on python) is deprecated and will be changed to just use the ``text`` output by default in future releases."
msgstr ""

#: ../../release_notes.rst:23002
msgid "The ``qiskit.wrapper.load_qasm_string()`` and ``qiskit.wrapper.load_qasm_file()`` functions are deprecated and the ``QuantumCircuit.from_qasm_str()`` and ``QuantumCircuit.from_qasm_file()`` constructor methods should be used instead."
msgstr ""

#: ../../release_notes.rst:23007
msgid "The ``plot_barriers`` and ``reverse_bits`` keys in the ``style`` kwarg dictionary are deprecated, instead the ``qiskit.tools.visualization.circuit_drawer()`` kwargs ``plot_barriers`` and ``reverse_bits`` should be used instead."
msgstr ""

#: ../../release_notes.rst:23011
msgid "The functions ``plot_state()`` and ``iplot_state()`` have been depreciated. Instead the functions ``plot_state_*()`` and ``iplot_state_*()`` should be called for the visualization method required."
msgstr ""

#: ../../release_notes.rst:23014
msgid "The ``skip_transpiler`` argument has been deprecated from ``compile()`` and ``execute()``. Instead you can use the ``PassManager`` directly, just set the ``pass_manager`` to a blank ``PassManager`` object with ``PassManager()``"
msgstr ""

#: ../../release_notes.rst:23017
msgid "The ``transpile_dag()`` function ``format`` kwarg for emitting different output formats is deprecated, instead you should convert the default output ``DAGCircuit`` object to the desired format."
msgstr ""

#: ../../release_notes.rst:23020
msgid "The unrollers have been deprecated, moving forward only DAG to DAG unrolling will be supported."
msgstr ""

#: ../../release_notes.rst:23023
msgid "Please note that some backwards-incompatible changes have been made during this release. The following notes contain information on how to adapt to these changes."
msgstr ""

#: ../../release_notes.rst:23028
msgid "Changes to Result objects"
msgstr ""

#: ../../release_notes.rst:23030
msgid "As part of the rewrite of the Results object to be more consistent and a stable interface moving forward a few changes have been made to how you access the data stored in the result object. First the ``get_data()`` method has been renamed to just ``data()``. Accompanying that change is a change in the data format returned by the function. It is now returning the raw data from the backends instead of doing any post-processing. For example, in previous versions you could call::"
msgstr ""

#: ../../release_notes.rst:23042
msgid "and that would return the unitary matrix like::"
msgstr ""

#: ../../release_notes.rst:23046
msgid "But now if you call (with the renamed method)::"
msgstr ""

#: ../../release_notes.rst:23050
msgid "it will return something like::"
msgstr ""

#: ../../release_notes.rst:23054
msgid "To get the post processed results in the same format as before the 0.7 release you must use the ``get_counts()``, ``get_statevector()``, and ``get_unitary()`` methods on the result object instead of ``get_data()['counts']``, ``get_data()['statevector']``, and ``get_data()['unitary']`` respectively."
msgstr ""

#: ../../release_notes.rst:23059
msgid "Additionally, support for ``len()`` and indexing on a ``Result`` object has been removed. Instead you should deal with the output from the post processed methods on the Result objects."
msgstr ""

#: ../../release_notes.rst:23063
msgid "Also, the ``get_snapshot()`` and ``get_snapshots()`` methods from the ``Result`` class have been removed. Instead you can access the snapshots using ``Result.data()['snapshots']``."
msgstr ""

#: ../../release_notes.rst:23069
msgid "Changes to Visualization"
msgstr ""

#: ../../release_notes.rst:23071
msgid "The largest change made to visualization in the 0.7 release is the removal of Matplotlib and other visualization dependencies from the project requirements. This was done to simplify the requirements and configuration required for installing Qiskit. If you plan to use any visualizations (including all the jupyter magics) except for the ``text``, ``latex``, and ``latex_source`` output for the circuit drawer you'll you must manually ensure that the visualization dependencies are installed. You can leverage the optional requirements to the Qiskit Terra package to do this::"
msgstr ""

#: ../../release_notes.rst:23082
msgid "Aside from this there have been changes made to several of the interfaces as part of the stabilization which may have an impact on existing code. The first is the ``basis`` kwarg in the ``circuit_drawer()`` function is no longer accepted. If you were relying on the ``circuit_drawer()`` to adjust the basis gates used in drawing a circuit diagram you will have to do this priort to calling ``circuit_drawer()``. For example::"
msgstr ""

#: ../../release_notes.rst:23092
msgid "will have to be adjusted to be::"
msgstr ""

#: ../../release_notes.rst:23101
msgid "Moving forward the ``circuit_drawer()`` function will be the sole interface for circuit drawing in the visualization module. Prior to the 0.7 release there were several other functions which either used different output backends or changed the output for drawing circuits. However, all those other functions have been deprecated and that functionality has been integrated as options on ``circuit_drawer()``."
msgstr ""

#: ../../release_notes.rst:23108
msgid "For the other visualization functions, ``plot_histogram()`` and ``plot_state()`` there are also a few changes to check when upgrading. First is the output from these functions has changed, in prior releases these would interactively show the output visualization. However that has changed to instead return a ``matplotlib.Figure`` object. This provides much more flexibility and options to interact with the visualization prior to saving or showing it. This will require adjustment to how these functions are consumed. For example, prior to this release when calling::"
msgstr ""

#: ../../release_notes.rst:23120
msgid "would open up new windows (depending on matplotlib backend) to display the visualization. However starting in the 0.7 you'll have to call ``show()`` on the output to mirror this behavior. For example::"
msgstr ""

#: ../../release_notes.rst:23134
msgid "Note that this is only for when running outside of Jupyter. No adjustment is required inside a Jupyter environment because Jupyter notebooks natively understand how to render ``matplotlib.Figure`` objects."
msgstr ""

#: ../../release_notes.rst:23138
msgid "However, returning the Figure object provides additional flexibility for dealing with the output. For example instead of just showing the figure you can now directly save it to a file by leveraging the ``savefig()`` method. For example::"
msgstr ""

#: ../../release_notes.rst:23148
msgid "The other key aspect which has changed with these functions is when running under jupyter. In the 0.6 release ``plot_state()`` and ``plot_histogram()`` when running under jupyter the default behavior was to use the interactive Javascript plots if the externally hosted Javascript library for rendering the visualization was reachable over the network. If not it would just use the matplotlib version. However in the 0.7 release this no longer the case, and separate functions for the interactive plots, ``iplot_state()`` and ``iplot_histogram()`` are to be used instead. ``plot_state()`` and ``plot_histogram()`` always use the matplotlib versions."
msgstr ""

#: ../../release_notes.rst:23158
msgid "Additionally, starting in this release the ``plot_state()`` function is deprecated in favor of calling individual methods for each method of plotting a quantum state. While the ``plot_state()`` function will continue to work until the 0.9 release, it will emit a warning each time it is used. The"
msgstr ""

#: ../../release_notes.rst:23174
msgid "The same is true for the interactive JS equivalent, ``iplot_state()``. The function names are all the same, just with a prepended `i` for each function. For example, ``iplot_state(rho, method='paulivec')`` is ``iplot_state_paulivec(rho)``."
msgstr ""

#: ../../release_notes.rst:23180
msgid "Changes to Backends"
msgstr ""

#: ../../release_notes.rst:23182
msgid "With the improvements made in the 0.7 release there are a few things related to backends to keep in mind when upgrading. The biggest change is the restructuring of the provider instances in the root  ``qiskit``` namespace. The ``Aer`` provider is not installed by default and requires the installation of the ``qiskit-aer`` package. This package contains the new high performance fully featured simulator. If you installed via ``pip install qiskit`` you'll already have this installed. The python simulators are now available under ``qiskit.BasicAer`` and the old C++ simulators are available with ``qiskit.LegacySimulators``. This also means that the implicit fallback to python based simulators when the C++ simulators are not found doesn't exist anymore. If you ask for a local C++ based simulator backend, and it can't be found an exception will be raised instead of just using the python simulator instead."
msgstr ""

#: ../../release_notes.rst:23196
msgid "Additionally the previously deprecation top level functions ``register()`` and ``available_backends()`` have been removed. Also, the deprecated ``backend.parameters()`` and ``backend.calibration()`` methods have been removed in favor of ``backend.properties()``. You can refer to the 0.6 release notes section :ref:`backends` for more details on these changes."
msgstr ""

#: ../../release_notes.rst:23202
msgid "The ``backend.jobs()`` and ``backend.retrieve_jobs()`` calls no longer return results from those jobs. Instead you must call the ``result()`` method on the returned jobs objects."
msgstr ""

#: ../../release_notes.rst:23207
msgid "Changes to the compiler, transpiler, and unrollers"
msgstr ""

#: ../../release_notes.rst:23209
msgid "As part of an effort to stabilize the compiler interfaces there have been several changes to be aware of when leveraging the compiler functions. First it is important to note that the ``qiskit.transpiler.transpile()`` function now takes a QuantumCircuit object (or a list of them) and returns a QuantumCircuit object (or a list of them). The DAG processing is done internally now."
msgstr ""

#: ../../release_notes.rst:23216
msgid "You can also easily switch between circuits, DAGs, and Qobj now using the functions in ``qiskit.converters``."
msgstr ""

#: ../../release_notes.rst:23228
msgid "Aer provides three simulator backends:"
msgstr ""

#: ../../release_notes.rst:23230
msgid "``QasmSimulator``: simulate experiments and return measurement outcomes"
msgstr ""

#: ../../release_notes.rst:23231
msgid "``StatevectorSimulator``: return the final statevector for a quantum circuit acting on the all zero state"
msgstr ""

#: ../../release_notes.rst:23233
msgid "``UnitarySimulator``: return the unitary matrix for a quantum circuit"
msgstr ""

#: ../../release_notes.rst:23235
msgid "``noise`` module: contains advanced noise modeling features for the ``QasmSimulator``"
msgstr ""

#: ../../release_notes.rst:23238
msgid "``NoiseModel``, ``QuantumError``, ``ReadoutError`` classes for simulating a Qiskit quantum circuit in the presence of errors"
msgstr ""

#: ../../release_notes.rst:23240
msgid "``errors`` submodule including functions for generating ``QuantumError`` objects for the following types of quantum errors: Kraus, mixed unitary, coherent unitary, Pauli, depolarizing, thermal relaxation, amplitude damping, phase damping, combined phase and amplitude damping"
msgstr ""

#: ../../release_notes.rst:23244
msgid "``device`` submodule for automatically generating a noise model based on the ``BackendProperties`` of a device"
msgstr ""

#: ../../release_notes.rst:23247
msgid "``utils`` module:"
msgstr ""

#: ../../release_notes.rst:23249
msgid "``qobj_utils`` provides functions for directly modifying a Qobj to insert special simulator instructions not yet supported through the Qiskit Terra API."
msgstr ""

#: ../../release_notes.rst:23254
msgid "Aqua 0.4"
msgstr ""

#: ../../release_notes.rst:23259
msgid "Programmatic APIs for algorithms and components -- each component can now be instantiated and initialized via a single (non-empty) constructor call"
msgstr ""

#: ../../release_notes.rst:23261
msgid "``QuantumInstance`` API for algorithm/backend decoupling -- ``QuantumInstance`` encapsulates a backend and its settings"
msgstr ""

#: ../../release_notes.rst:23263
msgid "Updated documentation and Jupyter Notebooks illustrating the new programmatic APIs"
msgstr ""

#: ../../release_notes.rst:23265
msgid "Transparent parallelization for gradient-based optimizers"
msgstr ""

#: ../../release_notes.rst:23266
msgid "Multiple-Controlled-NOT (cnx) operation"
msgstr ""

#: ../../release_notes.rst:23267
msgid "Pluggable algorithmic component ``RandomDistribution``"
msgstr ""

#: ../../release_notes.rst:23268
msgid "Concrete implementations of ``RandomDistribution``: ``BernoulliDistribution``, ``LogNormalDistribution``, ``MultivariateDistribution``, ``MultivariateNormalDistribution``, ``MultivariateUniformDistribution``, ``NormalDistribution``, ``UniformDistribution``, and ``UnivariateDistribution``"
msgstr ""

#: ../../release_notes.rst:23273
msgid "Concrete implementations of ``UncertaintyProblem``: ``FixedIncomeExpectedValue``, ``EuropeanCallExpectedValue``, and ``EuropeanCallDelta``"
msgstr ""

#: ../../release_notes.rst:23276
msgid "Amplitude Estimation algorithm"
msgstr ""

#: ../../release_notes.rst:23277
msgid "Qiskit Optimization: New Ising models for optimization problems exact cover, set packing, vertex cover, clique, and graph partition"
msgstr ""

#: ../../release_notes.rst:23279
msgid "Qiskit AI:"
msgstr ""

#: ../../release_notes.rst:23281
msgid "New feature maps extending the ``FeatureMap`` pluggable interface: ``PauliExpansion`` and ``PauliZExpansion``"
msgstr ""

#: ../../release_notes.rst:23283
msgid "Training model serialization/deserialization mechanism"
msgstr ""

#: ../../release_notes.rst:23285
msgid "Qiskit Finance:"
msgstr ""

#: ../../release_notes.rst:23287
msgid "Amplitude estimation for Bernoulli random variable: illustration of amplitude estimation on a single qubit problem"
msgstr ""

#: ../../release_notes.rst:23289
msgid "Loading of multiple univariate and multivariate random distributions"
msgstr ""

#: ../../release_notes.rst:23290
msgid "European call option: expected value and delta (using univariate distributions)"
msgstr ""

#: ../../release_notes.rst:23292
msgid "Fixed income asset pricing: expected value (using multivariate distributions)"
msgstr ""

#: ../../release_notes.rst:23295
msgid "The Pauli string in ``Operator`` class is aligned with Terra 0.7. Now the order of a n-qubit pauli string is ``q_{n-1}...q{0}`` Thus, the (de)serialier (``save_to_dict`` and ``load_from_dict``) in the ``Operator`` class are also changed to adopt the changes of ``Pauli`` class."
msgstr ""

#: ../../release_notes.rst:23303
msgid "``HartreeFock`` component of pluggable type ``InitialState`` moved to Qiskit Chemistry"
msgstr ""

#: ../../release_notes.rst:23305
msgid "``UCCSD`` component of pluggable type ``VariationalForm`` moved to Qiskit Chemistry"
msgstr ""

#: ../../release_notes.rst:23311
msgid "Qiskit 0.6"
msgstr ""

#: ../../release_notes.rst:23314
msgid "Terra 0.6"
msgstr ""

#: ../../release_notes.rst:23319
msgid "This release includes a redesign of internal components centered around a new, formal communication format (Qobj), along with long awaited features to improve the user experience as a whole. The highlights, compared to the 0.5 release, are:"
msgstr ""

#: ../../release_notes.rst:23324
msgid "Improvements for inter-operability (based on the Qobj specification) and extensibility (facilities for extending Qiskit with new backends in a seamless way)"
msgstr ""

#: ../../release_notes.rst:23327
msgid "New options for handling credentials and authentication for the IBM Q backends, aimed at simplifying the process and supporting automatic loading of user credentials"
msgstr ""

#: ../../release_notes.rst:23330
msgid "A revamp of the visualization utilities: stylish interactive visualizations are now available for Jupyter users, along with refinements for the circuit drawer (including a matplotlib-based version)"
msgstr ""

#: ../../release_notes.rst:23333
msgid "Performance improvements centered around circuit transpilation: the basis for a more flexible and modular architecture have been set, including parallelization of the circuit compilation and numerous optimizations"
msgstr ""

#: ../../release_notes.rst:23341
msgid "Please note that some backwards-incompatible changes have been introduced during this release -- the following notes contain information on how to adapt to the new changes."
msgstr ""

#: ../../release_notes.rst:23346
msgid "Removal of ``QuantumProgram``"
msgstr ""

#: ../../release_notes.rst:23348
msgid "As hinted during the 0.5 release, the deprecation of the  ``QuantumProgram`` class has now been completed and is no longer available, in favor of working with the individual components (:class:`~qiskit.backends.basejob.BaseJob`, :class:`~qiskit._quantumcircuit.QuantumCircuit`, :class:`~qiskit._classicalregister.ClassicalRegister`, :class:`~qiskit._quantumregister.QuantumRegister`, :mod:`~qiskit`) directly."
msgstr ""

#: ../../release_notes.rst:23356
msgid "Please check the :ref:`0.5 release notes <quantum-program-0-5>` and the examples for details about the transition::"
msgstr ""

#: ../../release_notes.rst:23381
msgid "IBM Q Authentication and ``Qconfig.py``"
msgstr ""

#: ../../release_notes.rst:23383
msgid "The managing of credentials for authenticating when using the IBM Q backends has been expanded, and there are new options that can be used for convenience:"
msgstr ""

#: ../../release_notes.rst:23386
msgid "save your credentials in disk once, and automatically load them in future sessions. This provides a one-off mechanism::"
msgstr ""

#: ../../release_notes.rst:23392
msgid "afterwards, your credentials can be automatically loaded from disk by invoking :meth:`~qiskit.backends.ibmq.ibmqprovider.IBMQ.load_accounts`::"
msgstr ""

#: ../../release_notes.rst:23398
msgid "or you can load only specific accounts if you only want to use those in a session::"
msgstr ""

#: ../../release_notes.rst:23402
msgid "use environment variables. If ``QE_TOKEN`` and ``QE_URL`` is set, the ``IBMQ.load_accounts()`` call will automatically load the credentials from them."
msgstr ""

#: ../../release_notes.rst:23406
msgid "Additionally, the previous method of having a ``Qconfig.py`` file in the program folder and passing the credentials explicitly is still supported."
msgstr ""

#: ../../release_notes.rst:23413
msgid "Working with backends"
msgstr ""

#: ../../release_notes.rst:23415
msgid "A new mechanism has been introduced in Terra 0.6 as the recommended way for obtaining a backend, allowing for more powerful and unified filtering and integrated with the new credentials system. The previous top-level methods :meth:`~qiskit.wrapper._wrapper.register`, :meth:`~qiskit.wrapper._wrapper.available_backends` and :meth:`~qiskit.wrapper._wrapper.get_backend` are still supported, but will deprecated in upcoming versions in favor of using the `qiskit.IBMQ` and `qiskit.Aer` objects directly, which allow for more complex filtering."
msgstr ""

#: ../../release_notes.rst:23424
msgid "For example, to list and use a local backend::"
msgstr ""

#: ../../release_notes.rst:23431
msgid "And for listing and using remote backends::"
msgstr ""

#: ../../release_notes.rst:23439
msgid "Please note as well that the names of the local simulators have been simplified. The previous names can still be used, but it is encouraged to use the new, shorter names:"
msgstr ""

#: ../../release_notes.rst:23444 ../../release_notes.rst:23481
msgid "Qiskit Terra 0.5"
msgstr ""

#: ../../release_notes.rst:23446
msgid "'local_qasm_simulator'"
msgstr ""

#: ../../release_notes.rst:23446
msgid "'qasm_simulator'"
msgstr ""

#: ../../release_notes.rst:23447
msgid "'local_statevector_simulator'"
msgstr ""

#: ../../release_notes.rst:23447
msgid "'statevector_simulator'"
msgstr ""

#: ../../release_notes.rst:23448
msgid "'local_unitary_simulator_py'"
msgstr ""

#: ../../release_notes.rst:23448
msgid "'unitary_simulator'"
msgstr ""

#: ../../release_notes.rst:23453
msgid "Backend and Job API changes"
msgstr ""

#: ../../release_notes.rst:23455
msgid "Jobs submitted to IBM Q backends have improved capabilities. It is possible to cancel them and replenish credits (``job.cancel()``), and to retrieve previous jobs executed on a specific backend either by job id (``backend.retrieve_job(job_id)``) or in batch of latest jobs (``backend.jobs(limit)``)"
msgstr ""

#: ../../release_notes.rst:23461
msgid "Properties for checking each individual job status (``queued``, ``running``, ``validating``, ``done`` and ``cancelled``) no longer exist. If you want to check the job status, use the identity comparison against ``job.status``::"
msgstr ""

#: ../../release_notes.rst:23472
msgid "Please consult the new documentation of the :class:`~qiskit.backends.ibmq.ibmqjob.IBMQJob` class to get further insight in how to use the simplified API."
msgstr ""

#: ../../release_notes.rst:23476
msgid "A number of members of :class:`~qiskit.backends.basebackend.BaseBackend` and :class:`~qiskit.backends.basejob.BaseJob` are no longer properties, but methods, and as a result they need to be invoked as functions."
msgstr ""

#: ../../release_notes.rst:23483
msgid "backend.name"
msgstr ""

#: ../../release_notes.rst:23483
msgid "backend.name()"
msgstr ""

#: ../../release_notes.rst:23484
msgid "backend.status"
msgstr ""

#: ../../release_notes.rst:23484
msgid "backend.status()"
msgstr ""

#: ../../release_notes.rst:23485
msgid "backend.configuration"
msgstr ""

#: ../../release_notes.rst:23485
msgid "backend.configuration()"
msgstr ""

#: ../../release_notes.rst:23486
msgid "backend.calibration"
msgstr ""

#: ../../release_notes.rst:23486
msgid "backend.properties()"
msgstr ""

#: ../../release_notes.rst:23487
msgid "backend.parameters"
msgstr ""

#: ../../release_notes.rst:23487
msgid "backend.jobs() backend.retrieve_job(job_id)"
msgstr ""

#: ../../release_notes.rst:23489
msgid "job.status"
msgstr ""

#: ../../release_notes.rst:23489
msgid "job.status()"
msgstr ""

#: ../../release_notes.rst:23490
msgid "job.cancelled"
msgstr ""

#: ../../release_notes.rst:23490
msgid "job.queue_position()"
msgstr ""

#: ../../release_notes.rst:23491
msgid "job.running"
msgstr ""

#: ../../release_notes.rst:23491
msgid "job.cancel()"
msgstr ""

#: ../../release_notes.rst:23492
msgid "job.queued"
msgstr ""

#: ../../release_notes.rst:23493
msgid "job.done"
msgstr ""

#: ../../release_notes.rst:23498
msgid "Better Jupyter tools"
msgstr ""

#: ../../release_notes.rst:23500
msgid "The new release contains improvements to the user experience while using Jupyter notebooks."
msgstr ""

#: ../../release_notes.rst:23503
msgid "First, new interactive visualizations of counts histograms and quantum states are provided: :meth:`~qiskit.tools.visualization.plot_histogram` and :meth:`~qiskit.tools.visualization.plot_state`. These methods will default to the new interactive kind when the environment is Jupyter and internet connection exists."
msgstr ""

#: ../../release_notes.rst:23510
#, python-format
msgid "Secondly, the new release provides Jupyter cell magics for keeping track of the progress of your code. Use ``%%qiskit_job_status`` to keep track of the status of submitted jobs to IBM Q backends. Use ``%%qiskit_progress_bar`` to keep track of the progress of compilation/execution."
msgstr ""

#: ../../release_notes.rst:23519
msgid "Qiskit 0.5"
msgstr ""

#: ../../release_notes.rst:23522
msgid "Terra 0.5"
msgstr ""

#: ../../release_notes.rst:23527
msgid "This release brings a number of improvements to Qiskit, both for the user experience and under the hood. Please refer to the full changelog for a detailed description of the changes - the highlights are:"
msgstr ""

#: ../../release_notes.rst:23531
msgid "new ``statevector`` :mod:`simulators <qiskit.backends.local>` and feature and performance improvements to the existing ones (in particular to the C++ simulator), along with a reorganization of how to work with backends focused on extensibility and flexibility (using aliases and backend providers)"
msgstr ""

#: ../../release_notes.rst:23535
msgid "reorganization of the asynchronous features, providing a friendlier interface for running jobs asynchronously via :class:`Job` instances"
msgstr ""

#: ../../release_notes.rst:23537
msgid "numerous improvements and fixes throughout the Terra as a whole, both for convenience of the users (such as allowing anonymous registers) and for enhanced functionality (such as improved plotting of circuits)"
msgstr ""

#: ../../release_notes.rst:23545
msgid "Please note that several backwards-incompatible changes have been introduced during this release as a result of the ongoing development. While some of these features will continue to be supported during a period of time before being fully deprecated, it is recommended to update your programs in order to prepare for the new versions and take advantage of the new functionality."
msgstr ""

#: ../../release_notes.rst:23555
msgid "``QuantumProgram`` changes"
msgstr ""

#: ../../release_notes.rst:23557
msgid "Several methods of the :class:`~qiskit.QuantumProgram` class are on their way to being deprecated:"
msgstr ""

#: ../../release_notes.rst:23560
msgid "methods for interacting **with the backends and the API**:"
msgstr ""

#: ../../release_notes.rst:23562
msgid "The recommended way for opening a connection to the IBM Q API and for using the backends is through the top-level functions directly instead of the ``QuantumProgram`` methods. In particular, the :func:`qiskit.register` method provides the equivalent of the previous :func:`qiskit.QuantumProgram.set_api` call. In a similar vein, there is a new :func:`qiskit.available_backends`, :func:`qiskit.get_backend` and related functions for querying the available backends directly. For example, the following snippet for version 0.4::"
msgstr ""

#: ../../release_notes.rst:23579 ../../release_notes.rst:23597
msgid "would be equivalent to the following snippet for version 0.5::"
msgstr ""

#: ../../release_notes.rst:23588
msgid "methods for **compiling and executing programs**:"
msgstr ""

#: ../../release_notes.rst:23590
msgid "The top-level functions now also provide equivalents for the :func:`qiskit.QuantumProgram.compile` and :func:`qiskit.QuantumProgram.execute` methods. For example, the following snippet from version 0.4::"
msgstr ""

#: ../../release_notes.rst:23603
msgid "In general, from version 0.5 onwards we encourage to try to make use of the individual objects and classes directly instead of relying on ``QuantumProgram``. For example, a :class:`~qiskit.QuantumCircuit` can be instantiated and constructed by appending :class:`~qiskit.QuantumRegister`, :class:`~qiskit.ClassicalRegister`, and gates directly. Please check the update example in the Quickstart section, or the ``using_qiskit_core_level_0.py`` and ``using_qiskit_core_level_1.py`` examples on the main repository."
msgstr ""

#: ../../release_notes.rst:23613
msgid "Backend name changes"
msgstr ""

#: ../../release_notes.rst:23615
msgid "In order to provide a more extensible framework for backends, there have been some design changes accordingly:"
msgstr ""

#: ../../release_notes.rst:23618
msgid "**local simulator names**"
msgstr ""

#: ../../release_notes.rst:23620
msgid "The names of the local simulators have been homogenized in order to follow the same pattern: ``PROVIDERNAME_TYPE_simulator_LANGUAGEORPROJECT`` - for example, the C++ simulator previously named ``local_qiskit_simulator`` is now ``local_qasm_simulator_cpp``. An overview of the current simulators:"
msgstr ""

#: ../../release_notes.rst:23626
msgid "``QASM`` simulator is supposed to be like an experiment. You apply a circuit on some qubits, and observe measurement results - and you repeat for many shots to get a histogram of counts via ``result.get_counts()``."
msgstr ""

#: ../../release_notes.rst:23629
msgid "``Statevector`` simulator is to get the full statevector (:math:`2^n` amplitudes) after evolving the zero state through the circuit, and can be obtained via ``result.get_statevector()``."
msgstr ""

#: ../../release_notes.rst:23632
msgid "``Unitary`` simulator is to get the unitary matrix equivalent of the circuit, returned via ``result.get_unitary()``."
msgstr ""

#: ../../release_notes.rst:23634
msgid "In addition, you can get intermediate states from a simulator by applying a ``snapshot(slot)`` instruction at various spots in the circuit. This will save the current state of the simulator in a given slot, which can later be retrieved via ``result.get_snapshot(slot)``."
msgstr ""

#: ../../release_notes.rst:23639
msgid "**backend aliases**:"
msgstr ""

#: ../../release_notes.rst:23641
msgid "The SDK now provides an \"alias\" system that allows for automatically using the most performant simulator of a specific type, if it is available in your system. For example, with the following snippet::"
msgstr ""

#: ../../release_notes.rst:23649
msgid "the backend will be the C++ statevector simulator if available, falling back to the Python statevector simulator if not present."
msgstr ""

#: ../../release_notes.rst:23653
msgid "More flexible names and parameters"
msgstr ""

#: ../../release_notes.rst:23655
msgid "Several functions of the SDK have been made more flexible and user-friendly:"
msgstr ""

#: ../../release_notes.rst:23657
msgid "**automatic circuit and register names**"
msgstr ""

#: ../../release_notes.rst:23659
msgid ":class:`qiskit.ClassicalRegister`, :class:`qiskit.QuantumRegister` and :class:`qiskit.QuantumCircuit` can now be instantiated without explicitly giving them a name - a new autonaming feature will automatically assign them an identifier::"
msgstr ""

#: ../../release_notes.rst:23666
msgid "Please note as well that the order of the parameters have been swapped ``QuantumRegister(size, name)``."
msgstr ""

#: ../../release_notes.rst:23669
msgid "**methods accepting names or instances**"
msgstr ""

#: ../../release_notes.rst:23671
msgid "In combination with the autonaming changes, several methods such as :func:`qiskit.Result.get_data` now accept both names and instances for convenience. For example, when retrieving the results for a job that has a single circuit such as::"
msgstr ""

#: ../../release_notes.rst:23680
msgid "The following calls are equivalent::"
msgstr ""

