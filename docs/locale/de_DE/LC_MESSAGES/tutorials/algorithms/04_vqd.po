msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:25+0000\n"
"PO-Revision-Date: 2023-03-16 11:54\n"
"Last-Translator: \n"
"Language: de\n"
"Language-Team: German\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: de\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/04_vqd.po\n"
"X-Crowdin-File-ID: 9933\n"

#: ../../tutorials/algorithms/04_vqd.ipynb:10
msgid "This page was generated from `tutorials/algorithms/04_vqd.ipynb`__."
msgstr "Diese Seite wurde aus `tutorials/circuits_advanced/1_advanced_circuits.ipynb`__ generiert."

#: ../../tutorials/algorithms/04_vqd.ipynb:9
msgid "Variational Quantum Deflation (VQD) Algorithm"
msgstr "Variational Quantum Deflation (VQD) Algorithmus"

#: ../../tutorials/algorithms/04_vqd.ipynb:11
msgid "This notebook demostrates how to use Qiskit's implementation of the `Variational Quantum Deflation (VQD) <https://qiskit.org/documentation/stubs/qiskit.algorithms.eigensolvers.VQD.html>`__ algorithm for computing higher energy states of a Hamiltonian, as introduced in this `reference paper <https://arxiv.org/abs/1805.08138>`__."
msgstr ""

#: ../../tutorials/algorithms/04_vqd.ipynb:23
msgid "Introduction"
msgstr "Einführung"

#: ../../tutorials/algorithms/04_vqd.ipynb:25
msgid "VQD is a quantum algorithm that uses a variational technique to find the *k* eigenvalues of the Hamiltonian *H* of a given system."
msgstr "VQD ist ein Quantenalgorithmus, der eine Variationsmethode verwendet, um die *k* Eigenwerte des Hamiltonian *H* eines gegebenen Systems zu finden."

#: ../../tutorials/algorithms/04_vqd.ipynb:27
msgid "The algorithm computes excited state energies of generalized hamiltonians by optimizing over a modified cost function. Each successive eigenvalue is calculated iteratively by introducing an overlap term with all the previously computed eigenstates that must be minimized. This ensures that higher energy eigenstates are found."
msgstr "Der Algorithmus berechnet die angeregten Zustandsenergien von verallgemeinerten Hamiltonian durch Optimierung über eine modifizierte Kostenfunktion. Jeder aufeinanderfolgende Eigenwert wird iterativ berechnet, indem ein Überlappungsterm mit allen zuvor berechneten Eigenzuständen, die minimiert werden müssen, eingeführt wird. Dadurch wird sichergestellt, dass Eigenzustände mit höherer Energie gefunden werden."

#: ../../tutorials/algorithms/04_vqd.ipynb:39
msgid "Complete working example for VQD"
msgstr "Vollständiges Funktionsbeispiel für VQD"

#: ../../tutorials/algorithms/04_vqd.ipynb:50
msgid "The first step of the VQD workflow is to create a qubit operator, ansatz and optimizer. For this example, you can use the H2 molecule, which should already look familiar if you have completed the previous VQE tutorials:"
msgstr "Der erste Schritt des VQD-Arbeitsablaufs besteht darin, einen Qubit-Operator, einen Ansatz und einen Optimierer zu erstellen. Für dieses Beispiel können Sie das H2-Molekül verwenden, das Ihnen bereits bekannt vorkommen sollte, wenn Sie die vorherigen VQE-Tutorials absolviert haben:"

#: ../../tutorials/algorithms/04_vqd.ipynb:81
msgid "You can set up, for example, a ``TwoLocal`` ansatz with three qubits, and choose ``SLSQP`` as the optimization method."
msgstr "Sie können z. B. einen ``TwoLocal``-Ansatz mit drei Qubits aufstellen und ``SLSQP`` als Optimierungsmethode wählen."

#: ../../tutorials/algorithms/04_vqd.ipynb:117
msgid "The next step of the workflow is to define the required primitives for running ``VQD``. This algorithm requires two different primitive instances: one ``Estimator`` for computing the expectation values for the \"VQE part\" of the algorithm, and one ``Sampler``. The sampler will be passed along to the ``StateFidelity`` subroutine that will be used to compute the cost for higher energy states. There are several methods that you can use to compute state fidelities, but to keep things simple, you can use the ``ComputeUncompute`` method already available in ``qiskit.algorithm.state_fidelities``."
msgstr ""

#: ../../tutorials/algorithms/04_vqd.ipynb:144
msgid "In order to set up the VQD algorithm, it is important to define two additional inputs: the number of energy states to compute (``k``) and the ``betas`` defined in the original VQD paper. In this example, the number of states (``k``) will be set to three, which indicates that two excited states will be computed in addition to the ground state."
msgstr "Um den VQD-Algorithmus einzurichten, ist es wichtig, zwei zusätzliche Eingaben zu definieren: die Anzahl der zu berechnenden Energiezustände (``k``) und die ``Betas``, die in der ursprünglichen VQD-Veröffentlichung definiert wurden. In diesem Beispiel wird die Anzahl der Zustände (``k``) auf drei gesetzt, was bedeutet, dass zusätzlich zum Grundzustand zwei angeregte Zustände berechnet werden."

#: ../../tutorials/algorithms/04_vqd.ipynb:146
msgid "The ``betas`` balance the contribution of each overlap term to the cost function, and they are an optional argument in the ``VQD`` construction. If not set by the user, they can be autoevaluated for input operators of type ``SparsePauliOp``. Please note that if you want to set your own ``betas``, you should provide a list of values of length ``k``."
msgstr "Die ``betas`` gleichen den Beitrag jedes Überlappungsterms zur Kostenfunktion aus und sind ein optionales Argument in der ``VQD`` Konstruktion. Wenn sie nicht vom Benutzer gesetzt werden, können sie für Eingabeoperatoren vom Typ ``SparsePauliOp`` automatisch ausgewertet werden. Bitte beachten Sie, dass Sie, wenn Sie Ihre eigenen ``betas`` setzen wollen, eine Liste von Werten der Länge ``k`` bereitstellen sollten."

#: ../../tutorials/algorithms/04_vqd.ipynb:168
msgid "You are almost ready to run the VQD algorithm, but let's define a callback first to store intermediate values:"
msgstr ""

#: ../../tutorials/algorithms/04_vqd.ipynb:196
msgid "You can finally instantiate ``VQD`` and compute the eigenvalues for the chosen operator."
msgstr "Schließlich kann man ``VQD`` instanziieren und die Eigenwerte für den gewählten Operator berechnen."

#: ../../tutorials/algorithms/04_vqd.ipynb:221
msgid "You can see the three state energies as part of the ``VQD`` result:"
msgstr "Sie können die drei Zustandsenergien als Teil des ``VQD``-Ergebnisses sehen:"

#: ../../tutorials/algorithms/04_vqd.ipynb:266
msgid "And we can use the values stored by the callback to plot the energy convergence for each state:"
msgstr "Und wir können die durch den Callback gespeicherten Werte verwenden, um die Energiekonvergenz für jeden Zustand darzustellen:"

#: ../../tutorials/algorithms/04_vqd.ipynb:312
msgid "This molecule can be solved exactly using the ``NumPyEigensolver`` class, which will give a reference value that you can compare with the ``VQD`` result:"
msgstr "Dieses Molekül kann mit der Klasse ``NumPyEigensolver`` exakt gelöst werden, was einen Referenzwert ergibt, den man mit dem ``VQD``-Ergebnis vergleichen kann:"

#: ../../tutorials/algorithms/04_vqd.ipynb:338
msgid "Let's see a comparison of the exact result with the previously computed ``VQD`` eigenvalues:"
msgstr ""

#: ../../tutorials/algorithms/04_vqd.ipynb:387
msgid "As you can see, the result from VQD matches the values from the exact solution, and extends VQE to also compute excited states."
msgstr "Wie Sie sehen können, stimmt das Ergebnis von VQD mit den Werten der exakten Lösung überein und erweitert VQE, um auch angeregte Zustände zu berechnen."

