msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-02 16:44+0000\n"
"PO-Revision-Date: 2021-03-02 17:58\n"
"Last-Translator: \n"
"Language-Team: Bengali Language\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: bengali\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/the_elements.po\n"
"X-Crowdin-File-ID: 7220\n"
"Language: bn_BN\n"

#: ../../the_elements.rst:5
msgid "The Qiskit Elements"
msgstr "Qiskit এর উপাদানগুলো"

#: ../../the_elements.rst:14
msgid "Terra"
msgstr "টেরা"

#: ../../the_elements.rst:16
msgid "Terra, the ‘earth’ element, is the foundation on which the rest of Qiskit lies. Terra provides a bedrock for composing quantum programs at the level of circuits and pulses, to optimize them for the constraints of a particular device, and to manage the execution of batches of experiments on remote-access devices. Terra defines the interfaces for a desirable end-user experience, as well as the efficient handling of layers of optimization, pulse scheduling and backend communication."
msgstr "টেরা অর্থাৎ ‘মাটি’ হলো সেই উপাদান যাকে ভিত্তি করে সমস্ত কিছু তৈরি হয় এবং এক্ষেত্রে এটি Qiskit এর ভিত্তি। বর্তনী (সার্কিট) এবং পালস স্তরে কোয়ান্টাম নির্দেশমালা (প্রোগ্রাম) রচনা, সেগুলোকে কোনো নির্দিষ্ট যন্ত্রের (ডিভাইস) সীমাবদ্ধতা অনুযায়ী অনুকূলকরণ (অপ্টিমাইজেশন) করা, এবং কোনো দূরবর্তী (রিমোট অ্যাক্সেস) যন্ত্রে পরীক্ষানিরীক্ষা চালাতে টেরা ভিত্তি হিসেবে কাজ করে। টেরা একেবারে শেষ স্তরের ব্যবহারকারীদের জন্য ইন্টারফেস নির্ধারণ করে এবং অপ্টিমাইজেশন, পালস শিডিউলিং ও ব্যাকএন্ডের যোগাযোগ রক্ষা করার কাজগুলো দক্ষভাবে পরিচালনা করে।"

#: ../../the_elements.rst:23
msgid "Qiskit Terra is organized in six main modules:"
msgstr "Qiskit টেরা ৬ টি প্রধান মডিউল নিয়ে গঠিতঃ"

#: ../../the_elements.rst:25
msgid ":mod:`qiskit.circuit` A quantum circuit is a model for quantum computing in which a computation is done by performing a sequence of quantum operations (usually gates) on a register of qubits. A quantum circuit usually starts with the qubits in the :math:`|0,…,0>` state and these gates evolve the qubits to states that cannot be efficiently represented on a classical computer. To extract information on the state a quantum circuit must have a measurement which maps the outcomes (possible random due to the fundamental nature of quantum systems) to classical registers which can be efficiently represented."
msgstr ":mod:`qiskit.circuit` কোয়ান্টাম বর্তনী (সার্কিট) হলো কোয়ান্টাম কম্পিউটিংয়ের একটি মডেল যেখানে একটি কিউবিট রেজিস্টার এর ওপর বিভিন্ন কোয়ান্টাম অপারেশন (সাধারণত যুক্তিদ্বার বা গেইট) চালনা করা হয়। একটি কোয়ান্টাম সার্কিট সাধারণত কিউবিটের :math:`|0,…,0>` অবস্থায় সূচিত হয় এবং এই যুক্তিদ্বার (গেইট) গুলো কিউবিটকে বিভিন্ন অবস্থায় এমনভাবে চালনা করে যা ধ্রুপদী (ক্লাসিক্যাল) কম্পিউটারে সম্ভব নয়। কোয়ান্টাম বর্তনী (সার্কিট) থেকে বিভিন্ন অবস্থার (স্টেট) তথ্য সংগ্রহের জন্য একটি পরিমাপ (মেজারমেন্ট) থাকে যাতে এর ফলাফলগুলি (কোয়ান্টাম ব্যবস্থার মৌলিক ধর্মের কারণে দৈবচয়নকৃত) ক্লাসিক্যাল রেজিস্টারে প্রকাশ করা যায়।"

#: ../../the_elements.rst:34
msgid ":mod:`qiskit.pulse` A pulse schedule is set of pulses which are sent to a quantum experiment that are applied to a channel (experimental input line). This is a lower level than circuits and requires each gate in the circuit to be  represented as a set of pulses. At this level the experiments can be designed to reduce errors (dynamical decoupling, error mitigation, and optimal pulse shapes)."
msgstr ":mod:`qiskit.pulse` পালস সময়সূচী হলো এক সেট পালস যা কিনা কোয়ান্টাম পরীক্ষায় একটি চ্যানেলে (পরীক্ষামূলক ইনপুট লাইন) প্রয়োগ করা হয়। এটি সার্কিট এর চেয়ে নিচের স্তরে ব্যবহার করা হয়ে থাকে এবং এই স্তরে কোয়ান্টাম যুক্তিবর্তনীকে (গেইট) পালসের সেট হিসাবে দেখা হয়। এই স্তরে পরীক্ষাগুলোর মূল উদ্দেশ্য হলো ত্রুটি হ্রাস করা (ডাইনামিক্যাল ডিকাপলিং, এরর মিটিগেশন এবং অপটিমাল পালস শেইপস)।"

#: ../../the_elements.rst:40
msgid ":mod:`qiskit.transpiler` A major part of research on quantum computing is working out how to run a quantum circuits on real devices.  In these devices, experimental errors and decoherence introduce errors during computation. Thus, to obtain a robust implementation it is essential to reduce the number of gates and the overall running time of the quantum circuit. The transpiler introduces the concept of a pass manager to allow users to explore optimization and find better quantum circuits for their given algorithm. We call it a transpiler as the end result is still a circuit."
msgstr ":mod:`qiskit.transpiler` কোয়ান্টাম কম্পিউটিং নিয়ে গবেষণার একটি মূল অংশ হচ্ছে কীভাবে কোয়ান্টাম বর্তনীকে (সার্কিট) আসল ডিভাইস বা যন্ত্রে কার্যকর করা যাবে। গণনার সময় এসকল যন্ত্রে পরীক্ষামূলক ত্রুটি ও অসমদশা (ডিকোহেরেন্স) জনিত ত্রুটি দেখা যায়। তাই এটি ফলপ্রসূভাবে বাস্তবায়নের জন্য যুক্তিবর্তনীর (গেইট) সংখ্যা এবং কোয়ান্টাম বর্তনীর (সার্কিট) সার্বিক কার্যকর সময় (রানিং টাইম) হ্রাস করা প্রয়োজন। ট্রান্সপাইলার পাস ব্যবস্থাপক (ম্যানেজার) এর ধারণা দেয় যার মাধ্যমে ব্যবহারকারীরা অপ্টিমাইজেশন এবং কোনো অ্যালগরিদমের জন্য আরো ভালো কোয়ান্টাম বর্তনী (সার্কিট) পরীক্ষা করার সুযোগ পায়। এর ফলে একটি বর্তনী (সার্কিট) পাওয়া যায় তাই এটিকে ট্রান্সপাইলার বলা হয়।"

#: ../../the_elements.rst:49
msgid ":mod:`qiskit.providers` Once the user has made the circuits to run on the backend they need to have a convenient way of working with it. In Terra we do this using four parts:"
msgstr ":mod:`qiskit.providers` ব্যাকএন্ড এ রান করার জন্য বর্তনী (সার্কিট) তৈরি করার পর সেটিকে কার্যকরী করার কিছু উপায় আছে। টেরায় এটি চারটি ধাপে করা হয়ঃ"

#: ../../the_elements.rst:53
msgid "A ``Provider`` is an entity that implements the abstract base class :class:`~qiskit.providers.BaseProvider` and provides access to a group of different backends (for example, backends available through the `IBM Quantum <https://quantum-computing.ibm.com>`__). It interacts with those backends to, for example, find out which ones are available, or retrieve an instance of a particular backend."
msgstr ""

#: ../../the_elements.rst:59
msgid "A ``Backend`` is an entity that implements the abstract base class :class:`~qiskit.providers.BaseBackend` represent either a simulator or a real quantum computer and are responsible for running quantum circuits and returning results. They have a run method which takes in a `qobj` as input and returns a `BaseJob` object. This object allows asynchronous running of jobs for retrieving results from a backend when the job is completed."
msgstr "``Backend`` এর মাধ্যমে অ্যাবস্ট্রাক্ট বেজ ক্লাস :class:`~qiskit.providers.BaseBackend` বাস্তবায়ন হয়। এটি একটি সিমুলেটর বা প্রকৃত কোয়ান্টাম কম্পিউটার নির্দেশ করে এবং কোয়ান্টাম বর্তনী (সার্কিট) কার্যকর করা ও ফলাফল দেয়ার কাজটি করে থাকে। এতে কার্যকর করার একটি পদ্ধতি আছে যা একটি `qobj` (কোয়ান্টাম অবজেক্ট) কে ইনপুট হিসেবে নেয় এবং একটি `BaseJob` অবজেক্টকে ফলাফল হিসেবে ফেরত দেয়। এই অবজেক্টটি বিষমকালীন বা অ্যাসিনক্রোনাসভাবে জব সম্পাদনের মাধ্যমে ব্যাকএন্ড থেকে ফলাফল সংগ্রহের কাজটি করে যখন জব সম্পাদন শেষ হয়ে যায়।"

#: ../../the_elements.rst:66
msgid "``Job`` instances are implementations of the abstract base class :class:`~qiskit.providers.BaseJob` and can be thought of as the “ticket” for a submitted job. They find out the execution’s state at a given point in time (for example, if the job is queued, running, or has failed) and also allow control over the job."
msgstr "``Job`` ইন্সট্যান্সসমূহও অ্যাবস্ট্রাক্ট বেজ ক্লাস :class:`~qiskit.providers.BaseJob` এর অন্তর্ভুক্ত এবং প্রেরিত জবের জন্য “টিকেট” হিসেবে কাজ করে। এটি একটি নির্দিষ্ট সময়ে সম্পাদনার মান বা অবস্থা জানায় (যেমন, জবটি অপেক্ষমাণ, চলমান বা ব্যর্থ হয়েছে কিনা) এবং জবটি নিয়ন্ত্রণের অনুমতি দেয়।"

#: ../../the_elements.rst:71
msgid ":class:`~qiskit.result.Result` Once the job has finished Terra allows the results to be obtained from the remote backends using ``result = job.result()``. This result object holds the quantum data and the most common way of interacting with it is by using ``result.get_counts(circuit)``. This method allows the user to get the raw counts from the quantum circuit and use them for more analysis with quantum information tools provided by Terra."
msgstr ":class:`~qiskit.result.Result` জব সম্পাদন হয়ে গেলে টেরার সাহায্যে ``result = job.result()`` ব্যবহার করে ব্যাকএন্ড থেকে ফলাফল সংগ্রহ করা যায়। ফলাফলের অবজেক্টটি কোয়ান্টাম তথ্য সংরক্ষণ করে এবং ``result.get_counts(circuit)`` ব্যবহার করে এটি থেকে ফলাফলটি পাওয়া যায়। এই পদ্ধতিতে ব্যবহারকারী কোয়ান্টাম বর্তনীটির (সার্কিট) গণনাকৃত ফলাফল পেতে পারেন এবং সেটি পরবর্তীতে টেরার সাহায্যে কোয়ান্টাম তথ্য টুল সংক্রান্ত বিশ্লেষণে ব্যবহার করতে পারেন।"

#: ../../the_elements.rst:79
msgid ":mod:`qiskit.quantum_info` To perform more advanced algorithms and analysis of the circuits run on the quantum computer, it is important to have tools to implement simple quantum information tasks. These include methods to both estimate metrics and generate quantum states, operations, and channels."
msgstr ":mod:`qiskit.quantum_info` কোয়ান্টাম বর্তনীতে (সার্কিট) আরো উন্নত অ্যালগরিদম ও পরীক্ষা চালানোর জন্য, কোয়ান্টাম তথ্যসংক্রান্ত সাধারণ কার্যাবলি সম্পাদনের জন্য কিছু উপায় রয়েছে। যেমন, পদ্ধতি বা মেট্রিক নির্ধারণ এবং কোয়ান্টাম স্টেট বা অবস্থা, অপারেশন ও চ্যানেল তৈরি করা।"

#: ../../the_elements.rst:85
msgid ":mod:`qiskit.visualization` In Terra we have many tools to visualize a quantum circuit. This allows a quick inspection of the quantum circuit to make sure it is what the user wanted to implement. There is a text, python and latex version. Once the circuit has run it is important to be able to view the output. There is a simple function (:func:`~qiskit.visualization.plot_histogram`) to plot the results from a quantum circuit including an interactive version. There is also a function :func:`~qiskit.visualization.plot_state` and :func:`~qiskit.visualization.plot_bloch_vector` that allow the plotting of a quantum state."
msgstr ":mod:`qiskit.visualization` টেরার সাহায্যে কোয়ান্টাম বর্তনী (সার্কিট) দৃশ্যায়িত করার জন্য অনেকগুলো উপায় রয়েছে। এর ফলে ব্যবহারকারী দ্রুত পর্যবেক্ষণ করতে পারেন যে তিনি যা চাইছেন তা কার্যকর হচ্ছে কিনা। এর একটি টেক্সট, পাইথন এবং ল্যাটেক সংস্করণ রয়েছে। বর্তনীটি (সার্কিট) একবার রান বা কার্যকর হয়ে গেলে ফলাফল কেমন হয়েছে তা দেখা জরুরি। কোয়ান্টাম বর্তনী (সার্কিট) থেকে ফলাফলের লেখ চিত্রায়নের জন্য একটি সহজ ফাংশন (:func:`~qiskit.visualization.plot_histogram`) রয়েছে। কোয়ান্টাম দশা চিত্রায়নের জন্য :func:`~qiskit.visualization.plot_state` এবং :func:`~qiskit.visualization.plot_bloch_vector` নামে আরো দুটি ফাংশন রয়েছে।"

#: ../../the_elements.rst:98
msgid "Aer"
msgstr "এয়ার"

#: ../../the_elements.rst:100
msgid "Aer, the ‘air’ element, permeates all Qiskit elements. To really speed up development of quantum computers we need better simulators, emulators and debuggers. Aer helps us understand the limits of classical processors by demonstrating to what extent they can mimic quantum computation. Furthermore, we can use Aer to verify that current and near-future quantum computers function correctly. This can be done by stretching the limits of simulation, and by simulating the effects of realistic noise on the computation."
msgstr "এয়ার, 'বায়ু' উপাদানটি Qiskit এর সব উপাদানকে ধারণ করে। কোয়ান্টাম কম্পিউটারসমূহের অগ্রগতি সাধনের জন্য আমাদের উন্নত সিমুলেটর, এমুলেটর এবং ডিবাগার প্রয়োজন। ক্লাসিক্যাল বা ধ্রুপদী প্রসেসরগুলোর কোয়ান্টাম কম্পিউটেশনের সক্ষমতা কতটুকু অর্জন করতে পারে তা দিয়ে এয়ার ধ্রুপদী প্রসেসরগুলোর সীমাবদ্ধতা বুঝতে সাহায্য করে। উপরন্তু এয়ারের সাহায্যে বর্তমান এবং নিকটবর্তী কোয়ান্টাম কম্পিউটারগুলো সঠিকভাবে কাজ করবে কিনা তা নিরূপণ করা যায়। এটি সিমুলেশনের সীমা প্রসারিত করে ও গণনার ওপর সত্যিকারের দূষণ বা ত্রুটির প্রভাব সিমুলেশনের মাধ্যমে করা যেতে পারে।"

#: ../../the_elements.rst:107
msgid "Aer provides a high performance simulator framework for quantum circuits using the Qiskit software stack. It contains optimized C++ simulator backends for executing circuits compiled in Terra. Aer also provides tools for constructing highly configurable noise models for performing realistic noisy simulations of the errors that occur during execution on real devices."
msgstr "এয়ার Qiskit সফটওয়্যার স্ট্যাকের একটি উচ্চ কর্মদক্ষতাসম্পন্ন সিমুলেটর ফ্রেমওয়ার্ক। এতে অপ্টিমাইজ করা সি++ সিমুলেটর ব্যাকএন্ড রয়েছে যা দিয়ে টেরায় কম্পাইল করা বর্তনী (সার্কিট) কার্যকর করা যায়। সত্যিকারের ডিভাইসে কেমন ত্রুটি ধরা পড়ে তা সিমুলেট করার জন্য এয়ার উচ্চ কনফিগারেশন সম্পন্ন নয়েজ মডেল তৈরি করতে সাহায্য করে।"

#: ../../the_elements.rst:113
msgid "Qiskit Aer includes three high performance simulator backends:"
msgstr "Qiskit এয়ারে তিনটি উচ্চ কর্মদক্ষতাসম্পন্ন সিমুলেটর ব্যাকএন্ড অন্তর্ভুক্তঃ"

#: ../../the_elements.rst:115
msgid ":class:`~qiskit.providers.aer.QasmSimulator` Allows ideal and noisy multi-shot execution of qiskit circuits and returns counts or memory. There are multiple methods that can be used that simulate different circuits more efficiently. These include:"
msgstr ""

#: ../../the_elements.rst:120
msgid "*statevector* - Uses a dense statevector simulation."
msgstr "*statevector* - এটি একটি ঘন অবস্থা ভেক্টর সিমুলেশন ব্যবহার করে।"

#: ../../the_elements.rst:121
msgid "*stabilizer* - Uses a Clifford stabilizer state simulator that is only valid for Clifford circuits and noise models."
msgstr "*stabilizer* - এটি ক্লিফোর্ড স্ট্যাবিলাইজার স্টেট সিমুলেটর ব্যবহার করে যা কেবল ক্লিফোর্ড সার্কিট এবং নয়েজ মডেলের জন্য প্রযোজ্য।"

#: ../../the_elements.rst:123
msgid "*extended_stabilizer* - Uses an approximate simulator that decomposes circuits into stabilizer state terms, the number of which grows with the number of non-Clifford gates."
msgstr "*extended_stabilizer* - এটি আনুমানিক (অ্যাপ্রক্সিমেট) সিমুলেটর ব্যবহার করে যা বর্তনীগুলিকে (সার্কিট) বিভিন্ন অবস্থা বা মানে বিভক্ত করে, যেগুলোর সংখ্যা নন-ক্লিফোর্ড যুক্তিবর্তনীর (গেইট) সংখ্যার সাথে বৃদ্ধি পায়।"

#: ../../the_elements.rst:126
msgid "*matrix_product_state* - Uses a Matrix Product State (MPS) simulator."
msgstr "*matrix_product_state* - এটি একটি Matrix Product State (MPS) সিমুলেটর ব্যবহার করে।"

#: ../../the_elements.rst:128
msgid ":mod:`~qiskit.providers.aer.StatevectorSimulator` Allows ideal single-shot execution of qiskit circuits and returns the final statevector of the simulator after application."
msgstr ""

#: ../../the_elements.rst:132
msgid ":mod:`~qiskit.providers.aer.UnitarySimulator` Allows ideal single-shot execution of qiskit circuits and returns the final unitary matrix of the circuit itself. Note that the circuit cannot contain measure or reset operations for this backend."
msgstr ""

#: ../../the_elements.rst:142
msgid "Ignis"
msgstr "ইগ্নিস"

#: ../../the_elements.rst:144
msgid "Ignis, the ‘fire’ element, is dedicated to fighting noise and errors and to forging a new path. This includes better characterization of errors, improving gates, and computing in the presence of noise. Ignis is meant for those who want to design quantum error correction codes, or who wish to study ways to characterize errors through methods such as tomography, or even to find a better way for using gates by exploring dynamical decoupling and optimal control."
msgstr "ইগ্নিস, বা 'আগুন', দূষণ (নয়েজ) এবং ত্রুটি (এরর) হ্রাস করা ও নতুন উপায় বা পদ্ধতি বের করার কাজে নিয়োজিত। এর মধ্যে রয়েছে ত্রুটিগুলোর বৈশিষ্ট্য ভালোভাবে নির্ণয় করা, যুক্তিবর্তনীর (গেইট) উন্নয়ন এবং যেকোনো দূষণের উপস্থিতিতেও গণনা সম্পন্ন করা। যারা কোয়ান্টাম ত্রুটি সংশোধন (এরর কারেকশন) কোড লিখতে চায় বা যারা টমোগ্রাফি ইত্যাদি পদ্ধতিতে ত্রুটির বৈশিষ্ট্য নির্ণয় করা নিয়ে গবেষণা করতে চান, অথবা ডাইনামিক্যাল ডিকাপলিং এবং অপ্টিমাল কন্ট্রোলের মাধ্যমে যুক্তিবর্তনী (গেইট) ব্যবহারের আরো ভালো উপায় বের করতে চান, ইগ্নিস তাদের জন্য উপযুক্ত।"

#: ../../the_elements.rst:151
msgid "Ignis provides code for users to easily generate circuits for specific experiments given a minimal set of user input parameters. Ignis code contains three fundamental building blocks:"
msgstr "ইগ্নিস কিছু ইনপুট প্যারামিটার সেট ব্যবহার করে নির্দিষ্ট কিছু পরীক্ষা করার জন্য বর্তনী (সার্কিট) তৈরি করতে ব্যবহারকারীদের কোড সরবরাহ করে। ইগ্নিসের তিনটি মৌলিক বিষয় রয়েছেঃ"

#: ../../the_elements.rst:157
msgid "**Circuits:**"
msgstr ""

#: ../../the_elements.rst:156
msgid "The circuits module provides the code to generate the list of circuits for a particular Ignis experiment based on a minimal set of user parameters. These are then run on Terra or Aer."
msgstr "বর্তনী (সার্কিট) মডিউলটি কিছু ন্যূনতম ইউজার প্যারামিটার সেটের সাহায্যে কোনো ইগ্নিস পরীক্ষা চালানোর জন্য বর্তনীর (সার্কিট) তালিকা তৈরি করার কোড সরবরাহ করে। পরবর্তীতে এগুলো টেরা অথবা এয়ারে কার্যকর করা হয়।"

#: ../../the_elements.rst:162
msgid "**Fitters:**"
msgstr ""

#: ../../the_elements.rst:160
msgid "The results of an Ignis experiment are passed to the Fitters module where they are analyzed and fit according to the physics model describing the experiment. Fitters can plot the data plus fit and output a list of parameters."
msgstr "ইগ্নিস পরীক্ষার ফলাফলগুলি ফিটার মডিউলে পাঠানো হয় যেখানে তাদের বিশ্লেষণ করা হয় এবং পদার্থবিদ্যার মডেল অনুসারে মিলানো হয়। ফিটার তথ্যকে চিত্রায়ন করতে এবং পরামিতিগুলির একটি তালিকা মিলাতে ও প্রকাশ করতে পারে।"

#: ../../the_elements.rst:167
msgid "**Filters:**"
msgstr ""

#: ../../the_elements.rst:165
msgid "For certain Ignis experiments, the fitters can output a Filter object. Filters can be used to mitigate errors in other experiments using the calibration results of an Ignis experiment."
msgstr "কিছু কিছু ইগ্নিস পরীক্ষায় ফিটার একটি ফিল্টার অবজেক্ট তৈরি করতে পারে । ইগ্নিস পরীক্ষার ক্রমাঙ্কন (ক্যালিব্রেশন) ফলাফল ব্যবহার করে ফিল্টারগুলি অন্যান্য পরীক্ষার ত্রুটি প্রশমিত করার জন্য ব্যবহার করা যায়।"

#: ../../the_elements.rst:169
msgid "Qiskit Ignis is organized into three types of experiments that can be performed:"
msgstr "Qiskit ইগ্নিস এর সাহায্যে তিন ধরনের পরীক্ষা করা যায়ঃ"

#: ../../the_elements.rst:173
msgid ":mod:`qiskit.ignis.characterization` Characterization experiments are designed to measure parameters in the system such as noise parameters (T1, T2-star, T2), Hamiltonian parameters such as the ZZ interaction rate and control errors in the gates."
msgstr ":mod:`qiskit.ignis.characterization` বৈশিষ্টায়ন (ক্যারেক্টারাইজেশন) পরীক্ষাগুলি সিস্টেমের বিভিন্ন বৈশিষ্ট্য পরিমাপ করার জন্য তৈরি করা হয় যেমন- নয়েজ বা দূষণ ((T1, T2-star, T2), হ্যামিল্টোনিয়ান বৈশিষ্ট্য যেমন ZZ মিথস্ক্রিয়া হার (ইন্টার‍অ্যাকশন রেট) এবং বর্তনীর নিয়ন্ত্রণ ত্রুটি।"

#: ../../the_elements.rst:178
msgid ":mod:`qiskit.ignis.verification` Verification experiments are designed to verify gate and small circuit performance. Verification includes state and process tomography, quantum volume and randomized benchmarking (RB). These experiments provide the information to determine performance metrics such as the gate fidelity."
msgstr ":mod:`qiskit.ignis.verification` ভেরিফিকেশন বা প্রতিপাদন পরীক্ষাগুলো দিয়ে যুক্তিবর্তনী (গেইট) এবং ছোটো ছোটো বর্তনীর (সার্কিট) কার্যক্ষমতা যাচাই করা হয়। স্টেট এবং প্রসেস টমোগ্রাফি, কোয়ান্টাম ভলিউম এবং র‍্যান্ডমাইজড বেঞ্চমার্কিং (আর বি) এর অন্তর্ভুক্ত। এই পরীক্ষাগুলি কার্যক্ষমতার বিভিন্ন পদ্ধতি (মেট্রিক) যেমন যুক্তিবর্তনীর বিশ্বস্ততা (গেইট ফিডেলিটি) সম্পর্কে তথ্য দেয়।"

#: ../../the_elements.rst:184
msgid ":mod:`qiskit.ignis.mitigation` Mitigation experiments run calibration circuits that are analyzed to generate mitigation routines that can be applied to arbitrary sets of results run on the same backend. Ignis code will generate a list of circuits that run calibration measurements. The results of these measurements will be processed by a Fitter and will output a Filter than can be used to apply mitigation to other results."
msgstr ":mod:`qiskit.ignis.mitigation` মিটিগেশন বা প্রশমন পরীক্ষার সাহায্যে ক্রমাঙ্কন (ক্যালিব্রেশন) বর্তনীগুলো (সার্কিট) দিয়ে কিছু মিটিগেশন রুটিন তৈরি হয়, যেগুলো একই ব্যাকএন্ডে কিছু আরবিট্রারি বা নিয়মবহির্ভূত ফলাফলের ওপর প্রয়োগ করা হয়। ইগ্নিস কোড বর্তনী (সার্কিট) তালিকা তৈরি করে যা ক্রমাঙ্কন পরিমাপগুলো কার্যকর করে। এই পরিমাপের ফলাফলগুলি একটি ফিটার দিয়ে প্রক্রিয়া করা হয় এবং একটি ফিল্টার আউটপুট দেয় যেটি অন্যান্য ফলাফল মিটিগেশন করতে ব্যবহার করা হয়।"

#: ../../the_elements.rst:197
msgid "Aqua"
msgstr "অ্যাকোয়া"

#: ../../the_elements.rst:199
msgid "Aqua, the ‘water’ element, is the element of life. To make quantum computing live up to its expectations, we need to find real-world applications. Aqua is where algorithms for quantum computers are built. These algorithms can be used to build applications for quantum computing. Aqua is accessible to domain experts in chemistry, optimization, finance and AI, who want to explore the benefits of using quantum computers as accelerators for specific computational tasks."
msgstr "অ্যাকোয়া, 'পানি' হলো জীবনের উপাদান। কোয়ান্টাম কম্পিউটিং নিয়ে যে প্রত্যাশা তা পূরণ করার জন্য আমাদের বাস্তব জগতে এর প্রয়োগ সন্ধান করা প্রয়োজন। কোয়ান্টাম কম্পিউটিংয়ের জন্য অ্যালগরিদম তৈরি করা হয় অ্যাকোয়াতে। এই অ্যালগরিদম বা ধারাক্রমগুলি কোয়ান্টাম কম্পিউটিংয়ের বিভিন্ন ধরনের প্রয়োগের জন্য ব্যবহৃত হতে পারে। যারা রসায়ন, অপ্টিমাইজেশন, ব্যবস্থাপনাবিদ্যা এবং কৃত্রিম বুদ্ধিমত্তার (আর্টিফিশিয়াল ইন্টেলিজেন্স) নির্দিষ্ট ধরনের গণনা কাজের গতি বৃদ্ধির জন্য কোয়ান্টাম কম্পিউটিংয়ের উপকারিতা পেতে চান সেসব বিশেষজ্ঞদের জন্য অ্যাকোয়া সহজলভ্য।"

#: ../../the_elements.rst:207
msgid "Problems that may benefit from the power of quantum computing have been identified in numerous domains, such as Chemistry, Artificial Intelligence (AI), Optimization and Finance. Quantum computing, however, requires very specialized skills. To address the needs of the vast population of practitioners who want to use and contribute to quantum computing at various levels of the software stack, we have created Qiskit Aqua."
msgstr "বিভিন্ন কার্যক্ষেত্র যেমন রসায়ন, কৃত্রিম বুদ্ধিমত্তা (আর্টিফিশিয়াল ইন্টেলিজেন্স), অপ্টিমাইজেশন (অনুকূলায়ন) এবং ব্যবস্থাপনাবিদ্যায় (ফিন্যান্স) এমন সব গবেষণামূলক সমস্যা রয়েছে যেগুলি কোয়ান্টাম কম্পিউটিং এর ক্ষমতা থেকে উপকৃত হতে পারে। কিন্তু কোয়ান্টাম কম্পিউটিং এর জন্য বিশেষ ধরনের দক্ষতার প্রয়োজন। একটি বিশাল সংখ্যক ব্যবহারকারী যারা কোয়ান্টাম কম্পিউটিংয়ের বিভিন্ন পর্যায়ে অবদান রাখতে চান, তাদের চাহিদাগুলির কথা ভেবে আমরা Qiskit অ্যাকোয়া তৈরী করেছি।"

