msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-21 17:11+0000\n"
"PO-Revision-Date: 2023-05-21 17:36\n"
"Last-Translator: \n"
"Language: bn_BN\n"
"Language-Team: Bengali Language\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: bengali\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/10_pvqd.po\n"
"X-Crowdin-File-ID: 10005\n"

#: ../../tutorials/algorithms/10_pvqd.ipynb:10
msgid "This page was generated from `tutorials/algorithms/10_pvqd.ipynb`__."
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:9
msgid "Projected Variational Quantum Dynamics"
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:11
msgid "The projected Variational Quantum Dynamics (p-VQD) algorithm is a quantum algorithm for real time evolution. It's a variational algorithm that projects the state at time :math:`t + \\Delta_t`, as calculated with Trotterization, onto a parameterized quantum circuit."
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:13
msgid "For a quantum state :math:`|\\phi(\\theta)\\rangle = U(\\theta)|0\\rangle` constructed by a parameterized quantum circuit :math:`U(\\theta)` and a Hamiltonian :math:`H`, the update rule can be written as"
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:15
msgid "\\theta_{n+1} = \\theta_n + \\arg\\min_{\\delta\\theta} 1 - |\\langle\\phi(\\theta_n + \\delta\\theta)|e^{-i\\Delta_t H}|\\phi(\\theta_n)\\rangle|^2,"
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:20
msgid "where :math:`e^{-i\\Delta_t H}` is calculated with a Trotter expansion (using e.g. the ```PauliEvolutionGate`` <https://qiskit.org/documentation/stubs/qiskit.circuit.library.PauliEvolutionGate.html>`__ in Qiskit!)."
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:22
msgid "The following tutorial explores the p-VQD algorithm in Qiskit, which is implemented available as ``qiskit.algorithms.time_evolvers.PVQD``. For details on the algorithm, see the original paper: `Barison et al. Quantum 5, 512 (2021) <https://quantum-journal.org/papers/q-2021-07-28-512/#>`__."
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:33
msgid "The example we're looking at is the time evolution of the :math:`|00\\rangle` state under the Hamiltonian"
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:35
msgid "H = 0.1 Z_1 Z_2 + X_1 + X_2,"
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:40
msgid "which is an Ising Hamiltonian on two neighboring spins, up to a time :math:`T=1`, where we want to keep track of the total magnetization :math:`M = Z_1 + Z_2` as an observable."
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:67
msgid "After defining our Hamiltonian and observable, we need to choose the parameterized ansatz we project the update steps onto. We have different choices here, but for real time evolution an ansatz that contains building blocks of the evolved Hamiltonian usually performs very well."
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:111
msgid "With this ansatz, the :math:`|00\\rangle` state is prepared if all parameters are 0. Hence we'll set the initial parameters to :math:`\\theta_0 = 0`:"
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:134
msgid "Before running the p-VQD algorithm, we need to select the backend and how we want to calculate the expectation values. Here, we'll perform exact statevector simulations (which are still very fast, as we investigate a 2 qubit system) through the reference primitive implementations found in ``qiskit.primitives``."
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:163
msgid "Since p-VQD performs a classical optimization in each timestep to determine the best parameters for the projection, we also have to specify the classical optimizer. As a first example we're using BFGS, which typically works well in statevector simulations, but later we can switch to gradient descent."
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:186
msgid "Now we can define p-VQD and execute it!"
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:216
msgid "The p-VQD implementation follows Qiskit's time evolution interface, thus we pack all information of the evolution problem into an input class: the ``hamiltonian`` under which we evolve the state, the ``final_time`` of the evolution and the observables (``aux_operators``) we keep track of."
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:239
msgid "And then run the algorithm!"
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:260
msgid "Now we can have a look at the results, which are stored in a ``PVQDResult`` object. This class has the fields"
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:262
msgid "``evolved_state``: The quantum circuit with the parameters at the final evolution time."
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:263
msgid "``times``: The timesteps of the time integration. At these times we have the parameter values and evaluated the observables."
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:264
msgid "``parameters``: The parameter values at each timestep."
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:265
msgid "``observables``: The observable values at each timestep."
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:266
msgid "``fidelities``: The fidelity of projecting the Trotter timestep onto the variational form at each timestep."
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:267
msgid "``estimated_error``: The estimated error as product of all fidelities."
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:278
#, python-format
msgid "The energy should be constant in a real time evolution. However, we are projecting the time-evolved state onto a variational form, which might violate this rule. Ideally the energy is still more or less constant. In this evolution here we observe shifts of ~5% of the energy."
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:340
msgid "Since we also kept track of the total magnetization of the system, we can plot that quantity too. However let's first compute exact reference values to verify our algorithm results."
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:446
msgid "Looks pretty good!"
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:458
msgid "Gradient-based optimizations"
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:460
msgid "The ``PVQD`` class also implements parameter-shift gradients for the loss function and we can use a gradient descent optimization routine"
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:462
msgid "\\theta_{k+1} = \\theta_{k} - \\eta_k \\nabla\\ell(\\theta_k)."
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:467
msgid "Here we're using a learning rate of"
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:469
msgid "\\eta_k = 0.1 k^{-0.602}"
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:474
msgid "and 80 optimization steps in each timestep."
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:509
msgid "The following cell would take a few minutes to run for 100 timesteps, so we reduce them here."
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:594
msgid "We can observe here, that the energy does vary quite a bit! But as we mentioned before, p-VQD does not preserve the energy."
msgstr ""

#: ../../tutorials/algorithms/10_pvqd.ipynb:657
msgid "The magnetization, however, is computed very precisely."
msgstr ""

