msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-24 10:41+0000\n"
"PO-Revision-Date: 2023-08-14 19:07\n"
"Last-Translator: \n"
"Language-Team: Bengali Language\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: bengali\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/algorithms/04_vqe_advanced.po\n"
"X-Crowdin-File-ID: 9450\n"
"Language: bn_BN\n"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:10
msgid "This page was generated from `tutorials/algorithms/04_vqe_advanced.ipynb`__."
msgstr "এই পৃষ্ঠাটি `tutorials/algorithms/04_vqe_advanced.ipynb`__ -থেকে বানানো হয়েছে।"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:9
msgid "Advanced VQE usage"
msgstr "উন্নত ভি কিউ ই ব্যবহার"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:11
msgid "There exist several parameters for configuring and using more advanced `VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html>`__ capabilities. This tutorial will cover the parameters such as ``initial point``, ``expectation`` and ``gradient``."
msgstr "আরো উন্নত `VQE <https://qiskit.org/documentation/stubs/qiskit.algorithms.VQE.html>` __ ক্ষমতাগুলি কনফিগার এবং ব্যবহার করার জন্য বেশ কয়েকটি পরামিতি (প্যারামিটার) রয়েছে। এই টিউটোরিয়ালটি ``initial point``, ``expectation`` এবং ``gradient`` এর মতো প্যারামিটারগুলি কভার করবে।"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:13
msgid "It will also cover advanced simulator use such as using Aer with the Matrix Product State method."
msgstr "এটি ম্যাট্রিক্স প্রোডাক্ট স্টেট পদ্ধতির সাথে এয়ার ব্যবহারের মতো উন্নত সিমুলেটরের ব্যবহারকেও অন্তর্ভুক্ত করে।"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:39
msgid "Here we will use the same operator as used in the other VQE algorithms tutorials."
msgstr "এখানেও আমরা অন্যান্য ভি কিউ ই অ্যালগরিদম টিউটোরিয়ালের ক্ষেত্রে ব্যবহৃত অপারেটরটিকেই ব্যবহার করব।"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:65
msgid "Initial point"
msgstr "প্রাথমিক বিন্দু"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:67
msgid "The ``initial_point`` parameter allows the optimization to begin at the given point, where the point is a list of parameters that will configure the ansatz. By default the initial point is ``None`` which means that VQE will choose one. The choice in in this case is if the supplied ansatz has a preferred point, based on the initial state provided to it, then this will be chosen, otherwise a random initial point that fits with any bounds the ansatz has will be chosen. If an initial point is supplied it will take priority though and be used - note though it must match in length to the number of parameters in the ansatz circuit."
msgstr "যেখানে পয়েন্টগুলো ansatz কে সুসজ্জিত করবে এমন প্যারামিটাগুচ্ছের লিস্ট হিসেবে থাকে, ``initial_point`` প্যারামিটারটি সেখানে একটি প্রদত্ত অবস্থায় অপ্টিমাইজেশনকে শুরু করতে সাহায্য করে। প্রাথমিকভাবে `initial_point`` কে ``None`` হিসেবে গন্য করা হয়, তথা VQE শুধুমাত্র একটি পয়েন্ট বাছাই করে নেবে। আর এক্ষেত্রে যদি পূর্বে সরবারহকৃত ansatz এর প্রাথমিকভাবে যে স্টেট দেয়া হয়েছে তার ওপর ভিত্তি করে একটি পছন্দসই পয়েন্ট থাকে, তাহলে তাকে বাছাই করা হবে। অন্যথায়, ansatz এর যেকোনো সীমার সাথে মানানসই হতে পারে এমন একটি র‍্যান্ডম প্রাথমিক পয়েন্ট বাছাই করা হবে। কিন্তু যদি আগে থেকেই একটি প্রাথমিক পয়েন্ট সরবারহ করা হয় তাহলে সেটা আগে অগ্রাধিকার পেয়ে ব্যবহৃত হবে। বি: দ্র: যদিও একে ansatz সারকিটের প্যারামিটাগুলোর সংখ্যার সাথে মিলতে হবে।"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:70
msgid "Why to use a initial point? One reason would be if you have guess a reasonable starting point for the problem or perhaps know have information from a prior experiment."
msgstr "প্রাথমিক পয়েন্ট কেন ব্যবহার করবেন? একটি কারণ হতে পারে যে, আপনি আপনার সমস্যার জন্য একটি যুক্তিসঙ্গত প্রারম্ভ বিন্দু ধরে নিতে সক্ষম অথবা পূর্ববর্তী কোন পরীক্ষা-নিরীক্ষা হতে আপনার কাছে কিছু সংশ্লিষ্ট তথ্যাদি আছে। "

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:72
msgid "To demonstrate the use let’s first simply repeat the first working example from the `algorithms introduction <01_algorithms_introduction.ipynb#A-complete-working-example>`__ tutorial to get a solution’s optimal point."
msgstr "এই ব্যবহারটি প্রদর্শনের জন্য `algorithms introduction <01_algorithms_introduction.ipynb#A-complete-working-example>`__ টিউটোরিয়াল থেকে প্রথম কার্যকারী উদাহরণটি পুনরাবৃত্তি করা যাক, যা আমাদের কোন সমধানের সর্বোত্তম বিন্দু পেতে সাহায্য করে।"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:177
msgid "Now we can take the ``optimal_point`` from the above result and use it as the ``initial_point`` here."
msgstr "এখন আমরা উপরের ফলাফল থেকে ``optimal_point`` নিতে পারি এবং এটি এখানে ``initial_point`` হিসাবে ব্যবহার করতে পারি।"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:291
msgid "Here we see that result was arrived at much more quickly with ``optimizer_evals`` when it started from a random value when the initial point was not supplied (default of None)."
msgstr "এখানে আমরা দেখতে পাই যে, প্রাথমিক বিন্দু না দেয়ায় (default of None) ``optimizer_evals`` যখন এলোমেলো মান থেকে শুরু হয়, তার বিপরীতে  আমরা বেশ তাড়াতাড়িই আমাদের ফলাফলে পৌঁছে যেতে পারি।"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:293
msgid "Where this becomes useful for examples where we the solution to one problem can be used to for a guess for the solution to a very close similar problem. Chemistry is very good example where we change the inter-atomic distance(s) of molecule to plot a dissociation profile. When the distance changes are small we expect the solution to still be nearby the prior one. One technique is to simply use the optimal point from one solution as the starting point for the next step. Now more complex techniques are possible that do some extrapolation to compute an initial position based on prior solution(s) rather than directly use the prior solution."
msgstr "যেখানে এটি উদাহরণের জন্য উপযোগী হয়ে ওঠে সেখানে একটি সমস্যার সমাধান একটি খুব কাছাকাছি অনুরূপ সমস্যার সমাধানের জন্য অনুমানের জন্য একে ব্যবহার করা যেতে পারে। রসায়ন একটি খুব ভাল উদাহরণ যেখানে আমরা অণুর আন্ত-আনবিক দূরত্বগুলি পরিবর্তন করে একটি বিচ্ছিন্ন প্রোফাইল তৈরি করি। যখন দূরত্বের পরিবর্তনগুলি ছোট হয় তখন আমরা আশা করি সমাধান আগেরটির কাছাকাছি থাকবে। একটি কৌশল হল কেবলমাত্র একটি সমাধান থেকে পরবর্তী ধাপের সূচনা বিন্দু হিসেবে অনুকূল বিন্দুকে ব্যবহার করা। এখন আরো জটিল কৌশলগুলি সমাধান করা সম্ভব যা পূর্বের সমাধানগুলি এর উপর সরাসরি ভিত্তি না করেই একটি প্রাথমিক অবস্থান গণনার জন্য কিছু এক্সট্রোপোলেশন করে হিসাবনিকাশ করে।"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:306
msgid "Expectation"
msgstr "গড় মান"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:308
msgid "The energy of the Hamiltonian operator that VQE is working on is the expectation value when evaluated with the parameterized ansatz. To compute the expectation value VQE uses an instance of an `expectation <https://qiskit.org/documentation/apidoc/qiskit.opflow.expectations.html>`__ object. Such an instance may be supplied via the ``expectation`` parameter, or in the default case, where it has a value of ``None``, VQE will use the `ExpectationFactory <https://qiskit.org/documentation/stubs/qiskit.opflow.expectations.ExpectationFactory.html>`__ to create itself a suitable instance based on the supplied backend."
msgstr " VQE যে হ্যামিল্টনিয়ানের ওপর কাজ করে তার শক্তি হল যখন পরামিতিক ansatz দ্বারা নির্ধারণ করা হয় তার এক্সপেক্টেশনের মান। VQE এক্সপেক্টেশন মান হিসাব করতে  `expectation <https://qiskit.org/documentation/apidoc/qiskit.opflow.expectations.html>`__  অবজেক্ট ব্যবহার করে। এই ধরনের একটি উদাহরণ ``expectation`` প্যারামিটারের মাধ্যমে সরবরাহ করা যেতে পারে, অথবা প্রাথমিকভাবে, যেখানে এর মান ``None`` হবে সেখানে VQE তে ব্যাকএণ্ড কর্তৃক সরবারহকৃত উপযুক্ত উদাহরন অনুযায়ী `ExpectationFactory <https://qiskit.org/documentation/stubs/qiskit.opflow.expectations.ExpectationFactory.html>`__ ব্যবহার করবে।"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:311
msgid "For most cases letting VQE create a suitable instance is sufficient. However the Qiskit Aer aer_simulator supports a snapshot instruction that can be used in conjunction with the operator expectation computation. If used then the outcome is ideal, i.e. like the statevector simulator, and has no shot noise. Since people normally choose the aer_simulator to have shot noise (sampling noise), and be more like a real-device outcome, VQE has an ``include_custom`` flag that is passed on to the ExpectationFactory. When using Aer qasm simulator, and this is set ``True``, the factory will return ``AerPauliExpectation`` which uses the snapshot instruction, when ``False``, default, then the regular ``PauliExpectation`` is returned."
msgstr "বেশিরভাগ ক্ষেত্রে ভি কিউ ই (VQE)- কে একটি উপযুক্ত উদাহরণ তৈরি করা যথেষ্ট। যাইহোক কিস্কিট এয়ার aer_simulator একটি স্ন্যাপশট নির্দেশনা সমর্থন করে যা অপারেটর সম্ভাব্যতার পরিমাণ গণনার সাথে ব্যবহার করা যেতে পারে। যদি ব্যবহার করা হয় তবে ফলাফলটি আদর্শ, যেমন স্টেটভেক্টর সিমুলেটর, এবং কোন শট শব্দ নেই। যেহেতু মানুষ সাধারনত aer_simulator বেছে নেয় শট ত্রুটি (স্যাম্পলিং ত্রুটি), এবং অনেকটা বাস্তব যন্ত্রের ফলাফলের মত, VQE- এর একটি ``include_custom`` পতাকা আছে যা ExpectationFactory- এ দেওয়া হয়। Aer qasm সিমুলেটর ব্যবহার করার সময়, এবং এটি \"True\" সেট করা হলে, কারখানাটি  ``AerPauliExpectation``  ফিরিয়ে দেবে যা স্ন্যাপশট নির্দেশনা ব্যবহার করে, যখন \"False\", ডিফল্ট, তারপর নিয়মিত  ``PauliExpectation` ফেরত দেওয়া হয়।"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:314
msgid "The following example shows ``include_custom=True`` where the outcome matches the statevector simulator. In fact it can be better/faster to do this than use the statevector_simulator directly. This is because in the latter case when the Hamiltonian is a sum of Paulis it must be converted to matrix form, and this is avoided when using the snapshot instruction done when include_custom is True."
msgstr "নিম্নলিখিত উদাহরনসমুহে যেখানে ফলাফল স্টেটভেক্টোর সিমুলেটরের সাথে মিলে যায় সেখানে ``include_custom=True`` দেখায়। এমনকি সরাসরি স্টেটভেক্টোর সিমুলেটর ব্যবহার না করে এভাবে করলে এগুলোর গতি আরও বাড়বে। এর কারণ হল পরবর্তীতে যখন হ্যামিল্টোনিয়ান পাউলিগুলোর যোগফল হবে, তখন একে অবশ্যই ম্যাট্রিক্স আকারে রূপান্তর করতে হবে। আর যখন include_custom True হবে এবং স্ন্যাপশট নির্দেশনা ব্যবহৃত  হবে, তখন একে এড়িয়ে যাওয়া হবে। "

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:417
msgid "In case you have doubts here is the aer_simulator again but include_custom has been left to default to False. The optimization ended abruptly, presumably due to the shot noise confusing the SLSQP optimizer."
msgstr "যদি আপনার কোন সন্দেহ থাকে, তাহলে include_custom প্রাথমিক ভাবে False রেখে আবারও aer_simulator ব্যবহার করা হল। অপ্টিমাইজেশান হঠাৎ শেষ হয়ে গেছে, সম্ভবত শট নয়েজের কারণে SLSQP অপ্টিমাইজারকে বিভ্রান্ত হয়ে গেছে ।"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:536
msgid "Changing the optimizer to SPSA, which is designed to work in noisy environments, gets us a better result. Though the noise has affected the outcome so it’s not as accurate."
msgstr " SPSA তে অপ্টিমাইজার পরিবর্তন করা, যা গোলমাল পরিবেশে কাজ করার জন্য ডিজাইন করা হয়েছে, আমাদের একটি ভাল ফলাফল দেয়। যদিও নয়েজ ফলাফলকে প্রভাবিত করেছে তাই এটি সঠিক নয়।"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:638
msgid "As mentioned above, an expectation object can be explicitly given (so the internal ``ExpectationFactory`` and include_custom are never used/needed. Below we create an ``AerPauliExpectation`` and pass this to VQE. We can see the result matches that above where we set include_custom to True and let VQE create its own expectation object."
msgstr "উপরিউক্ত কোড অনুযায়ী, একটি এক্সপেকটেশন অবজেক্ট বাহ্যিকভাবে দেওয়া যেতে পারে (তাই অভ্যন্তরীণ ``ExpectationFactory`` এবং include_custom ব্যবহার করা হয় না/প্রয়োজন নেই)। নিচে VQE পাস করতে আমরা ``AerPauliExpectation`` তৈরি করি। আমরা দেখতে পাচ্ছি যে ফলাফলটি আমরা যেখানে দেখেছি তার উপরে include_custom True ধরা হয়েছে এবং VQE কে এর নিজস্ব এক্সপেকটেশন অবজেক্ট তৈরি করতে দেয়া হয়েছে। "

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:741
msgid "By default, the ``PauliExpectation`` object, that would have be chosen when include_custom is False (or when using Aer aer_simulator, or a real device) groups Paulis into commuting sets. This is efficient as it runs less circuits to compute the expectation. However, if for some reason you wanted to run a circuit for each Pauli then then grouping can be turned off when constructing the PauliExpectation. You need to explicitly pass in such an expectation instance to VQE to have it work this way though as shown below."
msgstr "প্রাথমিকভাবে, PauliExpectation অবজেক্ট, যখন include_custom FALSE বা Aer aer_simulator, বা একটি বাস্তব ডিভাইস ব্যবহার করার সময় পাউলিগুলকে কমিউটিং সেটে গ্রুপ করে, তখন এটি নির্বাচন করা হবে। এটি কার্যকর, কার্‌ এটি এক্সপেক্টেশন মান হিসাব করার জন্য কম সার্কিট চালায়। যাইহোক, যদি কোন কারণে আপনি প্রতিটি পাউলির জন্য একটি সার্কিট চালাতে চান তবে পলি এক্সপেক্টেশন নির্মাণের সময় গ্রুপিং বন্ধ করা যেতে পারে। VQE- এর কাছে এইরকম এক্সপেক্টেশনের উদাহরণ আপনাকে যেভাবে স্পষ্টভাবে পাস করতে হবে তা নিম্নরূপ ।"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:846
msgid "Gradient"
msgstr "নতিমাত্রা"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:848
msgid "Optimizers that use a gradient-based technique can be supplied with a user defined gradient that will be used instead of their default gradient computation which is usually done by simple finite difference. Gradients are passed indirectly via to the optimizer via its ``gradient`` parameter."
msgstr "নতি-ভিত্তিক কৌশল ব্যবহার করে এমন অপ্টিমাইজারগুলি (অনুকূলায়ক) কোনও ব্যবহারকারী সংজ্ঞায়িত নতিমাত্রার সাথে সরবরাহ করা যেতে পারে যা তাদের ডিফল্ট নতিমাত্রা গণনার পরিবর্তে ব্যবহৃত হবে। এটি সাধারণত সহজ সীমাবদ্ধ পার্থক্যের দ্বারা পরিমাপ করা হয়। নতিমাত্রাগুলি অপ্টিমাইজারের মাধ্যমে তার ``gradient`` প্যারামিটারের মাধ্যমে পরোক্ষভাবে সরবরাহ করা হয়।"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:850
msgid "As the use of a user supplied ``gradient`` was shown in the `Monitoring VQE Convergence <02_vqe_convergence.ipynb#Using-Gradient-framework>`__ tutorial I will simply refer you there. Also the `Gradients framework <../operators/02_gradients_framework.ipynb>`__ tutorial has much more about the gradients themselves."
msgstr " `Monitoring VQE Convergence <02_vqe_convergence.ipynb#Using-Gradient-framework>`__  টিউটোরিয়ালে একজন ব্যবহারকারী সরবরাহকৃত ``gradient`` এর ব্যবহার দেখানো হয়েছে তাই আমি আপনাকে সেখানে যেতে  নির্দেশনা দেব। তাছাড়াও `Gradients framework <../operators/02_gradients_framework.ipynb>`__ টিউটোরিয়ালে গ্রাডিয়েণ্টের ব্যাপের আরও অনেক কিছু আছে। "

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:862
msgid "Quantum Instance and advanced simulation"
msgstr "কোয়ান্টাম দৃষ্টান্ত (ইনস্ট্যান্স) এবং উন্নত সিমুলেশন"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:864
msgid "While you may be familiar with passing a QuantumInstancen created from a ``aer_simulator_statevector`` a ``aer_simulator`` or real device backend, it is possible to use the advanced simulation modes of Aer too when applicable. For instance we can easily use the Aer `Matrix Product State <../simulators/7_matrix_product_state_method.ipynb>`__ method, that has the potential to scale to larger numbers of qubits."
msgstr "যদিও আপনি  ``aer_simulator_statevector`` থেকে ``aer_simulator``থেকে তৈরি কোয়ান্টাম ইন্সট্যান্সন পাস করার সাথে পরিচিত হতে পারেন, প্রযোজ্য হলে এয়ারের উন্নত সিমুলেশন মোডগুলিও ব্যবহার করা সম্ভব। উদাহরণস্বরূপ, আমরা সহজেই aer ম্যাট্রিক্স প্রোডাক্ট স্টেট পদ্ধতি ব্যবহার করতে পারি, যা বৃহত্তর সংখ্যক কিউবিট পর্যন্ত বর্ধিত করার সম্ভাবনা রাখে।"

