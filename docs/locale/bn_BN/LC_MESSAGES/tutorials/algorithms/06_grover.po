msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 17:09+0000\n"
"PO-Revision-Date: 2021-08-21 11:56\n"
"Last-Translator: \n"
"Language-Team: Bengali Language\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: bengali\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/06_grover.po\n"
"X-Crowdin-File-ID: 9504\n"
"Language: bn_BN\n"

#: ../../tutorials/algorithms/06_grover.ipynb:10
msgid "This page was generated from `tutorials/algorithms/06_grover.ipynb`__."
msgstr "এই পৃষ্ঠাটি `tutorials/algorithms/08_factorizers.ipynb`__ - থেকে নেয়া হয়েছে।"

#: ../../tutorials/algorithms/06_grover.ipynb:9
msgid "Grover’s Algorithm and Amplitude Amplification"
msgstr "গ্রোভার অ্যালগরিদম এবং বিস্তার বিবর্ধন"

#: ../../tutorials/algorithms/06_grover.ipynb:11
msgid "Grover’s algorithm is one of the most famous quantum algorithms introduced by Lov Grover in 1996 [1]. It has initially been proposed for unstructured search problems, i.e. for finding a marked element in a unstructured database. However, Grover’s algorithm is now a subroutine to several other algorithms, such as Grover Adaptive Search [2]. For the details of Grover’s algorithm, please see `Grover’s Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ in the Qiskit textbook."
msgstr "লোভ গ্রোভার দ্বারা ১৯৯৬ সালে বানানো গ্রোভার অ্যালগরিদম [1] হচ্ছে কোয়ান্টাম অ্যালগরিদমগুলি দের মধ্যে যুক্তিযুক্তভাবে সবচেয়ে বিখ্যাত। এটি প্রথমে কাঠামোগত অনুসন্ধান সমস্যার (একটি কাঠামোহীন ডাটাবেসে চিহ্নিত উপাদান বের করার জন্য) জন্যে উত্থাপন করা হয়েছিল। ইদানিং এটি একাধিক অ্যালগরিদম এর মধ্যে মিলিত। উদাহরণ মূলক গ্রোভার অভিযোজিত অনুসন্ধান (গ্রোভার অ্যাডাপ্টিভ সার্চ) [2]। এর উপরে আরো জানতে Qiskit নোটবুকে `গ্রোভার অ্যালগরিদম <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ দেখুন।"

#: ../../tutorials/algorithms/06_grover.ipynb:13
msgid "Qiskit implements Grover’s algorithm in the ``Grover`` class. This class also includes the generalized version, Amplitude Amplification [3], and allows setting individual iterations and other meta-settings to Grover’s algorithm."
msgstr "Qiskit গ্রভারের অ্যালগরিদমকে ``Grover`` শ্রেণিতে সম্পাদন করে। এই শ্রেণিতে সাধারণকৃত সংস্করণ, বিস্তার পরিবর্ধন [3] অন্তর্ভুক্ত রয়েছে, এবং  এটি গ্রোভারের অ্যালগরিদমে পৃথক পুনরাবৃত্তি এবং অন্যান্য মেটা-সেটিংস সেট করার অনুমতি দেয়।"

#: ../../tutorials/algorithms/06_grover.ipynb:15
#: ../../tutorials/algorithms/06_grover.ipynb:719
msgid "**References:**"
msgstr "**রেফারেন্স সমূহ:**"

#: ../../tutorials/algorithms/06_grover.ipynb:17
msgid "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"
msgstr "[1]: L. K. Grover, ডাটাবেস অনুসন্ধানের জন্য একটি দ্রুত কোয়ান্টাম মেকানিকাল অ্যালগরিদম। থিউরি অফ কম্পিউটিংয়ের ২৮ তম বার্ষিক সিম্পোজিয়ামের ক্রিয়াকলাপ (STOC) ১৯৯৬, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"

#: ../../tutorials/algorithms/06_grover.ipynb:19
msgid "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"
msgstr "[2]: A. Gilliam, S. Woerner, C. Gonciulea, গ্রোভার অ্যাডাপটিভ সার্চ ফর কনস্ট্রেনেড পলিনোমিয়াল বাইনারি অপটিমাইজেশন, https://arxiv.org/abs/1912.04088"

#: ../../tutorials/algorithms/06_grover.ipynb:21
msgid "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"
msgstr "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (২০০০). কোয়ান্টাম বিস্তার পরিবর্ধন এবং অনুমান।\n"
"http://arxiv.org/abs/quant-ph/0005055"

#: ../../tutorials/algorithms/06_grover.ipynb:33
msgid "Grover’s algorithm"
msgstr "গ্রোভার অ্যালগরিদম / ধরাক্রম"

#: ../../tutorials/algorithms/06_grover.ipynb:35
msgid "Grover’s algorithm uses the Grover operator :math:`\\mathcal{Q}` to amplify the amplitudes of the good states:"
msgstr "গ্রোভারের অ্যালগরিদম বিস্তার পরিবর্ধন করতে :math:`\\mathcal{Q}` অপারেটরটি ব্যাবহার করে:"

#: ../../tutorials/algorithms/06_grover.ipynb:37
msgid "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"
msgstr "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"

#: ../../tutorials/algorithms/06_grover.ipynb:42
msgid "Here, \\* :math:`\\mathcal{A}` is the initial search state for the algorithm, which is just Hadamards, :math:`H^{\\otimes n}` for the textbook Grover search, but can be more elaborate for Amplitude Amplification \\* :math:`\\mathcal{S_0}` is the reflection about the all 0 state"
msgstr "এখানে, \\* :math:`\\mathcal{A}` হল অ্যালগরিদমটির প্রাথমিক অনুসন্ধানপূর্বক অবস্থা, যেটা কেবল গ্রোভার অনুসন্ধানের জন্য Hadamard গেটসমুহ :math:`H^{\\otimes n}` , কিন্তু বিস্তার পরিবর্ধনের জন্য বিস্তারযোগ্য, :math:`\\mathcal{S_0}` হল সবগুলো 0 অবস্থার প্রতিফলন।"

#: ../../tutorials/algorithms/06_grover.ipynb:44
msgid "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"
msgstr "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"

#: ../../tutorials/algorithms/06_grover.ipynb:49
msgid "\\* :math:`\\mathcal{S_f}` is the oracle that applies"
msgstr "\\* :math:`\\mathcal{S_f}` ওরাকলটি প্রয়োগ করে,"

#: ../../tutorials/algorithms/06_grover.ipynb:51
msgid "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"
msgstr "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"

#: ../../tutorials/algorithms/06_grover.ipynb:56
msgid "where :math:`f(x)` is 1 if :math:`x` is a good state and otherwise 0."
msgstr "যেখানে :math:`f(x)` হল 1 যদি  :math:`x` একটি সুষম অবস্থা হয়, আর তা নাহলে 0."

#: ../../tutorials/algorithms/06_grover.ipynb:58
msgid "In a nutshell, Grover’s algorithm applies different powers of :math:`\\mathcal{Q}` and after each execution checks whether a good solution has been found."
msgstr "সংক্ষেপে, গ্রোভারের অ্যালগরিদম :math:`\\mathcal{Q}` বিভিন্ন সূচক প্রয়োগ করে এবং প্রতিটি সম্পাদন কার্যকর করার পরে একটি ভাল সমাধান পাওয়া গেছে কিনা তা পরীক্ষা করে।"

#: ../../tutorials/algorithms/06_grover.ipynb:61
msgid "Running Grover’s algorithm"
msgstr "গ্রোভারের অ্যালগরিদম চালানো"

#: ../../tutorials/algorithms/06_grover.ipynb:63
msgid "To run Grover’s algorithm with the ``Grover`` class, firstly, we need to specify an oracle for the circuit of Grover’s algorithm. In the following example, we use ``QuantumCircuit`` as the oracle of Grover’s algorithm. However, there are several other class that we can use as the oracle of Grover’s algorithm. We talk about them later in this tutorial."
msgstr "গ্রোভারের অ্যালগরিদমকে ``Grover`` শ্রেণীর সাথে চালাতে প্রথমে আমাদের গ্রোভারের অ্যালগরিদমের সার্কিটের জন্য একটি ওরাকল নির্ধারণ করতে হবে। নিম্নলিখিত উদাহরণে, আমরা গ্রোভারের অ্যালগরিদমের ওরাকল হিসাবে ``QuantumCircuit`` ব্যবহার করেছি। তবে, আরও কয়েকটি শ্রেণি রয়েছে যেগুলো আমরা গ্রোভারের অ্যালগরিদমের ওরাকল হিসাবে ব্যবহার করতে পারি। আমরা সেগুলো সম্পর্কে এই টিউটোরিয়ালের শেষেরদিকে আলোচনা করব।"

#: ../../tutorials/algorithms/06_grover.ipynb:65
msgid "Note that the oracle for ``Grover`` must be a *phase-flip* oracle. That is, it multiplies the amplitudes of the of “good states” by a factor of :math:`-1`. We explain later how to convert a *bit-flip* oracle to a phase-flip oracle."
msgstr "লক্ষ্য কর ``Grover`` এর জন্য ওরাকলটি অবশ্যই একটি *phase-flip* ওরাকল হতে হবে। অর্থাৎ, এটা সুষম অবস্থার বিস্তারকে  :math:`-1` এর একটি গুনিতক দ্বারা গুন করে। কিভাবে একটি *bit-flip* ওরাকলকে একটি phase-flip ওরাকলে পরিণত করা যায় তা আমরা পরে আলোচনা করব। "

#: ../../tutorials/algorithms/06_grover.ipynb:109
msgid "Then, we specify a backend and call the ``run`` method of ``Grover`` with a backend to execute the circuits. The returned result type is a ``GroverResult``."
msgstr "তারপরে, আমরা একটি ব্যাকএন্ড পছন্দ করি এবং সার্কিটগুলি সম্পাদন করতে ব্যাকএন্ড সহ  ``Grover`` এর  ``run`` মেথডটি কল করি। প্রত্যাবর্তিত ফলাফলের ধরণটি হল একটি ``GroverResult``।"

#: ../../tutorials/algorithms/06_grover.ipynb:111
msgid "If the search was successful, the ``oracle_evaluation`` attribute of the result will be ``True``. In this case, the most sampled measurement, ``top_measurement``, is one of the “good states”. Otherwise, ``oracle_evaluation`` will be False."
msgstr "অনুসন্ধানটি সফল হলে, ফলাফলটির  ``oracle_evaluation`` অ্যাট্রিবিউট ``True`` হবে। এই ক্ষেত্রে, সর্বাধিক নমুনাকৃত হিসাব ``top_measurement`` হল অনেকগুলো সূষম অবস্থার মধে একটি অবস্থা।"

#: ../../tutorials/algorithms/06_grover.ipynb:167
msgid "In the example, the result of ``top_measurement`` is ``11`` which is one of “good state”. Thus, we succeeded to find the answer by using ``Grover``."
msgstr "উদাহরণস্বরূপ, ``top_measurement`` এর ফলাফল হল ``11``, যা একটি “good state”। এভাবে, আমরা গ্রোভার ব্যবহার করে ফলাফলটি বের করতে পেরেছি।"

#: ../../tutorials/algorithms/06_grover.ipynb:179
msgid "Using the different types of classes as the oracle of ``Grover``"
msgstr "ওরাকল হিসাবে ``Grover`` এর বিভিন্ন  ধরণের ক্লাস ব্যবহার করা"

#: ../../tutorials/algorithms/06_grover.ipynb:181
msgid "In the above example, we used ``QuantumCircuit`` as the oracle of ``Grover``. However, we can also use ``qiskit.quantum_info.Statevector`` as oracle. All the following examples are when :math:`|11\\rangle` is “good state”"
msgstr "যদিও, আমরা ওরাকল হিসাবে ``qiskit.quantum_info.Statevector`` ব্যবহার করতে পারতাম, উপরিউক্ত উদাহরনে ``QuantumCircuit`` কে ``Grover`` এর ওরাকল হিসাবে ব্যবহার করেছি। “good state” হিসেবে  :math:`|11\\rangle` এর উদাহরণগুলো নিম্নরূপ, "

#: ../../tutorials/algorithms/06_grover.ipynb:236
msgid "Internally, the statevector is mapped to a quantum circuit:"
msgstr "ইন্টারনালি, স্টেকভেক্টরটি কোয়ান্টাম সার্কিটে ম্যাপ করা হয়:"

#: ../../tutorials/algorithms/06_grover.ipynb:266
msgid "Qiskit allows for an easy construction of more complex oracles: \\* ``PhaseOracle``: for parsing logical expressions such as ``'~a | b'``. This is especially useful for solving 3-SAT problems and is shown in the accompanying `Grover Examples <07_grover_examples.ipynb>`__ tutorial."
msgstr "Qiskit আরও জটিল ওরাকলগুলি সহজেই নির্মাণের সুযোগ দেয়। যেমন লজিকাল এক্সপ্রেশন বাছাই করার জন্য \\* ``PhaseOracle``, যদি এবং কেবল যদি ``'~a | b'`` হয়। এটি বিশেষত 3-SAT সমস্যা সমাধানের জন্য সহায়ক এবং এর সাথে সম্পৃক্ত  `Grover Examples <07_grover_examples.ipynb>`__  টিউটোরিয়ালে প্রদর্শিত হবে।"

#: ../../tutorials/algorithms/06_grover.ipynb:268
msgid "Here we’ll use the ``PhaseOracle`` for the simple example of finding the state :math:`|11\\rangle`, which corresponds to ``'a & b'``."
msgstr "এখানে আমরা সরল উদাহরণসরূপ :math:`|11\\rangle` অবস্থা অনুসন্ধানের জন্য ``PhaseOracle`` ব্যবহার করব, যখন  ``'a & b'`` হয়।"

#: ../../tutorials/algorithms/06_grover.ipynb:307
msgid "You can observe, that this oracle is actually implemented with three qubits instead of two!"
msgstr "আপনি পর্যবেক্ষণ করতে পারেন যে, এই ওরাকলটি দুটির পরিবর্তে তিনটি কিউবিট দিয়ে বাস্তবায়িত হয়েছে!"

#: ../../tutorials/algorithms/06_grover.ipynb:309
msgid "That is because the ``PhaseOracle`` is not a phase-flip oracle (which flips the phase of the good state) but a bit-flip oracle. This means it flips the state of an auxiliary qubit if the other qubits satisfy the condition. For Grover’s algorithm, however, we require a phase-flip oracle. To convert the bit-flip oracle to a phase-flip oracle we sandwich the controlled-NOT by :math:`X` and :math:`H` gates, as you can see in the circuit above."
msgstr "এর কারণ হল ``PhaseOracle`` কোনো ফেজ-ফ্লিপ ওরাকল নয় (যা সুষম অবস্থার ধাপটিকে বদলিয়ে দেয়) বিট-ফ্লিপ ওরাকল। অর্থাৎ এটি যদি অন্যান্য কিউবিটগুলো শর্তটি পূরণ করে তবে এটি একটি গৌণ কিউবিট এর অবস্থা ফ্লিপ করে। তাও গ্রোভারের অ্যালগরিদমের জন্য আমাদের একটি ফেজ-ফ্লিপ ওরাকল প্রয়োজন। যেমনটি আপনি উপরের সার্কিটটিতে দেখতে পাচ্ছেন, বিট-ফ্লিপ ওরাকলকে একটি ফেজ-ফ্লিপ ওরাকলে রূপান্তর করতে আমরা controled-NOT গেটকে :math:`X` এবং :math:`H` গেট দ্বারা পরিবর্তন করি। "

#: ../../tutorials/algorithms/06_grover.ipynb:311
msgid "**Note:** This transformation from a bit-flip to a phase-flip oracle holds generally and you can use this to convert your oracle to the right representation."
msgstr "**Note:** এভাবে বিট-ফ্লিপ থেকে একটি ফেজ-ফ্লিপ ওরাকল এ রূপান্তরটি সাধারণভাবে সংরক্ষিত হয় এবং আপনি আপনার ওরেকলকে যথার্থ প্রতিরূপে রূপান্তর করতে এটি ব্যবহার করতে পারেন।"

#: ../../tutorials/algorithms/06_grover.ipynb:323
msgid "Amplitude amplification"
msgstr "বিস্তার বিবর্ধন"

#: ../../tutorials/algorithms/06_grover.ipynb:325
msgid "Grover’s algorithm uses Hadamard gates to create the uniform superposition of all the states at the beginning of the Grover operator :math:`\\mathcal{Q}`. If some information on the good states is available, it might be useful to not start in a uniform superposition but only initialize specific states. This, generalized, version of Grover’s algorithm is referred to *Amplitude Amplification*."
msgstr "গ্রোভারের অ্যালগরিদম সবগুলো মৌলিক সুপারপজিশন তৈরি করতে গ্রোভার অপারেটর  :math:`\\mathcal{Q}` এর শুরুতে  হাদামারড গেটগুলি ব্যবহার করে। যদি সুষম অবস্থার ওপর কোন \n"
"তথ্য থেকে থাকে, তবে একে মৌলিক সুপারপজিশনে শুরু না করিয়ে কেবল একটি নির্দিষ্ট অবস্থায় স্থির করলে উপকারি হতে পারে। গ্রভারের অ্যালগরিদমের এই সারাংশিত ভার্শনকে *বিস্তার পরিবর্ধন* বলে অভিহিত করা হয়।"

#: ../../tutorials/algorithms/06_grover.ipynb:327
msgid "In Qiskit, the initial superposition state can easily be adjusted by setting the ``state_preparation`` argument."
msgstr "কিস্কিটে প্রাথমিক সুপারপজিশন স্টেট খুব সহজেই ``state_preparation`` আরগুমেন্ট বসিয়ে রদবদল করে নেয়া যায়। "

#: ../../tutorials/algorithms/06_grover.ipynb:330
msgid "State preparation"
msgstr "State preparation - অবস্থা ব্যবস্থাপন"

#: ../../tutorials/algorithms/06_grover.ipynb:332
msgid "A ``state_preparation`` argument is used to specify a quantum circuit that prepares a quantum state for the start point of the amplitude amplification. By default, a circuit with $H^{:nbsphinx-math:`\\otimes `n} $ is used to prepare uniform superposition (so it will be Grover’s search). The diffusion circuit of the amplitude amplification reflects ``state_preparation`` automatically."
msgstr "``state_preparation`` আর্গুমেন্টটি কোয়ান্টাম সার্কিট চিহ্নিত করতে ব্যবহৃত হয় যা বিস্তার পরিবর্ধনের প্রারম্ভিকতার জন্য কোয়ান্টাম স্টেট প্রস্তুত করে। প্রাথমিকভাবে, $H^{:nbsphinx-math:`\\otimes `n}$ সহ একটি সার্কিট মৌলিক সুপারপজিশন তৈরি করতে ব্যাহৃত হয়(যেন এটি একটি গ্রভার সার্চ হয়)। বিস্তার বিবর্ধনের ডিফিউশান সার্কিটটি স্বয়ংক্রিয়ভাবেই ``state_preparation`` ব্যাবর্তন করে।"

#: ../../tutorials/algorithms/06_grover.ipynb:438
msgid "Full flexibility"
msgstr "Full flexibility-সম্পূর্ণ অভিযোজ্যতা"

#: ../../tutorials/algorithms/06_grover.ipynb:440
msgid "For more advanced use, it is also possible to specify the entire Grover operator by setting the ``grover_operator`` argument. This might be useful if you know more efficient implementation for :math:`\\mathcal{Q}` than the default construction via zero reflection, oracle and state preparation."
msgstr "আরও বেশি তদতিরিক্ত ব্যবহারের জন্য, সম্পূর্ণ গ্রোভার অপারেটরটি ``grover_operator`` আর্গুমেন্ট দ্বারা নির্দিষ্ট করাও সম্ভব। আর এটা তখনি লাভবান হবে যখন আপনি জিরো রিফ্লেকশন, ওরাকল অথবা স্টেট প্রিপারেশোনের চেয়ে :math:`\\mathcal{Q}` এর জন্য বেশি ফলপ্রদ নিষ্পাদন জানবেন।"

#: ../../tutorials/algorithms/06_grover.ipynb:442
msgid "The ``qiskit.circuit.library.GroverOperator`` can be a good starting point and offers more options for an automated construction of the Grover operator. You can for instance \\* set the ``mcx_mode`` \\* ignore qubits in the zero reflection by setting ``reflection_qubits`` \\* explicitly exchange the :math:`\\mathcal{S_f}, \\mathcal{S_0}` and :math:`\\mathcal{A}` operations using the ``oracle``, ``zero_reflection`` and ``state_preparation`` arguments"
msgstr "গ্রোভার অপারেটরের স্বয়ংক্রিয় উৎপাদনের জন্য ``qiskit.circuit.library.GroverOperator`` একটি উপযুক্ত সূত্রপাত হতে পারে। উদাহরণস্বরূপ, আপনি বাহ্যিকভাবে ``reflection_qubits`` \\* বসিয়ে কিউবিট জিরো রিফ্লেকশনের মাঝের কিউবিটসমুহকে উপেক্ষা করে ``oracle``, ``zero_reflection`` এবং ``state_preparation`` আরগুমেন্টগুলো দ্বারা :math:`\\mathcal{S_f}, \\mathcal{S_0}` এবং :math:`\\mathcal{A}` কে পরিবর্তন করতে পারেন। "

#: ../../tutorials/algorithms/06_grover.ipynb:453
msgid "For instance, imagine the good state is a three qubit state :math:`|111\\rangle` but we used 2 additional qubits as auxiliary qubits."
msgstr "উদাহরণস্বরূপ, মনে করুন সুষম অবস্থাটা হল তিন কিউবিটের একটা অবস্থা :math:`|111\\rangle`, কিন্তু আমরাতো অতিরিক্ত ২টি কিউবিট গৌণ কিউবিট হিসেবে ব্যাবহার করেছি।"

#: ../../tutorials/algorithms/06_grover.ipynb:487
msgid "Then, per default, the Grover operator implements the zero reflection on all five qubits."
msgstr "তারপর নিয়মাফিকভাবে নিম্নক্ত গ্রোভার অপারেটরটি ৫টি কিউবিউটের সবগুলোর উপরেই জিরো রিফ্লেকশন প্রয়োগ করে।"

#: ../../tutorials/algorithms/06_grover.ipynb:518
msgid "But we know that we only need to consider the first three:"
msgstr "কিন্তু আমরাতো জানিই যে আমাদেরকে শুধু প্রথম তিনটা কিউবিটক বিবেচনা করতে হবে:"

#: ../../tutorials/algorithms/06_grover.ipynb:550
msgid "Dive into other arguments of ``Grover``"
msgstr "``Grover`` এর অন্যান্য আরগুমেন্ট উদ্ঘাটন করা"

#: ../../tutorials/algorithms/06_grover.ipynb:552
msgid "``Grover`` has arguments other than ``oracle`` and ``state_preparation``. We will explain them in this section."
msgstr "``Grover`` এর ``oracle`` এবং ``state_preparation`` ছাড়াও অন্যান্য আরগুমেন্ট আছে। এই অনুচ্ছেদে আমরা তা ব্যাখ্যা করব।"

#: ../../tutorials/algorithms/06_grover.ipynb:555
msgid "Specifying ``good_state``"
msgstr "``good_state`` - ``সুষম_অবস্থা`` নির্দিষ্টকরন:"

#: ../../tutorials/algorithms/06_grover.ipynb:557
msgid "``good_state`` is used to check whether the measurement result is correct or not internally. It can be a list of binary strings, a list of integer, ``Statevector``, and Callable. If the input is a list of bitstrings, each bitstrings in the list represents a good state. If the input is a list of integer, each integer represent the index of the good state to be :math:`|1\\rangle`. If it is a ``Statevector``, it represents a superposition of all good states."
msgstr "ইন্টারনালি পরিমাপন ফল সঠিক হচ্ছে কিনা তা যাচাই করতে ``good_state`` ব্যবহার করা হয়। এটা বাইনারি স্ট্রিং এর একটি লিস্ট হতে পারে, আবার ইন্টেজার, ``Statevector`` কিংবা কলেবল হতে পারে। যদি ইনপুট একটি ইন্টেজারের লিস্ট হয়, তাহলে প্রত্যেকটা ইন্টেজার সুষম অবস্থার ধারা হিসেবে :math:`|1\\rangle` দেখায়। আর যদি এটা একটা ``Statevector`` হয়, তাহলে সব সুষম অবস্থার সুপারপজিশন দেখায়।"

#: ../../tutorials/algorithms/06_grover.ipynb:711
msgid "The number of ``iterations``"
msgstr "``পুনরাবৃত্তির`` সংখ্যা"

#: ../../tutorials/algorithms/06_grover.ipynb:713
msgid "The number of repetition of applying the Grover operator is important to obtain the correct result with Grover’s algorithm. The number of iteration can be set by the ``iteration`` argument of ``Grover``. The following inputs are supported: \\* an integer to specify a single power of the Grover operator that’s applied \\* or a list of integers, in which all these different powers of the Grover operator are run consecutively and after each time we check if a correct solution has been found"
msgstr "গ্রোভারের অ্যালগরিদমের মাধ্যমে সঠিক ফলাফল পেতে গ্রোভার অপারেটর প্রয়োগের পুনরাবৃত্তির সংখ্যা গুরুত্বপূর্ণ। পুনরাবৃত্তির সংখ্যা ``Grover`` এর ``iteration`` আরগুমেন্ট দ্বারা সেট করা যেতে পারে। সাপোর্টেড ইনপুটগুলো নিম্নরূপ:\n"
"গ্রোভার অপারেটরের সূচক নির্দিষ্ট করতে একটি \\*ইন্টেজার অথবা এটি \\*ইন্টেজারের লিস্ট, যেগুলোতে এইসব গ্রোভার অপারেটরের সূচকগুলো বারবার এবং প্রত্যেকবার আমাদের চেক করার পর সঠিক সমাধান খুঁজে পাওয়া গেছে কিনা জেনে সম্পাদিত হয়"

#: ../../tutorials/algorithms/06_grover.ipynb:715
msgid "Additionally there is the ``sample_from_iterations`` argument. When it is ``True``, instead of the specific power in ``iterations``, a random integer between 0 and the value in ``iteration`` is used as the power Grover’s operator. This approach is useful when we don’t even know the number of solution."
msgstr "এছাড়াও ``sample_from_iterations`` নামক একটা আরগুমেন্ট আছে। যখন এটা ``True`` হয়, গ্রোভারের অপারেটরের মত নির্দিষ্ট সূচকের পুনরাবৃত্তির বদলে 0 এবং পুনরাবৃত্তির মানের একটি র‍্যান্ডম ইন্টেজার এখানে ব্যাবহ্রিত হয়। "

#: ../../tutorials/algorithms/06_grover.ipynb:717
msgid "For more details of the algorithm using ``sample_from_iterations``, see [4]."
msgstr "``sample_from_iterations`` ব্যাবহার করে অ্যালগরিদমটির সম্পর্কে বিস্তারিত জানতে [4] দেখুন।"

#: ../../tutorials/algorithms/06_grover.ipynb:721
msgid "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"
msgstr "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"

#: ../../tutorials/algorithms/06_grover.ipynb:774
msgid "When the number of solutions is known, we can also use a static method ``optimal_num_iterations`` to find the optimal number of iterations. Note that the output iterations is an approximate value. When the number of qubits is small, the output iterations may not be optimal."
msgstr "যখন ফলাফলের সংখ্যা জানা হয়ে যায়, সর্বচ্চ সংখ্যক পুনরাবৃত্তি খুজে পেতে আমরা ``optimal_num_iterations`` স্ট্যাটিক মেথডটি ব্যাবহার করতে পারি। "

#: ../../tutorials/algorithms/06_grover.ipynb:817
msgid "Applying ``post_processing``"
msgstr "``post_processing`` এর ব্যাবহার "

#: ../../tutorials/algorithms/06_grover.ipynb:819
msgid "We can apply an optional post processing to the top measurement for ease of readability. It can be used e.g. to convert from the bit-representation of the measurement ``[1, 0, 1]`` to a DIMACS CNF format ``[1, -2, 3]``."
msgstr "সহজে পড়ার জন্য আমরা সর্বশেষ মেজারমেন্টে একটি ঐচ্ছিক পোস্ট প্রসেসিং প্রয়োগ করতে পারি। এটা ব্যাবহ্রিত হতে পারে, যেমন: মেজারমেন্টের বিট-রিপ্রেজেন্টেশন ``[1, 0, 1]`` থেকে একটি DIMACS CNF রুপী ``[1, -2, 3]``।"

