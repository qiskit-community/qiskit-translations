msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-21 17:24+0000\n"
"PO-Revision-Date: 2021-10-21 18:18\n"
"Last-Translator: \n"
"Language-Team: Bengali Language\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: bengali\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/09_IQPE.po\n"
"X-Crowdin-File-ID: 9546\n"
"Language: bn_BN\n"

#: ../../tutorials/algorithms/09_IQPE.ipynb:10
msgid "This page was generated from `tutorials/algorithms/09_IQPE.ipynb`__."
msgstr "এই পৃষ্ঠাটি `tutorials/algorithms/08_factorizers.ipynb`__ থেকে নেয়া হয়েছে।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:9
msgid "Iterative Quantum Phase Estimation Algorithm"
msgstr "ধাপে ধাপে কোয়ান্টাম দশা অনুমানকারী ধারাক্রম (অ্যালোগরিদম)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:11
msgid "The goal of this tutorial is to understand how the Iterative Phase Estimation (IPE) algorithm works, why would we use the IPE algorithm instead of the QPE (Quantum Phase Estimation) algorithm and how to build it with Qiskit using the same circuit exploiting reset gate and the ``c_if`` method that allows to apply gates conditioned by the values stored in a classical register, resulting from previous measurements."
msgstr "এই টিউটোরিয়ালের উদ্দেশ্য হলো, কিভাবে ইটারেটিভ ফেজ এস্টিমেশন (IPE) অ্যালোগরিদম কাজ করে, কেন আমরা কোয়ান্টাম ফেজ এস্টিমেশন (QPE) অ্যালোগরিদমের বদলে (IPE) অ্যালোগরিদম ব্যবহার করব এবং কিভাবে Qiskit এর সাহায্যে একই বর্তনীতে সার্কিট রিসেট যুক্তিবর্তনী গেইট দিয়ে একে তৈরি করা যায় তা জানা, এবং এরপরেও ``c_if`` পদ্ধতি এর সাহায্যে কিভাবে ক্লাসিক্যাল রেজিস্টারে থাকা আগের মেজারমেন্টের মান শর্ত হিসেবে নিয়ে গেট প্রয়োগ করে আইপিই নির্মাণ (বিল্ড) করা যায় তা জানা।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:13
msgid "**References**"
msgstr "**রেফারেন্স সমূহ:**"

#: ../../tutorials/algorithms/09_IQPE.ipynb:15
msgid "`Section 2 of Lab 4: Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__"
msgstr "`Section 2 of Lab 4: Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__ "

#: ../../tutorials/algorithms/09_IQPE.ipynb:17
msgid "`Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__"
msgstr "`Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__ "

#: ../../tutorials/algorithms/09_IQPE.ipynb:42
msgid "Conditioned gates: the c_if method"
msgstr "শর্তাধীন গেট: c_if পদ্ধতি"

#: ../../tutorials/algorithms/09_IQPE.ipynb:53
msgid "Before starting the IPE algorithm, we will give a brief tutorial about the Qiskit conditional method, c_if, as it goes into building the IPE circuit."
msgstr "আইপিই অ্যালোগরিদম বোঝার আগে আমাদের Qiskit -এর শর্তসাপেক্ষ পদ্ধতি c_if এর ব্যাপারে জানতে হবে, কারণ আইপিই বর্তনী বানাতে এটা কাজে লাগবে।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:55
msgid "``c_if`` is a function (actually a method of the gate class) to perform conditioned operations based on the value stored previously in a classical register. With this feature you can apply gates after a measurement in the same circuit conditioned by the measurement outcome."
msgstr "``c_if`` হল gate ক্লাসের একটা মেথড, যা পূর্বে ক্লাসিক্যাল রেজিস্টারে সঞ্চিত মানের উপর নির্ভর করে শর্তাধীন ক্রিয়াকলাপ সম্পন্ন করে। এর সাহায্যে আনপারা একই সার্কিটের মধ্যে ফলাফল দ্বারা সীমাবদ্ধ মেজারমেন্টের পর গেটসমূহ ব্যবহার করতে পারেন।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:57
msgid "For example, the following code will execute the :math:`X` gate if the value of the classical register is :math:`0`."
msgstr "উদাহরণস্বরূপ, ক্লাসিকাল রেজিস্টার যদি  :math:`0` হয় তাহলে নিম্নলিখিত কোড :math:`X` গেট চালাবে। "

#: ../../tutorials/algorithms/09_IQPE.ipynb:93
msgid "We highlight that the method c_if expects as the first argument a whole classical register, not a single classical bit (or a list of classical bits), and as the second argument a value in decimal representation (a non-negative integer), not the value of a single bit, 0, or 1 (or a list/string of binary digits)."
msgstr "উল্লেখ্য: c_if পদ্ধতি কোনো একক ক্লাসিকাল বিট বা ক্লাসিকাল বিট এর লিস্টকে নয় বরং একটি সম্পূর্ণ ক্লাসিক্যাল রেজিস্টারকে প্রথম আর্গুমেন্ট হিসেবে বিবেচনা করে। এবং দ্বিতীয় আর্গুমেন্ট হিসেবে কোনো এক বিট, 0 বা 1, (অথবা লিস্ট বা বিটের তালিকা) নয় বরং (অঋণাত্মক পূর্ণসংখ্যার মত) \n"
"ডেসিমাল রিপ্রেজেন্টেশনের একটা মান বিবেচনা করবে।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:95
msgid "Let’s make another example. Consider that we want to perform a bit flip on the third qubit after the measurements in the following circuit, when the results of the measurement of :math:`q_0` and :math:`q_1` are both :math:`1`."
msgstr "চলুন আরেকটা উদাহরণ দেখা যাক। ধরুন, নিচের সার্কিট পরিমাপের পর যখন :math:`q_0` এবং :math:`q_1` উভয়ই :math:`1` , তখন তৃতীয় কিউবিটে বিট ফ্লিপ করতে হবে।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:133
msgid "We want to apply the :math:`X` gate, only if both the results of the measurement of :math:`q_1` and :math:`q_2` are :math:`1`. We can do this using the c_if method, conditioning the application of :math:`X` depending on the value passed as argument to c_if."
msgstr "যদি :math:`q_1` এবং :math:`q_2` এর মেজারমেন্টের ফলাফল :math:`1` হয়, তখন আমরা :math:`X` গেট ব্যবহার করব। এর জন্য আমরা c_if পদ্ধতি কাজে লাগাতে পারি, শর্ত হিসেবে :math:`X` প্রয়োগ হবে যা c_if এ পাঠানো আর্গুমেন্টের মানের উপর নির্ভরশীল।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:135
msgid "We will have to encode the value to pass to the c_if method such that it will check the values 011 and 111 (in binary representation), since it does not matter what is in the rightmost position."
msgstr "আমাদের মান গুলো এনকোড করে c_if পদ্ধতিতে পাঠাতে হবে যাতে এটা ০১১ ও ১১১ (বাইনারি রিপ্রেজেন্টেশনের মধ্যে) পরীক্ষা করে, কারণ সবচেয়ে ডানদিকের সংখ্যা অর্থহীন।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:137
msgid "The 2 integer values in decimal representation:"
msgstr "ডেসিমাল রিপ্রেজেন্টেশনে দুটি পূর্ণসংখ্যার মান: "

#: ../../tutorials/algorithms/09_IQPE.ipynb:148
msgid "|9d0dd25d356044d289b930f8545bd6b4|"
msgstr ""

#: ../../tutorials/algorithms/09_IQPE.ipynb:161
msgid "We can check the solutions using the bin() method in python (the prefix ``0b`` indicates the binary format)."
msgstr "পাইথনের bin() মেথড ব্যবহার করে আমরা সমাধানগুলোকে যাচাই করি (``0b`` উপসর্গটি  বাইনারি ফরম্যাট বোঝায়)।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:204
msgid "So we have to apply :math:`X` to :math:`q_2` using c_if two times, one for each value corresponding to 011 and 111."
msgstr "সেজন্য আমরা দুইবার c_if ব্যবহার করে :math:`q_2` এর উপর 011 এবং 111 প্রত্যেক মানের জন্য একবার করে :math:`X` প্রয়োগ করবো।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:247
msgid "IPE"
msgstr "আইপিই (IPE)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:249
msgid "The motivation for using the IPE algorithm is that QPE algorithm works fine for short depth circuits but when the circuit starts to grow, it doesn’t work properly due to gate noise and decoherence times."
msgstr "কিউপিই ধারাক্রম (অ্যালোগরিদম) এর জায়গায় আইপিই ধারাক্রম (অ্যালোগরিদম) ব্যবহারের কারণ ছোট বর্তনীতে (সার্কিট) কিউপিই কাজ করলেও বড় বর্তনীতে (সার্কিট) গেট ত্রুটি ও অসমদশার (ডিকোহেরেন্স) জন্য ঠিকঠাক কাজ করে না।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:251
msgid "The detailed explanation of how the algorithm works can be found in `Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__. To understand QPE in depth, you can see also `Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__."
msgstr "ধারাক্রম (অ্যালোগরিদম) কিভাবে কাজ করে বিস্তারিত জানতে `Iterative Phase Estimation (IPE) Algorithm <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__ দেখো। কিউপিই (QPE) ব্যাপারে জানতে `Ch.3.6 Quantum Phase Estimation <https://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html>`__ দেখো।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:254
msgid "IPE example with a 1-qubit gate for :math:`U`"
msgstr ":math:`U` -এর জন্য ১-কিউবিট যুক্তিবর্তনী (গেইট) সম্পন্ন আইপিই এর উদাহরণ"

#: ../../tutorials/algorithms/09_IQPE.ipynb:256
msgid "We want to apply the IPE algorithm to estimate the phase for a 1-qubit operator :math:`U`. For example, here we use the :math:`S`-gate."
msgstr "আমরা আইপিই ধারাক্রম (অ্যালোগরিদম) প্রয়োগ করে ১-কিউবিট অপারেটরের :math:`U` দশা অনুমান করব। উদাহরণরূপে এখানে আমরা :math:`S` -গেট ব্যবহার করব।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:258
msgid "Let’s apply the IPE algorithm to estimate the phase for :math:`S`-gate. Its matrix is"
msgstr ":math:`S`-গেটের দশা অনুমানের জন্য আইপিই ধারাক্রম (অ্যালোগরিদম) প্রয়োগ করা যাক। এর ম্যাট্রিক্সটি হল"

#: ../../tutorials/algorithms/09_IQPE.ipynb:260
msgid " S =\n"
"\\begin{bmatrix}\n"
"1 & 0\\\\\n"
"0 & e^\\frac{i\\pi}{2}\\\\\n"
"\\end{bmatrix}"
msgstr " S =\n"
"\\begin{bmatrix}\n"
"1 & 0\\\\\n"
"0 & e^\\frac{i\\pi}{2}\\\\\n"
"\\end{bmatrix}"

#: ../../tutorials/algorithms/09_IQPE.ipynb:268
msgid "That is, the :math:`S`-gate adds a phase :math:`\\pi/2` to the state :math:`|1\\rangle`, leaving unchanged the phase of the state :math:`|0\\rangle`"
msgstr "অর্থাৎ :math:`|0\\rangle অবস্থার দশা অপরিবর্তিত রেখে :math:`S`-গেট, :math:`|1\\rangle` অবস্থায় :math:`\\pi/2` দশা যোগ করা হল।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:270
msgid "S|1\\rangle = e^\\frac{i\\pi}{2}|1\\rangle\n\n"
msgstr "S|1\\rangle = e^\\frac{i\\pi}{2}|1\\rangle\n\n"

#: ../../tutorials/algorithms/09_IQPE.ipynb:272
msgid "In the following, we will use the notation and terms used in `Section 2 of lab 4 <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__."
msgstr "নিচে আমরা `অংশ ২ পরীক্ষা ৪ <https://qiskit.org/textbook/ch-labs/Lab04_IterativePhaseEstimation.html#2-iterative-phase-estimation-ipe-algorithm>`__ এর নামকরণ ও পদ ব্যবহার করব।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:274
msgid "Let’s consider to estimate the phase :math:`\\phi=\\frac{\\pi}{2}` for the eigenstate :math:`|1\\rangle`, we should find :math:`\\varphi=\\frac{1}{4}` (where :math:`\\phi = 2 \\pi \\varphi`). Therefore to estimate the phase we need exactly 2 phase bits, i.e. \\ :math:`m=2`, since :math:`1/2^2=1/4`. So :math:`\\varphi=0.\\varphi_1\\varphi_2`."
msgstr ":math:`|1\\rangle` আইজেনস্টেটের :math:`\\phi=\\frac{\\pi}{2}` দশা অনুমান করার জন্য আমাদের :math:`\\varphi=\\frac{1}{4}` -এর মান নির্ণয় করতে হবে, যখন :math:`\\phi = 2 \\pi \\varphi`। এরফলে দশা অনুমানের জন্য আমাদের ২টি দশা বিট লাগবে, অর্থাৎ \\ :math:`m=2`, যেহেতু :math:`1/2^2=1/4`। সেজন্য :math:`\\varphi=0.\\varphi_1\\varphi_2`।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:276
msgid "Remember from the theory that for the IPE algorithm, :math:`m` is also the number of iterations, so we need only :math:`2` iterations or steps."
msgstr "আইপিই ধারাক্রম (অ্যালোগরিদম) এর থেকে মনে থাকবে, :math:`m` হলো পুনরাবৃত্তির সংখ্যা, অর্থাৎ আমাদের :math:`2` বার পুনরাবৃত্তি করতে হবে।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:278
msgid "First, we initialize the circuit. IPE works with only 1 auxiliary qubit, instead of :math:`m` counting qubits of the QPE algorithm. Therefore, we need 2 qubits, 1 auxiliary qubit and 1 for the eigenstate of :math:`U`-gate, and a classical register of 2 bits, for the phase bits :math:`\\varphi_1`, :math:`\\varphi_2`."
msgstr "প্রথমে আমরা বর্তনী (সার্কিট) চালু করব। আইপিই কেবল একটা সহায়ক কিউবিট নিয়ে কাজ করে, যেখানে কিউপিই ধারাক্রম (অ্যালোগরিদম) :math:`m` গুলো গণনাকারী কিউবিট ব্যবহার করে। সেজন্য আমাদের ২টি কিউবিট, ১ টা সহায়ক কিউবিট, :math:`U` -গেটের আইজেনস্টেটের জন্য ১ টা কিউবিট এবং ২ বিটের একটা প্রথাগত (ক্লাসিক্যাল) রেজিস্টার (দশা বিট :math:`\\varphi_1`, :math:`\\varphi_2` -এর জন্য) লাগবে।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:305
#: ../../tutorials/algorithms/09_IQPE.ipynb:704
msgid "First step"
msgstr "প্রথম ধাপ"

#: ../../tutorials/algorithms/09_IQPE.ipynb:307
msgid "Now we build the quantum circuit for the first step, that is, the first iteration of the algorithm, to estimate the least significant phase bit :math:`\\varphi_m`, in this case :math:`\\varphi_2`. For the first step we have 3 sub-steps: - initialization - application of the Controlled-\\ :math:`U` gates - measure of the auxiliary qubit in x-basis"
msgstr "এবার আমরা প্রথম ধাপের জন্য কোয়ান্টাম বর্তনী (সার্কিট) বানাব। এটা ধারাক্রমের (অ্যালোগরিদম) প্রথম পুনরাবৃত্তি যেখানে সবচেয়ে কম তাৎপর্যপূর্ণ দশা বিট :math:`\\varphi_m` এর মান অনুমান করা হবে, এক্ষেত্রে :math:`\\varphi_2`। প্রথম ধাপের আরো ৩টি অংশ আছে:- আরম্ভ - নিয়ন্ত্রিত-\\ :math:`U` গেটের প্রয়োগ - x-ভিত্তিতে সহায়ক কিউবিটের পরিমাপ।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:310
#: ../../tutorials/algorithms/09_IQPE.ipynb:709
msgid "Initialization"
msgstr "আরম্ভ"

#: ../../tutorials/algorithms/09_IQPE.ipynb:312
msgid "The initialization consists of application the Hadamard gate to the auxiliary qubit and the preparation of the eigenstate :math:`|1\\rangle`."
msgstr "আরম্ভের জন্য আমরা আইজেনস্টেট :math:`|1\\rangle` -এর প্রস্তুতি ও সহায়ক কিউবিটে হ্যাডামার্ড যুক্তিবর্তনী প্রয়োগ করতে হবে।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:345
#: ../../tutorials/algorithms/09_IQPE.ipynb:744
msgid "Application of the Controlled-\\ :math:`U` gates"
msgstr "Controlled-\\ :math:`U` গেটের প্রয়োগ"

#: ../../tutorials/algorithms/09_IQPE.ipynb:347
msgid "Then we have to apply :math:`2^t` times the Controlled-\\ :math:`U` operators (see also in the docs `Two qubit gates <https://qiskit.org/documentation/tutorials/circuits/3_summary_of_quantum_operations.html#Two-qubit-gates>`__), that, in this example, is the Controlled-\\ :math:`S` gate (:math:`CS` for short)."
msgstr "এরপর আমাদের :math:`2^t` বার নিয়ন্ত্রিত-\\ :math:`U` অপারেটর প্রয়োগ করতে হবে (বিঃ দ্রঃ `দুই কিউবিট যুক্তিবর্তনী <https://qiskit.org/documentation/tutorials/circuits/3_summary_of_quantum_operations.html#Two-qubit-gates>`__) যা এই উদাহরণে নিয়ন্ত্রিত-\\ :math:`S` গেট (ছোট করে :math:`CS`)।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:349
msgid "To implement :math:`CS` in the circuit, since :math:`S` is a phase gate, we can use the controlled phase gate :math:`\\text{CP}(\\theta)`, with :math:`\\theta=\\pi/2`."
msgstr "বর্তনীতে (সার্কিট) :math:`CS` বাস্তবায়নের জন্য আমরা :math:`\\theta=\\pi/2` -এর সাথে নিয়ন্ত্রিত দশা যুক্তিবর্তনী (গেইট) :math:`\\text{CP}(\\theta)` ব্যবহার করতে পারি, যেহেতু :math:`S` একটা দশা গেট।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:381
msgid "Let’s apply :math:`2^t` times :math:`\\text{CP}(\\pi/2)`. Since for the first step :math:`t=m-1`, and :math:`m=2`, we have :math:`2^t=2`."
msgstr ":math:`2^t` বার :math:`\\text{CP}(\\pi/2)` প্রয়োগ করা যাক। যেহেতু প্রথম ধাপে :math:`t=m-1` ও :math:`m=2`, আমরা বলতে পারি :math:`2^t=2`।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:414
#: ../../tutorials/algorithms/09_IQPE.ipynb:813
msgid "Measure in x-basis"
msgstr "x -ভিত্তিতে পরিমাপ"

#: ../../tutorials/algorithms/09_IQPE.ipynb:416
msgid "Finally, we perform the measurement of the auxiliary qubit in x-basis. So we will define a function to perform the x_measure and then apply it."
msgstr "অবশেষে আমরা x-ভিত্তিতে সহায়ক কিউবিট পরিমাপ করব। এজন্য আমরা একটা x_measure -এর ফাংশন লিখবো এবং প্রয়োগ করব।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:440
msgid "In this way we obtain the phase bit :math:`\\varphi_2` and store it in the classical bit :math:`c_0`."
msgstr "এভাবে আমরা দশা বিট :math:`\\varphi_2` পাবো এবং সেটা প্রথাগত (ক্লাসিক্যাল) বিট :math:`c_0` -এ সঞ্চয় করি।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:472
msgid "Subsequent steps (2nd step)"
msgstr "ক্রমানুসারে (২য় ধাপ)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:474
msgid "Now we build the quantum circuit for the other remaining steps, in this example, only the second one. In these steps we have 4 sub-steps: the 3 sub-steps as in the first step and, in the middle, the additional step of the phase correction - initialization with reset - phase correction - application of the Control-\\ :math:`U` gates - measure of the auxiliary qubit in x-basis"
msgstr "এবার অবশিষ্ট ধাপের জন্য আমরা কোয়ান্টাম বর্তনী বানাবো, এই উদাহরণে দ্বিতীয় ধাপের জন্য। এই ধাপ আরো চারটে ধাপে বিভক্ত: প্রথম ধাপের তিনটে ধাপ এবং মাঝখানে দশা সংশোধনের একটা ধাপ- অর্থাৎ পুনঃস্থাপন (রিসেট) দিয়ে আরম্ভ - দশা সংশোধন - নিয়ন্ত্রিত-\\ :math:`U` গেটের প্রয়োগ - x-ভিত্তিতে সহায়ক কিউবিটের পরিমাপ"

#: ../../tutorials/algorithms/09_IQPE.ipynb:477
#: ../../tutorials/algorithms/09_IQPE.ipynb:852
msgid "Initialization with reset"
msgstr "পুনঃস্থাপন (রিসেট) দিয়ে আরম্ভ"

#: ../../tutorials/algorithms/09_IQPE.ipynb:479
msgid "As we want to perform an iterative algorithm in the same circuit, we need to reset the auxiliary qubit :math:`q0` after the measument gate and initialize it again as before to recycle the qubit."
msgstr "যেহেতু আমরা এই বর্তনীতেই (সার্কিট)একটা পুনরাবৃত্তিকারী ধারাক্রম (ইটারেটিভ এলগোরিদম) চালাবো, গেট পরিমাপের পর কিউবিট পুনর্ব্যবহারের জন্য সহায়ক কিউবিট :math:`q0` আমাদের পুনঃস্থাপন (রিসেট) করতে হবে।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:512
#: ../../tutorials/algorithms/09_IQPE.ipynb:885
msgid "Phase correction (for step 2)"
msgstr "দ্বিতীয় ধাপের জন্য দশা সংশোধন"

#: ../../tutorials/algorithms/09_IQPE.ipynb:514
msgid "As seen in the theory, in order to extract the phase bit :math:`\\varphi_{1}`, we perform a phase correction of :math:`-\\pi\\varphi_2/2`. Of course, we need to apply the phase correction in the circuit only if the phase bit :math:`\\varphi_2=1`, i.e. we have to apply the phase correction of :math:`-\\pi/2` only if the classical bit :math:`c_0` is 1."
msgstr "তত্ত্বানুসারে দশা বিট :math:`\\varphi_{1}` বের করার জন্য আমরা :math:`-\\pi\\varphi_2/2` -এর দশা সংশোধন করব, যখন দশা বিট :math:`\\varphi_2=1`। অর্থাৎ আমরা :math:`-\\pi/2` দশা সংশোধন করব যদি প্রথাগত (ক্লাসিক্যাল) বিট :math:`c_0` এর মান ১ হয়।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:516
msgid "So, after the reset we apply the phase gate :math:`P(\\theta)` with phase :math:`\\theta=-\\pi/2` conditioned by the classical bit :math:`c_0` (:math:`=\\varphi_2`) using the ``c_if`` method. So as we saw in the first part of this tutorial, we have to use the ``c_if`` method with a value of 1, as :math:`1_{10} = 001_{2}` (the subscripts :math:`_{10}` and :math:`_2` indicate the decimal and binary representations)."
msgstr "সেজন্য পুনঃস্থাপনের (রিসেট) পর ``c_if`` পদ্ধতি ব্যবহার করে প্রথাগত (ক্লাসিক্যাল) বিট :math:`c_0` (:math:`=\\varphi_2`) -এর শর্তাধীনে :math:`\\theta=-\\pi/2` দশাসহ :math:`P(\\theta)` দশা গেট প্রয়োগ করব। এই পাঠসমূহের (টিউটোরিয়াল) শুরুতে দেখানো ১ মান নিয়ে ``c_if`` পদ্ধতি ব্যবহার করব, যেহেতু :math:`1_{10} = 001_{2}` (সাবস্ক্রিপ্ট :math:`_{10}` and :math:`_2` দশমিক ও দ্বিমিক (বাইনারি) রূপ চিহ্নিত করে)।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:548
#: ../../tutorials/algorithms/09_IQPE.ipynb:921
msgid "Application of the Control-\\ :math:`U` gates and x-measurement (for step 2)"
msgstr "নিয়ন্ত্রিত-\\ :math:`U` গেটের প্রয়োগ এবং x-পরিমাপ (২য় ধাপ)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:550
msgid "We apply the :math:`CU` operations as we did in the first step. For the second step we have :math:`t=m-2`, hence :math:`2^t=1`. So we apply :math:`\\text{CP}(\\pi/2)` once. And then we perform the x-measurment of the qubit :math:`q_0`, storing the result, the phase bit :math:`\\varphi_1`, in the bit :math:`c_1` of classical register."
msgstr "প্রথম ধাপের মতো আমরা :math:`CU` ক্রিয়াকলাপ (অপারেশন) করব। দ্বিতীয় ধাপে আমরা জানি :math:`t=m-2` যা থেকে পাওয়া যায় :math:`2^t=1`। সেজন্য আমরা একবার :math:`\\text{CP}(\\pi/2)` প্রয়োগ করবো এবং :math:`q_0` কিউবিটের x-পরিমাপ করবো ও :math:`\\varphi_1` দশা বিটের মান :math:`c_1` বিটে সঞ্চয় করবো।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:575
msgid "Et voilà, we have our final circuit"
msgstr "আমরা অন্তিম বর্তনীটা (সার্কিট) পেলাম"

#: ../../tutorials/algorithms/09_IQPE.ipynb:605
msgid "Let’s execute the circuit with the ``qasm_simulator``, the simulator without noise that run locally."
msgstr "``qasm_simulator`` এ বর্তনী (সার্কিট) চালিয়ে দেখা যাক যেটা স্থানীয় ও ত্রুটিহীনভাবে চলে।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:643
msgid "In the picture we have the same histograms but on the left we have on the x-axis the string with phase bits :math:`\\varphi_1`, :math:`\\varphi_2` and on the right the actual phase :math:`\\varphi` in decimal representation."
msgstr "এই ছবিতে একই হিস্টোগ্রাম পেলেও লক্ষ্য করো বাঁদিকে x-অক্ষে :math:`\\varphi_1`, :math:`\\varphi_2` দশা বিটদুটো এবং ডানদিকে আসল দশা :math:`\\varphi` দশমিকরূপে আছে।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:645
msgid "As we expected we have found :math:`\\varphi=\\frac{1}{4}=0.25` with a :math:`100\\%` probability."
msgstr "আশানুরূপভাবে আমরা :math:`100\\%` সম্ভাবনায় :math:`\\varphi=\\frac{1}{4}=0.25` পেয়েছি।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:657
msgid "IPE example with a 2-qubit gate"
msgstr "২-কিউবিট যুক্তিবর্তনী (গেইট) সম্পন্ন আইপিই এর উদাহরণ"

#: ../../tutorials/algorithms/09_IQPE.ipynb:659
msgid "Now, we want to apply the IPE algorithm to estimate the phase for a 2-qubit gate :math:`U`. For this example, let’s consider the controlled version of the :math:`T` gate, i.e. the gate :math:`U=\\textrm{Controlled-}T` (that from now we will express more complactly with :math:`CT`). Its matrix is"
msgstr "আমরা আইপিই ধারাক্রম (অ্যালোগরিদম) প্রয়োগ করে ২-কিউবিট গেট :math:`U` দশা অনুমান করব। উদাহরণরূপে এখানে আমরা :math:`T` -গেটের নিয়ন্ত্রিত রূপ (:math:`U=\\textrm{Controlled-}T` যাকে সংক্ষিপ্ত করে আমরা :math:`CT` বলব) ব্যবহার করব।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:661
msgid " CT =\n"
"\\begin{bmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^\\frac{i\\pi}{4}\\\\\n"
"\\end{bmatrix}"
msgstr " CT =\n"
"\\begin{bmatrix}\n"
"1 & 0 & 0 & 0\\\\\n"
"0 & 1 & 0 & 0\\\\\n"
"0 & 0 & 1 & 0\\\\\n"
"0 & 0 & 0 & e^\\frac{i\\pi}{4}\\\\\n"
"\\end{bmatrix}"

#: ../../tutorials/algorithms/09_IQPE.ipynb:671
msgid "That is, the :math:`CT` gate adds a phase :math:`\\pi/4` to the state :math:`|11\\rangle`, leaving unchanged the phase of the other computational basis states :math:`|00\\rangle`, :math:`|01\\rangle`, :math:`|10\\rangle`."
msgstr "অর্থাৎ :math:`CT` গেট :math:`|11\\rangle` অবস্থায় :math:`\\pi/4` দশা যোগ করে। এই অবস্থায় অন্যান্য গণনার ভিত্তি অবস্থা :math:`|00\\rangle`, :math:`|01\\rangle`, :math:`|10\\rangle` -এর দশা অপরিবর্তিত থাকে।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:673
msgid "Let’s consider to estimate the phase :math:`\\phi=\\pi/4` for the eigenstate :math:`|11\\rangle`, we should find :math:`\\varphi=1/8`, since :math:`\\phi = 2 \\pi \\varphi`. Therefore to estimate the phase we need exactly 3 classical bits, i.e. \\ :math:`m=3`, since :math:`1/2^3=1/8`. So :math:`\\varphi=0.\\varphi_1\\varphi_2\\varphi_3`."
msgstr ":math:`|11\\rangle` আইজেনস্টেটের :math:`\\phi=\\pi/4` দশা অনুমান করার জন্য আমাদের :math:`\\varphi=1/8` -এর মান নির্ণয় করতে হবে, যেহেতু :math:`\\phi = 2 \\pi \\varphi`। এরফলে দশা অনুমানের জন্য আমাদের ৩টি দশা বিট লাগবে, অর্থাৎ \\ :math:`m=3`, যেহেতু :math:`1/2^3=1/8`। সেজন্য :math:`\\varphi=0.\\varphi_1\\varphi_2\\varphi_3`।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:675
msgid "As done with the example for the 1-qubit :math:`U` operator we will go through the same steps but this time we will have :math:`3` steps since :math:`m=3`, and we will not repeat all the explanations. So for details see the above example for 1-qubit :math:`U` gate."
msgstr "১-কিউবিট :math:`U` অপারেটরের উদাহরণের মতো আমরা একই ধাপ অনুসরণ করব কিন্তু এবার আমাদের :math:`3` গুলো ধাপ করবো কারণ :math:`m=3`। এই ব্যাপারে বিশদে জানতে ১-কিউবিট :math:`U` গেটের উদাহরণ দেখো।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:677
msgid "First, we initialize the circuit with 3 qubits, 1 for the auxiliary qubit and 2 for the 2-qubit gate, and 3 classical bits to store the phase bits :math:`\\varphi_1`, :math:`\\varphi_2`, :math:`\\varphi_3`."
msgstr "প্রথমে আমরা ৩টি কিউবিট নিয়ে বর্তনী (সার্কিট) চালু করবো, ১টা সহায়ক কিউবিট, ২-কিউবিট গেটের জন্য ২টো। এছাড়াও আমরা ৩টি প্রথাগত (ক্লাসিক্যাল) বিট নেবো যাতে :math:`\\varphi_1`, :math:`\\varphi_2`, :math:`\\varphi_3` দশা বিটের মান সঞ্চয় হবে।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:706
msgid "Now we build the quantum circuit for the first step, to estimate the least significant phase bit :math:`\\varphi_m=\\varphi_3`."
msgstr "এবার আমরা কম তাৎপর্যপূর্ণ দশা বিট :math:`\\varphi_m=\\varphi_3` অনুমানের জন্য আমরা কোয়ান্টাম বর্তনী (সার্কিট) বানাবো।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:711
msgid "We initialize the auxiliary qubit and the other qubits with the eigenstate :math:`|11\\rangle`."
msgstr "আমরা সহায়ক কিউবিট ও অনান্য কিউবিট :math:`|11\\rangle` আইজেনস্টেট দিয়ে শুরু করি।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:746
msgid "Then we have to apply multiple times the :math:`CU` operator, that, in this example, is the Controlled-\\ :math:`CT` gate (:math:`CCT` for short)."
msgstr "এরপর আমাদের একাধিকবার :math:`CU` অপারেটর প্রয়োগ করতে হবে, এই উদাহরণে যা নিয়ন্ত্রিত-\\ :math:`CT` গেট (সংক্ষেপে :math:`CCT`)।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:748
msgid "To implement :math:`CCT` in the circuit, since :math:`T` is a phase gate, we can use the multi-controlled phase gate :math:`\\text{MCP}(\\theta)`, with :math:`\\theta=\\pi/4`."
msgstr "বর্তনীতে (সার্কিট) :math:`CCT` বাস্তবায়নের জন্য আমরা :math:`\\theta=\\pi/4` -এর সাথে বহুদ্বারা নিয়ন্ত্রিত দশা গেট :math:`\\text{MCP}(\\theta)` ব্যবহার করতে পারি, যেহেতু :math:`T` একটা দশা গেট।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:780
msgid "Let’s apply :math:`2^t` times :math:`\\text{MCP}(\\pi/4)`. Since for the first step :math:`t=m-1` and :math:`m=3`, we have :math:`2^t=4`."
msgstr ":math:`2^t` বার :math:`\\text{MCP}(\\pi/4)` প্রয়োগ করা যাক। যেহেতু প্রথম ধাপে :math:`t=m-1` ও :math:`m=3`, আমরা বলতে পারি :math:`2^t=4`।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:815
msgid "Finally, we perform the measurenment of the auxiliary qubit in x-basis. We can use the ``x_measurement`` function defined above in the example for 1-qubit gate. In this way we have obtained the phase bit :math:`\\varphi_3` and stored it in the classical bit :math:`c_0`."
msgstr "অবশেষে আমরা x-ভিত্তিতে সহায়ক কিউবিট পরিমাপ করব। এজন্য আমরা আগে ১-কিউবিট গেটের উদাহরণে লেখা ``x_measurement`` -এর ফাংশন ব্যবহার করব। এভাবে আমরা :math:`\\varphi_3` দশা বিট পাবো এবং তা :math:`c_0` প্রথাগত (ক্লাসিক্যাল) বিটে সঞ্চয় করব।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:847
msgid "Subsequent steps (2nd, 3rd)"
msgstr "ক্রমানুসারে (২য় ও ৩য় ধাপ)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:849
msgid "Now we build the quantum circuit for the other remaining steps, the second and the third ones. As said in the first example, in these steps we have the additional sub-step of the phase correction."
msgstr "এখন বাকি ধাপের (২য় ও ৩য়) জন্য কোয়ান্টাম বর্তনী (সার্কিট) বানাবো। প্রথম উদাহরণের মতো এখানেও দশা সংশোধনের অতিরিক্ত ধাপ আছে।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:887
msgid "In order to extract the phase bit :math:`\\varphi_{2}`, we perform a phase correction of :math:`-\\pi\\varphi_3/2`."
msgstr "দশা বিট :math:`\\varphi_{2}` নিষ্কাশনের জন্য আমরা :math:`-\\pi\\varphi_3/2` -এর ত্রুটি সংশোধন করব।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:889
msgid "So, after the reset we apply the phase gate :math:`P(\\theta)` with phase :math:`\\theta=-\\pi/2` conditioned by the classical bit :math:`c_0` (:math:`=\\varphi_3`)."
msgstr "পুনঃস্থাপনের (রিসেট) পর আমরা :math:`\\theta=-\\pi/2` দশা সম্পন্ন দশা গেট :math:`P(\\theta)` প্রয়োগ করবো, শর্ত হিসেবে প্রথাগত (ক্লাসিক্যাল) বিট :math:`c_0` (:math:`=\\varphi_3`)।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:923
msgid "We apply the :math:`CU` operations as we did in the first step. For the second step we have :math:`t=m-2`, hence :math:`2^t=2`. So we apply :math:`\\text{MCP}(\\pi/4)` :math:`2` times. And then we perform the x-measurement of the qubit :math:`q_0`, storing the phase bit :math:`\\varphi_2` in the bit :math:`c_1`."
msgstr "প্রথম ধাপের মতো আমরা :math:`CU` ক্রিয়াকলাপ (অপারেশন) করব। দ্বিতীয় ধাপে আমরা জানি :math:`t=m-2` যা থেকে পাওয়া যায় :math:`2^t=2`। সেজন্য আমরা :math:`2` বার :math:`\\text{MCP}(\\pi/4)` প্রয়োগ করবো এবং :math:`q_0` কিউবিটের x-পরিমাপ করবো ও :math:`\\varphi_2` দশা বিটের মান :math:`c_1` বিটে সঞ্চয় করবো।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:957
msgid "All substeps of the 3rd step"
msgstr "তৃতীয় ধাপের সব আংশিক ধাপ"

#: ../../tutorials/algorithms/09_IQPE.ipynb:959
msgid "For the 3rd and last step, we perform the reset and initialization of the auxiliary qubit as done in the second step."
msgstr "৩য় এবং শেষ ধাপের জন্য আমরা ২য় ধাপের মতো করে সহায়ক কিউবিট পুনঃস্থাপন (রিসেট) এবং আরম্ভ করব।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:961
msgid "Then at the 3rd step we have to perform the phase correction of :math:`-2\\pi 0.0\\varphi_{2}\\varphi_{3}= -2\\pi \\left(\\frac{\\varphi_2}{4}+\\frac{\\varphi_3}{8}\\right)=-\\frac{\\varphi_2\\pi}{2}-\\frac{ \\varphi_3\\pi}{4}`, thus we have to apply 2 conditioned phase corrections, one conditioned by :math:`\\varphi_3` (:math:`=c_0`) and the other by :math:`\\varphi_2`\\ (:math:`=c_1`). To do this we have to apply the following: - gate :math:`P(-\\pi/4)` conditioned by :math:`c_0=1`, that is, by :math:`c=001` (c_if with value 1) - gate :math:`P(-\\pi/2)` conditioned by :math:`c_1=1`, that is, the gate is applied when :math:`c=010` (c_if with values :math:`2`) - gate :math:`P(-3\\pi/4)` conditioned by :math:`c_1=1` and :math:`c_0=1` that is, the gate is applied when :math:`c=011` (c_if with values :math:`3`)"
msgstr "তৃতীয় ধাপে :math:`-2\\pi 0.0\\varphi_{2}\\varphi_{3}= -2\\pi \\left(\\frac{\\varphi_2}{4}+\\frac{\\varphi_3}{8}\\right)=-\\frac{\\varphi_2\\pi}{2}-\\frac{ \\varphi_3\\pi}{4}` -এর দশা সংশোধন করতে হবে। এভাবে আমাদের দুটো শর্তাধীন দশা সংশোধন করতে হবে, একটা :math:`\\varphi_3` (:math:`=c_0`) শর্তে এবং অন্যটা :math:`\\varphi_2`\\ (:math:`=c_1`)। এর জন্য করণীয় হলো:- gate :math:`P(-\\pi/4)` conditioned by :math:`c_0=1`, that is, by :math:`c=001` (c_if with value 1) - gate :math:`P(-\\pi/2)` conditioned by :math:`c_1=1`, that is, the gate is applied when :math:`c=010` (c_if with values :math:`2`) - gate :math:`P(-3\\pi/4)` conditioned by :math:`c_1=1` and :math:`c_0=1` that is, the gate is applied when :math:`c=011` (c_if with values :math:`3`)"

#: ../../tutorials/algorithms/09_IQPE.ipynb:964
msgid "Next, the :math:`CU` operations: we apply :math:`2^t` times the :math:`\\text{MCP}(\\pi/4)` gate and since at the 3rd step :math:`t=m-3=0`, we apply the gate only once."
msgstr "এরপর, :math:`CU` ক্রিয়াকলাপ (অপারেশন): আমরা :math:`2^t` বার :math:`\\text{MCP}(\\pi/4)` গেট প্রয়োগ করব এবং যেহেতু ৩য় ধাপে :math:`t=m-3=0`, আমরা গেটটা একবার প্রয়োগ করতে পারবো।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:1012
msgid "Now, we execute the circuit with the simulator without noise."
msgstr "এবার আমরা ত্রুটি ছাড়া বর্তনীটা (সার্কিট) সিমুলেটরে চালাবো।"

#: ../../tutorials/algorithms/09_IQPE.ipynb:1049
msgid "We have obtained :math:`100\\%` probability to find :math:`\\varphi=0.125`, that is, :math:`1/8`, as expected."
msgstr "আমরা অনুমানমতো :math:`\\varphi=0.125` (বা :math:`1/8`) পাওয়ার সম্ভাবনা :math:`100\\%` পেয়েছি।"

