msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-27 13:03+0000\n"
"PO-Revision-Date: 2023-10-27 13:54\n"
"Last-Translator: \n"
"Language: bn_BN\n"
"Language-Team: Bengali Language\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: bengali\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/02_operators_overview.po\n"
"X-Crowdin-File-ID: 9124\n"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:10
msgid "This page was generated from `tutorials/circuits_advanced/02_operators_overview.ipynb`__."
msgstr "এই পাতাটির উৎস ``tutorials/circuits_advanced/02_operators_overview.ipynb`__ ।"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:9
msgid "Operators"
msgstr "অপারেটরসমূহ"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:39
msgid "Operator Class"
msgstr "অপারেটর ক্লাস"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:41
msgid "The ``Operator`` class is used in Qiskit to represent matrix operators acting on a quantum system. It has several methods to build composite operators using tensor products of smaller operators, and to compose operators."
msgstr "Qiskit এ ``Operator`` ক্লাসটি কোয়ান্টামতন্ত্রের ওপর প্রয়োগকৃত ম্যাট্রিক্স অপারেটরসমূহকে প্রকাশ করে। এটি ছোট অপারেটরসমূহের টেনসর ফল ব্যবহার করে বিভিন্ন উপায়ে যৌগিক (কম্পোজিট) অপারেটর তৈরি করে।"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:44
msgid "Creating Operators"
msgstr "অপারেটর তৈরি করা"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:46
msgid "The easiest way to create an operator object is to initialize it with a matrix given as a list or a Numpy array. For example, to create a two-qubit Pauli-XX operator:"
msgstr "অপারেটর অবজেক্ট তৈরির সবচেয়ে সহজ উপায় হচ্ছে কোনো লিস্ট বা Numpy অ্যারে ধরনের ম্যাট্রিক্স ব্যবহার করা। একটি দ্বি-কিউবিট পউলি (Pauli) - XX অপারেটর তৈরির উপায় হলঃ"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:106
msgid "Operator Properties"
msgstr "অপারেটরের বৈশিষ্ট্যসমূহ"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:108
msgid "The operator object stores the underlying matrix, and the input and output dimension of subsystems."
msgstr "অপারেটর অবজেক্টটি অন্তর্নিহিত ম্যাট্রিক্স এবং উপব্যবস্থার (সাবসিস্টেম) ইনপুট ও আউটপুট মাত্রা (ডাইমেনশন) সংরক্ষণ করে।"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:110
msgid "``data``: To access the underlying Numpy array, we may use the ``Operator.data`` property."
msgstr "``data``: এর অন্তর্বর্তী Numpy অ্যারেটির উপর কাজ করার জন্য আমরা ``Operator.data`` ব্যবহার করতে পারি।"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:111
msgid "``dims``: To return the total input and output dimension of the operator, we may use the ``Operator.dim`` property. *Note: the output is returned as a tuple* ``(input_dim, output_dim)``, *which is the reverse of the shape of the underlying matrix.*"
msgstr ""

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:203
msgid "Input and Output Dimensions"
msgstr "ইনপুট এবং আউটপুট মাত্রা (ডাইমেনশন)"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:205
msgid "The operator class also keeps track of subsystem dimensions, which can be used for composing operators together. These can be accessed using the ``input_dims`` and ``output_dims`` functions."
msgstr "অপারেটর ক্লাস সাবসিস্টেমের মাত্রার (ডাইমেনশন) ট্র্যাক রাখে যা অপারেটরগুলো একসাথে ব্যবহার করতে কাজে লাগে। এগুলো ``input_dims`` এবং ``output_dims`` ফাংশনের সাহায্যে অ্যাক্সেস করা যায়।"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:207
msgid "For :math:`2^N` by :math:`2^M` operators, the input and output dimension will be automatically assumed to be M-qubit and N-qubit:"
msgstr ":math:`2^N` বাই :math:`2^M` অপারেটরগুলোর জন্য ইনপুট ও আউটপুট মাত্রা M কিউবিট এবং N কিউবিট ধরে নেয়া হয়ঃ"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:257
msgid "If the input matrix is not divisible into qubit subsystems, then it will be stored as a single-qubit operator. For example, if we have a :math:`6\\times6` matrix:"
msgstr "ইনপুট ম্যাট্রিক্সটি কিউবিট সাবসিস্টেমে বিভাজ্য না হলে একটি একক কিউবিট হিসেবে সংরক্ষিত হবে।যেমন- আমাদের কাছে যদি একটি :math:`6\\times6` ম্যাট্রিক্স থাকেঃ"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:307
msgid "The input and output dimension can also be manually specified when initializing a new operator:"
msgstr "নতুন অপারেটর নির্ধারণ করার সময়ও ইনপুট আউটপুট মাত্রা (ডাইমেনশন) নির্দিষ্ট করা যায়ঃ"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:399
msgid "We can also extract just the input or output dimensions of a subset of subsystems using the ``input_dims`` and ``output_dims`` functions:"
msgstr "``input_dims`` এবং ``output_dims`` ফাংশনগুলো ব্যবহার করেও ইনপুট ও আউটপুটের মাত্রা নির্ণয় করা যায়ঃ"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:449
msgid "Converting classes to Operators"
msgstr "ক্লাস কে অপারেটরে পরিবর্তন"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:451
msgid "Several other classes in Qiskit can be directly converted to an ``Operator`` object using the operator initialization method. For example:"
msgstr "Qiskit এর অন্যান্য প্যাকেজগুলি কোনো ``Operator`` এ সরাসরি পরিবর্তন করা যায় অপারেটর ইনিশিয়ালাইজেশন পদ্ধতি ব্যবহার করে। যেমনঃ"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:453
msgid "``Pauli`` objects"
msgstr "``Pauli`` অবজেক্টসমূহ"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:454
msgid "``Gate`` and ``Instruction`` objects"
msgstr "``Gate`` এবং ``Instruction`` অবজেক্টসমূহ"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:455
msgid "``QuantumCircuit`` objects"
msgstr ""

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:457
msgid "Note that the last point means we can use the ``Operator`` class as a unitary simulator to compute the final unitary matrix for a quantum circuit, without having to call a simulator backend. If the circuit contains any unsupported operations, an exception will be raised. Unsupported operations are: measure, reset, conditional operations, or a gate that does not have a matrix definition or decomposition in terms of gate with matrix definitions."
msgstr "এখানে উল্লেখ্য যে, আমরা ``Operator`` ক্লাসটি unitary সিমুলেটর হিসেবে একটি কোয়ান্টাম বর্তনীর শেষ unitary ম্যাট্রিক্সের হিসাবনিকাশ করতে ব্যবহার করতে পারি কোনো রকম সিমুলেটর ব্যাকএন্ড এর সাহায্য ছাড়া। বর্তনীতে কোনো অসমর্থিত (আনসাপোর্টেড) অপারেশন থাকলে একটি এক্সেপশন উত্থাপন হবে। আনসাপোর্টেড অপারেশনগুলো হলোঃ পরিমাপ (মেজার), রিসেট, কন্ডিশনাল বা শর্তসাপেক্ষ অপারেশন অথবা কোনো গেইট যার ম্যাট্রিক্স নেই।"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:690
msgid "Using Operators in circuits"
msgstr "বর্তনীতে (সার্কিট) অপারেটরের ব্যবহার"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:692
msgid "Unitary ``Operators`` can be directly inserted into a ``QuantumCircuit`` using the ``QuantumCircuit.append`` method. This converts the ``Operator`` into a ``UnitaryGate`` object, which is added to the circuit."
msgstr "Unitary ``Operators`` অপারেটরগুলো সরাসরি ``QuantumCircuit.append`` মেথড ব্যবহারের মাধ্যমে ``QuantumCircuit`` এ ব্যবহার করা যায়। এটি ``Operator`` কে একটি ``UnitaryGate`` অবজেক্ট এ রূপান্তর করে যা বর্তনীতে সংযুক্ত হয়।"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:694
msgid "If the operator is not unitary, an exception will be raised. This can be checked using the ``Operator.is_unitary()`` function, which will return ``True`` if the operator is unitary and ``False`` otherwise."
msgstr "যদি অপারেটরটি unitary না হয় তবে একটি এক্সেপশন উত্থিত হবে। এটি ``Operator.is_unitary()`` ফাংশন দিয়ে পরীক্ষা করা যায় যাতে অপারেটরটি unitary হলে ফাংশনটি ``True`` ফেরত দেয় নতুবা ``False`` দেয়।"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:731
msgid "Note that in the above example we initialize the operator from a ``Pauli`` object. However, the ``Pauli`` object may also be directly inserted into the circuit itself and will be converted into a sequence of single-qubit Pauli gates:"
msgstr "উল্লেখ্য যে উপরের উদাহরণে আমরা অপারেটরটি একটি ``Pauli`` অবজেক্ট থেকে পেয়েছি। ``Pauli`` অবজেক্টকে সরাসরি বর্তনীতে ব্যবহার এবং কিছু একক কিউবিট Pauli গেইটে রূপান্তর করা যায়।"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:857
msgid "Combining Operators"
msgstr "অপারেটরের সমাবেশ"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:859
msgid "Operators may be combined using several methods."
msgstr "বিভিন্ন উপায়ে অপারেটরগুলোর সমাবেশ (কম্বাইন) তৈরি করা যায়।"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:862
msgid "Tensor Product"
msgstr "টেনসর ফল (প্রোডাক্ট)"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:864
msgid "Two operators :math:`A` and :math:`B` may be combined into a tensor product operator :math:`A\\otimes B` using the ``Operator.tensor`` function. Note that if both :math:`A` and :math:`B` are single-qubit operators, then ``A.tensor(B)`` = :math:`A\\otimes B` will have the subsystems indexed as matrix :math:`B` on subsystem 0, and matrix :math:`A` on subsystem 1."
msgstr ""

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:925
msgid "Tensor Expansion"
msgstr "টেনসর প্রসারণ (এক্সপ্যানশন)"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:927
msgid "A closely related operation is ``Operator.expand``, which acts like a tensor product but in the reverse order. Hence, for two operators :math:`A` and :math:`B` we have ``A.expand(B)`` = :math:`B\\otimes A` where the subsystems indexed as matrix :math:`A` on subsystem 0, and matrix :math:`B` on subsystem 1."
msgstr ""

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:988
msgid "Composition"
msgstr "গঠন"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:990
msgid "We can also compose two operators :math:`A` and :math:`B` to implement matrix multiplication using the ``Operator.compose`` method. We have that ``A.compose(B)`` returns the operator with matrix :math:`B.A`:"
msgstr "আমরা :math:`A` এবং :math:`B` অপারেটর দুইটি ব্যবহার করে ম্যাট্রিক্স গুণন করতে পারি ``Operator.compose`` মেথডের সাহায্যে। ``A.compose(B)`` -এটি :math:`B.A` ম্যাট্রিক্স অপারেটরটি ফেরত দেয়ঃ"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1044
msgid "We can also compose in the reverse order by applying :math:`B` in front of :math:`A` using the ``front`` kwarg of ``compose``: ``A.compose(B, front=True)`` = :math:`A.B`:"
msgstr "আমরা বিপরীতক্রমে :math:`A` এর সামনে :math:`B` বসিয়েও ``compose` এর ``front`` কীওয়ার্ড আর্গুমেন্ট ব্যবহার করতে পারিঃ ``A.compose(B, front=True)`` = :math:`A.B`:"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1099
msgid "Subsystem Composition"
msgstr "সাবসিস্টেমের গঠন"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1101
msgid "Note that the previous compose requires that the total output dimension of the first operator :math:`A` is equal to total input dimension of the composed operator :math:`B` (and similarly, the output dimension of :math:`B` must be equal to the input dimension of :math:`A` when composing with ``front=True``)."
msgstr "উল্লেখ্য যে, প্রথম অপারেটর :math:`A` এর মোট আউটপুট মাত্রা কম্পোজড অপারেটর :math:`B` এর মোট ইনপুট মাত্রার সমান হতে হবে (এবং একইভাবে :math:`B` এর আউটপুট মাত্রা :math:`A` এর ইনপুট মাত্রার সমতুল্য হবে যখন ``front=True``)।"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1103
msgid "We can also compose a smaller operator with a selection of subsystems on a larger operator using the ``qargs`` kwarg of ``compose``, either with or without ``front=True``. In this case, the relevant input and output dimensions of the subsystems being composed must match. *Note that the smaller operator must always be the argument of* ``compose`` *method.*"
msgstr ""

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1105
msgid "For example, to compose a two-qubit gate with a three-qubit Operator:"
msgstr "উদাহরণস্বরূপ, একটি তিন কিউবিট অপারেটর সহ একটি দ্বি কিউবিট যুক্তিবর্তনীর (গেইট) জন্যঃ"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1265
msgid "Linear combinations"
msgstr "রৈখিক সমাবেশ"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1267
msgid "Operators may also be combined using standard linear operators for addition, subtraction and scalar multiplication by complex numbers."
msgstr "অপারেটরগুলো জটিল সংখ্যার যোগ, বিয়োগ এবং স্কেলার গুণ দ্বারাও যুক্ত করা সম্ভব।"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1330
msgid "An important point is that while ``tensor``, ``expand`` and ``compose`` will preserve the unitarity of unitary operators, linear combinations will not; hence, adding two unitary operators will, in general, result in a non-unitary operator:"
msgstr "একটি গুরুত্বপূর্ণ বিষয় হল ``tensor``, ``expand`` এবং ``compose`` unitary অপারেটরসমূহের ইউনিটারিটি সংরক্ষণ করলেও রৈখিক সমাবেশ তা করবেনা; তাই দুইটি ইউনিটারি অপারেটর যোগ করলে একটি নন-ইউনিটারি অপারেটর তৈরি হয়ঃ"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1377
msgid "Implicit Conversion to Operators"
msgstr "অপারেটরের রূপান্তর"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1379
msgid "Note that for all the following methods, if the second object is not already an ``Operator`` object, it will be implicitly converted into one by the method. This means that matrices can be passed in directly without being explicitly converted to an ``Operator`` first. If the conversion is not possible, an exception will be raised."
msgstr "উল্লেখ্য যে এ সবগুলো পদ্ধতির জন্য, দ্বিতীয় অবজেক্টটি যদি ``Operator`` না হয় তবে তা মেথডের মাধ্যমে ``Operator`` এ পরিবর্তিত (কনভার্শন) হবে। অর্থাৎ ম্যাট্রিক্সগুলো ``Operator`` এ পরিবর্তন না করেও সরাসরি ব্যবহার করা যাবে। এই রূপান্তর (কনভার্শন) সম্ভব না হলে একটি এক্সেপশন দেখা যাবে।"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1433
msgid "Comparison of Operators"
msgstr "অপারেটরসমূহের সাদৃশ্য"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1435
msgid "Operators implement an equality method that can be used to check if two operators are approximately equal."
msgstr "অপারেটরের একটি সমতা নির্ধারণ পদ্ধতি আছে যা দিয়ে দুইটি অপারেটর সমান কিনা তা নির্ণয় করা যায়।"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1481
msgid "Note that this checks that each matrix element of the operators is approximately equal; two unitaries that differ by a global phase will not be considered equal:"
msgstr "অপারেটরের প্রত্যেকটি ম্যাট্রিক্স প্রায় সমান। দুইটি ইউনিটারির যদি সার্বজনীন দশা পার্থক্য থাকে তবে তাদের সমান গণ্য করা হয় নাঃ"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1528
msgid "Process Fidelity"
msgstr "প্রসেস ফিডেলিটি (যথার্থতা)"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1530
msgid "We may also compare operators using the ``process_fidelity`` function from the *Quantum Information* module. This is an information theoretic quantity for how close two quantum channels are to each other, and in the case of unitary operators it does not depend on global phase."
msgstr "আমরা অপারেটরগুলির সাদৃশ্য *Quantum Information* মডিউলের ``process_fidelity`` দিয়েও তুলনা করতে পারি। এটি তথ্যের একটি তাত্ত্বিক পরিমাণ যা দুইটি কোয়ান্টাম চ্যানেল কতটা কাছাকাছি তা নির্ণয় করে। অবশ্য ইউনিটারি অপারেটরের ক্ষেত্রে সার্বজনীন দশার উপর নির্ভর করেনা।"

#: ../../tutorials/circuits_advanced/02_operators_overview.ipynb:1581
msgid "Note that process fidelity is generally only a valid measure of closeness if the input operators are unitary (or CP in the case of quantum channels), and an exception will be raised if the inputs are not CP."
msgstr "উল্লেখ্য যে, প্রসেস ফিডেলিটি সাধারণত এরা কতটা কাছাকাছি তার একটি সঠিক পরিমাপ দেয় যদি ইনপুট অপারেটরগুলি ইউনিটারি হয় (অথবা CP কোয়ান্টাম চ্যানেলের ক্ষেত্রে), এবং ইনপুটগুলি CP না হলে একটি এক্সেপশন তৈরি হয়।"

