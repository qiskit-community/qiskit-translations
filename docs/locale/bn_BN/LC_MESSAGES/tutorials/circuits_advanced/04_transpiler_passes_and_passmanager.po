msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-26 23:06+0000\n"
"PO-Revision-Date: 2023-01-26 23:32\n"
"Last-Translator: \n"
"Language-Team: Bengali Language\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: bengali\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.po\n"
"X-Crowdin-File-ID: 9128\n"
"Language: bn_BN\n"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:10
msgid "This page was generated from `tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb`__."
msgstr "এই পৃষ্ঠাটি `tutorials/circuits_advanced/1_advanced_circuits.ipynb`__ থেকে উৎপন্ন হয়েছে।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:9
msgid "Transpiler Passes and Pass Manager"
msgstr "ট্রান্সপাইলারের ছাড়পত্র ও ছাড়পত্র পরিচালক"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:21
msgid "Introduction"
msgstr "ভূমিকা"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:32
msgid "A central component of Qiskit Terra is the transpiler, which is designed for modularity and extensibility. The goal is to be able to easily write new circuit transformations (known as transpiler **passes**), and combine them with other existing passes. Which passes are chained together and in which order has a major effect on the final outcome. This pipeline is determined by a **pass manager**, which schedules the passes and also allows passes to communicate with each other by providing a shared space. In this way, the transpiler opens up the door for research into aggressive optimization of quantum circuits."
msgstr "Qiskit Terra -এর একটা গুরুত্বপূর্ণ অঙ্গ হলো ট্রান্সপাইলার, যেটিকে কাজ ছোট করে ভাঙা (মডুলারিটি) ও পরে কাজকে বড়ো করে নেওয়ার (এক্সটেন্সিবিলিটি) জন্য বানানো হয়েছে।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:35
msgid "In this notebook, we look at the built-in passes, how to use the pass manager, and develop a simple custom transpiler pass. In order to do the latter, we first need to introduce the internal representation of quantum circuits in Qiskit, in the form of a Directed Acyclic Graph, or **DAG**. Then, we illustrate a simple swap mapper pass, which transforms an input circuit to be compatible with a limited-connectivity quantum device."
msgstr "এই নোটবুকে আমরা আগে বানানো ছাড়পত্র (পাস), ছাড়পত্র পরিচালকের (ম্যানেজার) ব্যবহার পদ্ধতি এবং নিজেরা একটা সহজ ট্রান্সপাইলার ছাড়পত্র বানানো শিখবো। নিজেদের ট্রান্সপাইলার ছাড়পত্র বানাতে হলে Qiskit -এর ভিতরের কোয়ান্টাম বর্তনীগুলো অচক্রাকার নির্দেশিত লেখচিত্রের (ডিরেক্টেড এসাইক্লিক গ্রাফ) মাধ্যমে দেখাতে হবে। এরপর, আমরা একটা সহজ অদলবদলের নক্সারক্ষকের(ম্যাপার) ছাড়পত্র, যেটা একটা ইনপুট বর্তনীকে একটা সীমিত সংযোগের কোয়ান্টাম যন্ত্রের উপযোগী বানিয়ে তোলে।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:37
msgid "**Before you start**: You may need to install the ``pydot`` library and the ``graphviz`` library for the DAG plotting routines. If you are using Anaconda Python, you can install both with the ``conda`` command. If you use your system’s native Python interpreter, install ``pydot`` using the ``pip`` command, and install ``graphviz`` using your system’s native package manager (e.g. ``yum``, ``apt``, ``dnf``, ``brew``, etc.)."
msgstr "** শুরু করার আগে **: অচক্রাকার নির্দেশিত লেখচিত্র (DAG) আঁকার জন্য ``pydot`` ও ``graphviz`` - এই দুটি গ্রন্থাগার (লাইব্রেরি) ইনস্টল করতে হবে। এনাকোন্ডার Python - এ ``conda`` নির্দেশের সাহায্যে দুটোই ইনস্টল করা যায়। গঠনতন্ত্রের (সিস্টেমের) নিজস্ব Python অনুবাদককে (ইন্টারপ্রিটার) ``pydot`` -টি ``pip`` নির্দেশের মাধ্যমে ও ``graphviz`` -টি গঠনতন্ত্রের (সিস্টেমের) নিজস্ব বান্ডিল পরিচালক (প্যাকেজ ম্যানেজার), যেমন- ``yum``, ``apt``, ``dnf``, ``brew`` ইত্যাদির মাধ্যমে ইনস্টল করা যায়।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:61
msgid "PassManager object"
msgstr "PassManager জিনিস (অবজেক্ট)"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:63
msgid "Lets you specify the set of passes you want."
msgstr "প্রয়োজনমতো ছাড়পত্রের দল এর দ্বারা নির্দেশ করা যায়।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:118
msgid "All of Qiskit’s transpiler passes are accessible from ``qiskit.transpiler.passes``."
msgstr "Qiskit -এর সমস্ত ট্রান্সপাইলার পাস ``qiskit.transpiler.passes`` থেকে পাওয়া যাবে।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:433
msgid "Different Variants of the Same Pass"
msgstr "একই ছাড়পত্রের বিভিন্ন রূপ।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:435
msgid "There can be passes that do the same job, but in different ways. For example, the ``TrivialLayout``, ``DenseLayout`` and ``NoiseAdaptiveLayout`` all choose a layout (binding of virtual qubits to physical qubits), but use different algorithms and objectives. Similarly, the ``BasicSwap``, ``LookaheadSwap`` and ``StochasticSwap`` all insert swaps to make the circuit compatible with the coupling map. The modularity of the transpiler allows plug-and-play replacements for each pass."
msgstr "আলাদা আলাদা ছাড়পত্র একই কাজ আলাদা ভাবে করতে পারে। উদাহরণস্বরূপ, ``TrivialLayout``, ``DenseLayout`` এবং ``NoiseAdaptiveLayout`` তিনটেই একটা নকশা বেছে নেয় (কাল্পনিক কিউবিটকে বাস্তব কিউবিটে রূপান্তর করা), কিন্তু কিভাবে করে এবং করার পরের ফলাফল আলাদা। একইভাবে, ``BasicSwap``, ``LookaheadSwap`` এবং ``StochasticSwap`` সবাই বর্তনীকে, যুগ্মীকরণ মানচিত্রের (কাপলিং ম্যাপ) উপযুক্ত করার জন্য অদলবদল করে। ট্রান্সপাইলারের কাজকে ছোট করে ভাঙার ক্ষমতার (মডুলারিটি) সাহায্যে প্রতি ছারেই ছোট অদলবদল করা যায়।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:437
msgid "Below, we show the swapper passes all applied to the same circuit, to transform it to match a linear chain topology. You can see differences in performance, where the ``StochasticSwap`` is clearly the best. However, this can vary depending on the input circuit."
msgstr "নিচে আমরা অদলবদলের ছারপত্রগুলো একটি বর্তনীতে প্রয়োগ করেছি, যাতে এটা রৈখিক শৃঙ্খল বিন্যাসে পরিবর্তিত হয়। এর থেকে পরিষ্কার যে ছাড়পত্রগুলোর কর্মক্ষমতা আলাদা আলাদা, যাদের মধ্যে ``StochasticSwap`` সবচেয়ে ভালো। যদিও ইনপুট বর্তনীর সাথে সাথে এই ফল বদলাতে পারে।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:560
msgid "Preset Pass Managers"
msgstr "আগে থেকে বানানো ছাড়পত্র পরিচালক"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:562
msgid "Qiskit comes with several pre-defined pass managers, corresponding to various levels of optimization achieved through different pipelines of passes. Currently ``optimization_level`` 0 through 3 are supported; the higher the number, the more optimized it is, at the expense of more time. Choosing a good pass manager may take trial and error, as it depends heavily on the circuit being transpiled and the backend being targeted."
msgstr "বিভিন্ন ছাড়পত্রের বিভিন্ন ধাপের বিভিন্ন মানের অনুকূলিতকরণের জন্য Qiskit -এর মধ্যে অনেক ছাড়পত্র পরিচালক আগে থেকে বানানো আছে। আপাতত ``optimization_level`` কেবল ০ থেকে ৩ অব্দি বানানো(০-কোনো অনুকূলিতকরণ না, ১-হালকা, ২-মাঝারি, ৩-ভারী) এবং যত ভারী অনুকূলিতকরণ, গণনার সময় তত বেশি। একটা ভালো ছাড়পত্র পরিচালক বেছে নিতে আন্দাজের আশ্রয় নিতে হয়, কারণ এটা কোন বর্তনী ট্রান্সপাইলড হচ্ছে এবং ব্যাকএন্ড -এ কোন বর্তনী লক্ষ্য তার উপর নির্ভরশীল।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:564
msgid "Here we illustrate the different levels by looking at a state synthesis circuit. We initialize four qubits to an arbitrary state, and then try to optimize the circuit that achieves this."
msgstr "এখানে একটা অবস্থা সংশ্লেষ বর্তনীর মাধ্যমে বিভিন্ন দেখার চেষ্টা করবো। আমরা ৪টি কিউবিটকে ইচ্ছামতো অবস্থার মান দিয়ে শুরু করবো এবং বর্তনীকে নিম্নোক্তভাবে অনুকূলিতকরণের চেষ্টা করবো।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:566
msgid "``optimization_level=0``: just maps the circuit to the backend, with no explicit optimization (except whatever optimizations the mapper does)."
msgstr "``optimization_level=0``: ম্যাপারের নিজস্ব অনুকূলিতকরণ (অপ্টিমাইজেশন) বাদে অন্য কোনো কিছু না করে বর্তনীকে ব্যাকএন্ড-এ চিত্রিত করে দেয়।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:568
msgid "``optimization_level=1``: maps the circuit, but also does light-weight optimizations by collapsing adjacent gates."
msgstr "``optimization_level=1``: বর্তনীকে চিত্রিত করার সাথে প্রতিবেশী দ্বারগুলো মিশিয়ে হালকা অনুকূলিতকরণ করে।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:570
msgid "``optimization_level=2``: medium-weight optimization, including a noise-adaptive layout and a gate-cancellation procedure based on gate commutation relationships."
msgstr "``optimization_level=2``: দ্বারগুলোর নিজস্ব পরিবহন সম্পর্কের উপর ভিত্তি করে দ্বার বাতিল করা এবং ত্রুটি সহনকারী নকশা বানায়। এর সাথে মাঝারি স্তরের অনুকূলকরন করে।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:572
msgid "``optimization_level=3``: heavy-weight optimization, which in addition to previous steps, does resynthesis of two-qubit blocks of gates in the circuit."
msgstr "``optimization_level=3``: ভারী অনুকূলিতকরণ, পূর্বের কাজগুলোর সাথে বর্তনীতে দুই কিউবিটবিশিষ্ট দ্বারের পুনরায় সংশ্লেষ করে।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:829
msgid "Now map this to the 20-qubit Tokyo device, with different optimization levels:"
msgstr "এটাকে এবার ২০- কিউবিটসম্পন্ন টোকিও যন্ত্রে আলাদা আলাদা অনুকূলিতকরণ মানে নকশায়িতো করা হলো:"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:997
msgid "Introducing the DAG"
msgstr "ডিএজি (DAG) এর পরিচিতি"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1008
msgid "In Qiskit, we represent circuits internally using a Directed Acyclic Graph (DAG). The advantage of this representation over a pure list of gates (i.e., *netlist*) is that the flow of information between operations are explicit, making it easier for passes to make transformation decisions without changing the semantics of the circuit."
msgstr "Qiskit -এর ভিতরে বর্তনীগুলোকে অচক্রাকার নির্দেশিত লেখচিত্র (ডিরেক্টেড অ্যাসাইক্লিক গ্রাফ বা ডিএজি) এর দ্বারা বোঝানো হয়। বর্তনীকে বিভিন্ন গেটের সমন্বয় ( *netlist* ) হিসেবে দেখানোর চেয়ে ডিএজি এর দ্বারা দেখানোর সুবিধা হলো তথ্যের গতিপথটা এর ক্ষেত্রে স্পষ্ট, ফলে ছারপত্রগুলো বর্তনীর কাজ/ফলাফল/অর্থ না বদলে সহজেই রূপান্তর করতে পারে।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1010
msgid "Let’s start by building a simple circuit, and examining its DAG."
msgstr "একটা সহজ বর্তনী (সার্কিট) বানিয়ে তার ডিএজি পরীক্ষা করা যাক।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1049
msgid "In the DAG, there are three kinds of graph nodes: qubit/clbit input nodes (green), operation nodes (blue), and output nodes (red). Each edge indicates data flow (or dependency) between two nodes."
msgstr "ডিএজিতে তিন রঙের লেখচিত্রের নোড দেখা যায়: কিউবিট/সিএলবিট ইনপুট নোড (সবুজ), গণনার নোড (নীল) এবং ফলাফল নোড (লাল). এক নোড থেকে অন্য নোড-এ তীরচিহ্নগুলো তথ্য প্রবাহের দিক (বা নির্ভরশীলতার দিক) নির্দেশ করে।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1082
msgid "Therefore, writing a transpiler pass means using Qiskit’s DAGCircuit API to analyze or transform the circuit. Let’s see some examples of this."
msgstr "অর্থাৎ, ট্রান্সপাইলার পাস লেখার মানে Qiskit -এর DAGCircuit এপিআই এর দ্বারা বর্তনীর (সার্কিট) বিশ্লেষণ বা পরিবর্তন করা। এর কিছু উদাহরণ দেখা যাক।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1093
msgid "**a. Get all op nodes in the DAG:**"
msgstr " ** ক. সব চালু নোডগুলোকে ডিএজি তে আনা হলো: ** "

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1148
msgid "Each node is an instance of the ``DAGOpNode`` class. Let’s examine the information stored in the second op node."
msgstr ""

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1210
msgid "**b. Add an operation to the back:**"
msgstr " ** খ. পিছনে একটা কাজ যোগ করা হলো: ** "

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1242
msgid "**c. Add an operation to the front:**"
msgstr "** গ. সামনে একটা ক্রিয়াকলাপ যোগ করা: **"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1274
msgid "**d. Substitute a node with a subcircuit:**"
msgstr "** ঘ. একটি নোডের পরিপূরকরূপে একটা উপবর্তনীর (সাব সার্কিট) ব্যবহার: **"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1314
msgid "Finally, after all transformations are complete, we can convert back to a regular QuantumCircuit object. This is what the transpiler does! It takes a circuit, operates on it in DAG form, and outputs a transformed circuit."
msgstr "সব পরিবর্তন হয়ে যাওয়ার পর আমরা পুনরায় একটা QuantumCircuit জিনিসে রূপান্তর করতে পারি। এটাই ট্রান্সপাইলারের কাজ! এটা একটা বর্তনী নেয়, তার উপর ডিএজি অবস্থায় কাজ করে এবং ফলাফলরূপে একটা পরিবর্তিত বর্তনী দেয়।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1347
msgid "Implementing a BasicMapper Pass"
msgstr "BasicMapper ছাড়পত্র বাস্তবায়ন(ইমপ্লিমেন্ট) করা"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1358
msgid "Now that we are familiar with the DAG, let’s use it to write a transpiler pass. Here we will implement a basic pass for mapping an arbitrary circuit to a device with limited qubit connectivity. We call this the BasicMapper. This pass is included in Qiskit Terra as well."
msgstr "এখন যেহেতু আমরা ডিএজি -এর ব্যাপারে জানি, এটা ব্যবহার করে একটা ট্রান্সপাইলার পাস লেখা যাক। এখানে আমরা একটা সাধারণ পাস বানাবো যেটা একটা বর্তনীকে একটা সীমিত কিউবিটের যন্ত্রের উপযোগী করবে। এটাকে আমরা BasicMapper বলি। Qiskit টেরা -তে এই পাসটি দেওয়া আছে।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1360
msgid "The first thing to do when writing a transpiler pass is to decide whether the pass class derives from a ``TransformationPass`` or ``AnalysisPass``. Transformation passes modify the circuit, while analysis passes only collect information about a circuit (to be used by other passes). Then, the ``run(dag)`` method is implemented, which does the main task. Finally, the pass is registered inside the ``qiskit.transpiler.passes`` module."
msgstr "ট্রান্সপাইলার ছাড়পত্র লেখার সময় সবার আগে ঠিক করতে হবে এই ছারপত্রের ক্লাসটা কোন ক্লাস থেকে বানানো হবে: ``TransformationPass`` না ``AnalysisPass``। পরিবর্তনের ছাড়পত্রের দ্বারা বর্তনীতে পরিবর্তন করা যায়, যেখানে বিশ্লেষণ ছাড়পত্র একটা বর্তনী সম্পর্কে তথ্য জোগাড় করে অন্য ছাড়পত্রে ব্যবহারের জন্য। এরপর আসল কাজের জন্য ``run(dag)`` পদ্ধতি লেখা হয়। সবশেষে, ছাড়পত্রটিকে ``qiskit.transpiler.passes`` মডিউলে নথিভুক্ত করা হয়।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1362
msgid "This pass functions as follows: it traverses the DAG layer-by-layer (each layer is a group of operations that does not act on independent qubits, so in theory all operations in a layer can be done independently). For each operation, if it does not already meet the coupling map constraints, the pass identifies a swap path and inserts swaps to bring the two qubits close to each other."
msgstr "ছাড়পত্র ফাংশনের কার্যপ্রণালী: এটি ডিএজি টাকে স্তরে স্তরে ঘুরে দেখে, যেখানে প্রতি স্তর এমন কিছু গণনা থাকে যেগুলোতে অংশগ্রহণকারী কিউবিট পরস্পরের উপর নির্ভরশীল না অর্থাৎ প্রত্যেকটি গণনা সমান্তরালভাবে করা যাবে। প্রত্যেক গণনার জন্য ছাড়পত্র একটা অদলবদলের পথ বের করে এবং অদলবদল করে যাতে দুটো কিউবিটের মান কাছাকাছি আসে, যদি না আগে থেকেই গণনাটি সংযোজন নকশার শর্তগুলো মেনে নেয়।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1364
msgid "Follow the comments in the code for more details."
msgstr "আরো তথ্যের জন্য প্রোগ্রামের মধ্যের মন্তব্যগুলো লক্ষ্য করো।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1480
msgid "Let’s test this pass on a small example circuit."
msgstr "একটা ছোট বর্তনীতে (সার্কিট) এইপাসটি চালিয়ে দেখা যাক।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1534
msgid "Now we construct a pass manager that contains our new pass. We pass the example circuit above to this pass manager, and obtain a new, transformed circuit."
msgstr "এবার আমরা আমাদের নতুন ছাড়পত্রের জন্য একটা ছাড়পত্র পরিচালক বানাবো। এই উদাহরণ বর্তনীটি আমরা ছাড়পত্র পরিচালকের কাছে পাঠাবো এবং একটা নতুন রূপান্তরিত বর্তনী পাবো।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1602
msgid "Note that this pass only inserts the swaps necessary to make every two-qubit interaction conform to the device coupling map. It does not, for example, care about the direction of interactions, or the native gate set supported by the device. This is a design philosophy of Qiskit’s transpiler: every pass performs a small, well-defined action, and the aggressive circuit optimization is achieved by the pass manager through combining multiple passes."
msgstr "লক্ষ্য করো, এই পাসটি কেবল সেই অদলবদলগুলো করে যাতে সব ২-কিউবিট কার্যকলাপ যন্ত্রের সংযোজন নকশার সাথে মিলে যায়। এটা কার্যের অভিমুখ বা যন্ত্রের স্থানীয় যুক্তিবর্তনীর (গেইট) প্রকৃতির খেয়াল করে না। এটা Qiskit ট্রান্সপাইলারের একটা দার্শনিক নকশা বা ডিজাইন: সব পাস ছোট, পূর্ব-নির্ধারিত পদক্ষেপ বা ক্রিয়া বা কাজ করে এবং একাধিক পাসের সাহায্যে পাস ব্যবস্থাপক (ম্যানেজার) বর্তনীর অনুকূলিতকরন করে।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1614
msgid "Transpiler Logging"
msgstr "ট্রান্সপাইলারের ঘটনাপঞ্জি"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1616
msgid "Due to the complexity of the internal operations that the transpiler is performing it’s likely that you’ll end up in a situation where you’d like to debug an issue or just understand more of what is happening inside the transpiler when you call it. To facilitate this the transpiler emits log messages as part of its normal operation. This logging uses the Python standard library ``logging`` module to emit the log messages. Python’s standard logging was used because it allows Qiskit-Terra’s logging to integrate in a standard way with other applications and libraries."
msgstr "ট্রান্সপাইলারের অভ্যন্তরীন ক্রিয়াকলাপ অত্যন্ত জটিল ও দীর্ঘ। সেজন্য অনেক সময় কাজের উন্নতি জানার জন্য বা কোথাও কোনো ত্রুটি নির্ণয় ও সংশোধন (ডিবাগিং) করার জন্য ট্রান্সপাইলারের মধ্যে কি হচ্ছে তা জানা দরকার। এজন্যই ট্রান্সপাইলার কাজ করাকালীন নিজে থেকেই একটা ঘটনাপঞ্জি বানাতে থাকে। এই ঘটনাপঞ্জি পাইথন -এর নিজস্ব ``logging`` মডিউল ব্যবহার করে ঘটনার বিবরণ দেয়। পাইথন -এর সাধারণ ঘটনাপঞ্জি ব্যবহারের কারণ এর সাহায্যে সহজেই Qiskit টেরা -এর ঘটনাপঞ্জি অন্য গ্রন্থাগার বা অ্যাপ্লিকেশনে সংযোগ করা যায়।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1619
msgid "For a more thorough introduction to Python logging refer to the `official documentation <https://docs.python.org/3/library/logging.html>`__ and the tutorials and cookbook linked off of there."
msgstr "Python এর ঘটনাপঞ্জি সম্পর্কে আরো জানতে হলে এখানে `official documentation <https://docs.python.org/3/library/logging.html>`__ গিয়ে শিক্ষণীগুলো দেখো।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1634
msgid "Note: Most of the logging module functions used in this section adjust global settings. If you run commands in this section it might effect the output from other cells if they are run in a different order."
msgstr "মনে রেখো: এই অংশে ব্যবহৃত অধিকাংশ ঘটনাপঞ্জি মডিউল সার্বজনীন সেটিংস নির্ভর করা। সঠিক ক্রমে না চালানো হলে এই অংশে চালানো নির্দেশ (কম্যান্ড) অন্য অংশের ফলাফলে প্রভাব ফেলতে পারে।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1650
msgid "Configuring Python Standard Library Logging"
msgstr "Python -এর ঘটনাপঞ্জির নিজস্ব গ্রন্থাগারের সজ্জায়ন"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1652
msgid "By default Python Standard Logging only prints log messages at the ``WARNING``, ``ERROR``, or ``CRITICAL`` log levels. Since none of the logs emitted by the transpiler use these log levels (they’re all informative) you need to configure logging."
msgstr "সাধারণতঃ Python -এর নিজস্ব ঘটনাপঞ্জি তিনরকমের ঘটনার হিসেব রাখে, ``WARNING``, ``ERROR``, আর ``CRITICAL``। কিন্তু ট্রান্সপাইলারের ঘটনা এই তিনধরণের সাথে মেলে না (কারণ ট্রান্সপাইলার কেবল তথ্যভিত্তিক ঘটনা পাঠায়)। সেজন্য এই নিজস্ব ঘটনাপঞ্জিকে একটু সাজিয়ে নিতে হয়।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1654
msgid "The simplest way to do this is to just run:"
msgstr "এটা করার সবচেয়ে সহজ উপায় হল:"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1677
msgid "The ``basicConfig()`` function (see the docs here: https://docs.python.org/3/library/logging.html#logging.basicConfig) configures a root handler and formatter. We also specify the `log level <https://docs.python.org/3/library/logging.html#levels>`__ to display with the ``level`` kwarg. Setting it to a level will also include and higher levels. For example, if you set it to ``'INFO'`` in addition to the ``INFO`` level this will also include the ``WARNING``, ``ERROR``, and ``CRITICAL`` log levels."
msgstr "``basicConfig()`` ফাংশনটি (এখানে পুরো তথ্য দেখো: https://docs.python.org/3/library/logging.html#logging.basicConfig) মূল নিয়ন্ত্রক ও বিন্যাসককে সাজায়। আমরা কোন `log level <https://docs.python.org/3/library/logging.html#levels>`__ টা দেখাবে সেটাও ``level`` kwarg এর দ্বারা বলে দিই। নিম্নস্তরের ঘটনাপঞ্জি দেখতে চাইলে তার সঙ্গে উপরস্তরের সব ঘটনাপঞ্জি আসে। উদাহরণস্বরূপ, কেউ যদি ``'INFO'`` স্তরের ঘটনাপঞ্জি দেখতে চায়, এর সাথে ``WARNING``, ``ERROR`` এবং ``CRITICAL`` স্তরের ঘটনাপঞ্জিও দেখাবে।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1679
msgid "Now the python environment in this notebook is configured to emit log messages to stderr when you run the transpiler. For example:"
msgstr "এখন এই নোটবুকের Python পরিবেশে ট্রান্সপাইলার চলাকালীন stderr এ ঘটনাপঞ্জি রাখার জন্য প্রস্তুত। উদাহরণস্বরূপ:"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:1694
msgid "Note: basicConfig() will only work when called the first time it’s called. It detects if a root handler and formatter have already been setup (either by using an earlier basicConfig() call or otherwise) and does nothing if they have. Further adjustments will have to by interacting with the handler directly."
msgstr "মনে রেখো: basicConfig() শুধু প্রথমবার ডাকার পর কাজ করবে। এটা খুঁজে দেখে যদি রুট হ্যান্ডলার ও ফরম্যাটার আগে থেকে বানানো আছে কিনা (আগে basicConfig() ডেকে বা অন্য পদ্ধতিতে) এবং থাকলে কোনো কাজ করে না। এর পরের সামঞ্জস্যকরণগুলো সরাসরি হ্যান্ডলারের সাথে পারস্পরিক ক্রিয়া করে করতে হবে।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:2402
msgid "As you can clearly see here when calling ``transpile()`` it now prints 2 types of log messages. The first is at the ``INFO`` log level and come from the pass manager. These indicate each pass that was executed and how long that took. The second are at the ``DEBUG`` level and come from the StochasticSwap pass and describes the internal operation of that pass. It’s useful for debugging issues in the pass’s operation."
msgstr "এখানে দেখা যাচ্ছে যে ``transpile()`` ফাংশনকে ডাকলে দুই ধরণের ঘটনাপঞ্জি তৈরী হয়। প্রথমে আসে \n"
" ``INFO`` স্তরের ঘটনাপঞ্জি যেটা পাস ব্যবস্থাপকের (ম্যানেজার) কাছ থেকে আসে। এতে কোন কোন পাস সম্পন্ন হয়েছে ও কতক্ষন লেগেছে তা বলা থাকে। দ্বিতীয় স্তর ``DEBUG`` আসে StochasticSwap পাস থেকে এবং এতে পাসের আভ্যন্তরীন ক্রিয়াকলাপ বর্ণিত থাকে। পাসের ক্রিয়াকলাপের ত্রুটি নির্ণয় ও সংশোধন (ডিবাগিং) করতে এই ঘটনাপঞ্জি কাজে লাগে।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:2414
msgid "Adjusting the log level for the transpiler"
msgstr "ট্রান্সপাইলারের ঘটনাপঞ্জিকে সাজিয়ে নেওয়া"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:2416
msgid "The qiskit transpiler uses a single namespace ``qiskit.transpiler``, as used by ``logging.getLogger('qiskit.transpiler')``. This makes it very easy to adjust the log level for just the transpiler. For example if you only wish to see log messages at the INFO level or above you can run:"
msgstr "Qiskit ট্রান্সপাইলার ``qiskit.transpiler`` নামের একটা নেমস্পেস ব্যবহার করে, যেভাবে ``logging.getLogger('qiskit.transpiler')`` এটা ব্যবহার করে। এর ফলে শুধু ট্রান্সপাইলারের জন্য ঘটনাপঞ্জিকে সহজেই নিজের মতো ঠিকঠাক করে নেওয়া যায়। উদাহরণস্বরূপ যদি কেউ তথ্য বা তার উপরের স্তরের ঘটনার পঞ্জি দেখতে চায় তাহলে সে ব্যবহার করবে:"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:2617
msgid "Setting up logging to deal with parallel execution"
msgstr "সমান্তরাল গণনা সামলানোর জন্য ঘটনাপঞ্জি রাখার ব্যবস্থা করা"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:2619
msgid "When running the transpiler with multiple circuits by default these circuits are transpiled in parallel. If you want to do this with logging enabled and be able to understand the output some additional steps are required."
msgstr "যদি একাধিক বর্তনীর উপর ট্রান্সপাইলার চালানো হয় তাহলে এই ট্রান্সপাইলেশনগুলো সমান্তরালভাবে হয়। যদি এই সমান্তরাল গণনার ঘটনাপঞ্জি রাখতে হয় এবং সেই পঞ্জিকে বোধগম্য হতে হয় তাহলে আরো কিছু ধাপ করতে হয়।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:2621
msgid "If you were just to enable logging as above and then pass ``transpile()`` multiple circuits you’ll get results that are difficult to decipher. For example:"
msgstr "যদি উপরের মতো শুধু ঘটনাপঞ্জি চালু করা দরকার তাহলে ``transpile()`` -কে এক বা একাধিক বর্তনীর উপর ডাকতে হবে। যদিও একাধিক বর্তনীর ক্ষেত্রে এই পঞ্জির অর্থোদ্ধার খুবই কঠিন। উদাহরণস্বরূপ:"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:3961
msgid "As you can see here we get log messages from all 3 circuits being transpiled together. There is no way to know which pass is part of which circuit’s transpilation. Luckily Python logging provides tools to deal with this. The simplest one is to just change the `log formatter <https://docs.python.org/3/library/logging.html#logging.Formatter>`__ so that includes additional information so we can associate a log message with the process it came from."
msgstr "দেখা যাচ্ছে যে আমরা ৩ টে বর্তনীর (সার্কিট) ট্রান্সপাইলেশন ঘটনাপঞ্জি একসঙ্গে পাওয়া গেলো। এর থেকে কোন পাস কোন বর্তনীর (সার্কিট) ট্রান্সপাইলেশনের জন্য তা বোঝা সম্ভব না। সৌভাগ্যবশত, Python নিজের ঘটনাপঞ্জি এই অসুবিধা দূর করার যন্ত্রপাতি দেয়। সবচেয়ে সহজ পদ্ধতি হলো ঘটনাপঞ্জি বিন্যাসকে বদলে ফেলা `log formatter <https://docs.python.org/3/library/logging.html#logging.Formatter>`__ যাতে এতে আরো কিছু তথ্য থাকে যার থেকে বোঝা যাবে কোন প্রক্রিয়ায় কোন ঘটনা ঘটেছে।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:3984
msgid "Then rerun the ``transpile()`` call and see the new log formatter."
msgstr "এরপর ``transpile()`` আবার চালালে নতুন ঘটনাপঞ্জির বিন্যাসককে দেখা যাবে।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:5320
msgid "Now the format for the log messages has been changed and it includes a process name for each of the transpilation processes so it’s at least clear which log messages go together."
msgstr "এখন ঘটনাপঞ্জির গঠন বদলে গেছে। এখন এটি প্রতি ট্রান্সপাইলেশন প্রক্রিয়ার জন্য প্রক্রিয়ার নাম দেখায় যাতে কোন ঘটনা কোন প্রক্রিয়াতে হয়েছে তা বোঝা যায়।"

#: ../../tutorials/circuits_advanced/04_transpiler_passes_and_passmanager.ipynb:5322
msgid "There are many different options for how you can configure, this example is pretty limited. Refer to the documentation for more examples and options to build more sophisticated use cases that suit your specific use case or preferences."
msgstr "এই উদাহরণটি খুবই ছোট। এছাড়াও সাজানোর জন্য আরো প্রচুর বিকল্প আছে। নিজের প্রয়োজনমতো বানানোর জন্য মূল নথিতে আরো বিকল্প ও উদাহরণ দেওয়া আছে।"

