msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 17:09+0000\n"
"PO-Revision-Date: 2021-10-29 01:41\n"
"Last-Translator: \n"
"Language-Team: Bengali Language\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: bengali\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/operators/01_operator_flow.po\n"
"X-Crowdin-File-ID: 9472\n"
"Language: bn_BN\n"

#: ../../tutorials/operators/01_operator_flow.ipynb:10
msgid "This page was generated from `tutorials/operators/01_operator_flow.ipynb`__."
msgstr "এই পৃষ্ঠাটি `tutorials/operators/01_operator_flow.ipynb`__-থেকে বানানো হয়েছে।"

#: ../../tutorials/operators/01_operator_flow.ipynb:9
msgid "Operator Flow"
msgstr "কার্যকারক প্রক্রিয়া (অপারেটর ফ্লো)"

#: ../../tutorials/operators/01_operator_flow.ipynb:21
msgid "Introduction"
msgstr "ভূমিকা"

#: ../../tutorials/operators/01_operator_flow.ipynb:23
msgid "Qiskit provides classes representing states and operators and sums, tensor products, and compositions thereof. These algebraic constructs allow us to build expressions representing operators."
msgstr "কিস্কিট গাণিতিক রাশিমালা (এলজেব্রিক এক্সপ্রেশন) প্রকাশের জন্য প্রয়োজনীয় দশা সম্বলিত ক্লাস (ক্লাসেস রিপ্রেজেন্টিং স্টেটস), কার্যকারক, গাণিতিক যোগ, টেন্সর গুণন এবং কম্পোজিশন সরবরাহ করে। কিস্কিট সরবারকৃত এইসব ক্লাস ব্যবহার করে আমরা গাণিতিক রাশিমালা তৈরি করতে পারি।."

#: ../../tutorials/operators/01_operator_flow.ipynb:25
msgid "We introduce expressions by building them from Pauli operators. In subsequent sections we explore in more detail operators and states, how they are represented, and what we can do with them. In the last section we construct a state, evolve it with a Hamiltonian, and compute expectation values of an observable."
msgstr "শুরুতে আমরা এইসব গাণিতিক রাশিমালা পাউলী কার্যকারক ব্যবহার করে প্রকাশ করব। পরবর্তী অধ্যায়গুলোতে, আমরা বিস্তারিতভাবে দেখাব কিভাবে এইসব কার্যকারক এবং দশা ব্যবহার করা যায়, তাদের প্রকাশ করা যায় এবং আরও কি কি রাশিমালা প্রকাশ করা যায়। সবশেষে দেখানো হবে কিভাবে এই দশা প্রস্তুত করা হয়, হ্যামিল্টনিয়ানের সাথে কিভাবে তা পরিবর্তিত হয় এবং সর্বোপরি একটি পর্যবেক্ষকের গড় মান নির্ণয় করা হবে।."

#: ../../tutorials/operators/01_operator_flow.ipynb:28
msgid "Pauli operators, sums, compositions, and tensor products"
msgstr "পাউলি কার্যকারক (অপারেটরস), গাণিতিক সংযোজন, কম্পোজিশন এবং টেন্সর গুণফল"

#: ../../tutorials/operators/01_operator_flow.ipynb:30
msgid "The most important base operators are the Pauli operators. The Pauli operators are represented like this."
msgstr "সবচেয়ে গুরুত্ত্বপুর্ণ কার্যকারক হচ্ছে পাউলী কার্যকারক। এই পাউলী কার্যকারকের প্রকাশভঙ্গী নিম্নরূপ।."

#: ../../tutorials/operators/01_operator_flow.ipynb:71
msgid "These operators may also carry a coefficient."
msgstr "এইসব অপারেটর সহগ সম্বলিতও হতে পারে।"

#: ../../tutorials/operators/01_operator_flow.ipynb:114
msgid "These coefficients allow the operators to be used as terms in a sum."
msgstr "এই সহগগুলো গাণিতিক সংযোজনের সময় একটি পদ (টার্ম) হিসেবে ব্যবহার করা যায়।."

#: ../../tutorials/operators/01_operator_flow.ipynb:156
msgid "Tensor products are denoted with a caret, like this."
msgstr "টেনসর গুণনকে একটি ক্যারেট দিয়ে প্রকাশ করা যায়, যা দেখতে অনেকটা এইরকম।."

#: ../../tutorials/operators/01_operator_flow.ipynb:196
msgid "Composition is denoted by the ``@`` symbol."
msgstr "কম্পোজিশন কে প্রকাশ করা হয় ``@`` এই সংকেত দ্বারা।."

#: ../../tutorials/operators/01_operator_flow.ipynb:236
msgid "In the preceding two examples, the tensor product and composition of Pauli operators were immediately reduced to the equivalent (possibly multi-qubit) Pauli operator. If we tensor or compose more complicated objects, the result is objects representing the unevaluated operations. That is, algebraic expressions."
msgstr "উল্লেখিত উদাহরণ দুইটিতে, পাউলী কার্যকারকের টেনসর গুণন এবং কম্পোজিশন বহুকিউবিট সমতুল্য একটি পাউলী কার্যকারকে পরিণত হয়েছে। আরও টেনসর গুণন অথবা কম্পোশজিশন ফলাফলটিকে আনইভালুয়েটেড কার্যকারকে পরিণত করে, যা বীজগাণিতিক রাশিমালা হিসেবে ব্যবহার করা যাবে।."

#: ../../tutorials/operators/01_operator_flow.ipynb:247
msgid "For example, composing two sums gives"
msgstr "উদাহরণস্বরূপ, দুইটি গাণিতিক সংযোজনের কম্পোজিশন"

#: ../../tutorials/operators/01_operator_flow.ipynb:293
msgid "And tensoring two sums gives"
msgstr "এবং দুইটি গাণিতিক সংযোজনের টেনসর হবে"

#: ../../tutorials/operators/01_operator_flow.ipynb:339
msgid "Let’s take a closer look at the types introduced above. First the Pauli operators."
msgstr "এবার উপরে বর্নিত কার্যকারকের একটু বিস্তারিত ব্যখ্যা করা যাক। শুরুতে পাউলী কার্যকারক।."

#: ../../tutorials/operators/01_operator_flow.ipynb:380
msgid "Each Pauli operator is an instance of ``PauliOp``, which wraps an instance of ``qiskit.quantum_info.Pauli``, and adds a coefficient ``coeff``. In general, a ``PauliOp`` represents a weighted tensor product of Pauli operators."
msgstr "প্রত্যেক পাউলী কার্যকারক ``PauliOp`` এর ইন্সটান্স, যা ``qiskit.quantum_info.Pauli`` এর একটি ইন্সটান্স এবং একটি সহগ `coeff`` যুক্ত করে। সাধারণত একটি ``PauliOp``পাউলী কার্যকারকের আবেশিত টেনসর গুণন প্রকাশ করে।."

#: ../../tutorials/operators/01_operator_flow.ipynb:421
msgid "For the encoding of the Pauli operators as pairs of Boolean values, see the documentation for ``qiskit.quantum_info.Pauli``."
msgstr "পাউলী কার্যকারকসমূহকে একজোড়া বুলিয়ান মান হিসেবে এনকোড করতে চাইলে, ``qiskit.quantum_info.Pauli``. এই নির্দেশনা (ডকুমেন্টেশন) ব্যবহারের অনুরোধ রইল।."

#: ../../tutorials/operators/01_operator_flow.ipynb:423
msgid "All of the objects representing operators, whether as “primitive”s such as ``PauliOp``, or algebraic expressions carry a coefficient"
msgstr "সকল কার্যকারক নির্দেশকারী অবজেক্ট, হোক তা “primitive” যেমন ``PauliOp`` অথবা গাণিতিক রাশিমালা ভিত্তিক সবক্ষেত্রেই একটি সহগ বিদ্যমান থাকবে।"

#: ../../tutorials/operators/01_operator_flow.ipynb:469
msgid "In the following we take a broader and deeper look at Qiskit’s operators, states, and the building blocks of quantum algorithms."
msgstr "আমরা এখন আরও বিস্তারিতভাবে কিস্কিট কার্যকারক, দশা এবং কোয়ান্টাম ধারাক্রমের (এলগোরিদমে) মূল উপাদান নিয়ে আলোচনা করব।."

#: ../../tutorials/operators/01_operator_flow.ipynb:481
msgid "Part I: State Functions and Measurements"
msgstr "প্রথমতঃ দশার অন্বয় (ফাংশন) এবং পরিমাপ (মেজারমেন্টস)"

#: ../../tutorials/operators/01_operator_flow.ipynb:483
msgid "Quantum states are represented by subclasses of the class ``StateFn``. There are four representations of quantum states: ``DictStateFn`` is a sparse representation in the computational basis, backed by a ``dict``. ``VectorStateFn`` is a dense representation in the computational basis backed by a numpy array. ``CircuitStateFn`` is backed by a circuit and represents the state obtained by executing the circuit on the all-zero computational-basis state. ``OperatorStateFn`` represents mixed states via a density matrix. (As we will see later, ``OperatorStateFn`` is also used to represent observables.)"
msgstr "কোয়ান্টাম দশা ``StateFn`` উপশ্রেণী দ্বারা প্রকাশ করা যায়। চার ধরণের কোয়ান্টাম দশা প্রকাশভঙ্গী আছেঃ ``DictStateFn`` একটি গাণিতিক বেসিস দশা প্রকাশ করে, যা ``dict`` দ্বারা প্রকাশিত। ``VectorStateFn`` একটি নাম্পাই এরে দ্বারা প্রকাশিত একটি গাণিতিক দশা প্রকাশ ভঙ্গি। ``CircuitStateFn`` একটি যুক্তি বর্তনী ভিত্তিক প্রকাশভঙ্গী যা সকল-শুন্য বেসিস দশাস্থিত যুক্তি বর্তনীর উপর মহড়া সম্পাদন করে। ``OperatorStateFn`` একটি ডেনসিটি ম্যাট্রিক্স দ্বারা প্রকাশিত মিশ্র দশা অবস্থা। (আমরা পরবর্ততীতে দেখব কিভাবে এই ``OperatorStateFn` একটি পর্যবেক্ষণ কার্যকারকের কাজে ব্যবহার করা যায়।"

#: ../../tutorials/operators/01_operator_flow.ipynb:486
msgid "Several ``StateFn`` instances are provided for convenience. For example ``Zero, One, Plus, Minus``."
msgstr "পাঠক সুবিধার্থে কিছু ``StateFn`` উদাহরণ দেয়া হল। যেমন ``শুন্য, এক, যোগবোধক/ ধনাত্মক, বিপরীতবোধক/ ঋণাত্মক``।."

#: ../../tutorials/operators/01_operator_flow.ipynb:508
msgid "``Zero`` and ``One`` represent the quantum states :math:`|0\\rangle` and :math:`|1\\rangle`. They are represented via ``DictStateFn``."
msgstr ":math:`|0\\rangle` দ্বারা কোয়ান্টাম দশা ``শুন্য`` এবং :math:`|1\\rangle` দ্বারা কোয়ান্টাম দশা ``এক`` দ্বারা প্রকাশ করা হয়। এই প্রকাশভঙ্গী ``DictStateFn`` উপশ্রেণী অন্তর্ভুক্ত।."

#: ../../tutorials/operators/01_operator_flow.ipynb:548
msgid "``Plus`` and ``Minus``, representing states :math:`(|0\\rangle + |1\\rangle)/\\sqrt{2}` and :math:`(|0\\rangle - |1\\rangle)/\\sqrt{2}` are represented via circuits. ``H`` is a synonym for ``Plus``."
msgstr ":math:`(|0\\rangle + |1\\rangle)/\\sqrt{2}` দ্বারা ``যোগবোধক/ ধনাত্মক`` দশা এবং :math:`(|0\\rangle - |1\\rangle)/\\sqrt{2}` দ্বারা ``বিপরীতবোধক/ ঋণাত্মক`` দশা প্রকাশ করা হয়। এইক্ষেত্রে ``H`` ``যোগবোধক/ ধনাত্মক`` এর সমতুল্য।."

#: ../../tutorials/operators/01_operator_flow.ipynb:604
msgid "Indexing into quantum states is done with the ``eval`` method. These examples return the coefficients of the ``0`` and ``1`` basis states. (Below, we will see that the ``eval`` method is used for other computations, as well.)"
msgstr "কোয়ান্টাম দশার সংখ্যাক্রম (ইনডেক্সিং) ``eval`` পদ্ধতিতে নির্ণয় করা হয়। এই উদাহরণগুলো ``0`` এবং ``1`` বেসিস স্টেটের সহগ নির্ণয় পদ্ধতি বর্ণনা করে। (আমরা ``eval`` পদ্ধতিতে আরও গাণিতিক প্রক্রিয়া সম্পাদন পদ্ধতি বর্ণনা করব)।"

#: ../../tutorials/operators/01_operator_flow.ipynb:656
msgid "The dual vector of a quantum state, that is the *bra* corresponding to a *ket* is obtained via the ``adjoint`` method. The ``StateFn`` carries a flag ``is_measurement``, which is ``False`` if the object is a ket and ``True`` if it is a bra."
msgstr "``adjoint`` পদ্ধতি দ্বারা কোয়ান্টাম দশা দ্বৈত দিকরাশি ভিত্তিক ম্যাট্রিক্স যেমন *bra* কে *ket* ম্যাট্রিক্সে পরিণত করা যাবে। ``StateFn`` ``is_measurement`` নামে একটি সংকেত প্রদান করে, যা ``False`` হলে কেট ম্যাট্রিক্স নির্দেশ করে এবং ``True`` হলে ব্রা ম্যাট্রিক্স নির্দেশ করে।."

#: ../../tutorials/operators/01_operator_flow.ipynb:667
msgid "Here, we construct :math:`\\langle 1 |`."
msgstr "এখন আমরা :math:`\\langle 1 |` তৈরি করব।."

#: ../../tutorials/operators/01_operator_flow.ipynb:708
msgid "For convenience, one may obtain the dual vector with a tilde, like this"
msgstr "প্রকাশ সুবিধার্থে, দ্বৈত দিকরাশি ম্যাট্রিক্স কে তীর (টিল্ড) চিহ্ন দ্বারা সংকেতায়িত করা যাবে"

#: ../../tutorials/operators/01_operator_flow.ipynb:750
msgid "Algebraic operations and predicates"
msgstr "বীজগাণিতিক কার্যকারক এবং প্রেডিকেটস"

#: ../../tutorials/operators/01_operator_flow.ipynb:752
msgid "Many algebraic operations and predicates between ``StateFn``\\ s are supported, including: \\* ``+`` - addition \\* ``-`` - subtraction, negation (scalar multiplication by -1) \\* ``*`` - scalar multiplication \\* ``/`` - scalar division \\* ``@`` - composition \\* ``^`` - tensor product or tensor power (tensor with self n times) \\* ``**`` - composition power (compose with self n times) \\* ``==`` - equality \\* ``~`` - adjoint, alternating between a State Function and Measurement"
msgstr "অনেক বীজগাণিতিক কার্যকারক এবং প্রেডিকেটস এর গাণিতিক মহড়া ``StateFn``\\ দ্বারা সম্পাদন করা যাবে, \\* ``+``- সংযোজন \\* ``-`` - বিয়োজন, বিপরীতকরণ (-১ দ্বারা গুণন) \\* ``*`` - গুণন \\* ``/`` - বিভাজন \\* ``@`` - সমযোজন \\* ``^`` - টেনসর গুণন বা টেনসর শক্তিমাত্রা ( n সংখ্যক বার টেনসর গুণন) \\* ``**`` - সমযোজন শক্তিমাত্রা (n সংখ্যক বার সমযোজন) ``==`` - সমতা \\* ``~`` -উদ্ঘাতী, দশা অন্বয় এবং পরিমাপের মধ্যে বিনিময় এর অন্তর্ভুক্ত।"

#: ../../tutorials/operators/01_operator_flow.ipynb:754
msgid "Be aware that parentheses are often necessary to override **operator precedence**."
msgstr "মনে রাখতে হবে যে বন্ধনী প্রায়ই **operator precedence** বা কার্যকারক মহড়াক্রমের কাজে ব্যবহৃত হয়।."

#: ../../tutorials/operators/01_operator_flow.ipynb:765
msgid "``StateFn``\\ s carry a coefficient. This allows us multiply states by a scalar, and so to construct sums."
msgstr "``StateFn``\\ একটি সহগসহ ফলাফল দেয়। যার ফলে আমরা দশা গুণন এবং সংযোজনের কাজ করতে পারি।."

#: ../../tutorials/operators/01_operator_flow.ipynb:776
msgid "Here, we construct :math:`(2 + 3i)|0\\rangle`."
msgstr "এইখানে আমরা :math:`(2 + 3i)|0\\rangle` এই দশাটি প্রস্তুত করব।."

#: ../../tutorials/operators/01_operator_flow.ipynb:817
msgid "Here, we see that adding two ``DictStateFn``\\ s returns an object of the same type. We construct :math:`|0\\rangle + |1\\rangle`."
msgstr "দুইটি ``DictStateFn``\\ এর যোগ একই রকমের একটি অবজেক্ট ফলাফল হিসেবে দেয়। ফলে আমরা :math:`|0\\rangle + |1\\rangle` প্রস্তুত করতে পারি।."

#: ../../tutorials/operators/01_operator_flow.ipynb:857
msgid "Note that you must normalize states by hand. For example, to construct :math:`(|0\\rangle + |1\\rangle)/\\sqrt{2}`, we write"
msgstr "দশার অভিলম্বীকরন (নরমালাইজ) হাতে কলমে করতে হবে। উদাহরণস্বরূপ কোন দশা :math:`(|0\\rangle + |1\\rangle)/\\sqrt{2}` হলে আমরা লিখতে পারি"

#: ../../tutorials/operators/01_operator_flow.ipynb:900
msgid "In other cases, the result is a symbolic representation of a sum. For example, here is a representation of :math:`|+\\rangle + |-\\rangle`."
msgstr "অন্যান্য ক্ষেত্রে, দশাকে যোগ সম্বলিত চিহ্নসহ সংকেতায়িত করা হয়। উদাহরণস্বরূপ, একটি দশার সংকেত হচ্ছে :math:`|+\\rangle + |-\\rangle`."

#: ../../tutorials/operators/01_operator_flow.ipynb:962
msgid "The composition operator is used to perform an inner product, which by default is held in an unevaluated form. Here is a representation of :math:`\\langle 1 | 1 \\rangle`."
msgstr "সমযোজন কার্যকারক (কম্পোজিশন অপারেটর) ইনার গুণন (ইনার প্রডাক্ট) এর কাজে ব্যবহৃত হয়, যা একটি আনইভালুয়েটেড অবস্থা। এইখানে ইনার গুণনের প্রকাশ দেখানো হল :math:`\\langle 1 | 1 \\rangle`।."

#: ../../tutorials/operators/01_operator_flow.ipynb:1008
msgid "Note that the ``is_measurement`` flag causes the (bra) state ``~One`` to be printed ``DictMeasurement``."
msgstr "লক্ষণীয় যে, ``is_measurement`` ব্রা দশাকে ``~One`` হিসেবে সংকেতায়িত করে, যা ``DictMeasurement`` এ জমা থাকে।."

#: ../../tutorials/operators/01_operator_flow.ipynb:1019
msgid "Symbolic expressions may be evaluated with the ``eval`` method."
msgstr "সংকেত সম্বলিত রাশিমালাকে ``eval`` পদ্ধতি দ্বারা পরীক্ষণ করা যাবে।"

#: ../../tutorials/operators/01_operator_flow.ipynb:1090
msgid "Here is :math:`\\langle - | 1 \\rangle = \\langle (\\langle 0| - \\langle 1|)/\\sqrt{2} | 1\\rangle`."
msgstr "এইখানে :math:`\\langle - | 1 \\rangle = \\langle (\\langle 0| - \\langle 1|)/\\sqrt{2} | 1\\rangle`।."

#: ../../tutorials/operators/01_operator_flow.ipynb:1131
msgid "The composition operator ``@`` is equivalent to calling the ``compose`` method."
msgstr "সমযোজন কার্যকারক (কম্পোজিশন অপারেটর) ``@`` ``compose`` পদ্ধতির সমতুল্য।."

#: ../../tutorials/operators/01_operator_flow.ipynb:1177
msgid "Inner products may also be computed using the ``eval`` method directly, without constructing a ``ComposedOp``."
msgstr "ইনার গুণন সরাসরি ``eval`` পদ্ধতি দ্বারাও নির্ণয় করা যাবে, ``ComposedOp`` এর ব্যবহার ছাড়াই।"

#: ../../tutorials/operators/01_operator_flow.ipynb:1218
msgid "Symbolic tensor products are constructed as follows. Here is :math:`|0\\rangle \\otimes |+\\rangle`."
msgstr "সংকেতায়িত টেনসর গুণন কে নিম্নরুপে প্রস্তুত করা যাবে :math:`|0\\rangle \\otimes |+\\rangle`।."

#: ../../tutorials/operators/01_operator_flow.ipynb:1272
msgid "This may be represented as a simple (not compound) ``CircuitStateFn``."
msgstr "যা সরল (যৌগিক নয় বা নট কম্পাউন্ড) ``CircuitStateFn`` দ্বারা প্রকাশ করা যাবে।."

#: ../../tutorials/operators/01_operator_flow.ipynb:1324
msgid "Tensor powers are constructed using the caret ``^`` as follows. Here are :math:`600 (|11111\\rangle + |00000\\rangle)`, and :math:`|10\\rangle^{\\otimes 3}`."
msgstr "টেনসর শক্তিমাত্রা ``^`` এই ক্যারেট দ্বারা প্রকাশ করা হয়, যেমন :math:`600 (|11111\\rangle + |00000\\rangle)` এবং :math:`|10\\rangle^{\\otimes 3}`।."

#: ../../tutorials/operators/01_operator_flow.ipynb:1367
msgid "The method ``to_matrix_op`` converts to ``VectorStateFn``."
msgstr "``to_matrix_op`` থেকে ``VectorStateFn`` রূপান্তর প্রক্রিয়া।."

#: ../../tutorials/operators/01_operator_flow.ipynb:1445
msgid "Constructing a StateFn is easy. The ``StateFn`` class also serves as a factory, and can take any applicable primitive in its constructor and return the correct StateFn subclass. Currently the following primitives can be passed into the constructor, listed alongside the ``StateFn`` subclass they produce:"
msgstr "StateFn প্রস্তুত করা বেশ সহজ। ``StateFn`` ক্লাস একটি প্রস্তুতকারক (কন্সট্রাক্টর) হিসেবে কাজ করে যা যেকোনো ব্যবহারিক শ্রেণীকে ইনপুট হিসেবে নেয় আর সঠিক StateFn সাবক্লাস ফলাফল হিসেবে দেয়। এখন নিম্নোক্ত প্রাইমেটিভস কে কন্সট্রাকটর হিসেবে ব্যবহার করে এবং ``StateFn`` এর সাবক্লাস হিসেবে তালিকাভুক্ত করে।:"

#: ../../tutorials/operators/01_operator_flow.ipynb:1447
msgid "str (equal to some basis bitstring) -> DictStateFn"
msgstr "str (বেসিস বিটমালা বা বিটস্ট্রিং এর সমতুল্য) -> DictStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1448
msgid "dict -> DictStateFn"
msgstr "dict -> DictStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1449
msgid "Qiskit Result object -> DictStateFn"
msgstr "কিস্কিট ফলাফল অবজেক্ট -> DictStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1450
msgid "list -> VectorStateFn"
msgstr "তালিকা -> VectorStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1451
msgid "np.ndarray -> VectorStateFn"
msgstr "np.ndarray -> VectorStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1452
msgid "Statevector -> VectorStateFn"
msgstr "অবস্থা ভেক্টর বা দিকরাশি -> VectorStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1453
msgid "QuantumCircuit -> CircuitStateFn"
msgstr "কোয়ান্টাম যুক্তিবর্তনী -> CircuitStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1454
msgid "Instruction -> CircuitStateFn"
msgstr "নির্দেশমালা -> CircuitStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1455
msgid "OperatorBase -> OperatorStateFn"
msgstr "অপারেটরবেস -> OperatorStateFn"

#: ../../tutorials/operators/01_operator_flow.ipynb:1522
msgid "Part II: ``PrimitiveOp``\\ s"
msgstr "দ্বিতীয়াংশঃ ``PrimitiveOp``\\ s"

#: ../../tutorials/operators/01_operator_flow.ipynb:1524
msgid "The basic Operators are subclasses of ``PrimitiveOp``. Just like ``StateFn``, ``PrimitiveOp`` is also a factory for creating the correct type of ``PrimitiveOp`` for a given primitive. Currently, the following primitives can be passed into the constructor, listed alongside the ``PrimitiveOp`` subclass they produce:"
msgstr "মৌলিক কার্যকারকসমূহ হচ্ছে ``PrimitiveOp`` উপশ্রেণি। ``StateFn`` এর অনুরূপ, ``PrimitiveOp`` হচ্ছে সঠিক ``PrimitiveOp`` ফলাফল প্রদানের মৌলিক শ্রেণি। এখন নিম্নোক্ত প্রাইমেটিভস কে কন্সট্রাকটর হিসেবে ব্যবহার করে এবং ``PrimitiveOp`` এর সাবক্লাস হিসেবে তালিকাভুক্ত করে:"

#: ../../tutorials/operators/01_operator_flow.ipynb:1526
msgid "Terra’s Pauli -> PauliOp"
msgstr "টেরা পাউলী যুক্তিবর্তনী -> PauliOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1527
msgid "Instruction -> CircuitOp"
msgstr "নির্দেশমালা -> CircuitOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1528
msgid "QuantumCircuit -> CircuitOp"
msgstr "কোয়ান্টাম যুক্তিবর্তনী -> CircuitOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1529
msgid "2d List -> MatrixOp"
msgstr "দ্বিমাত্রিক তালিকা -> MatrixOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1530
msgid "np.ndarray -> MatrixOp"
msgstr "np.ndarray -> MatrixOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1531
msgid "spmatrix -> MatrixOp"
msgstr "spmatrix -> MatrixOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1532
msgid "Terra’s quantum_info.Operator -> MatrixOp"
msgstr "Terra’s quantum_info.Operator -> MatrixOp"

#: ../../tutorials/operators/01_operator_flow.ipynb:1554
msgid "Matrix elements"
msgstr "ম্যাট্রিক্স উপাদান বা ভুক্তি"

#: ../../tutorials/operators/01_operator_flow.ipynb:1565
msgid "The ``eval`` method returns a column from an operator. For example, the Pauli :math:`X` operator is represented by a ``PauliOp``. Asking for a column returns an instance of the sparse representation, a ``DictStateFn``."
msgstr "``eval`` একটি কার্যকারক থেকে একটি কলাম ম্যাট্রিক্স ফলাফল হিসেবে দেয়। যেমনঃ পাউলী :math:`X` অপারেটরকে ``PauliOp`` দ্বারা চিহ্নিত করা হয়। এখন একটি কলাম ম্যাট্রিক্স ফলাফল হিসেবে পেতে হলে ``DictStateFn`` ব্যবহার করতে হবে।"

#: ../../tutorials/operators/01_operator_flow.ipynb:1635
msgid "It follows that indexing into an operator, that is obtaining a matrix element, is performed with two calls to the ``eval`` method."
msgstr "একটি কার্যকারকের মহড়াক্রম ( সংখ্যাক্রম বা ইনডেক্সিং) একটি ম্যাট্রিক্স উপাদান বা ভুক্তি নির্ণয় করে, যা ``eval`` পদ্ধতিকে দুইবার নির্দেশের মাধ্যমে অর্জন করা যায়।"

#: ../../tutorials/operators/01_operator_flow.ipynb:1646
msgid "We have :math:`X = \\left(\\begin{matrix} 0 & 1 \\\\  1 & 0  \\end{matrix} \\right)`. And the matrix element :math:`\\left\\{X \\right\\}_{0,1}` is"
msgstr "আমাদের ম্যাট্রিক্সটি হচ্ছে :math:`X = \\left(\\begin{matrix} 0 & 1 \\\\  1 & 0  \\end{matrix} \\right)` এবং ম্যাট্রিক্সটির উপাদান বা ভুক্তি হচ্ছে :math:`\\left\\{X \\right\\}_{0,1}`"

#: ../../tutorials/operators/01_operator_flow.ipynb:1687
msgid "Here is an example using the two qubit operator ``CX``, the controlled ``X``, which is represented by a circuit."
msgstr "এখানে একটি দুইকিউবিট কার্যকারক ``CX``, নিয়ন্ত্রিত ``X` যা একটি যুক্তিবর্তনী দিয়ে দেখানো হচ্ছে, তার উদাহরণ দেয়া হল।"

#: ../../tutorials/operators/01_operator_flow.ipynb:1807
msgid "Applying an operator to a state vector"
msgstr "দশা দিকরাশির (স্টেট ভেক্টর) এর উপর কার্যকারক প্রয়োগ"

#: ../../tutorials/operators/01_operator_flow.ipynb:1818
msgid "Applying an operator to a state vector may be done with the ``compose`` method (equivalently, ``@`` operator). Here is a representation of :math:`X | 1 \\rangle = |0\\rangle`."
msgstr "দশা দিকরাশির (স্টেট ভেক্টর) উপর কার্যকারক প্রয়োগ ``compose`` দ্বারাও সম্পাদন করা সম্ভব (যা ``@`` কার্যকারকের সমতুল্য)। একটি উদাহরণ হচ্ছে :math:`X | 1 \\rangle = |0\\rangle`।"

#: ../../tutorials/operators/01_operator_flow.ipynb:1864
msgid "A simpler representation, the ``DictStateFn`` representation of :math:`|0\\rangle`, is obtained with ``eval``."
msgstr "``DictStateFn`` দ্বারা একই দশা দিকরাশি প্রকাশ করা যাবে :math:`|0\\rangle` এইভাবে, যা বেশ সহজতর এবং এটি অর্জিত হয়েছে ``eval`` দ্বারা।"

#: ../../tutorials/operators/01_operator_flow.ipynb:1905
msgid "The intermediate ``ComposedOp`` step may be avoided by using ``eval`` directly."
msgstr "মধ্যবর্তী ``ComposedOp`` ধাপ পরিহার করা যাবে সরাসরি ``eval`` ব্যবহারে মাধ্যমে।"

#: ../../tutorials/operators/01_operator_flow.ipynb:1946
msgid "Composition and tensor products of operators are effected with ``@`` and ``^``. Here are some examples."
msgstr "সমযোজন এবং টেনসর গুণন ``@`` এবং ``^`` দ্বারা প্রভাবিত। কিছু উদাহরণের মাধ্যমে তা বুঝানো হল।"

#: ../../tutorials/operators/01_operator_flow.ipynb:2100
msgid "Part III ``ListOp`` and subclasses"
msgstr "তৃতীয়াংশ ``ListOp`` এবং উপশ্রেণি"

#: ../../tutorials/operators/01_operator_flow.ipynb:2112
msgid "``ListOp``"
msgstr "``ListOp``"

#: ../../tutorials/operators/01_operator_flow.ipynb:2114
msgid "``ListOp`` is a container for effectively vectorizing operations over a list of operators and states."
msgstr "``ListOp`` কার্যকারকসমূহকে দিকরাশিতে রূপান্তরিত করার জন্য একটি যথার্থ কন্টেইনার যা কার্যকারক এবং দশাসমূহের তালিকা করে।"

#: ../../tutorials/operators/01_operator_flow.ipynb:2174
msgid "For example, the composition above is distributed over the lists (``ListOp``) using the simplification method ``reduce``."
msgstr "উদাহরণস্বরূপ, উপরে বর্ণিত সমযোজনকে একটি সহজ ``reduce`` নির্দেশমালা দ্বারা একটি তালিকাভুক্ত করা হল (``ListOp`` এর মাধ্যমে)।"

#: ../../tutorials/operators/01_operator_flow.ipynb:2257
msgid "``ListOp``\\ s: ``SummedOp``, ``ComposedOp``, ``TensoredOp``"
msgstr "ListOps: ``SummedOp``, ``ComposedOp``, ``TensoredOp``"

#: ../../tutorials/operators/01_operator_flow.ipynb:2259
msgid "``ListOp``, introduced above, is useful for vectorizing operations. But, it also serves as the superclass for list-like composite classes. If you’ve already played around with the above, you’ll notice that you can easily perform operations between ``OperatorBase``\\ s which we may not know how to perform efficiently in general (or simply haven’t implemented an efficient procedure for yet), such as addition between ``CircuitOp``\\ s. In those cases, you may receive a ``ListOp`` result (or subclass thereof) from your operation representing the lazy execution of the operation. For example, if you attempt to add together a ``DictStateFn`` and a ``CircuitStateFn``, you’ll receive a ``SummedOp`` representing the sum of the two. This composite State function still has a working ``eval`` (but may need to perform a non-scalable computation under the hood, such as converting both to vectors)."
msgstr "উপরে বর্ণিত ``ListOp`` একটি প্রয়োজনীয় দিকরাশিকরণ কার্যকারক (ভেক্টরাইজিং অপারেশন্স)। তবে ইহা কম্পোজিট শ্রেণীর মত সুপারক্লাস হিসেবেও কাজ করে। আপনি যদি ইহা ব্যবহার করে থাকেন তাহলে লক্ষ্য করে থাকবেন যে আপনি খুব সহজেই ``OperatorBase``\\ s এর কার্যকারক সম্পাদনা করতে পারবেন, যদিও ইহার সঠিক প্রায়োগিক ব্যবহার সম্পর্কে আমাদের পর্যাপ্ত দক্ষতা না থাকতেই পারে (অথবা কার্যকরী কর্মপরম্পরা আমাদের অজানা হতে পারে), যেমন ``CircuitOp``\\ s কার্যকারকের যোগ। এইসব ক্ষেত্রে আমরা ``ListOp`` ফলাফল হিসেবে পাব যা কার্যকারকের নিশ্চল (লেজি) সম্পাদনার তালিকা নির্দেশ করবে। উদাহরণস্বরূপ, ``DictStateFn`` এবং ``CircuitStateFn`` একসাথে যোগ করার ক্ষেত্রে ``SummedOp`` সংখ্যা দুইটির যোগফল দেখাবে। এই সমযোজন দশার (কম্পোজিট স্টেট) ক্ষেত্রে একটি ``eval`` সম্পাদনার কাজ চলমান রাখে ( তবে কোন কোন ক্ষেত্রে প্রচ্ছন্ন অগণন গাণিতিক কার্যক্রম বা নন-স্কেলেবল কম্পিউটেশন সম্পাদনার কাজ করতে পারে, যেমন উভয় শ্রেণিকে দিকরাশিতে রুপান্তর) ।"

#: ../../tutorials/operators/01_operator_flow.ipynb:2262
msgid "These composite ``OperatorBase``\\ s are how we construct increasingly complex and rich computation out of ``PrimitiveOp`` and ``StateFn`` building blocks."
msgstr "এই সমযোজন ``OperatorBase``\\ জটিল এবং বহুল গাণিতিক ব্যবহার (রিচ কম্পিউটেশন) সম্বলিত ``PrimitiveOp`` এবং ``StateFn`` এর মৌলিক ভিত্তি।"

#: ../../tutorials/operators/01_operator_flow.ipynb:2264
msgid "Every ``ListOp`` has four properties: \\* ``oplist`` - The list of ``OperatorBase``\\ s which may represent terms, factors, etc. \\* ``combo_fn`` - The function taking a list of complex numbers to an output value which defines how to combine the outputs of the ``oplist`` items. For broadcasting simplicity, this function is defined over NumPy arrays. \\* ``coeff`` - A coefficient multiplying the primitive. Note that ``coeff`` can be int, float, complex or a free ``Parameter`` object (from ``qiskit.circuit`` in Terra) to be bound later using ``my_op.bind_parameters``. \\* ``abelian`` - Indicates whether the Operators in ``oplist`` are known to mutually commute (usually set after being converted by the ``AbelianGrouper`` converter)."
msgstr "প্রতি ``ListOp`` এর চারটি ধর্ম আছেঃ \\* ``oplist`` - পদ, উৎপাদক এইত্যাদি ``OperatorBase``\\ s তালিকার অন্তর্ভুক্ত। \\* ``combo_fn``- অন্বয়টি একটি জটিল সংখ্যার তালিকা ইনপুট হিসেবে সম্পাদনা করে এমন একটি ফলাফল প্রদান করে যা ``oplist`` এর উপাদানগুলোর সাথে সমন্বয় করা যায়। আরও সহজভাবে বললে, এই অন্বয়টি বা ফাংশনটি NumPy এরে দ্বারা সংজ্ঞায়িত। \\* ``coeff`` - একটি সহগ কে মৌলিক উৎপাদক দ্বারা গুণন। লক্ষণীয় যে, ``coeff`` এর ডাটা টাইপ পুর্ণসংখ্যা (int), দশমিক (ফ্লোট), জটিল (কমপ্লেক্স) অথবা মুক্ত চলক বা ``Parameter`` হতে পারে (যা ``qiskit.circuit`` টেরা থেকে গৃহীত) যা সীমা ``my_op.bind_parameters`` দ্বারা নির্ধারিত। \\* ``abelian`` - নির্দেশ করে কার্যকারকের ``oplist` পারস্পরিক বিনিময়যোগ্য বা মিউচুয়ালি কমিউট ( যা ``AbelianGrouper`` পরিবর্তক বা রূপান্তরক (কনভার্টার) ব্যবহার করে রূপান্তর করা হয়)।"

#: ../../tutorials/operators/01_operator_flow.ipynb:2267
msgid "Note that ``ListOp`` supports typical iteration overloads, so you can use indexing like ``my_op[4]`` to access the ``OperatorBase``\\ s in ``oplist``."
msgstr "লক্ষণীয় যে, ``ListOp`` শ্রেণী পুনরাবৃত্তি ব্যবহার অনুমিত দেয় ( সাপোর্টস টিপিকাল ইটারেশন অভারলোডস), ফলে ``OperatorBase``\\ s অন্তর্ভুক্ত ``oplist`` এর তালিকা ব্যবহারের ক্ষেত্রে ``my_op[4]`` এইরুপ তালিকা ক্রম করা সম্ভব।"

#: ../../tutorials/operators/01_operator_flow.ipynb:2279
msgid "``OperatorStateFn``"
msgstr "``OperatorStateFn``"

#: ../../tutorials/operators/01_operator_flow.ipynb:2281
msgid "We mentioned above that ``OperatorStateFn`` represents a density operator. But, if the ``is_measurement`` flag is ``True``, then ``OperatorStateFn`` represents an observable. The expectation value of this observable can then be constructed via ``ComposedOp``. Or, directly, using ``eval``. Recall that the ``is_measurement`` flag (property) is set via the ``adjoint`` method."
msgstr "পুর্বে বর্ণিত হয়েছে ``OperatorStateFn`` একটি ডেনসিটি কার্যকারক নির্দেশ করে। কিন্তু যদি ``is_measurement`` নির্দেশনা ``True`` হয় সেইক্ষেত্রে ``OperatorStateFn`` একটি কার্যকারক হিসেবে কাজ করে। এই কার্যকারকের গড় মান ``ComposedOp`` দ্বারা তৈরি করা যায়। অথবা সরাসরি ``eval`` পদ্ধতি দ্বারা একই গড় মান নির্ণয় করা যাবে। বিশেষভাবে লক্ষণীয় যে, ``is_measurement`` নির্দেশনা একটি ``adjoint`` পদ্ধতি দ্বারা নির্ণয় করা যায়।"

#: ../../tutorials/operators/01_operator_flow.ipynb:2292
msgid "Here we construct the observable corresponding to the Pauli :math:`Z` operator. Note that when printing, it is called ``OperatorMeasurement``."
msgstr "এইখানে পাউলী :math:`Z` কার্যকারক দ্বারা সংশ্লিষ্ট পর্যবেক্ষনসমূহ তৈরি প্রক্রিয়া দেখানো হবে। বিশেষ লক্ষণীয় যে, যখন কার্যকারকটি সম্পাদিত হবে তখন তাকে বলা হবে ``OperatorMeasurement``।"

#: ../../tutorials/operators/01_operator_flow.ipynb:2354
msgid "Here, we compute :math:`\\langle 0 | Z | 0 \\rangle`, :math:`\\langle 1 | Z | 1 \\rangle`, and :math:`\\langle + | Z | + \\rangle`, where :math:`|+\\rangle = (|0\\rangle + |1\\rangle)/\\sqrt{2}`."
msgstr "এখন আমরা :math:`\\langle 0 | Z | 0 \\rangle`, :math:`\\langle 1 | Z | 1 \\rangle` এবং :math:`\\langle + | Z | + \\rangle` গণনা করব, যেখানে :math:`|+\\rangle = (|0\\rangle + |1\\rangle)/\\sqrt{2}`।"

#: ../../tutorials/operators/01_operator_flow.ipynb:2401
msgid "Part IV: Converters"
msgstr "চতুর্থাংশঃ রূপান্তরক"

#: ../../tutorials/operators/01_operator_flow.ipynb:2403
msgid "Converters are classes that manipulate operators and states and perform building blocks of algorithms. Examples include changing the basis of operators and Trotterization. Converters traverse an expression and perform a particular manipulation or replacement, defined by the converter’s ``convert()`` method, of the Operators within. Typically, if a converter encounters an ``OperatorBase`` in the recursion which is irrelevant to its conversion purpose, that ``OperatorBase`` is left unchanged."
msgstr "রূপান্তরক হচ্ছে বিশেষ শ্রেণী যা কার্যকারক এবং দশাসমূর উপর প্রায়োগিক ব্যবহার আছে এবং এই রূপান্তরকসমূহ ধারাক্রমের মূল ভিত্তি হিসেবে কাজ করে। উদাহরণস্বরূপ বেসিস কার্যকারকের পরিবর্তন এবং ট্রটারাইজেশন। রূপান্তরের প্রকাশ প্রক্রিয়া এবং সম্পাদন প্রক্রিয়া ``convert()`` প্রক্রিয়া দ্বারা সংজ্ঞায়িত করা হয়। সাধারণত, যদি রুপান্তরকসমূহ ``OperatorBase`` একটি প্রত্যাবর্তী প্রক্রিয়া মেনে চলে যা রূপান্তরক প্রক্রিয়ার সাথে অপ্রাসঙ্গিক কারণ এতে ``OperatorBase`` অপরিবর্তিত থাকে।"

#: ../../tutorials/operators/01_operator_flow.ipynb:2428
msgid "Evolutions, ``exp_i()``, and the ``EvolvedOp``"
msgstr "পরিবর্তন, ``exp_i()``, এবং ``EvolvedOp``"

#: ../../tutorials/operators/01_operator_flow.ipynb:2430
msgid "Every ``PrimitiveOp`` and ``ListOp`` has an ``.exp_i()`` function such that ``H.exp_i()`` corresponds to :math:`e^{-iH}`. In practice, only a few of these Operators have an efficiently computable exponentiation (such as MatrixOp and the PauliOps with only one non-identity single-qubit Pauli), so we need to return a placeholder, or symbolic representation, (similar to how ``SummedOp`` is a placeholder when we can’t perform addition). This placeholder is called ``EvolvedOp``, and it holds the ``OperatorBase`` to be exponentiated in its ``.primitive`` property."
msgstr "প্রত্যেক ``PrimitiveOp`` এবং ``ListOp`` এর একটি ``.exp_i()`` অন্বয় আছে যেখানে ``H.exp_i()`` নির্দেশ করে :math:`e^{-iH}`। এই ক্ষেত্রে অল্প কিছু কার্যকারক খুবই দক্ষতার সাথে সূচকীয় হারে গণনার কাজ সম্পাদন করে (যেমন MatrixOp এবং PauliOps একটি অ-অভেদক একক কিউবিট পাউলী যুক্তিবর্তনীর উপর কাজ করে), সুতরাং আমাদের একটি সাংকেতিক প্রকাশক দরকার (যা অনেকটা ``SummedOp`` এর মত কারণ তা যোগের কাজ করতে পারে না)। এই প্লেসহোল্ডারকে বলা হয় ``EvolvedOp`` এবং এইটি সূচকীয় ভিত্তিতে ``.primitive`` এবং ``OperatorBase`` এর সাথে সম্পর্ক স্থাপন করে।"

#: ../../tutorials/operators/01_operator_flow.ipynb:2433
msgid "Qiskit operators fully support parameterization, so we can use a ``Parameter`` for our evolution time here. Notice that there’s no “evolution time” argument in any function. The Operator flow exponentiates whatever operator we tell it to, and if we choose to multiply the operator by an evolution time, :math:`e^{-iHt}`, that will be reflected in our exponentiation parameters."
msgstr "কিসকিট(Qiskit)অপারেটরগুলি সম্পূর্ণভাবে পরিমিতিকরণে সাহায্য করে, সেজন্য আমরা একটি ``Parameter``কে আমাদের বিবর্তন সময়ের জন্য এখানে ব্যবহার করতে পারবো। লক্ষ্য করুন যে, এখানে কোনো ফাংশনে কোনো “evolution time”আর্গুমেন্ট নেই। অপারেটর প্রবাহটি যে কোনও অপারেটরকেই প্রকাশ করে যাকেই আমরা এটিকে করতে বলি, এবং যদি আমরা একটি বিবর্তন সময়ের দ্বারা অপারেটরকে গুণিত করতে বেছে নিয়ি,:math:`e^{-iHt}`,যা আমাদের পরিমিতিদের সজ্জাতে প্রকাশিত হবে।"

#: ../../tutorials/operators/01_operator_flow.ipynb:2445
msgid "Weighted sum of Pauli operators"
msgstr "পাউলী কার্যকারকের আবেশিত যোগফল"

#: ../../tutorials/operators/01_operator_flow.ipynb:2447
msgid "A Hamiltonian expressed as a linear combination of multi-qubit Pauli operators may be constructed like this."
msgstr "একটি হ্যামিল্টনিয়ান কে বহুকিউবিট পাউলী অপারেটর ভিত্তিক যোগাশ্রয়ী সমযোজন দ্বারা প্রকাশ করা যায়।"

#: ../../tutorials/operators/01_operator_flow.ipynb:2472
msgid "Note that ``two_qubit_H2`` is represented as a ``SummedOp`` whose terms are ``PauliOp``\\ s."
msgstr "লক্ষণীয় যে, ``two_qubit_H2`` কে একটি ``SummedOp`` দ্বারা প্রকাশ করা যায়, যা ``PauliOp``\\ s এর অধিভুক্ত।"

#: ../../tutorials/operators/01_operator_flow.ipynb:2520
msgid "Next, we multiply the Hamiltonian by a ``Parameter``. This ``Parameter`` is stored in the ``coeff`` property of the ``SummedOp``. Calling ``exp_i()`` on the result wraps it in ``EvolvedOp``, representing exponentiation."
msgstr "এরপর, আমরা হ্যামিল্টোনিয়ানটিকে ``Parameter`` দিয়ে গুণিত করি, ``Parameter``টিকে ``SummedOp``এর বৈশিষ্ট্য``coeff``এতে সংগ্রহ করে রাখা হয়। ফলাফলেতে ``exp_i()``কে ডাকা মানে এটিকে``EvolvedOp``এতে আবৃত করা, সজ্জাকে প্রদর্শিত করে।"

#: ../../tutorials/operators/01_operator_flow.ipynb:2589
msgid "We construct ``h2_measurement``, which represents ``two_qubit_H2`` as an observable."
msgstr "আমরা ``h2_measurement`` নির্মাণ করি, যা একটি পর্যবেক্ষণযোগ্য হিসাবে ``two_qubit_H2`` প্রতিনিধিত্ব করে।"

#: ../../tutorials/operators/01_operator_flow.ipynb:2638
msgid "We construct a Bell state :math:`|\\Phi_+\\rangle` via :math:`\\text{CX} (H\\otimes I) |00\\rangle`."
msgstr ":math:`|\\Phi_+\\rangle` এবং :math:`\\text{CX} (H\\otimes I) |00\\rangle` দ্বারা একটি বেল স্টেট অবস্থা নির্ণয় করা হয়।"

#: ../../tutorials/operators/01_operator_flow.ipynb:2691
msgid "Here is the expression :math:`H e^{-iHt} |\\Phi_+\\rangle`."
msgstr "যার গাণিতিক প্রকাশভঙ্গী :math:`H e^{-iHt} |\\Phi_+\\rangle`."

#: ../../tutorials/operators/01_operator_flow.ipynb:2772
msgid "Typically, we want to approximate :math:`e^{-iHt}` using two-qubit gates. We achieve this with the ``convert`` method of ``PauliTrotterEvolution``, which traverses expressions applying trotterization to all ``EvolvedOp``\\ s encountered. Although we use ``PauliTrotterEvolution`` here, there are other possibilities, such as ``MatrixEvolution``, which performs the exponentiation exactly."
msgstr "সাধারণত, আমরা :math:`e^{-iHt}` কে অনুমান করতে চাই দুই-কিউবিট (two-qubit) বর্তনী দিয়ে। আমরা এটা ``convert`` পদ্ধতির ``PauliTrotterEvolution`` দিয়ে করি, যেটা সব ``EvolvedOp`` এর উপর trotterization প্র​য়োগ​ করে।যদিও আমরা এখানে ``PauliTrotterEvolution` ব্যবহার করেছি, অন্য পদ্ধতি যেমন  ``MatrixEvolution`` ও এই exponentiation করতে পারে। "

#: ../../tutorials/operators/01_operator_flow.ipynb:2862
msgid "``trotterized_op`` contains a ``Parameter``. The ``bind_parameters`` method traverses the expression binding values to parameter names as specified via a ``dict``. In this case, there is only one parameter."
msgstr "``trotterized_op``এতে থাকে একটি ``Parameter``, ``bind_parameters``পদ্ধতিটি বন্ধিতমানকে নির্দিষ্ট পরামিতির নামেতে প্রকাশন করতে ``dict`` হয়ে ঘোরে।এইক্ষেত্রে, একটি মাত্রই পরামিতি রয়েছে।"

#: ../../tutorials/operators/01_operator_flow.ipynb:2883
msgid "``bound`` is a ``ComposedOp``. The second factor is the circuit. Let’s draw it to verify that the binding has taken place."
msgstr "``ComposedOp`` হল একটি ``bound``।দ্বিতীয় উৎপাদক হল একটি বর্তনী (সার্কিট)।যে বন্ধনটি ঘটেছে তা যাচাই করার জন্য অঙ্কন করা যাক।"

#: ../../tutorials/operators/01_operator_flow.ipynb:2998
msgid "Expectations"
msgstr "গড় মান"

#: ../../tutorials/operators/01_operator_flow.ipynb:3000
msgid "``Expectation``\\ s are converters that enable the computation of expectation values of observables. They traverse an Operator tree, replacing ``OperatorStateFn``\\ s (observables) with equivalent instructions which are more amenable to computation on quantum or classical hardware. For example, if we want to measure the expectation value of an Operator ``o`` expressed as a sum of Paulis with respect to some state function, but can only access diagonal measurements on quantum hardware, we can create an observable ``~StateFn(o)`` and use a ``PauliExpectation`` to convert it to a diagonal measurement and circuit pre-rotations to append to the state."
msgstr "``Expectation``\\গুলি হল পরিবর্তক (কনভার্টার) যেটা গড় মানের পর্যবেক্ষণযোগ্য বা দৃষ্টিগ্রাহ্য (অবজারভেবল) মান গণনা চালু করে। তারা একটি অপারেটর ট্রিকে অতিক্রম করে,``OperatorStateFn``\\(অবজারভেবল) গুলিকে সমতূল্য নির্দেশনা দিয়ে বদলে দেয় যা কোয়ান্টাম বা ধ্রুপদী (ক্লাসিক্যাল) হার্ডওয়্যারের উপর গণনা আরো সুবিধাজনক।উদাহরণ স্বরূপ, যদি আমরা একটি অপারেটর ``o``এর গড় মানের মানকে এমনভাবে পরিমাপ করতে চাই যাতে তা একটি পাওলির সমষ্টি বোঝায় কোনো ফাংশনমান বা অবস্থার সাপেক্ষে, কিন্তু একমাত্র কোয়ান্টাম হার্ডওয়্যারের কর্ণ বরাবর পরিমাপ করার প্রবেশাধিকার রয়েছে, আমরা তৈরী করতে পারি একটি পর্যবেক্ষণযোগ্য ``~StateFn(o)``এবং একটি ``PauliExpectation`` কে ব্যবহার করে কর্ণ বরাবর পরিমাপেতে এবংবর্তনী (সার্কিট) কে প্রাক-ঘূর্ণন মান বা অবস্থাতে যোগ করার জন্য।"

#: ../../tutorials/operators/01_operator_flow.ipynb:3003
msgid "Another interesting ``Expectation`` is the ``AerPauliExpectation``, which converts the observable into a ``CircuitStateFn`` containing a special expectation snapshot instruction which ``Aer`` can execute natively with high performance."
msgstr "অন্য আরেকটি কৌতূহলোদ্দীপক ``Expectation`` হল ``AerPauliExpectation``, যা পর্যবেক্ষণযোগ্যকে একটি``CircuitStateFn``এতে রূপান্তরিত করে যার মধ্যে একটি নির্দিষ্ট গড় মান স্ন্যাপশট নির্দেশনা যা ``Aer`` উচ্চ কর্মদক্ষতাসহ সপাদন করতে পারে।"

#: ../../tutorials/operators/01_operator_flow.ipynb:3094
msgid "By default ``group_paulis=True``, which will use the ``AbelianGrouper`` to convert the ``SummedOp`` into groups of mutually qubit-wise commuting Paulis. This reduces circuit execution overhead, as each group can share the same circuit execution."
msgstr "স্বতঃসিদ্ধ নিয়মানুসারে ``group_paulis=True``, যেটা ``AbelianGrouper`` কে ব্যবহার করে ``SummedOp``কে সমসংখক কিউবিট অনুযায়ী সমসংখক পাউলিদের দলে পরিবর্তিত করে। এটা বর্তনী (সার্কিট) এর চালনার ঊর্ধ্বস্থিতকে কমায়ে, যেমন প্রতিটি দল সমান বর্তনী (সার্কিট) কে ভাগ করে চালনা করতে পারে।"

#: ../../tutorials/operators/01_operator_flow.ipynb:3166
msgid "Note that converters act recursively, that is, they traverse an expression applying their action only where possible. So we can just convert our full evolution and measurement expression. We could have equivalently composed the converted ``h2_measurement`` with our evolution ``CircuitStateFn``. We proceed by applying the conversion on the entire expression."
msgstr "টীকা যে রূপান্তরকারীরা পুনরাবৃতভাবে কাজ করে, অর্থাৎ, তারা শুধুমাত্র সম্ভব যেখানে সেইখানেই তাদের কর্ম প্রয়োগ করে একটি অভিব্যক্তিকে অতিক্রম করে। তাই আমরা শুধু আমাদের সম্পূর্ণ বিবর্তনকে এবং পরিমাপ অভিব্যক্তিকে রূপান্তর করতে পারি। আমরা সমানভাবে রূপান্তরিত 'h2_measurement \" কে আমাদের বিবর্তনের ``CircuitStateFn`` সাথে সুবিন্যস্ত করতে পারতাম। আমরা সমগ্র অভিব্যক্তিটির উপর রূপান্তর প্রয়োগ করে এগিয়ে যেতে পারি।"

#: ../../tutorials/operators/01_operator_flow.ipynb:3299
msgid "Now we bind multiple parameter values into a ``ListOp``, followed by ``eval`` to evaluate the entire expression. We could have used ``eval`` earlier if we bound earlier, but it would not be efficient. Here, ``eval`` will convert our ``CircuitStateFn``\\ s to ``VectorStateFn``\\ s through simulation internally."
msgstr "এখন আমরা একাধিক পরামিতি মানকে একটি ``ListOp``তে আবদ্ধ করি,``eval``দ্বারা অনুসারিত সম্পূর্ণ অভিব্যাক্তিটি মূল্যায়ন করার জন্য। যদি আমরা আবদ্ধ করার জন্য ``eval``কে শীঘ্র ব্যবহার পারতাম, কিন্তু তা ও সাশ্রয়ী হতো না।এখানে,``eval``আমাদের``CircuitStateFn``\\গুলিকে ``VectorStateFn``\\গুলিতে পরিবর্তিত করে আভ্যন্তরীণভাবে সিমুলেশনের মাধ্যমে।"

#: ../../tutorials/operators/01_operator_flow.ipynb:3321
msgid "Here are the expectation values :math:`\\langle \\Phi_+| e^{iHt} H e^{-iHt} |\\Phi_+\\rangle` corresponding to the different values of the parameter."
msgstr "এখানে গড় মানের মানগুলি হল :math:`\\langle \\Phi_+| e^{iHt} H e^{-iHt} |\\Phi_+\\rangle`পরামিতির বিভিন্ন সংশ্লিষ্ট মানগুলির সঙ্গে বজায়ে রেখে।"

#: ../../tutorials/operators/01_operator_flow.ipynb:3367
msgid "Executing ``CircuitStateFn``\\ s with the ``CircuitSampler``"
msgstr "`সম্পাদন ``CircuitStateFn``\\ s with the ``CircuitSampler`` <#সম্পাদন>`__"

#: ../../tutorials/operators/01_operator_flow.ipynb:3369
msgid "The ``CircuitSampler`` traverses an Operator and converts any ``CircuitStateFns`` into approximations of the resulting state function by a ``DictStateFn`` or ``VectorStateFn`` using a quantum backend. Note that in order to approximate the value of the ``CircuitStateFn``, it must 1) send the state function through a depolarizing channel, which will destroy all phase information and 2) replace the sampled frequencies with **square roots** of the frequency, rather than the raw probability of sampling (which would be the equivalent of sampling the **square** of the state function, per the Born rule.)"
msgstr "``CircuitSampler`` টি একটি অপারেটরকে অতিক্রম করে এবং কোনো ``CircuitStateFns``কে রূপান্তরিত করে একটি ``Dicstatefn`` অথবা`` `Vectorstatefn` দ্বারা আনুমানিক ফলস্বরুপ ফাংশনের মান বা অবস্থায় কোয়ানটাম ব্যাকএন্ডকে ব্যবহার করে। মনে রাখবেন যে ``CircuitStateFn`` এর মানটি আনুমানিক করার জন্য, এটি অবশ্যই ১) একটি বিমেরুকরণ (ডিপোলারাইজেশন) চ্যানেলের মাধ্যমে ফাংশনের মান বা অবস্থাকে পাঠান, যা সমস্ত দশার তথ্য ধ্বংস করবে এবং ২) নমুনা কম্পাঙ্কগুলির সাথে ** বর্গমূলগুলির ** কম্পাঙ্কের প্রতিস্থাপন করুন, যা নমুনাটির অপরিমার্জিত সম্ভাব্যতার পরিবর্তে হবে (যা ফাংশনের মান বা অবস্থার ** বর্গের ** নমুনার সমতুল্য হবে, Born নিয়মানুসারে।)"

#: ../../tutorials/operators/01_operator_flow.ipynb:3418
msgid "Note again that the circuits are replaced by dicts with **square roots** of the circuit sampling probabilities. Take a look at one sub-expression before and after the conversion:"
msgstr "টীকা আবার যে বর্তনী (সার্কিট) এর নমুনা সম্ভাবনার ** বর্গমূল **এর ডিক্স দ্বারা বর্তনী (সার্কিট) গুলির সাথে প্রতিস্থাপিত হয়। রূপান্তরের আগে এবং পরে একটি উপ-অভিব্যক্তি চেহারার দিকে নজর দিনঃ"

