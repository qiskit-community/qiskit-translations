msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-17 13:53+0000\n"
"PO-Revision-Date: 2022-06-17 15:02\n"
"Last-Translator: \n"
"Language-Team: Bengali Language\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: bengali\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/simulators/7_matrix_product_state_method.po\n"
"X-Crowdin-File-ID: 9172\n"
"Language: bn_BN\n"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:10
msgid "This page was generated from `tutorials/simulators/7_matrix_product_state_method.ipynb`__."
msgstr "এই পৃষ্ঠাটি `tutorials/simulators/7_matrix_product_state_method.ipynb`__ -থেকে বানানো হয়েছে।"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:9
#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:26
msgid "Matrix product state simulation method"
msgstr "ম্যাট্রিক্স গুণফলের অবস্থা সিমুলেশন পদ্ধতি"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:12
msgid "Simulation methods"
msgstr "সিমুলেশন(মহড়া) পদ্ধতি সমূহ"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:14
msgid "The ``AerSimulator`` has several simulation methods including ``statevector``, ``stabilizer``, ``extended_stabilizer`` and ``matrix_product_state``. Each of these determines the internal representation of the quantum circuit and the algorithms used to process the quantum operations. They each have advantages and disadvantages, and choosing the best method is a matter of investigation. In this tutorial, we focus on the ``matrix product state simulation method``."
msgstr "``AerSimulator`` -এ অনেক সিমুলেশন পদ্ধতি আছে, যেমন - ``statevector``, ``stabilizer``, ``extended_stabilizer`` ও ``matrix_product_state``। এদের প্রত্যেকটা কোয়ান্টাম বর্তনীর (সার্কিট) অভ্যন্তরীন গঠন এবং কোয়ান্টাম ক্রিয়াসমূহর সমাধানপদ্ধতি নির্ধারণ করে। প্রত্যেকের কিছু সুবিধা-অসুবিধা আছে এবং কাজের জন্য কোনটা ভালো সেটা খুঁজে নিতে হয়। এই পাঠসমূহে (টিউটোরিয়াল) আমরা ``ম্যাট্রিক্স গুনফল অবস্থা সিমুলেশন পদ্ধতি`` ব্যাপারে আলোচনা করবো।"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:28
msgid "This simulation method is based on the concept of ``matrix product states``. This structure was initially proposed in the paper *Efficient classical simulation of slightly entangled quantum computations* by Vidal in https://arxiv.org/abs/quant-ph/0301063. There are additional papers that describe the structure in more detail, for example *The density-matrix renormalization group in the age of matrix product states* by Schollwoeck https://arxiv.org/abs/1008.3477."
msgstr "এই সিমুলেশন ``ম্যাট্রিক্স গুনফল অবস্থা`` ধারণার উপর ভিত্তি করে বানানো। এই কাঠামো প্রথম আলোচনা হয়েছিল *Efficient classical simulation of slightly entangled quantum computations* by Vidal in https://arxiv.org/abs/quant-ph/0301063। বিশদে জানার জন্য আরো গবেষণাপত্র আছে, যেমন - *The density-matrix renormalization group in the age of matrix product states* by Schollwoeck https://arxiv.org/abs/1008.3477।"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:39
msgid "A pure quantum state is usually described as a state vector, by the expression :math:`|\\psi\\rangle = \\sum_{i_1=0}^1 {\\ldots} \\sum_{i_n=0}^1 c_{i_1 \\ldots i_n} |i_i\\rangle {\\otimes} {\\ldots} {\\otimes} |i_n\\rangle`."
msgstr "একটা বিশুদ্ধ কোয়ান্টাম অবস্থা একটা অবস্থা নির্ণায়ক দিকরাশি (স্টেট ভেক্টর) দিয়ে সূচিত হয়। এর গাণিতিক রূপ হলো :math:`|\\psi\\rangle = \\sum_{i_1=0}^1 {\\ldots} \\sum_{i_n=0}^1 c_{i_1 \\ldots i_n} |i_i\\rangle {\\otimes} {\\ldots} {\\otimes} |i_n\\rangle`।"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:41
msgid "The state vector representation implies an exponential size representation, regardless of the actual circuit. Every quantum gate operating on this representation requires exponential time and memory."
msgstr "অবস্থা নির্ণায়ক দিকরাশি (স্টেট ভেক্টর) উপস্থাপনা একটা বড় আকারের উপস্থাপনা বোঝায় যা আসল বর্তনীর (সার্কিট) আকারের উপর নির্ভরশীল নয়। এই উপস্থাপনার প্রত্যেক কোয়ান্টাম যুক্তিবর্তনী (গেইট) গণনাকালীন প্রচুর সময় ও মেমরি নেয়।"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:43
msgid "The matrix product state (MPS) representation offers a local representation, in the form: :math:`\\Gamma^{[1]} \\lambda^{[1]} \\Gamma^{[2]} \\lambda^{[2]}\\ldots \\Gamma^{[1]} \\lambda^{[n-1]} \\Gamma^{[n]}`, such that all the information contained in the :math:`c_{i_1 \\ldots i_n}`, can be generated out of the MPS representation."
msgstr "ম্যাট্রিক্স গুনফল অবস্থা (এমপিএস) নিম্নলিখিত রূপে একটা স্থানীয় উপস্থাপনা দেয়: :math:`\\Gamma^{[1]} \\lambda^{[1]} \\Gamma^{[2]} \\lambda^{[2]}\\ldots \\Gamma^{[1]} \\lambda^{[n-1]} \\Gamma^{[n]}`, যাতে :math:`c_{i_1 \\ldots i_n}` -এর মধ্যে থাকা সব তথ্য এমপিএস উপস্থাপনা থেকে পাওয়া যায়।"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:54
msgid "Every :math:`\\Gamma^{[i]}` is a tensor of complex numbers that represents qubit :math:`i`. Every :math:`\\lambda^{[i]}` is a matrix of real numbers that is used to normalize the amplitudes of qubits :math:`i` and :math:`i+1`. Single-qubit gates operate only on the relevant tensor."
msgstr "প্রত্যেক :math:`\\Gamma^{[i]}` হলো জটিল রাশির দিকরাশি (টেন্সর) যেটা একটা কিউবিট :math:`i` কে চিহ্নিত করে। প্রত্যেক :math:`\\lambda^{[i]}` হলো বাস্তব সংখ্যার ম্যাট্রিক্স যার সাহায্যে :math:`i` ও :math:`i+1` কিউবিটের বিস্তার শমিত করা যায়। একক কিউবিট যুক্তিবর্তনী (গেট) কেবল প্রাসঙ্গিক দিকরাশির (টেন্সর) উপর কাজ করে:"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:56
msgid "Two-qubit gates operate on consecutive qubits :math:`i` and :math:`i+1`. This involves a tensor-contract operation over :math:`\\lambda^{[i-1]}`, :math:`\\Gamma^{[i-1]}`, :math:`\\lambda^{[i]}`, :math:`\\Gamma^{[i+1]}` and :math:`\\lambda^{[i+1]}`, that creates a single tensor. We apply the gate to this tensor, and then decompose back to the original structure. This operation may increase the size of the respective tensors. Gates that involve two qubits that are not consecutive, require a series of swap gates to bring the two qubits next to each other and then the reverse swaps."
msgstr "২-কিউবিট যুক্তিবর্তনী (গেইট) পরপর কিউবিটের :math:`i` এবং :math:`i+1` উপর কাজ করে। এর মধ্যে :math:`\\lambda^{[i-1]}`, :math:`\\Gamma^{[i-1]}`, :math:`\\lambda^{[i]}`, :math:`\\Gamma^{[i+1]}` ও :math:`\\lambda^{[i+1]}` -এর উপর একটা টেন্সর-কন্ট্রাক্ট ক্রিয়াকলাপ (অপারেশন) হয় যেটা একটা দিকরাশি (টেন্সর) বানায়। আমরা যুক্তিবর্তনীকে (গেইট) এই দিকরাশির (টেন্সর) উপর প্রায় করি এবং তারপর প্রাথমিক কাঠামোয় ভেঙে যায়। এর ক্রিয়াকলাপ (অপারেশন) দিকরাশির (টেন্সর) আকার বাড়াতে পারে। যেসব যুক্তিবর্তনীতে (গেট) দুটো কিউবিট পরপর না তাদের ক্ষেত্রে কিছু সোয়াপ যুক্তিবর্তনী (গেইট) ব্যবহার করে কিউবিটগুলো প্রথমে পরপর আনা হয় এবং কাজের পর বিপরীত সোয়াপ যুক্তিবর্তনী (গেইট) ব্যবহার করতে হয়।"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:59
msgid "In the worst case, the tensors may grow exponentially. However, the size of the overall structure remains ‘small’ for circuits that do not have ‘many’ two-qubit gates. This allows much more efficient operations in circuits with relatively ‘low’ entanglement. Characterizing when to use this method over other methods is a subject of current research."
msgstr "সবচেয়ে খারাপ ক্ষেত্রে, দিকরাশিগুলো (টেন্সর) ঘাতের হারে বৃদ্ধি পেতে পারে। কিন্তু যেসব বর্তনীতে (সার্কিট) ‘বেশি’ ২-কিউবিট যুক্তিবর্তনী (গেইট) থাকে না সেক্ষেত্রে সামগ্রিক কাঠামো ‘ছোট’ ই হয়। এর ফলে যেসব বর্তনীতে (সার্কিট) আপেক্ষিকভাবে ‘কম’ এনট্যাঙ্গেলমেন্ট থাকে তাদের ক্ষেত্রে দ্রুততর ক্রিয়াকলাপ (অপারেশন) হয়। কখন এই পদ্ধতি কাজে লাগানো উচিত সেটা এখনো পরীক্ষাধীন।"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:71
msgid "Using the matrix product state simulation method"
msgstr "ম্যাট্রিক্স গুণফলের অবস্থা সিমুলেশন পদ্ধতির ব্যবহার"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:73
msgid "The matrix product state simulation method is invoked in the ``AerSimulator`` by setting the simulation method. Other than that, all operations are controlled by the ``AerSimulator`` itself, as in the following example:"
msgstr "ম্যাট্রিক্স গুণফল অবস্থা সিমুলেশন পদ্ধতি চালু করতে হলে ``AerSimulator`` -এ সিমুলেশন পদ্ধতি নির্বাচন করতে হবে। এছাড়া বাকি সব ক্রিয়াকলাপ (অপারেশন) ``AerSimulator`` নিজে নিয়ন্ত্রণ করে। নিচের উদাহরণে ব্যাপারটা দেখা যাক:"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:138
msgid "To see the internal state vector of the circuit we can use the ``save_statevector`` instruction. To return the full internal MPS structure we can also use the ``save_matrix_product_state`` instruction."
msgstr "বর্তনীর (সার্কিট) অভ্যন্তরীন অবস্থা নির্ণায়ক দিকরাশি (স্টেট ভেক্টর) দেখতে হলে ``save_statevector`` নির্দেশনা কাজে লাগাতে হবে। সম্পূর্ণ অভ্যন্তরীন এমপিএস গঠন পাওয়ার জন্য আমরা ``save_matrix_product_state`` নির্দেশনা ব্যবহার করতে পারি।"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:220
msgid "Running circuits using the matrix product state simulation method can be fast, relative to other methods. However, if we generate the state vector during the execution, then the conversion to state vector is, of course, exponential in memory and time, and therefore we don’t benefit from using this method. We can benefit if we only do operations that don’t require printing the full state vector. For example, if we run a circuit and then take measurement. The circuit below has 200 qubits. We create an ``EPR state`` involving all these qubits. Although this state is highly entangled, it is handled well by the matrix product state method, because there are effectively only two states."
msgstr "অন্য পদ্ধতির তুলনায় ম্যাট্রিক্স গুণফল অবস্থা সিমুলেশন পদ্ধতিতে বর্তনী (সার্কিট) দ্রুত চালানো যায়। কিন্তু যদি আমরা গণনা চলাকালীন অবস্থা নির্ণায়ক দিকরাশি (স্টেট ভেক্টর) বানাই তাহলে এই পরিবর্তনের জন্য প্রচুর সময় ও মেমরি লাগবে এবং এই পদ্ধতি তখন অর্থহীন হয়ে যাবে। যেসব ক্রিয়াকলাপে (অপারেশন) পুরো অবস্থা নির্ণায়ক দিকরাশি (স্টেট ভেক্টর) দেখার প্রয়োজন নেই আমরা কেবল সেসব ক্রিয়াকলাপ (অপারেশন) এই পদ্ধতিতে করতে পারি। উদাহরণরূপে, যদি আমরা একটা বর্তনী (সার্কিট) চালাই ও পরিমাপ করি। নিচের বর্তনীতে (সার্কিট) ২০০টি কিউবিট আছে। আমরা সমস্ত কিউবিট নিয়ে একটা ``EPR state`` বানাতে পারি। যদিও এই অবস্থা খুবই পরিসাংখ্যিক বিজড়িত, ম্যাট্রিক্স গুনফল অবস্থা পদ্ধতি সহজেই এটা সামলাতে পারবে কারণ কার্যকরভাবে এটা কেবল ২টি অবস্থা।"

#: ../../tutorials/simulators/7_matrix_product_state_method.ipynb:223
msgid "We can handle more qubits than this, but execution may take a few minutes. Try running a similar circuit with 500 qubits! Or maybe even 1000 (you can get a cup of coffee while waiting)."
msgstr "আমরা এর থেকেও অধিক কিউবিট সামলে নিতে পারি, কিন্তু এক্সেকিউট বা সম্পাদন হতে মিনিট খানেক সময় নিতে পারে। একই বর্তনী (সার্কিট) আপনি ৫০০টি কিউবিট দিয়ে চালানোর চেষ্টা করে দেখুন! অথবা হতে পারে 1000(অপেক্ষা করবার সময় আপনি এক কাপ কফি নিয়ে আসতে পারেন)।"

