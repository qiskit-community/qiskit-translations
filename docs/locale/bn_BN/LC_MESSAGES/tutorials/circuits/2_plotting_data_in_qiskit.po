msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 17:09+0000\n"
"PO-Revision-Date: 2021-08-02 15:21\n"
"Last-Translator: \n"
"Language-Team: Bengali Language\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: bengali\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits/2_plotting_data_in_qiskit.po\n"
"X-Crowdin-File-ID: 9116\n"
"Language: bn_BN\n"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:10
msgid "This page was generated from `tutorials/circuits/2_plotting_data_in_qiskit.ipynb`__."
msgstr "এই পৃষ্ঠাটি `tutorials/circuits/2_plotting_data_in_qiskit.ipynb`__ থেকে তৈরি হয়েছে।"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:9
msgid "Qiskit Visualizations"
msgstr "Qiskit এ দৃশ্যায়ন (ভিজুয়ালাইজেশন)"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:33
msgid "Plot histogram"
msgstr "আয়তলেখ (হিস্টোগ্রাম) আঁকা"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:35
msgid "To visualize the data from a quantum circuit run on a real device or ``qasm_simulator`` we have made a simple function"
msgstr "কোয়ান্টাম বর্তনী থেকে প্রাপ্ত তথ্য দৃশ্যায়ন করতে বর্তনীটি আসল যন্ত্রে বা ``qasm_simulator`` এ কার্যকর করার জন্য"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:37
msgid "``plot_histogram(data)``"
msgstr "``plot_histogram(data)`` ফাংশনটি বানানো হয়েছে।"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:39
msgid "As an example we make a 2-qubit Bell state"
msgstr "উদাহরণস্বরূপ, আমরা ২-কিউবিট সম্পন্ন বেল অবস্থা (বেল স্টেট) বানাবো"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:112
msgid "Options when plotting a histogram"
msgstr "আয়তলেখ (হিস্টোগ্রাম) আঁকার বিভিন্ন উপায়"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:114
msgid "The ``plot_histogram()`` has a few options to adjust the output graph. The first option is the ``legend`` kwarg. This is used to provide a label for the executions. It takes a list of strings use to label each execution’s results. This is mostly useful when plotting multiple execution results in the same histogram. The ``sort`` kwarg is used to adjust the order the bars in the histogram are rendered. It can be set to either ascending order with ``asc`` or descending order with ``desc``. The ``number_to_keep`` kwarg takes an integer for the number of terms to show, the rest are grouped together in a single bar called rest. You can adjust the color of the bars with the ``color`` kwarg which either takes a string or a list of strings for the colors to use for the bars for each execution. You can adjust whether labels are printed above the bars or not with the ``bar_labels`` kwarg. The last option available is the ``figsize`` kwarg which takes a tuple of the size in inches to make the output figure."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:172
msgid "Using the output from plot_histogram()"
msgstr "plot\\_histogram() থেকে প্রাপ্ত ফলাফলের ব্যবহার করা"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:174
msgid "When using the plot_histogram() function it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object from ``plot_histogram()`` to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png``. The ``savefig()`` method takes a path so you can adjust the location and filename where you’re saving the output."
msgstr "plot\\_histogram() ফাংশন একটি ``matplotlib.Figure`` ফেরত পাঠায় যেটি দৃশ্যায়নটিকে বানায়। এই শিক্ষনীতে জুপিটার নোটবুক এই জিনিসটি চিনতে পারে এবং আমাদের জন্য ফলাফল ছবিটি এঁকে দেয়। কিন্তু জুপিটারের বাইরে এই সুবিধাটি নিজে থেকে আসে না। ``matplotlib.Figure`` এই ক্লাসটির মধ্যে ছবি আঁকার ও দৃশ্যায়নটি সংরক্ষণ করার দুই পদ্ধতিই লেখা আছে। প্রয়োজনমতো এর ফলাফলের উপর ``.show()`` ফাংশন ডেকে অন্য একটি উইন্ডোতে ছবিটি দেখা যেতে পারে(যদি matplotlib এর ব্যাকএন্ড ইন্টারেক্টিভ ঠিকঠাক সাজানো থাকে)। অথবা ``.savefig('out.png')`` ফাংশন ডেকে ছবিটি ``out.png`` নামে সংরক্ষণ করা যেতে পারে। ``savefig()`` পদ্ধতিটি একটি পথ নেয় যাতে কোথায় কি নামে ছবিটি সংরক্ষণ হচ্ছে সেটা আমরা নিয়ন্ত্রণ করতে পারি।"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:187
msgid "Plot State"
msgstr "লেখচিত্রের অবস্থা"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:198
msgid "In many situations you want to see the state of a quantum computer. This could be for debugging. Here we assume you have this state (either from simulation or state tomography) and the goal is to visualize the quantum state. This requires exponential resources, so we advise to only view the state of small quantum systems. There are several functions for generating different types of visualization of a quantum state"
msgstr "অনেকসময় আমরা কোয়ান্টাম কম্পিউটারের অবস্থা দেখতে চাই। প্রোগ্রাম ডিবাগ করতে এটা দরকার। এখানে আমরা অনুমান করছি যে আমাদের কাছে এই অবস্থাটি আছে (সিমুলেশন বা অবস্থার টোমোগ্রাফি থেকে) এবং লক্ষ্য হলো কোয়ান্টাম অবস্থার দৃশ্যায়ন করা। এটি প্রচুর পরিমাণ সময় ও অর্থ ব্যয় করে তাই সবসময় ছোট কোয়ান্টাম তন্ত্রের অবস্থা দেখা উচিত। এই অবস্থার বিভিন্ন রকমের দৃশ্যায়নের জন্য বিভিন্ন পদ্ধতি বানানো আছে"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:208
msgid "A quantum state is either a state matrix :math:`\\rho` (Hermitian matrix) or statevector :math:`|\\psi\\rangle` (complex vector). The state matrix is related to the statevector by"
msgstr "একটি কোয়ান্টাম অবস্থা হয় একটি অবস্থা ম্যাট্রিক্স :math:`\\rho` (হারমিসিয়ান ম্যাট্রিক্স) বা অবস্থা ভেক্টর :math:`|\\psi\\rangle` (জটিল ভেক্টর)। অবস্থা ম্যাট্রিক্স এবং অবস্থা ভেক্টরের সম্পর্ক হলো"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:210
msgid "\\rho = |\\psi\\rangle\\langle \\psi|,\n\n"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:212
msgid "and is more general as it can represent mixed states (positive sum of statevectors)"
msgstr "এবং এটি আরো সাধারণ কারণ এটি মিশ্র অবস্থা দেখাতে পারে ( অবস্থা ভেক্টরগুলির ধনাত্মক যোগফল)"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:214
msgid "\\rho = \\sum_k p_k |\\psi_k\\rangle\\langle \\psi_k |.\n\n"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:216
msgid "The visualizations generated by the functions are:"
msgstr "এই ফাংশনগুলির দ্বারা বানানো দৃশ্যায়নগুলি হলো:"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:218
msgid "``'plot_state_city'``: The standard view for quantum states where the real and imaginary (imag) parts of the state matrix are plotted like a city."
msgstr "``'plot_state_city'``: সাধারণত কোয়ান্টাম অবস্থার ছবিগুলো যেখানে অবস্থা ম্যাট্রিক্সের বাস্তব ও কাল্পনিক অংশগুলো শহরের বাড়ির মতো করে আঁকা।"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:220
msgid "``'plot_state_qsphere'``: The Qiskit unique view of a quantum state where the amplitude and phase of the state vector are plotted in a spherical ball. The amplitude is the thickness of the arrow and the phase is the color. For mixed states it will show different ``'qsphere'`` for each component."
msgstr "``'plot_state_qsphere'``: এটি Qiskit এর বানানো কোয়ান্টাম অবস্থার একটি অদ্বিতীয় রূপ বা ছবি যেখানে অবস্থা ভেক্টরের বিস্তার ও পর্যায় একটি গোলকের মধ্যে কয়েকটা তীরের মাধ্যমে আঁকা হয়। এই তীরগুলির বেধ হলো বিস্তার এবং রং হলো পর্যায় (সব পর্যায়ের আলাদা রং)। মিশ্র অবস্থার ক্ষেত্রে প্রতিটি অংশের জন্য আলাদা আলাদা ``'qsphere'`` দেখানো হয়।"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:222
msgid "``'plot_state_paulivec'``: The representation of the state matrix using Pauli operators as the basis :math:`\\rho=\\sum_{q=0}^{d^2-1}p_jP_j/d`."
msgstr "``'plot_state_paulivec'``: Pauli operators এর উপর ভিত্তি করে এটি অবস্থা ম্যাট্রিক্সের উপস্থাপনা :math:`\\rho=\\sum_{q=0}^{d^2-1}p_jP_j/d`."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:224
msgid "``'plot_state_hinton'``: Same as ``'city'`` but where the size of the element represents the value of the matrix element."
msgstr "``'plot_state_hinton'``: এটি ``'city'`` এর মতোই, শুধু এখানে উপাদানের আকার ম্যাট্রিক্সের উপাদানের মান নির্দেশ করে।"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:226
msgid "``'plot_bloch_multivector'``: The projection of the quantum state onto the single qubit space and plotting on a bloch sphere."
msgstr "``'plot_bloch_multivector'``: একটি কিউবিট স্থানে কোয়ান্টাম অবস্থার অভিক্ষেপ এবং ব্লক গোলকের (Bloch sphere) এর উপর লেখ আঁকা।"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:357
msgid "Here we see that there is no information about the quantum state in the single qubit space as all vectors are zero."
msgstr "এখানে আমরা দেখছি যে এক কিউবিট স্থানে কোয়ান্টাম অবস্থার কোনো তথ্য নেই, কারণ সব ভেক্টরের মান শুন্য।"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:369
msgid "Options when using state plotting functions"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:371
msgid "The various functions for plotting quantum states provide a number of options to adjust how the plots are rendered. Which options are available depends on the function being used."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:382
msgid "**plot_state_city()** options"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:384
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:418
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:451
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:498
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:592
msgid "**title** (str): a string that represents the plot title"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:385
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:419
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:452
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:485
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:499
msgid "**figsize** (tuple): figure size in inches (width, height)."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:386
msgid "**color** (list): a list of len=2 giving colors for real and imaginary components of matrix elements."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:416
msgid "**plot_state_hinton()** options"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:449
msgid "**plot_state_paulivec()** options"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:453
msgid "**color** (list or str): color of the expectation value bars."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:483
msgid "**plot_state_qsphere()** options"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:496
msgid "**plot_bloch_multivector()** options"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:530
msgid "Using the output from state plotting functions"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:532
msgid "When using any of the state plotting functions it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png`` in the current working directory. The ``savefig()`` method takes a path so you can adjust the location and filename where you’re saving the output."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:545
msgid "Plot Bloch Vector"
msgstr "ব্লক ভেক্টরের লেখচিত্র"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:547
msgid "A standard way of plotting a quantum system is using the Bloch vector. This only works for a single qubit and takes as input the Bloch vector."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:549
msgid "The Bloch vector is defined as :math:`[x = \\mathrm{Tr}[X \\rho], y = \\mathrm{Tr}[Y \\rho], z = \\mathrm{Tr}[Z \\rho]]`, where :math:`X`, :math:`Y`, and :math:`Z` are the Pauli operators for a single qubit and :math:`\\rho` is the state matrix."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:590
msgid "Options for plot_bloch_vector()"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:593
msgid "**figsize** (tuple): Figure size in inches (width, height)."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:624
msgid "Adjusting the output from plot_bloch_vector()"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:626
msgid "When using the ``plot_bloch_vector`` function it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png`` in the current working directory. The ``savefig()`` method takes a path so you can adjust the location and filename where you’re saving the output."
msgstr ""

