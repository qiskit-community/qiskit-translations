msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:25+0000\n"
"PO-Revision-Date: 2023-08-14 19:44\n"
"Last-Translator: \n"
"Language: pl\n"
"Language-Team: Polish\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && (n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pl\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/algorithms/04_vqd.po\n"
"X-Crowdin-File-ID: 9933\n"

#: ../../tutorials/algorithms/04_vqd.ipynb:10
msgid "This page was generated from `tutorials/algorithms/04_vqd.ipynb`__."
msgstr "Ta strona została wygenerowana z `tutorials/algorithms/04_vqd.ipynb`__."

#: ../../tutorials/algorithms/04_vqd.ipynb:9
msgid "Variational Quantum Deflation (VQD) Algorithm"
msgstr "Algorytm VQD (Variational Quantum Deflation)"

#: ../../tutorials/algorithms/04_vqd.ipynb:11
msgid "This notebook demostrates how to use Qiskit's implementation of the `Variational Quantum Deflation (VQD) <https://qiskit.org/documentation/stubs/qiskit.algorithms.eigensolvers.VQD.html>`__ algorithm for computing higher energy states of a Hamiltonian, as introduced in this `reference paper <https://arxiv.org/abs/1805.08138>`__."
msgstr ""

#: ../../tutorials/algorithms/04_vqd.ipynb:23
msgid "Introduction"
msgstr "Wprowadzenie"

#: ../../tutorials/algorithms/04_vqd.ipynb:25
msgid "VQD is a quantum algorithm that uses a variational technique to find the *k* eigenvalues of the Hamiltonian *H* of a given system."
msgstr ""

#: ../../tutorials/algorithms/04_vqd.ipynb:27
msgid "The algorithm computes excited state energies of generalized hamiltonians by optimizing over a modified cost function. Each successive eigenvalue is calculated iteratively by introducing an overlap term with all the previously computed eigenstates that must be minimized. This ensures that higher energy eigenstates are found."
msgstr ""

#: ../../tutorials/algorithms/04_vqd.ipynb:39
msgid "Complete working example for VQD"
msgstr ""

#: ../../tutorials/algorithms/04_vqd.ipynb:50
msgid "The first step of the VQD workflow is to create a qubit operator, ansatz and optimizer. For this example, you can use the H2 molecule, which should already look familiar if you have completed the previous VQE tutorials:"
msgstr ""

#: ../../tutorials/algorithms/04_vqd.ipynb:81
msgid "You can set up, for example, a ``TwoLocal`` ansatz with three qubits, and choose ``SLSQP`` as the optimization method."
msgstr ""

#: ../../tutorials/algorithms/04_vqd.ipynb:117
msgid "The next step of the workflow is to define the required primitives for running ``VQD``. This algorithm requires two different primitive instances: one ``Estimator`` for computing the expectation values for the \"VQE part\" of the algorithm, and one ``Sampler``. The sampler will be passed along to the ``StateFidelity`` subroutine that will be used to compute the cost for higher energy states. There are several methods that you can use to compute state fidelities, but to keep things simple, you can use the ``ComputeUncompute`` method already available in ``qiskit.algorithm.state_fidelities``."
msgstr "Następnym krokiem jest zdefiniowanie elementów podstawowych wymaganych do uruchomienia ``VQD``. Ten algorytm wymaga dwóch różnych instancji podstawowych: jedną typu ``Estimator`` do obliczania wartości oczekiwanych dla \"części VQE\" algorytmu, oraz jedną typu ``Sampler``. Sampler zostanie przekazany do podprocedury ``StateFidelity``, która zostanie użyta do obliczenia kosztów dla wyższych stanów energetycznych. Istnieje wiele metod, których można użyć do obliczenia wierności stanów, lecz najprostsze jest użycie metody ``ComputeUncompute`` już dostępnej w ``qiskit.algorithm.state_fidelities``."

#: ../../tutorials/algorithms/04_vqd.ipynb:144
msgid "In order to set up the VQD algorithm, it is important to define two additional inputs: the number of energy states to compute (``k``) and the ``betas`` defined in the original VQD paper. In this example, the number of states (``k``) will be set to three, which indicates that two excited states will be computed in addition to the ground state."
msgstr ""

#: ../../tutorials/algorithms/04_vqd.ipynb:146
msgid "The ``betas`` balance the contribution of each overlap term to the cost function, and they are an optional argument in the ``VQD`` construction. If not set by the user, they can be autoevaluated for input operators of type ``SparsePauliOp``. Please note that if you want to set your own ``betas``, you should provide a list of values of length ``k``."
msgstr "``betas`` równoważą udział każdego pokrywającego się terminu w funkcji kosztów i są dodatkowym argumentem w konstrukcji ``VQD``. Jeśli nie są ustawione przez użytkownika, mogą być automatycznie oceniane dla operatorów danych wejściowych typu ``SparsePauliOp``. Pamiętaj, że jeśli chcesz ustawić własne ``betas``, należy podać listę wartości o długości ``k``."

#: ../../tutorials/algorithms/04_vqd.ipynb:168
msgid "You are almost ready to run the VQD algorithm, but let's define a callback first to store intermediate values:"
msgstr "Jesteś prawie gotowy do uruchomienia algorytmu VQD, ale zdefiniujmy najpierw wywołanie zwrotne do zapisywania wartości pośrednich:"

#: ../../tutorials/algorithms/04_vqd.ipynb:196
msgid "You can finally instantiate ``VQD`` and compute the eigenvalues for the chosen operator."
msgstr "Możesz wreszcie utworzyć instancję ``VQD`` i obliczyć wartości własne dla wybranego operatora."

#: ../../tutorials/algorithms/04_vqd.ipynb:221
msgid "You can see the three state energies as part of the ``VQD`` result:"
msgstr "Jak widać, są trzy energie stanu jako część wyniku ``VQD``:"

#: ../../tutorials/algorithms/04_vqd.ipynb:266
msgid "And we can use the values stored by the callback to plot the energy convergence for each state:"
msgstr "Możemy też wykorzystać wartości zgromadzone przez wywołanie zwrotne, aby określić konwergencję energetyczną dla każdego stanu:"

#: ../../tutorials/algorithms/04_vqd.ipynb:312
msgid "This molecule can be solved exactly using the ``NumPyEigensolver`` class, which will give a reference value that you can compare with the ``VQD`` result:"
msgstr "Tę cząsteczkę można dokładnie określić przy użyciu klasy ``NumPyEigensolver``, która da wartość odniesienia. Wartość odniesienia można porównać z wynikiem ``VQD``:"

#: ../../tutorials/algorithms/04_vqd.ipynb:338
msgid "Let's see a comparison of the exact result with the previously computed ``VQD`` eigenvalues:"
msgstr "Zobaczmy porównanie dokładnego wyniku z wcześniej obliczonymi wartościami własnymi ``VQD``:"

#: ../../tutorials/algorithms/04_vqd.ipynb:387
msgid "As you can see, the result from VQD matches the values from the exact solution, and extends VQE to also compute excited states."
msgstr "Jak widać, wynik z VQD jest zgodny z wartościami z danego rozwiązania i rozszerza VQE, aby również obliczyć stany wzbudzone."

