msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:25+0000\n"
"PO-Revision-Date: 2023-08-14 19:09\n"
"Last-Translator: \n"
"Language: pl\n"
"Language-Team: Polish\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && (n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pl\n"
"X-Crowdin-File: /main/docs/locale/en/LC_MESSAGES/tutorials/algorithms/06_grover.po\n"
"X-Crowdin-File-ID: 9504\n"

#: ../../tutorials/algorithms/06_grover.ipynb:10
msgid "This page was generated from `tutorials/algorithms/06_grover.ipynb`__."
msgstr "Ta strona została wygenerowana z `tutorials/algorithms/06_grover.ipynb`__."

#: ../../tutorials/algorithms/06_grover.ipynb:9
msgid "Grover's Algorithm and Amplitude Amplification"
msgstr "Algorytm Grovera i wzmacnianie amplitudy"

#: ../../tutorials/algorithms/06_grover.ipynb:11
msgid "Grover's algorithm is one of the most famous quantum algorithms introduced by Lov Grover in 1996 [1]. It has initially been proposed for unstructured search problems, i.e. for finding a marked element in a unstructured database. However, Grover's algorithm is now a subroutine to several other algorithms, such as Grover Adaptive Search [2]. For the details of Grover's algorithm, please see `Grover's Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ in the Qiskit textbook."
msgstr "Algorytm Grovera, przedstawiony w 1996 roku przez Lova Grovera [1], jest jednym z najbardziej znanych algorytmów kwantowych. Początkowo miał on znaleźć zastosowanie w rozwiązywaniu problemów wyszukiwania niestrukturalnego, tj. znalezienia oznaczonego elementu w niestrukturalnej bazie danych. Jednak algorytm Grovera jest teraz podprocedurą do kilku innych algorytmów, takich jak wyszukiwanie adaptacyjne Grovera (ang. Grover Adaptive Search) [2]. Aby dowiedzieć się więcej na temat algorytmu Grovera, zapoznaj się z sekcją ` Algorytm Grovera <https://qiskit.org/textbook/ch-algorithms/grover.html>` __ w podręczniku Qiskit."

#: ../../tutorials/algorithms/06_grover.ipynb:13
msgid "Qiskit implements Grover's algorithm in the ``Grover`` class. This class also includes the generalized version, Amplitude Amplification [3], and allows setting individual iterations and other meta-settings to Grover's algorithm."
msgstr "Qiskit wdraża algorytm Grovera w klasie ` ` Grover ` ` `. Ta klasa obejmuje również uogólnioną wersję – wzmacnianie amplitudy [3], oraz umożliwia ustawianie indywidualnych iteracji i innych meta-ustawień dla algorytmu Grovera."

#: ../../tutorials/algorithms/06_grover.ipynb:15
#: ../../tutorials/algorithms/06_grover.ipynb:764
msgid "**References:**"
msgstr "**Źródła:**"

#: ../../tutorials/algorithms/06_grover.ipynb:17
msgid "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"
msgstr "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) (https://arxiv.org/abs/quant-ph/9605043), 1996, s. 212-219."

#: ../../tutorials/algorithms/06_grover.ipynb:19
msgid "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"
msgstr "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization (https://arxiv.org/abs/1912.04088)"

#: ../../tutorials/algorithms/06_grover.ipynb:21
msgid "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"
msgstr "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. Quantum Amplitude Amplification and Estimation. 2000. (http://arxiv.org/abs/quant-ph/0005055)"

#: ../../tutorials/algorithms/06_grover.ipynb:33
msgid "Grover's algorithm"
msgstr "Algorytm Grovera"

#: ../../tutorials/algorithms/06_grover.ipynb:35
msgid "Grover's algorithm uses the Grover operator :math:`\\mathcal{Q}` to amplify the amplitudes of the good states:"
msgstr "Algorytm Grovera używa operatora Grover :math:`\\mathcal{Q}` do wzmocnienia amplitud dobrych stanów:"

#: ../../tutorials/algorithms/06_grover.ipynb:37
msgid "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"
msgstr "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"

#: ../../tutorials/algorithms/06_grover.ipynb:42
msgid "Here, \\* :math:`\\mathcal{A}` is the initial search state for the algorithm, which is just Hadamards, :math:`H^{\\otimes n}` for the textbook Grover search, but can be more elaborate for Amplitude Amplification \\* :math:`\\mathcal{S_0}` is the reflection about the all 0 state"
msgstr "W tym przypadku, \\* :math:`\\mathcal{A}` jest początkowym stanem wyszukiwania algorytmu, który jest po prostu transformatą Hadamarda :math:`H^{\\otimes n}` dla algorytmu Grovera, ale może być bardziej szczegółowy dla wzmacniania amplitudy \\*:math:`\\mathcal{S_0}` jest odbiciem wszystkich stanów 0"

#: ../../tutorials/algorithms/06_grover.ipynb:44
msgid "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"
msgstr "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"

#: ../../tutorials/algorithms/06_grover.ipynb:49
msgid "\\* :math:`\\mathcal{S_f}` is the oracle that applies"
msgstr "stosuje się wyrocznię \\* :math:`\\mathcal{S_f}`"

#: ../../tutorials/algorithms/06_grover.ipynb:51
msgid "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"
msgstr "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"

#: ../../tutorials/algorithms/06_grover.ipynb:56
msgid "where :math:`f(x)` is 1 if :math:`x` is a good state and otherwise 0."
msgstr "gdzie :math:` f (x) ` jest 1, jeśli :math:` x ` jest dobrym stanem, a w przeciwnym razie: 0."

#: ../../tutorials/algorithms/06_grover.ipynb:58
msgid "In a nutshell, Grover's algorithm applies different powers of :math:`\\mathcal{Q}` and after each execution checks whether a good solution has been found."
msgstr "W skrócie, algorytm Grovera stosuje różne potęgi :math:`\\mathcal{Q}` i po każdym wykonaniu sprawdza, czy zostało znalezione poprawne rozwiązanie."

#: ../../tutorials/algorithms/06_grover.ipynb:61
msgid "Running Grover's algorithm"
msgstr "Uruchamianie algorytmu Grovera"

#: ../../tutorials/algorithms/06_grover.ipynb:63
msgid "To run Grover's algorithm with the ``Grover`` class, firstly, we need to specify an oracle for the circuit of Grover's algorithm. In the following example, we use ``QuantumCircuit`` as the oracle of Grover's algorithm. However, there are several other class that we can use as the oracle of Grover's algorithm. We talk about them later in this tutorial."
msgstr "Aby uruchomić algorytm Grovera z klasą ``Grover``, po pierwsze musimy określić wyrocznię dla obwodu algorytmu Grovera. W poniższym przykładzie użyjemy ``QuantumCircuit`` jako wyroczni algorytmu Grovera. Istnieje jednak kilka innych klas, które możemy wykorzystać jako wyrocznie algorytmu Grovera. Mówimy o nich w dalszej części tego kursu."

#: ../../tutorials/algorithms/06_grover.ipynb:65
msgid "Note that the oracle for ``Grover`` must be a *phase-flip* oracle. That is, it multiplies the amplitudes of the of \"good states\" by a factor of :math:`-1`. We explain later how to convert a *bit-flip* oracle to a phase-flip oracle."
msgstr "Zauważ, że wyrocznią dla ` ` Grover ` ` musi być * phase-flip *. Mnoży ona amplitudy \"dobrych stanów\" przez współczynnik :math:` -1 `. Później wyjaśniamy, jak przekształcić wyrocznię * bit-flip * w wyrocznię zmiany fazy."

#: ../../tutorials/algorithms/06_grover.ipynb:111
msgid "Then, we specify a backend and call the ``run`` method of ``Grover`` with a backend to execute the circuits. The returned result type is a ``GroverResult``."
msgstr "Następnie określamy backend i wywołujemy metodę ``run`` z ``Grover`` z backendem, aby wykonać obwód. Zwrócony typ wyniku to ``GroverResult``."

#: ../../tutorials/algorithms/06_grover.ipynb:113
msgid "If the search was successful, the ``oracle_evaluation`` attribute of the result will be ``True``. In this case, the most sampled measurement, ``top_measurement``, is one of the \"good states\". Otherwise, ``oracle_evaluation`` will be False."
msgstr "Jeśli wyszukiwanie zakończyło się pomyślnie, atrybut ``oracle_evaluation`` będzie miał wartość ``True``. W tym przypadku pomiar ``top_measurement``, w którym pobrano najwięcej próbek, jest jednym z \"dobrych stanów\". W przeciwnym razie ``oracle_evaluation`` będzie mieć wartość False."

#: ../../tutorials/algorithms/06_grover.ipynb:176
msgid "In the example, the result of ``top_measurement`` is ``11`` which is one of \"good state\". Thus, we succeeded to find the answer by using ``Grover``."
msgstr "W tym przykładzie wynikiem ``top_measurement`` jest ``11``, który jest jednym z „dobrych stanów”. W związku z tym udało nam się znaleźć odpowiedź używając ``Grover``."

#: ../../tutorials/algorithms/06_grover.ipynb:188
msgid "Using the different types of classes as the oracle of ``Grover``"
msgstr "Używanie różnych typów klas jako wyroczni ``Grover``"

#: ../../tutorials/algorithms/06_grover.ipynb:190
msgid "In the above example, we used ``QuantumCircuit`` as the oracle of ``Grover``. However, we can also use ``qiskit.quantum_info.Statevector`` as oracle. All the following examples are when :math:`|11\\rangle` is \"good state\""
msgstr "W powyższym przykładzie użyliśmy ` ` QuantumCircuit ` ` jako wyroczni` ` Grover ` `. Jednak możemy również użyć ` `qiskit.quantum_info.Statevector ` ` jako wyroczni. Wszystkie przykłady mają zastosowanie, gdy :math:` | 11\\rkąt ` jest „dobrym stanem”"

#: ../../tutorials/algorithms/06_grover.ipynb:253
msgid "Internally, the statevector is mapped to a quantum circuit:"
msgstr "Wewnętrznie wektor stanu jest połączony z obwodem kwantowym:"

#: ../../tutorials/algorithms/06_grover.ipynb:283
msgid "Qiskit allows for an easy construction of more complex oracles: \\* ``PhaseOracle``: for parsing logical expressions such as ``'~a | b'``. This is especially useful for solving 3-SAT problems and is shown in the accompanying `Grover Examples <07_grover_examples.ipynb>`__ tutorial."
msgstr "Qiskit pozwala na łatwą konstrukcję bardziej złożonych wyroczni: \\* ``PhaseOracle``: do analizy wyrażeń logicznych, takich jak ``'~a | b'``. Jest to szczególnie przydatne do rozwiązywania problemów 3-SAT, co można zobaczyć w sekcji `Algorytm Grovera – przykłady <07_grover_examples.ipynb>`."

#: ../../tutorials/algorithms/06_grover.ipynb:285
msgid "Here we'll use the ``PhaseOracle`` for the simple example of finding the state :math:`|11\\rangle`, which corresponds to ``'a & b'``."
msgstr "Tutaj użyjemy ``PhaseOracle`` dla prostego przykładu znalezienia stanu :math:` | 11\\rkąt `, który odpowiada ``'a & b'``."

#: ../../tutorials/algorithms/06_grover.ipynb:324
msgid "Which we observe that this oracle implements a phase flip when the state is :math:`|11\\rangle`"
msgstr "Obserwujemy, że ta wyrocznia implementuje odwrócenie fazy, gdy stan to :math:`|11\\rangle`"

#: ../../tutorials/algorithms/06_grover.ipynb:326
msgid "As mentioned above, Grover's algorithm requires a *phase-flip* oracle. A bit-flip oracle flips the state of an auxiliary qubit if the other qubits satisfy the condition. To use these types of oracles with Grover's we need to convert the bit-flip oracle to a phase-flip oracle by sandwiching the auxiliary qubit of the bit-flip oracle by :math:`X` and :math:`H` gates."
msgstr "Jak wspomniano powyżej, algorytm Grovera wymaga wyroczni *phase-flip*. Wyrocznia powodująca odwrócenie bitu (ang. bit-flip), odwraca qubit pomocniczy, jeśli pozostałe qubity spełniają warunek. Aby użyć tego typu wyroczni z algorytmem Grovera, musimy przekształcić wyrocznię odwracającą bit na wyrocznię odwracającą fazę, poprzez włożenie qubitu pomocniczego wyroczni odwracającej bit między bramki :math:`X` i :math:`H`."

#: ../../tutorials/algorithms/06_grover.ipynb:328
msgid "**Note:** This transformation from a bit-flip to a phase-flip oracle holds generally and you can use this to convert your oracle to the right representation."
msgstr "**Uwaga:** Ta transformacja z wyroczni odwracającej bit na wyrocznię odwracającą fazę ma charakter ogólny i można jej użyć do przekształcenia reprezentacji wyroczni."

#: ../../tutorials/algorithms/06_grover.ipynb:340
msgid "Amplitude amplification"
msgstr "Wzmacnianie amplitudy"

#: ../../tutorials/algorithms/06_grover.ipynb:342
msgid "Grover's algorithm uses Hadamard gates to create the uniform superposition of all the states at the beginning of the Grover operator :math:`\\mathcal{Q}`. If some information on the good states is available, it might be useful to not start in a uniform superposition but only initialize specific states. This, generalized, version of Grover's algorithm is referred to *Amplitude Amplification*."
msgstr "Algorytm Grovera wykorzystuje bramki Hadamarda do tworzenia jednolitej superpozycji wszystkich stanów na początku operatora Grover :math:` \\mathcal{Q}`. Jeśli dostępne są pewne informacje o dobrych stanach, być może warto nie zaczynać w jednolitej superpozycji, a jedynie zainicjalizować określone stany. Ta uogólniona wersja algorytmu Grovera jest określana jako *Wzmacnianie Amplitudy*."

#: ../../tutorials/algorithms/06_grover.ipynb:344
msgid "In Qiskit, the initial superposition state can easily be adjusted by setting the ``state_preparation`` argument."
msgstr "W Qiskit początkowy stan superpozycji może być łatwo skorygowany poprzez ustawienie argumentu ``state_preparation````."

#: ../../tutorials/algorithms/06_grover.ipynb:347
msgid "State preparation"
msgstr "Przygotowanie stanu"

#: ../../tutorials/algorithms/06_grover.ipynb:349
msgid "A ``state_preparation`` argument is used to specify a quantum circuit that prepares a quantum state for the start point of the amplitude amplification. By default, a circuit with :math:`H^{\\otimes n}` is used to prepare uniform superposition (so it will be Grover's search). The diffusion circuit of the amplitude amplification reflects ``state_preparation`` automatically."
msgstr "Argument ``state_preparation`` jest używany do określenia obwodu kwantowego, który przygotowuje stan kwantowy dla punktu początkowego amplitudy. Domyślnie układ z :math:`H^{\\otimes n}` jest używany do przygotowania jednolitej superpozycji (więc będzie to wyszukiwanie Grovera). Obwód dyfuzyjny wzmocnienia amplitudy odzwierciedla ``state_preparation`` automatycznie."

#: ../../tutorials/algorithms/06_grover.ipynb:464
msgid "Full flexibility"
msgstr "Pełna elastyczność"

#: ../../tutorials/algorithms/06_grover.ipynb:466
msgid "For more advanced use, it is also possible to specify the entire Grover operator by setting the ``grover_operator`` argument. This might be useful if you know more efficient implementation for :math:`\\mathcal{Q}` than the default construction via zero reflection, oracle and state preparation."
msgstr "Dla bardziej zaawansowanych zastosowań możliwe jest również określenie całego operatora Grover poprzez ustawienie argumentu ``grover_operator``. To może okazać się przydatne, jeśli znasz bardziej wydajną implementację dla :math:`\\mathcal{Q}` niż domyślna konstrukcja poprzez odbicie 0, przygotowanie wyroczni i stanu."

#: ../../tutorials/algorithms/06_grover.ipynb:468
msgid "The ``qiskit.circuit.library.GroverOperator`` can be a good starting point and offers more options for an automated construction of the Grover operator. You can for instance \\* set the ``mcx_mode`` \\* ignore qubits in the zero reflection by setting ``reflection_qubits`` \\* explicitly exchange the :math:`\\mathcal{S_f}, \\mathcal{S_0}` and :math:`\\mathcal{A}` operations using the ``oracle``, ``zero_reflection`` and ``state_preparation`` arguments"
msgstr "``qiskit.circuit.library.GroverOperator`` może być dobrym punktem wyjścia i oferuje więcej możliwości zautomatyzowanej budowy operatora Grover. Możesz na przykład \\* ustawić ``mcx_mode`` \\* zignorować wyjście z odbicia ustawiając ``reflection_qubits`` \\* zmienić wyłącznie operacje  :math:`\\mathcal{S_f}, \\mathcal{S_0}` i :math:`\\mathcal{A}`, używając argumentów ``oracle``, ``zero_reflection`` i ``state_preparation``"

#: ../../tutorials/algorithms/06_grover.ipynb:479
msgid "For instance, imagine the good state is a three qubit state :math:`|111\\rangle` but we used 2 additional qubits as auxiliary qubits."
msgstr "Załóżmy na przykład, że dobrym stanem jest ten stan trzech kubitów :math:`|111\\r`, ale użyliśmy 2 dodatkowych kubitów jako pomocniczych."

#: ../../tutorials/algorithms/06_grover.ipynb:511
msgid "Then, per default, the Grover operator implements the zero reflection on all five qubits."
msgstr "Wówczas operator Grover domyślnie wdraża odbicie zerowe dla wszystkich pięciu kubitów."

#: ../../tutorials/algorithms/06_grover.ipynb:543
msgid "But we know that we only need to consider the first three:"
msgstr "Wiemy jednak, że musimy wziąć pod uwagę tylko trzy pierwsze:"

#: ../../tutorials/algorithms/06_grover.ipynb:575
msgid "Dive into other arguments of ``Grover``"
msgstr "Poznaj inne argumenty ``Grover``"

#: ../../tutorials/algorithms/06_grover.ipynb:577
msgid "``Grover`` has arguments other than ``oracle`` and ``state_preparation``. We will explain them in this section."
msgstr "``Grover`` ma inne argumenty niż ``oracle`` i ``state_preparation``. Wyjaśnimy je w tej sekcji."

#: ../../tutorials/algorithms/06_grover.ipynb:580
msgid "Specifying ``good_state``"
msgstr "Określenie ``good_state``"

#: ../../tutorials/algorithms/06_grover.ipynb:582
msgid "``good_state`` is used to check whether the measurement result is correct or not internally. It can be a list of binary strings, a list of integer, ``Statevector``, and Callable. If the input is a list of bitstrings, each bitstrings in the list represents a good state. If the input is a list of integer, each integer represent the index of the good state to be :math:`|1\\rangle`. If it is a ``Statevector``, it represents a superposition of all good states."
msgstr "``good_state`` jest używany do sprawdzania czy wynik pomiaru jest wewtrzętnie poprawny, czy nie. Może to być lista ciągów binarnych, lista liczb całkowitych, ``Statevector``, i obiekt wywoływalny (ang. callable). Jeśli dane wejściowe są listą ciągów bitów, każdy ciąg bitów na liście reprezentuje dobry stan. Jeśli dane wejściowe są listą liczby całkowitych, każda liczba całkowita reprezentuje indeks stanu dobrego :math:`|1\\rangle`. Jeśli to ``Statevector``, reprezentują one superpozycję wszystkich dobrych stanów."

#: ../../tutorials/algorithms/06_grover.ipynb:756
msgid "The number of ``iterations``"
msgstr "Liczba ``iterations``"

#: ../../tutorials/algorithms/06_grover.ipynb:758
msgid "The number of repetition of applying the Grover operator is important to obtain the correct result with Grover's algorithm. The number of iteration can be set by the ``iteration`` argument of ``Grover``. The following inputs are supported: \\* an integer to specify a single power of the Grover operator that's applied \\* or a list of integers, in which all these different powers of the Grover operator are run consecutively and after each time we check if a correct solution has been found"
msgstr "Liczba powtórzeń zastosowania operatora Grovera jest ważna dla uzyskania poprawnego wyniku przy użyciu algorytmu Grovera. Liczba iteracji może być ustawiona przez argument ``iteration`` w ``Grover``. Obsługiwane są następujące dane: \\* liczba całkowita określająca pojedynczą moc operatora Grover \\* lub listę liczb całkowitych, w którym wszystkie te różne uprawnienia operatora Grover są wykonywane kolejno i po każdym razie sprawdzamy, czy znaleziono poprawne rozwiązanie."

#: ../../tutorials/algorithms/06_grover.ipynb:760
msgid "Additionally there is the ``sample_from_iterations`` argument. When it is ``True``, instead of the specific power in ``iterations``, a random integer between 0 and the value in ``iteration`` is used as the power Grover's operator. This approach is useful when we don't even know the number of solution."
msgstr "Istnieje jeszcze argument ``sample_from_iterations``. Kiedy wynosi on``True``, zamiast konkretnej mocy w ``iterations``, jako operator mocy używana jest losowa liczba całkowita pomiędzy 0 a wartością w ``iterations``. Jest to przydatne, gdy nie znamy nawet liczby rozwiązań."

#: ../../tutorials/algorithms/06_grover.ipynb:762
msgid "For more details of the algorithm using ``sample_from_iterations``, see [4]."
msgstr "Więcej szczegółów na temat algorytmu wykorzystującego ``sample_from_iterations`` znajdziesz w [4]."

#: ../../tutorials/algorithms/06_grover.ipynb:766
msgid "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:819
msgid "When the number of solutions is known, we can also use a static method ``optimal_num_iterations`` to find the optimal number of iterations. Note that the output iterations is an approximate value. When the number of qubits is small, the output iterations may not be optimal."
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:867
msgid "Applying ``post_processing``"
msgstr ""

#: ../../tutorials/algorithms/06_grover.ipynb:869
msgid "We can apply an optional post processing to the top measurement for ease of readability. It can be used e.g. to convert from the bit-representation of the measurement ``[1, 0, 1]`` to a DIMACS CNF format ``[1, -2, 3]``."
msgstr ""

