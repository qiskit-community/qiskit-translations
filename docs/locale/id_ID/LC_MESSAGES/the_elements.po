msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-12 15:01+0000\n"
"PO-Revision-Date: 2020-11-12 15:39\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/the_elements.po\n"
"X-Crowdin-File-ID: 7220\n"
"Language: id_ID\n"

#: ../../the_elements.rst:5
msgid "The Qiskit Elements"
msgstr "Elemen Qiskit"

#: ../../the_elements.rst:14
msgid "Terra"
msgstr "Terra"

#: ../../the_elements.rst:16
msgid "Terra, the ‘earth’ element, is the foundation on which the rest of Qiskit lies. Terra provides a bedrock for composing quantum programs at the level of circuits and pulses, to optimize them for the constraints of a particular device, and to manage the execution of batches of experiments on remote-access devices. Terra defines the interfaces for a desirable end-user experience, as well as the efficient handling of layers of optimization, pulse scheduling and backend communication."
msgstr "Terra, elemen 'bumi', adalah fondasi dari Qiskit. Terra menyediakan dasar untuk menyusun program-program kuantum pada tingkat sirkuit dan pulsa, dan mengoptimalkan mereka berdasarkan keterbatasan dari perangkat tertentu, dan untuk mengelola eksekusi eksperimen - eksperimen pada perangkat server komputer kuantum IBM. Terra memberikan pengalaman antarmuka yang diinginkan pengguna, serta penanganan yang efisien dari lapisan optimisasi, penjadwalan pulsa dan komunikasi backend."

#: ../../the_elements.rst:23
msgid "Qiskit Terra is organized in six main modules:"
msgstr "Qiskit Terra diatur dalam enam modul utama:"

#: ../../the_elements.rst:25
msgid ":mod:`qiskit.circuit` A quantum circuit is a model for quantum computing in which a computation is done by performing a sequence of quantum operations (usually gates) on a register of qubits. A quantum circuit usually starts with the qubits in the :math:`|0,…,0>` state and these gates evolve the qubits to states that cannot be efficiently represented on a classical computer. To extract information on the state a quantum circuit must have a measurement which maps the outcomes (possible random due to the fundamental nature of quantum systems) to classical registers which can be efficiently represented."
msgstr ":mod:` qiskit.sirkuit ` Sebuah sirkuit kuantum adalah model untuk komputasi kuantum di mana sebuah komputasi dilakukan dengan melakukan sekuens dari operasi kuantum (biasanya gerbang) pada sebuah register dari qubits. Sebuah sirkuit kuantum biasanya dimulai dengan kubit :math:` | 0,…, 0> ` state dan gerbang ini mengubah qubits ke keadaan yang tidak dapat direpresentasikan secara efisien pada komputer klasik. Untuk mengekstrak informasi tentang keadaan sirkuit kuantum harus memiliki pengukuran yang dapat memetakan hasil (kemungkinan acak karena sifat dasar dari sistem kuantum) ke register klasik yang dapat direpresentasikan secara efisien."

#: ../../the_elements.rst:34
msgid ":mod:`qiskit.pulse` A pulse schedule is set of pulses which are sent to a quantum experiment that are applied to a channel (experimental input line). This is a lower level than circuits and requires each gate in the circuit to be  represented as a set of pulses. At this level the experiments can be designed to reduce errors (dynamical decoupling, error mitigation, and optimal pulse shapes)."
msgstr ":mod:` qiskit.pulse ` Jadwal pulsa adalah kumpulan pulsa yang dikirim ke sebuah eksperimen kuantum yang diterapkan pada sebuah saluran (eksperimental input line). Ini adalah tingkat yang lebih rendah dari sirkuit dan membutuhkan setiap gerbang di sirkuit untuk direpresentasikan sebagai set pulsa. Pada tingkat ini percobaan dapat dirancang untuk mengurangi kesalahan (dekopling dinamik, mitigasi error, dan bentuk pulsa optimal)."

#: ../../the_elements.rst:40
msgid ":mod:`qiskit.transpiler` A major part of research on quantum computing is working out how to run a quantum circuits on real devices.  In these devices, experimental errors and decoherence introduce errors during computation. Thus, to obtain a robust implementation it is essential to reduce the number of gates and the overall running time of the quantum circuit. The transpiler introduces the concept of a pass manager to allow users to explore optimization and find better quantum circuits for their given algorithm. We call it a transpiler as the end result is still a circuit."
msgstr ":mod:` qiskit.transpiler ` Sebuah bagian utama dari penelitian pada komputasi kuantum adalah bagaimana untuk menjalankan sirkuit kuantum pada perangkat nyata.  Dalam perangkat ini, kesalahan eksperimen dan dekoherensi akan memberikan kesalahan selama komputasi. Dengan demikian, untuk mendapatkan implementasi yang kuat maka sangat penting untuk mengurangi jumlah gerbang dan keseluruhan waktu yang berjalan dari sirkuit kuantum. Transpiler memperkenalkan konsep manajer yang memungkinkan pengguna mengeksplor optimisasi dan menemukan sirkuit kuantum yang lebih baik untuk algoritma yang mereka berikan. Kami menyebutnya transpiler karena hasil akhirnya adalah masih sebuah sirkuit."

#: ../../the_elements.rst:49
msgid ":mod:`qiskit.providers` Once the user has made the circuits to run on the backend they need to have a convenient way of working with it. In Terra we do this using four parts:"
msgstr ":mod:` qiskit.providers ` Ketika pengguna telah membuat sirkuit untuk berjalan di backend mereka perlu memiliki cara yang mudah untuk bekerja dengan itu. Di Terra kita melakukan ini menggunakan empat bagian:"

#: ../../the_elements.rst:53
msgid "A ``Provider`` is an entity that implements the abstract base class :class:`~qiskit.providers.BaseProvider` and provides access to a group of different backends (for example, backends available through the `IBM Quantum Experience <https://quantum-computing.ibm.com>`__). It interacts with those backends to, for example, find out which ones are available, or retrieve an instance of a particular backend."
msgstr "` ` Provider ` ` adalah suatu entitas yang mengimplementasikan kelas dasar abstrak :class:` ~qiskit.providers.BaseProvider ` dan memberikan akses kepada sekelompok backends yang berbeda (sebagai contoh, backends yang tersedia melalui ` IBM Quantum Experience <https://quantum-computing.ibm.com>` __). Entitas ini berinteraksi dengan backends tersebut, misalnya, untuk mencari tahu mana backend yang tersedia, atau mengambil instance dari backend tertentu."

#: ../../the_elements.rst:59
msgid "A ``Backend`` is an entity that implements the abstract base class :class:`~qiskit.providers.BaseBackend` represent either a simulator or a real quantum computer and are responsible for running quantum circuits and returning results. They have a run method which takes in a `qobj` as input and returns a `BaseJob` object. This object allows asynchronous running of jobs for retrieving results from a backend when the job is completed."
msgstr "` ` Backend ` ` adalah entitas yang menerapkan kelas dasar abstrak, :class:` ~qiskit.providers.BaseBackend `, merepresentasikan sebuah simulator atau komputer kuantum dan bertanggung jawab untuk menjalankan sirkuit kuantum dan mengembalikan hasil kalkulasi. Entitas ini memiliki metode yang menggunakan ` qobj ` sebagai masukan dan menghasilkan keluaran sebuah ` BaseJob ` objek. Objek ini memungkinkan menjalankan pekerjaan secara asinkron untuk mendapatkan hasil dari backend ketika pekerjaan selesai."

#: ../../the_elements.rst:66
msgid "``Job`` instances are implementations of the abstract base class :class:`~qiskit.providers.BaseJob` and can be thought of as the “ticket” for a submitted job. They find out the execution’s state at a given point in time (for example, if the job is queued, running, or has failed) and also allow control over the job."
msgstr "Instance ``Job`` adalah implementasi dari kelas dasar abstrak :class:`~qiskit.providers.BaseJob` dan bisa dibayangkan sebagai suatu \"tiket\" untuk sebuah job (pekerjaan) yang telah dikirimkan. Instance ini akan memberitahukan keadaan eksekusi job pada setiap waktunya (misalnya, jika job sedang mengantri, berjalan, atau telah gagal) dan juga mengizinkan kontrol atas job tersebut."

#: ../../the_elements.rst:71
msgid ":class:`~qiskit.result.Result` Once the job has finished Terra allows the results to be obtained from the remote backends using ``result = job.result()``. This result object holds the quantum data and the most common way of interacting with it is by using ``result.get_counts(circuit)``. This method allows the user to get the raw counts from the quantum circuit and use them for more analysis with quantum information tools provided by Terra."
msgstr ":class:`~qiskit.result.Result` Setelah job selesai, Terra mengizinkan hasilnya diperoleh dari backend remote dengan menggunakan ``result = job.result()``. Objek hasil ini menyimpan data kuantum dan cara paling umum untuk berinteraksi dengannya adalah melalui penggunaan ``result.get_counts(circuit)``. Metode ini mengizinkan pengguna memperoleh perhitungan mentah dari sirkuit kuantum dan menggunakannya untuk analisis lebih dengan perangkat informasi kuantum yang disediakan oleh Terra."

#: ../../the_elements.rst:79
msgid ":mod:`qiskit.quantum_info` To perform more advanced algorithms and analysis of the circuits run on the quantum computer, it is important to have tools to implement simple quantum information tasks. These include methods to both estimate metrics and generate quantum states, operations, and channels."
msgstr ":mod:`qiskit.quantum_info` Untuk menjalankan lebih banyak algoritma dan analisis lanjutan dari sirkuit pada komputer kuantum, penting untuk memiliki perangkat pengimplementasian tugas informasi kuantum sederhana. Ini termasuk kedua metode untuk memperkirakan metrik maupun menghasilkan keadaan, operasi, dan kanal kuantum."

#: ../../the_elements.rst:85
msgid ":mod:`qiskit.visualization` In Terra we have many tools to visualize a quantum circuit. This allows a quick inspection of the quantum circuit to make sure it is what the user wanted to implement. There is a text, python and latex version. Once the circuit has run it is important to be able to view the output. There is a simple function (:func:`~qiskit.visualization.plot_histogram`) to plot the results from a quantum circuit including an interactive version. There is also a function :func:`~qiskit.visualization.plot_state` and :func:`~qiskit.visualization.plot_bloch_vector` that allow the plotting of a quantum state."
msgstr ":mod:`qiskit.visualization` Dalam Terra kita memiliki banyak perangkat untuk memvisualisasikan suatu sirkuit kuantum. Hal ini mengizinkan inspeksi/pemeriksaan cepat dari sirkuit kuantum untuk meyakinkannya sesuai dengan maksud pengguna. Terdapat versi text, python, dan latex. Setelah sirkuit berjalan, penting untuk mengetahui outputnya. Terdapat fungsi sederhana (:func:`~qiskit.visualization.plot_histogram`) untuk membuat plot hasil sirkuit kuantum termasuk versi interaktifnya. Terdapat pula fungsi :func:`~qiskit.visualization.plot_state` dan :func:`~qiskit.visualization.plot_bloch_vector` yang memungkinkan pembuatan plot suatu keadaan (state) kuantum."

#: ../../the_elements.rst:98
msgid "Aer"
msgstr "Aer"

#: ../../the_elements.rst:100
msgid "Aer, the ‘air’ element, permeates all Qiskit elements. To really speed up development of quantum computers we need better simulators, emulators and debuggers. Aer helps us understand the limits of classical processors by demonstrating to what extent they can mimic quantum computation. Furthermore, we can use Aer to verify that current and near-future quantum computers function correctly. This can be done by stretching the limits of simulation, and by simulating the effects of realistic noise on the computation."
msgstr "Aer, elemen 'udara', meresap ke semua elemen elemen Qiskit. Untuk mempercepat pengembangan komputer kuantum kita membutuhkan simulator, emulator, dan debugger yang lebih baik. Aer membantu kita memahami batas kemampuan prosesor klasik dengan mendemonstrasikan sejauh mana prosesor klasik dapat meniru komputasi kuantum. Selain itu, kita dapat menggunakan Aer untuk memverifikasi bahwa komputer kuantum, saat ini dan di masa depan yang cukup dekat, berfungsi dengan benar. Hal ini dapat dilakukan dengan memperluas batas kemampuan simulasi, dan dengan mensimulasikan efek gangguan (noise) yang realistis pada komputasi."

#: ../../the_elements.rst:107
msgid "Aer provides a high performance simulator framework for quantum circuits using the Qiskit software stack. It contains optimized C++ simulator backends for executing circuits compiled in Terra. Aer also provides tools for constructing highly configurable noise models for performing realistic noisy simulations of the errors that occur during execution on real devices."
msgstr "Aer menyediakan suatu kerangka simulator berkinerja tinggi untuk sirkuit kuantum menggunakan stack (susunan) perangkat lunak Qiskit. Aer mengandung backend simulator C++ yang teroptimisasi untuk mengeksekusi sirkuit-sirkuit yang terkompilasi dalam Terra. Aer juga menyediakan perangkat untuk menyusun model noise (iregularitas/error) yang dapat dikonfigurasikan dengan sangat baik untuk menjalankan simulasi sungguhan yang noisy (tidak ideal) dari error yang muncul selama eksekusinya pada perangkat sungguhan."

#: ../../the_elements.rst:113
msgid "Qiskit Aer includes three high performance simulator backends:"
msgstr "Qiskit Aer terdiri dari tiga backend simulator berkinerja tinggi:"

#: ../../the_elements.rst:126
msgid ":class:`~qiskit.providers.aer.QasmSimulator`"
msgstr ":class:`~qiskit.providers.aer.QasmSimulator`"

#: ../../the_elements.rst:116
msgid "Allows ideal and noisy multi-shot execution of qiskit circuits and returns counts or memory. There are multiple methods that can be used that simulate different circuits more efficiently. These include:"
msgstr "Memungkinkan eksekusi multi-shot yang ideal dan noisy dari sirkuit qiskit dan mengembalikan perhitungan atau memori. Ada beberapa metode yang dapat digunakan untuk mensimulasikan sirkuit berbeda secara lebih efisien. Metode-metode tersebut adalah:"

#: ../../the_elements.rst:120
msgid "*statevector* - Uses a dense statevector simulation."
msgstr "*statevector* - Menggunakan suatu simulasi statevector yang rapat."

#: ../../the_elements.rst:121
msgid "*stabilizer* - Uses a Clifford stabilizer state simulator that is only valid for Clifford circuits and noise models."
msgstr "*stabilizer* - Menggunakan sebuah simulator keadaan Clifford stabilizer yang hanya berlaku untuk sirkuit Clifford dan model noise."

#: ../../the_elements.rst:123
msgid "*extended_stabilizer* - Uses an approximate simulator that decomposes circuits into stabilizer state terms, the number of which grows with the number of non-Clifford gates."
msgstr "*extended_stabilizer* - Menggunakan simulator perkiraan yang mengurai sirkuit menjadi ke keadaan stabilizer, jumlah tersebut akan bertambah seiring dengan bertambahnya jumlah gerbang non-Clifford."

#: ../../the_elements.rst:126
msgid "*matrix_product_state* - Uses a Matrix Product State (MPS) simulator."
msgstr "*matrix_product_state* - Menggunakan suatu simulator Matrix Product State (MPS)."

#: ../../the_elements.rst:130
msgid ":mod:`~qiskit.providers.aer.StatevectorSimulator`"
msgstr ":mod:`~qiskit.providers.aer.StatevectorSimulator`"

#: ../../the_elements.rst:129
msgid "Allows ideal single-shot execution of qiskit circuits and returns the final statevector of the simulator after application."
msgstr "Memungkinkan eksekusi single-shot ideal suatu sirkuit qiskit dan mengembalikan statevector akhir dari simulator setelah pengaplikasiannya."

#: ../../the_elements.rst:136
msgid ":mod:`~qiskit.providers.aer.UnitarySimulator`"
msgstr ":mod:`~qiskit.providers.aer.UnitarySimulator`"

#: ../../the_elements.rst:133
msgid "Allows ideal single-shot execution of qiskit circuits and returns the final unitary matrix of the circuit itself. Note that the circuit cannot contain measure or reset operations for this backend."
msgstr "Memungkinkan eksekusi single-shot ideal dari sirkuit qiskit dan mengembalikan matriks satuan akhir dari sirkuit itu sendiri. Perlu diperhatikan bahwa sirkuit tersebut tidak dapat mengandung operasi pengukuran atau reset untuk backend ini."

#: ../../the_elements.rst:142
msgid "Ignis"
msgstr "Ignis"

#: ../../the_elements.rst:144
msgid "Ignis, the ‘fire’ element, is dedicated to fighting noise and errors and to forging a new path. This includes better characterization of errors, improving gates, and computing in the presence of noise. Ignis is meant for those who want to design quantum error correction codes, or who wish to study ways to characterize errors through methods such as tomography, or even to find a better way for using gates by exploring dynamical decoupling and optimal control."
msgstr "Ignis, elemen 'api', didedikasikan untuk melawan derau dan kesalahan dan untuk menciptakan jalan baru. Ini termasuk karakterisasi kesalahan yang lebih baik, meningkatkan gerbang, dan komputasi ketika terdapat derau. Ignis dimaksudkan untuk mereka yang ingin merancang kode koreksi kesalahan kuantum, atau yang ingin mempelajari cara untuk mengkarakterisasi kesalahan melalui metode seperti tomografi, atau bahkan untuk menemukan cara yang lebih baik untuk menggunakan gerbang dengan mengeksplorasi dekopling dinamis dan kontrol optimal."

#: ../../the_elements.rst:151
msgid "Ignis provides code for users to easily generate circuits for specific experiments given a minimal set of user input parameters. Ignis code contains three fundamental building blocks:"
msgstr "Ignis menyediakan kode bagi pengguna untuk dengan mudah menghasilkan sirkuit untuk percobaan yang spesifik dengan menggunakan jumlah input parameter yang minimum. Kode Ignis berisi tiga bagian dasar:"

#: ../../the_elements.rst:157
msgid "**Circuits**"
msgstr "**Sirkuit**"

#: ../../the_elements.rst:156
msgid "The circuits module provides the code to generate the list of circuits for a particular Ignis experiment based on a minimal set of user parameters. These are then run on Terra or Aer."
msgstr "Modul sirkuit menyediakan kode untuk menghasilkan daftar sirkuit untuk percobaan Ignis tertentu berdasarkan parameter input yang minimum. Modul sirkuit ini kemudian dijalankan pada Terra atau Aer."

#: ../../the_elements.rst:162
msgid "**Fitters**"
msgstr "**Fitter/Pencocok**"

#: ../../the_elements.rst:160
msgid "The results of an Ignis experiment are passed to the Fitters module where they are analyzed and fit according to the physics model describing the experiment. Fitters can plot the data plus fit and output a list of parameters."
msgstr "Hasil percobaan Ignis akan diberikan ke modul Fitters di mana hasil tersebut akan dianalisis dan dicocokkan menurut model fisika yang menjelaskan percobaan tersebut. Fitters dapat menggambar data, hail pencocokan dan menghasilkan daftar parameter."

#: ../../the_elements.rst:167
msgid "**Filters**"
msgstr "** Filters**"

#: ../../the_elements.rst:165
msgid "For certain Ignis experiments, the fitters can output a Filter object. Filters can be used to mitigate errors in other experiments using the calibration results of an Ignis experiment."
msgstr "Untuk percobaan Ignis tertentu, modul Fitters dapat menghasilkan objek Filter. Filter dapat digunakan untuk mengurangi kesalahan pada percobaan lain dengan menggunakan hasil kalibrasi dari percobaan Ignis."

#: ../../the_elements.rst:169
msgid "Qiskit Ignis is organized into three types of experiments that can be performed:"
msgstr "Qiskit Ignis diorganisasikan menjadi tiga jenis percobaan yang dapat dilakukan:"

#: ../../the_elements.rst:173
msgid ":mod:`qiskit.ignis.characterization` Characterization experiments are designed to measure parameters in the system such as noise parameters (T1, T2-star, T2), Hamiltonian parameters such as the ZZ interaction rate and control errors in the gates."
msgstr ":mod:`qiskit.ignis.characterization` Eksperimen karakterisasi dirancang untuk mengukur parameter dalam sistem seperti parameter derau (T1, T2-star, T2), parameter Hamiltonian seperti tingkat interaksi ZZ dan kesalahan kontrol pada gerbang."

#: ../../the_elements.rst:178
msgid ":mod:`qiskit.ignis.verification` Verification experiments are designed to verify gate and small circuit performance. Verification includes state and process tomography, quantum volume and randomized benchmarking (RB). These experiments provide the information to determine performance metrics such as the gate fidelity."
msgstr ":mod:`qiskit.ignis.verification` Percobaan verifikasi dirancang untuk memverifikasi gerbang dan kinerja sirkuit kecil. Verifikasi ini meliputi tomografi keadaan dan proses, volume kuantum dan tolok ukur acak (randomized benchmarking). Percobaan ini memberikan informasi untuk menentukan metrik kinerja seperti ketepatan gerbang."

#: ../../the_elements.rst:184
msgid ":mod:`qiskit.ignis.mitigation` Mitigation experiments run calibration circuits that are analyzed to generate mitigation routines that can be applied to arbitrary sets of results run on the same backend. Ignis code will generate a list of circuits that run calibration measurements. The results of these measurements will be processed by a Fitter and will output a Filter than can be used to apply mitigation to other results."
msgstr ":mod:`qiskit.ignis.mitigation` Percobaan Mitigasi menjalankan sirkuit kalibrasi yang dianalisis untuk menghasilkan rutinitas mitigasi yang dapat diterapkan pada sembarang kumpulan hasil yang dijalankan pada backend yang sama. Kode Ignis akan menghasilkan sirkuit - sirkuit yang menjalankan pengukuran kalibrasi. Hasil dari pengukuran ini akan diproses oleh sebuah Fitter dan akan mengeluarkan sebuah Filter yang dapat digunakan untuk menerapkan mitigasi ke hasil lain."

#: ../../the_elements.rst:197
msgid "Aqua"
msgstr "Aqua"

#: ../../the_elements.rst:199
msgid "Aqua, the ‘water’ element, is the element of life. To make quantum computing live up to its expectations, we need to find real-world applications. Aqua is where algorithms for quantum computers are built. These algorithms can be used to build applications for quantum computing. Aqua is accessible to domain experts in chemistry, optimization, finance and AI, who want to explore the benefits of using quantum computers as accelerators for specific computational tasks."
msgstr "Aqua, elemen 'air', adalah elemen kehidupan. Untuk membuat komputasi kuantum sesuai dengan ekspektasi, kita perlu menemukan aplikasi nyatanya. Aqua adalah tempat algoritma komputer kuantum dibangun. Algoritma ini dapat digunakan untuk membangun aplikasi komputasi kuantum. Aqua dapat diakses oleh para ahli di bidang kimia, optimasi, keuangan dan AI, yang ingin mengeksplorasi manfaat komputer kuantum sebagai akselerator untuk komputasi tertentu."

#: ../../the_elements.rst:207
msgid "Problems that may benefit from the power of quantum computing have been identified in numerous domains, such as Chemistry, Artificial Intelligence (AI), Optimization and Finance. Quantum computing, however, requires very specialized skills. To address the needs of the vast population of practitioners who want to use and contribute to quantum computing at various levels of the software stack, we have created Qiskit Aqua."
msgstr "Aplikasi yang mungkin mendapatkan manfaat dari menggunakan kekuatan komputasi kuantum telah teridentifikasi di banyak bidang, seperti Kimia, Artificial Intelligence (AI), Optimasi dan Keuangan. Akan tetapi, komputasi kuantum membutuhkan keterampilan yang sangat khusus. Untuk memenuhi kebutuhan praktisi dari berbagai bidang yang ingin menggunakan dan berkontribusi pada komputasi kuantum di berbagai tingkatan software, kami telah menciptakan Qiskit Aqua."

