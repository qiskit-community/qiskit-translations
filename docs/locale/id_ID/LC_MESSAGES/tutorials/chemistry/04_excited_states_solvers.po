msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-06 00:56+0000\n"
"PO-Revision-Date: 2021-03-06 01:21\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/chemistry/04_excited_states_solvers.po\n"
"X-Crowdin-File-ID: 9406\n"
"Language: id_ID\n"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:10
msgid "This page was generated from `tutorials/chemistry/04_excited_states_solvers.ipynb`__."
msgstr "Halaman ini dihasilkan dari ` tutorials/chemistry/02_vibronic_structure.ipynb ` __."

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/chemistry/04_excited_states_solvers.ipynb>`_."
msgstr "Jalankan secara interaktif di ' IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/chemistry/02_vibronic_structure.ipynb>` _."

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:9
msgid "Excited states solvers"
msgstr "Solver keadaan tereksitasi"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:21
msgid "Introduction"
msgstr "Pengantar"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:23
msgid "|51e90082d5764ff5becf2a0a19296d92|"
msgstr ""

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:25
msgid "In this tutorial we are going to discuss the excited states calculation interface of Qiskit Chemistry. The goal is to compute the excited states of a molecular Hamiltonian. This Hamiltonian can be electronic or vibronic. To know more about the preparation of the Hamiltonian, check out the Electronic structure and Vibronic structure tutorials."
msgstr "Dalam tutorial ini kita akan membahas tentang antarmuka kalkulasi keadaan tereksitasi di Qiskit Chemistry. Tujuannya adalah untuk menghitung keadaan tereksitasi dari Hamiltonian molekul. Hamiltonian ini dapat berupa elektronik atau vibronik. Untuk mengetahui lebih lanjut tentang preparasi Hamiltonian-nya, cek tutorial Struktur Elektronik dan Vibronik."

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:27
msgid "The first step is to define the molecular system. In the following we ask for the electronic part of a hydrogen molecule."
msgstr "Langkah pertama adalah mendefinisikan sistem molekuler. Berikut kita akan mencari bagian elektronik dari molekul hidrogen."

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:80
msgid "The Solver"
msgstr "Solver"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:82
msgid "Then we need to define a solver. The solver is the algorithm through which the ground state is computed."
msgstr "Kemudian kita perlu mendefinisikan solver. Solver adalah algoritma yang menghitung keadaan dasar."

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:84
msgid "Letâ€™s first start with a purely classical example: the NumPy eigensolver. This algorithm exactly diagonalizes the Hamiltonian. Although it scales badely, it can be used on small systems to check the results of the quantum algorithms. Here, we are only interested to look at eigenstates with a given number of particle. To compute only those states a filter function can be passed to the NumPy eigensolver. A default filter function is already implemented in Qiskit and can be used in this way:"
msgstr "Mari kita mulai dengan contoh klasik: eigensolver NumPy. Algoritma ini secara tepat mendiagonalisasi Hamiltonian. Meskipun berskala buruk, algoritma ini dapat digunakan pada sistem kecil untuk memeriksa hasil algoritma kuantum. Di sini, kita hanya tertarik untuk melihat keadaan eigen dengan sejumlah partikel tertentu. Untuk menghitung keadaan-keadaan tersebut, fungsi filter dapat diteruskan ke eigensolver NumPy. Fungsi filter default sudah diterapkan di Qiskit dan dapat digunakan sebagai berikut:"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:107
msgid "The excitation energies can also be accessed with the qEOM algorithm [arXiv preprint arXiv:1910.12890 (2019)]. The EOM method finds the excitation energies (differences in energy between the ground state and all :math:`n`\\ th excited states) by solving the following pseudo-eigenvalue problem."
msgstr "Energi eksitasi juga dapat diakses dengan algoritma qEOM [arXiv preprint arXiv:1910.12890 (2019)]. Metode EOM mencari energi eksitasi (perbedaan energi antara keadaan dasar dan semua :math:` n ` n keadaan tereksitasi) dengan memecahkan permasalahan pseudo-eigenvalue berikut."

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:109
msgid "\\begin{pmatrix}\n"
"    \\text{M} & \\text{Q}\\\\\n"
"    \\text{Q*} & \\text{M*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}\n"
"= E_{0n}\n"
"\\begin{pmatrix}\n"
"    \\text{V} & \\text{W}\\\\\n"
"    -\\text{W*} & -\\text{V*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}"
msgstr ""

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:130
msgid "with"
msgstr "dengan"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:132
msgid "M_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger},\\hat{\\text{H}}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"
msgstr ""

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:137
msgid "Q_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{H}}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"
msgstr ""

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:142
msgid "V_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"
msgstr ""

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:147
msgid "W_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_\\alpha}^{(\\alpha)})^{\\dagger}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"
msgstr ""

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:152
msgid "Although the previous equation can be solved classically, each matrix element must be measured on the quantum computer with the corresponding ground state. To use the qEOM as a solver in Qiskit, we have to define a ground state calculation first, explaining the algorithms how to find the ground state. With this the qEOM solver can be initialized:"
msgstr "Meskipun persamaan sebelumnya dapat diselesaikan secara klasik, setiap elemen matriks harus diukur pada komputer kuantum dengan keadaan dasar yang bersesuaian. Untuk menggunakan qEOM sebagai solver di Qiskit, kita harus menentukan penghitungan keadaan dasar terlebih dahulu, menjelaskan algoritma cara menemukan keadaan dasar. Dengan ini solver qEOM dapat diinisialisasi:"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:187
msgid "The calculation and results"
msgstr "Perhitungan dan hasilnya"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:189
msgid "The results are computed and printed"
msgstr "Hasilnya dihitung dan ditampilkan"

#: ../../tutorials/chemistry/04_excited_states_solvers.ipynb:420
msgid "One can see from these results that one state is missing from the NumPy results. The reason for this is because the spin is also used as a filter and only singlet states are shown. In the following we use a custom filter function to check consistently our results and only filter out states with incorrect number of particle (in this case the number of particle is 2)."
msgstr "Dapat dilihat dari hasil ini bahwa satu keadaan hilang dari hasil NumPy. Alasannya adalah karena spin juga digunakan sebagai filter dan hanya keadaan singlet yang ditampilkan. Berikut ini kita menggunakan fungsi filter kustom untuk memeriksa secara konsisten hasilnya dan hanya menyaring keadaan dengan jumlah partikel yang salah (dalam hal ini jumlah partikelnya 2)."

