msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-17 18:35+0000\n"
"PO-Revision-Date: 2021-05-17 19:51\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/chemistry/03_ground_state_solvers.po\n"
"X-Crowdin-File-ID: 9404\n"
"Language: id_ID\n"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:10
msgid "This page was generated from `tutorials/chemistry/03_ground_state_solvers.ipynb`__."
msgstr "Halaman ini dihasilkan dari ` tutorials/chemistry/02_vibronic_structure.ipynb ` __."

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/chemistry/03_ground_state_solvers.ipynb>`_."
msgstr "Jalankan secara interaktif di ' IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/chemistry/02_vibronic_structure.ipynb>` _."

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:9
msgid "Ground state solvers"
msgstr "Solver keadaan dasar (ground state)"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:21
msgid "Introduction"
msgstr "Pengantar"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:23
msgid "|142ccd3065e44bb5b5d9471800580c84|"
msgstr ""

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:25
msgid "In this tutorial we are going to discuss the ground state calculation interface of Qiskit Chemistry. The goal is to compute the ground state of a molecular Hamiltonian. This Hamiltonian can be electronic or vibronic. To know more about the preparation of the Hamiltonian, check out the Electronic structure and Vibronic structure tutorials."
msgstr "Dalam tutorial ini kita akan membahas tentang antarmuka kalkulasi keadaan dasar Qiskit Chemistry. Tujuannya adalah untuk menghitung keadaan dasar dari Hamiltonian molekul. Hamiltonian ini dapat berupa elektronik atau vibronik. Untuk mengetahui lebih lanjut tentang preparasi Hamiltonian-nya, cek tutorial Struktur Elektronik dan Vibronik."

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:27
msgid "The first step is to define the molecular system. In the following we ask for the electronic part of a hydrogen molecule."
msgstr "Langkah pertama adalah mendefinisikan sistem molekular. Berikut kita akan mencari bagian elektronik dari molekul hidrogen."

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:58
msgid "The Solver"
msgstr "Solver"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:60
msgid "Then we need to define a solver. The solver is the algorithm through which the ground state is computed."
msgstr "Kemudian kita perlu mendefinisikan solver. Solver adalah algoritma yang emnghitung keadaan dasar."

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:62
msgid "Let’s first start with a purely classical example: the NumPy minimum eigensolver. This algorithm exactly diagonalizes the Hamiltonian. Although it scales badly, it can be used on small systems to check the results of the quantum algorithms."
msgstr ""

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:85
msgid "To find the ground state we coul also use the Variational Quantum Eigensolver (VQE) algorithm. The VQE algorithms works by exchanging information between a classical and a quantum computer as depicted in the following figure."
msgstr "Untuk menemukan keadaan dasar kita dapat pula menggunakan algoritma Variational Quantum Eigensolver (VQE). Algoritme VQE bekerja dengan cara menukarkan informasi antara komputer klasik dan komputer kuantum seperti yang digambarkan dalam gambar berikut."

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:87
msgid "|8db57a59dc0544228b2c16d7f84903cb|"
msgstr ""

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:89
msgid "Let’s initialize a VQE solver."
msgstr "Mari kita menginisialisasi solver VQE."

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:116
msgid "To define the VQE solver one needs two essential elements:"
msgstr "Untuk menentukan solver VQE, diperlukan dua elemen esensial:"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:118
msgid "A variational form: here we use the Unitary Coupled Cluster (UCC) ansatz (see for instance [Physical Review A 98.2 (2018): 022322]). Since it is a chemistry standard, a factory is already available allowing a fast initialization of a VQE with UCC. The default is to use all single and double excitations. However, the excitation type (S, D, SD) as well as other parameters can be selected."
msgstr "Bentuk yang variasional: di sini kita menggunakan Unitary Coupled Cluster (UCC) ansatz (lihat pada misalnya [Physical Review A 98.2 (2018): 022322]). Karena ini adalah standar kimia, sebuah factory sudah tersedia yang memungkinkan inisialisasi cepat dari VQE dengan UCC. Default-nya adalah menggunakan semua eksitasi tunggal dan ganda. Namun, jenis eksitasi (S, D, SD) serta parameter lainnya dapat dipilih."

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:119
msgid "An initial state: the initial state of the qubits. In the factory used above, the qubits are initialized in the Hartree-Fock (see the electronic structure tutorial) initial state (the qubits corresponding to occupied MOs are :math:`|1\\rangle` and those corresponding to virtual MOs are :math:`|0\\rangle`."
msgstr "Sebuah keadaan awal: keadaan awal dari qubits. Pada factory yang digunakan di atas, qubit diinisialisasi dalam Hartree-Fock (lihat tutorial struktur elektronik) keadaan awal (qubits yang sesuai dengan MOs yang diduduki adalah :math:` | 1\\rangle ` dan yang sesuai dengan MOs virtual adalah :math:` | 0\\rangle `."

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:120
msgid "The backend: this is the quantum machine on which the right part of the figure above will be performed. Here we ask for the perfect quantum emulator (``statevector_simulator``)."
msgstr "Backend: ini adalah mesin kuantum yang akan dioperasikan pada bagian kanan dari gambar di atas. Di sini kita meminta emulator kuantum sempurna (` ` statevector_simulator ` `)."

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:122
msgid "One could also use any available variational form / initial state or even define one’s own. For instance,"
msgstr "Dapat pula digunakan bentuk variasional apa saja yang tersedia/keadaan awal atau bahkan mendefinisikannya sendiri. Sebagai contoh,"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:154
msgid "The calculation and results"
msgstr "Perhitungan dan hasilnya"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:156
msgid "We are now ready to run the calculation."
msgstr "Kita sekarang siap untuk menjalankan kalkulasi."

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:249
msgid "We can compare the VQE results to the NumPy exact solver and see that they match."
msgstr "Kita dapat membandingkan hasil VQE dengan solver eksak NumPy dan melihat bahwa mereka cocok."

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:340
msgid "Using a filter function"
msgstr "Menggunakan sebuah fungsi filter"

#: ../../tutorials/chemistry/03_ground_state_solvers.ipynb:351
msgid "Sometimes the true ground state of the Hamiltonian is not of interest because it lies in a different symmetry sector of the Hilbert space. In this case the NumPy eigensolver can take a filter function to return only the eigenstates with for example the correct number of particles. This is of particular importance in the case of vibronic structure calculations where the true ground state of the Hamiltonian is the vacuum state. A default filter function to check the number of particles is implemented in the different transformations and can be used as"
msgstr "Terkadang keadaan dasar sebenarnya dari Hamiltonian tidak menarik karena terletak pada sektor simetri yang berbeda dari ruang Hilbert. Dalam hal ini NumPy eigensolver dapat mengambil fungsi filter untuk mengembalikan hanya keadaan eigen-nya saja, misalnya jumlah partikel yang benar. Hal ini sangat penting dalam kasus perhitungan struktur vibronik di mana keadaan dasar sesungguhnya dari Hamiltonian adalah keadaan vakum. Fungsi filter bawaan untuk memeriksa jumlah partikel diimplementasikan dalam transformasi yang berbeda dan dapat digunakan sebagai"

