msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-02 15:42+0000\n"
"PO-Revision-Date: 2020-11-10 06:56\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/chemistry/1_programmatic_approach.po\n"
"X-Crowdin-File-ID: 9288\n"
"Language: id_ID\n"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:10
msgid "This page was generated from `tutorials/chemistry/1_programmatic_approach.ipynb`__."
msgstr "Halaman ini dibuat dari ` tutorials/chemistry/1_programmatic_approach.ipynb ` __."

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:9
msgid "**Qiskit Chemistry, Programmatic Approach**"
msgstr "**Qiskit Kimia, Pendekatan Program**"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:21
msgid "Introduction"
msgstr "Pengantar"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:23
msgid "This notebook illustrates how to use Qiskit Chemistry's programmatic APIs."
msgstr "Notebook ini menjelaskan cara menggunakan API programatik Qiskit Kimia."

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:25
msgid "In this notebook, we decompose the computation of the ground state energy of a molecule into 4 steps: 1. Define a molecule and get integrals from a computational chemistry driver (PySCF in this case) 2. Construct a Fermionic Hamiltonian and map it onto a qubit Hamiltonian 3. Instantiate and initialize dynamically-loaded algorithmic components, such as the quantum algorithm VQE, the optimizer and variational form it will use, and the initial\\_state to initialize the variational form 4. Run the algorithm on a quantum backend and retrieve the results"
msgstr "Pada notebook ini, kita menguraikan perhitungan energi terendah dari sebuah molekul menjadi 4 langkah: 1. Mendefinisikan molekul dan mendapatkan integral dari driver kimia komputasi (PySCF dalam hal ini) 2. Mendefinsikan Hamiltonian Fermionik dan memetannya ke dalam Hamiltonian qubit 3. Menginisiasi dan merealisasikan komponen algoritmik yang dimuat secara dinamis, seperti algoritma quantum VQE, pengoptimalan dan bentuk variasional yang akan digunakan, dan inisial\\_state untuk menginisiasi bentuk variasional 4. Jalankan algoritma pada backend quantum dan mengambil hasilnya"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:63
msgid "Step 1: Define a molecule"
msgstr "Langkah 1: Definisikan molekul"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:65
msgid "Here, we use LiH in the sto3g basis with the PySCF driver as an example. The ``molecule`` object records the information from the PySCF driver."
msgstr "Di sini, kita menggunakan LiH dalam basis sto3g dengan driver PySCF sebagai contoh. Objek ` ` molecule ` ` mencatat informasi dari driver PySCF."

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:91
msgid "Step 2: Prepare qubit Hamiltonian"
msgstr "Langkah 2: Siapkan Hamiltonian qubit"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:93
msgid "Here, we setup the **to-be-frozen** and **to-be-removed** orbitals to reduce the problem size when we map to the qubit Hamiltonian. Furthermore, we define the **mapping type** for the qubit Hamiltonian. For the particular ``parity`` mapping, we can further reduce the problem size."
msgstr "Di sini, kita mengatur orbital ** terbeku** dan ** terhilang** untuk mengurangi skala masalah ketika kita memetakannya ke Hamiltonian qubit. Selanjutnya, kita menentukan **jenis pemetaan** untuk Hamiltonian qubit. Untuk pemetaan ` ` parity``, kita dapat lebih lanjut mengurangi skala masalah."

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:409
msgid "We use the classical eigen decomposition to get the smallest eigenvalue as a reference."
msgstr "Kita menggunakan penguraian eigen klasik untuk mendapatkan nilai eigennilai terkecil sebagai referensi."

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:456
msgid "Step 3: Initiate and configure dynamically-loaded instances"
msgstr "Langkah 3: Memulai dan mengkonfigurasi instans yang dimuat secara dinamis"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:458
msgid "To run VQE with the UCCSD variational form, we require:"
msgstr "Untuk menjalankan VQE dengan bentuk variasional UCCSD, kita memerlukan:"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:460
msgid "VQE algorithm"
msgstr "Algoritma VQE"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:461
msgid "Classical Optimizer"
msgstr "Pengoptimasi Klasik"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:462
msgid "UCCSD variational form"
msgstr "Format variasional UCCSD"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:463
msgid "Prepare the initial state in the HartreeFock state"
msgstr "Siapkan keadaan dalam HartreeFock state"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:475
msgid "[Optional] Setup token to run the experiment on a real device"
msgstr "[Optional] token pengaturan untuk menjalankan percobaan pada perangkat nyata"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:477
msgid "If you would like to run the experiment on a real device, you need to setup your account first."
msgstr "Jika Anda ingin menjalankan percobaan pada perangkat yang sebenarnya, Anda perlu mengatur akun Anda terlebih dahulu."

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:479
msgid "Note: If you did not store your token yet, use ``IBMQ.save_account('MY_API_TOKEN')`` to store it first."
msgstr "Catatan: Jika Anda belum menyimpan token Anda, gunakan ` `IBMQ.save_account ('MY_API_TOKEN') ` ` untuk menyimpan token ini terlebih dahulu."

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:538
msgid "Step 4: Run algorithm and retrieve the results"
msgstr "Langkah 4: Jalankan algoritma dan ambil hasilnya"

#: ../../tutorials/chemistry/1_programmatic_approach.ipynb:549
msgid "results = vqe.run(quantum\\_instance) print('The computed ground state energy is: {:.12f}'.format(results.eigenvalue.real)) print('The total ground state energy is: {:.12f}'.format(results.eigenvalue.real + energy\\_shift + nuclear\\_repulsion\\_energy)) print(\"Parameters: {}\".format(results.optimal\\_point))"
msgstr "hasil = vqe.run( quantum\\_instance) cetak ('energi keadaan dasar yang dihitung adalah: {:.12f}' .format(results.eigenvalue.real)) cetak ('Total energi keadaan dasar adalah: {:.12f}' .format (results.eigenvalue.real + energy\\_shift + nuclear \\_repulsion\\_energi)) cetak (\" Parameter: {numOfOthers}. format(results.optimal\\_point))"

