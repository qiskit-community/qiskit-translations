msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-21 22:19+0000\n"
"PO-Revision-Date: 2022-04-21 23:35\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/simulators/1_aer_provider.po\n"
"X-Crowdin-File-ID: 9160\n"
"Language: id_ID\n"

#: ../../tutorials/simulators/1_aer_provider.ipynb:10
msgid "This page was generated from `tutorials/simulators/1_aer_provider.ipynb`__."
msgstr "Halaman ini dibuat dari ` tutorials/algoritms/01_grover.ipynb ` __."

#: ../../tutorials/simulators/1_aer_provider.ipynb:9
msgid "Simulators"
msgstr "Simulator"

#: ../../tutorials/simulators/1_aer_provider.ipynb:21
msgid "Introduction"
msgstr "Pengantar"

#: ../../tutorials/simulators/1_aer_provider.ipynb:23
msgid "This notebook shows how to import the *Qiskit Aer* simulator backend and use it to run ideal (noise free) Qiskit Terra circuits."
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:51
msgid "The Aer Provider"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:53
msgid "The ``Aer`` provider contains a variety of high performance simulator backends for a variety of simulation methods. The available backends on the current system can be viewed using ``Aer.backends``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:132
msgid "The Aer Simulator"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:134
msgid "The main simulator backend of the Aer provider is the ``AerSimulator`` backend. A new simulator backend can be created using ``Aer.get_backend('aer_simulator')``."
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:155
msgid "The default behavior of the ``AerSimulator`` backend is to mimic the execution of an actual device. If a ``QuantumCircuit`` containing measurements is run it will return a count dictionary containing the final values of any classical registers in the circuit. The circuit may contain gates, measurements, resets, conditionals, and other custom simulator instructions that will be discussed in another notebook."
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:167
msgid "Simulating a quantum circuit"
msgstr "Simulasikan sirkuit kuantum"

#: ../../tutorials/simulators/1_aer_provider.ipynb:169
msgid "The basic operation runs a quantum circuit and returns a counts dictionary of measurement outcomes. Here we run a simple circuit that prepares a 2-qubit Bell-state :math:`\\left|\\psi\\right\\rangle = \\frac{1}{2}\\left(\\left|0,0\\right\\rangle + \\left|1,1 \\right\\rangle\\right)` and measures both qubits."
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:213
msgid "Returning measurement outcomes for each shot"
msgstr "Mengembalikan hasil pengukuran untuk setiap shot"

#: ../../tutorials/simulators/1_aer_provider.ipynb:215
msgid "The ``QasmSimulator`` also supports returning a list of measurement outcomes for each individual shot. This is enabled by setting the keyword argument ``memory=True`` in the ``run``."
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:263
msgid "Aer Simulator Options"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:265
msgid "The ``AerSimulator`` backend supports a variety of configurable options which can be updated using the ``set_options`` method. See the ``AerSimulator`` API documentation for additional details."
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:277
msgid "Simulation Method"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:279
msgid "The ``AerSimulator`` supports a variety of simulation methods, each of which supports a different set of instructions. The method can be set manually using ``simulator.set_option(method=value)`` option, or a simulator backend with a preconfigured method can be obtained directly from the ``Aer`` provider using ``Aer.get_backend``."
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:281
msgid "When simulating ideal circuits, changing the method between the exact simulation methods ``stabilizer``, ``statevector``, ``density_matrix`` and ``matrix_product_state`` should not change the simulation result (other than usual variations from sampling probabilities for measurement outcomes)"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:338
msgid "Automatic Simulation Method"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:340
msgid "The default simulation method is ``automatic`` which will automatically select a one of the other simulation methods for each circuit based on the instructions in those circuits. A fixed simulation method can be specified by by adding the method name when getting the backend, or by setting the ``method`` option on the backend."
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:352
msgid "GPU Simulation"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:354
msgid "The ``statevector``, ``density_matrix`` and ``unitary`` simulators support running on a NVidia GPUs. For these methods the simulation device can also be manually set to CPU or GPU using ``simulator.set_options(device='GPU')`` backend option. If a GPU device is not available setting this option will raise an exception."
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:407
msgid "The ``Aer`` provider will also contain preconfigured GPU simulator backends if Qiskit Aer was installed with GPU support on a compatible system:"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:409
msgid "``aer_simulator_statevector_gpu``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:410
msgid "``aer_simulator_density_matrix_gpu``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:411
msgid "``aer_simulator_unitary_gpu``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:413
msgid "*Note: The GPU version of Aer can be installed using* ``pip install qiskit-aer-gpu``."
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:425
msgid "Simulation Precision"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:427
msgid "One of the available simulator options allows setting the float precision for the ``statevector``, ``density_matrix``, ``unitary`` and ``superop`` methods. This is done using the ``set_precision=\"single\"`` or ``precision=\"double\"`` (default) option:"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:478
msgid "Setting the simulation precision applies to both CPU and GPU simulation devices. Single precision will halve the required memory and may provide performance improvements on certain systems."
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:490
msgid "Custom Simulator Instructions"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:502
msgid "Saving the simulator state"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:504
msgid "The state of the simulator can be saved in a variety of formats using custom simulator instructions."
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:507
#: ../../tutorials/simulators/1_aer_provider.ipynb:737
msgid "Circuit method"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:507
#: ../../tutorials/simulators/1_aer_provider.ipynb:737
msgid "Description"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:507
#: ../../tutorials/simulators/1_aer_provider.ipynb:737
msgid "Supported Methods"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:509
msgid "``save_state``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:509
msgid "Save the simulator state in the native format for the simulation method"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:509
msgid "All"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:511
msgid "``save_statevector``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:511
msgid "Save the simulator state as a statevector"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:511
msgid "``\"automatic\"``, ``\"statevector\"``, ``\"matrix_product_state\"``, ``\"extended_stabilizer\"``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:513
msgid "``save_stabilizer``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:513
msgid "Save the simulator state as a Clifford stabilizer"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:513
#: ../../tutorials/simulators/1_aer_provider.ipynb:741
msgid "``\"automatic\"``, ``\"stabilizer\"``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:515
msgid "``save_density_matrix``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:515
msgid "Save the simulator state as a density matrix"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:515
msgid "``\"automatic\"``, ``\"statevector\"``, ``\"matrix_product_state\"``, ``\"density_matrix\"``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:517
msgid "``save_matrix_product_state``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:517
msgid "Save the simulator state as a a matrix product state tensor"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:517
msgid "``\"automatic\"``, ``\"matrix_product_state\"``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:519
msgid "``save_unitary``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:519
msgid "Save the simulator state as unitary matrix of the run circuit"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:519
msgid "``\"automatic\"``, ``\"unitary\"``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:521
msgid "``save_superop``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:521
msgid "Save the simulator state as superoperator matrix of the run circuit"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:521
#: ../../tutorials/simulators/1_aer_provider.ipynb:747
msgid "``\"automatic\"``, ``\"superop\"``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:524
msgid "Note that these instructions are only supported by the Aer simulator and will result in an error if a circuit containing them is run on a non-simulator backend such as an IBM Quantum device."
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:536
msgid "Saving the final statevector"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:538
msgid "To save the final statevector of the simulation we can append the circuit with the ``save_statevector`` instruction. Note that this instruction should be applied *before* any measurements if we do not want to save the collapsed post-measurement state"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:582
msgid "Saving the circuit unitary"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:584
msgid "To save the unitary matrix for a ``QuantumCircuit`` we can append the circuit with the ``save_unitary`` instruction. Note that this circuit cannot contain any measurements or resets since these instructions are not supported on for the ``\"unitary\"`` simulation method"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:654
msgid "Saving multiple states"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:656
msgid "We can also apply save instructions at multiple locations in a circuit. Note that when doing this we must provide a unique label for each instruction to retrieve them from the results"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:732
msgid "Setting the simulator to a custom state"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:734
msgid "The ``AerSimulator`` allows setting a custom simulator state for several of its simulation methods using custom simulator instructions"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:739
msgid "``set_statevector``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:739
msgid "Set the simulator state to the specified statevector"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:739
msgid "``\"automatic\"``, ``\"statevector\"``, ``\"density_matrix\"``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:741
msgid "``set_stabilizer``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:741
msgid "Set the simulator state to the specified Clifford stabilizer"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:743
msgid "``set_density_matrix``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:743
msgid "Set the simulator state to the specified density matrix"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:743
msgid "``\"automatic\"``, ``\"density_matrix\"``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:745
msgid "``set_unitary``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:745
msgid "Set the simulator state to the specified unitary matrix"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:745
msgid "``\"automatic\"``, ``\"unitary\"``, ``\"superop\"``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:747
msgid "``set_superop``"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:747
msgid "Set the simulator state to the specified superoperator matrix"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:750
msgid "**Notes:** \\* These instructions must be applied to all qubits in a circuit, otherwise an exception will be raised. \\* The input state must also be a valid state (statevector, density matrix, unitary etc) otherwise an exception will be raised. \\* These instructions can be applied at any location in a circuit and will override the current state with the specified one. Any classical register values (e.g. from preceding measurements) will be unaffected \\* Set state instructions are only supported by the Aer simulator and will result in an error if a circuit containing them is run on a non-simulator backend such as an IBM Quantum device."
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:763
msgid "Setting a custom statevector"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:765
msgid "The ``set_statevector`` instruction can be used to set a custom ``Statevector`` state. The input statevector must be valid (:math:`|\\langle\\psi|\\psi\\rangle|=1`)"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:829
msgid "Using the initialize instruction"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:831
msgid "It is also possible to initialize the simulator to a custom statevector using the ``initialize`` instruction. Unlike the ``set_statevector`` instruction this instruction is also supported on real device backends by unrolling to reset and standard gate instructions."
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:891
msgid "Setting a custom density matrix"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:893
msgid "The ``set_density_matrix`` instruction can be used to set a custom ``DensityMatrix`` state. The input density matrix must be valid (:math:`Tr[\\rho]=1, \\rho \\ge 0`)"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:972
msgid "Setting a custom stabilizer state"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:974
msgid "The ``set_stabilizer`` instruction can be used to set a custom ``Clifford`` stabilizer state. The input stabilizer must be a valid ``Clifford``."
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:1035
msgid "Setting a custom unitary"
msgstr ""

#: ../../tutorials/simulators/1_aer_provider.ipynb:1037
msgid "The ``set_unitary`` instruction can be used to set a custom unitary ``Operator`` state. The input unitary matrix must be valid (:math:`U^\\dagger U=\\mathbb{1}`)"
msgstr ""

