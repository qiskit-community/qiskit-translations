msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-08 17:23+0000\n"
"PO-Revision-Date: 2021-03-07 01:50\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/simulators/1_aer_provider.po\n"
"X-Crowdin-File-ID: 9160\n"
"Language: id_ID\n"

#: ../../tutorials/simulators/1_aer_provider.ipynb:10
msgid "This page was generated from `tutorials/simulators/1_aer_provider.ipynb`__."
msgstr "Halaman ini dibuat dari ` tutorials/algoritms/01_grover.ipynb ` __."

#: ../../tutorials/simulators/1_aer_provider.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/simulators/1_aer_provider.ipynb>`_."
msgstr "Jalankan secara interaktif dalam ' IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/simulators/1_aer_provider.ipynb>` _."

#: ../../tutorials/simulators/1_aer_provider.ipynb:9
msgid "Simulators"
msgstr "Simulator"

#: ../../tutorials/simulators/1_aer_provider.ipynb:21
msgid "Introduction"
msgstr "Pengantar"

#: ../../tutorials/simulators/1_aer_provider.ipynb:23
msgid "This notebook shows how to import *Qiskit Aer* simulator backends and use them to execute ideal (noise free) Qiskit Terra circuits."
msgstr "Notebook ini menunjukkan cara mengimpor simulator backend *Qiskit Aer * dan menggunakannya untuk mengeksekusi sirkuit dari Qiskit Terra yang ideal (tanpa derau)."

#: ../../tutorials/simulators/1_aer_provider.ipynb:50
msgid "Qiskit Aer simulator backends"
msgstr "Simulator backend Qiskit Aer"

#: ../../tutorials/simulators/1_aer_provider.ipynb:52
msgid "Qiskit Aer currently includes three high performance simulator backends: \\* ``QasmSimulator``: Allows ideal and noisy multi-shot execution of qiskit circuits and returns counts or memory \\* ``StatevectorSimulator``: Allows ideal single-shot execution of qiskit circuits and returns the final statevector of the simulator after application \\* ``UnitarySimulator``: Allows ideal single-shot execution of qiskit circuits and returns the final unitary matrix of the circuit itself. Note that the circuit cannot contain measure or reset operations for this backend"
msgstr "Qiskit Aer merangkup tiga simulator backend berkinerja tinggi: \\ * ` ` QasmSimulator ` `: untuk simulasi ideal dan eksekusi sirkuit qiskit dengan noise dan menghasilkan perhitungan atau memori \\ * ` ` StatevectorSimulator ` `: untuk simulasi ideal sekali tembak eksekusi sirkuit qiskit dan mengembalikan statevektor final dari simulator \\ * ` ` ` UnitarySimulator ` `: untuk simulasi ideal eksekusi sirkuit qiskit sekali tembak dan mengembalikan matrik unitary final dari sirkuit itu sendiri. Perhatikan bahwa sirkuit tidak bisa memiliki pengukuran atau operasi reset operasi di backend ini"

#: ../../tutorials/simulators/1_aer_provider.ipynb:55
msgid "These backends are found in the ``Aer`` provider with the names ``qasm_simulator``, ``statevector_simulator`` and ``unitary_simulator``, respectively."
msgstr "Backends ini ditemukan di ` ` Aer ` ` provider dengan nama ` ` qasm_simulator ` `, ` ` statevector_simulator ` ` dan ` ` unitary_simulator ` `."

#: ../../tutorials/simulators/1_aer_provider.ipynb:105
msgid "The simulator backends can also be directly imported from ``qiskit.providers.aer``"
msgstr "Backend Simulator juga dapat langsung diimpor dari ` `qiskit.providers.aer ` `"

#: ../../tutorials/simulators/1_aer_provider.ipynb:127
msgid "QasmSimulator"
msgstr "QasmSimulator"

#: ../../tutorials/simulators/1_aer_provider.ipynb:129
msgid "The ``QasmSimulator`` backend is designed to mimic an actual device. It executes a Qiskit ``QuantumCircuit`` and returns a count dictionary containing the final values of any classical registers in the circuit. The circuit may contain *gates*, *measurements*, *resets*, *conditionals*, and other advanced simulator options that will be discussed in another notebook."
msgstr "Backend ` ` QasmSimulator ` ` ` dirancang untuk meniru perangkat yang sebenarnya. Dia mengeksekusi sebuah ` ` QuantumCircuit ` ` Qiskit dan mengembalikan satu dictionary hitungan yang berisi nilai akhir dari setiap register klasik dalam sirkuit. Sirkuit ini mungkin berisi * gates*, * pengukuran *, * reset*, * konditional*, dan pilihan simulator canggih lainnya yang akan dibahas di notebook lain."

#: ../../tutorials/simulators/1_aer_provider.ipynb:132
#: ../../tutorials/simulators/1_aer_provider.ipynb:285
msgid "Simulating a quantum circuit"
msgstr "Simulasikan sirkuit kuantum"

#: ../../tutorials/simulators/1_aer_provider.ipynb:134
#: ../../tutorials/simulators/1_aer_provider.ipynb:287
msgid "The basic operation executes a quantum circuit and returns a counts dictionary of measurement outcomes. Here we execute a simple circuit that prepares a 2-qubit Bell-state :math:`|\\psi\\rangle = \\frac{1}{2}(|0,0\\rangle + |1,1 \\rangle)` and measures both qubits."
msgstr "Operasi dasar menjalankan sebuah sirkuit kuantum dan mengembalikan sebuah dictionary hitungan hasil pengukuran. Di sini kita jalankan sebuah sirkuit sederhana yang mempersiapkan sebuah 2-qubit Bell-state :math:`| \\psi\\rangle = \\frac{1}{2}(| 0,0\\rangle + | 1,1 \\rangle) ` dan mengukur kedua qubit."

#: ../../tutorials/simulators/1_aer_provider.ipynb:177
msgid "Returning measurement outcomes for each shot"
msgstr "Mengembalikan hasil pengukuran untuk setiap shot"

#: ../../tutorials/simulators/1_aer_provider.ipynb:179
msgid "The ``QasmSimulator`` also supports returning a list of measurement outcomes for each individual shot. This is enabled by setting the keyword argument ``memory=True`` in the ``assemble`` or ``execute`` function."
msgstr "` ` QasmSimulator ` ` juga mendukung pengembalian hasil pengukuran untuk setiap shot individual. Ini diaktifkan dengan mengatur argumen kata kunci ` ` memory=True ` ` dalam fungsi ` ` assemble ` ` atau ` ` execute` `."

#: ../../tutorials/simulators/1_aer_provider.ipynb:232
#: ../../tutorials/simulators/1_aer_provider.ipynb:374
msgid "Starting simulation with a custom initial state"
msgstr "Memulai simulasi dari state awal kustom"

#: ../../tutorials/simulators/1_aer_provider.ipynb:234
msgid "The ``QasmSimulator`` allows setting a custom initial statevector for the simulation. This means that all experiments in a Qobj will be executed starting in a state :math:`|\\psi\\rangle` rather than the all zero state :math:`|0,0,..0\\rangle`. The custom state may be set in the circuit using the ``initialize`` method."
msgstr "` ` ` QasmSimulator ` ` memungkinkan pengaturan kustom awal statevector untuk simulasi. Ini berarti bahwa semua percobaan dalam sebuah Qobj akan dijalankan mulai dari state :math:` | \\psi\\rangle ` dan bukan dari state semual nol :math:` | 0,0, .. 0\\rangle `. State kustom dapat diatur di sirkuit dengan menggunakan metode ` ` initialize ` `."

#: ../../tutorials/simulators/1_aer_provider.ipynb:236
msgid "**Note:** \\* The initial statevector must be a valid quantum state :math:`|\\langle\\psi|\\psi\\rangle|=1`. If not, an exception will be raised. \\* The simulator supports this option directly for efficiency, but it can also be unrolled to standard gates for execution on actual devices."
msgstr "** Catatan:** \\ * Statevector awal harus berupa state kuantum yang valid :math:` | \\langle\\psi | \\psi\\rangle | =1 `. Jika tidak, suatu pengecualian akan dikeluarkan. \\ * Simulator mendukung opsi ini secara langsung untuk efisiensi, tetapi juga dapat diterjemahkan ke gate standar untuk eksekusi pada perangkat yang sebenarnya."

#: ../../tutorials/simulators/1_aer_provider.ipynb:238
msgid "We now demonstrate this functionality by setting the simulator to be initialized in the final Bell-state of the previous example:"
msgstr "Kami sekarang menunjukkan fungsi ini dengan setting simulator yang diinisialisasi dengan Bell-state dari contoh sebelumnya:"

#: ../../tutorials/simulators/1_aer_provider.ipynb:280
msgid "StatevectorSimulator"
msgstr "StatevectorSimulator"

#: ../../tutorials/simulators/1_aer_provider.ipynb:282
msgid "The ``StatevectorSimulator`` executes a single shot of a Qiskit ``QuantumCircuit`` and returns the final quantum statevector of the simulation. The circuit may contain *gates*, and also *measurements*, *resets*, and *conditional* operations."
msgstr "` ` StatevectorSimulator ` ` mengeksekusi satu shot dari sebuah ` ` QuantumCircuit ` ` Qiskit dan mengembalikan statevector kuantum akhir dari simulasi. Sirkuit ini mungkin berisi operasi * gates*, dan juga * measurements (pengukuran), * resets*, dan * kondisional *."

#: ../../tutorials/simulators/1_aer_provider.ipynb:329
msgid "Simulating a quantum circuit with measurement"
msgstr "Simulasi sebuah sirkuit kuantum dengan measurement"

#: ../../tutorials/simulators/1_aer_provider.ipynb:331
msgid "Note that if a circuit contains *measure* or *reset* the final statevector will be a conditional statevector *after* simulating wave-function collapse to the outcome of a measure or reset. For the Bell-state circuit this means the final statevector will be *either* :math:`|0,0\\rangle` *or* :math:`|1, 1\\rangle`."
msgstr "Perhatikan bahwa jika sebuah sirkuit berisi * measure * atau * reset * statevector akhir akan menjadi statevector kondisional * setelah * mensimulasikan fungsi gelombang yang kolaps ke hasil dari ukuran atau reset. Untuk sirkuit Bell-state ini berarti statevector akhir akan * satu dari * :math:` | 0,0\\rangle ` * atau * :math:` | 1, 1\\rangle `."

#: ../../tutorials/simulators/1_aer_provider.ipynb:376
msgid "Like the ``QasmSimulator``, the ``StatevectorSimulator`` also allows setting a custom initial statevector for the simulation. Here we run the previous initial statevector example on the ``StatevectorSimulator`` and initialize it to the Bell state."
msgstr "Seperti ` ` ` QasmSimulator ` `, ` ` StatevectorSimulator ` ` juga memungkinkan pengaturan kustom awal statevector untuk simulasi. Di sini kita menjalankan contoh tadi di ` ` StatevectorSimulator ` ` dan menginisialisasinya dengan Bell state."

#: ../../tutorials/simulators/1_aer_provider.ipynb:417
msgid "Unitary Simulator"
msgstr "Simulator Unitary"

#: ../../tutorials/simulators/1_aer_provider.ipynb:419
msgid "The ``UnitarySimulator`` constructs the unitary matrix for a Qiskit ``QuantumCircuit`` by applying each gate matrix to an identity matrix. The circuit may only contain *gates*, if it contains *resets* or *measure* operations an exception will be raised."
msgstr "` ` UnitarySimulator ` ` menbuat matrik unitary dari ` ` QuantumCircuit ` ` Qiskit dengan menerapkan setiap matrik gate ke matriks identitas. Sirkuit ini hanya bisa berisi * gates*, jika berisi operasi * reset * atau * measure * pengecualian akan dikeluarkan."

#: ../../tutorials/simulators/1_aer_provider.ipynb:422
msgid "Simulating a quantum circuit unitary"
msgstr "Mensimulasikan sebuah sirkuit kuantum unitary"

#: ../../tutorials/simulators/1_aer_provider.ipynb:424
msgid "For this example we will return the unitary matrix corresponding to the previous examples circuit which prepares a bell state."
msgstr "Untuk contoh ini kita akan menghitung matrik unitary yang sesuai dengan sirkuit pada contoh sebelumnya yang menyiapkan sebuah Bell state."

#: ../../tutorials/simulators/1_aer_provider.ipynb:492
msgid "Setting a custom initial unitary"
msgstr "Mengatur sebuah kustom awal unitary"

#: ../../tutorials/simulators/1_aer_provider.ipynb:494
msgid "We may also set an initial state for the ``UnitarySimulator``, however this state is an initial *unitary matrix* :math:`U_i`, not a statevector. In this case the returned unitary will be :math:`U \\cdot U_i` given by applying the circuit unitary to the initial unitary matrix."
msgstr "Kita juga dapat mengatur sebuah state awal untuk ` ` ` UnitarySimulator ` `, namun keadaan ini adalah matrik awal * :math:` U_i `, bukan suatu statevector. Dalam kasus ini, unitary yang dikembalikan akan menjadi :math:` U \\cdot U_i ` yang dihasilkan dari penerapan sirkuit unitary ke matrik unitary awal."

#: ../../tutorials/simulators/1_aer_provider.ipynb:496
msgid "**Note:** \\* The initial unitary must be a valid unitary matrix :math:`U^\\dagger \\cdot U =\\mathbb{1}`. If not, an exception will be raised. \\* If a ``Qobj`` contains multiple experiments, the initial unitary must be the correct size for *all* experiments in the ``Qobj``, otherwise an exception will be raised."
msgstr "** Catatan:** \\ * Unitary awal harus berupa sebuah matrik unitary yang valid :math:` U ^ \\dagger \\cdot U = \\mathbb{1}`. Jika tidak, suatu pengecualian akan dinaikkan. \\ * Jika sebuah ` ` ` Qobj ` ` berisi beberapa percobaan, unitary awal harus memiliki ukuran yang benar untuk * semua * percobaan dalam ` ` Qobj ` `, jika tidak, suatu pengecualian akan dinaikkan."

#: ../../tutorials/simulators/1_aer_provider.ipynb:498
msgid "Let us consider preparing the output unitary of the previous circuit as the initial state for the simulator:"
msgstr "Mari kita lihat contoh mempersiapkan output unitary dari sirkuit sebelumnya sebagai state awal untuk simulator:"

