msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-29 18:58+0000\n"
"PO-Revision-Date: 2021-04-29 20:02\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/3_minimum_eigen_optimizer.po\n"
"X-Crowdin-File-ID: 9152\n"
"Language: id_ID\n"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:10
msgid "This page was generated from `tutorials/optimization/3_minimum_eigen_optimizer.ipynb`__."
msgstr "Halaman ini dihasilkan dari ` tutorials/optimization/3_minimum_eigen_optimizer.ipynb ` __."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/optimization/3_minimum_eigen_optimizer.ipynb>`_."
msgstr "Jalankan secara interaktif dalam ' IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/optimization/3_minimum_eigen_optimizer.ipynb>` _."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:9
msgid "Minimum Eigen Optimizer"
msgstr "Pengoptimal Eigen Minimum"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:21
msgid "Introduction"
msgstr "Pengantar"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:32
msgid "An interesting class of optimization problems to be addressed by quantum computing are Quadratic Unconstrained Binary Optimization (QUBO) problems. Finding the solution to a QUBO is equivalent to finding the ground state of a corresponding Ising Hamiltonian, which is an important problem not only in optimization, but also in quantum chemistry and physics. For this translation, the binary variables taking values in :math:`\\{0, 1\\}` are replaced by spin variables taking values in :math:`\\{-1, +1\\}`, which allows to replace the resulting spin variables by Pauli Z matrices, and thus, an Ising Hamiltonian. For more details on this mapping we refer to [1]."
msgstr ""

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:35
msgid "Qiskit provides automatic conversion from a suitable ``QuadraticProgram`` to an Ising Hamiltonian, which then allows to leverage all the ``MinimumEigenSolver`` such as - ``VQE``, - ``QAOA``, or - ``NumpyMinimumEigensolver`` (classical exact method)."
msgstr "Qiskit menyediakan konversi otomatis dari ` ` QuadraticProgram ` ` yang sesuai ` ke Hamiltonian Ising, yang kemudian memungkinkan untuk memanfaatkan semua ` ` MinimumEigenSolver ` ` seperti-` ` ` VQE ` `,-` ` QAOA ` `, atau-` ` NumpyMinimumEigensolver ` ` (metode eksak klasik)."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:37
msgid "Qiskit wraps the translation to an Ising Hamiltonian (in Qiskit Aqua also called ``Operator``), the call to an ``MinimumEigensolver`` as well as the translation of the results back to ``OptimizationResult`` in the ``MinimumEigenOptimizer``."
msgstr "Qiskit membungkus terjemahan ke sebuah Hamiltonian Ising (dalam Qiskit Aqua juga disebut sebagai ` ` Operator ` `), panggilan ke ` ` MinimumEigensolver ` ` serta terjemahan hasilnya kembali ke ` ` OptimizationResult ` ` di ` ` ` MinimumEigenOptimizer ` `."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:39
msgid "In the following we first illustrate the conversion from a ``QuadraticProgram`` to an ``Operator`` and then show how to use the ``MinimumEigenOptimizer`` with different ``MinimumEigensolver`` to solve a given ``QuadraticProgram``. The algorithms in Qiskit automatically try to convert a given problem to the supported problem class if possible, for instance, the ``MinimumEigenOptimizer`` will automatically translate integer variables to binary variables or add a linear equality constraints as a quadratic penalty term to the objective. It should be mentioned that Aqua will through a ``QiskitOptimizationError`` if conversion of a quadratic program with integer variable is attempted."
msgstr "Berikut ini pertama-tama diilustrasikan konversi dari `` QuadraticProgram '' menjadi `` Operator '' dan kemudian menunjukkan bagaimana menggunakan `` MinimumEigenOptimizer '' dengan `` MinimumEigensolver '' yang berbeda untuk menyelesaikan `` QuadraticProgram '' yang ada. Algoritma di Qiskit secara otomatis mencoba mengonversi masalah yang diberikan ke kelas masalah yang didukung jika memungkinkan, misalnya, `` MinimumEigenOptimizer '' akan secara otomatis menerjemahkan variabel bilangan bulat ke variabel biner atau menambahkan batasan persamaan linier sebagai syarat penalti kuadrat ke objektif. Harus disebutkan bahwa Aqua akan melalui `` QiskitOptimizationError '' jika konversi program kuadrat dengan variabel bilangan bulan dicoba."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:42
msgid "The circuit depth of ``QAOA`` potentially has to be increased with the problem size, which might be prohibitive for near-term quantum devices. A possible workaround is Recursive QAOA, as introduced in [2]. Qiskit generalizes this concept to the ``RecursiveMinimumEigenOptimizer``, which is introduced at the end of this tutorial."
msgstr "Kedalaman sirkuit `` QAOA '' harus ditingkatkan seiring dengan ukuran masalah, yang mungkin menjadi penghalang untuk perangkat kuantum jangka pendek. Solusi yang mungkin adalah QAOA Rekursif, seperti yang diperkenalkan di [2]. Qiskit menggeneralisasi konsep ini ke `` RecursiveMinimumEigenOptimizer``, yang diperkenalkan di akhir tutorial ini."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:45
msgid "References"
msgstr "Daftar pustaka"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:47
msgid "[1] `A. Lucas, Ising formulations of many NP problems, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>`__"
msgstr "[1] `A. Lucas, Ising formulations of many NP problems, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>`__"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:49
msgid "[2] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"
msgstr "[2] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:61
msgid "Converting a QUBO to an Operator"
msgstr "Mengubah suatu QUBO ke sebuah Operator"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:153
msgid "Next we translate this QUBO into an Ising operator. This results not only in an ``Operator`` but also in a constant offset to be taking into account to shift the resulting value."
msgstr "Selanjutnya kita terjemahkan QUBO ini menjadi operator Ising. Hasil ini tidak hanya berada pada ` ` Operator ` ` tetapi juga dalam offset konstan yang akan dilibatkan untuk menggeser nilai yang dihasilkan."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:214
msgid "Sometimes an ``QuadraticProgram`` might also directly be given in the form of an ``Operator``. For such cases, Qiskit also provides a converter from an ``Operator`` back to a ``QuadraticProgram``, which we illustrate in the following."
msgstr "Terkadang sebuah ` ` QuadraticProgram ` ` bisa secara langsung diberikan dalam bentuk ` ` Operator ` `. Untuk kasus seperti itu, Qiskit juga menyediakan konverter dari ` ` Operator ` ` kembali ke ` ` ` QuadraticProgram ` `, yang diilustrasikan berikut ini."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:288
msgid "This converter allows, for instance, to translate an ``Operator`` to a ``QuadraticProgram`` and then solve the problem with other algorithms that are not based on the Ising Hamiltonian representation, such as the ``GroverOptimizer``."
msgstr "Konverter ini memungkinkan, misalnya, untuk menerjemahkan sebuah `` Operator '' menjadi `` QuadraticProgram '' dan kemudian menyelesaikan masalah dengan algoritma lain yang tidak berdasarkan representasi Ising Hamiltonian, misalnya seperti `` GroverOptimizer ''."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:300
msgid "Solving a QUBO with the MinimumEigenOptimizer"
msgstr "Memecahkan sebuah QUBO dengan MinimumEigenOptimizer"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:311
msgid "We start by initializing the ``MinimumEigensolver`` we want to use."
msgstr "Kita mulai dengan menginisialisasi ` ` MinimumEigensolver ` ` yang ingin digunakan."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:337
msgid "Then, we use the ``MinimumEigensolver`` to create ``MinimumEigenOptimizer``."
msgstr "Kemudian, gunakan `` MinimumEigensolver '' untuk membuat `` MinimumEigenOptimizer ''."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:359
msgid "We first use the ``MinimumEigenOptimizer`` based on the classical exact ``NumPyMinimumEigensolver`` to get the optimal benchmark solution for this small example."
msgstr "Pertama, gunakan ` ` MinimumEigenOptimizer ` ` berdasarkan nilai eksak klasik ` ` NumPyMinimumEigensolver ` ` ` untuk mendapatkan solusi patokan optimal di contoh kecil ini."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:404
msgid "Next we apply the ``MinimumEigenOptimizer`` based on ``QAOA`` to the same problem."
msgstr "Selanjutnya, aplikasikan ``MinimumEigenOptimizer`` yang berdasarkan ``QAOA`` ke masalah yang sama."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:450
msgid "RecursiveMinimumEigenOptimizer"
msgstr "RecursiveMinimumEigenOptimizer"

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:461
msgid "The ``RecursiveMinimumEigenOptimizer`` takes a ``MinimumEigenOptimizer`` as input and applies the recursive optimization scheme to reduce the size of the problem one variable at a time. Once the size of the generated intermediate problem is below a given threshold (``min_num_vars``), the ``RecursiveMinimumEigenOptimizer`` uses another solver (``min_num_vars_optimizer``), e.g., an exact classical solver such as CPLEX or the ``MinimumEigenOptimizer`` based on the ``NumPyMinimumEigensolver``."
msgstr "``RecursiveMinimumEigenOptimizer`` memanfaatkan `` MinimumEigenOptimizer '' sebagai input dan menerapkan skema optimisasi rekursif untuk mengurangi ukuran masalah satu variabel setiap waktu. Setelah ukuran masalah perantara yang dihasilkan berada di bawah ambang yang diberikan (`` min_num_vars``), `` RecursiveMinimumEigenOptimizer`` menggunakan pemecah lain (``min_num_vars_optimizer``), misalnya, pemecah klasik eksak seperti CPLEX atau ``MinimumEigenOptimizer`` berdasarkan `` NumPyMinimumEigensolver``."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:463
msgid "In the following, we show how to use the ``RecursiveMinimumEigenOptimizer`` using the two ``MinimumEigenOptimizer`` introduced before."
msgstr "Berikut ditunjukkan cara penggunaan ``RecursiveMinimumEigenOptimizer`` melalui dua ``MinimumEigenOptimizer`` yang telah diperkenalkan sebelumnya."

#: ../../tutorials/optimization/3_minimum_eigen_optimizer.ipynb:474
msgid "First, we construct the ``RecursiveMinimumEigenOptimizer`` such that it reduces the problem size from 3 variables to 1 variable and then uses the exact solver for the last variable. Then we call ``solve`` to optimize the considered problem."
msgstr "Pertama, kita buat ``RecursiveMinimumEigenOptimizer`` sehingga mengurangi ukuran masalah dari 3 variabel ke 1 variabel dan kemudian menggunakan solver eksak untuk variabel terakhir. Lalu kita panggil ``solve`` untuk mengoptimisasi masalah tersebut."

