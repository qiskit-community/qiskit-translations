msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-08 17:23+0000\n"
"PO-Revision-Date: 2021-03-08 13:14\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/5_admm_optimizer.po\n"
"X-Crowdin-File-ID: 9156\n"
"Language: id_ID\n"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:10
msgid "This page was generated from `tutorials/optimization/5_admm_optimizer.ipynb`__."
msgstr "Halaman ini dihasilkan dari ` tutorials/optimization/5_admm_optimizer.ipynb ` __."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/optimization/5_admm_optimizer.ipynb>`_."
msgstr "Jalankan secara interaktif dalam ' IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/optimization/5_admm_optimizer.ipynb>` _."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:9
msgid "ADMM Optimizer"
msgstr "Pengoptimasi ADMM"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:21
msgid "Introduction"
msgstr "Pendahuluan"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:32
msgid "The ADMM Optimizer can solve classes of mixed-binary constrained optimization problems, hereafter (MBCO), which often appear in logistic, finance, and operation research. In particular, the ADMM Optimizer here designed can tackle the following optimization problem :math:`(P)`:"
msgstr "Pengoptimasi ADMM dapat menyelesaikan kelas-kelas dari masalah optimisasi yang terbatasi mixed-binary, kemudian (MBCO), yang sering muncul dalam penelitian logistik, finance, dan operasi. Secara khusus, ADMM Optimizer di sini dirancang untuk mengatasi masalah optimisasi berikut :math:` (P) `:"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:34
msgid "\\min_{x \\in \\mathcal{X},u\\in\\mathcal{U} \\subseteq \\mathbb{R}^l } \\quad q(x) + \\varphi(u),"
msgstr ""

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:39
msgid "subject to the constraints:"
msgstr "dengan konstrain:"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:41
msgid "\\mathrm{s.t.:~} \\quad G x = b, \\quad  g(x) \\leq 0, \\quad \\ell(x, u) \\leq 0,"
msgstr ""

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:46
msgid "with the corresponding functional assumptions."
msgstr "dengan asumsi fungsional yang sesuai."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:48
msgid "Function :math:`q: \\mathbb{R}^n \\to \\mathbb{R}` is quadratic, i.e., :math:`q(x) = x^{\\intercal} Q x + a^{\\intercal} x` for a given symmetric squared matrix :math:`Q \\in \\mathbb{R}^n \\times \\mathbb{R}^n, Q = Q^{\\intercal}`, and vector :math:`a \\in \\mathbb{R}^n`;"
msgstr "Fungsi :math:`q: \\mathbb{R}^n \\to \\mathbb{R}` bersifat kuadratik, misal, :math:`q(x) = x^{\\intercal} Q x + a^{\\intercal} x` untuk sebuah matriks simetrik squared :math:`Q \\in \\mathbb{R}^n \\times \\mathbb{R}^n, Q = Q^{\\intercal}`, dan vektor :math:`a \\in \\mathbb{R}^n`;"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:49
msgid "The set :math:`\\mathcal{X} = \\{0,1\\}^n = \\{x_{(i)} (1-x_{(i)}) = 0, \\forall i\\}` enforces the binary constraints;"
msgstr "Set :math:` \\mathcal{X} = \\ {0 ,1 \\} ^ n = \\ {x_ {(i)} (1-x_ {(i)}) = 0, \\forall i\\} ` memberlakukan batasan biner;"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:50
msgid "Matrix :math:`G\\in\\mathbb{R}^n \\times \\mathbb{R}^{n'}`, vector :math:`b \\in \\mathbb{R}^{n'}`, and function :math:`g: \\mathbb{R}^n \\to \\mathbb{R}` is convex;"
msgstr "Matriks :math:` G \\in\\mathbb{R}^ n \\times \\mathbb{R}^{n'}`, vektor :math:` b \\in \\mathbb{R}^{n'}`, dan fungsi :math:` g: \\mathbb{R}^ n \\to \\mathbb{R}` berbentuk cembung;"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:51
msgid "Function :math:`\\varphi: \\mathbb{R}^l \\to \\mathbb{R}` is convex and :math:`\\mathcal{U}` is a convex set;"
msgstr "Fungsi :math:` \\varphi: \\mathbb{R}^ l \\to \\mathbb{R}` berbentuk cembung dan :math:` \\mathcal{U}` adalah sebuah himpunan cembung;"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:52
msgid "Function :math:`\\ell: \\mathbb{R}^n\\times \\mathbb{R}^l \\to \\mathbb{R}` is *jointly* convex in :math:`x, u`."
msgstr "Fungsi :math:` \\ell: \\mathbb{R}^ n\\times \\mathbb{R}^ l \\to \\mathbb{R}` bersifat * sama-sama * cembung dalam :math:` x, u `."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:63
msgid "In order to solve MBO problems, [1] proposed heuristics for :math:`(P)` based on the Alternating Direction Method of Multipliers (ADMM) [2]. ADMM is an operator splitting algorithm with a long history in convex optimization, and it is known to have residual, objective and dual variable convergence properties, provided that convexity assumptions are holding."
msgstr "Untuk menyelesaikan permasalahan-permasalahan MBO, [1] mengusulkan heuristik untuk :math:` (P) ` berdasarkan Metode Pengarahan Alternatif dari Pengali (Alternating Direction Method of Multipliers) (ADMM) [2]. ADMM adalah algoritme pemisahan operator dengan sejarah panjang dalam optimasi cembung, dan diketahui memiliki sifat konvergensi residual, objektif dan properti konvergensi variabel ganda, dengan syarat bahwa asumsi kecembungan terpenuhi."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:65
msgid "The method of [1] (referred to as 3-ADMM-H) leverages the ADMM operator-splitting procedure to devise a decomposition for certain classes of MBOs into: - a QUBO subproblem to be solved by on the quantum device via variational algorithms, such as VQE or QAOA; - continuous convex constrained subproblem, which can be efficiently solved with classical optimization solvers."
msgstr "Metode [1] (disebut sebagai 3-ADMM-H) memanfaatkan prosedur pemisahan operator ADMM untuk merancang suatu dekomposisi untuk kelas-kelas tertentu dari MBOs menjadi:-sebuah submasalah QUBO yang akan dipecahkan oleh perangkat kuantum melalui algoritme variasional, seperti VQE atau QAOA;-subproblem cembung kontinu dengan batasan, yang dapat diselesaikan secara efisien dengan solver optimisasi klasik."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:67
msgid "The algorithm 3-ADMM-H works as follows:"
msgstr "Algoritma 3-ADMM-H bekerja sebagai berikut:"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:69
msgid "Initialization phase (set the parameters and the QUBO and convex solvers);"
msgstr "Tahap inisialisasi (menentukan parameter dan solvers QUBO dan cembung);"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:70
msgid "For each ADMM iterations ($k = 1, 2, :nbsphinx-math:`\\ldots`, $) untill termination:"
msgstr "Untuk setiap iterasi ADMM ($k = 1, 2, :nbsphinx-math:` \\ldots `, $) hingga terminasi:"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:72
msgid "Solve a properly defined QUBO subproblem (with a classical or quantum solver);"
msgstr "Pecahkan submasalah QUBO yang didefinisikan dengan benar (dengan solver klasik atau kuantum);"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:73
msgid "Solve properly defined convex problems (with a classical solver);"
msgstr "Pecahkan masalah cembung yang didefinisikan dengan benar (dengan solver klasik);"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:74
msgid "Update the dual variables."
msgstr "Perbarui variabel ganda."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:76
msgid "Return optimizers and cost."
msgstr "Kembalikan pengoptimasi dan biayanya."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:78
msgid "A comprehensive discussion on the conditions for convergence, feasibility and optimality of the algorithm can be found in [1]. A variant with 2 ADMM blocks, namely a QUBO subproblem, and a continuous convex constrained subproblem, is also introduced in [1]."
msgstr "Sebuah diskusi komprehensif tentang kondisi untuk konvergensi, kelayakan dan optimalitas dari algoritma dapat ditemukan pada [1]. Sebuah varian dengan 2 blok ADMM, yaitu submasalah QUBO, dan submasalah konveks kontinu, juga diperkenalkan pada [1]."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:81
msgid "References"
msgstr "Referensi"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:83
msgid "[1] `C. Gambella and A. Simonetto, Multi-block ADMM heuristics for mixed-binary optimization, on classical and quantum computers, arXiv preprint arXiv:2001.02069 (2020). <https://arxiv.org/abs/2001.02069>`__"
msgstr "[1] `C. Gambella and A. Simonetto, Multi-block ADMM heuristics for mixed-binary optimization, on classical and quantum computers, arXiv preprint arXiv:2001.02069 (2020). <https://arxiv.org/abs/2001.02069>`__"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:85
msgid "[2] `S. Boyd, N. Parikh, E. Chu, B. Peleato, and J. Eckstein, Distributed optimization and statistical learning via the alternating direction method of multipliers, Foundations and Trends in Machine learning, 3, 1–122 (2011). <https://web.stanford.edu/~boyd/papers/pdf/admm_distr_stats.pdf>`__"
msgstr "[2] `S. Boyd, N. Parikh, E. Chu, B. Peleato, and J. Eckstein, Distributed optimization and statistical learning via the alternating direction method of multipliers, Foundations and Trends in Machine learning, 3, 1–122 (2011). <https://web.stanford.edu/~boyd/papers/pdf/admm_distr_stats.pdf>`__"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:97
msgid "Initialization"
msgstr "Inisialisasi"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:99
msgid "First of all we load all the packages that we need."
msgstr "Pertama-tama, kita memuat semua paket yang kita butuhkan."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:137
msgid "We first initialize all the algorithms we plan to use later in this tutorial."
msgstr "Kita pertama-tama menginisialisasi semua algoritma yang akan kita gunakan nanti dalam tutorial ini."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:139
msgid "To solve the QUBO problems we can choose between - ``MinimumEigenOptimizer`` using different ``MinimumEigensolver``, such as ``VQE``, ``QAOA`` or ``NumpyMinimumEigensolver`` (classical) - ``GroverOptimizer`` - ``CplexOptimizer`` (classical, if CPLEX is installed)"
msgstr "Untuk memecahkan masalah QUBO kita dapat memilih antara-` ` MinimumEigenOptimizer ` ` dengan` ` MinimumEigensolver ` ` yang berbeda, seperti ` ` VQE ` `, ` ` QAOA ` ` atau ` ` NumpyMinimumEigensolver ` ` (klasik)-` ` GroverOptimizer ` `-` ` CplexOptimizer ` ` (klasik, jika CPLEX terinstal)"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:141
msgid "and to solve the convex continuous problems we can choose between the following classical solvers: - ``CplexOptimizer`` (if CPLEX is installed) - ``CobylaOptimizer``"
msgstr "dan untuk memecahkan permasalahan cembung kontinu, kita dapat memilih antara solvers klasik berikut:-` ` CplexOptimizer ` ` (jika CPLEX telah terinstal)-` ` CobylaOptimizer ` `"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:143
msgid "In case CPLEX is not available, the ``CobylaOptimizer`` (for convex continuous problems) and the ``MinimumEigenOptimizer`` using the ``NumpyMinimumEigensolver`` (for QUBOs) can be used as classical alternatives to CPLEX for testing, validation, and benchmarking."
msgstr "Apabila CPLEX tidak tersedia, ` ` CobylaOptimizer ` ` (untuk permasalahan cembung kontinu) dan ` ` MinimumEigenOptimizer ` ` menggunakan ` ` NumpyMinimumEigensolver ` ` (untuk QUBOs) dapat digunakan sebagai alternatif klasik untuk CPLEX untuk pengujian, validasi, dan penentuan tolok ukur."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:177
msgid "Example"
msgstr "Contoh"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:179
msgid "We test 3-ADMM-H algorithm on a simple Mixed-Binary Quadratic Problem with equality and inequality constraints (Example 6 reported in [1]). We first construct a docplex problem and then load it into a ``QuadraticProgram``."
msgstr "Kita menguji algoritma 3-ADMM-H pada Problem Quadratic Mixed-Binary Quadratic sederhana dengan bataasan kesamaan dan ketidaksamaan (Contoh 6 didapatkan dari [1]). Kita pertama-tama membangun sebuah masalah docplex dan kemudian dimuat ke dalam ` ` QuadraticProgram ` `."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:274
msgid "Classical Solution"
msgstr "Solusi Klasik"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:276
msgid "3-ADMM-H needs a QUBO optimizer to solve the QUBO subproblem, and a continuous optimizer to solve the continuous convex constrained subproblem. We first solve the problem classically: we use the ``MinimumEigenOptimizer`` with the ``NumPyMinimumEigenSolver`` as a classical and exact QUBO solver and we use the ``CobylaOptimizer`` as a continuous convex solver. 3-ADMM-H supports any other suitable solver available in Qiskit. For instance, VQE, QAOA, and GroverOptimizer can be invoked as quantum solvers, as demonstrated later. If CPLEX is installed, the ``CplexOptimizer`` can also be used as both, a QUBO and convex solver."
msgstr "3-ADMM-H membutuhkan pengoptimasi QUBO untuk memecahkan submasalah QUBO, dan pengoptimasi kontinu untuk memecahkan submasalah yang kontinu dengan batasan. Kita pertama-tama memecahkan masalah secara klasik: menggunakan` ` MinimumEigenOptimizer ` ` dengan ` ` NumPyMinimumEigenSolver ` ` sebagai solver QUBO klasik dan tepat; kami menggunakan ` ` ` CobylaOptimizer ` ` sebagai solver cembung yang kontinu. 3-ADMM-H mendukung setiap solver cocok lainnya yang tersedia di Qiskit. Sebagai contoh, VQE, QAOA, dan GroverOptimizer dapat dipanggil sebagai pemecah kuantum, seperti yang ditunjukkan kemudian. Jika CPLEX terinstall, ` ` CplexOptimizer ` ` juga dapat digunakan sebagai solver QUBO dan cembung."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:289
msgid "Parameters"
msgstr "Parameter"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:291
msgid "The 3-ADMM-H are wrapped in class ``ADMMParameters``. Customized parameter values can be set as arguments of the class. In this example, parameters :math:`\\rho, \\beta` are initialized to :math:`1001` and :math:`1000`, respectively. The penalization ``factor_c`` of equality constraints :math:`Gx = b` is set to :math:`900`. The tolerance ``tol`` for primal residual convergence is set to ``1.e-6``. In this case, the 3-block implementation is guaranteed to converge for Theorem 4 of [1], because the inequality constraint with the continuous variable is always active. The 2-block implementation can be run by setting ``three_block=False``, and practically converges to a feasible not optimal solution."
msgstr "3-ADMM-H dibalut dalam kelas ` ` ADMMParameters ` `. Nilai parameter yang disesuaikan dapat diatur sebagai argumen dari kelas. Dalam contoh ini, parameter :math:`\\rho, \\beta ` diinisialisasi untuk :math:` 1001 ` dan :math:` 1000 `, secara berturut-turut. Penalti dari` ` factor_c ` ` sesuai batasan kesamaan :math:` Gx = b ` ditentukan pada :math:` 900 `. Toleransi ` ` tol ` ` untuk konvergensi residual ditentukan pada ` `1.e-6 ` `. Dalam hal ini, implementasi 3 blok dijamin konvergen untuk Teorema 4 dari [1], karena batasan ketidaksamaan dengan variabel kontinu selalu aktif. Implementasi 2 blok ini dapat dijalankan dengan menetapkan ` ` three_block=False ` `, dan secara praktis menjadi konvergen ke solusi yang mungkin namun tidak optimal."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:320
msgid "Calling 3-ADMM-H algorithm"
msgstr "Memanggil algoritma 3-ADMM-H"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:322
msgid "To invoke the 3-ADMM-H algorithm, an instance of the ``ADMMOptimizer`` class needs to be created. This takes ADMM-specific parameters and the subproblem optimizers separately into the constructor. The solution returned is an instance of ``OptimizationResult`` class."
msgstr "Untuk memanggil algoritma 3-ADMM-H, sebuah instansi dari kelas ` ` ADMMOptimizer ` ` perlu dibuat. Aksi ini mengambil parameter-parameter spesifik ADMM dan pengoptimasi submasalah secara terpisah ke konstruktor. Solusi yang dikembalikan adalah instance dari kelas ` ` OptimizationResult ` `."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:366
msgid "Classical Solver Result"
msgstr "Hasil Solver Klasik"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:368
msgid "The 3-ADMM-H solution can be then printed and visualized. The ``x`` attribute of the solution contains respectively, the values of the binary decision variables and the values of the continuous decision variables. The ``fval`` is the objective value of the solution."
msgstr "Solusi 3-ADMM-H dapat kemudian dicetak dan divisualisasikan. Atribut ` ` x ` ` dari solusi yang mengandung secara berturut-turut, nilai-nilai dari variabel keputusan biner dan nilai-nilai dari variabel keputusan yang kontinu. ` ` fval ` ` adalah nilai objektif dari solusi."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:411
msgid "Solution statistics can be accessed in the ``state`` field and visualized. We here display the convergence of 3-ADMM-H, in terms of primal residuals."
msgstr "Statistik solusi dapat diakses dalam field ` ` state ` ` dan divisualisasikan. Kita di sini menampilkan konvergensi 3-ADMM-H, dalam hal residual primal."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:444
msgid "Quantum Solution"
msgstr "Solusi Kuantum"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:446
msgid "We now solve the same optimization problem with QAOA as QUBO optimizer, running on simulated quantum device. First, one need to select the classical optimizer of the eigensolver QAOA. Then, the simulation backend is set. Finally, the eigensolver is wrapped into the ``MinimumEigenOptimizer`` class. A new instance of ``ADMMOptimizer`` is populated with QAOA as QUBO optimizer."
msgstr "Kita sekarang memecahkan masalah optimisasi yang sama dengan QAOA sebagai pengoptimasi QUBO, yang berjalan pada perangkat kuantum tersimulasi. Pertama, seseorang perlu memilih pengoptimasi klasik dari eigensolver QAOA. Kemudian, simulasi backend ditentukan. Akhirnya, eigensolver dibalut ke dalam kelas ` ` MinimumEigenOptimizer ` `. Sebuah mesin virtual baru dari ` ` ADMMOptimizer ` ` dihuni oleh QAOA sebagai optimizer QUBO."

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:489
msgid "Quantum Solver Results"
msgstr "Hasil Solver Kuantum"

#: ../../tutorials/optimization/5_admm_optimizer.ipynb:491
msgid "Here we present the results obtained from the quantum solver. As in the example above ``x`` stands for the solution, the ``fval`` is for objective value."
msgstr "Di sini kita menyajikan hasil yang diperoleh dari solver kuantum. Seperti pada contoh di atas, ` ` x ` ` untuk solusi, ` ` fval ` ` untuk nilai objektif."

