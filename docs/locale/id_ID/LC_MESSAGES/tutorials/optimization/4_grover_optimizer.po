msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-17 18:35+0000\n"
"PO-Revision-Date: 2021-05-17 19:51\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/4_grover_optimizer.po\n"
"X-Crowdin-File-ID: 9154\n"
"Language: id_ID\n"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:10
msgid "This page was generated from `tutorials/optimization/4_grover_optimizer.ipynb`__."
msgstr "Halaman ini dihasilkan dari ` tutorials/optimization/4_grover_optimizer.ipynb ` __."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/optimization/4_grover_optimizer.ipynb>`_."
msgstr "Jalankan secara interaktif dalam ' IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/optimization/4_grover_optimizer.ipynb>` _."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:9
msgid "Grover Optimizer"
msgstr "Pengoptimal Grover"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:21
msgid "Introduction"
msgstr "Pengantar"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:23
msgid "Grover Adaptive Search (GAS) has been explored as a possible solution for combinatorial optimization problems, alongside variational algorithms such as Variational Quantum Eigensolver (VQE) and Quantum Approximate Optimization Algorithm (QAOA). The algorithm iteratively applies Grover Search to find the optimum value of an objective function, by using the best-known value from the previous run as a threshold. The adaptive oracle used in GAS recognizes all values above or below the current threshold (for max and min respectively), decreasing the size of the search space every iteration the threshold is updated, until an optimum is found."
msgstr "Grover Adaptive Search (GAS) telah dieksplorasi sebagai solusi yang mungkin untuk masalah optimisasi kombinatorial, bersama dengan algoritma variasional seperti Variational Quantum Eigensolver (VQE) dan Quantum Approximate Optimization Algorithm (QAOA). Algoritma tersebut secara berulang menerapkan Pencarian Grover untuk menemukan nilai optimal dari suatu fungsi tujuan, dengan menggunakan nilai terbaik dari proses sebelumnya sebagai ambang batas. Oracle adaptif yang digunakan dalam GAS mengenali semua nilai di atas atau di bawah ambang batas saat ini (untuk maks dan min masing-masing), mengurangi ukuran ruang pencarian setiap iterasi ambang diperbarui, hingga nilai optimal ditemukan."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:26
msgid "In this notebook we will explore each component of the ``GroverOptimizer``, which utilizes the techniques described in GAS, by minimizing a Quadratic Unconstrained Binary Optimization (QUBO) problem, as described in [1]"
msgstr "Di notebook ini kita akan mempelajari setiap komponen `` GroverOptimizer``, yang menggunakan teknik yang dijelaskan dalam GAS, dengan meminimalkan masalah Quadratic Unconstrained Binary Optimization (QUBO), seperti yang dijelaskan di [1]"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:29
msgid "References"
msgstr "Daftar pustaka"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:31
msgid "[1] `A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization, arXiv preprint arXiv:1912.04088 (2019). <https://arxiv.org/abs/1912.04088>`__"
msgstr "[1] `A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization, arXiv preprint arXiv:1912.04088 (2019). <https://arxiv.org/abs/1912.04088>`__"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:43
msgid "Grover Adaptive Search"
msgstr "Pencarian Adaptif Grover (Grover Adaptive Search/GAS)"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:45
msgid "Grover Search, the core element of GAS, needs three ingredients:"
msgstr "Pencari Grover, elemen inti dari GAS, membutuhkan tiga komponen:"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:47
msgid "A state preparation operator :math:`A` to construct a superposition of all states in the search space."
msgstr "Sebuah operator persiapan keadaan :math:` A ` untuk membangun sebuah superposisi dari semua keadaan dalam ruang pencarian."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:49
msgid "An oracle operator :math:`O`, that recognizes the states of interest and multiplies their amplitudes by -1."
msgstr "Sebuah operator oracle :math:` O `, mengenali keadaan yang diperhatikan dan mengalikan amplitudo mereka dengan -1."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:51
msgid "The Grover diffusion operator :math:`D`, that multiplies the amplitude of the :math:`|0\\rangle_n` state by -1."
msgstr "Operator Grover difusi :math:` D `, mengalikan amplitudo dari :math:` | 0\\rangle_n ` state sebanyak -1."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:53
msgid "While implementations of GAS vary around the specific use case, the general framework still loosely follows the steps described below."
msgstr "Walaupun implementasi GAS bervariasi di sekitar kasus penggunaan spesifik, kerangka umumnya masih secara umum mengikuti langkah-langkah yang dijelaskan di bawah ini."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:59
msgid "|792ea40f88484f84aae13b6769b14da8|"
msgstr ""

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:65
msgid "``GroverOptimizer`` uses ``QuadraticProgramToNegativeValueOracle`` to construct :math:`A_y` such that it prepares a :math:`n`-qubit register to represent the equal superposition of all :math:`|x\\rangle_n` and a :math:`m`-qubit register to (approximately) represent the corresponding :math:`|Q(x)-y\\rangle_m`. Then, all states with :math:`(Q(x) - y)` negative should be flagged by :math:`O_y`. Note that in the implementation discussed, the oracle operator is actually independent of :math:`y`, but this is not a requirement. For clarity, we will refer to the oracle as :math:`O` when the oracle is independent of :math:`y`."
msgstr "` ` ` GroverOptimizer ` ` menggunakan ` ` QuadraticProgramToNegativeValueOracle ` ` untuk menyusun :math:` A_y ` sedemikian rupa sehingga menyiapkan register :math:` n ` n `-qubit untuk mewakili superposisi yang setara dari semua :math:` |x\\rangle_n ` dan sebuah :math:` m `-qubit register untuk (secara aproksimasi) mewakili :math:` | Q (x)-y\\rangle_m ` yang sesuai. Kemudian, semua keadaan dengan :math:` (Q (x)-y) ` negatif seharusnya dilabeli oleh :math:` O_y `. Perlu dicatat bahwa dalam implementasi yang dibahas, operator oracle sebenarnya independen dari :math:` y `, tetapi ini bukan persyaratan. Untuk kejelasan, kita akan merujuk kepada oraclesebagai :math:` O ` ketika oracle tersebut independen dari :math:` y `."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:68
msgid "Put formally, ``QuadraticProgramToNegativeValueOracle`` constructs an :math:`A_y` and :math:`O` such that:"
msgstr "Secara formal, ` ` QuadraticProgramToNegativeValueOracle ` ` ` membangun sebuah :math:` A_y ` dan :math:` O `sehingga:"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:74
msgid "|59a9d3992734463e872cf232214d9f41|"
msgstr ""

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:80
msgid "where :math:`|x\\rangle` is the binary encoding of the integer :math:`x`."
msgstr ""

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:82
msgid "At each iteration in which the threshold :math:`y` is updated, we adapt :math:`A_y` such that the function values are shifted up or down (for minimum and maximum respectively) by :math:`y`. For example, in the context of finding the minimum, as the value of :math:`y` decreases, the search space (negative values) also decreases, until only the minimum value remains. A concrete example will be explored in the next section."
msgstr "Pada setiap iterasi di mana threshold :math:` y ` diperbarui, kita mengadaptasi :math:` A_y ` sedemikian sehingga nilai fungsi digeser ke atas atau ke bawah (untuk minimum dan maksimum masing-masing) sebesar :math:` y `. Sebagai contoh, dalam konteks menemukan minimum, sementara :math:` y ` menurun, ruang pencarian (nilai negatif) juga menurun, sampai hanya nilai minimum yang tersisa. Contoh konkrit akan ditelusuri di bagian berikutnya."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:99
msgid "Find the Minimum of a QUBO Problem using GroverOptimizer"
msgstr "Temukan Minimum dari Permasalahan QUBO dengan Menggunakan GroverOptimizer"

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:101
msgid "The following is a toy example of a minimization problem."
msgstr "Berikut ini adalah contoh dari permasalahan minimisasi."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:103
msgid ":nbsphinx-math:`\\begin{eqnarray} \\min_{x \\in \\{0, 1\\}^3} -2x_1x_3 - x_2x_3 - 1x_1 + 2x_2 - 3x_3. \\end{eqnarray}`"
msgstr ""

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:107
msgid "For our initial steps, we create a docplex model that defines the problem above, and then use the ``from_docplex()`` function to convert the model to a ``QuadraticProgram``, which can be used to represent a QUBO in Qiskit Optimization."
msgstr "Untuk langkah awal, kami membuat model docplex yang mendefinisikan permasalahan di atas dan menggunakan fungsi``from_docplex()`` untuk mengkonversi modelnya menjadi sebuah ``QuadraticProgram``, yang bisa digunakan untuk merepresentasikan QUBO dalam optimasi Qiskit."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:202
msgid "Next, we create a ``GroverOptimizer`` that uses 6 qubits to encode the value, and will terminate after there have been 10 iterations of GAS without progress (i.e. the value of :math:`y` does not change). The ``solve()`` function takes the ``QuadraticProgram`` we created earlier, and returns a results object that contains information about the run."
msgstr "Selanjutnya, kami membuat sebuah ` ` ` GroverOptimizer ` ` yang menggunakan 6 qubit untuk meng-encode nilai, dan akan berakhir setelah 10 iteras itanpa kemajuan S (yaitu nilai :math:` y ` tidak berubah) dari GAS. Fungsi ` ` solve () ` ` mengambil ` ` QuadraticProgram ` ` yang kita buat sebelumnya, dan mengembalikan sebuah objek hasil yang berisi informasi tentang proses yang berjalan."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:247
msgid "This results in the optimal solution :math:`x_0=1`, :math:`x_1=0`, :math:`x_2=1` and the optimal objective value of :math:`-6` (most of the time, since it is a randomized algorithm). In the following, a custom visualization of the quantum state shows a possible run of ``GroverOptimizer`` applied to this QUBO."
msgstr "Hal ini menghasilkan solusi optimal :math:` x_0 = 1 `, :math:` x_1 = 0 `, :math:` x_2 = 1 ` dan nilai objektif optimal dari :math:` -6 ` (untuk kebanyakan waktu, karena algoritma yang digunakan merupakan algoritma yang diacak). Dalam hal berikut, visualisasi kustom dari keadaan kuantum menunjukkan sebuah contoh proses yang dijalankan dari ` ` GroverOptimizer ` ` yang diterapkan pada QUBO ini."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:253
msgid "|a5c5ec00b67d40d8b4f27bcf51e8e7b3|"
msgstr ""

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:259
msgid "Each graph shows a single iteration of GAS, with the current values of :math:`r` (= iteration counter) and :math:`y` (= threshold/offset) shown in the title. The X-axis displays the integer equivalent of the input (e.g. ‘101’ :math:`\\rightarrow` 5), and the Y-axis shows the possible function values. As there are 3 binary variables, there are :math:`2^3=8` possible solutions, which are shown in each graph. The color intensity indicates the probability of measuring a certain result (with bright intensity being the highest), while the actual color indicates the corresponding phase (see phase color-wheel below). Note that as :math:`y` decreases, we shift all of the values up by that amount, meaning there are fewer and fewer negative values in the distribution, until only one remains (the minimum)."
msgstr "Setiap grafik menunjukkan iterasi tunggal dari GAS, dengan nilai saat ini :math:` r ` (= iterasi counter) dan :math:` y ` (= ambang/offset) seperti ditunjukkan pada judul. Sumbu X menampilkan bilangan bulat yang setara dengan masukan (misalnya '101' :math:`\\rightarrow ` 5), dan sumbu Y menunjukkan nilai fungsi yang mungkin. Karena ada 3 variabel biner, terdapat :math:` 2 ^ 3 = 8 ` kemungkinan solusi, yang ditunjukkan dalam setiap grafik. Intensitas warna menunjukkan probabilitas pengukuran hasil tertentu (dengan warna terang menunjukkan yang tertinggi), sedangkan warna yang sebenarnya menunjukkan fase yang sesuai (lihat warna fasa-roda di bawah). Perhatikan bahwa dengan menurunnya :math:` y `, kita menggeser semua nilai naik dengan jumlah itu, yang berarti nilai negatif semakin sedikit dan terus mengurang pada distribusi, sampai hanya satu yang tersisa (minimum)."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:266
msgid "|e92d53e881b7404cbdaa8a231b3e3f8b|"
msgstr ""

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:287
msgid "Check that GroverOptimizer finds the correct value"
msgstr "Periksa bahwa GroverOptimizer telah menemukan nilai yang tepat."

#: ../../tutorials/optimization/4_grover_optimizer.ipynb:289
msgid "We can verify that the algorithm is working correctly using the ``MinimumEigenOptimizer`` in Qiskit."
msgstr "Kita dapat memverifikasi bahwa algoritma bekerja dengan benar dengan menggunakan ` ` MinimumEigenOptimizer ` ` pada Qiskit."

