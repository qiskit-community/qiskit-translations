msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-08 17:23+0000\n"
"PO-Revision-Date: 2021-03-07 11:08\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/optimization/2_converters_for_quadratic_programs.po\n"
"X-Crowdin-File-ID: 9150\n"
"Language: id_ID\n"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:10
msgid "This page was generated from `tutorials/optimization/2_converters_for_quadratic_programs.ipynb`__."
msgstr "Halaman ini dibuat dari ` tutorials/algoritms/01_grover.ipynb ` __."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/optimization/2_converters_for_quadratic_programs.ipynb>`_."
msgstr "Jalankan secara interaktif dalam ' IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/simulators/1_aer_provider.ipynb>` _."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:9
msgid "Converters for Quadratic Programs"
msgstr "Konverter untuk Program Kuadratik"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:20
msgid "Optimization problems in Qiskit’s optimization module are represented with the ``QuadraticProgram`` class, which is generic and powerful representation for optimization problems. In general, optimization algorithms are defined for a certain formulation of a quadratic program and we need to convert our problem to the right type."
msgstr "Masalah optimisasi pada modul optimisasi Qiskit direpresentasikan dengan kelas ` ` QuadraticProgram ` `, yang merupakan representasi standar dan berguna untuk masalah optimasi. Secara umum, algoritma optimasi didefinisikan untuk formulasi tertentu dari sebuah program kuadratik dan kita perlu menyesuaikanpermasalahan yang kita hadapi dengan tipe yang tepat."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:22
msgid "For instance, Qiskit provides several optimization algorithms that can handle Quadratic Unconstrained Binary Optimization (QUBO) problems. These are mapped to Ising Hamiltonians, for which Qiskit uses the ``qiskit.aqua.operators`` module, and then their ground state is approximated. For this optimization commonly known algorithms such as VQE or QAOA can be used as underlying routine. See the following tutorial about the `Minimum Eigen Optimizer <./3_minimum_eigen_optimizer.ipynb>`__ for more detail. Note that also other algorithms exist that work differently, such as the ``GroverOptimizer``."
msgstr "Sebagai contoh, Qiskit menyediakan beberapa algoritma optimasi yang dapat menangani permasalahn Quadratic Unconstrained Binary Optimization (QUBO). Ini ditujukan untuk Ising Hamiltonians, di mana Qiskit menggunakan modul ` `qiskit.aqua.operator ` `, dan kemudian keadaan tanah mereka diestimasi. Untuk optimasi ini, algoritma yang umum seperti VQE atau QAOA dapat digunakan sebagai yang mendasarinya. Lihat tutorial berikut tentang ` Minimum Eigen Optimizer <./3_minimum_eigen_optimizer.ipynb> ` __ untuk detail lebih lanjut. Perhatikan bahwa algoritma lain yang bekerja dengan cara yang berbeda, seperti ` ` GroverOptimizer ` `."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:25
msgid "To map a problem to the correct input format, the optimization module of Qiskit offers a variety of converters. In this tutorial we’re providing an overview on this functionality. Currently, Qiskit contains the following converters. - ``InequalityToEquality``: converts inequality constraints into equality constraints with additional slack variables. - ``IntegerToBinary``: converts integer variables into binary variables and corresponding coefficients. - ``LinearEqualityToPenalty``: convert equality constraints into additional terms of the object function. - ``QuadraticProgramToQubo``: a wrapper for ``InequalityToEquality``, ``IntegerToBinary``, and ``LinearEqualityToPenalty`` for convenience."
msgstr "Untuk menyeusaikan permasalahan untuk mengikuti format input yang benar, modul optimasi dari Qiskit menawarkan berbagai macam konverter. Dalam tutorial ini, kita menyediakan gambaran tentang fungsionalitas ini. Saat ini, Qiskit berisi konverter berikut. -` ` InequalityToEquality ` `: mengubah batasan kesenjangan menjadi batasan persamaan dengan variabel kendur tambahan. -` ` IntegerToBinary ` `: mengubah variabel integer ke dalam variabel biner dan koefisien yang sesuai. -` ` LinearEqualityToPenalty ` `: mengkonversi batasan persamaan menjadi syarat tambahan dari fungsi objek. -` ` QuadraticProgramToQubo ` `: sebuah pembungkus untuk ` ` InequalityToEquality ` ` `, ` ` ` IntegerToBinary ` `, dan ` ` LinearEqualityToPenalty ` ` untuk kenyamanan."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:38
msgid "InequalityToEquality"
msgstr "InequalityToEquality"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:40
msgid "``InequalityToEqualityConverter`` converts inequality constraints into equality constraints with additional slack variables to remove inequality constraints from ``QuadraticProgram``. The upper bounds and the lower bounds of slack variables will be calculated from the difference between the left sides and the right sides of constraints. Signs of slack variables depend on symbols in constraints such as :math:`\\leq` and :math:`\\geq`."
msgstr "``InequalityToEqualityConverter`` mengkoversi batasan ketidaksamaan menjadi batasan persamaan dengan tambahan variabel kendur. untuk menghilankan batasan ketidaksamaan dari ``QuadraticProgram``. Batas atas dan bawah dari variabel kendur akan dihitung dari perbedaan sisi kiri dan kanan batasan. Simbol dari variabel kendur bergantung pada simbol dalam batasan-batasan seperti :math:`\\leq` and :math:`\\geq`."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:42
msgid "The following is an example of a maximization problem with two inequality constraints. Variable :math:`x` and :math:`y` are binary variables and variable :math:`z` is an integer variable."
msgstr "Berikut ini adalah contoh permasalahan maksimalisasi dengan dua batasan ketidaksamaan. Variabel :math:` x ` dan :math:` y ` adalah variabel biner dan variabel :math:` z ` adalah sebuah variabel integer."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:56
msgid "With ``QuadraticProgram``, an optimization model of the problem is written as follows."
msgstr "Dengan ``QuadraticProgram``, model optimasi dari permasalahan ditulis sebagai berikut."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:156
msgid "Call ``convert`` method of ``InequalityToEquality`` to convert."
msgstr "Memanggil metoda ``convert`` dari ``InequalityToEquality`` untuk mengkonversi."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:254
msgid "After converting, the formulation of the problem looks like as the follows. As we can see, the inequality constraints are replaced with equality constraints with additional integer slack variables, :math:`xyz\\_leg\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack`."
msgstr "Setelah melakukan konversi, formulasi masalah terlihat seperti sebagai berikut. Seperti yang dapat dilihat, batasan ketidaksamaan diganti dengan batasan kesamaan dengan variabel-variabel kendur tambahan, :math:` xyz\\_leg\\text {@} int\\_slack ` dan :math:` xyz\\_geq\\text {@} int\\_slack `."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:256
msgid "Let us explain how the conversion works. For example, the lower bound of the left side of the first constraint is :math:`0` which is the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Thus, the upperbound of the additional integer variable must be :math:`5` to be able to satisfy even the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Note that we cut off the part after the decimla point in the converted formulation since the left side of the first constraint in the original formulation can be only integer values. For the second constraint, basically we apply the same approach. However, the symol in the second constraint is :math:`\\geq`, so we add minus before :math:`xyz\\_geq\\text{@}int\\_slack` to be able to satisfy even the case of :math:`x=1, y=1`, and :math:`z=7`."
msgstr "Begini cara konversinya. Misalnya, batas bawah dari sisi kiri dari batasan pertama adalah :math:`0` yang merupakan kasus dari :math:`x=0`, :math:`y=0`, dan :math:`z=0`. Oleh karena itu, batas atas dari variabel integer tambahan harus :math:`5` memenuhi keadaan :math:`x=0`, :math:`y=0`, and :math:`z=0`. Perhatikan bahwa kami memotong bagian dari titik desimal di formulasi yang telah dikonversi karena sisi kiri dari batasan pertama pada formilasi asli hanya bisa terdiri dari nilai integer. Untuk batasan kedua, kami menerapkan pendekatan yang sama. Bagaimanapun, simbol pada batasan kedua adalah :math:`\\geq`, maka kam menambah simbol minus sebelum :math:`xyz\\_geq\\text{@}int\\_slack` untuk dapat memenuhi :math:`x=1, y=1`, dan :math:`z=7`."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:283
msgid "IntegerToBinary"
msgstr "IntegerToBinary"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:294
msgid "``IntegerToBinary`` converts integer variables into binary variables and coefficients to remove integer variables from ``QuadraticProgram``. For converting, bounded-coefficient encoding proposed in `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Eq. (5)) is used. For more detail of the encoding method, please see the paper."
msgstr "``IntegerToBinary`` mengkonversi variabel integer menjadi variabel biner dan koefisien untuk menghilangkan variabel integer dari ``QuadraticProgram``. Untuk mengkonversi, pengkodean yang terikat pada koefisien seperti diajukan pada `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Pers. (5)) digunakan.Untuk detail dari pengkodean yang digunakan, baca lebih lanjut pada paper."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:296
msgid "We use the output of ``InequalityToEquality`` as starting point. Variable :math:`x` and :math:`y` are binary variables, while the variable :math:`z` and the slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` are integer variables. We print the problem again for reference."
msgstr "Kami menggunakan output dari ` ` InequalityToEquality ` ` sebagai titik awal. Variabel :math:` x ` dan :math:` y ` adalah variabel biner, sedangkan variabel :math:` z ` dan variabel-variabel kendur :math:` xyz\\_leq\\text {@} int\\_slack ` dan :math:` xyz\\_geq\\text {@} int\\_slack ` adalah variabel integer. Kami mencetak permasalahan lagi sebagai referensi."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:382
msgid "Call ``convert`` method of ``IntegerToBinary`` to convert."
msgstr "Panggil metode ``convert`` dari ``IntegerToBinary`` untuk mengkonversi."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:492
msgid "After converting, integer variables :math:`z` is replaced with three binary variables :math:`z\\text{@}0`, :math:`z\\text{@}1` and :math:`z\\text{@}2` with coefficients 1, 2 and 4, respectively as the above. The slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` that were introduced by ``InequalityToEquality`` are also both replaced with three binary variables with coefficients 1, 2, 2, and 1, 2, 3, respectively."
msgstr "Setelah mengkonversi, variabel integer :math:`z` diganti dengan tiga variabe biner :math:`z\\text{@}0`, :math:`z\\text{@}1` dan :math:`z\\text{@}2` dengan koefisien 1, 2 dan 4secara berturut-turut seperti di atas. Variabel-variabel kendur :math:`xyz\\_leq\\text{@}int\\_slack` dan :math:`xyz\\_geq\\text{@}int\\_slack` yang diperkenalkan oleh ``InequalityToEquality``juga diganti oleh tiga variabel biner dengan koefisien secara berturut-turut 1, 2, 2, dan 1, 2, 3."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:494
msgid "Note: Essentially the coefficients mean that the sum of these binary variables with coefficients can be the sum of a subset of :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, and :math:`\\{1, 2, 3\\}` to represent that acceptable values :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}`, and :math:`\\{0, \\ldots, 6\\}`, which respects the lower bound and the upper bound of original integer variables correctly."
msgstr "Catatan: Secara dasar koefisien-koefisien ini menandakan total dari variabel biner dengan koefisien bisa menjadi total dari subset dari :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, dan :math:`\\{1, 2, 3\\}` untuk merepresentasikan nilai-nilai yang dapat diterima :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}`, dan :math:`\\{0, \\ldots, 6\\}`, dengan memerhatikan batas bawah dan batas atas dari variabel integer asli secara tepat."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:496
msgid "``IntegerToBinary`` also provides ``interpret`` method that is the functionality to translate a given binary result back to the original integer representation."
msgstr "``IntegerToBinary`` juga menyediakan metoda ``interpret`` yaitu fungsionalitas untuk menerjemahkan hasil biner menjadi representasi integer asli."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:508
msgid "LinearEqualityToPenalty"
msgstr "LinearEqualityToPenalty"

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:519
msgid "``LinearEqualityToPenalty`` converts linear equality constraints into additional quadratic penalty terms of the objective function to map ``QuadraticProgram`` to an unconstrained form. An input to the converter has to be a ``QuadraticProgram`` with only linear equality constraints. Those equality constraints, e.g. \\ :math:`\\sum_i a_i x_i = b` where :math:`a_i` and :math:`b` are numbers and :math:`x_i` is a variable, will be added to the objective function in the form of :math:`M(b - \\sum_i a_i x_i)^2` where :math:`M` is a large number as penalty factor. By default :math:`M= 1e5`. The sign of the term depends on whether the problem type is a maximization or minimization."
msgstr "``LinearEqualityToPenalty`` mengkonversi batasan kesamaan linear menjadi penalti kuadratik tambahan dari fungsi objektif untuk memetakan ``QuadraticProgram`` ke bentuk yang tidak diberi batasan. Input ke konverter ini adalah sebuah ``QuadraticProgram`` dengan batasan kesamaan linear. Batasan-batasan kesamaan seperti \\ :math:`\\sum_i a_i x_i = b` di mana :math:`a_i` dan :math:`b`adalah angka dan :math:`x_i` adalah sebuah variabel, dan akan ditambahkan ke fungsi subjektif dalam bentuk :math:`M(b - \\sum_i a_i x_i)^2` di mana :math:`M` merupakan sebuah angka besar sebagai faktor penalti. Default-nya: :math:`M= 1e5`. Simbol dari permasalahan ditentukan oleh tipe permasalahan, apakah maksimasi atau minimasi."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:522
msgid "We use the output of ``IntegerToBinary`` as starting point, where all variables are binary variables and all inequality constraints have been mapped to equality constraints. We print the problem again for reference."
msgstr "Kami menggunakan keluaran dari ` ` IntegerToBinary ` ` sebagai titik awal, di mana semua variabel adalah variabel biner dan semua batasan ketidaksamaan telah dipetakan ke batasan kesamaan. Kami mencetak permasalahannya lagi untuk menjadi referensi."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:620
msgid "Call ``convert`` method of ``LinearEqualityToPenalty`` to convert."
msgstr "Memanggil metoda ``convert`` dari ``InequalityToEquality`` untuk mengkonversi."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:774
msgid "After converting, the equality constraints are added to the objective function as additional terms with the default penalty factor :math:`M=1e5`. The resulting problem is now a QUBO and compatible with many quantum optimization algorithms such as VQE, QAOA and so on."
msgstr "Setelah mengkonversi, batasan kesamaan diambahkan ke fungsi objektif sebagai syarat tambahan dengan faktor penalti default :math:`M=1e5`. Permasalahannya sekarang menjadi sebuah QUBO dan cocok dengan banyak algoritma optimisasi kuantum seperti VQE, QAOA, dan lain-lain."

#: ../../tutorials/optimization/2_converters_for_quadratic_programs.ipynb:785
msgid "This gives the same result as before."
msgstr "Ini memberikan hasil yang sama seperti sebelumnya."

