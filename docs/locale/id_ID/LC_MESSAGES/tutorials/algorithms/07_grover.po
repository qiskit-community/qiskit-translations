msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-29 18:58+0000\n"
"PO-Revision-Date: 2021-04-29 20:03\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/07_grover.po\n"
"X-Crowdin-File-ID: 9456\n"
"Language: id_ID\n"

#: ../../tutorials/algorithms/07_grover.ipynb:10
msgid "This page was generated from `tutorials/algorithms/07_grover.ipynb`__."
msgstr "Halaman ini dibuat dari ` tutorials/algoritms/07_grover.ipynb ` __."

#: ../../tutorials/algorithms/07_grover.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/07_grover.ipynb>`_."
msgstr "Jalankan secara interaktif di ' IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/07_grover.ipynb>` _."

#: ../../tutorials/algorithms/07_grover.ipynb:9
msgid "Grover’s Algorithm and Amplitude Amplification"
msgstr "Algorithma Grover dan Amplifikasi Amplitudo"

#: ../../tutorials/algorithms/07_grover.ipynb:11
msgid "Grover’s algorithm is one of the most famous quantum algorithms introduced by Lov Grover in 1996 [1]. It has initially been proposed for unstructured search problems, i.e. for finding a marked element in a unstructured database. However, Grover’s algorithm is now a subroutine to several other algorithms, such as Grover Adaptive Search [2]. For the details of Grover’s algorithm, please see `Grover’s Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ in the Qiskit textbook."
msgstr "Algoritma Grover adalah salah satu algoritma kuantum paling terkenal yang ditemukan oleh Lov Grover tahun 1996 [1]. Algorithma ini awalnya digunakan untuk pencarian dari data yang tidak terstruktur, yaitu untuk menemukan elemen yang ditandai dari database yang tidak terstruktur. Namun, algoritma Grover kini menjadi subrutin untuk beberapa algoritme lainnya, seperti Grover Adaptive Search [2]. Untuk rincian dari algoritma Grover, silakan lihat ` Grover's Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>` __ dalam buku teks Qiskit."

#: ../../tutorials/algorithms/07_grover.ipynb:13
msgid "Qiskit implements Grover’s algorithm in the ``Grover`` class. This class also includes the generalized version, Amplitude Amplification [3], and allows setting individual iterations and other meta-settings to Grover’s algorithm."
msgstr "Qiskit mengimplementasikan algoritma Grover di kelas ` ` Grover ` `. Kelas ini juga termasuk versi generalisasinya, Amplifikasi Amplitudo [3], dan memungkinkan pengaturan iterasi individual dan pengaturan meta-setting lainnya di algoritma Grover."

#: ../../tutorials/algorithms/07_grover.ipynb:15
#: ../../tutorials/algorithms/07_grover.ipynb:723
msgid "**References:**"
msgstr "** Referensi:**"

#: ../../tutorials/algorithms/07_grover.ipynb:17
msgid "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"
msgstr "[1]: L. K. Grover, A fast quantum mechanical algorithm for database search. Proceedings 28th Annual Symposium on the Theory of Computing (STOC) 1996, pp. 212-219. https://arxiv.org/abs/quant-ph/9605043"

#: ../../tutorials/algorithms/07_grover.ipynb:19
msgid "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"
msgstr "[2]: A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization. https://arxiv.org/abs/1912.04088"

#: ../../tutorials/algorithms/07_grover.ipynb:21
msgid "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"
msgstr "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"

#: ../../tutorials/algorithms/07_grover.ipynb:33
msgid "Grover’s algorithm"
msgstr "Algoritma Grover"

#: ../../tutorials/algorithms/07_grover.ipynb:35
msgid "Grover’s algorithm uses the Grover operator :math:`\\mathcal{Q}` to amplify the amplitudes of the good states:"
msgstr "Algoritma Grover menggunakan operator Grover :math:` \\mathcal{Q}` untuk amplifikasi amplitudo state yang dicari:"

#: ../../tutorials/algorithms/07_grover.ipynb:37
msgid "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"
msgstr "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"

#: ../../tutorials/algorithms/07_grover.ipynb:42
msgid "Here, \\* :math:`\\mathcal{A}` is the initial search state for the algorithm, which is just Hadamards, :math:`H^{\\otimes n}` for the textbook Grover search, but can be more elaborate for Amplitude Amplification \\* :math:`\\mathcal{S_0}` is the reflection about the all 0 state"
msgstr "Di sini, \\ * :math:` \\mathcal{A}` adalah state awal algoritma pencarian, yang hanya gate Hadamard, :math:` H ^ {\\otimes n} ` untuk algorithma Grover di buku teks, tetapi dapat lebih rumit untuk Amplifikasi Amplitudo \\ * :math:` \\mathcal{S_0}` adalah refleksi seputar state semua 0"

#: ../../tutorials/algorithms/07_grover.ipynb:44
msgid "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"
msgstr "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}"

#: ../../tutorials/algorithms/07_grover.ipynb:49
msgid "\\* :math:`\\mathcal{S_f}` is the oracle that applies"
msgstr "\\ * :math:` \\mathcal{S_f}` adalah oracle yang melakukan"

#: ../../tutorials/algorithms/07_grover.ipynb:51
msgid "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"
msgstr "|x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle"

#: ../../tutorials/algorithms/07_grover.ipynb:56
msgid "where :math:`f(x)` is 1 if :math:`x` is a good state and otherwise 0."
msgstr "dimana :math:` f (x) ` adalah 1 jika :math:` x ` adalah state yang dicari dan sebaliknya 0."

#: ../../tutorials/algorithms/07_grover.ipynb:58
msgid "In a nutshell, Grover’s algorithm applies different powers of :math:`\\mathcal{Q}` and after each execution checks whether a good solution has been found."
msgstr "Dalam ringkasnya, algoritma Grover menerapkan :math:` \\mathcal{Q}` dengan frekuensi eksekusi yang berbeda dan setelah setiap eksekusi memeriksa apakah solusi yang dicari telah ditemukan."

#: ../../tutorials/algorithms/07_grover.ipynb:61
msgid "Running Grover’s algorithm"
msgstr "Menjalankan algoritma Grover"

#: ../../tutorials/algorithms/07_grover.ipynb:63
msgid "To run Grover’s algorithm with the ``Grover`` class, firstly, we need to specify an oracle for the circuit of Grover’s algorithm. In the following example, we use ``QuantumCircuit`` as the oracle of Grover’s algorithm. However, there are several other class that we can use as the oracle of Grover’s algorithm. We talk about them later in this tutorial."
msgstr "Untuk menjalankan algoritma Grover dengan kelas ``Grover``, pertama, kita perlu menentukan oracle untuk sirkuit algoritma Grover. Dalam contoh berikut, kita menggunakan ``QuantumCircuit`` sebagai oracle dari algoritma Grover. Namun, ada beberapa kelas lain yang dapat kita gunakan sebagai oracle dari algoritma Grover. Kita akan menyebutkan tentang mereka nanti di tutorial ini."

#: ../../tutorials/algorithms/07_grover.ipynb:65
msgid "Note that the oracle for ``Grover`` must be a *phase-flip* oracle. That is, it multiplies the amplitudes of the of “good states” by a factor of :math:`-1`. We explain later how to convert a *bit-flip* oracle to a phase-flip oracle."
msgstr "Perhatikan bahwa oracle untuk ``Grover`` harus merupakan oracle *pembalik fase*. Artinya, ia mengalikan amplitudo dari \"state yang dicari\" dengan faktor :math:`-1`. Akan dijelaskan nanti bagaimana mengkonversi sebuah oracle *pembalik bit* ke oracle pembalik fase."

#: ../../tutorials/algorithms/07_grover.ipynb:120
msgid "Then, we specify a backend and call the ``run`` method of ``Grover`` with a backend to execute the circuits. The returned result type is a ``GroverResult``."
msgstr "Kemudian, kita menentukan sebuah backend dan memanggil metoda ``run`` dari ``Grover`` dengan sebuah backend untuk mengeksekusi sirkuit. Tipe hasil yang dikembalikan adalah ``GroverResult``."

#: ../../tutorials/algorithms/07_grover.ipynb:122
msgid "If the search was successful, the ``oracle_evaluation`` attribute of the result will be ``True``. In this case, the most sampled measurement, ``top_measurement``, is one of the “good states”. Otherwise, ``oracle_evaluation`` will be False."
msgstr "Jika pencarian berhasil, atribut ``oracle_evaluation`` dari hasil akan menjadi ``True``. Dalam hal ini, pengukuran yang paling banyak dihasilkan, ``top_measurement``, adalah salah satu \"state yang dicari\". Jika tidak, ``oracle_evaluation`` akan menjadi False."

#: ../../tutorials/algorithms/07_grover.ipynb:176
msgid "In the example, the result of ``top_measurement`` is ``11`` which is one of “good state”. Thus, we succeeded to find the answer by using ``Grover``."
msgstr "Dalam contoh, hasil dari ``top_measurement`` adalah ``11`` yang merupakan salah satu dari \"state yang dicari\". Dengan demikian, kita berhasil menemukan jawabannya dengan menggunakan ``Grover``."

#: ../../tutorials/algorithms/07_grover.ipynb:188
msgid "Using the different types of classes as the oracle of ``Grover``"
msgstr "Menggunakan bermacam tipe kelas berbeda sebagai oracle ``Grover``"

#: ../../tutorials/algorithms/07_grover.ipynb:190
msgid "In the above example, we used ``QuantumCircuit`` as the oracle of ``Grover``. However, we can also use ``qiskit.aqua.components.oracles.Oracle``, and ``qiskit.quantum_info.Statevector`` as oracles. All the following examples are when :math:`|11\\rangle` is “good state”"
msgstr "Pada contoh di atas, kita menggunakan ``QuantumCircuit`` sebagai oracle ``Grover``. Namun, kita juga dapat menggunakan ``qiskit.aqua.components.oracles.Oracle``, dan ``qiskit.quantum_info.Statevector`` sebagai oracle. Semua contoh berikut adalah ketika :math:`|11\\rangle` adalah \"state yang dicari\""

#: ../../tutorials/algorithms/07_grover.ipynb:244
msgid "Internally, the statevector is mapped to a quantum circuit:"
msgstr "Secara internal, statevector dipetakan ke sirkuit kuantum:"

#: ../../tutorials/algorithms/07_grover.ipynb:274
msgid "The ``Oracle`` components in Qiskit Aqua allow for an easy construction of more complex oracles. The ``Oracle`` type has the interesting subclasses: \\* ``LogicalExpressionOracle``: for parsing logical expressions such as ``'~a | b'``. This is especially useful for solving 3-SAT problems and is shown in the accompanying `Grover Examples <08_grover_examples.ipynb>`__ tutorial. \\* ``TrutheTableOracle``: for converting binary truth tables to circuits"
msgstr "Komponen ``Oracle`` di Qiskit Aqua memudahkan konstruksi oracle yang lebih kompleks. Tipe ``Oracle`` memiliki subkelas yang menarik: \\* ``LogicalExpressionOracle``: untuk mengurai ekspresi logis seperti ``'~ a | b'``. Ini sangat berguna untuk memecahkan masalah 3-SAT dan bisa dilihat di penyerta tutorial `Contoh Grover <08_grover_examples.ipynb>` \\* ``TrutheTableOracle``: untuk mengubah tabel kebenaran biner ke sirkuit"

#: ../../tutorials/algorithms/07_grover.ipynb:276
msgid "Here we’ll use the ``LogicalExpressionOracle`` for the simple example of finding the state :math:`|11\\rangle`, which corresponds to ``'a & b'``."
msgstr "Di sini kita akan menggunakan ``LogicalExpressionOracle`` untuk contoh sederhana menemukan state :math:` |11\\rangle`, yang merupakan solusi ``'a & b'``."

#: ../../tutorials/algorithms/07_grover.ipynb:312
msgid "You can observe, that this oracle is actually implemented with three qubits instead of two!"
msgstr "Anda dapat mengamati, bahwa oracle ini diimplementasikan dengan tiga qubit dan bukan dua!"

#: ../../tutorials/algorithms/07_grover.ipynb:314
msgid "That is because the ``LogicalExpressionOracle`` is not a phase-flip oracle (which flips the phase of the good state) but a bit-flip oracle. This means it flips the state of an auxiliary qubit if the other qubits satisfy the condition. For Grover’s algorithm, however, we require a phase-flip oracle. To convert the bit-flip oracle to a phase-flip oracle we sandwich the controlled-NOT by :math:`X` and :math:`H` gates, as you can see in the circuit above."
msgstr "Itu karena ``LogicalExpressionOracle`` bukan sebuah oracle pembalik fase (yang membalik fase state yang dicari) melainkan sebuah oracle pembalik bit. Ini berarti itu membalik state dari qubit tambahan jika qubit lain memenuhi kondisi. Untuk algoritma Grover, walau begitu, kita memerlukan sebuah oracle pembalik fase. Untuk mengkonversi oracle pembalik bit ke sebuah oracle pembalik fase kita mengapit Kontrol-NOT dengan :math:`X` dan :math:`H`, seperti yang dapat Anda lihat di sirkuit di atas."

#: ../../tutorials/algorithms/07_grover.ipynb:316
msgid "**Note:** This transformation from a bit-flip to a phase-flip oracle holds generally and you can use this to convert your oracle to the right representation."
msgstr "** Note:** Transformasi dari pembalik bit ke sebuah oracle pembalik fase berlaku secara umum dan Anda dapat menggunakan ini untuk mengubah oracle Anda ke representasi yang tepat."

#: ../../tutorials/algorithms/07_grover.ipynb:328
msgid "Amplitude amplification"
msgstr "Amplifikasi Amplitudo"

#: ../../tutorials/algorithms/07_grover.ipynb:330
msgid "Grover’s algorithm uses Hadamard gates to create the uniform superposition of all the states at the beginning of the Grover operator :math:`\\mathcal{Q}`. If some information on the good states is available, it might be useful to not start in a uniform superposition but only initialize specific states. This, generalized, version of Grover’s algorithm is referred to *Amplitude Amplification*."
msgstr "Algoritma Grover menggunakan gate Hadamard untuk membuat superposisi seragam semua state di awal operator Grover :math:`\\mathcal{Q}`. Jika informasi mengenai state yang dicari tersedia, mungkin akan berguna untuk tidak memulai dari superposisi yang seragam tetapi dari inisialisasi keadaan tertentu. Generalisasi ini merupaka versi dari algoritma Grover yang disebut *Amplifikasi Amplitudo*."

#: ../../tutorials/algorithms/07_grover.ipynb:332
msgid "In Qiskit, the initial superposition state can easily be adjusted by setting the ``state_preparation`` argument."
msgstr "Di Qiskit, keadaan superposisi awal dapat dengan mudah disesuaikan dengan pengaturan argumen ``state_preparation``."

#: ../../tutorials/algorithms/07_grover.ipynb:335
msgid "State preparation"
msgstr "Persiapan state"

#: ../../tutorials/algorithms/07_grover.ipynb:337
msgid "A ``state_preparation`` argument is used to specify a quantum circuit that prepares a quantum state for the start point of the amplitude amplification. By default, a circuit with $H^{:nbsphinx-math:`\\otimes `n} $ is used to prepare uniform superposition (so it will be Grover’s search). The diffusion circuit of the amplitude amplification reflects ``state_preparation`` automatically."
msgstr "Argumen ``state_preparation`` digunakan untuk menentukan sebuah sirkuit kuantum yang menyiapkan keadaan kuantum sebagai titik awal dari amplifikasi amplitudo. Secara default, sebuah sirkuit dengan $H^{:nbsphinx-math:` \\otimes ` n} $ digunakan untuk menyiapkan superposisi seragam (sehingga merupakan Grover search). Sirkuit difusi dari amplitudo amplifikasi merupakan ``state_preparation`` secara otomatis."

#: ../../tutorials/algorithms/07_grover.ipynb:442
msgid "Full flexibility"
msgstr "Fleksibilitas penuh"

#: ../../tutorials/algorithms/07_grover.ipynb:444
msgid "For more advanced use, it is also possible to specify the entire Grover operator by setting the ``grover_operator`` argument. This might be useful if you know more efficient implementation for :math:`\\mathcal{Q}` than the default construction via zero reflection, oracle and state preparation."
msgstr "Untuk penggunaan lanjutan, juga dimungkinkan untuk menentukan seluruh operator Grover dengan menetapkan argumen ``grover_operator``. Ini mungkin berguna jika Anda tahu implementasi yang lebih efisien untuk :math:` \\mathcal{Q}` daripada konstruksi standar melalui refleksi nol, oracle dan persiapan state."

#: ../../tutorials/algorithms/07_grover.ipynb:446
msgid "The ``qiskit.circuit.library.GroverOperator`` can be a good starting point and offers more options for an automated construction of the Grover operator. You can for instance \\* set the ``mcx_mode`` \\* ignore qubits in the zero reflection by setting ``reflection_qubits`` \\* explicitly exchange the :math:`\\mathcal{S_f}, \\mathcal{S_0}` and :math:`\\mathcal{A}` operations using the ``oracle``, ``zero_reflection`` and ``state_preparation`` arguments"
msgstr "``qiskit.circuit.library.GroverOperator`` dapat menjadi titik awal yang baik dan menawarkan banyak pilihan untuk konstruksi otomatis operator Grover. Anda dapat sebagai contoh \\* mengatur ``mcx_mode`` \\* mengabaikan qubit dalam refleksi nol dengan mengatur ``reflection_qubits`` \\* secara eksplisit menukar operasi :math:`\\mathcal{S_f}, \\mathcal{S_0}` dan :math:`\\mathcal{A}` dengan menggunakan argumen ``oracle``, ``zero_reflection`` dan ``state_preparation``"

#: ../../tutorials/algorithms/07_grover.ipynb:457
msgid "For instance, imagine the good state is a three qubit state :math:`|111\\rangle` but we used 2 additional qubits as auxiliary qubits."
msgstr "Sebagai contoh, bayangkan state yang dicari adalah state tiga qubit :math:`|111\\rangle` tapi kami menggunakan 2 qubit tambahan sebagai qubit pembantu."

#: ../../tutorials/algorithms/07_grover.ipynb:491
msgid "Then, per default, the Grover operator implements the zero reflection on all five qubits."
msgstr "Kemudian, per standar, operator Grover mengimplementasikan refleksi nol pada semua lima qubit."

#: ../../tutorials/algorithms/07_grover.ipynb:522
msgid "But we know that we only need to consider the first three:"
msgstr "Tapi kita tahu bahwa hanya perlu mempertimbangkan tiga hal pertama:"

#: ../../tutorials/algorithms/07_grover.ipynb:554
msgid "Dive into other arguments of ``Grover``"
msgstr "Mendalami argumen lain dari ``Grover``"

#: ../../tutorials/algorithms/07_grover.ipynb:556
msgid "``Grover`` has arguments other than ``oracle`` and ``state_preparation``. We will explain them in this section."
msgstr "``Grover`` memiliki argumen selain ``oracle`` dan ``state_preparation``. Kami akan menjelaskan mereka dalam bagian ini."

#: ../../tutorials/algorithms/07_grover.ipynb:559
msgid "Specifying ``good_state``"
msgstr "Menspesifikasikan ``good_state``"

#: ../../tutorials/algorithms/07_grover.ipynb:561
msgid "``good_state`` is used to check whether the measurement result is correct or not internally. It can be a list of binary strings, a list of integer, ``Statevector``, and Callable. If the input is a list of bitstrings, each bitstrings in the list represents a good state. If the input is a list of integer, each integer represent the index of the good state to be :math:`|1\\rangle`. If it is a ``Statevector``, it represents a superposition of all good states."
msgstr "``good_state`` digunakan untuk memeriksa apakah hasil pengukuran benar atau tidak secara internal. Ini dapat berupa daftar string biner, daftar bilangan bulat, ``Statevector``, dan Callable. Jika input adalah daftar bitstring, setiap bitstring dalam daftar mewakili state yang dicari. Jika input adalah daftar bilangan bulat, setiap bilangan bulat mewakili indeks dari state yang dicari menjadi :math:` | 1\\rangle`. Jika itu adalah ``Statevector``, itu mewakili superposisi dari semua state yang dicari."

#: ../../tutorials/algorithms/07_grover.ipynb:715
msgid "The number of ``iterations``"
msgstr "Jumlah ``iterasi``"

#: ../../tutorials/algorithms/07_grover.ipynb:717
msgid "The number of repetition of applying the Grover operator is important to obtain the correct result with Grover’s algorithm. The number of iteration can be set by the ``iteration`` argument of ``Grover``. The following inputs are supported: \\* an integer to specify a single power of the Grover operator that’s applied \\* or a list of integers, in which all these different powers of the Grover operator are run consecutively and after each time we check if a correct solution has been found"
msgstr "Jumlah pengulangan penerapan operator Grover sangat penting untuk mendapatkan hasil yang benar dengan algoritma Grover. Jumlah iterasi dapat diatur oleh argumen ``iteration`` dari ``Grover``. Input berikut didukung: \\* integer untuk menentukan frequensi dari operator Grover yang diterapkan \\* atau daftar bilangan bulat, di mana semua frequensi yang berbeda dari operator Grover dijalankan berurutan dan setelahnya diperiksa apakah solusi yang yang dicari telah ditemukan"

#: ../../tutorials/algorithms/07_grover.ipynb:719
msgid "Additionally there is the ``sample_from_iterations`` argument. When it is ``True``, instead of the specific power in ``iterations``, a random integer between 0 and the value in ``iteration`` is used as the power Grover’s operator. This approach is useful when we don’t even know the number of solution."
msgstr "Selain itu ada argumen ``sample_from_iterations``. Ketika diset ``True``, bukan frekuensi dalam ``iterations``, sebuah bilangan bulat acak antara 0 dan nilai ``iteration`` digunakan sebagai frekuensi operator Grover. Pendekatan ini berguna bahka ketika kita tidak tahu jumlah solusi."

#: ../../tutorials/algorithms/07_grover.ipynb:721
msgid "For more details of the algorithm using ``sample_from_iterations``, see [4]."
msgstr "Untuk detail lebih lanjut tentang algoritma menggunakan ``sample_from_iterations``, lihat [4]."

#: ../../tutorials/algorithms/07_grover.ipynb:725
msgid "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"
msgstr "[4]: Boyer et al., Tight bounds on quantum searching ` arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>` __"

#: ../../tutorials/algorithms/07_grover.ipynb:775
msgid "When the number of solutions is known, we can also use a static method ``optimal_num_iterations`` to find the optimal number of iterations. Note that the output iterations is an approximate value. When the number of qubits is small, the output iterations may not be optimal."
msgstr "Ketika jumlah solusi sudah diketahui, kita juga dapat menggunakan metode statis ``optimal_num_iterations`` untuk menemukan jumlah iterasi yang optimal. Perhatikan bahwa output iterasi adalah nilai perkiraan. Ketika jumlah qubit masih kecil, output iterasi mungkin tidak optimal."

#: ../../tutorials/algorithms/07_grover.ipynb:818
msgid "Applying ``post_processing``"
msgstr "Menerapkan ``post_processing``"

#: ../../tutorials/algorithms/07_grover.ipynb:820
msgid "We can apply an optional post processing to the top measurement for ease of readability. It can be used e.g. to convert from the bit-representation of the measurement ``[1, 0, 1]`` to a DIMACS CNF format ``[1, -2, 3]``."
msgstr "Kita dapat menerapkan proses akhiran opsional ke pengukuran diatas untuk mempermudah pembacaan. Hal ini dapat digunakan misalnya untuk konversi dari bit-representasi pengukuran ``[1, 0, 1]`` ke format DIMACS CNF ``[1, -2, 3]``."

