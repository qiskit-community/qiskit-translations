msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-07 17:08+0000\n"
"PO-Revision-Date: 2021-04-07 18:17\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/06_qaoa.po\n"
"X-Crowdin-File-ID: 9454\n"
"Language: id_ID\n"

#: ../../tutorials/algorithms/06_qaoa.ipynb:10
msgid "This page was generated from `tutorials/algorithms/06_qaoa.ipynb`__."
msgstr "Halaman ini dihasilkan dari ` tutorials/algoritms/06_qaoa.ipynb ` __."

#: ../../tutorials/algorithms/06_qaoa.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/06_qaoa.ipynb>`_."
msgstr "Jalankan secara interaktif di ' IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/06_qaoa.ipynb>` _."

#: ../../tutorials/algorithms/06_qaoa.ipynb:9
msgid "Quantum Approximate Optimization Algorithm"
msgstr "Algoritma Perkiraan Optimisasi Kuantum"

#: ../../tutorials/algorithms/06_qaoa.ipynb:11
msgid "Qiskit has an implementation of the Quantum Approximate Optimization Algorithm `QAOA <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.QAOA.html>`__ and this notebook demonstrates using it for a graph partition problem."
msgstr "Qiskit memiliki implementasi dari Quantum Approximate Optimization Algoritma ` QAOA <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.QAOA.html>` __ dan notebook ini menunjukkan cara menggunakannya untuk masalah partisi graph."

#: ../../tutorials/algorithms/06_qaoa.ipynb:13
msgid "While QAOA can be directly used it often more convenient to use it in conjunction with the Optimization module. See the Optimization tutorials for more information."
msgstr "Sementara QAOA dapat langsung digunakan seringkali lebih nyaman untuk menggunakannya dengan modul Optimisasi. Lihat tutorial Optimisasi untuk informasi lebih lanjut."

#: ../../tutorials/algorithms/06_qaoa.ipynb:40
msgid "First we create a random graph and draw it so it can be seen."
msgstr "Pertama kita membuat graph acak dan meggambarnya untuk melihatnya."

#: ../../tutorials/algorithms/06_qaoa.ipynb:111
msgid "The brute-force method is as follows. Basically, we exhaustively try all the binary assignments. In each binary assignment, the entry of a vertex is either 0 (meaning the vertex is in the first partition) or 1 (meaning the vertex is in the second partition). We print the binary assignment that satisfies the definition of the graph partition and corresponds to the minimal number of crossing edges."
msgstr "Metode brute-force adalah sebagai berikut. Pada dasarnya, kita membabi buta mencoba semua alokasi biner. Di setiap alokasi biner, entri dari sebuah vertex adalah baik 0 (artinya vertex berada pada partisi pertama) atau 1 (artinya vertex berada pada partisi kedua). Kita print alokasi biner yang memenuhi definisi dari partisi graph dan sesuai dengan jumlah minimal dari edge yang bersilangan."

#: ../../tutorials/algorithms/06_qaoa.ipynb:173
msgid "The graph partition problem can be converted to an Ising Hamiltonian. Qiskit has different capabilities in the Optimization module to do this. Here, since the goal is to show QAOA, the module is used without further explanation to create the operator. The paper `Ising formulations of many NP problems <https://arxiv.org/abs/1302.5843>`__ may be of interest if you would like to understand the technique further."
msgstr ""

#: ../../tutorials/algorithms/06_qaoa.ipynb:194
msgid "So lets use the QAOA algorithm to find the solution."
msgstr "Jadi mari kita gunakan algoritma QAOA untuk menemukan solusinya."

#: ../../tutorials/algorithms/06_qaoa.ipynb:252
msgid "The outcome can be seen to match to the value computed above by brute force. But we can also use the classical ``NumPyMinimumEigensolver`` to do the computation, which may be useful as a reference without doing things by brute force."
msgstr "Hasilnya dapat dilihat cocok dengan nilai yang dihitung di atas dengan brute force. Tapi kita juga dapat menggunakan cara klasik ` ` NumPyMinimumEigensolver ` ` untuk melakukan komputasi, yang mungkin berguna sebagai referensi tanpa melakukan dengan brute force."

#: ../../tutorials/algorithms/06_qaoa.ipynb:301
msgid "It is also possible to use VQE as is shown below"
msgstr "Juga mungkin menggunakan VQE seperti yang ditunjukkan di bawah ini"

