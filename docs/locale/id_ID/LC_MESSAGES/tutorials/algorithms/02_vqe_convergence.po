msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-29 18:58+0000\n"
"PO-Revision-Date: 2021-04-29 20:03\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/02_vqe_convergence.po\n"
"X-Crowdin-File-ID: 9446\n"
"Language: id_ID\n"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:10
msgid "This page was generated from `tutorials/algorithms/02_vqe_convergence.ipynb`__."
msgstr "Halaman ini dibuat dari `tutorials/algoritms/02_vqe_convergence.ipynb`__."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/02_vqe_convergence.ipynb>`_."
msgstr "Jalankan secara interaktif di 'IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/02_vqe_convergence.ipynb>`_."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:9
msgid "Monitoring VQE convergence"
msgstr "Pemantauan konvergensi VQE"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:11
msgid "Variational algorithms in Qiskit, like `VQE <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.html>`__ and `QAOA <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.QAOA.html>`__, provide the option for a user to give a callback method that can be used to monitor optimization progress as the algorithm runs and converges to the minimum. The callback is invoked for each functional evaluation by the optimizer and provides the current optimizer value, evaluation count, current optimizer parameters etc. Note that, depending on the specific optimizer this may not be each iteration (step) of the optimizer, so for example if the optimizer is calling the cost function to compute a finite difference based gradient this will be visible via the callback."
msgstr "Algoritma variasional dalam Qiskit, seperti ` VQE <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.html>` __ dan ` QAOA <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.QAOA.html>` __, memberikan pilihan bagi pengguna untuk memberikan metode callback yang dapat digunakan untuk memantau kemajuan optimisasi ketika algoritma berjalan dan menuju ke minimum. Callback dipanggil untuk setiap evaluasi fungsional oleh optimizer dan menyediakan nilai optimizer saat itu, jumlah evaluasi, parameter optimizer saat itu dll. Perhatikan bahwa, tergantung pada spesifikasi optimizer ini mungkin tidak bisa pada setiap iterasi (langkah) dari optimizer, jadi misalnya jika optimizer memanggil fungsi cost untuk menghitung gradien berbasis finite difference ini akan terlihat melalui callback."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:14
msgid "This notebook demonstrates using Qiskitâ€™s VQE algorithm to plot graphs of the convergence path to ground state energy with a selected set of optimizers."
msgstr "Notebook ini mendemonstrasikan penggunaan algoritma VQE dari Qiskit untuk plot grafik jalur konvergensi ke energi keadaan dasar dengan set yang dipilih dari pengoptimisasi."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:44
msgid "First we create a qubit operator for VQE. Here we will use the same operator as used in the algorithms introduction, which was originally computed by Qiskit Chemistry for an H2 molecule."
msgstr "Pertama kita buat operator qubit untuk VQE. Di sini kita menggunakan operator sama seperti pada perkenalan algoritma, yang aslinya dihitung dengan Qiskit Chemistry untuk molekul H2."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:69
msgid "We will show the callback usage below over a set of optimizers for comparison. The minimum energy of the H2 Hamiltonian can be found quite easily so we are able to set maxiters to a small value"
msgstr "Kita akan memperlihatkan penggunaan callback serperti di bawah ini terhadap satu set optimizer untuk perbandingan. Energi minimum Hamiltonian H2 dapat mudah ditemukan sehingga kita cukup mengatur maxiters ke nilai yang kecil"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:129
msgid "Now from the callback data we stored we can plot the energy value at each objective function call each optimizer makes. An optimizer using a finite difference method for computing gradient has that characteristic step like plot where for a number of evaluations it is computing the value for close by points to establish a gradient (the close by points having very similar values whose difference cannot be seen on the scale of the graph here)."
msgstr "Sekarang dari data callback yang disimpan kita dapat plot nilai energi pada setiap panggilan fungsi objektif dari tiap optimizer. Optimizer menggunakan metode finite difference untuk komputasi gradien memiliki karakteristik seperti plot tangga di mana untuk sejumlah evaluasi komputasi nilai di sekitar titik-titik untuk meghitung gradien (titik yang dekat memiliki nilai yang mirip sehingga perbedaan tidak dapat dilihat pada skala grafik di sini)."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:164
msgid "Finally since the above problem is still easily tractable classically we can use NumPyMinimumEigensolver to compute a reference value for the solution. We can now plot the difference from the resultant exact solution as the energy converges with VQE towards the minimum value which should be that exact classical solution."
msgstr "Akhirnya karena masalah di atas masih bisa dipecahkan secara klasik kita dapat menggunakan NumPyMinimumEigensolver untuk menghitung nilai referensi dari solusi. Sekarang kita dapat plot perbedaan dari solusi eksak ketika energi VQE konversi menuju nilai minimum yang seharusnya adalah sama dengan solusi eksak klasik."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:233
msgid "Using Gradient framework"
msgstr "Menggunakan Kerangka Gradien"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:235
msgid "Qiskit now has a Gradient framework as part of the Operator capability. With the gradient computed for the optimizer we now see just the optimization steps themselves."
msgstr "Qiskit sekarang memiliki kerangka gradien sebagai bagian dari kapabilitas Operator. Dengan gradien yang dihitung untuk optimizer kita barusan sekarang melihat langkah-langkah optimasi sendiri."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:316
msgid "Monitoring via the logging"
msgstr "Pemantauan melalui logging"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:318
msgid "Much of the code is instrumented with `Python logging <https://docs.python.org/3/library/logging.html>`__ statements. The logging is configurable to adjust level of logging etc. An easy way to enable logging in the ``qiskit.aqua`` module is to run the following code, where here we set the logging level to ``INFO``"
msgstr "Sebagian banyak kode instruksi logging melalui `Python logging <https://docs.python.org/3/library/logging.html>`__. Logging ini bisa dikonfigurasi menyesuaikan levelnya dsb. Cara mudah untuk memungkinkan logging di module ``qiskit.aqua`` adalah dengan menjalankan kode dibawah, dimana level logging di set ``INFO``"

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:343
msgid "and at INFO level logging VQE will include information on the evaluations, as below."
msgstr "dan di INFO level logging dari VQE akan berisi informasi dari evaluasi, seperti dibawah."

#: ../../tutorials/algorithms/02_vqe_convergence.ipynb:345
msgid "``020-11-04 16:55:33,450:qiskit.aqua.algorithms.minimum_eigen_solvers.vqe:INFO: Energy evaluation returned [-8.88931977] - 6801.61572 (ms), eval count: 1 2020-11-04 16:55:34,463:qiskit.aqua.algorithms.minimum_eigen_solvers.vqe:INFO: Energy evaluation returned [-8.88931977] - 1012.12025 (ms), eval count: 2 2020-11-04 16:55:35,483:qiskit.aqua.algorithms.minimum_eigen_solvers.vqe:INFO: Energy evaluation returned [-8.88931977] - 1019.99474 (ms), eval count: 3 2020-11-04 16:55:36,646:qiskit.aqua.algorithms.minimum_eigen_solvers.vqe:INFO: Energy evaluation returned [-8.88931977] - 1162.09555 (ms), eval count: 4``"
msgstr "``020-11-04 16:55:33,450:qiskit.aqua.algorithms.minimum_eigen_solvers.vqe:INFO: Energy evaluation returned [-8.88931977] - 6801.61572 (ms), eval count: 1 2020-11-04 16:55:34,463:qiskit.aqua.algorithms.minimum_eigen_solvers.vqe:INFO: Energy evaluation returned [-8.88931977] - 1012.12025 (ms), eval count: 2 2020-11-04 16:55:35,483:qiskit.aqua.algorithms.minimum_eigen_solvers.vqe:INFO: Energy evaluation returned [-8.88931977] - 1019.99474 (ms), eval count: 3 2020-11-04 16:55:36,646:qiskit.aqua.algorithms.minimum_eigen_solvers.vqe:INFO: Energy evaluation returned [-8.88931977] - 1162.09555 (ms), eval count: 4``"

