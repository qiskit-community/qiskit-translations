msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-29 18:58+0000\n"
"PO-Revision-Date: 2021-04-29 20:03\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/01_algorithms_introduction.po\n"
"X-Crowdin-File-ID: 9444\n"
"Language: id_ID\n"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:10
msgid "This page was generated from `tutorials/algorithms/01_algorithms_introduction.ipynb`__."
msgstr "Halaman ini dibuat dari `tutorials/algorithms/01_algorithms_introduction.ipynb`__."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/01_algorithms_introduction.ipynb>`_."
msgstr "Jalankan secara interaktif di 'IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/01_algorithms_introduction.ipynb>`_."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:9
msgid "An Introduction to Algorithms in Qiskit"
msgstr "Perkenalan Algoritma di Qiskit"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:11
msgid "This is an introduction to algorithms in Qiskit and provides a high-level overview to help understand the various aspects of the functionality to get started. Other tutorials will provide more in-depth material, on given algorithms, and ways to use them etc."
msgstr "Ini adalah perkenalan algoritma - algoritma yang ada di Qiskit dan memberi ringkasan tingkat tinggi untuk membantu memahami berbagai aspek fungsi untuk memulai program. Tutorial lainnya akan memberikan materi mendalam tentang algoritma, cara untuk menggunakannya, dll."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:23
msgid "How is the algorithm library structured?"
msgstr "Bagaimana struktur pustaka algoritma?"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:25
msgid "Qiskit provides a number of `Algorithms <https://qiskit.org/documentation/apidoc/qiskit.aqua.algorithms.html>`__ and they are grouped by category according to the task they can perform. For instance ``Minimum Eigensolvers`` to find the smallest eigen value of an operator, for example ground state energy of a chemistry Hamiltonian or a solution to an optimization problem when expressed as an Ising Hamiltonian. There are ``Classifiers`` for machine learning classification problems and ``Amplitude Estimators`` for value estimation that can be used say in financial applications. The full set of categories can be seen in the Algorithms documentation link above."
msgstr "Qiskit menyediakan sejumlah `Algorithms <https://qiskit.org/documentation/apidoc/qiskit.aqua.algorithms.html>`__ dan mereka dikelompokkan berdasarkan kategori sesuai dengan tugas yang dapat mereka lakukan. Sebagai contoh ``Minimum Eigensolvers`` untuk menemukan eigenvalue terkecil dari operator, misalnya energi keadaan dasar dari Hamiltonian kimia atau solusi optimisasi ketika ditulis sebagai Hamiltonian Ising. Ada ``Classifier`` untuk klasifikasi pembelajaran mesin dan ``Estimasi Amplitudo`` untuk estimasi nilai yang dapat digunakan dalam aplikasi keuangan. Set lengkap kategori dapat dilihat di link dokumentasi Algorithms di atas."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:28
msgid "Algorithms are configurable and often part of the configuration will be in the form of smaller building blocks, of which different instances of the building block type can be given. For instance with ``VQE``, the Variational Quantum Eigensolver, it takes a trial wavefunction, in the form of a ``QuantumCircuit`` and a classical optimizer among other things. Such building blocks can be found as `Components <https://qiskit.org/documentation/apidoc/qiskit.aqua.components.html>`__ and as circuits from the `Circuit Library <https://qiskit.org/documentation/apidoc/circuit_library.html>`__."
msgstr "Algoritma yang dapat dikonfigurasi dan sering menjadi bagian dari konfigurasi adalah dalam bentuk blok bangunan yang lebih kecil, dimana contoh yang berbeda dari tipe blok bangunan dapat diberikan. Misalnya dengan ``VQE``, Variational Quantum Eigensolver, dibutuhkan fungsi gelombang uji, dalam bentuk ``QuantumCircuit`` dan pengoptimasi klasik, dan masih banyak lagi. Blok bangunan semacam itu dapat ditemukan sebagai `Components <https://qiskit.org/documentation/apidoc/qiskit.aqua.components.html>`__ dan sebagai sirkuit dari `Circuit Library <https://qiskit.org/documentation/apidoc/circuit_library.html>`__."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:31
msgid "Let’s take a look at an example to construct a VQE instance. Here ``TwoLocal`` is the variational form (trial wavefunction), a parameterized circuit which can be varied, and ``SLSQP`` a classical optimizer. These are created as separate instances and passed to VQE when it is constructed. Trying, for example, a different classical optimizer, or variational form is simply a case of creating an instance of the one you want and passing it into VQE."
msgstr "Mari kita lihat contoh konstruksi dari instans VQE. Di sini ``TwoLocal`` adalah bentuk variasional (fungsi gelombang uji), sebuah sirkuit berparameter yang dapat divariasikan, dan ``SLSQP`` sebuah pengoptimisasi klasik. Keduanya dibuat sebagai instans terpisah dan diteruskan ke VQE ketika dikonstruksi. Mencoba, sebagai contoh, pengoptimal klasik berbeda, atau bentuk variasional lainnya adalah semudah menciptakan sebuah instans dari yang Anda inginkan dan diteruskan ke VQE."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:59
msgid "Let’s draw the ansatz so we can see it’s a QuantumCircuit where θ[0] through θ[7] will be the parameters that are varied as VQE optimizer finds the minimum eigenvalue. We’ll come back to the parameters later in a working example below."
msgstr "Mari kita gambar ansatz sehingga bisa dilihat ini adalah sebuah QuantumCircuit dimana dari θ[0] sampai θ[7] adalah parameter yang divariasi ketika pengoptimisasi VQE menemukan eigenvalue minimum. Kita akan kembali ke parameter - parameter ini nanti dalam contoh di bawah ini."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:89
msgid "But more is needed before we can run the algorithm so let’s get to that next."
msgstr "Tapi banyak hal diperlukan sebelum kita dapat menjalankan algoritma ini jadi mari kita bahas."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:101
msgid "How to run an algorithm?"
msgstr "Bagaimana menjalankan algoritma?"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:103
msgid "In order to run an algorithm we need to have backend, a simulator or real device, on which the circuits that comprise the algorithm can be run. So for example we can use the ``statevector_simulator`` from the BasicAer provider."
msgstr "Untuk menjalankan algoritma kita perlu memiliki backend, sebuah simulator atau perangkat nyata, di mana sirkuit yang mewujudkan algoritma dapat dijalankan. Jadi misalnya kita dapat menggunakan ``statevector_simulator`` dari provider BasicAer."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:126
msgid "Now a backend on its own does not have information on how you might want to run the circuits etc. For example how many shots, do you want a noise model, even options around transpiling the circuits. For this Qiskit Aqua has a `QuantumInstance <https://qiskit.org/documentation/stubs/qiskit.aqua.QuantumInstance.html>`__ which is provided both the backend as well as various settings around the circuit processing and execution so for instance:"
msgstr "Sekarang backend itu sendiri tidak memiliki informasi tentang bagaimana Anda mungkin ingin menjalankan sirkuit dll. Misalnya berapa banyak shots, bagaimana Anda ingin model derau, atau bahkan pilihan bagaimana mentranspilasi sirkuit. Untuk ini Qiskit Aqua memiliki `QuantumInstance <https://qiskit.org/documentation/stubs/qiskit.aqua.QuantumInstance.html>`__ yang menyediakan baik backend serta berbagai pengaturan di sekitar pengolahan sirkuit dan eksekusi sehingga misalnya:"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:150
msgid "Note: if you provide the backend directly then internally a QuantumInstance will be created from it, with default settings, so at all times the algorithms are working through a QuantumInstance."
msgstr "Catatan: jika Anda memberikan backend secara langsung maka secara internal sebuah QuantumInstance akan dibuat darinya, dengan pengaturan standar, sehingga setiap saat algoritma bekerja melalui sebuah QuantumInstance."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:152
msgid "So now we would be able to call the `run() <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.html#qiskit.aqua.algorithms.VQE.run>`__ method, which is common to all algorithms and returns a result specific for the algorithm. In this case since VQE is a MinimumEigensolver we could use the `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.html#qiskit.aqua.algorithms.VQE.compute_minimum_eigenvalue>`__ method. The latter is the interface of choice for the application modules, such as Chemistry and Optimization, in order that they can work interchangeably with any algorithm within the specific category."
msgstr "Jadi sekarang kita akan dapat memanggil metoda `run() <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.html#qiskit.aqua.algorithms.VQE.run>`__, yang umum untuk semua algoritma dan mengembalikan hasil spesifik untuk algoritma. Dalam hal ini karena VQE adalah MinimumEigensolver kita bisa menggunakan metoda `compute_mininum_eigenvalue() <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.html#qiskit.aqua.algorithms.VQE.compute_minimum_eigenvalue>`__. Yang terakhir ini adalah interface pilihan untuk modul aplikasi, seperti Kimia dan Optimisasi, agar mereka dapat digunakan secara kompatibel dengan setiap algoritma dalam kategori tertentu."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:165
msgid "A complete working example"
msgstr "Sebuah contoh lengkap konkrit"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:167
msgid "Let’s put what we have learned from above together and create a complete working example. VQE will find the minimum eigenvalue, i.e. minimum energy value of a Hamiltonian operator and hence we need such an operator for VQE to work with. Such an operator is given below. This was originally created by the Chemistry application module as the Hamiltonian for an H2 molecule at 0.735A interatomic distance. It’s a sum of Pauli terms as below, but for now I am not going to say anything further about it since the goal is to run the algorithm, but further information on operators can be found in other tutorials."
msgstr ""

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:195
msgid "So let’s build a VQE instance passing the operator, and a backend using a QuantumInstance, to the constructor. Now VQE does have setters so the operator and backend can also be passed later. Setting them later can be useful when creating an algorithm without this problem specific information and then later using it, say with the chemistry application module, which would create the operator for the specific chemistry problem being solved."
msgstr "Jadi mari kita buat sebuah instans VQE yang melewati operator, dan sebuah backend menggunakan QuantumInstance, untuk konstruktor. Sekarang VQE memiliki setter sehingga operator dan backend juga dapat diteruskan nanti. Menetapkan mereka kemudian dapat berguna ketika membuat sebuah algoritma tanpa informasi spesifik dari permasalahannya dan kemudian menggunakannya, katakanlah dengan modul aplikasi kimia, yang akan membuat operator untuk masalah kimia spesifik yang dingin dipecahkan."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:197
msgid "Note: In order that you can run this notebook and see the exact same output the random number generator used throughout Aqua in aqua_globals, as well as the transpiler and simulator, via the QuantumInstance, are seeded. You do not have to do this but if want to be able to reproduce the exact same outcome each time then this is how it’s done."
msgstr "Catatan: Agar Anda dapat menjalankan notebook ini dan melihat output yang sama, generator bilangan acak yang digunakan di seluruh Aqua dalam aqua_globals, serta transpiler dan simulator, melalui QuantumInstance, di set dengan seed. Anda tidak perlu melakukan ini tetapi jika ingin mendapat hasil yang sama setiap kali maka ini adalah caranya."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:199
msgid "So let’s run VQE and print the result object it returns."
msgstr "Jadi mari kita jalankan VQE dan print hasil objek yang dihasilkan."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:283
msgid "From the above result we can see it took the optimizer ``72`` evaluations of parameter values until it found the minimum eigenvalue of ``-1.85727`` which is the electronic ground state energy of the given H2 molecule. The optimal parameters of the ansatz can also be seen which are the values that were in the ansatz at the minimum value."
msgstr "Dari hasil di atas kita bisa melihat pengoptimisasi memerlukan ``72`` evaluasi dari nilai parameter sampai menemukan nilai eigen minimum ``-1.85727`` yang merupakan energi keadaan dasar elektronik dari molekul H2 yang diberikan. Parameter optimal dari ansatz juga dapat dilihat yang merupakan nilai yang ada di dalam ansatz pada nilai eigen minimum."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:295
msgid "Using VQE as a MinimumEigensolver"
msgstr "Menggunakan VQE sebagai MinimumEigensolver"

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:297
msgid "To close off let’s use the MinimumEigensolver interface and also create a VQE instance without supplying either the operator or QuantumInstance. We later set the QuantumInstance and finally pass the operator on the ``compute_minimum_eigenvalue`` method (though we could have passed it in earlier via the setter instead, as long as by the time VQE runs it has an operator to work on)."
msgstr "Untuk penutup, mari kita gunakan interface MinimumEigensolver dan juga membuat instans VQE tanpa memasok baik operator atau QuantumInstance. Kita kemudian menetapkan QuantumInstance dan akhirnya menyalurkan operator ke metoda ``compute_minimum_eigenvalue`` (meskipun kita bisa juga menyalurkannnya lebih awal melalui setter, selama pada saat VQE berjalan ada operator untuk dijalankan)."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:379
msgid "As the identical seeding was used as the prior example the result can be seen to be the same."
msgstr "Karena seed identik digunakan pada contoh sebelumnya hasilnya dapat dilihat menjadi sama."

#: ../../tutorials/algorithms/01_algorithms_introduction.ipynb:390
msgid "This concludes this introduction to algorithms in Qiskit. Please check out the other algorithm tutorials in this series for both broader as well as more in depth coverage of the algorithms."
msgstr "Ini mengakhiri pengenalan pada algoritma di Qiskit. Silahkan periksa tutorial algoritma lainnya dalam seri ini untuk cakupan algoritma yang lebih luas dan lebih dalam."

