msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-29 18:58+0000\n"
"PO-Revision-Date: 2021-04-29 20:03\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/09_textbook_algorithms.po\n"
"X-Crowdin-File-ID: 9460\n"
"Language: id_ID\n"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:10
msgid "This page was generated from `tutorials/algorithms/09_textbook_algorithms.ipynb`__."
msgstr "Halaman ini dibuat dari ` tutorials/algoritms/09_textbook_algoritms.ipynb ` __."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/09_textbook_algorithms.ipynb>`_."
msgstr "Jalankan secara interaktif di ' IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/09_textbook_algorithms.ipynb>` _."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:9
msgid "Textbook and Shor’s algorithms"
msgstr "Buku Teks dan Algoritma Shor"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:11
msgid "Qiskit contains implementations of the well known textbook quantum algorithms such as the `Deutsch-Jozsa algorithm <https://qiskit.org/textbook/ch-algorithms/deutsch-jozsa.html>`__, the `Bernstein-Vazirani algorithm <https://qiskit.org/textbook/ch-algorithms/bernstein-vazirani.html>`__ and `Simon’s algorithm <https://qiskit.org/textbook/ch-algorithms/simon.html>`__."
msgstr "Qiskit berisi implementasi algoritma terkenal yang ada di buku teks seperti algoritma ` Deutsch-Jozsa ' <https://qiskit.org/textbook/ch-algorithms/deutsch-jozsa.html>` __, algoritma ` Bernstein-Vazirani <https://qiskit.org/textbook/ch-algorithms/bernstein-vazirani.html>` __ dan algoritma ` Simon <https://qiskit.org/textbook/ch-algorithms/simon.html>` __."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:13
msgid "Qiskit also has an implementation of `Shor’s algorithm <https://qiskit.org/textbook/ch-algorithms/shor.html>`__."
msgstr "Qiskit juga memiliki implementasi algoritma ` Shor ' <https://qiskit.org/textbook/ch-algorithms/shor.html>` __."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:15
msgid "The preceding references have detailed explanations and build-out of circuits whereas this notebook has examples with the pre-built algorithms in Qiskit that you can use for experimentation and education purposes."
msgstr "Referensi sebelumnya memiliki penjelasan rinci dan konstruksi siap-saji dari sirkuit sedangkan notebook ini memiliki contoh algoritma siap saji di Qiskit yang dapat Anda gunakan untuk eksperimen dan pendidikan."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:42
msgid "Deutsch-Jozsa algorithm"
msgstr "Algoritma Deutsch-Jozsa"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:44
msgid "Lets start with the `Deutsch-Jozsa algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.DeutschJozsa.html>`__ which can determine if a function is ``'balanced'`` or ``'constant'`` given such a function as input. We can experiment with it in Qiskit using an oracles created from a truth tables. So for example, we can create a ``TruthTableOracle`` instance as follows."
msgstr "Mari mulai dengan algoritma ` Deutsch-Jozsa <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.DeutschJozsa.html>` __ yang dapat menentukan apakah suatu fungsi adalah ` ` ` seimbang '` ` atau ` ` ` konstan' ` ` ketika fungsi diberikan sebagai input. Kita bisa bereksperimen dengannya di Qiskit menggunakan oracle yang dibuat dari truth table. Misalnya, kita dapat membuat instans ` ` TruthTableOracle ` ` sebagai berikut."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:66
msgid "As shown, the truthtable is specified with the ``bitstr`` containing values of all entries in the table. It has length :math:`8`, so the corresponding truth table is of :math:`3` input bits. We can of course see that this truth table represents a ``'balanced'`` function as half of values are :math:`1` and the other half :math:`0`."
msgstr "Seperti telah dilihat, truth table dispesifikasikan dengan nilai ` ` bitstr ` ` yang berisi semua entri dalam tabel. Ia memiliki panjang :math:` 8 `, sehingga truthtable yang berkaitan adalah input dari :math:` 3 ` bit. Kita tentu saja bisa melihat bahwa truthtable ini adalah fungsi ` ` 'seimbang ' ` ` jika setengah dari nilai adalah :math:` 1 ` dan setengah lainnya :math:` 0 `."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:68
msgid "It might seem like a moot point running Deutsch-Jozsa on a truthtable as the function outputs are literally listed as the truthtable’s values. The intention is to create an oracle circuit whose groundtruth information is readily available to us but obviously not to the quantum Deutsch-Jozsa algorithm that is to act upon the oracle circuit. In more realistic situations, the oracle circuit would be provided as a blackbox to the algorithm."
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:70
msgid "Above said, we can inspect the circuit corresponding to the function encoded in the ``TruthTableOracle`` instance."
msgstr "Seperti telah disebutkan, kita dapat inspeksi sirkuit yang berkaitan dengan fungsi yang dikodekan dalam instans ` ` TruthTableOracle ` `."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:100
msgid "As seen, the :math:`v_i`\\ ’s correspond to the 3 input bits; the :math:`o_0` is the oracle’s output qubit; the :math:`a_0` is an ancilla qubit."
msgstr "Seperti yang terlihat, :math:` v_i ` terkait dengan input 3 bit; :math:` o_0 ` adalah output dari oracle qubit; :math:` a_0 ` adalah qubit pembantu."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:102
msgid "Next we can simply create a ``DeutschJozsa`` instance using the oracle, and run it to check the result."
msgstr "Selanjutnya kita bisa membuat sebuah instans ` ` DeutschJozsa ` ` menggunakan oracle, dan menjalankannya untuk memeriksa hasil."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:145
msgid "We can of course quickly put together another example for a ``'constant'`` function, as follows."
msgstr "Kita tentu saja dapat dengan cepat mengumpulkan contoh lain untuk fungsi ` ` 'konstan' ` `, sebagai berikut."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:191
msgid "Bernstein-Vazirani algorithm"
msgstr "Algoritma Bernstein-Vazirani"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:193
msgid "Next the `Bernstein-Vazirani algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.BernsteinVazirani.html>`__ which tries to find a hidden string. Again, for the example, we create a TruthTableOracle instance."
msgstr "Selanjutnya algoritma ` Bernstein-Vazirani <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.BernsteinVazirani.html>` __ yang mencoba untuk menemukan string tersembunyi. Sekali lagi, sebagai contoh, kita membuat instans TruthTableOracle."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:215
msgid "As shown, the truthtable is specified with the ``bitstr`` containing values of all entries in the table. It has length :math:`8`, so the corresponding truth table is of :math:`3` input bits. The truthtable represents the function mappings as follows:"
msgstr "Seperti telah dilihat, truthtable dispesifikasikan dengan nilai ` ` bitstr ` ` yang berisi semua entri dalam tabel. Ia memiliki panjang :math:` 8 `, sehingga truthtable yang berkaitan adalah dari input :math:` 3 ` bit. Truthtable mewakili fungsi pemetaan sebagai berikut:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:217
msgid ":math:`\\mathbf{a} \\cdot 000 \\mod 2 = 0`"
msgstr ":math:`\\mathbf{a} \\cdot 000 \\mod 2 = 0`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:218
msgid ":math:`\\mathbf{a} \\cdot 001 \\mod 2 = 0`"
msgstr ":math:`\\mathbf{a} \\cdot 001 \\mod 2 = 0`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:219
msgid ":math:`\\mathbf{a} \\cdot 010 \\mod 2 = 1`"
msgstr ":math:`\\mathbf{a} \\cdot 010 \\mod 2 = 1`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:220
msgid ":math:`\\mathbf{a} \\cdot 011 \\mod 2 = 1`"
msgstr ":math:`\\mathbf{a} \\cdot 011 \\mod 2 = 1`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:221
msgid ":math:`\\mathbf{a} \\cdot 100 \\mod 2 = 1`"
msgstr ":math:`\\mathbf{a} \\cdot 100 \\mod 2 = 1`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:222
msgid ":math:`\\mathbf{a} \\cdot 101 \\mod 2 = 1`"
msgstr ":math:`\\mathbf{a} \\cdot 101 \\mod 2 = 1`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:223
msgid ":math:`\\mathbf{a} \\cdot 110 \\mod 2 = 0`"
msgstr ":math:`\\mathbf{a} \\cdot 110 \\mod 2 = 0`"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:224
msgid ":math:`\\mathbf{a} \\cdot 111 \\mod 2 = 0`"
msgstr ""

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:226
msgid "And obviously the goal is to find the bitstring :math:`\\mathbf{a}` that satisfies all the inner product equations."
msgstr "Dan tujuannya adalah mencari bitstring :math:` \\mathbf{a}` yang memenuhi semua persamaan inner produk."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:228
msgid "Lets again look at the oracle circuit, that now corresponds to the binary function encoded in the ``TruthTableOracle`` instance."
msgstr "Mari lihat lagi di sirkuit oracle, yang sekarang sesuai dengan fungsi biner yang dikodekan instans ` ` TruthTableOracle ` `."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:258
msgid "Again the :math:`v_i`\\ ’s correspond to the 3 input bits; the :math:`o_0` is the oracle’s output qubit; the :math:`a_0` is an ancilla qubit."
msgstr "Sekali lagi, :math:` v_i ` adalah input 3 bit; :math:` o_0 ` adalah output qubit dari oracle; :math:` a_0 ` adalah qubit pembantu."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:260
msgid "Let us first compute the groundtruth :math:`\\mathbf{a}` classically:"
msgstr "Mari lebih dahulu hitung nilai sebenarnya dari :math:` \\mathbf{a}` secara klasik:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:305
msgid "Next we can create a ``BernsteinVazirani`` instance using the oracle, and run it to check the result against the groundtruth."
msgstr "Selanjutnya kita bisa membuat instans ` ` BernsteinVazirani ` ` menggunakan oracle, dan menjalankannya untuk memeriksa hasilnya dibandingkan dengan nilai yang benar."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:350
msgid "Simon’s algorithm"
msgstr "Algoritma Simon"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:352
msgid "`Simon’s algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Simon.html>`__ is used to solve `Simon’s problem <https://en.wikipedia.org/wiki/Simon's_problem>`__. Once again, for the example, we create a TruthTableOracle instance, where the construction shows a different form."
msgstr "Algoritma ` Simon <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Simon.html>` __ digunakan untuk memecahkan ` masalah Simon <https://en.wikipedia.org/wiki/Simon's_problem>` __. Sekali lagi, untuk contoh, kita membuat sebuah instans TruthTableOracle, di mana konstruksinya berbeda dari sebelumnya."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:378
msgid "As shown, the truthtable is specified with three length-8 bitstrings, each containing the values of all entries for a particular output column in the table. Each bitstring has length :math:`8`, so the truthtable has :math:`3` input bits; There are :math:`3` bitstrings, so the truthtable has :math:`3` output bits."
msgstr "Seperti telah dilihat, truthtable ditentukan dengan tiga bitstring panjang 8, yang masing-masing berisi nilai dari semua entri dari kolom output tertentu di tabel. Setiap bitstring memiliki panjang :math:` 8 `, sehingga truthtable memiliki input :math:` 3 ` bit; Ada :math:` 3 ` bitstring, sehingga truthtable memiliki output :math:` 3 ` bit."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:380
msgid "The function :math:`f` represented by the truthtable is promised to be either 1-to-1 or 2-to-1. Our goal is to determine which. For the case of 2-to-1, we also need to compute the mask :math:`\\mathbf{s}`, which satisfies :math:`\\forall \\mathbf{x},\\mathbf{y}`: :math:`\\mathbf{x} \\oplus \\mathbf{y} = \\mathbf{s}` iff :math:`f(\\mathbf{x}) = f(\\mathbf{y})`. Apparently, if :math:`f` is 1-to-1, the corresponding mask :math:`\\mathbf{s} = \\mathbf{0}`."
msgstr "Fungsi :math:`f` yang direpresentasi oleh truthtable dijamin adalah fungsi 1-ke-1 atau 2-ke-1. Tujuan kita adalah menentukan yang mana dari dua. Ketika fungsi 2-ke-1, kita harus menghitung penyelubung :math:`\\mathbf{s}`, yang memenuhi :math:`\\forall \\mathbf{x},\\mathbf{y}`: :math:`\\mathbf{x} \\oplus \\mathbf{y} = \\mathbf{s}` jika dan hanya jika :math:`f(\\mathbf{x}) = f(\\mathbf{y})`. Dan, ketika :math:`f` adalah 1-ke-1, penyelubungnya :math:`\\mathbf{s} = \\mathbf{0}`."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:382
msgid "Let us first compute the groundtruth mask :math:`\\mathbf{s}` classically:"
msgstr "Mari kita hitung dulu penyelubung benar :math:` \\mathbf{s}` secara klasik:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:468
msgid "We can also quickly try a truthtable that represents a 1-to-1 function (i.e., the corresponding mask is :math:`\\mathbf{0}`), as follows."
msgstr "Kita juga dapat dengan cepat mencoba sebuah truthtable yang mewakili fungsi 1-ke-1 (yaitu, penyelubungnya adalah :math:` \\mathbf{0}`), sebagai berikut."

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:523
msgid "Shor’s Factoring algorithm"
msgstr "Algoritma Faktorisasi Shor"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:525
msgid "`Shor’s Factoring algorithm <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Shor.html>`__ is one of the most well-known quantum algorithms and finds the prime factors for input integer :math:`N` in polynomial time. The algorithm implementation in Qiskit is simply provided a target integer to be factored and run, as follows:"
msgstr "` Algoritma Faktorisasi Shor <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.Shor.html>` __ adalah salah satu algoritma kuantum yang paling terkenal dan menemukan faktor prima dari input integer :math:` N ` dalam waktu polinomial. Implementasi algoritma di Qiskit hanya perlu target integer untuk difaktorkan dan dijalankan, sebagai berikut:"

#: ../../tutorials/algorithms/09_textbook_algorithms.ipynb:570
msgid "Note: this implementation of Shor’s algorithm uses :math:`4n + 2` qubits, where :math:`n` is the number of bits representing the integer in binary. So in practice, for now, this implementation is restricted to factorizing small integers. Given the above value of N we compute :math:`4n +2` below and confirm the size from the actual circuit."
msgstr "Catatan: implementasi algoritma Shor ini menggunakan :math:` 4n + 2 ` qubit, di mana :math:` n ` adalah jumlah bit yang mewakili bilangan bulat dalam biner. Jadi dalam prakteknya, untuk saat ini, implementasi ini terbatas untuk faktorisasi integer kecil. Dari nilai N di atas kita menghitung :math:` 4n + 2 ` seperti di bawah dan mengkonfirmasi ukuran dari sirkuit yang sebenarnya."

