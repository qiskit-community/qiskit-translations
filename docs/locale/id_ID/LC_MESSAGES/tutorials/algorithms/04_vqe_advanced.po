msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-12 21:20+0000\n"
"PO-Revision-Date: 2021-03-04 03:06\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/04_vqe_advanced.po\n"
"X-Crowdin-File-ID: 9450\n"
"Language: id_ID\n"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:10
msgid "This page was generated from `tutorials/algorithms/04_vqe_advanced.ipynb`__."
msgstr "Halaman ini dibuat dari `tutorials/algoritms/04_vqe_advanced.ipynb`__."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/04_vqe_advanced.ipynb>`_."
msgstr "Jalankan secara interaktif di 'IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/04_vqe_advanced.ipynb>`_."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:9
msgid "Advanced VQE usage"
msgstr "Penggunaan VQE tingkat lanjut"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:11
msgid "There exist several parameters for configuring and using more advanced `VQE <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.html>`__ capabilities. This tutorial will cover the parameters such as ``initial_point``, ``expectation`` and ``gradient``."
msgstr "Ada beberapa parameter untuk konfigurasi dan penggunaan ` VQE <https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.VQE.html>` __ lebih lanjut. Tutorial ini akan mencakup parameter seperti ` ` ` initial_point ` `, ` ` expectation ` ` dan ` ` gradient ` `."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:13
msgid "It will also cover advanced simulator use such as using Aer with the Matrix Product State method."
msgstr "Ini juga akan mencakup penggunaan simulator lanjutan seperti Aer dengan metode Matrix Product State."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:39
msgid "Here we will use the same operator as used in the other VQE algorithms tutorials."
msgstr "Di sini kita akan menggunakan operator sama seperti dalam tutorial algoritma VQE yang lain."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:65
msgid "Initial point"
msgstr "Titik awal"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:67
msgid "The ``initial_point`` parameter allows the optimization to begin at the given point, where the point is a list of parameters that will configure the variational form. By default the initial point is ``None`` which means that VQE will choose one. The choice in in this case is if the supplied variational form has a preferred point, based on the initial state provided to it, then this will be chosen, otherwise a random initial point that fits with any bounds the variational has will be chosen. If an initial point is supplied it will take priority though and be used - note though it must match in length to the number of parameters in the variational form circuit."
msgstr "Parameter ` ` initial_point ` ` atau titik awal memungkinkan optimasi untuk dimulai pada titik yang diberikan, di mana titik adalah daftar parameter yang menjadi konfigurasi bentuk variasional. Secara default titik awal adalah ` ` None ` ` yang berarti VQE akan memilih satu. Pilihan ini adalah jika bentuk variasional yang diberikan memiliki preferensi titik pilihan, berdasarkan state awal yang diberikan, maka itu akan dipilih, jika tidak, titik awal acak yang sesuai dengan batas variasional yang akan dipilih. Jika titik awal dipasok itu akan menjadi prioritas dan digunakan-catatan titik awal harus cocok dalam panjang dengan jumlah parameter dari sirkuit variasional."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:70
msgid "Why to use a initial point? One reason would be if you have guess a reasonable starting point for the problem or perhaps know have information from a prior experiment."
msgstr "Mengapa menggunakan titik awal? Salah satu alasannya adalah jika Anda memiliki tebakan titik awal yang bagus untuk masalah atau memiliki informasi dari percobaan sebelumnya."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:72
msgid "To demonstrate the use let’s first simply repeat the first working example from the `algorithms introduction <01_algorithms_introduction.ipynb#A-complete-working-example>`__ tutorial to get a solution’s optimal point."
msgstr "Untuk memperagakan penggunaan ini pertama-tama mari kita ulangi contoh pertama dari tutorial `algorithms introduction <01_algorithms_introduction.ipynb#A-complete-working-example>`__ untuk mendapatkan point optimal."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:156
msgid "Now we can take the ``optimal_point`` from the above result and use it as the ``initial_point`` here."
msgstr "Sekarang kita dapat menggunakan ` ` optimal_point ` ` dari hasil di atas sebagai ` ` ` initial_point ` ` di sini."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:238
msgid "Here we see that result was arrived at much more quickly where ``optimizer_evals`` is 10 versus 72 when it started from a random value when the initial point was not supplied (default of None)."
msgstr "Di sini bisa dilihat hasil didapat jauh lebih cepat dimana ` ` ` optimizer_evals ` ` adalah 10 dibanding 72 ketika dimulai dari nilai acak ketika titik awal tidak dipasok (dengan default None)."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:240
msgid "Where this becomes useful for examples where we the solution to one problem can be used to for a guess for the solution to a very close similar problem. Chemistry is very good example where we change the inter-atomic distance(s) of molecule to plot a dissociation profile. When the distance changes are small we expect the solution to still be nearby the prior one. One technique is to simply use the optimal point from one solution as the starting point for the next step. Now more complex techniques are possible that do some extrapolation to compute an initial position based on prior solution(s) rather than directly use the prior solution. The Qiskit Chemistry `sampling_potential_energy_surfaces <../chemistry/05_Sampling_potential_energy_surfaces.ipynb#Extrapolation>`__ tutorial shows such bootstrapping and extrapolation."
msgstr "Ini berguna untuk contoh-contoh di mana solusi untuk satu masalah dapat digunakan untuk tebakan masalah lain yang serupa. Kimia adalah satu contoh baik di mana kita mengubah jarak antar atom di molekul untuk plot profil disosiasi. Ketika perubahan jarak kecil diharapkan solusi masih berada di dekat yang sebelumnya. Salah satu teknik adalah dengan menggunakan titik optimal dari satu solusi sebagai titik awal untuk langkah berikutnya. Sekarang teknik yang lebih kompleks bisa diterapkan dari ekstrapolasi untuk menghitung titik awal berdasarkan solusi sebelumnya daripada langsung menggunakan solusi sebelumnya. Tutorial Qiskit Chemistry ` sampling_potential_energy_permukaan <../chemistry/05_Sampling_potential_energy_surfaces.ipynb#Extrapolation> ` __ menunjukkan cara bootstrapping dan ekstrapolasi untuk itu."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:253
msgid "Expectation"
msgstr "Ekspektasi"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:255
msgid "The energy of the Hamiltonian operator that VQE is working on is the expectation value when evaluated with the parameterized variational form. To compute the expectation value VQE uses an instance of an `expectation <https://qiskit.org/documentation/apidoc/qiskit.aqua.operators.expectations.html>`__ object. Such an instance may be supplied via the ``expectation`` parameter, or in the default case, where it has a value of ``None``, VQE will use the `ExpectationFactory <https://qiskit.org/documentation/stubs/qiskit.aqua.operators.expectations.ExpectationFactory.html>`__ to create itself a suitable instance based on the supplied backend."
msgstr "Energi dari operator Hamiltonian yang VQE hitung adalah nilai ekspektasi ketika dievaluasi dengan bentuk variasional berparameter. Untuk menghitung nilai ekspektasi VQE menggunakan sebuah instans dari objek ` expectation <https://qiskit.org/documentation/apidoc/qiskit.aqua.operators.expectations.html>`. Instans tersebut dapat dipasok melalui parameter ` ` expectation ` `, atau secara default, ketika nilainya ` ` None ` `, VQE akan menggunakan ` ExpectationFactory <https://qiskit.org/documentation/stubs/qiskit.aqua.operators.expectations.ExpectationFactory.html>` __ untuk membuat sendiri sebuah instans yang sesuai dengan backend yang disediakan."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:258
msgid "For most cases letting VQE create a suitable instance is sufficient. However the Qiskit Aer qasm_simulator supports a snapshot instruction that can be used in conjunction with the operator expectation computation. If used then the outcome is ideal, i.e. like the statevector simulator, and has no shot noise. Since people normally choose the qasm_simulator to have shot noise (sampling noise), and be more like a real-device outcome, VQE has an ``include_custom`` flag that is passed on to the ExpectationFactory. When using Aer qasm simulator, and this is set ``True``, the factory will return ``AerPauliExpectation`` which uses the snapshot instruction, when ``False``, default, then the regular ``PauliExpectation`` is returned."
msgstr "Untuk sebagian besar kasus cukup dengan membiarkan VQE membuat instans yang sesuai. Namun, Qiskit Aer qasm_simulator mendukung instruksi snapshot yang dapat digunakan dengan operator penghitungan ekspektasi. Jika digunakan maka hasilnya adalah ideal, yaitu seperti simulator statevector, dan tidak ada noise dari shot. Karena pilihan biasa qasm_simulator memiliki noise dari shot (noise dari sampling), dan berlaku seperti hasil perangkat nyata, VQE memiliki flag ` ` include_custom ` ` yang diteruskan ke ExpectationFactory. Ketika menggunakan Aer qasm simulator, dan diset ` ` True ` `, factory akan mengembalikan ` ` AerPauliExpectation ` ` dengan instruksi snapshot, ketika ` ` False ` `, yang default, seperti biasa mengembalikan ` ` PauliExpectation ` `."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:261
msgid "The following example shows ``include_custom=True`` where the outcome matches the statevector simulator. In fact it can be better/faster to do this than use the statevector_simulator directly. This is because in the latter case when the Hamiltonian is a sum of Paulis it must be converted to matrix form, and this is avoided when using the snapshot instruction done when include_custom is True."
msgstr "Contoh berikut menunjukkan ` ` include_custom=True ` ` di mana hasilnya cocok dengan simulator statevector. Pada kenyataannya bisa lebih baik/lebih cepat melakukan ini daripada langsung menggunakan statevector_simulator. Hal ini karena dalam kasus terakhir ketika Hamiltonian adalam jumlah dari term Pauli, ia harus dikonversi ke bentuk matrik, dan ini dihindari ketika menggunakan instruksi snapshot waktu include_custom adalah True."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:341
msgid "In case you have doubts here is the qasm_simulator again but include_custom has been left to default to False. The optimization ended abruptly, presumably due to the shot noise confusing the SLSQP optimizer. The optimal value can be seen to be wrong too, i.e. -1.098 versus the correct -1.857."
msgstr "Jika Anda memiliki keraguan di sini adalah dengan qasm_simulator lagi tapi include_custom telah di set False seperti default. Optimasi berakhir tiba-tiba, mungkin karena noise shot membingungkan optimizer SLSQP. Nilai optimal dapat dilihat untuk menjadi salah juga, yaitu -1,098 dibanding yang benar -1.857."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:419
msgid "Changing the optimizer to SPSA, which is designed to work in noisy environments, gets us a better result. Though the noise has affected the outcome so it’s not as accurate."
msgstr "Mengubah optimizer ke SPSA, yang dirancang untuk bekerja di lingkungan dengan noise, memberi hasil yang lebih baik. Walau begitu noise telah mempengaruhi hasilnya sehingga tidak begitu akurat."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:497
msgid "As mentioned above, an expectation object can be explicitly given (so the internal ``ExpectationFactory`` and include_custom are never used/needed. Below we create an ``AerPauliExpectation`` and pass this to VQE. We can see the result matches that above where we set include_custom to True and let VQE create its own expectation object."
msgstr "Seperti disebutkan di atas, sebuah objek ekspektasi dapat secara eksplisit diberikan (sehingga internal ` ` ExpectationFactory ` ` dan include_custom tidak pernah digunakan/dibutuhkan). Di bawah ini kita membuat sebuah ` ` AerPauliExpectation ` ` dan meneruskannya ke VQE. Kita dapat melihat hasil yang cocok dengan yang di atas di mana kita menetapkan include_custom menjadi True dan membiarkan VQE membuat objek ekspektasi sendiri."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:578
msgid "By default, the ``PauliExpectation`` object, that would have be chosen when include_custom is False (or when using BasicAer qasm_simultor, or a real device) groups Paulis into commuting sets. This is efficient as it runs less circuits to compute the expectation. However, if for some reason you wanted to run a circuit for each Pauli then then grouping can be turned off when constructing the PauliExpectation. You need to explicitly pass in such an expectation instance to VQE to have it work this way though as shown below."
msgstr "Secara default, objek ` ` PauliExpectation ` `, yang akan dipilih ketika include_custom adalah False (atau ketika menggunakan BasicAer qasm_simulator, atau perangkat nyata) mengelompokkan term Paulis ke dalam set yang komutatif. Ini efisien karena jumlah sirkuit penghitung ekspektasi berkurang. Namun, jika untuk beberapa alasan Anda ingin menjalankan sebuah sirkuit untuk setiap term Pauli maka pengelompokan dapat dimatikan ketika membuat PauliExpectation. Anda perlu secara eksplisit meneruskan instans ekspektasi tersebut ke VQE agar bekerja dengan cara ini seperti yang ditunjukkan di bawah."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:659
msgid "Gradient"
msgstr "Gradien"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:661
msgid "Optimizers that use a gradient-based technique can be supplied with a user defined gradient that will be used instead of their default gradient computation which is usually done by simple finite difference. Gradients are passed indirectly via to the optimizer via its ``gradient`` parameter."
msgstr "Pengoptimasi yang menggunakan teknik berbasis gradien dapat dipasok dengan gradien yang didefinisikan pengguna disamping default dari komputasi gradien yang biasanya adalah finite difference sederhana. Gradien-gradien diteruskan secara tidak langsung ke pengoptimasi melalui parameter ` ` gradient ` ` nya."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:663
msgid "As the use of a user supplied ``gradient`` was shown in the `Monitoring VQE Convergence <02_vqe_convergence.ipynb#Using-Gradient-framework>`__ tutorial I will simply refer you there. Also the `Gradients framework <../operators/02_gradients_framework.ipynb>`__ tutorial has much more about the gradients themselves."
msgstr "Sebagai contoh penggunaan dari ` ` gradient ` ` yang ditentukan user ditunjukkan di tutorial ` Monitor Konvergensi VQE <02_vqe_convergence.ipynb#Using-Gradient-framework> ` __ yang hanya dirujuk di sini. Juga tutorial ` Kerangka Gradien <../operators/02_gradients_framework.ipynb> ` __ memiliki lebih banyak informasi tentang gradien."

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:675
msgid "Quantum Instance and advanced simulation"
msgstr "Instans Kuantum dan simulasi lanjutan"

#: ../../tutorials/algorithms/04_vqe_advanced.ipynb:677
msgid "While you may be familar with passing a QuantumInstancen created from a ``statevector_simulator`` a ``qasm_simulator`` or real device backend, it is possible to use the advanced simulation modes of Aer too when applicable. For instance we can easily use the Aer `Matrix Product State <../simulators/7_matrix_product_state_method.ipynb>`__ method, that has the potential to scale to larger numbers of qubits."
msgstr "Walau kita telah cukup mengenal penerusan QuantumInstance dibuat dari ` ` statevector_simulator ` `, atau ` ` qasm_simulator ` ` atau backend perangkat nyata, kita bisa juga menggunakan mode simulasi lanjutan dari Aer. Misalnya kita bisa dengan mudah menggunakan metoda Aer ` Matrix Product State <../simulators/7_matrix_product_state_metod.ipynb> ` __, yang berpotensi bisa dilakukan untuk lebih banyak qubit."

