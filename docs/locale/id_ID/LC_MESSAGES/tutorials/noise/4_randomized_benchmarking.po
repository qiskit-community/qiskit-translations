msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-21 22:19+0000\n"
"PO-Revision-Date: 2022-04-21 23:34\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/4_randomized_benchmarking.po\n"
"X-Crowdin-File-ID: 9138\n"
"Language: id_ID\n"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:10
msgid "This page was generated from `tutorials/noise/4_randomized_benchmarking.ipynb`__."
msgstr "Halaman ini dibuat dari `tutorials/noise/4_randomized_benchmarking.ipynb`__."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:9
msgid "Randomized Benchmarking"
msgstr "Patokan Acak"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:12
msgid "Introduction"
msgstr "Pendahuluan"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:14
msgid "**Randomization benchmarking (RB)** is a well-known technique to measure average gate performance by running sequences of random Clifford gates that should return the qubits to the initial state. Qiskit Ignis has tools to generate one- and two-qubit Clifford gate sequences simultaneously."
msgstr "**Patokan acak (RB)** adalah teknik terkenal untuk mengukur performa gerbang rata-rata dengan menjalankan sekuens gerbang Clifford acak yang akan mengembalikan qubit ke keadaan awal. Qiskit Ignis memiliki alat untuk menghasilkan sekuens gerbang Clifford satu- dan dua-qubit secara bersamaan."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:16
msgid "This notebook gives an example for how to use the ``ignis.verification.randomized_benchmarking`` module. This particular example shows how to run 2-qubit randomized benchmarking (RB) simultaneous with 1-qubit RB. There are also examples on how to use some of the companion functions for predicting RB fidelity."
msgstr "Notebook ini memberikan contoh bagaimana menggunakan modul ``ignis.verification.randomized_benchmarking``. Contoh khusus ini menunjukkan bagaimana menjalankan patokan acak (RB) 2-qubit secara bersamaan dengan 1-qubit RB. Terdapat juga contoh tentang bagaimana menggunakan fungsi pendamping untuk memprediksi fidelitas RB."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:49
msgid "1) Select the Parameters of the RB Run"
msgstr "1) Pilih Parameter dari Jalannya RB"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:51
msgid "First, we need to choose the following parameters:"
msgstr "Pertama, kita perlu memilih parameter berikut:"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:53
msgid "**nseeds:** The number of seeds. For each seed you will get a separate list of output circuits in rb_circs."
msgstr "**nseeds:** Jumlah seed. Untuk setiap seed Anda akan mendapatkan daftar terpisah dari sirkuit keluaran dalam rb_circs."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:54
msgid "**length_vector:** The length vector of Clifford lengths. Must be in ascending order. RB sequences of increasing length grow on top of the previous sequences."
msgstr "**length_vector:** Vektor panjang dari panjang Clifford. Harus berada dalam urutan menaik. Sekuens RB dari peningkatan panjang tumbuh di atas sekuens sebelumnya."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:55
msgid "**rb_pattern:** A list of the form [[i,j],[k],…] which will make simultaneous RB sequences where Qi,Qj are a 2-qubit RB sequence and Qk is a 1-qubit sequence, etc. The number of qubits is the sum of the entries. For ‘regular’ RB the qubit_pattern is just [[0]],[[0,1]]."
msgstr "**rb_pattern:** Sebuah daftar dalam bentuk [[i,j],[k],…] yang akan membuat sekuens RB bersamaan di mana Qi, Qj adalah sekuens RB 2-qubit dan Qk adalah sekuens 1-qubit, dll. Banyaknya qubit adalah jumlah dari entri. Untuk RB 'regular' qubit_pattern hanyalah [[0]],[[0,1]]."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:56
msgid "**length_multiplier:** If this is an array it scales each rb_sequence by the multiplier."
msgstr "**length_multiplier:** Jika ini adalah array ini mengalikan setiap rb_sequence dengan pengalinya."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:57
msgid "**seed_offset:** What to start the seeds at (e.g. if we want to add more seeds later)."
msgstr "**seed_offset:** Untuk memulai seed di mana (misalnya jika kita ingin menambahkan seed lebih banyak lagi nanti)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:58
msgid "**align_cliffs:** If true adds a barrier across all qubits in rb_pattern after each set of cliffords."
msgstr "**align_cliffs:** Jika benar, tambahkan penghalang untuk semua qubit di rb_pattern setelah setiap set clifford."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:60
msgid "In this example we have 3 qubits Q0,Q1,Q2. We are running 2Q RB (on qubits Q0,Q2) and 1Q RB (on qubit Q1) simultaneously, where there are twice as many 1Q Clifford gates."
msgstr "Dalam contoh ini kita memiliki 3 qubit Q0, Q1, Q2. Kita menjalankan RB 2Q (pada qubit Q0, Q2) dan RB 1Q (pada qubit Q1) secara bersamaan, di mana terdapat dua kali lebih banyak gerbang Clifford 1Q."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:92
msgid "2) Generate the RB sequences"
msgstr "2) Membuat sekuens RB"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:94
msgid "We generate RB sequences. We start with a small example (so it doesn’t take too long to run)."
msgstr "Kita buat sekuens RB. Kita mulai dengan contoh kecil (sehingga tidak akan memakan banyak waktu untuk menjalankannya)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:96
msgid "In order to generate the RB sequences **rb_circs**, which is a list of lists of quantum circuits, we run the function ``rb.randomized_benchmarking_seq``."
msgstr "Untuk membuat sekuens RB **rb_circs**, yang mana adalah daftar dari daftar sirkuit kuantum, kita jalankan fungsi ``rb.randomized_benchmarking_seq``."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:98
msgid "This function returns:"
msgstr "Fungsi ini mengembalikan:"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:100
msgid "**rb_circs:** A list of lists of circuits for the rb sequences (separate list for each seed)."
msgstr "**rb_circs:** Daftar dari daftar sirkuit untuk sekuens rb (daftar terpisah untuk setiap seed)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:101
msgid "**xdata:** The Clifford lengths (with multiplier if applicable)."
msgstr "**xdata:** Panjang Clifford (dengan pengali jika berlaku)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:127
msgid "As an example, we print the circuit corresponding to the first RB sequence:"
msgstr "Sebagai contoh, kita mencetak sirkuit sesuai denga sekuens RB pertama:"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:247
msgid "Look at the Unitary for 1 Circuit"
msgstr "Lihat ke Unitari untuk 1 Sirkuit"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:258
msgid "The Unitary representing each RB circuit should be the identity (with a global phase), since we multiply random Clifford elements, including a computed reversal gate. We simulate this using an Aer unitary simulator."
msgstr "Unitari yang mewakili setiap sirkuit RB harus menjadi identitas (dengan fasa global), karena kita mengalikan elemen Cliffor acak, termasuk gerbang pembalikan yang dihitung. Kita mensimulasikan ini menggunakan simulator Aer unitari."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:341
msgid "Define the noise model"
msgstr "Definisikan model noise"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:352
msgid "We define a noise model for the simulator. To simulate decay, we add depolarizing error probabilities to the CNOT and U gates."
msgstr "Kita definisikan model noise untuk simulator. Untuk mensimulasikan peluruhan, kita tambahkan probabilitas eror depolarisasi ke gerbang CNOT dan U."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:379
msgid "3) Execute the RB sequences on Aer simulator"
msgstr "3) Eksekusi sekuens RB di simulator Aer"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:381
msgid "We can execute the RB sequences either using a Qiskit Aer Simulator (with some noise model) or using an IBMQ provider, and obtain a list of results, ``result_list``."
msgstr "Kita dapat mengeksekusi sekuens RB dengan menggunakan simulator Qiskit Aer (dengan beberapa model noise) atau dengan provider IBMQ, dan mendapatkan daftar hasil, ``result_list``."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:469
msgid "4) Fit the RB results and calculate the gate fidelity"
msgstr "4) Sesuaikan hasil RB dan kalkulasi fidelitas gerbang"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:472
msgid "Get statistics about the survival probabilities"
msgstr "Dapatkan statistik mengenai probabilitas kelangsungannya"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:474
msgid "The results in **result_list** should fit to an exponentially decaying function :math:`A \\cdot \\alpha ^ m + B`, where :math:`m` is the Clifford length."
msgstr "Hasil dalam **result_list** seharusnya cocok untuk fungsi peluruhan eksponensial :math:`A \\cdot \\alpha ^ m + B`, di mana :math:`m` adalah panjang Clifford."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:476
msgid "From :math:`\\alpha` we can calculate the **Error per Clifford (EPC)**:"
msgstr "Dari :math:`\\alpha` kita dapat menghitung **Eror per Clifford (EPC)**:"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:478
msgid "EPC = \\frac{2^n-1}{2^n} (1-\\alpha)\n\n"
msgstr ""

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:480
msgid "(where :math:`n=nQ` is the number of qubits)."
msgstr "(di mana :math:`n=nQ` adalah banyaknya qubit)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:503
msgid "Plot After 1 Seed"
msgstr "Plot Setelah 1 Seed"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:545
msgid "Plot with the Rest of the Seeds"
msgstr "Plot dengan Seed Lainnya"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:547
msgid "The plot is being updated after each seed."
msgstr "Plot akan diperbarui setelah setiap seed."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:601
msgid "Add more shots to the data"
msgstr "Tambahkan tembakan lebih banyak ke data"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:720
msgid "Predicted Gate Fidelity"
msgstr "Gerbang Fidelitas Prediksi"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:731
msgid "From the known depolarizing errors on the simulation we can predict the **fidelity**. First we need to count the number of **gates per Clifford**."
msgstr "Dari eror depolarisasi yang diketahui pada simulasi kita dapat memprediksi **fidelitas**. Pertama kita perlu menghitung banyaknya **gerbang per Clifford**."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:733
msgid "The function **gates_per_clifford** takes a list of transpiled RB circuits and outputs the number of basis gates in each circuit."
msgstr "Fungsi **gates_per_clifford** mengamibil daftar dari sirkuit RB tertranspilasi dan mengeluarkan jumlah dari gerbang basis untuk setiap sirkuit."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:791
msgid "The function **calculate_2q_epc** gives measured errors in the basis gates that were used to construct the Clifford. It assumes that the error in the underlying gates is depolarizing. It outputs the error per a 2-qubit Clifford."
msgstr "Fungsi **calculate_2q_epc** memberikan eror terukur pada gerbang basis yang digunakan untuk membuat Clifford. Ini mengasumsikan eror pada gerbang yang mendasar adalah depolarisasi. Ini mengeluarkan eror per Clifford 2-qubit."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:793
msgid "The input to this function is: - **gate_per_cliff:** dictionary of gate per Clifford. - **epg_2q:** EPG estimated by error model. - **qubit_pair:** index of two qubits to calculate EPC. - **list_epgs_1q:** list of single qubit EPGs of qubit listed in ``qubit_pair``. - **two_qubit_name:** name of two qubit gate in ``basis gates`` (default is ``cx``)."
msgstr "Masukan dari fungsi ini adalah: - **gate_per_cliff:** kamus dari gerbang per Clifford. - **epg_2q:** EPG terestimasi oleh model eror. - **qubit_pair:** indeks dari dua qubit untuk menghitung EPC. - **list_epgs_1q:** daftar dari qubit tunggal EPGs dari qubit yng terdaftar di ``qubit_pair``. - **two_qubit_name:** nama dari dua qubit dalam ``basis gates`` (default adalah ``cx``)."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:848
msgid "Run an RB Sequence with T1,T2 Errors"
msgstr "Jalankan sekuens RB dengan Eror T1, T2"

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:850
msgid "We now choose RB sequences that contain only 2-qubit Cliffords."
msgstr "Sekarang kita memilih sekuens RB yang hanya berisi Clifford 2-qubit."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:852
msgid "We execute these sequences as before, but with a noise model extended with T1/T2 thermal relaxation error, and fit the exponentially decaying curve."
msgstr "Kita mengesekusi sekuens ini seperti sebelumnya, tetapi dengan model noise yang diperpanjang dengan eror relaksasi termal T1/T2, dan menyocokkannya dengan kurva peluruhan eksponensial."

#: ../../tutorials/noise/4_randomized_benchmarking.ipynb:993
msgid "We count again the number of **gates per Clifford** as before, and calculate the **two-qubit Clifford gate error**, using the predicted primitive gate errors from the coherence limit."
msgstr "Kita menghitung lagi jumlah dari **gerbang per Clifford** seperti sebelumnya, dan menghitung **eror gerbang Clifford dua-qubit**, menggunakan eror gerbang primitif yang diperdiksi dari limit koherensi."

