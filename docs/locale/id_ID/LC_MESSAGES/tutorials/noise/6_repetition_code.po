msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 17:09+0000\n"
"PO-Revision-Date: 2021-06-28 18:42\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/noise/6_repetition_code.po\n"
"X-Crowdin-File-ID: 9142\n"
"Language: id_ID\n"

#: ../../tutorials/noise/6_repetition_code.ipynb:10
msgid "This page was generated from `tutorials/noise/6_repetition_code.ipynb`__."
msgstr "Halaman ini dibuat dari `tutorials/noise/2_relaxation_and_decoherence.ipynb`__."

#: ../../tutorials/noise/6_repetition_code.ipynb:9
msgid "Repetition Codes"
msgstr "Kode Repetisi"

#: ../../tutorials/noise/6_repetition_code.ipynb:21
msgid "Introduction"
msgstr "Pengantar"

#: ../../tutorials/noise/6_repetition_code.ipynb:23
msgid "In quantum error correction we take many noisy qubits (which we call *physical qubits*) and use them to store a smaller number of *logical qubits*. The error correction procedure is designed to detect and correct for the effects of noise. This makes the logical qubits much less noisy and more reliable than the physical ones from which they are built."
msgstr "Dalam koreksi eror kuantum kita mengambil banyak qubit yang noisy (yang kita sebut *qubit fisik*) dan menggunakan mereka untuk menyimpan *qubit logis* yang lebih sedikit. Prosedur koreksi eror didesain untuk mendeteksi dan mengoreksi dari efek noise. Ini membuat qubit logis sangat lebih tidak noisy dan lebih terpercaya daripada yang fisik dari mana mereka dibangun."

#: ../../tutorials/noise/6_repetition_code.ipynb:25
msgid "The repetition code is a simple example of quantum error correction, in which a logical *bit* is stored rather than a logical *qubit*. A given instance of the repetition code is defined by two numbers, which we call :math:`d` and :math:`T`."
msgstr "Kode repetisi merupakan contoh sederhana dari kokreksi eror kuantum, di mana sebuah *bit* logis disimpan daripada sebuah *qubit* logis. Contoh kode pengulangan adalah ditentukan dua bilangan, yang kita sebut :math:`d` dan :math:`T`."

#: ../../tutorials/noise/6_repetition_code.ipynb:27
msgid "The :math:`d` parameter determines how many physical qubits are used. The actual information about the logical bit is stored in :math:`d` qubits (which we’ll call *code qubits*). The encoding is done in a very simple way: to encode a ``0``, all these qubits are set in the state :math:`|0\\rangle`, to encode a ``1`` they are set to :math:`|1\\rangle`. To readout the value, you can just look at any qubit. To read it out in a way that protects against single qubit errors, you can read out all the qubits and take a majority vote."
msgstr "Parameter :math:`d` menentukan seberapa banyak qubit fisik yang dipakai. Informasi sebenarnya tentang bit logis disimpan dalam :math:`d` qubit (yang akan kita panggil sebagai *qubit kode*). Enkode dilakukan dengan cara yang sangat sederhana: untuk mengenkode ``0``, semua qubitnya diset dalam keadaan :math:`|0\\rangle`, untuk mengenkode ``1`` semua diset ke :math:`|1\\rangle`. Untuk membaca nilainya, Anda dapat melihat pada qubit manapun. Untuk membaca dengan cara yang melindungi terhadp eror qubit tunggal, Anda dapat membaca semua qubit dan mengambil suara mayoritas."

#: ../../tutorials/noise/6_repetition_code.ipynb:30
msgid "It is not only at readout that we can extract useful information that will help us correct errors. We can also extract information while the logical bit sits idle, or even while it is involved in computation."
msgstr "Tidak hanya di readout kita dapat mengambil informasi berguna yang dapat membantu kita mengoreksi eror. Kita juga dapat mengekstrak informasi selagi bit logis menganggur, atau bahkan juga saat sedang terlibat dalam komputasi."

#: ../../tutorials/noise/6_repetition_code.ipynb:32
msgid "Since this is an exercise in quantum error correction, we will do this in a way that would also work for logical *qubits*. Specifically, our method of extracting information about errors must not extract any information regarding the stored logical information. In the quantum case, this is required so that we do not disturb superposition states of the stored qubits."
msgstr "Karena ini adalah latihan dalam koreksi error kuantum, Kita akan melakukan ini dengan cara yang juga akan bekerja untuk *qubit* logis. Khususnya, metode kami untuk mengekstrak informasi tentang eror harus tidak mengekstrak informasi lainnya mengenai informasi logis yang tersimpan. Pada kasus kuantum, ini dibutuhkan sehingga kita tidak mengganggu keadaan superposisi dari qubit yang disimpan."

#: ../../tutorials/noise/6_repetition_code.ipynb:34
msgid "We will extract information over :math:`T` rounds of *syndrome measurements*. For the repetition code, these are based on the fact that all code qubits should be in the same state (all :math:`|0\\rangle` or all :math:`|1\\rangle`). Any departure from this is therefore a signature of error. Specifically, we imagine our :math:`d` code qubits sitting along a line. We will then perform a measurement on each pair of neighboring code qubits. This will tell us whether they are the same or different, without extracting any information on what their values are."
msgstr "Kita akan mengekstrak informasi lebih :math:`T` putaran dari *pengukuran sindrom*. Untuk kode repetisi, semuanya berdasarkan faktabahwa semua qubit kode harus berada pada keadaan sama (semua :math:`|0\\rangle` atau semua :math:`|0\\rangle`). Setiap kepergian dari ini merupakan sebuah tanda eror. Khususnya, kita bayangkan :math:`d` qubit kode kita diam sepanjang barisan. Kita kemudian akan melakukan pengukuran untuk setiap pasangan qubit kode bersebelahan. Ini akan memberitahu kita apakah mereka sama atau berbeda, tanpa mengekstrak informasi apapun tentang apa nilai mereka."

#: ../../tutorials/noise/6_repetition_code.ipynb:37
msgid "The implementation of these measurements requires :math:`d-1` additional qubits, which we will call *link qubits* for the repetition code. By performing two CNOTs between the pair of code qubits and a corresponding link qubit, the required information (and only the required information) is placed on the link qubit and can then be measured."
msgstr ""

#: ../../tutorials/noise/6_repetition_code.ipynb:95
msgid "Here we provide tools for creating and testing repetition codes. The first thing we need to do is import them."
msgstr "Di sini kita menyediakan alat untuk membuat dan menguji kode repetisi. Hal pertama yang perlu kita lakukan adalah mengimpor mereka."

#: ../../tutorials/noise/6_repetition_code.ipynb:119
msgid "Creating a repetition code"
msgstr "Membuat kode repetisi"

#: ../../tutorials/noise/6_repetition_code.ipynb:121
msgid "The ``repetition_code`` class creates a code for given values of :math:`d` and :math:`T`."
msgstr "Kelas ``repetition_code`` membuat sebuah kode untuk nilai :math:`d` and :math:`T` yang diberikan."

#: ../../tutorials/noise/6_repetition_code.ipynb:144
msgid "With this we can inspect various properties of the code, such as the names of the qubit registers used for the code and ancilla qubits."
msgstr "Dengan ini kita dapat memeriksa berbagai properti dari kode, seperti nama dari qubit register yang digunakan untuk qubit kode dan ancilla."

#: ../../tutorials/noise/6_repetition_code.ipynb:185
msgid "These registers are also attributes of the ``repetition_code`` object."
msgstr "Register ini juga merupakan atribut dari objek ``repetition_code``."

#: ../../tutorials/noise/6_repetition_code.ipynb:226
msgid "You can also access the quantum circuits that implement the code. Two of these are produced: one for each of the two possible logical bit values."
msgstr "Anda juga dapat mengakses sirkuit kuantum yang mengimplementasi kodenya. Dua diantaranya dihasilkan: satu untuk setiap dua nilai bit logis yang mungkin."

#: ../../tutorials/noise/6_repetition_code.ipynb:479
msgid "Building a custom repetition code"
msgstr "Membuat kode repetisi sendiri"

#: ../../tutorials/noise/6_repetition_code.ipynb:481
msgid "You can also implement measurement rounds and logical ``X`` gates yourself. For example, let’s set up a code with no syndrome measurement rounds."
msgstr "Anda juga dapat mengimplementasikan pengukuran gerbang ``X`` putaran dan logis sendiri. Sebagai contoh, mari kita membuat kode dengan tanpa putaran pengukuran sindrom."

#: ../../tutorials/noise/6_repetition_code.ipynb:502
msgid "This does nothing but set up two circuits for the two logical encoded states. There are no syndrome measurement rounds, and no final readout."
msgstr "Ini mengatur dua sirkuit untuk kedua keadaan logis yang dienkode. Tidak ada putaran pengukuran sindrom, dan tidak ada readout akhir."

#: ../../tutorials/noise/6_repetition_code.ipynb:601
msgid "We can add a round using the ``syndrome_measurement()`` method."
msgstr "Kita dapat menambahkan satu putaran dengan menggunakan metode ``syndrome_measurement()``."

#: ../../tutorials/noise/6_repetition_code.ipynb:712
msgid "A logical ``X`` operation can be added using the ``x()`` method."
msgstr "Operasi logis ``X`` dapat ditambahkan dengan menggunakan metode ``x()``."

#: ../../tutorials/noise/6_repetition_code.ipynb:823
msgid "This also has a ``logs`` kwarg, which is a list of the circuits for which ``X`` is applied. This is ``['0','1']`` by default."
msgstr "Ini juga memiliki kwarg ``logs``, yang merupakan daftar sirkuit di mana ``X`` diterapkan. Ini adalah ``['0','1']`` secara default."

#: ../../tutorials/noise/6_repetition_code.ipynb:834
msgid "Final readout is then done with the ``readout()`` method."
msgstr "Readout terakhir kemudian dilakukan dengan metode ``readout()``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1012
msgid "Running a repetition code"
msgstr "Menjalankan kode repetisi"

#: ../../tutorials/noise/6_repetition_code.ipynb:1014
msgid "The code object produces the circuits required for the code. The user can then run them using any method they prefer, allowing full control over compilation, backends, noise models and so on."
msgstr "Objek kode menghasilkan sirkuit yang dibutuhkan untuk kode. Pengguna kemudian dapat menjalankan mereka dengan menggunakan metode apapun yang disukai, memungkinkan kontrol penuh atas kompilasi, backend, model noise dan sebagainya."

#: ../../tutorials/noise/6_repetition_code.ipynb:1016
msgid "For example, here we run them without noise on the ``qasm_simulator``."
msgstr "Sebagai contoh, di sini kita menjalankan mereka tanpa noise pada ``qasm_simulator``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1076
msgid "Here the strings from right to left represent the outputs of the syndrome measurement rounds, followed by the final measurement of the code qubits."
msgstr "Di sini string dari knan ke kiri mewakili keluaran dari putaran pengukuran sindrom, diikuti dengan pengukuran terakhir dari qubit kode."

#: ../../tutorials/noise/6_repetition_code.ipynb:1078
msgid "These results need to be rewritten in a different form in order to be decoded. To do this we can use the ``process_results`` method of the code object."
msgstr "Hasil ini perlu ditulis ulang dalam bentuk yang berbeda agar dapat didekode. Untuk melakukan ini kita dapat menggunakan metode ``process_results`` dari objek kode."

#: ../../tutorials/noise/6_repetition_code.ipynb:1119
msgid "The result is a dictionary whose keys are bit strings that represent outputs of the circuit, and the values represent the number of shots for which this output occurred."
msgstr "Hasilnya adalah kamus yang kuncinya adalah string bit yang merepresentasikan keluaran sirkuit, dan nilainya merepresentasikan jumlah dari tembakan yang mana keluaran ini terjadi."

#: ../../tutorials/noise/6_repetition_code.ipynb:1121
msgid "The strings are not the direct output from the circuits. They have been processed to take the form that helps us correct errors. Here’s a short guided tour."
msgstr "String-nya bukan merupakan keluaran langsung dari sirkuit. Mereka sudah diproses untuk mengambil bentuk yang membantu kita mengoreksi eror. Berikut adalah panduan pendek."

#: ../../tutorials/noise/6_repetition_code.ipynb:1123
msgid "The ``0 0`` to the far left for the logical ``0`` result, and the ``1 1`` to the far left of the logical ``1``, are the logical readout. Any code qubit could be used for this readout, since they should (without errors) all be equal. So we could have just one result here, for one arbitrarily chosen code qubit. Or we could have :math:`d`, one for each qubit. Instead we have two, from the two qubits at either end of the line. This is because it works best with the decoder (which we’ll use later). In the absence of errors, these two values will always be equal."
msgstr "``0 0`` ke jauh kiri untuk hasil logis ``0``, dan ``1 1`` ke kanan jauh untuk hasil logis ``1``, adalah readout logis. Setiap qubit kode dapat digunakan untuk readout ini, karena mereka seharusnya (tanpa eror) sama seluruhnya. Jadi kita dapat saja mendapatkan satu hasil di sini, untuk satu kode qubit yang dipilih apapun. Atau kita dapat mendapatkan :math:`d`, satu untuk setiap qubit. Sebaliknya kita memiliki dua, dari dua qubit pada setiap ujung garis. Hal ini karena ini bekerja sangat baik dengan dekoder (yang akan kita pakai nanti). Pada ketidakadanya eror, kedua nilai ini akan selalu sama."

#: ../../tutorials/noise/6_repetition_code.ipynb:1126
msgid "The following ``0000`` is the :math:`d-1` results of the syndrome measurements for the first round.A ``0`` implies that the corresponding pair of qubits where the same, and ``1`` implies different. There are :math:`d-1` results because the line of :math:`d` code qubits has :math:`d-1` possible neighboring pairs. In the absence of errors, they will all be ``0``."
msgstr "``0000`` berikut adalah hasil :math:`d-1` dari pengukuran sindrom untuk putaran pertama. ``0`` menunjukkan bahwa pasangan qubit yang sesuai adalah sama, dan ``1`` menunjukkan berbeda. Terdapat :math:`d-1` hasil karena baris kode :math:`d` qubit memiliki :math:`d-1` kemungkinan pasangan bertetanggaan. Tanpa adanya eror, semuanya akan ``0``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1128
msgid "The ``0000`` that follows that is the syndrome change between the first and second rounds. It is therefore the bitwise ``OR`` of the syndrome measurement results from the second round with those from the first. In the absence of errors, they will all be ``0``."
msgstr "``0000`` yang mengikuti adalah perubahan sindrom antara putaran pertama dan kedua. Oleh karena itu bitwise ``OR`` dari pengukuran sindrom dihasilkan dari putaran kedua dengan yang ada dari putaran pertama. Tanpa adanya eror, mereka semua akan bernilai ``0``."

#: ../../tutorials/noise/6_repetition_code.ipynb:1130
msgid "Subsequent blocks follow the same formula, though the last requires some comment. This is not measured using the standard method (with a link qubit). Instead it is calculated from the final readout measurement of all code qubits. Again it is presented as a syndrome change, and will be all ``0`` in the absence of errors. This is the :math:`T+1`-th block of syndrome measurements since, as it is not done in the same way as the others, it is not counted among the :math:`T` syndrome measurement rounds."
msgstr "Blok-blok berikutnya mengikuti formula yang sama, meskipun yang terakhir dibutuhkan beberapa komen, Ini tidak diukur menggunakan metode standar (dengan qubit link). Sebaliknya ini dihitung dari pengukuran readout terakhir dari semua qubit kode. Sekali lagi ini disajikan sebagai perubahan sindrom, dan semuanya menjadi ``0`` dengan tanpa adanya eror. Ini adalah blok :math:`T+1`-th dari pengukuran sindrom sejak ini tidak dilakukan dengan cara seperyi yang lainnya, ini tidak terhitung di antara putaran pengukuran sindrom :math:`T`."

#: ../../tutorials/noise/6_repetition_code.ipynb:1133
msgid "**Example 1:** ``0 0  0110 0000 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``0``. The syndrome shows that (most likely) the middle code qubit was flipped by an error before the first measurement round. This causes it to disagree with both neighboring code qubits for the rest of the circuit. This is shown by the syndrome in the first round, but the blocks for subsequent rounds do not report it as it no longer represents a change. Other sets of errors could also have caused this syndrome, but they would need to be more complex and so presumably less likely."
msgstr "**Contoh 1:** ``0 0  0110 0000 0000`` akan mewakili :math:`d=5`, :math:`T=2` kode repetisi dengan ``0`` yang dienkode. Sindrom menunjukkan bahwa (sangat mungkin) qubit kode yang di tengah dibalik oleh eror sebelum putaran pengukuran pertama. Ini menyebabkannya beberda dengan kedua qubit kode yang bersebelahan untuk sirkuit setelahnya. Ini ditunjukkan oleh sindrom di putaran pertama, tetapi blok untuk putaran selanjutnya tidak melaporkan hal itu karena tidak lagi menunjukkan sebuah perubahan. Set lainnya dari eror juga dapat menyebabkan sindrom ini, tetapi mereka perlu lebih kompleks dan sehingga kurang mungkin."

#: ../../tutorials/noise/6_repetition_code.ipynb:1136
msgid "**Example 2:** ``0 0  0010 0010 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``0``. Here one of the syndrome measurements reported a difference between two code qubits in the first round, leading to a ``1``. The next round did not see the same effect, and so resulted in a ``0``. However, since this disagreed with the previous result for the same syndrome measurement, and since we track syndrome changes, this change results in another ``1``. Subsequent rounds also do not detect anything, but this no longer represents a change and hence results in a ``0`` in the same position. Most likely the measurement result leading to the first ``1`` was an error."
msgstr "**Contoh 2:** ``0 0  0010 0010 0000`` akan mewakili :math:`d=5`, :math:`T=2` kode repetisi dengan ``0`` yang di enkode. Di sini salah satu sindrom pengukuran melaporkan sebuah perbedaan pada dua qubit kode di putaran pertama, mengarah ke ``1``. Putaran selanjutnya tidak melihat efek yang sama, menghasilkan ``0``. Tetapi, karena ini bertentangan dengan hasil sebelumnya untuk sindrom pengukuran yang sama, dan karena kita mleacak perubahan sindrom, perubahan ini menghasilkan ``1``. Putaran selanjutnya juga tidak mendeteksi apapun, tetapi ini tidak lagi mewakili sebuah perubahan sehingga menghasilkan ``0`` di posisi yang sama. Hasil pengukuran yang mengarah ke ``1`` pertama paling mungkin adalah eror."

#: ../../tutorials/noise/6_repetition_code.ipynb:1139
msgid "**Example 3:** ``0 1  0000 0001 0000`` would represent a :math:`d=5`, :math:`T=2` repetition code with encoded ``1``. A code qubit on the end of the line is flipped before the second round of syndrome measurements. This is detected by only a single syndrome measurement, because it is on the end of the line. For the same reason, it also disturbs one of the logical readouts."
msgstr "**Contoh 3:** ``0 1  0000 0001 0000`` akan mewakili :math:`d=5`, :math:`T=2` kdoe repetisi dengan ``1`` yang dienkode. Sebuah qubit kode di barisan akhir dibalikkan sebelum pengukuran sindrom pada putaran kedua. Ini dideteksi hanya oleh satu pengukuran sindrom, karena ini berada pada barisan terakhir. Untuk alasan yang sama, ini juga mengganggu salah satu dari readout logis."

#: ../../tutorials/noise/6_repetition_code.ipynb:1141
msgid "Note that in all these examples, a single error causes exactly two characters in the string to change from the value it would have with no errors. This is, in fact, the reason why the logical output consists of both endpoints. It is a property that will be used by the decoder."
msgstr "Perhatikan bahwa dalam semua contoh ini, eror tunggal menyebabkan tepat dua karakter di string untuk berubah bentuk dari nilai yang seharusnya dipunyai tanpa adanya eror. Ini, kenyataannya, adalah alasan mengapa output logis terdiri dari kedua titik akhir. Ini adalah properti yang akan digunakan oleh dekoder."

#: ../../tutorials/noise/6_repetition_code.ipynb:1152
msgid "To see the effects of noise, we need to specify a noise model. For example, let’s set up a simple noise model with gate and measurement errors."
msgstr "Untuk melihat efek dari noise, kita perlu menentukan model noise. Sebagai contoh, mari kita buat model noise sederhana dengan gerbang dan eror pengukuran."

#: ../../tutorials/noise/6_repetition_code.ipynb:1197
msgid "This can then be run to generate noisy results. Let’s make a quick function to do this, and then run it."
msgstr "Hal ini kemudian dapat dijalankan untuk menghasilkan hasil yang noisy. Mari kita membuat sebuah fungsi singkat untuk melakukan ini, dan kemudian menjalankannya."

#: ../../tutorials/noise/6_repetition_code.ipynb:1457
msgid "Here the non-noisy results are the most likely. The rest of the samples are distributed among other possibilities with non-trivial syndromes."
msgstr "Di sini hasil yang tidak noisy adalah yang paling mungkin. Sisa dari sampel didistribusikan di antara kemungkinan lain dengan sindrom non-trivial."

#: ../../tutorials/noise/6_repetition_code.ipynb:1469
msgid "Decoding a repetition code"
msgstr "Mendekode kode repetisi"

#: ../../tutorials/noise/6_repetition_code.ipynb:1471
msgid "Noisy results can change the logical value at readout, and so affect our ability to read out the logical qubit. This can be mitigated by looking at the syndrome values. These can tell us whether or not the logical values are most likely to have changed, and so allow us to correct for the errors. The process of analyzing the syndrome to correct for the errors is called ‘decoding’. We do this by building a decoding object for our code."
msgstr "Hasil yang noisy dapat mengubah nilai logis dari readout, dan sehingga mempengaruhi kemampuan kita untuk membaca qubit logis. Hal ini dapat dicegah dengan melihat pada nilai sindrom. Ini dapat memberitahu kita apakah nilai logis sangat mungkin sudah berubah, sehingga memungkinkan kita untuk mengoreksi erornya. Proses menganalisis sindrom untuk mengoreksi kesalahan disebut 'mendekode'. Kita melakukan ini dengan membuat sebuah objek dekode untuk kdoe kita."

#: ../../tutorials/noise/6_repetition_code.ipynb:1492
msgid "This analyzes the code by seeing how different kinds of error change the output. With this information, along with a decoding algorithm, we can determine what the logical value is most likely to have been."
msgstr "Ini menganalisis kode dengan melihat bagaimana berbagai macam eror mengubah keluarannya. Dengan informasi ini, bersama dengan algoritma dekode, kita dapat menentukan nilai logis apa yang paling mungkin terjadi."

#: ../../tutorials/noise/6_repetition_code.ipynb:1494
msgid "For example, let’s use the ‘matching’ algorithm to decode, which is based on minimum weight perfect matching. This takes specific output strings as input. We’ll give it the simple example string ``'1 0  001 100 100'``, for a logical ``1`` that has suffered two errors."
msgstr "Sebagai contoh, mari kita pakai algoritma 'pencocokan' untuk mendekode, yang didasarkan pada pencocokan sempurna dari berat minimum. Ini mengambil keluaran spesifik dari string sebagai masukannya. Kita akan memberikan contoh string sederhana ``'1 0  001 100 100'``, untuk ``1`` logis yang mengalami dua eror."

#: ../../tutorials/noise/6_repetition_code.ipynb:1535
msgid "The output is what the logical part should have been. As you can see, the decoder correctly determined that the readout should have been of a logical ``1``."
msgstr "Keluaran adalah bagian logis yang seharusnya. Seperti yang Anda lihat, dekoder dengan benar menentukan bahwa redout seharusnya adalah ``1`` logis."

#: ../../tutorials/noise/6_repetition_code.ipynb:1546
msgid "When we take many samples, we can determine the probability with which the decoder is incorrect. This should decrease exponentially as the code size is increased, since the configurations of noise that fool the decoder become less likely. The probability of a logical error is calculated using the ``logical_prob()`` method. This runs matching by default, but other algorithms can be specified by the ``algorithm`` kwarg."
msgstr "Saat kita mengambil banyak sampel, kita dapat menentukan probabilitas di mana dekoder salah. Ini akan berkurang secara eksponensial sebanding dengan peningkatan ukuran kode, karena konfigurasi dari noise yang menipu dekoder menjadi kurang mungkin. Probabilitas dari eror logis dihitung dengan menggunakan metode ``logical_prob()``. Ini menjalankan pencocokan secara default, tetapi algoritma lainnya dapat dispesifikasi dengan kwarg ``algorithm``."

