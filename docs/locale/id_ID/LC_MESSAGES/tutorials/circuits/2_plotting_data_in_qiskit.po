msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-05 21:02+0000\n"
"PO-Revision-Date: 2022-01-05 22:42\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/circuits/2_plotting_data_in_qiskit.po\n"
"X-Crowdin-File-ID: 9116\n"
"Language: id_ID\n"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:10
msgid "This page was generated from `tutorials/circuits/2_plotting_data_in_qiskit.ipynb`__."
msgstr "Halaman ini disadur dari ` tutorials/circuits/1_getting_started_with_qiskit.ipynb ` __."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:9
msgid "Qiskit Visualizations"
msgstr "Visualisasi Qiskit"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:33
msgid "Plot histogram"
msgstr "Tampilkan Histogram"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:35
msgid "To visualize the data from a quantum circuit run on a real device or ``qasm_simulator`` we have made a simple function"
msgstr "Untuk memvisualisasikan data dari sebuah sirkuit kuantum yang dijalankan pada perangkat nyata atau ` ` ` qasm_simulator ` ` kita telah membuat sebuah fungsi sederhana"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:37
msgid "``plot_histogram(data)``"
msgstr "` ` ` plot_histogram (data) ` `"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:39
msgid "As an example we make a 2-qubit Bell state"
msgstr "Sebagai contoh kita membuat sebuah 2-qubit Bell state"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:116
msgid "Options when plotting a histogram"
msgstr "Opsi untuk gambar sebuah histogram"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:118
msgid "The ``plot_histogram()`` has a few options to adjust the output graph. The first option is the ``legend`` kwarg. This is used to provide a label for the executions. It takes a list of strings use to label each execution’s results. This is mostly useful when plotting multiple execution results in the same histogram. The ``sort`` kwarg is used to adjust the order the bars in the histogram are rendered. It can be set to either ascending order with ``asc`` or descending order with ``desc``. The ``number_to_keep`` kwarg takes an integer for the number of terms to show, the rest are grouped together in a single bar called rest. You can adjust the color of the bars with the ``color`` kwarg which either takes a string or a list of strings for the colors to use for the bars for each execution. You can adjust whether labels are printed above the bars or not with the ``bar_labels`` kwarg. The last option available is the ``figsize`` kwarg which takes a tuple of the size in inches to make the output figure."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:176
msgid "Using the output from plot_histogram()"
msgstr "Menggunakan output dari plot_histogram ()"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:178
msgid "When using the plot_histogram() function it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object from ``plot_histogram()`` to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png``. The ``savefig()`` method takes a path so you can adjust the location and filename where you’re saving the output."
msgstr "Ketika menggunakan plot_histogram () fungsi itu mengembalikan sebuah ` `matplotlib.Figure ` ` ` untuk visualisasi yang telah dirender. Jupyter notebook memahami jenis return ini dan render untuk kita di tutorial ini, tapi ketika dieksekusi di luar Jupyter Anda tidak memiliki fitur ini secara otomatis. Namun, kelas natif ` `matplotlib.Figure ` ` ` memiliki metode untuk kedua tampilan dan menyimpan visualisasi. Anda dapat memanggil ` `.show () ` ` pada objek yang dikembalikan dari ` ` plot_histogram () ` ` untuk membuka gambar dalam jendela baru (dengan asumsi backend matplotlib anda yang dikonfigurasi adalah interaktif). Atau secara alternatif Anda dapat memanggil ` `.savefig( 'out.png') ` ` untuk menyimpan figur ke ` `out.png ` `. ` ` savefig () ` ` ` metode mengambil sebuah path sehingga Anda dapat menyesuaikan lokasi dan nama file di mana Anda menyimpan output."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:191
msgid "Plot State"
msgstr "Plot State"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:202
msgid "In many situations you want to see the state of a quantum computer. This could be for debugging. Here we assume you have this state (either from simulation or state tomography) and the goal is to visualize the quantum state. This requires exponential resources, so we advise to only view the state of small quantum systems. There are several functions for generating different types of visualization of a quantum state"
msgstr "Dalam banyak situasi Anda ingin melihat state dari komputer kuantum. Ini bisa untuk debugging. Di sini kita asumsikan Anda memiliki state ini (baik dari simulasi atau state tomografi) dan tujuannya adalah untuk visualisasi state kuantum. Hal ini membutuhkan eksponensial memori dan waktu, jadi kami menyarankan untuk hanya melihat state dari sistem kuantum kecil. Ada beberapa fungsi untuk menghasilkan jenis visualisasi berbeda dari state kuantum"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:212
msgid "A quantum state is either a state matrix :math:`\\rho` (Hermitian matrix) or statevector :math:`|\\psi\\rangle` (complex vector). The state matrix is related to the statevector by"
msgstr "Suatu state kuantum adalah suatu state matriks :math:`\\rho ` (matriks Hermitian) atau statevektor :math:` | \\psi\\rangle ` (vektor kompleks). State matriks berhubungan dengan statevector seperti"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:214
msgid "\\rho = |\\psi\\rangle\\langle \\psi|,\n\n"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:216
msgid "and is more general as it can represent mixed states (positive sum of statevectors)"
msgstr "dan lebih umum karena dapat mewakili state campuran (hasil penambahan positif dari statevectors)"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:218
msgid "\\rho = \\sum_k p_k |\\psi_k\\rangle\\langle \\psi_k |.\n\n"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:220
msgid "The visualizations generated by the functions are:"
msgstr "Visualisasi yang dihasilkan oleh fungsi-fungsi tersebut adalah:"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:222
msgid "``'plot_state_city'``: The standard view for quantum states where the real and imaginary (imag) parts of the state matrix are plotted like a city."
msgstr "` ` ''plot_state_city ' ` `: Pandangan standar untuk state kuantum di mana bagian riil dan imajiner (imag) dari state matriks diplot seperti sebuah kota."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:224
msgid "``'plot_state_qsphere'``: The Qiskit unique view of a quantum state where the amplitude and phase of the state vector are plotted in a spherical ball. The amplitude is the thickness of the arrow and the phase is the color. For mixed states it will show different ``'qsphere'`` for each component."
msgstr "` ` 'plot_state_qsphere ' ` `: Pandangan unik Qiskit dari state kuantum di mana amplitudo dan fase dari state vektor diplot dalam bola bulat. Ketebalan dari panah adalah amplitudo dan warna adalah fase. Untuk state campuran, ini akan menampilkan ` ` 'qsphere ' ` ` berbeda untuk setiap komponen."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:226
msgid "``'plot_state_paulivec'``: The representation of the state matrix using Pauli operators as the basis :math:`\\rho=\\sum_{q=0}^{d^2-1}p_jP_j/d`."
msgstr "` ` 'plot_state_paulivec ' ` `: Representasi dari state matriks menggunakan operator Pauli sebagai dasar :math:`\\rho = \\sum_ {q= 0} ^ {d ^ 2-1} p_jP_j/d `."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:228
msgid "``'plot_state_hinton'``: Same as ``'city'`` but where the size of the element represents the value of the matrix element."
msgstr "` ` ''plot_state_hinton '` `: Sama dengan ` ` ` 'city' ` ` dengan pengecualian di mana ukuran elemen mewakili nilai elemen matriks."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:230
msgid "``'plot_bloch_multivector'``: The projection of the quantum state onto the single qubit space and plotting on a bloch sphere."
msgstr "` ` 'plot_bloch_multivector ' ` `: Proyeksi dari state kuantum ke ruang qubit tunggal dan diplot pada bola bloch."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:361
msgid "Here we see that there is no information about the quantum state in the single qubit space as all vectors are zero."
msgstr "Di sini kita melihat bahwa tidak ada informasi tentang state kuantum dalam ruang qubit tunggal karena semua vektor adalah nol."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:373
msgid "Options when using state plotting functions"
msgstr "Opsi saat menggunakan fungsi penggambaran state"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:375
msgid "The various functions for plotting quantum states provide a number of options to adjust how the plots are rendered. Which options are available depends on the function being used."
msgstr "Berbagai fungsi untuk penggambaran state kuantum memberikan sejumlah pilihan untuk menyesuaikan bagaimana plot dirender. Opsi mana yang tersedia bergantung pada fungsi yang sedang digunakan."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:386
msgid "**plot_state_city()** options"
msgstr "Opsi **plot_state_city () **"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:388
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:422
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:455
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:502
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:596
msgid "**title** (str): a string that represents the plot title"
msgstr "** title** (str): string yang menjadi judul plot"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:389
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:423
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:456
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:489
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:503
msgid "**figsize** (tuple): figure size in inches (width, height)."
msgstr "** figsize** (tuple): ukuran figur dalam inci (lebar, tinggi)."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:390
msgid "**color** (list): a list of len=2 giving colors for real and imaginary components of matrix elements."
msgstr "** color** (list): list dengan len= 2 memberikan warna untuk komponen real dan imajiner dari elemen matriks."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:420
msgid "**plot_state_hinton()** options"
msgstr "Opsi **plot_state_hinton ()**"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:453
msgid "**plot_state_paulivec()** options"
msgstr "Opsi **plot_state_paulivec ()**"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:457
msgid "**color** (list or str): color of the expectation value bars."
msgstr "** color** (list atau str): warna dari nilai ekspektasi bar."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:487
msgid "**plot_state_qsphere()** options"
msgstr "Opsi **plot_state_qsphere ()**"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:500
msgid "**plot_bloch_multivector()** options"
msgstr "Opsi **plot_bloch_multivector ()**"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:534
msgid "Using the output from state plotting functions"
msgstr "Menggunakan output dari fungsi plot state"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:536
msgid "When using any of the state plotting functions it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png`` in the current working directory. The ``savefig()`` method takes a path so you can adjust the location and filename where you’re saving the output."
msgstr "Ketika menggunakan salah satu fungsi gambar state dia mengembalikan sebuah ` `matplotlib.Figure ` ` ` untuk visualisasi yang telah dirender. Jupyter notebook memahami jenis return ini dan render untuk kita di tutorial ini, tapi ketika dieksekusi di luar Jupyter Anda tidak memiliki fitur ini secara otomatis. Namun, kelas natif ` `matplotlib.Figure ` ` ` memiliki metode untuk kedua tampilan dan menyimpan visualisasi. Anda dapat memanggil ` `.show () ` ` pada objek yang dikembalikan untuk membuka gambar dalam jendela baru (dengan asumsi backend matplotlib anda yang dikonfigurasi adalah interaktif). Atau secara alternatif Anda dapat memanggil ` `.savefig( 'out.png') ` ` untuk menyimpan figur ke ` `out.png ` `. ` ` savefig () ` ` ` metode mengambil sebuah path sehingga Anda dapat menyesuaikan lokasi dan nama file di mana Anda menyimpan output."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:549
msgid "Plot Bloch Vector"
msgstr "Gambar Bloch Vector"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:551
msgid "A standard way of plotting a quantum system is using the Bloch vector. This only works for a single qubit and takes as input the Bloch vector."
msgstr "Cara yang standar untuk gambar sistem kuantum adalah menggunakan vektor Bloch. Ini hanya bisa untuk qubit tunggal dan mengambil vektor Bloch sebagai input."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:553
msgid "The Bloch vector is defined as :math:`[x = \\mathrm{Tr}[X \\rho], y = \\mathrm{Tr}[Y \\rho], z = \\mathrm{Tr}[Z \\rho]]`, where :math:`X`, :math:`Y`, and :math:`Z` are the Pauli operators for a single qubit and :math:`\\rho` is the state matrix."
msgstr "Vektor Bloch didefinisikan sebagai :math:` [x = \\mathrm{Tr}[X \\rho], y = \\mathrm{Tr}[Y \\rho], z = \\mathrm{Tr}[Z \\rho]] `, di mana :math:` X `, :math:` Y `, dan :math:` Z ` adalah operator Pauli untuk satu qubit tunggal dan :math:`\\rho ` adalah state matriks."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:594
msgid "Options for plot_bloch_vector()"
msgstr "Opsi untuk plot_bloch_vector ()"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:597
msgid "**figsize** (tuple): Figure size in inches (width, height)."
msgstr "** figsize** (tuple): ukuran figur dalam inci (lebar, tinggi)."

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:628
msgid "Adjusting the output from plot_bloch_vector()"
msgstr "Menyesuaikan output dari plot_bloch_vector()"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:630
msgid "When using the ``plot_bloch_vector`` function it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png`` in the current working directory. The ``savefig()`` method takes a path so you can adjust the location and filename where you’re saving the output."
msgstr "Ketika menggunakan ` ` plot_bloch_vector ` ` ` fungsi itu mengembalikan ` `matplotlib.Figure ` ` ` untuk visualisasi yang dirender. Jupyter notebook memahami jenis return ini dan merender untuk di tutorial ini, tapi ketika berjalan di luar Jupyter Anda tidak memiliki fitur ini secara otomatis. Namun, kelas natif ` `matplotlib.Figure ` ` ` memiliki metode untuk kedua tampilan dan menyimpan visualisasi. Anda dapat memanggil ` `.show () ` ` pada objek yang dikembalikan untuk membuka gambar dalam jendela baru (asumsikan backend matplotlib anda yang dikonfigurasi adalah interaktif). Atau secara alternatif anda dapat memanggil ` `.savefig( 'out.png') ` ` untuk menyimpan figur ke ` `out.png ` ` di direktori kerja saat ini. ` ` savefig () ` ` ` metode mengambil argumen sebuah path sehingga Anda dapat menyesuaikan lokasi dan nama file di mana Anda menyimpan output."

