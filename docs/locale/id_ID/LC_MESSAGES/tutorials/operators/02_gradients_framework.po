msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-08 17:23+0000\n"
"PO-Revision-Date: 2021-03-15 13:27\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/operators/02_gradients_framework.po\n"
"X-Crowdin-File-ID: 9410\n"
"Language: id_ID\n"

#: ../../tutorials/operators/02_gradients_framework.ipynb:10
msgid "This page was generated from `tutorials/operators/02_gradients_framework.ipynb`__."
msgstr "Halaman ini dihasilkan dari `tutorials/operators/02_gradients_framework.ipynb`__."

#: ../../tutorials/operators/02_gradients_framework.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/operators/02_gradients_framework.ipynb>`_."
msgstr "Jalankan secara interaktif di `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/operators/02_gradients_framework.ipynb>`_."

#: ../../tutorials/operators/02_gradients_framework.ipynb:9
msgid "Qiskit Gradient Framework"
msgstr "Kerangka Gradien Qiskit"

#: ../../tutorials/operators/02_gradients_framework.ipynb:11
msgid "The gradient framework enables the evaluation of quantum gradients as well as functions thereof. Besides standard first order gradients of expectation values of the form"
msgstr "Kerangka gradien memungkinkan evaluasi gradien kuantum dan fungsi daripadanya. Selain standar order pertama gradien dari ekpektasi nilai berbentuk"

#: ../../tutorials/operators/02_gradients_framework.ipynb:13
msgid "\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle\n\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:15
msgid "The gradient framework also supports the evaluation of second order gradients (Hessians), and the Quantum Fisher Information (QFI) of quantum states :math:`|\\psi\\left(\\theta\\right)\\rangle`."
msgstr "Kerangka gradien juga mendukung evaluasi order kedua gradien (Hessians), dan Quantum Fisher Information (QFI) dari state kuantum :math:`|\\psi\\left(\\theta\\right)\\rangle`."

#: ../../tutorials/operators/02_gradients_framework.ipynb:18
msgid "Table of Contents"
msgstr "Tabel Isi"

#: ../../tutorials/operators/02_gradients_framework.ipynb:20
msgid "`First Order Gradients <#grad>`__"
msgstr "`Gradien Orde Pertama <#grad>`__"

#: ../../tutorials/operators/02_gradients_framework.ipynb:21
msgid "`Gradients w.r.t. Measurement Operator Parameters <#grad_meas>`__"
msgstr "`Gradien terhadap Parameter Operator Pengukuran <#grad_meas>`__"

#: ../../tutorials/operators/02_gradients_framework.ipynb:22
msgid "`Gradients w.r.t. State Parameters <#grad_state>`__"
msgstr "`Gradien terhadap Parameter State <#grad_state>`__"

#: ../../tutorials/operators/02_gradients_framework.ipynb:23
msgid "`Natural Gradient <#nat_grad>`__"
msgstr "` Gradien Natural <#nat_grad> ` __"

#: ../../tutorials/operators/02_gradients_framework.ipynb:24
msgid "`Hessians <#hess>`__"
msgstr "`Hessians <#hess>`__"

#: ../../tutorials/operators/02_gradients_framework.ipynb:25
msgid "`Hessians w.r.t. Measurement Operator Parameters <#hess_meas>`__"
msgstr "`Hessians terhadap Operator Parameter Pengukuran <#hess_meas>`__"

#: ../../tutorials/operators/02_gradients_framework.ipynb:26
msgid "`Hessians w.r.t. State Parameters <#hess_state>`__"
msgstr "`Hessians terhadap Parameter State <#hess_state>`__"

#: ../../tutorials/operators/02_gradients_framework.ipynb:27
msgid "`Quantum Fisher Information <#qfi>`__"
msgstr "`Informasi Quantum Fisher <#qfi>`__"

#: ../../tutorials/operators/02_gradients_framework.ipynb:28
msgid "`Application Example: VQE with gradient-based optimization <#apps>`__"
msgstr "`Contoh Aplikasi: VQE dengan optimasi berbasis gradien <#apps>`__"

#: ../../tutorials/operators/02_gradients_framework.ipynb:39
msgid "|gradient_framework.png|"
msgstr "|gradient_framework.png|"

#: ../../tutorials/operators/02_gradients_framework.ipynb:53
msgid "Imports"
msgstr "Impor"

#: ../../tutorials/operators/02_gradients_framework.ipynb:83
msgid "First Order Gradients"
msgstr "Gradien Order Pertama"

#: ../../tutorials/operators/02_gradients_framework.ipynb:86
msgid "Given a parameterized quantum state :math:`|\\psi\\left(\\theta\\right)\\rangle = V\\left(\\theta\\right)|\\psi\\rangle` with input state :math:`|\\psi\\rangle`, parametrized Ansatz :math:`V\\left(\\theta\\right)`, and observable :math:`\\hat{O}\\left(\\omega\\right)=\\sum_{i}\\omega_i\\hat{O}_i`, we want to compute…"
msgstr "Dari state kuatum berparameter :math:`|\\psi\\left(\\theta\\right)\\rangle = V\\left(\\theta\\right)|\\psi\\rangle` dengan state input :math:`|\\psi\\rangle`, Ansatz berparameter :math:`V\\left(\\theta\\right)`, dan observable :math:`\\hat{O}\\left(\\omega\\right)=\\sum_{i}\\omega_i\\hat{O}_i`, kita akan menghitung…"

#: ../../tutorials/operators/02_gradients_framework.ipynb:97
msgid "Gradients w.r.t. Measurement Operator Parameters"
msgstr "Gradien terhadap Parameter Operator Pengukuran"

#: ../../tutorials/operators/02_gradients_framework.ipynb:100
msgid "Gradient of an expectation value w.r.t. a coefficient of the measurement operator respectively observable :math:`\\hat{O}\\left(\\omega\\right)`, i.e."
msgstr "Gradien dari nilai ekspektasi terhadap sebuah koefisien dari operator pengukuran atau observable :math:`\\hat{O}\\left (\\omega\\right)`, yaitu"

#: ../../tutorials/operators/02_gradients_framework.ipynb:102
msgid "\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\omega_i} = \\langle\\psi\\left(\\theta\\right)|\\hat{O}_i\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle.\n\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:113
msgid "First of all, we define a quantum state :math:`|\\psi\\left(\\theta\\right)\\rangle` and a Hamiltonian :math:`H` acting as observable. Then, the state and the Hamiltonian are wrapped into an object defining the expectation value"
msgstr "Pertama, kita definisikan state kuantum :math:` | \\psi\\left (\\theta\\right)\\rangle ` dan Hamiltonian :math:` H ` sebagai observable. Kemudian, state dan Hamiltonian dibungkus menjadi sebuah objek yang menentukan nilai ekspektasi"

#: ../../tutorials/operators/02_gradients_framework.ipynb:115
#: ../../tutorials/operators/02_gradients_framework.ipynb:1029
msgid "\\langle\\psi\\left(\\theta\\right)|H|\\psi\\left(\\theta\\right)\\rangle.\n\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:193
msgid "We construct a list of the parameters for which we aim to evaluate the gradient. In this case, the parameters are given as the coefficients of :math:`H`. Now, this list and the expectation value operator are used to generate the operator which represents the gradient."
msgstr "Kita membuat daftar parameter untuk mengevaluasi gradien. Dalam hal ini, parameter diberikan sebagai koefisien dari :math:`H`. Sekarang, daftar ini dan operator nilai ekspektasi digunakan untuk menghasilkan operator yang mewakili gradien."

#: ../../tutorials/operators/02_gradients_framework.ipynb:277
msgid "All that is left to do is to assign values to the pararameters and to evaluate the gradient operators."
msgstr "Yang tersisa untuk dilakukan adalah menetapkan nilai-nilai parameter dan evaluasi operator gradien."

#: ../../tutorials/operators/02_gradients_framework.ipynb:319
msgid "Gradients w.r.t. State Parameters"
msgstr "Gradiasi terhadap Parameter State"

#: ../../tutorials/operators/02_gradients_framework.ipynb:322
msgid "Gradient of an expectation value w.r.t. a state :math:`|\\psi\\left(\\theta\\right)\\rangle` parameter, i.e.\\"
msgstr "Gradien dari nilai ekspektasi terhadap satu state berparameter :math:` | \\psi\\left (\\theta\\right)\\rangle `, yaitu \\"

#: ../../tutorials/operators/02_gradients_framework.ipynb:324
msgid "\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}\n\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:326
msgid "respectively of sampling probabilities w.r.t. a state :math:`|\\psi\\left(\\theta\\right)\\rangle` parameter, i.e."
msgstr "masing-masing dari sampling probabilabilitas terhadap satu state berparameter :math:`|\\psi\\left(\\theta\\right)\\rangle`, yaitu."

#: ../../tutorials/operators/02_gradients_framework.ipynb:328
msgid "\\frac{\\partial p_i}{\\partial\\theta} = \\frac{\\partial\\langle\\psi\\left(\\theta\\right)|i\\rangle\\langle i |\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}.\n\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:330
msgid "A gradient w.r.t. a state parameter may be evaluated with different methods. Each method has advantages and disadvantages."
msgstr "Gradien dari satu state berparameter bisa dievaluasi dengan berbagai metoda. Tiap metoda punya kelebihan dan kekurangan."

#: ../../tutorials/operators/02_gradients_framework.ipynb:400
msgid "Parameter Shift Gradients"
msgstr "Parameter Pergeseran Gradien"

#: ../../tutorials/operators/02_gradients_framework.ipynb:402
msgid "Given a Hermitian operator :math:`g` with two unique eigenvalues :math:`\\pm r` which acts as generator for a parameterized quantum gate"
msgstr "Dari sebuah operator Hermitian :math:` g ` dengan dua eigenvalue unik :math:` \\pm r ` yang merupakan generator untuk sebuah gate kuantum berparameter"

#: ../../tutorials/operators/02_gradients_framework.ipynb:404
msgid "G(\\theta)= e^{-i\\theta g}.\n\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:406
msgid "Then, quantum gradients can be computed by using eigenvalue :math:`r` dependent shifts to parameters. All `standard, parameterized Qiskit gates <https://github.com/Qiskit/qiskit-terra/tree/master/qiskit/circuit/library/standard_gates>`__ can be shifted with :math:`\\pi/2`, i.e.,"
msgstr "Maka, gradien kuantum dapat dihitung dengan menggunakan eigenvalue :math:` r ` tergantung dari pergeseran ke parameter. Semua ` gate standard, parameterized Qiskit <https://github.com/Qiskit/qiskit-terra/tree/master/qiskit/circuit/library/standard_gates>` __ bisa digeser dengan :math:` \\pi/2 `, yaitu,"

#: ../../tutorials/operators/02_gradients_framework.ipynb:408
msgid "\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta} =  \\left(\\langle\\psi\\left(\\theta+\\pi/2\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta+\\pi/2\\right)\\rangle -\\partial\\langle\\psi\\left(\\theta-\\pi/2\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta-\\pi/2\\right)\\rangle\\right) / 2.\n\n"
msgstr "\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta} =  \\left(\\langle\\psi\\left(\\theta+\\pi/2\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta+\\pi/2\\right)\\rangle -\\partial\\langle\\psi\\left(\\theta-\\pi/2\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta-\\pi/2\\right)\\rangle\\right) / 2.\n\n"

#: ../../tutorials/operators/02_gradients_framework.ipynb:410
msgid "Probability gradients are computed equivalently."
msgstr "Probabilitas gradien dihitung secara serupa."

#: ../../tutorials/operators/02_gradients_framework.ipynb:597
msgid "#### Linear Combination of Unitaries Gradients Unitaries can be written as :math:`U\\left(\\omega\\right) = e^{iM\\left(\\omega\\right)}`, where :math:`M\\left(\\omega\\right)` denotes a parameterized Hermitian matrix. Further, Hermitian matrices can be decomposed into weighted sums of Pauli terms, i.e., :math:`M\\left(\\omega\\right) = \\sum_pm_p\\left(\\omega\\right)h_p` with :math:`m_p\\left(\\omega\\right)\\in\\mathbb{R}` and :math:`h_p=\\bigotimes\\limits_{j=0}^{n-1}\\sigma_{j, p}` for :math:`\\sigma_{j, p}\\in\\left\\{I, X, Y, Z\\right\\}` acting on the :math:`j^{\\text{th}}` qubit. Thus, the gradients of :math:`U_k\\left(\\omega_k\\right)` are given by :nbsphinx-math:`\\begin{equation*} \\frac{\\partial U_k\\left(\\omega_k\\right)}{\\partial\\omega_k} = \\sum\\limits_pi \\frac{\\partial m_{k,p}\\left(\\omega_k\\right)}{\\partial\\omega_k}U_k\\left(\\omega_k\\right)h_{k_p}. \\end{equation*}`"
msgstr "#### Kombinasi linear dari gradien unitary dapat ditulis sebagai :math:`U\\left(\\omega\\right) = e^{iM\\left(\\omega\\right)}`, dimana :math:`M\\left(\\omega\\right)` adalah matrix Herimitian berparameter. Lebih dalam, matrik Hermitian bisa diurai sebagai jumlah dari Pauli term dengan koefisien, yaitu, :math:`M\\left(\\omega\\right) = \\sum_pm_p\\left(\\omega\\right)h_p` dengan :math:`m_p\\left(\\omega\\right)\\in\\mathbb{R}` and :math:`h_p=\\bigotimes\\limits_{j=0}^{n-1}\\sigma_{j, p}` for :math:`\\sigma_{j, p}\\in\\left\\{I, X, Y, Z\\right\\}` yang diaplikasi di qubit ke :math:`j^{\\text{th}}`. Karena itu, gradien dari :math:`U_k\\left(\\omega_k\\right)` adalah :nbsphinx-math:`\\begin{equation*} \\frac{\\partial U_k\\left(\\omega_k\\right)}{\\partial\\omega_k} = \\sum\\limits_pi \\frac{\\partial m_{k,p}\\left(\\omega_k\\right)}{\\partial\\omega_k}U_k\\left(\\omega_k\\right)h_{k_p}. \\end{equation*}`"

#: ../../tutorials/operators/02_gradients_framework.ipynb:602
msgid "Combining this observation with a circuit structure presented in `Simulating physical phenomena by quantum networks <https://journals.aps.org/pra/abstract/10.1103/PhysRevA.65.042323>`__ allows us to compute the gradient with the evaluation of a single quantum circuit."
msgstr "Menggabungkan observasi ini dengan struktur sirkuit yang disajikan di `Simulating physical phenomena by quantum networks <https://journals.aps.org/pra/abstract/10.1103/PhysRevA.65.042323>` __ memungkinkan kita untuk menghitung gradien dari evaluasi sirkuit kuantum tunggal."

#: ../../tutorials/operators/02_gradients_framework.ipynb:743
msgid "#### Finite Difference Gradients"
msgstr "#### Gradien Finite Difference"

#: ../../tutorials/operators/02_gradients_framework.ipynb:745
msgid "Unlike the other methods, finite difference gradients are numerical estimations rather than analytical values. This implementation employs a central difference approach with :math:`\\epsilon << 1` $ :nbsphinx-math:`\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}` :nbsphinx-math:`\\approx `:nbsphinx-math:`\\frac{1}{2\\epsilon}` :nbsphinx-math:`\\left`(:nbsphinx-math:`\\langle`:nbsphinx-math:`\\psi`:nbsphinx-math:`\\left`(:nbsphinx-math:`\\theta`+:nbsphinx-math:`\\epsilon`:nbsphinx-math:`\\right`)\\|:nbsphinx-math:`\\hat{O}`:nbsphinx-math:`\\left`(:nbsphinx-math:`\\omega`:nbsphinx-math:`\\right`)\\|:nbsphinx-math:`\\psi`:nbsphinx-math:`\\left`(:nbsphinx-math:`\\theta`+:nbsphinx-math:`\\epsilon`:nbsphinx-math:`\\right`):nbsphinx-math:`\\rangle `- :nbsphinx-math:`\\partial`:nbsphinx-math:`\\langle`:nbsphinx-math:`\\psi`:nbsphinx-math:`\\left`(:nbsphinx-math:`\\theta`-:nbsphinx-math:`\\epsilon`:nbsphinx-math:`\\right`)\\|:nbsphinx-math:`\\hat{O}`:nbsphinx-math:`\\left`(:nbsphinx-math:`\\omega`:nbsphinx-math:`\\right`)\\|:nbsphinx-math:`\\psi`:nbsphinx-math:`\\left`(:nbsphinx-math:`\\theta`-:nbsphinx-math:`\\epsilon`:nbsphinx-math:`\\right`):nbsphinx-math:`\\rangle`:nbsphinx-math:`\\right`).$ Probability gradients are computed equivalently."
msgstr "Lain dari metoda lain, gradien finite difference adalah estimasi numerik dan bukan nilai analisa. Implementasinya menggunakan pendekatan difference sentral dengan :math:`\\epsilon << 1` $ :nbsphinx-math:`\\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}` :nbsphinx-math:`\\approx `:nbsphinx-math:`\\frac{1}{2\\epsilon}` :nbsphinx-math:`\\left`(:nbsphinx-math:`\\langle`:nbsphinx-math:`\\psi`:nbsphinx-math:`\\left`(:nbsphinx-math:`\\theta`+:nbsphinx-math:`\\epsilon`:nbsphinx-math:`\\right`)\\|:nbsphinx-math:`\\hat{O}`:nbsphinx-math:`\\left`(:nbsphinx-math:`\\omega`:nbsphinx-math:`\\right`)\\|:nbsphinx-math:`\\psi`:nbsphinx-math:`\\left`(:nbsphinx-math:`\\theta`+:nbsphinx-math:`\\epsilon`:nbsphinx-math:`\\right`):nbsphinx-math:`\\rangle `- :nbsphinx-math:`\\partial`:nbsphinx-math:`\\langle`:nbsphinx-math:`\\psi`:nbsphinx-math:`\\left`(:nbsphinx-math:`\\theta`-:nbsphinx-math:`\\epsilon`:nbsphinx-math:`\\right`)\\|:nbsphinx-math:`\\hat{O}`:nbsphinx-math:`\\left`(:nbsphinx-math:`\\omega`:nbsphinx-math:`\\right`)\\|:nbsphinx-math:`\\psi`:nbsphinx-math:`\\left`(:nbsphinx-math:`\\theta`-:nbsphinx-math:`\\epsilon`:nbsphinx-math:`\\right`):nbsphinx-math:`\\rangle`:nbsphinx-math:`\\right`).$ Gradien probabilitas juga dihitung serupa."

#: ../../tutorials/operators/02_gradients_framework.ipynb:936
msgid "Natural Gradient"
msgstr "Gradien Natural"

#: ../../tutorials/operators/02_gradients_framework.ipynb:939
msgid "A special type of first order gradient is the natural gradient which has proven itself useful in classical machine learning and is already being studied in the quantum context. This quantity represents a gradient that is ‘rescaled’ with the inverse `Quantum Fisher Information matrix <#qfi>`__ (QFI)"
msgstr "Sebuah jenis khusus gradien orde pertama adalah gradien natural yang terbukti berguna dalam machine learning klasik dan sudah digunakan dalam konteks kuantum. Kuantitas ini mewakili gradien yang 'dicocokkan' dengan inversi dari `matrik Quantum Fisher Information <#qfi> ` __ (QFI)"

#: ../../tutorials/operators/02_gradients_framework.ipynb:941
msgid "QFI ^{-1} \\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}.\n\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:952
msgid "Instead of inverting the QFI, one can also use a least-square solver with or without regularization to solve"
msgstr "Alih-alih menginversi QFI, kita juga dapat menggunakan solver least-square dengan atau tanpa regularisasi untuk mendapatkan solusi"

#: ../../tutorials/operators/02_gradients_framework.ipynb:954
msgid "QFI x = \\frac{\\partial\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta}.\n\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:956
msgid "The implementation supports ridge and lasso regularization with automatic search for a good parameter using `L-curve corner search <https://arxiv.org/pdf/1608.04571.pdf>`__ as well as two types of perturbations of the diagonal elements of the QFI."
msgstr "Implementasi ini mendukung regularisasi ridge dan lasso dengan pencarian otomatis untuk parameter yang cocok menggunakan ` L-curve corner search <https://arxiv.org/pdf/1608.04571.pdf>` __ serta dua jenis perturbasi elemen diagonal dari QFI."

#: ../../tutorials/operators/02_gradients_framework.ipynb:958
msgid "The natural gradient can be used instead of the standard gradient with any gradient-based optimizer and/or ODE solver."
msgstr "Gradien natural dapat digunakan sebagai pengganti gradien standar dengan pengoptimasi berbasis gradien apapun dan/atau solver ODE."

#: ../../tutorials/operators/02_gradients_framework.ipynb:1006
msgid "Hessians (Second Order Gradients)"
msgstr "Hessians (Gradien Order Kedua)"

#: ../../tutorials/operators/02_gradients_framework.ipynb:1009
msgid "Four types of second order gradients are supported by the gradient framework. 1. Gradient of an expectation value w.r.t. a coefficient of the measurement operator respectively observable :math:`\\hat{O}\\left(\\omega\\right)`, i.e. $ :nbsphinx-math:`\\frac{\\partial^2\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\omega^2}` $ 2. Gradient of an expectation value w.r.t. a state :math:`|\\psi\\left(\\theta\\right)\\rangle` parameter, i.e. $ :nbsphinx-math:`\\frac{\\partial^2\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta^2}` $ 3. Gradient of sampling probabilities w.r.t. a state :math:`|\\psi\\left(\\theta\\right)\\rangle` parameter, i.e. $ :nbsphinx-math:`\\frac{\\partial^2 p_i}{\\partial\\theta^2}` = :nbsphinx-math:`\\frac{\\partial^2\\langle\\psi\\left(\\theta\\right)|i\\rangle\\langle i|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta^2}` $ 4. Gradient of an expectation value w.r.t. a state :math:`|\\psi\\left(\\theta\\right)\\rangle` parameter and a coefficient of the measurement operator respectively observable :math:`\\hat{O}\\left(\\omega\\right)`, i.e. $ :nbsphinx-math:`\\frac{\\partial^2\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta\\partial\\omega}` $"
msgstr "Empat tipe gradien order kedua disupport oleh kerangka gradien. 1. Gradien nilai ekspektasi dari sebuah koefisien daripada operator pengukuran atau observabel :math:`\\hat{O}\\left(\\omega\\right)`, yaitu $ :nbsphinx-math:`\\frac{\\partial^2\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\omega^2}` $ 2. Gradien nilai ekpektasi daripada sebuah state berparameter :math:`|\\psi\\left(\\theta\\right)\\rangle`, yaitu $ :nbsphinx-math:`\\frac{\\partial^2\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta^2}` $ 3. Gradien dari probabilitas sampling daripada sebuah state berparameter :math:`|\\psi\\left(\\theta\\right)\\rangle`, yaitu $ :nbsphinx-math:`\\frac{\\partial^2 p_i}{\\partial\\theta^2}` = :nbsphinx-math:`\\frac{\\partial^2\\langle\\psi\\left(\\theta\\right)|i\\rangle\\langle i|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta^2}` $ 4. Gradien ekpektasi value daripada state berparameter :math:`|\\psi\\left(\\theta\\right)\\rangle` dan satu koefisien dari operator pengukuran atau observabel :math:`\\hat{O}\\left(\\omega\\right)`, i.e. $ :nbsphinx-math:`\\frac{\\partial^2\\langle\\psi\\left(\\theta\\right)|\\hat{O}\\left(\\omega\\right)|\\psi\\left(\\theta\\right)\\rangle}{\\partial\\theta\\partial\\omega}` $"

#: ../../tutorials/operators/02_gradients_framework.ipynb:1013
msgid "In the following examples are given for the first two Hessian types. The remainig Hessians are evaluated analogously."
msgstr "Pada contoh berikut diberikan untuk dua jenis Hessian yang pertama. Sisa Hessian yang lain bisa dievaluasi serupa."

#: ../../tutorials/operators/02_gradients_framework.ipynb:1024
msgid "Hessians w.r.t. Measurement Operator Parameters"
msgstr "Hessians dari Parameter Pengukuran Operator"

#: ../../tutorials/operators/02_gradients_framework.ipynb:1027
msgid "Again, we define a quantum state :math:`|\\psi\\left(\\theta\\right)\\rangle` and a Hamiltonian :math:`H` acting as observable. Then, the state and the Hamiltonian are wrapped into an object defining the expectation value"
msgstr "Sekali lagi, kita mendefinisikan state kuantum :math:` | \\psi\\left (\\theta\\right)\\rangle ` dan Hamiltonian :math:` H ` yang bertindak sebagai observabel. Kemudian, state dan Hamiltonian dibungkus menjadi objek yang menentukan nilai ekspektasi"

#: ../../tutorials/operators/02_gradients_framework.ipynb:1066
msgid "Next, we can choose the parameters for which we want to compute second order gradients. - Given a tuple, the ``Hessian`` will evaluate the second order gradient for the two parameters. - Given a list, the ``Hessian`` will evaluate the second order gradient for all possible combinations of tuples of these parameters."
msgstr "Selanjutnya, kita dapat memilih parameter untuk dihitung gradien orde kedua-nya. -Dari sebuah tuple, ` ` Hessian ` ` akan mengevaluasi gradien orde kedua untuk kedua parameter tersebut. -Dari sebuah daftar, ` ` Hessian ` ` akan mengevaluasi gradien orde kedua untuk semua kemungkinan kombinasi tuple dari parameter tersebut."

#: ../../tutorials/operators/02_gradients_framework.ipynb:1068
msgid "After binding parameter values to the parameters, the Hessian can be evaluated."
msgstr "Setelah nilai parameter ditaut ke parameter, Hessian dapat dievaluasi."

#: ../../tutorials/operators/02_gradients_framework.ipynb:1123
msgid "Hessians w.r.t. State Parameters"
msgstr "Hessians dari Parameter State"

#: ../../tutorials/operators/02_gradients_framework.ipynb:1199
msgid "Quantum Fisher Information (QFI)"
msgstr "Quantum Fisher Information (QFI)"

#: ../../tutorials/operators/02_gradients_framework.ipynb:1202
msgid "The Quantum Fisher Information is a metric tensor which is representative for the representation capacity of a parameterized quantum state :math:`|\\psi\\left(\\theta\\right)\\rangle = V\\left(\\theta\\right)|\\psi\\rangle` with input state :math:`|\\psi\\rangle`, parametrized Ansatz :math:`V\\left(\\theta\\right)`."
msgstr "Quantum Fisher Information adalah tensor metrik yang berguna untuk representasi kapasitas dari state kuantum berparameter :math:` | \\psi\\left (\\theta\\right)\\rangle = V\\left (\\theta\\right) | \\psi\\rangle ` dengan state input :math:` | \\psi\\rangle `, Ansatz berparameter :math:` V \\left (\\theta\\right) `."

#: ../../tutorials/operators/02_gradients_framework.ipynb:1204
msgid "The entries of the QFI for a pure state reads"
msgstr "Entri dari QFI untuk sebuah state murni adalah"

#: ../../tutorials/operators/02_gradients_framework.ipynb:1206
msgid "QFI_{kl} = 4 * \\text{Re}\\left[\\langle\\partial_k\\psi|\\partial_l\\psi\\rangle-\\langle\\partial_k\\psi|\\psi\\rangle\\langle\\psi|\\partial_l\\psi\\rangle \\right].\n\n"
msgstr ""

#: ../../tutorials/operators/02_gradients_framework.ipynb:1218
msgid "Circuit QFIs"
msgstr "Sirkuit QFI"

#: ../../tutorials/operators/02_gradients_framework.ipynb:1220
msgid "The evaluation of the QFI corresponding to a quantum state that is generated by a parameterized quantum circuit can be conducted in different ways."
msgstr "Evaluasi QFI dari state kuantum yang dihasilkan oleh rangkaian kuantum berparameter dapat dilakukan dengan berberapa cara berbeda."

#: ../../tutorials/operators/02_gradients_framework.ipynb:1223
msgid "Linear Combination Full QFI"
msgstr "Kombinasi Linear Full QFI"

#: ../../tutorials/operators/02_gradients_framework.ipynb:1225
msgid "To compute the full QFI, we use a working qubit as well as intercepting controlled gates. See e.g. \\ `Variational ansatz-based quantum simulation of imaginary time evolution <https://www.nature.com/articles/s41534-019-0187-2>`__."
msgstr "Untuk menghitung full QFI, kita menggunakan qubit pekerja serta kontrol gate intersep. Lihat misalnya ` Variational ansatz-based quantum simulation of imaginary time evolution <https://www.nature.com/articles/s41534-019-0187-2>` __."

#: ../../tutorials/operators/02_gradients_framework.ipynb:1280
msgid "Block-diagonal and Diagonal Approximation"
msgstr "Aproksimasi blok-diagonal dan diagonal"

#: ../../tutorials/operators/02_gradients_framework.ipynb:1282
msgid "A block-diagonal resp. diagonal approximation of the QFI can be computed without additional working qubits. This implementation requires the unrolling into Pauli rotations and unparameterized Gates."
msgstr "Sebuah blok-diagonal atau aproksimasi diagonal dari QFI dapat dihitung tanpa qubit pekerja tambahan. Implementasi ini memerlukan perentangan ke rotasi Pauli dan gate tanpa parameter."

#: ../../tutorials/operators/02_gradients_framework.ipynb:1346
msgid "Application Example: VQE with gradient-based optimization"
msgstr "Contoh aplikasi: VQE dengan optimisasi berbasis gradien"

#: ../../tutorials/operators/02_gradients_framework.ipynb:1359
msgid "Additional Imports"
msgstr "Impor Tambahan"

#: ../../tutorials/operators/02_gradients_framework.ipynb:1386
msgid "The Gradient Framework can also be used for a gradient-based ``VQE``. First, the Hamiltonian and wavefunction ansatz are initialized."
msgstr "Framework Gradien juga dapat digunakan untuk gradien berbasis ` ` VQE ` `. Pertama, Hamiltonian dan fungsi gelombang ansatz diinisialisasi."

#: ../../tutorials/operators/02_gradients_framework.ipynb:1432
msgid "Now, we can choose whether the ``VQE`` should use a ``Gradient`` or ``NaturalGradient``, define a ``QuantumInstance`` to execute the quantum circuits and run the algorithm."
msgstr "Sekarang, kita dapat memilih apakah ` ` VQE ` ` harus menggunakan ` ` Gradient ` ` atau ` ` ` NaturalGradient ` `, mendefinisikan ` ` QuantumInstance ` ` untuk eksekusi sirkuit kuantum dan menjalankan algoritma."

