msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-19 22:32+0000\n"
"PO-Revision-Date: 2023-02-20 16:58\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/finance/docs/locale/en/LC_MESSAGES/tutorials/00_amplitude_estimation.po\n"
"X-Crowdin-File-ID: 9709\n"

#: ../../tutorials/00_amplitude_estimation.ipynb:9
msgid "This page was generated from `docs/tutorials/00_amplitude_estimation.ipynb`__."
msgstr "このページは `docs/tutorials/00_amplitude_estimation.ipynb`__ から生成されました。"

#: ../../tutorials/00_amplitude_estimation.ipynb:9
msgid "Quantum Amplitude Estimation"
msgstr "量子振幅推定"

#: ../../tutorials/00_amplitude_estimation.ipynb:11
msgid "Given an operator :math:`\\mathcal{A}` that acts as"
msgstr "演算子 :math:`\\mathcal{A}` が以下のように与えられたとします。"

#: ../../tutorials/00_amplitude_estimation.ipynb:13
msgid "\\mathcal{A}|0\\rangle = \\sqrt{1 - a}|\\Psi_0\\rangle + \\sqrt{a}|\\Psi_1\\rangle"
msgstr "\\mathcal{A}|0\\rangle = \\sqrt{1 - a}|\\Psi_0\\rangle + \\sqrt{a}|\\Psi_1\\rangle"

#: ../../tutorials/00_amplitude_estimation.ipynb:18
msgid "Quantum Amplitude Estimation (QAE) is the task of finding an estimate for the amplitude :math:`a` of the state :math:`|\\Psi_1\\rangle`:"
msgstr "量子振幅推定 (QAE) は 状態 :math:`|\\Psi_1\\rangle`: の 振幅 :math:`a` を推定するタスクです。"

#: ../../tutorials/00_amplitude_estimation.ipynb:20
msgid "a = |\\langle\\Psi_1 | \\Psi_1\\rangle|^2."
msgstr "a = |\\langle\\Psi_1 | \\Psi_1\\rangle|^2."

#: ../../tutorials/00_amplitude_estimation.ipynb:25
msgid "This task has first been investigated by Brassard et al. [1] in 2000 and their algorithm uses a combination of the Grover operator"
msgstr "このタスクは Brassard et al. [1] in 2000 によって最初に研究されましたが、彼らのアルゴリズムはグローバー演算子の組み合わせを使います。"

#: ../../tutorials/00_amplitude_estimation.ipynb:27
msgid "\\mathcal{Q} = \\mathcal{A}\\mathcal{S}_0\\mathcal{A}^\\dagger\\mathcal{S}_{\\Psi_1}"
msgstr "\\mathcal{Q} = \\mathcal{A}\\mathcal{S}_0\\mathcal{A}^\\dagger\\mathcal{S}_{\\Psi_1}"

#: ../../tutorials/00_amplitude_estimation.ipynb:32
msgid "where :math:`\\mathcal{S}_0` and :math:`\\mathcal{S}_{\\Psi_1}` are reflections about the :math:`|0\\rangle` and :math:`|\\Psi_1\\rangle` states, respectively, and phase estimation. However this algorithm, called ``AmplitudeEstimation`` in Qiskit, requires large circuits and is computationally expensive. Therefore, other variants of QAE have been proposed, which we will showcase in this tutorial for a simple example."
msgstr "ここで :math:`\\mathcal{S}_0` と :math:`\\mathcal{S}_{\\Psi_1}` はそれぞれ :math:`|0\\rangle` と :math:`|\\Psi_1\\rangle` の状態に対する反転です。そして位相推定があります。しかしながら Qiskit で ``AmplitudeEstimation`` と呼ばれるこのアルゴリズムは、大きな回路を必要とし、計算コストが高いです。そのため、QAE の改良が提案されており、このチュートリアルでは簡単な例を紹介します。"

#: ../../tutorials/00_amplitude_estimation.ipynb:34
msgid "In our example, :math:`\\mathcal{A}` describes a Bernoulli random variable with (assumed to be unknown) success probability :math:`p`:"
msgstr "この例では、 :math:`\\mathcal{A}` はベルヌーイ確率変数で、(本来は未知の) 成功確率 :math:`p` を持っています。"

#: ../../tutorials/00_amplitude_estimation.ipynb:36
msgid "\\mathcal{A}|0\\rangle = \\sqrt{1 - p}|0\\rangle + \\sqrt{p}|1\\rangle."
msgstr "\\mathcal{A}|0\\rangle = \\sqrt{1 - p}|0\\rangle + \\sqrt{p}|1\\rangle."

#: ../../tutorials/00_amplitude_estimation.ipynb:41
msgid "On a quantum computer, we can model this operator with a rotation around the :math:`Y`-axis of a single qubit"
msgstr "量子コンピューターでは、単一量子ビットの :math:`Y` 軸の回転でこの演算子をモデル化することができます。"

#: ../../tutorials/00_amplitude_estimation.ipynb:43
msgid "\\mathcal{A} = R_Y(\\theta_p), \\theta_p = 2\\sin^{-1}(\\sqrt{p})."
msgstr "\\mathcal{A} = R_Y(\\theta_p), \\theta_p = 2\\sin^{-1}(\\sqrt{p})."

#: ../../tutorials/00_amplitude_estimation.ipynb:48
msgid "The Grover operator for this case is particularly simple"
msgstr "このケースのグローバー演算子は特に単純です"

#: ../../tutorials/00_amplitude_estimation.ipynb:50
msgid "\\mathcal{Q} = R_Y(2\\theta_p),"
msgstr "\\mathcal{Q} = R_Y(2\\theta_p),"

#: ../../tutorials/00_amplitude_estimation.ipynb:55
msgid "whose powers are very easy to calculate: :math:`\\mathcal{Q}^k = R_Y(2k\\theta_p)`."
msgstr "この累乗の計算は非常に簡単で次のようになります: :math:`\\mathcal{Q}^k = R_Y(2k\\theta_p)`"

#: ../../tutorials/00_amplitude_estimation.ipynb:66
msgid "We’ll fix the probability we want to estimate to :math:`p = 0.2`."
msgstr "推定したい確率を :math:`p = 0.2` に固定します。"

#: ../../tutorials/00_amplitude_estimation.ipynb:87
msgid "Now we can define circuits for :math:`\\mathcal{A}` and :math:`\\mathcal{Q}`."
msgstr "これで :math:`\\mathcal{A}` と :math:`\\mathcal{Q}` を定義できます。"

#: ../../tutorials/00_amplitude_estimation.ipynb:147
msgid "Qiskit’s Amplitude Estimation workflow"
msgstr "Qiskit の振幅推定ワークフロー"

#: ../../tutorials/00_amplitude_estimation.ipynb:158
msgid "Qiskit implements several QAE algorithms that all derive from the ``AmplitudeEstimator`` interface. In the initializer we specify algorithm specific settings and the ``estimate`` method, which does all the work, takes an ``EstimationProblem`` as input and returns an ``AmplitudeEstimationResult`` object. Since all QAE variants follow the same interface, we can use them all to solve the same problem instance."
msgstr "Qiskit はいくつかの QAE のアルゴリズムを全て ``AmplitudeEstimator`` インタフェースを派生して実装します。初期化ではアルゴリズム固有の設定と ``estimate`` メソッドを指定します。このメソッドが全ての処理を行い、 ``EstimationProblem`` を入力にとり、``AmplitudeEstimationResult`` オブジェクトを返します。全ての QAE の実装は同じインタフェースに従うため、同じ問題インスタンスを解くために使えます。"

#: ../../tutorials/00_amplitude_estimation.ipynb:160
msgid "Next, we’ll run all different QAE algorithms. To do so, we first define the estimation problem which will contain the :math:`\\mathcal{A}` and :math:`\\mathcal{Q}` operators as well as how to identify the :math:`|\\Psi_1\\rangle` state, which in this simple example is just :math:`|1\\rangle`."
msgstr "次に、異なる QAE アルゴリズムをすべて実行します。 これを行うには まず、 :math:`\\mathcal{A}` と :math:`\\mathcal{Q}` 演算子を含む推定問題と、 :math:`|\\Psi_1\\rangle` 状態を識別する方法を定義します。 この簡単な例では、その状態は :math:`|1\\rangle` です。"

#: ../../tutorials/00_amplitude_estimation.ipynb:187
msgid "To execute circuits we’ll use ``Sampler``."
msgstr "回路を実行するには、 ``Sampler`` を使います。"

#: ../../tutorials/00_amplitude_estimation.ipynb:211
msgid "Canonical AE"
msgstr "基本の振幅推定"

#: ../../tutorials/00_amplitude_estimation.ipynb:213
msgid "Now let’s solve this with the original QAE implementation by Brassard et al. [1]."
msgstr "Brassard et al. [1] によるオリジナル QAE によって解いてみましょう。"

#: ../../tutorials/00_amplitude_estimation.ipynb:239
msgid "With the algorithm defined, we can call the ``estimate`` method and provide it with the problem to solve."
msgstr "定義されたアルゴリズムで、解くべき問題を与えて、``estimate`` メソッドを呼び出すことができます。"

#: ../../tutorials/00_amplitude_estimation.ipynb:260
msgid "The estimate is available in the ``estimation`` key:"
msgstr "推定値は ``estimation`` キーにあります。"

#: ../../tutorials/00_amplitude_estimation.ipynb:305
msgid "We see that this is not a very good estimate for our target of :math:`p=0.2`! That’s due to the fact the canonical AE is restricted to a discrete grid, specified by the number of evaluation qubits:"
msgstr "これは我々のターゲットである :math:`p=0.2` に対してあまり良い見積もりではありません! 基本の振幅推定は評価量子ビット数で指定した離散値に制限されているためです。"

#: ../../tutorials/00_amplitude_estimation.ipynb:349
msgid "To improve the estimate we can interpolate the measurement probabilities and compute the maximum likelihood estimator that produces this probability distribution:"
msgstr "推定値を改善するために測定確率補完して、この確率分布を生成する最尤推定値を計算することができます。"

#: ../../tutorials/00_amplitude_estimation.ipynb:394
msgid "We can have a look at the circuit that AE executes:"
msgstr "振幅推定が実行する回路を見ることができます。"

#: ../../tutorials/00_amplitude_estimation.ipynb:451
msgid "Iterative Amplitude Estimation"
msgstr "反復振幅推定"

#: ../../tutorials/00_amplitude_estimation.ipynb:453
msgid "See [2]."
msgstr "[2] を参照してください。"

#: ../../tutorials/00_amplitude_estimation.ipynb:507
msgid "The circuits here only consist of Grover powers and are much cheaper!"
msgstr "ここでの回路はグローバーの累乗だけで構成されており、はるかに回路コストが低いです。"

#: ../../tutorials/00_amplitude_estimation.ipynb:539
msgid "Maximum Likelihood Amplitude Estimation"
msgstr "最尤振幅推定"

#: ../../tutorials/00_amplitude_estimation.ipynb:541
msgid "See [3]."
msgstr "[3] を参照してください。"

#: ../../tutorials/00_amplitude_estimation.ipynb:595
msgid "Faster Amplitude Estimation"
msgstr "高速振幅推定"

#: ../../tutorials/00_amplitude_estimation.ipynb:597
msgid "See [4]."
msgstr "[4] を参照してください。"

#: ../../tutorials/00_amplitude_estimation.ipynb:681
msgid "References"
msgstr "参考文献"

#: ../../tutorials/00_amplitude_estimation.ipynb:683
msgid "[1] Quantum Amplitude Amplification and Estimation. Brassard et al (2000). https://arxiv.org/abs/quant-ph/0005055"
msgstr "[1] Quantum Amplitude Amplification and Estimation. Brassard et al (2000). https://arxiv.org/abs/quant-ph/0005055"

#: ../../tutorials/00_amplitude_estimation.ipynb:685
msgid "[2] Iterative Quantum Amplitude Estimation. Grinko, D., Gacon, J., Zoufal, C., & Woerner, S. (2019). https://arxiv.org/abs/1912.05559"
msgstr "[2] Iterative Quantum Amplitude Estimation. Grinko, D., Gacon, J., Zoufal, C., & Woerner, S. (2019). https://arxiv.org/abs/1912.05559"

#: ../../tutorials/00_amplitude_estimation.ipynb:687
msgid "[3] Amplitude Estimation without Phase Estimation. Suzuki, Y., Uno, S., Raymond, R., Tanaka, T., Onodera, T., & Yamamoto, N. (2019). https://arxiv.org/abs/1904.10246"
msgstr "[3] Amplitude Estimation without Phase Estimation. Suzuki, Y., Uno, S., Raymond, R., Tanaka, T., Onodera, T., & Yamamoto, N. (2019). https://arxiv.org/abs/1904.10246"

#: ../../tutorials/00_amplitude_estimation.ipynb:689
msgid "[4] Faster Amplitude Estimation. K. Nakaji (2020). https://arxiv.org/pdf/2003.02417.pdf"
msgstr "[4] Faster Amplitude Estimation. K. Nakaji (2020). https://arxiv.org/pdf/2003.02417.pdf"

