msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-11 21:34+0000\n"
"PO-Revision-Date: 2022-08-11 22:32\n"
"Last-Translator: \n"
"Language-Team: Chinese Simplified\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: zh-CN\n"
"X-Crowdin-File: /master/finance/docs/locale/en/LC_MESSAGES/tutorials/03_european_call_option_pricing.po\n"
"X-Crowdin-File-ID: 9688\n"
"Language: zh_CN\n"

#: ../../tutorials/03_european_call_option_pricing.ipynb:9
msgid "This page was generated from `docs/tutorials/03_european_call_option_pricing.ipynb`__."
msgstr "此页面是从 `docs/tutorials/03_european_call_option_pricing.ipynb`__中生成的。"

#: ../../tutorials/03_european_call_option_pricing.ipynb:9
msgid "Pricing European Call Options"
msgstr ""

#: ../../tutorials/03_european_call_option_pricing.ipynb:21
msgid "Introduction"
msgstr "简介"

#: ../../tutorials/03_european_call_option_pricing.ipynb:23
msgid "Suppose a European call option with strike price :math:`K` and an underlying asset whose spot price at maturity :math:`S_T` follows a given random distribution. The corresponding payoff function is defined as:"
msgstr "假设有一份行使价为 :math:`K`的欧式看涨期权，而其标的资产在到期日的现货价 :math:`S_T`服从给定的随机分布。相应的回报函数被定义为："

#: ../../tutorials/03_european_call_option_pricing.ipynb:25
msgid "\\max\\{S_T - K, 0\\}\n\n"
msgstr "\\max\\{S_T - K, 0\\}\n\n"

#: ../../tutorials/03_european_call_option_pricing.ipynb:27
msgid "In the following, a quantum algorithm based on amplitude estimation is used to estimate the expected payoff, i.e., the fair price before discounting, for the option:"
msgstr "接下来，我们使用一个基于振幅估计的量子算法来估计期权的期望回报，即其贴现之前的平价："

#: ../../tutorials/03_european_call_option_pricing.ipynb:29
msgid "\\mathbb{E}\\left[ \\max\\{S_T - K, 0\\} \\right]\n\n"
msgstr "\\mathbb{E}\\left[ \\max\\{S_T - K, 0\\} \\right]\n\n"

#: ../../tutorials/03_european_call_option_pricing.ipynb:31
msgid "as well as the corresponding :math:`\\Delta`, i.e., the derivative of the option price with respect to the spot price, defined as:"
msgstr "以及相应的:math:`\\Delta`, 即期权价相对于现货价的导数，定义为"

#: ../../tutorials/03_european_call_option_pricing.ipynb:33
msgid "\\Delta = \\mathbb{P}\\left[S_T \\geq K\\right]"
msgstr "\\Delta = \\mathbb{P}\\left[S_T \\geq K\\right]"

#: ../../tutorials/03_european_call_option_pricing.ipynb:38
msgid "The approximation of the objective function and a general introduction to option pricing and risk analysis on quantum computers are given in the following papers:"
msgstr "以下论文给出该目标函数的近似并且对基于量子计算机的期权定价和风险分析进行一般性的介绍："

#: ../../tutorials/03_european_call_option_pricing.ipynb:40
msgid "`Quantum Risk Analysis. Woerner, Egger. 2018. <https://www.nature.com/articles/s41534-019-0130-6>`__"
msgstr ""

#: ../../tutorials/03_european_call_option_pricing.ipynb:41
msgid "`Option Pricing using Quantum Computers. Stamatopoulos et al. 2019. <https://quantum-journal.org/papers/q-2020-07-06-291/>`__"
msgstr ""

#: ../../tutorials/03_european_call_option_pricing.ipynb:72
msgid "Uncertainty Model"
msgstr "不确定性模型"

#: ../../tutorials/03_european_call_option_pricing.ipynb:74
msgid "We construct a circuit to load a log-normal random distribution into a quantum state. The distribution is truncated to a given interval :math:`[\\text{low}, \\text{high}]` and discretized using :math:`2^n` grid points, where :math:`n` denotes the number of qubits used. The unitary operator corresponding to the circuit implements the following:"
msgstr ""

#: ../../tutorials/03_european_call_option_pricing.ipynb:76
msgid "\\big|0\\rangle_{n} \\mapsto \\big|\\psi\\rangle_{n} = \\sum_{i=0}^{2^n-1} \\sqrt{p_i}\\big|i\\rangle_{n},\n\n"
msgstr "\\big|0\\rangle_{n} \\mapsto \\big|\\psi\\rangle_{n} = \\sum_{i=0}^{2^n-1} \\sqrt{p_i}\\big|i\\rangle_{n},\n\n"

#: ../../tutorials/03_european_call_option_pricing.ipynb:78
msgid "where :math:`p_i` denote the probabilities corresponding to the truncated and discretized distribution and where :math:`i` is mapped to the right interval using the affine map:"
msgstr "其中 :math:`p_i` 表示该被截断而离散化分布中相应的概率，而其中的:math:`i`通过仿射映射被映射到右手边的区间："

#: ../../tutorials/03_european_call_option_pricing.ipynb:80
msgid "\\{0, \\ldots, 2^n-1\\} \\ni i \\mapsto \\frac{\\text{high} - \\text{low}}{2^n - 1} * i + \\text{low} \\in [\\text{low}, \\text{high}].\n\n"
msgstr "\\{0, \\ldots, 2^n-1\\} \\ni i \\mapsto \\frac{\\text{high} - \\text{low}}{2^n - 1} * i + \\text{low} \\in [\\text{low}, \\text{high}].\n\n"

#: ../../tutorials/03_european_call_option_pricing.ipynb:162
msgid "Payoff Function"
msgstr "收益函数"

#: ../../tutorials/03_european_call_option_pricing.ipynb:164
msgid "The payoff function equals zero as long as the spot price at maturity :math:`S_T` is less than the strike price :math:`K` and then increases linearly. The implementation uses a comparator, that flips an ancilla qubit from :math:`\\big|0\\rangle` to :math:`\\big|1\\rangle` if :math:`S_T \\geq K`, and this ancilla is used to control the linear part of the payoff function."
msgstr "只要在到期日现货价 :math:`S_T`低于行使价执行价格:math:`K`，回报函数就等于零，随后线性增长。该实现使用一个比较器，如果:math:`S_T\\geq K`那么它将辅助量子比特 从:math:`\\big|0\\rangle`翻转到:math:`\\big|1\\rangle`，而此辅助量子比特用于控制回报函数的线性部分。"

#: ../../tutorials/03_european_call_option_pricing.ipynb:166
msgid "The linear part itself is then approximated as follows. We exploit the fact that :math:`\\sin^2(y + \\pi/4) \\approx y + 1/2` for small :math:`|y|`. Thus, for a given approximation rescaling factor :math:`c_\\text{approx} \\in [0, 1]` and :math:`x \\in [0, 1]` we consider"
msgstr ""

#: ../../tutorials/03_european_call_option_pricing.ipynb:168
msgid "\\sin^2( \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + \\pi/4) \\approx \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + 1/2\n\n"
msgstr "\\sin^2( \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + \\pi/4) \\approx \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + 1/2\n\n"

#: ../../tutorials/03_european_call_option_pricing.ipynb:170
msgid "\\ for small :math:`c_\\text{approx}`."
msgstr ""

#: ../../tutorials/03_european_call_option_pricing.ipynb:172
msgid "We can easily construct an operator that acts as"
msgstr "我们可以轻松地建立具有如下作用的算符"

#: ../../tutorials/03_european_call_option_pricing.ipynb:174
msgid "\\big|x\\rangle \\big|0\\rangle \\mapsto \\big|x\\rangle \\left( \\cos(a*x+b) \\big|0\\rangle + \\sin(a*x+b) \\big|1\\rangle \\right),\n\n"
msgstr "\\big|x\\rangle \\big|0\\rangle \\mapsto \\big|x\\rangle \\left( \\cos(a*x+b) \\big|0\\rangle + \\sin(a*x+b) \\big|1\\rangle \\right),\n\n"

#: ../../tutorials/03_european_call_option_pricing.ipynb:176
msgid "using controlled Y-rotations."
msgstr ""

#: ../../tutorials/03_european_call_option_pricing.ipynb:178
msgid "Eventually, we are interested in the probability of measuring :math:`\\big|1\\rangle` in the last qubit, which corresponds to :math:`\\sin^2(a*x+b)`. Together with the approximation above, this allows to approximate the values of interest. The smaller we choose :math:`c_\\text{approx}`, the better the approximation. However, since we are then estimating a property scaled by :math:`c_\\text{approx}`, the number of evaluation qubits :math:`m` needs to be adjusted accordingly."
msgstr ""

#: ../../tutorials/03_european_call_option_pricing.ipynb:180
msgid "For more details on the approximation, we refer to: `Quantum Risk Analysis. Woerner, Egger. 2018. <https://www.nature.com/articles/s41534-019-0130-6>`__"
msgstr ""

#: ../../tutorials/03_european_call_option_pricing.ipynb:404
msgid "Evaluate Expected Payoff"
msgstr "计算预期收益"

#: ../../tutorials/03_european_call_option_pricing.ipynb:593
msgid "Instead of constructing these circuits manually, Qiskit’s finance module offers the ``EuropeanCallPricing`` circuit, which already implements this functionality as building block."
msgstr ""

#: ../../tutorials/03_european_call_option_pricing.ipynb:676
msgid "Evaluate Delta"
msgstr ""

#: ../../tutorials/03_european_call_option_pricing.ipynb:678
msgid "The Delta is a bit simpler to evaluate than the expected payoff. Similarly to the expected payoff, we use a comparator circuit and an ancilla qubit to identify the cases where :math:`S_T > K`. However, since we are only interested in the probability of this condition being true, we can directly use this ancilla qubit as the objective qubit in amplitude estimation without any further approximation."
msgstr ""

