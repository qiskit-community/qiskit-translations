msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-24 21:49+0000\n"
"PO-Revision-Date: 2022-03-24 22:03\n"
"Last-Translator: \n"
"Language-Team: Thai\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: th\n"
"X-Crowdin-File: /master/finance/docs/locale/en/LC_MESSAGES/tutorials/09_credit_risk_analysis.po\n"
"X-Crowdin-File-ID: 9700\n"
"Language: th_TH\n"

#: ../../tutorials/09_credit_risk_analysis.ipynb:9
msgid "This page was generated from `docs/tutorials/09_credit_risk_analysis.ipynb`__."
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:9
msgid "Credit Risk Analysis"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:21
msgid "Introduction"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:23
msgid "This tutorial shows how quantum algorithms can be used for credit risk analysis. More precisely, how Quantum Amplitude Estimation (QAE) can be used to estimate risk measures with a quadratic speed-up over classical Monte Carlo simulation. The tutorial is based on the following papers:"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:25
msgid "`Quantum Risk Analysis. Stefan Woerner, Daniel J. Egger. <https://www.nature.com/articles/s41534-019-0130-6>`__ [Woerner2019]"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:26
msgid "`Credit Risk Analysis using Quantum Computers. Egger et al.Â (2019) <https://arxiv.org/abs/1907.03044>`__ [Egger2019]"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:28
msgid "A general introduction to QAE can be found in the following paper:"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:30
msgid "`Quantum Amplitude Amplification and Estimation. Gilles Brassard et al. <http://arxiv.org/abs/quant-ph/0005055>`__"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:32
msgid "The structure of the tutorial is as follows:"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:34
msgid "`Problem Definition <#Problem-Definition>`__"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:35
msgid "`Uncertainty Model <#Uncertainty-Model>`__"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:36
msgid "`Expected Loss <#Expected-Loss>`__"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:37
msgid "`Cumulative Distribution Function <#Cumulative-Distribution-Function>`__"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:38
msgid "`Value at Risk <#Value-at-Risk>`__"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:39
msgid "`Conditional Value at Risk <#Conditional-Value-at-Risk>`__"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:67
msgid "Problem Definition"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:69
msgid "In this tutorial we want to analyze the credit risk of a portfolio of :math:`K` assets. The default probability of every asset :math:`k` follows a *Gaussian Conditional Independence* model, i.e., given a value :math:`z` sampled from a latent random variable :math:`Z` following a standard normal distribution, the default probability of asset :math:`k` is given by"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:71
msgid "p_k(z) = F\\left( \\frac{F^{-1}(p_k^0) - \\sqrt{\\rho_k}z}{\\sqrt{1 - \\rho_k}} \\right)\n\n"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:73
msgid "where :math:`F` denotes the cumulative distribution function of :math:`Z`, :math:`p_k^0` is the default probability of asset :math:`k` for :math:`z=0` and :math:`\\rho_k` is the sensitivity of the default probability of asset :math:`k` with respect to :math:`Z`. Thus, given a concrete realization of :math:`Z` the individual default events are assumed to be independent from each other."
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:75
msgid "We are interested in analyzing risk measures of the total loss"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:77
msgid "L = \\sum_{k=1}^K \\lambda_k X_k(Z)\n\n"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:79
msgid "where :math:`\\lambda_k` denotes the *loss given default* of asset :math:`k`, and given :math:`Z`, :math:`X_k(Z)` denotes a Bernoulli variable representing the default event of asset :math:`k`. More precisely, we are interested in the expected value :math:`\\mathbb{E}[L]`, the Value at Risk (VaR) of :math:`L` and the Conditional Value at Risk of :math:`L` (also called Expected Shortfall). Where VaR and CVaR are defined as"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:81
msgid "\\text{VaR}_{\\alpha}(L) = \\inf \\{ x \\mid \\mathbb{P}[L <= x] \\geq 1 - \\alpha \\}\n\n"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:83
msgid "with confidence level :math:`\\alpha \\in [0, 1]`, and"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:85
msgid "\\text{CVaR}_{\\alpha}(L) = \\mathbb{E}[ L \\mid L \\geq \\text{VaR}_{\\alpha}(L) ].\n\n"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:87
msgid "For more details on the considered model, see, e.g., `Regulatory Capital Modeling for Credit Risk. Marek Rutkowski, Silvio Tarca <https://arxiv.org/abs/1412.1183>`__"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:89
msgid "The problem is defined by the following parameters:"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:91
msgid "number of qubits used to represent :math:`Z`, denoted by :math:`n_z`"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:92
msgid "truncation value for :math:`Z`, denoted by :math:`z_{\\text{max}}`, i.e., Z is assumed to take :math:`2^{n_z}` equidistant values in :math:`\\{-z_{max}, ..., +z_{max}\\}`"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:93
msgid "the base default probabilities for each asset :math:`p_0^k \\in (0, 1)`, :math:`k=1, ..., K`"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:94
msgid "sensitivities of the default probabilities with respect to :math:`Z`, denoted by :math:`\\rho_k \\in [0, 1)`"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:95
msgid "loss given default for asset :math:`k`, denoted by :math:`\\lambda_k`"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:96
msgid "confidence level for VaR / CVaR :math:`\\alpha \\in [0, 1]`."
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:126
msgid "Uncertainty Model"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:128
msgid "We now construct a circuit that loads the uncertainty model. This can be achieved by creating a quantum state in a register of :math:`n_z` qubits that represents :math:`Z` following a standard normal distribution. This state is then used to control single qubit Y-rotations on a second qubit register of :math:`K` qubits, where a :math:`|1\\rangle` state of qubit :math:`k` represents the default event of asset :math:`k`. The resulting quantum state can be written as"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:130
msgid " |\\Psi\\rangle = \\sum_{i=0}^{2^{n_z}-1} \\sqrt{p_z^i} |z_i \\rangle \\bigotimes_{k=1}^K\n"
"\\left( \\sqrt{1 - p_k(z_i)}|0\\rangle + \\sqrt{p_k(z_i)}|1\\rangle\\right),"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:135
msgid "where we denote by :math:`z_i` the :math:`i`-th value of the discretized and truncated :math:`Z` [Egger2019]."
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:237
msgid "We now use the simulator to validate the circuit that constructs :math:`|\\Psi\\rangle` and compute the corresponding exact values for"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:239
msgid "expected loss :math:`\\mathbb{E}[L]`"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:240
msgid "PDF and CDF of :math:`L`"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:241
msgid "value at risk :math:`VaR(L)` and corresponding probability"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:242
msgid "conditional value at risk :math:`CVaR(L)`"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:469
msgid "Expected Loss"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:471
msgid "To estimate the expected loss, we first apply a weighted sum operator to sum up individual losses to total loss:"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:473
msgid "\\mathcal{S}: |x_1, ..., x_K \\rangle_K |0\\rangle_{n_S} \\mapsto |x_1, ..., x_K \\rangle_K |\\lambda_1x_1 + ... + \\lambda_K x_K\\rangle_{n_S}.\n\n"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:475
msgid "The required number of qubits to represent the result is given by"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:477
msgid "n_s = \\lfloor \\log_2( \\lambda_1 + ... + \\lambda_K ) \\rfloor + 1.\n\n"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:479
msgid "Once we have the total loss distribution in a quantum register, we can use the techniques described in [Woerner2019] to map a total loss :math:`L \\in \\{0, ..., 2^{n_s}-1\\}` to the amplitude of an objective qubit by an operator"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:481
msgid " | L \\rangle_{n_s}|0\\rangle \\mapsto\n"
"| L \\rangle_{n_s} \\left( \\sqrt{1 - L/(2^{n_s}-1)}|0\\rangle + \\sqrt{L/(2^{n_s}-1)}|1\\rangle \\right),"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:486
msgid "which allows to run amplitude estimation to evaluate the expected loss."
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:539
msgid "Create the state preparation circuit:"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:683
msgid "Before we use QAE to estimate the expected loss, we validate the quantum circuit representing the objective function by just simulating it directly and analyzing the probability of the objective qubit being in the :math:`|1\\rangle` state, i.e., the value QAE will eventually approximate."
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:756
msgid "Next we run QAE to estimate the expected loss with a quadratic speed-up over classical Monte Carlo simulation."
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:825
msgid "Cumulative Distribution Function"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:827
msgid "Instead of the expected loss (which could also be estimated efficiently using classical techniques) we now estimate the cumulative distribution function (CDF) of the loss. Classically, this either involves evaluating all the possible combinations of defaulting assets, or many classical samples in a Monte Carlo simulation. Algorithms based on QAE have the potential to significantly speed up this analysis in the future."
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:829
msgid "To estimate the CDF, i.e., the probability :math:`\\mathbb{P}[L \\leq x]`, we again apply :math:`\\mathcal{S}` to compute the total loss, and then apply a comparator that for a given value :math:`x` acts as"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:831
msgid " \\mathcal{C}: |L\\rangle_n|0> \\mapsto\n"
"\\begin{cases}\n"
"|L\\rangle_n|1> & \\text{if}\\quad L \\leq x \\\\\n"
"|L\\rangle_n|0> & \\text{if}\\quad L > x.\n"
"\\end{cases}"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:839
msgid "The resulting quantum state can be written as"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:841
msgid " \\sum_{L = 0}^{x} \\sqrt{p_{L}}|L\\rangle_{n_s}|1\\rangle +\n"
"\\sum_{L = x+1}^{2^{n_s}-1} \\sqrt{p_{L}}|L\\rangle_{n_s}|0\\rangle,"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:846
msgid "where we directly assume the summed up loss values and corresponding probabilities instead of presenting the details of the uncertainty model."
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:848
msgid "The CDF(\\ :math:`x`) equals the probability of measuring :math:`|1\\rangle` in the objective qubit and QAE can be directly used to estimate it."
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:979
#: ../../tutorials/09_credit_risk_analysis.ipynb:1638
msgid "Again, we first use quantum simulation to validate the quantum circuit."
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:1158
msgid "Next we run QAE to estimate the CDF for a given :math:`x`."
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:1223
msgid "Value at Risk"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:1225
msgid "In the following we use a bisection search and QAE to efficiently evaluate the CDF to estimate the value at risk."
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:1456
msgid "Conditional Value at Risk"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:1458
msgid "Last, we compute the CVaR, i.e.Â the expected value of the loss conditional to it being larger than or equal to the VaR. To do so, we evaluate a piecewise linear objective function :math:`f(L)`, dependent on the total loss :math:`L`, that is given by"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:1460
msgid "f(L) = \\begin{cases}\n"
"0 & \\text{if}\\quad L \\leq VaR \\\\\n"
"L & \\text{if}\\quad L > VaR.\n"
"\\end{cases}"
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:1468
msgid "To normalize, we have to divide the resulting expected value by the VaR-probability, i.e.Â \\ :math:`\\mathbb{P}[L \\leq VaR]`."
msgstr ""

#: ../../tutorials/09_credit_risk_analysis.ipynb:1712
msgid "Next we run QAE to estimate the CVaR."
msgstr ""

