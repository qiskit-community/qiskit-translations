msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 18:08+0000\n"
"PO-Revision-Date: 2022-01-26 14:51\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/finance/docs/locale/en/LC_MESSAGES/tutorials/04_european_put_option_pricing.po\n"
"X-Crowdin-File-ID: 9690\n"
"Language: ko_KR\n"

#: ../../tutorials/04_european_put_option_pricing.ipynb:9
msgid "This page was generated from `docs/tutorials/04_european_put_option_pricing.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/04_european_put_option_pricing.ipynb`__ 에서 생성되었다."

#: ../../tutorials/04_european_put_option_pricing.ipynb:9
msgid "Pricing European Put Options"
msgstr "가격 책정 유럽 통화 풋 옵션"

#: ../../tutorials/04_european_put_option_pricing.ipynb:21
msgid "Introduction"
msgstr "소개"

#: ../../tutorials/04_european_put_option_pricing.ipynb:23
msgid "Suppose a European put option with strike price :math:`K` and an underlying asset whose spot price at maturity :math:`S_T` follows a given random distribution. The corresponding payoff function is defined as:"
msgstr ""

#: ../../tutorials/04_european_put_option_pricing.ipynb:25
msgid "\\max\\{K - S_T, 0\\}\n\n"
msgstr "\\max\\{K - S_T, 0\\}\n\n"

#: ../../tutorials/04_european_put_option_pricing.ipynb:27
msgid "In the following, a quantum algorithm based on amplitude estimation is used to estimate the expected payoff, i.e., the fair price before discounting, for the option:"
msgstr ""

#: ../../tutorials/04_european_put_option_pricing.ipynb:29
msgid "\\mathbb{E}\\left[ \\max\\{K - S_T, 0\\} \\right]\n\n"
msgstr "\\mathbb{E}\\left[ \\max\\{K - S_T, 0\\} \\right]\n\n"

#: ../../tutorials/04_european_put_option_pricing.ipynb:31
msgid "as well as the corresponding :math:`\\Delta`, i.e., the derivative of the option price with respect to the spot price, defined as:"
msgstr ""

#: ../../tutorials/04_european_put_option_pricing.ipynb:33
msgid "\\Delta = -\\mathbb{P}\\left[S_T \\leq K\\right]"
msgstr "\\Delta = -\\mathbb{P}\\left[S_T \\leq K\\right]"

#: ../../tutorials/04_european_put_option_pricing.ipynb:38
msgid "The approximation of the objective function and a general introduction to option pricing and risk analysis on quantum computers are given in the following papers:"
msgstr "목표 함수의 근사치와 양자 컴퓨터에 대한 옵션 가격 결정 및 위험 분석에 대한 일반 소개는 다음과 연구자료에서 설명한다."

#: ../../tutorials/04_european_put_option_pricing.ipynb:40
msgid "`Quantum Risk Analysis. Woerner, Egger. 2018. <https://arxiv.org/abs/1806.06893>`__"
msgstr "`Quantum Risk Analysis. Woerner, Egger. 2018. <https://arxiv.org/abs/1806.06893>`__"

#: ../../tutorials/04_european_put_option_pricing.ipynb:41
msgid "`Option Pricing using Quantum Computers. Stamatopoulos et al. 2019. <https://arxiv.org/abs/1905.02666>`__"
msgstr "`Option Pricing using Quantum Computers. Stamatopoulos et al. 2019. <https://arxiv.org/abs/1905.02666>`__"

#: ../../tutorials/04_european_put_option_pricing.ipynb:83
msgid "Uncertainty Model"
msgstr "불확실성 모델"

#: ../../tutorials/04_european_put_option_pricing.ipynb:85
msgid "We construct a circuit factory to load a log-normal random distribution into a quantum state. The distribution is truncated to a given interval :math:`[\\text{low}, \\text{high}]` and discretized using :math:`2^n` grid points, where :math:`n` denotes the number of qubits used. The unitary operator corresponding to the circuit factory implements the following:"
msgstr "우리는 로그 정규 랜덤 분포를 양자 상태로 로딩하기 위해 회로 팩토리를 구성한다. 분포는 주어진 간격 :math:`[\\text{low}, \\text{high}]` 및 :math:`2^n` 그리드 포인트를 사용하여 분리되며, 여기서 :math:`n` 은 사용된 큐비트의 수를 나타낸다. 회로 팩토리에 해당하는 유니터리 연산자는 다음을 구현한다:"

#: ../../tutorials/04_european_put_option_pricing.ipynb:87
msgid "\\big|0\\rangle_{n} \\mapsto \\big|\\psi\\rangle_{n} = \\sum_{i=0}^{2^n-1} \\sqrt{p_i}\\big|i\\rangle_{n},\n\n"
msgstr "\\big|0\\rangle_{n} \\mapsto \\big|\\psi\\rangle_{n} = \\sum_{i=0}^{2^n-1} \\sqrt{p_i}\\big|i\\rangle_{n},\n\n"

#: ../../tutorials/04_european_put_option_pricing.ipynb:89
msgid "where :math:`p_i` denote the probabilities corresponding to the truncated and discretized distribution and where :math:`i` is mapped to the right interval using the affine map:"
msgstr ""

#: ../../tutorials/04_european_put_option_pricing.ipynb:91
msgid "\\{0, \\ldots, 2^n-1\\} \\ni i \\mapsto \\frac{\\text{high} - \\text{low}}{2^n - 1} * i + \\text{low} \\in [\\text{low}, \\text{high}].\n\n"
msgstr "\\{0, \\ldots, 2^n-1\\} \\ni i \\mapsto \\frac{\\text{high} - \\text{low}}{2^n - 1} * i + \\text{low} \\in [\\text{low}, \\text{high}].\n\n"

#: ../../tutorials/04_european_put_option_pricing.ipynb:173
msgid "Payoff Function"
msgstr "페이오프 함수"

#: ../../tutorials/04_european_put_option_pricing.ipynb:175
msgid "The payoff function decreases linearly with an increasing spot price at maturity :math:`S_T` until it reaches zero for a spot price equal to the strike price :math:`K`, it stays constant to zero for larger spot prices. The implementation uses a comparator, that flips an ancilla qubit from :math:`\\big|0\\rangle` to :math:`\\big|1\\rangle` if :math:`S_T \\leq K`, and this ancilla is used to control the linear part of the payoff function."
msgstr "만기시 현물 가격의 합 :math:`(S_T^1 + S_T^2)`가 행사가 :math:`K` 보다 적고 선형 적으로 증가하는 한 지불 함수는 0이다. 만약 :math:`(S_T^1 + S_T^2) \\geq K` 라면, 구현에서는 먼저 가중치 합산 연산자를 사용하여 현물 가격의 합계를 ancilla 레지스터로 계산 한 다음 비교기를 사용하여 ancilla 큐비트를 :math:`\\big|0\\rangle` 에서 :math:`\\big|1\\rangle` 로 뒤집는다.이 ancilla는 페이오프함수의 선형 부분을 제어하는 ​​데 사용된다."

#: ../../tutorials/04_european_put_option_pricing.ipynb:177
msgid "The linear part itself is then approximated as follows. We exploit the fact that :math:`\\sin^2(y + \\pi/4) \\approx y + 1/2` for small :math:`|y|`. Thus, for a given approximation rescaling scaling factor :math:`c_\\text{approx} \\in [0, 1]` and :math:`x \\in [0, 1]` we consider"
msgstr "선형 부품 자체는 다음과 같이 근사화된다. 우리는 작은 :math:`|y|` 에 대해 :math:`\\sin^2(y + \\pi/4) \\approx y + 1/2` 이라는 사실을 이용한다. 따라서 근사 배율 조정 계수 :math:`c_\\text{approx} \\in [0, 1]` 와 :math:`x \\in [0, 1]` 가 주어졌을 때 우리는 다음을"

#: ../../tutorials/04_european_put_option_pricing.ipynb:179
msgid "\\sin^2( \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + \\pi/4) \\approx \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + 1/2\n\n"
msgstr "\\sin^2( \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + \\pi/4) \\approx \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + 1/2\n\n"

#: ../../tutorials/04_european_put_option_pricing.ipynb:181
msgid "\\ for small :math:`c_\\text{approx}`."
msgstr ""

#: ../../tutorials/04_european_put_option_pricing.ipynb:183
msgid "We can easily construct an operator that acts as"
msgstr "다음과 같이 작동하는 연산자를 쉽게 구성할 수 있다."

#: ../../tutorials/04_european_put_option_pricing.ipynb:185
msgid "\\big|x\\rangle \\big|0\\rangle \\mapsto \\big|x\\rangle \\left( \\cos(a*x+b) \\big|0\\rangle + \\sin(a*x+b) \\big|1\\rangle \\right),\n\n"
msgstr "\\big|x\\rangle \\big|0\\rangle \\mapsto \\big|x\\rangle \\left( \\cos(a*x+b) \\big|0\\rangle + \\sin(a*x+b) \\big|1\\rangle \\right),\n\n"

#: ../../tutorials/04_european_put_option_pricing.ipynb:187
msgid "using controlled Y-rotations."
msgstr ""

#: ../../tutorials/04_european_put_option_pricing.ipynb:189
msgid "Eventually, we are interested in the probability of measuring :math:`\\big|1\\rangle` in the last qubit, which corresponds to :math:`\\sin^2(a*x+b)`. Together with the approximation above, this allows to approximate the values of interest. The smaller we choose :math:`c_\\text{approx}`, the better the approximation. However, since we are then estimating a property scaled by :math:`c_\\text{approx}`, the number of evaluation qubits :math:`m` needs to be adjusted accordingly."
msgstr "결국 우리는 마지막 큐비트에서 :math:`\\big|1\\rangle` 을 측정 할 확률에 관심이 있다. 이는 :math:`\\sin^2(a*x+b)` 에 해당한다. 위의 근사치와 함께이를 통해 관심있는 값을 근사화 할 수 있다. :math:`c_\\text{approx}` 를 작게 선택할수록 근사치가 더 좋다. 그러나 다음으로 :math:`c_\\text{approx}` 에 의해 스케일링 된 속성을 추정하기 때문에 평가 큐비트 수 :math:`m` 을 적절히 조정해야한다."

#: ../../tutorials/04_european_put_option_pricing.ipynb:191
msgid "For more details on the approximation, we refer to: `Quantum Risk Analysis. Woerner, Egger. 2018. <https://arxiv.org/abs/1806.06893>`__"
msgstr "근사화에 대한 더 자세한 내용은 `Quantum Risk Analysis. Woerner, Egger. 2018. <https://arxiv.org/abs/1806.06893>`__ 에서 참조할 수 있다."

#: ../../tutorials/04_european_put_option_pricing.ipynb:309
msgid "Evaluate Expected Payoff"
msgstr ""

#: ../../tutorials/04_european_put_option_pricing.ipynb:388
msgid "Evaluate Delta"
msgstr ""

#: ../../tutorials/04_european_put_option_pricing.ipynb:390
msgid "The Delta is a bit simpler to evaluate than the expected payoff. Similarly to the expected payoff, we use a comparator circuit and an ancilla qubit to identify the cases where :math:`S_T \\leq K`. However, since we are only interested in the (negative) probability of this condition being true, we can directly use this ancilla qubit as the objective qubit in amplitude estimation without any further approximation."
msgstr "델타의 값은 예상 급여보다 약간 더 간단하게 구할 수 있다. 예상 급여와 유사하게, 우리는 :math:`S_T \\leq K` 인 사례들을 식별하기 위해 비교기 회로와 ancilla 큐비트를 사용한다. 하지만 우리는 이 조건이 참인 경우의 (음수) 확률에만 관심이 있기 때문에 진폭 추정에서 추가적인 근사 없이 바로 이 ancilla 큐비트를 목표 큐비트로 사용할 수 있다."

