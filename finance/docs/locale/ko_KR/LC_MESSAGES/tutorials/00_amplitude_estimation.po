msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-19 22:32+0000\n"
"PO-Revision-Date: 2023-02-19 22:55\n"
"Last-Translator: \n"
"Language: ko\n"
"Language-Team: Korean\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/finance/docs/locale/en/LC_MESSAGES/tutorials/00_amplitude_estimation.po\n"
"X-Crowdin-File-ID: 9709\n"

#: ../../tutorials/00_amplitude_estimation.ipynb:9
msgid "This page was generated from `docs/tutorials/00_amplitude_estimation.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/00_amplitude_estimation.ipynb`__ 에서 생성되었다."

#: ../../tutorials/00_amplitude_estimation.ipynb:9
msgid "Quantum Amplitude Estimation"
msgstr "양자 진폭 추정"

#: ../../tutorials/00_amplitude_estimation.ipynb:11
msgid "Given an operator :math:`\\mathcal{A}` that acts as"
msgstr "주어진 연산자 :math:`\\mathcal{A}` 가 다음과 같이 작용할 때"

#: ../../tutorials/00_amplitude_estimation.ipynb:13
msgid "\\mathcal{A}|0\\rangle = \\sqrt{1 - a}|\\Psi_0\\rangle + \\sqrt{a}|\\Psi_1\\rangle"
msgstr "\\mathcal{A}|0\\rangle = \\sqrt{1 - a}|\\Psi_0\\rangle + \\sqrt{a}|\\Psi_1\\rangle"

#: ../../tutorials/00_amplitude_estimation.ipynb:18
msgid "Quantum Amplitude Estimation (QAE) is the task of finding an estimate for the amplitude :math:`a` of the state :math:`|\\Psi_1\\rangle`:"
msgstr "양자 진폭 추정(Quantum Amplitude Estimation, QAE)은 상태 :math:`|\\Psi_1\\rangle` 의 진폭 :math:`a` 의 추정치를 찾는 작업이다:"

#: ../../tutorials/00_amplitude_estimation.ipynb:20
msgid "a = |\\langle\\Psi_1 | \\Psi_1\\rangle|^2."
msgstr "a = |\\langle\\Psi_1 | \\Psi_1\\rangle|^2."

#: ../../tutorials/00_amplitude_estimation.ipynb:25
msgid "This task has first been investigated by Brassard et al. [1] in 2000 and their algorithm uses a combination of the Grover operator"
msgstr "이 작업은 2000년에 Brassard et al. [1] 에 의해 먼저 연구되었으며, 해당 알고리즘은 다음의 Grover 연산자"

#: ../../tutorials/00_amplitude_estimation.ipynb:27
msgid "\\mathcal{Q} = \\mathcal{A}\\mathcal{S}_0\\mathcal{A}^\\dagger\\mathcal{S}_{\\Psi_1}"
msgstr "\\mathcal{Q} = \\mathcal{A}\\mathcal{S}_0\\mathcal{A}^\\dagger\\mathcal{S}_{\\Psi_1}"

#: ../../tutorials/00_amplitude_estimation.ipynb:32
msgid "where :math:`\\mathcal{S}_0` and :math:`\\mathcal{S}_{\\Psi_1}` are reflections about the :math:`|0\\rangle` and :math:`|\\Psi_1\\rangle` states, respectively, and phase estimation. However this algorithm, called ``AmplitudeEstimation`` in Qiskit, requires large circuits and is computationally expensive. Therefore, other variants of QAE have been proposed, which we will showcase in this tutorial for a simple example."
msgstr "(여기서 :math:`\\mathcal{S}_0` 와 :math:`\\mathcal{S}_{\\Psi_1}` 는 각각 :math:`|0\\rangle` 과 :math:`|\\Psi_1\\rangle` 상태의 반사 연산자이다) 와 페이즈 추정의 조합을 사용한다. 그런데 Qiskit에서 ``AmplitudeEstimation`` 로 불리는 이 알고리즘은 큰 회로를 필요로 하고 계산량이 많다. 그러므로 QAE의 다른 변형들이 제안되었고, 이 지침서에서 간단한 예제로 소개할 것이다."

#: ../../tutorials/00_amplitude_estimation.ipynb:34
msgid "In our example, :math:`\\mathcal{A}` describes a Bernoulli random variable with (assumed to be unknown) success probability :math:`p`:"
msgstr "이 예에서는 :math:`\\mathcal{A}` 가 (모르는 상태로 가정된) 성공 확률 :math:`p` 를 갖는 Bernoulli 임의 변수(random variable)을 기술한다:"

#: ../../tutorials/00_amplitude_estimation.ipynb:36
msgid "\\mathcal{A}|0\\rangle = \\sqrt{1 - p}|0\\rangle + \\sqrt{p}|1\\rangle."
msgstr "\\mathcal{A}|0\\rangle = \\sqrt{1 - p}|0\\rangle + \\sqrt{p}|1\\rangle."

#: ../../tutorials/00_amplitude_estimation.ipynb:41
msgid "On a quantum computer, we can model this operator with a rotation around the :math:`Y`-axis of a single qubit"
msgstr "양자 컴퓨터에서는 이 연산자를 단일 큐비트의 :math:`Y`-축을 중심으로 한 회전으로 만들 수 있다."

#: ../../tutorials/00_amplitude_estimation.ipynb:43
msgid "\\mathcal{A} = R_Y(\\theta_p), \\theta_p = 2\\sin^{-1}(\\sqrt{p})."
msgstr "\\mathcal{A} = R_Y(\\theta_p), \\theta_p = 2\\sin^{-1}(\\sqrt{p})."

#: ../../tutorials/00_amplitude_estimation.ipynb:48
msgid "The Grover operator for this case is particularly simple"
msgstr "이 경우에서 Grover 연산자는 특히 간단하다"

#: ../../tutorials/00_amplitude_estimation.ipynb:50
msgid "\\mathcal{Q} = R_Y(2\\theta_p),"
msgstr "\\mathcal{Q} = R_Y(2\\theta_p),"

#: ../../tutorials/00_amplitude_estimation.ipynb:55
msgid "whose powers are very easy to calculate: :math:`\\mathcal{Q}^k = R_Y(2k\\theta_p)`."
msgstr "제곱도 매우 간단하게 계산할 수 있다: :math:`\\mathcal{Q}^k = R_Y(2k\\theta_p)`."

#: ../../tutorials/00_amplitude_estimation.ipynb:66
msgid "We’ll fix the probability we want to estimate to :math:`p = 0.2`."
msgstr "추정할 확률로써 :math:`p = 0.2` 를 고정시킬 것이다."

#: ../../tutorials/00_amplitude_estimation.ipynb:87
msgid "Now we can define circuits for :math:`\\mathcal{A}` and :math:`\\mathcal{Q}`."
msgstr "이제 :math:`\\mathcal{A}` 와 :math:`\\mathcal{Q}` 의 회로를 정의할 수 있다."

#: ../../tutorials/00_amplitude_estimation.ipynb:147
msgid "Qiskit’s Amplitude Estimation workflow"
msgstr "Qiskit의 진폭 추정 워크플로우"

#: ../../tutorials/00_amplitude_estimation.ipynb:158
msgid "Qiskit implements several QAE algorithms that all derive from the ``AmplitudeEstimator`` interface. In the initializer we specify algorithm specific settings and the ``estimate`` method, which does all the work, takes an ``EstimationProblem`` as input and returns an ``AmplitudeEstimationResult`` object. Since all QAE variants follow the same interface, we can use them all to solve the same problem instance."
msgstr "Qiskit은 ``AmplitudeEstimator`` 인터페이스에서 파생되는 여러 QAE 알고리즘들을 구현한다. 초기설정자에서는 알고리즘의 특정 설정을 지정하고, 작업을 전부 수행하는 ``estimate`` 메서드는 ``EstimationProblem`` 을 입력 받아 ``AmplitudeEstimationResult`` 객체를 반환한다. 모든 QAE의 변형들은 같은 인터페이스를 따르기 때문에 같은 문제 인스턴스를 풀 때 모두 사용할 수 있다."

#: ../../tutorials/00_amplitude_estimation.ipynb:160
msgid "Next, we’ll run all different QAE algorithms. To do so, we first define the estimation problem which will contain the :math:`\\mathcal{A}` and :math:`\\mathcal{Q}` operators as well as how to identify the :math:`|\\Psi_1\\rangle` state, which in this simple example is just :math:`|1\\rangle`."
msgstr "다음으로 모든 QAE 알고리즘들을 실행할 것이다. 그러려면 먼저 (간단한 예제로서 :math:`|1\\rangle` 인) :math:`|\\Psi_1\\rangle` 상태를 식별하는 방법뿐만 아니라 :math:`\\mathcal{A}` 와 :math:`\\mathcal{Q}` 연산자들을 포함할 추정 문제(estimation problem)을 정의한다."

#: ../../tutorials/00_amplitude_estimation.ipynb:187
msgid "To execute circuits we’ll use ``Sampler``."
msgstr ""

#: ../../tutorials/00_amplitude_estimation.ipynb:211
msgid "Canonical AE"
msgstr "정준 AE (Canonical AE)"

#: ../../tutorials/00_amplitude_estimation.ipynb:213
msgid "Now let’s solve this with the original QAE implementation by Brassard et al. [1]."
msgstr "이제 Brassard et al. [1] 에서 구현된 원래 QAE 구현으로 풀어보자."

#: ../../tutorials/00_amplitude_estimation.ipynb:239
msgid "With the algorithm defined, we can call the ``estimate`` method and provide it with the problem to solve."
msgstr "정의된 알고리즘에서는 ``estimate`` 메서드를 호출하고 문제를 제공하여 풀 수 있다."

#: ../../tutorials/00_amplitude_estimation.ipynb:260
msgid "The estimate is available in the ``estimation`` key:"
msgstr "추정치는 ``estimation`` 키를 통해 얻을 수 있다."

#: ../../tutorials/00_amplitude_estimation.ipynb:305
msgid "We see that this is not a very good estimate for our target of :math:`p=0.2`! That’s due to the fact the canonical AE is restricted to a discrete grid, specified by the number of evaluation qubits:"
msgstr "목표였던 :math:`p=0.2` 에 대해 별로 좋은 추정이 아니라는 것을 보았다! 그것은 정준 AE가 계산하는 큐비트 개수로 지정된 이산 그리드에 제한되기 때문이다:"

#: ../../tutorials/00_amplitude_estimation.ipynb:349
msgid "To improve the estimate we can interpolate the measurement probabilities and compute the maximum likelihood estimator that produces this probability distribution:"
msgstr "추정치를 개선하고자 측정 확률을 보간(interpolate) 하고 확률 분포를 생성하는 최우 추정치(maximum likelihood estimator)를 계산한다."

#: ../../tutorials/00_amplitude_estimation.ipynb:394
msgid "We can have a look at the circuit that AE executes:"
msgstr "AE가 실행하는 회로를 살펴볼 수 있다:"

#: ../../tutorials/00_amplitude_estimation.ipynb:451
msgid "Iterative Amplitude Estimation"
msgstr "반복 진폭 추정 (Iterative Amplitude Estimation)"

#: ../../tutorials/00_amplitude_estimation.ipynb:453
msgid "See [2]."
msgstr "[2] 를 보라."

#: ../../tutorials/00_amplitude_estimation.ipynb:507
msgid "The circuits here only consist of Grover powers and are much cheaper!"
msgstr "이 회로는 오직 Grover 지수로만 구성되고 훨씬 단순하다!"

#: ../../tutorials/00_amplitude_estimation.ipynb:539
msgid "Maximum Likelihood Amplitude Estimation"
msgstr "최우 진폭 추정 (Maximum Likelihood Amplitude Estimation)"

#: ../../tutorials/00_amplitude_estimation.ipynb:541
msgid "See [3]."
msgstr "[3] 을 보라."

#: ../../tutorials/00_amplitude_estimation.ipynb:595
msgid "Faster Amplitude Estimation"
msgstr "빠른 진폭 추정 (Faster Amplitude Estimation)"

#: ../../tutorials/00_amplitude_estimation.ipynb:597
msgid "See [4]."
msgstr "[4] 를 보라."

#: ../../tutorials/00_amplitude_estimation.ipynb:681
msgid "References"
msgstr "참고문헌"

#: ../../tutorials/00_amplitude_estimation.ipynb:683
msgid "[1] Quantum Amplitude Amplification and Estimation. Brassard et al (2000). https://arxiv.org/abs/quant-ph/0005055"
msgstr "[1] Quantum Amplitude Amplification and Estimation. Brassard et al (2000). https://arxiv.org/abs/quant-ph/0005055"

#: ../../tutorials/00_amplitude_estimation.ipynb:685
msgid "[2] Iterative Quantum Amplitude Estimation. Grinko, D., Gacon, J., Zoufal, C., & Woerner, S. (2019). https://arxiv.org/abs/1912.05559"
msgstr "[2] Iterative Quantum Amplitude Estimation. Grinko, D., Gacon, J., Zoufal, C., & Woerner, S. (2019). https://arxiv.org/abs/1912.05559"

#: ../../tutorials/00_amplitude_estimation.ipynb:687
msgid "[3] Amplitude Estimation without Phase Estimation. Suzuki, Y., Uno, S., Raymond, R., Tanaka, T., Onodera, T., & Yamamoto, N. (2019). https://arxiv.org/abs/1904.10246"
msgstr "[3] Amplitude Estimation without Phase Estimation. Suzuki, Y., Uno, S., Raymond, R., Tanaka, T., Onodera, T., & Yamamoto, N. (2019). https://arxiv.org/abs/1904.10246"

#: ../../tutorials/00_amplitude_estimation.ipynb:689
msgid "[4] Faster Amplitude Estimation. K. Nakaji (2020). https://arxiv.org/pdf/2003.02417.pdf"
msgstr "[4] Faster Amplitude Estimation. K. Nakaji (2020). https://arxiv.org/pdf/2003.02417.pdf"

