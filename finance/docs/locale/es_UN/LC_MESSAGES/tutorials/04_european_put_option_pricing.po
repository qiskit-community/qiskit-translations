msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-13 14:26+0000\n"
"PO-Revision-Date: 2021-07-13 15:52\n"
"Last-Translator: \n"
"Language-Team: Spanish (United)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /master/finance/docs/locale/en/LC_MESSAGES/tutorials/04_european_put_option_pricing.po\n"
"X-Crowdin-File-ID: 9690\n"
"Language: es_UN\n"

#: ../../tutorials/04_european_put_option_pricing.ipynb:13
msgid "Run interactively in jupyter notebook."
msgstr "Ejecutar de forma interactiva en jupyter notebook."

#: ../../tutorials/04_european_put_option_pricing.ipynb:9
msgid "Pricing European Put Options"
msgstr ""

#: ../../tutorials/04_european_put_option_pricing.ipynb:21
msgid "Introduction"
msgstr "Introducción"

#: ../../tutorials/04_european_put_option_pricing.ipynb:23
msgid "Suppose a European put option with strike price :math:`K` and an underlying asset whose spot price at maturity :math:`S_T` follows a given random distribution. The corresponding payoff function is defined as:"
msgstr "Supón una opción de venta europea con precio de ejercicio :math:`K` y un activo subyacente cuyo precio de contado al vencimiento :math:`S_T` sigue una distribución aleatoria dada. La función de pago correspondiente se define como:"

#: ../../tutorials/04_european_put_option_pricing.ipynb:25
msgid "\\max\\{K - S_T, 0\\}\n\n"
msgstr "\\max\\{K - S_T, 0\\}\n\n"

#: ../../tutorials/04_european_put_option_pricing.ipynb:27
msgid "In the following, a quantum algorithm based on amplitude estimation is used to estimate the expected payoff, i.e., the fair price before discounting, for the option:"
msgstr "A continuación, se utiliza un algoritmo cuántico basado en la estimación de amplitud para estimar el rendimiento esperado, es decir, el precio justo antes del descuento, para la opción:"

#: ../../tutorials/04_european_put_option_pricing.ipynb:29
msgid "\\mathbb{E}\\left[ \\max\\{K - S_T, 0\\} \\right]\n\n"
msgstr "\\mathbb{E}\\left[ \\max\\{K - S_T, 0\\} \\right]\n\n"

#: ../../tutorials/04_european_put_option_pricing.ipynb:31
msgid "as well as the corresponding :math:`\\Delta`, i.e., the derivative of the option price with respect to the spot price, defined as:"
msgstr "así como la correspondiente :math:`\\Delta`, es decir, el derivado del precio de la opción con respecto al precio al contado, definido como:"

#: ../../tutorials/04_european_put_option_pricing.ipynb:33
msgid "\\Delta = -\\mathbb{P}\\left[S_T \\leq K\\right]"
msgstr "\\Delta = -\\mathbb{P}\\left[S_T \\leq K\\right]"

#: ../../tutorials/04_european_put_option_pricing.ipynb:38
msgid "The approximation of the objective function and a general introduction to option pricing and risk analysis on quantum computers are given in the following papers:"
msgstr "La aproximación de la función objetivo y una introducción general a la fijación de precios de opciones y el análisis de riesgos en computadoras cuánticas se dan en los siguientes artículos:"

#: ../../tutorials/04_european_put_option_pricing.ipynb:40
msgid "`Quantum Risk Analysis. Woerner, Egger. 2018. <https://arxiv.org/abs/1806.06893>`__"
msgstr ""

#: ../../tutorials/04_european_put_option_pricing.ipynb:41
msgid "`Option Pricing using Quantum Computers. Stamatopoulos et al. 2019. <https://arxiv.org/abs/1905.02666>`__"
msgstr ""

#: ../../tutorials/04_european_put_option_pricing.ipynb:82
msgid "Uncertainty Model"
msgstr "Modelo de Incertidumbre"

#: ../../tutorials/04_european_put_option_pricing.ipynb:84
msgid "We construct a circuit factory to load a log-normal random distribution into a quantum state. The distribution is truncated to a given interval :math:`[\\text{low}, \\text{high}]` and discretized using :math:`2^n` grid points, where :math:`n` denotes the number of qubits used. The unitary operator corresponding to the circuit factory implements the following:"
msgstr ""

#: ../../tutorials/04_european_put_option_pricing.ipynb:86
msgid "\\big|0\\rangle_{n} \\mapsto \\big|\\psi\\rangle_{n} = \\sum_{i=0}^{2^n-1} \\sqrt{p_i}\\big|i\\rangle_{n},\n\n"
msgstr "\\big|0\\rangle_{n} \\mapsto \\big|\\psi\\rangle_{n} = \\sum_{i=0}^{2^n-1} \\sqrt{p_i}\\big|i\\rangle_{n},\n\n"

#: ../../tutorials/04_european_put_option_pricing.ipynb:88
msgid "where :math:`p_i` denote the probabilities corresponding to the truncated and discretized distribution and where :math:`i` is mapped to the right interval using the affine map:"
msgstr "donde :math:`p_i` denota las probabilidades correspondientes a la distribución truncada y discretizada y donde :math:`i` se asigna al intervalo correcto usando el mapa afín:"

#: ../../tutorials/04_european_put_option_pricing.ipynb:90
msgid "\\{0, \\ldots, 2^n-1\\} \\ni i \\mapsto \\frac{\\text{high} - \\text{low}}{2^n - 1} * i + \\text{low} \\in [\\text{low}, \\text{high}].\n\n"
msgstr "\\{0, \\ldots, 2^n-1\\} \\ni i \\mapsto \\frac{\\text{high} - \\text{low}}{2^n - 1} * i + \\text{low} \\in [\\text{low}, \\text{high}].\n\n"

#: ../../tutorials/04_european_put_option_pricing.ipynb:170
msgid "Payoff Function"
msgstr "Función de Rendimiento"

#: ../../tutorials/04_european_put_option_pricing.ipynb:172
msgid "The payoff function decreases linearly with an increasing spot price at maturity :math:`S_T` until it reaches zero for a spot price equal to the strike price :math:`K`, it stays constant to zero for larger spot prices. The implementation uses a comparator, that flips an ancilla qubit from :math:`\\big|0\\rangle` to :math:`\\big|1\\rangle` if :math:`S_T \\leq K`, and this ancilla is used to control the linear part of the payoff function."
msgstr "La función de rendimiento disminuye linealmente con un precio de contado creciente al vencimiento :math:`S_T` hasta que llega a cero para un precio de contado igual al precio de ejercicio :math:`K`, permanece constante a cero para precios de contado más altos. La implementación usa un comparador, que cambia un qubit ancilla de :math:`\\big|0\\rangle` a :math:`\\big|1\\rangle` si :math:`S_T \\leq K`, y esta ancilla es se utiliza para controlar la parte lineal de la función de pago."

#: ../../tutorials/04_european_put_option_pricing.ipynb:174
msgid "The linear part itself is then approximated as follows. We exploit the fact that :math:`\\sin^2(y + \\pi/4) \\approx y + 1/2` for small :math:`|y|`. Thus, for a given approximation rescaling scaling factor :math:`c_\\text{approx} \\in [0, 1]` and :math:`x \\in [0, 1]` we consider"
msgstr "La parte lineal en sí se aproxima entonces de la siguiente manera. Aprovechamos el hecho de que :math:`\\sin^2(y + \\pi/4) \\approx y + 1/2` para pequeños valores de :math:`|y|`. Por lo tanto, para un factor de escalamiento de aproximación dado :math:`c_\\text{approx} \\in [0, 1]` y :math:`x \\in [0, 1]` consideramos"

#: ../../tutorials/04_european_put_option_pricing.ipynb:176
msgid "\\sin^2( \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + \\pi/4) \\approx \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + 1/2\n\n"
msgstr "\\sin^2( \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + \\pi/4) \\approx \\pi/2 * c_\\text{approx} * ( x - 1/2 ) + 1/2\n\n"

#: ../../tutorials/04_european_put_option_pricing.ipynb:178
msgid "\\ for small :math:`c_\\text{approx}`."
msgstr "\\ para pequeños :math:`c_\\text{approx}`."

#: ../../tutorials/04_european_put_option_pricing.ipynb:180
msgid "We can easily construct an operator that acts as"
msgstr "Podemos construir fácilmente un operador que actúe como"

#: ../../tutorials/04_european_put_option_pricing.ipynb:182
msgid "\\big|x\\rangle \\big|0\\rangle \\mapsto \\big|x\\rangle \\left( \\cos(a*x+b) \\big|0\\rangle + \\sin(a*x+b) \\big|1\\rangle \\right),\n\n"
msgstr "\\big|x\\rangle \\big|0\\rangle \\mapsto \\big|x\\rangle \\left( \\cos(a*x+b) \\big|0\\rangle + \\sin(a*x+b) \\big|1\\rangle \\right),\n\n"

#: ../../tutorials/04_european_put_option_pricing.ipynb:184
msgid "using controlled Y-rotations."
msgstr "utilizando rotaciones Y controladas."

#: ../../tutorials/04_european_put_option_pricing.ipynb:186
msgid "Eventually, we are interested in the probability of measuring :math:`\\big|1\\rangle` in the last qubit, which corresponds to :math:`\\sin^2(a*x+b)`. Together with the approximation above, this allows to approximate the values of interest. The smaller we choose :math:`c_\\text{approx}`, the better the approximation. However, since we are then estimating a property scaled by :math:`c_\\text{approx}`, the number of evaluation qubits :math:`m` needs to be adjusted accordingly."
msgstr "Finalmente, nos interesa la probabilidad de medir :math:`\\big|1\\rangle` en el último qubit, que corresponde a :math:`\\sin^2(a*x+b)`. Junto con la aproximación anterior, esto permite aproximar los valores de interés. Cuanto más pequeño elijamos :math:`c_\\text{approx}`, mejor será la aproximación. Sin embargo, dado que estamos estimando una propiedad escalada por :math:`c_\\text{approx}`, el número de qubits de evaluación :math:`m` debe ajustarse en consecuencia."

#: ../../tutorials/04_european_put_option_pricing.ipynb:188
msgid "For more details on the approximation, we refer to: `Quantum Risk Analysis. Woerner, Egger. 2018. <https://arxiv.org/abs/1806.06893>`__"
msgstr ""

#: ../../tutorials/04_european_put_option_pricing.ipynb:306
msgid "Evaluate Expected Payoff"
msgstr "Evaluar el Rendimiento Esperado"

#: ../../tutorials/04_european_put_option_pricing.ipynb:383
msgid "Evaluate Delta"
msgstr "Evaluar Delta"

#: ../../tutorials/04_european_put_option_pricing.ipynb:385
msgid "The Delta is a bit simpler to evaluate than the expected payoff. Similarly to the expected payoff, we use a comparator circuit and an ancilla qubit to identify the cases where :math:`S_T \\leq K`. However, since we are only interested in the (negative) probability of this condition being true, we can directly use this ancilla qubit as the objective qubit in amplitude estimation without any further approximation."
msgstr "La Delta es un poco más simple de evaluar que el rendimiento esperado. De manera similar al rendimiento esperado, usamos un circuito comparador y un qubit ancilla para identificar los casos donde :math:`S_T \\leq K`. Sin embargo, dado que solo nos interesa la probabilidad (negativa) de que esta condición sea cierta, podemos usar directamente este qubit ancilla como el qubit objetivo en la estimación de amplitud sin ninguna aproximación adicional."

