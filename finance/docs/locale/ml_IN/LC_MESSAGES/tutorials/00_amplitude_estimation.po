msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-10 23:26+0000\n"
"PO-Revision-Date: 2022-11-11 00:06\n"
"Last-Translator: \n"
"Language-Team: Malayalam\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ml-IN\n"
"X-Crowdin-File: /master/finance/docs/locale/en/LC_MESSAGES/tutorials/00_amplitude_estimation.po\n"
"X-Crowdin-File-ID: 9709\n"
"Language: ml_IN\n"

#: ../../tutorials/00_amplitude_estimation.ipynb:9
msgid "This page was generated from `docs/tutorials/00_amplitude_estimation.ipynb`__."
msgstr "ഈ പേജ് എടുത്തത് `docs/tutorials/00_amplitude_estimation.ipynb`__.-ഇൽ നിന്നാണ്."

#: ../../tutorials/00_amplitude_estimation.ipynb:9
msgid "Quantum Amplitude Estimation"
msgstr "ക്വാണ്ടം ആംപ്ലിറ്റ്ഡ് എസ്റ്റിമേഷൻ"

#: ../../tutorials/00_amplitude_estimation.ipynb:11
msgid "Given an operator :math:`\\mathcal{A}` that acts as"
msgstr ":math:`\\mathcal{A}` എന്ന​ ഓപ്പറേറ്റർ"

#: ../../tutorials/00_amplitude_estimation.ipynb:13
msgid "\\mathcal{A}|0\\rangle = \\sqrt{1 - a}|\\Psi_0\\rangle + \\sqrt{a}|\\Psi_1\\rangle"
msgstr "\\mathcal{A}|0\\rangle = \\sqrt{1 - a}|\\Psi_0\\rangle + \\sqrt{a}|\\Psi_1\\rangle"

#: ../../tutorials/00_amplitude_estimation.ipynb:18
msgid "Quantum Amplitude Estimation (QAE) is the task of finding an estimate for the amplitude :math:`a` of the state :math:`|\\Psi_1\\rangle`:"
msgstr "മുകളിലുള്ള ഇക്വഷനിലെ :math:`a`-യുടെ വ്യാപ്തി (മൂല്യം) കണ്ടെത്തുന്നതിനെ ആണ് ക്വാണ്ടം ആംപ്ലിറ്റ്ഡ് എസ്റ്റിമേഷൻ(QAE) എന്ന് വിളിക്കുന്നത്:"

#: ../../tutorials/00_amplitude_estimation.ipynb:20
msgid "a = |\\langle\\Psi_1 | \\Psi_1\\rangle|^2."
msgstr "a = |\\langle\\Psi_1 | \\Psi_1\\rangle|^2."

#: ../../tutorials/00_amplitude_estimation.ipynb:25
msgid "This task has first been investigated by Brassard et al. [1] in 2000 and their algorithm uses a combination of the Grover operator"
msgstr "ഈ മേഘലയിൽ ആദ്യമായി പരീക്ഷണങ്ങൾ നടത്തിയത് ബ്രസ്സാർഡും കൂട്ടാളികളും ആണ് [1]. 2000-ത്തിൽ പുറത്തുവന്ന ഈ അൽഗോരിതം ഗ്രോവർ ഓപ്പറേറ്ററിനെ അടിസ്ഥാനമാക്കിയുള്ളതാണ്"

#: ../../tutorials/00_amplitude_estimation.ipynb:27
msgid "\\mathcal{Q} = \\mathcal{A}\\mathcal{S}_0\\mathcal{A}^\\dagger\\mathcal{S}_{\\Psi_1}"
msgstr "\\mathcal{Q} = \\mathcal{A}\\mathcal{S}_0\\mathcal{A}^\\dagger\\mathcal{S}_{\\Psi_1}"

#: ../../tutorials/00_amplitude_estimation.ipynb:32
msgid "where :math:`\\mathcal{S}_0` and :math:`\\mathcal{S}_{\\Psi_1}` are reflections about the :math:`|0\\rangle` and :math:`|\\Psi_1\\rangle` states, respectively, and phase estimation. However this algorithm, called ``AmplitudeEstimation`` in Qiskit, requires large circuits and is computationally expensive. Therefore, other variants of QAE have been proposed, which we will showcase in this tutorial for a simple example."
msgstr "ഇവിടെ :math:`\\mathcal{S}_0 എന്നത് :math:`|0\\rangle`-ന്റെയും :math:`\\mathcal{S}_{\\Psi_1}` എന്നത് :math:`|\\Psi_1\\rangle` -ന്റെയും സ്റ്റേറ്റ് റെപ്രസെന്ടേഷൻ ആണ്. ``AmplitudeEstimation`` എന്ന ഈ അലോഗരിതം പ്രായോഗികമാക്കുന്നത്ത് കഠിനവും ചെലവേറിയതുമാണ്. അതിന്നാൽ, QAE - ക്ക് (ക്വാണ്ടം ആംപ്ലിറ്റ്ഡ് എസ്റ്റിമേഷൻ) വകഭേദങ്ങൾ ഉണ്ട്.ഇവയിൽ ചിലത് ഉദാഹരണം സഹിതം താഴെ കൊടുത്തിരിക്കുന്നു."

#: ../../tutorials/00_amplitude_estimation.ipynb:34
msgid "In our example, :math:`\\mathcal{A}` describes a Bernoulli random variable with (assumed to be unknown) success probability :math:`p`:"
msgstr "താഴെ കൊടുത്തിരിക്കുന്ന ഉദാഹരണത്തിൽ :math:`p`: എന്ന പ്രോബബിലിറ്റിയുള്ള​ ഒരു ബെർണൗലി റാൻഡം വേരിയബിളിനെക്കുറിച്ച് ( :math:`\\mathcal{A}`) കുറിച്ച വിവരിക്കുന്നു:"

#: ../../tutorials/00_amplitude_estimation.ipynb:36
msgid "\\mathcal{A}|0\\rangle = \\sqrt{1 - p}|0\\rangle + \\sqrt{p}|1\\rangle."
msgstr "\\mathcal{A}|0\\rangle = \\sqrt{1 - p}|0\\rangle + \\sqrt{p}|1\\rangle."

#: ../../tutorials/00_amplitude_estimation.ipynb:41
msgid "On a quantum computer, we can model this operator with a rotation around the :math:`Y`-axis of a single qubit"
msgstr ""

#: ../../tutorials/00_amplitude_estimation.ipynb:43
msgid "\\mathcal{A} = R_Y(\\theta_p), \\theta_p = 2\\sin^{-1}(\\sqrt{p})."
msgstr "\\mathcal{A} = R_Y(\\theta_p), \\theta_p = 2\\sin^{-1}(\\sqrt{p})."

#: ../../tutorials/00_amplitude_estimation.ipynb:48
msgid "The Grover operator for this case is particularly simple"
msgstr "ഈ ഉദാഹരണത്തിന്റെ ഗ്രോവർ ഓപ്പറേറ്റർ വളരെ ലളിതമാണ്"

#: ../../tutorials/00_amplitude_estimation.ipynb:50
msgid "\\mathcal{Q} = R_Y(2\\theta_p),"
msgstr "\\mathcal{Q} = R_Y(2\\theta_p),"

#: ../../tutorials/00_amplitude_estimation.ipynb:55
msgid "whose powers are very easy to calculate: :math:`\\mathcal{Q}^k = R_Y(2k\\theta_p)`."
msgstr "\\mathcal{Q} ന്റെ ഘാതങൾ വളരെ അനായാസം കണ്ടെത്താം: :math:`\\mathcal{Q}^k = R_Y(2k\\theta_p)`."

#: ../../tutorials/00_amplitude_estimation.ipynb:66
msgid "We’ll fix the probability we want to estimate to :math:`p = 0.2`."
msgstr ""

#: ../../tutorials/00_amplitude_estimation.ipynb:87
msgid "Now we can define circuits for :math:`\\mathcal{A}` and :math:`\\mathcal{Q}`."
msgstr ""

#: ../../tutorials/00_amplitude_estimation.ipynb:147
msgid "Qiskit’s Amplitude Estimation workflow"
msgstr "ക്വിസ്കിറ്റിന്റെ ആംപ്ലിറ്റ്ഡ് എസ്റ്റിമേഷൻ വർക്ക്ഫ്ലോ"

#: ../../tutorials/00_amplitude_estimation.ipynb:158
msgid "Qiskit implements several QAE algorithms that all derive from the ``AmplitudeEstimator`` interface. In the initializer we specify algorithm specific settings and the ``estimate`` method, which does all the work, takes an ``EstimationProblem`` as input and returns an ``AmplitudeEstimationResult`` object. Since all QAE variants follow the same interface, we can use them all to solve the same problem instance."
msgstr ""

#: ../../tutorials/00_amplitude_estimation.ipynb:160
msgid "Next, we’ll run all different QAE algorithms. To do so, we first define the estimation problem which will contain the :math:`\\mathcal{A}` and :math:`\\mathcal{Q}` operators as well as how to identify the :math:`|\\Psi_1\\rangle` state, which in this simple example is just :math:`|1\\rangle`."
msgstr ""

#: ../../tutorials/00_amplitude_estimation.ipynb:187
msgid "To execute circuits we’ll use Qiskit’s statevector simulator."
msgstr "ഈ സർക്യൂട്ട് ക്വിസ്കിറ്റ് സ്റ്റേറ്റ് വെക്ടർ സിമുലേറ്റർ ഉപയോഗിച്ച് റൺ ചെയാം."

#: ../../tutorials/00_amplitude_estimation.ipynb:213
msgid "Canonical AE"
msgstr "കാനോനിക്കൽ എഇ"

#: ../../tutorials/00_amplitude_estimation.ipynb:215
msgid "Now let’s solve this with the original QAE implementation by Brassard et al. [1]."
msgstr "അടുത്തതയി, ബ്രസ്സാർഡിന്റെ [1] QAE ഇംപ്ലിമെന്റേഷൻ ഉപയോഗിച്ച് സോൾവ് ചെയാം."

#: ../../tutorials/00_amplitude_estimation.ipynb:241
msgid "With the algorithm defined, we can call the ``estimate`` method and provide it with the problem to solve."
msgstr ""

#: ../../tutorials/00_amplitude_estimation.ipynb:262
msgid "The estimate is available in the ``estimation`` key:"
msgstr "കണക്കാക്കിയ എസ്റ്റിമേറ്റ് ``estimation`` എന്ന​ വേരിയബിളിൽ ലഭ്യമാണ്:"

#: ../../tutorials/00_amplitude_estimation.ipynb:307
msgid "We see that this is not a very good estimate for our target of :math:`p=0.2`! That’s due to the fact the canonical AE is restricted to a discrete grid, specified by the number of evaluation qubits:"
msgstr ""

#: ../../tutorials/00_amplitude_estimation.ipynb:351
msgid "To improve the estimate we can interpolate the measurement probabilities and compute the maximum likelihood estimator that produces this probability distribution:"
msgstr ""

#: ../../tutorials/00_amplitude_estimation.ipynb:396
msgid "We can have a look at the circuit that AE executes:"
msgstr "AE ഉപയോഗിക്കുന്ന​ സർക്യൂട്ട് നമുക്ക് നോക്കാം:"

#: ../../tutorials/00_amplitude_estimation.ipynb:453
msgid "Iterative Amplitude Estimation"
msgstr "Iterative ആംപ്ലിറ്റ്ഡ് എസ്റ്റിമേഷൻ"

#: ../../tutorials/00_amplitude_estimation.ipynb:455
msgid "See [2]."
msgstr "കൂടുതൽ വിവരങ്ങൾക്ക് [2] നോക്കൂക​."

#: ../../tutorials/00_amplitude_estimation.ipynb:509
msgid "The circuits here only consist of Grover powers and are much cheaper!"
msgstr "ഇവിടെയുള്ള സർക്യൂട്ടുകളിൽ ഗ്രോവർ പവ​ർ ഓപ്പറേറ്ററുക​ൾ മാത്രമേയുള്ളൂ. അതിനാൽ അവ വളരെ ലളിതവും ചെലവ് കുറഞതും ആണ്!"

#: ../../tutorials/00_amplitude_estimation.ipynb:541
msgid "Maximum Likelihood Amplitude Estimation"
msgstr ""

#: ../../tutorials/00_amplitude_estimation.ipynb:543
msgid "See [3]."
msgstr "കൂടുതൽ വിവരങ്ങൾക്ക് [3] നോക്കൂക​."

#: ../../tutorials/00_amplitude_estimation.ipynb:596
msgid "Faster Amplitude Estimation"
msgstr "ഫാസ്റ്റർ ആംപ്ലിറ്റ്ഡ് എസ്റ്റിമേഷൻ"

#: ../../tutorials/00_amplitude_estimation.ipynb:598
msgid "See [4]."
msgstr "കൂടുതൽ വിവരങ്ങൾക്ക് [4] നോക്കൂക​."

#: ../../tutorials/00_amplitude_estimation.ipynb:682
msgid "References"
msgstr "റഫറൻസുകൾ"

#: ../../tutorials/00_amplitude_estimation.ipynb:684
msgid "[1] Quantum Amplitude Amplification and Estimation. Brassard et al (2000). https://arxiv.org/abs/quant-ph/0005055"
msgstr "[1] Quantum Amplitude Amplification and Estimation. Brassard et al (2000). https://arxiv.org/abs/quant-ph/0005055"

#: ../../tutorials/00_amplitude_estimation.ipynb:686
msgid "[2] Iterative Quantum Amplitude Estimation. Grinko, D., Gacon, J., Zoufal, C., & Woerner, S. (2019). https://arxiv.org/abs/1912.05559"
msgstr "[2] Iterative Quantum Amplitude Estimation. Grinko, D., Gacon, J., Zoufal, C., & Woerner, S. (2019). https://arxiv.org/abs/1912.05559"

#: ../../tutorials/00_amplitude_estimation.ipynb:688
msgid "[3] Amplitude Estimation without Phase Estimation. Suzuki, Y., Uno, S., Raymond, R., Tanaka, T., Onodera, T., & Yamamoto, N. (2019). https://arxiv.org/abs/1904.10246"
msgstr "[3] Amplitude Estimation without Phase Estimation. Suzuki, Y., Uno, S., Raymond, R., Tanaka, T., Onodera, T., & Yamamoto, N. (2019). https://arxiv.org/abs/1904.10246"

#: ../../tutorials/00_amplitude_estimation.ipynb:690
msgid "[4] Faster Amplitude Estimation. K. Nakaji (2020). https://arxiv.org/pdf/2003.02417.pdf"
msgstr "[4] Faster Amplitude Estimation. K. Nakaji (2020). https://arxiv.org/pdf/2003.02417.pdf"

