msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-09 04:52+0000\n"
"PO-Revision-Date: 2022-11-09 05:31\n"
"Last-Translator: \n"
"Language-Team: Malayalam\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ml-IN\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/qpe_with_sampler.po\n"
"X-Crowdin-File-ID: 9844\n"
"Language: ml_IN\n"

#: ../../tutorials/qpe_with_sampler.ipynb:9
msgid "This page was generated from `docs/tutorials/qpe_with_sampler.ipynb`__."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:9
msgid "Quantum phase estimation using the Sampler primitive"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:11
msgid "The quantum phase estimation (QPE) algorithm is an important subroutine in quantum computation. It serves as a central building block of many quantum algorithms including the Shor’s factoring algorithm and the quantum algorithm for linear systems of equations (HHL algorithm). In this tutorial, you will build a parameterized version of QPE circuit and run it using the Sampler primitive, which makes running parameterized circuits very easy."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:23
msgid "Before you begin"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:25
msgid "This tutorial requires a Qiskit Runtime service instance. If you haven’t done so already, follow the instructions in the Qiskit `Getting started guide <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ to set one up."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:37
msgid "Background information"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:49
msgid "Quantum phase estimation algorithm"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:51
msgid "The QPE algorithm [1][2] estimates the value of theta, where a unitary operator :math:`U` has an eigenvector :math:`|\\psi \\rangle` with eigenvalue :math:`e^{2\\pi i \\theta}`. To find the estimation, we assume we have black boxes (sometimes called *oracles*), that can prepare the state :math:`|\\psi \\rangle` and run a controlled-\\ :math:`U^{2^j}` operation."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:53
msgid "Because it relies on black boxes, the QPE algorithm is not actually a complete algorithm, but can be thought of as a subroutine. It can work with other subroutines to perform other computations, such as Shor’s factoring algorithm and the HHL algorithm."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:55
msgid "We are not going to explain the details of the QPE algorithm here. If you want to learn more, you can read the chapter about the QPE algorithm in `the Qiskit textbook <https://learn.qiskit.org/course/ch-algorithms/quantum-phase-estimation>`__ [3]."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:67
msgid "Overview"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:69
msgid "As explained above, there are black boxes in the QPE algorithm to prepare the state :math:`|\\psi \\rangle` and perform the controlled-\\ :math:`U^{2^j}` operation. In this tutorial, you will prepare a series of QPE circuits containing different black boxes corresponding to different phases. You will then run these circuits using the `Sampler primitive <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.Sampler.html>`__ and analyze the results. As you will see, the Sampler primitive makes running parameterized circuits very easy. Instead of creating a series of QPE circuits, you only need to create *one* QPE circuit with a parameter specifying the phase the black boxes generate and a series of phase values for the parameter."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:76
msgid "Note"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:78
msgid "In a typical usage of the QPE algorithm, such as the Shor’s factoring algorithm, the black boxes are not configured by the user but instead are specified by other subroutines. However, the purpose of this tutorial is to use the QPE algorithm to illustrate the ease of running parameterized circuits by using the Sampler primitive."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:94
msgid "Step 1: Create QPE circuits"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:106
msgid "Create a parameterized QPE circuit"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:108
msgid "The procedure of the QPE algorithm is as follows:"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:110
msgid "Create a circuit with two quantum registers (the first for estimating the phase and the second for storing the eigenvector :math:`|\\psi\\rangle`) and one classical register for readout."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:111
msgid "Initialize the qubits in the first register as :math:`|0\\rangle` and the second register as :math:`|\\psi\\rangle`."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:112
msgid "Create a superposition in the first register."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:113
msgid "Apply the controlled-\\ :math:`U^{2^j}` black box."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:114
msgid "Apply an inverse quantum Fourier transform (QFT) to the first register."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:115
msgid "Measure the first register."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:117
msgid "The following code creates a function ``create_qpe_circuit`` for creating a QPE circuit given the keyword arguments ``theta`` and ``num_qubits``. Note that ``theta`` doesn’t contain the :math:`2\\pi` factor. The ``num_qubits`` argument specifies the number of qubits in the first register. More qubits will provide more precision for the phase estimation."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:173
msgid "If you pass a real number to the ``theta`` argument in the ``create_qpe_circuit`` function, it will return a circuit with a fixed phase encoded."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:205
msgid "However, if you pass a ```Parameter`` <https://qiskit.org/documentation/stubs/qiskit.circuit.Parameter.html>`__ object instead, it will return a parameterized circuit whose parameter values can be assigned after the circuit has been created. You will use the parameterized version of the QPE circuit for the rest of the tutorial."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:240
msgid "Create a list of phase values to be assigned later"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:242
msgid "After creating the parameterized QPE circuit, you will create a list of phase values to be assigned to the circuit in the next step. You can use the code below to create a list of 21 phase values that range from ``0`` to ``2`` with equal spacing, i.e. \\ ``0``, ``0.1``, ``0.2``, …, ``1.9``, ``2.0``."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:266
msgid "Step 2: Submit the circuits to a quantum computer on the cloud"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:278
msgid "Connect to the Qiskit Runtime service"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:280
msgid "First, you will connect to the Qiskit Runtime service instance that you created in `the first step <#Before-you-begin>`__. We will use ``ibmq_qasm_simulator`` to run this tutorial."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:305
msgid "Run the parameterized circuits by using the Sampler primitive"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:307
msgid "With the Qiskit Runtime service connected, a parameterized QPE circuit, and a list of parameter values, you are now ready to use the Sampler primitive to run the QPE circuits. The ``with ...`` syntax opens a Qiskit Runtime session. Within the session, you will run the parameterized QPE circuit with 21 parameter values with just one line of code. The Sampler primitive will take the parameter values, assign them to the circuit and run it as 21 circuits with fixed parameter values and return a single job result containing the (quasi-)probabilities of bitstrings. This saves you from writing dozens of lines of code."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:310
msgid "The ``Estimator`` primitive has a similar API interface for parameterized circuits. See `the API reference <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.Estimator.html>`__ for more details."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:338
msgid "Step 3: Analyze the results"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:350
msgid "Analyze the results of one circuit"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:352
msgid "After the job has been completed, you can start analyzing the results by looking at the histogram of one of the circuits. The (quasi-)probability distribution of the measurement outcome is stored in ``results.quasi_dists`` and you can access results from an individual circuit by passing the index of the circuit (:math:`idx=6` in the example below) you are interested in."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:385
msgid "To estimate :math:`\\theta`, you need to divide the most likely outcome :math:`N_1` (``1010`` in binary or ``10`` in decimal) by :math:`2^n`, where :math:`n` is the number of qubits in the first register (:math:`n=4` in our example):"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:387
msgid "\\theta = \\frac{N_1}{2^n} =  \\frac{10}{2^4} = 0.625.\n\n"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:389
msgid "This is close to the expected value of :math:`0.6`, but you can do a better estimate by taking the weighted average of the most likely outcome (``1010`` in binary or ``10`` in decimal) and the second most likely outcome (``1001`` in binary or ``9`` in decimal):"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:391
msgid "\\theta = \\frac{P_1 \\times \\frac{N_1}{2^n} + P_2 \\times \\frac{N_2}{2^n}}{P_1 + P_2} = \\frac{0.554 \\times \\frac{10}{2^4} + 0.269 \\times \\frac{9}{2^4}}{0.554 + 0.269} = 0.605,\n\n"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:393
msgid "where :math:`N_1` and :math:`P_1` are the most likely outcome and its probability and :math:`N_2` and :math:`P_2` are the second most likely outcome and its probability. The result, :math:`0.605`, is much closer to the expected value of :math:`0.6`. We will use this method to analyze the results from all circuits."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:405
msgid "Analyze the results of all circuits"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:407
msgid "You can use the helper functions below to find the values for :math:`N_1`, :math:`P_1`, :math:`N_2`, and :math:`P_2` for a phase and calculate the estimated :math:`\\theta`. Ideally :math:`N_2` should be a “neighbor” of :math:`N_1` (for example, the neighbors of ``1010`` are ``1001`` and ``1011``), however due to the presence of noise, the second most likely outcome may not be a neighbor of :math:`N_1` if the results were obtained from a real quantum system. The helper functions take the :math:`N_2` value only from :math:`N_1`\\ ’s neighbors."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:495
msgid "You can use the ``estimate_phase`` helper function to estimate phases from the results of all circuits."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:518
msgid "The ideal solutions for the phases :math:`\\theta` are periodic with a period of ``1`` because the eigenvalue :math:`e^{2 \\pi i \\theta}` is :math:`2 \\pi` periodic. You can run the cell below to generate the ideal solutions for comparison with the solutions obtained from the QPE algorithm."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:543
msgid "You can run the code below to visualize the solutions."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:607
msgid "As you can see, the solutions obtained from the QPE algorithm follow closely to the ideal solutions. Congratulations! You have successfully run the QPE algorithm and obtained good solutions!"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:619
msgid "Summary"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:621
msgid "In this tutorial, you have created a parameterized QPE circuit, run it using the Sampler primitive, analyzed the results, and obtained solutions that are closed to the ideal solutions. You can see that the Sampler primitive makes running parameterized circuits very easy."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:633
msgid "References"
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:635
msgid "Kitaev, A. Y. (1995). Quantum measurements and the Abelian stabilizer problem. arXiv preprint quant-ph/9511026."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:636
msgid "Nielsen, M., & Chuang, I. (2010). Quantum computation and quantum information (2nd ed., pp. 221-226). Cambridge University Press."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:637
msgid "Abbas, A., Andersson, S., Asfaw, A., Córcoles, A., Bello, L., Ben-Haim, Y., … & Wootton, J. (2020). Learn quantum computation using qiskit. URL: https://qiskit.org/textbook/preface.html (accessed 07/14/2022)."
msgstr ""

#: ../../tutorials/qpe_with_sampler.ipynb:649
msgid "Qiskit versions and copyright"
msgstr ""

