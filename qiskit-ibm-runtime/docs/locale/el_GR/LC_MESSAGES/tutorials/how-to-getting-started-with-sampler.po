msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-23 01:34+0000\n"
"PO-Revision-Date: 2022-11-23 01:45\n"
"Last-Translator: \n"
"Language-Team: Greek\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: el\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/how-to-getting-started-with-sampler.po\n"
"X-Crowdin-File-ID: 9820\n"
"Language: el_GR\n"

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:9
msgid "This page was generated from `docs/tutorials/how-to-getting-started-with-sampler.ipynb`__."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:9
msgid "Get started with the Sampler primitive"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:20
msgid "In this tutorial we will show you how to set up the Qiskit Rumtime ``Sampler`` primitive, explore the different options you can use to configure it, and invoke the primitive efficiently inside a session."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:32
msgid "Primitives"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:43
msgid "*Primitives* are meant to serve as foundational, elementary, building blocks for users to perform quantum computations, developers to implement quantum algorithms, and researchers to solve complex problems and deliver new applications."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:55
msgid "Using the Sampler primitive"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:66
msgid "Similar to the ``Backend`` base class, there is an ``Sampler`` base class defined in Qiskit Terra that standardizes the way users interact with all ``Sampler`` implementations. This allows users to easily change their choice of simulator or device for performing expectation value calculations, even if the underlying implementation is different."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:68
msgid "In this section we will be using the default implementation in Qiskit Terra, which uses a local statevector simulator."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:80
msgid "Run an isolated experiment"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:122
msgid "Run experiment bundles"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:158
msgid "Input parameterized circuits"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:160
msgid "Many real world applications of quantum computers depend on preparing quantum states according to certain parametrization or *ansatz*. The Sampler primitive offers support for these scenarios by accepting parametrized circuits as inputs, along with one extra argument to bind them: ``parameter_values``."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:195
msgid "Getting started with Sampler on the runtime service"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:197
msgid "Follow the steps in the `getting started guide <../getting_started.rst>`__ to get your quantum service instance ready to use."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:200
msgid "Start a session"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:202
msgid "A Qiskit Runtime session allows you to group a collection of iterative calls to the timeshare quantum computer. A session is started when the first job of the program is dequeued. Subsequent jobs within the session are prioritized by the scheduler to minimize artificial delay within an iterative algorithm. Data used within a session, such as transpiled circuits, is also cached to avoid unnecessary overhead. You can create a Runtime session using the context manager ``(with ...:)``, which automatically opens and closes the session for you."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:212
msgid "Create a Sampler instance"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:214
msgid "You can make one or more calls to the Sampler primitive within a session, by first creating a *Sampler* instance. The *Sampler* class takes in an *options* variable to control the execution environment."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:216
msgid "The *options* can be either a dictionary or a *qiskit_ibm_runtime.Options* class instance. Initializing it as an *Options* class allows you to use auto complete."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:218
msgid "Some of the settings you can specify using options:"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:220
msgid "optimization_level: How much optimization to perform on the circuits. The default is 3."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:222
msgid "resilience_level: How much resilience to build against errors. Higher levels generate more accurate results, at the expense of longer processing times. The default is 1."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:224
msgid "You can find full details in the `Options API reference <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.options.Options.html#qiskit_ibm_runtime.options.Options>`__."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:226
msgid "With these arguments, you can create an *Sampler* instance with the desired options."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-sampler.ipynb:229
msgid "Example:"
msgstr ""

