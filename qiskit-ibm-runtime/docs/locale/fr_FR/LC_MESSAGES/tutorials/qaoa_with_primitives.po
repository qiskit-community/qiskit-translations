msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-12 19:16+0000\n"
"PO-Revision-Date: 2023-09-12 19:41\n"
"Last-Translator: \n"
"Language: fr\n"
"Language-Team: French\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /main/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/qaoa_with_primitives.po\n"
"X-Crowdin-File-ID: 10009\n"

#: ../../tutorials/qaoa_with_primitives.ipynb:9
msgid "This page was generated from `docs/tutorials/qaoa_with_primitives.ipynb`__."
msgstr "Cette page a été générée à partir de `docs/tutorials/qaoa_with_primitives.ipynb`__."

#: ../../tutorials/qaoa_with_primitives.ipynb:9
msgid "QAOA using Qiskit Runtime primitives and Session"
msgstr "QAOA à l'aide de Qiskit Runtime primitives et de Session"

#: ../../tutorials/qaoa_with_primitives.ipynb:21
msgid "Background"
msgstr "Context"

#: ../../tutorials/qaoa_with_primitives.ipynb:23
msgid "The Quantum Approximate Optimization Algorithm (QAOA) is a hybrid iterative method for solving combinatorial optimization problems. You can learn more about this algorithm `here <https://learn.qiskit.org/course/ch-applications/solving-combinatorial-optimization-problems-using-qaoa>`__. In this tutorial we demonstrate how to implement the QAOA algorithm using Qiskit Runtime for solving a simple max-cut problem."
msgstr "L'algorithme QAOA (Quantum Approximate Optimization Algorithm) est une méthode itérative hybride pour résoudre des problèmes d'optimisation combinatoire. Pour en apprendre d'avantage sur cet algorithme, cliquez `ici <https://learn.qiskit.org/course/ch-applications/solving-combinatorial-optimization-problems-using-qaoa>`__. Dans ce tutoriel, nous démontrons comment implémenter l'algorithme QAOA à l'aide de Qiskit Runtime pour résoudre un problème simple de coupe maximale."

#: ../../tutorials/qaoa_with_primitives.ipynb:25
msgid "In a max-cut problem, we want to partition nodes of a graph in a way that maximizes the number of edges between nodes in differing groups. The desired max-cut partition for the following graph is clear: the 0th-node on the left should be separated from the rest of the nodes on the right by a cut. We will find this answer by applying QAOA by using Qiskit Runtime primitives and sessions."
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:65
msgid "Setup"
msgstr "Configuration"

#: ../../tutorials/qaoa_with_primitives.ipynb:102
msgid "Initialize Runtime service and select backend"
msgstr "Initialiser le service d'exécution et sélectionner le backend"

#: ../../tutorials/qaoa_with_primitives.ipynb:104
msgid "First, we need to instantiate the IBM Quantum Runtime service ``QiskitRuntimeService`` to choose a `computational resource <https://quantum-computing.ibm.com/services/resources?tab=systems&limit=40>`__ on which to execute our QAOA algorithm. In this tutorial, the ``ibmq_qasm_simlator`` is chosen."
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:127
msgid "QAOA Hamiltonian and ansatz"
msgstr "Hamiltonien QAOA et ansatz"

#: ../../tutorials/qaoa_with_primitives.ipynb:129
msgid "To use the QAOA algorithm for a max-cut problem we require a Pauli Hamiltonian that encodes the cost in a manner such that the minimum expectation value of the operator corresponds to the maximum number of edges between the nodes in two different groups."
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:131
msgid "For this simple example, the operator is a linear combination of terms with ``Z`` operators on nodes connected by an edge (recall that the 0th qubit is farthest right): :math:`IIIZZ + IIZIZ + IZIIZ + ZIIIZ`. Once the operator is constructed, the ansatz for the QAOA algorithm can easily be built by using the ``QAOAAnsatz`` circuit from the Qiskit circuit library."
msgstr "Pour cet exemple simple, l'opérateur est une combinaison linéaire de termes avec des opérateurs ``Z`` sur les noeuds connectés par une arête (n'oubliez pas que le 0ème qubit est le plus à droite): :math:`IIIZZ + IIZIZ + IZIIZ + ZIIIZ`. Une fois que l'opérateur est formé, l'ansatz pour l'algorithme QAOA peut facilement être construit en utilisant le circuit ``QAOAAnsatz`` à partir de la bibliothèque de circuits Qiskit."

#: ../../tutorials/qaoa_with_primitives.ipynb:171
msgid "The previous image illustrates the ansatz in basic gates for clarity. However, it can be expressed in multiple levels of decomposition by changing the ``reps`` argument or by drawing the circuit without the ``decompose`` method. For example, the following representation directly shows the QAOA structure with the default ``reps`` value, which is ``reps=1``."
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:207
msgid "Define the cost function by using Estimator"
msgstr "Définir la fonction de coût en utilisant Estimator"

#: ../../tutorials/qaoa_with_primitives.ipynb:218
msgid "As with an iterative optimization procedure, we now need to define our cost function over which to minimize. We proceed in an identical manner to the `VQE tutorial <vqe_with_estimator.ipynb>`__, computing the expectation value of our Hamiltonian with respect to the parameterized ansatz circuit using the Qiskit Runtime ``Estimator`` primitive:"
msgstr "Comme pour une procédure d'optimisation itérative, nous devons maintenant définir notre fonction de coût sur laquelle minimiser. Nous procédons de la même manière que le `tutoriel VQE <vqe_with_estimator.ipynb>`__, calculant la valeur d'attente de notre hamiltonien par rapport au circuit ansatz paramétré à l'aide de la primitive Qiskit Runtime ``Estimator`` :"

#: ../../tutorials/qaoa_with_primitives.ipynb:253
msgid "Minimize the cost function"
msgstr "Minimiser la fonction de coût"

#: ../../tutorials/qaoa_with_primitives.ipynb:255
msgid "Any classical optimizer can be used to minimize the cost function. On a real quantum system, an optimizer designed for non-smooth cost function landscapes usually does better. Here we use the `COBYLA routine from SciPy through the minimize function <https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html>`__."
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:257
msgid "Because we are iteratively executing many calls to Runtime, we use a ``Session`` to execute all calls within a single block. Moreover, for QAOA, the solution is encoded in the output distribution of the ansatz circuit bound with the optimal parameters from the minimization. Therefore, we will need a ``Sampler`` primitive as well, and will instantiate it with the same ``Session``."
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:281
msgid "We now set an initial set of random parameters:"
msgstr "Nous définissons maintenant un ensemble initial de paramètres aléatoires :"

#: ../../tutorials/qaoa_with_primitives.ipynb:302
msgid "and run our minimization routine:"
msgstr "et exécutons notre routine de minimisation :"

#: ../../tutorials/qaoa_with_primitives.ipynb:323
msgid "In the end, we have a result in the standard SciPy ``OptimizeResult`` format."
msgstr "Finalement, nous avons un résultat dans le format standard SciPy ``OptimizeResult``."

#: ../../tutorials/qaoa_with_primitives.ipynb:388
msgid "Solution to max-cut"
msgstr "Solution pour le max-cut"

#: ../../tutorials/qaoa_with_primitives.ipynb:399
msgid "The solution vector of parameter angles (``x``), when plugged into the ``ansatz`` circuit, yields the graph partitioning that we were looking for."
msgstr "Le vecteur de solution des angles de paramètres (``x``), lorsqu'il est branché dans le circuit ``ansatz``, donne le partitionnement du graphe que nous rechercherions."

#: ../../tutorials/qaoa_with_primitives.ipynb:436
msgid "For small problem instances, the solution can be visually obtained:"
msgstr "Pour les petites instances du problème, la solution peut être obtenue visuellement:"

#: ../../tutorials/qaoa_with_primitives.ipynb:471
msgid "The most probable bit-strings, up to finite-sampling deviations, encode the solution. Here we see that ``00001`` and ``11110`` are found, and are indeed correct. There are two solutions because the labeling of the two partitions with ``'0'`` or ``'1'`` is arbitrary."
msgstr "Les chaînes de bits les plus probables, codent la solution. Ici, on voit que ` ` 00001 ` ` et ` ` 11110 ` ` sont trouvés, et sont en effet corrects. Il y a deux solutions car l'étiquetage des deux partitions avec ` ` 0'` ` ` ou ` ` 1'` ` est arbitraire."

