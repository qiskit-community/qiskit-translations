msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-23 01:34+0000\n"
"PO-Revision-Date: 2022-11-23 01:43\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/how-to-getting-started-with-estimator.po\n"
"X-Crowdin-File-ID: 9818\n"
"Language: fr_FR\n"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:9
msgid "This page was generated from `docs/tutorials/how-to-getting-started-with-estimator.ipynb`__."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:8
msgid "**Pedro Rivero**"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:9
msgid "Quantum Developer *@ IBM Quantum*"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:10
msgid "pedro.rivero@ibm.com"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:22
msgid "Get started with the Estimator primitive"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:24
msgid "Learn what the *Estimator primitive* is, how to set it up, and how to use it as of *Qiskit Terra 0.22.0*."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:27
msgid "Overview"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:29
msgid "*Primitives* are meant to serve as foundational, elementary, building blocks for users to perform quantum computations, developers to implement quantum algorithms, and researchers to solve complex problems and deliver new applications."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:32
msgid "Specification"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:34
msgid "Formally speaking, the *Estimator* primitive is a standardized specification for calculating and interpreting expectation values for different combinations of quantum states (that is, circuits) and operators. This means that there is no single ``Estimator`` class to solve this task, but rather a family of them based on the simulators and devices that users can experiment on; each of which performing the same (internal) calculation on its given backend, while exposing a common \\_application programming interface (API) to the users."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:38
msgid "Technical description"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:40
msgid "From a technical standpoint, this is accomplished by defining a so called *interface* or, in more pyhtonic terminology, `abstract base class <https://docs.python.org/3/library/abc.html>`__ (``ABC``): ``BaseEstimator``. This ``ABC`` (i.e. the official specification of the *Estimator* primitive) can be found in `Qiskit Terra <https://github.com/Qiskit/qiskit-terra/blob/main/qiskit/primitives/base/base_estimator.py>`__, and serves two main purposes:"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:42
msgid "Standardize the way users interact with all ``Estimator`` classes (up to configurations), by defining a common API."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:43
msgid "Decouple particular *Estimator* implementations from the code that uses them, so that any user/developer can easily change their choice of simulator or device for performing expectation value calculations."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:45
msgid "|Estimator specification|"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:55
msgid "Estimator specification"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:48
msgid "Qiskit Runtime"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:50
msgid "As all other primitive programs to date, Estimator was born in the context of *Qiskit Runtime*: a quantum computing service and programming model that allows users to optimize workloads and efficiently execute them on quantum systems at scale. IBM provides a `managed ``Estimator`` <https://github.com/Qiskit/qiskit-ibm-runtime>`__ (i.e. an implementation of ``BaseEstimator``) that allows users to access IBM quantum hardware efficiently after `registering for an account <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ either on *IBM Quantum* or *IBM Cloud*."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:53
msgid "This tutorial has been developed for Qiskit’s native simulators, follow the links above for information on how to proceed with a real quantum computer."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:67
msgid "Demo"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:70
msgid "Prepare the environment"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:72
msgid "For a basic expectation value calculation you will need:"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:74
msgid "At least one quantum circuit to prepare our system in a precise quantum state for study. Our examples all have circuits in them, but you can use Qiskit to create your own. To learn how to create circuits by using Qiskit, see the `Circuit basics tutorial <https://qiskit.org/documentation/tutorials/circuits/01_circuit_basics.html>`__."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:106
msgid "At least one observable to measure. Observables represent physical properties of a quantum system (e.g. energy, spin), and allow said properties to be measured (e.g. their expectation values) for a given state of our system. For simplicity, you can use the `PauliSumOp class <https://qiskit.org/documentation/stubs/qiskit.opflow.primitive_ops.html#module-qiskit.opflow.primitive_ops>`__ in Qiskit to define them, as illustrated in the example below."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:154
msgid "An instance of any ``Estimator`` class complying with the *Estimator* primitive specification. For simplicity, we will use Qiskit Terra’s ``qiskit.primitives.Estimator`` class, based on the ```Statevector`` construct <https://qiskit.org/documentation/stubs/qiskit.quantum_info.Statevector.html?highlight=statevector#qiskit.quantum_info.Statevector>`__ (i.e. algebraic simulation)."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:178
msgid "Run a single experiment"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:180
msgid "You can invoke the *Estimator* primitive program using the ``run()`` method of the ``Estimator`` instance you just created. The method returns a ``JobV1`` object which you can use to query for things like ``job_id()`` and ``status()``."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:230
msgid "The ``result()`` method of the job will return the ``EstimatorResult``."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:276
msgid "Finally, to extract different information about the result:"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:328
msgid "You can keep invoking the ``run()`` method again with the different inputs:"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:398
msgid "Run multiple experiments (batching)"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:400
msgid "You can also provie compound inputs to the ``run()`` method in order to execute multiple experiments sequentially:"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:485
msgid "Run multiple experiments (asynchronous)"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:487
msgid "Creating multiple jobs will run the experiments in parallel:"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:583
msgid "Parametrized states"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:585
msgid "Many real world applications of quantum computers depend on preparing quantum states according to certain parametrization or *ansatz*. The *Estimator* primitive offers support for these scenarios by accepting parametrized circuits as inputs, along with one extra argument to bind them: ``parameter_values``."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:662
msgid "Configuration and options"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:664
msgid "On top of this basic usage, ``Estimator`` classes can also support custom configuration through two kinds of options: 1. Instance level options which serve as defaults. 2. Run options to update defaults for a single job."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:666
msgid "The particualr ``Estimator`` that we have been using so far accepts a ``shots`` option to fabricate a random sampling which mimics the process that usually takes place in real hardware. This will result in a non-exact, statistical, result, with the corresponding variance reported along in the metadata."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:737
msgid "And we can override the dafault ``shots`` when calling ``run()``:"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:807
msgid "Getting started with Estimator on the runtime service"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:809
msgid "Follow the steps in the `getting started guide <../getting_started.rst>`__ to get your quantum service instance ready to use."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:812
msgid "Start a session"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:814
msgid "A Qiskit Runtime session allows you to group a collection of iterative calls to the timeshare quantum computer. A session is started when the first job of the program is dequeued. Subsequent jobs within the session are prioritized by the scheduler to minimize artificial delay within an iterative algorithm. Data used within a session, such as transpiled circuits, is also cached to avoid unnecessary overhead. You can create a Runtime session using the context manager ``(with ...:)``, which automatically opens and closes the session for you."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:824
msgid "Create an Estimator instance"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:826
msgid "You can make one or more calls to the *Estimator* primitive within a session, by first creating an *Estimator* instance. The *Estimator* class takes in an *options* variable to control the execution environment."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:828
msgid "The *options* can be either a dictionary or a *qiskit_ibm_runtime.Options* class instance. Initializing it as an *Options* class allows you to use auto complete."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:830
msgid "Some of the settings you can specify using options:"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:832
msgid "optimization_level: How much optimization to perform on the circuits. The default is 3."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:834
msgid "resilience_level: How much resilience to build against errors. Higher levels generate more accurate results, at the expense of longer processing times. The default is 1."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:836
msgid "You can find full details in the `Options API reference <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.options.Options.html#qiskit_ibm_runtime.options.Options>`__."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:838
msgid "With these arguments, you can create an *Estimator* instance with the desired options."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:841
msgid "Example:"
msgstr ""

