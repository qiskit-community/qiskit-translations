msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-17 16:43+0000\n"
"PO-Revision-Date: 2023-11-17 16:49\n"
"Last-Translator: \n"
"Language: fr\n"
"Language-Team: French\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /main/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/grover_with_sampler.po\n"
"X-Crowdin-File-ID: 9816\n"

#: ../../tutorials/grover_with_sampler.ipynb:9
msgid "This page was generated from `docs/tutorials/grover_with_sampler.ipynb`__."
msgstr "Cette page a été générée à partir de ` docs/tutorials/grover_with_sampler.ipynb ` __."

#: ../../tutorials/grover_with_sampler.ipynb:9
msgid "Grover's algorithm"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:21
msgid "Background"
msgstr "Contexte"

#: ../../tutorials/grover_with_sampler.ipynb:23
msgid "Amplitude amplification is a general purpose quantum algorithm, or subroutine, that can be used to obtain a quadratic speedup over a handful of classical algorithms. `Grover’s algorithm <https://arxiv.org/abs/quant-ph/9605043>`__ was the first to demonstrate this speedup on unstructured search problems. Formulating a Grover's search problem requires an oracle function that marks one or more computational basis states as the states we are interested in finding, and an amplification circuit that increases the amplitude of marked states, consequently suppressing the remaining states."
msgstr "Amplification d'amplitude est un algorithme quantique à usage général qui peut être utilisé pour obtenir une accélération quadratique sur certains algorithmes classiques. L'algorithme de Grover <https://arxiv.org/abs/quant-ph/9605043>` __ a été le premier à démontrer cette accélération sur des problèmes de recherche non structurés. La formulation d'un problème de recherche de Grover nécessite une fonction oracle qui marque un ou plusieurs états comme les états que nous recherchons, et un circuit d'amplification qui augmente l'amplitude des états marqués, en supprimant par conséquent les états restants."

#: ../../tutorials/grover_with_sampler.ipynb:26
msgid "Here, we demonstrate how to construct Grover oracles and use the ``GroverOperator`` from the Qiskit circuit library to easily set up a Grover's search instance. The runtime ``Sampler`` primitive allows seamless execution of Grover circuits, including automatic compilation, error suppression, and readout error mitigation techniques."
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:38
msgid "Setup"
msgstr "Configuration"

#: ../../tutorials/grover_with_sampler.ipynb:40
msgid "Here we import the small number of tools we need for this tutorial."
msgstr "Ici, nous importons les outils nécessaires pour ce tutoriel."

#: ../../tutorials/grover_with_sampler.ipynb:109
msgid "Map the problem to a quantum-native format"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:111
msgid "Grover's algorithm requires an `oracle <https://learning.quantum-computing.ibm.com/course/fundamentals-of-quantum-algorithms/grovers-algorithm>`__ that specifies one or more marked computational basis states, where \"marked\" means a state with a phase of -1. A controlled-Z gate, or its multi-controlled generalization over :math:`N` qubits, marks the :math:`2^{N}-1` state (``'1'``\\ \\*\\ :math:`N` bit-string). Marking basis states with one or more ``'0'`` in the binary representation requires applying X-gates on the corresponding qubits before and after the controlled-Z gate; equivalent to having an open-control on that qubit. In the following code, we define an oracle that does just that, marking one or more input basis states defined through their bit-string representation. The ``MCMT`` gate is used to implement the multi-controlled Z-gate."
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:162
msgid "Specific Grover's instance"
msgstr "Instance spécifique de Grover"

#: ../../tutorials/grover_with_sampler.ipynb:164
msgid "Now that we have the oracle function, we can define a specific instance of Grover search. In this example we will mark two computational states out of the eight available in a three-qubit computational space:"
msgstr "Maintenant que nous avons la fonction oracle, nous pouvons définir une instance spécifique de recherche Grover. Dans cet exemple, nous allons marquer deux états sur les huit disponibles dans un espace de calcul de trois qubits :"

#: ../../tutorials/grover_with_sampler.ipynb:198
msgid "GroverOperator"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:200
msgid "The built-in Qiskit ``GroverOperator`` takes an oracle circuit and returns a circuit that is composed of the oracle circuit itself and a circuit that amplifies the states marked by the oracle. Here, we ``decompose`` the circuit to see the gates within the operator:"
msgstr "Le ``GroverOperator`` de Qiskit prend un circuit oracle et retourne un circuit qui est composé du circuit oracle ainsi que d'un circuit qui amplifie les états marqués par l'oracle. Ici, nous ``décomposons`` le circuit pour voir les opérations quantiques de l'opérateur :"

#: ../../tutorials/grover_with_sampler.ipynb:231
msgid "Repeated applications of this ``grover_op`` circuit amplify the marked states, making them the most probable bit-strings in the output distribution from the circuit. There is an optimal number of such applications that is determined by the ratio of marked states to total number of possible computational states:"
msgstr "L'execution répétée de ce circuit ``grover_op`` amplifie les états marqués, ce qui en fait les bits les plus probables dans la distribution résultante du circuit. Il y a un nombre optimal de telles executions qui est déterminé par le rapport entre les états marqués et le nombre total d'états de calcul possibles:"

#: ../../tutorials/grover_with_sampler.ipynb:255
msgid "Full Grover circuit"
msgstr "Circuit Grover complet"

#: ../../tutorials/grover_with_sampler.ipynb:257
msgid "A complete Grover experiment starts with a Hadamard gate on each qubit; creating an even superposition of all computational basis states, followed the Grover operator (``grover_op``) repeated the optimal number of times. Here we make use of the ``QuantumCircuit.power(INT)`` method to repeatedly apply the Grover operator."
msgstr "Une expérience de Grover complète commence par une porte Hadamard sur chaque qubit ; générant une superposition de tous les états de calcul, suivi par l'opérateur Grover (``grover_op``) répété le nombre de fois optimal. Ici, nous utilisons la méthode ``QuantumCircuit.power (INT)`` pour appliquer à plusieurs reprises l'opérateur Grover."

#: ../../tutorials/grover_with_sampler.ipynb:295
msgid "Optimize the circuits and operators"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:297
msgid "For this example, the circuit the operators are simple, so no optimizations are needed."
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:309
msgid "Execute using a quantum primitive function"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:311
msgid "Amplitude amplification is a sampling problem that is suitable for execution with the ```Sampler`` <https://docs.quantum-computing.ibm.com/api/qiskit-ibm-runtime/qiskit_ibm_runtime.Sampler#sampler>`__ runtime primitive. Because we have a single circuit, we instantiate the ```Batch`` <https://docs.quantum-computing.ibm.com/run/run-primitives-batch>`__ context manager to run our non-iterative workload."
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:339
msgid "Analyze the results"
msgstr ""

