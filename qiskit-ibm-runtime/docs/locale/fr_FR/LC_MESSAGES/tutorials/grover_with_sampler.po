msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-24 21:41+0000\n"
"PO-Revision-Date: 2023-10-24 21:49\n"
"Last-Translator: \n"
"Language: fr\n"
"Language-Team: French\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /main/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/grover_with_sampler.po\n"
"X-Crowdin-File-ID: 9816\n"

#: ../../tutorials/grover_with_sampler.ipynb:9
msgid "This page was generated from `docs/tutorials/grover_with_sampler.ipynb`__."
msgstr "Cette page a été générée à partir de ` docs/tutorials/grover_with_sampler.ipynb ` __."

#: ../../tutorials/grover_with_sampler.ipynb:9
msgid "Grover's algorithm using the Sampler primitive"
msgstr "Algorithme de Grover utilisant la primitive Sampler"

#: ../../tutorials/grover_with_sampler.ipynb:21
msgid "Background"
msgstr "Contexte"

#: ../../tutorials/grover_with_sampler.ipynb:23
msgid "Amplitude amplification is a general purpose quantum algorithm, or subroutine, that can be used to obtain a quadratic speedup over a handful of classical algorithms. `Grover’s algorithm <https://arxiv.org/abs/quant-ph/9605043>`__ was the first to demonstrate this speedup on unstructured search problems. Formulating a Grover's search problem requires an oracle function that marks one or more computational basis states as the states we are interested in finding, and an amplification circuit that increases the amplitude of marked states, consequently suppressing the remaining states."
msgstr "Amplification d'amplitude est un algorithme quantique à usage général qui peut être utilisé pour obtenir une accélération quadratique sur certains algorithmes classiques. L'algorithme de Grover <https://arxiv.org/abs/quant-ph/9605043>` __ a été le premier à démontrer cette accélération sur des problèmes de recherche non structurés. La formulation d'un problème de recherche de Grover nécessite une fonction oracle qui marque un ou plusieurs états comme les états que nous recherchons, et un circuit d'amplification qui augmente l'amplitude des états marqués, en supprimant par conséquent les états restants."

#: ../../tutorials/grover_with_sampler.ipynb:26
msgid "Here we demonstrate how to construct Grover oracles and make use of the ``GroverOperator`` from the Qiskit circuit library to easily setup a Grover's search instance. The runtime ``Sampler`` primitive allows for seamless execution of Grover circuits, including automatic compilation, error suppression, and readout error mitigation techniques."
msgstr "Ici nous montrons comment construire des oracles de Grover et utiliser le ``GroverOperator`` de la bibliothèque de circuits Qiskit pour configurer facilement une recherche Grover. La primitive d'exécution ``Sampler`` permet l'exécution transparente des circuits Grover, y compris la compilation automatique, la suppression des erreurs et les techniques d'atténuation des erreurs de mesures."

#: ../../tutorials/grover_with_sampler.ipynb:38
msgid "Setup"
msgstr "Configuration"

#: ../../tutorials/grover_with_sampler.ipynb:40
msgid "Here we import the small number of tools we need for this tutorial."
msgstr "Ici, nous importons les outils nécessaires pour ce tutoriel."

#: ../../tutorials/grover_with_sampler.ipynb:71
msgid "Initialize Runtime service and select backends"
msgstr "Configurer le service d'exécution et sélectionner des systèmes"

#: ../../tutorials/grover_with_sampler.ipynb:73
msgid "Here we instantiate the Runtime service that gives access to the quantum devices and the simulator that we use in this tutorial. We will first use a simulator to validate our circuit, then execute it on a real quantum system."
msgstr "Ici, nous configurons le service d'exécution qui donne accès aux systèmes quantiques et au simulateur que nous utilisons dans ce tutoriel. Nous utiliserons d'abord un simulateur pour valider notre circuit, avant de l'exécuter sur un réel système quantique."

#: ../../tutorials/grover_with_sampler.ipynb:106
msgid "Define a Grover experiment"
msgstr "Définir une expérience Grover"

#: ../../tutorials/grover_with_sampler.ipynb:108
msgid "Grover's algorithm requires an `oracle <https://quantum-computing.ibm.com/admin/docs/admin/guide/grovers-algorithm#the-oracle>`__ that specifies one or more marked computational basis states, where \"marked\" means a state with a phase of -1. A controlled-Z gate, or its multi-controlled generalization over :math:`N` qubits, marks the :math:`2^{N}-1` state (``'1'``\\ \\*\\ :math:`N` bit-string). Marking basis states with one or more ``'0'`` in the binary representation requires applying X-gates on the corresponding qubits before and after the controlled-Z gate; equivalent to having an open-control on that qubit. In the following code, we define an oracle that does just that, marking one or more input basis states defined through their bit-string representation. The ``MCMT`` gate is used to implement the multi-controlled Z-gate."
msgstr "L'algorithme de Grover nécessite un \"oracle <https://quantum-computing.ibm.com/admin/docs/admin/guide/grovers-algorithm#the-oracle>`__ qui spécifie un ou plusieurs états de calcul marqués, où \"marqués\" signifie un état avec une phase de -1. L'opérateur controlled-Z, ou sa généralisation multi-contrôlée sur :math:`N` qubits, marque le :math:`2 ^{N}-1` state (``'1'``\\ \\*\\ :math:`N` bit-string). Le marquage des états avec un ou plusieurs ``'0'`` dans la représentation binaire nécessite d'appliquer des opérations X sur les qubits correspondants avant et après l'opérateur controlled-Z; correspondant à avoir un contrôle inversé sur ce qubit. Dans le code suivant, nous définissons un oracle qui fait cela, marquant un ou plusieurs états d'entrée définis via leur représentation binaire. L'opérateur ``MCMT`` est utilisé pour appliquer l'opérateur Z-gate multi-contrôlée."

#: ../../tutorials/grover_with_sampler.ipynb:159
msgid "Specific Grover's instance"
msgstr "Instance spécifique de Grover"

#: ../../tutorials/grover_with_sampler.ipynb:161
msgid "Now that we have the oracle function, we can define a specific instance of Grover search. In this example we will mark two computational states out of the eight available in a three-qubit computational space:"
msgstr "Maintenant que nous avons la fonction oracle, nous pouvons définir une instance spécifique de recherche Grover. Dans cet exemple, nous allons marquer deux états sur les huit disponibles dans un espace de calcul de trois qubits :"

#: ../../tutorials/grover_with_sampler.ipynb:195
msgid "The ``GroverOperator``"
msgstr "Le ``GroverOperator``"

#: ../../tutorials/grover_with_sampler.ipynb:197
msgid "The built-in Qiskit ``GroverOperator`` takes an oracle circuit and returns a circuit that is composed of the oracle circuit itself and a circuit that amplifies the states marked by the oracle. Here, we ``decompose`` the circuit to see the gates within the operator:"
msgstr "Le ``GroverOperator`` de Qiskit prend un circuit oracle et retourne un circuit qui est composé du circuit oracle ainsi que d'un circuit qui amplifie les états marqués par l'oracle. Ici, nous ``décomposons`` le circuit pour voir les opérations quantiques de l'opérateur :"

#: ../../tutorials/grover_with_sampler.ipynb:228
msgid "Repeated applications of this ``grover_op`` circuit amplify the marked states, making them the most probable bit-strings in the output distribution from the circuit. There is an optimal number of such applications that is determined by the ratio of marked states to total number of possible computational states:"
msgstr "L'execution répétée de ce circuit ``grover_op`` amplifie les états marqués, ce qui en fait les bits les plus probables dans la distribution résultante du circuit. Il y a un nombre optimal de telles executions qui est déterminé par le rapport entre les états marqués et le nombre total d'états de calcul possibles:"

#: ../../tutorials/grover_with_sampler.ipynb:252
msgid "Full Grover circuit"
msgstr "Circuit Grover complet"

#: ../../tutorials/grover_with_sampler.ipynb:254
msgid "A complete Grover experiment starts with a Hadamard gate on each qubit; creating an even superposition of all computational basis states, followed the Grover operator (``grover_op``) repeated the optimal number of times. Here we make use of the ``QuantumCircuit.power(INT)`` method to repeatedly apply the Grover operator."
msgstr "Une expérience de Grover complète commence par une porte Hadamard sur chaque qubit ; générant une superposition de tous les états de calcul, suivi par l'opérateur Grover (``grover_op``) répété le nombre de fois optimal. Ici, nous utilisons la méthode ``QuantumCircuit.power (INT)`` pour appliquer à plusieurs reprises l'opérateur Grover."

#: ../../tutorials/grover_with_sampler.ipynb:292
msgid "Execution with the Sampler primitive"
msgstr "Exécution avec la primitive Sampler"

#: ../../tutorials/grover_with_sampler.ipynb:294
msgid "Amplitude amplification is a sampling problem that is suitable for execution with the ``Sampler`` runtime primitive. Because we have a single circuit, we instantiate a ``Sampler`` using the target backend. To begin, this is the simulator:"
msgstr "L'amplification de l'amplitude est un problème d'échantillonnage qui peut être exécuté avec la primitive d'exécution ``Sampler``. Parce que nous avons un circuit unique, nous configurons un ``Sampler`` en utilisant le backend désiré. Pour commencer, voilà le simulateur :"

#: ../../tutorials/grover_with_sampler.ipynb:315
msgid "Now we execute the circuit by using ``sim_sampler.run``. The result is obtained in the returned quasi-probability distribution:"
msgstr "Maintenant, nous exécutons le circuit en utilisant ``sim_sampler.run``. Le résultat est obtenu dans la distribution de probabilités retournée :"

#: ../../tutorials/grover_with_sampler.ipynb:336
msgid "To see that the marked states are visible in the returned distribution, we convert the returned quasi-probability distribution from integer to bit-string representation to compare to the list of ``marked_states``."
msgstr "Pour vérifier que les états marqués sont visibles dans la distribution retournée, nous convertissons la distribution de probabilité de la représentation de nombres entiers à la représentation binaire pour la comparer à la liste des ``marked_states``."

#: ../../tutorials/grover_with_sampler.ipynb:371
msgid "Having verified that our code does indeed produce the desired outcome, we now execute it on a real device, creating an ``Sampler`` instance targeting that system:"
msgstr "Ayant vérifié que notre code produit le résultat souhaité, nous l'exécutons maintenant sur un véritable système, créant une instance ``Sampler`` depuis ce système :"

