msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-15 18:31+0000\n"
"PO-Revision-Date: 2023-08-14 19:31\n"
"Last-Translator: \n"
"Language: fr\n"
"Language-Team: French\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /main/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/vqe_with_estimator.po\n"
"X-Crowdin-File-ID: 9834\n"

#: ../../tutorials/vqe_with_estimator.ipynb:9
msgid "This page was generated from `docs/tutorials/vqe_with_estimator.ipynb`__."
msgstr "Cette page a été générée à partir de `docs/tutorials/vqe_with_estimator.ipynb`__."

#: ../../tutorials/vqe_with_estimator.ipynb:9
msgid "VQE using Estimator primitive and Sessions"
msgstr "VQE à l'aide de la primitive Estimator et des Sessions"

#: ../../tutorials/vqe_with_estimator.ipynb:21
msgid "Background"
msgstr "Contexte"

#: ../../tutorials/vqe_with_estimator.ipynb:23
msgid "`Variational quantum algorithms <https://arxiv.org/abs/2012.09265>`__ are promising candidate hybrid-algorithms for observing the utility of quantum computation on noisy near-term devices. Variational algorithms are characterized by the use of a classical optimization algorithm to iteratively update a parameterized trial solution, or \"ansatz\". Chief among these methods is the Variational Quantum Eigensolver (VQE) that aims to solve for the ground state of a given Hamiltonian represented as a linear combination of Pauli terms, with an ansatz circuit where the number of parameters to optimize over is polynomial in the number of qubits. Given that size of the full solution vector is exponential in the number of qubits, successful minimization using VQE requires, in general, additional problem specific information to define the structure of the ansatz circuit."
msgstr "Les algorithmes quantiques variationnels <https://arxiv.org/abs/2012.09265>` __ sont des algorithmes hybrides efficaces pour observer l'utilité des calcul quantiques sur des système bruyants. Les algorithmes de variabilité sont caractérisés par l'utilisation d'un algorithme d'optimisation classique pour mettre à jour itérativement une solution expérimentale paramétrée, ou \"ansatz\". Le plus connu est le Variational Quantum Eigensolver (VQE) qui vise à obtenir l'état fondamental d'une Hamiltonian représentée comme une combinaison linéaire de Pauli vectors, avec un circuit ansatz où le nombre de paramètres à optimiser évolu de manière polynomiale avec le nombre de qubits. Étant donné que la taille du vecteur solution évolue de manière exponentielle avec le nombre de qubits, la minimisation à l'aide de VQE nécessite, en général, des informations supplémentaires spécifiques au problème pour définir la structure du circuit ansatz."

#: ../../tutorials/vqe_with_estimator.ipynb:26
msgid "Executing a VQE algorithm requires the following 3 components:"
msgstr "Exécuter un algorithme VQE nécessite les 3 composants suivants :"

#: ../../tutorials/vqe_with_estimator.ipynb:28
msgid "Hamiltonian and ansatz (problem specification)"
msgstr "Hamiltonien et ansatz (définition du problème)"

#: ../../tutorials/vqe_with_estimator.ipynb:29
msgid "Qiskit Runtime estimator"
msgstr "Estimateur Qiskit Runtime"

#: ../../tutorials/vqe_with_estimator.ipynb:30
msgid "Classical optimizer"
msgstr "Optimiseur classique"

#: ../../tutorials/vqe_with_estimator.ipynb:32
msgid "Although the Hamiltonian and ansatz require domain specific knowledge to construct, these details are immaterial to the Runtime, and we can execute a wide class of VQE problems in the same manner."
msgstr "Bien que l'Hamiltonian et l'ansatz nécessitent une connaissance spécifique du domaine, ces détails sont négligeables pour l'exécution, et nous pouvons exécuter de nombreux problèmes VQE de la même manière."

#: ../../tutorials/vqe_with_estimator.ipynb:44
msgid "Setup"
msgstr "Configuration"

#: ../../tutorials/vqe_with_estimator.ipynb:46
msgid "Here we import the tools needed for a VQE experiment. The primary imports can be grouped logically into three components that correspond to the three required elements."
msgstr "Ici, nous importons les outils nécessaires à une expérience VQE. Les imports peuvent être groupés de manière logique en trois composantes qui correspondent aux trois éléments nécessaires."

#: ../../tutorials/vqe_with_estimator.ipynb:86
msgid "Initialize Runtime service and select backend"
msgstr "Initialiser le service d'exécution et sélectionner le backend"

#: ../../tutorials/vqe_with_estimator.ipynb:88
msgid "Here we instantiate the Runtime service that gives access to the simulator that we use in this tutorial."
msgstr "Ici, nous configurons le service d'exécution qui donne accès au simulateur que nous utilisons dans ce tutoriel."

#: ../../tutorials/vqe_with_estimator.ipynb:120
msgid "Problem specification"
msgstr "Définition du problème"

#: ../../tutorials/vqe_with_estimator.ipynb:122
msgid "Here we define the problem instance for our VQE algorithm. Although the problem in question can come from a variety of domains, the form for execution via Runtime is the same. Qiskit provides a convenience class for expressing Hamiltonians in Pauli form, and a collection of widely used ansatz circuits in the ``qiskit.circuit.library``."
msgstr "Ici, nous définissons le problème pour notre algorithme VQE. Bien que le problème en question puisse provenir d'une variété de domaines, la forme de l'exécution via Runtime est la même. Qiskit fournit une classe pour l'expression des Hamiltonians sous forme de vecteurs Pauli, et une collection de circuits ansatz dans la ``qiskit.circuit.library``."

#: ../../tutorials/vqe_with_estimator.ipynb:124
msgid "Here, our example Hamiltonian is derived from a quantum chemistry problem"
msgstr "Ici, notre exemple Hamiltonien est dérivé d'un problème de chimie quantique"

#: ../../tutorials/vqe_with_estimator.ipynb:147
msgid "and our choice of ansatz is the ``EfficientSU2`` that, by default, linearly entangles qubits, making it ideal for quantum hardware with limited connectivity."
msgstr "et notre choix d'ansatz est le ``EfficientSU2`` qui, par défaut, intrique linéairement les qubits, le rendant idéal pour les systèmes quantique avec une connectivité limitée."

#: ../../tutorials/vqe_with_estimator.ipynb:183
msgid "From the figure above we see that our ansatz circuit is defined by a vector of parameters, :math:`\\theta_{i}`, with the total number given by:"
msgstr "Sur la figure ci-dessus, nous pouvons voir que notre circuit ansatz est défini par un vecteur de paramètres, :math:`\\theta_{i}`, avec le nombre total donné par :"

#: ../../tutorials/vqe_with_estimator.ipynb:231
msgid "VQE cost function and minimization"
msgstr "Fonction de coût VQE et minimisation"

#: ../../tutorials/vqe_with_estimator.ipynb:233
msgid "Like many classical optimization problems, the solution to a VQE problem can be formulated as minimization of a scalar cost function. By definition, VQE looks to find the ground state solution to a Hamiltonian by optimizing the ansatz circuit parameters to minimize the expectation value (energy) of the Hamiltonian. With the Runtime ``Estimator`` directly taking a Hamiltonian and parameterized ansatz, and returning the necessary energy, The cost function for a VQE instance is quite simple:"
msgstr "Comme de nombreux problèmes d'optimisation classiques, la solution à un problème VQE peut être formulée comme la minimisation d'une fonction scalaire de coût. Par définition, VQE cherche à trouver la solution de l'état fondamental à un hamiltonien en optimisant les paramètres du circuit ansatz afin de minimiser la valeur attendu (énergie) de l'hamiltonien. Avec le Runtime ``Estimator`` qui prend directement un ansatz hamiltonien et paramétré, et en retournant l'énergie nécessaire, la fonction de coût d'une instance VQE est assez simple:"

#: ../../tutorials/vqe_with_estimator.ipynb:269
msgid "Note that, in addition to the array of optimization parameters that must be the first argument, we use additional arguments to pass the terms needed in the cost function."
msgstr "Notez que, en plus de l'ensemble des paramètres d'optimisation qui doivent être le premier argument, nous utilisons des arguments supplémentaires pour passer les valeurs nécessaires à la fonction de coût."

#: ../../tutorials/vqe_with_estimator.ipynb:280
msgid "We are now free to use a classical optimizer of our choice to minimize our cost function. Here we use the `COBYLA routine from SciPy via the ``minimize`` function <https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html>`__. Note that, when running on real quantum hardware, the choice of optimizer is important as not all optimizers handle noisy cost function landscapes equally well."
msgstr "Nous sommes maintenant libres d'utiliser un optimiseur classique de notre choix pour minimiser notre fonction de coût. Ici, nous utilisons `la routine COBYLA de SciPy via la fonction ``minimize`` <https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html>`__. Notez que, lors de l'exécution sur des systèmes quantiques réels, le choix de l'optimiseur est important car tous les optimiseurs ne gèrent pas aussi bien les fonctions de coût bruyantes."

#: ../../tutorials/vqe_with_estimator.ipynb:282
msgid "To begin the routine, we start by specifying a random initial set of parameters,"
msgstr "Pour définir la routine, nous commençons par spécifier un ensemble aléatoire initial de paramètres,"

#: ../../tutorials/vqe_with_estimator.ipynb:303
msgid "and because we are sending a large number of jobs that we would like to execute together, here we use a ``Session`` to execute all the generated circuits in one block. Here ``args`` is the standard SciPy way to supply the additional parameters needed by the cost function."
msgstr "et parce que nous envoyons un grand nombre de circuits que nous aimerions exécuter ensemble, nous utilisons une ``Session`` pour exécuter tous les circuits générés en un seul bloc. Ici, ``args`` est la manière SciPy standard de fournir les paramètres supplémentaires requis par la fonction de coût."

#: ../../tutorials/vqe_with_estimator.ipynb:328
msgid "At the terminus of this routine we have a result in the standard SciPy ``OptimizeResult`` format. From this we see that it took ``nfev`` number of cost function evaluations to obtain the solution vector of parameter angles (``x``) that, when plugged into the ansatz circuit, yield the approximate ground state solution we were looking for."
msgstr "À la fin de cette routine nous avons un résultat dans le format standard SciPy ``OptimizeResult``. De ce fait, nous voyons qu'il a fallu ``nfev`` évaluations de la fonction coût pour obtenir le vecteur de solution des angles paramètres (``x``) qui, lorsqu'ils sont connectés au circuit ansatz, donnent la solution approximative de l'état fondamental que nous recherchons."

#: ../../tutorials/vqe_with_estimator.ipynb:393
msgid "Adding a callback function"
msgstr "Ajout d'une fonction de rappel"

#: ../../tutorials/vqe_with_estimator.ipynb:395
msgid "As it stands now, we are unable to save intermediate results from the iteration process, view the value of the cost function per iteration, nor are we able to monitor the progress of the routine. Callback functions are a standard way for users to obtain additional information about the status of an iterative algorithm. The standard SciPy callback routine allows for returning only the interim vector at each iteration. However, it is possible to do much more than this. Here we show how to use a mutable object, such as a dictionary, to store the current vector at each iteration, for example in case we need to restart the routine due to failure, and also return the current iteration number and average time per iteration."
msgstr "Actuellement, nous ne pouvons pas enregistrer les résultats intermédiaires du processus d'itération, voir la valeur de la fonction de coût à chaque itération, et nous ne pouvons pas non plus surveiller l'avancement de la routine. Les fonctions de rappel constituent une manière pour les utilisateurs d'obtenir des informations supplémentaires sur le statut d'un algorithme itératif. La routine de rappel standard SciPy permet de ne renvoyer que le vecteur intermédiaire à chaque itération. Cependant, il est possible de faire beaucoup plus que cela. Ici, nous montrons comment utiliser un objet mutable, tel qu'un dictionnaire, pour stocker le vecteur actuel à chaque itération, par exemple dans le cas où nous avons besoin de redémarrer la routine en raison d'un problème, et aussi de renvoyer le nombre d'itérations en cours et le temps moyen par itération."

#: ../../tutorials/vqe_with_estimator.ipynb:474
msgid "We can now repeat the experiment setting the ``callback`` argument in ``minimize`` with our function:"
msgstr "Nous pouvons à présent répéter l'expérience, définir l'argument ``callback`` dans ``minimize`` avec notre fonction :"

#: ../../tutorials/vqe_with_estimator.ipynb:544
msgid "If the procedure terminates correctly, then the ``prev_vector`` and ``iters`` values in our ``callback_dict`` dictionary should be equal to the solution vector and total number of function evaluations, respectively. This is easy to verify:"
msgstr "Si la procédure se termine correctement, les valeurs ``prev_vecteur`` et ``iters`` du dictionnaire ``callback_dict`` devraient être égales au vecteur solution et au nombre total d'évaluations de la fonction, respectivement. Ceci est facile à vérifier :"

#: ../../tutorials/vqe_with_estimator.ipynb:625
msgid "We can also now view the progress towards convergence as monitored by the cost history at each iteration:"
msgstr "Nous pouvons également observer la progression vers la convergence, telle qu'elle est suivie par l'historique des coûts à chaque itération :"

