# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Qiskit Development Team
# This file is distributed under the same license as the Qiskit Runtime IBM
# Client package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit Runtime IBM Client \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-27 13:35+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:9
msgid ""
"This page was generated from `docs/tutorials/how-to-getting-started-with-"
"estimator.ipynb`__."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:9
msgid "Get started with the Estimator primitive"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:11
msgid "Learn how to set up and use the Estimator primitive program."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:14
msgid "Overview"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:16
msgid ""
"The ``Estimator`` primitive lets you efficiently calculate and interpret "
"expectation values of quantum operators required for many algorithms. You"
" can specify a list of circuits and observables, then evaluate "
"expectation values and variances for a given parameter input."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:19
msgid "Prepare the environment"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:21
msgid ""
"Follow the steps in the `getting started guide "
"<https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__"
" to get your quantum service instance ready to use."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:23
msgid ""
"Youâ€™ll need at least one circuit to submit to the program. Our examples "
"all have circuits in them, but if you want to submit your own circuit, "
"you can use Qiskit to create one. To learn how to create circuits by "
"using Qiskit, see the `Circuit basics tutorial "
"<https://qiskit.org/documentation/tutorials/circuits/01_circuit_basics.html>`__."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:25
msgid ""
"Create a list of observables. Observables let you define the properties "
"of the circuit that are relevant to your problem and enable you to "
"efficiently measure their expectation value. For simplicity, you can use "
"the `PauliSumOp class "
"<https://qiskit.org/documentation/stubs/qiskit.opflow.primitive_ops.html"
"#module-qiskit.opflow.primitive_ops>`__ in Qiskit to define them, as "
"illustrated in the example below."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:28
msgid "Start a session"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:30
msgid ""
"A Qiskit Runtime **session** allows you to group a collection of "
"iterative calls to the quantum computer. A session is started when the "
"first job within the session is started. Subsequent jobs within the "
"session are prioritized by the scheduler to minimize artificial delay "
"within an iterative algorithm. Data used within a session, such as "
"transpiled circuits, is also cached to avoid unnecessary overhead. You "
"can create a Runtime session using the context manager (``with ...:``), "
"which automatically opens and closes the session for you."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:34
msgid "Create an Estimator instance"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:36
msgid ""
"You can make one or more calls to the ``Estimator`` primitive within a "
"session, by first creating an ``Estimator`` instace. The ``Estimator`` "
"class takes in an ``options`` variable to control the execution "
"environment."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:38
msgid ""
"``options`` can be either a dictionary or a "
"``qiskit_ibm_runtime.Options`` class instance. Initializing it as an "
"``Options`` class allows you to do auto-complete."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:40
msgid "Some of the settings you can specify using ``options``:"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:42
msgid ""
"**optimization_level**: How much optimization to perform on the circuits."
" The default is 1."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:43
msgid ""
"**resilience_level**: How much resilience to build against errors. Higher"
" levels generate more accurate results, at the expense of longer "
"processing times. The default is 0."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:45
msgid ""
"You can find more details in `the Options API reference "
"<https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.options.Options.html#qiskit_ibm_runtime.options.Options>`__."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:47
msgid ""
"With these arguments, you can create a ``Estimator`` instance with the "
"desired options. Example:"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:75
msgid "Invoke the Estimator primitive"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:77
msgid ""
"You can invoke the ``Estimator`` primitive program using the ``run()`` "
"method of the ``Estimator`` instance you just created. The method returns"
" a ``IBMRuntimeJob`` instance which you can use to query for things like "
"job ID and status. The ``result()`` method of the job will return the "
"result."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:79
msgid ""
"You can invoke the ``run()`` method multiple times with the different "
"inputs within a session."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:82
msgid "Specify program inputs"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:84
msgid "The ``Estimator.run()`` method takes in the following arguments:"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:86
msgid ""
"**circuits**: A list of (parameterized) circuits that you want to "
"investigate."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:87
msgid "**observables**: A list of observables to measure the expectation values."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:88
msgid "**parameter_values**: An optional list of concrete parameters to be bound."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:89
msgid "**kwargs**: Additional options to overwrite the default values."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:91
msgid ""
"You can find more details in `the Estimator API reference "
"<https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.Estimator.html>`__."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:94
msgid "Run the job & print results"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:96
msgid ""
"Run the job, specifying your previously defined inputs and options. Use "
"``circuits``, ``observables``, and ``parameter_values`` to use a specific"
" parameter and observable with the specified circuit."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:98
msgid ""
"For example, this line ``psi1_H23_result = estimator.run(circuits=[psi1, "
"psi1], observables=[H2, H3], parameter_values=[theta1]*2).result()`` "
"specifies the following:"
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:100
msgid ""
"Return the value for using observable ``H2`` and parameter ``theta1`` "
"with the circuit ``psi1``."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:101
msgid ""
"Return the value for using observable ``H3`` and parameter ``theta1`` "
"with the circuit ``psi1``."
msgstr ""

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:205
msgid ""
"The results align with the parameter - circuit - observable tuples "
"specified previously. For example, the first result: "
"``EstimatorResult(values=array([1.5285]), metadata=[{'variance': "
"9.33715875, 'shots': 4000}])`` is the output of the parameter labeled "
"``theta1`` and observable ``H1`` being sent to the first circuit."
msgstr ""

