# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Qiskit Development Team
# This file is distributed under the same license as the Qiskit Runtime IBM
# Client package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit Runtime IBM Client \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-29 14:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../migrate/migrate-update-parm.rst:2
msgid "Parametrized circuits with primitives"
msgstr ""

#: ../../migrate/migrate-update-parm.rst:5
msgid ""
"Parametrized circuits are a commonly used tool for quantum algorithm "
"design. Because `backend.run()` did not accept parametrized circuits, the"
" parameter binding step had to be integrated in the algorithm workflow. "
"The primitives can perform the parameter binding step internally, which "
"results in a simplification of the algorithm-side logic."
msgstr ""

#: ../../migrate/migrate-update-parm.rst:8
msgid ""
"The following example summarizes the new workflow for managing "
"parametrized circuits."
msgstr ""

#: ../../migrate/migrate-update-parm.rst:11
msgid "Example"
msgstr ""

#: ../../migrate/migrate-update-parm.rst:12
msgid "Let's define a parametrized circuit:"
msgstr ""

#: ../../migrate/migrate-update-parm.rst:38
msgid "We want to assign the following parameter values to the circuit:"
msgstr ""

#: ../../migrate/migrate-update-parm.rst:47
msgid "Legacy"
msgstr ""

#: ../../migrate/migrate-update-parm.rst:48
msgid ""
"Previously, the parameter values had to be bound to their respective "
"circuit parameters before calling `backend.run()`."
msgstr ""

#: ../../migrate/migrate-update-parm.rst:63
msgid "Primitives"
msgstr ""

#: ../../migrate/migrate-update-parm.rst:64
msgid ""
"Now, the primitives take in parametrized circuits directly, together with"
" the parameter values, and the parameter assignment operation can be "
"performed more efficiently on the server side of the primitive."
msgstr ""

#: ../../migrate/migrate-update-parm.rst:66
msgid ""
"This feature is particularly interesting when working with iterative "
"algorithms because the parametrized circuit remains unchanged between "
"calls while the parameter values change. The primitives can transpile "
"once and then cache the unbound circuit, using classical resources more "
"efficiently. Moreover, only the updated parameters are transferred to the"
" cloud, saving additional bandwidth."
msgstr ""

