# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Qiskit Development Team
# This file is distributed under the same license as the Qiskit Runtime IBM
# Client package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit Runtime IBM Client \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-10 19:51+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../migrate/migrate-sampler.rst:2
msgid "Circuit sampling in an algorithm"
msgstr ""

#: ../../migrate/migrate-sampler.rst:4
msgid ""
"The Sampler primitive is used to design an algorithm that samples "
"circuits and extracts probability distributions."
msgstr ""

#: ../../migrate/migrate-sampler.rst:7
msgid "Background"
msgstr ""

#: ../../migrate/migrate-sampler.rst:28
msgid ""
"The role of the ``Sampler`` primitive is two-fold: it acts as an **entry "
"point** to quantum devices or simulators, replacing ``backend.run()``. "
"Additionally, it is an **algorithmic abstraction** to extract probability"
" distributions from measurement counts."
msgstr ""

#: ../../migrate/migrate-sampler.rst:31
msgid ""
"Both ``Sampler`` and  ``backend.run()`` take in circuits as inputs. The "
"main difference is the format of the output: ``backend.run()`` outputs "
"**counts**, while ``Sampler`` processes those counts and outputs the "
"**quasi-probability distribution** associated with them."
msgstr ""

#: ../../migrate/migrate-sampler.rst:38
msgid ""
"**Backend.run() model:** In this model, you used the ``qiskit-ibmq-"
"provider`` (now migrated to ``qiskit-ibm-provider``) module to access "
"real backends and remote simulators. To run **local** simulations, you "
"could import a specific backend from ``qiskit-aer``. All of them followed"
" the ``backend.run()`` interface."
msgstr ""

#: ../../migrate/migrate-sampler.rst:88
msgid ""
"**Primitives model:** Access real backends and remote simulators through "
"the `qiskit-ibm-runtime` **primitives** (`Sampler` and `Estimator`). To "
"run **local** simulations, import specific `local` primitives from "
"|qiskit_aer.primitives|_ and |qiskit.primitives|_. All of them follow the"
" |BaseSampler|_ and |BaseEstimator|_ interfaces, but **only the Runtime "
"primitives offer access to the Runtime service, sessions, and built-in "
"error mitigation**."
msgstr ""

#: ../../migrate/migrate-sampler.rst:142
msgid ""
"Next, we will show an end-to-end example of sampling a circuit: first, "
"with ``backend.run()``, then by using the ``Sampler``."
msgstr ""

#: ../../migrate/migrate-sampler.rst:145
msgid "End-to-end example"
msgstr ""

#: ../../migrate/migrate-sampler.rst:149
msgid "1. Problem definition"
msgstr ""

#: ../../migrate/migrate-sampler.rst:151
msgid ""
"We want to find the probability (or quasi-probability) distribution "
"associated with a quantum state:"
msgstr ""

#: ../../migrate/migrate-sampler.rst:155
msgid ""
"Important: If you want to use the ``Sampler`` primitive, the circuit "
"**must contain measurements**."
msgstr ""

#: ../../migrate/migrate-sampler.rst:167
msgid "2. Calculate probability distribution on a real device or cloud simulator"
msgstr ""

#: ../../migrate/migrate-sampler.rst:171
msgid "2.a. [Legacy] Use ``backend.run()``"
msgstr ""

#: ../../migrate/migrate-sampler.rst:173
msgid "The required steps to reach our goal with ``backend.run()`` are:"
msgstr ""

#: ../../migrate/migrate-sampler.rst:175
msgid "Run circuits"
msgstr ""

#: ../../migrate/migrate-sampler.rst:176
msgid "Get counts from the result object"
msgstr ""

#: ../../migrate/migrate-sampler.rst:177
msgid "Use the counts and shots to calculate the probability distribution"
msgstr ""

#: ../../migrate/migrate-sampler.rst:184
msgid ""
"First, we run the circuit in a cloud simulator and output the result "
"object:"
msgstr ""

#: ../../migrate/migrate-sampler.rst:188 ../../migrate/migrate-sampler.rst:249
msgid ""
"Replace ``ibmq_qasm_simulator`` with your device name to see the complete"
" workflow for a real device."
msgstr ""

#: ../../migrate/migrate-sampler.rst:223
msgid "Now we get the probability distribution from the output:"
msgstr ""

#: ../../migrate/migrate-sampler.rst:241
msgid "2.b. [New] Use the ``Sampler`` Runtime primitive"
msgstr ""

#: ../../migrate/migrate-sampler.rst:243
msgid ""
"While the user-side syntax of the ``Sampler`` is very similar to  "
"``backend.run()``, notice that the workflow is now simplified, as the "
"quasi-probability distribution is returned **directly** (no need to "
"perform post-processing), together with some key metadata."
msgstr ""

#: ../../migrate/migrate-sampler.rst:275
msgid ""
"Be careful with the output format. With ``Sampler``, the states are no "
"longer represented by bit strings, for example, ``\"11\"``, but by "
"integers, for example, ``3``. To convert the ``Sampler`` output to bit "
"strings, you can use the |QuasiDistribution.binary_probabilities|_ "
"method, as shown below."
msgstr ""

#: ../../migrate/migrate-sampler.rst:287
msgid ""
"The ``Sampler`` Runtime primitive offers several features and tuning "
"options that do not have a legacy alternative to migrate from, but can "
"help improve your performance and results. For more information, refer to"
" the following:"
msgstr ""

#: ../../migrate/migrate-sampler.rst:290
msgid ""
"`Error mitigation tutorial "
"<https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials"
"/Error-Suppression-and-Error-Mitigation.html>`_"
msgstr ""

#: ../../migrate/migrate-sampler.rst:291
msgid ""
"`Setting execution options topic "
"<https://qiskit.org/documentation/partners/qiskit_ibm_runtime/how_to/options.html>`_"
msgstr ""

#: ../../migrate/migrate-sampler.rst:292
msgid ""
"`How to run a session topic "
"<https://qiskit.org/documentation/partners/qiskit_ibm_runtime/how_to/run_session.html>`_"
msgstr ""

#: ../../migrate/migrate-sampler.rst:296
msgid "3. Other execution alternatives (non-Runtime)"
msgstr ""

#: ../../migrate/migrate-sampler.rst:298
msgid ""
"The following migration paths use non-Runtime primitives to use local "
"simulation to test an algorithm. Let's assume that we want to use a local"
" state vector simulation to solve the problem defined above."
msgstr ""

#: ../../migrate/migrate-sampler.rst:301
msgid "3.a. [Legacy] Use the Qiskit Aer simulator"
msgstr ""

#: ../../migrate/migrate-sampler.rst:335
msgid "Now let's get the probability distribution from the output:"
msgstr ""

#: ../../migrate/migrate-sampler.rst:352
msgid "3.b. [New] Use the Reference ``Sampler`` or Aer ``Sampler`` primitive"
msgstr ""

#: ../../migrate/migrate-sampler.rst:354
msgid ""
"The Reference ``Sampler`` lets you perform an exact or a shot-based noisy"
" simulation based on the ``Statevector`` class in the "
"``qiskit.quantum_info`` module."
msgstr ""

#: ../../migrate/migrate-sampler.rst:375
msgid ""
"If shots are specified, this primitive outputs a shot-based simulation "
"(no longer exact):"
msgstr ""

#: ../../migrate/migrate-sampler.rst:394
msgid ""
"You can still access the Aer simulator through its dedicated ``Sampler``."
" This can be handy for performing simulations with noise models. In this "
"example, the simulation method has been updated to match the result from "
"3.a."
msgstr ""

#: ../../migrate/migrate-sampler.rst:428
msgid ""
"For information, see `Noisy simulators in Qiskit Runtime "
"<https://qiskit.org/documentation/partners/qiskit_ibm_runtime/how_to/noisy_simulators.html>`_."
msgstr ""

