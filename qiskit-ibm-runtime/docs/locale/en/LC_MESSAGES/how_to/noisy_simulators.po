# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Qiskit Development Team
# This file is distributed under the same license as the Qiskit Runtime IBM
# Client package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit Runtime IBM Client \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-13 17:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../how_to/noisy_simulators.rst:2
msgid "Noisy simulators in Qiskit Runtime"
msgstr ""

#: ../../how_to/noisy_simulators.rst:4
msgid ""
"This notebook shows how to set up ``ibmq_qasm_simulator`` and map a basic"
" noise model for an IBM Quantum hardware device in **Qiskit Runtime**, "
"and use this noise model to perform noisy simulations of "
"``QuantumCircuits`` using ``Sampler`` and ``Estimator`` to study the "
"effects of errors which occur on real devices."
msgstr ""

#: ../../how_to/noisy_simulators.rst:11
msgid "Set up your local development environment"
msgstr ""

#: ../../how_to/noisy_simulators.rst:13
msgid ""
"This tutorial requires a Qiskit Runtime service instance to be setup. If "
"you haven’t done so already, follow `these steps "
"<https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__"
" to set one up."
msgstr ""

#: ../../how_to/noisy_simulators.rst:26
msgid "Preparing the environment"
msgstr ""

#: ../../how_to/noisy_simulators.rst:28
msgid ""
"To demonstrate the routine, we shall proceed with running an example "
"routine. One of the major benefits of using primitives is simplification "
"of binding multiple parameters in parameterized circuits. To check this, "
"here is an example circuit with a controlled `P-gate "
"<https://qiskit.org/documentation/stubs/qiskit.circuit.library.PhaseGate.html>`__"
" as implemented in the following code. Here, we parametrise the "
"``P-gate`` with a rotation parameter ``theta``. To learn how to create "
"circuits and bind parameters to them by using Qiskit, see the `Circuit "
"Basics "
"<https://qiskit.org/documentation/tutorials/circuits/01_circuit_basics.html>`__"
" and `Advanced Circuits "
"<https://qiskit.org/documentation/tutorials/circuits_advanced/01_advanced_circuits.html"
"#Parameterized-circuits>`__ in Qiskit documentation."
msgstr ""

#: ../../how_to/noisy_simulators.rst:64
msgid ""
"The circuit shown by the previous cell is parameterized with the "
"eigenvalue being kicked back into qubit 0 to be measured. The amount of "
"kickback will be determined by the parameter theta. Now in the following "
"cell, we shall define our parameters for our circuit as a list. The "
"parameters here will be from :math:`0` to :math:`2\\pi` divided over 50 "
"evenly spaced points."
msgstr ""

#: ../../how_to/noisy_simulators.rst:80
msgid "Running on the ideal simulator"
msgstr ""

#: ../../how_to/noisy_simulators.rst:83
msgid "Set the backend and options to use"
msgstr ""

#: ../../how_to/noisy_simulators.rst:85
msgid ""
"First we shall demonstrate a run using an ideal case without any "
"``noise_model``, ``optimization_level`` or ``resilience_level`` for both "
"Sampler and Estimator. We shall proceed to setup the options in the "
"following code:"
msgstr ""

#: ../../how_to/noisy_simulators.rst:103
msgid "Run the circuits on Sampler"
msgstr ""

#: ../../how_to/noisy_simulators.rst:105
msgid ""
"We shall now sample the circuit to get the result probability "
"distribution using the `Sampler primitive "
"<https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.Sampler.html>`__"
" to do the same. To learn how to use the ``Sampler`` primitive and how to"
" get started using Qiskit Runtime Sessions, you can check this tutorial: "
"`Get started with the Sampler primitive "
"<https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials"
"/how-to-getting-started-with-sampler.html>`__."
msgstr ""

#: ../../how_to/noisy_simulators.rst:150
msgid "Run the circuits on Estimator"
msgstr ""

#: ../../how_to/noisy_simulators.rst:152
msgid ""
"To learn how to start a session for Estimator, you may check this "
"tutorial: `Get started with the Estimator primitive "
"<https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials"
"/how-to-getting-started-with-estimator.html>`__."
msgstr ""

#: ../../how_to/noisy_simulators.rst:156
msgid ""
"The Estimator will bind single-qubit rotations to get Hamiltonians before"
" it returns expectation values of quantum operators. Therefore, the "
"circuit doesn’t require any measurements. Currently the circuit ``qc`` "
"has measurements so we will remove these with "
"``remove_final_measurements``."
msgstr ""

#: ../../how_to/noisy_simulators.rst:187
msgid ""
"With this observable, the expectation value is calculated by the "
"following equation."
msgstr ""

#: ../../how_to/noisy_simulators.rst:190
msgid ""
"\\langle ZZ\\rangle =\\langle \\psi | ZZ | \\psi\\rangle=\\langle "
"\\psi|(|0\\rangle\\langle 0| -|1\\rangle\\langle "
"1|)\\otimes(|0\\rangle\\langle 0| - |1\\rangle\\langle 1|) |\\psi\\rangle"
" =|\\langle 00|\\psi\\rangle|^2 - |\\langle 01 | \\psi\\rangle|^2 - "
"|\\langle 10 | \\psi\\rangle|^2 + |\\langle 11|\\psi\\rangle|^2"
msgstr ""

#: ../../how_to/noisy_simulators.rst:194
msgid "The next cell will implement this as shown."
msgstr ""

#: ../../how_to/noisy_simulators.rst:231
msgid "Running a noisy simulation"
msgstr ""

#: ../../how_to/noisy_simulators.rst:233
msgid ""
"Now we’ll setup our simulator to run a noisy simulation rather than the "
"ideal one. We can pass a custom ``noise_model`` to the simulator on "
"Runtime by specifying it in the ``Options`` parameter. Here we will try "
"to mimic a real backend and map on the ``noise_model`` from a "
"``FakeBackend`` class. The noise model can be extracted from the "
"``FakeBackend`` and passed as a ``simulator`` parameter in options. If "
"you want to know more about ``fake_provider``, check `Fake Provider "
"<https://qiskit.org/documentation/apidoc/providers_fake_provider.html>`__"
" in Qiskit documentation."
msgstr ""

#: ../../how_to/noisy_simulators.rst:243
msgid ""
"Since we are trying to mimic a real backend, we can also pass in the "
"``coupling_map`` that the backend topology has and the ``basis_gates`` "
"that the backend supports to have a more realistic noisy simulation."
msgstr ""

#: ../../how_to/noisy_simulators.rst:270
msgid ""
"The ``ibmq_qasm_simulator`` allows for the activation of the "
"``resilience_levels`` offered by the Qiskit Runtime Service, and use of "
"these levels on simulators is best demonstrated using the noisy "
"simulation as we have described previously."
msgstr ""

#: ../../how_to/noisy_simulators.rst:275
msgid ""
"To see the comparison, we shall define two set of ``Options``. The "
"``ibmq_qasm_simulator`` allows for the activation of the resilience "
"levels offered by Qiskit Runtime, and the use of these levels on "
"simulators is best demonstrated using the noisy simulation that we have "
"built. Here, ``options`` is set to\\ ``resilience level`` = ``0`` to "
"represent a normal run without error mitigation, and ``options with em`` "
"is set to ``resilience level`` = ``1`` to represent a run with error "
"mitigation enabled."
msgstr ""

#: ../../how_to/noisy_simulators.rst:299
msgid ""
"When you set the ``resilience_level`` to 1, M3 is activated in Sampler. "
"All available resilience level configurations can be found `here "
"<https://qiskit.org/documentation/partners/qiskit_ibm_runtime/how_to"
"/error-mitigation.html>`__."
msgstr ""

#: ../../how_to/noisy_simulators.rst:346
msgid "``T-REx`` is triggered in Estimator when the resilience level is set to 1."
msgstr ""

#: ../../how_to/noisy_simulators.rst:395
msgid ""
"Resilience levels are currently in beta so sampling overhead and solution"
" quality will vary from circuit to circuit. New features, advanced "
"options and management tools will be released on a rolling basis. You can"
" also play around with higher levels of resilience and explore additional"
" options offered by them. If you want to learn more about activating "
"features like *Digital-ZNE*, *PEC* in addition to *M3* and *T-REx* as "
"shown in the previous examples, check out this tutorial: `Error "
"suppression and error mitigation with Qiskit Runtime "
"<https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials"
"/Error-Suppression-and-Error-Mitigation.html>`__."
msgstr ""

