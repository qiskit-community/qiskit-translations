# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Qiskit Development Team
# This file is distributed under the same license as the Qiskit Runtime IBM
# Client package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit Runtime IBM Client \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-08 14:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../how_to/error-mitigation.rst:2
msgid "Configure error mitigation"
msgstr ""

#: ../../how_to/error-mitigation.rst:4
msgid ""
"Error mitigation techniques allow users to mitigate circuit errors by "
"modeling the device noise at the time of execution. This typically "
"results in quantum pre-processing overhead related to model training and "
"classical post-processing overhead to mitigate errors in the raw results "
"by using the generated model."
msgstr ""

#: ../../how_to/error-mitigation.rst:6
msgid ""
"The error mitigation techniques built in to primitives are advanced "
"resilience options.   To specify these options, use the "
"`resilience_level` option when submitting your job."
msgstr ""

#: ../../how_to/error-mitigation.rst:8
msgid ""
"The resilience level specifies how much resilience to build against "
"errors. Higher levels generate more accurate results, at the expense of "
"longer processing times. Resilience levels can be used to configure the "
"cost/accuracy trade-off when applying error mitigation to your primitive "
"query. Error mitigation reduces errors (bias) in results by processing "
"the outputs from a collection, or ensemble, of related circuits. The "
"degree of error reduction depends on the method applied. The resilience "
"level abstracts the detailed choice of error mitigation method to allow "
"users to reason about the cost/accuracy trade that is appropriate to "
"their application."
msgstr ""

#: ../../how_to/error-mitigation.rst:10
msgid ""
"Given this, each level corresponds to a method or methods with increasing"
" level of quantum sampling overhead to enable you experiment with "
"different time-accuracy tradeoffs.  The following table shows you which "
"levels and corresponding methods are available for each of the "
"primitives."
msgstr ""

#: ../../how_to/error-mitigation.rst:13
msgid ""
"Error mitigation is task specific so the techniques you are able to apply"
" vary based whether you are sampling a distribution or generating "
"expectation values."
msgstr ""

#: ../../how_to/error-mitigation.rst:16
msgid "Resilience Level"
msgstr ""

#: ../../how_to/error-mitigation.rst:16
msgid "Definition"
msgstr ""

#: ../../how_to/error-mitigation.rst:16
msgid "Estimator"
msgstr ""

#: ../../how_to/error-mitigation.rst:16
msgid "Sampler"
msgstr ""

#: ../../how_to/error-mitigation.rst:18
msgid "0"
msgstr ""

#: ../../how_to/error-mitigation.rst:18
msgid "No mitigation"
msgstr ""

#: ../../how_to/error-mitigation.rst:18
msgid "None"
msgstr ""

#: ../../how_to/error-mitigation.rst:20
msgid "1 [Default]"
msgstr ""

#: ../../how_to/error-mitigation.rst:20
msgid "Minimal mitigation costs: Mitigate error associated with readout errors"
msgstr ""

#: ../../how_to/error-mitigation.rst:20
msgid "Twirled Readout Error eXtinction (:ref:`TREX <TREX>`)"
msgstr ""

#: ../../how_to/error-mitigation.rst:20
msgid "M3"
msgstr ""

#: ../../how_to/error-mitigation.rst:23
msgid "2"
msgstr ""

#: ../../how_to/error-mitigation.rst:23
msgid ""
"Medium mitigation costs. Typically reduces bias in estimators, but is not"
" guaranteed to be zero bias."
msgstr ""

#: ../../how_to/error-mitigation.rst:23
msgid "Zero Noise Extrapolation (:ref:`ZNE <ZNE>`)"
msgstr ""

#: ../../how_to/error-mitigation.rst:23 ../../how_to/error-mitigation.rst:26
msgid "---"
msgstr ""

#: ../../how_to/error-mitigation.rst:26
msgid "3"
msgstr ""

#: ../../how_to/error-mitigation.rst:26
msgid ""
"Heavy mitigation with layer sampling. Theoretically expected to deliver "
"zero bias estimators."
msgstr ""

#: ../../how_to/error-mitigation.rst:26
msgid "Probabilistic Error Cancellation (:ref:`PEC <PEC>`)"
msgstr ""

#: ../../how_to/error-mitigation.rst:31
msgid ""
"Resilience levels are currently in beta so sampling overhead and solution"
" quality will vary from circuit to circuit. New features, advanced "
"options and management tools will be released on a rolling basis. "
"Specific error mitigation methods are not guaranteed to be applied at "
"each resilience level."
msgstr ""

#: ../../how_to/error-mitigation.rst:34
msgid "Configure the Estimator with resilience levels"
msgstr ""

#: ../../how_to/error-mitigation.rst:41
msgid "No error mitigation is applied to the user program."
msgstr ""

#: ../../how_to/error-mitigation.rst:54
msgid ""
"Level 1 applies error mitigation methods that particularly address "
"readout errors. In the Estimator, we apply a model-free technique known "
"as Twirled Readout Error eXtinction (TREX). It reduces measurement error "
"by diagonalizing the noise channel associated with measurement by "
"randomly flipping qubits via X gates immediately prior to measurement, "
"and flipping the corresponding measured bit if an X gate was applied. A "
"rescaling term from the diagonal noise channel is learned by benchmarking"
" random circuits initialized in the zero state. This allows the service "
"to remove bias from expectation values that result from readout noise. "
"This approach is described further in `Model-free readout-error "
"mitigation for quantum expectation values "
"<https://arxiv.org/abs/2012.09738>`__."
msgstr ""

#: ../../how_to/error-mitigation.rst:67
msgid ""
"Level 2 leverages Zero Noise Extrapolation method (ZNE) which computes an"
" expectation value of the observable for different noise factors "
"(amplification stage) and then uses the measured expectation values to "
"infer the ideal expectation value at the zero-noise limit (extrapolation "
"stage). This approach tends to reduce errors in expectation values, but "
"is not guaranteed to produce an unbiased result."
msgstr ""

#: ../../how_to/error-mitigation.rst:72
msgid ""
"This image shows a graph that compares the noise amplification factor to "
"expectation values."
msgstr ""

#: ../../how_to/error-mitigation.rst:72
msgid "Illustration of the ZNE method"
msgstr ""

#: ../../how_to/error-mitigation.rst:74 ../../how_to/error-mitigation.rst:96
msgid ""
"The overhead of this method scales with the number of noise factors. The "
"default settings sample the expectation value at three noise factors, "
"leading to a roughly 3x overhead when employing this resilience level."
msgstr ""

#: ../../how_to/error-mitigation.rst:87
msgid ""
"Level 3 enables the Probabilistic Error Cancellation (PEC) method. This "
"approach mitigates error by learning and inverting a sparse noise model "
"that is able to capture correlated noise. PEC returns an unbiased "
"estimate of an expectation value so long as learned noise model "
"faithfully represents the actual noise model at the time of mitigation.  "
"In practice, the experimental procedure for learning the noise model has "
"ambiguities due to certain error terms that cannot be independently "
"distinguished. These are resolved by a symmetry assumption, which "
"depending on the true underlying noise may lead a biased estimate of the "
"mitigated expectation values due to using an imperfect noise model."
msgstr ""

#: ../../how_to/error-mitigation.rst:89
msgid ""
"The Qiskit Runtime primitive implementation of PEC specifically addresses"
" noise in self-inverse two-qubit gates, so it first *stratifies* each "
"input circuit into an alternating sequence of simultaneous 1-qubit gates "
"followed by a layer of simultaneous 2-qubit gates. Then it learns the "
"noise model associated with each unique 2-qubit gate layer."
msgstr ""

#: ../../how_to/error-mitigation.rst:94
msgid "This image shows a stratified circuit."
msgstr ""

#: ../../how_to/error-mitigation.rst:94
msgid ""
"This is an example of a `stratified` circuit, where the layers of two-"
"qubit gates are labeled layer 1 through n. Note that each :math:`U_l` is "
"composed of two-qubit gates on the native connectivity graph of the "
"quantum processor. The open boxes represent arbitrary single-qubit gates."
msgstr ""

#: ../../how_to/error-mitigation.rst:98
msgid ""
"PEC uses a quasi-probability method to mimic the effect of inverting the "
"learned noise. This requires sampling from a randomized circuit family "
"associated with the userâ€™s original circuit. Applying PEC will increase "
"the variability of the returned expectation value estimates unless the "
"number of samples per circuit is also increased for both input and "
"characterization circuits. The amount of samples required to counter this"
" variability scales exponentially with the noise strength of the "
"mitigated circuit."
msgstr ""

#: ../../how_to/error-mitigation.rst:100
msgid "How this works:"
msgstr ""

#: ../../how_to/error-mitigation.rst:102
msgid ""
"When estimating an unmitigated Pauli observable :math:`\\langle "
"P\\rangle` the standard error in the estimated expectation value is given"
" by :math:`\\frac{1}{\\sqrt{N_{\\mbox{shots}}}}\\left(1- \\langle "
"P\\rangle^2\\right)` where :math:`N_{\\mbox{shots}}` is the number of "
"shots used to estimate :math:`\\langle P\\rangle`. When applying PEC "
"mitigation, the standard error becomes "
":math:`\\sqrt{\\frac{S}{N_{\\mbox{samples}}}}\\left(1- \\langle "
"P\\rangle^2\\right)` where :math:`N_{\\mbox{samples}}` is the number of "
"PEC samples."
msgstr ""

#: ../../how_to/error-mitigation.rst:104
msgid ""
"The sampling overhead scales exponentially with a parameter that "
"characterizes the collective noise of the input circuit. As the Qiskit "
"Runtime primitive learns the noise of your circuit, it will return "
"metadata about the sampling overhead associated with that particular "
"layer.  Let's label the overhead of layer :math:`l` as :math:`\\gamma_l`."
" Then the total sampling overhead for mitigating your circuit is the "
"product of all the layer overheads, that is:"
msgstr ""

#: ../../how_to/error-mitigation.rst:106
msgid ":math:`S = \\prod_l \\gamma_l`"
msgstr ""

#: ../../how_to/error-mitigation.rst:108
msgid ""
"When the Estimator completes the model-learning phase of the primitive "
"query, it will return metadata about the total sampling overhead for "
"circuit."
msgstr ""

#: ../../how_to/error-mitigation.rst:110
msgid ""
"Depending on the precision required by your application, you will need to"
" scale the number of samples accordingly. The plot below illustrates the "
"relationship between estimator error and number of circuit samples for "
"different total sampling overheads."
msgstr ""

#: ../../how_to/error-mitigation.rst:-1
msgid ""
"This image shows that samping overhead goes down as the number of samples"
" increases."
msgstr ""

#: ../../how_to/error-mitigation.rst:115
msgid ""
"Note that the number of samples required to deliver a desired accuracy is"
" not known before the primitive query because the mitigation scaling "
"factor is discovered during the learning phase of PEC."
msgstr ""

#: ../../how_to/error-mitigation.rst:117
msgid ""
"We recommend starting with short depth circuits to get a feel for the "
"scaling of the sampling overhead of PEC prior to attempting larger "
"problems."
msgstr ""

#: ../../how_to/error-mitigation.rst:124
msgid "Example"
msgstr ""

#: ../../how_to/error-mitigation.rst:126
msgid ""
"The Estimator interface lets users seamlessly work with the variety of "
"error mitigation methods to reduce error in expectation values of "
"observables. Below is an example of leveraging Zero Noise Extrapolation "
"by simply setting ``resilience_level 2``."
msgstr ""

#: ../../how_to/error-mitigation.rst:144
msgid ""
"As you increase the resilience level, you will be able to leverage "
"additional methods to improve the accuracy of your result. However, "
"because the methods become more advanced with each level, they require "
"additional sampling overhead (time) to generate more accurate expectation"
" values."
msgstr ""

#: ../../how_to/error-mitigation.rst:147
msgid "Configure Sampler with resilience levels"
msgstr ""

#: ../../how_to/error-mitigation.rst:150
msgid ""
"The Sampler default resilience setting (level 1) enables readout error "
"mitigation to allow users to generate mitigated quasi-probability "
"distributions."
msgstr ""

#: ../../how_to/error-mitigation.rst:157
msgid ""
"Level 1 leverages matrix-free measurement mitigation (M3) routine to "
"mitigate readout error. M3 works in a reduced subspace defined by the "
"noisy input bitstrings that are to be corrected. Because the number of "
"unique bitstrings can be much smaller than the dimensionality of the full"
" multi-qubit Hilbert space, the resulting linear system of equations is "
"nominally much easier to solve."
msgstr ""

#: ../../how_to/error-mitigation.rst:162
msgid "This image illustrates the M3 routine."
msgstr ""

#: ../../how_to/error-mitigation.rst:162
msgid "Illustration of the M3 method"
msgstr ""

#: ../../how_to/error-mitigation.rst:181
msgid "Advanced resilience options"
msgstr ""

#: ../../how_to/error-mitigation.rst:183
msgid ""
"You can tune advanced options to configure your resilience strategy "
"further. These methods can be used alongside resilience levels where you "
"change the specific options of interest and let your previously set "
"resilience level manage the rest."
msgstr ""

#: ../../how_to/error-mitigation.rst:185
msgid ""
"As a part of the beta release of the resilience options, users will be "
"able configure ZNE by using the following advanced options below. We will"
" soon add options to tune other resilience levels that include PEC."
msgstr ""

#: ../../how_to/error-mitigation.rst:188
msgid "Options"
msgstr ""

#: ../../how_to/error-mitigation.rst:188
msgid "Inputs"
msgstr ""

#: ../../how_to/error-mitigation.rst:188
msgid "Description"
msgstr ""

#: ../../how_to/error-mitigation.rst:190
msgid "options.resilience.noise_amplifier(Optional[str])"
msgstr ""

#: ../../how_to/error-mitigation.rst:192
msgid "select your amplification strategy"
msgstr ""

#: ../../how_to/error-mitigation.rst:190
msgid "``TwoQubitAmplifier`` [Default]"
msgstr ""

#: ../../how_to/error-mitigation.rst:190
msgid "Amplifies noise of all two qubit gates by performing local gate folding."
msgstr ""

#: ../../how_to/error-mitigation.rst:193
msgid "``CxAmplifier``"
msgstr ""

#: ../../how_to/error-mitigation.rst:193
msgid "Amplifies noise of all CNOT gates by performing local gate folding."
msgstr ""

#: ../../how_to/error-mitigation.rst:196
msgid "``LocalFoldingAmplifier``"
msgstr ""

#: ../../how_to/error-mitigation.rst:196
msgid "Amplifies noise of all gates by performing local gate folding."
msgstr ""

#: ../../how_to/error-mitigation.rst:199
msgid "``GlobalFoldingAmplifier``"
msgstr ""

#: ../../how_to/error-mitigation.rst:199
msgid ""
"Amplifies noise of the input circuit by performing global folding of the "
"entire input circuit."
msgstr ""

#: ../../how_to/error-mitigation.rst:202
msgid "options.resilience.noise_factors((Optional[Sequence[float]])"
msgstr ""

#: ../../how_to/error-mitigation.rst:202
msgid "(1, 3, 5) [Default]"
msgstr ""

#: ../../how_to/error-mitigation.rst:202
msgid ""
"Noise amplification factors, where `1` represents the baseline noise. "
"They all need to be greater than or equal to the baseline."
msgstr ""

#: ../../how_to/error-mitigation.rst:206
msgid "options.resilience.extrapolator(Optional[str])"
msgstr ""

#: ../../how_to/error-mitigation.rst:206
msgid "``LinearExtrapolator`` [Default]"
msgstr ""

#: ../../how_to/error-mitigation.rst:206
msgid "Polynomial extrapolation of degree one."
msgstr ""

#: ../../how_to/error-mitigation.rst:208
msgid "``QuadraticExtrapolator``"
msgstr ""

#: ../../how_to/error-mitigation.rst:208
msgid "Polynomial extrapolation of degree two and lower."
msgstr ""

#: ../../how_to/error-mitigation.rst:210
msgid "``CubicExtrapolator``"
msgstr ""

#: ../../how_to/error-mitigation.rst:210
msgid "Polynomial extrapolation of degree three and lower."
msgstr ""

#: ../../how_to/error-mitigation.rst:212
msgid "``QuarticExtrapolator``"
msgstr ""

#: ../../how_to/error-mitigation.rst:212
msgid "Polynomial extrapolation of degree four and lower."
msgstr ""

#: ../../how_to/error-mitigation.rst:216
msgid "Example of adding ``resilience_options`` into your estimator session"
msgstr ""

