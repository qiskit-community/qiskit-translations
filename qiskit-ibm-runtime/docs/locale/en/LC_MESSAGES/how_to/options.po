# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Qiskit Development Team
# This file is distributed under the same license as the Qiskit Runtime IBM
# Client package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit Runtime IBM Client \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-08 14:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../how_to/options.rst:2
msgid "Configure primitive program options"
msgstr ""

#: ../../how_to/options.rst:4
msgid ""
"When calling the primitives, you can pass in options, as shown in the "
"line ``estimator = Estimator(options=options)`` in the following code "
"example:"
msgstr ""

#: ../../how_to/options.rst:16
msgid ""
"The most commonly used options are for error suppression and mitigation, "
"which are described in this topic. For a full list of available options, "
"see the `Options API reference "
"<https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.options.Options.html#qiskit_ibm_runtime.options.Options>`__."
msgstr ""

#: ../../how_to/options.rst:19
msgid "Overview of error suppression and mitigation"
msgstr ""

#: ../../how_to/options.rst:21
msgid ""
"No computing platform is perfect, and because quantum computers are such "
"new and complex technology, we have to find new ways of dealing with "
"these imperfections.  There are several possible causes for errors: "
"“noise” - disturbances in the physical environment, and “bit errors”, "
"which cause the qubit's value or phase to change.  IBM builds redundancy "
"into the hardware to ensure that even if some qubits error out, an "
"accurate result is still returned.  However, we can further address "
"errors by using error suppression and error mitigation techniques  These "
"strategies make use of pre- and post-processing to improve the quality of"
" the results produced for the input circuit."
msgstr ""

#: ../../how_to/options.rst:23
msgid ""
"**Error suppression**: Techniques that optimize and transform your "
"circuit at the point of compilation to minimize errors. This is the most "
"basic error handling technique.  Error suppression typically results in "
"some classical pre-processing overhead to your overall runtime."
msgstr ""

#: ../../how_to/options.rst:25
msgid ""
"Primitives let you employ error suppression techniques by setting the "
"optimization level (``optimization_level`` option) and by choosing "
"advanced transpilation options.  See `Configure error suppression <error-"
"suppression.html>`__ for details."
msgstr ""

#: ../../how_to/options.rst:27
msgid ""
"**Error mitigation**: Techniques that allow users to mitigate circuit "
"errors by modeling the device noise at the time of execution. This "
"typically results in quantum pre-processing overhead related to model "
"training, and classical post-processing overhead to mitigate errors in "
"the raw results by using the generated model."
msgstr ""

#: ../../how_to/options.rst:29
msgid ""
"The error mitigation techniques built in to primitives are advanced "
"resilience options.   To specify these options, use the "
"``resilience_level`` when submitting your job.  See `Configure error "
"mitigation <error-mitigation.html>`__ for details."
msgstr ""

