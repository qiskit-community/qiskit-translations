msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-18 21:33+0000\n"
"PO-Revision-Date: 2023-10-18 21:57\n"
"Last-Translator: \n"
"Language: ko\n"
"Language-Team: Korean\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.0\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /main/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/migrate/migrate-estimator.po\n"
"X-Crowdin-File-ID: 9951\n"

#: ../../migrate/migrate-estimator.rst:2
msgid "Calculate expectation values in an algorithm"
msgstr ""

#: ../../migrate/migrate-estimator.rst:4
msgid "The Estimator primitive is used to design an algorithm that calculates expectation values."
msgstr ""

#: ../../migrate/migrate-estimator.rst:7
msgid "Background"
msgstr ""

#: ../../migrate/migrate-estimator.rst:29
msgid "The role of the ``Estimator`` primitive is two-fold: it acts as an **entry point** to quantum devices or simulators, replacing the ``Backend`` interface (commonly referred to as ``backend.run()``). Additionally, it is an **algorithmic abstraction** for expectation value calculations, so you don't have to manually construct the final expectation circuit. This results in a considerable reduction of the code complexity and a more compact algorithm design."
msgstr ""

#: ../../migrate/migrate-estimator.rst:37
msgid "**Backend.run() model:** In this model, you accessed real backends and remote simulators using the ``qiskit-ibmq-provider`` module (now migrated to ``qiskit-ibm-provider``). To run **local** simulations, you could import a specific backend from ``qiskit-aer``. All of them followed the ``backend.run()`` interface."
msgstr ""

#: ../../migrate/migrate-estimator.rst:87
msgid "**Primitives model:** Access real backends and remote simulators through the ``qiskit-ibm-runtime`` **primitives** (``Sampler`` and ``Estimator``). To run **local** simulations, you can import specific `local` primitives from |qiskit_aer.primitives|_ and |qiskit.primitives|_. All of them follow the |BaseSampler|_ and |BaseEstimator|_ interfaces, but **only the Runtime primitives offer access to the Runtime service, sessions, and built-in error mitigation**."
msgstr ""

#: ../../migrate/migrate-estimator.rst:140
msgid "If your code previously calculated expectation values using ``backend.run()``, you most likely used the |qiskit.opflow|_ module to handle operators and state functions. To support this scenario, the following migration example shows how to replace the (|qiskit.opflow|_ & ``backend.run()``) workflow with an ``Estimator``-based workflow."
msgstr ""

#: ../../migrate/migrate-estimator.rst:145
msgid "End-to-end example"
msgstr ""

#: ../../migrate/migrate-estimator.rst:148
msgid "1. Problem definition"
msgstr ""

#: ../../migrate/migrate-estimator.rst:150
msgid "We want to compute the expectation value of a quantum state (circuit) with respect to a certain operator. In this example, we are using the H2 molecule and an arbitrary circuit as the quantum state:"
msgstr ""

#: ../../migrate/migrate-estimator.rst:177
msgid "1.a. [Legacy] Convert problem to ``opflow``"
msgstr ""

#: ../../migrate/migrate-estimator.rst:179
msgid "|qiskit.opflow|_ provided its own classes to represent both operators and quantum states, so the problem defined previously would be wrapped as:"
msgstr ""

#: ../../migrate/migrate-estimator.rst:189
msgid "This step is no longer necessary when using the primitives."
msgstr ""

#: ../../migrate/migrate-estimator.rst:193
msgid "For instructions to migrate from |qiskit.opflow|_, see the `opflow migration guide <qisk.it/opflow_migration>`_ ."
msgstr ""

#: ../../migrate/migrate-estimator.rst:196
msgid "2. Calculate expectation values on real device or cloud simulator"
msgstr ""

#: ../../migrate/migrate-estimator.rst:200
msgid "2.a. [Legacy] Use ``opflow`` & ``backend.run()``"
msgstr ""

#: ../../migrate/migrate-estimator.rst:202
msgid "The legacy workflow required many steps to compute an expectation value:"
msgstr ""

#: ../../migrate/migrate-estimator.rst:207
#: ../../migrate/migrate-estimator.rst:244
msgid "Replace ``ibmq_qasm_simulator`` with your device name to see the complete workflow for a real device."
msgstr ""

#: ../../migrate/migrate-estimator.rst:237
msgid "2.b. [New] Use the ``Estimator`` Runtime primitive"
msgstr ""

#: ../../migrate/migrate-estimator.rst:239
msgid "The ``Estimator`` simplifies the user-side syntax, making it a more convenient tool for algorithm design."
msgstr ""

#: ../../migrate/migrate-estimator.rst:258
msgid "Note that the Estimator returns a list of values, as it can perform batched evaluations."
msgstr ""

#: ../../migrate/migrate-estimator.rst:265
msgid "The ``Estimator`` Runtime primitive offers a series of features and tuning options that do not have a legacy alternative to migrate from, but can help improve your performance and results. For more information, refer to the following:"
msgstr ""

#: ../../migrate/migrate-estimator.rst:268
msgid "`Error mitigation tutorial <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials/Error-Suppression-and-Error-Mitigation.html>`_"
msgstr ""

#: ../../migrate/migrate-estimator.rst:269
msgid "`Setting execution options topic <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/how_to/options.html>`_"
msgstr ""

#: ../../migrate/migrate-estimator.rst:270
msgid "`Primitive execution options API reference <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.options.Options.html#qiskit_ibm_runtime.options.Options>`_"
msgstr ""

#: ../../migrate/migrate-estimator.rst:271
msgid "`How to run a session topic <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/how_to/run_session.html>`_"
msgstr ""

#: ../../migrate/migrate-estimator.rst:275
msgid "3. Other execution alternatives (non-Runtime)"
msgstr ""

#: ../../migrate/migrate-estimator.rst:277
msgid "This section describes how to use non-Runtime primitives to test an algorithm using local simulation.  Let's assume that we want to solve the problem defined previously with a local state vector simulation."
msgstr ""

#: ../../migrate/migrate-estimator.rst:280
msgid "3.a. [Legacy] Using the Qiskit Aer simulator"
msgstr ""

#: ../../migrate/migrate-estimator.rst:309
msgid "3.b. [New] Use the Reference ``Estimator`` or Aer ``Estimator`` primitive"
msgstr ""

#: ../../migrate/migrate-estimator.rst:311
msgid "The Reference ``Estimator`` lets you perform either an exact or a shot-based noisy simulation based on the ``Statevector`` class in the ``qiskit.quantum_info`` module."
msgstr ""

#: ../../migrate/migrate-estimator.rst:330
msgid "You can still access the Aer Simulator through its dedicated ``Estimator``. This can be handy for performing simulations with noise models. In this example, the simulation method has been updated to match the result from 3.a."
msgstr ""

#: ../../migrate/migrate-estimator.rst:347
msgid "For more information about using the Aer primitives, see the `VQE tutorial <https://qiskit.org/documentation/tutorials/algorithms/03_vqe_simulation_with_noise.html>`_ ."
msgstr ""

#: ../../migrate/migrate-estimator.rst:350
msgid "For more information about running noisy simulations with the **Runtime primitives**, see this `topic <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/how_to/noisy_simulators.html>`_."
msgstr ""

