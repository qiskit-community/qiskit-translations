msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-10 16:30+0000\n"
"PO-Revision-Date: 2022-11-10 16:46\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/vqe.po\n"
"X-Crowdin-File-ID: 9832\n"
"Language: ko_KR\n"

#: ../../tutorials/vqe.ipynb:9
msgid "This page was generated from `docs/tutorials/vqe.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/vqe.ipynb`__ 에서 생성되었다."

#: ../../tutorials/vqe.ipynb:9
msgid "VQE"
msgstr "VQE"

#: ../../tutorials/vqe.ipynb:11
msgid "The Variational Quantum Eigensolver (VQE) is a central algorithm in many applications from e.g. quantum chemistry or optimization. This tutorial shows you how to run the VQE as a Qiskit Runtime program. We’ll start off by defining the algorithm settings, such as the Hamiltonian and ansatz, and then run a VQE both locally, on your machine, and remotely, using the Qiskit Runtime."
msgstr "양자 변분 알고리즘(VQE)는 양자 화학이나 최적화와 같은 많은 응용 분야에서 핵심적인 알고리즘이다. 이 튜토리얼에서는 VQE를 Qiskit Runtime 프로그램으로 실행하는 방법을 소개한다. 해밀토니안이나 ansatz와 같은 알고리즘 설정을 정의하는 것으로 시작해, 본인의 장치를 통해 로컬과 Qiskit Runtime을 이용해 원격으로 동시에 VQE를 실행시킬 것이다."

#: ../../tutorials/vqe.ipynb:13
msgid "**Note:** You can find tutorials on solving more comprehensive problems, such as finding the ground state of the lithium hydride molecule, using the VQE (and Qiskit Runtime) within `the tutorials of Qiskit Nature <https://github.com/Qiskit/qiskit-nature/tree/main/docs/tutorials>`__."
msgstr "**참고:** `the tutorials of Qiskit Nature <https://github.com/Qiskit/qiskit-nature/tree/main/docs/tutorials>`__ 에서 VQE(및 Qiskit Runtime)를 사용하여 수소화 리튬 분자의 바닥 상태를 찾는 등의 보다 포괄적인 문제 해결에 대한 튜토리얼을 찾을 수 있다."

#: ../../tutorials/vqe.ipynb:25
msgid "System Hamiltonian"
msgstr "시스템 해밀토니안"

#: ../../tutorials/vqe.ipynb:36
msgid "Let’s start by defining the operator of which we want to determine the ground state. Here we’ll chose a simple diagonal Hamiltonian :math:`\\hat H` acting with Pauli-Z operators on the first two qubits"
msgstr "먼저 바닥 상태를 결정할 연산자를 정의하는 것으로 시작한다. 여기서 처음 두 큐비트에 파울리-Z 연산자와 함께 작용하는 간단한 대각 해밀토니안 :math:`\\hat H` 를 선택할 것이다."

#: ../../tutorials/vqe.ipynb:38
msgid "\\hat H = \\hat Z_0 \\otimes \\hat Z_1."
msgstr "\\hat H = \\hat Z_0 \\otimes \\hat Z_1."

#: ../../tutorials/vqe.ipynb:43
msgid "We can construct this Hamiltonian with Qiskit’s ``opflow`` module:"
msgstr "이 해밀토니안은 Qiskit의 ``opflow`` 모듈로 구성할 수 있다."

#: ../../tutorials/vqe.ipynb:67
msgid "This Hamiltonian has a ground state energy of -1."
msgstr "이 해밀토니안은 -1의 기저 상태 에너지를 가진다."

#: ../../tutorials/vqe.ipynb:89
msgid "Parameterized Ansatz Circuit"
msgstr "매개변수화된 Ansatz 회로"

#: ../../tutorials/vqe.ipynb:100
msgid "Next, we choose a parameterized quantum circuit :math:`\\hat U(\\theta)` to prepare the ansatz wavefunction"
msgstr "다음으로, 매개변수화된 양자 회로 :math:`\\hat U(\\theta)` 를 선택하여 Ansatz 파동함수를 준비한다."

#: ../../tutorials/vqe.ipynb:102
msgid "|\\psi(\\theta)\\rangle = \\hat U(\\theta)|0\\rangle."
msgstr "|\\psi(\\theta)\\rangle = \\hat U(\\theta)|0\\rangle."

#: ../../tutorials/vqe.ipynb:107
msgid "We’ll use the ``EfficientSU2`` circuit from Qiskit’s circuit library, which is a hardware efficient, heuristic ansatz with alternating rotation and entanglement layers."
msgstr "Qiskit의 회로 라이브러리에서 ``EfficientSU2`` 회로를 사용할 것이며, 이 회로 라이브러리는 교차 회전 및 얽힘 레이어가 있는 하드웨어 효율적인(Hardware efficient) 휴리스틱 (heuristic)  Ansatz이다."

#: ../../tutorials/vqe.ipynb:142
msgid "Solve with the VQE"
msgstr "VQE를 사용하여 풀기"

#: ../../tutorials/vqe.ipynb:153
msgid "Now that we have the problem and ansatz specified we can use the Variational Quantum Eigensolver (VQE) to solve for the minimal eigenvalue of our Hamiltonian."
msgstr "이제 문제와 가설이 지정되었으므로,  변분화된 양자 고윳값 해석기(Variational Quantum Eigensolver)를 사용하여 해밀토니안의 최소 고유값을 구할 수 있다."

#: ../../tutorials/vqe.ipynb:155
msgid "The VQE requires a classical optimization routine, along with an initial point, to calculate the parameter updates."
msgstr "VQE는 업데이트되는 매개변수를 계산하기 위해 초기 포인트와 함께 고전적인 최적화 루틴을 필요로 한다."

#: ../../tutorials/vqe.ipynb:182
msgid "To access intermediate information we can pass a callback into the VQE. The callback is given the current number of function evaluations, the current parameters, function values and standard deviation in the expectation evaluation."
msgstr "중간 정보에 접근하기 위해서 VQE에 콜백을 전달할 수 있다. 콜백에는 현재 함수의 평가 수와 매개변수, 기댓값 평가에 있는 함수값 및 표준 편차가 주어진다."

#: ../../tutorials/vqe.ipynb:211
msgid "Local VQE"
msgstr "로컬 VQE"

#: ../../tutorials/vqe.ipynb:213
msgid "Before running the Qiskit Runtime VQE program, let’s first simulate this system locally using Qiskit’s ``VQE`` class."
msgstr "Qiskit Runtime VQE 프로그램을 실행하기 전에 먼저 Qiskit의 ``VQE`` 클래스를 이용해 이 시스템을 로컬에서 시뮬레이션 해보려고 한다."

#: ../../tutorials/vqe.ipynb:291
msgid "With the information from the callback, we can for instance compute the average of the estimation errors in the expectation evaluations. For an exact (statevector) simulation this would be 0, but for a shot-based readout as we have on real hardware, this will be a small finite error."
msgstr "예를 들어 콜백의 정보를 사용하여 기댓값 평가에서 추정 오차를 계산할 수 있다. 정확한 (상태벡터) 시뮬레이션의 경우에 이는 0이 되지만, 실제 하드웨어에서 사용하는 샷 기반 해독의 경우 이는 작은 유한한 오류가 될 것이다."

#: ../../tutorials/vqe.ipynb:337
msgid "Qiskit Runtime VQE"
msgstr "Qiskit 런타임 VQE"

#: ../../tutorials/vqe.ipynb:348
msgid "To call the VQE code on the Qiskit Runtime on the cloud, we interact with the ``run`` method of ``QiskitRuntimeService``:"
msgstr "클라우드 상의 Qiskit 런타임 에서 VQE코드를 호출하기 위해서는 ``QiskitRuntimeService``의 ``run`` 메소드와 상호작용한다."

#: ../../tutorials/vqe.ipynb:354
msgid "where"
msgstr "여기서 이는 다음과 같다"

#: ../../tutorials/vqe.ipynb:356
msgid "``program_id`` determines the Qiskit Runtime program run, i.e. \\ ``'vqe'`` for the VQE"
msgstr "``program_id`` 는 Qiskit 런타임 프로그램 실행을 결정한다. 즉 ``'vqe'`` 는 VQE 실행을 결정한다."

#: ../../tutorials/vqe.ipynb:357
msgid "``inputs`` contains the input for the VQE algorithm"
msgstr "``inputs`` 는 VQE 알고리즘에 대한 입력을 포함한다."

#: ../../tutorials/vqe.ipynb:358
msgid "``options`` specifies the backend"
msgstr "``options`` 는 백엔드를 지정한다."

#: ../../tutorials/vqe.ipynb:359
msgid "``callback`` is the callback used inside the VQE"
msgstr "``callback`` 은 VQE 내부에서 사용되는 콜백이다."

#: ../../tutorials/vqe.ipynb:370
msgid "We start by initializing an account with access to the Qiskit Runtime service and the backend to execute the circuits on"
msgstr "회로를 실행하기 위해서 Qiskit 런타임 서비스와 백엔드에 엑세스 권한을 가진 계정을 초기화하는 것으로 시작한다."

#: ../../tutorials/vqe.ipynb:393
msgid "We’re using the ``ibmq_montreal`` device, but you can replace this with another device you have access to."
msgstr "``ibmq_montreal`` 을 사용하고 있지만, 엑세스할 수 있는 다른 장치로 교체할 수도 있다."

#: ../../tutorials/vqe.ipynb:414
msgid "Let’s gather all the inputs to the VQE in a dictionary."
msgstr "VQE에 대한 모든 입력값을 딕셔너리로 모아보자."

#: ../../tutorials/vqe.ipynb:442
msgid "The backend options only need to contain the name of the backend."
msgstr "백엔드 옵션은 백엔드 이름만 포함하면 된다."

#: ../../tutorials/vqe.ipynb:463
msgid "The callback acts a little different than before. Instead of only being passed the VQE callback arguments, it is passed a tuple with the job ID as first argument, followed by the VQE arguments."
msgstr "콜백은 이전과 조금 다르게 작동한다. VQE 콜백 인수만 전달하는 대신, 작업 ID를 첫 번째 인수로 지정한 튜플과 VQE 인수를 차례로 전달한다."

#: ../../tutorials/vqe.ipynb:494
msgid "Now we can call the Qiskit Runtime VQE program. Note, that the result will not be of the same type as ``VQE``, but a plain dictionary."
msgstr "이제 Qiskit Runtime VQE 프로그램을 호출할 수 있다. 참고로 결과는 ``VQE`` 와 같은 타입이 아니라 일반적인 딕셔너리가 될 것이다."

