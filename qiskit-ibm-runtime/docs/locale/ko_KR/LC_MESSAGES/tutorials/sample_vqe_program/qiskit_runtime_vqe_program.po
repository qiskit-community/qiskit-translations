msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-27 13:35+0000\n"
"PO-Revision-Date: 2022-10-27 13:54\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/sample_vqe_program/qiskit_runtime_vqe_program.po\n"
"X-Crowdin-File-ID: 9826\n"
"Language: ko_KR\n"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:9
msgid "This page was generated from `docs/tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb`__ 에서 생성되었다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:9
msgid "Creating Custom Programs for Qiskit Runtime"
msgstr "Qiskit Runtime을 위한 사용자 정의 프로그램 작성하기"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:15
msgid "Paul Nation"
msgstr "Paul Nation"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:25
msgid "IBM Quantum Partners Technical Enablement Team"
msgstr "IBM Quantum 파트너 기술 지원 팀"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:31
msgid "Here we will demonstrate how to create, upload, and use a custom Program for Qiskit Runtime. As the utility of the Runtime execution engine lies in its ability to execute many quantum circuits with low latencies, this tutorial will show how to create your own Variational Quantum Eigensolver (VQE) program from scratch."
msgstr "여기는 Qiskit Runtime을 위한 사용자 정의 프로그램을 작성, 업로드 및 사용하는 방법을 설명한다. 런타임 실행 엔진의 유틸리티는 많은 양자 회로를 낮은 대기 시간으로 실행시키는 데 있으므로, 이 튜토리얼은 자체적인 변분화된 양자 고윳값 해석기(VQE, Variational Quantum Eigensolver)를 처음부터 생성하는 방법을 보여줄 것이다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:43
msgid "Prerequisites"
msgstr "전제 조건"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:45
msgid "You must have the latest Qiskit installed."
msgstr "최신 Qiskit이 설치되어 있어야 한다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:46
msgid "You must have either an IBM Cloud or an IBM Quantum account that can access Qiskit Runtime."
msgstr "Qiskit Runtime에 접근할 수 있는 IBM Cloud 또는 IBM Quantum 계정이 있어야 한다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:58
msgid "Current limitations"
msgstr "현제 제한사항"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:60
msgid "The runtime execution engine currently has the following limitations that must be kept in mind:"
msgstr "런타임 실행 엔진은 현재 다음과 같이 고려해야 할 제한사항을 가지고 있다:"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:62
msgid "The Docker images used by the runtime include only Qiskit and its dependencies, with few exceptions. One exception is the inclusion of the ``mthree`` measurement mitigation package."
msgstr "런타임에 사용되는 도커 이미지는 몇 가지 예외가 있지만 오직 Qiskit과 그 종속성만을 포함한다. 예외 하나는 ``mthree`` 측정 완화 패키지가 포함되어 있다는 것이다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:64
msgid "For security reasons, the runtime cannot make internet calls outside of the environment."
msgstr "보안상의 이유로, 런타임은 환경 외부의 인터넷 호출을 할 수 없다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:66
msgid "As Qiskit Runtime matures, these limitations will be removed."
msgstr "Qiskit Runtime이 완전해질수록 이러한 제한사항은 사라질 것이다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:78
msgid "Simple VQE"
msgstr "단순한 VQE"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:80
msgid "VQE is an hybrid quantum-classical optimization procedure that finds the lowest eigenstate and eigenenergy of a linear system defined by a given Hamiltonian of Pauli operators. For example, consider the following two-qubit Hamiltonian:"
msgstr "VQE는 주어진 파울리 연산자의 해밀토니안에 의해 정의된 선형 시스템의 최저 고유상태와 고유에너지를 찾아내는 하이브리드 양자-고전 최적화 방법이다. 예를 들어, 다음과 같은 2-큐비트 해밀토니안을 고려한다:"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:82
msgid "H = A X_{1}\\otimes X_{0} + A Y_{1}\\otimes Y_{0} + A Z_{1}\\otimes Z_{0},"
msgstr "H = A X_{1}\\otimes X_{0} + A Y_{1}\\otimes Y_{0} + A Z_{1}\\otimes Z_{0},"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:87
msgid "where :math:`A` is numerical coefficient and the subscripts label the qubits on which the operators act. The zero index being farthest right is the ordering used in Qiskit. The Pauli operators tell us which measurement basis to to use when measuring each of the qubits."
msgstr "여기서 :math:`A` 는 숫자 계수고, 아래 첨자는 연산자가 동작하는 큐비트를 지정한다. 0 인덱스가 가장 오른쪽에 오는 것은 Qiskit에서 사용되는 순서다. 파울리 연산자는 각 큐비트를 측정할 때 어떤 측정 기준을 사용해야 할지 알려준다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:89
msgid "We want to find the ground state (lowest energy state) of this Hamiltonian, and the associated eigenvector. To do this we must start at a given initial state and iteratively vary the parameters that define this state using a classical optimizer, such that the computed energies of subsequent steps are nominally lower than those previously. The parameterized state of the system is defined by an ansatz quantum circuit that should have non-zero support in the direction of the ground state. Because in general we do not know the solution, the choice of ansatz circuit can be highly problem-specific with a form dictated by additional information. For further information about variational algorithms, we point the reader to `Nature Reviews Physics volume 3, 625 (2021) <https://doi.org/10.1038/s42254-021-00348-9>`__."
msgstr "이 해밀토니안의 바닥 상태 (즉, 최저 에너지 상태), 그리고 연관된 고유벡터를 찾고자 한다. 이를 위해 주어진 초기 상태에서 시작해 고전적인 최적화기를 통해 이 상태를 정의하는 매개변수를 반복적으로 변경하여, 후속 단계의 계산된 에너지가 이전의 것보다 명목상 더 낮아지게 해야 한다. 시스템의 매개변수화된 상태는 바닥 상태의 방향에서 0이 아닌 지원을 받아야 하는 ansatz 양자 회로에 의해 정의된다. 일반적으로 우리는 해결책을 알지 못하므로, ansatz 회로의 선택은 추가적인 정보에 의해 지시되는 형태로 문제에 따른 차이가 클 수 있다. 변이 알고리즘에 대한 추가적인 정보는 `Nature Reviews Physics volume 3, 625 (2021) <https://doi.org/10.1038/s42254-021-00348-9>`__ 를 참조하라."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:92
msgid "Thus we need at least the following inputs to create our VQE quantum program:"
msgstr "따라서 VQE 양자 프로그램을 생성하려면 적어도 다음의 입력이 필요하다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:94
msgid "A representation of the Hamiltonian that specifies the problem."
msgstr "문제를 지정하는 해밀토니안의 표현."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:96
msgid "A choice of parameterized ansatz circuit, and the ability to pass configuration options, if any."
msgstr "매개변수화된 ansatz 회로의 선택, 그리고 구성 옵션이 있을 경우 이를 전달하는 기능."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:98
msgid "However, the following are also beneficial inputs that users might want to have:"
msgstr "그러나 다음 또한 사용자가 원할 수도 있는 유익한 입력이다:"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:100
msgid "Add the ability to pass an initial state."
msgstr "초기 상태를 전달할 수 있는 기능 추가."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:102
msgid "Vary the number of shots that are taken."
msgstr "사용하는 샷의 개수 변경."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:104
msgid "Ability to select which classical optimizer is used, and set configuraton values, if any."
msgstr "어떤 고전적인 최적화기를 사용할지 선택하고, 있는 경우 구성 값을 설정할 수 있는 기능."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:106
msgid "Ability to turn on and off measurement mitigation."
msgstr "측정 완화를 켜고 끄는 기능."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:118
msgid "Specifying the form of the input values"
msgstr "입력 값의 형태 지정하기"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:120
msgid "All inputs to runtime programs must be serializable objects. That is to say, whatever you pass into a runtime program must be able to be converted to JSON format. It is thus beneficial to keep inputs limited to basic data types and structures unless you have experience with custom object serialization, or they are common Qiskit types such as ``QuantumCircuit`` etc that the built-in ``RuntimeEncoder`` can handle. Fortunately, the VQE program described above can be made out of simple Python components."
msgstr "런타임 프로그램을 위한 모든 입력은 직렬화 가능한 객체여야 한다. 즉, 런타임 프로그램에 전달하는 모든 것은 JSON 형식으로 변환할 수 있어야 한다. 사용자 정의 객체 직렬화 경험이 있거나 그것이 내장된 ``RuntimeEncoder`` 가 처리할 수 있는 ``QuantumCircuit`` 등의 일반적인 Qiskit 유형이 아닌 한, 이와 같이 입력을 기본 자료형과 구조로 제한하는 것이 유용하다. 다행스럽게도 위에서 설명한 VQE 프로그램은 간단한 파이썬 구성 요소로 만들 수 있다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:123
msgid "First, it is possible to represent any Hamiltonian using a list of values with each containing the numerical coefficeint for each term and the string representation for the Pauli operators. For the above example, the ground state energy with :math:`A=1` is :math:`-3` and we can write it as:"
msgstr "첫째로, 각 용어에 대한 숫자 계수와 파울리 연산자에 대한 문자열 표현을 각각 포함한 값의 목록을 이용하여 임의의 해밀토니안을 나타낼 수 있다. 위의 예시에서 :math:`A=1` 을 갖는 바닥 상태 에너지는 :math:`-3` 이며, 다음과 같이 작성할 수 있다:"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:144
msgid "Next we have to provide the ability to specify the parameterized Ansatz circuit. Here we will take advantage of the fact that many ansatz circuits are pre-defined in the Qiskit Circuit Library. Examples can be found in the `N-local circuits section <https://qiskit.org/documentation/apidoc/circuit_library.html#n-local-circuits>`__."
msgstr ""

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:146
msgid "We would like the user to be able to select between ansatz options such as: ``NLocal``, ``TwoLocal``, and ``EfficientSU2``. We could have the user pass the whole ansatz circuit to the program; however, in order to reduce the size of the upload we will pass the ansatz by name. In the runtime program, we can take this name and get the class that it corresponds to from the library using, for example,"
msgstr "사용자가 ``NLocal``, ``TwoLocal`` 및 ``EfficientSU2`` 와 같은 ansatz 옵션 중에서 선택할 수 있길 바란다. 사용자가 전체 ansatz 회로를 프로그램에 전달하도록 할 수도 있지만, 업로드 크기를 줄이기 위해 이름을 통해 ansatz를 전달하도록 한다. 런타임 프로그램에서 이 이름을 사용하여 라이브러리에서 해당하는 클래스를 얻을 수 있다. 예를 들면,"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:169
msgid "For the ansatz configuration, we will pass a simple ``dict`` of values."
msgstr "ansatz의 구성을 위해 우리는 단순한 값의 ``dict`` 를 전달할 것이다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:181
msgid "Optionals"
msgstr "선택 사항"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:183
msgid "If we want to add the ability to pass an initial state, then we will need to add the ability to pass a 1D list/ NumPy array. Because the number of parameters depends on the ansatz and its configuration, the user would have to know what ansatz they are doing ahead of time."
msgstr "초기 상태를 전달하는 기능을 추가하고자 한다면, 1D list/ NumPy 배열을 전달하는 기능을 추가해야 한다. 매개변수의 개수는 ansatz와 그것의 구성에 따라 달라지므로, 사용자는 자신이 어떤 ansatz를 수행하는지 미리 알아야 한다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:185
msgid "Selecting a number of shots requires simply passing an integer value."
msgstr "다수의 샷을 선택하고자 한다면 단순히 정수 값을 전달해야 한다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:187
msgid "Here we will allow selecting a classical optimizer by name from those in SciPy, and a ``dict`` of configuration parameters. Note that for execution on an actual system, the noise inherent in today’s quantum systems makes having a stochastic optimizer crucial to success. SciPy does not have such a choice, and the one built into Qiskit is wrapped in such a manner as to make it difficult to use elsewhere. As such, here we will use an SPSA optimizer written to match the style of those in SciPy. This function is given in `Appendix A <#Appendix-A>`__."
msgstr "여기에서는 SciPy에 있는 이름을 통해 고전적인 최적화기를 선택하고 구성 매개변수의 ``dict`` 를 선택할 수 있게 할 것이다. 실제 시스템에서 사용하려면 오늘날의 양자 시스템에 내재된 노이즈로 인해 확률적 최적화기가 성공에 결정적으로 중요하다는 것을 참고하라. SciPy에는 그러한 선택지가 없으며, Qiskit에 내장되어 있는 것은 다른 곳에서 사용하기 어렵게 포장되어 있다. 따라서 여기서는 SciPy의 스타일과 일치하도록 작성된 SPSA 최적화기를 사용할 것이다. 이 함수는 `부록 A <#Appendix-A>`__ 에 제공된다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:199
msgid "Finally, for measurement error mitigation we can simply pass a boolean (True/False) value."
msgstr "마지막으로, 측정 오류 완화를 위해 단순히 불 (참/거짓) 값을 전달할 수 있다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:211
msgid "Main program"
msgstr "메인 프로그램"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:213
msgid "We are now in a position to start building our main program. However, before doing so we point out that it makes the code cleaner to make a separate function that takes strings of Pauli operators that define our Hamiltonian and convert them to a list of circuits with single-qubit gates that change the measurement basis for each qubit, if needed. This function is given in `Appendix B <#Appendix-B>`__."
msgstr "이제 메인 프로그램을 구축하기 시작할 위치에 있다. 그러나 그 전에, 파울리 (Pauli) 연산자의 문자열을 취하여 우리의 해밀토니안을 정의하고 필요시 각 큐비트에 대한 측정 기준을 변경하는 단일 큐비트 게이트가 있는 회로의 목록으로 변환하는 분리된 함수를 만드는 것이 코드를 더 깔끔하게 만든다는 점을 유의하라. 이 함수는 `Appendix B <#Appendix-B>`__ 에서 제공된다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:225
msgid "Required signature"
msgstr "필수 시그니처"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:227
msgid "Every runtime program is defined via the ``main`` function, and must have the following input signature:"
msgstr "모든 런타임 프로그램은 ``main`` 함수를 통해 정의되며, 다음과 같은 입력 시그니처를 가져야 한다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:233
msgid "where ``backend`` is the backend that the program is to be executed on, and ``user_message`` is the class by which interim (and possibly final) results are communicated back to the user. After these two items, we add our program-specific arguments and keyword arguments."
msgstr "여기서, ``backend`` 는 프로그램이 실행되는 백엔드고, ``user_message`` 는 임시 (그리고 어쩌면 최종) 결과가 사용자에게 다시 전달되는 클래스다. 이 두 항목 뒤에는 프로그램에 따른 전달인자 및 키워드 전달인자를 추가한다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:245
msgid "The main VQE program"
msgstr "메인 VQE 프로그램"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:247
msgid "Here is the main program for our sample VQE. What each element of the function does is written in the comments before the element appears."
msgstr "이것은 우리의 샘플 VQE의 메인 프로그램이다. 함수의 각 구성요소가 무엇을 하는지는 그 구성요소가 나타나기 전에 주석으로 적혀 있다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:249
msgid "This program uses the ``mthree`` measurement mitigation package. You can install the package via ``pip install mthree``."
msgstr "이 프로그램은 ``mthree`` 측정 완화 패키지를 사용한다. ``pip install mthree`` 를 통해 패키지를 설치할 수 있다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:441
msgid "Local testing"
msgstr "로컬 테스트"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:447
msgid "Important: You need to execute the code blocks in Appendices A and B before continuing."
msgstr "중요: 계속하기 전에 부록 A와 B의 코드 블록을 실행해야 한다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:453
msgid "We can test whether our routine works by simply calling the ``main`` function with a backend instance, a ``UserMessenger``, and sample arguments."
msgstr "백엔드 인스턴스, ``UserMessenger``, 그리고 샘플 전달인자를 사용하여 ``main`` 함수를 단순히 호출함으로써 루틴이 작동하는지 여부를 테스트할 수 있다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:586
msgid "Having executed the above, we see that there are 5 parameter arrays returned, one for each callback, along with the final optimization result. The parameter arrays are the interim results, and the ``UserMessenger`` object prints these values to the cell output. The output itself is the answer we obtained, expressed as a SciPy ``OptimizerResult`` object."
msgstr "위에서 실행한 결과, 최종 최적화 결과와 함께 각 콜백에 대해 하나씩, 다섯개의 매개변수 배열이 반환되는 것을 볼 수 있다. 매개변수 배열은 중간 결과이며, ``UserMessenger`` 객체는 이 값을 셀 출력에 출력한다. 출력 그 자체는 우리가 얻은 답으로, SciPy ``OptimizerResult`` 객체로 표현된다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:598
msgid "Program metadata"
msgstr "프로그램 메타데이터"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:600
msgid "Program metadata is essentially the docstring for a runtime program. It describes overall program information such as the program ``name``, ``description``, and the ``max_execution_time`` the program is allowed to run, as well as details the inputs and the outputs the program expects. At a bare minimum the values described above are required"
msgstr "프로그램 메타데이터는 본질적으로 런타임 프로그램의 독스트링이다. 그것은 프로그램이 기대하는 입력과 출력을 자세히 설명할 뿐만 아니라, 프로그램의 ``name``, ``description``, 그리고 그 프로그램이 실행할 수 있는 ``max_execution_time`` 과 같은 프로그램 전반적인 정보를 설명한다. 최소한 위에서 설명한 값은 필수적이다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:626
msgid "It is important to set the ``max_execution_time`` high enough so that your program does not get terminated unexpectedly. Additionally, one should make sure that interim results are sent back to the user so that, if something does happen, the user can start where they left off."
msgstr "``max_execution_time`` 을 충분히 높게 설정하여 프로그램이 예기치 않게 종료되지 않도록 하는 것이 중요하다. 또한, 어떤 일이 발생하면 사용자가 중단된 위치에서 시작할 수 있도록 중간 결과를 사용자에게 다시 전송되도록 확실히 전송해야 한다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:628
msgid "It is, however, good form to detail the parameters and return types, as well as interim results. That being said, if making a runtime intended to be used by others, this information would also likely be mirrored in the signature of a function or class that the user would interact with directly; end users should not directly call runtime programs. We will see why below. Nevertheless, let us add to our metadata. First, the ``parameters`` section details the inputs the user is able to pass:"
msgstr "그러나 중간 결과뿐만 아니라 매개변수와 변환 자료형을 자세히 설명하는 것이 좋은 양식이다. 말하자면, 런타임을 다른 사람이 사용하도록 만드는 경우, 이 정보는 사용자가 직접 상호작용할 함수나 클래스의 시그니처에도 반영될 수 있다. 최종 사용자는 런타임 프로그램을 직접 호출하지 않아야 한다. 아래서 그 이유를 살펴볼 것이다. 그럼에도 불구하고 메타데이터를 추가하도록 하자. 먼저, ``parameters`` 섹션은 사용자가 전달할 수 있는 입력에 대해 자세히 설명한다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:689
msgid "Next, the ``return_values`` section tells about the return types:"
msgstr "다음으로, ``return_values`` 섹션은 반환 타입에 대해 설명한다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:714
msgid "and finally let us specify what comes back when an interim result is returned:"
msgstr "그리고 마지막으로 임시 결과가 반환될 때 돌아오는 내용을 명시한다:"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:740
msgid "Uploading the program"
msgstr "프로그램 업로드하기"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:742
msgid "We now have all the ingredients needed to upload our program. To do so we need to collect all of our code in one file, here called ``sample_vqe.py`` for uploading. This limitation will be removed in later versions of Qiskit Runtime. Alternatively, if the entire code is contained within a single Jupyter notebook cell, this can be done using the magic function"
msgstr "우리는 이제 프로그램을 업로드하는 데 필요한 모든 재료를 가지고 있다. 프로그램을 업로드 하려면 ``sample_vqe.py`` 라는 하나의 파일에 모든 코드를 모아야 한다. 이 제한사항은 추후 버전의 Qiskit 런타임에서 없어질 것이다. 대안으로, 전체 코드가 하나의 Jupyter 노트북 셀 안에 포함되어 있는 경우, 이를 매직 함수를 사용하여 수행할 수 있다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:748
msgid "To actually upload the program we need to initialize a Qiskit Runtime service:"
msgstr "실제로 프로그램을 업로드하려면 Qiskit Runtime 서비스를 초기화해야 한다:"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:772
msgid "Program upload"
msgstr "프로그램 업로드"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:774
msgid "The call to ``program_upload`` takes the target Python file as ``data`` and the metadata as inputs."
msgstr "``program_upload`` 에 대한 호출은 대상 Python 파일을 ``data`` 로, 메타데이터를 입력으로 사용한다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:821
msgid "Here the ``upload_program()`` method returns a ``program_id``, which is how you should reference your program."
msgstr "여기서 ``upload_program()`` 메서드는 프로그램을 참조하는 방법인 ``program_id`` 를 반환한다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:833
msgid "Program information"
msgstr "프로그램 정보"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:835
msgid "We can query the program for information and see that our metadata is correctly being attached:"
msgstr "정보를 얻기 위해 프로그램을 조회(query) 하고 메타데이터가 올바르게 첨부되고 있는지 확인할 수 있다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1026
msgid "Deleting a program"
msgstr "프로그램 삭제하기"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1028
msgid "If you make a mistake and need to delete and/or re-upload the program, you can run the following, passing the ``program_id``:"
msgstr "실수를 해서 프로그램을 삭제 및/또는 다시 업로드해야 하는 경우 다음을 실행하여 ``program_id`` 를 전달할 수 있다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1050
msgid "Running the program"
msgstr "프로그램 작동시키기"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1053
msgid "Specify parameters"
msgstr "매개변수 지정하기"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1055
msgid "To run the program we need to specify the ``options`` that are used in the runtime environment (not the program variables). The target backend is defined via the ``backend_name`` field."
msgstr "프로그램을 실행하려면 (프로그램 변수가 아니라) 런타임 환경에서 사용되는 ``options`` 을 지정해야 한다. 표적 백엔드는 ``backend_name`` 필드를 통해 정의된다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1076
msgid "The ``inputs`` dictionary is used to pass arguments to the ``main`` function itself. For example:"
msgstr "``inputs`` 딕셔너리는 ``main`` 함수 그 자체에 대해 인자(arguments) 를 전달하기 위해 사용된다. 예를 들어:"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1100
msgid "Execute the program"
msgstr "프로그램 실행하기"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1102
msgid "We now can execute the program and grab the result."
msgstr "이제 프로그램을 실행하고 결과를 가져올 수 있다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1182
msgid "A few things need to be pointed out. First, we did not get back any interim results, and second, the return object is a plain dictionary. This is because we did not listen for the return results, and we did not tell the job how to format the return result."
msgstr "몇 가지를 강조하고 싶다. 첫 번째로, 어떠한 중간 결과도 얻지 못했고, 두 번째로, 반환 객체는 일반적인(plain) 딕셔너리이다. 이는 리턴 결과를 수신하지 않았기 때문이며 리턴 결과를 형식화 하는 방법을 작업에 지시하지 않았기 때문이다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1194
msgid "Listening for interim results and final result"
msgstr "임시 결과 및 최종 결과를 수신하기"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1196
msgid "To listen for interim results and final result we need to pass a callback function to ``service.run`` that stores the results. The callback takes two arguments ``job_id`` and the returned data:"
msgstr "중간 결과와 최종 결과를 수신하기 위해 결과를 저장하는 ``service.run`` 에 콜백 함수를 전달해야 한다. 콜백은 두 개의 인자 ``job_id`` 와 반환된 데이터를 사용한다:"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1221
msgid "Executing again we get:"
msgstr "다시 실행하면 다음과 같다:"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1336
msgid "Formatting the returned results"
msgstr "반환된 결과 형식화하기"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1338
msgid "In order to format the return results into the desired format, we need to specify a decoder. This decoder must have a ``decode`` method that gets called to do the actual conversion. In our case ``OptimizeResult`` is a simple sub-class of ``dict`` so the formatting is simple."
msgstr "반환된 결과를 원하는 형식으로 형식화하기 위해, 디코더를 지정해야 한다. 이 디코더는 실제 변환을 수행하기 위해 호출되는 ``decode`` 메서드를 가지고 있어야 한다. 지금의 경우에는 ``OptimizeResult`` 는 ``dict`` 의 간단한 하위 클래스이므로 형식화는 간단하다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1367
msgid "We can then use this when returning the job result:"
msgstr "그런 다음 작업 결과를 반환할 때 이를 사용할 수 있다:"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1439
msgid "Simplifying program execution with wrapping functions"
msgstr "랩핑 (wrapping) 함수를 이용하여 프로그램 실행을 단순하게 만들기"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1441
msgid "While runtime programs are powerful and flexible, they are not the most friendly things to interact with. Therefore, if your program is intended to be used by others, it is best to make wrapper functions and/or classes that simplify the user experience. Moreover, such wrappers allow for validation of user inputs on the client side, which can quickly find errors that would otherwise be raised later during the execution process - something that might have taken hours waiting in queue to get to."
msgstr "런타임 프로그램은 강력하고 유연성 있지만, 상호작용 하기 가장 친숙한 것은 아니다. 따라서 당신의 프로그램을 다른 사람이 사용하도록 할 경우, 그것은 사용자 경험을 단순화하는 래퍼 함수 및/또는 클래스를 만드는 것이 좋다. 또한 이러한 래퍼는 클라이언트 측에서의 사용자 입력의 유효성 검증을 허용하며, 이로서 그러지 않으면 실행 프로세스 도중 나중에 발견했을, 대기열에서 기다리는 데 몇 시간이 소요되었을 수 있는 오류를 빠르게 발견할 수 있다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1443
msgid "Here we will make two helper routines. First, a job wrapper that allows us to attach and retrieve the interim results directly from the job object itself, as well as decodes for us so that the end user need not worry about formatting the results themselves."
msgstr "여기에서는 두 개의 헬퍼 루틴을 작성한다. 먼저, 작업 오브젝트 자체에서 직접 임시 결과를 첨부하고 검색할 수 있는 작업 랩퍼(wrapper)이며 일반 사용자(end user)가 스스로 결과를 형식화하는 것에 대해 걱정하지 않도록 우리를 위해 복호화를 해주는 작업 랩퍼이다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1499
msgid "Next, we create the actual function we want users to call to execute our program. To this function we will add a series of simple validation checks (not all checks will be done for simplicity), as well as use the job wrapper defined above to simplify the output."
msgstr "다음으로, 사용자가 프로그램을 실행하기 위해 호출할 실제 함수를 작성한다. 이 함수에 일련의 단순한 검증 확인을 추가할 것이며 (단순함을 위해 모든 확인을 하지 않는다) 출력을 단순화하기 위해 위에 정의된 작업 래퍼 (wrapper)를 이용할 것이다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1599
msgid "We can now execute our runtime program via this runner function:"
msgstr "이제 이 러너 (runner) 함수를 통해 런타임 프로그램을 실행할 수 있다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1680
msgid "The interim results are now attached to the job ``interim_results`` attribute and, as expected, we see that the length matches the number of iterations performed."
msgstr "이제 중간 결과가 ``interim_results`` 작업(job) 의 속성에 첨부되고 예상대로 길이가 수행된 반복 수와 일치함을 알 수 있다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1727
msgid "Conclusion"
msgstr "결론"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1729
msgid "We have demonstrated how to create, upload, and use a custom Qiskit Runtime by creating our own VQE solver from scratch. This tutorial was meant to touch upon every aspect of the process for a real-world example. Within the current limitations of the runtime environment, this example should enable readers to develop their own single-file runtime program. This program is also a good starting point for exploring additional flavors of VQE runtime. For example, it is straightforward to vary the number of shots per iteration, increasing shots as the number of iterations increases. Those looking to go deeper can consider implementing an `adaptive VQE <https://doi.org/10.1038/s41467-019-10988-2>`__, where the ansatz is not fixed at initialization."
msgstr ""

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1742
msgid "Appendix A"
msgstr "Appendix A"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1744
msgid "Here we code a simple simultaneous perturbation stochastic approximation (SPSA) optimizer for use on noisy quantum systems. Most optimizers do not handle fluctuating cost functions well, so this is a needed addition for executing on real quantum hardware."
msgstr "여기서는 노이즈가 있는 양자 시스템에 사용하기 위한 간단한 SPSA (Simultaneous Perturbation Stochastic Approximation) 최적화 프로그램(optimizer) 코드를 작성한다. 대부분의 최적화 프로그램은 변동하는 비용 함수를 잘 처리하지 않으므로 이것은 실제 양자 하드웨어에서 실행하는 데 필요한 추가 기능이다."

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1842
msgid "Appendix B"
msgstr "Appendix B"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1844
msgid "This is a helper function that converts the Pauli operators in the strings that define the Hamiltonian operators into the appropriate measurements at the end of the circuits. For :math:`X` operators this involves adding an :math:`H` gate to the qubits to be measured, whereas a :math:`Y` operator needs :math:`S^{+}` followed by a :math:`H`. Other choices of Pauli operators require no additional gates prior to measurement."
msgstr "이것은 해밀토니안을 정의하는 문자열의 파울리 연산자를 회로 끝에서 적절한 측정으로 변환하는 헬퍼 함수다. :math:`X` 연산자의 경우 측정할 큐비트에 :math:`H` 게이트를 추가하는 것을 포함하는 반면, :math:`Y` 연산자는 :math:`S^{+}` 다음에 :math:`H` 가 필요하다. 파울리 연산자의 다른 선택은 측정 전에 추가적인 게이트를 필요로 하지 않는다."

