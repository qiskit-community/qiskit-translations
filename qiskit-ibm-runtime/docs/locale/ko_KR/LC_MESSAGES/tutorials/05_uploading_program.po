msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-10 16:30+0000\n"
"PO-Revision-Date: 2022-11-10 16:46\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/05_uploading_program.po\n"
"X-Crowdin-File-ID: 9814\n"
"Language: ko_KR\n"

#: ../../tutorials/05_uploading_program.ipynb:9
msgid "This page was generated from `docs/tutorials/05_uploading_program.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/05_uploading_program.ipynb`__ 에서 생성되었다."

#: ../../tutorials/05_uploading_program.ipynb:8
msgid "|qiskit_header.png|"
msgstr "|qiskit_header.png|"

#: ../../tutorials/05_uploading_program.ipynb:10
msgid "qiskit_header.png"
msgstr "qiskit_header.png"

#: ../../tutorials/05_uploading_program.ipynb:22
msgid "Uploading a Qiskit runtime program"
msgstr "Qiskit Runtime 프로그램 업로드하는법"

#: ../../tutorials/05_uploading_program.ipynb:33
msgid "Here we provide an overview on how to construct and upload a runtime program. A runtime program is a piece of Python code that lives in the cloud and can be invoked by passing in just its parameters. Runtime programs are private by default, which means only you can see and access your programs. Some authorized users can also mark their programs as public, making them visible and accessible by everyone."
msgstr "여기서는 런타임 프로그램을 구성하고 업로드하는 방법에 대한 개요를 제공한다. 런타임 프로그램은 클라우드에 있는 Python 코드로 매개변수만 전달하여 호출할 수 있다. 런타임 프로그램은 기본적으로 비공개이며 해당 사용자만 프로그램을 보거나 접근할 수 있다. 일부 권한이 있는 사용자는 프로그램을 공개로 표시하여 모든 사용자가 보거나 접근 하도록 할 수 있다."

#: ../../tutorials/05_uploading_program.ipynb:45
msgid "Constructing a runtime program"
msgstr "런타임 프로그램 구성하기"

#: ../../tutorials/05_uploading_program.ipynb:56
msgid "Below is a template of a runtime program. You can find the template file in the `qiskit-ibm-runtime <https://github.com/Qiskit/qiskit-ibm-runtime/blob/main/qiskit_ibm_runtime/program/program_template.py>`__ repository."
msgstr "다음은 런타임 프로그램의 템플릿이다. `qiskit-ibm-runtime <https://github.com/Qiskit/qiskit-ibm-runtime/blob/main/qiskit_ibm_runtime/program/program_template.py>`__ 에서 템플릿 파일을 찾을 수 있다."

#: ../../tutorials/05_uploading_program.ipynb:104
msgid "Each runtime program must have a ``main()`` function, which serves as the entry point to the program. This function must have ``backend`` and ``user_messenger`` as the first two positional arguments:"
msgstr "각 런타임 프로그램에는 프로그램의 진입점인 ``main()`` 함수가 있어야 한다. 이 함수의 첫째와 둘째 입력인수는 반드시 ``backend`` 와 ``user_messenger`` 가 되야한다."

#: ../../tutorials/05_uploading_program.ipynb:106
msgid "``backend`` is an instance of `ProgramBackend <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.ProgramBackend.html#qiskit_ibm_runtime.ProgramBackend>`__ and has a `run() <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.ProgramBackend.html#qiskit_ibm_runtime.ProgramBackend.run>`__ method that can be used to submit circuits."
msgstr ""

#: ../../tutorials/05_uploading_program.ipynb:107
msgid "``user_messenger`` is an instance of `UserMessenger <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.UserMessenger.html#qiskit_ibm_runtime.UserMessenger>`__ and has a `publish() <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.UserMessenger.html#qiskit_ibm_runtime.UserMessenger.publish>`__ method that can be used to send interim and final results to the program user. This method takes a parameter ``final`` that indicates whether it’s a final result. However, it is recommended to return the final result directly from the ``main()`` function. Currently only final results are stored after a program execution finishes."
msgstr ""

#: ../../tutorials/05_uploading_program.ipynb:119
msgid "There are several runtime program source code in the ``program_source`` directory in this repository. ``program_source/hello_world/hello_world.py`` is one of them. It is a sample runtime program that submits random circuits for user-specified iterations:"
msgstr "``program_source`` 디렉토리에는 여러 개의 런타임 프로그램 소스 코드가 있다. ``program_source/hello_world/hello_world.py`` 는 소스 코드중 하나이며, 사용자가 설정한 반복횟수 만큼 무작위 회로를 실행하는 예제 런타임 프로그램이다."

#: ../../tutorials/05_uploading_program.ipynb:178
msgid "Data serialization"
msgstr "데이터 직렬화"

#: ../../tutorials/05_uploading_program.ipynb:189
msgid "Runtime programs live in the cloud, and JSON is the standard way of passing data to and from cloud services. Therefore, when a user invokes a runtime program, the input parameters must first be serialized into the JSON format and then deserialized once received by the server. By default, this serialization and deserialization is done automatically using the `RuntimeEncoder <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.RuntimeEncoder.html#qiskit_ibm_runtime.RuntimeEncoder>`__ and `RuntimeDecoder <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.RuntimeDecoder.html#qiskit_ibm_runtime.RuntimeDecoder>`__ classes."
msgstr "런타임 프로그램은 클라우드에 있으며, JSON은 클라우드 서비스와 데이터를 주고받는 표준 방식이다. 따라서 사용자가 런타임 프로그램을 호출할 때, 입력 매개변수를 먼저 JSON 형식으로 직렬화한 다음 서버에서 받은 것을 역직렬화해야 한다. 기본적으로 이 직렬화 및 역직렬화는 `RuntimeEncoder <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.RuntimeEncoder.html#qiskit_ibm_runtime.RuntimeEncoder>`__ 및 `RuntimeDecoder <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.RuntimeDecoder.html#qiskit_ibm_runtime.RuntimeDecoder>`__ 클래스를 사용하여 자동으로 수행된다."

#: ../../tutorials/05_uploading_program.ipynb:202
msgid "Custom classes"
msgstr "사용자 정의 클래스"

#: ../../tutorials/05_uploading_program.ipynb:213
msgid "``RuntimeEncoder`` and ``RuntimeDecoder`` only support types commonly used in Qiskit, such as complex numbers and numpy arrays. If your program uses custom Python classes for input or output, these two methods only have partial support for that."
msgstr "``RuntimeEncoder`` 와 ``RuntimeDecoder`` 는 복소수와 numpy 배열과 같이 Qiskit에서 일반적으로 사용되는 자료형만 지원한다. 만약 사용자 프로그램이 입력 또는 출력 용도로 사용자 정의 파이썬 클래스를 사용하면, 이 두 가지 메서드는 부분적으로만 지원한다."

#: ../../tutorials/05_uploading_program.ipynb:215
msgid "Your custom class should have the following methods:"
msgstr "사용자 정의 클래스에는 다음과 같은 메서드가 있어야 한다."

#: ../../tutorials/05_uploading_program.ipynb:217
msgid "a ``to_json()`` method that returns a JSON string representation of the object"
msgstr "객체의 JSON 문자열 표현을 반환하는 ``to_json()`` 메서드"

#: ../../tutorials/05_uploading_program.ipynb:218
msgid "a ``from_json()`` class method that accepts a JSON string and returns the corresponding object."
msgstr "JSON 문자열을 받고 해당하는 객체를 반환하는 ``from_json()`` 클래스 메서드."

#: ../../tutorials/05_uploading_program.ipynb:220
msgid "When ``RuntimeEncoder`` serializes a Python object, it checks whether the object has a ``to_json()`` method. If so, it calls the method to serialize the object. ``RuntimeDecoder``, however, does *not* invoke ``from_json()`` to convert the data back because it doesn’t know how to import your custom class. Therefore the deserialization needs to be done explicitly."
msgstr "``RuntimeEncoder`` 는 파이선 객체를 직렬화할 때 객체에 ``to_json()`` 메서드가 있는지 확인한다. 그러한 경우 메서드를 호출하여 객체를 직렬화한다. 그러나 ``RuntimeDecoder`` 는 사용자 정의 클래스를 호출하는 방법을 *모르기 때문에* 데이터를 다시 변환하기 위해 ``from_json()`` 을 호출하지 않는다. 따라서 역직렬화를 명시적으로 수행하야 한다."

#: ../../tutorials/05_uploading_program.ipynb:231
msgid "Here is an example of serializing and deserializing a custom class. First we define the class ``MyCustomClass``:"
msgstr "다음은 사용자 정의 클래스를 직렬화 및 역직렬화하는 예제이다. 먼저 ``MyCustomClass`` 를 정의한다."

#: ../../tutorials/05_uploading_program.ipynb:267
msgid "Note that it has the ``to_json()`` method that converts a ``MyCustomClass`` instance to a JSON string, and a ``from_json()`` class method that converts a JSON string back to a ``MyCustomClass`` instance."
msgstr "``MyCustomClass`` 인스턴스를 JSON 문자열로 변환하는 ``to_json()`` 메서드와 JSON 문자열을 다시 ``MyCustomClass`` 인스턴스로 변환하는 ``from_json()`` 클래스 메서드가 있다."

#: ../../tutorials/05_uploading_program.ipynb:278
msgid "Here is how one would use ``MyCustomClass`` as an **input** to your program:"
msgstr "``MyCustomClass`` 을 프로그램의 **입력** 으로 사용하는 방법은 다음과 같다."

#: ../../tutorials/05_uploading_program.ipynb:310
msgid "Since ``MyCustomClass`` has a ``to_json()`` method, the method is automatically called to convert the instance to a JSON string when ``service.run()`` is invoked."
msgstr "``MyCustomClass`` 에는 ``to_json()`` 메서드가 있으므로, 이 메서드는 ``service.run()`` 이 호출될 때 자동으로 인스턴스를 JSON 문자열로 변환한다."

#: ../../tutorials/05_uploading_program.ipynb:312
msgid "Your program can then use the ``from_json()`` method to restore the JSON string back to a ``MyCustomClass`` instance:"
msgstr "그런 다음 ``from_json()`` 메서드를 사용하여 JSON 문자열을 ``MyCustomClass`` 인스턴스로 복원할 수 있다."

#: ../../tutorials/05_uploading_program.ipynb:336
msgid "Similarly, if you pass a ``MyCustomClass`` instance as an **output** of your program, it is automatically converted to a JSON string (via the ``to_json()`` method):"
msgstr "마찬가지로 ``MyCustomClass`` 인스턴스를 프로그램의 **출력** 으로 전달하면, 이는 자동으로 ``to_json()`` 메서드를 통해 JSON 문자열로 변환된다."

#: ../../tutorials/05_uploading_program.ipynb:359
msgid "Now when the user of this program calls ``job.result()``, they will receive a JSON string rather than a ``MyCustomClass`` instance. The user can convert the string back to ``MyCustomClass`` themselves:"
msgstr "이제 이 프로그램 사용자가 ``job.result()`` 을 호출하면, ``MyCustomClass`` 인스턴스가 아닌 JSON 문자열을 받는다. 사용자는 문자열을 다시 ``MyCustomClass`` 으로 변환할 수 있다."

#: ../../tutorials/05_uploading_program.ipynb:384
msgid "Alternatively, you can provide a decoder for the users. Your decoder class should inherit `ResultDecoder <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.ResultDecoder.html#qiskit_ibm_runtime.ResultDecoder>`__ and overwrite the ``decode()`` method:"
msgstr ""

#: ../../tutorials/05_uploading_program.ipynb:412
msgid "Your user can then use this ``MyResultDecoder`` to decode the result of your program:"
msgstr "사용자는 ``MyResultDecoder`` 를 사용해서 프로그램의 결과를 디코딩할 수 있다:"

#: ../../tutorials/05_uploading_program.ipynb:428
msgid "Testing your runtime program"
msgstr "런타임 프로그램 테스트하기"

#: ../../tutorials/05_uploading_program.ipynb:439
msgid "You can test your runtime program using a local simulator or a real backend before uploading it. Simply import and invoke the ``main()`` function of your program and pass the following parameters:"
msgstr "로컬 시뮬레이터 또는 실제 백엔드를 사용하여 런타임 프로그램을 업로드하기 전에 테스트할 수 있다. 간단히 프로그램의 ``main()`` 함수를 가져와서 다음의 매개변수를 전달하면 된다:"

#: ../../tutorials/05_uploading_program.ipynb:441
msgid "the ``backend`` instance you want to use"
msgstr "사용하려는 ``backend`` 인스턴스"

#: ../../tutorials/05_uploading_program.ipynb:442
msgid "a new ``UserMessenger`` instance."
msgstr "새로운 ``UserMessenger`` 인스턴스"

#: ../../tutorials/05_uploading_program.ipynb:443
msgid "program input parameters that are serialized and then deserialized using the correct encoder and decoder. While this may seem redundant, it is to ensure input parameters can be passed to your program properly once it’s uploaded to the cloud."
msgstr "올바른 인코더와 디코더를 사용해서 직렬화 및 역직렬화되는 프로그램 입력 매개변수. 이는 쓸모 없는 것처럼 보일 수 있지만, 프로그램이 일단 클라우드에 업로드된 후에 입력 매개변수가 프로그램에 바르게 전달되도록 하기 위한 것이다."

#: ../../tutorials/05_uploading_program.ipynb:454
msgid "The following example tests the ``hello-world`` program we saw earlier. It uses the ``qasm_simulator`` from Qiskit Aer as the test backend. It serializes and deserializes input data using ``RuntimeEncoder`` and ``RuntimeDecoder``, which are the default en/decoders used by runtime."
msgstr "다음 예제는 앞서 봤던 ``hello-world`` 프로그램을 테스트하며, Qiskit Aer에 있는 ``qasm_simulator`` 를 테스트 백엔드로 사용한다. 런타임에 사용되는 기본 인코더와 디코더인 ``RuntimeEncoder`` 와 ``RuntimeDecoder`` 를 사용해서 입력 데이터를 직렬화 및 역직렬화 한다."

#: ../../tutorials/05_uploading_program.ipynb:547
msgid "Defining program metadata"
msgstr "프로그램 메타데이터 정의하기"

#: ../../tutorials/05_uploading_program.ipynb:558
msgid "Program metadata helps users to understand how to use your program. It includes:"
msgstr "프로그램 메타데이터는 사용자가 프로그램 사용법을 이해하는 데에 도움을 준다. 이는 다음과 같은 항목을 포함한다:"

#: ../../tutorials/05_uploading_program.ipynb:560
msgid "``name``: Name of the program."
msgstr "``name``: 프로그램 이름."

#: ../../tutorials/05_uploading_program.ipynb:561
msgid "``max_execution_time``: Maximum amount of time, in seconds, a program can run before being forcibly terminated."
msgstr "``max_execution_time``: 강제 종료 전에 프로그램을 실행할 수 있는 최대 시간 (초)."

#: ../../tutorials/05_uploading_program.ipynb:562
msgid "``description``: Describes the program."
msgstr "``description``: 프로그램을 설명한다."

#: ../../tutorials/05_uploading_program.ipynb:563
msgid "``spec``: Detailed information about the program, which includes the following attributes:"
msgstr "``spec``: 다음 속성을 포함하는 프로그램 상세 정보:"

#: ../../tutorials/05_uploading_program.ipynb:565
msgid "``backend_requirements``: Describes the backend attributes needed to run the program."
msgstr "``backend_requirements``: 프로그램 실행에 필요한 백엔드 속성을 설명한다."

#: ../../tutorials/05_uploading_program.ipynb:566
msgid "``parameters``: Describes the program input parameters as a JSON schema"
msgstr "``parameters``: 프로그램 입력 매개변수를 JSON 스키마로 설명한다."

#: ../../tutorials/05_uploading_program.ipynb:567
msgid "``return_values``: Describes the return values as a JSON schema"
msgstr "``return_values``: 반환 값을 JSON 스키마로 설명한다."

#: ../../tutorials/05_uploading_program.ipynb:568
msgid "``interim_results``: Describes the interim results as a JSON schema"
msgstr "``interim_results``: 중간 결과를 JSON 스키마로 설명한다."

#: ../../tutorials/05_uploading_program.ipynb:570
msgid "When uploading a program, you must specify at least ``name``, ``max_execution_time``, and ``description``. It is strongly encouraged to also specify ``parameters``, ``return_values``, and ``interim_results`` within ``spec`` if the program has them."
msgstr "프로그램을 업로드할 때, 최소한 ``name``, ``max_execution_time``, ``description`` 을 명시해야 한다. 프로그램의 ``spec`` 하위에 ``parameters``, ``return_values``, ``interim_results`` 가 있다면 이를 명시하는 것을 권장한다."

#: ../../tutorials/05_uploading_program.ipynb:581
msgid "Below shows the metadata JSON file of the ``hello-world`` program as an example:"
msgstr "아래는 ``hello-world`` 프로그램의 메타데이터인 JSON 파일 예제이다:"

#: ../../tutorials/05_uploading_program.ipynb:759
msgid "Uploading a program"
msgstr "프로그램 업로드하기"

#: ../../tutorials/05_uploading_program.ipynb:770
msgid "You can use the `QiskitRuntimeService.upload_program() <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.html#qiskit_ibm_runtime.QiskitRuntimeService.upload_program>`__ method to upload your program. In the example below, the program data lives in the file ``hello_world.py``, and its metadata, as described above, is in ``hello_world.json``."
msgstr "`QiskitRuntimeService.upload_program() <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.html#qiskit_ibm_runtime.QiskitRuntimeService.upload_program>`__ 메서드를 사용해서 프로그램을 업로드할 수 있다. 아래 예제는 ``hello_world.py`` 파일에 있는 프로그램 데이터이며, 앞서 설명한 것처럼 메타데이터는 ``hello_world.json`` 에 있다:"

#: ../../tutorials/05_uploading_program.ipynb:828
msgid "``upload_program()`` returns a program ID, which uniquely identifies the program. It is derived from the program name, usually with a randomly-generated suffix. Program ID is needed to invoke the program."
msgstr "``upload_program()`` 는 프로그램 고유의 ID를 반환한다. 이는 프로그램 이름에서 파생되며, 일반적으로 무작위로 생성된 접미사를 함께 사용한다. 프로그램 ID는 프로그램을 호출할 때 필요하다."

#: ../../tutorials/05_uploading_program.ipynb:840
msgid "Updating a program"
msgstr "프로그램 업데이트하기"

#: ../../tutorials/05_uploading_program.ipynb:851
msgid "You can use the `QiskitRuntimeService.update_program() <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.update_program.html#qiskit_ibm_runtime.QiskitRuntimeService.update_program>`__ method to update the source code and/or metadata of a program:"
msgstr "`QiskitRuntimeService.update_program() <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.update_program.html#qiskit_ibm_runtime.QiskitRuntimeService.update_program>`__ 메서드를 사용해서 소스 코드 및/또는 프로그램의 메타데이터를 갱신할 수 있다."

#: ../../tutorials/05_uploading_program.ipynb:872
msgid "This method allows you to make changes to your program while retaining the same program ID."
msgstr "이 매서드를 사용하면 동일한 프로그램 ID를 유지하면서 프로그램을 수정할 수 있다."

#: ../../tutorials/05_uploading_program.ipynb:884
msgid "Deleting a program"
msgstr "프로그램 삭제하기"

#: ../../tutorials/05_uploading_program.ipynb:895
msgid "You can use the `QiskitRuntimeService.delete_program() <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.html#qiskit_ibm_runtime.QiskitRuntimeService.delete_program>`__ method to delete a program. Only the person who uploaded the program can delete it."
msgstr "`QiskitRuntimeService.delete_program() <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.html#qiskit_ibm_runtime.QiskitRuntimeService.delete_program>`__ 메서드를 사용해서 프로그램을 삭제할 수 있다. 프로그램을 업로드한 사람만 삭제가 가능하다."

#: ../../tutorials/05_uploading_program.ipynb:917
msgid "Additional materials"
msgstr "추가 자료"

#: ../../tutorials/05_uploading_program.ipynb:928
msgid "This is an introductory tutorial on creating and uploading a very simple custom program. `sample_vqe_program/qiskit_runtime_vqe_program.ipynb <sample_vqe_program/qiskit_runtime_vqe_program.ipynb>`__ provides a more in-depth tutorial on creating a real-world Qiskit Runtime program."
msgstr "지금까지는 매우 간단한 사용자 정의 프로그램을 만들고 업로드하는 방법을 설명했다. `sample_vqe_program/qiskit_runtime_vqe_program.ipynb <sample_vqe_program/qiskit_runtime_vqe_program.ipynb>`__ 은 실제 Qiskit Runtime 프로그램을 만드는 깊이 있는 해설이다."

