msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-27 13:35+0000\n"
"PO-Revision-Date: 2022-10-27 13:54\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/user-transpiled-circuits.po\n"
"X-Crowdin-File-ID: 9830\n"
"Language: ko_KR\n"

#: ../../tutorials/user-transpiled-circuits.ipynb:9
msgid "This page was generated from `docs/tutorials/user-transpiled-circuits.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/user-transpiled-circuits.ipynb`__ 에서 생성되었다."

#: ../../tutorials/user-transpiled-circuits.ipynb:9
msgid "Submitting user-transpiled circuits using primitives"
msgstr "Primitive를 사용하여 사용자가 트랜스파일한 회로 제출하기"

#: ../../tutorials/user-transpiled-circuits.ipynb:11
msgid "To get the best performance from your circuits, the Qiskit Runtime service will pass all circuits through Qiskit’s transpiler before running them. While this is usually a good thing, we might sometimes want to disable this by passing the argument ``skip_transpilation=True`` to the primitive we’re using."
msgstr "회로에서 최상의 성능을 얻기 위해, Qiskit Runtime 서비스는 이를 실행하기 전에 모든 회로를 Qiskit의 트랜스파일러를 통해 전달한다. 이는 일반적으로 좋은 일이긴 하지만, 우리는 가끔 우리가 사용하고 있는 primitive에게 ``skip_transpilation=True`` 라는 매개변수를 전달함으로써 이를 사용하지 않을 수도 있다."

#: ../../tutorials/user-transpiled-circuits.ipynb:13
msgid "For example, we may know better than the transpiler in some cases, or want to target a specific subset of qubits on a specific device. In this tutorial, we’ll disable automatic transpilation to test the performance of different transpiler settings. This example will take you through the full process of creating, transpiling, and submitting circuits."
msgstr "예를 들어, 어떤 경우에는 우리가 트랜스파일러보다 더 잘 알 수 있거나 특정 장치에서 큐비트들의 특정 부분 집합을 대상으로 지정하려고 할 수 있다. 이 튜토리얼에서는 자동 트랜스파일을 사용하지 않고 다른 트랜스파일 설정의 성능을 테스트할 것이다. 이 예제에서는 회로를 작성, 전송 및 트랜스파일하는 전체 프로세스를 수행한다."

#: ../../tutorials/user-transpiled-circuits.ipynb:16
msgid "Transpiling circuits for IBM Quantum devices"
msgstr "IBM Quantum 장치용 회로 트랜스파일 하기"

#: ../../tutorials/user-transpiled-circuits.ipynb:18
msgid "In the code cell below, we create a small circuit that our transpiler will try to optimize. In this example, we create a circuit that carries out Grover’s algorithm, with an oracle that marks the state ``111``. We then simulate the ideal distribution (what we’d expect to measure if we ran this on a perfect quantum computer, an infinite number of times) for comparison later."
msgstr "아래 코드 셀에서는 소형 회로를 만들어 우리의 트랜스파일러 프로그램이 최적화하려고 할 것이다. 이 예제에서, 우리는 그로버 알고리즘을 실행하는 회로를 만들고, 이는 상태 ``111`` 을 표시하는 오라클을 갖는다. 그런 다음 나중에 비교할 수 있도록 (완벽한 양자 컴퓨터에서 실행했을 때 측정할 수 있을 것으로 예상되는) 이상적인 분포를 시뮬레이션한다."

#: ../../tutorials/user-transpiled-circuits.ipynb:61
msgid "Next, we need to choose a backend to transpile for. In the cell below, we create a service instance, which we’ll use to start a session, and get the backend object, which contains information for the transpiler. Since the transpilation process depends on the device, we’ll ask the runtime service for a specific device by name. In this example, we’ll use ``ibm_algiers``, which is only available through IBM Cloud."
msgstr "다음으로, 트랜스파일할 백엔드를 선택해야 한다. 아래 셀에서는 세션을 시작하는 데 사용할 서비스 인스턴스를 작성하고 트랜스파일에 대한 정보를 포함하는 백엔드 오브젝트를 가져온다. 트랜스파일 프로세스는 디바이스에 따라 다르므로 이름별로 특정 디바이스에 대해 런타임 서비스를 요청한다. 이 예제에서는 오직 IBM Cloud에서만 사용할 수 있는 ``ibm_algiers`` 를 사용한다."

#: ../../tutorials/user-transpiled-circuits.ipynb:84
msgid "Next, we transpile the circuits for our backend. We’re going to compare the performance of the transpiler with ``optimization_level`` set to ``0`` (lowest) against ``3`` (highest). The lowest optimization level just does the bare minimum needed to get the circuit running on the device, i.e. map the circuit qubits to the device qubits, and add swaps gates to allow all 2-qubit operations. The highest optimization level is much smarter and uses lots of tricks to reduce the overall gate count. Since multi-qubit gates have high error rates, and qubits decohere over time, the shorter circuits should give better results."
msgstr "다음으로, 백엔드를 위해 회로들을 트랜스파일한다. 우리는 ``optimization_level`` 이 (최소) ``0`` 부터 (최대) ``3`` 까지 설정된 트랜스파일러의 성능을 비교할 예정이다. 가장 낮은 최적화 레벨은 장치상에서 실행되는 회로를 얻는데 필요한 최소치만을 수행하며, 즉 회로 큐비트를 디바이스 큐비트에 맵핑하고, 스왑 게이트들을 추가하여 모든 2-큐비트 연산을 허용한다. 가장 높은 최적화 레벨은 훨씬 더 지능적이며 전체 게이트 수를 줄이기 위해 많은 요령을 사용한다. 다중-큐비트 게이트들은 높은 에러 확률들을 가지고, 시간에 걸쳐 디코딩된 큐비트들을 갖기 때문에, 더 짧은 회로들은 더 나은 결과들을 제공해야 한다."

#: ../../tutorials/user-transpiled-circuits.ipynb:87
msgid "In the cell below, we transpile ``qc`` for both values of ``optimization_level``, print the number of CNOT gates, and add the transpiled circuits to a list. Some of the transpiler’s algorithms are randomized, so we set a seed for reproducibility."
msgstr "아래의 셀에서 우리는 ``optimization_level`` 의 두 가지 값에 대해 ``qc`` 를 트랜스파일하고, CNOT 게이트 갯수를 표시하고, 트랜스파일된 회로들을 목록에 추가한다. 트랜스필러의 알고리즘 중 일부는 랜덤화되므로 재구현을 위한 시드를 설정한다."

#: ../../tutorials/user-transpiled-circuits.ipynb:147
msgid "Since CNOTs usually have a high error rate, the circuit transpiled with ``optimization_level=3`` should perform much better."
msgstr "CNOT들은 보통 높은 오류율을 가지고 있기 때문에 ``optimization_level=3`` 로 트랜스파일하는 회로는 성능이 더 좋아야 한다."

#: ../../tutorials/user-transpiled-circuits.ipynb:149
msgid "Another way we can improve performance is through `dynamic decoupling <https://qiskit.org/documentation/stubs/qiskit.transpiler.passes.DynamicalDecoupling.html>`__, where we apply a sequence of gates to idling qubits. This cancels out some unwanted interactions with the environment. In the cell below, we add dynamic decoupling to the circuit transpiled with ``optimization_level=3``, and add it to our list."
msgstr "성능을 향상시킬 수 있는 또 다른 방법은 놀고 있는 큐비트에 일련의 게이트를 적용하는 `다이나믹 디커플링 <https://qiskit.org/documentation/stubs/qiskit.transpiler.passes.DynamicalDecoupling.html>`__ 을 통해서 가능하다. 이렇게 하면 환경과의 불필요한 상호작용들이 상쇄한다. 아래 셀에서는 ``optimization_level=3`` 로 트랜스파일된 회로에 다이나믹 디커플링을 추가하고 이를 목록에 추가한다."

#: ../../tutorials/user-transpiled-circuits.ipynb:188
msgid "Run user-transpiled circuits using Qiskit Runtime"
msgstr "Qiskit Runtime을 사용하여 사용자가 트랜스파일한 회로를 실행하기"

#: ../../tutorials/user-transpiled-circuits.ipynb:190
msgid "At this point, we have a list of circuits (named ``circuits``) transpiled for ``ibm_algiers``. In the cell below, we create an instance of the sampler primitive, and start a session using the context manager (``with ...:``), which automatically opens and closes the session for us. This is where we pass the ``skip_transpilation=True`` argument."
msgstr ""

#: ../../tutorials/user-transpiled-circuits.ipynb:192
msgid "Within the context manager, we sample the circuits and store the results to ``result``."
msgstr "컨텍스트 관리자 내에서 회로를 샘플링하여 결과를 ``result`` 에 저장합니다."

#: ../../tutorials/user-transpiled-circuits.ipynb:221
msgid "Finally, we can plot the results from the device runs against the ideal distribution. For each measured string, the leftmost bar is the ideal distribution, the central bar is the circuit transpiled with ``optimization_level=3``, and the rightmost bar is the circuit transpiled with ``optimization_level=0``)."
msgstr "마지막으로, 이상적인 분포에 대해 장치가 실행되는 결과를 도표로 작성할 수 있습니다. 각각의 측정된 문자열에 대하여, 가장 왼쪽의 막대는 이상적인 분포를 나타내고, 중심 바는 ``optimization_level=3`` 로 트랜스파일되는 회로이고, 가장 오른쪽의 바는 ``optimization_level=0`` 로 트랜스파일되는 회로이다."

#: ../../tutorials/user-transpiled-circuits.ipynb:223
msgid "You can see the results with ``optimization_level=3`` is closer to the ideal distribution due to the lower gate count, and ``optimization_level=3 + dd`` is even closer due to the dynamic decoupling we applied."
msgstr "``optimization_level=3`` 로 결과가 더 낮은 게이트 카운트로 인해 이상적인 분포에 가깝고 ``optimization_level=3 + dd`` 은 적용한 다이나믹 디커플링 덕분에 더욱 가까워졌다."

#: ../../tutorials/user-transpiled-circuits.ipynb:260
msgid "We can confirm this by computing the `Hellinger fidelity <https://qiskit.org/documentation/stubs/qiskit.quantum_info.hellinger_fidelity.html>`__ between each set of results and the ideal distribution (higher is better, and 1 is perfect fidelity)."
msgstr "각 결과 세트와 (높을수록 좋고, 1은 완벽한 정확도를 의미하는) 이상적인 분포 사이에 `Hellinger fidelity <https://qiskit.org/documentation/stubs/qiskit.quantum_info.hellinger_fidelity.html>`__ 를 계산함으로써 이를 확인할 수 있다."

