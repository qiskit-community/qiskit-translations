msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-10 17:48+0000\n"
"PO-Revision-Date: 2022-12-13 08:47\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/sea_with_sampler.po\n"
"X-Crowdin-File-ID: 9828\n"
"Language: ko_KR\n"

#: ../../tutorials/sea_with_sampler.ipynb:9
msgid "This page was generated from `docs/tutorials/sea_with_sampler.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/sea_with_sampler.ipynb`__ 에서 생성되었다."

#: ../../tutorials/sea_with_sampler.ipynb:9
msgid "Spectroscopic Eigensolver Algorithm with Sampler"
msgstr "Sampler를 사용한 분광 고윳값 해석기 알고리즘 (Spectroscopic Eigensolver Algorithm)"

#: ../../tutorials/sea_with_sampler.ipynb:11
msgid "This tutorial demonstrates the ability to send flexible circuits to the ``Sampler`` primitive by performing a simple example of the spectroscopic eigensolver algorithm (`arXiv:2202.12910 <http://arxiv.org/abs/2202.12910>`__). The SEA is used for quantum simulation of model Hamiltonians, and works by interacting a “probe” auxiliary qubit with a simulation register. The energy of the probe qubit is sweeped and eigenvalues of the simulation Hamiltonian are observed as peaks or dips in the response, akin to the experimental tool of spectroscopy. Because each point (i.e., energy) is a different quantum circuit, this technique is expensive with respect to the number of circuits required. The ``Sampler`` provides the flexibility to send just a single circuit with the needed ``Parameter``\\ s passed."
msgstr "이 튜토리얼에서는 분광 고윳값 해석기 알고리즘 (Spectroscopic Eigensolver Algorithm) (`arXiv: 2202.12910 <http://arxiv.org/abs/2202.12910>`__) 의 간단한 예제를 사용해 ``Sampler`` 프리미티브로 유연하게 회로를 전송할 수 있는 기능을 설명한다. SEA는 모델 해밀토니안의 양자 시뮬레이션에 사용되며, \"프로브 보조 큐비트 (probe auxiliary qubit with a simulation register)\" 와 상호 작용하여 작동한다. 프로브 큐비트의 에너지는 분광법의 실험적 도구와 유사하게, 측정후 반응에서 고점 (peak) 또는 저점 (dips) 으로서 관찰되는 시뮬레이션 해밀토니안의 고유값이다. 각각의 포인트 (즉, 에너지) 는 각기 다른 양자 회로이기 때문에, 이 기술은 요구되는 회로들의 수에 비해 계산양이 많다. ``Sampler`` 는 필요한 ``매개변수`` 들이 전달된 단 하나의 회로만을 전송할 수 있는 유연성을 제공한다."

#: ../../tutorials/sea_with_sampler.ipynb:24
msgid "Set up your local development environment"
msgstr "로컬 개발 환경 설정하기"

#: ../../tutorials/sea_with_sampler.ipynb:26
msgid "This tutorial requires a Qiskit Runtime service instance. If you haven’t done so already, follow `these steps <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ to set one up."
msgstr "이 지침서는 Qiskit Runtime 서비스 인스턴스가 필요하다. 이것이 없다면 `이 단계 <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ 를 따라 설정을 한다."

#: ../../tutorials/sea_with_sampler.ipynb:51
msgid "Simple Hamiltonian Model"
msgstr "간단한 해밀토니안 모델"

#: ../../tutorials/sea_with_sampler.ipynb:53
msgid "Let’s consider a Pauli-X matrix acting on a qubit,"
msgstr "큐비트에 작용하는 파울리-X 행렬을 고려해 보자."

#: ../../tutorials/sea_with_sampler.ipynb:55
msgid "H_{\\rm Pauli}/\\hbar = \\mu X"
msgstr "H_{\\rm Pauli}/\\hbar = \\mu X"

#: ../../tutorials/sea_with_sampler.ipynb:60
msgid "where we can set :math:`\\mu` later, or even sweep its values as well. The SEA works by taking the model Pauli (i.e., qubit) Hamiltonian and building a larger “resonance” Hamiltonian that includes both the simulation register and probe qubit ``q0`` via"
msgstr ":math:`\\mu` 를 나중에 설정하거나 심지어 그 값들을 쓸 수 있다. SEA는 모델 파울리 (즉, 큐비트) 해밀토니안을 취하고, 시뮬레이션 레지스터 및 프로브 큐비트 ``q0`` 를 포함하는 더 큰 \"공명\" 해밀토니안을 생성함으로써 작동한다."

#: ../../tutorials/sea_with_sampler.ipynb:62
msgid "H_{\\rm res} / \\hbar = -\\frac{1}{2} \\omega IZ + c XX + H_{\\rm Pauli}/\\hbar \\otimes I"
msgstr "H_{\\rm res} / \\hbar = -\\frac{1}{2} \\omega IZ + c XX + H_{\\rm Pauli}/\\hbar \\otimes I"

#: ../../tutorials/sea_with_sampler.ipynb:67
msgid "where the angular frequency :math:`\\omega` corresponds to the energy of the probe qubit, and :math:`c` is the coupling between the probe qubit and a qubit in the simulation register (``q1`` in this case). The letters :math:`I`, :math:`X`, and :math:`Z` correspond to the Pauli spin matrices and their order reflect which qubit they operate on (note that this notation is little-endian). We will set :math:`\\hbar \\equiv 1` in the following code."
msgstr "여기서 각진동수 :math:`\\omega` 는 프로브 큐비트의 에너지에 대응하고, :math:`c` 는 프로브 큐비트와 시뮬레이션 레지스터 내의 큐비트 사이의 결합을 나타낸다 (이 경우에는 ``q1``). :math:`I`, :math:`X`, 그리고 :math:`Z` 는 파울리 스핀 행렬에 해당하며, 그들의 정렬 순서는 어느 큐비트에서 작업하는지를 반영한다 (이 표기법은 리틀 엔디안 (little-endian)이라 한다). 우리는 이 코드에서 :math:`\\hbar \\equiv 1` 로 설정할 것이다."

#: ../../tutorials/sea_with_sampler.ipynb:69
msgid "We can construct the SEA circuits with tools from Qiskit Opflow."
msgstr "Qiskit Opflow의 도구를 사용하여 SEA 회로를 구성할 수 있다."

#: ../../tutorials/sea_with_sampler.ipynb:107
msgid "Time evolve the resonance Hamiltonian."
msgstr "시간이 공명 해밀토니안을 변화시킨다."

#: ../../tutorials/sea_with_sampler.ipynb:129
msgid "From the time-evolution operator :math:`U_{\\rm ham}`, we use the Suzuki-Trotter expansion to convert this operator into quantum circuits that implement discrete time steps of the simulation. The smaller the time steps (more Trotter steps), the more accurate the quantum circuit, but also longer depth, which could introduce errors when executing on noisy quantum hardware. We then transpile the circuits to IBM backend basis gates and measure only the probe qubit ``q0``."
msgstr "시간-진화 연산자 :math:`U_{\\rm ham}` 에서, 우리는 스즈키-트로터 (Suzuki-Trotter) 확장을 사용하여 이 연산자를 시뮬레이션의 시간에 분리된 불연속성을 구현하는 양자 회로로 변환한다. 시간 단계를 더 잘게 쪼갤수록 (더 많은 트롬 스텝), 양자 회로는 더 정확해지지만, 회로의 깊이가 깊어질수록 노이즈가 많은 양자 하드웨어에서 실행될 때 에러를 더욱 야기할 수 있다. 그런 다음, 저희는 회로를 IBM 백엔드 기저 게이트로 트랜스파일하고 프로브의 큐비트 ``q0`` 만 측정한다."

#: ../../tutorials/sea_with_sampler.ipynb:207
msgid "Now let’s fix our parameters and sweep over frequency with a number of points ``num_pts``. The eigenvalues of our model Hamiltonian :math:`H_{\\rm Pauli}` are :math:`\\pm \\mu`, so we need to choose a range that includes those numbers."
msgstr "매개변수를 수정하고 여러 지점의 ``num_pts`` 를 사용하여 빈도를 모아볼것이다. 우리의 모델 해밀토니안 :math:`H_{\\rm Pauli}` 의 고유값은 :math:`\\pm \\mu` 이므로 이 숫자들을 포함하는 범위를 선택할 필요가 있다."

#: ../../tutorials/sea_with_sampler.ipynb:209
msgid "Note that the ``Parameter``\\ s’ keys and values must be separared and converted into a ``List`` of ``List``\\ s. The keys give us the ``Parameter``\\ s inside each circuit. In this case, we only have a single circuit, so the ``List`` of keys contains a single ``List``. For the ``Parameter`` values, there is a ``List`` for each value of ``ww``."
msgstr "``Parameter`` 의 키 및 값은 분리해야 하며 ``List`` 들의 ``List`` 로 변환되어야 한다. 키는 각 회로의 ``Parameter`` 을 제공한다. 이 경우에는 단 하나의 회로만 있을 뿐이므로 키의 ``List`` 에는 하나의 ``List`` 가 포함되어 있다. ``Parameter`` 값의 경우에는 ``ww`` 의 각 값에 대한 ``List`` 가 있다."

#: ../../tutorials/sea_with_sampler.ipynb:245
msgid "When calling the ``sampler``, we specify a list of ``circuits`` pointing to the circuits desired to be run and the parameter values for each circuit."
msgstr ""

#: ../../tutorials/sea_with_sampler.ipynb:274
msgid "Build the :math:`Z` expectations by converting quasi-probabilities to :math:`\\langle Z \\rangle`."
msgstr "준확률을 :math:`\\langle Z \\rangle` 로 변환해 :math:`Z` 기대치들을 구축한다."

#: ../../tutorials/sea_with_sampler.ipynb:300
msgid "As a sanity check, we’ll calculate the exact expectation values with Qiskit Opflow."
msgstr "적합한지 평가하기 위해서 Qiskit Opflow를 사용하여 정확한 기대값들을 계산할 것이다."

#: ../../tutorials/sea_with_sampler.ipynb:337
msgid "And plotting everything together shows that the energy at which our peaks occurs to be :math:`\\pm \\mu`."
msgstr "그리고 모든 것을 함께 그렸을 때 고점이 일어나는 에너지가 :math:`\\pm \\mu` 라는 것을 보여준다."

