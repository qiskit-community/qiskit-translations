msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-22 15:51+0000\n"
"PO-Revision-Date: 2022-08-11 08:55\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/sample_expval_program/qiskit_runtime_expval_program.po\n"
"X-Crowdin-File-ID: 9824\n"
"Language: ko_KR\n"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:9
msgid "This page was generated from `docs/tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb`__에서 생성되었다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:9
msgid "Custom Expectation Value Program for the Qiskit Runtime"
msgstr "Qiskit Runtime용 사용자 정의 기댓값 프로그래밍"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:15
msgid "Paul Nation"
msgstr "Paul Nation"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:25
msgid "IBM Quantum Partners Technical Enablement Team"
msgstr "IBM Quantum 파트너 기술 지원 팀"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:31
msgid "Here we will show how to make a program that takes a circuit, or list of circuits, and computes the expectation values of one or more diagonal operators."
msgstr "이 문서에서는 하나 이상의 회로를 구성하고 대각 연산자의 기댓값을 계산하는 방법을 설명한다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:43
msgid "Prerequisites"
msgstr "준비사항"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:45
msgid "You must have the latest Qiskit installed."
msgstr "최신 Qiskit이 설치되어 있어야 한다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:46
msgid "You must have either an IBM Cloud or an IBM Quantum account that can access Qiskit Runtime."
msgstr "Qiskit Runtime을 사용할 수 있는 IBM Cloud 또는 IBM Quantum 계정"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:58
msgid "Background"
msgstr "배경"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:60
msgid "The primary method by which information is obtained from quantum computers is via expectation values. Indeed, the samples that come from executing a quantum circuit multiple times, once converted to probabilities, can be viewed as just a finite sample approximation to the expectation value for the projection operators corresponding to each bitstring. More practically, many quantum algorithms require computing expectation values over Pauli operators, e.g. Variational Quantum Eigensolvers, and thus having a runtime program that computes these quantities is of fundamental importance. Here we look at one such example, where a user passes one or more circuits and expectation operators and gets back the computed expectation values, and possibly error bounds."
msgstr "양자 컴퓨터에서 정보를 얻을 수 있는 주요 방법은 기댓값을 구하는 것이다. 양자 회로를 여러번 실행해서 얻은 결과를 확률로 변환하면, 각 비트열에 해당되는 사영 연산자의 기댓값에 대한 유한 근사치(finite sample approximation)로 고려할 수 있다. 실제로 변분화된 양자 고윳값 해석기(Variational Qunatum Eigensolvers)을 비롯한 많은 양자 알고리즘은 파울리 연산자에 대한 기댓값을 계산한다. 따라서 기댓값을 계산하는 런타임 프로그램을 만드는 것은 매우 중요하다.이 글에서는 회로와 기댓값 연산자를 전달하고, 가능한 오류 범위와 기대값 결과를 얻는 예를 살펴본다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:64
msgid "Expectation value of a diagonal operator"
msgstr "대각 연산자의 기댓값"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:66
msgid "Consider a generic observable given by the tensor product of diagonal operators over :math:`N` qubits :math:`O = O_{N-1}\\dots O_{0}` where the subscript indicates the qubit on which the operator acts. Then for a set of observed :math:`M` bitstrings :math:`\\{b_{0}, \\dots b_{M-1}\\}`, where $M :nbsphinx-math:`\\leq `2^N $, with corresponding approximate probabilities :math:`p_{m}` the expectation value is given by"
msgstr ":math:`N` 개의 큐비트 :math:`O = O_{N-1}\\dots O_{0}` 로 이루어진 대각 연산자의 텐서곱에 대한 일반적인 관측 가능량(generic observable)을 다루고자 한다. 여기서 큐비트의 아래 첨자는 연산자가 적용되는 큐비트를 의미한다. $M :nbsphinx-math:`\\leq `2^N $ 이고 근사 확률이 :math:`p_{m}`인 관측된 :math:`M` 비트열 :math:`\\{b_{0}, \\dots b_{M-1}\\}`의 기대값은 다음과 같다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:68
msgid "\\langle O\\rangle \\simeq \\sum_{m=0}^{M-1} p_{m}\\prod_{n=0}^{N-1}O_{n}[b_{m}[N-n-1], b_{m}[N-n-1]],"
msgstr "\\langle O\\rangle \\simeq \\sum_{m=0}^{M-1} p_{m}\\prod_{n=0}^{N-1}O_{n}[b_{m}[N-n-1], b_{m}[N-n-1]],"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:73
msgid "where :math:`O_{n}[b_{m}[N-n-1], b_{m}[N-n-1]]` is the diagonal element of :math:`O_{n}` specified by the :math:`N-n-1`\\ th bit in bitstring :math:`b_{m}`. The reason for the complicated indexing in ``b_{m}`` is because Qiskit uses least-significant bit indexing where the zeroth element of the bit-strings is given by the right-most bit."
msgstr "여기서 :math:`O_{n}[b_{m}[N-n-1], b_{m}[N-n-1]]` 은 비트열 :math:`b_{m}` 의 :math:`N-n-1`\\ 번째 원소를 인덱스로 갖는 대각행렬 :math:`O_{n}` 의 원소이다. Qiskit에서는 0번째 비트를 비트열의 가장 오른쪽에 놓기 때문에 비트열 ``b_{m}`` 의 인덱싱이 복잡해졌다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:75
msgid "Here we will use built-in routines to compute these expectation values. However, it is not hard to do yourself, with plenty of examples to be found."
msgstr "이 글에서는 내장 루틴을 사용해서 기댓값을 계산한다. 다양한 예제를 스스로 해보는 것은 어렵지 않을것이다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:87
msgid "Main program"
msgstr "메인 프로그램"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:89
msgid "Here we define our main function for the expectation value runtime program. As always, our program must start with the ``backend``, and ``user_messenger`` arguements, followed by the actual inputs we pass to the program. Here our options are quite simple:"
msgstr "기댓값 런타임 프로그램의 메인 함수를 정의한다. 항상 그렇듯 프로그램은 입력인수(arguments) backend 와 user_messenger 로 시작해야 하고, 그 다음에는 프로그램에 전달하는 실제 입력인수가 있어야 한다. 그러한 입력인수들은 다음과 같이 매우 간단하다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:91
msgid "``circuits``: A single QuantumCircuit or list of QuantumCircuits to be executed on the target backend."
msgstr "``circuits``: 대상 백엔드에서 실행되는 QuantumCircuit 또는 리스트 자료형 QuantumCircuit."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:93
msgid "``expectation_operators``: The operators we want to evaluate. These can be strings of diagonal Pauli’s, eg, ``ZIZZ``, or custom operators defined by dictionaries. For example, the projection operator on the all ones state of 4 qubits is ``{'1111': 1}``."
msgstr "``expectation_operators``: 계산용 연산자. 이는 대각 파울리 문자열이며, ``ZIZZ`` 또는 딕셔너리 자료형으로 설정한 사용자 정의 연산자 등이 포함된다. 예를 들어, 큐비트 4개가 모두 1인 상태의 투영(projection) 연산자는 ``{'1111': 1}`` 이다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:95
msgid "``shots``: How many times to sample each circuit."
msgstr "``shots``: 양자회로를 몇 번 실행할 것인지 설정."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:97
msgid "``transpiler_config``: A dictionary that passes additional arguments on to the transpile function, eg. ``optimization_level``."
msgstr "``transpiler_config``: 트랜스파일(transpile) 함수로 추가 인수를 전달하는 딕셔너리 자료형. 예) optimization_level."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:99
msgid "``run_config``: A dictionary that passes additional arguments on to ``backend.run()``."
msgstr "``run_config``: ``backend.run()`` 로 추가 인수를 전달하는 딕셔너리 자료형."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:101
msgid "``skip_transpilation``: A flag to skip transpilation altogether and just run the circuits. This is useful for situations where you need to transpile parameterized circuits once, but must bind parameters multiple times and evaluate."
msgstr "``skip_transpilation``: 트랜스파일레이션(transpilation) 을 하지 않고 회로만 실행하는 이진 변수이다. 매개변수를 갖는 회로를 한번 트랜스파일 해야 하지만, 매개변수를 변경 하면서 회로를 여러번 실행하는 경우에 유용하다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:103
msgid "``return_stddev``: Flag to return bound on standard deviation. If using measurement mitigation this adds some overhead to the computation."
msgstr "``return_stddev``: 표준편차의 경계(bound) 를 반환하는 이진변수이다. 측정 완화(measurement mitigation) 를 사용하면 계산이 조금 더 복잡해진다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:105
msgid "``use_measurement_mitigation``: Use M3 measurement mitigation and compute expectation value and standard deviation bound from quasi-probabilities."
msgstr "``use_measurement_mitigation``: M3 측정 완화를 사용하고 기댓값과 준-확률(quasi-probabilities) 로 부터 표준편차의 경계를 계산한다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:107
#, python-format
msgid "At the top of the cell below you will see a commented out ``%%writefile sample_expval.py``. We will use this to convert the cell to a Python module named ``sample_expval.py`` to upload."
msgstr "아래 셀의 상단에 주석처리된 ``%%writefile sample_expval.py`` 가 있다.이것을 사용해서 해당 셀을 이름이 ``sample_expval.py`` 인 파이썬 모듈로 변환하여 업로드에 활용할 수 있다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:228
msgid "Local testing"
msgstr "개인 컴퓨터(local) 실험"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:230
msgid "Here we test with a local “Fake” backend that mimics the noise properties of a real system and a 4-qubit GHZ state."
msgstr "개인 컴퓨터에서 실제 시스템의 잡음 특성과 4 큐빗 GHZ 상태를 모방하는 모의 백엔드를 테스트할 것이다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:320
msgid "If we have done our job correctly, the above should print out two expectation values close to one and a final expectation value close to zero."
msgstr "작업이 제대로 끝났다면, 1에 가까운 두 개의 기댓값과 0에 가까운 최종 기대값을 출력한다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:332
msgid "Program metadata"
msgstr "프로그램 메타데이터"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:334
msgid "Next we add the needed program data to a dictionary for uploading with our program."
msgstr "다음으로, 프로그램을 업로드하기 위해 필요한 프로그램 데이터를 dictionary 자료형에 추가한다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:402
msgid "Upload the program"
msgstr "프로그램 업로드"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:404
#, python-format
msgid "We are now in a position to upload the program. To do so we first uncomment and execute the line ``%%writefile sample_expval.py`` giving use the ``sample_expval.py`` file we need to upload."
msgstr "이제 프로그램을 업로드 할 수 있는 단계에 왔다. 첫번째로 ``%%writefile sample_expval.py`` 라인의 주석을 해제하고 실행한다. 이를 통해 업로드 하려는 ``sample_expval.py`` 파일을 사용할 수 있다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:464
msgid "Delete program if needed"
msgstr "필요시 프로그램 삭제"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:486
msgid "Wrapping the runtime program"
msgstr "런타임 프로그램 감싸기"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:488
msgid "As always, it is best to wrap the call to the runtime program with a function (or possibly a class) that makes input easier and does some validation."
msgstr "항상 그렇듯, 런타임 프로그램에 대한 호출을 감싸는 함수를 만들면 인수 입력을 보다 간편하게 하고 일부 유효성 검사를 수행할 수 있다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:565
msgid "Trying it out"
msgstr "따라하기"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:567
msgid "Let’s try running the program here with our previously made GHZ state and running on the simulator."
msgstr "전에 만든 GHZ 상태 프로그램을 시뮬레이터로 실행한다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:627
msgid "The first two projectors should be nearly :math:`0.50` as they tell us the probability of being in the all zeros and ones states, respectively, which should be 50/50 for our GHZ state. The final expectation value of ``ZZZZ`` should be one since this is a GHZ over an even number of qubits. It should go close to zero for an odd number."
msgstr "앞선 두개의 값은 각각 모두 1과 0상태가 되는 확률을 의미하기 때문에 :math:`0.50` 에 가까워야 한다. 이는 GHZ 상태에 대해 50/50 이어야 한다. 마지막 값은 ``ZZZZ`` 의 기대값으로 짝수 큐빗에 대한 GHZ 상태이기 때문에 1이 되어야 한다. 홀수 큐빗에 대해서는 0이 되어야 한다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:700
msgid "Quantum Volume as an expectation value"
msgstr "양자 볼륨을 기대값으로 나타내기"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:702
msgid "Here we formulate QV as an expectation value of a projector onto the heavy-output elements on a distribution. We can then use our expectation value routine to compute whether a given circuit has passed the QV metric."
msgstr "다음으로는 QV를 확률분포의 헤비-아웃풋(heavy-ouput) 요소에 대한 투영자(projector) 의 기댓값으로 수식화한다. 다음으로 기댓값 루틴을 사용하여 회로의 QV 기준(metric) 통과 여부를 알 수 있다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:704
msgid "QV is defined in terms of heavy-outputs of a distribution. Heavy-outputs are those bit-strings that are those that have probabilities above the median value of the distribution. Below we define the projection operator onto the set of bit-strings that are heavy-outputs for a given distribution."
msgstr "QV는 확률분포의 헤비-아웃풋으로 정의할 수 있다. 헤비-아웃풋은 분포의 중간값 이상의 확률을 갖는 것들에 대한 비트열이다. 아래에서는 확률 분포에 대한 헤비-아웃풋인 비트열 셋으로 투영 연산자를 정의한다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:739
msgid "Now we generate 10 QV circuits as our dataset."
msgstr "데이터셋으로 10 QV 회로를 만든다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:766
msgid "Next, we have to determine the heavy-set of each circuit from the ideal answer, and then pass this along to our heavy-set projector function that we defined above."
msgstr "다음으로 이상적인 정답에서 각 회로의 헤비-셋(heavy-set) 을 결정 하고, 이를 위에 정의한 헤비-셋(heavy-set) 투영자 함수에 전달한다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:790
msgid "QV circuits have no measurements on them so need to add them:"
msgstr "QV 회로에 측정을 추가한다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:811
msgid "With a list of circuits and projection operators we now need only to pass both sets to our above expectation value runner targeting the desired backend. We will also set the best transpiler arguments to give us a sporting chance of getting some passing scores."
msgstr "백엔드를 대상으로 하는 기댓값 실행자에 리스트 자료형 회로와 투영 연산자를 전달해야 한다. 또한 통과 점수를 얻을 가능성이 높은 최적의 트랜스파일러 입력인수를 설정한다."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:890
msgid "A passing QV score is one where the value of the heavy-set projector is above :math:`2/3`. So let us see who passed:"
msgstr "통과할 수 있는 QV 점수는 heavy-set 투영자 값이 :math:`2/3` 이상인 경우이다. 어떤 것이 통과했는지 살펴보자."

