msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-17 16:43+0000\n"
"PO-Revision-Date: 2023-11-17 16:50\n"
"Last-Translator: \n"
"Language: zh\n"
"Language-Team: Chinese Traditional\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/chsh_with_estimator.po\n"
"X-Crowdin-File-ID: 9842\n"

#: ../../tutorials/chsh_with_estimator.ipynb:9
msgid "This page was generated from `docs/tutorials/chsh_with_estimator.ipynb`__."
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:9
msgid "CHSH inequality"
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:21
msgid "Background"
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:32
msgid "In this tutorial, you will run an experiment on a quantum computer to demonstrate the violation of the CHSH inequality with the Estimator primitive."
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:34
msgid "The CHSH inequality, named after the authors Clauser, Horne, Shimony, and Holt, is used to experimentally prove Bell's theorem (1969). This theorem asserts that local hidden variable theories cannot account for some consequences of entanglement in quantum mechanics. The violation of the CHSH inequality is used to show that quantum mechanics is incompatible with local hidden-variable theories. This is an important experiment for understanding the foundation of quantum mechanics."
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:36
msgid "The 2022 Nobel Prize for Physics was awarded to Alain Aspect, John Clauser and Anton Zeilinger in part for their pioneering work in quantum information science, and in particular, for their experiments with entangled photons demonstrating violation of Bellâ€™s inequalities."
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:47
msgid "For this experiment, we will create an entangled pair on which we measure each qubit on two different bases. We will label the bases for the first qubit :math:`A` and :math:`a` and the bases for the second qubit :math:`B` and :math:`b`. This allows us to compute the CHSH quantity :math:`S_1`:"
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:49
msgid "S_1 = A(B-b) + a(B+b)."
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:54
msgid "Each observable is either :math:`+1` or :math:`-1`. Clearly, one of the terms :math:`B\\pm b` must be :math:`0`, and the other must be :math:`\\pm 2`. Therefore, :math:`S_1 = \\pm 2`. The average value of :math:`S_1` must satisfy the inequality:"
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:56
msgid "|\\langle S_1 \\rangle|\\leq 2."
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:61
msgid "Expanding :math:`S_1` in terms of :math:`A`, :math:`a`, :math:`B`, and :math:`b` results in:"
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:63
msgid "|\\langle S_1 \\rangle| = |\\langle AB \\rangle - \\langle Ab \\rangle + \\langle aB \\rangle + \\langle ab \\rangle| \\leq 2"
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:68
msgid "You can define another CHSH quantity :math:`S_2`:"
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:70
msgid "S_2 = A(B+b) - a(B-b),"
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:75
msgid "This leads to another inequality:"
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:77
msgid "|\\langle S_2 \\rangle| = |\\langle AB \\rangle + \\langle Ab \\rangle - \\langle aB \\rangle + \\langle ab \\rangle| \\leq 2"
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:82
msgid "If quantum mechanics can be described by local hidden variable theories, the previous inequalities must hold true. However, as is demonstrated in this notebook, these inequalities can be violated in a quantum computer. Therefore, quantum mechanics is not compatible with local hidden variable theories."
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:93
msgid "If you want to learn more theory, explore `Entanglement in Action <https://learning.quantum-computing.ibm.com/course/basics-of-quantum-information/entanglement-in-action#the-chsh-game>`__ with John Watrous."
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:112
msgid "You will create an entangled pair between two qubits in a quantum computer by creating the Bell state :math:`|\\Phi^+\\rangle = \\frac{|00\\rangle + |11\\rangle}{\\sqrt{2}}`. Using the Estimator primitive, you can directly obtain the expectation values needed (:math:`\\langle AB \\rangle, \\langle Ab \\rangle, \\langle aB \\rangle`, and :math:`\\langle ab \\rangle`) to calculate the expectation values of the two CHSH quantities :math:`\\langle S_1\\rangle` and :math:`\\langle S_2\\rangle`. Before the introduction of the Estimator primitive, you would have to construct the expectation values from the measurement outcomes."
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:115
msgid "You will measure the second qubit in the :math:`Z` and :math:`X` bases. The first qubit will be measured also in orthogonal bases, but with an angle with respect to the second qubit, which we are going to sweep between :math:`0` and :math:`2\\pi`. As you will see, the Estimator primitive makes running parameterized circuits very easy. Rather than creating a series of CHSH circuits, you only need to create *one* CHSH circuit with a parameter specifying the measurement angle and a series of phase values for the parameter."
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:118
msgid "Finally, you will analyze the results and plot them against the measurement angle. You will see that for certain range of measurement angles, the expectation values of CHSH quantities :math:`|\\langle S_1\\rangle| > 2` or :math:`|\\langle S_2\\rangle| > 2`, which demonstrates the violation of the CHSH inequality."
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:130
msgid "Setup"
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:203
msgid "Map the problem to a quantum-native format"
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:215
msgid "Create a parameterized CHSH circuit"
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:217
msgid "First, we write the circuit with the parameter :math:`\\theta`, which we call ``theta``. The ```Estimator`` primitive <https://docs.quantum-computing.ibm.com/api/qiskit-ibm-runtime/qiskit_ibm_runtime.Estimator#estimator>`__ can enormously simplify circuit building and output analysis by directly providing expectation values of observables. Many problems of interest, especially for near-term applications on noisy systems, can be formulated in terms of expectation values. For maximum generalization, the ```Estimator`` primitive <https://docs.quantum-computing.ibm.com/api/qiskit-ibm-runtime/qiskit_ibm_runtime.Estimator#estimator>`__ requires circuits with no measurements."
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:255
msgid "Create a list of phase values to be assigned later"
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:257
msgid "After creating the parameterized CHSH circuit, you will create a list of phase values to be assigned to the circuit in the next step. You can use the following code to create a list of 21 phase values range from :math:`0` to :math:`2 \\pi` with equal spacing, that is, :math:`0`, :math:`0.1 \\pi`, :math:`0.2 \\pi`, ..., :math:`1.9 \\pi`, :math:`2 \\pi`."
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:282
msgid "Observables"
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:284
msgid "Now we need observables from which to compute the expectation values. In our case we are looking at orthogonal bases for each qubit, letting the parameterized :math:`Y-` rotation for the first qubit sweep the measurement basis nearly continuously with respect to the second qubit basis. We will therefore choose the observables :math:`ZZ`, :math:`ZX`, :math:`XZ`, and :math:`XX`."
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:312
msgid "Optimize the circuits and operators"
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:314
msgid "For this example, the circuit and the operators are simple, so no optimizations are needed."
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:326
msgid "Execute using a quantum primitive function"
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:328
msgid "In order to execute the entire experiment in one call to the ```Estimator`` <https://docs.quantum-computing.ibm.com/api/qiskit-ibm-runtime/qiskit_ibm_runtime.Estimator#estimator>`__ we need to batch the circuit and operators together, repeating each for the requested ``number_of_phases`` points."
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:350
msgid "We can create a `Qiskit Runtime ``Estimator`` <https://docs.quantum-computing.ibm.com/api/qiskit-ibm-runtime/qiskit_ibm_runtime.Estimator#estimator>`__ primitive to compute our expectation values, and the ```Batch`` <https://docs.quantum-computing.ibm.com/run/run-primitives-batch>`__ context manager to run our non-iterative workload."
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:384
msgid "The individual expectation values can then be extracted from the batched results:"
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:408
msgid "Analyze the results"
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:410
msgid "After running the circuits, we need to build the CHSH witness functions. We first build the quantities :math:`\\langle AB \\rangle`, :math:`\\langle Ab \\rangle`, :math:`\\langle aB \\rangle`, and :math:`\\langle ab \\rangle`, by looking at the parity of the outcomes for the four families of circuits we built (two measurement bases for each of the two qubits). Then we use those quantities to build the witness functions as defined previously."
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:435
msgid "Note that now we do not have to build the observables ourselves because they are returned to us! The computed expectation values are given in ``result.values``. What comes back is a very small payload of data."
msgstr ""

#: ../../tutorials/chsh_with_estimator.ipynb:488
msgid "In the figure, the red dashed lines delimit the classical bounds (:math:`\\pm 2`) and the dash-dotted blue lines delimit the quantum bounds (:math:`\\pm 2\\sqrt{2}`). You can see that the experimental results resemble the general trend of the simulated results and there are regions where the CHSH witness quantities exceeds the classical bounds. Congratulations! You have successfully demonstrated the violation of CHSH inequality in a real quantum system!"
msgstr ""

