msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-24 21:41+0000\n"
"PO-Revision-Date: 2023-10-24 22:15\n"
"Last-Translator: \n"
"Language: ta\n"
"Language-Team: Tamil\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /main/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/migrate/migrate-update-parm.po\n"
"X-Crowdin-File-ID: 9961\n"

#: ../../migrate/migrate-update-parm.rst:2
msgid "Parametrized circuits with primitives"
msgstr ""

#: ../../migrate/migrate-update-parm.rst:5
msgid "Parametrized circuits are a commonly used tool for quantum algorithm design. Because `backend.run()` did not accept parametrized circuits, the parameter binding step had to be integrated in the algorithm workflow. The primitives can perform the parameter binding step internally, which results in a simplification of the algorithm-side logic."
msgstr ""

#: ../../migrate/migrate-update-parm.rst:8
msgid "The following example summarizes the new workflow for managing parametrized circuits."
msgstr ""

#: ../../migrate/migrate-update-parm.rst:11
msgid "Example"
msgstr ""

#: ../../migrate/migrate-update-parm.rst:12
msgid "Let's define a parametrized circuit:"
msgstr ""

#: ../../migrate/migrate-update-parm.rst:38
msgid "We want to assign the following parameter values to the circuit:"
msgstr ""

#: ../../migrate/migrate-update-parm.rst:47
msgid "Legacy"
msgstr ""

#: ../../migrate/migrate-update-parm.rst:48
msgid "Previously, the parameter values had to be bound to their respective circuit parameters before calling `backend.run()`."
msgstr ""

#: ../../migrate/migrate-update-parm.rst:63
msgid "Primitives"
msgstr ""

#: ../../migrate/migrate-update-parm.rst:64
msgid "Now, the primitives take in parametrized circuits directly, together with the parameter values, and the parameter assignment operation can be performed more efficiently on the server side of the primitive."
msgstr ""

#: ../../migrate/migrate-update-parm.rst:66
msgid "This feature is particularly interesting when working with iterative algorithms because the parametrized circuit remains unchanged between calls while the parameter values change. The primitives can transpile once and then cache the unbound circuit, using classical resources more efficiently. Moreover, only the updated parameters are transferred to the cloud, saving additional bandwidth."
msgstr ""

