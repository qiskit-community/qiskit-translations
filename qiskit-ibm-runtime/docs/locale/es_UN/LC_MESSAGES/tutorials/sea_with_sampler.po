msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-19 13:43+0000\n"
"PO-Revision-Date: 2022-08-19 13:52\n"
"Last-Translator: \n"
"Language-Team: Spanish (United)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/sea_with_sampler.po\n"
"X-Crowdin-File-ID: 9828\n"
"Language: es_UN\n"

#: ../../tutorials/sea_with_sampler.ipynb:9
msgid "This page was generated from `docs/tutorials/sea_with_sampler.ipynb`__."
msgstr "Esta página fue generada a partir de `docs/tutorials/sea_with_sampler.ipynb`__."

#: ../../tutorials/sea_with_sampler.ipynb:9
msgid "Spectroscopic Eigensolver Algorithm with Sampler"
msgstr "Algoritmo de Solucionador Propio Espectroscópico con Sampler"

#: ../../tutorials/sea_with_sampler.ipynb:11
msgid "This tutorial demonstrates the ability to send flexible circuits to the ``Sampler`` primitive by performing a simple example of the spectroscopic eigensolver algorithm (`arXiv:2202.12910 <http://arxiv.org/abs/2202.12910>`__). The SEA is used for quantum simulation of model Hamiltonians, and works by interacting a “probe” auxiliary qubit with a simulation register. The energy of the probe qubit is sweeped and eigenvalues of the simulation Hamiltonian are observed as peaks or dips in the response, akin to the experimental tool of spectroscopy. Because each point (i.e., energy) is a different quantum circuit, this technique is expensive with respect to the number of circuits required. The ``Sampler`` provides the flexibility to send just a single circuit with the needed ``Parameter``\\ s passed."
msgstr "Este tutorial demuestra la capacidad de enviar circuitos flexibles a la primitiva ``Sampler`` mediante la realización de un ejemplo simple del algoritmo de solucionador propio espectroscópico (`arXiv:2202.12910 <http://arxiv.org/abs/2202.12910>`__). El SEA se utiliza para la simulación cuántica de modelos Hamiltonianos y funciona mediante la interacción de un qubit auxiliar “probe” (“sonda”) con un registro de simulación. La energía del qubit sonda se barre y los valores propios de la simulación Hamiltoniana se observan como picos o caídas en la respuesta, similar a la herramienta experimental de la espectroscopia. Debido a que cada punto (es decir, energía) es un circuito cuántico diferente, esta técnica es costosa con respecto a la cantidad de circuitos necesarios. El ``Sampler`` proporciona la flexibilidad de enviar un solo circuito con los ``Parameter``\\ s necesarios."

#: ../../tutorials/sea_with_sampler.ipynb:24
msgid "Set up your local development environment"
msgstr "Configura tu entorno de desarrollo local"

#: ../../tutorials/sea_with_sampler.ipynb:26
msgid "This tutorial requires a Qiskit Runtime service instance. If you haven’t done so already, follow `these steps <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ to set one up."
msgstr "Este tutorial requiere una instancia del servicio Qiskit Runtime. Si aún no lo has hecho, sigue `estos pasos <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ para configurar uno."

#: ../../tutorials/sea_with_sampler.ipynb:50
msgid "Simple Hamiltonian Model"
msgstr "Modelo Hamiltoniano Simple"

#: ../../tutorials/sea_with_sampler.ipynb:52
msgid "Let’s consider a Pauli-X matrix acting on a qubit,"
msgstr "Consideremos una matriz de Pauli X actuando sobre un qubit,"

#: ../../tutorials/sea_with_sampler.ipynb:54
msgid "H_{\\rm Pauli}/\\hbar = \\mu X"
msgstr "H_{\\rm Pauli}/\\hbar = \\mu X"

#: ../../tutorials/sea_with_sampler.ipynb:59
msgid "where we can set :math:`\\mu` later, or even sweep its values as well. The SEA works by taking the model Pauli (i.e., qubit) Hamiltonian and building a larger “resonance” Hamiltonian that includes both the simulation register and probe qubit ``q0`` via"
msgstr "donde podemos colocar :math:`\\mu` más tarde, o incluso barrer sus valores también. El SEA funciona tomando el Hamiltoniano del modelo Pauli (es decir, el qubit) y construyendo un Hamiltoniano de “resonancia” más grande que incluye tanto el registro de simulación como el qubit sonda ``q0`` a través de"

#: ../../tutorials/sea_with_sampler.ipynb:61
msgid "H_{\\rm res} / \\hbar = -\\frac{1}{2} \\omega IZ + c XX + H_{\\rm Pauli}/\\hbar \\otimes I"
msgstr "H_{\\rm res} / \\hbar = -\\frac{1}{2} \\omega IZ + c XX + H_{\\rm Pauli}/\\hbar \\otimes I"

#: ../../tutorials/sea_with_sampler.ipynb:66
msgid "where the angular frequency :math:`\\omega` corresponds to the energy of the probe qubit, and :math:`c` is the coupling between the probe qubit and a qubit in the simulation register (``q1`` in this case). The letters :math:`I`, :math:`X`, and :math:`Z` correspond to the Pauli spin matrices and their order reflect which qubit they operate on (note that this notation is little-endian). We will set :math:`\\hbar \\equiv 1` in the following code."
msgstr "donde la frecuencia angular :math:`\\omega` corresponde a la energía del qubit sonda, y :math:`c` es el acoplamiento entre el qubit sonda y un qubit en el registro de simulación (``q1`` en este caso ). Las letras :math:`I`, :math:`X`, y :math:`Z` corresponden a las matrices de espín de Pauli y su orden refleja en qué qubit operan (ten en cuenta que esta notación es little-endian). Estableceremos :math:`\\hbar \\equiv 1` en el siguiente código."

#: ../../tutorials/sea_with_sampler.ipynb:68
msgid "We can construct the SEA circuits with tools from Qiskit Opflow."
msgstr "Podemos construir los circuitos SEA con herramientas de Qiskit Opflow."

#: ../../tutorials/sea_with_sampler.ipynb:106
msgid "Time evolve the resonance Hamiltonian."
msgstr "El tiempo evoluciona el Hamiltoniano de resonancia."

#: ../../tutorials/sea_with_sampler.ipynb:128
msgid "From the time-evolution operator :math:`U_{\\rm ham}`, we use the Suzuki-Trotter expansion to convert this operator into quantum circuits that implement discrete time steps of the simulation. The smaller the time steps (more Trotter steps), the more accurate the quantum circuit, but also longer depth, which could introduce errors when executing on noisy quantum hardware. We then transpile the circuits to IBM backend basis gates and measure only the probe qubit ``q0``."
msgstr ""

#: ../../tutorials/sea_with_sampler.ipynb:206
msgid "Now let’s fix our parameters and sweep over frequency with a number of points ``num_pts``. The eigenvalues of our model Hamiltonian :math:`H_{\\rm Pauli}` are :math:`\\pm \\mu`, so we need to choose a range that includes those numbers."
msgstr "Ahora fijemos nuestros parámetros y hagamos un barrido sobre la frecuencia con un número de puntos ``num_pts``. Los valores propios de nuestro modelo Hamiltoniano :math:`H_{\\rm Pauli}` son :math:`\\pm \\mu`, por lo que debemos elegir un rango que incluya esos números."

#: ../../tutorials/sea_with_sampler.ipynb:208
msgid "Note that the ``Parameter``\\ s’ keys and values must be separared and converted into a ``List`` of ``List``\\ s. The keys give us the ``Parameter``\\ s inside each circuit. In this case, we only have a single circuit, so the ``List`` of keys contains a single ``List``. For the ``Parameter`` values, there is a ``List`` for each value of ``ww``."
msgstr "Ten en cuenta que las claves y valores de los ``Parameter``\\ s deben separarse y convertirse en una ``List`` de ``List``\\ s. Las claves nos dan los ``Parameter``\\ s dentro de cada circuito. En este caso, tenemos solo un circuito, por lo que la ``List`` de claves contiene una sola ``List``. Para los valores de ``Parameter``, hay una ``List`` para cada valor de ``ww``."

#: ../../tutorials/sea_with_sampler.ipynb:241
msgid "In the ``Sampler`` class, we pass the list of circuits and parameter keys in the constructor. When calling the ``sampler``, we specify a list of ``circuits`` pointing to the circuits desired to be run (which was passed to the constructor), in this case, the index ``0`` ``num_pts`` times."
msgstr "En la clase ``Sampler``, pasamos la lista de circuitos y claves de parámetros en el constructor. Al llamar al ``sampler``, especificamos una lista de ``circuits`` apuntando a los circuitos que se desean ejecutar (que se pasó al constructor), en este caso, el índice ``0``, ``num_pts`` veces."

#: ../../tutorials/sea_with_sampler.ipynb:272
msgid "Build the :math:`Z` expectations by converting quasi-probabilities to :math:`\\langle Z \\rangle`."
msgstr "Construye los valores esperados de :math:`Z` convirtiendo las cuasi-probabilidades en :math:`\\langle Z \\rangle`."

#: ../../tutorials/sea_with_sampler.ipynb:298
msgid "As a sanity check, we’ll calculate the exact expectation values with Qiskit Opflow."
msgstr "Como comprobación, calcularemos los valores esperados exactos con Qiskit Opflow."

#: ../../tutorials/sea_with_sampler.ipynb:329
msgid "And plotting everything together shows that the energy at which our peaks occurs to be :math:`\\pm \\mu`."
msgstr "Y graficar todo junto muestra que la energía en la que ocurren nuestros picos es :math:`\\pm \\mu`."

