msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-18 21:33+0000\n"
"PO-Revision-Date: 2023-10-18 22:24\n"
"Last-Translator: \n"
"Language: es_UN\n"
"Language-Team: Spanish (United)\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.0\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /main/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/grover_with_sampler.po\n"
"X-Crowdin-File-ID: 9816\n"

#: ../../tutorials/grover_with_sampler.ipynb:9
msgid "This page was generated from `docs/tutorials/grover_with_sampler.ipynb`__."
msgstr "Esta página fue generada a partir de `docs/tutorials/grover_with_sampler.ipynb`__."

#: ../../tutorials/grover_with_sampler.ipynb:9
msgid "Grover's algorithm using the Sampler primitive"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:21
msgid "Background"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:23
msgid "Amplitude amplification is a general purpose quantum algorithm, or subroutine, that can be used to obtain a quadratic speedup over a handful of classical algorithms. `Grover’s algorithm <https://arxiv.org/abs/quant-ph/9605043>`__ was the first to demonstrate this speedup on unstructured search problems. Formulating a Grover's search problem requires an oracle function that marks one or more computational basis states as the states we are interested in finding, and an amplification circuit that increases the amplitude of marked states, consequently suppressing the remaining states."
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:26
msgid "Here we demonstrate how to construct Grover oracles and make use of the ``GroverOperator`` from the Qiskit circuit library to easily setup a Grover's search instance. The runtime ``Sampler`` primitive allows for seamless execution of Grover circuits, including automatic compilation, error suppression, and readout error mitigation techniques."
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:38
msgid "Setup"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:40
msgid "Here we import the small number of tools we need for this tutorial."
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:71
msgid "Initialize Runtime service and select backends"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:73
msgid "Here we instantiate the Runtime service that gives access to the quantum devices and the simulator that we use in this tutorial. We will first use a simulator to validate our circuit, then execute it on a real quantum system."
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:106
msgid "Define a Grover experiment"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:108
msgid "Grover's algorithm requires an `oracle <https://quantum-computing.ibm.com/admin/docs/admin/guide/grovers-algorithm#the-oracle>`__ that specifies one or more marked computational basis states, where \"marked\" means a state with a phase of -1. A controlled-Z gate, or its multi-controlled generalization over :math:`N` qubits, marks the :math:`2^{N}-1` state (``'1'``\\ \\*\\ :math:`N` bit-string). Marking basis states with one or more ``'0'`` in the binary representation requires applying X-gates on the corresponding qubits before and after the controlled-Z gate; equivalent to having an open-control on that qubit. In the following code, we define an oracle that does just that, marking one or more input basis states defined through their bit-string representation. The ``MCMT`` gate is used to implement the multi-controlled Z-gate."
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:159
msgid "Specific Grover's instance"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:161
msgid "Now that we have the oracle function, we can define a specific instance of Grover search. In this example we will mark two computational states out of the eight available in a three-qubit computational space:"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:195
msgid "The ``GroverOperator``"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:197
msgid "The built-in Qiskit ``GroverOperator`` takes an oracle circuit and returns a circuit that is composed of the oracle circuit itself and a circuit that amplifies the states marked by the oracle. Here, we ``decompose`` the circuit to see the gates within the operator:"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:228
msgid "Repeated applications of this ``grover_op`` circuit amplify the marked states, making them the most probable bit-strings in the output distribution from the circuit. There is an optimal number of such applications that is determined by the ratio of marked states to total number of possible computational states:"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:252
msgid "Full Grover circuit"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:254
msgid "A complete Grover experiment starts with a Hadamard gate on each qubit; creating an even superposition of all computational basis states, followed the Grover operator (``grover_op``) repeated the optimal number of times. Here we make use of the ``QuantumCircuit.power(INT)`` method to repeatedly apply the Grover operator."
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:292
msgid "Execution with the Sampler primitive"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:294
msgid "Amplitude amplification is a sampling problem that is suitable for execution with the ``Sampler`` runtime primitive. Because we have a single circuit, we instantiate a ``Sampler`` using the target backend. To begin, this is the simulator:"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:315
msgid "Now we execute the circuit by using ``sim_sampler.run``. The result is obtained in the returned quasi-probability distribution:"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:336
msgid "To see that the marked states are visible in the returned distribution, we convert the returned quasi-probability distribution from integer to bit-string representation to compare to the list of ``marked_states``."
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:371
msgid "Having verified that our code does indeed produce the desired outcome, we now execute it on a real device, creating an ``Sampler`` instance targeting that system:"
msgstr ""

