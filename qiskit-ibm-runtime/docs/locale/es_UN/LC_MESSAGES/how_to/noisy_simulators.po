msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-30 17:25+0000\n"
"PO-Revision-Date: 2023-04-03 19:14\n"
"Last-Translator: \n"
"Language: es_UN\n"
"Language-Team: Spanish (United)\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/how_to/noisy_simulators.po\n"
"X-Crowdin-File-ID: 9941\n"

#: ../../how_to/noisy_simulators.rst:2
msgid "Noisy simulators in Qiskit Runtime"
msgstr "Simuladores ruidosos en Qiskit Runtime"

#: ../../how_to/noisy_simulators.rst:4
msgid "This notebook shows how to set up ``ibmq_qasm_simulator`` and map a basic noise model for an IBM Quantum hardware device in **Qiskit Runtime**, and use this noise model to perform noisy simulations of ``QuantumCircuits`` using ``Sampler`` and ``Estimator`` to study the effects of errors which occur on real devices."
msgstr "Este cuaderno muestra cómo configurar ``ibmq_qasm_simulator`` y mapear un modelo de ruido básico para un dispositivo de hardware IBM Quantum en **Qiskit Runtime**, y usar este modelo de ruido para realizar simulaciones ruidosas de ``QuantumCircuits`` usando ``Sampler`` y ``Estimator`` para estudiar los efectos de los errores que se producen en dispositivos reales."

#: ../../how_to/noisy_simulators.rst:11
msgid "Set up your local development environment"
msgstr "Configurar tu entorno de desarrollo local"

#: ../../how_to/noisy_simulators.rst:13
msgid "This tutorial requires a Qiskit Runtime service instance to be setup. If you haven’t done so already, follow `these steps <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ to set one up."
msgstr "Este tutorial requiere que se configure una instancia del servicio Qiskit Runtime. Si aún no lo has hecho, sigue `estos pasos <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ para configurar uno."

#: ../../how_to/noisy_simulators.rst:26
msgid "Preparing the environment"
msgstr "Preparar el entorno"

#: ../../how_to/noisy_simulators.rst:28
msgid "To demonstrate the routine, we shall proceed with running an example routine. One of the major benefits of using primitives is simplification of binding multiple parameters in parameterized circuits. To check this, here is an example circuit with a controlled `P-gate <https://qiskit.org/documentation/stubs/qiskit.circuit.library.PhaseGate.html>`__ as implemented in the following code. Here, we parametrise the ``P-gate`` with a rotation parameter ``theta``. To learn how to create circuits and bind parameters to them by using Qiskit, see the `Circuit Basics <https://qiskit.org/documentation/tutorials/circuits/01_circuit_basics.html>`__ and `Advanced Circuits <https://qiskit.org/documentation/tutorials/circuits_advanced/01_advanced_circuits.html#Parameterized-circuits>`__ in Qiskit documentation."
msgstr "Para demostrar la rutina, procederemos a ejecutar una rutina de ejemplo. Uno de los principales beneficios del uso de primitivas es la simplificación de vincular múltiples parámetros en circuitos parametrizados. Para verificar esto, aquí hay un circuito de ejemplo con una `compuerta P <https://qiskit.org/documentation/stubs/qiskit.circuit.library.PhaseGate.html>`__ controlada como se implementa en el siguiente código. Aquí, parametrizamos la ``P-gate`` con un parámetro de rotación ``theta``. Para aprender a crear circuitos y vincularles parámetros usando Qiskit, consulta `Aspectos Básicos de un Circuito <https://qiskit.org/documentation/tutorials/circuits/01_circuit_basics.html>`__ y `Circuitos Avanzados <https://qiskit.org/documentation/tutorials/circuits_advanced/01_advanced_circuits.html#Parameterized-circuits>`__ en la documentación de Qiskit."

#: ../../how_to/noisy_simulators.rst:64
msgid "The circuit shown by the previous cell is parameterized with the eigenvalue being kicked back into qubit 0 to be measured. The amount of kickback will be determined by the parameter theta. Now in the following cell, we shall define our parameters for our circuit as a list. The parameters here will be from :math:`0` to :math:`2\\pi` divided over 50 evenly spaced points."
msgstr "El circuito que se muestra en la celda anterior está parametrizado con el valor propio que se devuelve (kickback) al qubit 0 a ser medido. La cantidad de retroceso (kickback) estará determinada por el parámetro theta. Ahora, en la siguiente celda, definiremos nuestros parámetros para nuestro circuito como una lista. Los parámetros aquí serán de :math:`0` a :math:`2\\pi` divididos en 50 puntos espaciados uniformemente."

#: ../../how_to/noisy_simulators.rst:80
msgid "Running on the ideal simulator"
msgstr "Ejecutar en el simulador ideal"

#: ../../how_to/noisy_simulators.rst:83
msgid "Set the backend and options to use"
msgstr "Establecer el backend y las opciones a usar"

#: ../../how_to/noisy_simulators.rst:85
msgid "First we shall demonstrate a run using an ideal case without any ``noise_model``, ``optimization_level`` or ``resilience_level`` for both Sampler and Estimator. We shall proceed to setup the options in the following code:"
msgstr "Primero demostraremos una ejecución usando un caso ideal sin ningún ``noise_model``, ``optimization_level`` o ``resilience_level`` tanto para Sampler como para Estimator. Procederemos a configurar las opciones en el siguiente código:"

#: ../../how_to/noisy_simulators.rst:103
msgid "Run the circuits on Sampler"
msgstr "Ejecutar los circuitos en Sampler"

#: ../../how_to/noisy_simulators.rst:105
msgid "We shall now sample the circuit to get the result probability distribution using the `Sampler primitive <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.Sampler.html>`__ to do the same. To learn how to use the ``Sampler`` primitive and how to get started using Qiskit Runtime Sessions, you can check this tutorial: `Get started with the Sampler primitive <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials/how-to-getting-started-with-sampler.html>`__."
msgstr "Ahora probaremos el circuito para obtener el resultado de la distribución de probabilidad utilizando la `primitiva Sampler <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.Sampler.html>`__ para hacer lo mismo. Para aprender a usar la primitiva ``Sampler`` y cómo comenzar a usar las Sesiones de Qiskit Runtime, puedes consultar este tutorial: `Primeros pasos con la primitiva Sampler <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials/how-to-getting-started-with-sampler.html>`__."

#: ../../how_to/noisy_simulators.rst:150
msgid "Run the circuits on Estimator"
msgstr "Ejecutar los circuitos en Estimator"

#: ../../how_to/noisy_simulators.rst:152
msgid "To learn how to start a session for Estimator, you may check this tutorial: `Get started with the Estimator primitive <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials/how-to-getting-started-with-estimator.html>`__."
msgstr "Para aprender cómo iniciar una sesión para Estimator, puedes consultar este tutorial: `Primeros pasos con la primitiva Estimator <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials/how-to-getting-started-with-estimator.html>`__."

#: ../../how_to/noisy_simulators.rst:156
msgid "The Estimator will bind single-qubit rotations to get Hamiltonians before it returns expectation values of quantum operators. Therefore, the circuit doesn’t require any measurements. Currently the circuit ``qc`` has measurements so we will remove these with ``remove_final_measurements``."
msgstr "El Estimator vinculará las rotaciones de un solo qubit para obtener Hamiltonianos antes de devolver los valores esperados de los operadores cuánticos. Por lo tanto, el circuito no requiere ninguna medición. Actualmente, el circuito ``qc`` tiene mediciones, por lo que las eliminaremos con ``remove_final_measurements``."

#: ../../how_to/noisy_simulators.rst:187
msgid "With this observable, the expectation value is calculated by the following equation."
msgstr "Con este observable, el valor esperado se calcula mediante la siguiente ecuación."

#: ../../how_to/noisy_simulators.rst:190
msgid "\\langle ZZ\\rangle =\\langle \\psi | ZZ | \\psi\\rangle=\\langle \\psi|(|0\\rangle\\langle 0| -|1\\rangle\\langle 1|)\\otimes(|0\\rangle\\langle 0| - |1\\rangle\\langle 1|) |\\psi\\rangle =|\\langle 00|\\psi\\rangle|^2 - |\\langle 01 | \\psi\\rangle|^2 - |\\langle 10 | \\psi\\rangle|^2 + |\\langle 11|\\psi\\rangle|^2"
msgstr "\\langle ZZ\\rangle =\\langle \\psi | ZZ | \\psi\\rangle=\\langle \\psi|(|0\\rangle\\langle 0| -|1\\rangle\\langle 1|)\\otimes(|0\\rangle\\langle 0| - |1\\rangle\\langle 1|) |\\psi\\rangle =|\\langle 00|\\psi\\rangle|^2 - |\\langle 01 | \\psi\\rangle|^2 - |\\langle 10 | \\psi\\rangle|^2 + |\\langle 11|\\psi\\rangle|^2"

#: ../../how_to/noisy_simulators.rst:194
msgid "The next cell will implement this as shown."
msgstr "La siguiente celda implementará esto como se muestra."

#: ../../how_to/noisy_simulators.rst:231
msgid "Running a noisy simulation"
msgstr "Ejecutar una simulación ruidosa"

#: ../../how_to/noisy_simulators.rst:233
msgid "Now we’ll setup our simulator to run a noisy simulation rather than the ideal one. We can pass a custom ``noise_model`` to the simulator on Runtime by specifying it in the ``Options`` parameter. Here we will try to mimic a real backend and map on the ``noise_model`` from a ``FakeBackend`` class. The noise model can be extracted from the ``FakeBackend`` and passed as a ``simulator`` parameter in options. If you want to know more about ``fake_provider``, check `Fake Provider <https://qiskit.org/documentation/apidoc/providers_fake_provider.html>`__ in Qiskit documentation."
msgstr "Ahora configuraremos nuestro simulador para ejecutar una simulación ruidosa en lugar de la ideal. Podemos pasar un ``noise_model`` personalizado al simulador en Runtime especificándolo en el parámetro ``Options``. Aquí intentaremos imitar un backend real y mapear en el ``noise_model`` de una clase ``FakeBackend``. El modelo de ruido se puede extraer de ``FakeBackend`` y pasarlo como un parámetro ``simulator`` en las opciones. Si deseas obtener más información sobre ``fake_provider``, consulta `Fake Provider <https://qiskit.org/documentation/apidoc/providers_fake_provider.html>`__ en la documentación de Qiskit."

#: ../../how_to/noisy_simulators.rst:243
msgid "Since we are trying to mimic a real backend, we can also pass in the ``coupling_map`` that the backend topology has and the ``basis_gates`` that the backend supports to have a more realistic noisy simulation."
msgstr "Dado que estamos tratando de imitar un backend real, también podemos pasar el ``coupling_map`` que tiene la topología del backend y las ``basis_gates`` que admite el backend para tener una simulación ruidosa más realista."

#: ../../how_to/noisy_simulators.rst:270
msgid "The ``ibmq_qasm_simulator`` allows for the activation of the ``resilience_levels`` offered by the Qiskit Runtime Service, and use of these levels on simulators is best demonstrated using the noisy simulation as we have described previously."
msgstr "El ``ibmq_qasm_simulator`` permite la activación de ``resilience_levels`` ofrecidos por el Servicio Qiskit Runtime, y el uso de estos niveles en simuladores se demuestra mejor usando la simulación ruidosa como se ha descrito anteriormente."

#: ../../how_to/noisy_simulators.rst:275
msgid "To see the comparison, we shall define two set of ``Options``. The ``ibmq_qasm_simulator`` allows for the activation of the resilience levels offered by Qiskit Runtime, and the use of these levels on simulators is best demonstrated using the noisy simulation that we have built. Here, ``options`` is set to\\ ``resilience level`` = ``0`` to represent a normal run without error mitigation, and ``options with em`` is set to ``resilience level`` = ``1`` to represent a run with error mitigation enabled."
msgstr "Para ver la comparación, definiremos dos conjuntos de ``Options``. El ``ibmq_qasm_simulator`` permite la activación de los niveles de resiliencia ofrecidos por Qiskit Runtime, y el uso de estos niveles en simuladores se demuestra mejor mediante la simulación ruidosa que hemos creado. Aquí, ``options`` se establece en\\ ``resilience level`` = ``0`` para representar una ejecución normal sin mitigación de errores, y ``options with em`` se establece en ``resilience level`` = ``1`` para representar una ejecución con la mitigación de errores habilitada."

#: ../../how_to/noisy_simulators.rst:299
msgid "When you set the ``resilience_level`` to 1, M3 is activated in Sampler. All available resilience level configurations can be found `here <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/how_to/error-mitigation.html>`__."
msgstr "Cuando estableces ``resilience_level`` en 1, M3 se activa en Sampler. Todas las configuraciones de nivel de resiliencia disponibles se pueden encontrar `aquí <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/how_to/error-mitigation.html>`__."

#: ../../how_to/noisy_simulators.rst:346
msgid "``T-REx`` is triggered in Estimator when the resilience level is set to 1."
msgstr "``T-REx`` se activa en Estimator cuando el nivel de resiliencia se establece en 1."

#: ../../how_to/noisy_simulators.rst:395
msgid "Resilience levels are currently in beta so sampling overhead and solution quality will vary from circuit to circuit. New features, advanced options and management tools will be released on a rolling basis. You can also play around with higher levels of resilience and explore additional options offered by them. If you want to learn more about activating features like *Digital-ZNE*, *PEC* in addition to *M3* and *T-REx* as shown in the previous examples, check out this tutorial: `Error suppression and error mitigation with Qiskit Runtime <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials/Error-Suppression-and-Error-Mitigation.html>`__."
msgstr "Los niveles de resiliencia se encuentran actualmente en versión beta, por lo que la sobrecarga de muestreo y la calidad de la solución variarán de un circuito a otro. Se lanzarán nuevas funciones, opciones avanzadas y herramientas de gestión de forma continua. También puedes jugar con niveles más altos de resiliencia y explorar opciones adicionales que ofrecen. Si deseas obtener más información sobre la activación de funciones como *Digital-ZNE*, *PEC* además de *M3* y *T-REx* como se muestra en los ejemplos anteriores, consulta este tutorial: `Supresión y mitigación de errores con Qiskit Runtime <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials/Error-Suppression-and-Error-Mitigation.html>`__."

