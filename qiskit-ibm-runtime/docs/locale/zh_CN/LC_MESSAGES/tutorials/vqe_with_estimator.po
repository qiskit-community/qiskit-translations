msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-30 17:25+0000\n"
"PO-Revision-Date: 2023-03-30 18:14\n"
"Last-Translator: \n"
"Language: zh\n"
"Language-Team: Chinese Simplified\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: zh-CN\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/vqe_with_estimator.po\n"
"X-Crowdin-File-ID: 9834\n"

#: ../../tutorials/vqe_with_estimator.ipynb:9
msgid "This page was generated from `docs/tutorials/vqe_with_estimator.ipynb`__."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:9
msgid "Variational Quantum Eigensolver with Estimator primitive"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:12
msgid "Overview"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:14
msgid "The Variational Quantum Eigensolver (VQE) is an optimization routine for finding the ground state energy (the lowest eigenvalue) of a `Hamiltonian <https://en.wikipedia.org/wiki/Hamiltonian_(quantum_mechanics)>`__ and is a considered to be a viable candidate for near-term hardware. In this tutorial, you will learn how to use Qiskit Runtime to submit variational jobs using the ``Estimator`` primitive. Specifically, you will calculate the ground state energy of the :math:`H_2` molecule."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:26
msgid "Set up your local development environment"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:28
msgid "This tutorial requires a Qiskit Runtime service instance. If you havenâ€™t done so already, follow `these steps <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ to set one up."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:40
msgid "Generate molecular Hamiltonians"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:42
msgid "This tutorial uses Qiskit Nature to generate and handle molecular Hamiltonians. If you haven't already, you can install Qiskit Nature (and the PySCF addon) using the following commands. For more information about Qiskit Nature, see the `Getting started guide <https://qiskit.org/documentation/nature/getting_started.html>`__."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:49
msgid "Next, we will generate the Hamiltonians that we want to find the ground state energy of. The first step is to use the ``PySCFDriver`` to convert a string representing our molecule to an ``ElectronicStructureProblem``. The next step is to use the ``ParityMapper`` to convert this problem into a qubit Hamiltonian that can run on a quantum computer."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:81
msgid "Solve classically"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:83
msgid "Since this problem is very small, we can solve it exactly using classical methods. The following code uses the minimum eigensolver from the ``NumPy`` package to find the electronic ground state energy (in Hartree units), which we will use to assess the performance of the VQE."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:135
msgid "Solve with VQE"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:137
msgid "Next, we will create our service instance and specify our backend. In this example we will use a simulator to avoid queue times, but you can use the following code to run on a real device by simply changing the backend."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:162
msgid "The next code cell specifies how we want to run the VQE. This includes"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:164
msgid "the type of circuit (ansatz) used to create our trial state,"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:165
msgid "the classical algorithm that decides how to adjust our trial state to achieve better solutions, and"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:166
msgid "the starting parameters."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:168
msgid "We will also create a simple object to log our intermediate results for plotting later."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:222
msgid "The next code cell runs the VQE algorithm. If you chose to run on a real device, the code runs `zero-noise extrapolation <https://arxiv.org/abs/2005.10921>`__ on the final result to estimate the effects of noise, and guess what the result would be from a noiseless device."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:296
msgid "Finally, the following code cell plots the intermediate results from the optimization process. The optimization algorithm tweaks the parameters to gradually home in on values that produce lower energies. Provided the algorithm does not get caught in a local minima, this graph will plateau at the electronic ground state energy of the molecule."
msgstr ""

