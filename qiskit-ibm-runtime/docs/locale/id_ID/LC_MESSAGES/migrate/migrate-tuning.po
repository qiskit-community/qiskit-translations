msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-13 17:24+0000\n"
"PO-Revision-Date: 2023-04-13 17:45\n"
"Last-Translator: \n"
"Language: id\n"
"Language-Team: Indonesian\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/migrate/migrate-tuning.po\n"
"X-Crowdin-File-ID: 9959\n"

#: ../../migrate/migrate-tuning.rst:2
msgid "Guide on algorithm tuning options"
msgstr ""

#: ../../migrate/migrate-tuning.rst:4
msgid "One of the advantages of the primitives is that they abstract away the circuit execution setup so that algorithm developers can focus on the pure algorithmic components. However, sometimes, to get the most out of an algorithm, you might want to tune certain primitive options. This section describes some of the common settings you might need."
msgstr ""

#: ../../migrate/migrate-tuning.rst:16
msgid "This section focuses on Qiskit Runtime primitive :class:`.Options` (imported from ``qiskit_ibm_runtime``). While most of the `primitives` interface is common across implementations, most :class:`.Options` are not. Consult the corresponding API references for information about the |qiskit.primitives|_ and |qiskit_aer.primitives|_ options."
msgstr ""

#: ../../migrate/migrate-tuning.rst:21
msgid "1. Shots"
msgstr ""

#: ../../migrate/migrate-tuning.rst:23
msgid "For some algorithms, setting a specific number of shots is a core part of their routines. Previously, shots could be set during the call to `backend.run()`. For example, ``backend.run(shots=1024)``. Now, that setting is part of the execution options (\"second level option\"). This can be done during the primitive setup:"
msgstr ""

#: ../../migrate/migrate-tuning.rst:36
msgid "If you need to modify the number of shots set between iterations (primitive calls), you can set the shots directly in the ``run()`` method. This overwrites the initial ``shots`` setting."
msgstr ""

#: ../../migrate/migrate-tuning.rst:51
msgid "For more information about the primitive options, refer to the `Options class API reference <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.options.Options.html#qiskit_ibm_runtime.options.Options>`_."
msgstr ""

#: ../../migrate/migrate-tuning.rst:56
msgid "2. Transpilation"
msgstr ""

#: ../../migrate/migrate-tuning.rst:58
msgid "By default, the Qiskit Runtime primitives perform circuit transpilation. There are several optimization levels you can choose from. These levels affect the transpilation strategy and might include additional error suppression mechanisms. Level 0 only involves basic transpilation. To learn about each optimization level, view the Optimization level table in the `Error suppression topic <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/how_to/error-suppression.html#setting-the-optimization-level>`__."
msgstr ""

#: ../../migrate/migrate-tuning.rst:64
msgid "The optimization level option is a \"first level option\", and can be set as follows:"
msgstr ""

#: ../../migrate/migrate-tuning.rst:79
msgid "You might want to configure your transpilation strategy further, and for this, there are advanced transpilation options you can set up. These are \"second level options\", and can be set as follows:"
msgstr ""

#: ../../migrate/migrate-tuning.rst:92
msgid "For more information, and a complete list of advanced transpilation options, see the Advanced transpilation options table in the `Error suppression topic <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/how_to/error-suppression.html#advanced-transpilation-options>`__."
msgstr ""

#: ../../migrate/migrate-tuning.rst:95
msgid "Finally, you might want to specify settings that are not available through the primitives interface, or use custom transpiler passes. In these cases, you can set ``skip_transpilation=True`` to submit user-transpiled circuits. To learn how this is done, refer to the `Submitting user-transpiled circuits using primitives tutorial <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials/user-transpiled-circuits.html>`_."
msgstr ""

#: ../../migrate/migrate-tuning.rst:100
msgid "The ``skip_transpilation`` option is an advanced transpilation option, set as follows:"
msgstr ""

#: ../../migrate/migrate-tuning.rst:113
msgid "3. Error mitigation"
msgstr ""

#: ../../migrate/migrate-tuning.rst:115
msgid "You might want to leverage different error mitigation methods and see how these affect the performance of your algorithm. These can also be set through the ``resilience_level`` option. The method selected for each level is different for ``Sampler`` and ``Estimator``. You can find more information in the `Configure error mitigation topic <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/how_to/error-mitigation.html>`_."
msgstr ""

#: ../../migrate/migrate-tuning.rst:120
msgid "The configuration is similar to the other options:"
msgstr ""

