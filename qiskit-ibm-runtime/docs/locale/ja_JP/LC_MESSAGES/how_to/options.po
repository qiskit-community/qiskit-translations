msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-18 21:33+0000\n"
"PO-Revision-Date: 2023-10-18 21:55\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.0\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /main/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/how_to/options.po\n"
"X-Crowdin-File-ID: 9921\n"

#: ../../how_to/options.rst:2
msgid "Configure primitive options"
msgstr "Primitive optionの設定"

#: ../../how_to/options.rst:4
msgid "When calling the primitives, you can pass in options, as shown in the line ``estimator = Estimator(options=options)`` in the following code example:"
msgstr "Primitives を呼び出す場合、次のコードの行の ``estimator = Estimator(options=options)`` に示すように、オプションを渡すことができます:"

#: ../../how_to/options.rst:20
msgid "You can also overwrite specific options for a job when calling ``run()``. In the following code example, the job will run with optimization level 1 and 4000 shots (instead of 1000):"
msgstr "``run()`` を呼び出す際に、ジョブの特定の option を上書きすることもできます。以下のコード例では、ジョブは optimization level 1 と4000 shots（1000 shots の代わりに）で実行されます："

#: ../../how_to/options.rst:37
msgid "The most commonly used options are for error suppression and mitigation, which are described in this topic. For a full list of available options, see the `Options API reference <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.options.Options.html#qiskit_ibm_runtime.options.Options>`__."
msgstr "最も一般的に使用されるオプションは、このトピックで説明されているエラー抑制と緩和のためのオプションです。 利用可能なオプションの完全なリストについては、 `Options API reference <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.options.Options.html#qiskit_ibm_runtime.options.Options>`__ を参照してください。"

#: ../../how_to/options.rst:40
msgid "Overview of error suppression and mitigation"
msgstr "エラー抑制と軽減の概要"

#: ../../how_to/options.rst:42
msgid "No computing platform is perfect, and because quantum computers are such new and complex technology, we have to find new ways of dealing with these imperfections.  There are several possible causes for errors: “noise” - disturbances in the physical environment, and “bit errors”, which cause the qubit's value or phase to change.  IBM builds redundancy into the hardware to ensure that even if some qubits error out, an accurate result is still returned.  However, we can further address errors by using error suppression and error mitigation techniques  These strategies make use of pre- and post-processing to improve the quality of the results produced for the input circuit."
msgstr "コンピューティングプラットフォームに完璧はありません。量子コンピューターは新しく複雑な技術であるため、このような不完全性に対処する新しい方法を見つけなければならないのです。エラーの原因はいくつか考えられます：物理環境の乱れである「ノイズ」や、量子ビットの値や位相が変化してしまう「ビットエラー」。IBMでは、一部の量子ビットがエラーになっても正確な結果が返されるように、ハードウェアに冗長性を持たせています。しかし、エラー抑制やエラー緩和の技術を用いることで、さらにエラーに対処することができます。これらの戦略は、入力回路に対して生成される結果の質を向上させるために、事前および事後の処理を利用します。"

#: ../../how_to/options.rst:44
msgid "**Error suppression**: Techniques that optimize and transform your circuit at the point of compilation to minimize errors. This is the most basic error handling technique.  Error suppression typically results in some classical pre-processing overhead to your overall runtime."
msgstr "**エラー抑制**: コンパイルの時点で回路を最適化したり変形させたりして、エラーを最小限に抑える技術。最も基本的なエラー処理技術です。 エラー抑制は、通常、runtime 全体に古典的な前処理オーバーヘッドをもたらします。"

#: ../../how_to/options.rst:46
msgid "Primitives let you employ error suppression techniques by setting the optimization level (``optimization_level`` option) and by choosing advanced transpilation options.  See `Configure error suppression <error-suppression.html>`__ for details."
msgstr "Primitive では、最適化レベルの設定 (``optimization_level`` オプション) や、高度なトランスパイルオプションの選択によって、エラー抑制のテクニックを使用することができます。 詳しくは `エラー抑制の設定 <error-suppression.html>`__ を参照してください。"

#: ../../how_to/options.rst:48
msgid "**Error mitigation**: Techniques that allow users to mitigate circuit errors by modeling the device noise at the time of execution. This typically results in quantum pre-processing overhead related to model training, and classical post-processing overhead to mitigate errors in the raw results by using the generated model."
msgstr "**誤り軽減**: 実行時のデバイス・ノイズをモデル化することで、回路エラーを軽減する技術です。 これは通常、モデルのトレーニングに関連する量子的な前処理のオーバーヘッドと、生成モデルを使用して生の結果のエラーを軽減するための古典的な後処理のオーバーヘッドになります。"

#: ../../how_to/options.rst:50
msgid "The error mitigation techniques built in to primitives are advanced resilience options.   To specify these options, use the ``resilience_level`` when submitting your job.  See `Configure error mitigation <error-mitigation.html>`__ for details."
msgstr "Primitive に組み込まれた誤り軽減技術は、高度なresilienceオプションです。  これらのオプションを指定するには、ジョブを投入する際に ``resilience_level`` を使用します。 詳細は `エラー緩和の設定 <error-mitigation.html>`__ を参照してください。"

