msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-07 22:26+0000\n"
"PO-Revision-Date: 2023-03-01 12:49\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/how_to/noisy_simulators.po\n"
"X-Crowdin-File-ID: 9941\n"

#: ../../how_to/noisy_simulators.rst:2
msgid "Noisy Simulators in Qiskit Runtime"
msgstr "Qiskit Runtimeのノイズのあるシミュレーター"

#: ../../how_to/noisy_simulators.rst:4
msgid "This notebook shows how to setup ``ibmq_qasm_simulator`` and map a basic noise model for an IBM Quantum hardware device in **Qiskit Runtime**, and use this noise model to do noisy simulations of ``QuantumCircuits`` on ``Sampler`` and ``Estimator`` to study the effects of errors which occur on real devices."
msgstr "このノートブックは、 ``ibmq_qasm_simulator`` をセットアップし、**Qiskit Runtime** でIBM Quantumハードウェア・デバイス用の基本的なノイズモデルをマッピングする方法を示します。 実際のデバイスで発生するエラーの影響を調べるために、このノイズモデルを使用して、 ``Sampler`` と ``Estimator`` 上で ``QuantumCircuits`` のノイズ・シミュレーションを行います。"

#: ../../how_to/noisy_simulators.rst:11
msgid "Set up your local development environment"
msgstr "ローカル開発環境のセットアップ"

#: ../../how_to/noisy_simulators.rst:13
msgid "This tutorial requires a Qiskit Runtime service instance to be setup. If you haven’t done so already, please follow `these steps <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ to set one up."
msgstr "このチュートリアルでは、Qiskit Runtime サービス・インスタンスが必要です。まだ実行していない場合は、`これらの手順 <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ に従ってセットアップします。"

#: ../../how_to/noisy_simulators.rst:26
msgid "Preparing the environment"
msgstr "環境の準備"

#: ../../how_to/noisy_simulators.rst:28
msgid "To demonstrate the routine, we shall proceed with running an example routine. One of the major benefits of using primitives is simplification of binding multiple parameters in parameterized circuits. To check this, here is an example circuit with a controlled `P-gate <https://qiskit.org/documentation/stubs/qiskit.circuit.library.PhaseGate.html>`__ as implemented right below. Here, we parametrise the ``P-gate`` with a rotation parameter ``theta``. To learn how to create circuits and bind parameters to them by using Qiskit, see the `Circuit Basics <https://qiskit.org/documentation/tutorials/circuits/01_circuit_basics.html>`__ and `Advanced Circuits <https://qiskit.org/documentation/tutorials/circuits_advanced/01_advanced_circuits.html#Parameterized-circuits>`__ in Qiskit documentation."
msgstr "デモンストレーションをするために、サンプル・ルーチンを実行していきましょう。 primitiveを使用する主な利点の 1 つは、パラメーター化された回路で、複数のパラメーターの結合を単純化することです。 これを確認するために、制御 `P ゲート <https://qiskit.org/documentation/stubs/qiskit.circuit.library.PhaseGate.html>`__ を持つ回路の例を以下に示します。 ここでは、``P-gate`` を回転パラメーター ``theta`` でパラメーター化します。 Qiskitを使用して回路作成しパラメーターを結合する方法を学習するには、 Qiskit ドキュメンテーションの `回路の基本 <https://qiskit.org/documentation/tutorials/circuits/01_circuit_basics.html>`__ および `回路の応用 <https://qiskit.org/documentation/tutorials/circuits_advanced/01_advanced_circuits.html#Parameterized-circuits>`__ を参照してください。"

#: ../../how_to/noisy_simulators.rst:64
msgid "The circuit shown above is parameterized with the eigenvalue being kicked back into qubit 0 to be measured. The amount of kickback will be determined by the parameter theta. Now in the cell below, we shall define our parameters for our above circuit as a list. The parameters here will be from :math:`0` to :math:`2\\pi` divided over 50 evenly spaced points."
msgstr "上記の回路は、測定する量子ビット0にキックバックされる固有値でパラメーター化されます。 キックバックの量はパラメーター thetaによって決定されます。 以下のセルでは、上記の回路のパラメーターをリストとして定義します。 ここでのパラメーターは、 :math:`0` から :math:`2\\pi` までで、50個の均等な間隔の点に分けられます。"

#: ../../how_to/noisy_simulators.rst:81
msgid "Running on the ideal simulator"
msgstr "理想的なシミュレーターでの実行"

#: ../../how_to/noisy_simulators.rst:84
msgid "Set the backend and options to use"
msgstr "使用するバックエンドとオプションの設定"

#: ../../how_to/noisy_simulators.rst:86
msgid "First we shall demonstrate a run using an ideal case without any ``noise_model``, ``optimization_level`` or ``resilience_level`` for both Sampler and Estimator. We shall proceed to setup the options as shown below:"
msgstr "最初に、Sampler と Estimator の両方で ``noise_model`` 、``optimization_level`` または ``reverence_level`` がない理想的なケースを使用して実行することを示します。 以下のようにオプションの設定に進みます。"

#: ../../how_to/noisy_simulators.rst:104
msgid "Run the circuits on Sampler"
msgstr "Samplerでの回路の実行"

#: ../../how_to/noisy_simulators.rst:106
msgid "We shall now sample the circuit to get the result probability distribution. We shall be utilizing the `Sampler primitive <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.Sampler.html>`__ to do the same. To learn how to use the ``Sampler`` primitive and how to get started using Qiskit Runtime Sessions, you can check this tutorial: `Get started with the Sampler primitive <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials/how-to-getting-started-with-sampler.html>`__."
msgstr "結果の確率分布を得るために回路のサンプリングをしましょう。 `Sampler primitive <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.Sampler.html>`__ を活用して同じことをします。 ``Sampler`` primitive の使用方法および Qiskit Runtime Sessionの使用開始方法については、次のチュートリアルで確認することができます: `Sampler primitive 入門<https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials/how-to-getting-started-with-sampler.html>`__"

#: ../../how_to/noisy_simulators.rst:151
msgid "Run the circuits on Estimator"
msgstr "Estimatorでの回路の実行"

#: ../../how_to/noisy_simulators.rst:153
msgid "To learn how to start a session for Estimator, you may check this tutorial: `Get started with the Estimator primitive <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials/how-to-getting-started-with-estimator.html>`__."
msgstr "Estimator のためのセッションを開始する方法を学ぶには、次のチュートリアルの確認してください: `Estimator primitive 入門 <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials/how-to-getting-started-with-estimator.html>`__"

#: ../../how_to/noisy_simulators.rst:157
msgid "The Estimator will bind single-qubit rotations to get hamiltonians before it returns expectation values of quantum operators. Therefore, the circuit doesn’t require any measurements. Currently the circuit ``qc`` has measurements so we will remove these with ``remove_final_measurements``."
msgstr "このEstimatorは、量子演算子の期待値を返す前に、単一量子ビット回転を結合してハミルトニアンを得ます。 したがって、回路は測定を必要としません。現在の回路 ``qc`` には測定がありますので、``remove_final_measurements`` でこれを削除します。"

#: ../../how_to/noisy_simulators.rst:188
msgid "With this observable, the expectation value is calculated by the equation below."
msgstr "この観測量を使用すると、期待値は以下の式で計算されます。"

#: ../../how_to/noisy_simulators.rst:191
msgid "\\langle ZZ\\rangle =\\langle \\psi | ZZ | \\psi\\rangle=\\langle \\psi|(|0\\rangle\\langle 0| -|1\\rangle\\langle 1|)\\otimes(|0\\rangle\\langle 0| - |1\\rangle\\langle 1|) |\\psi\\rangle =|\\langle 00|\\psi\\rangle|^2 - |\\langle 01 | \\psi\\rangle|^2 - |\\langle 10 | \\psi\\rangle|^2 + |\\langle 11|\\psi\\rangle|^2"
msgstr "\\langle ZZ\\rangle =\\langle \\psi | ZZ | \\psi\\rangle=\\langle \\psi|(|0\\rangle\\langle 0| -|1\\rangle\\langle 1|)\\otimes(|0\\rangle\\langle 0| - |1\\rangle\\langle 1|) |\\psi\\rangle =|\\langle 00|\\psi\\rangle|^2 - |\\langle 01 | \\psi\\rangle|^2 - |\\langle 10 | \\psi\\rangle|^2 + |\\langle 11|\\psi\\rangle|^2"

#: ../../how_to/noisy_simulators.rst:195
msgid "The next cell will implement the above as shown."
msgstr "次のセルは、上記で示したものを実装します。"

#: ../../how_to/noisy_simulators.rst:232
msgid "Running a noisy simulation"
msgstr "ノイズのあるシミュレーションの実行"

#: ../../how_to/noisy_simulators.rst:234
msgid "Now we’ll setup our simulator to run a noisy simulation rather than the ideal one. We can pass a custom ``noise_model`` to the simulator on Runtime by specifying it in the ``Options`` parameter. Here we will try to mimic a real backend and map on the noise_model from a ``FakeBackend`` class. The noise model can be extracted from the ``FakeBackend`` and passed as a ``simulator`` parameter in options. If you want to know more about ``fake_provider``, check `Fake Provider <https://qiskit.org/documentation/apidoc/providers_fake_provider.html>`__ in Qiskit documentation."
msgstr "次に、理想的なシミュレーションではなく、ノイズのあるシミュレーションを実行するためのシミュレーターを設定します。 ``Options`` パラメーターに指定することで、Runtime のシミュレーターにカスタムの ``noise_model`` を渡すことができます。 ここでは実際のバックエンドを模倣し、``FakeBackend`` クラスから noise_model をマップします。 ノイズモデルは ``FakeBackend`` から抽出し、オプションの ``simulator`` パラメーターとして渡すことができます。 ``fake_provider`` についてもっと知りたい場合は、Qiskit ドキュメンテーションの `Fake Provider <https://qiskit.org/documentation/apidoc/providers_fake_provider.html>`__ を参照してください。"

#: ../../how_to/noisy_simulators.rst:244
msgid "Since we are trying to mimic a real backend, we can also pass in the ``coupling_map`` that the backend topology has and the ``basis_gates`` that the backend supports to have a more realistic noisy simulation."
msgstr "本物のバックエンドを模倣しようとしているので、より現実的なノイズ・シミュレーションをサポートするための、バックエンドのトポロジーを表す ``coupling_map`` と、バックエンドがサポートする ``basis_gates``を渡すこともできます。"

#: ../../how_to/noisy_simulators.rst:271
msgid "The ``ibmq_qasm_simulator`` allows for the activation of the ``resilience_levels`` offered by the Qiskit Runtime Service, and use of these levels on simulators is best demonstrated using the noisy simulation as we have described above."
msgstr "``ibmq_qasm_simulator`` は、Qiskit Runtime Service が提供する ``resilience_levels`` を有効にします。 シミュレーターでこれらのレベルを使用することで、上記のようなノイズのあるシミュレーションが最もよくデモンストレーションされます。"

#: ../../how_to/noisy_simulators.rst:276
msgid "To see the comparision, we shall define two set of ``Options``. The ibmq qasm simulator allows for the activation of the resilience levels offered by Qiskit Runtime, and the use of these levels on simulators is best demonstrated using the noisy simulation that we have built. Here, ``options`` is set to\\ ``resilience level`` = ``0`` to represent a normal run without error mitigation, and ``options with em`` is set to ``resilience level`` = ``1`` to represent a run with error mitigation enabled."
msgstr "比較を見るには、``Options`` の2つのセットを定義します。 ibmq qasmシミュレーターは、Qiskit Runtimeによって提供されるresilienceレベルの有効化します。シミュレーターでのこれらのレベルの使用は我々が構築したノイズのあるシミュレーションで 最もよく示されています。 ここで、``options`` はエラー軽減なしの通常の実行を表すために ``resilience level`` = ``0`` に設定されます。 そして ``options with em`` は ``resilience level`` = ``1`` に設定され、エラー緩和が有効になっている実行を表します。"

#: ../../how_to/noisy_simulators.rst:301
msgid "When you set the ``resilience_level`` to 1, M3 is activated in Sampler. All available resilience level configurations can be found `here <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/how_to/error-mitigation.html>`__."
msgstr "``resilience_level`` を 1 に設定すると、SamplerでM3が有効になります。利用可能なすべてのresilienceレベルの設定は、 `ここ <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/how_to/error-mitigation.html>`__ で確認できます。"

#: ../../how_to/noisy_simulators.rst:348
msgid "``T-REx`` is triggered in Estimator when the resilience level is set to 1."
msgstr "``T-REx`` はresilienceレベルが 1 に設定されている場合に、Estimator で起動されます。"

#: ../../how_to/noisy_simulators.rst:395
msgid "Resilience levels are currently in beta so sampling overhead and solution quality will vary from circuit to circuit. New features, advanced options and management tools will be released on a rolling basis. You can also play around wtih higher levels of resilience and explore additional options offered by them. If you wish to learn more about activating features like *Digital-ZNE*, *PEC* in addition to *M3* and *T-REx* as shown in the examples above, check out this tutorial: `Error supression and error mitigation with Qiskit Runtime <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials/Error-Suppression-and-Error-Mitigation.html>`__."
msgstr "resilience レベルは現在ベータ版のため、サンプリングのオーバーヘッドとソリューションの品質は回路によって異なります。 新機能、高度なオプションおよび管理ツールは、循環的にリリースされます。 またより高いレベルのresilienceを設定し、それらによって提供される追加オプションを探索することもできます。 上記の例で示した *M3* や *T-REx* に加えて、 *Digital-ZNE* や *PEC* のような機能の有効化についてもっと知りたい場合は、次のチュートリアルを確認してください: `Qiskit Runtimeによるエラーの抑制とエラーの軽減 <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/tutorials/Error-Suppression-and-Error-Mitigation.html>`__"

