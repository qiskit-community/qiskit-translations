msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-12 19:16+0000\n"
"PO-Revision-Date: 2023-10-08 15:13\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /main/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/how_to/error-mitigation.po\n"
"X-Crowdin-File-ID: 9917\n"

#: ../../how_to/error-mitigation.rst:2
msgid "Configure error mitigation"
msgstr "誤り軽減の設定"

#: ../../how_to/error-mitigation.rst:6
msgid "Error mitigation techniques allow users to mitigate circuit errors by modeling the device noise at the time of execution. This typically results in quantum pre-processing overhead related to model training and classical post-processing overhead to mitigate errors in the raw results by using the generated model."
msgstr "誤り軽減技術により、ユーザーは実行時のデバイス・ノイズをモデル化することで、回路エラーを軽減できます。 これは通常、モデルのトレーニングに関連する量子的な前処理のオーバーヘッドと、生成モデルを使用して生の結果のエラーを軽減するための古典的な後処理のオーバーヘッドになります。"

#: ../../how_to/error-mitigation.rst:8
msgid "The error mitigation techniques built in to primitives are advanced resilience options.   To specify these options, use the ``resilience_level`` option when submitting your job."
msgstr "Primitive に組み込まれているエラー緩和手法には、高度なレジリエンス・オプションがあります。これらのオプションを指定するには、ジョブを送信するときに ``resilience_level`` オプションを使います。"

#: ../../how_to/error-mitigation.rst:10
msgid "The resilience level specifies how much resilience to build against errors. Higher levels generate more accurate results, at the expense of longer processing times. Resilience levels can be used to configure the cost/accuracy trade-off when applying error mitigation to your primitive query. Error mitigation reduces errors (bias) in results by processing the outputs from a collection, or ensemble, of related circuits. The degree of error reduction depends on the method applied. The resilience level abstracts the detailed choice of error mitigation method to allow users to reason about the cost/accuracy trade that is appropriate to their application."
msgstr "resilience levelでは、エラーに対してどの程度のresilienceを構築するかを指定します。レベルが高いほど、処理時間が長くなりますが、より正確な結果が生成されます。resilience levelを使用しprimitiveクエリーに誤り軽減を適用することで、コスト／精度のトレードオフを構成できます。誤り軽減は、関連する回路のコレクションまたはアンサンブルからの出力を処理することにより、結果のエラー (バイアス) を削減します。誤り削減の程度は、適用される手法によって異なります。resilience levelは誤り軽減手法の詳細な選択を抽象化し、ユーザーがアプリケーションに適したコスト／精度のトレードについて推論できるようにします。"

#: ../../how_to/error-mitigation.rst:12
msgid "Given this, each level corresponds to a method or methods with increasing level of quantum sampling overhead to enable you experiment with different time-accuracy tradeoffs.  The following table shows you which levels and corresponding methods are available for each of the primitives."
msgstr "これを考えると、それぞれのレベルは、量子サンプリングのオーバーヘッドのレベルに応じた1つまたは複数のメソッドに対応しており、時間対精度のトレードオフの異なった組み合わせを試すことができます。 次の表は、それぞれのprimitive ごとの、使用できるレベルと対応するメソッドを示しています。"

#: ../../how_to/error-mitigation.rst:15
msgid "Error mitigation is task specific so the techniques you are able to apply vary based whether you are sampling a distribution or generating expectation values."
msgstr "エラー緩和はタスク固有のものなので、分布値をサンプリングするか期待値を生成するかによって、適用できるテクニックはさまざまに異なります。"

#: ../../how_to/error-mitigation.rst:18
msgid "Resilience Level"
msgstr "Resilience Level"

#: ../../how_to/error-mitigation.rst:18
msgid "Definition"
msgstr "定義"

#: ../../how_to/error-mitigation.rst:18
msgid "Estimator"
msgstr "Estimator"

#: ../../how_to/error-mitigation.rst:18
msgid "Sampler"
msgstr "Sampler"

#: ../../how_to/error-mitigation.rst:20
msgid "0"
msgstr "0"

#: ../../how_to/error-mitigation.rst:20
msgid "No mitigation"
msgstr "緩和なし"

#: ../../how_to/error-mitigation.rst:20
msgid "None"
msgstr "無し"

#: ../../how_to/error-mitigation.rst:22
msgid "1 [Default]"
msgstr "1 [Default]"

#: ../../how_to/error-mitigation.rst:22
msgid "Minimal mitigation costs: Mitigate error associated with readout errors"
msgstr "最小の軽減コスト: 読み出しエラーに関連するエラーを軽減します。"

#: ../../how_to/error-mitigation.rst:22
msgid "Twirled Readout Error eXtinction (:ref:`TREX <TREX>`)"
msgstr "トワイルド・リードアウトエラー・エクスティンクション (:ref:`TREX <TREX>`)"

#: ../../how_to/error-mitigation.rst:22
msgid "M3"
msgstr "M3"

#: ../../how_to/error-mitigation.rst:25
msgid "2"
msgstr "2"

#: ../../how_to/error-mitigation.rst:25
msgid "Medium mitigation costs. Typically reduces bias in estimators, but is not guaranteed to be zero bias."
msgstr "中程度の軽減コスト。通常、estimatorのバイアスを削減しますが、バイアスがゼロであることは保証されていません。"

#: ../../how_to/error-mitigation.rst:25
msgid "Zero Noise Extrapolation (:ref:`ZNE <ZNE>`)"
msgstr "ゼロノイズ外挿（:ref:`ZNE <ZNE>`）"

#: ../../how_to/error-mitigation.rst:25 ../../how_to/error-mitigation.rst:28
msgid "---"
msgstr "---"

#: ../../how_to/error-mitigation.rst:28
msgid "3"
msgstr "3"

#: ../../how_to/error-mitigation.rst:28
msgid "Heavy mitigation with layer sampling. Theoretically expected to deliver zero bias estimators."
msgstr "レイヤー・サンプリングによる重い軽減。理論的には、ゼロバイアスのestimatorが得られることが期待されている。"

#: ../../how_to/error-mitigation.rst:28
msgid "Probabilistic Error Cancellation (:ref:`PEC <PEC>`)"
msgstr "確率論的エラーキャンセル (:ref:`PEC <PEC>`)"

#: ../../how_to/error-mitigation.rst:33
msgid "Resilience levels are currently in beta so sampling overhead and solution quality will vary from circuit to circuit. New features, advanced options and management tools will be released on a rolling basis. Specific error mitigation methods are not guaranteed to be applied at each resilience level."
msgstr "Resilience levelは現在ベータ版のため、サンプリングのオーバーヘッドとソリューションの品質は回路によって異なります。 新機能、高度なオプションおよび管理ツールは、順次リリースされる予定です。 具体的なエラー軽減方法は、各Resilience levelで適用されることを保証するものではありません。"

#: ../../how_to/error-mitigation.rst:36
msgid "Configure the Estimator with resilience levels"
msgstr "Resilience levelによるestimatorの設定"

#: ../../how_to/error-mitigation.rst:43
msgid "No error mitigation is applied to the user program."
msgstr "ユーザープログラムにエラー軽減は適用されません。"

#: ../../how_to/error-mitigation.rst:56
msgid "Level 1 applies error mitigation methods that particularly address readout errors. In the Estimator, we apply a model-free technique known as Twirled Readout Error eXtinction (TREX). It reduces measurement error by diagonalizing the noise channel associated with measurement by randomly flipping qubits through X gates immediately before measurement, and flipping the corresponding measured bit if an X gate was applied. A rescaling term from the diagonal noise channel is learned by benchmarking random circuits initialized in the zero state. This allows the service to remove bias from expectation values that result from readout noise. This approach is described further in `Model-free readout-error mitigation for quantum expectation values <https://arxiv.org/abs/2012.09738>`__."
msgstr "Level 1では、特に読み出しエラーに対応したエラー緩和手法を適用しています。Estimator では、TREX（Twirled Readout Error eXtinction）と呼ばれるモデルフリー技術を適用しています。これは、測定直前にXゲートを介してランダムに量子ビットを反転させ、Xゲートが適用された場合には対応する測定ビットを反転させることにより、測定に関連するノイズチャンネルを対角化することで測定誤差を低減するものです。対角化されたノイズチャンネルからのリスケーリング項は、ゼロ状態で初期化されたランダム回路のベンチマークによって学習されます。これにより、読み出しノイズに起因する期待値からのバイアスを除去することができます。この手法については、`Model-free readout-error mitigation for quantum expectation values <https://arxiv.org/abs/2012.09738>`__で詳しく説明しています。"

#: ../../how_to/error-mitigation.rst:69
msgid "Level 2 uses the Zero Noise Extrapolation method (ZNE) which computes an expectation value of the observable for different noise factors (amplification stage) and then uses the measured expectation values to infer the ideal expectation value at the zero-noise limit (extrapolation stage). This approach tends to reduce errors in expectation values, but is not guaranteed to produce an unbiased result."
msgstr "Level 2では、ゼロノイズ外挿法（ZNE）を用いて、異なるノイズ因子に対する観測値の期待値を計算し（増幅ステージ）、測定した期待値を用いてゼロノイズ限界における理想的な期待値を推測します（外挿ステージ）。この方法は期待値の誤差を少なくする傾向がありますが、不偏の結果を得ることが保証されているわけではありません。"

#: ../../how_to/error-mitigation.rst:74
msgid "This image shows a graph that compares the noise amplification factor to expectation values."
msgstr "この画像は、ノイズの増幅率を期待値と比較したグラフです。"

#: ../../how_to/error-mitigation.rst:74
msgid "Illustration of the ZNE method"
msgstr "ZNE方式の図"

#: ../../how_to/error-mitigation.rst:76 ../../how_to/error-mitigation.rst:98
msgid "The overhead of this method scales with the number of noise factors. The default settings sample the expectation value at three noise factors, leading to a roughly 3x overhead when employing this resilience level."
msgstr "この方法のオーバーヘッドは、ノイズファクターの数でスケールします。デフォルトの設定では、3つのノイズファクターで期待値をサンプリングするため、このresilience levelを採用した場合、およそ3倍のオーバーヘッドとなります。"

#: ../../how_to/error-mitigation.rst:89
msgid "Level 3 enables the Probabilistic Error Cancellation (PEC) method. This approach mitigates error by learning and inverting a sparse noise model that is able to capture correlated noise. PEC returns an unbiased estimate of an expectation value so long as learned noise model faithfully represents the actual noise model at the time of mitigation.  In practice, the experimental procedure for learning the noise model has ambiguities due to certain error terms that cannot be independently distinguished. These are resolved by a symmetry assumption, which depending on the true underlying noise may lead a biased estimate of the mitigated expectation values due to using an imperfect noise model."
msgstr "Level 3では、PEC（Probabilistic Error Cancellation）方式を実現しました。この手法は、相関のあるノイズを捉えることができる疎なノイズモデルを学習し、反転させることでエラーを軽減するものです。PECは、学習されたノイズモデルが軽減時の実際のノイズモデルを忠実に表現している限り、期待値の不偏推定値を返します。 実際には、ノイズモデルを学習する実験手順は、独立に区別できないある種の誤差項による曖昧さがあります。これらは対称性の仮定によって解決されるが、真の基底ノイズによっては、不完全なノイズモデルを使用することにより、軽減された期待値の推定値に偏りが生じる可能性があります。"

#: ../../how_to/error-mitigation.rst:91
msgid "The Qiskit Runtime primitive implementation of PEC specifically addresses noise in self-inverse two-qubit gates, so it first *stratifies* each input circuit into an alternating sequence of simultaneous 1-qubit gates followed by a layer of simultaneous 2-qubit gates. Then it learns the noise model associated with each unique 2-qubit gate layer."
msgstr "PECのQiskit Runtime Primitives 実装は、特に自己逆2量子ビットゲートにおけるノイズを扱うため、まず各入力回路を、同時1量子ビットゲートと同時2量子ビットゲートの層が交互に並ぶように *層別* します。そして、それぞれの2量子ビットゲート層に関連するノイズモデルを学習します。"

#: ../../how_to/error-mitigation.rst:96
msgid "This image shows a stratified circuit."
msgstr "この図は層化された回路を示しています。"

#: ../../how_to/error-mitigation.rst:96
msgid "This is an example of a `stratified` circuit, where the layers of two-qubit gates are labeled layer 1 through n. Note that each :math:`U_l` is composed of two-qubit gates on the native connectivity graph of the quantum processor. The open boxes represent arbitrary single-qubit gates."
msgstr "層別回路の例で、2量子ビットゲートの層は1層からn層とラベル付けされています。各 :math:`U_l` は量子プロセッサーのネイティブな接続グラフ上の2量子ビットゲートで構成されていることに注意してください。文字の入っていないボックスは、任意の1量子ビットゲートを表しています。"

#: ../../how_to/error-mitigation.rst:100
msgid "PEC uses a quasi-probability method to mimic the effect of inverting the learned noise. This requires sampling from a randomized circuit family associated with the user’s original circuit. Applying PEC will increase the variability of the returned expectation value estimates unless the number of samples per circuit is also increased for both input and characterization circuits. The amount of samples required to counter this variability scales exponentially with the noise strength of the mitigated circuit."
msgstr "PECは、学習したノイズを反転させる効果を模倣するために、準確率的な方法を使用します。このため、ユーザーの元の回路に関連するランダムな回路ファミリーからサンプリングする必要があります。PECを適用すると、入力回路と特性化回路の両方について回路あたりのサンプル数を増やさない限り、返される期待値推定値のばらつきが大きくなります。このばらつきに対処するために必要なサンプル数は、軽減された回路のノイズ強度に対して指数関数的に増加します。"

#: ../../how_to/error-mitigation.rst:102
msgid "How this works:"
msgstr "動作説明："

#: ../../how_to/error-mitigation.rst:104
msgid "When estimating an unmitigated Pauli observable :math:`\\langle P\\rangle` the standard error in the estimated expectation value is given by :math:`\\frac{1}{\\sqrt{N_{\\mbox{shots}}}}\\left(1- \\langle P\\rangle^2\\right)` where :math:`N_{\\mbox{shots}}` is the number of shots used to estimate :math:`\\langle P\\rangle`. When applying PEC mitigation, the standard error becomes :math:`\\sqrt{\\frac{S}{N_{\\mbox{samples}}}}\\left(1- \\langle P\\rangle^2\\right)` where :math:`N_{\\mbox{samples}}` is the number of PEC samples."
msgstr "軽減されていないパウリの観測量 :math:`\\langle P\\rangle` を推定する場合、推定された期待値の標準誤差は :math:`\\frac{1}{\\sqrt{N_{\\mbox{shots}}}}\\left(1- \\langle P\\rangle^2\\right)` で与えられます。ここで :math:`N_{\\mbox{shots}}` は :math:`\\langle P\\rangle` を推定するために使用されるショット数です。 PEC軽減を適用すると、標準誤差は :math:`\\sqrt{\\frac{S}{N_{\\mbox{samples}}}}\\left(1- \\langle P\\rangle^2\\right)` になります。 :math:`N_{\\mbox{samples}}` は PEC サンプルの数です。"

#: ../../how_to/error-mitigation.rst:106
msgid "The sampling overhead scales exponentially with a parameter that characterizes the collective noise of the input circuit. As the Qiskit Runtime primitive learns the noise of your circuit, it will return metadata about the sampling overhead associated with that particular layer.  Let's label the overhead of layer :math:`l` as :math:`\\gamma_l`. Then the total sampling overhead for mitigating your circuit is the product of all the layer overheads, that is:"
msgstr "サンプリング・オーバーヘッドは、入力回路の集合的なノイズを特徴付けるパラメーターで指数関数的にスケールします。Qiskit Runtime Primitives は回路のノイズを学習すると、その特定のレイヤーに関連するサンプリング・オーバーヘッドに関するメタデータを返します。 ここでは、レイヤー :math:`l` のオーバーヘッドを :math:`\\gamma_l` とラベル付けしてみましょう。そして、回路を軽減するための総サンプリング・オーバーヘッドは、すべてのレイヤーのオーバーヘッドの積、つまり、以下の通りです。"

#: ../../how_to/error-mitigation.rst:108
msgid ":math:`S = \\prod_l \\gamma_l`"
msgstr ":math:`S = \\prod_l \\gamma_l`"

#: ../../how_to/error-mitigation.rst:110
msgid "When the Estimator completes the model-learning phase of the primitive query, it will return metadata about the total sampling overhead for circuit."
msgstr "Estimator がPrimitiveのクエリーのモデル学習フェーズを完了すると、回路の総サンプリング・オーバーヘッドに関するメタデータが返されます。"

#: ../../how_to/error-mitigation.rst:112
msgid "Depending on the precision required by your application, you will need to scale the number of samples accordingly. The following plot illustrates the relationship between estimator error and number of circuit samples for different total sampling overheads."
msgstr "アプリケーションで要求される精度に応じて、サンプル数を適宜増減させる必要があります。以下のプロットは、異なるサンプリング・オーバーヘッドの場合のEstimator エラーと回路サンプル数の関係を示しています。"

#: ../../how_to/error-mitigation.rst:-1
msgid "This image shows that sampling overhead goes down as the number of samples increases."
msgstr "このイメージは、サンプル数が増加すると、 サンプリング・オーバーヘッドが減少することを示しています。"

#: ../../how_to/error-mitigation.rst:117
msgid "Note that the number of samples required to deliver a desired accuracy is not known before the primitive query because the mitigation scaling factor is discovered during the learning phase of PEC."
msgstr "なお、軽減スケーリング・ファクターはPECの学習段階で発見されるため、所望の精度を実現するために必要なサンプル数は、Primitive クエリーの前にはわからないことに注意してください。"

#: ../../how_to/error-mitigation.rst:119
msgid "We suggest starting with short depth circuits to get a feel for the scaling of the sampling overhead of PEC before attempting larger problems."
msgstr "より大きな問題に挑戦する前に、PECのサンプリング・オーバーヘッドのスケーリングに関する感触を得るために、短い深さの回路から始めることをお勧めします。"

#: ../../how_to/error-mitigation.rst:126
msgid "Example"
msgstr "例"

#: ../../how_to/error-mitigation.rst:128
msgid "The Estimator interface lets users seamlessly work with the variety of error mitigation methods to reduce error in expectation values of observables. The following code uses Zero Noise Extrapolation by simply setting ``resilience_level 2``."
msgstr "Estimatorのインターフェースでは、観測値の期待値の誤差を軽減するために、様々なエラー緩和手法をシームレスに使用することができます。次のコードでは、単純に ``resilience_level 2`` を設定することで、ゼロノイズ外挿を使用しています。"

#: ../../how_to/error-mitigation.rst:147
msgid "As you increase the resilience level, you will be able to use additional methods to improve the accuracy of your result. However, because the methods become more advanced with each level, they require additional sampling overhead (time) to generate more accurate expectation values. Note that higher resilience levels do not guarantee better quality. Higher levels only mean greater overhead. Each method has its strengths and weaknesses. For example, TREX (Twirled Readout Error eXtinction) is good for shallow circuits because of its readout error mitigation whereas ZNE (Zero Noise Extrapolation) is good for deeper circuits. PEC can mitigate arbitrary errors but may not work in practice because of its large overhead."
msgstr "Resilience level を上げると、結果の精度を向上させるために追加のメソッドを使用することができます。 しかし、レベルが上がるごとに手法が高度になるため、より正確な期待値を生成するためには、さらにサンプリングのオーバーヘッド（時間）が必要になります。 Resilience level が高いからといって、品質が保証されるわけではないことに注意してください。レベルが高いほどオーバーヘッドが大きくなるだけです。それぞれの方法は、その長所と短所があります。例えば、 TREX(Twirled Readout Error eXtinct) は読み出し誤差を軽減するために浅い回路に適していますが、ZNE(Zero Noise Extolation) はより深い回路に適しています。 PECは任意のエラーを緩和できますが、オーバーヘッドが大きいため、実際には機能しない可能性があります。"

#: ../../how_to/error-mitigation.rst:151
msgid "Configure Sampler with resilience levels"
msgstr "Resilience levelによるSampler の設定"

#: ../../how_to/error-mitigation.rst:154
msgid "The Sampler default resilience setting (level 1) enables readout error mitigation to allow users to generate mitigated quasi-probability distributions."
msgstr "Samplerのデフォルトのresilience設定（level 1）では、読み出し誤差を緩和し、緩和された準確率分布を生成することができます。"

#: ../../how_to/error-mitigation.rst:161
msgid "Level 1 uses matrix-free measurement mitigation (M3) routine to mitigate readout error. M3 works in a reduced subspace defined by the noisy input bit strings that are to be corrected. Because the number of unique bit strings can be much smaller than the dimensionality of the full multi-qubit Hilbert space, the resulting linear system of equations is nominally much easier to solve."
msgstr "Level 1 は、読み出しエラーを軽減するために、マトリクス・フリー・メジャーメント・ミティゲーション（M3）ルーチンを使用します。M3は、補正すべきノイズの多い入力ビット列で定義される縮小部分空間で動作します。ビット列の数は、マルチ量子ビットのヒルベルト空間の次元よりもはるかに小さいため、結果として得られる連立方程式は、名目上、はるかに簡単に解くことができます。"

#: ../../how_to/error-mitigation.rst:166
msgid "This image illustrates the M3 routine."
msgstr "この画像はM3ルーチンを示しています。"

#: ../../how_to/error-mitigation.rst:166
msgid "Illustration of the M3 method"
msgstr "M3 方式の図"

#: ../../how_to/error-mitigation.rst:185
msgid "Advanced resilience options"
msgstr "高度なresilienceオプション"

#: ../../how_to/error-mitigation.rst:187
msgid "You can tune advanced options to configure your resilience strategy further. These methods can be used alongside resilience levels where you change the specific options of interest and let your previously set resilience level manage the rest."
msgstr "高度なオプションを調整することで、resilience戦略をさらに設定することができます。これらの方法は、resilience level と一緒に使うことができ、関心のある特定のオプションを変更し、残りは以前に設定したresilience level に管理させることができます。"

#: ../../how_to/error-mitigation.rst:189
msgid "As a part of the beta release of the resilience options, users will be able configure ZNE by using the following advanced options. We will soon add options to tune other resilience levels that include PEC."
msgstr "Resilience オプションのbeta版リリースの一環として、ユーザーは高度なオプションを使用してZNEを設定することができます。 PECを含む他のresilience level を調整するためのオプションは今後すぐにリリースされます。"

#: ../../how_to/error-mitigation.rst:192
msgid "Options"
msgstr "オプション"

#: ../../how_to/error-mitigation.rst:192
msgid "Inputs"
msgstr "インプット"

#: ../../how_to/error-mitigation.rst:192
msgid "Description"
msgstr "概要"

#: ../../how_to/error-mitigation.rst:194
msgid "options.resilience.noise_amplifier(Optional[str])"
msgstr "options.resilience.noise_amplifier(Optional[str])"

#: ../../how_to/error-mitigation.rst:196
msgid "select your amplification strategy"
msgstr "増幅のストラテジーを選択してください"

#: ../../how_to/error-mitigation.rst:194
msgid "``TwoQubitAmplifier`` [Default]"
msgstr "``TwoQubitAmplifier`` [Default]"

#: ../../how_to/error-mitigation.rst:194
msgid "Amplifies noise of all two qubit gates by performing local gate folding."
msgstr "ローカルゲートのフォールディングを実行することで、すべての2量子ビットゲートのノイズを増幅します。"

#: ../../how_to/error-mitigation.rst:197
msgid "``CxAmplifier``"
msgstr "``CxAmplifier``"

#: ../../how_to/error-mitigation.rst:197
msgid "Amplifies noise of all CNOT gates by performing local gate folding."
msgstr "ローカルゲートのフォールディングを実行することで、すべてのCNOTゲートのノイズを増幅します。"

#: ../../how_to/error-mitigation.rst:200
msgid "``LocalFoldingAmplifier``"
msgstr "``LocalFoldingAmplifier``"

#: ../../how_to/error-mitigation.rst:200
msgid "Amplifies noise of all gates by performing local gate folding."
msgstr "ローカルゲートのフォールデイングを実行することで、すべてのゲートのノイズを増幅します。"

#: ../../how_to/error-mitigation.rst:203
msgid "``GlobalFoldingAmplifier``"
msgstr "``GlobalFoldingAmplifier``"

#: ../../how_to/error-mitigation.rst:203
msgid "Amplifies noise of the input circuit by performing global folding of the entire input circuit."
msgstr "入力回路全体の全体的なフォールディングを行うことによって、入力回路のノイズを増幅します。"

#: ../../how_to/error-mitigation.rst:206
msgid "options.resilience.noise_factors((Optional[Sequence[float]])"
msgstr "options.resilience.noise_factors((Optional[Sequence[float]])"

#: ../../how_to/error-mitigation.rst:206
msgid "(1, 3, 5) [Default]"
msgstr "(1, 3, 5) [Default]"

#: ../../how_to/error-mitigation.rst:206
msgid "Noise amplification factors, where `1` represents the baseline noise. They all need to be greater than or equal to the baseline."
msgstr "ノイズの増幅率。`1` はベースライン・ノイズを表します。いずれもベースライン以上であることが必要です。"

#: ../../how_to/error-mitigation.rst:210
msgid "options.resilience.extrapolator(Optional[str])"
msgstr "options.resilience.extrapolator(オプション[str])"

#: ../../how_to/error-mitigation.rst:210
msgid "``LinearExtrapolator`` [Default]"
msgstr "``LinearExtrapolator`` [Default]"

#: ../../how_to/error-mitigation.rst:210
msgid "Polynomial extrapolation of degree one."
msgstr "次数1の多項式外挿。"

#: ../../how_to/error-mitigation.rst:212
msgid "``QuadraticExtrapolator``"
msgstr "``QuadraticExtrapolator``"

#: ../../how_to/error-mitigation.rst:212
msgid "Polynomial extrapolation of degree two and lower."
msgstr "2次以下の多項式外挿。"

#: ../../how_to/error-mitigation.rst:214
msgid "``CubicExtrapolator``"
msgstr "``CubicExtrapolator``"

#: ../../how_to/error-mitigation.rst:214
msgid "Polynomial extrapolation of degree three and lower."
msgstr "3次以下の多項式外挿。"

#: ../../how_to/error-mitigation.rst:216
msgid "``QuarticExtrapolator``"
msgstr "``QuarticExtrapolator``"

#: ../../how_to/error-mitigation.rst:216
msgid "Polynomial extrapolation of degree four and lower."
msgstr "次数4以下の多項式外挿。"

#: ../../how_to/error-mitigation.rst:220
msgid "Example of adding ``resilience_options`` into your estimator session"
msgstr "Estimator session に ``resilience_options`` を追加する例"

