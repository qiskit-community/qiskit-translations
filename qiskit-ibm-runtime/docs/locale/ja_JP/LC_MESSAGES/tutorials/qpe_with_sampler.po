msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-09 04:52+0000\n"
"PO-Revision-Date: 2023-02-02 09:46\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/qpe_with_sampler.po\n"
"X-Crowdin-File-ID: 9844\n"
"Language: ja_JP\n"

#: ../../tutorials/qpe_with_sampler.ipynb:9
msgid "This page was generated from `docs/tutorials/qpe_with_sampler.ipynb`__."
msgstr "このページは `docs/tutorials/qpe_with_sampler.ipynb`__ から生成されました。"

#: ../../tutorials/qpe_with_sampler.ipynb:9
msgid "Quantum phase estimation using the Sampler primitive"
msgstr "Sampler primitive を使用した量子相推定"

#: ../../tutorials/qpe_with_sampler.ipynb:11
msgid "The quantum phase estimation (QPE) algorithm is an important subroutine in quantum computation. It serves as a central building block of many quantum algorithms including the Shor’s factoring algorithm and the quantum algorithm for linear systems of equations (HHL algorithm). In this tutorial, you will build a parameterized version of QPE circuit and run it using the Sampler primitive, which makes running parameterized circuits very easy."
msgstr "量子位相推定（QPE）アルゴリズムは、量子計算における重要なサブルーチンです。ショアの因数分解アルゴリズムや連立方程式の量子アルゴリズム(HHLアルゴリズム) など、多くの量子アルゴリズムの中心的な構成要素として機能しています。このチュートリアルでは、パラメーター化されたQPE回路を構築し、Sampler primitive を使用して実行します。"

#: ../../tutorials/qpe_with_sampler.ipynb:23
msgid "Before you begin"
msgstr "始める前に"

#: ../../tutorials/qpe_with_sampler.ipynb:25
msgid "This tutorial requires a Qiskit Runtime service instance. If you haven’t done so already, follow the instructions in the Qiskit `Getting started guide <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ to set one up."
msgstr "このチュートリアルには、Qiskit Runtimeのサービスインスタンスが必要です。まだの方は、Qiskitの `入門ガイド<https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ の指示に従ってセットアップしてください。"

#: ../../tutorials/qpe_with_sampler.ipynb:37
msgid "Background information"
msgstr "背景情報"

#: ../../tutorials/qpe_with_sampler.ipynb:49
msgid "Quantum phase estimation algorithm"
msgstr "量子位相推定アルゴリズム"

#: ../../tutorials/qpe_with_sampler.ipynb:51
msgid "The QPE algorithm [1][2] estimates the value of theta, where a unitary operator :math:`U` has an eigenvector :math:`|\\psi \\rangle` with eigenvalue :math:`e^{2\\pi i \\theta}`. To find the estimation, we assume we have black boxes (sometimes called *oracles*), that can prepare the state :math:`|\\psi \\rangle` and run a controlled-\\ :math:`U^{2^j}` operation."
msgstr "QPE アルゴリズム [1][2] は、ユニタリー演算子 :math:`U` が固有ベクトル :math:`|\\psi \\rangle` 、固有値 :math:`e^{2\\pi i \\theta}` を持つとき、thetaの値を推定します。推定のために、状態 :math:`|\\psi \\rangle` を準備し、制御-\\ :math:`U^{2^j}` 演算を実行する、ブラック ボックス ( *オラクル* と呼ばれることもあります) を仮定します。"

#: ../../tutorials/qpe_with_sampler.ipynb:53
msgid "Because it relies on black boxes, the QPE algorithm is not actually a complete algorithm, but can be thought of as a subroutine. It can work with other subroutines to perform other computations, such as Shor’s factoring algorithm and the HHL algorithm."
msgstr "ブラックボックスに依存しているため、QPEアルゴリズムは実際には完全なアルゴリズムではなく、サブルーチンとして考えることができます。このサブルーチンは他のサブルーチンと連携して、ショアの因数分解アルゴリズムやHHLアルゴリズムなど他の計算を実行することができます。"

#: ../../tutorials/qpe_with_sampler.ipynb:55
msgid "We are not going to explain the details of the QPE algorithm here. If you want to learn more, you can read the chapter about the QPE algorithm in `the Qiskit textbook <https://learn.qiskit.org/course/ch-algorithms/quantum-phase-estimation>`__ [3]."
msgstr "ここではQPEアルゴリズムの詳細を説明はしません。より詳しく知りたい場合は、`Qiskitテキストブック <https://learn.qiskit.org/course/ch-algorithms/quantum-phase-estimation>`__ [3]のQPEアルゴリズムについての章を読んでみてください。"

#: ../../tutorials/qpe_with_sampler.ipynb:67
msgid "Overview"
msgstr "概要"

#: ../../tutorials/qpe_with_sampler.ipynb:69
msgid "As explained above, there are black boxes in the QPE algorithm to prepare the state :math:`|\\psi \\rangle` and perform the controlled-\\ :math:`U^{2^j}` operation. In this tutorial, you will prepare a series of QPE circuits containing different black boxes corresponding to different phases. You will then run these circuits using the `Sampler primitive <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.Sampler.html>`__ and analyze the results. As you will see, the Sampler primitive makes running parameterized circuits very easy. Instead of creating a series of QPE circuits, you only need to create *one* QPE circuit with a parameter specifying the phase the black boxes generate and a series of phase values for the parameter."
msgstr "上で説明したように、QPE アルゴリズムには状態 :math:`|\\psi \\rangle` を準備し、制御-\\ :math:`U^{2^j}` 演算を実行するためのブラック ボックスがあります。 このチュートリアルでは、さまざまな位相に対応するさまざまなブラック ボックスを含む一連の QPE 回路を準備します。 次に、`Sampler primitive <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.Sampler.html>`__ を使用してこれらの回路を実行し、結果を分析します。 ご覧のとおり、Sampler primitiveを使用すると、パラメーター化された回路を非常に簡単に実行できます。 一連の QPE 回路を作成する代わりに、ブラック ボックスが生成する位相を指定するパラメーターとパラメーターの一連の位相値を使用して *1 つ* の QPE 回路を作成するだけで済みます。"

#: ../../tutorials/qpe_with_sampler.ipynb:76
msgid "Note"
msgstr "注記"

#: ../../tutorials/qpe_with_sampler.ipynb:78
msgid "In a typical usage of the QPE algorithm, such as the Shor’s factoring algorithm, the black boxes are not configured by the user but instead are specified by other subroutines. However, the purpose of this tutorial is to use the QPE algorithm to illustrate the ease of running parameterized circuits by using the Sampler primitive."
msgstr "ショアの素因数分解アルゴリズムのようなQPEアルゴリズムの典型的な使用法では、ブラックボックスはユーザーによって設定されず、他のサブルーチンによって指定されます。しかし、このチュートリアルの目的は、QPEアルゴリズムを使用して、Sampler primitiveを使用したパラメーター化回路の実行の容易さを説明することです。"

#: ../../tutorials/qpe_with_sampler.ipynb:94
msgid "Step 1: Create QPE circuits"
msgstr "ステップ1：QPE回路の作成"

#: ../../tutorials/qpe_with_sampler.ipynb:106
msgid "Create a parameterized QPE circuit"
msgstr "パラメーター化されたQPE回路を作成する"

#: ../../tutorials/qpe_with_sampler.ipynb:108
msgid "The procedure of the QPE algorithm is as follows:"
msgstr "QPE アルゴリズムの手順は、以下のとおりです。"

#: ../../tutorials/qpe_with_sampler.ipynb:110
msgid "Create a circuit with two quantum registers (the first for estimating the phase and the second for storing the eigenvector :math:`|\\psi\\rangle`) and one classical register for readout."
msgstr "2 つの量子レジスター (1 つ目は位相を推定するため、2 つ目は固有ベクトル :math:`|\\psi\\rangle` を格納するため) と 1 つの古典レジスターを読み出し用に持つ回路を作成します。"

#: ../../tutorials/qpe_with_sampler.ipynb:111
msgid "Initialize the qubits in the first register as :math:`|0\\rangle` and the second register as :math:`|\\psi\\rangle`."
msgstr "最初のレジスターの量子ビットを :math:`|0\\rangle` として、2 番目のレジスターを :math:`|\\psi\\rangle` として初期化します。"

#: ../../tutorials/qpe_with_sampler.ipynb:112
msgid "Create a superposition in the first register."
msgstr "最初のレジスターに重ね合わせを作成します。"

#: ../../tutorials/qpe_with_sampler.ipynb:113
msgid "Apply the controlled-\\ :math:`U^{2^j}` black box."
msgstr "制御- \\ :math:`U^{2^j}` ブラック ボックスを適用します。"

#: ../../tutorials/qpe_with_sampler.ipynb:114
msgid "Apply an inverse quantum Fourier transform (QFT) to the first register."
msgstr "逆量子フーリエ変換 (QFT) を最初のレジスターに適用します。"

#: ../../tutorials/qpe_with_sampler.ipynb:115
msgid "Measure the first register."
msgstr "最初のレジスタを測定します。"

#: ../../tutorials/qpe_with_sampler.ipynb:117
msgid "The following code creates a function ``create_qpe_circuit`` for creating a QPE circuit given the keyword arguments ``theta`` and ``num_qubits``. Note that ``theta`` doesn’t contain the :math:`2\\pi` factor. The ``num_qubits`` argument specifies the number of qubits in the first register. More qubits will provide more precision for the phase estimation."
msgstr "次のコードは、キーワード引数 ``theta`` と ``num_qubits`` を与えて、QPE回路を作成するための関数 ``create_qpe_circuit`` を作成します。 ``theta`` は :math:`2\\pi` ファクターを含んでいないことに注意してください。``num_qubits`` 引数は最初のレジスターの量子ビット数を指定します。子ビット数が多いほど、位相推定の精度が良くなります。"

#: ../../tutorials/qpe_with_sampler.ipynb:173
msgid "If you pass a real number to the ``theta`` argument in the ``create_qpe_circuit`` function, it will return a circuit with a fixed phase encoded."
msgstr "``create_qpe_circuit`` 関数の ``theta`` 引数に実数を渡すと、位相が固定された回路がエンコードされます。"

#: ../../tutorials/qpe_with_sampler.ipynb:205
msgid "However, if you pass a ```Parameter`` <https://qiskit.org/documentation/stubs/qiskit.circuit.Parameter.html>`__ object instead, it will return a parameterized circuit whose parameter values can be assigned after the circuit has been created. You will use the parameterized version of the QPE circuit for the rest of the tutorial."
msgstr "しかし、代わりに ```Parameter`` <https://qiskit.org/documentation/stubs/qiskit.circuit.Parameter.html>`__ オブジェクトを渡すと、回路が作成された後にパラメーター値を割り当てることができる、パラメーター化された回路が返されます。このチュートリアルの残りの部分では、パラメーター化されたバージョンのQPE回路を使用することになります。"

#: ../../tutorials/qpe_with_sampler.ipynb:240
msgid "Create a list of phase values to be assigned later"
msgstr "後で割り当てる位相の値のリストを作成する"

#: ../../tutorials/qpe_with_sampler.ipynb:242
msgid "After creating the parameterized QPE circuit, you will create a list of phase values to be assigned to the circuit in the next step. You can use the code below to create a list of 21 phase values that range from ``0`` to ``2`` with equal spacing, i.e. \\ ``0``, ``0.1``, ``0.2``, …, ``1.9``, ``2.0``."
msgstr "パラメーター化されたQPE回路を作成した後、次のステップで回路に割り当てる位相の値のリストを作成します。以下のコードを使用して、 ``0`` から ``2`` までの21個の位相の値のリストを等間隔で作成します： \\ ``0``, ``0.1``, ``0.2``, …, ``1.9``, ``2.0``"

#: ../../tutorials/qpe_with_sampler.ipynb:266
msgid "Step 2: Submit the circuits to a quantum computer on the cloud"
msgstr "ステップ2: 回路をクラウド上の量子コンピューターに送信する"

#: ../../tutorials/qpe_with_sampler.ipynb:278
msgid "Connect to the Qiskit Runtime service"
msgstr "Qiskit Runtime サービスに接続する"

#: ../../tutorials/qpe_with_sampler.ipynb:280
msgid "First, you will connect to the Qiskit Runtime service instance that you created in `the first step <#Before-you-begin>`__. We will use ``ibmq_qasm_simulator`` to run this tutorial."
msgstr "まず、 `最初のステップ <#Before-you-begin>`__で作成したQiskit Runtimeのサービスインスタンスに接続します。ここでは ``ibmq_qasm_simulator`` を使用して、このチュートリアルを実行することにします。"

#: ../../tutorials/qpe_with_sampler.ipynb:305
msgid "Run the parameterized circuits by using the Sampler primitive"
msgstr "Sampler primitive を使用してパラメーター化された回路を実行する"

#: ../../tutorials/qpe_with_sampler.ipynb:307
msgid "With the Qiskit Runtime service connected, a parameterized QPE circuit, and a list of parameter values, you are now ready to use the Sampler primitive to run the QPE circuits. The ``with ...`` syntax opens a Qiskit Runtime session. Within the session, you will run the parameterized QPE circuit with 21 parameter values with just one line of code. The Sampler primitive will take the parameter values, assign them to the circuit and run it as 21 circuits with fixed parameter values and return a single job result containing the (quasi-)probabilities of bitstrings. This saves you from writing dozens of lines of code."
msgstr "Qiskit Runtimeサービスが接続され、パラメーター化されたQPE回路、およびパラメーターの値のリストがあれば、Sampler primitiveを使用してQPE回路を実行する準備が整ったことになります。 ``with ...`` 構文は、Qiskit Runtime sessionを開きます。Session内では、たった1行のコードで21個の異なるパラメーターの値を持つパラメーター化されたQPE回路を実行することになります。Sampler primitiveは、パラメーター値を受け取り、それを回路に割り当て、異なるパラメーター値を持つ21個の回路として実行し、ビット列の（擬似）確率を含む1つのジョブ結果を返します。これにより、何十行ものコードを書く手間が省けます。"

#: ../../tutorials/qpe_with_sampler.ipynb:310
msgid "The ``Estimator`` primitive has a similar API interface for parameterized circuits. See `the API reference <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.Estimator.html>`__ for more details."
msgstr "``Estimator`` primitiveは、パラメーター化された回路に対して同様のAPIインターフェイスを持っています。詳しくは `APIリファレンス <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.Estimator.html>`__ を参照してください。"

#: ../../tutorials/qpe_with_sampler.ipynb:338
msgid "Step 3: Analyze the results"
msgstr "ステップ 3: 結果の分析"

#: ../../tutorials/qpe_with_sampler.ipynb:350
msgid "Analyze the results of one circuit"
msgstr "1つの回路の結果を分析する"

#: ../../tutorials/qpe_with_sampler.ipynb:352
msgid "After the job has been completed, you can start analyzing the results by looking at the histogram of one of the circuits. The (quasi-)probability distribution of the measurement outcome is stored in ``results.quasi_dists`` and you can access results from an individual circuit by passing the index of the circuit (:math:`idx=6` in the example below) you are interested in."
msgstr "ジョブが完了したら、回路のヒストグラムを見ることで結果の解析を開始することができます。測定結果の（準）確率分布は ``results.quasi_dists`` に格納されており、興味のある回路のインデックス（以下の例では:math:`idx=6` ）を渡すことで個々の回路の結果にアクセスすることが可能です。"

#: ../../tutorials/qpe_with_sampler.ipynb:385
msgid "To estimate :math:`\\theta`, you need to divide the most likely outcome :math:`N_1` (``1010`` in binary or ``10`` in decimal) by :math:`2^n`, where :math:`n` is the number of qubits in the first register (:math:`n=4` in our example):"
msgstr ":math:`\\theta` を推定するために、 :math:`N_1` (2進数で ``1010`` 、10進数で ``10``) を :math:`2^n` で割る必要があります。ここで :math:`n` は最初のレジスターの量子ビットの数（この例では :math:`n=4` ）です。"

#: ../../tutorials/qpe_with_sampler.ipynb:387
msgid "\\theta = \\frac{N_1}{2^n} =  \\frac{10}{2^4} = 0.625.\n\n"
msgstr "\\theta = \\frac{N_1}{2^n} =  \\frac{10}{2^4} = 0.625.\n\n"

#: ../../tutorials/qpe_with_sampler.ipynb:389
msgid "This is close to the expected value of :math:`0.6`, but you can do a better estimate by taking the weighted average of the most likely outcome (``1010`` in binary or ``10`` in decimal) and the second most likely outcome (``1001`` in binary or ``9`` in decimal):"
msgstr "これは :math:`0.6` の期待値に近いですが、最も可能性の高い結果 (2進数で ``1010`` 、10進数で ``10``) と2番目に可能性の高い結果 (2進数で ``1001`` 、10進数で ``9``) を加重平均すれば、もっと良い推定値が得られます。"

#: ../../tutorials/qpe_with_sampler.ipynb:391
msgid "\\theta = \\frac{P_1 \\times \\frac{N_1}{2^n} + P_2 \\times \\frac{N_2}{2^n}}{P_1 + P_2} = \\frac{0.554 \\times \\frac{10}{2^4} + 0.269 \\times \\frac{9}{2^4}}{0.554 + 0.269} = 0.605,\n\n"
msgstr "\\theta = \\frac{P_1 \\times \\frac{N_1}{2^n} + P_2 \\times \\frac{N_2}{2^n}}{P_1 + P_2} = \\frac{0.554 \\times \\frac{10}{2^4} + 0.269 \\times \\frac{9}{2^4}}{0.554 + 0.269} = 0.605,\n\n"

#: ../../tutorials/qpe_with_sampler.ipynb:393
msgid "where :math:`N_1` and :math:`P_1` are the most likely outcome and its probability and :math:`N_2` and :math:`P_2` are the second most likely outcome and its probability. The result, :math:`0.605`, is much closer to the expected value of :math:`0.6`. We will use this method to analyze the results from all circuits."
msgstr "ここで、 :math:`N_1` と :math:`P_1` は最も可能性の高い結果とその確率、 :math:`N_2` と :math:`P_2` は2番目に可能性の高い結果とその確率を表します。その結果、 :math:`0.605` となり、期待値である :math:`0.6` にかなり近くなりました。この方法を用いて、すべての回路の結果を分析することにします。"

#: ../../tutorials/qpe_with_sampler.ipynb:405
msgid "Analyze the results of all circuits"
msgstr "すべての回路の結果を分析する"

#: ../../tutorials/qpe_with_sampler.ipynb:407
msgid "You can use the helper functions below to find the values for :math:`N_1`, :math:`P_1`, :math:`N_2`, and :math:`P_2` for a phase and calculate the estimated :math:`\\theta`. Ideally :math:`N_2` should be a “neighbor” of :math:`N_1` (for example, the neighbors of ``1010`` are ``1001`` and ``1011``), however due to the presence of noise, the second most likely outcome may not be a neighbor of :math:`N_1` if the results were obtained from a real quantum system. The helper functions take the :math:`N_2` value only from :math:`N_1`\\ ’s neighbors."
msgstr "以下のヘルパー関数を利用することで、ある位相における :math:`N_1`, :math:`P_1`, :math:`N_2`, :math:`P_2` の値を求め、その推定値 :math:`\\theta` を計算することができます。理想的には :math:`N_2` は :math:`N_1` の「近傍」であるべきですが（例えば、 ``1010`` の近傍は ``1001`` と ``1011`` ）、実際の量子系から得られた結果では、ノイズがあるため 2番目に可能性が高い結果は :math:`N_1` の近傍ではない可能性があります。ヘルパー関数は :math:`N_2` の値を :math:`N_1` の近傍領域から取得します。"

#: ../../tutorials/qpe_with_sampler.ipynb:495
msgid "You can use the ``estimate_phase`` helper function to estimate phases from the results of all circuits."
msgstr "``estimate_phase`` ヘルパー関数を使用すると、すべての回路の結果から位相を推定することができます。"

#: ../../tutorials/qpe_with_sampler.ipynb:518
msgid "The ideal solutions for the phases :math:`\\theta` are periodic with a period of ``1`` because the eigenvalue :math:`e^{2 \\pi i \\theta}` is :math:`2 \\pi` periodic. You can run the cell below to generate the ideal solutions for comparison with the solutions obtained from the QPE algorithm."
msgstr "位相 :math:`\\theta` の理想的な解は、固有値:math:`e^{2 \\pi i \\theta}` が :math:`2 \\pi` で周期的なので、周期 ``1`` を持つ周期的な解となります。以下のセルを実行して理想的な解を生成し、QPEアルゴリズムから得られる解と比較することができます。"

#: ../../tutorials/qpe_with_sampler.ipynb:543
msgid "You can run the code below to visualize the solutions."
msgstr "以下のコードを実行して、解を視覚化できます。"

#: ../../tutorials/qpe_with_sampler.ipynb:607
msgid "As you can see, the solutions obtained from the QPE algorithm follow closely to the ideal solutions. Congratulations! You have successfully run the QPE algorithm and obtained good solutions!"
msgstr "ご覧のように、QPEアルゴリズムで得られた解は、理想的な解に忠実に沿っています。おめでとうございます。QPEアルゴリズムを正常に実行し、良い解を得ることができました!"

#: ../../tutorials/qpe_with_sampler.ipynb:619
msgid "Summary"
msgstr "概要"

#: ../../tutorials/qpe_with_sampler.ipynb:621
msgid "In this tutorial, you have created a parameterized QPE circuit, run it using the Sampler primitive, analyzed the results, and obtained solutions that are closed to the ideal solutions. You can see that the Sampler primitive makes running parameterized circuits very easy."
msgstr "このチュートリアルでは、パラメーター化されたQPE回路を作成し、Sampler primitiveを使って実行し、結果を解析して、理想的な解に近い解を得ました。Sampler primitiveを使うと、パラメーター化された回路を非常に簡単に実行できることがおわかりいただけると思います。"

#: ../../tutorials/qpe_with_sampler.ipynb:633
msgid "References"
msgstr "参考文献"

#: ../../tutorials/qpe_with_sampler.ipynb:635
msgid "Kitaev, A. Y. (1995). Quantum measurements and the Abelian stabilizer problem. arXiv preprint quant-ph/9511026."
msgstr "Kitaev, A. Y. (1995). Quantum measurements and the Abelian stabilizer problem. arXiv preprint quant-ph/9511026."

#: ../../tutorials/qpe_with_sampler.ipynb:636
msgid "Nielsen, M., & Chuang, I. (2010). Quantum computation and quantum information (2nd ed., pp. 221-226). Cambridge University Press."
msgstr "Nielsen, M., & Chuang, I. (2010). Quantum computation and quantum information (2nd ed., pp. 221-226). Cambridge University Press."

#: ../../tutorials/qpe_with_sampler.ipynb:637
msgid "Abbas, A., Andersson, S., Asfaw, A., Córcoles, A., Bello, L., Ben-Haim, Y., … & Wootton, J. (2020). Learn quantum computation using qiskit. URL: https://qiskit.org/textbook/preface.html (accessed 07/14/2022)."
msgstr "Abbas, A., Andersson, S., Asfaw, A., Córcoles, A., Bello, L., Ben-Haim, Y., … & Wootton, J. (2020). Learn quantum computation using qiskit. URL: https://qiskit.org/textbook/preface.html (accessed 07/14/2022)."

#: ../../tutorials/qpe_with_sampler.ipynb:649
msgid "Qiskit versions and copyright"
msgstr "Qiskit のバージョンと著作権"

