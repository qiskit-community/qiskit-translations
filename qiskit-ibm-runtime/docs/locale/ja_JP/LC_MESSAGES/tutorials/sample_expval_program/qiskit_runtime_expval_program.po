msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-22 15:51+0000\n"
"PO-Revision-Date: 2022-08-16 16:10\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/sample_expval_program/qiskit_runtime_expval_program.po\n"
"X-Crowdin-File-ID: 9824\n"
"Language: ja_JP\n"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:9
msgid "This page was generated from `docs/tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb`__."
msgstr "このページは、 `docs/tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb`__ から生成されました。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:9
msgid "Custom Expectation Value Program for the Qiskit Runtime"
msgstr "Qiskit Runtime のカスタム期待値プログラム"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:15
msgid "Paul Nation"
msgstr "ポール・ネーション(Paul Nation)"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:25
msgid "IBM Quantum Partners Technical Enablement Team"
msgstr "IBM Quantum Partners テクニカル・イネーブルメント・チーム"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:31
msgid "Here we will show how to make a program that takes a circuit, or list of circuits, and computes the expectation values of one or more diagonal operators."
msgstr "ここでは、回路または回路のリストを取得し、1つ以上の対角演算子の期待値を計算するプログラムを作成する方法を示します。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:43
msgid "Prerequisites"
msgstr "前提条件"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:45
msgid "You must have the latest Qiskit installed."
msgstr "最新の Qiskit がインストールされている必要があります。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:46
msgid "You must have either an IBM Cloud or an IBM Quantum account that can access Qiskit Runtime."
msgstr "Qiskit Runtime にアクセスできる IBM クラウドまたは IBM Quantum アカウントのいずれかを持っている必要があります。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:58
msgid "Background"
msgstr "背景"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:60
msgid "The primary method by which information is obtained from quantum computers is via expectation values. Indeed, the samples that come from executing a quantum circuit multiple times, once converted to probabilities, can be viewed as just a finite sample approximation to the expectation value for the projection operators corresponding to each bitstring. More practically, many quantum algorithms require computing expectation values over Pauli operators, e.g. Variational Quantum Eigensolvers, and thus having a runtime program that computes these quantities is of fundamental importance. Here we look at one such example, where a user passes one or more circuits and expectation operators and gets back the computed expectation values, and possibly error bounds."
msgstr "量子コンピューターから情報を取得する主な方法は、期待値を使用することです。 実際、量子回路を複数回実行して得られたサンプルは、確率に変換されると、各ビットストリングに対応する射影演算子の期待値に対する有限のサンプル近似と見なすことができます。 より実際的には、多くの量子アルゴリズムは、パウリ演算子（変分量子固有ソルバー（Variational Quantum Eigensolvers）など）よりも期待値を計算する必要があるため、これらの量を計算するランタイム・プログラムを持つことが基本的に重要です。 ここでは、ユーザーが1つ以上の回路と期待値演算子を渡し、計算された期待値と、場合によってはエラー範囲を取得する、そのような例の1つを見ていきます。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:64
msgid "Expectation value of a diagonal operator"
msgstr "対角演算子の期待値"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:66
msgid "Consider a generic observable given by the tensor product of diagonal operators over :math:`N` qubits :math:`O = O_{N-1}\\dots O_{0}` where the subscript indicates the qubit on which the operator acts. Then for a set of observed :math:`M` bitstrings :math:`\\{b_{0}, \\dots b_{M-1}\\}`, where $M :nbsphinx-math:`\\leq `2^N $, with corresponding approximate probabilities :math:`p_{m}` the expectation value is given by"
msgstr ":math:`N` 個の量子ビット :math:`O = O_{N-1}\\dots O_{0}` に対する対角演算子のテンソル積によって与えられる一般的な観測量について考えてみます。ここで $M :nbsphinx-math:`\\leq `2^N $、下付き文字は、演算子が作用する量子ビットを示します。 次に、観測された :math:`M` ビット文字列 :math:`\\{b_{0}, \\dots b_{M-1}\\}` のセットの場合、ここで、対応する近似確率 :math:`p_{m}` を持つ、期待値は次の式で与えられます。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:68
msgid "\\langle O\\rangle \\simeq \\sum_{m=0}^{M-1} p_{m}\\prod_{n=0}^{N-1}O_{n}[b_{m}[N-n-1], b_{m}[N-n-1]],"
msgstr "\\langle O\\rangle \\simeq \\sum_{m=0}^{M-1} p_{m}\\prod_{n=0}^{N-1}O_{n}[b_{m}[N-n-1], b_{m}[N-n-1]],"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:73
msgid "where :math:`O_{n}[b_{m}[N-n-1], b_{m}[N-n-1]]` is the diagonal element of :math:`O_{n}` specified by the :math:`N-n-1`\\ th bit in bitstring :math:`b_{m}`. The reason for the complicated indexing in ``b_{m}`` is because Qiskit uses least-significant bit indexing where the zeroth element of the bit-strings is given by the right-most bit."
msgstr "ここで、 :math:`O_{n}[b_{m}[N-n-1], b_{m}[N-n-1]]` はビット文字列 :math:`b_{m}` の :math:`N-n-1` 番目のビットで指定された :math:`O_{n}` の対角要素です。 ``b_{m}`` の複雑なインデックス付けの理由は、Qiskitが最下位ビットのインデックス付けを使用し、ビット文字列の0番目の要素が右端で指定されるためです。 "

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:75
msgid "Here we will use built-in routines to compute these expectation values. However, it is not hard to do yourself, with plenty of examples to be found."
msgstr "ここでは、これらの期待値を計算するために組み込みルーチンを使用します。 しかし、あなた自身をで計算を行うことは難しいことではありませんし、例題もたくさんあります。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:87
msgid "Main program"
msgstr "メイン・プログラム"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:89
msgid "Here we define our main function for the expectation value runtime program. As always, our program must start with the ``backend``, and ``user_messenger`` arguements, followed by the actual inputs we pass to the program. Here our options are quite simple:"
msgstr "ここでは、期待値ランタイムプログラムのメイン関数を定義します。 私たちのプログラムはいつものように、 ``backend`` と ``user_messenger`` 引数から始め、プログラムに渡す実際の入力が続きます。 ここで私たちのオプションは非常に簡単です:"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:91
msgid "``circuits``: A single QuantumCircuit or list of QuantumCircuits to be executed on the target backend."
msgstr "``circuit``: ターゲットバックエンドで実行される QuantumCircuit または QuantumCircuit のリスト。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:93
msgid "``expectation_operators``: The operators we want to evaluate. These can be strings of diagonal Pauli’s, eg, ``ZIZZ``, or custom operators defined by dictionaries. For example, the projection operator on the all ones state of 4 qubits is ``{'1111': 1}``."
msgstr "``expectation_operators``: 評価したい演算子。これらは対角線のパウリの文字列、例えば ``ZIZZ`` や辞書で定義されたカスタム演算子になります。 例えば、4量子ビットの全ての1の状態に対する射影演算子は ``{'1111': 1} `` です。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:95
msgid "``shots``: How many times to sample each circuit."
msgstr "``shots``: 各回路をサンプリングする回数。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:97
msgid "``transpiler_config``: A dictionary that passes additional arguments on to the transpile function, eg. ``optimization_level``."
msgstr "``transpiler_config``: トランスパイル関数に追加の引数を渡す辞書。例: ``optimization_level`` 。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:99
msgid "``run_config``: A dictionary that passes additional arguments on to ``backend.run()``."
msgstr "``run_config``: ``backend.run()`` に追加の引数を渡す辞書。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:101
msgid "``skip_transpilation``: A flag to skip transpilation altogether and just run the circuits. This is useful for situations where you need to transpile parameterized circuits once, but must bind parameters multiple times and evaluate."
msgstr "``skip_transpilation``: トランスパイルを完全にスキップし、回路を実行するフラグ。 これは、パラメータ回路を一度トランスパイルする必要がある場合に便利ですが、パラメータを複数回バインドして評価する必要があります。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:103
msgid "``return_stddev``: Flag to return bound on standard deviation. If using measurement mitigation this adds some overhead to the computation."
msgstr "``return_stddev``: 標準偏差でバインドされるフラグ。測定軽減を使用すると、計算にオーバーヘッドが加わります。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:105
msgid "``use_measurement_mitigation``: Use M3 measurement mitigation and compute expectation value and standard deviation bound from quasi-probabilities."
msgstr "``use_measurement_mitigation``: M3 測定の軽減と期待値の計算、および準確率からの標準偏差を使用します。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:107
#, python-format
msgid "At the top of the cell below you will see a commented out ``%%writefile sample_expval.py``. We will use this to convert the cell to a Python module named ``sample_expval.py`` to upload."
msgstr "下のセルの上部には、 ``%%writefile sample_expval.py`` というコメントが表示されています。 これを使用して、セルを ``sample_expval.py`` という名前の Python モジュールに変換し、アップロードします。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:228
msgid "Local testing"
msgstr "ローカル・テスト"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:230
msgid "Here we test with a local “Fake” backend that mimics the noise properties of a real system and a 4-qubit GHZ state."
msgstr "ここでは、実際のシステムのノイズ特性を模倣したローカル「Fake」のバックエンドと 4 量子ビット GHZ の状態を用いてテストします。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:320
msgid "If we have done our job correctly, the above should print out two expectation values close to one and a final expectation value close to zero."
msgstr "私たちが正しく仕事をしていれば、上記は 1に近い2つの期待値と 0に近い最終期待値を出力するはずです。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:332
msgid "Program metadata"
msgstr "プログラム・メタデータ"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:334
msgid "Next we add the needed program data to a dictionary for uploading with our program."
msgstr "次に、プログラムでアップロードするために必要なプログラム・データを辞書に追加します。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:402
msgid "Upload the program"
msgstr "プログラムのアップロード"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:404
#, python-format
msgid "We are now in a position to upload the program. To do so we first uncomment and execute the line ``%%writefile sample_expval.py`` giving use the ``sample_expval.py`` file we need to upload."
msgstr "私たちは今、プログラムをアップロードする立場にあります。 これを行うには、まず ``%%writefile sample_expval.py`` という行のコメントを外して、アップロードする必要がある ``sample_expval.py`` ファイルを使用してください。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:464
msgid "Delete program if needed"
msgstr "必要な場合はプログラムを削除"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:486
msgid "Wrapping the runtime program"
msgstr "ランタイム・プログラムのラッピング"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:488
msgid "As always, it is best to wrap the call to the runtime program with a function (or possibly a class) that makes input easier and does some validation."
msgstr "常に、入力を容易にし、検証を行う関数 (またはクラス ) を使用して、ランタイム・プログラムにコールをラップするのが最善です。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:565
msgid "Trying it out"
msgstr "お試しください"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:567
msgid "Let’s try running the program here with our previously made GHZ state and running on the simulator."
msgstr "以前に GHZ の状態で実行され、シミュレーター上で実行されているプログラムを実行することができます。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:627
msgid "The first two projectors should be nearly :math:`0.50` as they tell us the probability of being in the all zeros and ones states, respectively, which should be 50/50 for our GHZ state. The final expectation value of ``ZZZZ`` should be one since this is a GHZ over an even number of qubits. It should go close to zero for an odd number."
msgstr "最初の 2 つの射影は、すべて 0 と 1 の状態にある確率を示すために、それぞれ :math:`0.50` であるべきで、 GHZ の状態では 50/50 であるべきだからです。 ``ZZZZ`` の最後の期待値は、偶数個の量子ビット数の GHZ であるために1になるはずです。 奇数の場合はゼロに近い値になるはずです。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:700
msgid "Quantum Volume as an expectation value"
msgstr "期待値としての量子ボリューム"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:702
msgid "Here we formulate QV as an expectation value of a projector onto the heavy-output elements on a distribution. We can then use our expectation value routine to compute whether a given circuit has passed the QV metric."
msgstr "ここでは、QVを分布上のヘビー・アウトプット要素への射影の期待値として定式化します。 次に、期待値ルーチンを使用して、特定の回路がQVメトリックに通過したかどうかを計算できます。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:704
msgid "QV is defined in terms of heavy-outputs of a distribution. Heavy-outputs are those bit-strings that are those that have probabilities above the median value of the distribution. Below we define the projection operator onto the set of bit-strings that are heavy-outputs for a given distribution."
msgstr "QVは、分布のヘビー・アウトプットの観点から定義されます。 ヘビー・アウトプットとは、分布の中央値を超える確率を持つビット列のことです。 以下では、特定の分布のヘビー・アウトプットであるビット列のセットへの射影演算子を定義します。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:739
msgid "Now we generate 10 QV circuits as our dataset."
msgstr "現在は 10 個の QV 回路をデータセットとして生成します。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:766
msgid "Next, we have to determine the heavy-set of each circuit from the ideal answer, and then pass this along to our heavy-set projector function that we defined above."
msgstr "次に、理想的な答えから各回路のヘビー・セットを決定し、これを上記で定義したヘビー・セットの射影関数に渡す必要があります。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:790
msgid "QV circuits have no measurements on them so need to add them:"
msgstr "QV 回路には、それらを追加する必要があるため、それらについての測定が必要ありません。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:811
msgid "With a list of circuits and projection operators we now need only to pass both sets to our above expectation value runner targeting the desired backend. We will also set the best transpiler arguments to give us a sporting chance of getting some passing scores."
msgstr "回路と射影演算子のリストを使用して、目的のバックエンドをターゲットとする上記の期待値ランナーに両方のセットを渡すだけで済みます。 また、いくつかの合格点を獲得するスポーツのチャンスを与えるために、最高のトランスパイラーの議論を設定します。"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:890
msgid "A passing QV score is one where the value of the heavy-set projector is above :math:`2/3`. So let us see who passed:"
msgstr "合格QVスコアは、ヘビーセットプロジェクターの値が :math:`2/3` を上回っているスコアです。 では、どれが合格したか見てみましょう。"

