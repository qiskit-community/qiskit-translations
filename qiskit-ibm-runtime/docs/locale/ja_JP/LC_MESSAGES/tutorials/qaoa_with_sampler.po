msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-05 17:19+0000\n"
"PO-Revision-Date: 2023-10-08 13:34\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /main/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/qaoa_with_sampler.po\n"
"X-Crowdin-File-ID: 10007\n"

#: ../../tutorials/qaoa_with_sampler.ipynb:9
msgid "This page was generated from `docs/tutorials/qaoa_with_sampler.ipynb`__."
msgstr "このページは `docs/tutorials/qaoa_with_sampler.ipynb`__ から生成されました。"

#: ../../tutorials/qaoa_with_sampler.ipynb:9
msgid "Quantum Approximate Optimization Algorithm with Sampler primitive"
msgstr "Sampler primitiveによる量子近似最適化アルゴリズム"

#: ../../tutorials/qaoa_with_sampler.ipynb:12
msgid "Overview"
msgstr "概要"

#: ../../tutorials/qaoa_with_sampler.ipynb:14
msgid "Quantum Approximate Optimization Algorithm (QAOA) is a well-known algorithm for finding approximate solutions to combinatorial-optimization problems. It is a variational algorithm, meaning that it starts with a random guess and then iteratively improves the guess using a feedback loop between a quantum computer and a classical computer."
msgstr "量子近似最適化アルゴリズム(QAOA) は、組合せ最適化問題の近似解を探すためのよく知られたアルゴリズムです。 これは変分アルゴリズムで、 つまりランダムな推測から始まり量子コンピューターと古典コンピューターの間のフィードバックループを使って繰り返して推測を向上させるものです。"

#: ../../tutorials/qaoa_with_sampler.ipynb:16
msgid "This tutorial demonstrates using QAOA for a graph partition problem with the Qiskit Runtime ``Sampler`` primitive."
msgstr "このチュートリアルでは、Qiskit Runtime ``Sampler`` primitive でグラフパーティションの問題に QAOA を使用したデモを示します。"

#: ../../tutorials/qaoa_with_sampler.ipynb:28
msgid "Set up your local development environment"
msgstr "ローカル開発環境のセットアップ"

#: ../../tutorials/qaoa_with_sampler.ipynb:30
msgid "This tutorial requires a Qiskit Runtime service instance. If you haven’t done so already, follow `these steps <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ to set one up."
msgstr "このチュートリアルでは、Qiskit Runtime サービス・インスタンスが必要です。まだ実行していない場合は、 `これらの手順 <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ に従ってセットアップします。"

#: ../../tutorials/qaoa_with_sampler.ipynb:42
msgid "Generate graph"
msgstr "グラフを生成"

#: ../../tutorials/qaoa_with_sampler.ipynb:44
msgid "First we will define an adjacency matrix to represent the graph we want to study. We will use ``rustworkx`` to visualize the graph."
msgstr "まず、学習したいグラフを表すための隣接行列を定義します。グラフを視覚化するために ``rustworkx`` を使用します。"

#: ../../tutorials/qaoa_with_sampler.ipynb:100
msgid "Convert the graph to a Hamiltonian"
msgstr "グラフをハミルトニアンに変換する"

#: ../../tutorials/qaoa_with_sampler.ipynb:102
msgid "The graph partition problem can be converted to an Ising Hamiltonian. Qiskit has different capabilities in the Optimization module to perform this conversion. Since our goal is to show QAOA with ``Sampler``, the module is used without further explanation to create the operator. Review the paper `Ising formulations of many NP problems <https://arxiv.org/abs/1302.5843>`__ to learn more about the technique."
msgstr "グラフ分割問題はイジングハミルトニアンに変換できます。Qiskitには、この変換を行うためのOptimizationモジュールにさまざまな機能があります。我々の目的は ``Sampler`` を用いたQAOAを示すことなので、演算子を作成するためにこれ以上の説明は省略します。このテクニックの詳細については、論文 `Ising formulations of many NP problems <https://arxiv.org/abs/1302.5843>`__ をご覧ください。"

#: ../../tutorials/qaoa_with_sampler.ipynb:175
msgid "Initialize the service and select a backend"
msgstr "サービスを初期化してバックエンドを選択する"

#: ../../tutorials/qaoa_with_sampler.ipynb:177
msgid "Next, we will create a service instance and specify a backend. In this example we will use a simulator to avoid queue times, but you can use the following code to run on a real device by simply changing the backend. Note that you will need to specify account credentials if they were not previously saved on disk."
msgstr "次にサービスインスタンスを作成し、バックエンドを指定します。 この例では、キューの時間を避けるためにシミュレーターを使用します。 バックエンドを変更するだけで実際のデバイス上で動作するように次のコードを使用できます。以前にディスクに保存されていなかった場合、アカウントの資格情報を指定する必要があります。"

#: ../../tutorials/qaoa_with_sampler.ipynb:202
msgid "Run QAOA algorithm"
msgstr "QAOAアルゴリズムを実行する"

#: ../../tutorials/qaoa_with_sampler.ipynb:204
msgid "Finally, we will use the QAOA algorithm to find a balanced partition with the least number of crossing edges. We will pass the Qiskit Runtime ``Sampler`` primitive and COBYLA optimizer to the algorithm. Since QAOA is a variational algorithm, we will also run it inside a `session <https://qiskit.org/ecosystem/ibm-runtime/sessions.html>`__ to minimize delays between each iteration."
msgstr "最後に、QAOAアルゴリズムを使用して、交差エッジの最小数のバランスの取れたパーティションを見つけます。 Qiskit Runtime の ``Sampler`` primitive と COBYLA オプティマイザーをアルゴリズムに渡します。 QAOAは変分アルゴリズムなので、それぞれの反復間の遅延を最小限に抑えるために、 `session <https://qiskit.org/ecosystem/ibm-runtime/sessions.html>`__ 内で実行します。"

