msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-27 13:35+0000\n"
"PO-Revision-Date: 2022-10-27 13:52\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/sample_vqe_program/qiskit_runtime_vqe_program.po\n"
"X-Crowdin-File-ID: 9826\n"
"Language: ja_JP\n"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:9
msgid "This page was generated from `docs/tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb`__."
msgstr "このページは、 `docs/tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb`__ から生成されました。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:9
msgid "Creating Custom Programs for Qiskit Runtime"
msgstr "Qiskit Runtime 用カスタム・プログラムの作成"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:15
msgid "Paul Nation"
msgstr "ポール・ネーション(Paul Nation)"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:25
msgid "IBM Quantum Partners Technical Enablement Team"
msgstr "IBM Quantum Partners テクニカル・イネーブルメント・チーム"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:31
msgid "Here we will demonstrate how to create, upload, and use a custom Program for Qiskit Runtime. As the utility of the Runtime execution engine lies in its ability to execute many quantum circuits with low latencies, this tutorial will show how to create your own Variational Quantum Eigensolver (VQE) program from scratch."
msgstr "ここでは、 Qiskit Runtime 用のカスタム・プログラムの作成、アップロード、およびカスタム・プログラムの使用方法を説明します。Runtime 実行エンジンのユーティリティーは、待ち時間が少ない多くの量子回路を実行する能力を持っているため、このチュートリアルでは、独自の変分量子固有値ソルバー（Variational Quantum Eigensolver、VQE) プログラムを最初から作成する方法を示します。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:43
msgid "Prerequisites"
msgstr "前提条件"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:45
msgid "You must have the latest Qiskit installed."
msgstr "最新の Qiskit がインストールされている必要があります。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:46
msgid "You must have either an IBM Cloud or an IBM Quantum account that can access Qiskit Runtime."
msgstr "Qiskit Runtime にアクセスできる IBM Cloud または IBM Quantum アカウントのいずれかを持っている必要があります。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:58
msgid "Current limitations"
msgstr "現在の制限"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:60
msgid "The runtime execution engine currently has the following limitations that must be kept in mind:"
msgstr "Runtime 実行エンジンには、現在以下のような制限があります。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:62
msgid "The Docker images used by the runtime include only Qiskit and its dependencies, with few exceptions. One exception is the inclusion of the ``mthree`` measurement mitigation package."
msgstr "Runtime で使用される Docker イメージには、Qiskit とその依存関係のみが含まれており、例外はほとんどありません。 例外として、``mthree`` 測定エラー軽減パッケージが含まれています。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:64
msgid "For security reasons, the runtime cannot make internet calls outside of the environment."
msgstr "セキュリティ上の理由から、runtime は環境外でインターネットコールを行うことはできません。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:66
msgid "As Qiskit Runtime matures, these limitations will be removed."
msgstr "Qiskit Runtime が成熟するにつれて、これらの制限はなくなります。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:78
msgid "Simple VQE"
msgstr "シンプルなVQE"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:80
msgid "VQE is an hybrid quantum-classical optimization procedure that finds the lowest eigenstate and eigenenergy of a linear system defined by a given Hamiltonian of Pauli operators. For example, consider the following two-qubit Hamiltonian:"
msgstr "VQEは、パウリ演算子のハミルトニアンによって定義された線形システムの最小固有状態と固有エネルギーを見つけるハイブリッド量子古典最適化手順です。 たとえば、次の2量子ビットハミルトニアンについて考えてみます。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:82
msgid "H = A X_{1}\\otimes X_{0} + A Y_{1}\\otimes Y_{0} + A Z_{1}\\otimes Z_{0},"
msgstr "H = A X_{1}\\otimes X_{0} + A Y_{1}\\otimes Y_{0} + A Z_{1}\\otimes Z_{0},"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:87
msgid "where :math:`A` is numerical coefficient and the subscripts label the qubits on which the operators act. The zero index being farthest right is the ordering used in Qiskit. The Pauli operators tell us which measurement basis to to use when measuring each of the qubits."
msgstr ":math:`A` は数値係数であり、下付き添え字は演算子が作用する量子ビットを表します。 ゼロインデックスが最も右にあるのは、Qiskitで使用される順番です。 パウリ演算子は、各量子ビットを測定するときにどの測定基底を使うかを教えてくれます。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:89
msgid "We want to find the ground state (lowest energy state) of this Hamiltonian, and the associated eigenvector. To do this we must start at a given initial state and iteratively vary the parameters that define this state using a classical optimizer, such that the computed energies of subsequent steps are nominally lower than those previously. The parameterized state of the system is defined by an ansatz quantum circuit that should have non-zero support in the direction of the ground state. Because in general we do not know the solution, the choice of ansatz circuit can be highly problem-specific with a form dictated by additional information. For further information about variational algorithms, we point the reader to `Nature Reviews Physics volume 3, 625 (2021) <https://doi.org/10.1038/s42254-021-00348-9>`__."
msgstr "私たちは、このハミルトニアンの基底状態(最低エネルギー状態)と関連する固有ベクトルを見つけたいと考えています。 これを行うには、与えられた初期状態から開始し、古典的なオプティマイザを使用してこの状態を定義するパラメーターを繰り返し変更する必要があります。 その後のステップの計算エネルギーは以前より低くなるようにする必要があります。システムのパラメータ化された状態は、ansatz量子回路によって定義されます。この量子回路は、基底状態の方向に非ゼロのサポートを持つ必要があります。 一般的に、我々は解を知らないため、ansatz回路の選択は、追加情報によって決定されるフォームで非常に問題に特化したものになります。 変動アルゴリズムの詳細については、`Nature Reviews Physics volume 3, 625 (2021) <https://doi.org/10.1038/s42254-021-00348-9>`__ を参照してください。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:92
msgid "Thus we need at least the following inputs to create our VQE quantum program:"
msgstr "したがって、VQE量子プログラムを作成するには、少なくとも以下の入力が必要です。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:94
msgid "A representation of the Hamiltonian that specifies the problem."
msgstr "問題を指定するハミルトニアンの表現。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:96
msgid "A choice of parameterized ansatz circuit, and the ability to pass configuration options, if any."
msgstr "パラメーター化された ansatz 回路の選択と、構成オプションを渡す機能 ( 存在する場合 ) 。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:98
msgid "However, the following are also beneficial inputs that users might want to have:"
msgstr "ただし、以下のものも、ユーザーにとって有益な入力となります。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:100
msgid "Add the ability to pass an initial state."
msgstr "初期状態を渡す機能を追加する。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:102
msgid "Vary the number of shots that are taken."
msgstr "得られたショットの数を変更する。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:104
msgid "Ability to select which classical optimizer is used, and set configuraton values, if any."
msgstr "どの古典的オプティマイザーが使用されるかを選択し、構成値を設定する機能 ( ある場合 ) 。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:106
msgid "Ability to turn on and off measurement mitigation."
msgstr "測定エラーの軽減をオンまたはオフにする機能。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:118
msgid "Specifying the form of the input values"
msgstr "入力値の形式の指定"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:120
msgid "All inputs to runtime programs must be serializable objects. That is to say, whatever you pass into a runtime program must be able to be converted to JSON format. It is thus beneficial to keep inputs limited to basic data types and structures unless you have experience with custom object serialization, or they are common Qiskit types such as ``QuantumCircuit`` etc that the built-in ``RuntimeEncoder`` can handle. Fortunately, the VQE program described above can be made out of simple Python components."
msgstr "Runtime プログラムへのすべての入力は、シリアライズ可能なオブジェクトである必要があります。 つまり、runtime プログラムに渡すものはすべて、JSON形式に変換できる必要があります。 したがって、カスタムオブジェクトのシリアライズ化の経験があるか、または組み込みの ``RuntimeEncoder`` で処理できる ``QuantumCircuit`` などの一般的なQiskitタイプでない限り、入力を基本的なデータ型と構造に限定しておくと便利です。 幸い、上記のVQEプログラムは、単純なPythonコンポーネントで作成できます。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:123
msgid "First, it is possible to represent any Hamiltonian using a list of values with each containing the numerical coefficeint for each term and the string representation for the Pauli operators. For the above example, the ground state energy with :math:`A=1` is :math:`-3` and we can write it as:"
msgstr "まず、各項の数値係数とパウリ演算子の文字列表現を含む値のリストを使用して、任意のハミルトニアンを表すことができます。 上記の例では、:math:`A=1` の基底状態エネルギーは :math:`-3` であり、次のように記述できます。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:144
msgid "Next we have to provide the ability to specify the parameterized Ansatz circuit. Here we will take advantage of the fact that many ansatz circuits are pre-defined in the Qiskit Circuit Library. Examples can be found in the `N-local circuits section <https://qiskit.org/documentation/apidoc/circuit_library.html#n-local-circuits>`__."
msgstr ""

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:146
msgid "We would like the user to be able to select between ansatz options such as: ``NLocal``, ``TwoLocal``, and ``EfficientSU2``. We could have the user pass the whole ansatz circuit to the program; however, in order to reduce the size of the upload we will pass the ansatz by name. In the runtime program, we can take this name and get the class that it corresponds to from the library using, for example,"
msgstr "ユーザーが ``NLocal`` 、``TwoLocal`` および ``EfficientSU2`` などの ansatz オプションから選択できるようにしたいと考えています。 ユーザーに ansatz 回路全体をプログラムに渡してもらうこともできますが、アップロードのサイズを小さくするために、ansatz を名前で渡すことにします。 Runtime プログラムでは、この名前を取得し、たとえば、次のようにしてライブラリから対応するクラスを取得できます。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:169
msgid "For the ansatz configuration, we will pass a simple ``dict`` of values."
msgstr "ansatz 構成では、単純な ``dict`` の値を入力します。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:181
msgid "Optionals"
msgstr "オプション"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:183
msgid "If we want to add the ability to pass an initial state, then we will need to add the ability to pass a 1D list/ NumPy array. Because the number of parameters depends on the ansatz and its configuration, the user would have to know what ansatz they are doing ahead of time."
msgstr "初期状態を渡す機能を追加したい場合は、一次元リスト/ NumPy 配列を渡す機能を追加する必要があります。 パラメーターの数は、 ansatz とその構成に依存しているため、ユーザーは、前もって何をしているかを知る必要があります。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:185
msgid "Selecting a number of shots requires simply passing an integer value."
msgstr "ショットの数を選択するには、単純に整数値を渡す必要があります。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:187
msgid "Here we will allow selecting a classical optimizer by name from those in SciPy, and a ``dict`` of configuration parameters. Note that for execution on an actual system, the noise inherent in today’s quantum systems makes having a stochastic optimizer crucial to success. SciPy does not have such a choice, and the one built into Qiskit is wrapped in such a manner as to make it difficult to use elsewhere. As such, here we will use an SPSA optimizer written to match the style of those in SciPy. This function is given in `Appendix A <#Appendix-A>`__."
msgstr "ここでは、SciPyに名前を付け、構成パラメータの ``dict`` を使用することで、古典的な最適化プログラムを選択することができます。 実際のシステムで実行するためには、今日の量子システムのもつノイズのために、成功するためには、確率的な最適化プログラムが不可欠なものであることに注意してください。 SciPy はこのような選択肢はなく、 Qiskit に組み込まれたものは、他の場所での使用を困難にするような方法でラップされています。 したがって、ここでは、 SciPyのものと同じようなスタイルで書かれたSPSA 最適化プログラムを使用して、  この関数は、 `Appendix A <#Appendix-A>`__ に記載されています。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:199
msgid "Finally, for measurement error mitigation we can simply pass a boolean (True/False) value."
msgstr "最後に、測定誤差軽減のために、単にブール値 (True/False) の値を渡すことができます。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:211
msgid "Main program"
msgstr "メイン・プログラム"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:213
msgid "We are now in a position to start building our main program. However, before doing so we point out that it makes the code cleaner to make a separate function that takes strings of Pauli operators that define our Hamiltonian and convert them to a list of circuits with single-qubit gates that change the measurement basis for each qubit, if needed. This function is given in `Appendix B <#Appendix-B>`__."
msgstr "これで、メインプログラムの構築を開始できるようになりました。 しかし、これを行う前に、ハミルトニアンを定義するパウリ演算子の文字列を分離し、必要に応じて各量子ビットの測定基準を変更するシングル量子ビット・ゲートを持つ回路のリストに変換する関数を別に作っておくと、コードがすっきりします。この関数は、 `Appendix B <#Appendix-B>`__ に記載されています。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:225
msgid "Required signature"
msgstr "必要な署名"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:227
msgid "Every runtime program is defined via the ``main`` function, and must have the following input signature:"
msgstr "すべての runtime プログラムは ``main`` 関数を介して定義され、以下の入力署名を持っている必要があります。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:233
msgid "where ``backend`` is the backend that the program is to be executed on, and ``user_message`` is the class by which interim (and possibly final) results are communicated back to the user. After these two items, we add our program-specific arguments and keyword arguments."
msgstr "``backend`` は、プログラムが実行されるバックエンドであり、 ``user_message`` は、中間結果 (最終結果もあり得る) をユーザーに伝えるためのクラスです。 これらの 2 つの項目の後に、プログラム固有の引数およびキーワード引数を追加します。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:245
msgid "The main VQE program"
msgstr "メイン VQE プログラム"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:247
msgid "Here is the main program for our sample VQE. What each element of the function does is written in the comments before the element appears."
msgstr "ここでは、サンプル VQEのメインプログラムを示します。 関数の各要素が何をするものかは、その要素が現れる前のコメントに書いてあります。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:249
msgid "This program uses the ``mthree`` measurement mitigation package. You can install the package via ``pip install mthree``."
msgstr "このプログラムは、 ``mthree`` の測定エラー緩和パッケージを使用します。 このパッケージは ``pip install mthree`` でインストールできます。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:441
msgid "Local testing"
msgstr "ローカル・テスト"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:447
msgid "Important: You need to execute the code blocks in Appendices A and B before continuing."
msgstr "重要: 続行する前に、付録 A および B 内のコード・ブロックを実行する必要があります。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:453
msgid "We can test whether our routine works by simply calling the ``main`` function with a backend instance, a ``UserMessenger``, and sample arguments."
msgstr "私たちは、バックエンドのインスタンスと ``UserMessenger`` 、サンプルの引数を指定して ``main`` 関数を呼び出すだけで、このルーチンが動作するかどうかをテストすることができます。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:586
msgid "Having executed the above, we see that there are 5 parameter arrays returned, one for each callback, along with the final optimization result. The parameter arrays are the interim results, and the ``UserMessenger`` object prints these values to the cell output. The output itself is the answer we obtained, expressed as a SciPy ``OptimizerResult`` object."
msgstr "上記を実行すると、最終的な最適化結果とともに、コールバックごとに1つずつ、合計5つのパラメーター配列が返されることがわかります。 パラメーター配列は中間結果であり、 ``UserMessenger`` オブジェクトはこれらの値をセル出力に出力します。 出力自体は、SciPy ``OptimizerResult`` オブジェクトとして表現された私たちが得た答えです。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:598
msgid "Program metadata"
msgstr "プログラムのメタデータ"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:600
msgid "Program metadata is essentially the docstring for a runtime program. It describes overall program information such as the program ``name``, ``description``, and the ``max_execution_time`` the program is allowed to run, as well as details the inputs and the outputs the program expects. At a bare minimum the values described above are required"
msgstr "プログラムのメタデータは、基本的に runtime プログラムの docstring です。 プログラムの ``name``, ``description``, および ``max_execution_time`` などのプログラム全体の情報と、プログラムが期待する入力と出力の詳細を説明します。 最低限、上記の値が必要です"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:626
msgid "It is important to set the ``max_execution_time`` high enough so that your program does not get terminated unexpectedly. Additionally, one should make sure that interim results are sent back to the user so that, if something does happen, the user can start where they left off."
msgstr "プログラムが予期せず終了しないように、``max_execution_time`` を十分に高く設定することが重要です。 さらに、中間結果がユーザーに返送されることを確認して、何かが発生した場合に、ユーザーが中断したところから開始できるようにする必要があります。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:628
msgid "It is, however, good form to detail the parameters and return types, as well as interim results. That being said, if making a runtime intended to be used by others, this information would also likely be mirrored in the signature of a function or class that the user would interact with directly; end users should not directly call runtime programs. We will see why below. Nevertheless, let us add to our metadata. First, the ``parameters`` section details the inputs the user is able to pass:"
msgstr "ただし、中間結果だけでなく、パラメーターと戻りの型を詳述するのは良いフォームです。 この情報は、他のユーザーが使うことを意図した runtime を作る場合、この情報は、ユーザーが直接操作する関数やクラスのシグニチャーにも反映されことが多いでしょう。エンド・ユーザーは、runtime プログラムを直接呼び出すべきではありません。 理由について以下に説明します。 それでも、メタデータに追加することはできます。 まず、 ``parameters`` セクションで、ユーザーが渡すことができる入力について詳しく説明します。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:689
msgid "Next, the ``return_values`` section tells about the return types:"
msgstr "次に、 ``return_values`` セクションは、戻りの型について次のように指定します。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:714
msgid "and finally let us specify what comes back when an interim result is returned:"
msgstr "最後に、中間結果が返されたときに何が返されるかを指定しましょう。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:740
msgid "Uploading the program"
msgstr "プログラムのアップロード"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:742
msgid "We now have all the ingredients needed to upload our program. To do so we need to collect all of our code in one file, here called ``sample_vqe.py`` for uploading. This limitation will be removed in later versions of Qiskit Runtime. Alternatively, if the entire code is contained within a single Jupyter notebook cell, this can be done using the magic function"
msgstr "これで、プログラムをアップロードするために必要なすべての要素が揃いました。 そのためには、アップロード用に ``sample_vqe.py`` と呼ばれる1つのファイルにすべてのコードを収集する必要があります。 この制限は、Qiskit Runtime の新しいバージョンで取り除かれる予定です。 または、コード全体が単一のJupyterノートブックのセルに含まれている場合、これはマジック関数を使用して実行できます。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:748
msgid "To actually upload the program we need to initialize a Qiskit Runtime service:"
msgstr "実際にプログラムをアップロードするには、 Qiskit Runtime サービスを初期化する必要があります。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:772
msgid "Program upload"
msgstr "アップロードされたプログラム"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:774
msgid "The call to ``program_upload`` takes the target Python file as ``data`` and the metadata as inputs."
msgstr "``program_upload`` に対する呼び出しは、ターゲットの Python ファイルを ``data`` として、メタデータを入力として使用します。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:821
msgid "Here the ``upload_program()`` method returns a ``program_id``, which is how you should reference your program."
msgstr "ここで ``upload_program()`` メソッドは ``program_id`` を戻します。これは、ユーザーのプログラムを参照する方法です。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:833
msgid "Program information"
msgstr "プログラム情報"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:835
msgid "We can query the program for information and see that our metadata is correctly being attached:"
msgstr "プログラムで情報を照会し、メタデータが正しく接続されていることを確認することができます。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1026
msgid "Deleting a program"
msgstr "プログラムの削除"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1028
msgid "If you make a mistake and need to delete and/or re-upload the program, you can run the following, passing the ``program_id``:"
msgstr "プログラムを誤って削除または再アップロードする必要がある場合は、 ``program_id`` を渡すことにより、以下のことを実行できます。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1050
msgid "Running the program"
msgstr "プログラムの実行"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1053
msgid "Specify parameters"
msgstr "パラメーターの指定"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1055
msgid "To run the program we need to specify the ``options`` that are used in the runtime environment (not the program variables). The target backend is defined via the ``backend_name`` field."
msgstr "プログラムを実行するためには、ランタイム環境で使用される ``options`` を指定する必要があります ( プログラム変数ではありません )。 対象となるバックエンドは、 ``backend_name`` フィールドを介して定義されます。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1076
msgid "The ``inputs`` dictionary is used to pass arguments to the ``main`` function itself. For example:"
msgstr "``inputs`` 辞書は、 ``main`` 関数自体に引数を渡すために使用されます。 例えば、"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1100
msgid "Execute the program"
msgstr "プログラムの実行"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1102
msgid "We now can execute the program and grab the result."
msgstr "プログラムを実行して結果を取得することができます。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1182
msgid "A few things need to be pointed out. First, we did not get back any interim results, and second, the return object is a plain dictionary. This is because we did not listen for the return results, and we did not tell the job how to format the return result."
msgstr "いくつかの点を指摘する必要があります。 まず、中間結果が返されませんでした。次に、返されるオブジェクトは単純な辞書です。 これは、返される結果をリスニングせず、返される結果をフォーマットする方法をジョブに指示しなかったためです。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1194
msgid "Listening for interim results and final result"
msgstr "中間結果と最終結果のリスニング"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1196
msgid "To listen for interim results and final result we need to pass a callback function to ``service.run`` that stores the results. The callback takes two arguments ``job_id`` and the returned data:"
msgstr "中間結果と最終結果をリスニングするには、結果を格納する ``service.run`` にコールバック関数を渡す必要があります。 コールバックは、2つの引数 ``job_id`` と返されたデータを受け取ります。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1221
msgid "Executing again we get:"
msgstr "もう一度実行します :"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1336
msgid "Formatting the returned results"
msgstr "返された結果のフォーマット"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1338
msgid "In order to format the return results into the desired format, we need to specify a decoder. This decoder must have a ``decode`` method that gets called to do the actual conversion. In our case ``OptimizeResult`` is a simple sub-class of ``dict`` so the formatting is simple."
msgstr "戻り結果を目的の形式にフォーマットするには、デコーダーを指定する必要があります。 このデコーダーには、実際の変換を行うために呼び出される ``decode`` メソッドが必要です。 この場合、 ``OptimizeResult`` は ``dict`` の単純なサブクラスであるため、フォーマットは単純です。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1367
msgid "We can then use this when returning the job result:"
msgstr "次に、ジョブの結果を戻すときに、これを使用できます。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1439
msgid "Simplifying program execution with wrapping functions"
msgstr "ラッピング関数によるプログラム実行の簡素化"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1441
msgid "While runtime programs are powerful and flexible, they are not the most friendly things to interact with. Therefore, if your program is intended to be used by others, it is best to make wrapper functions and/or classes that simplify the user experience. Moreover, such wrappers allow for validation of user inputs on the client side, which can quickly find errors that would otherwise be raised later during the execution process - something that might have taken hours waiting in queue to get to."
msgstr "Runtime プログラムは強力で柔軟性がありますが、使い勝手が良いとは言えません。したがって、プログラムが他のユーザーによって使用されるように意図されている場合は、ユーザー・エクスペリエンスを単純化するラッパー関数またはクラス ( あるいはその両方 ) を作成するのが最適です。 さらに、そのようなラッパーを使用すると、クライアント側でのユーザー入力の検証が可能になります。これにより、実行プロセス中に後で発生する可能性のあるエラーを素早く検出できます。これは、キュー内で待機する時間を待機していた可能性があるものです。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1443
msgid "Here we will make two helper routines. First, a job wrapper that allows us to attach and retrieve the interim results directly from the job object itself, as well as decodes for us so that the end user need not worry about formatting the results themselves."
msgstr "ここで、ヘルパー・ルーチンを 2 つ作成します。 まず、ジョブ・ラッパーを使用することにより、ジョブ・オブジェクト自体から直接中間結果を直接添付および取得することができます。また、エンド・ユーザーが結果自体をフォーマット設定することについて心配する必要がないようにするために、デコードも行います。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1499
msgid "Next, we create the actual function we want users to call to execute our program. To this function we will add a series of simple validation checks (not all checks will be done for simplicity), as well as use the job wrapper defined above to simplify the output."
msgstr "次に、ユーザーがプログラムを実行するために呼び出す実際の関数を作成します。 この関数には、一連の簡単な検証チェック ( 簡単のためすべてのチェックが行われるわけではない ) を追加し、同様に出力を単純化するために上記で定義されたジョブ・ラッパーを使用します。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1599
msgid "We can now execute our runtime program via this runner function:"
msgstr "以下の runner 関数を介して、runtime プログラムを実行できるようになりました。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1680
msgid "The interim results are now attached to the job ``interim_results`` attribute and, as expected, we see that the length matches the number of iterations performed."
msgstr "中間結果は ``interim_results`` 属性に追加され、予想通り、長さが実行される反復の数と一致することがわかります。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1727
msgid "Conclusion"
msgstr "結論"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1729
msgid "We have demonstrated how to create, upload, and use a custom Qiskit Runtime by creating our own VQE solver from scratch. This tutorial was meant to touch upon every aspect of the process for a real-world example. Within the current limitations of the runtime environment, this example should enable readers to develop their own single-file runtime program. This program is also a good starting point for exploring additional flavors of VQE runtime. For example, it is straightforward to vary the number of shots per iteration, increasing shots as the number of iterations increases. Those looking to go deeper can consider implementing an `adaptive VQE <https://doi.org/10.1038/s41467-019-10988-2>`__, where the ansatz is not fixed at initialization."
msgstr ""

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1742
msgid "Appendix A"
msgstr "付録 A"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1744
msgid "Here we code a simple simultaneous perturbation stochastic approximation (SPSA) optimizer for use on noisy quantum systems. Most optimizers do not handle fluctuating cost functions well, so this is a needed addition for executing on real quantum hardware."
msgstr "ここでは、ノイズの多い量子システムで使用するための簡単な同時摂動確率近似(simultaneous perturbation stochastic approximation、SPSA)オプティマイザをコード化します。 ほとんどのオプティマイザは変動するコスト関数をうまく扱えないため、これは実際の量子ハードウェア上で実行するために必要な追加です。"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1842
msgid "Appendix B"
msgstr "付録 B"

#: ../../tutorials/sample_vqe_program/qiskit_runtime_vqe_program.ipynb:1844
msgid "This is a helper function that converts the Pauli operators in the strings that define the Hamiltonian operators into the appropriate measurements at the end of the circuits. For :math:`X` operators this involves adding an :math:`H` gate to the qubits to be measured, whereas a :math:`Y` operator needs :math:`S^{+}` followed by a :math:`H`. Other choices of Pauli operators require no additional gates prior to measurement."
msgstr "これは、ハミルトニアン演算子を定義する文字列内のパウリ演算子を回路の最後で適切な測定値に変換するヘルパー関数です。 :math:`X` 演算子の場合、これには測定する量子ビットに :math:`H` ゲートを追加する必要があり、 :math:`Y` 演算子には :math:`S^{+}` の後に :math:`H` が必要です 。パウリ演算子の他の選択肢では、測定前に追加のゲートは必要ありません。"

