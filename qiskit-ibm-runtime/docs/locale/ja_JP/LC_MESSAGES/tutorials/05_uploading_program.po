msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-21 16:00+0000\n"
"PO-Revision-Date: 2022-07-09 05:12\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/05_uploading_program.po\n"
"X-Crowdin-File-ID: 9814\n"
"Language: ja_JP\n"

#: ../../tutorials/05_uploading_program.ipynb:9
msgid "This page was generated from `docs/tutorials/05_uploading_program.ipynb`__."
msgstr "このページは `docs/tutorials/05_uploading_program.ipynb`__ から生成されました。"

#: ../../tutorials/05_uploading_program.ipynb:8
msgid "|qiskit_header.png|"
msgstr "|qiskit_header.png|"

#: ../../tutorials/05_uploading_program.ipynb:10
msgid "qiskit_header.png"
msgstr "qiskit_header.png"

#: ../../tutorials/05_uploading_program.ipynb:22
msgid "Uploading a Qiskit runtime program"
msgstr "Qiskit Runtime プログラムのアップロード"

#: ../../tutorials/05_uploading_program.ipynb:33
msgid "Here we provide an overview on how to construct and upload a runtime program. A runtime program is a piece of Python code that lives in the cloud and can be invoked by passing in just its parameters. Runtime programs are private by default, which means only you can see and access your programs. Some authorized users can also mark their programs as public, making them visible and accessible by everyone."
msgstr "ここでは、runtime プログラムを構築してアップロードする方法の概要を説明します。 runtime プログラムは、クラウドに存在するPythonコードの一部であり、そのパラメーターのみを渡すことで呼び出すことができます。 runtime プログラムはデフォルトで非公開です。つまり、プログラムを表示してアクセスできるのはあなただけです。 一部の許可されたユーザーは、プログラムを公開としてマークして、誰でも表示およびアクセスできるようにすることもできます。"

#: ../../tutorials/05_uploading_program.ipynb:45
msgid "Constructing a runtime program"
msgstr "Runtime プログラムの構成"

#: ../../tutorials/05_uploading_program.ipynb:56
msgid "Below is a template of a runtime program. You can find the template file in the `qiskit-ibm-runtime <https://github.com/Qiskit/qiskit-ibm-runtime/blob/main/qiskit_ibm_runtime/program/program_template.py>`__ repository."
msgstr "以下はruntime プログラムのテンプレートです。テンプレートファイルは `qiskit-ibm-runtime <https://github.com/Qiskit/qiskit-ibm-runtime/blob/main/qiskit_ibm_runtime/program/program_template.py>`__ リポジトリーにあります。"

#: ../../tutorials/05_uploading_program.ipynb:104
msgid "Each runtime program must have a ``main()`` function, which serves as the entry point to the program. This function must have ``backend`` and ``user_messenger`` as the first two positional arguments:"
msgstr "各runtime プログラムには ``main()`` 関数がなければなりません。この関数は、プログラムへのエントリー・ポイントとして機能します。 この関数は、最初の 2 つの定位置引数として ``backend`` および ``user_messenger`` を持つ必要があります。"

#: ../../tutorials/05_uploading_program.ipynb:106
msgid "``backend`` is an instance of `ProgramBackend <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.ProgramBackend.html#qiskit_ibm_runtime.ProgramBackend>`__ and has a `run() <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.ProgramBackend.html#qiskit_ibm_runtime.ProgramBackend.run>`__ method that can be used to submit circuits."
msgstr "``backend`` は、`ProgramBackend <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.ProgramBackend.html#qiskit_ibm_runtime.ProgramBackend>`__ のインスタンスであり、回路の送信に使用できる `run() <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.ProgramBackend.html#qiskit_ibm_runtime.ProgramBackend.run>`__ メソッドを持っています。"

#: ../../tutorials/05_uploading_program.ipynb:107
msgid "``user_messenger`` is an instance of `UserMessenger <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.UserMessenger.html#qiskit_ibm_runtime.UserMessenger>`__ and has a `publish() <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.UserMessenger.html#qiskit_ibm_runtime.UserMessenger.publish>`__ method that can be used to send interim and final results to the program user. This method takes a parameter ``final`` that indicates whether it’s a final result. However, it is recommended to return the final result directly from the ``main()`` function. Currently only final results are stored after a program execution finishes."
msgstr "``user_messenger`` は、 `UserMessenger <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.UserMessenger.html#qiskit_ibm_runtime.UserMessenger>`__ のインスタンスであり、プログラム・ユーザーに中間結果と最終結果を送信するために使用できる `publish() <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.UserMessenger.html#qiskit_ibm_runtime.UserMessenger.publish>`__ を持っています。 このメソッドは、最終結果であるかどうかを示すパラメーター ``final`` を使用します。 ただし、 ``main()`` 関数から最終結果を直接返すことをお勧めします。 現在、プログラムの実行が終了すると、最終結果のみが保管されます。"

#: ../../tutorials/05_uploading_program.ipynb:119
msgid "There are several runtime program source code in the ``program_source`` directory in this repository. ``program_source/hello_world/hello_world.py`` is one of them. It is a sample runtime program that submits random circuits for user-specified iterations:"
msgstr "このリポジトリー内の ``program_source`` ディレクトリーには、いくつかのruntime プログラム・ソース・コードがあります。 ``program_source/hello_world/hello_world.py`` はその中の 1 つです。 これは、ユーザー指定の反復用にランダム・サーキットをサブミットするruntime プログラムのサンプルです。"

#: ../../tutorials/05_uploading_program.ipynb:178
msgid "Data serialization"
msgstr "データのシリアライズ"

#: ../../tutorials/05_uploading_program.ipynb:189
msgid "Runtime programs live in the cloud, and JSON is the standard way of passing data to and from cloud services. Therefore, when a user invokes a runtime program, the input parameters must first be serialized into the JSON format and then deserialized once received by the server. By default, this serialization and deserialization is done automatically using the `RuntimeEncoder <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.RuntimeEncoder.html#qiskit_ibm_runtime.RuntimeEncoder>`__ and `RuntimeDecoder <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.RuntimeDecoder.html#qiskit_ibm_runtime.RuntimeDecoder>`__ classes."
msgstr "Runtimeプログラムはクラウドに存在し、 JSON はクラウド・サービスとの間でデータを受け渡しする標準的な方法です。 したがって、ユーザーがRuntimeプログラムを呼び出すときには、入力パラメーターをまず JSON 形式にシリアライズしてから、サーバーによって受信されたときにデシリアライズする必要があります。 デフォルトでは、このシリアライズおよびデシリアライズは、 `RuntimeEncoder <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.RuntimeEncoder.html#qiskit_ibm_runtime.RuntimeEncoder>`__ と `RuntimeDecoder <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.RuntimeDecoder.html#qiskit_ibm_runtime.RuntimeDecoder>`__ を使用して自動的に実行されます。"

#: ../../tutorials/05_uploading_program.ipynb:202
msgid "Custom classes"
msgstr "カスタム・クラス"

#: ../../tutorials/05_uploading_program.ipynb:213
msgid "``RuntimeEncoder`` and ``RuntimeDecoder`` only support types commonly used in Qiskit, such as complex numbers and numpy arrays. If your program uses custom Python classes for input or output, these two methods only have partial support for that."
msgstr "``RuntimeEncoder`` と ``RuntimeDecoder`` は、複素数やnumpy配列など、Qiskitで一般的に使用される型のみをサポートしています。 プログラムが入力または出力にカスタムPythonクラスを使用している場合、これらの2つのメソッドは部分的なサポートしかありません。"

#: ../../tutorials/05_uploading_program.ipynb:215
msgid "Your custom class should have the following methods:"
msgstr "カスタムクラスには以下のメソッドが必要です。"

#: ../../tutorials/05_uploading_program.ipynb:217
msgid "a ``to_json()`` method that returns a JSON string representation of the object"
msgstr "オブジェクトの JSON 文字列表現を戻す ``to_json()`` メソッド"

#: ../../tutorials/05_uploading_program.ipynb:218
msgid "a ``from_json()`` class method that accepts a JSON string and returns the corresponding object."
msgstr "JSON 文字列を受け取り、対応するオブジェクトを返す ``from_json()`` クラスメソッド"

#: ../../tutorials/05_uploading_program.ipynb:220
msgid "When ``RuntimeEncoder`` serializes a Python object, it checks whether the object has a ``to_json()`` method. If so, it calls the method to serialize the object. ``RuntimeDecoder``, however, does *not* invoke ``from_json()`` to convert the data back because it doesn’t know how to import your custom class. Therefore the deserialization needs to be done explicitly."
msgstr "``RuntimeEncoder`` が Python オブジェクトをシリアライズするとき、オブジェクトが ``to_json()`` メソッドを持っているかどうかをチェックします。もしそうなら、オブジェクトをシリアライズするためにそのメソッドを呼び出します。しかし、 ``RuntimeDecoder`` は、カスタムクラスをインポートする方法が分からないため、``from_json()`` を呼び出すことはありません。 したがって、デシリアライズは明示的に行う必要があります。"

#: ../../tutorials/05_uploading_program.ipynb:231
msgid "Here is an example of serializing and deserializing a custom class. First we define the class ``MyCustomClass``:"
msgstr "以下に、カスタム・クラスのシリアライズとデシリアライズの例を示します。 まず、クラス ``MyCustomClass`` を定義します。"

#: ../../tutorials/05_uploading_program.ipynb:267
msgid "Note that it has the ``to_json()`` method that converts a ``MyCustomClass`` instance to a JSON string, and a ``from_json()`` class method that converts a JSON string back to a ``MyCustomClass`` instance."
msgstr "``MyCustomClass``インスタンスをJSON文字列に変換する ``to_json()`` メソッドと、JSON文字列を ``MyCustomClass`` インスタンスに変換する ``from_json()`` クラスメソッドがあることに注意してください。"

#: ../../tutorials/05_uploading_program.ipynb:278
msgid "Here is how one would use ``MyCustomClass`` as an **input** to your program:"
msgstr "プログラムへの **入力** として ``MyCustomClass`` を使用する方法は次のとおりです。"

#: ../../tutorials/05_uploading_program.ipynb:310
msgid "Since ``MyCustomClass`` has a ``to_json()`` method, the method is automatically called to convert the instance to a JSON string when ``service.run()`` is invoked."
msgstr "``MyCustomClass`` には ``to_json()`` メソッドが含まれているため、 ``service.run()`` が呼び出されるときに、メソッドは自動的に呼び出され、インスタンスを JSON ストリングに変換します。"

#: ../../tutorials/05_uploading_program.ipynb:312
msgid "Your program can then use the ``from_json()`` method to restore the JSON string back to a ``MyCustomClass`` instance:"
msgstr "プログラムは ``from_json()`` メソッドを使用して、JSON 文字列を ``MyCustomClass`` インスタンスに戻すことができます。"

#: ../../tutorials/05_uploading_program.ipynb:336
msgid "Similarly, if you pass a ``MyCustomClass`` instance as an **output** of your program, it is automatically converted to a JSON string (via the ``to_json()`` method):"
msgstr "同様に、 ``MyCustomClass`` インスタンスをプログラムの **出力** として渡すと、自動的に JSON 文字列に変換されます ( ``to_json()`` メソッドを使用 )。"

#: ../../tutorials/05_uploading_program.ipynb:359
msgid "Now when the user of this program calls ``job.result()``, they will receive a JSON string rather than a ``MyCustomClass`` instance. The user can convert the string back to ``MyCustomClass`` themselves:"
msgstr "これで、このプログラムのユーザーは ``job.result()`` を呼び出すときに、 ``MyCustomClass`` インスタンスではなく JSON ストリングを受け取ります。 ユーザーは、このストリングを ``MyCustomClass`` 自体に戻すことができます。"

#: ../../tutorials/05_uploading_program.ipynb:384
msgid "Alternatively, you can provide a decoder for the users. Your decoder class should inherit `ResultDecoder <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.ResultDecoder.html#qiskit_ibm_runtime.ResultDecoder>`__ and overwrite the ``decode()`` method:"
msgstr "別の方法として、ユーザーのデコーダーを指定することもできます。 デコーダー・クラスは、 `ResultDecoder <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.ResultDecoder.html#qiskit_ibm_runtime.ResultDecoder>`__ を継承し、 ``decode()`` メソッドを上書きする必要があります。"

#: ../../tutorials/05_uploading_program.ipynb:412
msgid "Your user can then use this ``MyResultDecoder`` to decode the result of your program:"
msgstr "ユーザーはこの ``MyResultDecoder`` を使用してプログラムの結果をデコードできます。"

#: ../../tutorials/05_uploading_program.ipynb:428
msgid "Testing your runtime program"
msgstr "Runtime プログラムのテスト"

#: ../../tutorials/05_uploading_program.ipynb:439
msgid "You can test your runtime program using a local simulator or a real backend before uploading it. Simply import and invoke the ``main()`` function of your program and pass the following parameters:"
msgstr "Runtime プログラムをアップロードする前に、ローカル・シミュレーターまたは実バックエンドを使用してテストすることができます。 単に、プログラムの ``main()`` 関数をインポートし、起動して、以下のパラメーターを渡します。"

#: ../../tutorials/05_uploading_program.ipynb:441
msgid "the ``backend`` instance you want to use"
msgstr "使用したい ``backend`` インスタンス"

#: ../../tutorials/05_uploading_program.ipynb:442
msgid "a new ``UserMessenger`` instance."
msgstr "新しい ``UserMessenger`` インスタンス。"

#: ../../tutorials/05_uploading_program.ipynb:443
msgid "program input parameters that are serialized and then deserialized using the correct encoder and decoder. While this may seem redundant, it is to ensure input parameters can be passed to your program properly once it’s uploaded to the cloud."
msgstr "入力パラメーターをシリアライズし、正しいエンコーダーとデコーダーを使用してデシリアライズするプログラム。 これは冗長に見えるかもしれませんが、クラウドにアップロードされた後、入力パラメーターをプログラムに適切に渡すことができるようにするためのものです。"

#: ../../tutorials/05_uploading_program.ipynb:454
msgid "The following example tests the ``hello-world`` program we saw earlier. It uses the ``qasm_simulator`` from Qiskit Aer as the test backend. It serializes and deserializes input data using ``RuntimeEncoder`` and ``RuntimeDecoder``, which are the default en/decoders used by runtime."
msgstr "次の例では、前に見た``hello-world`` プログラムをテストします。 Qiskit Aerの ``qasm_simulator`` をテストバックエンドとして使用します。 Runtime で使用されるデフォルトの en/decoder である ``RuntimeEncoder`` と ``RuntimeDecoder`` を使用して入力データをシリアライズ・デシリアライズします。"

#: ../../tutorials/05_uploading_program.ipynb:547
msgid "Defining program metadata"
msgstr "プログラムメタデータの定義"

#: ../../tutorials/05_uploading_program.ipynb:558
msgid "Program metadata helps users to understand how to use your program. It includes:"
msgstr "プログラム・メタデータは、ユーザーがプログラムの使用方法を理解するのに役立ちます これには、"

#: ../../tutorials/05_uploading_program.ipynb:560
msgid "``name``: Name of the program."
msgstr "``name``: プログラムの名前。"

#: ../../tutorials/05_uploading_program.ipynb:561
msgid "``max_execution_time``: Maximum amount of time, in seconds, a program can run before being forcibly terminated."
msgstr "``max_execution_time``: プログラムが強制終了されるまでに実行できる最大時間（秒単位）。"

#: ../../tutorials/05_uploading_program.ipynb:562
msgid "``description``: Describes the program."
msgstr "``description``: プログラムの説明。"

#: ../../tutorials/05_uploading_program.ipynb:563
msgid "``spec``: Detailed information about the program, which includes the following attributes:"
msgstr "``spec``: プログラムに関する詳細情報。これには以下の属性が含まれます。"

#: ../../tutorials/05_uploading_program.ipynb:565
msgid "``backend_requirements``: Describes the backend attributes needed to run the program."
msgstr "``backend_requirements``: プログラムを実行するために必要なバックエンド属性の説明。"

#: ../../tutorials/05_uploading_program.ipynb:566
msgid "``parameters``: Describes the program input parameters as a JSON schema"
msgstr "``parameters``: プログラムの入力パラメーターを JSON スキーマとして記述。"

#: ../../tutorials/05_uploading_program.ipynb:567
msgid "``return_values``: Describes the return values as a JSON schema"
msgstr "``return_values``: 戻り値を JSON スキーマとして記述。"

#: ../../tutorials/05_uploading_program.ipynb:568
msgid "``interim_results``: Describes the interim results as a JSON schema"
msgstr "``interim_results``: 暫定結果を JSON スキーマとして記述。"

#: ../../tutorials/05_uploading_program.ipynb:570
msgid "When uploading a program, you must specify at least ``name``, ``max_execution_time``, and ``description``. It is strongly encouraged to also specify ``parameters``, ``return_values``, and ``interim_results`` within ``spec`` if the program has them."
msgstr "プログラムをアップロードするときは、少なくとも ``name`` 、 ``max_execution_time`` 、および ``description`` を指定する必要があります。 プログラムにある場合は、 ``spec`` 内で ``parameters`` 、 ``return_values`` 、および ``interim_results`` も指定することを強くお勧めします。"

#: ../../tutorials/05_uploading_program.ipynb:581
msgid "Below shows the metadata JSON file of the ``hello-world`` program as an example:"
msgstr "以下に、 ``hello-world`` プログラムのメタデータ JSON ファイルを例として示します。"

#: ../../tutorials/05_uploading_program.ipynb:759
msgid "Uploading a program"
msgstr "プログラムのアップロード"

#: ../../tutorials/05_uploading_program.ipynb:770
msgid "You can use the `QiskitRuntimeService.upload_program() <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.html#qiskit_ibm_runtime.QiskitRuntimeService.upload_program>`__ method to upload your program. In the example below, the program data lives in the file ``hello_world.py``, and its metadata, as described above, is in ``hello_world.json``."
msgstr "`QiskitRuntimeService.upload_program() <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.html#qiskit_ibm_runtime.QiskitRuntimeService.upload_program>`__ メソッドを使用して、プログラムをアップロードすることができます。 以下の例では、プログラムのデータはファイル ``hello_world.py`` にあり、そのメタデータは ``hello_world.json`` に示されています。"

#: ../../tutorials/05_uploading_program.ipynb:828
msgid "``upload_program()`` returns a program ID, which uniquely identifies the program. It is derived from the program name, usually with a randomly-generated suffix. Program ID is needed to invoke the program."
msgstr "``upload_program()`` は、プログラムを一意的に識別するプログラム ID を戻します。 これはプログラム名から派生し、通常はランダムに生成された接尾部が付けられます。 プログラムを呼び出すにはプログラム ID が必要です。"

#: ../../tutorials/05_uploading_program.ipynb:840
msgid "Updating a program"
msgstr "プログラムの更新"

#: ../../tutorials/05_uploading_program.ipynb:851
msgid "You can use the `QiskitRuntimeService.update_program() <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.update_program.html#qiskit_ibm_runtime.QiskitRuntimeService.update_program>`__ method to update the source code and/or metadata of a program:"
msgstr "`QiskitRuntimeService.update_program() <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.update_program.html#qiskit_ibm_runtime.QiskitRuntimeService.update_program>`__ メソッドを使用して、プログラムのソース・コードまたはメタデータ ( あるいはその両方 ) を更新することができます。"

#: ../../tutorials/05_uploading_program.ipynb:872
msgid "This method allows you to make changes to your program while retaining the same program ID."
msgstr "この方法を使用すると、同じプログラム IDを保持しながら、プログラムに変更を加えることができます。"

#: ../../tutorials/05_uploading_program.ipynb:884
msgid "Deleting a program"
msgstr "プログラムの削除"

#: ../../tutorials/05_uploading_program.ipynb:895
msgid "You can use the `QiskitRuntimeService.delete_program() <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.html#qiskit_ibm_runtime.QiskitRuntimeService.delete_program>`__ method to delete a program. Only the person who uploaded the program can delete it."
msgstr "プログラムを削除するには、 `QiskitRuntimeService.delete_program() <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.html#qiskit_ibm_runtime.QiskitRuntimeService.delete_program>`__ メソッドを使用できます。 削除できるのは、そのプログラムをアップロードしたユーザーのみです。"

#: ../../tutorials/05_uploading_program.ipynb:917
msgid "Additional materials"
msgstr "追加資料"

#: ../../tutorials/05_uploading_program.ipynb:928
msgid "This is an introductory tutorial on creating and uploading a very simple custom program. `sample_vqe_program/qiskit_runtime_vqe_program.ipynb <sample_vqe_program/qiskit_runtime_vqe_program.ipynb>`__ provides a more in-depth tutorial on creating a real-world Qiskit Runtime program."
msgstr "これは、非常に単純なカスタム・プログラムを作成し、アップロードするための入門チュートリアルです。 `sample_vqe_program/qiskit_runtime_vqe_program.ipynb <sample_vqe_program/qiskit_runtime_vqe_program.ipynb>`__ を使用すると、実世界の Qiskit Runtime プログラムの作成に関するより詳細なチュートリアルが提供されます。"

