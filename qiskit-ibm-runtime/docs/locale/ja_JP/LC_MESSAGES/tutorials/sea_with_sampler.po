msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-10 17:48+0000\n"
"PO-Revision-Date: 2022-11-29 01:28\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/sea_with_sampler.po\n"
"X-Crowdin-File-ID: 9828\n"
"Language: ja_JP\n"

#: ../../tutorials/sea_with_sampler.ipynb:9
msgid "This page was generated from `docs/tutorials/sea_with_sampler.ipynb`__."
msgstr "このページは `docs/tutorials/sea_with_sampler.ipynb`__ から生成されました。"

#: ../../tutorials/sea_with_sampler.ipynb:9
msgid "Spectroscopic Eigensolver Algorithm with Sampler"
msgstr "Samplerを用いた分光固有値ソルバーアルゴリズム"

#: ../../tutorials/sea_with_sampler.ipynb:11
msgid "This tutorial demonstrates the ability to send flexible circuits to the ``Sampler`` primitive by performing a simple example of the spectroscopic eigensolver algorithm (`arXiv:2202.12910 <http://arxiv.org/abs/2202.12910>`__). The SEA is used for quantum simulation of model Hamiltonians, and works by interacting a “probe” auxiliary qubit with a simulation register. The energy of the probe qubit is sweeped and eigenvalues of the simulation Hamiltonian are observed as peaks or dips in the response, akin to the experimental tool of spectroscopy. Because each point (i.e., energy) is a different quantum circuit, this technique is expensive with respect to the number of circuits required. The ``Sampler`` provides the flexibility to send just a single circuit with the needed ``Parameter``\\ s passed."
msgstr "このチュートリアルでは、分光学的固有値ソルバーアルゴリズム（ SEA, `arXiv:2202.12910 <http://arxiv.org/abs/2202.12910>`__ ）の簡単な例を実行して、柔軟な回路を ``Sampler`` primitive に送信する機能を示します。 SEAは、モデルハミルトニアンの量子シミュレーションに使用され、「プローブ」補助量子ビットをシミュレーションレジスターと相互作用させることによって機能します。 プローブ量子ビットのエネルギーが掃引され、シミュレーションハミルトニアンの固有値が、分光法の実験ツールと同様に、応答のピークまたはディップとして観察されます。 各点（つまりエネルギー）は異なる量子回路であるため、この手法は必要な回路の数に関して高価です。 ``Sampler`` は、必要な ``Parameter`` を渡して1つの回路だけを送信する柔軟性を備えています。"

#: ../../tutorials/sea_with_sampler.ipynb:24
msgid "Set up your local development environment"
msgstr "ローカル開発環境のセットアップ"

#: ../../tutorials/sea_with_sampler.ipynb:26
msgid "This tutorial requires a Qiskit Runtime service instance. If you haven’t done so already, follow `these steps <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ to set one up."
msgstr "このチュートリアルでは、Qiskit Runtime Service インスタンスが必要です。まだ実行していない場合は、`これらの手順 <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ に従ってセットアップします。"

#: ../../tutorials/sea_with_sampler.ipynb:51
msgid "Simple Hamiltonian Model"
msgstr "シンプルなハミルトニアン・モデル"

#: ../../tutorials/sea_with_sampler.ipynb:53
msgid "Let’s consider a Pauli-X matrix acting on a qubit,"
msgstr "量子ビット上で動作する パウリX行列を考えてみましょう。"

#: ../../tutorials/sea_with_sampler.ipynb:55
msgid "H_{\\rm Pauli}/\\hbar = \\mu X"
msgstr "H_{\\rm Pauli}/\\hbar = \\mu X"

#: ../../tutorials/sea_with_sampler.ipynb:60
msgid "where we can set :math:`\\mu` later, or even sweep its values as well. The SEA works by taking the model Pauli (i.e., qubit) Hamiltonian and building a larger “resonance” Hamiltonian that includes both the simulation register and probe qubit ``q0`` via"
msgstr "後に :math:`\\mu` を設定することもできますし、その値もスイープすることもできます。 SEA は、モデルパウリ ( つまり、量子ビット) ハミルトニアンを使って、シミュレーション・レジスターと以下の式のプローブ量子ビット ``q0`` の両方を含む、より大きな \"共鳴\" ハミルトニアンを構築することによって動作します。"

#: ../../tutorials/sea_with_sampler.ipynb:62
msgid "H_{\\rm res} / \\hbar = -\\frac{1}{2} \\omega IZ + c XX + H_{\\rm Pauli}/\\hbar \\otimes I"
msgstr "H_{\\rm res} / \\hbar = -\\frac{1}{2} \\omega IZ + c XX + H_{\\rm Pauli}/\\hbar \\otimes I"

#: ../../tutorials/sea_with_sampler.ipynb:67
msgid "where the angular frequency :math:`\\omega` corresponds to the energy of the probe qubit, and :math:`c` is the coupling between the probe qubit and a qubit in the simulation register (``q1`` in this case). The letters :math:`I`, :math:`X`, and :math:`Z` correspond to the Pauli spin matrices and their order reflect which qubit they operate on (note that this notation is little-endian). We will set :math:`\\hbar \\equiv 1` in the following code."
msgstr "ここで、角周波数 :math:`\\omega` は、プローブ量子ビットのエネルギーに対応し、 :math:`c` は、プローブ・量子ビットと、シミュレーション・レジスター ( この場合は ``q1`` ) 内の量子ビット間の結合です。 :math:`I`, :math:`X`, および :math:`Z` はパウリのスピン行列に対応し、それらの順序は動作する量子ビットを反映しています ( この表記はリトル・エンディアンです ) 。以下のコードでは、 :math:`\\hbar \\equiv 1` に設定します。"

#: ../../tutorials/sea_with_sampler.ipynb:69
msgid "We can construct the SEA circuits with tools from Qiskit Opflow."
msgstr "Qiskit Opflowのツールを使用して SEA 回路を構成することができます。"

#: ../../tutorials/sea_with_sampler.ipynb:107
msgid "Time evolve the resonance Hamiltonian."
msgstr "共鳴ハミルトニアンを時間発展させます。"

#: ../../tutorials/sea_with_sampler.ipynb:129
msgid "From the time-evolution operator :math:`U_{\\rm ham}`, we use the Suzuki-Trotter expansion to convert this operator into quantum circuits that implement discrete time steps of the simulation. The smaller the time steps (more Trotter steps), the more accurate the quantum circuit, but also longer depth, which could introduce errors when executing on noisy quantum hardware. We then transpile the circuits to IBM backend basis gates and measure only the probe qubit ``q0``."
msgstr "時間発展演算子 :math:`U_{\\rm ham}` から、スズキ - トロッター展開を用いて、シミュレーションの離散時間ステップを実装した量子回路に変換します。 時間が短くなるほど(トロッターステップが多いほど)、量子回路をより正確にすることができますが、深さが長くなり、ノイズの多い量子ハードウェア上での実行時にエラーが発生する可能性があります。 次に、この回路を IBM バックエンドの基底ゲートに transpile (変換)し、プローブ・量子ビット ``q0`` のみを測定します。"

#: ../../tutorials/sea_with_sampler.ipynb:207
msgid "Now let’s fix our parameters and sweep over frequency with a number of points ``num_pts``. The eigenvalues of our model Hamiltonian :math:`H_{\\rm Pauli}` are :math:`\\pm \\mu`, so we need to choose a range that includes those numbers."
msgstr "ここで、パラメーターを修正し、複数のポイント ``num_pts`` を使用して頻度をスイープするようにします。 モデルのハミルトニアン :math:`H_{\\rm Pauli}` の固有値は :math:`\\pm \\mu` であるため、これらの数値を含む範囲を選択する必要があります。"

#: ../../tutorials/sea_with_sampler.ipynb:209
msgid "Note that the ``Parameter``\\ s’ keys and values must be separared and converted into a ``List`` of ``List``\\ s. The keys give us the ``Parameter``\\ s inside each circuit. In this case, we only have a single circuit, so the ``List`` of keys contains a single ``List``. For the ``Parameter`` values, there is a ``List`` for each value of ``ww``."
msgstr "``Parameter`` キーと値は分離して、``List`` 内の ``List`` に変換する必要があることに注意してください。 キーは、各回路内の ``Parameter`` を示します。 この場合、回路は1つしかないため、キーの ``List`` 内には1つの ``List`` が含まれます。 ``Parameter`` 値については、``ww`` の値ごとに ``List`` があります。"

#: ../../tutorials/sea_with_sampler.ipynb:245
msgid "When calling the ``sampler``, we specify a list of ``circuits`` pointing to the circuits desired to be run and the parameter values for each circuit."
msgstr "``sampler`` を呼び出す際には、実行したい回路を指す ``circuits`` のリストと、各回路のパラメーター値を指定します。"

#: ../../tutorials/sea_with_sampler.ipynb:274
msgid "Build the :math:`Z` expectations by converting quasi-probabilities to :math:`\\langle Z \\rangle`."
msgstr "準確率を :math:`\\langle Z \\rangle` に変換することにより、 :math:`Z` の期待値を構築します。"

#: ../../tutorials/sea_with_sampler.ipynb:300
msgid "As a sanity check, we’ll calculate the exact expectation values with Qiskit Opflow."
msgstr "健全性チェックとして、Qiskit Opflowで正確な期待値を計算します。"

#: ../../tutorials/sea_with_sampler.ipynb:337
msgid "And plotting everything together shows that the energy at which our peaks occurs to be :math:`\\pm \\mu`."
msgstr "そして、すべてをプロットすることにより、ピーク時のエネルギーが :math:`\\pm \\mu` になることが示されます。"

