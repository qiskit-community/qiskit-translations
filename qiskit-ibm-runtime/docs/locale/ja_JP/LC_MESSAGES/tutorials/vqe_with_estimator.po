msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-17 16:43+0000\n"
"PO-Revision-Date: 2023-11-17 16:50\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /main/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/vqe_with_estimator.po\n"
"X-Crowdin-File-ID: 9834\n"

#: ../../tutorials/vqe_with_estimator.ipynb:9
msgid "This page was generated from `docs/tutorials/vqe_with_estimator.ipynb`__."
msgstr "このページは `docs/tutorials/vqe_with_estimator.ipynb`__ から生成されました。"

#: ../../tutorials/vqe_with_estimator.ipynb:9
msgid "Variational Quantum Eigensolver"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:21
msgid "Background"
msgstr "背景"

#: ../../tutorials/vqe_with_estimator.ipynb:23
msgid "`Variational quantum algorithms <https://arxiv.org/abs/2012.09265>`__ are promising candidate hybrid-algorithms for observing the utility of quantum computation on noisy near-term devices. Variational algorithms are characterized by the use of a classical optimization algorithm to iteratively update a parameterized trial solution, or \"ansatz\". Chief among these methods is the Variational Quantum Eigensolver (VQE) that aims to solve for the ground state of a given Hamiltonian represented as a linear combination of Pauli terms, with an ansatz circuit where the number of parameters to optimize over is polynomial in the number of qubits. Given that size of the full solution vector is exponential in the number of qubits, successful minimization using VQE requires, in general, additional problem specific information to define the structure of the ansatz circuit."
msgstr "`変分量子アルゴリズム <https://arxiv.org/abs/2012.09265>`__ は、ノイズの多い近い将来のデバイス上での量子計算の有用性を観測するための有望なハイブリッドアルゴリズムの候補です。変分アルゴリズムは、パラメーター化されたトライアル解（ansatz）を繰り返し更新するために、古典的な最適化アルゴリズムを使用することが特徴です。これらの手法の中で最も重要なものは、変分量子固有値ソルバー（VQE）であり、パウリ項の線形結合として表されるハミルトニアンの基底状態を、最適化するパラメーターの数が量子ビット数の多項式となる ansatz 回路を用いて解くことを目的としています。完全な解のベクトルのサイズが量子ビット数に対して指数関数的であることを考えると、VQEを用いて最小化を成功させるには、一般的に、ansatz 回路の構造を定義するために、問題固有の情報を追加する必要があります。"

#: ../../tutorials/vqe_with_estimator.ipynb:26
msgid "Executing a VQE algorithm requires the following 3 components:"
msgstr "VQE アルゴリズムを実行するには、以下の 3 つのコンポーネントが必要です："

#: ../../tutorials/vqe_with_estimator.ipynb:28
msgid "Hamiltonian and ansatz (problem specification)"
msgstr "ハミルトニアンと ansatz (問題の仕様)"

#: ../../tutorials/vqe_with_estimator.ipynb:29
msgid "Qiskit Runtime estimator"
msgstr "Qiskit Runtime estimator"

#: ../../tutorials/vqe_with_estimator.ipynb:30
msgid "Classical optimizer"
msgstr "古典オプティマイザー"

#: ../../tutorials/vqe_with_estimator.ipynb:32
msgid "Although the Hamiltonian and ansatz require domain specific knowledge to construct, these details are immaterial to the Runtime, and we can execute a wide class of VQE problems in the same manner."
msgstr "ハミルトニアンとansatzを構築するには領域固有の知識が必要ですが、これらの詳細は Runtime にとって重要ではなく、同じ方法で幅広いクラスのVQE問題を実行することができます。"

#: ../../tutorials/vqe_with_estimator.ipynb:44
msgid "Setup"
msgstr "設定"

#: ../../tutorials/vqe_with_estimator.ipynb:46
msgid "Here we import the tools needed for a VQE experiment. The primary imports can be grouped logically into three components that correspond to the three required elements."
msgstr "ここでは、VQEの実験に必要なツールをインポートします。主要なインポートは、必要な3つの要素に対応する3つのコンポーネントに論理的にグループ化することができます。"

#: ../../tutorials/vqe_with_estimator.ipynb:120
msgid "Map the problem to a quantum-native format"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:122
msgid "Here we define the problem instance for our VQE algorithm. Although the problem in question can come from a variety of domains, the form for execution through Qiskit Runtime is the same. Qiskit provides a convenience class for expressing Hamiltonians in Pauli form, and a collection of widely used ansatz circuits in the ```qiskit.circuit.library`` <https://docs.quantum-computing.ibm.com/api/qiskit/circuit_library>`__."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:124
msgid "Here, our example Hamiltonian is derived from a quantum chemistry problem"
msgstr "ここでは、量子化学の問題からハミルトニアンを導出します。"

#: ../../tutorials/vqe_with_estimator.ipynb:147
msgid "Our choice of ansatz is the ``EfficientSU2`` that, by default, linearly entangles qubits, making it ideal for quantum hardware with limited connectivity."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:178
msgid "From the previous figure we see that our ansatz circuit is defined by a vector of parameters, :math:`\\theta_{i}`, with the total number given by:"
msgstr "上の図から、ansatz 回路はパラメーターのベクトル、:math:`\\theta_{i}` で定義され、その総数は次式で与えられます："

#: ../../tutorials/vqe_with_estimator.ipynb:226
msgid "Optimize the circuits and operators"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:228
msgid "We can schedule a series of ```qiskit.transpiler`` <https://docs.quantum-computing.ibm.com/api/qiskit/transpiler>`__ passes to optimize our circuit for a selected backend. This includes a few components:"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:230
msgid "```optimization_level`` <https://docs.quantum-computing.ibm.com/api/qiskit/transpiler_preset#preset-pass-manager-generation>`__: The lowest optimization level just does the bare minimum needed to get the circuit running on the device; it maps the circuit qubits to the device qubits and adds swap gates to allow all 2-qubit operations. The highest optimization level is much smarter and uses lots of tricks to reduce the overall gate count. Since multi-qubit gates have high error rates and qubits decohere over time, the shorter circuits should give better results."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:232
msgid "`Dynamical Decoupling <https://docs.quantum-computing.ibm.com/api/qiskit-ibm-runtime/qiskit_ibm_provider.transpiler.passes.scheduling.PadDynamicalDecoupling>`__: We can apply a sequence of gates to idling qubits. This cancels out some unwanted interactions with the environment."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:292
msgid "We can also use ``apply_layout`` to transform our virtual observable to physical"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:343
msgid "Execute using a quantum primitive function"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:345
msgid "Like many classical optimization problems, the solution to a VQE problem can be formulated as minimization of a scalar cost function. By definition, VQE looks to find the ground state solution to a Hamiltonian by optimizing the ansatz circuit parameters to minimize the expectation value (energy) of the Hamiltonian. With the Qiskit Runtime ```Estimator`` <https://docs.quantum-computing.ibm.com/api/qiskit-ibm-runtime/qiskit_ibm_runtime.Estimator>`__ directly taking a Hamiltonian and parameterized ansatz, and returning the necessary energy, the cost function for a VQE instance is quite simple:"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:380
msgid "Note that, in addition to the array of optimization parameters that must be the first argument, we use additional arguments to pass the terms needed in the cost function."
msgstr "最初の引数でなければならない最適化パラメーターの配列に加えて、コスト関数に必要な項を渡すために追加の引数を使用することに注意してください。"

#: ../../tutorials/vqe_with_estimator.ipynb:392
msgid "Creating a callback function"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:394
msgid "Callback functions are a standard way for users to obtain additional information about the status of an iterative algorithm. The standard SciPy callback routine allows for returning only the interim vector at each iteration. However, it is possible to do much more than this. Here, we show how to use a mutable object, such as a dictionary, to store the current vector at each iteration, for example in case we need to restart the routine due to failure, and also return the current iteration number and average time per iteration."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:472
msgid "We can now use a classical optimizer of our choice to minimize the cost function. Here, we use the `COBYLA routine from SciPy through the ``minimize`` function <https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html>`__. Note that when running on real quantum hardware, the choice of optimizer is important, as not all optimizers handle noisy cost function landscapes equally well."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:474
msgid "To begin the routine, we specify a random initial set of parameters:"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:495
msgid "Because we are sending a large number of jobs that we would like to execute together, we use a ```Session`` <https://docs.quantum-computing.ibm.com/api/qiskit-ibm-runtime/qiskit_ibm_runtime.Session>`__ to execute all the generated circuits in one block. Here ``args`` is the standard SciPy way to supply the additional parameters needed by the cost function."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:557
msgid "At the terminus of this routine we have a result in the standard SciPy ``OptimizeResult`` format. From this we see that it took ``nfev`` number of cost function evaluations to obtain the solution vector of parameter angles (``x``) that, when plugged into the ansatz circuit, yield the approximate ground state solution we were looking for."
msgstr "このルーチンの最後で、標準的なSciPyの ``OptimizeResult`` フォーマットの結果が得られます。この結果から、角度パラメーター (``x``) の解ベクトルを得るために、 ``nfev`` 回のコスト関数の評価が必要であり、それを ansatz 回路に差し込むと、求めていた基底状態の近似解が得られることがわかります。"

#: ../../tutorials/vqe_with_estimator.ipynb:622
msgid "Analyze the results"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:633
msgid "If the procedure terminates correctly, then the ``prev_vector`` and ``iters`` values in our ``callback_dict`` dictionary should be equal to the solution vector and total number of function evaluations, respectively. This is easy to verify:"
msgstr "このプロシージャーが正しく終了すれば、 ``callback_dict`` 辞書内の ``prev_vector`` と ``iters`` の値は、それぞれ解ベクトルと関数評価の総数に等しくなるはずです。これは簡単に確認でます："

#: ../../tutorials/vqe_with_estimator.ipynb:714
msgid "We can also now view the progress towards convergence as monitored by the cost history at each iteration:"
msgstr "また、各反復におけるコスト履歴によってモニターされる収束への進捗状況を見ることもできるようになりました："

