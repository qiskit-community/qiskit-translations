msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-24 21:41+0000\n"
"PO-Revision-Date: 2023-10-24 21:56\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /main/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/grover_with_sampler.po\n"
"X-Crowdin-File-ID: 9816\n"

#: ../../tutorials/grover_with_sampler.ipynb:9
msgid "This page was generated from `docs/tutorials/grover_with_sampler.ipynb`__."
msgstr "このページは `docs/tutorials/grover_with_sampler.ipynb`__ から生成されました。"

#: ../../tutorials/grover_with_sampler.ipynb:9
msgid "Grover's algorithm using the Sampler primitive"
msgstr "Sampler primitive を使用したグローバーのアルゴリズム"

#: ../../tutorials/grover_with_sampler.ipynb:21
msgid "Background"
msgstr "背景"

#: ../../tutorials/grover_with_sampler.ipynb:23
msgid "Amplitude amplification is a general purpose quantum algorithm, or subroutine, that can be used to obtain a quadratic speedup over a handful of classical algorithms. `Grover’s algorithm <https://arxiv.org/abs/quant-ph/9605043>`__ was the first to demonstrate this speedup on unstructured search problems. Formulating a Grover's search problem requires an oracle function that marks one or more computational basis states as the states we are interested in finding, and an amplification circuit that increases the amplitude of marked states, consequently suppressing the remaining states."
msgstr "振幅増幅は汎用の量子アルゴリズム（サブルーチン）であり、これを使用することで、一握りの古典的アルゴリズムを2次関数的に高速化することができます。 `グローバーのアルゴリズム <https://arxiv.org/abs/quant-ph/9605043>`__ は、構造化されていない探索問題でこの高速化を初めて実証しました。グローバーの探索問題を定式化するためには、1つ以上の計算基底状態を探索したい状態としてマークするオラクル関数と、マークされた状態の振幅を増大させ、そのほかの状態を抑制する増幅回路が必要です。"

#: ../../tutorials/grover_with_sampler.ipynb:26
msgid "Here we demonstrate how to construct Grover oracles and make use of the ``GroverOperator`` from the Qiskit circuit library to easily setup a Grover's search instance. The runtime ``Sampler`` primitive allows for seamless execution of Grover circuits, including automatic compilation, error suppression, and readout error mitigation techniques."
msgstr "ここでは、グローバーオラクルの構築方法を示し、Qiskit circuit ライブラリーの ``GroverOperator`` を利用して、グローバーの探索インスタンスを簡単にセットアップします。Runtime の ``Sampler`` primitive は、自動コンパイル、エラー抑制、読み出しエラー緩和技術を含むグローバー回路のシームレスな実行を可能にします。"

#: ../../tutorials/grover_with_sampler.ipynb:38
msgid "Setup"
msgstr "設定"

#: ../../tutorials/grover_with_sampler.ipynb:40
msgid "Here we import the small number of tools we need for this tutorial."
msgstr "ここで、このチュートリアルに必要な少数のツールをインポートします。"

#: ../../tutorials/grover_with_sampler.ipynb:71
msgid "Initialize Runtime service and select backends"
msgstr "Runtime サービスを初期化してバックエンドを選択する"

#: ../../tutorials/grover_with_sampler.ipynb:73
msgid "Here we instantiate the Runtime service that gives access to the quantum devices and the simulator that we use in this tutorial. We will first use a simulator to validate our circuit, then execute it on a real quantum system."
msgstr "ここでは、このチュートリアルで使用する量子デバイスとシミュレーターにアクセスするための Runtime service をインスタンス化します。まずシミュレーターを使って回路を検証し、次に実際の量子システムで回路を実行します。"

#: ../../tutorials/grover_with_sampler.ipynb:106
msgid "Define a Grover experiment"
msgstr "グローバー実験の定義"

#: ../../tutorials/grover_with_sampler.ipynb:108
msgid "Grover's algorithm requires an `oracle <https://quantum-computing.ibm.com/admin/docs/admin/guide/grovers-algorithm#the-oracle>`__ that specifies one or more marked computational basis states, where \"marked\" means a state with a phase of -1. A controlled-Z gate, or its multi-controlled generalization over :math:`N` qubits, marks the :math:`2^{N}-1` state (``'1'``\\ \\*\\ :math:`N` bit-string). Marking basis states with one or more ``'0'`` in the binary representation requires applying X-gates on the corresponding qubits before and after the controlled-Z gate; equivalent to having an open-control on that qubit. In the following code, we define an oracle that does just that, marking one or more input basis states defined through their bit-string representation. The ``MCMT`` gate is used to implement the multi-controlled Z-gate."
msgstr "Groverのアルゴリズムは、1つ以上のマークされた計算基底状態を指定する `oracle <https://quantum-computing.ibm.com/admin/docs/admin/guide/grovers-algorithm#the-oracle>`__ を必要とします。ここで、 \"マークされた\" とは位相が -1の状態を意味します。制御Zゲート、または :math:`N` 量子ビットへの複数制御の一般化は、 :math:`2^{N}-1` 状態 (``'1'``\\ \\*\\ :math:`N` ビット文字列) をマークします。2進表現で基底状態を1つ以上の ``'0'`` でマークするには、対応する量子ビットにXゲートを適用した後、制御Zゲートを適用する必要があります。これは、その量子ビットに対してオープン制御を持つことと同等です。以下のコードでは、それを行うオラクルを定義し、ビット列表現で定義された1つ以上の入力基底状態をマークします。``MCMT`` ゲートはマルチ制御Zゲートの実装に使用されます。"

#: ../../tutorials/grover_with_sampler.ipynb:159
msgid "Specific Grover's instance"
msgstr "特定のグローバー・インスタンス"

#: ../../tutorials/grover_with_sampler.ipynb:161
msgid "Now that we have the oracle function, we can define a specific instance of Grover search. In this example we will mark two computational states out of the eight available in a three-qubit computational space:"
msgstr "オラクル関数ができたので、グローバー探索の特定のインスタンスを定義することができます。この例では、3量子ビットの計算空間で利用可能な8つの計算基底のうち、2つの計算状態をマークします："

#: ../../tutorials/grover_with_sampler.ipynb:195
msgid "The ``GroverOperator``"
msgstr "``GroverOperator``"

#: ../../tutorials/grover_with_sampler.ipynb:197
msgid "The built-in Qiskit ``GroverOperator`` takes an oracle circuit and returns a circuit that is composed of the oracle circuit itself and a circuit that amplifies the states marked by the oracle. Here, we ``decompose`` the circuit to see the gates within the operator:"
msgstr "Qiskit組み込みの ``GroverOperator`` はオラクル回路を受け取り、オラクル回路そのものと、オラクルがマークした状態を増幅する回路からなる回路を返します。ここでは、演算子内のゲートを見るために回路を ``decompose`` しています："

#: ../../tutorials/grover_with_sampler.ipynb:228
msgid "Repeated applications of this ``grover_op`` circuit amplify the marked states, making them the most probable bit-strings in the output distribution from the circuit. There is an optimal number of such applications that is determined by the ratio of marked states to total number of possible computational states:"
msgstr "この ``grover_op`` 回路を繰り返し適用することで、マークされた状態が増幅され、この回路からの出力分布において最も高い確率をもつビット列になります。このようなアプリケーションの最適な繰り返し数は、可能な計算状態の総数とマークされた状態の比率によって決まります："

#: ../../tutorials/grover_with_sampler.ipynb:252
msgid "Full Grover circuit"
msgstr "完全なグローバー回路"

#: ../../tutorials/grover_with_sampler.ipynb:254
msgid "A complete Grover experiment starts with a Hadamard gate on each qubit; creating an even superposition of all computational basis states, followed the Grover operator (``grover_op``) repeated the optimal number of times. Here we make use of the ``QuantumCircuit.power(INT)`` method to repeatedly apply the Grover operator."
msgstr "完全なグローバー実験は、各量子ビットへのアダマールゲートから始まり、つまり全ての計算基底状態の等しい重ね合わせを作った後、グローバー演算子 (``grover_op``) を最適な回数繰り返します。ここでは、``QuantumCircuit.power(INT)`` メソッドを使用して、グローバー演算子を繰り返し適用します。"

#: ../../tutorials/grover_with_sampler.ipynb:292
msgid "Execution with the Sampler primitive"
msgstr "Sampler primitive による実行"

#: ../../tutorials/grover_with_sampler.ipynb:294
msgid "Amplitude amplification is a sampling problem that is suitable for execution with the ``Sampler`` runtime primitive. Because we have a single circuit, we instantiate a ``Sampler`` using the target backend. To begin, this is the simulator:"
msgstr "振幅増幅は ``Sampler`` runtime primitive で実行するのに適したサンプリング問題です。回路は1つなので、ターゲットバックエンドを使用して ``Sampler`` をインスタンス化します。まず、シミュレーターの場合です："

#: ../../tutorials/grover_with_sampler.ipynb:315
msgid "Now we execute the circuit by using ``sim_sampler.run``. The result is obtained in the returned quasi-probability distribution:"
msgstr "ここで、 ``sim_sampler.run`` を用いて回路を実行します。結果は準確率分布として返されます："

#: ../../tutorials/grover_with_sampler.ipynb:336
msgid "To see that the marked states are visible in the returned distribution, we convert the returned quasi-probability distribution from integer to bit-string representation to compare to the list of ``marked_states``."
msgstr "返された分布の中にマークされた状態が見えることを確認するために、返された準確率分布を整数からビット列表現に変換し、 ``marked_states`` のリストと比較します。"

#: ../../tutorials/grover_with_sampler.ipynb:371
msgid "Having verified that our code does indeed produce the desired outcome, we now execute it on a real device, creating an ``Sampler`` instance targeting that system:"
msgstr "私たちのコードが本当に望ましい結果を生み出すことを確認した後、今度はそれを実際のデバイス上で実行し、そのシステムをターゲットとする ``Sampler`` インスタンスを作成します："

