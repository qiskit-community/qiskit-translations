msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-17 16:43+0000\n"
"PO-Revision-Date: 2023-11-17 16:50\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /main/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/grover_with_sampler.po\n"
"X-Crowdin-File-ID: 9816\n"

#: ../../tutorials/grover_with_sampler.ipynb:9
msgid "This page was generated from `docs/tutorials/grover_with_sampler.ipynb`__."
msgstr "このページは `docs/tutorials/grover_with_sampler.ipynb`__ から生成されました。"

#: ../../tutorials/grover_with_sampler.ipynb:9
msgid "Grover's algorithm"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:21
msgid "Background"
msgstr "背景"

#: ../../tutorials/grover_with_sampler.ipynb:23
msgid "Amplitude amplification is a general purpose quantum algorithm, or subroutine, that can be used to obtain a quadratic speedup over a handful of classical algorithms. `Grover’s algorithm <https://arxiv.org/abs/quant-ph/9605043>`__ was the first to demonstrate this speedup on unstructured search problems. Formulating a Grover's search problem requires an oracle function that marks one or more computational basis states as the states we are interested in finding, and an amplification circuit that increases the amplitude of marked states, consequently suppressing the remaining states."
msgstr "振幅増幅は汎用の量子アルゴリズム（サブルーチン）であり、これを使用することで、一握りの古典的アルゴリズムを2次関数的に高速化することができます。 `グローバーのアルゴリズム <https://arxiv.org/abs/quant-ph/9605043>`__ は、構造化されていない探索問題でこの高速化を初めて実証しました。グローバーの探索問題を定式化するためには、1つ以上の計算基底状態を探索したい状態としてマークするオラクル関数と、マークされた状態の振幅を増大させ、そのほかの状態を抑制する増幅回路が必要です。"

#: ../../tutorials/grover_with_sampler.ipynb:26
msgid "Here, we demonstrate how to construct Grover oracles and use the ``GroverOperator`` from the Qiskit circuit library to easily set up a Grover's search instance. The runtime ``Sampler`` primitive allows seamless execution of Grover circuits, including automatic compilation, error suppression, and readout error mitigation techniques."
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:38
msgid "Setup"
msgstr "設定"

#: ../../tutorials/grover_with_sampler.ipynb:40
msgid "Here we import the small number of tools we need for this tutorial."
msgstr "ここで、このチュートリアルに必要な少数のツールをインポートします。"

#: ../../tutorials/grover_with_sampler.ipynb:109
msgid "Map the problem to a quantum-native format"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:111
msgid "Grover's algorithm requires an `oracle <https://learning.quantum-computing.ibm.com/course/fundamentals-of-quantum-algorithms/grovers-algorithm>`__ that specifies one or more marked computational basis states, where \"marked\" means a state with a phase of -1. A controlled-Z gate, or its multi-controlled generalization over :math:`N` qubits, marks the :math:`2^{N}-1` state (``'1'``\\ \\*\\ :math:`N` bit-string). Marking basis states with one or more ``'0'`` in the binary representation requires applying X-gates on the corresponding qubits before and after the controlled-Z gate; equivalent to having an open-control on that qubit. In the following code, we define an oracle that does just that, marking one or more input basis states defined through their bit-string representation. The ``MCMT`` gate is used to implement the multi-controlled Z-gate."
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:162
msgid "Specific Grover's instance"
msgstr "特定のグローバー・インスタンス"

#: ../../tutorials/grover_with_sampler.ipynb:164
msgid "Now that we have the oracle function, we can define a specific instance of Grover search. In this example we will mark two computational states out of the eight available in a three-qubit computational space:"
msgstr "オラクル関数ができたので、グローバー探索の特定のインスタンスを定義することができます。この例では、3量子ビットの計算空間で利用可能な8つの計算基底のうち、2つの計算状態をマークします："

#: ../../tutorials/grover_with_sampler.ipynb:198
msgid "GroverOperator"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:200
msgid "The built-in Qiskit ``GroverOperator`` takes an oracle circuit and returns a circuit that is composed of the oracle circuit itself and a circuit that amplifies the states marked by the oracle. Here, we ``decompose`` the circuit to see the gates within the operator:"
msgstr "Qiskit組み込みの ``GroverOperator`` はオラクル回路を受け取り、オラクル回路そのものと、オラクルがマークした状態を増幅する回路からなる回路を返します。ここでは、演算子内のゲートを見るために回路を ``decompose`` しています："

#: ../../tutorials/grover_with_sampler.ipynb:231
msgid "Repeated applications of this ``grover_op`` circuit amplify the marked states, making them the most probable bit-strings in the output distribution from the circuit. There is an optimal number of such applications that is determined by the ratio of marked states to total number of possible computational states:"
msgstr "この ``grover_op`` 回路を繰り返し適用することで、マークされた状態が増幅され、この回路からの出力分布において最も高い確率をもつビット列になります。このようなアプリケーションの最適な繰り返し数は、可能な計算状態の総数とマークされた状態の比率によって決まります："

#: ../../tutorials/grover_with_sampler.ipynb:255
msgid "Full Grover circuit"
msgstr "完全なグローバー回路"

#: ../../tutorials/grover_with_sampler.ipynb:257
msgid "A complete Grover experiment starts with a Hadamard gate on each qubit; creating an even superposition of all computational basis states, followed the Grover operator (``grover_op``) repeated the optimal number of times. Here we make use of the ``QuantumCircuit.power(INT)`` method to repeatedly apply the Grover operator."
msgstr "完全なグローバー実験は、各量子ビットへのアダマールゲートから始まり、つまり全ての計算基底状態の等しい重ね合わせを作った後、グローバー演算子 (``grover_op``) を最適な回数繰り返します。ここでは、``QuantumCircuit.power(INT)`` メソッドを使用して、グローバー演算子を繰り返し適用します。"

#: ../../tutorials/grover_with_sampler.ipynb:295
msgid "Optimize the circuits and operators"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:297
msgid "For this example, the circuit the operators are simple, so no optimizations are needed."
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:309
msgid "Execute using a quantum primitive function"
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:311
msgid "Amplitude amplification is a sampling problem that is suitable for execution with the ```Sampler`` <https://docs.quantum-computing.ibm.com/api/qiskit-ibm-runtime/qiskit_ibm_runtime.Sampler#sampler>`__ runtime primitive. Because we have a single circuit, we instantiate the ```Batch`` <https://docs.quantum-computing.ibm.com/run/run-primitives-batch>`__ context manager to run our non-iterative workload."
msgstr ""

#: ../../tutorials/grover_with_sampler.ipynb:339
msgid "Analyze the results"
msgstr ""

