msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-21 16:00+0000\n"
"PO-Revision-Date: 2022-07-10 10:27\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/vqe.po\n"
"X-Crowdin-File-ID: 9832\n"
"Language: ja_JP\n"

#: ../../tutorials/vqe.ipynb:9
msgid "This page was generated from `docs/tutorials/vqe.ipynb`__."
msgstr "このページは `docs/tutorials/vqe.ipynb`__ から生成されました。"

#: ../../tutorials/vqe.ipynb:9
msgid "VQE"
msgstr "VQE"

#: ../../tutorials/vqe.ipynb:11
msgid "The Variational Quantum Eigensolver (VQE) is a central algorithm in many applications from e.g. quantum chemistry or optimization. This tutorial shows you how to run the VQE as a Qiskit Runtime program. We’ll start off by defining the algorithm settings, such as the Hamiltonian and ansatz, and then run a VQE both locally, on your machine, and remotely, using the Qiskit Runtime."
msgstr "変分量子固有ソルバー（Variational Quantum Eigensolver、VQE) は、量子化学や最適化といった多くの応用における中心的アルゴリズムです。 このチュートリアルでは、 VQE を Qiskit Runtime プログラムとして実行する方法について説明します。 まず、ハミルトニアンや ansatz などのアルゴリズムの設定を定義してから、 Qiskit Runtime を使用して、あなたのマシン上でローカルに、そしてリモートで、実行します。"

#: ../../tutorials/vqe.ipynb:13
msgid "**Note:** You can find tutorials on solving more comprehensive problems, such as finding the ground state of the lithium hydride molecule, using the VQE (and Qiskit Runtime) within `the tutorials of Qiskit Nature <https://github.com/Qiskit/qiskit-nature/tree/main/docs/tutorials>`__."
msgstr "**注記:** `Qiskit Nature のチュートリアル <https://github.com/Qiskit/qiskit-nature/tree/main/docs/tutorials>`__ 内のVQE（およびQiskit Runtime）を使用して、水素化リチウム分子の基底状態を求めるなど、より包括的な問題を解決するためのチュートリアルを見つけることができます。"

#: ../../tutorials/vqe.ipynb:25
msgid "System Hamiltonian"
msgstr "システム・ハミルトニアン"

#: ../../tutorials/vqe.ipynb:36
msgid "Let’s start by defining the operator of which we want to determine the ground state. Here we’ll chose a simple diagonal Hamiltonian :math:`\\hat H` acting with Pauli-Z operators on the first two qubits"
msgstr "基底状態を決定する演算子を定義することから始めましょう。 ここでは、最初の2つの量子ビットでパウリZ演算子を使用して動作する単純な対角ハミルトニアン :math:`\\hat H` を選択します。"

#: ../../tutorials/vqe.ipynb:38
msgid "\\hat H = \\hat Z_0 \\otimes \\hat Z_1."
msgstr "\\hat H = \\hat Z_0 \\otimes \\hat Z_1."

#: ../../tutorials/vqe.ipynb:43
msgid "We can construct this Hamiltonian with Qiskit’s ``opflow`` module:"
msgstr "このハミルトニアンは、Qiskitの ``opflow`` モジュールを使用して構築できます。"

#: ../../tutorials/vqe.ipynb:67
msgid "This Hamiltonian has a ground state energy of -1."
msgstr "このハミルトニアンは、 基底状態エネルギーが-1です。"

#: ../../tutorials/vqe.ipynb:89
msgid "Parameterized Ansatz Circuit"
msgstr "パラメータ化されたAnsatz回路"

#: ../../tutorials/vqe.ipynb:100
msgid "Next, we choose a parameterized quantum circuit :math:`\\hat U(\\theta)` to prepare the ansatz wavefunction"
msgstr "次に、パラメータ化された量子回路 :math:`\\hat U(\\theta)` を選択して、ansatz 波動関数を準備します。"

#: ../../tutorials/vqe.ipynb:102
msgid "|\\psi(\\theta)\\rangle = \\hat U(\\theta)|0\\rangle."
msgstr "|\\psi(\\theta)\\rangle = \\hat U(\\theta)|0\\rangle."

#: ../../tutorials/vqe.ipynb:107
msgid "We’ll use the ``EfficientSU2`` circuit from Qiskit’s circuit library, which is a hardware efficient, heuristic ansatz with alternating rotation and entanglement layers."
msgstr "Qiskitのcircuitライブラリーから提供される ``EfficientSU2`` 回路を使用します。これは、ハードウェア効率の高いヒューリスティック ansatz で、回転とエンタングルメントの層を交互に繰り返します。"

#: ../../tutorials/vqe.ipynb:142
msgid "Solve with the VQE"
msgstr "VQEを用いた解法"

#: ../../tutorials/vqe.ipynb:153
msgid "Now that we have the problem and ansatz specified we can use the Variational Quantum Eigensolver (VQE) to solve for the minimal eigenvalue of our Hamiltonian."
msgstr "問題とansatzが指定されたので、変分量子固有値ソルバー(VQE)を使用してハミルトニアンの最小固有値を解くことができます。"

#: ../../tutorials/vqe.ipynb:155
msgid "The VQE requires a classical optimization routine, along with an initial point, to calculate the parameter updates."
msgstr "VQE は、パラメーターの更新を計算するために、初期点とともに、古典最適化ルーチンを必要とします。"

#: ../../tutorials/vqe.ipynb:182
msgid "To access intermediate information we can pass a callback into the VQE. The callback is given the current number of function evaluations, the current parameters, function values and standard deviation in the expectation evaluation."
msgstr "中間情報にアクセスするには、コールバックを VQE に渡すことができます。 コールバックには、現在の関数の評価数、現在のパラメーター、関数の値、および期待値の標準偏差が与えられます。"

#: ../../tutorials/vqe.ipynb:211
msgid "Local VQE"
msgstr "ローカル VQE"

#: ../../tutorials/vqe.ipynb:213
msgid "Before running the Qiskit Runtime VQE program, let’s first simulate this system locally using Qiskit’s ``VQE`` class."
msgstr "Qiskit Runtime VQE プログラムを実行する前に、まず、 Qiskitの ``VQE`` クラスを使用して、このシステムをローカルでシミュレートしてください。"

#: ../../tutorials/vqe.ipynb:291
msgid "With the information from the callback, we can for instance compute the average of the estimation errors in the expectation evaluations. For an exact (statevector) simulation this would be 0, but for a shot-based readout as we have on real hardware, this will be a small finite error."
msgstr "コールバックからの情報を使用して、たとえば、期待値評価の推定誤差の平均を計算できます。 正確な（状態ベクトル）シミュレーションの場合、これは0になりますが、実際のハードウェアの場合のようにショットベースの読み出しの場合、これは小さな有限誤差になります。"

#: ../../tutorials/vqe.ipynb:337
msgid "Qiskit Runtime VQE"
msgstr "Qiskit Runtime VQE"

#: ../../tutorials/vqe.ipynb:348
msgid "To call the VQE code on the Qiskit Runtime on the cloud, we interact with the ``run`` method of ``QiskitRuntimeService``:"
msgstr "クラウド上の Qiskit Runtime で VQE コードを呼び出すには、 ``QiskitRuntimeService`` の ``run`` メソッドと対話します。"

#: ../../tutorials/vqe.ipynb:354
msgid "where"
msgstr "ここで"

#: ../../tutorials/vqe.ipynb:356
msgid "``program_id`` determines the Qiskit Runtime program run, i.e. \\ ``'vqe'`` for the VQE"
msgstr "``program_id`` は Qiskit Runtime プログラムの実行を決定します。すなわち、VQE の ``'vqe'`` です。"

#: ../../tutorials/vqe.ipynb:357
msgid "``inputs`` contains the input for the VQE algorithm"
msgstr "``inputs`` には VQE アルゴリズムの入力が含まれています"

#: ../../tutorials/vqe.ipynb:358
msgid "``options`` specifies the backend"
msgstr "``options`` はバックエンドを指定します"

#: ../../tutorials/vqe.ipynb:359
msgid "``callback`` is the callback used inside the VQE"
msgstr "``callback`` は VQE 内で使用されるコールバックです"

#: ../../tutorials/vqe.ipynb:370
msgid "We start by initializing an account with access to the Qiskit Runtime service and the backend to execute the circuits on"
msgstr "QisKit Runtime サービスへのアクセスでアカウントを初期化し、回路を実行するバックエンドから始めます。"

#: ../../tutorials/vqe.ipynb:393
msgid "We’re using the ``ibmq_montreal`` device, but you can replace this with another device you have access to."
msgstr "私たちは ``ibmq_montreal`` デバイスを使用していますが、アクセス可能な別のデバイスに置き換えることができます。"

#: ../../tutorials/vqe.ipynb:414
msgid "Let’s gather all the inputs to the VQE in a dictionary."
msgstr "辞書内の VQE へのすべての入力を収集します。"

#: ../../tutorials/vqe.ipynb:442
msgid "The backend options only need to contain the name of the backend."
msgstr "バックエンド・オプションには、バックエンドの名前のみが含まれている必要があります。"

#: ../../tutorials/vqe.ipynb:463
msgid "The callback acts a little different than before. Instead of only being passed the VQE callback arguments, it is passed a tuple with the job ID as first argument, followed by the VQE arguments."
msgstr "コールバックは以前とは少し異なります。 VQEコールバック引数のみ渡される代わりに。 最初の引数としてジョブIDを持つタプルを渡し、続いてVQE引数を渡します。"

#: ../../tutorials/vqe.ipynb:494
msgid "Now we can call the Qiskit Runtime VQE program. Note, that the result will not be of the same type as ``VQE``, but a plain dictionary."
msgstr "これで、Qiskit Runtime VQEプログラムを呼び出すことができます。 結果は ``VQE`` と同じ型ではなくプレーンな辞書であることに注意してください。"

