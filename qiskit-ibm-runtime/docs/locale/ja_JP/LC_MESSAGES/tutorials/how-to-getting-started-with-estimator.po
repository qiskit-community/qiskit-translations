msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-23 01:34+0000\n"
"PO-Revision-Date: 2023-02-02 08:04\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/how-to-getting-started-with-estimator.po\n"
"X-Crowdin-File-ID: 9818\n"
"Language: ja_JP\n"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:9
msgid "This page was generated from `docs/tutorials/how-to-getting-started-with-estimator.ipynb`__."
msgstr "このページは `docs/tutorials/how-to-getting-started-with-estimator.ipynb`__ から生成されました。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:8
msgid "**Pedro Rivero**"
msgstr "**Pedro Rivero**"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:9
msgid "Quantum Developer *@ IBM Quantum*"
msgstr "Quantum Developer *@ IBM Quantum*"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:10
msgid "pedro.rivero@ibm.com"
msgstr "pedro.rivero@ibm.com"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:22
msgid "Get started with the Estimator primitive"
msgstr "Estimator primitive 入門"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:24
msgid "Learn what the *Estimator primitive* is, how to set it up, and how to use it as of *Qiskit Terra 0.22.0*."
msgstr "*Qiskit Terra 0.22.0* 時点での *Estimator Primitive* とは何か、設定方法、使用方法について説明します。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:27
msgid "Overview"
msgstr "概要"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:29
msgid "*Primitives* are meant to serve as foundational, elementary, building blocks for users to perform quantum computations, developers to implement quantum algorithms, and researchers to solve complex problems and deliver new applications."
msgstr "*Primitives* は、量子計算を行うユーザー、量子アルゴリズムを実装する開発者、複雑な問題を解決し新しいアプリケーションを提供する研究者にとって、基礎的で基本的な構成要素の役割を果たすことを意図しています。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:32
msgid "Specification"
msgstr "仕様"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:34
msgid "Formally speaking, the *Estimator* primitive is a standardized specification for calculating and interpreting expectation values for different combinations of quantum states (that is, circuits) and operators. This means that there is no single ``Estimator`` class to solve this task, but rather a family of them based on the simulators and devices that users can experiment on; each of which performing the same (internal) calculation on its given backend, while exposing a common \\_application programming interface (API) to the users."
msgstr "*Estimator* primitive は、量子状態（回路）と演算子の組み合わせによる期待値の計算と解釈を標準化した仕様です。つまり、このタスクを解決するための単一の ``Estimator`` クラスは存在せず、ユーザーが実験できるシミュレーターやデバイスに基づいた ``Estimator`` クラス群が存在し、それぞれが共通のAPIを公開しながら、与えられたバックエンドで同じ（内部）計算を行います。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:38
msgid "Technical description"
msgstr "技術的な説明"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:40
msgid "From a technical standpoint, this is accomplished by defining a so called *interface* or, in more pyhtonic terminology, `abstract base class <https://docs.python.org/3/library/abc.html>`__ (``ABC``): ``BaseEstimator``. This ``ABC`` (i.e. the official specification of the *Estimator* primitive) can be found in `Qiskit Terra <https://github.com/Qiskit/qiskit-terra/blob/main/qiskit/primitives/base/base_estimator.py>`__, and serves two main purposes:"
msgstr "技術的な観点からは、これはいわゆる *interface* 、よりpyhtonicな用語では`抽象基底クラス <https://docs.python.org/3/library/abc.html>`__ (``ABC``) である ``BaseEstimator`` を定義することで達成されます。この ``ABC`` （つまり * Estimator* primitiveの公式仕様）は、 `Qiskit Terra <https://github.com/Qiskit/qiskit-terra/blob/main/qiskit/primitives/base/base_estimator.py>`__にあり、主に2つの目的を果たします。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:42
msgid "Standardize the way users interact with all ``Estimator`` classes (up to configurations), by defining a common API."
msgstr "共通のAPIを定義することで、ユーザーがすべての ``Estimator`` クラス（コンフィギュレーションまで）とやり取りする方法を標準化します。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:43
msgid "Decouple particular *Estimator* implementations from the code that uses them, so that any user/developer can easily change their choice of simulator or device for performing expectation value calculations."
msgstr "特定の *Estimator* の実装とそれを使うコードを切り離し、期待値計算を行うシミュレーターやデバイスの選択をユーザーや開発者が容易に変更できるようにします。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:45
msgid "|Estimator specification|"
msgstr "|Estimator specification|"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:55
msgid "Estimator specification"
msgstr "Estimatorの仕様"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:48
msgid "Qiskit Runtime"
msgstr "Qiskit Runtime"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:50
msgid "As all other primitive programs to date, Estimator was born in the context of *Qiskit Runtime*: a quantum computing service and programming model that allows users to optimize workloads and efficiently execute them on quantum systems at scale. IBM provides a `managed ``Estimator`` <https://github.com/Qiskit/qiskit-ibm-runtime>`__ (i.e. an implementation of ``BaseEstimator``) that allows users to access IBM quantum hardware efficiently after `registering for an account <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ either on *IBM Quantum* or *IBM Cloud*."
msgstr "これまでのprimitive プログラムと同様に、Estimatorは *Qiskit Runtime* という量子コンピューティングサービスとプログラミングモデルの中で生まれました。IBM は、*IBM Quantum* または *IBM Cloud* のいずれかに `アカウント登録 <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ した後、ユーザーが IBM 量子ハードウェアに効率的にアクセスできるように、`マネージド ``Estimator``<https://github.com/Qiskit/qiskit-ibm-runtime>`__ (すなわち ``BaseEstimator`` の実装) を提供しています。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:53
msgid "This tutorial has been developed for Qiskit’s native simulators, follow the links above for information on how to proceed with a real quantum computer."
msgstr "このチュートリアルは、Qiskitネイティブのシミュレーター用に開発されています。実際の量子コンピューターを使用する方法については、上記のリンクを参照してください。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:67
msgid "Demo"
msgstr "デモ"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:70
msgid "Prepare the environment"
msgstr "環境の準備"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:72
msgid "For a basic expectation value calculation you will need:"
msgstr "基本的な期待値計算のために必要なもの："

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:74
msgid "At least one quantum circuit to prepare our system in a precise quantum state for study. Our examples all have circuits in them, but you can use Qiskit to create your own. To learn how to create circuits by using Qiskit, see the `Circuit basics tutorial <https://qiskit.org/documentation/tutorials/circuits/01_circuit_basics.html>`__."
msgstr "少なくとも1つの量子回路が必要です。この例ではすべて回路が用意されていますが、Qiskitを使って自分で作成することも可能です。Qiskitを使用して回路を作成する方法については、`Circuit basics tutorial <https://qiskit.org/documentation/tutorials/circuits/01_circuit_basics.html>`__ をご覧ください。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:106
msgid "At least one observable to measure. Observables represent physical properties of a quantum system (e.g. energy, spin), and allow said properties to be measured (e.g. their expectation values) for a given state of our system. For simplicity, you can use the `PauliSumOp class <https://qiskit.org/documentation/stubs/qiskit.opflow.primitive_ops.html#module-qiskit.opflow.primitive_ops>`__ in Qiskit to define them, as illustrated in the example below."
msgstr "少なくとも1つの観測量を測定します。観測量は量子系の物理的特性 (エネルギーやスピンなど) を表し、系の与えられた状態について前記特性を測定 (期待値など) できるようにします。単純化するために、以下の例に示すように、Qiskitの `PauliSumOp class <https://qiskit.org/documentation/stubs/qiskit.opflow.primitive_ops.html#module-qiskit.opflow.primitive_ops>`__ を使用してそれらを定義することができます。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:154
msgid "An instance of any ``Estimator`` class complying with the *Estimator* primitive specification. For simplicity, we will use Qiskit Terra’s ``qiskit.primitives.Estimator`` class, based on the ```Statevector`` construct <https://qiskit.org/documentation/stubs/qiskit.quantum_info.Statevector.html?highlight=statevector#qiskit.quantum_info.Statevector>`__ (i.e. algebraic simulation)."
msgstr "*Estimator* primitive の仕様に準拠した任意の ``Estimator`` クラスのインスタンス。ここでは簡単のため、Qiskit Terraの ``qiskit.primitives.Estimator`` クラスを使用し、 ```Statevector`` construct <https://qiskit.org/documentation/stubs/qiskit.quantum_info.Statevector.html?highlight=statevector#qiskit.quantum_info.Statevector>`__ (すなわち代数的シミュレーション)に基づいています。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:178
msgid "Run a single experiment"
msgstr "1つの実験の実行"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:180
msgid "You can invoke the *Estimator* primitive program using the ``run()`` method of the ``Estimator`` instance you just created. The method returns a ``JobV1`` object which you can use to query for things like ``job_id()`` and ``status()``."
msgstr "*Estimator* primitive プログラムは、先ほど作成した ``Estimator`` インスタンスの ``run()`` メソッドで呼び出すことができます。このメソッドは ``JobV1`` オブジェクトを返すので、 ``job_id()`` や ``status()`` などのクエリーに利用することができます。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:230
msgid "The ``result()`` method of the job will return the ``EstimatorResult``."
msgstr "ジョブの``result()`` メソッドでは、 ``EstimatorResult``を返します。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:276
msgid "Finally, to extract different information about the result:"
msgstr "最後に、結果について別の情報を抽出します。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:328
msgid "You can keep invoking the ``run()`` method again with the different inputs:"
msgstr "このように、入力を変えて再度 ``run()`` メソッドを起動し続けることができます。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:398
msgid "Run multiple experiments (batching)"
msgstr "複数の実験の実行（バッチ処理）"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:400
msgid "You can also provie compound inputs to the ``run()`` method in order to execute multiple experiments sequentially:"
msgstr "複数の実験を連続して行うために、``run()`` メソッドに複合入力を与えることもできます。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:485
msgid "Run multiple experiments (asynchronous)"
msgstr "複数の実験の実行（非同期）"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:487
msgid "Creating multiple jobs will run the experiments in parallel:"
msgstr "複数のジョブを作成することで、並行して実験を行うことができます。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:583
msgid "Parametrized states"
msgstr "パラメーター化された状態"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:585
msgid "Many real world applications of quantum computers depend on preparing quantum states according to certain parametrization or *ansatz*. The *Estimator* primitive offers support for these scenarios by accepting parametrized circuits as inputs, along with one extra argument to bind them: ``parameter_values``."
msgstr "量子コンピューターの実世界での応用の多くは、あるパラメーター化や *ansatz*　にしたがって量子状態を準備することに依存しています。*Estimator* primitiveはこのようなシナリオをサポートするために、パラメーター化された回路を入力として受け取り、さらにそれを束ねるための引数、 ``parameter_values`` を受け取ります。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:662
msgid "Configuration and options"
msgstr "設定とオプション"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:664
msgid "On top of this basic usage, ``Estimator`` classes can also support custom configuration through two kinds of options: 1. Instance level options which serve as defaults. 2. Run options to update defaults for a single job."
msgstr "この基本的な使い方に加えて、``Estimator`` クラスは2種類のオプションによってカスタムコンフィギュレーションをサポートすることができます： 1. デフォルトとなるインスタンスレベルのオプション。2. 単一ジョブのデフォルトを更新するための実行オプション。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:666
msgid "The particualr ``Estimator`` that we have been using so far accepts a ``shots`` option to fabricate a random sampling which mimics the process that usually takes place in real hardware. This will result in a non-exact, statistical, result, with the corresponding variance reported along in the metadata."
msgstr "これまで使ってきた特定の ``Estimator`` は、実際のハードウェアで行われるプロセスを模倣したランダムサンプリングを作成するための ``shots`` オプションを受け付けます。これにより、正確でない統計的な結果が得られ、対応する分散がメタデータで報告されます。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:737
msgid "And we can override the dafault ``shots`` when calling ``run()``:"
msgstr "そして、``run()``を呼び出す際に、dafault ``shots`` をオーバーライドすることができます。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:807
msgid "Getting started with Estimator on the runtime service"
msgstr "Runtime サービスでのEstimatorの使い方"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:809
msgid "Follow the steps in the `getting started guide <../getting_started.rst>`__ to get your quantum service instance ready to use."
msgstr "`getting started guide <../getting_started.rst>`__ の手順に従い、quantumサービスインスタンスを使用できるようにします。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:812
msgid "Start a session"
msgstr "Session を開始する"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:814
msgid "A Qiskit Runtime session allows you to group a collection of iterative calls to the timeshare quantum computer. A session is started when the first job of the program is dequeued. Subsequent jobs within the session are prioritized by the scheduler to minimize artificial delay within an iterative algorithm. Data used within a session, such as transpiled circuits, is also cached to avoid unnecessary overhead. You can create a Runtime session using the context manager ``(with ...:)``, which automatically opens and closes the session for you."
msgstr "Qiskit Runtime sessionは、時間でシェアしている量子コンピューターへの反復呼び出しの集合をグループ化することができます。Sessionは、プログラムの最初のジョブが繰り返しキューされたときに開始されます。Session内の後続のジョブは、反復アルゴリズム内の人為的な遅延を最小化するためにスケジューラーによって優先順位が付けられます。トランスパイルサーキットなど、session内で使用されるデータもキャッシュされ、不要なオーバーヘッドを回避します。Runtime sessionは、コンテキストマネージャー``(with ...:)`` を使用して作成することができ、自動的にsessionを開いたり閉じたりすることができます。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:824
msgid "Create an Estimator instance"
msgstr "Estimatorのインスタンスの作成"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:826
msgid "You can make one or more calls to the *Estimator* primitive within a session, by first creating an *Estimator* instance. The *Estimator* class takes in an *options* variable to control the execution environment."
msgstr "Session内 で *Estimator* primitive を1つ以上呼び出すには、まず *Estimator* インスタンスを作成します。 *Estimator* クラスは、実行環境を制御するために*options* 変数を受け取ります。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:828
msgid "The *options* can be either a dictionary or a *qiskit_ibm_runtime.Options* class instance. Initializing it as an *Options* class allows you to use auto complete."
msgstr "*options* は辞書か *qiskit_ibm_runtime.Options* クラスのインスタンスを指定することができます。 *Options* クラスとして初期化することで、オートコンプリートを使用することができます。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:830
msgid "Some of the settings you can specify using options:"
msgstr "Options を使って指定できる設定の一部を紹介します:"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:832
msgid "optimization_level: How much optimization to perform on the circuits. The default is 3."
msgstr "optimization_level: 回路の最適化をどの程度行うか。デフォルトは3です。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:834
msgid "resilience_level: How much resilience to build against errors. Higher levels generate more accurate results, at the expense of longer processing times. The default is 1."
msgstr "resilience_level: エラーに対する回復力をどの程度に設定するか。レベルが高いほど、より正確な結果が得られますが、処理時間が長くなります。デフォルトは1です。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:836
msgid "You can find full details in the `Options API reference <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.options.Options.html#qiskit_ibm_runtime.options.Options>`__."
msgstr "詳細は、 `Options API reference <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.options.Options.html#qiskit_ibm_runtime.options.Options>`__ に記載されています。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:838
msgid "With these arguments, you can create an *Estimator* instance with the desired options."
msgstr "これらの引数を使って、希望するオプションを持つ *Estimator* インスタンスを作成することができます。"

#: ../../tutorials/how-to-getting-started-with-estimator.ipynb:841
msgid "Example:"
msgstr "例:"

