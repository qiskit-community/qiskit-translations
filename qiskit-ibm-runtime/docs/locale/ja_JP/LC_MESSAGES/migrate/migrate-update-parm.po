msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-12 19:16+0000\n"
"PO-Revision-Date: 2023-09-12 19:46\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /main/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/migrate/migrate-update-parm.po\n"
"X-Crowdin-File-ID: 9961\n"

#: ../../migrate/migrate-update-parm.rst:2
msgid "Parametrized circuits with primitives"
msgstr "Primitiveにおけるパラメーター付き回路"

#: ../../migrate/migrate-update-parm.rst:5
msgid "Parametrized circuits are a commonly used tool for quantum algorithm design. Because `backend.run()` did not accept parametrized circuits, the parameter binding step had to be integrated in the algorithm workflow. The primitives can perform the parameter binding step internally, which results in a simplification of the algorithm-side logic."
msgstr "パラメーター付き回路は、量子アルゴリズム設計のために一般的に使用されるツールです。  `backend.run()` はパラメーター付き回路を受け付けないため、アルゴリズムワークフローにパラメーター結合ステップを組み込む必要がありました。Primitive はパラメーター結合を内部で行うことができ、アルゴリズム側のロジックを簡略化することができます。"

#: ../../migrate/migrate-update-parm.rst:8
msgid "The following example summarizes the new workflow for managing parametrized circuits."
msgstr "以下の例では、パラメーター付き回路を管理するための新しいワークフローをまとめています。"

#: ../../migrate/migrate-update-parm.rst:11
msgid "Example"
msgstr "例"

#: ../../migrate/migrate-update-parm.rst:12
msgid "Let's define a parametrized circuit:"
msgstr "パラメーター付き回路を定義しましょう。"

#: ../../migrate/migrate-update-parm.rst:38
msgid "We want to assign the following parameter values to the circuit:"
msgstr "回路に次のパラメーターの値を割り当てます:"

#: ../../migrate/migrate-update-parm.rst:47
msgid "Legacy"
msgstr "これまで"

#: ../../migrate/migrate-update-parm.rst:48
msgid "Previously, the parameter values had to be bound to their respective circuit parameters before calling `backend.run()`."
msgstr ""

#: ../../migrate/migrate-update-parm.rst:63
msgid "Primitives"
msgstr "Primitives"

#: ../../migrate/migrate-update-parm.rst:64
msgid "Now, the primitives take in parametrized circuits directly, together with the parameter values, and the parameter assignment operation can be performed more efficiently on the server side of the primitive."
msgstr "現在、Primitiveはパラメーター付き回路をパラメーターの値とともに直接取り込み、primitiveのサーバー側でパラメーター割り当て操作をより効率的に行うことができるようになりました。"

#: ../../migrate/migrate-update-parm.rst:66
msgid "This feature is particularly interesting when working with iterative algorithms because the parametrized circuit remains unchanged between calls while the parameter values change. The primitives can transpile once and then cache the unbound circuit, using classical resources more efficiently. Moreover, only the updated parameters are transferred to the cloud, saving additional bandwidth."
msgstr "この機能は、繰り返しアルゴリズムを扱う場合に特に興味深いもので、パラメーターの値が変化しても、パラメーター付き回路は呼び出す間に変化しないためです。Primitiveは、一度トランスパイルしてから、バインドされていない回路をキャッシュすることができ、古典的なリソースをより効率的に使用することができます。さらに、更新されたパラメーターのみがクラウドに転送され、追加の帯域幅を節約することができます。"

