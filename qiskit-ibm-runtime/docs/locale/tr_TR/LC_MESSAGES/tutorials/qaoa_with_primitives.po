msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-17 16:43+0000\n"
"PO-Revision-Date: 2023-11-17 16:50\n"
"Last-Translator: \n"
"Language: tr\n"
"Language-Team: Turkish\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /main/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/qaoa_with_primitives.po\n"
"X-Crowdin-File-ID: 10009\n"

#: ../../tutorials/qaoa_with_primitives.ipynb:9
msgid "This page was generated from `docs/tutorials/qaoa_with_primitives.ipynb`__."
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:9
msgid "Quantum Approximate Optimization Algorithm"
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:21
msgid "Background"
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:23
msgid "The Quantum Approximate Optimization Algorithm (QAOA) is a hybrid iterative method for solving combinatorial optimization problems. In this tutorial, we demonstrate how to implement the QAOA algorithm using Qiskit Runtime for solving a simple max-cut problem."
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:25
msgid "In a max-cut problem, we want to partition nodes of a graph in a way that maximizes the number of edges between nodes in differing groups. The desired max-cut partition for the following graph is clear: the 0th-node on the left should be separated from the rest of the nodes on the right by a cut. We will find this answer by applying QAOA by using Qiskit Runtime primitives and sessions."
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:37
msgid "Setup"
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:89
msgid "Map the problem to a quantum-native format"
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:91
msgid "To demonstrate max-cut, we'll create a graph using the `rustworkx library <https://github.com/Qiskit/rustworkx>`__, and create Pauli Hamiltonian that encodes the cost in a manner such that the minimum expectation value of the operator corresponds to the maximum number of edges between the nodes in two different groups."
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:129
msgid "For this simple example, the operator is a linear combination of terms with ``Z`` operators on nodes connected by an edge (recall that the 0th qubit is farthest right): :math:`IIIZZ + IIZIZ + IZIIZ + ZIIIZ`. Once the operator is constructed, the ansatz for the QAOA algorithm can easily be built by using the ```QAOAAnsatz`` <https://docs.quantum-computing.ibm.com/api/qiskit/qiskit.circuit.library.QAOAAnsatz#qaoaansatz>`__ circuit from the Qiskit circuit library."
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:164
msgid "The previous image illustrates the ansatz in basic gates for clarity. However, it can be expressed in multiple levels of decomposition by changing the ``reps`` argument or by drawing the circuit without the ``decompose`` method. For example, the following representation directly shows the QAOA structure with the default ``reps`` value, which is ``reps=1``."
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:195
msgid "Optimize the circuits and operators"
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:197
msgid "We can schedule a series of `qiskit.transpiler <https://docs.quantum-computing.ibm.com/api/qiskit/transpiler>`__ passes to optimize our circuit for a selected backend. This includes a few components:"
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:199
msgid "```optimization_level`` <https://docs.quantum-computing.ibm.com/api/qiskit/transpiler_preset#preset-pass-manager-generation>`__: The lowest optimization level does the bare minimum needed to get the circuit running on the device; it maps the circuit qubits to the device qubits and adds swap gates to allow all 2-qubit operations. The highest optimization level is much smarter and uses lots of tricks to reduce the overall gate count. Since multi-qubit gates have high error rates and qubits decohere over time, the shorter circuits should give better results."
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:201
msgid "`Dynamical Decoupling <https://docs.quantum-computing.ibm.com/api/qiskit-ibm-runtime/qiskit_ibm_provider.transpiler.passes.scheduling.PadDynamicalDecoupling>`__: We can apply a sequence of gates to idling qubits. This cancels out some unwanted interactions with the environment."
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:261
msgid "We can also use ``apply_layout`` to transform our virtual observable to physical"
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:312
msgid "Execute using a quantum primitive function"
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:323
msgid "As with an iterative optimization procedure, we now need to define our cost function over which to minimize. We proceed in an identical manner to the `Variational Quantum Eigensolver tutorial <https://learning.quantum-computing.ibm.com/tutorial/variational-quantum-eigensolver>`__, computing the expectation value of our Hamiltonian with respect to the parameterized ansatz circuit using the `Qiskit Runtime ``Estimator`` <https://docs.quantum-computing.ibm.com/api/qiskit-ibm-runtime/qiskit_ibm_runtime.Estimator#estimator>`__ primitive:"
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:358
msgid "Any classical optimizer can be used to minimize the cost function. On a real quantum system, an optimizer designed for non-smooth cost function landscapes usually does better. Here we use the `COBYLA routine from SciPy through the minimize function <https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html>`__."
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:360
msgid "Because we are iteratively executing many calls to Runtime, we use a ```Session`` <https://docs.quantum-computing.ibm.com/api/qiskit-ibm-runtime/qiskit_ibm_runtime.Session>`__ to execute all calls within a single block. Moreover, for QAOA, the solution is encoded in the output distribution of the ansatz circuit bound with the optimal parameters from the minimization. Therefore, we will need a ```Sampler`` <https://docs.quantum-computing.ibm.com/api/qiskit-ibm-runtime/qiskit_ibm_runtime.Sampler>`__ primitive as well, and will instantiate it with the same ```Session`` <https://docs.quantum-computing.ibm.com/api/qiskit-ibm-runtime/qiskit_ibm_runtime.Session>`__."
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:393
msgid "We can set an initial set of random parameters:"
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:414
msgid "We can run our minimization routine:"
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:435
msgid "In the end, we have a result in the standard `SciPy ``OptimizeResult`` <https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.OptimizeResult.html>`__ format."
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:500
msgid "Analyze the results"
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:511
msgid "The solution vector of parameter angles (``x``), when plugged into the ``ansatz`` circuit, yields the graph partitioning that we were looking for."
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:548
msgid "For small problem instances, the solution can be visually obtained:"
msgstr ""

#: ../../tutorials/qaoa_with_primitives.ipynb:578
msgid "The most probable bit-strings, up to finite-sampling deviations, encode the solution. Here we see that ``00001`` and ``11110`` are found, and are indeed correct. There are two solutions because the labeling of the two partitions with ``'0'`` or ``'1'`` is arbitrary."
msgstr ""

