msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-10 16:30+0000\n"
"PO-Revision-Date: 2022-11-10 17:14\n"
"Last-Translator: \n"
"Language-Team: Portuguese (United)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pr\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/sample_expval_program/qiskit_runtime_expval_program.po\n"
"X-Crowdin-File-ID: 9824\n"
"Language: pt_UN\n"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:9
msgid "This page was generated from `docs/tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb`__."
msgstr "Esta página foi gerada a partir de `docs/tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb`__."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:9
msgid "Custom Expectation Value Program for the Qiskit Runtime"
msgstr "Programa de valor esperado personalizado para o Qiskit Runtime"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:15
msgid "Paul Nation"
msgstr "Paul Nation"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:25
msgid "IBM Quantum Partners Technical Enablement Team"
msgstr "IBM Quantum Partners Technical Enablement Team (Equipe de capacitação técnica do IBM Quantum Partners)"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:31
msgid "Here we will show how to make a program that takes a circuit, or list of circuits, and computes the expectation values of one or more diagonal operators."
msgstr "Aqui vamos mostrar como fazer um programa que pega um circuito, ou lista de circuitos, e calcula os valores esperados de um ou mais operadores diagonais."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:43
msgid "Prerequisites"
msgstr "Pré-requisitos"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:45
msgid "You must have the latest Qiskit installed."
msgstr "O Qiskit mais recente instalado."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:46
msgid "You must have either an IBM Cloud or an IBM Quantum account that can access Qiskit Runtime."
msgstr "Uma conta do IBM Cloud ou do IBM Quantum que possa acessar o Qiskit Runtime."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:58
msgid "Background"
msgstr "Experiência"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:60
msgid "The primary method by which information is obtained from quantum computers is via expectation values. Indeed, the samples that come from executing a quantum circuit multiple times, once converted to probabilities, can be viewed as just a finite sample approximation to the expectation value for the projection operators corresponding to each bitstring. More practically, many quantum algorithms require computing expectation values over Pauli operators, e.g. Variational Quantum Eigensolvers, and thus having a runtime program that computes these quantities is of fundamental importance. Here we look at one such example, where a user passes one or more circuits and expectation operators and gets back the computed expectation values, and possibly error bounds."
msgstr ""

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:64
msgid "Expectation value of a diagonal operator"
msgstr "Valor esperado de um operador diagonal"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:66
msgid "Consider a generic observable given by the tensor product of diagonal operators over :math:`N` qubits :math:`O = O_{N-1}\\dots O_{0}` where the subscript indicates the qubit on which the operator acts. Then for a set of observed :math:`M` bitstrings :math:`\\{b_{0}, \\dots b_{M-1}\\}`, where $M :nbsphinx-math:`\\leq `2^N $, with corresponding approximate probabilities :math:`p_{m}` the expectation value is given by"
msgstr "Considere um observável genérico dado pelo produto tensorial de operadores diagonais sobre :math:`N` qubits :math:`O = O_{N-1}\\dots O_{0}` onde o subscrito indica o qubit no qual o operador atua . Então, para um conjunto de strings de bits :math:`M` observadas :math:`\\{b_{0}, \\dots b_{M-1}\\}`, onde $M :nbsphinx-math:`\\leq `2^ N $, com probabilidades aproximadas correspondentes :math:`p_{m}` o valor esperado é dado por"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:68
msgid "\\langle O\\rangle \\simeq \\sum_{m=0}^{M-1} p_{m}\\prod_{n=0}^{N-1}O_{n}[b_{m}[N-n-1], b_{m}[N-n-1]],"
msgstr "\\langle O\\rangle \\simeq \\sum_{m=0}^{M-1} p_{m}\\prod_{n=0}^{N-1}O_{n}[b_{m}[N-n-1], b_{m}[N-n-1]],"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:73
msgid "where :math:`O_{n}[b_{m}[N-n-1], b_{m}[N-n-1]]` is the diagonal element of :math:`O_{n}` specified by the :math:`N-n-1`\\ th bit in bitstring :math:`b_{m}`. The reason for the complicated indexing in ``b_{m}`` is because Qiskit uses least-significant bit indexing where the zeroth element of the bit-strings is given by the right-most bit."
msgstr "onde :math:`O_{n}[b_{m}[N-n-1], b_{m}[N-n-1]]` é o elemento diagonal de :math:`O_{n}` especificado pelo :math:`N-n-1`\\ º bit na cadeia de bits :math:`b_{m}`. A razão para a indexação complicada em ``b_{m}`` é porque o Qiskit usa indexação de bit menos significativo onde o elemento zero das cadeias de bits é dado pelo bit mais à direita."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:75
msgid "Here we will use built-in routines to compute these expectation values. However, it is not hard to do yourself, with plenty of examples to be found."
msgstr "Aqui usaremos rotinas internas para calcular esses valores esperados. No entanto, não é difícil fazer você mesmo, com muitos exemplos a serem encontrados."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:87
msgid "Main program"
msgstr "Programa principal"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:89
msgid "Here we define our main function for the expectation value runtime program. As always, our program must start with the ``backend``, and ``user_messenger`` arguements, followed by the actual inputs we pass to the program. Here our options are quite simple:"
msgstr "Aqui definimos nossa função principal para o programa de tempo de execução do valor esperado. Como sempre, nosso programa deve começar com os argumentos ``backend`` e ``user_messenger``, seguidos pelas entradas reais que passamos para o programa. Aqui nossas opções são bem simples:"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:91
msgid "``circuits``: A single QuantumCircuit or list of QuantumCircuits to be executed on the target backend."
msgstr "``circuits``: Um único QuantumCircuit ou lista de QuantumCircuits a serem executados no backend de destino."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:93
msgid "``expectation_operators``: The operators we want to evaluate. These can be strings of diagonal Pauli’s, eg, ``ZIZZ``, or custom operators defined by dictionaries. For example, the projection operator on the all ones state of 4 qubits is ``{'1111': 1}``."
msgstr "``expectation_operators``: Os operadores que queremos avaliar. Estes podem ser strings de Pauli diagonais, por exemplo, ``ZIZZ``, ou operadores personalizados definidos por dicionários. Por exemplo, o operador de projeção no estado de todos os 4 qubits é ``{'1111': 1}``."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:95
msgid "``shots``: How many times to sample each circuit."
msgstr "``shots``: Quantas vezes amostrar cada circuito."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:97
msgid "``transpiler_config``: A dictionary that passes additional arguments on to the transpile function, eg. ``optimization_level``."
msgstr "``transpiler_config``: Um dicionário que passa argumentos adicionais para a função transpile, por exemplo. ``optimization_level``."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:99
msgid "``run_config``: A dictionary that passes additional arguments on to ``backend.run()``."
msgstr "``run_config``: Um dicionário que passa argumentos adicionais para ``backend.run()``."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:101
msgid "``skip_transpilation``: A flag to skip transpilation altogether and just run the circuits. This is useful for situations where you need to transpile parameterized circuits once, but must bind parameters multiple times and evaluate."
msgstr "``skip_transpilation``: Um sinalizador para pular a transpilação completamente e apenas executar os circuitos. Isso é útil para situações em que você precisa transpilar circuitos parametrizados uma vez, mas deve vincular parâmetros várias vezes e avaliar."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:103
msgid "``return_stddev``: Flag to return bound on standard deviation. If using measurement mitigation this adds some overhead to the computation."
msgstr "``return_stddev``: Sinalizador para retornar o limite no desvio padrão. Se estiver usando mitigação de medida, isso adiciona um overhead ao cálculo."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:105
msgid "``use_measurement_mitigation``: Use M3 measurement mitigation and compute expectation value and standard deviation bound from quasi-probabilities."
msgstr ""

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:107
#, python-format
msgid "At the top of the cell below you will see a commented out ``%%writefile sample_expval.py``. We will use this to convert the cell to a Python module named ``sample_expval.py`` to upload."
msgstr "No topo da célula abaixo você verá um ``%%writefile sample_expval.py`` comentado. Usaremos isso para converter a célula em um módulo Python chamado ``sample_expval.py`` para fazer o upload."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:228
msgid "Local testing"
msgstr "Testando localmente"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:230
msgid "Here we test with a local “Fake” backend that mimics the noise properties of a real system and a 4-qubit GHZ state."
msgstr "Aqui testamos com um backend local “Fake” que imita as propriedades de ruído de um sistema real e um estado GHZ de 4 qubits."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:320
msgid "If we have done our job correctly, the above should print out two expectation values close to one and a final expectation value close to zero."
msgstr "Se tivermos feito nosso trabalho corretamente, o acima deve imprimir dois valores esperados próximos a um e um valor esperado final próximo a zero."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:332
msgid "Program metadata"
msgstr "Metadados do programa"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:334
msgid "Next we add the needed program data to a dictionary for uploading with our program."
msgstr "Em seguida, adicionamos os dados do programa necessários a um dicionário para upload com nosso programa."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:402
msgid "Upload the program"
msgstr "Fazendo o upload do programa"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:404
#, python-format
msgid "We are now in a position to upload the program. To do so we first uncomment and execute the line ``%%writefile sample_expval.py`` giving use the ``sample_expval.py`` file we need to upload."
msgstr ""

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:464
msgid "Delete program if needed"
msgstr "Delete o programa se necessario"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:486
msgid "Wrapping the runtime program"
msgstr "Encapsulando o programa de runtime"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:488
msgid "As always, it is best to wrap the call to the runtime program with a function (or possibly a class) that makes input easier and does some validation."
msgstr "Como sempre, é melhor encapsular a chamada ao programa de runtime com uma função (ou possivelmente uma classe) que facilite a entrada e faça alguma validação."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:565
msgid "Trying it out"
msgstr "Testando"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:567
msgid "Let’s try running the program here with our previously made GHZ state and running on the simulator."
msgstr ""

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:627
msgid "The first two projectors should be nearly :math:`0.50` as they tell us the probability of being in the all zeros and ones states, respectively, which should be 50/50 for our GHZ state. The final expectation value of ``ZZZZ`` should be one since this is a GHZ over an even number of qubits. It should go close to zero for an odd number."
msgstr ""

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:700
msgid "Quantum Volume as an expectation value"
msgstr "Volume Quântico (QV) como um valor esperado"

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:702
msgid "Here we formulate QV as an expectation value of a projector onto the heavy-output elements on a distribution. We can then use our expectation value routine to compute whether a given circuit has passed the QV metric."
msgstr "Aqui formulamos QV como um valor esperado de um projetor para os elementos de heavy-output em uma distribuição. Podemos então usar nossa rotina de valor esperado para calcular se um determinado circuito passou na métrica QV."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:704
msgid "QV is defined in terms of heavy-outputs of a distribution. Heavy-outputs are those bit-strings that are those that have probabilities above the median value of the distribution. Below we define the projection operator onto the set of bit-strings that are heavy-outputs for a given distribution."
msgstr ""

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:739
msgid "Now we generate 10 QV circuits as our dataset."
msgstr "Agora geramos 10 circuitos QV como nosso conjunto de dados."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:766
msgid "Next, we have to determine the heavy-set of each circuit from the ideal answer, and then pass this along to our heavy-set projector function that we defined above."
msgstr "Em seguida, temos que determinar o heavy-set de cada circuito a partir da resposta ideal e, em seguida, passar isso para nossa função de projetor heavy-set que definimos acima."

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:790
msgid "QV circuits have no measurements on them so need to add them:"
msgstr ""

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:811
msgid "With a list of circuits and projection operators we now need only to pass both sets to our above expectation value runner targeting the desired backend. We will also set the best transpiler arguments to give us a sporting chance of getting some passing scores."
msgstr ""

#: ../../tutorials/sample_expval_program/qiskit_runtime_expval_program.ipynb:890
msgid "A passing QV score is one where the value of the heavy-set projector is above :math:`2/3`. So let us see who passed:"
msgstr "Uma pontuação QV de aprovação é aquela em que o valor do projetor heavy-set está acima de :math:`2/3`. Então vamos ver quem passou:"

