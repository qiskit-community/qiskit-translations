msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-24 21:41+0000\n"
"PO-Revision-Date: 2023-10-24 22:17\n"
"Last-Translator: \n"
"Language: mr\n"
"Language-Team: Marathi\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: mr\n"
"X-Crowdin-File: /main/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/vqe_with_estimator.po\n"
"X-Crowdin-File-ID: 9834\n"

#: ../../tutorials/vqe_with_estimator.ipynb:9
msgid "This page was generated from `docs/tutorials/vqe_with_estimator.ipynb`__."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:9
msgid "VQE using Estimator primitive and Sessions"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:21
msgid "Background"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:23
msgid "`Variational quantum algorithms <https://arxiv.org/abs/2012.09265>`__ are promising candidate hybrid-algorithms for observing the utility of quantum computation on noisy near-term devices. Variational algorithms are characterized by the use of a classical optimization algorithm to iteratively update a parameterized trial solution, or \"ansatz\". Chief among these methods is the Variational Quantum Eigensolver (VQE) that aims to solve for the ground state of a given Hamiltonian represented as a linear combination of Pauli terms, with an ansatz circuit where the number of parameters to optimize over is polynomial in the number of qubits. Given that size of the full solution vector is exponential in the number of qubits, successful minimization using VQE requires, in general, additional problem specific information to define the structure of the ansatz circuit."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:26
msgid "Executing a VQE algorithm requires the following 3 components:"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:28
msgid "Hamiltonian and ansatz (problem specification)"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:29
msgid "Qiskit Runtime estimator"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:30
msgid "Classical optimizer"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:32
msgid "Although the Hamiltonian and ansatz require domain specific knowledge to construct, these details are immaterial to the Runtime, and we can execute a wide class of VQE problems in the same manner."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:44
msgid "Setup"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:46
msgid "Here we import the tools needed for a VQE experiment. The primary imports can be grouped logically into three components that correspond to the three required elements."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:86
msgid "Initialize Runtime service and select backend"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:88
msgid "Here we instantiate the Runtime service that gives access to the simulator that we use in this tutorial."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:120
msgid "Problem specification"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:122
msgid "Here we define the problem instance for our VQE algorithm. Although the problem in question can come from a variety of domains, the form for execution through Runtime is the same. Qiskit provides a convenience class for expressing Hamiltonians in Pauli form, and a collection of widely used ansatz circuits in the ``qiskit.circuit.library``."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:124
msgid "Here, our example Hamiltonian is derived from a quantum chemistry problem"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:147
msgid "and our choice of ansatz is the ``EfficientSU2`` that, by default, linearly entangles qubits, making it ideal for quantum hardware with limited connectivity."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:183
msgid "From the previous figure we see that our ansatz circuit is defined by a vector of parameters, :math:`\\theta_{i}`, with the total number given by:"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:231
msgid "VQE cost function and minimization"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:233
msgid "Like many classical optimization problems, the solution to a VQE problem can be formulated as minimization of a scalar cost function. By definition, VQE looks to find the ground state solution to a Hamiltonian by optimizing the ansatz circuit parameters to minimize the expectation value (energy) of the Hamiltonian. With the Runtime ``Estimator`` directly taking a Hamiltonian and parameterized ansatz, and returning the necessary energy, The cost function for a VQE instance is quite simple:"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:267
msgid "Note that, in addition to the array of optimization parameters that must be the first argument, we use additional arguments to pass the terms needed in the cost function."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:278
msgid "We are now free to use a classical optimizer of our choice to minimize our cost function. Here we use the `COBYLA routine from SciPy through the ``minimize`` function <https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html>`__. Note that, when running on real quantum hardware, the choice of optimizer is important as not all optimizers handle noisy cost function landscapes equally well."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:280
msgid "To begin the routine, we start by specifying a random initial set of parameters,"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:301
msgid "and because we are sending a large number of jobs that we would like to execute together, here we use a ``Session`` to execute all the generated circuits in one block. Here ``args`` is the standard SciPy way to supply the additional parameters needed by the cost function."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:324
msgid "At the terminus of this routine we have a result in the standard SciPy ``OptimizeResult`` format. From this we see that it took ``nfev`` number of cost function evaluations to obtain the solution vector of parameter angles (``x``) that, when plugged into the ansatz circuit, yield the approximate ground state solution we were looking for."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:389
msgid "Adding a callback function"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:391
msgid "As it stands now, we are unable to save intermediate results from the iteration process, view the value of the cost function per iteration, nor are we able to monitor the progress of the routine. Callback functions are a standard way for users to obtain additional information about the status of an iterative algorithm. The standard SciPy callback routine allows for returning only the interim vector at each iteration. However, it is possible to do much more than this. Here we show how to use a mutable object, such as a dictionary, to store the current vector at each iteration, for example in case we need to restart the routine due to failure, and also return the current iteration number and average time per iteration."
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:466
msgid "We can now repeat the experiment setting the ``callback`` argument in ``minimize`` with our function:"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:536
msgid "If the procedure terminates correctly, then the ``prev_vector`` and ``iters`` values in our ``callback_dict`` dictionary should be equal to the solution vector and total number of function evaluations, respectively. This is easy to verify:"
msgstr ""

#: ../../tutorials/vqe_with_estimator.ipynb:617
msgid "We can also now view the progress towards convergence as monitored by the cost history at each iteration:"
msgstr ""

