msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-10 16:30+0000\n"
"PO-Revision-Date: 2022-11-10 17:01\n"
"Last-Translator: \n"
"Language-Team: Marathi\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: mr\n"
"X-Crowdin-File: /master/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/vqe.po\n"
"X-Crowdin-File-ID: 9832\n"
"Language: mr_IN\n"

#: ../../tutorials/vqe.ipynb:9
msgid "This page was generated from `docs/tutorials/vqe.ipynb`__."
msgstr ""

#: ../../tutorials/vqe.ipynb:9
msgid "VQE"
msgstr ""

#: ../../tutorials/vqe.ipynb:11
msgid "The Variational Quantum Eigensolver (VQE) is a central algorithm in many applications from e.g. quantum chemistry or optimization. This tutorial shows you how to run the VQE as a Qiskit Runtime program. We’ll start off by defining the algorithm settings, such as the Hamiltonian and ansatz, and then run a VQE both locally, on your machine, and remotely, using the Qiskit Runtime."
msgstr ""

#: ../../tutorials/vqe.ipynb:13
msgid "**Note:** You can find tutorials on solving more comprehensive problems, such as finding the ground state of the lithium hydride molecule, using the VQE (and Qiskit Runtime) within `the tutorials of Qiskit Nature <https://github.com/Qiskit/qiskit-nature/tree/main/docs/tutorials>`__."
msgstr ""

#: ../../tutorials/vqe.ipynb:25
msgid "System Hamiltonian"
msgstr ""

#: ../../tutorials/vqe.ipynb:36
msgid "Let’s start by defining the operator of which we want to determine the ground state. Here we’ll chose a simple diagonal Hamiltonian :math:`\\hat H` acting with Pauli-Z operators on the first two qubits"
msgstr ""

#: ../../tutorials/vqe.ipynb:38
msgid "\\hat H = \\hat Z_0 \\otimes \\hat Z_1."
msgstr ""

#: ../../tutorials/vqe.ipynb:43
msgid "We can construct this Hamiltonian with Qiskit’s ``opflow`` module:"
msgstr ""

#: ../../tutorials/vqe.ipynb:67
msgid "This Hamiltonian has a ground state energy of -1."
msgstr ""

#: ../../tutorials/vqe.ipynb:89
msgid "Parameterized Ansatz Circuit"
msgstr ""

#: ../../tutorials/vqe.ipynb:100
msgid "Next, we choose a parameterized quantum circuit :math:`\\hat U(\\theta)` to prepare the ansatz wavefunction"
msgstr ""

#: ../../tutorials/vqe.ipynb:102
msgid "|\\psi(\\theta)\\rangle = \\hat U(\\theta)|0\\rangle."
msgstr ""

#: ../../tutorials/vqe.ipynb:107
msgid "We’ll use the ``EfficientSU2`` circuit from Qiskit’s circuit library, which is a hardware efficient, heuristic ansatz with alternating rotation and entanglement layers."
msgstr ""

#: ../../tutorials/vqe.ipynb:142
msgid "Solve with the VQE"
msgstr ""

#: ../../tutorials/vqe.ipynb:153
msgid "Now that we have the problem and ansatz specified we can use the Variational Quantum Eigensolver (VQE) to solve for the minimal eigenvalue of our Hamiltonian."
msgstr ""

#: ../../tutorials/vqe.ipynb:155
msgid "The VQE requires a classical optimization routine, along with an initial point, to calculate the parameter updates."
msgstr ""

#: ../../tutorials/vqe.ipynb:182
msgid "To access intermediate information we can pass a callback into the VQE. The callback is given the current number of function evaluations, the current parameters, function values and standard deviation in the expectation evaluation."
msgstr ""

#: ../../tutorials/vqe.ipynb:211
msgid "Local VQE"
msgstr ""

#: ../../tutorials/vqe.ipynb:213
msgid "Before running the Qiskit Runtime VQE program, let’s first simulate this system locally using Qiskit’s ``VQE`` class."
msgstr ""

#: ../../tutorials/vqe.ipynb:291
msgid "With the information from the callback, we can for instance compute the average of the estimation errors in the expectation evaluations. For an exact (statevector) simulation this would be 0, but for a shot-based readout as we have on real hardware, this will be a small finite error."
msgstr ""

#: ../../tutorials/vqe.ipynb:337
msgid "Qiskit Runtime VQE"
msgstr ""

#: ../../tutorials/vqe.ipynb:348
msgid "To call the VQE code on the Qiskit Runtime on the cloud, we interact with the ``run`` method of ``QiskitRuntimeService``:"
msgstr ""

#: ../../tutorials/vqe.ipynb:354
msgid "where"
msgstr ""

#: ../../tutorials/vqe.ipynb:356
msgid "``program_id`` determines the Qiskit Runtime program run, i.e. \\ ``'vqe'`` for the VQE"
msgstr ""

#: ../../tutorials/vqe.ipynb:357
msgid "``inputs`` contains the input for the VQE algorithm"
msgstr ""

#: ../../tutorials/vqe.ipynb:358
msgid "``options`` specifies the backend"
msgstr ""

#: ../../tutorials/vqe.ipynb:359
msgid "``callback`` is the callback used inside the VQE"
msgstr ""

#: ../../tutorials/vqe.ipynb:370
msgid "We start by initializing an account with access to the Qiskit Runtime service and the backend to execute the circuits on"
msgstr ""

#: ../../tutorials/vqe.ipynb:393
msgid "We’re using the ``ibmq_montreal`` device, but you can replace this with another device you have access to."
msgstr ""

#: ../../tutorials/vqe.ipynb:414
msgid "Let’s gather all the inputs to the VQE in a dictionary."
msgstr ""

#: ../../tutorials/vqe.ipynb:442
msgid "The backend options only need to contain the name of the backend."
msgstr ""

#: ../../tutorials/vqe.ipynb:463
msgid "The callback acts a little different than before. Instead of only being passed the VQE callback arguments, it is passed a tuple with the job ID as first argument, followed by the VQE arguments."
msgstr ""

#: ../../tutorials/vqe.ipynb:494
msgid "Now we can call the Qiskit Runtime VQE program. Note, that the result will not be of the same type as ``VQE``, but a plain dictionary."
msgstr ""

