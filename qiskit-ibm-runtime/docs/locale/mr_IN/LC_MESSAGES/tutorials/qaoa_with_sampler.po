msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-05 17:19+0000\n"
"PO-Revision-Date: 2023-08-14 19:53\n"
"Last-Translator: \n"
"Language: mr\n"
"Language-Team: Marathi\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: mr\n"
"X-Crowdin-File: /main/qiskit-ibm-runtime/docs/locale/en/LC_MESSAGES/tutorials/qaoa_with_sampler.po\n"
"X-Crowdin-File-ID: 10007\n"

#: ../../tutorials/qaoa_with_sampler.ipynb:9
msgid "This page was generated from `docs/tutorials/qaoa_with_sampler.ipynb`__."
msgstr ""

#: ../../tutorials/qaoa_with_sampler.ipynb:9
msgid "Quantum Approximate Optimization Algorithm with Sampler primitive"
msgstr ""

#: ../../tutorials/qaoa_with_sampler.ipynb:12
msgid "Overview"
msgstr ""

#: ../../tutorials/qaoa_with_sampler.ipynb:14
msgid "Quantum Approximate Optimization Algorithm (QAOA) is a well-known algorithm for finding approximate solutions to combinatorial-optimization problems. It is a variational algorithm, meaning that it starts with a random guess and then iteratively improves the guess using a feedback loop between a quantum computer and a classical computer."
msgstr ""

#: ../../tutorials/qaoa_with_sampler.ipynb:16
msgid "This tutorial demonstrates using QAOA for a graph partition problem with the Qiskit Runtime ``Sampler`` primitive."
msgstr ""

#: ../../tutorials/qaoa_with_sampler.ipynb:28
msgid "Set up your local development environment"
msgstr ""

#: ../../tutorials/qaoa_with_sampler.ipynb:30
msgid "This tutorial requires a Qiskit Runtime service instance. If you havenâ€™t done so already, follow `these steps <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/getting_started.html>`__ to set one up."
msgstr ""

#: ../../tutorials/qaoa_with_sampler.ipynb:42
msgid "Generate graph"
msgstr ""

#: ../../tutorials/qaoa_with_sampler.ipynb:44
msgid "First we will define an adjacency matrix to represent the graph we want to study. We will use ``rustworkx`` to visualize the graph."
msgstr ""

#: ../../tutorials/qaoa_with_sampler.ipynb:100
msgid "Convert the graph to a Hamiltonian"
msgstr ""

#: ../../tutorials/qaoa_with_sampler.ipynb:102
msgid "The graph partition problem can be converted to an Ising Hamiltonian. Qiskit has different capabilities in the Optimization module to perform this conversion. Since our goal is to show QAOA with ``Sampler``, the module is used without further explanation to create the operator. Review the paper `Ising formulations of many NP problems <https://arxiv.org/abs/1302.5843>`__ to learn more about the technique."
msgstr ""

#: ../../tutorials/qaoa_with_sampler.ipynb:175
msgid "Initialize the service and select a backend"
msgstr ""

#: ../../tutorials/qaoa_with_sampler.ipynb:177
msgid "Next, we will create a service instance and specify a backend. In this example we will use a simulator to avoid queue times, but you can use the following code to run on a real device by simply changing the backend. Note that you will need to specify account credentials if they were not previously saved on disk."
msgstr ""

#: ../../tutorials/qaoa_with_sampler.ipynb:202
msgid "Run QAOA algorithm"
msgstr ""

#: ../../tutorials/qaoa_with_sampler.ipynb:204
msgid "Finally, we will use the QAOA algorithm to find a balanced partition with the least number of crossing edges. We will pass the Qiskit Runtime ``Sampler`` primitive and COBYLA optimizer to the algorithm. Since QAOA is a variational algorithm, we will also run it inside a `session <https://qiskit.org/ecosystem/ibm-runtime/sessions.html>`__ to minimize delays between each iteration."
msgstr ""

