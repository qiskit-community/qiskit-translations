msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-11 01:17+0000\n"
"PO-Revision-Date: 2022-11-11 02:19\n"
"Last-Translator: \n"
"Language-Team: German\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: de\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/11_using_classical_optimization_solvers_and_models.po\n"
"X-Crowdin-File-ID: 9715\n"
"Language: de_DE\n"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:9
msgid "This page was generated from `docs/tutorials/11_using_classical_optimization_solvers_and_models.ipynb`__."
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:9
msgid "Using Classical Optimization Solvers and Models with Qiskit Optimization"
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:20
msgid "We can use classical optimization solvers (CPLEX and Gurobi) with Qiskit Optimization. Docplex and Gurobipy are the Python APIs for CPLEX and Gurobi, respectively. We can load and save an optimization model by Docplex and Gurobipy and can apply CPLEX and Gurobi to ``QuadraticProgram``."
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:22
msgid "If you want to use the CPLEX solver, you need to install ``pip install 'qiskit-optimization[cplex]'``. Docplex is automatically installed, as a dependent, when you install Qiskit Optimization."
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:24
msgid "If you want to use Gurobi and Gurobipy, you need to install ``pip install 'qiskit-optimization[gurobi]'``."
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:26
msgid "Note that these solvers installed via pip are free versions, which have some limitations such as number of variables. Also note that the latest version 20.1 of CPLEX is available only for Python 3.7 and 3.8 as of July 2021. See the following pages for details."
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:28
msgid "https://pypi.org/project/cplex/"
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:29
msgid "https://pypi.org/project/gurobipy/"
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:41
msgid "CplexSolver and GurobiSolver"
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:43
msgid "Qiskit Optimization supports the classical solvers of CPLEX and Gurobi as ``CplexSolver`` and ``GurobiSolver``, respectively. We can solve ``QuadraticProgram`` with ``CplexSolver`` and ``GurobiSolver`` as follows."
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:208
msgid "We can set the solver parameter of CPLEX as follows. We can display the solver message of CPLEX by setting ``disp=True``. See `Parameters of CPLEX <https://www.ibm.com/docs/en/icos/20.1.0?topic=cplex-parameters>`__ for details of CPLEX parameters."
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:299
msgid "We get the same optimal solution by QAOA as follows."
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:385
msgid "Translators between ``QuadraticProgram`` and Docplex/Gurobipy"
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:387
msgid "Qiskit Optimization can load ``QuadraticProgram`` from a Docplex model and a Gurobipy model."
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:389
msgid "First, we define an optimization problem by Docplex and Gurobipy."
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:548
msgid "We can generate ``QuadraticProgram`` object from both Docplex and Gurobipy models. We see that the two ``QuadraticProgram`` objects generated from Docplex and Gurobipy are identical."
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:697
msgid "We can generate a Docplex model and a Gurobipy model from ``QuadraticProgram`` too."
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:847
msgid "Indicator constraints of Docplex"
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:849
msgid "``from_docplex_mp`` supports indicator constraints, e.g., ``u = 0 => x + y <= z`` (u: binary variable) when we convert a Docplex model into ``QuadraticProgram``. It converts indicator constraints into linear constraints using the big-M formulation."
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:960
msgid "Letâ€™s compare the solutions of the model with an indicator constraint by"
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:962
msgid "applying CPLEX directly to the Docplex model (without translating it to ``QuadraticProgram``. CPLEX solver natively supports the indicator constraints),"
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:963
msgid "applying QAOA to ``QuadraticProgram`` obtained by ``from_docplex_mp``."
msgstr ""

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:965
msgid "We see the solutions are same."
msgstr ""

