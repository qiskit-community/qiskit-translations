msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-14 08:10+0000\n"
"PO-Revision-Date: 2023-11-14 08:20\n"
"Last-Translator: \n"
"Language: de\n"
"Language-Team: German\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: de\n"
"X-Crowdin-File: /main/optimization/docs/locale/en/LC_MESSAGES/tutorials/05_admm_optimizer.po\n"
"X-Crowdin-File-ID: 9650\n"

#: ../../tutorials/05_admm_optimizer.ipynb:9
msgid "This page was generated from `docs/tutorials/05_admm_optimizer.ipynb`__."
msgstr "Diese Seite wurde aus ` docs/tutorials/05_admm_optimizer.ipynb ` __ generiert."

#: ../../tutorials/05_admm_optimizer.ipynb:9
msgid "ADMM Optimizer"
msgstr "ADMM-Optimierer"

#: ../../tutorials/05_admm_optimizer.ipynb:21
msgid "Introduction"
msgstr "Einführung"

#: ../../tutorials/05_admm_optimizer.ipynb:32
msgid "The ADMM Optimizer can solve classes of mixed-binary constrained optimization problems, hereafter (MBCO), which often appear in logistic, finance, and operation research. In particular, the ADMM Optimizer here designed can tackle the following optimization problem :math:`(P)`:"
msgstr "Der ADMM Optimizer kann Klassen von Optimierungsproblemen mit gemischt-binären Nebenbedingungen lösen, die häufig in der Logistik, im Finanzwesen und in der Optimierung auftreten. Insbesondere kann der hier entworfene ADMM-Optimierer das folgende Optimierungsproblem :math:`(P)` angehen:"

#: ../../tutorials/05_admm_optimizer.ipynb:34
msgid "\\min_{x \\in \\mathcal{X},u\\in\\mathcal{U} \\subseteq \\mathbb{R}^l } \\quad q(x) + \\varphi(u),"
msgstr "\\min_{x \\in \\mathcal{X},u\\in\\mathcal{U} \\subseteq \\mathbb{R}^l } \\quad q(x) + \\varphi(u),"

#: ../../tutorials/05_admm_optimizer.ipynb:39
msgid "subject to the constraints:"
msgstr "unterliegt den Nebenbedingungen:"

#: ../../tutorials/05_admm_optimizer.ipynb:41
msgid "\\mathrm{s.t.:~} \\quad G x = b, \\quad  g(x) \\leq 0, \\quad \\ell(x, u) \\leq 0,"
msgstr "\\mathrm{s.t.:~} \\quad G x = b, \\quad  g(x) \\leq 0, \\quad \\ell(x, u) \\leq 0,"

#: ../../tutorials/05_admm_optimizer.ipynb:46
msgid "with the corresponding functional assumptions."
msgstr "mit den entsprechenden funktionalen Annahmen."

#: ../../tutorials/05_admm_optimizer.ipynb:48
msgid "Function :math:`q: \\mathbb{R}^n \\to \\mathbb{R}` is quadratic, i.e., :math:`q(x) = x^{\\intercal} Q x + a^{\\intercal} x` for a given symmetric squared matrix :math:`Q \\in \\mathbb{R}^n \\times \\mathbb{R}^n, Q = Q^{\\intercal}`, and vector :math:`a \\in \\mathbb{R}^n`;"
msgstr "Die Funktion :math:` q: \\mathbb{R}^ n \\to \\mathbb{R}` ist quadratisch, d.h. :math:` q (x) = x ^ {\\intercal} Q x + a ^ {\\intercal} x ` für eine gegebene symmetrische quadrierte Matrix :math:` Q \\in \\mathbb{R}^ n \\times \\mathbb{R}^ n, Q = Q ^ {\\intercal} `, und gegebenen Vektor :math:` a \\in \\mathbb{R}^ n `;"

#: ../../tutorials/05_admm_optimizer.ipynb:49
msgid "The set :math:`\\mathcal{X} = \\{0,1\\}^n = \\{x_{(i)} (1-x_{(i)}) = 0, \\forall i\\}` enforces the binary constraints;"
msgstr "Die Menge :math:`\\mathcal{X} = \\{0,1\\}^n = \\{x_{(i)} (1-x_{(i)}) = 0, \\forall i\\}` erzwingen die binären Nebenbedingungen;"

#: ../../tutorials/05_admm_optimizer.ipynb:50
msgid "Matrix :math:`G\\in\\mathbb{R}^n \\times \\mathbb{R}^{n'}`, vector :math:`b \\in \\mathbb{R}^{n'}`, and function :math:`g: \\mathbb{R}^n \\to \\mathbb{R}` is convex;"
msgstr "Die Matrix :math:`G\\in\\mathbb{R}^n \\times \\mathbb{R}^{n'}`, vector :math:`b \\in \\mathbb{R}^{n'}`, und Funktion :math:`g: \\mathbb{R}^n \\to \\mathbb{R}` ist konvex;"

#: ../../tutorials/05_admm_optimizer.ipynb:51
msgid "Function :math:`\\varphi: \\mathbb{R}^l \\to \\mathbb{R}` is convex and :math:`\\mathcal{U}` is a convex set;"
msgstr "Die Funktion :math:`\\varphi: \\mathbb{R}^l \\to \\mathbb{R}` ist konvex und :math:`\\mathcal{U}` ist eine konvexe Menge;"

#: ../../tutorials/05_admm_optimizer.ipynb:52
msgid "Function :math:`\\ell: \\mathbb{R}^n\\times \\mathbb{R}^l \\to \\mathbb{R}` is *jointly* convex in :math:`x, u`."
msgstr "Die Funktion :math:` \\ell: \\mathbb{R}^ n\\times \\mathbb{R}^ l \\to \\mathbb{R}` ist * gemeinsam * konvex in :math:` x, u`."

#: ../../tutorials/05_admm_optimizer.ipynb:63
msgid "In order to solve MBO problems, [1] proposed heuristics for :math:`(P)` based on the Alternating Direction Method of Multipliers (ADMM) [2]. ADMM is an operator splitting algorithm with a long history in convex optimization, and it is known to have residual, objective and dual variable convergence properties, provided that convexity assumptions are holding."
msgstr "Um MBO-Probleme zu lösen, schlug [1] Heuristiken für :math:` (P)` auf Basis der Alternating Direction Method of Multipliers (ADMM) [2]vor. ADMM ist ein Operator-Splitting-Algorithmus mit einer langen Geschichte in der konvexen Optimierung, und es ist bekannt für seine Residuen-, Ziel-und Dual-Variable Konvergenzeigenschaften unter Voraussetzung der Konvexitäts-Annahmen."

#: ../../tutorials/05_admm_optimizer.ipynb:65
msgid "The method of [1] (referred to as 3-ADMM-H) leverages the ADMM operator-splitting procedure to devise a decomposition for certain classes of MBOs into:"
msgstr "Die Methode von [1] (bezeichnet als 3-ADMM-H) nutzt das ADMM-Operator-Splitting-Verfahren, um eine Dekomposition für bestimmte Klassen von MBOs zu entwickeln in:"

#: ../../tutorials/05_admm_optimizer.ipynb:67
msgid "a QUBO subproblem to be solved by on the quantum device via variational algorithms, such as VQE or QAOA;"
msgstr "ein QUBO-Unterproblem, das mit Hilfe von Variationsalgorithmen, wie VQE oder QAOA, auf Quantencomputern gelöst werden kann;"

#: ../../tutorials/05_admm_optimizer.ipynb:68
msgid "continuous convex constrained subproblem, which can be efficiently solved with classical optimization solvers."
msgstr "Unterproblem mit kontinuierlichen konvexen Nebenbedingungen, das mit klassischen Optimierungssolvern effizient gelöst werden kann."

#: ../../tutorials/05_admm_optimizer.ipynb:70
msgid "The algorithm 3-ADMM-H works as follows:"
msgstr "Der Algorithmus 3-ADMM-H arbeitet wie folgt:"

#: ../../tutorials/05_admm_optimizer.ipynb:72
msgid "Initialization phase (set the parameters and the QUBO and convex solvers);"
msgstr "Initialisierungsphase (initialisiert die Parameter und die QUBO und Konvex-Solver);"

#: ../../tutorials/05_admm_optimizer.ipynb:73
msgid "For each ADMM iterations ($k = 1, 2, :nbsphinx-math:`\\ldots`, $) until termination:"
msgstr "Für jede ADMM-Iteration ($k = 1, 2, :nbsphinx-math:` \\ldots `, $) bis zur Beendigung:"

#: ../../tutorials/05_admm_optimizer.ipynb:75
msgid "Solve a properly defined QUBO subproblem (with a classical or quantum solver);"
msgstr "Lösung eines korrekt definiertes QUBO Subproblems (mit einem klassischen oder Quantensolver);"

#: ../../tutorials/05_admm_optimizer.ipynb:76
msgid "Solve properly defined convex problems (with a classical solver);"
msgstr "Lösung eines korrekt definierten konvexen Problemes (mit einem klassischen Solver);"

#: ../../tutorials/05_admm_optimizer.ipynb:77
msgid "Update the dual variables."
msgstr "Aktualisierung der dualen Variablen."

#: ../../tutorials/05_admm_optimizer.ipynb:79
msgid "Return optimizers and cost."
msgstr "Rückgabe des Optimierers und der Kosten."

#: ../../tutorials/05_admm_optimizer.ipynb:81
msgid "A comprehensive discussion on the conditions for convergence, feasibility and optimality of the algorithm can be found in [1]. A variant with 2 ADMM blocks, namely a QUBO subproblem, and a continuous convex constrained subproblem, is also introduced in [1]."
msgstr "Eine umfassende Diskussion der Bedingungen für Konvergenz, Machbarkeit und Optimalität des Algorithmus findet sich in [1]. Eine Variante mit 2 ADMM-Blöcken, nämlich ein QUBO-Unterproblem, und ein Unterproblem mit  kontinuierliche konvexen Nebenbedingungen wird auch in [1] eingeführt."

#: ../../tutorials/05_admm_optimizer.ipynb:84
msgid "References"
msgstr "Referenzen"

#: ../../tutorials/05_admm_optimizer.ipynb:86
msgid "[1] `C. Gambella and A. Simonetto, Multi-block ADMM heuristics for mixed-binary optimization, on classical and quantum computers, arXiv preprint arXiv:2001.02069 (2020). <https://arxiv.org/abs/2001.02069>`__"
msgstr "[1] `C. Gambella and A. Simonetto, Multi-block ADMM heuristics for mixed-binary optimization, on classical and quantum computers, arXiv preprint arXiv:2001.02069 (2020). <https://arxiv.org/abs/2001.02069>`__"

#: ../../tutorials/05_admm_optimizer.ipynb:88
msgid "[2] `S. Boyd, N. Parikh, E. Chu, B. Peleato, and J. Eckstein, Distributed optimization and statistical learning via the alternating direction method of multipliers, Foundations and Trends in Machine learning, 3, 1–122 (2011). <https://web.stanford.edu/~boyd/papers/pdf/admm_distr_stats.pdf>`__"
msgstr "[2] `S. Boyd, N. Parikh, E. Chu, B. Peleato, and J. Eckstein, Distributed optimization and statistical learning via the alternating direction method of multipliers, Foundations and Trends in Machine learning, 3, 1–122 (2011). <https://web.stanford.edu/~boyd/papers/pdf/admm_distr_stats.pdf>`__"

#: ../../tutorials/05_admm_optimizer.ipynb:100
msgid "Initialization"
msgstr "Initialisierung"

#: ../../tutorials/05_admm_optimizer.ipynb:102
msgid "First of all we load all the packages that we need."
msgstr "Zuerst werden alle benötigten Pakete geladen."

#: ../../tutorials/05_admm_optimizer.ipynb:138
msgid "We first initialize all the algorithms we plan to use later in this tutorial."
msgstr "Zuerst werden alle Algorithmen, die später in diesem Tutorial verwendet werden sollen, initialisiert."

#: ../../tutorials/05_admm_optimizer.ipynb:140
msgid "To solve the QUBO problems we can choose between"
msgstr "Um die QUBO-Probleme zu lösen, kann gewählt werden zwischen"

#: ../../tutorials/05_admm_optimizer.ipynb:142
msgid "``MinimumEigenOptimizer`` using different ``MinimumEigensolver``, such as ``SamplingVQE``, ``QAOA`` or ``NumpyMinimumEigensolver`` (classical)"
msgstr "``MinimumEigenOptimizer`` unter Nutzung von verschiedenen ``MinimumEigensolver``, wie ``SamplingVQE``, ``QAOA`` oder ``NumpyMinimumEigensolver`` (klassisch)"

#: ../../tutorials/05_admm_optimizer.ipynb:143
msgid "``GroverOptimizer``"
msgstr "``GroverOptimizer``"

#: ../../tutorials/05_admm_optimizer.ipynb:144
msgid "``CplexOptimizer`` (classical, if CPLEX is installed)"
msgstr "``CplexOptimizer`` (klassisch, wenn CPLEX installiert ist)"

#: ../../tutorials/05_admm_optimizer.ipynb:146
msgid "and to solve the convex continuous problems we can choose between the following classical solvers:"
msgstr "und zur Lösung konvexer kontinuierlicher Probleme können wir zwischen den folgenden klassischen Solvern wählen:"

#: ../../tutorials/05_admm_optimizer.ipynb:148
msgid "``CplexOptimizer`` (if CPLEX is installed)"
msgstr "``CplexOptimizer`` (wenn CPLEX installiert ist)"

#: ../../tutorials/05_admm_optimizer.ipynb:149
msgid "``CobylaOptimizer``"
msgstr "``CobylaOptimizer``"

#: ../../tutorials/05_admm_optimizer.ipynb:151
msgid "In case CPLEX is not available, the ``CobylaOptimizer`` (for convex continuous problems) and the ``MinimumEigenOptimizer`` using the ``NumpyMinimumEigensolver`` (for QUBOs) can be used as classical alternatives to CPLEX for testing, validation, and benchmarking."
msgstr "Falls CPLEX nicht verfügbar ist, können der ``CobylaOptimizer`` (für konvex-kontinuierliche Probleme) und der ``MinimumEigenOptimizer`` mit dem ``NumpyMinimumEigensolver`` (für QUBOs) als klassische Alternativen zu CPLEX zum Testen, zur Validierung und zum Benchmarking verwendet werden."

#: ../../tutorials/05_admm_optimizer.ipynb:185
msgid "Example"
msgstr "Beispiel"

#: ../../tutorials/05_admm_optimizer.ipynb:187
msgid "We test 3-ADMM-H algorithm on a simple Mixed-Binary Quadratic Problem with equality and inequality constraints (Example 6 reported in [1]). We first construct a docplex problem and then load it into a ``QuadraticProgram``."
msgstr "Wir testen den 3-ADMM-H-Algorithmus mit einem einfachen Mixed-Binary Quadratischen Problem mit Gleichheitsnebenbedingungen und Ungleichheitsnebenbedingungen (Beispiel 6 in [1]). Zunächst erstellen wir ein docplex-Problem und laden es dann in ein ``QuadraticProgram``."

#: ../../tutorials/05_admm_optimizer.ipynb:296
msgid "Classical Solution"
msgstr "Klassische Lösung"

#: ../../tutorials/05_admm_optimizer.ipynb:298
msgid "3-ADMM-H needs a QUBO optimizer to solve the QUBO subproblem, and a continuous optimizer to solve the continuous convex constrained subproblem. We first solve the problem classically: we use the ``MinimumEigenOptimizer`` with the ``NumPyMinimumEigenSolver`` as a classical and exact QUBO solver and we use the ``CobylaOptimizer`` as a continuous convex solver. 3-ADMM-H supports any other suitable solver available in Qiskit optimization. For instance, ``SamplingVQE``, ``QAOA``, and ``GroverOptimizer`` can be invoked as quantum solvers, as demonstrated later. If CPLEX is installed, the ``CplexOptimizer`` can also be used as both, a QUBO and convex solver."
msgstr ""

#: ../../tutorials/05_admm_optimizer.ipynb:311
msgid "Parameters"
msgstr "Parameter"

#: ../../tutorials/05_admm_optimizer.ipynb:313
msgid "The 3-ADMM-H are wrapped in class ``ADMMParameters``. Customized parameter values can be set as arguments of the class. In this example, parameters :math:`\\rho, \\beta` are initialized to :math:`1001` and :math:`1000`, respectively. The penalization ``factor_c`` of equality constraints :math:`Gx = b` is set to :math:`900`. The tolerance ``tol`` for primal residual convergence is set to ``1.e-6``. In this case, the 3-block implementation is guaranteed to converge for Theorem 4 of [1], because the inequality constraint with the continuous variable is always active. The 2-block implementation can be run by setting ``three_block=False``, and practically converges to a feasible not optimal solution."
msgstr "Die 3-ADMM-H Parameter befinden sich in der Klasse ``ADMMParameters`` . Individuelle Parameterwerte können als Argumente der Klasse gesetzt werden. In diesem Beispiel werden die Parameter :math:`\\rho, \\beta` mit den Parametern :math:`1001` bzw. :math:`1000` initialisiert. Der Straffaktor ``factor_c`` der Gleichheitsnebenbedingungen :math:`Gx = b` ist auf :math:`900` gesetzt. Die Toleranz ``tol`` für die ursprüngliche Restkonvergenz wird auf ``1.e-6`` gesetzt. In diesem Fall ist die 3-Block-Implementierung für Theorem 4 aus [1] garantiert, da die Ungleichheitsnebenbedingung mit der kontinuierlichen Variable immer aktiv ist. Die 2-Block-Implementierung kann ausgeführt werden, indem ``three_block=False`` gesetzt wird und praktisch zu einer machbaren, nicht optimalen Lösung konvergiert."

#: ../../tutorials/05_admm_optimizer.ipynb:338
msgid "Calling 3-ADMM-H algorithm"
msgstr "Aufruf des 3-ADMM-H Algorithmus"

#: ../../tutorials/05_admm_optimizer.ipynb:340
msgid "To invoke the 3-ADMM-H algorithm, an instance of the ``ADMMOptimizer`` class needs to be created. This takes ADMM-specific parameters and the subproblem optimizers separately into the constructor. The solution returned is an instance of ``OptimizationResult`` class."
msgstr "Um den 3-ADMM-H-Algorithmus aufzurufen, muss eine Instanz der ``ADMMOptimizer`` -Klasse erstellt werden. Dabei werden ADMM-spezifische Parameter und die Subproblemoptimierer separat im Konstruktor verwendet. Bei der zurückgegebenen Lösung handelt es sich um eine Instanz der Klasse ``OptimizationResult``."

#: ../../tutorials/05_admm_optimizer.ipynb:384
msgid "Classical Solver Result"
msgstr "Ergebnis des klassischen Solvers"

#: ../../tutorials/05_admm_optimizer.ipynb:386
msgid "The 3-ADMM-H solution can be then printed and visualized. The ``x`` attribute of the solution contains respectively, the values of the binary decision variables and the values of the continuous decision variables. The ``fval`` is the objective value of the solution."
msgstr "Die 3-ADMM-H Lösung kann dann ausgedruckt und visualisiert werden. Das ``x`` -Attribut der Lösung enthält jeweils die Werte der binären Entscheidungsvariablen und die Werte der kontinuierlichen Entscheidungsvariablen. Der ``fval`` ist der Zielwert der Lösung."

#: ../../tutorials/05_admm_optimizer.ipynb:437
msgid "Solution statistics can be accessed in the ``state`` field and visualized. We here display the convergence of 3-ADMM-H, in terms of primal residuals."
msgstr "Die Lösungsstatistik kann im ``state`` -Feld aufgerufen und visualisiert werden. Wir zeigen hier die Konvergenz von 3-ADMM-H, in Bezug auf primäre Residuen."

#: ../../tutorials/05_admm_optimizer.ipynb:470
msgid "Quantum Solution"
msgstr "Quantenlösung"

#: ../../tutorials/05_admm_optimizer.ipynb:472
msgid "We now solve the same optimization problem with QAOA as QUBO optimizer, running on simulated quantum device. First, one need to select the classical optimizer of the eigensolver QAOA. Then, the simulation backend is set. Finally, the eigensolver is wrapped into the ``MinimumEigenOptimizer`` class. A new instance of ``ADMMOptimizer`` is populated with QAOA as QUBO optimizer."
msgstr "Wir lösen jetzt das gleiche Optimierungsproblem mit QAOA als QUBO Optimierungsprogramm, das auf simulierten Quantcomputern läuft. Zuerst muss man den klassischen Optimierer des Eigensolvers QAOA auswählen. Anschließend wird das Simulations-Backend gesetzt. Schließlich wird der Eigensolver in die ``MinimumEigenOptimizer`` -Klasse eingebettet. Eine neue Instanz von ``ADMMOptimizer`` wird mit QAOA als QUBO-Optimierungsprogramm gefüllt."

#: ../../tutorials/05_admm_optimizer.ipynb:515
msgid "Quantum Solver Results"
msgstr "Ergebnisse des Quantum Solvers"

#: ../../tutorials/05_admm_optimizer.ipynb:517
msgid "Here we present the results obtained from the quantum solver. As in the example above ``x`` stands for the solution, the ``fval`` is for objective value."
msgstr "Hier präsentieren wir die Ergebnisse, die aus dem Quantensolver gewonnen wurden. Wie in dem obigen Beispiel ``x`` steht für die Lösung und ``fval`` steht für den Zielwert."

