msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-11 01:17+0000\n"
"PO-Revision-Date: 2022-11-11 02:48\n"
"Last-Translator: \n"
"Language-Team: Bengali Language\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: bengali\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/03_minimum_eigen_optimizer.po\n"
"X-Crowdin-File-ID: 9646\n"
"Language: bn_BN\n"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:9
msgid "This page was generated from `docs/tutorials/03_minimum_eigen_optimizer.ipynb`__."
msgstr "এই পৃষ্ঠাটি `docs/tutorials/03_minimum_eigen_optimizer.ipynb`__ -থেকে বানানো হয়েছে।"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:9
msgid "Minimum Eigen Optimizer"
msgstr "ন্যূনতম আইজেন অপটিমাইজার"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:21
msgid "Introduction"
msgstr "ভূমিকা"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:32
msgid "An interesting class of optimization problems to be addressed by quantum computing are Quadratic Unconstrained Binary Optimization (QUBO) problems. Finding the solution to a QUBO is equivalent to finding the ground state of a corresponding Ising Hamiltonian, which is an important problem not only in optimization, but also in quantum chemistry and physics. For this translation, the binary variables taking values in :math:`\\{0, 1\\}` are replaced by spin variables taking values in :math:`\\{-1, +1\\}`, which allows one to replace the resulting spin variables by Pauli Z matrices, and thus, an Ising Hamiltonian. For more details on this mapping we refer to [1]."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:35
msgid "Qiskit provides automatic conversion from a suitable ``QuadraticProgram`` to an Ising Hamiltonian, which then allows leveraging all the ``MinimumEigenSolver`` implementations, such as"
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:37
msgid "``VQE``,"
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:38
msgid "``QAOA``, or"
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:39
msgid "``NumpyMinimumEigensolver`` (classical exact method)."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:41
msgid "Qiskit Optimization provides a the ``MinimumEigenOptimizer`` class, which wraps the translation to an Ising Hamiltonian (in Qiskit Terra also called ``Operator``), the call to a ``MinimumEigensolver``, and the translation of the results back to an ``OptimizationResult``."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:43
msgid "In the following we first illustrate the conversion from a ``QuadraticProgram`` to an ``Operator`` and then show how to use the ``MinimumEigenOptimizer`` with different ``MinimumEigensolver``\\ s to solve a given ``QuadraticProgram``. The algorithms in Qiskit automatically try to convert a given problem to the supported problem class if possible, for instance, the ``MinimumEigenOptimizer`` will automatically translate integer variables to binary variables or add linear equality constraints as a quadratic penalty term to the objective. It should be mentioned that a ``QiskitOptimizationError`` will be thrown if conversion of a quadratic program with integer variables is attempted."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:46
msgid "The circuit depth of ``QAOA`` potentially has to be increased with the problem size, which might be prohibitive for near-term quantum devices. A possible workaround is Recursive QAOA, as introduced in [2]. Qiskit generalizes this concept to the ``RecursiveMinimumEigenOptimizer``, which is introduced at the end of this tutorial."
msgstr "``QAOA`` এর সার্কিট গভীরতা সম্ভাব্যভাবে সমস্যার আকারের সাথে বৃদ্ধি করতে হবে, যা নিকট-মেয়াদী কোয়ান্টাম ডিভাইসের জন্য নিষিদ্ধ হতে পারে। একটি সম্ভাব্য সমাধান হল পুনরাবৃত্তিমূলক QAOA, যা [২] -এ চালু করা হয়েছে। কিস্কিট এই ধারণাকে ``RecursiveMinimumEigenOptimizer`` এ সাধারণ করে, যা এই টিউটোরিয়ালের শেষে চালু করা হয়েছে।"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:49
msgid "References"
msgstr "তথ্যসূত্র (রেফারেন্স)"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:51
msgid "[1] `A. Lucas, Ising formulations of many NP problems, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>`__"
msgstr "[১] `A. Lucas, Ising formulations of many NP problems, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>`__"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:53
msgid "[2] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"
msgstr "[২] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:65
msgid "Converting a QUBO to an Operator"
msgstr "একটি QUBO কে অপারেটরে রূপান্তর করা"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:168
msgid "Next we translate this QUBO into an Ising operator. This results not only in an ``Operator`` but also in a constant offset to be taken into account to shift the resulting value."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:237
msgid "Sometimes a ``QuadraticProgram`` might also directly be given in the form of an ``Operator``. For such cases, Qiskit also provides a translator from an ``Operator`` back to a ``QuadraticProgram``, which we illustrate in the following."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:314
msgid "This translator allows, for instance, one to translate an ``Operator`` to a ``QuadraticProgram`` and then solve the problem with other algorithms that are not based on the Ising Hamiltonian representation, such as the ``GroverOptimizer``."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:326
msgid "Solving a QUBO with the MinimumEigenOptimizer"
msgstr "MinimumEigenOptimizer দিয়ে একটি QUBO সমাধান করা"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:337
msgid "We start by initializing the ``MinimumEigensolver`` we want to use."
msgstr "আমরা \"MinimumEigensolver\" দিয়ে শুরু করি যা আমরা ব্যবহার করতে চাই।"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:365
msgid "Then, we use the ``MinimumEigensolver`` to create ``MinimumEigenOptimizer``."
msgstr "তারপরে, আমরা \"MinimumEigenOptimizer\" তৈরি করতে \"MinimumEigensolver\" ব্যবহার করি।"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:387
msgid "We first use the ``MinimumEigenOptimizer`` based on the classical exact ``NumPyMinimumEigensolver`` to get the optimal benchmark solution for this small example."
msgstr "এই ছোট উদাহরণের জন্য সর্বোত্তম মানদণ্ড সমাধান পেতে আমরা প্রথমে শাস্ত্রীয় সঠিক ``NumPyMinimumEigensolver`` এর উপর ভিত্তি করে ``MinimumEigenOptimizer`` ব্যবহার করি।"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:439
msgid "Next we apply the ``MinimumEigenOptimizer`` based on ``QAOA`` to the same problem."
msgstr "পরবর্তীতে আমরা একই সমস্যার জন্য ``QAOA`` এর উপর ভিত্তি করে ``MinimumEigenOptimizer`` প্রয়োগ করি।."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:492
msgid "Analysis of Samples"
msgstr "নমুনা (স্যাম্পল) এর বিশ্লেষণ"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:494
msgid "``OptimizationResult`` provides useful information in the form of ``SolutionSample``\\ s (here denoted as *samples*). Each ``SolutionSample`` contains information about the input values (``x``), the corresponding objective function value (``fval``), the fraction of samples corresponding to that input (``probability``), and the solution ``status`` (``SUCCESS``, ``FAILURE``, ``INFEASIBLE``). Multiple samples corresponding to the same input are consolidated into a single ``SolutionSample`` (with its ``probability`` attribute being the aggregate fraction of samples represented by that ``SolutionSample``)."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:566
msgid "We may also want to filter samples according to their status or probabilities."
msgstr "আমরা তাদের অবস্থা বা সম্ভাব্যতা অনুযায়ী নমুনাগুলি ফিল্টার করতে চাই।"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:656
msgid "If we want to obtain a better perspective of the results, statistics is very helpful, both with respect to the objective function values and their respective probabilities. Thus, mean and standard deviation are the very basics for understanding the results."
msgstr "যদি আমরা ফলাফলের একটি ভাল ধারণা পেতে চাই, পরিসংখ্যান খুব সহায়ক, উভয় নৈর্ব্যক্তিক অন্বয় (অব্জেক্টিভ ফাংশন) মান এবং তাদের নিজ নিজ সম্ভাবনার ক্ষেত্রে। সুতরাং, ফলাফল বোঝার জন্য গড় এবং মান বিচ্যুতি খুবই মৌলিক।"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:748
msgid "Finally, despite all the number-crunching, visualization is usually the best early-analysis approach."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:839
msgid "RecursiveMinimumEigenOptimizer"
msgstr "RecursiveMinimumEigenOptimizer"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:850
msgid "The ``RecursiveMinimumEigenOptimizer`` takes a ``MinimumEigenOptimizer`` as input and applies the recursive optimization scheme to reduce the size of the problem one variable at a time. Once the size of the generated intermediate problem is below a given threshold (``min_num_vars``), the ``RecursiveMinimumEigenOptimizer`` uses another solver (``min_num_vars_optimizer``), e.g., an exact classical solver such as CPLEX or the ``MinimumEigenOptimizer`` based on the ``NumPyMinimumEigensolver``."
msgstr "``RecursiveMinimumEigenOptimizer`` একটি ``MinimumEigenOptimizer`` কে ইনপুট হিসেবে নেয় এবং সমস্যাটির আকার কমিয়ে আনার জন্য পুনরাবৃত্তিমূলক অপ্টিমাইজেশন স্কিম প্রয়োগ করে। একবার উৎপন্ন মধ্যবর্তী সমস্যার আকার একটি নির্দিষ্ট ক্রান্তিমান (``min_num_vars``) এর নিচে হয়ে গেলে, ``RecursiveMinimumEigenOptimizer`` অন্য সমাধানকারী (``min_num_vars_optimizer``) ব্যবহার করে, যেমন, একটি সঠিক শাস্ত্রীয় সমাধানকারী যেমন ``NumPyMinimumEigensolver`` এর উপর ভিত্তি করে CPLEX বা ``MinimumEigenOptimizer``।"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:852
msgid "In the following, we show how to use the ``RecursiveMinimumEigenOptimizer`` using the two ``MinimumEigenOptimizer``\\ s introduced before."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:863
msgid "First, we construct the ``RecursiveMinimumEigenOptimizer`` such that it reduces the problem size from 3 variables to 1 variable and then uses the exact solver for the last variable. Then we call ``solve`` to optimize the considered problem."
msgstr "প্রথমে আমরা ``RecursiveMinimumEigenOptimizer`` তৈরি করবো এমন ভাবে যাতে সমস্যাটা ৩ টি চল রাশি থেকে ১ টা চল রাশি এ নেমে আসে তারপর আমরা ঐ সলভারটাই ব্যবহার করি অন্তিম চল রাশি টার জন্যে। তারপর আমরা ``solve`` কে ডাকি এই সমস্যাটাকে অনুকূলিতকরণ করার জন্যে।"

