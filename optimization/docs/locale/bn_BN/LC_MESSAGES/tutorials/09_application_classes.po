msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-16 13:48+0000\n"
"PO-Revision-Date: 2021-12-16 15:25\n"
"Last-Translator: \n"
"Language-Team: Bengali Language\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: bengali\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/09_application_classes.po\n"
"X-Crowdin-File-ID: 9658\n"
"Language: bn_BN\n"

#: ../../tutorials/09_application_classes.ipynb:9
msgid "This page was generated from `docs/tutorials/09_application_classes.ipynb`__."
msgstr "এই পেজটি `docs/tutorials/09_application_classes.ipynb`__ থেকে তৈরি হয়েছে।"

#: ../../tutorials/09_application_classes.ipynb:9
msgid "Application Classes for Optimization Problems"
msgstr "অপ্টিমাইজেশন সমস্যার জন্য অ্যাপ্লিকেশন ক্লাস"

#: ../../tutorials/09_application_classes.ipynb:21
msgid "Introduction"
msgstr "ভূমিকা"

#: ../../tutorials/09_application_classes.ipynb:23
msgid "We introduce application classes for the following optimization problems so that users can easily try various optimization problems on quantum computers."
msgstr "আমরা নিম্নলিখিত অপ্টিমাইজেশান সমস্যার জন্য অ্যাপ্লিকেশন ক্লাস চালু করি যাতে ব্যবহারকারীরা সহজেই কোয়ান্টাম কম্পিউটারে বিভিন্ন অপ্টিমাইজেশান সমস্যার চেষ্টা করতে পারে।"

#: ../../tutorials/09_application_classes.ipynb:25
msgid "Exact cover problem"
msgstr "Exact কভার সমস্যা"

#: ../../tutorials/09_application_classes.ipynb:27
msgid "Given a collection of subsets of items, find a subcollection such that each item is covered exactly once."
msgstr "আইটেমের উপসেটগুলির একটি সংগ্রহ দেওয়া, একটি উপ -সংগ্রহ খুঁজুন যাতে প্রতিটি আইটেম ঠিক একবার আচ্ছাদিত হয়।"

#: ../../tutorials/09_application_classes.ipynb:29
#: ../../tutorials/09_application_classes.ipynb:432
msgid "Knapsack problem"
msgstr "ন্যাপস্যাক সমস্যা"

#: ../../tutorials/09_application_classes.ipynb:31
msgid "Given a set of items, find a subset of items such that the total weight is within the capacity and the total value is maximized."
msgstr "আইটেমের একটি সেট দেওয়া, আইটেমগুলির একটি উপসেট খুঁজুন যাতে মোট ওজন ধারণক্ষমতার মধ্যে থাকে এবং মোট মান সর্বাধিক হয়।"

#: ../../tutorials/09_application_classes.ipynb:33
msgid "Number partition problem"
msgstr "সংখ্যা বিভাজন সমস্যা"

#: ../../tutorials/09_application_classes.ipynb:35
msgid "Given a multiset of positive integers, find a partition of the multiset into two subsets such that the sums of the subsets are equal."
msgstr "ধনাত্মক পূর্ণসংখ্যার একটি মাল্টিসেট দেওয়া হলে, মাল্টিসেটের একটি বিভাজন দুটি উপসেটগুলিতে খুঁজুন যাতে উপসেটগুলির যোগফল সমান হয়।"

#: ../../tutorials/09_application_classes.ipynb:37
msgid "Set packing problem"
msgstr "সেট প্যাকিং সমস্যা"

#: ../../tutorials/09_application_classes.ipynb:39
msgid "Given a collection of subsets of items, find a subcollection such that all subsets of the subcollection are pairwise disjoint and the number of items in the subcollection is maximized."
msgstr "আইটেমের উপসেটগুলির একটি সংগ্রহ দেওয়া হলে, এমন একটি উপ -সংগ্রহ খুঁজুন যাতে উপ -সংগ্রহের সমস্ত উপগোষ্ঠী জোড়া যুক্ত হয় এবং উপ -সংগ্রহে আইটেমের সংখ্যা সর্বাধিক হয়।"

#: ../../tutorials/09_application_classes.ipynb:41
msgid "Graph problems"
msgstr "গ্রাফ সমস্যা"

#: ../../tutorials/09_application_classes.ipynb:43
msgid "Clique problem"
msgstr "ক্লিকে সমস্যা"

#: ../../tutorials/09_application_classes.ipynb:45
msgid "Given an undirected graph, find a subset of nodes with a specified number or the maximum number such that the induced subgraph is complete."
msgstr "একটি অনির্দেশিত গ্রাফ দেওয়া, একটি নির্দিষ্ট সংখ্যা বা সর্বাধিক সংখ্যক নোডগুলির একটি উপসেট খুঁজুন যাতে প্ররোচিত সাবগ্রাফটি সম্পূর্ণ হয়।"

#: ../../tutorials/09_application_classes.ipynb:47
msgid "Graph partition problem"
msgstr "গ্রাফ পার্টিশন সমস্যা"

#: ../../tutorials/09_application_classes.ipynb:49
msgid "Given an undirected graph, find a partition into two components whose sizes are equal such that the total capacity of the edges between the two components is minimized."
msgstr "একটি অনির্দেশিত গ্রাফ দেওয়া, দুটি অংশে একটি পার্টিশন খুঁজুন যার আকার সমান যে দুটি উপাদানগুলির মধ্যে প্রান্তের মোট ক্ষমতা কমিয়ে আনা হয়।"

#: ../../tutorials/09_application_classes.ipynb:51
msgid "Max-cut problem"
msgstr "সর্বোচ্চ-কাট সমস্যা (Max-Cut problem)"

#: ../../tutorials/09_application_classes.ipynb:53
msgid "Given an undirected graph, find a partition of nodes into two subsets such that the total weight of the edges between the two subsets is maximized."
msgstr "একটি অনির্দেশিত গ্রাফ দেওয়া, দুটি উপসেটগুলিতে নোডের একটি পার্টিশন খুঁজুন যাতে দুটি উপসেটগুলির মধ্যে প্রান্তের মোট ওজন সর্বাধিক হয়।"

#: ../../tutorials/09_application_classes.ipynb:55
msgid "Stable set problem"
msgstr "স্থিত সেট সমস্যা"

#: ../../tutorials/09_application_classes.ipynb:57
msgid "Given an undirected graph, find a subset of nodes such that no edge connects the nodes in the subset and the number of nodes is maximized."
msgstr "একটি অনির্দেশিত গ্রাফ দেওয়া, নোডের একটি উপসেট খুঁজুন যাতে কোন প্রান্ত উপসেটগুলির নোডগুলিকে সংযুক্ত না করে এবং নোডের সংখ্যা সর্বাধিক হয়।"

#: ../../tutorials/09_application_classes.ipynb:59
msgid "Traveling salesman problem"
msgstr "ট্রাভেলিং সেলসম্যান সমস্যা"

#: ../../tutorials/09_application_classes.ipynb:61
msgid "Given a graph, find a route with the minimum distance such that the route visits each city exactly once."
msgstr "একটি গ্রাফ দেওয়া, ন্যূনতম দূরত্ব সহ একটি রুট খুঁজুন যাতে রুটটি প্রতিটি শহরে একবার ঠিক ভিজিট করে।"

#: ../../tutorials/09_application_classes.ipynb:63
msgid "Vehicle routing problem"
msgstr "যানবাহন চলাচলের সমস্যা"

#: ../../tutorials/09_application_classes.ipynb:65
msgid "Given a graph, a depot node, and the number of vehicles (routes), find a set of routes such that each node is covered exactly once except the depot and the total distance of the routes is minimized."
msgstr "একটি গ্রাফ, একটি ডিপো নোড এবং যানবাহনের সংখ্যা (রুট) দেওয়া হলে, রুটগুলির একটি সেট খুঁজুন যাতে প্রতিটি নোড ডিপো ছাড়া ঠিক একবার আচ্ছাদিত হয় এবং রুটগুলির মোট দূরত্ব কম হয়।"

#: ../../tutorials/09_application_classes.ipynb:67
#: ../../tutorials/09_application_classes.ipynb:120
msgid "Vertex cover problem"
msgstr "ভারটেক্স কভার সমস্যা"

#: ../../tutorials/09_application_classes.ipynb:69
msgid "Given an undirected graph, find a subset of nodes with the minimum size such that each edge has at least one endpoint in the subsets."
msgstr "একটি অনির্দেশিত গ্রাফ দেওয়া, ন্যূনতম আকারের নোডগুলির একটি উপসেট খুঁজুন যাতে প্রতিটি প্রান্তের উপসেটগুলিতে কমপক্ষে একটি শেষ বিন্দু থাকে।"

#: ../../tutorials/09_application_classes.ipynb:71
msgid "The application classes for graph problems (``GraphOptimizationApplication``) provide a functionality to draw graphs of an instance and a result. Note that you need to install ``matplotlib`` beforehand to utilize the functionality."
msgstr "গ্রাফ সমস্যার জন্য অ্যাপ্লিকেশন ক্লাস (``GraphOptimizationApplication``) একটি দৃষ্টান্ত এবং ফলাফলের গ্রাফ আঁকার জন্য একটি কার্যকারিতা প্রদান করে। নোট করুন যে কার্যকারিতাটি ব্যবহার করার জন্য আপনাকে আগে থেকেই ``matplotlib`` ইনস্টল করতে হবে।"

#: ../../tutorials/09_application_classes.ipynb:82
msgid "We introduce examples of the vertex cover problem and the knapsack problem in this page."
msgstr "আমরা এই পৃষ্ঠায় ভারটেক্স কভার সমস্যা এবং ন্যাপস্যাক সমস্যার উদাহরণ উপস্থাপন করি।"

#: ../../tutorials/09_application_classes.ipynb:84
msgid "Examples of the max-cut problem and the traveling salesman problem are available in `Max-Cut and Traveling Salesman Problem <06_examples_max_cut_and_tsp.ipynb>`__."
msgstr "ম্যাক্স-কাট সমস্যা এবং ট্রাভেলিং সেলসম্যান সমস্যার উদাহরণ `Max-Cut and Traveling Salesman Problem <06_examples_max_cut_and_tsp.ipynb>`__ তে পাওয়া যায়।"

#: ../../tutorials/09_application_classes.ipynb:95
msgid "We first import packages necessary for application classes."
msgstr "আমরা প্রথমে অ্যাপ্লিকেশন ক্লাসের জন্য প্রয়োজনীয় প্যাকেজ আমদানি করি।"

#: ../../tutorials/09_application_classes.ipynb:122
msgid "We introduce the application class for the vertex cover problem as an example of graph problems. Given an undirected graph, the vertex cover problem asks us to find a subset of nodes with the minimum size such that all edges are covered by any node selected."
msgstr "আমরা গ্রাফ সমস্যার উদাহরণ হিসাবে শিরোনাম কভার সমস্যার জন্য অ্যাপ্লিকেশন ক্লাস চালু করি। একটি অনির্দেশিত গ্রাফ দেওয়া, শিরোনাম কভার সমস্যাটি আমাদেরকে ন্যূনতম আকারের নোডগুলির একটি উপসেট খুঁজে পেতে বলে, যাতে সমস্ত প্রান্তগুলি নির্বাচিত কোনও নোড দ্বারা আবৃত থাকে।"

#: ../../tutorials/09_application_classes.ipynb:124
msgid "We import the application class ``VertexCover`` for the vertex cover problem and ``networkx`` to generate a random graph."
msgstr "আমরা ভারটেক্স কভার সমস্যা এবং ``networkx`` দৈব গ্রাফ তৈরির জন্য অ্যাপ্লিকেশন শ্রেণী ``VertexCover`` আমদানি করি।"

#: ../../tutorials/09_application_classes.ipynb:191
msgid "``VertexCover`` takes a graph as an instance and ``to_quadratic_program`` generates a corresponding ``QuadraticProgram`` of the instance of the vertex cover problem."
msgstr "``VertexCover`` একটি গ্রাফ গ্রহন করে একটি উদাহরণ হিসেবে এবং ``to_quadratic_program`` তৈরি করে একটি অনুরূপ ``QuadraticProgram`` যা ভারটেক্স কভার সমস্যার উদাহরণ তৈরি করে।"

#: ../../tutorials/09_application_classes.ipynb:287
msgid "You can solve the problem as follows. ``NumPyMinimumEigensolver`` finds the minimum eigen vector. You can also apply QAOA. Note that the solution by QAOA is not always optimal."
msgstr "আপনি নিম্নরূপ সমস্যা সমাধান করতে পারেন। ``NumPyMinimumEigensolver`` সর্বনিম্ন eigen ভেক্টর খুঁজে পায়। আপনি QAOA প্রয়োগ করতে পারেন। মনে রাখবেন QAOA দ্বারা সমাধান সবসময় অনুকূল নয়।"

#: ../../tutorials/09_application_classes.ipynb:434
msgid "The knapsack problem asks us to find a combination of items such that the total weight is within the capacity of the knapsack and maximize the total value of the items. The following examples solve an instance of the knapsack problem with 5 items by Numpy eigensolver and QAOA."
msgstr "ন্যাপস্যাক সমস্যাটি আমাদের আইটেমের সংমিশ্রণ খুঁজে পেতে বলে, যাতে মোট ওজন ন্যাপস্যাকের ধারণক্ষমতার মধ্যে থাকে এবং আইটেমের মোট মূল্য সর্বাধিক হয়। নিচের উদাহরণগুলি NumPy eigensolver এবং কিউএওএ দ্বারা 5 টি আইটেমের সাথে ন্যাপস্যাক সমস্যার একটি উদাহরণ সমাধান করে।"

#: ../../tutorials/09_application_classes.ipynb:619
msgid "How to check the Hamiltonian"
msgstr "কিভাবে হ্যামিল্টোনিয়ান চেক করবেন"

#: ../../tutorials/09_application_classes.ipynb:621
msgid "If you want to check the actual Hamiltonian generated from your problem instance, you need to apply a converter as follows."
msgstr "আপনি যদি আপনার সমস্যার উদাহরণ থেকে উৎপন্ন প্রকৃত হ্যামিল্টোনিয়ান পরীক্ষা করতে চান, তাহলে আপনাকে নিম্নরূপ একটি রূপান্তরকারী প্রয়োগ করতে হবে।"

