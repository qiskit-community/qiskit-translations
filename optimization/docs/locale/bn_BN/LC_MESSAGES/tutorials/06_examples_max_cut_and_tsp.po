msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-11 01:17+0000\n"
"PO-Revision-Date: 2022-11-11 02:48\n"
"Last-Translator: \n"
"Language-Team: Bengali Language\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: bengali\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/06_examples_max_cut_and_tsp.po\n"
"X-Crowdin-File-ID: 9652\n"
"Language: bn_BN\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:9
msgid "This page was generated from `docs/tutorials/06_examples_max_cut_and_tsp.ipynb`__."
msgstr "এই পৃষ্ঠাটি `docs/tutorials/06_examples_max_cut_and_tsp.ipynb`__ থেকে বানানো হয়েছে।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:9
msgid "Max-Cut and Traveling Salesman Problem"
msgstr "সর্বোচ্চ লাভ এবং ট্রাভেলিং সেলসম্যান সমস্যা"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:21
msgid "Introduction"
msgstr "ভূমিকা"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:23
msgid "Many problems in quantitative fields such as finance and engineering are optimization problems. Optimization problems lie at the core of complex decision-making and definition of strategies."
msgstr "পরিমাণ ক্ষেত্রের অনেকগুলি সমস্যা যেমন ব্যবস্থাপনাবিদ্যা এবং ইঞ্জিনিয়ারিং হল অনুকূলায়ন (অপ্টিমাইজেশন) সমস্যাসমূহ। অনুকূলায়ন (অপ্টিমাইজেশন) সমস্যাগুলি জটিল সিদ্ধান্ত গ্রহণ এবং কৌশলগুলির সংজ্ঞার মূল ভিত্তিতে থাকে।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:25
msgid "Optimization (or combinatorial optimization) means searching for an optimal solution in a finite or countably infinite set of potential solutions. Optimality is defined with respect to some criterion function, which is to be minimized or maximized. This is typically called cost function or objective function."
msgstr "অপ্টিমাইজেশন (বা সমাবেশীয় অনুকূলায়ন (অপ্টিমাইজেশন)) এর অর্থ সীমাবদ্ধ বা সম্ভাব্য সমাধানের অসীম সেটগুলিতে একটি অনুকূল সমাধান অনুসন্ধান করা। অনুকূলতাটি কিছু মানদণ্ডের ফাংশনের প্রতি সম্মানের সাথে সংজ্ঞায়িত করা হয়, যা ছোট বা সর্বাধিক করতে হবে। একে সাধারণত কস্ট ফাংশন বা নৈর্ব্যক্তিক অন্বয় (অব্জেক্টিভ ফাংশন) বলা হয়।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:27
msgid "**Typical optimization problems**"
msgstr "**সাধারণ অনুকূলায়ন (অপ্টিমাইজেশন) সমস্যাসমূহ**"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:29
msgid "Minimization: cost, distance, length of a traversal, weight, processing time, material, energy consumption, number of objects"
msgstr "হ্রাসকরণ: ব্যয়, দূরত্ব, একটি ট্র্যাভারসাল দৈর্ঘ্য, ওজন, প্রক্রিয়াকরণের সময়, উপাদান, শক্তি খরচ, বস্তুর (অবজেক্ট) সংখ্যা"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:31
msgid "Maximization: profit, value, output, return, yield, utility, efficiency, capacity, number of objects"
msgstr "সর্বাধিকীকরণ: লাভ, মান, আউটপুট, রিটার্ন, ফলন, উপযোগ, দক্ষতা, ক্ষমতা, বস্তুর (অবজেক্ট) সংখ্যা"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:33
msgid "We consider here max-cut problems of practical interest in many fields, and show how they can be mapped on quantum computers manually and how Qiskit’s optimization module supports this."
msgstr "আমরা এখানে অনেক ক্ষেত্রে ব্যবহারিক আগ্রহের সর্বোচ্চ লাভ সমস্যাগুলি বিবেচনা করি এবং দেখি কীভাবে সেগুলি ম্যানুয়ালি কোয়ান্টাম কম্পিউটারগুলিতে ম্যাপ করা যায় এবং কিস্কিটের অপ্টিমাইজেশন মডিউলটি এটি সমর্থন করে।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:36
msgid "Weighted Max-Cut"
msgstr "Weighted Max-Cut"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:38
msgid "Max-Cut is an NP-complete problem, with applications in clustering, network science, and statistical physics. To grasp how practical applications are mapped into given Max-Cut instances, consider a system of many people that can interact and influence each other. Individuals can be represented by vertices of a graph, and their interactions seen as pairwise connections between vertices of the graph, or edges. With this representation in mind, it is easy to model typical marketing problems. For example, suppose that it is assumed that individuals will influence each other’s buying decisions, and knowledge is given about how strong they will influence each other. The influence can be modeled by weights assigned on each edge of the graph. It is possible then to predict the outcome of a marketing strategy in which products are offered for free to some individuals, and then ask which is the optimal subset of individuals that should get the free products, in order to maximize revenues."
msgstr "ক্লাস্টারিং, নেটওয়ার্ক সায়েন্স এবং স্ট্যাটিস্টিকাল ফিজিক্সে অ্যাপ্লিকেশন সহ ম্যাক্স-কাট একটি এনপি-কমপ্লিট সমস্যা। প্রদত্ত ম্যাক্স-কাট দৃষ্টান্তগুলিতে কীভাবে ব্যবহারিক অ্যাপ্লিকেশনগুলি ম্যাপ করা হয় তা বুঝতে, অনেক মানুষ যুক্ত এমন একটি ব্যবস্থা বিবেচনা করুন যারা একে অপরকে যোগাযোগ করতে এবং প্রভাবিত করতে পারে। কোনও গ্রাফের শীর্ষে (vertex) এবং তাদের ইন্টারঅ্যাকশনগুলি গ্রাফের শীর্ষে (vertex) বা প্রান্তগুলির (edge) মধ্যে জোড়াযুক্ত সংযোগ হিসাবে দেখা যায়। এই উপস্থাপনাটিকে মনে রেখে, সাধারণত বিপণনের সমস্যার মডেল করা সহজ। উদাহরণস্বরূপ, ধরুন, যে ব্যক্তিরা একে অপরের ক্রয়ের সিদ্ধান্তকে প্রভাবিত করবে এবং তারা একে অপরকে কতটা শক্তিশালী করবে সে সম্পর্কে জ্ঞান দেওয়া হয়। প্রতিটি প্রান্তে নির্ধারিত ওজন দ্বারা এই প্রভাব টি মডেল করা যেতে পারে। তারপরে এমন বিপণন কৌশলটির ফলাফল সম্পর্কে ভবিষ্যদ্বাণী করা সম্ভব হয় যেখানে কিছু ব্যক্তিকে বিনামূল্যে পণ্য সরবরাহ করা হয়, এবং তারপরে জিজ্ঞাসা করা হয় যে আয়গুলি সর্বাধিকতর করার জন্য নিখরচায় পণ্যগুলি পাওয়া উচিত এমন ব্যক্তিদের সর্বোত্তম সাবসেট টি কোনটি।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:41
msgid "The formal definition of this problem is the following:"
msgstr "এই সমস্যার আনুষ্ঠানিক সংজ্ঞাটি হল:"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:43
msgid "Consider an :math:`n`-node undirected graph *G = (V, E)* where *\\|V\\| = n* with edge weights :math:`w_{ij}>0`, :math:`w_{ij}=w_{ji}`, for :math:`(i, j)\\in E`. A cut is defined as a partition of the original set V into two subsets. The cost function to be optimized is in this case the sum of weights of edges connecting points in the two different subsets, *crossing* the cut. By assigning :math:`x_i=0` or :math:`x_i=1` to each node :math:`i`, one tries to maximize the global profit function (here and in the following summations run over indices 0,1,…n-1)"
msgstr "একটি :math:`n` নোড পুনর্নির্দেশিত গ্রাফ *G = (V, E)* বিবেচনা করুন যেখানে *\\|V\\| = n* জন্য প্রান্তের ওজন :math:`w_{ij}>0`, :math:`w_{ij}=w_{ji}` , সহ :math:`(i, j)\\in E`। একটি কাট দুটি সাব সেট এর মূল সেট V এর পার্টিশন হিসাবে সংজ্ঞায়িত করা হয়। অনুকূলিতকরণের জন্য কাট টি ক্রস করে ব্যয় ফাংশনটি এই ক্ষেত্রে দুটি পৃথক উপধারায় সংযোগকারী পয়েন্টের ওজনগুলির যোগফল। প্রতিটি নোডে :math:`x_i=0` বা :math:`x_i=1` নির্ধারণের মাধ্যমে :math:`i`, একজন সামগ্রিক লাভের ফাংশন সর্বাধিক করার চেষ্টা করে (এখানে এবং নিচের সংক্ষেপে সূচকগুলির উপরে 0,1,… n -1 চালানো হয়)"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:46
msgid "\\tilde{C}(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j).\n\n"
msgstr "\\tilde{C}(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j) ।\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:48
msgid "In our simple marketing model, :math:`w_{ij}` represents the probability that the person :math:`j` will buy a product after :math:`i` gets a free one. Note that the weights :math:`w_{ij}` can in principle be greater than :math:`1` (or even negative), corresponding to the case where the individual :math:`j` will buy more than one product. Maximizing the total buying probability corresponds to maximizing the total future revenues. In the case where the profit probability will be greater than the cost of the initial free samples, the strategy is a convenient one. An extension to this model has the nodes themselves carry weights, which can be regarded, in our marketing model, as the likelihood that a person granted with a free sample of the product will buy it again in the future. With this additional information in our model, the objective function to maximize becomes"
msgstr "আমাদের সাধারণ বিপণন মডেলটিতে, :math:`w_{ij}` এই সম্ভাব্যতা উপস্থাপন করে যে :math:`j` ব্যক্তি :math:`i` ফ্রি পাওয়ার পরে কোনও পণ্য কিনবে। নোট করুন যে ওজন :math:`w_{ij}` নীতিগতভাবে :math:`1` (বা এমনকি নেতিবাচক) এর চেয়েও বেশি হতে পারে, সেই ক্ষেত্রে যেখানে পৃথক :math:`j` একাধিক পণ্য কেনে। মোট কেনার সম্ভাব্যতা সর্বাধিকীকরণ মোট ভবিষ্যতের আয়কে সর্বাধিক করার সাথে মিলে যায়। এই মডেলটির একটি বর্ধনের সাথে নোডগুলি ওজন বহন করে, যা আমাদের বিপণনের মডেল হিসাবে বিবেচনা করা যেতে পারে, সম্ভাবনা হিসাবে পণ্যটির একটি নিখরচায় নমুনা দেওয়া কোনও ব্যক্তি ভবিষ্যতে আবার কিনবে। আমাদের মডেলটিতে এই অতিরিক্ত তথ্য সহ, সর্বাধিকীকরণের অব্জেক্টিভ ফাংশনটি হয়ে ওঠে।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:51
msgid "C(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j)+\\sum_i w_i x_i.\n\n"
msgstr "C(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j)+\\sum_i w_i x_i ।\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:53
msgid "In order to find a solution to this problem on a quantum computer, one needs first to map it to an Ising Hamiltonian. This can be done with the assignment :math:`x_i\\rightarrow (1-Z_i)/2`, where :math:`Z_i` is the Pauli Z operator that has eigenvalues :math:`\\pm 1`. Doing this we find that"
msgstr "কোয়ান্টাম কম্পিউটারে এই সমস্যার সমাধানের জন্য, প্রথমে একটি আইসিং হ্যামিলটনিয়ানকে এটির ম্যাপিং করা উচিত। এটি অ্যাসাইনমেন্ট :math:`x_i\\rightarrow (1-Z_i)/2` সহ করা যেতে পারে, যেখানে :math:`Z_i` i হ'ল পাওলি Z অপারেটর যার আইগেনভ্যালু :math:`\\pm 1`। এটি করে আমরা এটি খুঁজে পাই"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:55
msgid "C(\\textbf{Z}) = \\sum_{i,j} \\frac{w_{ij}}{4} (1-Z_i)(1+Z_j) + \\sum_i \\frac{w_i}{2} (1-Z_i) = -\\frac{1}{2}\\left( \\sum_{i<j} w_{ij} Z_i Z_j +\\sum_i w_i Z_i\\right)+\\mathrm{const},\n\n"
msgstr "C(\\textbf{Z}) = \\sum_{i,j} \\frac{w_{ij}}{4} (1-Z_i)(1+Z_j) + \\sum_i \\frac{w_i}{2} (1-Z_i) = -\\frac{1}{2}\\left( \\sum_{i<j} w_{ij} Z_i Z_j +\\sum_i w_i Z_i\\right)+\\mathrm{const},\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:57
msgid "where :math:`\\mathrm{const} = \\sum_{i<j}w_{ij}/2+\\sum_i w_i/2`. In other terms, the weighted Max-Cut problem is equivalent to minimizing the Ising Hamiltonian"
msgstr "যেখানে :math:`\\mathrm{const} = \\sum_{i<j}w_{ij}/2+\\sum_i w_i/2। অন্য কথায়, ওয়েটেড সর্বোচ্চ লাভ সমস্যাটি আইসিং হ্যামিলটনিয়ানকে হ্রাস করার সমতুল্য"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:59
msgid "H = \\sum_i w_i Z_i + \\sum_{i<j} w_{ij} Z_iZ_j.\n\n"
msgstr "H = \\sum_i w_i Z_i + \\sum_{i<j} w_{ij} Z_iZ_j.\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:61
msgid "Qiskit’s optimization module can generate the Ising Hamiltonian for the first profit function :math:`\\tilde{C}`. To this extent, function :math:`\\tilde{C}` can be modeled as a ``QuadraticProgram``, which provides the ``to_ising()`` method."
msgstr "Qiskit অপ্টিমাইজেশন মডিউলটি প্রথম লাভ ফাংশন :math:`\\tilde{C}`-র জন্য আইসিং হ্যামিলটোনিয়ান তৈরি করতে পারে। এই পরিমাণে, ফাংশন :math:`\\tilde{C}` একটি ``QuadraticProgram`` হিসাবে মডেল করা হবে, যা ``to_ising ()`` পদ্ধতি সরবরাহ করে।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:64
msgid "Approximate Universal Quantum Computing for Optimization Problems"
msgstr "অপ্টিমাইজেশন সমস্যার জন্য আনুমানিক ইউনিভার্সাল কোয়ান্টাম কম্পিউটিং"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:66
msgid "There has been a considerable amount of interest in recent times about the use of quantum computers to find a solution to combinatorial optimization problems. It is important to say that, given the classical nature of combinatorial problems, exponential speedup in using quantum computers compared to the best classical algorithms is not guaranteed. However, due to the nature and importance of the target problems, it is worth investigating heuristic approaches on a quantum computer that could indeed speed up some problem instances. Here we demonstrate an approach that is based on the *Quantum Approximate Optimization Algorithm* (QAOA) by Farhi, Goldstone, and Gutmann (2014). We frame the algorithm in the context of *approximate quantum computing*, given its heuristic nature."
msgstr "সমাবেশীয় অনুকূলায়ন (অপ্টিমাইজেশন) সমস্যাসমূহর সমাধানের জন্য কোয়ান্টাম কম্পিউটার ব্যবহার সম্পর্কে সাম্প্রতিক সময়ে যথেষ্ট পরিমাণে আগ্রহ তৈরি হয়েছে। বলা বাহুল্য যে, সমাবেশ সমস্যাগুলির প্রথাগত (ক্লাসিক্যাল) প্রকৃতির পরিপ্রেক্ষিতে, সর্বোত্তম প্রথাগত (ক্লাসিক্যাল) অ্যালগরিদমের তুলনায় কোয়ান্টাম কম্পিউটার ব্যবহারে সূচকীয় গতির গ্যারান্টি নেই। যাইহোক, লক্ষ্য (টার্গেট) সমস্যার প্রকৃতি এবং গুরুত্বের কারণে, এটি কোয়ান্টাম কম্পিউটারে হিউরিস্টিক পন্থাগুলি তদন্তের জন্য মূল্যবান যা প্রকৃতপক্ষে কিছু সমস্যাগুলির উদাহরণগুলিকে গতিতে পারে। এখানে আমরা এমন একটি পদ্ধতির প্রদর্শন করি যা ফারহি, গোল্ডস্টোন এবং গুটম্যান (২০১৪) দ্বারা *কোয়ান্টাম আনুমানিক অপ্টিমাইজেশন অ্যালগরিদম* (কিউ.এ.ও.এ.) এর উপর ভিত্তি করে। আমরা আলগরিদমকে *আনুমানিক কোয়ান্টাম কম্পিউটিং* এর প্রাসঙ্গিক আকারে এর ফ্রেমযুক্ত প্রকৃতির উপর ভিত্তি করে ফ্রেম করি।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:69
msgid "The algorithm works as follows:"
msgstr "অ্যালগরিদম টি নিম্নলিখিত উপায়ে কাজ করে :"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:71
msgid "Choose the :math:`w_i` and :math:`w_{ij}` in the target Ising problem. In principle, even higher powers of Z are allowed."
msgstr "টার্গেট আইসিং সমস্যা: :math:`w_i` এবং :math:`w_{ij}` চয়ন করুন। নীতিগতভাবে, Z-র উচ্চতর ক্ষমতাগুলিও অনুমোদিত।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:73
msgid "Choose the depth of the quantum circuit :math:`m`. Note that the depth can be modified adaptively."
msgstr "কোয়ান্টাম সার্কিট :math:`m -র গভীরতা চয়ন করুন। টীকা: গভীরতাটি অভিযোজিতভাবে সংশোধন করা যেতে পারে।."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:75
msgid "Choose a set of controls :math:`\\theta` and make a trial function :math:`|\\psi(\\boldsymbol\\theta)\\rangle`, built using a quantum circuit made of C-Phase gates and single-qubit Y rotations, parameterized by the components of :math:`\\boldsymbol\\theta`."
msgstr "কনট্রোল :math:`\\theta` এর একটি সেট চয়ন করুন এবং সি-ফেজ ( C-Phase ) গেটস এবং একক কিউবিট ওয়াই (Y) রোটেশনগুলির তৈরি কোয়ান্টাম সার্কিট ব্যবহার করে তৈরি করে ট্রায়াল ফাংশন :math:`|\\psi(\\boldsymbol\\theta)\\rangle` করুন, যা :math:`\\boldsymbol\\theta` এর উপাদানগুলি দ্বারা প্যারামিটারাইজড |"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:77
msgid "Evaluate"
msgstr "মূল্যায়ন"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:79
msgid "C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)~|H|~\\psi(\\boldsymbol\\theta)\\rangle = \\sum_i w_i \\langle\\psi(\\boldsymbol\\theta)~|Z_i|~\\psi(\\boldsymbol\\theta)\\rangle+ \\sum_{i<j} w_{ij} \\langle\\psi(\\boldsymbol\\theta)~|Z_iZ_j|~\\psi(\\boldsymbol\\theta)\\rangle\n\n"
msgstr "C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)~|H|~\\psi(\\boldsymbol\\theta)\\rangle = \\sum_i w_i \\langle\\psi(\\boldsymbol\\theta)~|Z_i|~\\psi(\\boldsymbol\\theta)\\rangle+ \\sum_{i<j} w_{ij} \\langle\\psi(\\boldsymbol\\theta)~|Z_iZ_j|~\\psi(\\boldsymbol\\theta)\\rangle\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:81
msgid "by sampling the outcome of the circuit in the Z-basis and adding the expectation values of the individual Ising terms together. In general, different control points around :math:`\\boldsymbol\\theta` have to be estimated, depending on the classical optimizer chosen."
msgstr "জেড-বেসিস সার্কিটের ফলাফল নমুনা করে এবং পৃথক আইসিং পদগুলির প্রত্যাশা মানগুলি একসাথে যুক্ত করে। সাধারণভাবে, নির্বাচিত প্রথাগত (ক্লাসিক্যাল) অনুকূলায়ক এর উপর নির্ভর করে, :math:`\\boldsymbol\\theta এর চারপাশের বিভিন্ন নিয়ন্ত্রণ পয়েন্টগুলি অনুমান করতে হবে।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:83
msgid "Use a classical optimizer to choose a new set of controls."
msgstr "নতুন সেট নিয়ন্ত্রণ চয়ন করতে একটি প্রথাগত (ক্লাসিক্যাল) অনুকূলায়ক বা অপ্টিমাইজার ব্যবহার করুন।."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:85
msgid "Continue until :math:`C(\\boldsymbol\\theta)` reaches a minimum, close enough to the solution :math:`\\boldsymbol\\theta^*`."
msgstr "যতক্ষণ না :math:`C(\\boldsymbol\\theta)` ন্যূনতমে পৌঁছে যায়, যা কিনা :math:`\\boldsymbol\\theta^*` সমাধানের জন্য খুব কাছাকাছি, ততক্ষন চালিয়ে যান।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:87
msgid "Use the last :math:`\\boldsymbol\\theta` to generate a final set of samples from the distribution :math:`|\\langle z_i~|\\psi(\\boldsymbol\\theta)\\rangle|^2\\;\\forall i` to obtain the answer."
msgstr "শেষ :math:`\\boldsymbol\\theta` ব্যবহার করুন :math:`\\Big|\\langle z_i\\big|\\psi(\\boldsymbol\\theta)\\rangle\\Big|^2\\;\\forall i` বণ্টন থেকে অন্তিম নমুনা (স্যাম্পল) সমূহ উৎপন্ন করে উত্তর পাওয়ার জন্যে।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:89
msgid "It is our belief the difficulty of finding good heuristic algorithms will come down to the choice of an appropriate trial wavefunction. For example, one could consider a trial function whose entanglement best aligns with the target problem, or simply make the amount of entanglement a variable. In this tutorial, we will consider a simple trial function of the form"
msgstr "এটি আমাদের বিশ্বাস যে ভাল হিউরিস্টিক অ্যালগরিদমগুলি খুঁজে পেতে অসুবিধাটি একটি উপযুক্ত ট্রায়াল ওয়েভ ফাংশন পছন্দে একীভূত হবে। উদাহরণস্বরূপ, কেউ একটি ট্রায়াল ফাংশন বিবেচনা করতে পারে যার এনট্যাঙ্গেলমেন্ট, লক্ষ্য সমস্যাটির সাথে সর্বোত্তমভাবে প্রান্তিক হয় বা কেবল এনট্যাঙ্গেলমেন্ট হওয়ার পরিমাণকে পরিবর্তনশীল করে তোলে। এই টিউটোরিয়ালে, আমরা ফর্মটির একটি সাধারণ ট্রায়াল ফাংশন বিবেচনা করব"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:91
msgid "|\\psi(\\theta)\\rangle  = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m |+\\rangle\n\n"
msgstr "|\\psi(\\theta)\\rangle  = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m |+\\rangle\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:93
msgid "where :math:`U_\\mathrm{entangler}` is a collection of C-Phase gates (fully entangling gates), and :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^n Y(\\theta_{i})`, where :math:`n` is the number of qubits and :math:`m` is the depth of the quantum circuit. The motivation for this choice is that for these classical problems this choice allows us to search over the space of quantum states that have only real coefficients, still exploiting the entanglement to potentially converge faster to the solution."
msgstr "যেখানে :math:`U_\\mathrm{entangler}` হল সি-ফেজ গেটস (সম্পূর্ণরূপে এনট্যাঙ্গেল বা পরিসাংখ্যিক যোগাযোগ বা বিজড়িত দরজা) এবং :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^n Y(\\theta_{i})`, যেখানে :math:`n` কিউবিট সংখ্যা এবং :math:`m` কোয়ান্টাম সার্কিটের গভীরতা। এই পছন্দটির অনুপ্রেরণা হ'ল, এই প্রথাগত (ক্লাসিক্যাল) সমস্যার জন্য এটি কোয়ান্টাম স্টেটের যে স্থানগুলিতে কেবল প্রকৃত সহগ রয়েছে তার সন্ধানের অনুমতি দেয়, তবুও সম্ভাব্যভাবে সমাধানে আরও দ্রুত রূপান্তরিত করতে এনট্যাঙ্গেলমেন্ট প্রবণতাটিকে কাজে লাগিয়ে।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:96
msgid "One advantage of using this sampling method compared to adiabatic approaches is that the target Ising Hamiltonian does not have to be implemented directly on hardware, allowing this algorithm not to be limited to the connectivity of the device. Furthermore, higher-order terms in the cost function, such as :math:`Z_iZ_jZ_k`, can also be sampled efficiently, whereas in adiabatic or annealing approaches they are generally impractical to deal with."
msgstr "অ্যাডিয়াব্যাটিক পদ্ধতির তুলনায় এই স্যাম্পলিং পদ্ধতিটি ব্যবহার করার একটি সুবিধা হল টার্গেট আইসিং হ্যামিল্টনিয়ানকে সরাসরি হার্ডওয়্যারে প্রয়োগ করা উচিত নয়, এই অ্যালগরিদমটিকে ডিভাইসের সংযোগের মধ্যে সীমাবদ্ধ না। তদুপরি, ব্যয় কার্যক্রমে উচ্চতর অর্ডার শর্তাদি, যেমন :math:`Z_iZ_jZ_k , এগুলিও দক্ষতার সাথে নমুনাযুক্ত করা যেতে পারে, যেখানে অ্যাডিয়াব্যাটিক বা অ্যানিলিং পদ্ধতির ক্ষেত্রে তারা সাধারণত মোকাবেলা করতে অযৌক্তিক হয়।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:98
msgid "References:"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:100
msgid "A. Lucas, Frontiers in Physics 2, 5 (2014)"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:101
msgid "E. Farhi, J. Goldstone, S. Gutmann, e-print arXiv 1411.4028 (2014)"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:102
msgid "D. Wecker, M. B. Hastings, M. Troyer, Phys. Rev. A 94, 022309 (2016)"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:103
msgid "E. Farhi, J. Goldstone, S. Gutmann, H. Neven, e-print arXiv 1703.06199 (2017)"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:115
msgid "Application classes"
msgstr "অ্যাপ্লিকেশন ক্লাস"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:117
msgid "We use the application classes for the max-cut problem and the traveling salesman problem in this page. There are application classes for other optimization problems available as well. See `Application Classes for Optimization Problems <09_application_classes.ipynb>`__ for details."
msgstr "আমরা সর্বোচ্চ লাভ সমস্যা ও ভ্রাম্যমান বিক্রেতার সমস্যার জন্য অ্যাপ্লিকেশন ক্লাস ব্যবহার করতে পারি। অন্যান্য অনুকূলায়ন (অপ্টিমাইজেশন) সমস্যাসমূহর জন্য আরো অ্যাপ্লিকেশন ক্লাস আছে। বিস্তারিত জানতে `Application Classes for Optimization Problems <09_application_classes.ipynb>`__ দেখ।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:153
msgid "Max-Cut problem"
msgstr "সর্বোচ্চ লাভ সমস্যা (Max-Cut problem)"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:253
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:912
msgid "Brute force approach"
msgstr "ব্রুট ফোর্স পদ্ধতি"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:255
msgid "Try all possible :math:`2^n` combinations. For :math:`n = 4`, as in this example, one deals with only 16 combinations, but for n = 1000, one has 1.071509e+30 combinations, which is impractical to deal with by using a brute force approach."
msgstr "সমস্ত সম্ভাব্য :math:`2^n সমন্বয় চেষ্টা করুন। যেমন :math:`n = 4`, উদাহরণস্বরূপ, একজন কেবলমাত্র 16 টি সংমিশ্রণের সাথে ডিল করে তবে n = 1000 এর জন্য একটিতে 1.071509e + 30 সংমিশ্রণ রয়েছে, যা ব্রুট ফোর্স পদ্ধতির ব্যবহার করে মোকাবেলা করা অযৌক্তিক।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:375
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1015
msgid "Mapping to the Ising problem"
msgstr "আইসিং সমস্যার ম্যাপিং (চিত্রায়ন)"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:386
msgid "Qiskit provides functionality to generate ``QuadraticProgram`` from the problem specification as well as create the corresponding Ising Hamiltonian."
msgstr "Qiskit সমস্যা বিবরণ থেকে ``QuadraticProgram`` তৈরি করতে এবং সম্পর্কিত আইসিং হ্যামিল্টোনিয়ান বানাতে প্রয়োজনীয় কার্যকারিতা সরবরাহ করে।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:564
msgid "Since the problem was cast to a minimization problem, the solution of :math:`-4` corresponds to the optimum."
msgstr "যেহেতু সমস্যাটি একটি মিনিমাইজেশন সমস্যার জন্য ফেলে দেওয়া হয়েছিল, তাই :math:`-4` সমাধানটি সর্বোত্তমের সাথে মিলে যায়।."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:576
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1342
msgid "Checking that the full Hamiltonian gives the right cost"
msgstr "সম্পূর্ণ হ্যামিল্টোনিয়ান সঠিক ব্যয় দেয় তা পরীক্ষা করা হচ্ছে"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:651
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1420
msgid "Running it on quantum computer"
msgstr "কোয়ান্টাম কম্পিউটারে চালানো"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:653
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1422
msgid "We run the optimization routine using a feedback loop with a quantum computer that uses trial functions built with Y single-qubit rotations, :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^n Y(\\theta_{i})`, and entangler steps :math:`U_\\mathrm{entangler}`."
msgstr "আমরা কোয়ান্টাম কম্পিউটারের সাথে ফিডব্যাক লুপ ব্যবহার করে অপ্টিমাইজেশন রুটিন চালাই যা Y একক-কিউবিট ঘূর্ণন, :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^n Y(\\theta_{i})`, এবং এন্ট্যাঙ্গলারের ধাপগুলি :math:`U_\\mathrm{entangler}` এর সাহায্যে নির্মিত ট্রায়াল ফাংশন ব্যবহার করে।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:808
msgid "Traveling Salesman Problem"
msgstr "ট্রাভেলিং সেলসম্যান সমস্যা"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:810
msgid "In addition to being a notorious NP-complete problem that has drawn the attention of computer scientists and mathematicians for over two centuries, the Traveling Salesman Problem (TSP) has important bearings on finance and marketing, as its name suggests. Colloquially speaking, the traveling salesman is a person that goes from city to city to sell merchandise. The objective in this case is to find the shortest path that would enable the salesman to visit all the cities and return to its hometown, i.e. the city where he started traveling. By doing this, the salesman gets to maximize potential sales in the least amount of time."
msgstr "দুই শতাব্দীরও বেশি সময় ধরে কম্পিউটার বিজ্ঞানী এবং গণিতবিদদের দৃষ্টি আকর্ষণ করে এমন একটি কুখ্যাত এনপি-সম্পূর্ণ সমস্যা হওয়ার পাশাপাশি, ট্র্যাভেলিং সেলসম্যান প্রব্লেম (টি.এস.পি) এর অর্থ এবং বিপণনের ক্ষেত্রে গুরুত্বপূর্ণ ভারবহন রয়েছে। কথোপকথনের ভাষায়, ট্র্যাভেলিং সেলসম্যান এমন ব্যক্তি যিনি শহর থেকে শহরে পণ্যদ্রব্য বিক্রয় করতে যান। এক্ষেত্রে উদ্দেশ্যটি হ'ল সংক্ষিপ্ততম পথটি সন্ধান করা যা বিক্রয়কেন্দ্রকে সমস্ত শহর ঘুরে দেখার এবং তার শহরে ফিরে যেতে সক্ষম করবে, অর্থাৎ যে শহরে সে যাত্রা শুরু করেছিল। এটি করার মাধ্যমে বিক্রয়কটি সর্বনিম্ন সময়ে সম্ভাব্য বিক্রয় সর্বাধিক অর্জন করতে পারে।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:813
msgid "The problem derives its importance from its “hardness” and ubiquitous equivalence to other relevant combinatorial optimization problems that arise in practice."
msgstr "অনুশীলনে উত্থাপিত অন্যান্য প্রাসঙ্গিক সমন্বয়মূলক সমস্যাগুলির সাথে এর \"কঠোরতা\" (\"hardness\") এবং সর্বব্যাপী সমতা থেকে সমস্যাটি তার গুরুত্ব অর্জন করে।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:815
msgid "The mathematical formulation with some early analysis was proposed by W.R. Hamilton in the early 19th century. Mathematically the problem is, as in the case of Max-Cut, best abstracted in terms of graphs. The TSP on the nodes of a graph asks for the shortest *Hamiltonian cycle* that can be taken through each of the nodes. A Hamilton cycle is a closed path that uses every vertex of a graph once. The general solution is unknown and an algorithm that finds it efficiently (e.g., in polynomial time) is not expected to exist."
msgstr "কিছু প্রাথমিক বিশ্লেষণের সাথে গাণিতিক সূত্রটি ডাব্লু.আর. হ্যামিল্টন ১৯ শতকের গোড়ার দিকে প্রস্তাব করেছিলেন। গাণিতিকভাবে সমস্যাটি হ'ল ম্যাক্স-কাটের গ্রাফের ক্ষেত্রে সবচেয়ে ভাল বিমূর্ত। কোনও গ্রাফের নোডের টিএসপি সর্বনিম্ন * হ্যামিলটোনিয়ান চক্র * যা প্রতিটি নোডের মধ্য দিয়ে নেওয়া যায় তা জিজ্ঞাসা করে। একটি হ্যামিল্টোনিয়ান চক্র এমন একটি বদ্ধ পথ যা একবারে গ্রাফের প্রতিটি প্রান্তকে একবার ব্যবহার করে। সাধারণ সমাধানটি অজানা এবং একটি অ্যালগরিদম (উদাঃ, বহু-কালীন সময়ে) এর উপস্থিতি প্রত্যাশিত নয় যা কার্যকরভাবে এটি খুঁজে পায় ।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:818
msgid "Find the shortest Hamiltonian cycle in a graph :math:`G=(V,E)` with :math:`n=|V|` nodes and distances, :math:`w_{ij}` (distance from vertex :math:`i` to vertex :math:`j`). A Hamiltonian cycle is described by :math:`N^2` variables :math:`x_{i,p}`, where :math:`i` represents the node and :math:`p` represents its order in a prospective cycle. The decision variable takes the value 1 if the solution occurs at node :math:`i` at time order :math:`p`. We require that every node can only appear once in the cycle, and for each time a node has to occur. This amounts to the two constraints (here and in the following, whenever not specified, the summands run over 0,1,…N-1)"
msgstr ":math:`n=|V|` নোড এবং দূরত্ব :math:`w_{ij}` (ভার্টেক্স :math:`i` থেকে ভার্টেক্স :math:`j` দূরত্ব) সহ একটি গ্রাফ :math:`G=(V,E)`তে সংক্ষিপ্ততম হ্যামিলটোনিয়ান চক্রটি সন্ধান করুন। একটি হ্যামিলটোনিয়ান চক্র math:`N^2` চল রাশি (ভেরিয়েবল) math:`N^2` দ্বারা বর্ণিত হয়, যেখানে :math:`i` নোডকে উপস্থাপন করে এবং :math:`p সম্ভাব্য চক্রের মধ্যে তার ক্রমটি উপস্থাপন করে। সময় ক্রম :math:`p তে নোড :math:`i` এ সমাধান ঘটে তবে সিদ্ধান্ত ভেরিয়েবলের মান ১ হয়। আমাদের প্রয়োজন যে প্রতিটি নোড কেবল চক্রের মধ্যে একবার উপস্থিত হতে পারে এবং প্রতিটি বারের জন্য একটি নোড ঘটতে হয়। এটি দুটি সীমাবদ্ধতার পরিমান (এখানে এবং নীচে, যখনই নির্দিষ্ট করা হয়নি, যোগফলগুলি ০,১ থেকে,… এন -1)"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:821
msgid "\\sum_{i} x_{i,p} = 1 ~~\\forall p\n\n"
msgstr "\\sum_{i} x_{i,p} = 1 ~~\\forall p\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:823
msgid "\\sum_{p} x_{i,p} = 1 ~~\\forall i.\n\n"
msgstr "\\sum_{p} x_{i,p} = 1 ~~\\forall i।\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:825
msgid "For nodes in our prospective ordering, if :math:`x_{i,p}` and :math:`x_{j,p+1}` are both 1, then there should be an energy penalty if :math:`(i,j) \\notin E` (not connected in the graph). The form of this penalty is"
msgstr "আমাদের সম্ভাব্য ক্রমান্বয়ে নোডের জন্য, :math:`x_{i,p}` এবং :math:`x_{j,p+1}`  উভয়ই যদি  ১ হয় তবে সেখানে শক্তির জরিমানা থাকতে হবে যদি: :math:`(i,j) \\notin E` (গ্রাফের সাথে সংযুক্ত নয়)। এই জরিমানার ফর্মটি হ'ল"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:827
msgid "\\sum_{i,j\\notin E}\\sum_{p} x_{i,p}x_{j,p+1}>0,\n\n"
msgstr "\\sum_{i,j\\notin E}\\sum_{p} x_{i,p}x_{j,p+1}>0,\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:829
msgid "where it is assumed the boundary condition of the Hamiltonian cycles :math:`(p=N)\\equiv (p=0)`. However, here it will be assumed a fully connected graph and not include this term. The distance that needs to be minimized is"
msgstr "যেখানে এটি হ্যামিল্টোনিয়ান চক্র :math:`(p=N)\\equiv (p=0)` সীমানা শর্ত হিসাবে ধরে নেওয়া হয়। তবে, এখানে এটি সম্পূর্ণ সংযুক্ত গ্রাফ হিসাবে ধরে নেওয়া হবে এবং এই পদটি অন্তর্ভুক্ত করা হবে না। যে দূরত্বটি হ্রাস করা দরকার তা হ'ল"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:831
msgid "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}.\n\n"
msgstr "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}।\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:833
msgid "Putting this all together in a single objective function to be minimized, we get the following:"
msgstr "এগুলি হ্রাস করতে একটি একক নৈর্ব্যক্তিক অন্বয় (অব্জেক্টিভ ফাংশন) একসাথে রাখলে আমরা নিম্নলিখিতটি পাই:"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:835
msgid "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}+ A\\sum_p\\left(1- \\sum_i x_{i,p}\\right)^2+A\\sum_i\\left(1- \\sum_p x_{i,p}\\right)^2,\n\n"
msgstr "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}+ A\\sum_p\\left(1- \\sum_i x_{i,p}\\right)^2+A\\sum_i\\left(1- \\sum_p x_{i,p}\\right)^2,\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:837
msgid "where :math:`A` is a free parameter. One needs to ensure that :math:`A` is large enough so that these constraints are respected. One way to do this is to choose :math:`A` such that :math:`A > \\mathrm{max}(w_{ij})`."
msgstr "যেখানে :math:`A` একটি নিখরচায় প্যারামিটার। একজনকে নিশ্চিত করতে হবে যে :math:`A` যথেষ্ট বড় যাতে এই প্রতিবন্ধকতাগুলি সম্মানিত হয়। এটি করার একটি উপায় হ'ল :math:`A`কে এমন চয়ন করা যাতে :math:`A > \\mathrm{max}(w_{ij})` ।"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:839
msgid "Once again, it is easy to map the problem in this form to a quantum computer, and the solution will be found by minimizing a Ising Hamiltonian."
msgstr "আবারও, এই আকারে সমস্যাটি একটি কোয়ান্টাম কম্পিউটারে ম্যাপ করা সহজ, এবং একটি আইসিং হ্যামিলটনিয়ানকে হ্রাস করে সমাধানটি পাওয়া যাবে।"

