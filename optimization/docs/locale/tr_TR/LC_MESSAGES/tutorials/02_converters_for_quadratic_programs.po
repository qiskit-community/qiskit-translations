msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-18 16:26+0000\n"
"PO-Revision-Date: 2021-08-18 17:07\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/02_converters_for_quadratic_programs.po\n"
"X-Crowdin-File-ID: 9644\n"
"Language: tr_TR\n"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:9
msgid "This page was generated from `docs/tutorials/02_converters_for_quadratic_programs.ipynb`__."
msgstr "Bu sayfa, `docs/tutorials/02_converters_for_quadratic_programs.ipynb`__ sayfasından oluşturulmuştur."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:9
msgid "Converters for Quadratic Programs"
msgstr "İkinci Dereceden Programlar için Dönüştürücüler"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:20
msgid "Optimization problems in Qiskit’s optimization module are represented with the ``QuadraticProgram`` class, which is generic and powerful representation for optimization problems. In general, optimization algorithms are defined for a certain formulation of a quadratic program and we need to convert our problem to the right type."
msgstr "Qiskit'in optimizasyon modülündeki optimizasyon problemleri, optimizasyon problemleri için genel ve güçlü bir temsil olan ``QuadraticProgram`` sınıfı ile temsil edilir. Genel olarak, karesel bir programın belirli bir formülasyonu için optimizasyon algoritmaları tanımlanır ve problemimizi doğru türe dönüştürmemiz gerekir."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:22
msgid "For instance, Qiskit provides several optimization algorithms that can handle Quadratic Unconstrained Binary Optimization (QUBO) problems. These are mapped to Ising Hamiltonians, for which Qiskit uses the ``qiskit.aqua.operators`` module, and then their ground state is approximated. For this optimization commonly known algorithms such as VQE or QAOA can be used as underlying routine. See the following tutorial about the `Minimum Eigen Optimizer <./03_minimum_eigen_optimizer.ipynb>`__ for more detail. Note that also other algorithms exist that work differently, such as the ``GroverOptimizer``."
msgstr "Örneğin, Qiskit, Karesel Kısıtsız İkili Optimizasyon (QUBO) problemlerini işleyebilen birkaç optimizasyon algoritması sağlar. Bunlar, Qiskit'in ``qiskit.aqua.operators`` modülünü kullandığı Ising Hamiltonyenleri ile eşleştirilir ve ardından temel durumlarına yaklaşılır. Bu optimizasyon için, temel rutin olarak VQE veya QAOA gibi yaygın olarak bilinen algoritmalar kullanılabilir. Daha fazla ayrıntı için `Minimum Eigen Optimizer <./03_minimum_eigen_optimizer.ipynb>`__ hakkında aşağıdaki eğiticiye bakın. ``GroverOptimizer`` gibi farklı çalışan başka algoritmaların da bulunduğunu unutmayın."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:25
msgid "To map a problem to the correct input format, the optimization module of Qiskit offers a variety of converters. In this tutorial we’re providing an overview on this functionality. Currently, Qiskit contains the following converters. - ``InequalityToEquality``: converts inequality constraints into equality constraints with additional slack variables. - ``IntegerToBinary``: converts integer variables into binary variables and corresponding coefficients. - ``LinearEqualityToPenalty``: convert equality constraints into additional terms of the object function. - ``QuadraticProgramToQubo``: a wrapper for ``InequalityToEquality``, ``IntegerToBinary``, and ``LinearEqualityToPenalty`` for convenience."
msgstr "Bir sorunu doğru giriş biçimiyle eşleştirmek için Qiskit'in optimizasyon modülü çeşitli dönüştürücüler sunmaktadır. Bu eğitselde bu işlevselliğe genel bir bakış sağlıyoruz. Şu ana dek, Qiskit aşağıdaki dönüştürücüleri içermektedir. - ``InequalityToEquality``: eşitsizlik kısıtlamalarını ek gevşek değişkenlerle eşitlik kısıtlamalarına dönüştürür - ``IntegerToBinary``: tam sayı (integer) değişkenlerini, ikili sistem (binary) değişkenlerine ve karşılık gelen kat sayılara dönüştürür. - ``LinearEqualityToPenalty``: eşitlik kısıtlamalarını amaç fonksiyonunun ek terimlerine dönüştürür. - ``QuadraticProgramToQubo``: kolaylık sağlamak için ``InequalityToEquality``, ``IntegerToBinary`` ve ``LinearEqualityToPenalty`` dönüştürücülerine uygun bir sarıcıdır."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:38
msgid "InequalityToEquality"
msgstr "InequalityToEquality"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:40
msgid "``InequalityToEqualityConverter`` converts inequality constraints into equality constraints with additional slack variables to remove inequality constraints from ``QuadraticProgram``. The upper bounds and the lower bounds of slack variables will be calculated from the difference between the left sides and the right sides of constraints. Signs of slack variables depend on symbols in constraints such as :math:`\\leq` and :math:`\\geq`."
msgstr "``InequalityToEqualityConverter``, eşitsizlik kısıtlamalarını ``QuadraticProgram``dan eşitsizlik kısıtlamalarını kaldırmak için ek durağan değişkenlerle eşitlik kısıtlamalarına dönüştürür. Durağan değişkenlerin üst sınırları ve alt sınırları, kısıtlamaların sol tarafları ile sağ tarafları arasındaki farktan hesaplanacaktır. Durağan değişkenlerin işaretleri, :math:`\\leq` ve :math:`\\geq` gibi kısıtlamalardaki sembollere bağlıdır."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:42
msgid "The following is an example of a maximization problem with two inequality constraints. Variable :math:`x` and :math:`y` are binary variables and variable :math:`z` is an integer variable."
msgstr "Aşağıdaki, iki eşitsizlik kısıtlaması olan bir maksimizasyon probleminin bir örneğidir. Değişken :math:`x` ve :math:`y` ikili değişkenlerdir ve değişken :math:`z` bir tamsayı değişkendir."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:56
msgid "With ``QuadraticProgram``, an optimization model of the problem is written as follows."
msgstr "``QuadraticProgram`` ile bu problemin optimizasyon modeli aşağıdaki gibi yazılır."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:156
msgid "Call ``convert`` method of ``InequalityToEquality`` to convert."
msgstr "Dönüştürmek için ``InequalityToEquality`` nin ``convert`` yöntemini çağırın."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:254
msgid "After converting, the formulation of the problem looks like as the follows. As we can see, the inequality constraints are replaced with equality constraints with additional integer slack variables, :math:`xyz\\_leg\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack`."
msgstr "Dönüştürdükten sonra, problemin formülasyonu aşağıdaki gibi görünür. Görebildiğimiz gibi eşitsizlik kısıtlamalarının yeri, ek tam sayı gevşek değişkenleri :math:`xyz\\_leg\\text{@}int\\_slack` ve :math:`xyz\\_geq\\text{@}int\\_slack` sayesinde eşitlik kısıtlamalarının yeri ile değiştirildi."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:256
msgid "Let us explain how the conversion works. For example, the lower bound of the left side of the first constraint is :math:`0` which is the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Thus, the upperbound of the additional integer variable must be :math:`5` to be able to satisfy even the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Note that we cut off the part after the decimal point in the converted formulation since the left side of the first constraint in the original formulation can be only integer values. For the second constraint, basically we apply the same approach. However, the symbol in the second constraint is :math:`\\geq`, so we add minus before :math:`xyz\\_geq\\text{@}int\\_slack` to be able to satisfy even the case of :math:`x=1, y=1`, and :math:`z=7`."
msgstr "Haydi bu dönüşümün nasıl çalıştığını açıklayalım. Örneğin, ilk kısıtlamanın sol tarafının alt sınırı, :math:`x=0`, :math:`y=0` ve :math:`z=0` durumu olan :math:`0` dir. Bu yüzden, ek tam sayı değişkeninin üst sınırı, :math:`x=0`, :math:`y=0` ve :math:`z=0` durumunu bile karşılayabilmek için :math:`5` olmalıdır. Asıl formülasyondaki ilk kısıtlamanın sol tarafı sadece tam sayı değeri olabileceği için dönüştürülen formülasyonda ondalık noktadan sonraki kısmı kestiğimizi unutmayın. Temelde ikinci kısıtlama için aynı yaklaşımı uyguluyoruz. Ancak, ikinci kısıtlamadaki simge :math:`\\geq`, bu yüzden :math:`x=1, y=1` ve :math:`z=7` durumunu bile karşılayabilmek için :math:`xyz\\_geq\\text{@}int\\_slack` den önce eksi (-) ekliyoruz."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:283
msgid "IntegerToBinary"
msgstr "IntegerToBinary"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:294
msgid "``IntegerToBinary`` converts integer variables into binary variables and coefficients to remove integer variables from ``QuadraticProgram``. For converting, bounded-coefficient encoding proposed in `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Eq. (5)) is used. For more detail of the encoding method, please see the paper."
msgstr "``IntegerToBinary`` dönüştürücüsü, ``QuadraticProgram`` dan tam sayı değişkenlerini kaldırmak için tam sayı değişkenlerini ikili sistem değişkenlerine ve katsayılara dönüştürürmektedir. Dönüşüm için, önerilen sınırlı-katsayı kodlaması (encoding) `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Eq. (5)) kullanılır. Kodlama yöntemi hakkında detaylı bilgi için lütfen makaleyi inceleyiniz."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:296
msgid "We use the output of ``InequalityToEquality`` as starting point. Variable :math:`x` and :math:`y` are binary variables, while the variable :math:`z` and the slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` are integer variables. We print the problem again for reference."
msgstr "Başlangıç noktası olarak ``InequalityToEquality`` dönüştürücüsünün çıktısını kullanıyoruz. :math:`z` değişkeni, :math:`xyz\\_leq\\text{@}int\\_slack` ve :math:`xyz\\_geq\\text{@}int\\_slack` gevşek değişkenleri, tam sayı değişkenleri iken :math:`x` ve :math:`y` ikili sistem değişkenleridir. Kaynak göstermek için problemi tekrar yazdırıyoruz."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:382
msgid "Call ``convert`` method of ``IntegerToBinary`` to convert."
msgstr "Dönüştürmek için ``InequalityToEquality`` dönüştürücüsünün ``convert`` yöntemini çağırın."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:492
msgid "After converting, integer variables :math:`z` is replaced with three binary variables :math:`z\\text{@}0`, :math:`z\\text{@}1` and :math:`z\\text{@}2` with coefficients 1, 2 and 4, respectively as the above. The slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` that were introduced by ``InequalityToEquality`` are also both replaced with three binary variables with coefficients 1, 2, 2, and 1, 2, 3, respectively."
msgstr "Dönüştürdükten sonra, tam sayı değişkeni :math:`z` nin yeri, aşağıdaki şekilde sırasıyla 1, 2 ve 4 katsayılarıyla birlikte üç ikili sistem değişkeni :math:`z\\text{@}0`, :math:`z\\text{@}1` ve :math:`z\\text{@}2` nin yeri ile değiştirilir. ``InequalityToEquality`` ile tanıtılan gevşek değişkenler :math:`xyz\\_leq\\text{@}int\\_slack` ve :math:`xyz\\_geq\\text{@}int\\_slack` nin yerleri de sırasıyla 1, 2, 2 ve 1, 2, 3 katsayılarıyla birlikte üç ikili sistem değişkeninin yeri ile değiştirilir."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:494
msgid "Note: Essentially the coefficients mean that the sum of these binary variables with coefficients can be the sum of a subset of :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, and :math:`\\{1, 2, 3\\}` to represent that acceptable values :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}`, and :math:`\\{0, \\ldots, 6\\}`, which respects the lower bound and the upper bound of original integer variables correctly."
msgstr "Not: Aslında katsayılar, asıl tam sayı değişkenlerinin üst ve alt sınırlarına doğru bir şekilde karşılık gelen kabul edilebilir :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}` ve :math:`\\{0, \\ldots, 6\\}` değerlerini temsil etmek için :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}` ve :math:`\\{1, 2, 3\\}` durumunun bir alt kümesinin toplamı olabilen katsayılarla birlikte ikili sistem değişkenlerinin toplamı anlamına gelir."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:496
msgid "``IntegerToBinary`` also provides ``interpret`` method that is the functionality to translate a given binary result back to the original integer representation."
msgstr "``IntegerToBinary`` ayrıca, verilen ikili sistem sonucunu asıl tam sayı gösterimine geri çevirmek için bir işlevsellik olan ``interpret`` yöntemini de sağlar."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:508
msgid "LinearEqualityToPenalty"
msgstr "LinearEqualityToPenalty"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:519
msgid "``LinearEqualityToPenalty`` converts linear equality constraints into additional quadratic penalty terms of the objective function to map ``QuadraticProgram`` to an unconstrained form. An input to the converter has to be a ``QuadraticProgram`` with only linear equality constraints. Those equality constraints, e.g. \\ :math:`\\sum_i a_i x_i = b` where :math:`a_i` and :math:`b` are numbers and :math:`x_i` is a variable, will be added to the objective function in the form of :math:`M(b - \\sum_i a_i x_i)^2` where :math:`M` is a large number as penalty factor. By default :math:`M= 1e5`. The sign of the term depends on whether the problem type is a maximization or minimization."
msgstr "``LinearEqualityToPenalty`` ``QuadraticProgram`` ı kısıtsız bir form ile eşlemek için doğrusal eşitlik kısıtlamalarını, amaç fonksiyonunun ek ikinci dereceden ceza terimlerine dönüştürür. Dönüştürücü girdisi sadece doğrusal eşitlik kısıtlamaları ile bir ``QuadraticProgram`` olmalıdır. Şu eşitlik kısıtlamaları, örneğin :math:`a_i` ve :math:`b` nin sayı ve :math:`x_i` nin değişken olduğu durumdaki :math:`\\sum_i a_i x_i = b` , :math:`M` nin ceza faktörü olarak büyük bir sayı olduğu yerde amaç fonksiyonuna :math:`M(b - \\sum_i a_i x_i)^2` biçiminde eklenecektir. Varsayılan olarak :math:`M= 1e5`. Terimin işareti, problem türünün çoklama ya da azlama olmasına bağlıdır."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:522
msgid "We use the output of ``IntegerToBinary`` as starting point, where all variables are binary variables and all inequality constraints have been mapped to equality constraints. We print the problem again for reference."
msgstr "Bütün değişkenlerin ikili sistem değişkenleri olduğu ve bütün eşitsizlik kısıtlamalarının eşitlik kısıtlamalarına eşlendiği yerde başlangıç noktası olarak ``IntegerToBinary`` dönüştürücüsünün çıktısını kullanıyoruz. Kaynak olması için problemi tekrar yazdırıyoruz."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:620
msgid "Call ``convert`` method of ``LinearEqualityToPenalty`` to convert."
msgstr "Dönüştürmek için ``LinearEqualityToPenalty`` nin ``convert`` yöntemini çağırın."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:774
msgid "After converting, the equality constraints are added to the objective function as additional terms with the default penalty factor :math:`M=1e5`. The resulting problem is now a QUBO and compatible with many quantum optimization algorithms such as VQE, QAOA and so on."
msgstr "Dönüştürdükten sonra, eşitlik kısıtlaması varsayılan ceza faktörü :math:`M=1e5` ile birlikte ek terimler olarak amaç fonksiyonuna eklenir. Ortaya çıkan problem şimdi bir QUBO (Quadratic Unconstrained Binary Optimization)'dur ve VQE, QAOA ve benzeri birçok kuantum optimizasyon algoritması ile uyumludur."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:785
msgid "This gives the same result as before."
msgstr "Bu daha öncekiyle aynı sonucu verir."

