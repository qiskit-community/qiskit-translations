msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-30 14:36+0000\n"
"PO-Revision-Date: 2022-03-30 15:01\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/06_examples_max_cut_and_tsp.po\n"
"X-Crowdin-File-ID: 9652\n"
"Language: tr_TR\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:9
msgid "This page was generated from `docs/tutorials/06_examples_max_cut_and_tsp.ipynb`__."
msgstr "Bu sayfa, `docs/tutorials/06_examples_max_cut_and_tsp.ipynb`__ sayfasından oluşturulmuştur."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:9
msgid "Max-Cut and Traveling Salesman Problem"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:21
msgid "Introduction"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:23
msgid "Many problems in quantitative fields such as finance and engineering are optimization problems. Optimization problems lie at the core of complex decision-making and definition of strategies."
msgstr "Finans ve mühendislik gibi niceliksel alanlarda pek çok sorun optimizasyon sorunlarıdır. Optimizasyon sorunları karmaşık karar alma ve stratejilerin tanımlarının temelinde yatıyor."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:25
msgid "Optimization (or combinatorial optimization) means searching for an optimal solution in a finite or countably infinite set of potential solutions. Optimality is defined with respect to some criterion function, which is to be minimized or maximized. This is typically called cost function or objective function."
msgstr "Optimizasyon (veya kombinatoryal optimizasyon), sonlu veya sayılabilir sonsuz potansiyel çözümler kümesinde en uygun çözümü aramak anlamına gelir. Optimallik, minimize veya maksimize edilecek olan bazı kriter fonksiyonuna göre tanımlanır. Buna genellikle maliyet fonksiyonu veya amaç fonksiyonu denir."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:27
msgid "**Typical optimization problems**"
msgstr "**Tipik optimizasyon sorunları**"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:29
msgid "Minimization: cost, distance, length of a traversal, weight, processing time, material, energy consumption, number of objects"
msgstr "Minimizasyon: maliyet, mesafe, geçiş uzunluğu, ağırlık, işlem süresi, malzeme, enerji tüketimi, nesne sayısı"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:31
msgid "Maximization: profit, value, output, return, yield, utility, efficiency, capacity, number of objects"
msgstr "Maksimizasyon: kar, değer, çıktı, getiri, verim, fayda, verimlilik, kapasite, nesne sayısı"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:33
msgid "We consider here max-cut problems of practical interest in many fields, and show how they can be mapped on quantum computers manually and how Qiskit’s optimization module supports this."
msgstr "Burada birçok alanda pratik ilgi çeken maksimum kesim problemlerini ele alıyoruz ve bunların kuantum bilgisayarlarda manuel olarak nasıl haritalanabileceğini ve Qiskit'in optimizasyon modülünün bunu nasıl desteklediğini gösteriyoruz."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:36
msgid "Weighted Max-Cut"
msgstr "Ağırlıklı Maksimum Kesim"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:38
msgid "Max-Cut is an NP-complete problem, with applications in clustering, network science, and statistical physics. To grasp how practical applications are mapped into given Max-Cut instances, consider a system of many people that can interact and influence each other. Individuals can be represented by vertices of a graph, and their interactions seen as pairwise connections between vertices of the graph, or edges. With this representation in mind, it is easy to model typical marketing problems. For example, suppose that it is assumed that individuals will influence each other’s buying decisions, and knowledge is given about how strong they will influence each other. The influence can be modeled by weights assigned on each edge of the graph. It is possible then to predict the outcome of a marketing strategy in which products are offered for free to some individuals, and then ask which is the optimal subset of individuals that should get the free products, in order to maximize revenues."
msgstr "Max-Cut, kümeleme, ağ bilimi ve istatistiksel fizikteki uygulamalarla NP-tam bir problemdir. Pratik uygulamaların belirli Max-Cut örnekleriyle nasıl eşleştirildiğini anlamak için, etkileşimde bulunabilen ve birbirini etkileyebilen birçok insandan oluşan bir sistem düşünün. Bireyler, bir grafiğin köşeleri ile temsil edilebilir ve etkileşimleri, grafiğin köşeleri veya kenarları arasındaki ikili bağlantılar olarak görülebilir. Bu temsili akılda tutarak, tipik pazarlama problemlerini modellemek kolaydır. Örneğin, bireylerin birbirlerinin satın alma kararlarını etkileyeceği varsayıldığını ve birbirlerini ne kadar güçlü etkileyeceği hakkında bilgi verildiğini varsayalım. Etki, grafiğin her bir kenarına atanan ağırlıklarla modellenebilir. Bu durumda, ürünlerin bazı bireylere ücretsiz olarak sunulduğu bir pazarlama stratejisinin sonucunu tahmin etmek ve daha sonra gelirleri maksimize etmek için ücretsiz ürünleri alması gereken bireylerin en uygun alt kümesinin hangisi olduğunu sormak mümkündür."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:41
msgid "The formal definition of this problem is the following:"
msgstr "Bu sorunun düzgün tanımı şudur:"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:43
msgid "Consider an :math:`n`-node undirected graph *G = (V, E)* where *\\|V\\| = n* with edge weights :math:`w_{ij}>0`, :math:`w_{ij}=w_{ji}`, for :math:`(i, j)\\in E`. A cut is defined as a partition of the original set V into two subsets. The cost function to be optimized is in this case the sum of weights of edges connecting points in the two different subsets, *crossing* the cut. By assigning :math:`x_i=0` or :math:`x_i=1` to each node :math:`i`, one tries to maximize the global profit function (here and in the following summations run over indices 0,1,…n-1)"
msgstr "Bir :math:`n`-node yönsüz grafiğini düşünün *G = (V, E)* burada *\\|V\\| = n* kenar ağırlıkları ile :math:`w_{ij}>0`, :math:`w_{ij}=w_{ji}`, for :math:`(i, j)\\in E`. Bir kesim, orijinal V kümesinin iki alt kümeye bölünmesi olarak tanımlanır. Bu durumda optimize edilecek maliyet fonksiyonu, iki farklı alt kümedeki noktaları birleştiren kenarların ağırlıklarının toplamıdır, kesimi *keser*. Her bir :math:`i düğümüne :math:`x_i=0` veya :math:`x_i=1` atayarak, kişi global kar fonksiyonunu maksimize etmeye çalışır (burada ve aşağıdaki toplamlarda 0,1 indeksleri üzerinden geçilir) ,…n-1)"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:46
msgid "\\tilde{C}(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j).\n\n"
msgstr "\\tilde{C}(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j).\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:48
msgid "In our simple marketing model, :math:`w_{ij}` represents the probability that the person :math:`j` will buy a product after :math:`i` gets a free one. Note that the weights :math:`w_{ij}` can in principle be greater than :math:`1` (or even negative), corresponding to the case where the individual :math:`j` will buy more than one product. Maximizing the total buying probability corresponds to maximizing the total future revenues. In the case where the profit probability will be greater than the cost of the initial free samples, the strategy is a convenient one. An extension to this model has the nodes themselves carry weights, which can be regarded, in our marketing model, as the likelihood that a person granted with a free sample of the product will buy it again in the future. With this additional information in our model, the objective function to maximize becomes"
msgstr "Basit pazarlama modelimizde, :math:`w_{ij}`, :math:`j` adlı kişinin :math:`i` bedava bir ürün aldıktan sonra bir ürün satın alma olasılığını temsil eder. :math:`w_{ij}` ağırlıklarının prensipte :math:`1` (hatta negatif) değerinden daha büyük olabileceğini ve bireyin :math:`j` birden fazla ürün satın alacağı duruma tekabül ettiğini unutmayın.Toplam satın alma olasılığını maksimize etmek, gelecekteki toplam gelirleri maksimize etmeye karşılık gelir. Kar olasılığının ilk ücretsiz örneklerin maliyetinden daha büyük olması durumunda, strateji uygun bir stratejidir. Bu modelin bir uzantısı, pazarlama modelimizde, ürünün ücretsiz bir örneğini verilen bir kişinin gelecekte tekrar satın alma olasılığı olarak kabul edilebilecek düğümlerin kendilerinin ağırlık taşımasına sahiptir. Modelimizdeki bu ek bilgilerle,maksimize etmek için amaç fonksiyonu olur"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:51
msgid "C(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j)+\\sum_i w_i x_i.\n\n"
msgstr "C(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j)+\\sum_i w_i x_i.\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:53
msgid "In order to find a solution to this problem on a quantum computer, one needs first to map it to an Ising Hamiltonian. This can be done with the assignment :math:`x_i\\rightarrow (1-Z_i)/2`, where :math:`Z_i` is the Pauli Z operator that has eigenvalues :math:`\\pm 1`. Doing this we find that"
msgstr "Bir kuantum bilgisayarda bu probleme bir çözüm bulmak için, önce onu bir Ising Hamiltonyeni ile eşleştirmek gerekir. Bu, :math:`x_i\\rightarrow (1-Z_i)/2` atamasıyla yapılabilir, burada :math:`Z_i`, özdeğerleri :math:`\\pm 1` olan Pauli Z operatörüdür. Bunu yaparak şunu buluyoruz"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:55
msgid "C(\\textbf{Z}) = \\sum_{i,j} \\frac{w_{ij}}{4} (1-Z_i)(1+Z_j) + \\sum_i \\frac{w_i}{2} (1-Z_i) = -\\frac{1}{2}\\left( \\sum_{i<j} w_{ij} Z_i Z_j +\\sum_i w_i Z_i\\right)+\\mathrm{const},\n\n"
msgstr "C(\\textbf{Z}) = \\sum_{i,j} \\frac{w_{ij}}{4} (1-Z_i)(1+Z_j) + \\sum_i \\frac{w_i}{2} (1-Z_i) = -\\frac{1}{2}\\left( \\sum_{i<j} w_{ij} Z_i Z_j +\\sum_i w_i Z_i\\right)+\\mathrm{const},\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:57
msgid "where :math:`\\mathrm{const} = \\sum_{i<j}w_{ij}/2+\\sum_i w_i/2`. In other terms, the weighted Max-Cut problem is equivalent to minimizing the Ising Hamiltonian"
msgstr ":math:` \\mathm{const} = \\sum_ { i <j } w_{ij}/2 + \\sum_i w_i/i/2 `. Diğer bir açıdan, ağırlıklı Maksimum Kesim sorunu Ising Hamiltonyeni minimuma indirmekle eşdeğerdir"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:59
msgid "H = \\sum_i w_i Z_i + \\sum_{i<j} w_{ij} Z_iZ_j.\n\n"
msgstr "H = \\sum_i w_i Z_i + \\sum_{i<j} w_{ij} Z_iZ_j.\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:61
msgid "Qiskit’s optimization module can generate the Ising Hamiltonian for the first profit function :math:`\\tilde{C}`. To this extent, function :math:`\\tilde{C}` can be modeled as a ``QuadraticProgram``, which provides the ``to_ising()`` method."
msgstr "Qiskit'in optimizasyon modülü, ilk kâr işlevi :math:`\\tilde{C}` için Ising Hamiltonian'ı oluşturabilir. Bu kapsamda, :math:`\\tilde{C}` işlevi, ``to_ising()`` yöntemini sağlayan bir ``QuadraticProgram`` olarak modellenebilir."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:64
msgid "Approximate Universal Quantum Computing for Optimization Problems"
msgstr "Optimizasyon Problemleri için Yaklaşık Evrensel Kuantum Programlama"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:66
msgid "There has been a considerable amount of interest in recent times about the use of quantum computers to find a solution to combinatorial optimization problems. It is important to say that, given the classical nature of combinatorial problems, exponential speedup in using quantum computers compared to the best classical algorithms is not guaranteed. However, due to the nature and importance of the target problems, it is worth investigating heuristic approaches on a quantum computer that could indeed speed up some problem instances. Here we demonstrate an approach that is based on the *Quantum Approximate Optimization Algorithm* (QAOA) by Farhi, Goldstone, and Gutmann (2014). We frame the algorithm in the context of *approximate quantum computing*, given its heuristic nature."
msgstr "Kombinatoryal optimizasyon problemlerine bir çözüm bulmak için kuantum bilgisayarların kullanımı hakkında son zamanlarda önemli miktarda ilgi artışı olmuştur. Kombinatoryal problemlerin klasik doğası göz önüne alındığında, kuantum bilgisayarların kullanımında en iyi klasik algoritmalara kıyasla üstel hızlanmanın garanti edilmediğini söylemek önemlidir. Ancak, hedef problemlerin doğası ve önemi nedeniyle, bazı problem örneklerini gerçekten hızlandırabilecek bir kuantum bilgisayarda buluşsal yaklaşımları araştırmaya değer. Burada Farhi, Goldstone ve Gutmann'ın (2014) *Kuantum Yaklaşık Optimizasyon Algoritmasına* (QAOA) dayanan bir yaklaşımı gösteriyoruz. Sezgisel doğası göz önüne alındığında, algoritmayı *yaklaşık kuantum hesaplama* bağlamında çerçeveliyoruz."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:69
msgid "The algorithm works as follows:"
msgstr "Algoritma şu şekilde çalışır:"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:71
msgid "Choose the :math:`w_i` and :math:`w_{ij}` in the target Ising problem. In principle, even higher powers of Z are allowed."
msgstr "Hedef Ising probleminde :math:`w_i` ve :math:`w_{ij}` değerini seçin. Prensipte, Z 'nin daha da yüksek enerjilerine bile izin verilir."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:73
msgid "Choose the depth of the quantum circuit :math:`m`. Note that the depth can be modified adaptively."
msgstr ":math:`m` kuantum devresi yoğunluğunu seçin. Yoğunluğun uyarlanabilir olarak değiştirilebileceğini unutmayın."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:75
msgid "Choose a set of controls :math:`\\theta` and make a trial function :math:`|\\psi(\\boldsymbol\\theta)\\rangle`, built using a quantum circuit made of C-Phase gates and single-qubit Y rotations, parameterized by the components of :math:`\\boldsymbol\\theta`."
msgstr "Bir dizi kontrol seçin :math:`\\theta` ve bir deneme işlevi yapın :math:`|\\psi(\\boldsymbol\\theta)\\rangle`, C-Phase kapıları ve tek kübit Y'den oluşan bir kuantum devresi kullanılarak oluşturulmuş döndürmeler, :math:`\\boldsymbol\\theta` bileşenleri tarafından parametrelendirildi."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:77
msgid "Evaluate"
msgstr "Değerlendirmek"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:79
msgid "C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)~|H|~\\psi(\\boldsymbol\\theta)\\rangle = \\sum_i w_i \\langle\\psi(\\boldsymbol\\theta)~|Z_i|~\\psi(\\boldsymbol\\theta)\\rangle+ \\sum_{i<j} w_{ij} \\langle\\psi(\\boldsymbol\\theta)~|Z_iZ_j|~\\psi(\\boldsymbol\\theta)\\rangle\n\n"
msgstr "C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)~|H|~\\psi(\\boldsymbol\\theta)\\rangle = \\sum_i w_i \\langle\\psi(\\boldsymbol\\theta)~|Z_i|~\\psi(\\boldsymbol\\theta)\\rangle+ \\sum_{i<j} w_{ij} \\langle\\psi(\\boldsymbol\\theta)~|Z_iZ_j|~\\psi(\\boldsymbol\\theta)\\rangle\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:81
msgid "by sampling the outcome of the circuit in the Z-basis and adding the expectation values of the individual Ising terms together. In general, different control points around :math:`\\boldsymbol\\theta` have to be estimated, depending on the classical optimizer chosen."
msgstr "z temelindeki devrenin sonucunu örnekleyerek ve Bireysel Ising terimlerinin beklenti değerlerini bir arada ekleyerek. Genel olarak, seçilen klasik optimize ediciye bağlı olarak :math:` \\boldsymbolt\\theta ` çevresinde farklı denetim noktaları tahmin edilmelidir."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:83
msgid "Use a classical optimizer to choose a new set of controls."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:85
msgid "Continue until :math:`C(\\boldsymbol\\theta)` reaches a minimum, close enough to the solution :math:`\\boldsymbol\\theta^*`."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:87
msgid "Use the last :math:`\\boldsymbol\\theta` to generate a final set of samples from the distribution :math:`|\\langle z_i~|\\psi(\\boldsymbol\\theta)\\rangle|^2\\;\\forall i` to obtain the answer."
msgstr "Cevabı elde etmek için :math:`|\\langle z_i~|\\psi(\\boldsymbol\\theta)\\rangle|^2\\;\\forall i` dağılımından son bir örnek kümesi oluşturmak için son :math:`\\boldsymbol\\theta` öğesini kullanın."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:89
msgid "It is our belief the difficulty of finding good heuristic algorithms will come down to the choice of an appropriate trial wavefunction. For example, one could consider a trial function whose entanglement best aligns with the target problem, or simply make the amount of entanglement a variable. In this tutorial, we will consider a simple trial function of the form"
msgstr "İyi sezgisel algoritmalar bulmanın zorluğunun, uygun bir deneme dalga fonksiyonunun seçimine bağlı olacağına inanıyoruz. Örneğin, dolanıklığı hedef problemle en iyi şekilde örtüşen bir deneme işlevi düşünülebilir veya yalnızca dolaşıklık miktarını bir değişken yapabilir. Bu derste, formun basit bir deneme fonksiyonunu ele alacağız"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:91
msgid "|\\psi(\\theta)\\rangle  = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m |+\\rangle\n\n"
msgstr "|\\psi(\\theta)\\rangle  = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m |+\\rangle\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:93
msgid "where :math:`U_\\mathrm{entangler}` is a collection of C-Phase gates (fully entangling gates), and :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^n Y(\\theta_{i})`, where :math:`n` is the number of qubits and :math:`m` is the depth of the quantum circuit. The motivation for this choice is that for these classical problems this choice allows us to search over the space of quantum states that have only real coefficients, still exploiting the entanglement to potentially converge faster to the solution."
msgstr "burada :math:`U_\\mathrm{entangler}`, C-Phase kapılarının (tamamen dolaşan kapılar) bir koleksiyonudur ve :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^ n Y(\\theta_{i})`, burada :math:`n` kübit sayısıdır ve :math:`m` kuantum devresinin derinliğidir. Bu seçimin motivasyonu, bu klasik problemler için bu seçimin, yalnızca gerçek katsayıları olan kuantum durumlarının uzayını araştırmamıza izin vermesidir, yine de potansiyel olarak çözüme daha hızlı yaklaşmak için dolanıklıktan yararlanır."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:96
msgid "One advantage of using this sampling method compared to adiabatic approaches is that the target Ising Hamiltonian does not have to be implemented directly on hardware, allowing this algorithm not to be limited to the connectivity of the device. Furthermore, higher-order terms in the cost function, such as :math:`Z_iZ_jZ_k`, can also be sampled efficiently, whereas in adiabatic or annealing approaches they are generally impractical to deal with."
msgstr "Adyabatik yaklaşımlara kıyasla bu örnekleme yöntemini kullanmanın bir avantajı, hedef Ising Hamiltonian'ın doğrudan donanım üzerinde uygulanması gerekmemesi ve bu algoritmanın cihazın bağlanabilirliği ile sınırlı olmamasıdır. Ayrıca, maliyet fonksiyonundaki :math:`Z_iZ_jZ_k` gibi daha yüksek dereceli terimler de verimli bir şekilde örneklenebilirken, adyabatik veya tavlama yaklaşımlarında bunlarla uğraşmak genellikle pratik değildir."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:98
msgid "References:"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:100
msgid "A. Lucas, Frontiers in Physics 2, 5 (2014)"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:101
msgid "E. Farhi, J. Goldstone, S. Gutmann, e-print arXiv 1411.4028 (2014)"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:102
msgid "D. Wecker, M. B. Hastings, M. Troyer, Phys. Rev. A 94, 022309 (2016)"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:103
msgid "E. Farhi, J. Goldstone, S. Gutmann, H. Neven, e-print arXiv 1703.06199 (2017)"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:115
msgid "Application classes"
msgstr "Uygulama sınıfları"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:117
msgid "We use the application classes for the max-cut problem and the traveling salesman problem in this page. There are application classes for other optimization problems available as well. See `Application Classes for Optimization Problems <09_application_classes.ipynb>`__ for details."
msgstr "Bu sayfada maksimum kesim problemi ve gezgin satıcı problemi için uygulama sınıflarını kullanıyoruz. Diğer optimizasyon problemleri için de uygulama sınıfları mevcuttur. Ayrıntılar için `Application Classes for Optimization Problems <09_application_classes.ipynb>`__ bölümüne bakınız."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:153
msgid "Max-Cut problem"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:261
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:978
msgid "Brute force approach"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:263
msgid "Try all possible :math:`2^n` combinations. For :math:`n = 4`, as in this example, one deals with only 16 combinations, but for n = 1000, one has 1.071509e+30 combinations, which is impractical to deal with by using a brute force approach."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:391
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1089
msgid "Mapping to the Ising problem"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:402
msgid "Qiskit provides functionality to generate ``QuadraticProgram`` from the problem specification as well as create the corresponding Ising Hamiltonian."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:598
msgid "Since the problem was cast to a minimization problem, the solution of :math:`-4` corresponds to the optimum."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:610
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1449
msgid "Checking that the full Hamiltonian gives the right cost"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:693
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1535
msgid "Running it on quantum computer"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:695
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1537
msgid "We run the optimization routine using a feedback loop with a quantum computer that uses trial functions built with Y single-qubit rotations, :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^n Y(\\theta_{i})`, and entangler steps :math:`U_\\mathrm{entangler}`."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:866
msgid "Traveling Salesman Problem"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:868
msgid "In addition to being a notorious NP-complete problem that has drawn the attention of computer scientists and mathematicians for over two centuries, the Traveling Salesman Problem (TSP) has important bearings on finance and marketing, as its name suggests. Colloquially speaking, the traveling salesman is a person that goes from city to city to sell merchandise. The objective in this case is to find the shortest path that would enable the salesman to visit all the cities and return to its hometown, i.e. the city where he started traveling. By doing this, the salesman gets to maximize potential sales in the least amount of time."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:871
msgid "The problem derives its importance from its “hardness” and ubiquitous equivalence to other relevant combinatorial optimization problems that arise in practice."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:873
msgid "The mathematical formulation with some early analysis was proposed by W.R. Hamilton in the early 19th century. Mathematically the problem is, as in the case of Max-Cut, best abstracted in terms of graphs. The TSP on the nodes of a graph asks for the shortest *Hamiltonian cycle* that can be taken through each of the nodes. A Hamilton cycle is a closed path that uses every vertex of a graph once. The general solution is unknown and an algorithm that finds it efficiently (e.g., in polynomial time) is not expected to exist."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:876
msgid "Find the shortest Hamiltonian cycle in a graph :math:`G=(V,E)` with :math:`n=|V|` nodes and distances, :math:`w_{ij}` (distance from vertex :math:`i` to vertex :math:`j`). A Hamiltonian cycle is described by :math:`N^2` variables :math:`x_{i,p}`, where :math:`i` represents the node and :math:`p` represents its order in a prospective cycle. The decision variable takes the value 1 if the solution occurs at node :math:`i` at time order :math:`p`. We require that every node can only appear once in the cycle, and for each time a node has to occur. This amounts to the two constraints (here and in the following, whenever not specified, the summands run over 0,1,…N-1)"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:879
msgid "\\sum_{i} x_{i,p} = 1 ~~\\forall p\n\n"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:881
msgid "\\sum_{p} x_{i,p} = 1 ~~\\forall i.\n\n"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:883
msgid "For nodes in our prospective ordering, if :math:`x_{i,p}` and :math:`x_{j,p+1}` are both 1, then there should be an energy penalty if :math:`(i,j) \\notin E` (not connected in the graph). The form of this penalty is"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:885
msgid "\\sum_{i,j\\notin E}\\sum_{p} x_{i,p}x_{j,p+1}>0,\n\n"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:887
msgid "where it is assumed the boundary condition of the Hamiltonian cycles :math:`(p=N)\\equiv (p=0)`. However, here it will be assumed a fully connected graph and not include this term. The distance that needs to be minimized is"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:889
msgid "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}.\n\n"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:891
msgid "Putting this all together in a single objective function to be minimized, we get the following:"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:893
msgid "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}+ A\\sum_p\\left(1- \\sum_i x_{i,p}\\right)^2+A\\sum_i\\left(1- \\sum_p x_{i,p}\\right)^2,\n\n"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:895
msgid "where :math:`A` is a free parameter. One needs to ensure that :math:`A` is large enough so that these constraints are respected. One way to do this is to choose :math:`A` such that :math:`A > \\mathrm{max}(w_{ij})`."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:897
msgid "Once again, it is easy to map the problem in this form to a quantum computer, and the solution will be found by minimizing a Ising Hamiltonian."
msgstr ""

