msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-04 19:50+0000\n"
"PO-Revision-Date: 2023-04-04 21:20\n"
"Last-Translator: \n"
"Language: tr\n"
"Language-Team: Turkish\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/04_grover_optimizer.po\n"
"X-Crowdin-File-ID: 9648\n"

#: ../../tutorials/04_grover_optimizer.ipynb:9
msgid "This page was generated from `docs/tutorials/04_grover_optimizer.ipynb`__."
msgstr "Bu sayfa, `docs/tutorials/04_grover_optimizer.ipynb`__ sayfasından oluşturulmuştur."

#: ../../tutorials/04_grover_optimizer.ipynb:9
msgid "Grover Optimizer"
msgstr "Grover Optimize Edici"

#: ../../tutorials/04_grover_optimizer.ipynb:21
msgid "Introduction"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:23
msgid "Grover Adaptive Search (GAS) has been explored as a possible solution for combinatorial optimization problems, alongside variational algorithms such as Variational Quantum Eigensolver (VQE) and Quantum Approximate Optimization Algorithm (QAOA). The algorithm iteratively applies Grover Search to find the optimum value of an objective function, by using the best-known value from the previous run as a threshold. The adaptive oracle used in GAS recognizes all values above or below the current threshold (for max and min respectively), decreasing the size of the search space every iteration the threshold is updated, until an optimum is found."
msgstr "Grover Adaptive Search (GAS); Variational Quantum Eigensolver (VQE) ve Quantum Approximate Optimization Algorithm (QAOA) gibi varyasyonel algoritmaların yanı sıra, kombinasyonel optimizasyon problemleri için olası bir çözüm olarak keşfedildi. Algoritma, önceki çalıştırmadan en iyi bilinen değeri eşik olarak kullanarak bir amaç fonksiyonunun optimum değerini bulmak için yinelemeli olarak Grover Araması uygular. GAS'ta kullanılan uyarlanabilir oracle, bir optimum bulunana kadar eşik her yinelemede güncellenen arama alanının boyutunu azaltarak, mevcut eşiğin (sırasıyla maks ve min için) üstündeki veya altındaki tüm değerleri tanır."

#: ../../tutorials/04_grover_optimizer.ipynb:26
msgid "In this notebook we will explore each component of the ``GroverOptimizer``, which utilizes the techniques described in GAS, by minimizing a Quadratic Unconstrained Binary Optimization (QUBO) problem, as described in [1]"
msgstr "Bu not defterinde, GAS'ta açıklanan teknikleri kullanan ``GroverOptimizer``ın her bir bileşenini, İkinci Dereceden Sınırsız İkili Optimizasyon (QUBO) problemini minimize ederek, [1] 'de açıklandığı gibi inceleyeceğiz"

#: ../../tutorials/04_grover_optimizer.ipynb:29
msgid "References"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:31
msgid "[1] `A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization, arXiv preprint arXiv:1912.04088 (2019). <https://arxiv.org/abs/1912.04088>`__"
msgstr "[1] `A. Gilliam, S. Woerner, C. Gonciulea, Kısıtlı Polinom İkili Optimizasyon için Grover Uyarlamalı Arama, arXiv ön baskı arXiv:1912.04088 (2019). <https://arxiv.org/abs/1912.04088>`__"

#: ../../tutorials/04_grover_optimizer.ipynb:43
msgid "Grover Adaptive Search"
msgstr "Grover Uyarlanabilir Arama"

#: ../../tutorials/04_grover_optimizer.ipynb:45
msgid "Grover Search, the core element of GAS, needs three ingredients:"
msgstr "Grover Adaptive Search'ın temel öğesi olan Grover Search, üç bileşene ihtiyaç duyar:"

#: ../../tutorials/04_grover_optimizer.ipynb:47
msgid "A state preparation operator :math:`A` to construct a superposition of all states in the search space."
msgstr "Bir durum hazırlama operatörü :math:`A`, arama uzayındaki tüm durumların bir sürepozisyonunu oluşturmak içindir."

#: ../../tutorials/04_grover_optimizer.ipynb:49
msgid "An oracle operator :math:`O`, that recognizes the states of interest and multiplies their amplitudes by -1."
msgstr "Bir oracle operatörü :math:`O`, aranmakta olan durumları fark eder ve genliklerini -1 ile çarpar."

#: ../../tutorials/04_grover_optimizer.ipynb:51
msgid "The Grover diffusion operator :math:`D`, that multiplies the amplitude of the :math:`|0\\rangle_n` state by -1."
msgstr ":math:`|0\\rangle_n` durumunun genliğini -1 ile çarpan Grover difüzyon operatörü :math:`D`."

#: ../../tutorials/04_grover_optimizer.ipynb:53
msgid "While implementations of GAS vary around the specific use case, the general framework still loosely follows the steps described below."
msgstr "Grover Adaptive Search'ün uygulamaları özel kullanım örneğine göre değişiklik gösterse de, \n"
"genel çerçevede aşağıda açıklanan adımları hâlâ üstünkörü bir şekilde takip etmektedir."

#: ../../tutorials/04_grover_optimizer.ipynb:59
msgid "|6acdcae99dc145fcb232a1c6a8ebe0ca|"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:84
msgid "6acdcae99dc145fcb232a1c6a8ebe0ca"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:65
msgid "``GroverOptimizer`` uses ``QuadraticProgramToNegativeValueOracle`` to construct :math:`A_y` such that it prepares a :math:`n`-qubit register to represent the equal superposition of all :math:`|x\\rangle_n` and a :math:`m`-qubit register to (approximately) represent the corresponding :math:`|Q(x)-y\\rangle_m`. Then, all states with :math:`(Q(x) - y)` negative should be flagged by :math:`O_y`. Note that in the implementation discussed, the oracle operator is actually independent of :math:`y`, but this is not a requirement. For clarity, we will refer to the oracle as :math:`O` when the oracle is independent of :math:`y`."
msgstr "``GroverOptimizer``, :math:`A_y` oluşturmak için ``QuadraticProgramToNegativeValueOracle`` kullanır, böylece tüm :math:`|x\\rangle_n` ve bir :math:`m`-kübit kaydının eşit süperpozisyonunu temsil etmek için bir :math:`n`-kübit yazmaçı hazırlar (yaklaşık olarak) karşılık gelen :math:`|Q(x)-y\\rangle_m`. Ardından, :math:`(Q(x) - y)` negatif olan tüm durumlar :math:`O_y` ile işaretlenmelidir. Tartışılan uygulamada, kara kutu operatörünün aslında :math:`y` den bağımsız olduğunu, ancak bu bir gereklilik olmadığını unutmayın. Açıklık sağlamak için, kara kutu :math:`y`den bağımsız olduğunda, kara kutu :math:`O` olarak ifade edeceğiz."

#: ../../tutorials/04_grover_optimizer.ipynb:68
msgid "Put formally, ``QuadraticProgramToNegativeValueOracle`` constructs an :math:`A_y` and :math:`O` such that:"
msgstr "Resmi olarak ``QuadraticProgramToNegativeValueOracle``, bir :math:`A_y` ve :math:`O` oluşturur, öyle ki:"

#: ../../tutorials/04_grover_optimizer.ipynb:74
msgid "|073409d9f20e4ce7a3831ad4cf0ef34f|"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:87
msgid "073409d9f20e4ce7a3831ad4cf0ef34f"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:80
msgid "where :math:`|x\\rangle` is the binary encoding of the integer :math:`x`."
msgstr "burada :math:`|x\\rangle` , :math:`x` tam sayısının ikili kodlamasıdır."

#: ../../tutorials/04_grover_optimizer.ipynb:82
msgid "At each iteration in which the threshold :math:`y` is updated, we adapt :math:`A_y` such that the function values are shifted up or down (for minimum and maximum respectively) by :math:`y`. For example, in the context of finding the minimum, as the value of :math:`y` decreases, the search space (negative values) also decreases, until only the minimum value remains. A concrete example will be explored in the next section."
msgstr ":math:`y` girişinin güncellendiği her yinelemede, :math:`A_y`, fonksiyon değerleri :math:`y` ile yukarı veya aşağı (sırasıyla minimum ve maksimum için) kaydırılacak şekilde uyarlarız. Örneğin, minimumu bulma bağlamında, :math:`y` değeri azaldıkça, sadece minimum değer kalana kadar arama uzayı (negatif değerler) azalır. Bir sonraki bölümde somut bir örnek incelenecektir."

#: ../../tutorials/04_grover_optimizer.ipynb:99
msgid "Find the Minimum of a QUBO Problem using GroverOptimizer"
msgstr "Grover Optimize Edici kullanarak Minimum QUBO Problemini bulun"

#: ../../tutorials/04_grover_optimizer.ipynb:101
msgid "The following is a toy example of a minimization problem."
msgstr "Aşağıda bir minimizasyon probleminin önemsiz örneği verilmiştir."

#: ../../tutorials/04_grover_optimizer.ipynb:103
msgid ":nbsphinx-math:`\\begin{eqnarray} \\min_{x \\in \\{0, 1\\}^3} -2x_0x_2 - x_1x_2 - 1x_0 + 2x_1 - 3x_2. \\end{eqnarray}`"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:107
msgid "For our initial steps, we create a docplex model that defines the problem above, and then use the ``from_docplex_mp()`` function to convert the model to a ``QuadraticProgram``, which can be used to represent a QUBO in Qiskit Optimization."
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:202
msgid "Next, we create a ``GroverOptimizer`` that uses 6 qubits to encode the value, and will terminate after there have been 10 iterations of GAS without progress (i.e. the value of :math:`y` does not change). The ``solve()`` function takes the ``QuadraticProgram`` we created earlier, and returns a results object that contains information about the run."
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:255
msgid "This results in the optimal solution :math:`x_0=1`, :math:`x_1=0`, :math:`x_2=1` and the optimal objective value of :math:`-6` (most of the time, since it is a randomized algorithm). In the following, a custom visualization of the quantum state shows a possible run of ``GroverOptimizer`` applied to this QUBO."
msgstr "En uygun çözüm :math:`x_0=1`, :math:`x_1=0`, :math:`x_2=1` ve en iyi objektif değeri :math:`-6` ile sonuçlanır (çoğu zaman, rastgele bir algoritma olduğu için). İlerleyen yerde bir kuantum durumunun özel görselleştirimi, bu QUBO'ya uygulanan ``GroverOptimizer`` için olası bir çalıştırılış gösterir."

#: ../../tutorials/04_grover_optimizer.ipynb:261
msgid "|4b9d29299eb64dc990524a6aa5376d05|"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:280
msgid "4b9d29299eb64dc990524a6aa5376d05"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:267
msgid "Each graph shows a single iteration of GAS, with the current values of :math:`r` (= iteration counter) and :math:`y` (= threshold/offset) shown in the title. The X-axis displays the integer equivalent of the input (e.g. '101' :math:`\\rightarrow` 5), and the Y-axis shows the possible function values. As there are 3 binary variables, there are :math:`2^3=8` possible solutions, which are shown in each graph. The color intensity indicates the probability of measuring a certain result (with bright intensity being the highest), while the actual color indicates the corresponding phase (see phase color-wheel below). Note that as :math:`y` decreases, we shift all of the values up by that amount, meaning there are fewer and fewer negative values in the distribution, until only one remains (the minimum)."
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:274
msgid "|4fa37e22850d4e9392225adba20f61dc|"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:283
msgid "4fa37e22850d4e9392225adba20f61dc"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:295
msgid "Check that GroverOptimizer finds the correct value"
msgstr "Grover Optimize Edicinin doğru değeri bulduğunu kontrol edin"

#: ../../tutorials/04_grover_optimizer.ipynb:297
msgid "We can verify that the algorithm is working correctly using the ``MinimumEigenOptimizer`` in Qiskit."
msgstr "Qiskit'teki ``MinimumEigenOptimizer`` kullanarak algoritmanın doğru çalıştığını doğrulayabiliriz."

