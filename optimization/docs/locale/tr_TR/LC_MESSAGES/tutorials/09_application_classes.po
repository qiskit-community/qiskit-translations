msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-22 16:46+0000\n"
"PO-Revision-Date: 2021-09-22 17:27\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/09_application_classes.po\n"
"X-Crowdin-File-ID: 9658\n"
"Language: tr_TR\n"

#: ../../tutorials/09_application_classes.ipynb:9
msgid "This page was generated from `docs/tutorials/09_application_classes.ipynb`__."
msgstr "Bu sayfa, `docs/tutorials/09_application_classes.ipynb`__ sayfasından oluşturulmuştur."

#: ../../tutorials/09_application_classes.ipynb:9
msgid "Application Classes for Optimization Problems"
msgstr "Optimizasyon Problemleri için Uygulama Sınıfları"

#: ../../tutorials/09_application_classes.ipynb:21
msgid "Introduction"
msgstr ""

#: ../../tutorials/09_application_classes.ipynb:23
msgid "We introduce application classes for the following optimization problems so that users can easily try various optimization problems on quantum computers."
msgstr "Kullanıcıların kuantum bilgisayarlarda çeşitli optimizasyon problemlerini kolayca deneyebilmeleri için aşağıdaki optimizasyon problemleri için uygulama sınıfları sunuyoruz."

#: ../../tutorials/09_application_classes.ipynb:25
msgid "Exact cover problem"
msgstr "Tam kapak sorunu"

#: ../../tutorials/09_application_classes.ipynb:27
msgid "Given a collection of subsets of items, find a subcollection such that each item is covered exactly once."
msgstr "Öğelerin alt kümelerinden oluşan bir koleksiyon verildiğinde, her öğenin tam olarak bir kez kapsanacağı bir alt koleksiyon bulun."

#: ../../tutorials/09_application_classes.ipynb:29
#: ../../tutorials/09_application_classes.ipynb:430
msgid "Knapsack problem"
msgstr "Sırt çantası problemi"

#: ../../tutorials/09_application_classes.ipynb:31
msgid "Given a set of items, find a subset of items such that the total weight is within the capacity and the total value is maximized."
msgstr "Bir öğe kümesi verildiğinde, toplam yükü kapasite dahilinde olacak ve toplam değeri maksimize edecek şekilde bir öğe alt kümesi bulun."

#: ../../tutorials/09_application_classes.ipynb:33
msgid "Number partition problem"
msgstr "Sayı bölme sorunu"

#: ../../tutorials/09_application_classes.ipynb:35
msgid "Given a multiset of positive integers, find a partition of the multiset into two subsets such that the sums of the subsets are equal."
msgstr "Bir pozitif tamsayı çoklu kümesi verildiğinde, çoklu kümenin, alt kümelerin toplamları eşit olacak şekilde iki alt kümeye bölündüğünü bulun."

#: ../../tutorials/09_application_classes.ipynb:37
msgid "Set packing problem"
msgstr "Paketleme sorununu ayarlama"

#: ../../tutorials/09_application_classes.ipynb:39
msgid "Given a collection of subsets of items, find a subcollection such that all subsets of the subcollection are pairwise disjoint and the number of items in the subcollection is maximized."
msgstr "Öğelerin alt kümelerinden oluşan bir koleksiyon verildiğinde, alt koleksiyonun tüm alt kümelerinin ikili olarak ayrık olacağı ve alt koleksiyondaki öğelerin sayısı maksimize edilecek şekilde bir alt koleksiyon bulun."

#: ../../tutorials/09_application_classes.ipynb:41
msgid "Graph problems"
msgstr "Grafik problemleri"

#: ../../tutorials/09_application_classes.ipynb:43
msgid "Clique problem"
msgstr "Tıklama sorunu"

#: ../../tutorials/09_application_classes.ipynb:45
msgid "Given an undirected graph, find a subset of nodes with a specified number or the maximum number such that the induced subgraph is complete."
msgstr "Yönlendirilmemiş bir grafik verildiğinde, indüklenen alt grafiğin tamamlanması için belirli bir sayıya veya maksimum sayıya sahip bir düğümün alt kümesini bulun."

#: ../../tutorials/09_application_classes.ipynb:47
msgid "Graph partition problem"
msgstr "Grafik bölümü sorunu"

#: ../../tutorials/09_application_classes.ipynb:49
msgid "Given an undirected graph, find a partition into two components whose sizes are equal such that the total capacity of the edges between the two components is minimized."
msgstr "Yönlendirilmemiş bir grafik verildiğinde, iki bileşen arasındaki kenarların toplam kapasitesi en aza indirilecek şekilde boyutları eşit olan iki bileşene bölünen bir bölüm bulun."

#: ../../tutorials/09_application_classes.ipynb:51
msgid "Max-cut problem"
msgstr "Maksimum Kesim problemi"

#: ../../tutorials/09_application_classes.ipynb:53
msgid "Given an undirected graph, find a partition of nodes into two subsets such that the total weight of the edges between the two subsets is maximized."
msgstr "Yönlendirilmemiş bir grafik verildiğinde, iki alt küme arasındaki kenarların toplam ağırlığı maksimize edilecek şekilde düğümlerin iki alt kümeye bölünmesini bulun."

#: ../../tutorials/09_application_classes.ipynb:55
msgid "Stable set problem"
msgstr "Kararlı küme sorunu"

#: ../../tutorials/09_application_classes.ipynb:57
msgid "Given an undirected graph, find a subset of nodes such that no edge connects the nodes in the subset and the number of nodes is maximized."
msgstr "Yönlendirilmemiş bir grafik verildiğinde, alt kümedeki düğümleri hiçbir kenarın bağlamadığı ve düğümlerin sayısı maksimum olmayacak şekilde bir düğüm alt kümesi bulun."

#: ../../tutorials/09_application_classes.ipynb:59
msgid "Traveling salesman problem"
msgstr "Gezgin Satıcı Problemi"

#: ../../tutorials/09_application_classes.ipynb:61
msgid "Given a graph, find a route with the minimum distance such that the route visits each city exactly once."
msgstr "Verilen bir grafikle, rota her şehri tam olarak bir kez ziyaret edecek şekilde minimum mesafeye sahip bir rota bulun."

#: ../../tutorials/09_application_classes.ipynb:63
msgid "Vehicle routing problem"
msgstr "Araç yönlendirme sorunu"

#: ../../tutorials/09_application_classes.ipynb:65
msgid "Given a graph, a depot node, and the number of vehicles (routes), find a set of routes such that each node is covered exactly once except the depot and the total distance of the routes is minimized."
msgstr "Bir grafik, bir birikim düğümü ve araç sayısı (rotalar) verildiğinde, her düğümün depo dışında tam olarak bir kez kapsanacağı ve rotaların toplam mesafesinin en aza indirileceği bir dizi rota bulun."

#: ../../tutorials/09_application_classes.ipynb:67
#: ../../tutorials/09_application_classes.ipynb:120
msgid "Vertex cover problem"
msgstr "Köşe örtme problemi"

#: ../../tutorials/09_application_classes.ipynb:69
msgid "Given an undirected graph, find a subset of nodes with the minimum size such that each edge has at least one endpoint in the subsets."
msgstr "Yönlendirilmemiş bir grafik verildiğinde, her bir kenarın alt kümelerde en az bir uç noktası olacak şekilde minimum boyutta bir düğüm alt kümesi bulun."

#: ../../tutorials/09_application_classes.ipynb:71
msgid "The application classes for graph problems (``GraphOptimizationApplication``) provide a functionality to draw graphs of an instance and a result. Note that you need to install ``matplotlib`` beforehand to utilize the functionality."
msgstr "Grafik problemleri için uygulama sınıfları (``GraphOptimizationApplication``), bir örneğin ve bir sonucun grafiklerini çizmek için bir işlevsellik sağlar. İşlevi kullanmak için önceden ``matplotlib`` yüklemeniz gerektiğini unutmayın."

#: ../../tutorials/09_application_classes.ipynb:82
msgid "We introduce examples of the vertex cover problem and the knapsack problem in this page."
msgstr "Bu sayfada köşe örtme problemi ve sırt çantası problemi örneklerini tanıtıyoruz."

#: ../../tutorials/09_application_classes.ipynb:84
msgid "Examples of the max-cut problem and the traveling salesman problem are available in `Max-Cut and Traveling Salesman Problem <06_examples_max_cut_and_tsp.ipynb>`__."
msgstr "Maksimum Kesim problemi ve gezgin satıcı probleminin örnekleri `Max-Cut and Traveling Salesman Problem <06_examples_max_cut_and_tsp.ipynb>`__."

#: ../../tutorials/09_application_classes.ipynb:95
msgid "We first import packages necessary for application classes."
msgstr "İlk önce uygulama sınıfları için gerekli paketleri içe aktarıyoruz."

#: ../../tutorials/09_application_classes.ipynb:122
msgid "We introduce the application class for the vertex cover problem as an example of graph problems. Given an undirected graph, the vertex cover problem asks us to find a subset of nodes with the minimum size such that all edges are covered by any node selected."
msgstr "Graf problemlerine bir örnek olarak köşe örtüsü problemi için uygulama sınıfını tanıtıyoruz. Yönsüz bir grafik verildiğinde, köşe örtüsü problemi, tüm kenarları seçilen herhangi bir düğümle kaplanacak şekilde minimum boyutta bir düğüm alt kümesi bulmamızı ister."

#: ../../tutorials/09_application_classes.ipynb:124
msgid "We import the application class ``VertexCover`` for the vertex cover problem and ``networkx`` to generate a random graph."
msgstr "Köşe örtme problemi için ``VertexCover`` uygulama sınıfını ve rastgele bir grafik oluşturmak için ``networkx`` uygulama sınıfını içe aktarıyoruz."

#: ../../tutorials/09_application_classes.ipynb:189
msgid "``VertexCover`` takes a graph as an instance and ``to_quadratic_program`` generates a corresponding ``QuadraticProgram`` of the instance of the vertex cover problem."
msgstr "``VertexCover``, bir örnek olarak bir grafik alır ve ``to_quadratic_program``, köşe örtüsü sorununun örneğine karşılık gelen bir ``QuadraticProgram`` oluşturur."

#: ../../tutorials/09_application_classes.ipynb:285
msgid "You can solve the problem as follows. ``NumPyMinimumEigensolver`` finds the minimum eigen vector. You can also apply QAOA. Note that the solution by QAOA is not always optimal."
msgstr "Sorunu aşağıdaki gibi çözebilirsiniz. ``NumPyMinimumEigensolver`` minimum öz vektörü bulur. QAOA'yı da uygulayabilirsiniz. QAOA'nın çözümünün her zaman optimal olmadığını unutmayın."

#: ../../tutorials/09_application_classes.ipynb:432
msgid "The knapsack problem asks us to find a combination of items such that the total weight is within the capacity of the knapsack and maximize the total value of the items. The following examples solve an instance of the knapsack problem with 5 items by Numpy eigensolver and QAOA."
msgstr "Sırt çantası problemi, toplam ağırlığı sırt çantasının kapasitesi dahilinde olacak şekilde bir eşya kombinasyonu bulmamızı ve eşyaların toplam değerini maksimize etmemizi ister. Aşağıdaki örnekler, Numpy özçözücü ve QAOA tarafından 5 öğeli sırt çantası sorununun bir örneğini çözmektedir."

#: ../../tutorials/09_application_classes.ipynb:617
msgid "How to check the Hamiltonian"
msgstr "Hamiltonyen nasıl kontrol edilir"

#: ../../tutorials/09_application_classes.ipynb:619
msgid "If you want to check the actual Hamiltonian generated from your problem instance, you need to apply a converter as follows."
msgstr "Problem örneğinizden üretilen gerçek Hamilton'u kontrol etmek istiyorsanız, aşağıdaki gibi bir dönüştürücü uygulamanız gerekir."

