msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-06 22:00+0000\n"
"PO-Revision-Date: 2023-02-06 22:30\n"
"Last-Translator: \n"
"Language: sw\n"
"Language-Team: Swahili\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: sw\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/10_warm_start_qaoa.po\n"
"X-Crowdin-File-ID: 9660\n"

#: ../../tutorials/10_warm_start_qaoa.ipynb:9
msgid "This page was generated from `docs/tutorials/10_warm_start_qaoa.ipynb`__."
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:9
msgid "Warm-starting quantum optimization"
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:12
msgid "Introduction"
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:14
msgid "Optimization problems with integer variables or constraints are often hard to solve. For example, the Quadratic Unconstrained Binary Optimization (QUBO) problem, i.e."
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:16
msgid ":nbsphinx-math:`\\begin{align} \\min_{x\\in\\{0,1\\}^n}x^T\\Sigma x + \\mu^Tx, \\end{align}`"
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:20
msgid "is NP-Hard. Here, :math:`\\Sigma` is an :math:`n\\times n` matrix and :math:`x` is a vector of :math:`n` binary variables. Note that we could have added the linear term :math:`\\mu` to the diagonal as :math:`x_i^2=x_i` for :math:`x_i\\in\\{0, 1\\}`. While QUBOs are hard to solve there exists many ways to relax them to problems that are easier to solve. For example, if :math:`\\Sigma` is semi-definite positive the QUBO can be relaxed and results in a convex Quadratic Program"
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:22
msgid ":nbsphinx-math:`\\begin{align} \\min_{x\\in[0,1]^n}x^T\\Sigma x, \\end{align}`"
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:26
msgid "which becomes easy to solve as :math:`x` now represents :math:`n` continuous variables bound to the range :math:`[0, 1]`. Such relaxations can be leveraged to warm-start quantum optimization algorithms as shown in [1]."
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:29
msgid "References"
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:31
msgid "[1] `D. J. Egger, J Marecek, S. Woerner, Warm-starting quantum optimization, arXiv:2009.10095 <http://arxiv.org/abs/2009.10095>`__"
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:68
msgid "Preliminaries: relaxing QUBOs"
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:70
msgid "First, we show how to relax a QUBO built with a semi-definite positive matrix to obtain an easy-to-solve QP."
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:115
msgid "For this example, we use a positive semi-definite matrix :math:`\\Sigma` and a linear term :math:`\\mu` as defined below."
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:146
msgid "Using DOCPLEX we build a model with binary variables."
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:243
msgid "Such binary problems are hard to deal with but can be solved if the problem instance is small enough. Our example above has as solution"
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:295
msgid "We can create a relaxation of this problem in which the variables are no longer binary. Note that we use the ``QuadraticProgramToQubo`` converter to convert the constraint into a quadratic penalty term. We do this to remain consistent with the steps that the Qiskit optimization module applies internally."
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:410
msgid "The solution of this continuous relaxation is different from the solution to the binary problem but can be used to warm-start a solver when dealing with the binary problem."
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:498
msgid "QAOA"
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:500
msgid "Here, we illustrate how to warm-start the quantum approximate optimization algorithm (QAOA) by leveraging the relaxed problem shown above."
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:503
msgid "Standard QAOA"
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:505
msgid "First, we use standard QAOA to solve the QUBO. To do this, we convert the QUBO to Qiskitâ€™s QuadraticProgram class (note that the resulting problem is still a binary problem)."
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:580
#: ../../tutorials/10_warm_start_qaoa.ipynb:892
msgid "Warm-start QAOA"
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:582
msgid "Next, we compare this result to a warm-start QAOA in which we use the solution to the continuous relaxation of the problem. First, we create the initial state"
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:584
msgid ":nbsphinx-math:`\\begin{align} |\\phi^*\\rangle=\\bigotimes_{i=0}^{n-1}R_y(\\theta_i)|0\\rangle_n . \\end{align}`"
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:588
msgid "which is given by applying :math:`R_y` rotations with an angle :math:`\\theta=2\\arcsin(\\sqrt{c^*_i})` that depends on the solution to the relaxed problem. Here, :math:`c^*_i` the value of variable :math:`i` of the relaxed problem."
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:626
msgid "Next, we create the mixer operator for QAOA. When warm-starting QAOA we must ensure that the mixer operator has the initial state as ground state. We therefore chose the Hamiltonian"
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:628
msgid ":nbsphinx-math:`\\begin{align} H_{M,i}^{(ws)}= \\begin{pmatrix} 2c_i^*-1 & -2\\sqrt{c_i^*(1-c_i^*)} \\\\ -2\\sqrt{c_i^*(1-c_i^*)} & 1-2c_i^* \\end{pmatrix} \\end{align}`"
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:636
msgid "as mixer operator for qubit :math:`i`. Once multiplied by :math:`-i\\beta` and exponentiated this mixer produces the following mixer circuit."
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:676
msgid "The initial state and mixer operator can then be passed to QAOA."
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:755
msgid "Analysis"
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:757
msgid "Both results appear to give the same result. However, when we look at the underlying probability distribution we observe that the warm-start QAOA has a much higher probability of sampling the optimal solution."
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:894
msgid "The warm-start features above are available in the Qiskit optimization module as a single optimizer named ``WarmStartQAOAOptimizer`` which is illustrated below. This solver will solve a QUBO with a warm-start QAOA. It computes :math:`c^*` by relaxing the problem. This behavior is controlled by setting ``relax_for_pre_solver`` to ``True``."
msgstr ""

