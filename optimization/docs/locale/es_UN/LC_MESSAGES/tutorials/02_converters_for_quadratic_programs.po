msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-14 15:08+0000\n"
"PO-Revision-Date: 2022-02-14 15:26\n"
"Last-Translator: \n"
"Language-Team: Spanish (United)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/02_converters_for_quadratic_programs.po\n"
"X-Crowdin-File-ID: 9644\n"
"Language: es_UN\n"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:9
msgid "This page was generated from `docs/tutorials/02_converters_for_quadratic_programs.ipynb`__."
msgstr "Esta página fue generada a partir de `docs/tutorials/02_converters_for_quadratic_programs.ipynb`__."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:9
msgid "Converters for Quadratic Programs"
msgstr "Conversores para Programas Cuadráticos"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:20
msgid "Optimization problems in Qiskit’s optimization module are represented with the ``QuadraticProgram`` class, which is a generic and powerful representation for optimization problems. In general, optimization algorithms are defined for a certain formulation of a quadratic program, and we need to convert our problem to the right type."
msgstr "Los problemas de optimización en el módulo de optimización de Qiskit se representan con la clase ``QuadraticProgram``, que es una representación genérica y poderosa de los problemas de optimización. En general, los algoritmos de optimización se definen para una determinada formulación de un programa cuadrático y necesitamos convertir nuestro problema al tipo correcto."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:22
msgid "For instance, Qiskit provides several optimization algorithms that can handle `Quadratic Unconstrained Binary Optimization <https://en.wikipedia.org/wiki/Quadratic_unconstrained_binary_optimization>`__ (QUBO) problems. These are mapped to Ising Hamiltonians, for which Qiskit uses the ``qiskit.opflow`` module, and then their ground state is approximated. For this optimization, commonly known algorithms such as VQE or QAOA can be used as underlying routine. See the following tutorial about the `Minimum Eigen Optimizer <./03_minimum_eigen_optimizer.ipynb>`__ for more detail. Note that also other algorithms exist that work differently, such as the ``GroverOptimizer``."
msgstr "Por ejemplo, Qiskit proporciona varios algoritmos de optimización que pueden manejar problemas de `Optimización Binaria Cuadrática Sin Restricciones <https://en.wikipedia.org/wiki/Quadratic_unconstrained_binary_optimization>`__ (Quadratic Unconstrained Binary Optimization, QUBO). Estos se mapean a Hamiltonianos Ising, para los cuales Qiskit usa el módulo ``qiskit.opflow``, y luego se aproxima su estado fundamental. Para esta optimización, se pueden utilizar algoritmos comúnmente conocidos como VQE o QAOA como rutina subyacente. Consulta el siguiente tutorial sobre el `Optimizador Propio Mínimo <./03_minimum_eigen_optimizer.ipynb>`__ para obtener más detalles. Ten en cuenta que también existen otros algoritmos que funcionan de manera diferente, como por ejemplo el ``GroverOptimizer``."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:25
msgid "To map a problem to the correct input format, the optimization module of Qiskit offers a variety of converters. In this tutorial we’re providing an overview on this functionality. Currently, Qiskit contains the following converters."
msgstr "Para mapear un problema al formato de entrada correcto, el módulo de optimización de Qiskit ofrece una variedad de convertidores. En este tutorial proporcionamos una descripción general de esta funcionalidad. Actualmente, Qiskit contiene los siguientes convertidores."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:27
msgid "``InequalityToEquality``: convert inequality constraints into equality constraints with additional slack variables."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:28
msgid "``IntegerToBinary``: convert integer variables into binary variables and corresponding coefficients."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:29
msgid "``LinearEqualityToPenalty``: convert equality constraints into additional terms of the objective function."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:30
msgid "``LinearInequalityToPenalty``: convert inequality constraints into additional terms of the objective function."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:31
msgid "``MaximizeToMinimize``: convert to the equivalent minimization problem."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:32
msgid "``MinimizeToMaximize``: convert to the equivalent maximization problem."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:33
msgid "``QuadraticProgramToQubo``: a wrapper that includes ``InequalityToEquality``, ``IntegerToBinary``, ``LinearEqualityToPenalty``, ``LinearInequalityToPenalty``, and ``MaximizeToMinimize`` for convenience."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:45
msgid "InequalityToEquality"
msgstr "InequalityToEquality"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:47
msgid "``InequalityToEqualityConverter`` converts inequality constraints into equality constraints with additional slack variables to remove inequality constraints from ``QuadraticProgram``. The upper bounds and the lower bounds of slack variables will be calculated from the difference between the left sides and the right sides of constraints. Signs of slack variables depend on symbols in constraints such as :math:`\\leq` and :math:`\\geq`."
msgstr "``InequalityToEqualityConverter`` convierte las restricciones de desigualdad en restricciones de igualdad con variables de holgura adicionales para eliminar las restricciones de desigualdad del ``QuadraticProgram``. Los límites superiores y los límites inferiores de las variables de holgura se calcularán a partir de la diferencia entre el lado izquierdo y el lado derecho de las restricciones. Las diferencias de variables de holgura dependen de símbolos en restricciones como :math:`\\leq` y :math:`\\geq`."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:49
msgid "The following is an example of a maximization problem with two inequality constraints. Variable :math:`x` and :math:`y` are binary variables and variable :math:`z` is an integer variable."
msgstr "A continuación se muestra un ejemplo de un problema de maximización con dos restricciones de desigualdad. Las variables :math:`x` y :math:`y` son variables binarias y la variable :math:`z` es una variable entera."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:63
msgid "With ``QuadraticProgram``, an optimization model of the problem is written as follows."
msgstr "Con ``QuadraticProgram``, un modelo de optimización del problema se escribe de la siguiente manera."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:188
msgid "Call ``convert`` method of ``InequalityToEquality`` to convert."
msgstr "Llamada al método ``convert`` de ``InequalityToEquality`` para convertir."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:313
msgid "After converting, the formulation of the problem looks like the above output. As we can see, the inequality constraints are replaced with equality constraints with additional integer slack variables, :math:`xyz\\_leg\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack`."
msgstr "Después de la conversión, la formulación del problema se parece al resultado anterior. Como podemos ver, las restricciones de desigualdad se reemplazan con restricciones de igualdad con variables de holgura (variables slack) enteras adicionales, :math:`xyz\\_leg\\text{@}int\\_slack` y :math:`xyz\\_geq\\text{@}int\\_slack`."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:315
msgid "Let us explain how the conversion works. For example, the lower bound of the left side of the first constraint is :math:`0` which is the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Thus, the upper bound of the additional integer variable must be :math:`5` to be able to satisfy even the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Note that we cut off the part after the decimal point in the converted formulation since the left side of the first constraint in the original formulation can be only integer values. For the second constraint, basically we apply the same approach. However, the symbol in the second constraint is :math:`\\geq`, so we add minus before :math:`xyz\\_geq\\text{@}int\\_slack` to be able to satisfy even the case of :math:`x=1, y=1`, and :math:`z=7`."
msgstr "Expliquemos cómo funciona la conversión. Por ejemplo, el límite inferior del lado izquierdo de la primera restricción es :math:`0` que es el caso de :math:`x=0`, :math:`y=0`, y :math:`z=0`. Por lo tanto, el límite superior de la variable entera adicional debe ser :math:`5` para poder satisfacer incluso el caso de :math:`x=0`, :math:`y=0`, y :math:`z=0`. Ten en cuenta que cortamos la parte después del punto decimal en la formulación convertida, ya que el lado izquierdo de la primera restricción en la formulación original puede ser solo valores enteros. Para la segunda restricción, básicamente aplicamos el mismo enfoque. Sin embargo, el símbolo en la segunda restricción es :math:`\\geq`, por lo que agregamos un signo menos antes de :math:`xyz\\_geq\\text{@}int\\_slack` para poder satisfacer incluso el caso de :math:`x=1, y=1`, y :math:`z=7`."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:342
msgid "IntegerToBinary"
msgstr "IntegerToBinary"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:353
msgid "``IntegerToBinary`` converts integer variables into binary variables and coefficients to remove integer variables from ``QuadraticProgram``. For converting, bounded-coefficient encoding proposed in `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Eq. (5)) is used. For more detail of the encoding method, please see the paper."
msgstr "``IntegerToBinary`` convierte variables enteras en variables binarias y coeficientes para eliminar variables enteras de ``QuadraticProgram``. Para la conversión, la codificación de coeficiente acotado propuesta en `arxiv: 1706.01945 <https://arxiv.org/abs/1706.01945>` __ (Eq. (5)) se utiliza. Para obtener más detalles sobre el método de codificación, consulte el documento dado."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:355
msgid "We use the output of ``InequalityToEquality`` as a starting point. Variables :math:`x` and :math:`y` are binary variables, while the variable :math:`z` and the slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` are integer variables. We print the problem again for reference."
msgstr "Usamos el resultado de ``InequalityToEquality`` como punto de partida. Las variables :math:`x` e :math:`y` son variables binarias, mientras que la variable :math:`z` y las variables de holgura :math:`xyz\\_leq\\text{@}int\\_slack` y :math:`xyz\\_geq\\text{@}int\\_slack` son variables enteras. Imprimimos el problema nuevamente como referencia."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:468
msgid "Call ``convert`` method of ``IntegerToBinary`` to convert."
msgstr "Llamada al método ``convert`` de ``InequalityToEquality`` para convertir."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:611
msgid "After converting, the integer variable :math:`z` is replaced with three binary variables :math:`z\\text{@}0`, :math:`z\\text{@}1` and :math:`z\\text{@}2` with coefficients 1, 2 and 4, respectively as the above. The slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` that were introduced by ``InequalityToEquality`` are also both replaced with three binary variables with coefficients 1, 2, 2, and 1, 2, 3, respectively."
msgstr "Después de la conversión, la variable entera :math:`z` se reemplaza con tres variables binarias :math:`z\\text{@}0`, :math:`z\\text{@}1` y :math:`z\\text{@}2` con los coeficientes 1, 2 y 4, respectivamente, como los anteriores. Las variables de holgura :math:`xyz\\_leq\\text{@}int\\_slack` y :math:`xyz\\_geq\\text{@}int\\_slack` que fueron introducidas por ``InequalityToEquality`` también se reemplazan por tres variables binarias con los coeficientes 1, 2, 2 y 1, 2, 3, respectivamente."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:613
msgid "Note: Essentially the coefficients mean that the sum of these binary variables with coefficients can be the sum of a subset of :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, and :math:`\\{1, 2, 3\\}` to represent that acceptable values :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}`, and :math:`\\{0, \\ldots, 6\\}`, which respects the lower bound and the upper bound of original integer variables correctly."
msgstr "Nota: En esencia, los coeficientes significan que la suma de estas variables binarias con coeficientes puede ser la suma de un subconjunto de :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, y :math:`\\{1, 2, 3\\}` para representar los valores aceptables :math:`\\{0, \\ldots, 7\\} `, :math:`\\{0, \\ldots, 5\\}` y :math:`\\{0, \\ldots, 6\\}`, que respeta correctamente el límite inferior y el límite superior de las variables enteras originales."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:615
msgid "``IntegerToBinary`` also provides ``interpret`` method that is the functionality to translate a given binary result back to the original integer representation."
msgstr "``IntegerToBinary`` también provee el método ``interpret`` que es la funcionalidad para traducir un resultado binario dado de nuevo a la representación original."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:627
msgid "LinearEqualityToPenalty"
msgstr "LineEqualityToPenalty"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:638
msgid "``LinearEqualityToPenalty`` converts linear equality constraints into additional quadratic penalty terms of the objective function to map ``QuadraticProgram`` to an unconstrained form. An input to the converter has to be a ``QuadraticProgram`` with only linear equality constraints. Those equality constraints, e.g. \\ :math:`\\sum_i a_i x_i = b` where :math:`a_i` and :math:`b` are numbers and :math:`x_i` is a variable, will be added to the objective function in the form of :math:`M(b - \\sum_i a_i x_i)^2` where :math:`M` is a large number as penalty factor. By default :math:`M= 1e5`. The sign of the term depends on whether the problem type is a maximization or minimization."
msgstr "``LineeEqualityToPenalty`` convierte las restricciones de igualdad lineal en términos de penalización cuadrática adicionales de la función objetiva para mapear ``QuadraticProgram`` a una forma sin restricciones. Una entrada al convertidor tiene que ser un ``QuadraticProgram`` con sólo restricciones de igualdad lineal. Estas limitaciones de igualdad, por ejemplo \\ :math:`\\sum_i a_i x_i = b` donde :math:`a_i` and :math:`b` son números y :math:`x_i` es una variable, se añadirá a la función objetivo en la forma de :math:`M(b - \\sum_i a_i x_i)^2` donde :math:`M` es un gran número como factor de penalización. De forma predeterminada :math:`M=1e5 `. El signo del término depende de si el tipo de problema es de maximización o minimización."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:641
msgid "We use the output of ``IntegerToBinary`` as a starting point, where all variables are binary variables and all inequality constraints have been mapped to equality constraints. We print the problem again for reference."
msgstr "Utilizamos la salida de ``IntegerToBinary`` como punto de partida, donde todas las variables son variables binarias y todas las restricciones de desigualdad se han mapeado con restricciones de igualdad. Volvemos a imprimir el problema como referencia."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:772
msgid "Call ``convert`` method of ``LinearEqualityToPenalty`` to convert."
msgstr "Llamada al método ``convert`` de ``InequalityToEquality`` para convertir."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:981
msgid "After converting, the equality constraints are added to the objective function as additional terms with the default penalty factor :math:`M=1e5`. The resulting problem is now a QUBO and compatible with many quantum optimization algorithms such as VQE, QAOA and so on."
msgstr "Después de la conversión, las restricciones de igualdad se añaden a la función objetivo como términos adicionales con el factor de penalización por defecto :math:`M=1e5`. El problema resultante es ahora un QUBO y es compatible con muchos algoritmos de optimización cuántica como VQE, QAOA y otros."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:992
msgid "This gives the same result as before."
msgstr "Esto da el mismo resultado que antes."

