msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-14 08:10+0000\n"
"PO-Revision-Date: 2023-11-14 08:54\n"
"Last-Translator: \n"
"Language: es_UN\n"
"Language-Team: Spanish (United)\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /main/optimization/docs/locale/en/LC_MESSAGES/tutorials/02_converters_for_quadratic_programs.po\n"
"X-Crowdin-File-ID: 9644\n"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:9
msgid "This page was generated from `docs/tutorials/02_converters_for_quadratic_programs.ipynb`__."
msgstr "Esta página fue generada a partir de `docs/tutorials/02_converters_for_quadratic_programs.ipynb`__."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:9
msgid "Converters for Quadratic Programs"
msgstr "Conversores para Programas Cuadráticos"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:20
msgid "Optimization problems in Qiskit optimization module are represented with the ``QuadraticProgram`` class, which is a generic and powerful representation for optimization problems. In general, optimization algorithms are defined for a certain formulation of a quadratic program, and we need to convert our problem to the right type."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:22
msgid "For instance, Qiskit optimization provides several optimization algorithms that can handle `Quadratic Unconstrained Binary Optimization <https://en.wikipedia.org/wiki/Quadratic_unconstrained_binary_optimization>`__ (QUBO) problems. These are mapped to Ising Hamiltonians, for which Qiskit optimization uses the ``qiskit.quantum_info.SparsePauliOp`` object, and then their ground state is approximated. For this optimization, commonly known algorithms such as VQE or QAOA can be used as underlying routine. See the following tutorial about the `Minimum Eigen Optimizer <./03_minimum_eigen_optimizer.ipynb>`__ for more detail. Note that also other algorithms exist that work differently, such as the ``GroverOptimizer``."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:25
msgid "To map a problem to the correct input format, the optimization module of Qiskit optimization offers a variety of converters. In this tutorial we're providing an overview on this functionality. Currently, Qiskit optimization contains the following converters."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:27
msgid "``InequalityToEquality``: convert inequality constraints into equality constraints with additional slack variables."
msgstr "``InequalityToEquality``: convertir restricciones de desigualdad en restricciones de igualdad con variables de holgura (slack) adicionales."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:28
msgid "``IntegerToBinary``: convert integer variables into binary variables and corresponding coefficients."
msgstr "``IntegerToBinary``: convertir variables enteras en variables binarias y los coeficientes correspondientes."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:29
msgid "``LinearEqualityToPenalty``: convert equality constraints into additional terms of the objective function."
msgstr "``LinearEqualityToPenalty``: convertir las restricciones de igualdad en términos adicionales de la función objetivo."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:30
msgid "``LinearInequalityToPenalty``: convert inequality constraints into additional terms of the objective function."
msgstr "``LinearInequalityToPenalty``: convertir las restricciones de desigualdad en términos adicionales de la función objetivo."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:31
msgid "``MaximizeToMinimize``: convert to the equivalent minimization problem."
msgstr "``MaximizeToMinimize``: convertir al problema de minimización equivalente."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:32
msgid "``MinimizeToMaximize``: convert to the equivalent maximization problem."
msgstr "``MinimizeToMaximize``: convertir al problema de maximización equivalente."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:33
msgid "``QuadraticProgramToQubo``: a wrapper that includes ``InequalityToEquality``, ``IntegerToBinary``, ``LinearEqualityToPenalty``, ``LinearInequalityToPenalty``, and ``MaximizeToMinimize`` for convenience."
msgstr "``QuadraticProgramToQubo``: un contenedor que incluye ``InequalityToEquality``, ``IntegerToBinary``, ``LinearEqualityToPenalty``, ``LinearInequalityToPenalty`` y ``MaximizeToMinimize`` por conveniencia."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:45
msgid "InequalityToEquality"
msgstr "InequalityToEquality"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:47
msgid "``InequalityToEqualityConverter`` converts inequality constraints into equality constraints with additional slack variables to remove inequality constraints from ``QuadraticProgram``. The upper bounds and the lower bounds of slack variables will be calculated from the difference between the left sides and the right sides of constraints. Signs of slack variables depend on symbols in constraints such as :math:`\\leq` and :math:`\\geq`."
msgstr "``InequalityToEqualityConverter`` convierte las restricciones de desigualdad en restricciones de igualdad con variables de holgura adicionales para eliminar las restricciones de desigualdad del ``QuadraticProgram``. Los límites superiores y los límites inferiores de las variables de holgura se calcularán a partir de la diferencia entre el lado izquierdo y el lado derecho de las restricciones. Los signos de las variables de holgura dependen de los símbolos en restricciones como :math:`\\leq` y :math:`\\geq`."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:49
msgid "The following is an example of a maximization problem with two inequality constraints. Variable :math:`x` and :math:`y` are binary variables and variable :math:`z` is an integer variable."
msgstr "A continuación se muestra un ejemplo de un problema de maximización con dos restricciones de desigualdad. Las variables :math:`x` y :math:`y` son variables binarias y la variable :math:`z` es una variable entera."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:63
msgid "With ``QuadraticProgram``, an optimization model of the problem is written as follows."
msgstr "Con ``QuadraticProgram``, un modelo de optimización del problema se escribe de la siguiente manera."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:172
msgid "Call ``convert`` method of ``InequalityToEquality`` to convert."
msgstr "Llama al método ``convert`` de ``InequalityToEquality`` para convertirlo."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:280
msgid "After converting, the formulation of the problem looks like the above output. As we can see, the inequality constraints are replaced with equality constraints with additional integer slack variables, :math:`xyz\\_leg\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack`."
msgstr "Después de la conversión, la formulación del problema se parece al resultado anterior. Como podemos ver, las restricciones de desigualdad se reemplazan con restricciones de igualdad con variables de holgura (variables slack) enteras adicionales, :math:`xyz\\_leg\\text{@}int\\_slack` y :math:`xyz\\_geq\\text{@}int\\_slack`."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:282
msgid "Let us explain how the conversion works. For example, the lower bound of the left side of the first constraint is :math:`0` which is the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Thus, the upper bound of the additional integer variable must be :math:`5` to be able to satisfy even the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Note that we cut off the part after the decimal point in the converted formulation since the left side of the first constraint in the original formulation can be only integer values. For the second constraint, basically we apply the same approach. However, the symbol in the second constraint is :math:`\\geq`, so we add minus before :math:`xyz\\_geq\\text{@}int\\_slack` to be able to satisfy even the case of :math:`x=1, y=1`, and :math:`z=7`."
msgstr "Expliquemos cómo funciona la conversión. Por ejemplo, el límite inferior del lado izquierdo de la primera restricción es :math:`0` que es el caso de :math:`x=0`, :math:`y=0`, y :math:`z=0`. Por lo tanto, el límite superior de la variable entera adicional debe ser :math:`5` para poder satisfacer incluso el caso de :math:`x=0`, :math:`y=0`, y :math:`z=0`. Ten en cuenta que cortamos la parte después del punto decimal en la formulación convertida, ya que el lado izquierdo de la primera restricción en la formulación original puede ser solo valores enteros. Para la segunda restricción, básicamente aplicamos el mismo enfoque. Sin embargo, el símbolo en la segunda restricción es :math:`\\geq`, por lo que agregamos un signo menos antes de :math:`xyz\\_geq\\text{@}int\\_slack` para poder satisfacer incluso el caso de :math:`x=1, y=1`, y :math:`z=7`."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:299
msgid "Let us see how the ``interpret`` method works. The purpose of this method is to convert the solution of the converted problem back to that of the original problem. To use this method, we would first require to solve the problem. For the purpose of this tutorial, we will use docplex to solve. We will first translate the quadratic problem into a docplex.mp model."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:392
msgid "The result ``result_eq`` of ``qp_eq`` has 5 variable values (``x=1.0, y=1.0, z=3.0, xyz_leq@int_slack=0.0, xyz_geq@int_slack=2.0``) while result ``result_orig`` of the original ``qp`` has three values (``x=1.0, y=1.0, z=3.0``). We can call ``InequalityToEquality.interpret`` method by passing a list or an array to the method that has values of ``qp_eq.variables`` as follows. ``result_eq.x`` has the list of values that each variable takes in the solution in correspondence to their position in the variable list ``qp_eq.variables``."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:442
msgid "We notice that :math:`[1., 1., 3.]` are the values taken in the solution of the converted problem for the common variables between converted and original problems (variables: :math:`x`, :math:`y`, :math:`z`). The interpret method shows the same values are the solution of the original problem. This is because the objective function for the converted and original problems is exactly the same. The slack variables are just ensuring equality in the constraints of the converted problem, where the constraints are also exactly same between the original and converted problems, except that the original problem has inequality constraints."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:455
msgid "IntegerToBinary"
msgstr "IntegerToBinary"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:466
msgid "``IntegerToBinary`` converts integer variables into binary variables and coefficients to remove integer variables from ``QuadraticProgram``. For converting, bounded-coefficient encoding proposed in `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Eq. (5)) is used. For more detail of the encoding method, please see the paper."
msgstr "``IntegerToBinary`` convierte variables enteras en variables binarias y coeficientes para eliminar las variables enteras del ``QuadraticProgram``. Para convertir, se usa la codificación de coeficiente acotado propuesta en `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Eq. (5)). Para obtener más detalles sobre el método de codificación, consulta el documento dado."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:468
msgid "We use the output of ``InequalityToEquality`` as a starting point. Variables :math:`x` and :math:`y` are binary variables, while the variable :math:`z` and the slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` are integer variables. We print the problem again for reference."
msgstr "Usamos el resultado de ``InequalityToEquality`` como punto de partida. Las variables :math:`x` e :math:`y` son variables binarias, mientras que la variable :math:`z` y las variables de holgura :math:`xyz\\_leq\\text{@}int\\_slack` y :math:`xyz\\_geq\\text{@}int\\_slack` son variables enteras. Imprimimos el problema nuevamente como referencia."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:564
msgid "Call ``convert`` method of ``IntegerToBinary`` to convert."
msgstr "Llama al método ``convert`` de ``IntegerToBinary`` para convertirlo."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:666
msgid "After converting, the integer variable :math:`z` is replaced with three binary variables :math:`z\\text{@}0`, :math:`z\\text{@}1` and :math:`z\\text{@}2` with coefficients 1, 2 and 4, respectively as the above. The slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` that were introduced by ``InequalityToEquality`` are also both replaced with three binary variables with coefficients 1, 2, 2, and 1, 2, 3, respectively."
msgstr "Después de la conversión, la variable entera :math:`z` se reemplaza con tres variables binarias :math:`z\\text{@}0`, :math:`z\\text{@}1` y :math:`z\\text{@}2` con los coeficientes 1, 2 y 4, respectivamente, como los anteriores. Las variables de holgura :math:`xyz\\_leq\\text{@}int\\_slack` y :math:`xyz\\_geq\\text{@}int\\_slack` que fueron introducidas por ``InequalityToEquality`` también se reemplazan por tres variables binarias con los coeficientes 1, 2, 2 y 1, 2, 3, respectivamente."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:668
msgid "Note: Essentially the coefficients mean that the sum of these binary variables with coefficients can be the sum of a subset of :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, and :math:`\\{1, 2, 3\\}` to represent that acceptable values :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}`, and :math:`\\{0, \\ldots, 6\\}`, which respects the lower bound and the upper bound of original integer variables correctly."
msgstr "Nota: En esencia, los coeficientes significan que la suma de estas variables binarias con coeficientes puede ser la suma de un subconjunto de :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, y :math:`\\{1, 2, 3\\}` para representar los valores aceptables :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}`, y :math:`\\{0, \\ldots, 6\\}`, que respeta correctamente el límite inferior y el límite superior de las variables enteras originales."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:670
msgid "``IntegerToBinary`` also provides ``interpret`` method that is the functionality to translate a given binary result back to the original integer representation. Let us see how the ``interpret`` method works."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:751
msgid "``result_eq_bin`` has more binary variables due to the conversion by ``IntegerToBinary.convert``. ``IntegerToBinary.interpret`` translates them back to the integer values by aggregating binary variables values associated with the original integer variables of ``qp_eq``."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:801
msgid "LinearEqualityToPenalty"
msgstr "LineEqualityToPenalty"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:812
msgid "``LinearEqualityToPenalty`` converts linear equality constraints into additional quadratic penalty terms of the objective function to map ``QuadraticProgram`` to an unconstrained form. An input to the converter has to be a ``QuadraticProgram`` with only linear equality constraints. Those equality constraints, e.g. :math:`\\sum_i a_i x_i = b` where :math:`a_i` and :math:`b` are numbers and :math:`x_i` is a variable, will be added to the objective function in the form of :math:`M(b - \\sum_i a_i x_i)^2` where :math:`M` is a large number as penalty factor. By default :math:`M= 1e5`. The sign of the term depends on whether the problem type is a maximization or minimization."
msgstr "``LineeEqualityToPenalty`` convierte las restricciones de igualdad lineal en términos de penalización cuadráticos adicionales de la función objetivo para mapear el ``QuadraticProgram`` a una forma sin restricciones. Una entrada al convertidor tiene que ser un ``QuadraticProgram`` con sólo restricciones lineales de igualdad. Estas restricciones de igualdad, por ejemplo, :math:`\\sum_i a_i x_i = b` donde :math:`a_i` y :math:`b` son números y :math:`x_i` es una variable, se agregará a la función objetivo en la forma de :math:`M(b - \\sum_i a_i x_i)^2` donde :math:`M` es un número grande como factor de penalización. Por defecto, :math:`M= 1e5`. El signo del término depende de si el tipo de problema es de maximización o minimización."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:815
msgid "We use the output of ``IntegerToBinary`` as a starting point, where all variables are binary variables and all inequality constraints have been mapped to equality constraints. We print the problem again for reference."
msgstr "Utilizamos la salida de ``IntegerToBinary`` como punto de partida, donde todas las variables son variables binarias y todas las restricciones de desigualdad se han mapeado con restricciones de igualdad. Volvemos a imprimir el problema como referencia."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:905
msgid "Call ``convert`` method of ``LinearEqualityToPenalty`` to convert."
msgstr "Llama al método ``convert`` de ``LinearEqualityToPenalty`` para convertirlo."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:1070
msgid "After converting, the equality constraints are added to the objective function as additional terms with the default penalty factor provided by Qiskit optimization. The resulting problem is now a QUBO and compatible with many quantum optimization algorithms such as VQE, QAOA and so on."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:1081
msgid "This gives the same result as before."
msgstr "Esto da el mismo resultado que antes."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:1092
msgid "Like we did for the other converters, let us see how ``interpret`` method works for this case."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:1211
msgid "We can see that the result of the ``interpret`` method implies that both the original and converted problems have exactly the same solution. This is expected because the converted problem has exactly the same variables as the original problem, the objective has been modified in such a way that we do not have the constraints anymore in the converted problem."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:1222
msgid "Finally, let us see how we interpret the result of QUBO back to the solution of the original problem ``qp``. The following code shows that the interpreted values are equivalent to the result of the original problem ``qp``."
msgstr ""

