msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-11 21:12+0000\n"
"PO-Revision-Date: 2022-08-11 21:56\n"
"Last-Translator: \n"
"Language-Team: Spanish (United)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/01_quadratic_program.po\n"
"X-Crowdin-File-ID: 9642\n"
"Language: es_UN\n"

#: ../../tutorials/01_quadratic_program.ipynb:9
msgid "This page was generated from `docs/tutorials/01_quadratic_program.ipynb`__."
msgstr "Esta página fue generada a partir de `docs/tutorials/01_quadratic_program.ipynb`__."

#: ../../tutorials/01_quadratic_program.ipynb:9
msgid "Quadratic Programs"
msgstr "Programas Cuadráticos"

#: ../../tutorials/01_quadratic_program.ipynb:21
msgid "Introduction"
msgstr "Introducción"

#: ../../tutorials/01_quadratic_program.ipynb:32
msgid "In this tutorial, we briefly introduce how to build optimization problems using Qiskit’s optimization module. Qiskit introduces the ``QuadraticProgram`` class to make a model of an optimization problem. More precisely, it deals with quadratically constrained quadratic programs given as follows:"
msgstr "En este tutorial presentamos brevemente cómo construir problemas de optimización usando el módulo de optimización de Qiskit. Qiskit introduce la clase ``QuadraticProgram`` para hacer un modelo de un problema de optimización. Más precisamente, se ocupa de programas cuadráticamente restringidos que se dan de la siguiente manera:"

#: ../../tutorials/01_quadratic_program.ipynb:34
msgid "\\begin{align}\n"
"\\text{minimize}\\quad& x^\\top Q_0 x + c^\\top x\\\\\n"
"\\text{subject to}\\quad& A x \\leq b\\\\\n"
"& x^\\top Q_i x + a_i^\\top x \\leq r_i, \\quad 1,\\dots,i,\\dots,q\\\\\n"
"& l_i \\leq x_i \\leq u_i, \\quad 1,\\dots,i,\\dots,n,\n"
"\\end{align}"
msgstr "\\begin{align}\n"
"\\text{minimizar}\\quad& x^\\top Q_0 x + c^\\top x\\\\\n"
"\\text{sujeto a}\\quad& A x \\leq b\\\\\n"
"& x^\\top Q_i x + a_i^\\top x \\leq r_i, \\quad 1,\\dots,i,\\dots,q\\\\\n"
"& l_i \\leq x_i \\leq u_i, \\quad 1,\\dots,i,\\dots,n,\n"
"\\end{align}"

#: ../../tutorials/01_quadratic_program.ipynb:44
msgid "where the :math:`Q_i` are :math:`n \\times n` matrices, :math:`A` is a :math:`m \\times n` matrix , :math:`x`, and :math:`c` are :math:`n`-dimensional vectors, :math:`b` is an :math:`m`-dimensional vector, and where :math:`x` can be defined as binary, integer, or continuous variables. In addition to “:math:`\\leq`” constraints ``QuadraticProgram`` also supports “:math:`\\geq`” and “:math:`=`”."
msgstr "donde los :math:`Q_i` son matrices :math:`n \\times n`, :math:`A` es una matriz :math:`m \\times n`, :math:`x` y :math:`c` son vectores :math:`n`-dimensionales, :math:`b` es un vector :math:`m`-dimensional, y donde las :math:`x` se pueden definir como variables binarias, enteras o continuas. Además de las restricciones “:math:`\\leq`”, ``QuadraticProgram`` también admite “:math:`\\geq`” e “:math:`=`”."

#: ../../tutorials/01_quadratic_program.ipynb:56
msgid "Loading a ``QuadraticProgram`` from an LP file"
msgstr "Cargar un ``QuadraticProgram`` desde un archivo LP"

#: ../../tutorials/01_quadratic_program.ipynb:67
msgid "As setup, you need to import the following module."
msgstr "Como configuración, necesitas importar el siguiente módulo."

#: ../../tutorials/01_quadratic_program.ipynb:89
msgid "You start with an empty model. How to add variables and constraints to a model is explained in the section `Directly constructing a QuadraticProgram <#Directly-constructing-a-QuadraticProgram>`__."
msgstr "Comienzas con un modelo vacío. La forma de agregar variables y restricciones a un modelo se explica en la sección `Construir directamente un QuadraticProgram <#Directly-constructing-a-QuadraticProgram>`__."

#: ../../tutorials/01_quadratic_program.ipynb:100
msgid "Qiskit’s optimization module supports the conversion from Docplex model. You can easily make a model of an optimization problem with Docplex. You can find the documentation of Docplex at https://ibmdecisionoptimization.github.io/docplex-doc/mp/index.html"
msgstr "El módulo de optimización de Qiskit soporta la conversión del modelo Docplex. Puedes crear fácilmente un modelo de un problema de optimización con Docplex. Puedes encontrar la documentación de Docplex en https://ibmdecisionoptimization.github.io/docplex-doc/mp/index.html"

#: ../../tutorials/01_quadratic_program.ipynb:102
msgid "You can load a Docplex model to ``QuadraticProgram`` by using ``from_docplex_mp`` function."
msgstr "Puedes cargar un modelo Docplex en ``QuadraticProgram`` utilizando la función ``from_docplex_mp``."

#: ../../tutorials/01_quadratic_program.ipynb:114
msgid "Loading a ``QuadraticProgram`` from a docplex model"
msgstr "Carga de un ``QuadraticProgram`` desde un modelo docplex"

#: ../../tutorials/01_quadratic_program.ipynb:228
msgid "``QuadraticProgram`` has a method ``prettyprint`` to generate a comprehensive string representation."
msgstr "``QuadraticProgram`` tiene un método ``prettyprint`` para generar una representación completa de cadenas."

#: ../../tutorials/01_quadratic_program.ipynb:335
msgid "Directly constructing a ``QuadraticProgram``"
msgstr "Construir directamente un ``QuadraticProgram``"

#: ../../tutorials/01_quadratic_program.ipynb:346
msgid "We then explain how to make model of an optimization problem directly using ``QuadraticProgram``. Let’s start from an empty model."
msgstr "A continuación, explicamos cómo hacer el modelo de un problema de optimización directamente utilizando ``QuadraticProgram``. Empecemos con un modelo vacío."

#: ../../tutorials/01_quadratic_program.ipynb:420
msgid "The ``QuadraticProgram`` supports three types of variables:"
msgstr "El ``QuadraticProgram`` admite tres tipos de variables:"

#: ../../tutorials/01_quadratic_program.ipynb:422
msgid "Binary variable"
msgstr "Variable binaria"

#: ../../tutorials/01_quadratic_program.ipynb:423
msgid "Integer variable"
msgstr "Variable entera"

#: ../../tutorials/01_quadratic_program.ipynb:424
msgid "Continuous variable"
msgstr "Variable continua"

#: ../../tutorials/01_quadratic_program.ipynb:426
msgid "When you add variables, you can specify names, types, lower bounds and upper bounds."
msgstr "Cuando agregas variables, puedes especificar nombres, tipos, límites inferiores y límites superiores."

#: ../../tutorials/01_quadratic_program.ipynb:523
msgid "You can set the objective function by invoking ``QuadraticProgram.minimize`` or ``QuadraticProgram.maximize``. You can add a constant term as well as linear and quadratic objective function by specifying linear and quadratic terms with either list, matrix or dictionary."
msgstr "Puedes establecer la función objetivo invocando ``QuadraticProgram.minimize`` o ``QuadraticProgram.maximize``. Puedes añadir un término constante, así como una función objetivo lineal y cuadrática, especificando términos lineales y cuadráticos con una lista, una matriz o un diccionario."

#: ../../tutorials/01_quadratic_program.ipynb:525
msgid "Note that in the LP format the quadratic part has to be scaled by a factor :math:`1/2`. Thus, when printing as LP format, the quadratic part is first multiplied by 2 and then divided by 2 again."
msgstr "Ten en cuenta que en el formato LP la parte cuadrática tiene que ser escalada por un factor de :math:`1/2`. Por lo tanto, cuando se imprime como formato LP, la parte cuadrática se multiplica primero por 2 y luego se divide entre 2 de nuevo."

#: ../../tutorials/01_quadratic_program.ipynb:527
msgid "For quadratic programs, there are 3 pieces that have to be specified: a constant (offset), a linear term (:math:`c^{T}x`), and a quadratic term (:math:`x^{T}Qx`)."
msgstr "Para los programas cuadráticos, hay 3 piezas que se deben de especificar: una constante (compensación u offset), un término lineal (:math:`c^{T}x`), y un término cuadrático (:math:`x^{T}Qx`)."

#: ../../tutorials/01_quadratic_program.ipynb:529
msgid "The cell below shows how to declare an objective function using a dictionary. For the linear term, keys in the dictionary correspond to variable names, and the corresponding values are the coefficients. For the quadratic term, keys in the dictionary correspond to the two variables being multiplied, and the values are again the coefficients."
msgstr "La siguiente celda muestra cómo declarar una función objetivo utilizando un diccionario. Para el término lineal, las claves en el diccionario corresponden a nombres de variables, y los valores correspondientes son los coeficientes. Para el término cuadrático, las claves en el diccionario corresponden a las dos variables que se están multiplicando, y los valores son de nuevo los coeficientes."

#: ../../tutorials/01_quadratic_program.ipynb:624
msgid "Another way to specify the quadratic program is using arrays. For the linear term, the array corresponds to the vector :math:`c` in the mathematical formulation. For the quadratic term, the array corresponds to the matrix :math:`Q`. Note that the ordering of the variables (:math:`x` in the mathematical formulation) is the order in which the variables were originally declared in the ``QuadraticProgram`` object."
msgstr "Otra forma de especificar el programa cuadrático es usando arreglos. Para el término lineal, el arreglo corresponde al vector :math:`c` en la formulación matemática. Para el término cuadrático, el arreglo corresponde a la matriz :math:`Q`. Ten en cuenta que el orden de las variables (:math:`x` en la formulación matemática) es el orden en el que las variables fueron declaradas originalmente en el objeto ``QuadraticProgram``."

#: ../../tutorials/01_quadratic_program.ipynb:719
msgid "You can access the constant, the linear term, and the quadratic term by looking at ``Quadratic.objective.{constant, linear, quadratic}``, respectively. As for linear and quadratic terms, you can get a dense matrix (``to_array``), a sparse matrix (``coefficients``), and a dictionary (``to_dict``). For dictionaries, you can specify whether to use variable indices or names as keys. Note that the quadratic terms are stored in a compressed way, e.g., ``{('x', 'y'): 1, ('y', 'x'): 2}`` is stored as ``{('x', 'y'): 3}``. You can get the quadratic term as a symmetric matrix by calling ``to_array(symmetric=True)`` or ``to_dict(symmetric=True)``. If you call ``to_dict(name=True)``, you can get a dictionary whose keys are pairs of variable names."
msgstr "Puedes acceder a la constante, el término lineal y el término cuadrático mediante ``Quadratic.objective.{constant, linear, quadratic}``, respectivamente. En cuanto a los términos lineales y cuadráticos, puedes obtener una matriz densa (``to_array``), una matriz dispersa (``coefficients``), y un diccionario (``to_dict``). Para los diccionarios, puedes especificar si usar los índices de variables o los nombres como claves. Ten en cuenta que los términos cuadráticos se almacenan de una manera comprimida, por ejemplo, ``{('x', 'y'): 1, ('y', 'x'): 2}`` se almacena como ``{('x', 'y'): 3}``. Puedes obtener el término cuadrático como una matriz simétrica llamando a ``to_array(symmetric=True)`` o ``to_dict(symmetric=True)``. Si llamas a ``to_dict(name=True)``, puedes obtener un diccionario cuyas claves son pares de nombres de variables."

#: ../../tutorials/01_quadratic_program.ipynb:841
msgid "Adding/removing linear and quadratic constraints"
msgstr "Agregar/eliminar restricciones lineales y cuadráticas"

#: ../../tutorials/01_quadratic_program.ipynb:852
msgid "You can add linear constraints by setting name, linear expression, sense and right-hand-side value (rhs). You can use senses ‘EQ’, ‘LE’, and ‘GE’ as Docplex supports."
msgstr "Puedes agregar restricciones lineales estableciendo un nombre, expresión lineal, sentido y el valor del lado derecho (right-hand-side, rhs). Puedes utilizar los sentidos ‘EQ’, ‘LE’, y ‘GE’ como lo soporta Docplex."

#: ../../tutorials/01_quadratic_program.ipynb:958
msgid "You can add quadratic constraints as well as objective function and linear constraints."
msgstr "Puedes añadir restricciones cuadráticas, así como funciones objetivo y restricciones lineales."

#: ../../tutorials/01_quadratic_program.ipynb:1097
msgid "You can access linear and quadratic terms of linear and quadratic constraints as in the same way as the objective function."
msgstr "Puedes acceder a términos lineales y cuadráticos de restricciones cuadráticas y lineales como del mismo modo que la función objetivo."

#: ../../tutorials/01_quadratic_program.ipynb:1154
msgid "You can also remove linear/quadratic constraints by ``remove_linear_constraint`` and ``remove_quadratic_constraint``."
msgstr "También puedes eliminar restricciones lineales/cuadráticas con ``remove_linear_constraint`` y ``remove_quadratic_constraint``."

#: ../../tutorials/01_quadratic_program.ipynb:1268
msgid "You can substitute some of variables with constants or other variables. More precisely, ``QuadraticProgram`` has a method ``substitute_variables(constants=..., variables=...)`` to deal with the following two cases."
msgstr "Puedes sustituir algunas de las variables con constantes u otras variables. Más precisamente, ``QuadraticProgram`` tiene un método ``substitute_variables(constants=..., variables=...)`` para tratar los dos casos siguientes."

#: ../../tutorials/01_quadratic_program.ipynb:1270
msgid ":math:`x \\leftarrow c`: when ``constants`` have a dictionary ``{x: c}``."
msgstr ":math:`x \\leftarrow c`: cuando ``constants`` tenga un diccionario ``{x: c}``."

#: ../../tutorials/01_quadratic_program.ipynb:1271
msgid ":math:`x \\leftarrow c y`: when ``variables`` have a dictionary ``{x: (y, c)}``."
msgstr ":math:`x \\leftarrow c y`: cuando ``variables`` tenga un diccionario ``{x: (y, c)}``."

#: ../../tutorials/01_quadratic_program.ipynb:1283
msgid "Substituting Variables"
msgstr "Sustituir Variables"

#: ../../tutorials/01_quadratic_program.ipynb:1377
msgid "If the resulting problem is infeasible due to lower bounds or upper bounds, the methods returns the status ``Status.INFEASIBLE``. We try to replace variable ``x`` with -1, but -1 is out of range of ``x`` (0 <= ``x`` <= 1). So, it returns ``Status.INFEASIBLE``."
msgstr "Si el problema resultante es inviable debido a los límites inferiores o superiores, los métodos devuelven el estado ``Status.INFEASIBLE``. Intentamos reemplazar la variable ``x`` por -1, pero -1 está fuera del rango de ``x`` (0 <= ``x`` <= 1). Por lo tanto, se devuelve ``Status.INFEASIBLE``."

#: ../../tutorials/01_quadratic_program.ipynb:1449
msgid "You cannot substitute variables multiple times. The method raises an error in such a case."
msgstr "No puedes sustituir variables varias veces. El método devuelve un error en tal caso."

#: ../../tutorials/01_quadratic_program.ipynb:1499
msgid "Note: When you display your problem as LP format using ``export_as_lp_string``, ``Binaries`` denotes binary variables and ``Generals`` denotes integer variables. If variables are not included in either ``Binaries`` or ``Generals``, such variables are continuous ones with default lower bound = 0 and upper bound = infinity. Note that you cannot use ‘e’ or ‘E’ as the first character of names due to the `specification of LP format <https://www.ibm.com/docs/en/icos/22.1.0?topic=representation-variable-names-in-lp-file-format>`__."
msgstr "Nota: Cuando muestras tu problema en formato LP usando ``export_as_lp_string``, ``Binaries`` denota variables binarias y ``Generals`` denota variables enteras. Si las variables no están incluidas en ``Binaries`` o ``Generals``, dichas variables son continuas con el límite inferior predeterminado = 0 y el límite superior = infinito. Ten en cuenta que no puedes utilizar ‘e’ o ‘E’ como el primer carácter de los nombres debido a la `especificación del formato LP <https://www.ibm.com/docs/en/icos/22.1.0?topic=representation-variable-names-in-lp-file-format>`__."

