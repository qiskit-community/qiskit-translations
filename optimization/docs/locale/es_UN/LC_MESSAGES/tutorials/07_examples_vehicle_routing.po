msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-29 20:52+0000\n"
"PO-Revision-Date: 2021-07-29 21:12\n"
"Last-Translator: \n"
"Language-Team: Spanish (United)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/07_examples_vehicle_routing.po\n"
"X-Crowdin-File-ID: 9654\n"
"Language: es_UN\n"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:9
msgid "This page was generated from `docs/tutorials/07_examples_vehicle_routing.ipynb`__."
msgstr "Esta página fue generada a partir de `docs/tutorials/07_examples_vehicle_routing.ipynb`__."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:9
msgid "Vehicle Routing"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:12
msgid "The Introduction"
msgstr "Introducción"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:14
msgid "Logistics is a major industry, with some estimates valuing it at USD 8183 billion globally in 2015. Most service providers operate a number of vehicles (e.g., trucks and container ships), a number of depots, where the vehicles are based overnight, and serve a number of client locations with each vehicle during each day. There are many optimization and control problems that consider these parameters. Computationally, the key challenge is how to design routes from depots to a number of client locations and back to the depot, so as to minimize vehicle-miles traveled, time spent, or similar objective functions. In this notebook we formalize an idealized version of the problem and showcase its solution using the quantum approximate optimization approach of Farhi, Goldstone, and Gutmann (2014)."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:17
msgid "The overall workflow we demonstrate comprises:"
msgstr "El flujo de trabajo en general que demostramos comprende:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:19
msgid "establish the client locations. Normally, these would be available ahead of the day of deliveries from a database. In our use case, we generate these randomly."
msgstr "establecer las ubicaciones de los clientes. Normalmente, estos estarían disponibles antes del día de las entregas desde una base de datos. En nuestro caso de uso, los generamos aleatoriamente."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:21
msgid "compute the pair-wise distances, travel times, or similar. In our case, we consider the Euclidean distance, “as the crow flies”, which is perhaps the simplest possible."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:23
msgid "compute the actual routes. This step is run twice, actually. First, we obtain a reference value by a run of a classical solver (IBM CPLEX) on the classical computer. Second, we run an alternative, hybrid algorithm partly on the quantum computer."
msgstr "calcula las rutas reales. Este paso se ejecuta dos veces, en realidad. Primero, obtenemos un valor de referencia por una ejecución de un solver clásico (IBM CPLEX) en el ordenador clásico. En segundo lugar, ejecutamos un algoritmo híbrido alternativo parcialmente en la computadora cuántica."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:25
msgid "visualization of the results. In our case, this is again a simplistic plot."
msgstr "visualización de los resultados. En nuestro caso esto, de nuevo, es una simple gráfica."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:27
msgid "In the following, we first explain the model, before we proceed with the installation of the pre-requisites and the data loading."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:30
msgid "The Model"
msgstr "El Modelo"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:32
msgid "Mathematically speaking, the vehicle routing problem (VRP) is a combinatorial problem, wherein the best routes from a depot to a number of clients and back to the depot are sought, given a number of available vehicles. There are a number of formulations possible, extending a number of formulations of the traveling salesman problem [Applegate et al, 2006]. Here, we present a formulation known as MTZ [Miller, Tucker, Zemlin, 1960]."
msgstr "Matemáticamente hablando, el problema de generación de rutas para vehículos (vehicle routing problem, VRP) es un problema combinatorio, en el que se buscan las mejores rutas desde un depósito a varios clientes y de regreso al depósito, dado el número de vehículos disponibles. Hay varias formulaciones posibles, que amplían una serie de formulaciones del problema del vendedor viajero [Applegate et al, 2006]. A continuación, presentamos una formulación conocida como MTZ [Miller, Tucker, Zemlin, 1960]."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:34
msgid "Let :math:`n` be the number of clients (indexed as :math:`1,\\dots,n`), and :math:`K` be the number of available vehicles. Let :math:`x_{ij} = \\{0,1\\}` be the binary decision variable which, if it is :math:`1`, activates the segment from node :math:`i` to node :math:`j`. The node index runs from :math:`0` to :math:`n`, where :math:`0` is (by convention) the depot. There are twice as many distinct decision variables as edges. For example, in a fully connected graph, there are :math:`n(n+1)` binary decision variables."
msgstr "Sea :math:`n` el número de clientes (indexado como :math:`1,\\dots,n`) y :math:`K` el número de vehículos disponibles. Sea :math:`x_{ij} = \\{0,1\\}` la variable de decisión binaria que, si es :math:`1`, activa el segmento desde el nodo :math:`i` al nodo :math:`j`. El índice de nodo va desde :math:`0` a :math:`n`, donde :math:`0` es (por convención) el depósito. Hay el doble de variables de decisión distintas que de aristas. Por ejemplo, en un grafo completamente conectado, hay :math:`n(n+1)` variables de decisión binarias."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:37
msgid "If two nodes :math:`i` and :math:`j` have a link from :math:`i` to :math:`j`, we write :math:`i \\sim j`. We also denote with :math:`\\delta(i)^+` the set of nodes to which :math:`i` has a link, i.e., :math:`j \\in \\delta(i)^+` if and only if :math:`i \\sim j`. Similarly, we denote with :math:`\\delta(i)^-` the set of nodes which are connected to :math:`i`, in the sense that :math:`j \\in \\delta(i)^-` if and only if :math:`j \\sim i`."
msgstr "Si dos nodos :math:`i` y :math:`j` tienen un enlace desde :math:`i` a :math:`j`, escribimos :math:`i \\sim j`. También denotamos con :math:`\\delta(i)^+` el conjunto de nodos a los que :math:`i` tiene un enlace, es decir, :math:`j \\in \\delta(i)^+` si y solo si :math:`i \\sim j`. De manera similar, denotamos con :math:`\\delta(i)^-` el conjunto de nodos que están conectados a :math:`i`, en el sentido de que :math:`j \\in \\delta(i)^-` si y solo si :math:`j \\sim i`."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:39
msgid "In addition, we consider continuous variables, for all nodes :math:`i = 1,\\dots, n`, denoted :math:`u_i`. These variables are needed in the MTZ formulation of the problem to eliminate sub-tours between clients."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:41
msgid "The VRP can be formulated as:"
msgstr "El VRP puede formularse como:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:43
msgid "(VRP) \\quad  f = \\min_{\\{x_{ij}\\}_{i\\sim j}\\in \\{0,1\\}, \\{u_i\\}_{i=1,\\dots,n}\\in \\mathbb{R}} \\quad \\sum_{i \\sim j} w_{ij} x_{ij}"
msgstr "(VRP) \\quad  f = \\min_{\\{x_{ij}\\}_{i\\sim j}\\in \\{0,1\\}, \\{u_i\\}_{i=1,\\dots,n}\\in \\mathbb{R}} \\quad \\sum_{i \\sim j} w_{ij} x_{ij}"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:48
msgid "subject to the node-visiting constraint:"
msgstr "sujeto a la restricción de visita de nodos:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:50
msgid "\\sum_{j \\in \\delta(i)^+} x_{ij} = 1, \\,\\sum_{j \\in \\delta(i)^-} x_{ji} = 1,\\, \\forall i \\in \\{1,\\dots,n\\},"
msgstr "\\sum_{j \\in \\delta(i)^+} x_{ij} = 1, \\,\\sum_{j \\in \\delta(i)^-} x_{ji} = 1,\\, \\forall i \\in \\{1,\\dots,n\\},"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:55
msgid "the depot-visiting constraints:"
msgstr "las restricciones de las visitas al depósito:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:57
msgid "\\sum_{i \\in \\delta(0)^+} x_{0i} = K, \\, \\sum_{j \\in \\delta(0)^+} x_{j0} = K,"
msgstr "\\sum_{i \\in \\delta(0)^+} x_{0i} = K, \\, \\sum_{j \\in \\delta(0)^+} x_{j0} = K,"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:62
msgid "and the sub-tour elimination constraints:"
msgstr "y las restricciones de eliminación del sub-recorrido:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:64
msgid "u_i - u_j + Q x_{ij} \\leq Q-q_j, \\, \\forall i \\sim j, \\,i ,j \\neq 0, \\quad q_i \\leq u_i \\leq Q,\\, \\forall i, i \\neq 0."
msgstr "u_i - u_j + Q x_{ij} \\leq Q-q_j, \\, \\forall i \\sim j, \\,i ,j \\neq 0, \\quad q_i \\leq u_i \\leq Q,\\, \\forall i, i \\neq 0."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:69
msgid "In particular, - The cost function is linear in the cost functions and weighs the different arches based on a positive weight :math:`w_{ij}>0` (typically the distance between node :math:`i` and node :math:`j`); - The first set of constraints enforce that from and to every client, only one link is allowed; - The second set of constraints enforce that from and to the depot, exactly :math:`K` links are allowed; - The third set of constraints enforce the sub-tour elimination constraints and are bounds on :math:`u_i`, with :math:`Q>q_j>0`, and :math:`Q,q_i \\in \\mathbb{R}`."
msgstr "En particular, - La función de costo es lineal en las funciones de costo y pesa los diferentes arcos en función de un peso positivo :math:`w_{ij}>0` (normalmente la distancia entre el nodo :math:`i` y el nodo :math:`j`); - El primer conjunto de restricciones impone que desde y hacia cada cliente, solo se permite un enlace; - El segundo conjunto de restricciones impone eso desde y hacia el depósito, exactamente :math:`K` enlaces son permitidos; - El tercer conjunto de restricciones impone las restricciones de eliminación del sub-recorrido y son límites en :math:`u_i`, con :math:`Q>q_j>0`, y :math:`Q,q_i \\in \\mathbb{R}`."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:73
msgid "Classical solution"
msgstr "Solución clásica"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:75
msgid "We can solve the VRP classically, e.g., by using CPLEX. CPLEX uses a branch-and-bound-and-cut method to find an approximate solution of the VRP, which, in this formulation, is a mixed-integer linear program (MILP). For the sake of notation, we pack the decision variables in one vector as"
msgstr "Podemos resolver el VRP de forma clásica, por ejemplo, utilizando CPLEX. CPLEX usa un método de bifurcación y unión y corte para encontrar una solución aproximada del VRP, que, en esta formulación, es un programa lineal de enteros mixtos (MILP). En aras de la notación, empaquetamos las variables de decisión en un vector como"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:77
msgid "{\\bf z} = [x_{01},x_{02},\\ldots,x_{10}, x_{12},\\ldots,x_{n(n-1)}]^T,"
msgstr "{\\bf z} = [x_{01},x_{02},\\ldots,x_{10}, x_{12},\\ldots,x_{n(n-1)}]^T,"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:82
msgid "wherein :math:`{\\bf z} \\in \\{0,1\\}^N`, with :math:`N = n (n+1)`. So the dimension of the problem scales quadratically with the number of nodes. Let us denote the optimal solution by :math:`{\\bf z}^*`, and the associated optimal cost :math:`f^*`."
msgstr "donde :math:`{\\bf z} \\in \\{0,1\\}^N`, con :math:`N = n (n+1)`. Entonces, la dimensión del problema se escala cuadráticamente con el número de nodos. Denotemos la solución óptima con :math:`{\\bf z}^*`, y el costo óptimo asociado :math:`f^*`."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:85
msgid "Quantum solution"
msgstr "Solución cuántica"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:87
msgid "Here, we demonstrate an approach that combines classical and quantum computing steps, following the quantum approximate optimization approach of Farhi, Goldstone, and Gutmann (2014). In particular, we use the variational quantum eigensolver (VQE). We stress that given the use of limited depth of the quantum circuits employed (variational forms), it is hard to discuss the speed-up of the algorithm, as the solution obtained is heuristic in nature. At the same time, due to the nature and importance of the target problems, it is worth investigating heuristic approaches, which may be worthwhile for some problem classes."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:90
msgid "Following [5], the algorithm can be summarized as follows:"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:92
msgid "Preparation steps:"
msgstr "Pasos de preparación:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:94
msgid "Transform the combinatorial problem into a binary polynomial optimization problem with equality constraints only;"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:95
msgid "Map the resulting problem into an Ising Hamiltonian (:math:`H`) for variables :math:`{\\bf z}` and basis :math:`Z`, via penalty methods if necessary;"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:96
msgid "Choose the depth of the quantum circuit :math:`m`. Note that the depth can be modified adaptively."
msgstr "Elegir la profundidad del circuito cuántico :math:`m`. Se debe tener en cuenta que la profundidad se puede modificar de forma adaptativa."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:97
msgid "Choose a set of controls :math:`\\theta` and make a trial function :math:`\\big|\\psi(\\boldsymbol\\theta)\\rangle`, built using a quantum circuit made of C-Phase gates and single-qubit Y rotations, parameterized by the components of :math:`\\boldsymbol\\theta`."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:99
msgid "Algorithm steps:"
msgstr "Pasos del algoritmo:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:101
msgid "Evaluate :math:`C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)\\big|H\\big|\\psi(\\boldsymbol\\theta)\\rangle` by sampling the outcome of the circuit in the Z-basis and adding the expectation values of the individual Ising terms together. In general, different control points around :math:`\\boldsymbol\\theta` have to be estimated, depending on the classical optimizer chosen."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:102
msgid "Use a classical optimizer to choose a new set of controls."
msgstr "Utilice un optimizador clásico para elegir un nuevo conjunto de controles."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:103
msgid "Continue until :math:`C(\\boldsymbol\\theta)` reaches a minimum, close enough to the solution :math:`\\boldsymbol\\theta^*`."
msgstr "Continúa hasta que :math:`C(\\boldsymbol\\theta)` alcance un mínimo, lo suficientemente cercano a la solución :math:`\\boldsymbol\\theta^*`."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:104
msgid "Use the last :math:`\\boldsymbol\\theta` to generate a final set of samples from the distribution :math:`\\Big|\\langle z_i\\big|\\psi(\\boldsymbol\\theta)\\rangle\\Big|^2\\;\\forall i` to obtain the answer."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:106
msgid "There are many parameters throughout, notably the choice of the trial wavefunction. Below, we consider:"
msgstr "Hay muchos parámetros en todo momento, en particular la elección de la función de onda de prueba. A continuación, consideramos:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:108
msgid "\\big|\\psi(\\theta)\\rangle = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m \\big|+\\rangle"
msgstr "\\big|\\psi(\\theta)\\rangle = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m \\big|+\\rangle"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:113
msgid "where :math:`U_\\mathrm{entangler}` is a collection of C-Phase gates (fully-entangling gates), and :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^N Y(\\theta_{i})`, where :math:`N` is the number of qubits and :math:`m` is the depth of the quantum circuit."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:116
msgid "Construct the Ising Hamiltonian"
msgstr "Construir el Hamiltoniano de Ising"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:118
msgid "From :math:`VRP` one can construct a binary polynomial optimization with equality constraints only by considering cases in which :math:`K=n-1`. In these cases the sub-tour elimination constraints are not necessary and the problem is only on the variable :math:`{\\bf z}`. In particular, we can write an augmented Lagrangian as"
msgstr "De :math:`VRP` se puede construir una optimización polinomial binaria con restricciones de igualdad solo considerando los casos en los que :math:`K=n-1`. En estos casos, las restricciones de eliminación del sub-recorrido no son necesarias y el problema está solo en la variable :math:`{\\bf z}`. En particular, podemos escribir un Lagrangiano aumentado como"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:120
msgid "(IH) \\quad H = \\sum_{i \\sim j} w_{ij} x_{ij}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big(\\sum_{j \\in \\delta(i)^+} x_{ij} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big(\\sum_{j \\in \\delta(i)^-} x_{ji} - 1\\Big)^2 +A \\Big(\\sum_{i \\in \\delta(0)^+} x_{0i} - K\\Big)^2 + A\\Big(\\sum_{j \\in \\delta(0)^+} x_{j0} - K\\Big)^2"
msgstr "(IH) \\quad H = \\sum_{i \\sim j} w_{ij} x_{ij}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big(\\sum_{j \\in \\delta(i)^+} x_{ij} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big(\\sum_{j \\in \\delta(i)^-} x_{ji} - 1\\Big)^2 +A \\Big(\\sum_{i \\in \\delta(0)^+} x_{0i} - K\\Big)^2 + A\\Big(\\sum_{j \\in \\delta(0)^+} x_{j0} - K\\Big)^2"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:125
msgid "where :math:`A` is a big enough parameter."
msgstr "donde :math:`A` es un parámetro suficientemente grande."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:128
msgid "From Hamiltonian to QP formulation"
msgstr "Del Hamiltoniano a la formulación QP"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:130
msgid "In the vector :math:`{\\bf z}`, and for a complete graph (:math:`\\delta(i)^+ = \\delta(i)^- = \\{0,1,\\dots,i-1,i+1,\\dots,n\\}`), :math:`H` can be written as follows."
msgstr "En el vector :math:`{\\bf z}`, y para un grafo completo (:math:`\\delta(i)^+ = \\delta(i)^- = \\{0,1,\\dots,i-1,i+1,\\dots,n\\}`), :math:`H` se puede escribir de la siguiente manera."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:132
msgid "\\min_{{\\bf z}\\in \\{0,1\\}^{n(n+1)}} {\\bf w}^T {\\bf z}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big({\\bf e}_i \\otimes {\\bf 1}_n^T {\\bf z} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big({\\bf v}_i^T {\\bf z} - 1\\Big)^2 + A \\Big(({\\bf e}_0 \\otimes {\\bf 1}_n)^T{\\bf z} - K\\Big)^2 + A\\Big({\\bf v}_0^T{\\bf z} - K\\Big)^2."
msgstr "\\min_{{\\bf z}\\in \\{0,1\\}^{n(n+1)}} {\\bf w}^T {\\bf z}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big({\\bf e}_i \\otimes {\\bf 1}_n^T {\\bf z} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big({\\bf v}_i^T {\\bf z} - 1\\Big)^2 + A \\Big(({\\bf e}_0 \\otimes {\\bf 1}_n)^T{\\bf z} - K\\Big)^2 + A\\Big({\\bf v}_0^T{\\bf z} - K\\Big)^2."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:137
msgid "That is:"
msgstr "Esto es:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:139
msgid "\\min_{\\bf z\\in \\{0,1\\}^{n(n+1)}} \\bf z^T {\\bf Q} \\bf z + {\\bf g}^T \\bf z + c,"
msgstr "\\min_{\\bf z\\in \\{0,1\\}^{n(n+1)}} \\bf z^T {\\bf Q} \\bf z + {\\bf g}^T \\bf z + c,"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:144
msgid "Where: first term:"
msgstr "Donde: el primer término:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:146
msgid "{\\bf Q} = A \\sum_{i \\in \\{0,1,\\dots,n\\}}  \\Big[({\\bf e}_i \\otimes {\\bf 1}_n)({\\bf e}_i \\otimes {\\bf 1}_n)^T + {\\bf v}_i{\\bf v}_i^T \\Big]"
msgstr "{\\bf Q} = A \\sum_{i \\in \\{0,1,\\dots,n\\}}  \\Big[({\\bf e}_i \\otimes {\\bf 1}_n)({\\bf e}_i \\otimes {\\bf 1}_n)^T + {\\bf v}_i{\\bf v}_i^T \\Big]"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:151
msgid "Second term:"
msgstr "Segundo término:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:153
msgid "{\\bf g} = {\\bf w} -2 A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big[({\\bf e}_i \\otimes {\\bf 1}_n) + {\\bf v}_i \\Big] -2 A K \\Big[({\\bf e}_0 \\otimes {\\bf 1}_n) + {\\bf v}_0 \\Big]"
msgstr "{\\bf g} = {\\bf w} -2 A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big[({\\bf e}_i \\otimes {\\bf 1}_n) + {\\bf v}_i \\Big] -2 A K \\Big[({\\bf e}_0 \\otimes {\\bf 1}_n) + {\\bf v}_0 \\Big]"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:158
msgid "Third term:"
msgstr "Tercer término:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:160
msgid "c = 2An +2AK^2."
msgstr "c = 2An +2AK^2."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:165
msgid "The QP formulation of the Ising Hamiltonian is ready for the use of VQE. We will solve the QP using optimization stack available in Qiskit."
msgstr "La formulación QP del Hamiltoniano de Ising está lista para el uso de VQE. Resolveremos el QP usando la pila de optimización disponible en Qiskit."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:168
msgid "References"
msgstr "Referencias"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:170
msgid "[1] E. Farhi, J. Goldstone, S. Gutmann e-print arXiv 1411.4028, 2014"
msgstr "[1] E. Farhi, J. Goldstone, S. Gutmann e-print arXiv 1411.4028, 2014"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:172
msgid "[2] `Max-Cut and Traveling Salesman Problem <./06_examples_max_cut_and_tsp.ipynb>`__"
msgstr "[2] `Max-Cut and Traveling Salesman Problem <./06_examples_max_cut_and_tsp.ipynb>`__"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:174
msgid "[3] C. E. Miller, E. W. Tucker, and R. A. Zemlin (1960). “Integer Programming Formulations and Travelling Salesman Problems”. J. ACM. 7: 326–329. doi:10.1145/321043.321046."
msgstr "[3] C. E. Miller, E. W. Tucker, and R. A. Zemlin (1960). “Integer Programming Formulations and Travelling Salesman Problems”. J. ACM. 7: 326–329. doi:10.1145/321043.321046."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:176
msgid "[4] D. L. Applegate, R. M. Bixby, V. Chvátal, and W. J. Cook (2006). The Traveling Salesman Problem. Princeton University Press, ISBN 978-0-691-12993-8."
msgstr "[4] D. L. Applegate, R. M. Bixby, V. Chvátal, and W. J. Cook (2006). The Traveling Salesman Problem. Princeton University Press, ISBN 978-0-691-12993-8."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:188
msgid "Initialization"
msgstr "Inicialización"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:190
msgid "First of all we load all the packages that we need: - Python 3.6 or greater is required; - CPLEX 12.8 or greater is required for the classical computations; - Latest Qiskit is required for the quantum computations."
msgstr "En primer lugar cargamos todos los paquetes que necesitamos: - Se requiere Python 3.6 o superior; - Se requiere CPLEX 12.8 o superior para los cálculos clásicos; - Se requiere la última versión de Qiskit para los cálculos cuánticos."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:252
msgid "We then initialize the variables"
msgstr "Luego inicializamos las variables"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:275
msgid "We define an initializer class that randomly places the nodes in a 2-D plane and computes the distance between them."
msgstr "Definimos una clase de inicialización que coloca aleatoriamente los nodos en un plano 2-D y calcula la distancia entre ellos."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:331
msgid "Classical solution using IBM ILOG CPLEX"
msgstr "Solución clásica utilizando IBM ILOG CPLEX"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:333
msgid "For a classical solution, we use IBM ILOG CPLEX. CPLEX is able to find the exact solution of this problem. We first define a ClassicalOptimizer class that encodes the problem in a way that CPLEX can solve, and then instantiate the class and solve it."
msgstr "Para una solución clásica, utilizamos IBM ILOG CPLEX. CPLEX puede encontrar la solución exacta de este problema. Primero definimos una clase ClassicalOptimizer que codifica el problema de una manera que CPLEX pueda resolver, y luego instanciamos la clase y la resolvemos."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:542
msgid "If you have CPLEX, the solution shows the depot with a star and the selected routes for the vehicles with arrows."
msgstr "Si tienes CPLEX, la solución muestra el depósito con una estrella y las rutas seleccionadas para los vehículos con flechas."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:554
msgid "Quantum solution from the ground up"
msgstr "Solución cuántica desde cero"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:556
msgid "For the quantum solution, we use Qiskit."
msgstr "Para la solución cuántica, utilizamos Qiskit."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:558
msgid "First, we derive the solution from the ground up, using a class QuantumOptimizer that encodes the quantum approach to solve the problem and then we instantiate it and solve it. We define the following methods inside the class: - ``binary_representation`` : encodes the problem :math:`(M)` into a QP terms (that’s basically linear algebra); - ``construct_problem`` : constructs a QUBO optimization problem as an instance of ``QuadraticProgram``; - ``solve_problem``: solves the problem :math:`(M)` constructed at the previous step via ``MinimunEigenOptimizer`` by using VQE with default parameters;"
msgstr "Primero, derivamos la solución desde cero, usando una clase QuantumOptimizer que codifica el enfoque cuántico para resolver el problema y luego lo instanciamos y lo resolvemos. Definimos los siguientes métodos dentro de la clase: - ``binary_representation``: codifica el problema :math:`(M)` en términos QP (que es básicamente álgebra lineal); - ```construct_problem``: construye un problema de optimización QUBO como una instancia de ``QuadraticProgram``; - ``solve_problem``: resuelve el problema :math:`(M)` construido en el paso anterior a través de ``MinimunEigenOptimizer`` usando VQE con los parámetros predeterminados;"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:669
msgid "Step 1"
msgstr "Paso 1"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:671
msgid "Instantiate the quantum optimizer class with parameters: - the instance; - the number of nodes and vehicles ``n`` and ``K``;"
msgstr "Crear una instancia de la clase del optimizador cuántico con parámetros: - la instancia; - el número de nodos y vehículos ``n`` y ``K``;"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:694
msgid "Step 2"
msgstr "Paso 2"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:696
msgid "Encode the problem as a binary formulation (IH-QP)."
msgstr "Codificar el problema como una formulación binaria (IH-QP)."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:698
msgid "Sanity check: make sure that the binary formulation in the quantum optimizer is correct (i.e., yields the same cost given the same solution)."
msgstr "Comprobación: asegurarse que la formulación binaria del optimizador cuántico es correcta (es decir, que da el mismo costo dada la misma solución)."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:755
msgid "Step 3"
msgstr "Paso 3"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:757
msgid "Encode the problem as an instance of ``QuadraticProgram``."
msgstr "Codificar el problema como una instancia de ``QuadraticProgram``."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:779
msgid "Step 4"
msgstr "Paso 4"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:781
msgid "Solve the problem via ``MinimumEigenOptimizer`` from the optimization stack. N.B. Depending on the number of qubits, the state-vector simulation can take a while; for example with 12 qubits, it takes more than 12 hours. Logging is useful to see what the program is doing."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:824
msgid "Step 5"
msgstr "Paso 5"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:826
msgid "Visualize the solution"
msgstr "Visualizar la solución"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:869
msgid "The plots present the depot with a star and the selected routes for the vehicles with arrows. Note that in this particular case, we can find the optimal solution of the QP formulation, which happens to coincide with the optimal solution of the ILP."
msgstr "Las gráficas presentan el depósito con una estrella y las rutas seleccionadas para los vehículos con flechas. Ten en cuenta que en este caso particular, podemos encontrar la solución óptima de la formulación QP, que coincide con la solución óptima del ILP."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:871
msgid "Keep in mind that VQE is an heuristic working on the QP formulation of the Ising Hamiltonian, though. For suitable choices of A, local optima of the QP formulation will be feasible solutions to the ILP. While for some small instances, as above, we can find optimal solutions of the QP formulation which coincide with optima of the ILP, finding optimal solutions of the ILP is harder than finding local optima of the QP formulation, in general, which in turn is harder than finding feasible solutions of the ILP. Even within the VQE, one may provide stronger guarantees, for specific variational forms (trial wave functions)."
msgstr ""

