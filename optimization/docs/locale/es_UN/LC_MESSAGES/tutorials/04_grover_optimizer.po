msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-10 14:34+0000\n"
"PO-Revision-Date: 2023-04-10 14:55\n"
"Last-Translator: \n"
"Language: es_UN\n"
"Language-Team: Spanish (United)\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/04_grover_optimizer.po\n"
"X-Crowdin-File-ID: 9648\n"

#: ../../tutorials/04_grover_optimizer.ipynb:9
msgid "This page was generated from `docs/tutorials/04_grover_optimizer.ipynb`__."
msgstr "Esta página fue generada a partir de `docs/tutorials/04_grover_optimizer.ipynb`__."

#: ../../tutorials/04_grover_optimizer.ipynb:9
msgid "Grover Optimizer"
msgstr "Optimizador de Grover"

#: ../../tutorials/04_grover_optimizer.ipynb:21
msgid "Introduction"
msgstr "Introducción"

#: ../../tutorials/04_grover_optimizer.ipynb:23
msgid "Grover Adaptive Search (GAS) has been explored as a possible solution for combinatorial optimization problems, alongside variational algorithms such as Variational Quantum Eigensolver (VQE) and Quantum Approximate Optimization Algorithm (QAOA). The algorithm iteratively applies Grover Search to find the optimum value of an objective function, by using the best-known value from the previous run as a threshold. The adaptive oracle used in GAS recognizes all values above or below the current threshold (for max and min respectively), decreasing the size of the search space every iteration the threshold is updated, until an optimum is found."
msgstr "La Búsqueda Adaptativa de Grover (Grover Adaptive Search, GAS) ha sido explorada como una posible solución para problemas de optimización combinatoria, junto con los algoritmos variacionales tal como el Solucionador Propio Cuántico Variacional (Variational Quantum Eigensolver, VQE) y el Algoritmo Cuántico de Optimización Aproximada (Quantum Approximate Optimization Algorithm, QAOA). El algoritmo aplica la Búsqueda de Grover iterativamente para encontrar el valor óptimo de una función objetivo, al usar el mejor valor conocido de la ejecución anterior como umbral. El oráculo adaptativo utilizado en GAS reconoce todos los valores arriba o debajo del umbral actual (para máximos y mínimos, respectivamente), disminuyendo el tamaño del espacio de búsqueda, en cada iteración se actualiza el umbral, hasta que se encuentra un óptimo."

#: ../../tutorials/04_grover_optimizer.ipynb:26
msgid "In this notebook we will explore each component of the ``GroverOptimizer``, which utilizes the techniques described in GAS, by minimizing a Quadratic Unconstrained Binary Optimization (QUBO) problem, as described in [1]"
msgstr "En este cuaderno exploraremos cada componente del ``GroverOptimizer``, el cual utiliza las técnicas descritas en GAS, minimizando un problema de Optimización Binaria Cuadrática sin Restricciones (Quadratic Unconstrained Binary Optimization, QUBO), como se describe en [1]"

#: ../../tutorials/04_grover_optimizer.ipynb:29
msgid "References"
msgstr "Referencias"

#: ../../tutorials/04_grover_optimizer.ipynb:31
msgid "[1] `A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization, arXiv preprint arXiv:1912.04088 (2019). <https://arxiv.org/abs/1912.04088>`__"
msgstr "[1] `A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization, arXiv preprint arXiv:1912.04088 (2019). <https://arxiv.org/abs/1912.04088>`__"

#: ../../tutorials/04_grover_optimizer.ipynb:43
msgid "Grover Adaptive Search"
msgstr "Búsqueda Adaptativa de Grover"

#: ../../tutorials/04_grover_optimizer.ipynb:45
msgid "Grover Search, the core element of GAS, needs three ingredients:"
msgstr "La Búsqueda de Grover, el elemento central de GAS, necesita de tres ingredientes:"

#: ../../tutorials/04_grover_optimizer.ipynb:47
msgid "A state preparation operator :math:`A` to construct a superposition of all states in the search space."
msgstr "Un operador de preparación de estado :math:`A` para construir una superposición de todos los estados en el espacio de búsqueda."

#: ../../tutorials/04_grover_optimizer.ipynb:49
msgid "An oracle operator :math:`O`, that recognizes the states of interest and multiplies their amplitudes by -1."
msgstr "Un operador oráculo :math:`O`, que reconoce a los estados de interés y multiplica sus amplitudes por -1."

#: ../../tutorials/04_grover_optimizer.ipynb:51
msgid "The Grover diffusion operator :math:`D`, that multiplies the amplitude of the :math:`|0\\rangle_n` state by -1."
msgstr "El operador de difusión de Grover :math:`D`, que multiplica la amplitud del estado :math:`|0\\rangle_n` por -1."

#: ../../tutorials/04_grover_optimizer.ipynb:53
msgid "While implementations of GAS vary around the specific use case, the general framework still loosely follows the steps described below."
msgstr "Si bien las implementaciones de GAS varían según el caso de uso específico, el framework general aún sigue vagamente los pasos que se describen a continuación."

#: ../../tutorials/04_grover_optimizer.ipynb:59
msgid "|7b354004f10e46d6850ba0db2396d230|"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:84
msgid "7b354004f10e46d6850ba0db2396d230"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:65
msgid "``GroverOptimizer`` uses ``QuadraticProgramToNegativeValueOracle`` to construct :math:`A_y` such that it prepares a :math:`n`-qubit register to represent the equal superposition of all :math:`|x\\rangle_n` and a :math:`m`-qubit register to (approximately) represent the corresponding :math:`|Q(x)-y\\rangle_m`. Then, all states with :math:`(Q(x) - y)` negative should be flagged by :math:`O_y`. Note that in the implementation discussed, the oracle operator is actually independent of :math:`y`, but this is not a requirement. For clarity, we will refer to the oracle as :math:`O` when the oracle is independent of :math:`y`."
msgstr "``GroverOptimizer`` utiliza ``QuadraticProgramToNegativeValueOracle`` para construir :math:`A_y` de manera que prepara un registro de :math:`n` qubits para representar la superposición igual de todos los :math:`|x\\rangle_n` y un registro de :math:`m` qubits para representar (aproximadamente) el correspondiente :math:`|Q(x)-y\\rangle_m`. Entonces, todos los estados con una :math:`(Q(x) - y)` negativa deben ser marcados con :math:`O_y`. Ten en cuenta que en la implementación discutida, el operador oráculo es en realidad independiente de :math:`y`, pero esto no es un requisito. Para mayor claridad, nos referiremos al oráculo como :math:`O` cuando el oráculo es independiente de :math:`y`."

#: ../../tutorials/04_grover_optimizer.ipynb:68
msgid "Put formally, ``QuadraticProgramToNegativeValueOracle`` constructs an :math:`A_y` and :math:`O` such that:"
msgstr "Dicho formalmente, ``QuadraticProgramToNegativeValueOracle`` construye un :math:`A_y` y un :math:`O` tal que:"

#: ../../tutorials/04_grover_optimizer.ipynb:74
msgid "|c55137743bfd4c8b8b4ec3c5a72d5906|"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:87
msgid "c55137743bfd4c8b8b4ec3c5a72d5906"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:80
msgid "where :math:`|x\\rangle` is the binary encoding of the integer :math:`x`."
msgstr "donde :math:`|x\\rangle` es la codificación binaria del entero :math:`x`."

#: ../../tutorials/04_grover_optimizer.ipynb:82
msgid "At each iteration in which the threshold :math:`y` is updated, we adapt :math:`A_y` such that the function values are shifted up or down (for minimum and maximum respectively) by :math:`y`. For example, in the context of finding the minimum, as the value of :math:`y` decreases, the search space (negative values) also decreases, until only the minimum value remains. A concrete example will be explored in the next section."
msgstr "En cada iteración en la que se actualiza el umbral :math:`y`, adaptamos :math:`A_y` de manera que los valores de la función se desplazan hacia arriba o hacia abajo (para el mínimo y el máximo respectivamente) por :math:`y`. Por ejemplo, en el contexto de encontrar el mínimo, a medida que el valor de :math:`y` disminuye, el espacio de búsqueda (valores negativos) también disminuye, hasta que solo queda el valor mínimo. Se explorará un ejemplo concreto en la siguiente sección."

#: ../../tutorials/04_grover_optimizer.ipynb:99
msgid "Find the Minimum of a QUBO Problem using GroverOptimizer"
msgstr "Encontrar el Mínimo de un Problema QUBO utilizando GroverOptimizer"

#: ../../tutorials/04_grover_optimizer.ipynb:101
msgid "The following is a toy example of a minimization problem."
msgstr "El siguiente es un ejemplo de juguete de un problema de minimización."

#: ../../tutorials/04_grover_optimizer.ipynb:103
msgid ":nbsphinx-math:`\\begin{eqnarray} \\min_{x \\in \\{0, 1\\}^3} -2x_0x_2 - x_1x_2 - 1x_0 + 2x_1 - 3x_2. \\end{eqnarray}`"
msgstr ":nbsphinx-math:`\\begin{eqnarray} \\min_{x \\in \\{0, 1\\}^3} -2x_0x_2 - x_1x_2 - 1x_0 + 2x_1 - 3x_2. \\end{eqnarray}`"

#: ../../tutorials/04_grover_optimizer.ipynb:107
msgid "For our initial steps, we create a docplex model that defines the problem above, and then use the ``from_docplex_mp()`` function to convert the model to a ``QuadraticProgram``, which can be used to represent a QUBO in Qiskit Optimization."
msgstr "Para nuestros pasos iniciales, creamos un modelo docplex que define el problema anterior, y luego usamos la función ``from_docplex_mp()`` para convertir el modelo en un ``QuadraticProgram``, que se puede usar para representar un QUBO en Qiskit Optimization."

#: ../../tutorials/04_grover_optimizer.ipynb:202
msgid "Next, we create a ``GroverOptimizer`` that uses 6 qubits to encode the value, and will terminate after there have been 10 iterations of GAS without progress (i.e. the value of :math:`y` does not change). The ``solve()`` function takes the ``QuadraticProgram`` we created earlier, and returns a results object that contains information about the run."
msgstr "A continuación, creamos un ``GroverOptimizer`` que usa 6 qubits para codificar el valor y terminará después de que haya habido 10 iteraciones de GAS sin progreso (es decir, el valor de :math:`y` no cambia). La función ``solve()`` toma el ``QuadraticProgram`` que creamos anteriormente y devuelve un objeto de resultados que contiene información sobre la ejecución."

#: ../../tutorials/04_grover_optimizer.ipynb:255
msgid "This results in the optimal solution :math:`x_0=1`, :math:`x_1=0`, :math:`x_2=1` and the optimal objective value of :math:`-6` (most of the time, since it is a randomized algorithm). In the following, a custom visualization of the quantum state shows a possible run of ``GroverOptimizer`` applied to this QUBO."
msgstr "Esto resulta en la solución óptima :math:`x_0=1`, :math:`x_1=0`, :math:`x_2=1` y el valor objetivo óptimo de :math:`-6` (la mayoría del tiempo, ya que es un algoritmo randomizado). A continuación, una visualización personalisada del estado cuántico muestra una posible ejecución de ``GroverOptimizer`` aplicada a este QUBO."

#: ../../tutorials/04_grover_optimizer.ipynb:261
msgid "|464319d3a32f496a93446407cc276b08|"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:280
msgid "464319d3a32f496a93446407cc276b08"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:267
msgid "Each graph shows a single iteration of GAS, with the current values of :math:`r` (= iteration counter) and :math:`y` (= threshold/offset) shown in the title. The X-axis displays the integer equivalent of the input (e.g. '101' :math:`\\rightarrow` 5), and the Y-axis shows the possible function values. As there are 3 binary variables, there are :math:`2^3=8` possible solutions, which are shown in each graph. The color intensity indicates the probability of measuring a certain result (with bright intensity being the highest), while the actual color indicates the corresponding phase (see phase color-wheel below). Note that as :math:`y` decreases, we shift all of the values up by that amount, meaning there are fewer and fewer negative values in the distribution, until only one remains (the minimum)."
msgstr "Cada gráfica muestra una sola iteración de GAS, con los valores actuales de :math:`r` (= contador de iteraciones) y :math:`y` (= umbral/compensación) mostrados en el título. El eje X muestra el entero equivalente de la entrada (ppor ejemplo, '101' :math:`\\rightarrow` 5), y el eje Y muestra los posibles valores de la función. Como hay 3 variables binarias, hay :math:`2^3=8` posibles soluciones, que se muestran en cada gráfica. La intensidad del color indica la probabilidad de medir un resultado determinado (siendo la intensidad del brillo la más alta), mientras que el color en sí indica la fase correspondiente (consulta la rueda de color de fase a continuación). Ten en cuenta que a medida que :math:`y` disminuye, desplazamos todos los valores hacia arriba por esa cantidad, lo que significa que hay cada vez menos valores negativos en la distribución, hasta que solo queda uno (el mínimo)."

#: ../../tutorials/04_grover_optimizer.ipynb:274
msgid "|6e076f0b294a47b0ac8e43357c46f3b0|"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:283
msgid "6e076f0b294a47b0ac8e43357c46f3b0"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:295
msgid "Check that GroverOptimizer finds the correct value"
msgstr "Comprobar que GroverOptimizer encuentra el valor correcto"

#: ../../tutorials/04_grover_optimizer.ipynb:297
msgid "We can verify that the algorithm is working correctly using the ``MinimumEigenOptimizer`` in Qiskit."
msgstr "Podemos verificar que el algoritmo está funcionando correctamente usando el ``MinimumEigenOptimizer`` en Qiskit."

