msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-04 19:50+0000\n"
"PO-Revision-Date: 2023-08-14 19:18\n"
"Last-Translator: \n"
"Language: es_UN\n"
"Language-Team: Spanish (United)\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /main/optimization/docs/locale/en/LC_MESSAGES/tutorials/03_minimum_eigen_optimizer.po\n"
"X-Crowdin-File-ID: 9646\n"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:9
msgid "This page was generated from `docs/tutorials/03_minimum_eigen_optimizer.ipynb`__."
msgstr "Esta página fue generada a partir de `docs/tutorials/03_minimum_eigen_optimizer.ipynb`__."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:9
msgid "Minimum Eigen Optimizer"
msgstr "Optimizador Propio Mínimo"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:21
msgid "Introduction"
msgstr "Introducción"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:32
msgid "An interesting class of optimization problems to be addressed by quantum computing are Quadratic Unconstrained Binary Optimization (QUBO) problems. Finding the solution to a QUBO is equivalent to finding the ground state of a corresponding Ising Hamiltonian, which is an important problem not only in optimization, but also in quantum chemistry and physics. For this translation, the binary variables taking values in :math:`\\{0, 1\\}` are replaced by spin variables taking values in :math:`\\{-1, +1\\}`, which allows one to replace the resulting spin variables by Pauli Z matrices, and thus, an Ising Hamiltonian. For more details on this mapping we refer to [1]."
msgstr "Una clase interesante de problemas de optimización que debe abordar la computación cuántica son los problemas de Optimización Binaria Cuadrática sin Restricciones (Quadratic Unconstrained Binary Optimization, QUBO). Encontrar la solución a un QUBO es equivalente a encontrar el estado fundamental de un Hamiltoniano de Ising correspondiente, que es un problema importante no solo en la optimización, sino también en química cuántica y física. Para esta traducción, las variables binarias que toman valores en :math:`\\{0, 1\\}` se reemplazan por variables de espín que toman valores en :math:`\\{-1, +1\\}`, lo que permite reemplazar las variables de espín resultantes por matrices Pauli Z y, por lo tanto, un Hamiltoniano de Ising. Para más detalles sobre este mapeo nos referimos a [1]."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:35
msgid "Qiskit provides automatic conversion from a suitable ``QuadraticProgram`` to an Ising Hamiltonian, which then allows leveraging all the ``SamplingMinimumEigensolver`` implementations, such as"
msgstr "Qiskit proporciona conversión automática de un ``QuadraticProgram`` adecuado a un Hamiltoniano de Ising, que luego permite aprovechar todas las implementaciones de ``SamplingMinimumEigensolver``, como"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:37
msgid "``SamplingVQE``,"
msgstr "``SamplingVQE``,"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:38
msgid "``QAOA``, or"
msgstr "``QAOA``, o"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:39
msgid "``NumpyMinimumEigensolver`` (classical exact method)."
msgstr "``NumpyMinimumEigensolver`` (método clásico exacto)."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:41
msgid "Note 1: ``MinimumEigenOptimizer`` does not support ``qiskit.algorithms.minimum_eigensolver.VQE``. But ``qiskit.algorithms.minimum_eigensolver.SamplingVQE`` can be used instead."
msgstr "Nota 1: ``MinimumEigenOptimizer`` no es compatible con ``qiskit.algorithms.minimum_eigensolver.VQE``. Pero en su lugar se puede usar ``qiskit.algorithms.minimum_eigensolver.SamplingVQE``."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:43
msgid "Note 2: ``MinimumEigenOptimizer`` can use ``NumpyMinimumEigensolver`` as an exception case though it inherits ``MinimumEigensolver`` (not ``SamplingMinimumEigensolver``)."
msgstr "Nota 2: ``MinimumEigenOptimizer`` puede usar ``NumpyMinimumEigensolver`` como un caso de excepción, aunque hereda de ``MinimumEigensolver`` (no de ``SamplingMinimumEigensolver``)."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:45
msgid "Qiskit Optimization provides a the ``MinimumEigenOptimizer`` class, which wraps the translation to an Ising Hamiltonian (in Qiskit Terra also called ``Operator``), the call to a ``MinimumEigensolver``, and the translation of the results back to an ``OptimizationResult``."
msgstr "Qiskit Optimization proporciona una clase ``MinimumEigenOptimizer``, que envuelve la traducción a un Hamiltoniano de Ising (en Qiskit Terra también llamado ``Operator``), la llamada a un ``MinimumEigensolver`` y la traducción de los resultados de vuelta a un ``OptimizationResult``."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:47
msgid "In the following we first illustrate the conversion from a ``QuadraticProgram`` to an ``Operator`` and then show how to use the ``MinimumEigenOptimizer`` with different ``MinimumEigensolver``\\ s to solve a given ``QuadraticProgram``. The algorithms in Qiskit automatically try to convert a given problem to the supported problem class if possible, for instance, the ``MinimumEigenOptimizer`` will automatically translate integer variables to binary variables or add linear equality constraints as a quadratic penalty term to the objective. It should be mentioned that a ``QiskitOptimizationError`` will be thrown if conversion of a quadratic program with integer variables is attempted."
msgstr "A continuación, primero ilustramos la conversión de un ``QuadraticProgram`` a un ``Operator`` y luego mostramos cómo usar el ``MinimumEigenOptimizer`` con diferentes ``MinimumEigensolver``\\ s para resolver un ``QuadraticProgram`` dado. Los algoritmos en Qiskit intentan convertir automáticamente un problema determinado a la clase de problema soportada si es posible, por ejemplo, el ``MinimumEigenOptimizer`` traducirá automáticamente las variables enteras a variables binarias o agregará restricciones de igualdad lineal como un término de penalización cuadrática al objetivo. Se debe mencionar que se generará un ``QiskitOptimizationError`` si se intenta la conversión de un programa cuadrático con variables enteras."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:50
msgid "The circuit depth of ``QAOA`` potentially has to be increased with the problem size, which might be prohibitive for near-term quantum devices. A possible workaround is Recursive QAOA, as introduced in [2]. Qiskit generalizes this concept to the ``RecursiveMinimumEigenOptimizer``, which is introduced at the end of this tutorial."
msgstr "La profundidad del circuito de ``QAOA`` podría ser incrementada con el tamaño del problema, lo que podría ser prohibitivo para los dispositivos cuánticos a corto plazo. Un posible método alternativo es el QAOA recursivo, como se introduce en la referencia [2]. Qiskit generaliza este concepto a ``RecursiveMinimumEigenOptimizer``, el cual se introduce al final de este tutorial."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:53
msgid "References"
msgstr "Referencias"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:55
msgid "[1] `A. Lucas, Ising formulations of many NP problems, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>`__"
msgstr "[1] `A. Lucas, Ising formulations of many NP problems, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>`__"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:57
msgid "[2] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"
msgstr "[2] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:69
msgid "Converting a QUBO to an Operator"
msgstr "Convertir un QUBO a un Operator"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:173
msgid "Next we translate this QUBO into an Ising operator. This results not only in an ``Operator`` but also in a constant offset to be taken into account to shift the resulting value."
msgstr "A continuación traducimos este QUBO en un operador de Ising. Esto no solo resulta en un ``Operator``, sino también en un desplazamiento constante que se debe tener en cuenta para cambiar el valor resultante."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:242
msgid "Sometimes a ``QuadraticProgram`` might also directly be given in the form of an ``Operator``. For such cases, Qiskit also provides a translator from an ``Operator`` back to a ``QuadraticProgram``, which we illustrate in the following."
msgstr "A veces, un ``QuadraticProgram`` también podría ser dado directamente en forma de ``Operator``. Para tales casos, Qiskit también proporciona un traductor de un ``Operator`` de vuelta a un ``QuadraticProgram``, que ilustramos a continuación."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:319
msgid "This translator allows, for instance, one to translate an ``Operator`` to a ``QuadraticProgram`` and then solve the problem with other algorithms that are not based on the Ising Hamiltonian representation, such as the ``GroverOptimizer``."
msgstr "Este traductor permite, por ejemplo, traducir un ``Operator`` a un ``QuadraticProgram`` y luego resolver el problema con otros algoritmos que no se basan en la representación del Hamiltoniano de Ising, como el ``GroverOptimizer``."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:331
msgid "Solving a QUBO with the MinimumEigenOptimizer"
msgstr "Resolver un QUBO con el MinimumEigenOptimizer"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:342
msgid "We start by initializing the ``MinimumEigensolver`` we want to use."
msgstr "Empezamos inicializando el ``MinimumEigensolver`` que queremos usar."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:365
msgid "Then, we use the ``MinimumEigensolver`` to create ``MinimumEigenOptimizer``."
msgstr "Luego, usamos el ``MinimumEigensolver`` para crear un ``MinimumEigenOptimizer``."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:387
msgid "We first use the ``MinimumEigenOptimizer`` based on the classical exact ``NumPyMinimumEigensolver`` to get the optimal benchmark solution for this small example."
msgstr "Primero usamos el ``MinimumEigenOptimizer`` basado en el ``NumPyMinimumEigensolver`` exacto clásico para obtener la solución de referencia óptima para este pequeño ejemplo."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:439
msgid "Next we apply the ``MinimumEigenOptimizer`` based on ``QAOA`` to the same problem."
msgstr "A continuación aplicamos el ``MinimumEigenOptimizer`` basado en ``QAOA`` al mismo problema."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:492
msgid "Analysis of Samples"
msgstr "Análisis de Muestras"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:494
msgid "``OptimizationResult`` provides useful information in the form of ``SolutionSample``\\ s (here denoted as *samples*). Each ``SolutionSample`` contains information about the input values (``x``), the corresponding objective function value (``fval``), the fraction of samples corresponding to that input (``probability``), and the solution ``status`` (``SUCCESS``, ``FAILURE``, ``INFEASIBLE``). Multiple samples corresponding to the same input are consolidated into a single ``SolutionSample`` (with its ``probability`` attribute being the aggregate fraction of samples represented by that ``SolutionSample``)."
msgstr "``OptimizationResult`` proporciona información útil en forma de ``SolutionSample``\\ s (aquí indicado como *muestras*). Cada ``SolutionSample`` contiene información sobre los valores de entrada (``x``), el valor de la función objetivo correspondiente (``fval``), la fracción de muestras correspondiente a esa entrada (``probability``) y la solución ``status`` (``SUCCESS``, ``FAILURE``, ``INFEASIBLE``). Múltiples muestras correspondientes a la misma entrada se consolidan en una sola ``SolutionSample`` (siendo su atributo ``probability`` la fracción agregada de muestras representada por esa ``SolutionSample``)."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:566
msgid "We may also want to filter samples according to their status or probabilities."
msgstr "También es posible que deseemos filtrar muestras de acuerdo con su estado o probabilidades."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:653
msgid "If we want to obtain a better perspective of the results, statistics is very helpful, both with respect to the objective function values and their respective probabilities. Thus, mean and standard deviation are the very basics for understanding the results."
msgstr "Si queremos obtener una mejor perspectiva de los resultados, la estadística es de gran ayuda, tanto con respecto a los valores de la función objetivo como a sus respectivas probabilidades. Por lo tanto, la media y la desviación estándar son los elementos básicos para comprender los resultados."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:745
msgid "Finally, despite all the number-crunching, visualization is usually the best early-analysis approach."
msgstr "Finalmente, a pesar de todo el procesamiento numérico, la visualización suele ser el mejor enfoque de análisis temprano."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:833
msgid "RecursiveMinimumEigenOptimizer"
msgstr "RecursiveMinimumEigenOptimizer"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:844
msgid "The ``RecursiveMinimumEigenOptimizer`` takes a ``MinimumEigenOptimizer`` as input and applies the recursive optimization scheme to reduce the size of the problem one variable at a time. Once the size of the generated intermediate problem is below a given threshold (``min_num_vars``), the ``RecursiveMinimumEigenOptimizer`` uses another solver (``min_num_vars_optimizer``), e.g., an exact classical solver such as CPLEX or the ``MinimumEigenOptimizer`` based on the ``NumPyMinimumEigensolver``."
msgstr "El ``RecursiveMinimumEigenOptimizer`` toma un ``MinimumEigenOptimizer`` como entrada y aplica el esquema de optimización recursiva para reducir el tamaño del problema una variable a la vez. Una vez que el tamaño del problema intermedio generado está por debajo de un umbral dado (``min_num_vars``), el ``RecursiveMinimumEigenOptimizer`` usa otro solucionador (``min_num_vars_optimizer``), por ejemplo, un solucionador clásico exacto como CPLEX o el ``MinimumEigenOptimizer`` basado en el ``NumPyMinimumEigensolver``."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:846
msgid "In the following, we show how to use the ``RecursiveMinimumEigenOptimizer`` using the two ``MinimumEigenOptimizer``\\ s introduced before."
msgstr "A continuación, mostramos cómo usar el ``RecursiveMinimumEigenOptimizer`` usando los dos ``MinimumEigenOptimizer``\\ s presentados anteriormente."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:857
msgid "First, we construct the ``RecursiveMinimumEigenOptimizer`` such that it reduces the problem size from 3 variables to 1 variable and then uses the exact solver for the last variable. Then we call ``solve`` to optimize the considered problem."
msgstr "En primer lugar, construimos el ``RecursiveMinimumEigenOptimizer`` tal que reduce el tamaño del problema de 3 variables a 1 variable y luego utiliza el solucionador exacto para la última variable. Entonces llamamos a ``solve`` para optimizar el problema considerado."

