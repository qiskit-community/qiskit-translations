msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-22 16:46+0000\n"
"PO-Revision-Date: 2021-09-28 02:08\n"
"Last-Translator: \n"
"Language-Team: Spanish (United)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/03_minimum_eigen_optimizer.po\n"
"X-Crowdin-File-ID: 9646\n"
"Language: es_UN\n"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:9
msgid "This page was generated from `docs/tutorials/03_minimum_eigen_optimizer.ipynb`__."
msgstr "Esta página fue generada a partir de `docs/tutorials/03_minimum_eigen_optimizer.ipynb`__."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:9
msgid "Minimum Eigen Optimizer"
msgstr "Optimizador Propio Mínimo"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:21
msgid "Introduction"
msgstr "Introducción"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:32
msgid "An interesting class of optimization problems to be addressed by quantum computing are Quadratic Unconstrained Binary Optimization (QUBO) problems. Finding the solution to a QUBO is equivalent to finding the ground state of a corresponding Ising Hamiltonian, which is an important problem not only in optimization, but also in quantum chemistry and physics. For this translation, the binary variables taking values in :math:`\\{0, 1\\}` are replaced by spin variables taking values in :math:`\\{-1, +1\\}`, which allows to replace the resulting spin variables by Pauli Z matrices, and thus, an Ising Hamiltonian. For more details on this mapping we refer to [1]."
msgstr "Una clase interesante de problemas de optimización que la computación cuántica aborda son los Problemas de Optimización Binaria Cuadrática no Restringida (Quadratic Unconstrained Binary Optimization, QUBO). Encontrar la solución a un QUBO es equivalente a encontrar el estado fundamental de un hamiltoniano de Ising correspondiente, que es un problema importante no solo en optimización, sino también en química cuántica y física. Para esta traducción, las variables binarias que toman valores en :math:`\\{0, 1\\}` se reemplazan por variables de espín que toman valores en :math:`\\{-1, +1\\}`, lo que permite reemplazar las variables de espín resultantes por matrices Pauli Z, y por lo tanto, un hamiltoniano de Ising. Para obtener más detalles sobre este mapeo, consulte [1]."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:35
msgid "Qiskit provides automatic conversion from a suitable ``QuadraticProgram`` to an Ising Hamiltonian, which then allows to leverage all the ``MinimumEigenSolver`` such as - ``VQE``, - ``QAOA``, or - ``NumpyMinimumEigensolver`` (classical exact method)."
msgstr "Qiskit provee conversión automática de un ``QuadraticProgram`` adecuado a un Ising Hamiltoniano, que luego permite aprovechar todo el ``MinimumEigenSolver`` como - ``VQE``, - ``QAOA``, or - ``NumpyMinimumEigensolver`` (método clásico exacto)."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:37
msgid "Qiskit wraps the translation to an Ising Hamiltonian (in Qiskit Aqua also called ``Operator``), the call to an ``MinimumEigensolver`` as well as the translation of the results back to ``OptimizationResult`` in the ``MinimumEigenOptimizer``."
msgstr "Qiskit envuelve la traducción a un Ising Hamiltoniano (en Qiskit Aqua también llamado ``Operator``), la llamada a un ``MinimumEigensolver``, así como la traducción de los resultados a un ``OptimizationResult`` en el ``MinimumEigenOptimizer``."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:39
msgid "In the following we first illustrate the conversion from a ``QuadraticProgram`` to an ``Operator`` and then show how to use the ``MinimumEigenOptimizer`` with different ``MinimumEigensolver`` to solve a given ``QuadraticProgram``. The algorithms in Qiskit automatically try to convert a given problem to the supported problem class if possible, for instance, the ``MinimumEigenOptimizer`` will automatically translate integer variables to binary variables or add a linear equality constraints as a quadratic penalty term to the objective. It should be mentioned that Aqua will through a ``QiskitOptimizationError`` if conversion of a quadratic program with integer variable is attempted."
msgstr "En lo siguiente, primero ilustramos la conversión de un ``QuadraticProgram`` a un ``Operador`` y luego mostramos cómo usar el ``MinimumEigenOptimizer`` con diferentes ``MinimumEigensolver`` para resolver un ``QuadraticProgram`` dado. Los algoritmos en Qiskit automáticamente intentan convertir un problema determinado a la clase de problema soportada, si es posible, por ejemplo, el ``MinimumEigenOptimizer`` traducirá automáticamente variables enteras a variables binarias o añadirá una restricción lineal de igualdad como un término de penalización cuadrática al objetivo. Se debe mencionar que Aqua arrojara un ``QiskitOptimizationError`` si se intenta la conversión de un programa cuadrático con variable entera."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:42
msgid "The circuit depth of ``QAOA`` potentially has to be increased with the problem size, which might be prohibitive for near-term quantum devices. A possible workaround is Recursive QAOA, as introduced in [2]. Qiskit generalizes this concept to the ``RecursiveMinimumEigenOptimizer``, which is introduced at the end of this tutorial."
msgstr "La profundidad del circuito de ``QAOA`` podría ser incrementada con el tamaño del problema, lo que podría ser prohibitivo para los dispositivos cuánticos a corto plazo. Un posible método alternativo es el QAOA recursivo, como se introduce en la referencia [2]. Qiskit generaliza este concepto a ``RecursiveMinimumEigenOptimizer``, el cual se introduce al final de este tutorial."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:45
msgid "References"
msgstr "Referencias"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:47
msgid "[1] `A. Lucas, Ising formulations of many NP problems, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>`__"
msgstr "[1] `A. Lucas, Ising formulations of many NP problems, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>`__"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:49
msgid "[2] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"
msgstr "[2] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:61
msgid "Converting a QUBO to an Operator"
msgstr "Conversión de un QUBO a un Operador"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:156
msgid "Next we translate this QUBO into an Ising operator. This results not only in an ``Operator`` but also in a constant offset to be taking into account to shift the resulting value."
msgstr "A continuación traducimos este QUBO en un operador de Ising. Esto no sólo resulta en un ``Operator`` sino también en una compensación constante a tener en cuenta para desplazar el valor resultante."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:213
msgid "Sometimes an ``QuadraticProgram`` might also directly be given in the form of an ``Operator``. For such cases, Qiskit also provides a converter from an ``Operator`` back to a ``QuadraticProgram``, which we illustrate in the following."
msgstr "A veces, un ``QuadraticProgram`` también podría ser dado directamente en forma de ``Operator``. Para tales casos, Qiskit también provee un conversor de ``Operator`` de vuelta a un ``QuadraticProgram``, que ilustramos a continuación."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:287
msgid "This converter allows, for instance, to translate an ``Operator`` to a ``QuadraticProgram`` and then solve the problem with other algorithms that are not based on the Ising Hamiltonian representation, such as the ``GroverOptimizer``."
msgstr "Este conversor permite, por ejemplo, traducir un ``Operator`` a un ``QuadraticProgram`` y luego resolver el problema con otros algoritmos que no se basan en la representación de Ising Hamiltoniano, como ``GroverOptimizer``."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:299
msgid "Solving a QUBO with the MinimumEigenOptimizer"
msgstr "Resolviendo un QUBO con MinimumEigenOptimizer"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:310
msgid "We start by initializing the ``MinimumEigensolver`` we want to use."
msgstr "Empezamos inicializando el ``MinimumEigensolver`` que queremos usar."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:336
msgid "Then, we use the ``MinimumEigensolver`` to create ``MinimumEigenOptimizer``."
msgstr "Luego, usamos el ``MinimumEigensolver`` para crear un ``MinimumEigenOptimizer``."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:358
msgid "We first use the ``MinimumEigenOptimizer`` based on the classical exact ``NumPyMinimumEigensolver`` to get the optimal benchmark solution for this small example."
msgstr "Primero usamos el ``MinimumEigenOptimizer`` basado en el clásico exacto ``NumPyMinimumEigensolver`` para obtener la solución de referencia óptima para este pequeño ejemplo."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:403
msgid "Next we apply the ``MinimumEigenOptimizer`` based on ``QAOA`` to the same problem."
msgstr "A continuación aplicamos el ``MinimumEigenOptimizer`` basado en ``QAOA`` para el mismo problema."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:449
msgid "Analysis of Samples"
msgstr "Análisis de Muestras"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:451
msgid "``OptimizationResult`` provides a useful information source ``SolutionSample`` (here denoted as *samples*). They contain information about input values ``x``, objective function values ``fval``, probability of obtaining that result ``probability`` and the solution status ``status`` (``SUCCESS``, ``FAILURE``, ``INFEASIBLE``)."
msgstr "``OptimizationResult`` proporciona una fuente de información útil ``SolutionSample`` (aquí denotada como *muestras*). Contienen información sobre los valores de entrada ``x``, los valores de la función objetivo ``fval``, la probabilidad de obtener ese resultado en ``probability`` y el estado de la solución ``status`` (``SUCCESS``, ``FAILURE``, ``INFEASIBLE``)."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:509
msgid "We may also want to filter samples according to their status or probabilities."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:585
msgid "If we want to obtain a better perspective of the results, statistics is very helpful, both with respect to the objective function values and their respective probabilities. Thus, mean and standard deviation are the very basics for understanding the results."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:667
msgid "Finally, despite all number-crunching, visualization is usually the best early-analysis approach."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:745
msgid "RecursiveMinimumEigenOptimizer"
msgstr "RecursiveMinimumEigenOptimizer"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:756
msgid "The ``RecursiveMinimumEigenOptimizer`` takes a ``MinimumEigenOptimizer`` as input and applies the recursive optimization scheme to reduce the size of the problem one variable at a time. Once the size of the generated intermediate problem is below a given threshold (``min_num_vars``), the ``RecursiveMinimumEigenOptimizer`` uses another solver (``min_num_vars_optimizer``), e.g., an exact classical solver such as CPLEX or the ``MinimumEigenOptimizer`` based on the ``NumPyMinimumEigensolver``."
msgstr "El ``RecursiveMinimumEigenOptimizer`` toma un ``MinimumEigenOptimizer`` como entrada y aplica el esquema de optimización recursiva para reducir el tamaño del problema una variable a la vez. Una vez que el tamaño del problema intermedio generado está por debajo de un umbral dado (``min_num_vars``), el ``RecursiveMinimumEigenOptimizer`` usa otro solucionador (``min_num_vars_optimizer``), ej., un solucionador clásico exacto como CPLEX o el ``MinimumEigenOptimizer`` basado en el ``NumPyMinimumEigensolver``."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:758
msgid "In the following, we show how to use the ``RecursiveMinimumEigenOptimizer`` using the two ``MinimumEigenOptimizer`` introduced before."
msgstr "A continuación, se muestra cómo utilizar el ``RecursiveMinimumEigenOptimizer`` utilizando los dos ``MinimumEigenOptimizer`` presentados antes."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:769
msgid "First, we construct the ``RecursiveMinimumEigenOptimizer`` such that it reduces the problem size from 3 variables to 1 variable and then uses the exact solver for the last variable. Then we call ``solve`` to optimize the considered problem."
msgstr "En primer lugar, construimos el ``RecursiveMinimumEigenOptimizer`` tal que reduce el tamaño del problema de 3 variables a 1 variable y luego utiliza el solucionador exacto para la última variable. Entonces llamamos ``solve`` para optimizar el problema considerado."

