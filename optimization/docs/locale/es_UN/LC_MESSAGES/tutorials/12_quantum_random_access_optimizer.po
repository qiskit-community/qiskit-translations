msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-14 08:10+0000\n"
"PO-Revision-Date: 2024-01-15 03:20\n"
"Last-Translator: \n"
"Language: es_UN\n"
"Language-Team: Spanish (United)\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /main/optimization/docs/locale/en/LC_MESSAGES/tutorials/12_quantum_random_access_optimizer.po\n"
"X-Crowdin-File-ID: 10040\n"

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:9
msgid "This page was generated from `docs/tutorials/12_quantum_random_access_optimizer.ipynb`__."
msgstr "Esta página fue generada a partir de `docs/tutorials/12_quantum_random_access_optimizer.ipynb`__."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:9
msgid "Quantum Random Access Optimization"
msgstr "Optimización Cuántica de Acceso Aleatorio"

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:20
msgid "The Quantum Random Access Optimization (QRAO) module is designed to enable users to leverage a new quantum method for combinatorial optimization problems [1]. This approach incorporates Quantum Random Access Codes (QRACs) as a tool to encode multiple classical binary variables into a single qubit, thereby saving quantum resources and enabling exploration of larger problem instances on a quantum computer. The encodings produce a local quantum Hamiltonian whose ground state can be approximated with standard algorithms such as VQE, and then rounded to yield approximation solutions of the original problem."
msgstr "El módulo Quantum Random Access Optimization (QRAO) está diseñado para permitir a los usuarios aprovechar un nuevo método cuántico para problemas de optimización combinatoria [1]. Este enfoque incorpora Códigos Cuánticos de Acceso Aleatorio (Quantum Random Access Codes, QRAC) como herramienta para codificar múltiples variables binarias clásicas en un solo qubit, ahorrando así recursos cuánticos y permitiendo la exploración de instancias de problemas más grandes en una computadora cuántica. Las codificaciones producen un Hamiltoniano cuántico local cuyo estado fundamental puede aproximarse con algoritmos estándar como VQE y luego redondearse para producir soluciones aproximadas del problema original."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:23
msgid "QRAO through a series of 3 classes: 1. The encoding class (``QuantumRandomAccessEncoding``): This class encodes the original problem into a relaxed problem that requires fewer resources to solve. 2. The rounding schemes (``SemideterministicRounding`` and ``MagicRounding``): This scheme is used to round the solution obtained from the relaxed problem back to a solution of the original problem. 3. The optimizer class (``QuantumRandomAccessOptimizer``): This class performs the high-level optimization algorithm, utilizing the capabilities of the encoding class and the rounding scheme."
msgstr "QRAO a través de una serie de 3 clases: 1. La clase de codificación (``QuantumRandomAccessEncoding``): esta clase codifica el problema original en un problema relajado que requiere menos recursos para resolver. 2. Los esquemas de redondeo (``SemidterministicRounding`` y ``MagicRounding``): Este esquema se utiliza para redondear la solución obtenida del problema relajado a una solución del problema original. 3. La clase optimizadora (``QuantumRandomAccessOptimizer``): esta clase realiza el algoritmo de optimización de alto nivel, utilizando las capacidades de la clase de codificación y el esquema de redondeo."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:26
msgid "*References*"
msgstr "*Referencias*"

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:28
msgid "[1] Bryce Fuller et al., *Approximate Solutions of Combinatorial Problems via Quantum Relaxations,* `arXiv:2111.03167 <https://arxiv.org/abs/2111.03167>`__"
msgstr "[1] Bryce Fuller et al., *Approximate Solutions of Combinatorial Problems via Quantum Relaxations,* `arXiv:2111.03167 <https://arxiv.org/abs/2111.03167>`__"

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:54
msgid "Set up a combinatorial optimization problem"
msgstr "Configurar un problema de optimización combinatoria"

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:56
msgid "In this tutorial, we will consider a random max-cut problem instance and use QRAO to try to find a maximum cut; in other words, a partition of the graph's vertices (nodes) into two sets that maximizes the number of edges between the sets."
msgstr "En este tutorial, consideraremos una instancia de problema max-cut aleatorio y usaremos QRAO para intentar encontrar un corte máximo; en otras palabras, una partición de los vértices (nodos) del grafo en dos conjuntos que maximiza el número de aristas entre los conjuntos."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:58
msgid "To begin, we utilize the ``Maxcut`` class from Qiskit Optimization's application module. It allows us to generate a ``QuadraticProgram`` representation of the given graph."
msgstr "Para comenzar, utilizamos la clase ``Maxcut`` del módulo de aplicación de Qiskit Optimization. Nos permite generar una representación ``QuadraticProgram`` del grafo dado."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:60
msgid "Note that once our problem has been represented as a ``QuadraticProgram``, it will need to be converted to the correct type, a `quadratic unconstrained binary optimization (QUBO) <https://en.wikipedia.org/wiki/Quadratic_unconstrained_binary_optimization>`__ problem, so that it is compatible with QRAO. A ``QuadraticProgram`` generated by ``Maxcut`` is already a QUBO, but if you define your own problem be sure you convert it to a QUBO before proceeding. Here is `a tutorial <https://qiskit.org/documentation/optimization/tutorials/02_converters_for_quadratic_programs.html>`__ on converting ``QuadraticPrograms``."
msgstr "Ten en cuenta que una vez que nuestro problema se haya representado como un ``QuadraticProgram``, será necesario convertirlo al tipo correcto, un problema de `optimización binaria cuadrática sin restricciones (QUBO) <https://en.wikipedia.org/wiki/Quadratic_unconstrained_binary_optimization>`__, para que sea compatible con QRAO. Un ``QuadraticProgram`` generado por ``Maxcut`` ya es un QUBO, pero si defines tu propio problema, asegúrate de convertirlo en un QUBO antes de continuar. Aquí hay `un tutorial <https://qiskit.org/documentation/optimization/tutorials/02_converters_for_quadratic_programs.html>`__ sobre la conversión de ``QuadraticPrograms``."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:163
msgid "Encode the problem into a quantum Hamiltonian"
msgstr "Codificar el problema en un Hamiltoniano cuántico"

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:165
msgid "Once we have appropriately configured our problem, we proceed to encode it using the ``QuantumRandomAccessEncoding`` class from the ``qrao`` module. This encoding step allows us to generate a quantum Hamiltonian operator that represents our problem. In particular, we employ a Quantum Random Access Code (QRAC) to encode multiple classical binary variables (corresponding to the nodes of our max-cut graph) into each qubit."
msgstr "Una vez que hemos configurado adecuadamente nuestro problema, procedemos a codificarlo usando la clase ``QuantumRandomAccessEncoding`` del módulo ``qrao``. Este paso de codificación nos permite generar un operador Hamiltoniano cuántico que representa nuestro problema. En particular, empleamos un código cuántico de acceso aleatorio (QRAC) para codificar múltiples variables binarias clásicas (correspondientes a los nodos de nuestro grafo max-cut) en cada qubit."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:167
msgid "It's important to note that the resulting \"relaxed\" Hamiltonian, produced by this encoding, will not be diagonal. This differs from the standard workflow in ``qiskit-optimization``, which typically generates a diagonal (Ising) Hamiltonian suitable for optimization using a ``MinimumEigenOptimizer``. You can find a tutorial on the ``MinimumEigenOptimizer`` `here <https://qiskit.org/documentation/optimization/tutorials/03_minimum_eigen_optimizer.html>`__."
msgstr "Es importante señalar que el Hamiltoniano \"relajado\" resultante, producido por esta codificación, no será diagonal. Esto difiere del flujo de trabajo estándar en ``qiskit-optimization``, que normalmente genera un Hamiltoniano diagonal (Ising) adecuado para la optimización utilizando un ``MinimumEigenOptimizer``. Puedes encontrar un tutorial sobre ``MinimumEigenOptimizer`` `aquí <https://qiskit.org/documentation/optimization/tutorials/03_minimum_eigen_optimizer.html>`__."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:169
msgid "In our encoding process, we employ a :math:`(3,1,p)-`\\ QRAC, where each qubit can accommodate a maximum of 3 classical binary variables. The parameter :math:`p` represents the bit recovery probability achieved through measurement. Depending on the nature of the problem, some qubits may have fewer than 3 classical variables assigned to them. To evaluate the compression achieved, we can examine the ``compression_ratio`` attribute of the encoding, which provides the ratio between the number of original binary variables and the number of qubits used (at best, a factor of 3)."
msgstr "En nuestro proceso de codificación, empleamos un :math:`(3,1,p)-`\\ QRAC, donde cada qubit puede acomodar un máximo de 3 variables binarias clásicas. El parámetro :math:`p` representa la probabilidad de recuperación de bits lograda mediante la medición. Dependiendo de la naturaleza del problema, algunos qubits pueden tener asignadas menos de 3 variables clásicas. Para evaluar la compresión lograda, podemos examinar el atributo ``compression_ratio`` de la codificación, que proporciona la relación entre el número de variables binarias originales y el número de qubits utilizados (en el mejor de los casos, un factor de 3)."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:249
msgid "Solve the problem using the ``QuantumRandomAccessOptimizer``"
msgstr "Resolver el problema usando el ``QuantumRandomAccessOptimizer``"

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:251
msgid "Having successfully encoded our input problem as a relaxed Hamiltonian, we proceed to solve it using the ``QuantumRandomAccessOptimizer``. This optimizer allows us to find an approximate solution to the relaxed problem by leveraging quantum computing techniques."
msgstr "Habiendo codificado con éxito nuestro problema de entrada como un Hamiltoniano relajado, procedemos a resolverlo usando el ``QuantumRandomAccessOptimizer``. Este optimizador nos permite encontrar una solución aproximada al problema relajado aprovechando técnicas de computación cuántica."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:253
msgid "To set up the optimizer, we need to specify two crucial components:"
msgstr "Para configurar el optimizador, necesitamos especificar dos componentes cruciales:"

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:255
msgid "**Minimum Eigensolver**: We specify a minimum eigensolver to heuristically search for the ground state of the relaxed problem Hamiltonian. As an example, we can use the Variational Quantum Eigensolver (VQE). For simulation purposes, we'll employ an simulator, but you can choose a quantum device as the backend if desired."
msgstr "**Solucionador Propio Mínimo**: Especificamos un solucionador propio mínimo para buscar heurísticamente el estado fundamental del problema de Hamiltoniano relajado. Como ejemplo, podemos utilizar el Solucionador Propio Variacional Cuántico (Variational Quantum Eigensolver, VQE). Para fines de simulación, emplearemos un simulador, pero puedes elegir un dispositivo cuántico como backend si lo deseas."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:256
msgid "**Rounding Scheme**: To map the ground state results back to a solution for the original problem, we specify a rounding scheme. By default, the ``SemideterministicRounding`` is used, but alternative scheme, ``MagicRounding``, is also available."
msgstr "**Esquema de Redondeo**: Para asignar los resultados del estado fundamental a una solución para el problema original, especificamos un esquema de redondeo. De forma predeterminada, se utiliza el ``SemideterministicRounding``, pero también está disponible el esquema alternativo, ``MagicRounding``."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:302
msgid "Finally, we move forward with solving the problem by invoking the ``solve()`` method. It's important to note that when calling ``solve()``, we pass the ``problem`` itself as an argument. Although we previously used ``encode()`` in ``QuantumRandomAccessEncoding`` to provide a clear understanding of the flow, ``solve(problem)`` automatically encodes the problem internally using ``QuantumRandomAccessEncoding``. This provides a streamlined and simplified workflow that eliminates the need for explicit encoding steps."
msgstr "Finalmente, avanzamos en la resolución del problema invocando el método ``solve()``. Es importante tener en cuenta que cuando llamamos a ``solve()``, pasamos el ``problem`` mismo como argumento. Aunque anteriormente usamos ``encode()`` en ``QuantumRandomAccessEncoding`` para proporcionar una comprensión clara del flujo, ``solve(problem)`` codifica automáticamente el problema internamente usando ``QuantumRandomAccessEncoding``. Esto proporciona un flujo de trabajo optimizado y simplificado que elimina la necesidad de pasos de codificación explícitos."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:305
msgid "The result is provides us as a ``QuantumRandomAccessOptimizationResult``. The ``x`` contains the binary values representing the best solution found, while the ``fval`` contains the corresponding objective value."
msgstr "El resultado se nos proporciona como ``QuantumRandomAccessOptimizationResult``. La ``x`` contiene los valores binarios que representan la mejor solución encontrada, mientras que el ``fval`` contiene el valor objetivo correspondiente."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:307
msgid "The ``relaxed_fval`` provides the expectation value of the relaxed Hamiltonian, adjusted to be in the units of the original optimization problem. For maximization problems, the best possible relaxed function value will always be greater than or equal to the best possible objective function value of the original problem. In practice, this often holds true for the best found value and best found objective function value as well."
msgstr "El ``relaxed_fval`` proporciona el valor esperado del Hamiltoniano relajado, ajustado para estar en las unidades del problema de optimización original. Para problemas de maximización, el mejor valor posible de la función relajada siempre será mayor o igual al mejor valor posible de la función objetivo del problema original. En la práctica, esto suele ser válido también para el mejor valor encontrado y el mejor valor de la función objetivo encontrado."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:369
msgid "Interpret the solution"
msgstr "Interpretar la solución"

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:380
msgid "In the context of `max-cut <https://en.wikipedia.org/wiki/Maximum_cut>`__, the result's \"optimal value\" tells us which subset each node belongs to given the partition found by the optimizer."
msgstr "En el contexto de `max-cut <https://en.wikipedia.org/wiki/Maximum_cut>`__, el \"valor óptimo\" del resultado nos dice a qué subconjunto pertenece cada nodo dada la partición encontrada por el optimizador."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:440
msgid "Inspect the results of subroutines"
msgstr "Inspeccionar los resultados de las subrutinas"

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:451
msgid "The `MinimumEigensolverResult <https://qiskit.org/ecosystem/algorithms/stubs/qiskit_algorithms.MinimumEigensolverResult.html>`__ that results from performing VQE on the relaxed Hamiltonian is available:"
msgstr "El `MinimumEigensolverResult <https://qiskit.org/ecosystem/algorithms/stubs/qiskit_algorithms.MinimumEigensolverResult.html>`__ que resulta de aplicar VQE en el Hamiltoniano relajado está disponible:"

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:497
msgid "The result of the rounding scheme is also worth considering. In this example, we used the ``SemideterministricRounding``. It's important to note that with semi-deterministic rounding, a single sample is generated as the result, making it the optimal solution candidate."
msgstr "También vale la pena considerar el resultado del esquema de redondeo. En este ejemplo, utilizamos el ``SemideterministricRounding``. Es importante tener en cuenta que con el redondeo semideterminista, se genera una única muestra como resultado, lo que la convierte en la solución candidata óptima."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:499
msgid "However, if we use the ``MagicRounding`` instead, multiple samples would be generated, each with a probability associated with it. These probabilities sum up to one, providing a distribution of potential optimal solutions."
msgstr "Sin embargo, si utilizamos ``MagicRounding`` en su lugar, se generarían múltiples muestras, cada una con una probabilidad asociada. Estas probabilidades suman uno, lo que proporciona una distribución de posibles soluciones óptimas."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:546
msgid "Exact Problem Solution with the ``NumpyMinimumEigensolver``"
msgstr "Solución Exacta del Problema con ``NumpyMinimumEigensolver``"

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:548
msgid "To assess the performance of QRAO in approximating the optimal solution, we can utilize the ``NumpyMinimumEigensolver``, an exact classical optimizer. We can obtain the exact optimal solution to the problem as follows:"
msgstr "Para evaluar el rendimiento de QRAO en la aproximación de la solución óptima, podemos utilizar ``NumpyMinimumEigensolver``, un optimizador clásico exacto. Podemos obtener la solución óptima exacta del problema de la siguiente manera:"

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:606
msgid "The approximation ratio (QRAO's objective function value divided by the optimal objective function value) tells us how closely QRAO approximated the optimal solution to the problem."
msgstr "La relación de aproximación (el valor de la función objetivo de QRAO dividido por el valor de la función objetivo óptima) nos dice qué tan cerca se aproximó QRAO a la solución óptima del problema."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:660
msgid "Solve the problem using the ``QuantumRandomAccessOptimizer`` with ``MagicRounding``"
msgstr "Resolver el problema usando el ``QuantumRandomAccessOptimizer`` con ``MagicRounding``"

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:662
msgid "Magic rounding is a quantum technique employed to map the ground state results of our encoded Hamiltonian back to a solution of the original problem. Unlike semi-deterministic rounding, magic rounding requires a quantum backend, which can be either hardware or a simulator. The backend is passed to the ``MagicRounding`` class through a ``Sampler``, which also determines the total number of shots (samples) that magic rounding will utilize. Note that to specify the backend, you need to choose a ``Sampler`` from providers such as Aer or IBM Runtime. Consequently, we need to specify ``Estimator`` and ``Sampler`` for the optimizer and the rounding scheme, respectively."
msgstr "El redondeo mágico es una técnica cuántica empleada para mapear los resultados del estado fundamental de nuestro Hamiltoniano codificado hasta una solución del problema original. A diferencia del redondeo semideterminista, el redondeo mágico requiere un backend cuántico, que puede ser hardware o un simulador. El backend se pasa a la clase ``MagicRounding`` a través de un ``Sampler``, que también determina el número total de iteraciones (muestras) que utilizará el redondeo mágico. Ten en cuenta que para especificar el backend, debes elegir un ``Sampler`` de proveedores como Aer o IBM Runtime. En consecuencia, necesitamos especificar ``Estimador`` y ``Sampler`` para el optimizador y el esquema de redondeo, respectivamente."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:665
msgid "In practice, users may choose to set a significantly higher number of magic rounding shots compared to the shots used by the minimum eigensolver for the relaxed problem. This difference arises because the minimum eigensolver estimates expectation values, while the magic rounding scheme returns the sample corresponding to the maximum function value found. The number of magic rounding shots directly impacts the diversity of the computational basis we can generate. When estimating an expectation value, increasing the number of shots enhances the convergence to the true value. However, when aiming to identify the largest possible function value, we often sample from the tail of a distribution of outcomes. As a result, until we observe the highest value outcome in our distribution, each additional shot increases the expected return value."
msgstr "En la práctica, los usuarios pueden optar por establecer un número significativamente mayor de iteraciones de redondeo mágico en comparación con los disparos utilizados por el solucionador propio mínimo para el problema relajado. Esta diferencia surge porque el solucionador propio mínimo estima los valores esperados, mientras que el esquema de redondeo mágico devuelve la muestra correspondiente al valor máximo de función encontrado. La cantidad de iteraciones de redondeo mágico impacta directamente en la diversidad de la base computacional que podemos generar. Al estimar un valor esperado, aumentar el número de iteraciones mejora la convergencia al valor real. Sin embargo, cuando pretendemos identificar el valor de función más grande posible, a menudo tomamos muestras de la cola de una distribución de resultados. Como resultado, hasta que observemos la salida de mayor valor en nuestra distribución, cada iteración adicional aumenta el valor de retorno esperado."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:668
msgid "In this tutorial, we use the ``Estimator`` for solving the relaxed Hamiltonian and the ``Sampler`` for performing magic rounding. Here, 10 times as many shots are used in the ``Sampler``. As the number of qubits increases, you may need more shots or ``weighted`` basis sampling, as explained above.\""
msgstr "En este tutorial, utilizamos el ``Estimator`` para resolver el Hamiltoniano relajado y el ``Sampler`` para realizar el redondeo mágico. Aquí se utilizan 10 veces más iteraciones en el ``Sampler``. A medida que aumenta el número de qubits, es posible que necesites más iteraciones o muestreos de base``weighted``, como se explicó anteriormente."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:759
msgid "Since magic rounding relies on nondeterministic measurements, the method collects a number of samples based on the shots count provided to the ``Sampler`` mentioned earlier. These samples are then consolidated, taking into account duplicates and calculating the empirical probability for each ``SolutionSample``. Each sample in the consolidation process includes a corresponding function value (``fval``)."
msgstr "Dado que el redondeo mágico se basa en mediciones no deterministas, el método recopila una cantidad de muestras en función del recuento de iteraciones proporcionado al ``Sampler`` mencionado anteriormente. Luego, estas muestras se consolidan, teniendo en cuenta los duplicados y calculando la probabilidad empírica para cada ``SolutionSample``. Cada muestra en el proceso de consolidación incluye un valor de función correspondiente (``fval``)."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:761
msgid "From the consolidated samples, we select the sample with the \"optimal\" function value. In the case of a max-cut problem, this means choosing the sample with the largest function value as our solution."
msgstr "De las muestras consolidadas, seleccionamos la muestra con el valor de función \"óptimo\". En el caso de un problema de máximo corte, esto significa elegir la muestra con el valor de función más grande como nuestra solución."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:843
msgid "Alternative: Solve the Problem in Two Explicit Steps"
msgstr "Alternativa: Resolver el Problema en dos Pasos Explícitos"

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:845
msgid "In the previous part of this tutorial, we utilized the ``qrao.solve()`` method, which solved the encoded problem (the ground state of the relaxed Hamiltonian) and performed rounding to map the ground state results back to a solution of the original problem. However, it is also possible to explicitly break down the calculation into these two distinct steps. This can be beneficial, especially when comparing solutions obtained across multiple rounding schemes applied to a candidate ground state."
msgstr "En la parte anterior de este tutorial, utilizamos el método ``qrao.solve()``, que resolvió el problema codificado (el estado fundamental del Hamiltoniano relajado) y realizamos un redondeo para mapear los resultados del estado fundamental a una solución del problema original. Sin embargo, también es posible dividir explícitamente el cálculo en estos dos pasos distintos. Esto puede resultar beneficioso, especialmente al comparar soluciones obtenidas a través de múltiples esquemas de redondeo aplicados a un estado fundamental candidato."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:847
msgid "In this section, we will explore how to perform each of these steps explicitly."
msgstr "En esta sección, exploraremos cómo realizar cada uno de estos pasos de forma explícita."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:850
msgid "Manually solve the relaxed problem."
msgstr "Resuelve manualmente el problema relajado."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:852
msgid "Let's start by invoking the ``qrao.solve_relaxed()`` method to directly solve the relaxed problem encoded by ``QuantumRandomAccessEncoding``. This method allows us to focus solely on solving the relaxed problem without performing rounding."
msgstr "Comencemos invocando al método ``qrao.solve_relaxed()`` para resolver directamente el problema relajado codificado por ``QuantumRandomAccessEncoding``. Este método nos permite centrarnos únicamente en resolver el problema relajado sin realizar redondeo."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:854
msgid "By invoking ``qrao.solve_relaxed()``, we obtain two essential outputs:"
msgstr "Al invocar ``qrao.solve_relaxed()``, obtenemos dos salidas esenciales:"

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:856
msgid "``MinimumEigensolverResult``: This object contains the results of running the minimum eigen optimizer such as the VQE on the relaxed problem. It provides information about the eigenvalue, and other relevant details. You can refer to the Qiskit Algorithms `documentation <https://qiskit.org/documentation/stubs/qiskit.algorithms.MinimumEigensolverResult.html>`__ for a comprehensive explanation of the entries within this object."
msgstr "``MinimumEigensolverResult``: este objeto contiene los resultados de ejecutar el optimizador propio mínimo, como el VQE, en el problema relajado. Proporciona información sobre el valor propio y otros detalles relevantes. Puedes consultar la `documentación <https://qiskit.org/documentation/stubs/qiskit.algorithms.MinimumEigensolverResult.html>`__ de Qiskit Algorithms para obtener una explicación completa de las entradas dentro de este objeto."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:857
msgid "``RoundingContext``: This object encapsulates essential information about the encoding and the solution of the relaxed problem in a form that is ready for consumption by the rounding schemes."
msgstr "``RoundingContext``: este objeto encapsula información esencial sobre la codificación y la solución del problema relajado en una forma que esté lista para ser consumida por los esquemas de redondeo."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:983
msgid "Manually perform rounding on the relaxed problem results"
msgstr "Realiza manualmente el redondeo de los resultados del problema relajado"

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:985
msgid "Next, we proceed with rounding the results obtained from solving the relaxed problem. To achieve this, we call the ``round()`` method on an instance of the desired rounding scheme and pass it the ``RoundingContext`` object. Below, we provide an example for both rounding schemes, utilizing the relaxed solution obtained in the previous step."
msgstr "Luego, se procede a redondear los resultados obtenidos al resolver el problema relajado. Para lograr esto, llamamos al método ``round()`` en una instancia del esquema de redondeo deseado y le pasamos el objeto ``RoundingContext``. A continuación, proporcionamos un ejemplo para ambos esquemas de redondeo, utilizando la solución relajada obtenida en el paso anterior."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:987
msgid "By manually performing the rounding step, we have more flexibility and control over the rounding scheme applied to the relaxed problem results. This allows for greater exploration and comparison of different rounding strategies."
msgstr "Al realizar manualmente el paso de redondeo, tenemos más flexibilidad y control sobre el esquema de redondeo aplicado a los resultados relajados del problema. Esto permite una mayor exploración y comparación de diferentes estrategias de redondeo."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:1108
msgid "Appendix"
msgstr "Apéndice"

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:1111
msgid "How to verify correctness of your encoding"
msgstr "Cómo verificar la exactitud de tu codificación"

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:1113
msgid "We assume for sake of the QRAO method that **the relaxation commutes with the objective function.** This notebook demonstrates how one can verify this for any problem (a ``QuadraticProgram`` in the language of Qiskit Optimization). One might want to verify this for pedagogical purposes, or as a sanity check when investigating unexpected behavior with the QRAO. Any problem that does not commute should be considered a bug, and if such a problem is discovered, we encourage that you submit it as `an issue on GitHub <https://github.com/qiskit-community/qiskit-optimization/issues>`__."
msgstr "Por el método QRAO, asumimos que **la relajación conmuta con la función objetivo.** Este cuaderno demuestra cómo se puede verificar esto para cualquier problema (un ``QuadraticProgram`` en el lenguaje de Qiskit Optimization). Es posible que desees verificar esto con fines pedagógicos o como punto de control al investigar un comportamiento inesperado con el QRAO. Cualquier problema que no conmute debe considerarse un error y, si se descubre dicho problema, te recomendamos que lo envíes como `un problema en GitHub <https://github.com/qiskit-community/qiskit-optimization/issues>`__."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:1116
msgid "The ``EncodingCommutationVerifier`` class allows one to conveniently iterate over all decision variable states and compare each objective value with the corresponding encoded objective value, in order to identify any discrepancy."
msgstr "La clase ``EncodingCommutationVerifier`` permite iterar convenientemente sobre todos los estados de las variables de decisión y comparar cada valor objetivo con el valor objetivo codificado correspondiente, para identificar cualquier discrepancia."

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:1215
msgid "As before, we ``encode()`` the problem using the QuantumRandomAccessEncoding class:"
msgstr "Como antes, ``encode()`` el problema usando la clase QuantumRandomAccessEncoding:"

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:1284
msgid "Finally, we iterate over every decision variable state using ``EncodingCommutationVerifier`` and verify that, in each case, the problem objective value matches the encoded objective value:"
msgstr "Finalmente, iteramos sobre cada estado de variable de decisión usando ``EncodingCommutationVerifier`` y verificamos que, en cada caso, el valor objetivo del problema coincida con el valor objetivo codificado:"

#: ../../tutorials/12_quantum_random_access_optimizer.ipynb:1316
msgid "If you are able to construct a problem that causes a violation, it is quite possible that you have discovered a bug in the ``QuantumRandomAccessEncoding`` logic. We would greatly appreciate it if you could share the problem with us by `submitting it as an issue <https://github.com/Qiskit/qiskit-optimization/issues>`__ on GitHub."
msgstr "Si puedes crear un problema que cause una infracción, es muy posible que hayas descubierto un error en la lógica de ``QuantumRandomAccessEncoding``. Te agradeceríamos mucho si pudieras compartir el problema con nosotros `enviándolo como un problema <https://github.com/Qiskit/qiskit-optimization/issues>`__ en GitHub."

