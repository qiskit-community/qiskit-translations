msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-29 20:52+0000\n"
"PO-Revision-Date: 2021-07-29 21:11\n"
"Last-Translator: \n"
"Language-Team: Vietnamese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: vi\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/02_converters_for_quadratic_programs.po\n"
"X-Crowdin-File-ID: 9644\n"
"Language: vi_VN\n"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:9
msgid "This page was generated from `docs/tutorials/02_converters_for_quadratic_programs.ipynb`__."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:9
msgid "Converters for Quadratic Programs"
msgstr "Bộ chuyển đổi cho các chương trình bậc hai"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:20
msgid "Optimization problems in Qiskit’s optimization module are represented with the ``QuadraticProgram`` class, which is generic and powerful representation for optimization problems. In general, optimization algorithms are defined for a certain formulation of a quadratic program and we need to convert our problem to the right type."
msgstr "Bài toán tối ưu hóa trong mô đun Qiskit’s optimization được diễn tả bằng lớp ``QuadraticProgram``, một phương pháp diễn tả khá phổ biến và mạnh cho các vấn đề tối ưu hóa. Nói chung, các thuật toán tối ưu hóa được dùng cho một vài công thức trong bài toán lập trình bậc hai và chúng ta cần chuyển vấn đề về đúng dạng."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:22
msgid "For instance, Qiskit provides several optimization algorithms that can handle Quadratic Unconstrained Binary Optimization (QUBO) problems. These are mapped to Ising Hamiltonians, for which Qiskit uses the ``qiskit.aqua.operators`` module, and then their ground state is approximated. For this optimization commonly known algorithms such as VQE or QAOA can be used as underlying routine. See the following tutorial about the `Minimum Eigen Optimizer <./03_minimum_eigen_optimizer.ipynb>`__ for more detail. Note that also other algorithms exist that work differently, such as the ``GroverOptimizer``."
msgstr "Ví dụ, Qiskit cung cấp một số thuật toán tối ưu hóa có thể xử lý các bài toán tối ưu hoá nhị phân bậc hai không ràng buộc (QUBO). Chúng được kết nối tới Ising Hamiltonian, trong đó Qiskit sử dụng mô-đun ``qiskit.aqua.operator``, và sau đó trạng thái cơ bản của chúng được xấp xỉ. Đối với các thuật toán tối ưu hóa này thường được biết đến như VQE hoặc QAOA có thể được sử dụng như thuật toán cơ bản. Xem hướng dẫn sau về `Minimum Eigen Optimizer <./3_minimum_eigen_optimizer.ipynb>`__ để biết thêm chi tiết. Lưu ý rằng cũng có các thuật toán khác tồn tại mà hoạt động kiểu khác, chẳng hạn như ``GroverOptimizer``."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:25
msgid "To map a problem to the correct input format, the optimization module of Qiskit offers a variety of converters. In this tutorial we’re providing an overview on this functionality. Currently, Qiskit contains the following converters. - ``InequalityToEquality``: converts inequality constraints into equality constraints with additional slack variables. - ``IntegerToBinary``: converts integer variables into binary variables and corresponding coefficients. - ``LinearEqualityToPenalty``: convert equality constraints into additional terms of the object function. - ``QuadraticProgramToQubo``: a wrapper for ``InequalityToEquality``, ``IntegerToBinary``, and ``LinearEqualityToPenalty`` for convenience."
msgstr "Để có thể ánh xạ một vấn đề đến định dạng đầu vào đúng, môđun tối ưu hóa của Qiskit cung cấp nhiều bộ chuyển đổi. Trong hướng dẫn này, chúng tôi đang cung cấp tổng quan về chức năng này. Hiện tại, Qiskit chứa các bộ chuyển đổi sau. -``InequalityToEquality``: chuyển đổi các ràng buộc bất đẳng thức thành các ràng buộc đẳng thức với các biến hạn bổ sung. - ``IntegerToBinary``: chuyển đổi các biến số nguyên thành các biến nhị phân và các hệ số tương ứng. -``LinearEqualityToPenalty``: chuyển đổi các ràng buộc đẳng thức thành các thuật ngữ bổ sung của hàm đối tượng. -``QuadraticProgramToQubo``: một bộ bọc cho ``InequalityToEquality``, ``IntegerToBinary``, và ``LinearEqualityToPenalty` để tiện lợi hơn."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:38
msgid "InequalityToEquality"
msgstr "InequalityToEquality"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:40
msgid "``InequalityToEqualityConverter`` converts inequality constraints into equality constraints with additional slack variables to remove inequality constraints from ``QuadraticProgram``. The upper bounds and the lower bounds of slack variables will be calculated from the difference between the left sides and the right sides of constraints. Signs of slack variables depend on symbols in constraints such as :math:`\\leq` and :math:`\\geq`."
msgstr "``InequalityToEqualityConverter`` chuyển một ràng buộc bất bình đẳng sang ràng buộc bình đẳng với các biến bù để có thể loại bỏ các ràng buộc bất bình đẳng trong ``QuadraticProgram``. Giới hạn trên và giới hạn dưới của biến bù sẽ được tính toán từ hiệu hai vế trái và phải của ràng buộc. Dấu của biến bù tùy thuộc vào ràng buộc, ví dụ :math:`\\leq` và :math:`\\geq`."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:42
msgid "The following is an example of a maximization problem with two inequality constraints. Variable :math:`x` and :math:`y` are binary variables and variable :math:`z` is an integer variable."
msgstr "Ví dụ tiếp theo là bài toán tối đa hóa với 2 ràng buộc. Biến :math:`x` và :math:`y` là hai biến nhị phân và biến :math:`z` là một biến số nguyên."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:56
msgid "With ``QuadraticProgram``, an optimization model of the problem is written as follows."
msgstr "Với ``QuadraticProgram``, một mô hình tối ưu hóa được viết như sau."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:156
msgid "Call ``convert`` method of ``InequalityToEquality`` to convert."
msgstr "Gọi phương thức ``convert`` của ``InequalityToEquality`` để chuyển đổi."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:254
msgid "After converting, the formulation of the problem looks like as the follows. As we can see, the inequality constraints are replaced with equality constraints with additional integer slack variables, :math:`xyz\\_leg\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack`."
msgstr "Sau khi chuyển đổi, các biểu thức có dạng như dưới đây. Như chúng ta có thể thấy, các ràng buộc bất bình đẳng đã được thay thế bằng các ràng buộc bình đẳng với các biến nguyên bù, :math:`xyz\\_leg\\text{@}int\\_slack` và :math:`xyz\\_geq\\text{@}int\\_slack`."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:256
msgid "Let us explain how the conversion works. For example, the lower bound of the left side of the first constraint is :math:`0` which is the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Thus, the upperbound of the additional integer variable must be :math:`5` to be able to satisfy even the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Note that we cut off the part after the decimal point in the converted formulation since the left side of the first constraint in the original formulation can be only integer values. For the second constraint, basically we apply the same approach. However, the symbol in the second constraint is :math:`\\geq`, so we add minus before :math:`xyz\\_geq\\text{@}int\\_slack` to be able to satisfy even the case of :math:`x=1, y=1`, and :math:`z=7`."
msgstr "Hãy giải thích cách mà chuyển đổi được thực hiện. Ví dụ, giới hạn dưới của vế trái của ràng buộc đầu tiên là :math:`0`, trong trường hợp :math:`x=0`, :math:`y=0`, và :math:`z=0`. Vì vậy, giới hạn trên của biến số nguyên phải là :math:`5` để có thể thỏa mãn trong trường hợp :math:`x=0`, :math:`y=0`, và :math:`z=0`. Để ý rằng chúng ta bỏ đi phần thập phân trong công thức vì vế trái của ràng buộc đầu tiên trong công thức ban đầu chỉ có thể là một số nguyên. Với ràng buộc thứ hai, chúng ta cũng áp dụng phương pháp đó. Tuy nhiên, dấu của ràng buộc thứ hai là :math:`\\geq`, nên chúng ta thêm dấu trừ trước :math:`xyz\\_geq\\text{@}int\\_slack` để có thể thỏa mãn điều kiện kể cả khi :math:`x=1, y=1`, và :math:`z=7`."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:283
msgid "IntegerToBinary"
msgstr "IntegerToBinary"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:294
msgid "``IntegerToBinary`` converts integer variables into binary variables and coefficients to remove integer variables from ``QuadraticProgram``. For converting, bounded-coefficient encoding proposed in `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Eq. (5)) is used. For more detail of the encoding method, please see the paper."
msgstr "``IntegerToBinary`` chuyển một biến thập phân sang một biến nhị phân và hệ số để loại bỏ biến thập phân trong từ ``QuadraticProgram``. Để chuyển đổi, hệ số bị chặn được mã hoá tại `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Eq. (5)). Để có thể hiểu rõ hơn, hãy đọc link trên."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:296
msgid "We use the output of ``InequalityToEquality`` as starting point. Variable :math:`x` and :math:`y` are binary variables, while the variable :math:`z` and the slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` are integer variables. We print the problem again for reference."
msgstr "Chúng ta dùng đầu ra của ``InequalityToEquality`` như một điểm bắt đầu. Biến :math:`x` và :math:`y` là các biến nhị phân, trong khi đó biến :math:`z` và biến bù :math:`xyz\\_leq\\text{@}int\\_slack` và :math:`xyz\\_geq\\text{@}int\\_slack` là các biến nguyên. Chúng ta in ra vấn đề một lần nữa để có thể tham khảo."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:382
msgid "Call ``convert`` method of ``IntegerToBinary`` to convert."
msgstr "Gọi hàm ``convert`` trong ``IntegerToBinary`` để chuyển đổi."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:492
msgid "After converting, integer variables :math:`z` is replaced with three binary variables :math:`z\\text{@}0`, :math:`z\\text{@}1` and :math:`z\\text{@}2` with coefficients 1, 2 and 4, respectively as the above. The slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` that were introduced by ``InequalityToEquality`` are also both replaced with three binary variables with coefficients 1, 2, 2, and 1, 2, 3, respectively."
msgstr "Sau khi chuyển đổi, biến thập phân :math:`z` được thay thế với ba biến nhị phân :math:`z\\text{@}0`, :math:`z\\text{@}1` và :math:`z\\text{@}2` với hệ số lần lượt là 1, 2 và 4. Biến bù :math:`xyz\\_leq\\text{@}int\\_slack` và :math:`xyz\\_geq\\text{@}int\\_slack` được đưa vào bởi ``InequalityToEquality`` được thế bởi ba biến nhị phân với hệ số lần lượt là 1, 2, 2, và 1, 2, 3."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:494
msgid "Note: Essentially the coefficients mean that the sum of these binary variables with coefficients can be the sum of a subset of :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, and :math:`\\{1, 2, 3\\}` to represent that acceptable values :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}`, and :math:`\\{0, \\ldots, 6\\}`, which respects the lower bound and the upper bound of original integer variables correctly."
msgstr "Lưu ý: bản chất của các hệ số là tổng của các biến nhị phân với các hệ số có thể là tổng của các tập con của :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, và :math:`\\{1, 2, 3\\}` để miêu tả các giá trị được chấp nhận :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}`, and :math:`\\{0, \\ldots, 6\\}`, tương ứng với giới hạn dưới và giới hạn trên trên của các biến nguyên gốc một cách chính xác."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:496
msgid "``IntegerToBinary`` also provides ``interpret`` method that is the functionality to translate a given binary result back to the original integer representation."
msgstr "``IntegerToBinary`` cũng cung cấp phương thức ``interpret`` với vai trò chuyển đổi một kết quả nhị phân về dạng thập phân ban đầu."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:508
msgid "LinearEqualityToPenalty"
msgstr "LinearEqualityToPenalty"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:519
msgid "``LinearEqualityToPenalty`` converts linear equality constraints into additional quadratic penalty terms of the objective function to map ``QuadraticProgram`` to an unconstrained form. An input to the converter has to be a ``QuadraticProgram`` with only linear equality constraints. Those equality constraints, e.g. \\ :math:`\\sum_i a_i x_i = b` where :math:`a_i` and :math:`b` are numbers and :math:`x_i` is a variable, will be added to the objective function in the form of :math:`M(b - \\sum_i a_i x_i)^2` where :math:`M` is a large number as penalty factor. By default :math:`M= 1e5`. The sign of the term depends on whether the problem type is a maximization or minimization."
msgstr "``LinearEqualityToPenalty`` chuyển đổi các ràng buộc đẳng thức tuyến tính thành các số hạng phạt bậc hai bổ sung của hàm mục tiêu để ánh xạ ``QuadraticProgram`` thành một dạng không bị ràng buộc. Đầu vào cho bộ chuyển đổi phải là ``QuadraticProgram`` chỉ với các ràng buộc đẳng thức tuyến tính. Những ràng buộc đẳng thức đó, ví dụ: \\ :math:`\\sum_i a_i x_i = b` trong đó :math:`a_i` và :math:`b` là các số và :math:`x_i` là một biến, sẽ được thêm vào hàm mục tiêu dưới dạng :math:`M (b - \\ sum_i a_i x_i)^2` trong đó :math:`M` là một số lớn như hệ số hình phạt. Theo mặc định :math:`M = 1e5`. Dấu của số hạng phụ thuộc vào dạng vấn đề là tối đa hoá hay tối thiểu hoá."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:522
msgid "We use the output of ``IntegerToBinary`` as starting point, where all variables are binary variables and all inequality constraints have been mapped to equality constraints. We print the problem again for reference."
msgstr "Chúng ta sử dụng đầu ra của ``IntegerToBinary`` làm điểm bắt đầu, trong đó tất cả các biến đều là biến nhị phân và tất cả các ràng buộc bất đẳng thức đã được ánh xạ thành các ràng buộc đẳng thức. Chúng ta in lại bài toán để tham khảo."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:620
msgid "Call ``convert`` method of ``LinearEqualityToPenalty`` to convert."
msgstr "Gọi phương pháp ``convert`` trong ``LinearEqualityToPenalty`` để chuyển đổi."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:774
msgid "After converting, the equality constraints are added to the objective function as additional terms with the default penalty factor :math:`M=1e5`. The resulting problem is now a QUBO and compatible with many quantum optimization algorithms such as VQE, QAOA and so on."
msgstr "Sau khi chuyển đổi, hạn chế đẳng thức được thêm vào hàm mục tiêu như các số hạng bổ sung với yếu tố phạt mặc định :math:`M=1e5 `. Vấn đề cho ra bây giờ là một QUBO và tương thích với nhiều thuật toán tối ưu hóa lượng tử như VQE, QAOA và vân vân."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:785
msgid "This gives the same result as before."
msgstr "Điều này cho kết quả tương tự như trước đây."

