msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-16 13:48+0000\n"
"PO-Revision-Date: 2022-02-09 17:34\n"
"Last-Translator: \n"
"Language-Team: Tamil\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/03_minimum_eigen_optimizer.po\n"
"X-Crowdin-File-ID: 9646\n"
"Language: ta_IN\n"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:9
msgid "This page was generated from `docs/tutorials/03_minimum_eigen_optimizer.ipynb`__."
msgstr "இந்தப் பக்கம் `docs/tutorials/03_quantum_kernel.ipynb`__ இலிருந்து உருவாக்கப்பட்டது."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:9
msgid "Minimum Eigen Optimizer"
msgstr "குறைந்தபட்ச ஈகன் ஆப்டிமைசர்"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:21
msgid "Introduction"
msgstr "முன்னுரை"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:32
msgid "An interesting class of optimization problems to be addressed by quantum computing are Quadratic Unconstrained Binary Optimization (QUBO) problems. Finding the solution to a QUBO is equivalent to finding the ground state of a corresponding Ising Hamiltonian, which is an important problem not only in optimization, but also in quantum chemistry and physics. For this translation, the binary variables taking values in :math:`\\{0, 1\\}` are replaced by spin variables taking values in :math:`\\{-1, +1\\}`, which allows to replace the resulting spin variables by Pauli Z matrices, and thus, an Ising Hamiltonian. For more details on this mapping we refer to [1]."
msgstr "குவாண்டம் கம்ப்யூட்டிங் மூலம் தீர்க்கப்பட வேண்டிய தேர்வுமுறை சிக்கல்களின் ஒரு சுவாரஸ்யமான வர்க்கம் குவாட்ராடிக் கட்டுப்பாடற்ற பைனரி ஆப்டிமைசேஷன் (QUBO) சிக்கல்கள். ஒரு QUBO க்கான தீர்வைக் கண்டறிவது தொடர்புடைய ஐசிங் ஹாமில்டோனியனின் நில நிலையைக் கண்டுபிடிப்பதற்கு சமம், இது தேர்வுமுறைக்கு மட்டுமல்ல, குவாண்டம் வேதியியல் மற்றும் இயற்பியலிலும் ஒரு முக்கியமான பிரச்சினையாகும். இந்த மொழிபெயர்ப்பிற்கு, பைனரி மாறிகள் :math: `\\ {0, 1 \\}` இதில் மதிப்புகளை எடுக்கும் இவை :math: `\\ {- 1, +1 \\}` மதிப்புகளை எடுக்கும் சுழல் மாறிகளால் மாற்றப்படுகின்றன , இது பவுலி இசட் மெட்ரிக்ஸின் விளைவாக சுழல் மாறிகளால் மாற்ற அனுமதிக்கிறது, இதனால், ஒரு ஐசிங் ஹாமில்டோனியன். இந்த மேப்பிங் குறித்த கூடுதல் விவரங்களுக்கு [1] ஐக் குறிப்பிடுகிறோம்."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:35
msgid "Qiskit provides automatic conversion from a suitable ``QuadraticProgram`` to an Ising Hamiltonian, which then allows to leverage all the ``MinimumEigenSolver`` such as"
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:37
msgid "``VQE``,"
msgstr "``VQE``,"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:38
msgid "``QAOA``, or"
msgstr "``QAOA``, அல்லது"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:39
msgid "``NumpyMinimumEigensolver`` (classical exact method)."
msgstr "``NumpyMinimumEigensolver`` (கிளாசிக்கல் சரியான முறை)."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:41
msgid "Qiskit wraps the translation to an Ising Hamiltonian (in Qiskit Aqua also called ``Operator``), the call to an ``MinimumEigensolver`` as well as the translation of the results back to ``OptimizationResult`` in the ``MinimumEigenOptimizer``."
msgstr "க்விஸ்கிட் மொழிபெயர்ப்பை ஒரு ஐசிங் ஹாமில்டோனியன் (க்விஸ்கிட் அக்வாவில் ``Operator`` என்றும் அழைக்கப்படுகிறது), ``MinimumEigensolver``க்கான அழைப்பு மற்றும் ``MinimumEigenOptimizer`` இல் ``OptimizationResult`` என்ற முடிவுகளின் மொழிபெயர்ப்பு."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:43
msgid "In the following we first illustrate the conversion from a ``QuadraticProgram`` to an ``Operator`` and then show how to use the ``MinimumEigenOptimizer`` with different ``MinimumEigensolver`` to solve a given ``QuadraticProgram``. The algorithms in Qiskit automatically try to convert a given problem to the supported problem class if possible, for instance, the ``MinimumEigenOptimizer`` will automatically translate integer variables to binary variables or add a linear equality constraints as a quadratic penalty term to the objective. It should be mentioned that Aqua will through a ``QiskitOptimizationError`` if conversion of a quadratic program with integer variable is attempted."
msgstr "பின்வருபவற்றில் நாம் முதலில் ஒரு ``QuadraticProgram`` இலிருந்து ஒரு ``Operator`` க்கு மாற்றத்தை விளக்குகிறோம், பின்னர் கொடுக்கப்பட்ட ``QuadraticProgram`` ஐ தீர்க்க வெவ்வேறு ``MinimumEigensolver`` உடன் ``MinimumEigenOptimizer`` ஐ எவ்வாறு பயன்படுத்துவது என்பதை விளக்குகிறோம். Qiskit உள்ள வழிமுறைகள் தானாகவே ஒரு கொடுக்கப்பட்ட பிரச்சனையை ஆதரிக்கப்படும் சிக்கல் வர்க்கத்திற்கு மாற்ற முயற்சிக்கிறது, உதாரணமாக, ``MinimumEigenOptimizer`` தானாகவே முழு எண் மாறிகளை பைனரி மாறிகளுக்கு மொழிபெயர்க்கும் அல்லது ஒரு நேரியல் சமத்துவ கட்டுப்பாடுகளை இலக்கிற்கு ஒரு இருபடி தண்டனையாக சேர்க்கும். முழு எண் மாறிகொண்ட ஒரு இருபடி நிரலை மாற்ற முயற்சித்தால், ``QiskitOptimizationError`` மூலம் அக்வா ஒரு ``QiskitOptimizationError`` மூலம் வரும் என்பதை குறிப்பிட வேண்டும்."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:46
msgid "The circuit depth of ``QAOA`` potentially has to be increased with the problem size, which might be prohibitive for near-term quantum devices. A possible workaround is Recursive QAOA, as introduced in [2]. Qiskit generalizes this concept to the ``RecursiveMinimumEigenOptimizer``, which is introduced at the end of this tutorial."
msgstr "``QAOA`` இன் சுற்று ஆழம் சாத்தியமான சிக்கல் அளவுடன் அதிகரிக்கப்பட வேண்டும், இது கிட்டத்தட்ட கால குவாண்டம் சாதனங்களுக்கு தடை செய்யப்படலாம். ஒரு சாத்தியமான பணிச்சுற்று ரிகர்சிவ் QAOA ஆகும், இது [2] இல் அறிமுகப்படுத்தப்பட்டது. இந்த கருத்தை Qiskit பொதுமைப்படுத்துகிறது ``RecursiveMinimumEigenOptimizer``, இது இந்த பயிற்சிகள் முடிவில் அறிமுகப்படுத்தப்படுகிறது."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:49
msgid "References"
msgstr "குறிப்புகள்"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:51
msgid "[1] `A. Lucas, Ising formulations of many NP problems, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>`__"
msgstr "[1] ` A. Lucas, Ising formulations of many NP problems, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>` _"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:53
msgid "[2] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"
msgstr "[2] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:65
msgid "Converting a QUBO to an Operator"
msgstr "ஒரு QUBO ஐ ஒரு ஆபரேட்டராக மாற்றுதல்"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:165
msgid "Next we translate this QUBO into an Ising operator. This results not only in an ``Operator`` but also in a constant offset to be taking into account to shift the resulting value."
msgstr "அடுத்து இந்த QUBO ஐ ஒரு ஐசிங் ஆபரேட்டராக மொழிபெயர்க்கிறோம். இதன் விளைவாக ஒரு ``Operator`` மட்டுமல்ல, ஒரு நிலையான ஆஃப்செட்டிலும் விளைந்த மதிப்பை மாற்றுவதற்கு கணக்கில் எடுத்துக்கொள்ளப்படுகிறது."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:222
msgid "Sometimes an ``QuadraticProgram`` might also directly be given in the form of an ``Operator``. For such cases, Qiskit also provides a converter from an ``Operator`` back to a ``QuadraticProgram``, which we illustrate in the following."
msgstr "சில நேரங்களில் ``QuadraticProgram``என்பது நேரடியாக ``Operator`` வடிவத்தில் வழங்கப்படலாம். அத்தகைய சந்தர்ப்பங்களில், Qiskit ஒரு ``Operator`` இருந்து ஒரு மாற்றி வழங்குகிறது ``QuadraticProgram``, இது நாம் பின்வரும் விளக்க."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:296
msgid "This converter allows, for instance, to translate an ``Operator`` to a ``QuadraticProgram`` and then solve the problem with other algorithms that are not based on the Ising Hamiltonian representation, such as the ``GroverOptimizer``."
msgstr "இந்த மாற்றி உதாரணமாக, ஒரு ``QuadraticProgram`` க்கு ஒரு ``Operator`` ஐ மொழிபெயர்க்க அனுமதிக்கிறது, பின்னர் ``GroverOptimizer`` போன்ற ஐசிங் ஹாமில்டன் பிரதிநிதித்துவத்தின் அடிப்படையில் இல்லாத மற்ற வழிமுறைகளுடன் சிக்கலைத் தீர்க்க அனுமதிக்கிறது."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:308
msgid "Solving a QUBO with the MinimumEigenOptimizer"
msgstr "மினிமம்ஐகன்ஆப்டிமைசர் உடன் ஒரு QUBO ஐ த் தீர்த்தல்"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:319
msgid "We start by initializing the ``MinimumEigensolver`` we want to use."
msgstr "நாம் ``MinimumEigensolver`` ஐ துவக்குவதன் மூலம் தொடங்குகிறோம். அதை பயன்படுத்த விரும்புகிறோம்."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:347
msgid "Then, we use the ``MinimumEigensolver`` to create ``MinimumEigenOptimizer``."
msgstr "பின்னர், நாங்கள் ``MinumEigenOptimizer`` ஐ உருவாக்க ``MinimumEigensolver`` ஐ பயன்படுத்துகிறோம்."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:369
msgid "We first use the ``MinimumEigenOptimizer`` based on the classical exact ``NumPyMinimumEigensolver`` to get the optimal benchmark solution for this small example."
msgstr "இந்த சிறிய எடுத்துக்காட்டுக்கு உகந்த பெஞ்ச்மார்க் தீர்வைப் பெற கிளாசிக்கல் துல்லியமான ``NumPyMinimumEigensolver`` அடிப்படையிலான ``MinimumEigenOptimizer`` ஐ முதலில் பயன்படுத்துகிறோம்."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:414
msgid "Next we apply the ``MinimumEigenOptimizer`` based on ``QAOA`` to the same problem."
msgstr "அடுத்து, அதே சிக்கலுக்கு 'QAOA' அடிப்படையில் ``MinimumEigenOptimizer`` ஐப் பயன்படுத்துகிறோம்."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:460
msgid "Analysis of Samples"
msgstr "மாதிரிகளின் பகுப்பாய்வு"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:462
msgid "``OptimizationResult`` provides a useful information source ``SolutionSample`` (here denoted as *samples*). They contain information about input values ``x``, objective function values ``fval``, probability of obtaining that result ``probability`` and the solution status ``status`` (``SUCCESS``, ``FAILURE``, ``INFEASIBLE``)."
msgstr "``OptimizationResult`` பயனுள்ள தகவல் ஆதாரத்தை வழங்குகிறது ``SolutionSample`` (இங்கே *மாதிரிகள்* என குறிப்பிடப்படுகிறது). உள்ளீட்டு மதிப்புகள் பற்றிய தகவல்கள் அவற்றில் உள்ளன ``x``, நோக்க செயற்பாடு ``fval``, அந்த முடிவைப் பெறுவதற்கான நிகழ்தகவு ``probability`` மற்றும் தீர்வு நிலை ``status`` (``SUCCESS``, ``FAILURE``, ``INFEASIBLE``)."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:520
msgid "We may also want to filter samples according to their status or probabilities."
msgstr "மாதிரிகள் அவற்றின் நிலை அல்லது நிகழ்தகவுகளுக்கு ஏற்ப வடிகட்டவும் நாங்கள் விரும்பலாம்."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:598
msgid "If we want to obtain a better perspective of the results, statistics is very helpful, both with respect to the objective function values and their respective probabilities. Thus, mean and standard deviation are the very basics for understanding the results."
msgstr "முடிவுகளின் சிறந்த முன்னோக்கை நாம் பெற விரும்பினால், புள்ளிவிவரங்கள் மிகவும் உதவியாக இருக்கும், இரண்டுமே புறநிலை செயல்பாட்டு மதிப்புகள் மற்றும் அவற்றுடன் தொடர்புடைய சாத்தியக்கூறுகள். எனவே, சராசரி மற்றும் நிலையான விலகல் முடிவுகளைப் புரிந்துகொள்வதற்கான அடிப்படைகள்."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:680
msgid "Finally, despite all number-crunching, visualization is usually the best early-analysis approach."
msgstr "இறுதியாக, எண்-நொறுக்குதல் இருந்தபோதிலும், காட்சிப்படுத்தல் பொதுவாக சிறந்த ஆரம்ப-பகுப்பாய்வு அணுகுமுறையாகும்."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:759
msgid "RecursiveMinimumEigenOptimizer"
msgstr "ரிகர்சிவ் மினிமம்ஈஜென் ஆப்டிமைசர்"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:770
msgid "The ``RecursiveMinimumEigenOptimizer`` takes a ``MinimumEigenOptimizer`` as input and applies the recursive optimization scheme to reduce the size of the problem one variable at a time. Once the size of the generated intermediate problem is below a given threshold (``min_num_vars``), the ``RecursiveMinimumEigenOptimizer`` uses another solver (``min_num_vars_optimizer``), e.g., an exact classical solver such as CPLEX or the ``MinimumEigenOptimizer`` based on the ``NumPyMinimumEigensolver``."
msgstr "``RecursiveMinimumEigenOptimizer`` ஆனது ஒரு ``MinimumEigenOptimizer`` ஐ உள்ளீட்டாக எடுத்துக்கொள்கிறது மற்றும் ஒரு நேரத்தில் ஒரு மாறியின் அளவை குறைக்க மீண்டும் வரும் தேர்வுமுறை திட்டத்தைப் பயன்படுத்துகிறது. உருவாக்கப்பட்ட இடைப்பட்ட சிக்கலின் அளவு ஒரு குறிப்பிட்ட நுழைவாயிலுக்கு கீழே இருந்தால் (``min_num_vars``), ``RecursiveMinimumEigenOptimizer`` மற்றொரு தீர்வைப் (``min_num_vars_optimizer``), உதாரணமாக, CPLEX அல்லது ``NumPyMinimumEigensolver``அடிப்படையில் ``MinimumEigenOptimizer`` போன்ற சரியான கிளாசிக்கல் தீர்வுகளைப் பயன்படுத்துகிறது."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:772
msgid "In the following, we show how to use the ``RecursiveMinimumEigenOptimizer`` using the two ``MinimumEigenOptimizer`` introduced before."
msgstr "பின்வருவனவற்றில், முன்னர் அறிமுகப்படுத்தப்பட்ட இரண்டு `` MinimumEigenOptimizer`` ஐப் பயன்படுத்தி ``RecursiveMinimumEigenOptimizer`` ஐ எவ்வாறு பயன்படுத்துவது என்பதை நாங்கள் காட்டுகிறோம்."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:783
msgid "First, we construct the ``RecursiveMinimumEigenOptimizer`` such that it reduces the problem size from 3 variables to 1 variable and then uses the exact solver for the last variable. Then we call ``solve`` to optimize the considered problem."
msgstr "முதலில், நாம் ``RecursiveMinimumEigenOptimizer`` கட்டமைக்கவேண்டும், இது சிக்கல் அளவை 3 மாறிகளிலிருந்து 1 மாறிக்கு குறைக்கிறது, பின்னர் கடைசி மாறிக்கான சரியான தீர்வை பயன்படுத்துகிறது. பின்னர் நாம் கருத்தரிக்கப்பட்ட சிக்கலை மேம்படுத்த ``solve``ஐ அழைக்கிறோம்."

