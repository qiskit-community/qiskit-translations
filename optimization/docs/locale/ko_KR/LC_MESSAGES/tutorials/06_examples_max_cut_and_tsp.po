msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-14 08:10+0000\n"
"PO-Revision-Date: 2023-11-14 08:26\n"
"Last-Translator: \n"
"Language: ko\n"
"Language-Team: Korean\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /main/optimization/docs/locale/en/LC_MESSAGES/tutorials/06_examples_max_cut_and_tsp.po\n"
"X-Crowdin-File-ID: 9652\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:9
msgid "This page was generated from `docs/tutorials/06_examples_max_cut_and_tsp.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/06_examples_max_cut_and_tsp.ipynb`__에서 생성되었다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:9
msgid "Max-Cut and Traveling Salesman Problem"
msgstr "최대 컷 및 외판원 문제"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:21
msgid "Introduction"
msgstr "소개"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:23
msgid "Many problems in quantitative fields such as finance and engineering are optimization problems. Optimization problems lie at the core of complex decision-making and definition of strategies."
msgstr "금융과 공학과 같은 정량적 분야에서의 많은 문제들은 최적화 문제이다. 최적화 문제는 복잡한 의사결정과 전략의 정의의 핵심이다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:25
msgid "Optimization (or combinatorial optimization) means searching for an optimal solution in a finite or countably infinite set of potential solutions. Optimality is defined with respect to some criterion function, which is to be minimized or maximized. This is typically called cost function or objective function."
msgstr "최적화 (또는 조합 최적화) 는 유한한 또는 수적으로 무한한 세트의 잠재적 솔루션에서 최적의 솔루션을 검색하는 것을 의미한다. 최적은 일부 기준 함수와 관련하여 정의되며 최소화되거나 최대화되어야 한다. 이는 일반적으로 비용 함수 또는 목적 함수라고 합니다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:27
msgid "**Typical optimization problems**"
msgstr "**전형적인 최적화 문제들**"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:29
msgid "Minimization: cost, distance, length of a traversal, weight, processing time, material, energy consumption, number of objects"
msgstr "최소화: 비용, 거리, 횡단의 길이, 가중치, 처리 시간, 재료, 에너지 소비, 객체들의 수"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:31
msgid "Maximization: profit, value, output, return, yield, utility, efficiency, capacity, number of objects"
msgstr "최대화율: 이익, 가치, 출력, 반환, 수율, 도구, 효율성, 용량, 오브젝트 수"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:33
msgid "We consider here max-cut problems of practical interest in many fields, and show how they can be mapped on quantum computers manually and how Qiskit optimization module supports this."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:36
msgid "Weighted Max-Cut"
msgstr "가중치를 지닌 최대 컷"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:38
msgid "Max-Cut is an NP-complete problem, with applications in clustering, network science, and statistical physics. To grasp how practical applications are mapped into given Max-Cut instances, consider a system of many people that can interact and influence each other. Individuals can be represented by vertices of a graph, and their interactions seen as pairwise connections between vertices of the graph, or edges. With this representation in mind, it is easy to model typical marketing problems. For example, suppose that it is assumed that individuals will influence each other's buying decisions, and knowledge is given about how strong they will influence each other. The influence can be modeled by weights assigned on each edge of the graph. It is possible then to predict the outcome of a marketing strategy in which products are offered for free to some individuals, and then ask which is the optimal subset of individuals that should get the free products, in order to maximize revenues."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:41
msgid "The formal definition of this problem is the following:"
msgstr "이 문제의 공식적인 정의는 다음과 같다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:43
msgid "Consider an :math:`n`-node undirected graph *G = (V, E)* where *\\|V\\| = n* with edge weights :math:`w_{ij}>0`, :math:`w_{ij}=w_{ji}`, for :math:`(i, j)\\in E`. A cut is defined as a partition of the original set V into two subsets. The cost function to be optimized is in this case the sum of weights of edges connecting points in the two different subsets, *crossing* the cut. By assigning :math:`x_i=0` or :math:`x_i=1` to each node :math:`i`, one tries to maximize the global profit function (here and in the following summations run over indices 0,1,...n-1)"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:46
msgid "\\tilde{C}(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j).\n\n"
msgstr "\\tilde{C}(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j).\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:48
msgid "In our simple marketing model, :math:`w_{ij}` represents the probability that the person :math:`j` will buy a product after :math:`i` gets a free one. Note that the weights :math:`w_{ij}` can in principle be greater than :math:`1` (or even negative), corresponding to the case where the individual :math:`j` will buy more than one product. Maximizing the total buying probability corresponds to maximizing the total future revenues. In the case where the profit probability will be greater than the cost of the initial free samples, the strategy is a convenient one. An extension to this model has the nodes themselves carry weights, which can be regarded, in our marketing model, as the likelihood that a person granted with a free sample of the product will buy it again in the future. With this additional information in our model, the objective function to maximize becomes"
msgstr "우리는 간단한 마케팅 모델이서 :math:`w_{ij}` 는 :math:`i` 가 무료 제품을 받은 후에 :math:`j` 가 제품을 구입할 확률을 나타낸다. 가중치 :math:`w_{ij}` 는 원칙적으로 개별 :math:`j` 가 하나 이상의 제품을 구매하는 경우에 대응하는 :math:`1` (또는 심지어 음의 수) 보다 클 수 있다. 총 구매 확률을 극대화하는 것은 총 미래 수익을 극대화하는 것과 일치한다. 초기 무료 샘플의 비용보다 이익 확률이 더 클 경우, 전략은 다음과 같은 경우에 편리하게 이용할 수 있다. 이 모델을 확장하여 마케팅 모델에서는 제품의 무료 샘플을 부여받은 사람이 향후 다시 제품을 구입할 가능성을 노드 자체에 가중치로 부여할 수 있다. 이 모델에 추가 정보가 추가되어 있으므로, 최대화할 수 있는 대상은 다음과 같다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:51
msgid "C(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j)+\\sum_i w_i x_i.\n\n"
msgstr "C(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j)+\\sum_i w_i x_i.\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:53
msgid "In order to find a solution to this problem on a quantum computer, one needs first to map it to an Ising Hamiltonian. This can be done with the assignment :math:`x_i\\rightarrow (1-Z_i)/2`, where :math:`Z_i` is the Pauli Z operator that has eigenvalues :math:`\\pm 1`. Doing this we find that"
msgstr "양자 컴퓨터에서 이 문제에 대한 해결책을 찾기 위해 먼저 이것을 이징 해밀토니안 문제에 매핑한다. 이는 :math:`x_1\\rightarrow (1-Z_i) /2` 를 문제에 적용해서 사용하며, 여기서 :math:`Z_i` 는 고유값 :math:`\\pm 1` 을 갖는 파울리(Pauli) Z 연산자이다. 이 작업을 수행하면"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:55
msgid "C(\\textbf{Z}) = \\sum_{i,j} \\frac{w_{ij}}{4} (1-Z_i)(1+Z_j) + \\sum_i \\frac{w_i}{2} (1-Z_i) = -\\frac{1}{2}\\left( \\sum_{i<j} w_{ij} Z_i Z_j +\\sum_i w_i Z_i\\right)+\\mathrm{const},\n\n"
msgstr "C(\\textbf{Z}) = \\sum_{i,j} \\frac{w_{ij}}{4} (1-Z_i)(1+Z_j) + \\sum_i \\frac{w_i}{2} (1-Z_i) = -\\frac{1}{2}\\left( \\sum_{i<j} w_{ij} Z_i Z_j +\\sum_i w_i Z_i\\right)+\\mathrm{const},\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:57
msgid "where :math:`\\mathrm{const} = \\sum_{i<j}w_{ij}/2+\\sum_i w_i/2`. In other terms, the weighted Max-Cut problem is equivalent to minimizing the Ising Hamiltonian"
msgstr ":math:`\\mathrm{const} = \\sum_{i<j}w_{ij}/2+\\sum_i w_i/2` 이다. 다른 말로 하면 가중치 있는 최대 컷 문제는 Ising Hamiltonian을 최소화하는 것과 같다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:59
msgid "H = \\sum_i w_i Z_i + \\sum_{i<j} w_{ij} Z_iZ_j.\n\n"
msgstr "H = \\sum_i w_i Z_i + \\sum_{i<j} w_{ij} Z_iZ_j.\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:61
msgid "Qiskit optimization module can generate the Ising Hamiltonian for the first profit function :math:`\\tilde{C}`. To this extent, function :math:`\\tilde{C}` can be modeled as a ``QuadraticProgram``, which provides the ``to_ising()`` method."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:64
msgid "Approximate Universal Quantum Computing for Optimization Problems"
msgstr "최적화 문제를 위한 근사적인 범용 양자 컴퓨팅"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:66
msgid "There has been a considerable amount of interest in recent times about the use of quantum computers to find a solution to combinatorial optimization problems. It is important to say that, given the classical nature of combinatorial problems, exponential speedup in using quantum computers compared to the best classical algorithms is not guaranteed. However, due to the nature and importance of the target problems, it is worth investigating heuristic approaches on a quantum computer that could indeed speed up some problem instances. Here we demonstrate an approach that is based on the *Quantum Approximate Optimization Algorithm* (QAOA) by Farhi, Goldstone, and Gutmann (2014). We frame the algorithm in the context of *approximate quantum computing*, given its heuristic nature."
msgstr "근래에는 조합 최적화 문제에 대한 해결책을 찾기 위해 양자 컴퓨터를 사용하는 것에 대해 상당한 관심이 있었다. 조합문제의 고전적 성격을 감안할 때, 최고의 고전 알고리즘에 비해 양자 컴퓨터를 사용하는 데 있어서 기하급수적인 속도 향상은 보장되지 않는다고 말할 필요가 있다. 그러나, 목표 문제의 본질과 중요성 때문에, 실제로 일부 문제 발생을 가속화할 수 있는 양자 컴퓨터에서의 경험적 접근법을 조사할 필요가 있다. 여기서는 Farhi, Goldstone 및 Gutman(2014년) 의 *Quantum Approximate Optimization Algorithm* (QAOA) 에 기반한 접근방식을 설명한다. 알고리즘의 경험적 특성을 감안할 때 *근사 양자 컴퓨팅* 의 맥락에서 알고리즘을 구성한다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:69
msgid "The algorithm works as follows:"
msgstr "알고리즘은 다음과 같이 작동한다:"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:71
msgid "Choose the :math:`w_i` and :math:`w_{ij}` in the target Ising problem. In principle, even higher powers of Z are allowed."
msgstr "대상 Ising 문제에서 :math:`w_i` 와 :math:`w_{ij}` 를 선택한다. 원칙적으로, Z의 더 높은 거듭제곱이 허용된다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:73
msgid "Choose the depth of the quantum circuit :math:`m`. Note that the depth can be modified adaptively."
msgstr "양자회로 :math:`m` 의 깊이(depth)를 선택하라. 깊이는 조정될 수 있다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:75
msgid "Choose a set of controls :math:`\\theta` and make a trial function :math:`|\\psi(\\boldsymbol\\theta)\\rangle`, built using a quantum circuit made of C-Phase gates and single-qubit Y rotations, parameterized by the components of :math:`\\boldsymbol\\theta`."
msgstr "컨트롤 :math:`\\theta` 를 선택하고, :math:`\\boldsymbol\\theta` 의 성분들에 의해 파라미터화된, C-위상 게이트로 만들어진 양자 회로와 단일 큐비트 Y 회전으로 만들어진 양자 회로를 사용하여 시험 기능 :math:`|\\psi(\\boldsymbol\\theta)\\rangle` 을 작성한다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:77
msgid "Evaluate"
msgstr "평가"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:79
msgid "C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)~|H|~\\psi(\\boldsymbol\\theta)\\rangle = \\sum_i w_i \\langle\\psi(\\boldsymbol\\theta)~|Z_i|~\\psi(\\boldsymbol\\theta)\\rangle+ \\sum_{i<j} w_{ij} \\langle\\psi(\\boldsymbol\\theta)~|Z_iZ_j|~\\psi(\\boldsymbol\\theta)\\rangle\n\n"
msgstr "C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)~|H|~\\psi(\\boldsymbol\\theta)\\rangle = \\sum_i w_i \\langle\\psi(\\boldsymbol\\theta)~|Z_i|~\\psi(\\boldsymbol\\theta)\\rangle+ \\sum_{i<j} w_{ij} \\langle\\psi(\\boldsymbol\\theta)~|Z_iZ_j|~\\psi(\\boldsymbol\\theta)\\rangle\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:81
msgid "by sampling the outcome of the circuit in the Z-basis and adding the expectation values of the individual Ising terms together. In general, different control points around :math:`\\boldsymbol\\theta` have to be estimated, depending on the classical optimizer chosen."
msgstr "및 상기 Z 기반으로 상기 회로의 결과를 샘플링하고 상기 개별적인 이징 용어들의 상기 예상 값들을 함께 합산함으로써, 상기 개별적인 Ising 용어들의 상기 기대 값들을 합산하는 단계 일반적으로, 선택된 고전적 옵티마이저에 따라 :math:`\\boldsymbol\\theta` 의 다른 제어 지점을 추정해야 한다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:83
msgid "Use a classical optimizer to choose a new set of controls."
msgstr "고전적 optimizer를 사용하여 새 제어 세트를 선택한다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:85
msgid "Continue until :math:`C(\\boldsymbol\\theta)` reaches a minimum, close enough to the solution :math:`\\boldsymbol\\theta^*`."
msgstr ":math:`C(\\boldsymbol\\theta)` 가 솔루션 :math:`\\boldsymbol\\theta^*` 에 충분히 가까워질때까지 계속한다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:87
msgid "Use the last :math:`\\boldsymbol\\theta` to generate a final set of samples from the distribution :math:`|\\langle z_i~|\\psi(\\boldsymbol\\theta)\\rangle|^2\\;\\forall i` to obtain the answer."
msgstr "마지막 :math:`\\boldsymbol\\theta` 를 사용하여 분포 :math:`|\\langle z_i~|\\psi(\\boldsymbol\\theta)\\rangle|^2\\;\\forall i` 에서 샘플의 최종 세트를 생성하여 응답을 얻을 수 있다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:89
msgid "It is our belief the difficulty of finding good heuristic algorithms will come down to the choice of an appropriate trial wavefunction. For example, one could consider a trial function whose entanglement best aligns with the target problem, or simply make the amount of entanglement a variable. In this tutorial, we will consider a simple trial function of the form"
msgstr "좋은 경험적 알고리즘을 발견하는 것이 적절한 시험 파장기능의 선택에 이르게 될 것이라는 것은 우리의 생각이다. 예를 들어, 얽힘이 해결하려는 문제와 가장 일치하는 시험 파동함수을 고려할 수 있거나, 또는 간단하게 얽힘의 양을 변수로 삼을수도 있다. 본 자습서에서는 다음과 같은 형식의 간단한 시험 함수"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:91
msgid "|\\psi(\\theta)\\rangle  = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m |+\\rangle\n\n"
msgstr "|\\psi(\\theta)\\rangle  = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m |+\\rangle\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:93
msgid "where :math:`U_\\mathrm{entangler}` is a collection of C-Phase gates (fully entangling gates), and :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^n Y(\\theta_{i})`, where :math:`n` is the number of qubits and :math:`m` is the depth of the quantum circuit. The motivation for this choice is that for these classical problems this choice allows us to search over the space of quantum states that have only real coefficients, still exploiting the entanglement to potentially converge faster to the solution."
msgstr "여기서 :math:`U_\\mathrm{entangler}` 는 C 페이즈 게이트(완전히 얽히는 관문)의 집합이며, :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^n Y(\\theta_{i})`, 그리고 :math:`n` 은 큐비트의 수, :math:`m` 은 양자회로의 깊이라고 생각할 것이다. 이러한 선택의 동기는 이와같은 고전적인 문제들에서 우리가 실수 계수만을 가지고 있는 양자 상태의 공간을 탐색할 수 있다는 것이며, 여전히 그 얽힘을 이용하여 잠재적으로 해답에 더 빨리 수렴할 수 있다는 것이다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:96
msgid "One advantage of using this sampling method compared to adiabatic approaches is that the target Ising Hamiltonian does not have to be implemented directly on hardware, allowing this algorithm not to be limited to the connectivity of the device. Furthermore, higher-order terms in the cost function, such as :math:`Z_iZ_jZ_k`, can also be sampled efficiently, whereas in adiabatic or annealing approaches they are generally impractical to deal with."
msgstr "이 샘플링 방법을 단열과정 접근법과 비교하여 사용하는 한 가지 장점은 대상인 이징 해밀토니안이 하드웨어에서 직접 구현될 필요가 없으므로 이 알고리즘이 장치의 연결에 제한되지 않는다는 것이다. 더욱이 :math:`Z_iZ_jZ_k` 와 같은 비용함수의 고차항 조건도 효율적으로 샘플링할 수 있지만, 단열접근법이나 어닐링접근법에서는 일반적으로 다루기 어렵다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:98
msgid "References:"
msgstr "참고문헌:"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:100
msgid "A. Lucas, Frontiers in Physics 2, 5 (2014)"
msgstr "A. Lucas, Frontiers in Physics 2, 5 (2014)"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:101
msgid "E. Farhi, J. Goldstone, S. Gutmann, e-print arXiv 1411.4028 (2014)"
msgstr "E. Farhi, J. Goldstone, S. Gutmann, e-print arXiv 1411.4028 (2014)"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:102
msgid "D. Wecker, M. B. Hastings, M. Troyer, Phys. Rev. A 94, 022309 (2016)"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:103
msgid "E. Farhi, J. Goldstone, S. Gutmann, H. Neven, e-print arXiv 1703.06199 (2017)"
msgstr "E. Farhi, J. Goldstone, S. Gutmann, H. Neven, e-print arXiv 1703.06199 (2017)"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:115
msgid "Application classes"
msgstr "응용 클래스"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:117
msgid "We use the application classes for the max-cut problem and the traveling salesman problem in this page. There are application classes for other optimization problems available as well. See `Application Classes for Optimization Problems <09_application_classes.ipynb>`__ for details."
msgstr "이 페이지에서 응용 클래스를 사용해 최대 절단 문제와 여행하는 외판원 문제를 다룬다. 다음은 사용 가능한 다른 최적화 문제에 대한 응용 클래스이다. 자세한 내용은 `Application Classes for Optimization Problems <09_application_classes.ipynb>`__ 에서 볼 수 있다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:151
msgid "Max-Cut problem"
msgstr "최대 컷 문제"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:251
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:899
msgid "Brute force approach"
msgstr "Brute force 접근법"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:253
msgid "Try all possible :math:`2^n` combinations. For :math:`n = 4`, as in this example, one deals with only 16 combinations, but for n = 1000, one has 1.071509e+30 combinations, which is impractical to deal with by using a brute force approach."
msgstr "모든 가능한 :math:`2^n` 조합을 시도합니다. 이 예에서와 같이, :math:`n = 4` 인 경우, 16개의 조합만을 다루지만, n = 1000은 1.071509e+30의 조합을 가지며, 무차별 대입법(브루트 포스)을 사용해서는 다루기 어렵다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:373
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1002
msgid "Mapping to the Ising problem"
msgstr "Ising 문제로 매핑"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:384
msgid "Qiskit optimization provides functionality to generate ``QuadraticProgram`` from the problem specification as well as create the corresponding Ising Hamiltonian."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:553
msgid "Since the problem was cast to a minimization problem, the solution of :math:`-4` corresponds to the optimum."
msgstr "문제가 최소화 문제로 변환되었기때문에 :math:`-4` 의 솔루션은 최적에 해당된다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:565
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1224
msgid "Checking that the full Hamiltonian gives the right cost"
msgstr "전체 해밀토니안이 정확한 코스트를 제공하고 있는지 확인한다"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:640
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1302
msgid "Running it on quantum computer"
msgstr "양자 컴퓨터에서 실행하기"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:642
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1304
msgid "We run the optimization routine using a feedback loop with a quantum computer that uses trial functions built with Y single-qubit rotations, :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^n Y(\\theta_{i})`, and entangler steps :math:`U_\\mathrm{entangler}`."
msgstr "우리는 Y 단일 큐비트 회전, :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^n Y(\\theta_{i})` 및 얽힌 단계 :math:`U_\\mathrm{entangler}`.로 구축 된 시험 기능을 사용하는 양자 컴퓨터와 함께 피드백 루프를 사용하여 최적화 루틴을 실행한다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:795
msgid "Traveling Salesman Problem"
msgstr "외판원(traveling salesman) 문제"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:797
msgid "In addition to being a notorious NP-complete problem that has drawn the attention of computer scientists and mathematicians for over two centuries, the Traveling Salesman Problem (TSP) has important bearings on finance and marketing, as its name suggests. Colloquially speaking, the traveling salesman is a person that goes from city to city to sell merchandise. The objective in this case is to find the shortest path that would enable the salesman to visit all the cities and return to its hometown, i.e. the city where he started traveling. By doing this, the salesman gets to maximize potential sales in the least amount of time."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:800
msgid "The problem derives its importance from its \"hardness\" and ubiquitous equivalence to other relevant combinatorial optimization problems that arise in practice."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:802
msgid "The mathematical formulation with some early analysis was proposed by W.R. Hamilton in the early 19th century. Mathematically the problem is, as in the case of Max-Cut, best abstracted in terms of graphs. The TSP on the nodes of a graph asks for the shortest *Hamiltonian cycle* that can be taken through each of the nodes. A Hamilton cycle is a closed path that uses every vertex of a graph once. The general solution is unknown and an algorithm that finds it efficiently (e.g., in polynomial time) is not expected to exist."
msgstr "W.R. Hamilton은 19 세기 초에 초기 분석을 통한 수학적 공식을 제안했다. 수학적으로 이 문제는 최대 컷의 경우와 마찬가지로 그래프 네트워크를 사용해 가장 잘 요약된다. 그래프 네트워크의 외판원 문제는 각 노드를 통해 취할 수있는 가장 짧은 *해밀턴 사이클* 을 계산한다. 해밀턴 사이클은 그래프의 모든 정점을 한 번 사용하는 닫힌 경로이다. 일반적인 해결책은 알려져 있지 않으며 효율적으로 찾는 알고리즘 (예: 다항식 시간)은 존재하지 않는 것으로 예상된다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:805
msgid "Find the shortest Hamiltonian cycle in a graph :math:`G=(V,E)` with :math:`n=|V|` nodes and distances, :math:`w_{ij}` (distance from vertex :math:`i` to vertex :math:`j`). A Hamiltonian cycle is described by :math:`N^2` variables :math:`x_{i,p}`, where :math:`i` represents the node and :math:`p` represents its order in a prospective cycle. The decision variable takes the value 1 if the solution occurs at node :math:`i` at time order :math:`p`. We require that every node can only appear once in the cycle, and for each time a node has to occur. This amounts to the two constraints (here and in the following, whenever not specified, the summands run over 0,1,...N-1)"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:808
msgid "\\sum_{i} x_{i,p} = 1 ~~\\forall p\n\n"
msgstr "\\sum_{i} x_{i,p} = 1 ~~\\forall p\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:810
msgid "\\sum_{p} x_{i,p} = 1 ~~\\forall i.\n\n"
msgstr "\\sum_{p} x_{i,p} = 1 ~~\\forall i.\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:812
msgid "For nodes in our prospective ordering, if :math:`x_{i,p}` and :math:`x_{j,p+1}` are both 1, then there should be an energy penalty if :math:`(i,j) \\notin E` (not connected in the graph). The form of this penalty is"
msgstr "노드의 예상 순서에서, :math:`x_{i,p}` 와 :math:`x_{j,p+1}` 가 모두 1이면, :math:`(i,j) \\notin E` 인(그래프에 연결되지 않음) 경우에는 에너지 패널티가 있어야 한다. 이 패널티의 형태는"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:814
msgid "\\sum_{i,j\\notin E}\\sum_{p} x_{i,p}x_{j,p+1}>0,\n\n"
msgstr "\\sum_{i,j\\notin E}\\sum_{p} x_{i,p}x_{j,p+1}>0,\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:816
msgid "where it is assumed the boundary condition of the Hamiltonian cycles :math:`(p=N)\\equiv (p=0)`. However, here it will be assumed a fully connected graph and not include this term. The distance that needs to be minimized is"
msgstr "이며 해밀토니안 사이클의 경계 조건을 :math:`(p=N)\\equiv (p=0)`로 가정한다: 그러나 여기서는 완전히 연결된 그래프로 간주하여 패널티는 포함하지 않는다. 최소화해야 할 거리는"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:818
msgid "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}.\n\n"
msgstr "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}.\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:820
msgid "Putting this all together in a single objective function to be minimized, we get the following:"
msgstr "이 모든 것을 최소화하기 위해 하나의 목적 함수에 모으면 다음과 같은 결과를 얻을 수 있다:"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:822
msgid "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}+ A\\sum_p\\left(1- \\sum_i x_{i,p}\\right)^2+A\\sum_i\\left(1- \\sum_p x_{i,p}\\right)^2,\n\n"
msgstr "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}+ A\\sum_p\\left(1- \\sum_i x_{i,p}\\right)^2+A\\sum_i\\left(1- \\sum_p x_{i,p}\\right)^2,\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:824
msgid "where :math:`A` is a free parameter. One needs to ensure that :math:`A` is large enough so that these constraints are respected. One way to do this is to choose :math:`A` such that :math:`A > \\mathrm{max}(w_{ij})`."
msgstr "여기서 :math:`A` 는 자유 변수이다. 이러한 구속 조건이 만족 될 수 있도록 :math:`A` 가 충분히 커야한다.조건을 만족하는 한 가지 방법은 :math:`A > \\mathrm{max}(w_{ij})` 와 같은 :math:`A` 를 선택하는 것이다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:826
msgid "Once again, it is easy to map the problem in this form to a quantum computer, and the solution will be found by minimizing a Ising Hamiltonian."
msgstr "다시 한 번 이 형태의 문제를 양자 컴퓨터에 매핑하는 것은 쉬우며, 해밀톤안을 최소화하여 솔루션을 찾을 수 있다."

