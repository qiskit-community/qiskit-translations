msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-16 13:48+0000\n"
"PO-Revision-Date: 2022-01-25 00:59\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/06_examples_max_cut_and_tsp.po\n"
"X-Crowdin-File-ID: 9652\n"
"Language: ko_KR\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:9
msgid "This page was generated from `docs/tutorials/06_examples_max_cut_and_tsp.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/06_examples_max_cut_and_tsp.ipynb`__에서 생성되었다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:9
msgid "Max-Cut and Traveling Salesman Problem"
msgstr "최대 컷 및 외판원 문제"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:21
msgid "Introduction"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:23
msgid "Many problems in quantitative fields such as finance and engineering are optimization problems. Optimization problems lie at the core of complex decision-making and definition of strategies."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:25
msgid "Optimization (or combinatorial optimization) means searching for an optimal solution in a finite or countably infinite set of potential solutions. Optimality is defined with respect to some criterion function, which is to be minimized or maximized. This is typically called cost function or objective function."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:27
msgid "**Typical optimization problems**"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:29
msgid "Minimization: cost, distance, length of a traversal, weight, processing time, material, energy consumption, number of objects"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:31
msgid "Maximization: profit, value, output, return, yield, utility, efficiency, capacity, number of objects"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:33
msgid "We consider here max-cut problems of practical interest in many fields, and show how they can be mapped on quantum computers manually and how Qiskit’s optimization module supports this."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:36
msgid "Weighted Max-Cut"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:38
msgid "Max-Cut is an NP-complete problem, with applications in clustering, network science, and statistical physics. To grasp how practical applications are mapped into given Max-Cut instances, consider a system of many people that can interact and influence each other. Individuals can be represented by vertices of a graph, and their interactions seen as pairwise connections between vertices of the graph, or edges. With this representation in mind, it is easy to model typical marketing problems. For example, suppose that it is assumed that individuals will influence each other’s buying decisions, and knowledge is given about how strong they will influence each other. The influence can be modeled by weights assigned on each edge of the graph. It is possible then to predict the outcome of a marketing strategy in which products are offered for free to some individuals, and then ask which is the optimal subset of individuals that should get the free products, in order to maximize revenues."
msgstr "최대 컷 (Max-Cut) 은 NP-완전 문제이며, 클러스터링, 네트워크 과학, 그리고 통계적 물리학에 응용된다. 실제 애플리케이션이 지정된 최대 컷 인스턴스로 맵핑되는 방법을 파악하려면 서로 상호작용 및 영향을 줄 수 있는 많은 사용자의 시스템을 고려해야한다. 개인들은 그래프의 꼭짓점으로 표현될 수 있고, 그들의 상호작용들은 그래프의 꼭지점 또는 모서리들 간의 쌍으로 연결된다. 이러한 표현을 사용하면 일반적인 마케팅 문제를 쉽게 모델링할 수 있다. 예를 들어, 개인이 서로의 구매 결정에 영향을 미칠 것이라고 가정하고, 서로 영향을 미칠 수 있는 지식에 대해 알고 있다고 가정한다. 그래프의 각 모서리에 지정된 가중치에 따라 영향을 모델링할 수 있다. 그런 다음 일부 개인에게 제품을 무료로 제공하는 마케팅 전략의 결과를 예측하고, 수익을 극대화하기 위해 어떤 개인들이 무료 제품을 받아야 하는 최적의 부분 집합인지 물어볼 수 있다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:41
msgid "The formal definition of this problem is the following:"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:43
msgid "Consider an :math:`n`-node undirected graph *G = (V, E)* where *\\|V\\| = n* with edge weights :math:`w_{ij}>0`, :math:`w_{ij}=w_{ji}`, for :math:`(i, j)\\in E`. A cut is defined as a partition of the original set V into two subsets. The cost function to be optimized is in this case the sum of weights of edges connecting points in the two different subsets, *crossing* the cut. By assigning :math:`x_i=0` or :math:`x_i=1` to each node :math:`i`, one tries to maximize the global profit function (here and in the following summations run over indices 0,1,…n-1)"
msgstr ":math:`n`-노드의 무방향 그래프가 *G = (V, E)* 이때 *\\|V\\| = n* 모서리의 가중치 :math:`w_{ij}>0`, :math:`w_{ij}=w_{ji}`, for :math:`(i, j)\\in E`. 컷은 원래 세트 V를 두 하위 집합으로 분할하는 것으로 정의된다. 이 경우 최적화할 비용 함수는 서로 다른 두 하위 집합의 가장자리 연결 지점의 가중치 합계이며 *crossing* 컷이다. :math:`x_i=0` 혹은 :math:`x_i=1` 을 모든 노드 :math:`i` 에 대해 가정하면, 사용자는 글로벌 이익 함수를 최대화하려고 한다 (여기서 및 다음 덧샘연산에서 지수 0,1,...n-1에 대해 진행된다)"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:46
msgid "\\tilde{C}(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j).\n\n"
msgstr "\\tilde{C}(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j).\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:48
msgid "In our simple marketing model, :math:`w_{ij}` represents the probability that the person :math:`j` will buy a product after :math:`i` gets a free one. Note that the weights :math:`w_{ij}` can in principle be greater than :math:`1` (or even negative), corresponding to the case where the individual :math:`j` will buy more than one product. Maximizing the total buying probability corresponds to maximizing the total future revenues. In the case where the profit probability will be greater than the cost of the initial free samples, the strategy is a convenient one. An extension to this model has the nodes themselves carry weights, which can be regarded, in our marketing model, as the likelihood that a person granted with a free sample of the product will buy it again in the future. With this additional information in our model, the objective function to maximize becomes"
msgstr "우리는 간단한 마케팅 모델이서 :math:`w_{ij}` 는 :math:`i` 가 무료 제품을 받은 후에 :math:`j` 가 제품을 구입할 확률을 나타낸다. 가중치 :math:`w_{ij}` 는 원칙적으로 개별 :math:`j` 가 하나 이상의 제품을 구매하는 경우에 대응하는 :math:`1` (또는 심지어 음의 수) 보다 클 수 있다. 총 구매 확률을 극대화하는 것은 총 미래 수익을 극대화하는 것과 일치한다. 초기 무료 샘플의 비용보다 이익 확률이 더 클 경우, 전략은 다음과 같은 경우에 편리하게 이용할 수 있다. 이 모델을 확장하여 마케팅 모델에서는 제품의 무료 샘플을 부여받은 사람이 향후 다시 제품을 구입할 가능성을 노드 자체에 가중치로 부여할 수 있다. 이 모델에 추가 정보가 추가되어 있으므로, 최대화할 수 있는 대상은 다음과 같다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:51
msgid "C(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j)+\\sum_i w_i x_i.\n\n"
msgstr "C(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j)+\\sum_i w_i x_i.\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:53
msgid "In order to find a solution to this problem on a quantum computer, one needs first to map it to an Ising Hamiltonian. This can be done with the assignment :math:`x_i\\rightarrow (1-Z_i)/2`, where :math:`Z_i` is the Pauli Z operator that has eigenvalues :math:`\\pm 1`. Doing this we find that"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:55
msgid "C(\\textbf{Z}) = \\sum_{i,j} \\frac{w_{ij}}{4} (1-Z_i)(1+Z_j) + \\sum_i \\frac{w_i}{2} (1-Z_i) = -\\frac{1}{2}\\left( \\sum_{i<j} w_{ij} Z_i Z_j +\\sum_i w_i Z_i\\right)+\\mathrm{const},\n\n"
msgstr "C(\\textbf{Z}) = \\sum_{i,j} \\frac{w_{ij}}{4} (1-Z_i)(1+Z_j) + \\sum_i \\frac{w_i}{2} (1-Z_i) = -\\frac{1}{2}\\left( \\sum_{i<j} w_{ij} Z_i Z_j +\\sum_i w_i Z_i\\right)+\\mathrm{const},\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:57
msgid "where :math:`\\mathrm{const} = \\sum_{i<j}w_{ij}/2+\\sum_i w_i/2`. In other terms, the weighted Max-Cut problem is equivalent to minimizing the Ising Hamiltonian"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:59
msgid "H = \\sum_i w_i Z_i + \\sum_{i<j} w_{ij} Z_iZ_j.\n\n"
msgstr "H = \\sum_i w_i Z_i + \\sum_{i<j} w_{ij} Z_iZ_j.\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:61
msgid "Qiskit’s optimization module can generate the Ising Hamiltonian for the first profit function :math:`\\tilde{C}`. To this extent, function :math:`\\tilde{C}` can be modeled as a ``QuadraticProgram``, which provides the ``to_ising()`` method."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:64
msgid "Approximate Universal Quantum Computing for Optimization Problems"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:66
msgid "There has been a considerable amount of interest in recent times about the use of quantum computers to find a solution to combinatorial optimization problems. It is important to say that, given the classical nature of combinatorial problems, exponential speedup in using quantum computers compared to the best classical algorithms is not guaranteed. However, due to the nature and importance of the target problems, it is worth investigating heuristic approaches on a quantum computer that could indeed speed up some problem instances. Here we demonstrate an approach that is based on the *Quantum Approximate Optimization Algorithm* (QAOA) by Farhi, Goldstone, and Gutmann (2014). We frame the algorithm in the context of *approximate quantum computing*, given its heuristic nature."
msgstr "근래에는 조합 최적화 문제에 대한 해결책을 찾기 위해 양자 컴퓨터를 사용하는 것에 대해 상당한 관심이 있었다. 조합문제의 고전적 성격을 감안할 때, 최고의 고전 알고리즘에 비해 양자 컴퓨터를 사용하는 데 있어서 기하급수적인 속도 향상은 보장되지 않는다고 말할 필요가 있다. 그러나, 목표 문제의 본질과 중요성 때문에, 실제로 일부 문제 발생을 가속화할 수 있는 양자 컴퓨터에서의 경험적 접근법을 조사할 필요가 있다. 여기서는 Farhi, Goldstone 및 Gutman(2014년) 의 *Quantum Approximate Optimization Algorithm* (QAOA) 에 기반한 접근방식을 설명한다. 알고리즘의 경험적 특성을 감안할 때 *근사 양자 컴퓨팅* 의 맥락에서 알고리즘을 구성한다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:69
msgid "The algorithm works as follows:"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:71
msgid "Choose the :math:`w_i` and :math:`w_{ij}` in the target Ising problem. In principle, even higher powers of Z are allowed."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:73
msgid "Choose the depth of the quantum circuit :math:`m`. Note that the depth can be modified adaptively."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:75
msgid "Choose a set of controls :math:`\\theta` and make a trial function :math:`|\\psi(\\boldsymbol\\theta)\\rangle`, built using a quantum circuit made of C-Phase gates and single-qubit Y rotations, parameterized by the components of :math:`\\boldsymbol\\theta`."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:77
msgid "Evaluate"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:79
msgid "C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)~|H|~\\psi(\\boldsymbol\\theta)\\rangle = \\sum_i w_i \\langle\\psi(\\boldsymbol\\theta)~|Z_i|~\\psi(\\boldsymbol\\theta)\\rangle+ \\sum_{i<j} w_{ij} \\langle\\psi(\\boldsymbol\\theta)~|Z_iZ_j|~\\psi(\\boldsymbol\\theta)\\rangle\n\n"
msgstr "C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)~|H|~\\psi(\\boldsymbol\\theta)\\rangle = \\sum_i w_i \\langle\\psi(\\boldsymbol\\theta)~|Z_i|~\\psi(\\boldsymbol\\theta)\\rangle+ \\sum_{i<j} w_{ij} \\langle\\psi(\\boldsymbol\\theta)~|Z_iZ_j|~\\psi(\\boldsymbol\\theta)\\rangle\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:81
msgid "by sampling the outcome of the circuit in the Z-basis and adding the expectation values of the individual Ising terms together. In general, different control points around :math:`\\boldsymbol\\theta` have to be estimated, depending on the classical optimizer chosen."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:83
msgid "Use a classical optimizer to choose a new set of controls."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:85
msgid "Continue until :math:`C(\\boldsymbol\\theta)` reaches a minimum, close enough to the solution :math:`\\boldsymbol\\theta^*`."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:87
msgid "Use the last :math:`\\boldsymbol\\theta` to generate a final set of samples from the distribution :math:`|\\langle z_i~|\\psi(\\boldsymbol\\theta)\\rangle|^2\\;\\forall i` to obtain the answer."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:89
msgid "It is our belief the difficulty of finding good heuristic algorithms will come down to the choice of an appropriate trial wavefunction. For example, one could consider a trial function whose entanglement best aligns with the target problem, or simply make the amount of entanglement a variable. In this tutorial, we will consider a simple trial function of the form"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:91
msgid "|\\psi(\\theta)\\rangle  = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m |+\\rangle\n\n"
msgstr "|\\psi(\\theta)\\rangle  = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m |+\\rangle\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:93
msgid "where :math:`U_\\mathrm{entangler}` is a collection of C-Phase gates (fully entangling gates), and :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^n Y(\\theta_{i})`, where :math:`n` is the number of qubits and :math:`m` is the depth of the quantum circuit. The motivation for this choice is that for these classical problems this choice allows us to search over the space of quantum states that have only real coefficients, still exploiting the entanglement to potentially converge faster to the solution."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:96
msgid "One advantage of using this sampling method compared to adiabatic approaches is that the target Ising Hamiltonian does not have to be implemented directly on hardware, allowing this algorithm not to be limited to the connectivity of the device. Furthermore, higher-order terms in the cost function, such as :math:`Z_iZ_jZ_k`, can also be sampled efficiently, whereas in adiabatic or annealing approaches they are generally impractical to deal with."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:98
msgid "References:"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:100
msgid "A. Lucas, Frontiers in Physics 2, 5 (2014)"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:101
msgid "E. Farhi, J. Goldstone, S. Gutmann, e-print arXiv 1411.4028 (2014)"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:102
msgid "D. Wecker, M. B. Hastings, M. Troyer, Phys. Rev. A 94, 022309 (2016)"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:103
msgid "E. Farhi, J. Goldstone, S. Gutmann, H. Neven, e-print arXiv 1703.06199 (2017)"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:115
msgid "Application classes"
msgstr "응용 클래스"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:117
msgid "We use the application classes for the max-cut problem and the traveling salesman problem in this page. There are application classes for other optimization problems available as well. See `Application Classes for Optimization Problems <09_application_classes.ipynb>`__ for details."
msgstr "이 페이지에서 응용 클래스를 사용해 최대 절단 문제와 여행하는 외판원 문제를 다룬다. 다음은 사용 가능한 다른 최적화 문제에 대한 응용 클래스이다. 자세한 내용은 `Application Classes for Optimization Problems <09_application_classes.ipynb>`__ 에서 볼 수 있다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:153
msgid "Max-Cut problem"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:254
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:884
msgid "Brute force approach"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:256
msgid "Try all possible :math:`2^n` combinations. For :math:`n = 4`, as in this example, one deals with only 16 combinations, but for n = 1000, one has 1.071509e+30 combinations, which is impractical to deal with by using a brute force approach."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:363
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:990
msgid "Mapping to the Ising problem"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:374
msgid "Qiskit provides functionality to generate ``QuadraticProgram`` from the problem specification as well as create the corresponding Ising Hamiltonian."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:532
msgid "Since the problem was cast to a minimization problem, the solution of :math:`-4` corresponds to the optimum."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:544
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1258
msgid "Checking that the full Hamiltonian gives the right cost"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:620
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1336
msgid "Running it on quantum computer"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:622
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1338
msgid "We run the optimization routine using a feedback loop with a quantum computer that uses trial functions built with Y single-qubit rotations, :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^n Y(\\theta_{i})`, and entangler steps :math:`U_\\mathrm{entangler}`."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:779
msgid "Traveling Salesman Problem"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:781
msgid "In addition to being a notorious NP-complete problem that has drawn the attention of computer scientists and mathematicians for over two centuries, the Traveling Salesman Problem (TSP) has important bearings on finance and marketing, as its name suggests. Colloquially speaking, the traveling salesman is a person that goes from city to city to sell merchandise. The objective in this case is to find the shortest path that would enable the salesman to visit all the cities and return to its hometown, i.e. the city where he started traveling. By doing this, the salesman gets to maximize potential sales in the least amount of time."
msgstr "외판원 문제(TSP)는 2 세기 이상 컴퓨터 과학자와 수학자의 관심을 끈 악명 높은 NP- 완전한 문제 일뿐만 아니라 재무 및 마케팅과도 관련이 있다. 한마디로 말하면, 외판원은 도시를 방문하여 상품을 판매한다. 이 문제의 목표는 외판원이 모든 도시를 방문하고 고향 즉 여행을 시작한 도시로 돌아갈 수있는 가장 짧은 경로를 찾는 것이다. 이를 통해 외판원은 최소한의 시간 안에 잠재적인 매출을 극대화 할 수 있다. "

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:784
msgid "The problem derives its importance from its “hardness” and ubiquitous equivalence to other relevant combinatorial optimization problems that arise in practice."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:786
msgid "The mathematical formulation with some early analysis was proposed by W.R. Hamilton in the early 19th century. Mathematically the problem is, as in the case of Max-Cut, best abstracted in terms of graphs. The TSP on the nodes of a graph asks for the shortest *Hamiltonian cycle* that can be taken through each of the nodes. A Hamilton cycle is a closed path that uses every vertex of a graph once. The general solution is unknown and an algorithm that finds it efficiently (e.g., in polynomial time) is not expected to exist."
msgstr "W.R. Hamilton은 19 세기 초에 초기 분석을 통한 수학적 공식을 제안했다. 수학적으로 이 문제는 최대 컷의 경우와 마찬가지로 그래프 네트워크를 사용해 가장 잘 요약된다. 그래프 네트워크의 외판원 문제는 각 노드를 통해 취할 수있는 가장 짧은 *해밀턴 사이클* 을 계산한다. 해밀턴 사이클은 그래프의 모든 정점을 한 번 사용하는 닫힌 경로이다. 일반적인 해결책은 알려져 있지 않으며 효율적으로 찾는 알고리즘 (예: 다항식 시간)은 존재하지 않는 것으로 예상된다."

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:789
msgid "Find the shortest Hamiltonian cycle in a graph :math:`G=(V,E)` with :math:`n=|V|` nodes and distances, :math:`w_{ij}` (distance from vertex :math:`i` to vertex :math:`j`). A Hamiltonian cycle is described by :math:`N^2` variables :math:`x_{i,p}`, where :math:`i` represents the node and :math:`p` represents its order in a prospective cycle. The decision variable takes the value 1 if the solution occurs at node :math:`i` at time order :math:`p`. We require that every node can only appear once in the cycle, and for each time a node has to occur. This amounts to the two constraints (here and in the following, whenever not specified, the summands run over 0,1,…N-1)"
msgstr "그래프 :math:`G=(V,E)` 에서 :math:`n=|V|` 노드와 거리, :math:`w_{ij}` (꼭지점 :math:`i` 에서 꼭지점 :math:`j` 까지의 거리) 에서 가장 짧은 해밀토니안 사이클을 찾는다. 해밀토니안 사이클은 :math:`N^2` 개의 변수 :math:`x_{i,p}` 에 의해 기술되고, 여기서 :math:`i` 는 노드를 나타내고, :math:`p` 는 잠재적 사이클에서 그 순서를 나타낸다. 결정 변수는 솔루션이 노드 :math:`i` 에서 시간 순서 :math:`p` 순서로 발생하는 경우 값 1을 사용한다. 모든 노드는 주기에서 한 번만 표시되어야 하고 매번 노드가 나타나야 한다. 이러한 양은 두 개의 제한조건 (여기에서 그리고 앞으로도, 특별히 언급하지 않아도, 합계는 0,1, ...N-1까지 진행된다)"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:792
msgid "\\sum_{i} x_{i,p} = 1 ~~\\forall p\n\n"
msgstr "\\sum_{i} x_{i,p} = 1 ~~\\forall p\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:794
msgid "\\sum_{p} x_{i,p} = 1 ~~\\forall i.\n\n"
msgstr "\\sum_{p} x_{i,p} = 1 ~~\\forall i.\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:796
msgid "For nodes in our prospective ordering, if :math:`x_{i,p}` and :math:`x_{j,p+1}` are both 1, then there should be an energy penalty if :math:`(i,j) \\notin E` (not connected in the graph). The form of this penalty is"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:798
msgid "\\sum_{i,j\\notin E}\\sum_{p} x_{i,p}x_{j,p+1}>0,\n\n"
msgstr "\\sum_{i,j\\notin E}\\sum_{p} x_{i,p}x_{j,p+1}>0,\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:800
msgid "where it is assumed the boundary condition of the Hamiltonian cycles :math:`(p=N)\\equiv (p=0)`. However, here it will be assumed a fully connected graph and not include this term. The distance that needs to be minimized is"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:802
msgid "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}.\n\n"
msgstr "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}.\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:804
msgid "Putting this all together in a single objective function to be minimized, we get the following:"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:806
msgid "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}+ A\\sum_p\\left(1- \\sum_i x_{i,p}\\right)^2+A\\sum_i\\left(1- \\sum_p x_{i,p}\\right)^2,\n\n"
msgstr "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}+ A\\sum_p\\left(1- \\sum_i x_{i,p}\\right)^2+A\\sum_i\\left(1- \\sum_p x_{i,p}\\right)^2,\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:808
msgid "where :math:`A` is a free parameter. One needs to ensure that :math:`A` is large enough so that these constraints are respected. One way to do this is to choose :math:`A` such that :math:`A > \\mathrm{max}(w_{ij})`."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:810
msgid "Once again, it is easy to map the problem in this form to a quantum computer, and the solution will be found by minimizing a Ising Hamiltonian."
msgstr ""

