msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-14 08:10+0000\n"
"PO-Revision-Date: 2023-11-14 08:26\n"
"Last-Translator: \n"
"Language: ko\n"
"Language-Team: Korean\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /main/optimization/docs/locale/en/LC_MESSAGES/tutorials/03_minimum_eigen_optimizer.po\n"
"X-Crowdin-File-ID: 9646\n"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:9
msgid "This page was generated from `docs/tutorials/03_minimum_eigen_optimizer.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/03_minimum_eigen_optimizer.ipynb`_ 에서 생성되었다."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:9
msgid "Minimum Eigen Optimizer"
msgstr "Minimum Eigen Optimizer"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:21
msgid "Introduction"
msgstr "소개"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:32
msgid "An interesting class of optimization problems to be addressed by quantum computing are Quadratic Unconstrained Binary Optimization (QUBO) problems. Finding the solution to a QUBO is equivalent to finding the ground state of a corresponding Ising Hamiltonian, which is an important problem not only in optimization, but also in quantum chemistry and physics. For this translation, the binary variables taking values in :math:`\\{0, 1\\}` are replaced by spin variables taking values in :math:`\\{-1, +1\\}`, which allows one to replace the resulting spin variables by Pauli Z matrices, and thus, an Ising Hamiltonian. For more details on this mapping we refer to [1]."
msgstr "양자 컴퓨팅으로 해결 할 수 있는 흥미로운 최적화 문제는 Quadratic Unconstrained Binary Optimization (QUBO) 문제이다. QUBO의 해답을 찾는 것은 최적화에서 뿐만 아니라 양자 화학과 물리학에서도 중요한 문제인 이징 해밀토니안의 기저 상태를 찾는 것과 같다. 이 변환의 경우, :math:`\\{0, 1\\}` 의 값을 갖는 이진형 변수들이 :math:`\\{-1, +1\\}` 값을 갖는 스핀 변수들로 대체되는데, 이는 스핀 변수들을 Pauli Z 행렬로, 따라서 이징 해밀토니안으로 대체하는 것을 가능하게 한다. 매핑에 대한 자세한 사항은 [1]을 참조한다."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:35
msgid "Qiskit optimization provides automatic conversion from a suitable ``QuadraticProgram`` to an Ising Hamiltonian, which then allows leveraging all the ``SamplingMinimumEigensolver`` implementations, such as"
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:37
msgid "``SamplingVQE``,"
msgstr "``SamplingVQE``,"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:38
msgid "``QAOA``, or"
msgstr "``QAOA``, 또는"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:39
msgid "``NumpyMinimumEigensolver`` (classical exact method)."
msgstr "``NumpyMinimumEigensolver`` (고전적인 정확한 방법)"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:41
msgid "Note 1: ``MinimumEigenOptimizer`` does not support ``qiskit_algorithms.VQE``. But ``qiskit_algorithms.SamplingVQE`` can be used instead."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:43
msgid "Note 2: ``MinimumEigenOptimizer`` can use ``NumpyMinimumEigensolver`` as an exception case though it inherits ``MinimumEigensolver`` (not ``SamplingMinimumEigensolver``)."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:45
msgid "Qiskit optimization provides a the ``MinimumEigenOptimizer`` class, which wraps the translation to an Ising Hamiltonian (in Qiskit Terra also called ``SparsePauliOp``), the call to a ``MinimumEigensolver``, and the translation of the results back to an ``OptimizationResult``."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:47
msgid "In the following we first illustrate the conversion from a ``QuadraticProgram`` to a ``SparsePauliOp`` and then show how to use the ``MinimumEigenOptimizer`` with different ``MinimumEigensolver``\\ s to solve a given ``QuadraticProgram``. The algorithms in Qiskit optimization automatically try to convert a given problem to the supported problem class if possible, for instance, the ``MinimumEigenOptimizer`` will automatically translate integer variables to binary variables or add linear equality constraints as a quadratic penalty term to the objective. It should be mentioned that a ``QiskitOptimizationError`` will be thrown if conversion of a quadratic program with integer variables is attempted."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:50
msgid "The circuit depth of ``QAOA`` potentially has to be increased with the problem size, which might be prohibitive for near-term quantum devices. A possible workaround is Recursive QAOA, as introduced in [2]. Qiskit optimization generalizes this concept to the ``RecursiveMinimumEigenOptimizer``, which is introduced at the end of this tutorial."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:53
msgid "References"
msgstr "참조"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:55
msgid "[1] `A. Lucas, Ising formulations of many NP problems, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>`__"
msgstr "[1] `A. Lucas, Ising formulations of many NP problems, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>`__"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:57
msgid "[2] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"
msgstr "[2] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:69
msgid "Converting a QUBO to a SparsePauliOp"
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:173
msgid "Next we translate this QUBO into an Ising operator. This results not only in a ``SparsePauliOp`` but also in a constant offset to be taken into account to shift the resulting value."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:230
msgid "Sometimes a ``QuadraticProgram`` might also directly be given in the form of a ``SparsePauliOp``. For such cases, Qiskit optimization also provides a translator from a ``SparsePauliOp`` back to a ``QuadraticProgram``, which we illustrate in the following."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:307
msgid "This translator allows, for instance, one to translate a ``SparsePauliOp`` to a ``QuadraticProgram`` and then solve the problem with other algorithms that are not based on the Ising Hamiltonian representation, such as the ``GroverOptimizer``."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:319
msgid "Solving a QUBO with the MinimumEigenOptimizer"
msgstr "MinimumEigenOptimizer를 사용하여 QUBO를 해결하기"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:330
msgid "We start by initializing the ``MinimumEigensolver`` we want to use."
msgstr "``MinimumEigensolver`` 를 초기화하는 것에서부터 시작한다."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:353
msgid "Then, we use the ``MinimumEigensolver`` to create ``MinimumEigenOptimizer``."
msgstr "이후 ``MinimumEigenOptimizer`` 를 생성하기 위하여 ``MinimumEigensolver`` 를 사용한다."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:375
msgid "We first use the ``MinimumEigenOptimizer`` based on the classical exact ``NumPyMinimumEigensolver`` to get the optimal benchmark solution for this small example."
msgstr "우리는 이 작은 사례를 위한 최적의 벤치마크 솔루션을 얻기 위해 클래식의 정확한 ``NumPyMinimumEigensolver`` 를 기반으로 하는 ``MinimumEigenOptimizer`` 을 처음 사용한다."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:427
msgid "Next we apply the ``MinimumEigenOptimizer`` based on ``QAOA`` to the same problem."
msgstr "다음으로 동일한 문제에 대하여 ``QAOA`` 를 기반으로한 ``MinimumEigenOptimizer`` 를 적용한다."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:480
msgid "Analysis of Samples"
msgstr "샘플 분석하기"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:482
msgid "``OptimizationResult`` provides useful information in the form of ``SolutionSample``\\ s (here denoted as *samples*). Each ``SolutionSample`` contains information about the input values (``x``), the corresponding objective function value (``fval``), the fraction of samples corresponding to that input (``probability``), and the solution ``status`` (``SUCCESS``, ``FAILURE``, ``INFEASIBLE``). Multiple samples corresponding to the same input are consolidated into a single ``SolutionSample`` (with its ``probability`` attribute being the aggregate fraction of samples represented by that ``SolutionSample``)."
msgstr "``OptimizationResult`` 는 ``SolutionSample`` 의 형태로 유용한 정보를 제공한다. 각각의 ``SolutionSample`` 에는 입력값 (``x``), 해당하는 목적 함수 값 (``fval``), 해당 입력에 해당하는 샘플의 분율 (``probability``), 그리고 해답의 ``status`` (``SUCCESS``, ``FAILURE``, ``INFEASIBLE``) 에 대한 정보가 포함되어 있다. 동일한 입력에 상응하는 다수의 샘플은 하나의 ``SolutionSample`` 로 통합된다. (``probability`` 속성은 ``SolutionSample`` 이 나타내는 샘플의 총 분율이다.)"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:554
msgid "We may also want to filter samples according to their status or probabilities."
msgstr "또한, 그들의 상태 또는 확률에 따라 샘플들을 필터링할 수 있다."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:641
msgid "If we want to obtain a better perspective of the results, statistics is very helpful, both with respect to the objective function values and their respective probabilities. Thus, mean and standard deviation are the very basics for understanding the results."
msgstr "결과의 더 나은 관점을 얻고자 한다면, 통계는 객관적인 함수 값과 그들의 각각의 확률에 대해서 매우 도움이 된다. 따라서, 평균 및 표준 편차는 결과를 이해하기 위한 매우 기초적인 것이다."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:733
msgid "Finally, despite all the number-crunching, visualization is usually the best early-analysis approach."
msgstr "마지막으로, 모든 수치 계산에도 불구하고, 시각화는 일반적으로 가장 좋은 초기 분석 방법이다."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:821
msgid "RecursiveMinimumEigenOptimizer"
msgstr "``RecursiveMinimumEigenOptimizer``"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:832
msgid "The ``RecursiveMinimumEigenOptimizer`` takes a ``MinimumEigenOptimizer`` as input and applies the recursive optimization scheme to reduce the size of the problem one variable at a time. Once the size of the generated intermediate problem is below a given threshold (``min_num_vars``), the ``RecursiveMinimumEigenOptimizer`` uses another solver (``min_num_vars_optimizer``), e.g., an exact classical solver such as CPLEX or the ``MinimumEigenOptimizer`` based on the ``NumPyMinimumEigensolver``."
msgstr "``RecursiveMinimumEigenOptimizer`` 는 ``MinimumEigenOptimizer`` 를 입력으로 받아들이고 한 번에 한 변수의 문제 크기를 줄이기 위해 재귀적 최적화 체계를 적용한다. 생성된 중간 문제의 크기가 주어진 임계값 미만이면 (``min_num_vars``), ``RecursiveMinimumEigenOptimizer`` 는 다른 해결자 (``min_num_vars_optimizer``) 를 사용하는데, 예를 들면 CPLEX와 같은 정확한 고전적 솔버 혹은 ``NumPyMinimumEigensolver`` 에 기반한 ``MinimumEigenOptimizer`` 를 사용한다."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:834
msgid "In the following, we show how to use the ``RecursiveMinimumEigenOptimizer`` using the two ``MinimumEigenOptimizer``\\ s introduced before."
msgstr "다음에서는, 앞에서 소개된 두 개의 ``MinimumEigenOptimizer`` 을 이용하여 ``RecursiveMinimumEigenOptimizer`` 를 이용하는 방법을 설명한다."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:845
msgid "First, we construct the ``RecursiveMinimumEigenOptimizer`` such that it reduces the problem size from 3 variables to 1 variable and then uses the exact solver for the last variable. Then we call ``solve`` to optimize the considered problem."
msgstr "우선 우리는 3개 변수에서 1변수까지의 문제 크기를 줄이고 마지막 변수에 정확한 해결자를 사용하는 ``RecursiveMinimumEigenOptimizer`` 를 구성한다. 그런 다음 우리는 문제를 해결하기 위해 ``solve`` 이라고 부릅니다."

