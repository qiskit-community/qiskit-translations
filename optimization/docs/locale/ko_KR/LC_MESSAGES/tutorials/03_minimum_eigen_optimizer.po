msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-16 13:48+0000\n"
"PO-Revision-Date: 2021-12-16 15:07\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/03_minimum_eigen_optimizer.po\n"
"X-Crowdin-File-ID: 9646\n"
"Language: ko_KR\n"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:9
msgid "This page was generated from `docs/tutorials/03_minimum_eigen_optimizer.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/03_minimum_eigen_optimizer.ipynb`_ 에서 생성되었다."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:9
msgid "Minimum Eigen Optimizer"
msgstr "Minimum Eigen Optimizer"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:21
msgid "Introduction"
msgstr "소개"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:32
msgid "An interesting class of optimization problems to be addressed by quantum computing are Quadratic Unconstrained Binary Optimization (QUBO) problems. Finding the solution to a QUBO is equivalent to finding the ground state of a corresponding Ising Hamiltonian, which is an important problem not only in optimization, but also in quantum chemistry and physics. For this translation, the binary variables taking values in :math:`\\{0, 1\\}` are replaced by spin variables taking values in :math:`\\{-1, +1\\}`, which allows to replace the resulting spin variables by Pauli Z matrices, and thus, an Ising Hamiltonian. For more details on this mapping we refer to [1]."
msgstr "양자 컴퓨팅에서 다루어지는 흥미로운 최적화 문제들 중 이차 비한정 이진 최적화 (Quadratic Unconstrained Binary Optimization; QUBO)라는 문제가 있다. QUBO에 대한 솔루션을 찾는 것은 이에 대응하는 이싱 해밀토니안(Ising Hamiltonian)의 기저 상태(ground state)를 찾는 것과 동일한 문제로 취급될 수 있는데, 이는 최적화에서 뿐만 아니라 양자 화학과 물리학에서도 중요하게 여겨진다. 이러한 변환에 대하여, :math:`\\{0, 1\\}` 값을 취하는 이진 변수들은 :math:`\\{-1, +1\\}` 값을 취하는 스핀 변수(spin variable)들에 의하여 대체되며, 이는 결과적으로 스핀 변수들을 Pauli Z 행렬들에 의해 대체될 수 있게 하며, 따라서 Ising Hamiltonian로 대체된다. 매핑에 대한 자세한 사항은 [1]을 참조하라."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:35
msgid "Qiskit provides automatic conversion from a suitable ``QuadraticProgram`` to an Ising Hamiltonian, which then allows to leverage all the ``MinimumEigenSolver`` such as"
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:37
msgid "``VQE``,"
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:38
msgid "``QAOA``, or"
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:39
msgid "``NumpyMinimumEigensolver`` (classical exact method)."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:41
msgid "Qiskit wraps the translation to an Ising Hamiltonian (in Qiskit Aqua also called ``Operator``), the call to an ``MinimumEigensolver`` as well as the translation of the results back to ``OptimizationResult`` in the ``MinimumEigenOptimizer``."
msgstr "Qiskit은 Ising Hamiltonian (Qiskit Aqua에서는 ``Operator`` 라고도 함) 으로 변환을 래핑(wrapping) 하고 ``MinimumEigensolver`` 에 대한 호출은 물론 ``MinimumEigenOptimizer`` 에서 결과를 다시 ``OptimizationResult`` 로 변환한다."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:43
msgid "In the following we first illustrate the conversion from a ``QuadraticProgram`` to an ``Operator`` and then show how to use the ``MinimumEigenOptimizer`` with different ``MinimumEigensolver`` to solve a given ``QuadraticProgram``. The algorithms in Qiskit automatically try to convert a given problem to the supported problem class if possible, for instance, the ``MinimumEigenOptimizer`` will automatically translate integer variables to binary variables or add a linear equality constraints as a quadratic penalty term to the objective. It should be mentioned that Aqua will through a ``QiskitOptimizationError`` if conversion of a quadratic program with integer variable is attempted."
msgstr "다음으로, 먼저 ``QuadraticProgram`` 에서 ``Operator`` 로의 변환을 설명하고 ``MinimumEigenOptimizer`` 를 이와 유사하지만 다른 ``MinimumEigensolver`` 와 함께 사용하여 주어진 ``QuadraticProgram`` 을 해결하는 방법을 보일 것이다. Qiskit의 알고리즘은 가능한 경우 주어진 문제를 지원되는 문제의 클래스로 자동 변환한다. 예를 들어, ``MinimumEigenOptimizer`` 는 정수형 변수를 이진 변수로 자동 변환하거나 목적함수에 대한 이차식 패널티 항으로서 선형 등식 제약조건을 추가한다. Aqua는 이차계획법 문제의 정수형 변수에 대한 변환이 시도될 경우 ``QiskitOptimizationError`` 를 통해 언급할 것이다."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:46
msgid "The circuit depth of ``QAOA`` potentially has to be increased with the problem size, which might be prohibitive for near-term quantum devices. A possible workaround is Recursive QAOA, as introduced in [2]. Qiskit generalizes this concept to the ``RecursiveMinimumEigenOptimizer``, which is introduced at the end of this tutorial."
msgstr "``QAOA`` 의 회로 깊이(depth) 는 잠재적으로 문제의 크기와 함께 증가해야 하는데, 이는 현재의 양자 디바이스(near-term quantum devices) 에서는 (회로 비용을) 감당할 수 없을지도 모른다. 가능한 해결 방법은 [2] 에 소개된 Recursive QAOA이다. Qiskit은 본 튜토리얼의 마지막 부분에 소개된 ``RecursiveMinimumEigenOptimizer`` 에서 이 개념을 다루었다."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:49
msgid "References"
msgstr "참조"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:51
msgid "[1] `A. Lucas, Ising formulations of many NP problems, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>`__"
msgstr "[1] `A. Lucas, Ising formulations of many NP problems, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>`__"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:53
msgid "[2] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"
msgstr "[2] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:65
msgid "Converting a QUBO to an Operator"
msgstr "QUBO를 Operator로 변환하기"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:165
msgid "Next we translate this QUBO into an Ising operator. This results not only in an ``Operator`` but also in a constant offset to be taking into account to shift the resulting value."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:222
msgid "Sometimes an ``QuadraticProgram`` might also directly be given in the form of an ``Operator``. For such cases, Qiskit also provides a converter from an ``Operator`` back to a ``QuadraticProgram``, which we illustrate in the following."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:296
msgid "This converter allows, for instance, to translate an ``Operator`` to a ``QuadraticProgram`` and then solve the problem with other algorithms that are not based on the Ising Hamiltonian representation, such as the ``GroverOptimizer``."
msgstr "예를 들어, 이 변환기는 ``Operator`` 를 ``QuadraticProgram`` 으로 변환한 다음, ``GroverOptimizer`` 와 같은 Ising Hamiltonian 표현식을 기반으로 하지 않는 다른 알고리즘으로 문제를 해결할 수 있다."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:308
msgid "Solving a QUBO with the MinimumEigenOptimizer"
msgstr "MinimumEigenOptimizer를 사용하여 QUBO를 해결하기"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:319
msgid "We start by initializing the ``MinimumEigensolver`` we want to use."
msgstr "``MinimumEigensolver`` 를 초기화하는 것에서부터 시작한다."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:347
msgid "Then, we use the ``MinimumEigensolver`` to create ``MinimumEigenOptimizer``."
msgstr "이후 ``MinimumEigenOptimizer`` 를 생성하기 위하여 ``MinimumEigensolver`` 를 사용한다."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:369
msgid "We first use the ``MinimumEigenOptimizer`` based on the classical exact ``NumPyMinimumEigensolver`` to get the optimal benchmark solution for this small example."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:414
msgid "Next we apply the ``MinimumEigenOptimizer`` based on ``QAOA`` to the same problem."
msgstr "다음으로 동일한 문제에 대하여 ``QAOA`` 를 기반으로한 ``MinimumEigenOptimizer`` 를 적용한다."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:460
msgid "Analysis of Samples"
msgstr "샘플 분석하기"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:462
msgid "``OptimizationResult`` provides a useful information source ``SolutionSample`` (here denoted as *samples*). They contain information about input values ``x``, objective function values ``fval``, probability of obtaining that result ``probability`` and the solution status ``status`` (``SUCCESS``, ``FAILURE``, ``INFEASIBLE``)."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:520
msgid "We may also want to filter samples according to their status or probabilities."
msgstr "또한, 그들의 상태 또는 확률에 따라 샘플들을 필터링할 수 있다."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:598
msgid "If we want to obtain a better perspective of the results, statistics is very helpful, both with respect to the objective function values and their respective probabilities. Thus, mean and standard deviation are the very basics for understanding the results."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:680
msgid "Finally, despite all number-crunching, visualization is usually the best early-analysis approach."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:759
msgid "RecursiveMinimumEigenOptimizer"
msgstr "``RecursiveMinimumEigenOptimizer``"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:770
msgid "The ``RecursiveMinimumEigenOptimizer`` takes a ``MinimumEigenOptimizer`` as input and applies the recursive optimization scheme to reduce the size of the problem one variable at a time. Once the size of the generated intermediate problem is below a given threshold (``min_num_vars``), the ``RecursiveMinimumEigenOptimizer`` uses another solver (``min_num_vars_optimizer``), e.g., an exact classical solver such as CPLEX or the ``MinimumEigenOptimizer`` based on the ``NumPyMinimumEigensolver``."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:772
msgid "In the following, we show how to use the ``RecursiveMinimumEigenOptimizer`` using the two ``MinimumEigenOptimizer`` introduced before."
msgstr "다음으로, 앞서 언급하였듯이 두 개의 ``MinimumEigenOptimizer`` 를 활용한 ``RecursiveMinimumEigenOptimizer`` 를 이용하는 방법을 살펴본다."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:783
msgid "First, we construct the ``RecursiveMinimumEigenOptimizer`` such that it reduces the problem size from 3 variables to 1 variable and then uses the exact solver for the last variable. Then we call ``solve`` to optimize the considered problem."
msgstr ""

