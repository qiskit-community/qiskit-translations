msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-23 21:49+0000\n"
"PO-Revision-Date: 2021-08-23 21:54\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/04_grover_optimizer.po\n"
"X-Crowdin-File-ID: 9648\n"
"Language: ko_KR\n"

#: ../../tutorials/04_grover_optimizer.ipynb:9
msgid "This page was generated from `docs/tutorials/04_grover_optimizer.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/04_grover_optimizer.ipynb`__ 에서 생성되었다."

#: ../../tutorials/04_grover_optimizer.ipynb:9
msgid "Grover Optimizer"
msgstr "Grover 최적화기"

#: ../../tutorials/04_grover_optimizer.ipynb:21
msgid "Introduction"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:23
msgid "Grover Adaptive Search (GAS) has been explored as a possible solution for combinatorial optimization problems, alongside variational algorithms such as Variational Quantum Eigensolver (VQE) and Quantum Approximate Optimization Algorithm (QAOA). The algorithm iteratively applies Grover Search to find the optimum value of an objective function, by using the best-known value from the previous run as a threshold. The adaptive oracle used in GAS recognizes all values above or below the current threshold (for max and min respectively), decreasing the size of the search space every iteration the threshold is updated, until an optimum is found."
msgstr "Grover 적응 검색 (그로버 적응성 검색 (GAS)) 은 조합 최적화 문제들을 위한 가능한 솔루션으로써, 다양한 알고리즘, 예를 들어, 변동성 양자 고윳값해석기 (VQE) 및 양자 근사 최적화 알고리즘 (QAOA)과 함께 탐구되었다. 알고리즘은 이전 실행에서 가장 잘 알려진 값을 임계값으로 사용하여 목표 함수의 최적 값을 찾기 위해 Grover 검색을 반복적으로 적용합니다. GAS 에서 사용된 적응형 오라클은 현재 임계값 이상의 모든 값을 인식하고 (최대 및 최소), 최적해가 발견될 때까지, 임계값이 갱신될 때마다 검색 공간의 크기를 감소시킨다."

#: ../../tutorials/04_grover_optimizer.ipynb:26
msgid "In this notebook we will explore each component of the ``GroverOptimizer``, which utilizes the techniques described in GAS, by minimizing a Quadratic Unconstrained Binary Optimization (QUBO) problem, as described in [1]"
msgstr "이 노트북에서는 [1] 에 기술된 바와 같이, 이차 제약 없는 이진 최적화(QUBO) 문제를 최소화하여 GAS에서 설명하는 기술을 활용하는 ``GroverOptimizer`` 의 각 구성 요소를 알아볼 것이다."

#: ../../tutorials/04_grover_optimizer.ipynb:29
msgid "References"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:31
msgid "[1] `A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization, arXiv preprint arXiv:1912.04088 (2019). <https://arxiv.org/abs/1912.04088>`__"
msgstr "[1] `A. Gilliam, S. Woerner, C. Gonciulea, Grover Adaptive Search for Constrained Polynomial Binary Optimization, arXiv preprint arXiv:1912.04088 (2019). <https://arxiv.org/abs/1912.04088>`__"

#: ../../tutorials/04_grover_optimizer.ipynb:43
msgid "Grover Adaptive Search"
msgstr "Grover 적응 검색 (Grover Adaptive Search)"

#: ../../tutorials/04_grover_optimizer.ipynb:45
msgid "Grover Search, the core element of GAS, needs three ingredients:"
msgstr "GAS의 핵심 요소인 Grover Search에는 세 가지 성분이 필요하다."

#: ../../tutorials/04_grover_optimizer.ipynb:47
msgid "A state preparation operator :math:`A` to construct a superposition of all states in the search space."
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:49
msgid "An oracle operator :math:`O`, that recognizes the states of interest and multiplies their amplitudes by -1."
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:51
msgid "The Grover diffusion operator :math:`D`, that multiplies the amplitude of the :math:`|0\\rangle_n` state by -1."
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:53
msgid "While implementations of GAS vary around the specific use case, the general framework still loosely follows the steps described below."
msgstr "GAS의 구현은 특정 사용사례에 따라 다르지만, 일반적인 틀은 여전히 아래에 설명된 단계를 대략적으로 따른다."

#: ../../tutorials/04_grover_optimizer.ipynb:59
msgid "|17053a2cc61e48bdb6f08637c41b6d01|"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:65
msgid "``GroverOptimizer`` uses ``QuadraticProgramToNegativeValueOracle`` to construct :math:`A_y` such that it prepares a :math:`n`-qubit register to represent the equal superposition of all :math:`|x\\rangle_n` and a :math:`m`-qubit register to (approximately) represent the corresponding :math:`|Q(x)-y\\rangle_m`. Then, all states with :math:`(Q(x) - y)` negative should be flagged by :math:`O_y`. Note that in the implementation discussed, the oracle operator is actually independent of :math:`y`, but this is not a requirement. For clarity, we will refer to the oracle as :math:`O` when the oracle is independent of :math:`y`."
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:68
msgid "Put formally, ``QuadraticProgramToNegativeValueOracle`` constructs an :math:`A_y` and :math:`O` such that:"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:74
msgid "|f085dcefbf434ec49274825b6f95a3b6|"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:80
msgid "where :math:`|x\\rangle` is the binary encoding of the integer :math:`x`."
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:82
msgid "At each iteration in which the threshold :math:`y` is updated, we adapt :math:`A_y` such that the function values are shifted up or down (for minimum and maximum respectively) by :math:`y`. For example, in the context of finding the minimum, as the value of :math:`y` decreases, the search space (negative values) also decreases, until only the minimum value remains. A concrete example will be explored in the next section."
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:99
msgid "Find the Minimum of a QUBO Problem using GroverOptimizer"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:101
msgid "The following is a toy example of a minimization problem."
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:103
msgid ":nbsphinx-math:`\\begin{eqnarray} \\min_{x \\in \\{0, 1\\}^3} -2x_1x_3 - x_2x_3 - 1x_1 + 2x_2 - 3x_3. \\end{eqnarray}`"
msgstr ":nbsphinx-math:`\\begin{eqnarray} \\min_{x \\in \\{0, 1\\}^3} -2x_1x_3 - x_2x_3 - 1x_1 + 2x_2 - 3x_3. \\end{eqnarray}`"

#: ../../tutorials/04_grover_optimizer.ipynb:107
msgid "For our initial steps, we create a docplex model that defines the problem above, and then use the ``from_docplex_mp()`` function to convert the model to a ``QuadraticProgram``, which can be used to represent a QUBO in Qiskit Optimization."
msgstr "초기 단계에서는 위의 문제점을 정의하는 docplex 모델을 만들고 ``from_docplex_mp()`` 함수를 사용하여 모델을 Qiskit 최적화에서 QUBO를 나타내기 위해 사용할 수 있는 ``QuadraticProgram`` 으로 변환한다."

#: ../../tutorials/04_grover_optimizer.ipynb:202
msgid "Next, we create a ``GroverOptimizer`` that uses 6 qubits to encode the value, and will terminate after there have been 10 iterations of GAS without progress (i.e. the value of :math:`y` does not change). The ``solve()`` function takes the ``QuadraticProgram`` we created earlier, and returns a results object that contains information about the run."
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:247
msgid "This results in the optimal solution :math:`x_0=1`, :math:`x_1=0`, :math:`x_2=1` and the optimal objective value of :math:`-6` (most of the time, since it is a randomized algorithm). In the following, a custom visualization of the quantum state shows a possible run of ``GroverOptimizer`` applied to this QUBO."
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:253
msgid "|27b2d441853b440e9532333fc71e6cc9|"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:259
msgid "Each graph shows a single iteration of GAS, with the current values of :math:`r` (= iteration counter) and :math:`y` (= threshold/offset) shown in the title. The X-axis displays the integer equivalent of the input (e.g. ‘101’ :math:`\\rightarrow` 5), and the Y-axis shows the possible function values. As there are 3 binary variables, there are :math:`2^3=8` possible solutions, which are shown in each graph. The color intensity indicates the probability of measuring a certain result (with bright intensity being the highest), while the actual color indicates the corresponding phase (see phase color-wheel below). Note that as :math:`y` decreases, we shift all of the values up by that amount, meaning there are fewer and fewer negative values in the distribution, until only one remains (the minimum)."
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:266
msgid "|3755064be55c4d9a818ddd3a6ac8a69d|"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:287
msgid "Check that GroverOptimizer finds the correct value"
msgstr ""

#: ../../tutorials/04_grover_optimizer.ipynb:289
msgid "We can verify that the algorithm is working correctly using the ``MinimumEigenOptimizer`` in Qiskit."
msgstr ""

