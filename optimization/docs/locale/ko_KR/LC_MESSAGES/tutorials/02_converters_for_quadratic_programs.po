msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-14 08:10+0000\n"
"PO-Revision-Date: 2023-11-14 08:26\n"
"Last-Translator: \n"
"Language: ko\n"
"Language-Team: Korean\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /main/optimization/docs/locale/en/LC_MESSAGES/tutorials/02_converters_for_quadratic_programs.po\n"
"X-Crowdin-File-ID: 9644\n"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:9
msgid "This page was generated from `docs/tutorials/02_converters_for_quadratic_programs.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/02_converters_for_quadratic_programs.ipynb`__ 에서 생성되었다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:9
msgid "Converters for Quadratic Programs"
msgstr "이차계획법을 위한 변환기"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:20
msgid "Optimization problems in Qiskit optimization module are represented with the ``QuadraticProgram`` class, which is a generic and powerful representation for optimization problems. In general, optimization algorithms are defined for a certain formulation of a quadratic program, and we need to convert our problem to the right type."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:22
msgid "For instance, Qiskit optimization provides several optimization algorithms that can handle `Quadratic Unconstrained Binary Optimization <https://en.wikipedia.org/wiki/Quadratic_unconstrained_binary_optimization>`__ (QUBO) problems. These are mapped to Ising Hamiltonians, for which Qiskit optimization uses the ``qiskit.quantum_info.SparsePauliOp`` object, and then their ground state is approximated. For this optimization, commonly known algorithms such as VQE or QAOA can be used as underlying routine. See the following tutorial about the `Minimum Eigen Optimizer <./03_minimum_eigen_optimizer.ipynb>`__ for more detail. Note that also other algorithms exist that work differently, such as the ``GroverOptimizer``."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:25
msgid "To map a problem to the correct input format, the optimization module of Qiskit optimization offers a variety of converters. In this tutorial we're providing an overview on this functionality. Currently, Qiskit optimization contains the following converters."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:27
msgid "``InequalityToEquality``: convert inequality constraints into equality constraints with additional slack variables."
msgstr "``InequalityToEquality``: 추가적인 여유변수들을사용하여 부등식 제약 조건을 등식 제약 조건으로 변환한다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:28
msgid "``IntegerToBinary``: convert integer variables into binary variables and corresponding coefficients."
msgstr "``IntegerToBinary``: 정수형 변수들을 이진 변수들과 대응되는 계수들로 변환한다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:29
msgid "``LinearEqualityToPenalty``: convert equality constraints into additional terms of the objective function."
msgstr "``LinearEqualityToPenalty``: 등식 제약 조건을 목적 함수의 추가 조건으로 변환한다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:30
msgid "``LinearInequalityToPenalty``: convert inequality constraints into additional terms of the objective function."
msgstr "``LinearInequalityToPenalty``: 부등식 제약 조건을 목적 함수의 추가적인 항들로 변환한다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:31
msgid "``MaximizeToMinimize``: convert to the equivalent minimization problem."
msgstr "``MaximizeToMinimize``: 동등한 최소화 문제로 변환한다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:32
msgid "``MinimizeToMaximize``: convert to the equivalent maximization problem."
msgstr "``MinimizeToMaximize``: 동등한 최대화 문제로 변환한다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:33
msgid "``QuadraticProgramToQubo``: a wrapper that includes ``InequalityToEquality``, ``IntegerToBinary``, ``LinearEqualityToPenalty``, ``LinearInequalityToPenalty``, and ``MaximizeToMinimize`` for convenience."
msgstr "``QuadraticProgramToQubo``: 편의상 ``InequalityToEquality``, ``IntegerToBinary``, ``LinearEqualityToPenalty``, ``LinearInequalityToPenalty``, ``MaximizeToMinimize`` 를 포함하고 있는 것이다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:45
msgid "InequalityToEquality"
msgstr "부등식의 등식화"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:47
msgid "``InequalityToEqualityConverter`` converts inequality constraints into equality constraints with additional slack variables to remove inequality constraints from ``QuadraticProgram``. The upper bounds and the lower bounds of slack variables will be calculated from the difference between the left sides and the right sides of constraints. Signs of slack variables depend on symbols in constraints such as :math:`\\leq` and :math:`\\geq`."
msgstr "``QuadraticProgram`` 에서 부등식의 제약조건을 제거하기 위하여 ``InequalityToEqualityConverter`` 는 여유변수(slack variable)를 추가함으로써 부등식을 등식으로 변환시킨다. 여유변수의 상한과 하한은 식의 좌변과 우변의 차이로 계산된다. 여유변수의 부호는 :math:`\\leq` 와 :math:`\\geq` 같이 부등호에 의하여 결정된다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:49
msgid "The following is an example of a maximization problem with two inequality constraints. Variable :math:`x` and :math:`y` are binary variables and variable :math:`z` is an integer variable."
msgstr "다음은 부등식 제약조건이 2 개인 최대화 문제의 예이다. 변수 :math:`x` 와 :math:`y` 는 이진 변수이고 변수 :math:`z` 는 정수 변수이다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:63
msgid "With ``QuadraticProgram``, an optimization model of the problem is written as follows."
msgstr "``QuadraticProgram`` 을 이용하여 작성한 최적화 문제의 모델은 다음과 같다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:172
msgid "Call ``convert`` method of ``InequalityToEquality`` to convert."
msgstr "모델을 변환하기 위하여 ``InequalityToEquality`` 의 ``convert`` 메서드를 아래와 같이 호출한다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:280
msgid "After converting, the formulation of the problem looks like the above output. As we can see, the inequality constraints are replaced with equality constraints with additional integer slack variables, :math:`xyz\\_leg\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack`."
msgstr "변환 후, 문제의 정의식은 위의 출력과 같다. 위에서 확인할 수 있듯이, 부등식 제약 조건들은 :math:`xyz\\_leg\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` 를 추가적인 정수형 여유변수들로 갖는 등식 제약 조건들로 대체된다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:282
msgid "Let us explain how the conversion works. For example, the lower bound of the left side of the first constraint is :math:`0` which is the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Thus, the upper bound of the additional integer variable must be :math:`5` to be able to satisfy even the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Note that we cut off the part after the decimal point in the converted formulation since the left side of the first constraint in the original formulation can be only integer values. For the second constraint, basically we apply the same approach. However, the symbol in the second constraint is :math:`\\geq`, so we add minus before :math:`xyz\\_geq\\text{@}int\\_slack` to be able to satisfy even the case of :math:`x=1, y=1`, and :math:`z=7`."
msgstr "변환이 어떻게 작동하는지에 대한 설명이다. 예를 들어, 좌변 첫 번째 제약 조건의 하한은 :math:`0`이며, 이는 :math:`x=0`, :math:`y=0`,  :math:`z=0` 의 경우이다. 따라서 추가된 변수의 상한이 :math:`5` 가 되어야 :math:`x=0`, :math:`y=0`,  :math:`z=0` 의 경우도 만족할 수 있다. 원래 공식에서 좌변 첫 번째 제약 조건은 정수 값만 될 수 있기 때문에, 변환된 공식에서 소수점 이후 부분은 잘라낸다. 두 번째 제약 조건에 대해서도 기본적으로 동일한 접근 방식을 적용한다. 그러나 두 번째 제약 조건의 기호는 :math:`\\geq` 이므로 :math:`xyz\\_geq\\text{@}int\\_slack` 앞에 마이너스 부호를 추가하여 :math:`x=1, y=1`, :math:`z=7` 의 경우에도 만족시킬 수 있다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:299
msgid "Let us see how the ``interpret`` method works. The purpose of this method is to convert the solution of the converted problem back to that of the original problem. To use this method, we would first require to solve the problem. For the purpose of this tutorial, we will use docplex to solve. We will first translate the quadratic problem into a docplex.mp model."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:392
msgid "The result ``result_eq`` of ``qp_eq`` has 5 variable values (``x=1.0, y=1.0, z=3.0, xyz_leq@int_slack=0.0, xyz_geq@int_slack=2.0``) while result ``result_orig`` of the original ``qp`` has three values (``x=1.0, y=1.0, z=3.0``). We can call ``InequalityToEquality.interpret`` method by passing a list or an array to the method that has values of ``qp_eq.variables`` as follows. ``result_eq.x`` has the list of values that each variable takes in the solution in correspondence to their position in the variable list ``qp_eq.variables``."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:442
msgid "We notice that :math:`[1., 1., 3.]` are the values taken in the solution of the converted problem for the common variables between converted and original problems (variables: :math:`x`, :math:`y`, :math:`z`). The interpret method shows the same values are the solution of the original problem. This is because the objective function for the converted and original problems is exactly the same. The slack variables are just ensuring equality in the constraints of the converted problem, where the constraints are also exactly same between the original and converted problems, except that the original problem has inequality constraints."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:455
msgid "IntegerToBinary"
msgstr "정수변수의 이진변수화"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:466
msgid "``IntegerToBinary`` converts integer variables into binary variables and coefficients to remove integer variables from ``QuadraticProgram``. For converting, bounded-coefficient encoding proposed in `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Eq. (5)) is used. For more detail of the encoding method, please see the paper."
msgstr "``QuadraticProgram`` 에서 정수형 변수를 제거하기 위하여 ``IntegerToBinary`` 는 정수형 변수를 이진 변수와 계수로 변환한다. 이러한 변환은, 논문 `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Eq. (5)) 에서 제안한 구속-계수 인코딩 (bounded-coefficient encoding) 기법을 이용하여 변환되었다. 인코딩 기법과 관련한 자세한 내용은 논문을 통해 확인할 수 있다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:468
msgid "We use the output of ``InequalityToEquality`` as a starting point. Variables :math:`x` and :math:`y` are binary variables, while the variable :math:`z` and the slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` are integer variables. We print the problem again for reference."
msgstr "우리는 ``InequalityToEquality`` 의 출력값을 출발점으로 삼는다. 변수 :math:`x` 와 :math:`y` 는 이진 변수이고 변수 :math:`z` 와 여유변수인 :math:`xyz\\_leq\\text{@}int\\_slack` 및 :math:`xyz\\_geq\\text{@}int\\_slack` 는 정수형 변수이다. 참조를 위해 문제를 다시 출력한다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:564
msgid "Call ``convert`` method of ``IntegerToBinary`` to convert."
msgstr "모델을 변환하기 위하여 ``IntegerToBinary`` 의 ``convert`` 메서드를 호출하면 아래와 같다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:666
msgid "After converting, the integer variable :math:`z` is replaced with three binary variables :math:`z\\text{@}0`, :math:`z\\text{@}1` and :math:`z\\text{@}2` with coefficients 1, 2 and 4, respectively as the above. The slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` that were introduced by ``InequalityToEquality`` are also both replaced with three binary variables with coefficients 1, 2, 2, and 1, 2, 3, respectively."
msgstr "변환 후, 변수 :math:`z` 는 위와 같이 각각의 계수 1, 2, 4인 3개의 이진 변수들 :math:`z\\text{@}0` , :math:`z\\text{@}1`, 그리고 :math:`z\\text{@}2` 로 대체된다. ``InequalityToEquality`` 에서 소개되었던 여유변수인 :math:`xyz\\_leq\\text{@}int\\_slack` 와 :math:`xyz\\_geq\\text{@}int\\_slack` 도 모두 각각의 계수가 1, 2, 2 와 1, 2, 3인 3개의 이진 변수들로 대체된다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:668
msgid "Note: Essentially the coefficients mean that the sum of these binary variables with coefficients can be the sum of a subset of :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, and :math:`\\{1, 2, 3\\}` to represent that acceptable values :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}`, and :math:`\\{0, \\ldots, 6\\}`, which respects the lower bound and the upper bound of original integer variables correctly."
msgstr "참고 : 기본적으로 계수가 의미하는 바는, 이러한 계수를 갖는 이진 변수들의 합이 원래의 정수형 변수의 하한과 상한인 :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}`, :math:`\\{0, \\ldots, 6\\}` 를 나타내기 위하여 :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, :math:`\\{1, 2, 3\\}` 의 하위 집합의 합이 될 수 있음을 의미한다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:670
msgid "``IntegerToBinary`` also provides ``interpret`` method that is the functionality to translate a given binary result back to the original integer representation. Let us see how the ``interpret`` method works."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:751
msgid "``result_eq_bin`` has more binary variables due to the conversion by ``IntegerToBinary.convert``. ``IntegerToBinary.interpret`` translates them back to the integer values by aggregating binary variables values associated with the original integer variables of ``qp_eq``."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:801
msgid "LinearEqualityToPenalty"
msgstr "LinearEqualityToPenalty"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:812
msgid "``LinearEqualityToPenalty`` converts linear equality constraints into additional quadratic penalty terms of the objective function to map ``QuadraticProgram`` to an unconstrained form. An input to the converter has to be a ``QuadraticProgram`` with only linear equality constraints. Those equality constraints, e.g. :math:`\\sum_i a_i x_i = b` where :math:`a_i` and :math:`b` are numbers and :math:`x_i` is a variable, will be added to the objective function in the form of :math:`M(b - \\sum_i a_i x_i)^2` where :math:`M` is a large number as penalty factor. By default :math:`M= 1e5`. The sign of the term depends on whether the problem type is a maximization or minimization."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:815
msgid "We use the output of ``IntegerToBinary`` as a starting point, where all variables are binary variables and all inequality constraints have been mapped to equality constraints. We print the problem again for reference."
msgstr "모든 변수가 이진 변수이고 모든 부등식 제약 조건이 등식 제약 조건에 매핑된 ``IntegerToBinary`` 의 출력값을 시작 지점으로 사용한다. 참조를 위해 문제를 다시 출력한다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:905
msgid "Call ``convert`` method of ``LinearEqualityToPenalty`` to convert."
msgstr "모델을 변환하기 위하여 ``LinearEqualityToPenalty``의 ``convert`` 메서드를 호출하면 아래와 같다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:1070
msgid "After converting, the equality constraints are added to the objective function as additional terms with the default penalty factor provided by Qiskit optimization. The resulting problem is now a QUBO and compatible with many quantum optimization algorithms such as VQE, QAOA and so on."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:1081
msgid "This gives the same result as before."
msgstr "다음은 이전과 동일한 결과를 보여준다."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:1092
msgid "Like we did for the other converters, let us see how ``interpret`` method works for this case."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:1211
msgid "We can see that the result of the ``interpret`` method implies that both the original and converted problems have exactly the same solution. This is expected because the converted problem has exactly the same variables as the original problem, the objective has been modified in such a way that we do not have the constraints anymore in the converted problem."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:1222
msgid "Finally, let us see how we interpret the result of QUBO back to the solution of the original problem ``qp``. The following code shows that the interpreted values are equivalent to the result of the original problem ``qp``."
msgstr ""

