msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-11 01:17+0000\n"
"PO-Revision-Date: 2022-11-11 02:26\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/11_using_classical_optimization_solvers_and_models.po\n"
"X-Crowdin-File-ID: 9715\n"
"Language: ko_KR\n"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:9
msgid "This page was generated from `docs/tutorials/11_using_classical_optimization_solvers_and_models.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/11_using_classical_optimization_solvers_and_models.ipynb` 에서 생성되었다."

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:9
msgid "Using Classical Optimization Solvers and Models with Qiskit Optimization"
msgstr "고전 최적화 해석기와 모델을 Qiskit 최적화와 함께 사용하기"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:20
msgid "We can use classical optimization solvers (CPLEX and Gurobi) with Qiskit Optimization. Docplex and Gurobipy are the Python APIs for CPLEX and Gurobi, respectively. We can load and save an optimization model by Docplex and Gurobipy and can apply CPLEX and Gurobi to ``QuadraticProgram``."
msgstr "우리는 고전 최적화 해석기(CPLEX와 Gurobi) 를 Qiskit 최적화와 함께 사용할 수 있다. Docplex와 Gurobipy는 각각 CPLEX와 Gurobi의 Python API이다. 우리는 Docplex와Gurobipy의 최적화 모델을 로딩하고 저장할 수 있으며 CPLEX와 Gurobi를 ``QuadraticProgram`` 에 적용할 수 있다."

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:22
msgid "If you want to use the CPLEX solver, you need to install ``pip install 'qiskit-optimization[cplex]'``. Docplex is automatically installed, as a dependent, when you install Qiskit Optimization."
msgstr "CPLEX 해석기를 사용하려면 ``pip install 'qiskit-optimization[cplex]'``를 설치해야 한다. Docplex는 Qiskit 최적화를 설치할 때, 종속적으로 자동 설치된다."

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:24
msgid "If you want to use Gurobi and Gurobipy, you need to install ``pip install 'qiskit-optimization[gurobi]'``."
msgstr "Gurobi와 Gurobipy를 이용하려면 ``pip install 'qiskit-optimization[gurobi]'`` 를 설치해야 한다."

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:26
msgid "Note that these solvers installed via pip are free versions, which have some limitations such as number of variables. Also note that the latest version 20.1 of CPLEX is available only for Python 3.7 and 3.8 as of July 2021. See the following pages for details."
msgstr "참고로 pip를 통해 설치된 이러한 해석기들은 무료 버전이며, 이는 변수의 수와 같이 일부 제한 사항이 있다. 또한 CPLEX의 최신 버전 20.1은 2021년 7월 현재 Python 3.7 및 3.8에만 사용할 수 있다. 자세한 내용은 다음 페이지를 참조."

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:28
msgid "https://pypi.org/project/cplex/"
msgstr "https://pypi.org/project/cplex/"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:29
msgid "https://pypi.org/project/gurobipy/"
msgstr "https://pypi.org/project/gurobipy/"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:41
msgid "CplexSolver and GurobiSolver"
msgstr "CplexSolver와 GurobiSolver"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:43
msgid "Qiskit Optimization supports the classical solvers of CPLEX and Gurobi as ``CplexSolver`` and ``GurobiSolver``, respectively. We can solve ``QuadraticProgram`` with ``CplexSolver`` and ``GurobiSolver`` as follows."
msgstr "Qiskit 최적화는 CPLEX와 Gurobi의 고전적인 해석기들을 각각 ``CplexSolver`` 와 ``GurobiSolver`` 로 지원한다. 우리는 다음과 같이 ``CplexSolver`` 와 ``GurobiSolver`` 로 ``QuadraticProgram`` 을 해결할 수 있다."

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:208
msgid "We can set the solver parameter of CPLEX as follows. We can display the solver message of CPLEX by setting ``disp=True``. See `Parameters of CPLEX <https://www.ibm.com/docs/en/icos/20.1.0?topic=cplex-parameters>`__ for details of CPLEX parameters."
msgstr "우리는 CPLEX 해석기의 매개 변수를 다음과 같이 정할 수 있다. ``disp=True`` 로 정하면 CPLEX 해석기의 메세지를 표시할 수 있다. 참고: `Parameters of CPLEX <https://www.ibm.com/docs/en/icos/20.1.0?topic=cplex-parameters>`__ CPLEX 매개 변수에 관한 자세한 사항."

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:299
msgid "We get the same optimal solution by QAOA as follows."
msgstr "다음과 같이 QAOA를 이용하여 동일한 최적의 해결책을 얻는다."

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:385
msgid "Translators between ``QuadraticProgram`` and Docplex/Gurobipy"
msgstr "``QuadraticProgram`` 와 Docplex/Gurobipy 간 번역기"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:387
msgid "Qiskit Optimization can load ``QuadraticProgram`` from a Docplex model and a Gurobipy model."
msgstr "Qiskit 최적화는 Docplex 모델과 Gurobipy 모델을 통해 ``QuadraticProgram`` 을 로드할 수 있다."

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:389
msgid "First, we define an optimization problem by Docplex and Gurobipy."
msgstr "먼저, Docplex 및 Gurobipy에 의한 최적화 문제를 정의한다."

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:548
msgid "We can generate ``QuadraticProgram`` object from both Docplex and Gurobipy models. We see that the two ``QuadraticProgram`` objects generated from Docplex and Gurobipy are identical."
msgstr "우리는 Docplex 및 Gurobipy 모델 모두에서 ``QuadraticProgram`` 객체를 생성할 수 있다. 우리는 Docplex 및 Gurobipy에서 생성된 두 개의 ``QuadraticProgram`` 객체가 동일하다는 것을 알 수 있다."

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:697
msgid "We can generate a Docplex model and a Gurobipy model from ``QuadraticProgram`` too."
msgstr "우리는  ``QuadraticProgram`` 에서 Docplex 모델과 Gurobipy 모델을 생성할 수 있다."

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:847
msgid "Indicator constraints of Docplex"
msgstr "Docplex의 표시기 제한조건"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:849
msgid "``from_docplex_mp`` supports indicator constraints, e.g., ``u = 0 => x + y <= z`` (u: binary variable) when we convert a Docplex model into ``QuadraticProgram``. It converts indicator constraints into linear constraints using the big-M formulation."
msgstr "``from_docplex_mp`` 는 ``u = 0 => x + y <= z`` (u: 바이너리 변수) 와 같은 표시기 제한조건을 지원하는데, 이는 Docplex 모델을  ``QuadraticProgram`` 로 변환할 때이다. 이는 표시기 제한조건을 big-M 공식을 사용하여 선형 제한조건으로 변환한다."

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:960
msgid "Let’s compare the solutions of the model with an indicator constraint by"
msgstr "모델의 해결책을 표시기 제한조건과 비교해보자."

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:962
msgid "applying CPLEX directly to the Docplex model (without translating it to ``QuadraticProgram``. CPLEX solver natively supports the indicator constraints),"
msgstr "CPLEX를 Docplex 모델 ( ``QuadraticProgram`` 로 번역하지 않음. CPLEX 해석기는 기본적으로 표시기 제한조건을 지원함) 에 직접 적용,"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:963
msgid "applying QAOA to ``QuadraticProgram`` obtained by ``from_docplex_mp``."
msgstr "QAOA를 ``from_docplex_mp`` 로 얻은 ``QuadraticProgram`` 에 적용하는 것."

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:965
msgid "We see the solutions are same."
msgstr "해결책이 같다는 것을 알 수 있다."

