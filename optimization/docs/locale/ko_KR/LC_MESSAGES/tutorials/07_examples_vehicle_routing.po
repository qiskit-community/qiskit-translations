msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-27 17:54+0000\n"
"PO-Revision-Date: 2023-01-27 18:45\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/07_examples_vehicle_routing.po\n"
"X-Crowdin-File-ID: 9654\n"
"Language: ko_KR\n"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:9
msgid "This page was generated from `docs/tutorials/07_examples_vehicle_routing.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/07_examples_vehicle_routing.ipynb`__ 에서 생성되었다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:9
msgid "Vehicle Routing"
msgstr "차량 라우팅"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:12
msgid "The Introduction"
msgstr "소개"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:14
msgid "Logistics is a major industry, with some estimates valuing it at USD 8183 billion globally in 2015. Most service providers operate a number of vehicles (e.g., trucks and container ships), a number of depots, where the vehicles are based overnight, and serve a number of client locations with each vehicle during each day. There are many optimization and control problems that consider these parameters. Computationally, the key challenge is how to design routes from depots to a number of client locations and back to the depot, so as to minimize vehicle-miles traveled, time spent, or similar objective functions. In this notebook we formalize an idealized version of the problem and showcase its solution using the quantum approximate optimization approach of Farhi, Goldstone, and Gutmann (2014)."
msgstr "물류는 주요 산업으로 2015년 세계적으로 8183억 달러 규모로 평가되고 있다. 대부분의 서비스 제공자들은 다수의 차량 (예를 들어, 트럭 및 컨테이너 선박), 다수의 depots 를 운영하며, 여기서 차량은 하룻밤 동안에 정차하며, 각각의 날 동안 각각의 차량과 함께 다수의 클라이언트 위치를 제공한다. 이러한 매개변수를 고려하는 많은 최적화 및 제어 문제점이 있다. 계산적으로, 주요 문제는 이동 경로, 소요 시간 또는 유사한 목적 함수를 최소화하기 위해 저장소에서 다수의 클라이언트 위치로, 다시 저장소로 이동하는 경로를 디자인하는 방법이다. 이 노트북에서는 문제의 이상화된 버전을 형식화하고, [Farhi, Goldstone, and Gutmann (2014)] 의 퀀텀 근사 최적화 접근법을 사용하여 솔루션을 공개한다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:17
msgid "The overall workflow we demonstrate comprises:"
msgstr "설명하고자 하는 전반적인 워크플로우(workflow) 는 다음과 같다:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:19
msgid "establish the client locations. Normally, these would be available ahead of the day of deliveries from a database. In our use case, we generate these randomly."
msgstr "클라이언트 위치를 설정한다. 일반적으로 이들은 데이터베이스로부터의 배달일 이전에 사용할 수 있습니다. 우리의 유스 케이스에서, 우리는 이들을 무작위로 생성한다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:21
msgid "compute the pair-wise distances, travel times, or similar. In our case, we consider the Euclidean distance, “as the crow flies”, which is perhaps the simplest possible."
msgstr "은 쌍별거리, 이동 시간 등을 계산한다. 우리의 경우, 우리는 \"일직선으로\" 유클리드 거리를 고려하는데, 이것은 아마도 가장 간단한 것일 것이다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:23
msgid "compute the actual routes. This step is run twice, actually. First, we obtain a reference value by a run of a classical solver (IBM CPLEX) on the classical computer. Second, we run an alternative, hybrid algorithm partly on the quantum computer."
msgstr "실제 라우트를 계산합니다. 이 단계는 실제로 두 번 실행됩니다. 먼저, 고전적인 컴퓨터에서 고전적인 솔버 (IBM CPLEX) 의 실행에 의해 기준값을 얻는다. 두 번째로, 우리는 양자컴퓨터에 부분적으로 하이브리드 알고리즘을 실행합니다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:25
msgid "visualization of the results. In our case, this is again a simplistic plot."
msgstr "결과를 시각화한다. 이 경우, 다시한번 간단한 도표이다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:27
msgid "In the following, we first explain the model, before we proceed with the installation of the pre-requisites and the data loading."
msgstr "다음에서 사전 요구사항의 설치 및 데이터 로드를 진행하기 전에 먼저 모델을 설명한다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:30
msgid "The Model"
msgstr "모델"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:32
msgid "Mathematically speaking, the vehicle routing problem (VRP) is a combinatorial problem, wherein the best routes from a depot to a number of clients and back to the depot are sought, given a number of available vehicles. There are a number of formulations possible, extending a number of formulations of the traveling salesman problem [Applegate et al, 2006]. Here, we present a formulation known as MTZ [Miller, Tucker, Zemlin, 1960]."
msgstr "수학적으로 말하면, 차량 라우팅 문제 (VRP) 는 조합 문제이며, 다수의 이용가능한 차량들이 주어진다면, 데포로부터 다수의 클라이언트들로의 가장 좋은 루트들이 추구되고 있다. 본원에서, 본 발명자들은 MTZ [Miller, Tucker, Zemlin, 1960] 로 알려진 제제를 제공한다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:34
msgid "Let :math:`n` be the number of clients (indexed as :math:`1,\\dots,n`), and :math:`K` be the number of available vehicles. Let :math:`x_{ij} = \\{0,1\\}` be the binary decision variable which, if it is :math:`1`, activates the segment from node :math:`i` to node :math:`j`. The node index runs from :math:`0` to :math:`n`, where :math:`0` is (by convention) the depot. There are twice as many distinct decision variables as edges. For example, in a fully connected graph, there are :math:`n(n+1)` binary decision variables."
msgstr ":math:`n` 을 고객의 수라고 하고(:math:`1,\\dots,n` 로 인덱싱), :math:`K` 를 사용가능한 탈 것의 수라고 하자. :math:`x_{ij} = \\{0,1\\}` 를 :math:`1` 일 때 노드 :math:`i` 에서 노드 :math:`j` 로의 조각을 활성화하는 이진 결정 변수라고 하자. 노드 인덱스는 :math:`0` 부터 :math:`n` 까지 사용하고, 0은 (관습적으로) 정거장이다. 간선의 두 배만큼의 서로 다른 결정 변수들이 있다. 예를 들어, 완전 연결 그래프에서는, :math:`n(n+1)` 개의 이진 결정 변수들이 있다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:37
msgid "If two nodes :math:`i` and :math:`j` have a link from :math:`i` to :math:`j`, we write :math:`i \\sim j`. We also denote with :math:`\\delta(i)^+` the set of nodes to which :math:`i` has a link, i.e., :math:`j \\in \\delta(i)^+` if and only if :math:`i \\sim j`. Similarly, we denote with :math:`\\delta(i)^-` the set of nodes which are connected to :math:`i`, in the sense that :math:`j \\in \\delta(i)^-` if and only if :math:`j \\sim i`."
msgstr "두 개의 노드 :math:`i` 와 :math:`j` 가 :math:`i` 에서 :math:`j` 까지의 링크를 가지고 있는 경우, :math:`i \\sim j` 를 작성한다. 또한 우리는 :math:`\\delta(i)^+` 를 통해 :math:`i` 가 링크를 갖는 노드 집합 (즉, :math:`j \\in \\delta(i)^+` 와 :math:`i \\sim j` 만 해당) 을 나타낸다. 마찬가지로, 우리는 :math:`j \\in \\delta(i)^-` 가 :math:`j \\sim i` 의 경우에만 :math:`i` 에 연결된 노드 집합을 :math:`\\delta(i)^-` 와 같이 표시한다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:39
msgid "In addition, we consider continuous variables, for all nodes :math:`i = 1,\\dots, n`, denoted :math:`u_i`. These variables are needed in the MTZ formulation of the problem to eliminate sub-tours between clients."
msgstr "게다가, 우리는 모든 노드에 :math:`i = 1,\\dots, n` 에 대해 :math:`u_i` 로 표시된 연속 변수를 고려한다. 이러한 변수는 고객 간의 부분 순환로(sub-tour)를 제거하기 위해 문제의 MTZ 공식에 필요하다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:41
msgid "The VRP can be formulated as:"
msgstr "VRP는 다음과 같이 공식화할 수 있다:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:43
msgid "(VRP) \\quad  f = \\min_{\\{x_{ij}\\}_{i\\sim j}\\in \\{0,1\\}, \\{u_i\\}_{i=1,\\dots,n}\\in \\mathbb{R}} \\quad \\sum_{i \\sim j} w_{ij} x_{ij}"
msgstr "(VRP) \\quad  f = \\min_{\\{x_{ij}\\}_{i\\sim j}\\in \\{0,1\\}, \\{u_i\\}_{i=1,\\dots,n}\\in \\mathbb{R}} \\quad \\sum_{i \\sim j} w_{ij} x_{ij}"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:48
msgid "subject to the node-visiting constraint:"
msgstr "다음과 같이 노드로 된 제한조건에 적용된다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:50
msgid "\\sum_{j \\in \\delta(i)^+} x_{ij} = 1, \\,\\sum_{j \\in \\delta(i)^-} x_{ji} = 1,\\, \\forall i \\in \\{1,\\dots,n\\},"
msgstr "\\sum_{j \\in \\delta(i)^+} x_{ij} = 1, \\,\\sum_{j \\in \\delta(i)^-} x_{ji} = 1,\\, \\forall i \\in \\{1,\\dots,n\\},"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:55
msgid "the depot-visiting constraints:"
msgstr "저장소 방문 제한 조건:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:57
msgid "\\sum_{i \\in \\delta(0)^+} x_{0i} = K, \\, \\sum_{j \\in \\delta(0)^+} x_{j0} = K,"
msgstr "\\sum_ {i \\in \\delta (0) ^+} x_{0i} = K,\\, \\sum_ {j \\in \\delta (0) ^+} x_{j0} = K,"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:62
msgid "and the sub-tour elimination constraints:"
msgstr "및 부분 순환로 제거 제한 조건:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:64
msgid "u_i - u_j + Q x_{ij} \\leq Q-q_j, \\, \\forall i \\sim j, \\,i ,j \\neq 0, \\quad q_i \\leq u_i \\leq Q,\\, \\forall i, i \\neq 0."
msgstr "u_i - u_j + Q x_{ij} \\leq Q-q_j, \\, \\forall i \\sim j, \\,i ,j \\neq 0, \\quad q_i \\leq u_i \\leq Q,\\, \\forall i, i \\neq 0."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:69
msgid "In particular,"
msgstr "특히,"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:71
msgid "The cost function is linear in the cost functions and weighs the different arches based on a positive weight :math:`w_{ij}>0` (typically the distance between node :math:`i` and node :math:`j`);"
msgstr "비용 함수는 비용 함수들에 대해 선형이며, 그 가중치들은 양수 가중치 :math:`w_{ij}>0` (보통 두 노드 :math:`i`와 :math:`j` 사이의 거리) 에 따라 주어진다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:72
msgid "The first set of constraints enforce that from and to every client, only one link is allowed;"
msgstr "첫 번째 제약조건은, 모든 클라이언트에서 나오는 링크와 오는 링크를 하나만 허용한다;"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:73
msgid "The second set of constraints enforce that from and to the depot, exactly :math:`K` links are allowed;"
msgstr "두 번째 제약조건은, 저장소들에서 나오는 링크와 오는 링크들은 정확히 :math:`K`개 허용한다;"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:74
msgid "The third set of constraints enforce the sub-tour elimination constraints and are bounds on :math:`u_i`, with :math:`Q>q_j>0`, and :math:`Q,q_i \\in \\mathbb{R}`."
msgstr "세 번째 제약조건은 부분 순환로 제거 조건으로, :math:`u_i`에 대한 제한을 주며, 여기서 :math:`Q>q_j>0`, :math:`Q,q_i \\in \\mathbb{R}` 이다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:77
msgid "Classical solution"
msgstr "고전적인 솔루션"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:79
msgid "We can solve the VRP classically, e.g., by using CPLEX. CPLEX uses a branch-and-bound-and-cut method to find an approximate solution of the VRP, which, in this formulation, is a mixed-integer linear program (MILP). For the sake of notation, we pack the decision variables in one vector as"
msgstr "예를 들어 CPLEX를 사용하여 VRP를 고전적으로 해결할 수 있다. CPLEX는branch-and-bound-and-cut 방법을 사용하여 VRP의 대략적인 솔루션을 찾는다. VRP는 이 공식에서 mixed-integer linear program (MILP) 이다. 표기법을 위해 다음과 같이 하나의 벡터로 결정 변수를 묶는다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:81
msgid "{\\bf z} = [x_{01},x_{02},\\ldots,x_{10}, x_{12},\\ldots,x_{n(n-1)}]^T,"
msgstr "{\\bf z} = [x_{01}, x_{02}, \\ldot, x_{10}, x_{12}, \\ldots,x_ {n (n-1)}] ^ T,"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:86
msgid "wherein :math:`{\\bf z} \\in \\{0,1\\}^N`, with :math:`N = n (n+1)`. So the dimension of the problem scales quadratically with the number of nodes. Let us denote the optimal solution by :math:`{\\bf z}^*`, and the associated optimal cost :math:`f^*`."
msgstr ":math:`{\\bf z} \\in \\{0,1\\}^N` 에서 :math:`N = n (n+1)` 로 한다. 따라서 문제의 치수는 노드 수에 따라 4차적으로 확장된다. :math:`{\\bf z}^*` 에 ㄷ의한 최적의 솔루션과 관련된 최적 비용 :math:`f^*` 를 나타내자."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:89
msgid "Quantum solution"
msgstr "양자 솔루션"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:91
msgid "Here, we demonstrate an approach that combines classical and quantum computing steps, following the quantum approximate optimization approach of Farhi, Goldstone, and Gutmann (2014). In particular, we use the variational quantum eigensolver (VQE). We stress that given the use of limited depth of the quantum circuits employed (variational forms), it is hard to discuss the speed-up of the algorithm, as the solution obtained is heuristic in nature. At the same time, due to the nature and importance of the target problems, it is worth investigating heuristic approaches, which may be worthwhile for some problem classes."
msgstr "여기, 우리는 파리[Farhi], 골드스톤[Goldstone] 및 구트만[Gutman] (2014) 의 양자 근사 최적화 접근법에 이어 고전적 및 양자 컴퓨팅 단계를 결합한 접근 방식을 보여준다. 특히 우리는 variational quantum eigensolve (VQE) 를 사용한다. 우리는 채택된 양자 회로의 제한된 깊이(변수 형태) 를 사용할 경우, 얻은 솔루션이 본질적으로 발견적이기 때문에 알고리즘의 속도 항상을 논하기 어렵다는 것을 강조한다. 동시에, 대상 문제에 특성과 중요성 때문에, 일부 문제 클래스에서 가치가 있을 수 있는 발견적 접근 방식을 조사할 가치가 있다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:94
msgid "The algorithm can be summarized as follows:"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:96
msgid "Preparation steps:"
msgstr "준비 단계:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:98
msgid "Transform the combinatorial problem into a binary polynomial optimization problem with equality constraints only;"
msgstr "조합 문제를 동등 제한 조건에서만 이진 다항식 최적화 문제로 변환하자;"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:99
msgid "Map the resulting problem into an Ising Hamiltonian (:math:`H`) for variables :math:`{\\bf z}` and basis :math:`Z`, via penalty methods if necessary;"
msgstr "변환된 문제를 변수 :math:`{\\bf z}` 및 기저 :math:`Z` 에 대한 이징 해밀토니안 (:math:`H`) 으로 맵핑하고, 필요한 경우 페널티 방법을 사용한다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:100
msgid "Choose the depth of the quantum circuit :math:`m`. Note that the depth can be modified adaptively."
msgstr "양자 회로 :math:`m` 의 깊이(depth)를 선택하라. 참고로 깊이는 조정될 수 있다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:101
msgid "Choose a set of controls :math:`\\theta` and make a trial function :math:`\\big|\\psi(\\boldsymbol\\theta)\\rangle`, built using a quantum circuit made of C-Phase gates and single-qubit Y rotations, parameterized by the components of :math:`\\boldsymbol\\theta`."
msgstr "제어 :math:`\\theta` 를 선택하고, :math:`\\boldsymbol\\theta` 의 성분들에 의해 파라미터화된, C-위상 게이트와 단일 큐비트 Y 회전으로 만들어진 양자 회로를 사용하여 시험 함수 :math:`|\\psi(\\boldsymbol\\theta)\\rangle` 을 만든다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:103
msgid "Algorithm steps:"
msgstr "알고리즘 단계:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:105
msgid "Evaluate :math:`C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)\\big|H\\big|\\psi(\\boldsymbol\\theta)\\rangle` by sampling the outcome of the circuit in the Z-basis and adding the expectation values of the individual Ising terms together. In general, different control points around :math:`\\boldsymbol\\theta` have to be estimated, depending on the classical optimizer chosen."
msgstr "회로 결과를 Z 단위로 샘플링하고 개별 이징(Ising) 용어의 기대값을 함께 추가하여 :math:`C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)\\big|H\\big|\\psi(\\boldsymbol\\theta)\\rangle` 평가한다. 일반적으로 :math:`\\boldsymbol\\theta` 주변의 다른 제어점은 선택한 고전적인 최적화 도구에 따라 추정되어야 한다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:106
msgid "Use a classical optimizer to choose a new set of controls."
msgstr "고전적 optimizer를 사용하여 새 제어 집합을 선택한다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:107
msgid "Continue until :math:`C(\\boldsymbol\\theta)` reaches a minimum, close enough to the solution :math:`\\boldsymbol\\theta^*`."
msgstr ":math:`C(\\boldsymbol\\theta)` 가 솔루션 :math:`\\boldsymbol\\theta^*` 에 충분히 가까워져 최소값에 도달할 때까지 계속한다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:108
msgid "Use the last :math:`\\boldsymbol\\theta` to generate a final set of samples from the distribution :math:`\\Big|\\langle z_i\\big|\\psi(\\boldsymbol\\theta)\\rangle\\Big|^2\\;\\forall i` to obtain the answer."
msgstr "마지막 :math:`\\boldsymbol\\theta` 를 사용하여 :math:`\\Big|\\langle z_i\\big|\\psi(\\boldsymbol\\theta)\\rangle\\Big|^2\\;\\forall i` 분포에서 최종 표본 집합을 생성하여 답을 얻는다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:110
msgid "There are many parameters throughout, notably the choice of the trial wavefunction. Below, we consider:"
msgstr "전반에 걸쳐 많은 매개 변수가 존재하며, 특히 시행 파동 함수의 선택은 더욱 두드러진다. 아래에서는 다음과 같이 고려한다:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:112
msgid "\\big|\\psi(\\theta)\\rangle = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m \\big|+\\rangle"
msgstr "\\big|\\psi(\\theta)\\rangle = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m \\big|+\\rangle"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:117
msgid "where :math:`U_\\mathrm{entangler}` is a collection of C-Phase gates (fully-entangling gates), and :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^N Y(\\theta_{i})`, where :math:`N` is the number of qubits and :math:`m` is the depth of the quantum circuit."
msgstr "여기서 :math:`U_\\mathrm{entangler}` 는 C-위상 게이트 (완전히 얽힌 게이트)의 집합이고, :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^N Y(\\theta_{i})` 는 여기서 :math:`N` 큐비트 수, :math:`m` 양자 회로의 깊이(depth) 이다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:120
msgid "Construct the Ising Hamiltonian"
msgstr "이징 해밀토니안 (Ising Hamiltonian) 구성"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:122
msgid "From :math:`VRP` one can construct a binary polynomial optimization with equality constraints only by considering cases in which :math:`K=n-1`. In these cases the sub-tour elimination constraints are not necessary and the problem is only on the variable :math:`{\\bf z}`. In particular, we can write an augmented Lagrangian as"
msgstr ":math:`VRP` 에서 :math:`K=n-1` 의 경우를 고려해야만 동등 제약 조건을 가진 이진 다항식 최적화를 구성할 수 있다. 이러한 경우 부분 순환로 제거 제약 조건은 필요하지 않으며 문제는 변수 :math:`{\\bf z}` 에 있다. 특히, 우리는 다음과 같이 증강된 라그랑지안(Lagrangian)를 쓸 수 있다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:124
msgid "(IH) \\quad H = \\sum_{i \\sim j} w_{ij} x_{ij}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big(\\sum_{j \\in \\delta(i)^+} x_{ij} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big(\\sum_{j \\in \\delta(i)^-} x_{ji} - 1\\Big)^2 +A \\Big(\\sum_{i \\in \\delta(0)^+} x_{0i} - K\\Big)^2 + A\\Big(\\sum_{j \\in \\delta(0)^+} x_{j0} - K\\Big)^2"
msgstr "(IH) \\quad H = \\sum_{i \\sim j} w_{ij} x_{ij}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big(\\sum_{j \\in \\delta(i)^+} x_{ij} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big(\\sum_{j \\in \\delta(i)^-} x_{ji} - 1\\Big)^2 +A \\Big(\\sum_{i \\in \\delta(0)^+} x_{0i} - K\\Big)^2 + A\\Big(\\sum_{j \\in \\delta(0)^+} x_{j0} - K\\Big)^2"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:129
msgid "where :math:`A` is a big enough parameter."
msgstr "여기서 :math:`A` 는 충분히 큰 매개변수이다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:132
msgid "From Hamiltonian to QP formulation"
msgstr "해밀토니안으로부터 QP 수식화"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:134
msgid "In the vector :math:`{\\bf z}`, and for a complete graph (:math:`\\delta(i)^+ = \\delta(i)^- = \\{0,1,\\dots,i-1,i+1,\\dots,n\\}`), :math:`H` can be written as follows."
msgstr "벡터 :math:`{\\bf z}` 에서 완성한 그래프(:math:`\\delta(i)^+ = \\delta(i)^- = \\{0,1,\\dots,i-1,i+1,\\dots,n\\}`) , :math:`H` 를 다음과 같이 작성할 수 있습니다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:136
msgid "\\min_{{\\bf z}\\in \\{0,1\\}^{n(n+1)}} {\\bf w}^T {\\bf z}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big({\\bf e}_i \\otimes {\\bf 1}_n^T {\\bf z} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big({\\bf v}_i^T {\\bf z} - 1\\Big)^2 + A \\Big(({\\bf e}_0 \\otimes {\\bf 1}_n)^T{\\bf z} - K\\Big)^2 + A\\Big({\\bf v}_0^T{\\bf z} - K\\Big)^2."
msgstr "\\min_{{\\bf z}\\in \\{0,1\\}^{n(n+1)}} {\\bf w}^T {\\bf z}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big({\\bf e}_i \\otimes {\\bf 1}_n^T {\\bf z} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big({\\bf v}_i^T {\\bf z} - 1\\Big)^2 + A \\Big(({\\bf e}_0 \\otimes {\\bf 1}_n)^T{\\bf z} - K\\Big)^2 + A\\Big({\\bf v}_0^T{\\bf z} - K\\Big)^2."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:141
msgid "That is:"
msgstr "즉,"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:143
msgid "\\min_{\\bf z\\in \\{0,1\\}^{n(n+1)}} \\bf z^T {\\bf Q} \\bf z + {\\bf g}^T \\bf z + c,"
msgstr "\\min_ {\\bf z\\in\\{0 ,1\\} ^ {n (n+1)}} \\bf z ^ T {\\bf Q} \\bf z+{\\bf g} ^ T \\bf z+c,"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:148
msgid "Where: first term:"
msgstr "여기서: 첫째 항:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:150
msgid "{\\bf Q} = A \\sum_{i \\in \\{0,1,\\dots,n\\}}  \\Big[({\\bf e}_i \\otimes {\\bf 1}_n)({\\bf e}_i \\otimes {\\bf 1}_n)^T + {\\bf v}_i{\\bf v}_i^T \\Big]"
msgstr "{\\bf Q} = A \\sum_{i \\in \\{0,1,\\dots,n\\}}  \\Big[({\\bf e}_i \\otimes {\\bf 1}_n)({\\bf e}_i \\otimes {\\bf 1}_n)^T + {\\bf v}_i{\\bf v}_i^T \\Big]"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:155
msgid "Second term:"
msgstr "둘째 항:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:157
msgid "{\\bf g} = {\\bf w} -2 A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big[({\\bf e}_i \\otimes {\\bf 1}_n) + {\\bf v}_i \\Big] -2 A K \\Big[({\\bf e}_0 \\otimes {\\bf 1}_n) + {\\bf v}_0 \\Big]"
msgstr "{\\bf g} = {\\bf w} -2 A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big[({\\bf e}_i \\otimes {\\bf 1}_n) + {\\bf v}_i \\Big] -2 A K \\Big[({\\bf e}_0 \\otimes {\\bf 1}_n) + {\\bf v}_0 \\Big]"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:162
msgid "Third term:"
msgstr "셋째 항:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:164
msgid "c = 2An +2AK^2."
msgstr "c = 2An +2AK^2."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:169
msgid "The QP formulation of the Ising Hamiltonian is ready for the use of VQE. We will solve the QP using optimization stack available in Qiskit."
msgstr "QP 수식화된 Ising 해밀토니안은 VQE를 사용할 수 있다. Qiskit에서 제공하는 최적화 stack을 사용하여 QP를 풀어보자."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:172
msgid "References"
msgstr "참조"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:174
msgid "[1] E. Farhi, J. Goldstone, S. Gutmann e-print arXiv 1411.4028, 2014"
msgstr "[1] E. Farhi, J. Goldstone, S. Gutmann e-print arXiv 1411.4028, 2014"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:176
msgid "[2] `Max-Cut and Traveling Salesman Problem <./06_examples_max_cut_and_tsp.ipynb>`__"
msgstr "[2] `Max-Cut and Traveling Salesman Problem <./06_examples_max_cut_and_tsp.ipynb>`__"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:178
msgid "[3] C. E. Miller, E. W. Tucker, and R. A. Zemlin (1960). “Integer Programming Formulations and Travelling Salesman Problems”. J. ACM. 7: 326–329. doi:10.1145/321043.321046."
msgstr "[3] C. E. Miller, E. W. Tucker, and R. A. Zemlin (1960). “Integer Programming Formulations and Travelling Salesman Problems”. J. ACM. 7: 326–329. doi:10.1145/321043.321046."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:180
msgid "[4] D. L. Applegate, R. M. Bixby, V. Chvátal, and W. J. Cook (2006). The Traveling Salesman Problem. Princeton University Press, ISBN 978-0-691-12993-8."
msgstr "[4] D. L. Applegate, R. M. Bixby, V. Chvátal, and W. J. Cook (2006). The Traveling Salesman Problem. Princeton University Press, ISBN 978-0-691-12993-8."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:192
msgid "Initialization"
msgstr "초기화"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:194
msgid "First of all we load all the packages that we need. CPLEX is required for the classical computations. You can install it by ``pip install 'qiskit-optimization[cplex]'``."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:229
msgid "We then initialize the variables"
msgstr "그런 다음 변수를 초기화한다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:252
msgid "We define an initializer class that randomly places the nodes in a 2-D plane and computes the distance between them."
msgstr "노드를 2-D 평면에 무작위로 배치하고 노드 사이의 거리를 계산하는 초기화 클래스를 정의한다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:307
msgid "Classical solution using IBM ILOG CPLEX"
msgstr "IBM ILOG CPLEX를 사용한 고전적 솔루션"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:309
msgid "For a classical solution, we use IBM ILOG CPLEX. CPLEX is able to find the exact solution of this problem. We first define a ClassicalOptimizer class that encodes the problem in a way that CPLEX can solve, and then instantiate the class and solve it."
msgstr "고전적 솔루션의 경우 IBM ILOG CPLEX를 사용한다. CPLEX는 이 문제에 대한 정확한 해결책을 찾을 수 있다. 먼저 문제를 CPLEX가 해결할 수 있는 방식으로 인코딩하는 ClassicalOptimizer 클래스를 정의한 다음 클래스를 인스턴스화하고 해결한다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:550
msgid "If you have CPLEX, the solution shows the depot with a star and the selected routes for the vehicles with arrows."
msgstr "CPLEX가 있는 경우 솔루션에는 별이 있는 저장소(depot) 와 화살표가 있는 차량에 대해 선택한 경로가 표시된다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:562
msgid "Quantum solution from the ground up"
msgstr "양자 솔루션 문제 구성"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:564
msgid "For the quantum solution, we use Qiskit."
msgstr "양자 솔루션의 경우 Qiskit을 사용한다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:566
msgid "First, we derive the solution from the ground up, using a class QuantumOptimizer that encodes the quantum approach to solve the problem and then we instantiate it and solve it. We define the following methods inside the class:"
msgstr "먼저 문제를 해결하기 위해 양자적 접근 방식을 인코딩하는 QuantumOptimizer 클래스를 사용하여 처음부터 솔루션을 도출한 다음 이를 인스턴스화하고 해결한다. 클래스 내에서 다음 메서드를 정의한다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:568
msgid "``binary_representation`` : encodes the problem :math:`(M)` into a QP terms (that’s basically linear algebra);"
msgstr "``binary_representation``: 주어진 문제 :math:`(M)` 을 QP 항들로 (기본적으로 선형 대수학) 인코딩 한다;"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:569
msgid "``construct_problem`` : constructs a QUBO optimization problem as an instance of ``QuadraticProgram``;"
msgstr "``construct_problem`` : ``QuadraticProgram`` 의 인스턴스로 QUBO 최적화 문제를 구성한다;"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:570
msgid "``solve_problem``: solves the problem :math:`(M)` constructed at the previous step via ``MinimunEigenOptimizer`` by using ``SamplingVQE`` with default parameters;"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:682
msgid "Step 1"
msgstr "단계 1"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:684
msgid "Instantiate the quantum optimizer class with parameters:"
msgstr "quantum optimizer 클래스를 다음 변수들로 인스턴스화한다:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:686
msgid "the instance;"
msgstr "인스턴스;"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:687
msgid "the number of nodes and vehicles ``n`` and ``K``;"
msgstr "노드와 차량의 수 ``n``과 ``K``"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:710
msgid "Step 2"
msgstr "단계 2"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:712
msgid "Encode the problem as a binary formulation (IH-QP)."
msgstr "문제를 이원 공식 (IH-QP) 으로 인코딩한다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:714
msgid "Sanity check: make sure that the binary formulation in the quantum optimizer is correct (i.e., yields the same cost given the same solution)."
msgstr "타당성 검사(Sanity check): 양자 최적화 프로그램의 이진 공식화가 정확한지 확인한다 (즉, 동일한 솔루션에서 동일한 비용을 산출함)."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:778
msgid "Step 3"
msgstr "단계 3"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:780
msgid "Encode the problem as an instance of ``QuadraticProgram``."
msgstr "이 문제를 ``QuadraticProgram`` 의 인스턴스로 인코딩한다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:802
msgid "Step 4"
msgstr "단계 4"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:804
msgid "Solve the problem via ``MinimumEigenOptimizer`` from the optimization stack. N.B. Depending on the number of qubits, the state-vector simulation can take a while; for example with 12 qubits, it takes more than 12 hours. Logging is useful to see what the program is doing."
msgstr "최적화 스택의 ``MinimumEigenOptimizer`` 를 통해 문제를 해결한다. 중요. 큐비트 수에 따라 상태-백터 시뮬레이션에 시간이 걸릴 수 있다. 예를 들어, 12 큐비트에서는 12시간 이상 걸린다. 로그인하면 프로그램이 수행하는 작업을 확인하는데 유용하다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:852
msgid "Step 5"
msgstr "단계 5"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:854
msgid "Visualize the solution"
msgstr "솔루션 시각화"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:906
msgid "The plots present the depot with a star and the selected routes for the vehicles with arrows. Note that in this particular case, we can find the optimal solution of the QP formulation, which happens to coincide with the optimal solution of the ILP."
msgstr "도표에는 별과 함께 저장소가 표시되고 화살표가 있는 차량에 대해 선택된 경로가 표시된다. 이 특별한 경우, 우리는 ILP의 최적 솔루션과 일치하는 QP 공식의 최적 솔루션을 찾을 수 있다."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:908
msgid "Keep in mind that VQE is an heuristic working on the QP formulation of the Ising Hamiltonian, though. For suitable choices of A, local optima of the QP formulation will be feasible solutions to the ILP. While for some small instances, as above, we can find optimal solutions of the QP formulation which coincide with optima of the ILP, finding optimal solutions of the ILP is harder than finding local optima of the QP formulation, in general, which in turn is harder than finding feasible solutions of the ILP. Even within the VQE, one may provide stronger guarantees, for specific variational forms (trial wave functions)."
msgstr "VQE는 Ising Hamiltonian의 QP 제형에 대한 경험적인 작업이라는 점을 기억하라. A의 적합한 선택을 위해, QP 제형의 국소 최적은 ILP에 대해 실행 가능한 용액일 것이다. 일부 작은 경우에 있어서, 상기와 같이, 본 발명자들은 ILP의 최적 용액과 일치하는 QP 제형의 최적의 용액을 찾을 수 있고, ILP의 최적의 용액을 발견하는 것은 일반적으로, 일반적으로, ILP의 실행 가능한 용액을 발견하는 것보다 더 어렵다는 것이다. VQE내에서도, 특정 다양한 형태 (시험판 웨이브 기능) 에 대해 더 강한 보증을 제공할 수 있다."

