msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-06 22:00+0000\n"
"PO-Revision-Date: 2023-02-06 22:29\n"
"Last-Translator: \n"
"Language: ko\n"
"Language-Team: Korean\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/09_application_classes.po\n"
"X-Crowdin-File-ID: 9658\n"

#: ../../tutorials/09_application_classes.ipynb:9
msgid "This page was generated from `docs/tutorials/09_application_classes.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/09_application_classes.ipynb`__ 에서 생성되었다."

#: ../../tutorials/09_application_classes.ipynb:9
msgid "Application Classes for Optimization Problems"
msgstr "최적화 문제를 위한 응용 클래스"

#: ../../tutorials/09_application_classes.ipynb:21
msgid "Introduction"
msgstr "소개"

#: ../../tutorials/09_application_classes.ipynb:23
msgid "We introduce application classes for the following optimization problems so that users can easily try various optimization problems on quantum computers."
msgstr "양자 컴퓨터에서 다양한 최적화 문제를 쉽게 시도할 수 있도록 다음과 같은 최적화 문제에 대한 응용 클래스를 소개한다."

#: ../../tutorials/09_application_classes.ipynb:25
msgid "Exact cover problem"
msgstr "정확한 커버 문제"

#: ../../tutorials/09_application_classes.ipynb:27
msgid "Given a collection of subsets of items, find a subcollection such that each item is covered exactly once."
msgstr "항목의 부분 집합 collection이 지정된 경우 각 항목이 정확히 한 번만 포함되도록 subcollection을 찾아라."

#: ../../tutorials/09_application_classes.ipynb:29
#: ../../tutorials/09_application_classes.ipynb:422
msgid "Knapsack problem"
msgstr "배낭 문제"

#: ../../tutorials/09_application_classes.ipynb:31
msgid "Given a set of items, find a subset of items such that the total weight is within the capacity and the total value is maximized."
msgstr "항목 집합에서 총 중량이 용량 내에 있고 총 값이 최대화되도록 항목의 부분 집합을 찾아라."

#: ../../tutorials/09_application_classes.ipynb:33
msgid "Number partition problem"
msgstr "수 분할 문제"

#: ../../tutorials/09_application_classes.ipynb:35
msgid "Given a multiset of positive integers, find a partition of the multiset into two subsets such that the sums of the subsets are equal."
msgstr "양의 정수 집합이 여러 개인 경우, 부분 집합의 합이 같도록 다중 집합의 분할을 두 부분 집합으로 찾아라."

#: ../../tutorials/09_application_classes.ipynb:37
msgid "Set packing problem"
msgstr "집합 패킹 문제"

#: ../../tutorials/09_application_classes.ipynb:39
msgid "Given a collection of subsets of items, find a subcollection such that all subsets of the subcollection are pairwise disjoint and the number of items in the subcollection is maximized."
msgstr "항목의 부분 집합 collection이 주어지면 부분 subcollection의 모든 부분 집합이 쌍으로 분리되고 subcollection의 항목 수가 최대화되도록 부분 집합을 찾아라."

#: ../../tutorials/09_application_classes.ipynb:41
msgid "Graph problems"
msgstr "그래프 문제"

#: ../../tutorials/09_application_classes.ipynb:43
msgid "Clique problem"
msgstr "Clique 문제"

#: ../../tutorials/09_application_classes.ipynb:45
msgid "Given an undirected graph, find a subset of nodes with a specified number or the maximum number such that the induced subgraph is complete."
msgstr "무방향 그래프가 제공된 경우, 유도된 하위 그래프가 완성되도록 지정된 숫자 또는 최대 수의 노드 부분 집합을 찾아라."

#: ../../tutorials/09_application_classes.ipynb:47
msgid "Graph partition problem"
msgstr "그래프 분할 문제"

#: ../../tutorials/09_application_classes.ipynb:49
msgid "Given an undirected graph, find a partition into two components whose sizes are equal such that the total capacity of the edges between the two components is minimized."
msgstr "무방향 그래프가 주어진 경우 두 구성 요소 사이의 가장자리 총 용량이 최소화되도록 크기가 동일한 두 구성 요소로 분할을 찾아라."

#: ../../tutorials/09_application_classes.ipynb:51
msgid "Max-cut problem"
msgstr "최대 절단 문제"

#: ../../tutorials/09_application_classes.ipynb:53
msgid "Given an undirected graph, find a partition of nodes into two subsets such that the total weight of the edges between the two subsets is maximized."
msgstr "무방향 그래프가 주어진 경우 두 부분 집합 사이의 가장자리의 총 가중치가 최대화될 수 있도록 노드의 두 부분 집합 분할을 찾아라."

#: ../../tutorials/09_application_classes.ipynb:55
msgid "Stable set problem"
msgstr "안정장치 문제"

#: ../../tutorials/09_application_classes.ipynb:57
msgid "Given an undirected graph, find a subset of nodes such that no edge connects the nodes in the subset and the number of nodes is maximized."
msgstr "무방향 그래프가 주어진 경우, 가장자리가 부분 집합의 노드를 연결하지 않고 노드 수가 최대화되도록 노드의 부분 집합을 찾아라."

#: ../../tutorials/09_application_classes.ipynb:59
msgid "Traveling salesman problem"
msgstr "여행하는 외판원 문제"

#: ../../tutorials/09_application_classes.ipynb:61
msgid "Given a graph, find a route with the minimum distance such that the route visits each city exactly once."
msgstr "그래프가 주어진 경우 경로가 각 도시를 정확히 한 번 방문할 수 있도록 최소 거리를 가진 경로를 찾아라."

#: ../../tutorials/09_application_classes.ipynb:63
msgid "Vehicle routing problem"
msgstr "차량 경로 결정 문제"

#: ../../tutorials/09_application_classes.ipynb:65
msgid "Given a graph, a depot node, and the number of vehicles (routes), find a set of routes such that each node is covered exactly once except the depot and the total distance of the routes is minimized."
msgstr "그래프, depot 노드 및 차량 (경로) 수가 주어진 경우, 각 노드가 depot을 제외하고 정확히 한 번 커버되고 경로의 총 거리가 최소화되도록 경로 집합을 찾아라."

#: ../../tutorials/09_application_classes.ipynb:67
#: ../../tutorials/09_application_classes.ipynb:121
msgid "Vertex cover problem"
msgstr "정점 커버 문제"

#: ../../tutorials/09_application_classes.ipynb:69
msgid "Given an undirected graph, find a subset of nodes with the minimum size such that each edge has at least one endpoint in the subsets."
msgstr "무방향 그래프가 주어진 경우 각 가장자리에 부분 집합에 끝점이 하나 이상 있도록 최소 크기의 노드 부분 집합을 찾아라."

#: ../../tutorials/09_application_classes.ipynb:71
msgid "The application classes for graph problems (``GraphOptimizationApplication``) provide a functionality to draw graphs of an instance and a result. Note that you need to install ``matplotlib`` beforehand to utilize the functionality."
msgstr "그래프 문제에 대한 응용 클래스 (``GraphOptimizationApplication``) 는 인스턴스 및 결과의 그래프를 그리는 기능을 제공한다. 이 기능을 사용하려면 ``matplotlib`` 를 미리 설치해야 한다."

#: ../../tutorials/09_application_classes.ipynb:82
msgid "We introduce examples of the vertex cover problem and the knapsack problem in this page."
msgstr "이 페이지에서 정점 커버 문제와 배낭 문제의 예를 소개한다."

#: ../../tutorials/09_application_classes.ipynb:84
msgid "Examples of the max-cut problem and the traveling salesman problem are available in `Max-Cut and Traveling Salesman Problem <06_examples_max_cut_and_tsp.ipynb>`__."
msgstr "최대 절단 문제와 여행하는 외판원 문제의 예는 `Max-Cut and Traveling Salesman Problem <06_examples_max_cut_and_tsp.ipynb>`__ 에서 확인할 수 있다."

#: ../../tutorials/09_application_classes.ipynb:95
msgid "We first import packages necessary for application classes."
msgstr "응용 클래스에 필요한 패키지를 먼저 가져온담."

#: ../../tutorials/09_application_classes.ipynb:123
msgid "We introduce the application class for the vertex cover problem as an example of graph problems. Given an undirected graph, the vertex cover problem asks us to find a subset of nodes with the minimum size such that all edges are covered by any node selected."
msgstr "그래프 문제의 예로 정점 커버 문제에 대한 응용 클래스를 소개한다. 정점 커버 문제는 선택된 모든 노드에서 모든 가장자리를 커버 할 수 있는 최소 크기의 노드의 부분 집합을 찾도록 요구한다."

#: ../../tutorials/09_application_classes.ipynb:125
msgid "We import the application class ``VertexCover`` for the vertex cover problem and ``networkx`` to generate a random graph."
msgstr "정점 커버 문제에 대한 응용 클래스 ``VertexCover`` 를 가져오고 무작위 그래프를 생성하기 위해 ``networkx`` 를 가져온다."

#: ../../tutorials/09_application_classes.ipynb:180
msgid "``VertexCover`` takes a graph as an instance and ``to_quadratic_program`` generates a corresponding ``QuadraticProgram`` of the instance of the vertex cover problem."
msgstr "``VertexCover`` 는 그래프를 인스턴스로 사용하고 ``to_quadratic_program`` 는 정점 커버 문제의 인스턴스에 해당하는 ``QuadraticProgram`` 를 생성한다."

#: ../../tutorials/09_application_classes.ipynb:283
msgid "You can solve the problem as follows. ``NumPyMinimumEigensolver`` finds the minimum eigen vector. You can also apply QAOA. Note that the solution by QAOA is not always optimal."
msgstr "다음과 같이 문제를 해결할 수 있다. ``NumPyMinimumEigensolver`` 는 최소 고유 벡터를 찾는다. QAOA또한 적용될 수 있다. QAOA의 솔루션이 항상 최적인 것은 아니니 주의하자."

#: ../../tutorials/09_application_classes.ipynb:424
msgid "The knapsack problem asks us to find a combination of items such that the total weight is within the capacity of the knapsack and maximize the total value of the items. The following examples solve an instance of the knapsack problem with 5 items by Numpy eigensolver and QAOA."
msgstr "배낭문제는 총중량이 배낭의 용량 이내가 되도록 조합된 항목을 찾아서 항목의 총가치를 최대화하도록 요구한다. 다음 예제는 Numpyeigensolver와 QAOA로 5개 항목으로 구성된 배낭 문제를 해결한다."

#: ../../tutorials/09_application_classes.ipynb:622
msgid "How to check the Hamiltonian"
msgstr "Hamiltonian 점검 방법"

#: ../../tutorials/09_application_classes.ipynb:624
msgid "If you want to check the actual Hamiltonian generated from your problem instance, you need to apply a converter as follows."
msgstr "문제 인스턴스에서 생성된 실제 Hamiltonian을 확인하려면 다음과 같이 변환기를 적용해야 한다."

