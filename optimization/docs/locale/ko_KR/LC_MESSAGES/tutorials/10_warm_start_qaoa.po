msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-04 19:50+0000\n"
"PO-Revision-Date: 2023-08-14 19:19\n"
"Last-Translator: \n"
"Language: ko\n"
"Language-Team: Korean\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /main/optimization/docs/locale/en/LC_MESSAGES/tutorials/10_warm_start_qaoa.po\n"
"X-Crowdin-File-ID: 9660\n"

#: ../../tutorials/10_warm_start_qaoa.ipynb:9
msgid "This page was generated from `docs/tutorials/10_warm_start_qaoa.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/10_warm_start_qaoa.ipynb`__ 에서 생성되었다."

#: ../../tutorials/10_warm_start_qaoa.ipynb:9
msgid "Warm-starting quantum optimization"
msgstr "Warm-starting 양자 최적화"

#: ../../tutorials/10_warm_start_qaoa.ipynb:12
msgid "Introduction"
msgstr "소개"

#: ../../tutorials/10_warm_start_qaoa.ipynb:14
msgid "Optimization problems with integer variables or constraints are often hard to solve. For example, the Quadratic Unconstrained Binary Optimization (QUBO) problem, i.e."
msgstr "정수 변수나 제약 조건의 최적화 문제는 해결하기 어려운 경우가 많다. 예를 들어, Quadratic Unconstrained Binary Optimization (QUBO) 문제가 있다."

#: ../../tutorials/10_warm_start_qaoa.ipynb:16
msgid ":nbsphinx-math:`\\begin{align} \\min_{x\\in\\{0,1\\}^n}x^T\\Sigma x + \\mu^Tx, \\end{align}`"
msgstr ":nbsphinx-math:`\\begin{align} \\min_{x\\in\\{0,1\\}^n}x^T\\Sigma x + \\mu^Tx, \\end{align}`"

#: ../../tutorials/10_warm_start_qaoa.ipynb:20
msgid "is NP-Hard. Here, :math:`\\Sigma` is an :math:`n\\times n` matrix and :math:`x` is a vector of :math:`n` binary variables. Note that we could have added the linear term :math:`\\mu` to the diagonal as :math:`x_i^2=x_i` for :math:`x_i\\in\\{0, 1\\}`. While QUBOs are hard to solve there exists many ways to relax them to problems that are easier to solve. For example, if :math:`\\Sigma` is semi-definite positive the QUBO can be relaxed and results in a convex Quadratic Program"
msgstr "이는 NP-Hard이다.여기서 :math:`\\Sigma` 는 :math:`n\\times n` 매트릭스이고 :math:`x` 는 :math:`n` 이진 변수의 벡터이다. 참고로 일차항 :math:`\\mu` 를 대각선에 :math:`x_i\\in\\{0, 1\\}` 의 :math:`x_i^2=x_i` 로 추가할 수 있었다. QUBO는 해결하기 어렵지만 해결하기 쉬운 문제로 완화시킬 수 있는 많은 방법이 있다. 예를 들어, :math:`\\Sigma` 가 반확정 양극이면 QUBO가 완화될 수 있고 convex Quadratic Program이 된다."

#: ../../tutorials/10_warm_start_qaoa.ipynb:22
msgid ":nbsphinx-math:`\\begin{align} \\min_{x\\in[0,1]^n}x^T\\Sigma x, \\end{align}`"
msgstr ":nbsphinx-math:`\\begin{align} \\min_{x\\in[0,1]^n}x^T\\Sigma x, \\end{align}`"

#: ../../tutorials/10_warm_start_qaoa.ipynb:26
msgid "which becomes easy to solve as :math:`x` now represents :math:`n` continuous variables bound to the range :math:`[0, 1]`. Such relaxations can be leveraged to warm-start quantum optimization algorithms as shown in [1]."
msgstr "이는 :math:`x` 가 :math:`[0, 1]` 범위에 바인딩된 :math:`n` 연속 변수를 나타내므로 쉽게 해결할 수 있다. 이러한 완화는 [1]에 나온 것처럼 양자 최적화 알고리즘을 warm-start하는 데 활용할 수 있다."

#: ../../tutorials/10_warm_start_qaoa.ipynb:29
msgid "References"
msgstr "참조"

#: ../../tutorials/10_warm_start_qaoa.ipynb:31
msgid "[1] `D. J. Egger, J Marecek, S. Woerner, Warm-starting quantum optimization, arXiv:2009.10095 <http://arxiv.org/abs/2009.10095>`__"
msgstr "[1] `D. J. Egger, J Marecek, S. Woerner, Warm-starting quantum optimization, arXiv:2009.10095 <http://arxiv.org/abs/2009.10095>`__"

#: ../../tutorials/10_warm_start_qaoa.ipynb:68
msgid "Preliminaries: relaxing QUBOs"
msgstr "사전 준비: QUBO 완화(relaxing)"

#: ../../tutorials/10_warm_start_qaoa.ipynb:70
msgid "First, we show how to relax a QUBO built with a semi-definite positive matrix to obtain an easy-to-solve QP."
msgstr "먼저, 반확정 양극 매트릭스로 구축된 QUBO를 완화해 쉽게 해결하여 QP를 얻는 방법을 보여 준다."

#: ../../tutorials/10_warm_start_qaoa.ipynb:115
msgid "For this example, we use a positive semi-definite matrix :math:`\\Sigma` and a linear term :math:`\\mu` as defined below."
msgstr "이 예에서는 아래에 정의된 양극의 반확정 행렬 :math:`\\Sigma` 와 일차항 :math:`\\mu` 를 사용한다."

#: ../../tutorials/10_warm_start_qaoa.ipynb:146
msgid "Using DOCPLEX we build a model with binary variables."
msgstr "DOCPLEX를 사용하여 이진 변수를 사용한 모델을 구축한다."

#: ../../tutorials/10_warm_start_qaoa.ipynb:243
msgid "Such binary problems are hard to deal with but can be solved if the problem instance is small enough. Our example above has as solution"
msgstr "이러한 이진 문제는 해결하기 어렵지만 문제 인스턴스가 충분히 작다면 해결할 수 있다. 위의 예는 해결책이다."

#: ../../tutorials/10_warm_start_qaoa.ipynb:295
msgid "We can create a relaxation of this problem in which the variables are no longer binary. Note that we use the ``QuadraticProgramToQubo`` converter to convert the constraint into a quadratic penalty term. We do this to remain consistent with the steps that the Qiskit optimization module applies internally."
msgstr "변수가 더 이상 이진수가 아닌 이 문제의 완화를 생성할 수 있다. ``QuadraticProgramToQubo`` 변환기를 사용하여 제약 조건을 quadratic penalty term으로 변환한다. Qiskit 최적화 모듈이 내부적으로 적용하는 단계와 일관성을 유지하기 위해 이 작업을 수행한다."

#: ../../tutorials/10_warm_start_qaoa.ipynb:410
msgid "The solution of this continuous relaxation is different from the solution to the binary problem but can be used to warm-start a solver when dealing with the binary problem."
msgstr "이 지속적인 완화의 해결책은 이진 문제에 대한 해결책과는 다르지만 이진 문제를 처리할 때 해결사를 warm-start 하는 데 사용할 수 있다."

#: ../../tutorials/10_warm_start_qaoa.ipynb:498
msgid "QAOA"
msgstr "QAOA"

#: ../../tutorials/10_warm_start_qaoa.ipynb:500
msgid "Here, we illustrate how to warm-start the quantum approximate optimization algorithm (QAOA) by leveraging the relaxed problem shown above."
msgstr "여기서는 위에 표시된 완화된 문제를 활용하여 quantum approximate optimization algorithm (QAOA) 을 warm-start하는 방법을 설명한다."

#: ../../tutorials/10_warm_start_qaoa.ipynb:503
msgid "Standard QAOA"
msgstr "표준 QAOA"

#: ../../tutorials/10_warm_start_qaoa.ipynb:505
msgid "First, we use standard QAOA to solve the QUBO. To do this, we convert the QUBO to Qiskit's QuadraticProgram class (note that the resulting problem is still a binary problem)."
msgstr ""

#: ../../tutorials/10_warm_start_qaoa.ipynb:580
#: ../../tutorials/10_warm_start_qaoa.ipynb:892
msgid "Warm-start QAOA"
msgstr "Warm-start QAOA"

#: ../../tutorials/10_warm_start_qaoa.ipynb:582
msgid "Next, we compare this result to a warm-start QAOA in which we use the solution to the continuous relaxation of the problem. First, we create the initial state"
msgstr "다음으로, 이 결과를 문제의 지속적인 완화에 대한 솔루션을 사용하는 warm-start QAOA와 비교한다. 먼저 초기 상태를 아래와 같이 생성한다."

#: ../../tutorials/10_warm_start_qaoa.ipynb:584
msgid ":nbsphinx-math:`\\begin{align} |\\phi^*\\rangle=\\bigotimes_{i=0}^{n-1}R_y(\\theta_i)|0\\rangle_n . \\end{align}`"
msgstr ":nbsphinx-math:`\\begin{align} |\\phi^*\\rangle=\\bigotimes_{i=0}^{n-1}R_y(\\theta_i)|0\\rangle_n . \\end{align}`"

#: ../../tutorials/10_warm_start_qaoa.ipynb:588
msgid "which is given by applying :math:`R_y` rotations with an angle :math:`\\theta=2\\arcsin(\\sqrt{c^*_i})` that depends on the solution to the relaxed problem. Here, :math:`c^*_i` the value of variable :math:`i` of the relaxed problem."
msgstr "이것은 완화된 문제에 대한 해결책에 의존하는 각도 :math:`\\theta=2\\arcsin(\\sqrt{c^*_i})` 로 :math:`R_y` 회전을 적용하여 주어진다. 여기서 :math:`c^*_i` 는 완화된 문제의 가변 :math:`i` 값을 나타낸다."

#: ../../tutorials/10_warm_start_qaoa.ipynb:626
msgid "Next, we create the mixer operator for QAOA. When warm-starting QAOA we must ensure that the mixer operator has the initial state as ground state. We therefore chose the Hamiltonian"
msgstr "다음으로, QAOA의 mixer 연산자를 생성한다. QAOA를 warm-start할 때 mixer 연산자가 초기 상태를 기저 상태로 유지해야 한다. 따라서 아래와 같이 Hamiltonian을"

#: ../../tutorials/10_warm_start_qaoa.ipynb:628
msgid ":nbsphinx-math:`\\begin{align} H_{M,i}^{(ws)}= \\begin{pmatrix} 2c_i^*-1 & -2\\sqrt{c_i^*(1-c_i^*)} \\\\ -2\\sqrt{c_i^*(1-c_i^*)} & 1-2c_i^* \\end{pmatrix} \\end{align}`"
msgstr ":nbsphinx-math:`\\begin{align} H_{M,i}^{(ws)}= \\begin{pmatrix} 2c_i^*-1 & -2\\sqrt{c_i^*(1-c_i^*)} \\\\ -2\\sqrt{c_i^*(1-c_i^*)} & 1-2c_i^* \\end{pmatrix} \\end{align}`"

#: ../../tutorials/10_warm_start_qaoa.ipynb:636
msgid "as mixer operator for qubit :math:`i`. Once multiplied by :math:`-i\\beta` and exponentiated this mixer produces the following mixer circuit."
msgstr "큐비트 :math:`i` 에 대한 혼합 연산자로 사용된다. :math:`-i\\beta` 를 곱하고 지수화하면 혼합기는 다음과 같은 혼합 회로를 생성한다."

#: ../../tutorials/10_warm_start_qaoa.ipynb:676
msgid "The initial state and mixer operator can then be passed to QAOA."
msgstr "초기 상태 및 혼합 연산자는 이제 QAOA로 전달될 수 있다."

#: ../../tutorials/10_warm_start_qaoa.ipynb:755
msgid "Analysis"
msgstr "분석"

#: ../../tutorials/10_warm_start_qaoa.ipynb:757
msgid "Both results appear to give the same result. However, when we look at the underlying probability distribution we observe that the warm-start QAOA has a much higher probability of sampling the optimal solution."
msgstr "두 결과는 동일한 결과를 제공하는 것으로 보인다. 그러나 기본 확률 분포를 살펴보면 warm-start QAOA가 최적 솔루션을 sampling할 확률이 훨씬 더 높다는 것을 알 수 있다."

#: ../../tutorials/10_warm_start_qaoa.ipynb:894
msgid "The warm-start features above are available in the Qiskit optimization module as a single optimizer named ``WarmStartQAOAOptimizer`` which is illustrated below. This solver will solve a QUBO with a warm-start QAOA. It computes :math:`c^*` by relaxing the problem. This behavior is controlled by setting ``relax_for_pre_solver`` to ``True``."
msgstr "위의 warm-start 기능은 아래 나온 것처럼 Qiskit 최적화 모듈에서 ``WarmStartQAOAOptimizer`` 라는 단일 optimizer로 사용할 수 있다. 이 해석기는 warm-start QAOA로 QUBO를 해결할 것이다. 문제를 완화하여 :math:`c^*` 를 계산한다. 이 동작은 ``relax_for_pre_solver`` 를 ``True`` 로 설정하여 제어한다."

