msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-30 14:36+0000\n"
"PO-Revision-Date: 2022-03-31 09:52\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/12_qaoa_runtime.po\n"
"X-Crowdin-File-ID: 9727\n"
"Language: ko_KR\n"

#: ../../tutorials/12_qaoa_runtime.ipynb:9
msgid "This page was generated from `docs/tutorials/12_qaoa_runtime.ipynb`__."
msgstr "이 페이지는 \"docs/tutorials/12_qaoa_runtime.ipynb\" 에서 생성되었다."

#: ../../tutorials/12_qaoa_runtime.ipynb:9
msgid "QAOA Runtime"
msgstr "QAOA 런타임"

#: ../../tutorials/12_qaoa_runtime.ipynb:11
msgid "The Qiskit runtime is an execution model that permits us to run an entire program on the backend side. Here, we discuss how to run the QAOA algorithm in the Qiskit runtime. We will discuss several of the features that this first version of the QAOA Runtime makes available."
msgstr "Qiskit 런타임은 백엔드측에서 전체 프로그램을 실행할 수 있는 실행 모델이다. 여기서는 Qiskit 런타임에서 QAOA 알고리즘을 실행하는 방법에 대해 설명한다. QAOA Runtime의 첫 번째 버전이 제공하는 몇 가지 기능에 대해 설명할 것이다."

#: ../../tutorials/12_qaoa_runtime.ipynb:37
msgid "Preliminaries"
msgstr "사전 준비"

#: ../../tutorials/12_qaoa_runtime.ipynb:39
msgid "First, we load the program and inspect its arguments to know what inputs it is expecting. We also investigate the return types to understand what will be returned to us. We obtain the QAOA program from the provider as follows."
msgstr "먼저 프로그램을 불러오고 전달인자를 검사하여 예상되는 입력값을 확인한다. 또한 어떤 값이 반환되는지 이해하기 위해 리턴값 유형을 조사한다. 다음과 같이 제공자로부터 QAOA 프로그램을 받는다."

#: ../../tutorials/12_qaoa_runtime.ipynb:61
msgid "The arguments to the runtime are obtained as follows."
msgstr "런타임에 대한 전달인자는 다음과 같이 얻는다."

#: ../../tutorials/12_qaoa_runtime.ipynb:151
msgid "Here, we see the different input arguments which we now elaborate on."
msgstr "여기서 지금 설명하고 있는 다양한 전달인자 입력값을 볼 수 있다."

#: ../../tutorials/12_qaoa_runtime.ipynb:153
msgid "**operator** is by far the most important argument since it represent the cost operator that we want to minimize. For QAOA this corresponds to a ``PauliSumOp``. Each time there is a quadratic term between two decision variables in the problem we wish to minimize there will be a corresponding ``ZZ`` term in the ``PauliSumOp``. For example, the operator ``PauliSumOp.from_list([(\"ZIZ\", 1), (\"IZZ\", -1), (\"ZZI\", 1)])`` may correspond to a Maxcut problem on a triangle where one edge has a negative weight."
msgstr "**operator** 는 최소화하고자 하는 비용 연산자를 나타내므로 가장 중요한 전달인자다. QAOA의 경우 ``PauliSumOp`` 에 해당한다. 문제의 두 결정변수 사이에 이차항이 있을때마다 ``PauliSumOp`` 에 상응하는 ``ZZ`` 가 최소화하기를 바란다. 예를들어, ``PauliSumOp.from_list([(\"ZIZ\", 1), (\"IZZ\", -1), (\"ZZI\", 1)])`` 는 한 모서리의 가중치가 음수인 삼각형 상에서의 Maxcut 문제에 해당될 수 있다."

#: ../../tutorials/12_qaoa_runtime.ipynb:155
msgid "**optimizer** represents the optimizer used in the closed-loop classical optimization. This will default to SPSA to deal with the noise of the hardware."
msgstr "**optimizer** 는 닫힌 고리(closed-loop) 의 고전적인 최적화에 사용되는 최적화 도구를 나타낸다. 이는 하드웨어의 노이즈를 처리하기 위해 기본적으로 SPSA가 사용된다."

#: ../../tutorials/12_qaoa_runtime.ipynb:156
msgid "**reps** this integer is the number of QAOA layers."
msgstr "** reps** 이 정수는 QAOA 레이어 수이다."

#: ../../tutorials/12_qaoa_runtime.ipynb:157
msgid "**initial_point** is the initial values for :math:`\\gamma` and :math:`\\beta`. This is a list given in the following order :math:`[\\gamma_1, \\beta_1, \\gamma_2, \\beta_2, ...]`. The length of this list should therefore be twice the QAOA depth (i.e. the ``reps`` parameter)."
msgstr "**initial_point** 는 `\\gamma` 및 :math: `\\beta` 의 초기 값이다. 이 목록은 `[\\gamma_1, \\beta_1, \\gamma_2, \\beta_2, ...]` 에 주어진 목록이다. 따라서 이 목록의 길이는 QAOA 깊이 (즉 ``reps`` 매개변수) 의 두 배가 되어야 한다."

#: ../../tutorials/12_qaoa_runtime.ipynb:158
msgid "**shots** is the number of shots to gather for each circuit."
msgstr "**shots** 은 각 회로를 돌리는 총 횟수이다."

#: ../../tutorials/12_qaoa_runtime.ipynb:159
msgid "**alpha** is the :math:`\\alpha` of the CVaR optimization [1]. If :math:`\\alpha` is smaller than one then only the best :math:`\\alpha` fraction of shots will be retained in the optimization, i.e. this corresponds to using ``CVaRExpectation(alpha, PauliExpectation())`` which can be found in ``qiskit.opflow``."
msgstr "**alpha** 는 CVaR 최적화의 `\\alpha` 이다. 만약 `\\alpha` 가 1보다 작으면 최고의 `\\alpha` 샷들만이 최적화에 유지된다. 즉, 이는 ``qiskit.opflow`` 에서 찾을 수 있는 ``CVaRExpectation(alpha, PauliExpectation())`` 를 사용하는 것에 해당한다."

#: ../../tutorials/12_qaoa_runtime.ipynb:160
msgid "**measurement_error_mitigation** determines or not to use readout error mitigation. If ``True``, the algorithm used this will employ the ``TensoredMeasFitter``."
msgstr "**measurement_error_mitigation** 는 해독 오류 완화를 사용할지 여부를 결정한다. 만약 이 값이 ``True`` 라면 이를 사용하는 알고리즘은 ``TensoredMeasFitter`` 을 사용할 것이다."

#: ../../tutorials/12_qaoa_runtime.ipynb:161
msgid "If **use_swap_strategies** is ``True`` the QAOA program will transpile the QAOA circuit with dedicated swap strategies that take into account the commutative nature of the ``ZZ`` operators in QAOA and the coupling map of the backend on which the program will run. If this option is False then the QAOA program will default to the standard transpiler with optimization level 1. This optimization level can be chosen using the **optimization_level** input option."
msgstr "만약 **use_swap_strategies** 이 ``True`` 라면, QAOA 프로그램은 QAOA에 있는 ``ZZ`` 연산자의 상호 작용 특성과 프로그램이 실행될 백엔드의 결합 맵을 고려하는 교환 전략으로 QAOA 회로를 트랜스파일링 시킬 것이다. 만약 이 옵션이 False라면 QAOA 프로그램은 최적화 레벨 1을 갖는 표준 트랜스파일러로 설정될 것이다. 이 최적화 레벨은 **optimization_level** 입력값 옵션을 사용하여 선택할 수 있다."

#: ../../tutorials/12_qaoa_runtime.ipynb:162
msgid "If **use_pulse_efficient** is set to ``True`` then a pulse efficient transpilation will be run at each QAOA iteration [2]. This collects two-qubit blocks and applies Cartan’s KAK decomposition to obtain a ``RZXGate`` representation of the circuit. Scaled cross-resonance pulses are then used. Further details are given in Appendix A below."
msgstr "만약 **use_pulse_efficient** 이 ``True`` 로 설정되면, 각 QAOA 반복에서 펄스의 효율적인 트랜스파일이 실행될 것이다. 이것은 2개의 큐비트 블록을 수집하고 Cartan의 KAK 분해를 적용하여 회로의 ``RZXGate``를 얻는다. 그런 다음 스케일링된 교차-공진 펄스가 사용된다. 자세한 내용은 아래 부록 A에 나와있다."

#: ../../tutorials/12_qaoa_runtime.ipynb:163
msgid "If **use_initial_mapping** is ``True`` then a heuristic algorithm will be run to permute the Pauli operators in the cost operator to better fit the coupling map of the device. This permutation is only applied if the ``use_swap_strategies`` option is set to ``True`` and only makes sense for non-fully-connected problems."
msgstr "만약 **use_initial_mapping** 이 ``True`` 라면, 비용 연산자의 파울리 연산자를 장치의 결합 맵에 더 잘 맞도록 휴리스틱 알고리즘이 실행된다. 이는 ``use_swap_strategies`` 옵션이 ``True`` 로 설정된 경우에만 적용되어 있고 완전히 연결되지 않은 문제점에 대해서만 감지된다."

#: ../../tutorials/12_qaoa_runtime.ipynb:164
msgid "**optimization_level** This is the optimization level of the Qiskit transpiler if swap strategies are not used. The default value is 1."
msgstr "**optimization_level** 은 swap 전략이 사용되지 않은 경우의 Qiskit 트랜스파일러의 최적화 레벨이다. 기본값은 1이다."

#: ../../tutorials/12_qaoa_runtime.ipynb:167
msgid "References"
msgstr "참조"

#: ../../tutorials/12_qaoa_runtime.ipynb:169
msgid "[1] P. Kl. Barkoutsos, G. Nannicini, A. Robert, I. Tavernelli, and S. Woerner, *Improving Variational Quantum Optimization using CVaR*, Quantum **4**, 256 (2020)."
msgstr "[1] P. Kl. Barkoutsos, G. Nannicini, A. Robert, I. Tavernelli, and S. Woerner, *Improving Variational Quantum Optimization using CVaR*, Quantum **4**, 256 (2020)."

#: ../../tutorials/12_qaoa_runtime.ipynb:171
msgid "[2] N. Earnest, C. Tornow, and D. J. Egger, *Pulse-efficient circuit transpilation for quantum applications on cross-resonance-based hardware*, Phys. Rev. Research **3**, 043088 (2021)."
msgstr "[2] N. Earnest, C. Tornow, and D. J. Egger, *Pulse-efficient circuit transpilation for quantum applications on cross-resonance-based hardware*, Phys. Rev. Research **3**, 043088 (2021)."

#: ../../tutorials/12_qaoa_runtime.ipynb:183
msgid "Running the QAOA runtime program"
msgstr "QAOA 런타임 프로그램 실행"

#: ../../tutorials/12_qaoa_runtime.ipynb:185
msgid "We now show how to use the QAOA runtime program with a five qubit example."
msgstr "예제로 QAOA 프로그램을 5개의 큐비트로 사용하는 방법을 보여준다."

#: ../../tutorials/12_qaoa_runtime.ipynb:187
msgid "Here, we show how to directly call the program on the cloud. However, Qiskit Optimization provides the ``QAOAClient`` which seamlessly fits in the Qiskit Optimization workflow and can be used as a direct replacement of your local ``QAOA`` algorithm. This ``QAOAClient`` is discussed below in this tutorial."
msgstr "여기서는 클라우드에서 프로그램을 직접 불러오는 방법을 보여준다. 그러나 Qiskit 최적화는 Qiskit 최적화 워크플로우에 완벽하게 맞는 ``QAOAClient`` 를 제공하며 로컬 ``QAOA`` 알고리즘을 직접 대체할 수 있다. 이 튜토리얼에서는 ``QAOAClient`` 에 대해 설명한다."

#: ../../tutorials/12_qaoa_runtime.ipynb:251
msgid "Now, we run the program using the provider."
msgstr "이제 공급자를 이용하여 프로그램을 실행한다."

#: ../../tutorials/12_qaoa_runtime.ipynb:313
msgid "Once the job has successfully executed we can retrieve the result from the job. The result object contains information on the optimization. For self consistency it also contains the inputs to the QAOA program that are accessible through ``result[\"inputs\"]``. The value under ``\"inputs\"`` is a dictionary with the keys described above."
msgstr "작업이 성공적으로 실행되면 결과를 얻을 수 있다. 결과에는 최적화에 대한 정보가 포함되어 있다. 또한 자체 일관성을 위해 ``result[\"inputs\"]`` 를 통해 접근할 수 있는 QAOA 프로그램에 대한 입력값도 포함하고 있다. ``\"inputs\"`` 아래의 값은 위에서 설명한 키가 있는 사전이다."

#: ../../tutorials/12_qaoa_runtime.ipynb:334
msgid "Of particular interest is the energy that was measured on the hardware at each iteration as well as the returned eigenstate. For this example we assume that the energy of the cost operator that we minimized corresponds to an instance of a MaxCut problem."
msgstr "특히 각 반복에서의 하드웨어 상에서 측정된 에너지와 반환된 고유상태가 중요하다. 이 예제에서 최소화환 비용 연산자의 에너지가 MaxCut 문제의 인스턴스에 해당한다고 가정한다."

#: ../../tutorials/12_qaoa_runtime.ipynb:451
msgid "Qiskit optimization"
msgstr "Qiskit 최적화"

#: ../../tutorials/12_qaoa_runtime.ipynb:453
msgid "The functionality discussed above is implemented in Qiskit-optimization where the QAOA-runtime is accessible through the ``runtime`` module. We now show how to use this module with the ``QAOAClient``."
msgstr "위에서 설명한 기능은 QAOA 런타임이 ``runtime`` 모듈을 통해 접근할 수 있는 Qiskit 최적화에서 구현된다. 이제 이 모듈을 ``QAOAClient`` 와 함께 사용하는 방법을 보여준다."

#: ../../tutorials/12_qaoa_runtime.ipynb:617
msgid "Appendix A: Pulse-efficient transpilation"
msgstr "부록 A: 펄스에 효율적인(pulse-effective) 트랜스파일"

#: ../../tutorials/12_qaoa_runtime.ipynb:619
msgid "The QAOA runtime program can leverage a pulse-efficient transpilation which minimizes the number of single-qubit pulses and makes use of the cross-resonance scaling methodology applicable to the echoed-cross-resonance gates of IBM Quantum Systems. For completeness we here show the pass manager that is implemented."
msgstr "QAOA 런타임 프로그램은 단일 큐비트 펄스 수를 최소화하고 IBM Quantum Systems의 에코-교차-공진 게이트에 적용 가능한 교차-공진 스케일링 방법론을 사용하는 펄스 효율적인 트랜스파일 기능을 활용할 수 있다. 완성도를 위해 구현된 패스 관리자를 보여준다."

#: ../../tutorials/12_qaoa_runtime.ipynb:666
msgid "The pulse efficient pass is implemented using transpiler passes from qiskit. It requires knowledge of the pulse-enabled backend to attached scaled cross-resonance gates to the ``RZXGate``\\ s obtained from the KAK decomposition. These scaled gates are based on the schedules of the calibrated CNOT gates."
msgstr "펄스 효율 패스는 qiskit의 트랜스파일러 패스를 사용하여 구현된다. 이는 KAK 분해에서 얻은 ``RZXGate`` 에 스케일링된 교차-공진 게이트를 부착하는 펄스 가능 백엔드에 대한 지식을 필요로 한다. 이러한 스케일된 게이트들은 교정된 CNOT 게이트들의 스케줄에 기초한다."

#: ../../tutorials/12_qaoa_runtime.ipynb:703
msgid "To demonstrate the pass we construct an arbitrary circuit with blocks of two-qubit gates."
msgstr "패스를 보여주기 위해 2개의 큐비트 게이트 블록들로 임의의 회로를 구성한다."

