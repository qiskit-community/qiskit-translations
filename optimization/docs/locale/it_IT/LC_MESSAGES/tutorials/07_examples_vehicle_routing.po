msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-13 12:32+0000\n"
"PO-Revision-Date: 2021-07-13 13:46\n"
"Last-Translator: \n"
"Language-Team: Italian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: it\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/07_examples_vehicle_routing.po\n"
"X-Crowdin-File-ID: 9654\n"
"Language: it_IT\n"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:13
msgid "Run interactively in jupyter notebook."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:9
msgid "Vehicle Routing"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:12
msgid "The Introduction"
msgstr "Introduzione"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:14
msgid "Logistics is a major industry, with some estimates valuing it at USD 8183 billion globally in 2015. Most service providers operate a number of vehicles (e.g., trucks and container ships), a number of depots, where the vehicles are based overnight, and serve a number of client locations with each vehicle during each day. There are many optimization and control problems that consider these parameters. Computationally, the key challenge is how to design routes from depots to a number of client locations and back to the depot, so as to minimize vehicle-miles traveled, time spent, or similar objective functions. In this notebook we formalize an idealized version of the problem and showcase its solution using the quantum approximate optimization approach of Farhi, Goldstone, and Gutmann (2014)."
msgstr "La logistica è settore di grande importanza, con alcune stime del suo valore globale che ammontano a 8183 miliardi di dollari nel 2015. La maggior parte dei fornitori di servizi gestisce un certo numero di veicoli (ad esempio, camion e navi portacontainer), un certo numero di depositi, dove i veicoli stazionano la notte, e serve un certo numero di luoghi clienti con ciascun veicolo ogni giorno. Ci sono molti problemi di ottimizzazione e di controllo che considerano questi parametri. Computazionalmente, la sfida chiave è come pianificare gli itinerari dai depositi ai luoghi clienti e poi di nuovo ai depositi in modo da minimizzare i chilometri percorsi, il tempo impiegato, o simili funzioni obiettivo. In questo notebook formalizziamo una versione idealizzata del problema e dimostriamo la sua soluzione usando l'approccio dell'ottimizzazione quantistica approssimata di Farhi, Goldstone e Gutmann (2014)."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:17
msgid "The overall workflow we demonstrate comprises:"
msgstr "Il processo complessivo che andiamo a dimostrare comprende:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:19
msgid "establish the client locations. Normally, these would be available ahead of the day of deliveries from a database. In our use case, we generate these randomly."
msgstr "stabilire le posizioni dei clienti. Normalmente, queste sarebbero disponibili in un database in anticipo rispetto al giorno delle consegne. Nel nostro caso, esse vengono generate casualmente."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:21
msgid "compute the pair-wise distances, travel times, or similar. In our case, we consider the Euclidean distance, “as the crow flies”, which is perhaps the simplest possible."
msgstr "calcolare le distanze, tempi di percorrenza, o altre simili quantità tra coppie di posizioni. Nel nostro caso, consideriamo la distanza euclidea in linea d'aria, che è forse la più semplice possibile."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:23
msgid "compute the actual routes. This step is run twice, actually. First, we obtain a reference value by a run of a classical solver (IBM CPLEX) on the classical computer. Second, we run an alternative, hybrid algorithm partly on the quantum computer."
msgstr "calcolare gli itinerari effettivi. Questo passaggio è in realtà eseguito due volte. All'inizio otteniamo un valore di riferimento tramite l'esecuzione di un risolutore classico (IBM CPLEX) su un computer classico. In un secondo momento eseguiamo un algoritmo alternativo ibrido, in parte sul computer quantistico."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:25
msgid "visualization of the results. In our case, this is again a simplistic plot."
msgstr "visualizzare i risultati. Nel nostro caso, questo è di nuovo un grafico molto semplice."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:27
msgid "In the following, we first explain the model, before we proceed with the installation of the pre-requisites and the data loading."
msgstr "Nel seguito spieghiamo innanzitutto il modello, prima di procedere con l'installazione dei pre-requisiti e con il caricamento dei dati."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:30
msgid "The Model"
msgstr "Il Modello"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:32
msgid "Mathematically speaking, the vehicle routing problem (VRP) is a combinatorial problem, wherein the best routes from a depot to a number of clients and back to the depot are sought, given a number of available vehicles. There are a number of formulations possible, extending a number of formulations of the traveling salesman problem [Applegate et al, 2006]. Here, we present a formulation known as MTZ [Miller, Tucker, Zemlin, 1960]."
msgstr "Matematicamente parlando, il vehicle routing problem (VRP) è un problema combinatoro, dove si cercano i percorsi migliori da un deposito a un numero di clienti e poi di nuovo al deposito, dato un certo numero di veicoli disponibili. Ci sono diverse formulazioni possibili, che estendono un certo numero di formulazioni del problema del commesso viaggiatore [Applegate et al., 2006]. Qui presentiamo una formulazione nota come MTZ [Miller, Tucker, Zemlin, 1960]."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:34
msgid "Let :math:`n` be the number of clients (indexed as :math:`1,\\dots,n`), and :math:`K` be the number of available vehicles. Let :math:`x_{ij} = \\{0,1\\}` be the binary decision variable which, if it is :math:`1`, activates the segment from node :math:`i` to node :math:`j`. The node index runs from :math:`0` to :math:`n`, where :math:`0` is (by convention) the depot. There are twice as many distinct decision variables as edges. For example, in a fully connected graph, there are :math:`n(n+1)` binary decision variables."
msgstr "Sia :math:`n` il numero di clienti (indicizzati come :math:`1,\\dots,n`), e :math:`K` il numero di veicoli disponibili. Sia :math:`x_{ij} = \\{0,1\\}` la variabile di decisione binaria, che se è :math:`1` attiva il segmento dal nodo :math:`i` al nodo :math:`j`. L'indice del nodo va da :math:`0` a :math:`n`, dove :math:`0` è (per convenzione) il deposito. Per ogni segmento vi sono due distinte variabili di decisione. Per esempio, in un grafo completamente connesso, ci sono :math:`n(n+1)` variabili di decisione binarie."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:37
msgid "If two nodes :math:`i` and :math:`j` have a link from :math:`i` to :math:`j`, we write :math:`i \\sim j`. We also denote with :math:`\\delta(i)^+` the set of nodes to which :math:`i` has a link, i.e., :math:`j \\in \\delta(i)^+` if and only if :math:`i \\sim j`. Similarly, we denote with :math:`\\delta(i)^-` the set of nodes which are connected to :math:`i`, in the sense that :math:`j \\in \\delta(i)^-` if and only if :math:`j \\sim i`."
msgstr "Se due nodi :math:`i` e :math:`j` hanno un collegamento da :math:`i` a :math:`j`, scriviamo :math:`i \\sim j`. Inoltre si denota con :math:`\\delta(i)^+` l'insieme dei nodi con cui :math:`i` ha un collegamento, i.e., :math:`j \\in \\delta(i)^+` se e solo se :math:`i \\sim j`. Analogamente, si denota con :math:`\\delta(i)^-` l'insieme dei nodi che sono connessi a :math:`i`, nel senso che :math:`j \\in \\delta(i)^-` se e solo se :math:`j \\sim i`."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:39
msgid "In addition, we consider continuous variables, for all nodes :math:`i = 1,\\dots, n`, denoted :math:`u_i`. These variables are needed in the MTZ formulation of the problem to eliminate sub-tours between clients."
msgstr "Inoltre consideriamo variabili continue per tutti i nodi :math:`i = 1,\\dots, n`, indicate con :math:`u_i`. Queste variabili sono necessarie nella formulazione MTZ del problema per eliminare sub-tour tra clienti."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:41
msgid "The VRP can be formulated as:"
msgstr "IL VRP può essere formulato come:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:43
msgid "(VRP) \\quad  f = \\min_{\\{x_{ij}\\}_{i\\sim j}\\in \\{0,1\\}, \\{u_i\\}_{i=1,\\dots,n}\\in \\mathbb{R}} \\quad \\sum_{i \\sim j} w_{ij} x_{ij}"
msgstr "(VRP) \\quad  f = \\min_{\\{x_{ij}\\}_{i\\sim j}\\in \\{0,1\\}, \\{u_i\\}_{i=1,\\dots,n}\\in \\mathbb{R}} \\quad \\sum_{i \\sim j} w_{ij} x_{ij}"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:48
msgid "subject to the node-visiting constraint:"
msgstr "soggetto al vincolo di visita del nodo:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:50
msgid "\\sum_{j \\in \\delta(i)^+} x_{ij} = 1, \\,\\sum_{j \\in \\delta(i)^-} x_{ji} = 1,\\, \\forall i \\in \\{1,\\dots,n\\},"
msgstr "\\sum_{j \\in \\delta(i)^+} x_{ij} = 1, \\,\\sum_{j \\in \\delta(i)^-} x_{ji} = 1,\\, \\forall i \\in \\{1,\\dots,n\\},"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:55
msgid "the depot-visiting constraints:"
msgstr "ai vincoli di visita del deposito:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:57
msgid "\\sum_{i \\in \\delta(0)^+} x_{0i} = K, \\, \\sum_{j \\in \\delta(0)^+} x_{j0} = K,"
msgstr "\\sum_{i \\in \\delta(0)^+} x_{0i} = K, \\, \\sum_{j \\in \\delta(0)^+} x_{j0} = K,"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:62
msgid "and the sub-tour elimination constraints:"
msgstr "e ai vincoli di eliminazione dei sub-tour:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:64
msgid "u_i - u_j + Q x_{ij} \\leq Q-q_j, \\, \\forall i \\sim j, \\,i ,j \\neq 0, \\quad q_i \\leq u_i \\leq Q,\\, \\forall i, i \\neq 0."
msgstr "u_i - u_j + Q x_{ij} \\leq Q-q_j, \\, \\forall i \\sim j, \\,i ,j \\neq 0, \\quad q_i \\leq u_i \\leq Q,\\, \\forall i, i \\neq 0."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:69
msgid "In particular, - The cost function is linear in the cost functions and weighs the different arches based on a positive weight :math:`w_{ij}>0` (typically the distance between node :math:`i` and node :math:`j`); - The first set of constraints enforce that from and to every client, only one link is allowed; - The second set of constraints enforce that from and to the depot, exactly :math:`K` links are allowed; - The third set of constraints enforce the sub-tour elimination constraints and are bounds on :math:`u_i`, with :math:`Q>q_j>0`, and :math:`Q,q_i \\in \\mathbb{R}`."
msgstr "In particolare: -La funzione di costo è lineare nelle funzioni di costo e pesa i differenti segmenti in base a un peso positivo :math:`w_{ij}>0` (tipicamente la distanza tra il nodo :math:`i` e il nodo :math:`j`); - Il primo insieme di vincoli garantisce che a partire da e verso ciascun cliente sia concesso un solo collegamento; - Il secondo insieme di vincoli garantisce che a partire da e verso il deposito siano concessi esattamente :math:`K` collegamenti; - Il terzo insieme di vincoli garantisce l'eliminazione dei sub-tour e stabilisce dei limiti sugli :math:`u_i`, con :math:`Q>q_j>0`, e :math:`Q,q_i \\in \\mathbb{R}`."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:73
msgid "Classical solution"
msgstr "Soluzione classica"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:75
msgid "We can solve the VRP classically, e.g., by using CPLEX. CPLEX uses a branch-and-bound-and-cut method to find an approximate solution of the VRP, which, in this formulation, is a mixed-integer linear program (MILP). For the sake of notation, we pack the decision variables in one vector as"
msgstr "Si può risolvere il VRP classicamente, ad esempio usando CPLEX. CPLEX usa un metodo branch-and-bound-and-catch per trovare una soluzione approssimata del VRP, che, in questa formulazione, è un programma lineare intero misto (MILP). Per motivi di notazione raccogliamo le variabili di decisione in un vettore come"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:77
msgid "{\\bf z} = [x_{01},x_{02},\\ldots,x_{10}, x_{12},\\ldots,x_{n(n-1)}]^T,"
msgstr "{\\bf z} = [x_{01},x_{02},\\ldots,x_{10}, x_{12},\\ldots,x_{n(n-1)}]^T,"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:82
msgid "wherein :math:`{\\bf z} \\in \\{0,1\\}^N`, with :math:`N = n (n+1)`. So the dimension of the problem scales quadratically with the number of nodes. Let us denote the optimal solution by :math:`{\\bf z}^*`, and the associated optimal cost :math:`f^*`."
msgstr "dove :math:`{\\bf z} \\in \\{0,1\\}^N`, con :math:`N = n (n+1)`. Quindi la dimensionalità del problema scala quadraticamente con il numero di nodi. Si indichi con :math:`{\\bf z}^*` la soluzione ottimale, e con :math:`f^*` il costo ottimale ad essa associato."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:85
msgid "Quantum solution"
msgstr "Soluzione quantistica"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:87
msgid "Here, we demonstrate an approach that combines classical and quantum computing steps, following the quantum approximate optimization approach of Farhi, Goldstone, and Gutmann (2014). In particular, we use the variational quantum eigensolver (VQE). We stress that given the use of limited depth of the quantum circuits employed (variational forms), it is hard to discuss the speed-up of the algorithm, as the solution obtained is heuristic in nature. At the same time, due to the nature and importance of the target problems, it is worth investigating heuristic approaches, which may be worthwhile for some problem classes."
msgstr "Di seguito mostriamo un approccio che combina i passaggi classici e quantistici, seguendo l'approccio di ottimizzazione quantistica approssimata di Farhi, Goldstone e Gutmann (2014). In particolare usiamo un eigensolver quantistico variazionale (VQE). Ci teniamo a sottolineare che, data la profondità limitata dei circuiti quantistici utilizzati (forma variazionale), risulta difficile discutere la velocizzazione dell'algoritmo, dato che la soluzione ottenuta è per sua natura euristica. Allo stesso tempo, vista la natura e l'importanza del problema, vale la pena investigare approcci euristici, che potrebbero essere utili per alcune classi di problemi."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:90
msgid "Following [5], the algorithm can be summarized as follows:"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:92
msgid "Preparation steps:"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:94
msgid "Transform the combinatorial problem into a binary polynomial optimization problem with equality constraints only;"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:95
msgid "Map the resulting problem into an Ising Hamiltonian (:math:`H`) for variables :math:`{\\bf z}` and basis :math:`Z`, via penalty methods if necessary;"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:96
msgid "Choose the depth of the quantum circuit :math:`m`. Note that the depth can be modified adaptively."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:97
msgid "Choose a set of controls :math:`\\theta` and make a trial function :math:`\\big|\\psi(\\boldsymbol\\theta)\\rangle`, built using a quantum circuit made of C-Phase gates and single-qubit Y rotations, parameterized by the components of :math:`\\boldsymbol\\theta`."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:99
msgid "Algorithm steps:"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:101
msgid "Evaluate :math:`C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)\\big|H\\big|\\psi(\\boldsymbol\\theta)\\rangle` by sampling the outcome of the circuit in the Z-basis and adding the expectation values of the individual Ising terms together. In general, different control points around :math:`\\boldsymbol\\theta` have to be estimated, depending on the classical optimizer chosen."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:102
msgid "Use a classical optimizer to choose a new set of controls."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:103
msgid "Continue until :math:`C(\\boldsymbol\\theta)` reaches a minimum, close enough to the solution :math:`\\boldsymbol\\theta^*`."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:104
msgid "Use the last :math:`\\boldsymbol\\theta` to generate a final set of samples from the distribution :math:`\\Big|\\langle z_i\\big|\\psi(\\boldsymbol\\theta)\\rangle\\Big|^2\\;\\forall i` to obtain the answer."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:106
msgid "There are many parameters throughout, notably the choice of the trial wavefunction. Below, we consider:"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:108
msgid "\\big|\\psi(\\theta)\\rangle = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m \\big|+\\rangle"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:113
msgid "where :math:`U_\\mathrm{entangler}` is a collection of C-Phase gates (fully-entangling gates), and :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^N Y(\\theta_{i})`, where :math:`N` is the number of qubits and :math:`m` is the depth of the quantum circuit."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:116
msgid "Construct the Ising Hamiltonian"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:118
msgid "From :math:`VRP` one can construct a binary polynomial optimization with equality constraints only by considering cases in which :math:`K=n-1`. In these cases the sub-tour elimination constraints are not necessary and the problem is only on the variable :math:`{\\bf z}`. In particular, we can write an augmented Lagrangian as"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:120
msgid "(IH) \\quad H = \\sum_{i \\sim j} w_{ij} x_{ij}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big(\\sum_{j \\in \\delta(i)^+} x_{ij} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big(\\sum_{j \\in \\delta(i)^-} x_{ji} - 1\\Big)^2 +A \\Big(\\sum_{i \\in \\delta(0)^+} x_{0i} - K\\Big)^2 + A\\Big(\\sum_{j \\in \\delta(0)^+} x_{j0} - K\\Big)^2"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:125
msgid "where :math:`A` is a big enough parameter."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:128
msgid "From Hamiltonian to QP formulation"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:130
msgid "In the vector :math:`{\\bf z}`, and for a complete graph (:math:`\\delta(i)^+ = \\delta(i)^- = \\{0,1,\\dots,i-1,i+1,\\dots,n\\}`), :math:`H` can be written as follows."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:132
msgid "\\min_{{\\bf z}\\in \\{0,1\\}^{n(n+1)}} {\\bf w}^T {\\bf z}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big({\\bf e}_i \\otimes {\\bf 1}_n^T {\\bf z} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big({\\bf v}_i^T {\\bf z} - 1\\Big)^2 + A \\Big(({\\bf e}_0 \\otimes {\\bf 1}_n)^T{\\bf z} - K\\Big)^2 + A\\Big({\\bf v}_0^T{\\bf z} - K\\Big)^2."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:137
msgid "That is:"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:139
msgid "\\min_{\\bf z\\in \\{0,1\\}^{n(n+1)}} \\bf z^T {\\bf Q} \\bf z + {\\bf g}^T \\bf z + c,"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:144
msgid "Where: first term:"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:146
msgid "{\\bf Q} = A \\sum_{i \\in \\{0,1,\\dots,n\\}}  \\Big[({\\bf e}_i \\otimes {\\bf 1}_n)({\\bf e}_i \\otimes {\\bf 1}_n)^T + {\\bf v}_i{\\bf v}_i^T \\Big]"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:151
msgid "Second term:"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:153
msgid "{\\bf g} = {\\bf w} -2 A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big[({\\bf e}_i \\otimes {\\bf 1}_n) + {\\bf v}_i \\Big] -2 A K \\Big[({\\bf e}_0 \\otimes {\\bf 1}_n) + {\\bf v}_0 \\Big]"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:158
msgid "Third term:"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:160
msgid "c = 2An +2AK^2."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:165
msgid "The QP formulation of the Ising Hamiltonian is ready for the use of VQE. We will solve the QP using optimization stack available in Qiskit."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:168
msgid "References"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:170
msgid "[1] E. Farhi, J. Goldstone, S. Gutmann e-print arXiv 1411.4028, 2014"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:172
msgid "[2] `Max-Cut and Traveling Salesman Problem <./06_examples_max_cut_and_tsp.ipynb>`__"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:174
msgid "[3] C. E. Miller, E. W. Tucker, and R. A. Zemlin (1960). “Integer Programming Formulations and Travelling Salesman Problems”. J. ACM. 7: 326–329. doi:10.1145/321043.321046."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:176
msgid "[4] D. L. Applegate, R. M. Bixby, V. Chvátal, and W. J. Cook (2006). The Traveling Salesman Problem. Princeton University Press, ISBN 978-0-691-12993-8."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:188
msgid "Initialization"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:190
msgid "First of all we load all the packages that we need: - Python 3.6 or greater is required; - CPLEX 12.8 or greater is required for the classical computations; - Latest Qiskit is required for the quantum computations."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:252
msgid "We then initialize the variables"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:275
msgid "We define an initializer class that randomly places the nodes in a 2-D plane and computes the distance between them."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:331
msgid "Classical solution using IBM ILOG CPLEX"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:333
msgid "For a classical solution, we use IBM ILOG CPLEX. CPLEX is able to find the exact solution of this problem. We first define a ClassicalOptimizer class that encodes the problem in a way that CPLEX can solve, and then instantiate the class and solve it."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:542
msgid "If you have CPLEX, the solution shows the depot with a star and the selected routes for the vehicles with arrows."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:554
msgid "Quantum solution from the ground up"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:556
msgid "For the quantum solution, we use Qiskit."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:558
msgid "First, we derive the solution from the ground up, using a class QuantumOptimizer that encodes the quantum approach to solve the problem and then we instantiate it and solve it. We define the following methods inside the class: - ``binary_representation`` : encodes the problem :math:`(M)` into a QP terms (that’s basically linear algebra); - ``construct_problem`` : constructs a QUBO optimization problem as an instance of ``QuadraticProgram``; - ``solve_problem``: solves the problem :math:`(M)` constructed at the previous step via ``MinimunEigenOptimizer`` by using VQE with default parameters;"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:669
msgid "Step 1"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:671
msgid "Instantiate the quantum optimizer class with parameters: - the instance; - the number of nodes and vehicles ``n`` and ``K``;"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:694
msgid "Step 2"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:696
msgid "Encode the problem as a binary formulation (IH-QP)."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:698
msgid "Sanity check: make sure that the binary formulation in the quantum optimizer is correct (i.e., yields the same cost given the same solution)."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:755
msgid "Step 3"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:757
msgid "Encode the problem as an instance of ``QuadraticProgram``."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:779
msgid "Step 4"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:781
msgid "Solve the problem via ``MinimumEigenOptimizer`` from the optimization stack. N.B. Depending on the number of qubits, the state-vector simulation can take a while; for example with 12 qubits, it takes more than 12 hours. Logging is useful to see what the program is doing."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:824
msgid "Step 5"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:826
msgid "Visualize the solution"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:869
msgid "The plots present the depot with a star and the selected routes for the vehicles with arrows. Note that in this particular case, we can find the optimal solution of the QP formulation, which happens to coincide with the optimal solution of the ILP."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:871
msgid "Keep in mind that VQE is an heuristic working on the QP formulation of the Ising Hamiltonian, though. For suitable choices of A, local optima of the QP formulation will be feasible solutions to the ILP. While for some small instances, as above, we can find optimal solutions of the QP formulation which coincide with optima of the ILP, finding optimal solutions of the ILP is harder than finding local optima of the QP formulation, in general, which in turn is harder than finding feasible solutions of the ILP. Even within the VQE, one may provide stronger guarantees, for specific variational forms (trial wave functions)."
msgstr ""

