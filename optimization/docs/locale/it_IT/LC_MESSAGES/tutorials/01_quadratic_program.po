msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-11 01:17+0000\n"
"PO-Revision-Date: 2022-11-11 02:22\n"
"Last-Translator: \n"
"Language-Team: Italian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: it\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/01_quadratic_program.po\n"
"X-Crowdin-File-ID: 9642\n"
"Language: it_IT\n"

#: ../../tutorials/01_quadratic_program.ipynb:9
msgid "This page was generated from `docs/tutorials/01_quadratic_program.ipynb`__."
msgstr "Questa pagina è stata generata da `docs/tutorials/01_quadratic_program.ipynb`__."

#: ../../tutorials/01_quadratic_program.ipynb:9
msgid "Quadratic Programs"
msgstr "Programmi Quadratici"

#: ../../tutorials/01_quadratic_program.ipynb:21
msgid "Introduction"
msgstr "Introduzione"

#: ../../tutorials/01_quadratic_program.ipynb:32
msgid "In this tutorial, we briefly introduce how to build optimization problems using Qiskit’s optimization module. Qiskit introduces the ``QuadraticProgram`` class to make a model of an optimization problem. More precisely, it deals with quadratically constrained quadratic programs given as follows:"
msgstr "In questo tutorial, presentiamo brevemente come costruire problemi di ottimizzazione utilizzando il modulo di ottimizzazione di Qiskit. Qiskit introduce la classe ``QuadraticProgram`` per costruire un modello relativo ad un problema di ottimizzazione. Più precisamente, tratta programmi quadratici con vincolo quadratico formulati come segue:"

#: ../../tutorials/01_quadratic_program.ipynb:34
msgid "\\begin{align}\n"
"\\text{minimize}\\quad& x^\\top Q_0 x + c^\\top x\\\\\n"
"\\text{subject to}\\quad& A x \\leq b\\\\\n"
"& x^\\top Q_i x + a_i^\\top x \\leq r_i, \\quad 1,\\dots,i,\\dots,q\\\\\n"
"& l_i \\leq x_i \\leq u_i, \\quad 1,\\dots,i,\\dots,n,\n"
"\\end{align}"
msgstr "\\begin{align}\n"
"\\text{minimize}\\quad& x^\\top Q_0 x + c^\\top x\\\\\n"
"\\text{subject to}\\quad& A x \\leq b\\\\\n"
"& x^\\top Q_i x + a_i^\\top x \\leq r_i, \\quad 1,\\dots,i,\\dots,q\\\\\n"
"& l_i \\leq x_i \\leq u_i, \\quad 1,\\dots,i,\\dots,n,\n"
"\\end{align}"

#: ../../tutorials/01_quadratic_program.ipynb:44
msgid "where the :math:`Q_i` are :math:`n \\times n` matrices, :math:`A` is a :math:`m \\times n` matrix , :math:`x`, and :math:`c` are :math:`n`-dimensional vectors, :math:`b` is an :math:`m`-dimensional vector, and where :math:`x` can be defined as binary, integer, or continuous variables. In addition to “:math:`\\leq`” constraints ``QuadraticProgram`` also supports “:math:`\\geq`” and “:math:`=`”."
msgstr ""

#: ../../tutorials/01_quadratic_program.ipynb:56
msgid "Loading a ``QuadraticProgram`` from an LP file"
msgstr ""

#: ../../tutorials/01_quadratic_program.ipynb:67
msgid "As setup, you need to import the following module."
msgstr "Come setup, è necessario importare il seguente modulo."

#: ../../tutorials/01_quadratic_program.ipynb:89
msgid "You start with an empty model. How to add variables and constraints to a model is explained in the section `Directly constructing a QuadraticProgram <#Directly-constructing-a-QuadraticProgram>`__."
msgstr ""

#: ../../tutorials/01_quadratic_program.ipynb:100
msgid "Qiskit’s optimization module supports the conversion from Docplex model. You can easily make a model of an optimization problem with Docplex. You can find the documentation of Docplex at https://ibmdecisionoptimization.github.io/docplex-doc/mp/index.html"
msgstr "Il modulo di ottimizzazione di Qiskit supporta la conversione da un modello Docplex. Si può facilmente creare un modello di un problema di ottimizzazione con Docplex. La documentazione di Docplex è disponibile all'indirizzo https://ibmdecisionoptimization.github.io/docplex-doc/mp/index.html"

#: ../../tutorials/01_quadratic_program.ipynb:102
msgid "You can load a Docplex model to ``QuadraticProgram`` by using ``from_docplex_mp`` function."
msgstr "Un modello Docplex può essere caricato in un ``QuadraticProgram`` usando ``from_docplex_mp``."

#: ../../tutorials/01_quadratic_program.ipynb:114
msgid "Loading a ``QuadraticProgram`` from a docplex model"
msgstr "Caricare un ``QuadraticProgram`` da un modello docplex"

#: ../../tutorials/01_quadratic_program.ipynb:228
msgid "``QuadraticProgram`` has a method ``prettyprint`` to generate a comprehensive string representation."
msgstr ""

#: ../../tutorials/01_quadratic_program.ipynb:335
msgid "Directly constructing a ``QuadraticProgram``"
msgstr "Costruire direttamente un ``QuadraticProgram``"

#: ../../tutorials/01_quadratic_program.ipynb:346
msgid "We then explain how to make model of an optimization problem directly using ``QuadraticProgram``. Let’s start from an empty model."
msgstr "Vediamo ora come creare un modello di un problema di ottimizzazione utilizzando direttamente ``QuadraticProgram``. Cominciamo con un modello vuoto."

#: ../../tutorials/01_quadratic_program.ipynb:420
msgid "The ``QuadraticProgram`` supports three types of variables:"
msgstr ""

#: ../../tutorials/01_quadratic_program.ipynb:422
msgid "Binary variable"
msgstr ""

#: ../../tutorials/01_quadratic_program.ipynb:423
msgid "Integer variable"
msgstr ""

#: ../../tutorials/01_quadratic_program.ipynb:424
msgid "Continuous variable"
msgstr ""

#: ../../tutorials/01_quadratic_program.ipynb:426
msgid "When you add variables, you can specify names, types, lower bounds and upper bounds."
msgstr "Quando si aggiunge una variabile, è possibile specificare nomi, tipi, limiti inferiori e superiori."

#: ../../tutorials/01_quadratic_program.ipynb:523
msgid "You can set the objective function by invoking ``QuadraticProgram.minimize`` or ``QuadraticProgram.maximize``. You can add a constant term as well as linear and quadratic objective function by specifying linear and quadratic terms with either list, matrix or dictionary."
msgstr "È possibile impostare la funzione obiettivo tramite ``QuadraticProgram.minimize`` o ``QuadraticProgram.maximize``. Si può aggiungere un termine costante, così come una funzione obiettivo lineare o quadratica specificando i termini lineari e quadratici con una lista, una matrice o un dizionario."

#: ../../tutorials/01_quadratic_program.ipynb:525
msgid "Note that in the LP format the quadratic part has to be scaled by a factor :math:`1/2`. Thus, when printing as LP format, the quadratic part is first multiplied by 2 and then divided by 2 again."
msgstr "Da notare che nel formato LP la parte quadratica deve essere scalata di un fattore :math:`1/2`. Per questo motivo, quando mostrata in formato LP, la parte quadratica è prima moltiplicata per 2 e poi nuovamente divisa per 2."

#: ../../tutorials/01_quadratic_program.ipynb:527
msgid "For quadratic programs, there are 3 pieces that have to be specified: a constant (offset), a linear term (:math:`c^{T}x`), and a quadratic term (:math:`x^{T}Qx`)."
msgstr "Per i programmi quadratici, ci sono 3 termini che devono essere specificati: una costante (offset), un termine lineare (:math:`c^{T}x`), e un termine quadratico (:math:`x^{T}Qx`)."

#: ../../tutorials/01_quadratic_program.ipynb:529
msgid "The cell below shows how to declare an objective function using a dictionary. For the linear term, keys in the dictionary correspond to variable names, and the corresponding values are the coefficients. For the quadratic term, keys in the dictionary correspond to the two variables being multiplied, and the values are again the coefficients."
msgstr "La cella sottostante mostra come dichiarare una funzione obiettivo utilizzando un dizionario. Per il termine lineare, le chiavi nel dizionario corrispondono ai nomi delle variabili, ed i valori corrispondenti sono i coefficienti. Per il termine quadratico, le chiavi nel dizionario corrispondono alle due variabili che si moltiplicano ed i valori sono, come prima, i coefficienti."

#: ../../tutorials/01_quadratic_program.ipynb:624
msgid "Another way to specify the quadratic program is using arrays. For the linear term, the array corresponds to the vector :math:`c` in the mathematical formulation. For the quadratic term, the array corresponds to the matrix :math:`Q`. Note that the ordering of the variables (:math:`x` in the mathematical formulation) is the order in which the variables were originally declared in the ``QuadraticProgram`` object."
msgstr ""

#: ../../tutorials/01_quadratic_program.ipynb:719
msgid "You can access the constant, the linear term, and the quadratic term by looking at ``Quadratic.objective.{constant, linear, quadratic}``, respectively. As for linear and quadratic terms, you can get a dense matrix (``to_array``), a sparse matrix (``coefficients``), and a dictionary (``to_dict``). For dictionaries, you can specify whether to use variable indices or names as keys. Note that the quadratic terms are stored in a compressed way, e.g., ``{('x', 'y'): 1, ('y', 'x'): 2}`` is stored as ``{('x', 'y'): 3}``. You can get the quadratic term as a symmetric matrix by calling ``to_array(symmetric=True)`` or ``to_dict(symmetric=True)``. If you call ``to_dict(name=True)``, you can get a dictionary whose keys are pairs of variable names."
msgstr "È possibile accedere al termine costante, lineare e quadratico guardando rispettivamente ``Quadratic.objective.{constant, linear, quadratic}``. Per i termini lineari e quadratici si può ottenere una matrice densa (``to_array``), una matrice sparsa (``coefficients``), e un dizionario (``to_dict``). Per i dizionari è possibile specificare se usare gli indici delle variabili o i loro nomi come chiavi. Si noti che i termini quadratici sono salvati in maniera compressa, ad esempio ``{('x', 'y'): 1, ('y', 'x'): 2}`` è salvato come ``{('x', 'y'): 3}``. Si può ottenere il termine quadratico come una matrice simmetrica usando ``to_array(symmetric=True)`` o ``to_dict(symmetric=True)``. Usando ``to_dict(name=True)`` si ottiene un dizionario le cui chiavi sono coppie di nomi di variabili."

#: ../../tutorials/01_quadratic_program.ipynb:841
msgid "Adding/removing linear and quadratic constraints"
msgstr "Aggiungere/rimuovere vincoli lineari e quadratici"

#: ../../tutorials/01_quadratic_program.ipynb:852
msgid "You can add linear constraints by setting name, linear expression, sense and right-hand-side value (rhs). You can use senses ‘EQ’, ‘LE’, and ‘GE’ as Docplex supports."
msgstr "Si possono aggiungere vincoli lineari impostando nome, espressione lineare, direzione e valore destro (rhs). Si possono utilizzare le direzioni 'EQ', 'LE', e 'GE' come supportato da Docplex."

#: ../../tutorials/01_quadratic_program.ipynb:958
msgid "You can add quadratic constraints as well as objective function and linear constraints."
msgstr "Si possono aggiungere vincoli quadratici, così come funzioni obiettivo e vincoli lineari."

#: ../../tutorials/01_quadratic_program.ipynb:1097
msgid "You can access linear and quadratic terms of linear and quadratic constraints as in the same way as the objective function."
msgstr "È possibile accedere ai termini lineari e quadratici dei vincoli lineari e quadratici nello stesso modo in cui si accede a quelli della funzione obiettivo."

#: ../../tutorials/01_quadratic_program.ipynb:1154
msgid "You can also remove linear/quadratic constraints by ``remove_linear_constraint`` and ``remove_quadratic_constraint``."
msgstr "Si possono inoltre rimuovere vincoli lineari/quadratici usando ``remove_linear_constraint`` e ``remove_quadratic_constraint``."

#: ../../tutorials/01_quadratic_program.ipynb:1268
msgid "You can substitute some of variables with constants or other variables. More precisely, ``QuadraticProgram`` has a method ``substitute_variables(constants=..., variables=...)`` to deal with the following two cases."
msgstr ""

#: ../../tutorials/01_quadratic_program.ipynb:1270
msgid ":math:`x \\leftarrow c`: when ``constants`` have a dictionary ``{x: c}``."
msgstr ""

#: ../../tutorials/01_quadratic_program.ipynb:1271
msgid ":math:`x \\leftarrow c y`: when ``variables`` have a dictionary ``{x: (y, c)}``."
msgstr ""

#: ../../tutorials/01_quadratic_program.ipynb:1283
msgid "Substituting Variables"
msgstr "Sostituire le Variabili"

#: ../../tutorials/01_quadratic_program.ipynb:1377
msgid "If the resulting problem is infeasible due to lower bounds or upper bounds, the methods returns the status ``Status.INFEASIBLE``. We try to replace variable ``x`` with -1, but -1 is out of range of ``x`` (0 <= ``x`` <= 1). So, it returns ``Status.INFEASIBLE``."
msgstr "Se il problema risultante è infattibile per via dei vincoli inferiori o superiori, i metodi restituiscono lo status ``Status.INFEASIBLE``. Si cerca di sostituire la variabile ``x`` con -1, ma -1 è al di fuori dell'intervallo di ``x`` (0 <= ``x`` <= 1). Perciò restituisce ``Status.INFEASIBLE``."

#: ../../tutorials/01_quadratic_program.ipynb:1449
msgid "You cannot substitute variables multiple times. The method raises an error in such a case."
msgstr "Non è possibile sostituire più volte le variabili. In tal caso il metodo genera un errore."

#: ../../tutorials/01_quadratic_program.ipynb:1499
msgid "Note: When you display your problem as LP format using ``export_as_lp_string``, ``Binaries`` denotes binary variables and ``Generals`` denotes integer variables. If variables are not included in either ``Binaries`` or ``Generals``, such variables are continuous ones with default lower bound = 0 and upper bound = infinity. Note that you cannot use ‘e’ or ‘E’ as the first character of names due to the `specification of LP format <https://www.ibm.com/docs/en/icos/22.1.0?topic=representation-variable-names-in-lp-file-format>`__."
msgstr ""

