msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-13 12:32+0000\n"
"PO-Revision-Date: 2021-07-18 14:33\n"
"Last-Translator: \n"
"Language-Team: Italian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: it\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/02_converters_for_quadratic_programs.po\n"
"X-Crowdin-File-ID: 9644\n"
"Language: it_IT\n"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:13
msgid "Run interactively in jupyter notebook."
msgstr "Esegui in maniera interattiva su un jupyter notebook."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:9
msgid "Converters for Quadratic Programs"
msgstr "Convertitori per Programmi Quadratici"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:20
msgid "Optimization problems in Qiskit’s optimization module are represented with the ``QuadraticProgram`` class, which is generic and powerful representation for optimization problems. In general, optimization algorithms are defined for a certain formulation of a quadratic program and we need to convert our problem to the right type."
msgstr "I problemi di ottimizzazione nel modulo di ottimizzazione di Qiskit sono rappresentati con la classe ``QuadraticProgram``, la quale è una rappresentazione generica ed efficace per i problemi di ottimizzazione. In generale, gli algoritmi di ottimizzazione sono definiti per formulazione di programmi quadratrici ed occorre convertire il nostro problema nella giusta tipologia."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:22
msgid "For instance, Qiskit provides several optimization algorithms that can handle Quadratic Unconstrained Binary Optimization (QUBO) problems. These are mapped to Ising Hamiltonians, for which Qiskit uses the ``qiskit.aqua.operators`` module, and then their ground state is approximated. For this optimization commonly known algorithms such as VQE or QAOA can be used as underlying routine. See the following tutorial about the `Minimum Eigen Optimizer <./03_minimum_eigen_optimizer.ipynb>`__ for more detail. Note that also other algorithms exist that work differently, such as the ``GroverOptimizer``."
msgstr "Ad esempio, Qiskit fornisce diversi algoritmi di ottimizzazione in grado di gestire i problemi di Quadratic Unvincolained Binary Optimization (QUBO). Questi sono mappati su Hamiltoniane di Ising, per i quali Qiskit utilizza il modulo ``qiskit.aqua.operators`` e poi il loro stato iniziale è approssimato. Per questa ottimizzazione gli algoritmi comunemente noti come VQE o QAOA possono essere utilizzati come routine sottostante. Vedi il seguente tutorial su `Minimum Eigen Optimizer <./03_minimum_eigen_optimizer.ipynb>`__ per maggiori dettagli. Da notare che esistono anche altri algoritmi che funzionano in modo diverso, come il ``GroverOptimizer``."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:25
msgid "To map a problem to the correct input format, the optimization module of Qiskit offers a variety of converters. In this tutorial we’re providing an overview on this functionality. Currently, Qiskit contains the following converters. - ``InequalityToEquality``: converts inequality constraints into equality constraints with additional slack variables. - ``IntegerToBinary``: converts integer variables into binary variables and corresponding coefficients. - ``LinearEqualityToPenalty``: convert equality constraints into additional terms of the object function. - ``QuadraticProgramToQubo``: a wrapper for ``InequalityToEquality``, ``IntegerToBinary``, and ``LinearEqualityToPenalty`` for convenience."
msgstr "Per mappare un problema nel formato di input corretto, il modulo di ottimizzazione di Qiskit offre una varietà di convertitori. In questo tutorial verrà fornita una panorami su tale funzionalità. Attualmente, Qiskit contiene i seguenti convertitori. - ``InequalityToEquality``: converte i vincoli di disuguaglianza in vincoli di uguaglianza con variabli di slack aggiuntive. - ``IntegerToBinary``: converte variabili intere in variabili binare e corrispettivi coefficienti. - ``LinearEqualityToPenalty``: converte vincoli di uguaglianza in ulteriori termini della funzione oggetto. ``QuadraticProgramToQubo``: un wrapper per ``InequalityToEquality``, ``IntegerToBinary``, e ``LinearEqualityToPenalty`` per comodità."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:38
msgid "InequalityToEquality"
msgstr "InequalityToEquality"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:40
msgid "``InequalityToEqualityConverter`` converts inequality constraints into equality constraints with additional slack variables to remove inequality constraints from ``QuadraticProgram``. The upper bounds and the lower bounds of slack variables will be calculated from the difference between the left sides and the right sides of constraints. Signs of slack variables depend on symbols in constraints such as :math:`\\leq` and :math:`\\geq`."
msgstr "``InequalityToEqualityConverter`` converte i vincoli di disuguaglianza in vincoli di uguaglianza con variabli di slack aggiuntive per eliminare i vincoli di disuguaglianza da ``QuadraticProgram``. I limiti superiore ed inferiore delle variabili di slack saranno calcolati a partire dalla differenza tra i vincoli destro e sinistro. I segni delle variabili di slack dipendono da simboli in vincoli quali :math:`\\leq` and :math:`\\geq`."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:42
msgid "The following is an example of a maximization problem with two inequality constraints. Variable :math:`x` and :math:`y` are binary variables and variable :math:`z` is an integer variable."
msgstr "Il seguente è un esempio di un problema di massimizzazione con due vincoli di disuguaglianza. La variabile :math:`x` e :math:`y` sono variabili binarie e la variabile :math:`z` è una variabile intera."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:56
msgid "With ``QuadraticProgram``, an optimization model of the problem is written as follows."
msgstr "Con ``QuadraticProgram``, un modello di ottimizzazione del problema è scritto come segue."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:156
msgid "Call ``convert`` method of ``InequalityToEquality`` to convert."
msgstr "Chiama il metodo ``convert`` di ``InequalityToEquality`` per effettuare la conversione."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:254
msgid "After converting, the formulation of the problem looks like as the follows. As we can see, the inequality constraints are replaced with equality constraints with additional integer slack variables, :math:`xyz\\_leg\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack`."
msgstr "Dopo la conversione, la formulazione del problema sembra la seguente. Come possiamo vedere, costanti di disuguaglianza sono sostituite con vincoli di uguaglianza con ulteriori variabili slack intere, :math:`xyz\\_leg\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack`."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:256
msgid "Let us explain how the conversion works. For example, the lower bound of the left side of the first constraint is :math:`0` which is the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Thus, the upperbound of the additional integer variable must be :math:`5` to be able to satisfy even the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Note that we cut off the part after the decimal point in the converted formulation since the left side of the first constraint in the original formulation can be only integer values. For the second constraint, basically we apply the same approach. However, the symbol in the second constraint is :math:`\\geq`, so we add minus before :math:`xyz\\_geq\\text{@}int\\_slack` to be able to satisfy even the case of :math:`x=1, y=1`, and :math:`z=7`."
msgstr "Vediamo come funziona la conversione. Ad esempio, il limite inferiore del lato sinistro del primo vincolo è :math:`0` che è il caso di :math:`x=0`, :math:`y=0` e :math:`z=0`. Così, l'upperbound della variabile integrativa intera deve essere pari a :math:`5` per poter soddisfare anche il caso di :math:`x=0`, :math:`y=0`, e :math:`z=0`. Da notare il fatto che tagliamo la parte dopo il punto decimale nella formulazione convertita in quanto il lato sinistro del primo vincolo nella formulazione originale può essere solo valori interi. Per il secondo vincolo, sostanzialmente applichiamo lo stesso approccio. Tuttavia, il symol nel secondo vincolo è :math:`\\geq`, quindi aggiungiamo meno :math:`xyz\\_geq\\text{@}int\\_slack` per poter soddisfare anche il caso di :math:`x= 1, y=1` e :math:`z=7`."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:283
msgid "IntegerToBinary"
msgstr "IntegerToBinary"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:294
msgid "``IntegerToBinary`` converts integer variables into binary variables and coefficients to remove integer variables from ``QuadraticProgram``. For converting, bounded-coefficient encoding proposed in `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Eq. (5)) is used. For more detail of the encoding method, please see the paper."
msgstr "``IntegerToBinary`` converte le variabili intere in variabili binarie ed in coefficienti per eliminare le variabili intere da ``QuadraticProgram``. Per la conversione, codifica a coefficiente delimitato proposto in `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Eq. (5)) è utilizzato. Per maggiori dettagli del metodo di codifica, si prega di vedere il paper."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:296
msgid "We use the output of ``InequalityToEquality`` as starting point. Variable :math:`x` and :math:`y` are binary variables, while the variable :math:`z` and the slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` are integer variables. We print the problem again for reference."
msgstr "Utilizziamo l'output di ``InequalityToEquality`` come punto di partenza. Le variabili :math:`x` and :math:`y` sono variabili binarie, mentre la variabile :math:`z` e le variabili slack :math:`xyz\\_leq\\text{@}int\\_slack` e :math:`xyz\\_geq\\text{@}int\\_slack` sono variabili intere. Visualizziamo di nuovo il problema come riferimento."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:382
msgid "Call ``convert`` method of ``IntegerToBinary`` to convert."
msgstr "Chiama il metodo ``convert`` di ``IntegerToBinary`` per effettuare la conversione."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:492
msgid "After converting, integer variables :math:`z` is replaced with three binary variables :math:`z\\text{@}0`, :math:`z\\text{@}1` and :math:`z\\text{@}2` with coefficients 1, 2 and 4, respectively as the above. The slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` that were introduced by ``InequalityToEquality`` are also both replaced with three binary variables with coefficients 1, 2, 2, and 1, 2, 3, respectively."
msgstr "Dopo la conversione, le variabili intere :math:` z ` sono sostituite con tre variabili binarie :math:` z\\text {@} 0 `, :math:` z\\text {@} 1 ` e :math:` z\\text {@} 2 ` con coefficienti 1, 2 e 4, rispettivamente come sopra. Le variabili slack :math:` xyz\\_leq\\text {@} int\\_slack ` e :math:` xyz\\_geq\\text {@} int\\_slack ` che sono state introdotte da ``InequalityToEquality`` sono anche sostituite con tre variabili binarie con coefficienti 1, 2, 2 e 1, 2, 3, rispettivamente."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:494
msgid "Note: Essentially the coefficients mean that the sum of these binary variables with coefficients can be the sum of a subset of :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, and :math:`\\{1, 2, 3\\}` to represent that acceptable values :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}`, and :math:`\\{0, \\ldots, 6\\}`, which respects the lower bound and the upper bound of original integer variables correctly."
msgstr "Nota: Essenzialmente i coefficienti significano che la somma di queste variabili binarie con coefficienti può essere la somma di un sottoinsieme di :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, e :math:`\\{1, 2, 3\\}` per rappresentare i valori accettabili :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}`, e :math:`\\{0, \\ldots, 6\\}`, che rispetta correttamente il limite inferiore e il limite superiore delle variabili intere originali."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:496
msgid "``IntegerToBinary`` also provides ``interpret`` method that is the functionality to translate a given binary result back to the original integer representation."
msgstr "``IntegerToBinary`` fornisce anche il metodo ``interpret`` che è la funzionalità per tradurre un determinato risultato binario alla rappresentazione intera originale."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:508
msgid "LinearEqualityToPenalty"
msgstr "LinearEqualityToPenalty"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:519
msgid "``LinearEqualityToPenalty`` converts linear equality constraints into additional quadratic penalty terms of the objective function to map ``QuadraticProgram`` to an unconstrained form. An input to the converter has to be a ``QuadraticProgram`` with only linear equality constraints. Those equality constraints, e.g. \\ :math:`\\sum_i a_i x_i = b` where :math:`a_i` and :math:`b` are numbers and :math:`x_i` is a variable, will be added to the objective function in the form of :math:`M(b - \\sum_i a_i x_i)^2` where :math:`M` is a large number as penalty factor. By default :math:`M= 1e5`. The sign of the term depends on whether the problem type is a maximization or minimization."
msgstr "``LinearEqualityToPenalty`` converte vincoli di uguaglianza lineare in ulteriori termini di penalità quadratica della funzione obiettivo per mappare ``QuadraticProgram`` in una forma non vincolata. Un input al convertitore deve essere un ``QuadraticProgram`` con soli vincoli di uguaglianza lineari. Questi vincoli di uguaglianza, ad esempio \\ :math:`\\sum_i a_i x_i = b` dove :math:`a_i` e :math:`b` sono numeri e :math:`x_i` è una variabile, saranno aggiunti alla funzione obiettivo nella forma di :math:`M(b - \\sum_i a_i x_i)^2` dove :math:`M` è un numero elevato come fattore di penalità. Per default :math:`M= 1e5`. Il segno del termine dipende da se il tipo di problema è una massimizzazione o una minimizzazione."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:522
msgid "We use the output of ``IntegerToBinary`` as starting point, where all variables are binary variables and all inequality constraints have been mapped to equality constraints. We print the problem again for reference."
msgstr "Utilizziamo l'output di ``IntegerToBinary`` come punto di partenza, dove tutte le variabili sono binarie e con vincoli di disuguaglianza mappati ai vincoli di uguaglianza. Stampiamo di nuovo il problema per riferimento."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:620
msgid "Call ``convert`` method of ``LinearEqualityToPenalty`` to convert."
msgstr "Chiama il metodo ``convert`` di ``LinearEqualityToPenalty`` per effettuare la conversione."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:774
msgid "After converting, the equality constraints are added to the objective function as additional terms with the default penalty factor :math:`M=1e5`. The resulting problem is now a QUBO and compatible with many quantum optimization algorithms such as VQE, QAOA and so on."
msgstr "Dopo la conversione, i vincoli di uguaglianza vengono aggiunti alla funzione oggettiva come termini aggiuntivi con il penaltu factor di default :math:` M=1e5 `. Il problema risultante è ora QUBO e compatibile con molti algoritmi di ottimizzazione quantistica come VQE, QAOA e così via."

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:785
msgid "This gives the same result as before."
msgstr "Questo dà lo stesso risultato di prima."

