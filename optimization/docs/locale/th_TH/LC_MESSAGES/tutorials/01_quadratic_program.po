msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-04 19:50+0000\n"
"PO-Revision-Date: 2023-08-14 19:17\n"
"Last-Translator: \n"
"Language: th\n"
"Language-Team: Thai\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: th\n"
"X-Crowdin-File: /main/optimization/docs/locale/en/LC_MESSAGES/tutorials/01_quadratic_program.po\n"
"X-Crowdin-File-ID: 9642\n"

#: ../../tutorials/01_quadratic_program.ipynb:9
msgid "This page was generated from `docs/tutorials/01_quadratic_program.ipynb`__."
msgstr "หน้านี้ถูกสร้างขึ้นจาก `docs/tutorial s/01 _ neural _ network. Ipynb`__"

#: ../../tutorials/01_quadratic_program.ipynb:9
msgid "Quadratic Programs"
msgstr "Quadratic Program"

#: ../../tutorials/01_quadratic_program.ipynb:21
msgid "Introduction"
msgstr "บทนำ"

#: ../../tutorials/01_quadratic_program.ipynb:32
msgid "In this tutorial, we briefly introduce how to build optimization problems using Qiskit's optimization module. Qiskit introduces the ``QuadraticProgram`` class to make a model of an optimization problem. More precisely, it deals with quadratically constrained quadratic programs given as follows:"
msgstr ""

#: ../../tutorials/01_quadratic_program.ipynb:34
msgid "\\begin{align}\n"
"\\text{minimize}\\quad& x^\\top Q_0 x + c^\\top x\\\\\n"
"\\text{subject to}\\quad& A x \\leq b\\\\\n"
"& x^\\top Q_i x + a_i^\\top x \\leq r_i, \\quad 1,\\dots,i,\\dots,q\\\\\n"
"& l_i \\leq x_i \\leq u_i, \\quad 1,\\dots,i,\\dots,n,\n"
"\\end{align}"
msgstr "\\begin{align}\n"
"\\text{minimize}\\quad& x^\\top Q_0 x + c^\\top x\\\\\n"
"\\text{subject to}\\quad& A x \\leq b\\\\\n"
"& x^\\top Q_i x + a_i^\\top x \\leq r_i, \\quad 1,\\dots,i,\\dots,q\\\\\n"
"& l_i \\leq x_i \\leq u_i, \\quad 1,\\dots,i,\\dots,n,\n"
"\\end{align}"

#: ../../tutorials/01_quadratic_program.ipynb:44
msgid "where the :math:`Q_i` are :math:`n \\times n` matrices, :math:`A` is a :math:`m \\times n` matrix , :math:`x`, and :math:`c` are :math:`n`-dimensional vectors, :math:`b` is an :math:`m`-dimensional vector, and where :math:`x` can be defined as binary, integer, or continuous variables. In addition to \":math:`\\leq`\" constraints ``QuadraticProgram`` also supports \":math:`\\geq`\" and \":math:`=`\"."
msgstr ""

#: ../../tutorials/01_quadratic_program.ipynb:56
msgid "Loading a ``QuadraticProgram`` from an LP file"
msgstr "การนำเข้า ``QuadraticProgram`` จากไฟล์ LP"

#: ../../tutorials/01_quadratic_program.ipynb:67
msgid "As setup, you need to import the following module."
msgstr "ในการเริ่มใช้งานคุณจำเป็นต้องนำเข้าโมดูลดังต่อไปนี้"

#: ../../tutorials/01_quadratic_program.ipynb:89
msgid "You start with an empty model. How to add variables and constraints to a model is explained in the section `Directly constructing a QuadraticProgram <#Directly-constructing-a-QuadraticProgram>`__."
msgstr "ในตอนเริ่มต้นโมเดลของเราจะเป็นโมเดลเปล่า ในการเพิ่มตัวแปรและข้อจำกัดให้กับโมเดล สามารถทำได้ตามคำอธิบายในส่วน `การสร้าง QuadraticProgram โดยตรง <#Directly-constructing-a-QuadraticProgram>`__."

#: ../../tutorials/01_quadratic_program.ipynb:100
msgid "Qiskit's optimization module supports the conversion from Docplex model. You can easily make a model of an optimization problem with Docplex. You can find the documentation of Docplex at https://ibmdecisionoptimization.github.io/docplex-doc/mp/index.html"
msgstr ""

#: ../../tutorials/01_quadratic_program.ipynb:102
msgid "You can load a Docplex model to ``QuadraticProgram`` by using ``from_docplex_mp`` function."
msgstr "สามารถโหลดโมเดล Docplex มาเป็น ``QuadraticProgram`` ได้ด้วยฟังก์ชัน ``from_docplex_mp``"

#: ../../tutorials/01_quadratic_program.ipynb:114
msgid "Loading a ``QuadraticProgram`` from a docplex model"
msgstr "การนำเข้า ``QuadraticProgram`` จากโมเดล docplex"

#: ../../tutorials/01_quadratic_program.ipynb:228
msgid "``QuadraticProgram`` has a method ``prettyprint`` to generate a comprehensive string representation."
msgstr "``QuadraticProgram`` มี Method ``prettyprint`` ใช้ในการสร้างการแสดงผล String ด้วยรูปแบบที่เหมาะสม"

#: ../../tutorials/01_quadratic_program.ipynb:335
msgid "Directly constructing a ``QuadraticProgram``"
msgstr "การสร้าง ``QuadraticProgram`` โดยตรง"

#: ../../tutorials/01_quadratic_program.ipynb:346
msgid "We then explain how to make model of an optimization problem directly using ``QuadraticProgram``. Let's start from an empty model."
msgstr ""

#: ../../tutorials/01_quadratic_program.ipynb:420
msgid "The ``QuadraticProgram`` supports three types of variables:"
msgstr "``QuadraticProgram`` สามารถใช้งานได้กับตัวแปร 3 ประเภท"

#: ../../tutorials/01_quadratic_program.ipynb:422
msgid "Binary variable"
msgstr "ตัวแปรไบนารี่"

#: ../../tutorials/01_quadratic_program.ipynb:423
msgid "Integer variable"
msgstr "ตัวแปรจำนวนเต็ม"

#: ../../tutorials/01_quadratic_program.ipynb:424
msgid "Continuous variable"
msgstr "ตัวแปรต่อเนื่อง"

#: ../../tutorials/01_quadratic_program.ipynb:426
msgid "When you add variables, you can specify names, types, lower bounds and upper bounds."
msgstr "เมื่อคุณเพิ่มตัวแปรเข้าไปในโมเดล คุณสามารถระบุชื่อ, ประเภท, ขอบเขตบน และ ขอบเขตล่างของตัวแปรได้"

#: ../../tutorials/01_quadratic_program.ipynb:523
msgid "You can set the objective function by invoking ``QuadraticProgram.minimize`` or ``QuadraticProgram.maximize``. You can add a constant term as well as linear and quadratic objective function by specifying linear and quadratic terms with either list, matrix or dictionary."
msgstr "คุณสามารถกำหนดฟังก์ชันวัตถุประสงค์ได้โดยการเรียกใช้ ``QuadraticProgram.minimize`` หรือ ``QuadraticProgram.maximize`` และสามารถเพิ่มพจน์ที่เป็นฟังก์ชันวัตถุประสงค์แบบค่าคงที่, เส้นตรง และ กำลังสอง เข้าไปได้โดยการระบุ พจน์เส้นตรง และ กำลังสองในลักษณะของตัวแปรประเภท List, Matrix หรือ Dictionary"

#: ../../tutorials/01_quadratic_program.ipynb:525
msgid "Note that in the LP format the quadratic part has to be scaled by a factor :math:`1/2`. Thus, when printing as LP format, the quadratic part is first multiplied by 2 and then divided by 2 again."
msgstr "หมายเหตุ รูปแบบของ LP ในส่วนกำลังสองจะต้องหารด้วยค่าเศษส่วน :math:`1/2` เพื่อให้ได้มีตัวคูณของเป็นของพจน์กำลังสองเป็น 1 เนื่องจากส่วนกำลังสองในสมการวัตถุประสงค์จะมีการหารด้วย 2"

#: ../../tutorials/01_quadratic_program.ipynb:527
msgid "For quadratic programs, there are 3 pieces that have to be specified: a constant (offset), a linear term (:math:`c^{T}x`), and a quadratic term (:math:`x^{T}Qx`)."
msgstr "ในกำหนดการกำลังสองมีอยู่ 3 ส่วนที่เราต้องทำการกำหนด คือ: ค่าคงที่, พจน์เส้นตรง (:math:`c^{T}x`) และ พจน์กำลังสอง (:math:`x^{T}Qx`)"

#: ../../tutorials/01_quadratic_program.ipynb:529
msgid "The cell below shows how to declare an objective function using a dictionary. For the linear term, keys in the dictionary correspond to variable names, and the corresponding values are the coefficients. For the quadratic term, keys in the dictionary correspond to the two variables being multiplied, and the values are again the coefficients."
msgstr "ในกล่องด้านล่างแสดงให้เห็นวิธีการกำหนดฟังก์ชันวัตถุประสงค์ด้วย Dictionary สำหรับพจน์เส้นตรง Key ใน Dictionary คือชื่อของตัวแปร และ ค่าที่ Key นั้น ๆ ชี้ไป คือค่าสัมประสิทธิ์ สำหรับพจน์กำลังสอง Key ใน Dictionary คือตัวแปรที่คูณกัน 2 ตัว และ มีค่าที่ Key นั้น ๆ ชี้ไปเป็นค่าสัมประสิทธิ์"

#: ../../tutorials/01_quadratic_program.ipynb:624
msgid "Another way to specify the quadratic program is using arrays. For the linear term, the array corresponds to the vector :math:`c` in the mathematical formulation. For the quadratic term, the array corresponds to the matrix :math:`Q`. Note that the ordering of the variables (:math:`x` in the mathematical formulation) is the order in which the variables were originally declared in the ``QuadraticProgram`` object."
msgstr "อีกหนึ่งวิธีในการกำหนดกำหนดการกำลังสองคือการใช้ Array สำหรับพจน์เส้นตรง Array จะมีค่าตามเวกเตอร์ :math:`c` ในสมการคณิตศาสตร์ สำหรับพจน์กำลังสองค่าใน Array จะมีค่าตามเมทริกซ์ :math:`Q` หมายเหตุ ลำดับของตัวแปร (:math:`x` ในสมการคณิตศาสตร์) ขึ้นอยู่กับว่าตัวแปรไหนถูกประกาศก่อนกันใน Object ``QuadraticProgram``"

#: ../../tutorials/01_quadratic_program.ipynb:719
msgid "You can access the constant, the linear term, and the quadratic term by looking at ``Quadratic.objective.{constant, linear, quadratic}``, respectively. As for linear and quadratic terms, you can get a dense matrix (``to_array``), a sparse matrix (``coefficients``), and a dictionary (``to_dict``). For dictionaries, you can specify whether to use variable indices or names as keys. Note that the quadratic terms are stored in a compressed way, e.g., ``{('x', 'y'): 1, ('y', 'x'): 2}`` is stored as ``{('x', 'y'): 3}``. You can get the quadratic term as a symmetric matrix by calling ``to_array(symmetric=True)`` or ``to_dict(symmetric=True)``. If you call ``to_dict(name=True)``, you can get a dictionary whose keys are pairs of variable names."
msgstr "คุณสามารถเข้าถึงค่าคงที่, พจน์เส้นตรง และ พจน์กำลังสองได้ โดยการดูที่ ``Quadratic.objective.{constant, linear, quadratic}`` ตามลำดับ สำหรับพจน์เส้นตรงและพจน์กำลังสอง คุณสามารถดูค่า Dense Matrix (``to_array``), Sparse Matrix (``coefficients``) และ Dictionary (``to_dict``) สำหรับ Dictionary คุณสามารถเข้าถึงตัวแปรต่าง ๆ ได้ผ่านทาง Key หมายเหตุ พจน์กำลังสองจะถูกรวบในกรณีที่มีค่าเหมือนกัน เช่น ``{('x', 'y'): 1, ('y', 'x'): 2}`` ถูกเก็บในลักษณะ ``{('x', 'y'): 3}`` คุณสามารถรับค่าพจน์กำลังสองในลักษณะ Symmetric โดยการเรียกใช้ ``to_array(symmetric=True)`` หรือ ``to_dict(symmetric=True)`` ถ้าคุณเรียกใช้ ``to_dict(name=True)`` คุณจะได้ Dictionary ที่มี Key เป็นคู่ของขื่อตัวแปร"

#: ../../tutorials/01_quadratic_program.ipynb:841
msgid "Adding/removing linear and quadratic constraints"
msgstr "การเพิ่ม/ลด ข้อจำกัดแบบเส้นตรงและกำลังสอง"

#: ../../tutorials/01_quadratic_program.ipynb:852
msgid "You can add linear constraints by setting name, linear expression, sense and right-hand-side value (rhs). You can use senses 'EQ', 'LE', and 'GE' as Docplex supports."
msgstr ""

#: ../../tutorials/01_quadratic_program.ipynb:958
msgid "You can add quadratic constraints as well as objective function and linear constraints."
msgstr "คุณสามารถเพิ่มข้อจำกัดกำลังสองได้ เช่นเดียวกับฟังก์ชันวัตถุประสงค์ และ ข้อจำกัดแบบเส้นตรง"

#: ../../tutorials/01_quadratic_program.ipynb:1097
msgid "You can access linear and quadratic terms of linear and quadratic constraints as in the same way as the objective function."
msgstr "คุณสามารถเข้าถึงพจน์เส้นตรงและกำลังสองของข้อจำกัดเส้นตรงและกำลังสองได้เช่นเดียวกับการเข้าถึงฟังก์ชันวัตถุประสงค์"

#: ../../tutorials/01_quadratic_program.ipynb:1154
msgid "You can also remove linear/quadratic constraints by ``remove_linear_constraint`` and ``remove_quadratic_constraint``."
msgstr "คุณสามารถนำข้อจำกัดเส้นตรง/กำลังสองออกได้ด้วย ``remove_linear_constraint`` and ``remove_quadratic_constraint``"

#: ../../tutorials/01_quadratic_program.ipynb:1268
msgid "You can substitute some of variables with constants or other variables. More precisely, ``QuadraticProgram`` has a method ``substitute_variables(constants=..., variables=...)`` to deal with the following two cases."
msgstr "คุณสามารถแทนที่บางตัวแปรด้วยค่าคงที่หรือตัวแปรอื่นได้ จากการใช้ Method ``substitute_variables(constants=..., variables=...)`` ใน ``QuadraticProgram`` เพื่อจัดการในสองกรณี"

#: ../../tutorials/01_quadratic_program.ipynb:1270
msgid ":math:`x \\leftarrow c`: when ``constants`` have a dictionary ``{x: c}``."
msgstr ":math:`x \\leftarrow c`: เมื่อ ``constants`` มี Dictionary ``{x: c}``."

#: ../../tutorials/01_quadratic_program.ipynb:1271
msgid ":math:`x \\leftarrow c y`: when ``variables`` have a dictionary ``{x: (y, c)}``."
msgstr ":math:`x \\leftarrow c y`: เมื่อ ``variables`` มี Dictionary ``{x: (y, c)}``."

#: ../../tutorials/01_quadratic_program.ipynb:1283
msgid "Substituting Variables"
msgstr "การแทนที่ตัวแปร"

#: ../../tutorials/01_quadratic_program.ipynb:1377
msgid "If the resulting problem is infeasible due to lower bounds or upper bounds, the methods returns the status ``Status.INFEASIBLE``. We try to replace variable ``x`` with -1, but -1 is out of range of ``x`` (0 <= ``x`` <= 1). So, it returns ``Status.INFEASIBLE``."
msgstr "ถ้าคำตอบของโจทย์ปัญหานั้นเป็นคำตอบที่เป็นไปไม่ได้เนื่องจากขอบเขตล่าง หรือขอบเขตบน ผลลัพธ์จะส่งค่า Status ``Status.INFEASIBLE`` เช่นการที่เราพยายามกำหนดค่า ``x`` เป็น -1 แต่ค่า -1 นั้นมีค่าที่อยู่นอกขอบเขตของ ``x`` (0 <= ``x`` <= 1) จะได้ผลลลัพธ์ออกมาเป็น ``Status.INFEASIBLE``"

#: ../../tutorials/01_quadratic_program.ipynb:1449
msgid "You cannot substitute variables multiple times. The method raises an error in such a case."
msgstr "Method จะทำการแจ้งเตือนข้อผิดพลาดในกรณีที่คุณระบุการแทนที่ตัวแปรซ้ำหลายครั้งในการเรียกครั้งเดียว"

#: ../../tutorials/01_quadratic_program.ipynb:1499
msgid "Note: When you display your problem as LP format using ``export_as_lp_string``, ``Binaries`` denotes binary variables and ``Generals`` denotes integer variables. If variables are not included in either ``Binaries`` or ``Generals``, such variables are continuous ones with default lower bound = 0 and upper bound = infinity. Note that you cannot use 'e' or 'E' as the first character of names due to the `specification of LP format <https://www.ibm.com/docs/en/icos/22.1.0?topic=representation-variable-names-in-lp-file-format>`__."
msgstr ""

