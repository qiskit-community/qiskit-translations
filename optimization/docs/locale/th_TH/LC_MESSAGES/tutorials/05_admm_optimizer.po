msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-14 08:10+0000\n"
"PO-Revision-Date: 2023-11-14 08:45\n"
"Last-Translator: \n"
"Language: th\n"
"Language-Team: Thai\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: th\n"
"X-Crowdin-File: /main/optimization/docs/locale/en/LC_MESSAGES/tutorials/05_admm_optimizer.po\n"
"X-Crowdin-File-ID: 9650\n"

#: ../../tutorials/05_admm_optimizer.ipynb:9
msgid "This page was generated from `docs/tutorials/05_admm_optimizer.ipynb`__."
msgstr "หน้านี้ถูกสร้างขึ้นจาก `docs/tutorials/05_admm_optimizer.ipynb`__"

#: ../../tutorials/05_admm_optimizer.ipynb:9
msgid "ADMM Optimizer"
msgstr "ADMM Optimizer"

#: ../../tutorials/05_admm_optimizer.ipynb:21
msgid "Introduction"
msgstr "บทนำ"

#: ../../tutorials/05_admm_optimizer.ipynb:32
msgid "The ADMM Optimizer can solve classes of mixed-binary constrained optimization problems, hereafter (MBCO), which often appear in logistic, finance, and operation research. In particular, the ADMM Optimizer here designed can tackle the following optimization problem :math:`(P)`:"
msgstr "ADMM Optimizer สามารถแก้ไขปัญหาในหมวด Mixed-Binary Constrained Optimization (MBCO) ได้ ซึ่งพบบ่อยในงานด้าน โลจิสติกส์, การเงิน และ Operation Research โดย ADMM Optimizer ออกแบบมาเจาะจงไปที่การใช้แก้ปัญหา Optimization :math:`(P)` ในลักษณะดังนี้:"

#: ../../tutorials/05_admm_optimizer.ipynb:34
msgid "\\min_{x \\in \\mathcal{X},u\\in\\mathcal{U} \\subseteq \\mathbb{R}^l } \\quad q(x) + \\varphi(u),"
msgstr "\\min_{x \\in \\mathcal{X},u\\in\\mathcal{U} \\subseteq \\mathbb{R}^l } \\quad q(x) + \\varphi(u),"

#: ../../tutorials/05_admm_optimizer.ipynb:39
msgid "subject to the constraints:"
msgstr "โดยมีข้อจำกัด:"

#: ../../tutorials/05_admm_optimizer.ipynb:41
msgid "\\mathrm{s.t.:~} \\quad G x = b, \\quad  g(x) \\leq 0, \\quad \\ell(x, u) \\leq 0,"
msgstr "\\mathrm{s.t.:~} \\quad G x = b, \\quad  g(x) \\leq 0, \\quad \\ell(x, u) \\leq 0,"

#: ../../tutorials/05_admm_optimizer.ipynb:46
msgid "with the corresponding functional assumptions."
msgstr "โดยฟังก์ชันมีคุณสมบัติดังนี้"

#: ../../tutorials/05_admm_optimizer.ipynb:48
msgid "Function :math:`q: \\mathbb{R}^n \\to \\mathbb{R}` is quadratic, i.e., :math:`q(x) = x^{\\intercal} Q x + a^{\\intercal} x` for a given symmetric squared matrix :math:`Q \\in \\mathbb{R}^n \\times \\mathbb{R}^n, Q = Q^{\\intercal}`, and vector :math:`a \\in \\mathbb{R}^n`;"
msgstr "ฟังก์ชัน :math:`q: \\mathbb{R}^n \\to \\mathbb{R}` เป็นฟังก์ชันกำลังสองคือ :math:`q(x) = x^{\\intercal} Q x + a^{\\intercal} x` สำหรับเมทริกซ์จัตุรัสแบบสมมาตร :math:`Q \\in \\mathbb{R}^n \\times \\mathbb{R}^n, Q = Q^{\\intercal}` และเวกเตอร์ :math:`a \\in \\mathbb{R}^n`;"

#: ../../tutorials/05_admm_optimizer.ipynb:49
msgid "The set :math:`\\mathcal{X} = \\{0,1\\}^n = \\{x_{(i)} (1-x_{(i)}) = 0, \\forall i\\}` enforces the binary constraints;"
msgstr "เซต :math:`\\mathcal{X} = \\{0,1\\}^n = \\{x_{(i)} (1-x_{(i)}) = 0, \\forall i\\}` คือเซตที่ใช้บังคับให้ตัวแปรเป็นตัวแปรไบนารี่;"

#: ../../tutorials/05_admm_optimizer.ipynb:50
msgid "Matrix :math:`G\\in\\mathbb{R}^n \\times \\mathbb{R}^{n'}`, vector :math:`b \\in \\mathbb{R}^{n'}`, and function :math:`g: \\mathbb{R}^n \\to \\mathbb{R}` is convex;"
msgstr "เมทริกซ์ :math:`G\\in\\mathbb{R}^n \\times \\mathbb{R}^{n'}` เวกเตอร์ :math:`b \\in \\mathbb{R}^{n'}` และฟังก์ชัน :math:`g: \\mathbb{R}^n \\to \\mathbb{R}` เป็นคอนเวกซ์ฟังก์ชัน;"

#: ../../tutorials/05_admm_optimizer.ipynb:51
msgid "Function :math:`\\varphi: \\mathbb{R}^l \\to \\mathbb{R}` is convex and :math:`\\mathcal{U}` is a convex set;"
msgstr "ฟังก์ชัน :math:`\\varphi: \\mathbb{R}^l \\to \\mathbb{R}` เป็นคอนเวกซ์ฟังก์ชันและ :math:`\\mathcal{U}` เป็นเซตคอนเวกซ์;"

#: ../../tutorials/05_admm_optimizer.ipynb:52
msgid "Function :math:`\\ell: \\mathbb{R}^n\\times \\mathbb{R}^l \\to \\mathbb{R}` is *jointly* convex in :math:`x, u`."
msgstr "ฟังก์ชัน :math:`\\ell: \\mathbb{R}^n\\times \\mathbb{R}^l \\to \\mathbb{R}` เป็นฟังก์ชันคอนเวกซ์ *ร่วม* ใน :math:`x, u`."

#: ../../tutorials/05_admm_optimizer.ipynb:63
msgid "In order to solve MBO problems, [1] proposed heuristics for :math:`(P)` based on the Alternating Direction Method of Multipliers (ADMM) [2]. ADMM is an operator splitting algorithm with a long history in convex optimization, and it is known to have residual, objective and dual variable convergence properties, provided that convexity assumptions are holding."
msgstr "ในการแก้ไขโจทย์ MBO [1] ได้ใช้วิธี Heuristic เพื่อหา :math:`(P)` ด้วย Alternating Direction Method of Multipliers (ADMM) [2] ADMM เป็นอัลกอริทึมที่ใช้ในการแยกตัวดำเนินการออกจากกันซึ่ง มีการใช้มาอย่างยาวนานในวงการ Convex Optimization ซึ่งเป็นที่รู้กันว่าเป็นอัลกอริทึมที่มีคุณสมบัติ Residual, Objective และ Variable Convergence ซึ่งเป็นสิ่งที่มีอยู่ใน Convexity Assumption"

#: ../../tutorials/05_admm_optimizer.ipynb:65
msgid "The method of [1] (referred to as 3-ADMM-H) leverages the ADMM operator-splitting procedure to devise a decomposition for certain classes of MBOs into:"
msgstr "วิธีการของ [1] (ระบุว่าเป็น 3-ADMM-H) ใช้ประโยชน์จาก ADMM ในการแยกตัวดำเนินการออกเพื่อแยกองค์ประกอบของโจทย์ปัญหา MBOs ออกมาเป็นหลายหมวดหมู่คือ:"

#: ../../tutorials/05_admm_optimizer.ipynb:67
msgid "a QUBO subproblem to be solved by on the quantum device via variational algorithms, such as VQE or QAOA;"
msgstr "ปัญหาย่อย QUBO สามารถใช้ควอนตัมคอมพิวเตอร์แก้โจทย์ปัญหาได้ด้วย Variational Algorithm เช่น VQE หรือ QAOA;"

#: ../../tutorials/05_admm_optimizer.ipynb:68
msgid "continuous convex constrained subproblem, which can be efficiently solved with classical optimization solvers."
msgstr "โจทย์ปัญหาย่อย Continuous Convex Constrained ซึ่งสามารถใช้อัลกอริทึม Optimization แบบดั้งเดิมในการแก้โจทย์ได้ดี"

#: ../../tutorials/05_admm_optimizer.ipynb:70
msgid "The algorithm 3-ADMM-H works as follows:"
msgstr "อัลกอริทึม 3-ADMM-H มีการทำงานดังนี้:"

#: ../../tutorials/05_admm_optimizer.ipynb:72
msgid "Initialization phase (set the parameters and the QUBO and convex solvers);"
msgstr "สร้างเฟสตั้งต้น (ตั้งค่าพารามิเตอร์และ QUBO และอัลกอริทึมสำหรับแก้โจทย์คอนเวกซ์)"

#: ../../tutorials/05_admm_optimizer.ipynb:73
msgid "For each ADMM iterations ($k = 1, 2, :nbsphinx-math:`\\ldots`, $) until termination:"
msgstr "สำหรับแต่ละรอบการทำงานของ ADMM ($k = 1, 2, :nbsphinx-math:`\\ldots`, $) จนกว่าจะจบการทำงาน:"

#: ../../tutorials/05_admm_optimizer.ipynb:75
msgid "Solve a properly defined QUBO subproblem (with a classical or quantum solver);"
msgstr "หาคำตอบของโจทย์ปัญหาย่อย QUBO (ด้วยอัลกอริทึมแบบดังเดิมหรือแบบควอนตัม)"

#: ../../tutorials/05_admm_optimizer.ipynb:76
msgid "Solve properly defined convex problems (with a classical solver);"
msgstr "หาคำตอบของโจทย์ปัญหาคอนเวกซ์ที่กำหนดไว้ (ด้วยอัลกอริทึมแบบดั้งเดิม)"

#: ../../tutorials/05_admm_optimizer.ipynb:77
msgid "Update the dual variables."
msgstr "อัปเดตค่าตัวแปรทั้งสองตัวแปร"

#: ../../tutorials/05_admm_optimizer.ipynb:79
msgid "Return optimizers and cost."
msgstr "ส่งคืน Optimizer และค่า Cost"

#: ../../tutorials/05_admm_optimizer.ipynb:81
msgid "A comprehensive discussion on the conditions for convergence, feasibility and optimality of the algorithm can be found in [1]. A variant with 2 ADMM blocks, namely a QUBO subproblem, and a continuous convex constrained subproblem, is also introduced in [1]."
msgstr "การอภิปรายเกี่ยวกับเงื่อนไขของ Convergence, Feasibility และ Optimality ของอัลกอริทึม สามารถดูได้ใน [1] ในการใช้งานกับโจทย์ลักษณะอื่น ๆ ได้แก่ในส่วนของโจทย์ปัญหาย่อย QUBO และ โจทย์ปัญหาย่อย Continuous Convex Constrained ได้มีการพูดถึงใน [1] เช่นกัน"

#: ../../tutorials/05_admm_optimizer.ipynb:84
msgid "References"
msgstr "แหล่งอ้างอิง"

#: ../../tutorials/05_admm_optimizer.ipynb:86
msgid "[1] `C. Gambella and A. Simonetto, Multi-block ADMM heuristics for mixed-binary optimization, on classical and quantum computers, arXiv preprint arXiv:2001.02069 (2020). <https://arxiv.org/abs/2001.02069>`__"
msgstr "[1] `C. Gambella and A. Simonetto, Multi-block ADMM heuristics for mixed-binary optimization, on classical and quantum computers, arXiv preprint arXiv:2001.02069 (2020). <https://arxiv.org/abs/2001.02069>`__"

#: ../../tutorials/05_admm_optimizer.ipynb:88
msgid "[2] `S. Boyd, N. Parikh, E. Chu, B. Peleato, and J. Eckstein, Distributed optimization and statistical learning via the alternating direction method of multipliers, Foundations and Trends in Machine learning, 3, 1–122 (2011). <https://web.stanford.edu/~boyd/papers/pdf/admm_distr_stats.pdf>`__"
msgstr "[2] `S. Boyd, N. Parikh, E. Chu, B. Peleato, and J. Eckstein, Distributed optimization and statistical learning via the alternating direction method of multipliers, Foundations and Trends in Machine learning, 3, 1–122 (2011). <https://web.stanford.edu/~boyd/papers/pdf/admm_distr_stats.pdf>`__"

#: ../../tutorials/05_admm_optimizer.ipynb:100
msgid "Initialization"
msgstr "เริ่มต้นการทำงาน"

#: ../../tutorials/05_admm_optimizer.ipynb:102
msgid "First of all we load all the packages that we need."
msgstr "ขั้นตอนแรกทำการโหลดแพ็กเกจที่จำเป็น"

#: ../../tutorials/05_admm_optimizer.ipynb:138
msgid "We first initialize all the algorithms we plan to use later in this tutorial."
msgstr "ประกาศใช้งานอัลกอริทึมที่จะใช้ในบทเรียนนี้ทั้งหมด"

#: ../../tutorials/05_admm_optimizer.ipynb:140
msgid "To solve the QUBO problems we can choose between"
msgstr "เพื่อหาคำตอบของโจทย์ปัญหา QUBO เราสามารถเลือกใช้ระหว่าง"

#: ../../tutorials/05_admm_optimizer.ipynb:142
msgid "``MinimumEigenOptimizer`` using different ``MinimumEigensolver``, such as ``SamplingVQE``, ``QAOA`` or ``NumpyMinimumEigensolver`` (classical)"
msgstr ""

#: ../../tutorials/05_admm_optimizer.ipynb:143
msgid "``GroverOptimizer``"
msgstr "``GroverOptimizer``"

#: ../../tutorials/05_admm_optimizer.ipynb:144
msgid "``CplexOptimizer`` (classical, if CPLEX is installed)"
msgstr "``CplexOptimizer`` (อัลกอริทึมแบบดั้งเดิม สามารถใช้งานได้เมื่อมีการติดตั้ง CPLEX)"

#: ../../tutorials/05_admm_optimizer.ipynb:146
msgid "and to solve the convex continuous problems we can choose between the following classical solvers:"
msgstr "ในการแก้ปัญหาคอนเวกซ์แบบต่อเนื่อง เราสามารถเลือกใช้อัลกอริทึมแบบดั้งเดิมเหล่านี้ในการแก้ปัญหาได้:"

#: ../../tutorials/05_admm_optimizer.ipynb:148
msgid "``CplexOptimizer`` (if CPLEX is installed)"
msgstr "``CplexOptimizer`` (สามารถใช้งานได้เมื่อมีการติดตั้ง CPLEX)"

#: ../../tutorials/05_admm_optimizer.ipynb:149
msgid "``CobylaOptimizer``"
msgstr "``CobylaOptimizer``"

#: ../../tutorials/05_admm_optimizer.ipynb:151
msgid "In case CPLEX is not available, the ``CobylaOptimizer`` (for convex continuous problems) and the ``MinimumEigenOptimizer`` using the ``NumpyMinimumEigensolver`` (for QUBOs) can be used as classical alternatives to CPLEX for testing, validation, and benchmarking."
msgstr "ในกรณีที่ไม่สามารถใช้งาน CPLEX ได้ ``CobylaOptimizer`` (สำหรับโจทย์ปัญหาคอนเวกซ์แบบต่อเนื่อง) และ ``MinimumEigenOptimizer`` ที่ใช้งาน ``NumpyMinimumEigensolver`` (สำหรับโจทย์ปัญหา QUBOs) เป็นอัลกอริทึมแบบดั้งเดิมที่สามารถนำมาใช้งานแทน CPLEX ได้ทั้งในการทดสอบ, ตรวจสอบ และ วัดประสิทธิภาพ"

#: ../../tutorials/05_admm_optimizer.ipynb:185
msgid "Example"
msgstr "ตัวอย่าง"

#: ../../tutorials/05_admm_optimizer.ipynb:187
msgid "We test 3-ADMM-H algorithm on a simple Mixed-Binary Quadratic Problem with equality and inequality constraints (Example 6 reported in [1]). We first construct a docplex problem and then load it into a ``QuadraticProgram``."
msgstr "เราทำการทดสอบอัลกอริทึม 3-ADMM-H ด้วยโจทย์on Mixed-Binary Quadratic Problem อย่างง่าย โดยมีข้อจำกัดทั้งแบบสมการและอสมการ (ตัวอย่างที่ 6 ใน [1]) เราเริ่มต้นที่การสร้างโจทย์ในรูปแบบ Docplex และแปลงไปเป็น ``QuadraticProgram``"

#: ../../tutorials/05_admm_optimizer.ipynb:296
msgid "Classical Solution"
msgstr "วิธีการแบบดั้งเดิม"

#: ../../tutorials/05_admm_optimizer.ipynb:298
msgid "3-ADMM-H needs a QUBO optimizer to solve the QUBO subproblem, and a continuous optimizer to solve the continuous convex constrained subproblem. We first solve the problem classically: we use the ``MinimumEigenOptimizer`` with the ``NumPyMinimumEigenSolver`` as a classical and exact QUBO solver and we use the ``CobylaOptimizer`` as a continuous convex solver. 3-ADMM-H supports any other suitable solver available in Qiskit optimization. For instance, ``SamplingVQE``, ``QAOA``, and ``GroverOptimizer`` can be invoked as quantum solvers, as demonstrated later. If CPLEX is installed, the ``CplexOptimizer`` can also be used as both, a QUBO and convex solver."
msgstr ""

#: ../../tutorials/05_admm_optimizer.ipynb:311
msgid "Parameters"
msgstr "พารามิเตอร์"

#: ../../tutorials/05_admm_optimizer.ipynb:313
msgid "The 3-ADMM-H are wrapped in class ``ADMMParameters``. Customized parameter values can be set as arguments of the class. In this example, parameters :math:`\\rho, \\beta` are initialized to :math:`1001` and :math:`1000`, respectively. The penalization ``factor_c`` of equality constraints :math:`Gx = b` is set to :math:`900`. The tolerance ``tol`` for primal residual convergence is set to ``1.e-6``. In this case, the 3-block implementation is guaranteed to converge for Theorem 4 of [1], because the inequality constraint with the continuous variable is always active. The 2-block implementation can be run by setting ``three_block=False``, and practically converges to a feasible not optimal solution."
msgstr "3-ADMM-H จะถูก Wrap อยู่ในคลาส ``ADMMParameters`` สามารถเลือกพารามิเตอร์ที่ต้องการได้ในตอนสร้างคลาส ในตัวอย่างนี้พารามิเตอร์ :math:`\\rho, \\beta` ถูกสร้างขึ้นเริ่มต้นที่ :math:`1001` และ :math:`1000` ตามลำดับ ค่าอัตราส่วน ``factor_c`` ของสมการข้อจำกัด :math:`Gx = b` ถูกตั้งไว้ที่ :math:`900` ค่า Tolerance ``tol`` สำหรับ Primal Residual Convergence ถูกตั้งไว้ที่ ``1.e-6`` ในกรณีนี้ จากทฤษฎีที่ 4 ใน [1] การทำงานแบบ 3-block นี้สามารถทำให้เกิดการลู่เข้าได้อย่างแน่นอน เนื่องจากอสมการข้อจำกัดขแงตัวแปรต่อเนื่องนั้นเป็นจริงเสมอ ในการทำงานแบบ 2-block สามารถเรียกใช้ได้ด้วยการระบุตัวแปรว่า ``three_block=False``และในการทำงานแบบนี้อาจจะทำให้ไม่สามารถลู่เข้าสู่ค่าที่ดีที่สุดได้ แต่ได้ค่าที่ใกล้เคียงกับค่าที่ดีที่สุดเท่านั้น"

#: ../../tutorials/05_admm_optimizer.ipynb:338
msgid "Calling 3-ADMM-H algorithm"
msgstr "การเรียกใช้อัลกอริทึม 3-ADMM-H"

#: ../../tutorials/05_admm_optimizer.ipynb:340
msgid "To invoke the 3-ADMM-H algorithm, an instance of the ``ADMMOptimizer`` class needs to be created. This takes ADMM-specific parameters and the subproblem optimizers separately into the constructor. The solution returned is an instance of ``OptimizationResult`` class."
msgstr "ในการเรียกใช้งานอัลกอริทึม 3-ADMM-H เราจำเป็นต้องประกาศคลาส ``ADMMOptimizer`` ขึ้นมาก่อน โดยการประกาศเราจะต้องกำหนดพารามิเตอร์และออบเจกต์ของโจทย์ปัญหาเข้าไปใน ADMM Constructor ในส่วนของผลลัพธ์จะถูกส่งกับออกมาในรูปแบบคลาส ``OptimizationResult``"

#: ../../tutorials/05_admm_optimizer.ipynb:384
msgid "Classical Solver Result"
msgstr "คำตอบจากอัลกอริทึมแบบดั้งเดิม"

#: ../../tutorials/05_admm_optimizer.ipynb:386
msgid "The 3-ADMM-H solution can be then printed and visualized. The ``x`` attribute of the solution contains respectively, the values of the binary decision variables and the values of the continuous decision variables. The ``fval`` is the objective value of the solution."
msgstr "เราสามารถแสดงคำตอบของ 3-ADMM-H ได้ โดย Attribute ``x`` ของคำตอบจะมีข้อมูล ค่าคำตอบของตัวแปรไบนารี่และค่าคำตอบของตัวแปรต่อเนื่อง ค่า ``fval`` คือค่าฟังก์ชันวัตถุประสงค์ของคำตอบ"

#: ../../tutorials/05_admm_optimizer.ipynb:437
msgid "Solution statistics can be accessed in the ``state`` field and visualized. We here display the convergence of 3-ADMM-H, in terms of primal residuals."
msgstr "ค่าทางสถิติของคำตอบสามารถเข้าดูได้ผ่าน ``state`` โดยสามารถนำมาแสดงการลู่เข้าในแง่ของ Primal Residual ได้"

#: ../../tutorials/05_admm_optimizer.ipynb:470
msgid "Quantum Solution"
msgstr "วิธีการแบบควอนตัม"

#: ../../tutorials/05_admm_optimizer.ipynb:472
msgid "We now solve the same optimization problem with QAOA as QUBO optimizer, running on simulated quantum device. First, one need to select the classical optimizer of the eigensolver QAOA. Then, the simulation backend is set. Finally, the eigensolver is wrapped into the ``MinimumEigenOptimizer`` class. A new instance of ``ADMMOptimizer`` is populated with QAOA as QUBO optimizer."
msgstr "เราสามารถนำโจทย์ปัญหา Optimization นี้มาใช้งานกับอัลกอริทึม QAOA บนเครื่องควอนตัมคอมพิวเตอร์ได้ด้วย QUBO Optimizer ในขั้นตอนแรกให้เราเลือกอัลกอริทึมแบบดั้งเดิมสำหรับการใช้ใน Eigensolver QAOA ถัดไปทำการตั้งค่าตัวจำลอง Backend สุดท้าย Eigensolver จะถูก Wrap รวมไว้ในคลาส ``MinimumEigenOptimizer`` ออบเจกต์ ``ADMMOptimizer`` ใหม่ที่ได้จะมีการเพิ่ม QAOA เข้ามาในลักษณะของ QUBO Optimizer"

#: ../../tutorials/05_admm_optimizer.ipynb:515
msgid "Quantum Solver Results"
msgstr "คำตอบจากควอนตัมอัลกอริทึม"

#: ../../tutorials/05_admm_optimizer.ipynb:517
msgid "Here we present the results obtained from the quantum solver. As in the example above ``x`` stands for the solution, the ``fval`` is for objective value."
msgstr "ในส่วนนี้เราได้มีการแสดงผลลัพธ์จากควอนตัมอัลกอริทึม โดย ``x`` ที่ได้คือคำตอบของโจทย์ปัญหา และ ``fval`` คือค่าฟังก์ชันวัตถุประสงค์ของคำตอบ"

