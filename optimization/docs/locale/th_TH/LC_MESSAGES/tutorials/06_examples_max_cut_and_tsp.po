msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-11 01:17+0000\n"
"PO-Revision-Date: 2022-12-06 08:08\n"
"Last-Translator: \n"
"Language-Team: Thai\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: th\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/06_examples_max_cut_and_tsp.po\n"
"X-Crowdin-File-ID: 9652\n"
"Language: th_TH\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:9
msgid "This page was generated from `docs/tutorials/06_examples_max_cut_and_tsp.ipynb`__."
msgstr "หน้านี้ถูกสร้างขึ้นจาก `docs/tutorials/06_examples_max_cut_and_tsp.ipynb`__"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:9
msgid "Max-Cut and Traveling Salesman Problem"
msgstr "โจทย์ปัญหา Max-Cut และ Traveling Salesman"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:21
msgid "Introduction"
msgstr "บทนำ"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:23
msgid "Many problems in quantitative fields such as finance and engineering are optimization problems. Optimization problems lie at the core of complex decision-making and definition of strategies."
msgstr "ปัญหาหลายอย่างที่พบในการทำงานด้านการวิเคราะห์เชิงปริมาณเช่น ด้านการเงินและวิศวกรรม คือปัญหา Optimization ปัญหา Optimization เป็นแกนหลักที่ใช้ในการตัดสินใจที่ซับซ้อนและการกำหนดกลยุทธ์"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:25
msgid "Optimization (or combinatorial optimization) means searching for an optimal solution in a finite or countably infinite set of potential solutions. Optimality is defined with respect to some criterion function, which is to be minimized or maximized. This is typically called cost function or objective function."
msgstr "Optimization (หรือ Combinatorial Optimization) คือการค้นหาค่าคำตอบที่ดีที่สุดในเชตของคำตอบที่เป็นไปได้อย่างจำกัด ค่าที่ดีที่สุดนั้นจะถูกนิยามด้วยฟังก์ชันบางอย่าง ซึ่งเราต้องการที่จะทำให้ค่าของฟังก์ชันนั้นมีค่ามากที่สุดหรือน้อยที่สุด โดยทั่วไปแล้วเราเรียกฟังก์ชันนี้ว่า Cost Function หรือ Objective Function (ฟังก์ชันวัตถุประสงค์)"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:27
msgid "**Typical optimization problems**"
msgstr "**โจทย์ปัญหา Optimization โดยทั่วไป**"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:29
msgid "Minimization: cost, distance, length of a traversal, weight, processing time, material, energy consumption, number of objects"
msgstr "การหาค่าต่ำสุด: ต้นทุน, ระยะทาง, ระยะของการเดินทาง, น้ำหนัก, ระยะเวลาในการประมวลผล, วัสดุ, พลังงานที่ใช้, จำนวนของสิ่งของ"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:31
msgid "Maximization: profit, value, output, return, yield, utility, efficiency, capacity, number of objects"
msgstr "การหาค่ามากสุด: กำไร, คุณค่า, ผลลัพธ์, สิ่งตอบแทน, ผลผลิต, ความคุ้มค่า, ประสิทธิภาพ, ความจุ, จำนวนสิ่งของ"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:33
msgid "We consider here max-cut problems of practical interest in many fields, and show how they can be mapped on quantum computers manually and how Qiskit’s optimization module supports this."
msgstr "เราจะมาพิจารณาโจทย์ปัญหา Max-Cut ในหลาย ๆ แง่มุม และแสดงให้เห็นว่าเราจะสามารถแปลงโจทย์ไปทำงานบนเครื่องควอนตัมคอมพิวเตอร์ได้อย่างไรทีละขั้นตอน และแสดงให้เห็นว่าโมดูล Qiskit Optimization สามารถช่วยทำงานในส่วนนี้ได้อย่างไร"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:36
msgid "Weighted Max-Cut"
msgstr "Weighted Max-Cut"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:38
msgid "Max-Cut is an NP-complete problem, with applications in clustering, network science, and statistical physics. To grasp how practical applications are mapped into given Max-Cut instances, consider a system of many people that can interact and influence each other. Individuals can be represented by vertices of a graph, and their interactions seen as pairwise connections between vertices of the graph, or edges. With this representation in mind, it is easy to model typical marketing problems. For example, suppose that it is assumed that individuals will influence each other’s buying decisions, and knowledge is given about how strong they will influence each other. The influence can be modeled by weights assigned on each edge of the graph. It is possible then to predict the outcome of a marketing strategy in which products are offered for free to some individuals, and then ask which is the optimal subset of individuals that should get the free products, in order to maximize revenues."
msgstr "Max-Cut เป็นโจทย์ปัญหา NP-Complete ซึ่งสามารถนำไปใช้ในงานจริง ๆ ได้เช่นการแบ่งกลุ่มข้อมูล, วิทนาศาสตร์โครงข่ายข้อมูล และ ฟิสิกส์สถิติ เพื่อทำความเข้าใจว่าเราจะสามารถนำงานในโลกจริงแปลงเข้ามาเป็นโจทย์ Max-Cut ได้อย่างไร ให้เรามองผู้คนเป็นระบบหนึ่ง โดยระบบนี้คนแต่ละคนสามารถมีปฏิสัมพันธ์กับคนอื่น ๆ ได้ เราสามารถนำระบบนี้มาแสดงเป็นกราฟได้ โดยคนแต่ละคนจะถูกแทนที่ด้วย Node ของกราฟ และปฏิสัมพันธ์ระหว่างแต่ละคนจะถูกแทนที่ด้วยเส้นเชื่อมระหว่าง Node หรือเรียกว่า Edge ซึ่งการนำข้อมูลมาแสดงผลในลักษณะแบบนี้เป็นการแทนที่แบบง่าย ๆ ที่สามารถนำมาตอบโจทย์ปัญหาทางการตลาดทั่วไปได้ เช่น สมมุติว่าการเลือกซื้อสินค้าของบุคคลแต่ละคนนั้นส่งผลต่อการเลือกซื้อสินค้าของคนอื่น และเรามีข้อมูลว่าคน ๆ นั้นมีอิทธิพลต่อการเลือกซื้อของคนอื่นมากแค่ไหน เราสามารถนำข้อมูลนี้มาสร้างเป็น Weighted Graph ได้โดยให้แต่ละคนเป็น Node ความสัมพันธ์ของแต่ละคนเป็น Edge และอิทธิพลที่คน ๆ หนึ่งมีต่อคนอีกคนให้ค่านี้เป็นน้ำหนักของ Edge นั้น ๆ ทำให้เราสามารถทำนายผลลัพธ์ทางการตลาดได้จากกราฟนี้ และนำไปสร้างเป็นกลยุทธ์เช่น การค้นหาว่าจะทำอย่างไรให้สามารถโฆษณาสินค้าไปที่จำนวนคนน้อยที่สุด แต่ทำให้เกิดกำไรมากที่สุด"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:41
msgid "The formal definition of this problem is the following:"
msgstr "นิยามอย่างเป็นทางการของโจทย์ปัญหานี้มีลักษณะดังนี้:"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:43
msgid "Consider an :math:`n`-node undirected graph *G = (V, E)* where *\\|V\\| = n* with edge weights :math:`w_{ij}>0`, :math:`w_{ij}=w_{ji}`, for :math:`(i, j)\\in E`. A cut is defined as a partition of the original set V into two subsets. The cost function to be optimized is in this case the sum of weights of edges connecting points in the two different subsets, *crossing* the cut. By assigning :math:`x_i=0` or :math:`x_i=1` to each node :math:`i`, one tries to maximize the global profit function (here and in the following summations run over indices 0,1,…n-1)"
msgstr "กำหนด Undirected Graph ขนาด :math:`n` *G = (V, E)* โดยที่ *\\|V\\| = n* และมีน้ำหนักของ Edge เป็น :math:`w_{ij}>0`, :math:`w_{ij}=w_{ji}` สำหรับ :math:`(i, j)\\in E` Cut คือการแบ่งเซต V ออกเป็น 2 เซตย่อย ค่าฟังก์ชันวัตถุประสงค์คือผลรวมของน้ำหนักของ Edge ที่เชื่อมต่อกัน *ข้าม* ระหว่าง 2 เซตย่อย โดยกำหนดให้ :math:`x_i=0` หรือ :math:`x_i=1` สำหรับแต่ละ Node :math:`i` โดยในการ Optimize เราจะพยายามทำให้ค่าของฟังก์ชันวัตถุประสงค์มีค่ามากที่สุด (ผลรวมเป็นการรวมกันของข้อมูลตั้งแต่ 0 ถึง n-1)"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:46
msgid "\\tilde{C}(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j).\n\n"
msgstr "\\tilde{C}(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j).\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:48
msgid "In our simple marketing model, :math:`w_{ij}` represents the probability that the person :math:`j` will buy a product after :math:`i` gets a free one. Note that the weights :math:`w_{ij}` can in principle be greater than :math:`1` (or even negative), corresponding to the case where the individual :math:`j` will buy more than one product. Maximizing the total buying probability corresponds to maximizing the total future revenues. In the case where the profit probability will be greater than the cost of the initial free samples, the strategy is a convenient one. An extension to this model has the nodes themselves carry weights, which can be regarded, in our marketing model, as the likelihood that a person granted with a free sample of the product will buy it again in the future. With this additional information in our model, the objective function to maximize becomes"
msgstr "ในโมเดลการตลาดอย่างง่ายนี้ :math:`w_{ij}` แสดงถึงความน่าจะเป็นที่คนที่ :math:`j` จะซื้อสินค้าเมื่อคนที่ :math:`i` ได้รับของแจกฟรี หมายเหตุ ค่าน้ำหนัก :math:`w_{ij}` สามารถมีค่ามากกว่า :math:`1` ได้ (หรือติดลบก็ได้) ในกรณีที่คนที่ :math:`j` ซื้อสินค้ามากกว่า 1 ชิ้น การทำให้ความน่าจะเป็นในการซื้อสินค้ามากที่สุด ก็จะทำให้ได้กำไรมากที่สุดเช่นกัน ในกรณีที่ความน่าจะเป็นในการได้กำไรนั้นมีมากกว่าค่าใช้จ่ายในการแจกของฟรี กลยุทธ์นี้เป็นกลยุทธ์ที่ง่ายและใช้งานได้ดี โมเดลนี้สามารถเพิ่มเติมอีกส่วนเข้าไปว่า แต่ละ Node นั้นมีน้ำหนักของตัวเองซึ่งมีความหมายว่า คน ๆ นั้นเมื่อได้รับของแจกจากเราไปแล้ว จะมีโอกาศในการกลับมาซื้อของเราใหม่มากแค่ไหน ด้วยข้อมูลเพิ่มเติมนี้เราจะได้ฟังก์ชันวัตถุประสงค์หาค่ามากที่สุดใหม่เป็น"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:51
msgid "C(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j)+\\sum_i w_i x_i.\n\n"
msgstr "C(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j)+\\sum_i w_i x_i.\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:53
msgid "In order to find a solution to this problem on a quantum computer, one needs first to map it to an Ising Hamiltonian. This can be done with the assignment :math:`x_i\\rightarrow (1-Z_i)/2`, where :math:`Z_i` is the Pauli Z operator that has eigenvalues :math:`\\pm 1`. Doing this we find that"
msgstr "ในการหาคำตอบของปัญหานี้ด้วยเครื่องควอนตัมคอมพิวเตอร์ เราจำเป็นต้องแปลงปัญหานี้ให้อยู่ในรูป Ising Hamiltonian ซึ่งสามารถทำได้โดยการแทนที่ :math:`x_i\\rightarrow (1-Z_i)/2` โดยที่ :math:`Z_i` คือตัวดำเนินการ Pauli Z ที่มีค่า Eigenvalue เป็น :math:`\\pm 1` เมื่อแทนที่จะได้ผลลัพธ์เป็น"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:55
msgid "C(\\textbf{Z}) = \\sum_{i,j} \\frac{w_{ij}}{4} (1-Z_i)(1+Z_j) + \\sum_i \\frac{w_i}{2} (1-Z_i) = -\\frac{1}{2}\\left( \\sum_{i<j} w_{ij} Z_i Z_j +\\sum_i w_i Z_i\\right)+\\mathrm{const},\n\n"
msgstr "C(\\textbf{Z}) = \\sum_{i,j} \\frac{w_{ij}}{4} (1-Z_i)(1+Z_j) + \\sum_i \\frac{w_i}{2} (1-Z_i) = -\\frac{1}{2}\\left( \\sum_{i<j} w_{ij} Z_i Z_j +\\sum_i w_i Z_i\\right)+\\mathrm{const},\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:57
msgid "where :math:`\\mathrm{const} = \\sum_{i<j}w_{ij}/2+\\sum_i w_i/2`. In other terms, the weighted Max-Cut problem is equivalent to minimizing the Ising Hamiltonian"
msgstr "โดยที่ :math:`\\mathrm{const} = \\sum_{i<j}w_{ij}/2+\\sum_i w_i/2` ในอีกแง่หนึ่งโจทย์ปัญหา Weighted Max-Cut คือการหาค่าต่ำสุดของ Ising Hamiltonian นี้"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:59
msgid "H = \\sum_i w_i Z_i + \\sum_{i<j} w_{ij} Z_iZ_j.\n\n"
msgstr "H = \\sum_i w_i Z_i + \\sum_{i<j} w_{ij} Z_iZ_j.\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:61
msgid "Qiskit’s optimization module can generate the Ising Hamiltonian for the first profit function :math:`\\tilde{C}`. To this extent, function :math:`\\tilde{C}` can be modeled as a ``QuadraticProgram``, which provides the ``to_ising()`` method."
msgstr "โมดูล Qiskit Optimization สามารถช่วยสร้าง Ising Hamiltonian สำหรับสมการแรก :math:`\\tilde{C}` ได้ โดยถ้าเราต้องการเพิ่มเติมฟังก์ชัน :math:`\\tilde{C}` เราสามารถทำได้โดยการโมเดลลักษณะ ``QuadraticProgram`` ก่อน และใช้ Method ``to_ising()`` เพื่อแปลงเป็น Ising Hamiltonian"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:64
msgid "Approximate Universal Quantum Computing for Optimization Problems"
msgstr "Approximate Universal Quantum Computing สำหรับโจทย์ปัญหา Optimization"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:66
msgid "There has been a considerable amount of interest in recent times about the use of quantum computers to find a solution to combinatorial optimization problems. It is important to say that, given the classical nature of combinatorial problems, exponential speedup in using quantum computers compared to the best classical algorithms is not guaranteed. However, due to the nature and importance of the target problems, it is worth investigating heuristic approaches on a quantum computer that could indeed speed up some problem instances. Here we demonstrate an approach that is based on the *Quantum Approximate Optimization Algorithm* (QAOA) by Farhi, Goldstone, and Gutmann (2014). We frame the algorithm in the context of *approximate quantum computing*, given its heuristic nature."
msgstr "ในช่วงที่ผ่านมามีความสนใจอย่างมากเกี่ยวกับการนำควอนตัมคอมพิวเตอร์มาใช้ในการแก้ปัญหา Combinatorial Optimization ซึ่งมันจำเป็นที่จะต้องบอกไว้ก่อนว่า ด้วยธรรมชาติลักษณะของโจทย์ Combinatorial Optimization เราไม่สามารถบอกได้อย่างชัดเจนว่าควอนตัมคอมพิวเตอร์จะสามารถช่วยให้มีความเร็วในการหาคำตอบได้มากขึ้น อย่างไรก็ตามเนื่องจากปัญหานี้เป็นปัญหาที่สำคัญดังนั้นมันจึงคุ้มค่าในการทดลองว่าวิธีการแบบ Heuristic ด้วยเครื่องควอนตัมคอมพิวเตอร์นั้นจะสามารถช่วยเร่งความเร็วในการหาคำตอบได้หรือไม่ ในส่วนนี้เราได้มีการสาธิตวิธีการหาคำตอบด้วย *Quantum Approximate Optimization Algorithm* (QAOA) โดย Farhi, Goldstone และ Gutmann (2014) เราตีกรอบอัลกอริทึมนี้ในแง่ของ *Approximate Quantum Computing* ซึ่งเป็นลักษณะอัลกอริทึมแบบ Heuristic"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:69
msgid "The algorithm works as follows:"
msgstr "อัลกอริทึมมีการทำงานดังนี้:"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:71
msgid "Choose the :math:`w_i` and :math:`w_{ij}` in the target Ising problem. In principle, even higher powers of Z are allowed."
msgstr "เลือก :math:`w_i` และ :math:`w_{ij}` ของโจทย์ปัญหา Ising ที่ต้องการ ตามหลักการแล้ว เราสามารถเลือกได้ แม้แต่ Z ยกกำลังอันดับสูง"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:73
msgid "Choose the depth of the quantum circuit :math:`m`. Note that the depth can be modified adaptively."
msgstr "เลือกความลึกของวงจรควอนตัม :math:`m` หมายเหตุ ความลึกสามารถปรับได้ในภายหลัง"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:75
msgid "Choose a set of controls :math:`\\theta` and make a trial function :math:`|\\psi(\\boldsymbol\\theta)\\rangle`, built using a quantum circuit made of C-Phase gates and single-qubit Y rotations, parameterized by the components of :math:`\\boldsymbol\\theta`."
msgstr "เลือกตัวควบคุม :math:`\\theta` ขึ้นมาเซตหนึ่งและสร้างฟังก์ชันทดสอบ :math:`|\\psi(\\boldsymbol\\theta)\\rangle` โดยสร้างขึ้นด้วยวงจรควอนตัมที่ภายในประกอบไปด้วยควอนตัมเกต C-Phase และ Single-Qubit Y Rotations โดยมีส่วนที่เป็นพารามิเตอร์คือส่วน :math:`\\boldsymbol\\theta`"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:77
msgid "Evaluate"
msgstr "ประเมินผล"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:79
msgid "C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)~|H|~\\psi(\\boldsymbol\\theta)\\rangle = \\sum_i w_i \\langle\\psi(\\boldsymbol\\theta)~|Z_i|~\\psi(\\boldsymbol\\theta)\\rangle+ \\sum_{i<j} w_{ij} \\langle\\psi(\\boldsymbol\\theta)~|Z_iZ_j|~\\psi(\\boldsymbol\\theta)\\rangle\n\n"
msgstr "C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)~|H|~\\psi(\\boldsymbol\\theta)\\rangle = \\sum_i w_i \\langle\\psi(\\boldsymbol\\theta)~|Z_i|~\\psi(\\boldsymbol\\theta)\\rangle+ \\sum_{i<j} w_{ij} \\langle\\psi(\\boldsymbol\\theta)~|Z_iZ_j|~\\psi(\\boldsymbol\\theta)\\rangle\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:81
msgid "by sampling the outcome of the circuit in the Z-basis and adding the expectation values of the individual Ising terms together. In general, different control points around :math:`\\boldsymbol\\theta` have to be estimated, depending on the classical optimizer chosen."
msgstr "ด้วยการสุ่มตัวอย่างจากผลลัพธ์ขของวงจรด้วย Z-basis และนำค่าความคาดหวังของแต่ละพจน์ของโมเดล Ising มารวมกัน โดยทั่วไปแล้วเราจะต้องประมาณค่าผลลัพธ์ของจุดควบคุมรอบ ๆ :math:`\\boldsymbol\\theta` ด้วย ขึ้นอยู่กับ Optimizer แบบดั้งเดิมที่ใช้"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:83
msgid "Use a classical optimizer to choose a new set of controls."
msgstr "ใช้ Optimizer แบบดั้งเดิมเพื่อเลือกเซตของตัวควบคุมใหม่"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:85
msgid "Continue until :math:`C(\\boldsymbol\\theta)` reaches a minimum, close enough to the solution :math:`\\boldsymbol\\theta^*`."
msgstr "ทำงานซ้ำไปเรื่อย ๆ จนกว่า :math:`C(\\boldsymbol\\theta)` จะมีค่าเข้าสู่ค่าน้อยที่สุดใกล้เคียงกับคำตอบ :math:`\\boldsymbol\\theta^*`"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:87
msgid "Use the last :math:`\\boldsymbol\\theta` to generate a final set of samples from the distribution :math:`|\\langle z_i~|\\psi(\\boldsymbol\\theta)\\rangle|^2\\;\\forall i` to obtain the answer."
msgstr "ใช้ :math:`\\boldsymbol\\theta` สุดท้ายที่ได้ เพื่อสร้างเซตของผลลัพธ์สุ่มสุดท้ายจากการกระจายตัวของความน่าจะเป็น :math:`|\\langle z_i~|\\psi(\\boldsymbol\\theta)\\rangle|^2\\;\\forall i` เพื่อให้ได้คำตอบออกมา"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:89
msgid "It is our belief the difficulty of finding good heuristic algorithms will come down to the choice of an appropriate trial wavefunction. For example, one could consider a trial function whose entanglement best aligns with the target problem, or simply make the amount of entanglement a variable. In this tutorial, we will consider a simple trial function of the form"
msgstr "เรามีความเชื่อที่ว่าความยากในการหาคำตอบที่ดีของอัลกอริทึมแบบ Heuristic นั้นขึ้นอยู่กับจากการเลือกฟังก์ชันคลื่นทดสอบที่เหมาะสม ตัวอย่างเช่น ในกรณี่ที่เราเลือกฟังก์ชันทดสอบที่มี Entanglement ที่อยู่ในแนวเดียวกับปัญหาของเรา หรือสามารถทำให้เกิด Entanglement ในปริมาณที่เหมาะสมได้ ในบทเรียนนี้เราใช้ฟังก์ชันทดสอบอย่างง่ายที่อยู่ในรูปแบบดังนี้"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:91
msgid "|\\psi(\\theta)\\rangle  = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m |+\\rangle\n\n"
msgstr "|\\psi(\\theta)\\rangle  = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m |+\\rangle\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:93
msgid "where :math:`U_\\mathrm{entangler}` is a collection of C-Phase gates (fully entangling gates), and :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^n Y(\\theta_{i})`, where :math:`n` is the number of qubits and :math:`m` is the depth of the quantum circuit. The motivation for this choice is that for these classical problems this choice allows us to search over the space of quantum states that have only real coefficients, still exploiting the entanglement to potentially converge faster to the solution."
msgstr "โดย :math:`U_\\mathrm{entangler}` เป็นชุดของเกต C-Phase (Fully Entangling Gate) และ :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^n Y(\\theta_{i})` โดยที่ :math:`n` เป็นจำนวนคิวบิตและ :math:`m` เป็นความลึกของวงจรควอนตัม เหตุผลของการเลือกใช้นี้คือ เพื่อให้เรามีขอบเขตของสถานะเชิงควอนตัมในส่วนสัมประสิทธิ์จำนวนจริงที่ครอบคลุม และมีโอกาสที่จะหาคำตอบได้เร็วกว่าอัลกอริทึมแบบดั้งเดิม"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:96
msgid "One advantage of using this sampling method compared to adiabatic approaches is that the target Ising Hamiltonian does not have to be implemented directly on hardware, allowing this algorithm not to be limited to the connectivity of the device. Furthermore, higher-order terms in the cost function, such as :math:`Z_iZ_jZ_k`, can also be sampled efficiently, whereas in adiabatic or annealing approaches they are generally impractical to deal with."
msgstr "หนึ่งในประโยชน์ของการทำงานรูปแบบนี้เมื่อเทียบกับวิธีการแบบ Adiabatic คือ Ising Hamiltonian ที่เราต้องการนั้น ไม่จำเป็นต้องสร้างลงบนฮาร์ดแวร์โดยตรง ทำให้อัลกอริทึมนี้จะไม่ถูกจำกัดด้วยการเชื่อมต่อภายในอุปกรณ์ นอกจากนี้พจน์ลำดับสูงในฟังก์ชันวัตถุประสงค์เช่น :math:`Z_iZ_jZ_k` ก็ยังสามารถสุ่มตัวอย่างออกมาได้อย่างมีประสิทธิภาพ ในขณะที่ในวิธีการแบบ Adiabatic และ Annealing อาจจะมีผลกระทบที่ต้องจัดการเพิ่มเติม"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:98
msgid "References:"
msgstr "แหล่งอ้างอิง:"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:100
msgid "A. Lucas, Frontiers in Physics 2, 5 (2014)"
msgstr "A. Lucas, Frontiers in Physics 2, 5 (2014)"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:101
msgid "E. Farhi, J. Goldstone, S. Gutmann, e-print arXiv 1411.4028 (2014)"
msgstr "E. Farhi, J. Goldstone, S. Gutmann, e-print arXiv 1411.4028 (2014)"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:102
msgid "D. Wecker, M. B. Hastings, M. Troyer, Phys. Rev. A 94, 022309 (2016)"
msgstr "D. Wecker, M. B. Hastings, M. Troyer, Phys. Rev. A 94, 022309 (2016)"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:103
msgid "E. Farhi, J. Goldstone, S. Gutmann, H. Neven, e-print arXiv 1703.06199 (2017)"
msgstr "E. Farhi, J. Goldstone, S. Gutmann, H. Neven, e-print arXiv 1703.06199 (2017)"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:115
msgid "Application classes"
msgstr "คลาสแอปพลิเคชัน"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:117
msgid "We use the application classes for the max-cut problem and the traveling salesman problem in this page. There are application classes for other optimization problems available as well. See `Application Classes for Optimization Problems <09_application_classes.ipynb>`__ for details."
msgstr "เราใช้งานคลาส Application สำหรับโจทย์ปัญหา Max-Cut และ Traveling Salesman ในหน้านี้ ในโมดูลนี้ยังมีคลส Application สำหรับโจทย์ Optimization อื่น ๆ ให้ใช้งาน สามารถดูข้อมูลเพิ่มเติมได้ที่ `Application Classes for Optimization Problems <09_application_classes.ipynb>`__"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:153
msgid "Max-Cut problem"
msgstr "โจทย์ปัญหา Max-Cut"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:253
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:912
msgid "Brute force approach"
msgstr "วิธีการ Brute Force"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:255
msgid "Try all possible :math:`2^n` combinations. For :math:`n = 4`, as in this example, one deals with only 16 combinations, but for n = 1000, one has 1.071509e+30 combinations, which is impractical to deal with by using a brute force approach."
msgstr "ลองทุก ๆ รูปแบบ :math:`2^n` ที่เป็นไปได้ สำหรับ :math:`n = 4` ดังตัวอย่าง เป็นการจัดการกับ 16 รูปแบบ สำหรับ n = 100 เป็นตัวที่มีความเป็นไปได้ทั้งหมด 1.071509e+30 รูปแบบ ซึ่งไม่สามารถใช้วิธีการ Brute Force แก้ไขได้อย่างมีประสิทธิภาพ"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:375
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1015
msgid "Mapping to the Ising problem"
msgstr "แปลงเป็นโจทย์ปัญหา Ising"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:386
msgid "Qiskit provides functionality to generate ``QuadraticProgram`` from the problem specification as well as create the corresponding Ising Hamiltonian."
msgstr "Qiskit มีฟังก์ชันสำหรับการสร้าง ``QuadraticProgram`` จากโจทย์ปัญหารวมไปถึงการแปลงเป็น Ising Hamiltonian"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:564
msgid "Since the problem was cast to a minimization problem, the solution of :math:`-4` corresponds to the optimum."
msgstr "เนื่องจากโจทย์ปัญหานี้เราแปลงมาเป็นโจทย์ปัญหาหาค่าต่ำสุด ดังนั้นคำตอบ :math:`-4` คือค่าที่ดีที่สุด"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:576
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1342
msgid "Checking that the full Hamiltonian gives the right cost"
msgstr "ตรวจสอบว่า Hamiltonian เต็มนี้ให้ค่าวัตถุประสงค์ที่ถูกต้องหรือไม่"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:651
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1420
msgid "Running it on quantum computer"
msgstr "นำไปทำงานบนเครื่องควอนตัมคอมพิวเตอร์"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:653
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1422
msgid "We run the optimization routine using a feedback loop with a quantum computer that uses trial functions built with Y single-qubit rotations, :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^n Y(\\theta_{i})`, and entangler steps :math:`U_\\mathrm{entangler}`."
msgstr "ทำงานแต่ละรอบ Optimization โดยใช้วงจรป้อนกลับบนเครื่องควอนตัมคอมพิวเตอร์โดยมีฟังก์ชันทดสอบที่สร้างด้วย Y Single-Qubit Rotation :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^n Y(\\theta_{i})` และส่วน Entanglement :math:`U_\\mathrm{entangler}`"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:808
msgid "Traveling Salesman Problem"
msgstr "โจทย์ปัญหา Traveling Salesman"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:810
msgid "In addition to being a notorious NP-complete problem that has drawn the attention of computer scientists and mathematicians for over two centuries, the Traveling Salesman Problem (TSP) has important bearings on finance and marketing, as its name suggests. Colloquially speaking, the traveling salesman is a person that goes from city to city to sell merchandise. The objective in this case is to find the shortest path that would enable the salesman to visit all the cities and return to its hometown, i.e. the city where he started traveling. By doing this, the salesman gets to maximize potential sales in the least amount of time."
msgstr "โจทย์ปัญหานี้เป็นโจทย์ปัญหา NP-complete ที่เป็นที่รู้จักกันในกลุ่มของนักวิทยาศาสตร์คอมพิวเตอร์และนักคณิตศาสตร์มากว่าสองศตวรรษ โจทย์ปัญหา Traveling Salesman (TSP) มีบทบาทสำคัญทั้งในด้านการเงินและการตลาด ซึ่งโจทย์ปัญหานี้จากชื่อจะเห็นได้ว่ามันมาจากการที่มีพนักงานขายต้องการเดินทางไปขายของที่เมืองต่าง ๆ โดยวัตถุประสงค์คือ ทำอย่างไรให้การเดินทางนั้นใช้ระยะทางได้สั้นที่สุดในการที่พนักงานขายเดินทางไปทุก ๆ เมืองและเดินทางกลับมายังเมืองเริ่มต้น โดยในการทำแบบนี้จะทำให้พนักงานขายได้ยอดขายที่มากที่สุดด้วยเวลาที่ใช้น้อยที่สุด"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:813
msgid "The problem derives its importance from its “hardness” and ubiquitous equivalence to other relevant combinatorial optimization problems that arise in practice."
msgstr "ปัญหานี้มี “ความยาก” และความแพร่หลายในการใช้งานที่เทียบได้กับโจทย์ปัญหา Combinatorial Optimization อื่น ๆ ที่มีการนำมาใช้งานจริง"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:815
msgid "The mathematical formulation with some early analysis was proposed by W.R. Hamilton in the early 19th century. Mathematically the problem is, as in the case of Max-Cut, best abstracted in terms of graphs. The TSP on the nodes of a graph asks for the shortest *Hamiltonian cycle* that can be taken through each of the nodes. A Hamilton cycle is a closed path that uses every vertex of a graph once. The general solution is unknown and an algorithm that finds it efficiently (e.g., in polynomial time) is not expected to exist."
msgstr "สมการคณิตศาสตร์ของโจทย์ปัญหานี้ได้ถูกวิเคราะห์ไว้โดย W.R. Hamilton ในช่วงศตวรรษที่ 19 ในเชิงคณิตศาสตร์โจทย์ปัญหานี้คือกรณีหนึ่งของโจทย์ปัญหา Max-Cut ดังนั้นรูปแบบที่ดีที่สุดในการแสดงโจทย์ปัญหานี้คือรูปแบบกราฟ ในโจทย์ปัญหานี้ TSP จะยืนอยู่บน Node ของกราฟ และต้องการจะหาว่า *Hamiltonian Cycle* ที่สั้นที่สุดที่ผ่านทุก Node คืออันไหน Hamilton Cycle คือเส้นทางปิดที่ใช้ทุก ๆ Node ของกราฟอย่างละ 1 ครั้ง ในปัจจุบันเรายังไม่พบผลเฉลยทั่วไปของโจทย์ปัญหานี้ และเราไม่คาดหวังว่าจะมีอัลกอริทึมที่สามารถหาคำตอบได้อย่างมีประสิทธิภาพอยู่ (เช่น สามารถหาคำตอบได้ใน Polynomial Time)"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:818
msgid "Find the shortest Hamiltonian cycle in a graph :math:`G=(V,E)` with :math:`n=|V|` nodes and distances, :math:`w_{ij}` (distance from vertex :math:`i` to vertex :math:`j`). A Hamiltonian cycle is described by :math:`N^2` variables :math:`x_{i,p}`, where :math:`i` represents the node and :math:`p` represents its order in a prospective cycle. The decision variable takes the value 1 if the solution occurs at node :math:`i` at time order :math:`p`. We require that every node can only appear once in the cycle, and for each time a node has to occur. This amounts to the two constraints (here and in the following, whenever not specified, the summands run over 0,1,…N-1)"
msgstr "ค้นหา Hamiltonian Cycle ที่สั้นที่สุดภายในกราฟ :math:`G=(V,E)` โดยที่มี Node :math:`n=|V|` และระยะทาง :math:`w_{ij}` (ระยะทางระหว่าง Node :math:`i` ถึง Node :math:`j`) Hamiltonian Cycle สามารถอธิบายได้ด้วยตัวแปร :math:`x_{i,p}` จำนวน :math:`N^2` ตัวแปร โดยที่ :math:`i` คือเลขที่ของ Node และ :math:`p` คือลำดับของ Node ใน Cycle ตัวแปรตัดสินใจจะมีค่าเป็น 1 ถ้ามี Node :math:`i` ที่ลำดับ :math:`p` อยู่ในคำตอบ ข้อจำกัดที่สำคัญคือ 1 Node สามารถมีได้ 1 จุดเท่านั้นใน 1 Cycle และจะต้องมีอย่างน้อย 1 จุดใน 1 Cycle ซึ่งจาก 2 ข้อจำกัดนี้จะได้เป็น (ในส่วนถัดไปถ้าไม่ได้มีการระบุไว้ผลรวมคือการรวมกันตั้งแต่ 0,1,…N-1)"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:821
msgid "\\sum_{i} x_{i,p} = 1 ~~\\forall p\n\n"
msgstr "\\sum_{i} x_{i,p} = 1 ~~\\forall p\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:823
msgid "\\sum_{p} x_{i,p} = 1 ~~\\forall i.\n\n"
msgstr "\\sum_{p} x_{i,p} = 1 ~~\\forall i.\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:825
msgid "For nodes in our prospective ordering, if :math:`x_{i,p}` and :math:`x_{j,p+1}` are both 1, then there should be an energy penalty if :math:`(i,j) \\notin E` (not connected in the graph). The form of this penalty is"
msgstr "ในส่วนลำดับของ Node ถ้า :math:`x_{i,p}` และ :math:`x_{j,p+1}` มีค่าเป็น 1 ทั้งคู่ เราจะต้องมีพจน์สำหรับลงโทษค่าพลังงาน ในกรณีที่ :math:`(i,j) \\notin E` (ไม่ได้เชื่อมต่อกันในกราฟ) พจน์ของบทลงโทษสามารถเขียนได้เป็น"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:827
msgid "\\sum_{i,j\\notin E}\\sum_{p} x_{i,p}x_{j,p+1}>0,\n\n"
msgstr "\\sum_{i,j\\notin E}\\sum_{p} x_{i,p}x_{j,p+1}>0,\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:829
msgid "where it is assumed the boundary condition of the Hamiltonian cycles :math:`(p=N)\\equiv (p=0)`. However, here it will be assumed a fully connected graph and not include this term. The distance that needs to be minimized is"
msgstr "โดยเราสมมุติว่าเงื่อนไขของ Hamiltonian Cycle คือ :math:`(p=N)\\equiv (p=0)` อย่างไรก็ตามในส่วนนี้เราไม่รวมพจน์ดังกล่าวเข้ามาด้วยเนื่องจากเราสมมุติว่ากราฟมีลักษณะเชื่อมต่อกันทั้งหมด ระยะทางที่จะต้องทำการหาค่าต่ำสุดคือ"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:831
msgid "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}.\n\n"
msgstr "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}.\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:833
msgid "Putting this all together in a single objective function to be minimized, we get the following:"
msgstr "รวมทุก ๆ ส่วนเข้าด้วยกันเป็นฟังก์ชันวัตถุประสงค์เดียวเพื่อหาค่าต่ำสุด เราจะได้:"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:835
msgid "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}+ A\\sum_p\\left(1- \\sum_i x_{i,p}\\right)^2+A\\sum_i\\left(1- \\sum_p x_{i,p}\\right)^2,\n\n"
msgstr "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}+ A\\sum_p\\left(1- \\sum_i x_{i,p}\\right)^2+A\\sum_i\\left(1- \\sum_p x_{i,p}\\right)^2,\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:837
msgid "where :math:`A` is a free parameter. One needs to ensure that :math:`A` is large enough so that these constraints are respected. One way to do this is to choose :math:`A` such that :math:`A > \\mathrm{max}(w_{ij})`."
msgstr "โดยที่ :math:`A` เป็นตัวแปรที่ปรับค่าได้ แต่เราจะต้องทำให้มั่นใจว่า :math:`A` มีค่ามากเพียงพอจะทำให้ข้อจำกัดมีผล อีกทางเลือกหนึ่งคือทำการเลือก :math:`A` ที่ทำให้ :math:`A > \\mathrm{max}(w_{ij})`"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:839
msgid "Once again, it is easy to map the problem in this form to a quantum computer, and the solution will be found by minimizing a Ising Hamiltonian."
msgstr "ย้ำอีกครั้งหนึ่งว่า มันเป็นการง่ายที่จะแปลงโจทย์ปัญหาในรูปแบบนี้ไปทำงานบนเครื่องควอนตัมคอมพิวเตอร์ และคำตอบสามารถหาได้โดยการหาค่าต่ำสุดของ Ising Hamiltonian"

