msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-14 08:10+0000\n"
"PO-Revision-Date: 2023-11-14 08:45\n"
"Last-Translator: \n"
"Language: th\n"
"Language-Team: Thai\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: th\n"
"X-Crowdin-File: /main/optimization/docs/locale/en/LC_MESSAGES/tutorials/02_converters_for_quadratic_programs.po\n"
"X-Crowdin-File-ID: 9644\n"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:9
msgid "This page was generated from `docs/tutorials/02_converters_for_quadratic_programs.ipynb`__."
msgstr "หน้านี้สร้างขึ้นมาจาก `docs/tutorials/02_converters_for_quadratic_programs.ipynb`__"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:9
msgid "Converters for Quadratic Programs"
msgstr "ตัวแปลงสำหรับ Quadratic Program"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:20
msgid "Optimization problems in Qiskit optimization module are represented with the ``QuadraticProgram`` class, which is a generic and powerful representation for optimization problems. In general, optimization algorithms are defined for a certain formulation of a quadratic program, and we need to convert our problem to the right type."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:22
msgid "For instance, Qiskit optimization provides several optimization algorithms that can handle `Quadratic Unconstrained Binary Optimization <https://en.wikipedia.org/wiki/Quadratic_unconstrained_binary_optimization>`__ (QUBO) problems. These are mapped to Ising Hamiltonians, for which Qiskit optimization uses the ``qiskit.quantum_info.SparsePauliOp`` object, and then their ground state is approximated. For this optimization, commonly known algorithms such as VQE or QAOA can be used as underlying routine. See the following tutorial about the `Minimum Eigen Optimizer <./03_minimum_eigen_optimizer.ipynb>`__ for more detail. Note that also other algorithms exist that work differently, such as the ``GroverOptimizer``."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:25
msgid "To map a problem to the correct input format, the optimization module of Qiskit optimization offers a variety of converters. In this tutorial we're providing an overview on this functionality. Currently, Qiskit optimization contains the following converters."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:27
msgid "``InequalityToEquality``: convert inequality constraints into equality constraints with additional slack variables."
msgstr "``InequalityToEquality``: แปลงสมการข้อจำกัดที่อยู่ในรูปแบบอสมการ ให้เป็นสมการโดยเพิ่มเติมตัวแปรส่วนขาด"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:28
msgid "``IntegerToBinary``: convert integer variables into binary variables and corresponding coefficients."
msgstr "``IntegerToBinary``: แปลงตัวแปรจำนวนเต็มเป็นตัวแปรไบนารี่และค่าสัมประสิทธิ์"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:29
msgid "``LinearEqualityToPenalty``: convert equality constraints into additional terms of the objective function."
msgstr "``LinearEqualityToPenalty``: แปลงสมการข้อจำกัดเพิ่มลงในส่วนฟังก์ชันวัตถุประสงค์"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:30
msgid "``LinearInequalityToPenalty``: convert inequality constraints into additional terms of the objective function."
msgstr "``LinearInequalityToPenalty``: แปลงอสมการข้อจำกัดเพิ่มลงในส่วนฟังก์ชันวัตถุประสงค์"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:31
msgid "``MaximizeToMinimize``: convert to the equivalent minimization problem."
msgstr "``MaximizeToMinimize``: แปลงโจทย์ปัญหาจากหาค่าสูงสุดเป็นหาค่าต่ำสุด"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:32
msgid "``MinimizeToMaximize``: convert to the equivalent maximization problem."
msgstr "``MinimizeToMaximize``: แปลงโจทย์ปัญหาจากหาค่าต่ำสุดเป็นหาค่าสูงสุด"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:33
msgid "``QuadraticProgramToQubo``: a wrapper that includes ``InequalityToEquality``, ``IntegerToBinary``, ``LinearEqualityToPenalty``, ``LinearInequalityToPenalty``, and ``MaximizeToMinimize`` for convenience."
msgstr "``QuadraticProgramToQubo``: เป็น Wrapper ที่คลอบคลุมทั้ง ``InequalityToEquality``, ``IntegerToBinary``, ``LinearEqualityToPenalty``, ``LinearInequalityToPenalty`` และ ``MaximizeToMinimize`` เพื่อความสะดวกในการใช้งาน"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:45
msgid "InequalityToEquality"
msgstr "InequalityToEquality"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:47
msgid "``InequalityToEqualityConverter`` converts inequality constraints into equality constraints with additional slack variables to remove inequality constraints from ``QuadraticProgram``. The upper bounds and the lower bounds of slack variables will be calculated from the difference between the left sides and the right sides of constraints. Signs of slack variables depend on symbols in constraints such as :math:`\\leq` and :math:`\\geq`."
msgstr "``InequalityToEqualityConverter`` เป็นตัวแปลงจากอสมการข้อจำกัดไปเป็นสมการข้อจำกัดด้วยตัวแปรส่วนขาดเพิ่มเติมเพื่อนำอสมการข้อจำกัดออกจาก ``QuadraticProgram`` ขอบเขตบนและขอบเขตล่างของตัวแปรเพิ่มเติมจะคำนวณมาจากความแตกต่างระหว่างพจน์ด้านซ้ายและด้านขวาของสมการข้อจำกัด เครื่องหมายของตัวแปรจะขึ้นอยู่กับสัญลักษณะในอสมการว่าเป็น :math:`\\leq` หรือ :math:`\\geq`"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:49
msgid "The following is an example of a maximization problem with two inequality constraints. Variable :math:`x` and :math:`y` are binary variables and variable :math:`z` is an integer variable."
msgstr "ตัวอย่างของโจทย์ปัญหาหาค่าสูงที่สุดโดยที่มีอสมการข้อจำกัด 2 สมการ ตัวแปรตัวแปร :math:`x` และ :math:`y` เป็นตัวแปรไบนารี่ และ ตัวแปร :math:`z`เป็นตัวแปรจำนวนเต็ม"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:63
msgid "With ``QuadraticProgram``, an optimization model of the problem is written as follows."
msgstr "ด้วย ``QuadraticProgram`` โมเดล Optimization สำหรับโจทย์ปัญหาสามารถเขียนออกมาได้ดังนี้"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:172
msgid "Call ``convert`` method of ``InequalityToEquality`` to convert."
msgstr "เรียกใช้ Method ``convert`` จาก ``InequalityToEquality`` เพื่อแปลง"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:280
msgid "After converting, the formulation of the problem looks like the above output. As we can see, the inequality constraints are replaced with equality constraints with additional integer slack variables, :math:`xyz\\_leg\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack`."
msgstr "สมการของโจทย์ปัญหาที่ได้จะมีลักษณะตามผลลัพธ์ด้านบน จากที่เห็นอสมการข้อจำกัดจะถูกแทนที่ด้วยสมการข้อจำกัดและตัวแปรส่วนขาดเพิ่มเติม :math:`xyz\\_leg\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack`"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:282
msgid "Let us explain how the conversion works. For example, the lower bound of the left side of the first constraint is :math:`0` which is the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Thus, the upper bound of the additional integer variable must be :math:`5` to be able to satisfy even the case of :math:`x=0`, :math:`y=0`, and :math:`z=0`. Note that we cut off the part after the decimal point in the converted formulation since the left side of the first constraint in the original formulation can be only integer values. For the second constraint, basically we apply the same approach. However, the symbol in the second constraint is :math:`\\geq`, so we add minus before :math:`xyz\\_geq\\text{@}int\\_slack` to be able to satisfy even the case of :math:`x=1, y=1`, and :math:`z=7`."
msgstr "หลักการทำงานในการแปลงคือ ตัวอย่างเช่นเมื่อขอบเขตล่างของพจน์ซ้ายของสมการข้อจำกัดแรกเป็น :math:`0` ซึ่งคือกรณีที่ :math:`x=0`, :math:`y=0` และ :math:`z=0` ขอบเขตบนของตัวแปรจำนวนเต็มเพิ่มเติมจะต้องมีค่าเป็น :math:`5` เพื่อให้กรณี :math:`x=0`, :math:`y=0` และ :math:`z=0` เป็นจริง หมายเหตุ เราสามารถตัดส่วนทศนิยมออกได้ในสมการที่แปลงมาแล้ว เนื่องจากพจน์ซ้ายของสมการข้อจำกัดแรกของสมการเดิมสามารถเป็นจำนวนเต็มได้เท่านั้น สำหรับสมการข้อจำกัดที่สองโดยปกติเราสามารถใช้วิธีการเดียวกันได้ อย่างไรก็ตามสัญลักษณ์ในสมการข้อจำกัดที่สองคือ :math:`\\geq` ดังนั้นเราจะต้องเพิ่มเครื่องหมายลบไว้ก่อน :math:`xyz\\_geq\\text{@}int\\_slack` เพื่อให้สมการเป็นจริงในกรณี :math:`x=1, y=1` และ :math:`z=7`"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:299
msgid "Let us see how the ``interpret`` method works. The purpose of this method is to convert the solution of the converted problem back to that of the original problem. To use this method, we would first require to solve the problem. For the purpose of this tutorial, we will use docplex to solve. We will first translate the quadratic problem into a docplex.mp model."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:392
msgid "The result ``result_eq`` of ``qp_eq`` has 5 variable values (``x=1.0, y=1.0, z=3.0, xyz_leq@int_slack=0.0, xyz_geq@int_slack=2.0``) while result ``result_orig`` of the original ``qp`` has three values (``x=1.0, y=1.0, z=3.0``). We can call ``InequalityToEquality.interpret`` method by passing a list or an array to the method that has values of ``qp_eq.variables`` as follows. ``result_eq.x`` has the list of values that each variable takes in the solution in correspondence to their position in the variable list ``qp_eq.variables``."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:442
msgid "We notice that :math:`[1., 1., 3.]` are the values taken in the solution of the converted problem for the common variables between converted and original problems (variables: :math:`x`, :math:`y`, :math:`z`). The interpret method shows the same values are the solution of the original problem. This is because the objective function for the converted and original problems is exactly the same. The slack variables are just ensuring equality in the constraints of the converted problem, where the constraints are also exactly same between the original and converted problems, except that the original problem has inequality constraints."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:455
msgid "IntegerToBinary"
msgstr "IntegerToBinary"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:466
msgid "``IntegerToBinary`` converts integer variables into binary variables and coefficients to remove integer variables from ``QuadraticProgram``. For converting, bounded-coefficient encoding proposed in `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Eq. (5)) is used. For more detail of the encoding method, please see the paper."
msgstr "``IntegerToBinary`` แปลงตัวแปรจำนวนเต็มเป็นตัวแปรไบนารี่และสัมประสิทธิ์ เพื่อลบตัวแปรจำนวนเต็มออกจาก ``QuadraticProgram`` ในการแปลงเราจำเป็นต้องใช้ Bounded-Coefficient Encoding `arxiv:1706.01945 <https://arxiv.org/abs/1706.01945>`__ (Eq. (5)) สำหรับข้อมูลเพิ่มเติมศึกษาได้ตามเอกสารที่แนบไว้"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:468
msgid "We use the output of ``InequalityToEquality`` as a starting point. Variables :math:`x` and :math:`y` are binary variables, while the variable :math:`z` and the slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` are integer variables. We print the problem again for reference."
msgstr "เราเริ่มต้นจากผลลัพธ์ของ ``InequalityToEquality`` ตัวแปร :math:`x` และ :math:`y` เป็นตัวแปรไบนารี่ ในขณะที่ตัวแปร :math:`z` และตัวแปรส่วนขาด :math:`xyz\\_leq\\text{@}int\\_slack` และ :math:`xyz\\_geq\\text{@}int\\_slack` เป็นตัวแปรจำนวนเต็ม แสดงผลลัพธ์ที่ได้เพื่อเป็นตัวอ้างอิง"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:564
msgid "Call ``convert`` method of ``IntegerToBinary`` to convert."
msgstr "เรียกใช้ Method ``convert`` จาก ``IntegerToBinary`` เพื่อแปลง"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:666
msgid "After converting, the integer variable :math:`z` is replaced with three binary variables :math:`z\\text{@}0`, :math:`z\\text{@}1` and :math:`z\\text{@}2` with coefficients 1, 2 and 4, respectively as the above. The slack variables :math:`xyz\\_leq\\text{@}int\\_slack` and :math:`xyz\\_geq\\text{@}int\\_slack` that were introduced by ``InequalityToEquality`` are also both replaced with three binary variables with coefficients 1, 2, 2, and 1, 2, 3, respectively."
msgstr "หลังจากการแปลง ตัวแปรจำนวนเต็ม :math:`z` จะถูกแทนที่ด้วยตัวแปรไบนารี่สามตัว :math:`z\\text{@}0`, :math:`z\\text{@}1` และ :math:`z\\text{@}2` และค่าสัมประสิทธิ์ 1, 2 และ 4 ตามลำดับ ตัวแปรส่วนขาด :math:`xyz\\_leq\\text{@}int\\_slack` และ :math:`xyz\\_geq\\text{@}int\\_slack` ที่ได้จาก ``InequalityToEquality`` จะถูกแทนที่ด้วยตัวแปรไบนารี่สามตัวที่มีสัมประสิทธิ์เป็น 1, 2, 2, และ 1, 2, 3, ตามลำดับ"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:668
msgid "Note: Essentially the coefficients mean that the sum of these binary variables with coefficients can be the sum of a subset of :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}`, and :math:`\\{1, 2, 3\\}` to represent that acceptable values :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}`, and :math:`\\{0, \\ldots, 6\\}`, which respects the lower bound and the upper bound of original integer variables correctly."
msgstr "หมายเหตุ: โดยพื้นฐานแล้วจากค่าสัมประสิทธิ์เราสามารถบอกขอบเขตบนและขอบเขตล่างของตัวแปรจำนวนเต็มได้โดยนำเซตย่อยของ :math:`\\{1, 2, 4\\}`, :math:`\\{1, 2, 2\\}` และ :math:`\\{1, 2, 3\\}` มารวมกันเพื่อแสดงถึงค่าที่ยอมรับได้ทั้งหมด :math:`\\{0, \\ldots, 7\\}`, :math:`\\{0, \\ldots, 5\\}` และ :math:`\\{0, \\ldots, 6\\}`"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:670
msgid "``IntegerToBinary`` also provides ``interpret`` method that is the functionality to translate a given binary result back to the original integer representation. Let us see how the ``interpret`` method works."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:751
msgid "``result_eq_bin`` has more binary variables due to the conversion by ``IntegerToBinary.convert``. ``IntegerToBinary.interpret`` translates them back to the integer values by aggregating binary variables values associated with the original integer variables of ``qp_eq``."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:801
msgid "LinearEqualityToPenalty"
msgstr "LinearEqualityToPenalty"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:812
msgid "``LinearEqualityToPenalty`` converts linear equality constraints into additional quadratic penalty terms of the objective function to map ``QuadraticProgram`` to an unconstrained form. An input to the converter has to be a ``QuadraticProgram`` with only linear equality constraints. Those equality constraints, e.g. :math:`\\sum_i a_i x_i = b` where :math:`a_i` and :math:`b` are numbers and :math:`x_i` is a variable, will be added to the objective function in the form of :math:`M(b - \\sum_i a_i x_i)^2` where :math:`M` is a large number as penalty factor. By default :math:`M= 1e5`. The sign of the term depends on whether the problem type is a maximization or minimization."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:815
msgid "We use the output of ``IntegerToBinary`` as a starting point, where all variables are binary variables and all inequality constraints have been mapped to equality constraints. We print the problem again for reference."
msgstr "เราสามารถใช้ผลลัพธ์ของ ``IntegerToBinary`` ในการเริ่มต้นได้ โดยทุก ๆ ตัวแปรเป็นตัวแปรไบนารี่และทุก ๆ อสมการข้อจำกัดจะถูกแปลงไปเป็นสมการข้อจำกัด แสดงผลลัพธ์ที่ได้เพื่อเป็นตัวอ้างอิง"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:905
msgid "Call ``convert`` method of ``LinearEqualityToPenalty`` to convert."
msgstr "เรียกใช้ Method ``convert`` ของ ``LinearEqualityToPenalty`` เพื่อแปลง"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:1070
msgid "After converting, the equality constraints are added to the objective function as additional terms with the default penalty factor provided by Qiskit optimization. The resulting problem is now a QUBO and compatible with many quantum optimization algorithms such as VQE, QAOA and so on."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:1081
msgid "This gives the same result as before."
msgstr "ซึ่งให้ผลลัพธ์เหมือนกับที่แสดงก่อนหน้านี้"

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:1092
msgid "Like we did for the other converters, let us see how ``interpret`` method works for this case."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:1211
msgid "We can see that the result of the ``interpret`` method implies that both the original and converted problems have exactly the same solution. This is expected because the converted problem has exactly the same variables as the original problem, the objective has been modified in such a way that we do not have the constraints anymore in the converted problem."
msgstr ""

#: ../../tutorials/02_converters_for_quadratic_programs.ipynb:1222
msgid "Finally, let us see how we interpret the result of QUBO back to the solution of the original problem ``qp``. The following code shows that the interpreted values are equivalent to the result of the original problem ``qp``."
msgstr ""

