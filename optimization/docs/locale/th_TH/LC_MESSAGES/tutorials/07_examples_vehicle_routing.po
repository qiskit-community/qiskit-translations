msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-04 19:50+0000\n"
"PO-Revision-Date: 2023-04-04 22:18\n"
"Last-Translator: \n"
"Language: th\n"
"Language-Team: Thai\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: th\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/07_examples_vehicle_routing.po\n"
"X-Crowdin-File-ID: 9654\n"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:9
msgid "This page was generated from `docs/tutorials/07_examples_vehicle_routing.ipynb`__."
msgstr "หน้านี้ถูกสร้างขึ้นจาก `docs/tutorials/07_examples_vehicle_routing.ipynb`__"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:9
msgid "Vehicle Routing"
msgstr "Vehicle Routing"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:12
msgid "The Introduction"
msgstr "บทนำ"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:14
msgid "Logistics is a major industry, with some estimates valuing it at USD 8183 billion globally in 2015. Most service providers operate a number of vehicles (e.g., trucks and container ships), a number of depots, where the vehicles are based overnight, and serve a number of client locations with each vehicle during each day. There are many optimization and control problems that consider these parameters. Computationally, the key challenge is how to design routes from depots to a number of client locations and back to the depot, so as to minimize vehicle-miles traveled, time spent, or similar objective functions. In this notebook we formalize an idealized version of the problem and showcase its solution using the quantum approximate optimization approach of Farhi, Goldstone, and Gutmann (2014)."
msgstr "โลจิสติกส์เป็นหนึ่งในอุตสาหกรรมหลักของโลกซึ่งมูลค่าประมาณการทั่วโลกอยู่ที่ 8183 พันล้าน USD ในปี 2015 ผู้ให้บริการส่วนใหญ่นั้นมีการใช้งานยานพาหนะจำนวนมาก (เช่น รถบรรทุกและเรือขนส่ง) มีจำนวนคลังสินค้ามาก และมีลูกค้าที่ต้องไปส่งสินค้าจำนวนมากทำให้ยานพาหนะต้องส่งสินค้าทั้งวัน มีเทคนิคในการทำ Optimization หลากหลายที่สามารถใช้ในงานนี้ได้ ความท้าทายหลักในการคำนวนนี้คือการออกแบบเส้นทางการเดินทางจากคลังสินค้าไปยังสถานที่ของลูกค้าจำนวนมาก และเดินทางกลับมายังคลังสินค้า โดยที่ทำให้มีระยะทางการเดินทางของยานพาหนะสั้นที่สุด, เวลาที่ใช้น้อยที่สุด หรือ วัตถุประสงค์อื่น ๆ ที่ใกล้เคียงกัน ใน Notebook นี้เราได้ออกแบบโจทย์นี้ในเวอร์ชันแบบอุดมคติและแสดงวิธีการหาคำตอบด้วยเทคนิค Quantum Approximate Optimization ของ Farhi, Goldstone และ Gutmann (2014)"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:17
msgid "The overall workflow we demonstrate comprises:"
msgstr "ลำดับการทำงานโดยรวมมีดังนี้"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:19
msgid "establish the client locations. Normally, these would be available ahead of the day of deliveries from a database. In our use case, we generate these randomly."
msgstr "กำหนดสถานที่ของลูกค้า โดยทั่วไปแล้วเราจะมีข้อมูลส่วนนี้อยู่ในฐานข้อมูลอยู่แล้ว ก่อนเวลาที่ต้องจัดส่ง ในกรณีของเราเราจะสร้างขึ้นมาแบบสุ่ม"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:21
msgid "compute the pair-wise distances, travel times, or similar. In our case, we consider the Euclidean distance, \"as the crow flies\", which is perhaps the simplest possible."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:23
msgid "compute the actual routes. This step is run twice, actually. First, we obtain a reference value by a run of a classical solver (IBM CPLEX) on the classical computer. Second, we run an alternative, hybrid algorithm partly on the quantum computer."
msgstr "คำนวนเส้นทางจริง ในขั้นตอนนี้เป็นการทำงาน 2 ครั้ง โดยครั้งแรกเรารับค่าจุดอ้างอิงจากการทำงานของอัลกอริทึมแบบดั้งเดิม (IBM CPLEX) บนเครื่องคอมพิวเตอร์แบบดั้งเดิม ในครั้งที่สองเราทำงานแบบ Hybrid โดยมีทั้งส่วนที่ทำงานบนเครื่องคอมพิวเตอร์แบบดั้งเดิมและส่วนที่ทำงานบนเครื่องควอนตัมคอมพิวเตอร์"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:25
msgid "visualization of the results. In our case, this is again a simplistic plot."
msgstr "แสดงผลผลลัพธ์ ในกรณีนี้เราจะใช้การแสดงผลแบบง่าย ๆ"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:27
msgid "In the following, we first explain the model, before we proceed with the installation of the pre-requisites and the data loading."
msgstr "ในส่วนถัดไป เราเริ่มด้วยการอธิบายโมเดลก่อนขั้นตอนการติดตั้งโมดูลที่จำเป็นและขั้นตอนการโหลดข้อมูล"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:30
msgid "The Model"
msgstr "โมเดล"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:32
msgid "Mathematically speaking, the vehicle routing problem (VRP) is a combinatorial problem, wherein the best routes from a depot to a number of clients and back to the depot are sought, given a number of available vehicles. There are a number of formulations possible, extending a number of formulations of the traveling salesman problem [Applegate et al, 2006]. Here, we present a formulation known as MTZ [Miller, Tucker, Zemlin, 1960]."
msgstr "ในเชิงคณิตศาสตร์ Vehicle Routing Problem (VRP) เป็นโจทย์ปัญหา Combinatorial ซึ่งเราต้องการหาเส้นทางที่ดีที่สุด โดยเป็นเส้นทางที่เริ่มต้นจากคลังสินค้า เดินทางไปสถานที่ของลูกค้าจำนวนมาก และย้อนกลับมาที่คลังสินค้า ที่มีระยะทางสั้นที่สุดโดยมีจำนวนยานพาหนะที่ใช้จำกัด ในโจทย์ปัญหานี้มีสมการที่สามารถใช้ได้หลากหลายจากการนำสมการของ Traveling Salesman Problem มาขยายความ [Applegate et al, 2006] ในที่นี้เราใช้งานสมการที่ชื่อว่า MTZ [Miller, Tucker, Zemlin, 1960]"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:34
msgid "Let :math:`n` be the number of clients (indexed as :math:`1,\\dots,n`), and :math:`K` be the number of available vehicles. Let :math:`x_{ij} = \\{0,1\\}` be the binary decision variable which, if it is :math:`1`, activates the segment from node :math:`i` to node :math:`j`. The node index runs from :math:`0` to :math:`n`, where :math:`0` is (by convention) the depot. There are twice as many distinct decision variables as edges. For example, in a fully connected graph, there are :math:`n(n+1)` binary decision variables."
msgstr "กำหนดให้ :math:`n` เป็นจำนวนของลูกค้า (มีลำดับเป็น :math:`1,\\dots,n`) และ :math:`K` คือจำนวนของยานพาหนะที่สามารถใช้งานได้ กำหนดให้ :math:`x_{ij} = \\{0,1\\}` เป็นตัวแปรทางเลือกแบบไบนารี่ โดยที่ถ้ามีค่าเป็น :math:`1` แปลว่ามีการเดินทางจาก Node :math:`i` ไปที่ Node :math:`j` ลำดับของ Node จะมีค่าตั้งแต่ :math:`0` จนถึง :math:`n` โดยที่ :math:`0` เป็น (ตามกฎแล้ว) เป็นคลังสินค้า Edge มีจำนวนตัวแปรสองเท่าหรือมากกว่าตัวแปรของ Node ตัวอย่างเช่น ในกราฟแบบเชื่อมต่อกันหมดจะมีตัวแปรทางเลือกแบบไบนารี่ของ Edge ทั้งหมด :math:`n(n+1)` ตัวแปร"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:37
msgid "If two nodes :math:`i` and :math:`j` have a link from :math:`i` to :math:`j`, we write :math:`i \\sim j`. We also denote with :math:`\\delta(i)^+` the set of nodes to which :math:`i` has a link, i.e., :math:`j \\in \\delta(i)^+` if and only if :math:`i \\sim j`. Similarly, we denote with :math:`\\delta(i)^-` the set of nodes which are connected to :math:`i`, in the sense that :math:`j \\in \\delta(i)^-` if and only if :math:`j \\sim i`."
msgstr "ถ้า Node :math:`i` และ Node :math:`j` มีลิงก์เชื่อมจาก :math:`i` ไป :math:`j` เราสามารถเขียนว่า :math:`i \\sim j` ได้ และเรากำหนดให้ :math:`\\delta(i)^+` เป็นเซตของ Node ที่ :math:`i` เชื่อมต่อด้วย กล่าวคือ :math:`j \\in \\delta(i)^+` ก็ต่อเมื่อ :math:`i \\sim j` ในทำนองเดียวกัน เรากำหนดให้ :math:`\\delta(i)^-` เป็นเซตของ Node ที่เชื่อมต่อกับ :math:`i` ในแง่ของ :math:`j \\in \\delta(i)^-` ก็ต่อเมื่อ :math:`j \\sim i`"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:39
msgid "In addition, we consider continuous variables, for all nodes :math:`i = 1,\\dots, n`, denoted :math:`u_i`. These variables are needed in the MTZ formulation of the problem to eliminate sub-tours between clients."
msgstr "เพิ่มเติม เราสนใจตัวแปรต่อเนื่องสำหรับทุก ๆ Node :math:`i = 1,\\dots, n` ของ :math:`u_i` ตัวแปรเหล่านี้จำเป็นสำหรับการจัดรูปสมการ MTZ ของโจทย์ปัญหา เพื่อจัดการกับเส้นการเดินทางย่อยระหว่างสถานที่ของลูกค้า"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:41
msgid "The VRP can be formulated as:"
msgstr "เราสามารถจัดรูปสมการ VRP ได้เป็น:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:43
msgid "(VRP) \\quad  f = \\min_{\\{x_{ij}\\}_{i\\sim j}\\in \\{0,1\\}, \\{u_i\\}_{i=1,\\dots,n}\\in \\mathbb{R}} \\quad \\sum_{i \\sim j} w_{ij} x_{ij}"
msgstr "(VRP) \\quad  f = \\min_{\\{x_{ij}\\}_{i\\sim j}\\in \\{0,1\\}, \\{u_i\\}_{i=1,\\dots,n}\\in \\mathbb{R}} \\quad \\sum_{i \\sim j} w_{ij} x_{ij}"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:48
msgid "subject to the node-visiting constraint:"
msgstr "จากข้อจำกัดด้านการผ่านแต่ละ Node ได้ว่า:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:50
msgid "\\sum_{j \\in \\delta(i)^+} x_{ij} = 1, \\,\\sum_{j \\in \\delta(i)^-} x_{ji} = 1,\\, \\forall i \\in \\{1,\\dots,n\\},"
msgstr "\\sum_{j \\in \\delta(i)^+} x_{ij} = 1, \\,\\sum_{j \\in \\delta(i)^-} x_{ji} = 1,\\, \\forall i \\in \\{1,\\dots,n\\},"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:55
msgid "the depot-visiting constraints:"
msgstr "จากข้อจำกัดด้านการผ่านคลังสินค้าได้ว่า:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:57
msgid "\\sum_{i \\in \\delta(0)^+} x_{0i} = K, \\, \\sum_{j \\in \\delta(0)^+} x_{j0} = K,"
msgstr "\\sum_{i \\in \\delta(0)^+} x_{0i} = K, \\, \\sum_{j \\in \\delta(0)^+} x_{j0} = K,"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:62
msgid "and the sub-tour elimination constraints:"
msgstr "และจากข้อจำกัดในการจัดการเส้นการเดินทางย่อยได้ว่า:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:64
msgid "u_i - u_j + Q x_{ij} \\leq Q-q_j, \\, \\forall i \\sim j, \\,i ,j \\neq 0, \\quad q_i \\leq u_i \\leq Q,\\, \\forall i, i \\neq 0."
msgstr "u_i - u_j + Q x_{ij} \\leq Q-q_j, \\, \\forall i \\sim j, \\,i ,j \\neq 0, \\quad q_i \\leq u_i \\leq Q,\\, \\forall i, i \\neq 0."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:69
msgid "In particular,"
msgstr "โดยเฉพาะ"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:71
msgid "The cost function is linear in the cost functions and weighs the different arches based on a positive weight :math:`w_{ij}>0` (typically the distance between node :math:`i` and node :math:`j`);"
msgstr "ฟังก์ชันวัตถุประสงค์เป็นฟังก์ชันเส้นตรงและถ่วงน้ำหนักในส่วนของสมการที่แตกต่างกันขึ้นอยู่กับค่าถ่วงน้ำหนักเชิงบวก :math:`w_{ij}>0` (โดยทั่วไปคือระยะห่างระหว่าง Node :math:`i` และ Node :math:`j`)"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:72
msgid "The first set of constraints enforce that from and to every client, only one link is allowed;"
msgstr "สมการข้อจำกัดเซตแรกเป็นตัวทำให้จากสถานที่ของลูกค้าคนหนึ่ง คนไปคนถึงสถานที่ของลูกค้าอีกคนหนึ่งนั้นสามารถมีลิงก์เชื่อมได้แค่ 1 ครั้ง;"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:73
msgid "The second set of constraints enforce that from and to the depot, exactly :math:`K` links are allowed;"
msgstr "สมการข้อจำกัดเซตที่สองเป็นตัวควบคุมให้การเดินทางจากคลังสินค้า และกลับมาที่คลังสินค้านั้นมีลิงก์เกิดึ้นได้เพียง :math:`K` ลิงก์เท่านั้น;"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:74
msgid "The third set of constraints enforce the sub-tour elimination constraints and are bounds on :math:`u_i`, with :math:`Q>q_j>0`, and :math:`Q,q_i \\in \\mathbb{R}`."
msgstr "ในสมการข้อจำกัดเซตที่สามเป็นตัวควบคุมให้กำจัดเส้นทางย่อยออก และเป็นขอบเขตของ :math:`u_i` โดยที่ :math:`Q>q_j>0` และ :math:`Q,q_i \\in \\mathbb{R}`"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:77
msgid "Classical solution"
msgstr "วิธีการแบบดั้งเดิม"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:79
msgid "We can solve the VRP classically, e.g., by using CPLEX. CPLEX uses a branch-and-bound-and-cut method to find an approximate solution of the VRP, which, in this formulation, is a mixed-integer linear program (MILP). For the sake of notation, we pack the decision variables in one vector as"
msgstr "เราสามารถหาคำตอบของโจทย์ปัญหา VRP ด้วยอัลกอริทึมแบบดั้งเดิมได้ เช่นการใช้ CPLEX โดย CPLEX เป็นการใช้เทคนิค Branch-and-Bound-and-Cut เพื่อหาผลลัพธ์แบบประมาณค่าของ VRP ซึ่งเป็นลักษณะของ Mixed-Integer Linear Program (MILP) โดยเพื่อประโยชน์ของการใช้งานสัญกรณ์นี้ เราจะรวมตัวแปรตัดสินใจไว้เป็นเวกเตอร์"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:81
msgid "{\\bf z} = [x_{01},x_{02},\\ldots,x_{10}, x_{12},\\ldots,x_{n(n-1)}]^T,"
msgstr "{\\bf z} = [x_{01},x_{02},\\ldots,x_{10}, x_{12},\\ldots,x_{n(n-1)}]^T,"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:86
msgid "wherein :math:`{\\bf z} \\in \\{0,1\\}^N`, with :math:`N = n (n+1)`. So the dimension of the problem scales quadratically with the number of nodes. Let us denote the optimal solution by :math:`{\\bf z}^*`, and the associated optimal cost :math:`f^*`."
msgstr "ในส่วน :math:`{\\bf z} \\in \\{0,1\\}^N` โดยที่ :math:`N = n (n+1)` ดังนั้นมิติของโจทย์ปัญหานี้จะเติบโตขึ้นในลักษณะกำลังสองของจำนวน Node ทำให้เราสามารถระบุคำตอบที่ดีที่สุดของโจทย์ปัญหานี้ได้ด้วย :math:`{\\bf z}^*` และค่าฟังก์ชันวัตถุประสงค์ที่ดีที่สุดคือ :math:`f^*`."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:89
msgid "Quantum solution"
msgstr "วิธีการแบบควอนตัม"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:91
msgid "Here, we demonstrate an approach that combines classical and quantum computing steps, following the quantum approximate optimization approach of Farhi, Goldstone, and Gutmann (2014). In particular, we use the variational quantum eigensolver (VQE). We stress that given the use of limited depth of the quantum circuits employed (variational forms), it is hard to discuss the speed-up of the algorithm, as the solution obtained is heuristic in nature. At the same time, due to the nature and importance of the target problems, it is worth investigating heuristic approaches, which may be worthwhile for some problem classes."
msgstr "ในส่วนนี้เราสาธิตวิธีการที่รวมวิธีการแบบดั้งเดิมและวิธีการแบบควอนตัมเข้าด้วยกัน ในลักษณะวิธีการแบบ Quantum Approximate Optimization ของ Farhi, Goldstonem และ Gutmann (2014) โดยรายละเอียดแล้วเราใช้ Variational Quantum Eigensolver (VQE) เราเน้นว่าด้วยข้อจำกัดในด้านความลึกของวงจรควอนตัมที่ใช้ (ในรูปแบบตัวแปร) ทำให้เป็นเรื่องยากในการบอกว่าอัลกอริทึมนี้จะมีความเร็วมากกว่าอัลกอริทึมแบบดั้งเดิมหรือไม่จากการที่คำตอบนั้นได้มาในลักษณะของ Heuristic แต่ในขณะเดียวกันเนื่องด้วยความสำคัญของปัญหานี้ มันจึงเป็นการคุ้มค่าที่จะลองทดสอบวิธีการแบบ Heuristic ซึ่งอาจจะคุ้มค่าสำหรับบางโจทย์ปัญหา"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:94
msgid "The algorithm can be summarized as follows:"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:96
msgid "Preparation steps:"
msgstr "ขั้นตอนเตรียม:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:98
msgid "Transform the combinatorial problem into a binary polynomial optimization problem with equality constraints only;"
msgstr "ทำการแปลงโจทย์ปัญหา Combinatorial ไปเป็นโจทย์ปัญหา Binary Polynomial Optimization โดยให้มีเพียงสมการข้อจำกัดเท่านั้น;"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:99
msgid "Map the resulting problem into an Ising Hamiltonian (:math:`H`) for variables :math:`{\\bf z}` and basis :math:`Z`, via penalty methods if necessary;"
msgstr "แปลงสมการปัญหาที่ได้ไปเป็น Ising Hamiltonian (:math:`H`) สำหรับตัวแปร :math:`{\\bf z}` และ Basis :math:`Z` ด้วยการทำเป็นบทลงโทษ ถ้าจำเป็นต้องใช้;"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:100
msgid "Choose the depth of the quantum circuit :math:`m`. Note that the depth can be modified adaptively."
msgstr "เลือกความลึกของวงจรควอนตัม :math:`m` หมายเหตุ ความลึกสามารถปรับได้ในภายหลัง"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:101
msgid "Choose a set of controls :math:`\\theta` and make a trial function :math:`\\big|\\psi(\\boldsymbol\\theta)\\rangle`, built using a quantum circuit made of C-Phase gates and single-qubit Y rotations, parameterized by the components of :math:`\\boldsymbol\\theta`."
msgstr "เลือกตัวควบคุม :math:`\\theta` ขึ้นมาเซตหนึ่งและสร้างฟังก์ชันทดสอบ :math:`\\big|\\psi(\\boldsymbol\\theta)\\rangle` โดยสร้างขึ้นด้วยวงจรควอนตัมที่ภายในประกอบไปด้วยควอนตัมเกต C-Phase และ Single-Qubit Y Rotations โดยมีส่วนที่เป็นพารามิเตอร์คือส่วน :math:`\\boldsymbol\\theta`"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:103
msgid "Algorithm steps:"
msgstr "ขั้นตอนของอัลกอริทึม:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:105
msgid "Evaluate :math:`C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)\\big|H\\big|\\psi(\\boldsymbol\\theta)\\rangle` by sampling the outcome of the circuit in the Z-basis and adding the expectation values of the individual Ising terms together. In general, different control points around :math:`\\boldsymbol\\theta` have to be estimated, depending on the classical optimizer chosen."
msgstr "จัดการกับ :math:`C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)\\big|H\\big|\\psi(\\boldsymbol\\theta)\\rangle` ด้วยการสุ่มตัวอย่างจากผลลัพธ์ขของวงจรด้วย Z-basis และนำค่าความคาดหวังของแต่ละพจน์ของโมเดล Ising มารวมกัน โดยทั่วไปแล้วเราจะต้องประมาณค่าผลลัพธ์ของจุดควบคุมรอบ ๆ :math:`\\boldsymbol\\theta` ด้วย ขึ้นอยู่กับ Optimizer แบบดั้งเดิมที่ใช้"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:106
msgid "Use a classical optimizer to choose a new set of controls."
msgstr "ใช้ Optimizer แบบดั้งเดิมเพื่อเลือกเซตของตัวควบคุมใหม่"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:107
msgid "Continue until :math:`C(\\boldsymbol\\theta)` reaches a minimum, close enough to the solution :math:`\\boldsymbol\\theta^*`."
msgstr "ทำงานซ้ำไปเรื่อย ๆ จนกว่า :math:`C(\\boldsymbol\\theta)` จะมีค่าเข้าสู่ค่าน้อยที่สุดใกล้เคียงกับคำตอบ :math:`\\boldsymbol\\theta^*`"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:108
msgid "Use the last :math:`\\boldsymbol\\theta` to generate a final set of samples from the distribution :math:`\\Big|\\langle z_i\\big|\\psi(\\boldsymbol\\theta)\\rangle\\Big|^2\\;\\forall i` to obtain the answer."
msgstr "ใช้ :math:`\\boldsymbol\\theta` สุดท้ายที่ได้ เพื่อสร้างเซตของผลลัพธ์สุ่มสุดท้ายจากการกระจายตัวของความน่าจะเป็น :math:`\\Big|\\langle z_i\\big|\\psi(\\boldsymbol\\theta)\\rangle\\Big|^2\\;\\forall i` เพื่อให้ได้คำตอบออกมา"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:110
msgid "There are many parameters throughout, notably the choice of the trial wavefunction. Below, we consider:"
msgstr "มีพารามิเตอร์จำนวนมากที่สามารถปรับได้ โดยเราได้เลือกเลือกฟังก์ชันคลื่นทดสอบมากดังนี้:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:112
msgid "\\big|\\psi(\\theta)\\rangle = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m \\big|+\\rangle"
msgstr "\\big|\\psi(\\theta)\\rangle = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m \\big|+\\rangle"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:117
msgid "where :math:`U_\\mathrm{entangler}` is a collection of C-Phase gates (fully-entangling gates), and :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^N Y(\\theta_{i})`, where :math:`N` is the number of qubits and :math:`m` is the depth of the quantum circuit."
msgstr "โดยที่ :math:`U_\\mathrm{entangler}` เป็นชุดของเกต C-Phase (Fully-Entangling Gate) และ :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^N Y(\\theta_{i})` โดยที่ :math:`N` เป็นจำนวนของคิวบิตและ :math:`m` คือความลึกของวงจรควอนตัม"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:120
msgid "Construct the Ising Hamiltonian"
msgstr "สร้าง Ising Hamiltonian"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:122
msgid "From :math:`VRP` one can construct a binary polynomial optimization with equality constraints only by considering cases in which :math:`K=n-1`. In these cases the sub-tour elimination constraints are not necessary and the problem is only on the variable :math:`{\\bf z}`. In particular, we can write an augmented Lagrangian as"
msgstr "จาก :math:`VRP` เราสามารถสร้างเป็นโจทย์ปัญหา Binary Polynomial Optimization โดยที่มีสมการช้อจำกัดได้ โดยสนใจที่กรณีที่ :math:`K=n-1` เพียงอย่างเดียว ในกรณีนี้เราไม่จำเป็นต้องมีสมการข้อจำกัดที่ใช้จัดการกับเส้นทางย่อย และโจทย์ปัญหานี้จะมีเพียงตัวแปร :math:`{\\bf z}` เราสามารถเขียนสมการ Lagrangian เสริมได้ว่า"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:124
msgid "(IH) \\quad H = \\sum_{i \\sim j} w_{ij} x_{ij}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big(\\sum_{j \\in \\delta(i)^+} x_{ij} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big(\\sum_{j \\in \\delta(i)^-} x_{ji} - 1\\Big)^2 +A \\Big(\\sum_{i \\in \\delta(0)^+} x_{0i} - K\\Big)^2 + A\\Big(\\sum_{j \\in \\delta(0)^+} x_{j0} - K\\Big)^2"
msgstr "(IH) \\quad H = \\sum_{i \\sim j} w_{ij} x_{ij}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big(\\sum_{j \\in \\delta(i)^+} x_{ij} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big(\\sum_{j \\in \\delta(i)^-} x_{ji} - 1\\Big)^2 +A \\Big(\\sum_{i \\in \\delta(0)^+} x_{0i} - K\\Big)^2 + A\\Big(\\sum_{j \\in \\delta(0)^+} x_{j0} - K\\Big)^2"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:129
msgid "where :math:`A` is a big enough parameter."
msgstr "โดยที่ :math:`A` เป็นพารามิเตอร์ที่มีค่ามากพอสมควร"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:132
msgid "From Hamiltonian to QP formulation"
msgstr "การแปลจาก Hamiltonian ไปเป็นสมการ QP"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:134
msgid "In the vector :math:`{\\bf z}`, and for a complete graph (:math:`\\delta(i)^+ = \\delta(i)^- = \\{0,1,\\dots,i-1,i+1,\\dots,n\\}`), :math:`H` can be written as follows."
msgstr "ในเวกเตอร์ :math:`{\\bf z}` และสำหรับ Complete Graph (:math:`\\delta(i)^+ = \\delta(i)^- = \\{0,1,\\dots,i-1,i+1,\\dots,n\\}`), :math:`H` สามารภเขียนได้ดังนี้"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:136
msgid "\\min_{{\\bf z}\\in \\{0,1\\}^{n(n+1)}} {\\bf w}^T {\\bf z}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big({\\bf e}_i \\otimes {\\bf 1}_n^T {\\bf z} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big({\\bf v}_i^T {\\bf z} - 1\\Big)^2 + A \\Big(({\\bf e}_0 \\otimes {\\bf 1}_n)^T{\\bf z} - K\\Big)^2 + A\\Big({\\bf v}_0^T{\\bf z} - K\\Big)^2."
msgstr "\\min_{{\\bf z}\\in \\{0,1\\}^{n(n+1)}} {\\bf w}^T {\\bf z}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big({\\bf e}_i \\otimes {\\bf 1}_n^T {\\bf z} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big({\\bf v}_i^T {\\bf z} - 1\\Big)^2 + A \\Big(({\\bf e}_0 \\otimes {\\bf 1}_n)^T{\\bf z} - K\\Big)^2 + A\\Big({\\bf v}_0^T{\\bf z} - K\\Big)^2."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:141
msgid "That is:"
msgstr "นั่นคือ:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:143
msgid "\\min_{\\bf z\\in \\{0,1\\}^{n(n+1)}} \\bf z^T {\\bf Q} \\bf z + {\\bf g}^T \\bf z + c,"
msgstr "\\min_{\\bf z\\in \\{0,1\\}^{n(n+1)}} \\bf z^T {\\bf Q} \\bf z + {\\bf g}^T \\bf z + c,"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:148
msgid "Where: first term:"
msgstr "โดย: พจน์แรก:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:150
msgid "{\\bf Q} = A \\sum_{i \\in \\{0,1,\\dots,n\\}}  \\Big[({\\bf e}_i \\otimes {\\bf 1}_n)({\\bf e}_i \\otimes {\\bf 1}_n)^T + {\\bf v}_i{\\bf v}_i^T \\Big]"
msgstr "{\\bf Q} = A \\sum_{i \\in \\{0,1,\\dots,n\\}}  \\Big[({\\bf e}_i \\otimes {\\bf 1}_n)({\\bf e}_i \\otimes {\\bf 1}_n)^T + {\\bf v}_i{\\bf v}_i^T \\Big]"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:155
msgid "Second term:"
msgstr "พจน์สอง:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:157
msgid "{\\bf g} = {\\bf w} -2 A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big[({\\bf e}_i \\otimes {\\bf 1}_n) + {\\bf v}_i \\Big] -2 A K \\Big[({\\bf e}_0 \\otimes {\\bf 1}_n) + {\\bf v}_0 \\Big]"
msgstr "{\\bf g} = {\\bf w} -2 A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big[({\\bf e}_i \\otimes {\\bf 1}_n) + {\\bf v}_i \\Big] -2 A K \\Big[({\\bf e}_0 \\otimes {\\bf 1}_n) + {\\bf v}_0 \\Big]"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:162
msgid "Third term:"
msgstr "พจน์สาม:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:164
msgid "c = 2An +2AK^2."
msgstr "c = 2An +2AK^2."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:169
msgid "The QP formulation of the Ising Hamiltonian is ready for the use of VQE. We will solve the QP using optimization stack available in Qiskit."
msgstr "เมื่อเราจัดรูปของ Ising Hamiltonian แล้วเราสามารถนำมาใช้งานกับ VQE ได้เลย เราจะสามารถใช้ Optimization Stack ของ Qiskit เพื่อแก้โจทย์ QP ได้"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:172
msgid "References"
msgstr "แหล่งอ้างอิง"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:174
msgid "[1] E. Farhi, J. Goldstone, S. Gutmann e-print arXiv 1411.4028, 2014"
msgstr "[1] E. Farhi, J. Goldstone, S. Gutmann e-print arXiv 1411.4028, 2014"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:176
msgid "[2] `Max-Cut and Traveling Salesman Problem <./06_examples_max_cut_and_tsp.ipynb>`__"
msgstr "[2] `Max-Cut and Traveling Salesman Problem <./06_examples_max_cut_and_tsp.ipynb>`__"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:178
msgid "[3] C. E. Miller, E. W. Tucker, and R. A. Zemlin (1960). \"Integer Programming Formulations and Travelling Salesman Problems\". J. ACM. 7: 326–329. doi:10.1145/321043.321046."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:180
msgid "[4] D. L. Applegate, R. M. Bixby, V. Chvátal, and W. J. Cook (2006). The Traveling Salesman Problem. Princeton University Press, ISBN 978-0-691-12993-8."
msgstr "[4] D. L. Applegate, R. M. Bixby, V. Chvátal, and W. J. Cook (2006). The Traveling Salesman Problem. Princeton University Press, ISBN 978-0-691-12993-8."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:192
msgid "Initialization"
msgstr "การเตรียมข้อมูลเบื้องต้น"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:194
msgid "First of all we load all the packages that we need. CPLEX is required for the classical computations. You can install it by ``pip install 'qiskit-optimization[cplex]'``."
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:229
msgid "We then initialize the variables"
msgstr "ถัดไปเราประกาศตัวแปร"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:252
msgid "We define an initializer class that randomly places the nodes in a 2-D plane and computes the distance between them."
msgstr "เรากำหนดคลาสชื่อ Initializer เพื่อทำการสุ่มจุดของ Node บนระนาบ 2 มิติ และทำการคำนวนหาระยะห่างระหว่างกัน"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:307
msgid "Classical solution using IBM ILOG CPLEX"
msgstr "ผลเฉลยแบบดั้งเดิมจาก IBM ILOG CPLEX"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:309
msgid "For a classical solution, we use IBM ILOG CPLEX. CPLEX is able to find the exact solution of this problem. We first define a ClassicalOptimizer class that encodes the problem in a way that CPLEX can solve, and then instantiate the class and solve it."
msgstr "สำหรับคำตอบแบบดั้งเดิม เราจะใช้ IBM ILOG CPLEX โดย CPLEX ทำให้เราสามารถหาคำตอบแบบแน่นอนของโจทย์ปัญหานี้ได้ ในขั้นแรก เราสร้างคลาส ClassicalOptimizer ซึ่งเป็นตัวแปลงโจทย์ปัญหาของเราไปอยู่ในรูปที่ CPLEX สามารถแก้ไขได้ และจากนั้นทำการประกาศคลาสและทำงานเพื่อแก้ไขปัญหา"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:550
msgid "If you have CPLEX, the solution shows the depot with a star and the selected routes for the vehicles with arrows."
msgstr "ถ้าคุณมี CPLEX คำตอบที่ได้จะแสดงคลังสินค้าอยู่ในลักษณะดาว และแสดงเส้นทางการเดินทางของยานพาหนะด้วยลูกศร"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:562
msgid "Quantum solution from the ground up"
msgstr "ผลเฉลยแบบควอนตัมตั้งแต่ต้นจนจบ"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:564
msgid "For the quantum solution, we use Qiskit."
msgstr "สำหรับคำตอบแบบควอนตัมนั้น เราใช้ Qiskit"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:566
msgid "First, we derive the solution from the ground up, using a class QuantumOptimizer that encodes the quantum approach to solve the problem and then we instantiate it and solve it. We define the following methods inside the class:"
msgstr "ในขั้นตอนแรกเราทำการแปลงโจทย์ปัญหาของเราตั้งแต่ต้นด้วยคลาส QuantumOptimizer ซึ่งเป็นการแปลงให้อยู่ในรูปแบบที่สามารถแก้โจทย์ด้วยวิธีการแบบควินตัมได้ จากนั้นเราทำการแก้โจทย์ เราได้กำหนดกระบวนการเหล่านี้ไว้ใน Method ของคลาส:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:568
msgid "``binary_representation`` : encodes the problem :math:`(M)` into a QP terms (that's basically linear algebra);"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:569
msgid "``construct_problem`` : constructs a QUBO optimization problem as an instance of ``QuadraticProgram``;"
msgstr "``construct_problem`` : สร้างโจทย์ QUBO Optimization problem ในลักษณะของ ``QuadraticProgram``;"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:570
msgid "``solve_problem``: solves the problem :math:`(M)` constructed at the previous step via ``MinimunEigenOptimizer`` by using ``SamplingVQE`` with default parameters;"
msgstr ""

#: ../../tutorials/07_examples_vehicle_routing.ipynb:682
msgid "Step 1"
msgstr "ขั้นที่ 1"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:684
msgid "Instantiate the quantum optimizer class with parameters:"
msgstr "ประกาศตัวแปรของคลาส Quantum Optimizer ด้วยพารามิเตอร์:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:686
msgid "the instance;"
msgstr "ตัวแปร;"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:687
msgid "the number of nodes and vehicles ``n`` and ``K``;"
msgstr "จำนวนของ Node และยานพาหนะคือ ``n`` และ ``K``;"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:710
msgid "Step 2"
msgstr "ขั้นที่ 2"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:712
msgid "Encode the problem as a binary formulation (IH-QP)."
msgstr "แปลงโจทย์ปัญหาให้อยู่ในรูปสมการไบนารี่ (IH-QP)"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:714
msgid "Sanity check: make sure that the binary formulation in the quantum optimizer is correct (i.e., yields the same cost given the same solution)."
msgstr "เตือกสติ: ตรวจสอบให้แน่ใจว่าสมการไบนารี่ใน Quantum Optimizer นั้นถูกต้อง (ผลลัพธ์จากฟังก์ชันวัตถุประสงค์เดียวกันให้คำตอบเหมือนกัน)"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:778
msgid "Step 3"
msgstr "ขั้นที่ 3"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:780
msgid "Encode the problem as an instance of ``QuadraticProgram``."
msgstr "แปลงโจทย์ปัญหาให้อยู่ในรูปของ ``QuadraticProgram``"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:802
msgid "Step 4"
msgstr "ขั้นที่ 4"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:804
msgid "Solve the problem via ``MinimumEigenOptimizer`` from the optimization stack. N.B. Depending on the number of qubits, the state-vector simulation can take a while; for example with 12 qubits, it takes more than 12 hours. Logging is useful to see what the program is doing."
msgstr "แก้โจทย์ปัญหานี้ด้วย ``MinimumEigenOptimizer`` ใน Optimization Stack หมายเหตุ การทำงานบนเครื่องจำลอง State-Vector จะใช้เวลามากขึ้นตาม จำนวนคิวบิต เช่น 12 คิวบิตใช้เวลามากกว่า 12 ชั่วโมง สามารถตรวจสอบการทำงานของโปรแกรมได้ผ่านทาง Logging"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:852
msgid "Step 5"
msgstr "ขั้นที่ 5"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:854
msgid "Visualize the solution"
msgstr "แสดงภาพผลลัพธ์"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:906
msgid "The plots present the depot with a star and the selected routes for the vehicles with arrows. Note that in this particular case, we can find the optimal solution of the QP formulation, which happens to coincide with the optimal solution of the ILP."
msgstr "ในภาพที่แสดง คลังสินค้าคือดาว และเส้นทางของยานพาหนะแทนด้วยลูกศร หมายเหตุ ในบางกรณีเราสามารถหาคำตอบที่ดีที่สุดของสมการ QP ได้ ซึ่งมีค่าตรงกับคำตแบที่ดีที่สุดของ ILP"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:908
msgid "Keep in mind that VQE is an heuristic working on the QP formulation of the Ising Hamiltonian, though. For suitable choices of A, local optima of the QP formulation will be feasible solutions to the ILP. While for some small instances, as above, we can find optimal solutions of the QP formulation which coincide with optima of the ILP, finding optimal solutions of the ILP is harder than finding local optima of the QP formulation, in general, which in turn is harder than finding feasible solutions of the ILP. Even within the VQE, one may provide stronger guarantees, for specific variational forms (trial wave functions)."
msgstr "ให้คิดไว้เสมอว่า VQE นั้นเป็นการทำงานแบบ Heuristic จากสมการ QP ของ Ising Hamiltonian สำหรับตัวเลือกที่เหมาะสมของ A คำตอบของสมการ QP จะเป็นค่าที่ดีที่สุดแบบ Local ซึ่งสามารถเป็นคำตอบของ ILP ได้ ในขณะที่ในบางกรณีส่วนน้อยที่เราอาจจะสามารถหาค่าที่ดีที่สุดของสมการ QP ได้ ซึ่งเป็นคำตอบที่ดีที่สุดของ ILP เช่นกัน ในการหาคำตอบที่ดีที่สุดของ ILP นั้นเป็นเรื่องยากกกว่าการหาคำตอบแบบ Local แม้แต่ด้วยการใช้ VQE ก็ไม่สามารถหาคำตอบที่ดีที่สุดได้เสมอ แต่อาจจะสามารถหาคำตอบที่ดีที่สุดได้ง่ายกว่าในบางโจทย์กับฟังก์ชันคลื่นทดสอบบางตัว"

