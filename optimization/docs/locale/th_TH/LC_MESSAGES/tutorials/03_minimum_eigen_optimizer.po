msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-14 08:10+0000\n"
"PO-Revision-Date: 2023-11-14 08:45\n"
"Last-Translator: \n"
"Language: th\n"
"Language-Team: Thai\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: th\n"
"X-Crowdin-File: /main/optimization/docs/locale/en/LC_MESSAGES/tutorials/03_minimum_eigen_optimizer.po\n"
"X-Crowdin-File-ID: 9646\n"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:9
msgid "This page was generated from `docs/tutorials/03_minimum_eigen_optimizer.ipynb`__."
msgstr "หน้านี้ถูกสร้างขึ้นจาก `docs/tutorials/03_minimum_eigen_optimizer.ipynb`__"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:9
msgid "Minimum Eigen Optimizer"
msgstr "Minimum Eigen Optimizer"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:21
msgid "Introduction"
msgstr "บทนำ"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:32
msgid "An interesting class of optimization problems to be addressed by quantum computing are Quadratic Unconstrained Binary Optimization (QUBO) problems. Finding the solution to a QUBO is equivalent to finding the ground state of a corresponding Ising Hamiltonian, which is an important problem not only in optimization, but also in quantum chemistry and physics. For this translation, the binary variables taking values in :math:`\\{0, 1\\}` are replaced by spin variables taking values in :math:`\\{-1, +1\\}`, which allows one to replace the resulting spin variables by Pauli Z matrices, and thus, an Ising Hamiltonian. For more details on this mapping we refer to [1]."
msgstr "ลักษณะของโจทย์ปัญหาที่น่าจะใจในเรื่อง Optimization ที่การคำนวณเชิงควอนตัมสามารถเข้ามาช่วยได้คือ โจทย์ปัญหา Quadratic Unconstrained Binary Optimization (QUBO) การค้นหาคำตอบของ QUBO นั้นเทียบได้กับการค้นหาสถานะพื้นของ Ising Hamiltonian ของ QUBO นั้น ๆ ซึ่งเป็นปัญหาที่สำคัญมาก ไม่ใช่เพียงเรื่องของ Optimization แต่ยังรวมไปถึงเรื่อง เคมีควอนตัม และ ฟิสิกส์ สำหรับการแปลงนี้เราจะแปลงตัวแปรจากตัวแปรไบนารี่ :math:`\\{0, 1\\}` แทนที่ด้วยตัวแปรสปินที่มีค่าเป็น :math:`\\{-1, +1\\}` ซึ่งทำให้เราสามารถแทนที่ตัวแปรสปินด้วยเมทริกซ์ Pauli Z และใช้งานเป็น Ising Hamiltonian สำหรับรายละเอียดเพิ่มเติมสามารถศึกษาได้ที่ [1]"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:35
msgid "Qiskit optimization provides automatic conversion from a suitable ``QuadraticProgram`` to an Ising Hamiltonian, which then allows leveraging all the ``SamplingMinimumEigensolver`` implementations, such as"
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:37
msgid "``SamplingVQE``,"
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:38
msgid "``QAOA``, or"
msgstr "``QAOA`` หรือ"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:39
msgid "``NumpyMinimumEigensolver`` (classical exact method)."
msgstr "``NumpyMinimumEigensolver`` (เทคนิคดั้งเดิมในการหาผลลัพธ์แบบแน่นอน)"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:41
msgid "Note 1: ``MinimumEigenOptimizer`` does not support ``qiskit_algorithms.VQE``. But ``qiskit_algorithms.SamplingVQE`` can be used instead."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:43
msgid "Note 2: ``MinimumEigenOptimizer`` can use ``NumpyMinimumEigensolver`` as an exception case though it inherits ``MinimumEigensolver`` (not ``SamplingMinimumEigensolver``)."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:45
msgid "Qiskit optimization provides a the ``MinimumEigenOptimizer`` class, which wraps the translation to an Ising Hamiltonian (in Qiskit Terra also called ``SparsePauliOp``), the call to a ``MinimumEigensolver``, and the translation of the results back to an ``OptimizationResult``."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:47
msgid "In the following we first illustrate the conversion from a ``QuadraticProgram`` to a ``SparsePauliOp`` and then show how to use the ``MinimumEigenOptimizer`` with different ``MinimumEigensolver``\\ s to solve a given ``QuadraticProgram``. The algorithms in Qiskit optimization automatically try to convert a given problem to the supported problem class if possible, for instance, the ``MinimumEigenOptimizer`` will automatically translate integer variables to binary variables or add linear equality constraints as a quadratic penalty term to the objective. It should be mentioned that a ``QiskitOptimizationError`` will be thrown if conversion of a quadratic program with integer variables is attempted."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:50
msgid "The circuit depth of ``QAOA`` potentially has to be increased with the problem size, which might be prohibitive for near-term quantum devices. A possible workaround is Recursive QAOA, as introduced in [2]. Qiskit optimization generalizes this concept to the ``RecursiveMinimumEigenOptimizer``, which is introduced at the end of this tutorial."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:53
msgid "References"
msgstr "แหล่งอ้างอิง"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:55
msgid "[1] `A. Lucas, Ising formulations of many NP problems, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>`__"
msgstr "[1] `A. Lucas, Ising formulations of many NP problems, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>`__"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:57
msgid "[2] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"
msgstr "[2] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:69
msgid "Converting a QUBO to a SparsePauliOp"
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:173
msgid "Next we translate this QUBO into an Ising operator. This results not only in a ``SparsePauliOp`` but also in a constant offset to be taken into account to shift the resulting value."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:230
msgid "Sometimes a ``QuadraticProgram`` might also directly be given in the form of a ``SparsePauliOp``. For such cases, Qiskit optimization also provides a translator from a ``SparsePauliOp`` back to a ``QuadraticProgram``, which we illustrate in the following."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:307
msgid "This translator allows, for instance, one to translate a ``SparsePauliOp`` to a ``QuadraticProgram`` and then solve the problem with other algorithms that are not based on the Ising Hamiltonian representation, such as the ``GroverOptimizer``."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:319
msgid "Solving a QUBO with the MinimumEigenOptimizer"
msgstr "การหาคำคอบของ QUBO ด้วย MinimumEigenOptimizer"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:330
msgid "We start by initializing the ``MinimumEigensolver`` we want to use."
msgstr "เริ่มต้นโดยการประกาศ ``MinimumEigensolver`` ที่เราต้องการใช้"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:353
msgid "Then, we use the ``MinimumEigensolver`` to create ``MinimumEigenOptimizer``."
msgstr "จากนั้นเราใช้ ``MinimumEigensolver`` ในการสร้าง ``MinimumEigenOptimizer``"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:375
msgid "We first use the ``MinimumEigenOptimizer`` based on the classical exact ``NumPyMinimumEigensolver`` to get the optimal benchmark solution for this small example."
msgstr "อันดับแรกเราใช้ ``MinimumEigenOptimizer`` จากอัลกอริทึมแบบดั้งเดิม ``NumPyMinimumEigensolver`` เพื่อให้ได้คำตอบที่ถูกต้องที่สุดสำหรับตัวอย่างขนาดเล็กนี้"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:427
msgid "Next we apply the ``MinimumEigenOptimizer`` based on ``QAOA`` to the same problem."
msgstr "ต่อไปเราใช้ ``MinimumEigenOptimizer`` ซึ่งเป็นอัลกอริทึม ``QAOA`` ในการแก้ปัญหาเดียวกันนี้"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:480
msgid "Analysis of Samples"
msgstr "วิเคราะห์ผลลัพธ์ตัวอย่าง"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:482
msgid "``OptimizationResult`` provides useful information in the form of ``SolutionSample``\\ s (here denoted as *samples*). Each ``SolutionSample`` contains information about the input values (``x``), the corresponding objective function value (``fval``), the fraction of samples corresponding to that input (``probability``), and the solution ``status`` (``SUCCESS``, ``FAILURE``, ``INFEASIBLE``). Multiple samples corresponding to the same input are consolidated into a single ``SolutionSample`` (with its ``probability`` attribute being the aggregate fraction of samples represented by that ``SolutionSample``)."
msgstr "``OptimizationResult`` ให้ข้อมูลที่มีประโยชน์ในรูปแบบของ ``SolutionSample`` (ในที่นี้หมายถึงตัวแปร *samples*) แต่ละ ``SolutionSample`` ประกอบไปด้วยข้อมูลเกี่ยวตัวแปรที่รับข้อมูล (``x``), ค่าที่ได้จากฟังก์ชันวัตถุประสงค์ (``fval``), อัตราส่วนของแต่ละผลลัพธ์ตามข้อมูลที่รับเข้ามา (``probability``) และคำตอบว่าสำเร็จหรือไม่ ``status`` (``SUCCESS``, ``FAILURE``, ``INFEASIBLE``) การรวมข้อมูลรับเข้าหลายตัวเป็นข้อมูลเดียวจะทำให้ได้ ``SolutionSample`` เดียว (โดยที่ ``probability`` ที่ได้จะเป็นการรวมกันของอัตราส่วนในแต่ละผลลัพธ์ของ ``SolutionSample`` เดิม)."

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:554
msgid "We may also want to filter samples according to their status or probabilities."
msgstr "เราสามารถกรองผลลัพธ์จากสถานะหรือความน่าจะเป็นได้"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:641
msgid "If we want to obtain a better perspective of the results, statistics is very helpful, both with respect to the objective function values and their respective probabilities. Thus, mean and standard deviation are the very basics for understanding the results."
msgstr "ถ้าเราต้องการมุมมองของผลลัพธ์ที่กว้างขึ้น เราสามารถใช้สถิติเข้ามาช่วยได้ในส่วนของฟังก์ชันวัตถุประสงค์และผลลัพธ์ความน่าจะเป็นที่ได้ เช่นการดูค่าเฉลี่ยและค่าเบี่ยงเบนมาตรฐาน ซึ่งเป็นค่าพื้นฐานในการทำความเข้าใจผลลัพธ์"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:733
msgid "Finally, despite all the number-crunching, visualization is usually the best early-analysis approach."
msgstr "สุดท้าย นอกเหนือจากตัวเลขแล้ว เราสามารถใช้ภาพเข้ามาช่วยในการวิเคราะห์ได้"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:821
msgid "RecursiveMinimumEigenOptimizer"
msgstr "RecursiveMinimumEigenOptimizer"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:832
msgid "The ``RecursiveMinimumEigenOptimizer`` takes a ``MinimumEigenOptimizer`` as input and applies the recursive optimization scheme to reduce the size of the problem one variable at a time. Once the size of the generated intermediate problem is below a given threshold (``min_num_vars``), the ``RecursiveMinimumEigenOptimizer`` uses another solver (``min_num_vars_optimizer``), e.g., an exact classical solver such as CPLEX or the ``MinimumEigenOptimizer`` based on the ``NumPyMinimumEigensolver``."
msgstr "``RecursiveMinimumEigenOptimizer`` เป็นการใช้ ``MinimumEigenOptimizer`` มาเป็นส่วนรับเข้าข้อมูลและใช้การทำวิธีการ Recursive Optimization เพื่อลดขนาดของปัญหาลงทีละ 1 ตัวแปร เมื่อเราสามารถลดขนาดของปัญหาลงมาต่ำกว่าเกณฑ์ที่กำหนดแล้ว (``min_num_vars``) ``RecursiveMinimumEigenOptimizer`` จะใช้เครื่องมืออีกตัวหนึ่ง (``min_num_vars_optimizer``) เช่นอัลกอริทึมดั้งเดิมที่ให้ผลลัพธ์แบบแน่นอนเช่น CPLEX หรือ ``MinimumEigenOptimizer`` จาก ``NumPyMinimumEigensolver``"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:834
msgid "In the following, we show how to use the ``RecursiveMinimumEigenOptimizer`` using the two ``MinimumEigenOptimizer``\\ s introduced before."
msgstr "ในส่วนนี้เราได้แสดงวิธีการใช้ ``RecursiveMinimumEigenOptimizer`` ด้วยการใช้ ``MinimumEigenOptimizer`` 2 ตัว เหมือนกับที่ได้แนะนำไปก่อนหน้านี้"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:845
msgid "First, we construct the ``RecursiveMinimumEigenOptimizer`` such that it reduces the problem size from 3 variables to 1 variable and then uses the exact solver for the last variable. Then we call ``solve`` to optimize the considered problem."
msgstr "อันดับแรกเราสร้าง ``RecursiveMinimumEigenOptimizer`` ทำให้ลดขนาดปัญหาจากตัวแปร 3 ตัวไปเป็นตัวแปร 1 ตัวแล้วอัลกอริทึมแก้ปัญหาแบบแน่นอนสำหรับหาค่าตัวแปรตัวสุดท้าย จากนั้นเราเรียกใช้คำสั่ง ``solve`` เพื่อหาค่าที่ดีที่สุดในโจทย์ปัญหานี้"

