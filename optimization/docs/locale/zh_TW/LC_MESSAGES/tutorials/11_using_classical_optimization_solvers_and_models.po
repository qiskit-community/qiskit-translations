msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-11 01:17+0000\n"
"PO-Revision-Date: 2022-11-11 02:35\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/11_using_classical_optimization_solvers_and_models.po\n"
"X-Crowdin-File-ID: 9715\n"
"Language: zh_TW\n"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:9
msgid "This page was generated from `docs/tutorials/11_using_classical_optimization_solvers_and_models.ipynb`__."
msgstr "此頁面是從 `docs/tutorials/11_using_classical_optimization_solvers_and_models.ipynb`__ 產生的。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:9
msgid "Using Classical Optimization Solvers and Models with Qiskit Optimization"
msgstr "以Qiskit Optimization使用古典最佳化解算器和模型"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:20
msgid "We can use classical optimization solvers (CPLEX and Gurobi) with Qiskit Optimization. Docplex and Gurobipy are the Python APIs for CPLEX and Gurobi, respectively. We can load and save an optimization model by Docplex and Gurobipy and can apply CPLEX and Gurobi to ``QuadraticProgram``."
msgstr "我們可以以Qiskit Optimization使用古典最佳化解算器 (CPLEX and Gurobi) 。 Docplex 和 Gurobipy 分別是 CPLEX 和 Gurobi的 Python API 。 我們可以使用 Docplex 和 Gurobipy 來載入和儲存最佳化模型，並且可以將 CPLEX 和 Gurobi 套用至 ``QuadraticProgram``。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:22
msgid "If you want to use the CPLEX solver, you need to install ``pip install 'qiskit-optimization[cplex]'``. Docplex is automatically installed, as a dependent, when you install Qiskit Optimization."
msgstr "如果您要使用 CPLEX 解算器，您需要安裝``pip install 'qiskit-optimization[cplex]'``。當您安裝 Qiskit Optimization時，會自動安裝 Dockplex 作為相依性套件。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:24
msgid "If you want to use Gurobi and Gurobipy, you need to install ``pip install 'qiskit-optimization[gurobi]'``."
msgstr "如果您要使用 Gurobi 和 Gurobipy，您需要安裝 ``pip install 'qiskit-optimization[gurobi]'``。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:26
msgid "Note that these solvers installed via pip are free versions, which have some limitations such as number of variables. Also note that the latest version 20.1 of CPLEX is available only for Python 3.7 and 3.8 as of July 2021. See the following pages for details."
msgstr "請注意，這些透過 pip 安裝的求解器是免費的版本，這些版本有一些限制，例如變數的數目。 另請注意， CPLEX 的最新版本 20.1 僅適用於 Python 3.7 和 3.8 ，截至 2021年 7 月。 如需詳細資料，請參閱下列頁面。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:28
msgid "https://pypi.org/project/cplex/"
msgstr "https://pypi.org/project/cplex/"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:29
msgid "https://pypi.org/project/gurobipy/"
msgstr "https://pypi.org/project/gurobipy/"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:41
msgid "CplexSolver and GurobiSolver"
msgstr "CplexSolver 與 GurobiSolver"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:43
msgid "Qiskit Optimization supports the classical solvers of CPLEX and Gurobi as ``CplexSolver`` and ``GurobiSolver``, respectively. We can solve ``QuadraticProgram`` with ``CplexSolver`` and ``GurobiSolver`` as follows."
msgstr "Qiskit Optimization 支援 CPLEX 和 Gurobi 的古典解算器，分別為 ``ClexSolver` ` 和 ``GurobiSolver`` 。 我們可以在 \" ` CplexSolver` ` 和 ` ` GurobiSolver` ` 中求解 ` `QuadricProgram`` 和 ``，如下所示。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:208
msgid "We can set the solver parameter of CPLEX as follows. We can display the solver message of CPLEX by setting ``disp=True``. See `Parameters of CPLEX <https://www.ibm.com/docs/en/icos/20.1.0?topic=cplex-parameters>`__ for details of CPLEX parameters."
msgstr "我們可以設定 CPLEX 的解算器參數，如下所示。 我們可以透過設定 ``disp=True``來顯示 CPLEX 的 解算器訊息。如需 CPLEX 參數的詳細資料，請參閱 `Parameters of CPLEX <https://www.ibm.com/docs/en/icos/20.1.0?topic=cplex-parameters>`__ 。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:299
msgid "We get the same optimal solution by QAOA as follows."
msgstr "我們以 QAOA 可以取得相同的最佳解如下。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:385
msgid "Translators between ``QuadraticProgram`` and Docplex/Gurobipy"
msgstr "``QuadraticProgram`` 和 Docplex/Gurobipy 之間的轉換"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:387
msgid "Qiskit Optimization can load ``QuadraticProgram`` from a Docplex model and a Gurobipy model."
msgstr "Qiskit Optimization可以從 Daplex 模型和 Gurobiby 模型載入 ``QuadragicProgram`` 。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:389
msgid "First, we define an optimization problem by Docplex and Gurobipy."
msgstr "首先，我們定義了 Dockplex 和 Gurobipy的最佳化問題。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:548
msgid "We can generate ``QuadraticProgram`` object from both Docplex and Gurobipy models. We see that the two ``QuadraticProgram`` objects generated from Docplex and Gurobipy are identical."
msgstr "我們可以從 Docplex 和 Gurobipy 模型產生 ``QuadricProgram`` 物件。 我們可以觀察到從 Dockplex 和 Gurobipy 產生的兩個 ``QuadricProgram`` 物件是相同的。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:697
msgid "We can generate a Docplex model and a Gurobipy model from ``QuadraticProgram`` too."
msgstr "我們可以從 ``QuadraticProgram`` 中產生 Doclex 模型和Gurobiby 模型。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:847
msgid "Indicator constraints of Docplex"
msgstr "Docplex 的指示變量約束"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:849
msgid "``from_docplex_mp`` supports indicator constraints, e.g., ``u = 0 => x + y <= z`` (u: binary variable) when we convert a Docplex model into ``QuadraticProgram``. It converts indicator constraints into linear constraints using the big-M formulation."
msgstr "當我們將 Dockplex 模型轉換為``QuadricProgram`` 時，``from_docplex_mp`` 支援指示變量約束，例如 ``u = 0 => x + y <= z``(u： 二進制的變數)。此會使用大M法將指示變量約束轉換成線性約束。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:960
msgid "Let’s compare the solutions of the model with an indicator constraint by"
msgstr "讓我們以下列方式，比較有指示變量約束的模型的解"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:962
msgid "applying CPLEX directly to the Docplex model (without translating it to ``QuadraticProgram``. CPLEX solver natively supports the indicator constraints),"
msgstr "將 CPLEX 直接套用至Docplex模型 (不將它轉換為 ``QuadraticProgram``。 CPLEX 解算器自然地支援指示變量約束)，"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:963
msgid "applying QAOA to ``QuadraticProgram`` obtained by ``from_docplex_mp``."
msgstr "將 QAOA 套用至 ``from_docplex_mp`` 所取得的 ` ` QuadraticProgram`` 。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:965
msgid "We see the solutions are same."
msgstr "我們可以觀察到的解都是一樣的。"

