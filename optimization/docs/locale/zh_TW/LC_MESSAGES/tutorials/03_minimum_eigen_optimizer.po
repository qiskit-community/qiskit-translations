msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-04 19:50+0000\n"
"PO-Revision-Date: 2023-08-14 19:18\n"
"Last-Translator: \n"
"Language: zh\n"
"Language-Team: Chinese Traditional\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/optimization/docs/locale/en/LC_MESSAGES/tutorials/03_minimum_eigen_optimizer.po\n"
"X-Crowdin-File-ID: 9646\n"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:9
msgid "This page was generated from `docs/tutorials/03_minimum_eigen_optimizer.ipynb`__."
msgstr "此頁面是從 `docs/tutorials/03_minimum_eigen_optimizer.ipynb`__ 產生的。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:9
msgid "Minimum Eigen Optimizer"
msgstr "最小特徵最佳化工具"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:21
msgid "Introduction"
msgstr "簡介"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:32
msgid "An interesting class of optimization problems to be addressed by quantum computing are Quadratic Unconstrained Binary Optimization (QUBO) problems. Finding the solution to a QUBO is equivalent to finding the ground state of a corresponding Ising Hamiltonian, which is an important problem not only in optimization, but also in quantum chemistry and physics. For this translation, the binary variables taking values in :math:`\\{0, 1\\}` are replaced by spin variables taking values in :math:`\\{-1, +1\\}`, which allows one to replace the resulting spin variables by Pauli Z matrices, and thus, an Ising Hamiltonian. For more details on this mapping we refer to [1]."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:35
msgid "Qiskit provides automatic conversion from a suitable ``QuadraticProgram`` to an Ising Hamiltonian, which then allows leveraging all the ``SamplingMinimumEigensolver`` implementations, such as"
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:37
msgid "``SamplingVQE``,"
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:38
msgid "``QAOA``, or"
msgstr "``QAOA``，或"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:39
msgid "``NumpyMinimumEigensolver`` (classical exact method)."
msgstr "` ` NumMinimiumEigensolver`` （古典精確方法）。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:41
msgid "Note 1: ``MinimumEigenOptimizer`` does not support ``qiskit.algorithms.minimum_eigensolver.VQE``. But ``qiskit.algorithms.minimum_eigensolver.SamplingVQE`` can be used instead."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:43
msgid "Note 2: ``MinimumEigenOptimizer`` can use ``NumpyMinimumEigensolver`` as an exception case though it inherits ``MinimumEigensolver`` (not ``SamplingMinimumEigensolver``)."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:45
msgid "Qiskit Optimization provides a the ``MinimumEigenOptimizer`` class, which wraps the translation to an Ising Hamiltonian (in Qiskit Terra also called ``Operator``), the call to a ``MinimumEigensolver``, and the translation of the results back to an ``OptimizationResult``."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:47
msgid "In the following we first illustrate the conversion from a ``QuadraticProgram`` to an ``Operator`` and then show how to use the ``MinimumEigenOptimizer`` with different ``MinimumEigensolver``\\ s to solve a given ``QuadraticProgram``. The algorithms in Qiskit automatically try to convert a given problem to the supported problem class if possible, for instance, the ``MinimumEigenOptimizer`` will automatically translate integer variables to binary variables or add linear equality constraints as a quadratic penalty term to the objective. It should be mentioned that a ``QiskitOptimizationError`` will be thrown if conversion of a quadratic program with integer variables is attempted."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:50
msgid "The circuit depth of ``QAOA`` potentially has to be increased with the problem size, which might be prohibitive for near-term quantum devices. A possible workaround is Recursive QAOA, as introduced in [2]. Qiskit generalizes this concept to the ``RecursiveMinimumEigenOptimizer``, which is introduced at the end of this tutorial."
msgstr "\" ` QAOA`` 的電路深度可能要隨著問題大小而增加，這可能對近期的量子裝置有點難達成。 可能的暫時解決方法是 Recursive QAOA，如 [2] 中所介紹。 Qiskit 將此概念推廣至 \" ` RecursiveMinimumEigenOptimizer``，這是在本指導教學結束時所引進的。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:53
msgid "References"
msgstr "參考資料"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:55
msgid "[1] `A. Lucas, Ising formulations of many NP problems, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>`__"
msgstr "[1] `A. 盧卡斯，伊辛，許多 NP 問題的配方, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>`__"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:57
msgid "[2] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"
msgstr "[2] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:69
msgid "Converting a QUBO to an Operator"
msgstr "將 QUBO 轉換為運算子"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:173
msgid "Next we translate this QUBO into an Ising operator. This results not only in an ``Operator`` but also in a constant offset to be taken into account to shift the resulting value."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:242
msgid "Sometimes a ``QuadraticProgram`` might also directly be given in the form of an ``Operator``. For such cases, Qiskit also provides a translator from an ``Operator`` back to a ``QuadraticProgram``, which we illustrate in the following."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:319
msgid "This translator allows, for instance, one to translate an ``Operator`` to a ``QuadraticProgram`` and then solve the problem with other algorithms that are not based on the Ising Hamiltonian representation, such as the ``GroverOptimizer``."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:331
msgid "Solving a QUBO with the MinimumEigenOptimizer"
msgstr "以 MinimumEigenOptimizer 解決 QUBO"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:342
msgid "We start by initializing the ``MinimumEigensolver`` we want to use."
msgstr "我們首先初始化我們要使用的 ``MinimumEigensolver`` 。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:365
msgid "Then, we use the ``MinimumEigensolver`` to create ``MinimumEigenOptimizer``."
msgstr "然後，我們使用 ``MinimumEigenSolver`` 來建立 ``MinimumEigenOptimizer``。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:387
msgid "We first use the ``MinimumEigenOptimizer`` based on the classical exact ``NumPyMinimumEigensolver`` to get the optimal benchmark solution for this small example."
msgstr "我們首先使用 ``MinimumEigenOptimizer``這是基於``NumPyMinimumEigenSolver``的古典方法解決 ，以取得這個小範例的最佳基準解決方案。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:439
msgid "Next we apply the ``MinimumEigenOptimizer`` based on ``QAOA`` to the same problem."
msgstr "接下來，我們根據 ``QAOA` ` 來套用 ``MinimumEigenOptimizer` ` ，以處理相同的問題。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:492
msgid "Analysis of Samples"
msgstr "結果分析"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:494
msgid "``OptimizationResult`` provides useful information in the form of ``SolutionSample``\\ s (here denoted as *samples*). Each ``SolutionSample`` contains information about the input values (``x``), the corresponding objective function value (``fval``), the fraction of samples corresponding to that input (``probability``), and the solution ``status`` (``SUCCESS``, ``FAILURE``, ``INFEASIBLE``). Multiple samples corresponding to the same input are consolidated into a single ``SolutionSample`` (with its ``probability`` attribute being the aggregate fraction of samples represented by that ``SolutionSample``)."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:566
msgid "We may also want to filter samples according to their status or probabilities."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:653
msgid "If we want to obtain a better perspective of the results, statistics is very helpful, both with respect to the objective function values and their respective probabilities. Thus, mean and standard deviation are the very basics for understanding the results."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:745
msgid "Finally, despite all the number-crunching, visualization is usually the best early-analysis approach."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:833
msgid "RecursiveMinimumEigenOptimizer"
msgstr "RecursiveMinimumEigenOptimizer"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:844
msgid "The ``RecursiveMinimumEigenOptimizer`` takes a ``MinimumEigenOptimizer`` as input and applies the recursive optimization scheme to reduce the size of the problem one variable at a time. Once the size of the generated intermediate problem is below a given threshold (``min_num_vars``), the ``RecursiveMinimumEigenOptimizer`` uses another solver (``min_num_vars_optimizer``), e.g., an exact classical solver such as CPLEX or the ``MinimumEigenOptimizer`` based on the ``NumPyMinimumEigensolver``."
msgstr "``RecursiveMinimumEigenOptimizer`` 採用 ``MinimumEigenOptimizer`` 作為輸入，並套用遞迴最佳化方來一次減少問題一個變數的大小。 一旦產生的中間問題的大小低於給定的臨界值（ ``min_num_vars``）， ` ` RecursiveMinimumEigenOptimizer`` 使用另一個求解器（``min_num_vars_optimizer`` ），例如古典的求解器CPLEX ，或根據 ``NumPyMinimiumiimiuserver`` 的 ` `MinimumEigenOptimizer` ` 。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:846
msgid "In the following, we show how to use the ``RecursiveMinimumEigenOptimizer`` using the two ``MinimumEigenOptimizer``\\ s introduced before."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:857
msgid "First, we construct the ``RecursiveMinimumEigenOptimizer`` such that it reduces the problem size from 3 variables to 1 variable and then uses the exact solver for the last variable. Then we call ``solve`` to optimize the considered problem."
msgstr "首先，我們建構 ``RecursiveMinimumEigenOptimizer`` ，使它將問題大小從 3 個變數降低到 1 個變數，然後使用作用在最後一個變數求解器。 然後，我們呼叫``solve`` ，以優化被認為的問題。"

