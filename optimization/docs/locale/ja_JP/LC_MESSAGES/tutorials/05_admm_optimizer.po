msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-14 15:08+0000\n"
"PO-Revision-Date: 2022-02-15 08:52\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/05_admm_optimizer.po\n"
"X-Crowdin-File-ID: 9650\n"
"Language: ja_JP\n"

#: ../../tutorials/05_admm_optimizer.ipynb:9
msgid "This page was generated from `docs/tutorials/05_admm_optimizer.ipynb`__."
msgstr "このページは `docs/tutorials/05_admm_optimizer.ipynb`__ から生成されました。"

#: ../../tutorials/05_admm_optimizer.ipynb:9
msgid "ADMM Optimizer"
msgstr "ADMM オプティマイザー"

#: ../../tutorials/05_admm_optimizer.ipynb:21
msgid "Introduction"
msgstr "はじめに"

#: ../../tutorials/05_admm_optimizer.ipynb:32
msgid "The ADMM Optimizer can solve classes of mixed-binary constrained optimization problems, hereafter (MBCO), which often appear in logistic, finance, and operation research. In particular, the ADMM Optimizer here designed can tackle the following optimization problem :math:`(P)`:"
msgstr "ADMMオプティマイザーは、ロジスティック、金融、オペレーションズ・リサーチに多く見られる、混合バイナリ制約の最適化問題(以下MBCO)のクラスを解くことができます。 特に、ここで設計された ADMMオプティマイザーは、次の最適化問題 :math:`(P)` に取り組むことができます。"

#: ../../tutorials/05_admm_optimizer.ipynb:34
msgid "\\min_{x \\in \\mathcal{X},u\\in\\mathcal{U} \\subseteq \\mathbb{R}^l } \\quad q(x) + \\varphi(u),"
msgstr "\\min_{x \\in \\mathcal{X},u\\in\\mathcal{U} \\subseteq \\mathbb{R}^l } \\quad q(x) + \\varphi(u),"

#: ../../tutorials/05_admm_optimizer.ipynb:39
msgid "subject to the constraints:"
msgstr "制約の対象:"

#: ../../tutorials/05_admm_optimizer.ipynb:41
msgid "\\mathrm{s.t.:~} \\quad G x = b, \\quad  g(x) \\leq 0, \\quad \\ell(x, u) \\leq 0,"
msgstr "\\mathrm{s.t.:~} \\quad G x = b, \\quad  g(x) \\leq 0, \\quad \\ell(x, u) \\leq 0,"

#: ../../tutorials/05_admm_optimizer.ipynb:46
msgid "with the corresponding functional assumptions."
msgstr "対応する機能的な仮定に基づいています"

#: ../../tutorials/05_admm_optimizer.ipynb:48
msgid "Function :math:`q: \\mathbb{R}^n \\to \\mathbb{R}` is quadratic, i.e., :math:`q(x) = x^{\\intercal} Q x + a^{\\intercal} x` for a given symmetric squared matrix :math:`Q \\in \\mathbb{R}^n \\times \\mathbb{R}^n, Q = Q^{\\intercal}`, and vector :math:`a \\in \\mathbb{R}^n`;"
msgstr "関数 :math:`q: \\mathbb{R}^n \\to \\mathbb{R}` は二次です。つまり、対称正方行列 :math:`Q \\in \\mathbb{R}^n \\times \\mathbb{R}^n, Q = Q^{\\intercal}` と ベクトル :math:`a \\in \\mathbb{R}^n` について、 :math:`q(x) = x^{\\intercal} Q x + a^{\\intercal} x` です。"

#: ../../tutorials/05_admm_optimizer.ipynb:49
msgid "The set :math:`\\mathcal{X} = \\{0,1\\}^n = \\{x_{(i)} (1-x_{(i)}) = 0, \\forall i\\}` enforces the binary constraints;"
msgstr ":math:`\\mathcal{X} = \\{0,1\\}^n = \\{x_{(i)} (1-x_{(i)}) = 0, \\forall i\\}` により、バイナリ制約が強制されます。"

#: ../../tutorials/05_admm_optimizer.ipynb:50
msgid "Matrix :math:`G\\in\\mathbb{R}^n \\times \\mathbb{R}^{n'}`, vector :math:`b \\in \\mathbb{R}^{n'}`, and function :math:`g: \\mathbb{R}^n \\to \\mathbb{R}` is convex;"
msgstr "行列 :math:`G\\in\\mathbb{R}^n \\times \\mathbb{R}^{n'}`, ベクトル :math:`b \\in \\mathbb{R}^{n'}`, および関数 :math:`g: \\mathbb{R}^n \\to \\mathbb{R}`は、凸です。"

#: ../../tutorials/05_admm_optimizer.ipynb:51
msgid "Function :math:`\\varphi: \\mathbb{R}^l \\to \\mathbb{R}` is convex and :math:`\\mathcal{U}` is a convex set;"
msgstr "関数 :math:`\\varphi: \\mathbb{R}^l \\to \\mathbb{R}`は凸で、 :math:`\\mathcal{U}`は凸集合です。"

#: ../../tutorials/05_admm_optimizer.ipynb:52
msgid "Function :math:`\\ell: \\mathbb{R}^n\\times \\mathbb{R}^l \\to \\mathbb{R}` is *jointly* convex in :math:`x, u`."
msgstr "関数 :math:`\\ell: \\mathbb{R}^n\\times \\mathbb{R}^l \\to \\mathbb{R}` は :math:`x, u` について *一体で* 凸です。"

#: ../../tutorials/05_admm_optimizer.ipynb:63
msgid "In order to solve MBO problems, [1] proposed heuristics for :math:`(P)` based on the Alternating Direction Method of Multipliers (ADMM) [2]. ADMM is an operator splitting algorithm with a long history in convex optimization, and it is known to have residual, objective and dual variable convergence properties, provided that convexity assumptions are holding."
msgstr "MBO問題を解くために、[1]は Alternating Direction Method of Multipliers(交互方向乗数法, ADMM)[2]に基づいて :math:`(P)` についてのヒューリスティックスを提案しました。ADMMは、凸最適化の長い歴史を持つ演算子分割アルゴリズムであり、凸性の仮定が成り立つ場合、残差、目的関数、および双対変数収束の特性を持つことが知られています。"

#: ../../tutorials/05_admm_optimizer.ipynb:65
msgid "The method of [1] (referred to as 3-ADMM-H) leverages the ADMM operator-splitting procedure to devise a decomposition for certain classes of MBOs into:"
msgstr "[1] の方法（3-ADMM-H と呼ばれる）は、ADMM演算子分割手順を利用して、特定のクラスの MBO を次のように分解します。"

#: ../../tutorials/05_admm_optimizer.ipynb:67
msgid "a QUBO subproblem to be solved by on the quantum device via variational algorithms, such as VQE or QAOA;"
msgstr "VQE や QAOA などの変分アルゴリズムを介して量子デバイス上で解決されるQUBOサブ問題。"

#: ../../tutorials/05_admm_optimizer.ipynb:68
msgid "continuous convex constrained subproblem, which can be efficiently solved with classical optimization solvers."
msgstr "古典的最適化ソルバーで効率的に解くことができる連続凸制約付きサブ問題。"

#: ../../tutorials/05_admm_optimizer.ipynb:70
msgid "The algorithm 3-ADMM-H works as follows:"
msgstr "アルゴリズム 3-ADMM-H は以下のように動作します。"

#: ../../tutorials/05_admm_optimizer.ipynb:72
msgid "Initialization phase (set the parameters and the QUBO and convex solvers);"
msgstr "初期化フェーズ (パラメーターとQUBOと凸ソルバーを設定);"

#: ../../tutorials/05_admm_optimizer.ipynb:73
msgid "For each ADMM iterations ($k = 1, 2, :nbsphinx-math:`\\ldots`, $) until termination:"
msgstr "ADMM の各反復($k = 1, 2, :nbsphinx-math:`\\ldots`, $) を、終了するまで行います:"

#: ../../tutorials/05_admm_optimizer.ipynb:75
msgid "Solve a properly defined QUBO subproblem (with a classical or quantum solver);"
msgstr "適切に定義された QUBO サブ問題を (古典または量子ソルバーで) 解く;"

#: ../../tutorials/05_admm_optimizer.ipynb:76
msgid "Solve properly defined convex problems (with a classical solver);"
msgstr "適切に定義された凸問題を(古典ソルバーで) 解く;"

#: ../../tutorials/05_admm_optimizer.ipynb:77
msgid "Update the dual variables."
msgstr "双対変数を更新する"

#: ../../tutorials/05_admm_optimizer.ipynb:79
msgid "Return optimizers and cost."
msgstr "オプティマイザーとコストを返す"

#: ../../tutorials/05_admm_optimizer.ipynb:81
msgid "A comprehensive discussion on the conditions for convergence, feasibility and optimality of the algorithm can be found in [1]. A variant with 2 ADMM blocks, namely a QUBO subproblem, and a continuous convex constrained subproblem, is also introduced in [1]."
msgstr "アルゴリズムの収束、実現可能性、および最適化の条件に関する包括的な議論は、[1]にあります。 2つのADMMブロックを持つバリアント、つまりQUBOサブ問題と連続凸制約付きサブ問題も[1]で紹介されています。"

#: ../../tutorials/05_admm_optimizer.ipynb:84
msgid "References"
msgstr "参考文献"

#: ../../tutorials/05_admm_optimizer.ipynb:86
msgid "[1] `C. Gambella and A. Simonetto, Multi-block ADMM heuristics for mixed-binary optimization, on classical and quantum computers, arXiv preprint arXiv:2001.02069 (2020). <https://arxiv.org/abs/2001.02069>`__"
msgstr "[1] `C. Gambella and A. Simonetto, Multi-block ADMM heuristics for mixed-binary optimization, on classical and quantum computers, arXiv preprint arXiv:2001.02069 (2020). <https://arxiv.org/abs/2001.02069>`__"

#: ../../tutorials/05_admm_optimizer.ipynb:88
msgid "[2] `S. Boyd, N. Parikh, E. Chu, B. Peleato, and J. Eckstein, Distributed optimization and statistical learning via the alternating direction method of multipliers, Foundations and Trends in Machine learning, 3, 1–122 (2011). <https://web.stanford.edu/~boyd/papers/pdf/admm_distr_stats.pdf>`__"
msgstr "[2] `S. Boyd, N. Parikh, E. Chu, B. Peleato, and J. Eckstein, Distributed optimization and statistical learning via the alternating direction method of multipliers, Foundations and Trends in Machine learning, 3, 1–122 (2011). <https://web.stanford.edu/~boyd/papers/pdf/admm_distr_stats.pdf>`__"

#: ../../tutorials/05_admm_optimizer.ipynb:100
msgid "Initialization"
msgstr "初期化"

#: ../../tutorials/05_admm_optimizer.ipynb:102
msgid "First of all we load all the packages that we need."
msgstr "まず、必要なパッケージをすべてロードします。"

#: ../../tutorials/05_admm_optimizer.ipynb:141
msgid "We first initialize all the algorithms we plan to use later in this tutorial."
msgstr "最初に、このチュートリアルで後で使用する予定のすべてのアルゴリズムを初期化します。"

#: ../../tutorials/05_admm_optimizer.ipynb:143
msgid "To solve the QUBO problems we can choose between"
msgstr "QUBOの問題を解決するために、次のいずれかを選択できます。"

#: ../../tutorials/05_admm_optimizer.ipynb:145
msgid "``MinimumEigenOptimizer`` using different ``MinimumEigensolver``, such as ``VQE``, ``QAOA`` or ``NumpyMinimumEigensolver`` (classical)"
msgstr "``VQE`` 、 ``QAOA`` 、 ``NumpyMinimumEigensolver`` （古典）などのさまざまな ``MinimumEigensolver`` を使用する ``MinimumEigenOptimizer``"

#: ../../tutorials/05_admm_optimizer.ipynb:146
msgid "``GroverOptimizer``"
msgstr "``GroverOptimizer``"

#: ../../tutorials/05_admm_optimizer.ipynb:147
msgid "``CplexOptimizer`` (classical, if CPLEX is installed)"
msgstr "``CplexOptimizer`` （CPLEXがインストールされている場合は古典）"

#: ../../tutorials/05_admm_optimizer.ipynb:149
msgid "and to solve the convex continuous problems we can choose between the following classical solvers:"
msgstr "そして、凸の連続的な問題を解決するために、次のような古典的なソルバの間で選択できます。"

#: ../../tutorials/05_admm_optimizer.ipynb:151
msgid "``CplexOptimizer`` (if CPLEX is installed)"
msgstr "``CplexOptimizer`` （CPLEXがインストールされている場合）"

#: ../../tutorials/05_admm_optimizer.ipynb:152
msgid "``CobylaOptimizer``"
msgstr "``CobylaOptimizer``"

#: ../../tutorials/05_admm_optimizer.ipynb:154
msgid "In case CPLEX is not available, the ``CobylaOptimizer`` (for convex continuous problems) and the ``MinimumEigenOptimizer`` using the ``NumpyMinimumEigensolver`` (for QUBOs) can be used as classical alternatives to CPLEX for testing, validation, and benchmarking."
msgstr "CPLEXが利用できない場合、CPLEXの古典的な代替として、凸連続問題であれば ``CobylaOptimizer`` を、QUBOであれば　``NumpyMinimumEigensolver`` を用いた ``MinimEigenOptimizer`` を使用して、テスト、検証、ベンチマークを行うことができます。"

#: ../../tutorials/05_admm_optimizer.ipynb:188
msgid "Example"
msgstr "例"

#: ../../tutorials/05_admm_optimizer.ipynb:190
msgid "We test 3-ADMM-H algorithm on a simple Mixed-Binary Quadratic Problem with equality and inequality constraints (Example 6 reported in [1]). We first construct a docplex problem and then load it into a ``QuadraticProgram``."
msgstr "3-ADMM-Hアルゴリズムを、等式や不等式制約をもつ簡単な混合バイナリ二次計画問題でテストします([1] の例6)。 最初にdocplex問題を構築し、次にそれを ``QuadraticProgram`` にロードします。"

#: ../../tutorials/05_admm_optimizer.ipynb:307
msgid "Classical Solution"
msgstr "古典的解法"

#: ../../tutorials/05_admm_optimizer.ipynb:309
msgid "3-ADMM-H needs a QUBO optimizer to solve the QUBO subproblem, and a continuous optimizer to solve the continuous convex constrained subproblem. We first solve the problem classically: we use the ``MinimumEigenOptimizer`` with the ``NumPyMinimumEigenSolver`` as a classical and exact QUBO solver and we use the ``CobylaOptimizer`` as a continuous convex solver. 3-ADMM-H supports any other suitable solver available in Qiskit. For instance, VQE, QAOA, and GroverOptimizer can be invoked as quantum solvers, as demonstrated later. If CPLEX is installed, the ``CplexOptimizer`` can also be used as both, a QUBO and convex solver."
msgstr "3-ADMM-Hは、QUBOサブ問題を解くのにはQUBOオプティマイザを、連続凸制約問題を解くのには連続オプティマイザを必要とします。まず最初に、問題を古典的な方法で解きます: ``NumPyMinimumEigenSolver`` による ``MinimumEigenOptimizer`` を古典的かつ正確な QUBO ソルバーとして使用し、連続凸問題ソルバーとして ``CobylaOptimizer`` を使用します。 3-ADMM-Hは、他にもQiskitで利用可能な適切なソルバーをすべてサポートしています。例えば、VQE、QAOA、およびGroverOptimizerは、後述するように、量子ソルバーとして呼び出すことができます。 CPLEXがインストールされていれば、``CplexOptimizer`` をQUBOと凸ソルバーのいずれにも使用することができます。"

#: ../../tutorials/05_admm_optimizer.ipynb:322
msgid "Parameters"
msgstr "パラメーター"

#: ../../tutorials/05_admm_optimizer.ipynb:324
msgid "The 3-ADMM-H are wrapped in class ``ADMMParameters``. Customized parameter values can be set as arguments of the class. In this example, parameters :math:`\\rho, \\beta` are initialized to :math:`1001` and :math:`1000`, respectively. The penalization ``factor_c`` of equality constraints :math:`Gx = b` is set to :math:`900`. The tolerance ``tol`` for primal residual convergence is set to ``1.e-6``. In this case, the 3-block implementation is guaranteed to converge for Theorem 4 of [1], because the inequality constraint with the continuous variable is always active. The 2-block implementation can be run by setting ``three_block=False``, and practically converges to a feasible not optimal solution."
msgstr "3-ADMM-Hは、 ``ADMMParameters`` クラスにラップされています。カスタマイズされたパラメーター値は、クラスの引数として設定できます。この例では、パラメーター :math:`\\rho, \\beta` がそれぞれ :math:`1001` と :math:`1000` に初期化されています。等式制約 :math:`Gx = b` のペナルティ ``factor_c`` は :math:`900` に設定されています。一次残差収束の許容誤差 ``tol`` は ``1.e-6`` に設定されています。この場合、3変数の実装は、[1]の定理4に対して収束することが保証されています。これは、連続変数による不等式制約が常にアクティブであるためです。2ブロックの実装は ``three_block=False`` を設定することで実行でき、最適ではない実行可能解に実質的に収束します。"

#: ../../tutorials/05_admm_optimizer.ipynb:349
msgid "Calling 3-ADMM-H algorithm"
msgstr "3-ADMM-Hアルゴリズムを呼び出す"

#: ../../tutorials/05_admm_optimizer.ipynb:351
msgid "To invoke the 3-ADMM-H algorithm, an instance of the ``ADMMOptimizer`` class needs to be created. This takes ADMM-specific parameters and the subproblem optimizers separately into the constructor. The solution returned is an instance of ``OptimizationResult`` class."
msgstr "3-ADMM-H アルゴリズムを呼び出すには、``ADMMOptimizer`` クラスのインスタンスを作成する必要があります。 これにより、ADMM固有のパラメータとサブ問題のオプティマイザがコンストラクタに分離されます。返されるソリューションは、``OptimizationResult`` クラスのインスタンスです。"

#: ../../tutorials/05_admm_optimizer.ipynb:395
msgid "Classical Solver Result"
msgstr "古典ソルバーの結果"

#: ../../tutorials/05_admm_optimizer.ipynb:397
msgid "The 3-ADMM-H solution can be then printed and visualized. The ``x`` attribute of the solution contains respectively, the values of the binary decision variables and the values of the continuous decision variables. The ``fval`` is the objective value of the solution."
msgstr "3-ADMM-Hソリューションをプリントして可視化することができます。 解の ``x`` 属性には、バイナリ決定変数の値と連続決定変数の値がそれぞれ含まれています。 ``fval`` はその解の目的値です。"

#: ../../tutorials/05_admm_optimizer.ipynb:445
msgid "Solution statistics can be accessed in the ``state`` field and visualized. We here display the convergence of 3-ADMM-H, in terms of primal residuals."
msgstr "``state`` フィールドで解の解析統計にアクセスし可視化することができます。ここでは、原始残差の観点から、3-ADMM-Hの収束を示します。"

#: ../../tutorials/05_admm_optimizer.ipynb:478
msgid "Quantum Solution"
msgstr "量子ソリューション"

#: ../../tutorials/05_admm_optimizer.ipynb:480
msgid "We now solve the same optimization problem with QAOA as QUBO optimizer, running on simulated quantum device. First, one need to select the classical optimizer of the eigensolver QAOA. Then, the simulation backend is set. Finally, the eigensolver is wrapped into the ``MinimumEigenOptimizer`` class. A new instance of ``ADMMOptimizer`` is populated with QAOA as QUBO optimizer."
msgstr "シミュレートされた量子デバイス上で実行されるQUBOオプティマイザーと同じQAOAの最適化問題を解決します。まず、固有値ソルバーQAOAの古典的なオプティマイザーを選択する必要があります。次に、シミュレーションバックエンドが設定されます。最後に、固有ソルバーは ``MinimumEigenOptimizer`` クラスにラップされます。 ``ADMMOptimizer`` の新しいインスタンスには、QUBOオプティマイザーとしてQAOAが入力されます。"

#: ../../tutorials/05_admm_optimizer.ipynb:523
msgid "Quantum Solver Results"
msgstr "量子ソルバーの結果"

#: ../../tutorials/05_admm_optimizer.ipynb:525
msgid "Here we present the results obtained from the quantum solver. As in the example above ``x`` stands for the solution, the ``fval`` is for objective value."
msgstr "ここでは、量子ソルバーから得られた結果を紹介します。 上の例のように、``x`` はソリューションの略で、``fval`` は目的値を表します。"

