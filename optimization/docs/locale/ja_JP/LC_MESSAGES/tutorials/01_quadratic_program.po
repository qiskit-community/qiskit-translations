msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-06 22:00+0000\n"
"PO-Revision-Date: 2023-02-06 22:26\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/01_quadratic_program.po\n"
"X-Crowdin-File-ID: 9642\n"

#: ../../tutorials/01_quadratic_program.ipynb:9
msgid "This page was generated from `docs/tutorials/01_quadratic_program.ipynb`__."
msgstr "このページは `docs/tutorials/01_quadratic_program.ipynb`__ から生成されました。"

#: ../../tutorials/01_quadratic_program.ipynb:9
msgid "Quadratic Programs"
msgstr "二次計画法"

#: ../../tutorials/01_quadratic_program.ipynb:21
msgid "Introduction"
msgstr "はじめに"

#: ../../tutorials/01_quadratic_program.ipynb:32
msgid "In this tutorial, we briefly introduce how to build optimization problems using Qiskit’s optimization module. Qiskit introduces the ``QuadraticProgram`` class to make a model of an optimization problem. More precisely, it deals with quadratically constrained quadratic programs given as follows:"
msgstr "このチュートリアルでは、Qiskit の最適化モジュールを利用して最適化問題をビルドする方法について簡単に紹介します。最適化問題のモデルを構築するために、Qiskit には ``QuadraticProgram`` クラスが導入されています。より正確には、次のような二次制約二次計画問題を扱います。"

#: ../../tutorials/01_quadratic_program.ipynb:34
msgid "\\begin{align}\n"
"\\text{minimize}\\quad& x^\\top Q_0 x + c^\\top x\\\\\n"
"\\text{subject to}\\quad& A x \\leq b\\\\\n"
"& x^\\top Q_i x + a_i^\\top x \\leq r_i, \\quad 1,\\dots,i,\\dots,q\\\\\n"
"& l_i \\leq x_i \\leq u_i, \\quad 1,\\dots,i,\\dots,n,\n"
"\\end{align}"
msgstr "\\begin{align}\n"
"\\text{minimize}\\quad& x^\\top Q_0 x + c^\\top x\\\\\n"
"\\text{subject to}\\quad& A x \\leq b\\\\\n"
"& x^\\top Q_i x + a_i^\\top x \\leq r_i, \\quad 1,\\dots,i,\\dots,q\\\\\n"
"& l_i \\leq x_i \\leq u_i, \\quad 1,\\dots,i,\\dots,n,\n"
"\\end{align}"

#: ../../tutorials/01_quadratic_program.ipynb:44
msgid "where the :math:`Q_i` are :math:`n \\times n` matrices, :math:`A` is a :math:`m \\times n` matrix , :math:`x`, and :math:`c` are :math:`n`-dimensional vectors, :math:`b` is an :math:`m`-dimensional vector, and where :math:`x` can be defined as binary, integer, or continuous variables. In addition to “:math:`\\leq`” constraints ``QuadraticProgram`` also supports “:math:`\\geq`” and “:math:`=`”."
msgstr "ここで、 :math:`Q_i` は :math:`n \\times n` 行列、 :math:`A` は :math:`m \\times n` 行列、 :math:`x` と :math:`c` は :math:`n` 次元ベクトル、 :math:`b` は :math:`m` 次元ベクトル、 :math:`x` はバイナリー、整数、または連続変数として定義できます。 「 :math:`\\leq` 」制約に加えて、 ``QuadraticProgram`` は「 :math:`\\geq` 」と「 :math:`=` 」もサポートします。"

#: ../../tutorials/01_quadratic_program.ipynb:56
msgid "Loading a ``QuadraticProgram`` from an LP file"
msgstr "LPファイルから ``QuadraticProgram`` をロードする"

#: ../../tutorials/01_quadratic_program.ipynb:67
msgid "As setup, you need to import the following module."
msgstr "セットアップとして、以下のモジュールをインポートする必要があります。"

#: ../../tutorials/01_quadratic_program.ipynb:89
msgid "You start with an empty model. How to add variables and constraints to a model is explained in the section `Directly constructing a QuadraticProgram <#Directly-constructing-a-QuadraticProgram>`__."
msgstr "空のモデルから始めます。モデルに変数と制約を追加する方法については、 `QuadraticProgram を直接構築する <#Directly-constructing-a-QuadraticProgram>`__ セクションで説明します。"

#: ../../tutorials/01_quadratic_program.ipynb:100
msgid "Qiskit’s optimization module supports the conversion from Docplex model. You can easily make a model of an optimization problem with Docplex. You can find the documentation of Docplex at https://ibmdecisionoptimization.github.io/docplex-doc/mp/index.html"
msgstr "Qiskitの最適化モジュールはDocplexモデルからの変換をサポートしています。Docplexで簡単に最適化問題のモデルを作成できます。 Docplex のドキュメントは https://ibmdecisonoptimization.github.io/docplex-doc/mp/index.html にあります。"

#: ../../tutorials/01_quadratic_program.ipynb:102
msgid "You can load a Docplex model to ``QuadraticProgram`` by using ``from_docplex_mp`` function."
msgstr "``from_docplex_mp`` 関数を呼び出すことで、Docplex モデルを ``QuadraticProgram`` に読み込むことができます。"

#: ../../tutorials/01_quadratic_program.ipynb:114
msgid "Loading a ``QuadraticProgram`` from a docplex model"
msgstr "docplex モデルから ``QuadraticProgram`` をロードする"

#: ../../tutorials/01_quadratic_program.ipynb:228
msgid "``QuadraticProgram`` has a method ``prettyprint`` to generate a comprehensive string representation."
msgstr "``QuadraticProgram`` には包括的な文字列表現を生成するための ``prettyprint`` メソッドがあります。"

#: ../../tutorials/01_quadratic_program.ipynb:335
msgid "Directly constructing a ``QuadraticProgram``"
msgstr "``QuadraticProgram`` の直接的な構築"

#: ../../tutorials/01_quadratic_program.ipynb:346
msgid "We then explain how to make model of an optimization problem directly using ``QuadraticProgram``. Let’s start from an empty model."
msgstr "次に、``QuadraticProgram`` を使用して最適化問題のモデルを直接作成する方法を説明します。空のモデルから始めましょう。"

#: ../../tutorials/01_quadratic_program.ipynb:420
msgid "The ``QuadraticProgram`` supports three types of variables:"
msgstr "``QuadraticProgram`` は、次の3種類の変数をサポートします。"

#: ../../tutorials/01_quadratic_program.ipynb:422
msgid "Binary variable"
msgstr "バイナリー変数"

#: ../../tutorials/01_quadratic_program.ipynb:423
msgid "Integer variable"
msgstr "整数変数"

#: ../../tutorials/01_quadratic_program.ipynb:424
msgid "Continuous variable"
msgstr "連続変数"

#: ../../tutorials/01_quadratic_program.ipynb:426
msgid "When you add variables, you can specify names, types, lower bounds and upper bounds."
msgstr "変数を追加する際には、名前、タイプ、下限、上限を指定できます。"

#: ../../tutorials/01_quadratic_program.ipynb:523
msgid "You can set the objective function by invoking ``QuadraticProgram.minimize`` or ``QuadraticProgram.maximize``. You can add a constant term as well as linear and quadratic objective function by specifying linear and quadratic terms with either list, matrix or dictionary."
msgstr "``QuadraticProgram.minimize`` または ``QuadraticProgram.maximize`` を呼び出すことにより、目的関数を設定できます。リスト、行列、または辞書のいずれかで線形項と2次項を指定することにより、定数項と線形および2次の目的関数を追加できます。"

#: ../../tutorials/01_quadratic_program.ipynb:525
msgid "Note that in the LP format the quadratic part has to be scaled by a factor :math:`1/2`. Thus, when printing as LP format, the quadratic part is first multiplied by 2 and then divided by 2 again."
msgstr "LP形式では、二次部分を :math:`1/2` 倍にスケーリングする必要があることに注意してください。したがって、LP形式で印刷する場合、二次部分は最初に2で乗算され、次に2で除算されます。"

#: ../../tutorials/01_quadratic_program.ipynb:527
msgid "For quadratic programs, there are 3 pieces that have to be specified: a constant (offset), a linear term (:math:`c^{T}x`), and a quadratic term (:math:`x^{T}Qx`)."
msgstr "二次計画法の場合、指定する必要があるのは、定数（オフセット）、線形項（ :math:`c^{T}x` ）、および二次項（ :math:`x^{T}Qx` ）の3つです。"

#: ../../tutorials/01_quadratic_program.ipynb:529
msgid "The cell below shows how to declare an objective function using a dictionary. For the linear term, keys in the dictionary correspond to variable names, and the corresponding values are the coefficients. For the quadratic term, keys in the dictionary correspond to the two variables being multiplied, and the values are again the coefficients."
msgstr "以下のセルは、辞書を使用して目的関数を宣言する方法を示しています。線形項の場合、辞書のキーは変数名に対応し、対応する値は係数です。二次項の場合、辞書のキーは乗算される2つの変数に対応し、値は再び係数になります。"

#: ../../tutorials/01_quadratic_program.ipynb:624
msgid "Another way to specify the quadratic program is using arrays. For the linear term, the array corresponds to the vector :math:`c` in the mathematical formulation. For the quadratic term, the array corresponds to the matrix :math:`Q`. Note that the ordering of the variables (:math:`x` in the mathematical formulation) is the order in which the variables were originally declared in the ``QuadraticProgram`` object."
msgstr "二次計画法を指定する別の方法は、配列を使用することです。一次項の場合、配列は数学的定式化のベクトル :math:`c` に対応します。 二次項の場合、配列は行列 :math:`Q` に対応します。変数の順序（数学的な定式化では :math:`x` ）は、変数が ``QuadraticProgram`` オブジェクトで最初に宣言された順序であることに注意してください。"

#: ../../tutorials/01_quadratic_program.ipynb:719
msgid "You can access the constant, the linear term, and the quadratic term by looking at ``Quadratic.objective.{constant, linear, quadratic}``, respectively. As for linear and quadratic terms, you can get a dense matrix (``to_array``), a sparse matrix (``coefficients``), and a dictionary (``to_dict``). For dictionaries, you can specify whether to use variable indices or names as keys. Note that the quadratic terms are stored in a compressed way, e.g., ``{('x', 'y'): 1, ('y', 'x'): 2}`` is stored as ``{('x', 'y'): 3}``. You can get the quadratic term as a symmetric matrix by calling ``to_array(symmetric=True)`` or ``to_dict(symmetric=True)``. If you call ``to_dict(name=True)``, you can get a dictionary whose keys are pairs of variable names."
msgstr "``Quadratic.objective.{constant, linear, quadratic}`` をそれぞれ調べることで、定数、線形項、および二次項にアクセスできます。線形および二次項については、密行列（ ``to_array`` ）、疎行列（ ``coefficients`` ）、および辞書（ ``to_dict`` ）を取得できます。辞書の場合、変数インデックスまたは名前をキーとして使用するかどうかを指定できます。二次項は圧縮された方法で格納されることに注意してください。たとえば、 ``{('x', 'y'): 1, ('y', 'x'): 2}`` は ``{('x', 'y'): 3}`` として格納されます。 ``to_array(symmetric=True)`` または ``to_dict(symmetric=True)`` を呼び出すことにより、二次項を対称行列として取得できます。 ``to_dict(name=True)`` を呼び出すと、キーが変数名のペアである辞書を取得できます。"

#: ../../tutorials/01_quadratic_program.ipynb:841
msgid "Adding/removing linear and quadratic constraints"
msgstr "線形および二次制約の追加/削除"

#: ../../tutorials/01_quadratic_program.ipynb:852
msgid "You can add linear constraints by setting name, linear expression, sense and right-hand-side value (rhs). You can use senses ‘EQ’, ‘LE’, and ‘GE’ as Docplex supports."
msgstr "名前(name)、線形式(linear)、検出(sense)、および右側の値 (rhs) を設定することで、線形制約を追加できます。Docplexのサポートとして、 ‘EQ’, ‘LE’, ‘GE’ の検出が使用できます。"

#: ../../tutorials/01_quadratic_program.ipynb:958
msgid "You can add quadratic constraints as well as objective function and linear constraints."
msgstr "二次制約だけでなく、目的関数や線形制約も追加できます。"

#: ../../tutorials/01_quadratic_program.ipynb:1097
msgid "You can access linear and quadratic terms of linear and quadratic constraints as in the same way as the objective function."
msgstr "目的関数と同じ方法で、線形および二次制約の線形および二次項にアクセスできます。"

#: ../../tutorials/01_quadratic_program.ipynb:1154
msgid "You can also remove linear/quadratic constraints by ``remove_linear_constraint`` and ``remove_quadratic_constraint``."
msgstr "また、 ``remove_linear_constraint`` と ``remove_quadratic_constraint`` によって線形/二次制約を削除することもできます。"

#: ../../tutorials/01_quadratic_program.ipynb:1268
msgid "You can substitute some of variables with constants or other variables. More precisely, ``QuadraticProgram`` has a method ``substitute_variables(constants=..., variables=...)`` to deal with the following two cases."
msgstr "一部の変数を定数または他の変数に置き換えることができます。より正確には、 ``QuadraticProgram`` には、次の2つのケースを処理するためのメソッド ``substitute_variables(constants=..., variables=...)`` があります。"

#: ../../tutorials/01_quadratic_program.ipynb:1270
msgid ":math:`x \\leftarrow c`: when ``constants`` have a dictionary ``{x: c}``."
msgstr ":math:`x \\leftarrow c` :  ``constants`` が辞書 ``{x: c}`` の場合。"

#: ../../tutorials/01_quadratic_program.ipynb:1271
msgid ":math:`x \\leftarrow c y`: when ``variables`` have a dictionary ``{x: (y, c)}``."
msgstr ":math:`x \\leftarrow c y` :  ``variables`` が辞書 ``{x: (y, c)}`` の場合。"

#: ../../tutorials/01_quadratic_program.ipynb:1283
msgid "Substituting Variables"
msgstr "変数を置き換えます"

#: ../../tutorials/01_quadratic_program.ipynb:1377
msgid "If the resulting problem is infeasible due to lower bounds or upper bounds, the methods returns the status ``Status.INFEASIBLE``. We try to replace variable ``x`` with -1, but -1 is out of range of ``x`` (0 <= ``x`` <= 1). So, it returns ``Status.INFEASIBLE``."
msgstr "結果として生じる問題が下限または上限のために実行不可能である場合、メソッドはステータス ``Status.INFEASIBLE`` を返します。変数 ``x`` を -1 に置き換えようとしましたが、-1 は ``x`` (0 <= ``x`` <= 1)の範囲外です。したがって、 ``Status.INFEASIBLE`` を返します。"

#: ../../tutorials/01_quadratic_program.ipynb:1449
msgid "You cannot substitute variables multiple times. The method raises an error in such a case."
msgstr "変数を複数回置換することはできません。メソッドはそのような場合にエラーを発生させます。"

#: ../../tutorials/01_quadratic_program.ipynb:1499
msgid "Note: When you display your problem as LP format using ``export_as_lp_string``, ``Binaries`` denotes binary variables and ``Generals`` denotes integer variables. If variables are not included in either ``Binaries`` or ``Generals``, such variables are continuous ones with default lower bound = 0 and upper bound = infinity. Note that you cannot use ‘e’ or ‘E’ as the first character of names due to the `specification of LP format <https://www.ibm.com/docs/en/icos/22.1.0?topic=representation-variable-names-in-lp-file-format>`__."
msgstr "``export_as_lp_string`` を使って問題をLP形式で表示する場合、``Binaries`` はバイナリー変数を、``Generals`` は整数変数を表します。 変数が ``Binaries`` または ``Generals`` に含まれていない場合、 このような変数は、デフォルトの lower bound = 0、upper bound = infinity を持つ連続変数です。 `LPフォーマットの規定 <https://www.ibm.com/docs/en/icos/22.1.0?topic=representation-variable-names-in-lp-file-format>`__ により、名前の最初の文字として ‘e’ または ‘E’ を使用することはできませんのでご注意ください。"

