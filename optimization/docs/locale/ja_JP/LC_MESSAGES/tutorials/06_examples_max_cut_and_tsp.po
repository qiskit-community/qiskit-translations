msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-22 16:46+0000\n"
"PO-Revision-Date: 2021-09-23 06:22\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/06_examples_max_cut_and_tsp.po\n"
"X-Crowdin-File-ID: 9652\n"
"Language: ja_JP\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:9
msgid "This page was generated from `docs/tutorials/06_examples_max_cut_and_tsp.ipynb`__."
msgstr "このページは `docs/tutorials/06_examples_max_cut_and_tsp.ipynb`__ から生成されました。"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:9
msgid "Max-Cut and Traveling Salesman Problem"
msgstr "最大カット問題とセールスマン巡回問題"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:21
msgid "Introduction"
msgstr "はじめに"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:23
msgid "Many problems in quantitative fields such as finance and engineering are optimization problems. Optimization problems lie at the core of complex decision-making and definition of strategies."
msgstr "金融や工学などの定量的な分野における多くの問題は最適化問題です。最適化問題は、複雑な意思決定と戦略定義の中心にあります。"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:25
msgid "Optimization (or combinatorial optimization) means searching for an optimal solution in a finite or countably infinite set of potential solutions. Optimality is defined with respect to some criterion function, which is to be minimized or maximized. This is typically called cost function or objective function."
msgstr "最適化(または組合せ最適化) とは、有限あるいは加算無限の潜在的解決策集合から、最適な解決策を探索することを意味します。最適性は、最小化または最大化するいくつかの基準関数に対して定義されます。これは通常、コスト関数あるいは目的関数と呼ばれています。"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:27
msgid "**Typical optimization problems**"
msgstr "**典型的な最適化問題**"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:29
msgid "Minimization: cost, distance, length of a traversal, weight, processing time, material, energy consumption, number of objects"
msgstr "最小化: コスト、距離、トラバーサルの長さ、重量、処理時間、資材、エネルギー消費量、オブジェクト数"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:31
msgid "Maximization: profit, value, output, return, yield, utility, efficiency, capacity, number of objects"
msgstr "最大化: 利益、価値、生産高、リターン、利回り、有用性、効率、容量、オブジェクトの数"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:33
msgid "We consider here max-cut problems of practical interest in many fields, and show how they can be mapped on quantum computers manually and how Qiskit’s optimization module supports this."
msgstr "ここでは、多くの分野で実用的関心のある最大カット問題を考えます。それらをどのようにすれば量子コンピューターに手動でマッピングできるか、あるいはQiskitの最適化モジュールがこれをどのようにサポートしているかを示します。"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:36
msgid "Weighted Max-Cut"
msgstr "重み付き最大カット"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:38
msgid "Max-Cut is an NP-complete problem, with applications in clustering, network science, and statistical physics. To grasp how practical applications are mapped into given Max-Cut instances, consider a system of many people that can interact and influence each other. Individuals can be represented by vertices of a graph, and their interactions seen as pairwise connections between vertices of the graph, or edges. With this representation in mind, it is easy to model typical marketing problems. For example, suppose that it is assumed that individuals will influence each other’s buying decisions, and knowledge is given about how strong they will influence each other. The influence can be modeled by weights assigned on each edge of the graph. It is possible then to predict the outcome of a marketing strategy in which products are offered for free to some individuals, and then ask which is the optimal subset of individuals that should get the free products, in order to maximize revenues."
msgstr "最大カット問題はNP完全問題であり、クラスタリング、ネットワークサイエンス、統計物理学に応用されています。実用的なアプリケーションが特定の最大カット・インスタンスにどのようにマッピングされるかを把握するために、多くの人々が相互に作用し影響を及ぼしあうことのできるシステムを考えてみてください。個人はグラフの頂点によって表され、それらの相互作用はグラフの頂点またはエッジ間のペアワイズ接続として見られます。この表現を念頭に置くと、典型的なマーケティングの問題を簡単にモデル化できます。たとえば、個人がお互いの購買決定に影響を与えると想定し、それらがお互いにどれほど強い影響を与えるかについての知識が与えられているとします。影響は、グラフの各エッジに割り当てられた重みによってモデル化できます。次に、製品を一部の個人に無料で提供するマーケティング戦略の結果を予測し、収益を最大化するために、無料の製品を入手する必要がある個人の最適なサブセットを問うことができます。"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:41
msgid "The formal definition of this problem is the following:"
msgstr "この問題の正式な定義は以下のとおりです。:"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:43
msgid "Consider an :math:`n`-node undirected graph *G = (V, E)* where *\\|V\\| = n* with edge weights :math:`w_{ij}>0`, :math:`w_{ij}=w_{ji}`, for :math:`(i, j)\\in E`. A cut is defined as a partition of the original set V into two subsets. The cost function to be optimized is in this case the sum of weights of edges connecting points in the two different subsets, *crossing* the cut. By assigning :math:`x_i=0` or :math:`x_i=1` to each node :math:`i`, one tries to maximize the global profit function (here and in the following summations run over indices 0,1,…n-1)"
msgstr ":math:`n` ノードの無向グラフ *G = (V, E)* を考えます。ここで、 *\\|V\\| = n* 、 :math:`(i, j)\\in E` におけるエッジの重みは :math:`w_{ij}>0` 、 :math:`w_{ij}=w_{ji}` です。カットは、元のセットVを２つのサブセットにするパーティションとして定義されます。この場合、最適化されるコスト関数は、2つの異なるサブセットの点を接続しており、カットと *交差* しているエッジの重みの合計です。 :math:`x_i=0` または :math:`x_i=1` を各ノード :math:`i` に割り当てることで、全体の利益関数を最大化しようとします (ここと次の合計では、インデックス 0,1,…n-1 に対して実行されます) 。"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:46
msgid "\\tilde{C}(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j).\n\n"
msgstr "\\tilde{C}(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j).\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:48
msgid "In our simple marketing model, :math:`w_{ij}` represents the probability that the person :math:`j` will buy a product after :math:`i` gets a free one. Note that the weights :math:`w_{ij}` can in principle be greater than :math:`1` (or even negative), corresponding to the case where the individual :math:`j` will buy more than one product. Maximizing the total buying probability corresponds to maximizing the total future revenues. In the case where the profit probability will be greater than the cost of the initial free samples, the strategy is a convenient one. An extension to this model has the nodes themselves carry weights, which can be regarded, in our marketing model, as the likelihood that a person granted with a free sample of the product will buy it again in the future. With this additional information in our model, the objective function to maximize becomes"
msgstr "単純なマーケティングモデルでは、 :math:`w_{ij}` は人 :math:`i` が無料品を手に入れた後に、 :math:`j` が製品を購入する確率を表します。重み :math:`w_{ij}` は原則として :math:`1` よりも大きくなる（または負の値になる）ことがあり、これは個々の :math:`j` が複数の製品を購入する場合に対応しています。総購入確率を最大化することは、将来の総利益を最大化することに対応します。利益率が最初の無料サンプルのコストよりも大きくなる場合、この戦略は好都合なものとなります。このモデル拡張ではノード自体に重みが付けられます。これは、私たちのマーケティングモデルでは、製品の無料サンプルを提供された人が将来再び購入する可能性と見なすことができます。モデルのこの追加情報により、最大化する目的関数は次のようになります。"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:51
msgid "C(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j)+\\sum_i w_i x_i.\n\n"
msgstr "C(\\textbf{x}) = \\sum_{i,j} w_{ij} x_i (1-x_j)+\\sum_i w_i x_i.\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:53
msgid "In order to find a solution to this problem on a quantum computer, one needs first to map it to an Ising Hamiltonian. This can be done with the assignment :math:`x_i\\rightarrow (1-Z_i)/2`, where :math:`Z_i` is the Pauli Z operator that has eigenvalues :math:`\\pm 1`. Doing this we find that"
msgstr "量子コンピューターにおいてこの問題の解決策を見つけるには、まずそれをイジング・ハミルトニアンにマッピングする必要があります。これは、 :math:`x_i\\rightarrow (1-Z_i)/2` の代入により実行できます。ここで、 :math:`Z_i` は、固有値 :math:`\\pm 1` を持つパウリZ演算子です。 これを行うと、"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:55
msgid "C(\\textbf{Z}) = \\sum_{i,j} \\frac{w_{ij}}{4} (1-Z_i)(1+Z_j) + \\sum_i \\frac{w_i}{2} (1-Z_i) = -\\frac{1}{2}\\left( \\sum_{i<j} w_{ij} Z_i Z_j +\\sum_i w_i Z_i\\right)+\\mathrm{const},\n\n"
msgstr "C(\\textbf{Z}) = \\sum_{i,j} \\frac{w_{ij}}{4} (1-Z_i)(1+Z_j) + \\sum_i \\frac{w_i}{2} (1-Z_i) = -\\frac{1}{2}\\left( \\sum_{i<j} w_{ij} Z_i Z_j +\\sum_i w_i Z_i\\right)+\\mathrm{const},\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:57
msgid "where :math:`\\mathrm{const} = \\sum_{i<j}w_{ij}/2+\\sum_i w_i/2`. In other terms, the weighted Max-Cut problem is equivalent to minimizing the Ising Hamiltonian"
msgstr "ここで、 :math:`\\mathrm{const} = \\sum_{i<j}w_{ij}/2+\\sum_i w_i/2` です。言い換えると、重み付き最大カット問題は、イジング・ハミルトニアンの最小化と等価です。"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:59
msgid "H = \\sum_i w_i Z_i + \\sum_{i<j} w_{ij} Z_iZ_j.\n\n"
msgstr "H = \\sum_i w_i Z_i + \\sum_{i<j} w_{ij} Z_iZ_j.\n\n"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:61
msgid "Qiskit’s optimization module can generate the Ising Hamiltonian for the first profit function :math:`\\tilde{C}`. To this extent, function :math:`\\tilde{C}` can be modeled as a ``QuadraticProgram``, which provides the ``to_ising()`` method."
msgstr "Qiskitの最適化モジュールは、最初の利益関数 :math:`\\tilde{C}` のイジング・ハミルトニアンを生成できます。 この点で、関数 :math:`\\tilde{C}` は、 ``to_ising()`` メソッドを提供する ``QuadraticProgram`` としてモデル化できます。"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:64
msgid "Approximate Universal Quantum Computing for Optimization Problems"
msgstr "最適化問題のための近似ユニバーサル量子コンピューティング"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:66
msgid "There has been a considerable amount of interest in recent times about the use of quantum computers to find a solution to combinatorial optimization problems. It is important to say that, given the classical nature of combinatorial problems, exponential speedup in using quantum computers compared to the best classical algorithms is not guaranteed. However, due to the nature and importance of the target problems, it is worth investigating heuristic approaches on a quantum computer that could indeed speed up some problem instances. Here we demonstrate an approach that is based on the *Quantum Approximate Optimization Algorithm* (QAOA) by Farhi, Goldstone, and Gutmann (2014). We frame the algorithm in the context of *approximate quantum computing*, given its heuristic nature."
msgstr "量子コンピュータの使用については、組合せ最適化問題の解決策を見つけるため、近年かなりの関心が向けられています。組合せ問題の古典的な性質を考えると、最良の古典的アルゴリズムとの比較において、量子コンピュータを使用する指数関数的な加速は保証されないということが重要と言えます。しかしながら、対象とする問題の性質と重要性によっては、問題のインスタンスを高速化し得る量子コンピュータでのヒューリスティックなアプローチを調査することは価値をみいだせます。ここでは、Farhi、 Goldstone、および Gutmann (2014) による *Quantum Approximate Optimization Algorithm* (QAOA) に基づくアプローチを示します。ヒューリスティックな性質を前提として、アルゴリズムを *近似量子コンピューティング* のコンテキストで構成します。"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:69
msgid "The algorithm works as follows:"
msgstr "アルゴリズムは次のように機能します。"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:71
msgid "Choose the :math:`w_i` and :math:`w_{ij}` in the target Ising problem. In principle, even higher powers of Z are allowed."
msgstr "ターゲット・イジング問題でで :math:`w_i` と :math:`w_{ij}` を選択します。 原則として、Zのさらに高い累乗が許可されます。"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:73
msgid "Choose the depth of the quantum circuit :math:`m`. Note that the depth can be modified adaptively."
msgstr "量子回路の深さ :math:`m` を選択します。 深さは適応的に変更できることに注意してください。"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:75
msgid "Choose a set of controls :math:`\\theta` and make a trial function :math:`|\\psi(\\boldsymbol\\theta)\\rangle`, built using a quantum circuit made of C-Phase gates and single-qubit Y rotations, parameterized by the components of :math:`\\boldsymbol\\theta`."
msgstr "コントロール :math:`\\theta` のセットを選択し、 :math:`\\theta` の成分によってパラメータ化された制御位相ゲートと単一量子ビットY回転で構成される量子回路を使用して構築された試行関数 :math:`|\\psi(\\boldsymbol\\theta)\\rangle` を作成します。"

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:77
msgid "Evaluate"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:79
msgid "C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)~|H|~\\psi(\\boldsymbol\\theta)\\rangle = \\sum_i w_i \\langle\\psi(\\boldsymbol\\theta)~|Z_i|~\\psi(\\boldsymbol\\theta)\\rangle+ \\sum_{i<j} w_{ij} \\langle\\psi(\\boldsymbol\\theta)~|Z_iZ_j|~\\psi(\\boldsymbol\\theta)\\rangle\n\n"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:81
msgid "by sampling the outcome of the circuit in the Z-basis and adding the expectation values of the individual Ising terms together. In general, different control points around :math:`\\boldsymbol\\theta` have to be estimated, depending on the classical optimizer chosen."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:83
msgid "Use a classical optimizer to choose a new set of controls."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:85
msgid "Continue until :math:`C(\\boldsymbol\\theta)` reaches a minimum, close enough to the solution :math:`\\boldsymbol\\theta^*`."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:87
msgid "Use the last :math:`\\boldsymbol\\theta` to generate a final set of samples from the distribution :math:`|\\langle z_i~|\\psi(\\boldsymbol\\theta)\\rangle|^2\\;\\forall i` to obtain the answer."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:89
msgid "It is our belief the difficulty of finding good heuristic algorithms will come down to the choice of an appropriate trial wavefunction. For example, one could consider a trial function whose entanglement best aligns with the target problem, or simply make the amount of entanglement a variable. In this tutorial, we will consider a simple trial function of the form"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:91
msgid "|\\psi(\\theta)\\rangle  = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m |+\\rangle\n\n"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:93
msgid "where :math:`U_\\mathrm{entangler}` is a collection of C-Phase gates (fully entangling gates), and :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^n Y(\\theta_{i})`, where :math:`n` is the number of qubits and :math:`m` is the depth of the quantum circuit. The motivation for this choice is that for these classical problems this choice allows us to search over the space of quantum states that have only real coefficients, still exploiting the entanglement to potentially converge faster to the solution."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:96
msgid "One advantage of using this sampling method compared to adiabatic approaches is that the target Ising Hamiltonian does not have to be implemented directly on hardware, allowing this algorithm not to be limited to the connectivity of the device. Furthermore, higher-order terms in the cost function, such as :math:`Z_iZ_jZ_k`, can also be sampled efficiently, whereas in adiabatic or annealing approaches they are generally impractical to deal with."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:98
msgid "References: - A. Lucas, Frontiers in Physics 2, 5 (2014) - E. Farhi, J. Goldstone, S. Gutmann e-print arXiv 1411.4028 (2014) - D. Wecker, M. B. Hastings, M. Troyer Phys. Rev. A 94, 022309 (2016) - E. Farhi, J. Goldstone, S. Gutmann, H. Neven e-print arXiv 1703.06199 (2017)"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:110
msgid "Application classes"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:112
msgid "We use the application classes for the max-cut problem and the traveling salesman problem in this page. There are application classes for other optimization problems available as well. See `Application Classes for Optimization Problems <09_application_classes.ipynb>`__ for details."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:148
msgid "Max-Cut problem"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:247
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:877
msgid "Brute force approach"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:249
msgid "Try all possible :math:`2^n` combinations. For :math:`n = 4`, as in this example, one deals with only 16 combinations, but for n = 1000, one has 1.071509e+30 combinations, which is impractical to deal with by using a brute force approach."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:356
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:972
msgid "Mapping to the Ising problem"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:367
msgid "Qiskit provides functionality to generate ``QuadraticProgram`` from the problem specification as well as create the corresponding Ising Hamiltonian."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:525
msgid "Since the problem was cast to a minimization problem, the solution of :math:`-4` corresponds to the optimum."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:537
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1240
msgid "Checking that the full Hamiltonian gives the right cost"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:613
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1318
msgid "Running it on quantum computer"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:615
#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:1320
msgid "We run the optimization routine using a feedback loop with a quantum computer that uses trial functions built with Y single-qubit rotations, :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^n Y(\\theta_{i})`, and entangler steps :math:`U_\\mathrm{entangler}`."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:772
msgid "Traveling Salesman Problem"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:774
msgid "In addition to being a notorious NP-complete problem that has drawn the attention of computer scientists and mathematicians for over two centuries, the Traveling Salesman Problem (TSP) has important bearings on finance and marketing, as its name suggests. Colloquially speaking, the traveling salesman is a person that goes from city to city to sell merchandise. The objective in this case is to find the shortest path that would enable the salesman to visit all the cities and return to its hometown, i.e. the city where he started traveling. By doing this, the salesman gets to maximize potential sales in the least amount of time."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:777
msgid "The problem derives its importance from its “hardness” and ubiquitous equivalence to other relevant combinatorial optimization problems that arise in practice."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:779
msgid "The mathematical formulation with some early analysis was proposed by W.R. Hamilton in the early 19th century. Mathematically the problem is, as in the case of Max-Cut, best abstracted in terms of graphs. The TSP on the nodes of a graph asks for the shortest *Hamiltonian cycle* that can be taken through each of the nodes. A Hamilton cycle is a closed path that uses every vertex of a graph once. The general solution is unknown and an algorithm that finds it efficiently (e.g., in polynomial time) is not expected to exist."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:782
msgid "Find the shortest Hamiltonian cycle in a graph :math:`G=(V,E)` with :math:`n=|V|` nodes and distances, :math:`w_{ij}` (distance from vertex :math:`i` to vertex :math:`j`). A Hamiltonian cycle is described by :math:`N^2` variables :math:`x_{i,p}`, where :math:`i` represents the node and :math:`p` represents its order in a prospective cycle. The decision variable takes the value 1 if the solution occurs at node :math:`i` at time order :math:`p`. We require that every node can only appear once in the cycle, and for each time a node has to occur. This amounts to the two constraints (here and in the following, whenever not specified, the summands run over 0,1,…N-1)"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:785
msgid "\\sum_{i} x_{i,p} = 1 ~~\\forall p\n\n"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:787
msgid "\\sum_{p} x_{i,p} = 1 ~~\\forall i.\n\n"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:789
msgid "For nodes in our prospective ordering, if :math:`x_{i,p}` and :math:`x_{j,p+1}` are both 1, then there should be an energy penalty if :math:`(i,j) \\notin E` (not connected in the graph). The form of this penalty is"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:791
msgid "\\sum_{i,j\\notin E}\\sum_{p} x_{i,p}x_{j,p+1}>0,\n\n"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:793
msgid "where it is assumed the boundary condition of the Hamiltonian cycles :math:`(p=N)\\equiv (p=0)`. However, here it will be assumed a fully connected graph and not include this term. The distance that needs to be minimized is"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:795
msgid "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}.\n\n"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:797
msgid "Putting this all together in a single objective function to be minimized, we get the following:"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:799
msgid "C(\\textbf{x})=\\sum_{i,j}w_{ij}\\sum_{p} x_{i,p}x_{j,p+1}+ A\\sum_p\\left(1- \\sum_i x_{i,p}\\right)^2+A\\sum_i\\left(1- \\sum_p x_{i,p}\\right)^2,\n\n"
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:801
msgid "where :math:`A` is a free parameter. One needs to ensure that :math:`A` is large enough so that these constraints are respected. One way to do this is to choose :math:`A` such that :math:`A > \\mathrm{max}(w_{ij})`."
msgstr ""

#: ../../tutorials/06_examples_max_cut_and_tsp.ipynb:803
msgid "Once again, it is easy to map the problem in this form to a quantum computer, and the solution will be found by minimizing a Ising Hamiltonian."
msgstr ""

