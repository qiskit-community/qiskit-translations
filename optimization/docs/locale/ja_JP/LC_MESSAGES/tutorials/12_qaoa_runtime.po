msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-27 17:54+0000\n"
"PO-Revision-Date: 2023-01-27 18:53\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/12_qaoa_runtime.po\n"
"X-Crowdin-File-ID: 9727\n"
"Language: ja_JP\n"

#: ../../tutorials/12_qaoa_runtime.ipynb:9
msgid "This page was generated from `docs/tutorials/12_qaoa_runtime.ipynb`__."
msgstr "このページは `docs/tutorials/12_qaoa_runtime.ipynb`__ から生成されました。"

#: ../../tutorials/12_qaoa_runtime.ipynb:9
msgid "QAOA Runtime"
msgstr "QAOA ランタイム"

#: ../../tutorials/12_qaoa_runtime.ipynb:11
msgid "The Qiskit runtime is an execution model that permits us to run an entire program on the backend side. Here, we discuss how to run the QAOA algorithm in the Qiskit runtime. We will discuss several of the features that this first version of the QAOA Runtime makes available."
msgstr "Qiskitランタイムは、プログラム全体をバックエンド側で実行できるようにする実行モデルです。ここでは、QiskitランタイムでQAOAアルゴリズムを実行する方法について説明します。この最初のバージョンのQAOAランタイムが利用できるようにする機能のいくつかについて説明します。"

#: ../../tutorials/12_qaoa_runtime.ipynb:37
msgid "Preliminaries"
msgstr "事前ステップ"

#: ../../tutorials/12_qaoa_runtime.ipynb:39
msgid "First, we load the program and inspect its arguments to know what inputs it is expecting. We also investigate the return types to understand what will be returned to us. We obtain the QAOA program from the provider as follows."
msgstr "まず、プログラムをロードし、その引数を調べて、どの入力が期待されているかを確認します。また、戻り値型を調査して、何が返されるかを理解します。QAOAプログラムは、プロバイダーから次のように入手します。"

#: ../../tutorials/12_qaoa_runtime.ipynb:61
msgid "The arguments to the runtime are obtained as follows."
msgstr "ランタイムへの引数は次のように取得されます。"

#: ../../tutorials/12_qaoa_runtime.ipynb:152
msgid "Here, we see the different input arguments which we now elaborate on."
msgstr "ここでは、以下で詳しく説明するさまざまな入力引数を確認します。"

#: ../../tutorials/12_qaoa_runtime.ipynb:154
msgid "**operator** is by far the most important argument since it represent the cost operator that we want to minimize. For QAOA this corresponds to a ``PauliSumOp``. Each time there is a quadratic term between two decision variables in the problem we wish to minimize there will be a corresponding ``ZZ`` term in the ``PauliSumOp``. For example, the operator ``PauliSumOp.from_list([(\"ZIZ\", 1), (\"IZZ\", -1), (\"ZZI\", 1)])`` may correspond to a Maxcut problem on a triangle where one edge has a negative weight."
msgstr "**operator** は、最小化したいコスト演算子を表すため、これまでで最も重要な引数です。QAOAの場合、これは ``PauliSumOp`` に対応します。問題の2つの決定変数の間に二次項があるたびに、最小化したい ``PauliSumOp`` に対応する ``ZZ`` 項があります。たとえば、演算子 ``PauliSumOp.from_list([(\"ZIZ\", 1), (\"IZZ\", -1), (\"ZZI\", 1)])`` は、ひとつのエッジの重みが負である三角形の最大カット問題に対応する場合があります。"

#: ../../tutorials/12_qaoa_runtime.ipynb:156
msgid "**optimizer** represents the optimizer used in the closed-loop classical optimization. This will default to SPSA to deal with the noise of the hardware."
msgstr "**optimizer** は、閉ループの古典的な最適化で使用されるオプティマイザーを表します。これは、ハードウェアのノイズを処理するためにデフォルトで SPSA になります。"

#: ../../tutorials/12_qaoa_runtime.ipynb:157
msgid "**reps** this integer is the number of QAOA layers."
msgstr "**reps** この整数は、QAOAレイヤーの数です。"

#: ../../tutorials/12_qaoa_runtime.ipynb:158
msgid "**initial_point** is the initial values for :math:`\\gamma` and :math:`\\beta`. This is a list given in the following order :math:`[\\gamma_1, \\beta_1, \\gamma_2, \\beta_2, ...]`. The length of this list should therefore be twice the QAOA depth (i.e. the ``reps`` parameter)."
msgstr "**initial_point** は、 :math:`\\gamma` と :math:`\\beta` の初期値です。これは、 :math:`[\\gamma_1, \\beta_1, \\gamma_2, \\beta_2, ...]` の順序で指定されたリストです。したがって、このリストの長さは、QAOAの深さの2倍にする必要があります（つまり、 ``reps`` パラメーター）。"

#: ../../tutorials/12_qaoa_runtime.ipynb:159
msgid "**shots** is the number of shots to gather for each circuit."
msgstr "**shots** は、各回路で収集するショット数です。"

#: ../../tutorials/12_qaoa_runtime.ipynb:160
msgid "**alpha** is the :math:`\\alpha` of the CVaR optimization [1]. If :math:`\\alpha` is smaller than one then only the best :math:`\\alpha` fraction of shots will be retained in the optimization, i.e. this corresponds to using ``CVaRExpectation(alpha, PauliExpectation())`` which can be found in ``qiskit.opflow``."
msgstr "**alpha** はCVaR最適化の :math:`\\alpha` です [1] 。 :math:`\\alpha` が1より小さい場合、最適化ではショットの最良の :math:`\\alpha` 部分のみが保持されます。つまり、これは ``qiskit.opflow`` にある ``CVaRExpectation(alpha, PauliExpectation())`` の使用に対応します。"

#: ../../tutorials/12_qaoa_runtime.ipynb:161
msgid "**measurement_error_mitigation** determines or not to use readout error mitigation. If ``True``, the algorithm used this will employ the ``TensoredMeasFitter``."
msgstr "**measurement_error_mitigation** は、読み出しエラー軽減を使用するかどうかを決定します。 ``True`` の場合、これを使用するアルゴリズムは ``TensoredMeasFitter`` を使用します。"

#: ../../tutorials/12_qaoa_runtime.ipynb:162
msgid "If **use_swap_strategies** is ``True`` the QAOA program will transpile the QAOA circuit with dedicated swap strategies that take into account the commutative nature of the ``ZZ`` operators in QAOA and the coupling map of the backend on which the program will run. If this option is False then the QAOA program will default to the standard transpiler with optimization level 1. This optimization level can be chosen using the **optimization_level** input option."
msgstr "**use_swap_strategies** が ``True`` の場合、QAOAプログラムは、QAOAの ``ZZ`` 演算子の可換性と、プログラムが実行されるバックエンドの結合マップを考慮した専用のスワップ戦略を使用して、QAOA回路をトランスパイルします。 このオプションがFalseの場合、QAOAプログラムはデフォルトで最適化レベル1の標準トランスパイラーになります。この最適化レベルは、 **optimization_level** 入力オプションを使用して選択できます。"

#: ../../tutorials/12_qaoa_runtime.ipynb:163
msgid "If **use_pulse_efficient** is set to ``True`` then a pulse efficient transpilation will be run at each QAOA iteration [2]. This collects two-qubit blocks and applies Cartan’s KAK decomposition to obtain a ``RZXGate`` representation of the circuit. Scaled cross-resonance pulses are then used. Further details are given in Appendix A below."
msgstr "**use_pulse_efficient** が ``True`` に設定されている場合、パルス効率の高いトランスパイルが各QAOA反復で実行されます [2] 。これにより、2量子ビットのブロックが収集され、CartanのKAK分解が適用されて、回路の ``RZXGate`` 表現が取得されます。次に、スケーリングされた相互共振パルスが使用されます。 詳細については、以下の付録Aを参照してください。"

#: ../../tutorials/12_qaoa_runtime.ipynb:164
msgid "If **use_initial_mapping** is ``True`` then a heuristic algorithm will be run to permute the Pauli operators in the cost operator to better fit the coupling map of the device. This permutation is only applied if the ``use_swap_strategies`` option is set to ``True`` and only makes sense for non-fully-connected problems."
msgstr "**use_initial_mapping** が ``True`` の場合、ヒューリスティックアルゴリズムが実行され、コスト演算子のパウリ演算子がデバイスの結合マップによりよく適合するように並べ替えられます。この順列は、 ``use_swap_strategies`` オプションが ``True`` に設定されている場合にのみ適用され、完全に接続されていない問題に対してのみ意味があります。"

#: ../../tutorials/12_qaoa_runtime.ipynb:165
msgid "**optimization_level** This is the optimization level of the Qiskit transpiler if swap strategies are not used. The default value is 1."
msgstr "**optimization_level** これは、スワップ戦略が使用されていない場合のQiskitトランスパイラーの最適化レベルです。 デフォルト値は1です。"

#: ../../tutorials/12_qaoa_runtime.ipynb:168
msgid "References"
msgstr "参考文献"

#: ../../tutorials/12_qaoa_runtime.ipynb:170
msgid "[1] P. Kl. Barkoutsos, G. Nannicini, A. Robert, I. Tavernelli, and S. Woerner, *Improving Variational Quantum Optimization using CVaR*, Quantum **4**, 256 (2020)."
msgstr "[1] P. Kl. Barkoutsos, G. Nannicini, A. Robert, I. Tavernelli, and S. Woerner, *Improving Variational Quantum Optimization using CVaR*, Quantum **4**, 256 (2020)."

#: ../../tutorials/12_qaoa_runtime.ipynb:172
msgid "[2] N. Earnest, C. Tornow, and D. J. Egger, *Pulse-efficient circuit transpilation for quantum applications on cross-resonance-based hardware*, Phys. Rev. Research **3**, 043088 (2021)."
msgstr "[2] N. Earnest, C. Tornow, and D. J. Egger, *Pulse-efficient circuit transpilation for quantum applications on cross-resonance-based hardware*, Phys. Rev. Research **3**, 043088 (2021)."

#: ../../tutorials/12_qaoa_runtime.ipynb:184
msgid "Running the QAOA runtime program"
msgstr "QAOAランタイムプログラムの実行"

#: ../../tutorials/12_qaoa_runtime.ipynb:186
msgid "We now show how to use the QAOA runtime program with a five qubit example."
msgstr "ここで、5量子ビットの例を使用してQAOAランタイムプログラムを使用する方法を示します。"

#: ../../tutorials/12_qaoa_runtime.ipynb:188
msgid "Here, we show how to directly call the program on the cloud. However, Qiskit Optimization provides the ``QAOAClient`` which seamlessly fits in the Qiskit Optimization workflow and can be used as a direct replacement of your local ``QAOA`` algorithm. This ``QAOAClient`` is discussed below in this tutorial."
msgstr "ここでは、クラウド上でプログラムを直接呼び出す方法を示します。 ただし、Qiskit Optimization は、Qiskit Optimization ワークフローにシームレスに適合する ``QAOAClient`` を提供し、ローカル ``QAOA`` アルゴリズムの直接の代替として使用できます。 この ``QAOAClient`` については、このチュートリアルで以下で説明します。"

#: ../../tutorials/12_qaoa_runtime.ipynb:253
msgid "Now, we run the program using the provider."
msgstr "ここで、プロバイダーを使用してプログラムを実行します。"

#: ../../tutorials/12_qaoa_runtime.ipynb:350
msgid "Once the job has successfully executed we can retrieve the result from the job. The result object contains information on the optimization. For self consistency it also contains the inputs to the QAOA program that are accessible through ``result[\"inputs\"]``. The value under ``\"inputs\"`` is a dictionary with the keys described above."
msgstr "ジョブが正常に実行されると、ジョブから結果を取得できます。結果オブジェクトには、最適化に関する情報が含まれています。自己整合性のために、 ``result[\"inputs\"]`` からアクセスできるQAOAプログラムへの入力も含まれています。 ``\"inputs\"`` の下の値は、上記のキーを持つ辞書です。"

#: ../../tutorials/12_qaoa_runtime.ipynb:371
msgid "Of particular interest is the energy that was measured on the hardware at each iteration as well as the returned eigenstate. For this example we assume that the energy of the cost operator that we minimized corresponds to an instance of a MaxCut problem."
msgstr "特に興味深いのは、各反復でハードウェアで測定されたエネルギーと、返された固有状態です。この例では、最小化したコスト演算子のエネルギーが最大カット問題のインスタンスに対応すると想定しています。"

#: ../../tutorials/12_qaoa_runtime.ipynb:489
msgid "Qiskit optimization"
msgstr "Qiskit optimization"

#: ../../tutorials/12_qaoa_runtime.ipynb:491
msgid "The functionality discussed above is implemented in Qiskit-optimization where the QAOA-runtime is accessible through the ``runtime`` module. We now show how to use this module with the ``QAOAClient``."
msgstr "上記の機能は Qiskit-optimization に実装されており、 ``runtime`` モジュールを介してQAOAランタイムにアクセスできます。ここで、このモジュールを ``QAOAClient`` で使用する方法を示します。"

#: ../../tutorials/12_qaoa_runtime.ipynb:639
msgid "Appendix A: Pulse-efficient transpilation"
msgstr "付録A：パルス効率の高いトランスパイル"

#: ../../tutorials/12_qaoa_runtime.ipynb:641
msgid "The QAOA runtime program can leverage a pulse-efficient transpilation which minimizes the number of single-qubit pulses and makes use of the cross-resonance scaling methodology applicable to the echoed-cross-resonance gates of IBM Quantum Systems. For completeness we here show the pass manager that is implemented."
msgstr "QAOAランタイム・プログラムは、単一量子ビット・パルスの数を最小限に抑え、IBM Quantum Systemsのエコー・クロス・レゾナンス・ゲートに適用可能なクロス・レゾナンス・スケーリング手法を利用する、パルス効率の高いトランスパイルを活用できます。完全を期すために、ここでは実装されているパスマネージャーを示します。"

#: ../../tutorials/12_qaoa_runtime.ipynb:688
msgid "The pulse efficient pass is implemented using transpiler passes from qiskit. It requires knowledge of the pulse-enabled backend to attached scaled cross-resonance gates to the ``RZXGate``\\ s obtained from the KAK decomposition. These scaled gates are based on the schedules of the calibrated CNOT gates."
msgstr "パルス効率の高いパスは、qiskitのトランスパイラーパスを使用して実装されます。これには、KAK分解から取得した ``RZXGate`` に接続されたスケーリングされた相互共鳴ゲートへのパルス対応バックエンドの知識が必要です。 これらのスケーリングされたゲートは、キャリブレーションされたCNOTゲートのスケジュールに基づいています。"

#: ../../tutorials/12_qaoa_runtime.ipynb:729
msgid "To demonstrate the pass we construct an arbitrary circuit with blocks of two-qubit gates."
msgstr "パスを示すために、2量子ビットゲートのブロックを使用して任意の回路を構築します。"

