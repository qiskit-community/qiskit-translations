msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-30 14:36+0000\n"
"PO-Revision-Date: 2022-03-30 14:56\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/09_application_classes.po\n"
"X-Crowdin-File-ID: 9658\n"
"Language: ja_JP\n"

#: ../../tutorials/09_application_classes.ipynb:9
msgid "This page was generated from `docs/tutorials/09_application_classes.ipynb`__."
msgstr "このページは `docs/tutorials/09_application_classes.ipynb`__ から生成されました。"

#: ../../tutorials/09_application_classes.ipynb:9
msgid "Application Classes for Optimization Problems"
msgstr "最適化問題のアプリケーション・クラス"

#: ../../tutorials/09_application_classes.ipynb:21
msgid "Introduction"
msgstr "はじめに"

#: ../../tutorials/09_application_classes.ipynb:23
msgid "We introduce application classes for the following optimization problems so that users can easily try various optimization problems on quantum computers."
msgstr "ユーザーが量子コンピューターで様々な最適化問題を簡単に試みることができるように、以下の最適化問題のアプリケーションクラスを導入します。"

#: ../../tutorials/09_application_classes.ipynb:25
msgid "Exact cover problem"
msgstr "厳密被覆問題"

#: ../../tutorials/09_application_classes.ipynb:27
msgid "Given a collection of subsets of items, find a subcollection such that each item is covered exactly once."
msgstr "アイテムのサブセットのコレクションが与えられた場合、それぞれのアイテムが正確に１回カバーされるような、サブコレクションを探します。"

#: ../../tutorials/09_application_classes.ipynb:29
#: ../../tutorials/09_application_classes.ipynb:485
msgid "Knapsack problem"
msgstr "ナップサック問題"

#: ../../tutorials/09_application_classes.ipynb:31
msgid "Given a set of items, find a subset of items such that the total weight is within the capacity and the total value is maximized."
msgstr "一連のアイテムを与えられた場合、合計重量が容量内にあり、合計値が最大化されるようなアイテムのサブセットを見つけます。"

#: ../../tutorials/09_application_classes.ipynb:33
msgid "Number partition problem"
msgstr "整数分割問題"

#: ../../tutorials/09_application_classes.ipynb:35
msgid "Given a multiset of positive integers, find a partition of the multiset into two subsets such that the sums of the subsets are equal."
msgstr "正の整数のマルチセットが所与の時、合計が等しい 2 つのサブセットにする分割を探します。"

#: ../../tutorials/09_application_classes.ipynb:37
msgid "Set packing problem"
msgstr "集合パッキング問題"

#: ../../tutorials/09_application_classes.ipynb:39
msgid "Given a collection of subsets of items, find a subcollection such that all subsets of the subcollection are pairwise disjoint and the number of items in the subcollection is maximized."
msgstr "アイテムのサブセットのコレクションが所与の時、全てのサブセットが互いに素で、アイテム数が最大になるサブコレクションを探します。"

#: ../../tutorials/09_application_classes.ipynb:41
msgid "Graph problems"
msgstr "グラフ問題"

#: ../../tutorials/09_application_classes.ipynb:43
msgid "Clique problem"
msgstr "クリーク問題"

#: ../../tutorials/09_application_classes.ipynb:45
msgid "Given an undirected graph, find a subset of nodes with a specified number or the maximum number such that the induced subgraph is complete."
msgstr "無向グラフが与えられた場合、誘導部分グラフが完全になるような、特定の数または最大数のノードの部分集合を探します。"

#: ../../tutorials/09_application_classes.ipynb:47
msgid "Graph partition problem"
msgstr "グラフ分割問題"

#: ../../tutorials/09_application_classes.ipynb:49
msgid "Given an undirected graph, find a partition into two components whose sizes are equal such that the total capacity of the edges between the two components is minimized."
msgstr "無向グラフが与えられた場合、サイズが同じ２つのコンポーネントへの分割を探します。２つのコンポーネント間のエッジの合計容量は最小にします。"

#: ../../tutorials/09_application_classes.ipynb:51
msgid "Max-cut problem"
msgstr "最大カット問題"

#: ../../tutorials/09_application_classes.ipynb:53
msgid "Given an undirected graph, find a partition of nodes into two subsets such that the total weight of the edges between the two subsets is maximized."
msgstr "無向グラフが所与の時、ノードの二つの部分集合への分割を探します。二つの部分集合のエッジの重みの合計は最大になるようにします。"

#: ../../tutorials/09_application_classes.ipynb:55
msgid "Stable set problem"
msgstr "安定集合問題"

#: ../../tutorials/09_application_classes.ipynb:57
msgid "Given an undirected graph, find a subset of nodes such that no edge connects the nodes in the subset and the number of nodes is maximized."
msgstr "無向グラフが所与の時、以下のノードのサブセットを探します。サブセット中でエッジがノードに接続せず、ノード数が最大のサブセットです。"

#: ../../tutorials/09_application_classes.ipynb:59
msgid "Traveling salesman problem"
msgstr "巡回セールスマン問題"

#: ../../tutorials/09_application_classes.ipynb:61
msgid "Given a graph, find a route with the minimum distance such that the route visits each city exactly once."
msgstr "グラフが所与の時、最小の距離のルートを探します。ルートは街を正確に一度訪れます。"

#: ../../tutorials/09_application_classes.ipynb:63
msgid "Vehicle routing problem"
msgstr "車両ルーティング問題"

#: ../../tutorials/09_application_classes.ipynb:65
msgid "Given a graph, a depot node, and the number of vehicles (routes), find a set of routes such that each node is covered exactly once except the depot and the total distance of the routes is minimized."
msgstr "グラフと倉庫ノードと車輌 (ルート) 数が所与の時、ルートのセットを探します。倉庫ノードを除くノードは厳密に一度カバーされ、ルートの合計距離は最小になるようにします。"

#: ../../tutorials/09_application_classes.ipynb:67
#: ../../tutorials/09_application_classes.ipynb:120
msgid "Vertex cover problem"
msgstr "頂点被覆問題"

#: ../../tutorials/09_application_classes.ipynb:69
msgid "Given an undirected graph, find a subset of nodes with the minimum size such that each edge has at least one endpoint in the subsets."
msgstr "無向グラフが所与の時、それぞれのエッジが最低一つのエンドポイントを持つような、最小サイズのノードサブセットを探します。"

#: ../../tutorials/09_application_classes.ipynb:71
msgid "The application classes for graph problems (``GraphOptimizationApplication``) provide a functionality to draw graphs of an instance and a result. Note that you need to install ``matplotlib`` beforehand to utilize the functionality."
msgstr "グラフの問題のアプリケーション・クラス (``GraphOptimizationApplication``) は、インスタンスと結果のグラフを描画する機能を提供します。 この機能を利用するには、あらかじめ ``matplotlib`` をインストールする必要があることに注意してください。"

#: ../../tutorials/09_application_classes.ipynb:82
msgid "We introduce examples of the vertex cover problem and the knapsack problem in this page."
msgstr "このページでは、頂点被覆問題とナップサック問題の例を紹介します。"

#: ../../tutorials/09_application_classes.ipynb:84
msgid "Examples of the max-cut problem and the traveling salesman problem are available in `Max-Cut and Traveling Salesman Problem <06_examples_max_cut_and_tsp.ipynb>`__."
msgstr "最大カット問題と巡回セールスマン問題の例は `Max-Cut and Traveling Salesman Problem <06_examples_max_cut_and_tsp.ipynb>`__ にあります。"

#: ../../tutorials/09_application_classes.ipynb:95
msgid "We first import packages necessary for application classes."
msgstr "最初にアプリケーションクラスに必要なパッケージをインポートします。"

#: ../../tutorials/09_application_classes.ipynb:122
msgid "We introduce the application class for the vertex cover problem as an example of graph problems. Given an undirected graph, the vertex cover problem asks us to find a subset of nodes with the minimum size such that all edges are covered by any node selected."
msgstr "グラフの問題の例として、頂点被覆問題のアプリケーションクラスを紹介します。頂点被覆問題では、無向グラフを所与として、選択されたノードによって全てのエッジがカバーされるような、最小サイズのノードサブセットを検索することを求められます。"

#: ../../tutorials/09_application_classes.ipynb:124
msgid "We import the application class ``VertexCover`` for the vertex cover problem and ``networkx`` to generate a random graph."
msgstr "頂点被覆問題のための ``VertexCover`` アプリケーションクラスと、ランダムグラフを生成するための ``networkx`` をインポートします。"

#: ../../tutorials/09_application_classes.ipynb:191
msgid "``VertexCover`` takes a graph as an instance and ``to_quadratic_program`` generates a corresponding ``QuadraticProgram`` of the instance of the vertex cover problem."
msgstr "``VertexCover`` はインスタンスとしてグラフを取り、``to_quadratic_program`` は頂点被覆問題のインスタンスに対応する ``QuadraticProgram`` を生成します。"

#: ../../tutorials/09_application_classes.ipynb:318
msgid "You can solve the problem as follows. ``NumPyMinimumEigensolver`` finds the minimum eigen vector. You can also apply QAOA. Note that the solution by QAOA is not always optimal."
msgstr "この問題は以下のように解けます。``NumPyMinimumEigensolver`` で最小固有ベクトルを見つけます。QAOA を適用しても良いです。ただし QAOA によるソリューションは常に最適ではないことに注意してください。"

#: ../../tutorials/09_application_classes.ipynb:487
msgid "The knapsack problem asks us to find a combination of items such that the total weight is within the capacity of the knapsack and maximize the total value of the items. The following examples solve an instance of the knapsack problem with 5 items by Numpy eigensolver and QAOA."
msgstr "ナップサック問題は、総重量がナップサックの容量以下で、アイテムの総価値が最大になるアイテムの組合せを見つける問題です。 以下の例では、Numpy eigensolver と QAOA によって、5 アイテムのナップサック問題の例を解きます。"

#: ../../tutorials/09_application_classes.ipynb:716
msgid "How to check the Hamiltonian"
msgstr "ハミルトニアンの確認方法"

#: ../../tutorials/09_application_classes.ipynb:718
msgid "If you want to check the actual Hamiltonian generated from your problem instance, you need to apply a converter as follows."
msgstr "問題インスタンスから生成された実際のハミルトニアンを確認するには、次のようにコンバーターを適用する必要があります。"

