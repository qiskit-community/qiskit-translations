msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-06 22:00+0000\n"
"PO-Revision-Date: 2023-02-06 22:34\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/11_using_classical_optimization_solvers_and_models.po\n"
"X-Crowdin-File-ID: 9715\n"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:9
msgid "This page was generated from `docs/tutorials/11_using_classical_optimization_solvers_and_models.ipynb`__."
msgstr "このページは、 `docs/tutorials/11_using_classical_optimization_solvers_and_models.ipynb`__ によって生成されました。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:9
msgid "Using Classical Optimization Solvers and Models with Qiskit Optimization"
msgstr "Qiskit Optimization での古典的最適化ソルバーとモデルの使用"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:20
msgid "We can use classical optimization solvers (CPLEX and Gurobi) with Qiskit Optimization. Docplex and Gurobipy are the Python APIs for CPLEX and Gurobi, respectively. We can load and save an optimization model by Docplex and Gurobipy and can apply CPLEX and Gurobi to ``QuadraticProgram``."
msgstr "Qiskit Optimization では、古典的な最適化ソルバー (CPLEXとGroubi) を使用できます。Docplexと Groubipy は、それぞれ CPLEX と Gurobi の Python API です。 Docplex と Gurobipy で最適化モデルをロードして保存し、``QuadraticProgram`` に CPLEX と Gurobi を適用することができます。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:22
msgid "If you want to use the CPLEX solver, you need to install ``pip install 'qiskit-optimization[cplex]'``. Docplex is automatically installed, as a dependent, when you install Qiskit Optimization."
msgstr "CPLEX ソルバーを使用したい場合は、``pip install 'qiskit-optimization[cplex]'`` でインストールする必要があります。Qiskit Optimization をインストールすると、Docplex は依存関係として自動的にインストールされます。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:24
msgid "If you want to use Gurobi and Gurobipy, you need to install ``pip install 'qiskit-optimization[gurobi]'``."
msgstr "Gurobi と Gurobipy を使いたい場合は、``pip install 'qiskit-optimization[gurobi]'`` でインストールする必要があります。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:26
msgid "Note that these solvers installed via pip are free versions, which have some limitations such as number of variables. Also note that the latest version 20.1 of CPLEX is available only for Python 3.7 and 3.8 as of July 2021. See the following pages for details."
msgstr "Pip でインストールされるこれらのソルバーは、変数の数などいくつかの制限がある無料バージョンです。また 2021年7月現在、最新のバージョン 20.1 の CPLEX は Python 3.7 と 3.8 でのみ利用可能です。詳細は次のページを参照してください。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:28
msgid "https://pypi.org/project/cplex/"
msgstr "https://pypi.org/project/cplex/"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:29
msgid "https://pypi.org/project/gurobipy/"
msgstr "https://pypi.org/project/gurobipy/"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:41
msgid "CplexSolver and GurobiSolver"
msgstr "CplexSolver と GurobiSolver"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:43
msgid "Qiskit Optimization supports the classical solvers of CPLEX and Gurobi as ``CplexSolver`` and ``GurobiSolver``, respectively. We can solve ``QuadraticProgram`` with ``CplexSolver`` and ``GurobiSolver`` as follows."
msgstr "Qiskit Optimization は、それぞれ ``CplexSolver`` と ``GurobiSolver`` として CPLEX とGurobi の古典的ソルバーをサポートしています。``CplexSolver`` と ``GurobiSolver`` で ``QuadraticProgram`` を解くことができます。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:208
msgid "We can set the solver parameter of CPLEX as follows. We can display the solver message of CPLEX by setting ``disp=True``. See `Parameters of CPLEX <https://www.ibm.com/docs/en/icos/20.1.0?topic=cplex-parameters>`__ for details of CPLEX parameters."
msgstr "CPLEX のソルバー・パラメーターは、次のように設定できます。 CPLEX のソルバー・メッセージを表示するには ``disp=True`` を設定します。 CPLEX パラメーターの詳細については、 `Parameters of CPLEX <https://www.ibm.com/docs/en/icos/20.1.0?topic=cplex-parameters>`__ を参照してください。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:299
msgid "We get the same optimal solution by QAOA as follows."
msgstr "QAOA でも同様に最適解を得ることができます。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:384
msgid "Translators between ``QuadraticProgram`` and Docplex/Gurobipy"
msgstr "``QuadraticProgram`` と Docplex/Gurobipy のトランスレーター"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:386
msgid "Qiskit Optimization can load ``QuadraticProgram`` from a Docplex model and a Gurobipy model."
msgstr "Qiskit Optimization は、Docplex モデルと Gurobipy モデルから ``QuadraticProgram`` をロードできます。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:388
msgid "First, we define an optimization problem by Docplex and Gurobipy."
msgstr "まず、Docplex および Gurobipy によって最適化問題を定義します。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:547
msgid "We can generate ``QuadraticProgram`` object from both Docplex and Gurobipy models. We see that the two ``QuadraticProgram`` objects generated from Docplex and Gurobipy are identical."
msgstr "Docplex と Groubipy の両方のモデルから ``QuadraticProgram`` オブジェクトを生成することができます。Docplex と Gurobipy から生成された2つの ``QuadraticProgram`` オブジェクトが同じであることを見てみましょう。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:696
msgid "We can generate a Docplex model and a Gurobipy model from ``QuadraticProgram`` too."
msgstr "``QuadraticProgram`` から Docplex モデルと Gurobipy モデルを生成することもできます。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:846
msgid "Indicator constraints of Docplex"
msgstr "Docplex のインディケーター制約"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:848
msgid "``from_docplex_mp`` supports indicator constraints, e.g., ``u = 0 => x + y <= z`` (u: binary variable) when we convert a Docplex model into ``QuadraticProgram``. It converts indicator constraints into linear constraints using the big-M formulation."
msgstr "``from_docplex_mp`` は Docplex モデルを ``QuadraticProgram`` に変換する時、インディケーター制約、すなわち ``u = 0 => x + y <= z`` (u: バイナリー変数) をサポートします。それはインディケーター制約を big-M 定式化で線形制約に変換します。"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:959
msgid "Let’s compare the solutions of the model with an indicator constraint by"
msgstr "インディケーター制約のあるモデルの解を比較してみましょう"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:961
msgid "applying CPLEX directly to the Docplex model (without translating it to ``QuadraticProgram``. CPLEX solver natively supports the indicator constraints),"
msgstr "CPLEX を直接 Docplex モデルに適用する ( ``QuadraticProgram`` に変換せずに。CPLEX ソルバーはインディケーター制約をネイティブにサポートします)"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:962
msgid "applying QAOA to ``QuadraticProgram`` obtained by ``from_docplex_mp``."
msgstr "QAOA を ``from_docplex_mp`` から得た ``QuadraticProgram`` に適用する"

#: ../../tutorials/11_using_classical_optimization_solvers_and_models.ipynb:964
msgid "We see the solutions are same."
msgstr "解は同じになります。"

