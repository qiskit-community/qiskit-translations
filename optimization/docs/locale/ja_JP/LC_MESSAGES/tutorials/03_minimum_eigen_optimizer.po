msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-18 16:26+0000\n"
"PO-Revision-Date: 2021-09-19 07:20\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/03_minimum_eigen_optimizer.po\n"
"X-Crowdin-File-ID: 9646\n"
"Language: ja_JP\n"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:9
msgid "This page was generated from `docs/tutorials/03_minimum_eigen_optimizer.ipynb`__."
msgstr "このページは `docs/tutorials/03_minimum_eigen_optimizer.ipynb`__ から生成されました。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:9
msgid "Minimum Eigen Optimizer"
msgstr "最小固有値オプティマイザー (Minimum Eigen Optimizer)"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:21
msgid "Introduction"
msgstr "はじめに"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:32
msgid "An interesting class of optimization problems to be addressed by quantum computing are Quadratic Unconstrained Binary Optimization (QUBO) problems. Finding the solution to a QUBO is equivalent to finding the ground state of a corresponding Ising Hamiltonian, which is an important problem not only in optimization, but also in quantum chemistry and physics. For this translation, the binary variables taking values in :math:`\\{0, 1\\}` are replaced by spin variables taking values in :math:`\\{-1, +1\\}`, which allows to replace the resulting spin variables by Pauli Z matrices, and thus, an Ising Hamiltonian. For more details on this mapping we refer to [1]."
msgstr "量子コンピューティングによって対処される興味深い最適化問題のクラスは、Quadratic Unconstrained Binary Optimization（QUBO）問題です。QUBOの解を求めることは、対応するイジング・ハミルトニアンの基底状態を見つけることに相当します。これは、最適化だけでなく、量子化学や物理学でも重要な問題です。この変換の場合、 :math:`\\{0, 1\\}` の値を取るバイナリ変数は、 :math:`\\{-1, +1\\}` の値を取るスピン変数に置き換えられます。これにより、パウリZ行列によって得られるスピン変数をイジング・ハミルトニアンに置換することができます。このマッピングの詳細については、[1]を参照してください。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:35
msgid "Qiskit provides automatic conversion from a suitable ``QuadraticProgram`` to an Ising Hamiltonian, which then allows to leverage all the ``MinimumEigenSolver`` such as - ``VQE``, - ``QAOA``, or - ``NumpyMinimumEigensolver`` (classical exact method)."
msgstr "Qiskitは、適切な ``QuadraticProgram`` からイジング・ハミルトニアンへの自動変換を提供します。これにより、- ``VQE`` 、- ``QAOA`` 、または- ``NumpyMinimumEigensolver`` （クラシカルな厳密法）などのすべての ``MinimumEigenSolver`` を活用できます。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:37
msgid "Qiskit wraps the translation to an Ising Hamiltonian (in Qiskit Aqua also called ``Operator``), the call to an ``MinimumEigensolver`` as well as the translation of the results back to ``OptimizationResult`` in the ``MinimumEigenOptimizer``."
msgstr "Qiskitは、イジング・ハミルトニアン (Qiskit Aquaでは ``Operator`` とも呼ばれます) への翻訳、すなわち  ``MinimumEigensolver`` への呼び出しと、結果の翻訳とを、ラップして ``MinimumEigenOptimizer`` の ``OptimizationResult`` に戻します。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:39
msgid "In the following we first illustrate the conversion from a ``QuadraticProgram`` to an ``Operator`` and then show how to use the ``MinimumEigenOptimizer`` with different ``MinimumEigensolver`` to solve a given ``QuadraticProgram``. The algorithms in Qiskit automatically try to convert a given problem to the supported problem class if possible, for instance, the ``MinimumEigenOptimizer`` will automatically translate integer variables to binary variables or add a linear equality constraints as a quadratic penalty term to the objective. It should be mentioned that Aqua will through a ``QiskitOptimizationError`` if conversion of a quadratic program with integer variable is attempted."
msgstr "以下では、まず、``QuadraticProgram`` から ``Operator`` への変換を示します。次に、与えられた ``QuadraticProgram`` を解くのに、``MinimumEigenOptimizer`` を異なる ``MinimumEigensolver`` にどう使うのかを示します。Qiskitのアルゴリズムは、与えられた問題を、可能であればサポートされている問題クラスに自動的に変換しようとします。例えば、``MinimumEigenOptimizer`` は整数変数をバイナリー変数に自動的に変換したり、線形等価制約を2次ペナルティ項として目的関数に追加したりします。整数変数を持つ二次計画問題を変換しようとすると、Aqua は ``QiskitOptimizationError`` を投げることに注意してください。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:42
msgid "The circuit depth of ``QAOA`` potentially has to be increased with the problem size, which might be prohibitive for near-term quantum devices. A possible workaround is Recursive QAOA, as introduced in [2]. Qiskit generalizes this concept to the ``RecursiveMinimumEigenOptimizer``, which is introduced at the end of this tutorial."
msgstr "``QAOA`` の回路の深さは、問題の大きさに応じて必然的に増加する可能性があり、これは近未来の量子デバイスにとっては障害となる可能性があります。考えられる回避策として、 [2] で紹介されている再帰QAOAがあります。このチュートリアルの最後で紹介しますが、Qiskit はこの概念を`RecursiveMinimumEigenOptimizer` に一般化しています。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:45
msgid "References"
msgstr "参考文献"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:47
msgid "[1] `A. Lucas, Ising formulations of many NP problems, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>`__"
msgstr "[1] `A. Lucas, Ising formulations of many NP problems, Front. Phys., 12 (2014). <https://arxiv.org/abs/1302.5843>`__"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:49
msgid "[2] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"
msgstr "[2] `S. Bravyi, A. Kliesch, R. Koenig, E. Tang, Obstacles to State Preparation and Variational Optimization from Symmetry Protection, arXiv preprint arXiv:1910.08980 (2019). <https://arxiv.org/abs/1910.08980>`__"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:61
msgid "Converting a QUBO to an Operator"
msgstr "QUBOをオペレーターに変換する"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:156
msgid "Next we translate this QUBO into an Ising operator. This results not only in an ``Operator`` but also in a constant offset to be taking into account to shift the resulting value."
msgstr "次に、このQUBOをIsingオペレータに翻訳します。 翻訳の結果は、``Operator`` だけではなく、結果の値をシフトするのに考慮すべき定数オフセットにもなります。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:213
msgid "Sometimes an ``QuadraticProgram`` might also directly be given in the form of an ``Operator``. For such cases, Qiskit also provides a converter from an ``Operator`` back to a ``QuadraticProgram``, which we illustrate in the following."
msgstr "ときには、``QuadraticProgram`` が ``Operator`` の形でも直接与えられる場合があります。 このような場合、Qiskit は ``Operator`` から ``QuadraticProgram`` に戻す変換機能を備えています。これについては以下で説明します。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:287
msgid "This converter allows, for instance, to translate an ``Operator`` to a ``QuadraticProgram`` and then solve the problem with other algorithms that are not based on the Ising Hamiltonian representation, such as the ``GroverOptimizer``."
msgstr "このコンバーターにより、例えば、``Operator`` を ``QuadraticProgram`` に変換して、イジング・ハミルトニアン表現に基づいていない他のアルゴリズム（例えば ``GroverOptimizer`` ）で問題を解くことができます。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:299
msgid "Solving a QUBO with the MinimumEigenOptimizer"
msgstr "MinimumEigenOptimizer で QUBO を解く"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:310
msgid "We start by initializing the ``MinimumEigensolver`` we want to use."
msgstr "まず、使用する ``MinimumEigensolver`` を初期化します。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:336
msgid "Then, we use the ``MinimumEigensolver`` to create ``MinimumEigenOptimizer``."
msgstr "次に、``MinimumEigensolver`` を使用して ``MinimumEigenOptimizer`` を作成します。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:358
msgid "We first use the ``MinimumEigenOptimizer`` based on the classical exact ``NumPyMinimumEigensolver`` to get the optimal benchmark solution for this small example."
msgstr "最初に、古典的で厳密な``NumPyMinimumEigensolver`` に基づいた ``MinimumEigenOptimizer`` を使用して、この小さな例に対してベンチマークとなる最適解を求めます。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:403
msgid "Next we apply the ``MinimumEigenOptimizer`` based on ``QAOA`` to the same problem."
msgstr "次に、同じ問題に対して、``QAOA`` に基づいた ``MinimumEigenOptimizer`` を適用します。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:449
msgid "Analysis of Samples"
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:451
msgid "``OptimizationResult`` provides a useful information source ``SolutionSample`` (here denoted as *samples*). They contain information about input values ``x``, objective function values ``fval``, probability of obtaining that result ``probability`` and the solution status ``status`` (``SUCCESS``, ``FAILURE``, ``INFEASIBLE``)."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:509
msgid "We may also want to filter samples according to their status or probabilities."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:585
msgid "If we want to obtain a better perspective of the results, statistics is very helpful, both with respect to the objective function values and their respective probabilities. Thus, mean and standard deviation are the very basics for understanding the results."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:667
msgid "Finally, despite all number-crunching, visualization is usually the best early-analysis approach."
msgstr ""

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:745
msgid "RecursiveMinimumEigenOptimizer"
msgstr "RecursiveMinimumEigenOptimizer"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:756
msgid "The ``RecursiveMinimumEigenOptimizer`` takes a ``MinimumEigenOptimizer`` as input and applies the recursive optimization scheme to reduce the size of the problem one variable at a time. Once the size of the generated intermediate problem is below a given threshold (``min_num_vars``), the ``RecursiveMinimumEigenOptimizer`` uses another solver (``min_num_vars_optimizer``), e.g., an exact classical solver such as CPLEX or the ``MinimumEigenOptimizer`` based on the ``NumPyMinimumEigensolver``."
msgstr "``RecursiveMinimumEigenOptimizer`` は入力として ``MinimumEigenOptimizer`` を取り、再帰的な最適化スキームを適用して、問題のサイズを一度に1変数ずつ小さくします。 生成された中間問題のサイズが与えられたしきい値 (``min_num_vars``) を下回ると、``RecursiveMinimumEigenOptimizer`` は別のソルバー(``min_num_vars_optimizer``)を使用します。（例えば ``NumPyMinimumEigensolver`` に基づく、CPLEXや ``MinimumEigenOptimizer`` などの厳密な古典ソルバーなど）"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:758
msgid "In the following, we show how to use the ``RecursiveMinimumEigenOptimizer`` using the two ``MinimumEigenOptimizer`` introduced before."
msgstr "以下では、以前に導入した 2 つの ``MinimumEigenOptimizer`` を使用して ``RecursiveMinimumEigenOptimizer`` を使用する方法を示します。"

#: ../../tutorials/03_minimum_eigen_optimizer.ipynb:769
msgid "First, we construct the ``RecursiveMinimumEigenOptimizer`` such that it reduces the problem size from 3 variables to 1 variable and then uses the exact solver for the last variable. Then we call ``solve`` to optimize the considered problem."
msgstr "最初に ``RecursiveMinimumEigenOptimizer`` を構築し、問題サイズを3つの変数から1つの変数に縮小し、最後の変数に正確なソルバーを使用します。 次に、検討された問題を最適化するために ``solve`` を呼び出します。"

