msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-06 17:29+0000\n"
"PO-Revision-Date: 2022-07-06 18:24\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/07_examples_vehicle_routing.po\n"
"X-Crowdin-File-ID: 9654\n"
"Language: ja_JP\n"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:9
msgid "This page was generated from `docs/tutorials/07_examples_vehicle_routing.ipynb`__."
msgstr "このページは `docs/tutorials/07_examples_vehicle_routing.ipynb`__ から生成されました。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:9
msgid "Vehicle Routing"
msgstr "配車ルーティング"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:12
msgid "The Introduction"
msgstr "はじめに"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:14
msgid "Logistics is a major industry, with some estimates valuing it at USD 8183 billion globally in 2015. Most service providers operate a number of vehicles (e.g., trucks and container ships), a number of depots, where the vehicles are based overnight, and serve a number of client locations with each vehicle during each day. There are many optimization and control problems that consider these parameters. Computationally, the key challenge is how to design routes from depots to a number of client locations and back to the depot, so as to minimize vehicle-miles traveled, time spent, or similar objective functions. In this notebook we formalize an idealized version of the problem and showcase its solution using the quantum approximate optimization approach of Farhi, Goldstone, and Gutmann (2014)."
msgstr "ロジスティクスは主要産業であり、2015年には世界全体で8兆1830億米ドルになるという推計もあります。ほとんどのサービスプロバイダーは、多数の車両（トラックやコンテナ船など）、車両が夜間に拠点とする多数のデポを運営しています。 車両は夜間にはデポを拠点とし、毎日、各車両で多くのクライアントの場所にサービスを提供します。 これらのパラメータを考慮する最適化および制御の問題がたくさんあります。 計算上の重要な課題は、デポから多数のクライアントの場所に行ってまたデポに戻るルートをどのように設計すれば、車両の走行距離、費やした時間、またはそれに類する目的関数を最小にすることができるか、ということです。 このノートブックでは、理想化された形の問題を定式化し、Farhi, Goldstone, and Gutman（2014）の量子近似最適化アプローチを使用してその解決策を紹介します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:17
msgid "The overall workflow we demonstrate comprises:"
msgstr "全体的なワークフローは以下のとおりです。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:19
msgid "establish the client locations. Normally, these would be available ahead of the day of deliveries from a database. In our use case, we generate these randomly."
msgstr "クライアントの場所を確立します。 通常、これらはデータベースからの配信日の前に利用可能です。 私たちのユースケースでは、これらをランダムに生成します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:21
msgid "compute the pair-wise distances, travel times, or similar. In our case, we consider the Euclidean distance, “as the crow flies”, which is perhaps the simplest possible."
msgstr "ペアワイズ距離、移動時間などを計算します。 私たちの場合、「カラスが飛ぶように」ユークリッド距離を考慮します。これはおそらく最も単純な距離です。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:23
msgid "compute the actual routes. This step is run twice, actually. First, we obtain a reference value by a run of a classical solver (IBM CPLEX) on the classical computer. Second, we run an alternative, hybrid algorithm partly on the quantum computer."
msgstr "実際のルートを計算します。 このステップは、実際には2回実行されます。 最初に、古典的なコンピューターで古典的なソルバー（IBM CPLEX）を実行して参照値を取得します。 次に、量子コンピューターで部分的に代替のハイブリッドアルゴリズムを実行します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:25
msgid "visualization of the results. In our case, this is again a simplistic plot."
msgstr "結果を視覚化します。 ここでは単純なプロットをします。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:27
msgid "In the following, we first explain the model, before we proceed with the installation of the pre-requisites and the data loading."
msgstr "以下では、前提条件のインストールとデータのロードに進む前に、まずモデルについて説明します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:30
msgid "The Model"
msgstr "モデル"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:32
msgid "Mathematically speaking, the vehicle routing problem (VRP) is a combinatorial problem, wherein the best routes from a depot to a number of clients and back to the depot are sought, given a number of available vehicles. There are a number of formulations possible, extending a number of formulations of the traveling salesman problem [Applegate et al, 2006]. Here, we present a formulation known as MTZ [Miller, Tucker, Zemlin, 1960]."
msgstr "数学的に言えば、配車ルート問題（vehicle routing problem、VRP）は組み合わせ問題であり、利用可能な車両の数を考慮して、デポから多数のクライアントに戻り、デポに戻る最適なルートが求められます。 巡回セールスマン問題の多くの定式化を拡張して、可能な多くの定式化があります [Applegate et al, 2006] 。 ここでは、MTZ [Miller, Tucker, Zemlin, 1960] として知られる定式化を紹介します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:34
msgid "Let :math:`n` be the number of clients (indexed as :math:`1,\\dots,n`), and :math:`K` be the number of available vehicles. Let :math:`x_{ij} = \\{0,1\\}` be the binary decision variable which, if it is :math:`1`, activates the segment from node :math:`i` to node :math:`j`. The node index runs from :math:`0` to :math:`n`, where :math:`0` is (by convention) the depot. There are twice as many distinct decision variables as edges. For example, in a fully connected graph, there are :math:`n(n+1)` binary decision variables."
msgstr ":math:`n` をクライアントの数（ :math:`1,\\dots,n` としてインデックス付け）、 :math:`K` を利用可能な車両の数とします。 :math:`x_{ij} = \\{0,1\\}` をバイナリー決定変数とします。これが :math:`1` の場合、ノード :math:`i` からノード :math:`j` へのセグメントをアクティブにします。 ノードインデックスは :math:`0` から :math:`n` まで実行されます。ここで、 :math:`0` は（慣例により）デポです。 エッジの2倍の異なる決定変数があります。 たとえば、完全接続されたグラフには、 :math:`n(n+1)` 個のバイナリ決定変数があります。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:37
msgid "If two nodes :math:`i` and :math:`j` have a link from :math:`i` to :math:`j`, we write :math:`i \\sim j`. We also denote with :math:`\\delta(i)^+` the set of nodes to which :math:`i` has a link, i.e., :math:`j \\in \\delta(i)^+` if and only if :math:`i \\sim j`. Similarly, we denote with :math:`\\delta(i)^-` the set of nodes which are connected to :math:`i`, in the sense that :math:`j \\in \\delta(i)^-` if and only if :math:`j \\sim i`."
msgstr "2つのノード :math:`i` と :math:`j` に :math:`i` から :math:`j` へのリンクがある場合、 :math:`i \\sim j` と記述します。 また、 :math:`i \\sim j` の場合に限り、 :math:`i` がリンクしているノードのセットを :math:`\\delta(i)^+` で表します。つまり、:math:`j \\in \\delta(i)^+` です。 同様に、 :math:`j \\sim i` の場合に限り、 :math:`j \\in \\delta(i)^-` という意味で、iに接続されているノードのセットを :math:`\\delta(i)^-` で表します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:39
msgid "In addition, we consider continuous variables, for all nodes :math:`i = 1,\\dots, n`, denoted :math:`u_i`. These variables are needed in the MTZ formulation of the problem to eliminate sub-tours between clients."
msgstr "さらに、 :math:`u_i` で表されるすべてのノード :math:`i = 1,\\dots, n` について、連続変数を検討します。 これらの変数は、クライアント間のサブツアーを排除するために、問題のMTZ定式化で必要です。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:41
msgid "The VRP can be formulated as:"
msgstr "VRPは以下のように定式化できます:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:43
msgid "(VRP) \\quad  f = \\min_{\\{x_{ij}\\}_{i\\sim j}\\in \\{0,1\\}, \\{u_i\\}_{i=1,\\dots,n}\\in \\mathbb{R}} \\quad \\sum_{i \\sim j} w_{ij} x_{ij}"
msgstr "(VRP) \\quad  f = \\min_{\\{x_{ij}\\}_{i\\sim j}\\in \\{0,1\\}, \\{u_i\\}_{i=1,\\dots,n}\\in \\mathbb{R}} \\quad \\sum_{i \\sim j} w_{ij} x_{ij}"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:48
msgid "subject to the node-visiting constraint:"
msgstr "ノード訪問制約の対象："

#: ../../tutorials/07_examples_vehicle_routing.ipynb:50
msgid "\\sum_{j \\in \\delta(i)^+} x_{ij} = 1, \\,\\sum_{j \\in \\delta(i)^-} x_{ji} = 1,\\, \\forall i \\in \\{1,\\dots,n\\},"
msgstr "\\sum_{j \\in \\delta(i)^+} x_{ij} = 1, \\,\\sum_{j \\in \\delta(i)^-} x_{ji} = 1,\\, \\forall i \\in \\{1,\\dots,n\\},"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:55
msgid "the depot-visiting constraints:"
msgstr "デポ訪問の制約："

#: ../../tutorials/07_examples_vehicle_routing.ipynb:57
msgid "\\sum_{i \\in \\delta(0)^+} x_{0i} = K, \\, \\sum_{j \\in \\delta(0)^+} x_{j0} = K,"
msgstr "\\sum_{i \\in \\delta(0)^+} x_{0i} = K, \\, \\sum_{j \\in \\delta(0)^+} x_{j0} = K,"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:62
msgid "and the sub-tour elimination constraints:"
msgstr "およびサブツアー除去の制約："

#: ../../tutorials/07_examples_vehicle_routing.ipynb:64
msgid "u_i - u_j + Q x_{ij} \\leq Q-q_j, \\, \\forall i \\sim j, \\,i ,j \\neq 0, \\quad q_i \\leq u_i \\leq Q,\\, \\forall i, i \\neq 0."
msgstr "u_i - u_j + Q x_{ij} \\leq Q-q_j, \\, \\forall i \\sim j, \\,i ,j \\neq 0, \\quad q_i \\leq u_i \\leq Q,\\, \\forall i, i \\neq 0."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:69
msgid "In particular,"
msgstr "特に、"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:71
msgid "The cost function is linear in the cost functions and weighs the different arches based on a positive weight :math:`w_{ij}>0` (typically the distance between node :math:`i` and node :math:`j`);"
msgstr "コスト関数はコスト関数で線形であり、正の重み :math:`w_{ij}>0` に基づいてさまざまなアーチの重みを付けます。（通常、ノード :math:`i` とノード :math:`j` の間の距離）"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:72
msgid "The first set of constraints enforce that from and to every client, only one link is allowed;"
msgstr "最初の一連の制約は、すべてのクライアントとの間で、1つのリンクのみが許可されることを強制します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:73
msgid "The second set of constraints enforce that from and to the depot, exactly :math:`K` links are allowed;"
msgstr "制約の2番目のセットは、デポとの間で正確に :math:`K` 個のリンクが許可されることを強制します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:74
msgid "The third set of constraints enforce the sub-tour elimination constraints and are bounds on :math:`u_i`, with :math:`Q>q_j>0`, and :math:`Q,q_i \\in \\mathbb{R}`."
msgstr "制約の3番目のセットは、サブツアー除去制約を適用し、 :math:`Q>q_j>0` および :math:`Q,q_i \\in \\mathbb{R}` を使用して :math:`u_i` の境界になります。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:77
msgid "Classical solution"
msgstr "古典的なソリューション"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:79
msgid "We can solve the VRP classically, e.g., by using CPLEX. CPLEX uses a branch-and-bound-and-cut method to find an approximate solution of the VRP, which, in this formulation, is a mixed-integer linear program (MILP). For the sake of notation, we pack the decision variables in one vector as"
msgstr "CPLEXを使用するなどして、VRPを古典的に解決できます。 CPLEXは、branch-and-bound-and-cut 法を使用して、VRPの近似解を見つけます。これは、この定式化では、混合整数線形計画（mixed-integer linear program、MILP）です。 表記のために、決定変数を1つのベクトルに次のようにパックします。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:81
msgid "{\\bf z} = [x_{01},x_{02},\\ldots,x_{10}, x_{12},\\ldots,x_{n(n-1)}]^T,"
msgstr "{\\bf z} = [x_{01},x_{02},\\ldots,x_{10}, x_{12},\\ldots,x_{n(n-1)}]^T,"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:86
msgid "wherein :math:`{\\bf z} \\in \\{0,1\\}^N`, with :math:`N = n (n+1)`. So the dimension of the problem scales quadratically with the number of nodes. Let us denote the optimal solution by :math:`{\\bf z}^*`, and the associated optimal cost :math:`f^*`."
msgstr "ここでは、 :math:`{\\bf z} \\in \\{0,1\\}^N` 、 :math:`N = n (n+1)` です。 したがって、問題の次元はノードの数に比例して二次関数的にスケーリングします。 最適解を :math:`{\\bf z}^*` で表し、関連する最適コストを :math:`f^*` で表します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:89
msgid "Quantum solution"
msgstr "量子ソリューション"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:91
msgid "Here, we demonstrate an approach that combines classical and quantum computing steps, following the quantum approximate optimization approach of Farhi, Goldstone, and Gutmann (2014). In particular, we use the variational quantum eigensolver (VQE). We stress that given the use of limited depth of the quantum circuits employed (variational forms), it is hard to discuss the speed-up of the algorithm, as the solution obtained is heuristic in nature. At the same time, due to the nature and importance of the target problems, it is worth investigating heuristic approaches, which may be worthwhile for some problem classes."
msgstr "ここでは、Farhi, Goldstone, and Gutman（2014）の量子近似最適化アプローチに従って、古典的な計算ステップと量子的な計算ステップを組み合わせたアプローチを示します。 特に、変分量子固有値ソルバー（variational quantum eigensolver、VQE）を使用します。 強調しておきたいのは、使用できる量子回路の深さが限られていること（変分形式）を考えると、アルゴリズムの高速化について議論するのは難しいということです。というのは、得られる解は本質的にヒューリスティックなものとなるからです。 同時に、対象となる問題の性質と重要性のため、ヒューリスティックなアプローチについて調べるのは価値のあることです。いくつかの問題クラスではこれが有用でしょう。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:94
msgid "Following [5], the algorithm can be summarized as follows:"
msgstr "[5] に従うと、アルゴリズムは以下のように要約できます:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:96
msgid "Preparation steps:"
msgstr "準備ステップ:"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:98
msgid "Transform the combinatorial problem into a binary polynomial optimization problem with equality constraints only;"
msgstr "組合せ最適化問題を、等式制約のみでバイナリー多項式最適化問題に変換します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:99
msgid "Map the resulting problem into an Ising Hamiltonian (:math:`H`) for variables :math:`{\\bf z}` and basis :math:`Z`, via penalty methods if necessary;"
msgstr "変数 :math:`{\\bf z}` および基底 :math:`Z` のイジング・ハミルトニアン (:math:`H`) に、必要ならばペナルティー・メソッドを使用して、結果の問題をマップします。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:100
msgid "Choose the depth of the quantum circuit :math:`m`. Note that the depth can be modified adaptively."
msgstr "量子回路の深さ :math:`m` を選択します。 深さは適応的に変更できることに注意してください。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:101
msgid "Choose a set of controls :math:`\\theta` and make a trial function :math:`\\big|\\psi(\\boldsymbol\\theta)\\rangle`, built using a quantum circuit made of C-Phase gates and single-qubit Y rotations, parameterized by the components of :math:`\\boldsymbol\\theta`."
msgstr "コントロール :math:`\\theta` のセットを選択し、 :math:`\\boldsymbol\\theta` の成分によってパラメータ化された、制御位相ゲートと単一量子ビットY回転ゲートで構成される量子回路を使用して構築された、試行関数 :math:`\\big|\\psi(\\boldsymbol\\theta)\\rangle` を作成します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:103
msgid "Algorithm steps:"
msgstr "アルゴリズムの手順："

#: ../../tutorials/07_examples_vehicle_routing.ipynb:105
msgid "Evaluate :math:`C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)\\big|H\\big|\\psi(\\boldsymbol\\theta)\\rangle` by sampling the outcome of the circuit in the Z-basis and adding the expectation values of the individual Ising terms together. In general, different control points around :math:`\\boldsymbol\\theta` have to be estimated, depending on the classical optimizer chosen."
msgstr "Z基底で回路の結果をサンプリングし、個々のイジング項の期待値を合計して、 :math:`C(\\boldsymbol\\theta) = \\langle\\psi(\\boldsymbol\\theta)\\big|H\\big|\\psi(\\boldsymbol\\theta)\\rangle` を評価します。 一般に、選択した古典的なオプティマイザーに応じて、 :math:`\\boldsymbol\\theta` 周辺のさまざまな制御点を推定する必要があります。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:106
msgid "Use a classical optimizer to choose a new set of controls."
msgstr "古典的なオプティマイザーを使用して、新しいコントロールのセットを選択します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:107
msgid "Continue until :math:`C(\\boldsymbol\\theta)` reaches a minimum, close enough to the solution :math:`\\boldsymbol\\theta^*`."
msgstr ":math:`C(\\boldsymbol\\theta)` が最小値に達するまで続け、解 :math:`\\boldsymbol\\theta^*` に十分に近づけます。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:108
msgid "Use the last :math:`\\boldsymbol\\theta` to generate a final set of samples from the distribution :math:`\\Big|\\langle z_i\\big|\\psi(\\boldsymbol\\theta)\\rangle\\Big|^2\\;\\forall i` to obtain the answer."
msgstr "最後の :math:`\\boldsymbol\\theta` を使用して、分布 :math:`\\Big|\\langle z_i\\big|\\psi(\\boldsymbol\\theta)\\rangle\\Big|^2\\;\\forall i` からサンプルの最終セットを生成し、答えを取得します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:110
msgid "There are many parameters throughout, notably the choice of the trial wavefunction. Below, we consider:"
msgstr "全体を通して多くのパラメーターがあり、特に試行波動関数の選択があります。 以下では、次を検討します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:112
msgid "\\big|\\psi(\\theta)\\rangle = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m \\big|+\\rangle"
msgstr "\\big|\\psi(\\theta)\\rangle = [U_\\mathrm{single}(\\boldsymbol\\theta) U_\\mathrm{entangler}]^m \\big|+\\rangle"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:117
msgid "where :math:`U_\\mathrm{entangler}` is a collection of C-Phase gates (fully-entangling gates), and :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^N Y(\\theta_{i})`, where :math:`N` is the number of qubits and :math:`m` is the depth of the quantum circuit."
msgstr "ここで、 :math:`U_\\mathrm{entangler}` は制御位相ゲート（完全にエンタングルしたゲート）の集合であり、 :math:`U_\\mathrm{single}(\\theta) = \\prod_{i=1}^N Y(\\theta_{i})` です。ここで、 :math:`N` は量子ビットの数、 :math:`m` は量子回路の深さです。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:120
msgid "Construct the Ising Hamiltonian"
msgstr "イジング・ハミルトニアンの構築"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:122
msgid "From :math:`VRP` one can construct a binary polynomial optimization with equality constraints only by considering cases in which :math:`K=n-1`. In these cases the sub-tour elimination constraints are not necessary and the problem is only on the variable :math:`{\\bf z}`. In particular, we can write an augmented Lagrangian as"
msgstr ":math:`VRP` から、 :math:`K=n-1` の場合を考慮することによってのみ、等式制約を使用してバイナリ多項式最適化を構築できます。 これらの場合、サブツアー除去制約は必要なく、問題は変数 :math:`{\\bf z}` にのみあります。 特に、拡張ラグランジアンは次のように書くことができます。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:124
msgid "(IH) \\quad H = \\sum_{i \\sim j} w_{ij} x_{ij}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big(\\sum_{j \\in \\delta(i)^+} x_{ij} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big(\\sum_{j \\in \\delta(i)^-} x_{ji} - 1\\Big)^2 +A \\Big(\\sum_{i \\in \\delta(0)^+} x_{0i} - K\\Big)^2 + A\\Big(\\sum_{j \\in \\delta(0)^+} x_{j0} - K\\Big)^2"
msgstr "(IH) \\quad H = \\sum_{i \\sim j} w_{ij} x_{ij}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big(\\sum_{j \\in \\delta(i)^+} x_{ij} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big(\\sum_{j \\in \\delta(i)^-} x_{ji} - 1\\Big)^2 +A \\Big(\\sum_{i \\in \\delta(0)^+} x_{0i} - K\\Big)^2 + A\\Big(\\sum_{j \\in \\delta(0)^+} x_{j0} - K\\Big)^2"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:129
msgid "where :math:`A` is a big enough parameter."
msgstr "ここで、 :math:`A` は十分に大きいパラメーターです。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:132
msgid "From Hamiltonian to QP formulation"
msgstr "ハミルトニアンからQP定式化へ"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:134
msgid "In the vector :math:`{\\bf z}`, and for a complete graph (:math:`\\delta(i)^+ = \\delta(i)^- = \\{0,1,\\dots,i-1,i+1,\\dots,n\\}`), :math:`H` can be written as follows."
msgstr "ベクトル :math:`{\\bf z}` で、完全グラフ（ :math:`\\delta(i)^+ = \\delta(i)^- = \\{0,1,\\dots,i-1,i+1,\\dots,n\\}` ）の場合、 :math:`H` は次のように記述できます。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:136
msgid "\\min_{{\\bf z}\\in \\{0,1\\}^{n(n+1)}} {\\bf w}^T {\\bf z}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big({\\bf e}_i \\otimes {\\bf 1}_n^T {\\bf z} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big({\\bf v}_i^T {\\bf z} - 1\\Big)^2 + A \\Big(({\\bf e}_0 \\otimes {\\bf 1}_n)^T{\\bf z} - K\\Big)^2 + A\\Big({\\bf v}_0^T{\\bf z} - K\\Big)^2."
msgstr "\\min_{{\\bf z}\\in \\{0,1\\}^{n(n+1)}} {\\bf w}^T {\\bf z}  + A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big({\\bf e}_i \\otimes {\\bf 1}_n^T {\\bf z} - 1\\Big)^2 + A \\sum_{i \\in \\{1,\\dots,n\\}}\\Big({\\bf v}_i^T {\\bf z} - 1\\Big)^2 + A \\Big(({\\bf e}_0 \\otimes {\\bf 1}_n)^T{\\bf z} - K\\Big)^2 + A\\Big({\\bf v}_0^T{\\bf z} - K\\Big)^2."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:141
msgid "That is:"
msgstr "つまり："

#: ../../tutorials/07_examples_vehicle_routing.ipynb:143
msgid "\\min_{\\bf z\\in \\{0,1\\}^{n(n+1)}} \\bf z^T {\\bf Q} \\bf z + {\\bf g}^T \\bf z + c,"
msgstr "\\min_{\\bf z\\in \\{0,1\\}^{n(n+1)}} \\bf z^T {\\bf Q} \\bf z + {\\bf g}^T \\bf z + c,"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:148
msgid "Where: first term:"
msgstr "ここで：最初の項は次の通りです："

#: ../../tutorials/07_examples_vehicle_routing.ipynb:150
msgid "{\\bf Q} = A \\sum_{i \\in \\{0,1,\\dots,n\\}}  \\Big[({\\bf e}_i \\otimes {\\bf 1}_n)({\\bf e}_i \\otimes {\\bf 1}_n)^T + {\\bf v}_i{\\bf v}_i^T \\Big]"
msgstr "{\\bf Q} = A \\sum_{i \\in \\{0,1,\\dots,n\\}}  \\Big[({\\bf e}_i \\otimes {\\bf 1}_n)({\\bf e}_i \\otimes {\\bf 1}_n)^T + {\\bf v}_i{\\bf v}_i^T \\Big]"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:155
msgid "Second term:"
msgstr "第二の項は次の通りです："

#: ../../tutorials/07_examples_vehicle_routing.ipynb:157
msgid "{\\bf g} = {\\bf w} -2 A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big[({\\bf e}_i \\otimes {\\bf 1}_n) + {\\bf v}_i \\Big] -2 A K \\Big[({\\bf e}_0 \\otimes {\\bf 1}_n) + {\\bf v}_0 \\Big]"
msgstr "{\\bf g} = {\\bf w} -2 A \\sum_{i \\in \\{1,\\dots,n\\}} \\Big[({\\bf e}_i \\otimes {\\bf 1}_n) + {\\bf v}_i \\Big] -2 A K \\Big[({\\bf e}_0 \\otimes {\\bf 1}_n) + {\\bf v}_0 \\Big]"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:162
msgid "Third term:"
msgstr "第三の項は次の通りです："

#: ../../tutorials/07_examples_vehicle_routing.ipynb:164
msgid "c = 2An +2AK^2."
msgstr "c = 2An +2AK^2."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:169
msgid "The QP formulation of the Ising Hamiltonian is ready for the use of VQE. We will solve the QP using optimization stack available in Qiskit."
msgstr "イジング・ハミルトニアンのQP定式化はVQEの使用の準備ができています。 Qiskitで利用可能な最適化スタックを使用してQPを解決します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:172
msgid "References"
msgstr "参考文献"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:174
msgid "[1] E. Farhi, J. Goldstone, S. Gutmann e-print arXiv 1411.4028, 2014"
msgstr "[1] E. Farhi, J. Goldstone, S. Gutmann e-print arXiv 1411.4028, 2014"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:176
msgid "[2] `Max-Cut and Traveling Salesman Problem <./06_examples_max_cut_and_tsp.ipynb>`__"
msgstr "[2] `Max-Cut and Traveling Salesman Problem <./06_examples_max_cut_and_tsp.ipynb>`__"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:178
msgid "[3] C. E. Miller, E. W. Tucker, and R. A. Zemlin (1960). “Integer Programming Formulations and Travelling Salesman Problems”. J. ACM. 7: 326–329. doi:10.1145/321043.321046."
msgstr "[3] C. E. Miller, E. W. Tucker, and R. A. Zemlin (1960). “Integer Programming Formulations and Travelling Salesman Problems”. J. ACM. 7: 326–329. doi:10.1145/321043.321046."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:180
msgid "[4] D. L. Applegate, R. M. Bixby, V. Chvátal, and W. J. Cook (2006). The Traveling Salesman Problem. Princeton University Press, ISBN 978-0-691-12993-8."
msgstr "[4] D. L. Applegate, R. M. Bixby, V. Chvátal, and W. J. Cook (2006). The Traveling Salesman Problem. Princeton University Press, ISBN 978-0-691-12993-8."

#: ../../tutorials/07_examples_vehicle_routing.ipynb:192
msgid "Initialization"
msgstr "初期化"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:194
msgid "First of all we load all the packages that we need: - Python 3.6 or greater is required; - CPLEX 12.8 or greater is required for the classical computations; - Latest Qiskit is required for the quantum computations."
msgstr "まず、必要なすべてのパッケージをロードします。 - Python3.6以降が必要です。 - 従来の計算にはCPLEX12.8以上が必要です。 - 量子計算には最新のQiskitが必要です。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:238
msgid "We then initialize the variables"
msgstr "次に、変数を初期化します"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:261
msgid "We define an initializer class that randomly places the nodes in a 2-D plane and computes the distance between them."
msgstr "ノードを2次元平面にランダムに配置し、ノード間の距離を計算する初期化クラスを定義します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:316
msgid "Classical solution using IBM ILOG CPLEX"
msgstr "IBM ILOG CPLEXを使用した古典的なソリューション"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:318
msgid "For a classical solution, we use IBM ILOG CPLEX. CPLEX is able to find the exact solution of this problem. We first define a ClassicalOptimizer class that encodes the problem in a way that CPLEX can solve, and then instantiate the class and solve it."
msgstr "古典的なソリューションでは、IBM ILOGCPLEX を使用します。 CPLEX は、この問題の正確な解決策を見つけることができます。 まず、CPLEX が解決できる方法で問題をエンコードする ClassicalOptimizer クラスを定義し、次にクラスをインスタンス化して解決します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:559
msgid "If you have CPLEX, the solution shows the depot with a star and the selected routes for the vehicles with arrows."
msgstr "CPLEXを使用している場合、ソリューションは星付きのデポと矢印付きの車両に選択されたルートが表示されます。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:571
msgid "Quantum solution from the ground up"
msgstr "ゼロからの量子ソリューション"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:573
msgid "For the quantum solution, we use Qiskit."
msgstr "量子ソリューションには、Qiskitを使用します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:575
msgid "First, we derive the solution from the ground up, using a class QuantumOptimizer that encodes the quantum approach to solve the problem and then we instantiate it and solve it. We define the following methods inside the class:"
msgstr "まず、問題を解決するために量子アプローチをエンコードするクラス QuantumOptimizer を使用して、ゼロからソリューションを導き出し、次にそれをインスタンス化して解決します。 クラス内で次のメソッドを定義します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:577
msgid "``binary_representation`` : encodes the problem :math:`(M)` into a QP terms (that’s basically linear algebra);"
msgstr "``binary_representation`` ：問題 :math:`(M)` をQP項（基本的に線形代数）にエンコードします。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:578
msgid "``construct_problem`` : constructs a QUBO optimization problem as an instance of ``QuadraticProgram``;"
msgstr "``construct_problem`` ： ``QuadraticProgram`` のインスタンスとしてQUBO最適化問題を構築します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:579
msgid "``solve_problem``: solves the problem :math:`(M)` constructed at the previous step via ``MinimunEigenOptimizer`` by using VQE with default parameters;"
msgstr "``solve_problem`` ：デフォルトのパラメーターでVQEを使用することにより、 ``MinimunEigenOptimizer`` を介して前のステップで構築された問題 :math:`(M)` を解決します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:697
msgid "Step 1"
msgstr "ステップ 1"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:699
msgid "Instantiate the quantum optimizer class with parameters:"
msgstr "パラメーターを使用して量子オプティマイザークラスをインスタンス化します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:701
msgid "the instance;"
msgstr "インスタンス。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:702
msgid "the number of nodes and vehicles ``n`` and ``K``;"
msgstr "ノードと車両の数 ``n`` と ``K`` 。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:725
msgid "Step 2"
msgstr "ステップ２"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:727
msgid "Encode the problem as a binary formulation (IH-QP)."
msgstr "問題をバイナリー形式（IH-QP）としてエンコードします。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:729
msgid "Sanity check: make sure that the binary formulation in the quantum optimizer is correct (i.e., yields the same cost given the same solution)."
msgstr "整合性チェック: quantum optimizer 内のバイナリー定式化が正しいことを確認してください (つまり、同じ解で同じコストが得られることを確認します)。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:793
msgid "Step 3"
msgstr "ステップ３"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:795
msgid "Encode the problem as an instance of ``QuadraticProgram``."
msgstr "``QuadraticProgram`` のインスタンスとして問題をエンコードします。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:817
msgid "Step 4"
msgstr "ステップ 4"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:819
msgid "Solve the problem via ``MinimumEigenOptimizer`` from the optimization stack. N.B. Depending on the number of qubits, the state-vector simulation can take a while; for example with 12 qubits, it takes more than 12 hours. Logging is useful to see what the program is doing."
msgstr "最適化スタックから ``MinimumEigenOptimizer`` を介して問題を解決します。 注意： 量子ビットの数によっては、状態ベクトル・シミュレーションに時間がかかる場合があります。 たとえば、12量子ビットの場合、12時間以上かかります。 ロギングは、プログラムが何をしているかを確認するのに役立ちます。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:867
msgid "Step 5"
msgstr "ステップ5"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:869
msgid "Visualize the solution"
msgstr "ソリューションの視覚化"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:921
msgid "The plots present the depot with a star and the selected routes for the vehicles with arrows. Note that in this particular case, we can find the optimal solution of the QP formulation, which happens to coincide with the optimal solution of the ILP."
msgstr "プロットには、デポに星が表示され、車両用に選択されたルートが矢印で表示されます。 この特定のケースでは、QP定式化の最適解を見つけることができます。これはたまたまILPの最適解と一致します。"

#: ../../tutorials/07_examples_vehicle_routing.ipynb:923
msgid "Keep in mind that VQE is an heuristic working on the QP formulation of the Ising Hamiltonian, though. For suitable choices of A, local optima of the QP formulation will be feasible solutions to the ILP. While for some small instances, as above, we can find optimal solutions of the QP formulation which coincide with optima of the ILP, finding optimal solutions of the ILP is harder than finding local optima of the QP formulation, in general, which in turn is harder than finding feasible solutions of the ILP. Even within the VQE, one may provide stronger guarantees, for specific variational forms (trial wave functions)."
msgstr "ただし、VQEはイジングハミルトニアンのQP定式化にヒューリスティックに取り組んでいることに注意してください。 Aの適切な選択については、QP定式化の局所最適点がILPの実行可能解になります。 上記のような小さな例では、ILPの最適化と一致するQP定式化の最適解を見つけることができますが、ILPの最適解を見つけることは、QP定式化の局所最適を見つけることよりも困難で、一般的にILP実現可能な解を見つけるよりも難しいです。 VQE内でも、特定の変分形式（試行波動関数）に対してより強力な保証を提供する場合があります。"

