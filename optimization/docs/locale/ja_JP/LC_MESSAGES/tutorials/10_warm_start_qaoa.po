msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-14 15:08+0000\n"
"PO-Revision-Date: 2022-03-16 08:19\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/optimization/docs/locale/en/LC_MESSAGES/tutorials/10_warm_start_qaoa.po\n"
"X-Crowdin-File-ID: 9660\n"
"Language: ja_JP\n"

#: ../../tutorials/10_warm_start_qaoa.ipynb:9
msgid "This page was generated from `docs/tutorials/10_warm_start_qaoa.ipynb`__."
msgstr "このページは `docs/tutorials/10_warm_start_qaoa.ipynb`__ から生成されました。"

#: ../../tutorials/10_warm_start_qaoa.ipynb:9
msgid "Warm-starting quantum optimization"
msgstr "ウォーム・スタート・量子最適化"

#: ../../tutorials/10_warm_start_qaoa.ipynb:12
msgid "Introduction"
msgstr "はじめに"

#: ../../tutorials/10_warm_start_qaoa.ipynb:14
msgid "Optimization problems with integer variables or constraints are often hard to solve. For example, the Quadratic Unconstrained Binary Optimization (QUBO) problem, i.e."
msgstr "整数変数や制約による最適化問題は、しばしば解くのが困難です。例えば、制約なし二次形式二値変数最適化(QUBO)問題 、すなわち"

#: ../../tutorials/10_warm_start_qaoa.ipynb:16
msgid ":nbsphinx-math:`\\begin{align} \\min_{x\\in\\{0,1\\}^n}x^T\\Sigma x + \\mu^Tx, \\end{align}`"
msgstr ":nbsphinx-math:`\\begin{align} \\min_{x\\in\\{0,1\\}^n}x^T\\Sigma x + \\mu^Tx, \\end{align}`"

#: ../../tutorials/10_warm_start_qaoa.ipynb:20
msgid "is NP-Hard. Here, :math:`\\Sigma` is an :math:`n\\times n` matrix and :math:`x` is a vector of :math:`n` binary variables. Note that we could have added the linear term :math:`\\mu` to the diagonal as :math:`x_i^2=x_i` for :math:`x_i\\in\\{0, 1\\}`. While QUBOs are hard to solve there exists many ways to relax them to problems that are easier to solve. For example, if :math:`\\Sigma` is semi-definite positive the QUBO can be relaxed and results in a convex Quadratic Program"
msgstr "は NP-Hard です。ここで、:math:`\\Sigma` は :math:`n\\times n` 行列で :math:`x` は :math:`n` 次のバイナリー値のベクトルです。ここで :math:`x_i^2=x_i` for :math:`x_i\\in\\{0, 1\\}` なので対角成分に線形項 :math:`\\mu` を加えても良いことに注意してください。QUBO は解くのが難しいですが、解きやすい問題に緩和するたくさんの方法があります。例えば、もし :math:`\\Sigma` が半正定値ならば QUBO は凸二次最適化問題に帰着します。"

#: ../../tutorials/10_warm_start_qaoa.ipynb:22
msgid ":nbsphinx-math:`\\begin{align} \\min_{x\\in[0,1]^n}x^T\\Sigma x, \\end{align}`"
msgstr ":nbsphinx-math:`\\begin{align} \\min_{x\\in[0,1]^n}x^T\\Sigma x, \\end{align}`"

#: ../../tutorials/10_warm_start_qaoa.ipynb:26
msgid "which becomes easy to solve as :math:`x` now represents :math:`n` continuous variables bound to the range :math:`[0, 1]`. Such relaxations can be leveraged to warm-start quantum optimization algorithms as shown in [1]."
msgstr "これは :math:`x` で簡単に解けるようになりました。ここで :math:`n` は :math:`[0, 1]` の範囲の連続変数です。このような緩和は [1] にあるように、ウォーム・スタート量子最適化問題に活用できます。"

#: ../../tutorials/10_warm_start_qaoa.ipynb:29
msgid "References"
msgstr "参考文献"

#: ../../tutorials/10_warm_start_qaoa.ipynb:31
msgid "[1] `D. J. Egger, J Marecek, S. Woerner, Warm-starting quantum optimization, arXiv:2009.10095 <http://arxiv.org/abs/2009.10095>`__"
msgstr "[1] `D. J. Egger, J Marecek, S. Woerner, Warm-starting quantum optimization, arXiv:2009.10095 <http://arxiv.org/abs/2009.10095>`__"

#: ../../tutorials/10_warm_start_qaoa.ipynb:68
msgid "Preliminaries: relaxing QUBOs"
msgstr "準備：QUBO の緩和"

#: ../../tutorials/10_warm_start_qaoa.ipynb:70
msgid "First, we show how to relax a QUBO built with a semi-definite positive matrix to obtain an easy-to-solve QP."
msgstr "まず、半確定正の行列で構築された QUBO をリラックスして、解決しやすい QP を実現する方法を説明します。"

#: ../../tutorials/10_warm_start_qaoa.ipynb:115
msgid "For this example, we use a positive semi-definite matrix :math:`\\Sigma` and a linear term :math:`\\mu` as defined below."
msgstr "この例では、以下に定義する半正定値行列 :math:`\\Sigma` と線形項 :math:`\\mu` を使用します。"

#: ../../tutorials/10_warm_start_qaoa.ipynb:146
msgid "Using DOCPLEX we build a model with binary variables."
msgstr "DOCPLEXを使用して、バイナリ変数のモデルを構築します。"

#: ../../tutorials/10_warm_start_qaoa.ipynb:273
msgid "Such binary problems are hard to deal with but can be solved if the problem instance is small enough. Our example above has as solution"
msgstr "このようなバイナリー問題は扱いにくいですが、問題のインスタンスが十分に小さい場合は解くことができます。上記の例では次の解を持ちます。"

#: ../../tutorials/10_warm_start_qaoa.ipynb:324
msgid "We can create a relaxation of this problem in which the variables are no longer binary. Note that we use the ``QuadraticProgramToQubo`` converter to convert the constraint into a quadratic penalty term. We do this to remain consistent with the steps that the Qiskit optimization module applies internally."
msgstr "この問題は変数がもはやバイナリーではない問題に緩和することができます。制約を2次ペナルティ項に変換するために、``QuadraticProgramToQubo`` コンバーターを使用することに注意してください。Qiskit 最適化モジュールが内部的に適用するステップと整合性を保つためにこれを行います。"

#: ../../tutorials/10_warm_start_qaoa.ipynb:442
msgid "The solution of this continuous relaxation is different from the solution to the binary problem but can be used to warm-start a solver when dealing with the binary problem."
msgstr "この連続的な緩和の解はバイナリー問題の解と異なりますが、バイナリー問題を扱う限りソルバーをウォーム・スタートするために使用することができます。"

#: ../../tutorials/10_warm_start_qaoa.ipynb:548
msgid "QAOA"
msgstr "QAOA"

#: ../../tutorials/10_warm_start_qaoa.ipynb:550
msgid "Here, we illustrate how to warm-start the quantum approximate optimization algorithm (QAOA) by leveraging the relaxed problem shown above."
msgstr "ここでは、上記の緩和された問題を活用することにより、量子近似最適化アルゴリズム ( QAOA) をウォーム・スタートする方法を説明します。"

#: ../../tutorials/10_warm_start_qaoa.ipynb:553
msgid "Standard QAOA"
msgstr "標準的な QAOA"

#: ../../tutorials/10_warm_start_qaoa.ipynb:555
msgid "First, we use standard QAOA to solve the QUBO. To do this, we convert the QUBO to Qiskit’s QuadraticProgram class (note that the resulting problem is still a binary problem)."
msgstr "まず標準の QAOA を使用して、QUBOを解きます。これを行うために、QUBO を Qiskit の QuadraticProgram クラスに変換します (結果として生じる問題は依然としてバイナリー問題であることに注意してください) 。"

#: ../../tutorials/10_warm_start_qaoa.ipynb:634
#: ../../tutorials/10_warm_start_qaoa.ipynb:942
msgid "Warm-start QAOA"
msgstr "ウォーム・スタート QAOA"

#: ../../tutorials/10_warm_start_qaoa.ipynb:636
msgid "Next, we compare this result to a warm-start QAOA in which we use the solution to the continuous relaxation of the problem. First, we create the initial state"
msgstr "次に、この結果をウォーム・スタート QAOA と比較します。この QAOA には連続的な緩和を行った問題の解を使います。最初に、初期状態を作成します。"

#: ../../tutorials/10_warm_start_qaoa.ipynb:638
msgid ":nbsphinx-math:`\\begin{align} |\\phi^*\\rangle=\\bigotimes_{i=0}^{n-1}R_y(\\theta_i)|0\\rangle_n . \\end{align}`"
msgstr ":nbsphinx-math:`\\begin{align} |\\phi^*\\rangle=\\bigotimes_{i=0}^{n-1}R_y(\\theta_i)|0\\rangle_n . \\end{align}`"

#: ../../tutorials/10_warm_start_qaoa.ipynb:642
msgid "which is given by applying :math:`R_y` rotations with an angle :math:`\\theta=2\\arcsin(\\sqrt{c^*_i})` that depends on the solution to the relaxed problem. Here, :math:`c^*_i` the value of variable :math:`i` of the relaxed problem."
msgstr "これは :math:`R_y` 回転を角 :math:`\\theta=2\\arcsin(\\sqrt{c^*_i})` で適用することで与えられます。この角は緩和した問題の解に依存します。ここで :math:`c^*_i` は緩和した問題の変数 :math:`i` の値です。"

#: ../../tutorials/10_warm_start_qaoa.ipynb:680
msgid "Next, we create the mixer operator for QAOA. When warm-starting QAOA we must ensure that the mixer operator has the initial state as ground state. We therefore chose the Hamiltonian"
msgstr "次に QAOA のミキサー演算子を作成します。ウォーム・スタート QAOA では、ミキサー演算子の初期状態が基底状態になっていることを確認する必要があります。そのため次のハミルトニアンを選びます"

#: ../../tutorials/10_warm_start_qaoa.ipynb:682
msgid ":nbsphinx-math:`\\begin{align} H_{M,i}^{(ws)}= \\begin{pmatrix} 2c_i^*-1 & -2\\sqrt{c_i^*(1-c_i^*)} \\\\ -2\\sqrt{c_i^*(1-c_i^*)} & 1-2c_i^* \\end{pmatrix} \\end{align}`"
msgstr ":nbsphinx-math:`\\begin{align} H_{M,i}^{(ws)}= \\begin{pmatrix} 2c_i^*-1 & -2\\sqrt{c_i^*(1-c_i^*)} \\\\ -2\\sqrt{c_i^*(1-c_i^*)} & 1-2c_i^* \\end{pmatrix} \\end{align}`"

#: ../../tutorials/10_warm_start_qaoa.ipynb:690
msgid "as mixer operator for qubit :math:`i`. Once multiplied by :math:`-i\\beta` and exponentiated this mixer produces the following mixer circuit."
msgstr "これは量子ビット :math:`i` のミキサー演算子のハミルトニアンです。 :math:`-i\\beta` を乗じ指数をとると、このミキサーは次のミキサー回路を生成します。"

#: ../../tutorials/10_warm_start_qaoa.ipynb:730
msgid "The initial state and mixer operator can then be passed to QAOA."
msgstr "こうして初期状態とミキサー演算子は QAOA に渡すことができます。"

#: ../../tutorials/10_warm_start_qaoa.ipynb:807
msgid "Analysis"
msgstr "分析"

#: ../../tutorials/10_warm_start_qaoa.ipynb:809
msgid "Both results appear to give the same result. However, when we look at the underlying probability distribution we observe that the warm-start QAOA has a much higher probability of sampling the optimal solution."
msgstr "どちらの結果も同じ結果を与えます。しかし、基礎となる確率分布を観察すると、ウォーム・スタート QAOA は最適なソリューションをサンプリングする確率が高くなることが観察されます。"

#: ../../tutorials/10_warm_start_qaoa.ipynb:944
msgid "The warm-start features above are available in the Qiskit optimization module as a single optimizer named ``WarmStartQAOAOptimizer`` which is illustrated below. This solver will solve a QUBO with a warm-start QAOA. It computes :math:`c^*` by relaxing the problem. This behavior is controlled by setting ``relax_for_pre_solver`` to ``True``."
msgstr "上記の warm-start 機能は、下にある ``WarmStartQAOAOptimizer`` という名前の単一のオプティマイザーとして、Qiskit 最適化モジュールで利用可能です。このソルバーはウォーム・スタート QAOA で QUBO を解きます。それは問題を緩和することによって :math:`c^*` を計算します。この動作は ``relax_for_pre_solver`` を ``True`` に設定することで制御できます。"

