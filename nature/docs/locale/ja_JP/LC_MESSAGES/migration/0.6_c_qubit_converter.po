msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-01 15:27+0000\n"
"PO-Revision-Date: 2023-08-14 19:51\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /main/nature/docs/locale/en/LC_MESSAGES/migration/0.6_c_qubit_converter.po\n"
"X-Crowdin-File-ID: 9989\n"

#: ../../migration/0.6_c_qubit_converter.rst:2
msgid "The QubitConverter Migration Guide"
msgstr "QubitConverter 移行ガイド"

#: ../../migration/0.6_c_qubit_converter.rst:4
msgid "The :class:`~qiskit_nature.second_q.mappers.QubitConverter` class has been deprecated as part of version 0.6 of Qiskit Nature. Instead of wrapping this class around one of the available :class:`~qiskit_nature.second_q.mappers.QubitMapper` classes, the latter can now instead be used directly. To support this, the mappers have been improved and now ship with more advanced functionality out of the box."
msgstr ":class:`~qiskit_nature.second_q.mappers.QubitConverter` クラスは、Qiskit Nature バージョン 0.6で非推奨になりました。 :class:`~qiskit_nature.second_q.mappers.QubitMapper` クラスをラップする代わりに、このクラスを直接使用できるようになります。 これをサポートするために、マッパーが改良され、さらなる拡張機能が使用できるようになっています。"

#: ../../migration/0.6_c_qubit_converter.rst:10
msgid "To keep this guide simple, we will focus on examples on how to replace specific use cases of the :class:`~qiskit_nature.second_q.mappers.QubitConverter`. For more details on the mappers we suggest you check out the `tutorial on qubit mappers <../tutorials/06_qubit_mappers.ipynb>`_."
msgstr "このガイドをシンプルにするために、:class:`~qiskit_nature.second_q.mappers.QubitConverter` の特定のユースケースを置き換える方法例に焦点を当てます。 マッパーの詳細については、 `量子ビット・マッパーのチュートリアル <../tutorials/06_qubit_mappers.ipynb>`_ を参照してください。"

#: ../../migration/0.6_c_qubit_converter.rst:15
msgid "Setup"
msgstr "セットアップ"

#: ../../migration/0.6_c_qubit_converter.rst:17
msgid "For the examples in this guide, we will always be using the following :class:`~qiskit_nature.second_q.operators.FermionicOp`:"
msgstr "このガイドの例では、常に次の :class:`~qiskit_nature.second_q.operators.FermionicOp` を使用します。"

#: ../../migration/0.6_c_qubit_converter.rst:72
msgid "PauliSumOp vs. SparsePauliOp"
msgstr "PauliSumOp 対 SparsePauliOp"

#: ../../migration/0.6_c_qubit_converter.rst:74
msgid "One more note: the :mod:`qiskit.opflow` module is going to be deprecated in the future. In order to transition from the :class:`~qiskit.opflow.primitive_ops.PauliSumOp` class and its widespread use to the :mod:`qiskit.quantum_info` module and its :class:`~qiskit.quantum_info.SparsePauliOp` class, you can now set the value of :attr:`~qiskit_nature.settings.QiskitNatureSettings.use_pauli_sum_op` to ``False``. This will become the default in a later release."
msgstr "もう 1 つの注記 : :mod:`qiskit.opflow` モジュールは、将来非推奨になる予定です。 :class:`~qiskit.opflow.primitive_ops.PauliSumOp` クラスと、広範囲に使用されている :mod:`qiskit.quantum_info` モジュールと :class:`~qiskit.quantum_info.SparsePauliOp` から移行するために、 :attr:`~qiskit_nature.settings.QiskitNatureSettings.use_pauli_sum_op` の値を ``False`` に設定することができます。 これは後のリリースではデフォルトになる予定です。"

#: ../../migration/0.6_c_qubit_converter.rst:80
msgid "To ensure that we can consistently rely on using the :class:`~qiskit.quantum_info.SparsePauliOp` in the following parts of this guide, we are applying this setting here:"
msgstr ":class:`~qiskit.quantum_info.SparsePauliOp` をこのガイドの以降の部分で一貫して使用できるようにするために、以下の設定を適用します:"

#: ../../migration/0.6_c_qubit_converter.rst:89
msgid "As a consequence of this upcoming deprecation, Qiskit Nature now fully supports the use :class:`~qiskit.quantum_info.SparsePauliOp` instances in all places which previously allowed :class:`~qiskit.opflow.primitive_ops.PauliSumOp` objects. In order to leverage this, it is **not** required to change the setting above. Thus, it is recommended that you switch to using :class:`~qiskit.quantum_info.SparsePauliOp`."
msgstr "今後非推奨となるため、Qiskit Natureは以前 :class:`~qiskit.opflow.primitive_ops.PauliSumOp` オブジェクトが許されていたすべての場所で :class:`~qiskit.quantum_info.SparsePauliOp` インスタンスの使用をサポートしています。これを活用するため、上記の設定を変えることは必要では **ありません** 。 :class:`~qiskit.quantum_info.SparsePauliOp` を使うよう変更することを推奨しています。"

#: ../../migration/0.6_c_qubit_converter.rst:95
msgid "For more in-depth information about the :mod:`qiskit.opflow` deprecation please refer to its `migration guide`_."
msgstr ":mod:`qiskit.opflow` 非推奨の詳細については、 `マイグレーション・ガイド`_ を参照してください。"

#: ../../migration/0.6_c_qubit_converter.rst:99
msgid "Simplest cases"
msgstr "最も簡単なケース"

#: ../../migration/0.6_c_qubit_converter.rst:101
msgid "In the simplest cases, all you did was pass a :class:`~qiskit_nature.second_q.mappers.QubitMapper` object into the :class:`~qiskit_nature.second_q.mappers.QubitConverter`. For example, somewhat like this:"
msgstr "最も簡単なケースでは、 :class:`~qiskit_nature.second_q.mappers.QubitMapper` オブジェクトを :class:`~qiskit_nature.second_q.mappers.QubitConverter` に渡しました。例えば、次のようになります。"

#: ../../migration/0.6_c_qubit_converter.rst:112
msgid "All you need to do in order to update your code, is stop doing that and simply pass the ``mapper`` object from the example above into whichever place you were using it before."
msgstr "コードを更新するために必要なことは、それをやめ、単に上記の例の ``mapper`` オブジェクトを以前使用していたどちらかの場所に渡すことです。"

#: ../../migration/0.6_c_qubit_converter.rst:115
msgid "If you were working directly with some :class:`~qiskit_nature.second_q.operators.SparseLabelOp` like so:"
msgstr ":class:`~qiskit_nature.second_q.operators.SparseLabelOp` を直接使用している場合は以下のようにします："

#: ../../migration/0.6_c_qubit_converter.rst:143
msgid "You should now directly use the ``mapper`` again, but its method is called ``.map``:"
msgstr "ここでもう一度 ``mapper`` を使用する必要がありますが、そのメソッドは ``.map`` と呼ばれます。"

#: ../../migration/0.6_c_qubit_converter.rst:170
msgid "This is likely what you were doing when you were working with any of the following mappers:"
msgstr "これは、以下のマッパーのいずれかを使用して作業していたときに、実行していたことです。"

#: ../../migration/0.6_c_qubit_converter.rst:172
msgid ":class:`~qiskit_nature.second_q.mappers.JordanWignerMapper`"
msgstr ":class:`~qiskit_nature.second_q.mappers.JordanWignerMapper`"

#: ../../migration/0.6_c_qubit_converter.rst:173
msgid ":class:`~qiskit_nature.second_q.mappers.BravyiKitaevMapper`"
msgstr ":class:`~qiskit_nature.second_q.mappers.BravyiKitaevMapper`"

#: ../../migration/0.6_c_qubit_converter.rst:174
msgid ":class:`~qiskit_nature.second_q.mappers.BravyiKitaevSuperFastMapper`"
msgstr ":class:`~qiskit_nature.second_q.mappers.BravyiKitaevSuperFastMapper`"

#: ../../migration/0.6_c_qubit_converter.rst:175
msgid ":class:`~qiskit_nature.second_q.mappers.DirectMapper`"
msgstr ":class:`~qiskit_nature.second_q.mappers.DirectMapper`"

#: ../../migration/0.6_c_qubit_converter.rst:176
msgid ":class:`~qiskit_nature.second_q.mappers.LinearMapper`"
msgstr ":class:`~qiskit_nature.second_q.mappers.LinearMapper`"

#: ../../migration/0.6_c_qubit_converter.rst:177
msgid ":class:`~qiskit_nature.second_q.mappers.LogarithmicMapper`"
msgstr ":class:`~qiskit_nature.second_q.mappers.LogarithmicMapper`"

#: ../../migration/0.6_c_qubit_converter.rst:180
msgid "The ParityMapper"
msgstr "パリティ・マッピング"

#: ../../migration/0.6_c_qubit_converter.rst:182
msgid "However, when you were using the :class:`~qiskit_nature.second_q.mappers.ParityMapper`, you were able to use the ``two_qubit_reduction=True`` option of the :class:`~qiskit_nature.second_q.mappers.QubitConverter`. This ability, which has always been unique to the :class:`~qiskit_nature.second_q.mappers.ParityMapper`, is now directly built into said mapper. So if you were doing something along these lines:"
msgstr "しかし、 :class:`~qiskit_nature.second_q.mappers.ParityMapper` を使用している場合は、 :class:`~qiskit_nature.second_q.mappers.QubitConverter` の ``two_qubit_reduction=True`` オプションを使用することができました。 :class:`~qiskit_nature.second_q.mappers.ParityMapper` にユニークなこの機能は、現在直接マッパーに組み込まれています。 もしあなたがこれらの方法に沿って何かをしている場合は："

#: ../../migration/0.6_c_qubit_converter.rst:207
msgid "The equivalent code now looks like the following:"
msgstr "同等のコードは次のようになります。"

#: ../../migration/0.6_c_qubit_converter.rst:227
msgid "Z2Symmetries"
msgstr "Z2Symmetries"

#: ../../migration/0.6_c_qubit_converter.rst:229
msgid "Finally, the :class:`~qiskit_nature.second_q.mappers.QubitConverter` class also supported further reduction of qubit resources by exploiting the :class:`~qiskit.opflow.primitive_ops.Z2Symmetries` implemented in the :mod:`qiskit.opflow` module. Although we did extend the deprecated class to also support the updated implementation in the :mod:`qiskit.quantum_info` module (which has the same name: :class:`~qiskit.quantum_info.analysis.z2_symmetries.Z2Symmetries`), you should now use the new :class:`~qiskit_nature.second_q.mappers.TaperedQubitMapper` instead."
msgstr "ついに :class:`~qiskit_nature.second_q.mappers.QubitConverter` クラスも、 :mod:`qiskit.opflow` モジュール内に実装された :class:`~qiskit.opflow.primitive_ops.Z2Symmetries` を利用することで、量子ビット・リソースのさらなる削減をサポートしました。 :mod:`qiskit.quantum_info` モジュール ( :class:`~qiskit.quantum_info.analysis.z2_symmetries.Z2Symmetries` と同じ名前を持ちます) の更新された実装をサポートするため非推奨クラスを拡張しましたが、今は新しい :class:`~qiskit_nature.second_q.mappers.TaperedQubitMapper` クラスを代わりに使用すべきです。"

#: ../../migration/0.6_c_qubit_converter.rst:236
msgid "In the past, you would have enabled this like so:"
msgstr "以前は、以下のように有効化にしていました："

#: ../../migration/0.6_c_qubit_converter.rst:243
msgid "which would then later use :meth:`~qiskit_nature.second_q.problems.BaseProblem.symmetry_sector_locator` to find the symmetry sector of the Hilbert space in which the solution of your problem lies. This was only supported by the :class:`~qiskit_nature.second_q.problems.ElectronicStructureProblem`. Below is a quick example:"
msgstr "後に :meth:`~qiskit_nature.second_q.problems.BaseProblem.symmetry_sector_locator`を使用して、問題の解があるヒルベルト空間の対称性セクターを見つけます。 これは、 :class:`~qiskit_nature.second_q.problems.ElectronicStructureProblem` クラスでのみサポートされています。以下に、簡単な例を示します："

#: ../../migration/0.6_c_qubit_converter.rst:265
msgid "Now, all you need to do is the use the :meth:`~qiskit_nature.second_q.problems.BaseProblem.get_tapered_mapper` method and provide the original mapper which you would like to wrap:"
msgstr "次に必要なのは、 :meth:`~qiskit_nature.second_q.problems.BaseProblem.get_tapered_mapper` メソッドを使用し、ラップしたい元のマッパーを提供することだけです："

#: ../../migration/0.6_c_qubit_converter.rst:284
msgid "If you were not using the automatic symmetry detection but instead provided a custom symmetry sector, you can construct your :class:`~qiskit_nature.second_q.mappers.TaperedQubitMapper` instance directly. Be sure to check out its documentation for more details."
msgstr "自動対称性検出を使用しておらず、代わりにカスタム対称性セクターを指定した場合は、 :class:`~qiskit_nature.second_q.mappers.TaperedQubitMapper` をインスタンスを直接構築できます。 詳細については、必ずそのドキュメンテーションを確認してください。"

