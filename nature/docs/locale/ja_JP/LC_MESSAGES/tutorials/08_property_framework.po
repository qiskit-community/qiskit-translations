msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-09 14:51+0000\n"
"PO-Revision-Date: 2021-09-21 14:31\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/08_property_framework.po\n"
"X-Crowdin-File-ID: 9711\n"
"Language: ja_JP\n"

#: ../../tutorials/08_property_framework.ipynb:9
msgid "This page was generated from `docs/tutorials/08_property_framework.ipynb`__."
msgstr "このページは `docs/tutorials/08_property_framework.ipynb`__ から生成されました。"

#: ../../tutorials/08_property_framework.ipynb:9
msgid "The Property Framework"
msgstr "プロパティ・フレームワーク"

#: ../../tutorials/08_property_framework.ipynb:30
msgid "Qiskit Nature 0.2.0 introduces the *Property* framework. This framework replaces the legacy driver return types like ``QMolecule`` and ``WatsonHamiltonian`` with a more modular and extensible approach."
msgstr "Qiskit Nature 0.2.0 は *プロパティ* ・フレームワークを導入します。 このフレームワークは、``QMolecule`` や ``WatsonHamiltonian`` のような従来のドライバーの戻り値の型を、よりモジュール化された拡張可能なアプローチに置き換えます。"

#: ../../tutorials/08_property_framework.ipynb:41
msgid "In this tutorial, we will walk through the framework, explain its most important components and show you, how you can extend it with a custom *property* yourself."
msgstr "このチュートリアルでは、フレームワークについて説明し、その最も重要なコンポーネントを紹介します。 そしてあなた自身でカスタム・ *プロパティ* で拡張する方法をお見せします。"

#: ../../tutorials/08_property_framework.ipynb:53
msgid "What is a ``Property``?"
msgstr "``Property`` とは何か?"

#: ../../tutorials/08_property_framework.ipynb:64
msgid "At its core, a ``Property`` is an object complementing some raw data with functions that allow you to transform/manipulate/interpret this raw data. This “definition” is kept rather abstract on purpose, but what it means is essentially the following. A ``Property``:"
msgstr "``Property`` は生データを補完するオブジェクトで、変換/操作/解釈する機能があります。この \"定義\" は意図的に抽象的ですが、その意味は基本的に次のようになっています。``Property`` は:"

#: ../../tutorials/08_property_framework.ipynb:66
msgid "represents a physical observable (that’s the raw data)"
msgstr "物理的な観測可能量を表す (生データ)"

#: ../../tutorials/08_property_framework.ipynb:67
msgid "can be expressed as an operator"
msgstr "演算子として表現できる"

#: ../../tutorials/08_property_framework.ipynb:68
msgid "can be evaluated with a wavefunction"
msgstr "波動関数で評価できる"

#: ../../tutorials/08_property_framework.ipynb:69
msgid "provides an ``interpret`` method which gives meaning to the eigenvalue of the evaluated qubit operator"
msgstr "評価された量子ビット演算子の固有値に意味を与える ``interpret`` メソッドを提供する"

#: ../../tutorials/08_property_framework.ipynb:90
msgid "The ``qiskit_nature.properties`` module provides two classes:"
msgstr "``qiskit_nature.properties`` モジュールは２つのクラスを提供します："

#: ../../tutorials/08_property_framework.ipynb:92
msgid "``Property``: this is the basic interface. It requires only a ``name`` and an ``interpret`` method to be implemented."
msgstr "``Property``: 基本インターフェースです。``name`` と ``interpret`` メソッドが実装されることを要求します。"

#: ../../tutorials/08_property_framework.ipynb:93
msgid "``GroupedProperty``: this class is an implementation of the `Composite pattern <https://en.wikipedia.org/wiki/Composite_pattern>`__ which allows you to *group* multiple properties into one."
msgstr "``GroupedProperty``: 複数のプロパティを一つの *グループ* にする `Composite pattern <https://en.wikipedia.org/wiki/Composite_pattern>`__ の実装クラスです。"

#: ../../tutorials/08_property_framework.ipynb:95
msgid "**Note:** Grouped properties must have unique ``name`` attributes!"
msgstr "** 注: ** グループ化されたプロパティは一意の ``name`` 属性を持つ必要があります!"

#: ../../tutorials/08_property_framework.ipynb:107
msgid "Second Quantization Properties"
msgstr "第二量子化プロパティ"

#: ../../tutorials/08_property_framework.ipynb:118
msgid "At the time of writing, Qiskit Nature ships with a single variant of properties: the ``SecondQuantizedProperty`` objects."
msgstr "執筆時点で Qiskit Nature は、一種類のプロパティ ``SecondQuantizedProperty`` オブジェクトを提供しています。"

#: ../../tutorials/08_property_framework.ipynb:120
msgid "This sub-type adds one additional requirement because any ``SecondQuantizedProperty``"
msgstr "このサブタイプは１つの追加要件があります。それは ``SecondQuantizedProperty`` は"

#: ../../tutorials/08_property_framework.ipynb:122
msgid "**must** implement a ``second_q_ops`` method which constructs a (list of) ``SecondQuantizedOp``\\ s."
msgstr "``SecondQuantizedOp`` (のリスト) を構築する ``second_q_ops`` メソッドを実装 **しなければなりません**"

#: ../../tutorials/08_property_framework.ipynb:133
msgid "The ``qiskit_nature.properties.second_quantization`` module is further divided into ``electronic`` and ``vibrational`` modules (similar to other modules of Qiskit Nature). Let us dive into the ``electronic`` sub-module first."
msgstr "``qiskit_nature.properties.second_quantization`` メソッドは、 (Qiskit Nature のモジュールと同様に)さらに ``electronic`` と ``vibrational`` モジュールへ分割されます。まずは ``electronic`` サブモジュールを見てみましょう。"

#: ../../tutorials/08_property_framework.ipynb:145
msgid "Electronic Second Quantization Properties"
msgstr "電子の第二量子化プロパティ"

#: ../../tutorials/08_property_framework.ipynb:156
msgid "Out-of-the-box Qiskit Nature ships the following electronic properties:"
msgstr "Qiskit Nature はすぐに使える次の電子プロパティを持っています："

#: ../../tutorials/08_property_framework.ipynb:205
msgid "``ElectronicEnergy`` is arguably the most important property because it contains the *Hamiltonian* representing the electronic structure problem whose eigenvalues we are interested in when solving an ``ElectronicStructureProblem``. The way in which it stores this Hamiltonian is, just like the rest of the framework, highly modular. The initializer of the ``ElectronicEnergy`` has a single required argument, ``electronic_integrals``, which is a ``List[ElectronicIntegrals]``."
msgstr "``ElectronicEnergy`` はほぼ間違いなく最も重要なプロパティです。なぜならそれは ``ElectronicStructureProblem`` を解く時に興味がある固有値を持った、電子構造問題の *ハミルトニアン* を含んでいるからです。このハミルトニアンを保有する方法も、他のフレームワークと同様に、高度にモジュール化されています。``ElectronicEnergy`` の初期化処理に必要な引数は ``electronic_integrals`` だけで、これは ``List[ElectronicIntegrals]`` です。"

#: ../../tutorials/08_property_framework.ipynb:217
msgid "ElectronicIntegrals"
msgstr "ElectronicIntegrals"

#: ../../tutorials/08_property_framework.ipynb:243
msgid "The ``ElectronicIntegrals`` are a container class for *n-body* interactions in a given basis, which can be any of the following:"
msgstr "``ElectronicIntegrals`` は所与の基底での *n体* 相互作用のコンテナクラスです。以下のようになります。"

#: ../../tutorials/08_property_framework.ipynb:298
msgid "Let us take the ``OneBodyElectronicIntegrals`` as an example. As the name suggests, this container is for 1-body interaction integrals. You can construct an instance of it like so:"
msgstr "``OneBodyElectronicIntegrals`` を例に取りましょう。名前が示唆するように、このコンテナは 1 体の相互作用積分です。このインスタンスの構築は次の通りです："

#: ../../tutorials/08_property_framework.ipynb:361
msgid "As you can see, the first argument simply specifies the basis of the integrals. The second argument requires a little further explanation:"
msgstr "ご覧の通り、最初の引数は単に積分の基底を指定するだけです。第二引数は少し説明が必要です："

#: ../../tutorials/08_property_framework.ipynb:363
msgid "In the case of the ``AO`` or ``MO`` basis, this argument **must** be a pair of numpy arrays, where the first and second one are the alpha- and beta-spin integrals, respectively."
msgstr "``AO`` または ``MO`` 基底の場合、この引数は α と β スピン積分の numpy 配列のペアで **なければ** なりません。"

#: ../../tutorials/08_property_framework.ipynb:365
msgid "**Note:** The second argument may be ``None``, for the case where the beta-spin integrals are the same as the alpha-spin integrals (so there is no need to provide the same values twice)."
msgstr "**注記：** 第二引数は β スピン積分が α スピン積分と同じ場合 ``None`` にすることができます(つまり同じ値を二度指定する必要はありません)。"

#: ../../tutorials/08_property_framework.ipynb:367
msgid "In the case of the ``SO`` basis, this argument **must** be a single numpy array, storing the alpha- and beta-spin integrals in blocked order, i.e. like so:"
msgstr "``SO`` 基底の場合、この引数は α と β スピン積分を決まった順序で保持した、単一の numpy 配列で **なければ** なりません。例えば次の通りです："

#: ../../tutorials/08_property_framework.ipynb:382
msgid "The ``TwoBodyElectronicIntegrals`` work pretty much the same except that they contain all possible spin-combinations in the tuple of numpy arrays. For example:"
msgstr "``TwoBodyElectronicIntegrals`` は、numpy 配列のタプルに全ての可能なスピンの組み合わせを含むこと除いて、ほとんど同じ動作をします。例えば次の通りです："

#: ../../tutorials/08_property_framework.ipynb:495
msgid "We should take note of a few observations:"
msgstr "いくつか注目すべき点があります："

#: ../../tutorials/08_property_framework.ipynb:497
msgid "the numpy arrays shall be ordered as ``(\"alpha-alpha\", \"beta-alpha\", \"beta-beta\", \"alpha-beta\")``"
msgstr "numpy 配列は ``(\"alpha-alpha\", \"beta-alpha\", \"beta-beta\", \"alpha-beta\")`` の順になります"

#: ../../tutorials/08_property_framework.ipynb:498
msgid "the ``alpha-alpha`` matrix may **not** be ``None``"
msgstr "``alpha-alpha`` 配列は ``None`` を含みません"

#: ../../tutorials/08_property_framework.ipynb:499
msgid "if the ``alpha-beta`` matrix is ``None``, but ``beta-alpha`` is not, its transpose will be used (like above)"
msgstr "もし ``alpha-beta`` 配列が ``None`` だが ``beta-alpha`` が異なる場合には、 (上の様に) 転置が使用されます"

#: ../../tutorials/08_property_framework.ipynb:500
msgid "in any other case, matrices which are ``None`` will be filled with the ``alpha-alpha`` matrix"
msgstr "それ以外の場合は、``None`` の配列は ``alpha-alpha`` 配列で埋められます"

#: ../../tutorials/08_property_framework.ipynb:502
msgid "in the ``SO`` basis case, a single numpy array must be specified. Refer to ``TwoBodyElectronicIntegrals.to_spin()`` for its exact formatting."
msgstr "``SO`` 基底の場合、numpy 配列が一つ指定されなければなりません。正確なフォーマットは ``TwoBodyElectronicIntegrals.to_spin()`` を参照してください"

#: ../../tutorials/08_property_framework.ipynb:514
msgid "ElectronicEnergy"
msgstr "ElectronicEnergy"

#: ../../tutorials/08_property_framework.ipynb:525
msgid "Now we are ready to construct an ``ElectronicEnergy`` instance:"
msgstr "さて ``ElectronicEnergy`` インスタンスを構築する準備ができました："

#: ../../tutorials/08_property_framework.ipynb:652
msgid "This property can now be used to construct a ``SecondQuantizedOp`` (which can then be mapped to a ``QubitOperator``):"
msgstr "このプロパティは ``SecondQuantizedOp`` を構築するために使用できます。(そして ``QubitOperator`` にマップできます)："

#: ../../tutorials/08_property_framework.ipynb:710
msgid "Result interpretation"
msgstr "結果の解釈"

#: ../../tutorials/08_property_framework.ipynb:721
msgid "An additional benefit which we gain from the ``Property`` framework, is that the result interpretation of a computed eigenvalue can be handled by each property itself. This results in nice and logically consistent classes because the result gets interpreted in the same context where the raw data is available."
msgstr "``Property`` フレームワークから得られる追加の恩恵は、算出された固有値の結果解釈がプロパティそれ自身で処理できることです。この結果は、生データと同じコンテキストで解釈されるため、精密で論理的に一貫したクラスになります。"

#: ../../tutorials/08_property_framework.ipynb:777
msgid "While this particular example is not yet very impressive, wait until we use more properties at once."
msgstr "この例はまだそれほど印象的ではありませんが、同時に多くのプロパティを使用するまで待ってください。"

#: ../../tutorials/08_property_framework.ipynb:789
msgid "ParticleNumber"
msgstr "ParticleNumber"

#: ../../tutorials/08_property_framework.ipynb:800
msgid "The ``ParticleNumber`` property also takes a special place among the builtin properties because it serves a dual purpose of:"
msgstr "``ParticleNumber`` プロパティは２つの目的を果たすため、組み込みプロパティのなかでも特別です："

#: ../../tutorials/08_property_framework.ipynb:802
msgid "storing the number of particles in the electronic system"
msgstr "電子系の粒子数を格納します"

#: ../../tutorials/08_property_framework.ipynb:803
msgid "providing the operators to evaluate the number of particles for a given eigensolution of the problem"
msgstr "与えられた問題の固有解のための粒子数を評価する演算子を提供します"

#: ../../tutorials/08_property_framework.ipynb:805
msgid "Therefore, this property is required if you want to use additional functionality like the ``ActiveSpaceTransformer`` or the ``ElectronicStructureProblem.default_filter_criterion()``."
msgstr "そのため、``ActiveSpaceTransformer`` または ``ElectronicStructureProblem.default_filter_criterion()`` のような追加機能を使う場合には、このプロパティが必要です。"

#: ../../tutorials/08_property_framework.ipynb:860
msgid "GroupedProperty"
msgstr "GroupedProperty"

#: ../../tutorials/08_property_framework.ipynb:871
msgid "Rather than iterating all of the other properties one by one, let us simply consider a group of properties as provided by any ``ElectronicStructureDriver`` from the ``qiskit_nature.drivers.second_quantization`` module."
msgstr "他の全てのプロパティを一つ一つ繰り返すのではなく、``qiskit_nature.drivers.second_quantization`` モジュールの中の ``ElectronicStructureDriver`` で提供されるプロパティのグループを考えてみましょう。"

#: ../../tutorials/08_property_framework.ipynb:1300
msgid "There is a lot going on but with the explanations above you should not have any problems with understanding this output."
msgstr "多くのことが進行していますが、上述の説明によって、この出力を理解することに何の問題もありません。"

#: ../../tutorials/08_property_framework.ipynb:1312
msgid "Constructing a Hamiltonian from raw integrals"
msgstr "生の積分からのハミルトニアンの構成"

#: ../../tutorials/08_property_framework.ipynb:1323
msgid "If you have obtained some raw one- and two-body integrals by means other than through a driver provided by Qiskit Nature, you can still easily construct an ``ElectronicEnergy`` property to serve as your access point into the stack:"
msgstr "Qiskit Nature のドライバー以外の方法でいくつかの生の１体積分と２体積分を得ている場合でも、 ``ElectronicEnergy`` プロパティをスタックへのアクセスポイントとして簡単に構築することができます："

#: ../../tutorials/08_property_framework.ipynb:1459
msgid "Vibrational Second Quantization Properties"
msgstr "振動的第二量子化プロパティ"

#: ../../tutorials/08_property_framework.ipynb:1470
msgid "The ``vibrational`` stack for vibrational structure calculations also integrates with the Property framework. After the above introduction you should be able to understand the following directly:"
msgstr "振動構造計算のための ``vibrational`` スタックもプロパティ・フレームワークに統合されています。上記の紹介によって、以下のことが理解できるでしょう："

#: ../../tutorials/08_property_framework.ipynb:1503
msgid "For vibrational structure calculations we always need to define the basis which we want to work in, separately:"
msgstr "振動構造計算のために、常に別々に基底を定義する必要があります。"

#: ../../tutorials/08_property_framework.ipynb:1629
msgid "Writing custom Properties"
msgstr "カスタムプロパティの記述"

#: ../../tutorials/08_property_framework.ipynb:1640
msgid "You can extend the Property framework with your own implementations. Here, we will walk through the simple example of constructing a Property for the *electronic density*. Since this observable is essentially based on matrices, we will be leveraging the ``OneBodyElectronicIntegrals`` container to store the actual density matrix."
msgstr "独自の実装でプロパティ・フレームワークを拡張することができます。ここでは *電子密度* のためのプロパティを構成する単純な例を見ていきます。この観測可能量は基本的に配列に基づいているため ``OneBodyElectronicIntegrals`` コンテナを活用して実際の密度行列を格納します。"

#: ../../tutorials/08_property_framework.ipynb:1821
msgid "Of course, the above example is very minimal and can be extended at will."
msgstr "もちろん、上記の例は最小限であり、自由に拡張できます。"

#: ../../tutorials/08_property_framework.ipynb:1832
msgid "**Note:** as of Qiskit Nature version 0.2.0, the direct integration of custom Property objects into the stack is not implemented yet, due to limitations of the auxiliary operator parsing. See https://github.com/Qiskit/qiskit-nature/issues/312 for more details."
msgstr "**注記：** Qiskit Nature バージョン 0.2.0 では、補助演算子のパースの制限により、カスタムプロパティ・オブジェクトをスタックに直接統合することはまだ実装されていません。詳細は https://github.com/Qiskit/qiskit-nature/issues/312 を見てください。"

#: ../../tutorials/08_property_framework.ipynb:1834
msgid "For the time being, you can still evaluate a custom Property, by passing it’s generated operators directly to the ``Eigensolver.solve`` method by means of constructing the ``aux_operators``. Note, however, that you will have to deal with transformations applied to your properties manually, until the above issue is resolved."
msgstr "当面は ``aux_operators`` を生成する手段として、生成された演算子を ``Eigensolver.solve`` メソッドに直接渡すことで、カスタムプロパティを評価することができます。ただし上記の問題が解決するまでは、プロパティに適用される変換を手動で処理する必要があることに注意してください。"

