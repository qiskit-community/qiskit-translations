msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-07 19:00+0000\n"
"PO-Revision-Date: 2023-01-06 06:05\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/08_qcschema.po\n"
"X-Crowdin-File-ID: 9871\n"
"Language: ja_JP\n"

#: ../../tutorials/08_qcschema.ipynb:9
msgid "This page was generated from `docs/tutorials/08_qcschema.ipynb`__."
msgstr "このページは `docs/tutorials/08_qschema.ipynb`__ から生成されました。"

#: ../../tutorials/08_qcschema.ipynb:9
msgid "QCSchema"
msgstr "QCSchema"

#: ../../tutorials/08_qcschema.ipynb:11
msgid "The `QCSchema <https://github.com/MolSSI/QCSchema>`__ is a standard data format for quantum chemistry. The current version of it which has been adopted by multiple classical chemistry codes, only supports serialization via ``JSON``, but their docs clearly indicate that ``HDF5`` may also be used. Thus, in Qiskit Nature, we have opted for implementing support for both hierarchical data formats."
msgstr "`QCSchema <https://github.com/MolSSI/QCSchema>`__ は、量子化学のための標準データフォーマットです。 複数の古典的な化学コードで採用されている現在のバージョンは、 ``JSON`` によるシリアル化のみをサポートしていますが、ドキュメントには ``HDF5`` も使用できると明確に示されています。 そのため、Qiskit Natureでは両方の階層的データフォーマットを実装サポートすることにしました。"

#: ../../tutorials/08_qcschema.ipynb:13
msgid "Now, why do we have a tutorial specifically about this format you may wonder? The reason is fairly simple: this is the data format which our drivers use internally to transfer data between the classical computation and Qiskit Nature. Thus, this tutorial will explain a few concepts, in case you want to get a bit more elaborate with your driver interaction."
msgstr "さて、なぜこのフォーマットについて特にチュートリアルがあるのでしょうか？　理由は非常に簡単です。古典計算と Qiskit Nature の間でデータをやりとりするために私たちのドライバーが内部で使用しているデータフォーマットであるからです。 したがって、このチュートリアルでは、いくつかの概念を説明することで、ドライバの相互作用をもう少し詳しく知ることができるようにします。"

#: ../../tutorials/08_qcschema.ipynb:15
msgid "**Note:** the support for electronic-repulsion integrals as part of the QCSchema is not yet part of the official specification and, thus, custom to Qiskit Nature. But we are working with the QCSchema authors to make this integration official!"
msgstr ""

#: ../../tutorials/08_qcschema.ipynb:17
msgid "For the purposes of this tutorial, we are using the ``PySCFDriver``, but most discussion points should apply to the other electronic structure drivers, too."
msgstr "このチュートリアルでは、 ``PySCFDriver`` を使用していますが、ほとんどの議論ポイントは他の電子構造ドライバにもあてはまるはずです。"

#: ../../tutorials/08_qcschema.ipynb:19
msgid "First, let us construct a ``PySCFDriver`` and run it:"
msgstr ""

#: ../../tutorials/08_qcschema.ipynb:69
msgid "This is basically short for the following:"
msgstr ""

#: ../../tutorials/08_qcschema.ipynb:118
msgid "There are two things to note here: - the problem is specifically requested in the MO basis - dipole integrals are handled separately (because the current QCSchema standard does not support these coefficients)"
msgstr ""

#: ../../tutorials/08_qcschema.ipynb:120
msgid "What this means for you as an end-user, is that you can also request the problem in another basis like so:"
msgstr "これがエンドユーザーにとってどういうことを意味するかというと、以下のような別の方法で問題をリクエストすることもできるということです。"

#: ../../tutorials/08_qcschema.ipynb:166
msgid "If you now want to transform an AO problem into the MO basis, you need to use the ``BasisTransformer`` which is explained in `a separate tutorial <05_problem_transformers.ipynb>`__."
msgstr "AO の問題を MO ベースに変換したい場合は、 `個別のチュートリアル <05_problem_transformers.ipynb>`__ で説明されている ``BasisTransformer`` を使用する必要があります。"

#: ../../tutorials/08_qcschema.ipynb:168
msgid "This is the point, where you need to understand that the ``to_problem`` method actually relies on the ``to_qcschema`` method internally:"
msgstr "ここで、``to_problem`` メソッドが実際には ``to_qcschema`` メソッドに内部的に依存していることを理解する必要があります。"

#: ../../tutorials/08_qcschema.ipynb:192
msgid "Specifically extracting the QCSchema object from the driver allows you to later extract a ``BasisTransformer`` from it, without having to manually dig out the AO-2-MO transformation coefficients from the depths of the driver object:"
msgstr "QCSchema オブジェクトをドライバーから抽出することにより、後で ``BasisTransformer`` を抽出することができます。 ドライバーオブジェクトの深いところから AO-2-MO 変換係数を手動で掘り起こす必要はありません。"

