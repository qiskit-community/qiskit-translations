msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-14 13:33+0000\n"
"PO-Revision-Date: 2023-05-01 11:11\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/12_deuteron_binding_energy.po\n"
"X-Crowdin-File-ID: 9875\n"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:9
msgid "This page was generated from `docs/tutorials/12_deuteron_binding_energy.ipynb`__."
msgstr "このページは `docs/tutorials/12_deuteron_binding_energy.ipynb`__ から生成されました。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:9
msgid "Binding Energy between proton and neutron in the Deuteron nucleus"
msgstr "重水素原子核の陽子と中性子の結合エネルギー"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:20
msgid "At the current stage of quantum computing the quantum processors we have available do not yet have error correcting codes implemented and thus still have noise that must be contended with. This noise can adversely impact the results and hence can limit the sort of problems we can currently tackle when, due to the noise, a high level of confidence and precision cannot be expected from the results."
msgstr "現在の量子コンピューティングでは、量子プロセッサーに誤り訂正符号が実装されていないため、ノイズに悩まされることになります。このノイズが結果に悪影響を及ぼし、その結果、高い信頼性と精度が期待できない場合、現在取り組むことのできる問題が制限される可能性があります。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:22
msgid "However, there are some problems which demand only few qubits to be solved, like the computation of the binding energy between the proton and neutron in the Deuteron nucleus `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__. This problem is an example of a scenario where we can achieve good results despite the challenges mentioned earlier."
msgstr "しかし、重陽子原子核の陽子と中性子の結合エネルギーの計算のように、数量子ビットしか必要としない問題も存在します `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__。この問題は、先に述べた課題にもかかわらず、良い結果を得られるシナリオの一例です。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:34
msgid "Step 1: Importing the packages that we need to tackle the problem"
msgstr "ステップ 1: 問題に取り組むために必要なパッケージをインポートする"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:68
msgid "Step 2: Defining some functions that we will use"
msgstr "ステップ 2: いくつかの機能を定義する"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:79
msgid "Before we start the definition of the Deuteron Hamiltonian, we need to define a utility function implementing the Kronecker delta, which is defined as follows:"
msgstr "重水素のハミルトニアンの定義を始める前に、クロネッカーデルタを実装したユーティリティー関数を定義する必要があり、それは次のように定義されます。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:81
msgid ":math:`\\delta_{n,m} = \\bigg\\{\\begin{array}{c}0, \\ \\textrm{if} \\ n \\neq m \\\\1, \\ \\textrm{if } \\ n = m.\\end{array}`."
msgstr ":math:`\\delta_{n,m} = \\bigg\\{\\begin{array}{c}0, \\ \\textrm{if} \\ n \\neq m \\\\1, \\ \\textrm{if } \\ n = m.\\end{array}`."

#: ../../tutorials/12_deuteron_binding_energy.ipynb:83
msgid "This function appears in the Deuteron Hamiltonian definition given in `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__. Below we have a piece of code that defines the Kronecker delta function."
msgstr "この関数は `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__ で示される重水素のハミルトニアンの定義に登場します。以下に、クロネッカーのデルタ関数を定義するコードの一部を示します。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:114
msgid "In `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__ we can find the following expression for the Deuteron Hamiltonian :math:`H_N = \\sum_{n,m=0}^{N-1}\\langle m|(T+V)|n\\rangle a_{m}^\\dagger a_n`, where :math:`|n\\rangle` and :math:`|m\\rangle` represent quantum states in the harmonic oscillator basis, and :math:`a_m^\\dagger` and :math:`a_n` represent the creation and annihilation operators, respectively."
msgstr "`[1] <https://arxiv.org/pdf/1801.03897. pdf>`__ では、重水素のハミルトニアンの式は :math:`H_N = \\sum_{n,m=0}^{N-1}\\langle m|(T+V)|n\\rangle a_{m}^\\dagger a_n` と表されます。ここで :math:`|n\\rangle` と :math:`|m\\rangle` は調和振動子基底の量子状態を表し、 :math:`a_m^\\dagger` と :math:`a_n` はそれぞれ生成演算子と消滅演算子を表します。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:116
msgid "To create the code that defines :math:`H_N`, we need the matrix elements of the kinetic and potential energy. Again, we find these expressions in `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__:"
msgstr ":math:`H_N` を定義するコードを作成するために、運動エネルギーと位置エネルギーの行列要素が必要です。これらの式も `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__ で見つけることができます。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:118
msgid ":math:`\\langle m|T|n\\rangle = \\frac{\\hbar\\omega}{2}\\left[\\left(2n+\\frac{3}{2}\\right)\\delta_{n,m}-\\sqrt{n(n+\\frac{1}{2})}\\delta_{n,m+1}-\\sqrt{(n+1)(n+\\frac{3}{2})}\\delta_{n,m-1}\\right],` :math:`\\langle m|V|n\\rangle = V_0\\delta_{n,0}\\delta_{n,m}.`"
msgstr ":math:`\\langle m|T|n\\rangle = \\frac{\\hbar\\omega}{2}\\left[\\left(2n+\\frac{3}{2}\\right)\\delta_{n,m}-\\sqrt{n(n+\\frac{1}{2})}\\delta_{n,m+1}-\\sqrt{(n+1)(n+\\frac{3}{2})}\\delta_{n,m-1}\\right],` :math:`\\langle m|V|n\\rangle = V_0\\delta_{n,0}\\delta_{n,m}.`"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:120
msgid "Where :math:`V_0 = -5.68658111 \\ \\textrm{MeV}` and :math:`\\hbar\\omega = 7 \\ \\textrm{MeV}`. However, the Hamiltonian written in this way cannot be processed directly in a quantum computer, because a quantum computer manipulates qubits through gates based on Pauli matrices. Thus, we need to convert the creation and annihilation operators into Pauli operators. To do that, we can make use of the Jordan-Wigner transformation"
msgstr "ここで、 :math:`V_0 = -5.68658111 \\textrm{MeV}` で、 :math:`hbaromega = 7 \\textrm{MeV}` です。しかし、このように書かれたハミルトニアンは、量子コンピューターでは直接処理できません。量子コンピューターは、パウリ行列に基づくゲートを通して量子ビットを操作するからです。そこで、生成消滅演算子をパウリ演算子に変換する必要があります。そのために、Jordan-Wigner変換を利用します。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:122
msgid ":math:`a_n^\\dagger \\ \\rightarrow \\ \\frac{1}{2}\\left[\\prod_{j=0}^{n-1}-Z_j\\right](X_n-iY_n),`"
msgstr ":math:`a_n^\\dagger \\ \\rightarrow \\ \\frac{1}{2}\\left[\\prod_{j=0}^{n-1}-Z_j\\right](X_n-iY_n),`"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:124
msgid ":math:`a_n \\ \\rightarrow \\ \\frac{1}{2}\\left[\\prod_{j=0}^{n-1}-Z_j\\right](X_n+iY_n).`"
msgstr ":math:`a_n \\ \\rightarrow \\ \\frac{1}{2}\\left[\\prod_{j=0}^{n-1}-Z_j\\right](X_n+iY_n).`"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:126
msgid "Fortunately, in Qiskit Nature we have tools to define fermionic operators and to convert this kind of operators into Pauli operators through the Jordan-Wigner transformation. Initially, we use a for loop to construct and store the labels and coefficients in a tuple, and after this, we add the tuple in a list. Each string label and coefficient define a kinetic element :math:`\\langle m|T|n\\rangle` and a potential element :math:`\\langle m|V|n\\rangle` of the Hamiltonian. At the end of the for loop, we have to pass the list with the tuples with labels and coefficients to ``FermionicOp``, in order to create a Hamiltonian in terms of the creation and annihilation operators. We need to rewrite this Hamiltonian in terms of Pauli operators, to do this we use ``JordanWignerMapper()``. In order to obtain more information about the Qiskit Nature tools, we recommend a reading of the Qiskit Nature documentation `[2] <https://qiskit.org/documentation/nature/>`__."
msgstr "幸い、Qiskit Natureにはフェルミオン演算子を定義し、Jordan-Wigner変換によってこの種の演算子をパウリ演算子に変換するツールがあります。最初に、forループを使ってラベルと係数をタプルに構築し、保存します。この後、タプルをリストに追加します。それぞれの文字列ラベルと係数はハミルトニアンの運動の項 :math:`\\langle m|T|n\\rangle` とポテンシャルの項 :math:`\\langle m|V|n\\rangle` を定義します。forループの最後に、ラベルと係数のタプルを含むリストを ``FermionicOp`` に渡して、生成消滅演算子からハミルトニアンを作成する必要があります。このハミルトニアンをパウリ演算子で書き換える必要があります。そのためには、 ``JordanWignerMapper()`` を使用します。Qiskit Natureツールに関するより詳しい情報は、Qiskit Natureドキュメント `[2] <https://qiskit.org/documentation/nature/>`__ を読むことをお勧めします。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:185
msgid "Now, we have an idea of how to use some of Qiskit Nature tools to build a Hamiltonian in terms of Pauli operators. However, this is not the end, we need to construct an ansatz through a parameterized quantum circuit and use it in the ``VQE`` to compute the minimum eigenvalue of the Deuteron Hamiltonian (binding energy)."
msgstr "さて、Qiskit Natureのツールを使って、パウリ演算子でハミルトニアンを構築する方法がわかりました。しかし、これで終わりではありません。パラメーター化された量子回路を通してansatzを構築し、 ``VQE`` を使用して重水素のハミルトニアンの最小固有値 (結合エネルギー) を計算します。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:197
msgid "Step 3: Using Qiskit tools to calculate the binding energy between proton and neutron in Deuteron nucleus"
msgstr "ステップ 3: Qiskit ツールを使用して、重水素原子核の陽子と中性子の結合エネルギーを計算する"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:208
msgid "In the previous step, we have defined the functions that will be useful to us in the task of calculating the binding energy between proton and neutron in the Deuteron nucleus. Thus, now it is time to start the process of solving the problem with the tools we built."
msgstr "前のステップで重水素原子核の陽子と中性子の結合エネルギーの計算に役立つ機能を定義しました。 今度は、私たちが構築したツールを使って問題を解決するプロセスを始める時です。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:219
msgid "Now it is time to create the Hamiltonian, we will begin with :math:`H_1`, that is the simplest form of the deuteron Hamiltonian (:math:`N = 1`). In `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__, the authors calculated the ground-state energy for :math:`N = 1,2,3` and they used those values to extrapolate the energy and try to reach :math:`-2.22 \\ MeV`, the value of the deuteron's ground-state energy. Here we will create a list to store the Hamiltonians :math:`H_1`, :math:`H_2`, :math:`H_3` and :math:`H_4`, because we will use these Hamiltonians later to calculate the ground-state. To do this, we can do a list comprehension with the function ``create_deuteron_hamiltonian`` that we defined above."
msgstr "重水素のハミルトニアン( :math:`N = 1` )の最も単純な形である :math:`H_1` から始めましょう。`[1] <https://arxiv.org/pdf/1801.03897.pdf>`__ では、著者らは :math:`N = 1,2,3` の基底状態のエネルギーを計算し、その値を使ってエネルギーを外挿し、重水素の基底状態のエネルギーの値である :math:`-2.22 \\MeV` に到達しようと試みています。ここでは、ハミルトニアン :math:`H_1`, :math:`H_2`, :math:`H_3`, :math:`H_4` を格納するリストを作成します。なぜなら、これらのハミルトニアンは後に基底状態を計算するために使用することになるからです。これを行うには、上で定義した ``create_deuteron_hamiltonian`` という関数でリスト内包を行います。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:241
msgid "In reference `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__, we can find the exact expressions for Deuteron Hamiltonian of size N = 1, 2 and 3 as given below."
msgstr "参考文献 `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__ に、N = 1, 2, 3 の大きさの重水素のハミルトニアンの厳密な式が示されています。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:243
msgid ":math:`H_1 = 0.218291(Z_0-I_0)`"
msgstr ":math:`H_1 = 0.218291(Z_0-I_0)`"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:245
msgid ":math:`H_2 = 5.906709I_1\\otimes I_0 + 0.218291I_1\\otimes Z_0 - 6.215Z_1\\otimes I_0 - 2.143304(X_1\\otimes X_0 + Y_1 \\otimes Y_0)`"
msgstr ":math:`H_2 = 5.906709I_1\\otimes I_0 + 0.218291I_1\\otimes Z_0 - 6.215Z_1\\otimes I_0 - 2.143304(X_1\\otimes X_0 + Y_1 \\otimes Y_0)`"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:247
msgid ":math:`H_3 = I_2\\otimes H_2 + 9.625(I_2\\otimes I_1\\otimes I_0 - Z_2\\otimes I_1\\otimes I_0) - 3.913119(X_2\\otimes X_1\\otimes I_0 + Y_2\\otimes Y_1\\otimes I_0)`"
msgstr ":math:`H_3 = I_2\\otimes H_2 + 9.625(I_2\\otimes I_1\\otimes I_0 - Z_2\\otimes I_1\\otimes I_0) - 3.913119(X_2\\otimes X_1\\otimes I_0 + Y_2\\otimes Y_1\\otimes I_0)`"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:258
msgid "If we want to know if our ``create_deuteron_hamiltonian`` gives us the right result, we have to compare with the expressions presented above. For this purpose, we printed the Hamiltonians generated by the function ``create_deuteron_hamiltonian`` in the cell below."
msgstr "もし、 ``create_deuteron_hamiltonian`` が正しい結果を与えているかどうかを知りたければ、上に示した式と比較する必要があります。この目的のために、関数 ``create_deuteron_hamiltonian`` によって生成されたハミルトニアンを以下のセルに記載しました。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:375
msgid "By inspection, we can see that our function is giving us the right result for :math:`H_1`, :math:`H_2` and :math:`H_3`. However, we don't have an expression for :math:`H_4` in `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__, but it is possible to say, by induction, that the result must be correct once the previous results matched with the expressions given in `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__."
msgstr "検証の結果、この関数は :math:`H_1`, :math:`H_2`, :math:`H_3` に対して正しい結果を与えていることがわかります。 `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__ には :math:`H_4` の式がありませんが、帰納法により、以前の結果が `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__ で与えられた式と一致すれば、その結果は正しいに違いないと言うことは可能です。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:386
msgid "In `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__, the authors worked with ansatze of low depth, because they wanted to compute things on a real quantum device. Those quantum circuits can be found in `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__. As we already discussed in the beginning of this tutorial, the currently available quantum hardware has to work with quantum circuits with low depth to achieve good results, once they still have a significant amount of noise and don't have quantum error correction implemented."
msgstr "`[1] <https://arxiv.org/pdf/1801.03897.pdf>`__ では、著者らは実量子デバイスで計算をしたかったので、Depthの浅いansatzで作業をしました。この量子回路は `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__ で見ることができます。このチュートリアルの冒頭で述べたように、現在利用可能な量子ハードウェアは、量子エラー訂正が実装されておらず、ノイズが多いため、良い結果を得るためには浅いDepthの量子回路で動作させる必要があります。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:389
msgid "We need to define two parameters to build the circuits presented in `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__, :math:`\\theta` (theta) and :math:`\\eta` (eta), which we can do it using ``Parameter()`` as shown in the cell code below."
msgstr "下のコードセルで示されているように、 ``Parameter()`` を使用して `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__ で紹介されている回路を構築するために、 :math:`\\theta` (theta) と :math:`\\eta` (eta) という2つのパラメーターを定義する必要があります。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:411
msgid "Using the parameters defined above and following the instructions to build the circuits presented in `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__, we obtain the following circuits:"
msgstr "`[1] <https://arxiv.org/pdf/1801.03897.pdf>`__で示される回路を構築する指示に従うと、上記で定義されたパラメーターを使用して以下の回路を得られます。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:494
msgid "Unfortunately, in `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__ we can't find a low-depth circuit for the ansatz for :math:`H_4`. Then, for now we are not going to work with :math:`N = 4`, but later we will return to this problem using ``TwoLocal`` as an ansatz."
msgstr "残念ながら、`[1] <https://arxiv.org/pdf/1801.03897.pdf>`__ では :math:`H_4` のansatzのための浅い回路を見つけることができません。よって、今のところ :math:`N = 4` を扱いませんが、後でansatzとして ``TwoLocal`` を使ってこの問題に戻りましょう。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:505
msgid "Now, we can store these circuits in the ansatz list for the organization of the tests."
msgstr "これらの回路をテストの構成のためにansatzリストに格納します。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:526
msgid "The rather small size of our generated operators, allows us to use numpy functions (classical methods) to obtain the binding energy for :math:`H_1`, :math:`H_2`, :math:`H_3` and :math:`H_4` through the process of finding the lowest eigenvalue of the Hamiltonian matrices. This task is done in the for loop of the code cell below."
msgstr "生成された演算子のサイズが小さいので、 :math:`H_1`, :math: `H_2`, :math:`H_3`, :math:`H_4`の結合エネルギーを得るとき、ハミルトニアン行列の最小固有値を見つけるプロセスにnumpy関数 (古典的なメソッド) を使うことができます。このタスクは、以下のコードセルの for ループで実行されます。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:591
msgid "The results obtained above will be used as our reference values. Thus, we can use them to see if the Estimator gives us good results. In the code cell below we ran the ``VQE`` algorithm for each pair of ``ansatz`` and Hamiltonian, using the Estimator and the ``SLSQP`` optimizer."
msgstr "上記の結果を参照値として使用します。 したがって、Estimatorが良い結果をもたらすかどうかを確認するためにそれらを使用できます。 以下のコードセルでは、Estimatorと ``SLSQP`` オプティマイザーを使用して、``ansatz`` と ハミルトニアンのペアに対して ``VQE`` アルゴリズムを実行しました。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:657
msgid "We can see that our results are in agreement with the reference values obtained by classical methods. We also tested some different options of optimizers provided in Qiskit, because we wanted to know which one behaves better. To do this, we make use of the ``callback`` option in ``VQE`` to allow us to store the list of counts and values. With this information it is possible to make a plot to see if the optimizer converges to the value of reference and, if it converges, how fast it does. However, in the code cell below, we are working only with the ``COBYLA`` optimizer for the sake of simplicity."
msgstr "我々の結果は古典的な手法で得られた基準値と一致していることがわかります。また、Qiskitで提供されているオプティマイザーのオプションもどれが良いかテストしました。そのために、``VQE`` の ``callback`` オプションを使用し、カウントと値のリストを保存できるようにしました。この情報を使って、オプティマイザーが参照値に収束するかどうか、収束する場合はどのくらいの速度で収束するかをプロットすることが可能です。しかし、以下のコードセルでは、簡単のために ``COBYLA`` オプティマイザーのみを使用しています。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:732
msgid "Plotting the results obtained with the execution of ``VQE`` on the previous code cell."
msgstr "前のコードセルで ``VQE`` を実行して取得した結果をプロットします。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:774
msgid "Note that with the quantum circuits given in `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__, we can't test whether we can reach the reference value for :math:`H_4`, because, as mentioned before, we don't have an ``ansatz`` for this Hamiltonian. Fortunately, that is not the end for our experiments, because Qiskit provides some functions that create an ``ansatz`` for us. For our purposes, we decided to use the TwoLocal function to build our new ``ansatz``. In the code cell below we used a for loop to create a list with the ``TwoLocal`` ansatz for each Hamiltonian."
msgstr "`[1] <https://arxiv.org/pdf/1801.03897.pdf>`__ で示した量子回路では、 :math:`H_4` の参照値に到達できるかどうかをテストすることができません。なぜなら、前述のように、このハミルトニアンの ``ansatz`` がないためです。幸いなことに、Qiskitには ``ansatz`` を作成する関数がいくつか用意されているので、実験が終わってしまうわけではありません。我々の目的のための新しい ``ansatz`` を作るためにTwoLocal関数を使うことにしました。以下のコードでは、forループを使って各ハミルトニアンの ``TwoLocal`` ansatzを含むリストを作成しています。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:806
msgid "Now we can check if with this new type of ``ansatz``, we can reach the reference values obtained through classical methods. To do this verification, we have to repeat the experiments done previously, but now using the ``ansatz`` defined through the usage of TwoLocal function."
msgstr "新しいタイプの ``ansatz`` で、古典的な手法で得られた参照値に到達できるかどうかを確認できます。 この検証を行うには、以前に行った実験を繰り返す必要がありますが、今度は、TwoLocal 関数を使用して定義された ``ansatz`` を使用します。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:924
msgid "Using the four different ``TwoLocal`` ansatze, we obtained the following results:"
msgstr "4 つの ``TwoLocal`` ansatz を使用して、以下の結果を得ました："

#: ../../tutorials/12_deuteron_binding_energy.ipynb:967
msgid "Step 4: Calculating the observables expectation values"
msgstr "ステップ 4: 観測量の期待値を計算する"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:978
msgid "One of our goals in the Qiskit Advocate Mentorship Program project was to show that it is possible to calculate expectation values of some observables of interest, and show how they behave when we vary a parameter in the ``ansatz`` circuit. In our case, the observables of interest were :math:`I_1 \\otimes Z_0`, :math:`Z_1 \\otimes I_0`, :math:`X_1 \\otimes X_0`, :math:`Y_1 \\otimes Y_0` and :math:`H_2`, then we investigate their behavior when the parameter :math:`\\theta` was varied inside the interval :math:`[-\\pi,\\pi]`."
msgstr "Qiskit Advocate Mentorship Program プロジェクトにおける我々の目標の一つは、興味のあるいくつかの観測量の期待値を計算可能であることを示し、 ``ansatz`` 回路のパラメーターを変えたときにそれらがどう振る舞うかを示すことでした。我々の場合、興味のある観測量は :math:`I_1 \\otimes Z_0`, :math:`Z_1 \\otimes I_0`, :math:`X_1 \\otimes X_0`, :math:`Y_1 \\otimes Y_0` と :math:`H_2` で、さらにパラメーター :math:`\\theta` を区間 :math:`[-\\pi,\\pi]` 以内で変化させた時のそれらの動作を調査しています。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:990
msgid "In Dirac notation (bra-ket), the definition of the expectation value of an observable :math:`\\hat{O}` is equal to `[3] <https://www.feynmanlectures.caltech.edu/III_toc.html>`__ [4]:"
msgstr "ディラック記法 (ブラケット) では、観測値の期待値の定義 :math:`\\hat{O}` は `[3] <https://www.feynmanlectures.caltech.edu/III_toc.html>`__ [4] に等しくなります。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:992
msgid ":math:`\\langle \\hat{O} \\rangle_\\psi = \\langle \\psi(\\vec{\\theta})|\\hat{O}|\\psi(\\vec{\\theta}) \\rangle`."
msgstr ":math:`\\langle \\hat{O} \\rangle_\\psi = \\langle \\psi(\\vec{\\theta})|\\hat{O}|\\psi(\\vec{\\theta}) \\rangle`."

#: ../../tutorials/12_deuteron_binding_energy.ipynb:994
msgid "The code below defines a function that calculates the expectation values of observables, given a parameterized quantum circuit and a list with some values for these parameters (angles)."
msgstr "以下のコードは、観測値の期待値を計算する関数を定義しています。 パラメーター化された量子回路と、これらのパラメーター(角度) の値を持つリストが与えられます。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1049
msgid "Calculating the expectation value of the observables of interest using the function defined above:"
msgstr "上記で定義した関数を使用して、関心のある観測量の期待値を計算します。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1078
msgid "Using the function ``calculate_observables_exp_values`` (we defined it in the Step 2), we got the plots presented below. They showed us that we were able to reproduce the results of `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__."
msgstr "(ステップ2で定義した) 関数 ``calculate_observables_exp_values`` を使用して、以下のプロットを得ました。 `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__ の結果を再現できていることを示しました。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1149
msgid "Acknowledgment"
msgstr "謝辞"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1151
msgid "I would like to thank Steve Wood, Soham Pal and Siddhartha Morales for the debates in our meetings during the Qiskit Advocate Mentorship Program 2021 - Fall, they were very important for the construction of this tutorial."
msgstr "Qiskit Advocate Mentorship Program 2021 - Fallの期間中に行ったミーティングでのSteve Wood、Soham Pal、Siddhartha Moralesに感謝します。彼らはこのチュートリアルの構築に非常に重要でした。"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1163
msgid "References"
msgstr "参考文献"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1165
msgid "[1] Dumitrescu, Eugene F., et al. \"Cloud quantum computing of an atomic nucleus.\" Physical review letters 120.21 (2018): 210501. Arxiv version: https://arxiv.org/pdf/1801.03897.pdf"
msgstr "[1] Dumitrescu, Eugene F., et al. “Cloud quantum computing of an atomic nucleus.” Physical review letters 120.21 (2018): 210501. Arxiv version: https://arxiv.org/pdf/1801.03897.pdf"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1167
msgid "[2] Qiskit Nature Documentation. https://qiskit.org/documentation/nature/"
msgstr "[2] QisKit Nature Documentation. https://qiskit.org/documentation/nature/"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1169
msgid "[3] Feynman, R. P., Robert B. Leighton, and Matthew Sands. \"The Feynman Lectures on Physics, Volume III: Quantum Mechanics, vol. 3.\" (2010). https://www.feynmanlectures.caltech.edu/III_toc.html"
msgstr "[3] Feynman, R. P., Robert B. Leighton, and Matthew Sands. “The Feynman Lectures on Physics, Volume III: Quantum Mechanics, vol. 3.” (2010). https://www.feynmanlectures.caltech.edu/III_toc.html"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1171
msgid "[4] Expectation value (quantum mechanics) Wikipedia article. https://en.wikipedia.org/wiki/Expectation_value_(quantum_mechanics)"
msgstr "[4] 期待値 (量子力学) Wikipedia の記事 https://en.wikipedia.org/wiki/Expectation_value_(quantum_mechanics)"

