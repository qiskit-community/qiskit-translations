msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-11 18:10+0000\n"
"PO-Revision-Date: 2022-08-11 20:21\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/09_Protein_Folding.po\n"
"X-Crowdin-File-ID: 9713\n"
"Language: ja_JP\n"

#: ../../tutorials/09_Protein_Folding.ipynb:9
msgid "This page was generated from `docs/tutorials/09_Protein_Folding.ipynb`__."
msgstr "このページは `docs/tutorials/09_Protein_Folding.ipynb`__ から生成されました。"

#: ../../tutorials/09_Protein_Folding.ipynb:9
msgid "Protein Folding"
msgstr "タンパク質の折りたたみ"

#: ../../tutorials/09_Protein_Folding.ipynb:21
msgid "Introduction"
msgstr "はじめに"

#: ../../tutorials/09_Protein_Folding.ipynb:32
msgid "The structure and function of many natural and human-engineered proteins is still only poorly understood. As a result, our understanding of processes connected with protein folding, such as those encountered in Alzheimer’s disease, vaccine development, and crop improvement research, has remained limited."
msgstr "多くの自然界および人工のタンパク質の構造と機能は、まだほとんど理解されていません。その結果、アルツハイマー病やワクチン開発、農作物改良研究などでみられる、たんぱく質折りたたみに関連する理解に限りがあります。"

#: ../../tutorials/09_Protein_Folding.ipynb:34
msgid "Unfolded polypeptides have a very large number of degrees of freedom and thus an enormous number of potential conformations. For example, a chain with :math:`100` aminoacids has on the order of :math:`10^{47}` conformations. In reality, however, many proteins fold to their native structure within seconds. This is known as Levinthal’s paradox [1]."
msgstr "折り畳まれていないポリペプチドは自由度が非常に高く、このため潜在的な配座が非常に多く存在します。 例えば、 :math:`100` のアミノ酸鎖には、 :math:`10^{47}` のオーダーの配座があります。しかし現実には、多くのタンパク質は数秒のうちに固有の構造に折りたたまれます。これはレヴィンタールのパラドックス [1] として知られています。"

#: ../../tutorials/09_Protein_Folding.ipynb:36
msgid "The exponential growth of potential conformations with chain length makes the problem intractable for classical computers. In the quantum framework, our resource-efficient algorithm scales linearly with the number of aminoacids N."
msgstr "鎖の長さによる潜在的な配座の数が指数関数的に増加するため、古典コンピューターではこの問題は解決することができません。量子のフレームワークでは、リソース効率の良いアルゴリズムは、アミノ酸の数 N に対して線形にスケールします。"

#: ../../tutorials/09_Protein_Folding.ipynb:47
msgid "The goal of this work is to determine the minimum energy conformation of a protein. Starting from a random configuration, the protein’s structure is optimized to lower the energy. This can be achieved by encoding the protein folding problem into a qubit operator and ensuring that all physical constraints are satisfied."
msgstr "今回の目的はタンパク質の最小エネルギー配座を決定することです。ランダム構成から始め、タンパク質の構造をエネルギーを下げるように最適化します。これはタンパク質折りたたみ問題を量子ビット演算子に符号化し、すべての物理的制約を満足させることによって達成することができます。"

#: ../../tutorials/09_Protein_Folding.ipynb:58
msgid "For the problem encoding we use:"
msgstr "問題のエンコーディングには以下を使用します："

#: ../../tutorials/09_Protein_Folding.ipynb:60
msgid "Configuration qubits: qubits that are used to describe the configurations and the relative position of the different beads"
msgstr "配置量子ビット: 配置および異なるビーズ間の相対位置を記述する量子ビット"

#: ../../tutorials/09_Protein_Folding.ipynb:62
msgid "Interaction qubits: qubits that encode interactions between the different aminoacids"
msgstr "相互作用量子ビット: 異なるアミノ酸の相互作用をエンコードする量子ビット"

#: ../../tutorials/09_Protein_Folding.ipynb:64
msgid "For our case we use a tetrahedral lattice (diamond shape lattice) where we encode the movement through the configuration qubits (see image below)."
msgstr "今回は四面体格子(ダイヤモンド形状格子) を使用し、配置量子ビットで運動をエンコードします。(下図参照)"

#: ../../tutorials/09_Protein_Folding.ipynb:66
msgid "|b91f87eab7204e89a62abf4555806032|"
msgstr "|b91f87eab7204e89a62abf4555806032|"

#: ../../tutorials/09_Protein_Folding.ipynb:68
msgid "b91f87eab7204e89a62abf4555806032"
msgstr "b91f87eab7204e89a62abf4555806032"

#: ../../tutorials/09_Protein_Folding.ipynb:79
msgid "The Hamiltonian of the system for a set of qubits :math:`\\mathbf{q}=\\{\\mathbf{q}_{cf}, \\mathbf{q}_{in}\\}` is"
msgstr "量子ビットの集合 :math:`\\mathbf{q}=\\{\\mathbf{q}_{cf}, \\mathbf{q}_{in}\\}` の系のハミルトニアンは以下の通りです。"

#: ../../tutorials/09_Protein_Folding.ipynb:81
msgid "H(\\mathbf{q}) = H_{gc}(\\mathbf{q}_{cf}) + H_{ch}(\\mathbf{q}_{cf}) + H_{in}(\\mathbf{q}_{cf}, \\mathbf{q}_{in})\n\n"
msgstr "H(\\mathbf{q}) = H_{gc}(\\mathbf{q}_{cf}) + H_{ch}(\\mathbf{q}_{cf}) + H_{in}(\\mathbf{q}_{cf}, \\mathbf{q}_{in})\n\n"

#: ../../tutorials/09_Protein_Folding.ipynb:83
msgid "where"
msgstr "ここで"

#: ../../tutorials/09_Protein_Folding.ipynb:85
msgid ":math:`H_{gc}` is the geometrical constraint term (governing the growth of the primary sequence of aminoacids without bifurcations)"
msgstr ":math:`H_{gc}` は幾何学的制約項 (分岐の無いアミノ酸のプライマリー・シーケンスの成長を統制)です"

#: ../../tutorials/09_Protein_Folding.ipynb:87
msgid ":math:`H_{ch}` is the chirality constraint (enforcing the right stereochemistry for the system)"
msgstr ":math:`H_{ch}` はキラリティ制約 (系の正しい立体化学を強制)です"

#: ../../tutorials/09_Protein_Folding.ipynb:89
msgid ":math:`H_{in}` is the interaction energy terms of the system. In our case we consider only nearest neighbor interactions."
msgstr ":math:`H_{in}` は系の相互作用エネルギー項です。このケースでは最近接相互作用のみを考慮します。"

#: ../../tutorials/09_Protein_Folding.ipynb:100
msgid "Further details about the used model and the encoding of the problem can be found in [2]."
msgstr "問題のモデルとエンコードの詳細は [2] を参照してください。"

#: ../../tutorials/09_Protein_Folding.ipynb:137
msgid "Protein Main Chain"
msgstr "タンパク質の主鎖"

#: ../../tutorials/09_Protein_Folding.ipynb:148
msgid "The Protein consists of a main chain that is a linear chain of aminoacids. For the naming of different residues we use the one-letter code as defined in Ref. [3]. Further details about the naming and the type of aminoacids can also be found in [4]."
msgstr "タンパク質はアミノ酸の線形鎖である主鎖で構成されています。それ以外の残基の命名は [3] で定義されている1文字のコードを使用しました。より詳細なアミノ酸のタイプと命名法は [4] も参照してください。"

#: ../../tutorials/09_Protein_Folding.ipynb:150
msgid "For this particular case we demonstrate the generation of the qubit operator in a neuropeptide with the main chain consisting of 7 aminoacids with letter codes APRLRFY (see also [2])."
msgstr "この例ではコード APRLRFY を持つ、7 つのアミノ酸で構成された主鎖の神経ペプチドにおける量子演算子の生成をデモンストレーションします([2] 参照)。"

#: ../../tutorials/09_Protein_Folding.ipynb:172
msgid "Side Chains"
msgstr "側鎖"

#: ../../tutorials/09_Protein_Folding.ipynb:183
msgid "Beyond the main chain of the protein there may be aminoacids attached to the residues of the main chain. Our model allows for side chains of the maximum length of one. Elongated side chains would require the introduction of additional penalty terms which are still under development. In this example we do not consider any side chains to keep the real structure of the neuropeptide."
msgstr "タンパク質の主鎖の先に、主鎖の残基に接続したアミノ酸が存在することがあります。我々のモデルは最大長の側鎖を許容します。細長い側鎖は開発中の追加のペナルティ項の導入が必要になります。この例では神経ペプチドの真の構造を保持するための側鎖は考慮しません。"

#: ../../tutorials/09_Protein_Folding.ipynb:205
msgid "Interaction between Aminoacids"
msgstr "アミノ酸間の相互作用"

#: ../../tutorials/09_Protein_Folding.ipynb:216
msgid "For the description of inter-residue contacts for proteins we use knowledge-based (statistical) potentials derived using quasi-chemical approximation. The potentials used here are introduced by Miyazawa, S. and Jernigan, R. L. in [5]."
msgstr "タンパク質の残基間の接触を記述するため、準化学近似により導出された知識ベースの (統計的) ポテンシャルを使用します。ここで使われるポテンシャルは [5] Miyazawa, S. and Jernigan, R. L. によって導入されました。"

#: ../../tutorials/09_Protein_Folding.ipynb:218
msgid "Beyond this model we also allow for random contact maps (interactions) that provide a random interaction map. One can also introduce a custom interaction map that enhances certain configurations of the protein (e.g. alpha helix, beta sheet etc)."
msgstr "このモデルを超えて、ランダム相互作用マップを提供するランダム接続マップ(相互作用)も可能です。タンパク質の特定の配置 (例：αヘリックス、βシート 等) を強化したカスタム相互作用マップを導入することもできます。"

#: ../../tutorials/09_Protein_Folding.ipynb:241
msgid "Physical Constraints"
msgstr "物理的制約"

#: ../../tutorials/09_Protein_Folding.ipynb:252
msgid "To ensure that all physical constraints are respected we introduce penalty functions. The different penalty terms used are:"
msgstr "すべての物理制約が遵守されるように、ペナルティー関数を導入します。使用されている異なるペナルティー項は以下の通りです："

#: ../../tutorials/09_Protein_Folding.ipynb:254
msgid "penalty_chiral: A penalty parameter used to impose the right chirality."
msgstr "penalty_chiral: 正しいキラリティーを課すために使用されるペナルティー・パラメーター。"

#: ../../tutorials/09_Protein_Folding.ipynb:256
msgid "penalty_back: A penalty parameter used to penalize turns along the same axis. This term is used to eliminate sequences where the same axis is chosen twice in a row. In this way we do not allow for a chain to fold back into itself."
msgstr "penalty_back: 同じ軸に沿った回転にペナルティを与えるパラメーター。この項は一行に二回同じ軸が選ばれるシーケンスを排除するために使われます。この方法で鎖がそれ自身の中に折りたたまれることを防ぎます。"

#: ../../tutorials/09_Protein_Folding.ipynb:258
msgid "penalty_1: A penalty parameter used to penalize local overlap between beads within a nearest neighbor contact."
msgstr "penalty_1: 最近接接続の局所的なビーズ間の重複にペナルティを与えるパラメーター。"

#: ../../tutorials/09_Protein_Folding.ipynb:284
msgid "Peptide Definition"
msgstr "ペプチドの定義"

#: ../../tutorials/09_Protein_Folding.ipynb:295
msgid "Based on the main chain and possible side chains we define the peptide object that includes all the structural information of the modeled system."
msgstr "主鎖と可能な側鎖をベースにして、モデル化した系の全ての構造情報を含むペプチド・オブジェクトを定義します。"

#: ../../tutorials/09_Protein_Folding.ipynb:317
msgid "Protein Folding Problem"
msgstr "タンパク質の折りたたみ問題"

#: ../../tutorials/09_Protein_Folding.ipynb:328
msgid "Based on the defined peptide, the interaction (contact map) and the penalty terms we defined for our model we define the protein folding problem that returns qubit operators."
msgstr "定義されたペプチドに基づき、我々のモデルのために定義した相互作用(コンタクトマップ) とペナルティ項で、量子演算を返すタンパク質折りたたみ問題を定義します。"

#: ../../tutorials/09_Protein_Folding.ipynb:613
msgid "Using VQE with CVaR expectation value for the solution of the problem"
msgstr "問題の解決のための CVaR 期待値での VQE の使用"

#: ../../tutorials/09_Protein_Folding.ipynb:624
msgid "The problem that we are tackling has now implemented all the physical constraints and has a diagonal Hamiltonian. For the particular case we are targeting the single bitstring that gives us the minimum energy (corresponding to the folded structure of the protein). Thus, we can use the Variational Quantum Eigensolver with Conditional Value at Risk (CVaR) expectation values for the solution of the problem and for finding the minimum configuration energy [6] . We follow the same approach as in Ref. [2] but here we use COBYLA for the classical optimization part. One can also use the standard VQE or QAOA algorithm for the solution of the problem, though as discussed in Ref. [2] CVaR is more suitable."
msgstr "我々が取り組んでいる問題は全ての物理的制約を実装し、そして対角化されたハミルトニアンを持っています。特定のケースでは、(タンパク質の折りたたみ構造に対応する) 最低エネルギーを与える単一のビット列をターゲットにします。こうして、解の期待値の条件付きバリュー・アット・リスク (CVaR) 変分量子固有値ソルバーを使うことができ、最低配置エネルギーを見つけることができます[6]。参考文献 [2] とおなじアプローチをとりましたが、我々はここで古典的最適化に COBYLA を使います。標準的な VQE または QAOA アルゴリズムを使うことも可能ですが、[2] で議論されているように CVaR がより適切です。"

#: ../../tutorials/09_Protein_Folding.ipynb:1735
msgid "Visualizing the answer"
msgstr "回答の視覚化"

#: ../../tutorials/09_Protein_Folding.ipynb:1746
msgid "In order to reduce computational costs, we have reduced the problem’s qubit operator to the minimum amount of qubits needed to represent the shape of the protein. In order to decode the answer we need to understand how this has been done. \\* The shape of the protein has been encoded by a sequence of turns , :math:`\\{0,1,2,3\\}`. Each turn represents a different direction in the lattice. \\* For a main bead of :math:`N_{aminoacids}` in a lattice, we need :math:`N_{aminoacids}-1` turns in order to represent its shape. However, the orientation of the protein is not relevant to its energy. Therefore the first two turns of the shape can be set to :math:`[1,0]` without loss of generality. \\* If the second bead does not have any side chain, we can also set the :math:`6^{th}` qubit to :math:`[1]` without breaking symmetry. \\* Since the length of the secondary chains is always limited to :math:`1` we only need one turn to describe the shape of the chain."
msgstr "計算コストを削減するために、問題の量子ビット演算子を、タンパク質の形状を表すために必要な最小量の量子ビットに削減しました。答えを解読するには、これがどのように行われたかを理解する必要があります。 \\* タンパク質の形状は、一連のターン、 :math:`\\{0,1,2,3\\}` によってエンコードされています。各ターンは、格子内の異なる方向を表します。 \\* 格子状の :math:`N_{aminoacids}` のメインビーズの場合、その形状を表すために :math:`N_{aminoacids}-1` ターンが必要です。 ただし、タンパク質の配向はそのエネルギーとは関係ありません。 したがって、形状の最初の2ターンは、一般性を失うことなく設定できます。 \\* 2番目のビーズに側鎖がない場合は、対称性を破ることなく6番目の量子ビットを :math:`[1]` に設定することもできます。 \\* 二次チェーンの長さは常に1に制限されているため、チェーンの形状を記述するために必要なのは :math:`1` 回転だけです。"

#: ../../tutorials/09_Protein_Folding.ipynb:1749
msgid "The total amount of qubits we need to represent the shape of the protein will be :math:`2(N_{aminoacids}-3)` if there is a secondary chain coming out of the second bead or :math:`2(N_{aminoacids}-3) - 1`, otherwise. All the other qubits will remain unused during the optimization process. See:"
msgstr "タンパク質の形状を表すために必要な量子ビットの合計量は、2番目のビーズから出ている二次鎖がある場合は :math:`2(N_{aminoacids}-3)` 、そうでない場合は :math:`2(N_{aminoacids}-3) - 1` になります。 他のすべての量子ビットは、最適化プロセス中は未使用のままになります。 見てみましょう。"

#: ../../tutorials/09_Protein_Folding.ipynb:1802
msgid "Now that we know which qubits encode which information, we can decode the bitstring into the explicit turns that form the shape of the protein."
msgstr "どの量子ビットがどの情報をエンコードするかが分かったので、ビット列を明示的に変形させてタンパク質の形に変換することができます。"

#: ../../tutorials/09_Protein_Folding.ipynb:1851
msgid "From this sequence of turns we can get the cartesian coordinates of each of the aminoacids of the protein."
msgstr "この順序から、タンパク質のアミノ酸それぞれのカルテシア座標を得ることができます。"

#: ../../tutorials/09_Protein_Folding.ipynb:1914
msgid "And finally, we can also plot the structure of the protein in 3D. Note that when rendered with the proper backend this plot can be interactively rotated."
msgstr "そして最後に、タンパク質の構造を 3Dでプロットすることができます。 適切なバックエンドでレンダリングされる場合、このプロットはインタラクティブに回転させることができます。"

#: ../../tutorials/09_Protein_Folding.ipynb:1944
msgid "And here is an example with side chains."
msgstr "これはサイド・チェーンの例です"

#: ../../tutorials/09_Protein_Folding.ipynb:1989
msgid "References"
msgstr "参考文献"

#: ../../tutorials/09_Protein_Folding.ipynb:2000
#, python-format
msgid "[1] https://en.wikipedia.org/wiki/Levinthal%27s_paradox"
msgstr "[1] https://en.wikipedia.org/wiki/Levinthal%27s_paradox"

#: ../../tutorials/09_Protein_Folding.ipynb:2002
msgid "[2] A.Robert, P.Barkoutsos, S.Woerner and I.Tavernelli, Resource-efficient quantum algorithm for protein folding, NPJ Quantum Information, 2021, https://doi.org/10.1038/s41534-021-00368-4"
msgstr "[2] A.Robert, P.Barkoutsos, S.Woerner and I.Tavernelli, Resource-efficient quantum algorithm for protein folding, NPJ Quantum Information, 2021, https://doi.org/10.1038/s41534-021-00368-4"

#: ../../tutorials/09_Protein_Folding.ipynb:2004
msgid "[3] IUPAC–IUB Commission on Biochemical Nomenclature (1972). “A one-letter notation for aminoacid sequences”. Pure and Applied Chemistry. 31 (4): 641–645. doi:10.1351/pac197231040639. PMID 5080161."
msgstr "[3] IUPAC–IUB Commission on Biochemical Nomenclature (1972). “A one-letter notation for aminoacid sequences”. Pure and Applied Chemistry. 31 (4): 641–645. doi:10.1351/pac197231040639. PMID 5080161."

#: ../../tutorials/09_Protein_Folding.ipynb:2006
msgid "[4] https://en.wikipedia.org/wiki/Amino_acid"
msgstr "[4] https://en.wikipedia.org/wiki/Amino_acid"

#: ../../tutorials/09_Protein_Folding.ipynb:2008
msgid "[5] S. Miyazawa and R. L.Jernigan, Residue – Residue Potentials with a Favorable Contact Pair Term and an Unfavorable High Packing Density Term for Simulation and Threading, J. Mol. Biol.256, 623–644, 1996, Table 3, https://doi.org/10.1006/jmbi.1996.0114"
msgstr "[5] S. Miyazawa and R. L.Jernigan, Residue – Residue Potentials with a Favorable Contact Pair Term and an Unfavorable High Packing Density Term for Simulation and Threading, J. Mol. Biol.256, 623–644, 1996, Table 3, https://doi.org/10.1006/jmbi.1996.0114"

#: ../../tutorials/09_Protein_Folding.ipynb:2010
msgid "[6] P.Barkoutsos, G. Nannichini, A.Robert, I.Tavernelli, S.Woerner, Improving Variational Quantum Optimization using CVaR, Quantum 4, 256, 2020, https://doi.org/10.22331/q-2020-04-20-256"
msgstr "[6] P.Barkoutsos, G. Nannichini, A.Robert, I.Tavernelli, S.Woerner, Improving Variational Quantum Optimization using CVaR, Quantum 4, 256, 2020, https://doi.org/10.22331/q-2020-04-20-256"

