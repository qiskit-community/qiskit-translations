msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-01 15:55+0000\n"
"PO-Revision-Date: 2023-09-01 16:18\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /main/nature/docs/locale/en/LC_MESSAGES/tutorials/01_electronic_structure.po\n"
"X-Crowdin-File-ID: 9666\n"

#: ../../tutorials/01_electronic_structure.ipynb:9
msgid "This page was generated from `docs/tutorials/01_electronic_structure.ipynb`__."
msgstr "このページは `docs/tutorials/01_electronic_structure.ipynb`__ から生成されました。"

#: ../../tutorials/01_electronic_structure.ipynb:9
msgid "Electronic structure"
msgstr "電子構造"

#: ../../tutorials/01_electronic_structure.ipynb:21
msgid "Introduction"
msgstr "はじめに"

#: ../../tutorials/01_electronic_structure.ipynb:23
msgid "The molecular Hamiltonian is"
msgstr "ある分子のハミルトニアンは、以下の数式で表されます。"

#: ../../tutorials/01_electronic_structure.ipynb:25
msgid "\\mathcal{H} = - \\sum_I \\frac{\\nabla_{R_I}^2}{M_I} - \\sum_i \\frac{\\nabla_{r_i}^2}{m_e} - \\sum_I\\sum_i  \\frac{Z_I e^2}{|R_I-r_i|} + \\sum_i \\sum_{j>i} \\frac{e^2}{|r_i-r_j|} + \\sum_I\\sum_{J>I} \\frac{Z_I Z_J e^2}{|R_I-R_J|}"
msgstr "\\mathcal{H} = - \\sum_I \\frac{\\nabla_{R_I}^2}{M_I} - \\sum_i \\frac{\\nabla_{r_i}^2}{m_e} - \\sum_I\\sum_i  \\frac{Z_I e^2}{|R_I-r_i|} + \\sum_i \\sum_{j>i} \\frac{e^2}{|r_i-r_j|} + \\sum_I\\sum_{J>I} \\frac{Z_I Z_J e^2}{|R_I-R_J|}"

#: ../../tutorials/01_electronic_structure.ipynb:30
msgid "Because the nuclei are much heavier than the electrons they do not move on the same time scale and therefore, the behavior of nuclei and electrons can be decoupled. This is the Born-Oppenheimer approximation."
msgstr "原子核は電子よりも非常に重い質量を有するため、原子核は電子に比べて非常に遅い運動速度となります。したがって、原子核と電子の運動は分離しているとみなして考えることができます。 これはボルン・オッペンハイマー近似と呼ばれています。"

#: ../../tutorials/01_electronic_structure.ipynb:32
msgid "Therefore, one can first tackle the electronic problem with the nuclear coordinates entering only as parameters. The energy levels of the electrons in the molecule can then be found by solving the non-relativistic time independent Schrödinger equation,"
msgstr ""

#: ../../tutorials/01_electronic_structure.ipynb:34
msgid "\\mathcal{H}_{\\text{el}} |\\Psi_{n}\\rangle = E_{n} |\\Psi_{n}\\rangle"
msgstr "\\mathcal{H}_{\\text{el}} |\\Psi_{n}\\rangle = E_{n} |\\Psi_{n}\\rangle"

#: ../../tutorials/01_electronic_structure.ipynb:39
msgid "where"
msgstr "ここで"

#: ../../tutorials/01_electronic_structure.ipynb:41
msgid "\\mathcal{H}_{\\text{el}} = - \\sum_i \\frac{\\nabla_{r_i}^2}{m_e} - \\sum_I\\sum_i  \\frac{Z_I e^2}{|R_I-r_i|} + \\sum_i \\sum_{j>i} \\frac{e^2}{|r_i-r_j|}."
msgstr "\\mathcal{H}_{\\text{el}} = - \\sum_i \\frac{\\nabla_{r_i}^2}{m_e} - \\sum_I\\sum_i \\frac{Z_I e^2}{|R_I-r_i|} + \\sum_i \\sum_{j>i} \\frac{e^2}{|r_i-r_j|}."

#: ../../tutorials/01_electronic_structure.ipynb:46
msgid "In particular the ground state energy is given by:"
msgstr "特に、電子の基底状態エネルギーは下記で与えられます。"

#: ../../tutorials/01_electronic_structure.ipynb:48
msgid "E_0 = \\frac{\\langle \\Psi_0 | H_{\\text{el}} | \\Psi_0 \\rangle}{\\langle \\Psi_0 | \\Psi_0 \\rangle}"
msgstr "E_0 = \\frac{\\langle \\Psi_0 | H_{\\text{el}} | \\Psi_0 \\rangle}{\\langle \\Psi_0 | \\Psi_0 \\rangle}"

#: ../../tutorials/01_electronic_structure.ipynb:53
msgid "where :math:`\\Psi_0` is the ground state of the system."
msgstr "ここで :math:`\\Psi_0` は、系の基底状態です。"

#: ../../tutorials/01_electronic_structure.ipynb:55
msgid "However, the dimensionality of this problem grows exponentially with the number of degrees of freedom. To tackle this issue we would like to prepare :math:`\\Psi_0` on a quantum computer and measure the Hamiltonian expectation value (or :math:`E_0`) directly."
msgstr "しかし、この問題の有する次元数は、分子/電子の自由度に応じて指数関数的に増大します。そのため、 こうした計算の次元数の増加を押さえるアプローチとして、 :math:`\\Psi_0` を量子コンピューター上に用意してハミルトニアンの期待値(または :math:`E_0` )を直接測定する方法が考えられています。"

#: ../../tutorials/01_electronic_structure.ipynb:57
msgid "So how do we do that concretely?"
msgstr "では具体的にはどのようなアプローチなのでしょうか？"

#: ../../tutorials/01_electronic_structure.ipynb:69
msgid "Starting from the Hartree-Fock solution"
msgstr "Hartree-Fock ソリューションからの開始"

#: ../../tutorials/01_electronic_structure.ipynb:71
msgid "A good starting point for solving this problem is the Hartree-Fock (HF) method. This method approximates the N-body problem by N one-body problems where each electron evolves in the mean-field of the others. Classically solving the HF equations is efficient and leads to the exact exchange energy but does not include any electron correlation. Therefore, it is usually a good starting point to which to add correlation."
msgstr "この問題を解くアプローチの出発点として、ハー トリー・フォック法が用いられます。 この手法では、電子N体を独立したN個体の問題に近似（平均場近似）します。古典コンピューター上でハートリー・フォック方程式を解くことは効率的であり、正確な交換エネルギーにつながりますが、電子同士の相関は考慮されていません。 したがって、電子同士の相関を計算に考慮するのは良い議論の出発点とされています。"

#: ../../tutorials/01_electronic_structure.ipynb:73
msgid "The Hamiltonian can then be re-expressed in the basis of the solutions of the HF method, also called Molecular Orbitals (MOs):"
msgstr "上述の電子のハミルトニアンは、ハートリー・フォック法、別名分子軌道法（MOs）を用いても数学的に表現可能です。"

#: ../../tutorials/01_electronic_structure.ipynb:75
msgid "\\hat{H}_{elec}=\\sum_{pq} h_{pq} \\hat{a}^{\\dagger}_p \\hat{a}_q +\n"
"\\frac{1}{2} \\sum_{pqrs} h_{pqrs}  \\hat{a}^{\\dagger}_p \\hat{a}^{\\dagger}_q \\hat{a}_r  \\hat{a}_s"
msgstr "\\hat{H}_{elec}=\\sum_{pq} h_{pq} \\hat{a}^{\\dagger}_p \\hat{a}_q +\n"
"\\frac{1}{2} \\sum_{pqrs} h_{pqrs}  \\hat{a}^{\\dagger}_p \\hat{a}^{\\dagger}_q \\hat{a}_r  \\hat{a}_s"

#: ../../tutorials/01_electronic_structure.ipynb:81
msgid "with the 1-body integrals"
msgstr "一体積分は次の通りです。"

#: ../../tutorials/01_electronic_structure.ipynb:83
msgid "h_{pq} = \\int \\phi^*_p(r) \\left( -\\frac{1}{2} \\nabla^2 - \\sum_{I} \\frac{Z_I}{R_I- r} \\right)   \\phi_q(r)dr"
msgstr "h_{pq} = \\int \\phi^*_p(r) \\left( -\\frac{1}{2} \\nabla^2 - \\sum_{I} \\frac{Z_I}{R_I- r} \\right)   \\phi_q(r)dr"

#: ../../tutorials/01_electronic_structure.ipynb:88
msgid "and 2-body integrals"
msgstr "二体積分は次の通りです。"

#: ../../tutorials/01_electronic_structure.ipynb:90
msgid "h_{pqrs} = \\int \\frac{\\phi^*_p(r_1)  \\phi^*_q(r_2) \\phi_r(r_2)  \\phi_s(r_1)}{|r_1-r_2|}dr_1dr_2."
msgstr "h_{pqrs} = \\int \\frac{\\phi^*_p(r_1)  \\phi^*_q(r_2) \\phi_r(r_2)  \\phi_s(r_1)}{|r_1-r_2|}dr_1dr_2."

#: ../../tutorials/01_electronic_structure.ipynb:95
msgid "The MOs (:math:`\\phi_u`) can be occupied or virtual (unoccupied). One MO can contain 2 electrons. However, in what follows we actually work with Spin Orbitals which are associated with a spin up (:math:`\\alpha`) of spin down (:math:`\\beta`) electron. Thus Spin Orbitals can contain one electron or be unoccupied."
msgstr "分子軌道法(:math:`\\phi_u`)では、被占軌道もしくは空軌道の状態を取ることができます。ある一つの分子軌道には2つの電子まで入ることができます。しかし、下記では、2つのスピン軌道状態（上向き :math:`\\alpha` または下向き :math:`\\beta`）のどちらかを取り扱います。したがって、あるスピン軌道は1つの電子を含むかもしくは空軌道となります。"

#: ../../tutorials/01_electronic_structure.ipynb:97
msgid "Note: when referring to the number of orbitals, we will be using the number of *spatial* orbitals. This refers to any orbital in Cartesian space (whether its a molecular orbital or in another basis does not matter here). Each spatial orbital is then generally split into two *spin* orbitals."
msgstr "注記: 軌道の数を参照する場合、*空間* 軌道の数を使用します。 これは、デカルト空間の任意の軌道を指します (ここでは、分子軌道であろうと別の基底であろうと関係ありません)。 次に、各空間軌道は通常、2 つの *スピン* 軌道に分割されます。"

#: ../../tutorials/01_electronic_structure.ipynb:99
msgid "We now show how to concretely realise these steps with Qiskit."
msgstr "実際にQiskitにて上記の計算過程を実現する方法を紹介します。"

#: ../../tutorials/01_electronic_structure.ipynb:111
msgid "Obtaining an initial Hartree-Fock solution"
msgstr "初期 Hartree-Fock ソリューションの取得"

#: ../../tutorials/01_electronic_structure.ipynb:113
msgid "Qiskit is interfaced with different classical codes which are able to find the HF solutions. Interfacing between Qiskit and the following codes is already available:"
msgstr "Qiskit はハートリー・フォック法を解く異なる古典コードとのインタフェースがあります。Qiskit と以下のコードには既にインターフェースがあります:"

#: ../../tutorials/01_electronic_structure.ipynb:115
msgid "Gaussian"
msgstr "Gaussian"

#: ../../tutorials/01_electronic_structure.ipynb:116
msgid "Psi4"
msgstr "Psi4"

#: ../../tutorials/01_electronic_structure.ipynb:117
msgid "PySCF"
msgstr "PySCF"

#: ../../tutorials/01_electronic_structure.ipynb:119
msgid "In the following we set up a PySCF driver, for the hydrogen molecule at equilibrium bond length (0.735 angstrom) in the singlet state and with no charge."
msgstr "以下では、平衡結合距離 (0.735 angstrom) にある電荷なしでシングレット状態の水素分子で、PySCFドライバーを設定しました。"

#: ../../tutorials/01_electronic_structure.ipynb:149
msgid "Running this driver, will yield an ``ElectronicStructureProblem``, Qiskit Nature's representation of the electronic structure problem which we are interested in solving. For further information about the drivers see https://qiskit.org/documentation/nature/apidocs/qiskit_nature.second_q.drivers.html"
msgstr "このドライバーを実行すると、QisKit Natureの解析に興味のある電子構造問題を表現する ``ElectronicStructureProblem`` が生成されます。 ドライバーの詳細については、https://qiskit.org/documentation/nature/apidocs/qiskit_nature.second_q.drivers.html を参照してください。"

#: ../../tutorials/01_electronic_structure.ipynb:196
msgid "The ``ElectronicStructureProblem`` and its components"
msgstr "``ElectronicStructureProblem`` とそのコンポーネント"

#: ../../tutorials/01_electronic_structure.ipynb:198
msgid "Let us spend some time to understand this problem instance and its components."
msgstr "この問題のインスタンスとそのコンポーネントを理解するのに時間を費やしてみましょう。"

#: ../../tutorials/01_electronic_structure.ipynb:210
msgid "The ``ElectronicEnergy`` Hamiltonian"
msgstr "``ElectronicEnergy`` ハミルトニアン"

#: ../../tutorials/01_electronic_structure.ipynb:212
msgid "The most important aspect is the internal Hamiltonian; in this case an ``ElectronicEnergy`` hamiltonian. This class is able to generate the second-quantized operator from the 1- and 2-body integrals which the classical code has computed for us."
msgstr "最も重要な側面は内部ハミルトニアンです。このケースでは、``ElectronicEnergy`` ハミルトニアンです。 このクラスは、古典的なコードが計算した1体積分と2体積分から第2量子化演算子を生成することができます。"

#: ../../tutorials/01_electronic_structure.ipynb:214
msgid "**IMPORTANT:** The container class for the integral coefficients (``PolynomialTensor``) requires the 2-body terms to be provided in **physicist order**!"
msgstr "**重要:** 積分係数のコンテナクラス ( ``PolynomialTensor``) は、 **物理順序** で2体項を提供する必要があります！"

#: ../../tutorials/01_electronic_structure.ipynb:456
msgid "Note, that this is purely the **electronic** Hamiltonian of the system. That means, that the *nuclear repulsion energy* is not included. Instead, Qiskit Nature will add this constant energy offset in a post-processing step, in order to compute the total energy of your system. To learn how to include the nuclear repulsion energy in this operator, please refer to the documentation of the ``ElectronicEnergy`` class `here <https://qiskit.org/documentation/nature/stubs/qiskit_nature.second_q.hamiltonians.ElectronicEnergy.html>`__."
msgstr "これは純粋にシステムの **電子** ハミルトニアンであることに注意してください。つまり、 *核反発エネルギー* は含まれていません。 代わりに、Qiskit Nature はシステムの総エネルギーを計算するために、後処理ステップでこの一定のエネルギーオフセットを追加します。 この演算子に核反発エネルギーを含める方法については、``ElectronicEnergy`` クラスの `こちら <https://qiskit.org/documentation/nature/stubs/qiskit_nature.second_q.hamiltonians.ElectronicEnergy.html>`__ のドキュメントを参照してください。"

#: ../../tutorials/01_electronic_structure.ipynb:504
msgid "More attributes of the ``ElectronicStructureProblem``"
msgstr "``ElectronicStructureProblem`` の他の属性"

#: ../../tutorials/01_electronic_structure.ipynb:506
msgid "Below we list some additional attributes of our ``problem`` instance:"
msgstr "以下に、``problem`` インスタンスの追加属性を示します。"

#: ../../tutorials/01_electronic_structure.ipynb:692
msgid "To learn more about the basis of your problem, please refer to the tutorial on the ```BasisTransformer`` <05_problem_transformers.ipynb>`__."
msgstr "問題の基礎について詳しくは、```BasisTransformer`` <05_problem_transformers.ipynb>`__ のチュートリアルを参照してください。"

#: ../../tutorials/01_electronic_structure.ipynb:704
msgid "Additional observables"
msgstr "追加の観測量"

#: ../../tutorials/01_electronic_structure.ipynb:706
msgid "The ``ElectronicStructureProblem`` also contains additional operator factories, which will generate observables to be evaluated at the ground- and excited-states at the end of your computation."
msgstr "``ElectronicStructureProblem`` には追加の演算子ファクトリーも含まれており、計算の最後に基底および励起状態で評価される観測データが生成されます。"

#: ../../tutorials/01_electronic_structure.ipynb:892
msgid "For more information about these properties, please refer to `their tutorial <09_properties.ipynb>`__."
msgstr "これらのプロパティの詳細については、 `こちらのチュートリアル <09_properties.ipynb>`__ を参照してください。"

#: ../../tutorials/01_electronic_structure.ipynb:904
msgid "Solving the ``ElectronicStructureProblem``"
msgstr "``ElectronicStructureProblem`` の解決"

#: ../../tutorials/01_electronic_structure.ipynb:906
msgid "In the following, we will compute the ground-state of our problem instance. To learn more about the individual components that go into the ``GroundStateSolver``, please refer to the `ground state tutorial <./03_ground_state_solvers.ipynb>`__."
msgstr "以下では、我々の問題インスタンスの基底状態を計算します。 ``GroundStateSolver`` に入る個々のコンポーネントの詳細については、 `基底状態チュートリアル <./03_ground_state_solvers.ipynb>`__ を参照してください。"

