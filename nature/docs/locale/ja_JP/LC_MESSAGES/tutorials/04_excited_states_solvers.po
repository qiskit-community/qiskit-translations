msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-11 12:47+0000\n"
"PO-Revision-Date: 2023-05-11 12:57\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/04_excited_states_solvers.po\n"
"X-Crowdin-File-ID: 9672\n"

#: ../../tutorials/04_excited_states_solvers.ipynb:9
msgid "This page was generated from `docs/tutorials/04_excited_states_solvers.ipynb`__."
msgstr "このページは `docs/tutorials/04_excited_states_solvers.ipynb`__ から生成されました。"

#: ../../tutorials/04_excited_states_solvers.ipynb:9
msgid "Excited states solvers"
msgstr "励起状態ソルバー"

#: ../../tutorials/04_excited_states_solvers.ipynb:21
msgid "Introduction"
msgstr "はじめに"

#: ../../tutorials/04_excited_states_solvers.ipynb:23
msgid "|c540bd7931cd4a0a81c17d7b33180230|"
msgstr ""

#: ../../tutorials/04_excited_states_solvers.ipynb:29
msgid "c540bd7931cd4a0a81c17d7b33180230"
msgstr ""

#: ../../tutorials/04_excited_states_solvers.ipynb:25
msgid "In this tutorial we are going to discuss the excited states calculation interface of Qiskit Nature. The goal is to compute the excited states of a molecular Hamiltonian. This Hamiltonian can be electronic or vibrational. To know more about the preparation of the Hamiltonian, check out the `Electronic structure <01_electronic_structure.ipynb>`__ and `Vibrational structure tutorials <02_vibrational_structure.ipynb>`__."
msgstr "このチュートリアルでは、Qiskit Natureの励起状態計算インターフェースについて説明します。 目的は分子ハミルトニアンの励起状態を計算することです。 このハミルトニアンは、電子的あるいは振動的なものである可能性があります。 ハミルトニアンの準備についての詳細は、 `電子構造 <01_electronic_structure.ipynb>`__ と `振動構造のチュートリアル <02_vibrational_structure.ipynb>`__ を参照してください。"

#: ../../tutorials/04_excited_states_solvers.ipynb:27
msgid "The first step is to define the molecular system. In the following we ask for the electronic part of a hydrogen molecule."
msgstr "まず分子系の定義から始めます。以下では、水素分子の電子部分を求めています。"

#: ../../tutorials/04_excited_states_solvers.ipynb:61
msgid "We will also be sticking to the Jordan-Wigner mapping. To learn more about the various mappers available in Qiskit Nature, check out the `Qubit Mappers tutorial <06_qubit_mappers.ipynb>`__."
msgstr "また、Jordan-Wignerマッピングを使う予定です。Qiskit Natureで利用できる様々なマッパーについてもっと知りたい方は、`量子ビット空間への変換 <06_qubit_mappers.ipynb>`__ をチェックしてください。"

#: ../../tutorials/04_excited_states_solvers.ipynb:85
msgid "The Solver"
msgstr "ソルバー"

#: ../../tutorials/04_excited_states_solvers.ipynb:87
msgid "After these steps we need to define a solver. The solver is the algorithm through which the excited states are computed."
msgstr "次に、ソルバーを定義する必要があります。ソルバーとは、励起状態を求めるアルゴリズムのことです。"

#: ../../tutorials/04_excited_states_solvers.ipynb:89
msgid "Let's first start with a purely classical example: the ``NumPyEigensolver``. This algorithm exactly diagonalizes the Hamiltonian. Although it scales badly, it can be used on small systems to check the results of the quantum algorithms. Here, we are only interested to look at eigenstates with a given number of particle. To compute only those states a filter function can be passed to the ``NumPyEigensolver``. A default filter function is already implemented in Qiskit Nature and will be extracted automatically, if you enable the ``use_default_filter_criterion`` setting like so:"
msgstr "まず、純粋に古典的な例として ``NumPyEigensolver`` から始めましょう。このアルゴリズムはハミルトニアンを正確に対角化します。このアルゴリズムはスケールが大きいですが、量子アルゴリズムの結果を確認するために、小さなシステムで使用することができます。ここでは、与えられた粒子数の固有状態を見ることにのみ興味があります。これらの状態のみを計算するために、フィルター関数を ``NumPyEigensolver`` に渡すことができます。デフォルトのフィルター関数はQiskit Natureに既に実装されており、 ``use_default_filter_criterion`` の設定を有効にすると自動的に抽出されます："

#: ../../tutorials/04_excited_states_solvers.ipynb:113
msgid "The excitation energies can also be accessed with the `qEOM algorithm <https://journals.aps.org/prresearch/abstract/10.1103/PhysRevResearch.2.043140>`__. The EOM method finds the excitation energies (differences in energy between the ground state and all :math:`n`\\ th excited states) by solving the following pseudo-eigenvalue problem."
msgstr "励起エネルギーは、 `qEOM アルゴリズム <https://journals.aps.org/prresearch/abstract/10.1103/PhysRevResearch.2.043140>`__によっても求めることができます。 EOM 法は、以下の擬似固有値問題を解くことにより、励起エネルギー (基底状態と全ての第 :math:`n` 励起状態との間のエネルギー差) を求めます。"

#: ../../tutorials/04_excited_states_solvers.ipynb:115
msgid "\\begin{pmatrix}\n"
"    \\text{M} & \\text{Q}\\\\\n"
"    \\text{Q*} & \\text{M*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}\n"
"= E_{0n}\n"
"\\begin{pmatrix}\n"
"    \\text{V} & \\text{W}\\\\\n"
"    -\\text{W*} & -\\text{V*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}"
msgstr "\\begin{pmatrix}\n"
"    \\text{M} & \\text{Q}\\\\\n"
"    \\text{Q*} & \\text{M*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}\n"
"= E_{0n}\n"
"\\begin{pmatrix}\n"
"    \\text{V} & \\text{W}\\\\\n"
"    -\\text{W*} & -\\text{V*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}"

#: ../../tutorials/04_excited_states_solvers.ipynb:136
msgid "with"
msgstr "ただし"

#: ../../tutorials/04_excited_states_solvers.ipynb:138
msgid "M_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger},\\hat{\\text{H}}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"
msgstr "M_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger},\\hat{\\text{H}}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"

#: ../../tutorials/04_excited_states_solvers.ipynb:143
msgid "Q_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{H}}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"
msgstr "Q_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{H}}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"

#: ../../tutorials/04_excited_states_solvers.ipynb:148
msgid "V_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"
msgstr "V_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"

#: ../../tutorials/04_excited_states_solvers.ipynb:153
msgid "W_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_\\alpha}^{(\\alpha)})^{\\dagger}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"
msgstr "W_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_\\alpha}^{(\\alpha)})^{\\dagger}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"

#: ../../tutorials/04_excited_states_solvers.ipynb:158
msgid "Although the previous equation can be solved classically, each matrix element must be measured on the quantum computer with the corresponding ground state. To use the qEOM as a solver in Qiskit, we have to define a ground state calculation first, which will provide the required ground state information to the algorithm. With this the qEOM solver can be initialized like so:"
msgstr "上の式は古典的に解くことができますが、各行列要素は対応する基底状態を量子コンピュータ上で測定しなければなりません。QiskitでqEOMをソルバーとして使用するには、まず基底状態の計算を定義する必要があり、これにより必要な基底状態の情報をアルゴリズムに提供することができます。これにより、qEOMソルバーは次のように初期化することができます："

#: ../../tutorials/04_excited_states_solvers.ipynb:205
msgid "The calculation and results"
msgstr "計算と結果"

#: ../../tutorials/04_excited_states_solvers.ipynb:207
msgid "We are now ready to compute the results. Below, we are comparing the results obtained by the exact ``NumPyEigensolver`` with the default filter criterion enabled with the results obtained by the qEOM algorithm."
msgstr "これで結果を計算する準備ができました。以下では、デフォルトのフィルター基準を有効にして、厳密な ``NumPyEigensolver`` で得られた結果と、qEOMアルゴリズムで得られた結果を比較しています。"

#: ../../tutorials/04_excited_states_solvers.ipynb:498
msgid "One can see from these results that one state is missing from the NumPy results. The reason for this is because the spin is also used as a filter and only singlet states are shown. In the following we use a custom filter function to check our results consistently and only filter out states with the incorrect number of particles (in this case the number of particle is 2)."
msgstr "これらの結果から、NumPyの結果から1つの状態が欠落していることがわかります。これは、スピンがフィルターとしても使用され、一重項状態のみが表示されるためです。以下では、カスタムフィルター関数を使用して、結果を一貫してチェックし、間違った粒子数 (この場合の粒子数は2) の状態のみをフィルタリングします。"

