msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-01 18:06+0000\n"
"PO-Revision-Date: 2021-07-01 19:00\n"
"Last-Translator: \n"
"Language-Team: Hindi\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: hi\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/apidocs.po\n"
"X-Crowdin-File-ID: 9558\n"
"Language: hi_IN\n"

#: ../../apidocs/qiskit_nature.rst:3
msgid "Qiskit Nature API Reference"
msgstr ""

#: of qiskit_nature:3
msgid "Qiskit Nature module (:mod:`qiskit_nature`)"
msgstr ""

#: of qiskit_nature:7
msgid "The Qiskit Nature module provides function to experiment with quantum computing for natural science problems, such as in chemistry and physics. For example computing the ground state energy or excited state energies of molecules."
msgstr ""

#: of qiskit_nature:11
msgid "The top-level classes and submodules of qiskit_nature are:"
msgstr ""

#: of qiskit_nature:18:<autosummary>:1
msgid ":obj:`QiskitNatureError <qiskit_nature.QiskitNatureError>`"
msgstr ""

#: of qiskit_nature:18:<autosummary>:1
msgid "Class for errors returned by Qiskit's Nature module."
msgstr ""

#: of qiskit_nature:20 qiskit_nature.drivers:121
msgid "Submodules"
msgstr ""

#: of qiskit_nature:35:<autosummary>:1
msgid ":obj:`algorithms <qiskit_nature.algorithms>`\\"
msgstr ""

#: of qiskit_nature.algorithms:2 qiskit_nature:35:<autosummary>:1
msgid "Algorithms (:mod:`qiskit_nature.algorithms`)"
msgstr ""

#: of qiskit_nature:35:<autosummary>:1
msgid ":obj:`circuit <qiskit_nature.circuit>`\\"
msgstr ""

#: of qiskit_nature.circuit:2 qiskit_nature:35:<autosummary>:1
msgid "Circuit library (:mod:`qiskit_nature.circuit`)"
msgstr ""

#: of qiskit_nature:35:<autosummary>:1
msgid ":obj:`converters <qiskit_nature.converters>`\\"
msgstr ""

#: of qiskit_nature.converters:2 qiskit_nature:35:<autosummary>:1
msgid "Operator to Qubit Operator Converters (:mod:`qiskit_nature.converters`)"
msgstr ""

#: of qiskit_nature:35:<autosummary>:1
msgid ":obj:`drivers <qiskit_nature.drivers>`\\"
msgstr ""

#: of qiskit_nature.drivers:2 qiskit_nature:35:<autosummary>:1
msgid "Chemistry Drivers (:mod:`qiskit_nature.drivers`)"
msgstr ""

#: of qiskit_nature:35:<autosummary>:1
msgid ":obj:`mappers <qiskit_nature.mappers>`\\"
msgstr ""

#: of qiskit_nature.mappers:2 qiskit_nature:35:<autosummary>:1
msgid "Operator to Qubit Mappers (:mod:`qiskit_nature.mappers`)"
msgstr ""

#: of qiskit_nature:35:<autosummary>:1
msgid ":obj:`operators <qiskit_nature.operators>`\\"
msgstr ""

#: of qiskit_nature.operators:2 qiskit_nature:35:<autosummary>:1
msgid "Operators (:mod:`qiskit_nature.operators`)"
msgstr ""

#: of qiskit_nature:35:<autosummary>:1
msgid ":obj:`problems <qiskit_nature.problems>`\\"
msgstr ""

#: of qiskit_nature.problems:2 qiskit_nature:35:<autosummary>:1
msgid "Problems (:mod:`qiskit_nature.problems`)"
msgstr ""

#: of qiskit_nature:35:<autosummary>:1
msgid ":obj:`results <qiskit_nature.results>`\\"
msgstr ""

#: of qiskit_nature.results:2 qiskit_nature:35:<autosummary>:1
msgid "Results (:mod:`qiskit_nature.results`)"
msgstr ""

#: of qiskit_nature:35:<autosummary>:1
msgid ":obj:`runtime <qiskit_nature.runtime>`\\"
msgstr ""

#: of qiskit_nature.runtime:2 qiskit_nature:35:<autosummary>:1
msgid "Qiskit Nature Runtime (:mod:`qiskit_nature.runtime`)"
msgstr ""

#: of qiskit_nature:35:<autosummary>:1
msgid ":obj:`transformers <qiskit_nature.transformers>`\\"
msgstr ""

#: of qiskit_nature.transformers:2 qiskit_nature:35:<autosummary>:1
msgid "QMolecule Transformers (:mod:`qiskit_nature.transformers`)"
msgstr ""

#: of qiskit_nature.algorithms:6
msgid "These are natural science algorithms to solve specific problems such as finding the ground state energy, excited state energies or potential energy surfaces."
msgstr ""

#: of qiskit_nature.algorithms:10
msgid "Excited State Solvers"
msgstr ""

#: of qiskit_nature.algorithms:11
msgid "Algorithms that can find the eigenvalues of an operator, e.g. excited states for chemistry."
msgstr ""

#: of qiskit_nature.algorithms:13 qiskit_nature.algorithms:44
msgid "The interface for such solvers,"
msgstr ""

#: of qiskit_nature.algorithms:20:<autosummary>:1
msgid ":obj:`ExcitedStatesSolver <qiskit_nature.algorithms.ExcitedStatesSolver>`"
msgstr ""

#: of qiskit_nature.algorithms:20:<autosummary>:1
msgid "The excited states calculation interface"
msgstr ""

#: of qiskit_nature.algorithms:21 qiskit_nature.algorithms:52
msgid "the solvers themselves"
msgstr ""

#: of qiskit_nature.algorithms:29:<autosummary>:1
msgid ":obj:`ExcitedStatesEigensolver <qiskit_nature.algorithms.ExcitedStatesEigensolver>`"
msgstr ""

#: of qiskit_nature.algorithms:29:<autosummary>:1
msgid "The calculation of excited states via an Eigensolver algorithm"
msgstr ""

#: of qiskit_nature.algorithms:29:<autosummary>:1
msgid ":obj:`QEOM <qiskit_nature.algorithms.QEOM>`"
msgstr ""

#: of qiskit_nature.algorithms:29:<autosummary>:1
msgid "The calculation of excited states via the qEOM algorithm"
msgstr ""

#: of qiskit_nature.algorithms:30 qiskit_nature.algorithms:61
msgid "and factories to provision Quantum and/or Classical algorithms upon which the above solvers may depend"
msgstr ""

#: of qiskit_nature.algorithms:39:<autosummary>:1
msgid ":obj:`EigensolverFactory <qiskit_nature.algorithms.EigensolverFactory>`"
msgstr ""

#: of qiskit_nature.algorithms:39:<autosummary>:1
msgid "A factory to construct a eigensolver based on a qubit operator transformation."
msgstr ""

#: of qiskit_nature.algorithms:39:<autosummary>:1
msgid ":obj:`NumPyEigensolverFactory <qiskit_nature.algorithms.NumPyEigensolverFactory>`"
msgstr ""

#: of qiskit_nature.algorithms:39:<autosummary>:1
msgid "A factory to construct a NumPyEigensolver."
msgstr ""

#: of qiskit_nature.algorithms:41
msgid "Ground State Solvers"
msgstr ""

#: of qiskit_nature.algorithms:42
msgid "Algorithms that can find the minimum eigenvalue of an operator, e.g. ground state for chemistry."
msgstr ""

#: of qiskit_nature.algorithms:51:<autosummary>:1
msgid ":obj:`GroundStateSolver <qiskit_nature.algorithms.GroundStateSolver>`"
msgstr ""

#: of qiskit_nature.algorithms:51:<autosummary>:1
msgid "The ground state calculation interface"
msgstr ""

#: of qiskit_nature.algorithms:60:<autosummary>:1
msgid ":obj:`AdaptVQE <qiskit_nature.algorithms.AdaptVQE>`"
msgstr ""

#: of qiskit_nature.algorithms:60:<autosummary>:1
msgid "A ground state calculation employing the AdaptVQE algorithm."
msgstr ""

#: of qiskit_nature.algorithms:60:<autosummary>:1
msgid ":obj:`GroundStateEigensolver <qiskit_nature.algorithms.GroundStateEigensolver>`"
msgstr ""

#: of qiskit_nature.algorithms:60:<autosummary>:1
msgid "Ground state computation using a minimum eigensolver."
msgstr ""

#: of qiskit_nature.algorithms:72:<autosummary>:1
msgid ":obj:`MinimumEigensolverFactory <qiskit_nature.algorithms.MinimumEigensolverFactory>`"
msgstr ""

#: of qiskit_nature.algorithms:72:<autosummary>:1
msgid "A factory to construct a minimum eigensolver based on a qubit operator transformation."
msgstr ""

#: of qiskit_nature.algorithms:72:<autosummary>:1
msgid ":obj:`NumPyMinimumEigensolverFactory <qiskit_nature.algorithms.NumPyMinimumEigensolverFactory>`"
msgstr ""

#: of qiskit_nature.algorithms:72:<autosummary>:1
msgid "A factory to construct a NumPyMinimumEigensolver."
msgstr ""

#: of qiskit_nature.algorithms:72:<autosummary>:1
msgid ":obj:`VQEUCCFactory <qiskit_nature.algorithms.VQEUCCFactory>`"
msgstr ""

#: of qiskit_nature.algorithms:72:<autosummary>:1
msgid "A factory to construct a VQE minimum eigensolver with UCCSD ansatz wavefunction."
msgstr ""

#: of qiskit_nature.algorithms:72:<autosummary>:1
msgid ":obj:`VQEUVCCFactory <qiskit_nature.algorithms.VQEUVCCFactory>`"
msgstr ""

#: of qiskit_nature.algorithms:72:<autosummary>:1
msgid "A factory to construct a VQE minimum eigensolver with UVCCSD ansatz wavefunction."
msgstr ""

#: of qiskit_nature.algorithms:74
msgid "Potential Energy Surface Samplers"
msgstr ""

#: of qiskit_nature.algorithms:75 qiskit_nature.algorithms.pes_samplers:7
msgid "Algorithms that can compute potential energy surfaces."
msgstr ""

#: of qiskit_nature.algorithms:82:<autosummary>:1
msgid ":obj:`BOPESSampler <qiskit_nature.algorithms.BOPESSampler>`"
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:14:<autosummary>:1
#: qiskit_nature.algorithms:82:<autosummary>:1
msgid "Class to evaluate the Born-Oppenheimer Potential Energy Surface (BOPES)."
msgstr ""

#: of qiskit_nature.algorithms:83
msgid "The samplers include extrapolators to facilitate convergence across a set of points and support of various potentials. More detail may be found in the sub-module linked below"
msgstr ""

#: of qiskit_nature.algorithms:90:<autosummary>:1
msgid ":obj:`pes_samplers <qiskit_nature.algorithms.pes_samplers>`\\"
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:2
#: qiskit_nature.algorithms:90:<autosummary>:1
msgid "Potential energy surface samplers (:mod:`qiskit_nature.algorithms.pes_samplers`)"
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:3
msgid "Potential energy surface samplers."
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:14:<autosummary>:1
msgid ":obj:`BOPESSampler <qiskit_nature.algorithms.pes_samplers.BOPESSampler>`"
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:15
msgid "When used with variational solvers, such as VQE, when computing a set of points there is support for extrapolation from prior solution(s) to bootstrap the algorithm with a better starting point to facilitate convergence. Extrapolators are:"
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:29:<autosummary>:1
msgid ":obj:`Extrapolator <qiskit_nature.algorithms.pes_samplers.Extrapolator>`"
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:29:<autosummary>:1
msgid "This class is based on performing extrapolation of parameters of a wavefunction for a variational algorithm defined in the ansatzes as part of the Qiskit module."
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:29:<autosummary>:1
msgid ":obj:`DifferentialExtrapolator <qiskit_nature.algorithms.pes_samplers.DifferentialExtrapolator>`"
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:29:<autosummary>:1
msgid "An extrapolator based on treating each param set as a point in space, and fitting a Hamiltonian which evolves each point to the next."
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:29:<autosummary>:1
msgid ":obj:`PCAExtrapolator <qiskit_nature.algorithms.pes_samplers.PCAExtrapolator>`"
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:29:<autosummary>:1
msgid "A wrapper extrapolator which reduces the points' dimensionality with PCA, performs extrapolation in the transformed pca space, and inverse transforms the results before returning."
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:29:<autosummary>:1
msgid ":obj:`PolynomialExtrapolator <qiskit_nature.algorithms.pes_samplers.PolynomialExtrapolator>`"
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:29:<autosummary>:1
msgid "An extrapolator based on fitting each parameter to a polynomial function of a user-specified degree."
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:29:<autosummary>:1
msgid ":obj:`SieveExtrapolator <qiskit_nature.algorithms.pes_samplers.SieveExtrapolator>`"
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:29:<autosummary>:1
msgid "A wrapper extrapolator which clusters the parameter values - either before extrapolation, after, or both - into two large and small clusters, and sets the small clusters' parameters to zero."
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:29:<autosummary>:1
msgid ":obj:`WindowExtrapolator <qiskit_nature.algorithms.pes_samplers.WindowExtrapolator>`"
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:29:<autosummary>:1
msgid "An extrapolator which wraps another extrapolator, limiting the internal extrapolator's ground truth parameter set to a fixed window size."
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:30
msgid "There is also a set of support function for potentials:"
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:42:<autosummary>:1
msgid ":obj:`EnergySurface1DSpline <qiskit_nature.algorithms.pes_samplers.EnergySurface1DSpline>`"
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:42:<autosummary>:1
msgid "A simple cubic spline interpolation for the potential energy surface."
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:42:<autosummary>:1
msgid ":obj:`HarmonicPotential <qiskit_nature.algorithms.pes_samplers.HarmonicPotential>`"
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:42:<autosummary>:1
msgid "Implements a 1D Harmonic potential."
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:42:<autosummary>:1
msgid ":obj:`MorsePotential <qiskit_nature.algorithms.pes_samplers.MorsePotential>`"
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:42:<autosummary>:1
msgid "Implements a 1D Morse potential."
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:42:<autosummary>:1
msgid ":obj:`EnergySurfaceBase <qiskit_nature.algorithms.pes_samplers.EnergySurfaceBase>`"
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:42:<autosummary>:1
msgid "Class to hold a potential energy surface"
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:42:<autosummary>:1
msgid ":obj:`PotentialBase <qiskit_nature.algorithms.pes_samplers.PotentialBase>`"
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:42:<autosummary>:1
msgid "Class to hold prescribed 1D potentials (e.g."
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:42:<autosummary>:1
msgid ":obj:`VibrationalStructureBase <qiskit_nature.algorithms.pes_samplers.VibrationalStructureBase>`"
msgstr ""

#: of qiskit_nature.algorithms.pes_samplers:42:<autosummary>:1
msgid "Class to hold a molecular vibrational structure providing access to vibrational modes and energy levels."
msgstr ""

#: of qiskit_nature.circuit:11:<autosummary>:1
msgid ":obj:`library <qiskit_nature.circuit.library>`\\"
msgstr ""

#: of qiskit_nature.circuit.library:2 qiskit_nature.circuit:11:<autosummary>:1
msgid "Circuit Library (:mod:`qiskit_nature.circuit.library`)"
msgstr ""

#: of qiskit_nature.circuit.library:4
msgid "A collection of circuits used as building blocks or inputs for algorithms."
msgstr ""

#: of qiskit_nature.circuit.library:9
msgid "Initial states"
msgstr ""

#: of qiskit_nature.circuit.library:17:<autosummary>:1
msgid ":obj:`HartreeFock <qiskit_nature.circuit.library.HartreeFock>`"
msgstr ""

#: of qiskit_nature.circuit.library:17:<autosummary>:1
msgid "A Hartree-Fock initial state."
msgstr ""

#: of qiskit_nature.circuit.library:17:<autosummary>:1
msgid ":obj:`VSCF <qiskit_nature.circuit.library.VSCF>`"
msgstr ""

#: of qiskit_nature.circuit.library:17:<autosummary>:1
msgid "Initial state for vibrational modes."
msgstr ""

#: of qiskit_nature.circuit.library:19
msgid "Ansatzes"
msgstr ""

#: of qiskit_nature.circuit.library:32:<autosummary>:1
msgid ":obj:`UCC <qiskit_nature.circuit.library.UCC>`"
msgstr ""

#: of qiskit_nature.circuit.library:32:<autosummary>:1
msgid "The Unitary Coupled-Cluster Ansatz."
msgstr ""

#: of qiskit_nature.circuit.library:32:<autosummary>:1
msgid ":obj:`UCCSD <qiskit_nature.circuit.library.UCCSD>`"
msgstr ""

#: of qiskit_nature.circuit.library:32:<autosummary>:1
msgid "The UCCSD Ansatz."
msgstr ""

#: of qiskit_nature.circuit.library:32:<autosummary>:1
msgid ":obj:`PUCCD <qiskit_nature.circuit.library.PUCCD>`"
msgstr ""

#: of qiskit_nature.circuit.library:32:<autosummary>:1
msgid "The PUCCD Ansatz."
msgstr ""

#: of qiskit_nature.circuit.library:32:<autosummary>:1
msgid ":obj:`SUCCD <qiskit_nature.circuit.library.SUCCD>`"
msgstr ""

#: of qiskit_nature.circuit.library:32:<autosummary>:1
msgid "The SUCCD Ansatz."
msgstr ""

#: of qiskit_nature.circuit.library:32:<autosummary>:1
msgid ":obj:`CHC <qiskit_nature.circuit.library.CHC>`"
msgstr ""

#: of qiskit_nature.circuit.library:32:<autosummary>:1
msgid "This trial wavefunction is the Compact Heuristic for vibrational Chemistry."
msgstr ""

#: of qiskit_nature.circuit.library:32:<autosummary>:1
msgid ":obj:`UVCC <qiskit_nature.circuit.library.UVCC>`"
msgstr ""

#: of qiskit_nature.circuit.library:32:<autosummary>:1
msgid "This trial wavefunction is a Unitary Vibrational Coupled-Cluster Single and Double excitations ansatz."
msgstr ""

#: of qiskit_nature.circuit.library:32:<autosummary>:1
msgid ":obj:`UVCCSD <qiskit_nature.circuit.library.UVCCSD>`"
msgstr ""

#: of qiskit_nature.circuit.library:32:<autosummary>:1
msgid "The UVCCSD Ansatz."
msgstr ""

#: of qiskit_nature.converters:10:<autosummary>:1
msgid ":obj:`second_quantization <qiskit_nature.converters.second_quantization>`\\"
msgstr ""

#: of qiskit_nature.converters.second_quantization:2
#: qiskit_nature.converters:10:<autosummary>:1
msgid "SecondQuantizedOp Converters (:mod:`qiskit_nature.converters.second_quantization`)"
msgstr ""

#: of qiskit_nature.converters.second_quantization:6
msgid "The classes here are used to convert fermionic, vibrational and spin operators to qubit operators, using mappers and other techniques that can also reduce the problem such as leveraging Z2 Symmetries."
msgstr ""

#: of qiskit_nature.converters.second_quantization:15:<autosummary>:1
msgid ":obj:`QubitConverter <qiskit_nature.converters.second_quantization.QubitConverter>`"
msgstr ""

#: of qiskit_nature.converters.second_quantization:15:<autosummary>:1
msgid "A converter from Second-Quantized to Qubit Operators."
msgstr ""

#: of qiskit_nature.drivers:5
msgid "Qiskit Nature requires a computational chemistry program or library, accessed via a chemistry *driver*, to be installed on the system for the electronic-structure computation of a given molecule. A driver is created with a molecular configuration, passed in the format compatible with that particular driver. This allows custom configuration specific to each computational chemistry program or library to be passed."
msgstr ""

#: of qiskit_nature.drivers:11
msgid "Qiskit Nature thus allows the user to configure a chemistry problem in a way that a chemist already using the underlying chemistry program or library will be familiar with. The driver is used to compute some intermediate data, which later will be used to form the input to an algorithm.  Such intermediate data, is populated into a :class:`~qiskit_nature.drivers.QMolecule` object and includes the following for example:"
msgstr ""

#: of qiskit_nature.drivers:17
msgid "One- and two-body integrals in Molecular Orbital (MO) basis"
msgstr ""

#: of qiskit_nature.drivers:18
msgid "Dipole integrals"
msgstr ""

#: of qiskit_nature.drivers:19
msgid "Molecular orbital coefficients"
msgstr ""

#: of qiskit_nature.drivers:20
msgid "Hartree-Fock energy"
msgstr ""

#: of qiskit_nature.drivers:21
msgid "Nuclear repulsion energy"
msgstr ""

#: of qiskit_nature.drivers:23
msgid "Once extracted, the structure of this intermediate data is independent of the driver that was used to compute it.  However the values and level of accuracy of such data will depend on the underlying chemistry program or library used by the specific driver."
msgstr ""

#: of qiskit_nature.drivers:27
msgid "Qiskit Nature offers the option to serialize the Qmolecule data in a binary format known as `Hierarchical Data Format 5 (HDF5) <https://support.hdfgroup.org/HDF5/>`__. This is done to allow chemists to reuse the same input data in the future and to enable researchers to exchange input data with each other --- which is especially useful to researchers who may not have particular computational chemistry drivers installed on their computers."
msgstr ""

#: of qiskit_nature.drivers:34
msgid "Driver Base Class"
msgstr ""

#: of qiskit_nature.drivers:43:<autosummary>:1
msgid ":obj:`BaseDriver <qiskit_nature.drivers.BaseDriver>`"
msgstr ""

#: of qiskit_nature.drivers:43:<autosummary>:1
msgid "Base class for Qiskit's chemistry drivers."
msgstr ""

#: of qiskit_nature.drivers:43:<autosummary>:1
msgid ":obj:`BosonicDriver <qiskit_nature.drivers.BosonicDriver>`"
msgstr ""

#: of qiskit_nature.drivers:43:<autosummary>:1
msgid "Base class for Qiskit's chemistry bosonic drivers."
msgstr ""

#: of qiskit_nature.drivers:43:<autosummary>:1
msgid ":obj:`FermionicDriver <qiskit_nature.drivers.FermionicDriver>`"
msgstr ""

#: of qiskit_nature.drivers:43:<autosummary>:1
msgid "Base class for Qiskit's chemistry fermionic drivers."
msgstr ""

#: of qiskit_nature.drivers:45
msgid "Driver Common"
msgstr ""

#: of qiskit_nature.drivers:58:<autosummary>:1
msgid ":obj:`QMolecule <qiskit_nature.drivers.QMolecule>`"
msgstr ""

#: of qiskit_nature.drivers:58:<autosummary>:1
msgid "Molecule data class containing driver result."
msgstr ""

#: of qiskit_nature.drivers:58:<autosummary>:1
msgid ":obj:`Molecule <qiskit_nature.drivers.Molecule>`"
msgstr ""

#: of qiskit_nature.drivers:58:<autosummary>:1
msgid "Driver-independent Molecule definition."
msgstr ""

#: of qiskit_nature.drivers:58:<autosummary>:1
msgid ":obj:`HFMethodType <qiskit_nature.drivers.HFMethodType>`"
msgstr ""

#: of qiskit_nature.drivers:58:<autosummary>:1
msgid "HFMethodType Enum"
msgstr ""

#: of qiskit_nature.drivers:58:<autosummary>:1
msgid ":obj:`UnitsType <qiskit_nature.drivers.UnitsType>`"
msgstr ""

#: of qiskit_nature.drivers:58:<autosummary>:1
msgid "Units Type Enum"
msgstr ""

#: of qiskit_nature.drivers:58:<autosummary>:1
msgid ":obj:`BasisType <qiskit_nature.drivers.BasisType>`"
msgstr ""

#: of qiskit_nature.drivers:58:<autosummary>:1
msgid "Basis Type"
msgstr ""

#: of qiskit_nature.drivers:58:<autosummary>:1
msgid ":obj:`InitialGuess <qiskit_nature.drivers.InitialGuess>`"
msgstr ""

#: of qiskit_nature.drivers:58:<autosummary>:1
msgid "Initial Guess Enum"
msgstr ""

#: of qiskit_nature.drivers:58:<autosummary>:1
msgid ":obj:`WatsonHamiltonian <qiskit_nature.drivers.WatsonHamiltonian>`"
msgstr ""

#: of qiskit_nature.drivers:58:<autosummary>:1
msgid "Watson Hamiltonian class containing the results of a driver's anharmonic calculation"
msgstr ""

#: of qiskit_nature.drivers:60
msgid "Drivers"
msgstr ""

#: of qiskit_nature.drivers:62
msgid "The drivers in the chemistry module obtain their information from classical ab-initio programs or libraries. Several drivers, interfacing to common programs and libraries, are available. To use the driver its dependent program/library must be installed. See the relevant installation instructions below for your program/library that you intend to use."
msgstr ""

#: of qiskit_nature.drivers:76
msgid "The :class:`HDF5Driver` reads molecular data from a pre-existing HDF5 file, as saved from a :class:`~qiskit_nature.drivers.QMolecule`, and is not dependent on any external chemistry program/library and needs no special install."
msgstr ""

#: of qiskit_nature.drivers:80
msgid "The :class:`FCIDumpDriver` likewise reads from a pre-existing file in this case a standard FCIDump file and again needs no special install."
msgstr ""

#: of qiskit_nature.drivers:84
msgid "Fermionic Drivers"
msgstr ""

#: of qiskit_nature.drivers:96:<autosummary>:1
msgid ":obj:`GaussianDriver <qiskit_nature.drivers.GaussianDriver>`"
msgstr ""

#: of qiskit_nature.drivers:96:<autosummary>:1
msgid "Qiskit chemistry driver using the Gaussian™ 16 program."
msgstr ""

#: of qiskit_nature.drivers:96:<autosummary>:1
msgid ":obj:`PSI4Driver <qiskit_nature.drivers.PSI4Driver>`"
msgstr ""

#: of qiskit_nature.drivers:96:<autosummary>:1
msgid "Qiskit chemistry driver using the PSI4 program."
msgstr ""

#: of qiskit_nature.drivers:96:<autosummary>:1
msgid ":obj:`PyQuanteDriver <qiskit_nature.drivers.PyQuanteDriver>`"
msgstr ""

#: of qiskit_nature.drivers:96:<autosummary>:1
msgid "Qiskit chemistry driver using the PyQuante2 library."
msgstr ""

#: of qiskit_nature.drivers:96:<autosummary>:1
msgid ":obj:`PySCFDriver <qiskit_nature.drivers.PySCFDriver>`"
msgstr ""

#: of qiskit_nature.drivers:96:<autosummary>:1
msgid "Qiskit chemistry driver using the PySCF library."
msgstr ""

#: of qiskit_nature.drivers:96:<autosummary>:1
msgid ":obj:`HDF5Driver <qiskit_nature.drivers.HDF5Driver>`"
msgstr ""

#: of qiskit_nature.drivers:96:<autosummary>:1
msgid "Qiskit chemistry driver reading an HDF5 file."
msgstr ""

#: of qiskit_nature.drivers:96:<autosummary>:1
msgid ":obj:`FCIDumpDriver <qiskit_nature.drivers.FCIDumpDriver>`"
msgstr ""

#: of qiskit_nature.drivers:96:<autosummary>:1
msgid "Qiskit chemistry driver reading an FCIDump file."
msgstr ""

#: of qiskit_nature.drivers:98
msgid "Bosonic Drivers"
msgstr ""

#: of qiskit_nature.drivers:105:<autosummary>:1
msgid ":obj:`GaussianForcesDriver <qiskit_nature.drivers.GaussianForcesDriver>`"
msgstr ""

#: of qiskit_nature.drivers:105:<autosummary>:1
msgid "Gaussian™ 16 forces driver."
msgstr ""

#: of qiskit_nature.drivers:107
msgid "General Driver"
msgstr ""

#: of qiskit_nature.drivers:109
msgid "The :class:`GaussianLogDriver` allows an arbitrary Gaussian Job Control File to be run and return a :class:`GaussianLogResult` containing the log as well as ready access certain data of interest that is parsed from the log."
msgstr ""

#: of qiskit_nature.drivers:119:<autosummary>:1
msgid ":obj:`GaussianLogDriver <qiskit_nature.drivers.GaussianLogDriver>`"
msgstr ""

#: of qiskit_nature.drivers:119:<autosummary>:1
msgid "Gaussian™ 16 log driver."
msgstr ""

#: of qiskit_nature.drivers:119:<autosummary>:1
msgid ":obj:`GaussianLogResult <qiskit_nature.drivers.GaussianLogResult>`"
msgstr ""

#: of qiskit_nature.drivers:119:<autosummary>:1
msgid "Result for Gaussian™ 16 log driver."
msgstr ""

#: of qiskit_nature.drivers:127:<autosummary>:1
msgid ":obj:`bosonic_bases <qiskit_nature.drivers.bosonic_bases>`\\"
msgstr ""

#: of qiskit_nature.drivers.bosonic_bases:2
#: qiskit_nature.drivers:127:<autosummary>:1
msgid "Bosonic basis (:mod:`qiskit_nature.drivers.bosonic_bases`)"
msgstr ""

#: of qiskit_nature.drivers.bosonic_bases:4
msgid "Basis for bosonic operations."
msgstr ""

#: of qiskit_nature.drivers.bosonic_bases:9
msgid "Bosonic Basis"
msgstr ""

#: of qiskit_nature.drivers.bosonic_bases:17:<autosummary>:1
msgid ":obj:`BosonicBasis <qiskit_nature.drivers.bosonic_bases.BosonicBasis>`"
msgstr ""

#: of qiskit_nature.drivers.bosonic_bases:17:<autosummary>:1
msgid "Basis to express a second quantization Bosonic Hamiltonian."
msgstr ""

#: of qiskit_nature.drivers.bosonic_bases:17:<autosummary>:1
msgid ":obj:`HarmonicBasis <qiskit_nature.drivers.bosonic_bases.HarmonicBasis>`"
msgstr ""

#: of qiskit_nature.drivers.bosonic_bases:17:<autosummary>:1
msgid "Basis in which the Watson Hamiltonian is expressed."
msgstr ""

#: of qiskit_nature.drivers.gaussiand:2
msgid "Gaussian™ 16 Installation"
msgstr ""

#: of qiskit_nature.drivers.gaussiand:4
msgid "`Gaussian™ 16 <http://gaussian.com/gaussian16/>`__ is a commercial program for computational chemistry. This chemistry driver accesses electronic structure information from Gaussian™ 16 via the Gaussian-supplied open-source `interfacing code <http://www.gaussian.com/interfacing/>`__."
msgstr ""

#: of qiskit_nature.drivers.gaussiand:9
msgid "You should follow the installation instructions that come with your Gaussian™ 16 product. Installation instructions can also be found online in `Gaussian product installation support <http://gaussian.com/techsupport/#install]>`__."
msgstr ""

#: of qiskit_nature.drivers.gaussiand:13
msgid "Following the installation make sure the Gaussian™ 16 executable, `g16`, can be run from the command line environment where you will be running Python and Qiskit. For example verifying that the `g16` executable is reachable via the system environment path, and appropriate exports, such as `GAUSS_EXEDIR`, have been configured as per `Gaussian product installation support <http://gaussian.com/techsupport/#install]>`__."
msgstr ""

#: of qiskit_nature.drivers.gaussiand:20
msgid "Gaussian™ 16 Interfacing Code"
msgstr ""

#: of qiskit_nature.drivers.gaussiand:23
msgid "In the :mod:`gauopen` folder the Python part of the above interfacing code, as needed by Qiskit's chemistry modules, has been made available. It is licensed under a `Gaussian Open-Source Public License <https://github.com/Qiskit/qiskit-nature/blob/main/qiskit_nature/drivers/gaussiand/gauopen/LICENSE.txt>`_."
msgstr ""

#: of qiskit_nature.drivers.gaussiand:28
msgid "Part of this interfacing code --- specifically, the Fortran file `qcmatrixio.F` --- requires compilation to a Python native extension. However, Qiskit comes with pre-built binaries for most common platforms. If there is no pre-built binary matching your platform, then it will be necessary to compile this file as per the instructions below."
msgstr ""

#: of qiskit_nature.drivers.gaussiand:34
msgid "Compiling the Fortran Interfacing Code"
msgstr ""

#: of qiskit_nature.drivers.gaussiand:36
msgid "If no prebuilt native extension binary, as supplied with Qiskit, works for your platform, then to use the Gaussian™ 16 driver on your machine, the Fortran file `qcmatrixio.F` must be compiled into object code that can be used by Python. This is accomplished using the `Fortran to Python Interface Generator (F2PY) <https://docs.scipy.org/doc/numpy/f2py/>`__, which is part of the `NumPy <http://www.numpy.org/>`__ Python library. Specifically, on your command prompt window, change directory to the `qiskit/chemistry/drivers/gaussiand/gauopen` directory inside the Qiskit installation directory, and while in the Python environment created for Qiskit and the nature module, invoke `f2py` on `qcmatrixio.F` as explained below."
msgstr ""

#: of qiskit_nature.drivers.gaussiand:48
msgid "Apple macOS and Linux"
msgstr ""

#: of qiskit_nature.drivers.gaussiand:50
msgid "The full syntax of the `f2py` command on macOS and Linux is as follows:"
msgstr ""

#: of qiskit_nature.drivers.gaussiand:56
msgid "This command will generate a file with name prefix `qcmatrixio` and extension `.so`, for example `qcmatrixio.cpython-36m-x86_64-linux-gnu.so`. In order for the command above to work and such file to be generated, you will need a supported Fortran compiler installed. On macOS, you may have to download the `GNU Compiler Collection (GCC) <https://gcc.gnu.org/>`__ and, in particular, the `GFortran Compiler <https://gcc.gnu.org/fortran/>`__ source and compile it first, if you do not a suitable Fortran compiler already installed. On Linux you may be able to download and install a supported Fortran compiler via your distribution's installer."
msgstr ""

#: of qiskit_nature.drivers.gaussiand:68
msgid "If your account is using the bash shell on a macOS X machine, you can edit the `.bash_profile` file in your home directory and add the following lines:"
msgstr ""

#: of qiskit_nature.drivers.gaussiand:77
msgid "The above assumes that the application Gaussian™ 16 was placed in the `/Applications` folder and that `~/.gaussian` is the full path to the selected scratch folder, where Gaussian™ 16 stores its temporary files."
msgstr ""

#: of qiskit_nature.drivers.gaussiand:81
msgid "Now, before Qiskit can properly interface Gaussian™ 16, you will have to run the `enable_gaussian` command defined above.  This, however, may generate the following error:"
msgstr ""

#: of qiskit_nature.drivers.gaussiand:88
msgid "While this error is not harmful, you might want to suppress it, which can be done by entering the following sequence of commands on the command line:"
msgstr ""

#: of qiskit_nature.drivers.gaussiand:99
msgid "as well as finally adding the following line to the `.bash_profile` file in your account's home directory:"
msgstr ""

#: of qiskit_nature.drivers.gaussiand:106
msgid "At the end of this configuration, the `.bash_profile` in your account's home directory should have a section in it like in the following script snippet:"
msgstr ""

#: of qiskit_nature.drivers.gaussiand:119
msgid "Microsoft Windows"
msgstr ""

#: of qiskit_nature.drivers.gaussiand:121
msgid "The following steps can be used with the Intel Fortran compiler on the Microsoft Windows platform:"
msgstr ""

#: of qiskit_nature.drivers.gaussiand:123
msgid "Set up the environment by running the Intel Fortran compiler batch program `ifortvars.bat` as follows:"
msgstr ""

#: of qiskit_nature.drivers.gaussiand:130
msgid "Then, in this environment, issue the following command from within the `gauopen` directory:"
msgstr ""

#: of qiskit_nature.drivers.gaussiand:136
msgid "Upon successful execution, the `f2py` command above will generate a file with name prefix `qcmatrixio` and extension `.so`, for example `qcmatrixio.cp36-win_amd64.pyd`.  However, in order for the `f2py` command above to work, `#ifdef` may need to be manually edited if it is not recognized or supported during the processing of the `f2py` command above.  For example, with `f2py` from Intel Visual Fortran Compiler with Microsoft Visual Studio, the following code snippet originally shows two occurrences of the line `Parameter (Len12D=8,Len4D=8)`, as shown next:"
msgstr ""

#: of qiskit_nature.drivers.gaussiand:152
msgid "This may need to be simplified by deleting the first three lines and the last line, leaving just the fourth line, as follows:"
msgstr ""

#: of qiskit_nature.drivers.psi4d:2
msgid "PSI4 Installation"
msgstr ""

#: of qiskit_nature.drivers.psi4d:3
msgid "`PSI4 <http://www.psicode.org/>`__ is an open-source program for computational chemistry. In order for Qiskit's chemistry module to interface PSI4, i.e. execute PSI4 to extract the electronic structure information necessary for the computation of the input to the quantum algorithm, PSI4 must be `installed <http://www.psicode.org/downloads.html>`__ and discoverable on the system where Qiskit's chemistry module is also installed."
msgstr ""

#: of qiskit_nature.drivers.psi4d:9
msgid "Therefore, once PSI4 has been installed, the `psi4` executable must be reachable via the system environment path. For example, on macOS, this can be achieved by adding the following section to the `.bash_profile` file in the user's home directory:"
msgstr ""

#: of qiskit_nature.drivers.psi4d:18
msgid "where `username` should be replaced with the user's account name. In order for the chemistry module to discover PSI4 at run time, it is then necessary to execute the `enable_psi4` command before launching Qiskit."
msgstr ""

#: of qiskit_nature.drivers.pyquanted:2
msgid "PyQuante Installation"
msgstr ""

#: of qiskit_nature.drivers.pyquanted:3
msgid "`PyQuante <https://github.com/rpmuller/pyquante2/>`__ is an open-source library for computational chemistry. Qiskit's chemistry module specifically requires PyQuante V2, also known as PyQuante2. In order for Qiskit to interface PyQuante and execute PyQuante to extract the electronic structure information PyQuante2 must be installed and discoverable on the system where the Qiskit chemistry module is also installed."
msgstr ""

#: of qiskit_nature.drivers.pyquanted:9
msgid "Installing PyQuante2 according to the `installation instructions <https://github.com/rpmuller/pyquante2/blob/master/README.md>`__ while in the Python virtual environment where Qiskit's chemistry module has also been installed will automatically make PyQuante2 dynamically discovered by Qiskit at run time. If you are not using conda then alternatively you can git clone or download/unzip a zip of the repository and run pip install off the setup.py that is there."
msgstr ""

#: of qiskit_nature.drivers.pyquanted:17
msgid "Like all the other drivers currently interfaced by the chemistry module, PyQuante2 provides enough intermediate data for Qiskit to compute a molecule's ground state molecular energy.  However, unlike the other drivers, the data computed by PyQuante is not sufficient for Qiskit to compute a molecule's dipole moment.  Therefore, PyQuante is currently the only driver interfaced by Qiskit's chemistry module that does not allow for the computation of a molecule's dipole moment."
msgstr ""

#: of qiskit_nature.drivers.pyscfd:2
msgid "PYSCF Installation"
msgstr ""

#: of qiskit_nature.drivers.pyscfd:3
msgid "`PySCF <https://github.com/sunqm/pyscf>`__ is an open-source library for computational chemistry. In order for Qiskit's chemistry module to interface PySCF and execute PySCF to extract the electronic structure information PySCF must be installed."
msgstr ""

#: of qiskit_nature.drivers.pyscfd:7
msgid "According to the `PySCF installation instructions <http://sunqm.github.io/pyscf/install.html>`__, the preferred installation method is via the pip package management system.  Doing so, while in the Python virtual environment where Qiskit's chemistry module is also installed, will automatically make PySCF available to Qiskit at run time."
msgstr ""

#: of qiskit_nature.mappers:11:<autosummary>:1
msgid ":obj:`second_quantization <qiskit_nature.mappers.second_quantization>`\\"
msgstr ""

#: of qiskit_nature.mappers.second_quantization:2
#: qiskit_nature.mappers:11:<autosummary>:1
msgid "SecondQuantizedOp Mappers (:mod:`qiskit_nature.mappers.second_quantization`)"
msgstr ""

#: of qiskit_nature.mappers.second_quantization:6
msgid "The classes here are used to convert fermionic, vibrational and spin operators to qubit operators."
msgstr ""

#: of qiskit_nature.mappers.second_quantization:13:<autosummary>:1
msgid ":obj:`QubitMapper <qiskit_nature.mappers.second_quantization.QubitMapper>`"
msgstr ""

#: of qiskit_nature.mappers.second_quantization:13:<autosummary>:1
msgid "The interface for implementing methods which map from a `SecondQuantizedOp` to a qubit operator in the form of a `PauliSumOp`."
msgstr ""

#: of qiskit_nature.mappers.second_quantization:15
msgid "FermionicOp Mappers"
msgstr ""

#: of qiskit_nature.mappers.second_quantization:26:<autosummary>:1
msgid ":obj:`FermionicMapper <qiskit_nature.mappers.second_quantization.FermionicMapper>`"
msgstr ""

#: of qiskit_nature.mappers.second_quantization:26:<autosummary>:1
msgid "Mapper of Fermionic Operator to Qubit Operator"
msgstr ""

#: of qiskit_nature.mappers.second_quantization:26:<autosummary>:1
msgid ":obj:`BravyiKitaevMapper <qiskit_nature.mappers.second_quantization.BravyiKitaevMapper>`"
msgstr ""

#: of qiskit_nature.mappers.second_quantization:26:<autosummary>:1
msgid "The Bravyi-Kitaev fermion-to-qubit mapping."
msgstr ""

#: of qiskit_nature.mappers.second_quantization:26:<autosummary>:1
msgid ":obj:`JordanWignerMapper <qiskit_nature.mappers.second_quantization.JordanWignerMapper>`"
msgstr ""

#: of qiskit_nature.mappers.second_quantization:26:<autosummary>:1
msgid "The Jordan-Wigner fermion-to-qubit mapping."
msgstr ""

#: of qiskit_nature.mappers.second_quantization:26:<autosummary>:1
msgid ":obj:`ParityMapper <qiskit_nature.mappers.second_quantization.ParityMapper>`"
msgstr ""

#: of qiskit_nature.mappers.second_quantization:26:<autosummary>:1
msgid "The Parity fermion-to-qubit mapping."
msgstr ""

#: of qiskit_nature.mappers.second_quantization:28
msgid "VibrationalOp Mappers"
msgstr ""

#: of qiskit_nature.mappers.second_quantization:37:<autosummary>:1
msgid ":obj:`VibrationalMapper <qiskit_nature.mappers.second_quantization.VibrationalMapper>`"
msgstr ""

#: of qiskit_nature.mappers.second_quantization:37:<autosummary>:1
msgid "Mapper of Vibrational Operator to Qubit Operator"
msgstr ""

#: of qiskit_nature.mappers.second_quantization:37:<autosummary>:1
msgid ":obj:`DirectMapper <qiskit_nature.mappers.second_quantization.DirectMapper>`"
msgstr ""

#: of qiskit_nature.mappers.second_quantization:37:<autosummary>:1
msgid "The Direct mapper."
msgstr ""

#: of qiskit_nature.mappers.second_quantization:39
msgid "SpinOp Mappers"
msgstr ""

#: of qiskit_nature.mappers.second_quantization:47:<autosummary>:1
msgid ":obj:`SpinMapper <qiskit_nature.mappers.second_quantization.SpinMapper>`"
msgstr ""

#: of qiskit_nature.mappers.second_quantization:47:<autosummary>:1
msgid "Mapper of Spin Operator to Qubit Operator"
msgstr ""

#: of qiskit_nature.mappers.second_quantization:47:<autosummary>:1
msgid ":obj:`LinearMapper <qiskit_nature.mappers.second_quantization.LinearMapper>`"
msgstr ""

#: of qiskit_nature.mappers.second_quantization:47:<autosummary>:1
msgid "The Linear spin-to-qubit mapping."
msgstr ""

#: of qiskit_nature.operators:6
msgid "Operators for different systems such as fermionic, vibrational and spin."
msgstr ""

#: of qiskit_nature.operators:12:<autosummary>:1
msgid ":obj:`second_quantization <qiskit_nature.operators.second_quantization>`\\"
msgstr ""

#: of qiskit_nature.operators.second_quantization:2
#: qiskit_nature.operators:12:<autosummary>:1
msgid "Second-Quantization Operators (:mod:`qiskit_nature.operators.second_quantization`)"
msgstr ""

#: of qiskit_nature.operators.second_quantization:7
msgid "Second-Quantization Operators"
msgstr ""

#: of qiskit_nature.operators.second_quantization:16:<autosummary>:1
msgid ":obj:`FermionicOp <qiskit_nature.operators.second_quantization.FermionicOp>`\\ \\(data\\[\\, register\\_length\\]\\)"
msgstr ""

#: of qiskit_nature.operators.second_quantization:16:<autosummary>:1
msgid "N-mode Fermionic operator."
msgstr ""

#: of qiskit_nature.operators.second_quantization:16:<autosummary>:1
msgid ":obj:`SpinOp <qiskit_nature.operators.second_quantization.SpinOp>`\\ \\(data\\[\\, spin\\, register\\_length\\]\\)"
msgstr ""

#: of qiskit_nature.operators.second_quantization:16:<autosummary>:1
msgid "XYZ-ordered Spin operators."
msgstr ""

#: of qiskit_nature.operators.second_quantization:16:<autosummary>:1
msgid ":obj:`SecondQuantizedOp <qiskit_nature.operators.second_quantization.SecondQuantizedOp>`\\ \\(\\)"
msgstr ""

#: of qiskit_nature.operators.second_quantization:16:<autosummary>:1
msgid "The Second Quantized Operator base interface."
msgstr ""

#: of qiskit_nature.operators.second_quantization:16:<autosummary>:1
msgid ":obj:`VibrationalOp <qiskit_nature.operators.second_quantization.VibrationalOp>`\\ \\(data\\, num\\_modes\\, num\\_modals\\)"
msgstr ""

#: of qiskit_nature.operators.second_quantization:16:<autosummary>:1
msgid "Vibration type operators."
msgstr ""

#: of qiskit_nature.problems:11:<autosummary>:1
msgid ":obj:`second_quantization <qiskit_nature.problems.second_quantization>`\\"
msgstr ""

#: of qiskit_nature.problems.second_quantization:2
#: qiskit_nature.problems:11:<autosummary>:1
msgid "Second-Quantization Problems (:mod:`qiskit_nature.problems.second_quantization`)"
msgstr ""

#: of qiskit_nature.problems.second_quantization:14:<autosummary>:1
msgid ":obj:`BaseProblem <qiskit_nature.problems.second_quantization.BaseProblem>`"
msgstr ""

#: of qiskit_nature.problems.second_quantization:14:<autosummary>:1
msgid "Base Problem"
msgstr ""

#: of qiskit_nature.problems.second_quantization:14:<autosummary>:1
msgid ":obj:`ElectronicStructureProblem <qiskit_nature.problems.second_quantization.ElectronicStructureProblem>`"
msgstr ""

#: of qiskit_nature.problems.second_quantization:14:<autosummary>:1
msgid "Electronic Structure Problem"
msgstr ""

#: of qiskit_nature.problems.second_quantization:14:<autosummary>:1
msgid ":obj:`VibrationalStructureProblem <qiskit_nature.problems.second_quantization.VibrationalStructureProblem>`"
msgstr ""

#: of qiskit_nature.problems.second_quantization:14:<autosummary>:1
msgid "Vibrational Structure Problem"
msgstr ""

#: of qiskit_nature.results:6
msgid "Qiskit Nature results such as for electronic and vibrational structure. Algorithms may extend these to provide algorithm specific aspects in their result."
msgstr ""

#: of qiskit_nature.results:10
msgid "Results"
msgstr ""

#: of qiskit_nature.results:20:<autosummary>:1
msgid ":obj:`EigenstateResult <qiskit_nature.results.EigenstateResult>`"
msgstr ""

#: of qiskit_nature.results:20:<autosummary>:1
msgid "The eigenstate result interface."
msgstr ""

#: of qiskit_nature.results:20:<autosummary>:1
msgid ":obj:`BOPESSamplerResult <qiskit_nature.results.BOPESSamplerResult>`"
msgstr ""

#: of qiskit_nature.results:20:<autosummary>:1
msgid "The BOPES Sampler result"
msgstr ""

#: of qiskit_nature.results:20:<autosummary>:1
msgid ":obj:`ElectronicStructureResult <qiskit_nature.results.ElectronicStructureResult>`"
msgstr ""

#: of qiskit_nature.results:20:<autosummary>:1
msgid "The electronic structure result."
msgstr ""

#: of qiskit_nature.results:20:<autosummary>:1
msgid ":obj:`VibrationalStructureResult <qiskit_nature.results.VibrationalStructureResult>`"
msgstr ""

#: of qiskit_nature.results:20:<autosummary>:1
msgid "The vibrational structure result."
msgstr ""

#: of qiskit_nature.runtime:6
msgid "Programs that embed Qiskit Runtime in the algorithmic interfaces and facilitate usage of algorithms and scripts in the cloud."
msgstr ""

#: of qiskit_nature.runtime:15:<autosummary>:1
msgid ":obj:`VQEProgram <qiskit_nature.runtime.VQEProgram>`"
msgstr ""

#: of qiskit_nature.runtime:15:<autosummary>:1
msgid "The Qiskit Nature VQE Quantum Program to call the VQE runtime as a MinimumEigensolver."
msgstr ""

#: of qiskit_nature.runtime:15:<autosummary>:1
msgid ":obj:`VQEProgramResult <qiskit_nature.runtime.VQEProgramResult>`"
msgstr ""

#: of qiskit_nature.runtime:15:<autosummary>:1
msgid "The VQEProgram result object."
msgstr ""

#: of qiskit_nature.transformers:6
msgid "Transformers act on a :class:`~qiskit_nature.drivers.QMolecule` to produce an altered copy of it as per the specific transformer. So for instance the :class:`FreezeCoreTransformer` will alter the integrals and number of particles in a way that freezes the core orbitals, storing an extracted energy in the QMolecule to compensate for this that would need to be included back into any ground state energy computation to get complete result."
msgstr ""

#: of qiskit_nature.transformers:18:<autosummary>:1
msgid ":obj:`BaseTransformer <qiskit_nature.transformers.BaseTransformer>`\\ \\(\\)"
msgstr ""

#: of qiskit_nature.transformers:18:<autosummary>:1
msgid "The interface for implementing methods which map from one `QMolecule` or 'WatsonHamiltonian' to another."
msgstr ""

#: of qiskit_nature.transformers:18:<autosummary>:1
msgid ":obj:`ActiveSpaceTransformer <qiskit_nature.transformers.ActiveSpaceTransformer>`\\ \\(\\[num\\_electrons\\, ...\\]\\)"
msgstr ""

#: of qiskit_nature.transformers:18:<autosummary>:1
msgid "The Active-Space reduction."
msgstr ""

#: of qiskit_nature.transformers:18:<autosummary>:1
msgid ":obj:`FreezeCoreTransformer <qiskit_nature.transformers.FreezeCoreTransformer>`\\ \\(\\[freeze\\_core\\, ...\\]\\)"
msgstr ""

#: of qiskit_nature.transformers:18:<autosummary>:1
msgid "The Freeze-Core reduction."
msgstr ""

