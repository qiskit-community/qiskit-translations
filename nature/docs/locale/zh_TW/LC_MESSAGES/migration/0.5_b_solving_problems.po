msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-09 17:24+0000\n"
"PO-Revision-Date: 2023-11-09 17:55\n"
"Last-Translator: \n"
"Language: zh\n"
"Language-Team: Chinese Traditional\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/nature/docs/locale/en/LC_MESSAGES/migration/0.5_b_solving_problems.po\n"
"X-Crowdin-File-ID: 9975\n"

#: ../../migration/0.5_b_solving_problems.rst:2
msgid "Solving Problems with v0.5"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:5
msgid "Overview"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:7
msgid "The major focus of the Qiskit Nature v0.5 refactoring was the description and representation of second-quantized operators and problems. Nonetheless, the ``algorithms`` module and supporting modules did also receive significant updates. Most importantly all algorithms In Nature are now dependent on the new Qiskit Terra algorithms, and these are now based on `Qiskit Primitives <https://qiskit.org/documentation/apidoc/primitives.html>`__ and were added in Qiskit Terra 0.22. It is not the intention to provide detailed explanations of the primitives in this migration guide. We suggest that you read the `corresponding resources <https://qiskit.org/documentation/apidoc/primitives.html>`__ of the Qiskit Terra documentation instead."
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:21
msgid "Further Resources"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:23
msgid "For more details, please refer to the corresponding tutorials:"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:25
msgid "`Ground State Solvers <../tutorials/03_ground_state_solvers.ipynb>`__"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:26
msgid "`Excited States Solvers <../tutorials/04_excited_states_solvers.ipynb>`__"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:28
msgid "`Qubit Mappers <../tutorials/06_qubit_mappers.ipynb>`__"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:31
msgid "``qiskit_nature.mappers``"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:33
msgid "The mappers of Qiskit Nature did **not** receive any API changes (other than potentially requiring certain arguments to be keywords; see also the `“Too many positional arguments” section <./0.5_a_intro.ipynb>`__). However, the entire module ``qiskit_nature.mappers.second_quantization`` has been moved to ``qiskit_nature.second_q.mappers``. So updating your import is all you need to do here."
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:41
msgid "``qiskit_nature.converters``"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:43
msgid "This module contained a single component: ``QubitConverter``. This has been moved to ``qiskit_nature.second_q.mappers.QubitConverter`` so you can simply update your import path."
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:47
msgid "API changes were again minimal but the operators being translated by this class are no longer the legacy ``SecondQuantizedOp`` but rather the new ``SparseLabelOp`` objects."
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:52
msgid "``qiskit_nature.circuit``"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:54
msgid "The entire ``qiskit_nature.circuit`` module was relocated to ``qiskit_nature.second_q.circuit``. The reason for this, is that the existing circuit were actually only applicable to second-quantized applications, but the API did not reflect this. Updating your imports should fix *most* issues."
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:60
msgid "However, there are two more details to take note of, detailed below."
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:63
msgid "Number of Orbitals"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:65
msgid "We have been consistently describing the number of orbitals via ``num_spin_orbitals`` throughout the package. However, what this oftentimes implied (without rigorous checks) was that an **even** number was supplied, since the number of spin orbitals was assumed to equal twice the number of **spatial** orbitals."
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:71
msgid "To be more rigorous and avoid the ill-defined behavior when providing *odd* numbers for ``num_spin_orbitals``, we have switched the entire stack to use ``num_spatial_orbitals`` instead. This is well defined for any positive integer value (and negative values are guarded against)."
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:76
msgid "What this means for you in practice, is that whenever you supply the ``num_spin_orbitals`` manually in the past, you now need to supply **half the value** to represent the ``num_spatial_orbitals``."
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:81
#: ../../migration/0.5_b_solving_problems.rst:107
#: ../../migration/0.5_b_solving_problems.rst:138
#: ../../migration/0.5_b_solving_problems.rst:214
#: ../../migration/0.5_b_solving_problems.rst:254
msgid "Previously"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:91
#: ../../migration/0.5_b_solving_problems.rst:117
#: ../../migration/0.5_b_solving_problems.rst:152
#: ../../migration/0.5_b_solving_problems.rst:227
#: ../../migration/0.5_b_solving_problems.rst:271
msgid "New"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:101
msgid "UCC/UVCC ``__init__`` arguments"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:103
msgid "The ``UCC`` and ``UVCC`` subclasses used to take the following arguments for their ``__init__``:"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:119
msgid "This was mismatching the API of the ``HartreeFock`` and ``VSCF`` initial states. We have aligned these APIs to look like in the following:"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:130
msgid "HartreeFock/VSCF initial states"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:132
msgid "The ``HartreeFock`` and ``VSCF`` initial state circuits are now implemented as ``BlueprintCircuit``. That means, that you can initialize them without any arguments and supply the information later as shown below:"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:168
msgid "``qiskit_nature.algorithms``"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:170
msgid "The algorithms in Qiskit Nature have been updated to use the new ``qiskit.algorithms`` components which are based on the ``qiskit.primitives`` as of Qiskit Terra 0.22."
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:174
msgid "For most changes to take effect, you can once again simply update your import paths from ``qiskit_nature.algorithms`` to ``qiskit_nature.second_q.algorithms``. However, there are some details which you need to pay attention to, due to the change to the primitive-based algorithms of Qiskit Terra being used under the hood. These details are explained below."
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:182
msgid "``qiskit_nature.algorithms.initial_points``"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:184
msgid "This module was moved to ``qiskit_nature.second_q.algorithms.initial_points``. All you need to do is update your imports."
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:189
msgid "``qiskit_nature.algorithms.pes_samplers``"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:191
msgid "This module was **removed** without a replacement. The reason for that, is that we are working towards a driver-less design of Qiskit Nature, in which case the sampling of the potential energy surface becomes the responsibility of the classical code rather than Qiskit Nature."
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:197
msgid "``qiskit_nature.algorithms.ground_state_solvers``"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:199
msgid "This module was moved to ``qiskit_nature.second_q.algorithms.ground_state_solvers``. Besides updating your imports, you need to pay attention to the following:"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:203
msgid "``AdaptVQE`` was migrated to Qiskit Terra: ``qiskit.algorithms.minimum_eigensolver.AdaptVQE``. In doing so, this is no longer a ``GroundStateSolver`` but rather became a ``MinimumEigensolver`` which means that you would use it like any other ``VQE`` and inject it **into** a ``GroundStateSolver`` of Qiskit Nature. To see the new ``AdaptVQE`` in action, check out the `How to use the AdaptVQE <../howtos/adapt_vqe.rst>`__."
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:210
msgid "the API of the ``VQEUCCFactory`` and ``VQEUVCCFactory`` has been matched with the new primitive-based ``VQE`` API"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:243
msgid "``qiskit_nature.algorithms.excited_states_solvers``"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:245
msgid "This module was moved to ``qiskit_nature.second_q.algorithms.excited_states_solvers``. Besides updating your imports, you need to pay attention to the following:"
msgstr ""

#: ../../migration/0.5_b_solving_problems.rst:249
msgid "the ``QEOM`` API now also requires an `Estimator primitiver <https://qiskit.org/documentation/stubs/qiskit.primitives.BaseEstimator.html>`__ to be provided"
msgstr ""

