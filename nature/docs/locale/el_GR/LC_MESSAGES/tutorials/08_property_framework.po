msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 16:33+0000\n"
"PO-Revision-Date: 2022-02-10 16:55\n"
"Last-Translator: \n"
"Language-Team: Greek\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: el\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/08_property_framework.po\n"
"X-Crowdin-File-ID: 9711\n"
"Language: el_GR\n"

#: ../../tutorials/08_property_framework.ipynb:9
msgid "This page was generated from `docs/tutorials/08_property_framework.ipynb`__."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:9
msgid "The Property Framework"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:30
msgid "Qiskit Nature 0.2.0 introduces the *Property* framework. This framework replaces the legacy driver return types like ``QMolecule`` and ``WatsonHamiltonian`` with a more modular and extensible approach."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:41
msgid "In this tutorial, we will walk through the framework, explain its most important components and show you, how you can extend it with a custom *property* yourself."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:53
msgid "What is a ``Property``?"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:64
msgid "At its core, a ``Property`` is an object complementing some raw data with functions that allow you to transform/manipulate/interpret this raw data. This “definition” is kept rather abstract on purpose, but what it means is essentially the following. A ``Property``:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:66
msgid "represents a physical observable (that’s the raw data)"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:67
msgid "can be expressed as an operator"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:68
msgid "can be evaluated with a wavefunction"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:69
msgid "provides an ``interpret`` method which gives meaning to the eigenvalue of the evaluated qubit operator"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:90
msgid "The ``qiskit_nature.properties`` module provides two classes:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:92
msgid "``Property``: this is the basic interface. It requires only a ``name`` and an ``interpret`` method to be implemented."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:93
msgid "``GroupedProperty``: this class is an implementation of the `Composite pattern <https://en.wikipedia.org/wiki/Composite_pattern>`__ which allows you to *group* multiple properties into one."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:95
msgid "**Note:** Grouped properties must have unique ``name`` attributes!"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:107
msgid "Second Quantization Properties"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:118
msgid "At the time of writing, Qiskit Nature ships with a single variant of properties: the ``SecondQuantizedProperty`` objects."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:120
msgid "This sub-type adds one additional requirement because any ``SecondQuantizedProperty``"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:122
msgid "**must** implement a ``second_q_ops`` method which constructs a (list of) ``SecondQuantizedOp``\\ s."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:133
msgid "The ``qiskit_nature.properties.second_quantization`` module is further divided into ``electronic`` and ``vibrational`` modules (similar to other modules of Qiskit Nature). Let us dive into the ``electronic`` sub-module first."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:145
msgid "Electronic Second Quantization Properties"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:156
msgid "Out-of-the-box Qiskit Nature ships the following electronic properties:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:183
msgid "``ElectronicEnergy`` is arguably the most important property because it contains the *Hamiltonian* representing the electronic structure problem whose eigenvalues we are interested in when solving an ``ElectronicStructureProblem``. The way in which it stores this Hamiltonian is, just like the rest of the framework, highly modular. The initializer of the ``ElectronicEnergy`` has a single required argument, ``electronic_integrals``, which is a ``List[ElectronicIntegrals]``."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:195
msgid "ElectronicIntegrals"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:221
msgid "The ``ElectronicIntegrals`` are a container class for *n-body* interactions in a given basis, which can be any of the following:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:282
msgid "Let us take the ``OneBodyElectronicIntegrals`` as an example. As the name suggests, this container is for 1-body interaction integrals. You can construct an instance of it like so:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:357
msgid "As you can see, the first argument simply specifies the basis of the integrals. The second argument requires a little further explanation:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:359
msgid "In the case of the ``AO`` or ``MO`` basis, this argument **must** be a pair of numpy arrays, where the first and second one are the alpha- and beta-spin integrals, respectively."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:361
msgid "**Note:** The second argument may be ``None``, for the case where the beta-spin integrals are the same as the alpha-spin integrals (so there is no need to provide the same values twice)."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:363
msgid "In the case of the ``SO`` basis, this argument **must** be a single numpy array, storing the alpha- and beta-spin integrals in blocked order, i.e. like so:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:378
msgid "The ``TwoBodyElectronicIntegrals`` work pretty much the same except that they contain all possible spin-combinations in the tuple of numpy arrays. For example:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:527
msgid "We should take note of a few observations:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:529
msgid "the numpy arrays shall be ordered as ``(\"alpha-alpha\", \"beta-alpha\", \"beta-beta\", \"alpha-beta\")``"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:530
msgid "the ``alpha-alpha`` matrix may **not** be ``None``"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:531
msgid "if the ``alpha-beta`` matrix is ``None``, but ``beta-alpha`` is not, its transpose will be used (like above)"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:532
msgid "in any other case, matrices which are ``None`` will be filled with the ``alpha-alpha`` matrix"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:534
msgid "in the ``SO`` basis case, a single numpy array must be specified. Refer to ``TwoBodyElectronicIntegrals.to_spin()`` for its exact formatting."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:546
msgid "ElectronicEnergy"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:557
msgid "Now we are ready to construct an ``ElectronicEnergy`` instance:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:730
msgid "This property can now be used to construct a ``SecondQuantizedOp`` (which can then be mapped to a ``QubitOperator``):"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:800
msgid "Result interpretation"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:811
msgid "An additional benefit which we gain from the ``Property`` framework, is that the result interpretation of a computed eigenvalue can be handled by each property itself. This results in nice and logically consistent classes because the result gets interpreted in the same context where the raw data is available."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:874
msgid "While this particular example is not yet very impressive, wait until we use more properties at once."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:886
msgid "ParticleNumber"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:897
msgid "The ``ParticleNumber`` property also takes a special place among the builtin properties because it serves a dual purpose of:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:899
msgid "storing the number of particles in the electronic system"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:900
msgid "providing the operators to evaluate the number of particles for a given eigensolution of the problem"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:902
msgid "Therefore, this property is required if you want to use additional functionality like the ``ActiveSpaceTransformer`` or the ``ElectronicStructureProblem.default_filter_criterion()``."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:966
msgid "GroupedProperty"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:977
msgid "Rather than iterating all of the other properties one by one, let us simply consider a group of properties as provided by any ``ElectronicStructureDriver`` from the ``qiskit_nature.drivers.second_quantization`` module."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:1597
msgid "There is a lot going on but with the explanations above you should not have any problems with understanding this output."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:1609
msgid "Constructing a Hamiltonian from raw integrals"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:1620
msgid "If you have obtained some raw one- and two-body integrals by means other than through a driver provided by Qiskit Nature, you can still easily construct an ``ElectronicEnergy`` property to serve as your access point into the stack:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:1808
msgid "Vibrational Second Quantization Properties"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:1819
msgid "The ``vibrational`` stack for vibrational structure calculations also integrates with the Property framework. After the above introduction you should be able to understand the following directly:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:1852
msgid "For vibrational structure calculations we always need to define the basis which we want to work in, separately:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:1996
msgid "Writing custom Properties"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:2007
msgid "You can extend the Property framework with your own implementations. Here, we will walk through the simple example of constructing a Property for the *electronic density*. Since this observable is essentially based on matrices, we will be leveraging the ``OneBodyElectronicIntegrals`` container to store the actual density matrix."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:2217
msgid "Of course, the above example is very minimal and can be extended at will."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:2228
msgid "**Note:** as of Qiskit Nature version 0.2.0, the direct integration of custom Property objects into the stack is not implemented yet, due to limitations of the auxiliary operator parsing. See https://github.com/Qiskit/qiskit-nature/issues/312 for more details."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:2230
msgid "For the time being, you can still evaluate a custom Property, by passing it’s generated operators directly to the ``Eigensolver.solve`` method by means of constructing the ``aux_operators``. Note, however, that you will have to deal with transformations applied to your properties manually, until the above issue is resolved."
msgstr ""

