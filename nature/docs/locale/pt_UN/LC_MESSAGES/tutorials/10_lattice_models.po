msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-16 20:19+0000\n"
"PO-Revision-Date: 2022-06-21 19:23\n"
"Last-Translator: \n"
"Language-Team: Portuguese (United)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pr\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/10_lattice_models.po\n"
"X-Crowdin-File-ID: 9725\n"
"Language: pt_UN\n"

#: ../../tutorials/10_lattice_models.ipynb:9
msgid "This page was generated from `docs/tutorials/10_lattice_models.ipynb`__."
msgstr "Esta página foi gerada a partir de `docs/tutorials/10_lattice_models.ipynb`__."

#: ../../tutorials/10_lattice_models.ipynb:9
msgid "Lattice models"
msgstr "Modelos de rede"

#: ../../tutorials/10_lattice_models.ipynb:21
msgid "Introduction"
msgstr "Introdução"

#: ../../tutorials/10_lattice_models.ipynb:23
msgid "In quantum physics (including condensed matter physics and high energy physics) we often study models on lattices. For example, when we think about behavior of electrons in a solid, we can study a model defined on a lattice by considering the positions of atoms as lattice points. This notebook demonstrates how we can utilize ``Lattice`` classes to generate various lattice systems such as ``LineLattice``, ``SquareLattice``, ``HyperCubicLattice``, ``TriangularLattice``, and a general lattice. It also includes an example of a lattice model, the Fermi-Hubbard model. We see how we can define the Hamiltonian of the Fermi-Hubbard model for a given lattice using ``FermiHubbardModel`` class."
msgstr "Na física quântica (incluindo física da matéria condensada e física de alta energia), muitas vezes estudamos modelos em redes. Por exemplo, quando pensamos no comportamento dos elétrons em um sólido, podemos estudar um modelo definido em uma rede considerando as posições dos átomos como pontos da rede. Este notebook demonstra como podemos usar classes ``Lattice`` para gerar vários sistemas de rede como ``LineLattice``, ``SquareLattice``, ``HyperCubicLattice``, ``TriangularLattice`` e uma rede geral. Também inclui um exemplo de modelo de rede, o modelo de Fermi-Hubbard. Vemos como podemos definir o Hamiltoniano do modelo de Fermi-Hubbard para uma dada rede usando a classe ``FermiHubbardModel``."

#: ../../tutorials/10_lattice_models.ipynb:59
msgid "LineLattice"
msgstr "LineLattice"

#: ../../tutorials/10_lattice_models.ipynb:61
msgid "``LineLattice`` provides a one-dimensional lattice. We can construct a one-dimensional lattice as follows."
msgstr "``LineLattice`` fornece uma rede unidimensional. Podemos construir uma rede unidimensional da seguinte forma."

#: ../../tutorials/10_lattice_models.ipynb:84
msgid "Here, it is visualized."
msgstr "Aqui, é visualizada."

#: ../../tutorials/10_lattice_models.ipynb:113
msgid "We can also construct a one-dimensional lattice with the periodic boundary conditions by specifying ``BoundaryCondition.PERIODIC`` as the argument of ``boundary_condition``."
msgstr "Nós também podemos construir uma rede unidimensional com as condições de contorno periódicas especificando ``BoundaryCondition.PERIODIC`` como o argumento de ``condição_limite``."

#: ../../tutorials/10_lattice_models.ipynb:146
msgid "When we want to draw the lattice ignoring the boundary conditions, we use the method ``draw_without_boundary``."
msgstr "Quando queremos desenhar a rede ignorando as condições de contorno, usamos o método ``draw_without_boundary``."

#: ../../tutorials/10_lattice_models.ipynb:175
msgid "We can define real or complex weights for the edges of the lattice. This is done by giving a value to the argument ``edge_parameter``. We can also give a value for the self-loops of the lattice by passing the value for ``onsite_parameter``."
msgstr "Podemos definir pesos reais ou complexos para as arestas da rede. Isso é feito dando um valor ao argumento ``edge_parameter``. Também podemos dar um valor para os auto-loops da rede passando o valor para ``onsite_parameter``."

#: ../../tutorials/10_lattice_models.ipynb:294
msgid "The connectivity of the lattice can be seen as the adjacency matrix, which is done by ``to_adjacency_matrix``."
msgstr "A conectividade da rede pode ser vista como a matriz de adjacência, que é feita por ``to_adjacency_matrix``."

#: ../../tutorials/10_lattice_models.ipynb:370
msgid "By setting ``weighted=True``, we obtain a Hermitian matrix whose matrix elements are the weights."
msgstr "Ao definir ``weighted=True``, obtemos uma matriz Hermitiana cujos elementos da matriz são os pesos."

#: ../../tutorials/10_lattice_models.ipynb:480
msgid "SquareLattice"
msgstr "SquareLattice"

#: ../../tutorials/10_lattice_models.ipynb:482
msgid "``SquareLattice`` provides a two-dimensional lattice. Here, we make a two-dimensional lattice with the open boundary conditions."
msgstr "``SquareLattice`` fornece uma rede bidimensional. Aqui, fazemos uma rede bidimensional com as condições de contorno abertas."

#: ../../tutorials/10_lattice_models.ipynb:516
msgid "We can specify the boundary conditions for each direction by setting ``boundary_condition`` as a tuple."
msgstr "Podemos especificar as condições de contorno para cada direção definindo ``boundary_condition`` como uma tupla."

#: ../../tutorials/10_lattice_models.ipynb:553
msgid "Again, we can give weights on the edges and the self-loops of the lattice. Here, it is possible to give weights for each direction as a tuple."
msgstr "Novamente, podemos dar pesos nas arestas e nos auto-loops da rede. Aqui, é possível atribuir pesos para cada direção como uma tupla."

#: ../../tutorials/10_lattice_models.ipynb:781
msgid "HyperCubicLattice"
msgstr "HyperCubicLattice"

#: ../../tutorials/10_lattice_models.ipynb:783
msgid "``HyperCubicLattice`` is a generalization of ``LineLattice`` and ``SquareLattice``. It provides an arbitrary d-dimensional lattice. Here, we make a three-dimensional lattice of size 3 by 4 by 5 as an example. The size is given as a tuple, and the boundary conditions can be specified for each direction too. In the example, the boundary conditions are open."
msgstr "``HyperCubicLattice`` é uma generalização de ``LineLattice`` e ``SquareLattice``. Ele fornece uma rede d-dimensional arbitrária. Aqui, fazemos uma rede tridimensional de tamanho 3 por 4 por 5 como exemplo. O tamanho é dado como uma tupla, e as condições de contorno também podem ser especificadas para cada direção. No exemplo, as condições de contorno estão abertas."

#: ../../tutorials/10_lattice_models.ipynb:810
msgid "We draw the cubic lattice specifying the positions of the lattice points."
msgstr "Desenhamos a rede cúbica especificando as posições dos pontos da rede."

#: ../../tutorials/10_lattice_models.ipynb:855
msgid "TriangularLattice"
msgstr "TriangularLattice"

#: ../../tutorials/10_lattice_models.ipynb:857
msgid "``TriangularLattice`` provides a triangular lattice, which can be seen as a two-dimensional lattice with diagonal edges. The argument ``boundary_condition`` can take either “open” or “periodic”."
msgstr "``TriangularLattice`` fornece uma rede triangular, que pode ser vista como uma rede bidimensional com arestas diagonais. O argumento ``boundary_condition`` pode ser “ open” ou “ periodic”."

#: ../../tutorials/10_lattice_models.ipynb:917
msgid "General Lattice"
msgstr "Rede Geral"

#: ../../tutorials/10_lattice_models.ipynb:919
msgid "Above, we have seen translational invariant lattices. Here, we consider a general lattice. We can construct a general lattice consisting of nodes and edges using an instance of PyGraph."
msgstr "Acima, vimos redes invariantes translacionais. Aqui, consideramos uma rede geral. Podemos construir uma rede geral consistindo de nós e arestas usando uma instância de PyGraph."

#: ../../tutorials/10_lattice_models.ipynb:994
msgid "Here is its visualization."
msgstr "Aqui está a sua visualização."

#: ../../tutorials/10_lattice_models.ipynb:1023
msgid "When we want to visualize the self-loops in the lattice, we set ``self_loop`` to True."
msgstr "Quando queremos visualizar os auto-loops na rede, configuramos ``self_loop`` para True."

#: ../../tutorials/10_lattice_models.ipynb:1052
msgid "The labels of the lattice sites are drawn when ``with_labels`` is True."
msgstr "Os rótulos dos sítios da rede são desenhados quando ``with_labels`` é True."

#: ../../tutorials/10_lattice_models.ipynb:1082
msgid "The Fermi-Hubbard model"
msgstr "O modelo de Fermi-Hubbard"

#: ../../tutorials/10_lattice_models.ipynb:1084
msgid "The Fermi-Hubbard model is the simplest model describing electrons moving on a lattice and interaction with each other at the same site. The Hamiltonian is given as follows:"
msgstr "O modelo de Fermi-Hubbard é o modelo mais simples que descreve elétrons movendo-se em uma rede e interagindo uns com os outros no mesmo sítio. O hamiltoniano é dado da seguinte forma:"

#: ../../tutorials/10_lattice_models.ipynb:1095
msgid "H = \\sum_{i, j}\\sum_{\\sigma = \\uparrow, \\downarrow} t_{i, j} c_{i, \\sigma}^\\dagger c_{j, \\sigma} + U \\sum_{i} n_{i, \\uparrow} n_{i, \\downarrow},"
msgstr "H = \\sum_{i, j}\\sum_{\\sigma = \\uparrow, \\downarrow} t_{i, j} c_{i, \\sigma}^\\dagger c_{j, \\sigma} + U \\sum_{i} n_{i, \\uparrow} n_{i, \\downarrow},"

#: ../../tutorials/10_lattice_models.ipynb:1109
msgid "where :math:`c_{i, \\sigma}^\\dagger` and :math:`c_{i, \\sigma}` are creation and annihilation operators of fermion at the site :math:`i` with spin :math:`\\sigma`. The operator :math:`n_{i, \\sigma}` is the number operator, which is defined by :math:`n_{i, \\sigma} = c_{i, \\sigma}^\\dagger c_{i, \\sigma}`. The matrix :math:`t_{i, j}` is a Hermitian matrix called interaction matrix. The parameter :math:`U` represents the strength of the interaction."
msgstr "onde :math:`c_{i, \\sigma}^\\dagger` e :math:`c_{i, \\sigma}` são operadores de criação e aniquilação de férmion no sítio :math:`i` com spin :math: `\\sigma`. O operador :math:`n_{i, \\sigma}` é o operador de número, que é definido por :math:`n_{i, \\sigma} = c_{i, \\sigma}^\\dagger c_{i, \\ sigma}`. A matriz :math:`t_{i, j}` é uma matriz Hermitiana chamada matriz de interação. O parâmetro :math:`U` representa a força da interação."

#: ../../tutorials/10_lattice_models.ipynb:1120
msgid "We can generate the corresponding Hamiltonian of a given lattice using ``FermiHubbardModel`` class. Here, we construct the Hamiltonian with uniform interaction and interaction parameters on a two-dimensional lattice."
msgstr "Podemos gerar o Hamiltoniano correspondente de uma dada rede usando a classe ``FermiHubbardModel``. Aqui, construímos o Hamiltoniano com interação uniforme e parâmetros de interação em uma rede bidimensional."

#: ../../tutorials/10_lattice_models.ipynb:1152
msgid "To obtain the Hamiltonian in terms of the fermionic operators, we use ``second_q_ops`` method. The Hamiltonian is returned as an instance of ``FermionicOp``."
msgstr "Para obter o Hamiltoniano em termos dos operadores fermiônicos, usamos o método ``second_q_ops``. O Hamiltoniano é retornado como uma instância de ``FermionicOp``."

#: ../../tutorials/10_lattice_models.ipynb:1163
msgid "Note"
msgstr "Nota"

#: ../../tutorials/10_lattice_models.ipynb:1165
msgid "The number of fermionic operators required is twice the number of lattice sites because of the spin degrees of freedom."
msgstr "O número de operadores fermiônicos necessários é o dobro do número de sítios da rede por causa dos graus de liberdade de spin."

#: ../../tutorials/10_lattice_models.ipynb:1166
msgid "In the implementation, even indexes correspond to up-spin and odd indexes to down-spin."
msgstr "Na implementação, os índices pares correspondem ao giro ascendente e os índices ímpares ao giro descendente."

#: ../../tutorials/10_lattice_models.ipynb:1239
msgid "``Lattice`` has weights on its edges, so we can define a general interaction matrix using a Lattice instance. Here, we consider the Fermi-Hubbard model on a general lattice on which non-uniform interaction parameters are given. In this case, the weights of the lattice are regarded as the interaction matrix. After generating the Hamiltonian (``second_q_ops``) we can use a qubit converter to generate the qubit operators and/or use any of the available algorithms to solver the corresponding lattice problem."
msgstr "``Lattice`` tem pesos em suas arestas, então podemos definir uma matriz de interação geral usando uma instância de Lattice. Aqui, consideramos o modelo de Fermi-Hubbard em uma rede geral na qual são dados parâmetros de interação não uniformes. Neste caso, os pesos da rede são considerados como a matriz de interação. Após gerar o Hamiltoniano (``second_q_ops``) podemos usar um conversor de qubit para gerar os operadores de qubit e/ou usar qualquer um dos algoritmos disponíveis para resolver o problema de rede correspondente."

#: ../../tutorials/10_lattice_models.ipynb:1392
msgid "LatticeModelProblem"
msgstr "LatticeModelProblem"

#: ../../tutorials/10_lattice_models.ipynb:1394
msgid "Qiskit Nature also has a ``LatticeModelProblem`` class which allows the usage of the ``GroundStateEigensolver`` to calculate the ground state energy of a given lattice. You can use this class as follows:"
msgstr "Qiskit Nature também tem uma classe ``LatticeModelProblem`` que permite o uso do ``GroundStateEigensolver`` para calcular a energía do estado fundamental de uma grade determinada. Pode usar esta classe da seguinte maneira:"

