# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, 2023, Qiskit Nature Development Team
# This file is distributed under the same license as the Qiskit Nature
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit Nature 0.5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-07 03:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../tutorials/09_properties.ipynb:9
msgid "This page was generated from `docs/tutorials/09_properties.ipynb`__."
msgstr ""

#: ../../tutorials/09_properties.ipynb:9
msgid "Properties - or - Operator Factories"
msgstr ""

#: ../../tutorials/09_properties.ipynb:11
msgid ""
"Qiskit Nature has various built-in “properties”. These objects are "
"effectively operator factories, since they allow the programming of "
"operator blueprints based on a minimal set of required information. Some "
"commonly used examples are the ``ParticleNumber``, ``AngularMomentum`` "
"and ``Magnetization`` properties, all of which take only the system size "
"as their only input, and generate a ``SparseLabelOp`` of the required "
"size."
msgstr ""

#: ../../tutorials/09_properties.ipynb:13
msgid ""
"These properties can be registered in a ``problem`` instance which will "
"cause them to be evaluated once a ground state and/or excited states of "
"that problem have been found. In the following, we will explain the "
"general concept of how this works."
msgstr ""

#: ../../tutorials/09_properties.ipynb:24
msgid ""
"The ``BaseProblem`` base class dictates the existence of the "
"``.properties`` attribute on any ``problem`` instance. This attribute is "
"of type ``PropertiesContainer`` which is an object that can hold at most "
"one instance of any ``SparseLabelOpsFactory`` (or property class, as we "
"commonly refer to them)."
msgstr ""

#: ../../tutorials/09_properties.ipynb:74
msgid ""
"You can now modify the contents of the ``PropertiesContainer`` to your "
"desire:"
msgstr ""

#: ../../tutorials/09_properties.ipynb:143
msgid ""
"The specific subclasses of ``BaseProblem`` for the various stacks such as"
" `electronic structure <01_electronic_structure.ipynb>`__, `vibrational "
"structure <02_vibrational_structure.ipynb>`__ or `lattice models "
"<10_lattice_models.ipynb>`__ make things even simpler for you, because "
"they provide direct attributes for the built-in properties of Qiskit "
"Nature:"
msgstr ""

#: ../../tutorials/09_properties.ipynb:208
msgid ""
"Note that the ``ElectronicDipoleMoment`` is populated by default. To "
"exclude it, you can use the drivers ``to_problem()`` method and provide "
"the ``include_dipole=False`` keyword argument. Refer to the drivers "
"documentation for more details."
msgstr ""

#: ../../tutorials/09_properties.ipynb:219
msgid ""
"You can see, that all properties come pre-populated except for the "
"``ElectronicDensity``. But this is easy to add:"
msgstr ""

#: ../../tutorials/09_properties.ipynb:247
msgid ""
"The same concepts apply to the ``VibrationalStructureProblem`` and the "
"``LatticeModelProblem``."
msgstr ""

