# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, 2022, Qiskit Nature Development Team
# This file is distributed under the same license as the Qiskit Nature
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit Nature 0.4.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-09-22 21:47+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../tutorials/03_ground_state_solvers.ipynb:9
msgid ""
"This page was generated from "
"`docs/tutorials/03_ground_state_solvers.ipynb`__."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:9
msgid "Ground state solvers"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:21
msgid "Introduction"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:23
msgid "|a2d9981a0c6649e6825f34829bd6cfec|"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:29
msgid "a2d9981a0c6649e6825f34829bd6cfec"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:25
msgid ""
"In this tutorial we are going to discuss the ground state calculation "
"interface of Qiskit Nature. The goal is to compute the ground state of a "
"molecular Hamiltonian. This Hamiltonian can be electronic or vibrational."
" To know more about the preparation of the Hamiltonian, check out the "
"Electronic structure and Vibrational structure tutorials."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:27
msgid ""
"The first step is to define the molecular system. In the following we ask"
" for the electronic part of a hydrogen molecule."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:69
msgid "The Solver"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:71
msgid ""
"Then we need to define a solver. The solver is the algorithm through "
"which the ground state is computed."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:73
msgid ""
"Let’s first start with a purely classical example: the NumPy minimum "
"eigensolver. This algorithm exactly diagonalizes the Hamiltonian. "
"Although it scales badly, it can be used on small systems to check the "
"results of the quantum algorithms."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:96
msgid ""
"To find the ground state we coul also use the Variational Quantum "
"Eigensolver (VQE) algorithm. The VQE algorithms works by exchanging "
"information between a classical and a quantum computer as depicted in the"
" following figure."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:98
msgid "|6def253bc406411ea4c352c7dd8c7e7c|"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:102
msgid "6def253bc406411ea4c352c7dd8c7e7c"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:100
msgid "Let’s initialize a VQE solver."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:129
msgid "To define the VQE solver one needs two essential elements:"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:131
msgid ""
"A variational form: here we use the Unitary Coupled Cluster (UCC) ansatz "
"(see for instance [Physical Review A 98.2 (2018): 022322]). Since it is a"
" chemistry standard, a factory is already available allowing a fast "
"initialization of a VQE with UCC. The default is to use all single and "
"double excitations. However, the excitation type (S, D, SD) as well as "
"other parameters can be selected."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:132
msgid ""
"An initial state: the initial state of the qubits. In the factory used "
"above, the qubits are initialized in the Hartree-Fock (see the electronic"
" structure tutorial) initial state (the qubits corresponding to occupied "
"MOs are :math:`|1\\rangle` and those corresponding to virtual MOs are "
":math:`|0\\rangle`."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:133
msgid ""
"The backend: this is the quantum machine on which the right part of the "
"figure above will be performed. Here we ask for the perfect quantum "
"emulator (``aer_simulator_statevector``)."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:135
msgid ""
"One could also use any available ansatz / initial state or even define "
"one’s own. For instance,"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:171
msgid "The calculation and results"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:173
msgid "We are now ready to run the calculation."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:283
msgid ""
"We can compare the VQE results to the NumPy exact solver and see that "
"they match."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:391
msgid "Using a filter function"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:402
msgid ""
"Sometimes the true ground state of the Hamiltonian is not of interest "
"because it lies in a different symmetry sector of the Hilbert space. In "
"this case the NumPy eigensolver can take a filter function to return only"
" the eigenstates with for example the correct number of particles. This "
"is of particular importance in the case of vibrational structure "
"calculations where the true ground state of the Hamiltonian is the vacuum"
" state. A default filter function to check the number of particles is "
"implemented in the different transformations and can be used as follows:"
msgstr ""

