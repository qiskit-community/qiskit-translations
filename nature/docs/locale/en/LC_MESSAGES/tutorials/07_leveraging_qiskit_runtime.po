# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, 2021, Qiskit Nature Development Team
# This file is distributed under the same license as the Qiskit Nature
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit Nature 0.2.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-29 19:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:9
msgid ""
"This page was generated from "
"`docs/tutorials/07_leveraging_qiskit_runtime.ipynb`__."
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:9
msgid "Leveraging Qiskit Runtime"
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:20
msgid ""
"Iterative algorithms, such as the Variational Quantum Eigensolver (VQE), "
"traditionally send one batch of circuits (one “job”) to be executed on "
"the quantum device in each iteration. Sending a job involves certain "
"overhead, mainly"
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:22
msgid ""
"the time to process the requests and send the data (API overhead, usually"
" about 10s)"
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:23
msgid ""
"the job queue time, that is how long you have to wait before it’s your "
"turn to run on the device (usually about 2min)"
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:25
msgid ""
"If we send hundreds of jobs iteratively, this overhead quickly dominates "
"the execution time of our algorithm. Qiskit Runtime allows us to tackle "
"these issues and significantly speed up (especially) iterative "
"algorithms. With Qiskit Runtime, one job does not contain only a batch of"
" circuits but the *entire* algorithm. That means we only experience the "
"API overhead and queue wait *once* instead of in every iteration! You’ll "
"be able to either upload algorithm parameters and delegate all the "
"complexity to the cloud, where your program is executed, or upload your "
"personal algorithm directly."
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:28
msgid ""
"For the VQE, the integration of Qiskit Runtime in your existing code is a"
" piece of cake. There is a (almost) drop-in replacement, called "
"``VQEProgram`` for the ``VQE`` class."
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:30
msgid ""
"Let’s see how you can leverage the runtime on a simple chemistry example:"
" Finding the ground state energy of the lithium hydrate (LiH) molecule at"
" a given bond distance."
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:42
msgid "Problem specification: LiH molecule"
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:44
msgid ""
"First, we specify the molecule whose ground state energy we seek. Here, "
"we look at LiH with a bond distance of 2.5 Å."
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:105
msgid "Classical reference solution"
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:116
msgid ""
"As a reference solution we can solve this system classically with the "
"``NumPyEigensolver``."
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:175
msgid "VQE"
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:177
msgid ""
"To run the VQE we need to select a parameterized quantum circuit acting "
"as ansatz and a classical optimizer. Here we’ll choose a heuristic, "
"hardware efficient ansatz and the SPSA optimizer."
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:225
msgid ""
"Before executing the VQE in the cloud using Qiskit Runtime, let’s execute"
" a local VQE first."
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:306
msgid "Runtime VQE"
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:308
msgid ""
"Let’s exchange the eigensolver from a local VQE algorithm to a VQE "
"executed using Qiskit Runtime – simply by exchanging the ``VQE`` class by"
" the ``VQEProgram``."
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:310
msgid ""
"First, we’ll have to load a provider to access Qiskit Runtime. **Note:** "
"You have to replace the next cell with your provider."
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:336
msgid ""
"Now we can set up the ``VQEProgram``. In this first release, the "
"optimizer must be provided as a dictionary, in future releases you’ll be "
"able to pass the same optimizer object as in the traditional VQE."
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:413
msgid ""
"If we are interested in the development of the energy, the ``VQEProgram``"
" allows access to the history of the optimizer, which contains the loss "
"per iteration (along with the parameters and a timestamp). We can access "
"this data via the ``raw_result`` attribute of the ground state solver."
msgstr ""

