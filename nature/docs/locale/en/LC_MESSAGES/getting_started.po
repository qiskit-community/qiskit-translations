# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, 2023, Qiskit Nature Development Team
# This file is distributed under the same license as the Qiskit Nature
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit Nature 0.6.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-09 10:01+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../getting_started.rst:5
msgid "Getting started"
msgstr ""

#: ../../getting_started.rst:8
msgid "Installation"
msgstr ""

#: ../../getting_started.rst:10
msgid ""
"Qiskit Nature depends on the main Qiskit package which has its own "
"`Qiskit Getting Started "
"<https://qiskit.org/documentation/getting_started.html>`__ detailing the "
"installation options for Qiskit and its supported environments/platforms."
" You should refer to that first. Then the information here can be "
"followed which focuses on the additional installation specific to Qiskit "
"Nature."
msgstr ""

#: ../../getting_started.rst:16
msgid ""
"Qiskit Nature has some functions that have been made optional where the "
"dependent code and/or support program(s) are not (or cannot be) installed"
" by default. These include, for example, classical library/programs for "
"molecular problems. See :ref:`optional_installs` for more information."
msgstr ""

#: ../../getting_started.rst
msgid "Start locally"
msgstr ""

#: ../../getting_started.rst:25
msgid ""
"The simplest way to get started is to follow the `getting started 'Start "
"locally' guide for Qiskit "
"<https://qiskit.org/documentation/getting_started.html>`__"
msgstr ""

#: ../../getting_started.rst:28
msgid ""
"In your virtual environment where you installed Qiskit simply add "
"``nature`` to the extra list in a similar manner to how the extra "
"``visualization`` support is installed for Qiskit, i.e:"
msgstr ""

#: ../../getting_started.rst:36
msgid ""
"It is worth pointing out that if you're a zsh user (which is the default "
"shell on newer versions of macOS), you'll need to put ``qiskit[nature]`` "
"in quotes:"
msgstr ""

#: ../../getting_started.rst
msgid "Install from source"
msgstr ""

#: ../../getting_started.rst:46
msgid ""
"Installing Qiskit Nature from source allows you to access the most "
"recently updated version under development instead of using the version "
"in the Python Package Index (PyPI) repository. This will give you the "
"ability to inspect and extend the latest version of the Qiskit Nature "
"code more efficiently."
msgstr ""

#: ../../getting_started.rst:51
msgid ""
"Since Qiskit Nature depends on Qiskit, and its latest changes may require"
" new or changed features of Qiskit, you should first follow Qiskit's "
"`\"Install from source\"` instructions here `Qiskit Getting Started "
"<https://qiskit.org/documentation/getting_started.html>`__"
msgstr ""

#: ../../getting_started.rst:59
msgid ""
"Using the same development environment that you installed Qiskit in you "
"are ready to install Qiskit Nature."
msgstr ""

#: ../../getting_started.rst:62
msgid "Clone the Qiskit Nature repository."
msgstr ""

#: ../../getting_started.rst:68
msgid "Cloning the repository creates a local folder called ``qiskit-nature``."
msgstr ""

#: ../../getting_started.rst:74
msgid ""
"If you want to run tests or linting checks, install the developer "
"requirements."
msgstr ""

#: ../../getting_started.rst:80
msgid "Install ``qiskit-nature``."
msgstr ""

#: ../../getting_started.rst:86
msgid ""
"If you want to install it in editable mode, meaning that code changes to "
"the project don't require a reinstall to be applied, you can do this "
"with:"
msgstr ""

#: ../../getting_started.rst:97
msgid "Optional installs"
msgstr ""

#: ../../getting_started.rst:99
msgid ""
"Qiskit Nature supports the use of different classical libraries and "
"programs, via drivers, which compute molecular information, such as one "
"and two body integrals. This is needed as problem input to algorithms "
"that compute properties of molecules, such as the ground state energy, so"
" at least one such library/program should be installed. As you can choose"
" which driver you use, you can install as many, or as few as you wish, "
"that are supported by your platform etc."
msgstr ""

#: ../../getting_started.rst:105
msgid ""
"See `Driver installation "
"<./apidocs/qiskit_nature.second_q.drivers.html>`__ which lists each "
"driver and how to install the dependent library/program that it requires."
msgstr ""

#: ../../getting_started.rst:108
msgid "Additionally, you may find the following optional dependencies useful:"
msgstr ""

#: ../../getting_started.rst:110
msgid ""
"`sparse <https://github.com/pydata/sparse/>`_, a library for sparse "
"multi-dimensional arrays. When installed, Qiskit Nature can leverage this"
" to reduce the memory requirements of your calculations."
msgstr ""

#: ../../getting_started.rst:111
msgid ""
"`opt_einsum <https://github.com/dgasmith/opt_einsum>`_, a tensor "
"contraction order optimizer for ``np.einsum``."
msgstr ""

#: ../../getting_started.rst:116
msgid "Ready to get going?..."
msgstr ""

#: ../../getting_started.rst:118
msgid ""
"Now that Qiskit Nature is installed, let's try a chemistry application "
"experiment using the :class:`~qiskit.algorithms.minimum_eigensolvers.VQE`"
" (Variational Quantum Eigensolver) algorithm to compute the ground-state "
"(minimum) energy of a molecule."
msgstr ""

#: ../../getting_started.rst:208
msgid ""
"The program above computes the ground state energy of molecular Hydrogen,"
" H<sub>2</sub>, where the two atoms are configured to be at a distance of"
" 0.735 angstroms. The molecular input specification is processed by the "
"PySCF driver. This driver produces an "
":class:`~qiskit_nature.second_q.problems.ElectronicStructureProblem` "
"which gathers all the problem information required by Qiskit Nature. The "
"second-quantized operators contained in that problem can be mapped to "
"qubit operators with a "
":class:`~qiskit_nature.second_q.mappers.QubitMapper`. Here, we chose the "
":class:`~qiskit_nature.second_q.mappers.ParityMapper` which automatically"
" removes 2 qubits due to inherit symmetries when the `num_particles` are "
"provided to it; a reduction in complexity that is particularly "
"advantageous for NISQ computers."
msgstr ""

#: ../../getting_started.rst:221
msgid ""
"For actually finding the ground state solution, the Variational Quantum "
"Eigensolver (:class:`~qiskit.algorithms.minimum_eigensolvers.VQE`) "
"algorithm is used. Its main three components are the estimator primitive "
"(:class:`~qiskit.primitives.Estimator`), wavefunction ansatz "
"(:class:`~qiskit_nature.second_q.circuit.library.UCCSD`), and optimizer "
"(:class:`~qiskit.algorithms.optimizers.L_BFGS_B`). The "
":class:`~qiskit_nature.second_q.circuit.library.UCCSD` component is the "
"only one provided directly by Qiskit Nature and it is usually paired with"
" the :class:`~qiskit_nature.second_q.circuit.library.HartreeFock` initial"
" state and an all-zero initial point for the optimizer."
msgstr ""

#: ../../getting_started.rst:232
msgid ""
"The entire problem is then solved using a "
":class:`~qiskit_nature.second_q.algorithms.GroundStateEigensolver` which "
"wraps both, the :class:`~qiskit_nature.second_q.mappers.ParityMapper` and"
" :class:`~qiskit.algorithms.minimum_eigensolvers.VQE`. Since an "
":class:`~qiskit_nature.second_q.problems.ElectronicStructureProblem` is "
"provided to it (which was the output of the "
":class:`~qiskit_nature.second_q.drivers.PySCFDriver`) it also returns an "
":class:`~qiskit_nature.second_q.problems.ElectronicStructureResult`."
msgstr ""

