# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, 2023, Qiskit Nature Development Team
# This file is distributed under the same license as the Qiskit Nature
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit Nature 0.6.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-01 15:27+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../migration/0.6_b_mes_factory.rst:2
msgid "The (Minimum)EigensolverFactory Migration Guide"
msgstr ""

#: ../../migration/0.6_b_mes_factory.rst:4
msgid ""
"All the factory classes which could be used to construct "
":class:`~qiskit.algorithms.minimum_eigensolvers.MinimumEigensolver` or "
":class:`~qiskit.algorithms.eigensolvers.Eigensolver` objects have been "
"deprecated as part of version 0.6 of Qiskit Nature."
msgstr ""

#: ../../migration/0.6_b_mes_factory.rst:9
msgid ""
"Their benefit over an improved documentation on how to properly set these"
" algorithms up for use with Qiskit Nature has diminished over time. Thus,"
" you can now find proper **How-to guides**, as listed below, detailing "
"how you can achieve the same functionality which used to be provided by "
"these classes. The table below summarizes where you need to look for the "
"steps to replace a factory class:"
msgstr ""

#: ../../migration/0.6_b_mes_factory.rst:14
msgid "(Minimum)EigensolverFactory Replacements"
msgstr ""

#: ../../migration/0.6_b_mes_factory.rst:17
msgid "Legacy class"
msgstr ""

#: ../../migration/0.6_b_mes_factory.rst:18
msgid "How-to guide"
msgstr ""

#: ../../migration/0.6_b_mes_factory.rst:19
msgid ":class:`~qiskit_nature.second_q.algorithms.NumPyEigensolverFactory`"
msgstr ""

#: ../../migration/0.6_b_mes_factory.rst:20
msgid ""
":ref:`Finding excited state energies with a NumPyEigensolver <how-to-"
"numpy>`"
msgstr ""

#: ../../migration/0.6_b_mes_factory.rst:21
msgid ":class:`~qiskit_nature.second_q.algorithms.NumPyMinimumEigensolverFactory`"
msgstr ""

#: ../../migration/0.6_b_mes_factory.rst:22
msgid ""
":ref:`Finding the ground state energy with a NumPyMinimumEigensolver "
"<how-to-numpy-min>`"
msgstr ""

#: ../../migration/0.6_b_mes_factory.rst:23
msgid ":class:`~qiskit_nature.second_q.algorithms.VQEUCCFactory`"
msgstr ""

#: ../../migration/0.6_b_mes_factory.rst:24
msgid ":ref:`Using a UCC-like ansatz with a VQE <how-to-vqe-ucc>`"
msgstr ""

#: ../../migration/0.6_b_mes_factory.rst:25
msgid ":class:`~qiskit_nature.second_q.algorithms.VQEUVCCFactory`"
msgstr ""

#: ../../migration/0.6_b_mes_factory.rst:26
msgid ":ref:`Using a UVCC-like ansatz with a VQE <how-to-vqe-uvcc>`"
msgstr ""

#: ../../migration/0.6_b_mes_factory.rst:28
msgid ""
"To make the transition to these guides easier, we provide one example for"
" the :class:`~qiskit_nature.second_q.algorithms.VQEUCCFactory` and one "
"for the "
":class:`~qiskit_nature.second_q.algorithms.NumPyEigensolverFactory` "
"below."
msgstr ""

#: ../../migration/0.6_b_mes_factory.rst:33
msgid "Setup"
msgstr ""

#: ../../migration/0.6_b_mes_factory.rst:35
msgid ""
"For the following examples, we need a simple "
":class:`~qiskit_nature.second_q.problems.ElectronicStructureProblem` "
"which we can obtain from a "
":class:`~qiskit_nature.second_q.drivers.PySCFDriver` like so:"
msgstr ""

#: ../../migration/0.6_b_mes_factory.rst:57
msgid "VQEUCCFactory"
msgstr ""

#: ../../migration/0.6_b_mes_factory.rst:59
#: ../../migration/0.6_b_mes_factory.rst:117
msgid "The old way:"
msgstr ""

#: ../../migration/0.6_b_mes_factory.rst:79
#: ../../migration/0.6_b_mes_factory.rst:141
msgid "And the corresponding new way:"
msgstr ""

#: ../../migration/0.6_b_mes_factory.rst:115
msgid "NumPyEigensolverFactory"
msgstr ""

