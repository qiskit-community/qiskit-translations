msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-13 20:52+0000\n"
"PO-Revision-Date: 2021-10-13 21:42\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/07_leveraging_qiskit_runtime.po\n"
"X-Crowdin-File-ID: 9678\n"
"Language: id_ID\n"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:9
msgid "This page was generated from `docs/tutorials/07_leveraging_qiskit_runtime.ipynb`__."
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:9
msgid "Leveraging Qiskit Runtime"
msgstr "Memanfaatkan Runtime Qiskit"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:20
msgid "Iterative algorithms, such as the Variational Quantum Eigensolver (VQE), traditionally send one batch of circuits (one “job”) to be executed on the quantum device in each iteration. Sending a job involves certain overhead, mainly"
msgstr "Algoritme iteratif, seperti \"Variational Quantum Eigensolver\" (VQE), secara tradisional mengirimkan satu kumpulan sirkuit (satu \"pekerjaan\") untuk dieksekusi pada perangkat kuantum pada setiap iterasi. Mengirim sebuah pekerjaan melibatkan ongkos tertentu, terutama"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:22
msgid "the time to process the requests and send the data (API overhead, usually about 10s)"
msgstr "waktu untuk memproses permintaan dan mengirim data (ongkos API, biasanya sekitar 10 detik)"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:23
msgid "the job queue time, that is how long you have to wait before it’s your turn to run on the device (usually about 2min)"
msgstr "waktu antrian pekerjaan, yaitu berapa lama Anda perlu menunggu sebelum giliran Anda untuk menjalankan pekerjaan pada perangkat (biasanya sekitar 2 menit)"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:25
msgid "If we send hundreds of jobs iteratively, this overhead quickly dominates the execution time of our algorithm. Qiskit Runtime allows us to tackle these issues and significantly speed up (especially) iterative algorithms. With Qiskit Runtime, one job does not contain only a batch of circuits but the *entire* algorithm. That means we only experience the API overhead and queue wait *once* instead of in every iteration! You’ll be able to either upload algorithm parameters and delegate all the complexity to the cloud, where your program is executed, or upload your personal algorithm directly."
msgstr "Jika kita mengirimkan ratusan pekerjaan secara iteratif, ongkos ini akan mendominasi waktu eksekusi dari algoritme kita. Qiskit Runtime memungkinkan kita untuk mengatasi isu ini dan mempercepat secara signifikan (khususnya) algoritme iteratif. Dengan Qiskit Runtime, satu pekerjaan tidak hanya berisi satu kumpulan sirkuit, tetapi *seluruh* algoritme. Ini artinya kita hanya mengalami ongkos API dan antrian *sekali* alih-alih setiap iterasi! Anda dapat menunggah parameter algoritme dan menyerahkan semua kompleksitasnya ke cloud di mana program diesksekusi, atau Anda dapat mengunggah langsung algoritme sendiri."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:28
msgid "For the VQE, the integration of Qiskit Runtime in your existing code is a piece of cake. There is a (almost) drop-in replacement, called ``VQEProgram`` for the ``VQE`` class."
msgstr "Untuk VQE, integrasi Qiskit Runtime ke kode yang Anda miliki sangat mudah. (Hampir) terdapat pengganti drop-in, yang disebut ``VQEProgram`` untuk kelas ``VQE``."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:30
msgid "Let’s see how you can leverage the runtime on a simple chemistry example: Finding the ground state energy of the lithium hydrate (LiH) molecule at a given bond distance."
msgstr "Mari kita lihat bagaiman Anda dapat memanfaatkan waktu keberjalanan dalam contoh kimia sederhana: Mencari energi keadaan dasar dari molekul litium hidrida (LiH) pada jarak ikatan tertentu."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:42
msgid "Problem specification: LiH molecule"
msgstr "Spesifikasi masalah: molekul LiH"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:44
msgid "First, we specify the molecule whose ground state energy we seek. Here, we look at LiH with a bond distance of 2.5 Å."
msgstr "Pertama, kita tentukan molekul yang energi keadaan dasarnya ingin kita cari. Di sini, kita melihat LiH dengan panjang ikatan 2.5 Å."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:105
msgid "Classical reference solution"
msgstr "Solusi referensi klasik"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:116
msgid "As a reference solution we can solve this system classically with the ``NumPyEigensolver``."
msgstr "Sebagai solusi referensi, kita dapat memecahkan sistem ini secara klasik dengan ``NumPyEigensolver``."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:175
msgid "VQE"
msgstr "VQE"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:177
msgid "To run the VQE we need to select a parameterized quantum circuit acting as ansatz and a classical optimizer. Here we’ll choose a heuristic, hardware efficient ansatz and the SPSA optimizer."
msgstr "Untuk menjalankan VQE, kita perlu memilih sirkuit kuantum terparameterisasi yang bertindak sebagai ansatz dan sebuah pengoptimasi klasik. Di sini kita memilih ansatz yang heuristis dan yang efisien pada perangkat keras, serta memilih pengoptimasi SPSA."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:225
msgid "Before executing the VQE in the cloud using Qiskit Runtime, let’s execute a local VQE first."
msgstr "Sebelum menjalankan VQE di cloud menggunakan Qiskit Runtime, mari kita eksekusi terlebih dahulu VQE di lokal."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:306
msgid "Runtime VQE"
msgstr "Waktu keberjalanan VQE"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:308
msgid "Let’s exchange the eigensolver from a local VQE algorithm to a VQE executed using Qiskit Runtime – simply by exchanging the ``VQE`` class by the ``VQEProgram``."
msgstr "Mari kita tukar pemecah eigen dari algoritme VQE lokal dengan VQE yang dieksekusi menggunakan Qiskit Runtime – hanya dengan menukar kelas ``VQE`` ke ``VQEProgram``."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:310
msgid "First, we’ll have to load a provider to access Qiskit Runtime. **Note:** You have to replace the next cell with your provider."
msgstr "Pertama, kita perlu memuat penyedia untuk mengakses Qiskit Runtime. **Note:** Anda perlu mengganti sel berikutnya dengan penyedia Anda."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:336
msgid "Now we can set up the ``VQEProgram``. In this first release, the optimizer must be provided as a dictionary, in future releases you’ll be able to pass the same optimizer object as in the traditional VQE."
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:413
msgid "If we are interested in the development of the energy, the ``VQEProgram`` allows access to the history of the optimizer, which contains the loss per iteration (along with the parameters and a timestamp). We can access this data via the ``raw_result`` attribute of the ground state solver."
msgstr "Jika kita tertarik pada perkembangan energinya, ``VQEProgram`` memungkinkan akses ke riwayat pengoptimasi, yang berisi loss setiap iterasi (bersama dengan parameter dan waktunya). Kita dapat mengakses data ini melalui atribut ``raw_result`` dari pemecah keadaan dasar."

