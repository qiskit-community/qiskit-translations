msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 17:40+0000\n"
"PO-Revision-Date: 2021-12-15 18:29\n"
"Last-Translator: \n"
"Language-Team: Tamil\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/08_property_framework.po\n"
"X-Crowdin-File-ID: 9711\n"
"Language: ta_IN\n"

#: ../../tutorials/08_property_framework.ipynb:9
msgid "This page was generated from `docs/tutorials/08_property_framework.ipynb`__."
msgstr "இந்தப் பக்கம் `docs/tutorials/08_property_framework.ipynb`__ இலிருந்து உருவாக்கப்பட்டது."

#: ../../tutorials/08_property_framework.ipynb:9
msgid "The Property Framework"
msgstr "பொருள் கட்டமைப்பு"

#: ../../tutorials/08_property_framework.ipynb:30
msgid "Qiskit Nature 0.2.0 introduces the *Property* framework. This framework replaces the legacy driver return types like ``QMolecule`` and ``WatsonHamiltonian`` with a more modular and extensible approach."
msgstr "Qiskit Nature 0.2.0 *Property* கட்டமைப்பை அறிமுகப்படுத்துகிறது. இந்த கட்டமைப்பானது ``QMolecule`` மற்றும் ``WatsonHamiltonian`` போன்ற பாரம்பரிய டிரைவர் ரிட்டர்ன் வகைகளை அதிக மட்டு மற்றும் விரிவாக்க அணுகுமுறையுடன் மாற்றுகிறது."

#: ../../tutorials/08_property_framework.ipynb:41
msgid "In this tutorial, we will walk through the framework, explain its most important components and show you, how you can extend it with a custom *property* yourself."
msgstr "இந்த பயிற்சியில், நாங்கள் கட்டமைப்பின் வழியாக நடந்து, அதன் மிக முக்கியமான கூறுகளை விளக்கி, தனிப்பயன் *property* நீங்களே எப்படி நீட்டிக்க முடியும் என்பதை உங்களுக்குக் காண்பிப்போம்."

#: ../../tutorials/08_property_framework.ipynb:53
msgid "What is a ``Property``?"
msgstr "``Property`` என்றால் என்ன?"

#: ../../tutorials/08_property_framework.ipynb:64
msgid "At its core, a ``Property`` is an object complementing some raw data with functions that allow you to transform/manipulate/interpret this raw data. This “definition” is kept rather abstract on purpose, but what it means is essentially the following. A ``Property``:"
msgstr "அதன் மையத்தில், ``Property`` என்பது இந்த மூல தரவை மாற்ற/கையாள/விளக்குவதற்கு அனுமதிக்கும் செயல்பாடுகளுடன் சில மூல தரவுகளை பூர்த்தி செய்யும் ஒரு பொருள். இந்த \"வரையறை\" வேண்டுமென்றே சுருக்கமாக வைக்கப்பட்டுள்ளது, ஆனால் இதன் பொருள் அடிப்படையில் பின்வருமாறு. ஒரு ``Property``:"

#: ../../tutorials/08_property_framework.ipynb:66
msgid "represents a physical observable (that’s the raw data)"
msgstr "ஒரு உடல் காணக்கூடியதைக் குறிக்கிறது (அது பதனிடப்படாத தரவு)"

#: ../../tutorials/08_property_framework.ipynb:67
msgid "can be expressed as an operator"
msgstr "ஒரு ஆபரேட்டராக வெளிப்படுத்தலாம்"

#: ../../tutorials/08_property_framework.ipynb:68
msgid "can be evaluated with a wavefunction"
msgstr "ஒரு அலை செயல்பாட்டுடன் மதிப்பீடு செய்யலாம்"

#: ../../tutorials/08_property_framework.ipynb:69
msgid "provides an ``interpret`` method which gives meaning to the eigenvalue of the evaluated qubit operator"
msgstr "மதிப்பீடு செய்யப்பட்ட க்யூபிட் ஆபரேட்டரின் முக்கிய மதிப்பை வழங்கும் ``interpret`` முறையை வழங்குகிறது"

#: ../../tutorials/08_property_framework.ipynb:90
msgid "The ``qiskit_nature.properties`` module provides two classes:"
msgstr "``qiskit_nature.properties`` தொகுதி இரண்டு வகுப்புகளை வழங்குகிறது:"

#: ../../tutorials/08_property_framework.ipynb:92
msgid "``Property``: this is the basic interface. It requires only a ``name`` and an ``interpret`` method to be implemented."
msgstr "``Property``: இது அடிப்படை இடைமுகம். அதை செயல்படுத்த ``name`` மற்றும் ``interpret`` முறை மட்டுமே தேவைப்படுகிறது."

#: ../../tutorials/08_property_framework.ipynb:93
msgid "``GroupedProperty``: this class is an implementation of the `Composite pattern <https://en.wikipedia.org/wiki/Composite_pattern>`__ which allows you to *group* multiple properties into one."
msgstr "``GroupedProperty``: இந்த வகுப்பு `Composite pattern <https://en.wikipedia.org/wiki/Composite_pattern>`__ இன் செயல்பாடாகும், இது உங்களை *பல* பண்புகளை ஒன்றாக இணைக்க அனுமதிக்கிறது."

#: ../../tutorials/08_property_framework.ipynb:95
msgid "**Note:** Grouped properties must have unique ``name`` attributes!"
msgstr "**குறிப்பு:** தொகுக்கப்பட்ட பண்புகள் தனித்துவமான ``name`` பண்புகளைக் கொண்டிருக்க வேண்டும்!"

#: ../../tutorials/08_property_framework.ipynb:107
msgid "Second Quantization Properties"
msgstr "இரண்டாவது அளவீட்டு பண்புகள்"

#: ../../tutorials/08_property_framework.ipynb:118
msgid "At the time of writing, Qiskit Nature ships with a single variant of properties: the ``SecondQuantizedProperty`` objects."
msgstr "எழுதும் நேரத்தில், Qiskit Nature பண்புகளின் ஒற்றை மாறுபாட்டுடன் அனுப்பப்படுகிறது: ``SecondQuantizedProperty`` பொருள்கள்."

#: ../../tutorials/08_property_framework.ipynb:120
msgid "This sub-type adds one additional requirement because any ``SecondQuantizedProperty``"
msgstr "இந்த துணை வகை ஒரு கூடுதல் தேவையை சேர்க்கிறது, ஏனெனில் எந்த ``SecondQuantizedProperty``"

#: ../../tutorials/08_property_framework.ipynb:122
msgid "**must** implement a ``second_q_ops`` method which constructs a (list of) ``SecondQuantizedOp``\\ s."
msgstr "ஒரு ``second_q_ops`` முறையை அமல்படுத்த **வேண்டும்**, இது ஒரு (பட்டியல்) ``SecondQuantizedOp`` ஐ உருவாக்குகிறது."

#: ../../tutorials/08_property_framework.ipynb:133
msgid "The ``qiskit_nature.properties.second_quantization`` module is further divided into ``electronic`` and ``vibrational`` modules (similar to other modules of Qiskit Nature). Let us dive into the ``electronic`` sub-module first."
msgstr "``qiskit_nature.properties.second_quantization`` தொகுதி மேலும் ``electronic`` மற்றும் ``vibrational`` தொகுதிகளாக பிரிக்கப்பட்டுள்ளது (Qiskit Nature மற்ற தொகுதிகள் போன்றது). முதலில் ``electronic`` துணை-தொகுதிக்குள் நுழைவோம்."

#: ../../tutorials/08_property_framework.ipynb:145
msgid "Electronic Second Quantization Properties"
msgstr "மின்னணு இரண்டாம் அளவு பண்புகள்"

#: ../../tutorials/08_property_framework.ipynb:156
msgid "Out-of-the-box Qiskit Nature ships the following electronic properties:"
msgstr "பெட்டிக்கு வெளியே உள்ள Qiskit இயற்கை பின்வரும் மின்னணு பண்புகளை அனுப்புகிறது:"

#: ../../tutorials/08_property_framework.ipynb:205
msgid "``ElectronicEnergy`` is arguably the most important property because it contains the *Hamiltonian* representing the electronic structure problem whose eigenvalues we are interested in when solving an ``ElectronicStructureProblem``. The way in which it stores this Hamiltonian is, just like the rest of the framework, highly modular. The initializer of the ``ElectronicEnergy`` has a single required argument, ``electronic_integrals``, which is a ``List[ElectronicIntegrals]``."
msgstr "``ElectronicEnergy`` என்பது மிக முக்கியமான சொத்து, ஏனெனில் இது மின்னணு கட்டமைப்பு சிக்கலைக் குறிக்கும் *Hamiltonian* ஐக் கொண்டுள்ளது, அதன் ``ElectronicStructureProblem`` ஐ தீர்க்கும்போது நாம் ஆர்வமாக உள்ளோம். இந்த ஹாமில்டோனியனை அது சேமிக்கும் விதம், மீதமுள்ள கட்டமைப்பைப் போலவே, மிகவும் மட்டு. ``ElectronicEnergy`` இன் துவக்கத்தில் ஒரு தேவையான வாதம் உள்ளது, ``electronic_integrals``, இது ஒரு ``List[ElectronicIntegrals]``."

#: ../../tutorials/08_property_framework.ipynb:217
msgid "ElectronicIntegrals"
msgstr "மின்னணு ஒருங்கிணைப்பு"

#: ../../tutorials/08_property_framework.ipynb:243
msgid "The ``ElectronicIntegrals`` are a container class for *n-body* interactions in a given basis, which can be any of the following:"
msgstr "``ElectronicIntegrals`` என்பது கொடுக்கப்பட்ட அடிப்படையில் *n-body* தொடர்புகளுக்கான ஒரு கொள்கலன் வகுப்பாகும், இது பின்வருவனவற்றில் ஏதேனும் இருக்கலாம்:"

#: ../../tutorials/08_property_framework.ipynb:298
msgid "Let us take the ``OneBodyElectronicIntegrals`` as an example. As the name suggests, this container is for 1-body interaction integrals. You can construct an instance of it like so:"
msgstr "உதாரணமாக ``OneBodyElectronicIntegrals`` ஐ எடுத்துக் கொள்வோம். பெயர் குறிப்பிடுவது போல, இந்த கொள்கலன் 1-body தொடர்பு ஒருங்கிணைப்புகளுக்கானது. இது போன்ற ஒரு உதாரணத்தை நீங்கள் உருவாக்கலாம்:"

#: ../../tutorials/08_property_framework.ipynb:361
msgid "As you can see, the first argument simply specifies the basis of the integrals. The second argument requires a little further explanation:"
msgstr "நீங்கள் பார்க்க முடியும் என, முதல் வாதம் வெறுமனே ஒருங்கிணைப்புகளின் அடிப்படையைக் குறிப்பிடுகிறது. இரண்டாவது வாதத்திற்கு இன்னும் கொஞ்சம் விளக்கம் தேவை:"

#: ../../tutorials/08_property_framework.ipynb:363
msgid "In the case of the ``AO`` or ``MO`` basis, this argument **must** be a pair of numpy arrays, where the first and second one are the alpha- and beta-spin integrals, respectively."
msgstr "``AO`` அல்லது ``MO`` அடிப்படையில், இந்த வாதம் ஒரு ஜோடி எண் வரிசைகளாக இருக்க **வேண்டும்**, அங்கு முதல் மற்றும் இரண்டாவது முறையே ஆல்பா மற்றும் பீட்டா-ஸ்பின் ஒருங்கிணைப்புகள்."

#: ../../tutorials/08_property_framework.ipynb:365
msgid "**Note:** The second argument may be ``None``, for the case where the beta-spin integrals are the same as the alpha-spin integrals (so there is no need to provide the same values twice)."
msgstr "**குறிப்பு:** இரண்டாவது வாதம் ``None`` என்று இருக்கலாம், பீட்டா-ஸ்பின் ஒருங்கிணைந்தவை ஆல்ஃபா-ஸ்பின் ஒருங்கிணைந்தவை (எனவே ஒரே மதிப்புகளை இரண்டு முறை வழங்க வேண்டிய அவசியம் இல்லை)."

#: ../../tutorials/08_property_framework.ipynb:367
msgid "In the case of the ``SO`` basis, this argument **must** be a single numpy array, storing the alpha- and beta-spin integrals in blocked order, i.e. like so:"
msgstr "``SO`` அடிப்படையைப் பொறுத்தவரை, இந்த வாதம் ஒற்றை எண் வரிசையாக இருக்க **வேண்டும்**, ஆல்பா மற்றும் பீட்டா-ஸ்பின் ஒருங்கிணைப்புகளை தடுக்கப்பட்ட வரிசையில் சேமிக்கிறது, அதாவது. அப்படி:"

#: ../../tutorials/08_property_framework.ipynb:382
msgid "The ``TwoBodyElectronicIntegrals`` work pretty much the same except that they contain all possible spin-combinations in the tuple of numpy arrays. For example:"
msgstr "``TwoBodyElectronicIntegrals`` என்பது ஒரே மாதிரியாக வேலை செய்கிறது, தவிர அவை நம்பி வரிசைகளின் டப்பிளில் சாத்தியமான அனைத்து ஸ்பின்-இணைப்புகளையும் கொண்டிருக்கின்றன. உதாரணத்திற்கு:"

#: ../../tutorials/08_property_framework.ipynb:495
msgid "We should take note of a few observations:"
msgstr "ஒரு சில அவதானிப்புகளை நாம் கவனத்தில் கொள்ள வேண்டும்:"

#: ../../tutorials/08_property_framework.ipynb:497
msgid "the numpy arrays shall be ordered as ``(\"alpha-alpha\", \"beta-alpha\", \"beta-beta\", \"alpha-beta\")``"
msgstr "எண் வரிசைகள் ``(\"alpha-alpha\", \"beta-alpha\", \"beta-beta\", \"alpha-beta\")`` என வரிசைப்படுத்தப்பட வேண்டும்"

#: ../../tutorials/08_property_framework.ipynb:498
msgid "the ``alpha-alpha`` matrix may **not** be ``None``"
msgstr "``alpha-alpha`` அணி **not** ``None``"

#: ../../tutorials/08_property_framework.ipynb:499
msgid "if the ``alpha-beta`` matrix is ``None``, but ``beta-alpha`` is not, its transpose will be used (like above)"
msgstr "``alpha-beta`` மேட்ரிக்ஸ் ``None``, ஆனால் ``beta-alpha`` இல்லையென்றால், அதன் இடமாற்றம் பயன்படுத்தப்படும் (மேலே உள்ளதைப் போல)"

#: ../../tutorials/08_property_framework.ipynb:500
msgid "in any other case, matrices which are ``None`` will be filled with the ``alpha-alpha`` matrix"
msgstr "வேறு எந்த விஷயத்திலும், ``None`` என்ற அணி ``alpha-alpha`` அணிகளால் நிரப்பப்படும்"

#: ../../tutorials/08_property_framework.ipynb:502
msgid "in the ``SO`` basis case, a single numpy array must be specified. Refer to ``TwoBodyElectronicIntegrals.to_spin()`` for its exact formatting."
msgstr "``SO`` அடிப்படை வழக்கில், ஒற்றை எண் வரிசை குறிப்பிடப்பட வேண்டும். அதன் சரியான வடிவமைப்பிற்காக ``TwoBodyElectronicIntegrals.to_spin ()`` ஐப் பார்க்கவும்."

#: ../../tutorials/08_property_framework.ipynb:514
msgid "ElectronicEnergy"
msgstr "மின்னணு ஆற்றல்"

#: ../../tutorials/08_property_framework.ipynb:525
msgid "Now we are ready to construct an ``ElectronicEnergy`` instance:"
msgstr "இப்போது நாம் ``ElectronicEnergy`` உதாரணத்தை உருவாக்கத் தயாராக உள்ளோம்:"

#: ../../tutorials/08_property_framework.ipynb:652
msgid "This property can now be used to construct a ``SecondQuantizedOp`` (which can then be mapped to a ``QubitOperator``):"
msgstr "இந்த சொத்தை இப்போது ``SecondQuantizedOp`` ஐ உருவாக்க பயன்படுத்தலாம் (பின்னர் அதை ``QubitOperator`` க்கு வரைபடமாக்கலாம்):"

#: ../../tutorials/08_property_framework.ipynb:710
msgid "Result interpretation"
msgstr "முடிவு விளக்கம்"

#: ../../tutorials/08_property_framework.ipynb:721
msgid "An additional benefit which we gain from the ``Property`` framework, is that the result interpretation of a computed eigenvalue can be handled by each property itself. This results in nice and logically consistent classes because the result gets interpreted in the same context where the raw data is available."
msgstr "``Property`` கட்டமைப்பிலிருந்து நாம் பெறும் கூடுதல் நன்மை என்னவென்றால், கணக்கிடப்பட்ட ஈஜென்வெல்யூவின் முடிவு விளக்கத்தை ஒவ்வொரு சொத்தாலும் கையாள முடியும். இது நல்ல மற்றும் தர்க்கரீதியாக சீரான வகுப்புகளில் விளைகிறது, ஏனெனில் பதனிடப்படாதத் தரவு கிடைக்கும் அதே சூழலில் இதன் விளைவாக விளக்கப்படுகிறது."

#: ../../tutorials/08_property_framework.ipynb:777
msgid "While this particular example is not yet very impressive, wait until we use more properties at once."
msgstr "இந்த குறிப்பிட்ட உதாரணம் இன்னும் மிகவும் ஈர்க்கக்கூடியதாக இல்லை என்றாலும், ஒரே நேரத்தில் அதிக பண்புகளைப் பயன்படுத்தும் வரை காத்திருக்கவும்."

#: ../../tutorials/08_property_framework.ipynb:789
msgid "ParticleNumber"
msgstr "பகுதி எண்"

#: ../../tutorials/08_property_framework.ipynb:800
msgid "The ``ParticleNumber`` property also takes a special place among the builtin properties because it serves a dual purpose of:"
msgstr "``ParticleNumber`` சொத்து கட்டப்பட்ட பண்புகளில் ஒரு சிறப்பு இடத்தைப் பெறுகிறது, ஏனெனில் இது இரட்டை நோக்கத்திற்காக செயல்படுகிறது:"

#: ../../tutorials/08_property_framework.ipynb:802
msgid "storing the number of particles in the electronic system"
msgstr "மின்னணு அமைப்பில் உள்ள துகள்களின் எண்ணிக்கையை சேமித்தல்"

#: ../../tutorials/08_property_framework.ipynb:803
msgid "providing the operators to evaluate the number of particles for a given eigensolution of the problem"
msgstr "கொடுக்கப்பட்ட பிரச்சனைக்குத் தேவையான துகள்களின் எண்ணிக்கையை மதிப்பீடு செய்ய ஆபரேட்டர்களை வழங்குதல்"

#: ../../tutorials/08_property_framework.ipynb:805
msgid "Therefore, this property is required if you want to use additional functionality like the ``ActiveSpaceTransformer`` or the ``ElectronicStructureProblem.default_filter_criterion()``."
msgstr "எனவே, ``ActiveSpaceTransformer`` அல்லது ``ElectronicStructureProblem.default_filter_criterion()`` போன்ற கூடுதல் செயல்பாடுகளை நீங்கள் பயன்படுத்த விரும்பினால் இந்த சொத்து தேவைப்படுகிறது."

#: ../../tutorials/08_property_framework.ipynb:860
msgid "GroupedProperty"
msgstr "குழுவாக்கப்பட்ட சொத்து"

#: ../../tutorials/08_property_framework.ipynb:871
msgid "Rather than iterating all of the other properties one by one, let us simply consider a group of properties as provided by any ``ElectronicStructureDriver`` from the ``qiskit_nature.drivers.second_quantization`` module."
msgstr "மற்ற அனைத்து பண்புகளையும் ஒவ்வொன்றாக மீண்டும் செய்வதற்குப் பதிலாக, ``qiskit_nature.drivers.second_quantization`` தொகுதியிலிருந்து எந்தவொரு ``ElectronicStructureDriver`` வழங்கிய பண்புகளின் குழுவைக் கருத்தில் கொள்வோம்."

#: ../../tutorials/08_property_framework.ipynb:1300
msgid "There is a lot going on but with the explanations above you should not have any problems with understanding this output."
msgstr "நிறைய நடக்கிறது ஆனால் மேலே உள்ள விளக்கங்களுடன் இந்த வெளியீட்டைப் புரிந்துகொள்வதில் உங்களுக்கு எந்தப் பிரச்சினையும் இருக்கக் கூடாது."

#: ../../tutorials/08_property_framework.ipynb:1312
msgid "Constructing a Hamiltonian from raw integrals"
msgstr "மூல ஒருங்கிணைப்புகளிலிருந்து ஒரு ஹாமில்டோனியனை உருவாக்குதல்"

#: ../../tutorials/08_property_framework.ipynb:1323
msgid "If you have obtained some raw one- and two-body integrals by means other than through a driver provided by Qiskit Nature, you can still easily construct an ``ElectronicEnergy`` property to serve as your access point into the stack:"
msgstr "Qiskit நேச்சரால் வழங்கப்பட்ட ஒரு டிரைவர் மூலமாக அல்லாமல் சில மூல மற்றும் இரண்டு-உடல் ஒருங்கிணைப்புகளை நீங்கள் பெற்றிருந்தால், உங்கள் அணுகல் புள்ளியாக ஸ்டேக்கிற்கு சேவை செய்ய ``ElectronicEnergy`` சொத்தை எளிதாக உருவாக்கலாம்:"

#: ../../tutorials/08_property_framework.ipynb:1461
msgid "Vibrational Second Quantization Properties"
msgstr "அதிர்வு இரண்டாவது அளவுப்படுத்தல் பண்புகள்"

#: ../../tutorials/08_property_framework.ipynb:1472
msgid "The ``vibrational`` stack for vibrational structure calculations also integrates with the Property framework. After the above introduction you should be able to understand the following directly:"
msgstr "அதிர்வு கட்டமைப்பு கணக்கீடுகளுக்கான ``vibrational`` ஸ்டேக் சொத்து கட்டமைப்போடு ஒருங்கிணைக்கிறது. மேலே உள்ள அறிமுகத்திற்குப் பிறகு நீங்கள் பின்வருவனவற்றை நேரடியாகப் புரிந்துகொள்ள முடியும்:"

#: ../../tutorials/08_property_framework.ipynb:1505
msgid "For vibrational structure calculations we always need to define the basis which we want to work in, separately:"
msgstr "அதிர்வு கட்டமைப்புக் கணக்கீடுகளுக்கு நாம் எப்போதும் வேலை செய்ய விரும்பும் அடிப்படையை தனித்தனியாக வரையறுக்க வேண்டும்:"

#: ../../tutorials/08_property_framework.ipynb:1631
msgid "Writing custom Properties"
msgstr "தனிப்பயன் பண்புகளை எழுதுதல்"

#: ../../tutorials/08_property_framework.ipynb:1642
msgid "You can extend the Property framework with your own implementations. Here, we will walk through the simple example of constructing a Property for the *electronic density*. Since this observable is essentially based on matrices, we will be leveraging the ``OneBodyElectronicIntegrals`` container to store the actual density matrix."
msgstr "உங்கள் சொந்த செயலாக்கங்களுடன் சொத்து கட்டமைப்பை நீட்டிக்க முடியும். *electronic density* ஒரு சொத்தை உருவாக்குவதற்கான எளிய எடுத்துக்காட்டு வழியாக இங்கே நடப்போம். இந்த கவனிக்கத்தக்கது அடிப்படையில் மெட்ரிக்குகளை அடிப்படையாகக் கொண்டிருப்பதால், உண்மையான அடர்த்தி மேட்ரிக்ஸை சேமிக்க ``OneBodyElectronicIntegrals`` கொள்கலனை நாங்கள் மேம்படுத்துவோம்."

#: ../../tutorials/08_property_framework.ipynb:1828
msgid "Of course, the above example is very minimal and can be extended at will."
msgstr "நிச்சயமாக, மேலே உள்ள எடுத்துக்காட்டு மிகக் குறைவு மற்றும் விருப்பப்படி நீட்டிக்கப்படலாம்."

#: ../../tutorials/08_property_framework.ipynb:1839
msgid "**Note:** as of Qiskit Nature version 0.2.0, the direct integration of custom Property objects into the stack is not implemented yet, due to limitations of the auxiliary operator parsing. See https://github.com/Qiskit/qiskit-nature/issues/312 for more details."
msgstr "**Note:** Qiskit நேச்சர் பதிப்பு 0.2.0 படி, துணை ஆபரேட்டர் பாகுபடுத்தலின் வரம்புகள் காரணமாக, தனிப்பயன் சொத்து பொருள்களை ஸ்டாக்கில் நேரடியாக ஒருங்கிணைப்பது இன்னும் செயல்படுத்தப்படவில்லை. மேலும் விவரங்களுக்கு https://github.com/Qiskit/qiskit-nature/issue/312 ஐப் பார்க்கவும்."

#: ../../tutorials/08_property_framework.ipynb:1841
msgid "For the time being, you can still evaluate a custom Property, by passing it’s generated operators directly to the ``Eigensolver.solve`` method by means of constructing the ``aux_operators``. Note, however, that you will have to deal with transformations applied to your properties manually, until the above issue is resolved."
msgstr "இப்போதைக்கு, நீங்கள் ஒரு தனிப்பயன் சொத்தை மதிப்பீடு செய்யலாம், அது உருவாக்கப்பட்ட ஆப்பரேட்டர்களை நேரடியாக ``Eigensolver.solve`` முறைக்கு ``aux_operators`` ஐ உருவாக்குவதன் மூலம் மதிப்பீடு செய்யலாம். எவ்வாறாயினும், மேலே உள்ள சிக்கல் தீர்க்கப்படும் வரை, உங்கள் சொத்துக்களுக்குப் பயன்படுத்தப்படும் மாற்றங்களை நீங்கள் கைமுறையாக கையாள வேண்டும் என்பதை நினைவில் கொள்க."

