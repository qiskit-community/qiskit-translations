msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-18 17:16+0000\n"
"PO-Revision-Date: 2021-08-18 18:06\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/07_leveraging_qiskit_runtime.po\n"
"X-Crowdin-File-ID: 9678\n"
"Language: ko_KR\n"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:9
msgid "This page was generated from `docs/tutorials/07_leveraging_qiskit_runtime.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/07_leveraging_qiskit_runtime.ipynb`__ 에서 생성되었다."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:9
msgid "Leveraging Qiskit Runtime"
msgstr "Qiskit 런타임 활용"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:20
msgid "Iterative algorithms, such as the Variational Quantum Eigensolver (VQE), traditionally send one batch of circuits (one “job”) to be executed on the quantum device in each iteration. Sending a job involves certain overhead, mainly"
msgstr "Variative Quantum Eigensolver (VQE) 와 같은 반복 알고리즘은 전통적으로 각 반복에서 양자 장치에서 실행할 한개의 회로 배치(\"작업\" 하나) 를 전송한다. 작업 전송에는 특정 overhead가 수반된다. 주로 이것은"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:22
msgid "the time to process the requests and send the data (API overhead, usually about 10s)"
msgstr "요청을 처리하고 데이터를 전송하는 시간 (API overhead, 일반적으로 약 10초)"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:23
msgid "the job queue time, that is how long you have to wait before it’s your turn to run on the device (usually about 2min)"
msgstr "장치에서 실행할 차례가 되기 전에 기다려야 하는 작업 대기열 시간 (일반적으로 약 2분) 이다."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:25
msgid "If we send hundreds of jobs iteratively, this overhead quickly dominates the execution time of our algorithm. Qiskit Runtime allows us to tackle these issues and significantly speed up (especially) iterative algorithms. With Qiskit Runtime, one job does not contain only a batch of circuits but the *entire* algorithm. That means we only experience the API overhead and queue wait *once* instead of in every iteration! You’ll be able to either upload algorithm parameters and delegate all the complexity to the cloud, where your program is executed, or upload your personal algorithm directly."
msgstr "수백 개의 작업을 반복적으로 전송하면 이러한 overhead가 알고리즘의 실행 시간을 빠르게 좌우한다. Qiskit Runtime을 사용하면 이러한 문제를 해결하고 반복적 알고리즘의 속도를 크게 높일 수 있다. 즉, API overhead와 대기열 대기는 매번 발생하는 것이 아니라 *한 번* 만 발생한다! 알고리즘 매개 변수를 업로드하고 프로그램이 실행되는 클라우드에 모든 복잡성을 위임하거나 개인 알고리즘을 직접 업로드할 수 있다."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:28
msgid "For the VQE, the integration of Qiskit Runtime in your existing code is a piece of cake. There is a (almost) drop-in replacement, called ``VQEProgram`` for the ``VQE`` class."
msgstr "VQE에서 기존 코드에 Qiskit Runtime을 통합하는 것은 손쉬운 일이다. ``VQE`` 클래스에는 ``VQEProgram`` 라고 하는 (거의) 예약이 필요 없는 대체품가 있다."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:30
msgid "Let’s see how you can leverage the runtime on a simple chemistry example: Finding the ground state energy of the lithium hydrate (LiH) molecule at a given bond distance."
msgstr "이제 간단한 화학 예에서 런타임을 활용하는 방법을 살펴보겠다. 주어진 결합 길이에서 리튬 하이드레이트(LiH) 분자의 기저 상태 에너지 찾기"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:42
msgid "Problem specification: LiH molecule"
msgstr "문제 사양: LiH 분자"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:44
msgid "First, we specify the molecule whose ground state energy we seek. Here, we look at LiH with a bond distance of 2.5 Å."
msgstr "우선, 우리가 찾는 기저 상태 에너지를 가진 분자를 명시한다. 여기서는 2.5 Å 의 결합 거리를 갖는 LiH를 살펴본다."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:102
msgid "Classical reference solution"
msgstr "고전적 참조 솔루션"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:113
msgid "As a reference solution we can solve this system classically with the ``NumPyEigensolver``."
msgstr "참조 솔루션으로서 우리는 ``NumPyEigensolver`` 를 통해 이 시스템을 고전적으로 해결할 수 있다."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:172
msgid "VQE"
msgstr "VQE"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:174
msgid "To run the VQE we need to select a parameterized quantum circuit acting as ansatz and a classical optimizer. Here we’ll choose a heuristic, hardware efficient ansatz and the SPSA optimizer."
msgstr "VQE를 실행하려면 ansatz 역할을 하는 매개 변수화된 양자 회로와 고전적 최적화 프로그램을 선택해야 한다. 여기서는 체험적이고 하드웨어 효율적인 ansatz와 SPSA 최적화 프로그램을 선택한다."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:222
msgid "Before executing the VQE in the cloud using Qiskit Runtime, let’s execute a local VQE first."
msgstr "Qiskit 런타임을 사용하여 클라우드에서 VQE를 실행하기 전에 먼저 로컬 VQE를 실행하겠다."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:303
msgid "Runtime VQE"
msgstr "런타임 VQE"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:305
msgid "Let’s exchange the eigensolver from a local VQE algorithm to a VQE executed using Qiskit Runtime – simply by exchanging the ``VQE`` class by the ``VQEProgram``."
msgstr "간단히 ``VQEProgram`` 으로 ``VQE`` 클래스를 교환을 하여 로컬 VQE 알고리즘에서 Qiskit 런타임을 사용하여 실행되는 VQE로 eigensolver을 교환을 한다."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:307
msgid "First, we’ll have to load a provider to access Qiskit Runtime. **Note:** You have to replace the next cell with your provider."
msgstr "먼저 Qiskit 런타임에 접근할 공급자를 로드해야 한다. **참고:** 다음 셀을 공급자로 교체해야 한다."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:333
msgid "Now we can set up the ``VQEProgram``. In this first release, the optimizer must be provided as a dictionary, in future releases you’ll be able to pass the same optimizer object as in the traditional VQE."
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:410
msgid "If we are interested in the development of the energy, the ``VQEProgram`` allows access to the history of the optimizer, which contains the loss per iteration (along with the parameters and a timestamp). We can access this data via the ``raw_result`` attribute of the ground state solver."
msgstr "에너지 개발에 관심이 있는 경우, ``VQEProgram`` 는 (매개 변수 및 타임스탬프와 함께) 반복당 손실을 포함하는 optimizer의 이력에 대한 접근을 허용한다. 기저 상태 해석기의 ``raw_result`` 속성을 통해 이 데이터에 접근할 수 있다."

