msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-15 17:08+0000\n"
"PO-Revision-Date: 2022-07-15 17:59\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/09_Protein_Folding.po\n"
"X-Crowdin-File-ID: 9713\n"
"Language: ko_KR\n"

#: ../../tutorials/09_Protein_Folding.ipynb:9
msgid "This page was generated from `docs/tutorials/09_Protein_Folding.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/04_grover_optimizer.ipynb`__ 에서 생성되었다."

#: ../../tutorials/09_Protein_Folding.ipynb:9
msgid "Protein Folding"
msgstr "단백질 접힘"

#: ../../tutorials/09_Protein_Folding.ipynb:21
msgid "Introduction"
msgstr "소개"

#: ../../tutorials/09_Protein_Folding.ipynb:32
msgid "The structure and function of many natural and human-engineered proteins is still only poorly understood. As a result, our understanding of processes connected with protein folding, such as those encountered in Alzheimer’s disease, vaccine development, and crop improvement research, has remained limited."
msgstr "천연 단백질이든 개량된 단백질이든, 단백질의 구조와 기능은 아직 이해되지 못한 부분이 많이 있다. 그 결과, 알츠하이머, 백신 개발 및 작물 개량 연구등에서 직면하는 단백질 접힘과 관련된 프로세스에 대한 이해가 아직 완전하지 않다."

#: ../../tutorials/09_Protein_Folding.ipynb:34
msgid "Unfolded polypeptides have a very large number of degrees of freedom and thus an enormous number of potential conformations. For example, a chain with :math:`100` aminoacids has on the order of :math:`10^{47}` conformations. In reality, however, many proteins fold to their native structure within seconds. This is known as Levinthal’s paradox [1]."
msgstr "접히지 않은 폴리펩타이드는 매우 많은 수의 자유도를 갖고, 따라서 엄청난 수의 잠재적인 형태를 갖는다. 예를 들어,  :math:`100` 개의 아미노산을 갖는 사슬은 :math:`10^{47}` 개의 형태의 순서로 되어 있다. 그러나, 실제로, 많은 단백질이 수 초 내에 그들의 천연 구조로 접는다. 이것은 Levinthal의 패러독스 [1]로 알려져 있다."

#: ../../tutorials/09_Protein_Folding.ipynb:36
msgid "The exponential growth of potential conformations with chain length makes the problem intractable for classical computers. In the quantum framework, our resource-efficient algorithm scales linearly with the number of aminoacids N."
msgstr "사슬 길이를 갖는 잠재적인 형태의 지수적인 성장은 고전 컴퓨터에 대해 문제를 해결한다. 양자 프레임워크에서, 우리의 자원 효율적인 알고리즘은 아미노산 N의 수에 따라 선형으로 확장한다."

#: ../../tutorials/09_Protein_Folding.ipynb:47
msgid "The goal of this work is to determine the minimum energy conformation of a protein. Starting from a random configuration, the protein’s structure is optimized to lower the energy. This can be achieved by encoding the protein folding problem into a qubit operator and ensuring that all physical constraints are satisfied."
msgstr "이 작업의 목적은 단백질의 최소 에너지 형태를 결정하는 것이다. 무작위 배열로부터 시작하여, 단백질의 구조는 에너지를 낮추도록 최적화된다. 이는 단백질 접힘 문제를 큐비트 연산자로 인코딩하고 모든 물리적 제약이 충족되는 것을 보장함으로써 달성될 수 있다."

#: ../../tutorials/09_Protein_Folding.ipynb:58
msgid "For the problem encoding we use:"
msgstr "문제 인코딩의 경우 다음을 사용한다:"

#: ../../tutorials/09_Protein_Folding.ipynb:60
msgid "Configuration qubits: qubits that are used to describe the configurations and the relative position of the different beads"
msgstr "Configuration 큐비트: 설정 및 다른 구슬의 상대적 위치를 설명하는 데 사용되는 큐비트"

#: ../../tutorials/09_Protein_Folding.ipynb:62
msgid "Interaction qubits: qubits that encode interactions between the different aminoacids"
msgstr "상호작용 큐비트: 상이한 아미노산들 사이의 상호작용을 인코딩하는 큐비트"

#: ../../tutorials/09_Protein_Folding.ipynb:64
msgid "For our case we use a tetrahedral lattice (diamond shape lattice) where we encode the movement through the configuration qubits (see image below)."
msgstr "우리의 경우에는 configuration 큐비트를 통해 움직임을 인코딩하는 사면체 격자 (다이아몬드 모양 격자) 를 사용한다 (아래 이미지 참조)."

#: ../../tutorials/09_Protein_Folding.ipynb:66
msgid "|6eefcda1ef514d809f83ca588eef39a7|"
msgstr ""

#: ../../tutorials/09_Protein_Folding.ipynb:68
msgid "6eefcda1ef514d809f83ca588eef39a7"
msgstr ""

#: ../../tutorials/09_Protein_Folding.ipynb:79
msgid "The Hamiltonian of the system for a set of qubits :math:`\\mathbf{q}=\\{\\mathbf{q}_{cf}, \\mathbf{q}_{in}\\}` is"
msgstr "큐비트의 모임의 시스템의 해밀톤 :math:`\\mathbf{q}=\\{\\mathbf{q}_{cf}, \\mathbf{q}_{in}\\}` 은"

#: ../../tutorials/09_Protein_Folding.ipynb:81
msgid "H(\\mathbf{q}) = H_{gc}(\\mathbf{q}_{cf}) + H_{ch}(\\mathbf{q}_{cf}) + H_{in}(\\mathbf{q}_{cf}, \\mathbf{q}_{in})\n\n"
msgstr ":math:`H(\\mathbf{q}) = H_{gc}(\\mathbf{q}_{cf}) + H_{ch}(\\mathbf{q}_{cf}) + H_{in}(\\mathbf{q}_{cf}, \\mathbf{q}_{in})`\n\n"

#: ../../tutorials/09_Protein_Folding.ipynb:83
msgid "where"
msgstr "어디에"

#: ../../tutorials/09_Protein_Folding.ipynb:85
msgid ":math:`H_{gc}` is the geometrical constraint term (governing the growth of the primary sequence of aminoacids without bifurcations)"
msgstr ":math:`H_{gc}` 는 기하학적인 제약 조건이다 (두 갈래로 분리되지 않은 아미노산의 1차 서열의 성장을 통제하는 것)"

#: ../../tutorials/09_Protein_Folding.ipynb:87
msgid ":math:`H_{ch}` is the chirality constraint (enforcing the right stereochemistry for the system)"
msgstr ":math:`H_{ch}` 는 카이랄성 제한조건 (시스템에 대한 올바른 입체화학을 적용) 이다."

#: ../../tutorials/09_Protein_Folding.ipynb:89
msgid ":math:`H_{in}` is the interaction energy terms of the system. In our case we consider only nearest neighbor interactions."
msgstr ":math:`H_{in}` 은 시스템의 상호 작용 에너지 조건이다. 우리의 경우에는 가장 가까운 이웃 상호 작용만을 고려한다."

#: ../../tutorials/09_Protein_Folding.ipynb:100
msgid "Further details about the used model and the encoding of the problem can be found in [2]."
msgstr "사용된 모델 및 문제점의 인코딩에 대한 자세한 내용은 [2]에서 찾을 수 있다."

#: ../../tutorials/09_Protein_Folding.ipynb:137
msgid "Protein Main Chain"
msgstr "Protein Main Chain"

#: ../../tutorials/09_Protein_Folding.ipynb:148
msgid "The Protein consists of a main chain that is a linear chain of aminoacids. For the naming of different residues we use the one-letter code as defined in Ref. [3]. Further details about the naming and the type of aminoacids can also be found in [4]."
msgstr "단백질은 아미노산의 선형 사슬인 주 사슬로 구성된다. 다른 잔류물의 이름을 지정하기 위해 한 글자의 코드 (Ref. [3]) 를 정의했다. 아미노산의 이름과 유형에 대한 자세한 내용은 [4]에서도 찾을 수 있다."

#: ../../tutorials/09_Protein_Folding.ipynb:150
msgid "For this particular case we demonstrate the generation of the qubit operator in a neuropeptide with the main chain consisting of 7 aminoacids with letter codes APRLRFY (see also [2])."
msgstr "이런 특정한 경우에, APRLRFY (또한 [2]참조) 와 함께 7개의 아미노산으로 구성된 주 사슬을 갖는 신경 펩티드에 큐비트 연산자의 생성을 입증한다."

#: ../../tutorials/09_Protein_Folding.ipynb:172
msgid "Side Chains"
msgstr "사이드 사슬"

#: ../../tutorials/09_Protein_Folding.ipynb:183
msgid "Beyond the main chain of the protein there may be aminoacids attached to the residues of the main chain. Our model allows for side chains of the maximum length of one. Elongated side chains would require the introduction of additional penalty terms which are still under development. In this example we do not consider any side chains to keep the real structure of the neuropeptide."
msgstr "단백질의 주 사슬을 넘어서, 주 사슬의 잔여물에 부착된 아미노산이 존재할 수 있다. 모델은 최대 길이의 사이드 체인을 허용한다. 길쭉해진 사이드 사슬은 여전히 개발 중인 추가적인 페널티 용어들의 도입을 필요로 할 것이다. 이 예에서, 신경 펩티드의 실제 구조를 유지하기 위한 어떠한 사이드 사슬도 고려하지 않는다."

#: ../../tutorials/09_Protein_Folding.ipynb:205
msgid "Interaction between Aminoacids"
msgstr "아미노산 사이의 상호작용"

#: ../../tutorials/09_Protein_Folding.ipynb:216
msgid "For the description of inter-residue contacts for proteins we use knowledge-based (statistical) potentials derived using quasi-chemical approximation. The potentials used here are introduced by Miyazawa, S. and Jernigan, R. L. in [5]."
msgstr "단백질에 대한 잔유물 사이 접촉을 설명하기 위해, 준-화학적 근사화 (quasi-chemical approximation) 를 이용하여 유도된 지식 기반 (통계적) 잠재력을 사용한다. 여기에서 사용되는 잠재력은 문헌 [Miyazawa, S. and Jernigan, R. L. in [5]] 에 도입되어 있다."

#: ../../tutorials/09_Protein_Folding.ipynb:218
msgid "Beyond this model we also allow for random contact maps (interactions) that provide a random interaction map. One can also introduce a custom interaction map that enhances certain configurations of the protein (e.g. alpha helix, beta sheet etc)."
msgstr "이 모델 이외에 무작위 상호작용 맵을 제공하는 무작위 컨택 맵 (상호작용) 도 허용한다. 또한, 단백질의 특정 구성 (예를 들어, 알파 나선, 베타 시트 등) 을 향상시키는 맞춤형 상호작용 맵을 도입할 수 있다."

#: ../../tutorials/09_Protein_Folding.ipynb:241
msgid "Physical Constraints"
msgstr "물리적 제한조건"

#: ../../tutorials/09_Protein_Folding.ipynb:252
msgid "To ensure that all physical constraints are respected we introduce penalty functions. The different penalty terms used are:"
msgstr "모든 물리적 구속조건을 만족하기 위해 페널티 함수를 도입한다. 사용되는 서로 다른 페널티 조건은 다음과 같다."

#: ../../tutorials/09_Protein_Folding.ipynb:254
msgid "penalty_chiral: A penalty parameter used to impose the right chirality."
msgstr "penalty_chiral: 올바른 카이랄성을 부과하기 위해 사용되는 페널티 매개변수."

#: ../../tutorials/09_Protein_Folding.ipynb:256
msgid "penalty_back: A penalty parameter used to penalize turns along the same axis. This term is used to eliminate sequences where the same axis is chosen twice in a row. In this way we do not allow for a chain to fold back into itself."
msgstr "penalty_back: 같은 축을 따라 회전하기 위해 사용되는 페널티 매개변수. 이 용어는 동일한 축이 행에서 두 번 선택되는 연속을 제거하는 데 사용된다. 이런 식으로 사슬이 그 자체로 되돌아 가는 것을 허용하지 않는다."

#: ../../tutorials/09_Protein_Folding.ipynb:258
msgid "penalty_1: A penalty parameter used to penalize local overlap between beads within a nearest neighbor contact."
msgstr "penalty_1: 가장 가까운 접촉 내에서 구슬들 사이의 국부적 겹침을 선고하는데 사용되는 페널티 매개변수."

#: ../../tutorials/09_Protein_Folding.ipynb:284
msgid "Peptide Definition"
msgstr "펩타이드 정의"

#: ../../tutorials/09_Protein_Folding.ipynb:295
msgid "Based on the main chain and possible side chains we define the peptide object that includes all the structural information of the modeled system."
msgstr "주 사슬 및 가능한 사이드 사슬에 기초하여, 모델링된 시스템의 모든 구조적 정보를 포함하는 펩타이드 객체를 정의한다."

#: ../../tutorials/09_Protein_Folding.ipynb:317
msgid "Protein Folding Problem"
msgstr "단백질 접힘 문제"

#: ../../tutorials/09_Protein_Folding.ipynb:328
msgid "Based on the defined peptide, the interaction (contact map) and the penalty terms we defined for our model we define the protein folding problem that returns qubit operators."
msgstr "정의된 펩타이드에 기초하여, 상호작용 (접촉 맵) 및 모델에 대해 정의된 페널티 용어를 기반으로, 큐비트 연산자를 반환하는 단백질 접힘 문제를 정의한다."

#: ../../tutorials/09_Protein_Folding.ipynb:613
msgid "Using VQE with CVaR expectation value for the solution of the problem"
msgstr "문제의 해결책에 대한 CVαR 기대값과 함께 VQE 사용하기"

#: ../../tutorials/09_Protein_Folding.ipynb:624
msgid "The problem that we are tackling has now implemented all the physical constraints and has a diagonal Hamiltonian. For the particular case we are targeting the single bitstring that gives us the minimum energy (corresponding to the folded structure of the protein). Thus, we can use the Variational Quantum Eigensolver with Conditional Value at Risk (CVaR) expectation values for the solution of the problem and for finding the minimum configuration energy [6] . We follow the same approach as in Ref. [2] but here we use COBYLA for the classical optimization part. One can also use the standard VQE or QAOA algorithm for the solution of the problem, though as discussed in Ref. [2] CVaR is more suitable."
msgstr "우리가 해결하고 있는 문제는 이제 모든 물리적 제약을 구현하고, 대각선 해밀턴을 가지고 있다. 특정 경우에 있어서, 우리는 (단백질의 접힘 구조에 상응하는) 최소 에너지를 제공하는 단일 비트 문자열을 목표로 하고 있다. 따라서, 문제의 해결을 위한, 그리고 최소 구성 에너지 [6] 를 찾기 위한, Conditional Value at Risk (CVaR) 의 기대값을 갖는 VQE (Variational Quantum Eigensolver) 를 사용할 수 있다. Ref. [2] 와 동일한 접근 방식을 따르지만, 여기에서는 고전적인 최적화 부분에 대해서는 COBYLA를 사용한다. 또한, Ref. [2] CVαR 에 논의된 바와 같이, 문제점의 해결을 위해 표준 VQE 또는 QAOA 알고리즘을 사용할 수 있다."

#: ../../tutorials/09_Protein_Folding.ipynb:1735
msgid "Visualizing the answer"
msgstr ""

#: ../../tutorials/09_Protein_Folding.ipynb:1746
msgid "In order to reduce computational costs, we have reduced the problem’s qubit operator to the minimum amount of qubits needed to represent the shape of the protein. In order to decode the answer we need to understand how this has been done. \\* The shape of the protein has been encoded by a sequence of turns , :math:`\\{0,1,2,3\\}`. Each turn represents a different direction in the lattice. \\* For a main bead of :math:`N_{aminoacids}` in a lattice, we need :math:`N_{aminoacids}-1` turns in order to represent its shape. However, the orientation of the protein is not relevant to its energy. Therefore the first two turns of the shape can be set to :math:`[1,0]` without loss of generality. \\* If the second bead does not have any side chain, we can also set the :math:`6^{th}` qubit to :math:`[1]` without breaking symmetry. \\* Since the length of the secondary chains is always limited to :math:`1` we only need one turn to describe the shape of the chain."
msgstr ""

#: ../../tutorials/09_Protein_Folding.ipynb:1749
msgid "The total amount of qubits we need to represent the shape of the protein will be :math:`2(N_{aminoacids}-3)` if there is a secondary chain coming out of the second bead or :math:`2(N_{aminoacids}-3) - 1`, otherwise. All the other qubits will remain unused during the optimization process. See:"
msgstr ""

#: ../../tutorials/09_Protein_Folding.ipynb:1802
msgid "Now that we know which qubits encode which information, we can decode the bitstring into the explicit turns that form the shape of the protein."
msgstr ""

#: ../../tutorials/09_Protein_Folding.ipynb:1851
msgid "From this sequence of turns we can get the cartesian coordinates of each of the aminoacids of the protein."
msgstr ""

#: ../../tutorials/09_Protein_Folding.ipynb:1914
msgid "And finally, we can also plot the structure of the protein in 3D. Note that when rendered with the proper backend this plot can be interactively rotated."
msgstr ""

#: ../../tutorials/09_Protein_Folding.ipynb:1944
msgid "And here is an example with side chains."
msgstr ""

#: ../../tutorials/09_Protein_Folding.ipynb:1989
msgid "References"
msgstr "참조"

#: ../../tutorials/09_Protein_Folding.ipynb:2000
#, python-format
msgid "[1] https://en.wikipedia.org/wiki/Levinthal%27s_paradox"
msgstr "[1] https://en.wikipedia.org/wiki/Levinthal%27s_paradox"

#: ../../tutorials/09_Protein_Folding.ipynb:2002
msgid "[2] A.Robert, P.Barkoutsos, S.Woerner and I.Tavernelli, Resource-efficient quantum algorithm for protein folding, NPJ Quantum Information, 2021, https://doi.org/10.1038/s41534-021-00368-4"
msgstr "[2] A.Robert, P.Barkoutsos, S.Woerner and I.Tavernelli, Resource-efficient quantum algorithm for protein folding, NPJ Quantum Information, 2021, https://doi.org/10.1038/s41534-021-00368-4"

#: ../../tutorials/09_Protein_Folding.ipynb:2004
msgid "[3] IUPAC–IUB Commission on Biochemical Nomenclature (1972). “A one-letter notation for aminoacid sequences”. Pure and Applied Chemistry. 31 (4): 641–645. doi:10.1351/pac197231040639. PMID 5080161."
msgstr "[3] IUPAC–IUB Commission on Biochemical Nomenclature (1972). “A one-letter notation for aminoacid sequences”. Pure and Applied Chemistry. 31 (4): 641–645. doi:10.1351/pac197231040639. PMID 5080161."

#: ../../tutorials/09_Protein_Folding.ipynb:2006
msgid "[4] https://en.wikipedia.org/wiki/Amino_acid"
msgstr "[4] https://en.wikipedia.org/wiki/Amino_acid"

#: ../../tutorials/09_Protein_Folding.ipynb:2008
msgid "[5] S. Miyazawa and R. L.Jernigan, Residue – Residue Potentials with a Favorable Contact Pair Term and an Unfavorable High Packing Density Term for Simulation and Threading, J. Mol. Biol.256, 623–644, 1996, Table 3, https://doi.org/10.1006/jmbi.1996.0114"
msgstr "[5] S. Miyazawa and R. L.Jernigan, Residue – Residue Potentials with a Favorable Contact Pair Term and an Unfavorable High Packing Density Term for Simulation and Threading, J. Mol. Biol.256, 623–644, 1996, Table 3, https://doi.org/10.1006/jmbi.1996.0114"

#: ../../tutorials/09_Protein_Folding.ipynb:2010
msgid "[6] P.Barkoutsos, G. Nannichini, A.Robert, I.Tavernelli, S.Woerner, Improving Variational Quantum Optimization using CVaR, Quantum 4, 256, 2020, https://doi.org/10.22331/q-2020-04-20-256"
msgstr "[6] P.Barkoutsos, G. Nannichini, A.Robert, I.Tavernelli, S.Woerner, Improving Variational Quantum Optimization using CVaR, Quantum 4, 256, 2020, https://doi.org/10.22331/q-2020-04-20-256"

