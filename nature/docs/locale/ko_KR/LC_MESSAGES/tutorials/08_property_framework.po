msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 17:40+0000\n"
"PO-Revision-Date: 2022-01-26 14:52\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/08_property_framework.po\n"
"X-Crowdin-File-ID: 9711\n"
"Language: ko_KR\n"

#: ../../tutorials/08_property_framework.ipynb:9
msgid "This page was generated from `docs/tutorials/08_property_framework.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/08_property_framework.ipynb`__ 에서 생성되었다."

#: ../../tutorials/08_property_framework.ipynb:9
msgid "The Property Framework"
msgstr "특성 프레임워크"

#: ../../tutorials/08_property_framework.ipynb:30
msgid "Qiskit Nature 0.2.0 introduces the *Property* framework. This framework replaces the legacy driver return types like ``QMolecule`` and ``WatsonHamiltonian`` with a more modular and extensible approach."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:41
msgid "In this tutorial, we will walk through the framework, explain its most important components and show you, how you can extend it with a custom *property* yourself."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:53
msgid "What is a ``Property``?"
msgstr "``Property`` 은 무엇인가?"

#: ../../tutorials/08_property_framework.ipynb:64
msgid "At its core, a ``Property`` is an object complementing some raw data with functions that allow you to transform/manipulate/interpret this raw data. This “definition” is kept rather abstract on purpose, but what it means is essentially the following. A ``Property``:"
msgstr "핵심인  ``Property`` 은 이러한 원시 데이터를 변환/조작/해석할 수 있도록 하는 함수를 사용하여 일부 원시 데이터를 보완하는 객체이다. 이 \"정의\"는 목적에 따라 다소 추상적이지만 본질적으로는 다음과 같다.  ``Property`` 은:"

#: ../../tutorials/08_property_framework.ipynb:66
msgid "represents a physical observable (that’s the raw data)"
msgstr "물리적으로 관찰 가능한 객체 (원시 데이터) 를 나타낸다."

#: ../../tutorials/08_property_framework.ipynb:67
msgid "can be expressed as an operator"
msgstr "연산자로써 표현될 수 있다."

#: ../../tutorials/08_property_framework.ipynb:68
msgid "can be evaluated with a wavefunction"
msgstr "파동 함수로 평가될 수 있다."

#: ../../tutorials/08_property_framework.ipynb:69
msgid "provides an ``interpret`` method which gives meaning to the eigenvalue of the evaluated qubit operator"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:90
msgid "The ``qiskit_nature.properties`` module provides two classes:"
msgstr "``qiskit_nature.properties`` 모듈은 두 가지 클래스를 제공한다:"

#: ../../tutorials/08_property_framework.ipynb:92
msgid "``Property``: this is the basic interface. It requires only a ``name`` and an ``interpret`` method to be implemented."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:93
msgid "``GroupedProperty``: this class is an implementation of the `Composite pattern <https://en.wikipedia.org/wiki/Composite_pattern>`__ which allows you to *group* multiple properties into one."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:95
msgid "**Note:** Grouped properties must have unique ``name`` attributes!"
msgstr "** 참고: ** 그룹화된 특성에는 고유한 ``name`` 속성이 있어야 한다!"

#: ../../tutorials/08_property_framework.ipynb:107
msgid "Second Quantization Properties"
msgstr "2차 양자화 특성"

#: ../../tutorials/08_property_framework.ipynb:118
msgid "At the time of writing, Qiskit Nature ships with a single variant of properties: the ``SecondQuantizedProperty`` objects."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:120
msgid "This sub-type adds one additional requirement because any ``SecondQuantizedProperty``"
msgstr "이 하위 유형은 하나의 추가 요구 사항을 더하는데, 이는 ``SecondQuantizedProperty`` 가"

#: ../../tutorials/08_property_framework.ipynb:122
msgid "**must** implement a ``second_q_ops`` method which constructs a (list of) ``SecondQuantizedOp``\\ s."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:133
msgid "The ``qiskit_nature.properties.second_quantization`` module is further divided into ``electronic`` and ``vibrational`` modules (similar to other modules of Qiskit Nature). Let us dive into the ``electronic`` sub-module first."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:145
msgid "Electronic Second Quantization Properties"
msgstr "전자 2차 양자화 특성"

#: ../../tutorials/08_property_framework.ipynb:156
msgid "Out-of-the-box Qiskit Nature ships the following electronic properties:"
msgstr "즉시 사용할 수 있는 Qiskit Nature는 다음과 같은 전자적 특성을 제공한다:"

#: ../../tutorials/08_property_framework.ipynb:205
msgid "``ElectronicEnergy`` is arguably the most important property because it contains the *Hamiltonian* representing the electronic structure problem whose eigenvalues we are interested in when solving an ``ElectronicStructureProblem``. The way in which it stores this Hamiltonian is, just like the rest of the framework, highly modular. The initializer of the ``ElectronicEnergy`` has a single required argument, ``electronic_integrals``, which is a ``List[ElectronicIntegrals]``."
msgstr "``ElectronicEnergy`` 는 ``ElectronicStructureProblem`` 을 해결할 때 우리가 관심을 갖고 있는 전자 구조의 문제를 나타내는 *해밀톤*을 포함하고 있기 때문에 가장 중요한 특성이다. 이 해밀톤을 저장하는 방법은 나머지 프레임워크와 마찬가지로, 고도로 모듈화되어 있다. ``ElectronicEnergy`` 의 초기화기는 하나의 필수 전달인자인 ``electronic_integrals`` 를 갖고 있다. 이는 ``List[ElectronicIntegrals]`` 이다."

#: ../../tutorials/08_property_framework.ipynb:217
msgid "ElectronicIntegrals"
msgstr "ElectronicIntegrals"

#: ../../tutorials/08_property_framework.ipynb:243
msgid "The ``ElectronicIntegrals`` are a container class for *n-body* interactions in a given basis, which can be any of the following:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:298
msgid "Let us take the ``OneBodyElectronicIntegrals`` as an example. As the name suggests, this container is for 1-body interaction integrals. You can construct an instance of it like so:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:361
msgid "As you can see, the first argument simply specifies the basis of the integrals. The second argument requires a little further explanation:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:363
msgid "In the case of the ``AO`` or ``MO`` basis, this argument **must** be a pair of numpy arrays, where the first and second one are the alpha- and beta-spin integrals, respectively."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:365
msgid "**Note:** The second argument may be ``None``, for the case where the beta-spin integrals are the same as the alpha-spin integrals (so there is no need to provide the same values twice)."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:367
msgid "In the case of the ``SO`` basis, this argument **must** be a single numpy array, storing the alpha- and beta-spin integrals in blocked order, i.e. like so:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:382
msgid "The ``TwoBodyElectronicIntegrals`` work pretty much the same except that they contain all possible spin-combinations in the tuple of numpy arrays. For example:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:495
msgid "We should take note of a few observations:"
msgstr "몇 가지 관찰 결과를 참고해야 한다."

#: ../../tutorials/08_property_framework.ipynb:497
msgid "the numpy arrays shall be ordered as ``(\"alpha-alpha\", \"beta-alpha\", \"beta-beta\", \"alpha-beta\")``"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:498
msgid "the ``alpha-alpha`` matrix may **not** be ``None``"
msgstr "``alpha-alpha`` 배열은 ``None`` 이 될 수 **없다**."

#: ../../tutorials/08_property_framework.ipynb:499
msgid "if the ``alpha-beta`` matrix is ``None``, but ``beta-alpha`` is not, its transpose will be used (like above)"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:500
msgid "in any other case, matrices which are ``None`` will be filled with the ``alpha-alpha`` matrix"
msgstr "어떤 경우에도 ``None`` 인 배열은 ``alpha-alpha`` 배열로 채워질 것이다."

#: ../../tutorials/08_property_framework.ipynb:502
msgid "in the ``SO`` basis case, a single numpy array must be specified. Refer to ``TwoBodyElectronicIntegrals.to_spin()`` for its exact formatting."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:514
msgid "ElectronicEnergy"
msgstr "ElectronicEnergy"

#: ../../tutorials/08_property_framework.ipynb:525
msgid "Now we are ready to construct an ``ElectronicEnergy`` instance:"
msgstr "이제 우리는 ``ElectronicEnergy`` 인스턴스를 구성할 준비가 되었다:"

#: ../../tutorials/08_property_framework.ipynb:652
msgid "This property can now be used to construct a ``SecondQuantizedOp`` (which can then be mapped to a ``QubitOperator``):"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:710
msgid "Result interpretation"
msgstr "결과 해석"

#: ../../tutorials/08_property_framework.ipynb:721
msgid "An additional benefit which we gain from the ``Property`` framework, is that the result interpretation of a computed eigenvalue can be handled by each property itself. This results in nice and logically consistent classes because the result gets interpreted in the same context where the raw data is available."
msgstr "``Property`` 프레임워크에서 얻을 수 있는 추가적인 이점은 계산된 고유값의 결과 해석을 각 특성 자체에서 처리할 수 있다는 점이다. 결과는 원시 데이터를 사용할 수 있는 동일한 맥락에서 해석되기 때문에, 이는 좋고 논리적으로 일관된 클래스를 생성한다."

#: ../../tutorials/08_property_framework.ipynb:777
msgid "While this particular example is not yet very impressive, wait until we use more properties at once."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:789
msgid "ParticleNumber"
msgstr "ParticleNumber"

#: ../../tutorials/08_property_framework.ipynb:800
msgid "The ``ParticleNumber`` property also takes a special place among the builtin properties because it serves a dual purpose of:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:802
msgid "storing the number of particles in the electronic system"
msgstr "전자 시스템에 입자의 수를 저장하는 것"

#: ../../tutorials/08_property_framework.ipynb:803
msgid "providing the operators to evaluate the number of particles for a given eigensolution of the problem"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:805
msgid "Therefore, this property is required if you want to use additional functionality like the ``ActiveSpaceTransformer`` or the ``ElectronicStructureProblem.default_filter_criterion()``."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:860
msgid "GroupedProperty"
msgstr "GroupedProperty"

#: ../../tutorials/08_property_framework.ipynb:871
msgid "Rather than iterating all of the other properties one by one, let us simply consider a group of properties as provided by any ``ElectronicStructureDriver`` from the ``qiskit_nature.drivers.second_quantization`` module."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:1300
msgid "There is a lot going on but with the explanations above you should not have any problems with understanding this output."
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:1312
msgid "Constructing a Hamiltonian from raw integrals"
msgstr "원시 적분에서 해밀톤 만들기"

#: ../../tutorials/08_property_framework.ipynb:1323
msgid "If you have obtained some raw one- and two-body integrals by means other than through a driver provided by Qiskit Nature, you can still easily construct an ``ElectronicEnergy`` property to serve as your access point into the stack:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:1461
msgid "Vibrational Second Quantization Properties"
msgstr "진동 2차 양자화 특성"

#: ../../tutorials/08_property_framework.ipynb:1472
msgid "The ``vibrational`` stack for vibrational structure calculations also integrates with the Property framework. After the above introduction you should be able to understand the following directly:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:1505
msgid "For vibrational structure calculations we always need to define the basis which we want to work in, separately:"
msgstr ""

#: ../../tutorials/08_property_framework.ipynb:1631
msgid "Writing custom Properties"
msgstr "사용자 정의 Properties 작성하기"

#: ../../tutorials/08_property_framework.ipynb:1642
msgid "You can extend the Property framework with your own implementations. Here, we will walk through the simple example of constructing a Property for the *electronic density*. Since this observable is essentially based on matrices, we will be leveraging the ``OneBodyElectronicIntegrals`` container to store the actual density matrix."
msgstr "사용자 고유의 구현으로 Property 프레임워크를 확장할 수 있다. 여기에서는 *전자 밀도* 에 대한 특성을 구성하는 간단한 예제를 살펴보겠다. 이러한 전망이 근본적으로 행렬을 기반으로 하기 때문에, 우리는 ``OneBodyElectronicIntegrals`` 컨테이너를 활용하여 실제 밀도 행렬을 저장할 것이다."

#: ../../tutorials/08_property_framework.ipynb:1828
msgid "Of course, the above example is very minimal and can be extended at will."
msgstr "물론, 위 예는 매우 최소이며 확장될 수 있다."

#: ../../tutorials/08_property_framework.ipynb:1839
msgid "**Note:** as of Qiskit Nature version 0.2.0, the direct integration of custom Property objects into the stack is not implemented yet, due to limitations of the auxiliary operator parsing. See https://github.com/Qiskit/qiskit-nature/issues/312 for more details."
msgstr "**참고:** Qiskit Nature 버전 0.2.0의 경우, 보조 연산자 구문 분석의 제한사항으로 인해 사용자 정의 특성 객체를 스택으로 직접 통합하는 작업이 아직 구현되지 않았다. 자세한 내용은 https://github.com/Qiskit/qiskit-nature/issues/312를 참조."

#: ../../tutorials/08_property_framework.ipynb:1841
msgid "For the time being, you can still evaluate a custom Property, by passing it’s generated operators directly to the ``Eigensolver.solve`` method by means of constructing the ``aux_operators``. Note, however, that you will have to deal with transformations applied to your properties manually, until the above issue is resolved."
msgstr "당분간은 사용자 정의 Property을 평가할 수 있는데, 이는 생성된 연산자를 ``aux_operators`` 를 구성하는 방법으로 직접적으로 ``Eigensolver.solve`` 메서드에 전달하는 것이다. 그러나 참고로, 위의 문제가 해결될 때까지 사용자의 특성에 적용되는 변환을 수동으로 처리해야 한다."

