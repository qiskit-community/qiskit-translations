msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-16 20:19+0000\n"
"PO-Revision-Date: 2022-06-16 20:48\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/08_property_framework.po\n"
"X-Crowdin-File-ID: 9711\n"
"Language: ko_KR\n"

#: ../../tutorials/08_property_framework.ipynb:9
msgid "This page was generated from `docs/tutorials/08_property_framework.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/08_property_framework.ipynb`__ 에서 생성되었다."

#: ../../tutorials/08_property_framework.ipynb:9
msgid "The Property Framework"
msgstr "특성 프레임워크"

#: ../../tutorials/08_property_framework.ipynb:30
msgid "Qiskit Nature 0.2.0 introduces the *Property* framework. This framework replaces the legacy driver return types like ``QMolecule`` and ``WatsonHamiltonian`` with a more modular and extensible approach."
msgstr "Qiskit Nature 0.2.0에서는 *특성* 프레임워크를 소개한다. 이 프레임워크는 ``QMolecule`` 와 ``WatsonHamiltonian`` 과 같은 기존의 드라이버 리턴 유형을 보다 모듈식이고 확장 가능한 방식으로 대체한다."

#: ../../tutorials/08_property_framework.ipynb:41
msgid "In this tutorial, we will walk through the framework, explain its most important components and show you, how you can extend it with a custom *property* yourself."
msgstr "이 사용 지침서에서는 프레임워크를 살펴보고, 가장 중요한 성분들에 대해 설명하고, 이러한 프레임워크를 사용자 정의 *특성*을 이용해 확장하는 방법을 보여준다."

#: ../../tutorials/08_property_framework.ipynb:53
msgid "What is a ``Property``?"
msgstr "``Property`` 은 무엇인가?"

#: ../../tutorials/08_property_framework.ipynb:64
msgid "At its core, a ``Property`` is an object complementing some raw data with functions that allow you to transform/manipulate/interpret this raw data. This “definition” is kept rather abstract on purpose, but what it means is essentially the following. A ``Property``:"
msgstr "핵심인  ``Property`` 은 이러한 원시 데이터를 변환/조작/해석할 수 있도록 하는 함수를 사용하여 일부 원시 데이터를 보완하는 객체이다. 이 \"정의\"는 목적에 따라 다소 추상적이지만 본질적으로는 다음과 같다.  ``Property`` 은:"

#: ../../tutorials/08_property_framework.ipynb:66
msgid "represents a physical observable (that’s the raw data)"
msgstr "물리적으로 관찰 가능한 객체 (원시 데이터) 를 나타낸다."

#: ../../tutorials/08_property_framework.ipynb:67
msgid "can be expressed as an operator"
msgstr "연산자로써 표현될 수 있다."

#: ../../tutorials/08_property_framework.ipynb:68
msgid "can be evaluated with a wavefunction"
msgstr "파동 함수로 평가될 수 있다."

#: ../../tutorials/08_property_framework.ipynb:69
msgid "provides an ``interpret`` method which gives meaning to the eigenvalue of the evaluated qubit operator"
msgstr "평가된 큐비트 연산자의 고유값에 의미를 부여하는 ``interpret`` 방법을 제공한다."

#: ../../tutorials/08_property_framework.ipynb:90
msgid "The ``qiskit_nature.properties`` module provides two classes:"
msgstr "``qiskit_nature.properties`` 모듈은 두 가지 클래스를 제공한다:"

#: ../../tutorials/08_property_framework.ipynb:92
msgid "``Property``: this is the basic interface. It requires only a ``name`` and an ``interpret`` method to be implemented."
msgstr "``Property``: 이것이 기본 인터페이스이다. ``name`` 과 ``interpret`` 메서드만 구현되는 것을 요구한다."

#: ../../tutorials/08_property_framework.ipynb:93
msgid "``GroupedProperty``: this class is an implementation of the `Composite pattern <https://en.wikipedia.org/wiki/Composite_pattern>`__ which allows you to *group* multiple properties into one."
msgstr "``GroupedProperty`` : 이 클래스는 복합 패턴 `Composite pattern <https://en.wikipedia.org/wiki/Composite_pattern>`__ 를 구현한 것이며, 이를 통해 여러 특성을 하나로 *그룹화*할 수 있다."

#: ../../tutorials/08_property_framework.ipynb:95
msgid "**Note:** Grouped properties must have unique ``name`` attributes!"
msgstr "** 참고: ** 그룹화된 특성에는 고유한 ``name`` 속성이 있어야 한다!"

#: ../../tutorials/08_property_framework.ipynb:107
msgid "Second Quantization Properties"
msgstr "2차 양자화 특성"

#: ../../tutorials/08_property_framework.ipynb:118
msgid "At the time of writing, Qiskit Nature ships with a single variant of properties: the ``SecondQuantizedProperty`` objects."
msgstr "이 글이 작성되는 시점에서, Qiskit Nature는 ``SecondQuantizedProperty`` 객체라는 하나의 특성을 제공한다."

#: ../../tutorials/08_property_framework.ipynb:120
msgid "This sub-type adds one additional requirement because any ``SecondQuantizedProperty``"
msgstr "이 하위 유형은 하나의 추가 요구 사항을 더하는데, 이는 ``SecondQuantizedProperty`` 가"

#: ../../tutorials/08_property_framework.ipynb:122
msgid "**must** implement a ``second_q_ops`` method which constructs a (list of) ``SecondQuantizedOp``\\ s."
msgstr "**반드시** (일련의) ``SecondQuantizedOp`` 들을 구축하는 ``second_q_ops`` 방법을 구현해야 한다."

#: ../../tutorials/08_property_framework.ipynb:133
msgid "The ``qiskit_nature.properties.second_quantization`` module is further divided into ``electronic`` and ``vibrational`` modules (similar to other modules of Qiskit Nature). Let us dive into the ``electronic`` sub-module first."
msgstr "``qiskit_nature.properties.second_quantization`` 모듈은 ``electronic`` 와 ``vibrational`` 모듈 (Qiskit Nature의 다른 모듈과 유사함) 으로 더 나누어진다. 먼저 ``electronic`` 하위 모듈을 살펴보도록 하자."

#: ../../tutorials/08_property_framework.ipynb:145
msgid "Electronic Second Quantization Properties"
msgstr "전자 2차 양자화 특성"

#: ../../tutorials/08_property_framework.ipynb:156
msgid "Out-of-the-box Qiskit Nature ships the following electronic properties:"
msgstr "즉시 사용할 수 있는 Qiskit Nature는 다음과 같은 전자적 특성을 제공한다:"

#: ../../tutorials/08_property_framework.ipynb:183
msgid "``ElectronicEnergy`` is arguably the most important property because it contains the *Hamiltonian* representing the electronic structure problem whose eigenvalues we are interested in when solving an ``ElectronicStructureProblem``. The way in which it stores this Hamiltonian is, just like the rest of the framework, highly modular. The initializer of the ``ElectronicEnergy`` has a single required argument, ``electronic_integrals``, which is a ``List[ElectronicIntegrals]``."
msgstr "``ElectronicEnergy`` 는 ``ElectronicStructureProblem`` 을 해결할 때 우리가 관심을 갖고 있는 전자 구조의 문제를 나타내는 *해밀톤*을 포함하고 있기 때문에 가장 중요한 특성이다. 이 해밀톤을 저장하는 방법은 나머지 프레임워크와 마찬가지로, 고도로 모듈화되어 있다. ``ElectronicEnergy`` 의 초기화기는 하나의 필수 전달인자인 ``electronic_integrals`` 를 갖고 있다. 이는 ``List[ElectronicIntegrals]`` 이다."

#: ../../tutorials/08_property_framework.ipynb:195
msgid "ElectronicIntegrals"
msgstr "ElectronicIntegrals"

#: ../../tutorials/08_property_framework.ipynb:221
msgid "The ``ElectronicIntegrals`` are a container class for *n-body* interactions in a given basis, which can be any of the following:"
msgstr "``ElectronicIntegrals`` 은 주어진 기저에서 *n-body* 상호작용을 위한 컨테이너 클래스이며, 다음의 모든 것들이 가능하다:"

#: ../../tutorials/08_property_framework.ipynb:283
msgid "Let us take the ``OneBodyElectronicIntegrals`` as an example. As the name suggests, this container is for 1-body interaction integrals. You can construct an instance of it like so:"
msgstr "예를 들어 ``OneBodyElectronicIntegrals`` 를 살펴보자. 이름이 암시하는 바와 같이, 이 컨테이너는 1-body 상호작용의 통합을 위한 것이다. 다음과 같이 인스턴스를 생성할 수 있다:"

#: ../../tutorials/08_property_framework.ipynb:359
msgid "As you can see, the first argument simply specifies the basis of the integrals. The second argument requires a little further explanation:"
msgstr "보이는 바와 같이, 첫 번째 전달인자는 간단하게 적분의 기저를 지정한다. 두 번째 전달인자는 다음과 같은 추가 설명이 필요하다:"

#: ../../tutorials/08_property_framework.ipynb:361
msgid "In the case of the ``AO`` or ``MO`` basis, this argument **must** be a pair of numpy arrays, where the first and second one are the alpha- and beta-spin integrals, respectively."
msgstr "``AO`` 나 ``MO`` 기저의 경우에, 이러한 전달인자들은 **반드시** 은 한 쌍의 numpy 배열이며, 여기서 첫 번째와 두 번째는 각각 알파- 및 베타-스핀 적분이다."

#: ../../tutorials/08_property_framework.ipynb:363
msgid "**Note:** The second argument may be ``None``, for the case where the beta-spin integrals are the same as the alpha-spin integrals (so there is no need to provide the same values twice)."
msgstr "** 참고: ** 두 번째 전달인자는 베타-스핀 적분이 알파-스핀 적분과 동일한 경우에 ``None`` 이 될 수 있다 (따라서 동일한 값을 두 번 제공할 필요가 없음)."

#: ../../tutorials/08_property_framework.ipynb:365
msgid "In the case of the ``SO`` basis, this argument **must** be a single numpy array, storing the alpha- and beta-spin integrals in blocked order, i.e. like so:"
msgstr " ``SO`` 기저의 경우,  전달인자는 **반드시** 단일의 numpy 배열로, 알파- 및 베타-스핀 적분을 차단된 순서로 저장한다."

#: ../../tutorials/08_property_framework.ipynb:380
msgid "The ``TwoBodyElectronicIntegrals`` work pretty much the same except that they contain all possible spin-combinations in the tuple of numpy arrays. For example:"
msgstr "``TwoBodyElectronicIntegrals`` 는 이들이 가능한 모든 스핀-조합을 numpy 배열의 튜플에서 포함하고 있다는 점을 제외하고는 거의 동일하다. 예를 들어:"

#: ../../tutorials/08_property_framework.ipynb:512
msgid "We should take note of a few observations:"
msgstr "몇 가지 관찰 결과를 참고해야 한다."

#: ../../tutorials/08_property_framework.ipynb:514
msgid "the numpy arrays shall be ordered as ``(\"alpha-alpha\", \"beta-alpha\", \"beta-beta\", \"alpha-beta\")``"
msgstr "numpy 배열은 이렇게 배열될 것이다 ``(\"alpha-alpha\", \"beta-alpha\", \"beta-beta\", \"alpha-beta\")``"

#: ../../tutorials/08_property_framework.ipynb:515
msgid "the ``alpha-alpha`` matrix may **not** be ``None``"
msgstr "``alpha-alpha`` 배열은 ``None`` 이 될 수 **없다**."

#: ../../tutorials/08_property_framework.ipynb:516
msgid "if the ``alpha-beta`` matrix is ``None``, but ``beta-alpha`` is not, its transpose will be used (like above)"
msgstr "``alpha-beta`` 배열이 ``None``이고 ``beta-alpha`` 는 아니라면, 전치는 사용될 것이다 (위와 같이)"

#: ../../tutorials/08_property_framework.ipynb:517
msgid "in any other case, matrices which are ``None`` will be filled with the ``alpha-alpha`` matrix"
msgstr "어떤 경우에도 ``None`` 인 배열은 ``alpha-alpha`` 배열로 채워질 것이다."

#: ../../tutorials/08_property_framework.ipynb:519
msgid "in the ``SO`` basis case, a single numpy array must be specified. Refer to ``TwoBodyElectronicIntegrals.to_spin()`` for its exact formatting."
msgstr "``SO`` 기저의 경우에는 한 개의 numpy 배열이 지정되어야만 한다. 정확한 양식은 ``TwoBodyElectronicIntegrals.to_spin()`` 을 참조하라."

#: ../../tutorials/08_property_framework.ipynb:531
msgid "ElectronicEnergy"
msgstr "ElectronicEnergy"

#: ../../tutorials/08_property_framework.ipynb:542
msgid "Now we are ready to construct an ``ElectronicEnergy`` instance:"
msgstr "이제 우리는 ``ElectronicEnergy`` 인스턴스를 구성할 준비가 되었다:"

#: ../../tutorials/08_property_framework.ipynb:698
msgid "This property can now be used to construct a ``SecondQuantizedOp`` (which can then be mapped to a ``QubitOperator``):"
msgstr "이제 이 특성을 사용하여 ``SecondQuantizedOp`` 를 생성할 수 있다 (이는 이후 ``QubitOperator`` 에 맵핑될 수 있음):"

#: ../../tutorials/08_property_framework.ipynb:769
msgid "Result interpretation"
msgstr "결과 해석"

#: ../../tutorials/08_property_framework.ipynb:780
msgid "An additional benefit which we gain from the ``Property`` framework, is that the result interpretation of a computed eigenvalue can be handled by each property itself. This results in nice and logically consistent classes because the result gets interpreted in the same context where the raw data is available."
msgstr "``Property`` 프레임워크에서 얻을 수 있는 추가적인 이점은 계산된 고유값의 결과 해석을 각 특성 자체에서 처리할 수 있다는 점이다. 결과는 원시 데이터를 사용할 수 있는 동일한 맥락에서 해석되기 때문에, 이는 좋고 논리적으로 일관된 클래스를 생성한다."

#: ../../tutorials/08_property_framework.ipynb:844
msgid "While this particular example is not yet very impressive, wait until we use more properties at once."
msgstr "이 특정 예제가 아직 매우 인상적이지는 않지만, 한 번에 더 많은 특성을 사용할 때까지 기다리자."

#: ../../tutorials/08_property_framework.ipynb:856
msgid "ParticleNumber"
msgstr "ParticleNumber"

#: ../../tutorials/08_property_framework.ipynb:867
msgid "The ``ParticleNumber`` property also takes a special place among the builtin properties because it serves a dual purpose of:"
msgstr "``ParticleNumber`` 특성은 다음과 같은 이중 목적을 제공하기 때문에 내장 특성 중에서 특별한 위치를 차지한다."

#: ../../tutorials/08_property_framework.ipynb:869
msgid "storing the number of particles in the electronic system"
msgstr "전자 시스템에 입자의 수를 저장하는 것"

#: ../../tutorials/08_property_framework.ipynb:870
msgid "providing the operators to evaluate the number of particles for a given eigensolution of the problem"
msgstr "문제의 주어진 고유해결책을 위해 입자의 수를 평가하는 연산자를 제공하는 것"

#: ../../tutorials/08_property_framework.ipynb:872
msgid "Therefore, this property is required if you want to use additional functionality like the ``ActiveSpaceTransformer`` or the ``ElectronicStructureProblem.default_filter_criterion()``."
msgstr "따라서 이 특성은 ``ActiveSpaceTransformer`` 또는``ElectronicStructureProblem.default_filter_criterion()`` 과 같은 추가 기능을 사용하려는 경우에 필요하다."

#: ../../tutorials/08_property_framework.ipynb:937
msgid "GroupedProperty"
msgstr "GroupedProperty"

#: ../../tutorials/08_property_framework.ipynb:948
msgid "Rather than iterating all of the other properties one by one, let us simply consider a group of properties as provided by any ``ElectronicStructureDriver`` from the ``qiskit_nature.drivers.second_quantization`` module."
msgstr "다른 모든 특성을 하나씩 반복하기 보다는 ``qiskit_nature.drivers.second_quantization`` 모듈에서 ``ElectronicStructureDriver`` 가 제공하는 특성 그룹을 간단히 살펴보자."

#: ../../tutorials/08_property_framework.ipynb:1407
msgid "There is a lot going on but with the explanations above you should not have any problems with understanding this output."
msgstr "많은 일이 진행되고 있지만 위의 설명으로 이 출력을 이해하는 데 문제가 없을 것이다."

#: ../../tutorials/08_property_framework.ipynb:1419
msgid "Constructing a Hamiltonian from raw integrals"
msgstr "원시 적분에서 해밀톤 만들기"

#: ../../tutorials/08_property_framework.ipynb:1430
msgid "If you have obtained some raw one- and two-body integrals by means other than through a driver provided by Qiskit Nature, you can still easily construct an ``ElectronicEnergy`` property to serve as your access point into the stack:"
msgstr "Qiskit Nature에서 제공하는 드라이버 이외의 수단을 사용하여 일부 원시 1- 및 2-body 적분을 얻은 경우에는, 여전히 ``ElectronicEnergy`` 특성을 쉽게 구성하여 스택에 액세스 지점으로 사용할 수 있다:"

#: ../../tutorials/08_property_framework.ipynb:1553
msgid "Vibrational Second Quantization Properties"
msgstr "진동 2차 양자화 특성"

#: ../../tutorials/08_property_framework.ipynb:1564
msgid "The ``vibrational`` stack for vibrational structure calculations also integrates with the Property framework. After the above introduction you should be able to understand the following directly:"
msgstr "진동 구조 계산을 위한 ``vibrational`` 스택은 또한 Property 프레임워크와 통합된다. 위의 소개 후에 다음을 직접 이해할 수 있어야 한다:"

#: ../../tutorials/08_property_framework.ipynb:1597
msgid "For vibrational structure calculations we always need to define the basis which we want to work in, separately:"
msgstr "진동 구조 계산의 경우, 항상 다음과 같이 작업하고자 하는 기저를 정의해야 한다:"

#: ../../tutorials/08_property_framework.ipynb:1742
msgid "Writing custom Properties"
msgstr "사용자 정의 Properties 작성하기"

#: ../../tutorials/08_property_framework.ipynb:1753
msgid "You can extend the Property framework with your own implementations. Here, we will walk through the simple example of constructing a Property for the *electronic density*. Since this observable is essentially based on matrices, we will be leveraging the ``OneBodyElectronicIntegrals`` container to store the actual density matrix."
msgstr "사용자 고유의 구현으로 Property 프레임워크를 확장할 수 있다. 여기에서는 *전자 밀도* 에 대한 특성을 구성하는 간단한 예제를 살펴보겠다. 이러한 전망이 근본적으로 행렬을 기반으로 하기 때문에, 우리는 ``OneBodyElectronicIntegrals`` 컨테이너를 활용하여 실제 밀도 행렬을 저장할 것이다."

#: ../../tutorials/08_property_framework.ipynb:1977
msgid "Of course, the above example is very minimal and can be extended at will."
msgstr "물론, 위 예는 매우 최소이며 확장될 수 있다."

#: ../../tutorials/08_property_framework.ipynb:1988
msgid "**Note:** as of Qiskit Nature version 0.2.0, the direct integration of custom Property objects into the stack is not implemented yet, due to limitations of the auxiliary operator parsing. See https://github.com/Qiskit/qiskit-nature/issues/312 for more details."
msgstr "**참고:** Qiskit Nature 버전 0.2.0의 경우, 보조 연산자 구문 분석의 제한사항으로 인해 사용자 정의 특성 객체를 스택으로 직접 통합하는 작업이 아직 구현되지 않았다. 자세한 내용은 https://github.com/Qiskit/qiskit-nature/issues/312 를 참조."

#: ../../tutorials/08_property_framework.ipynb:1990
msgid "For the time being, you can still evaluate a custom Property, by passing it’s generated operators directly to the ``Eigensolver.solve`` method by means of constructing the ``aux_operators``. Note, however, that you will have to deal with transformations applied to your properties manually, until the above issue is resolved."
msgstr "당분간은 사용자 정의 Property을 평가할 수 있는데, 이는 생성된 연산자를 ``aux_operators`` 를 구성하는 방법으로 직접적으로 ``Eigensolver.solve`` 메서드에 전달하는 것이다. 그러나 참고로, 위의 문제가 해결될 때까지 사용자의 특성에 적용되는 변환을 수동으로 처리해야 한다."

