msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 16:33+0000\n"
"PO-Revision-Date: 2022-02-10 17:02\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/03_ground_state_solvers.po\n"
"X-Crowdin-File-ID: 9670\n"
"Language: ko_KR\n"

#: ../../tutorials/03_ground_state_solvers.ipynb:9
msgid "This page was generated from `docs/tutorials/03_ground_state_solvers.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/03_ground_state_solvers.ipynb`__ 에서 생성되었다."

#: ../../tutorials/03_ground_state_solvers.ipynb:9
msgid "Ground state solvers"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:21
msgid "Introduction"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:23
msgid "|19eadf092e3a468f9237a9b09bd59a1e|"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:29
msgid "19eadf092e3a468f9237a9b09bd59a1e"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:25
msgid "In this tutorial we are going to discuss the ground state calculation interface of Qiskit Nature. The goal is to compute the ground state of a molecular Hamiltonian. This Hamiltonian can be electronic or vibrational. To know more about the preparation of the Hamiltonian, check out the Electronic structure and Vibrational structure tutorials."
msgstr "본 사용 지침서는 Qiskit Nature의 바닥 상태 계산 인터페이스에 대해 설명한다. 이의 목표는 전자적, 혹은 진동적 분자 해밀턴의 바닥 상태를 계산하는 것이다. 해밀턴의 준비에 대하여 더 알고 싶은 경우에는, 전자 구조와 진동 구조에 대한 지침서를 확인하라."

#: ../../tutorials/03_ground_state_solvers.ipynb:27
msgid "The first step is to define the molecular system. In the following we ask for the electronic part of a hydrogen molecule."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:69
msgid "The Solver"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:71
msgid "Then we need to define a solver. The solver is the algorithm through which the ground state is computed."
msgstr "그런 다음 우리는 솔버를 정의해야 한다. 이 솔버는 기저 상태가 계산되는 알고리즘이다."

#: ../../tutorials/03_ground_state_solvers.ipynb:73
msgid "Let’s first start with a purely classical example: the NumPy minimum eigensolver. This algorithm exactly diagonalizes the Hamiltonian. Although it scales badly, it can be used on small systems to check the results of the quantum algorithms."
msgstr "먼저 순수하게 고전적인 예제인 NumPy 최소 eigensolver로 시작하자. 이 알고리즘은 해밀턴을 정확하게 대각화한다. 비록 규모를 정확하게 계산하지는 못하지만, 양자 알고리즘의 결과를 확인하기 위해 작은 시스템에 사용될 수 있다."

#: ../../tutorials/03_ground_state_solvers.ipynb:96
msgid "To find the ground state we coul also use the Variational Quantum Eigensolver (VQE) algorithm. The VQE algorithms works by exchanging information between a classical and a quantum computer as depicted in the following figure."
msgstr "원하는 기저 상태를 찾기 위해서도 변분화된 양자 아이젠솔버 (Variational Quantum Eigensolver, VQE) 알고리즘을 사용한다. VQE 알고리즘들은 다음의 도면에 묘사된 바와 같이 고전 컴퓨터와 양자 컴퓨터 사이의 정보를 교환함으로써 작동한다."

#: ../../tutorials/03_ground_state_solvers.ipynb:98
msgid "|cbe0f5f76ce64445b4f30c09daed1654|"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:102
msgid "cbe0f5f76ce64445b4f30c09daed1654"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:100
msgid "Let’s initialize a VQE solver."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:129
msgid "To define the VQE solver one needs two essential elements:"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:131
msgid "A variational form: here we use the Unitary Coupled Cluster (UCC) ansatz (see for instance [Physical Review A 98.2 (2018): 022322]). Since it is a chemistry standard, a factory is already available allowing a fast initialization of a VQE with UCC. The default is to use all single and double excitations. However, the excitation type (S, D, SD) as well as other parameters can be selected."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:132
msgid "An initial state: the initial state of the qubits. In the factory used above, the qubits are initialized in the Hartree-Fock (see the electronic structure tutorial) initial state (the qubits corresponding to occupied MOs are :math:`|1\\rangle` and those corresponding to virtual MOs are :math:`|0\\rangle`."
msgstr "초기 상태: 큐비트들의 초기 상태. 위에 사용된 공장에서, 큐비트들은 Hartree-Fock 에서 초기화된다 (전자 구조 튜토리얼 참조) 초기 상태 (점유된 MOs에 대응하는 큐비트들은 :math:`|1\\rangle` 이고, 가상 MOs에 상응하는 것들은 :math:`|0\\rangle`) 이다."

#: ../../tutorials/03_ground_state_solvers.ipynb:133
msgid "The backend: this is the quantum machine on which the right part of the figure above will be performed. Here we ask for the perfect quantum emulator (``aer_simulator_statevector``)."
msgstr "백엔드: 위 그림의 오른쪽 부분을 실행하는 양자 기계이다. 이번 경우에는 이상적인 양자 시뮬레이터 (``aer_simulator_statevector``) 를 사용하기를 바란다."

#: ../../tutorials/03_ground_state_solvers.ipynb:135
msgid "One could also use any available ansatz / initial state or even define one’s own. For instance,"
msgstr "또한 사용 가능한 ansatz / 초기 상태를 사용하거나 직접 정의할 수도 있다. 예를 들어,"

#: ../../tutorials/03_ground_state_solvers.ipynb:171
msgid "The calculation and results"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:173
msgid "We are now ready to run the calculation."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:282
msgid "We can compare the VQE results to the NumPy exact solver and see that they match."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:389
msgid "Using a filter function"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:400
msgid "Sometimes the true ground state of the Hamiltonian is not of interest because it lies in a different symmetry sector of the Hilbert space. In this case the NumPy eigensolver can take a filter function to return only the eigenstates with for example the correct number of particles. This is of particular importance in the case of vibrational structure calculations where the true ground state of the Hamiltonian is the vacuum state. A default filter function to check the number of particles is implemented in the different transformations and can be used as"
msgstr "때때로 Hamiltonian의 진정한 기저 상태는 Hilbert 공간의 다른 대칭성 부분에 있기 때문에 관심 대상이 아니다. 이 경우에 NumPy eigensolver 는 예를 들어 정확한 수의 입자를 갖는 고유상태만을 반환시키기 위해 필터 함수를 취할 수 있다. 이것은 해밀턴의 진정한 기저 상태가 진공 상태인 진동 구조 계산의 경우에 특히 중요하다. 입자 수를 확인하는 기본 필터 함수는 다른 변환에서 구현되며 다음과 같이 사용할 수 있다."

