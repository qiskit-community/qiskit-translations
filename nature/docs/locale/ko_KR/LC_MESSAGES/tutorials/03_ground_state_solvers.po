msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-13 14:22+0000\n"
"PO-Revision-Date: 2021-07-13 15:04\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/03_ground_state_solvers.po\n"
"X-Crowdin-File-ID: 9670\n"
"Language: ko_KR\n"

#: ../../tutorials/03_ground_state_solvers.ipynb:13
msgid "Run interactively in jupyter notebook."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:9
msgid "Ground state solvers"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:21
msgid "Introduction"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:23
msgid "|78856aea880145e6911a29b172b299f2|"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:25
msgid "In this tutorial we are going to discuss the ground state calculation interface of Qiskit Chemistry. The goal is to compute the ground state of a molecular Hamiltonian. This Hamiltonian can be electronic or vibrational. To know more about the preparation of the Hamiltonian, check out the Electronic structure and Vibrational structure tutorials."
msgstr "본 튜토리얼에서는 Qiskit Chemistry의 기저 상태 계산 인터페이스에 대해 설명한다. 목표는 분자 해밀턴의 기저 상태를 계산하는 것이다. 이 해밀턴은 전자적이거나 진동적일 수 있다. Hamiltonian의 준비에 대해서 더 알고 싶다면, 전자 구조와 진동 구조의 튜토리얼을 확인하자."

#: ../../tutorials/03_ground_state_solvers.ipynb:27
msgid "The first step is to define the molecular system. In the following we ask for the electronic part of a hydrogen molecule."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:63
msgid "The Solver"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:65
msgid "Then we need to define a solver. The solver is the algorithm through which the ground state is computed."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:67
msgid "Let’s first start with a purely classical example: the NumPy minimum eigensolver. This algorithm exactly diagonalizes the Hamiltonian. Although it scales badly, it can be used on small systems to check the results of the quantum algorithms."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:90
msgid "To find the ground state we coul also use the Variational Quantum Eigensolver (VQE) algorithm. The VQE algorithms works by exchanging information between a classical and a quantum computer as depicted in the following figure."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:92
msgid "|15c2d0077ba445368cca1cd6ced7bdf9|"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:94
msgid "Let’s initialize a VQE solver."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:123
msgid "To define the VQE solver one needs two essential elements:"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:125
msgid "A variational form: here we use the Unitary Coupled Cluster (UCC) ansatz (see for instance [Physical Review A 98.2 (2018): 022322]). Since it is a chemistry standard, a factory is already available allowing a fast initialization of a VQE with UCC. The default is to use all single and double excitations. However, the excitation type (S, D, SD) as well as other parameters can be selected."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:126
msgid "An initial state: the initial state of the qubits. In the factory used above, the qubits are initialized in the Hartree-Fock (see the electronic structure tutorial) initial state (the qubits corresponding to occupied MOs are :math:`|1\\rangle` and those corresponding to virtual MOs are :math:`|0\\rangle`."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:127
msgid "The backend: this is the quantum machine on which the right part of the figure above will be performed. Here we ask for the perfect quantum emulator (``statevector_simulator``)."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:129
msgid "One could also use any available ansatz / initial state or even define one’s own. For instance,"
msgstr "또한 사용 가능한 ansatz / 초기 상태를 사용하거나 직접 정의할 수도 있다. 예를 들어,"

#: ../../tutorials/03_ground_state_solvers.ipynb:160
msgid "The calculation and results"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:162
msgid "We are now ready to run the calculation."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:247
msgid "We can compare the VQE results to the NumPy exact solver and see that they match."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:330
msgid "Using a filter function"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:341
msgid "Sometimes the true ground state of the Hamiltonian is not of interest because it lies in a different symmetry sector of the Hilbert space. In this case the NumPy eigensolver can take a filter function to return only the eigenstates with for example the correct number of particles. This is of particular importance in the case of vibrational structure calculations where the true ground state of the Hamiltonian is the vacuum state. A default filter function to check the number of particles is implemented in the different transformations and can be used as"
msgstr "때때로 Hamiltonian의 진정한 기저 상태는 Hilbert 공간의 다른 대칭성 부분에 있기 때문에 관심 대상이 아니다. 이 경우에 NumPy eigensolver 는 예를 들어 정확한 수의 입자를 갖는 고유상태만을 반환시키기 위해 필터 함수를 취할 수 있다. 이것은 해밀턴의 진정한 기저 상태가 진공 상태인 진동 구조 계산의 경우에 특히 중요하다. 입자 수를 확인하는 기본 필터 함수는 다른 변환에서 구현되며 다음과 같이 사용할 수 있다."

