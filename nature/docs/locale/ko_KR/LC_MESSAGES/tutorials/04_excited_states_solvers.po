msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-01 19:40+0000\n"
"PO-Revision-Date: 2022-07-11 06:14\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/04_excited_states_solvers.po\n"
"X-Crowdin-File-ID: 9672\n"
"Language: ko_KR\n"

#: ../../tutorials/04_excited_states_solvers.ipynb:9
msgid "This page was generated from `docs/tutorials/04_excited_states_solvers.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/04_excited_states_solvers.ipynb`__ 에서 생성되었다."

#: ../../tutorials/04_excited_states_solvers.ipynb:9
msgid "Excited states solvers"
msgstr "여기 상태 솔버"

#: ../../tutorials/04_excited_states_solvers.ipynb:21
msgid "Introduction"
msgstr "소개"

#: ../../tutorials/04_excited_states_solvers.ipynb:23
msgid "|052e5660017c41279259106c443cd62d|"
msgstr "|052e5660017c41279259106c443cd62d|"

#: ../../tutorials/04_excited_states_solvers.ipynb:29
msgid "052e5660017c41279259106c443cd62d"
msgstr "052e5660017c41279259106c443cd62d"

#: ../../tutorials/04_excited_states_solvers.ipynb:25
msgid "In this tutorial we are going to discuss the excited states calculation interface of Qiskit Nature. The goal is to compute the excited states of a molecular Hamiltonian. This Hamiltonian can be electronic or vibrational. To know more about the preparation of the Hamiltonian, check out the Electronic structure and Vibrational structure tutorials."
msgstr "본 사용 지침서는 Qiskit Nature의 들뜬 상태 계산 인터페이스에 대해 설명한다. 이의 목표는 전자적, 혹은 진동적 분자 해밀턴의 들뜬 상태를 계산하는 것이다. 해밀턴의 준비에 대하여 더 알고 싶은 경우에는, 전자 구조와 진동 구조에 대한 지침서를 확인하라."

#: ../../tutorials/04_excited_states_solvers.ipynb:27
msgid "The first step is to define the molecular system. In the following we ask for the electronic part of a hydrogen molecule."
msgstr "첫 번째 단계는 분자 시스템을 정의하는 것이다. 본 튜토리얼에서, 우리는 수소 분자 해밀토니안의 전자적 부분에 대해서만 계산한다."

#: ../../tutorials/04_excited_states_solvers.ipynb:121
msgid "The Solver"
msgstr "솔버 (Solver)"

#: ../../tutorials/04_excited_states_solvers.ipynb:123
msgid "Then we need to define a solver. The solver is the algorithm through which the ground state is computed."
msgstr "그런 다음 우리는 솔버를 정의해야 한다. 이 솔버는 기저 상태가 계산되는 알고리즘이다."

#: ../../tutorials/04_excited_states_solvers.ipynb:125
msgid "Let’s first start with a purely classical example: the NumPy eigensolver. This algorithm exactly diagonalizes the Hamiltonian. Although it scales badly, it can be used on small systems to check the results of the quantum algorithms. Here, we are only interested to look at eigenstates with a given number of particle. To compute only those states a filter function can be passed to the NumPy eigensolver. A default filter function is already implemented in Qiskit and can be used in this way:"
msgstr "먼저, 순수하게 고전적인 예인 NumPy 고윳값 알고리즘으로 시작해보자. 이 알고리즘은 해밀토니안을 정확하게 도식화한다. 비록 확장이 어렵지만, 양자 알고리즘의 결과를 확인하기 위해 작은 시스템에 이 알고리즘을 사용할 수 있다. 여기서, 우리는 단지 주어진 입자수를 가지고 있는 eigenstate들을 보는 것에만 관심이 있다. 이들 상태만을 계산하기 위해, 필터 함수가 NumPy 고윳값 알고리즘에 전달될 수 있다. 기본 필터 기능은 이미 Qiskit에 구현되어 있으며 다음과 같은 방식으로 사용할 수 있다."

#: ../../tutorials/04_excited_states_solvers.ipynb:148
msgid "The excitation energies can also be accessed with the qEOM algorithm [arXiv preprint arXiv:1910.12890 (2019)]. The EOM method finds the excitation energies (differences in energy between the ground state and all :math:`n`\\ th excited states) by solving the following pseudo-eigenvalue problem."
msgstr "여기 에너지는 또한 qEOM 알고리즘 [arXiv preprint arXiv:1910.12890 (2019)] 을 이용하여 접근될 수 있다. EOM 방법은 pseudo-eigenvalue 문제 해결을 통해 여기 에너지 (기저 상태와 모든 :math:`n`\\ 여기 상태의 에너지의 차이) 를 찾아낸다."

#: ../../tutorials/04_excited_states_solvers.ipynb:150
msgid "\\begin{pmatrix}\n"
"    \\text{M} & \\text{Q}\\\\\n"
"    \\text{Q*} & \\text{M*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}\n"
"= E_{0n}\n"
"\\begin{pmatrix}\n"
"    \\text{V} & \\text{W}\\\\\n"
"    -\\text{W*} & -\\text{V*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}"
msgstr "\\begin{pmatrix}\n"
"    \\text{M} & \\text{Q}\\\\\n"
"    \\text{Q*} & \\text{M*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}\n"
"= E_{0n}\n"
"\\begin{pmatrix}\n"
"    \\text{V} & \\text{W}\\\\\n"
"    -\\text{W*} & -\\text{V*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}"

#: ../../tutorials/04_excited_states_solvers.ipynb:171
msgid "with"
msgstr "에 대하여"

#: ../../tutorials/04_excited_states_solvers.ipynb:173
msgid "M_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger},\\hat{\\text{H}}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"
msgstr "M_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger},\\hat{\\text{H}}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"

#: ../../tutorials/04_excited_states_solvers.ipynb:178
msgid "Q_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{H}}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"
msgstr "Q_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{H}}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"

#: ../../tutorials/04_excited_states_solvers.ipynb:183
msgid "V_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"
msgstr "V_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"

#: ../../tutorials/04_excited_states_solvers.ipynb:188
msgid "W_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_\\alpha}^{(\\alpha)})^{\\dagger}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"
msgstr "W_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_\\alpha}^{(\\alpha)})^{\\dagger}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"

#: ../../tutorials/04_excited_states_solvers.ipynb:193
msgid "Although the previous equation can be solved classically, each matrix element must be measured on the quantum computer with the corresponding ground state. To use the qEOM as a solver in Qiskit, we have to define a ground state calculation first, providing to the algorithm information on how to find the ground state. With this the qEOM solver can be initialized:"
msgstr "이전의 방정식이 고전적으로 해결될 수 있지만, 각 행렬 요소는 바닥 상태에 대응되는 양자 컴퓨터에서 측정되어야 한다. qEOM을 Qiskit에서 solver로 사용하려면 바닥 상태 계산을 정의하여 바닥 상태를 찾는 방법에 대한 알고리즘 정보를 제공해야 한다. 이를 통해 qEOM solver를 초기화할 수 있다."

#: ../../tutorials/04_excited_states_solvers.ipynb:226
msgid "The calculation and results"
msgstr "계산과 결과들"

#: ../../tutorials/04_excited_states_solvers.ipynb:228
msgid "The results are computed and printed"
msgstr "결과가 계산되고 출력된다."

#: ../../tutorials/04_excited_states_solvers.ipynb:519
msgid "One can see from these results that one state is missing from the NumPy results. The reason for this is because the spin is also used as a filter and only singlet states are shown. In the following we use a custom filter function to check consistently our results and only filter out states with incorrect number of particle (in this case the number of particle is 2)."
msgstr "이러한 결과로부터 하나의 상태가 NumPy 결과로부터 누락되었다는 것을 알 수 있다. 그 이유는 스핀이 필터로도 사용되고 단일항 상태만 표시되었기 때문이다. 다음은 사용자 정의 필터 함수를 사용하여 결과를 일정하게 확인하고 올바르지 않은 수의 입자가 있는 상태만 필터링한다 (이 경우 입자의 수는 2임)."

