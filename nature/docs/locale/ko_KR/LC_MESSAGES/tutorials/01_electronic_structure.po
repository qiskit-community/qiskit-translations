msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-01 15:55+0000\n"
"PO-Revision-Date: 2023-09-01 16:18\n"
"Last-Translator: \n"
"Language: ko\n"
"Language-Team: Korean\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /main/nature/docs/locale/en/LC_MESSAGES/tutorials/01_electronic_structure.po\n"
"X-Crowdin-File-ID: 9666\n"

#: ../../tutorials/01_electronic_structure.ipynb:9
msgid "This page was generated from `docs/tutorials/01_electronic_structure.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/01_electronic_structure.ipynb`__ 에서 생성되었다."

#: ../../tutorials/01_electronic_structure.ipynb:9
msgid "Electronic structure"
msgstr "전자 구조"

#: ../../tutorials/01_electronic_structure.ipynb:21
msgid "Introduction"
msgstr "소개"

#: ../../tutorials/01_electronic_structure.ipynb:23
msgid "The molecular Hamiltonian is"
msgstr "분자 해밀톤은"

#: ../../tutorials/01_electronic_structure.ipynb:25
msgid "\\mathcal{H} = - \\sum_I \\frac{\\nabla_{R_I}^2}{M_I} - \\sum_i \\frac{\\nabla_{r_i}^2}{m_e} - \\sum_I\\sum_i  \\frac{Z_I e^2}{|R_I-r_i|} + \\sum_i \\sum_{j>i} \\frac{e^2}{|r_i-r_j|} + \\sum_I\\sum_{J>I} \\frac{Z_I Z_J e^2}{|R_I-R_J|}"
msgstr "\\mathcal{H} = - \\sum_I \\frac{\\nabla_{R_I}^2}{M_I} - \\sum_i \\frac{\\nabla_{r_i}^2}{m_e} - \\sum_I\\sum_i  \\frac{Z_I e^2}{|R_I-r_i|} + \\sum_i \\sum_{j>i} \\frac{e^2}{|r_i-r_j|} + \\sum_I\\sum_{J>I} \\frac{Z_I Z_J e^2}{|R_I-R_J|}"

#: ../../tutorials/01_electronic_structure.ipynb:30
msgid "Because the nuclei are much heavier than the electrons they do not move on the same time scale and therefore, the behavior of nuclei and electrons can be decoupled. This is the Born-Oppenheimer approximation."
msgstr "핵들은 동일한 시간 축척으로 이동하지 않는 전자들보다 훨씬 더 무거운 것이기 때문에, 핵들 및 전자들의 거동은 분리될 수 있다. 이것은 Born-Oppenheimer 근사치이다."

#: ../../tutorials/01_electronic_structure.ipynb:32
msgid "Therefore, one can first tackle the electronic problem with the nuclear coordinates entering only as parameters. The energy levels of the electrons in the molecule can then be found by solving the non-relativistic time independent Schrödinger equation,"
msgstr ""

#: ../../tutorials/01_electronic_structure.ipynb:34
msgid "\\mathcal{H}_{\\text{el}} |\\Psi_{n}\\rangle = E_{n} |\\Psi_{n}\\rangle"
msgstr "\\mathcal{H}_{\\text{el}} |\\Psi_{n}\\rangle = E_{n} |\\Psi_{n}\\rangle"

#: ../../tutorials/01_electronic_structure.ipynb:39
msgid "where"
msgstr "여기서"

#: ../../tutorials/01_electronic_structure.ipynb:41
msgid "\\mathcal{H}_{\\text{el}} = - \\sum_i \\frac{\\nabla_{r_i}^2}{m_e} - \\sum_I\\sum_i  \\frac{Z_I e^2}{|R_I-r_i|} + \\sum_i \\sum_{j>i} \\frac{e^2}{|r_i-r_j|}."
msgstr "\\mathcal{H}_{\\text{el}} = - \\sum_i \\frac{\\nabla_{r_i}^2}{m_e} - \\sum_I\\sum_i  \\frac{Z_I e^2}{|R_I-r_i|} + \\sum_i \\sum_{j>i} \\frac{e^2}{|r_i-r_j|}."

#: ../../tutorials/01_electronic_structure.ipynb:46
msgid "In particular the ground state energy is given by:"
msgstr "특히, 바닥 상태 에너지는 다음과 같다:"

#: ../../tutorials/01_electronic_structure.ipynb:48
msgid "E_0 = \\frac{\\langle \\Psi_0 | H_{\\text{el}} | \\Psi_0 \\rangle}{\\langle \\Psi_0 | \\Psi_0 \\rangle}"
msgstr "E_0 = \\frac{\\langle \\Psi_0 | H_{\\text{el}} | \\Psi_0 \\rangle}{\\langle \\Psi_0 | \\Psi_0 \\rangle}"

#: ../../tutorials/01_electronic_structure.ipynb:53
msgid "where :math:`\\Psi_0` is the ground state of the system."
msgstr "여기서 :math:`\\Psi_0` 는 시스템의 바닥 상태이다."

#: ../../tutorials/01_electronic_structure.ipynb:55
msgid "However, the dimensionality of this problem grows exponentially with the number of degrees of freedom. To tackle this issue we would like to prepare :math:`\\Psi_0` on a quantum computer and measure the Hamiltonian expectation value (or :math:`E_0`) directly."
msgstr "그러나, 이 문제의 차원은 자유도의 수에 따라 기하급수적으로 증가한다. 이러한 문제를 해결하기 위해 우리는 양자 컴퓨터에 :math:`\\Psi_0` 을 준비하고 Hamiltonian 기대값 (또는 :math:`E_0`) 을 직접 측정하고자 한다."

#: ../../tutorials/01_electronic_structure.ipynb:57
msgid "So how do we do that concretely?"
msgstr "그러면 어떻게 구체적으로 표현할 수 있을까?"

#: ../../tutorials/01_electronic_structure.ipynb:69
msgid "Starting from the Hartree-Fock solution"
msgstr "Hartree-Fock 방법으로 시작하기"

#: ../../tutorials/01_electronic_structure.ipynb:71
msgid "A good starting point for solving this problem is the Hartree-Fock (HF) method. This method approximates the N-body problem by N one-body problems where each electron evolves in the mean-field of the others. Classically solving the HF equations is efficient and leads to the exact exchange energy but does not include any electron correlation. Therefore, it is usually a good starting point to which to add correlation."
msgstr "이 문제를 해결하기 위한 좋은 출발점은 HF (Hartree-Fock) 방법이다. 이 방법은 각각의 전자가 다른 전자들의 mean-field에서 변화하는 N개의 1체 문제에 의해 N체 문제를 근사화한다. 고전적으로 HF 방정식을 푸는 것은 효율적이며 정확한 exchange energy로 이어지지만 전자들 사이의 어떠한 상관 관계도 포함하지 않는다. 따라서 이것은 일반적으로 상관 관계를 추가할 수 있는 좋은 시작점이다."

#: ../../tutorials/01_electronic_structure.ipynb:73
msgid "The Hamiltonian can then be re-expressed in the basis of the solutions of the HF method, also called Molecular Orbitals (MOs):"
msgstr "이어서, Hamiltonian은 또한 분자 오비탈 (Molecular Orbitals, MOs)이라고도 불리는 HF 방법의 풀이에 기초하여 다시 표현될 수 있다."

#: ../../tutorials/01_electronic_structure.ipynb:75
msgid "\\hat{H}_{elec}=\\sum_{pq} h_{pq} \\hat{a}^{\\dagger}_p \\hat{a}_q +\n"
"\\frac{1}{2} \\sum_{pqrs} h_{pqrs}  \\hat{a}^{\\dagger}_p \\hat{a}^{\\dagger}_q \\hat{a}_r  \\hat{a}_s"
msgstr "\\hat{H}_{elec}=\\sum_{pq} h_{pq} \\hat{a}^{\\dagger}_p \\hat{a}_q +\n"
"\\frac{1}{2} \\sum_{pqrs} h_{pqrs}  \\hat{a}^{\\dagger}_p \\hat{a}^{\\dagger}_q \\hat{a}_r  \\hat{a}_s"

#: ../../tutorials/01_electronic_structure.ipynb:81
msgid "with the 1-body integrals"
msgstr "일체 적분은 다음과 같고,"

#: ../../tutorials/01_electronic_structure.ipynb:83
msgid "h_{pq} = \\int \\phi^*_p(r) \\left( -\\frac{1}{2} \\nabla^2 - \\sum_{I} \\frac{Z_I}{R_I- r} \\right)   \\phi_q(r)dr"
msgstr "h_{pq} = \\int \\phi^*_p(r) \\left( -\\frac{1}{2} \\nabla^2 - \\sum_{I} \\frac{Z_I}{R_I- r} \\right)   \\phi_q(r)dr"

#: ../../tutorials/01_electronic_structure.ipynb:88
msgid "and 2-body integrals"
msgstr "이체 적분은 다음과 같다"

#: ../../tutorials/01_electronic_structure.ipynb:90
msgid "h_{pqrs} = \\int \\frac{\\phi^*_p(r_1)  \\phi^*_q(r_2) \\phi_r(r_2)  \\phi_s(r_1)}{|r_1-r_2|}dr_1dr_2."
msgstr "h_{pqrs} = \\int \\frac{\\phi^*_p(r_1)  \\phi^*_q(r_2) \\phi_r(r_2)  \\phi_s(r_1)}{|r_1-r_2|}dr_1dr_2."

#: ../../tutorials/01_electronic_structure.ipynb:95
msgid "The MOs (:math:`\\phi_u`) can be occupied or virtual (unoccupied). One MO can contain 2 electrons. However, in what follows we actually work with Spin Orbitals which are associated with a spin up (:math:`\\alpha`) of spin down (:math:`\\beta`) electron. Thus Spin Orbitals can contain one electron or be unoccupied."
msgstr "MOs (:math:`\\phi_u`)는 점유되거나 가상 (점유되지 않은, 비어있는)의 오비탈이 될 수 있다. 하나의 MO는 두 개의 전자를 포함할 수 있다. 그러나 스핀 다운 (:math:`\\beta`)전자의 스핀 업 (:math:`\\alpha`)과 연관된 스핀오비탈 (Spin Orbitals)과 실제로 작업하는 것은 다음과 같다. 따라서, 스핀오비탈은 하나의 전자를 포함하거나 비어있을 수 있다."

#: ../../tutorials/01_electronic_structure.ipynb:97
msgid "Note: when referring to the number of orbitals, we will be using the number of *spatial* orbitals. This refers to any orbital in Cartesian space (whether its a molecular orbital or in another basis does not matter here). Each spatial orbital is then generally split into two *spin* orbitals."
msgstr ""

#: ../../tutorials/01_electronic_structure.ipynb:99
msgid "We now show how to concretely realise these steps with Qiskit."
msgstr "이제 Qiskit 으로 이러한 단계를 구체화하는 방법을 설명한다."

#: ../../tutorials/01_electronic_structure.ipynb:111
msgid "Obtaining an initial Hartree-Fock solution"
msgstr "초기 Hartree-Fock 솔루션 얻기"

#: ../../tutorials/01_electronic_structure.ipynb:113
msgid "Qiskit is interfaced with different classical codes which are able to find the HF solutions. Interfacing between Qiskit and the following codes is already available:"
msgstr "Qiskit은 HF 솔루션을 찾을 수 있는 다양한 고전 코드와 호환된다. Qiskit과 호환되는 사용가능한 코드는 다음과 같다:"

#: ../../tutorials/01_electronic_structure.ipynb:115
msgid "Gaussian"
msgstr "가우시안"

#: ../../tutorials/01_electronic_structure.ipynb:116
msgid "Psi4"
msgstr "Psi4"

#: ../../tutorials/01_electronic_structure.ipynb:117
msgid "PySCF"
msgstr "PySCF"

#: ../../tutorials/01_electronic_structure.ipynb:119
msgid "In the following we set up a PySCF driver, for the hydrogen molecule at equilibrium bond length (0.735 angstrom) in the singlet state and with no charge."
msgstr "다음은 수소 분자를 전하가 없는 단일항 상태(singlet state)의 평형 결합 길이 (0.735 옹스트롬)에 두기 위해 PySCF 드라이버를 설정한다."

#: ../../tutorials/01_electronic_structure.ipynb:149
msgid "Running this driver, will yield an ``ElectronicStructureProblem``, Qiskit Nature's representation of the electronic structure problem which we are interested in solving. For further information about the drivers see https://qiskit.org/documentation/nature/apidocs/qiskit_nature.second_q.drivers.html"
msgstr "이 드라이버를 실행하면 우리가 해결하고자 하는 전자 구조의 문제에 대한 Qiskit Nature의 표현인 ``ElectronicStructureProblem`` 을 얻을 수 있다. 드라이버에 대한 자세한 정보는 https://qiskit.org/documentation/nature/apidocs/qiskit_nature.second_q.drivers.html 에서 볼 수 있다."

#: ../../tutorials/01_electronic_structure.ipynb:196
msgid "The ``ElectronicStructureProblem`` and its components"
msgstr "``ElectronicStructureProblem`` 과 그 구성 요소"

#: ../../tutorials/01_electronic_structure.ipynb:198
msgid "Let us spend some time to understand this problem instance and its components."
msgstr "이 문제의 인스턴스 및 구성요소에 대해 잠시 알아보자."

#: ../../tutorials/01_electronic_structure.ipynb:210
msgid "The ``ElectronicEnergy`` Hamiltonian"
msgstr "``ElectronicEnergy`` 해밀토니언"

#: ../../tutorials/01_electronic_structure.ipynb:212
msgid "The most important aspect is the internal Hamiltonian; in this case an ``ElectronicEnergy`` hamiltonian. This class is able to generate the second-quantized operator from the 1- and 2-body integrals which the classical code has computed for us."
msgstr "가장 중요한 측면은 내부의 해밀토니언(Hamiltonian) 이다. 이 경우에는 ``ElectronicEnergy`` 헤밀토니언(hamiltonian) 이다. 이 클래스는 고전적인 코드가 우리를 위해 계산한 1체 및 2체 적분들로부터 제2양자화된(second-quantization) 연산자를 생성할 수 있다."

#: ../../tutorials/01_electronic_structure.ipynb:214
msgid "**IMPORTANT:** The container class for the integral coefficients (``PolynomialTensor``) requires the 2-body terms to be provided in **physicist order**!"
msgstr "**중요:** 적분 계수 (``PolynomialTensor``) 에 대한 컨테이너 클래스(container class) 에는 2체 용어를 **물리학자 순서**로 제공해야 한다!"

#: ../../tutorials/01_electronic_structure.ipynb:456
msgid "Note, that this is purely the **electronic** Hamiltonian of the system. That means, that the *nuclear repulsion energy* is not included. Instead, Qiskit Nature will add this constant energy offset in a post-processing step, in order to compute the total energy of your system. To learn how to include the nuclear repulsion energy in this operator, please refer to the documentation of the ``ElectronicEnergy`` class `here <https://qiskit.org/documentation/nature/stubs/qiskit_nature.second_q.hamiltonians.ElectronicEnergy.html>`__."
msgstr "이것은 시스템의 순수한 **전자** 해밀토니언이다. 즉, *핵 반발 에너지* 가 포함되어 있지 않다는 것을 의미한다. 대신, Qiskit Nature는 시스템의 총 에너지를 계산하기 위해 이 일정한 에너지 오프셋을 사후 처리 단계에서 추가할 것이다. 이 연산자에 핵 반발 에너지를 포함시키는 방법을 배우려면 ``ElectronicEnergy`` 클래스의 문서 `여기<https://qiskit.org/documentation/nature/stubs/qiskit_nature.second_q.hamiltonians.ElectronicEnergy.html>` 를 참고하면 된다."

#: ../../tutorials/01_electronic_structure.ipynb:504
msgid "More attributes of the ``ElectronicStructureProblem``"
msgstr "더 많은 ``ElectronicStructureProblem`` 객체의 속성(attributes)"

#: ../../tutorials/01_electronic_structure.ipynb:506
msgid "Below we list some additional attributes of our ``problem`` instance:"
msgstr "아래에는 ``problem`` 인스턴스의 몇몇 추가적인 속성이 나열되어 있다."

#: ../../tutorials/01_electronic_structure.ipynb:692
msgid "To learn more about the basis of your problem, please refer to the tutorial on the ```BasisTransformer`` <05_problem_transformers.ipynb>`__."
msgstr "당신의 문제의 기초에 대해 자세히 알아보려면 ```BasisTransformer`` <05_problem_transformers.ipynb>` 튜토리얼을 참고하면 된다."

#: ../../tutorials/01_electronic_structure.ipynb:704
msgid "Additional observables"
msgstr "추가적인 observables"

#: ../../tutorials/01_electronic_structure.ipynb:706
msgid "The ``ElectronicStructureProblem`` also contains additional operator factories, which will generate observables to be evaluated at the ground- and excited-states at the end of your computation."
msgstr "``ElectronicStructureProblem`` 에는 연산이 끝날 때 바닥 상태 및 들뜬 상태에서 분석할 observables를 생성하는 연산자 공장도 추가적으로 포함한다."

#: ../../tutorials/01_electronic_structure.ipynb:892
msgid "For more information about these properties, please refer to `their tutorial <09_properties.ipynb>`__."
msgstr "이러한 특성에 대한 자세한 정보는 `해당 튜토리얼 <09_properties.ipynb>` 에 있다."

#: ../../tutorials/01_electronic_structure.ipynb:904
msgid "Solving the ``ElectronicStructureProblem``"
msgstr "``ElectronicStructureProblem`` 풀기"

#: ../../tutorials/01_electronic_structure.ipynb:906
msgid "In the following, we will compute the ground-state of our problem instance. To learn more about the individual components that go into the ``GroundStateSolver``, please refer to the `ground state tutorial <./03_ground_state_solvers.ipynb>`__."
msgstr "아래에서는 우리의 문제 인스턴스의 바닥 상태를 계산한다. ``GroundStateSolver`` 에 포함되는 개별 구성 요소에 대한 자세한 내용은 `ground state tutorial <./03_ground_state_solvers.ipynb>`__에 있다."

