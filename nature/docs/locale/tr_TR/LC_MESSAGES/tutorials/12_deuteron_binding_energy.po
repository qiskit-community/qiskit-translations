msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-07 21:59+0000\n"
"PO-Revision-Date: 2022-11-07 22:50\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/12_deuteron_binding_energy.po\n"
"X-Crowdin-File-ID: 9875\n"
"Language: tr_TR\n"

#: ../../tutorials/12_deuteron_binding_energy.ipynb:9
msgid "This page was generated from `docs/tutorials/12_deuteron_binding_energy.ipynb`__."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:9
msgid "Binding Energy between proton and neutron in the Deuteron nucleus"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:20
msgid "At the current stage of quantum computing the quantum processors we have available do not yet have error correcting codes implemented and thus still have noise that must be contended with. This noise can adversely impact the results and hence can limit the sort of problems we can currently tackle when, due to the noise, a high level of confidence and precision cannot be expected from the results."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:22
msgid "However, there are some problems which demand only few qubits to be solved, like the computation of the binding energy between the proton and neutron in the Deuteron nucleus `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__. This problem is an example of a scenario where we can achieve good results despite the challenges mentioned earlier."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:34
msgid "Step 1: Importing the packages that we need to tackle the problem"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:69
msgid "Step 2: Defining some functions that we will use"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:80
msgid "Before we start the definition of the Deuteron Hamiltonian, we need to define a utility function implementing the Kronecker delta, which is defined as follows:"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:82
msgid ":math:`\\delta_{n,m} = \\bigg\\{\\begin{array}{c}0, \\ \\textrm{if} \\ n \\neq m \\\\1, \\ \\textrm{if } \\ n = m.\\end{array}`."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:84
msgid "This function appears in the Deuteron Hamiltonian definition given in `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__. Below we have a piece of code that defines the Kronecker delta function."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:115
msgid "In `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__ we can find the following expression for the Deuteron Hamiltonian :math:`H_N = \\sum_{n,m=0}^{N-1}\\langle m|(T+V)|n\\rangle a_{m}^\\dagger a_n`, where :math:`|n\\rangle` and :math:`|m\\rangle` represent quantum states in the harmonic oscillator basis, and :math:`a_m^\\dagger` and :math:`a_n` represent the creation and annihilation operators, respectively."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:117
msgid "To create the code that defines :math:`H_N`, we need the matrix elements of the kinetic and potential energy. Again, we find these expressions in `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__:"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:119
msgid ":math:`\\langle m|T|n\\rangle = \\frac{\\hbar\\omega}{2}\\left[\\left(2n+\\frac{3}{2}\\right)\\delta_{n,m}-\\sqrt{n(n+\\frac{1}{2})}\\delta_{n,m+1}-\\sqrt{(n+1)(n+\\frac{3}{2})}\\delta_{n,m-1}\\right],` :math:`\\langle m|V|n\\rangle = V_0\\delta_{n,0}\\delta_{n,m}.`"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:121
msgid "Where :math:`V_0 = -5.68658111 \\ \\textrm{MeV}` and :math:`\\hbar\\omega = 7 \\ \\textrm{MeV}`. However, the Hamiltonian written in this way cannot be processed directly in a quantum computer, because a quantum computer manipulates qubits through gates based on Pauli matrices. Thus, we need to convert the creation and annihilation operators into Pauli operators. To do that, we can make use of the Jordan-Wigner transformation"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:123
msgid ":math:`a_n^\\dagger \\ \\rightarrow \\ \\frac{1}{2}\\left[\\prod_{j=0}^{n-1}-Z_j\\right](X_n-iY_n),`"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:125
msgid ":math:`a_n \\ \\rightarrow \\ \\frac{1}{2}\\left[\\prod_{j=0}^{n-1}-Z_j\\right](X_n+iY_n).`"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:127
msgid "Fortunately, in Qiskit Nature we have tools to define fermionic operators and to convert this kind of operators into Pauli operators through the Jordan-Wigner transformation. Initially, we use a for loop to construct and store the labels and coefficients in a tuple, and after this, we add the tuple in a list. Each string label and coefficient define a kinetic element :math:`\\langle m|T|n\\rangle` and a potential element :math:`\\langle m|V|n\\rangle` of the Hamiltonian. At the end of the for loop, we have to pass the list with the tuples with labels and coefficients to ``FermionicOp``, in order to create a Hamiltonian in terms of the creation and annihilation operators. We need to rewrite this Hamiltonian in terms of Pauli operators, to do this we use ``JordanWignerMapper()`` and the ``QubitConverter()``. In order to obtain more information about the Qiskit Nature tools, we recommend a reading of the Qiskit Nature documentation `[2] <https://qiskit.org/documentation/nature/>`__."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:185
msgid "Now, we have an idea of how to use some of Qiskit Nature tools to build a Hamiltonian in terms of Pauli operators. However, this is not the end, we need to construct an ansatz through a parameterized quantum circuit and use it in the ``VQE`` to compute the minimum eigenvalue of the Deuteron Hamiltonian (binding energy)."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:197
msgid "Step 3: Using Qiskit tools to calculate the binding energy between proton and neutron in Deuteron nucleus"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:208
msgid "In the previous step, we have defined the functions that will be useful to us in the task of calculating the binding energy between proton and neutron in the Deuteron nucleus. Thus, now it is time to start the process of solving the problem with the tools we built."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:210
msgid "First, we need to initialize some important variables that we will use a lot during this tutorial. These variables can be found in the code cell below."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:233
msgid "The variable ``statevec_sim`` stores a statevector simulator, this kind of simulator works like an ideal quantum circuit statevector simulator. The variable ``qasm_sim`` is used to store the qasm simulator, this kind of simulator works like a noisy quantum circuit simulator. To work a qasm simulator, we need to set how many times we will prepare and measure the quantum state created by a quantum circuit, and with this data we can extract the measurement probability of each computational state."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:244
msgid "Now it is time to create the Hamiltonian, we will begin with :math:`H_1`, that is the simplest form of the deuteron Hamiltonian (:math:`N = 1`). In `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__, the authors calculated the ground-state energy for :math:`N = 1,2,3` and they used those values to extrapolate the energy and try to reach :math:`-2.22 \\ MeV`, the value of the deuteron’s ground-state energy. Here we will create a list to store the Hamiltonians :math:`H_1`, :math:`H_2`, :math:`H_3` and :math:`H_4`, because we will use these Hamiltonians later to calculate the ground-state. To do this, we can do a list comprehension with the function ``create_deuteron_hamiltonian`` that we defined above."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:266
msgid "In reference `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__, we can find the exact expressions for Deuteron Hamiltonian of size N = 1, 2 and 3 as given below."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:268
msgid ":math:`H_1 = 0.218291(Z_0-I_0)`"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:270
msgid ":math:`H_2 = 5.906709I_1\\otimes I_0 + 0.218291I_1\\otimes Z_0 - 6.215Z_1\\otimes I_0 - 2.143304(X_1\\otimes X_0 + Y_1 \\otimes Y_0)`"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:272
msgid ":math:`H_3 = I_2\\otimes H_2 + 9.625(I_2\\otimes I_1\\otimes I_0 - Z_2\\otimes I_1\\otimes I_0) - 3.913119(X_2\\otimes X_1\\otimes I_0 + Y_2\\otimes Y_1\\otimes I_0)`"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:283
msgid "If we want to know if our ``create_deuteron_hamiltonian`` gives us the right result, we have to compare with the expressions presented above. For this purpose, we printed the Hamiltonians generated by the function ``create_deuteron_hamiltonian`` in the cell below."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:442
msgid "By inspection, we can see that our function is giving us the right result for :math:`H_1`, :math:`H_2` and :math:`H_3`. However, we don’t have an expression for :math:`H_4` in `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__, but it is possible to say, by induction, that the result must be correct once the previous results matched with the expressions given in `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:453
msgid "In `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__, the authors worked with ansatze of low depth, because they wanted to compute things on a real quantum device. Those quantum circuits can be found in `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__. As we already discussed in the beginning of this tutorial, the currently available quantum hardware has to work with quantum circuits with low depth to achieve good results, once they still have a significant amount of noise and don’t have quantum error correction implemented."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:456
msgid "We need to define two parameters to build the circuits presented in `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__, :math:`\\theta` (theta) and :math:`\\eta` (eta), which we can do it using ``Parameter()`` as shown in the cell code below."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:478
msgid "Using the parameters defined above and following the instructions to build the circuits presented in `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__, we obtain the following circuits:"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:561
msgid "Unfortunately, in `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__ we can’t find a low-depth circuit for the ansatz for :math:`H_4`. Then, for now we are not going to work with :math:`N = 4`, but later we will return to this problem using ``TwoLocal`` as an ansatz."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:572
msgid "Now, we can store these circuits in the ansatz list for the organization of the tests."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:593
msgid "The rather small size of our generated operators, allows us to use numpy functions (classical methods) to obtain the binding energy for :math:`H_1`, :math:`H_2`, :math:`H_3` and :math:`H_4` through the process of finding the lowest eigenvalue of the Hamiltonian matrices. This task is done in the for loop of the code cell below."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:658
msgid "The results obtained above will be used as our reference values. Thus, we can use them to see if the statevector and the qasm simulators give us good results. In the code cell below we ran the ``VQE`` algorithm for each pair of ``ansatz`` and Hamiltonian, using the statevector simulator and the ``SLSQP`` optimizer."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:725
msgid "We did the same thing as above, but with the QASM simulator and with ``include_custom=True`` (Here ``include_custom=True`` is required because we are using ``Aer`` backend). This ``VQE`` mode makes the QASM simulator behave like a statevector simulator, because there is no shot noise in this method, but it runs faster than the statevector simulator due to its more performant implementation."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:799
msgid "In both scenarios presented above, we can see that our results are in agreement with the reference values obtained by classical methods. We also tested some different options of optimizers provided in Qiskit, because we wanted to know which one behaves better in a qasm simulator with a shot noise scenario. To do this, we make use of the ``callback`` option in ``VQE`` to allow us to store the list of counts and values. With this information it is possible to make a plot to see if the optimizer converges to the value of reference and, if it converges, how fast it does. However, in the code cell below, we are working only with the ``COBYLA`` optimizer for the sake of simplicity."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:877
msgid "Plotting the results obtained with the execution of ``VQE`` on the previous code cell."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:919
msgid "Note that with the quantum circuits given in `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__, we can’t test whether we can reach the reference value for :math:`H_4`, because, as mentioned before, we don’t have an ``ansatz`` for this Hamiltonian. Fortunately, that is not the end for our experiments, because Qiskit provides some functions that create an ``ansatz`` for us. For our purposes, we decided to use the TwoLocal function to build our new ``ansatz``. In the code cell below we used a for loop to create a list with the ``TwoLocal`` ansatz for each Hamiltonian."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:951
msgid "Now we can check if with this new type of ``ansatz``, we can reach the reference values obtained through classical methods. To do this verification, we have to repeat the experiments done previously, but now using the ``ansatz`` defined through the usage of TwoLocal function."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1136
msgid "Using the four different ``TwoLocal`` ansatze, we obtained the following results:"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1179
msgid "Step 4: Calculating the observables expectation values"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1190
msgid "One of our goals in the Qiskit Advocate Mentorship Program project was to show that it is possible to calculate expectation values of some observables of interest, and show how they behave when we vary a parameter in the ``ansatz`` circuit. In our case, the observables of interest were :math:`I_1 \\otimes Z_0`, :math:`Z_1 \\otimes I_0`, :math:`X_1 \\otimes X_0`, :math:`Y_1 \\otimes Y_0` and :math:`H_2`, then we investigate their behavior when the parameter :math:`\\theta` was varied inside the interval :math:`[-\\pi,\\pi]`."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1202
msgid "In Dirac notation (bra-ket), the definition of the expectation value of an observable :math:`\\hat{O}` is equal to `[3] <https://www.feynmanlectures.caltech.edu/III_toc.html>`__ [4]:"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1204
msgid ":math:`\\langle \\hat{O} \\rangle_\\psi = \\langle \\psi(\\vec{\\theta})|\\hat{O}|\\psi(\\vec{\\theta}) \\rangle`."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1206
msgid "The code below defines a function that calculates the expectation values of observables, given a parameterized quantum circuit and a list with some values for these parameters (angles). To build the ``calculate_observables_exp_values`` we use some tools of Qiskit Opflow."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1264
msgid "Calculating the expectation value of the observables of interest using the function defined above:"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1288
msgid "Using the function ``calculate_observables_exp_values`` (we defined it in the Step 2), we got the plots presented below. They showed us that we were able to reproduce the results of `[1] <https://arxiv.org/pdf/1801.03897.pdf>`__."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1359
msgid "Acknowledgment"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1361
msgid "I would like to thank Steve Wood, Soham Pal and Siddhartha Morales for the debates in our meetings during the Qiskit Advocate Mentorship Program 2021 - Fall, they were very important for the construction of this tutorial."
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1373
msgid "References"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1375
msgid "[1] Dumitrescu, Eugene F., et al. “Cloud quantum computing of an atomic nucleus.” Physical review letters 120.21 (2018): 210501. Arxiv version: https://arxiv.org/pdf/1801.03897.pdf"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1377
msgid "[2] Qiskit Nature Documentation. https://qiskit.org/documentation/nature/"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1379
msgid "[3] Feynman, R. P., Robert B. Leighton, and Matthew Sands. “The Feynman Lectures on Physics, Volume III: Quantum Mechanics, vol. 3.” (2010). https://www.feynmanlectures.caltech.edu/III_toc.html"
msgstr ""

#: ../../tutorials/12_deuteron_binding_energy.ipynb:1381
msgid "[4] Expectation value (quantum mechanics) Wikipedia article. https://en.wikipedia.org/wiki/Expectation_value_(quantum_mechanics)"
msgstr ""

