msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-13 14:22+0000\n"
"PO-Revision-Date: 2021-07-14 04:00\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/03_ground_state_solvers.po\n"
"X-Crowdin-File-ID: 9670\n"
"Language: tr_TR\n"

#: ../../tutorials/03_ground_state_solvers.ipynb:13
msgid "Run interactively in jupyter notebook."
msgstr "Jupyter not defterinde etkileşimli olarak çalıştırın."

#: ../../tutorials/03_ground_state_solvers.ipynb:9
msgid "Ground state solvers"
msgstr "Taban enerji seviyesi çözücüleri"

#: ../../tutorials/03_ground_state_solvers.ipynb:21
msgid "Introduction"
msgstr "Giriş"

#: ../../tutorials/03_ground_state_solvers.ipynb:23
msgid "|78856aea880145e6911a29b172b299f2|"
msgstr "|78856aea880145e6911a29b172b299f2|"

#: ../../tutorials/03_ground_state_solvers.ipynb:25
msgid "In this tutorial we are going to discuss the ground state calculation interface of Qiskit Chemistry. The goal is to compute the ground state of a molecular Hamiltonian. This Hamiltonian can be electronic or vibrational. To know more about the preparation of the Hamiltonian, check out the Electronic structure and Vibrational structure tutorials."
msgstr "Bu öğretici derste Qiskit Kimya'nın temel durum hesaplama arayüzünü tartışacağız. Amaç, moleküler bir Hamiltoniyenin temel durumunu hesaplamaktır. Bu Hamiltonyen elektronik veya titreşimli olabilir. Hamiltonian'ın hazırlanması hakkında daha fazla bilgi edinmek için elektronik yapı ve titreşimsel yapı öğretici derslerini inceleyin."

#: ../../tutorials/03_ground_state_solvers.ipynb:27
msgid "The first step is to define the molecular system. In the following we ask for the electronic part of a hydrogen molecule."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:63
msgid "The Solver"
msgstr "Çözümleyici"

#: ../../tutorials/03_ground_state_solvers.ipynb:65
msgid "Then we need to define a solver. The solver is the algorithm through which the ground state is computed."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:67
msgid "Let’s first start with a purely classical example: the NumPy minimum eigensolver. This algorithm exactly diagonalizes the Hamiltonian. Although it scales badly, it can be used on small systems to check the results of the quantum algorithms."
msgstr "Önce tamamen klasik bir örnekle başlayalım: NumPy minimum özçözücü. Bu algoritma Hamiltoniyeni tam olarak köşegenleştirir. Kötü ölçeklenmesine rağmen, kuantum algoritmalarının sonuçlarını kontrol etmek için küçük sistemlerde kullanılabilir."

#: ../../tutorials/03_ground_state_solvers.ipynb:90
msgid "To find the ground state we coul also use the Variational Quantum Eigensolver (VQE) algorithm. The VQE algorithms works by exchanging information between a classical and a quantum computer as depicted in the following figure."
msgstr "Temel enerji durumunu bulmak için Variational Quantum Eigensolver (VQE) algoritmasını da kullanabiliriz. VQE algoritmaları, aşağıdaki şekilde gösterildiği gibi klasik ve kuantum bilgisayar arasında bilgi alışverişi yaparak çalışır."

#: ../../tutorials/03_ground_state_solvers.ipynb:92
msgid "|15c2d0077ba445368cca1cd6ced7bdf9|"
msgstr "|15c2d0077ba445368cca1cd6ced7bdf9|"

#: ../../tutorials/03_ground_state_solvers.ipynb:94
msgid "Let’s initialize a VQE solver."
msgstr "Bir VQE çözümleyiciyi başlatalım."

#: ../../tutorials/03_ground_state_solvers.ipynb:123
msgid "To define the VQE solver one needs two essential elements:"
msgstr "VQE çözümleyici tanımlamak için iki öğeye ihtiyacımız var:"

#: ../../tutorials/03_ground_state_solvers.ipynb:125
msgid "A variational form: here we use the Unitary Coupled Cluster (UCC) ansatz (see for instance [Physical Review A 98.2 (2018): 022322]). Since it is a chemistry standard, a factory is already available allowing a fast initialization of a VQE with UCC. The default is to use all single and double excitations. However, the excitation type (S, D, SD) as well as other parameters can be selected."
msgstr "Değişik bir şekil: burada ansatz (UCC) tekil çiftleştirilmiş kümeyi kullanırız, (örnek olarak [Physical Review A 98.2 (2018): 022322] bakınız). Kimya alakalı bir terim olduğungan, UCC ile bir VQE hızlıca başlamasına izin veren bir fabrika mevcuttur. Varsayılan olan ise tek veya çift az uyarmaların tamamını kullanılmasıdır. Halbuki (S, D, SD) uyarılma türü de diğer parametreler gibi seçilebilir."

#: ../../tutorials/03_ground_state_solvers.ipynb:126
msgid "An initial state: the initial state of the qubits. In the factory used above, the qubits are initialized in the Hartree-Fock (see the electronic structure tutorial) initial state (the qubits corresponding to occupied MOs are :math:`|1\\rangle` and those corresponding to virtual MOs are :math:`|0\\rangle`."
msgstr "Başlangıç hali: Kübitlerin başlangınç hali. Yukarda kullanılan fabrikasında, kübitler Hartree-Fock başlangıç halinde başlatılır (elektronik yapı materyale başvurunuz), (Dolu MO'lara ait kübitler :math:`|1\\rangle` , virtual MO'lara ait olan ise :math:`|0\\rangle` olandır)."

#: ../../tutorials/03_ground_state_solvers.ipynb:127
msgid "The backend: this is the quantum machine on which the right part of the figure above will be performed. Here we ask for the perfect quantum emulator (``statevector_simulator``)."
msgstr "Backend: Yukarıdaki resmin sağ kısmının gerçekleştirileceği kuantum makinesidir. Burada mükemmel (``statevector_simulator``) kuantum emulatörü istiyoruz."

#: ../../tutorials/03_ground_state_solvers.ipynb:129
msgid "One could also use any available ansatz / initial state or even define one’s own. For instance,"
msgstr "Kişi ayrıca mevcut herhangi bir ansatz / başlangıç ​​durumunu kullanabilir veya hatta kendi durumunu tanımlayabilir. Örneğin,"

#: ../../tutorials/03_ground_state_solvers.ipynb:160
msgid "The calculation and results"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:162
msgid "We are now ready to run the calculation."
msgstr "Artık hesaplamayı çalıştırmaya hazırız."

#: ../../tutorials/03_ground_state_solvers.ipynb:247
msgid "We can compare the VQE results to the NumPy exact solver and see that they match."
msgstr "VQE sonuçlarını NumPy tam çözücüyle karşılaştırabilir ve eşleştiğini görebiliriz."

#: ../../tutorials/03_ground_state_solvers.ipynb:330
msgid "Using a filter function"
msgstr "Bir filtre işlevi kullanma"

#: ../../tutorials/03_ground_state_solvers.ipynb:341
msgid "Sometimes the true ground state of the Hamiltonian is not of interest because it lies in a different symmetry sector of the Hilbert space. In this case the NumPy eigensolver can take a filter function to return only the eigenstates with for example the correct number of particles. This is of particular importance in the case of vibrational structure calculations where the true ground state of the Hamiltonian is the vacuum state. A default filter function to check the number of particles is implemented in the different transformations and can be used as"
msgstr "Bazen Hamiltonyen'in gerçek temel durumu ilgi çekici değildir çünkü Hilbert uzayının farklı bir simetri sektöründe yer alır. Bu durumda NumPy özçözücü, örneğin doğru sayıda parçacıkla yalnızca özdurumları döndürmek için bir filtre işlevi alabilir. Hamiltoniyen'in gerçek temel durumunun vakum durumu olduğu titreşim yapısı hesaplamaları durumunda bu özellikle önemlidir. Parçacık sayısını kontrol etmek için varsayılan bir filtre işlevi, farklı dönüşümlerde uygulanır ve şu şekilde kullanılabilir"

