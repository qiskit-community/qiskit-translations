msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-07 19:00+0000\n"
"PO-Revision-Date: 2022-12-23 19:45\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/07_leveraging_qiskit_runtime.po\n"
"X-Crowdin-File-ID: 9678\n"
"Language: tr_TR\n"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:9
msgid "This page was generated from `docs/tutorials/07_leveraging_qiskit_runtime.ipynb`__."
msgstr "Bu sayfa, `docs/tutorials/07_leveraging_qiskit_runtime.ipynb`__ sayfasından oluşturulmuştur."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:9
msgid "Leveraging Qiskit Runtime"
msgstr "Qiskit Runtime'dan Yararlanma"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:20
msgid "Iterative algorithms, such as the Variational Quantum Eigensolver (VQE), traditionally send one batch of circuits (one “job”) to be executed on the quantum device in each iteration. Sending a job involves certain overhead, mainly"
msgstr "Variational Quantum Eigensolver (VQE) gibi yinelemeli algoritmalar, geleneksel olarak, her yinelemede kuantum cihazında yürütülmek üzere bir grup devre (bir “job”) gönderir. Bir iş göndermek, esas olarak belirli bir ek yükü içerir"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:22
msgid "the time to process the requests and send the data (API overhead, usually about 10s)"
msgstr "istekleri işleme ve verileri gönderme zamanı (API genel, genellikle yaklaşık 10sn)"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:23
msgid "the job queue time, that is how long you have to wait before it’s your turn to run on the device (usually about 2min)"
msgstr "iş kuyruğu süresi, cihazda çalışma sıranız gelmeden önce ne kadar beklemeniz gerektiğidir (genellikle yaklaşık 2dk)"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:25
msgid "If we send hundreds of jobs iteratively, this overhead quickly dominates the execution time of our algorithm. Qiskit Runtime allows us to tackle these issues and significantly speed up (especially) iterative algorithms. With Qiskit Runtime, one job does not contain only a batch of circuits but the *entire* algorithm. That means we only experience the API overhead and queue wait *once* instead of in every iteration! You’ll be able to either upload algorithm parameters and delegate all the complexity to the cloud, where your program is executed, or upload your personal algorithm directly."
msgstr "Yüzlerce işi yinelemeli olarak gönderirsek, bu ek yük, algoritmamızın yürütme süresine hızla hakim olur. Qiskit Runtime, bu sorunları çözmemize ve (özellikle) yinelemeli algoritmaları önemli ölçüde hızlandırmamıza olanak tanır. Qiskit Runtime ile bir iş yalnızca bir grup devreyi değil, *tüm* algoritmayı içerir. Bu, her yineleme yerine yalnızca API ek yükü ve kuyrukta bekleme *bir kez* deneyimlediğimiz anlamına gelir! Algoritma parametrelerini yükleyebilir ve tüm karmaşıklığı programınızın yürütüldüğü buluta devredebilir veya kişisel algoritmanızı doğrudan yükleyebilirsiniz."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:28
msgid "For the VQE, the integration of Qiskit Runtime in your existing code is a piece of cake. There is a (almost) drop-in replacement, called ``VQEClient`` for the ``VQE`` class."
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:30
msgid "Let’s see how you can leverage the runtime on a simple chemistry example: Finding the ground state energy of the lithium hydrate (LiH) molecule at a given bond distance."
msgstr "Basit bir kimya örneğinde çalıştırma zamanından nasıl yararlanabildiğinizi görelim: Lityum Hidrat (LiH) molekülünün zemin devlet enerjisini belirli bir bağ mesafesi ile buluyorsunuz."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:42
msgid "*Important: Version requirements*"
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:44
msgid "*This notebook requires a minimum version number of Qiskit Terra 0.22.0 and Qiskit Nature 0.5.0.*"
msgstr "*Bu not defteri, minimum Qiskit Terra 0.22.0 ve Qiskit Nature 0.5.0 sürüm numarasını gerektirir.*"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:56
msgid "Problem specification: LiH molecule"
msgstr "Problem spesifikasyonu: LiH molekülü"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:58
msgid "First, we specify the molecule whose ground state energy we seek. Here, we look at LiH with a bond distance of 2.5 Å."
msgstr "İlk olarak, topraklı devlet enerjisini aradığımız molekülü belirliyoruz. Burada, LiH ' e 2,5 lik bir bağ mesafesi ile bakıyoruz."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:116
msgid "Classical reference solution"
msgstr "Klasik referans çözümü"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:127
msgid "As a reference solution we can solve this system classically with the ``NumPyEigensolver``."
msgstr "Referans çözümü olarak bu sistemi klasik olarak ``NumPYEigensolver`` ile çözebiliriz."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:256
msgid "VQE"
msgstr "VQE"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:258
msgid "To run the VQE we need to select a parameterized quantum circuit acting as ansatz and a classical optimizer. Here we’ll choose a heuristic, hardware efficient ansatz and the SPSA optimizer."
msgstr "VQE'yi çalıştırmak için, ansatz ve klasik bir optimize edici olarak hareket eden bir kuantum devresi seçmemiz gerekiyor. Burada bir buluşsal, donanım tasarruflu ansatz ve SPSA Optimizer'ı seçeceğiz."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:321
msgid "Before executing the VQE in the cloud using Qiskit Runtime, let’s execute a local VQE first."
msgstr "Qiskit Runtime kullanarak bulutta VQE'yi çalıştırmadan önce, yerel bir VQE çalıştıralım."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:457
msgid "Runtime VQE"
msgstr "Çalışma zamanı VQE'si"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:459
msgid "Let’s exchange the eigensolver from a local VQE algorithm to a VQE executed using Qiskit Runtime – simply by exchanging the ``VQE`` class by the ``qiskit_nature.runtime.VQEClient``."
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:461
msgid "First, we’ll have to load a provider to access Qiskit Runtime. **Note:** You have to replace the next cell with your provider."
msgstr "İlk olarak, Qiskit Runtime'a erişmek için bir sağlayıcı yüklemek zorunda olacağız. **Not ** Bir sonraki hücreyi sağlayıcınızla değiştirmeniz gerekir."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:487
msgid "Now we can set up the ``VQEClient``. In this first release, the optimizer must be provided as a dictionary, in future releases you’ll be able to pass the same optimizer object as in the traditional VQE."
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:629
msgid "If we are interested in the development of the energy, the ``VQEClient`` allows access to the history of the optimizer, which contains the loss per iteration (along with the parameters and a timestamp). Note that this only holds for the SPSA and QN-SPSA optimizers. Otherwise you have to use a callback to the ``VQEClient``, similar to the normal ``VQE``."
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:631
msgid "We can access this data via the ``raw_result`` attribute of the ground state solver."
msgstr ""

