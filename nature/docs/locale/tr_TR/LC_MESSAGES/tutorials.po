msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-12 21:08+0000\n"
"PO-Revision-Date: 2021-07-13 01:16\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials.po\n"
"X-Crowdin-File-ID: 9570\n"
"Language: tr_TR\n"

#: ../../tutorials/01_electronic_structure.ipynb:13
#: ../../tutorials/02_vibrational_structure.ipynb:13
#: ../../tutorials/03_ground_state_solvers.ipynb:13
#: ../../tutorials/04_excited_states_solvers.ipynb:13
#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:13
#: ../../tutorials/06_calculating_thermodynamic_observables.ipynb:13
#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:13
msgid "Run interactively in jupyter notebook."
msgstr "Jupyter not defterinde etkileşimli olarak çalıştırın."

#: ../../tutorials/01_electronic_structure.ipynb:9
msgid "Electronic structure"
msgstr "Elektronik yapı"

#: ../../tutorials/01_electronic_structure.ipynb:21
#: ../../tutorials/02_vibrational_structure.ipynb:21
#: ../../tutorials/03_ground_state_solvers.ipynb:21
#: ../../tutorials/04_excited_states_solvers.ipynb:21
#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:21
msgid "Introduction"
msgstr "Giriş"

#: ../../tutorials/01_electronic_structure.ipynb:23
#: ../../tutorials/02_vibrational_structure.ipynb:23
msgid "The molecular Hamiltonian is"
msgstr "Moleküler Hamiltonyen şu şekildedir"

#: ../../tutorials/01_electronic_structure.ipynb:25
#: ../../tutorials/02_vibrational_structure.ipynb:25
msgid "\\mathcal{H} = - \\sum_I \\frac{\\nabla_{R_I}^2}{M_I} - \\sum_i \\frac{\\nabla_{r_i}^2}{m_e} - \\sum_I\\sum_i  \\frac{Z_I e^2}{|R_I-r_i|} + \\sum_i \\sum_{j>i} \\frac{e^2}{|r_i-r_j|} + \\sum_I\\sum_{J>I} \\frac{Z_I Z_J e^2}{|R_I-R_J|}"
msgstr "\\mathcal{H} = - \\sum_I \\frac{\\nabla_{R_I}^2}{M_I} - \\sum_i \\frac{\\nabla_{r_i}^2}{m_e} - \\sum_I\\sum_i  \\frac{Z_I e^2}{|R_I-r_i|} + \\sum_i \\sum_{j>i} \\frac{e^2}{|r_i-r_j|} + \\sum_I\\sum_{J>I} \\frac{Z_I Z_J e^2}{|R_I-R_J|}"

#: ../../tutorials/01_electronic_structure.ipynb:30
#: ../../tutorials/02_vibrational_structure.ipynb:30
msgid "Because the nuclei are much heavier than the electrons they do not move on the same time scale and therefore, the behavior of nuclei and electrons can be decoupled. This is the Born-Oppenheimer approximation."
msgstr "Çekirdekler elektronlardan çok daha ağır oldukları için aynı zaman ölçeğinde hareket etmezler ve bu nedenle çekirdek ve elektronların davranışı ayrılabilir. Bu, Born-Oppenheimer yaklaşımıdır."

#: ../../tutorials/01_electronic_structure.ipynb:32
msgid "Therefore, one can first tackle the electronic problem with nuclear coordinate entering only as parameters. The energy levels of the electrons in the molecule can be found by solving the non-relativistic time independent Schroedinger equation,"
msgstr "Bu nedenle, ilk olarak, yalnızca parametre olarak girilen nükleer koordinat ile elektronik problem çözülebilir. Moleküldeki elektronların enerji seviyeleri, göreli olmayan zamandan bağımsız Schrödinger denklemi çözülerek bulunabilir,"

#: ../../tutorials/01_electronic_structure.ipynb:34
msgid "\\mathcal{H}_{\\text{el}} |\\Psi_{n}\\rangle = E_{n} |\\Psi_{n}\\rangle"
msgstr "\\mathcal{H}_{\\text{el}} |\\Psi_{n}\\rangle = E_{n} |\\Psi_{n}\\rangle"

#: ../../tutorials/01_electronic_structure.ipynb:39
msgid "where"
msgstr "nerede"

#: ../../tutorials/01_electronic_structure.ipynb:41
msgid "\\mathcal{H}_{\\text{el}} = - \\sum_i \\frac{\\nabla_{r_i}^2}{m_e} - \\sum_I\\sum_i  \\frac{Z_I e^2}{|R_I-r_i|} + \\sum_i \\sum_{j>i} \\frac{e^2}{|r_i-r_j|}."
msgstr "\\mathcal{H}_{\\text{el}} = - \\sum_i \\frac{\\nabla_{r_i}^2}{m_e} - \\sum_I\\sum_i  \\frac{Z_I e^2}{|R_I-r_i|} + \\sum_i \\sum_{j>i} \\frac{e^2}{|r_i-r_j|}."

#: ../../tutorials/01_electronic_structure.ipynb:46
msgid "In particular the ground state energy is given by:"
msgstr "Özellikle temel durum enerjisi şu şekilde verilir:"

#: ../../tutorials/01_electronic_structure.ipynb:48
msgid "E_0 = \\frac{\\langle \\Psi_0 | H_{\\text{el}} | \\Psi_0 \\rangle}{\\langle \\Psi_0 | \\Psi_0 \\rangle}"
msgstr "E_0 = \\frac{\\langle \\Psi_0 | H_{\\text{el}} | \\Psi_0 \\rangle}{\\langle \\Psi_0 | \\Psi_0 \\rangle}"

#: ../../tutorials/01_electronic_structure.ipynb:53
msgid "where :math:`\\Psi_0` is the ground state of the system."
msgstr "burada :math:`\\Psi_0` sistemin temel durumudur."

#: ../../tutorials/01_electronic_structure.ipynb:55
msgid "However, the dimensionality of this problem grows exponentially with the number of degrees of freedom. To tackle this issue we would like to prepare :math:`\\Psi_0` on a quantum computer and measure the Hamiltonian expectation value (or :math:`E_0`) directly."
msgstr "Ancak, bu sorunun boyutu, serbestlik derecesi sayısı ile katlanarak büyür. Bu sorunu çözmek için bir kuantum bilgisayarda :math:`\\Psi_0` hazırlamak ve Hamiltonyen beklenti değerini (veya :math:`E_0`) doğrudan ölçmek istiyoruz."

#: ../../tutorials/01_electronic_structure.ipynb:57
msgid "So how do we do that concretely?"
msgstr "Peki bunu somut olarak nasıl yapacağız?"

#: ../../tutorials/01_electronic_structure.ipynb:69
msgid "The Hartree-Fock initial state"
msgstr "Hartree-Fock başlangıç ​​durumu"

#: ../../tutorials/01_electronic_structure.ipynb:71
msgid "A good starting point for solving this problem is the Hartree-Fock (HF) method. This method approximates a N-body problem into N one-body problems where each electron evolves in the mean-field of the others. Classically solving the HF equations is efficient and leads to the exact exchange energy but does not include any electron correlation. Therefore, it is usually a good starting point to start adding correlation."
msgstr "Bu sorunu çözmek için iyi bir başlangıç ​​noktası Hartree-Fock (HF) yöntemidir. Bu yöntem, bir N cisim problemini, her elektronun diğerlerinin ortalama alanında geliştiği N adet tek cisim problemine yaklaştırır. HF denklemlerini klasik olarak çözmek verimlidir ve tam değişim enerjisine yol açar, ancak herhangi bir elektron korelasyonu içermez. Bu nedenle, korelasyon eklemeye başlamak için genellikle iyi bir başlangıç ​​noktasıdır."

#: ../../tutorials/01_electronic_structure.ipynb:73
msgid "The Hamiltonian can then be re-expressed in the basis of the solutions of the HF method, also called Molecular Orbitals (MOs):"
msgstr "Hamiltonyen daha sonra Moleküler Orbitaller (MO'lar) olarak da adlandırılan HF yönteminin çözümleri temelinde yeniden ifade edilebilir:"

#: ../../tutorials/01_electronic_structure.ipynb:75
msgid "\\hat{H}_{elec}=\\sum_{pq} h_{pq} \\hat{a}^{\\dagger}_p \\hat{a}_q +\n"
"\\frac{1}{2} \\sum_{pqrs} h_{pqrs}  \\hat{a}^{\\dagger}_p \\hat{a}^{\\dagger}_q \\hat{a}_r  \\hat{a}_s"
msgstr "\\hat{H}_{elec}=\\sum_{pq} h_{pq} \\hat{a}^{\\dagger}_p \\hat{a}_q +\n"
"\\frac{1}{2} \\sum_{pqrs} h_{pqrs}  \\hat{a}^{\\dagger}_p \\hat{a}^{\\dagger}_q \\hat{a}_r  \\hat{a}_s"

#: ../../tutorials/01_electronic_structure.ipynb:81
msgid "with the 1-body integrals"
msgstr "1-cisim integralleri ile"

#: ../../tutorials/01_electronic_structure.ipynb:83
msgid "h_{pq} = \\int \\phi^*_p(r) \\left( -\\frac{1}{2} \\nabla^2 - \\sum_{I} \\frac{Z_I}{R_I- r} \\right)   \\phi_q(r)"
msgstr "h_{pq} = \\int \\phi^*_p(r) \\left( -\\frac{1}{2} \\nabla^2 - \\sum_{I} \\frac{Z_I}{R_I- r} \\right)   \\phi_q(r)"

#: ../../tutorials/01_electronic_structure.ipynb:88
msgid "and 2-body integrals"
msgstr "ve 2-cisim integraller"

#: ../../tutorials/01_electronic_structure.ipynb:90
msgid "h_{pqrs} = \\int \\frac{\\phi^*_p(r_1)  \\phi^*_q(r_2) \\phi_r(r_2)  \\phi_s(r_1)}{|r_1-r_2|}."
msgstr "h_{pqrs} = \\int \\frac{\\phi^*_p(r_1)  \\phi^*_q(r_2) \\phi_r(r_2)  \\phi_s(r_1)}{|r_1-r_2|}."

#: ../../tutorials/01_electronic_structure.ipynb:95
msgid "The MOs (:math:`\\phi_u`) can be occupied or virtual (unoccupied). One MO can contain 2 electrons. However, in what follows we actually work with Spin Orbitals which are associated with a spin up (:math:`\\alpha`) of spin down (:math:`\\beta`) electron. Thus Spin Orbitals can contain one electron or be unoccupied."
msgstr "MO'lar (:math:`\\phi_u`) dolu veya sanal (boş) olabilir. Bir MO 2 elektron içerebilir. Ancak, bundan sonraki kısımda aslında bir yukarı (:math:`\\alpha`) spin aşağı (:math:`\\beta`) elektronuyla ilişkili olan spin orbitalleri ile çalışıyoruz. Böylece spin orbitalleri bir elektron içerebilir veya boş olabilir."

#: ../../tutorials/01_electronic_structure.ipynb:97
msgid "We now show how to concretely realise these steps with Qiskit."
msgstr "Şimdi bu adımları somut olarak nasıl gerçekleştireceğimizi Qiskit ile gösteriyoruz."

#: ../../tutorials/01_electronic_structure.ipynb:108
msgid "Qiskit is interfaced with different classical codes which are able to find the HF solutions. Interfacing between Qiskit and the following codes is already available: \\* Gaussian \\* Psi4 \\* PyQuante \\* PySCF"
msgstr "Qiskit, HF çözümlerini bulabilen farklı klasik kodlarla arayüzlenmiştir. Qiskit ile takip eden kodlar arasında arayüz oluşturma zaten mevcuttur: \\* Gaussian \\* Psi4 \\* PyQuante \\* PySCF"

#: ../../tutorials/01_electronic_structure.ipynb:110
msgid "In the following we set up a PySCF driver, for the hydrogen molecule at equilibrium bond length (0.735 angstrom) in the singlet state and with no charge."
msgstr "Aşağıda, denge bağ uzunluğundaki (0.735 angstrom) hidrojen molekülü için singlet durumunda ve ücretsiz bir PySCF sürücüsü ayarladık."

#: ../../tutorials/01_electronic_structure.ipynb:135
msgid "For further information about the drivers see https://qiskit.org/documentation/nature/apidocs/qiskit_nature.drivers.html"
msgstr "Sürücüler hakkında daha fazla bilgi için https://qiskit.org/documentation/nature/apidocs/qiskit_nature.drivers.html adresine bakınız"

#: ../../tutorials/01_electronic_structure.ipynb:147
msgid "The mapping from fermions to qubits"
msgstr "Fermiyonlardan kübitlere eşleme"

#: ../../tutorials/01_electronic_structure.ipynb:149
msgid "|0ad8624f075a48508e80bebabad36807|"
msgstr "|0ad8624f075a48508e80bebabad36807|"

#: ../../tutorials/01_electronic_structure.ipynb:151
msgid "The Hamiltonian given in the previous section is expressed in terms of fermionic operators. To encode the problem into the state of a quantum computer, these operators must be mapped to spin operators (indeed the qubits follow spin statistics)."
msgstr "Önceki bölümde verilen Hamiltonyen, fermiyonik operatörler cinsinden ifade edilir. Problemi bir kuantum bilgisayar durumuna kodlamak için, bu operatörlerin spin operatörlerine eşlenmesi gerekir (aslında kübitler spin istatistiklerini takip eder)."

#: ../../tutorials/01_electronic_structure.ipynb:153
msgid "There exist different mapping types with different properties. Qiskit already supports the following mappings: \\* The Jordan-Wigner ‘jordan_wigner’ mapping (über das paulische äquivalenzverbot. In The Collected Works of Eugene Paul Wigner (pp. 109-129). Springer, Berlin, Heidelberg (1993)). \\* The Parity ‘parity’ (The Journal of chemical physics, 137(22), 224109 (2012)) \\* The Bravyi-Kitaev ‘bravyi_kitaev’ (Annals of Physics, 298(1), 210-226 (2002))"
msgstr "Farklı özelliklere sahip farklı eşleme türleri vardır. Qiskit halihazırda aşağıdaki eşlemeleri desteklemektedir: \\* The Jordan-Wigner ‘jordan_wigner’ mapping (über das paulische äquivalenzverbot. In The Collected Works of Eugene Paul Wigner (pp. 109-129). Springer, Berlin, Heidelberg (1993)). \\* The Parity ‘parity’ (The Journal of chemical physics, 137(22), 224109 (2012)) \\* The Bravyi-Kitaev ‘bravyi_kitaev’ (Annals of Physics, 298(1), 210-226 (2002))"

#: ../../tutorials/01_electronic_structure.ipynb:155
msgid "The Jordan-Wigner mapping is particularly interesting as it maps each Spin Orbital to a qubit (as shown on the Figure above)."
msgstr "Jordan-Wigner eşlemesi (yukarıdaki şekilde gösterildiği gibi), her spin orbitali bir kübite eşlediği için özellikle ilginçtir."

#: ../../tutorials/01_electronic_structure.ipynb:157
msgid "Here we set up the Electronic Structure Problem to generate the Second quantized operator and a qubit converter that will map it to a qubit operator."
msgstr "Burada, İkinci nicelenmiş operatörü ve onu bir kübit operatörüne eşleyecek bir kübit dönüştürücüyü oluşturmak için Elektronik Yapı Problemini kurduk."

#: ../../tutorials/01_electronic_structure.ipynb:239
msgid "If we now transform this Hamiltonian for the given driver defined above we get our qubit operator:"
msgstr "Eğer şimdi bu Hamiltonyeni yukarıda tanımlanan sürücü için dönüştürürsek, kübit operatörümüzü elde ederiz:"

#: ../../tutorials/01_electronic_structure.ipynb:309
msgid "In the minimal (STO-3G) basis set 4 qubits are required. We can reduce the number of qubits by using the Parity mapping, which allows for the removal of 2 qubits by exploiting known symmetries arising from the mapping."
msgstr "Minimum (STO-3G) temel setinde 4 kübit gereklidir. Eşlemeden kaynaklanan bilinen simetrilerden yararlanarak 2 kübitin çıkarılmasına izin veren Parite eşlemesini kullanarak kübit sayısını azaltabiliriz."

#: ../../tutorials/01_electronic_structure.ipynb:359
msgid "This time only 2 qubits are needed."
msgstr "Bu sefer sadece 2 kübit gerekiyor."

#: ../../tutorials/01_electronic_structure.ipynb:370
msgid "Now that the Hamiltonian is ready, it can be used in a quantum algorithm to find information about the electronic structure of the corresponding molecule. Check out our tutorials on Ground State Calculation and Excited States Calculation to learn more about how to do that in Qiskit!"
msgstr "Artık Hamiltonian hazır olduğuna göre, karşılık gelen molekülün elektronik yapısı hakkında bilgi bulmak için bir kuantum algoritmasında kullanılabilir. Bunu Qiskit'te nasıl yapacağınız hakkında daha fazla bilgi edinmek için Ground State Hesaplaması ve Excited States Hesaplaması hakkındaki eğitimlerimize göz atın!"

#: ../../tutorials/02_vibrational_structure.ipynb:9
msgid "Vibrational structure"
msgstr "Titreşimli yapı"

#: ../../tutorials/02_vibrational_structure.ipynb:32
msgid "Within the Born-Oppenheimer approximation, a molecular wave function is factorized as a product of an electronic part, which is the solution of the electronic Schroedinger equation, and a vibro-rotational one, which is the solution of the nuclear Schroedinger equation in the potential energy surface (PES) generated by sampling the eigenvalues of the electronic Schroedinger equation for different geometries."
msgstr "Born-Oppenheimer yaklaşımında, bir moleküler dalga fonksiyonu, elektronik Schroedinger denkleminin çözümü ve vibro-rotasyonel olan, nükleer Schroedinger denkleminin potansiyel enerji zeminindeki (PES) elektornik Schroedinger denkleminin farklı geometriler için olan özdeğerlerinin örneklendirilmesiyle oluşturulmuş çözümü olan elektronik parçanın ürünü olarak çarpanlarına ayrılmıştır."

#: ../../tutorials/02_vibrational_structure.ipynb:34
msgid "The nuclear Schroedinger equation is usually solved in two steps, in analogy with its electronic counterpart. A single-particle basis (the basis functions are called, in this case, modals) is obtained either by the harmonic approximation applied to the PES or from a vibrational self-consistent field (VSCF) calculation. Vibrational anharmonic correlations are added a-posteriori with perturbative or variational approaches. The latter include Vibrational Configuration Interaction (VCI) and Vibrational Coupled Cluster (VCC) for highly-accurate anharmonic energies. The main advantage of VCI and VCC over alternative approaches (such as perturbation theories) is that their accuracy can be systematically improved towards the complete basis set limit for a given PES. However, their applicability is limited to small molecules with up to about 10 atoms due to their unfavorable scaling with system size."
msgstr "Nükleer Schrödinger denklemi, elektronik karşılığına benzer şekilde genellikle iki adımda çözülür. Tek parçacık temeli (temel fonksiyonlar, bu durumda modal olarak adlandırılır) ya PES'e uygulanan harmonik yaklaşımla ya da bir titreşimsel kendi kendine tutarlı alan (VSCF) hesaplamasından elde edilir. Titreşimsel anharmonik korelasyonlar, pertürbatif veya varyasyonel yaklaşımlarla a-posteriori olarak eklenir. İkincisi, son derece doğru anharmonik enerjiler için Titreşimsel Yapılandırma Etkileşimi (VCI) ve Titreşimsel Bağlantılı Küme (VCC) içerir. VCI ve VCC'nin alternatif yaklaşımlara (pertürbasyon teorileri gibi) göre ana avantajı, doğruluklarının belirli bir PES için tam temel set limitine doğru sistematik olarak geliştirilebilmesidir. Bununla birlikte, sistem boyutu ile elverişsiz ölçeklenmeleri nedeniyle, uygulanabilirlikleri yaklaşık 10 atoma kadar olan küçük moleküllerle sınırlıdır."

#: ../../tutorials/02_vibrational_structure.ipynb:37
msgid "To tackle the scaling problem we would like to use quantum algorithms."
msgstr "Ölçekleme problemini çözmek için kuantum algoritmalarını kullanmak istiyoruz."

#: ../../tutorials/02_vibrational_structure.ipynb:39
msgid "The nuclear Schroedinger equation is"
msgstr "Nükleer Schrödinger denklemi şu şekildedir"

#: ../../tutorials/02_vibrational_structure.ipynb:41
msgid "\\mathcal{H}_{\\text{vib}} |\\Psi_{n}\\rangle = E_{n} |\\Psi_{n}\\rangle"
msgstr "\\mathcal{H}_{\\text{vib}} |\\Psi_{n}\\rangle = E_{n} |\\Psi_{n}\\rangle"

#: ../../tutorials/02_vibrational_structure.ipynb:46
msgid "The so-called Watson Hamiltonian (neglecting vibro-rotational coupling terms) is"
msgstr "Watson Hamiltonyen (titreşim-dönme kuplaj terimlerinin ihmal edilmesi) olarak adlandırılan bu"

#: ../../tutorials/02_vibrational_structure.ipynb:48
msgid "\\mathcal{H}_\\text{vib}(Q_1, \\ldots, Q_L)\n"
"  = - \\frac{1}{2} \\sum_{l=1}^{L} \\frac{\\partial^2}{\\partial Q_l^2} + V(Q_1, \\ldots, Q_L)"
msgstr "\\mathcal{H}_\\text{vib}(Q_1, \\ldots, Q_L)\n"
"  = - \\frac{1}{2} \\sum_{l=1}^{L} \\frac{\\partial^2}{\\partial Q_l^2} + V(Q_1, \\ldots, Q_L)"

#: ../../tutorials/02_vibrational_structure.ipynb:54
msgid "where :math:`Q_l` are the harmonic mass-weighted normal coordinates."
msgstr "burada :math:`Q_l` harmonik kütle ağırlıklı normal koordinatlardır."

#: ../../tutorials/02_vibrational_structure.ipynb:56
msgid ":math:`\\mathcal{H}_\\text{vib}` must be mapped to an operator that acts on the states of a given set of :math:`N_q` qubits in order to calculate its eigenfunctions on quantum hardware. In electronic structure calculations, the mapping is achieved by expressing the non-relativistic electronic Hamiltonian in second quantization, :nbsphinx-math:`\\textit{i.e.}` by projecting it onto the complete set of antisymmetrized occupation number vectors (ONV) generated by a given (finite) set of orbitals. To encode the vibrational Hamiltonian in an analogous second quantization operators, we expand the potential :math:`V(Q_1, \\ldots, Q_L)` with the :math:`n`-body expansion as follows:"
msgstr "Özfonksiyonlarını bir kuantum donanımı üzerinde hesaplayabilmek için; :math:`\\mathcal{H}_\\text{vib}`in, :math:`N_q` kübitlerinde işleyen bir operatörde haritalanması gerek. Elektronik yapı hesaplamalarında haritalama, göreli olmayan elektronik Hamiltonyen ikinci kuantlaşmasını :nbsphinx-math:`\\textit{i.e.}` verilmiş (sınırlı) bir kümedeki orbitaller tarafından oluşturulmuş antisimetrik dolu sayı vektörleri (ONV) kümesine yansıtarak elde edilir. Titreşimsel Hamiltonyen muadili olan ikinci kuantlaşma seviyesindeki operatörlerde kodlamak için :math:`n`- cisim büyütmesi ile :math:`V(Q_1, \\ldots, Q_L)` i potansiyelini aşağıda gösterildiği gibi genişletiyoruz:"

#: ../../tutorials/02_vibrational_structure.ipynb:59
msgid "V(Q_1, \\ldots, Q_L) = V_0 + \\sum_{l=1}^L V^{[l]}(Q_l)\n"
"  + \\sum_{l<m}^L V^{[l,m]}(Q_l, Q_m) + \\sum_{l<m<n}^L V^{[l,m,n]}(Q_l, Q_m, Q_n) + \\ldots"
msgstr "V(Q_1, \\ldots, Q_L) = V_0 + \\sum_{l=1}^L V^{[l]}(Q_l)\n"
"  + \\sum_{l<m}^L V^{[l,m]}(Q_l, Q_m) + \\sum_{l<m<n}^L V^{[l,m,n]}(Q_l, Q_m, Q_n) + \\ldots"

#: ../../tutorials/02_vibrational_structure.ipynb:65
msgid "where :math:`V_0` is the electronic energy of the reference geometry, the one-mode term :math:`V^{[l]}(Q_l)` represents the variation of the PES upon change of the :math:`l`-th normal coordinate from the equilibrium position. Similarly, the two-body potential :math:`V^{[l,m]}(Q_l, Q_m)` represents the change in the exact PES upon a simultaneous displacement along the :math:`l`-th and :math:`m`-th coordinates. Often, including terms up to three-body in the :math:`L`-body expansion is sufficient to obtain an accuracy of about 1~cm\\ :math:`^{-1}`. We highlight that the many-body expansion of the potential operator defining the Watson Hamiltonian contains arbitrarily high coupling terms. This is a crucial difference compared to the non-relativistic electronic-structure Hamiltonian that contains only pairwise interactions."
msgstr "burada :math:`V_0` referans geometrinin elektronik enerjisidir, tek modlu terim :math:`V^{[l]}(Q_l)`, :math:` PES’in :math:`l` inci normal koordinatı üzerinde denge konumundaki varyasyonu temsil eder. Benzer şekilde, iki cisim potansiyeli :math:`V^{[l,m]}(Q_l, Q_m)`, :math:`l`-th ve :math boyunca aynı anda bir yer değiştirme üzerine tam PES'teki değişikliği temsil eder. :`m`-inci koordinatlar. Genellikle, :math:`L`-gövde genişletmesine üç cisimli terimleri dahil etmek, yaklaşık 1~cm\\ :math:`^{-1}` doğruluk elde etmek için yeterlidir. Watson Hamiltonyen'i tanımlayan potansiyel operatörün çok cisimli genişlemesinin keyfi olarak yüksek birleştirme terimleri içerdiğini vurguluyoruz. Bu, yalnızca ikili etkileşimler içeren göreli olmayan elektronik yapı Hamiltonyen ile karşılaştırıldığında çok önemli bir farktır."

#: ../../tutorials/02_vibrational_structure.ipynb:68
msgid "A flexible second quantization form of the Watson Hamiltonian is obtained within the so-called n-mode representation. Let us assume that each mode :math:`l` is described by a :math:`N_l`-dimensional basis set :math:`S_l` defined as follows:"
msgstr "Watson Hamiltonyenin esnek bir ikinci kuantizasyon formu, n-modu gösterimi içinde elde edilir. Her bir modun :math:`l` bir :math:`N_l` boyutlu temel set :math:`S_l` tarafından aşağıdaki şekilde tanımlandığını varsayalım:"

#: ../../tutorials/02_vibrational_structure.ipynb:70
msgid "\\mathcal{S}_l = \\{ \\phi_1^{(l)} (Q_l) , \\ldots , \\phi_{N_l}^{(l)} (Q_l) \\} \\, ."
msgstr "\\mathcal{S}_l = \\{ \\phi_1^{(l)} (Q_l) , \\ldots , \\phi_{N_l}^{(l)} (Q_l) \\} \\, ."

#: ../../tutorials/02_vibrational_structure.ipynb:75
msgid "The :math:`n`-mode wave function can be expanded in the product basis :math:`\\mathcal{S} = \\otimes_{i=1}^L \\mathcal{S}_i` as the following CI-like expansion:"
msgstr ":math:`n`-mode dalga fonksiyonu ürün bazında genişletilebilir :math:`\\mathcal{S} = \\otimes_{i=1}^L \\mathcal{S}_i` olarak takip eden CI benzeri olarak genişletme:"

#: ../../tutorials/02_vibrational_structure.ipynb:77
msgid "|\\Psi\\rangle = \\sum_{k_1=1}^{N_1} \\cdots \\sum_{k_L=1}^{N_L} C_{k_1,\\ldots,k_L}\n"
"  \\phi_{k_1}^{(1)}(Q_1) \\cdots \\phi_{k_L}^{(L)}(Q_L) \\, ,"
msgstr "|\\Psi\\rangle = \\sum_{k_1=1}^{N_1} \\cdots \\sum_{k_L=1}^{N_L} C_{k_1,\\ldots,k_L}\n"
"  \\phi_{k_1}^{(1)}(Q_1) \\cdots \\phi_{k_L}^{(L)}(Q_L) \\, ,"

#: ../../tutorials/02_vibrational_structure.ipynb:83
msgid "The many-body basis function :math:`\\phi_{k_1}^{(1)}(Q_1) \\cdots \\phi_{k_L}^{(L)}(Q_L)` are encoded within the so-called :math:`n`-mode second quantization as occupation-number vectors (ONVs) as follows:"
msgstr ":math:`\\phi_{k_1}^{(1)}(Q_1) \\cdots \\phi_{k_L}^{(L)}(Q_L)` çok cisim fonksiyonu :math:`n`- modunun ikinci kuantlaşmasında aşağıda gösterildiği gibi doluluk-sayı vektörleri (ONV) olarak kodlanır:"

#: ../../tutorials/02_vibrational_structure.ipynb:85
msgid "\\phi_{k_1}(Q_1) \\cdots \\phi_{k_L}(Q_L)\n"
"                    \\equiv  |0_1 \\cdots 1_{k_1} \\cdots 0_{N_1},\n"
"                                 0_1 \\cdots 1_{k_2} \\cdots 0_{N_2},\n"
"                                 \\cdots ,\n"
"                                 0_1 \\cdots 1_{k_L} \\cdots 0_{N_L}\\rangle \\, ."
msgstr "\\phi_{k_1}(Q_1) \\cdots \\phi_{k_L}(Q_L)\n"
"                    \\equiv  |0_1 \\cdots 1_{k_1} \\cdots 0_{N_1},\n"
"                                 0_1 \\cdots 1_{k_2} \\cdots 0_{N_2},\n"
"                                 \\cdots ,\n"
"                                 0_1 \\cdots 1_{k_L} \\cdots 0_{N_L}\\rangle \\, ."

#: ../../tutorials/02_vibrational_structure.ipynb:94
msgid "The ONV defined above is, therefore, the product of :math:`L` mode-specific ONVs, each one describing an individual mode. Since each mode is described by one and only one basis function, the occupation of each mode-specific ONV is one. From a theoretical perspective, each mode can be interpreted as a distinguishable quasi-particle (defined as phonons in solid-state physics). Distinguishability arises from the fact that the PES is not invariant by permutation of two modes, also in this case unlike the Coulomb interaction between two equal particles. From this perspective, a molecule can be interpreted as a collection of :math:`L` indistinguishable particles that interact through the PES operator."
msgstr "Bu nedenle yukarıda tanımlanan ONV, her biri ayrı bir modu tanımlayan :math:`L' moduna özgü ONV'lerin ürünüdür. Her mod bir ve yalnızca bir temel fonksiyonla tanımlandığından, her moda özgü ONV'nin yerleştiği yer tektir. Teorik bir perspektiften, her mod, ayırt edilebilir bir yarı-quasi-parçacık (katı hal fiziğinde fononlar olarak tanımlandı) olarak yorumlanabilir. Ayırt edilebilirlik, PES'in iki modun permütasyonuyla değişmez olmaması gerçeğinden kaynaklanmaktadır, bu durumda da iki eşit parçacık arasındaki Coulomb etkileşiminden farklı olmasından kaynaklanır. Bu perspektiften, bir molekül, PES operatörü aracılığıyla etkileşime giren :math:'L' ayırt edilemez parçacıkların bir koleksiyonu yani toplanması olarak yorumlanabilir."

#: ../../tutorials/02_vibrational_structure.ipynb:97
msgid "Based on this second-quantization representation we introduce a pair of creation and annihilation operators per mode :math:`l` :nbsphinx-math:`\\textit{and}` per basis function :math:`k_l` defined as:"
msgstr "Bu ikinci kuantlaşma temsiline dayanarak, mod başına bir çift yaratma ve yok etme operatörü sunuyoruz :math:`l` :nbsphinx-math:`\\textit{and}` her temel fonksiyon için :math:`k_l` şu şekilde tanımlanır:"

#: ../../tutorials/02_vibrational_structure.ipynb:99
msgid "\\begin{aligned}\n"
"  a_{k_l}^\\dagger |\\cdots, 0_1 \\cdots 0_{k_l} \\cdots 0_{N_l}, \\cdots\\rangle\n"
"    &=  | \\cdots, 0_1 \\cdots 1_{k_l} \\cdots 0_{N_l}, \\cdots\\rangle \\\\\n"
"  a_{k_l}^\\dagger | \\cdots, 0_1 \\cdots 1_{k_l} \\cdots 0_{N_l}, \\cdots\\rangle &=  0 \\\\\n"
"  a_{k_l} | \\cdots, 0_1 \\cdots 1_{k_l} \\cdots 0_{N_l}, \\cdots\\rangle\n"
"   &= | \\cdots, 0_1 \\cdots 0_{k_l} \\cdots 0_{N_l}, \\cdots\\rangle \\\\\n"
"  a_{k_l} | \\cdots, 0_1 \\cdots 0_{k_l} \\cdots 0_{N_l}, \\cdots\\rangle &=  0 \\\\\n"
"\\end{aligned}"
msgstr "\\begin{aligned}\n"
"  a_{k_l}^\\dagger |\\cdots, 0_1 \\cdots 0_{k_l} \\cdots 0_{N_l}, \\cdots\\rangle\n"
"    &=  | \\cdots, 0_1 \\cdots 1_{k_l} \\cdots 0_{N_l}, \\cdots\\rangle \\\\\n"
"  a_{k_l}^\\dagger | \\cdots, 0_1 \\cdots 1_{k_l} \\cdots 0_{N_l}, \\cdots\\rangle &=  0 \\\\\n"
"  a_{k_l} | \\cdots, 0_1 \\cdots 1_{k_l} \\cdots 0_{N_l}, \\cdots\\rangle\n"
"   &= | \\cdots, 0_1 \\cdots 0_{k_l} \\cdots 0_{N_l}, \\cdots\\rangle \\\\\n"
"  a_{k_l} | \\cdots, 0_1 \\cdots 0_{k_l} \\cdots 0_{N_l}, \\cdots\\rangle &=  0 \\\\\n"
"\\end{aligned}"

#: ../../tutorials/02_vibrational_structure.ipynb:111
#: ../../tutorials/04_excited_states_solvers.ipynb:112
msgid "with"
msgstr "ile"

#: ../../tutorials/02_vibrational_structure.ipynb:113
msgid "\\begin{aligned}\n"
"  \\left[ a_{k_l}^\\dagger, a_{h_m}^\\dagger \\right] &= 0 \\\\\n"
"  \\left[ a_{k_l}, a_{h_m} \\right] &= 0 \\\\\n"
"  \\left[ a_{k_l}^\\dagger, a_{h_m} \\right] &= \\delta_{l,m} \\, , \\delta_{k_l,h_m}\n"
"\\end{aligned}"
msgstr "\\begin{aligned}\n"
"  \\left[ a_{k_l}^\\dagger, a_{h_m}^\\dagger \\right] &= 0 \\\\\n"
"  \\left[ a_{k_l}, a_{h_m} \\right] &= 0 \\\\\n"
"  \\left[ a_{k_l}^\\dagger, a_{h_m} \\right] &= \\delta_{l,m} \\, , \\delta_{k_l,h_m}\n"
"\\end{aligned}"

#: ../../tutorials/02_vibrational_structure.ipynb:122
msgid "The second quantization form is obtained by expressing the potential as"
msgstr "İkinci kuantizasyon formu, potansiyelin şu şekilde ifade edilmesiyle elde edilir"

#: ../../tutorials/02_vibrational_structure.ipynb:124
msgid "\\begin{aligned}\n"
" \\mathcal{H}_\\text{vib}^{SQ} =& \\sum_{l=1}^L\n"
"   \\sum_{k_l,h_l}^{N_l} \\langle \\phi_{k_l} | T(Q_l) + V^{[l]}(Q_l) | \\phi_{h_l} \\rangle a_{k_l}^+ a_{h_l} \\\\\n"
"+& \\sum_{l<m}^L \\sum_{k_l,h_l}^{N_l} \\sum_{k_m,h_m}^{N_m}\n"
"   \\langle \\phi_{k_l} \\phi_{k_m} | V^{[l,m]}(Q_l, Q_m) | \\phi_{h_l} \\phi_{h_m} \\rangle\n"
"   a_{k_l}^+ a_{k_m}^+ a_{h_l} a_{h_m} + \\cdots\n"
"\\end{aligned}"
msgstr "\\begin{aligned}\n"
" \\mathcal{H}_\\text{vib}^{SQ} =& \\sum_{l=1}^L\n"
"   \\sum_{k_l,h_l}^{N_l} \\langle \\phi_{k_l} | T(Q_l) + V^{[l]}(Q_l) | \\phi_{h_l} \\rangle a_{k_l}^+ a_{h_l} \\\\\n"
"+& \\sum_{l<m}^L \\sum_{k_l,h_l}^{N_l} \\sum_{k_m,h_m}^{N_m}\n"
"   \\langle \\phi_{k_l} \\phi_{k_m} | V^{[l,m]}(Q_l, Q_m) | \\phi_{h_l} \\phi_{h_m} \\rangle\n"
"   a_{k_l}^+ a_{k_m}^+ a_{h_l} a_{h_m} + \\cdots\n"
"\\end{aligned}"

#: ../../tutorials/02_vibrational_structure.ipynb:135
msgid "We highlight here the difference between the operators defined here above and the electronic structure one. First, as we already mentioned, the potential contains (in principle) three- and higher-body coupling terms that lead to strings with six (or more) second-quantization operators. Moreover, the Hamiltonian conserves the number of particles for each mode, as can be seen from the fact that the number of creation and annihilation operators for a given mode is the same in each term. Nevertheless, different modes are coupled by two- (and higher) body terms containing SQ operators belonging to different modes :math:`l` and :math:`m`."
msgstr "Burada yukarıda tanımlanan operatörler ile elektronik yapı arasındaki farkı vurguluyoruz. İlk olarak, daha önce bahsettiğimiz gibi, potansiyel (prensipte) altı (veya daha fazla) ikinci nicemleme operatörlü dizilere yol açan üç ve daha yüksek gövdeli birleştirme terimlerini içerir. Ayrıca, Hamiltonian, belirli bir mod için yaratma ve yok etme operatörlerinin sayısının her terimde aynı olması gerçeğinden görülebileceği gibi, her mod için parçacık sayısını korur. Bununla birlikte, farklı kipler, farklı kiplere ait SQ operatörlerini içeren iki (ve daha yüksek) gövde terimleriyle birleştirilir :math:`l` ve :math:`m`."

#: ../../tutorials/02_vibrational_structure.ipynb:138
msgid "Reference: Ollitrault, Pauline J., et al., arXiv:2003.12578 (2020)."
msgstr "Referans: Ollitrault, Pauline J., ve diğerleri, arXiv:2003.12578 (2020)."

#: ../../tutorials/02_vibrational_structure.ipynb:149
msgid "Compute the electronic potential"
msgstr "Elektronik potansiyeli hesaplayın"

#: ../../tutorials/02_vibrational_structure.ipynb:151
msgid "Solving the ESE for different nuclear configurations to obtain the PES function :math:`V(Q_1, \\ldots, Q_L)`. So far Qiskit gives the possibility to approximate the PES with a quartic force field."
msgstr "PES işlevini elde etmek için farklı nükleer konfigürasyonlar için ESE'yi çözme :math:`V(Q_1, \\ldots, Q_L)`. Şimdiye kadar Qiskit, PES'e bir kuartik kuvvet alanı ile yaklaşma imkanı veriyor."

#: ../../tutorials/02_vibrational_structure.ipynb:153
msgid "V(Q_1, \\ldots, Q_L) = \\frac{1}{2}  \\sum_{ij} k_{ij} Q_i Q_j\n"
"                  + \\frac{1}{6}  \\sum_{ijk} k_{ijk} Q_i Q_j Q_k\n"
"                  + \\frac{1}{16} \\sum_{ijkl} k_{ijkl} Q_i Q_j Q_k Q_l"
msgstr "V(Q_1, \\ldots, Q_L) = \\frac{1}{2}  \\sum_{ij} k_{ij} Q_i Q_j\n"
"                  + \\frac{1}{6}  \\sum_{ijk} k_{ijk} Q_i Q_j Q_k\n"
"                  + \\frac{1}{16} \\sum_{ijkl} k_{ijkl} Q_i Q_j Q_k Q_l"

#: ../../tutorials/02_vibrational_structure.ipynb:160
msgid "The advantage of such form for the PES is that the anharmonic force fields (:math:`k_{ij}`, :math:`k_{ijk}`, :math:`k_{ijkl}`) can be calculated by finite-difference approaches. For methods for which the nuclear energy Hessian can be calculated analytically with response theory-based methods (such as HF and DFT), the quartic force field can be calculated by semi-numerical differentiation as:"
msgstr "PES için böyle bir formun avantajı, anharmonik kuvvet alanlarının (:math:`k_{ij}`, :math:`k_{ijk}`, :math:`k_{ijkl}`) sonlu-farklı yaklaşımlar tarafından hesaplanabilmesidir. Nükleer enerji Hessian'ın yanıt teorisine dayalı yöntemlerle (HF ve DFT gibi) analitik olarak hesaplanabildiği yöntemler için, kuartik kuvvet alanı aşağıdaki gibi yarı sayısal türevle hesaplanabilir:"

#: ../../tutorials/02_vibrational_structure.ipynb:162
msgid "k_{ijk} = \\frac{H_{ij}(+\\delta Q_k) - H_{ij}(-\\delta Q_k)}{2\\delta Q_k}"
msgstr "k_{ijk} = \\frac{H_{ij}(+\\delta Q_k) - H_{ij}(-\\delta Q_k)}{2\\delta Q_k}"

#: ../../tutorials/02_vibrational_structure.ipynb:167
msgid "and"
msgstr "ve"

#: ../../tutorials/02_vibrational_structure.ipynb:169
msgid "k_{ijkl} = \\frac{H_{ij}(+\\delta Q_k+\\delta Q_l) - H_{ij}(+\\delta Q_k-\\delta Q_l)\n"
"                    -H_{ij}(-\\delta Q_k+\\delta Q_l) + H_{ij}(-\\delta Q_k+\\delta Q_l)}\n"
"                    {4\\delta Q_k \\delta Q_l}"
msgstr "k_{ijkl} = \\frac{H_{ij}(+\\delta Q_k+\\delta Q_l) - H_{ij}(+\\delta Q_k-\\delta Q_l)\n"
"                    -H_{ij}(-\\delta Q_k+\\delta Q_l) + H_{ij}(-\\delta Q_k+\\delta Q_l)}\n"
"                    {4\\delta Q_k \\delta Q_l}"

#: ../../tutorials/02_vibrational_structure.ipynb:176
msgid "Such numerical procedure is implemented, for instance, in the Gaussian suite of programs."
msgstr "Bu tür sayısal prosedür, örneğin Gaussian programlarının paketinde uygulanmaktadır."

#: ../../tutorials/02_vibrational_structure.ipynb:178
msgid "In practice this can be done with Qiskit using the GaussianForceDriver."
msgstr "Pratikte bu, GaussianForceDriver kullanılarak Qiskit ile yapılabilir."

#: ../../tutorials/02_vibrational_structure.ipynb:215
msgid "Map to a qubit Hamiltonian"
msgstr "Bir kübit Hamiltonyeni haritalanması"

#: ../../tutorials/02_vibrational_structure.ipynb:217
msgid "Now that we have an approximation for the potential, we need to write the Hamiltonian in second quantization. To this end we need to select a modal basis to calculate the one-body integrals :math:`\\langle\\phi_{k_i}| V(Q_i) | \\phi_{h_i} \\rangle`, two-body integrals :math:`\\langle\\phi_{k_i} \\phi_{k_j}| V(Q_i,Q_j) | \\phi_{h_i} \\phi_{h_j} \\rangle`\\ …"
msgstr "Şimdi, mademki potansiyel için bir yaklaşımımız var, Hamiltonyeni ikinci kuantlaşma seviyesinde yazmamız gerekir. Sonunda biz :math:`\\langle\\phi_{k_i}| V(Q_i) | \\phi_{h_i} \\rangle` tek cisimli ve :math:`\\langle\\phi_{k_i} \\phi_{k_j}| V(Q_i,Q_j) | \\phi_{h_i} \\phi_{h_j} \\rangle`\\ … çift cisimli integralleri hesaplamak için bir mod bazı seçmemiz gerekir…"

#: ../../tutorials/02_vibrational_structure.ipynb:219
msgid "In the simplest case, the :math:`\\phi` functions are the harmonic-oscillator eigenfunctions for each mode. The main advantage of this choice is that the integrals of a PES expressed as a Taylor expansion are easy to calculate with such basis. A routine for computing these integrals is implemented in Qiskit."
msgstr "En basit durumda, :math:`\\phi` işlevleri, her mod için harmonik osilatör özfonksiyonlarıdır. Bu seçimin ana avantajı, Taylor açılımı olarak ifade edilen bir PES'in integrallerinin böyle bir temelde hesaplanmasının kolay olmasıdır. Bu integralleri hesaplamak için bir rutin Qiskit'te uygulanmaktadır."

#: ../../tutorials/02_vibrational_structure.ipynb:221
msgid "The bosonic operator, :math:`\\mathcal{H}_\\text{vib}^{SQ}`, is then created and must be mapped to a qubit operator. The direct mapping introduced in the first section of this tutorial can be used is Qiskit as follows:"
msgstr "Bozonik operatör :math:`\\mathcal{H}_\\text{vib}^{SQ}` daha sonra oluşturulur ve bir kübit operatörüyle eşlenmesi gerekir. Bu öğreticinin ilk bölümünde tanıtılan doğrudan eşleme aşağıdaki gibi Qiskit'te kullanılabilir:"

#: ../../tutorials/02_vibrational_structure.ipynb:247
msgid "The Vibrational operator for the problem now reads as"
msgstr "Sorun için titreşim operatörü şimdi şu şekilde okur:"

#: ../../tutorials/02_vibrational_structure.ipynb:401
msgid "In the previous cell we defined a bosonic transformation to express the Hamiltonian in the harmonic modal basis, with 2 modals per mode with the potential truncated at order 2 and the ‘direct’ boson to qubit mapping. The calculation is then ran as:"
msgstr "Önceki hücrede, Hamiltonyeni harmonik mod bazında ifade etmek için, mod başına 2 modlu, potansiyel ikinci sırada kesilen ve ‘direct’ bozonu kübit eşlemeye sahip bir bozonik dönüşüm tanımladık. Hesaplama daha sonra şu şekilde çalıştırılır:"

#: ../../tutorials/02_vibrational_structure.ipynb:560
msgid "To have a different number of modals per mode:"
msgstr "Her durum başına farklı sayıda modellere sahip olmak için:"

#: ../../tutorials/02_vibrational_structure.ipynb:1171
msgid "Now that the Hamiltonian is ready, it can be used in a quantum algorithm to find information about the vibrational structure of the corresponding molecule. Check out our tutorials on Ground State Calculation and Excited States Calculation to learn more about how to do that in Qiskit Nature!"
msgstr "Hamiltonyen artık hazır olduğuna göre, karşılık gelen molekülün titreşim yapısı hakkında bilgi bulmak için bir kuantum algoritmasında kullanılabilir. Qiskit Nature'da bunun nasıl yapılacağı hakkında daha fazla bilgi edinmek için Ground State Hesaplaması ve Uyarılmış Durumlar Hesaplaması hakkındaki eğitici derslerimize göz atın!"

#: ../../tutorials/03_ground_state_solvers.ipynb:9
msgid "Ground state solvers"
msgstr "Taban enerji seviyesi çözücüleri"

#: ../../tutorials/03_ground_state_solvers.ipynb:23
msgid "|0db35da9e3fc45f1a02635ff70ddf8d1|"
msgstr "|0db35da9e3fc45f1a02635ff70ddf8d1|"

#: ../../tutorials/03_ground_state_solvers.ipynb:25
msgid "In this tutorial we are going to discuss the ground state calculation interface of Qiskit Chemistry. The goal is to compute the ground state of a molecular Hamiltonian. This Hamiltonian can be electronic or vibrational. To know more about the preparation of the Hamiltonian, check out the Electronic structure and Vibrational structure tutorials."
msgstr "Bu öğretici derste Qiskit Kimya'nın temel durum hesaplama arayüzünü tartışacağız. Amaç, moleküler bir Hamiltoniyenin temel durumunu hesaplamaktır. Bu Hamiltonyen elektronik veya titreşimli olabilir. Hamiltonian'ın hazırlanması hakkında daha fazla bilgi edinmek için elektronik yapı ve titreşimsel yapı öğretici derslerini inceleyin."

#: ../../tutorials/03_ground_state_solvers.ipynb:27
#: ../../tutorials/04_excited_states_solvers.ipynb:27
msgid "The first step is to define the molecular system. In the following we ask for the electronic part of a hydrogen molecule."
msgstr "İlk adım moleküler sistemi tanımlamaktır. Aşağıdakilerde bir hidrojen molekülünün elektronik kısmını istiyoruz."

#: ../../tutorials/03_ground_state_solvers.ipynb:63
#: ../../tutorials/04_excited_states_solvers.ipynb:62
msgid "The Solver"
msgstr "Çözücü"

#: ../../tutorials/03_ground_state_solvers.ipynb:65
#: ../../tutorials/04_excited_states_solvers.ipynb:64
msgid "Then we need to define a solver. The solver is the algorithm through which the ground state is computed."
msgstr "O zaman bir çözücü tanımlamamız gerekiyor. Çözücü, temel durumun hesaplandığı algoritmadır."

#: ../../tutorials/03_ground_state_solvers.ipynb:67
msgid "Let’s first start with a purely classical example: the NumPy minimum eigensolver. This algorithm exactly diagonalizes the Hamiltonian. Although it scales badly, it can be used on small systems to check the results of the quantum algorithms."
msgstr "Önce tamamen klasik bir örnekle başlayalım: NumPy minimum özçözücü. Bu algoritma Hamiltoniyeni tam olarak köşegenleştirir. Kötü ölçeklenmesine rağmen, kuantum algoritmalarının sonuçlarını kontrol etmek için küçük sistemlerde kullanılabilir."

#: ../../tutorials/03_ground_state_solvers.ipynb:90
msgid "To find the ground state we coul also use the Variational Quantum Eigensolver (VQE) algorithm. The VQE algorithms works by exchanging information between a classical and a quantum computer as depicted in the following figure."
msgstr "Temel enerji durumunu bulmak için Variational Quantum Eigensolver (VQE) algoritmasını da kullanabiliriz. VQE algoritmaları, aşağıdaki şekilde gösterildiği gibi klasik ve kuantum bilgisayar arasında bilgi alışverişi yaparak çalışır."

#: ../../tutorials/03_ground_state_solvers.ipynb:92
msgid "|bb416182bd064762b7b7bbb9b1e03a44|"
msgstr "|bb416182bd064762b7b7bbb9b1e03a44|"

#: ../../tutorials/03_ground_state_solvers.ipynb:94
msgid "Let’s initialize a VQE solver."
msgstr "Bir VQE çözümleyiciyi başlatalım."

#: ../../tutorials/03_ground_state_solvers.ipynb:123
msgid "To define the VQE solver one needs two essential elements:"
msgstr "VQE çözümleyici tanımlamak için iki öğeye ihtiyacımız var:"

#: ../../tutorials/03_ground_state_solvers.ipynb:125
msgid "A variational form: here we use the Unitary Coupled Cluster (UCC) ansatz (see for instance [Physical Review A 98.2 (2018): 022322]). Since it is a chemistry standard, a factory is already available allowing a fast initialization of a VQE with UCC. The default is to use all single and double excitations. However, the excitation type (S, D, SD) as well as other parameters can be selected."
msgstr "Değişik bir şekil: burada ansatz (UCC) tekil çiftleştirilmiş kümeyi kullanırız, (örnek olarak [Physical Review A 98.2 (2018): 022322] bakınız). Kimya alakalı bir terim olduğungan, UCC ile bir VQE hızlıca başlamasına izin veren bir fabrika mevcuttur. Varsayılan olan ise tek veya çift az uyarmaların tamamını kullanılmasıdır. Halbuki (S, D, SD) uyarılma türü de diğer parametreler gibi seçilebilir."

#: ../../tutorials/03_ground_state_solvers.ipynb:126
msgid "An initial state: the initial state of the qubits. In the factory used above, the qubits are initialized in the Hartree-Fock (see the electronic structure tutorial) initial state (the qubits corresponding to occupied MOs are :math:`|1\\rangle` and those corresponding to virtual MOs are :math:`|0\\rangle`."
msgstr "Başlangıç hali: Kübitlerin başlangınç hali. Yukarda kullanılan fabrikasında, kübitler Hartree-Fock başlangıç halinde başlatılır (elektronik yapı materyale başvurunuz), (Dolu MO'lara ait kübitler :math:`|1\\rangle` , virtual MO'lara ait olan ise :math:`|0\\rangle` olandır)."

#: ../../tutorials/03_ground_state_solvers.ipynb:127
msgid "The backend: this is the quantum machine on which the right part of the figure above will be performed. Here we ask for the perfect quantum emulator (``statevector_simulator``)."
msgstr "Backend: Yukarıdaki resmin sağ kısmının gerçekleştirileceği kuantum makinesidir. Burada mükemmel (``statevector_simulator``) kuantum emulatörü istiyoruz."

#: ../../tutorials/03_ground_state_solvers.ipynb:129
msgid "One could also use any available ansatz / initial state or even define one’s own. For instance,"
msgstr "Kişi ayrıca mevcut herhangi bir ansatz / başlangıç ​​durumunu kullanabilir veya hatta kendi durumunu tanımlayabilir. Örneğin,"

#: ../../tutorials/03_ground_state_solvers.ipynb:160
#: ../../tutorials/04_excited_states_solvers.ipynb:167
msgid "The calculation and results"
msgstr "Hesaplama ve sonuçlar"

#: ../../tutorials/03_ground_state_solvers.ipynb:162
msgid "We are now ready to run the calculation."
msgstr "Artık hesaplamayı çalıştırmaya hazırız."

#: ../../tutorials/03_ground_state_solvers.ipynb:247
msgid "We can compare the VQE results to the NumPy exact solver and see that they match."
msgstr "VQE sonuçlarını NumPy tam çözücüyle karşılaştırabilir ve eşleştiğini görebiliriz."

#: ../../tutorials/03_ground_state_solvers.ipynb:330
msgid "Using a filter function"
msgstr "Bir filtre işlevi kullanma"

#: ../../tutorials/03_ground_state_solvers.ipynb:341
msgid "Sometimes the true ground state of the Hamiltonian is not of interest because it lies in a different symmetry sector of the Hilbert space. In this case the NumPy eigensolver can take a filter function to return only the eigenstates with for example the correct number of particles. This is of particular importance in the case of vibrational structure calculations where the true ground state of the Hamiltonian is the vacuum state. A default filter function to check the number of particles is implemented in the different transformations and can be used as"
msgstr "Bazen Hamiltonyen'in gerçek temel durumu ilgi çekici değildir çünkü Hilbert uzayının farklı bir simetri sektöründe yer alır. Bu durumda NumPy özçözücü, örneğin doğru sayıda parçacıkla yalnızca özdurumları döndürmek için bir filtre işlevi alabilir. Hamiltoniyen'in gerçek temel durumunun vakum durumu olduğu titreşim yapısı hesaplamaları durumunda bu özellikle önemlidir. Parçacık sayısını kontrol etmek için varsayılan bir filtre işlevi, farklı dönüşümlerde uygulanır ve şu şekilde kullanılabilir"

#: ../../tutorials/04_excited_states_solvers.ipynb:9
msgid "Excited states solvers"
msgstr "Uyarılmış enerji durumu çözücüleri"

#: ../../tutorials/04_excited_states_solvers.ipynb:23
msgid "|6702d146d3ff42d68fa668be7dbfec57|"
msgstr "|6702d146d3ff42d68fa668be7dbfec57|"

#: ../../tutorials/04_excited_states_solvers.ipynb:25
msgid "In this tutorial we are going to discuss the excited states calculation interface of Qiskit Chemistry. The goal is to compute the excited states of a molecular Hamiltonian. This Hamiltonian can be electronic or vibrational. To know more about the preparation of the Hamiltonian, check out the Electronic structure and Vibrational structure tutorials."
msgstr "Bu eğitici derste, Qiskit Kimya'nın uyarılmış durum hesaplama arayüzünü tartışacağız. Amaç, moleküler bir Hamiltoniyenin uyarılmış durumlarını hesaplamaktır. Bu Hamiltonyen elektronik veya titreşimli olabilir. Hamiltonyenin hazırlanması hakkında daha fazla bilgi edinmek için elektronik yapı ve titreşimsel yapı eğitici derslerini inceleyin."

#: ../../tutorials/04_excited_states_solvers.ipynb:66
msgid "Let’s first start with a purely classical example: the NumPy eigensolver. This algorithm exactly diagonalizes the Hamiltonian. Although it scales badly, it can be used on small systems to check the results of the quantum algorithms. Here, we are only interested to look at eigenstates with a given number of particle. To compute only those states a filter function can be passed to the NumPy eigensolver. A default filter function is already implemented in Qiskit and can be used in this way:"
msgstr "Önce tamamen klasik bir örnekle başlayalım: NumPy özçözücü. Bu algoritma Hamiltoniyeni tam olarak köşegenleştirir. Kötü ölçeklenmesine rağmen, kuantum algoritmalarının sonuçlarını kontrol etmek için küçük sistemlerde kullanılabilir. Burada sadece belirli sayıda parçacık içeren özdurumlara bakmakla ilgileniyoruz. Yalnızca bu durumları hesaplamak için NumPy eigensolver'a bir filtre işlevi iletilebilir. Qiskit'te zaten bir varsayılan filtre işlevi uygulanmıştır ve şu şekilde kullanılabilir:"

#: ../../tutorials/04_excited_states_solvers.ipynb:89
msgid "The excitation energies can also be accessed with the qEOM algorithm [arXiv preprint arXiv:1910.12890 (2019)]. The EOM method finds the excitation energies (differences in energy between the ground state and all :math:`n`\\ th excited states) by solving the following pseudo-eigenvalue problem."
msgstr "Uyarma enerjilerine qEOM algoritmasıyla da erişilebilir [arXiv preprint arXiv:1910.12890 (2019)]. EOM yöntemi, aşağıdaki sözde özdeğer problemini çözerek uyarma enerjilerini (temel durum ile tüm uyarılmış durumlar arasındaki enerji farkları all :math:`n`\\ th excited states ) tarafından bulur."

#: ../../tutorials/04_excited_states_solvers.ipynb:91
msgid "\\begin{pmatrix}\n"
"    \\text{M} & \\text{Q}\\\\\n"
"    \\text{Q*} & \\text{M*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}\n"
"= E_{0n}\n"
"\\begin{pmatrix}\n"
"    \\text{V} & \\text{W}\\\\\n"
"    -\\text{W*} & -\\text{V*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}"
msgstr "\\begin{pmatrix}\n"
"    \\text{M} & \\text{Q}\\\\\n"
"    \\text{Q*} & \\text{M*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}\n"
"= E_{0n}\n"
"\\begin{pmatrix}\n"
"    \\text{V} & \\text{W}\\\\\n"
"    -\\text{W*} & -\\text{V*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}"

#: ../../tutorials/04_excited_states_solvers.ipynb:114
msgid "M_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger},\\hat{\\text{H}}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"
msgstr "M_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger},\\hat{\\text{H}}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"

#: ../../tutorials/04_excited_states_solvers.ipynb:119
msgid "Q_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{H}}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"
msgstr "Q_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{H}}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"

#: ../../tutorials/04_excited_states_solvers.ipynb:124
msgid "V_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"
msgstr "V_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"

#: ../../tutorials/04_excited_states_solvers.ipynb:129
msgid "W_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_\\alpha}^{(\\alpha)})^{\\dagger}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"
msgstr "W_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_\\alpha}^{(\\alpha)})^{\\dagger}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"

#: ../../tutorials/04_excited_states_solvers.ipynb:134
msgid "Although the previous equation can be solved classically, each matrix element must be measured on the quantum computer with the corresponding ground state. To use the qEOM as a solver in Qiskit, we have to define a ground state calculation first, providing to the algorithm information on how to find the ground state. With this the qEOM solver can be initialized:"
msgstr "Önceki denklem klasik olarak çözülebilse de, her matris elemanı, karşılık gelen temel durum ile kuantum bilgisayarda ölçülmelidir. qEOM'u Qiskit'te bir çözücü olarak kullanmak için, önce algoritmaya temel durumun nasıl bulunacağına dair bilgi sağlayan bir temel durum hesaplaması tanımlamamız gerekir. Bununla qEOM çözücü başlatılabilir:"

#: ../../tutorials/04_excited_states_solvers.ipynb:169
msgid "The results are computed and printed"
msgstr "Sonuçlar hesaplanır ve yazdırılır"

#: ../../tutorials/04_excited_states_solvers.ipynb:376
msgid "One can see from these results that one state is missing from the NumPy results. The reason for this is because the spin is also used as a filter and only singlet states are shown. In the following we use a custom filter function to check consistently our results and only filter out states with incorrect number of particle (in this case the number of particle is 2)."
msgstr "Bu sonuçlardan NumPy sonuçlarında bir durumun eksik olduğu görülebilir. Bunun nedeni spinin de filtre olarak kullanılması ve sadece singlet durumlarının gösterilmesidir. Aşağıda, sonuçlarımızı tutarlı bir şekilde kontrol etmek için özel bir filtre işlevi kullanıyoruz ve yalnızca yanlış sayıda parçacık içeren durumları filtreliyoruz (bu durumda parçacık sayısı 2'dir)."

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:9
msgid "Sampling the potential energy surface"
msgstr "Potansiyel enerji yüzeyinin örneklenmesi"

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:23
msgid "This interactive notebook demonstrates how to utilize the Potential Energy Surface (PES) samplers algorithm of qiskit chemistry to generate the dissociation profile of a molecule. We use the Born-Oppenhemier Potential Energy Surface (BOPES)and demonstrate how to exploit bootstrapping and extrapolation to reduce the total number of function evaluations in computing the PES using the Variational Quantum Eigensolver (VQE)."
msgstr "Bu etkileşimli defter, bir molekülün ayrışma profilini oluşturmak için qiskit kimyasının Potansiyel Enerji Yüzeyi (PES) örnekleyici algoritmasının nasıl kullanılacağını gösterir. Biz Born-Oppenhemier Potansiyel Enerji Yüzeyini (BOPES) kullanıyoruz ve Variational Quantum Eigensolver (VQE) kullanarak PES'in hesaplanmasında toplam fonksiyon değerlendirme sayısını azaltmak için önyükleme ve ekstrapolasyondan nasıl yararlanılacağını gösteriyoruz."

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:69
msgid "Here, we use the H2 molecule as a model system for testing."
msgstr "Burada, test için bir model sistem olarak H2 Hidrojen molekülünü kullanıyoruz."

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:127
msgid "Make a perturbation to the molecule along the absolute_stretching dof"
msgstr "Absolute_streching dof boyunca molekülü pertübe edin"

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:174
msgid "Calculate bond dissociation profile using BOPES Sampler"
msgstr "BOPES örneklemesini kullanarak bağ ayrışma profilini hesaplayın"

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:176
msgid "Here, we pass the molecular information and the VQE to a built-in type called the BOPES Sampler. The BOPES Sampler allows the computation of the potential energy surface for a specified set of degrees of freedom/points of interest."
msgstr "Burada moleküler bilgiyi ve VQE'yi BOPES Sampler adı verilen yerleşik bir türe aktarıyoruz. BOPES Sampler, belirli bir serbestlik derecesi/ilgi noktaları kümesi için potansiyel enerji yüzeyinin hesaplanmasına izin verir."

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:188
msgid "First we compare no bootstrapping vs bootstrapping"
msgstr "İlk önyükleme olmayan ile önyükleme olanı kıyaslıyoruz"

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:190
msgid "Bootstrapping the BOPES sampler involves utilizing the optimal variational parameters for a given degree of freedom, say r (ex. interatomic distance) as the initial point for VQE at a later degree of freedom, say r + :math:`\\epsilon`. By default, if boostrapping is set to True, all previous optimal parameters are used as initial points for the next runs."
msgstr "BOPES örnekleyicisinin önyüklenmesi, belirli bir serbestlik derecesi için optimal varyasyon parametrelerinin kullanılmasını içerir, örneğin r (ör. atomlar arası mesafe), daha sonraki bir serbestlik derecesinde VQE için başlangıç ​​noktası olarak, diyelim ki r + :math:`\\epsilon`. Varsayılan olarak, yükseltme \"doğru\" olarak ayarlanırsa, önceki tüm optimal parametreler sonraki çalıştırmalar için başlangıç ​​noktaları olarak kullanılır."

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:258
msgid "Compare to classical eigensolver"
msgstr "Klasik eigensolver ile karşılaştırın"

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:292
#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:494
msgid "Plot results"
msgstr "Taslak sonuçları"

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:350
#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:577
msgid "Compare number of evaluations"
msgstr "Değerlendirme sayısını karşılaştırın"

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:416
msgid "Extrapolation"
msgstr "Sonuçların genişletilmesi"

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:418
msgid "Here, an extrapolator added that will try to fit each (param,point) set to some specified function and suggest an initial parameter set for the next point (degree of freedom)."
msgstr "Burada, her (param,point) setini belirli bir fonksiyona sığdırmaya çalışacak ve bir sonraki nokta (serbestlik derecesi) için bir başlangıç ​​parametre seti önerecek bir ekstrapolatör eklendi."

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:420
msgid "Extrapolator is based on an external extrapolator that sets the ‘window’, that is, the number of previous points to use for extrapolation, while the internal extrapolator proceeds with the actual extrapolation."
msgstr "Ekstrapolatör, ‘window’, yani ekstrapolasyon için kullanılacak önceki noktaların sayısını ayarlayan harici bir ekstrapolatöre dayanırken, dahili ekstrapolatör gerçek ekstrapolasyonla ilerler."

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:421
msgid "In practice, the user sets the window by specifying an integer value to num_bootstrap - which is also the number of previous points to use for bootstrapping. Additionally, the external extrapolator defines the space within how to extrapolate - here PCA, clustering and the standard window approach."
msgstr "Pratikte, kullanıcı, önyükleme için kullanılacak önceki noktaların sayısı olan num_bootstrap için bir tamsayı değeri belirterek pencereyi ayarlar. Ek olarak, harici ekstrapolatör, uzayı nasıl tahmin edileceğini tanımlar - burada PCA, kümeleme ve standart pencere yaklaşımı."

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:423
msgid "In practice, if no extrapolator is defined and bootstrapping is True, then all previous points will be bootstrapped. If an extrapolator list is defined and no points are specified for bootstrapping, then the extrapolation will be done based on all previous points."
msgstr "Pratikte, eğer herhangi bir ekstrapolatör tanımlanmadıysa ve önyükleme doğru ise, önceki tüm noktalar önyüklenir. Bir ekstrapolatör listesi tanımlanmışsa ve önyükleme için hiçbir nokta belirtilmemişse, o zaman ekstrapolasyon önceki tüm noktalara dayalı olarak yapılacaktır."

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:434
msgid "Window Extrapolator: An extrapolator which wraps another extrapolator, limiting the internal extrapolator’s ground truth parameter set to a fixed window size"
msgstr "Pencere Ekstrapolatörü: Başka bir ekstrapolatörü saran, dahili ekstrapolatörün kesinlik parametre setini sabit bir pencere boyutuna sınırlayan bir ekstrapolatör"

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:435
msgid "PCA Extrapolator: A wrapper extrapolator which reduces the points’ dimensionality with PCA, performs extrapolation in the transformed pca space, and untransforms the results before returning."
msgstr "PCA Ekstrapolatörü: Noktaların PCA ile boyutsallığını azaltan, dönüştürülmüş pca uzayında ekstrapolasyon gerçekleştiren ve geri dönmeden önce sonuçları dönüştürmeyen bir sarmalayıcı ekstrapolatör."

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:436
msgid "Sieve Extrapolator: A wrapper extrapolator which performs an extrapolation, then clusters the extrapolated parameter values into two large and small clusters, and sets the small clusters’ parameters to zero."
msgstr "Sieve Ekstrapolatörü: Bir ekstrapolasyon gerçekleştiren, daha sonra ekstrapolasyonlu parametre değerlerini iki büyük ve küçük kümede kümeleyen ve küçük kümelerin parametrelerini sıfıra ayarlayan bir sarmalayıcı ekstrapolatör."

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:437
msgid "Polynomial Extrapolator: An extrapolator based on fitting each parameter to a polynomial function of a user-specified degree."
msgstr "Polinom Ekstrapolatörü: Her parametrenin kullanıcı tarafından belirlenen derecede bir polinom fonksiyonuna uydurulmasına dayanan bir ekstrapolatördür."

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:438
msgid "Differential Extrapolator: An extrapolator based on treating each param set as a point in space, and performing regression to predict the param set for the next point. A user-specified degree also adds derivatives to the values in the point vectors which serve as features in the training data for the linear regression."
msgstr "Diferansiyel Ekstrapolatörü: Her parametreyi bir alanda nokta olarak kabul etmeye ve sonraki noktanınki parametre setini tahmin etmek için gerileme yapmaya dayalı olan bir ektrapolatördür. Belirli bir kullanıcının derecesi nokta vektörlerinin değerlerine doğrusal regresyon için deneme verilerinde özellikler olarak çalışan türevlerini ekler."

#: ../../tutorials/05_Sampling_potential_energy_surfaces.ipynb:450
msgid "Here we test two different extrapolation techniques"
msgstr "Burada iki farklı ekstrapolasyon tekniğini test ediyoruz"

#: ../../tutorials/06_calculating_thermodynamic_observables.ipynb:9
msgid "Calculating Thermodynamics Observables with a quantum computer"
msgstr "Bir kuantum bilgisayarıyla termodinamik gözlemlenebilirlikleri hesaplama"

#: ../../tutorials/06_calculating_thermodynamic_observables.ipynb:53
msgid "A preliminary draft with more information related to this tutorial can be found in preprint: Stober et al, arXiv 2003.02303 (2020)"
msgstr "Bu eğitim ile ilgili daha fazla bilgi içeren bir ön taslak şu preprintte bulunabilir: Stober et al, arXiv 2003.02303 (2020)"

#: ../../tutorials/06_calculating_thermodynamic_observables.ipynb:65
msgid "Calculation of the Born Oppenheimer Potential Energy Surface (BOPES)"
msgstr "Born Oppenheimer Potansiyel Enerjinin yüzeyinin Hesaplanması (BOPES)"

#: ../../tutorials/06_calculating_thermodynamic_observables.ipynb:76
msgid "To compute thermodynamic observables we begin with single point energy calculation which calculates the wavefunction and charge density and therefore the energy of a particular arrangement of nuclei. Here we compute the Born-Oppenheimer potential energy surface of a hydrogen molecule, as an example, which is simply the electronic energy as a function of bond length."
msgstr "Termodinamik gözlemlerini hesaplamak için dalga fonksiyonunu ve şarj yoğunluğunu ve bununla birlikte belirli bir çekirdek düzenini hesaplayan tek nokta enerjisi hesaplamasıyla başlıyoruz. Burada, örnek olarak basitçe bağ uzunluğu ile elektronik enerji fonksiyonu olan hidrojen molekülünün Born-Oppenheimer potansiyel enerjinin yüzeyini ölçüyoruz."

#: ../../tutorials/06_calculating_thermodynamic_observables.ipynb:253
msgid "Calculation of the molecular Vibrational Energy levels"
msgstr "Moleküler titreşimli enerji sevilerinin hesaplaması"

#: ../../tutorials/06_calculating_thermodynamic_observables.ipynb:265
msgid "The Born-Oppeheimer approximation removes internuclear vibrations from the molecular Hamiltonian and the energy computed from quantum mechanical ground-state energy calculations using this approximation contain only the electronic energy. Since even at absolute zero internuclear vibrations still occur, a correction is required to obtain the true zero-temperature energy of a molecule. This correction is called the zero-point vibrational energy (ZPE), which is computed by summing the contribution from internuclear vibrational modes. Therefore, the next step in computing thermodynamic observables is determining the vibrational energy levels. This can be done by constructing the Hessian matrix based on computed single point energies close to the equilibrium bond length. The eigenvalues of the Hessian matrix can then be used to determine the vibrational energy levels and the zero-point vibrational energy"
msgstr "Born-Oppenheimer yaklaşımı moleküler Hamiltonian'dan gelen nükleer arası titreşimlerini ve kuantum mekaniklik taban enerji seviyesinin hesaplanan enejisini kaldırır, bu yaklaşımı kullanıldığında sadece elektronik enerjisini tutar. Madem ki nğkleer arası titreşimleri mutlak sıfırda bile meydana geliyor, Bir molekülün gerçek sıfır sıcaklığının enerjisini elde etmek için bir düzeltme gerekiyor. Nükleer arası titreşimsel modlarından gelen katkılarının toplanmasıyla hesaplanan bu düzeltme (ZPE) sıfır nokta titreşimsel enerji diye adlandırılıyor. Bu nedenle termodinamik gözlemlerinin hesaplanmasında sonraki adım, titreşimsel enerji seviyelerinin belirtmektir. Bu da bağ uzunluğunun dengesine yakın hesaplanmış tek nokta enerjilerine dayalı olan Hessian matrisini oluşturarak yapılabilir. Hessian matrisinin özvektörleri, bu takdirde, titreşimsel enerji sevilerini ve titreşimsel sıfır nokta enerjisini belirtmek için kullanılabilirler"

#: ../../tutorials/06_calculating_thermodynamic_observables.ipynb:268
msgid ":nbsphinx-math:`\\begin{equation} {\\rm ZPE} = \\frac{1}{2}\\, \\sum_i ^M \\nu_i \\, , \\end{equation}` with :math:`\\nu_i` being the vibrational frequencies, :math:`M = 3N − 6` or :math:`M = 3N − 5` for non-linear or linear molecules, respectively, and :math:`N` is number of the particles."
msgstr "titreşim frekansları olarak :math:`\\nu_i` ile :nbsphinx-math:`\\begin{equation} {\\rm ZPE} = \\frac{1}{2}\\, \\sum_i ^M \\nu_i \\, , \\end{equation}`, lineer ve lineer olmayan moleküler için sırasıyla :math:`M = 3N − 6` or :math:`M = 3N − 5`, ve parçacıkların miktarı olarak :math:`N`."

#: ../../tutorials/06_calculating_thermodynamic_observables.ipynb:279
msgid "Here we fit a “full” energy surface using a 1D spline potential and use it to evaluate molecular vibrational energy levels."
msgstr "Burada 1 boyut spline potansiyel kullanarak “full” bir enerji yüzeyini uyduruyor ve onu Moleküler titreşimsel enerji seviyelerini değerlendirmek için kullanırız."

#: ../../tutorials/06_calculating_thermodynamic_observables.ipynb:326
msgid "Create a partition function for the calculation of heat capacity"
msgstr "Isı sığasının hesaplanması için bölüşüm fonksiyonunu oluşturuyoruz"

#: ../../tutorials/06_calculating_thermodynamic_observables.ipynb:337
msgid "The partition function for a molecule is the product of contributions from translational, rotational, vibrational, electronic, and nuclear degrees of freedom. Having the vibrational frequencies, now we can obtain the vibrational partition function :math:`q_{\\rm vibration}` to compute the whole molecular partition function :nbsphinx-math:`\\begin{equation} q_{\\rm vibration} = \\prod_{i=1} ^M \\frac{\\exp\\,(-\\Theta_{\\nu_i}/2T)}{1-\\exp\\,(-\\Theta_{\\nu_i}/2T} \\, . \\end{equation}` Here :math:`\\Theta_{\\nu_i}= h\\nu_i/k_B`, :math:`T` is the temperature and :math:`k_B` is the Boltzmann constant."
msgstr "Bir molekülün bölüşüm fonksiyonu, ötelemeli, rotasyonel, titreşimsel, elektronik ve nükleer serbestlik derecelerinin katkısının sonucudur. Titreşimsel frekanslarını elde ederek, şimdi biz :nbsphinx-math:`\\begin{equation} q_{\\rm vibration} = \\prod_{i=1} ^M \\frac{\\exp\\,(-\\Theta_{\\nu_i}/2T)}{1-\\exp\\,(-\\Theta_{\\nu_i}/2T} \\, moleküler bölüşüm fonksiyonunun tamamını hesaplamak için :math:`q_{\\rm vibration}` olan titreşimsel bölüşüm fonksiyonunu elde edebiliriz. \\end{equation}` burada :math:`\\Theta_{\\nu_i}= h\\nu_i/k_B`, :math:`T` sıcaklık oluyor ve :math:`k_B` Boltzmann sabitidir."

#: ../../tutorials/06_calculating_thermodynamic_observables.ipynb:341
msgid "The single-point energy calculations and the resulting partition function can be used to calculate the (constant volume or constant pressure) heat capacity of the molecules. The constant volume heat capacity, for example, is given by"
msgstr "Tek nokta enerji hesaplamalarını ve bölüşüm fonksiyonunun sonucunu molekülerin ısı sığasını (sabit hacim veya sabit basınç) hesaplamak için kullanılabilir. Isı sığasının sabit hacim, örnek olarak, bu şekilde veriliyor"

#: ../../tutorials/06_calculating_thermodynamic_observables.ipynb:343
msgid ":nbsphinx-math:`\\begin{equation} C_v = \\left.\\frac{\\partial U}{\\partial T}\\right|_{N,V}\\, , \\qquad {\\rm with} \\quad U=k_B T^2 \\left.\\frac{\\partial {\\rm ln} Q}{\\partial T}\\right|_{N,V} . \\end{equation}`"
msgstr "\\begin{equation}\n"
"C_v = \\left.\\frac{\\partial U}{\\partial T}\\right|_{N,V}\\, ,\n"
"\\qquad\n"
"{\\rm with} \\quad\n"
"U=k_B T^2 \\left.\\frac{\\partial {\\rm ln} Q}{\\partial T}\\right|_{N,V} .\n"
"\\end{equation}"

#: ../../tutorials/06_calculating_thermodynamic_observables.ipynb:350
msgid ":math:`U` is the internal energy, :math:`V` is the volume and :math:`Q` is the partition function."
msgstr ":math:`U` entegral enerji, :math:`V` hacim ve :math:`Q` bölüşüm fonksiyonudur."

#: ../../tutorials/06_calculating_thermodynamic_observables.ipynb:361
msgid "Here we illustrate the simplest usage of the partition function, namely creating a Thermodynamics object to compute properties like the constant pressure heat capacity defined above."
msgstr "Burada bölüşüm fonksiyonunun en basit kullanışını göstermiş oluyoruz, yani yukarıda tanımlanan ısı sığasının sabit basıncı gibi özellikleri hesaplamak için termodinamik bir nesne oluşturuyoruz."

#: ../../tutorials/06_calculating_thermodynamic_observables.ipynb:410
msgid "Here we demonstrate how to access particular components (the rotational part) of the partition function, which in the H2 case we can further split to para-hydrogen and ortho-hydrogen components."
msgstr "Burada bölüşüm fonksiyonunun belirli bileşenlere (rotasyonel kısmına) nasıl giriş yapabileceğimizi gösteriyoruz, H2 durumunda da biz para-hidrojen ve orto-hidrojen bileşenler olarak ayırabiliriz."

#: ../../tutorials/06_calculating_thermodynamic_observables.ipynb:433
msgid "We will now plot the constant volume heat capacity (of the rotational part) demonstrating how we can call directly the functions in the ‘thermodynamics’ module, providing a callable object for the partition function (or in this case its rotational component). Note that in the plot we normalize the plot dividing by the universal gas constant R (Avogadro’s number times Boltzman’s constant) and we use crossed to compare with experimental data found in literature."
msgstr "Şimdi, 'thermodynamics' modülündeki fonksiyonları doğrudan nasıl çağırabileceğimizi gösteren sabit hacim ısı kapasitesini (dönel parçanın) çizeceğiz, bölme fonksiyonu (veya bu durumda onun dönme bileşeni) için çağrılabilir bir nesne sağlayarak. Grafikte, evrensel gaz sabiti R (Avogadro sayısı çarpı Boltzman sabiti) ile bölen grafiği normalleştirdiğimizi ve literatürde bulunan deneysel verilerle karşılaştırmak için crossed kullandığımızı unutmayın."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:9
msgid "Leveraging Qiskit Runtime"
msgstr "Qiskit Runtime'dan Yararlanma"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:20
msgid "Iterative algorithms, such as the Variational Quantum Eigensolver (VQE), traditionally send one batch of circuits (one “job”) to be executed on the quantum device in each iteration. Sending a job involves certain overhead, mainly"
msgstr "Variational Quantum Eigensolver (VQE) gibi yinelemeli algoritmalar, geleneksel olarak, her yinelemede kuantum cihazında yürütülmek üzere bir grup devre (bir “job”) gönderir. Bir iş göndermek, esas olarak belirli bir ek yükü içerir"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:22
msgid "the time to process the requests and send the data (API overhead, usually about 10s)"
msgstr "istekleri işleme ve verileri gönderme zamanı (API genel, genellikle yaklaşık 10sn)"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:23
msgid "the job queue time, that is how long you have to wait before it’s your turn to run on the device (usually about 2min)"
msgstr "iş kuyruğu süresi, cihazda çalışma sıranız gelmeden önce ne kadar beklemeniz gerektiğidir (genellikle yaklaşık 2dk)"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:25
msgid "If we send hundreds of jobs iteratively, this overhead quickly dominates the execution time of our algorithm. Qiskit Runtime allows us to tackle these issues and significantly speed up (especially) iterative algorithms. With Qiskit Runtime, one job does not contain only a batch of circuits but the *entire* algorithm. That means we only experience the API overhead and queue wait *once* instead of in every iteration! You’ll be able to either upload algorithm parameters and delegate all the complexity to the cloud, where your program is executed, or upload your personal algorithm directly."
msgstr "Yüzlerce işi yinelemeli olarak gönderirsek, bu ek yük, algoritmamızın yürütme süresine hızla hakim olur. Qiskit Runtime, bu sorunları çözmemize ve (özellikle) yinelemeli algoritmaları önemli ölçüde hızlandırmamıza olanak tanır. Qiskit Runtime ile bir iş yalnızca bir grup devreyi değil, *tüm* algoritmayı içerir. Bu, her yineleme yerine yalnızca API ek yükü ve kuyrukta bekleme *bir kez* deneyimlediğimiz anlamına gelir! Algoritma parametrelerini yükleyebilir ve tüm karmaşıklığı programınızın yürütüldüğü buluta devredebilir veya kişisel algoritmanızı doğrudan yükleyebilirsiniz."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:28
msgid "For the VQE, the integration of Qiskit Runtime in your existing code is a piece of cake. There is a (almost) drop-in replacement, called ``VQEProgram`` for the ``VQE`` class."
msgstr "VQE için, Qiskit Runtime'ın mevcut kodunuza entegrasyonu çocuk oyuncağıdır. ``VQE`` sınıfı için ``VQEProgram`` olarak adlandırılan (neredeyse) bir bırakma (drop-in) yer değiştirmesi var."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:30
msgid "Let’s see how you can leverage the runtime on a simple chemistry example: Finding the ground state energy of the lithium hydrate (LiH) molecule at a given bond distance."
msgstr "Basit bir kimya örneğinde çalıştırma zamanından nasıl yararlanabildiğinizi görelim: Lityum Hidrat (LiH) molekülünün zemin devlet enerjisini belirli bir bağ mesafesi ile buluyorsunuz."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:42
msgid "Problem specification: LiH molecule"
msgstr "Problem spesifikasyonu: LiH molekülü"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:44
msgid "First, we specify the molecule whose ground state energy we seek. Here, we look at LiH with a bond distance of 2.5 Å."
msgstr "İlk olarak, topraklı devlet enerjisini aradığımız molekülü belirliyoruz. Burada, LiH ' e 2,5 lik bir bağ mesafesi ile bakıyoruz."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:101
msgid "Classical reference solution"
msgstr "Klasik referans çözümü"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:112
msgid "As a reference solution we can solve this system classically with the ``NumPyEigensolver``."
msgstr "Referans çözümü olarak bu sistemi klasik olarak ``NumPYEigensolver`` ile çözebiliriz."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:171
msgid "VQE"
msgstr "VQE"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:173
msgid "To run the VQE we need to select a parameterized quantum circuit acting as ansatz and a classical optimizer. Here we’ll choose a heuristic, hardware efficient ansatz and the SPSA optimizer."
msgstr "VQE'yi çalıştırmak için, ansatz ve klasik bir optimize edici olarak hareket eden bir kuantum devresi seçmemiz gerekiyor. Burada bir buluşsal, donanım tasarruflu ansatz ve SPSA Optimizer'ı seçeceğiz."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:221
msgid "Before executing the VQE in the cloud using Qiskit Runtime, let’s execute a local VQE first."
msgstr "Qiskit Runtime kullanarak bulutta VQE'yi çalıştırmadan önce, yerel bir VQE çalıştıralım."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:302
msgid "Runtime VQE"
msgstr "Çalışma zamanı VQE'si"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:304
msgid "Let’s exchange the eigensolver from a local VQE algorithm to a VQE executed using Qiskit Runtime – simply by exchanging the ``VQE`` class by the ``VQEProgram``."
msgstr "Qiskit Runtime kullanılarak yürütülen bir VQE algoritmasını basitçe ``VQE`` sınıfı ile ``VQEProgram`` ile değiş tokuş ederek yerel bir VQE algoritmasıyla değiştirelim."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:306
msgid "First, we’ll have to load a provider to access Qiskit Runtime. **Note:** You have to replace the next cell with your provider."
msgstr "İlk olarak, Qiskit Runtime'a erişmek için bir sağlayıcı yüklemek zorunda olacağız. **Not ** Bir sonraki hücreyi sağlayıcınızla değiştirmeniz gerekir."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:332
msgid "Now we can set up the ``VQEProgram``. In this first release, the optimizer must be provided as a dictionary, in future releasess you’ll be able to pass the same optimizer object as in the traditional VQE."
msgstr "Şimdi, ``VQEProgram``ı ayarlayabiliriz. Bu ilk yayın düzeyinde, optimize edici bir sözlük olarak sağlanmalıdır, gelecekte releasix olarak, geleneksel VQE'de olduğu gibi aynı optimize edici nesnesini geçebileceksiniz."

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:409
msgid "If we are interested in the development of the energy, the ``VQEProgram`` allows access to the history of the optimizer, which contains the loss per iteration (along with the parameters and a timestamp). We can access this data via the ``raw_result`` attribute of the ground state solver."
msgstr "Eğer enerjinin gelişimi ile ilgileniyorsak, ``VQEProgram``ı yineleme başına kaybı (parametreler ve zaman dalgası ile birlikte) içeren optimize edicinin geçmişine erişim sağlar. Bu verilere zemin durumu çözücünün ``raw_result`` özelliği ile erişebiliriz."

#: ../../tutorials/index.rst:3
msgid "Qiskit Nature Tutorials"
msgstr "Qiskit Nature Eğitimleri"

