msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-09 17:24+0000\n"
"PO-Revision-Date: 2023-11-09 18:11\n"
"Last-Translator: \n"
"Language: es_UN\n"
"Language-Team: Spanish (United)\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /main/nature/docs/locale/en/LC_MESSAGES/howtos/vqe_ucc.po\n"
"X-Crowdin-File-ID: 9969\n"

#: ../../howtos/vqe_ucc.rst:4
msgid "Use a UCC-like ansatz with a VQE"
msgstr "Usar un ansatz similar a UCC con un VQE"

#: ../../howtos/vqe_ucc.rst:6
msgid "When using a :class:`~qiskit_nature.second_q.circuit.library.UCC`-style ansatz with a :class:`~qiskit_algorithms.VQE` one needs to pay particular attention to the :attr:`~qiskit_algorithms.VQE.initial_point` attribute which indicates from which set of initial parameters the optimization routine should start. By default, VQE will start from a *random* initial point. In this how to we show how one can set a custom initial point instead (for example to guarantee that one starts from the Hartree-Fock state)."
msgstr ""

#: ../../howtos/vqe_ucc.rst:14
msgid "We obtain an :class:`~qiskit_nature.second_q.problems.ElectronicStructureProblem` which we want to solve:"
msgstr "Obtenemos un :class:`~qiskit_nature.second_q.problems.ElectronicStructureProblem` que queremos resolver:"

#: ../../howtos/vqe_ucc.rst:23
msgid "We setup our :class:`~qiskit_nature.second_q.mappers.QubitMapper`:"
msgstr "Configuramos nuestro :class:`~qiskit_nature.second_q.mappers.QubitMapper`:"

#: ../../howtos/vqe_ucc.rst:30
msgid "We setup our ansatz:"
msgstr "Configuramos nuestro ansatz:"

#: ../../howtos/vqe_ucc.rst:46
msgid "We setup a :class:`~qiskit_algorithms.VQE`:"
msgstr ""

#: ../../howtos/vqe_ucc.rst:56
msgid "Now comes the key step: choosing the initial point. Since we picked the :class:`~qiskit_nature.second_q.circuit.library.HartreeFock` initial state before, in order to ensure we start from that, we need to initialize our ``initial_point`` with all-zero parameters. One way to do that is like so:"
msgstr "Ahora viene el paso clave: elegir el punto inicial. Ya que elegimos el estado inicial de :class:`~qiskit_nature.second_q.circuit.library.HartreeFock` antes, para asegurarnos de que comenzamos desde eso, necesitamos inicializar nuestro ``initial_point`` con todos los parámetros todo en cero. Una forma de hacerlo es así:"

#: ../../howtos/vqe_ucc.rst:65
msgid "Alternatively, one can also use :class:`~qiskit_nature.second_q.algorithms.initial_points.HFInitialPoint` like so:"
msgstr "Alternativamente, también se puede usar :class:`~qiskit_nature.second_q.algorithms.initial_points.HFInitialPoint` así:"

#: ../../howtos/vqe_ucc.rst:76
msgid "This may seem like it is not adding a lot of benefit, but the key aspect here is that you can build your code on top of the :class:`~qiskit_nature.second_q.algorithms.initial_points.InitialPoint` interface based on which we also have the :class:`~qiskit_nature.second_q.algorithms.initial_points.MP2InitialPoint` which allows you to start from an MP2 starting point like so:"
msgstr "Puede parecer que esto no agrega muchos beneficios, pero el aspecto clave aquí es que puedes construir tu código sobre la interfaz :class:`~qiskit_nature.second_q.algorithms.initial_points.InitialPoint` en la que también tengamos el :class:`~qiskit_nature.second_q.algorithms.initial_points.MP2InitialPoint` que te permite comenzar desde un punto de inicio de MP2 así:"

#: ../../howtos/vqe_ucc.rst:90
msgid "Finally, we can now actually solve our problem:"
msgstr "Finalmente, ahora podemos resolver nuestro problema:"

