msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-07 19:00+0000\n"
"PO-Revision-Date: 2022-12-07 19:29\n"
"Last-Translator: \n"
"Language-Team: Spanish (United)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/08_qcschema.po\n"
"X-Crowdin-File-ID: 9871\n"
"Language: es_UN\n"

#: ../../tutorials/08_qcschema.ipynb:9
msgid "This page was generated from `docs/tutorials/08_qcschema.ipynb`__."
msgstr "Esta p√°gina fue generada a partir de `docs/tutorials/08_qcschema.ipynb`__."

#: ../../tutorials/08_qcschema.ipynb:9
msgid "QCSchema"
msgstr "QCSchema"

#: ../../tutorials/08_qcschema.ipynb:11
msgid "The `QCSchema <https://github.com/MolSSI/QCSchema>`__ is a standard data format for quantum chemistry. The current version of it which has been adopted by multiple classical chemistry codes, only supports serialization via ``JSON``, but their docs clearly indicate that ``HDF5`` may also be used. Thus, in Qiskit Nature, we have opted for implementing support for both hierarchical data formats."
msgstr ""

#: ../../tutorials/08_qcschema.ipynb:13
msgid "Now, why do we have a tutorial specifically about this format you may wonder? The reason is fairly simple: this is the data format which our drivers use internally to transfer data between the classical computation and Qiskit Nature. Thus, this tutorial will explain a few concepts, in case you want to get a bit more elaborate with your driver interaction."
msgstr ""

#: ../../tutorials/08_qcschema.ipynb:15
msgid "**Note:** the support for electronic-repulsion integrals as part of the QCSchema is not yet part of the official specification and, thus, custom to Qiskit Nature. But we are working with the QCSchema authors to make this integration official!"
msgstr ""

#: ../../tutorials/08_qcschema.ipynb:17
msgid "For the purposes of this tutorial, we are using the ``PySCFDriver``, but most discussion points should apply to the other electronic structure drivers, too."
msgstr ""

#: ../../tutorials/08_qcschema.ipynb:19
msgid "First, let us construct a ``PySCFDriver`` and run it:"
msgstr ""

#: ../../tutorials/08_qcschema.ipynb:69
msgid "This is basically short for the following:"
msgstr ""

#: ../../tutorials/08_qcschema.ipynb:118
msgid "There are two things to note here: - the problem is specifically requested in the MO basis - dipole integrals are handled separately (because the current QCSchema standard does not support these coefficients)"
msgstr ""

#: ../../tutorials/08_qcschema.ipynb:120
msgid "What this means for you as an end-user, is that you can also request the problem in another basis like so:"
msgstr ""

#: ../../tutorials/08_qcschema.ipynb:166
msgid "If you now want to transform an AO problem into the MO basis, you need to use the ``BasisTransformer`` which is explained in `a separate tutorial <05_problem_transformers.ipynb>`__."
msgstr ""

#: ../../tutorials/08_qcschema.ipynb:168
msgid "This is the point, where you need to understand that the ``to_problem`` method actually relies on the ``to_qcschema`` method internally:"
msgstr ""

#: ../../tutorials/08_qcschema.ipynb:192
msgid "Specifically extracting the QCSchema object from the driver allows you to later extract a ``BasisTransformer`` from it, without having to manually dig out the AO-2-MO transformation coefficients from the depths of the driver object:"
msgstr ""

