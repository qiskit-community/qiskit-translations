msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-01 15:55+0000\n"
"PO-Revision-Date: 2023-09-01 16:19\n"
"Last-Translator: \n"
"Language: es_UN\n"
"Language-Team: Spanish (United)\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /main/nature/docs/locale/en/LC_MESSAGES/tutorials/04_excited_states_solvers.po\n"
"X-Crowdin-File-ID: 9672\n"

#: ../../tutorials/04_excited_states_solvers.ipynb:9
msgid "This page was generated from `docs/tutorials/04_excited_states_solvers.ipynb`__."
msgstr "Esta página fue generada a partir de `docs/tutorials/04_excited_states_solvers.ipynb`__."

#: ../../tutorials/04_excited_states_solvers.ipynb:9
msgid "Excited states solvers"
msgstr "Solucionadores de estados excitados"

#: ../../tutorials/04_excited_states_solvers.ipynb:21
msgid "Introduction"
msgstr "Introducción"

#: ../../tutorials/04_excited_states_solvers.ipynb:23
msgid "|3a1c03ca9b7a46af97c8c378d2d3fce7|"
msgstr ""

#: ../../tutorials/04_excited_states_solvers.ipynb:29
msgid "3a1c03ca9b7a46af97c8c378d2d3fce7"
msgstr ""

#: ../../tutorials/04_excited_states_solvers.ipynb:25
msgid "In this tutorial we are going to discuss the excited states calculation interface of Qiskit Nature. The goal is to compute the excited states of a molecular Hamiltonian. This Hamiltonian can be electronic or vibrational. To know more about the preparation of the Hamiltonian, check out the `Electronic structure <01_electronic_structure.ipynb>`__ and `Vibrational structure tutorials <02_vibrational_structure.ipynb>`__."
msgstr "En este tutorial vamos a discutir la interfaz de cálculo de estados excitados de Qiskit Nature. El objetivo es calcular los estados excitados de un Hamiltoniano molecular. Este Hamiltoniano puede ser electrónico o vibracional. Para saber más sobre la preparación del Hamiltoniano, consulta los tutoriales de `Estructura electrónica <01_electronic_structure.ipynb>`__ y `Estructura vibracional <02_vibrational_structure.ipynb>`__."

#: ../../tutorials/04_excited_states_solvers.ipynb:27
msgid "The first step is to define the molecular system. In the following we ask for the electronic part of a hydrogen molecule."
msgstr "El primer paso es definir el sistema molecular. A continuación, pedimos la parte electrónica de una molécula de hidrógeno."

#: ../../tutorials/04_excited_states_solvers.ipynb:61
msgid "We will also be sticking to the Jordan-Wigner mapping. To learn more about the various mappers available in Qiskit Nature, check out the `Qubit Mappers tutorial <06_qubit_mappers.ipynb>`__."
msgstr "También nos apegaremos al mapeo de Jordan-Wigner. Para obtener más información sobre los diversos mapeadores disponibles en Qiskit Nature, consulta el `Tutorial de Mapeadores de Qubit <06_qubit_mappers.ipynb>`__."

#: ../../tutorials/04_excited_states_solvers.ipynb:85
msgid "The Solver"
msgstr "El Solucionador"

#: ../../tutorials/04_excited_states_solvers.ipynb:87
msgid "After these steps we need to define a solver. The solver is the algorithm through which the excited states are computed."
msgstr "Después de estos pasos necesitamos definir un solucionador. El solucionador es el algoritmo a través del cual se calculan los estados excitados."

#: ../../tutorials/04_excited_states_solvers.ipynb:89
msgid "Let's first start with a purely classical example: the ``NumPyEigensolver``. This algorithm exactly diagonalizes the Hamiltonian. Although it scales badly, it can be used on small systems to check the results of the quantum algorithms. Here, we are only interested to look at eigenstates with a given number of particles. To compute only those states a filter function can be passed to the ``NumPyEigensolver``. A default filter function is already implemented in Qiskit Nature which you can use for this purpose."
msgstr "Comencemos primero con un ejemplo puramente clásico: el ``NumPyEigensolver``. Este algoritmo diagonaliza exactamente al Hamiltoniano. Aunque escala mal, se puede usar en sistemas pequeños para verificar los resultados de los algoritmos cuánticos. Aquí, solo estamos interesados en mirar estados propios con un número dado de partículas. Para calcular únicamente esos estados, se puede pasar una función de filtro al ``NumPyEigensolver``. Está implementada una función de filtro predeterminada en Qiskit Nature que puedes usar para este propósito."

#: ../../tutorials/04_excited_states_solvers.ipynb:92
msgid "We also need to specify the number of eigenvalues to be computed by the ``NumPyEigensolver``. For this particular system, we are interested in the ground and first three excited states, so we will set ``k=4`` (which defaults to 1 so be sure to set this, otherwise you will only obtain the ground state!)."
msgstr "También necesitamos especificar el número de valores propios que serán calculados por el ``NumPyEigensolver``. Para este sistema en particular, estamos interesados en el estado fundamental y los primeros tres estados excitados, por lo que estableceremos ``k=4`` (que por defecto es 1, así que asegúrate de configurar esto, de lo contrario, ¡solo obtendrás el estado fundamental!)."

#: ../../tutorials/04_excited_states_solvers.ipynb:115
msgid "The excitation energies can also be accessed with the `qEOM algorithm <https://journals.aps.org/prresearch/abstract/10.1103/PhysRevResearch.2.043140>`__. The EOM method finds the excitation energies (differences in energy between the ground state and all :math:`n`\\ th excited states) by solving the following pseudo-eigenvalue problem."
msgstr "También se puede acceder a las energías de excitación con el `algoritmo qEOM <https://journals.aps.org/prresearch/abstract/10.1103/PhysRevResearch.2.043140>`__. El método EOM encuentra las energías de excitación (diferencias de energía entre el estado fundamental y todos los :math:`n`\\ -ésimos estados excitados) resolviendo el siguiente problema de pseudovalores propios."

#: ../../tutorials/04_excited_states_solvers.ipynb:117
msgid "\\begin{pmatrix}\n"
"    \\text{M} & \\text{Q}\\\\\n"
"    \\text{Q*} & \\text{M*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}\n"
"= E_{0n}\n"
"\\begin{pmatrix}\n"
"    \\text{V} & \\text{W}\\\\\n"
"    -\\text{W*} & -\\text{V*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}"
msgstr "\\begin{pmatrix}\n"
"    \\text{M} & \\text{Q}\\\\\n"
"    \\text{Q*} & \\text{M*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}\n"
"= E_{0n}\n"
"\\begin{pmatrix}\n"
"    \\text{V} & \\text{W}\\\\\n"
"    -\\text{W*} & -\\text{V*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}"

#: ../../tutorials/04_excited_states_solvers.ipynb:138
msgid "with"
msgstr "con"

#: ../../tutorials/04_excited_states_solvers.ipynb:140
msgid "M_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger},\\hat{\\text{H}}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"
msgstr "M_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger},\\hat{\\text{H}}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"

#: ../../tutorials/04_excited_states_solvers.ipynb:145
msgid "Q_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{H}}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"
msgstr "Q_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{H}}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"

#: ../../tutorials/04_excited_states_solvers.ipynb:150
msgid "V_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"
msgstr "V_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"

#: ../../tutorials/04_excited_states_solvers.ipynb:155
msgid "W_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_\\alpha}^{(\\alpha)})^{\\dagger}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"
msgstr "W_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_\\alpha}^{(\\alpha)})^{\\dagger}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"

#: ../../tutorials/04_excited_states_solvers.ipynb:160
msgid "Although the previous equation can be solved classically, each matrix element must be measured on the quantum computer with the corresponding ground state. To use the qEOM as a solver in Qiskit, we have to define a ground state calculation first, which will provide the required ground state information to the algorithm. With this the qEOM solver can be initialized like so:"
msgstr "Aunque la ecuación anterior se puede resolver clásicamente, cada elemento de matriz se debe medir en la computadora cuántica con el estado fundamental correspondiente. Para usar qEOM como un solucionador en Qiskit, primero tenemos que definir un cálculo del estado fundamental, que proporcionará la información de estado fundamental necesaria para el algoritmo. Con esto, el solucionador qEOM se puede inicializar así:"

#: ../../tutorials/04_excited_states_solvers.ipynb:207
msgid "The calculation and results"
msgstr "El cálculo y los resultados"

#: ../../tutorials/04_excited_states_solvers.ipynb:209
msgid "We are now ready to compute the results. Below, we are comparing the results obtained by the exact ``NumPyEigensolver`` with the default filter criterion enabled with the results obtained by the qEOM algorithm."
msgstr "Ahora estamos listos para calcular los resultados. A continuación, comparamos los resultados obtenidos por el ``NumPyEigensolver`` exacto con el criterio de filtro predeterminado habilitado con los resultados obtenidos por el algoritmo qEOM."

#: ../../tutorials/04_excited_states_solvers.ipynb:563
msgid "One can see from these results that one state is missing from the NumPy results. The reason for this is because the spin is also used as a filter and only singlet states are shown. In the following we use a custom filter function to check our results consistently and only filter out states with the incorrect number of particles (in this case the number of particle is 2) as well as the wrong magnetization (which we enforce to be 0)."
msgstr "Uno puede ver a partir de estos resultados que falta un estado en los resultados de NumPy. La razón de esto es que el espín también se usa como filtro y solo se muestran los estados singletes. A continuación, usamos una función de filtro personalizada para verificar nuestros resultados de manera consistente y solo filtramos los estados con el número incorrecto de partículas (en este caso, el número de partículas es 2) así como la magnetización incorrecta (que forzamos a que sea 0)."

