msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-10 16:33+0000\n"
"PO-Revision-Date: 2022-02-10 17:20\n"
"Last-Translator: \n"
"Language-Team: Bengali Language\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: bengali\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/07_leveraging_qiskit_runtime.po\n"
"X-Crowdin-File-ID: 9678\n"
"Language: bn_BN\n"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:9
msgid "This page was generated from `docs/tutorials/07_leveraging_qiskit_runtime.ipynb`__."
msgstr "এই পৃষ্ঠাটি `docs/tutorials/07_leveraging_qiskit_runtime.ipynb`__ থেকে বানানো হয়েছে।"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:9
msgid "Leveraging Qiskit Runtime"
msgstr "Qiskit রানটাইম লিভারেজিং"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:20
msgid "Iterative algorithms, such as the Variational Quantum Eigensolver (VQE), traditionally send one batch of circuits (one “job”) to be executed on the quantum device in each iteration. Sending a job involves certain overhead, mainly"
msgstr "পুনরাবৃত্তিমূলক অ্যালগরিদম, যেমন ভেরিয়েশনাল কোয়ান্টাম আইজেনসলভার (VQE), গতানুগতিকভাবে প্রতিটি পুনরাবৃত্তিতে কোয়ান্টাম ডিভাইসে সঞ্চালনের জন্য একটি ব্যাচ সার্কিট (একটি \"কাজ\") পাঠায়। একটি চাকরি পাঠানো কিছু নির্দিষ্ট ওভারহেড জড়িত, প্রধানত"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:22
msgid "the time to process the requests and send the data (API overhead, usually about 10s)"
msgstr "অনুরোধগুলি প্রক্রিয়া করার এবং ডেটা পাঠানোর সময় (API ওভারহেড, সাধারণত প্রায় 10s)"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:23
msgid "the job queue time, that is how long you have to wait before it’s your turn to run on the device (usually about 2min)"
msgstr "কাজের সারির সময়, এইভাবে আপনার ডিভাইসে চালানোর পালা হওয়ার আগে আপনাকে কতক্ষণ অপেক্ষা করতে হবে (সাধারণত প্রায় 2 মিনিট)"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:25
msgid "If we send hundreds of jobs iteratively, this overhead quickly dominates the execution time of our algorithm. Qiskit Runtime allows us to tackle these issues and significantly speed up (especially) iterative algorithms. With Qiskit Runtime, one job does not contain only a batch of circuits but the *entire* algorithm. That means we only experience the API overhead and queue wait *once* instead of in every iteration! You’ll be able to either upload algorithm parameters and delegate all the complexity to the cloud, where your program is executed, or upload your personal algorithm directly."
msgstr "যদি আমরা শত শত কাজ পুনরাবৃত্তিমূলকভাবে পাঠাই, তাহলে এই ওভারহেড দ্রুত আমাদের অ্যালগরিদমের এক্সিকিউশন টাইমে আধিপত্য বিস্তার করে। কিস্কিট রানটাইম আমাদের এই সমস্যাগুলি মোকাবেলা করতে এবং উল্লেখযোগ্যভাবে (বিশেষ করে) পুনরাবৃত্তিমূলক অ্যালগরিদমগুলিকে গতিশীল করতে দেয়। কিস্কিট রানটাইমের সাথে, একটি কাজে কেবল সার্কিটের একটি ব্যাচ থাকে না তবে *সম্পূর্ণ* অ্যালগরিদম থাকে। এর মানে হল যে আমরা কেবলমাত্র প্রতিটি পুনরাবৃত্তির পরিবর্তে API ওভারহেড এবং সারি অপেক্ষা *একবার* অনুভব করি! আপনি হয় অ্যালগরিদম প্যারামিটার আপলোড করতে পারবেন এবং ক্লাউডে সমস্ত জটিলতা অর্পণ করতে পারবেন, যেখানে আপনার প্রোগ্রামটি সম্পাদিত হবে অথবা সরাসরি আপনার ব্যক্তিগত অ্যালগরিদম আপলোড করতে পারবেন।"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:28
msgid "For the VQE, the integration of Qiskit Runtime in your existing code is a piece of cake. There is a (almost) drop-in replacement, called ``VQEProgram`` for the ``VQE`` class."
msgstr "VQE এর জন্য, আপনার বিদ্যমান কোডে কিস্কিট রানটাইমের সংহতকরণ হল কেকের একটি টুকরা। ``VQE`` ক্লাসের জন্য ``VQEProgram`` নামে একটি (প্রায়) ড্রপ-ইন রিপ্লেসমেন্ট আছে।"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:30
msgid "Let’s see how you can leverage the runtime on a simple chemistry example: Finding the ground state energy of the lithium hydrate (LiH) molecule at a given bond distance."
msgstr "আসুন দেখি কিভাবে আপনি একটি সহজ রসায়নের উদাহরণে রানটাইম ব্যবহার করতে পারেন: একটি নির্দিষ্ট বন্ধন দূরত্বে লিথিয়াম হাইড্রেট (LiH) অণুর গ্রাউন্ড স্টেট এনার্জি খুঁজে বের করা।"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:42
msgid "*Important: Version requirements*"
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:44
msgid "*This notebook requires a minimum version number of Qiskit Terra 0.18.0 and Qiskit Nature 0.3.0.*"
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:56
msgid "Problem specification: LiH molecule"
msgstr "সমস্যা স্পেসিফিকেশন: LiH অণু"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:58
msgid "First, we specify the molecule whose ground state energy we seek. Here, we look at LiH with a bond distance of 2.5 Å."
msgstr "প্রথমত, আমরা অণু নির্দিষ্ট করি যার গ্রাউন্ড স্টেট এনার্জি আমরা চাই। এখানে, আমরা 2.5Å বন্ড দূরত্বের LiH এর দিকে তাকাই।"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:124
msgid "Classical reference solution"
msgstr "প্রথাগত (ক্লাসিক্যাল) রেফারেন্স সমাধান"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:135
msgid "As a reference solution we can solve this system classically with the ``NumPyEigensolver``."
msgstr "একটি রেফারেন্স সমাধান হিসাবে আমরা ``NumPyEigensolver`` দিয়ে ক্লাসিকভাবে এই সিস্টেমটি সমাধান করতে পারি।"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:199
msgid "VQE"
msgstr "ভি কিউ ই"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:201
msgid "To run the VQE we need to select a parameterized quantum circuit acting as ansatz and a classical optimizer. Here we’ll choose a heuristic, hardware efficient ansatz and the SPSA optimizer."
msgstr "ভিকিউই চালানোর জন্য আমাদের একটি প্যারামিটারাইজড কোয়ান্টাম সার্কিট নির্বাচন করতে হবে যা আনস্যাটজ এবং একটি ক্লাসিক্যাল অপটিমাইজার হিসাবে কাজ করে। এখানে আমরা একটি হিউরিস্টিক, হার্ডওয়্যার দক্ষ Ansatz এবং SPSA অপটিমাইজার বেছে নেব।"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:249
msgid "Before executing the VQE in the cloud using Qiskit Runtime, let’s execute a local VQE first."
msgstr "কিস্কিট রানটাইম ব্যবহার করে ক্লাউডে VQE চালানোর আগে, প্রথমে একটি স্থানীয় VQE চালানো যাক।"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:343
msgid "Runtime VQE"
msgstr "রানটাইম VQE"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:345
msgid "Let’s exchange the eigensolver from a local VQE algorithm to a VQE executed using Qiskit Runtime – simply by exchanging the ``VQE`` class by the ``qiskit_nature.runtime.VQEClient``."
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:347
msgid "First, we’ll have to load a provider to access Qiskit Runtime. **Note:** You have to replace the next cell with your provider."
msgstr "প্রথমে, কিস্কিট রানটাইম অ্যাক্সেস করতে আমাদের একটি প্রদানকারী লোড করতে হবে। **দ্রষ্টব্য:** আপনাকে পরবর্তী সেলকে আপনার প্রদানকারীর সাথে প্রতিস্থাপন করতে হবে।"

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:373
msgid "Now we can set up the ``VQEClient``. In this first release, the optimizer must be provided as a dictionary, in future releases you’ll be able to pass the same optimizer object as in the traditional VQE."
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:460
msgid "If we are interested in the development of the energy, the ``VQEClient`` allows access to the history of the optimizer, which contains the loss per iteration (along with the parameters and a timestamp). Note that this only holds for the SPSA and QN-SPSA optimizers. Otherwise you have to use a callback to the ``VQEClient``, similar to the normal ``VQE``."
msgstr ""

#: ../../tutorials/07_leveraging_qiskit_runtime.ipynb:462
msgid "We can access this data via the ``raw_result`` attribute of the ground state solver."
msgstr ""

