msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-29 19:05+0000\n"
"PO-Revision-Date: 2021-09-29 19:22\n"
"Last-Translator: \n"
"Language-Team: Bengali Language\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: bengali\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/04_excited_states_solvers.po\n"
"X-Crowdin-File-ID: 9672\n"
"Language: bn_BN\n"

#: ../../tutorials/04_excited_states_solvers.ipynb:9
msgid "This page was generated from `docs/tutorials/04_excited_states_solvers.ipynb`__."
msgstr "এই পৃষ্ঠাটি `docs/tutorials/04_excited_states_solvers.ipynb`__ থেকে বানানো হয়েছে।"

#: ../../tutorials/04_excited_states_solvers.ipynb:9
msgid "Excited states solvers"
msgstr "উত্তেজিত স্তর বা অবস্থা সমাধানকারী (সলভার)"

#: ../../tutorials/04_excited_states_solvers.ipynb:21
msgid "Introduction"
msgstr "ভূমিকা"

#: ../../tutorials/04_excited_states_solvers.ipynb:23
msgid "|a5c9712385b9428393d7ab33d8066022|"
msgstr ""

#: ../../tutorials/04_excited_states_solvers.ipynb:29
msgid "a5c9712385b9428393d7ab33d8066022"
msgstr ""

#: ../../tutorials/04_excited_states_solvers.ipynb:25
msgid "In this tutorial we are going to discuss the excited states calculation interface of Qiskit Nature. The goal is to compute the excited states of a molecular Hamiltonian. This Hamiltonian can be electronic or vibrational. To know more about the preparation of the Hamiltonian, check out the Electronic structure and Vibrational structure tutorials."
msgstr "এই টিউটোরিয়ালে আমরা Qiskit Nature উত্তেজিত দশা বা অবস্থা ক্যালকুলেশন ইন্টারফেস নিয়ে আলোচনা করতে যাচ্ছি। লক্ষ্য হল একটি আণবিক হ্যামিল্টোনিয়ানের উত্তেজিত দশা বা অবস্থা হিসাব করা। এই হ্যামিল্টোনিয়ান ইলেকট্রনিক বা কম্পন হতে পারে। হ্যামিল্টোনিয়ান প্রস্তুতি সম্পর্কে আরও জানতে, ইলেকট্রনিক কাঠামো এবং কম্পন কাঠামোর টিউটোরিয়ালগুলি দেখুন।"

#: ../../tutorials/04_excited_states_solvers.ipynb:27
msgid "The first step is to define the molecular system. In the following we ask for the electronic part of a hydrogen molecule."
msgstr "প্রথম ধাপ হল আণবিক সিস্টেমকে সংজ্ঞায়িত করা। এরপর আমরা হাইড্রোজেন অণুর বৈদ্যুতিন অংশটি পেতে চাই।"

#: ../../tutorials/04_excited_states_solvers.ipynb:105
msgid "The Solver"
msgstr "সমাধানকারী (সলভার)"

#: ../../tutorials/04_excited_states_solvers.ipynb:107
msgid "Then we need to define a solver. The solver is the algorithm through which the ground state is computed."
msgstr "তারপর আমাদের একটি সমাধানকারী (সলভার) সংজ্ঞায়িত করার প্রয়োজন। সমাধানকারী (সলভার) হলো একটি অ্যালগরিদম / ধারাক্রম যার দ্বারা গ্রাউন্ড স্টেট হিসাব করা হয়।"

#: ../../tutorials/04_excited_states_solvers.ipynb:109
msgid "Let’s first start with a purely classical example: the NumPy eigensolver. This algorithm exactly diagonalizes the Hamiltonian. Although it scales badly, it can be used on small systems to check the results of the quantum algorithms. Here, we are only interested to look at eigenstates with a given number of particle. To compute only those states a filter function can be passed to the NumPy eigensolver. A default filter function is already implemented in Qiskit and can be used in this way:"
msgstr "শুরু করা যাক একটি বিশুদ্ধ প্রথাগত (ক্লাসিক্যাল) উদাহরণ দ্বারা। যেমন: NumPy ন্যূনতম eigensolver। এই অ্যালগরিদম প্রকৃতপক্ষে হ্যামিল্টোনিয়ানকে কর্নিকরণ (ডায়াগোনালাইজ) করে। যদিও এটি সামান্য ত্রুটিপূর্ণ, তবু এটি ছোট সিস্টেমে কোয়ান্টাম অ্যালগরিদম এর ফল পরীক্ষা করার জন্য ব্যবহার করা যায়। এখানে, আমরা কেবল একটি নির্দিষ্ট সংখ্যার কণা যুক্ত আইগেনস্টেট গুলির প্রতি মনোযোগী। ওইসব স্তরের মান বা অবস্থা গণনা করতে একটি পরিশ্রুতকারক (ফিল্টার) ফাংশনকে NumPy eigensolver এ পাস করানো যেতে পারে। একটি সাধারন পরিশ্রুতকারক (ফিল্টার) ফাংশন Qiskit এ ইতিমধ্যে সম্পাদন করা হয়েছে এবং নিম্নরূপে ব্যবহার করা যায়:"

#: ../../tutorials/04_excited_states_solvers.ipynb:132
msgid "The excitation energies can also be accessed with the qEOM algorithm [arXiv preprint arXiv:1910.12890 (2019)]. The EOM method finds the excitation energies (differences in energy between the ground state and all :math:`n`\\ th excited states) by solving the following pseudo-eigenvalue problem."
msgstr "উদ্দীপক শক্তি qEOM অ্যালগরিদম / ধরাক্রম এর সাহায্যে পাওয়া যায় [arXiv preprint arXiv:1910.12890 (2019)]। EOM পদ্ধতি নীচের pseudo-eigenvalue সমস্যা সমাধানের মাধ্যমে উদ্দীপক শক্তি (গ্রাউন্ড স্টেট এবং সকল math:`n`\\ তম উদ্দীপিত স্তরের মধ্যে শক্তি পার্থক্য) খোঁজে।"

#: ../../tutorials/04_excited_states_solvers.ipynb:134
msgid "\\begin{pmatrix}\n"
"    \\text{M} & \\text{Q}\\\\\n"
"    \\text{Q*} & \\text{M*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}\n"
"= E_{0n}\n"
"\\begin{pmatrix}\n"
"    \\text{V} & \\text{W}\\\\\n"
"    -\\text{W*} & -\\text{V*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}"
msgstr "\\begin{pmatrix}\n"
"    \\text{M} & \\text{Q}\\\\\n"
"    \\text{Q*} & \\text{M*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}\n"
"= E_{0n}\n"
"\\begin{pmatrix}\n"
"    \\text{V} & \\text{W}\\\\\n"
"    -\\text{W*} & -\\text{V*}\n"
"\\end{pmatrix}\n"
"\\begin{pmatrix}\n"
"    \\text{X}_n\\\\\n"
"    \\text{Y}_n\n"
"\\end{pmatrix}"

#: ../../tutorials/04_excited_states_solvers.ipynb:155
msgid "with"
msgstr "সাথে বা সঙ্গে"

#: ../../tutorials/04_excited_states_solvers.ipynb:157
msgid "M_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger},\\hat{\\text{H}}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"
msgstr "M_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger},\\hat{\\text{H}}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"

#: ../../tutorials/04_excited_states_solvers.ipynb:162
msgid "Q_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{H}}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"
msgstr "Q_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{H}}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"

#: ../../tutorials/04_excited_states_solvers.ipynb:167
msgid "V_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"
msgstr "V_{\\mu_{\\alpha}\\nu_{\\beta}} = \\langle0| [(\\hat{\\text{E}}_{\\mu_{\\alpha}}^{(\\alpha)})^{\\dagger}, \\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)}]|0\\rangle"

#: ../../tutorials/04_excited_states_solvers.ipynb:172
msgid "W_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_\\alpha}^{(\\alpha)})^{\\dagger}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"
msgstr "W_{\\mu_{\\alpha}\\nu_{\\beta}} = -\\langle0| [(\\hat{\\text{E}}_{\\mu_\\alpha}^{(\\alpha)})^{\\dagger}, (\\hat{\\text{E}}_{\\nu_{\\beta}}^{(\\beta)})^{\\dagger}]|0\\rangle"

#: ../../tutorials/04_excited_states_solvers.ipynb:177
msgid "Although the previous equation can be solved classically, each matrix element must be measured on the quantum computer with the corresponding ground state. To use the qEOM as a solver in Qiskit, we have to define a ground state calculation first, providing to the algorithm information on how to find the ground state. With this the qEOM solver can be initialized:"
msgstr "যদিও পূর্বের সমীকরণটি প্রথাগতভাবে (ক্লাসিক্যালি) সমাধান করা যেত, প্রতিটি ম্যাট্রিক্স উপাদান অবশ্যই সংশ্লিষ্ট ভূমিস্তরের সাথে কোয়ান্টাম কম্পিউটার দ্বারা মাপতে হত। qEOM কে Qiskit এর একটি সমাধানকারী (সলভার) হিসেবে ব্যবহার করতে হলে আমাদের প্রথমে একটি গ্রাউন্ড স্টেট হিসাব সংজ্ঞায়িত করতে হবে, যা গ্রাউন্ড স্টেট পাওয়ার পদ্ধতি আলোচনা করবে। এর সাথে সাথেই qEOM সমাধানকারী (সলভার) শুরু করা যেতে পারে:"

#: ../../tutorials/04_excited_states_solvers.ipynb:210
msgid "The calculation and results"
msgstr "হিসাব এবং ফলাফল।"

#: ../../tutorials/04_excited_states_solvers.ipynb:212
msgid "The results are computed and printed"
msgstr "ফলাফল হিসাব এবং প্রিন্ট করা হয়েছে।"

#: ../../tutorials/04_excited_states_solvers.ipynb:419
msgid "One can see from these results that one state is missing from the NumPy results. The reason for this is because the spin is also used as a filter and only singlet states are shown. In the following we use a custom filter function to check consistently our results and only filter out states with incorrect number of particle (in this case the number of particle is 2)."
msgstr "এই ফলাফল থেকে লক্ষ্য করা যায় যে NumPy ফলাফল থেকে একটি স্তরের মান বা অবস্থা উধাও হয়ে গেছে। এর কারণ হল স্পিন বা ঘূর্ণনও একটি পরিশ্রুতকারক (ফিল্টার) রূপে ব্যবহৃত হয়েছে এবং কেবল সিঙ্গলেট স্তরের মান বা অবস্থাগুলিই দেখানো হচ্ছে। অতঃপর, আমরা আমাদের ফলাফল নিয়মিতভাবে পরীক্ষা করতে এবং ভূল কণা সংখ্যা যুক্ত স্তরগুলিকে ছেঁকে বাদ দিতে একটি বিশেষায়িত (কাস্টম) পরিশ্রুতকারক (ফিল্টার) ফাংশন ব্যাবহার করবো।"

