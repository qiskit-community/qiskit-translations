msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-09 17:24+0000\n"
"PO-Revision-Date: 2023-11-09 18:09\n"
"Last-Translator: \n"
"Language: bn_BN\n"
"Language-Team: Bengali Language\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: bengali\n"
"X-Crowdin-File: /main/nature/docs/locale/en/LC_MESSAGES/migration/0.6_c_qubit_converter.po\n"
"X-Crowdin-File-ID: 9989\n"

#: ../../migration/0.6_c_qubit_converter.rst:2
msgid "The QubitConverter Migration Guide"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:4
msgid "The :class:`~qiskit_nature.second_q.mappers.QubitConverter` class has been deprecated as part of version 0.6 of Qiskit Nature. Instead of wrapping this class around one of the available :class:`~qiskit_nature.second_q.mappers.QubitMapper` classes, the latter can now instead be used directly. To support this, the mappers have been improved and now ship with more advanced functionality out of the box."
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:10
msgid "To keep this guide simple, we will focus on examples on how to replace specific use cases of the :class:`~qiskit_nature.second_q.mappers.QubitConverter`. For more details on the mappers we suggest you check out the `tutorial on qubit mappers <../tutorials/06_qubit_mappers.ipynb>`_."
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:15
msgid "Setup"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:17
msgid "For the examples in this guide, we will always be using the following :class:`~qiskit_nature.second_q.operators.FermionicOp`:"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:72
msgid "PauliSumOp vs. SparsePauliOp"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:74
msgid "One more note: the :mod:`qiskit.opflow` module is going to be deprecated in the future. In order to transition from the :class:`~qiskit.opflow.primitive_ops.PauliSumOp` class and its widespread use to the :mod:`qiskit.quantum_info` module and its :class:`~qiskit.quantum_info.SparsePauliOp` class, you can now set the value of :attr:`~qiskit_nature.settings.QiskitNatureSettings.use_pauli_sum_op` to ``False``. This will become the default in a later release."
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:80
msgid "To ensure that we can consistently rely on using the :class:`~qiskit.quantum_info.SparsePauliOp` in the following parts of this guide, we are applying this setting here:"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:89
msgid "As a consequence of this upcoming deprecation, Qiskit Nature now fully supports the use :class:`~qiskit.quantum_info.SparsePauliOp` instances in all places which previously allowed :class:`~qiskit.opflow.primitive_ops.PauliSumOp` objects. In order to leverage this, it is **not** required to change the setting above. Thus, it is recommended that you switch to using :class:`~qiskit.quantum_info.SparsePauliOp`."
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:95
msgid "For more in-depth information about the :mod:`qiskit.opflow` deprecation please refer to its `migration guide`_."
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:99
msgid "Simplest cases"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:101
msgid "In the simplest cases, all you did was pass a :class:`~qiskit_nature.second_q.mappers.QubitMapper` object into the :class:`~qiskit_nature.second_q.mappers.QubitConverter`. For example, somewhat like this:"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:112
msgid "All you need to do in order to update your code, is stop doing that and simply pass the ``mapper`` object from the example above into whichever place you were using it before."
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:115
msgid "If you were working directly with some :class:`~qiskit_nature.second_q.operators.SparseLabelOp` like so:"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:143
msgid "You should now directly use the ``mapper`` again, but its method is called ``.map``:"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:170
msgid "This is likely what you were doing when you were working with any of the following mappers:"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:172
msgid ":class:`~qiskit_nature.second_q.mappers.JordanWignerMapper`"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:173
msgid ":class:`~qiskit_nature.second_q.mappers.BravyiKitaevMapper`"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:174
msgid ":class:`~qiskit_nature.second_q.mappers.BravyiKitaevSuperFastMapper`"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:175
msgid ":class:`~qiskit_nature.second_q.mappers.DirectMapper`"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:176
msgid ":class:`~qiskit_nature.second_q.mappers.LinearMapper`"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:177
msgid ":class:`~qiskit_nature.second_q.mappers.LogarithmicMapper`"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:180
msgid "The ParityMapper"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:182
msgid "However, when you were using the :class:`~qiskit_nature.second_q.mappers.ParityMapper`, you were able to use the ``two_qubit_reduction=True`` option of the :class:`~qiskit_nature.second_q.mappers.QubitConverter`. This ability, which has always been unique to the :class:`~qiskit_nature.second_q.mappers.ParityMapper`, is now directly built into said mapper. So if you were doing something along these lines:"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:207
msgid "The equivalent code now looks like the following:"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:227
msgid "Z2Symmetries"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:229
msgid "Finally, the :class:`~qiskit_nature.second_q.mappers.QubitConverter` class also supported further reduction of qubit resources by exploiting the :class:`~qiskit.opflow.primitive_ops.Z2Symmetries` implemented in the :mod:`qiskit.opflow` module. Although we did extend the deprecated class to also support the updated implementation in the :mod:`qiskit.quantum_info` module (which has the same name: :class:`~qiskit.quantum_info.analysis.z2_symmetries.Z2Symmetries`), you should now use the new :class:`~qiskit_nature.second_q.mappers.TaperedQubitMapper` instead."
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:236
msgid "In the past, you would have enabled this like so:"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:243
msgid "which would then later use :meth:`~qiskit_nature.second_q.problems.BaseProblem.symmetry_sector_locator` to find the symmetry sector of the Hilbert space in which the solution of your problem lies. This was only supported by the :class:`~qiskit_nature.second_q.problems.ElectronicStructureProblem`. Below is a quick example:"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:265
msgid "Now, all you need to do is the use the :meth:`~qiskit_nature.second_q.problems.BaseProblem.get_tapered_mapper` method and provide the original mapper which you would like to wrap:"
msgstr ""

#: ../../migration/0.6_c_qubit_converter.rst:284
msgid "If you were not using the automatic symmetry detection but instead provided a custom symmetry sector, you can construct your :class:`~qiskit_nature.second_q.mappers.TaperedQubitMapper` instance directly. Be sure to check out its documentation for more details."
msgstr ""

