msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-01 15:55+0000\n"
"PO-Revision-Date: 2023-09-01 16:18\n"
"Last-Translator: \n"
"Language: fr\n"
"Language-Team: French\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /main/nature/docs/locale/en/LC_MESSAGES/tutorials/03_ground_state_solvers.po\n"
"X-Crowdin-File-ID: 9670\n"

#: ../../tutorials/03_ground_state_solvers.ipynb:9
msgid "This page was generated from `docs/tutorials/03_ground_state_solvers.ipynb`__."
msgstr "Cette page a été générée à partir de `docs/tutorials/03_ground_state_solvers.ipynb`__."

#: ../../tutorials/03_ground_state_solvers.ipynb:9
msgid "Ground state solvers"
msgstr "Solveurs d'état fondamental (``Ground State Solvers``)"

#: ../../tutorials/03_ground_state_solvers.ipynb:21
msgid "Introduction"
msgstr "Introduction"

#: ../../tutorials/03_ground_state_solvers.ipynb:23
msgid "|e8f41a11b5a344a688644155b59e3657|"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:31
msgid "e8f41a11b5a344a688644155b59e3657"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:25
msgid "In this tutorial we are going to discuss the ground state calculation interface of Qiskit Nature. The goal is to compute the ground state of a molecular Hamiltonian. This Hamiltonian can for example be electronic or vibrational. To know more about the preparation of the Hamiltonian, check out the `Electronic structure <01_electronic_structure.ipynb>`__ and `Vibrational structure tutorials <02_vibrational_structure.ipynb>`__."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:27
msgid "It should be said, that in the electronic case, we are actually computing purely the **electronic** part. When using the Qiskit Nature stack as presented in this tutorial, the *nuclear repulsion energy* will be added automatically, to obtain the **total** ground state energy."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:29
msgid "The first step is to define the molecular system. In the following we ask for the electronic part of a hydrogen molecule."
msgstr "La première étape consiste à définir le système moléculaire. Dans se qui suit, nous demandons la partie électronique d'une molécule d'hydrogène."

#: ../../tutorials/03_ground_state_solvers.ipynb:63
msgid "We will also be sticking to the Jordan-Wigner mapping. To learn more about the various mappers available in Qiskit Nature, check out the `Qubit Mappers tutorial <06_qubit_mappers.ipynb>`__."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:87
msgid "The Solver"
msgstr "Le Solveur (``The Solver``)"

#: ../../tutorials/03_ground_state_solvers.ipynb:89
msgid "After these steps, we need to define a solver. The solver is the algorithm through which the ground state is computed."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:91
msgid "Let's first start with a purely classical example: the ``NumPyMinimumEigensolver``. This algorithm exactly diagonalizes the Hamiltonian. Although it scales badly, it can be used on small systems to check the results of the quantum algorithms."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:114
msgid "To find the ground state we could also use the Variational Quantum Eigensolver (VQE) algorithm. The VQE algorithm works by exchanging information between a classical and a quantum computer as depicted in the following figure."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:116
msgid "|0da4b36958054a01a822cf1fba174407|"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:120
msgid "0da4b36958054a01a822cf1fba174407"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:118
msgid "Let's initialize a VQE solver."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:158
msgid "To define the VQE solver one needs three essential elements:"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:160
msgid "An Estimator primitive: these were released as part of Qiskit Terra 0.22. To learn more about primitives, check out `this resource <https://qiskit.org/documentation/apidoc/primitives.html>`__."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:161
msgid "A variational form: here we use the Unitary Coupled Cluster (UCC) ansatz (see for instance [Physical Review A 98.2 (2018): 022322]). Since it is a chemistry standard, a factory is already available allowing a fast initialization of a VQE with UCC. The default is to use all single and double excitations. However, the excitation type (S, D, SD) as well as other parameters can be selected. We also prepend the ``UCCSD`` variational form with a ``HartreeFock`` initial state, which initializes the occupation of our qubits according to the problem which we are trying solve."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:163
msgid "An optimizer: this is the classical piece of code in charge of optimizing the parameters in our variational form. See `the corresponding documentation of Qiskit Terra <https://qiskit.org/documentation/stubs/qiskit.algorithms.optimizers.html>`__ for more information."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:165
msgid "One could also use any available ansatz / initial state or even define one's own. For instance,"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:198
msgid "The calculation and results"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:200
msgid "We are now ready to put everything together to compute the ground-state of our problem. Doing so requires us to wrap our ``mapper`` and quantum algorithm into a single ``GroundStateEigensolver`` like so:"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:223
msgid "This will now take of the entire workflow: 1. generating the second-quantized operators stored in our problem (here referred to as ``es_problem``) 2. mapping (and potentially reducing) the operators in the qubit space 3. running the quantum algorithm on the Hamiltonian qubit operator 4. once converged, evaluating the additional observables at the determined ground state"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:329
msgid "We can compare the VQE results to the NumPy exact solver and see that they match."
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:437
msgid "Using a filter function"
msgstr ""

#: ../../tutorials/03_ground_state_solvers.ipynb:448
msgid "Sometimes the true ground state of the Hamiltonian is not of interest because it lies in a different symmetry sector of the Hilbert space. In this case the ``NumPyEigensolver`` can take a filter function to return only the eigenstates with for example the correct number of particles. This is of particular importance in the case of vibrational structure calculations where the true ground state of the Hamiltonian is the vacuum state. A default filter function to check the number of particles is implemented in the different problems and can be used as follows:"
msgstr ""

