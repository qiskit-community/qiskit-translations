msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-02 16:54+0000\n"
"PO-Revision-Date: 2023-03-02 17:32\n"
"Last-Translator: \n"
"Language: vi\n"
"Language-Team: Vietnamese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: vi\n"
"X-Crowdin-File: /master/nature/docs/locale/en/LC_MESSAGES/tutorials/10_lattice_models.po\n"
"X-Crowdin-File-ID: 9725\n"

#: ../../tutorials/10_lattice_models.ipynb:9
msgid "This page was generated from `docs/tutorials/10_lattice_models.ipynb`__."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:9
msgid "Lattice models"
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:21
msgid "Introduction"
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:23
msgid "In quantum physics (including condensed matter physics and high energy physics) we often study models on lattices. For example, when we think about behavior of electrons in a solid, we can study a model defined on a lattice by considering the positions of atoms as lattice points. This notebook demonstrates how we can utilize ``Lattice`` classes to generate various lattice systems such as ``LineLattice``, ``SquareLattice``, ``HyperCubicLattice``, ``TriangularLattice``, and a general lattice. It also includes an example of a lattice model, the Fermi-Hubbard model. We see how we can define the Hamiltonian of the Fermi-Hubbard model for a given lattice using ``FermiHubbardModel`` class."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:59
msgid "LineLattice"
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:61
msgid "``LineLattice`` provides a one-dimensional lattice. We can construct a one-dimensional lattice as follows."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:84
msgid "Here, it is visualized."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:113
msgid "We can also construct a one-dimensional lattice with the periodic boundary conditions by specifying ``BoundaryCondition.PERIODIC`` as the argument of ``boundary_condition``."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:146
msgid "When we want to draw the lattice ignoring the boundary conditions, we use the method ``draw_without_boundary``."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:175
msgid "We can define real or complex weights for the edges of the lattice. This is done by giving a value to the argument ``edge_parameter``. We can also give a value for the self-loops of the lattice by passing the value for ``onsite_parameter``."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:294
msgid "The connectivity of the lattice can be seen as the adjacency matrix, which is done by ``to_adjacency_matrix``."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:370
msgid "By setting ``weighted=True``, we obtain a Hermitian matrix whose matrix elements are the weights."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:480
msgid "SquareLattice"
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:482
msgid "``SquareLattice`` provides a two-dimensional lattice. Here, we make a two-dimensional lattice with the open boundary conditions."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:516
msgid "We can specify the boundary conditions for each direction by setting ``boundary_condition`` as a tuple."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:553
msgid "Again, we can give weights on the edges and the self-loops of the lattice. Here, it is possible to give weights for each direction as a tuple."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:781
msgid "HyperCubicLattice"
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:783
msgid "``HyperCubicLattice`` is a generalization of ``LineLattice`` and ``SquareLattice``. It provides an arbitrary d-dimensional lattice. Here, we make a three-dimensional lattice of size 3 by 4 by 5 as an example. The size is given as a tuple, and the boundary conditions can be specified for each direction too. In the example, the boundary conditions are open."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:810
msgid "We draw the cubic lattice specifying the positions of the lattice points."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:855
msgid "TriangularLattice"
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:857
msgid "``TriangularLattice`` provides a triangular lattice, which can be seen as a two-dimensional lattice with diagonal edges. The argument ``boundary_condition`` can take either “open” or “periodic”."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:917
msgid "General Lattice"
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:919
msgid "Above, we have seen translational invariant lattices. Here, we consider a general lattice. We can construct a general lattice consisting of nodes and edges using an instance of PyGraph."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:994
msgid "Here is its visualization."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:1023
msgid "When we want to visualize the self-loops in the lattice, we set ``self_loop`` to True."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:1052
msgid "The labels of the lattice sites are drawn when ``with_labels`` is True."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:1082
msgid "The Fermi-Hubbard model"
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:1084
msgid "The Fermi-Hubbard model is the simplest model describing electrons moving on a lattice and interaction with each other at the same site. The Hamiltonian is given as follows:"
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:1095
msgid "H = \\sum_{i, j}\\sum_{\\sigma = \\uparrow, \\downarrow} t_{i, j} c_{i, \\sigma}^\\dagger c_{j, \\sigma} + U \\sum_{i} n_{i, \\uparrow} n_{i, \\downarrow},"
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:1109
msgid "where :math:`c_{i, \\sigma}^\\dagger` and :math:`c_{i, \\sigma}` are creation and annihilation operators of fermion at the site :math:`i` with spin :math:`\\sigma`. The operator :math:`n_{i, \\sigma}` is the number operator, which is defined by :math:`n_{i, \\sigma} = c_{i, \\sigma}^\\dagger c_{i, \\sigma}`. The matrix :math:`t_{i, j}` is a Hermitian matrix called interaction matrix. The parameter :math:`U` represents the strength of the interaction."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:1120
msgid "We can generate the corresponding Hamiltonian of a given lattice using ``FermiHubbardModel`` class. Here, we construct the Hamiltonian with uniform interaction and interaction parameters on a two-dimensional lattice."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:1153
msgid "To obtain the Hamiltonian in terms of the fermionic operators, we use ``second_q_ops`` method. The Hamiltonian is returned as an instance of ``FermionicOp``."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:1164
msgid "Note"
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:1166
msgid "The number of fermionic operators required is twice the number of lattice sites because of the spin degrees of freedom."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:1167
msgid "In the implementation, even indexes correspond to up-spin and odd indexes to down-spin."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:1756
msgid "``Lattice`` has weights on its edges, so we can define a general interaction matrix using a Lattice instance. Here, we consider the Fermi-Hubbard model on a general lattice on which non-uniform interaction parameters are given. In this case, the weights of the lattice are regarded as the interaction matrix. After generating the Hamiltonian (``second_q_ops``) we can use a qubit converter to generate the qubit operators and/or use any of the available algorithms to solver the corresponding lattice problem."
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:1908
msgid "LatticeModelProblem"
msgstr ""

#: ../../tutorials/10_lattice_models.ipynb:1910
msgid "Qiskit Nature also has a ``LatticeModelProblem`` class which allows the usage of the ``GroundStateEigensolver`` to calculate the ground state energy of a given lattice. You can use this class as follows:"
msgstr ""

