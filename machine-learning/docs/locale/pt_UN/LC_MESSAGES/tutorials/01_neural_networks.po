msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 16:59+0000\n"
"PO-Revision-Date: 2021-12-15 17:40\n"
"Last-Translator: \n"
"Language-Team: Portuguese (United)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pr\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/01_neural_networks.po\n"
"X-Crowdin-File-ID: 9628\n"
"Language: pt_UN\n"

#: ../../tutorials/01_neural_networks.ipynb:9
msgid "This page was generated from `docs/tutorials/01_neural_networks.ipynb`__."
msgstr "Esta página foi gerada a partir de `docs/tutorials/01_neural_networks.ipynb`__."

#: ../../tutorials/01_neural_networks.ipynb:9
msgid "Quantum Neural Networks"
msgstr "Redes Neurais Quânticas"

#: ../../tutorials/01_neural_networks.ipynb:11
msgid "This notebook demonstrates the different generic quantum neural network (QNN) implementations provided in Qiskit Machine Learning. The networks are meant as application-agnostic computational units that can be used for many different use cases. Depending on the application, a particular type of network might more or less suitable and might require to be set up in a particular way. The following different available neural networks will now be discussed in more detail:"
msgstr "Este notebook demonstra as diferentes implementações genéricas de rede neural (QNN) fornecidas no módulo Machine Learning do Qiskit. As redes são feitas como unidades computacionais de aplicação agnóstica que podem ser usadas para muitos casos de uso diferentes. Dependendo da aplicação, um determinado tipo de rede neural pode ser mais adequada ou menos adequada e pode exigir ser configurado de uma maneira particular. As seguintes redes neurais disponíveis agora serão discutidas em mais detalhes:"

#: ../../tutorials/01_neural_networks.ipynb:13
msgid "``NeuralNetwork``: The interface for neural networks."
msgstr "` ` NeuralNetwork ` `: A interface para redes neurais."

#: ../../tutorials/01_neural_networks.ipynb:14
msgid "``OpflowQNN``: A network based on the evaluation of quantum mechanical observables."
msgstr "§ ` OpflowQNN ` `: Uma rede baseada na avaliação de observáveis."

#: ../../tutorials/01_neural_networks.ipynb:15
msgid "``TwoLayerQNN``: A special ``OpflowQNN`` implementation for convenience."
msgstr "§ ` TwoLayerQNN ` `: Uma aplicação especial de ` ` OpflowQNN ` ` ` feita por conveniência."

#: ../../tutorials/01_neural_networks.ipynb:16
msgid "``CircuitQNN``: A network based on the samples resulting from measuring a quantum circuit."
msgstr "`` CircuitQNN ` `: Uma rede baseada nas amostras resultantes da medição de um circuito quântico."

#: ../../tutorials/01_neural_networks.ipynb:66
msgid "1. ``NeuralNetwork``"
msgstr "1. ``NeuralNetwork``"

#: ../../tutorials/01_neural_networks.ipynb:68
msgid "The ``NeuralNetwork`` represents the interface for all neural networks available in Qiskit Machine Learning. It exposes a forward and a backward pass taking the data samples and trainable weights as input. A ``NeuralNetwork`` does not contain any training capabilities, these are pushed to the actual algorithms / applications. Thus, a ``NeuralNetwork`` also does not store the values for trainable weights. In the following, different implementations of this interfaces are introduced."
msgstr "O ``NeuralNetwork`` representa a interface para toda a rede neural disponível no Qiskit Machine Learning. Ele expõe um passe para frente e um para trás tomando as amostras de dados e pesos treináveis como input. O ``NeuralNetwork`` não contém nenhuma capacidade de treino, estes são destinados aos algoritmos/aplicações. Assim, um ``NeuralNetwork`` também não armazena os valores para os pesos treináveis. A seguir, diferentes implementações dessas interfaces serão introduzidas."

#: ../../tutorials/01_neural_networks.ipynb:70
msgid "Suppose a ``NeuralNetwork`` called ``nn``. Then, the ``nn.forward(input, weights)`` pass takes either flat inputs for the data and weights of size ``nn.num_inputs`` and ``nn.num_weights``, respectively. ``NeuralNetwork`` supports batching of inputs and returns batches of output of the corresponding shape."
msgstr "Suponha um ``NeuralNetwork`` chamado ``nn``. Então, o ``nn.forward(input, weights)`` passa a receber inputs planos para os dados e pesos de tamanho ``nn.num_inputs`` e ``nn.num_weights``, respectivamente. ``NeuralNetwork`` suporta lotes de inputs e retorna com lotes de outputs da forma correspondente."

#: ../../tutorials/01_neural_networks.ipynb:82
msgid "2. ``OpflowQNN``"
msgstr "2. ``OpflowQNN``"

#: ../../tutorials/01_neural_networks.ipynb:84
msgid "The ``OpflowQNN`` takes a (parametrized) operator from Qiskit and leverages Qiskit’s gradient framework to provide the backward pass. Such an operator can for instance be an expected value of a quantum mechanical observable with respect to a parametrized quantum state. The Parameters can be used to load classical data as well as represent trainable weights. The ``OpflowQNN`` also allows lists of operators and more complex structures to construct more complex QNNs."
msgstr "O ``OpflowQNN`` recebe um operador (parametrizado) do Qiskit e alavanca o framework gradiente do Qiskit para fornecer o passe para trás. Tal operador pode por exemplo ser um valor esperado de um quantum mecânico observável com respeito a um estado quantum parametrizado. Os parâmetros podem ser usados para carregar dados clássicos e também para representar pesos treináveis. O ``OpflowQNN`` também permite lista de operadores e estruturas mais complexas para construir QNNs mais complexos."

#: ../../tutorials/01_neural_networks.ipynb:319
msgid "Combining multiple observables in a ``ListOp`` also allows to create more complex QNNs"
msgstr "Combinando múltiplos observáveis em uma ``ListOp`` também permite criar QNNs mais complexos"

#: ../../tutorials/01_neural_networks.ipynb:408
msgid "3. ``TwoLayerQNN``"
msgstr "3. ``TwoLayerQNN``"

#: ../../tutorials/01_neural_networks.ipynb:410
msgid "The ``TwoLayerQNN`` is a special ``OpflowQNN`` on :math:`n` qubits that consists of first a feature map to insert data and second an ansatz that is trained. The default observable is :math:`Z^{\\otimes n}`, i.e., parity."
msgstr "O ``TwoLayerQNN`` é um ``OpflowQNN`` especial em :math:`n`qubits que consiste em primeiro, um mapa de recursos para inserir dados e, em segundo lugar, um ansatz que é treinado. O padrão observável é :math:`Z^{\\otimes n}`, ou seja, paridade."

#: ../../tutorials/01_neural_networks.ipynb:607
msgid "4. ``CircuitQNN``"
msgstr "4. ``CircuitQNN``"

#: ../../tutorials/01_neural_networks.ipynb:609
msgid "The ``CircuitQNN`` is based on a (parametrized) ``QuantumCircuit``. This can take input as well as weight parameters and produces samples from the measurement. The samples can either be interpreted as probabilities of measuring the integer index corresponding to a bitstring or directly as a batch of binary output. In the case of probabilities, gradients can be estimated efficiently and the ``CircuitQNN`` provides a backward pass as well. In case of samples, differentiation is not possible and the backward pass returns ``(None, None)``."
msgstr "O ``CircuitQNN`` é baseado em um (parametrizado) ``QuantumCircuit``. Isto pode receber parâmetros de entrada bem como de peso e produzir amostras a partir da medição. As amostras podem ser interpretadas como probabilidades de medir o índice inteiro correspondendo a um bitstring ou diretamente como um lute de saída binário. No caso de probabilidades, gradientes podem ser estimados eficientemente e o ``CircuitQNN`` provê também um passe para trás. No caso de amostras, diferenciação não é possível e o passe para trás retorna ``(None, None)``."

#: ../../tutorials/01_neural_networks.ipynb:612
msgid "Further, the ``CircuitQNN`` allows to specify an ``interpret`` function to post-process the samples. This is expected to take a measured integer (from a bitstring) and map it to a new index, i.e. non-negative integer. In this case, the output shape needs to be provided and the probabilities are aggregated accordingly."
msgstr "Avançando, o ``CircuitQNN`` permite especificar uma função ``interpret`` para pós-processar as amostras. É esperado que pegue a medição de um inteiro (de uma bitstring) e mapeie isto para um novo índice, ou seja, inteiro não negativo. Neste caso, o formato da saída precisa ser especificado e as probabilidades são agregadas em conformidade."

#: ../../tutorials/01_neural_networks.ipynb:614
msgid "A ``CircuitQNN`` can be configured to return sparse as well as dense probability vectors. If no ``interpret`` function is used, the dimension of the probability vector scales exponentially with the number of qubits and a sparse recommendation is usually recommended. In case of an ``interpret`` function it depends on the expected outcome. If, for instance, an index is mapped to the parity of the corresponding bitstring, i.e., to 0 or 1, a dense output makes sense and the result will be a probability vector of length 2."
msgstr "Um ``CircuitQNN`` pode ser configurado para retornar vetores de probabilidade esparsos, bem como densos. Se nenhuma função ``interpret`` for utilizada, a dimensão do vetor de probabilidade aumenta exponencialmente com o número de qubits e uma recomendação esparsa é geralmente recomendada. No caso de uma função ``interpret`` depende do resultado esperado. Se, por exemplo, um índice for mapeado para a paridade da bitstring correspondente, ou seja, para 0 ou 1, uma saída densa faz sentido e o resultado será um vetor de probabilidade de tamanho 2."

#: ../../tutorials/01_neural_networks.ipynb:657
msgid "4.1 Output: sparse integer probabilities"
msgstr "4.1 Saída: probabilidades de número inteiro esparsas"

#: ../../tutorials/01_neural_networks.ipynb:754
msgid "4.2 Output: dense parity probabilities"
msgstr "4.2 Saída: probabilidade de paridade densa"

#: ../../tutorials/01_neural_networks.ipynb:865
msgid "4.3 Output: Samples"
msgstr "4.3 Saída: Amostras"

#: ../../tutorials/01_neural_networks.ipynb:980
msgid "4.4 Output: Parity Samples"
msgstr "4.4 Saída: Amostras de Paridade"

