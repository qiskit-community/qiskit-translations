msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-17 23:23+0000\n"
"PO-Revision-Date: 2022-02-18 00:39\n"
"Last-Translator: \n"
"Language-Team: Portuguese (United)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pr\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/02_neural_network_classifier_and_regressor.po\n"
"X-Crowdin-File-ID: 9630\n"
"Language: pt_UN\n"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "This page was generated from `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__."
msgstr "Esta página foi gerada a partir `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "Neural Network Classifier & Regressor"
msgstr "Classificador & Regressor utilizando uma Rede Neural"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:11
msgid "In this tutorial we show how the ``NeuralNetworkClassifier`` and ``NeuralNetworkRegressor`` are used. Both take as an input a (Quantum) ``NeuralNetwork`` and leverage it in a specific context. In both cases we also provide a pre-configured variant for convenience, the Variational Quantum Classifier (``VQC``) and Variational Quantum Regressor (``VQR``). The tutorial is structured as follows:"
msgstr "Neste tutorial nós mostramos como o ``NeuralNetworkClassifier`` e ``NeuralNetworkRegressor`` são usados. Ambos recebem como entrada um (Quantum) ``NeuralNetwork`` e alavancam em um contexto especifico. Em ambos os casos nós também provemos uma variante pré-configurada por conveniência, o Variational Quantum Classifier (``VQC``) e o Variational Quantum Regressor (``VQR``). O tutorial é estruturado da seguinte forma:"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:13
msgid "`Classification <#Classification>`__"
msgstr "`Classificação <#Classification>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:15
msgid "Classification with an ``OpflowQNN``"
msgstr "Classificação com um ``OpflowQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:16
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:307
msgid "Classification with a ``CircuitQNN``"
msgstr "Classificação com um ``CircuitQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:17
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:481
msgid "Variational Quantum Classifier (``VQC``)"
msgstr "Classificador Variacional Quântico (``VQC``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:19
msgid "`Regression <#Regression>`__"
msgstr "` Regressão <#Regression> ` __"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:21
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:645
msgid "Regression with an ``OpflowQNN``"
msgstr "Regressão com ` ` OpflowQNN ` `"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:22
msgid "Variational Quantum Regressor (``VQR``)"
msgstr "Regressor Variacional Quântico (` ` VQR ` `)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:74
msgid "Classification"
msgstr "Classificação"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:76
msgid "We prepare a simple classification dataset to illustrate the following algorithms."
msgstr "Preparamos um \"dataset\" de classificação simples para ilustrar os algoritmos a seguir."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:121
msgid "Classification with the an ``OpflowQNN``"
msgstr "Classificação com um ``OpflowQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:123
msgid "First we show how an ``OpflowQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``OpflowQNN`` is expected to return one-dimensional output in :math:`[-1, +1]`. This only works for binary classification and we assign the two classes to :math:`\\{-1, +1\\}`. For convenience, we use the ``TwoLayerQNN``, which is a special type of ``OpflowQNN`` defined via a feature map and an ansatz."
msgstr "Primeiro, nós mostramos como um ``OpflowQNN`` pode ser usado para classificação dentro de um ``NeuralNetworkClassifier``. Neste contexto, é esperado que o ``OpflowQNN`` retorne uma saída unidimensional :math:`[-1, +1]`. Isto funciona apenas para classificação binária e nós atribuímos as duas classes para :math:`\\{-1, +1\\}`. Por conveniência, nós utilizamos o ``TwoLayerQNN``, que é um tipo especial do ``OpflowQNN`` definido por meio de um mapa de características e um ansatz."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:180
msgid "We will add a callback function called ``callback_graph``. This will be called for each iteration of the optimizer and will be passed two parameters: the current weights and the value of the objective function at those weights. For our function, we append the value of the objective function to an array so we can plot iteration versus objective function value and update the graph with each iteration. However, you can do whatever you want with a callback function as long as it gets the two parameters mentioned passed."
msgstr "Vamos adicionar uma função de callback chamada ``callback_graph``. Ela será chamada para cada iteração do otimizador e dois parâmetros serão passados: os pesos atuais e o valor da função objetivo nesses pesos. Para nossa função, acrescentamos o valor da função objetivo a um array para que possamos plotar a iteração versus o valor da função objetivo e atualizar o gráfico com cada iteração. No entanto, você pode fazer o que quiser com uma função de callback, desde que os dois parâmetros mencionados sejam passados."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:309
msgid "Next we show how a ``CircuitQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``CircuitQNN`` is expected to return :math:`d`-dimensional probability vector as output, where :math:`d` denotes the number of classes. Sampling from a ``QuantumCircuit`` automatically results in a probability distribution and we just need to define a mapping from the measured bitstrings to the different classes. For binary classification we use the parity mapping."
msgstr "A seguir, mostramos como um ``CircuitQNN`` pode ser utilizado para classificação dentro de um ``NeuralNetworkClassifier``. Neste contexto, é esperado que o ``CircuitQNN`` retorne um vetor de probabilidade :math:`d`-dimensional como saída, onde :math:`d` denota o numero de classes. A amostragem de um ``QuantumCircuit`` automaticamente resulta na probabilidade de distribuição e nós precisamos apenas definir um mapeamento de medição de bitstrings para as diferentes classes. Para classificação binária nós utilizamos o mapeamento de paridade."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:483
msgid "The ``VQC`` is a special variant of the ``NeuralNetworkClassifier`` with a ``CircuitQNN``. It applies a parity mapping (or extensions to multiple classes) to map from the bitstring to the classification, which results in a probability vector, which is interpreted as a one-hot encoded result. By default, it applies this the ``CrossEntropyLoss`` function that expects labels given in one-hot encoded format and will return predictions in that format too."
msgstr "O ``VQC`` é uma variante especial do ``NeuralNetworkClassifier`` com a ``CircuitQNN``. Ele aplica um mapeamento de paridade (ou extensões para várias classes) para mapear do bitstring para classificação, o qual resulta em um vetor de probabilidade, que é interpretado como um resultado codificado one-hot. Por padrão, ele aplica a função ``CrossEntropyLoss`` que espera rótulos dados em formato de codificação one-hot e irá retornar previsões neste formato também."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:602
msgid "Regression"
msgstr "Regressão"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:604
msgid "We prepare a simple regression dataset to illustrate the following algorithms."
msgstr "Preparamos um conjunto de dados de regressão simples para ilustrar os algoritmos a seguir."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:647
msgid "Here we restrict to regression with an ``OpflowQNN`` that returns values in :math:`[-1, +1]`. More complex and also multi-dimensional models could be constructed, also based on ``CircuitQNN`` but that exceeds the scope of this tutorial."
msgstr "Aqui nós restringimos para regressão com um ``OpflowQNN`` que retorna valores em :math:`[-1, +1]`. Modelos mais complexos e também multi-dimensionais podem ser construídos, também baseados no ``CircuitQNN`` mas que excedem o escopo deste tutorial."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:774
msgid "Regression with the Variational Quantum Regressor (``VQR``)"
msgstr "Regressão com o Regressor Quântico Variacional (`` VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:776
msgid "Similar to the ``VQC`` for classification, the ``VQR`` is a special variant of the ``NeuralNetworkRegressor`` with a ``OpflowQNN``. By default it considers the ``L2Loss`` function to minimize the mean squared error between predictions and targets."
msgstr "Similar ao ``VQC`` para classificação, o ``VQR`` é uma variante especial do ``NeuralNetworkRegressor`` com um ``OpflowQNN``. Por padrão, ele considera a função ``L2Loss`` para minimizar o erro quadrático médio entre as previsões e os alvos."

