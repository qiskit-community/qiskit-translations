msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-29 17:32+0000\n"
"PO-Revision-Date: 2022-04-29 18:16\n"
"Last-Translator: \n"
"Language-Team: Portuguese (United)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pr\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/05_torch_connector.po\n"
"X-Crowdin-File-ID: 9636\n"
"Language: pt_UN\n"

#: ../../tutorials/05_torch_connector.ipynb:9
msgid "This page was generated from `docs/tutorials/05_torch_connector.ipynb`__."
msgstr "Esta p√°gina foi gerada a partir `docs/tutorials/05_torch_connector.ipynb`__."

#: ../../tutorials/05_torch_connector.ipynb:9
msgid "Torch Connector and Hybrid QNNs"
msgstr "Conector Torch e QNNs h√≠bridas"

#: ../../tutorials/05_torch_connector.ipynb:11
msgid "This tutorial introduces Qiskit‚Äôs ``TorchConnector`` class, and demonstrates how the ``TorchConnector`` allows for a natural integration of any ``NeuralNetwork`` from Qiskit Machine Learning into a PyTorch workflow. ``TorchConnector`` takes a Qiskit ``NeuralNetwork`` and makes it available as a PyTorch ``Module``. The resulting module can be seamlessly incorporated into PyTorch classical architectures and trained jointly without additional considerations, enabling the development and testing of novel **hybrid quantum-classical** machine learning architectures."
msgstr "Este tutorial introduz a classe ``TorchConnector`` do Qiskit, e demonstra como o ``TorchConnector`` permite permite uma integra√ß√£o natural de qualquer ``NeuralNetwork`` do Qiskit Machine Learning em um fluxo de trabalho PyTorch. O ``TorchConnector`` recebe um Qiskit ``NeuralNetwork`` e o torna dispon√≠vel como um ``M√≥dulo`` PyTorch. O m√≥dulo resultante pode ser perfeitamente incorporado na arquitetura cl√°ssica do PyTorch e treinado em conjunto sem considera√ß√µes adicionais, permitindo o desenvolvimento e o teste de rela√ß√£o **h√≠brido qu√¢ntico-classico** na arquitetura de machine learning."

#: ../../tutorials/05_torch_connector.ipynb:15
msgid "Content:"
msgstr "Conte√∫do:"

#: ../../tutorials/05_torch_connector.ipynb:17
msgid "`Part 1: Simple Classification & Regression <#Part-1:-Simple-Classification-&-Regression>`__"
msgstr "`Parte 1: Classifica√ß√£o e Regress√£o Simples <#Part-1:-Simple-Classification-&-Regression>`__"

#: ../../tutorials/05_torch_connector.ipynb:19
msgid "The first part of this tutorial shows how quantum neural networks can be trained using PyTorch‚Äôs automatic differentiation engine (``torch.autograd``, `link <https://pytorch.org/tutorials/beginner/blitz/autograd_tutorial.html>`__) for simple classification and regression tasks."
msgstr "A primeira parte deste tutorial mostra como redes neurais podem ser treinadas usando a ferramenta de diferencia√ß√£o autom√°tica do PyTorch (``torch.autograd``, `link <https://pytorch.org/tutorials/beginner/blitz/autograd_tutorial.html>`__) para tarefas simples de classifica√ß√£o e regress√£o."

#: ../../tutorials/05_torch_connector.ipynb:21
msgid "`Classification <#1.-Classification>`__"
msgstr "`Classifica√ß√£o <#1.-Classification>`__"

#: ../../tutorials/05_torch_connector.ipynb:23
msgid "Classification with PyTorch and ``OpflowQNN``"
msgstr "Classifica√ß√£o com PyTorch e ``OpflowQNN``"

#: ../../tutorials/05_torch_connector.ipynb:24
msgid "Classification with PyTorch and ``CircuitQNN``"
msgstr "Classifica√ß√£o com PyTorch e ``CircuitQNN``"

#: ../../tutorials/05_torch_connector.ipynb:26
msgid "`Regression <#2.-Regression>`__"
msgstr "`Regress√£o <#2.-Regression>`__"

#: ../../tutorials/05_torch_connector.ipynb:28
msgid "Regression with PyTorch and ``OpflowQNN``"
msgstr "Regress√£o com PyTorch e ``OpflowQNN``"

#: ../../tutorials/05_torch_connector.ipynb:30
msgid "`Part 2: MNIST Classification, Hybrid QNNs <#Part-2:-MNIST-Classification,-Hybrid-QNNs>`__"
msgstr "`Parte 2: Classifica√ß√£o MNIST, QNNs H√≠brido <#Part-2:-MNIST-Classification,-Hybrid-QNNs>`__"

#: ../../tutorials/05_torch_connector.ipynb:32
msgid "The second part of this tutorial illustrates how to embed a (Quantum) ``NeuralNetwork`` into a target PyTorch workflow (in this case, a typical CNN architecture) to classify MNIST data in a hybrid quantum-classical manner."
msgstr "A segunda parte deste tutorial ilustra como embutir uma ``NeuralNetwork`` (Qu√¢ntico) em um fluxo de trabalho alvo PyTorch (Neste caso, uma arquitetura t√≠pica CNN) para classificar dados MNIST de uma maneira h√≠brida qu√¢ntica-cl√°ssica."

#: ../../tutorials/05_torch_connector.ipynb:85
msgid "Part 1: Simple Classification & Regression"
msgstr "Parte 1: Classifica√ß√£o e regress√£o simples"

#: ../../tutorials/05_torch_connector.ipynb:97
msgid "1. Classification"
msgstr "1. Classifica√ß√£o"

#: ../../tutorials/05_torch_connector.ipynb:99
msgid "First, we show how ``TorchConnector`` allows to train a Quantum ``NeuralNetwork`` to solve a classification tasks using PyTorch‚Äôs automatic differentiation engine. In order to illustrate this, we will perform **binary classification** on a randomly generated dataset."
msgstr "Primeiro, n√≥s mostramos como o ``TorchConnector`` permite treinar uma ``NeuralNetwork`` Qu√¢ntica para resolver tarefas de classifica√ß√£o usando sistema de diferencia√ß√£o autom√°tica do PyTorch. Em ordem de ilustrar isso, n√≥s vamos executar **classifica√ß√£o bin√°ria** em um conjunto de dados gerado randomicamente."

#: ../../tutorials/05_torch_connector.ipynb:152
msgid "A. Classification with PyTorch and ``OpflowQNN``"
msgstr "A. Classifica√ß√£o com PyTorch e ``OpflowQNN``"

#: ../../tutorials/05_torch_connector.ipynb:154
msgid "Linking an ``OpflowQNN`` to PyTorch is relatively straightforward. Here we illustrate this using the ``TwoLayerQNN``, a sub-case of ``OpflowQNN`` introduced in previous tutorials."
msgstr "Ligando um ``OpflowQNN`` no PyTorch √© relativamente simples. Aqui, ilustramos isto usando o ``TwoLayerQNN``, um sub-caso do ``OpflowQNN`` introduzido em tutoriais passados."

#: ../../tutorials/05_torch_connector.ipynb:295
msgid "Optimizer"
msgstr "Otimizador"

#: ../../tutorials/05_torch_connector.ipynb:297
msgid "The choice of optimizer for training any machine learning model can be crucial in determining the success of our training‚Äôs outcome. When using ``TorchConnector``, we get access to all of the optimizer algorithms defined in the [``torch.optim``] package (`link <https://pytorch.org/docs/stable/optim.html>`__). Some of the most famous algorithms used in popular machine learning architectures include *Adam*, *SGD*, or *Adagrad*. However, for this tutorial we will be using the L-BFGS algorithm (``torch.optim.LBFGS``), one of the most well know second-order optimization algorithms for numerical optimization."
msgstr "A escolha do otimizador para treinar qualquer modelo de machine learning pode ser crucial em determinar o sucesso do nosso resultado de treinamento. Quando usamos o ``TorchConnector``, n√≥s ganhamos acesso a todos os algoritmos otimizadores definidos no pacote [``torch.optim`` (`link <https://pytorch.org/docs/stable/optim.html>`__). Alguns dos algoritmos mais famosos usados em populares arquiteturas de machine learning, incluindo *Adam*, *SGD*, ou *Adagrad*. Contudo, para este tutorial vamos usar o algoritmo L-BFGS (``torch.optim.LBFGS``), um dos mais bem conhecidos algoritmo otimizador de segunda-ordem para otimiza√ß√£o num√©rica."

#: ../../tutorials/05_torch_connector.ipynb:301
msgid "Loss Function"
msgstr "Fun√ßao de Perda"

#: ../../tutorials/05_torch_connector.ipynb:303
msgid "As for the loss function, we can also take advantage of PyTorch‚Äôs pre-defined modules from ``torch.nn``, such as the `Cross-Entropy <https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html>`__ or `Mean Squared Error <https://pytorch.org/docs/stable/generated/torch.nn.MSELoss.html>`__ losses."
msgstr "Quanto a fun√ß√£o de perda, tamb√©m podemos tirar proveito dos m√≥dulos predefinidos do PyTorch do ``torch.nn``, como o `Cross-Entropy <https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html>`__ ou `Mean Squared Error <https://pytorch.org/docs/stable/generated/torch.nn.MSELoss.html>`__."

#: ../../tutorials/05_torch_connector.ipynb:305
msgid "**üí° Clarification :** In classical machine learning, the general rule of thumb is to apply a Cross-Entropy loss to classification tasks, and MSE loss to regression tasks. However, this recommendation is given under the assumption that the output of the classification network is a class probability value in the [0,1] range (usually this is achieved through a Softmax layer). Because the following example for ``TwoLayerQNN`` does not include such layer, and we don‚Äôt apply any mapping to the output (the following section shows an example of application of parity mapping with ``CircuitQNNs``), the QNN‚Äôs output can take any value in the range [-1,1]. In case you were wondering, this is the reason why this particular example uses MSELoss for classification despite it not being the norm (but we encourage you to experiment with different loss functions and see how they can impact training results)."
msgstr "**üí° Esclarecimento :** Em um machine learning cl√°ssico, a regra geral √© aplicar uma perda de entropia cruzada para classificar tarefas, e perda de MSE para regress√£o de tarefas. Contudo, esta recomenda√ß√£o √© dada assumindo que a sa√≠da da rede de classifica√ß√£o √© um valor de probabilidade de classe no intervalo de [0,1] (Geralmente isto se consegue por meio de uma camada Softmax). Porque o exemplo a seguir para ``TwoLayerQNN`` n√£o inclui essa camada, e n√≥s n√£o aplicamos nenhum mapeamento para sa√≠da (A sess√£o a seguir apresenta um exemplo de aplica√ß√£o de mapeamento de paridade com ``CircuitQNNs``), as sa√≠das QNNs podem tomar qualquer valor no intervalo [-1,1]. Caso voc√™ esteja se perguntando, est√° √© a raz√£o pela qual este exemplo em particular usa MSELoss para classifica√ß√£o apesar de n√£o ser uma norma (Mas n√≥s encorajamos voc√™ a experimentar com diferentes fun√ß√µes de perda e ver como elas podem impactar nos resultados do treino)."

#: ../../tutorials/05_torch_connector.ipynb:512
#: ../../tutorials/05_torch_connector.ipynb:781
msgid "The red circles indicate wrongly classified data points."
msgstr "Os c√≠rculos vermelhos indicam pontos de dados classificados incorretamente."

#: ../../tutorials/05_torch_connector.ipynb:524
msgid "B. Classification with PyTorch and ``CircuitQNN``"
msgstr "B. Classifica√ß√£o com PyTorch e ``CircuitQNN``"

#: ../../tutorials/05_torch_connector.ipynb:526
msgid "Linking an ``CircuitQNN`` to PyTorch requires a bit more attention than ``OpflowQNN``. Without the correct setup, backpropagation is not possible."
msgstr "Ligar o ``CircuitQNN`` ao PyTorch requer um pouco mais aten√ß√£o que o ``OpflowQNN``. Sem as configura√ß√µes corretas, retropropaga√ß√£o n√£o √© poss√≠vel."

#: ../../tutorials/05_torch_connector.ipynb:528
msgid "In particular, we must make sure that we are returning a dense array of probabilities in the network‚Äôs forward pass (``sparse=False``). This parameter is set up to ``False`` by default, so we just have to make sure that it has not been changed."
msgstr "Em particular, devemos ter certeza de que estamos retornando uma matriz densa de probabilidades no passe de encaminhamento de rede (``sparse=False``). Este par√¢metro √© configurado como ``False`` por padr√£o, ent√£o n√≥s apenas precisamos ter certeza de que ele n√£o foi alterado."

#: ../../tutorials/05_torch_connector.ipynb:530
msgid "**‚ö†Ô∏è Attention:** If we define a custom interpret function ( in the example: ``parity``), we must remember to explicitly provide the desired output shape ( in the example: ``2``). For more info on the initial parameter setup for ``CircuitQNN``, please check out the `official qiskit documentation <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__."
msgstr "**‚ö†Ô∏è Aten√ß√£o:** Se n√≥s definirmos uma fun√ß√£o de interpreta√ß√£o personalizada (No exemplo: ``paridade``), n√≥s devemos lembrar de fornecer explicitamente a forma de sa√≠da desejada (No exemplo: ``2``). Para mais informa√ß√µes sobre a configura√ß√£o dos par√¢metros iniciais para ``CircuitQNN``, por favor v√° at√© `Documenta√ß√£o oficial do Qiskit <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__."

#: ../../tutorials/05_torch_connector.ipynb:602
#: ../../tutorials/05_torch_connector.ipynb:930
msgid "For a reminder on optimizer and loss function choices, you can go back to `this section <#Optimizer>`__."
msgstr "Para um lembrete sobre as op√ß√µes de fun√ß√£o de perda e otimizador, voc√™ pode voltar para `esta sess√£o <#Optimizer>`__."

#: ../../tutorials/05_torch_connector.ipynb:793
msgid "2. Regression"
msgstr "2. Regress√£o"

#: ../../tutorials/05_torch_connector.ipynb:795
msgid "We use a model based on the ``TwoLayerQNN`` to also illustrate how to perform a regression task. The chosen dataset in this case is randomly generated following a sine wave."
msgstr "N√≥s usamos um modelo baseado em ``TwoLayerQNN`` para tamb√©m ilustrar como executar uma tarefa de regress√£o. A escolha de conjunto de dados neste caso √© randomicamente gerada seguindo uma onda senoidal."

#: ../../tutorials/05_torch_connector.ipynb:836
msgid "A. Regression with PyTorch and ``OpflowQNN``"
msgstr "A. Regress√£o com PyTorch e ``OpflowQNN``"

#: ../../tutorials/05_torch_connector.ipynb:847
msgid "The network definition and training loop will be analogous to those of the classification task using ``TwoLayerQNN``. In this case, we define our own feature map and ansatz, instead of using the default values."
msgstr "A defini√ß√£o de rede e treinamento de loop ser√£o an√°logos aos da tarefa de classifica√ß√£o usando o ``TwoLayerQNN``. Neste caso, n√≥s definimos nosso pr√≥prio mapa de recursos e ansatz, ao inv√©s de usar os valores padr√µes."

#: ../../tutorials/05_torch_connector.ipynb:1067
msgid "Part 2: MNIST Classification, Hybrid QNNs"
msgstr "Parte 2: Classifica√ß√£o MNIST, QNNs h√≠bridas"

#: ../../tutorials/05_torch_connector.ipynb:1069
msgid "In this second part, we show how to leverage a hybrid quantum-classical neural network using ``TorchConnector``, to perform a more complex image classification task on the MNIST handwritten digits dataset."
msgstr "Nesta segunda parte, n√≥s mostramos como aproveitar uma rede neural h√≠brida qu√¢ntica-cl√°ssica usando ``TorchConnector``, para executar uma imagem de tarefa de classifica√ß√£o mais complexa no conjunto de dados de d√≠gitos manuscritos MNIST."

#: ../../tutorials/05_torch_connector.ipynb:1071
msgid "For a more detailed (pre-``TorchConnector``) explanation on hybrid quantum-classical neural networks, you can check out the corresponding section in the `Qiskit Textbook <https://qiskit.org/textbook/ch-machine-learning/machine-learning-qiskit-pytorch.html>`__."
msgstr "Para uma explica√ß√£o mais detalhada sobre (pre-``TorchConnector``) uma rede neural h√≠brida qu√¢ntica-cl√°ssica, voc√™ pode checar a sess√£o correspondente no `Qiskit Textbook <https://qiskit.org/textbook/ch-machine-learning/machine-learning-qiskit-pytorch.html>`__."

#: ../../tutorials/05_torch_connector.ipynb:1110
msgid "Step 1: Defining Data-loaders for train and test"
msgstr "Passo 1: Definindo Data-Loaders para treinamento e teste"

#: ../../tutorials/05_torch_connector.ipynb:1121
msgid "We take advantage of the ``torchvision`` `API <https://pytorch.org/vision/stable/datasets.html>`__ to directly load a subset of the `MNIST dataset <https://en.wikipedia.org/wiki/MNIST_database>`__ and define torch ``DataLoader``\\ s (`link <https://pytorch.org/docs/stable/data.html>`__) for train and test."
msgstr "N√≥s aproveitamos a vantagem da ``torchvision`` `API <https://pytorch.org/vision/stable/datasets.html>`__ para carregar diretamente um subconjunto do `MNIST dataset <https://en.wikipedia.org/wiki/MNIST_database>`__ e definir o Torch ``DataLoader``\\ s (`link <https://pytorch.org/docs/stable/data.html>`__) para treinamento e teste."

#: ../../tutorials/05_torch_connector.ipynb:1164
msgid "If we perform a quick visualization we can see that the train dataset consists of images of handwritten 0s and 1s."
msgstr "Se n√≥s executarmos uma visualiza√ß√£o simples, n√≥s podemos ver que este treinamento de conjunto de dados consiste em imagens de 0s e 1s manuscritos."

#: ../../tutorials/05_torch_connector.ipynb:1238
msgid "Step 2: Defining the QNN and Hybrid Model"
msgstr "Passo 2: Definindo o QNN e Modelo H√≠brido"

#: ../../tutorials/05_torch_connector.ipynb:1249
msgid "This second step shows the power of the ``TorchConnector``. After defining our quantum neural network layer (in this case, a ``TwoLayerQNN``), we can embed it into a layer in our torch ``Module`` by initializing a torch connector as ``TorchConnector(qnn)``."
msgstr "Neste segundo passo mostramos o poder do ``TorchConnector``. Depois de definirmos nossa camada de rede neural (neste caso, um ``TwoLayerQNN``), n√≥s podemos embutir isto em uma camada em nosso ``Module`` Torch inicializando o conector Torch como ``TorchConnector(qnn)``."

#: ../../tutorials/05_torch_connector.ipynb:1251
msgid "**‚ö†Ô∏è Attention:** In order to have an adequate gradient backpropagation in hybrid models, we MUST set the initial parameter ``input_gradients`` to TRUE during the qnn initialization."
msgstr "**‚ö†Ô∏è Aten√ß√£o:** Em ordem de ter uma retropropaga√ß√£o gradiente adequada em modelos h√≠bridos, n√≥s DEVEMOS configurar o par√¢metro inicial ``input_gradients`` como TRUE durante a inicializa√ß√£o qnn."

#: ../../tutorials/05_torch_connector.ipynb:1379
msgid "Step 3: Training"
msgstr "Passo 3: Treinamento"

#: ../../tutorials/05_torch_connector.ipynb:1492
msgid "Now we‚Äôll save the trained model, just to show how a hybrid model can be saved and re-used later for inference. To save and load hybrid models, when using the TorchConnector, follow the PyTorch recommendations of saving and loading the models."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:1514
msgid "Step 4: Evaluation"
msgstr "Passo 4: Avalia√ß√£o"

#: ../../tutorials/05_torch_connector.ipynb:1525
msgid "We start from recreating the model and loading the state from the previously saved file. You create a QNN layer using another simulator or a real hardware. So, you can train a model on real hardware available on the cloud and then for inference use a simulator or vice verse. For a sake of simplicity we create a new quantum neural network in the same way as above."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:1671
msgid "üéâüéâüéâüéâ **You are now able to experiment with your own hybrid datasets and architectures using Qiskit Machine Learning.** **Good Luck!**"
msgstr "üéâüéâüéâüéâ **Voc√™ agora √© capaz de experimentar os seus pr√≥prios conjuntos de dados h√≠bridos e arquiteturas usando o Qiskit Machine Learning.** **Boa sorte!**"

