msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-08 23:29+0000\n"
"PO-Revision-Date: 2022-11-09 00:11\n"
"Last-Translator: \n"
"Language-Team: Portuguese (United)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pr\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/08_quantum_kernel_trainer.po\n"
"X-Crowdin-File-ID: 9723\n"
"Language: pt_UN\n"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:9
msgid "This page was generated from `docs/tutorials/08_quantum_kernel_trainer.ipynb`__."
msgstr "Esta página foi gerada a partir de `docs/tutorials/08_quantum_kernel_trainer.ipynb`__."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:9
msgid "Quantum Kernel Training for Machine Learning Applications"
msgstr "Treinamento de Kernel Quântico para Aplicatições em Machine Learning"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:11
msgid "In this tutorial, we will train a quantum kernel on a labeled dataset for a machine learning application. To illustrate the basic steps, we will use Quantum Kernel Alignment (QKA) for a binary classification task. QKA is a technique that iteratively adapts a parametrized quantum kernel to a dataset while converging to the maximum SVM margin. More information about QKA can be found in the preprint, `“Covariant quantum kernels for data with group structure.” <https://arxiv.org/abs/2105.03406>`__"
msgstr "Neste tutorial, treinaremos um kernel quântico em um conjunto de dados rotulado para aplicação de machine learning. Para ilustrar as etapas básicas, usaremos o Quantum Kernel Alignment (QKA) para uma tarefa de classificação binária. QKA é uma técnica que adapta iterativamente um kernel quântico parametrizado a um conjunto de dados enquanto converge para a margem SVM máxima. Mais informações sobre o QKA podem ser encontradas no artigo, `“Covariant quantum kernels for data with group structure.” <https://arxiv.org/abs/2105.03406>`__"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:13
msgid "The entry point to training a quantum kernel is the ``QuantumKernelTrainer`` class. The basic steps are:"
msgstr "O ponto de entrada para treinar um kernel quântico é a classe ``QuantumKernelTrainer``. Os passos básicos são:"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:15
msgid "Prepare the dataset"
msgstr "Prepare o dataset"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:16
msgid "Define the quantum feature map"
msgstr "Definir o mapa de recursos quânticos"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:17
msgid "Set up an instance of ``TrainableKernel`` and ``QuantumKernelTrainer`` objects"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:18
msgid "Use the ``QuantumKernelTrainer.fit`` method to train the kernel parameters on the dataset"
msgstr "Use o método ``QuantumKernelTrainer.fit`` para treinar os parâmetros do kernel no conjunto de dados"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:19
msgid "Pass the trained quantum kernel to a machine learning model"
msgstr "Passe o kernel quântico treinado para um modelo de machine learning"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:31
msgid "Import Local, External, and Qiskit Packages and define a callback class for our optimizer"
msgstr "Importe pacotes locais, externos e do Qiskit e defina uma classe de callback para nosso otimizador"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:96
msgid "Prepare the Dataset"
msgstr "Prepare o Dataset"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:98
msgid "In this guide, we will use Qiskit Machine Learning’s ``ad_hoc.py`` dataset to demonstrate the kernel training process. See the documentation `here <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.datasets.ad_hoc_data.html>`__."
msgstr "Neste guia, usaremos o conjunto de dados ``ad_hoc.py`` do Qiskit Machine Learning para demonstrar o processo de treinamento do kernel. Consulte a documentação `aqui <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.datasets.ad_hoc_data.html>`__."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:186
msgid "Define the Quantum Feature Map"
msgstr "Defina o mapa de recursos quânticos"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:188
msgid "Next, we set up the quantum feature map, which encodes classical data into the quantum state space. Here, we use a ``QuantumCircuit`` to set up a trainable rotation layer and a ``ZZFeatureMap`` from ``Qiskit`` to represent the input data."
msgstr "Em seguida, configuramos o mapa de recursos quânticos, que codifica dados clássicos no espaço de estados quânticos. Aqui, usamos um ``QuantumCircuit`` para configurar uma camada de rotação treinável e um ``ZZFeatureMap`` do ``Qiskit`` para representar os dados de entrada."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:262
msgid "Set Up the Quantum Kernel and Quantum Kernel Trainer"
msgstr "Configure o Quantum Kernel e o Quantum Kernel Trainer"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:264
msgid "To train the quantum kernel, we will use an instance of ``TrainableFidelityQuantumKernel`` (holds the feature map and its parameters) and ``QuantumKernelTrainer`` (manages the training process)."
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:266
msgid "We will train using the Quantum Kernel Alignment technique by selecting the kernel loss function, ``SVCLoss``, as input to the ``QuantumKernelTrainer``. Since this is a Qiskit-supported loss, we can use the string, ``\"svc_loss\"``; however, note that default settings are used when passing the loss as a string. For custom settings, instantiate explicitly with the desired options, and pass the ``KernelLoss`` object to the ``QuantumKernelTrainer``."
msgstr "Vamos treinar usando a técnica Quantum Kernel Alignment selecionando a função de perda do kernel, ``SVCLoss``, como entrada para o ``QuantumKernelTrainer``. Como esta é uma perda suportada pelo Qiskit, podemos usar a string, ``\"svc_loss\"``; no entanto, observe que as configurações padrão são usadas ao passar a perda como uma string. Para configurações personalizadas, instancie explicitamente com as opções desejadas e passe o objeto ``KernelLoss`` para o ``QuantumKernelTrainer``."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:268
msgid "We will select SPSA as the optimizer and initialize the trainable parameter with the ``initial_point`` argument. Note: The length of the list passed as the ``initial_point`` argument must equal the number of trainable parameters in the feature map."
msgstr "Vamos selecionar SPSA como o otimizador e inicializar o parâmetro treinável com o argumento ``initial_point``. Nota: O comprimento da lista passada como argumento ``initial_point`` deve ser igual ao número de parâmetros treináveis no mapa de recursos."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:300
msgid "Train the Quantum Kernel"
msgstr "Treine o Kernel Quântico"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:302
msgid "To train the quantum kernel on the dataset (samples and labels), we call the ``fit`` method of ``QuantumKernelTrainer``."
msgstr "Para treinar o kernel quântico no conjunto de dados (amostras e rótulos), chamamos o método ``fit`` de ``QuantumKernelTrainer``."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:304
msgid "The output of ``QuantumKernelTrainer.fit`` is a ``QuantumKernelTrainerResult`` object. The results object contains the following class fields: - ``optimal_parameters``: A dictionary containing {parameter: optimal value} pairs - ``optimal_point``: The optimal parameter value found in training - ``optimal_value``: The value of the loss function at the optimal point - ``optimizer_evals``: The number of evaluations performed by the optimizer - ``optimizer_time``: The amount of time taken to perform optimization - ``quantum_kernel``: A ``TrainableKernel`` object with optimal values bound to the feature map"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:375
msgid "Fit and Test the Model"
msgstr "Ajuste e teste o modelo"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:377
msgid "We can pass the trained quantum kernel to a machine learning model, then fit the model and test on new data. Here, we will use Qiskit’s ``QSVC`` for classification."
msgstr "Podemos passar o kernel quântico treinado para um modelo de machine learning, ajustar o modelo e testar novos dados. Aqui, usaremos o ``QSVC`` do Qiskit para classificação."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:434
msgid "Visualize the Kernel Training Process"
msgstr "Visualize o processo de treinamento do kernel"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:436
msgid "From the callback data, we can plot how the loss evolves during the training process. We see it converges rapidly and reaches high test accuracy on this dataset with our choice of inputs."
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:438
msgid "We can also display the final kernel matrix, which is a measure of similarity between the training samples."
msgstr "Também podemos exibir a matriz final do kernel, que é uma medida de similaridade entre as amostras de treinamento."

