msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-29 17:32+0000\n"
"PO-Revision-Date: 2022-06-21 19:23\n"
"Last-Translator: \n"
"Language-Team: Portuguese (United)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pr\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/09_saving_and_loading models.po\n"
"X-Crowdin-File-ID: 9728\n"
"Language: pt_UN\n"

#: ../../tutorials/09_saving_and_loading models.ipynb:9
msgid "This page was generated from `docs/tutorials/09_saving_and_loading models.ipynb`__."
msgstr "Esta página foi gerada a partir de `docs/tutorials/09_saving_and_loading models.ipynb`__."

#: ../../tutorials/09_saving_and_loading models.ipynb:9
msgid "Saving, Loading Qiskit Machine Learning Models and Continuous Training"
msgstr "Salvando, carregando modelos de machine learning do Qiskit e treinamento contínuo"

#: ../../tutorials/09_saving_and_loading models.ipynb:11
msgid "In this tutorial we will show how to save and load Qiskit machine learning models. Ability to save a model is very important, especially when a significant amount of time is invested in training a model on a real hardware. Also, we will show how to resume training of the previously saved model."
msgstr "Neste tutorial, mostraremos como salvar e carregar modelos de aprendizado de máquina do Qiskit. A capacidade de salvar um modelo é muito importante, especialmente quando uma quantidade significativa de tempo é investida no treinamento de um modelo em um hardware real. Além disso, mostraremos como retomar o treinamento do modelo salvo anteriormente."

#: ../../tutorials/09_saving_and_loading models.ipynb:13
msgid "In this tutorial we will cover how to:"
msgstr "Neste tutorial, abordaremos como:"

#: ../../tutorials/09_saving_and_loading models.ipynb:15
msgid "Generate a simple dataset, split it into training/test datasets and plot them"
msgstr "Gere um conjunto de dados simples, divida-o em conjuntos de dados de treinamento/teste e plote-os"

#: ../../tutorials/09_saving_and_loading models.ipynb:16
msgid "Train and save a model"
msgstr "Treine e salve um modelo"

#: ../../tutorials/09_saving_and_loading models.ipynb:17
msgid "Load a saved model and resume training"
msgstr "Carregue um modelo salvo e retome o treinamento"

#: ../../tutorials/09_saving_and_loading models.ipynb:18
msgid "Evaluate performance of models"
msgstr "Avalie o desempenho dos modelos"

#: ../../tutorials/09_saving_and_loading models.ipynb:19
msgid "PyTorch hybrid models"
msgstr "Modelos híbridos do PyTorch"

#: ../../tutorials/09_saving_and_loading models.ipynb:30
msgid "First off, we start from the required imports. We’ll heavily use SciKit-Learn on the data preparation step. In the next cell we also fix a random seed for reproducibility purposes."
msgstr "Primeiro, começamos com as importações necessárias. Usaremos bastante o SciKit-Learn na etapa de preparação de dados. Na próxima célula também fixamos uma semente aleatória para fins de reprodutibilidade."

#: ../../tutorials/09_saving_and_loading models.ipynb:64
msgid "We will be using two quantum simulators. We’ll start training on the QASM simulator then will resume training on the statevector simulator. The approach shown in this tutorial can be used to train a model on a real hardware available on the cloud and then re-use the model for inference on a local simulator."
msgstr "Estaremos usando dois simuladores quânticos. Começaremos o treinamento no simulador QASM e retomaremos o treinamento no simulador de vetor de estado. A abordagem mostrada neste tutorial pode ser usada para treinar um modelo em um hardware real disponível na nuvem e, em seguida, reutilizar o modelo para inferência em um simulador local."

#: ../../tutorials/09_saving_and_loading models.ipynb:97
msgid "1. Prepare a dataset"
msgstr "1. Prepare o dataset"

#: ../../tutorials/09_saving_and_loading models.ipynb:99
msgid "Next step is to prepare a dataset. Here, we generate some data in the same way as in other tutorials. The difference is that we apply some transformations to the generated data. We generates ``40`` samples, each sample has ``2`` features, so our features is an array of shape ``(40, 2)``. Labels are obtained by summing up features by columns and if the sum is more than ``1`` then this sample is labeled as ``1`` and ``0`` otherwise."
msgstr "O próximo passo é preparar um conjunto de dados. Aqui, geramos alguns dados da mesma forma que em outros tutoriais. A diferença é que aplicamos algumas transformações nos dados gerados. Nós geramos ``40`` amostras, cada amostra tem ``2`` recursos, então nossos recursos são uma matriz de forma ``(40, 2)``. Os rótulos são obtidos somando os recursos por colunas e, se a soma for maior que ``1``, essa amostra será rotulada como ``1`` e, caso contrário, ``0``."

#: ../../tutorials/09_saving_and_loading models.ipynb:123
msgid "Then, we scale down our features into a range of ``[0, 1]`` by applying ``MinMaxScaler`` from SciKit-Learn. Model training convergence is better when this transformation is applied."
msgstr "Em seguida, reduzimos nossos recursos em uma faixa de ``[0, 1]`` aplicando ``MinMaxScaler`` do SciKit-Learn. A convergência de treinamento do modelo é melhor quando essa transformação é aplicada."

#: ../../tutorials/09_saving_and_loading models.ipynb:169
msgid "Let’s take a look at the features of the first ``5`` samples of our dataset after the transformation."
msgstr "Vamos dar uma olhada nos recursos das primeiras ``5`` amostras do nosso conjunto de dados após a transformação."

#: ../../tutorials/09_saving_and_loading models.ipynb:226
msgid "We choose ``VQC`` or Variational Quantum Classifier as a model we will train. This model, by default, takes one-hot encoded labels, so we have to transform the labels that are in the set of ``{0, 1}`` into one-hot representation. We employ SciKit-Learn for this transformation as well. Please note that the input array must be reshaped to ``(num_samples, 1)`` first. The ``OneHotEncoder`` encoder does not work with 1D arrays and our labels is a 1D array. In this case a user must decide either an array has only one feature(our case!) or has one sample. Also, by default the encoder returns sparse arrays, but for dataset plotting it is easier to have dense arrays, so we set ``sparse`` to ``False``."
msgstr "Escolhemos ``VQC`` ou Variational Quantum Classifier como modelo que iremos treinar. Este modelo, por padrão, aceita rótulos codificados one-hot, então temos que transformar os rótulos que estão no conjunto de ``{0, 1}`` em representação one-hot. Também empregamos o SciKit-Learn para essa transformação. Observe que o array de entrada deve ser remodelado para ``(num_samples, 1)`` primeiro. O codificador ``OneHotEncoder`` não funciona com arrays 1D e nossos rótulos são arrays 1D. Neste caso, o usuário deve decidir se um array tem apenas um recurso (nosso caso!) ou tem uma amostra. Além disso, por padrão, o codificador retorna arrays dispersos, mas para plotagem de conjuntos de dados é mais fácil ter arrays densos, então configuramos ``sparse`` para ``False``."

#: ../../tutorials/09_saving_and_loading models.ipynb:273
msgid "Let’s take a look at the labels of the first ``5`` labels of the dataset. The labels should be one-hot encoded."
msgstr "Vamos dar uma olhada nos rótulos dos primeiros ``5`` rótulos do conjunto de dados. Os rótulos devem ser codificados em one-hot."

#: ../../tutorials/09_saving_and_loading models.ipynb:330
#, python-format
msgid "Now we split our dataset into two parts: a training dataset and a test one. As a rule of thumb, 80% of a full dataset should go into a training part and 20% into a test one. Our training dataset has ``30`` samples. The test dataset should be used only once, when a model is trained to verify how well the model behaves on unseen data. We employ ``train_test_split`` from SciKit-Learn."
msgstr "Agora dividimos nosso conjunto de dados em duas partes: um conjunto de dados de treinamento e um de teste. Como regra geral, 80% de um conjunto de dados completo deve ir para uma parte de treinamento e 20% para uma parte de teste. Nosso conjunto de dados de treinamento tem ``30`` amostras. O conjunto de dados de teste deve ser usado apenas uma vez, quando um modelo é treinado para verificar como o modelo se comporta em dados não vistos. Nós empregamos ``train_test_split`` do SciKit-Learn."

#: ../../tutorials/09_saving_and_loading models.ipynb:378
msgid "Now it is time to see how our dataset looks like. Let’s plot it."
msgstr "Agora é hora de ver como nosso conjunto de dados se parece. Vamos plotá-lo."

#: ../../tutorials/09_saving_and_loading models.ipynb:445
msgid "On the plot above we see:"
msgstr "No gráfico acima vemos:"

#: ../../tutorials/09_saving_and_loading models.ipynb:447
msgid "Solid blue dots are the samples from the training dataset labeled as ``0``"
msgstr "Os pontos azuis sólidos são as amostras do conjunto de dados de treinamento, rotulado como ``0``"

#: ../../tutorials/09_saving_and_loading models.ipynb:448
msgid "Empty blue dots are the samples from the test dataset labeled as ``0``"
msgstr "Os pontos azuis vazios são as amostras do conjunto de dados de teste, rotulado como ``0``"

#: ../../tutorials/09_saving_and_loading models.ipynb:449
msgid "Solid green dots are the samples from the training dataset labeled as ``1``"
msgstr "Os pontos verdes sólidos são as amostras do conjunto de dados de treinamento, rotulado como ``1``"

#: ../../tutorials/09_saving_and_loading models.ipynb:450
msgid "Empty green dots are the samples from the test dataset labeled as ``1``"
msgstr "Os pontos verdes vazios são as amostras do conjunto de dados de teste, rotulado como ``1``"

#: ../../tutorials/09_saving_and_loading models.ipynb:452
msgid "We’ll train our model using solid dots and verify it using empty dots."
msgstr "Treinaremos nosso modelo usando pontos sólidos e o verificaremos usando pontos vazios."

#: ../../tutorials/09_saving_and_loading models.ipynb:464
msgid "2. Train a model and save it"
msgstr "2. Treine um modelo e salve-o"

#: ../../tutorials/09_saving_and_loading models.ipynb:466
msgid "We’ll train our model in two steps. On the first step we train our model in ``20`` iterations."
msgstr "Vamos treinar nosso modelo em duas etapas. Na primeira etapa treinamos nosso modelo em ``20`` iterações."

#: ../../tutorials/09_saving_and_loading models.ipynb:487
msgid "Create an empty array for callback to store values of the objective function."
msgstr "Crie uma matriz vazia de callback para armazenar valores da função objetivo."

#: ../../tutorials/09_saving_and_loading models.ipynb:508
msgid "We re-use a callback function from the Neural Network Classifier & Regressor tutorial to plot iteration versus objective function value with some minor tweaks to plot objective values at each step."
msgstr "Reutilizamos a função callback do tutorial do Classificador & Regressor de Rede Neural para plotar iteração versus valores da função objetiva com alguns pequenos ajustes para plotar valores objetivos em cada etapa."

#: ../../tutorials/09_saving_and_loading models.ipynb:551
msgid "As mentioned above we train a ``VQC`` model and set ``COBYLA`` as an optimizer with a chosen value of the ``maxiter`` parameter. Then we evaluate performance of the model to see how well it was trained. Then we save this model for a file. On the second step we load this model and will continue to work with it."
msgstr "Como mencionado acima, treinamos um modelo ``VQC`` e definimos ``COBYLA`` como um otimizador com um valor escolhido do parâmetro ``maxiter``. Em seguida, avaliamos o desempenho do modelo para ver quão bem ele foi treinado. Em seguida, salvamos esse modelo em um arquivo. Na segunda etapa, carregamos esse modelo e continuaremos trabalhando com ele."

#: ../../tutorials/09_saving_and_loading models.ipynb:553
msgid "Here, we manually construct an ansatz to fix an initial point where to start optimization from."
msgstr "Aqui, construímos manualmente um ansatz para fixar um ponto de partida para iniciar a otimização."

#: ../../tutorials/09_saving_and_loading models.ipynb:577
msgid "We create a model and set a quantum instance to the QASM simulator we created earlier."
msgstr "Criamos um modelo e definimos uma instância quântica para o simulador QASM que criamos anteriormente."

#: ../../tutorials/09_saving_and_loading models.ipynb:600
msgid "Now it is time to train the model."
msgstr "Agora é hora de treinar o modelo."

#: ../../tutorials/09_saving_and_loading models.ipynb:654
msgid "Let’s see how well our model performs after the first step of training."
msgstr "Vamos ver o desempenho do nosso modelo após a primeira etapa do treinamento."

#: ../../tutorials/09_saving_and_loading models.ipynb:702
msgid "Next, we save the model. You may choose any file name you want. Please note that the ``save`` method does not append an extension if it is not specified in the file name."
msgstr "Em seguida, salvamos o modelo. Você pode escolher qualquer nome de arquivo que desejar. Observe que o método ``save`` não adiciona uma extensão se não for especificado no nome do arquivo."

#: ../../tutorials/09_saving_and_loading models.ipynb:724
msgid "3. Load a model and continue training"
msgstr "3. Carregue um modelo e continue o treinamento"

#: ../../tutorials/09_saving_and_loading models.ipynb:726
msgid "To load a model a user have to call a class method ``load`` of the corresponding model class. In our case it is ``VQC``. We pass the same file name we used in the previous section where we saved our model."
msgstr "Para carregar um modelo o usuário tem que chamar o método de classe ``load`` da classe de modelo correspondente. No nosso caso é ``VQC``. Passamos o mesmo nome de arquivo que usamos na seção anterior onde salvamos nosso modelo."

#: ../../tutorials/09_saving_and_loading models.ipynb:747
msgid "Next, we want to alter the model in a way it can be trained further and on another simulator. To do so, we set the ``warm_start`` property. When it is set to ``True`` and ``fit()`` is called again the model uses weights from previous fit to start a new fit. We also set quantum instance of the underlying network to the statevector simulator we created in the beginning of the tutorial. Finally, we create and set a new optimizer with ``maxiter`` is set to ``80``, so the total number of iterations is ``100``."
msgstr "Em seguida, queremos alterar o modelo de forma que possa ser treinado ainda mais e em outro simulador. Para isso, definimos a propriedade ``warm_start``. Quando é definido como ``True`` e ``fit()`` é chamado novamente, o modelo usa os pesos do ajuste anterior para iniciar um novo ajuste. Também definimos a instância quântica da rede subjacente para o simulador de vetor de estado que criamos no início do tutorial. Finalmente, criamos e configuramos um novo otimizador com ``maxiter`` definido como ``80``, então o número total de iterações é ``100``."

#: ../../tutorials/09_saving_and_loading models.ipynb:771
msgid "Now we continue training our model from the state we finished in the previous section."
msgstr "Agora continuamos treinando nosso modelo a partir do estado que terminamos na seção anterior."

#: ../../tutorials/09_saving_and_loading models.ipynb:862
msgid "Let’s see which data points were misclassified. First, we call ``predict`` to infer predicted values from the training and test features."
msgstr "Vamos ver quais pontos de dados foram classificados incorretamente. Primeiro, chamamos ``predict`` para inferir valores previstos dos recursos de treinamento e teste."

#: ../../tutorials/09_saving_and_loading models.ipynb:884
msgid "Plot the whole dataset and the highlight the points that were classified incorrectly."
msgstr "Plote todo o conjunto de dados e destaque os pontos que foram classificados incorretamente."

#: ../../tutorials/09_saving_and_loading models.ipynb:959
msgid "So, if you have a large dataset or a large model you can train it in multiple steps as shown in this tutorial."
msgstr "Portanto, se você tiver um grande conjunto de dados ou um modelo grande, poderá treiná-lo em várias etapas, conforme mostrado neste tutorial."

#: ../../tutorials/09_saving_and_loading models.ipynb:971
msgid "4. PyTorch hybrid models"
msgstr "4. Modelos híbridos do PyTorch"

#: ../../tutorials/09_saving_and_loading models.ipynb:973
msgid "To save and load hybrid models, when using the TorchConnector, follow the PyTorch recommendations of saving and loading the models. For more details please refer to the PyTorch Connector tutorial `here <https://qiskit.org/documentation/machine-learning/tutorials/05_torch_connector.html>`__ where a short snippet shows how to do it."
msgstr "Para salvar e carregar modelos híbridos, ao usar o TorchConnector, siga as recomendações do PyTorch de salvar e carregar os modelos. Para obter mais detalhes, consulte o tutorial do conector PyTorch `aqui <https://qiskit.org/documentation/machine-learning/tutorials/05_torch_connector.html>`__ onde um pequeno trecho mostra como fazê-lo."

#: ../../tutorials/09_saving_and_loading models.ipynb:975
msgid "Take a look at this pseudo-like code to get the idea:"
msgstr "Dê uma olhada neste pseudo-código para ter uma ideia:"

