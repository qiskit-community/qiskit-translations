msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-11 21:47+0000\n"
"PO-Revision-Date: 2022-08-11 22:33\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/02_neural_network_classifier_and_regressor.po\n"
"X-Crowdin-File-ID: 9630\n"
"Language: zh_TW\n"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "This page was generated from `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__."
msgstr "此頁面是從 `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__ 產生的。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "Neural Network Classifier & Regressor"
msgstr "神經網絡分類器和迴歸器"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:11
msgid "In this tutorial we show how the ``NeuralNetworkClassifier`` and ``NeuralNetworkRegressor`` are used. Both take as an input a (Quantum) ``NeuralNetwork`` and leverage it in a specific context. In both cases we also provide a pre-configured variant for convenience, the Variational Quantum Classifier (``VQC``) and Variational Quantum Regressor (``VQR``). The tutorial is structured as follows:"
msgstr "本教程將展示如何使用 ``NeuralNetworkClassifier``和``NeuralNetworkRegressor`` 。兩者都將（量子）``NeuralNetwork`` 作為輸入並在特定環境中利用它。在這兩種情況下，為了方便起見，預設了變體，變分量子分類器（``VQC``）和變分量子迴歸器（``VQR``）。本教程的結構如下。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:13
msgid "`Classification <#Classification>`__"
msgstr "`分類 <#Classification>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:15
msgid "Classification with an ``OpflowQNN``"
msgstr "按``OpflowQNN``分類"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:16
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:309
msgid "Classification with a ``CircuitQNN``"
msgstr "按 ` `CircuitQNN`` 分類"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:17
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:484
msgid "Variational Quantum Classifier (``VQC``)"
msgstr "變分量子分類器（``VQC``）"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:19
msgid "`Regression <#Regression>`__"
msgstr "`迴歸 <#Regression>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:21
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:649
msgid "Regression with an ``OpflowQNN``"
msgstr "按``OpflowQNN``進行回歸"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:22
msgid "Variational Quantum Regressor (``VQR``)"
msgstr "變分量子迴歸器（``VQR``）"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:74
msgid "Classification"
msgstr "分類"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:76
msgid "We prepare a simple classification dataset to illustrate the following algorithms."
msgstr "為了說明下面的演算法，我們有一個簡單的分類資料集。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:121
msgid "Classification with the an ``OpflowQNN``"
msgstr "按``OpflowQNN``分類"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:123
msgid "First we show how an ``OpflowQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``OpflowQNN`` is expected to return one-dimensional output in :math:`[-1, +1]`. This only works for binary classification and we assign the two classes to :math:`\\{-1, +1\\}`. For convenience, we use the ``TwoLayerQNN``, which is a special type of ``OpflowQNN`` defined via a feature map and an ansatz."
msgstr "首先，我們展示如何使用``OpflowQNN``在``NeuralNetworkClassifier``中進行分類。這裡，``OpflowQNN`` 預計會返回一維輸出 :math:`[-1, +1]`。這只能用於二元分類，因此將兩個類分配給 :math:`\\{-1, +1\\}`。為方便起見，我們使用``TwoLayerQNN``，它是一種特殊類型的``OpflowQNN`` ，定義了一個特徵圖和擬設。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:181
msgid "We will add a callback function called ``callback_graph``. This will be called for each iteration of the optimizer and will be passed two parameters: the current weights and the value of the objective function at those weights. For our function, we append the value of the objective function to an array so we can plot iteration versus objective function value and update the graph with each iteration. However, you can do whatever you want with a callback function as long as it gets the two parameters mentioned passed."
msgstr ""

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:311
msgid "Next we show how a ``CircuitQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``CircuitQNN`` is expected to return :math:`d`-dimensional probability vector as output, where :math:`d` denotes the number of classes. Sampling from a ``QuantumCircuit`` automatically results in a probability distribution and we just need to define a mapping from the measured bitstrings to the different classes. For binary classification we use the parity mapping."
msgstr "下面展示如何在 ``NeuralNetworkClassifier`` 中使用 ``CircuitQNN`` 進行分類。此處，“CircuitQNN”預計將返回一個:math:`d`維隨機向量作為輸出。其中:math:`d` 是類別的數量。從 ``QuantumCircuit`` 採樣會自動變成概率分佈，因此我們要做的就是定義從測量的位元串到不同類別的映射。使用奇偶對映進行二元分類。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:486
msgid "The ``VQC`` is a special variant of the ``NeuralNetworkClassifier`` with a ``CircuitQNN``. It applies a parity mapping (or extensions to multiple classes) to map from the bitstring to the classification, which results in a probability vector, which is interpreted as a one-hot encoded result. By default, it applies this the ``CrossEntropyLoss`` function that expects labels given in one-hot encoded format and will return predictions in that format too."
msgstr "``VQC`` 是``NeuralNetworkClassifier`` 和``CircuitQNN`` 的特殊變體。它應用奇偶對映（或擴展到多個類別）將位元串映射到分類，從而產生概率向量，將其解釋為一次性編碼結果。預設情況下，應用``CrossEntropyLoss`` 函數，此函數假定一個以一次性編碼格式給出的標籤，並以該格式返回預測值。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:606
msgid "Regression"
msgstr "迴歸"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:608
msgid "We prepare a simple regression dataset to illustrate the following algorithms."
msgstr "為了說明下面的演算法，我們有一個簡單的迴歸資料集。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:651
msgid "Here we restrict to regression with an ``OpflowQNN`` that returns values in :math:`[-1, +1]`. More complex and also multi-dimensional models could be constructed, also based on ``CircuitQNN`` but that exceeds the scope of this tutorial."
msgstr "這僅限於使用`` OpflowQNN`` 的迴歸，它返回的值是 :math:`[-1, +1]`。可以基於``CircuitQNN``構建更複雜的多維模型，但這超出了本教程的範圍。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:782
msgid "Regression with the Variational Quantum Regressor (``VQR``)"
msgstr "通過變分量子迴歸器迴歸（``VQR``）"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:784
msgid "Similar to the ``VQC`` for classification, the ``VQR`` is a special variant of the ``NeuralNetworkRegressor`` with a ``OpflowQNN``. By default it considers the ``L2Loss`` function to minimize the mean squared error between predictions and targets."
msgstr "與 ``VQC``進行分類類似， ``VQR`` 是 ``OpflowQNN`` 的 ` `NeuralNetworkRegressor` ` 的特殊變式。依預設，它會考量 ``L2Ross`` 函數被認為可以最小化預測值和目標值之間的均方誤差。"

