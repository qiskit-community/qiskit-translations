msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-17 23:23+0000\n"
"PO-Revision-Date: 2022-02-18 00:15\n"
"Last-Translator: \n"
"Language-Team: Hungarian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: hu\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/08_quantum_kernel_trainer.po\n"
"X-Crowdin-File-ID: 9723\n"
"Language: hu_HU\n"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:9
msgid "This page was generated from `docs/tutorials/08_quantum_kernel_trainer.ipynb`__."
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:9
msgid "Quantum Kernel Training for Machine Learning Applications"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:11
msgid "In this tutorial, we will train a quantum kernel on a labeled dataset for a machine learning application. To illustrate the basic steps, we will use Quantum Kernel Alignment (QKA) for a binary classification task. QKA is a technique that iteratively adapts a parametrized quantum kernel to a dataset while converging to the maximum SVM margin. More information about QKA can be found in the preprint, `“Covariant quantum kernels for data with group structure.” <https://arxiv.org/abs/2105.03406>`__"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:13
msgid "The entry point to training a quantum kernel is the ``QuantumKernelTrainer`` class. The basic steps are:"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:15
msgid "Prepare the dataset"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:16
msgid "Define the quantum feature map"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:17
msgid "Set up the ``QuantumKernel`` and ``QuantumKernelTrainer`` objects"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:18
msgid "Use the ``QuantumKernelTrainer.fit`` method to train the kernel parameters on the dataset"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:19
msgid "Pass the trained quantum kernel to a machine learning model"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:31
msgid "Import Local, External, and Qiskit Packages and define a callback class for our optimizer"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:100
msgid "Prepare the Dataset"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:102
msgid "In this guide, we will use Qiskit Machine Learning’s ``ad_hoc.py`` dataset to demonstrate the kernel training process. See the documentation `here <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.datasets.ad_hoc_data.html>`__."
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:190
msgid "Define the Quantum Feature Map"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:192
msgid "Next, we set up the quantum feature map, which encodes classical data into the quantum state space. Here, we use a ``QuantumCircuit`` to set up a trainable rotation layer and a ``ZZFeatureMap`` from ``Qiskit`` to represent the input data."
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:265
msgid "Set Up the Quantum Kernel and Quantum Kernel Trainer"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:267
msgid "To train the quantum kernel, we need a ``QuantumKernel`` (holds the feature map and its parameters) and ``QuantumKernelTrainer`` (manages the training process)."
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:269
msgid "We will train using the Quantum Kernel Alignment technique by selecting the kernel loss function, ``SVCLoss``, as input to the ``QuantumKernelTrainer``. Since this is a Qiskit-supported loss, we can use the string, ``\"svc_loss\"``; however, note that default settings are used when passing the loss as a string. For custom settings, instantiate explicitly with the desired options, and pass the ``KernelLoss`` object to the ``QuantumKernelTrainer``."
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:271
msgid "We will select SPSA as the optimizer and initialize the trainable parameter with the ``initial_point`` argument. Note: The length of the list passed as the ``initial_point`` argument must equal the number of trainable parameters in the feature map."
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:306
msgid "Train the Quantum Kernel"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:308
msgid "To train the quantum kernel on the dataset (samples and labels), we call the ``fit`` method of ``QuantumKernelTrainer``."
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:310
msgid "The output of ``QuantumKernelTrainer.fit`` is a ``QuantumKernelTrainerResult`` object. The results object contains the following class fields: - ``optimal_parameters``: A dictionary containing {parameter: optimal value} pairs - ``optimal_point``: The optimal parameter value found in training - ``optimal_value``: The value of the loss function at the optimal point - ``optimizer_evals``: The number of evaluations performed by the optimizer - ``optimizer_time``: The amount of time taken to perform optimization - ``quantum_kernel``: A ``QuantumKernel`` object with optimal values bound to the feature map"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:374
msgid "Fit and Test the Model"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:376
msgid "We can pass the trained quantum kernel to a machine learning model, then fit the model and test on new data. Here, we will use Qiskit’s ``QSVC`` for classification."
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:432
msgid "Visualize the Kernel Training Process"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:434
msgid "From the callback data, we can plot how the loss evolves during the training process. We see it converges rapidly and reaches 100% test accuracy on this dataset with our choice of inputs."
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:436
msgid "We can also display the final kernel matrix, which is a measure of similarity between the training samples."
msgstr ""

