msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-29 17:32+0000\n"
"PO-Revision-Date: 2022-04-29 18:05\n"
"Last-Translator: \n"
"Language-Team: Tamil\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/02_neural_network_classifier_and_regressor.po\n"
"X-Crowdin-File-ID: 9630\n"
"Language: ta_IN\n"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "This page was generated from `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__."
msgstr "இந்தப் பக்கம் `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__ இலிருந்து உருவாக்கப்பட்டது."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "Neural Network Classifier & Regressor"
msgstr "நரம்பியல் நெட்வொர்க் வகைப்படுத்தி & பின்னடைவு"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:11
msgid "In this tutorial we show how the ``NeuralNetworkClassifier`` and ``NeuralNetworkRegressor`` are used. Both take as an input a (Quantum) ``NeuralNetwork`` and leverage it in a specific context. In both cases we also provide a pre-configured variant for convenience, the Variational Quantum Classifier (``VQC``) and Variational Quantum Regressor (``VQR``). The tutorial is structured as follows:"
msgstr "இந்த டுடோரியலில் ``NeuralNetworkClassifier`` மற்றும் ``NeuralNetworkRegressor`` எவ்வாறு பயன்படுத்தப்படுகின்றன என்பதைக் காட்டுகிறோம். இருவரும் ஒரு உள்ளீடாக ஒரு (குவாண்டம்) ``NeuralNetwork`` ஐ எடுத்து ஒரு குறிப்பிட்ட சூழலில் பயன்படுத்துகிறார்கள். இரண்டு நிகழ்வுகளிலும் வசதிக்காக முன்பே உள்ளமைக்கப்பட்ட மாறுபாட்டை நாங்கள் வழங்குகிறோம், மாறுபட்ட குவாண்டம் வகைப்படுத்தி (``VQC``) மற்றும் மாறுபட்ட குவாண்டம் பின்னடைவு (``VQR``). பயிற்சி பின்வருமாறு கட்டமைக்கப்பட்டுள்ளது:"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:13
msgid "`Classification <#Classification>`__"
msgstr "`Classification <#Classification>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:15
msgid "Classification with an ``OpflowQNN``"
msgstr "``OpflowQNN`` உடன் வகைப்பாடு"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:16
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:307
msgid "Classification with a ``CircuitQNN``"
msgstr "``CircuitQNN`` உடன் வகைப்பாடு"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:17
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:481
msgid "Variational Quantum Classifier (``VQC``)"
msgstr "மாறுபட்ட குவாண்டம் வகைப்படுத்தி (``VQC``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:19
msgid "`Regression <#Regression>`__"
msgstr "`Regression <#Regression>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:21
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:645
msgid "Regression with an ``OpflowQNN``"
msgstr "``OpflowQNN`` உடன் பின்னடைவு"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:22
msgid "Variational Quantum Regressor (``VQR``)"
msgstr "மாறுபட்ட குவாண்டம் பின்னடைவு (`` VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:74
msgid "Classification"
msgstr "வகைப்படுத்துதல்"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:76
msgid "We prepare a simple classification dataset to illustrate the following algorithms."
msgstr "பின்வரும் வழிமுறைகளை விளக்குவதற்கு எளிய வகைப்பாடு தரவுத்தொகுப்பை நாங்கள் தயார் செய்கிறோம்."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:121
msgid "Classification with the an ``OpflowQNN``"
msgstr "``OpflowQNN`` உடன் வகைப்பாடு"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:123
msgid "First we show how an ``OpflowQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``OpflowQNN`` is expected to return one-dimensional output in :math:`[-1, +1]`. This only works for binary classification and we assign the two classes to :math:`\\{-1, +1\\}`. For convenience, we use the ``TwoLayerQNN``, which is a special type of ``OpflowQNN`` defined via a feature map and an ansatz."
msgstr "முதலில் ``NeuralNetworkClassifier`` க்குள் வகைப்படுத்தலுக்கு ``OpflowQNN`` எவ்வாறு பயன்படுத்தப்படலாம் என்பதைக் காண்பிப்போம். இந்த சூழலில், `` OpflowQNN`` இதில் ஒரு பரிமாண வெளியீட்டை வழங்கும் :math:`[-1, +1]`. இது பைனரி வகைப்பாட்டிற்கு மட்டுமே செயல்படும், மேலும் இரண்டு வகுப்புகளையும் இதற்கு ஒதுக்குகிறோம் :math:`\\{-1, +1\\}`. வசதிக்காக, ``TwoLayerQNN`` ஐப் பயன்படுத்துகிறோம், இது ஒரு சிறப்பு வகை ``OpflowQNN`` ஒரு அம்ச வரைபடம் மற்றும் ஒரு அன்சாட்ஸ் வழியாக வரையறுக்கப்பட்டுள்ளது."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:180
msgid "We will add a callback function called ``callback_graph``. This will be called for each iteration of the optimizer and will be passed two parameters: the current weights and the value of the objective function at those weights. For our function, we append the value of the objective function to an array so we can plot iteration versus objective function value and update the graph with each iteration. However, you can do whatever you want with a callback function as long as it gets the two parameters mentioned passed."
msgstr "``callback_graph`` எனப்படும் திரும்ப அழைக்கும் செயல்பாட்டைச் சேர்ப்போம். இது ஆப்டிமைசரின் ஒவ்வொரு மறு செய்கைக்கும் அழைக்கப்படும் மற்றும் இரண்டு அளவுருக்கள் அனுப்பப்படும்: தற்போதைய எடைகள் மற்றும் அந்த எடைகளில் புறநிலை செயல்பாட்டின் மதிப்பு. எங்கள் செயல்பாட்டிற்காக, புறநிலை செயல்பாட்டின் மதிப்பை ஒரு வரிசையில் சேர்க்கிறோம், எனவே மறு செய்கை மற்றும் புறநிலை செயல்பாட்டு மதிப்புக்கு எதிராக திட்டமிடலாம் மற்றும் ஒவ்வொரு மறு செய்கையுடன் வரைபடத்தைப் புதுப்பிக்கலாம். இருப்பினும், குறிப்பிடப்பட்ட இரண்டு அளவுருக்களைப் பெறும் வரை நீங்கள் திரும்ப அழைக்கும் செயல்பாட்டின் மூலம் நீங்கள் விரும்பியதைச் செய்யலாம்."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:309
msgid "Next we show how a ``CircuitQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``CircuitQNN`` is expected to return :math:`d`-dimensional probability vector as output, where :math:`d` denotes the number of classes. Sampling from a ``QuantumCircuit`` automatically results in a probability distribution and we just need to define a mapping from the measured bitstrings to the different classes. For binary classification we use the parity mapping."
msgstr "அடுத்து ``NeuralNetworkClassifier`` க்குள் வகைப்படுத்தலுக்கு ``CircuitQNN`` எவ்வாறு பயன்படுத்தப்படலாம் என்பதைக் காண்பிப்போம். இந்த சூழலில், ``CircuitQNN`` திரும்பும் என்று எதிர்பார்க்கப்படுகிறது :math:`d`-பரிமாண நிகழ்தகவு திசையன் வெளியீடாக, எங்கே :math:`d` என்பது வகுப்புகளின் எண்ணிக்கையைக் குறிக்கிறது. ``QuantumCircuit`` இலிருந்து மாதிரியானது தானாக நிகழ்தகவு விநியோகத்தில் விளைகிறது, மேலும் அளவிடப்பட்ட பிட்ஸ்ட்ரிங்கிலிருந்து வெவ்வேறு வகுப்புகளுக்கு ஒரு மேப்பிங்கை வரையறுக்க வேண்டும். பைனரி வகைப்பாட்டிற்கு நாங்கள் பரிதி மேப்பிங்கைப் பயன்படுத்துகிறோம்."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:483
msgid "The ``VQC`` is a special variant of the ``NeuralNetworkClassifier`` with a ``CircuitQNN``. It applies a parity mapping (or extensions to multiple classes) to map from the bitstring to the classification, which results in a probability vector, which is interpreted as a one-hot encoded result. By default, it applies this the ``CrossEntropyLoss`` function that expects labels given in one-hot encoded format and will return predictions in that format too."
msgstr "``VQC`` என்பது ``CircuitQNN`` உடன் ``NeuralNetworkClassifier`` சிறப்பு மாறுபாடாகும். இது பிட்ஸ்ட்ரிங்கிலிருந்து வகைப்பாட்டிற்கு வரைபட ஒரு சமநிலை மேப்பிங்கை (அல்லது பல வகுப்புகளுக்கு நீட்டிப்புகள்) பயன்படுத்துகிறது, இதன் விளைவாக நிகழ்தகவு திசையன் உருவாகிறது, இது ஒரு சூடான குறியாக்கப்பட்ட விளைவாக விளக்கப்படுகிறது. இயல்பாக, இது ஒரு ஹாட் என்கோடட் வடிவத்தில் கொடுக்கப்பட்ட லேபிள்களை எதிர்பார்க்கும் ``CrossEntropyLoss`` செயல்பாட்டைப் பயன்படுத்துகிறது, மேலும் அந்த வடிவமைப்பிலும் கணிப்புகளைத் தரும்."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:602
msgid "Regression"
msgstr "பின்னடைவு"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:604
msgid "We prepare a simple regression dataset to illustrate the following algorithms."
msgstr "பின்வரும் வழிமுறைகளை விளக்குவதற்கு எளிய பின்னடைவு தரவுத்தொகுப்பை நாங்கள் தயார் செய்கிறோம்."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:647
msgid "Here we restrict to regression with an ``OpflowQNN`` that returns values in :math:`[-1, +1]`. More complex and also multi-dimensional models could be constructed, also based on ``CircuitQNN`` but that exceeds the scope of this tutorial."
msgstr ":math:`[-1, +1]` இல் மதிப்புகளை வழங்கும் ``OpflowQNN`` உடன் பின்னடைவை இங்கு கட்டுப்படுத்துகிறோம். ``CircuitQNN`` ஐ அடிப்படையாகக் கொண்டு மிகவும் சிக்கலான மற்றும் பல பரிமாண மாதிரிகள் உருவாக்கப்படலாம், ஆனால் இது இந்த டுடோரியலின் நோக்கத்தை மீறுகிறது."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:777
msgid "Regression with the Variational Quantum Regressor (``VQR``)"
msgstr "மாறுபட்ட குவாண்டம் பின்னடைவுடன் பின்னடைவு (``VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:779
msgid "Similar to the ``VQC`` for classification, the ``VQR`` is a special variant of the ``NeuralNetworkRegressor`` with a ``OpflowQNN``. By default it considers the ``L2Loss`` function to minimize the mean squared error between predictions and targets."
msgstr "வகைப்பாட்டிற்கான ``VQC`` ஐப் போலவே, ``VQR`` என்பது ``OpflowQNN`` உடன் ``NeuralNetworkRegressor`` இன் சிறப்பு மாறுபாடாகும். முன்னிருப்பாக இது கணிப்புகள் மற்றும் இலக்குகளுக்கு இடையிலான சராசரி ஸ்கொயர் பிழையைக் குறைக்க ``L2Loss`` செயல்பாட்டைக் கருதுகிறது."

