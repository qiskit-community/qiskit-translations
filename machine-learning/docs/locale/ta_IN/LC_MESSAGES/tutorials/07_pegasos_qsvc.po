msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-11 21:47+0000\n"
"PO-Revision-Date: 2022-10-13 06:39\n"
"Last-Translator: \n"
"Language-Team: Tamil\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/07_pegasos_qsvc.po\n"
"X-Crowdin-File-ID: 9721\n"
"Language: ta_IN\n"

#: ../../tutorials/07_pegasos_qsvc.ipynb:9
msgid "This page was generated from `docs/tutorials/07_pegasos_qsvc.ipynb`__."
msgstr "இந்தப் பக்கம் `docs/tutorials/07_pegasos_qsvc.ipynb`__ இலிருந்து உருவாக்கப்பட்டது."

#: ../../tutorials/07_pegasos_qsvc.ipynb:9
msgid "Pegasos Quantum Support Vector Classifier"
msgstr "பெகாசோஸ் குவாண்டம் ஆதரவு திசையன் வகைப்படுத்தி"

#: ../../tutorials/07_pegasos_qsvc.ipynb:11
msgid "There’s another SVM based algorithm that benefits from the quantum kernel method. Here, we introduce an implementation of a another classification algorithm, which is an alternative version to the QSVC shown above. This classification algorithm implements the Pegasos algorithm from the paper “Pegasos: Primal Estimated sub-GrAdient SOlver for SVM” by Shalev-Shwartz et al., see: https://home.ttic.edu/~nati/Publications/PegasosMPB.pdf."
msgstr "குவாண்டம் கர்னல் முறையிலிருந்து பயனடையும் மற்றொரு SVM அடிப்படையிலான வழிமுறைகள் உள்ளது. இங்கே, மேலே காட்டப்பட்டுள்ள QSVC க்கு மாற்றுப் பதிப்பான மற்றொரு வகைப்பாடு வழிமுறைகளின் செயலாக்கத்தை நாங்கள் அறிமுகப்படுத்துகிறோம். இந்த வகைப்பாடு வழிமுறைகள், ஷாலேவ்-ஸ்வார்ட்ஸ் மற்றும் பலர் எழுதிய “Pegasos: Primal Estimated sub-GrAdient SOlver for SVM” என்ற தாளில் இருந்து பெகாசோஸ் வழிமுறைகள் செயல்படுத்துகிறது."

#: ../../tutorials/07_pegasos_qsvc.ipynb:13
msgid "This algorithm is an alternative to the dual optimization from the ``scikit-learn`` package, benefits from the kernel trick, and yields a training complexity that is independent of the size of the training set. Thus, the ``PegasosQSVC`` is expected to train faster than QSVC for sufficiently large training sets."
msgstr "இந்த அல்காரிதம் ``scikit-learn`` தொகுப்பிலிருந்து இரட்டை தேர்வுமுறைக்கு மாற்றாகும், கர்னல் தந்திரத்தின் பலன்கள் மற்றும் பயிற்சித் தொகுப்பின் அளவைப் பொருட்படுத்தாமல் பயிற்சி சிக்கலான தன்மையை அளிக்கிறது. எனவே, ``PegasosQSVC` போதுமான பெரிய பயிற்சித் தொகுப்புகளுக்கு QSVC ஐ விட வேகமாகப் பயிற்சியளிக்கும் என எதிர்பார்க்கப்படுகிறது."

#: ../../tutorials/07_pegasos_qsvc.ipynb:15
msgid "The algorithm can be used as direct replacement of ``QSVC`` with some hyper-parameterization."
msgstr ""

#: ../../tutorials/07_pegasos_qsvc.ipynb:26
msgid "Let’s generate some data:"
msgstr "சில தரவுகளை உருவாக்குவோம்:"

#: ../../tutorials/07_pegasos_qsvc.ipynb:50
msgid "We pre-process the data to ensure compatibility with the rotation encoding and split it into the training and test datasets."
msgstr "சுழற்சி குறியாக்கத்துடன் பொருந்தக்கூடிய தன்மையை உறுதிசெய்ய நாங்கள் தரவை முன்கூட்டியே செயலாக்குகிறோம் மற்றும் பயிற்சி மற்றும் சோதனை தரவுத்தொகுப்புகளாகப் பிரிக்கிறோம்."

#: ../../tutorials/07_pegasos_qsvc.ipynb:80
msgid "We have two features in the dataset, so we set a number of qubits to the number of features in the dataset."
msgstr ""

#: ../../tutorials/07_pegasos_qsvc.ipynb:82
msgid "Then we set :math:`\\tau` to the number of steps performed during the training procedure. Please note that, there is no early stopping criterion in the algorithm. The algorithm iterates over all :math:`\\tau` steps."
msgstr ""

#: ../../tutorials/07_pegasos_qsvc.ipynb:84
msgid "And the last one is the hyperparameter :math:`C`. This is a positive regularization parameter. The strength of the regularization is inversely proportional to :math:`C`. Smaller :math:`C` induce smaller weights which generally helps preventing overfitting. However, due to the nature of this algorithm, some of the computation steps become trivial for larger :math:`C`. Thus, larger :math:`C` improve the performance of the algorithm drastically. If the data is linearly separable in feature space, :math:`C` should be chosen to be large. If the separation is not perfect, :math:`C` should be chosen smaller to prevent overfitting."
msgstr ""

#: ../../tutorials/07_pegasos_qsvc.ipynb:113
msgid "The algorithm will run using:"
msgstr ""

#: ../../tutorials/07_pegasos_qsvc.ipynb:115
msgid "A statevector simulator"
msgstr ""

#: ../../tutorials/07_pegasos_qsvc.ipynb:116
msgid "A quantum kernel created from ``ZFeatureMap``"
msgstr ""

#: ../../tutorials/07_pegasos_qsvc.ipynb:153
msgid "The implementation ``PegasosQSVC`` is compatible with the ``scikit-learn`` interfaces and has a pretty standard way of training a model. In the constructor we pass parameters of the algorithm, in this case there are a regularization hyper-parameter :math:`C` and a number of steps."
msgstr ""

#: ../../tutorials/07_pegasos_qsvc.ipynb:155
msgid "Then we pass training features and labels to the ``fit`` method, which trains a models and returns a fitted classifier."
msgstr ""

#: ../../tutorials/07_pegasos_qsvc.ipynb:157
msgid "Afterwards, we score our model using test features and labels."
msgstr ""

#: ../../tutorials/07_pegasos_qsvc.ipynb:211
msgid "For visualization purposes we create a mesh grid of a predefined step that spans our minimum and maximum values we applied in MinMaxScaler. We also add some margin to the grid for better representation of the training and test samples."
msgstr ""

#: ../../tutorials/07_pegasos_qsvc.ipynb:236
msgid "We convert the grid to the shape compatible with the model, the shape should be ``(n_samples, n_features)``. Then for each grid point we predict a label. In our case predicted labels will be used for coloring the grid."
msgstr ""

#: ../../tutorials/07_pegasos_qsvc.ipynb:258
msgid "Finally, we plot our grid according to the labels/colors we obtained from the model. We also plot training and test samples."
msgstr ""

