msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-29 17:32+0000\n"
"PO-Revision-Date: 2022-04-29 18:05\n"
"Last-Translator: \n"
"Language-Team: Tamil\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/01_neural_networks.po\n"
"X-Crowdin-File-ID: 9628\n"
"Language: ta_IN\n"

#: ../../tutorials/01_neural_networks.ipynb:9
msgid "This page was generated from `docs/tutorials/01_neural_networks.ipynb`__."
msgstr "இந்தப் பக்கம் `docs/tutorials/01_neural_networks.ipynb`__ இலிருந்து உருவாக்கப்பட்டது."

#: ../../tutorials/01_neural_networks.ipynb:9
msgid "Quantum Neural Networks"
msgstr "குவாண்டம் நியூரல் நெட்வொர்க்குகள்"

#: ../../tutorials/01_neural_networks.ipynb:11
msgid "This notebook demonstrates the different generic quantum neural network (QNN) implementations provided in Qiskit Machine Learning. The networks are meant as application-agnostic computational units that can be used for many different use cases. Depending on the application, a particular type of network might more or less suitable and might require to be set up in a particular way. The following different available neural networks will now be discussed in more detail:"
msgstr "இந்த நோட்புக் qiskit இயந்திர கற்றலில் வழங்கப்பட்ட வெவ்வேறு பொதுவான குவாண்டம் நியூரல் நெட்வொர்க் (QNN) செயலாக்கங்களை நிரூபிக்கிறது. நெட்வொர்க்குகள் பயன்பாட்டு-அஞ்ஞான கணக்கீட்டு அலகுகளாகக் கருதப்படுகின்றன, அவை பலவிதமான பயன்பாட்டு நிகழ்வுகளுக்குப் பயன்படுத்தப்படலாம். பயன்பாட்டைப் பொறுத்து, ஒரு குறிப்பிட்ட வகை நெட்வொர்க் அதிகமாகவோ அல்லது குறைவாகவோ பொருத்தமானதாக இருக்கலாம் மற்றும் ஒரு குறிப்பிட்ட வழியில் அமைக்க வேண்டியிருக்கும். பின்வரும் வெவ்வேறு நரம்பியல் நெட்வொர்க்குகள் இப்போது விரிவாக விவாதிக்கப்படும்:"

#: ../../tutorials/01_neural_networks.ipynb:13
msgid "``NeuralNetwork``: The interface for neural networks."
msgstr "``NeuralNetwork``: நரம்பியல் நெட்வொர்க்குகளுக்கான இடைமுகம்."

#: ../../tutorials/01_neural_networks.ipynb:14
msgid "``OpflowQNN``: A network based on the evaluation of quantum mechanical observables."
msgstr "``OpflowQNN``: குவாண்டம் மெக்கானிக்கல் அவதானிப்புகளின் மதிப்பீட்டை அடிப்படையாகக் கொண்ட பிணையம்."

#: ../../tutorials/01_neural_networks.ipynb:15
msgid "``TwoLayerQNN``: A special ``OpflowQNN`` implementation for convenience."
msgstr "``TwoLayerQNN``: வசதிக்காக ஒரு சிறப்பு ``OpflowQNN`` செயல்படுத்தல்."

#: ../../tutorials/01_neural_networks.ipynb:16
msgid "``CircuitQNN``: A network based on the samples resulting from measuring a quantum circuit."
msgstr "``CircuitQNN``: குவாண்டம் சுற்றுவட்டத்தை அளவிடுவதன் விளைவாக மாதிரிகளை அடிப்படையாகக் கொண்ட பிணையம்."

#: ../../tutorials/01_neural_networks.ipynb:66
msgid "1. ``NeuralNetwork``"
msgstr "1. ``NeuralNetwork``"

#: ../../tutorials/01_neural_networks.ipynb:68
msgid "The ``NeuralNetwork`` represents the interface for all neural networks available in Qiskit Machine Learning. It exposes a forward and a backward pass taking the data samples and trainable weights as input. A ``NeuralNetwork`` does not contain any training capabilities, these are pushed to the actual algorithms / applications. Thus, a ``NeuralNetwork`` also does not store the values for trainable weights. In the following, different implementations of this interfaces are introduced."
msgstr "``NeuralNetwork`` என்பது qiskit இயந்திர கற்றலில் கிடைக்கும் அனைத்து நரம்பியல் நெட்வொர்க்குகளுக்கான இடைமுகத்தைக் குறிக்கிறது. இது தரவு மாதிரிகள் மற்றும் பயிற்சியளிக்கக்கூடிய எடைகளை உள்ளீடாக எடுத்து முன்னோக்கி மற்றும் பின்தங்கிய பாஸை அம்பலப்படுத்துகிறது. ``NeuralNetwork`` எந்த பயிற்சி திறன்களையும் கொண்டிருக்கவில்லை, இவை உண்மையான வழிமுறைகள் / பயன்பாடுகளுக்குத் தள்ளப்படுகின்றன. எனவே, ஒரு ``NeuralNetwork`` பயிற்சியளிக்கக்கூடிய எடைகளுக்கான மதிப்புகளையும் சேமிக்காது. பின்வருவனவற்றில், இந்த இடைமுகங்களின் வெவ்வேறு செயலாக்கங்கள் அறிமுகப்படுத்தப்படுகின்றன."

#: ../../tutorials/01_neural_networks.ipynb:70
msgid "Suppose a ``NeuralNetwork`` called ``nn``. Then, the ``nn.forward(input, weights)`` pass takes either flat inputs for the data and weights of size ``nn.num_inputs`` and ``nn.num_weights``, respectively. ``NeuralNetwork`` supports batching of inputs and returns batches of output of the corresponding shape."
msgstr "``nn`` எனப்படும் ``NeuralNetwork`` என்று வைத்துக்கொள்வோம். பின்னர், ``nn.forward(input, weights)`` பாஸ் முறையே தரவு மற்றும் எடைகள் ``nn.num_inputs`` மற்றும் ``nn.num_weights`` ஆகியவற்றிற்கான தட்டையான உள்ளீடுகளை எடுக்கும். ``NeuralNetwork`` உள்ளீடுகளின் தொகுப்பை ஆதரிக்கிறது மற்றும் தொடர்புடைய வடிவத்தின் வெளியீட்டின் தொகுப்புகளை வழங்குகிறது."

#: ../../tutorials/01_neural_networks.ipynb:82
msgid "2. ``OpflowQNN``"
msgstr "2. ``OpflowQNN``"

#: ../../tutorials/01_neural_networks.ipynb:84
msgid "The ``OpflowQNN`` takes a (parametrized) operator from Qiskit and leverages Qiskit’s gradient framework to provide the backward pass. Such an operator can for instance be an expected value of a quantum mechanical observable with respect to a parametrized quantum state. The Parameters can be used to load classical data as well as represent trainable weights. The ``OpflowQNN`` also allows lists of operators and more complex structures to construct more complex QNNs."
msgstr "``OpflowQNN`` qiskit-டிலிருந்து ஒரு (அளவுரு) ஆபரேட்டரை எடுத்து பின்தங்கிய பாஸை வழங்க qiskit-டின் சாய்வு கட்டமைப்பை ஆதரிக்கிறது. அத்தகைய ஆபரேட்டர் உதாரணமாக, ஒரு அளவுரு குவாண்டம் நிலையைப் பொறுத்தவரை கவனிக்கக்கூடிய ஒரு குவாண்டம் இயந்திரத்தின் எதிர்பார்க்கப்படும் மதிப்பாக இருக்கலாம். கிளாசிக்கல் தரவை ஏற்றுவதற்கும், பயிற்சியளிக்கக்கூடிய எடைகளைக் குறிப்பதற்கும் அளவுருக்கள் பயன்படுத்தப்படலாம். ``OpflowQNN`` ஆபரேட்டர்கள் மற்றும் மிகவும் சிக்கலான கட்டமைப்புகளின் பட்டியல்களை மிகவும் சிக்கலான QNN களை உருவாக்க அனுமதிக்கிறது."

#: ../../tutorials/01_neural_networks.ipynb:351
msgid "Combining multiple observables in a ``ListOp`` also allows to create more complex QNNs"
msgstr "``ListOp`` இல் பல அவதானிப்புகளை இணைப்பது மிகவும் சிக்கலான QNN களை உருவாக்க அனுமதிக்கிறது"

#: ../../tutorials/01_neural_networks.ipynb:450
msgid "3. ``TwoLayerQNN``"
msgstr "3. ``TwoLayerQNN``"

#: ../../tutorials/01_neural_networks.ipynb:452
msgid "The ``TwoLayerQNN`` is a special ``OpflowQNN`` on :math:`n` qubits that consists of first a feature map to insert data and second an ansatz that is trained. The default observable is :math:`Z^{\\otimes n}`, i.e., parity."
msgstr "``TwoLayerQNN`` என்பது ஒரு சிறப்பு ``OpflowQNN`` இல் :math:`n` குவிட்ஸ், இது முதலில் தரவைச் செருகுவதற்கான அம்ச வரைபடத்தையும், இரண்டாவதாக பயிற்சியளிக்கப்பட்ட ஒரு அன்சாட்ஸையும் கொண்டுள்ளது. இயல்புநிலையாகக் காணக்கூடியது :math:`Z^{\\otimes n}`, அதாவது, சமநிலை."

#: ../../tutorials/01_neural_networks.ipynb:663
msgid "4. ``CircuitQNN``"
msgstr "4. ``CircuitQNN``"

#: ../../tutorials/01_neural_networks.ipynb:665
msgid "The ``CircuitQNN`` is based on a (parametrized) ``QuantumCircuit``. This can take input as well as weight parameters and produces samples from the measurement. The samples can either be interpreted as probabilities of measuring the integer index corresponding to a bitstring or directly as a batch of binary output. In the case of probabilities, gradients can be estimated efficiently and the ``CircuitQNN`` provides a backward pass as well. In case of samples, differentiation is not possible and the backward pass returns ``(None, None)``."
msgstr "``CircuitQNN`` என்பது ஒரு (அளவுருவாக்கப்பட்ட) ``QuantumCircuit`` ஐ அடிப்படையாகக் கொண்டது. இது உள்ளீடு மற்றும் எடை அளவுருக்களை எடுத்து அளவீட்டிலிருந்து மாதிரிகளை உருவாக்குகிறது. மாதிரிகள் ஒரு பிட்ஸ்ட்ரிங்கிற்கு ஒத்த முழு எண் குறியீட்டை அளவிடுவதற்கான நிகழ்தகவுகள் அல்லது நேரடியாக பைனரி வெளியீட்டின் தொகுப்பாக விளக்கப்படலாம். நிகழ்தகவுகளின் விஷயத்தில், சாய்வுகளை திறமையாக மதிப்பிடலாம் மற்றும் ``CircuitQNN`` பின்தங்கிய பாஸையும் வழங்குகிறது. மாதிரிகள் விஷயத்தில், வேறுபாடு சாத்தியமில்லை மற்றும் பின்தங்கிய பாஸ் ``(None, None)``."

#: ../../tutorials/01_neural_networks.ipynb:668
msgid "Further, the ``CircuitQNN`` allows to specify an ``interpret`` function to post-process the samples. This is expected to take a measured integer (from a bitstring) and map it to a new index, i.e. non-negative integer. In this case, the output shape needs to be provided and the probabilities are aggregated accordingly."
msgstr "மேலும், ``CircuitQN`` மாதிரிகளை பிந்தைய செயலாக்க ``interpret`` செயல்பாட்டைக் குறிப்பிட அனுமதிக்கிறது. இது அளவிடப்பட்ட முழு எண்ணை (bitstring-ல் இருந்து) எடுத்து புதிய அட்டவணைக்கு ஒப்பிடப்படுகிறது என்று எதிர்பார்க்கப்படுகிறது, அதாவது எதிர்மறை அல்லாத முழு எண். இந்த வழக்கில், வெளியீட்டு வடிவத்தை வழங்க வேண்டும் மற்றும் அதற்கேற்ப நிகழ்தகவு திரட்டப்படுகிறது."

#: ../../tutorials/01_neural_networks.ipynb:670
msgid "A ``CircuitQNN`` can be configured to return sparse as well as dense probability vectors. If no ``interpret`` function is used, the dimension of the probability vector scales exponentially with the number of qubits and a sparse recommendation is usually recommended. In case of an ``interpret`` function it depends on the expected outcome. If, for instance, an index is mapped to the parity of the corresponding bitstring, i.e., to 0 or 1, a dense output makes sense and the result will be a probability vector of length 2."
msgstr "``CircuitQNN`` ஐ சிதறல் மற்றும் அடர்த்தியான நிகழ்தகவு திசையன்களைத் தரும்படி கட்டமைக்க முடியும். ``interpret`` செயல்பாடு எதுவும் பயன்படுத்தப்படாவிட்டால், நிகழ்தகவு திசையன் அளவீடுகளின் அளவு பரிமாணங்களின் எண்ணிக்கையுடன் அதிவேகமாக அளவிடப்படுகிறது மற்றும் ஒரு சிதறிய பரிந்துரை பொதுவாக பரிந்துரைக்கப்படுகிறது. ``interpret`` செயல்பாட்டின் போது அது எதிர்பார்த்த முடிவைப் பொறுத்தது. உதாரணமாக, ஒரு குறியீட்டு தொடர்புடைய பிட்ஸ்ட்ரிங்கின் சமநிலையுடன் பொருத்தப்பட்டால், அதாவது, 0 அல்லது 1 க்கு, அடர்த்தியான வெளியீடு அர்த்தமுள்ளதாக இருக்கும், இதன் விளைவாக நீளம் 2 இன் நிகழ்தகவு திசையன் இருக்கும்."

#: ../../tutorials/01_neural_networks.ipynb:713
msgid "4.1 Output: sparse integer probabilities"
msgstr "4.1 வெளியீடு: சிதறல் முழு எண் நிகழ்தகவுகள்"

#: ../../tutorials/01_neural_networks.ipynb:818
msgid "4.2 Output: dense parity probabilities"
msgstr "4.2 வெளியீடு: அடர்த்தியான சமநிலை நிகழ்தகவுகள்"

#: ../../tutorials/01_neural_networks.ipynb:939
msgid "4.3 Output: Samples"
msgstr "4.3 வெளியீடு: மாதிரிகள்"

#: ../../tutorials/01_neural_networks.ipynb:1071
msgid "4.4 Output: Parity Samples"
msgstr "4.4 வெளியீடு: பரிதி மாதிரிகள்"

