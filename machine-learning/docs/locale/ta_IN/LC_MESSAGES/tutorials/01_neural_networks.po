msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-10 17:18+0000\n"
"PO-Revision-Date: 2023-11-10 18:24\n"
"Last-Translator: \n"
"Language: ta\n"
"Language-Team: Tamil\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /main/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/01_neural_networks.po\n"
"X-Crowdin-File-ID: 9628\n"

#: ../../tutorials/01_neural_networks.ipynb:9
msgid "This page was generated from `docs/tutorials/01_neural_networks.ipynb`__."
msgstr "இந்தப் பக்கம் `docs/tutorials/01_neural_networks.ipynb`__ இலிருந்து உருவாக்கப்பட்டது."

#: ../../tutorials/01_neural_networks.ipynb:9
msgid "Quantum Neural Networks"
msgstr "குவாண்டம் நியூரல் நெட்வொர்க்குகள்"

#: ../../tutorials/01_neural_networks.ipynb:12
msgid "Overview"
msgstr "கண்ணோட்டம்"

#: ../../tutorials/01_neural_networks.ipynb:14
msgid "This notebook demonstrates different quantum neural network (QNN) implementations provided in ``qiskit-machine-learning``, and how they can be integrated into basic quantum machine learning (QML) workflows."
msgstr "குறிப்பேடு."

#: ../../tutorials/01_neural_networks.ipynb:16
msgid "The tutorial is structured as follows:"
msgstr "பயிற்சி பின்வருமாறு கட்டப்பட்டிருக்கிறது:"

#: ../../tutorials/01_neural_networks.ipynb:18
msgid "`Introduction <#1.-Introduction>`__"
msgstr "முன்னுரை <#1.-Introduction>`__"

#: ../../tutorials/01_neural_networks.ipynb:19
msgid "`How to Instantiate QNNs <#2.-How-to-Instantiate-QNNs>`__"
msgstr "`எப்படி QNNகளை உடனுக்குடன் உருவாக்குவது <#2.-How-to-Instantiate-QNNs>`__"

#: ../../tutorials/01_neural_networks.ipynb:20
msgid "`How to Run a Forward Pass <#3.-How-to-Run-a-Forward-Pass>`__"
msgstr "`ஃபார்வர்டு பாஸை எப்படி இயக்குவது <#3.-How-to-Run-a-Forward-Pass>`__"

#: ../../tutorials/01_neural_networks.ipynb:21
msgid "`How to Run a Backward Pass <#4.-How-to-Run-a-Backward-Pass>`__"
msgstr "`எப்படி பேக்வர்ட் பாஸை இயக்குவது <#4.-How-to-Run-a-Backward-Pass>`__"

#: ../../tutorials/01_neural_networks.ipynb:22
msgid "`Advanced Functionality <#5.-Advanced-Functionality>`__"
msgstr "`மேம்பட்ட செயல்பாடு <#5.-மேம்பட்ட-செயல்பாடு>`__"

#: ../../tutorials/01_neural_networks.ipynb:23
msgid "`Conclusion <#6.-Conclusion>`__"
msgstr "`முடிவு <#6.-முடிவு>`__"

#: ../../tutorials/01_neural_networks.ipynb:35
msgid "1. Introduction"
msgstr "1. முன்னுரை"

#: ../../tutorials/01_neural_networks.ipynb:38
msgid "1.1. Quantum vs. Classical Neural Networks"
msgstr "1.1 குவாண்டம் எதிராகக் கிளாசிக்கல் நியூரல் நெட்வொர்க்குகள்"

#: ../../tutorials/01_neural_networks.ipynb:40
msgid "Classical neural networks are algorithmic models inspired by the human brain that can be trained to recognize patterns in data and learn to solve complex problems. They are based on a series of interconnected nodes, or *neurons*, organized in a layered structure, with parameters that can be learned by applying machine or deep learning training strategies."
msgstr "கிளாசிக்கல் நியூரல் நெட்வொர்க்குகள் மனித மூளையால் ஈர்க்கப்பட்ட அல்காரிதம் மாதிரிகள் ஆகும், அவை தரவுகளில் உள்ள வடிவங்களை அடையாளம் காணவும் கடினமான சிக்கல்களைத் தீர்க்க கற்றுக்கொள்ளவும் பயிற்சியளிக்கப்படுகின்றன. அவை ஒன்றோடொன்று இணைக்கப்பட்ட முனைகளின் வரிசையை அடிப்படையாகக் கொண்டவை, அல்லது *நியூரான்கள்*, ஒரு அடுக்கு அமைப்பில் ஒழுங்கமைக்கப்பட்டவை, இயந்திரம் அல்லது ஆழ்ந்த கற்றல் பயிற்சி உத்திகளைப் பயன்படுத்துவதன் மூலம் கற்றுக்கொள்ளக்கூடிய அளவுருக்கள்."

#: ../../tutorials/01_neural_networks.ipynb:42
msgid "The motivation behind quantum machine learning (QML) is to integrate notions from quantum computing and classical machine learning to open the way for new and improved learning schemes. QNNs apply this generic principle by combining classical neural networks and parametrized quantum circuits. Because they lie at an intersection between two fields, QNNs can be viewed from two perspectives:"
msgstr "குவாண்டம் மெஷின் லேர்னிங்கின் (க்யூஎம்எல்) உந்துதல், குவாண்டம் கம்ப்யூட்டிங் மற்றும் கிளாசிக்கல் மெஷின் லேர்னிங்கில் இருந்து புதிய மற்றும் மேம்படுத்தப்பட்ட கற்றல் திட்டங்களுக்கு வழி திறக்கும் கருத்துக்களை ஒருங்கிணைப்பதாகும். கிளாசிக்கல் நியூரல் நெட்வொர்க்குகள் மற்றும் அளவுருக் குவாண்டம் சுற்றுகளை இணைப்பதன் மூலம் QNNகள் இந்த பொதுவான கொள்கையைப் பயன்படுத்துகின்றன. அவை இரண்டு புலங்களுக்கு இடையில் ஒரு குறுக்குவெட்டில் இருப்பதால், QNNகளை இரண்டு கண்ணோட்டங்களில் பார்க்க முடியும்:"

#: ../../tutorials/01_neural_networks.ipynb:44
msgid "From a **machine learning perspective**, QNNs are, once again, algorithmic models that can be trained to find hidden patterns in data in a similar manner to their classical counterparts. These models can **load** classical data (**inputs**) into a quantum state, and later **process** it with quantum gates parametrized by **trainable weights**. Figure 1 shows a generic QNN example including the data loading and processing steps. The output from measuring this state can then be plugged into a loss function to train the weights through backpropagation."
msgstr "ஒரு **இயந்திர கற்றல் கண்ணோட்டத்தில்**, QNNகள் மீண்டும் ஒருமுறை, அவற்றின் கிளாசிக்கல் சகாக்களுக்கு ஒத்த முறையில் தரவுகளில் மறைந்திருக்கும் வடிவங்களைக் கண்டறிய பயிற்சியளிக்கப்படும் அல்காரிதம் மாதிரிகள் ஆகும். இந்த மாதிரிகள் **லோட்** கிளாசிக்கல் தரவை (**உள்ளீடுகள்**) ஒரு குவாண்டம் நிலையில், பின்னர் **செயல்படுத்தும்** **பயிற்சி செய்யக்கூடிய எடைகள்** மூலம் குவாண்டம் கேட் அளவுருக்களுடன். தரவு ஏற்றுதல் மற்றும் செயலாக்க படிகள் உட்பட பொதுவான QNN உதாரணத்தை படம் 1 காட்டுகிறது. இந்த நிலையை அளப்பதன் மூலம் கிடைக்கும் வெளியீடு, பின் பரப்புதல் மூலம் எடைகளைப் பயிற்றுவிக்க இழப்புச் செயல்பாட்டில் செருகப்படலாம்."

#: ../../tutorials/01_neural_networks.ipynb:47
msgid "From a **quantum computing perspective**, QNNs are quantum algorithms based on parametrized quantum circuits that can be trained in a variational manner using classical optimizers. These circuits contain a **feature map** (with input parameters) and an **ansatz** (with trainable weights), as seen in Figure 1."
msgstr "ஒரு **குவாண்டம் கம்ப்யூட்டிங் கண்ணோட்டத்தில்**, QNNகள் குவாண்டம் அல்காரிதங்கள் ஆகும், அவை அளவுரு குவாண்டம் சர்க்யூட்களை அடிப்படையாகக் கொண்டவை, அவை கிளாசிக்கல் ஆப்டிமைசர்களைப் பயன்படுத்தி மாறுபட்ட முறையில் பயிற்சியளிக்கப்படலாம். இந்த சுற்றுகள் படம் 1 இல் காணப்படுவது போல் **அம்ச வரைபடம்** (உள்ளீட்டு அளவுருக்களுடன்) மற்றும் **ansatz** (பயிற்சிக்கு ஏற்ற எடைகளுடன்) உள்ளன."

#: ../../tutorials/01_neural_networks.ipynb:49
msgid "|new_qnn-3.jpg|"
msgstr "|new_qnn-3.jpg|"

#: ../../tutorials/01_neural_networks.ipynb:53
msgid "new_qnn-3.jpg"
msgstr "new_qnn-3.jpg"

#: ../../tutorials/01_neural_networks.ipynb:51
msgid "*Figure 1. Generic quantum neural network (QNN) structure.*"
msgstr "*படம் 1. பொதுவான குவாண்டம் நியூரல் நெட்வொர்க் (QNN) அமைப்பு.*"

#: ../../tutorials/01_neural_networks.ipynb:64
msgid "As you can see, these two perspectives are complementary, and do not necessarily rely on strict definitions of concepts such as \"quantum neuron\" or what constitutes a QNN's \"layer\"."
msgstr "நீங்கள் பார்க்கிறபடி, இந்த இரண்டு முன்னோக்குகளும் ஒன்றுக்கொன்று நிரப்புகின்றன, மேலும் அவை \"குவாண்டம் நியூரான்\" அல்லது QNN இன் \"அடுக்கு\" போன்ற கருத்துகளின் கடுமையான வரையறைகளை நம்பியிருக்க வேண்டிய அவசியமில்லை."

#: ../../tutorials/01_neural_networks.ipynb:67
msgid "1.2. Implementation in ``qiskit-machine-learning``"
msgstr "1.2 ``கிஸ்கிட்-மெஷின்-லேர்னிங்`` இல் செயல்படுத்துதல்"

#: ../../tutorials/01_neural_networks.ipynb:69
msgid "The QNNs in ``qiskit-machine-learning`` are meant as application-agnostic computational units that can be used for different use cases, and their setup will depend on the application they are needed for. The module contains an interface for the QNNs and two specific implementations:"
msgstr "``qiskit-machine-learning`` இல் உள்ள QNNகள் வெவ்வேறு பயன்பாட்டு நிகழ்வுகளுக்குப் பயன்படுத்தக்கூடிய பயன்பாட்டு-அஞ்ஞானக் கணக்கீட்டு அலகுகளாகக் குறிக்கப்படுகின்றன, மேலும் அவற்றின் அமைப்பு அவை தேவைப்படும் பயன்பாட்டைப் பொறுத்தது. தொகுதி QNNகளுக்கான இடைமுகம் மற்றும் இரண்டு குறிப்பிட்ட செயலாக்கங்களைக் கொண்டுள்ளது:"

#: ../../tutorials/01_neural_networks.ipynb:71
msgid "`NeuralNetwork <https://qiskit.org/ecosystem/machine-learning/stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.html>`__: The interface for neural networks. This is an abstract class all QNNs inherit from."
msgstr "`NeuralNetwork <https://qiskit.org/ecosystem/machine-learning/stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.html>`__: நரம்பியல் நெட்வொர்க்குகளுக்கான இடைமுகம். இது அனைத்து QNNகளும் பெறப்பட்ட ஒரு சுருக்க வகுப்பாகும்."

#: ../../tutorials/01_neural_networks.ipynb:72
msgid "`EstimatorQNN <https://qiskit.org/ecosystem/machine-learning/stubs/qiskit_machine_learning.neural_networks.EstimatorQNN.html>`__: A network based on the evaluation of quantum mechanical observables."
msgstr "`EstimatorQNN <https://qiskit.org/ecosystem/machine-learning/stubs/qiskit_machine_learning.neural_networks.EstimatorQNN.html>`__: குவாண்டம் மெக்கானிக்கல் அவதானிப்புகளின் மதிப்பீட்டின் அடிப்படையில் ஒரு நெட்வொர்க்."

#: ../../tutorials/01_neural_networks.ipynb:73
msgid "`SamplerQNN <https://qiskit.org/ecosystem/machine-learning/locale/fr_FR/stubs/qiskit_machine_learning.neural_networks.SamplerQNN.html>`__: A network based on the samples resulting from measuring a quantum circuit."
msgstr "`SamplerQNN <https://qiskit.org/ecosystem/machine-learning/locale/fr_FR/stubs/qiskit_machine_learning.neural_networks.SamplerQNN.html>`__: ஒரு சர்க்யூட் அளவை அளப்பதன் விளைவாக உருவான மாதிரிகளின் அடிப்படையில் ஒரு நெட்வொர்க்."

#: ../../tutorials/01_neural_networks.ipynb:75
msgid "These implementations are based on the `qiskit primitives <https://qiskit.org/documentation/apidoc/primitives.html>`__. The primitives are the entry point to run QNNs on either a simulator or real quantum hardware. Each implementation, ``EstimatorQNN`` and ``SamplerQNN``, takes in an optional instance of its corresponding primitive, which can be any subclass of ``BaseEstimator`` and ``BaseSampler``, respectively."
msgstr "இந்தச் செயலாக்கங்கள் `qiskit primitives <https://qiskit.org/documentation/apidoc/primitives.html>`__ ஐ அடிப்படையாகக் கொண்டவை. சிமுலேட்டர் அல்லது உண்மையான குவாண்டம் வன்பொருளில் QNNகளை இயக்குவதற்கான நுழைவுப் புள்ளியாக ப்ரிமிடிவ்கள் உள்ளன. ஒவ்வொரு செயலாக்கமும், ``EstimatorQNN`` மற்றும் ``SamplerQNN``, அதனுடன் தொடர்புடைய பழமையான ஒரு விருப்ப நிகழ்வை எடுத்துக்கொள்கிறது, இது முறையே ``BaseEstimator`` மற்றும் ``BaseSampler`` இன் துணைப்பிரிவாக இருக்கலாம்."

#: ../../tutorials/01_neural_networks.ipynb:77
msgid "The ``qiskit.primitives`` module provides a reference implementation for the ``Sampler`` and ``Estimator`` classes to run statevector simulations. By default, if no instance is passed to a QNN class, an instance of the corresponding reference primitive (``Sampler`` or ``Estimator``) is created automatically by the network. For more information about primitives please refer to the `primitives documentation <https://qiskit.org/documentation/apidoc/primitives.html>`__."
msgstr "``qiskit.primitives`` தொகுதியானது ஸ்டேட்வெக்டர் உருவகப்படுத்துதல்களை இயக்க ``மாதிரி`` மற்றும் ``மதிப்பீட்டாளர்`` வகுப்புகளுக்கான குறிப்புச் செயலாக்கத்தை வழங்குகிறது. முன்னிருப்பாக, QNN வகுப்பிற்கு எந்த நிகழ்வும் அனுப்பப்படவில்லை எனில், அதனுடன் தொடர்புடைய முதன்மையான (``Sampler`` அல்லது ``Estimator``) ஒரு நிகழ்வு பிணையத்தால் தானாகவே உருவாக்கப்படும். ப்ரிமிடிவ்ஸ் பற்றிய கூடுதல் தகவலுக்கு, தயவு செய்து `primitives documentation <https://qiskit.org/documentation/apidoc/primitives.html>`__ ஐப் பார்க்கவும்."

#: ../../tutorials/01_neural_networks.ipynb:79
msgid "The ``NeuralNetwork`` class is the interface for all QNNs available in ``qiskit-machine-learning``. It exposes a forward and a backward pass that take data samples and trainable weights as input."
msgstr "``நியூரல்நெட்வொர்க்`` வகுப்பு என்பது ``கிஸ்கிட்-மெஷின்-லேர்னிங்`` இல் கிடைக்கும் அனைத்து QNNகளுக்கான இடைமுகமாகும். தரவு மாதிரிகள் மற்றும் பயிற்சியளிக்கக்கூடிய எடைகளை உள்ளீடாக எடுக்கும் முன்னோக்கி மற்றும் பின்தங்கிய பாஸை இது வெளிப்படுத்துகிறது."

#: ../../tutorials/01_neural_networks.ipynb:81
msgid "It's important to note that ``NeuralNetwork``\\ s are \"stateless\". They do not contain any training capabilities (these are pushed to the actual algorithms or applications: `classifiers <https://qiskit.org/ecosystem/machine-learning/apidocs/qiskit_machine_learning.algorithms.html#classifiers>`__, `regressors <https://qiskit.org/ecosystem/machine-learning/apidocs/qiskit_machine_learning.algorithms.html#regressors>`__, etc), nor do they store the values for trainable weights."
msgstr "``நியூரல்நெட்வொர்க்``\\கள் \"நிலையற்றவை\" என்பதைக் கவனத்தில் கொள்ள வேண்டியது அவசியம். அவற்றில் எந்தப் பயிற்சித் திறன்களும் இல்லை (இவை உண்மையான வழிமுறைகள் அல்லது பயன்பாடுகளுக்குத் தள்ளப்படுகின்றன: <https://qiskit.org/ecosystem/machine-learning/apidocs/qiskit_machine_learning.algorithms.html"

#: ../../tutorials/01_neural_networks.ipynb:94
msgid "Let's now look into specific examples for the two ``NeuralNetwork`` implementations. But first, let's set the algorithmic seed to ensure that the results don't change between runs."
msgstr "இரண்டு ``நியூரல் நெட்வொர்க்`` செயல்படுத்தலுக்கான குறிப்பிட்ட உதாரணங்களை இப்போது பார்க்கலாம். ஆனால் முதலில், ரன்களுக்கு இடையில் முடிவுகள் மாறாமல் இருப்பதை உறுதிசெய்ய அல்காரிதம் விதையை அமைப்போம்."

#: ../../tutorials/01_neural_networks.ipynb:118
msgid "2. How to Instantiate QNNs"
msgstr "2. QNNகளை எவ்வாறு உடனடியாக உருவாக்குவது"

#: ../../tutorials/01_neural_networks.ipynb:121
msgid "2.1. ``EstimatorQNN``"
msgstr "2.1. ``எஸ்டிமேட்டர்QNN``"

#: ../../tutorials/01_neural_networks.ipynb:123
msgid "The ``EstimatorQNN`` takes in a parametrized quantum circuit as input, as well as an optional quantum mechanical observable, and outputs expectation value computations for the forward pass. The ``EstimatorQNN`` also accepts lists of observables to construct more complex QNNs."
msgstr "` ` EstimatorQNN ` ` எடுத்துக்காட்டு ஒரு பராமரிப்பு வளிமண்டல சுற்றுச்சூழல் உள்ளீடு, மற்றும் ஒரு விருப்பமான கோட்பாடு යාන්ත්රික கணக்கீடும், மற்றும் முன்னணி மதிப்பு கணக்கீடுகளின் மதிப்பு கணக்கீடுகள். ` ` EstimatorQNN ` ` மேலும் சிக்கலான QNNகளை உருவாக்க ஆவணங்களின் பட்டியல்களை ஏற்றுக்கொள்கிறது."

#: ../../tutorials/01_neural_networks.ipynb:125
msgid "Let's see an ``EstimatorQNN`` in action with a simple example. We start by constructing the parametrized circuit. This quantum circuit has two parameters, one represents a QNN input and the other represents a trainable weight:"
msgstr "ஒரு எளிய எடுத்துக்காட்டு நடவடிக்கையில் ` ` EstimatorQNN ` ` பார்க்கலாம். நாம் பராமரிப்பு சுற்றுப்பாதை கட்டி தொடங்கினோம். இந்த குவாண்ட் சுற்றுச்சொல் இரண்டு அளபுருக்கள் கொண்டது, ஒரு QNN உள்ளீட்டை குறிக்கும் மற்றொன்று ஒரு சுழல் எடை குறிக்கிறது:"

#: ../../tutorials/01_neural_networks.ipynb:192
msgid "We can now create an observable to define the expectation value computation. If not set, then the ``EstimatorQNN`` will automatically create the default observable :math:`Z^{\\otimes n}`. Here, :math:`n` is the number of qubits of the quantum circuit."
msgstr "நாம் இப்பொழுது எதிர்பார்ப்பு மதிப்பு கணக்கெடுப்பை வரையறுக்கப்பட முடியும். அமைக்கப்படவில்லை என்றால், ` ` EstimatorQNN ` ` தானாகவே முன்னிருப்பாக :math:` Z ^ {\\otimes n} `. இங்கு, :math:` n `. குவாண்ட் சுற்றுப்பின் எண்ணிக்கை."

#: ../../tutorials/01_neural_networks.ipynb:194
msgid "In this example, we will change things up and use the :math:`Y^{\\otimes n}` observable:"
msgstr "இந்த உதாரணத்தில், நாம் விஷயத்தை மாற்ற மற்றும் :math:` Y ^ {\\otimes n} ` பார்வை:"

#: ../../tutorials/01_neural_networks.ipynb:217
msgid "Together with the quantum circuit defined above, and the observable we have created, the ``EstimatorQNN`` constructor takes in the following keyword arguments:"
msgstr "மேலே வரையறுக்கப்பட்ட குவாண்டம் சுற்றியோடு, மற்றும் நாம் உருவாக்க முடியும், ` ` EstimatorQNN ` ` கட்டமைப்புகள் பின்வரும் விசைப்புச் சொற்களில் எடுத்துக்கொள்கிறது:"

#: ../../tutorials/01_neural_networks.ipynb:219
msgid "``estimator``: optional primitive instance"
msgstr "``மதிப்பீடு``: விருப்பமான பழமையான நிகழ்வு"

#: ../../tutorials/01_neural_networks.ipynb:220
msgid "``input_params``: list of quantum circuit parameters that should be treated as \"network inputs\""
msgstr "``input_params``: \"நெட்வொர்க் உள்ளீடுகள்\" எனக் கருதப்பட வேண்டிய குவாண்டம் சர்க்யூட் அளவுருக்களின் பட்டியல்"

#: ../../tutorials/01_neural_networks.ipynb:221
msgid "``weight_params``: list of quantum circuit parameters that should be treated as \"network weights\""
msgstr "``weight_params``: \"நெட்வொர்க் எடைகள்\" எனக் கருதப்பட வேண்டிய குவாண்டம் சர்க்யூட் அளவுருக்களின் பட்டியல்"

#: ../../tutorials/01_neural_networks.ipynb:223
msgid "In this example, we previously decided that the first parameter of ``params1`` should be the input, while the second should be the weight. As we are performing a local statevector simulation, we will not set the ``estimator`` parameter; the network will create an instance of the reference ``Estimator`` primitive for us. If we needed to access cloud resources or ``Aer`` simulators, we would have to define the respective ``Estimator`` instances and pass them to the ``EstimatorQNN``."
msgstr "இந்த உதாரணத்தில், \"பரம்ஸ்1\"-இன் முதல் அளவுரு உள்ளீடாகவும், இரண்டாம் அளவுரு எடையாகவும் இருக்கவேண்டுமென்று தீர்மானித்தோம். நாம் உள்ளூர் ஸ்டேட்வெக்டர் ஒப்புருவாக்கி பயன்படுத்தும்போது, \"எஸ்டிமேடர்\" அளவுரை அமைக்கபடாது; வலைப்பின்னல் \"எஸ்டிமேடர்\" ப்ரிமிட்டிவ் குறிப்பை இன்ஸ்டன்ஸ்-ஆக நமக்கு உருவாக்கும். நாம் கிளவுட் வளங்களை அல்லது \"ஏர்\" ஒப்புருவாக்கி அணுக வேண்டுமென்றால், \"எஸ்டிமேடர்\" இன்ஸ்டன்ஸ்-ஐ வரையறுத்து \"எஸ்டிமேடர் க்யூ எண் எண்\"-ுக்கு அனுப்ப வேண்டும்."

#: ../../tutorials/01_neural_networks.ipynb:274
msgid "We'll see how to use the QNN in the following sections, but before that, let's check out the ``SamplerQNN`` class."
msgstr "பின்வரும் பகுதிகளில் QNN (QNN) பயன்படுத்த எப்படி பார்க்க வேண்டும், ஆனால் அந்த முன், ` சம்ப்லெர்க் QNN ` ` வகுப்பை வெளியே சரிபார்க்கலாம்."

#: ../../tutorials/01_neural_networks.ipynb:286
msgid "2.2. ``SamplerQNN``"
msgstr "2.2. ``சாமப்லர்QNN``"

#: ../../tutorials/01_neural_networks.ipynb:288
msgid "The ``SamplerQNN`` is instantiated in a similar way to the ``EstimatorQNN``, but because it directly consumes samples from measuring the quantum circuit, it does not require a custom observable."
msgstr "` ` SamplerQNN ` ` ` EstimatorQNN ` `, ஆனால் அது நேரடியாக மாதிரிகளில் இருந்து மாதிரிகளை ஏற்றுக்கொள்ளும் ஏனெனில், அது ஒரு வழக்கமான ஒத்திசைவு தேவை இல்லை."

#: ../../tutorials/01_neural_networks.ipynb:290
msgid "These output samples are interpreted by default as the probabilities of measuring the integer index corresponding to a bitstring. However, the ``SamplerQNN`` also allows us to specify an ``interpret`` function to post-process the samples. This function should be defined so that it takes a measured integer (from a bitstring) and maps it to a new value, i.e. non-negative integer."
msgstr "இந்த வெளியீட்டு மாதிரிகளை ஒரு பிட்வரிசைக்கு ஒதுக்கப்பட்ட முழு அட்டவணை அளவுகோள்களின் இயல்புகளாக முன்னிருப்பாக வரையறுக்கப்படுகிறது. எனினும், ` ` சாம்பல்QNN ` ` கூட மாதிரிகளை புதுப்பிக்கப்படுவதற்கு ` ` தவிர்க்க ` ` குறிப்பிடுவதற்கு உதவுகிறது. இந்த செயல்கூறு வரையறுக்கப்படவேண்டும் அதனால் அது அளவிடப்பட்ட முழு (பிட்ரசில் இருந்து) மற்றும் அதை ஒரு புதிய மதிப்பு, அதாவது, எதிர்மறை எண்ணை வரையறுக்கிறது."

#: ../../tutorials/01_neural_networks.ipynb:292
msgid "**(!)** It's important to note that if a custom ``interpret`` function is defined, the ``output_shape`` cannot be inferred by the network, and **needs to be provided explicitly**."
msgstr "**(!)** தனிப்பயன் ``விளக்கம்`` செயல்பாடு வரையறுக்கப்பட்டால், ``அவுட்புட்_ஷேப்`` பிணையத்தால் ஊகிக்கப்படாது, மேலும் **வெளிப்படையாக வழங்கப்பட வேண்டும்**."

#: ../../tutorials/01_neural_networks.ipynb:294
msgid "**(!)** It's also important to keep in mind that if no ``interpret`` function is used, the dimension of the probability vector will scale exponentially with the number of qubits. With a custom ``interpret`` function, this scaling can change. If, for instance, an index is mapped to the parity of the corresponding bitstring, i.e., to 0 or 1, the result will be a probability vector of length 2 independently of the number of qubits."
msgstr "**(!)** ``விளக்கம்`` செயல்பாடு பயன்படுத்தப்படாவிட்டால், நிகழ்தகவு வெக்டரின் பரிமாணம் குவிட்களின் எண்ணிக்கையுடன் அதிவேகமாக அளவிடப்படும் என்பதையும் நினைவில் கொள்ள வேண்டியது அவசியம். தனிப்பயன் ``விளக்கம்`` செயல்பாட்டின் மூலம், இந்த அளவிடுதல் மாறலாம். எடுத்துக்காட்டாக, ஒரு குறியீட்டை தொடர்புடைய பிட்ஸ்ட்ரிங் சமநிலைக்கு, அதாவது 0 அல்லது 1 க்கு வரைபடமாக்கினால், இதன் விளைவாக க்யூபிட்களின் எண்ணிக்கையிலிருந்து சுயாதீனமாக நீளம் 2 நிகழ்தகவு திசையன் இருக்கும்."

#: ../../tutorials/01_neural_networks.ipynb:305
msgid "Let's create a different quantum circuit for the ``SamplerQNN``. In this case, we will have two input parameters and four trainable weights that parametrize a two-local circuit."
msgstr "இந்த வழக்கில், நாம் இரு உள்ளீட்டு அளபுருக்கள் மற்றும் நான்கு சுற்றுச்சூழல் வீட்டில் இரண்டு உள்ளீட்டு சுற்றுப்பயணத்தை உருவாக்க வேண்டும்."

#: ../../tutorials/01_neural_networks.ipynb:409
msgid "Similarly to the ``EstimatorQNN``, we must specify inputs and weights when instantiating the ``SamplerQNN``. In this case, the keyword arguments will be: - ``sampler``: optional primitive instance - ``input_params``: list of quantum circuit parameters that should be treated as \"network inputs\" - ``weight_params``: list of quantum circuit parameters that should be treated as \"network weights\""
msgstr "அப்படியே ` ` சம்ப்லர் QNN ` ` ` சம்ப்ரீக்னென் ` ` `. இந்த வழக்கில், விசைப்பெயர் வார்த்தைகள் ` ` samplerQNN ` ` ` ` samplerQNN ` `: விருப்பத் தன்மையான உதாரணம் ` ` input_params ` `: list of quantum circuit parameters that should be to be with \"network inputs\"-` ` weight_ params ` `: list of quantum circuit parameters that should be to be with \"network weights\""

#: ../../tutorials/01_neural_networks.ipynb:411
msgid "Please note that, once again, we are choosing not to set the ``Sampler`` instance to the QNN and relying on the default."
msgstr "தயவு செய்து, மீண்டும் ஒரு முறை, நாங்கள் QNN க்கு ` ` சாம்பலர் ` ` உதாரணம் அமைக்க இல்லையென்றால், முன்னிருப்பில் மறுபடியும் தேர்ந்தெடுக்கப்படவில்லை."

#: ../../tutorials/01_neural_networks.ipynb:460
msgid "In addition to the basic arguments shown above, the ``SamplerQNN`` accepts three more settings: ``input_gradients``, ``interpret``, and ``output_shape``. These will be introduced in sections 4 and 5."
msgstr "மேலே காட்டப்பட்ட அடிப்படை தருமதிப்புகளின் கூடுதலாக, ` சம்ப்லர் QNN ` இன்னும் மூன்று அமைப்புகளை ஏற்றுக்கொள்கிறது: ` ` input_gradients-action ` `, and ` output_shape ` `. இவை 4 மற்றும் 5 பகுதிகளில் அறிமுகப்படுத்தப்படும்."

#: ../../tutorials/01_neural_networks.ipynb:472
msgid "3. How to Run a Forward Pass"
msgstr "3. முன்னோக்கி பாஸை எவ்வாறு இயக்குவது"

#: ../../tutorials/01_neural_networks.ipynb:484
msgid "3.1. Set-Up"
msgstr "3.1 அமைவு"

#: ../../tutorials/01_neural_networks.ipynb:486
msgid "In a real setting, the inputs would be defined by the dataset, and the weights would be defined by the training algorithm or as part of a pre-trained model. However, for the sake of this tutorial, we will specify random sets of input and weights of the right dimension:"
msgstr "உண்மையான அமைப்பில், உள்ளீடுகள் தரவுத்தொகுப்பால் வரையறுக்கப்படும், மேலும் எடைகள் பயிற்சி அல்காரிதம் அல்லது முன் பயிற்சி பெற்ற மாதிரியின் ஒரு பகுதியாக வரையறுக்கப்படும். இருப்பினும், இந்த டுடோரியலுக்காக, சரியான பரிமாணத்தின் உள்ளீடு மற்றும் எடைகளின் சீரற்ற தொகுப்புகளை நாங்கள் குறிப்பிடுவோம்:"

#: ../../tutorials/01_neural_networks.ipynb:498
msgid "3.1.1. ``EstimatorQNN`` Example"
msgstr "3.1.1.`` EstimatorQNN `` எடுத்துக்காட்டு"

#: ../../tutorials/01_neural_networks.ipynb:569
msgid "3.1.2. ``SamplerQNN`` Example"
msgstr "3.1.2. ``SamplerQNN`` எடுத்துக்காட்டு"

#: ../../tutorials/01_neural_networks.ipynb:639
msgid "Once we have the inputs and the weights, let's see the results for batched and non-batched passes."
msgstr "எங்களிடம் உள்ளீடுகள் மற்றும் எடைகள் கிடைத்ததும், பேட்ச் மற்றும் பேட்ச் அல்லாத பாஸ்களுக்கான முடிவுகளைப் பார்ப்போம்."

#: ../../tutorials/01_neural_networks.ipynb:651
msgid "3.2. Non-batched Forward Pass"
msgstr "3.2 தொகுதி அல்லாத முன்னோக்கி பாஸ்"

#: ../../tutorials/01_neural_networks.ipynb:663
msgid "3.2.1. ``EstimatorQNN`` Example"
msgstr "3.2.1. ``EstimatorQNN`` எடுத்துக்காட்டு"

#: ../../tutorials/01_neural_networks.ipynb:674
msgid "For the ``EstimatorQNN``, the expected output shape for the forward pass is ``(1, num_qubits * num_observables)`` where ``1`` in our case is the number of samples:"
msgstr "``EstimatorQNN``க்கு, முன்னோக்கி பாஸிற்கான எதிர்பார்க்கப்படும் வெளியீட்டு வடிவம் ``(1, num_qubits * num_observables)`` ஆகும், இங்கு ``1`` என்பது மாதிரிகளின் எண்ணிக்கை:"

#: ../../tutorials/01_neural_networks.ipynb:727
msgid "3.2.2. ``SamplerQNN`` Example"
msgstr "3.2.2. ``SamplerQNN`` எடுத்துக்காட்டு"

#: ../../tutorials/01_neural_networks.ipynb:738
msgid "For the ``SamplerQNN`` (without a custom interpret function), the expected output shape for the forward pass is ``(1, 2**num_qubits)``. With a custom interpret function, the output shape will be ``(1, output_shape)``, where ``1`` in our case is the number of samples:"
msgstr "``SamplerQNN`` (தனிப்பயன் விளக்கம் செயல்பாடு இல்லாமல்), முன்னோக்கி பாஸிற்கான எதிர்பார்க்கப்படும் வெளியீடு வடிவம் ``(1, 2**num_qubits)`` ஆகும். தனிப்பயன் விளக்கச் செயல்பாட்டின் மூலம், வெளியீட்டு வடிவம் ``(1, output_shape)`` ஆக இருக்கும், இங்கு ``1`` என்பது மாதிரிகளின் எண்ணிக்கை:"

#: ../../tutorials/01_neural_networks.ipynb:791
msgid "3.3. Batched Forward Pass"
msgstr "3.3 பேட்ச்டு ஃபார்வர்டு பாஸ்"

#: ../../tutorials/01_neural_networks.ipynb:803
msgid "3.3.1. ``EstimatorQNN`` Example"
msgstr "3.3.1. ``EstimatorQNN`` எடுத்துக்காட்டு"

#: ../../tutorials/01_neural_networks.ipynb:814
msgid "For the ``EstimatorQNN``, the expected output shape for the forward pass is ``(batch_size, num_qubits * num_observables)``:"
msgstr "``EstimatorQNN``க்கு, முன்னோக்கி பாஸிற்கான எதிர்பார்க்கப்படும் வெளியீட்டு வடிவம் ``(batch_size, num_qubits * num_observables)``:"

#: ../../tutorials/01_neural_networks.ipynb:872
msgid "3.3.2. ``SamplerQNN`` Example"
msgstr "3.3.2. ` ` SamplerQNN ` எடுத்துக்காட்டு"

#: ../../tutorials/01_neural_networks.ipynb:883
msgid "For the ``SamplerQNN`` (without custom interpret function), the expected output shape for the forward pass is ``(batch_size, 2**num_qubits)``. With a custom interpret function, the output shape will be ``(batch_size, output_shape)``."
msgstr "` ` SamplerQNN ` ` (தனிப்பட்ட விளக்க செயல்கூறு இல்லாமல்), எதிர்பார்க்கப்பட்ட வெளியீடு வடிவம் ` ` (batch_size, 2 * *num_qubits) ` `. With a custom interpret function, the output shape will be ` (batch_size, output_shape) ` `."

#: ../../tutorials/01_neural_networks.ipynb:941
msgid "4. How to Run a Backward Pass"
msgstr "4. எப்படி ஒரு பின்னணி பாஸ் இயக்குவது "

#: ../../tutorials/01_neural_networks.ipynb:943
msgid "Let's take advantage of the inputs and weights defined above to show how the backward pass works. This pass returns a tuple ``(input_gradients, weight_gradients)``. By default, the backward pass will only calculate gradients with respect to the weight parameters."
msgstr "பின்தங்கிய பாஸ் எவ்வாறு செயல்படுகிறது என்பதைக் காட்ட மேலே வரையறுக்கப்பட்ட உள்ளீடுகள் மற்றும் எடைகளைப் பயன்படுத்திக் கொள்வோம். இந்த பாஸ் ஒரு டூப்பிள் ``(உள்ளீடு_கிரேடியண்ட்ஸ், எடை_கிரேடியண்ட்ஸ்)`` வழங்கும். முன்னிருப்பாக, பின்தங்கிய பாஸ் எடை அளவுருக்கள் தொடர்பான சாய்வுகளை மட்டுமே கணக்கிடும்."

#: ../../tutorials/01_neural_networks.ipynb:945
msgid "If you want to enable gradients with respect to the input parameters, you should set the following flag during the QNN instantiation:"
msgstr "நீங்கள் உள்ளீட்டு அளபுருக்களுக்கு மதிப்புடன் சாங்குகளை செயலாக்க விரும்பினால், QNN instantiation க்குள் பின்வரும் குறியை அமைக்க வேண்டும்:"

#: ../../tutorials/01_neural_networks.ipynb:951
msgid "Please remember that input gradients are **required** for the use of ``TorchConnector`` for PyTorch integration."
msgstr "தயவு செய்து நினைவில் கொள்ளும்படி உள்ளீட்டு சாதனங்கள் ** ` TorchConnector ` ` ` ` TorchConnector ` ` இன் பயன்பாடு."

#: ../../tutorials/01_neural_networks.ipynb:963
msgid "4.1. Backward Pass without Input Gradients"
msgstr "4.1 உள்ளீடு சரிவுகள் இல்லாமல் பின்தங்கிய பாஸ்"

#: ../../tutorials/01_neural_networks.ipynb:975
msgid "4.1.1. ``EstimatorQNN`` Example"
msgstr "4.1.1. ` ` EstimatorQNN ` எடுத்துக்காட்டு"

#: ../../tutorials/01_neural_networks.ipynb:986
msgid "For the ``EstimatorQNN``, the expected output shape for the weight gradients is ``(batch_size, num_qubits * num_observables, num_weights)``:"
msgstr "` ` EstimatorQNN ` `, எடை சார்ந்துகளுக்கு எதிர்பார்க்கப்பட்ட வெளியீடு வடிவம் ` ` (batch_size, num_qubits * num_observables, num_weights) ` `:"

#: ../../tutorials/01_neural_networks.ipynb:1050
msgid "4.1.2. ``SamplerQNN`` Example"
msgstr "4.1.2. ` ` SamplerQNN ` எடுத்துக்காட்டு"

#: ../../tutorials/01_neural_networks.ipynb:1061
msgid "For the ``SamplerQNN`` (without custom interpret function), the expected output shape for the forward pass is ``(batch_size, 2**num_qubits, num_weights)``. With a custom interpret function, the output shape will be ``(batch_size, output_shape, num_weights)``.:"
msgstr "` ` SamplerQNN ` ` (தனிப்பட்ட விளக்கச்சீட்டு செயல்கூறு இல்லாமல்), முன்னோடியான வெளியீட்டு வடிவம் ` ` (batch_size, 2 * *num_qubits, num_weights) ` `. தனிப்பயன் வடிவமைப்புடன் வெளியீட்டு வடிவம் ` ` (batch_size, output_shape, num_weights) ` `.:"

#: ../../tutorials/01_neural_networks.ipynb:1134
msgid "4.2. Backward Pass with Input Gradients"
msgstr "4.2 உள்ளீட்டு சாய்வுகளுடன் பின்தங்கிய பாஸ்"

#: ../../tutorials/01_neural_networks.ipynb:1136
msgid "Let's enable the ``input_gradients`` to show what the expected output sizes are for this option."
msgstr "எதிர்பார்க்கப்பட்ட வெளியீட்டுக் அளவுகள் இந்த விருப்பத்துக்கு என்ன ` ` input_gradients - > ` ` ` input_gradients-action"

#: ../../tutorials/01_neural_networks.ipynb:1159
msgid "4.2.1. ``EstimatorQNN`` Example"
msgstr "4.2.1. ` ` EstimatorQNN ` எடுத்துக்காட்டு"

#: ../../tutorials/01_neural_networks.ipynb:1170
msgid "For the ``EstimatorQNN``, the expected output shape for the input gradients is ``(batch_size, num_qubits * num_observables, num_inputs)``:"
msgstr "` ` EstimatorQNN ` `, உள்ளீட்டு சாதனங்களுக்கான எதிர்பார்க்கப்பட்ட வெளியீடு வடிவம் ` ` (batch_size, num_qubits * num_observables, num_inputs) ` `:"

#: ../../tutorials/01_neural_networks.ipynb:1234
msgid "4.2.2. ``SamplerQNN`` Example"
msgstr "4.2.2. ` ` SamplerQNN ` எடுத்துக்காட்டு"

#: ../../tutorials/01_neural_networks.ipynb:1245
msgid "For the ``SamplerQNN`` (without custom interpret function), the expected output shape for the input gradients is ``(batch_size, 2**num_qubits, num_inputs)``. With a custom interpret function, the output shape will be ``(batch_size, output_shape, num_inputs)``."
msgstr "` ` SamplerQNN ` ` (தனிப்பட்ட விளக்க செயல்கூறு இல்லாமல்), உள்ளீட்டு சாதனங்களுக்கான எதிர்பார்க்கப்பட்ட வெளியீடு வடிவம் ` ` (batch_size, 2 * *num_qubits, num_inputs) ` `. தனிப்பயன் வடிவமைப்புடன் வெளியீட்டு வடிவம் ` ` (batch_size, output_shape, num_inputs) ` `."

#: ../../tutorials/01_neural_networks.ipynb:1327
msgid "5. Advanced Functionality"
msgstr "5. மேம்பட்ட செயல்பாடுகள்"

#: ../../tutorials/01_neural_networks.ipynb:1339
msgid "5.1. ``EstimatorQNN`` with Multiple Observables"
msgstr "5.1 ``EstimatorQNN`` பல அவதானிப்புகளுடன்"

#: ../../tutorials/01_neural_networks.ipynb:1350
msgid "The ``EstimatorQNN`` allows to pass lists of observables for more complex QNN architectures. For example (note the change in output shape):"
msgstr "` ` EstimatorQNN ` ` மேலும் சிக்கலான QNN கட்டிடக்கலுக்கான ஆவணங்களின் பட்டியல்களை கடக்க அனுமதிக்கிறது. உதாரணமாக (வெளியீட்டு வடிவத்தில் மாற்றம் குறிப்பு):"

#: ../../tutorials/01_neural_networks.ipynb:1430
msgid "5.2. ``SamplerQNN`` with custom ``interpret``"
msgstr "5. 2. ` ` SamplerQNN ` ` தனிப்பயன் ` ` ` `"

#: ../../tutorials/01_neural_networks.ipynb:1441
msgid "One common ``interpret`` method for ``SamplerQNN`` is the ``parity`` function, which allows it to perform binary classification. As explained in the instantiation section, using interpret functions will modify the output shape of the forward and backward passes. In the case of the parity interpret function, ``output_shape`` is fixed to ``2``. Therefore, the expected forward and weight gradient shapes are ``(batch_size, 2)`` and ``(batch_size, 2, num_weights)``, respectively:"
msgstr "ஒரு பொதுவான ` ` சம்ப்லர் QNN ` ` என்ற முறையை ` ` parity ` ` என்ற முறையில், இது இரும வகைப்பாட்டை செயல்படுத்துவதற்கு அனுமதிக்கிறது. எடுத்துக்காட்டு விகிதத்தில் விளக்கப்படாமல், விளக்கச் செயல்களைப் பயன்படுத்தி முன்னணி மற்றும் பின்னூட்டிகளின் வெளியீட்டு வடிவத்தை மாற்றும். பார்சி உரையாடல் செயல்கூறு, ` ` output_shape ` ` ` ` output_shape ` `. அதனால், எதிர்பார்க்கப்பட்ட முன்னேற்றம் மற்றும் எடை கிரீடென்ட் வடிவங்கள் ` ` (batch_size, 2) ` ` (batch_size, 2, num_weights) ` ` ` Batch_size, 2, num_weights) `."

#: ../../tutorials/01_neural_networks.ipynb:1523
msgid "6. Conclusion"
msgstr "6. முடிவுரை"

#: ../../tutorials/01_neural_networks.ipynb:1525
msgid "In this tutorial, we introduced the two neural networks classes provided by ``qiskit-machine-learning``, namely the ``EstimatorQNN`` and ``SamplerQNN``, which extend the base ``NeuralNetwork`` class. We provided some theoretical background, the key steps for QNN initialization, basic use in forward and backward passes, and advanced functionality."
msgstr "இந்த டுடோரியலில், ``கிஸ்கிட்-மெஷின்-லேர்னிங்`` வழங்கும் இரண்டு நரம்பியல் நெட்வொர்க்குகள் வகுப்புகளை அறிமுகப்படுத்தினோம், அதாவது ``EstimatorQNN`` மற்றும் ``SamplerQNN``, இது அடிப்படை ``NeuralNetwork`` வகுப்பை விரிவுபடுத்துகிறது. நாங்கள் சில கோட்பாட்டு பின்னணி, QNN துவக்கத்திற்கான முக்கிய படிகள், முன்னோக்கி மற்றும் பின்தங்கிய பாஸ்களில் அடிப்படை பயன்பாடு மற்றும் மேம்பட்ட செயல்பாடுகளை வழங்கினோம்."

#: ../../tutorials/01_neural_networks.ipynb:1527
msgid "We now encourage you to play around with the problem setup and see how different circuit sizes, input, and weight parameter lengths influence the output shapes."
msgstr "சிக்கல் அமைப்பைச் சுற்றி விளையாடவும், வெவ்வேறு சுற்று அளவுகள், உள்ளீடு மற்றும் எடை அளவுரு நீளங்கள் வெளியீட்டு வடிவங்களை எவ்வாறு பாதிக்கின்றன என்பதைப் பார்க்கவும் நாங்கள் இப்போது உங்களை ஊக்குவிக்கிறோம்."

