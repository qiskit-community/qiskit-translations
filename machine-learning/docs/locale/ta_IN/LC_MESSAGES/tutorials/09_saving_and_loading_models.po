msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-09 10:21+0000\n"
"PO-Revision-Date: 2023-06-06 05:52\n"
"Last-Translator: \n"
"Language: ta\n"
"Language-Team: Tamil\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/09_saving_and_loading_models.po\n"
"X-Crowdin-File-ID: 9887\n"

#: ../../tutorials/09_saving_and_loading_models.ipynb:9
msgid "This page was generated from `docs/tutorials/09_saving_and_loading_models.ipynb`__."
msgstr "இந்தப் பக்கம் `docs/tutorials/௦௯_saving_and_loading_models.app`__ சட்டத்தால் உருவாக்கப்பட்டது."

#: ../../tutorials/09_saving_and_loading_models.ipynb:9
msgid "Saving, Loading Qiskit Machine Learning Models and Continuous Training"
msgstr "சேமிப்பு, கிஸ்கிட் இயந்திர கற்றல் மாதிரிகளை ஏற்றுதல் மற்றும் தொடர்ச்சியான பயிற்சி"

#: ../../tutorials/09_saving_and_loading_models.ipynb:11
msgid "In this tutorial we will show how to save and load Qiskit machine learning models. Ability to save a model is very important, especially when a significant amount of time is invested in training a model on a real hardware. Also, we will show how to resume training of the previously saved model."
msgstr "இந்த டுடோரியலில் Qiskit இயந்திர கற்றல் மாதிரிகளை எவ்வாறு சேமிப்பது மற்றும் ஏற்றுவது என்பதைக் காண்பிப்போம். ஒரு மாதிரியைச் சேமிக்கும் திறன் மிகவும் முக்கியமானது, குறிப்பாக உண்மையான வன்பொருளில் ஒரு மாதிரியைப் பயிற்றுவிப்பதில் கணிசமான அளவு நேரத்தை முதலீடு செய்யும் போது. மேலும், முன்பு சேமித்த மாதிரியின் பயிற்சியை எவ்வாறு மீண்டும் தொடங்குவது என்பதை நாங்கள் காண்பிப்போம்."

#: ../../tutorials/09_saving_and_loading_models.ipynb:13
msgid "In this tutorial we will cover how to:"
msgstr "இந்த டுடோரியலில், எப்படி செய்வது என்று பார்ப்போம்:"

#: ../../tutorials/09_saving_and_loading_models.ipynb:15
msgid "Generate a simple dataset, split it into training/test datasets and plot them"
msgstr "எளிய தரவுத்தொகுப்பை உருவாக்கி, அதை பயிற்சி/சோதனை தரவுத்தொகுப்புகளாகப் பிரித்து அவற்றைத் திட்டமிடுங்கள்"

#: ../../tutorials/09_saving_and_loading_models.ipynb:16
msgid "Train and save a model"
msgstr "ஒரு மாதிரியைப் பயிற்றுவித்துச் சேமிக்கவும்"

#: ../../tutorials/09_saving_and_loading_models.ipynb:17
msgid "Load a saved model and resume training"
msgstr "சேமித்த மாதிரியை ஏற்றிப் பயிற்சியை மீண்டும் தொடங்கவும்"

#: ../../tutorials/09_saving_and_loading_models.ipynb:18
msgid "Evaluate performance of models"
msgstr "மாதிரிகளின் செயல்திறனை மதிப்பிடுங்கள்"

#: ../../tutorials/09_saving_and_loading_models.ipynb:19
msgid "PyTorch hybrid models"
msgstr "பைடார்ச் கலப்பின மாதிரிகள்"

#: ../../tutorials/09_saving_and_loading_models.ipynb:30
msgid "First off, we start from the required imports. We'll heavily use SciKit-Learn on the data preparation step. In the next cell we also fix a random seed for reproducibility purposes."
msgstr ""

#: ../../tutorials/09_saving_and_loading_models.ipynb:64
msgid "We will be using two quantum simulators, in particular, two instances of the ``Sampler`` primitive. We'll start training on the first one, then will resume training on the second one. The approach shown in this tutorial can be used to train a model on a real hardware available on the cloud and then re-use the model for inference on a local simulator."
msgstr ""

#: ../../tutorials/09_saving_and_loading_models.ipynb:88
msgid "1. Prepare a dataset"
msgstr "1. தரவுத்தொகுப்பைத் தயாரிக்கவும்"

#: ../../tutorials/09_saving_and_loading_models.ipynb:90
msgid "Next step is to prepare a dataset. Here, we generate some data in the same way as in other tutorials. The difference is that we apply some transformations to the generated data. We generates ``40`` samples, each sample has ``2`` features, so our features is an array of shape ``(40, 2)``. Labels are obtained by summing up features by columns and if the sum is more than ``1`` then this sample is labeled as ``1`` and ``0`` otherwise."
msgstr "அடுத்த படி தரவுத்தொகுப்பைத் தயாரிப்பது. மற்ற டுடோரியல்களைப் போலவே இங்கேயும் சில தரவுகளை உருவாக்குகிறோம். வித்தியாசம் என்னவென்றால், உருவாக்கப்பட்ட தரவுகளுக்கு சில மாற்றங்களைப் பயன்படுத்துகிறோம். நாங்கள் ``40`` மாதிரிகளை உருவாக்குகிறோம், ஒவ்வொரு மாதிரியிலும் ``2`` அம்சங்கள் உள்ளன, எனவே எங்கள் அம்சங்கள் ``(40, 2)`` வடிவத்தின் வரிசையாகும். நெடுவரிசைகள் மூலம் அம்சங்களைச் சுருக்கி லேபிள்கள் பெறப்படுகின்றன, மேலும் கூட்டுத்தொகை ``1``க்கு அதிகமாக இருந்தால், இந்த மாதிரி ``1`` மற்றும் ``0`` என லேபிளிடப்படும்."

#: ../../tutorials/09_saving_and_loading_models.ipynb:114
msgid "Then, we scale down our features into a range of ``[0, 1]`` by applying ``MinMaxScaler`` from SciKit-Learn. Model training convergence is better when this transformation is applied."
msgstr "பிறகு, SciKit-Learn இலிருந்து ``MinMaxScaler`` ஐப் பயன்படுத்துவதன் மூலம் எங்கள் அம்சங்களை ``[0, 1]`` வரம்பிற்குள் அளவிடுகிறோம். இந்த மாற்றம் பயன்படுத்தப்படும்போது மாதிரிப் பயிற்சி ஒருங்கிணைப்பு சிறப்பாக இருக்கும்."

#: ../../tutorials/09_saving_and_loading_models.ipynb:161
msgid "Let's take a look at the features of the first ``5`` samples of our dataset after the transformation."
msgstr ""

#: ../../tutorials/09_saving_and_loading_models.ipynb:219
msgid "We choose ``VQC`` or Variational Quantum Classifier as a model we will train. This model, by default, takes one-hot encoded labels, so we have to transform the labels that are in the set of ``{0, 1}`` into one-hot representation. We employ SciKit-Learn for this transformation as well. Please note that the input array must be reshaped to ``(num_samples, 1)`` first. The ``OneHotEncoder`` encoder does not work with 1D arrays and our labels is a 1D array. In this case a user must decide either an array has only one feature(our case!) or has one sample. Also, by default the encoder returns sparse arrays, but for dataset plotting it is easier to have dense arrays, so we set ``sparse`` to ``False``."
msgstr "நாங்கள் பயிற்சியளிக்கும் மாதிரியாக ``VQC` அல்லது மாறுபாடு குவாண்டம் வகைப்படுத்தியைத் தேர்வு செய்கிறோம். இந்த மாதிரி, இயல்பாக, ஒரு சூடான குறியிடப்பட்ட லேபிள்களை எடுக்கும், எனவே ``{0, 1}`` தொகுப்பில் உள்ள லேபிள்களை ஒரு சூடான பிரதிநிதித்துவமாக மாற்ற வேண்டும். இந்த மாற்றத்திற்கும் நாங்கள் SciKit-Learn ஐப் பயன்படுத்துகிறோம். உள்ளீட்டு அணிவரிசை முதலில் ``(num_samples, 1)`` என மறுவடிவமைக்கப்பட வேண்டும் என்பதை நினைவில் கொள்ளவும். ``OneHotEncoder`` குறியாக்கி 1D வரிசைகளுடன் வேலை செய்யாது மற்றும் எங்கள் லேபிள்கள் 1D வரிசையாகும். இந்த வழக்கில், ஒரு வரிசைக்கு ஒரே ஒரு அம்சம் (எங்கள் வழக்கு!) அல்லது ஒரு மாதிரி உள்ளது என்பதை பயனர் தீர்மானிக்க வேண்டும். மேலும், முன்னிருப்பாக, குறியாக்கி அரிதான வரிசைகளை வழங்குகிறது, ஆனால் தரவுத்தொகுப்பு திட்டமிடலுக்கு அடர்த்தியான வரிசைகளை வைத்திருப்பது எளிதாக இருக்கும், எனவே நாம் ``sparse`` என்பதை `False`` என அமைக்கிறோம்."

#: ../../tutorials/09_saving_and_loading_models.ipynb:296
msgid "Let's take a look at the labels of the first ``5`` labels of the dataset. The labels should be one-hot encoded."
msgstr ""

#: ../../tutorials/09_saving_and_loading_models.ipynb:354
#, python-format
msgid "Now we split our dataset into two parts: a training dataset and a test one. As a rule of thumb, 80% of a full dataset should go into a training part and 20% into a test one. Our training dataset has ``30`` samples. The test dataset should be used only once, when a model is trained to verify how well the model behaves on unseen data. We employ ``train_test_split`` from SciKit-Learn."
msgstr "இப்போது எங்கள் தரவுத்தொகுப்பை இரண்டு பகுதிகளாகப் பிரிக்கிறோம்: பயிற்சி தரவுத்தொகுப்பு மற்றும் சோதனை ஒன்று. கட்டைவிரல் விதியாக, முழு தரவுத்தொகுப்பில் 80% பயிற்சிப் பகுதியிலும் 20% சோதனையிலும் செல்ல வேண்டும். எங்கள் பயிற்சி தரவுத்தொகுப்பில் ``30`` மாதிரிகள் உள்ளன. சோதனை தரவுத்தொகுப்பு ஒரு முறை மட்டுமே பயன்படுத்தப்பட வேண்டும், மாடல் பார்க்காத தரவில் எவ்வளவு சிறப்பாக செயல்படுகிறது என்பதை சரிபார்க்க ஒரு மாதிரி பயிற்சி அளிக்கப்படும். நாங்கள் SciKit-Learn இலிருந்து ``Train_test_split`` ஐப் பயன்படுத்துகிறோம்."

#: ../../tutorials/09_saving_and_loading_models.ipynb:403
msgid "Now it is time to see how our dataset looks like. Let's plot it."
msgstr ""

#: ../../tutorials/09_saving_and_loading_models.ipynb:470
msgid "On the plot above we see:"
msgstr "மேலே உள்ள சதியில் நாம் பார்க்கிறோம்:"

#: ../../tutorials/09_saving_and_loading_models.ipynb:472
msgid "Solid blue dots are the samples from the training dataset labeled as ``0``"
msgstr "திட நீல புள்ளிகள் என்பது ``0`` எனப் பெயரிடப்பட்ட பயிற்சி தரவுத்தொகுப்பிலிருந்து மாதிரிகள்"

#: ../../tutorials/09_saving_and_loading_models.ipynb:473
msgid "Empty blue dots are the samples from the test dataset labeled as ``0``"
msgstr "வெற்று நீல புள்ளிகள் என்பது ``0`` என லேபிளிடப்பட்ட சோதனை தரவுத்தொகுப்பிலிருந்து மாதிரிகள்"

#: ../../tutorials/09_saving_and_loading_models.ipynb:474
msgid "Solid green dots are the samples from the training dataset labeled as ``1``"
msgstr "திட பச்சை புள்ளிகள் என்பது ``1`` எனப் பெயரிடப்பட்ட பயிற்சி தரவுத்தொகுப்பிலிருந்து மாதிரிகள்"

#: ../../tutorials/09_saving_and_loading_models.ipynb:475
msgid "Empty green dots are the samples from the test dataset labeled as ``1``"
msgstr "வெற்று பச்சை புள்ளிகள் என்பது ``1`` என லேபிளிடப்பட்ட சோதனை தரவுத்தொகுப்பிலிருந்து மாதிரிகள்"

#: ../../tutorials/09_saving_and_loading_models.ipynb:477
msgid "We'll train our model using solid dots and verify it using empty dots."
msgstr ""

#: ../../tutorials/09_saving_and_loading_models.ipynb:489
msgid "2. Train a model and save it"
msgstr "2. ஒரு மாதிரியைப் பயிற்றுவித்து அதைச் சேமிக்கவும்"

#: ../../tutorials/09_saving_and_loading_models.ipynb:491
msgid "We'll train our model in two steps. On the first step we train our model in ``20`` iterations."
msgstr ""

#: ../../tutorials/09_saving_and_loading_models.ipynb:512
msgid "Create an empty array for callback to store values of the objective function."
msgstr "புறநிலை செயல்பாட்டின் மதிப்புகளைச் சேமிப்பதற்காகத் திரும்ப அழைப்பதற்கு வெற்று வரிசையை உருவாக்கவும்."

#: ../../tutorials/09_saving_and_loading_models.ipynb:533
msgid "We re-use a callback function from the Neural Network Classifier & Regressor tutorial to plot iteration versus objective function value with some minor tweaks to plot objective values at each step."
msgstr "நியூரல் நெட்வொர்க் கிளாசிஃபையர் & ரீக்ரஸர் டுடோரியலிலிருந்து மீண்டும் கால்பேக் செயல்பாட்டைப் பயன்படுத்தி, ஒவ்வொரு அடியிலும் புறநிலை மதிப்புகளைத் திட்டமிடுவதற்கு சில சிறிய மாற்றங்களுடன் மறு செய்கை மற்றும் புறநிலை செயல்பாடு மதிப்பைத் திட்டமிடுவோம்."

#: ../../tutorials/09_saving_and_loading_models.ipynb:576
msgid "As mentioned above we train a ``VQC`` model and set ``COBYLA`` as an optimizer with a chosen value of the ``maxiter`` parameter. Then we evaluate performance of the model to see how well it was trained. Then we save this model for a file. On the second step we load this model and will continue to work with it."
msgstr "மேலே குறிப்பிட்டுள்ளபடி, ``VQC`` மாதிரியைப் பயிற்றுவித்து, ``maxiter`` அளவுருவின் தேர்ந்தெடுக்கப்பட்ட மதிப்பைக் கொண்டு ``COBYLA`` ஐ ஆப்டிமைசராக அமைக்கிறோம். மாதிரியின் செயல்திறன் எவ்வளவு நன்றாகப் பயிற்றுவிக்கப்பட்டது என்பதைப் பார்க்க, அதன் செயல்திறனை மதிப்பீடு செய்கிறோம். இந்த மாதிரியை ஒரு கோப்பிற்காக சேமிக்கிறோம். இரண்டாவது கட்டத்தில், இந்த மாதிரியை ஏற்றுகிறோம், அதனுடன் தொடர்ந்து வேலை செய்வோம்."

#: ../../tutorials/09_saving_and_loading_models.ipynb:578
msgid "Here, we manually construct an ansatz to fix an initial point where to start optimization from."
msgstr "இங்கே, மேம்படுத்தலைத் தொடங்குவதற்கான ஆரம்பப் புள்ளியைச் சரிசெய்ய, ஒரு ansatz ஐ கைமுறையாக உருவாக்குகிறோம்."

#: ../../tutorials/09_saving_and_loading_models.ipynb:602
msgid "We create a model and set a sampler to the first sampler we created earlier."
msgstr "நாங்கள் ஒரு மாதிரியை உருவாக்கி, முன்பு உருவாக்கிய முதல் மாதிரிக்கு ஒரு மாதிரியை அமைக்கிறோம்."

#: ../../tutorials/09_saving_and_loading_models.ipynb:625
msgid "Now it is time to train the model."
msgstr "இப்போது மாதிரியைப் பயிற்றுவிப்பதற்கான நேரம் இது."

#: ../../tutorials/09_saving_and_loading_models.ipynb:680
msgid "Let's see how well our model performs after the first step of training."
msgstr ""

#: ../../tutorials/09_saving_and_loading_models.ipynb:729
msgid "Next, we save the model. You may choose any file name you want. Please note that the ``save`` method does not append an extension if it is not specified in the file name."
msgstr "அடுத்து, மாதிரியைச் சேமிக்கிறோம். நீங்கள் விரும்பும் எந்தக் கோப்பு பெயரையும் தேர்வு செய்யலாம். கோப்பு பெயரில் குறிப்பிடப்படாவிட்டால், ``save`` முறை நீட்டிப்பைச் சேர்க்காது என்பதை நினைவில் கொள்ளவும்."

#: ../../tutorials/09_saving_and_loading_models.ipynb:751
msgid "3. Load a model and continue training"
msgstr "3. ஒரு மாதிரியை ஏற்றிப் பயிற்சியைத் தொடரவும்"

#: ../../tutorials/09_saving_and_loading_models.ipynb:753
msgid "To load a model a user have to call a class method ``load`` of the corresponding model class. In our case it is ``VQC``. We pass the same file name we used in the previous section where we saved our model."
msgstr "ஒரு மாதிரியை ஏற்றுவதற்கு, ஒரு பயனர், தொடர்புடைய மாதிரி வகுப்பின் வகுப்பு முறையை ``load`` என்று அழைக்க வேண்டும். எங்கள் விஷயத்தில் அது ``VQC``. எங்கள் மாதிரியைச் சேமித்த முந்தைய பிரிவில் நாங்கள் பயன்படுத்திய அதே கோப்புப் பெயரை நாங்கள் அனுப்புகிறோம்."

#: ../../tutorials/09_saving_and_loading_models.ipynb:774
msgid "Next, we want to alter the model in a way it can be trained further and on another simulator. To do so, we set the ``warm_start`` property. When it is set to ``True`` and ``fit()`` is called again the model uses weights from previous fit to start a new fit. We also set the ``sampler`` property of the underlying network to the second instance of the ``Sampler`` primitive we created in the beginning of the tutorial. Finally, we create and set a new optimizer with ``maxiter`` is set to ``80``, so the total number of iterations is ``100``."
msgstr "அடுத்து, மாடலை மேலும் மற்றும் மற்றொரு சிமுலேட்டரில் பயிற்சியளிக்கக்கூடிய வகையில் மாற்ற விரும்புகிறோம். அவ்வாறு செய்ய, ``warm_start`` சொத்தை அமைக்கிறோம். இது ``True`` என அமைக்கப்பட்டு ``fit()`` என அழைக்கப்படும் போது, ​​மாடல் புதிய பொருத்தத்தைத் தொடங்க முந்தைய பொருத்தத்தின் எடையைப் பயன்படுத்துகிறது. டுடோரியலின் தொடக்கத்தில் நாங்கள் உருவாக்கிய ``sampler`` ப்ரிமிட்டிவ் இன் இரண்டாவது நிகழ்வாக அடிப்படை நெட்வொர்க்கின் ``Sampler`` பண்புகளையும் அமைத்துள்ளோம். இறுதியாக, ``maxiter`` ``80`` என அமைக்கப்பட்ட புதிய ஆப்டிமைசரை உருவாக்கி அமைக்கிறோம், எனவே மொத்த மறு செய்கைகளின் எண்ணிக்கை ``100`` ஆகும்."

#: ../../tutorials/09_saving_and_loading_models.ipynb:798
msgid "Now we continue training our model from the state we finished in the previous section."
msgstr "இப்போது நாங்கள் முந்தைய பிரிவில் முடித்த மாநிலத்திலிருந்து எங்கள் மாதிரியைத் தொடர்ந்து பயிற்சி செய்கிறோம்."

#: ../../tutorials/09_saving_and_loading_models.ipynb:891
msgid "Let's see which data points were misclassified. First, we call ``predict`` to infer predicted values from the training and test features."
msgstr ""

#: ../../tutorials/09_saving_and_loading_models.ipynb:913
msgid "Plot the whole dataset and the highlight the points that were classified incorrectly."
msgstr "முழு தரவுத்தொகுப்பையும் வரைந்து, தவறாக வகைப்படுத்தப்பட்ட புள்ளிகளை முன்னிலைப்படுத்தவும்."

#: ../../tutorials/09_saving_and_loading_models.ipynb:989
msgid "So, if you have a large dataset or a large model you can train it in multiple steps as shown in this tutorial."
msgstr "எனவே, உங்களிடம் பெரிய தரவுத்தொகுப்பு அல்லது பெரிய மாதிரி இருந்தால், இந்த டுடோரியலில் காட்டப்பட்டுள்ளபடி அதைப் பல படிகளில் பயிற்சி செய்யலாம்."

#: ../../tutorials/09_saving_and_loading_models.ipynb:1001
msgid "4. PyTorch hybrid models"
msgstr "4. PyTorch கலப்பின மாதிரிகள்"

#: ../../tutorials/09_saving_and_loading_models.ipynb:1003
msgid "To save and load hybrid models, when using the TorchConnector, follow the PyTorch recommendations of saving and loading the models. For more details please refer to the PyTorch Connector tutorial `here <https://qiskit.org/documentation/machine-learning/tutorials/05_torch_connector.html>`__ where a short snippet shows how to do it."
msgstr "கலப்பின மாடல்களைச் சேமிக்கவும் ஏற்றவும், டார்ச் கனெக்டரைப் பயன்படுத்தும் போது, ​​மாடல்களைச் சேமித்து ஏற்றுவதற்கான பைடார்ச் பரிந்துரைகளைப் பின்பற்றவும். மேலும் விவரங்களுக்கு, PyTorch Connector டுடோரியலைப் பார்க்கவும், `இங்கே <https://qiskit.org/documentation/machine-learning/tutorials/05_torch_connector.html>`__ அதை எப்படி செய்வது என்று ஒரு சிறிய துணுக்கைக் காட்டுகிறது."

#: ../../tutorials/09_saving_and_loading_models.ipynb:1005
msgid "Take a look at this pseudo-like code to get the idea:"
msgstr "யோசனையைப் பெற இந்தப் போலி போன்ற குறியீட்டைப் பாருங்கள்:"

