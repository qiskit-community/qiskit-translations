msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-29 12:46+0000\n"
"PO-Revision-Date: 2023-11-29 14:48\n"
"Last-Translator: \n"
"Language: ta\n"
"Language-Team: Tamil\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /main/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/05_torch_connector.po\n"
"X-Crowdin-File-ID: 9636\n"

#: ../../tutorials/05_torch_connector.ipynb:9
msgid "This page was generated from `docs/tutorials/05_torch_connector.ipynb`__."
msgstr "роЗроирпНродрокрпН рокроХрпНроХроорпН `docs/tutorials/05_torch_connector.ipynb`__ роЗро▓ро┐ро░рпБроирпНродрпБ роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпНроЯродрпБ."

#: ../../tutorials/05_torch_connector.ipynb:9
msgid "Torch Connector and Hybrid QNNs"
msgstr "роЯро╛ро░рпНроЪрпН роЗрогрпИрокрпНрокро╛ройрпН рооро▒рпНро▒рпБроорпН роХро▓рокрпНрокро┐рой QNN роХро│рпН"

#: ../../tutorials/05_torch_connector.ipynb:11
msgid "This tutorial introduces the ``TorchConnector`` class, and demonstrates how it allows for a natural integration of any ``NeuralNetwork`` from Qiskit Machine Learning into a PyTorch workflow. ``TorchConnector`` takes a ``NeuralNetwork`` and makes it available as a PyTorch ``Module``. The resulting module can be seamlessly incorporated into PyTorch classical architectures and trained jointly without additional considerations, enabling the development and testing of novel **hybrid quantum-classical** machine learning architectures."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:15
msgid "Content:"
msgstr "роЙро│рпНро│роЯроХрпНроХроорпН:"

#: ../../tutorials/05_torch_connector.ipynb:17
msgid "`Part 1: Simple Classification & Regression <#Part-1:-Simple-Classification-&-Regression>`__"
msgstr "`рокроХрпБродро┐ 1: роОро│ро┐роп ро╡роХрпИрокрпНрокро╛роЯрпБ & рокро┐ройрпНройроЯрпИро╡рпБ <#Part-1:-Simple-Classification-&-Regression>`__"

#: ../../tutorials/05_torch_connector.ipynb:19
msgid "The first part of this tutorial shows how quantum neural networks can be trained using PyTorch's automatic differentiation engine (``torch.autograd``, `link <https://pytorch.org/tutorials/beginner/blitz/autograd_tutorial.html>`__) for simple classification and regression tasks."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:21
msgid "`Classification <#1.-Classification>`__"
msgstr "`ро╡роХрпИрокрпНрокро╛роЯрпБ <#1.-Classification>`__"

#: ../../tutorials/05_torch_connector.ipynb:23
msgid "Classification with PyTorch and ``EstimatorQNN``"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:24
msgid "Classification with PyTorch and ``SamplerQNN``"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:26
msgid "`Regression <#2.-Regression>`__"
msgstr "`рокро┐ройрпНройроЯрпИро╡рпБ <#2.-Regression>`__"

#: ../../tutorials/05_torch_connector.ipynb:28
msgid "Regression with PyTorch and ``EstimatorQNN``"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:30
msgid "`Part 2: MNIST Classification, Hybrid QNNs <#Part-2:-MNIST-Classification,-Hybrid-QNNs>`__"
msgstr "`рокроХрпБродро┐ 2: MNIST ро╡роХрпИрокрпНрокро╛роЯрпБ, роХро▓рокрпНрокро┐рой QNN роХро│рпН <#Part-2:-MNIST-Classification,-Hybrid-QNNs>`__"

#: ../../tutorials/05_torch_connector.ipynb:32
msgid "The second part of this tutorial illustrates how to embed a (Quantum) ``NeuralNetwork`` into a target PyTorch workflow (in this case, a typical CNN architecture) to classify MNIST data in a hybrid quantum-classical manner."
msgstr "роЗроирпНрод рокропро┐ро▒рпНроЪро┐роХро│ро┐ройрпН роЗро░рогрпНроЯро╛роорпН рокро╛роХроорпН роТро░рпБ (роХрпБро╡ро╛рогрпНроЯроорпН) ``роиро┐ропрпВро░ро▓рпНроирпЖроЯрпНро╡рпКро░рпНроХрпН`` роР роТро░рпБ роЗро▓роХрпНроХрпБ PyTorch рокрогро┐рокрпНрокро╛ропрпНро╡рпБ (роЗроирпНрод ро╡ро┤роХрпНроХро┐ро▓рпН, роТро░рпБ рокрпКродрпБро╡ро╛рой CNN роХроЯрпНроЯроорпИрокрпНрокрпБ) роТро░рпБ роХро▓рокрпНрокро┐рой роХрпБро╡ро╛рогрпНроЯроорпН-роХро┐ро│ро╛роЪро┐роХрпНроХро▓рпН роорпБро▒рпИропро┐ро▓рпН MNIST родро░ро╡рпИ ро╡роХрпИрокрпНрокроЯрпБродрпНрод ро╡ро┐ро│роХрпНроХрпБроХро┐ро▒родрпБ."

#: ../../tutorials/05_torch_connector.ipynb:73
msgid "Part 1: Simple Classification & Regression"
msgstr "рокроХрпБродро┐ 1: роОро│ро┐роп ро╡роХрпИрокрпНрокро╛роЯрпБ рооро▒рпНро▒рпБроорпН рокро┐ройрпНройроЯрпИро╡рпБ"

#: ../../tutorials/05_torch_connector.ipynb:85
msgid "1. Classification"
msgstr "1. ро╡роХрпИрокрпНрокро╛роЯрпБ"

#: ../../tutorials/05_torch_connector.ipynb:87
msgid "First, we show how ``TorchConnector`` allows to train a Quantum ``NeuralNetwork`` to solve a classification tasks using PyTorch's automatic differentiation engine. In order to illustrate this, we will perform **binary classification** on a randomly generated dataset."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:140
msgid "A. Classification with PyTorch and ``EstimatorQNN``"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:142
msgid "Linking an ``EstimatorQNN`` to PyTorch is relatively straightforward. Here we illustrate this by using the ``EstimatorQNN`` constructed from a feature map and an ansatz."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:291
msgid "Optimizer"
msgstr "роЖрокрпНроЯро┐роорпИроЪрпЖро░рпН"

#: ../../tutorials/05_torch_connector.ipynb:293
msgid "The choice of optimizer for training any machine learning model can be crucial in determining the success of our training's outcome. When using ``TorchConnector``, we get access to all of the optimizer algorithms defined in the [``torch.optim``] package (`link <https://pytorch.org/docs/stable/optim.html>`__). Some of the most famous algorithms used in popular machine learning architectures include *Adam*, *SGD*, or *Adagrad*. However, for this tutorial we will be using the L-BFGS algorithm (``torch.optim.LBFGS``), one of the most well know second-order optimization algorithms for numerical optimization."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:297
msgid "Loss Function"
msgstr "Loss Function"

#: ../../tutorials/05_torch_connector.ipynb:299
msgid "As for the loss function, we can also take advantage of PyTorch's pre-defined modules from ``torch.nn``, such as the `Cross-Entropy <https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html>`__ or `Mean Squared Error <https://pytorch.org/docs/stable/generated/torch.nn.MSELoss.html>`__ losses."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:301
msgid "**ЁЯТб Clarification :** In classical machine learning, the general rule of thumb is to apply a Cross-Entropy loss to classification tasks, and MSE loss to regression tasks. However, this recommendation is given under the assumption that the output of the classification network is a class probability value in the :math:`[0, 1]` range (usually this is achieved through a Softmax layer). Because the following example for ``EstimatorQNN`` does not include such layer, and we don't apply any mapping to the output (the following section shows an example of application of parity mapping with ``SamplerQNN``\\ s), the QNN's output can take any value in the range :math:`[-1, 1]`. In case you were wondering, this is the reason why this particular example uses MSELoss for classification despite it not being the norm (but we encourage you to experiment with different loss functions and see how they can impact training results)."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:512
#: ../../tutorials/05_torch_connector.ipynb:783
msgid "The red circles indicate wrongly classified data points."
msgstr "роЪро┐ро╡рокрпНрокрпБ ро╡роЯрпНроЯроЩрпНроХро│рпН родро╡ро▒ро╛роХ ро╡роХрпИрокрпНрокроЯрпБродрпНродрокрпНрокроЯрпНроЯ родро░ро╡рпБ рокрпБро│рпНро│ро┐роХро│рпИроХрпН роХрпБро▒ро┐роХрпНроХро┐ройрпНро▒рой."

#: ../../tutorials/05_torch_connector.ipynb:524
msgid "B. Classification with PyTorch and ``SamplerQNN``"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:526
msgid "Linking a ``SamplerQNN`` to PyTorch requires a bit more attention than ``EstimatorQNN``. Without the correct setup, backpropagation is not possible."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:528
msgid "In particular, we must make sure that we are returning a dense array of probabilities in the network's forward pass (``sparse=False``). This parameter is set up to ``False`` by default, so we just have to make sure that it has not been changed."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:530
msgid "**тЪая╕П Attention:** If we define a custom interpret function ( in the example: ``parity``), we must remember to explicitly provide the desired output shape ( in the example: ``2``). For more info on the initial parameter setup for ``SamplerQNN``, please check out the `official qiskit documentation <https://qiskit.org/ecosystem/machine-learning/stubs/qiskit_machine_learning.neural_networks.SamplerQNN.html>`__."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:601
#: ../../tutorials/05_torch_connector.ipynb:891
msgid "For a reminder on optimizer and loss function choices, you can go back to `this section <#Optimizer>`__."
msgstr "роЖрокрпНроЯро┐роорпИроЪрпЖро░рпН рооро▒рпНро▒рпБроорпН loss function родрпЗро░рпНро╡рпБроХро│рпН рокро▒рпНро▒ро┐роп роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпБроХрпНроХрпБ, роирпАроЩрпНроХро│рпН `роЗроирпНродрокрпН рокро┐ро░ро┐ро╡рпБроХрпНроХрпБроЪрпН роЪрпЖро▓рпНро▓ро▓ро╛роорпН <#Optimizer>`__."

#: ../../tutorials/05_torch_connector.ipynb:795
msgid "2. Regression"
msgstr "2. рокро┐ройрпНройроЯрпИро╡рпБ"

#: ../../tutorials/05_torch_connector.ipynb:797
msgid "We use a model based on the ``EstimatorQNN`` to also illustrate how to perform a regression task. The chosen dataset in this case is randomly generated following a sine wave."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:838
msgid "A. Regression with PyTorch and ``EstimatorQNN``"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:849
msgid "The network definition and training loop will be analogous to those of the classification task using ``EstimatorQNN``. In this case, we define our own feature map and ansatz, but let's do it a little different."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:1031
msgid "Part 2: MNIST Classification, Hybrid QNNs"
msgstr "рокроХрпБродро┐ 2: MNIST ро╡роХрпИрокрпНрокро╛роЯрпБ, роХро▓рокрпНрокро┐рой QNN роХро│рпН"

#: ../../tutorials/05_torch_connector.ipynb:1033
msgid "In this second part, we show how to leverage a hybrid quantum-classical neural network using ``TorchConnector``, to perform a more complex image classification task on the MNIST handwritten digits dataset."
msgstr "роЗроирпНрод роЗро░рогрпНроЯро╛роорпН рокро╛роХродрпНродро┐ро▓рпН, MNIST роХрпИропро╛ро▓рпН роОро┤рпБродрокрпНрокроЯрпНроЯ роЗро▓роХрпНроХроЩрпНроХро│рпН родро░ро╡рпБродрпНродрпКроХрпБрокрпНрокро┐ро▓рпН рооро┐роХро╡рпБроорпН роЪро┐роХрпНроХро▓ро╛рой рокроЯ ро╡роХрпИрокрпНрокро╛роЯрпБ рокрогро┐ропрпИроЪрпН роЪрпЖропрпНроп, ``TorchConnector`` роРрокрпН рокропройрпНрокроЯрпБродрпНродро┐ роТро░рпБ роХро▓рокрпНрокро┐рой роХрпБро╡ро╛рогрпНроЯроорпН-роХро┐ро│ро╛роЪро┐роХрпНроХро▓рпН роиро░роорпНрокро┐ропро▓рпН роирпЖроЯрпНро╡рпКро░рпНроХрпНроХрпИ роОро╡рпНро╡ро╛ро▒рпБ роорпЗроорпНрокроЯрпБродрпНродрпБро╡родрпБ роОройрпНрокродрпИроХрпН роХро╛рогрпНрокро┐рокрпНрокрпЛроорпН."

#: ../../tutorials/05_torch_connector.ipynb:1035
msgid "For a more detailed (pre-``TorchConnector``) explanation on hybrid quantum-classical neural networks, you can check out the corresponding section in the `Qiskit Textbook <https://qiskit.org/textbook/ch-machine-learning/machine-learning-qiskit-pytorch.html>`__."
msgstr "ро╣рпИрокро┐ро░ро┐роЯрпН роХрпБро╡ро╛рогрпНроЯроорпН-роХро┐ро│ро╛роЪро┐роХрпНроХро▓рпН роиро┐ропрпВро░ро▓рпН роирпЖроЯрпНро╡рпКро░рпНроХрпНроХрпБроХро│рпН рокро▒рпНро▒ро┐роп ро╡ро┐ро░ро┐ро╡ро╛рой (роорпБройрпН-``TorchConnector``) ро╡ро┐ро│роХрпНроХродрпНродро┐ро▒рпНроХрпБ, роирпАроЩрпНроХро│рпН `Qiskit Textbook <https://qiskit.org/textbook/ch-machine-learning/machine-learning-qiskit-pytorch.html>`__ роЗро▓рпН родрпКроЯро░рпНрокрпБроЯрпИроп рокро┐ро░ро┐ро╡рпИрокрпН рокро╛ро░рпНроХрпНроХро▓ро╛роорпН."

#: ../../tutorials/05_torch_connector.ipynb:1074
msgid "Step 1: Defining Data-loaders for train and test"
msgstr "рокроЯро┐ 1: ро░ропро┐ро▓рпН рооро▒рпНро▒рпБроорпН роЪрпЛродройрпИроХрпНроХро╛рой родро░ро╡рпБ роПро▒рпНро▒ро┐роХро│рпИ ро╡ро░рпИропро▒рпБродрпНродро▓рпН"

#: ../../tutorials/05_torch_connector.ipynb:1085
msgid "We take advantage of the ``torchvision`` `API <https://pytorch.org/vision/stable/datasets.html>`__ to directly load a subset of the `MNIST dataset <https://en.wikipedia.org/wiki/MNIST_database>`__ and define torch ``DataLoader``\\ s (`link <https://pytorch.org/docs/stable/data.html>`__) for train and test."
msgstr "роиро╛роЩрпНроХро│рпН ``torchvision`` `API <https://pytorch.org/vision/stable/datasets.html>`__ роРрокрпН рокропройрпНрокроЯрпБродрпНродро┐ `MNIST родро░ро╡рпБродрпНродрпКроХрпБрокрпНрокрпБ <https: //en. org/wiki/MNIST_database>`__ рооро▒рпНро▒рпБроорпН роЯро╛ро░рпНроЪрпНроЪрпИ ро╡ро░рпИропро▒рпБроХрпНроХро╡рпБроорпН ``DataLoader``\\ s (`роЗрогрпИрокрпНрокрпБ <https://pytorch.org/docs/stable/data.html>`__) ро░ропро┐ро▓рпН рооро▒рпНро▒рпБроорпН роЪрпЛродройрпИ."

#: ../../tutorials/05_torch_connector.ipynb:1348
msgid "If we perform a quick visualization we can see that the train dataset consists of images of handwritten 0s and 1s."
msgstr "роиро╛роорпН ро╡ро┐ро░рпИро╡ро╛рой роХро╛роЯрпНроЪро┐рокрпНрокроЯрпБродрпНродро▓рпИроЪрпН роЪрпЖропрпНродро╛ро▓рпН, ро░ропро┐ро▓рпН родро░ро╡рпБродрпНродрпКроХрпБрокрпНрокрпБ роХрпИропро╛ро▓рпН роОро┤рпБродрокрпНрокроЯрпНроЯ 0 роХро│рпН рооро▒рпНро▒рпБроорпН 1 роХро│ро┐ройрпН рокроЯроЩрпНроХро│рпИроХрпН роХрпКрогрпНроЯро┐ро░рпБрокрпНрокродрпИроХрпН роХро╛рогро▓ро╛роорпН."

#: ../../tutorials/05_torch_connector.ipynb:1422
msgid "Step 2: Defining the QNN and Hybrid Model"
msgstr "рокроЯро┐ 2: QNN рооро▒рпНро▒рпБроорпН роХро▓рокрпНрокро┐рой рооро╛родро┐ро░ро┐ропрпИ ро╡ро░рпИропро▒рпБродрпНродро▓рпН"

#: ../../tutorials/05_torch_connector.ipynb:1433
msgid "This second step shows the power of the ``TorchConnector``. After defining our quantum neural network layer (in this case, a ``EstimatorQNN``), we can embed it into a layer in our torch ``Module`` by initializing a torch connector as ``TorchConnector(qnn)``."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:1435
msgid "**тЪая╕П Attention:** In order to have an adequate gradient backpropagation in hybrid models, we MUST set the initial parameter ``input_gradients`` to TRUE during the qnn initialization."
msgstr "**тЪая╕ПроХро╡ройроорпН: ** роХро▓рокрпНрокро┐рой рооро╛роЯро▓рпНроХро│ро┐ро▓рпН рокрпЛродро┐роп роЪро╛ропрпНро╡рпБ рокро┐ройрпНройрогро┐ роЗро░рпБроХрпНроХ, роиро╛роорпН qnn родрпБро╡роХрпНроХродрпНродро┐ройрпН рокрпЛродрпБ роЖро░роорпНрок роЕро│ро╡рпБро░рпБ ``input_gradients`` роР TRUE роХрпНроХрпБ роЕроорпИроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН."

#: ../../tutorials/05_torch_connector.ipynb:1514
msgid "Step 3: Training"
msgstr "рокроЯро┐ 3: рокропро┐ро▒рпНроЪро┐"

#: ../../tutorials/05_torch_connector.ipynb:1628
msgid "Now we'll save the trained model, just to show how a hybrid model can be saved and re-used later for inference. To save and load hybrid models, when using the TorchConnector, follow the PyTorch recommendations of saving and loading the models."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:1650
msgid "Step 4: Evaluation"
msgstr "рокроЯро┐ 4: роородро┐рокрпНрокрпАроЯрпБ"

#: ../../tutorials/05_torch_connector.ipynb:1661
msgid "We start from recreating the model and loading the state from the previously saved file. You create a QNN layer using another simulator or a real hardware. So, you can train a model on real hardware available on the cloud and then for inference use a simulator or vice verse. For a sake of simplicity we create a new quantum neural network in the same way as above."
msgstr "рооро╛родро┐ро░ро┐ропрпИ роорпАрогрпНроЯрпБроорпН роЙро░рпБро╡ро╛роХрпНроХро┐, роорпБройрпНрокрпБ роЪрпЗрооро┐родрпНрод роХрпЛрокрпНрокро┐ро▓ро┐ро░рпБроирпНродрпБ роиро┐ро▓рпИропрпИ роПро▒рпНро▒рпБро╡родро┐ро▓ро┐ро░рпБроирпНродрпБ родрпКроЯроЩрпНроХрпБроХро┐ро▒рпЛроорпН. роирпАроЩрпНроХро│рпН рооро▒рпНро▒рпКро░рпБ роЪро┐роорпБро▓рпЗроЯрпНроЯро░рпН роЕро▓рпНро▓родрпБ роЙрогрпНроорпИропро╛рой ро╡ройрпНрокрпКро░рпБро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродро┐ QNN роЕроЯрпБроХрпНроХрпБ роЙро░рпБро╡ро╛роХрпНроХрпБроХро┐ро▒рпАро░рпНроХро│рпН. роОройро╡рпЗ, роирпАроЩрпНроХро│рпН роорпЗроХроХрпНроХрогро┐ропро┐ро▓рпН роХро┐роЯрпИроХрпНроХрпБроорпН роЙрогрпНроорпИропро╛рой ро╡ройрпНрокрпКро░рпБро│ро┐ро▓рпН роТро░рпБ рооро╛родро┐ро░ро┐ропрпИрокрпН рокропро┐ро▒рпНро▒рпБро╡ро┐роХрпНроХро▓ро╛роорпН, рокро┐ройрпНройро░рпН роЕройрпБрооро╛ройродрпНродро┐ро▒рпНроХрпБ роТро░рпБ роЪро┐роорпБро▓рпЗроЯрпНроЯро░рпН роЕро▓рпНро▓родрпБ родрпБрогрпИ ро╡роЪройродрпНродрпИрокрпН рокропройрпНрокроЯрпБродрпНродро▓ро╛роорпН. роОро│ро┐роорпИроХрпНроХро╛роХ, роорпЗро▓рпЗ роЙро│рпНро│ роЕродрпЗ ро╡ро┤ро┐ропро┐ро▓рпН роТро░рпБ рокрпБродро┐роп роХрпБро╡ро╛рогрпНроЯроорпН роиро┐ропрпВро░ро▓рпН роирпЖроЯрпНро╡рпКро░рпНроХрпНроХрпИ роЙро░рпБро╡ро╛роХрпНроХрпБроХро┐ро▒рпЛроорпН."

#: ../../tutorials/05_torch_connector.ipynb:1809
msgid "ЁЯОЙЁЯОЙЁЯОЙЁЯОЙ **You are now able to experiment with your own hybrid datasets and architectures using Qiskit Machine Learning.** **Good Luck!**"
msgstr "ЁЯОЙЁЯОЙЁЯОЙЁЯОЙ **роирпАроЩрпНроХро│рпН роЗрокрпНрокрпЛродрпБ роЙроЩрпНроХро│рпН роЪрпКроирпНрод роХро▓рокрпНрокро┐рой родро░ро╡рпБродрпНродрпКроХрпБрокрпНрокрпБроХро│рпН рооро▒рпНро▒рпБроорпН роХроЯрпНроЯро┐роЯроХрпНроХро▓рпИроХро│рпИ Qiskit роЗропроирпНродро┐ро░роХрпН роХро▒рпНро▒ро▓рпИрокрпН рокропройрпНрокроЯрпБродрпНродро┐рокрпН рокро░ро┐роЪрпЛродро┐роХрпНроХ роорпБроЯро┐ропрпБроорпН.** **роЕродро┐ро░рпНро╖рпНроЯроорпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙро░ро┐родрпНродро╛роХроЯрпНроЯрпБроорпН!**"

