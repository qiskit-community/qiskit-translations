msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-07 03:44+0000\n"
"PO-Revision-Date: 2023-02-07 05:10\n"
"Last-Translator: \n"
"Language: ta\n"
"Language-Team: Tamil\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/05_torch_connector.po\n"
"X-Crowdin-File-ID: 9636\n"

#: ../../tutorials/05_torch_connector.ipynb:9
msgid "This page was generated from `docs/tutorials/05_torch_connector.ipynb`__."
msgstr "இந்தப் பக்கம் `docs/tutorials/05_torch_connector.ipynb`__ இலிருந்து உருவாக்கப்பட்டது."

#: ../../tutorials/05_torch_connector.ipynb:9
msgid "Torch Connector and Hybrid QNNs"
msgstr "டார்ச் இணைப்பான் மற்றும் கலப்பின QNN கள்"

#: ../../tutorials/05_torch_connector.ipynb:11
msgid "This tutorial introduces Qiskit’s ``TorchConnector`` class, and demonstrates how the ``TorchConnector`` allows for a natural integration of any ``NeuralNetwork`` from Qiskit Machine Learning into a PyTorch workflow. ``TorchConnector`` takes a Qiskit ``NeuralNetwork`` and makes it available as a PyTorch ``Module``. The resulting module can be seamlessly incorporated into PyTorch classical architectures and trained jointly without additional considerations, enabling the development and testing of novel **hybrid quantum-classical** machine learning architectures."
msgstr "இந்த பயிற்சிகள் Qiskit-ன் ``TorchConnector`` வகுப்பை அறிமுகப்படுத்துகிறது, மேலும் ``TorchConnector`` Qiskit பொறி கற்றலிருந்து எந்த ஒரு ``நியூரல் நெட்வொர்க்`` ஐ ஒரு இயற்கையான ஒருங்கிணைப்பை அனுமதிக்கிறது. ``TorchConnector`` ஒரு Qiskit ``NeuralNetwork`` ஐ எடுத்து அதை PyTorch ``தொகுதி`` ஆக கிடைக்கச் செய்கிறது. இதன் விளைவாக தொகுதி PyTorch கிளாசிக்கல் கட்டமைப்புகளில் தடையின்றி இணைக்கப்படலாம் மற்றும் கூடுதல் பரிசீலனைகள் இல்லாமல் கூட்டாக பயிற்சி பெறலாம், நாவல் **hybrid quantum-classical** பொறி கற்றல் கட்டமைப்புகளின் வளர்ச்சி மற்றும் சோதனைக்கு உதவுகிறது."

#: ../../tutorials/05_torch_connector.ipynb:15
msgid "Content:"
msgstr "உள்ளடக்கம்:"

#: ../../tutorials/05_torch_connector.ipynb:17
msgid "`Part 1: Simple Classification & Regression <#Part-1:-Simple-Classification-&-Regression>`__"
msgstr "`பகுதி 1: எளிய வகைப்பாடு & பின்னடைவு <#Part-1:-Simple-Classification-&-Regression>`__"

#: ../../tutorials/05_torch_connector.ipynb:19
msgid "The first part of this tutorial shows how quantum neural networks can be trained using PyTorch’s automatic differentiation engine (``torch.autograd``, `link <https://pytorch.org/tutorials/beginner/blitz/autograd_tutorial.html>`__) for simple classification and regression tasks."
msgstr "இந்த பயிற்சிகளின் முதல் பகுதி எளிய வகைப்பாடு மற்றும் பின்னடைவு பணிகளுக்கு பைடார்ச்சின் தானியங்கி வேறுபாடு இயந்திரத்தை (``torch.autograd``, `link <https://pytorch.org/tutorials/beginner/blitz/autograd_tutorial.html>`__) பயன்படுத்தி எப்படி குவாண்டம் neural network-களைப் பயிற்றுவிக்க முடியும் என்பதைக் காட்டுகிறது."

#: ../../tutorials/05_torch_connector.ipynb:21
msgid "`Classification <#1.-Classification>`__"
msgstr "`வகைப்பாடு <#1.-Classification>`__"

#: ../../tutorials/05_torch_connector.ipynb:23
msgid "Classification with PyTorch and ``EstimatorQNN``"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:24
msgid "Classification with PyTorch and ``SamplerQNN``"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:26
msgid "`Regression <#2.-Regression>`__"
msgstr "`பின்னடைவு <#2.-Regression>`__"

#: ../../tutorials/05_torch_connector.ipynb:28
msgid "Regression with PyTorch and ``SamplerQNN``"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:30
msgid "`Part 2: MNIST Classification, Hybrid QNNs <#Part-2:-MNIST-Classification,-Hybrid-QNNs>`__"
msgstr "`பகுதி 2: MNIST வகைப்பாடு, கலப்பின QNN கள் <#Part-2:-MNIST-Classification,-Hybrid-QNNs>`__"

#: ../../tutorials/05_torch_connector.ipynb:32
msgid "The second part of this tutorial illustrates how to embed a (Quantum) ``NeuralNetwork`` into a target PyTorch workflow (in this case, a typical CNN architecture) to classify MNIST data in a hybrid quantum-classical manner."
msgstr "இந்த பயிற்சிகளின் இரண்டாம் பாகம் ஒரு (குவாண்டம்) ``நியூரல்நெட்வொர்க்`` ஐ ஒரு இலக்கு PyTorch பணிப்பாய்வு (இந்த வழக்கில், ஒரு பொதுவான CNN கட்டமைப்பு) ஒரு கலப்பின குவாண்டம்-கிளாசிக்கல் முறையில் MNIST தரவை வகைப்படுத்த விளக்குகிறது."

#: ../../tutorials/05_torch_connector.ipynb:73
msgid "Part 1: Simple Classification & Regression"
msgstr "பகுதி 1: எளிய வகைப்பாடு மற்றும் பின்னடைவு"

#: ../../tutorials/05_torch_connector.ipynb:85
msgid "1. Classification"
msgstr "1. வகைப்பாடு"

#: ../../tutorials/05_torch_connector.ipynb:87
msgid "First, we show how ``TorchConnector`` allows to train a Quantum ``NeuralNetwork`` to solve a classification tasks using PyTorch’s automatic differentiation engine. In order to illustrate this, we will perform **binary classification** on a randomly generated dataset."
msgstr "முதலில், ``TorchConnector`` ஒரு குவாண்டம் ``NeuralNetwork`` ஐ எவ்வாறு பயிற்சி அளிக்க அனுமதிக்கிறது என்பதை PyTorch இன் தானியங்கி வேறுபாடு இயந்திரத்தைப் பயன்படுத்தி ஒரு வகைப்படுத்தல் பணிகளைத் தீர்க்க உதவுகிறது. இதை விளக்கும் பொருட்டு, **binary classification** தோராயமாக உருவாக்கப்பட்ட தரவுத்தொகுப்பில் செய்வோம்."

#: ../../tutorials/05_torch_connector.ipynb:140
msgid "A. Classification with PyTorch and ``EstimatorQNN``"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:142
msgid "Linking an ``EstimatorQNN`` to PyTorch is relatively straightforward. Here we illustrate this by using the ``EstimatorQNN`` constructed from a feature map and an ansatz."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:262
msgid "Optimizer"
msgstr "ஆப்டிமைசெர்"

#: ../../tutorials/05_torch_connector.ipynb:264
msgid "The choice of optimizer for training any machine learning model can be crucial in determining the success of our training’s outcome. When using ``TorchConnector``, we get access to all of the optimizer algorithms defined in the [``torch.optim``] package (`link <https://pytorch.org/docs/stable/optim.html>`__). Some of the most famous algorithms used in popular machine learning architectures include *Adam*, *SGD*, or *Adagrad*. However, for this tutorial we will be using the L-BFGS algorithm (``torch.optim.LBFGS``), one of the most well know second-order optimization algorithms for numerical optimization."
msgstr "எந்த இயந்திர கற்றல் மாதிரியையும் பயிற்றுவிப்பதற்கான ஆப்டிமைசரின் தேர்வு எங்கள் பயிற்சியின் முடிவின் வெற்றியை தீர்மானிப்பதில் முக்கியமானதாக இருக்கும். ``TorchConnector`` ஐப் பயன்படுத்தும் போது, [``torch.optim``] தொகுப்பில் (`இணைப்பு <https://pytorch.org/docs/stable/optim.html>`__) வரையறுக்கப்பட்ட அனைத்து ஆப்டிமைசர் வழிமுறைகளையும் அணுகலாம். பிரபலமான இயந்திர கற்றல் கட்டமைப்புகளில் பயன்படுத்தப்படும் மிகவும் பிரபலமான வழிமுறைகளில் *Adam*, *SDG*, அல்லது *Adagrad* ஆகியவை அடங்கும். எவ்வாறாயினும், இந்த டுடோரியலுக்கு நாம் L-BFGS அல்காரிதம் (``torch.optim.LBFGS``) ஐப் பயன்படுத்துவோம்."

#: ../../tutorials/05_torch_connector.ipynb:268
msgid "Loss Function"
msgstr "Loss Function"

#: ../../tutorials/05_torch_connector.ipynb:270
msgid "As for the loss function, we can also take advantage of PyTorch’s pre-defined modules from ``torch.nn``, such as the `Cross-Entropy <https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html>`__ or `Mean Squared Error <https://pytorch.org/docs/stable/generated/torch.nn.MSELoss.html>`__ losses."
msgstr "Loss function பொறுத்தவரை, ``டார்ச்.என்என்`` இலிருந்து பைடார்ச்சின் முன் வரையறுக்கப்பட்ட தொகுதிகளையும் நாம் பயன்படுத்திக் கொள்ளலாம், அதாவது, `கிராஸ்-என்ட்ரோபி <https://pytorch.org/docs/stable/generated/torch. nn.CrossEntropyLoss.html>`__ அல்லது `சராசரி சதுர பிழை <https://pytorch.org/docs/stable/generated/torch.nn.MSELoss.html>`__ இழப்புகள்."

#: ../../tutorials/05_torch_connector.ipynb:272
msgid "**💡 Clarification :** In classical machine learning, the general rule of thumb is to apply a Cross-Entropy loss to classification tasks, and MSE loss to regression tasks. However, this recommendation is given under the assumption that the output of the classification network is a class probability value in the :math:`[0, 1]` range (usually this is achieved through a Softmax layer). Because the following example for ``EstimatorQNN`` does not include such layer, and we don’t apply any mapping to the output (the following section shows an example of application of parity mapping with ``SamplerQNN``\\ s), the QNN’s output can take any value in the range :math:`[-1, 1]`. In case you were wondering, this is the reason why this particular example uses MSELoss for classification despite it not being the norm (but we encourage you to experiment with different loss functions and see how they can impact training results)."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:482
#: ../../tutorials/05_torch_connector.ipynb:752
msgid "The red circles indicate wrongly classified data points."
msgstr "சிவப்பு வட்டங்கள் தவறாக வகைப்படுத்தப்பட்ட தரவு புள்ளிகளைக் குறிக்கின்றன."

#: ../../tutorials/05_torch_connector.ipynb:494
msgid "B. Classification with PyTorch and ``SamplerQNN``"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:496
msgid "Linking a ``SamplerQNN`` to PyTorch requires a bit more attention than ``EstimatorQNN``. Without the correct setup, backpropagation is not possible."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:498
msgid "In particular, we must make sure that we are returning a dense array of probabilities in the network’s forward pass (``sparse=False``). This parameter is set up to ``False`` by default, so we just have to make sure that it has not been changed."
msgstr "குறிப்பாக, நெட்வொர்க்கின் முன்னோக்கி பாஸில் அடர்த்தியான சாத்தியக்கூறுகளை நாங்கள் திருப்பித் தருகிறோம் என்பதை உறுதி செய்ய வேண்டும் (``spares=False``). இந்த அளவுரு இயல்பாக ``False`` என அமைக்கப்பட்டுள்ளது, எனவே அது மாற்றப்படவில்லை என்பதை நாம் உறுதி செய்ய வேண்டும்."

#: ../../tutorials/05_torch_connector.ipynb:500
msgid "**⚠️ Attention:** If we define a custom interpret function ( in the example: ``parity``), we must remember to explicitly provide the desired output shape ( in the example: ``2``). For more info on the initial parameter setup for ``SamplerQNN``, please check out the `official qiskit documentation <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.SamplerQNN.html>`__."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:571
#: ../../tutorials/05_torch_connector.ipynb:860
msgid "For a reminder on optimizer and loss function choices, you can go back to `this section <#Optimizer>`__."
msgstr "ஆப்டிமைசெர் மற்றும் loss function தேர்வுகள் பற்றிய நினைவூட்டலுக்கு, நீங்கள் `இந்தப் பிரிவுக்குச் செல்லலாம் <#Optimizer>`__."

#: ../../tutorials/05_torch_connector.ipynb:764
msgid "2. Regression"
msgstr "2. பின்னடைவு"

#: ../../tutorials/05_torch_connector.ipynb:766
msgid "We use a model based on the ``EstimatorQNN`` to also illustrate how to perform a regression task. The chosen dataset in this case is randomly generated following a sine wave."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:807
msgid "A. Regression with PyTorch and ``EstimatorQNN``"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:818
msgid "The network definition and training loop will be analogous to those of the classification task using ``EstimatorQNN``. In this case, we define our own feature map and ansatz, but let’s do it a little different."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:999
msgid "Part 2: MNIST Classification, Hybrid QNNs"
msgstr "பகுதி 2: MNIST வகைப்பாடு, கலப்பின QNN கள்"

#: ../../tutorials/05_torch_connector.ipynb:1001
msgid "In this second part, we show how to leverage a hybrid quantum-classical neural network using ``TorchConnector``, to perform a more complex image classification task on the MNIST handwritten digits dataset."
msgstr "இந்த இரண்டாம் பாகத்தில், MNIST கையால் எழுதப்பட்ட இலக்கங்கள் தரவுத்தொகுப்பில் மிகவும் சிக்கலான பட வகைப்பாடு பணியைச் செய்ய, ``TorchConnector`` ஐப் பயன்படுத்தி ஒரு கலப்பின குவாண்டம்-கிளாசிக்கல் நரம்பியல் நெட்வொர்க்கை எவ்வாறு மேம்படுத்துவது என்பதைக் காண்பிப்போம்."

#: ../../tutorials/05_torch_connector.ipynb:1003
msgid "For a more detailed (pre-``TorchConnector``) explanation on hybrid quantum-classical neural networks, you can check out the corresponding section in the `Qiskit Textbook <https://qiskit.org/textbook/ch-machine-learning/machine-learning-qiskit-pytorch.html>`__."
msgstr "ஹைபிரிட் குவாண்டம்-கிளாசிக்கல் நியூரல் நெட்வொர்க்குகள் பற்றிய விரிவான (முன்-``TorchConnector``) விளக்கத்திற்கு, நீங்கள் `Qiskit Textbook <https://qiskit.org/textbook/ch-machine-learning/machine-learning-qiskit-pytorch.html>`__ இல் தொடர்புடைய பிரிவைப் பார்க்கலாம்."

#: ../../tutorials/05_torch_connector.ipynb:1042
msgid "Step 1: Defining Data-loaders for train and test"
msgstr "படி 1: ரயில் மற்றும் சோதனைக்கான தரவு ஏற்றிகளை வரையறுத்தல்"

#: ../../tutorials/05_torch_connector.ipynb:1053
msgid "We take advantage of the ``torchvision`` `API <https://pytorch.org/vision/stable/datasets.html>`__ to directly load a subset of the `MNIST dataset <https://en.wikipedia.org/wiki/MNIST_database>`__ and define torch ``DataLoader``\\ s (`link <https://pytorch.org/docs/stable/data.html>`__) for train and test."
msgstr "நாங்கள் ``torchvision`` `API <https://pytorch.org/vision/stable/datasets.html>`__ ஐப் பயன்படுத்தி `MNIST தரவுத்தொகுப்பு <https: //en. org/wiki/MNIST_database>`__ மற்றும் டார்ச்சை வரையறுக்கவும் ``DataLoader``\\ s (`இணைப்பு <https://pytorch.org/docs/stable/data.html>`__) ரயில் மற்றும் சோதனை."

#: ../../tutorials/05_torch_connector.ipynb:1398
msgid "If we perform a quick visualization we can see that the train dataset consists of images of handwritten 0s and 1s."
msgstr "நாம் விரைவான காட்சிப்படுத்தலைச் செய்தால், ரயில் தரவுத்தொகுப்பு கையால் எழுதப்பட்ட 0 கள் மற்றும் 1 களின் படங்களைக் கொண்டிருப்பதைக் காணலாம்."

#: ../../tutorials/05_torch_connector.ipynb:1472
msgid "Step 2: Defining the QNN and Hybrid Model"
msgstr "படி 2: QNN மற்றும் கலப்பின மாதிரியை வரையறுத்தல்"

#: ../../tutorials/05_torch_connector.ipynb:1483
msgid "This second step shows the power of the ``TorchConnector``. After defining our quantum neural network layer (in this case, a ``EstimatorQNN``), we can embed it into a layer in our torch ``Module`` by initializing a torch connector as ``TorchConnector(qnn)``."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:1485
msgid "**⚠️ Attention:** In order to have an adequate gradient backpropagation in hybrid models, we MUST set the initial parameter ``input_gradients`` to TRUE during the qnn initialization."
msgstr "**⚠️கவனம்: ** கலப்பின மாடல்களில் போதிய சாய்வு பின்னணி இருக்க, நாம் qnn துவக்கத்தின் போது ஆரம்ப அளவுரு ``input_gradients`` ஐ TRUE க்கு அமைக்க வேண்டும்."

#: ../../tutorials/05_torch_connector.ipynb:1564
msgid "Step 3: Training"
msgstr "படி 3: பயிற்சி"

#: ../../tutorials/05_torch_connector.ipynb:1678
msgid "Now we’ll save the trained model, just to show how a hybrid model can be saved and re-used later for inference. To save and load hybrid models, when using the TorchConnector, follow the PyTorch recommendations of saving and loading the models."
msgstr "ஒரு கலப்பின மாடலை எவ்வாறு சேமித்து, பின்னர் அனுமானத்திற்காக மீண்டும் பயன்படுத்தலாம் என்பதைக் காண்பிப்பதற்காக, இப்போது பயிற்சியளிக்கப்பட்ட மாதிரியைச் சேமிப்போம். கலப்பின மாடல்களைச் சேமிக்கவும் ஏற்றவும், டார்ச் கனெக்டரைப் பயன்படுத்தும் போது, ​​மாடல்களைச் சேமித்து ஏற்றுவதற்கான பைடார்ச் பரிந்துரைகளைப் பின்பற்றவும்."

#: ../../tutorials/05_torch_connector.ipynb:1700
msgid "Step 4: Evaluation"
msgstr "படி 4: மதிப்பீடு"

#: ../../tutorials/05_torch_connector.ipynb:1711
msgid "We start from recreating the model and loading the state from the previously saved file. You create a QNN layer using another simulator or a real hardware. So, you can train a model on real hardware available on the cloud and then for inference use a simulator or vice verse. For a sake of simplicity we create a new quantum neural network in the same way as above."
msgstr "மாதிரியை மீண்டும் உருவாக்கி, முன்பு சேமித்த கோப்பிலிருந்து நிலையை ஏற்றுவதிலிருந்து தொடங்குகிறோம். நீங்கள் மற்றொரு சிமுலேட்டர் அல்லது உண்மையான வன்பொருளைப் பயன்படுத்தி QNN அடுக்கு உருவாக்குகிறீர்கள். எனவே, நீங்கள் மேகக்கணியில் கிடைக்கும் உண்மையான வன்பொருளில் ஒரு மாதிரியைப் பயிற்றுவிக்கலாம், பின்னர் அனுமானத்திற்கு ஒரு சிமுலேட்டர் அல்லது துணை வசனத்தைப் பயன்படுத்தலாம். எளிமைக்காக, மேலே உள்ள அதே வழியில் ஒரு புதிய குவாண்டம் நியூரல் நெட்வொர்க்கை உருவாக்குகிறோம்."

#: ../../tutorials/05_torch_connector.ipynb:1859
msgid "🎉🎉🎉🎉 **You are now able to experiment with your own hybrid datasets and architectures using Qiskit Machine Learning.** **Good Luck!**"
msgstr "🎉🎉🎉🎉 **நீங்கள் இப்போது உங்கள் சொந்த கலப்பின தரவுத்தொகுப்புகள் மற்றும் கட்டிடக்கலைகளை Qiskit இயந்திரக் கற்றலைப் பயன்படுத்திப் பரிசோதிக்க முடியும்.** **அதிர்ஷ்டம் உங்களுக்கு உரித்தாகட்டும்!**"

