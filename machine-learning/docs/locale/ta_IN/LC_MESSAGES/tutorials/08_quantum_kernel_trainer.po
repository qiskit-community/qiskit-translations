msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-01 19:11+0000\n"
"PO-Revision-Date: 2023-06-04 06:55\n"
"Last-Translator: \n"
"Language: ta\n"
"Language-Team: Tamil\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ta\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/08_quantum_kernel_trainer.po\n"
"X-Crowdin-File-ID: 9723\n"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:9
msgid "This page was generated from `docs/tutorials/08_quantum_kernel_trainer.ipynb`__."
msgstr "இந்தப் பக்கம் `docs/tutorials/08_quantum_kernel_trainer.ipynb`__ இல்லிருந்து உருவாக்கப்பட்டது."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:9
msgid "Quantum Kernel Training for Machine Learning Applications"
msgstr "இயந்திர கற்றல் பயன்பாடுகளுக்கான குவாண்டம் கர்னல் பயிற்சி"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:11
msgid "In this tutorial, we will train a quantum kernel on a labeled dataset for a machine learning application. To illustrate the basic steps, we will use Quantum Kernel Alignment (QKA) for a binary classification task. QKA is a technique that iteratively adapts a parametrized quantum kernel to a dataset while converging to the maximum SVM margin. More information about QKA can be found in the preprint, `\"Covariant quantum kernels for data with group structure.\" <https://arxiv.org/abs/2105.03406>`__"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:13
msgid "The entry point to training a quantum kernel is the ``QuantumKernelTrainer`` class. The basic steps are:"
msgstr "குவாண்டம் கர்னலைப் பயிற்றுவிப்பதற்கான நுழைவுப் புள்ளி ``QuantumKernelTrainer`` வகுப்பாகும். அடிப்படை படிகள்:"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:15
msgid "Prepare the dataset"
msgstr "தரவுத்தொகுப்பைத் தயாரிக்கவும்"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:16
msgid "Define the quantum feature map"
msgstr "குவாண்டம் அம்ச வரைபடத்தை வரையறுக்கவும்"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:17
msgid "Set up an instance of ``TrainableKernel`` and ``QuantumKernelTrainer`` objects"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:18
msgid "Use the ``QuantumKernelTrainer.fit`` method to train the kernel parameters on the dataset"
msgstr "தரவுத்தொகுப்பில் கர்னல் அளவுருக்களைப் பயிற்றுவிக்க ``QuantumKernelTrainer.fit`` முறையைப் பயன்படுத்தவும்"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:19
msgid "Pass the trained quantum kernel to a machine learning model"
msgstr "பயிற்சி பெற்ற குவாண்டம் கர்னலை இயந்திர கற்றல் மாதிரிக்கு அனுப்பவும்"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:31
msgid "Import Local, External, and Qiskit Packages and define a callback class for our optimizer"
msgstr "உள்ளூர், வெளி மற்றும் கிஸ்கிட் தொகுப்புகளை இறக்குமதி செய்து, எங்கள் ஆப்டிமைசருக்கான கால்பேக் வகுப்பை வரையறுக்கவும்"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:97
msgid "Prepare the Dataset"
msgstr "தரவுத்தொகுப்பைத் தயாரிக்கவும்"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:99
msgid "In this guide, we will use Qiskit Machine Learning's ``ad_hoc.py`` dataset to demonstrate the kernel training process. See the documentation `here <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.datasets.ad_hoc_data.html>`__."
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:187
msgid "Define the Quantum Feature Map"
msgstr "குவாண்டம் அம்ச வரைபடத்தை வரையறுக்கவும்"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:189
msgid "Next, we set up the quantum feature map, which encodes classical data into the quantum state space. Here, we use a ``QuantumCircuit`` to set up a trainable rotation layer and a ``ZZFeatureMap`` from ``Qiskit`` to represent the input data."
msgstr "அடுத்து, நாங்கள் குவாண்டம் அம்ச வரைபடத்தை அமைக்கிறோம், இது கிளாசிக்கல் தரவைக் குவாண்டம் நிலை இடத்தில் குறியாக்குகிறது. இங்கே, பயிற்சியளிக்கக்கூடிய சுழற்சி அடுக்கை அமைக்க ``QuantumCircuit`` மற்றும் உள்ளீட்டுத் தரவைக் குறிக்க ``Qiskit`` இலிருந்து ``ZZFeatureMap`` ஐப் பயன்படுத்துகிறோம்."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:263
msgid "Set Up the Quantum Kernel and Quantum Kernel Trainer"
msgstr "குவாண்டம் கர்னல் மற்றும் குவாண்டம் கர்னல் பயிற்சியாளரை அமைக்கவும்"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:265
msgid "To train the quantum kernel, we will use an instance of ``TrainableFidelityQuantumKernel`` (holds the feature map and its parameters) and ``QuantumKernelTrainer`` (manages the training process)."
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:267
msgid "We will train using the Quantum Kernel Alignment technique by selecting the kernel loss function, ``SVCLoss``, as input to the ``QuantumKernelTrainer``. Since this is a Qiskit-supported loss, we can use the string, ``\"svc_loss\"``; however, note that default settings are used when passing the loss as a string. For custom settings, instantiate explicitly with the desired options, and pass the ``KernelLoss`` object to the ``QuantumKernelTrainer``."
msgstr "``QuantumKernelTrainer`` க்கு உள்ளீடாக, `SVCLoss`` என்ற கர்னல் இழப்புச் செயல்பாட்டைத் தேர்ந்தெடுப்பதன் மூலம் குவாண்டம் கர்னல் சீரமைப்பு நுட்பத்தைப் பயன்படுத்தி பயிற்சி அளிப்போம். இது Qiskit-ஆதரவு இழப்பாக இருப்பதால், ``\"svc_loss\"`` என்ற சரத்தைப் பயன்படுத்தலாம்; இருப்பினும், இழப்பை ஒரு சரமாக அனுப்பும்போது இயல்புநிலை அமைப்புகள் பயன்படுத்தப்படும் என்பதை நினைவில் கொள்ளவும். தனிப்பயன் அமைப்புகளுக்கு, விரும்பிய விருப்பங்களுடன் வெளிப்படையாகத் தெரிவிக்கவும், மேலும் ``KernelLoss`` பொருளை ``QuantumKernelTrainer`` க்கு அனுப்பவும்."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:269
msgid "We will select SPSA as the optimizer and initialize the trainable parameter with the ``initial_point`` argument. Note: The length of the list passed as the ``initial_point`` argument must equal the number of trainable parameters in the feature map."
msgstr "SPSA ஐ ஆப்டிமைசராகத் தேர்ந்தெடுத்து, பயிற்சியளிக்கக்கூடிய அளவுருவை ``initial_point`` வாதத்துடன் துவக்குவோம். குறிப்பு: ``initial_point`` வாதமாக அனுப்பப்பட்ட பட்டியலின் நீளம், அம்ச வரைபடத்தில் பயிற்சியளிக்கக்கூடிய அளவுருக்களின் எண்ணிக்கைக்குச் சமமாக இருக்க வேண்டும்."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:301
msgid "Train the Quantum Kernel"
msgstr "குவாண்டம் கர்னலைப் பயிற்றுவிக்கவும்"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:303
msgid "To train the quantum kernel on the dataset (samples and labels), we call the ``fit`` method of ``QuantumKernelTrainer``."
msgstr "தரவுத்தொகுப்பில் (மாதிரிகள் மற்றும் லேபிள்கள்) குவாண்டம் கர்னலைப் பயிற்றுவிக்க, ``QuantumKernalTrainer`` என்ற ``fit`` முறையை நாங்கள் அழைக்கிறோம்."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:305
msgid "The output of ``QuantumKernelTrainer.fit`` is a ``QuantumKernelTrainerResult`` object. The results object contains the following class fields:"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:307
msgid "``optimal_parameters``: A dictionary containing {parameter: optimal value} pairs"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:308
msgid "``optimal_point``: The optimal parameter value found in training"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:309
msgid "``optimal_value``: The value of the loss function at the optimal point"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:310
msgid "``optimizer_evals``: The number of evaluations performed by the optimizer"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:311
msgid "``optimizer_time``: The amount of time taken to perform optimization"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:312
msgid "``quantum_kernel``: A ``TrainableKernel`` object with optimal values bound to the feature map"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:382
msgid "Fit and Test the Model"
msgstr "மாதிரியைப் பொருத்தி சோதிக்கவும்"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:384
msgid "We can pass the trained quantum kernel to a machine learning model, then fit the model and test on new data. Here, we will use Qiskit's ``QSVC`` for classification."
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:441
msgid "Visualize the Kernel Training Process"
msgstr "கர்னல் பயிற்சி செயல்முறையை காட்சிப்படுத்தவும்"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:443
msgid "From the callback data, we can plot how the loss evolves during the training process. We see it converges rapidly and reaches high test accuracy on this dataset with our choice of inputs."
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:445
msgid "We can also display the final kernel matrix, which is a measure of similarity between the training samples."
msgstr "இறுதி கர்னல் மேட்ரிக்ஸையும் நாம் காட்டலாம், இது பயிற்சி மாதிரிகளுக்கு இடையே உள்ள ஒற்றுமையின் அளவீடு ஆகும்."

