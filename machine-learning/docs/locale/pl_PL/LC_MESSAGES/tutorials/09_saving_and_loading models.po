msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-29 17:32+0000\n"
"PO-Revision-Date: 2022-04-29 18:16\n"
"Last-Translator: \n"
"Language-Team: Polish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && (n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: pl\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/09_saving_and_loading models.po\n"
"X-Crowdin-File-ID: 9728\n"
"Language: pl_PL\n"

#: ../../tutorials/09_saving_and_loading models.ipynb:9
msgid "This page was generated from `docs/tutorials/09_saving_and_loading models.ipynb`__."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:9
msgid "Saving, Loading Qiskit Machine Learning Models and Continuous Training"
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:11
msgid "In this tutorial we will show how to save and load Qiskit machine learning models. Ability to save a model is very important, especially when a significant amount of time is invested in training a model on a real hardware. Also, we will show how to resume training of the previously saved model."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:13
msgid "In this tutorial we will cover how to:"
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:15
msgid "Generate a simple dataset, split it into training/test datasets and plot them"
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:16
msgid "Train and save a model"
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:17
msgid "Load a saved model and resume training"
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:18
msgid "Evaluate performance of models"
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:19
msgid "PyTorch hybrid models"
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:30
msgid "First off, we start from the required imports. We’ll heavily use SciKit-Learn on the data preparation step. In the next cell we also fix a random seed for reproducibility purposes."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:64
msgid "We will be using two quantum simulators. We’ll start training on the QASM simulator then will resume training on the statevector simulator. The approach shown in this tutorial can be used to train a model on a real hardware available on the cloud and then re-use the model for inference on a local simulator."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:97
msgid "1. Prepare a dataset"
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:99
msgid "Next step is to prepare a dataset. Here, we generate some data in the same way as in other tutorials. The difference is that we apply some transformations to the generated data. We generates ``40`` samples, each sample has ``2`` features, so our features is an array of shape ``(40, 2)``. Labels are obtained by summing up features by columns and if the sum is more than ``1`` then this sample is labeled as ``1`` and ``0`` otherwise."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:123
msgid "Then, we scale down our features into a range of ``[0, 1]`` by applying ``MinMaxScaler`` from SciKit-Learn. Model training convergence is better when this transformation is applied."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:169
msgid "Let’s take a look at the features of the first ``5`` samples of our dataset after the transformation."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:226
msgid "We choose ``VQC`` or Variational Quantum Classifier as a model we will train. This model, by default, takes one-hot encoded labels, so we have to transform the labels that are in the set of ``{0, 1}`` into one-hot representation. We employ SciKit-Learn for this transformation as well. Please note that the input array must be reshaped to ``(num_samples, 1)`` first. The ``OneHotEncoder`` encoder does not work with 1D arrays and our labels is a 1D array. In this case a user must decide either an array has only one feature(our case!) or has one sample. Also, by default the encoder returns sparse arrays, but for dataset plotting it is easier to have dense arrays, so we set ``sparse`` to ``False``."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:273
msgid "Let’s take a look at the labels of the first ``5`` labels of the dataset. The labels should be one-hot encoded."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:330
#, python-format
msgid "Now we split our dataset into two parts: a training dataset and a test one. As a rule of thumb, 80% of a full dataset should go into a training part and 20% into a test one. Our training dataset has ``30`` samples. The test dataset should be used only once, when a model is trained to verify how well the model behaves on unseen data. We employ ``train_test_split`` from SciKit-Learn."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:378
msgid "Now it is time to see how our dataset looks like. Let’s plot it."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:445
msgid "On the plot above we see:"
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:447
msgid "Solid blue dots are the samples from the training dataset labeled as ``0``"
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:448
msgid "Empty blue dots are the samples from the test dataset labeled as ``0``"
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:449
msgid "Solid green dots are the samples from the training dataset labeled as ``1``"
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:450
msgid "Empty green dots are the samples from the test dataset labeled as ``1``"
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:452
msgid "We’ll train our model using solid dots and verify it using empty dots."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:464
msgid "2. Train a model and save it"
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:466
msgid "We’ll train our model in two steps. On the first step we train our model in ``20`` iterations."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:487
msgid "Create an empty array for callback to store values of the objective function."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:508
msgid "We re-use a callback function from the Neural Network Classifier & Regressor tutorial to plot iteration versus objective function value with some minor tweaks to plot objective values at each step."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:551
msgid "As mentioned above we train a ``VQC`` model and set ``COBYLA`` as an optimizer with a chosen value of the ``maxiter`` parameter. Then we evaluate performance of the model to see how well it was trained. Then we save this model for a file. On the second step we load this model and will continue to work with it."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:553
msgid "Here, we manually construct an ansatz to fix an initial point where to start optimization from."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:577
msgid "We create a model and set a quantum instance to the QASM simulator we created earlier."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:600
msgid "Now it is time to train the model."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:654
msgid "Let’s see how well our model performs after the first step of training."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:702
msgid "Next, we save the model. You may choose any file name you want. Please note that the ``save`` method does not append an extension if it is not specified in the file name."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:724
msgid "3. Load a model and continue training"
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:726
msgid "To load a model a user have to call a class method ``load`` of the corresponding model class. In our case it is ``VQC``. We pass the same file name we used in the previous section where we saved our model."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:747
msgid "Next, we want to alter the model in a way it can be trained further and on another simulator. To do so, we set the ``warm_start`` property. When it is set to ``True`` and ``fit()`` is called again the model uses weights from previous fit to start a new fit. We also set quantum instance of the underlying network to the statevector simulator we created in the beginning of the tutorial. Finally, we create and set a new optimizer with ``maxiter`` is set to ``80``, so the total number of iterations is ``100``."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:771
msgid "Now we continue training our model from the state we finished in the previous section."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:862
msgid "Let’s see which data points were misclassified. First, we call ``predict`` to infer predicted values from the training and test features."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:884
msgid "Plot the whole dataset and the highlight the points that were classified incorrectly."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:959
msgid "So, if you have a large dataset or a large model you can train it in multiple steps as shown in this tutorial."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:971
msgid "4. PyTorch hybrid models"
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:973
msgid "To save and load hybrid models, when using the TorchConnector, follow the PyTorch recommendations of saving and loading the models. For more details please refer to the PyTorch Connector tutorial `here <https://qiskit.org/documentation/machine-learning/tutorials/05_torch_connector.html>`__ where a short snippet shows how to do it."
msgstr ""

#: ../../tutorials/09_saving_and_loading models.ipynb:975
msgid "Take a look at this pseudo-like code to get the idea:"
msgstr ""

