msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-17 23:23+0000\n"
"PO-Revision-Date: 2022-02-18 00:36\n"
"Last-Translator: \n"
"Language-Team: Bengali Language\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: bengali\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/02_neural_network_classifier_and_regressor.po\n"
"X-Crowdin-File-ID: 9630\n"
"Language: bn_BN\n"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "This page was generated from `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__."
msgstr "এই পেজটি `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__ থেকে তৈরি হয়েছে।"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "Neural Network Classifier & Regressor"
msgstr "নিউরাল নেটওয়ার্ক শ্রেণিবিন্যাসকরক (ক্লাসিফায়ার) এবং রিগ্রেসর"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:11
msgid "In this tutorial we show how the ``NeuralNetworkClassifier`` and ``NeuralNetworkRegressor`` are used. Both take as an input a (Quantum) ``NeuralNetwork`` and leverage it in a specific context. In both cases we also provide a pre-configured variant for convenience, the Variational Quantum Classifier (``VQC``) and Variational Quantum Regressor (``VQR``). The tutorial is structured as follows:"
msgstr "এই পাঠসমূহ বা টিউটোরিয়ালে আমরা দেখাব কিভাবে ``NeuralNetworkClassifier`` এবং ``NeuralNetworkRegressor`` ব্যবহার করা হয়। উভয়ই একটি ইনপুট হিসাবে একটি (কোয়ান্টাম) ``NeuralNetwork`` গ্রহণ করে এবং একটি নির্দিষ্ট প্রসঙ্গে এটি লিভারেজ করে। উভয় ক্ষেত্রেই আমরা সুবিধার জন্য একটি পূর্ব-কনফিগার করা ভেরিয়েন্ট, ভেরিয়েশনাল কোয়ান্টাম ক্লাসিফায়ার (``VQC``) এবং ভেরিয়েশনাল কোয়ান্টাম রিগ্রসর (``VQR``) প্রদান করি। পাঠসমূহ (টিউটোরিয়াল) টি নিম্নরূপ গঠন করা হয়েছে:"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:13
msgid "`Classification <#Classification>`__"
msgstr "`Classification <#Classification>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:15
msgid "Classification with an ``OpflowQNN``"
msgstr "``OpflowQNN`` সহ শ্রেণিবিন্যাসকরণ (ক্লাসিফিকেশন)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:16
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:307
msgid "Classification with a ``CircuitQNN``"
msgstr "``CircuitQNN`` সহ শ্রেণিবিন্যাসকরণ (ক্লাসিফিকেশন)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:17
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:481
msgid "Variational Quantum Classifier (``VQC``)"
msgstr "পরিবর্তনশীল (ভ্যারিয়েশনাল) কোয়ান্টাম শ্রেণিবিন্যাসকরক (ক্লাসিফায়ার) (ভি.কিউ.সি)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:19
msgid "`Regression <#Regression>`__"
msgstr "`Regression <#Regression>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:21
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:645
msgid "Regression with an ``OpflowQNN``"
msgstr "``OpflowQNN`` দিয়ে রিগ্রেশন"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:22
msgid "Variational Quantum Regressor (``VQR``)"
msgstr "পরিবর্তনশীল (ভ্যারিয়েশনাল) কোয়ান্টাম রিগ্রেসর (ভি.কিউ.আর)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:74
msgid "Classification"
msgstr "শ্রেণিবিভাগ (ক্লাসিফিকেশন)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:76
msgid "We prepare a simple classification dataset to illustrate the following algorithms."
msgstr "এই ধারাক্রম (অ্যালগোরিদম​) কে বোঝানোর জন্য আমরা একটি সহজ শ্রেণিবিন্যাসকরণ তথ্যশালা (ক্লাসিফিকেশন ডাটাসেট​) বানিয়েছি।"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:121
msgid "Classification with the an ``OpflowQNN``"
msgstr "``OpflowQNN`` সহ শ্রেণিবিন্যাসকরণ (ক্লাসিফিকেশন)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:123
msgid "First we show how an ``OpflowQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``OpflowQNN`` is expected to return one-dimensional output in :math:`[-1, +1]`. This only works for binary classification and we assign the two classes to :math:`\\{-1, +1\\}`. For convenience, we use the ``TwoLayerQNN``, which is a special type of ``OpflowQNN`` defined via a feature map and an ansatz."
msgstr "প্রথমে আমরা দেখি কীভাবে একটি ``OpflowQNN``-এর মধ্যে শ্রেণিবিন্যাসের জন্য একটি ``NeuralNetworkClassifier`` ব্যবহার করা যায়। এই প্রসঙ্গে, ``OpflowQNN`` :math:`[-1, +1]` তে এক-মাত্রিক আউটপুট ফেরত প্রত্যাশিত। এটি শুধুমাত্র বাইনারি শ্রেণিবিন্যাসের জন্য কাজ করে এবং আমরা দুটি ক্লাসকে :math:`\\{-1, +1\\}` এ বরাদ্দ করি। সুবিধার জন্য, আমরা ``TwoLayerQNN`` ব্যবহার করি, যা একটি বিশেষ ধরণের ``OpflowQNN`` যা বৈশিষ্ট্যের মানচিত্র এবং আনস্যাটজের মাধ্যমে সংজ্ঞায়িত করা হয়।"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:180
msgid "We will add a callback function called ``callback_graph``. This will be called for each iteration of the optimizer and will be passed two parameters: the current weights and the value of the objective function at those weights. For our function, we append the value of the objective function to an array so we can plot iteration versus objective function value and update the graph with each iteration. However, you can do whatever you want with a callback function as long as it gets the two parameters mentioned passed."
msgstr "আমরা ``callback_graph`` নামে একটি কলব্যাক ফাংশন যোগ করব। এটি অপ্টিমাইজারের প্রতিটি পুনরাবৃত্তির জন্য বলা হবে এবং দুটি পরামিতি পাস করা হবে: বর্তমান ওজন এবং সেই ওজনগুলিতে উদ্দেশ্যমূলক কাজের মান। আমাদের ফাংশনের জন্য, আমরা উদ্দেশ্য ফাংশনের মানকে একটি অ্যারেতে যুক্ত করি যাতে আমরা পুনরাবৃত্তি বনাম বস্তুনিষ্ঠ ফাংশন ভ্যালু প্লট করতে পারি এবং প্রতিটি পুনরাবৃত্তির সাথে গ্রাফ আপডেট করতে পারি। যাইহোক, আপনি কলব্যাক ফাংশন দিয়ে যতটুকু চান তা করতে পারেন যতক্ষণ না এটি দুটি প্যারামিটার পাস করে।"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:309
msgid "Next we show how a ``CircuitQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``CircuitQNN`` is expected to return :math:`d`-dimensional probability vector as output, where :math:`d` denotes the number of classes. Sampling from a ``QuantumCircuit`` automatically results in a probability distribution and we just need to define a mapping from the measured bitstrings to the different classes. For binary classification we use the parity mapping."
msgstr "পরবর্তী আমরা দেখাব কিভাবে একটি ``CircuitQNN`` একটি ``NeuralNetworkClassifier`` এর মধ্যে শ্রেণিবিন্যাসের জন্য ব্যবহার করা যেতে পারে। এই প্রেক্ষাপটে, ``CircuitQNN`` প্রত্যাশিত হবে: :math:`d`- মাত্রিক সম্ভাবনা ভেক্টর আউটপুট হিসাবে, যেখানে :math:`d`-শ্রেণীর সংখ্যা নির্দেশ করে কোনও ``QuantumCircuit`` থেকে নমুনা দেওয়ার ফলে স্বয়ংক্রিয়ভাবে সম্ভাবনা বন্টনের ফলাফল হয় এবং আমাদের কেবলমাত্র পরিমাপ করা বিটস্ট্রিংগুলি থেকে বিভিন্ন শ্রেণিতে ম্যাপিং সংজ্ঞায়িত করতে হবে। বাইনারি শ্রেণিবিন্যাসের জন্য আমরা প্যারিটি ম্যাপিং ব্যবহার করি।"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:483
msgid "The ``VQC`` is a special variant of the ``NeuralNetworkClassifier`` with a ``CircuitQNN``. It applies a parity mapping (or extensions to multiple classes) to map from the bitstring to the classification, which results in a probability vector, which is interpreted as a one-hot encoded result. By default, it applies this the ``CrossEntropyLoss`` function that expects labels given in one-hot encoded format and will return predictions in that format too."
msgstr "``VQC`` একটি ``CircuitQNN`` সহ ``NeuralNetworkClassifier`` এর একটি বিশেষ রূপ। এটি শ্রেণিবিন্যাসের বিটস্ট্রিং থেকে মানচিত্রের জন্য একটি প্যারিটি ম্যাপিং (বা একাধিক ক্লাসে এক্সটেনশনগুলি) প্রয়োগ করে, যার ফলস্বরূপ সম্ভাবনা ভেক্টর তৈরি হয়, যা এক-হট এনকোডযুক্ত ফলাফল হিসাবে ব্যাখ্যা করা হয়। ডিফল্টরূপে , এটি এই ``CrossEntropyLoss`` ফাংশনটি প্রয়োগ করে যা এক-হট এনকোডযুক্ত ফর্ম্যাটে দেওয়া লেবেলগুলির প্রত্যাশা করে এবং সেই ফর্ম্যাটেও পূর্বাভাস প্রত্যাবর্তন করবে।"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:602
msgid "Regression"
msgstr "রিগ্রেশন"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:604
msgid "We prepare a simple regression dataset to illustrate the following algorithms."
msgstr "এই ধারাক্রম গুলিকে (অ্যালগোরিদমস​​) কে বোঝানোর জন্য আমরা একটি সহজ রিগ্রেশন​ তথ্যশালা (ডাটাসেট​) বানাই।"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:647
msgid "Here we restrict to regression with an ``OpflowQNN`` that returns values in :math:`[-1, +1]`. More complex and also multi-dimensional models could be constructed, also based on ``CircuitQNN`` but that exceeds the scope of this tutorial."
msgstr "এই সহায়িকাতে আমরা ``OpflowQNN`` রিগ্রেশন ব্যবহার করব যা আমাদের :math:`[-1, +1]` ভ্যালু দিবে। আরো জটিল এবং বহুমাত্রিক মডেল এই রিগ্রেশন দ্বারা তৈরি করা যাবে, এই ক্ষেত্রে আমাদের ``CircuitQNN`` ব্যবহার করতে হবে, যা এই সহায়িকার বা টিউটোরিয়ালের সীমার বাইরে।"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:774
msgid "Regression with the Variational Quantum Regressor (``VQR``)"
msgstr "পরিবর্তনশীল (ভ্যারিয়েশনাল) কোয়ান্টাম রিগ্রেশর (``VQR``) দ্বারা রিগ্রেশন।"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:776
msgid "Similar to the ``VQC`` for classification, the ``VQR`` is a special variant of the ``NeuralNetworkRegressor`` with a ``OpflowQNN``. By default it considers the ``L2Loss`` function to minimize the mean squared error between predictions and targets."
msgstr "``VQC`` শ্রেণিবিন্যাসকরণ (ক্লাসিফিকেশন) এর মতই ``VQR`` একটি বিশেষ প্রকরণ যা ``NeuralNetworkRegressor`` এবং ``OpflowQNN`` এর অন্তর্ভুক্ত। স্বতঃসিদ্ধ নিয়মানুসারে এটি একটি ``L2Loss`` ফাংশন যা অনুমান (প্রেডিকশন) এবং প্রত্যাশিত ফলাফল (টারগেট) এর গড় বর্গ মান অবনমন (মিনিমাইজ) করে।"

