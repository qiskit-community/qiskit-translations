msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-11 21:47+0000\n"
"PO-Revision-Date: 2022-08-11 22:45\n"
"Last-Translator: \n"
"Language-Team: Bengali Language\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: bengali\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/05_torch_connector.po\n"
"X-Crowdin-File-ID: 9636\n"
"Language: bn_BN\n"

#: ../../tutorials/05_torch_connector.ipynb:9
msgid "This page was generated from `docs/tutorials/05_torch_connector.ipynb`__."
msgstr "এই পৃষ্ঠাটি `docs/tutorials/05_torch_connector.ipynb`__ -থেকে বানানো হয়েছে।"

#: ../../tutorials/05_torch_connector.ipynb:9
msgid "Torch Connector and Hybrid QNNs"
msgstr "টর্চ (PyTorch) সংযোগকারী এবং দোআঁশলা কোয়ান্টাম নিউরাল নেটওয়ার্ক"

#: ../../tutorials/05_torch_connector.ipynb:11
msgid "This tutorial introduces Qiskit’s ``TorchConnector`` class, and demonstrates how the ``TorchConnector`` allows for a natural integration of any ``NeuralNetwork`` from Qiskit Machine Learning into a PyTorch workflow. ``TorchConnector`` takes a Qiskit ``NeuralNetwork`` and makes it available as a PyTorch ``Module``. The resulting module can be seamlessly incorporated into PyTorch classical architectures and trained jointly without additional considerations, enabling the development and testing of novel **hybrid quantum-classical** machine learning architectures."
msgstr "এই পাঠসমূহতে (টিউটোরিয়াল) Qiskit - এর ``TorchConnector`` ক্লাস ব্যবহার করে কিভাবে Qiskit Machine Learning - এর ``NeuralNetwork`` যেকোনো PyTorch কর্মধারায় সংযোজন করা যেতে পারে সেটা দেখানো হয়েছে। Qiskit এর ``NeuralNetwork`` - টি ``TorchConnector`` একটি PyTorch ``Module`` হিসাবে উপলব্ধ করে। সেই মডিউল (``Module``) যেকোনো PyTorch এর প্রথাগত স্থাপত্যতে নির্বিঘ্নে অন্তর্ভুক্ত করা যেতে পারে এবং অতিরিক্ত বিবেচনা ছাড়াই যৌথভাবে প্রশিক্ষিত করা যেতে পারে। এই ভাবে এটি নতুন **দোআঁশলা কোয়ান্টাম - ক্লাসিক্যাল** মেশিন লার্নিং স্থাপত্তের উন্নয়ন এবং পরীক্ষা করা অত্যন্ত সহজ বানিয়ে ফেলে।"

#: ../../tutorials/05_torch_connector.ipynb:15
msgid "Content:"
msgstr "সুচি:"

#: ../../tutorials/05_torch_connector.ipynb:17
msgid "`Part 1: Simple Classification & Regression <#Part-1:-Simple-Classification-&-Regression>`__"
msgstr "`প্রথম অধ্যায়: সরল শ্রেণীবিভাগ ও প্রত্যাবর্তন <#Part-1:-Simple-Classification-&-Regression>`__"

#: ../../tutorials/05_torch_connector.ipynb:19
msgid "The first part of this tutorial shows how quantum neural networks can be trained using PyTorch’s automatic differentiation engine (``torch.autograd``, `link <https://pytorch.org/tutorials/beginner/blitz/autograd_tutorial.html>`__) for simple classification and regression tasks."
msgstr "এই পাঠসমূহের প্রথম ভাগে কিভাবে কোয়ান্টাম নিউরাল নেটওয়ার্ক PyTorch - এর স্বয়ংক্রিয় বিভাজন যন্ত্র (``torch.autograd``, `link <https://pytorch.org/tutorials/beginner/blitz/autograd_tutorial.html>`__) দিয়ে সহজ শ্রেণিবিন্যাস এবং রিগ্রেশন কাজের জন্যে প্রশিক্ষণ করা যেতে পারে সেটা দেখানো হয়েছে।"

#: ../../tutorials/05_torch_connector.ipynb:21
msgid "`Classification <#1.-Classification>`__"
msgstr "`শ্রেণিবিন্যাসকরণ (ক্লাসিফিকেশন) <#1.-Classification>`__"

#: ../../tutorials/05_torch_connector.ipynb:23
msgid "Classification with PyTorch and ``OpflowQNN``"
msgstr "PyTorch এবং ``OpflowQNN`` দ্বারা শ্রেণিবিন্যাসকরণ"

#: ../../tutorials/05_torch_connector.ipynb:24
msgid "Classification with PyTorch and ``CircuitQNN``"
msgstr "PyTorch এবং ``CircuitQNN`` দ্বারা শ্রেণিবিন্যাসকরণ"

#: ../../tutorials/05_torch_connector.ipynb:26
msgid "`Regression <#2.-Regression>`__"
msgstr "`রিগ্রেশন <#2.-Regression>`__"

#: ../../tutorials/05_torch_connector.ipynb:28
msgid "Regression with PyTorch and ``OpflowQNN``"
msgstr "PyTorch এবং ``OpflowQNN`` দ্বারা রিগ্রেশন"

#: ../../tutorials/05_torch_connector.ipynb:30
msgid "`Part 2: MNIST Classification, Hybrid QNNs <#Part-2:-MNIST-Classification,-Hybrid-QNNs>`__"
msgstr "`Part 2: MNIST Classification, Hybrid QNNs <#Part-2:-MNIST-Classification,-Hybrid-QNNs>`__"

#: ../../tutorials/05_torch_connector.ipynb:32
msgid "The second part of this tutorial illustrates how to embed a (Quantum) ``NeuralNetwork`` into a target PyTorch workflow (in this case, a typical CNN architecture) to classify MNIST data in a hybrid quantum-classical manner."
msgstr "এই পাঠসমূহের দ্বিতীয় ভাগে PyTorch কর্মধারায় (কোয়ান্টাম) ``NeuralNetwork`` বসিয়ে MNIST থেকে নেওয়া তথ্য দোআঁশলা কোয়ান্টাম - ক্লাসিক্যাল পদ্ধতি দিয়ে শ্রেণীবদ্ধ কিভাবে করা যেতে পারে সেটা দেখানো হয়েছে। এই ক্ষেত্রে একটি সাধারণ CNN (বিভ্রান্তিকর নিউরাল নেটওয়ার্ক) ব্যবহার করা হয়েছে।"

#: ../../tutorials/05_torch_connector.ipynb:85
msgid "Part 1: Simple Classification & Regression"
msgstr "পর্ব 1: সরল শ্রেণিবিন্যাসকরণ (ক্লাসিফিকেশন) ও রিগ্রেশন"

#: ../../tutorials/05_torch_connector.ipynb:97
msgid "1. Classification"
msgstr "1. শ্রেণিবিভাগ (ক্লাসিফিকেশন)"

#: ../../tutorials/05_torch_connector.ipynb:99
msgid "First, we show how ``TorchConnector`` allows to train a Quantum ``NeuralNetwork`` to solve a classification tasks using PyTorch’s automatic differentiation engine. In order to illustrate this, we will perform **binary classification** on a randomly generated dataset."
msgstr "প্রথমত কিভাবে PyTorch - এর স্বয়ংক্রিয় বিভাজন যন্ত্র ব্যবহার করে ``TorchConnector`` একটি কোয়ান্টাম ``NeuralNetwork`` দ্বারা শ্রেণিবিন্যাসকরণ করতে সাহায্য করে সেটা আমরা দেখিয়েছি। উদাহরণ হিসাবে আমরা এখানে একটি যথেচ্ছভাবে বানানো ডেটাসেটের ওপরে দুইভাগবিশিষ্ট / দ্বিমূল শ্রেণীবিন্যাস করেছি।"

#: ../../tutorials/05_torch_connector.ipynb:152
msgid "A. Classification with PyTorch and ``OpflowQNN``"
msgstr "A. PyTorch এবং ``OpflowQNN`` দ্বারা শ্রেণিবিন্যাসকরণ (ক্লাসিফিকেশন)"

#: ../../tutorials/05_torch_connector.ipynb:154
msgid "Linking an ``OpflowQNN`` to PyTorch is relatively straightforward. Here we illustrate this using the ``TwoLayerQNN``, a sub-case of ``OpflowQNN`` introduced in previous tutorials."
msgstr "PyTorch এর সাথে একটি ``OpflowQNN`` লিঙ্ক করা তুলনামূলকভাবে সহজবোধ্য। এখানে আমরা ``TwoLayerQNN``, পূর্ববর্তী পাঠসমূহে (টিউটোরিয়ালস) ``OpflowQNN`` এর একটি সাব-কেস ব্যবহার করে এটি ব্যাখ্যা করেছি।"

#: ../../tutorials/05_torch_connector.ipynb:297
msgid "Optimizer"
msgstr "অনুকূলায়ক"

#: ../../tutorials/05_torch_connector.ipynb:299
msgid "The choice of optimizer for training any machine learning model can be crucial in determining the success of our training’s outcome. When using ``TorchConnector``, we get access to all of the optimizer algorithms defined in the [``torch.optim``] package (`link <https://pytorch.org/docs/stable/optim.html>`__). Some of the most famous algorithms used in popular machine learning architectures include *Adam*, *SGD*, or *Adagrad*. However, for this tutorial we will be using the L-BFGS algorithm (``torch.optim.LBFGS``), one of the most well know second-order optimization algorithms for numerical optimization."
msgstr "যে কোন মেশিন লার্নিং মডেলকে প্রশিক্ষণের জন্য অনুকূলায়ক -এর (অপটিমাইজার) পছন্দ আমাদের প্রশিক্ষণের ফলাফলের সাফল্য নির্ধারণে গুরুত্বপূর্ণ হতে পারে। ``TorchConnector`` ব্যবহার করার সময়, আমরা [``torch.optim``] প্যাকেজে (`link <https://pytorch.org/docs/stable/optim.html>`__) সংজ্ঞায়িত সমস্ত অপটিমাইজার অ্যালগরিদমগুলিতে অ্যাক্সেস পাই। জনপ্রিয় মেশিন লার্নিং আর্কিটেকচারে ব্যবহৃত কিছু বিখ্যাত অ্যালগরিদমের মধ্যে রয়েছে *অ্যাডাম *, *এসজিডি *, অথবা *অ্যাডাগ্রেড *(Adagrad)। যাইহোক, এই টিউটোরিয়ালের জন্য আমরা L-BFGS অ্যালগরিদম (``torch.optim.LBFGS``) ব্যবহার করব, সংখ্যাসূচক অপ্টিমাইজেশনের জন্য সবচেয়ে ভালোভাবে পরিচিত দ্বিতীয়-অর্ডার অনুকূলকরণ (অপটিমাইজার) অ্যালগরিদম।"

#: ../../tutorials/05_torch_connector.ipynb:303
msgid "Loss Function"
msgstr "হ্রাস ফাংশন (Loss Function)"

#: ../../tutorials/05_torch_connector.ipynb:305
msgid "As for the loss function, we can also take advantage of PyTorch’s pre-defined modules from ``torch.nn``, such as the `Cross-Entropy <https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html>`__ or `Mean Squared Error <https://pytorch.org/docs/stable/generated/torch.nn.MSELoss.html>`__ losses."
msgstr "হ্রাস (লস) ফাংশনের ক্ষেত্রে, আমরা ``torch.nn`` থেকে PyTorch- এর পূর্বনির্ধারিত মডিউলগুলির সুবিধা নিতে পারি, যেমন `Cross-Entropy <https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html>`__ অথবা `Mean Squared Error <https://pytorch.org/docs/stable/generated/torch.nn.MSELoss.html>`__ হ্রাস।"

#: ../../tutorials/05_torch_connector.ipynb:307
msgid "**💡 Clarification :** In classical machine learning, the general rule of thumb is to apply a Cross-Entropy loss to classification tasks, and MSE loss to regression tasks. However, this recommendation is given under the assumption that the output of the classification network is a class probability value in the [0,1] range (usually this is achieved through a Softmax layer). Because the following example for ``TwoLayerQNN`` does not include such layer, and we don’t apply any mapping to the output (the following section shows an example of application of parity mapping with ``CircuitQNNs``), the QNN’s output can take any value in the range [-1,1]. In case you were wondering, this is the reason why this particular example uses MSELoss for classification despite it not being the norm (but we encourage you to experiment with different loss functions and see how they can impact training results)."
msgstr "**💡 স্পষ্টীকরণ :** সাধারণত প্রথাগত (ক্লাসিক্যাল) মেশিন লার্নিং- এ আমরা শ্রেণিবিন্যাসকরণ (ক্লাসিফিকেশন) এর সময় ক্রস-এনট্রপি ক্ষতিমাপ এবং রিগ্রেশনের ক্ষেত্রে ক্ষতির দ্বিঘাত রাশিতে উন্নীতকরণ করা গড় ক্ষতিমাপ হিসাবে ব্যবহার করি। কিন্তু এইটা এই ভেবে করা হয়ে যে শ্রেণিবিন্যাসকরণ (ক্লাসিফিকেশন) নেটওয়ার্কের আউটপুট [০, ১] এর মধ্যে বিভাগের সম্ভাবনার হয়ে (সফটমাক্স স্তর এর জন্যে)। ``TwoLayerQNN`` এর ক্ষেত্রে এরম স্তর না থাকায় এবং আউটপুটের ওপরে কোনো রকম ম্যাপিং (চিত্রায়ন) না করে থাকায়(``CircuitQNNs`` এর সাথে সমতা ম্যাপিং (চিত্রায়ন) ব্যবহার করবে উদাহরণ পরের ভাগে দেখানো রয়েছে) কোয়ান্টাম নিউরাল নেটওয়ার্ক এর আউটপুট [-১, ১] এর মধ্যে থাকবে। এই জন্যেই আমরা এখানে ক্ষতির দ্বিঘাত রাশিতে উন্নীতকরণ করা গড় ক্ষতিমাপ (MSELoss) ব্যবহার করেছি। কিন্তু আমরা পাঠকদের বিভিন্ন ক্ষতির ফাংশন নিয়ে পরীক্ষা -নিরীক্ষা করে দেখতে বলবো এবং সেই খতিমাপ ব্যবহার প্রশিক্ষণের ফলাফলকে কিভাবে প্রভাবিত করতে পারে তা দেখতে বলবো।"

#: ../../tutorials/05_torch_connector.ipynb:517
#: ../../tutorials/05_torch_connector.ipynb:789
msgid "The red circles indicate wrongly classified data points."
msgstr "লাল বৃত্তগুলি ভুলভাবে শ্রেণিবদ্ধ ডেটা পয়েন্ট নির্দেশ করছে।"

#: ../../tutorials/05_torch_connector.ipynb:529
msgid "B. Classification with PyTorch and ``CircuitQNN``"
msgstr "B. PyTorch এবং ``CircuitQNN`` এর সঙ্গে শ্রেণিবিন্যাসকরণ (ক্লাসিফিকেশন)"

#: ../../tutorials/05_torch_connector.ipynb:531
msgid "Linking an ``CircuitQNN`` to PyTorch requires a bit more attention than ``OpflowQNN``. Without the correct setup, backpropagation is not possible."
msgstr "PyTorch এর সাথে ``CircuitQNN`` যোগ করাটা ``OpflowQNN``- এর যোগ করা থেকে অনেকটা আলাদা। ঠিক করে যোগ না করলে পিছনের দিকে প্রচার করাটা (ব্যাকপ্রপাগেশন) সম্ভব হয়ে উঠবে না।"

#: ../../tutorials/05_torch_connector.ipynb:533
msgid "In particular, we must make sure that we are returning a dense array of probabilities in the network’s forward pass (``sparse=False``). This parameter is set up to ``False`` by default, so we just have to make sure that it has not been changed."
msgstr "বিশেষ করে, আমাদের এটা নিশ্চিত করতে হবে যে নেটওয়ার্কের সামনের দিকে যাবার সময় আমরা সম্ভাবনার একটি ঘন বিন্যাস (array) ফেরাচ্ছি (``sparse=False`` করে)। এই স্থিতিমাপ বা প্যারামিটারটা স্বতঃসিদ্ধ নিয়মানুসারে ``False`` এই থাকে।"

#: ../../tutorials/05_torch_connector.ipynb:535
msgid "**⚠️ Attention:** If we define a custom interpret function ( in the example: ``parity``), we must remember to explicitly provide the desired output shape ( in the example: ``2``). For more info on the initial parameter setup for ``CircuitQNN``, please check out the `official qiskit documentation <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__."
msgstr "**⚠️ সাবধান:** যদি একটি বিশেষায়িত (কাস্টম) ফাংশন ব্যাখ্যা কর থাকে (উদাহরণে: \"সমতা\") তবে আকাঙ্ক্ষিত আউটপুটের আকার দেওয়া দরকার এখানে। `Qiskit এর প্রদর্শকের (ডকুমেন্টেশন) <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__ মধ্যে ``CircuitQNN`` এর স্থিতিমাপ বা প্যারামিটার নিয়ে আরো চর্চা করা রয়েছে"

#: ../../tutorials/05_torch_connector.ipynb:608
#: ../../tutorials/05_torch_connector.ipynb:939
msgid "For a reminder on optimizer and loss function choices, you can go back to `this section <#Optimizer>`__."
msgstr "অনুকূলায়ক (অপটিমাইজার) এবং লস ফাংশন পছন্দগুলির একটি স্মরণচিহ্নর জন্য, আপনি `এই অধ্যায় <#Optimizer>`__ ফিরে যেতে পারেন।"

#: ../../tutorials/05_torch_connector.ipynb:801
msgid "2. Regression"
msgstr "2. রিগ্রেশন"

#: ../../tutorials/05_torch_connector.ipynb:803
msgid "We use a model based on the ``TwoLayerQNN`` to also illustrate how to perform a regression task. The chosen dataset in this case is randomly generated following a sine wave."
msgstr "কিভাবে রিগ্রেশনের কাজ করা যাবে সেটার জন্যেও আমরা ``TwoLayerQNN`` এর ওপরে বানানো মডেল এখানে ব্যবহার করছি । এই ক্ষেত্রে আমরা সাইন ওয়েভ মিলিয়ে একটি ইচ্ছামতন বানানো ডেটাসেট ব্যবহার করছি।"

#: ../../tutorials/05_torch_connector.ipynb:844
msgid "A. Regression with PyTorch and ``OpflowQNN``"
msgstr "A. PyTorch এবং ``OpflowQNN`` দিয়ে রিগ্রেশন"

#: ../../tutorials/05_torch_connector.ipynb:855
msgid "The network definition and training loop will be analogous to those of the classification task using ``TwoLayerQNN``. In this case, we define our own feature map and ansatz, instead of using the default values."
msgstr "নেটওয়ার্ক সংজ্ঞা এবং প্রশিক্ষণ লুপ ``TwoLayerQNN`` এর সাথে শ্রেণিবিন্যাসকরণ (ক্লাসিফিকেশন) এর সঙ্গে অনুরূপ হবে। এই ক্ষেত্রে গতানুগতিক মান না ব্যবহার করে আমরা নিজেদের বৈশিষ্ট্য নকশা (ফিচার ম্যাপ) এবং অন্সাৎজ (ansatz) ব্যবহার করবো।"

#: ../../tutorials/05_torch_connector.ipynb:1078
msgid "Part 2: MNIST Classification, Hybrid QNNs"
msgstr "দ্বিতীয় অধ্যায়: MNIST এর শ্রেণিবিন্যাসকরণ (ক্লাসিফিকেশন), দোআঁশলা (Hybrid) কোয়ান্টাম নিউরাল নেটওয়ার্ক"

#: ../../tutorials/05_torch_connector.ipynb:1080
msgid "In this second part, we show how to leverage a hybrid quantum-classical neural network using ``TorchConnector``, to perform a more complex image classification task on the MNIST handwritten digits dataset."
msgstr "এই দ্বিতীয় অধ্যায়ে আমরা ``TorchConnector`` এর সাহায্যে হাইব্রিড কোয়ান্টাম নিউরাল নেটওয়ার্ক বানানো এবং সেটা দিয়ে কিভাবে MNIST (হাতে লেখা সংখ্যা) ডেটাসেটের ওপরে আরো জটিল ছবির শ্রেণিবিন্যাসকরণ (ক্লাসিফিকেশন) কাজ করা যায় সেটা দেখিয়েছি।"

#: ../../tutorials/05_torch_connector.ipynb:1082
msgid "For a more detailed (pre-``TorchConnector``) explanation on hybrid quantum-classical neural networks, you can check out the corresponding section in the `Qiskit Textbook <https://qiskit.org/textbook/ch-machine-learning/machine-learning-qiskit-pytorch.html>`__."
msgstr "`Qiskit Textbook <https://qiskit.org/textbook/ch-machine-learning/machine-learning-qiskit-pytorch.html>`__ - এ আরো সবিশেষ ভাবে দোআঁশলা (Hybrid) কোয়ান্টাম নিউরাল নেটওয়ার্কের ব্যাপারে বোঝানো হয়েছে।"

#: ../../tutorials/05_torch_connector.ipynb:1121
msgid "Step 1: Defining Data-loaders for train and test"
msgstr "ধাপ ১: প্রশিক্ষণ এবং পরীক্ষার জন্য ডেটা-লোডার সংজ্ঞায়িত করা"

#: ../../tutorials/05_torch_connector.ipynb:1132
msgid "We take advantage of the ``torchvision`` `API <https://pytorch.org/vision/stable/datasets.html>`__ to directly load a subset of the `MNIST dataset <https://en.wikipedia.org/wiki/MNIST_database>`__ and define torch ``DataLoader``\\ s (`link <https://pytorch.org/docs/stable/data.html>`__) for train and test."
msgstr "প্রশিক্ষণ এবং পরিক্ষার জন্যে ``torchvision`` `API <https://pytorch.org/vision/stable/datasets.html>`__ এর সাহায্যে সরাসরি `MNIST dataset <https://en.wikipedia.org/wiki/MNIST_database>`__  এর একাংশ লোড করে  ``DataLoader``\\ s (`link <https://pytorch.org/docs/stable/data.html>`__) বর্ণনা করছি ।"

#: ../../tutorials/05_torch_connector.ipynb:1175
msgid "If we perform a quick visualization we can see that the train dataset consists of images of handwritten 0s and 1s."
msgstr "ছোট করে একটি দৃশ্যায়ন বা চিত্রায়ন করলে লক্ষ করা যাবে যে ডেটাসেটিতে ইংরাজিতে হাতে লেখা ০ এবং ১ রয়েছে।"

#: ../../tutorials/05_torch_connector.ipynb:1249
msgid "Step 2: Defining the QNN and Hybrid Model"
msgstr "ধাপ ২: কোয়ান্টাম নিউরাল নেটওয়ার্ক বানানো এবং দোআঁশলা (Hybrid) মডেল"

#: ../../tutorials/05_torch_connector.ipynb:1260
msgid "This second step shows the power of the ``TorchConnector``. After defining our quantum neural network layer (in this case, a ``TwoLayerQNN``), we can embed it into a layer in our torch ``Module`` by initializing a torch connector as ``TorchConnector(qnn)``."
msgstr "``TorchConnector`` এর ক্ষমতা এই দ্বিতীয় ধাপে দেখা যাচ্ছে। আমাদের কোয়ান্টাম নিউরাল নেটওয়ার্কটি (এই ক্ষেত্রে একটি ``TwoLayerQNN``) বানানোর পরে এটা আমরা নিজেদের torch ``Module`` - এ ``TorchConnector(qnn)`` দ্বারা ঢোকাতে পারবো"

#: ../../tutorials/05_torch_connector.ipynb:1262
msgid "**⚠️ Attention:** In order to have an adequate gradient backpropagation in hybrid models, we MUST set the initial parameter ``input_gradients`` to TRUE during the qnn initialization."
msgstr "**⚠️ সাবধান:** কোয়ান্টাম নিউরাল নেটওয়ার্ক বানানোর সময়ে আমাদের প্রাথমিক ``input_gradients`` স্থিতিমাপ বা প্যারামিটারটি TRUE থাকা দরকার যাতে নতিমাত্রা যথেষ্ট ভাবে পিছনের দিকে প্রচার করা (ব্যাকপ্রপাগেশন) যায়।"

#: ../../tutorials/05_torch_connector.ipynb:1391
msgid "Step 3: Training"
msgstr "ধাপ ৩: প্রশিক্ষণ"

#: ../../tutorials/05_torch_connector.ipynb:1505
msgid "Now we’ll save the trained model, just to show how a hybrid model can be saved and re-used later for inference. To save and load hybrid models, when using the TorchConnector, follow the PyTorch recommendations of saving and loading the models."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:1527
msgid "Step 4: Evaluation"
msgstr "ধাপ ৪: মূল্যায়ন"

#: ../../tutorials/05_torch_connector.ipynb:1538
msgid "We start from recreating the model and loading the state from the previously saved file. You create a QNN layer using another simulator or a real hardware. So, you can train a model on real hardware available on the cloud and then for inference use a simulator or vice verse. For a sake of simplicity we create a new quantum neural network in the same way as above."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:1686
msgid "🎉🎉🎉🎉 **You are now able to experiment with your own hybrid datasets and architectures using Qiskit Machine Learning.** **Good Luck!**"
msgstr "🎉🎉🎉🎉 ** Qiskit Machine Learning দিয়ে এই পর্যায়ে এসে আশা করা যায় যে আপনারা এবার নিজের গবেষণার জনে দোআঁশলা (Hybrid) ডেটাসেট এবং স্থাপত্য (architectures) বানাতে পারবেন।** **আমাদের শুভকামনা রইলো!**"

