msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-29 18:01+0000\n"
"PO-Revision-Date: 2022-06-29 18:29\n"
"Last-Translator: \n"
"Language-Team: Bengali Language\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: bengali\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/01_neural_networks.po\n"
"X-Crowdin-File-ID: 9628\n"
"Language: bn_BN\n"

#: ../../tutorials/01_neural_networks.ipynb:9
msgid "This page was generated from `docs/tutorials/01_neural_networks.ipynb`__."
msgstr "এই পাতাটি `docs/tutorials/01_neural_networks.ipynb`__ থেকে তৈরি হয়েছে।"

#: ../../tutorials/01_neural_networks.ipynb:9
msgid "Quantum Neural Networks"
msgstr "কোয়ান্টাম নিউরাল নেটওয়ার্ক"

#: ../../tutorials/01_neural_networks.ipynb:11
msgid "This notebook demonstrates the different generic quantum neural network (QNN) implementations provided in Qiskit Machine Learning. The networks are meant as application-agnostic computational units that can be used for many different use cases. Depending on the application, a particular type of network might more or less suitable and might require to be set up in a particular way. The following different available neural networks will now be discussed in more detail:"
msgstr "এই নোটবুকটিতে Qiskit মেশিন লার্নিং এর বিভিন্ন সাধারণ কোয়ান্টাম নিউরাল নেটওয়ার্ক (কিউ এন এন) এর বাস্তবায়ন  (ইমপ্লিমেন্টেশন) দেখানো হয়েছে। এই নেটওয়ার্ক গুলো প্রয়োগ-নিরপেক্ষ কম্পিউটেশনাল ইউনিট হিসেবে বোঝানো হয় যা অনেক গুলি বিভিন্ন ক্ষেত্রে ব্যবহার করা যেতে পারে। প্রয়োগের উপর নির্ভর করে, একটি নির্দিষ্ট ধরনের নেটওয়ার্ক কম-বেশি উপযুক্ত হতে পারে এবং একটি নির্দিষ্ট উপায়ে সেট আপ বা গঠন করার প্রয়োজনীয়তা দেখা দিতে পারে। নিম্নে বিভিন্ন নিউরাল নেটওয়ার্ক গুলো আরো বিশদ ভাবে আলোচনা করা হবেঃ"

#: ../../tutorials/01_neural_networks.ipynb:13
msgid "``NeuralNetwork``: The interface for neural networks."
msgstr "``NeuralNetwork``: নিউরাল নেটওয়ার্কের ইন্টারফেস"

#: ../../tutorials/01_neural_networks.ipynb:14
msgid "``OpflowQNN``: A network based on the evaluation of quantum mechanical observables."
msgstr "``OpflowQNN``: কোয়ান্টাম বলবিদ্যার পর্যবেক্ষণের মূল্যায়নের উপর ভিত্তি করে একটি নেটওয়ার্ক।"

#: ../../tutorials/01_neural_networks.ipynb:15
msgid "``TwoLayerQNN``: A special ``OpflowQNN`` implementation for convenience."
msgstr "``TwoLayerQNN``: কাজের সুবিধার জন্য একটি বিশেষ ``OpflowQNN`` বাস্তবায়ন।"

#: ../../tutorials/01_neural_networks.ipynb:16
msgid "``CircuitQNN``: A network based on the samples resulting from measuring a quantum circuit."
msgstr "``CircuitQNN``: একটি নেটওয়ার্ক যা কোয়ান্টাম বর্তনী (সার্কিট) পরিমাপ করে পাওয়া নমুনাগুলির উপর ভিত্তি করে রচিত।"

#: ../../tutorials/01_neural_networks.ipynb:66
msgid "1. ``NeuralNetwork``"
msgstr "১. ``NeuralNetwork``"

#: ../../tutorials/01_neural_networks.ipynb:68
msgid "The ``NeuralNetwork`` represents the interface for all neural networks available in Qiskit Machine Learning. It exposes a forward and a backward pass taking the data samples and trainable weights as input. A ``NeuralNetwork`` does not contain any training capabilities, these are pushed to the actual algorithms / applications. Thus, a ``NeuralNetwork`` also does not store the values for trainable weights. In the following, different implementations of this interfaces are introduced."
msgstr "``NeuralNetwork`` Qiskit মেশিন লার্নিংয়ে পাওয়া যায় এমন সব নিউরাল নেটওয়ার্কগুলির ইন্টারফেসের প্রতিনিধিত্ব করে। এটি ইনপুট হিসাবে তথ্য (ডেটা) নমুনা এবং প্রশিক্ষণযোগ্য (ট্রেইনেবল) ওয়েট গ্রহণ করে একটি ফরোয়ার্ড (সম্মুখ) এবং একটি ব্যাকওয়ার্ড (পশ্চাৎ) পাস উন্মুক্ত করে। একটি ``NeuralNetwork`` কোনও প্রশিক্ষণ (ট্রেইনিং) ক্ষমতা রাখে না, এগুলি প্রকৃত ধারাক্রম (অ্যালগরিদম) / প্রয়োগক্ষেত্রে (অ্যাপ্লিকেশন) ব্যবহার করা যায়।সুতরাং একটি, ``NeuralNetwork`` প্রশিক্ষণযোগ্য ওয়েটের মানগুলিও সঞ্চয় করে না। নিচে, এই ইন্টারফেসগুলির বিভিন্ন প্রয়োগ দেখানো হয়েছে।"

#: ../../tutorials/01_neural_networks.ipynb:70
msgid "Suppose a ``NeuralNetwork`` called ``nn``. Then, the ``nn.forward(input, weights)`` pass takes either flat inputs for the data and weights of size ``nn.num_inputs`` and ``nn.num_weights``, respectively. ``NeuralNetwork`` supports batching of inputs and returns batches of output of the corresponding shape."
msgstr "ধরুন, একটি ``NeuralNetwork`` যার সংক্ষিপ্ত নাম ``nn``। এরপরে, ``nn.forward(input, weights)`` পাসের জন্য যথাক্রমে ``nn.num_inputs`` এবং ``nn.num_weights``এর ইনপুট তথ্য ও ওয়েট (ওজন) লাগে। ``NeuralNetwork`` ইনপুটের ব্যাচিং সমর্থন করে এবং সংশ্লিষ্ট আকৃতির ফলাফলের ব্যাচ প্রদান করে।"

#: ../../tutorials/01_neural_networks.ipynb:82
msgid "2. ``OpflowQNN``"
msgstr "২. ``OpflowQNN``"

#: ../../tutorials/01_neural_networks.ipynb:84
msgid "The ``OpflowQNN`` takes a (parametrized) operator from Qiskit and leverages Qiskit’s gradient framework to provide the backward pass. Such an operator can for instance be an expected value of a quantum mechanical observable with respect to a parametrized quantum state. The Parameters can be used to load classical data as well as represent trainable weights. The ``OpflowQNN`` also allows lists of operators and more complex structures to construct more complex QNNs."
msgstr "``OpflowQNN`` Qiskit থেকে একটি (পরামিতিক বা প্যারামিট্রাইজড) অপারেটর নেয় এবং পিছনের পাসটি সরবরাহের জন্য Qiskit এর গ্রেডিয়েন্ট কাঠামোটি ব্যবহার করে। যেমন একটি অপারেটর একটি প্যারামিট্রাইজড কোয়ান্টাম অবস্থার (স্টেট) সাপেক্ষে কোয়ান্টাম যান্ত্রিক পর্যবেক্ষণটির প্রত্যাশিত মান হতে পারে। প্যারামিটারগুলি ধ্রুপদী (ক্লাসিক্যাল) তথ্য ( ডেটা ) লোড বা আনয়ন করার পাশাপাশি প্রশিক্ষণযোগ্য ওজন (ট্রেইনেবল ওয়েট) উপস্থাপন করতে ব্যবহার করা যেতে পারে। ``OpflowQNN`` অপারেটরগুলির তালিকা এবং আরও জটিল কাঠামোকে আরও জটিল কিউএনএন (QNN) তৈরি করার সুযোগ করে দেয়।"

#: ../../tutorials/01_neural_networks.ipynb:356
msgid "Combining multiple observables in a ``ListOp`` also allows to create more complex QNNs"
msgstr "একাধিক পর্যবেক্ষণযোগ্য (অবজারভেবল) বিষয়কে ``ListOp`` এ এক করে আরও জটিল QNN বানানো সম্ভব​"

#: ../../tutorials/01_neural_networks.ipynb:457
msgid "3. ``TwoLayerQNN``"
msgstr "৩. ``TwoLayerQNN``"

#: ../../tutorials/01_neural_networks.ipynb:459
msgid "The ``TwoLayerQNN`` is a special ``OpflowQNN`` on :math:`n` qubits that consists of first a feature map to insert data and second an ansatz that is trained. The default observable is :math:`Z^{\\otimes n}`, i.e., parity."
msgstr "``TwoLayerQNN`` হল :math:`n` কিউবিটসমূহের ওপর একটি বিশেষ ``OpflowQNN`` যাতে প্রথমে তথ্য (ডেটা) সন্নিবেশ করানোর জন্য একটি বৈশিষ্ট্য নকশা (ফিচার ম্যাপ) এবং একটি প্রশিক্ষিত (ট্রেইনড) ansatz থাকে। প্রাথমিক পর্যবেক্ষণযোগ্য বিষয় হলো :math:`Z^{\\otimes n}`, উদাহরণস্বরূপ, সমতা (প্যারিটি) ।"

#: ../../tutorials/01_neural_networks.ipynb:673
msgid "4. ``CircuitQNN``"
msgstr "৪. ``CircuitQNN``"

#: ../../tutorials/01_neural_networks.ipynb:675
msgid "The ``CircuitQNN`` is based on a (parametrized) ``QuantumCircuit``. This can take input as well as weight parameters and produces samples from the measurement. The samples can either be interpreted as probabilities of measuring the integer index corresponding to a bitstring or directly as a batch of binary output. In the case of probabilities, gradients can be estimated efficiently and the ``CircuitQNN`` provides a backward pass as well. In case of samples, differentiation is not possible and the backward pass returns ``(None, None)``."
msgstr "``CircuitQNN`` একটি (পরামিতিক বা প্যারামিট্রাইজড) ``QuantumCircuit`` এর উপর ভিত্তি করে গঠিত। এটি ইনপুট নেয়ার পাশাপাশি প্যারামিটার মাপতে পারে এবং পরিমাপ থেকে নমুনা তৈরি করে। নমুনাগুলি হয় একটি বিটস্ট্রিংয়ের সাথে সম্পর্কিত পূর্ণসংখ্যা সূচকটি পরিমাপের সম্ভাব্যতা হিসাবে বা সরাসরি দ্বিমিক (বাইনারি) ফলাফলের ব্যাচ হিসাবে ব্যাখ্যা করা যেতে পারে। সম্ভাবনার ক্ষেত্রে গ্রেডিয়েন্টগুলি দক্ষতার সাথে অনুমান করা যায় এবং এর পাশাপাশি ``CircuitQNN`` একটি পশ্চাৎ পাস সরবরাহ করে। নমুনার ক্ষেত্রে, পার্থক্য করা সম্ভব নয় এবং পিছনের পাসটি ``(None, None)`` ফেরত দেয়।"

#: ../../tutorials/01_neural_networks.ipynb:678
msgid "Further, the ``CircuitQNN`` allows to specify an ``interpret`` function to post-process the samples. This is expected to take a measured integer (from a bitstring) and map it to a new index, i.e. non-negative integer. In this case, the output shape needs to be provided and the probabilities are aggregated accordingly."
msgstr "উপরন্তু, ``CircuitQNN`` নমুনাগুলি পরে প্রক্রিয়া করার জন্য একটি ``interpret`` ফাংশন নির্দিষ্ট করার অনুমতি দেয়। এটি একটি পরিমাপ করা পূর্ণসংখ্যা (একটি বিটস্ট্রিং থেকে) গ্রহণ করবে এবং একটি নতুন সূচকে, যেমন অঋণাত্মক পূর্ণসংখ্যায় ম্যাপ করবে বলে আশা করা হয়। এই ক্ষেত্রে, ফলাফলের আকৃতি সরবরাহ করা প্রয়োজন এবং সম্ভাব্যতাগুলি সেই অনুযায়ী সংযুক্ত করা হয়।"

#: ../../tutorials/01_neural_networks.ipynb:680
msgid "A ``CircuitQNN`` can be configured to return sparse as well as dense probability vectors. If no ``interpret`` function is used, the dimension of the probability vector scales exponentially with the number of qubits and a sparse recommendation is usually recommended. In case of an ``interpret`` function it depends on the expected outcome. If, for instance, an index is mapped to the parity of the corresponding bitstring, i.e., to 0 or 1, a dense output makes sense and the result will be a probability vector of length 2."
msgstr "একটি ``CircuitQNN`` কে ঘন এবং বিক্ষিপ্ত (স্পার্স) সম্ভাব্যতা দিকরাশি (ভেক্টর) ফেরত পেতে সাজানো (কনফিগার) করা যেতে পারে। যদি কোনও ``interpret`` ফাংশন ব্যবহার না করা হয় তবে সম্ভাব্যতা দিকরাশির (ভেক্টর) মাত্রা স্পষ্টতই কিউবিটের সংখ্যার সাথে সূচকীয় (এক্সপোনেন্সিয়াল) হারে থাকে এবং একটি বিক্ষিপ্ত (স্পার্স) ব্যবস্থা সাধারণত ঠিক করা হয়। ``interpret`` ফাংশনের ক্ষেত্রে এটি প্রত্যাশিত ফলাফলের উপর নির্ভর করে। উদাহরণস্বরূপ, যদি একটি সূচক একটি বিটস্ট্রিং এর সমতায় (প্যারিটি) ম্যাপ করা হয়, যেমন, ০ বা ১, তাহলে একটি ঘন (ডেন্স) ফলাফল বোধগম্য হয় এবং ফলাফলটি ২ দৈর্ঘ্যের সম্ভাব্যতা দিকরাশি (ভেক্টর) হবে।"

#: ../../tutorials/01_neural_networks.ipynb:723
msgid "4.1 Output: sparse integer probabilities"
msgstr "৪.১ ফলাফলঃ বিক্ষিপ্ত (স্পার্স) পূর্ণসংখ্যার সম্ভাবনা"

#: ../../tutorials/01_neural_networks.ipynb:830
msgid "4.2 Output: dense parity probabilities"
msgstr "৪.২ ফলাফলঃ ঘন (ডেন্স) সমতা (প্যারিটি) সম্ভাবনা"

#: ../../tutorials/01_neural_networks.ipynb:953
msgid "4.3 Output: Samples"
msgstr "৪.৩ ফলাফলঃ নমুনা (স্যাম্পল)"

#: ../../tutorials/01_neural_networks.ipynb:1087
msgid "4.4 Output: Parity Samples"
msgstr "৪.৪ ফলাফলঃ সমতা (প্যারিটি) নমুনা (স্যাম্পল)"

