msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-22 17:47+0000\n"
"PO-Revision-Date: 2021-07-22 18:03\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/01_neural_networks.po\n"
"X-Crowdin-File-ID: 9628\n"
"Language: id_ID\n"

#: ../../tutorials/01_neural_networks.ipynb:9
msgid "This page was generated from `docs/tutorials/01_neural_networks.ipynb`__."
msgstr ""

#: ../../tutorials/01_neural_networks.ipynb:9
msgid "Quantum Neural Networks"
msgstr "Jaringan Saraf Tiruan Kuantum"

#: ../../tutorials/01_neural_networks.ipynb:11
msgid "This notebook demonstrates the different generic quantum neural network (QNN) implementations provided in Qiskit Machine Learning. The networks are meant as application-agnostic computational units that can be used for many different use cases. Depending on the application, a particular type of network might more or less suitable and might require to be set up in a particular way. The following different available neural networks will now be discussed in more detail:"
msgstr "Notebook ini mendemonstrasikan beberapa implementasi umum dari jaringan saraf tiruan kuantum (JSTK) yang ada dalam Qiskit Machine Learning. Jaringan-jaringan tersebut dimaksudkan sebagai unit komputasi agnostik aplikasi yang dapat digunakan untuk banyak kasus penggunaan yang berbeda. Tergantung pada aplikasi, jenis tertentu dari jaringan mungkin lebih atau kurang cocok dan mungkin perlu diatur dengan cara tertentu. Beberapa jaringan saraf yang tersedia berikut ini akan dibahas secara lebih rinci:"

#: ../../tutorials/01_neural_networks.ipynb:13
msgid "``NeuralNetwork``: The interface for neural networks."
msgstr "``NeuralNetwork``: Antarmuka untuk jaringan saraf tiruan."

#: ../../tutorials/01_neural_networks.ipynb:14
msgid "``OpflowQNN``: A network based on the evaluation of quantum mechanical observables."
msgstr "``OpflowQNN``: Sebuah jaringan yang didasarkan pada evaluasi dari pengamatan (observable) mekanika kuantum."

#: ../../tutorials/01_neural_networks.ipynb:15
msgid "``TwoLayerQNN``: A special ``OpflowQNN`` implementation for convenience."
msgstr "``TwoLayerQNN``: Sebuah implementasi ``OpflowQNN`` khusus untuk memudahkan."

#: ../../tutorials/01_neural_networks.ipynb:16
msgid "``CircuitQNN``: A network based on the samples resulting from measuring a quantum circuit."
msgstr "``CircuitQNN``: Sebuah jaringan berdasarkan sampel yang dihasilkan dari mengukur sirkuit kuantum."

#: ../../tutorials/01_neural_networks.ipynb:64
msgid "1. ``NeuralNetwork``"
msgstr "1. ``NeuralNetwork``"

#: ../../tutorials/01_neural_networks.ipynb:66
msgid "The ``NeuralNetwork`` represents the interface for all neural networks available in Qiskit Machine Learning. It exposes a forward and a backward pass taking the data samples and trainable weights as input. A ``NeuralNetwork`` does not contain any training capabilities, these are pushed to the actual algorithms / applications. Thus, a ``NeuralNetwork`` also does not store the values for trainable weights. In the following, different implementations of this interfaces are introduced."
msgstr "``NeuralNetwork`` mewakili antarmuka untuk semua jaringan saraf yang tersedia dalam Qiskit Machine Learning. Antarmuka ini membuka umpan maju dan mundur, mengambil sampel data dan bobot yang dapat dilatih sebagai input. Sebuah ``NeuralNetwork`` tidak berisi kemampuan pelatihan apa pun, hal-hal ini terdapat di dalam algoritma/aplikasi dimana ``NeuralNetwork`` ini akan digunakan. Dengan demikian, sebuah ``NeuralNetwork`` juga tidak menyimpan nilai untuk bobot yang dapat dilatih. Berikut ini, beberapa implementasi yang berbeda dari antarmuka ini diperkenalkan."

#: ../../tutorials/01_neural_networks.ipynb:68
msgid "Suppose a ``NeuralNetwork`` called ``nn``. Then, the ``nn.forward(input, weights)`` pass takes either flat inputs for the data and weights of size ``nn.num_inputs`` and ``nn.num_weights``, respectively. ``NeuralNetwork`` supports batching of inputs and returns batches of output of the corresponding shape."
msgstr "Misalkan sebuah ``NeuralNetwork`` disebut ``nn``. Kemudian, ``nn.forward(input, weights)`` melewatkan masukan untuk data dan bobot dengan ukuran masing-masing ``nn.num_inputs`` dan ``nn.num_weights``. ``NeuralNetwork`` mendukung pengumpulan (batching) dari input dan mengembalikan kumpulan output dengan bentuk yang sesuai."

#: ../../tutorials/01_neural_networks.ipynb:80
msgid "2. ``OpflowQNN``"
msgstr "2. ``OpflowQNN``"

#: ../../tutorials/01_neural_networks.ipynb:82
msgid "The ``OpflowQNN`` takes a (parametrized) operator from Qiskit and leverages Qiskit’s gradient framework to provide the backward pass. Such an operator can for instance be an expected value of a quantum mechanical observable with respect to a parametrized quantum state. The Parameters can be used to load classical data as well as represent trainable weights. The ``OpflowQNN`` also allows lists of operators and more complex structures to construct more complex QNNs."
msgstr "``OpflowQNN`` mengambil sebuah operator (terparametrisasi) dari Qiskit dan memanfaatkan kerangka gradien Qiskit untuk memberikan umpan balik. Operator semacam itu misalnya dapat berupa nilai ekspektasi dari pengamatan (observable) mekanika kuantum dari keadaan kuantum terparametrisasi. Parameter ini dapat digunakan untuk memuat data klasik serta mewakili bobot yang dapat dilatih. ``OpflowQNN`` juga memungkinkan daftar operator dan struktur yang lebih kompleks untuk membangun JSTK yang lebih kompleks."

#: ../../tutorials/01_neural_networks.ipynb:321
msgid "Combining multiple observables in a ``ListOp`` also allows to create more complex QNNs"
msgstr "Menggabungkan beberapa pengamatan (observables) dalam sebuah ``ListOp`` juga memungkinkan untuk membuat JSTK yang lebih kompleks"

#: ../../tutorials/01_neural_networks.ipynb:412
msgid "3. ``TwoLayerQNN``"
msgstr "3. ``TwoLayerQNN``"

#: ../../tutorials/01_neural_networks.ipynb:414
msgid "The ``TwoLayerQNN`` is a special ``OpflowQNN`` on :math:`n` qubits that consists of first a feature map to insert data and second an ansatz that is trained. The default observable is :math:`Z^{\\otimes n}`, i.e., parity."
msgstr "``TwoLayerQNN`` adalah ``OpflowQNN`` khusus untuk :math:`n` qubit yang terdiri dari: sebuah peta fitur untuk menyisipkan data dan sebuah ansatz yang dilatih. Pengamatan (observable) standar yang biasa digunakan adalah :math:`Z^{\\otimes n}`, yaitu, paritas."

#: ../../tutorials/01_neural_networks.ipynb:612
msgid "4. ``CircuitQNN``"
msgstr "4. ``CircuitQNN``"

#: ../../tutorials/01_neural_networks.ipynb:614
msgid "The ``CircuitQNN`` is based on a (parametrized) ``QuantumCircuit``. This can take input as well as weight parameters and produces samples from the measurement. The samples can either be interpreted as probabilities of measuring the integer index corresponding to a bitstring or directly as a batch of binary output. In the case of probabilities, gradients can be estimated efficiently and the ``CircuitQNN`` provides a backward pass as well. In case of samples, differentiation is not possible and the backward pass returns ``(None, None)``."
msgstr ""

#: ../../tutorials/01_neural_networks.ipynb:617
msgid "Further, the ``CircuitQNN`` allows to specify an ``interpret`` function to post-process the samples. This is expected to take a measured integer (from a bitstring) and map it to a new index, i.e. non-negative integer. In this case, the output shape needs to be provided and the probabilities are aggregated accordingly."
msgstr "Selanjutnya, ``CircuitQNN`` memungkinkan untuk merincikan sebuah fungsi ``interpretasi`` untuk mem-post-process sampel. Satu contoh yang umum digunakan misalnya fungsi untuk mengkonversi sebuah bilangan bulat yang terukur (dari bitstring) dan memetakannya ke dalam sebuah indeks baru, yaitu bilangan bulat non-negatif. Dalam hal ini, bentuk (shape) output perlu didefinisikan dan probabilitas hasil pengukuran akan dikelompokkan sesuai dengan definisi yang diberikan."

#: ../../tutorials/01_neural_networks.ipynb:619
msgid "A ``CircuitQNN`` can be configured to return sparse as well as dense probability vectors. If no ``interpret`` function is used, the dimension of the probability vector scales exponentially with the number of qubits and a sparse recommendation is usually recommended. In case of an ``interpret`` function it depends on the expected outcome. If, for instance, an index is mapped to the parity of the corresponding bitstring, i.e., to 0 or 1, a dense output makes sense and the result will be a probability vector of length 2."
msgstr ""

#: ../../tutorials/01_neural_networks.ipynb:662
msgid "4.1 Output: sparse integer probabilities"
msgstr "4.1 Output: probabilitas integer yang jarang (sparse)"

#: ../../tutorials/01_neural_networks.ipynb:761
msgid "4.2 Output: dense parity probabilities"
msgstr "4.2 Output: probabilitas paritas yang padat"

#: ../../tutorials/01_neural_networks.ipynb:869
msgid "4.3 Output: Samples"
msgstr "4.3 Output: Sampel-Sampel"

#: ../../tutorials/01_neural_networks.ipynb:985
msgid "4.4 Output: Parity Samples"
msgstr "4.4 Output: Sampel-Sampel Paritas"

