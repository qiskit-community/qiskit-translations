msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-28 08:39+0000\n"
"PO-Revision-Date: 2023-03-28 10:57\n"
"Last-Translator: \n"
"Language: es_UN\n"
"Language-Team: Spanish (United)\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: es-un\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/08_quantum_kernel_trainer.po\n"
"X-Crowdin-File-ID: 9723\n"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:9
msgid "This page was generated from `docs/tutorials/08_quantum_kernel_trainer.ipynb`__."
msgstr "Esta página fue generada a partir de `docs/tutorials/08_quantum_kernel_trainer.ipynb`__."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:9
msgid "Quantum Kernel Training for Machine Learning Applications"
msgstr "Entrenamiento de Kernel Cuántico para Aplicaciones de Machine Learning"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:11
msgid "In this tutorial, we will train a quantum kernel on a labeled dataset for a machine learning application. To illustrate the basic steps, we will use Quantum Kernel Alignment (QKA) for a binary classification task. QKA is a technique that iteratively adapts a parametrized quantum kernel to a dataset while converging to the maximum SVM margin. More information about QKA can be found in the preprint, `\"Covariant quantum kernels for data with group structure.\" <https://arxiv.org/abs/2105.03406>`__"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:13
msgid "The entry point to training a quantum kernel is the ``QuantumKernelTrainer`` class. The basic steps are:"
msgstr "El punto de entrada para entrenar un kernel cuántico es la clase ``QuantumKernelTrainer``. Los pasos básicos son:"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:15
msgid "Prepare the dataset"
msgstr "Preparar el conjunto de datos"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:16
msgid "Define the quantum feature map"
msgstr "Definir el mapa cuántico de características"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:17
msgid "Set up an instance of ``TrainableKernel`` and ``QuantumKernelTrainer`` objects"
msgstr "Configurar una instancia de los objetos ``TrainableKernel`` y ``QuantumKernelTrainer``"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:18
msgid "Use the ``QuantumKernelTrainer.fit`` method to train the kernel parameters on the dataset"
msgstr "Utilizar el método ``QuantumKernelTrainer.fit`` para entrenar los parámetros del kernel sobre el conjunto de datos"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:19
msgid "Pass the trained quantum kernel to a machine learning model"
msgstr "Pasar el kernel cuántico entrenado a un modelo de machine learning"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:31
msgid "Import Local, External, and Qiskit Packages and define a callback class for our optimizer"
msgstr "Importar Paquetes Locales, Externos y de Qiskit y definir una clase de devolución de llamada (callback) para nuestro optimizador"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:96
msgid "Prepare the Dataset"
msgstr "Preparar el Conjunto de Datos"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:98
msgid "In this guide, we will use Qiskit Machine Learning's ``ad_hoc.py`` dataset to demonstrate the kernel training process. See the documentation `here <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.datasets.ad_hoc_data.html>`__."
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:186
msgid "Define the Quantum Feature Map"
msgstr "Definir el Mapa Cuántico de Características"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:188
msgid "Next, we set up the quantum feature map, which encodes classical data into the quantum state space. Here, we use a ``QuantumCircuit`` to set up a trainable rotation layer and a ``ZZFeatureMap`` from ``Qiskit`` to represent the input data."
msgstr "A continuación, configuramos el mapa cuántico de características, que codifica datos clásicos en el espacio de estados cuánticos. Aquí, usamos un ``QuantumCircuit`` para configurar una capa de rotación entrenable y un ``ZZFeatureMap`` de ``Qiskit`` para representar los datos de entrada."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:262
msgid "Set Up the Quantum Kernel and Quantum Kernel Trainer"
msgstr "Configurar el Kernel Cuántico y el Entrenador de Kernel Cuántico"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:264
msgid "To train the quantum kernel, we will use an instance of ``TrainableFidelityQuantumKernel`` (holds the feature map and its parameters) and ``QuantumKernelTrainer`` (manages the training process)."
msgstr "Para entrenar el kernel cuántico, usaremos una instancia de ``TrainableFidelityQuantumKernel`` (que contiene el mapa de características y sus parámetros) y de ``QuantumKernelTrainer`` (que administra el proceso de entrenamiento)."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:266
msgid "We will train using the Quantum Kernel Alignment technique by selecting the kernel loss function, ``SVCLoss``, as input to the ``QuantumKernelTrainer``. Since this is a Qiskit-supported loss, we can use the string, ``\"svc_loss\"``; however, note that default settings are used when passing the loss as a string. For custom settings, instantiate explicitly with the desired options, and pass the ``KernelLoss`` object to the ``QuantumKernelTrainer``."
msgstr "Entrenaremos usando la técnica Quantum Kernel Alignment seleccionando la función de pérdida de kernel, ``SVCLoss``, como entrada al ``QuantumKernelTrainer``. Dado que esta es una pérdida compatible con Qiskit, podemos utilizar la cadena, ``\"svc_loss\"``; sin embargo, ten en cuenta que la configuración predeterminada se utiliza cuando se pasa la pérdida como una cadena. Para configuraciones personalizadas, crea una instancia explícitamente con las opciones deseadas y pasa el objeto ``KernelLoss`` al ``QuantumKernelTrainer``."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:268
msgid "We will select SPSA as the optimizer and initialize the trainable parameter with the ``initial_point`` argument. Note: The length of the list passed as the ``initial_point`` argument must equal the number of trainable parameters in the feature map."
msgstr "Seleccionaremos SPSA como optimizador e inicializaremos el parámetro entrenable con el argumento ``initial_point``. Nota: La longitud de la lista pasada como el argumento ``initial_point`` debe ser igual al número de parámetros entrenables en el mapa de características."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:300
msgid "Train the Quantum Kernel"
msgstr "Entrenar el Kernel Cuántico"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:302
msgid "To train the quantum kernel on the dataset (samples and labels), we call the ``fit`` method of ``QuantumKernelTrainer``."
msgstr "Para entrenar el kernel cuántico en el conjunto de datos (muestras y etiquetas), llamamos al método ``fit`` de ``QuantumKernelTrainer``."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:304
msgid "The output of ``QuantumKernelTrainer.fit`` is a ``QuantumKernelTrainerResult`` object. The results object contains the following class fields: - ``optimal_parameters``: A dictionary containing {parameter: optimal value} pairs - ``optimal_point``: The optimal parameter value found in training - ``optimal_value``: The value of the loss function at the optimal point - ``optimizer_evals``: The number of evaluations performed by the optimizer - ``optimizer_time``: The amount of time taken to perform optimization - ``quantum_kernel``: A ``TrainableKernel`` object with optimal values bound to the feature map"
msgstr "La salida de ``QuantumKernelTrainer.fit`` es un objeto ``QuantumKernelTrainerResult``. El objeto de resultados contiene los siguientes campos de clase: - ``optimal_parameters``: Un diccionario que contiene pares {parameter: optimal value} - ``optimal_point``: El valor del parámetro óptimo encontrado en el entrenamiento - ``optimal_value``: El valor de la función de pérdida en el punto óptimo - ``optimizer_evals``: El número de evaluaciones realizadas por el optimizador - ``optimizer_time``: La cantidad de tiempo necesario para realizar la optimización - ``quantum_kernel``: Un objeto ``TrainableKernel`` con valores óptimos vinculados al mapa de características"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:375
msgid "Fit and Test the Model"
msgstr "Ajustar y Probar el Modelo"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:377
msgid "We can pass the trained quantum kernel to a machine learning model, then fit the model and test on new data. Here, we will use Qiskit's ``QSVC`` for classification."
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:434
msgid "Visualize the Kernel Training Process"
msgstr "Visualizar el Proceso de Entrenamiento del Kernel"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:436
msgid "From the callback data, we can plot how the loss evolves during the training process. We see it converges rapidly and reaches high test accuracy on this dataset with our choice of inputs."
msgstr "A partir de los datos de la devolución de llamada (callback), podemos graficar cómo evoluciona la pérdida durante el proceso de entrenamiento. Vemos que converge rápidamente y alcanza una alta precisión de prueba en este conjunto de datos con nuestra elección de entradas."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:438
msgid "We can also display the final kernel matrix, which is a measure of similarity between the training samples."
msgstr "También podemos mostrar la matriz del kernel final, que es una medida de similitud entre las muestras de entrenamiento."

