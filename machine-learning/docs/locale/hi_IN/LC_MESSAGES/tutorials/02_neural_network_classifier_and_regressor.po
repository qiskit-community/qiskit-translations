msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-08 17:14-0400\n"
"PO-Revision-Date: 2021-07-13 15:47\n"
"Last-Translator: \n"
"Language-Team: Hindi\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: hi\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/02_neural_network_classifier_and_regressor.po\n"
"X-Crowdin-File-ID: 9630\n"
"Language: hi_IN\n"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:13
msgid "Run interactively in jupyter notebook."
msgstr ""

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "Neural Network Classifier & Regressor"
msgstr "तंत्रिका नेटवर्क वर्गीकरण और प्रतिगामी"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:11
msgid "In this tutorial we show how the ``NeuralNetworkClassifier`` and ``NeuralNetworkRegressor`` are used. Both take as an input a (Quantum) ``NeuralNetwork`` and leverage it in a specific context. In both cases we also provide a pre-configured variant for convenience, the Variational Quantum Classifier (``VQC``) and Variational Quantum Regressor (``VQR``). The tutorial is structured as follows:"
msgstr "इस ट्यूटोरियल में हम बताते हैं कि किस तरह 'NeuralNetworkClassifier' और ''NeuralNetworkRegressor '' का इस्तेमाल किया जाता है। दोनों ही एक इनपुट के रूप में (क्वांटम) ``NeuralNetwork'' लेते हैं और इसे एक विशिष्ट संदर्भ में उपयोग करते हैं. दोनों ही मामलों में हम सुविधा के लिए पूर्व-विन्यस्त संस्करण भी प्रदान करते हैं, परिवर्तनशील क्वांटम वर्गीकृत (` ` VQC ` `) और परिवर्तनशील क्वांटम प्रतिगामी (` ` VQR ` ` '). ट्यूटोरियल के रूप में संरचित है:"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:13
msgid "`Classification <#Classification>`__"
msgstr "`वर्गीकरण <#Classification>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:15
msgid "Classification with an ``OpflowQNN``"
msgstr "``OpflowQNN`` के साथ वर्गीकरण"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:16
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:249
msgid "Classification with a ``CircuitQNN``"
msgstr "``CircuitQNN`` के साथ वर्गीकरण"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:17
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:398
msgid "Variational Quantum Classifier (``VQC``)"
msgstr "वैरिएशनल क्वांटम क्लासिफायर (``VQC``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:19
msgid "`Regression <#Regression>`__"
msgstr "`रिग्रेशन <#Regression>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:21
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:539
msgid "Regression with an ``OpflowQNN``"
msgstr "``OpflowQNN`` के साथ प्रतिगमन"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:22
msgid "Variational Quantum Regressor (``VQR``)"
msgstr "वैरिएशनल क्वांटम रेजिस्टर (``VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:70
msgid "Classification"
msgstr ""

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:72
msgid "We prepare a simple classification dataset to illustrate the following algorithms."
msgstr "हम निम्नलिखित एल्गोरिदम को स्पष्ट करने के लिए एक सरल वर्गीकरण डेटासेट तैयार करते हैं।"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:117
msgid "Classification with the an ``OpflowQNN``"
msgstr "``OpflowQNN`` के साथ वर्गीकरण"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:119
msgid "First we show how an ``OpflowQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``OpflowQNN`` is expected to return one-dimensional output in :math:`[-1, +1]`. This only works for binary classification and we assign the two classes to :math:`\\{-1, +1\\}`. For convenience, we use the ``TwoLayerQNN``, which is a special type of ``OpflowQNN`` defined via a feature map and an ansatz."
msgstr "पहले हम दिखाते हैं कि कैसे एक ``OpflowQNN`` का उपयोग ``NeuralNetworkClassifier`` में वर्गीकरण के लिए किया जा सकता है। इस संदर्भ में, ``OpflowQNN`` से :math:`[-1, +1]` में एक-आयामी उत्पाद लौटाने की उम्मीद है। यह केवल द्विचर वर्गीकरण के लिए काम करता है और हम दो वर्गों को :math:`\\{-1, +1\\}` पर निर्दिष्ट करते हैं। सुविधा के लिए, हम ``TwoLayerQNN`` का उपयोग करते हैं, जो एक विशेष प्रकार का ``OpflowQNN`` है जिसे फीचर मैप और ansatz के माध्यम से परिभाषित किया गया है।"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:251
msgid "Next we show how a ``CircuitQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``CircuitQNN`` is expected to return :math:`d`-dimensional probability vector as output, where :math:`d` denotes the number of classes. Sampling from a ``QuantumCircuit`` automatically results in a probability distribution and we just need to define a mapping from the measured bitstrings to the different classes. For binary classification we use the parity mapping."
msgstr "अब हम दिखाते हैं कि कैसे ``CircuitQNN`` का उपयोग ``NeuralNetworkClassifier`` में वर्गीकरण के लिए किया जा सकता है। इस संदर्भ में, ``CircuitQNN`` से :math:`d`-आयामी प्रायिकता वेक्टर के उत्पाद की उम्मीद है, जहां :math:`d` वर्गों की संख्या को दर्शाता है। ``QuantumCircuit`` से नमूना लेने से स्वचालित रूप से एक संभाव्यता वितरण होता है और हमें केवल मापा बिटस्ट्रिंग से विभिन्न वर्गों की मैपिंग को परिभाषित करने की आवश्यकता होती है। द्विचर वर्गीकरण के लिए हम समता मानचित्रण का उपयोग करते हैं।"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:400
msgid "The ``VQC`` is a special variant of the ``NeuralNetworkClassifier`` with a ``CircuitQNN``. It applies a parity mapping (or extensions to multiple classes) to map from the bitstring to the classification, which results in a probability vector, which is interpreted as a one-hot encoded result. By default, it applies this the ``CrossEntropyLoss`` function that expects labels given in one-hot encoded format and will return predictions in that format too."
msgstr "``VQC`` ``CircuitQNN`` के साथ ``NeuralNetworkClassifier`` का एक विशेष प्रकार है। यह बिटस्ट्रिंग से वर्गीकरण कॊ मैप करने के लिए समता मानचित्रण (या कई वर्गों के विस्तार) लागू करता है, जिसके परिणामस्वरूप एक संभाव्यता वेक्टर होता है, जिसे एक-हॉट एन्कोडेड परिणाम के रूप में व्याख्या किया जाता है। डिफ़ॉल्ट रूप से, यह इसपर ``CrossEntropyLoss`` फ़ंक्शन लागू करता है जो एक-हॉट एन्कोडेड प्रारूप में दिए गए नामपत्र की अपेक्षा करता है और उस प्रारूप में पूर्वानुमान भी लौटाएगा।"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:496
msgid "Regression"
msgstr ""

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:498
msgid "We prepare a simple regression dataset to illustrate the following algorithms."
msgstr "हम निम्नलिखित एल्गोरिदम को स्पष्ट करने के लिए एक साधारण प्रतिगमन डेटासेट तैयार करते हैं।"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:541
msgid "Here we restrict to regression with an ``OpflowQNN`` that returns values in :math:`[-1, +1]`. More complex and also multi-dimensional models could be constructed, also based on ``CircuitQNN`` but that exceeds the scope of this tutorial."
msgstr "यहां हम एक ``OpflowQNN`` के साथ प्रतिगमन तक सीमित हैं जो :math:`[-1, +1]` में मान लौटाता है। ``CircuitQNN`` के आधार पर अधिक जटिल और बहु-आयामी मॉडल भी बनाए जा सकते हैं, लेकिन यह इस ट्यूटोरियल के दायरे से अधिक है।"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:648
msgid "Regression with the Variational Quantum Regressor (``VQR``)"
msgstr "वैरिएशनल क्वांटम रेजिस्टर के साथ रिग्रेशन (``VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:650
msgid "Similar to the ``VQC`` for classification, the ``VQR`` is a special variant of the ``NeuralNetworkRegressor`` with a ``OpflowQNN``. By default it considers the ``L2Loss`` function to minimize the mean squared error between predictions and targets."
msgstr "वर्गीकरण के लिए ``VQC` के समान, ``VQR`` `OpflowQNN`` के साथ ``NeuralNetworkRegressor`` का एक विशेष प्रकार है। डिफ़ॉल्ट रूप से यह पूर्वानुमानों और लक्ष्यों के बीच माध्य चुकता त्रुटि को कम करने के लिए ``L2Loss`` फ़ंक्शन पर विचार करता है।"

