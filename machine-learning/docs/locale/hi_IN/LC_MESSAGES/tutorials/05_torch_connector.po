msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-08 17:14-0400\n"
"PO-Revision-Date: 2021-07-18 20:59\n"
"Last-Translator: \n"
"Language-Team: Hindi\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: hi\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/05_torch_connector.po\n"
"X-Crowdin-File-ID: 9636\n"
"Language: hi_IN\n"

#: ../../tutorials/05_torch_connector.ipynb:13
msgid "Run interactively in jupyter notebook."
msgstr "Jupyter नोटबुक में अंतःक्रियात्मक रूप से चलाएं।"

#: ../../tutorials/05_torch_connector.ipynb:9
msgid "Torch Connector and Hybrid QNNs"
msgstr "मशाल कनेक्टर और हाइब्रिड QNNs"

#: ../../tutorials/05_torch_connector.ipynb:11
msgid "This tutorial introduces Qiskit’s ``TorchConnector`` class, and demonstrates how the ``TorchConnector`` allows for a natural integration of any ``NeuralNetwork`` from Qiskit Machine Learning into a PyTorch workflow. ``TorchConnector`` takes a Qiskit ``NeuralNetwork`` and makes it available as a PyTorch ``Module``. The resulting module can be seamlessly incorporated into PyTorch classical architectures and trained jointly without additional considerations, enabling the development and testing of novel **hybrid quantum-classical** machine learning architectures."
msgstr "यह ट्यूटोरियल Qiskit के ``TorchConnector`` वर्ग का परिचय देता है, और दर्शाता है कि कैसे ``TorchConnector`` Qiskit Machine Learning से PyTorch वर्कफ़्लो में किसी भी ``NeuralNetwork`` के प्राकृतिक एकीकरण की अनुमति देता है। ``TorchConnector`` एक Qiskit ``NeuralNetwork`` लेता है और इसे एक PyTorch ``मॉड्यूल`` के रूप में उपलब्ध कराता है। परिणामी मॉड्यूल को मूल रूप से PyTorch शास्त्रीय आर्किटेक्चर में शामिल किया जा सकता है और अतिरिक्त विचारों के बिना संयुक्त रूप से प्रशिक्षित किया जा सकता है, जिससे उपन्यास **hybrid quantum-classical** मशीन लर्निंग आर्किटेक्चर के विकास और परीक्षण को सक्षम किया जा सकता है।"

#: ../../tutorials/05_torch_connector.ipynb:15
msgid "Content:"
msgstr "विषय-सूची"

#: ../../tutorials/05_torch_connector.ipynb:17
msgid "`Part 1: Simple Classification & Regression <#Part-1:-Simple-Classification-&-Regression>`__"
msgstr "`भाग 1: सरल वर्गीकरण और प्रतिगमन <#Part-1:-Simple-Classification-&-Regression>`__"

#: ../../tutorials/05_torch_connector.ipynb:19
msgid "The first part of this tutorial shows how quantum neural networks can be trained using PyTorch’s automatic differentiation engine (``torch.autograd``, `link <https://pytorch.org/tutorials/beginner/blitz/autograd_tutorial.html>`__) for simple classification and regression tasks."
msgstr "इस ट्यूटोरियल का पहला भाग दिखाता है कि कैसे PyTorch के स्वचालित विभेदन इंजन का उपयोग करके क्वांटम न्यूरल नेटवर्क को प्रशिक्षित किया जा सकता है (``torch.autograd``, `link <https://pytorch.org/tutorials/beginner/blitz/autograd_tutorial.html>`__) सरल वर्गीकरण और प्रतिगमन कार्यों के लिए।"

#: ../../tutorials/05_torch_connector.ipynb:21
msgid "`Classification <#1.-Classification>`__"
msgstr "`वर्गीकरण <#1.-Classification>`__"

#: ../../tutorials/05_torch_connector.ipynb:23
msgid "Classification with PyTorch and ``OpflowQNN``"
msgstr "PyTorch और ``OpflowQNN`` के साथ वर्गीकरण"

#: ../../tutorials/05_torch_connector.ipynb:24
msgid "Classification with PyTorch and ``CircuitQNN``"
msgstr "PyTorch और ``OpflowQNN`` के साथ वर्गीकरण"

#: ../../tutorials/05_torch_connector.ipynb:26
msgid "`Regression <#2.-Regression>`__"
msgstr "`प्रतिगमन <#2.-Regression>`__"

#: ../../tutorials/05_torch_connector.ipynb:28
msgid "Regression with PyTorch and ``OpflowQNN``"
msgstr "PyTorch और ``OpflowQNN`` के साथ प्रतिगमन"

#: ../../tutorials/05_torch_connector.ipynb:30
msgid "`Part 2: MNIST Classification, Hybrid QNNs <#Part-2:-MNIST-Classification,-Hybrid-QNNs>`__"
msgstr "`भाग 2: MNIST वर्गीकरण, हाइब्रिड QNNs <#Part-2:-MNIST-Classification,-Hybrid-QNNs>`__"

#: ../../tutorials/05_torch_connector.ipynb:32
msgid "The second part of this tutorial illustrates how to embed a (Quantum) ``NeuralNetwork`` into a target PyTorch workflow (in this case, a typical CNN architecture) to classify MNIST data in a hybrid quantum-classical manner."
msgstr "इस ट्यूटोरियल का दूसरा भाग बताता है कि हाइब्रिड क्वांटम-शास्त्रीय तरीके से MNIST डेटा को वर्गीकृत करने के लिए एक (क्वांटम) ``न्यूरलनेटवर्क`` को लक्ष्य PyTorch वर्कफ़्लो (इस मामले में, एक विशिष्ट CNN आर्किटेक्चर) में कैसे एम्बेड किया जाए।"

#: ../../tutorials/05_torch_connector.ipynb:74
msgid "Part 1: Simple Classification & Regression"
msgstr "भाग 1: सरल वर्गीकरण एवं प्रतिगमन"

#: ../../tutorials/05_torch_connector.ipynb:86
msgid "1. Classification"
msgstr "1. वर्गीकरण"

#: ../../tutorials/05_torch_connector.ipynb:88
msgid "First, we show how ``TorchConnector`` allows to train a Quantum ``NeuralNetwork`` to solve a classification tasks using PyTorch’s automatic differentiation engine. In order to illustrate this, we will perform **binary classification** on a randomly generated dataset."
msgstr "सबसे पहले, हम दिखाते हैं कि कैसे ``TorchConnector`` क्वांटम ``NeuralNetwork`` को प्रशिक्षित करने की अनुमति देता है ताकि PyTorch के स्वचालित विभेदन इंजन का उपयोग करके वर्गीकरण कार्यों को हल किया जा सके। इसे स्पष्ट करने के लिए, हम बेतरतीब ढंग से उत्पन्न डेटासेट पर **binary classification** करेंगे।"

#: ../../tutorials/05_torch_connector.ipynb:144
msgid "A. Classification with PyTorch and ``OpflowQNN``"
msgstr "A. PyTorch और ``OpflowQNN`` के साथ वर्गीकरण"

#: ../../tutorials/05_torch_connector.ipynb:146
msgid "Linking an ``OpflowQNN`` to PyTorch is relatively straightforward. Here we illustrate this using the ``TwoLayerQNN``, a sub-case of ``OpflowQNN`` introduced in previous tutorials."
msgstr "एक ``OpflowQNN`` को PyTorch से जोड़ना अपेक्षाकृत सरल है। यहां हम इसे ``TwoLayerQNN``, ``OpflowQNN`` का एक उप-मामला जो पिछले ट्यूटोरियल में पेश किया गया था, का उपयोग करते हुए स्पष्ट करते हैं।"

#: ../../tutorials/05_torch_connector.ipynb:254
msgid "Optimizer"
msgstr "आप्टमाइज़र"

#: ../../tutorials/05_torch_connector.ipynb:256
msgid "The choice of optimizer for training any machine learning model can be crucial in determining the success of our training’s outcome. When using ``TorchConnector``, we get access to all of the optimizer algorithms defined in the [``torch.optim``] package (`link <https://pytorch.org/docs/stable/optim.html>`__). Some of the most famous algorithms used in popular machine learning architectures include *Adam*, *SGD*, or *Adagrad*. However, for this tutorial we will be using the L-BFGS algorithm (``torch.optim.LBFGS``), one of the most well know second-order optimization algorithms for numerical optimization."
msgstr "किसी भी मशीन लर्निंग मॉडल के प्रशिक्षण के लिए अनुकूलक का चुनाव हमारे प्रशिक्षण के परिणाम की सफलता को निर्धारित करने में महत्वपूर्ण हो सकता है। ``TorchConnector`` का उपयोग करते समय, हमें [``torch.optim``] पैकेज (`link <https://pytorch.org/docs/stable/optim.html> `__)में परिभाषित सभी अनुकूलक एल्गोरिदम तक पहुंच प्राप्त होती है। लोकप्रिय मशीन लर्निंग आर्किटेक्चर में उपयोग किए जाने वाले कुछ सबसे प्रसिद्ध एल्गोरिदम में *Adam*, *SGD*, या *Adagrad* शामिल हैं। हालाँकि, इस ट्यूटोरियल के लिए हम L-BFGS एल्गोरिथम (``torch.optim.LBFGS``) का उपयोग करेंगे, जो संख्यात्मक अनुकूलन के लिए सबसे अच्छी तरह से ज्ञात दूसरे क्रम के अनुकूलन एल्गोरिदम में से एक है।"

#: ../../tutorials/05_torch_connector.ipynb:260
msgid "Loss Function"
msgstr "लॉस फंकशन"

#: ../../tutorials/05_torch_connector.ipynb:262
msgid "As for the loss function, we can also take advantage of PyTorch’s pre-defined modules from ``torch.nn``, such as the `Cross-Entropy <https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html>`__ or `Mean Squared Error <https://pytorch.org/docs/stable/generated/torch.nn.MSELoss.html>`__ losses."
msgstr "हानि फ़ंक्शन के लिए, हम `torch.nn` से PyTorch के पूर्व-निर्धारित मॉड्यूल का भी लाभ उठा सकते हैं, जैसे कि `Cross-Entropy <https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html>`__ या `माध्य चुकता त्रुटि <https://pytorch.org/docs/stable/generated/torch.nn.MSELoss.html>`__ हानियाँ।"

#: ../../tutorials/05_torch_connector.ipynb:264
msgid "**💡 Clarification :** In classical machine learning, the general rule of thumb is to apply a Cross-Entropy loss to classification tasks, and MSE loss to regression tasks. However, this recommendation is given under the assumption that the output of the classification network is a class probability value in the [0,1] range (usually this is achieved through a Softmax layer). Because the following example for ``TwoLayerQNN`` does not include such layer, and we don’t apply any mapping to the output (the following section shows an example of application of parity mapping with ``CircuitQNNs``), the QNN’s output can take any value in the range [-1,1]. In case you were wondering, this is the reason why this particular example uses MSELoss for classification despite it not being the norm (but we encourage you to experiment with different loss functions and see how they can impact training results)."
msgstr "**💡 स्पष्टीकरण:** क्लासिकल मशीन लर्निंग में, सामान्य नियम यह है कि वर्गीकरण कार्यों के लिए क्रॉस-एंट्रॉपी हानि, और प्रतिगमन कार्यों के लिए एमएसई हानि को लागू किया जाए। हालांकि, यह सिफारिश इस धारणा के तहत दी गई है कि वर्गीकरण नेटवर्क का आउटपुट [0,1] श्रेणी में एक वर्ग संभाव्यता मान है (आमतौर पर यह सॉफ्टमैक्स परत के माध्यम से प्राप्त किया जाता है)। क्योंकि ``TwoLayerQNN`` के लिए निम्न उदाहरण में ऐसी परत शामिल नहीं है, और हम आउटपुट पर कोई मैपिंग लागू नहीं करते हैं (निम्न अनुभाग ``CircuitQNNs` के साथ समता मानचित्रण के अनुप्रयोग का एक उदाहरण दिखाता है), QNN का आउटपुट [-1,1] की सीमा में कोई भी मान ले सकते हैं। यदि आप सोच रहे थे, यही कारण है कि यह विशेष उदाहरण वर्गीकरण के लिए MSELoss का उपयोग करता है, जबकि यह मानक नहीं है (लेकिन हम आपको विभिन्न हानि कार्यों के साथ प्रयोग करने के लिए प्रोत्साहित करते हैं और देखें कि वे प्रशिक्षण परिणामों को कैसे प्रभावित कर सकते हैं)।"

#: ../../tutorials/05_torch_connector.ipynb:442
#: ../../tutorials/05_torch_connector.ipynb:674
msgid "The red circles indicate wrongly classified data points."
msgstr "लाल घेरे गलत रूप से वर्गीकृत डेटा बिंदुओं को दर्शाते हैं।"

#: ../../tutorials/05_torch_connector.ipynb:454
msgid "B. Classification with PyTorch and ``CircuitQNN``"
msgstr "B. PyTorch और ``CircuitQNN`` के साथ वर्गीकरण"

#: ../../tutorials/05_torch_connector.ipynb:456
msgid "Linking an ``CircuitQNN`` to PyTorch requires a bit more attention than ``OpflowQNN``. Without the correct setup, backpropagation is not possible."
msgstr "एक ``CircuitQNN`` को PyTorch से जोड़ने के लिए ``OpflowQNN`` की तुलना में थोड़ा अधिक ध्यान देने की आवश्यकता है। सही सेटअप के बिना, बैकप्रोपेगेशन संभव नहीं है।"

#: ../../tutorials/05_torch_connector.ipynb:458
msgid "In particular, we must make sure that we are returning a dense array of probabilities in the network’s forward pass (``sparse=False``). This parameter is set up to ``False`` by default, so we just have to make sure that it has not been changed."
msgstr "विशेष रूप से, हमें यह सुनिश्चित करना चाहिए कि हम नेटवर्क के फॉरवर्ड पास (``sparse=False``) में संभावनाओं की एक सघन सरणी लौटा रहे हैं। यह पैरामीटर डिफ़ॉल्ट रूप से ``गलत`` पर सेट है, इसलिए हमें केवल यह सुनिश्चित करना है कि इसे बदला नहीं गया है।"

#: ../../tutorials/05_torch_connector.ipynb:460
msgid "**⚠️ Attention:** If we define a custom interpret function ( in the example: ``parity``), we must remember to explicitly provide the desired output shape ( in the example: ``2``). For more info on the initial parameter setup for ``CircuitQNN``, please check out the `official qiskit documentation <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__."
msgstr "**⚠️ Attention:** If we define a custom interpret function ( in the example: ``parity``), we must remember to explicitly provide the desired output shape ( in the example: ``2``). For more info on the initial parameter setup for ``CircuitQNN``, please check out the `official qiskit documentation <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__."

#: ../../tutorials/05_torch_connector.ipynb:523
#: ../../tutorials/05_torch_connector.ipynb:815
msgid "For a reminder on optimizer and loss function choices, you can go back to `this section <#Optimizer>`__."
msgstr "ऑप्टिमाइज़र और हानि फ़ंक्शन विकल्पों पर अनुस्मारक के लिए, आप `इस अनुभाग <#Optimizer>`__ पर वापस जा सकते हैं।"

#: ../../tutorials/05_torch_connector.ipynb:686
msgid "2. Regression"
msgstr "2. प्रतिगमन"

#: ../../tutorials/05_torch_connector.ipynb:688
msgid "We use a model based on the ``TwoLayerQNN`` to also illustrate how to perform a regression task. The chosen dataset in this case is randomly generated following a sine wave."
msgstr "हम ``TwoLayerQNN`` पर आधारित एक मॉडल का उपयोग यह भी बताने के लिए करते हैं कि प्रतिगमन कार्य कैसे करें। इस मामले में चुना गया डेटासेट एक साइन वेव के बाद बेतरतीब ढंग से उत्पन्न होता है।"

#: ../../tutorials/05_torch_connector.ipynb:730
msgid "A. Regression with PyTorch and ``OpflowQNN``"
msgstr "A. PyTorch और ``OpflowQNN`` के साथ प्रतिगमन"

#: ../../tutorials/05_torch_connector.ipynb:741
msgid "The network definition and training loop will be analogous to those of the classification task using ``TwoLayerQNN``. In this case, we define our own feature map and ansatz, instead of using the default values."
msgstr "नेटवर्क परिभाषा और प्रशिक्षण लूप ``TwoLayerQNN`` का उपयोग करने वाले वर्गीकरण कार्य के अनुरूप होंगे। इस मामले में, हम डिफ़ॉल्ट मानों का उपयोग करने के बजाय, अपने स्वयं के फीचर मैप और ansatz को परिभाषित करते हैं।"

#: ../../tutorials/05_torch_connector.ipynb:963
msgid "Part 2: MNIST Classification, Hybrid QNNs"
msgstr "भाग 2: MNIST वर्गीकरण, हाइब्रिड QNNs"

#: ../../tutorials/05_torch_connector.ipynb:965
msgid "In this second part, we show how to leverage a hybrid quantum-classical neural network using ``TorchConnector``, to perform a more complex image classification task on the MNIST handwritten digits dataset."
msgstr "इस दूसरे भाग में, हम दिखाते हैं कि MNIST हस्तलिखित अंकों के डेटासेट पर अधिक जटिल छवि वर्गीकरण कार्य करने के लिए ``TorchConnector` का उपयोग करके एक हाइब्रिड क्वांटम-शास्त्रीय तंत्रिका नेटवर्क का लाभ कैसे उठाया जाए।"

#: ../../tutorials/05_torch_connector.ipynb:967
msgid "For a more detailed (pre-``TorchConnector``) explanation on hybrid quantum-classical neural networks, you can check out the corresponding section in the `Qiskit Textbook <https://qiskit.org/textbook/ch-machine-learning/machine-learning-qiskit-pytorch.html>`__."
msgstr "हाइब्रिड क्वांटम-शास्त्रीय तंत्रिका नेटवर्क पर अधिक विस्तृत (पूर्व-`` टॉर्च कनेक्टर`) स्पष्टीकरण के लिए, आप `किस्किट पाठ्यपुस्तक में संबंधित अनुभाग देख सकते हैं। <https://qiskit.org/textbook/ch-machine-learning/machine-learning-qiskit-pytorch.html>`__."

#: ../../tutorials/05_torch_connector.ipynb:996
msgid "Step 1: Defining Data-loaders for train and test"
msgstr "चरण 1: ट्रेन और परीक्षण के लिए डेटा लोडर को परिभाषित करना"

#: ../../tutorials/05_torch_connector.ipynb:1007
msgid "We take advantage of the ``torchvision`` `API <https://pytorch.org/vision/stable/datasets.html>`__ to directly load a subset of the `MNIST dataset <https://en.wikipedia.org/wiki/MNIST_database>`__ and define torch ``DataLoader``\\ s (`link <https://pytorch.org/docs/stable/data.html>`__) for train and test."
msgstr "हम ``torchvision`` `API <https://pytorch.org/vision/stable/datasets.html>`__ का लाभ उठाते हुए `MNIST डेटासेट <https://en.wikipedia.org/wiki/MNIST_database>`__के सबसेट को सीधे लोड करते हैं और ट्रेन और परीक्षण के लिए मशाल ``DataLoader``\\ s (`लिंक <https://pytorch.org/docs/stable/data.html>`__) को परिभाषित करें।"

#: ../../tutorials/05_torch_connector.ipynb:1048
msgid "If we perform a quick visualization we can see that the train dataset consists of images of handwritten 0s and 1s."
msgstr "यदि हम एक त्वरित विज़ुअलाइज़ेशन करते हैं तो हम देख सकते हैं कि ट्रेन डेटासेट में हस्तलिखित 0s और 1s की छवियां होती हैं।"

#: ../../tutorials/05_torch_connector.ipynb:1120
msgid "Step 2: Defining the QNN and Hybrid Model"
msgstr "चरण 2: QNN और हाइब्रिड मॉडल को परिभाषित करना"

#: ../../tutorials/05_torch_connector.ipynb:1131
msgid "This second step shows the power of the ``TorchConnector``. After defining our quantum neural network layer (in this case, a ``TwoLayerQNN``), we can embed it into a layer in our torch ``Module`` by initializing a torch connector as ``TorchConnector(qnn)``."
msgstr "यह दूसरा चरण ``TorchConnector`` की शक्ति को दर्शाता है। हमारे क्वांटम न्यूरल नेटवर्क लेयर (इस मामले में, एक ``TwoLayerQNN``) को परिभाषित करने के बाद, हम एक टॉर्च कनेक्टर को ``TorchConnector(qnn)`` के रूप में आरंभ करके इसे अपने मशाल ``मॉड्यूल`` में एक परत में एम्बेड कर सकते हैं।"

#: ../../tutorials/05_torch_connector.ipynb:1133
msgid "**⚠️ Attention:** In order to have an adequate gradient backpropagation in hybrid models, we MUST set the initial parameter ``input_gradients`` to TRUE during the qnn initialization."
msgstr "**⚠️ ध्यान दें:** हाइब्रिड मॉडल में पर्याप्त ग्रेडिएंट बैकप्रोपेगेशन के लिए, हमें qnn इनिशियलाइज़ेशन के दौरान प्रारंभिक पैरामीटर ``input_gradients` को TRUE पर सेट करना होगा।"

#: ../../tutorials/05_torch_connector.ipynb:1235
msgid "Step 3: Training"
msgstr "चरण 3: प्रशिक्षण"

#: ../../tutorials/05_torch_connector.ipynb:1337
msgid "Step 4: Evaluation"
msgstr "चरण 4: मूल्यांकन"

#: ../../tutorials/05_torch_connector.ipynb:1440
msgid "🎉🎉🎉🎉 **You are now able to experiment with your own hybrid datasets and architectures using Qiskit Machine Learning.** **Good Luck!**"
msgstr "🎉🎉🎉🎉 **अब आप Qiskit Machine Learning का उपयोग करके अपने स्वयं के हाइब्रिड डेटासेट और आर्किटेक्चर के साथ प्रयोग करने में सक्षम हैं।** **सौभाग्य!**"

