msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-29 19:30+0000\n"
"PO-Revision-Date: 2021-10-09 19:10\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/02_neural_network_classifier_and_regressor.po\n"
"X-Crowdin-File-ID: 9630\n"
"Language: fr_FR\n"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "This page was generated from `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__."
msgstr "Cette page a été générée à partir de `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "Neural Network Classifier & Regressor"
msgstr "Classification et régression de réseau de neurones"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:11
msgid "In this tutorial we show how the ``NeuralNetworkClassifier`` and ``NeuralNetworkRegressor`` are used. Both take as an input a (Quantum) ``NeuralNetwork`` and leverage it in a specific context. In both cases we also provide a pre-configured variant for convenience, the Variational Quantum Classifier (``VQC``) and Variational Quantum Regressor (``VQR``). The tutorial is structured as follows:"
msgstr "Dans ce tutoriel, nous montrons comment utiliser ``NeuralNetworkClassifier`` et ``NeuralNetworkRegressor``. Les deux prennent comme entrée (Quantique) ``NeuralNetwork`` et l'exploitent dans un contexte spécifique. Dans les deux cas, nous proposons également pour plus de commodité, une variante préconfigurée : Le Classificateur Variationnel Quantique (``VQC``) et le Régresseur Variationnel Quantique (``VQR``). Le didacticiel est structuré comme suit :"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:13
msgid "`Classification <#Classification>`__"
msgstr "`Classification <#Classification>` __"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:15
msgid "Classification with an ``OpflowQNN``"
msgstr "Classification avec ``OpflowQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:16
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:297
msgid "Classification with a ``CircuitQNN``"
msgstr "Classification avec ``CircuitQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:17
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:463
msgid "Variational Quantum Classifier (``VQC``)"
msgstr "Classifieur Variationnel Quantique (VQC)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:19
msgid "`Regression <#Regression>`__"
msgstr "`Régression <#Regression>` __"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:21
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:621
msgid "Regression with an ``OpflowQNN``"
msgstr "Régression avec ``OpflowQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:22
msgid "Variational Quantum Regressor (``VQR``)"
msgstr "Régresseur Variationnel Quantique (``VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:72
msgid "Classification"
msgstr "Classification"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:74
msgid "We prepare a simple classification dataset to illustrate the following algorithms."
msgstr "Nous préparons un ensemble de données de classification simple pour illustrer les algorithmes suivants."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:119
msgid "Classification with the an ``OpflowQNN``"
msgstr "Classification avec ``OpflowQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:121
msgid "First we show how an ``OpflowQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``OpflowQNN`` is expected to return one-dimensional output in :math:`[-1, +1]`. This only works for binary classification and we assign the two classes to :math:`\\{-1, +1\\}`. For convenience, we use the ``TwoLayerQNN``, which is a special type of ``OpflowQNN`` defined via a feature map and an ansatz."
msgstr "Premièrement, nous montrons comment ``OpflowQNN`` peut être utilisé pour la classification dans un ``NeuralNetworkClassifier``. Dans ce contexte, ``OpflowQNN`` est censé renvoyer une sortie unidimensionnelle dans :math:`[ -1, + 1 ]`. Cela ne fonctionne que pour la classification binaire et nous affectons les deux classes à :math:` \\{ -1, + 1\\}`. Pour plus de commodité, nous utilisons le ``TwoLayerQNN``, qui est un type spécial de ``OpflowQNN`` défini via une carte de features et un ansatz."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:174
msgid "We will add a callback function called ``callback_graph``. This will be called for each iteration of the optimizer and will be passed two parameters: the current weights and the value of the objective function at those weights. For our function, we append the value of the objective function to an array so we can plot iteration versus objective function value and update the graph with each iteration. However, you can do whatever you want with a callback function as long as it gets the two parameters mentioned passed."
msgstr "Nous allons ajouter une fonction de rappel appelée ``callback_graph``. Elle sera appelée pour chaque itération de l'optimiseur et recevra deux paramètres : les poids actuels et la valeur de la fonction objectif à ces pondérations. Pour notre fonction, nous ajoutons la valeur de la fonction objectif à un tableau pour que nous puissions tracer la valeur de l'itération par rapport à la fonction objectif et mettre à jour le graphe avec chaque itération. Cependant, vous pouvez faire ce que vous voulez avec une fonction de rappel tant qu'elle obtient les deux paramètres mentionnés."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:299
msgid "Next we show how a ``CircuitQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``CircuitQNN`` is expected to return :math:`d`-dimensional probability vector as output, where :math:`d` denotes the number of classes. Sampling from a ``QuantumCircuit`` automatically results in a probability distribution and we just need to define a mapping from the measured bitstrings to the different classes. For binary classification we use the parity mapping."
msgstr "Ensuite, nous montrons comment ``CircuitQNN`` peut être utilisé pour la classification à l'intérieur d'un ``NeuralNetworkClassifier``. Dans ce contexte, le ``CircuitQNN`` est censé renvoyer le vecteur de probabilité :math:`d`-dimensionnel comme sortie, où :math:`d` indique le nombre de classes. L'échantillonnage d'un ``QuantumCircuit`` donne automatiquement lieu à une distribution de probabilité et il suffit de définir une correspondance entre les chaînes de bits mesurées et les différentes classes. Pour la classification binaire, nous utilisons la correspondance de parité."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:465
msgid "The ``VQC`` is a special variant of the ``NeuralNetworkClassifier`` with a ``CircuitQNN``. It applies a parity mapping (or extensions to multiple classes) to map from the bitstring to the classification, which results in a probability vector, which is interpreted as a one-hot encoded result. By default, it applies this the ``CrossEntropyLoss`` function that expects labels given in one-hot encoded format and will return predictions in that format too."
msgstr "``VQC`` est une variante spéciale de ``NeuralNetworkClassifier`` avec un ``CircuitQNN``. Il applique une correspondance de parité (ou des extensions à plusieurs classes) pour mapper la chaîne de bits à la classification, ce qui donne lieu à un vecteur de probabilité, qui est interprété comme un résultat codé à chaud. Par défaut, il applique la fonction ``CrossEntropyLoss`` qui attend les étiquettes données en un format codé à chaud et qui renverra également les prédictions dans ce format."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:578
msgid "Regression"
msgstr "Régression"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:580
msgid "We prepare a simple regression dataset to illustrate the following algorithms."
msgstr "Nous préparons un ensemble de données de régression simple pour illustrer les algorithmes suivants."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:623
msgid "Here we restrict to regression with an ``OpflowQNN`` that returns values in :math:`[-1, +1]`. More complex and also multi-dimensional models could be constructed, also based on ``CircuitQNN`` but that exceeds the scope of this tutorial."
msgstr "Ici, nous limitons à la régression avec ``OpflowQNN`` qui renvoie des valeurs dans :math:`[ -1, +1]`. Des modèles plus complexes et aussi multidimensionnels pourraient être construits, également basés sur ``CircuitQNN`` mais cela dépasse la cadre de ce tutoriel."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:747
msgid "Regression with the Variational Quantum Regressor (``VQR``)"
msgstr "Régression avec le Régresseur Quantique Variationnel (``VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:749
msgid "Similar to the ``VQC`` for classification, the ``VQR`` is a special variant of the ``NeuralNetworkRegressor`` with a ``OpflowQNN``. By default it considers the ``L2Loss`` function to minimize the mean squared error between predictions and targets."
msgstr "A l'instar du ``VQC`` pour la classification, le ``VQR`` est une variante spéciale de ``NeuralNetworkRegressor`` avec un ``OpflowQNN``. Par défaut, il considère la fonction ``L2Loss`` pour minimiser l'erreur quadratique moyenne entre les prédictions et les cibles."

