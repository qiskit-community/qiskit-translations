msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-29 17:32+0000\n"
"PO-Revision-Date: 2022-04-29 17:50\n"
"Last-Translator: \n"
"Language-Team: Greek\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: el\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/01_neural_networks.po\n"
"X-Crowdin-File-ID: 9628\n"
"Language: el_GR\n"

#: ../../tutorials/01_neural_networks.ipynb:9
msgid "This page was generated from `docs/tutorials/01_neural_networks.ipynb`__."
msgstr ""

#: ../../tutorials/01_neural_networks.ipynb:9
msgid "Quantum Neural Networks"
msgstr "Κβαντικά Νευρωνικά Δίκτυα"

#: ../../tutorials/01_neural_networks.ipynb:11
msgid "This notebook demonstrates the different generic quantum neural network (QNN) implementations provided in Qiskit Machine Learning. The networks are meant as application-agnostic computational units that can be used for many different use cases. Depending on the application, a particular type of network might more or less suitable and might require to be set up in a particular way. The following different available neural networks will now be discussed in more detail:"
msgstr "Αυτό το σημειωματάριο επιδεικνύει τις διάφορες γενικές υλοποιήσεις κβαντικού νευρικού δικτύου (quantum neural network, QNN) που παρέχονται στο Qiskit Machine Learning. Τα δίκτυα προορίζονται ως εφαρμογές-agnostic υπολογιστικές μονάδες που μπορούν να χρησιμοποιηθούν για πολλές διαφορετικές περιπτώσεις χρήσης. Ανάλογα με την εφαρμογή, ένας συγκεκριμένος τύπος δικτύου μπορεί να είναι περισσότερο ή λιγότερο κατάλληλος και μπορεί να χρειαστεί να δημιουργηθεί με συγκεκριμένο τρόπο. Τα ακόλουθα διαφορετικά διαθέσιμα νευρωνικά δίκτυα θα συζητηθούν με περισσότερες λεπτομέρειες:"

#: ../../tutorials/01_neural_networks.ipynb:13
msgid "``NeuralNetwork``: The interface for neural networks."
msgstr "\"NeuralNetwork\": Η διεπαφή για τα νευρωνικά δίκτυα."

#: ../../tutorials/01_neural_networks.ipynb:14
msgid "``OpflowQNN``: A network based on the evaluation of quantum mechanical observables."
msgstr "``OpflowQNN``: Ένα δίκτυο βασισμένο στην αξιολόγηση κβαντικών μηχανικών παρατηρήσεων."

#: ../../tutorials/01_neural_networks.ipynb:15
msgid "``TwoLayerQNN``: A special ``OpflowQNN`` implementation for convenience."
msgstr "\" ` TwoLayerQNN ` `: Μια ειδική υλοποίηση ` ` OpflowQNN ` ` για ευκολία."

#: ../../tutorials/01_neural_networks.ipynb:16
msgid "``CircuitQNN``: A network based on the samples resulting from measuring a quantum circuit."
msgstr "``CircuitQNN``: Ένα δίκτυο βασισμένο στα δείγματα που προκύπτουν από τη μέτρηση ενός κβαντικού κυκλώματος."

#: ../../tutorials/01_neural_networks.ipynb:66
msgid "1. ``NeuralNetwork``"
msgstr "1. ` ` ` ` NeuralNetwork ` `"

#: ../../tutorials/01_neural_networks.ipynb:68
msgid "The ``NeuralNetwork`` represents the interface for all neural networks available in Qiskit Machine Learning. It exposes a forward and a backward pass taking the data samples and trainable weights as input. A ``NeuralNetwork`` does not contain any training capabilities, these are pushed to the actual algorithms / applications. Thus, a ``NeuralNetwork`` also does not store the values for trainable weights. In the following, different implementations of this interfaces are introduced."
msgstr "Το ` ` NeuralNetwork ` ` αντιπροσωπεύει τη διεπαφή για όλα τα νευρωνικά δίκτυα διαθέσιμα στο Qiskit Machine Learning. Εκθέτει ένα προς τα εμπρός και ένα προς τα πίσω πέρασμα λαμβάνοντας τα δείγματα δεδομένων και τα εφαρμόσιμα βάρη ως είσοδο. Ένα ` ` NeuralNetwork ` ` δεν περιέχει εκπαιδευτικές δυνατότητες, αυτές προωθούνται στους πραγματικούς αλγορίθμους/εφαρμογές. Έτσι, ένα \"NeuralNetwork `\" επίσης δεν αποθηκεύει τις τιμές για εφαρμόσιμα βάρη. Στις ακόλουθες περιπτώσεις, εισάγονται διαφορετικές υλοποιήσεις των διεπαφών."

#: ../../tutorials/01_neural_networks.ipynb:70
msgid "Suppose a ``NeuralNetwork`` called ``nn``. Then, the ``nn.forward(input, weights)`` pass takes either flat inputs for the data and weights of size ``nn.num_inputs`` and ``nn.num_weights``, respectively. ``NeuralNetwork`` supports batching of inputs and returns batches of output of the corresponding shape."
msgstr "Ας υποθέσουμε ότι ένα ``NeuralNetwork`` ονομάζεται ``nn``. Στη συνέχεια, το ``nn.forward(input, weights)`` περνά είτε επίπεδες εισόδους για τα δεδομένα και τα βάρη του μεγέθους ``nn. um_inputs`` και ``nn.num_weights```, αντίστοιχα. ``NeuralNetwork`` υποστηρίζει παρτίδες εισόδου και επιστρέφει παρτίδες εξόδου του αντίστοιχου σχήματος."

#: ../../tutorials/01_neural_networks.ipynb:82
msgid "2. ``OpflowQNN``"
msgstr "2. ``OpflowQNN``"

#: ../../tutorials/01_neural_networks.ipynb:84
msgid "The ``OpflowQNN`` takes a (parametrized) operator from Qiskit and leverages Qiskit’s gradient framework to provide the backward pass. Such an operator can for instance be an expected value of a quantum mechanical observable with respect to a parametrized quantum state. The Parameters can be used to load classical data as well as represent trainable weights. The ``OpflowQNN`` also allows lists of operators and more complex structures to construct more complex QNNs."
msgstr "Ο ``OpflowQNN`` παίρνει έναν (παραμετροποιημένο) χειριστή από το Qiskit και αξιοποιεί το πλαίσιο διαβάθμισης του Qiskit για να παρέχει το πίσω πέρασμα. Ένας τέτοιος χειριστής μπορεί για παράδειγμα να είναι μια αναμενόμενη τιμή ενός κβαντικού μηχανικού παρατηρούμενου σε σχέση με μια παραμετροποιημένη κβαντική κατάσταση. Οι παράμετροι μπορούν να χρησιμοποιηθούν για τη φόρτωση κλασικών δεδομένων καθώς και για την αναπαράσταση εκπαιδεύσιμων βαρών. Το ``OpflowQNN`` επιτρέπει επίσης λίστες χειριστών και πιο σύνθετες δομές για την κατασκευή πιο σύνθετων QNN."

#: ../../tutorials/01_neural_networks.ipynb:351
msgid "Combining multiple observables in a ``ListOp`` also allows to create more complex QNNs"
msgstr ""

#: ../../tutorials/01_neural_networks.ipynb:450
msgid "3. ``TwoLayerQNN``"
msgstr "3. ``TwoLayerQNN``"

#: ../../tutorials/01_neural_networks.ipynb:452
msgid "The ``TwoLayerQNN`` is a special ``OpflowQNN`` on :math:`n` qubits that consists of first a feature map to insert data and second an ansatz that is trained. The default observable is :math:`Z^{\\otimes n}`, i.e., parity."
msgstr "Το ` ` ` TwoLayerQNN ` ` είναι ένα ειδικό ` ` OpflowQNN ` ` σε :math:` n ` qubits που αποτελείται από ένα χάρτη χαρακτηριστικών για την εισαγωγή δεδομένων και τη δεύτερη ansatz που εκπαιδεύεται. Η προεπιλεγμένη τιμή είναι :math:` Z ^ {\\oφορές n} `, δηλαδή, ισοτιμία."

#: ../../tutorials/01_neural_networks.ipynb:663
msgid "4. ``CircuitQNN``"
msgstr "4. ``CircuitQNN``"

#: ../../tutorials/01_neural_networks.ipynb:665
msgid "The ``CircuitQNN`` is based on a (parametrized) ``QuantumCircuit``. This can take input as well as weight parameters and produces samples from the measurement. The samples can either be interpreted as probabilities of measuring the integer index corresponding to a bitstring or directly as a batch of binary output. In the case of probabilities, gradients can be estimated efficiently and the ``CircuitQNN`` provides a backward pass as well. In case of samples, differentiation is not possible and the backward pass returns ``(None, None)``."
msgstr ""

#: ../../tutorials/01_neural_networks.ipynb:668
msgid "Further, the ``CircuitQNN`` allows to specify an ``interpret`` function to post-process the samples. This is expected to take a measured integer (from a bitstring) and map it to a new index, i.e. non-negative integer. In this case, the output shape needs to be provided and the probabilities are aggregated accordingly."
msgstr ""

#: ../../tutorials/01_neural_networks.ipynb:670
msgid "A ``CircuitQNN`` can be configured to return sparse as well as dense probability vectors. If no ``interpret`` function is used, the dimension of the probability vector scales exponentially with the number of qubits and a sparse recommendation is usually recommended. In case of an ``interpret`` function it depends on the expected outcome. If, for instance, an index is mapped to the parity of the corresponding bitstring, i.e., to 0 or 1, a dense output makes sense and the result will be a probability vector of length 2."
msgstr ""

#: ../../tutorials/01_neural_networks.ipynb:713
msgid "4.1 Output: sparse integer probabilities"
msgstr "4.1 Έξοδος: αραιές ακέραιες πιθανότητες"

#: ../../tutorials/01_neural_networks.ipynb:818
msgid "4.2 Output: dense parity probabilities"
msgstr "4.2 Έξοδος: πυκνές πιθανότητες ισοτιμίας"

#: ../../tutorials/01_neural_networks.ipynb:939
msgid "4.3 Output: Samples"
msgstr "4.3 Έξοδος: Δείγματα"

#: ../../tutorials/01_neural_networks.ipynb:1071
msgid "4.4 Output: Parity Samples"
msgstr "4.4 Έξοδος: Δείγματα ισοτιμίας"

