msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-24 12:38+0000\n"
"PO-Revision-Date: 2021-08-24 13:24\n"
"Last-Translator: \n"
"Language-Team: German\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: de\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/02_neural_network_classifier_and_regressor.po\n"
"X-Crowdin-File-ID: 9630\n"
"Language: de_DE\n"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "This page was generated from `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__."
msgstr ""

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "Neural Network Classifier & Regressor"
msgstr "Neuronales-Netzwerk-Klassifikator & -Regressor"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:11
msgid "In this tutorial we show how the ``NeuralNetworkClassifier`` and ``NeuralNetworkRegressor`` are used. Both take as an input a (Quantum) ``NeuralNetwork`` and leverage it in a specific context. In both cases we also provide a pre-configured variant for convenience, the Variational Quantum Classifier (``VQC``) and Variational Quantum Regressor (``VQR``). The tutorial is structured as follows:"
msgstr "In diesem Tutorial zeigen wir, wie ``NeuralNetworkClassifier`` und ``NeuralNetworkRegressor`` verwendet werden. Beide nehmen als Input ein (Quantum) ``NeuralNetwork`` und nutzen es in einem bestimmten Kontext. In beiden Fällen bieten wir auch praktische, vorkonfigurierte Varianten an, den Variational-Quantum-Classifier (``VQC``) und Variational-Quantum-Regressor (``VQR``). Das Tutorial ist wie folgt strukturiert:"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:13
msgid "`Classification <#Classification>`__"
msgstr "` Klassifikation <#Classification> ` __"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:15
msgid "Classification with an ``OpflowQNN``"
msgstr "Klassifikation mit einem ``OpflowQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:16
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:249
msgid "Classification with a ``CircuitQNN``"
msgstr "Klassifikation mit einem ``CircuitQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:17
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:398
msgid "Variational Quantum Classifier (``VQC``)"
msgstr "Variationaler Quantenregressor (``VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:19
msgid "`Regression <#Regression>`__"
msgstr "`Regression <#Regression>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:21
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:539
msgid "Regression with an ``OpflowQNN``"
msgstr "Regression mit einem ``OpflowQN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:22
msgid "Variational Quantum Regressor (``VQR``)"
msgstr "Variationaler Quantenregressor (``VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:70
msgid "Classification"
msgstr ""

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:72
msgid "We prepare a simple classification dataset to illustrate the following algorithms."
msgstr "Wir bereiten einen einfachen Klassifikationsdatensatz vor, um die folgenden Algorithmen zu veranschaulichen."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:117
msgid "Classification with the an ``OpflowQNN``"
msgstr "Klassifikation mit einem ``OpflowQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:119
msgid "First we show how an ``OpflowQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``OpflowQNN`` is expected to return one-dimensional output in :math:`[-1, +1]`. This only works for binary classification and we assign the two classes to :math:`\\{-1, +1\\}`. For convenience, we use the ``TwoLayerQNN``, which is a special type of ``OpflowQNN`` defined via a feature map and an ansatz."
msgstr "Zuerst zeigen wir, wie ein ``OpflowQN`` zur Klassifizierung innerhalb eines ``NeuralNetworkClassifier`` verwendet werden kann. In diesem Zusammenhang wird erwartet, dass der ``OpflowQN`` eindimensionale Ausgabe in :math:`[-1, +1]` zurückgibt. Dies funktioniert nur für die binäre Klassifikation und wir weisen die beiden Klassen :math:`\\{-1, +1\\}` zu. Wegen der Bequemlichkeit verwenden wir den ``TwoLayerQNN``, ein spezieller Typ von ``OpflowQN``, der über eine Feature-Map und einen Ansatz definiert ist."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:251
msgid "Next we show how a ``CircuitQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``CircuitQNN`` is expected to return :math:`d`-dimensional probability vector as output, where :math:`d` denotes the number of classes. Sampling from a ``QuantumCircuit`` automatically results in a probability distribution and we just need to define a mapping from the measured bitstrings to the different classes. For binary classification we use the parity mapping."
msgstr "Als nächstes zeigen wir, wie ein ``CircuitQNN`` zur Klassifizierung innerhalb eines ``NeuralNetworkClassifier`` verwendet werden kann. In diesem Zusammenhang wird erwartet, dass der ``CircuitQNN`` :math:`d`-dimensionale Wahrscheinlichkeitsvektoren als Ausgabe zurückgibt, wobei :math:`d` die Anzahl der Klassen angibt. Sampling eines ``QuantumCircuit`` führt automatisch zu einer Wahrscheinlichkeitsverteilung und wir müssen nur die Zuordnung der gemessenen Bitstrings zu den verschiedenen Klassen definieren. Für die Binärklassifikation verwenden wir die Paritätsabbildung."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:400
msgid "The ``VQC`` is a special variant of the ``NeuralNetworkClassifier`` with a ``CircuitQNN``. It applies a parity mapping (or extensions to multiple classes) to map from the bitstring to the classification, which results in a probability vector, which is interpreted as a one-hot encoded result. By default, it applies this the ``CrossEntropyLoss`` function that expects labels given in one-hot encoded format and will return predictions in that format too."
msgstr "Der ``VQC`` ist eine spezielle Variante des ``NeuralNetworkClassifier`` mit einem ``CircuitQNN``. Es wird eine Paritätsabbildung (oder Erweiterungen für mehrere Klassen) verwendet, die den Bitstring auf die Klasse abbilden, was zu einem Wahrscheinlichkeitsvektor führt, der als ein one-hot-kodiertes Ergebnis interpretiert wird. Standardmäßig wird hierfür die ``CrossEntropyLoss``-Funktion angewendet, die Labels in one-hot-kodiertem Format erwartet und auch Vorhersagen in diesem Format zurückgibt."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:496
msgid "Regression"
msgstr ""

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:498
msgid "We prepare a simple regression dataset to illustrate the following algorithms."
msgstr "Wir bereiten einen einfachen Regressionsdatensatz vor, um die folgenden Algorithmen zu veranschaulichen."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:541
msgid "Here we restrict to regression with an ``OpflowQNN`` that returns values in :math:`[-1, +1]`. More complex and also multi-dimensional models could be constructed, also based on ``CircuitQNN`` but that exceeds the scope of this tutorial."
msgstr "Hier beschränken wir uns auf Regression mit einem ``OpflowQNN`` der Werte in :math:`[-1, +1]` zurückgibt. Komplexere und auch mehrdimensionale Modelle könnten mit ``CircuitQNN`` ebenfalls konstruiert werden, aber das ginge über den Rahmen dieses Tutorials hinaus."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:648
msgid "Regression with the Variational Quantum Regressor (``VQR``)"
msgstr "Regression mit dem Variationalen Quantenregressor (``VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:650
msgid "Similar to the ``VQC`` for classification, the ``VQR`` is a special variant of the ``NeuralNetworkRegressor`` with a ``OpflowQNN``. By default it considers the ``L2Loss`` function to minimize the mean squared error between predictions and targets."
msgstr "Ähnlich wie der ``VQC`` für die Klassifizierung, ist der ``VQR`` eine spezielle Variante des ``NeuralNetworkRegressor`` mit einem ``OpflowQNN``. Standardmäßig verwendet es die ``L2Loss``-Funktion, um den mittleren quadrierten Fehler zwischen Vorhersagen und Zielen zu minimieren."

