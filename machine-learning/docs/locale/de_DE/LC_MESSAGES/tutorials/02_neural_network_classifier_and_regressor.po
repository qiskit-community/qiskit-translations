msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-09 10:21+0000\n"
"PO-Revision-Date: 2023-08-14 19:15\n"
"Last-Translator: \n"
"Language: de\n"
"Language-Team: German\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: de\n"
"X-Crowdin-File: /main/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/02_neural_network_classifier_and_regressor.po\n"
"X-Crowdin-File-ID: 9630\n"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "This page was generated from `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__."
msgstr "Diese Seite wurde aus ` docs/tutorials/02_neural_network_classifier_and_regressor.ipynb ` __ generiert."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "Neural Network Classifier & Regressor"
msgstr "Neuronales-Netzwerk-Klassifikator & -Regressor"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:11
msgid "In this tutorial we show how the ``NeuralNetworkClassifier`` and ``NeuralNetworkRegressor`` are used. Both take as an input a (Quantum) ``NeuralNetwork`` and leverage it in a specific context. In both cases we also provide a pre-configured variant for convenience, the Variational Quantum Classifier (``VQC``) and Variational Quantum Regressor (``VQR``). The tutorial is structured as follows:"
msgstr "In diesem Tutorial zeigen wir, wie ``NeuralNetworkClassifier`` und ``NeuralNetworkRegressor`` verwendet werden. Beide nehmen als Input ein (Quantum) ``NeuralNetwork`` und nutzen es in einem bestimmten Kontext. In beiden Fällen bieten wir auch praktische, vorkonfigurierte Varianten an, den Variational-Quantum-Classifier (``VQC``) und Variational-Quantum-Regressor (``VQR``). Das Tutorial ist wie folgt strukturiert:"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:13
msgid "`Classification <#Classification>`__"
msgstr "` Klassifikation <#Classification> ` __"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:15
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:104
msgid "Classification with an ``EstimatorQNN``"
msgstr "Klassifikation mit einem ``EstimatorQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:16
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:380
msgid "Classification with a ``SamplerQNN``"
msgstr "Klassifikation mit einem ``SamplerQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:17
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:600
msgid "Variational Quantum Classifier (``VQC``)"
msgstr "Variationaler Quantenregressor (``VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:19
msgid "`Regression <#Regression>`__"
msgstr "`Regression <#Regression>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:21
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:1048
msgid "Regression with an ``EstimatorQNN``"
msgstr "Regression mit einem ``EstimatorQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:22
msgid "Variational Quantum Regressor (``VQR``)"
msgstr "Variationaler Quantenregressor (``VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:57
msgid "Classification"
msgstr "Klassifikation"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:59
msgid "We prepare a simple classification dataset to illustrate the following algorithms."
msgstr "Wir bereiten einen einfachen Klassifikationsdatensatz vor, um die folgenden Algorithmen zu veranschaulichen."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:106
msgid "First we show how an ``EstimatorQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``EstimatorQNN`` is expected to return one-dimensional output in :math:`[-1, +1]`. This only works for binary classification and we assign the two classes to :math:`\\{-1, +1\\}`."
msgstr "Zuerst zeigen wir, wie ein ``EstimatorQNN`` zur Klassifizierung innerhalb eines ``NeuralNetworkClassifier`` verwendet werden kann. In diesem Zusammenhang wird erwartet, dass der ``EstimatorQNN`` eindimensionale Ausgabe in :math:`[-1, +1]` zurückgibt. Dies funktioniert nur für die binäre Klassifikation und wir weisen die beiden Klassen :math:`\\{-1, +1\\}` zu."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:142
msgid "Create a quantum neural network"
msgstr "Erstelle ein neuronales Quantenetzwerk"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:201
msgid "We will add a callback function called ``callback_graph``. This will be called for each iteration of the optimizer and will be passed two parameters: the current weights and the value of the objective function at those weights. For our function, we append the value of the objective function to an array so we can plot iteration versus objective function value and update the graph with each iteration. However, you can do whatever you want with a callback function as long as it gets the two parameters mentioned passed."
msgstr "Wir fügen eine Callback-Funktion mit dem Namen ` ` callback_graph ` ` hinzu. Diese wird bei jeder Iteration des Optimierungsprogramms aufgerufen und bekommt zwei Parameter übergeben: die aktuellen Gewichte und den Wert der Zielfunktion bei diesen Gewichte. Für unsere Funktion hängen wir den Wert der Zielfunktion an ein Array an, so dass wir Iteration gegen die Zielfunktionswerte plotten können und die Grafik mit jeder Iteration aktualisieren können. Mit einer Callback-Funktion können Sie jedoch tun was Sie wollen, solange die beiden genannten Parameter übergeben werden."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:330
msgid "Now, when the model is trained, we can explore the weights of the neural network. Please note, the number of weights is defined by ansatz."
msgstr "Nun, wenn das Modell trainiert ist, können wir die Gewichte des neuronalen Netzwerks erforschen. Bitte beachte, dass die Anzahl der Gewichte durch den Ansatz definiert ist."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:382
msgid "Next we show how a ``SamplerQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``SamplerQNN`` is expected to return :math:`d`-dimensional probability vector as output, where :math:`d` denotes the number of classes. The underlying ``Sampler`` primitive returns quasi-distributions of bit strings and we just need to define a mapping from the measured bitstrings to the different classes. For binary classification we use the parity mapping."
msgstr "Als nächstes zeigen wir, wie ein ``SamplerQNN`` zur Klassifizierung innerhalb eines ``NeuralNetworkClassifier`` verwendet werden kann. In diesem Zusammenhang wird erwartet, dass der ``SamplerQNN`` :math:`d`-dimensionale Wahrscheinlichkeitsvektoren als Ausgabe zurückgibt, wobei :math:`d` die Anzahl der Klassen angibt. Die zugrunde liegende ``Sampler`` primitive gibt Quasi-Distributionen von Bit-Strings zurück und wir müssen nur ein Mapping von den gemessenen Bitstrings zu den verschiedenen Klassen definieren. Für die Binärklassifizierung verwenden wir das Paritätsmapping."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:553
msgid "Again, once the model is trained we can take a look at the weights. As we set ``reps=1`` explicitly in our ansatz, we can see less parameters than in the previous model."
msgstr "Wieder einmal können wir uns die Gewichte ansehen, sobald das Modell trainiert ist. Da wir ``reps=1`` explizit in unserem Ansatz, gesetzt haben, können wir weniger Parameter sehen als im vorherigen Modell."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:602
msgid "The ``VQC`` is a special variant of the ``NeuralNetworkClassifier`` with a ``SamplerQNN``. It applies a parity mapping (or extensions to multiple classes) to map from the bitstring to the classification, which results in a probability vector, which is interpreted as a one-hot encoded result. By default, it applies this the ``CrossEntropyLoss`` function that expects labels given in one-hot encoded format and will return predictions in that format too."
msgstr "Der ``VQC`` ist eine spezielle Variante des ``NeuralNetworkClassifier`` mit einem ``SamplerQNN``. Es wird eine Paritätsabbildung (oder Erweiterungen für mehrere Klassen) verwendet, die den Bitstring auf die Klasse abbilden, was zu einem Wahrscheinlichkeitsvektor führt, der als ein one-hot-kodiertes Ergebnis interpretiert wird. Standardmäßig wird hierfür die ``CrossEntropyLoss``-Funktion angewendet, die Labels in one-hot-kodiertem Format erwartet und auch Vorhersagen in diesem Format zurückgibt."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:721
msgid "Multiple classes with VQC"
msgstr "Mehrere Klassen mit VQC"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:723
msgid "In this section we generate an artificial dataset that contains samples of three classes and show how to train a model to classify this dataset. This example shows how to tackle more interesting problems in machine learning. Of course, for a sake of short training time we prepare a tiny dataset. We employ ``make_classification`` from SciKit-Learn to generate a dataset. There 10 samples in the dataset, 2 features, that means we can still have a nice plot of the dataset, as well as no redundant features, these are features are generated as a combinations of the other features. Also, we have 3 different classes in the dataset, each classes one kind of centroid and we set class separation to ``2.0``, a slight increase from the default value of ``1.0`` to ease the classification problem."
msgstr "In diesem Abschnitt generieren wir einen künstlichen Datensatz, der Stichproben von drei Klassen enthält und zeigt, wie man ein Modell für die Klassifizierung dieses Datensatzes trainiert. Dieses Beispiel zeigt, wie man interessantere Probleme im maschinellen Lernen angeht. Natürlich bereiten wir für eine kurze Trainingszeit einen kleinen Datensatz vor. Wir verwenden ``make_classification`` von SciKit-Learn um einen Datensatz zu generieren. Es gibt 10 Beispiele im Datensatz und 2 Features, das bedeutet, dass wir noch eine schöne Abbildung des Datensatzes haben können, sowie keine redundanten Features. Das sind Features, wleche als Kombination der anderen Features generiert werden. Außerdem haben wir 3 verschiedene Klassen im Datensatz, jede Klasse hat einen Schwerpunkt und wir setzen die Klassentrennung auf ``2. ``, eine leichte Erhöhung gegenüber dem Standardwert von ``1.0`` um das Klassifizierungsproblem zu vereinfachen."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:726
msgid "Once the dataset is generated we scale the features into the range ``[0, 1]``."
msgstr "Sobald der Datensatz erstellt wurde, skalieren wir die Funktionen in den Bereich ``[0, 1]``."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:759
msgid "Let's see how our dataset looks like."
msgstr ""

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:814
msgid "We also transform labels and make them categorical."
msgstr "Wir transformieren auch Labels und machen sie kategorisch."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:863
msgid "We create an instance of ``VQC`` similar to the previous example, but in this case we pass a minimal set of parameters. Instead of feature map and ansatz we pass just the number of qubits that is equal to the number of features in the dataset, an optimizer with a low number of iteration to reduce training time, a quantum instance, and a callback to observe progress."
msgstr "Wir erstellen eine Instanz von ``VQC`` ähnlich dem vorherigen Beispiel, aber in diesem Fall übergeben wir einen minimalen Satz an Parametern. Anstelle von Merkmalskarte und Ansatz übergeben wir nur die Anzahl der Qubits, die der Anzahl der Features im Datensatz entspricht, einen Optimierer mit einer geringen Anzahl von Iterationen um die Trainingszeit zu verkleinern, eine Quanteninstanz und einen Callback, um den Fortschritt zu beobachten."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:888
msgid "Start the training process in the same way as in previous examples."
msgstr "Starte den Trainingsprozess in der gleichen Weise wie in den vorherigen Beispielen."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:954
msgid "Despite we had the low number of iterations, we achieved quite a good score. Let see the output of the ``predict`` method and compare the output with the ground truth."
msgstr "Trotz der geringen Anzahl von Wiederholungen haben wir eine recht gute Punktzahl erreicht. Lass die Ausgabe der ``predict`` Methode sehen und die Ausgabe mit der Grundwahrheit zu vergleichen."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:1005
msgid "Regression"
msgstr "Regression"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:1007
msgid "We prepare a simple regression dataset to illustrate the following algorithms."
msgstr "Wir bereiten einen einfachen Regressionsdatensatz vor, um die folgenden Algorithmen zu veranschaulichen."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:1050
msgid "Here we restrict to regression with an ``EstimatorQNN`` that returns values in :math:`[-1, +1]`. More complex and also multi-dimensional models could be constructed, also based on ``SamplerQNN`` but that exceeds the scope of this tutorial."
msgstr "Hier beschränken wir uns auf Regression mit einem ``EstimatorQNN`` der Werte in :math:`[-1, +1]` zurückgibt. Komplexere und auch mehrdimensionale Modelle könnten mit ``SamplerQNN`` ebenfalls konstruiert werden, aber das ginge über den Rahmen dieses Tutorials hinaus."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:1187
msgid "Similarly to the classification models, we can obtain an array of trained weights by querying a corresponding property of the model. In this model we have only one parameter defined as ``param_y`` above."
msgstr "Ähnlich wie bei den Klassifikationsmodellen können wir eine Reihe von trainierten Gewichten erhalten, indem wir eine entsprechende Eigenschaft des Modells abfragen. In diesem Modell haben wir nur einen Parameter, oben definiert als ``param_y``."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:1234
msgid "Regression with the Variational Quantum Regressor (``VQR``)"
msgstr "Regression mit dem Variationalen Quantenregressor (``VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:1236
msgid "Similar to the ``VQC`` for classification, the ``VQR`` is a special variant of the ``NeuralNetworkRegressor`` with a ``EstimatorQNN``. By default it considers the ``L2Loss`` function to minimize the mean squared error between predictions and targets."
msgstr "Ähnlich wie der ``VQC`` für die Klassifizierung, ist der ``VQR`` eine spezielle Variante des ``NeuralNetworkRegressor`` mit einem ``EstimatorQNN``. Standardmäßig verwendet es die ``L2Loss``-Funktion, um die mittlere quadratische Abweichung zwischen Vorhersagen und Zielwerte zu minimieren."

