msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-09 10:21+0000\n"
"PO-Revision-Date: 2023-06-17 05:11\n"
"Last-Translator: \n"
"Language: te\n"
"Language-Team: Telugu\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: te\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/migration/01_migration_guide_0.5.po\n"
"X-Crowdin-File-ID: 9879\n"

#: ../../migration/01_migration_guide_0.5.ipynb:9
msgid "This page was generated from `docs/migration/01_migration_guide_0.5.ipynb`__."
msgstr "ఈ పేజీ `docs/migration/01_migration_guide_0.5.ipynb`__ నుండి రూపొందించబడింది."

#: ../../migration/01_migration_guide_0.5.ipynb:9
msgid "Qiskit Machine Learning v0.5 Migration Guide"
msgstr "Qiskit మెషిన్ లెర్నింగ్ v0.5 మైగ్రేషన్ గైడ్"

#: ../../migration/01_migration_guide_0.5.ipynb:11
msgid "This tutorial will guide you through the process of migrating your code from Qiskit Machine Learning v0.4 to v0.5."
msgstr "ఈ ట్యుటోరియల్ మీ కోడ్‌ని Qiskit మెషిన్ లెర్నింగ్ v0.4 నుండి v0.5కి మార్చే ప్రక్రియ ద్వారా మీకు మార్గనిర్దేశం చేస్తుంది."

#: ../../migration/01_migration_guide_0.5.ipynb:14
msgid "Introduction"
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:16
msgid "The main focus of the 0.5 release of Qiskit Machine Learning is the migration of the base computational blocks like quantum kernels and quantum neural networks to the primitives introduced in Qiskit as well as extended support of the primitives in the algorithms."
msgstr "Qiskit మెషిన్ లెర్నింగ్ యొక్క 0.5 విడుదల యొక్క ప్రధాన దృష్టి క్వాంటం కెర్నలు మరియు క్వాంటం న్యూరల్ నెట్‌వర్క్‌ల వంటి బేస్ కంప్యూటేషనల్ బ్లాక్‌లను Qiskitలో ప్రవేశపెట్టిన ప్రిమ్మిటివ్స్లకు అలాగే అల్గారిథమ్‌లలోని ప్రిమ్మిటివ్స్ల యొక్క విస్తృతమైన మద్దతుగా మార్చడం."

#: ../../migration/01_migration_guide_0.5.ipynb:18
msgid "Contents:"
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:20
#: ../../migration/01_migration_guide_0.5.ipynb:26
msgid "Overview of the primitives"
msgstr "ప్రిమ్మిటివ్స్ యొక్క ఓవర్వ్యూ"

#: ../../migration/01_migration_guide_0.5.ipynb:21
#: ../../migration/01_migration_guide_0.5.ipynb:54
msgid "New quantum kernel"
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:22
#: ../../migration/01_migration_guide_0.5.ipynb:428
msgid "New quantum neural networks"
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:23
#: ../../migration/01_migration_guide_0.5.ipynb:1126
msgid "Other notable deprecation"
msgstr "ఇతర ముఖ్యమైన నిరాకరణ"

#: ../../migration/01_migration_guide_0.5.ipynb:28
msgid "The core capability of quantum computers that sets them apart from from classical computers is their ability to generate non-classical probability distributions at their outputs. The native operations that one can do with a probability distribution is to sample from it or to estimate quantities on it. Consequently, these operations of sampling and estimating form the fundamental building blocks of quantum algorithm development. Thus, as it was `announced <https://research.ibm.com/blog/qiskit-runtime-for-useful-quantum-computing>`__, two basic primitives were introduced, Sampler and Estimator, respectively, that implement these two operations:"
msgstr "క్లాసికల్ కంప్యూటర్‌ల నుండి క్వాంటం కంప్యూటర్‌లని వేరు చేసే ప్రధాన సామర్థ్యం వాటి అవుట్‌పుట్‌లలో నాన్-క్లాసికల్ ప్రాబబిలిటీ డిస్ట్రిబ్యూషన్‌లను రూపొందించగల సామర్థ్యం. ప్రాబబిలిటీ డిస్ట్రిబ్యూషన్‌తో ఒకరు చేయగల స్థానిక కార్యకలాపాలు దాని నుండి సాంప్లింగ్ \n"
" చేయడం లేదా దానిపై పరిమాణాలను ఎస్టిమేట్ వేయడం. పర్యవసానంగా, సాంప్లింగ్ మరియు ఎస్టిమేట్ వేయడం ఈ కార్యకలాపాలు క్వాంటం అల్గారిథమ్ అభివృద్ధి యొక్క ప్రాథమిక బిల్డింగ్ బ్లాక్‌లను ఏర్పరుస్తాయి. ఆ విధంగా, <https://research.ibm.com/blog/qiskit-runtime-for-useful-quantum-computing>`__ అని ప్రకటించబడినందున, వీటిని ఇంప్లిమెంట్ చేసే రెండు ప్రాథమిక ప్రిమిటివ్స్ రెండు ఆపరేషన్లు అయిన సాంప్లర్ మరియు ఎస్టిమేటర్ ప్రవేశపెట్టబడ్డాయి:"

#: ../../migration/01_migration_guide_0.5.ipynb:31
msgid "Sampler class calculates probabilities or quasi-probabilities of bitstrings from quantum circuits. The base class is `qiskit.primitives.BaseSampler <https://qiskit.org/documentation/stubs/qiskit.primitives.BaseSampler.html>`__."
msgstr "శాంప్లర్ క్లాస్ క్వాంటం సర్క్యూట్‌ల నుండి బిట్‌స్ట్రింగ్‌ల సంభావ్యత లేదా క్వాసి-సంభావ్యతలను గణిస్తుంది. `qiskit.primitives.BaseSampler <https://qiskit.org/documentation/stubs/qiskit.primitives.BaseSampler.html>`__ అనేది బేస్ క్లాస్."

#: ../../migration/01_migration_guide_0.5.ipynb:32
msgid "Estimator class estimates expectation values of quantum circuits and observables. The base class is `qiskit.primitives.BaseEstimator <https://qiskit.org/documentation/stubs/qiskit.primitives.BaseEstimator.html>`__."
msgstr "ఎస్టిమేటర్ క్లాస్ క్వాంటం సర్క్యూట్‌లు మరియు అబ్సెర్వబల్స్ వాటి అంచనా విలువలను అంచనా వేస్తుంది. దీని బేస్ క్లాస్ `qiskit.primitives.BaseEstimator <https://qiskit.org/documentation/stubs/qiskit.primitives.BaseEstimator.html>`__."

#: ../../migration/01_migration_guide_0.5.ipynb:34
msgid "Qiskit Terra provides core interfaces and two implementations:"
msgstr "Qiskit Terra కోర్ ఇంటర్‌ఫేస్‌లు మరియు రెండు ఇంప్లిమెంటేషన్ను అందిస్తుంది:"

#: ../../migration/01_migration_guide_0.5.ipynb:36
msgid "The reference implementation that is statevector based. This implementation does require a backend or a simulator, it relies on the classes from the `quantum_info <https://qiskit.org/documentation/apidoc/quantum_info.html>`__ package."
msgstr "రిఫరెన్స్ ఇంప్లిమెంటేషన్ స్టేట్ విక్టర్ పై ఆధారపడినది. ఈ ఇంప్లిమెంటేషన్కు బ్యాకెండ్ లేదా సిమ్యులేటర్ అవసరం, ఇది `quantum_info <https://qiskit.org/documentation/apidoc/quantum_info.html>`__ ప్యాకేజీలోని క్లాస్లపై ఆధారపడుతుంది."

#: ../../migration/01_migration_guide_0.5.ipynb:37
msgid "The backend based primitives are to support provider/backends that do not support primitives directly. This implementation requires an instance of a backend to be passed to a primitive."
msgstr "బ్యాకెండ్ ఆధారిత ప్రిమిటివ్‌లు నేరుగా ప్రిమిటివ్‌లకు మద్దతు ఇవ్వని ప్రొవైడర్/బ్యాకెండ్‌లకు మద్దతు ఇవ్వడం కొరకు. ఈ ఇంప్లిమెంటేషన్కు బ్యాకెండ్‌ని ప్రిమిటివ్కు పంపడానికి ఒక ఇన్స్టాన్స్ అవసరం."

#: ../../migration/01_migration_guide_0.5.ipynb:39
msgid "More information on the Qiskit Terra primitives can be found in the `documentation <https://qiskit.org/documentation/apidoc/primitives.html>`__."
msgstr "Qiskit Terra ప్రిమిటివ్లపై మరింత సమాచారం `డాక్యుమెంటేషన్ <https://qiskit.org/documentation/apidoc/primitives.html>`__లో చూడవచ్చు."

#: ../../migration/01_migration_guide_0.5.ipynb:41
msgid "It is worth mentioning other implementations as well:"
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:43
msgid "Aer primitives should be used for Aer simulator. They extend corresponding interfaces from Terra and can be used in the same way as primitives from Terra. See `documentation <https://qiskit.org/documentation/apidoc/aer_primitives.html>`__ for more information."
msgstr "ఏర్ సిమ్యులేటర్ కోసం ఏర్ ప్రిమిటివ్‌లను ఉపయోగించాలి. అవి Terra నుండి సంబంధిత ఇంటర్‌ఫేస్‌లను విస్తరింపజేస్తాయి మరియు Terra నుండి ప్రిమిటివ్‌ల మాదిరిగానే ఉపయోగించబడతాయి. మరింత సమాచారం కోసం `డాక్యుమెంటేషన్ <https://qiskit.org/documentation/apidoc/aer_primitives.html>`__ చూడండి."

#: ../../migration/01_migration_guide_0.5.ipynb:44
msgid "The runtime primitives to be used with IBM devices. This is an implementation that is focused on cloud computing on actual hardware. See `here <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/apidocs/runtime_service.html>`__."
msgstr "IBM పరికరాలతో ఉపయోగించాల్సిన రన్‌టైమ్ ప్రిమిటివ్‌లు. ఇది వాస్తవ హార్డ్‌వేర్‌పై క్లౌడ్ కంప్యూటింగ్‌పై దృష్టి సారించిన ఇంప్లిమెంటేషన్. `ఇక్కడ <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/apidocs/runtime_service.html>`__ చూడండి."

#: ../../migration/01_migration_guide_0.5.ipynb:46
msgid "Along with the primitives Terra has some primitive-like algorithms that are highly useful in QML and used by the new 0.5 functions:"
msgstr "ప్రిమిటివ్లతో పాటుగా Terra కొన్ని ప్రిమిటివ్-వంటి అల్గారిథమ్‌లను కలిగి ఉంది, ఇవి QMLలో అత్యంత ఉపయోగకరంగా ఉంటాయి మరియు కొత్త 0.5 ఫంక్షన్‌ల ద్వారా ఉపయోగించబడతాయి:"

#: ../../migration/01_migration_guide_0.5.ipynb:48
msgid "Algorithms to calculate the gradient of a quantum circuit. For each core primitive there's a corresponding base interface that defines quantum circuit gradient. The documentation on gradients is `here <https://qiskit.org/documentation/stubs/qiskit.algorithms.gradients.html>`__."
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:49
msgid "Algorithms that compute the fidelity or \"closeness\" of pairs of quantum states. Currently, only one implementation is available that requires a sampler primitive and is based on the compute-uncompute method. The documentation is `here <https://qiskit.org/documentation/stubs/qiskit.algorithms.state_fidelities.html>`__."
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:51
msgid "Both two new algorithms are very similar to the core primitives, they share the same method signatures, so they may be called as high level primitives despite they are not in the primitives package."
msgstr "రెండు కొత్త అల్గారిథమ్‌లు కోర్ ప్రిమిటివ్‌లకు చాలా పోలి ఉంటాయి, అవి ఒకే పద్ధతి సిగ్నేచర్లను పంచుకుంటాయి, కాబట్టి అవి ప్రిమిటివ్ ప్యాకేజీలో లేనప్పటికీ వాటిని హై లెవల్ ప్రిమిటివ్‌లుగా పిలవవచ్చు."

#: ../../migration/01_migration_guide_0.5.ipynb:56
msgid "The previous implementation consisted of a single class `QuantumKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.QuantumKernel.html>`__ that did everything:"
msgstr "మునుపటి ఇంప్లిమెంటేషన్లో, `QuantumKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.QuantumKernel.html>`__ క్లాస్ ప్రతిదీ చేసింది:"

#: ../../migration/01_migration_guide_0.5.ipynb:58
msgid "Constructed circuits"
msgstr "నిర్మించిన సర్క్యూట్లు"

#: ../../migration/01_migration_guide_0.5.ipynb:59
msgid "Executed circuits and evaluated overlap between circuits"
msgstr "ఎగ్జిక్యూటెడ్ సర్క్యూట్‌లు మరియు సర్క్యూట్‌ల మధ్య మూల్యాంకనం చేయబడిన అతివ్యాప్తి"

#: ../../migration/01_migration_guide_0.5.ipynb:60
msgid "Provided training parameters"
msgstr "అందించబడ్డ శిక్షణ పారామితులు"

#: ../../migration/01_migration_guide_0.5.ipynb:61
msgid "Kept track of the values assigned to the parameters."
msgstr "పారామితులకు కేటాయించిన విలువలను ట్రాక్ చేయండి."

#: ../../migration/01_migration_guide_0.5.ipynb:63
msgid "The implementation became sophisticated and inflexible and adding support of the new primitives could be tricky. To address the issues, a new flexible and extendable design of quantum kernels was introduced. The goals of the new design are:"
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:65
msgid "Migrate to the primitives and leverage the fidelity algorithm. Now users may plug in their own implementations of fidelity calculations."
msgstr "ప్రిమిటివ్స్లకు మైగ్రేట్ చేయండి మరియు ఫిడిలిటీ అల్గారిథమ్‌ను ప్రభావితం చేయండి. ఇప్పుడు వినియోగదారులు ఫిడిలిటీ క్యాలీసులషన్స్ యొక్క సొంత ఇంప్లిమెంటేషన్స్ ను ప్లగ్ ఇన్ చేయవచ్చు."

#: ../../migration/01_migration_guide_0.5.ipynb:66
msgid "Extract trainability feature to a dedicated class."
msgstr "ప్రత్యేక క్లాస్కి శిక్షణ లక్షణాన్ని సంగ్రహించండి."

#: ../../migration/01_migration_guide_0.5.ipynb:67
msgid "Introduce a base class that can be extended by other kernel implementations."
msgstr "ఇతర కెర్నల్ ఇంప్లిమెంటేషన్ల ద్వారా ఎక్స్టెండెడ్బ చేయబడే బేస్ క్లాస్‌ని పరిచయం చేయండి."

#: ../../migration/01_migration_guide_0.5.ipynb:69
msgid "The new design of quantum kernel is shown on the next diagram."
msgstr "క్వాంటం కెర్నల్ యొక్క కొత్త డిజైన్ తదుపరి రేఖాచిత్రంలో చూపబడింది."

#: ../../migration/01_migration_guide_0.5.ipynb:80
msgid "|new_qk.png|"
msgstr "|new_qk.png|"

#: ../../migration/01_migration_guide_0.5.ipynb:82
msgid "new_qk.png"
msgstr "new_qk.png"

#: ../../migration/01_migration_guide_0.5.ipynb:93
msgid "The new kernels expose the same interface and the same parameters except the ``quantum_instance`` parameter. This parameter does not have a direct replacement and instead the ``fidelity`` parameter must be used. The backend handling/selection, which was previously done using the ``quantum_instance``, is now taken care of via the Sampler primitive given to the ``fidelity``."
msgstr "కొత్త కెర్నలు ``quantum_instance`` పరామితిని మినహాయించి అదే ఇంటర్‌ఫేస్ మరియు అదే పారామితులను బహిర్గతం చేస్తాయి. ఈ పరామితికి ప్రత్యక్ష ప్రత్యామ్నాయం లేదు మరియు బదులుగా ``ఫిడెలిటీ`` పరామితిని తప్పనిసరిగా ఉపయోగించాలి. గతంలో ``quantum_instance`` ని ఉపయోగించి చేసిన బ్యాకెండ్ హ్యాండ్లింగ్/ఎంపిక ఇప్పుడు ``ఫిడెలిటీ``కి ఇవ్వబడిన శాంప్లర్ ప్రిమిటివ్ ద్వారా జాగ్రత్త తీసుకోబడుతుంది."

#: ../../migration/01_migration_guide_0.5.ipynb:95
msgid "A new hierarchy shown on the diagram introduces:"
msgstr "రేఖాచిత్రంలో చూపబడిన కొత్త సోపానక్రమం వీటిని పరిచయం చేస్తుంది:"

#: ../../migration/01_migration_guide_0.5.ipynb:97
msgid "A base and abstract class `BaseKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.BaseKernel.html>`__ is introduced. All concrete implementation must inherit this class."
msgstr "బేస్ మరియు ఆబ్స్ట్రాక్ట్ క్లాస్ `BaseKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.BaseKernel.html>`__ పరిచయం చేయబడింది. అన్ని కాంక్రీట్ ఇంప్లిమెంటేషన్ తప్పనిసరిగా ఈ క్లాస్ ని వారసత్వంగా పొందాలి."

#: ../../migration/01_migration_guide_0.5.ipynb:98
msgid "A fidelity based quantum kernel `FidelityQuantumKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.FidelityQuantumKernel.html>`__ is added. This is a direct **replacement** of the previous quantum kernel implementation. The difference is that the new class takes a fidelity instance to estimate overlaps and construct kernel matrix."
msgstr "ఫిడెలిటీ ఆధారిత క్వాంటం కెర్నల్ `FidelityQuantumKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.FidelityQuantumKernel.html>`__ జోడించబడింది. ఇది మునుపటి క్వాంటం కెర్నల్ ఇంప్లిమెంటేషన్ యొక్క ప్రత్యక్ష **భర్తీ**. వ్యత్యాసం ఏమిటంటే, కొత్త క్లాస్ అతివ్యాప్తులను అంచనా వేయడానికి మరియు కెర్నల్ మాతృకను నిర్మించడానికి ఫిడిలిటీ ఇన్స్టన్స్ ను తీసుకుంటుంది."

#: ../../migration/01_migration_guide_0.5.ipynb:99
msgid "A new abstract class `TrainableKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.TrainableKernel.html>`__ is introduced to generalize ability to train quantum kernels."
msgstr "క్వాంటం కెర్నల్‌లకు శిక్షణ ఇచ్చే సామర్థ్యాన్ని సాధారణీకరించడానికి కొత్త ఆబ్స్ట్రాక్ట్ క్లాసు `TrainableKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.TrainableKernel.html>`__ పరిచయం చేయబడింది."

#: ../../migration/01_migration_guide_0.5.ipynb:100
msgid "A fidelity-based trainable quantum kernel `TrainableFidelityQuantumKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.TrainableFidelityQuantumKernel.html>`__ is introduced. This is a **replacement** of the previous quantum kernel if a trainable kernel is required. The trainer `QuantumKernelTrainer <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.alogrithms.QuantumKernelTrainer.html>`__ now accepts both quantum kernel implementations, the new one and the previous one."
msgstr "ఫిడిలిటీ-ఆధారితంగా శిక్షణ పొందగలిగే క్వాంటం కెర్నల్ `TrainableFidelityQuantumKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.TrainableFidelityQuantumKernel.html>`__ పరిచయం చేయబడింది. శిక్షణ పొందగల కెర్నల్ అవసరమైతే ఇది మునుపటి క్వాంటం కెర్నల్ని **భర్తీ** చేస్తుంది. ట్రైనర్ `QuantumKernelTrainer <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.alogrithms.QuantumKernelTrainer.html>`__ ఇప్పుడు కొత్త మరియు పాత క్వాంటం కెర్నల్ ఇంప్లిమెంటేషన్లు రెండింటినీ అంగీకరిస్తుంది."

#: ../../migration/01_migration_guide_0.5.ipynb:103
msgid "For convenience, the previous quantum kernel implementation, `QuantumKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.QuantumKernel.html>`__, now extends both new abstract classes and thus it is compatible with the new introduced interfaces. This implementation is now **pending deprecation**, will be deprecated in a future release and subsequently removed after that. New, primitive-based quantum kernels should be used instead."
msgstr "సౌలభ్యం కోసం, మునుపటి క్వాంటం కెర్నల్ ఇంప్లిమెంటేషన్, `QuantumKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.QuantumKernel.html>`__, ఇప్పుడు కొత్త అబ్స్ట్రాక్ట్ క్లాస్లను ఎక్స్టెండ్ చేస్తుంది మరియు కొత్తగా ప్రవేశపెట్టిన ఇంటర్‌ఫేస్‌లతో అనుకూలిస్తుంది. ఈ అమలు ఇప్పుడు **పెండింగ్ డిప్రెకషన్లో**, భవిష్యత్ విడుదలలో నిలిపివేయబడుతుంది మరియు ఆ తర్వాత తీసివేయబడుతుంది. బదులుగా కొత్త, ప్రిమిటివ్-ఆధారిత క్వాంటం కెర్నల్‌లను ఉపయోగించాలి."

#: ../../migration/01_migration_guide_0.5.ipynb:105
msgid "The existing algorithms such as `QSVC <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.QSVC.html>`__, `QSVR <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.QSVR.html>`__ and other kernel-based algorithms are updated and work with both implementations."
msgstr "ప్రస్తుతం ఉన్న అల్గారిథమ్‌లైన `QSVC <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.QSVC.html>`__, `QSVR <https://qiskit.org/documentation/machine- learning/stubs/qiskit_machine_learning.algorithms.QSVR.html>`__ మరియు ఇతర కెర్నల్-ఆధారిత అల్గోరిథంలు నవీకరించబడ్డాయి మరియు ఇంప్లిమెంటేషన్ల తో పని చేయబడుతుంది."

#: ../../migration/01_migration_guide_0.5.ipynb:107
msgid "For example a QSVM classifier can be trained as follows."
msgstr "ఉదాహరణకు QSVM వర్గీకరణకు ఈ క్రింది విధంగా శిక్షణ ఇవ్వవచ్చు."

#: ../../migration/01_migration_guide_0.5.ipynb:119
msgid "Create a dataset"
msgstr "డేటాసెట్‌ను సృష్టించండి"

#: ../../migration/01_migration_guide_0.5.ipynb:130
msgid "Fixing randomization."
msgstr "ఫిక్సింగ్ రాండమైజేషన్."

#: ../../migration/01_migration_guide_0.5.ipynb:153
msgid "Generate a simple dataset using scikit-learn."
msgstr "Scikit-learn ఉపయోగించి సాధారణ డేటాసెట్‌ను తయారుచేయండి."

#: ../../migration/01_migration_guide_0.5.ipynb:183
msgid "Previous implementation of quantum kernel"
msgstr "క్వాంటం కెర్నల్ యొక్క మునుపటి ఇంప్లిమెంటేషన్"

#: ../../migration/01_migration_guide_0.5.ipynb:194
msgid "In the previous implementation we start from creating an instance of ``QuantumInstance``. This class defines where our quantum circuits are executed. In this case we wrap a statevector simulator in the quantum instance."
msgstr "మునుపటి ఇంప్లిమెంటేషన్లో మనం ``QuantumInstance`` యొక్క ఇనిస్టాన్స్ను సృష్టించడం నుండి ప్రారంభిస్తాము. ఈ క్లాస్ మన క్వాంటం సర్క్యూట్‌లు ఎక్కడ అమలు చేయబడతాయో నిర్వచిస్తుంది. ఈ సందర్భంలో మనము క్వాంటం ఇనిస్టాన్స్లో స్టేట్‌వెక్టర్ సిమ్యులేటర్‌ను వ్రాప్ చేస్తాము."

#: ../../migration/01_migration_guide_0.5.ipynb:250
msgid "Then create a quantum kernel."
msgstr "తరువాత క్వాంటం కెర్నల్‌ను సృష్టించండి."

#: ../../migration/01_migration_guide_0.5.ipynb:275
msgid "And finally we fit an SVM classifier."
msgstr "చివరగా మనము SVM వర్గీకరణను ఫిట్ చేస్తాము."

#: ../../migration/01_migration_guide_0.5.ipynb:326
msgid "New implementation of quantum kernel"
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:328
msgid "In the new implementation we start from creating a Fidelity instance. Fidelity is optional and quantum kernel will create it automatically if none is passed. But here, we create it manually for illustrative purposes. To create a fidelity instance we pass a sampler. The sampler is the reference implementation and defines where our quantum circuits are executed. You may create a sampler instance from `QiskitRuntimeService <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.html>`__ to leverage Qiskit runtime services."
msgstr "కొత్త ఇంప్లిమెంటేషన్‌లో మనం ఫిడెలిటీ ఇన్‌స్టెన్స్‌ని సృష్టించడం నుండి ప్రారంభిస్తాము. ఫిడెలిటీ అనేది ఐచ్ఛికం మరియు ఏదీ పాస్ కాకపోతే క్వాంటం కెర్నల్ దానిని స్వయంచాలకంగా సృష్టిస్తుంది. కానీ ఇక్కడ, మనము దానిని దృష్టాంత ప్రయోజనాల కోసం మాన్యువల్‌గా సృష్టిస్తాము. ఫిడెలిటీ ఇన్‌స్టెన్స్‌ను సృష్టించడానికి మనము \n"
"సాంప్లర్ను పాస్ చేస్తాము. సాంప్లర్ అనేది రిఫరెన్స్ ఇంప్లిమెంటేషేన్ మరియు మన క్వాంటం సర్క్యూట్‌లు ఎక్కడ అమలు చేయబడతాయో నిర్వచిస్తుంది. Qiskit రన్‌టైమ్ సేవలను వినియోగించుకోవడానికి మీరు `QiskitRuntimeService <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.html>`__ నుండి సామ్ప్లెర్ ఇనిస్టాన్స్ను సృష్టించవచ్చు."

#: ../../migration/01_migration_guide_0.5.ipynb:353
msgid "Next, we create a new quantum kernel with the fidelity instance."
msgstr "తరువాత, మనము ఫిడిలిటీ ఇనిస్టాన్స్ తో కొత్త క్వాంటం కెర్నల్‌ను సృష్టిస్తాము."

#: ../../migration/01_migration_guide_0.5.ipynb:377
msgid "Then we fit an SVM classifier the same way as before."
msgstr "మునుపటి మాదిరిగానే SVM వర్గీకరణకు ఫిట్ చేస్తున్నాం."

#: ../../migration/01_migration_guide_0.5.ipynb:430
msgid "Changes in the quantum neural networks are not as dramatic as in quantum kernels. In addition, and as a replacement to the existing neural networks, two new networks are introduced. The new networks introduced are `SamplerQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.SamplerQNN.html>`__ and `EstimatorQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.EstimatorQNN.html>`__ which are detailed below and are replacements for the pre-existing `CircuitQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__, `OpflowQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.OpflowQNN.html>`__ and `TwoLayerQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.html>`__ which are now pending deprecated."
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:434
msgid "SamplerQNN"
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:436
msgid "A new `Sampler Quantum Neural Network <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.SamplerQNN.html>`__ leverages the sampler primitive, sampler gradients and is a **direct replacement** of `CircuitQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__."
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:438
msgid "The new `SamplerQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.SamplerQNN.html>`__ exposes a similar interface to the existing `CircuitQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__, with a few differences. One is the ``quantum_instance`` parameter. This parameter does not have a direct replacement, and instead the ``sampler`` parameter must be used. The ``gradient`` parameter keeps the same name as in the `CircuitQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__ implementation, but it no longer accepts Opflow gradient classes as inputs; instead, this parameter expects an (optionally custom) primitive gradient. The ``sampling`` option has been removed for the time being, as this information is not currently exposed by the sampler, and might correspond to future lower-level primitives."
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:441
msgid "The existing training algorithms such as `VQC <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.VQC.html>`__ that were based on `CircuitQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__, are updated to accept both implementations. The implementation of `NeuralNetworkClassifier <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.html>`__ has not changed."
msgstr "`CircuitQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__ పై ఆధారపడిన `VQC <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.VQC.html>`__ వంటి ప్రస్తుత శిక్షణా అల్గారిథమ్‌లు, రెండు ఇంప్లిమెంటేషన్లను ఆమోదించడానికి నవీకరించబడింది. `NeuralNetworkClassifier <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.html>`__ యొక్క ఇంప్లిమెంటేషన్ మారలేదు."

#: ../../migration/01_migration_guide_0.5.ipynb:444
msgid "The existing `CircuitQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__ is now **pending deprecation**, will be deprecated in a future release and subsequently removed after that."
msgstr "ఇప్పటికే ఉన్న `CircuitQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__ ఇప్పుడు ** డెప్రికేషన్ పెండింగ్‌**లో ఉంది, తదుపరి విడుదలలో నిరాకరించబడుతుంది మరియు తదుపరి విడుదలలో తీసివేయబడుతుంది."

#: ../../migration/01_migration_guide_0.5.ipynb:446
msgid "We'll show how to train a variational quantum classifier using both networks. For this purposes we re-use the dataset generated for the quantum kernel. For both quantum neural networks we still have to construct a feature map, an ansatz and combine them into a single quantum circuit."
msgstr "రెండు నెట్‌వర్క్‌లను ఉపయోగించి వైవిధ్యమైన క్వాంటం వర్గీకరణకు ఎలా శిక్షణ ఇవ్వాలో మేము చూపుతాము. ఈ ప్రయోజనాల కోసం మేము క్వాంటం కెర్నల్ కొరకు రూపొందించిన డేటాసెట్‌ను మళ్లీ ఉపయోగిస్తాము. రెండు క్వాంటం న్యూరల్ నెట్‌వర్క్‌ల కోసం మనం ఇంకా ఫీచర్ మ్యాప్, ఒక అన్‌సాట్జ్‌ని నిర్మించాలి మరియు వాటిని ఒకే క్వాంటం సర్క్యూట్‌గా కలపాలి."

#: ../../migration/01_migration_guide_0.5.ipynb:476
msgid "We need an interpret function as well. We define our usual parity function that maps bitstrings either to :math:`0` or :math:`1`."
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:498
#: ../../migration/01_migration_guide_0.5.ipynb:860
msgid "We fix the initial point to get the same results from both networks."
msgstr "రెండు నెట్‌వర్క్‌ల నుండి ఒకే ఫలితాలను పొందడానికి మనము ప్రారంభ పాయింట్‌ను ఫిక్స్ చేస్తున్నాం."

#: ../../migration/01_migration_guide_0.5.ipynb:520
msgid "Building a classifier using ``CircuitQNN``"
msgstr "``CircuitQNN``ని ఉపయోగించి వర్గీకరణను రూపొందించడం"

#: ../../migration/01_migration_guide_0.5.ipynb:522
msgid "We create a ``CircuitQNN`` instance and re-use the quantum instance created for the quantum kernel."
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:552
msgid "Construct a classifier out of the network, train it and score it. We are not aiming for good results, so the number of iterations is set to a small number to reduce overall execution time."
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:639
msgid "Building a classifier using ``SamplerQNN``"
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:641
msgid "Instead of ``QuantumInstance`` create an instance of the reference ``Sampler``."
msgstr "``QuantumInstance``కి బదులుగా ``సామ్ప్లెర్`` సూచన యొక్క ఇన్ స్టాన్స్ను సృష్టించండి."

#: ../../migration/01_migration_guide_0.5.ipynb:664
msgid "Now, we create a instance of ``SamplerQNN``. The difference with ``CircuitQNN`` is that we pass a sampler instead of a quantum instance."
msgstr "ఇప్పుడు, మేము ``SamplerQNN`` యొక్క ఇన్ స్టాన్స్ను సృష్టిస్తాము. ``CircuitQNN`తో ఉన్న తేడా ఏమిటంటే, మనం క్వాంటం ఇన్‌స్టాన్స్‌కు బదులుగా సామ్ప్లెర్ను పాస్ చేస్తాము."

#: ../../migration/01_migration_guide_0.5.ipynb:694
msgid "Construct a classifier and fit it as usual. As ``neural_network`` we pass a created ``SamplerQNN`` and this is the only difference."
msgstr "క్లాసిఫైర్ ను నిర్మించి, దానిని యధావిధిగా ఫిట్ చేయండి. ``neural_network``గా మనం సృష్టించిన ``SamplerQNN``ని పాస్ చేస్తాము మరియు ఇది ఒక్కటే తేడా."

#: ../../migration/01_migration_guide_0.5.ipynb:777
msgid "Instead of constructing a quantum neural network manually, you may train ``VQC``. It takes either a quantum instance or a sampler, depending on what is passed it automatically constructs either ``CircuitQNN`` or ``SamplerQNN`` respectively."
msgstr "క్వాంటం న్యూరల్ నెట్‌వర్క్‌ను మాన్యువల్‌గా నిర్మించడానికి బదులుగా, మీరు ``VQC``కి శిక్షణ ఇవ్వవచ్చు. ఇది క్వాంటం ఇన్‌స్టాన్స్ లేదా శాంప్లర్‌ను తీసుకుంటుంది, పాస్ అయినదానిపై ఆధారపడి ఇది స్వయంచాలకంగా వరుసగా ``CircuitQNN`` లేదా ``SamplingQNN``ని నిర్మిస్తుంది."

#: ../../migration/01_migration_guide_0.5.ipynb:789
msgid "EstimatorQNN"
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:791
msgid "A new `Estimator quantum neural network <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.EstimatorQNN.html>`__ leverages the estimator primitive, estimator gradients and is a **direct replacement** of `OpflowQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.OpflowQNN.html>`__."
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:793
msgid "The new `EstimatorQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.EstimatorQNN.html>`__ exposes a similar interface to the existing `OpflowQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.OpflowQNN.html>`__, with a few differences. One is the ``quantum_instance`` parameter. This parameter does not have a direct replacement, and instead the ``estimator`` parameter must be used. The ``gradient`` parameter keeps the same name as in the `OpflowQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.OpflowQNN.html>`__ implementation, but it no longer accepts Opflow gradient classes as inputs; instead, this parameter expects an (optionally custom) primitive gradient."
msgstr "కొత్త `EstimatorQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.EstimatorQNN.html>`__ కొన్ని తేడాలతో, ఇప్పటికే ఉన్న `OpflowQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.OpflowQNN.html>`__,కి సారూప్య ఇంటర్‌ఫేస్‌ను బహిర్గతం చేస్తుంది.``quantum_instance`` పరామితి అందులో ఒకటి. ఈ పరామితికి ప్రత్యక్ష ప్రత్యామ్నాయం లేదు మరియు బదులుగా ``estimator`` పరామితిని తప్పనిసరిగా ఉపయోగించాలి. ``gradient`` పరామితి `OpflowQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.OpflowQNN.html>`__ ఇంప్లిమెంటేషన్లో ఉన్న పేరునే ఉంచుతుంది, కానీ ఇన్‌పుట్‌లుగా Opflow గ్రేడియంట్ క్లాస్లు ఇది ఇకపై ఆమోదించబడదు. ఈ పరామితి (ఐచ్ఛికంగా అనుకూలమైన) ప్రిమిటివ్ గ్రేడియంట్ను ఆశిస్తుంది."

#: ../../migration/01_migration_guide_0.5.ipynb:796
msgid "The existing training algorithms such as `VQR <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.VQR.html>`__ that were based on the `TwoLayerQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.html>`__, are updated to accept both implementations. The implementation of `NeuralNetworkRegressor <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.html>`__ has not changed."
msgstr "`TwoLayerQNN <https://qiskit/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.html>`__ ఆధారంగా రూపొందించబడిన `VQR <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.VQR.html>`__ వంటి ప్రస్తుత శిక్షణా అల్గారిథమ్‌లు, రెండు ఇంప్లిమెంటేషన్లను ఆమోదించడానికి నవీకరించబడ్డాయి. `NeuralNetworkRegressor <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.html>`__ యొక్క ఇంప్లిమెంటేషన్ మారలేదు."

#: ../../migration/01_migration_guide_0.5.ipynb:799
msgid "The existing `OpflowQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.OpflowQNN.html>`__ is now **pending deprecation**, will be deprecated in a future release and subsequently removed after that."
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:801
msgid "We'll show how to train a variational quantum regressor using both networks. We start from generating a simple regression dataset."
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:828
msgid "We still have to construct a feature map, an ansatz and combine them into a single quantum circuit for both quantum neural networks."
msgstr "మనము ఇప్పటికీ ఒక ఫీచర్ మ్యాప్, ఒక అన్సాట్జ్‌ని నిర్మించాలి మరియు క్వాంటం న్యూరల్ నెట్‌వర్క్‌ల కోసం వాటిని ఒకే క్వాంటం సర్క్యూట్‌గా కలపాలి."

#: ../../migration/01_migration_guide_0.5.ipynb:882
msgid "Building a regressor using ``OpflowQNN``"
msgstr "``Opflow ANN``ని ఉపయోగించి రిగ్రెషన్‌ను రూపొందించడం"

#: ../../migration/01_migration_guide_0.5.ipynb:884
msgid "We create an ``OpflowQNN`` instance and re-use the quantum instance created for the quantum kernel."
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:950
msgid "Construct a regressor out of the network, train it and score it. In this case we use a gradient based optimizer, thus the network makes use of the gradient framework and due to nature of the dataset converges very quickly."
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:1006
msgid "Building a regressor using ``EstimatorQNN``"
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:1008
msgid "Create an instance of the reference Estimator. You may create an estimator instance from `QiskitRuntimeService <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.html>`__ to leverage Qiskit runtime services."
msgstr "రిఫరెన్స్ ఎస్టిమేటర్ యొక్క ఇన్స్టెన్స్ను సృష్టించండి. Qiskit రన్‌టైమ్ సేవలను వినియోగించుకోవడానికి మీరు `QiskitRuntimeService <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.html>`__ నుండి ఎస్టిమేట్ర్ ఇన్స్టెన్స్ను సృష్టించవచ్చు."

#: ../../migration/01_migration_guide_0.5.ipynb:1031
msgid "Now, we create a instance of ``EstimatorQNN``. The network creates an observable as :math:`Z^{\\otimes n}`, where :math:`n` is the number of qubit, if it is not specified."
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:1059
msgid "Construct a variational quantum regressor and fit it. In this case we use a gradient based optimizer, thus the network makes use of the `default estimator gradient <https://qiskit.org/documentation/stubs/qiskit.algorithms.gradients.ParamShiftEstimatorGradient.html>`__ that is created automatically."
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:1114
msgid "Instead of constructing a quantum neural network manually, you may train ``VQR``. It takes either a quantum instance or an estimator, depending on what is passed it automatically constructs either ``TwoLayerQNN`` or ``EstimatorQNN`` respectively."
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:1128
msgid "A few other components, not mentioned explicitly above, are also deprecated or pending deprecation:"
msgstr ""

#: ../../migration/01_migration_guide_0.5.ipynb:1130
msgid "`TwoLayerQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.html>`__ is pending deprecation. Users should use `EstimatorQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.EstimatorQNN.html>`__ instead."
msgstr "`TwoLayerQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.html>`__ పెండింగ్ డిప్రెకషన్లో ఉంది. బదులుగా వినియోగదారులు `EstimatorQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.EstimatorQNN.html>`__ని ఉపయోగించాలి."

#: ../../migration/01_migration_guide_0.5.ipynb:1131
msgid "The Distribution Learners package is deprecated fully. This package contains such classes as `DiscriminativeNetwork <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.html>`__, `GenerativeNetwork <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.html>`__, `NumPyDiscriminator <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.html>`__, `PyTorchDiscriminator <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.html>`__, `QuantumGenerator <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.QuantumGenerator.html>`__, `QGAN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.QGAN.html>`__. Instead, please refer to the `new QGAN tutorial <../tutorials/04_torch_qgan.ipynb>`__. This tutorial introduces step-by-step how to build a PyTorch-based QGAN using quantum neural networks."
msgstr "డిస్ట్రిబ్యూషన్ లెర్నర్స్ ప్యాకేజీ పూర్తిగా నిలిపివేయబడింది. ఈ ప్యాకేజీ `DiscriminativeNetwork <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.html>`__, `GenerativeNetwork <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.html>`__, `NumPyDiscriminator <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.html>`__, `PyTorchDiscriminator <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.html>`__, `QuantumGenerator <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.QuantumGenerator.html>`__, `QGAN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.QGAN.html>`__ మొదలగు క్లాస్లని కలిగి ఉంటుంది. బదులుగా, దయచేసి `కొత్త QGAN ట్యుటోరియల్ <../tutorials/04_torch_qgan.ipynb>`__ని చూడండి. క్వాంటం న్యూరల్ నెట్‌వర్క్‌లను ఉపయోగించి PyTorch-ఆధారిత QGANని ఎలా నిర్మించాలో ఈ ట్యుటోరియల్ దశల వారీగా పరిచయం చేస్తుంది."

#: ../../migration/01_migration_guide_0.5.ipynb:1134
msgid "The Runtime package is deprecated. This package contains a client to Qiskit Programs that embed Qiskit Runtime in the algorithmic interfaces and facilitate usage of algorithms and scripts in the cloud. You should use `QiskitRuntimeService <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.html>`__ to leverage primitives and runtimes."
msgstr "రన్‌టైమ్ ప్యాకేజీ విస్మరించబడింది. ఈ ప్యాకేజీ Qiskit ప్రోగ్రామ్‌లకు క్లయింట్‌ను కలిగి ఉంది, ఇది Qiskit రన్‌టైమ్‌ను అల్గారిథమిక్ ఇంటర్‌ఫేస్‌లలో పొందుపరిచింది మరియు క్లౌడ్‌లో అల్గారిథమ్‌లు మరియు స్క్రిప్ట్‌ల వినియోగాన్ని సులభతరం చేస్తుంది. మీరు ప్రిమిటివులని మరియు రన్‌టైమ్‌లను ప్రభావితం చేయడానికి `QiskitRuntimeService <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.html>`__ని ఉపయోగించాలి."

