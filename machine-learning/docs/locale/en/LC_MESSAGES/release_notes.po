# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, 2021, Qiskit Machine Learning Development Team
# This file is distributed under the same license as the Qiskit Machine
# Learning package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit Machine Learning 0.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-12 22:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../../<reno.sphinxext branch>:4 current
msgid "Release Notes"
msgstr ""

#: ../../../<reno.sphinxext branch>:9 current
msgid "0.2.0"
msgstr ""

#: ../../../<reno.sphinxext branch>:14 current
msgid "New Features"
msgstr ""

#: ../../../<reno.sphinxext branch>:18 current
msgid ""
"A base class ``TrainableModel`` is introduced for machine learning "
"models. This class follows Scikit-Learn principles and makes the quantum "
"machine learning compatible with classical models. Both "
"``NeuralNetworkClassifier`` and ``NeuralNetworkRegressor`` extend this "
"class. A base class ``ObjectiveFunction`` is introduced for objective "
"functions optimized by machine learning models. There are three objective"
" functions introduced that are used by ML models: "
"``BinaryObjectiveFunction``, ``MultiClassObjectiveFunction``, and "
"``OneHotObjectiveFunction``. These functions are used internally by the "
"models."
msgstr ""

#: ../../../<reno.sphinxext branch>:28 current
msgid ""
"The ``optimizer`` argument for the classes ``NeuralNetworkClassifier`` "
"and  ``NeuralNetworkRegressor``, both of which extends the "
"``TrainableModel``  class, is made optional with the default value being "
"``SLSQP()``. The same is true for the classes ``VQC`` and ``VQR`` as they"
" inherit from  ``NeuralNetworkClassifier`` and ``NeuralNetworkRegressor``"
" respectively."
msgstr ""

#: ../../../<reno.sphinxext branch>:36 current
msgid ""
"The constructor of ``NeuralNetwork``, and all classes that inherit from "
"it, has a new parameter ``input_gradients`` which defaults to False. "
"Previously this parameter could only be set using the setter method. Note"
" that ``TorchConnector`` previously set ``input_gradients`` of the "
"``NeuralNetwork`` it was instantiated with to ``True``. This is not "
"longer the case. So if you use ``TorchConnector`` and want to compute the"
" gradients w.r.t. the input, make sure you set ``input_gradients=True`` "
"on the ``NeuralNetwork`` before passing it to ``TorchConnector``."
msgstr ""

#: ../../../<reno.sphinxext branch>:45 current
msgid ""
"Added a parameter ``initial_point`` to the neural network classifiers and"
" regressors. This an array that is passed to an optimizer as an initial "
"point to start from."
msgstr ""

#: ../../../<reno.sphinxext branch>:50 current
msgid ""
"Computation of gradients with respect to input data in the backward "
"method of ``NeuralNetwork`` is now optional. By default gradients are not"
" computed. They may inspected and turned on, if required, by getting or "
"setting a new property ``input_gradients`` in the ``NeuralNetwork`` "
"class."
msgstr ""

#: ../../../<reno.sphinxext branch>:57 current
msgid ""
"Now ``NeuralNetworkClassifier`` extends ``ClassifierMixin`` and "
"``NeuralNetworkRegressor`` extends ``RegressorMixin`` from Scikit-Learn "
"and rely on their methods for score calculation. This also adds an "
"ability to pass sample weights as an optional parameter to the score "
"methods."
msgstr ""

#: ../../../<reno.sphinxext branch>:66 current
msgid "Deprecation Notes"
msgstr ""

#: ../../../<reno.sphinxext branch>:70 current
msgid ""
"The valid values passed to the loss argument of the ``TrainableModel`` "
"constructor were partially deprecated (i.e. ``loss='l1'`` is replaced "
"with ``loss='absolute_error'`` and ``loss='l2'`` is  replaced with "
"``loss='squared_error'``). This affects instantiation of classes like the"
" ``NeuralNetworkClassifier``. This change was made to reduce confusion "
"that stems from using lowercase 'l' character which can be mistaken for a"
" numeric '1' or capital 'I'. You should update your model instantiations "
"by replacing 'l1' with 'absolute_error' and 'l2' with  'squared_error'."
msgstr ""

#: ../../../<reno.sphinxext branch>:80 current
msgid ""
"The ``weights`` property in ``TorchConnector`` is deprecated in favor of "
"the ``weight`` property which is PyTorch compatible. By default, PyTorch "
"layers expose ``weight`` properties to get access to the computed "
"weights."
msgstr ""

#: ../../../<reno.sphinxext branch>:88 current
msgid "Bug Fixes"
msgstr ""

#: ../../../<reno.sphinxext branch>:92 current
msgid ""
"This fixes the exception that occurs when no ``optimizer`` argument is "
"passed to ``NeuralNetworkClassifier`` and ``NeuralNetworkRegressor``."
msgstr ""

#: ../../../<reno.sphinxext branch>:97 current
msgid ""
"Fixes the computation of gradients in TorchConnector when a batch of "
"input samples is provided."
msgstr ""

#: ../../../<reno.sphinxext branch>:101 current
msgid ""
"`TorchConnector` now returns the correct input gradient dimensions during"
" the backward pass in hybrid nn training."
msgstr ""

#: ../../../<reno.sphinxext branch>:105 current
msgid ""
"Added a dedicated handling of ``ComposedOp`` as a operator in "
"``OpflowQNN``. In this case output shape is determined from the first "
"operator in the ``ComposedOp`` instance."
msgstr ""

#: ../../../<reno.sphinxext branch>:110 current
msgid ""
"Fix the dimensions of the gradient in the quantum generator for the qGAN "
"training."
msgstr ""

